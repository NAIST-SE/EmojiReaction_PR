ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,3,2016-12-01T16:25:56Z,2016-12-01T16:26:07Z,2016-12-01T19:14:08Z,MERGED,True,74,37,3,https://github.com/baallan,changes for latest cray build,1,[],https://github.com/ovis-hpc/ovis/pull/3,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/3,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,3,2016-12-01T16:25:56Z,2016-12-01T16:26:07Z,2016-12-01T19:14:08Z,MERGED,True,74,37,3,https://github.com/baallan,changes for latest cray build,1,[],https://github.com/ovis-hpc/ovis/pull/3,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/3#issuecomment-264265146,,Please don't merge on release repo. I reset the master to OVIS-3.3.2.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,12,2018-08-30T19:09:30Z,2018-09-05T14:04:31Z,2018-09-05T17:30:40Z,CLOSED,False,1,1,1,https://github.com/nevermindewe,Changed default csv directory permissions to 750 from 777.,1,[],https://github.com/ovis-hpc/ovis/pull/12,https://github.com/nevermindewe,1,https://github.com/ovis-hpc/ovis/pull/12,"csv directory should probably not be world-writable.
Next steps are to make this configurable with the plugin.","csv directory should probably not be world-writable.
Next steps are to make this configurable with the plugin.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,12,2018-08-30T19:09:30Z,2018-09-05T14:04:31Z,2018-09-05T17:30:40Z,CLOSED,False,1,1,1,https://github.com/nevermindewe,Changed default csv directory permissions to 750 from 777.,1,[],https://github.com/ovis-hpc/ovis/pull/12,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/12#issuecomment-418743149,"csv directory should probably not be world-writable.
Next steps are to make this configurable with the plugin.","Good catch. I have developed a patch that will make this configurable for the next release. It will be submitted to the ogc gitlab instance, then migrate to github.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,12,2018-08-30T19:09:30Z,2018-09-05T14:04:31Z,2018-09-05T17:30:40Z,CLOSED,False,1,1,1,https://github.com/nevermindewe,Changed default csv directory permissions to 750 from 777.,1,[],https://github.com/ovis-hpc/ovis/pull/12,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/12#issuecomment-418814469,"csv directory should probably not be world-writable.
Next steps are to make this configurable with the plugin.","This has been fixed in ogc MR 1019,1020.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,13,2018-09-01T19:01:48Z,2018-09-05T13:59:09Z,2018-09-05T13:59:09Z,CLOSED,False,2,2,1,https://github.com/neilmunday,Typo fixes for jobid plugin man page,1,[],https://github.com/ovis-hpc/ovis/pull/13,https://github.com/neilmunday,1,https://github.com/ovis-hpc/ovis/pull/13,Fixes a couple of typos in the jobid plugin man page.,Fixes a couple of typos in the jobid plugin man page.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,13,2018-09-01T19:01:48Z,2018-09-05T13:59:09Z,2018-09-05T13:59:09Z,CLOSED,False,2,2,1,https://github.com/neilmunday,Typo fixes for jobid plugin man page,1,[],https://github.com/ovis-hpc/ovis/pull/13,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/13#issuecomment-418741217,Fixes a couple of typos in the jobid plugin man page.,This request has been transferred to the ogc 3.4 and master branch request list at ogc as MRs 1017/1018. Should appear in next release.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,41,2019-04-17T21:59:28Z,2019-05-02T22:53:56Z,2019-05-02T22:53:57Z,CLOSED,False,771,1,9,https://github.com/morrone,New Lustre client plugin,3,[],https://github.com/ovis-hpc/ovis/pull/41,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/41,"This lustre client plugin is expected to work with at least lustre 2.8 and
lustre 2.10.  In lustre 2.12 the gathered stats are no longer retrievable
without enhanced privileges, so this will not work with lustre 2.12.0.
This plugin takes a different approach than the existing lustre plugin.
It focusses on the llite stats file and just a handful of additional
single-file values.
This plugin works without any configuration (and, in fact, ignores
any configuration).  It simply creates metric sets for any found
lustre client stats.
It supports creating metric sets dynamically as new lustre file
systems are mounted.  It would also remove old metric sets for
lustre file systems that have been unmounted, but that functionality
is disabled until ldms_set_delete() is fixed in a later ovis v4
release.","This lustre client plugin is expected to work with at least lustre 2.8 and
lustre 2.10.  In lustre 2.12 the gathered stats are no longer retrievable
without enhanced privileges, so this will not work with lustre 2.12.0.
This plugin takes a different approach than the existing lustre plugin.
It focusses on the llite stats file and just a handful of additional
single-file values.
This plugin works without any configuration (and, in fact, ignores
any configuration).  It simply creates metric sets for any found
lustre client stats.
It supports creating metric sets dynamically as new lustre file
systems are mounted.  It would also remove old metric sets for
lustre file systems that have been unmounted, but that functionality
is disabled until ldms_set_delete() is fixed in a later ovis v4
release.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,41,2019-04-17T21:59:28Z,2019-05-02T22:53:56Z,2019-05-02T22:53:57Z,CLOSED,False,771,1,9,https://github.com/morrone,New Lustre client plugin,3,[],https://github.com/ovis-hpc/ovis/pull/41,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/41#issuecomment-484695126,"This lustre client plugin is expected to work with at least lustre 2.8 and
lustre 2.10.  In lustre 2.12 the gathered stats are no longer retrievable
without enhanced privileges, so this will not work with lustre 2.12.0.
This plugin takes a different approach than the existing lustre plugin.
It focusses on the llite stats file and just a handful of additional
single-file values.
This plugin works without any configuration (and, in fact, ignores
any configuration).  It simply creates metric sets for any found
lustre client stats.
It supports creating metric sets dynamically as new lustre file
systems are mounted.  It would also remove old metric sets for
lustre file systems that have been unmounted, but that functionality
is disabled until ldms_set_delete() is fixed in a later ovis v4
release.","Before we could cherry pick this back to ogc for v3, we need some changes. I'll list the ones that jump out at me without testing first. There may be others with runtime testing.
a) add in the ldms/configure.ac an --enable-llnl-lustre210 option and conditional build controls in llnl/Makefile.am (like: if ENABLE_LLNL_EDAC).
b) it needs to support the standard options for producer, instance, schema, jobid, componentid.
c) If I run this sampler at 1Hz, do I really need to rescan the input directory for every sample? or can I get away with rescanning for new ones every N seconds and simply don't update the set data for entries that disappear? N would be a configuration parameter with some more meaningful name than N; maybe 'rescan'.
d) what happens if /proc gets unmounted? are the  error codes checked on all the places they should be and trapped in that case? [yeah, it sounds silly, but it happens in production].
And it would be helpful if you could post a short slice of the data that gets produced (csv store).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,41,2019-04-17T21:59:28Z,2019-05-02T22:53:56Z,2019-05-02T22:53:57Z,CLOSED,False,771,1,9,https://github.com/morrone,New Lustre client plugin,3,[],https://github.com/ovis-hpc/ovis/pull/41,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/41#issuecomment-484712825,"This lustre client plugin is expected to work with at least lustre 2.8 and
lustre 2.10.  In lustre 2.12 the gathered stats are no longer retrievable
without enhanced privileges, so this will not work with lustre 2.12.0.
This plugin takes a different approach than the existing lustre plugin.
It focusses on the llite stats file and just a handful of additional
single-file values.
This plugin works without any configuration (and, in fact, ignores
any configuration).  It simply creates metric sets for any found
lustre client stats.
It supports creating metric sets dynamically as new lustre file
systems are mounted.  It would also remove old metric sets for
lustre file systems that have been unmounted, but that functionality
is disabled until ldms_set_delete() is fixed in a later ovis v4
release.","Thanks for the review!

a) add in the ldms/configure.ac an --enable-llnl-lustre210 option and conditional build controls in llnl/Makefile.am (like: if ENABLE_LLNL_EDAC).

I can, but what is the use case for that?  There are no external dependencies in the plugins, so they can always be built.  configure options like that usually exist to control building of things that might have external dependencies, and therefore might build in some situations, but not in others.

b) it needs to support the standard options for producer, instance, schema, jobid, componentid.

Not all of them make sense for this plugin, since the plugin is more dynamic than most.
Producer I could certainly add as an option.  The default behavior of using the hostname will probably be fine for almost everyone, but it wouldn't hurt to allow the user to specify it.
The schema name is intentionally the same everywhere.  It always describes the same data format, so the schema name is always the same.  I'm not sure that I see a use case for changing the schema name in this method of use.
Instance name is dynamically generated in this plugin, so I don't know how that could be employed very sanely.  ""instance"" might be interpreted as a prefix to be applied to the instance name that the plugin generates, but then the semantics would be different than in most of the other plugins.  I'm not sure that would be a good idea.
The jobid and componentid options seem specific to certain schemas rather than built in values like the metric set instance name.  Since my schema doesn't have them, does it make sense for this plugin to parse those options?  Must my schema contain them?
jobid doesn't seem like something people would generally use with this plugin.  I am expecting that the ldmsd and plugin would be long-lived through many jobs running on the system, so it is not clear to me why a statically assigned jobid at configuration time is useful.  Can you explain the use case there?
Ditto component id.  What is a ""component"" in respect to a lustre client metric set?

c) If I run this sampler at 1Hz, do I really need to rescan the input directory for every sample? or can I get away with rescanning for new ones every N seconds and simply don't update the set data for entries that disappear? N would be a configuration parameter with some more meaningful name than N; maybe 'rescan'.

Yep, that is actually why I broke the refresh() function out cleanly, in case we wanted to do that at some point.  The compute time at 1Hz is inconsequential, so I figured it was premature optimization.  Is that going to be required for initial landing?

d) what happens if /proc gets unmounted? are the error codes checked on all the places they should be and trapped in that case? [yeah, it sounds silly, but it happens in production.

It is my intent that it handle that just fine.  If you see something that I missed, let me know.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,41,2019-04-17T21:59:28Z,2019-05-02T22:53:56Z,2019-05-02T22:53:57Z,CLOSED,False,771,1,9,https://github.com/morrone,New Lustre client plugin,3,[],https://github.com/ovis-hpc/ovis/pull/41,https://github.com/morrone,4,https://github.com/ovis-hpc/ovis/pull/41#issuecomment-484718888,"This lustre client plugin is expected to work with at least lustre 2.8 and
lustre 2.10.  In lustre 2.12 the gathered stats are no longer retrievable
without enhanced privileges, so this will not work with lustre 2.12.0.
This plugin takes a different approach than the existing lustre plugin.
It focusses on the llite stats file and just a handful of additional
single-file values.
This plugin works without any configuration (and, in fact, ignores
any configuration).  It simply creates metric sets for any found
lustre client stats.
It supports creating metric sets dynamically as new lustre file
systems are mounted.  It would also remove old metric sets for
lustre file systems that have been unmounted, but that functionality
is disabled until ldms_set_delete() is fixed in a later ovis v4
release.","Here's am example of the data produced from ldlm_ls:
  METADATA --------
    Producer Name : opal186
    Instance Name : opal186/lquake-ffff94f4c92fb000
      Schema Name : lustre_llite_general
             Size : 1944
     Metric Count : 38
               GN : 4
  DATA ------------
        Timestamp : Wed Apr 17 14:50:13 2019 -0700 [722717us]
         Duration : [0.000048s]
       Consistent : TRUE
             Size : 328
               GN : 120
  -----------------
M char[]     hostname                                   ""opal186""
M char[]     fs_name                                    ""lquake""
M char[]     llite                                      ""lquake-ffff94f4c92fb000""
D u64        stats.dirty_pages_hits                     0
D u64        stats.dirty_pages_misses                   0
D u64        stats.read_bytes.sum                       1873435335
D u64        stats.write_bytes.sum                      25730754372
D u64        stats.brw_read.sum                         0
D u64        stats.brw_write.sum                        0
D u64        stats.ioctl                                1
D u64        stats.open                                 272400
D u64        stats.close                                272400
D u64        stats.mmap                                 0
D u64        stats.page_fault                           0
D u64        stats.page_mkwrite                         0
D u64        stats.seek                                 0
D u64        stats.fsync                                0
D u64        stats.readdir                              32328
D u64        stats.setattr                              258508
D u64        stats.truncate                             0
D u64        stats.flock                                0
D u64        stats.getattr                              46494868
D u64        stats.create                               0
D u64        stats.link                                 0
D u64        stats.unlink                               0
D u64        stats.symlink                              0
D u64        stats.mkdir                                2235
D u64        stats.rmdir                                0
D u64        stats.mknod                                0
D u64        stats.rename                               1
D u64        stats.statfs                               154
D u64        stats.alloc_inode                          277177
D u64        stats.setxattr                             1
D u64        stats.getxattr                             47017170
D u64        stats.getxattr_hits                        46625381
D u64        stats.listxattr                            0
D u64        stats.removexattr                          256276
D u64        stats.inode_permission                     2484808",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,41,2019-04-17T21:59:28Z,2019-05-02T22:53:56Z,2019-05-02T22:53:57Z,CLOSED,False,771,1,9,https://github.com/morrone,New Lustre client plugin,3,[],https://github.com/ovis-hpc/ovis/pull/41,https://github.com/morrone,5,https://github.com/ovis-hpc/ovis/pull/41#issuecomment-484746054,"This lustre client plugin is expected to work with at least lustre 2.8 and
lustre 2.10.  In lustre 2.12 the gathered stats are no longer retrievable
without enhanced privileges, so this will not work with lustre 2.12.0.
This plugin takes a different approach than the existing lustre plugin.
It focusses on the llite stats file and just a handful of additional
single-file values.
This plugin works without any configuration (and, in fact, ignores
any configuration).  It simply creates metric sets for any found
lustre client stats.
It supports creating metric sets dynamically as new lustre file
systems are mounted.  It would also remove old metric sets for
lustre file systems that have been unmounted, but that functionality
is disabled until ldms_set_delete() is fixed in a later ovis v4
release.","@baallan , I updated this pull request with some of the changes that you requested.
There is now a configuration option.  I called it ""llnl-lustre"".  This plugin is not intended to be for only lustre 2.10, so I didn't want to have the version in the configure string.
I added all of the options that you requested, although two of them I ignore. :)  I'm not sure what to do with ""schema"" (which is static) or ""instance"" (which is dynamically generated).
I didn't change the directory scan.  The dvs_sampler works the same way, so there is at least precedence for this approach.  If it really bothers you, I'll bow to your desire and add a refresh interval tomorrow.
Speaking of dvs_sampler, it looks like it too will accept an ""instance"" option and then silently ignores it.  So it doesn't look like I am alone in thinking it doesn't make sense as a required option.
dvs_sampler does allow overriding the schema name.  I don't quite see the rationale in letting users change the name of a fixed schema, but I'll do it if required.
Thanks!",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,41,2019-04-17T21:59:28Z,2019-05-02T22:53:56Z,2019-05-02T22:53:57Z,CLOSED,False,771,1,9,https://github.com/morrone,New Lustre client plugin,3,[],https://github.com/ovis-hpc/ovis/pull/41,https://github.com/baallan,6,https://github.com/ovis-hpc/ovis/pull/41#issuecomment-484765741,"This lustre client plugin is expected to work with at least lustre 2.8 and
lustre 2.10.  In lustre 2.12 the gathered stats are no longer retrievable
without enhanced privileges, so this will not work with lustre 2.12.0.
This plugin takes a different approach than the existing lustre plugin.
It focusses on the llite stats file and just a handful of additional
single-file values.
This plugin works without any configuration (and, in fact, ignores
any configuration).  It simply creates metric sets for any found
lustre client stats.
It supports creating metric sets dynamically as new lustre file
systems are mounted.  It would also remove old metric sets for
lustre file systems that have been unmounted, but that functionality
is disabled until ldms_set_delete() is fixed in a later ovis v4
release.","The project has adopted a guideline that autoconf have a default disable flag for new plugins until wide testing has been completed, even for plugins that just parse text files. This gets us around build bugs in actual code or in automake definitions, should such appear.
I can relent on the version in the plugin name, at least for now.
schema gets passed through (or should) to the set registration. It allows users who don't like lustre_client_general to rename the schema to something simpler and it's a bit of future-proofing for ldms v5 which will be allowing multiple instances of the same sampler (how that future would benefit your particular sampler isn't yet obvious).
dvs_sampler might be commonly deployed at a sampling frequency of 1/minute (I don't know this to be true). I know lustre sampling at 1/second is what we want to do at snl. It may be that rescanning /proc is blindingly fast and my suggestion is a premature optimization. Have you any testing done running the sampler at 10Hz and seeing no problems/delays? For how many lustre mount points? What if there is a mount point per user?
dvs and our local ib switch sampler both ignore instance, so there is precedence for it as you say. As long as there is a man page documenting how the sampler overrides the instance naming convention, we're good.
Unless you have some future larger schema in mind, I would drop the stats prefix from the metrics.
Are the brw* stats actually used, or are they leftovers that haven't been dropped from the report format provided by lustre?
component_id is an arbitrary integer id, typically mapped reversibly to hostname by a site-specifiic convention. It should be included in all metric sets, like producer is also user definable. It's fine, but most commonly redundant, to include host separately in your metrics.
jobid is key to all our job level analysis on clusters. In v3 plugins, it is supported in all plugins (or nearly so) by using the LJI_ macros from ldms_jobid.h as seen in meminfo.c. In ldms v4, using the sampler_base takes care of this. We have found it unreliable at best to try to do joins of slurmdb data with ldms data after the fact.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,41,2019-04-17T21:59:28Z,2019-05-02T22:53:56Z,2019-05-02T22:53:57Z,CLOSED,False,771,1,9,https://github.com/morrone,New Lustre client plugin,3,[],https://github.com/ovis-hpc/ovis/pull/41,https://github.com/morrone,7,https://github.com/ovis-hpc/ovis/pull/41#issuecomment-484953682,"This lustre client plugin is expected to work with at least lustre 2.8 and
lustre 2.10.  In lustre 2.12 the gathered stats are no longer retrievable
without enhanced privileges, so this will not work with lustre 2.12.0.
This plugin takes a different approach than the existing lustre plugin.
It focusses on the llite stats file and just a handful of additional
single-file values.
This plugin works without any configuration (and, in fact, ignores
any configuration).  It simply creates metric sets for any found
lustre client stats.
It supports creating metric sets dynamically as new lustre file
systems are mounted.  It would also remove old metric sets for
lustre file systems that have been unmounted, but that functionality
is disabled until ldms_set_delete() is fixed in a later ovis v4
release.","I've made most of the changes that you talk about (and you were probably just responding to my first message anyway), so the conversation that follows in this comment is just because I am interested and shouldn't have any bearing on the landing of this patch.

schema gets passed through (or should) to the set registration. It allows users who don't like lustre_client_general to rename the schema to something simpler and it's a bit of future-proofing for ldms v5 which will be allowing multiple instances of the same sampler (how that future would benefit your particular sampler isn't yet obvious).

I'm unclear on the future proofing argument.  Having multiple instances of the same sampler on a node would seem to have no bearing on the schema name.  If the schema represents the same data, and for for a plugin like mine it would, the schema name absolutely should be the same in both instances.  The instances will have their individual metrics sets differentiated by having different ""instance"" names in the metric sets.  Correct?  I should think that the schema name should only ever be different when the format of the data in the metric set is different (i.e. when the actual schema is really differerent).

component_id is an arbitrary integer id, typically mapped reversibly to hostname by a site-specifiic convention. It should be included in all metric sets, like producer is also user definable. It's fine, but most commonly redundant, to include host separately in your metrics.

Yes, I was definitely getting confused about the sematics there.  Is component_id maybe a byproduct of history?  Maybe from a time before strings were supported?  When you say that the hostname field that I added is redundant, did you mean with component_id, or with producer?  Because if you meant with component_id, then I think you have that backwards. :)   For a site like ours, making up site-wide unique integer identifiers for absolutely every node that mounts lustre is a level of administrative complexity that I think our sysadmins would balk at.  And it would be entirely redundant with hostnames, which are already unique site-wide and instantly recognizable to humans without needing a look-up chart.  And if you mean that hostname is redundant with producer, then isn't component_id also redundant with producer?  That is the line of thought that made me start to doubt that I could trust the producer field, or maybe that producer doesn't appear in the csv data like the rest of the things in my schema or something.
So yeah, if producer will appear in each line of the csv data, and at least at our site we can always set it to hostname, then my hostname field in the schema can be dropped.

jobid is key to all our job level analysis on clusters. In v3 plugins, it is supported in all plugins (or nearly so) by using the LJI_ macros from ldms_jobid.h as seen in meminfo.c. In ldms v4, using the sampler_base takes care of this. We have found it unreliable at best to try to do joins of slurmdb data with ldms data after the fact.

I've added the jobid, so just just another reminder that this comment is just for discussion purposes, and doesn't have any bearing on the landing of the patch.  I have found that the LJI macros and the sampler_base both make too many assumptions about the way the plugin operates to be easily usable.  I am wondering why this is the best approach too.  Why should every plugin implement the same data in every single metric set?
Would it perhaps be easier to have a single ""jobid"" plugin that records the jobid?  That way the data is available in the same place as the rest of the LDMS data, and there is no need to go back to the slurmdb database (or equivalent).
If the jobid absolutely needs to be in every single metric set, then perhaps the jobid field should come precreated in all metric sets when ldms_set_new() is called?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,41,2019-04-17T21:59:28Z,2019-05-02T22:53:56Z,2019-05-02T22:53:57Z,CLOSED,False,771,1,9,https://github.com/morrone,New Lustre client plugin,3,[],https://github.com/ovis-hpc/ovis/pull/41,https://github.com/morrone,8,https://github.com/ovis-hpc/ovis/pull/41#issuecomment-484957371,"This lustre client plugin is expected to work with at least lustre 2.8 and
lustre 2.10.  In lustre 2.12 the gathered stats are no longer retrievable
without enhanced privileges, so this will not work with lustre 2.12.0.
This plugin takes a different approach than the existing lustre plugin.
It focusses on the llite stats file and just a handful of additional
single-file values.
This plugin works without any configuration (and, in fact, ignores
any configuration).  It simply creates metric sets for any found
lustre client stats.
It supports creating metric sets dynamically as new lustre file
systems are mounted.  It would also remove old metric sets for
lustre file systems that have been unmounted, but that functionality
is disabled until ldms_set_delete() is fixed in a later ovis v4
release.","OK, I think these are the only two outstanding issues:

dvs_sampler might be commonly deployed at a sampling frequency of 1/minute (I don't know this to be true). I know lustre sampling at 1/second is what we want to do at snl. It may be that rescanning /proc is blindingly fast and my suggestion is a premature optimization. Have you any testing done running the sampler at 10Hz and seeing no problems/delays? For how many lustre mount points? What if there is a mount point per user?

Yes, I think those will be absolutely fine.  I don't think the single directory listing is going to produce nearly as much load as the actual stat files' reading as the rate and number of filesystems are scaled up.  But I can see that this is cause for concern, so I'll just add a separate refresh rate in the interest of getting this landed quickly.

Unless you have some future larger schema in mind, I would drop the stats prefix from the metrics.
Are the brw* stats actually used, or are they leftovers that haven't been dropped from the report format provided by lustre?

Yes, expanding the schema in the future is what I had in mind.  I copied the approach of the existing lustre plugins, in which the prefix like ""stats."" provides a hint to where the data originated in lustre (the llite.*.stats file).  I tried to reduce the collected client data to a saner minimum, but we may need to add more fields in the future.  The ost/mdt plugins that I have in the wings work simularly, and they do have some extra fields from outside of the .stats file.  So, for instance, the ost plugin will have fields with the ""stats."" prefix for fields that come from the stats file.  The ost plugin has fields like ""stats.read_bytes"" alongside ""kbytesfree"".  The latter comes from the ""kbytesfree"" file, not fro the stats file.
But I'm not entirely wed to doing this the way that the the old lustre ldms plugins did it.  If it needs to change to land, I certainly will do so.  Let me know.
And yes, every field that I added in my plugin still exists in the Lustre code in at least some of the versions that this plugin is intended to support.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,41,2019-04-17T21:59:28Z,2019-05-02T22:53:56Z,2019-05-02T22:53:57Z,CLOSED,False,771,1,9,https://github.com/morrone,New Lustre client plugin,3,[],https://github.com/ovis-hpc/ovis/pull/41,https://github.com/morrone,9,https://github.com/ovis-hpc/ovis/pull/41#issuecomment-485023735,"This lustre client plugin is expected to work with at least lustre 2.8 and
lustre 2.10.  In lustre 2.12 the gathered stats are no longer retrievable
without enhanced privileges, so this will not work with lustre 2.12.0.
This plugin takes a different approach than the existing lustre plugin.
It focusses on the llite stats file and just a handful of additional
single-file values.
This plugin works without any configuration (and, in fact, ignores
any configuration).  It simply creates metric sets for any found
lustre client stats.
It supports creating metric sets dynamically as new lustre file
systems are mounted.  It would also remove old metric sets for
lustre file systems that have been unmounted, but that functionality
is disabled until ldms_set_delete() is fixed in a later ovis v4
release.","@baallan, OK, I think that I addressed all of the issues that you raised in this update.  I added a configurable rescan interval for scanning the llite directory (default 30 seconds).  I ditched the ""stats."" prefix.  And I changed the schema name to a shorter ""lustre_client"" for good measure. :)
Current output example:
  METADATA --------
    Producer Name : opal2
    Instance Name : opal2/lquake-ffff8f103a61e000
      Schema Name : lustre_client
             Size : 1864
     Metric Count : 40
               GN : 5
  DATA ------------
        Timestamp : Fri Apr 19 14:50:54 2019 -0700 [82052us]
         Duration : [0.000018s]
       Consistent : TRUE
             Size : 336
               GN : 43
  -----------------
M char[]     hostname                                   ""opal2""
M char[]     fs_name                                    ""lquake""
M char[]     llite                                      ""lquake-ffff8f103a61e000""
M u64        component_id                               0
D u64        job_id                                     0
D u64        dirty_pages_hits                           0
D u64        dirty_pages_misses                         0
D u64        read_bytes.sum                             0
D u64        write_bytes.sum                            0
D u64        brw_read.sum                               0
D u64        brw_write.sum                              0
D u64        ioctl                                      0
D u64        open                                       0
D u64        close                                      0
D u64        mmap                                       0
D u64        page_fault                                 0
D u64        page_mkwrite                               0
D u64        seek                                       0
D u64        fsync                                      0
D u64        readdir                                    0
D u64        setattr                                    3
D u64        truncate                                   0
D u64        flock                                      0
D u64        getattr                                    6
D u64        create                                     0
D u64        link                                       0
D u64        unlink                                     0
D u64        symlink                                    0
D u64        mkdir                                      0
D u64        rmdir                                      0
D u64        mknod                                      0
D u64        rename                                     0
D u64        statfs                                     3
D u64        alloc_inode                                1
D u64        setxattr                                   0
D u64        getxattr                                   12
D u64        getxattr_hits                              11
D u64        listxattr                                  0
D u64        removexattr                                0
D u64        inode_permission                           0",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,41,2019-04-17T21:59:28Z,2019-05-02T22:53:56Z,2019-05-02T22:53:57Z,CLOSED,False,771,1,9,https://github.com/morrone,New Lustre client plugin,3,[],https://github.com/ovis-hpc/ovis/pull/41,https://github.com/baallan,10,https://github.com/ovis-hpc/ovis/pull/41#issuecomment-485047574,"This lustre client plugin is expected to work with at least lustre 2.8 and
lustre 2.10.  In lustre 2.12 the gathered stats are no longer retrievable
without enhanced privileges, so this will not work with lustre 2.12.0.
This plugin takes a different approach than the existing lustre plugin.
It focusses on the llite stats file and just a handful of additional
single-file values.
This plugin works without any configuration (and, in fact, ignores
any configuration).  It simply creates metric sets for any found
lustre client stats.
It supports creating metric sets dynamically as new lustre file
systems are mounted.  It would also remove old metric sets for
lustre file systems that have been unmounted, but that functionality
is disabled until ldms_set_delete() is fixed in a later ovis v4
release.","I checked out the current branch and there are a few warnings when compiled -Wall that need to be fixed. (Ignore warnings related to LJI macros so long as jobid values get stored correctly).
I don't understand how
lustre_client.c:                if (llite_general_schema_init() < 0) {
lustre_client_general.c:int llite_general_schema_init(const char *producer_name)
lustre_client_general.c:        log_fn(LDMSD_LDEBUG, SAMP"" llite_general_schema_init()\n"");
lustre_client_general.h:int llite_general_schema_init();
is managing to compile without warnings, unless there are some hideous k&r c behaviors allowed through. maybe compile -pedantic?
The schema name from config needs to be passed through somehow.
Is it possible for you to test the dynamic behavior of this plugin (make a lustre item go away and come back) under valgrind? We need to be sure there are no wild pointers, leaks other than the expected ones related to sets, etc related to this plugin.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,41,2019-04-17T21:59:28Z,2019-05-02T22:53:56Z,2019-05-02T22:53:57Z,CLOSED,False,771,1,9,https://github.com/morrone,New Lustre client plugin,3,[],https://github.com/ovis-hpc/ovis/pull/41,https://github.com/morrone,11,https://github.com/ovis-hpc/ovis/pull/41#issuecomment-485141614,"This lustre client plugin is expected to work with at least lustre 2.8 and
lustre 2.10.  In lustre 2.12 the gathered stats are no longer retrievable
without enhanced privileges, so this will not work with lustre 2.12.0.
This plugin takes a different approach than the existing lustre plugin.
It focusses on the llite stats file and just a handful of additional
single-file values.
This plugin works without any configuration (and, in fact, ignores
any configuration).  It simply creates metric sets for any found
lustre client stats.
It supports creating metric sets dynamically as new lustre file
systems are mounted.  It would also remove old metric sets for
lustre file systems that have been unmounted, but that functionality
is disabled until ldms_set_delete() is fixed in a later ovis v4
release.","Yes, I agree that is odd, and needs to be cleaned up.  It didn't effect operation though.  -Wall warnings have been fixed.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,41,2019-04-17T21:59:28Z,2019-05-02T22:53:56Z,2019-05-02T22:53:57Z,CLOSED,False,771,1,9,https://github.com/morrone,New Lustre client plugin,3,[],https://github.com/ovis-hpc/ovis/pull/41,https://github.com/tom95858,12,https://github.com/ovis-hpc/ovis/pull/41#issuecomment-485423055,"This lustre client plugin is expected to work with at least lustre 2.8 and
lustre 2.10.  In lustre 2.12 the gathered stats are no longer retrievable
without enhanced privileges, so this will not work with lustre 2.12.0.
This plugin takes a different approach than the existing lustre plugin.
It focusses on the llite stats file and just a handful of additional
single-file values.
This plugin works without any configuration (and, in fact, ignores
any configuration).  It simply creates metric sets for any found
lustre client stats.
It supports creating metric sets dynamically as new lustre file
systems are mounted.  It would also remove old metric sets for
lustre file systems that have been unmounted, but that functionality
is disabled until ldms_set_delete() is fixed in a later ovis v4
release.","Unless you have some future larger schema in mind, I would drop the stats prefix from the metrics.
Are the brw* stats actually used, or are they leftovers that haven't been dropped from the report format provided by lustre?

Yes, expanding the schema in the future is what I had in mind.

Then you really should change the new name. Otherwise it will be very difficult to use this data subsequently for analysis when there is a mix of data with the same schema name, but different content.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,41,2019-04-17T21:59:28Z,2019-05-02T22:53:56Z,2019-05-02T22:53:57Z,CLOSED,False,771,1,9,https://github.com/morrone,New Lustre client plugin,3,[],https://github.com/ovis-hpc/ovis/pull/41,https://github.com/baallan,13,https://github.com/ovis-hpc/ovis/pull/41#issuecomment-485465713,"This lustre client plugin is expected to work with at least lustre 2.8 and
lustre 2.10.  In lustre 2.12 the gathered stats are no longer retrievable
without enhanced privileges, so this will not work with lustre 2.12.0.
This plugin takes a different approach than the existing lustre plugin.
It focusses on the llite stats file and just a handful of additional
single-file values.
This plugin works without any configuration (and, in fact, ignores
any configuration).  It simply creates metric sets for any found
lustre client stats.
It supports creating metric sets dynamically as new lustre file
systems are mounted.  It would also remove old metric sets for
lustre file systems that have been unmounted, but that functionality
is disabled until ldms_set_delete() is fixed in a later ovis v4
release.","A quick spin with valgrind using the test in the pull request to morrone/ovis lustre_plugins_v3 turned up some leaks, as noted in my comments on the source code here.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,41,2019-04-17T21:59:28Z,2019-05-02T22:53:56Z,2019-05-02T22:53:57Z,CLOSED,False,771,1,9,https://github.com/morrone,New Lustre client plugin,3,[],https://github.com/ovis-hpc/ovis/pull/41,https://github.com/morrone,14,https://github.com/ovis-hpc/ovis/pull/41#issuecomment-485629180,"This lustre client plugin is expected to work with at least lustre 2.8 and
lustre 2.10.  In lustre 2.12 the gathered stats are no longer retrievable
without enhanced privileges, so this will not work with lustre 2.12.0.
This plugin takes a different approach than the existing lustre plugin.
It focusses on the llite stats file and just a handful of additional
single-file values.
This plugin works without any configuration (and, in fact, ignores
any configuration).  It simply creates metric sets for any found
lustre client stats.
It supports creating metric sets dynamically as new lustre file
systems are mounted.  It would also remove old metric sets for
lustre file systems that have been unmounted, but that functionality
is disabled until ldms_set_delete() is fixed in a later ovis v4
release.","Then you really should change the new name. Otherwise it will be very difficult to use this data subsequently for analysis when there is a mix of data with the same schema name, but different content.

Absolutely.  When the schema is change in the future, the schema name will be changed as well.  What new name would I be changing right now, though?  Did you want a ""_v1"" added to the name or something?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,41,2019-04-17T21:59:28Z,2019-05-02T22:53:56Z,2019-05-02T22:53:57Z,CLOSED,False,771,1,9,https://github.com/morrone,New Lustre client plugin,3,[],https://github.com/ovis-hpc/ovis/pull/41,https://github.com/morrone,15,https://github.com/ovis-hpc/ovis/pull/41#issuecomment-485972123,"This lustre client plugin is expected to work with at least lustre 2.8 and
lustre 2.10.  In lustre 2.12 the gathered stats are no longer retrievable
without enhanced privileges, so this will not work with lustre 2.12.0.
This plugin takes a different approach than the existing lustre plugin.
It focusses on the llite stats file and just a handful of additional
single-file values.
This plugin works without any configuration (and, in fact, ignores
any configuration).  It simply creates metric sets for any found
lustre client stats.
It supports creating metric sets dynamically as new lustre file
systems are mounted.  It would also remove old metric sets for
lustre file systems that have been unmounted, but that functionality
is disabled until ldms_set_delete() is fixed in a later ovis v4
release.","You know whats funny?  The existing lustre plugins use unchangeable schema names, and they have dynamically generated schemas that will be different on each node (if I understand correctly).  But now the new plugin with static schemas will have a changeable schema name. :)",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,41,2019-04-17T21:59:28Z,2019-05-02T22:53:56Z,2019-05-02T22:53:57Z,CLOSED,False,771,1,9,https://github.com/morrone,New Lustre client plugin,3,[],https://github.com/ovis-hpc/ovis/pull/41,https://github.com/baallan,16,https://github.com/ovis-hpc/ovis/pull/41#issuecomment-485976162,"This lustre client plugin is expected to work with at least lustre 2.8 and
lustre 2.10.  In lustre 2.12 the gathered stats are no longer retrievable
without enhanced privileges, so this will not work with lustre 2.12.0.
This plugin takes a different approach than the existing lustre plugin.
It focusses on the llite stats file and just a handful of additional
single-file values.
This plugin works without any configuration (and, in fact, ignores
any configuration).  It simply creates metric sets for any found
lustre client stats.
It supports creating metric sets dynamically as new lustre file
systems are mounted.  It would also remove old metric sets for
lustre file systems that have been unmounted, but that functionality
is disabled until ldms_set_delete() is fixed in a later ovis v4
release.",The existing lustre plugins take an argument (list of mount points) which fixes the schema. Missing mount points report 0 values. The admin can define the old lustre plugin schema name (e.g. lustre_f_g). But you are correct that the lustre (and sysclassib and procstat) plugins have long been a thorn in our side wrt schema.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,41,2019-04-17T21:59:28Z,2019-05-02T22:53:56Z,2019-05-02T22:53:57Z,CLOSED,False,771,1,9,https://github.com/morrone,New Lustre client plugin,3,[],https://github.com/ovis-hpc/ovis/pull/41,https://github.com/morrone,17,https://github.com/ovis-hpc/ovis/pull/41#issuecomment-485986942,"This lustre client plugin is expected to work with at least lustre 2.8 and
lustre 2.10.  In lustre 2.12 the gathered stats are no longer retrievable
without enhanced privileges, so this will not work with lustre 2.12.0.
This plugin takes a different approach than the existing lustre plugin.
It focusses on the llite stats file and just a handful of additional
single-file values.
This plugin works without any configuration (and, in fact, ignores
any configuration).  It simply creates metric sets for any found
lustre client stats.
It supports creating metric sets dynamically as new lustre file
systems are mounted.  It would also remove old metric sets for
lustre file systems that have been unmounted, but that functionality
is disabled until ldms_set_delete() is fixed in a later ovis v4
release.","@baallan, I don't think those are memory leaks.  My best guess is that you shutdown ldmsd without first calling stop() and term() for the new plugin.  It looks like ldmsd fails to call term() on its own on exit (which seems like a bug to me), so yes, it will look like the plugin leaked memory because it was not given a chance to clean up.
When term() is called, I see no leaked memory from this plugin under valgrind.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,41,2019-04-17T21:59:28Z,2019-05-02T22:53:56Z,2019-05-02T22:53:57Z,CLOSED,False,771,1,9,https://github.com/morrone,New Lustre client plugin,3,[],https://github.com/ovis-hpc/ovis/pull/41,https://github.com/morrone,18,https://github.com/ovis-hpc/ovis/pull/41#issuecomment-485994295,"This lustre client plugin is expected to work with at least lustre 2.8 and
lustre 2.10.  In lustre 2.12 the gathered stats are no longer retrievable
without enhanced privileges, so this will not work with lustre 2.12.0.
This plugin takes a different approach than the existing lustre plugin.
It focusses on the llite stats file and just a handful of additional
single-file values.
This plugin works without any configuration (and, in fact, ignores
any configuration).  It simply creates metric sets for any found
lustre client stats.
It supports creating metric sets dynamically as new lustre file
systems are mounted.  It would also remove old metric sets for
lustre file systems that have been unmounted, but that functionality
is disabled until ldms_set_delete() is fixed in a later ovis v4
release.","OK, there is a new set of patches available.  Major changes are:

Everything combined into one file to satisfy the LJI_* macros.
No non-static globals
Schema name can be changed by user
Included baallan's patches",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,41,2019-04-17T21:59:28Z,2019-05-02T22:53:56Z,2019-05-02T22:53:57Z,CLOSED,False,771,1,9,https://github.com/morrone,New Lustre client plugin,3,[],https://github.com/ovis-hpc/ovis/pull/41,https://github.com/morrone,19,https://github.com/ovis-hpc/ovis/pull/41#issuecomment-486021808,"This lustre client plugin is expected to work with at least lustre 2.8 and
lustre 2.10.  In lustre 2.12 the gathered stats are no longer retrievable
without enhanced privileges, so this will not work with lustre 2.12.0.
This plugin takes a different approach than the existing lustre plugin.
It focusses on the llite stats file and just a handful of additional
single-file values.
This plugin works without any configuration (and, in fact, ignores
any configuration).  It simply creates metric sets for any found
lustre client stats.
It supports creating metric sets dynamically as new lustre file
systems are mounted.  It would also remove old metric sets for
lustre file systems that have been unmounted, but that functionality
is disabled until ldms_set_delete() is fixed in a later ovis v4
release.","I just pushed another update that avoids calling ldms_metric_by_name() in the main loop, instead using an rbt for faster index lookup.
The job_id index is also stored in global to avoid lookup.
I think that addresses everything requested.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,41,2019-04-17T21:59:28Z,2019-05-02T22:53:56Z,2019-05-02T22:53:57Z,CLOSED,False,771,1,9,https://github.com/morrone,New Lustre client plugin,3,[],https://github.com/ovis-hpc/ovis/pull/41,https://github.com/baallan,20,https://github.com/ovis-hpc/ovis/pull/41#issuecomment-488131613,"This lustre client plugin is expected to work with at least lustre 2.8 and
lustre 2.10.  In lustre 2.12 the gathered stats are no longer retrievable
without enhanced privileges, so this will not work with lustre 2.12.0.
This plugin takes a different approach than the existing lustre plugin.
It focusses on the llite stats file and just a handful of additional
single-file values.
This plugin works without any configuration (and, in fact, ignores
any configuration).  It simply creates metric sets for any found
lustre client stats.
It supports creating metric sets dynamically as new lustre file
systems are mounted.  It would also remove old metric sets for
lustre file systems that have been unmounted, but that functionality
is disabled until ldms_set_delete() is fixed in a later ovis v4
release.",@morrone  I retested and the functionality overall looks good enough. I closed the comments attached to the source about memory leaks; please review the other comments. The config() function needs a minor revision and the logging and missing macro constants usage has some nits. There are several 'could be better' type comments which you could revise to address or you can defer to the version of the plugin for ldms v4.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,41,2019-04-17T21:59:28Z,2019-05-02T22:53:56Z,2019-05-02T22:53:57Z,CLOSED,False,771,1,9,https://github.com/morrone,New Lustre client plugin,3,[],https://github.com/ovis-hpc/ovis/pull/41,https://github.com/morrone,21,https://github.com/ovis-hpc/ovis/pull/41#issuecomment-488860787,"This lustre client plugin is expected to work with at least lustre 2.8 and
lustre 2.10.  In lustre 2.12 the gathered stats are no longer retrievable
without enhanced privileges, so this will not work with lustre 2.12.0.
This plugin takes a different approach than the existing lustre plugin.
It focusses on the llite stats file and just a handful of additional
single-file values.
This plugin works without any configuration (and, in fact, ignores
any configuration).  It simply creates metric sets for any found
lustre client stats.
It supports creating metric sets dynamically as new lustre file
systems are mounted.  It would also remove old metric sets for
lustre file systems that have been unmounted, but that functionality
is disabled until ldms_set_delete() is fixed in a later ovis v4
release.","I have the plugins (server ones too) building externally against the TOSS ovis ldms packages.  I think in hindsight I agree that is the better approach than landing this in the upstream tree.  While this plugin might be close-ish to landing, I don't think that we'll want to make quite a few of the changes to the server plugins that will be required by upstream rules.  Our use requirements and schema design approaches just don't seem to be close enough aligned.  So with that in mind, I am going to retract this pull request.
Thank you for all of the feedback!",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,70,2019-11-06T21:27:05Z,2019-11-15T23:59:18Z,2019-11-15T23:59:18Z,CLOSED,False,2,2,1,https://github.com/morrone,Add ovis-test/test.h to dist so canonical tarball is buildable.,1,[],https://github.com/ovis-hpc/ovis/pull/70,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/70,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,70,2019-11-06T21:27:05Z,2019-11-15T23:59:18Z,2019-11-15T23:59:18Z,CLOSED,False,2,2,1,https://github.com/morrone,Add ovis-test/test.h to dist so canonical tarball is buildable.,1,[],https://github.com/ovis-hpc/ovis/pull/70,https://github.com/morrone,2,https://github.com/ovis-hpc/ovis/pull/70#issuecomment-554117932,,"@narategithub , good call.  I fixed that and refreshed the PR.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,70,2019-11-06T21:27:05Z,2019-11-15T23:59:18Z,2019-11-15T23:59:18Z,CLOSED,False,2,2,1,https://github.com/morrone,Add ovis-test/test.h to dist so canonical tarball is buildable.,1,[],https://github.com/ovis-hpc/ovis/pull/70,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/70#issuecomment-554575390,,Landed by cherry-pick.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,72,2019-11-07T21:04:00Z,2020-01-15T17:54:53Z,2020-01-15T17:54:54Z,CLOSED,False,1951,13,38,https://github.com/baallan,add ldms/src/contrib and config args to use it.,1,[],https://github.com/ovis-hpc/ovis/pull/72,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/72,"Our autoconf scripts never touch anything in lib,ldms/src/contrib/*
directly. The hooks fire the builds of contrib plugins after the main build is complete.","Our autoconf scripts never touch anything in lib,ldms/src/contrib/*
directly. The hooks fire the builds of contrib plugins after the main build is complete.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,72,2019-11-07T21:04:00Z,2020-01-15T17:54:53Z,2020-01-15T17:54:54Z,CLOSED,False,1951,13,38,https://github.com/baallan,add ldms/src/contrib and config args to use it.,1,[],https://github.com/ovis-hpc/ovis/pull/72,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/72#issuecomment-551408848,"Our autoconf scripts never touch anything in lib,ldms/src/contrib/*
directly. The hooks fire the builds of contrib plugins after the main build is complete.","The user can enable contrib plugins with --enable-contrib --with-contrib=sampler/tutorial_sampler,my_plugin,store/store_tutorial.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,72,2019-11-07T21:04:00Z,2020-01-15T17:54:53Z,2020-01-15T17:54:54Z,CLOSED,False,1951,13,38,https://github.com/baallan,add ldms/src/contrib and config args to use it.,1,[],https://github.com/ovis-hpc/ovis/pull/72,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/72#issuecomment-551974502,"Our autoconf scripts never touch anything in lib,ldms/src/contrib/*
directly. The hooks fire the builds of contrib plugins after the main build is complete.","@morrone So you would be more in favor of solution (1) in
https://github.com/ovis-hpc/ovis/wiki/Proposal-3.
I think I prefer (1) also.
In some sense, #72 is about having our cake and eating it too: the ovis source tree can have a defined (if ugly, as you say) way to drop in complete plugin projects from hardware vendors.
This enables the project to maintain a ""batteries included"" option from a single repository without the core framework developers taking on refactoring/maintenance of some potentially very ugly configure scripts(E.g. mpi or cuda dependent plugins) when we want to accept 3rd party plugins to the battery collection.
Each example plugin directory under the ovis/ldms/contrib directory individually looks a great deal like your llnl/ldms-plugins-llnl (full autotooling)
Even if you would never want your plugins dropped in the tree in this fashion, us having to develop and maintain that build hook ensures that we actually do export in the installation tree all the information a 3rd party package might need to ensure build compatibility.
For me, the holy grail of fixing our build system is to eliminate recursive automake and recursive configure entirely, but we don't have a spare developer to throw at maintaining such a scheme. That would certainly make the build faster and make it easier to drop in single-file plugins, but it still wouldn't solve the ""intersection of all possible plugins in configure.ac"" issue.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,72,2019-11-07T21:04:00Z,2020-01-15T17:54:53Z,2020-01-15T17:54:54Z,CLOSED,False,1951,13,38,https://github.com/baallan,add ldms/src/contrib and config args to use it.,1,[],https://github.com/ovis-hpc/ovis/pull/72,https://github.com/morrone,4,https://github.com/ovis-hpc/ovis/pull/72#issuecomment-552023471,"Our autoconf scripts never touch anything in lib,ldms/src/contrib/*
directly. The hooks fire the builds of contrib plugins after the main build is complete.","So you would be more in favor of solution (1) in

Yes, I would very much prefer (1) to (2).
But what I had originally suggested many months ago was to simply add a new ""contrib"" subdirectory for plugins.  It would work almost exactly the same as the current plugins.  No independent recursive build system.  Perhaps just split the ldsm/src/sampler directory into ldms/src/sampler/official and ldms/src/sampler/contrib.  The ""contrib"" plugins would all default to not being built, but otherwise no added complexity to the build system.  Call that option (3).
But since I figured out on my own how to do option (1) with ldms-plugins-llnl, now I think that is probably the prefered approach over all.  We should probably just document the external APIs and clean up the installed libraries so others can do the same more easily.

Even if you would never want your plugins dropped in the tree in this fashion, us having to develop and maintain that build hook ensures that we actually do export in the installation tree all the information a 3rd party package might need to ensure build compatibility.

Complex hooks in-tree are really not a great way to go about doing that.  It would be better to have a sample project external to the tree and just build that as part of a testing process (coordinated at a level above/outside the ldms tree).  An automated build farm or CI system could make that easy.  Or you can script it externally.  Lots of ways to skin that cat that do not require complicating the build system.

For me, the holy grail of fixing our build system is to eliminate recursive automake and recursive configure entirely, but we don't have a spare developer to throw at maintaining such a scheme.

For me, that is less of a holy grail than it is a nearer-term requirement if we are going to continue to use ldms.  There are two areas that are really making ldms far more effort to work with than is really necessary: build/packaging and configuration (or three areas, if you consider build and packaging separate).  I would advocate pausing developer effort on other tasks until those things are in better shape.  And I'll try to do my part as well.
I'm dipping my toes into the water on how to improve things now.  Some of my PRs (#71, #75, #76) are a result of beginning to investigate how to make that happen.  They are early cleanup that will make the greater build/packaging solution easier. It is also the motivation behind my question in issue #69.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,72,2019-11-07T21:04:00Z,2020-01-15T17:54:53Z,2020-01-15T17:54:54Z,CLOSED,False,1951,13,38,https://github.com/baallan,add ldms/src/contrib and config args to use it.,1,[],https://github.com/ovis-hpc/ovis/pull/72,https://github.com/baallan,5,https://github.com/ovis-hpc/ovis/pull/72#issuecomment-552031852,"Our autoconf scripts never touch anything in lib,ldms/src/contrib/*
directly. The hooks fire the builds of contrib plugins after the main build is complete.","Happy to see other toes in the water.
Option (3) is what we had starting as far back as ldms v2: sampler/$someoneelse was contributed. In a specific case llnl/ contributed edac. The project leads have been generally dissatisfied with the result -- vendors forked instead of contributing back. Granted forks may have been due to API problems or the fact of 'closed development' inside a private repository, rather than build integration issues.
Example projects external to the tree tend to get out of sync quickly. This I have seen on other projects where the core team was not able to focus on 3rd party extensibility at all times.
One of the big insanities detected during the 'contrib' exercise is that the installed ovis header structure is not followed inside the ovis C code. This means any dependent build has a big mess of include flags so that unadorned '#include ""sampler_base.h""' will be resolved correctly.
See also: https://github.com/baallan/distribution/blob/master/HISTORY.md for why there is a repo for packaging scripts and why they are a bit complicated. Normally this level of tribal build knowledge is hidden inside semi-private vendor packaging script repositories or regression setups.
If you think building and packaging is hard now, try maintaining and testing ldmsd on pre-general-availability platforms with a single configure script if it picks up dependencies on mpi, cuda, etc.
The following existing plugins would all need to become separate little projects:
transport: zap/rdma, zap/$cray-name-here
sampler: lustre*,  edac, cray*, sysclassib, opa2, syspapi, job_info, slurm, msr_interlagos, ...
store: sos
you get the idea. That's a lot of extra spec files, a lot of extra configure files.
If we go with a ""clean core, no batteries, spec files are easy"" approach to ldmsd, then we really have to add a staffer somewhere whose full time job is nothing but tracking spec files and testing for all the supported environments and (separately) all the supported plugins with non-trivial platform dependencies.  Because ultimately what customers want delivered is ""batteries included"".",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,72,2019-11-07T21:04:00Z,2020-01-15T17:54:53Z,2020-01-15T17:54:54Z,CLOSED,False,1951,13,38,https://github.com/baallan,add ldms/src/contrib and config args to use it.,1,[],https://github.com/ovis-hpc/ovis/pull/72,https://github.com/morrone,6,https://github.com/ovis-hpc/ovis/pull/72#issuecomment-552037260,"Our autoconf scripts never touch anything in lib,ldms/src/contrib/*
directly. The hooks fire the builds of contrib plugins after the main build is complete.","One of the big insanities detected during the 'contrib' exercise is that the installed ovis header structure is not followed inside the ovis C code. This means any dependent build has a big mess of include flags so that unadorned '#include ""sampler_base.h""' will be resolved correctly.

Yes!  I would definitely like to see the headers better organized within the project to allow internal plugins to use the same ""#include <ldms/sampler/sampler_base.h>"" include style as the plugin would use if it was pulled out of the tree.  That is totally fixable.

If you think building and packaging is hard now, try maintaining and testing ldmsd on pre-general-availability platforms with a single configure script if it picks up dependencies on mpi, cuda, etc.

I really can't imagine how the added complexity of multiple configure scripts would make that situation easier.  I have had to maintain software and test it on a number of pre-general availability platforms, and I really don't have any idea why the number of configure scripts would come into play at all.

See also: https://github.com/baallan/distribution/blob/master/HISTORY.md for why there is a repo for packaging scripts and why they are a bit complicated.

Well, that is interesting, but I think that some of the answers are not quite accurate.  Take this answer:
""Significant subsystems of OVIS are excluded depending on the target platform. No single target platform can compile all of the available options together.""
The point of the one dist tarball is that is includes all of the source and a ""configure"" script.  It is through the configure script that the build is adjusted to apply to the target platform through a combination of automatic tests and user input (configure command line options).  It is not at all necessary to have different tarballs for different platforms.  The talk about different sets of autotools on different platforms is addressed by creating the ""make dist"" tarball.  You can agree on a set of platforms where ""make dist"" can be run, and then that resulting tarball can run on all platforms.  Perhaps not all platformas have a new enough autotools package to generate the make-dist tarball, but that is probably a rare enough condition that it is acceptable.  I've certainly done that before.  I make-dist on a comptiable architecture, and then use the tarball on the target build platform.
The part about double configure on RPMs is fixable too with a small change in approach, which will lead to a great deal of reduced complexity in the build system.  The rpm spec file is designed to site_outside_ the package and conduct the package's build and installation.  When you try to pass all of the configure scripts options in to an on-the-fly build spec file which in turn regurgitates the same configure options again when it is run, that is when you get into trouble.  I've seen how this approach plays out on other projects.  It is best to avoid this entirely. If there is a .spec.in file in a project that generates a .spec file, is should have very, very, very little that is actually substituted by autoconf.  Pretty much just version number substitution, and little else.  This is a detailed topic, but I've been down this path many times, and I am confident that ldms's build and package complexity can be reduced significantly.  I'm not aware of any special inherent complexity in ldms that wasn't also in present in other non-trivial projects I've worked with and solved with simpler solutions.

The following existing plugins would all need to become separate little projects
[cut]
you get the idea

No, I'm sorry, I don't understand the argument there.  Why would all of those existing plugins suddenly need to be separate projects?

If we go with a ""clean core, no batteries, spec files are easy"" approach to ldmsd, then we really have to add a staffer somewhere whose full time job is nothing but tracking spec files and testing for all the supported environments and (separately) all the supported plugins with non-trivial platform dependencies. Because ultimately what customers want delivered is ""batteries included"".

I really don't think that is the way to look at it.  Your customers are suffering with a very difficult to use build and packaging system now.  Adding complexity is not the same as adding batteries.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,72,2019-11-07T21:04:00Z,2020-01-15T17:54:53Z,2020-01-15T17:54:54Z,CLOSED,False,1951,13,38,https://github.com/baallan,add ldms/src/contrib and config args to use it.,1,[],https://github.com/ovis-hpc/ovis/pull/72,https://github.com/baallan,7,https://github.com/ovis-hpc/ovis/pull/72#issuecomment-552460366,"Our autoconf scripts never touch anything in lib,ldms/src/contrib/*
directly. The hooks fire the builds of contrib plugins after the main build is complete.","The result of make dist in the current repository depends on configure options because of Makefile.am constructions such as
if $FEATURE_ENABLED
SUBDIRS += feature
endif
or
if $plugin_enabled
plugin_stuff
endif
A contributed makefile.am refactorization that uses configure to disable features in the build without excluding them from the make dist rules would go a long way toward eliminating divergence in the output of make dist across platforms. DIST_SUBDIRS was not used originally but probably should be now.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,72,2019-11-07T21:04:00Z,2020-01-15T17:54:53Z,2020-01-15T17:54:54Z,CLOSED,False,1951,13,38,https://github.com/baallan,add ldms/src/contrib and config args to use it.,1,[],https://github.com/ovis-hpc/ovis/pull/72,https://github.com/baallan,8,https://github.com/ovis-hpc/ovis/pull/72#issuecomment-552477927,"Our autoconf scripts never touch anything in lib,ldms/src/contrib/*
directly. The hooks fire the builds of contrib plugins after the main build is complete.",""" Your customers are suffering with a very difficult to use build ""
@morrone Are you telling me production customers in TOSS environments are doing something other than ./firerpms (which is pretty simple) now? Who are these people and what are they doing with koji instead of that?
I haven't had any (other) production people report issues with this approach to canning the knowledge which is normally buried in something like koji.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,72,2019-11-07T21:04:00Z,2020-01-15T17:54:53Z,2020-01-15T17:54:54Z,CLOSED,False,1951,13,38,https://github.com/baallan,add ldms/src/contrib and config args to use it.,1,[],https://github.com/ovis-hpc/ovis/pull/72,https://github.com/morrone,9,https://github.com/ovis-hpc/ovis/pull/72#issuecomment-552561917,"Our autoconf scripts never touch anything in lib,ldms/src/contrib/*
directly. The hooks fire the builds of contrib plugins after the main build is complete.","The result of make dist in the current repository depends on configure options because of Makefile.am constructions such as

I understand. That can be fixed. In fact I already have a fix for most of those in PR #83, in the commit titled ""Fix conditional SUBDIRS usage for make dist"".

Are you telling me production customers in TOSS environments are doing something other than ./firerpms (which is pretty simple) now?

We're using it for v3, but we would very much like to eliminate firerpms from our workflow.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,72,2019-11-07T21:04:00Z,2020-01-15T17:54:53Z,2020-01-15T17:54:54Z,CLOSED,False,1951,13,38,https://github.com/baallan,add ldms/src/contrib and config args to use it.,1,[],https://github.com/ovis-hpc/ovis/pull/72,https://github.com/oceandlr,10,https://github.com/ovis-hpc/ovis/pull/72#issuecomment-553008951,"Our autoconf scripts never touch anything in lib,ldms/src/contrib/*
directly. The hooks fire the builds of contrib plugins after the main build is complete.","Re LDMS User's Group discussion on 11/11/2019:
I need the following functionality, in short order (i.e., in time for SC).

A place for contributors to put sampler and store plugins in the LDMS source tree that are not yet officially supported. Not in separate, externally maintained repos. This will enable others to have access to them while under development.
For anyone using the plugins, optional configure and build of these plugins as part of the LDMS build. Not a two step configure and/or build. This enables ease of config and build.
Ease of use for the developer of the plugins wrt changes to Makefiles, configure.ac's, and configuration flags both for building and configuring while in the contrib area. Minimal disruption when proposing moving them from the contrib area to the main line supported area (in source).

Can we do something that a) in short order satisfies this need, b) satisfies the desire to not do a temporary solution that we change later, and c) moves us toward the desired overall solution (don't have to solve all the header changes etc, make-dist as desired etc)?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,72,2019-11-07T21:04:00Z,2020-01-15T17:54:53Z,2020-01-15T17:54:54Z,CLOSED,False,1951,13,38,https://github.com/baallan,add ldms/src/contrib and config args to use it.,1,[],https://github.com/ovis-hpc/ovis/pull/72,https://github.com/morrone,11,https://github.com/ovis-hpc/ovis/pull/72#issuecomment-553028619,"Our autoconf scripts never touch anything in lib,ldms/src/contrib/*
directly. The hooks fire the builds of contrib plugins after the main build is complete.","Yes, I think we can solve that, and without introducing complications that will impact the build system cleanup effort.  I will try to get an example in a PR today.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,72,2019-11-07T21:04:00Z,2020-01-15T17:54:53Z,2020-01-15T17:54:54Z,CLOSED,False,1951,13,38,https://github.com/baallan,add ldms/src/contrib and config args to use it.,1,[],https://github.com/ovis-hpc/ovis/pull/72,https://github.com/morrone,12,https://github.com/ovis-hpc/ovis/pull/72#issuecomment-553084422,"Our autoconf scripts never touch anything in lib,ldms/src/contrib/*
directly. The hooks fire the builds of contrib plugins after the main build is complete.","@oceandlr , I started looking at the tree and it looks like you already created a samplers/contrib directory back in March.  I was planning nearly the exact same thing. Can you explain what is lacking in that implementation?
Does it need documentation so that people know how to use that directory?
Do we need an ""example"" module that does the bare minimum, to make it even easier to get started?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,72,2019-11-07T21:04:00Z,2020-01-15T17:54:53Z,2020-01-15T17:54:54Z,CLOSED,False,1951,13,38,https://github.com/baallan,add ldms/src/contrib and config args to use it.,1,[],https://github.com/ovis-hpc/ovis/pull/72,https://github.com/valleydlr,13,https://github.com/ovis-hpc/ovis/pull/72#issuecomment-553111222,"Our autoconf scripts never touch anything in lib,ldms/src/contrib/*
directly. The hooks fire the builds of contrib plugins after the main build is complete.","@morrone Nothing was lacking from that implementation other than an example. The concern was that the top level Makefile.am, configure.ac have to be modified. We will move the contrib directory up (peer of sampler and store) and add the tutorial example. Additionally we will also accept this pull request. This will provide both avenues for contribution and kick the can down the road as they are orthogonal approaches. Appropriate documentation will be included as README's in each ""contrib"" directory (they will obviously not both be named contrib).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,72,2019-11-07T21:04:00Z,2020-01-15T17:54:53Z,2020-01-15T17:54:54Z,CLOSED,False,1951,13,38,https://github.com/baallan,add ldms/src/contrib and config args to use it.,1,[],https://github.com/ovis-hpc/ovis/pull/72,https://github.com/baallan,14,https://github.com/ovis-hpc/ovis/pull/72#issuecomment-553131845,"Our autoconf scripts never touch anything in lib,ldms/src/contrib/*
directly. The hooks fire the builds of contrib plugins after the main build is complete.","I will be simplifying this request to:

exclude the tutorial contrib examples @oceandlr  will be putting in simpler form under ldms/contrib
rename the configure switches controlling the build of external projects that have been dropped in the tree at ldms/src/third.
update the concerned documentation files.

This will provide (a) a complete example for independent external projects that we can include in our direct testing, (b) a hook for contributors that want to use something other than automake as their build system, (c) the stub for anyone collecting a ""batteries included"" ovis source by dropping git submodules (or the equivalent) into ovis/ldms/src/third.
Those preferring to contribute in the ""dependent on changing the ovis configure.ac"" way, will be able to follow the tutorial examples from @oceandlr.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,72,2019-11-07T21:04:00Z,2020-01-15T17:54:53Z,2020-01-15T17:54:54Z,CLOSED,False,1951,13,38,https://github.com/baallan,add ldms/src/contrib and config args to use it.,1,[],https://github.com/ovis-hpc/ovis/pull/72,https://github.com/morrone,15,https://github.com/ovis-hpc/ovis/pull/72#issuecomment-553136304,"Our autoconf scripts never touch anything in lib,ldms/src/contrib/*
directly. The hooks fire the builds of contrib plugins after the main build is complete.","If contributors want to use something other than automake, then it simply shouldn't be in the ldms project.  The ldms project uses automake.  For those that want a different build system, they should just build externally.
Modifying configure.ac and Makefile.am is something that anyone that has used any autotools project will be able to do.  And if they have never done it before, then this is a learned skilled that will likely prove useful in the future, because it is common with thousands of other projects.
I really think we need to avoid introducing more completely independant build systems into the same source tree.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,72,2019-11-07T21:04:00Z,2020-01-15T17:54:53Z,2020-01-15T17:54:54Z,CLOSED,False,1951,13,38,https://github.com/baallan,add ldms/src/contrib and config args to use it.,1,[],https://github.com/ovis-hpc/ovis/pull/72,https://github.com/morrone,16,https://github.com/ovis-hpc/ovis/pull/72#issuecomment-553138961,"Our autoconf scripts never touch anything in lib,ldms/src/contrib/*
directly. The hooks fire the builds of contrib plugins after the main build is complete.","@valleydlr, so I would say that it is completely unreasonable to expect to be able to land something into the ldms project without editing configure.ac and/or Makefile.am.  So if we just drop that unreasonable requirement, we could basically meet the remaining requirements by just bumping the ""contrib"" directory up one level and improving documentation.  Is that correct?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,72,2019-11-07T21:04:00Z,2020-01-15T17:54:53Z,2020-01-15T17:54:54Z,CLOSED,False,1951,13,38,https://github.com/baallan,add ldms/src/contrib and config args to use it.,1,[],https://github.com/ovis-hpc/ovis/pull/72,https://github.com/oceandlr,17,https://github.com/ovis-hpc/ovis/pull/72#issuecomment-553200468,"Our autoconf scripts never touch anything in lib,ldms/src/contrib/*
directly. The hooks fire the builds of contrib plugins after the main build is complete.",@morrone @valleydlr @baallan @oceandlr committed the simple contrib in #88,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,72,2019-11-07T21:04:00Z,2020-01-15T17:54:53Z,2020-01-15T17:54:54Z,CLOSED,False,1951,13,38,https://github.com/baallan,add ldms/src/contrib and config args to use it.,1,[],https://github.com/ovis-hpc/ovis/pull/72,https://github.com/baallan,18,https://github.com/ovis-hpc/ovis/pull/72#issuecomment-553610721,"Our autoconf scripts never touch anything in lib,ldms/src/contrib/*
directly. The hooks fire the builds of contrib plugins after the main build is complete.","@oceandlr This has been:

simplified to merely my_plugin/ (no tutorials)
moved to ldms/src/third-plugins/ only (no lib/src/contrib, assuming we will unify lib/ and ldms/)
renamed my config options enable-contrib/with-contrib down to just --enable-third-plugins=list per a comment from @morrone .
better documented.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,72,2019-11-07T21:04:00Z,2020-01-15T17:54:53Z,2020-01-15T17:54:54Z,CLOSED,False,1951,13,38,https://github.com/baallan,add ldms/src/contrib and config args to use it.,1,[],https://github.com/ovis-hpc/ovis/pull/72,https://github.com/morrone,19,https://github.com/ovis-hpc/ovis/pull/72#issuecomment-553700560,"Our autoconf scripts never touch anything in lib,ldms/src/contrib/*
directly. The hooks fire the builds of contrib plugins after the main build is complete.","I thought maybe we were going with the ""option 1"" instead? As seen in PR #88?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,72,2019-11-07T21:04:00Z,2020-01-15T17:54:53Z,2020-01-15T17:54:54Z,CLOSED,False,1951,13,38,https://github.com/baallan,add ldms/src/contrib and config args to use it.,1,[],https://github.com/ovis-hpc/ovis/pull/72,https://github.com/baallan,20,https://github.com/ovis-hpc/ovis/pull/72#issuecomment-553939310,"Our autoconf scripts never touch anything in lib,ldms/src/contrib/*
directly. The hooks fire the builds of contrib plugins after the main build is complete.","I suspect, as there is no conflict between the two, we will be going with both, even if (2) serves only as documentation and testing. But it's up to the *dlrs.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,72,2019-11-07T21:04:00Z,2020-01-15T17:54:53Z,2020-01-15T17:54:54Z,CLOSED,False,1951,13,38,https://github.com/baallan,add ldms/src/contrib and config args to use it.,1,[],https://github.com/ovis-hpc/ovis/pull/72,https://github.com/morrone,21,https://github.com/ovis-hpc/ovis/pull/72#issuecomment-554129124,"Our autoconf scripts never touch anything in lib,ldms/src/contrib/*
directly. The hooks fire the builds of contrib plugins after the main build is complete.","If a decision hasn't been made, then maybe I should expand on my argument.
I see option 1 in PR #88 as the ""Keep It Simple"" approach to a contrib directory. This is a method that is simple and instantly familiar to anyone that has worked with autotools (automake/autoconf/libtool) in the past.  And since it is probably safe to say that autotools are the most used build system tools in all of Linuxdom, thats a lot of people that will find this approachable. For anyone that hasn't used autotools before, the barrier can still be low to adding contrib plugins with a little bit of documentation (and that knowledge is knowledge that will aid them on other autotools projects, not just ldms).
Option 2 in PR #72 is the ""Not Invented Here"" solution.  It seems like nifty solution in search of a problem. It replicates the functionality we get from #88, with a whole lot more complexity, and in a way that is totally unique to the ovis project. This is something that developers new to ovis would need to learn just for ovis. It is not something that anyone would expect to find, and it is not knowledge that is reusable in other projects, like PR #88.
Further, PR #72 complicates the dist tarball.  Instead of a normal straight tarball, the canonical tarball would be a tarball of tarballs.  Again, this is a one-off solution that only applies only to ovis. That is going to be surprising to developers used to working with, and packaging, projects that are built with autotools. So one could argue that it violates the ""Principle of Least Astonishment"".
The latest suggestion is that PR #72 could serve only as ""documentation and testing"". I would argue that in order for that to be true, we would have to never let actual plugins land in the tree under the directory it creates. But if we do that, then it really isn't serving a useful purpose. If people want to maintain a plugin external to the ldms repo, then this is not the approach that people are likely to want to use to build those external packages. And if someone requests that, they should probably be directed to use the more common idiom: build and install ovis, then build and install the externally packaged plugin. This is the approach taken by https://github.com/LLNL/ldms-plugins-llnl.  It is the much more common approach to building something external that has a dependency on another package.
If people wish to have their plugin landed in the upstream ldms tree, they can use the PR #88. So again, that doesn't seem to leave #72 with a use case sufficient to justify the added complexity and one-off, non-standard approach it adds to ldms's build system.
As for testing, I am unclear on how #72 would be good for testing. I imagine there are simpler, more common approaches to any testing needs. For instance, if I am testing and iterating on a plugin with a completely separate build system (e.g. ldms-plugins-llnl), there is no way that I want to have ldms recursively control my build system.  That is unnecessary complexity. By keeping ldms-plugins-llnl completely out of the ldms tree, I don't need to get the ldms source code at all. I can simply compile and iterate on just my plugin, targeted against the lmds headers and libraries that are installed by .rpm packages.  When I also want to test against a newer ldms, I still have the freedom to install that newer ldms and target my plugin builds against that. It is difficult to imagine a use case where it is truly advantageous to have the plugin independently packaged (in terms of its build system, like autotools), but also built recursively by ldms.
If one desires the the plugin source to be in the ldms tree and built by ldms, one can use the #88 approach with ease.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,72,2019-11-07T21:04:00Z,2020-01-15T17:54:53Z,2020-01-15T17:54:54Z,CLOSED,False,1951,13,38,https://github.com/baallan,add ldms/src/contrib and config args to use it.,1,[],https://github.com/ovis-hpc/ovis/pull/72,https://github.com/tom95858,22,https://github.com/ovis-hpc/ovis/pull/72#issuecomment-574777535,"Our autoconf scripts never touch anything in lib,ldms/src/contrib/*
directly. The hooks fire the builds of contrib plugins after the main build is complete.",This has been cherry-picked into OVIS-4,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,75,2019-11-08T00:29:02Z,2020-01-08T15:55:38Z,2020-01-08T15:55:38Z,MERGED,True,12,12,4,https://github.com/morrone,Rename request and plugattr libs,2,[],https://github.com/ovis-hpc/ovis/pull/75,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/75,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,75,2019-11-08T00:29:02Z,2020-01-08T15:55:38Z,2020-01-08T15:55:38Z,MERGED,True,12,12,4,https://github.com/morrone,Rename request and plugattr libs,2,[],https://github.com/ovis-hpc/ovis/pull/75,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/75#issuecomment-553077002,,+1,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,76,2019-11-08T01:05:57Z,2020-01-08T15:56:24Z,2020-01-08T15:56:25Z,MERGED,True,19,19,16,https://github.com/morrone,Rename libsampler_base to libldmsd_sampler_base,1,[],https://github.com/ovis-hpc/ovis/pull/76,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/76,"Rename libsampler_base to libldmsd_sampler_base to reduce installed namespace polution.
Part of issue #71.","Rename libsampler_base to libldmsd_sampler_base to reduce installed namespace polution.
Part of issue #71.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,76,2019-11-08T01:05:57Z,2020-01-08T15:56:24Z,2020-01-08T15:56:25Z,MERGED,True,19,19,16,https://github.com/morrone,Rename libsampler_base to libldmsd_sampler_base,1,[],https://github.com/ovis-hpc/ovis/pull/76,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/76#issuecomment-551339260,"Rename libsampler_base to libldmsd_sampler_base to reduce installed namespace polution.
Part of issue #71.","I know this sounds like a nit, but could you please rename this to libldmsd_sampler_base instead so that it's clear that this is a daemon library?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,76,2019-11-08T01:05:57Z,2020-01-08T15:56:24Z,2020-01-08T15:56:25Z,MERGED,True,19,19,16,https://github.com/morrone,Rename libsampler_base to libldmsd_sampler_base,1,[],https://github.com/ovis-hpc/ovis/pull/76,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/76#issuecomment-551412763,"Rename libsampler_base to libldmsd_sampler_base to reduce installed namespace polution.
Part of issue #71.","This PR will need to be revised after PR 72 is merged, since all the contrib/ samplers are dependent on the base lib.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,76,2019-11-08T01:05:57Z,2020-01-08T15:56:24Z,2020-01-08T15:56:25Z,MERGED,True,19,19,16,https://github.com/morrone,Rename libsampler_base to libldmsd_sampler_base,1,[],https://github.com/ovis-hpc/ovis/pull/76,https://github.com/morrone,4,https://github.com/ovis-hpc/ovis/pull/76#issuecomment-551966300,"Rename libsampler_base to libldmsd_sampler_base to reduce installed namespace polution.
Part of issue #71.","I know this sounds like a nit, but could you please rename this to libldmsd_sampler_base instead so that it's clear that this is a daemon library?

Not at all, that is helpful! It is not always clear to me from the current directory structure where the line is drawn between what is considered the ldms ""service"" and what is considered the ""daemon"".  The sampler/sampler_base.[ch] files are in a directory parallel to the ""ldmsd"" directory rather than under it, so I guessed incorrectly that plugins were considered part of the ""service"".
Your name change request will help to make that a little more clear.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,78,2019-11-09T03:18:36Z,2019-12-30T18:35:39Z,2019-12-30T18:35:39Z,CLOSED,False,23,30,3,https://github.com/morrone,Move pedigree files,1,[],https://github.com/ovis-hpc/ovis/pull/78,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/78,"Change the pedigree scripts into text files.  Move the pedigree
files' locations to docdir rather than bindir.
It looks like ovis/lib's doc build was broken, so that is tweaked
as well to allow the ovis lib pedigree file to go in the ovis-lib
doc directory.
Part of issue #71.","Change the pedigree scripts into text files.  Move the pedigree
files' locations to docdir rather than bindir.
It looks like ovis/lib's doc build was broken, so that is tweaked
as well to allow the ovis lib pedigree file to go in the ovis-lib
doc directory.
Part of issue #71.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,78,2019-11-09T03:18:36Z,2019-12-30T18:35:39Z,2019-12-30T18:35:39Z,CLOSED,False,23,30,3,https://github.com/morrone,Move pedigree files,1,[],https://github.com/ovis-hpc/ovis/pull/78,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/78#issuecomment-553075291,"Change the pedigree scripts into text files.  Move the pedigree
files' locations to docdir rather than bindir.
It looks like ovis/lib's doc build was broken, so that is tweaked
as well to allow the ovis lib pedigree file to go in the ovis-lib
doc directory.
Part of issue #71.","ldms-pedigree is installed as a program so that it is easily found by users and robots. It has a bunch of debugging info content that for some reason (long escaping me) we didn't want baked into the binary. A similar bunch of information was part of the binary in ldms v2. So moving ldms-pedigree off to a .txt in doc or lib directory breaks the 'easily found' requirement.
Since it is named starting with ldms-, i'm not clear why it's part of issue 71.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,78,2019-11-09T03:18:36Z,2019-12-30T18:35:39Z,2019-12-30T18:35:39Z,CLOSED,False,23,30,3,https://github.com/morrone,Move pedigree files,1,[],https://github.com/ovis-hpc/ovis/pull/78,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/78#issuecomment-553145664,"Change the pedigree scripts into text files.  Move the pedigree
files' locations to docdir rather than bindir.
It looks like ovis/lib's doc build was broken, so that is tweaked
as well to allow the ovis lib pedigree file to go in the ovis-lib
doc directory.
Part of issue #71.","One of the pedigree scripts is named ""lib-pedigree"", which is the connection to issue #71.  I was just cleaning up both at the same time.  And I don't see why doc is at all hard to find.  And I don't see why this is anything other than an extremely niche use, so the very minor effort of looking in docs for those niche uses seems preferable to me than doing something less than standard in the bin directory.
For the vast majority of users, a properly formed package will provide all needed pedegree information.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,78,2019-11-09T03:18:36Z,2019-12-30T18:35:39Z,2019-12-30T18:35:39Z,CLOSED,False,23,30,3,https://github.com/morrone,Move pedigree files,1,[],https://github.com/ovis-hpc/ovis/pull/78,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/78#issuecomment-553148569,"Change the pedigree scripts into text files.  Move the pedigree
files' locations to docdir rather than bindir.
It looks like ovis/lib's doc build was broken, so that is tweaked
as well to allow the ovis lib pedigree file to go in the ovis-lib
doc directory.
Part of issue #71.","I agree that lib-pedigree is a rather inauspicious name. If we did away with the two levels of configure (lib/configure.ac, ldms/configure.ac got merged up to ovis/configure.ac) then lib-pedigree would go away.  We would have only ldms-pedigree.
The doc is hard to find because it's under a version number named directory in share (or any other random place depending on configure arguments and the target OS)  instead of in bin/.
The use of pedigree is not niche at all, in our experience supporting new users and new platforms; in most of those cases, there have been source-based deployments long before there are packages. In initial builds, the doc options are often disabled entirely.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,78,2019-11-09T03:18:36Z,2019-12-30T18:35:39Z,2019-12-30T18:35:39Z,CLOSED,False,23,30,3,https://github.com/morrone,Move pedigree files,1,[],https://github.com/ovis-hpc/ovis/pull/78,https://github.com/morrone,5,https://github.com/ovis-hpc/ovis/pull/78#issuecomment-553192860,"Change the pedigree scripts into text files.  Move the pedigree
files' locations to docdir rather than bindir.
It looks like ovis/lib's doc build was broken, so that is tweaked
as well to allow the ovis lib pedigree file to go in the ovis-lib
doc directory.
Part of issue #71.","How about I remove lib-pedigree now?  While they are technically different build systems, they are in the same git repo in one same tree, and (almost?) always built as one. Maybe ldms-pedigree is sufficient then?
Alternatively I could just change lib-pedigree to ""ovis-lib-pedigree"".",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,78,2019-11-09T03:18:36Z,2019-12-30T18:35:39Z,2019-12-30T18:35:39Z,CLOSED,False,23,30,3,https://github.com/morrone,Move pedigree files,1,[],https://github.com/ovis-hpc/ovis/pull/78,https://github.com/baallan,6,https://github.com/ovis-hpc/ovis/pull/78#issuecomment-553457676,"Change the pedigree scripts into text files.  Move the pedigree
files' locations to docdir rather than bindir.
It looks like ovis/lib's doc build was broken, so that is tweaked
as well to allow the ovis lib pedigree file to go in the ovis-lib
doc directory.
Part of issue #71.","I would prefer a PR that consolidates configure.ac, lib/configure.ac and ldms/configure.ac (and the attendant m4/ subdirs) all into the top level configure.ac. Failing that, I have no objection in the interim to the ovis-lib-pedigree rename. Other developer opinions may vary.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,78,2019-11-09T03:18:36Z,2019-12-30T18:35:39Z,2019-12-30T18:35:39Z,CLOSED,False,23,30,3,https://github.com/morrone,Move pedigree files,1,[],https://github.com/ovis-hpc/ovis/pull/78,https://github.com/morrone,7,https://github.com/ovis-hpc/ovis/pull/78#issuecomment-553498520,"Change the pedigree scripts into text files.  Move the pedigree
files' locations to docdir rather than bindir.
It looks like ovis/lib's doc build was broken, so that is tweaked
as well to allow the ovis lib pedigree file to go in the ovis-lib
doc directory.
Part of issue #71.","I would prefer a PR that consolidates configure.ac, lib/configure.ac and ldms/configure.ac (and the attendant m4/ subdirs) all into the top level configure.ac

I am not opposed to that.  I had been avoiding that larger change on the assumption that change would be unlikely to go into v4. I have been focusing on things that I'm hoping can be used in a v4 release, because we would like to move to that in the near term.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,79,2019-11-09T03:40:56Z,2020-01-15T17:25:35Z,2020-01-15T17:25:35Z,CLOSED,False,2,1,1,https://github.com/morrone,Rename libparse_stat to libldmsd_parse_stat,1,[],https://github.com/ovis-hpc/ovis/pull/79,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/79,"Rename libparse_stat to libldmsd_parse_stat
Part of #71","Rename libparse_stat to libldmsd_parse_stat
Part of #71",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,79,2019-11-09T03:40:56Z,2020-01-15T17:25:35Z,2020-01-15T17:25:35Z,CLOSED,False,2,1,1,https://github.com/morrone,Rename libparse_stat to libldmsd_parse_stat,1,[],https://github.com/ovis-hpc/ovis/pull/79,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/79#issuecomment-553071486,"Rename libparse_stat to libldmsd_parse_stat
Part of #71","This is not a convenience library.
libparse_stat is intended for use by more than one sampler. renaming it ldms_parse_stat rather than parse_stat is the appropriate fix. The libdstat plugin is dependent on libparse_stat; the parse functions are not copied into the dstat plugin binary.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,79,2019-11-09T03:40:56Z,2020-01-15T17:25:35Z,2020-01-15T17:25:35Z,CLOSED,False,2,1,1,https://github.com/morrone,Rename libparse_stat to libldmsd_parse_stat,1,[],https://github.com/ovis-hpc/ovis/pull/79,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/79#issuecomment-553146748,"Rename libparse_stat to libldmsd_parse_stat
Part of #71","This is not a convenience library.
libparse_stat is intended for use by more than one sampler.

Those two statements seem unrelated to me.  Could you please elaborate? A convenience library fully supports (if not encourages) use by more than one sampler.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,79,2019-11-09T03:40:56Z,2020-01-15T17:25:35Z,2020-01-15T17:25:35Z,CLOSED,False,2,1,1,https://github.com/morrone,Rename libparse_stat to libldmsd_parse_stat,1,[],https://github.com/ovis-hpc/ovis/pull/79,https://github.com/morrone,4,https://github.com/ovis-hpc/ovis/pull/79#issuecomment-553148288,"Rename libparse_stat to libldmsd_parse_stat
Part of #71",You probably mean that you want those libraries to be dynamically linked to to parse_stat?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,79,2019-11-09T03:40:56Z,2020-01-15T17:25:35Z,2020-01-15T17:25:35Z,CLOSED,False,2,1,1,https://github.com/morrone,Rename libparse_stat to libldmsd_parse_stat,1,[],https://github.com/ovis-hpc/ovis/pull/79,https://github.com/baallan,5,https://github.com/ovis-hpc/ovis/pull/79#issuecomment-553149734,"Rename libparse_stat to libldmsd_parse_stat
Part of #71","I don't mean to say ""I want those libraries to be dynamically linked"". I'm telling you libparse_stat is dynamically linked by plugins, so it needs to be installed. Run ldd and nm -u on an installed ovis-ldms/libdstat.so and you will see.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,79,2019-11-09T03:40:56Z,2020-01-15T17:25:35Z,2020-01-15T17:25:35Z,CLOSED,False,2,1,1,https://github.com/morrone,Rename libparse_stat to libldmsd_parse_stat,1,[],https://github.com/ovis-hpc/ovis/pull/79,https://github.com/morrone,6,https://github.com/ovis-hpc/ovis/pull/79#issuecomment-553151236,"Rename libparse_stat to libldmsd_parse_stat
Part of #71","It will work as I've done it as well. Then it doesn't need to be installed in libdir, where we put things when we desire to share the code outside of the project rather than inside the project.
You sound attached to the current approach though, so I'll go with a rename.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,79,2019-11-09T03:40:56Z,2020-01-15T17:25:35Z,2020-01-15T17:25:35Z,CLOSED,False,2,1,1,https://github.com/morrone,Rename libparse_stat to libldmsd_parse_stat,1,[],https://github.com/ovis-hpc/ovis/pull/79,https://github.com/morrone,7,https://github.com/ovis-hpc/ovis/pull/79#issuecomment-553218833,"Rename libparse_stat to libldmsd_parse_stat
Part of #71","Actually, I'm not entirely sure if I was clear: my approach works because the convenience library is statically linked into the plugin, and therefore eliminates the dynamic library dependency at run time.
Sure, plugins would be slightly larger than they need to be, but I think that is reasonable for small support libraries like this.
But in the interest of expediency, I will still submit a patch that just does a rename.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,79,2019-11-09T03:40:56Z,2020-01-15T17:25:35Z,2020-01-15T17:25:35Z,CLOSED,False,2,1,1,https://github.com/morrone,Rename libparse_stat to libldmsd_parse_stat,1,[],https://github.com/ovis-hpc/ovis/pull/79,https://github.com/morrone,8,https://github.com/ovis-hpc/ovis/pull/79#issuecomment-553224181,"Rename libparse_stat to libldmsd_parse_stat
Part of #71",I updated the PR to do a rename rather that changing it to a convenience library.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,79,2019-11-09T03:40:56Z,2020-01-15T17:25:35Z,2020-01-15T17:25:35Z,CLOSED,False,2,1,1,https://github.com/morrone,Rename libparse_stat to libldmsd_parse_stat,1,[],https://github.com/ovis-hpc/ovis/pull/79,https://github.com/tom95858,9,https://github.com/ovis-hpc/ovis/pull/79#issuecomment-572174091,"Rename libparse_stat to libldmsd_parse_stat
Part of #71",This library is only used by one plugin. I would inclined to not make this a library at all and just link it statically with the plugin that uses it. If in the future another user comes alone we can make a library and either ship it or bind it non-shared.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,79,2019-11-09T03:40:56Z,2020-01-15T17:25:35Z,2020-01-15T17:25:35Z,CLOSED,False,2,1,1,https://github.com/morrone,Rename libparse_stat to libldmsd_parse_stat,1,[],https://github.com/ovis-hpc/ovis/pull/79,https://github.com/morrone,10,https://github.com/ovis-hpc/ovis/pull/79#issuecomment-572667310,"Rename libparse_stat to libldmsd_parse_stat
Part of #71","This library is only used by one plugin. I would inclined to not make this a library at all and just link it statically with the plugin that uses it. If in the future another user comes alone we can make a library and either ship it or bind it non-shared.

That was my original approach in this PR, so I at least am on board with that.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,79,2019-11-09T03:40:56Z,2020-01-15T17:25:35Z,2020-01-15T17:25:35Z,CLOSED,False,2,1,1,https://github.com/morrone,Rename libparse_stat to libldmsd_parse_stat,1,[],https://github.com/ovis-hpc/ovis/pull/79,https://github.com/morrone,11,https://github.com/ovis-hpc/ovis/pull/79#issuecomment-572672380,"Rename libparse_stat to libldmsd_parse_stat
Part of #71","OK, the PR has been updated back to the original noinst library/statically linked approach.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,79,2019-11-09T03:40:56Z,2020-01-15T17:25:35Z,2020-01-15T17:25:35Z,CLOSED,False,2,1,1,https://github.com/morrone,Rename libparse_stat to libldmsd_parse_stat,1,[],https://github.com/ovis-hpc/ovis/pull/79,https://github.com/tom95858,12,https://github.com/ovis-hpc/ovis/pull/79#issuecomment-574765888,"Rename libparse_stat to libldmsd_parse_stat
Part of #71",This has been cherry-picked into OVIS-4,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,82,2019-11-10T07:40:09Z,2020-01-17T01:35:54Z,2020-01-17T01:35:54Z,CLOSED,False,587,1763,24,https://github.com/morrone,Relocate json_util library from lib to ldms,2,[],https://github.com/ovis-hpc/ovis/pull/82,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/82,"Move the json_util and json/json_parser libaries from lib to ldms and
change the libraries from installed libraries to noinst
convenience libraries.  Likewise the associated headers changed
to stay in-tree.The json_test binary is changed from sbin_PROGRAMS
to check_PROGRAMS.
This is in support of issue #71, to clean up the installed
namespace footprint of ldms. It is also aligned with the desire to
eliminate recursive autoconf infrastructure.","Move the json_util and json/json_parser libaries from lib to ldms and
change the libraries from installed libraries to noinst
convenience libraries.  Likewise the associated headers changed
to stay in-tree.The json_test binary is changed from sbin_PROGRAMS
to check_PROGRAMS.
This is in support of issue #71, to clean up the installed
namespace footprint of ldms. It is also aligned with the desire to
eliminate recursive autoconf infrastructure.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,82,2019-11-10T07:40:09Z,2020-01-17T01:35:54Z,2020-01-17T01:35:54Z,CLOSED,False,587,1763,24,https://github.com/morrone,Relocate json_util library from lib to ldms,2,[],https://github.com/ovis-hpc/ovis/pull/82,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/82#issuecomment-552194581,"Move the json_util and json/json_parser libaries from lib to ldms and
change the libraries from installed libraries to noinst
convenience libraries.  Likewise the associated headers changed
to stay in-tree.The json_test binary is changed from sbin_PROGRAMS
to check_PROGRAMS.
This is in support of issue #71, to clean up the installed
namespace footprint of ldms. It is also aligned with the desire to
eliminate recursive autoconf infrastructure.",This library is being deprecated in favor of json_util.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,82,2019-11-10T07:40:09Z,2020-01-17T01:35:54Z,2020-01-17T01:35:54Z,CLOSED,False,587,1763,24,https://github.com/morrone,Relocate json_util library from lib to ldms,2,[],https://github.com/ovis-hpc/ovis/pull/82,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/82#issuecomment-552195071,"Move the json_util and json/json_parser libaries from lib to ldms and
change the libraries from installed libraries to noinst
convenience libraries.  Likewise the associated headers changed
to stay in-tree.The json_test binary is changed from sbin_PROGRAMS
to check_PROGRAMS.
This is in support of issue #71, to clean up the installed
namespace footprint of ldms. It is also aligned with the desire to
eliminate recursive autoconf infrastructure.","I think @nichamon has a change somewhere that gets rid of this library altogether. I would like to rename the json_util library though once this is done to something like you suggest. Also, do we have an end-game for all of this packaging wrt G/A of 4.3.3? Can @morrone be at the LDMS UG meeting tomorrow to discuss?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,82,2019-11-10T07:40:09Z,2020-01-17T01:35:54Z,2020-01-17T01:35:54Z,CLOSED,False,587,1763,24,https://github.com/morrone,Relocate json_util library from lib to ldms,2,[],https://github.com/ovis-hpc/ovis/pull/82,https://github.com/morrone,4,https://github.com/ovis-hpc/ovis/pull/82#issuecomment-552221918,"Move the json_util and json/json_parser libaries from lib to ldms and
change the libraries from installed libraries to noinst
convenience libraries.  Likewise the associated headers changed
to stay in-tree.The json_test binary is changed from sbin_PROGRAMS
to check_PROGRAMS.
This is in support of issue #71, to clean up the installed
namespace footprint of ldms. It is also aligned with the desire to
eliminate recursive autoconf infrastructure.","Both json_util and the third party json_parser one are moved and made internal-only in this pull request.
Getting rid of the third/json_parser in the future would be great! But is there any reason not to land this in the mean time?  If anything it should be slightly easier to remove after this commit.
Yes, I will try to call in to the meeting on Monday.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,82,2019-11-10T07:40:09Z,2020-01-17T01:35:54Z,2020-01-17T01:35:54Z,CLOSED,False,587,1763,24,https://github.com/morrone,Relocate json_util library from lib to ldms,2,[],https://github.com/ovis-hpc/ovis/pull/82,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/82#issuecomment-552248413,"Move the json_util and json/json_parser libaries from lib to ldms and
change the libraries from installed libraries to noinst
convenience libraries.  Likewise the associated headers changed
to stay in-tree.The json_test binary is changed from sbin_PROGRAMS
to check_PROGRAMS.
This is in support of issue #71, to clean up the installed
namespace footprint of ldms. It is also aligned with the desire to
eliminate recursive autoconf infrastructure.","You're right, there's no reason we can't just take this and remove the deprecated library as another change.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,82,2019-11-10T07:40:09Z,2020-01-17T01:35:54Z,2020-01-17T01:35:54Z,CLOSED,False,587,1763,24,https://github.com/morrone,Relocate json_util library from lib to ldms,2,[],https://github.com/ovis-hpc/ovis/pull/82,https://github.com/morrone,6,https://github.com/ovis-hpc/ovis/pull/82#issuecomment-554076724,"Move the json_util and json/json_parser libaries from lib to ldms and
change the libraries from installed libraries to noinst
convenience libraries.  Likewise the associated headers changed
to stay in-tree.The json_test binary is changed from sbin_PROGRAMS
to check_PROGRAMS.
This is in support of issue #71, to clean up the installed
namespace footprint of ldms. It is also aligned with the desire to
eliminate recursive autoconf infrastructure.","nichamon:get-rid-of-3rd-party-json-lib-v4 in PR #91 is now available, so I rebased this PR onto that as requested.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,82,2019-11-10T07:40:09Z,2020-01-17T01:35:54Z,2020-01-17T01:35:54Z,CLOSED,False,587,1763,24,https://github.com/morrone,Relocate json_util library from lib to ldms,2,[],https://github.com/ovis-hpc/ovis/pull/82,https://github.com/tom95858,7,https://github.com/ovis-hpc/ovis/pull/82#issuecomment-572184237,"Move the json_util and json/json_parser libaries from lib to ldms and
change the libraries from installed libraries to noinst
convenience libraries.  Likewise the associated headers changed
to stay in-tree.The json_test binary is changed from sbin_PROGRAMS
to check_PROGRAMS.
This is in support of issue #71, to clean up the installed
namespace footprint of ldms. It is also aligned with the desire to
eliminate recursive autoconf infrastructure.","Hi @morrone, I cherry picked and build tested this change and got the error below.
make[5]: Entering directory `/home/tom/work/ovis-pkg/ovis/build-test/ldms/src/core'
CC       ldms.lo
CC       ldms_xprt.lo
../../../../ldms/src/core/ldms_xprt.c:68:28: fatal error: json/json_util.h: No such file or directory
#include <json/json_util.h>
There are internal (ldmsd), and external (in the works)  applications as well as plugins (slurm) that use this library. So I am inclined to leave the library where it is, rename it libldmsd_json and bind everything shared. Let me know what you think.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,82,2019-11-10T07:40:09Z,2020-01-17T01:35:54Z,2020-01-17T01:35:54Z,CLOSED,False,587,1763,24,https://github.com/morrone,Relocate json_util library from lib to ldms,2,[],https://github.com/ovis-hpc/ovis/pull/82,https://github.com/tom95858,8,https://github.com/ovis-hpc/ovis/pull/82#issuecomment-574766243,"Move the json_util and json/json_parser libaries from lib to ldms and
change the libraries from installed libraries to noinst
convenience libraries.  Likewise the associated headers changed
to stay in-tree.The json_test binary is changed from sbin_PROGRAMS
to check_PROGRAMS.
This is in support of issue #71, to clean up the installed
namespace footprint of ldms. It is also aligned with the desire to
eliminate recursive autoconf infrastructure.",@morrone ping....,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,82,2019-11-10T07:40:09Z,2020-01-17T01:35:54Z,2020-01-17T01:35:54Z,CLOSED,False,587,1763,24,https://github.com/morrone,Relocate json_util library from lib to ldms,2,[],https://github.com/ovis-hpc/ovis/pull/82,https://github.com/morrone,9,https://github.com/ovis-hpc/ovis/pull/82#issuecomment-575425597,"Move the json_util and json/json_parser libaries from lib to ldms and
change the libraries from installed libraries to noinst
convenience libraries.  Likewise the associated headers changed
to stay in-tree.The json_test binary is changed from sbin_PROGRAMS
to check_PROGRAMS.
This is in support of issue #71, to clean up the installed
namespace footprint of ldms. It is also aligned with the desire to
eliminate recursive autoconf infrastructure.",A rename instead is fine with me.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,83,2019-11-11T02:06:53Z,2019-11-15T23:58:41Z,2019-11-20T22:07:05Z,CLOSED,False,45,8,11,https://github.com/morrone,Various fixes for things missing from the dist tarball,2,[],https://github.com/ovis-hpc/ovis/pull/83,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/83,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,83,2019-11-11T02:06:53Z,2019-11-15T23:58:41Z,2019-11-20T22:07:05Z,CLOSED,False,45,8,11,https://github.com/morrone,Various fixes for things missing from the dist tarball,2,[],https://github.com/ovis-hpc/ovis/pull/83,https://github.com/oceandlr,2,https://github.com/ovis-hpc/ovis/pull/83#issuecomment-554423844,,"@morrone @nichamon @narategithub
Looks like a problem here:
ldms/src/sampler/contrib/ipmireader/Makefile.am:
EXTRA_DIST += libipmisensors.la
EXTRA_DIST += Plugin_ipmisensors.man
I think this is supposed to be:
EXTRA_DIST += Plugin_ipmireader.man
EXTRA_DIST += Plugin_ipmisensors.man
If so this will need to be fixed and it is causing a conflict in #88",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,83,2019-11-11T02:06:53Z,2019-11-15T23:58:41Z,2019-11-20T22:07:05Z,CLOSED,False,45,8,11,https://github.com/morrone,Various fixes for things missing from the dist tarball,2,[],https://github.com/ovis-hpc/ovis/pull/83,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/83#issuecomment-554468508,,"@oceandlr, yes that was my mistake, sorry.  I have pushed PR #96 with that fix, and I also rebased your PR#88 commits onto it for you in penance.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,83,2019-11-11T02:06:53Z,2019-11-15T23:58:41Z,2019-11-20T22:07:05Z,CLOSED,False,45,8,11,https://github.com/morrone,Various fixes for things missing from the dist tarball,2,[],https://github.com/ovis-hpc/ovis/pull/83,https://github.com/morrone,4,https://github.com/ovis-hpc/ovis/pull/83#issuecomment-554575229,,Landed by cherry-pick.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,84,2019-11-11T13:29:57Z,2019-11-18T07:55:55Z,2019-11-18T19:54:59Z,CLOSED,False,2,2,1,https://github.com/tom95858,Fix mount point truncation in Cray DVS Sampler,1,[],https://github.com/ovis-hpc/ovis/pull/84,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/84,The buffer used to read the mount point was too small and would get truncated.,The buffer used to read the mount point was too small and would get truncated.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,84,2019-11-11T13:29:57Z,2019-11-18T07:55:55Z,2019-11-18T19:54:59Z,CLOSED,False,2,2,1,https://github.com/tom95858,Fix mount point truncation in Cray DVS Sampler,1,[],https://github.com/ovis-hpc/ovis/pull/84,https://github.com/oceandlr,2,https://github.com/ovis-hpc/ovis/pull/84#issuecomment-554759299,The buffer used to read the mount point was too small and would get truncated.,"@narategithub @tom95858 @valleydlr @nichamon
Since this has been pulled into master, can we close this issue?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,85,2019-11-11T22:32:28Z,2020-01-08T17:59:02Z,2020-01-08T17:59:02Z,MERGED,True,3,3,1,https://github.com/morrone,Move ovis_util test_* programs from bin_ to noinst_,1,[],https://github.com/ovis-hpc/ovis/pull/85,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/85,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,85,2019-11-11T22:32:28Z,2020-01-08T17:59:02Z,2020-01-08T17:59:02Z,MERGED,True,3,3,1,https://github.com/morrone,Move ovis_util test_* programs from bin_ to noinst_,1,[],https://github.com/ovis-hpc/ovis/pull/85,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/85#issuecomment-553080683,,This change will break 'make check' by default because some of the programs have expected fail exits currently.  We don't for the project as a whole yet have a process that leads to 'make check' or 'make installcheck' lead to a nice stream of PASS/XFAIL messages in the occasionally seen autotools way.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,85,2019-11-11T22:32:28Z,2020-01-08T17:59:02Z,2020-01-08T17:59:02Z,MERGED,True,3,3,1,https://github.com/morrone,Move ovis_util test_* programs from bin_ to noinst_,1,[],https://github.com/ovis-hpc/ovis/pull/85,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/85#issuecomment-553143510,,"""make check"" isn't running the programs, just as ""make"" didn't run those test programs when they were installed in the bindir.  So why would it break anything?
The only change in procedure is that when you want to run whatever testing scripts you have, run ""make check"" in the project to get the test programs built instead of just ""make"".
If ""noinst_PROGRAMS"" would make you happier than ""check_PROGRAMS"", I am certainly willing to shift to that.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,85,2019-11-11T22:32:28Z,2020-01-08T17:59:02Z,2020-01-08T17:59:02Z,MERGED,True,3,3,1,https://github.com/morrone,Move ovis_util test_* programs from bin_ to noinst_,1,[],https://github.com/ovis-hpc/ovis/pull/85,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/85#issuecomment-553153398,,I suspect installcheck and manual (without 'make check') scenarios can be satisfied with these as shifted to noinst_PROGRAMS.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,85,2019-11-11T22:32:28Z,2020-01-08T17:59:02Z,2020-01-08T17:59:02Z,MERGED,True,3,3,1,https://github.com/morrone,Move ovis_util test_* programs from bin_ to noinst_,1,[],https://github.com/ovis-hpc/ovis/pull/85,https://github.com/morrone,5,https://github.com/ovis-hpc/ovis/pull/85#issuecomment-553215658,,"OK, I changed the PR to use ""noinst"" instead of ""check"".",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,86,2019-11-12T00:10:34Z,2019-11-18T07:56:08Z,2019-11-18T19:54:57Z,CLOSED,False,2,0,1,https://github.com/tom95858,Add ifdef check for new EHWPOISON errno,1,[],https://github.com/ovis-hpc/ovis/pull/86,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/86,The older errno.h header files do not have this errno. Protect this definition with an ifdef to support the build.,The older errno.h header files do not have this errno. Protect this definition with an ifdef to support the build.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,86,2019-11-12T00:10:34Z,2019-11-18T07:56:08Z,2019-11-18T19:54:57Z,CLOSED,False,2,0,1,https://github.com/tom95858,Add ifdef check for new EHWPOISON errno,1,[],https://github.com/ovis-hpc/ovis/pull/86,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/86#issuecomment-553048390,The older errno.h header files do not have this errno. Protect this definition with an ifdef to support the build.,+1,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,86,2019-11-12T00:10:34Z,2019-11-18T07:56:08Z,2019-11-18T19:54:57Z,CLOSED,False,2,0,1,https://github.com/tom95858,Add ifdef check for new EHWPOISON errno,1,[],https://github.com/ovis-hpc/ovis/pull/86,https://github.com/oceandlr,3,https://github.com/ovis-hpc/ovis/pull/86#issuecomment-554759075,The older errno.h header files do not have this errno. Protect this definition with an ifdef to support the build.,"@narategithub @tom95858 @valleydlr
Since this is now pulled into master, can we close this?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,88,2019-11-13T01:49:49Z,2019-11-17T15:25:02Z,2019-11-17T15:25:02Z,CLOSED,False,963,15,17,https://github.com/oceandlr,Sampler Store tutorial code and new contrib,2,[],https://github.com/ovis-hpc/ovis/pull/88,https://github.com/oceandlr,1,https://github.com/ovis-hpc/ovis/pull/88,"New directories ldms/contrib/sampler and ldms/contrib/store.
Moved previous ldms/sampler/contrib with ipmi_reader.
Added tutorial sampler and store.","New directories ldms/contrib/sampler and ldms/contrib/store.
Moved previous ldms/sampler/contrib with ipmi_reader.
Added tutorial sampler and store.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,88,2019-11-13T01:49:49Z,2019-11-17T15:25:02Z,2019-11-17T15:25:02Z,CLOSED,False,963,15,17,https://github.com/oceandlr,Sampler Store tutorial code and new contrib,2,[],https://github.com/ovis-hpc/ovis/pull/88,https://github.com/oceandlr,2,https://github.com/ovis-hpc/ovis/pull/88#issuecomment-553200226,"New directories ldms/contrib/sampler and ldms/contrib/store.
Moved previous ldms/sampler/contrib with ipmi_reader.
Added tutorial sampler and store.",@morrone @baallan @valleydlr  This is the simple contrib related to #72,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,88,2019-11-13T01:49:49Z,2019-11-17T15:25:02Z,2019-11-17T15:25:02Z,CLOSED,False,963,15,17,https://github.com/oceandlr,Sampler Store tutorial code and new contrib,2,[],https://github.com/ovis-hpc/ovis/pull/88,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/88#issuecomment-553213081,"New directories ldms/contrib/sampler and ldms/contrib/store.
Moved previous ldms/sampler/contrib with ipmi_reader.
Added tutorial sampler and store.","I don't think I marked all of the spots that need the ""MAYBE"" conditional pattern or EXTRA_DIST for conditional man pages. It would be good to check all the files if you refresh this.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,88,2019-11-13T01:49:49Z,2019-11-17T15:25:02Z,2019-11-17T15:25:02Z,CLOSED,False,963,15,17,https://github.com/oceandlr,Sampler Store tutorial code and new contrib,2,[],https://github.com/ovis-hpc/ovis/pull/88,https://github.com/oceandlr,4,https://github.com/ovis-hpc/ovis/pull/88#issuecomment-554099506,"New directories ldms/contrib/sampler and ldms/contrib/store.
Moved previous ldms/sampler/contrib with ipmi_reader.
Added tutorial sampler and store.",@morrone @baallan I think these look straightforward and I can get them in tonight 11/14 before they get pulled into the test/integration branch,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,88,2019-11-13T01:49:49Z,2019-11-17T15:25:02Z,2019-11-17T15:25:02Z,CLOSED,False,963,15,17,https://github.com/oceandlr,Sampler Store tutorial code and new contrib,2,[],https://github.com/ovis-hpc/ovis/pull/88,https://github.com/oceandlr,5,https://github.com/ovis-hpc/ovis/pull/88#issuecomment-554756322,"New directories ldms/contrib/sampler and ldms/contrib/store.
Moved previous ldms/sampler/contrib with ipmi_reader.
Added tutorial sampler and store.","@oceandlr is closing this, since it was rebased and pulled in in #96",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,90,2019-11-13T16:15:25Z,2019-11-13T17:40:26Z,2019-11-13T17:40:26Z,CLOSED,False,562,1736,10,https://github.com/nichamon,Get rid of the 3rd-party JSON lib dependency,1,[],https://github.com/ovis-hpc/ovis/pull/90,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/90,"ldmsctl relied on a 3rd-party JSON lib. The change modified ldmsctl so
that it uses OVIS json library in lib/src/json.","ldmsctl relied on a 3rd-party JSON lib. The change modified ldmsctl so
that it uses OVIS json library in lib/src/json.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,90,2019-11-13T16:15:25Z,2019-11-13T17:40:26Z,2019-11-13T17:40:26Z,CLOSED,False,562,1736,10,https://github.com/nichamon,Get rid of the 3rd-party JSON lib dependency,1,[],https://github.com/ovis-hpc/ovis/pull/90,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/90#issuecomment-553519248,"ldmsctl relied on a 3rd-party JSON lib. The change modified ldmsctl so
that it uses OVIS json library in lib/src/json.",I created the pull request for the wrong branch.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,91,2019-11-13T17:41:44Z,2020-01-08T16:04:29Z,2020-08-26T21:28:17Z,MERGED,True,569,1740,10,https://github.com/nichamon,Get rid of the 3rd-party JSON lib dependency,1,[],https://github.com/ovis-hpc/ovis/pull/91,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/91,"ldmsctl relied on a 3rd-party JSON lib. The change modified ldmsctl so
that it uses OVIS json library in lib/src/json.","ldmsctl relied on a 3rd-party JSON lib. The change modified ldmsctl so
that it uses OVIS json library in lib/src/json.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,92,2019-11-14T15:40:33Z,2019-11-18T07:56:17Z,2020-08-26T21:28:27Z,CLOSED,False,5,3,1,https://github.com/nichamon,ldmsd: plugn_sets_handler returns a corrupted message if no plugin sets,1,[],https://github.com/ovis-hpc/ovis/pull/92,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/92,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,92,2019-11-14T15:40:33Z,2019-11-18T07:56:17Z,2020-08-26T21:28:27Z,CLOSED,False,5,3,1,https://github.com/nichamon,ldmsd: plugn_sets_handler returns a corrupted message if no plugin sets,1,[],https://github.com/ovis-hpc/ovis/pull/92,https://github.com/oceandlr,2,https://github.com/ovis-hpc/ovis/pull/92#issuecomment-554759214,,"@nichamon @narategithub @tom95858 @valleydlr
Since this has been pulled into master, can we close this issue?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,96,2019-11-15T18:09:12Z,2019-11-17T15:23:31Z,2019-11-21T18:43:29Z,MERGED,True,963,16,17,https://github.com/morrone,Contrib rebase,3,[],https://github.com/ovis-hpc/ovis/pull/96,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/96,"This fixes a bug in EXTRA_DIST from my earlier commit, and includes a rebase of PR #88 onto it.","This fixes a bug in EXTRA_DIST from my earlier commit, and includes a rebase of PR #88 onto it.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,96,2019-11-15T18:09:12Z,2019-11-17T15:23:31Z,2019-11-21T18:43:29Z,MERGED,True,963,16,17,https://github.com/morrone,Contrib rebase,3,[],https://github.com/ovis-hpc/ovis/pull/96,https://github.com/oceandlr,2,https://github.com/ovis-hpc/ovis/pull/96#issuecomment-554473910,"This fixes a bug in EXTRA_DIST from my earlier commit, and includes a rebase of PR #88 onto it.","Rebase penance? Nice!
@tom95858 @narategithub @valleydlr we will need the fix part of this for the current master, but not necessarily the contrib part (what was #88). Do we want to get this all in before SC? Or do we want to split out only the fix part that we need?
@morrone",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,96,2019-11-15T18:09:12Z,2019-11-17T15:23:31Z,2019-11-21T18:43:29Z,MERGED,True,963,16,17,https://github.com/morrone,Contrib rebase,3,[],https://github.com/ovis-hpc/ovis/pull/96,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/96#issuecomment-554477788,"This fixes a bug in EXTRA_DIST from my earlier commit, and includes a rebase of PR #88 onto it.","Yes, I'm happy to split it back up again, if that is what is decided.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,96,2019-11-15T18:09:12Z,2019-11-17T15:23:31Z,2019-11-21T18:43:29Z,MERGED,True,963,16,17,https://github.com/morrone,Contrib rebase,3,[],https://github.com/ovis-hpc/ovis/pull/96,https://github.com/valleydlr,4,https://github.com/ovis-hpc/ovis/pull/96#issuecomment-554479084,"This fixes a bug in EXTRA_DIST from my earlier commit, and includes a rebase of PR #88 onto it.",@morrone @oceandlr @narategithub @tom95858 Lets take #96 as is prior to SC as it has no impact on the core.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,96,2019-11-15T18:09:12Z,2019-11-17T15:23:31Z,2019-11-21T18:43:29Z,MERGED,True,963,16,17,https://github.com/morrone,Contrib rebase,3,[],https://github.com/ovis-hpc/ovis/pull/96,https://github.com/oceandlr,5,https://github.com/ovis-hpc/ovis/pull/96#issuecomment-554756230,"This fixes a bug in EXTRA_DIST from my earlier commit, and includes a rebase of PR #88 onto it.","@morrone @narategithub @tom95858
@oceandlr merged this.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,97,2019-11-17T16:13:08Z,2019-11-18T20:22:29Z,2021-08-22T05:02:07Z,MERGED,True,2,2,2,https://github.com/oceandlr,FIX EXTRA_DIST autogen warnings,2,"['bug', 'Samplers']",https://github.com/ovis-hpc/ovis/pull/97,https://github.com/oceandlr,1,https://github.com/ovis-hpc/ovis/pull/97,Fix EXTRA_DIST  in filesingle and sampler tutorial for autogen warnings,Fix EXTRA_DIST  in filesingle and sampler tutorial for autogen warnings,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,97,2019-11-17T16:13:08Z,2019-11-18T20:22:29Z,2021-08-22T05:02:07Z,MERGED,True,2,2,2,https://github.com/oceandlr,FIX EXTRA_DIST autogen warnings,2,"['bug', 'Samplers']",https://github.com/ovis-hpc/ovis/pull/97,https://github.com/oceandlr,2,https://github.com/ovis-hpc/ovis/pull/97#issuecomment-554764324,Fix EXTRA_DIST  in filesingle and sampler tutorial for autogen warnings,FYI @baallan,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,97,2019-11-17T16:13:08Z,2019-11-18T20:22:29Z,2021-08-22T05:02:07Z,MERGED,True,2,2,2,https://github.com/oceandlr,FIX EXTRA_DIST autogen warnings,2,"['bug', 'Samplers']",https://github.com/ovis-hpc/ovis/pull/97,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/97#issuecomment-554807290,Fix EXTRA_DIST  in filesingle and sampler tutorial for autogen warnings,+1,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,102,2019-11-18T20:19:40Z,2019-11-18T20:20:23Z,2019-11-18T20:20:30Z,MERGED,True,1,0,1,https://github.com/tom95858,Add reserved field to the metric meta data,1,[],https://github.com/ovis-hpc/ovis/pull/102,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/102,"This will allow new features to be added to OVIS 4
without breaking compatability.","This will allow new features to be added to OVIS 4
without breaking compatability.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,103,2019-11-18T20:27:11Z,2019-11-18T20:29:25Z,2019-11-18T20:29:25Z,MERGED,True,1,0,1,https://github.com/tom95858,Add area to ldms_set_hdr for compatible updates,1,[],https://github.com/ovis-hpc/ovis/pull/103,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/103,"Reserve an area in the set hdr to accomodate changes
that may affect this structure but still support backward
compatability.","Reserve an area in the set hdr to accomodate changes
that may affect this structure but still support backward
compatability.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,104,2019-11-18T20:28:23Z,2019-11-18T20:29:00Z,2019-11-18T20:29:00Z,MERGED,True,5,6,1,https://github.com/tom95858,Remove race looking up open containers,1,[],https://github.com/ovis-hpc/ovis/pull/104,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/104,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,105,2019-11-19T16:31:05Z,2019-11-25T16:17:03Z,2020-08-26T21:28:12Z,MERGED,True,822,306,4,https://github.com/nichamon,Update help and the man pages of the LDMSD interfaces,3,[],https://github.com/ovis-hpc/ovis/pull/105,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/105,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,106,2019-11-19T16:33:45Z,2020-01-08T18:00:24Z,2020-09-11T03:25:50Z,MERGED,True,55,9,1,https://github.com/narategithub,Fix test_sampler metric increment logic,1,[],https://github.com/ovis-hpc/ovis/pull/106,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/106,"The test_sampler stores the latest value of the metric in schema
structure, which is shared among sets. Hence, when there are more than
one sets, the value of the metrics got increment by the number of sets
instead of 1. This patch modifies the increment logic to use the metric
value from the sets.","The test_sampler stores the latest value of the metric in schema
structure, which is shared among sets. Hence, when there are more than
one sets, the value of the metrics got increment by the number of sets
instead of 1. This patch modifies the increment logic to use the metric
value from the sets.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,107,2019-11-19T18:36:24Z,2019-11-25T16:21:48Z,2020-08-26T21:28:15Z,CLOSED,False,1,1,1,https://github.com/nichamon,Remove the 'fabric' transport from the slurm notifier man page,1,[],https://github.com/ovis-hpc/ovis/pull/107,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/107,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,107,2019-11-19T18:36:24Z,2019-11-25T16:21:48Z,2020-08-26T21:28:15Z,CLOSED,False,1,1,1,https://github.com/nichamon,Remove the 'fabric' transport from the slurm notifier man page,1,[],https://github.com/ovis-hpc/ovis/pull/107,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/107#issuecomment-558230050,,"Let's leave this in. The feature exists, but is experimental.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,109,2019-11-21T17:19:30Z,2019-11-25T16:19:07Z,2020-09-11T03:26:32Z,MERGED,True,3,0,1,https://github.com/narategithub,Add version string in ldmsd for binary string dump check,1,[],https://github.com/ovis-hpc/ovis/pull/109,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/109,"ldmsd -V shows all the version numbers that we need, but ldms-test
has a use case that needs to determine the version of the binary in the
environment that could not execute that binary. This patch will make
""LDMSD_VERSION #.#.#"" presents in ldmsd and could be check with
strings /opt/ovis/sbin/ldmsd | grep LDMSD_VERSION.","ldmsd -V shows all the version numbers that we need, but ldms-test
has a use case that needs to determine the version of the binary in the
environment that could not execute that binary. This patch will make
""LDMSD_VERSION #.#.#"" presents in ldmsd and could be check with
strings /opt/ovis/sbin/ldmsd | grep LDMSD_VERSION.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,109,2019-11-21T17:19:30Z,2019-11-25T16:19:07Z,2020-09-11T03:26:32Z,MERGED,True,3,0,1,https://github.com/narategithub,Add version string in ldmsd for binary string dump check,1,[],https://github.com/ovis-hpc/ovis/pull/109,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/109#issuecomment-557186686,"ldmsd -V shows all the version numbers that we need, but ldms-test
has a use case that needs to determine the version of the binary in the
environment that could not execute that binary. This patch will make
""LDMSD_VERSION #.#.#"" presents in ldmsd and could be check with
strings /opt/ovis/sbin/ldmsd | grep LDMSD_VERSION.",@tom95858 I built with -Wall -Werror and tested with ldms-test/agg_test,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,109,2019-11-21T17:19:30Z,2019-11-25T16:19:07Z,2020-09-11T03:26:32Z,MERGED,True,3,0,1,https://github.com/narategithub,Add version string in ldmsd for binary string dump check,1,[],https://github.com/ovis-hpc/ovis/pull/109,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/109#issuecomment-557243767,"ldmsd -V shows all the version numbers that we need, but ldms-test
has a use case that needs to determine the version of the binary in the
environment that could not execute that binary. This patch will make
""LDMSD_VERSION #.#.#"" presents in ldmsd and could be check with
strings /opt/ovis/sbin/ldmsd | grep LDMSD_VERSION.",Did you confirm that the linker does not discard the string given that it's not used? You should make this value stays around if you compile -O3.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,109,2019-11-21T17:19:30Z,2019-11-25T16:19:07Z,2020-09-11T03:26:32Z,MERGED,True,3,0,1,https://github.com/narategithub,Add version string in ldmsd for binary string dump check,1,[],https://github.com/ovis-hpc/ovis/pull/109,https://github.com/narategithub,4,https://github.com/ovis-hpc/ovis/pull/109#issuecomment-557245132,"ldmsd -V shows all the version numbers that we need, but ldms-test
has a use case that needs to determine the version of the binary in the
environment that could not execute that binary. This patch will make
""LDMSD_VERSION #.#.#"" presents in ldmsd and could be check with
strings /opt/ovis/sbin/ldmsd | grep LDMSD_VERSION.",Let me make sure with '-O3'. Will let you know later.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,109,2019-11-21T17:19:30Z,2019-11-25T16:19:07Z,2020-09-11T03:26:32Z,MERGED,True,3,0,1,https://github.com/narategithub,Add version string in ldmsd for binary string dump check,1,[],https://github.com/ovis-hpc/ovis/pull/109,https://github.com/narategithub,5,https://github.com/ovis-hpc/ovis/pull/109#issuecomment-557251916,"ldmsd -V shows all the version numbers that we need, but ldms-test
has a use case that needs to determine the version of the binary in the
environment that could not execute that binary. This patch will make
""LDMSD_VERSION #.#.#"" presents in ldmsd and could be check with
strings /opt/ovis/sbin/ldmsd | grep LDMSD_VERSION.",Turing on '-O3 -Wall -Werror' uncovers more use-before-init errors :( I'll post the patch in a bit.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,109,2019-11-21T17:19:30Z,2019-11-25T16:19:07Z,2020-09-11T03:26:32Z,MERGED,True,3,0,1,https://github.com/narategithub,Add version string in ldmsd for binary string dump check,1,[],https://github.com/ovis-hpc/ovis/pull/109,https://github.com/narategithub,6,https://github.com/ovis-hpc/ovis/pull/109#issuecomment-557261408,"ldmsd -V shows all the version numbers that we need, but ldms-test
has a use case that needs to determine the version of the binary in the
environment that could not execute that binary. This patch will make
""LDMSD_VERSION #.#.#"" presents in ldmsd and could be check with
strings /opt/ovis/sbin/ldmsd | grep LDMSD_VERSION.","@tom95858 the string has survived -O3.
Please also see #113 for more compilation warning fix that somehow don't show up with -O0.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,109,2019-11-21T17:19:30Z,2019-11-25T16:19:07Z,2020-09-11T03:26:32Z,MERGED,True,3,0,1,https://github.com/narategithub,Add version string in ldmsd for binary string dump check,1,[],https://github.com/ovis-hpc/ovis/pull/109,https://github.com/narategithub,7,https://github.com/ovis-hpc/ovis/pull/109#issuecomment-557261878,"ldmsd -V shows all the version numbers that we need, but ldms-test
has a use case that needs to determine the version of the binary in the
environment that could not execute that binary. This patch will make
""LDMSD_VERSION #.#.#"" presents in ldmsd and could be check with
strings /opt/ovis/sbin/ldmsd | grep LDMSD_VERSION.",@tom95858 p.s. The github/master + this patch + #113 has been tested with ldms-test/papi_store_test.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,109,2019-11-21T17:19:30Z,2019-11-25T16:19:07Z,2020-09-11T03:26:32Z,MERGED,True,3,0,1,https://github.com/narategithub,Add version string in ldmsd for binary string dump check,1,[],https://github.com/ovis-hpc/ovis/pull/109,https://github.com/narategithub,8,https://github.com/ovis-hpc/ovis/pull/109#issuecomment-557267559,"ldmsd -V shows all the version numbers that we need, but ldms-test
has a use case that needs to determine the version of the binary in the
environment that could not execute that binary. This patch will make
""LDMSD_VERSION #.#.#"" presents in ldmsd and could be check with
strings /opt/ovis/sbin/ldmsd | grep LDMSD_VERSION.","FYI, current master + this patch (#109) + #113 also passed all tests in ldms-test.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,112,2019-11-21T19:58:36Z,2020-01-23T23:25:17Z,2020-01-23T23:25:17Z,CLOSED,False,43284,41101,705,https://github.com/baallan,merge configures to top (complete),403,[],https://github.com/ovis-hpc/ovis/pull/112,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/112,"I have tested this on rhel7 (dist, distclean, distcheck, uninstall, and build from dist tar file).
It should also be applicable to 4.3.3, but isn't strictly necessary.
If there are not quick objections from other's testing, it should be merged.
Note: re issue #108, other than a few missing extra_dist that are clearly useful (which I fixed), the items listed by narate are missing in dist because they are not built or installed or documented. Fixing these is out of scope for just merging configure.ac.
This consolidates the 3 configure.ac files into one and fixes collateral damage such as redundant installed files like ovis-lib-* vs ovis-ldms-* and  between formerly two pkglibdirs
There are no C level algorithmic or API changes. There are obviously changes that will simplify (and require change) in downstream packaging tools. Other than doc tree and python lib, there are no changes affecting installed library locations if in the old version both lib and ldms were configured with the same pkglibdir name.
Updating a small number of include (ovis-ldms-config.h) or import statements (ovis_lib->ovis_ldms) detectable with build, grep or trivial testing is included.
OVIS_*_LIB*DIR and OVIS_*_INCDIR have been replaced with common
 OVIS_LIB_ABS and OVIS_INCLUDE_ABS in all makefile.am to guarantee
 consistency even when system-installed ldms exists.

Refactoring/merging of complex bits, like the doxygen trees of lib, ldms is not included, as this should probably be considered only after we consolidate lib/src with ldms/src and reorganize (shrink) the number of tiny support libraries.","I have tested this on rhel7 (dist, distclean, distcheck, uninstall, and build from dist tar file).
It should also be applicable to 4.3.3, but isn't strictly necessary.
If there are not quick objections from other's testing, it should be merged.
Note: re issue #108, other than a few missing extra_dist that are clearly useful (which I fixed), the items listed by narate are missing in dist because they are not built or installed or documented. Fixing these is out of scope for just merging configure.ac.
This consolidates the 3 configure.ac files into one and fixes collateral damage such as redundant installed files like ovis-lib-* vs ovis-ldms-* and  between formerly two pkglibdirs
There are no C level algorithmic or API changes. There are obviously changes that will simplify (and require change) in downstream packaging tools. Other than doc tree and python lib, there are no changes affecting installed library locations if in the old version both lib and ldms were configured with the same pkglibdir name.
Updating a small number of include (ovis-ldms-config.h) or import statements (ovis_lib->ovis_ldms) detectable with build, grep or trivial testing is included.
OVIS_*_LIB*DIR and OVIS_*_INCDIR have been replaced with common
 OVIS_LIB_ABS and OVIS_INCLUDE_ABS in all makefile.am to guarantee
 consistency even when system-installed ldms exists.

Refactoring/merging of complex bits, like the doxygen trees of lib, ldms is not included, as this should probably be considered only after we consolidate lib/src with ldms/src and reorganize (shrink) the number of tiny support libraries.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,112,2019-11-21T19:58:36Z,2020-01-23T23:25:17Z,2020-01-23T23:25:17Z,CLOSED,False,43284,41101,705,https://github.com/baallan,merge configures to top (complete),403,[],https://github.com/ovis-hpc/ovis/pull/112,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/112#issuecomment-557251009,"I have tested this on rhel7 (dist, distclean, distcheck, uninstall, and build from dist tar file).
It should also be applicable to 4.3.3, but isn't strictly necessary.
If there are not quick objections from other's testing, it should be merged.
Note: re issue #108, other than a few missing extra_dist that are clearly useful (which I fixed), the items listed by narate are missing in dist because they are not built or installed or documented. Fixing these is out of scope for just merging configure.ac.
This consolidates the 3 configure.ac files into one and fixes collateral damage such as redundant installed files like ovis-lib-* vs ovis-ldms-* and  between formerly two pkglibdirs
There are no C level algorithmic or API changes. There are obviously changes that will simplify (and require change) in downstream packaging tools. Other than doc tree and python lib, there are no changes affecting installed library locations if in the old version both lib and ldms were configured with the same pkglibdir name.
Updating a small number of include (ovis-ldms-config.h) or import statements (ovis_lib->ovis_ldms) detectable with build, grep or trivial testing is included.
OVIS_*_LIB*DIR and OVIS_*_INCDIR have been replaced with common
 OVIS_LIB_ABS and OVIS_INCLUDE_ABS in all makefile.am to guarantee
 consistency even when system-installed ldms exists.

Refactoring/merging of complex bits, like the doxygen trees of lib, ldms is not included, as this should probably be considered only after we consolidate lib/src with ldms/src and reorganize (shrink) the number of tiny support libraries.","I anticipate testing this on toss3 and the OS for bluewaters.
@valleydlr can you test (or delegate to someone other than me) testing for CLE6?
@morrone please review.
@tom95858 can you tag someone at ogc to run your tests, particularly related to python?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,112,2019-11-21T19:58:36Z,2020-01-23T23:25:17Z,2020-01-23T23:25:17Z,CLOSED,False,43284,41101,705,https://github.com/baallan,merge configures to top (complete),403,[],https://github.com/ovis-hpc/ovis/pull/112,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/112#issuecomment-558470546,"I have tested this on rhel7 (dist, distclean, distcheck, uninstall, and build from dist tar file).
It should also be applicable to 4.3.3, but isn't strictly necessary.
If there are not quick objections from other's testing, it should be merged.
Note: re issue #108, other than a few missing extra_dist that are clearly useful (which I fixed), the items listed by narate are missing in dist because they are not built or installed or documented. Fixing these is out of scope for just merging configure.ac.
This consolidates the 3 configure.ac files into one and fixes collateral damage such as redundant installed files like ovis-lib-* vs ovis-ldms-* and  between formerly two pkglibdirs
There are no C level algorithmic or API changes. There are obviously changes that will simplify (and require change) in downstream packaging tools. Other than doc tree and python lib, there are no changes affecting installed library locations if in the old version both lib and ldms were configured with the same pkglibdir name.
Updating a small number of include (ovis-ldms-config.h) or import statements (ovis_lib->ovis_ldms) detectable with build, grep or trivial testing is included.
OVIS_*_LIB*DIR and OVIS_*_INCDIR have been replaced with common
 OVIS_LIB_ABS and OVIS_INCLUDE_ABS in all makefile.am to guarantee
 consistency even when system-installed ldms exists.

Refactoring/merging of complex bits, like the doxygen trees of lib, ldms is not included, as this should probably be considered only after we consolidate lib/src with ldms/src and reorganize (shrink) the number of tiny support libraries.",I've replaced OVIS_EXEC_SCRIPTS with ac_config_files almost as suggested (cleaner version) and fixed some lib dependency bugs that broke parallel build. More platform testing and verification of make dist will be useful. I have not verified all the suggested reductions to extra-dist work as expected yet.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,112,2019-11-21T19:58:36Z,2020-01-23T23:25:17Z,2020-01-23T23:25:17Z,CLOSED,False,43284,41101,705,https://github.com/baallan,merge configures to top (complete),403,[],https://github.com/ovis-hpc/ovis/pull/112,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/112#issuecomment-559083707,"I have tested this on rhel7 (dist, distclean, distcheck, uninstall, and build from dist tar file).
It should also be applicable to 4.3.3, but isn't strictly necessary.
If there are not quick objections from other's testing, it should be merged.
Note: re issue #108, other than a few missing extra_dist that are clearly useful (which I fixed), the items listed by narate are missing in dist because they are not built or installed or documented. Fixing these is out of scope for just merging configure.ac.
This consolidates the 3 configure.ac files into one and fixes collateral damage such as redundant installed files like ovis-lib-* vs ovis-ldms-* and  between formerly two pkglibdirs
There are no C level algorithmic or API changes. There are obviously changes that will simplify (and require change) in downstream packaging tools. Other than doc tree and python lib, there are no changes affecting installed library locations if in the old version both lib and ldms were configured with the same pkglibdir name.
Updating a small number of include (ovis-ldms-config.h) or import statements (ovis_lib->ovis_ldms) detectable with build, grep or trivial testing is included.
OVIS_*_LIB*DIR and OVIS_*_INCDIR have been replaced with common
 OVIS_LIB_ABS and OVIS_INCLUDE_ABS in all makefile.am to guarantee
 consistency even when system-installed ldms exists.

Refactoring/merging of complex bits, like the doxygen trees of lib, ldms is not included, as this should probably be considered only after we consolidate lib/src with ldms/src and reorganize (shrink) the number of tiny support libraries.","I  added the other extradist changes from @morrone after more testing.
Unrelated to the @morrone patch, a comparison of the dist tar content to the original source reveals the following differences, which I will look into resolving (what is missing? what is extra? what is just cruft?)
MISSING in dist, or from .in files (verify) or cruft that should be elsewhere
README.md
helper-scripts/*
kernel/kldms/*
etc/*
ldms/src/ldmsd/ldmsd_upload.c
ldms/src/sampler/lustre/fnv_hash.h, llite1_keys.txt
ldms/src/sampler/papi/tests
ldms/src/sampler/shm/mpi_profiler/wrap/wrap.py
ldms/src/sampler/shm/shm_util/Makefile
ldms/src/sampler/spank
ldms/src/sampler/syspapi/test
ldms/src/sampler/switchx_eth.c
ldms/src/swig/create_set_test.py
ldms/src/swig/pytest.py
ldms/src/test/failover-*
lib/bin/src/map_cmd.c ,(makefile.am?)
lib/etc/ovis/log-rotate.in
lib/python/
lib/src/coll/map.h,map_priv.h,libmap.c
lib/src/ovis_util/rmaninfo.[ch]
packaging/*
util/aries
util/mmr_reader
util/cray_specific
util/failover
util/gemini
util/msr
util/sample_baler_scripts
util/sample_init_scripts/genders/examples/genders.shaun
util/sample_init_scripts/genders/systemd/etc/sysconfig/ldms.d/ldmsd..conf
util/sample_init_scripts/genders/sysv/etc/sysconfig/ldms.d (symlink?)
util/sample_init_scripts/genders/test
Extra in dist tree:
ldms/config/*
lib/config/*
lib/src/ovis-lib-configvars?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,112,2019-11-21T19:58:36Z,2020-01-23T23:25:17Z,2020-01-23T23:25:17Z,CLOSED,False,43284,41101,705,https://github.com/baallan,merge configures to top (complete),403,[],https://github.com/ovis-hpc/ovis/pull/112,https://github.com/morrone,5,https://github.com/ovis-hpc/ovis/pull/112#issuecomment-559197039,"I have tested this on rhel7 (dist, distclean, distcheck, uninstall, and build from dist tar file).
It should also be applicable to 4.3.3, but isn't strictly necessary.
If there are not quick objections from other's testing, it should be merged.
Note: re issue #108, other than a few missing extra_dist that are clearly useful (which I fixed), the items listed by narate are missing in dist because they are not built or installed or documented. Fixing these is out of scope for just merging configure.ac.
This consolidates the 3 configure.ac files into one and fixes collateral damage such as redundant installed files like ovis-lib-* vs ovis-ldms-* and  between formerly two pkglibdirs
There are no C level algorithmic or API changes. There are obviously changes that will simplify (and require change) in downstream packaging tools. Other than doc tree and python lib, there are no changes affecting installed library locations if in the old version both lib and ldms were configured with the same pkglibdir name.
Updating a small number of include (ovis-ldms-config.h) or import statements (ovis_lib->ovis_ldms) detectable with build, grep or trivial testing is included.
OVIS_*_LIB*DIR and OVIS_*_INCDIR have been replaced with common
 OVIS_LIB_ABS and OVIS_INCLUDE_ABS in all makefile.am to guarantee
 consistency even when system-installed ldms exists.

Refactoring/merging of complex bits, like the doxygen trees of lib, ldms is not included, as this should probably be considered only after we consolidate lib/src with ldms/src and reorganize (shrink) the number of tiny support libraries.","FYI, there is a list of the missing dist files in #108.  It doesn't address the extras that shouldn't be there (which includes some .in files).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,112,2019-11-21T19:58:36Z,2020-01-23T23:25:17Z,2020-01-23T23:25:17Z,CLOSED,False,43284,41101,705,https://github.com/baallan,merge configures to top (complete),403,[],https://github.com/ovis-hpc/ovis/pull/112,https://github.com/baallan,6,https://github.com/ovis-hpc/ovis/pull/112#issuecomment-577285594,"I have tested this on rhel7 (dist, distclean, distcheck, uninstall, and build from dist tar file).
It should also be applicable to 4.3.3, but isn't strictly necessary.
If there are not quick objections from other's testing, it should be merged.
Note: re issue #108, other than a few missing extra_dist that are clearly useful (which I fixed), the items listed by narate are missing in dist because they are not built or installed or documented. Fixing these is out of scope for just merging configure.ac.
This consolidates the 3 configure.ac files into one and fixes collateral damage such as redundant installed files like ovis-lib-* vs ovis-ldms-* and  between formerly two pkglibdirs
There are no C level algorithmic or API changes. There are obviously changes that will simplify (and require change) in downstream packaging tools. Other than doc tree and python lib, there are no changes affecting installed library locations if in the old version both lib and ldms were configured with the same pkglibdir name.
Updating a small number of include (ovis-ldms-config.h) or import statements (ovis_lib->ovis_ldms) detectable with build, grep or trivial testing is included.
OVIS_*_LIB*DIR and OVIS_*_INCDIR have been replaced with common
 OVIS_LIB_ABS and OVIS_INCLUDE_ABS in all makefile.am to guarantee
 consistency even when system-installed ldms exists.

Refactoring/merging of complex bits, like the doxygen trees of lib, ldms is not included, as this should probably be considered only after we consolidate lib/src with ldms/src and reorganize (shrink) the number of tiny support libraries.","@tom95858 @narategithub @oceandlr So is master on github now pre-v5? Or is some future magic planned such that version 4.100.x will become 4.4 at the next 4 release?
@morrone @tom95858 Should we be landing the config cleanup pull request outstanding on OVIS-4 branch to facilitate llnl/toss packaging, or only on master, or both?
Due to the force push on master, there's now a ton of conflicts to my PR.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,112,2019-11-21T19:58:36Z,2020-01-23T23:25:17Z,2020-01-23T23:25:17Z,CLOSED,False,43284,41101,705,https://github.com/baallan,merge configures to top (complete),403,[],https://github.com/ovis-hpc/ovis/pull/112,https://github.com/tom95858,7,https://github.com/ovis-hpc/ovis/pull/112#issuecomment-577340375,"I have tested this on rhel7 (dist, distclean, distcheck, uninstall, and build from dist tar file).
It should also be applicable to 4.3.3, but isn't strictly necessary.
If there are not quick objections from other's testing, it should be merged.
Note: re issue #108, other than a few missing extra_dist that are clearly useful (which I fixed), the items listed by narate are missing in dist because they are not built or installed or documented. Fixing these is out of scope for just merging configure.ac.
This consolidates the 3 configure.ac files into one and fixes collateral damage such as redundant installed files like ovis-lib-* vs ovis-ldms-* and  between formerly two pkglibdirs
There are no C level algorithmic or API changes. There are obviously changes that will simplify (and require change) in downstream packaging tools. Other than doc tree and python lib, there are no changes affecting installed library locations if in the old version both lib and ldms were configured with the same pkglibdir name.
Updating a small number of include (ovis-ldms-config.h) or import statements (ovis_lib->ovis_ldms) detectable with build, grep or trivial testing is included.
OVIS_*_LIB*DIR and OVIS_*_INCDIR have been replaced with common
 OVIS_LIB_ABS and OVIS_INCLUDE_ABS in all makefile.am to guarantee
 consistency even when system-installed ldms exists.

Refactoring/merging of complex bits, like the doxygen trees of lib, ldms is not included, as this should probably be considered only after we consolidate lib/src with ldms/src and reorganize (shrink) the number of tiny support libraries.","@tom95858 @narategithub @oceandlr So is master on github now pre-v5? Or is some future magic planned such that version 4.100.x will become 4.4 at the next 4 release?

master is ovis-next. There is  no version specified yet.

@morrone @tom95858 Should we be landing the config cleanup pull request outstanding on OVIS-4 branch to facilitate llnl/toss packaging, or only on master, or both?

It should go on both:
OVIS-4 is the v4.x.y development branch
master is the ovis-next development branch

Due to the force push on master, there's now a ton of conflicts to my PR.

master now points to a completely different rev history, i.e. ovis-next
This pull request should probably be abandoned and resubmitted as two separate pull requests, one on OVIS-4, and another (probably very different) on master
For OVIS-4, what I had been doing with pull requests that had conflicts was to cherry-pick the commits from the pull request into OVIS-4, fixing the conflicts, pushing the result to OVIS-4, and then closing the pull request.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,112,2019-11-21T19:58:36Z,2020-01-23T23:25:17Z,2020-01-23T23:25:17Z,CLOSED,False,43284,41101,705,https://github.com/baallan,merge configures to top (complete),403,[],https://github.com/ovis-hpc/ovis/pull/112,https://github.com/baallan,8,https://github.com/ovis-hpc/ovis/pull/112#issuecomment-577924674,"I have tested this on rhel7 (dist, distclean, distcheck, uninstall, and build from dist tar file).
It should also be applicable to 4.3.3, but isn't strictly necessary.
If there are not quick objections from other's testing, it should be merged.
Note: re issue #108, other than a few missing extra_dist that are clearly useful (which I fixed), the items listed by narate are missing in dist because they are not built or installed or documented. Fixing these is out of scope for just merging configure.ac.
This consolidates the 3 configure.ac files into one and fixes collateral damage such as redundant installed files like ovis-lib-* vs ovis-ldms-* and  between formerly two pkglibdirs
There are no C level algorithmic or API changes. There are obviously changes that will simplify (and require change) in downstream packaging tools. Other than doc tree and python lib, there are no changes affecting installed library locations if in the old version both lib and ldms were configured with the same pkglibdir name.
Updating a small number of include (ovis-ldms-config.h) or import statements (ovis_lib->ovis_ldms) detectable with build, grep or trivial testing is included.
OVIS_*_LIB*DIR and OVIS_*_INCDIR have been replaced with common
 OVIS_LIB_ABS and OVIS_INCLUDE_ABS in all makefile.am to guarantee
 consistency even when system-installed ldms exists.

Refactoring/merging of complex bits, like the doxygen trees of lib, ldms is not included, as this should probably be considered only after we consolidate lib/src with ldms/src and reorganize (shrink) the number of tiny support libraries.",replaced with PR 130,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,113,2019-11-21T20:35:02Z,2019-11-25T16:20:58Z,2020-09-11T03:22:43Z,MERGED,True,31,11,11,https://github.com/narategithub,Fix compilation warnings for `-O3 -Wall -Werror`,1,[],https://github.com/ovis-hpc/ovis/pull/113,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/113,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,117,2019-11-27T21:22:43Z,2020-01-08T18:01:27Z,2020-01-08T18:01:27Z,MERGED,True,1,1,1,https://github.com/medberry,Typo,1,[],https://github.com/ovis-hpc/ovis/pull/117,https://github.com/medberry,1,https://github.com/ovis-hpc/ovis/pull/117,Fix typo in README.md. Cosmetic,Fix typo in README.md. Cosmetic,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,124,2019-12-12T17:29:37Z,2020-01-08T18:09:13Z,2020-01-08T18:09:14Z,MERGED,True,18,6,1,https://github.com/baallan,add diagnostic info to failed rdma listen.,1,[],https://github.com/ovis-hpc/ovis/pull/124,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/124,This is driven by an issue at LANL and adds log info for listen failures.,This is driven by an issue at LANL and adds log info for listen failures.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,124,2019-12-12T17:29:37Z,2020-01-08T18:09:13Z,2020-01-08T18:09:14Z,MERGED,True,18,6,1,https://github.com/baallan,add diagnostic info to failed rdma listen.,1,[],https://github.com/ovis-hpc/ovis/pull/124,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/124#issuecomment-565479269,This is driven by an issue at LANL and adds log info for listen failures.,"With this patch added, we're seeing an error on mlx5/mofed 4.7:
This particular transport code is essentially unchanged in version 4.3 ldms also.
@tom95858 any experience on why rdma_create_event_channel fails?
Fri Dec 13 07:57:31 2019: CRITICAL  : Started LDMS Daemon with authentication version 3.4.13. LDMSD Interface Version 3.2.2.0. LDMS Protocol Version 3.3.0.0. git-SHA fb12c0ee3007352f334f3dee1fbad35c19263269
Fri Dec 13 07:57:32 2019: INFO      : z_rdma_listen: rdma_create_event_channel failed. zerr 7
Fri Dec 13 07:57:32 2019: ERROR     : Error 7 listening on the 'rdma' transport.
Fri Dec 13 07:57:32 2019: DEBUG     : mmap use at exit: mm_stat: size=524288000 grain=1024 chunks_free=1 grains_free=512000 grains_largest=512000 grains_smallest=512000 bytes_free=524288000 bytes_largest=524288000 bytes_smallest=524288000 bytes_used+holes=0

Fri Dec 13 07:57:32 2019: CRITICAL  : LDMSD_ LDMS Daemon exiting...status 7, error listening on transport
'```",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,129,2020-01-22T20:25:52Z,2020-01-23T15:49:41Z,2020-01-23T15:49:41Z,CLOSED,False,1239,1674,126,https://github.com/baallan,One configure,3,[],https://github.com/ovis-hpc/ovis/pull/129,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/129,This is the retargeting to OVIS-4 of PR #112,This is the retargeting to OVIS-4 of PR #112,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,130,2020-01-23T23:24:31Z,2020-02-01T21:44:48Z,2020-02-01T21:44:48Z,MERGED,True,1257,1714,136,https://github.com/baallan,merge configures to top for v4,1,[],https://github.com/ovis-hpc/ovis/pull/130,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/130,"This consolidates the 3 configure.ac files into one and fixes collateral damage such as redundant installed files like ovis-lib-* vs ovis-ldms-* and between formerly two pkglibdirs. M4 code is consolidated to the top.
There are no C level algorithmic or API changes. There are obviously changes that will simplify (and require change) in downstream packaging tools. Other than doc tree and python lib, there are no changes affecting installed library locations if in the old version both lib and ldms were configured with the same pkglibdir name.
Updating a small number of include (ovis-ldms-config.h) or import statements (ovis_lib->ovis_ldms) detectable with build, grep or trivial testing is included.
Change OVIS_LIB_HAVE_AUTH to OVIS_LDMS_HAVE_AUTH in any c conditionals.
OVIS__LIBDIR and OVIS_*_INCDIR have been replaced with common
OVIS_LIB_ABS and OVIS_INCLUDE_ABS in all makefile.am to guarantee
consistency even when system-installed ldms exists.
Refactoring/merging of complex bits, like the doxygen trees of lib, ldms is not included, as this should probably be considered only after we consolidate lib/src with ldms/src and reorganize (shrink) the number of tiny support libraries.
The helper-script configure.ac and makefile has never been tied to the top; perhaps these scripts should be relocated or eliminated since they make invalid assumptions (relative to autotools) about sysconfdir. In any case, helper-scripts is omitted from this refactoring.
For libraries built in the same directory, using the form libxyz.la for lib adds instead of -lxyz, so that local dependencies are correctly computed automatically.","This consolidates the 3 configure.ac files into one and fixes collateral damage such as redundant installed files like ovis-lib-* vs ovis-ldms-* and between formerly two pkglibdirs. M4 code is consolidated to the top.
There are no C level algorithmic or API changes. There are obviously changes that will simplify (and require change) in downstream packaging tools. Other than doc tree and python lib, there are no changes affecting installed library locations if in the old version both lib and ldms were configured with the same pkglibdir name.
Updating a small number of include (ovis-ldms-config.h) or import statements (ovis_lib->ovis_ldms) detectable with build, grep or trivial testing is included.
Change OVIS_LIB_HAVE_AUTH to OVIS_LDMS_HAVE_AUTH in any c conditionals.
OVIS__LIBDIR and OVIS_*_INCDIR have been replaced with common
OVIS_LIB_ABS and OVIS_INCLUDE_ABS in all makefile.am to guarantee
consistency even when system-installed ldms exists.
Refactoring/merging of complex bits, like the doxygen trees of lib, ldms is not included, as this should probably be considered only after we consolidate lib/src with ldms/src and reorganize (shrink) the number of tiny support libraries.
The helper-script configure.ac and makefile has never been tied to the top; perhaps these scripts should be relocated or eliminated since they make invalid assumptions (relative to autotools) about sysconfdir. In any case, helper-scripts is omitted from this refactoring.
For libraries built in the same directory, using the form libxyz.la for lib adds instead of -lxyz, so that local dependencies are correctly computed automatically.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,130,2020-01-23T23:24:31Z,2020-02-01T21:44:48Z,2020-02-01T21:44:48Z,MERGED,True,1257,1714,136,https://github.com/baallan,merge configures to top for v4,1,[],https://github.com/ovis-hpc/ovis/pull/130,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/130#issuecomment-580893616,"This consolidates the 3 configure.ac files into one and fixes collateral damage such as redundant installed files like ovis-lib-* vs ovis-ldms-* and between formerly two pkglibdirs. M4 code is consolidated to the top.
There are no C level algorithmic or API changes. There are obviously changes that will simplify (and require change) in downstream packaging tools. Other than doc tree and python lib, there are no changes affecting installed library locations if in the old version both lib and ldms were configured with the same pkglibdir name.
Updating a small number of include (ovis-ldms-config.h) or import statements (ovis_lib->ovis_ldms) detectable with build, grep or trivial testing is included.
Change OVIS_LIB_HAVE_AUTH to OVIS_LDMS_HAVE_AUTH in any c conditionals.
OVIS__LIBDIR and OVIS_*_INCDIR have been replaced with common
OVIS_LIB_ABS and OVIS_INCLUDE_ABS in all makefile.am to guarantee
consistency even when system-installed ldms exists.
Refactoring/merging of complex bits, like the doxygen trees of lib, ldms is not included, as this should probably be considered only after we consolidate lib/src with ldms/src and reorganize (shrink) the number of tiny support libraries.
The helper-script configure.ac and makefile has never been tied to the top; perhaps these scripts should be relocated or eliminated since they make invalid assumptions (relative to autotools) about sysconfdir. In any case, helper-scripts is omitted from this refactoring.
For libraries built in the same directory, using the form libxyz.la for lib adds instead of -lxyz, so that local dependencies are correctly computed automatically.",@tom95858 is ogc satisfied with this or do you still have testing in progress?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,130,2020-01-23T23:24:31Z,2020-02-01T21:44:48Z,2020-02-01T21:44:48Z,MERGED,True,1257,1714,136,https://github.com/baallan,merge configures to top for v4,1,[],https://github.com/ovis-hpc/ovis/pull/130,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/130#issuecomment-581072385,"This consolidates the 3 configure.ac files into one and fixes collateral damage such as redundant installed files like ovis-lib-* vs ovis-ldms-* and between formerly two pkglibdirs. M4 code is consolidated to the top.
There are no C level algorithmic or API changes. There are obviously changes that will simplify (and require change) in downstream packaging tools. Other than doc tree and python lib, there are no changes affecting installed library locations if in the old version both lib and ldms were configured with the same pkglibdir name.
Updating a small number of include (ovis-ldms-config.h) or import statements (ovis_lib->ovis_ldms) detectable with build, grep or trivial testing is included.
Change OVIS_LIB_HAVE_AUTH to OVIS_LDMS_HAVE_AUTH in any c conditionals.
OVIS__LIBDIR and OVIS_*_INCDIR have been replaced with common
OVIS_LIB_ABS and OVIS_INCLUDE_ABS in all makefile.am to guarantee
consistency even when system-installed ldms exists.
Refactoring/merging of complex bits, like the doxygen trees of lib, ldms is not included, as this should probably be considered only after we consolidate lib/src with ldms/src and reorganize (shrink) the number of tiny support libraries.
The helper-script configure.ac and makefile has never been tied to the top; perhaps these scripts should be relocated or eliminated since they make invalid assumptions (relative to autotools) about sysconfdir. In any case, helper-scripts is omitted from this refactoring.
For libraries built in the same directory, using the form libxyz.la for lib adds instead of -lxyz, so that local dependencies are correctly computed automatically.",Your contrib patch broke the packaging build for LBL. I think this patch sits on top of that. I'll pull this in and then rebase Eric's fix on top of that.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,132,2020-01-27T20:35:08Z,2020-02-16T23:47:04Z,2020-09-11T03:25:00Z,MERGED,True,108,44,8,https://github.com/narategithub,Markdown link fix,1,[],https://github.com/ovis-hpc/ovis/pull/132,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/132,"TLDR; Make internal hyper links in Markdown files work on GitHub, GitLab
and in Doxygen-genarated HTML.
Historically, Doxygen does not understand relative document location in
the Markdown source file. It understands only a path relative to the
doxygen program working directory (which is the top-dir of the project).
GitLab on the other hand understands both document relative paths and
top-dir relative paths. As such, all internal document links in the
Markdown files are relative to the top-dir.
Unfortunately, GitHub only understands relative paths, but not top-dir
relative paths. This breaks document browsing from README.md and
ldms/README.md on GitHub.
This patch address the problem as follows:

Change all internal hyperlink references to be relative to its
current file.
Apply a Doxygen input filter script to expand the relative paths to
top-dir relative paths.","TLDR; Make internal hyper links in Markdown files work on GitHub, GitLab
and in Doxygen-genarated HTML.
Historically, Doxygen does not understand relative document location in
the Markdown source file. It understands only a path relative to the
doxygen program working directory (which is the top-dir of the project).
GitLab on the other hand understands both document relative paths and
top-dir relative paths. As such, all internal document links in the
Markdown files are relative to the top-dir.
Unfortunately, GitHub only understands relative paths, but not top-dir
relative paths. This breaks document browsing from README.md and
ldms/README.md on GitHub.
This patch address the problem as follows:

Change all internal hyperlink references to be relative to its
current file.
Apply a Doxygen input filter script to expand the relative paths to
top-dir relative paths.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,132,2020-01-27T20:35:08Z,2020-02-16T23:47:04Z,2020-09-11T03:25:00Z,MERGED,True,108,44,8,https://github.com/narategithub,Markdown link fix,1,[],https://github.com/ovis-hpc/ovis/pull/132,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/132#issuecomment-578941653,"TLDR; Make internal hyper links in Markdown files work on GitHub, GitLab
and in Doxygen-genarated HTML.
Historically, Doxygen does not understand relative document location in
the Markdown source file. It understands only a path relative to the
doxygen program working directory (which is the top-dir of the project).
GitLab on the other hand understands both document relative paths and
top-dir relative paths. As such, all internal document links in the
Markdown files are relative to the top-dir.
Unfortunately, GitHub only understands relative paths, but not top-dir
relative paths. This breaks document browsing from README.md and
ldms/README.md on GitHub.
This patch address the problem as follows:

Change all internal hyperlink references to be relative to its
current file.
Apply a Doxygen input filter script to expand the relative paths to
top-dir relative paths.","@valleydlr @tom95858
Right now the internal document hyper links in Markdown files (e.g. https://github.com/ovis-hpc/ovis/blob/master/ldms/README.md) are broken on GitHub. This patch fix the issue. I have tested that this now works on GitHub, GitLab and Doxygen-generated HTML.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,134,2020-02-03T16:28:41Z,2020-02-16T23:46:42Z,2020-02-16T23:46:42Z,MERGED,True,2,2,1,https://github.com/baallan,fix missing destdir in install rule of ldmsauth.conf,1,[],https://github.com/ovis-hpc/ovis/pull/134,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/134,the build is broken for genders install in some scenarios and this fixes it.,the build is broken for genders install in some scenarios and this fixes it.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,135,2020-02-03T16:31:07Z,2020-02-06T21:53:52Z,2020-02-06T21:53:52Z,MERGED,True,2,2,1,https://github.com/baallan,fix missing destdir in install rule of ldmsauth.conf,1,[],https://github.com/ovis-hpc/ovis/pull/135,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/135,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,136,2020-02-04T15:41:29Z,2020-02-19T21:22:03Z,2020-08-26T21:28:06Z,MERGED,True,37,6,2,https://github.com/nichamon,zap_sock: return wrong maximum message size,1,[],https://github.com/ovis-hpc/ovis/pull/136,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/136,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,136,2020-02-04T15:41:29Z,2020-02-19T21:22:03Z,2020-08-26T21:28:06Z,MERGED,True,37,6,2,https://github.com/nichamon,zap_sock: return wrong maximum message size,1,[],https://github.com/ovis-hpc/ovis/pull/136,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/136#issuecomment-581972650,,"@tom95858  I didn't use getsockopt because there is no socket file descriptors when the max_msg value is assigned in zap_transport_get. Moreover, the zap_max_msg API directly returns the value of zap->max_msg.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,136,2020-02-04T15:41:29Z,2020-02-19T21:22:03Z,2020-08-26T21:28:06Z,MERGED,True,37,6,2,https://github.com/nichamon,zap_sock: return wrong maximum message size,1,[],https://github.com/ovis-hpc/ovis/pull/136,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/136#issuecomment-582505326,,@tom95858 do we need the zap_sock patch for v4 also? We're about to start large scale testing and need to know.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,136,2020-02-04T15:41:29Z,2020-02-19T21:22:03Z,2020-08-26T21:28:06Z,MERGED,True,37,6,2,https://github.com/nichamon,zap_sock: return wrong maximum message size,1,[],https://github.com/ovis-hpc/ovis/pull/136,https://github.com/tom95858,4,https://github.com/ovis-hpc/ovis/pull/136#issuecomment-582576614,,"Please confirm that zap_max_msg matches the socket buffer size for the transports that use a socket. IOW if the transport reports zap_max_msg of 1M, then setsockopt should be used to set the sockbuf size to match when it is created in connect, and to resize it as part of accept handling. We should also confirm that this size matches the recv buf size for the RDMA transport.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,137,2020-02-04T15:49:29Z,2020-02-05T19:27:29Z,2020-08-26T21:28:10Z,MERGED,True,5,2,1,https://github.com/nichamon,json_util copies a va_list before it is to be reused in jbuf_append_va.,1,[],https://github.com/ovis-hpc/ovis/pull/137,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/137,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,137,2020-02-04T15:49:29Z,2020-02-05T19:27:29Z,2020-08-26T21:28:10Z,MERGED,True,5,2,1,https://github.com/nichamon,json_util copies a va_list before it is to be reused in jbuf_append_va.,1,[],https://github.com/ovis-hpc/ovis/pull/137,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/137#issuecomment-582123945,,It appears this also applies to OVIS-4.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,137,2020-02-04T15:49:29Z,2020-02-05T19:27:29Z,2020-08-26T21:28:10Z,MERGED,True,5,2,1,https://github.com/nichamon,json_util copies a va_list before it is to be reused in jbuf_append_va.,1,[],https://github.com/ovis-hpc/ovis/pull/137,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/137#issuecomment-582373552,,I think the description is misleading. I think you mean to say that the va_list must be copied if it is to be reused in subsequent calls to jbuf_append_va.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,137,2020-02-04T15:49:29Z,2020-02-05T19:27:29Z,2020-08-26T21:28:10Z,MERGED,True,5,2,1,https://github.com/nichamon,json_util copies a va_list before it is to be reused in jbuf_append_va.,1,[],https://github.com/ovis-hpc/ovis/pull/137,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/137#issuecomment-583145889,,@tom95858 please cherry pick this back to the OVIS-4 branch if it applies.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,138,2020-02-04T21:36:27Z,2020-02-06T21:51:05Z,2020-02-06T21:51:05Z,MERGED,True,4,4,3,https://github.com/baallan,fix reversion of ldmsd lib prefix and merge induced naming,1,[],https://github.com/ovis-hpc/ovis/pull/138,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/138,"This removes incorrect use of libjson_parser (-> libjson_util)
and reverted libldmsd_plugattr name libplugattr appearances.
The occurred in the one_configure change.","This removes incorrect use of libjson_parser (-> libjson_util)
and reverted libldmsd_plugattr name libplugattr appearances.
The occurred in the one_configure change.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,140,2020-02-06T19:21:51Z,2020-02-06T21:53:10Z,2020-02-06T21:53:11Z,MERGED,True,1,1,1,https://github.com/baallan,fix missing ptr deref in string operation.,1,[],https://github.com/ovis-hpc/ovis/pull/140,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/140,fixes potential filesingle config parser array overrun.,fixes potential filesingle config parser array overrun.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,140,2020-02-06T19:21:51Z,2020-02-06T21:53:10Z,2020-02-06T21:53:11Z,MERGED,True,1,1,1,https://github.com/baallan,fix missing ptr deref in string operation.,1,[],https://github.com/ovis-hpc/ovis/pull/140,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/140#issuecomment-583083104,fixes potential filesingle config parser array overrun.,"I see someone already fixed this in ldmsd-samplers on master, but it didn't get mentioned.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,141,2020-02-06T20:24:48Z,2020-02-06T21:52:28Z,2020-02-06T21:52:28Z,MERGED,True,1,1,1,https://github.com/baallan,fix boolean invariant in test (always true),1,[],https://github.com/ovis-hpc/ovis/pull/141,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/141,the same bug is present in master at line 396 of ldms.i,the same bug is present in master at line 396 of ldms.i,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,142,2020-02-06T22:56:03Z,2020-02-16T23:46:07Z,2020-02-16T23:46:07Z,CLOSED,False,3,0,1,https://github.com/baallan,zap fabric post_wr rc v4,1,[],https://github.com/ovis-hpc/ovis/pull/142,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/142,"the case is not expected to occur ever, but returns random stack if not fixed.","the case is not expected to occur ever, but returns random stack if not fixed.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,142,2020-02-06T22:56:03Z,2020-02-16T23:46:07Z,2020-02-16T23:46:07Z,CLOSED,False,3,0,1,https://github.com/baallan,zap fabric post_wr rc v4,1,[],https://github.com/ovis-hpc/ovis/pull/142,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/142#issuecomment-583152161,"the case is not expected to occur ever, but returns random stack if not fixed.","@tom95858 @narategithub is there a better rc value or log message if the unexpected happens?
Or is this case expected but merely a no-op? A quick scan of zap_fabric.c made me think this is an unexpected case.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,142,2020-02-06T22:56:03Z,2020-02-16T23:46:07Z,2020-02-16T23:46:07Z,CLOSED,False,3,0,1,https://github.com/baallan,zap fabric post_wr rc v4,1,[],https://github.com/ovis-hpc/ovis/pull/142,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/142#issuecomment-586769655,"the case is not expected to occur ever, but returns random stack if not fixed.",This is fixed in commit f12867f,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,143,2020-02-06T23:14:47Z,2020-02-08T16:21:47Z,2020-02-08T16:21:47Z,CLOSED,False,1,1,1,https://github.com/baallan,Json util new uninit return in v4,1,[],https://github.com/ovis-hpc/ovis/pull/143,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/143,"This patch returns null instead of random stack, and handles the build with -DNDEBUG.
The same problems exist in master; this should be ported to master.","This patch returns null instead of random stack, and handles the build with -DNDEBUG.
The same problems exist in master; this should be ported to master.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,143,2020-02-06T23:14:47Z,2020-02-08T16:21:47Z,2020-02-08T16:21:47Z,CLOSED,False,1,1,1,https://github.com/baallan,Json util new uninit return in v4,1,[],https://github.com/ovis-hpc/ovis/pull/143,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/143#issuecomment-583546955,"This patch returns null instead of random stack, and handles the build with -DNDEBUG.
The same problems exist in master; this should be ported to master.",I've redone this to init e=null and leave the rest alone.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,143,2020-02-06T23:14:47Z,2020-02-08T16:21:47Z,2020-02-08T16:21:47Z,CLOSED,False,1,1,1,https://github.com/baallan,Json util new uninit return in v4,1,[],https://github.com/ovis-hpc/ovis/pull/143,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/143#issuecomment-583605818,"This patch returns null instead of random stack, and handles the build with -DNDEBUG.
The same problems exist in master; this should be ported to master.",I think the correct fix is to initialize like you've done and then in the JSON_NULL_VALUE case set e = new_null_value(),True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,143,2020-02-06T23:14:47Z,2020-02-08T16:21:47Z,2020-02-08T16:21:47Z,CLOSED,False,1,1,1,https://github.com/baallan,Json util new uninit return in v4,1,[],https://github.com/ovis-hpc/ovis/pull/143,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/143#issuecomment-583609674,"This patch returns null instead of random stack, and handles the build with -DNDEBUG.
The same problems exist in master; this should be ported to master.",I suggest we merge this patch and someone more familiar with testing json_util can make the suggested improvement in null_value handling.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,143,2020-02-06T23:14:47Z,2020-02-08T16:21:47Z,2020-02-08T16:21:47Z,CLOSED,False,1,1,1,https://github.com/baallan,Json util new uninit return in v4,1,[],https://github.com/ovis-hpc/ovis/pull/143,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/143#issuecomment-583630815,"This patch returns null instead of random stack, and handles the build with -DNDEBUG.
The same problems exist in master; this should be ported to master.",If you want to fix the code. Fix the code. I see no value in quieting a static analysis tool that introduces new bugs.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,143,2020-02-06T23:14:47Z,2020-02-08T16:21:47Z,2020-02-08T16:21:47Z,CLOSED,False,1,1,1,https://github.com/baallan,Json util new uninit return in v4,1,[],https://github.com/ovis-hpc/ovis/pull/143,https://github.com/tom95858,6,https://github.com/ovis-hpc/ovis/pull/143#issuecomment-583751715,"This patch returns null instead of random stack, and handles the build with -DNDEBUG.
The same problems exist in master; this should be ported to master.","OK, this has been refactored as follows and pushed to OVIS-4
Fixed the uninitialized return value, implemented the JSON_NULL_VALUE entity type,
and removed the unused 'err' label.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,144,2020-02-07T22:09:14Z,2020-02-19T21:22:19Z,2020-08-26T21:28:09Z,MERGED,True,2,3,1,https://github.com/nichamon,zap_rdma returns a wrong max_msg size.,1,[],https://github.com/ovis-hpc/ovis/pull/144,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/144,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,144,2020-02-07T22:09:14Z,2020-02-19T21:22:19Z,2020-08-26T21:28:09Z,MERGED,True,2,3,1,https://github.com/nichamon,zap_rdma returns a wrong max_msg size.,1,[],https://github.com/ovis-hpc/ovis/pull/144,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/144#issuecomment-583638114,,@tom95858 I have tested this on cygnus by sending application messages that used up the max message length.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,145,2020-02-07T22:11:13Z,2020-02-19T21:21:46Z,2020-02-19T21:21:46Z,MERGED,True,45,4,2,https://github.com/nichamon,zap_ugni returns a wrong max_msg size.,1,[],https://github.com/ovis-hpc/ovis/pull/145,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/145,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,145,2020-02-07T22:11:13Z,2020-02-19T21:21:46Z,2020-02-19T21:21:46Z,MERGED,True,45,4,2,https://github.com/nichamon,zap_ugni returns a wrong max_msg size.,1,[],https://github.com/ovis-hpc/ovis/pull/145,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/145#issuecomment-583638592,,@tom95858 I marked this as a draft because currently I have no way to compile and test the code.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,146,2020-02-07T22:12:25Z,2020-04-10T00:29:19Z,2020-08-26T21:28:07Z,MERGED,True,1,3,1,https://github.com/nichamon,zap_fabric returns a wrong max_msg size,1,[],https://github.com/ovis-hpc/ovis/pull/146,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/146,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,146,2020-02-07T22:12:25Z,2020-04-10T00:29:19Z,2020-08-26T21:28:07Z,MERGED,True,1,3,1,https://github.com/nichamon,zap_fabric returns a wrong max_msg size,1,[],https://github.com/ovis-hpc/ovis/pull/146,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/146#issuecomment-583639120,,@tom95858 I marked this as a draft because I believe I don't have an access to a machine with fabric to compile and test the code.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,146,2020-02-07T22:12:25Z,2020-04-10T00:29:19Z,2020-08-26T21:28:07Z,MERGED,True,1,3,1,https://github.com/nichamon,zap_fabric returns a wrong max_msg size,1,[],https://github.com/ovis-hpc/ovis/pull/146,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/146#issuecomment-585874867,,"@nichamon We have a transport test plan (sock, rdma, fabric) on omnipath hardware for v4.
Do patches 144-146 belong on OVIS-4 as well?
I so I can pick them into our testing source.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,146,2020-02-07T22:12:25Z,2020-04-10T00:29:19Z,2020-08-26T21:28:07Z,MERGED,True,1,3,1,https://github.com/nichamon,zap_fabric returns a wrong max_msg size,1,[],https://github.com/ovis-hpc/ovis/pull/146,https://github.com/nichamon,4,https://github.com/ovis-hpc/ovis/pull/146#issuecomment-586351686,,"@baallan I have created the pull requests for sock, rdma and fabric for OVIS-4, #152, #155 and #154, respectively. The zap_fabric patch has never been compiled so it would be best for someone who has access to a fabric library to try compiling it before merging it in.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,146,2020-02-07T22:12:25Z,2020-04-10T00:29:19Z,2020-08-26T21:28:07Z,MERGED,True,1,3,1,https://github.com/nichamon,zap_fabric returns a wrong max_msg size,1,[],https://github.com/ovis-hpc/ovis/pull/146,https://github.com/baallan,5,https://github.com/ovis-hpc/ovis/pull/146#issuecomment-586642516,,will test asap,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,146,2020-02-07T22:12:25Z,2020-04-10T00:29:19Z,2020-08-26T21:28:07Z,MERGED,True,1,3,1,https://github.com/nichamon,zap_fabric returns a wrong max_msg size,1,[],https://github.com/ovis-hpc/ovis/pull/146,https://github.com/baallan,6,https://github.com/ovis-hpc/ovis/pull/146#issuecomment-588526337,,This builds on our omnipath platforms in its OVIS-4 branch incarnation.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,146,2020-02-07T22:12:25Z,2020-04-10T00:29:19Z,2020-08-26T21:28:07Z,MERGED,True,1,3,1,https://github.com/nichamon,zap_fabric returns a wrong max_msg size,1,[],https://github.com/ovis-hpc/ovis/pull/146,https://github.com/tom95858,7,https://github.com/ovis-hpc/ovis/pull/146#issuecomment-590926422,,"@nichamon I think this has been confirmed to build correctly, please post the pull request.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,146,2020-02-07T22:12:25Z,2020-04-10T00:29:19Z,2020-08-26T21:28:07Z,MERGED,True,1,3,1,https://github.com/nichamon,zap_fabric returns a wrong max_msg size,1,[],https://github.com/ovis-hpc/ovis/pull/146,https://github.com/tom95858,8,https://github.com/ovis-hpc/ovis/pull/146#issuecomment-604608342,,@nichamon can you please mark this as done so I can merge it?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,146,2020-02-07T22:12:25Z,2020-04-10T00:29:19Z,2020-08-26T21:28:07Z,MERGED,True,1,3,1,https://github.com/nichamon,zap_fabric returns a wrong max_msg size,1,[],https://github.com/ovis-hpc/ovis/pull/146,https://github.com/nichamon,9,https://github.com/ovis-hpc/ovis/pull/146#issuecomment-604783283,,"@tom95858 I marked it as ready. However, it haven't been built or tested as I don't have any access to fabric.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,148,2020-02-10T15:26:34Z,2020-02-10T16:30:11Z,2020-08-26T21:28:05Z,MERGED,True,5,2,1,https://github.com/nichamon,json_util copies a va_list before it is reused in jbuf_append_va.,1,[],https://github.com/ovis-hpc/ovis/pull/148,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/148,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,148,2020-02-10T15:26:34Z,2020-02-10T16:30:11Z,2020-08-26T21:28:05Z,MERGED,True,5,2,1,https://github.com/nichamon,json_util copies a va_list before it is reused in jbuf_append_va.,1,[],https://github.com/ovis-hpc/ovis/pull/148,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/148#issuecomment-584177726,,@tom95858 This patch is a compliment to #137 but for OVIS-4.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,150,2020-02-13T20:43:48Z,2020-02-16T22:52:47Z,2020-09-11T03:23:18Z,MERGED,True,12,3,2,https://github.com/narategithub,Hush compilation warning on Ubuntu 18.04,1,[],https://github.com/ovis-hpc/ovis/pull/150,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/150,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,152,2020-02-14T15:24:48Z,2020-02-16T22:53:48Z,2020-08-26T21:28:03Z,MERGED,True,37,6,2,https://github.com/nichamon,Zap sock returns a wrong maximum message size,1,[],https://github.com/ovis-hpc/ovis/pull/152,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/152,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,152,2020-02-14T15:24:48Z,2020-02-16T22:53:48Z,2020-08-26T21:28:03Z,MERGED,True,37,6,2,https://github.com/nichamon,Zap sock returns a wrong maximum message size,1,[],https://github.com/ovis-hpc/ovis/pull/152,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/152#issuecomment-586335406,,This is a complement of #136 for OVIS-4.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,153,2020-02-14T15:27:46Z,2020-02-16T22:53:33Z,2020-02-16T22:53:34Z,MERGED,True,45,4,2,https://github.com/nichamon,Zap_ugni returns a wrong maximum message size,1,[],https://github.com/ovis-hpc/ovis/pull/153,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/153,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,153,2020-02-14T15:27:46Z,2020-02-16T22:53:33Z,2020-02-16T22:53:34Z,MERGED,True,45,4,2,https://github.com/nichamon,Zap_ugni returns a wrong maximum message size,1,[],https://github.com/ovis-hpc/ovis/pull/153,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/153#issuecomment-586336741,,The patch is the same as #145 but for OVIS-4.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,153,2020-02-14T15:27:46Z,2020-02-16T22:53:33Z,2020-02-16T22:53:34Z,MERGED,True,45,4,2,https://github.com/nichamon,Zap_ugni returns a wrong maximum message size,1,[],https://github.com/ovis-hpc/ovis/pull/153,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/153#issuecomment-586348978,,I haven't tested whether the code can be compiled or not.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,154,2020-02-14T15:29:38Z,2020-02-16T22:53:18Z,2020-08-26T21:28:02Z,MERGED,True,1,3,1,https://github.com/nichamon,Zap_fabric returns a wrong maximum message size,1,[],https://github.com/ovis-hpc/ovis/pull/154,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/154,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,154,2020-02-14T15:29:38Z,2020-02-16T22:53:18Z,2020-08-26T21:28:02Z,MERGED,True,1,3,1,https://github.com/nichamon,Zap_fabric returns a wrong maximum message size,1,[],https://github.com/ovis-hpc/ovis/pull/154,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/154#issuecomment-586337118,,The patch is the same as #146 but for OVIS-4.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,154,2020-02-14T15:29:38Z,2020-02-16T22:53:18Z,2020-08-26T21:28:02Z,MERGED,True,1,3,1,https://github.com/nichamon,Zap_fabric returns a wrong maximum message size,1,[],https://github.com/ovis-hpc/ovis/pull/154,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/154#issuecomment-586349174,,I haven't compiled the patch yet.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,155,2020-02-14T15:53:33Z,2020-02-16T22:53:02Z,2020-08-26T21:28:01Z,MERGED,True,2,3,1,https://github.com/nichamon,zap_rdma returns a wrong maximum message size.,1,[],https://github.com/ovis-hpc/ovis/pull/155,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/155,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,155,2020-02-14T15:53:33Z,2020-02-16T22:53:02Z,2020-08-26T21:28:01Z,MERGED,True,2,3,1,https://github.com/nichamon,zap_rdma returns a wrong maximum message size.,1,[],https://github.com/ovis-hpc/ovis/pull/155,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/155#issuecomment-586347292,,This is the same as #144 but for OVIS-4.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,156,2020-02-18T15:37:12Z,2020-02-19T20:28:56Z,2020-09-11T03:23:28Z,MERGED,True,1,1,1,https://github.com/narategithub,Fix wrong `ZAP_LIBPATH`,1,[],https://github.com/ovis-hpc/ovis/pull/156,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/156,"ZAP_LIBPATH now should point to <LIB>/ovis-ldms, not
<LIB>/ovis-lib.","ZAP_LIBPATH now should point to <LIB>/ovis-ldms, not
<LIB>/ovis-lib.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,157,2020-02-18T15:51:23Z,2020-02-19T21:22:49Z,2020-09-11T03:25:03Z,MERGED,True,946,68,15,https://github.com/narategithub,Multi-domain authentication from master branch,3,[],https://github.com/ovis-hpc/ovis/pull/157,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/157,This is the multi-domain authentication feature from the master branch. It brought in auth_add and listen configuration commands. auth_add allows users to define authentication domain that will later be used in prdcr_add or listen. listen command allows users to instruct ldmsd to listen to a port from a configuration file (instead of CLI).,This is the multi-domain authentication feature from the master branch. It brought in auth_add and listen configuration commands. auth_add allows users to define authentication domain that will later be used in prdcr_add or listen. listen command allows users to instruct ldmsd to listen to a port from a configuration file (instead of CLI).,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,158,2020-02-18T19:04:08Z,2020-02-19T21:23:14Z,2020-09-11T03:25:43Z,MERGED,True,687,11,7,https://github.com/narategithub,`store_app` storage plugin,3,[],https://github.com/ovis-hpc/ovis/pull/158,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/158,"store_app: a SOS-backed storage plugin for app_sampler data.
The pull request updated app_sampler to include task_rank metric which is needed for indexing in store_app.","store_app: a SOS-backed storage plugin for app_sampler data.
The pull request updated app_sampler to include task_rank metric which is needed for indexing in store_app.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,159,2020-02-18T19:15:48Z,2020-02-19T21:24:59Z,2020-09-11T03:23:45Z,MERGED,True,1,1,1,https://github.com/narategithub,Fix `=` comparison typo in test_sampler,1,[],https://github.com/ovis-hpc/ovis/pull/159,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/159,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,160,2020-02-18T19:16:49Z,2020-02-19T21:21:09Z,2020-09-11T03:23:59Z,MERGED,True,8,8,3,https://github.com/narategithub,Fix `json_attr_find()` misused in LDMSD samplers and stores,1,[],https://github.com/ovis-hpc/ovis/pull/160,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/160,"Fix wrong json_attr_find() usage that should be json_value_find()
instead.","Fix wrong json_attr_find() usage that should be json_value_find()
instead.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,161,2020-02-18T19:18:18Z,2020-02-19T21:21:26Z,2020-09-11T03:25:26Z,MERGED,True,4,1,1,https://github.com/narategithub,Set errno in req_attr_get functions,1,[],https://github.com/ovis-hpc/ovis/pull/161,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/161,"Set appropriate errno in req_attr_get_by_id() and
req_attr_get_by_name().","Set appropriate errno in req_attr_get_by_id() and
req_attr_get_by_name().",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,162,2020-02-18T20:44:14Z,2020-02-19T21:25:15Z,2020-09-11T03:25:06Z,MERGED,True,609,114,14,https://github.com/narategithub,multi-domain authentication,2,[],https://github.com/ovis-hpc/ovis/pull/162,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/162,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,164,2020-02-19T22:55:23Z,2020-02-24T16:39:42Z,2020-09-11T03:24:49Z,MERGED,True,0,2,1,https://github.com/narategithub,Remove unused variables in zap_rdma,1,[],https://github.com/ovis-hpc/ovis/pull/164,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/164,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,165,2020-02-19T22:55:33Z,2020-02-24T16:41:40Z,2020-09-11T03:24:43Z,MERGED,True,4,4,1,https://github.com/narategithub,Fix compilation warnings in store_amqp,1,[],https://github.com/ovis-hpc/ovis/pull/165,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/165,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,166,2020-02-19T22:55:42Z,2020-02-24T16:42:16Z,2020-09-11T03:24:46Z,MERGED,True,9,0,1,https://github.com/narategithub,Fix store_influx calling removed json API,1,[],https://github.com/ovis-hpc/ovis/pull/166,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/166,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,167,2020-02-20T19:58:18Z,2020-02-24T16:42:30Z,2020-09-11T03:24:36Z,MERGED,True,26,17,12,https://github.com/narategithub,Fix gcc use-before-init warnings,1,[],https://github.com/ovis-hpc/ovis/pull/167,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/167,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,168,2020-02-20T19:58:30Z,2020-02-24T16:42:43Z,2020-09-11T03:24:32Z,MERGED,True,13,9,2,https://github.com/narategithub,Fix type-punning/strict-aliasing gcc warning,1,[],https://github.com/ovis-hpc/ovis/pull/168,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/168,"When -O3 is given, -fstrict-aliasing is assumed.","When -O3 is given, -fstrict-aliasing is assumed.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,169,2020-02-24T12:17:04Z,2020-02-24T16:42:55Z,2020-09-11T03:24:39Z,MERGED,True,1,0,1,https://github.com/narategithub,Fix RDMA Zap Share message initialization,1,[],https://github.com/ovis-hpc/ovis/pull/169,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/169,"The share field was forgotten to set as 1 in the rendezvous
message -- making it looks like unshare rendezvous message.","The share field was forgotten to set as 1 in the rendezvous
message -- making it looks like unshare rendezvous message.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,170,2020-02-25T09:49:25Z,2020-02-25T15:31:59Z,2020-09-11T03:23:38Z,MERGED,True,13,11,1,https://github.com/narategithub,Fix app_sampler cfg file handling,1,[],https://github.com/ovis-hpc/ovis/pull/170,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/170,"The stream attribute was incorrectly assumed to be given in the
configuration file (JSON).","The stream attribute was incorrectly assumed to be given in the
configuration file (JSON).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,171,2020-02-25T10:47:08Z,2020-02-25T15:31:20Z,2020-09-11T03:24:26Z,MERGED,True,0,2,1,https://github.com/narategithub,Fix component_id bug in slurm_sampler,1,[],https://github.com/ovis-hpc/ovis/pull/171,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/171,Remove the copy-paste residue that causes incorrect component_id's.,Remove the copy-paste residue that causes incorrect component_id's.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,174,2020-02-27T16:29:09Z,2020-03-26T18:25:31Z,2020-03-26T18:25:32Z,MERGED,True,20,11,1,https://github.com/baallan,add missing error message when edac sampler disables itself,1,['V4'],https://github.com/ovis-hpc/ovis/pull/174,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/174,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,174,2020-02-27T16:29:09Z,2020-03-26T18:25:31Z,2020-03-26T18:25:32Z,MERGED,True,20,11,1,https://github.com/baallan,add missing error message when edac sampler disables itself,1,['V4'],https://github.com/ovis-hpc/ovis/pull/174,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/174#issuecomment-594201862,,@tom95858 this has been revised after carefully perusing the man pages.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,175,2020-02-27T16:42:32Z,2020-02-28T02:58:29Z,2020-02-28T02:58:29Z,MERGED,True,1,1,1,https://github.com/baallan,fix missing dependency in store makefile.am,1,[],https://github.com/ovis-hpc/ovis/pull/175,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/175,the -l form of lib flag on a directory local peer library breaks the dependency calculations of automake required for parallel build. Using the .la form works.,the -l form of lib flag on a directory local peer library breaks the dependency calculations of automake required for parallel build. Using the .la form works.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,176,2020-02-27T16:57:26Z,2020-04-23T15:55:38Z,2020-04-23T15:55:38Z,MERGED,True,54,14,4,https://github.com/baallan,adding munge to genders init scripts,1,['V4'],https://github.com/ovis-hpc/ovis/pull/176,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/176,also fixing lack of env expansion in log gender value for better debugging control.,also fixing lack of env expansion in log gender value for better debugging control.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,176,2020-02-27T16:57:26Z,2020-04-23T15:55:38Z,2020-04-23T15:55:38Z,MERGED,True,54,14,4,https://github.com/baallan,adding munge to genders init scripts,1,['V4'],https://github.com/ovis-hpc/ovis/pull/176,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/176#issuecomment-592066825,also fixing lack of env expansion in log gender value for better debugging control.,This is in testing at SNL.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,176,2020-02-27T16:57:26Z,2020-04-23T15:55:38Z,2020-04-23T15:55:38Z,MERGED,True,54,14,4,https://github.com/baallan,adding munge to genders init scripts,1,['V4'],https://github.com/ovis-hpc/ovis/pull/176,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/176#issuecomment-592288090,also fixing lack of env expansion in log gender value for better debugging control.,Hi @baallan do you want this merged or is this a work in progress?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,176,2020-02-27T16:57:26Z,2020-04-23T15:55:38Z,2020-04-23T15:55:38Z,MERGED,True,54,14,4,https://github.com/baallan,adding munge to genders init scripts,1,['V4'],https://github.com/ovis-hpc/ovis/pull/176,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/176#issuecomment-592559136,also fixing lack of env expansion in log gender value for better debugging control.,"still in testing. we've proven locally the added code didn't break the non-munge auth, but we haven't yet proved the munge paths to all work correctly. lots of other things being tested before.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,176,2020-02-27T16:57:26Z,2020-04-23T15:55:38Z,2020-04-23T15:55:38Z,MERGED,True,54,14,4,https://github.com/baallan,adding munge to genders init scripts,1,['V4'],https://github.com/ovis-hpc/ovis/pull/176,https://github.com/baallan,5,https://github.com/ovis-hpc/ovis/pull/176#issuecomment-618470921,also fixing lack of env expansion in log gender value for better debugging control.,@tom95858 please merge this at last.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,177,2020-02-27T17:53:43Z,2020-03-02T17:07:04Z,2020-08-26T21:27:56Z,MERGED,True,20,33,2,https://github.com/nichamon,The -a option at command-line doesn't work.,1,[],https://github.com/ovis-hpc/ovis/pull/177,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/177,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,177,2020-02-27T17:53:43Z,2020-03-02T17:07:04Z,2020-08-26T21:27:56Z,MERGED,True,20,33,2,https://github.com/nichamon,The -a option at command-line doesn't work.,1,[],https://github.com/ovis-hpc/ovis/pull/177,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/177#issuecomment-593507276,,"@tom95858 I made some minor changes to the patch for ease of read.

Rename __set_default_auth to __create_default_auth.
Pass DEFAULT_AUTH to ldmsd_listen_new() when LDMSD processes -x.
Remove the unused code in listen_handler().",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,178,2020-02-27T17:54:03Z,2020-02-27T20:14:59Z,2020-08-26T21:28:00Z,MERGED,True,33,21,1,https://github.com/nichamon,LDMSD may not start if no default authentication is given.,1,[],https://github.com/ovis-hpc/ovis/pull/178,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/178,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,179,2020-03-02T15:11:58Z,2020-03-02T16:57:37Z,2020-08-26T21:27:58Z,MERGED,True,1,1,1,https://github.com/nichamon,zap_ugni: two arguments instead of one given to a _set_sockbuf_sz call,1,[],https://github.com/ovis-hpc/ovis/pull/179,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/179,…f_sz,…f_sz,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,180,2020-03-02T15:12:56Z,2020-03-02T16:58:20Z,2020-08-26T21:27:56Z,MERGED,True,1,1,1,https://github.com/nichamon,zap_ugni: two arguments instead of one given to a __set_sockbuf_sz call,1,[],https://github.com/ovis-hpc/ovis/pull/180,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/180,…ockbuf_sz,…ockbuf_sz,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,181,2020-03-03T22:18:24Z,2020-03-04T21:14:43Z,2020-09-11T03:23:55Z,MERGED,True,3,0,1,https://github.com/narategithub,Put `job_set` reference when deleting the sampler,1,[],https://github.com/ovis-hpc/ovis/pull/181,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/181,"The job_set handle was not properly put down when the sampler instance
is deleted.","The job_set handle was not properly put down when the sampler instance
is deleted.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,181,2020-03-03T22:18:24Z,2020-03-04T21:14:43Z,2020-09-11T03:23:55Z,MERGED,True,3,0,1,https://github.com/narategithub,Put `job_set` reference when deleting the sampler,1,[],https://github.com/ovis-hpc/ovis/pull/181,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/181#issuecomment-594203652,"The job_set handle was not properly put down when the sampler instance
is deleted.",please cherry pick/backport to OVIS-4 if the same bug exists there.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,181,2020-03-03T22:18:24Z,2020-03-04T21:14:43Z,2020-09-11T03:23:55Z,MERGED,True,3,0,1,https://github.com/narategithub,Put `job_set` reference when deleting the sampler,1,[],https://github.com/ovis-hpc/ovis/pull/181,https://github.com/narategithub,3,https://github.com/ovis-hpc/ovis/pull/181#issuecomment-594467739,"The job_set handle was not properly put down when the sampler instance
is deleted.",This is only in v5.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,182,2020-03-03T22:18:39Z,2020-03-26T18:27:48Z,2020-09-11T03:24:22Z,MERGED,True,5,11,4,https://github.com/narategithub,Change the `samp->delete_set()` interface to use set name.,1,[],https://github.com/ovis-hpc/ovis/pull/182,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/182,"The sole real use case of samp->delete_set() is in app_sampler.
The way it did before the patch was that when it received a task exit
event, it constructed a set name associated with the task and obtained
the ldms_set_t handle by ldms_set_by_name() (as samp->delete_set()
requires a handle to delete). Since this handle is different than the
one in the samp->set_list (created by samp->create_set()),
samp->delete_set() already has to iteratively compare the name of the
given ldms_set_t against those in the samp->set_list (please see
commit-id: 0f9f9dc). So, samp->delete_set() with set name makes more
sense from this use case.
Also, with -D_REF_TRACK_ compilation flag to track the correct reference
usage, we found out that all ldms_set_t were automatically removed
from the set->local_rbd_list in ldms_set_delete(). Hence, the use
case of
s = ldms_set_by_name(name);
ldms_set_delete(s);
ldms_set_put(s);
in app_sampler will remove s twice from the list (in ldms_set_delete()
and in ldmse_set_put()), leading to memory corruption.
This patch is a work around to the above mentioned problem and is a
short-term solution. A real solution regarding LDMS set reference will
be handled separately.","The sole real use case of samp->delete_set() is in app_sampler.
The way it did before the patch was that when it received a task exit
event, it constructed a set name associated with the task and obtained
the ldms_set_t handle by ldms_set_by_name() (as samp->delete_set()
requires a handle to delete). Since this handle is different than the
one in the samp->set_list (created by samp->create_set()),
samp->delete_set() already has to iteratively compare the name of the
given ldms_set_t against those in the samp->set_list (please see
commit-id: 0f9f9dc). So, samp->delete_set() with set name makes more
sense from this use case.
Also, with -D_REF_TRACK_ compilation flag to track the correct reference
usage, we found out that all ldms_set_t were automatically removed
from the set->local_rbd_list in ldms_set_delete(). Hence, the use
case of
s = ldms_set_by_name(name);
ldms_set_delete(s);
ldms_set_put(s);
in app_sampler will remove s twice from the list (in ldms_set_delete()
and in ldmse_set_put()), leading to memory corruption.
This patch is a work around to the above mentioned problem and is a
short-term solution. A real solution regarding LDMS set reference will
be handled separately.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,182,2020-03-03T22:18:39Z,2020-03-26T18:27:48Z,2020-09-11T03:24:22Z,MERGED,True,5,11,4,https://github.com/narategithub,Change the `samp->delete_set()` interface to use set name.,1,[],https://github.com/ovis-hpc/ovis/pull/182,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/182#issuecomment-594204953,"The sole real use case of samp->delete_set() is in app_sampler.
The way it did before the patch was that when it received a task exit
event, it constructed a set name associated with the task and obtained
the ldms_set_t handle by ldms_set_by_name() (as samp->delete_set()
requires a handle to delete). Since this handle is different than the
one in the samp->set_list (created by samp->create_set()),
samp->delete_set() already has to iteratively compare the name of the
given ldms_set_t against those in the samp->set_list (please see
commit-id: 0f9f9dc). So, samp->delete_set() with set name makes more
sense from this use case.
Also, with -D_REF_TRACK_ compilation flag to track the correct reference
usage, we found out that all ldms_set_t were automatically removed
from the set->local_rbd_list in ldms_set_delete(). Hence, the use
case of
s = ldms_set_by_name(name);
ldms_set_delete(s);
ldms_set_put(s);
in app_sampler will remove s twice from the list (in ldms_set_delete()
and in ldmse_set_put()), leading to memory corruption.
This patch is a work around to the above mentioned problem and is a
short-term solution. A real solution regarding LDMS set reference will
be handled separately.","Will the anticipated 'real solution' be applicable to v4, or an incompatible change? And same question for this patch.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,182,2020-03-03T22:18:39Z,2020-03-26T18:27:48Z,2020-09-11T03:24:22Z,MERGED,True,5,11,4,https://github.com/narategithub,Change the `samp->delete_set()` interface to use set name.,1,[],https://github.com/ovis-hpc/ovis/pull/182,https://github.com/narategithub,3,https://github.com/ovis-hpc/ovis/pull/182#issuecomment-594468191,"The sole real use case of samp->delete_set() is in app_sampler.
The way it did before the patch was that when it received a task exit
event, it constructed a set name associated with the task and obtained
the ldms_set_t handle by ldms_set_by_name() (as samp->delete_set()
requires a handle to delete). Since this handle is different than the
one in the samp->set_list (created by samp->create_set()),
samp->delete_set() already has to iteratively compare the name of the
given ldms_set_t against those in the samp->set_list (please see
commit-id: 0f9f9dc). So, samp->delete_set() with set name makes more
sense from this use case.
Also, with -D_REF_TRACK_ compilation flag to track the correct reference
usage, we found out that all ldms_set_t were automatically removed
from the set->local_rbd_list in ldms_set_delete(). Hence, the use
case of
s = ldms_set_by_name(name);
ldms_set_delete(s);
ldms_set_put(s);
in app_sampler will remove s twice from the list (in ldms_set_delete()
and in ldmse_set_put()), leading to memory corruption.
This patch is a work around to the above mentioned problem and is a
short-term solution. A real solution regarding LDMS set reference will
be handled separately.",The samp->delete_set() only existed in v5.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,182,2020-03-03T22:18:39Z,2020-03-26T18:27:48Z,2020-09-11T03:24:22Z,MERGED,True,5,11,4,https://github.com/narategithub,Change the `samp->delete_set()` interface to use set name.,1,[],https://github.com/ovis-hpc/ovis/pull/182,https://github.com/narategithub,4,https://github.com/ovis-hpc/ovis/pull/182#issuecomment-594470972,"The sole real use case of samp->delete_set() is in app_sampler.
The way it did before the patch was that when it received a task exit
event, it constructed a set name associated with the task and obtained
the ldms_set_t handle by ldms_set_by_name() (as samp->delete_set()
requires a handle to delete). Since this handle is different than the
one in the samp->set_list (created by samp->create_set()),
samp->delete_set() already has to iteratively compare the name of the
given ldms_set_t against those in the samp->set_list (please see
commit-id: 0f9f9dc). So, samp->delete_set() with set name makes more
sense from this use case.
Also, with -D_REF_TRACK_ compilation flag to track the correct reference
usage, we found out that all ldms_set_t were automatically removed
from the set->local_rbd_list in ldms_set_delete(). Hence, the use
case of
s = ldms_set_by_name(name);
ldms_set_delete(s);
ldms_set_put(s);
in app_sampler will remove s twice from the list (in ldms_set_delete()
and in ldmse_set_put()), leading to memory corruption.
This patch is a work around to the above mentioned problem and is a
short-term solution. A real solution regarding LDMS set reference will
be handled separately.","Also, we don't do ldms_set_put() after ldms_set_delete() in v4. However, after ldms_set_delete() all set handles became invalid in all threads. I believe codes in v4 is aware of this.
I think in v5, the way it should be is that the reference should not be invalidate by others, and should be properly put down by the owner (the one that asked for the reference).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,183,2020-03-03T22:18:48Z,2020-03-26T18:28:53Z,2020-09-11T03:24:12Z,MERGED,True,3,0,1,https://github.com/narategithub,Fix aggregator crash due to null `prdcr->xprt`,1,[],https://github.com/ovis-hpc/ovis/pull/183,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/183,"On the delivery of LDMS_XPRT_EVENT_DISCONNECTED event,
prdcr_connect_cb() resets prdcr->prd_sets. The prd_set resetting
procedure only set start_n_stop flag to 0 to notify the updtr worker
to not further schedule future updates. After resetting all prd_sets,
prdcr_connect_cb() set prdcr->xprt to NULL. Because the state of the
prd_set has not changed, the update events that were scheduled before
the disconnected then tried to update (or lookup) on the prd_set which
direcly uses prdcr->xprt (NULL), leading to SIGSEGV. By changing the
state of the prd_set to ERROR before setting prdcr->xprt to NULL, the
update events will just wakes up, do nothing, and put the prd_set
reference back. Note that the update event will just get a synchronous
error when it tries to issue update/lookup on the disconnected
transport.","On the delivery of LDMS_XPRT_EVENT_DISCONNECTED event,
prdcr_connect_cb() resets prdcr->prd_sets. The prd_set resetting
procedure only set start_n_stop flag to 0 to notify the updtr worker
to not further schedule future updates. After resetting all prd_sets,
prdcr_connect_cb() set prdcr->xprt to NULL. Because the state of the
prd_set has not changed, the update events that were scheduled before
the disconnected then tried to update (or lookup) on the prd_set which
direcly uses prdcr->xprt (NULL), leading to SIGSEGV. By changing the
state of the prd_set to ERROR before setting prdcr->xprt to NULL, the
update events will just wakes up, do nothing, and put the prd_set
reference back. Note that the update event will just get a synchronous
error when it tries to issue update/lookup on the disconnected
transport.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,183,2020-03-03T22:18:48Z,2020-03-26T18:28:53Z,2020-09-11T03:24:12Z,MERGED,True,3,0,1,https://github.com/narategithub,Fix aggregator crash due to null `prdcr->xprt`,1,[],https://github.com/ovis-hpc/ovis/pull/183,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/183#issuecomment-594203756,"On the delivery of LDMS_XPRT_EVENT_DISCONNECTED event,
prdcr_connect_cb() resets prdcr->prd_sets. The prd_set resetting
procedure only set start_n_stop flag to 0 to notify the updtr worker
to not further schedule future updates. After resetting all prd_sets,
prdcr_connect_cb() set prdcr->xprt to NULL. Because the state of the
prd_set has not changed, the update events that were scheduled before
the disconnected then tried to update (or lookup) on the prd_set which
direcly uses prdcr->xprt (NULL), leading to SIGSEGV. By changing the
state of the prd_set to ERROR before setting prdcr->xprt to NULL, the
update events will just wakes up, do nothing, and put the prd_set
reference back. Note that the update event will just get a synchronous
error when it tries to issue update/lookup on the disconnected
transport.",please cherry pick/backport to OVIS-4 if the same bug exists there.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,183,2020-03-03T22:18:48Z,2020-03-26T18:28:53Z,2020-09-11T03:24:12Z,MERGED,True,3,0,1,https://github.com/narategithub,Fix aggregator crash due to null `prdcr->xprt`,1,[],https://github.com/ovis-hpc/ovis/pull/183,https://github.com/narategithub,3,https://github.com/ovis-hpc/ovis/pull/183#issuecomment-594471497,"On the delivery of LDMS_XPRT_EVENT_DISCONNECTED event,
prdcr_connect_cb() resets prdcr->prd_sets. The prd_set resetting
procedure only set start_n_stop flag to 0 to notify the updtr worker
to not further schedule future updates. After resetting all prd_sets,
prdcr_connect_cb() set prdcr->xprt to NULL. Because the state of the
prd_set has not changed, the update events that were scheduled before
the disconnected then tried to update (or lookup) on the prd_set which
direcly uses prdcr->xprt (NULL), leading to SIGSEGV. By changing the
state of the prd_set to ERROR before setting prdcr->xprt to NULL, the
update events will just wakes up, do nothing, and put the prd_set
reference back. Note that the update event will just get a synchronous
error when it tries to issue update/lookup on the disconnected
transport.",This is a new event-based model implementation which exists only in v5.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,184,2020-03-04T19:19:35Z,2020-03-26T18:29:12Z,2020-09-11T03:23:35Z,MERGED,True,1,0,1,https://github.com/narategithub,Fix set-not-removed issue on aggregator with store,1,[],https://github.com/ovis-hpc/ovis/pull/184,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/184,"A reference has taken on prd_set before notifying stores that the set
is ready for storage. The store actor however forgot to put down the
reference, making the set persistent in the aggregator with storage.","A reference has taken on prd_set before notifying stores that the set
is ready for storage. The store actor however forgot to put down the
reference, making the set persistent in the aggregator with storage.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,185,2020-03-04T19:19:44Z,2020-03-26T18:29:34Z,2020-09-11T03:23:49Z,MERGED,True,22,8,2,https://github.com/narategithub,Fix ldmsd default auth processing,1,[],https://github.com/ovis-hpc/ovis/pull/185,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/185,"The default authentication object was set up after the configuration
file has done processing, but prdcr_add in the config file that did
not specify auth needed the default auth object to create the prdcr.
Hence, the default auth object (and its attributes) should be set up
during config file processing, when we knew that set CLI options are
done. If no config file is given, the default auth is set up in the
ldmsd_init() as usual.","The default authentication object was set up after the configuration
file has done processing, but prdcr_add in the config file that did
not specify auth needed the default auth object to create the prdcr.
Hence, the default auth object (and its attributes) should be set up
during config file processing, when we knew that set CLI options are
done. If no config file is given, the default auth is set up in the
ldmsd_init() as usual.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,185,2020-03-04T19:19:44Z,2020-03-26T18:29:34Z,2020-09-11T03:23:49Z,MERGED,True,22,8,2,https://github.com/narategithub,Fix ldmsd default auth processing,1,[],https://github.com/ovis-hpc/ovis/pull/185,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/185#issuecomment-604580776,"The default authentication object was set up after the configuration
file has done processing, but prdcr_add in the config file that did
not specify auth needed the default auth object to create the prdcr.
Hence, the default auth object (and its attributes) should be set up
during config file processing, when we knew that set CLI options are
done. If no config file is given, the default auth is set up in the
ldmsd_init() as usual.","is this new to v5, or something that applies in some form to v4 also?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,185,2020-03-04T19:19:44Z,2020-03-26T18:29:34Z,2020-09-11T03:23:49Z,MERGED,True,22,8,2,https://github.com/narategithub,Fix ldmsd default auth processing,1,[],https://github.com/ovis-hpc/ovis/pull/185,https://github.com/narategithub,3,https://github.com/ovis-hpc/ovis/pull/185#issuecomment-604593885,"The default authentication object was set up after the configuration
file has done processing, but prdcr_add in the config file that did
not specify auth needed the default auth object to create the prdcr.
Hence, the default auth object (and its attributes) should be set up
during config file processing, when we knew that set CLI options are
done. If no config file is given, the default auth is set up in the
ldmsd_init() as usual.",This is new in v5,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,187,2020-03-09T22:12:44Z,2020-04-23T15:34:14Z,2020-04-23T15:34:14Z,CLOSED,False,12,50,4,https://github.com/baallan,V4 build update,2,['V4'],https://github.com/ovis-hpc/ovis/pull/187,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/187,This fixes missing dependencies that break the build on ubuntu 18.,This fixes missing dependencies that break the build on ubuntu 18.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,187,2020-03-09T22:12:44Z,2020-04-23T15:34:14Z,2020-04-23T15:34:14Z,CLOSED,False,12,50,4,https://github.com/baallan,V4 build update,2,['V4'],https://github.com/ovis-hpc/ovis/pull/187,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/187#issuecomment-603276554,This fixes missing dependencies that break the build on ubuntu 18.,"Ubuntu 18.04 build fails without the additions (tool versions below).
coll depends on third.
gcc --version 
gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0

automake --version
automake (GNU automake) 1.15.1

libtool --version
libtool (GNU libtool) 2.4.6",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,187,2020-03-09T22:12:44Z,2020-04-23T15:34:14Z,2020-04-23T15:34:14Z,CLOSED,False,12,50,4,https://github.com/baallan,V4 build update,2,['V4'],https://github.com/ovis-hpc/ovis/pull/187,https://github.com/narategithub,3,https://github.com/ovis-hpc/ovis/pull/187#issuecomment-603410538,This fixes missing dependencies that break the build on ubuntu 18.,"Hmm... I don't get any error when building OVIS-4 with the following configure flags:
./configure --prefix=/opt/ovis --enable-etc

Some info on my build:
root@ubuntu-1804:~/ovis/build# git show --stat                                 
commit feb00cca95fde89ac36b8890f825a097a99787ce (HEAD -> OVIS-4, origin/OVIS-4)

root@ubuntu-1804:~/ovis/build# gcc --version
gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0

root@ubuntu-1804:~/ovis/build# automake --version
automake (GNU automake) 1.15.1

root@ubuntu-1804:~/ovis/build# libtoolize --version
libtoolize (GNU libtool) 2.4.6",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,187,2020-03-09T22:12:44Z,2020-04-23T15:34:14Z,2020-04-23T15:34:14Z,CLOSED,False,12,50,4,https://github.com/baallan,V4 build update,2,['V4'],https://github.com/ovis-hpc/ovis/pull/187,https://github.com/narategithub,4,https://github.com/ovis-hpc/ovis/pull/187#issuecomment-603430998,This fixes missing dependencies that break the build on ubuntu 18.,Adding CFLAGS='-Wall -Werror' also works.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,187,2020-03-09T22:12:44Z,2020-04-23T15:34:14Z,2020-04-23T15:34:14Z,CLOSED,False,12,50,4,https://github.com/baallan,V4 build update,2,['V4'],https://github.com/ovis-hpc/ovis/pull/187,https://github.com/baallan,5,https://github.com/ovis-hpc/ovis/pull/187#issuecomment-603433748,This fixes missing dependencies that break the build on ubuntu 18.,"../configure --prefix=/home/baallan/ovis/repos/ovis-papi/LDMS_install --disable-rdma --enable-ssl --disable-sos --disable-perfevent --disable-rpath --enable-zap --enable-zaptest --disable-swig --enabl
e-ovis_auth --enable-sysclassib --enable-syspapi-sampler

gets
make[6]: Entering directory '/home/baallan/ovis/repos/ovis-papi/LDMS_objdir/lib/src/json'
  CC       json_util.lo
flex -o json_lexer.c ../../../../lib/src/json/json_lexer.l
  CC       json_lexer.lo
  CC       json_parser.lo
../../../../lib/src/json/json_parser.y: In function ‘json_parser_new’:
../../../../lib/src/json/json_parser.y:133:3: warning: implicit declaration of function ‘yylex_init’; did you mean ‘yylex’? [-Wimplicit-function-declaration]
   yylex_init(&p->scanner);
   ^~~~~~~~~~
   yylex
../../../../lib/src/json/json_parser.y: In function ‘json_parser_free’:
../../../../lib/src/json/json_parser.y:139:2: warning: implicit declaration of function ‘yylex_destroy’ [-Wimplicit-function-declaration]
  yylex_destroy(parser->scanner);
  ^~~~~~~~~~~~~
  CCLD     libjson_util.la
ar: `u' modifier ignored since `D' is the default (see `U')
  CC       json_test-json_test.o
  CCLD     json_test
/usr/bin/ld: warning: libcoll.so.0, needed by ./.libs/libjson_util.so, not found (try using -rpath or -rpath-link)
./.libs/libjson_util.so: undefined reference to `htbl_next'
./.libs/libjson_util.so: undefined reference to `htbl_alloc'
./.libs/libjson_util.so: undefined reference to `htbl_free'
./.libs/libjson_util.so: undefined reference to `htbl_first'
./.libs/libjson_util.so: undefined reference to `htbl_find'
./.libs/libjson_util.so: undefined reference to `hent_init'
./.libs/libjson_util.so: undefined reference to `htbl_empty'
./.libs/libjson_util.so: undefined reference to `htbl_ins'
./.libs/libjson_util.so: undefined reference to `htbl_del'
collect2: error: ld returned 1 exit status",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,187,2020-03-09T22:12:44Z,2020-04-23T15:34:14Z,2020-04-23T15:34:14Z,CLOSED,False,12,50,4,https://github.com/baallan,V4 build update,2,['V4'],https://github.com/ovis-hpc/ovis/pull/187,https://github.com/baallan,6,https://github.com/ovis-hpc/ovis/pull/187#issuecomment-603434252,This fixes missing dependencies that break the build on ubuntu 18.,most likely the relevant config flag to test with is --disable-rpath,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,187,2020-03-09T22:12:44Z,2020-04-23T15:34:14Z,2020-04-23T15:34:14Z,CLOSED,False,12,50,4,https://github.com/baallan,V4 build update,2,['V4'],https://github.com/ovis-hpc/ovis/pull/187,https://github.com/tom95858,7,https://github.com/ovis-hpc/ovis/pull/187#issuecomment-603480658,This fixes missing dependencies that break the build on ubuntu 18.,"libcoll should not depend on libthird. This kind of thing requires every user of a given library to know every dependency of all of the libraries that it uses. This is impossible to maintain.
Please be specific about what in libcoll requires libthird. It should be nothing.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,187,2020-03-09T22:12:44Z,2020-04-23T15:34:14Z,2020-04-23T15:34:14Z,CLOSED,False,12,50,4,https://github.com/baallan,V4 build update,2,['V4'],https://github.com/ovis-hpc/ovis/pull/187,https://github.com/baallan,8,https://github.com/ovis-hpc/ovis/pull/187#issuecomment-603504426,This fixes missing dependencies that break the build on ubuntu 18.,"libcoll uses libthird for third party string hashing functions in label-set.c (and has since v2).
Except for license documentation reasons (which is a bit of a flimsy reason), libthird could be folded into libcoll.
There's nothing 'impossible to maintain' about the current layout, since the proposed patch maintains it.
A much better resolution to the issue (as @morrone proposed at some point, I believe) is that we merge together most of the base libraries of ldmsd into one, instead of maintaining this micro-fragmented lib/ project which is only used by ldms. (e.g. sos maintains its own data structure libraries).
I'd be happy to put the defragmentation project on my todo list.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,187,2020-03-09T22:12:44Z,2020-04-23T15:34:14Z,2020-04-23T15:34:14Z,CLOSED,False,12,50,4,https://github.com/baallan,V4 build update,2,['V4'],https://github.com/ovis-hpc/ovis/pull/187,https://github.com/narategithub,9,https://github.com/ovis-hpc/ovis/pull/187#issuecomment-603536334,This fixes missing dependencies that break the build on ubuntu 18.,I think you did not address the root cause in this patch. Please see if #205 fix the problem.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,187,2020-03-09T22:12:44Z,2020-04-23T15:34:14Z,2020-04-23T15:34:14Z,CLOSED,False,12,50,4,https://github.com/baallan,V4 build update,2,['V4'],https://github.com/ovis-hpc/ovis/pull/187,https://github.com/tom95858,10,https://github.com/ovis-hpc/ovis/pull/187#issuecomment-604615957,This fixes missing dependencies that break the build on ubuntu 18.,"I would much prefer if we either bound libcoll with libthird non-shared, or as @baallan suggests implement the one function (b62_encode afaict) that it uses  in the label-set.c file and blow away libthird altogether.
That said, as I mentioned, in general, it is bad form for a user of libcoll, e.g. libjson_util to have to know what libcoll depends on and add it to it's makefile.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,187,2020-03-09T22:12:44Z,2020-04-23T15:34:14Z,2020-04-23T15:34:14Z,CLOSED,False,12,50,4,https://github.com/baallan,V4 build update,2,['V4'],https://github.com/ovis-hpc/ovis/pull/187,https://github.com/baallan,11,https://github.com/ovis-hpc/ovis/pull/187#issuecomment-618468439,This fixes missing dependencies that break the build on ubuntu 18.,"The bigger wl,rpath change by Narate has solved the same problem a better way.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,188,2020-03-11T17:03:38Z,2020-03-13T16:10:41Z,2020-08-26T21:27:53Z,MERGED,True,1,1,1,https://github.com/nichamon,ldms_ls: a typo when allocating memory & cause string overflow at print,1,[],https://github.com/ovis-hpc/ovis/pull/188,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/188,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,188,2020-03-11T17:03:38Z,2020-03-13T16:10:41Z,2020-08-26T21:27:53Z,MERGED,True,1,1,1,https://github.com/nichamon,ldms_ls: a typo when allocating memory & cause string overflow at print,1,[],https://github.com/ovis-hpc/ovis/pull/188,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/188#issuecomment-597754371,,"I think this is the cause of the bizarre ldms_ls behavior that sometimes it returns 'the set doesn't exist' or 'segfault' when a set instance name is given.
@valleydlr has locally applied the fix on Voltrino and the symptom went away.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,189,2020-03-11T18:45:47Z,2020-03-13T16:11:04Z,2020-08-26T21:27:52Z,MERGED,True,1,1,1,https://github.com/nichamon,ldms_ls: a typo when allocating memory & cause string overflow,1,[],https://github.com/ovis-hpc/ovis/pull/189,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/189,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,190,2020-03-12T13:41:55Z,2020-03-26T18:30:14Z,2020-09-11T03:23:22Z,MERGED,True,6,1,1,https://github.com/narategithub,Add missing set ref put in process dir req path,1,[],https://github.com/ovis-hpc/ovis/pull/190,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/190,"process_dir_request() called __ldms_find_local_set() which took
set->ref reference. However, the set->ref was not put back when the
set was not in use, resulting in leaked resources. This patch adds the
missing ref_put(&set->ref, ""__ldms_find_local_set"") where needed in
process_dir_request().","process_dir_request() called __ldms_find_local_set() which took
set->ref reference. However, the set->ref was not put back when the
set was not in use, resulting in leaked resources. This patch adds the
missing ref_put(&set->ref, ""__ldms_find_local_set"") where needed in
process_dir_request().",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,190,2020-03-12T13:41:55Z,2020-03-26T18:30:14Z,2020-09-11T03:23:22Z,MERGED,True,6,1,1,https://github.com/narategithub,Add missing set ref put in process dir req path,1,[],https://github.com/ovis-hpc/ovis/pull/190,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/190#issuecomment-598193345,"process_dir_request() called __ldms_find_local_set() which took
set->ref reference. However, the set->ref was not put back when the
set was not in use, resulting in leaked resources. This patch adds the
missing ref_put(&set->ref, ""__ldms_find_local_set"") where needed in
process_dir_request().","Setup: 1 ldmsd with meminfo plugin and gdb attached.
ldms_ls (just dir, no lookup) 10 times, then dump_set_tree() in the
gdb session showed 10 Get of set->ref from __ldms_find_local_set.
(gdb) call dump_set_tree()                                                       
Set build:411/mem                                                                
... dump_set_tree: ref 0x149d610 free_fn 0x7f9a1e841501 free_arg 0x149d610 ...   
Name             Count    Get Loc                          Put Loc               
---------------- -------- -------------------------------- --------------------------------
__ldms_find_local_set       10 __ldms_find_local_set  /     148 (null)                 /       0
__ldms_alloc_rbd        1 __ldms_alloc_rbd       /    3368 (null)                 /       0
__record_set            1 __record_set           /     500 (null)                 /       0
           Total       12                                                        
Local RBD ...                                                                    
... dump_set_tree: ref 0x149d770 free_fn 0x7f9a1e84e32a free_arg 0x149d770 ...   
Name             Count    Get Loc                          Put Loc               
---------------- -------- -------------------------------- --------------------------------
set_rbd_list            1 __ldms_alloc_rbd       /    3388 (null)                 /       0
__ldms_alloc_rbd        1 __ldms_alloc_rbd       /    3366 (null)                 /       0
           Total        2                                                        
Remote RBD ...                                                                   
After the patch, the ref is put correctly.
(gdb) call dump_set_tree()                                                       
Set build:411/mem                                                                
... dump_set_tree: ref 0x1a6a610 free_fn 0x7fe094ba5501 free_arg 0x1a6a610 ...   
Name             Count    Get Loc                          Put Loc               
---------------- -------- -------------------------------- --------------------------------
__ldms_find_local_set        0 __ldms_find_local_set  /     148 process_dir_request    /     583
__ldms_alloc_rbd        1 __ldms_alloc_rbd       /    3373 (null)                 /       0
__record_set            1 __record_set           /     500 (null)                 /       0
           Total        2                                                        
Local RBD ...                                                                    
... dump_set_tree: ref 0x1a6a770 free_fn 0x7fe094bb238e free_arg 0x1a6a770 ...   
Name             Count    Get Loc                          Put Loc               
---------------- -------- -------------------------------- --------------------------------
set_rbd_list            1 __ldms_alloc_rbd       /    3393 (null)                 /       0
__ldms_alloc_rbd        1 __ldms_alloc_rbd       /    3371 (null)                 /       0
           Total        2                                                        
Remote RBD ...",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,191,2020-03-12T15:55:38Z,2020-03-13T16:11:28Z,2020-09-11T03:23:42Z,MERGED,True,2,2,1,https://github.com/narategithub,Fix available buffer length calculation in process dir req,1,[],https://github.com/ovis-hpc/ovis/pull/191,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/191,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,192,2020-03-12T16:05:32Z,2020-03-26T18:30:30Z,2020-09-11T03:24:19Z,MERGED,True,1,1,1,https://github.com/narategithub,Fix ref put order in `process_lookup_request_re()`,1,[],https://github.com/ovis-hpc/ovis/pull/192,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/192,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,193,2020-03-16T14:22:18Z,2020-03-26T18:30:50Z,2020-09-11T03:25:30Z,MERGED,True,0,2,1,https://github.com/narategithub,Remove left-over prdcr function residue in ldmsd.h,1,[],https://github.com/ovis-hpc/ovis/pull/193,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/193,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,194,2020-03-16T14:22:31Z,2020-03-26T18:32:11Z,2020-09-11T03:23:25Z,MERGED,True,2,0,1,https://github.com/narategithub,Add the missing ref_put in process dir-reply path,1,[],https://github.com/ovis-hpc/ovis/pull/194,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/194,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,195,2020-03-16T20:48:35Z,2020-03-26T18:31:34Z,2020-09-11T03:24:53Z,MERGED,True,0,10,1,https://github.com/narategithub,Remove `ldms_rbd_get/put` residue,1,[],https://github.com/ovis-hpc/ovis/pull/195,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/195,No one calls these functions.,No one calls these functions.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,196,2020-03-17T13:42:15Z,2020-03-26T18:31:54Z,2020-09-11T03:25:23Z,MERGED,True,1,0,1,https://github.com/narategithub,Add the missing rbd ref_put (set_rbd_list),1,[],https://github.com/ovis-hpc/ovis/pull/196,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/196,"The reference was taken in __ldms_alloc_rbd() when inserting the rbd
into the rbd list in the set. When the rbd was removed from the list,
the reference was not dropped.","The reference was taken in __ldms_alloc_rbd() when inserting the rbd
into the rbd list in the set. When the rbd was removed from the list,
the reference was not dropped.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,197,2020-03-19T21:35:14Z,2020-08-18T21:11:36Z,2020-08-18T21:11:37Z,CLOSED,False,741,0,3,https://github.com/bschwal,wip: v4 aries lbw,5,['V4'],https://github.com/ovis-hpc/ovis/pull/197,https://github.com/bschwal,1,https://github.com/ovis-hpc/ovis/pull/197,Adding aries latency and bandwidth sampler under the aries_mmr sampler folder.,Adding aries latency and bandwidth sampler under the aries_mmr sampler folder.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,197,2020-03-19T21:35:14Z,2020-08-18T21:11:36Z,2020-08-18T21:11:37Z,CLOSED,False,741,0,3,https://github.com/bschwal,wip: v4 aries lbw,5,['V4'],https://github.com/ovis-hpc/ovis/pull/197,https://github.com/bschwal,2,https://github.com/ovis-hpc/ovis/pull/197#issuecomment-602607399,Adding aries latency and bandwidth sampler under the aries_mmr sampler folder.,"@oceandlr I will add that to the man page, should I have a retoggle perms if the first try fails in my sample as well?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,197,2020-03-19T21:35:14Z,2020-08-18T21:11:36Z,2020-08-18T21:11:37Z,CLOSED,False,741,0,3,https://github.com/bschwal,wip: v4 aries lbw,5,['V4'],https://github.com/ovis-hpc/ovis/pull/197,https://github.com/bschwal,3,https://github.com/ovis-hpc/ovis/pull/197#issuecomment-602734151,Adding aries latency and bandwidth sampler under the aries_mmr sampler folder.,The changes have been made in the latest commit. I tested it on the whole of ldms2 partition on mutrino for application runs and it is sampling and storing without error.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,197,2020-03-19T21:35:14Z,2020-08-18T21:11:36Z,2020-08-18T21:11:37Z,CLOSED,False,741,0,3,https://github.com/bschwal,wip: v4 aries lbw,5,['V4'],https://github.com/ovis-hpc/ovis/pull/197,https://github.com/tom95858,4,https://github.com/ovis-hpc/ovis/pull/197#issuecomment-603514300,Adding aries latency and bandwidth sampler under the aries_mmr sampler folder.,You should not just arbitrarily advance the end date of a copyright without modifying the underlying source code. Is there some background to this I should be aware of?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,197,2020-03-19T21:35:14Z,2020-08-18T21:11:36Z,2020-08-18T21:11:37Z,CLOSED,False,741,0,3,https://github.com/bschwal,wip: v4 aries lbw,5,['V4'],https://github.com/ovis-hpc/ovis/pull/197,https://github.com/bschwal,5,https://github.com/ovis-hpc/ovis/pull/197#issuecomment-603515243,Adding aries latency and bandwidth sampler under the aries_mmr sampler folder.,I was simply copying from aries_mmr source code as the basis for this one. Completely fine with changing this copyright as appropriate.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,197,2020-03-19T21:35:14Z,2020-08-18T21:11:36Z,2020-08-18T21:11:37Z,CLOSED,False,741,0,3,https://github.com/bschwal,wip: v4 aries lbw,5,['V4'],https://github.com/ovis-hpc/ovis/pull/197,https://github.com/tom95858,6,https://github.com/ovis-hpc/ovis/pull/197#issuecomment-675720370,Adding aries latency and bandwidth sampler under the aries_mmr sampler folder.,@bschwal what is the status of this pull request? Does it need to be closed?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,197,2020-03-19T21:35:14Z,2020-08-18T21:11:36Z,2020-08-18T21:11:37Z,CLOSED,False,741,0,3,https://github.com/bschwal,wip: v4 aries lbw,5,['V4'],https://github.com/ovis-hpc/ovis/pull/197,https://github.com/tom95858,7,https://github.com/ovis-hpc/ovis/pull/197#issuecomment-675722796,Adding aries latency and bandwidth sampler under the aries_mmr sampler folder.,Please re-open if it is ready for OVIS-4.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,198,2020-03-20T21:41:44Z,2020-03-26T18:39:56Z,2020-03-26T18:39:56Z,MERGED,True,1328,194,26,https://github.com/baallan,fixes for ncsa-snl demo,17,['V3'],https://github.com/ovis-hpc/ovis/pull/198,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/198,"This pr has several independent fixes to enable the snl-ncsa ui pipeline. each commit is independent, except the two modifications to the function_csv store.","This pr has several independent fixes to enable the snl-ncsa ui pipeline. each commit is independent, except the two modifications to the function_csv store.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,198,2020-03-20T21:41:44Z,2020-03-26T18:39:56Z,2020-03-26T18:39:56Z,MERGED,True,1328,194,26,https://github.com/baallan,fixes for ncsa-snl demo,17,['V3'],https://github.com/ovis-hpc/ovis/pull/198,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/198#issuecomment-601924039,"This pr has several independent fixes to enable the snl-ncsa ui pipeline. each commit is independent, except the two modifications to the function_csv store.",@gentile this has been run through valgrind memory and thread checkers using the included testing scripts.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,200,2020-03-23T15:44:54Z,2020-03-26T18:32:41Z,2020-09-11T03:24:16Z,MERGED,True,10,2,1,https://github.com/narategithub,Fix prdcr connect synchronous error handling,1,[],https://github.com/ovis-hpc/ovis/pull/200,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/200,"When prdcr connect got synchronous error, it did not re-schedule the
connect event and hence broke the prdcr connect-retry event loop.","When prdcr connect got synchronous error, it did not re-schedule the
connect event and hence broke the prdcr connect-retry event loop.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,201,2020-03-23T16:12:14Z,2020-03-26T20:30:16Z,2020-03-26T20:30:17Z,MERGED,True,1,0,1,https://github.com/baallan,fix missing lustre bit for cray-system-sampler,1,['V4'],https://github.com/ovis-hpc/ovis/pull/201,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/201,fix issue #199,fix issue #199,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,203,2020-03-23T21:08:26Z,2020-03-26T18:33:00Z,2020-09-11T03:23:52Z,MERGED,True,68,47,3,https://github.com/narategithub,Fix error path in `handle_rendezvous_lookup()`,1,[],https://github.com/ovis-hpc/ovis/pull/203,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/203,"add __ldms_set_delete(struct ldms_set *) for deleting the newly
recorded set that does not have rbd yet (requires to unwind the set
create in handle_rendezvous_lookup() in the case of an error).
correct error path in handle_rendezvous_lookup(). Previously, when
multiple-source lookup is allowed (e.g. agg2 lookup node1/meminfo
from both agg11 and agg12), a synchronous read on agg12 would delete
the set along with all the rbds, including the good rbd from agg11.
The prd_set associated with agg11 will hold on a stale rbd.
Multiple-source lookup will now result in EEXIST.
Update ldmsd_prdcr to also handle and report EEXIST lookup error.","add __ldms_set_delete(struct ldms_set *) for deleting the newly
recorded set that does not have rbd yet (requires to unwind the set
create in handle_rendezvous_lookup() in the case of an error).
correct error path in handle_rendezvous_lookup(). Previously, when
multiple-source lookup is allowed (e.g. agg2 lookup node1/meminfo
from both agg11 and agg12), a synchronous read on agg12 would delete
the set along with all the rbds, including the good rbd from agg11.
The prd_set associated with agg11 will hold on a stale rbd.
Multiple-source lookup will now result in EEXIST.
Update ldmsd_prdcr to also handle and report EEXIST lookup error.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,205,2020-03-24T22:22:01Z,2020-03-26T19:36:35Z,2020-09-11T03:25:56Z,MERGED,True,228,90,43,https://github.com/narategithub,Fix build with `--disable-rpath`,1,['V4'],https://github.com/ovis-hpc/ovis/pull/205,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/205,"The main issue that --disable-rpath did not work is that option.m4
OPTION_LIB_FLAGS constructed using -L<DIR> to add search path for
ld. However, when checking for a depended libraries, ld ignores -L
search path (see ld(1) under -rpath-link option explanation). Hence,
the linker cannot check for the 2nd-level dependency and resulted in
link error. For example, building libldms that does not use ovis_third,
but uses json_util which depends on ovis_third will result in an error.
This patch fix OPTION_LIB_FLAGS macro, supplying -Wl,-rpath-link
instead of -L.
Also, the in-tree library linking should use .la files instead of the
direct -l library request. This is addressed in this patch as well
(not using .la also resulted in build error when --disable-rpath is
present).
me module residue is also removed.
NOTE: This patch has been build/install using the following flag:
../configure --prefix=/opt/ovis \
             --enable-etc \
             --disable-rpath \
             --enable-rdma \
             --enable-fabric \
             --with-libfabric=/usr \
             --enable-sos \
             --with-sos=/opt/ovis \
             --enable-filesingle \
             --enable-perfevent \
             --enable-hweventpapi \
             --enable-fptrans \
             --enable-sysclassib \
             --enable-opa2 \
             --enable-atasmart \
             --enable-kokkos \
             --enable-jobinfo-slurm \
             --enable-spank-plugin \
             --enable-papi-sampler \
             --enable-ibm-occ \
             --enable-appinfo \
             --enable-ipmireader \
             --enable-influx \
             --enable-syspapi-sampler \
             --enable-munge
The installed libaries does not contain rpath information, e.g.:
root@ubuntu-1804:/opt/ovis/lib# ldd libldms.so
        linux-vdso.so.1 (0x00007ffd9938d000)
        libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f1dac561000)
        libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f1dac342000)
        libcoll.so.0 => not found
        libjson_util.so.0 => not found
        libmmalloc.so.0 => not found
        libzap.so.0 => not found
        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f1dabf51000)
        /lib64/ld-linux-x86-64.so.2 (0x00007f1dac97b000)
(even though they're in the same directory).","The main issue that --disable-rpath did not work is that option.m4
OPTION_LIB_FLAGS constructed using -L<DIR> to add search path for
ld. However, when checking for a depended libraries, ld ignores -L
search path (see ld(1) under -rpath-link option explanation). Hence,
the linker cannot check for the 2nd-level dependency and resulted in
link error. For example, building libldms that does not use ovis_third,
but uses json_util which depends on ovis_third will result in an error.
This patch fix OPTION_LIB_FLAGS macro, supplying -Wl,-rpath-link
instead of -L.
Also, the in-tree library linking should use .la files instead of the
direct -l library request. This is addressed in this patch as well
(not using .la also resulted in build error when --disable-rpath is
present).
me module residue is also removed.
NOTE: This patch has been build/install using the following flag:
../configure --prefix=/opt/ovis \
             --enable-etc \
             --disable-rpath \
             --enable-rdma \
             --enable-fabric \
             --with-libfabric=/usr \
             --enable-sos \
             --with-sos=/opt/ovis \
             --enable-filesingle \
             --enable-perfevent \
             --enable-hweventpapi \
             --enable-fptrans \
             --enable-sysclassib \
             --enable-opa2 \
             --enable-atasmart \
             --enable-kokkos \
             --enable-jobinfo-slurm \
             --enable-spank-plugin \
             --enable-papi-sampler \
             --enable-ibm-occ \
             --enable-appinfo \
             --enable-ipmireader \
             --enable-influx \
             --enable-syspapi-sampler \
             --enable-munge
The installed libaries does not contain rpath information, e.g.:
root@ubuntu-1804:/opt/ovis/lib# ldd libldms.so
        linux-vdso.so.1 (0x00007ffd9938d000)
        libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f1dac561000)
        libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f1dac342000)
        libcoll.so.0 => not found
        libjson_util.so.0 => not found
        libmmalloc.so.0 => not found
        libzap.so.0 => not found
        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f1dabf51000)
        /lib64/ld-linux-x86-64.so.2 (0x00007f1dac97b000)
(even though they're in the same directory).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,206,2020-03-25T18:22:26Z,2020-03-26T20:31:26Z,2020-03-26T20:31:26Z,MERGED,True,2,2,1,https://github.com/baallan,restrict .la removal search to libdir only,2,['V4'],https://github.com/ovis-hpc/ovis/pull/206,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/206,"adjusted nola invocation per j. cook suggestion.
will ask @joncooknmsu to test","adjusted nola invocation per j. cook suggestion.
will ask @joncooknmsu to test",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,207,2020-03-26T19:33:09Z,2020-03-26T19:35:59Z,2020-09-11T03:23:32Z,MERGED,True,1,1,1,https://github.com/narategithub,Fix no reference to LDMSDPORT,1,[],https://github.com/ovis-hpc/ovis/pull/207,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/207,"LDMSDPORT is defined in build/ldms/config.h, and the file did not get
installed. Instead, the alternate version of the file
build/ldms/src/ovis-ldms-config.h is installed to avoid header file
collision. Hence, LDMSDPORT macro won't be resolved when compiling a
plugin outside of the ovis tree.
This patch change the use of LDMSDPORT to OVIS_LDMS_LDMSDPORT varient
that is defined in the installed header file ovis-ldms-config.h.","LDMSDPORT is defined in build/ldms/config.h, and the file did not get
installed. Instead, the alternate version of the file
build/ldms/src/ovis-ldms-config.h is installed to avoid header file
collision. Hence, LDMSDPORT macro won't be resolved when compiling a
plugin outside of the ovis tree.
This patch change the use of LDMSDPORT to OVIS_LDMS_LDMSDPORT varient
that is defined in the installed header file ovis-ldms-config.h.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,208,2020-03-30T08:03:52Z,2020-03-30T17:57:57Z,2020-04-01T17:55:18Z,MERGED,True,4,5,2,https://github.com/narategithub,Fix `-l<LIB>` build issue for internal libraries,1,['V4'],https://github.com/ovis-hpc/ovis/pull/208,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/208,"The previous --disable-rpath build issue fix replaced -L with
-Wl,-rpath-link in OVIS_LIB flag building in options.m4. As a
result, the -l<LIB> (e.g. -lldms) style in *_LDADD (vs
$(top_builddir)/ldms/src/core/libldms.la style) will get a library not
found error.
This patch added back the -L option when building the OVIS_LIB flag in
options.m4 to support internal library -l<LIB> in LDADD. The
meminfo Makefile.am was added in this patch as a showcase.
NOTE: This patch has been tested both with and without
--disable-rpath.","The previous --disable-rpath build issue fix replaced -L with
-Wl,-rpath-link in OVIS_LIB flag building in options.m4. As a
result, the -l<LIB> (e.g. -lldms) style in *_LDADD (vs
$(top_builddir)/ldms/src/core/libldms.la style) will get a library not
found error.
This patch added back the -L option when building the OVIS_LIB flag in
options.m4 to support internal library -l<LIB> in LDADD. The
meminfo Makefile.am was added in this patch as a showcase.
NOTE: This patch has been tested both with and without
--disable-rpath.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,208,2020-03-30T08:03:52Z,2020-03-30T17:57:57Z,2020-04-01T17:55:18Z,MERGED,True,4,5,2,https://github.com/narategithub,Fix `-l<LIB>` build issue for internal libraries,1,['V4'],https://github.com/ovis-hpc/ovis/pull/208,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/208#issuecomment-606675240,"The previous --disable-rpath build issue fix replaced -L with
-Wl,-rpath-link in OVIS_LIB flag building in options.m4. As a
result, the -l<LIB> (e.g. -lldms) style in *_LDADD (vs
$(top_builddir)/ldms/src/core/libldms.la style) will get a library not
found error.
This patch added back the -L option when building the OVIS_LIB flag in
options.m4 to support internal library -l<LIB> in LDADD. The
meminfo Makefile.am was added in this patch as a showcase.
NOTE: This patch has been tested both with and without
--disable-rpath.","@narategithub with swig enabled on the tip of ovis-4, I end up at:
libtool: link: gcc -shared  -fPIC -DPIC  .libs/_zap_la-zap.o   -L/usr/lib64 -lpython2.7 -L/usr/lib -lzap  -O2 -O1 -Wl,-rpath-link=/ascldap/users/baallan/stria/distribution/v4.atse.opt.nosos.unstable/LDMS/Tars/ovis-ldms-4.3.3/LDMS/v4.atse.opt.nosos.unstable/BUILD/ovis-ldms-4.3.3/lib/src/coll/.libs -Wl,-rpath-link=/ascldap/users/baallan/stria/distribution/v4.atse.opt.nosos.unstable/LDMS/Tars/ovis-ldms-4.3.3/LDMS/v4.atse.opt.nosos.unstable/BUILD/ovis-ldms-4.3.3/lib/src/third/.libs -Wl,-rpath-link=/ascldap/users/baallan/stria/distribution/v4.atse.opt.nosos.unstable/LDMS/Tars/ovis-ldms-4.3.3/LDMS/v4.atse.opt.nosos.unstable/BUILD/ovis-ldms-4.3.3/lib/src/ovis_util/.libs -Wl,-rpath-link=/ascldap/users/baallan/stria/distribution/v4.atse.opt.nosos.unstable/LDMS/Tars/ovis-ldms-4.3.3/LDMS/v4.atse.opt.nosos.unstable/BUILD/ovis-ldms-4.3.3/lib/src/ovis_auth/.libs -Wl,-rpath-link=/ascldap/users/baallan/stria/distribution/v4.atse.opt.nosos.unstable/LDMS/Tars/ovis-ldms-4.3.3/LDMS/v4.atse.opt.nosos.unstable/BUILD/ovis-ldms-4.3.3/lib/src/ovis_ctrl/.libs -Wl,-rpath-link=/ascldap/users/baallan/stria/distribution/v4.atse.opt.nosos.unstable/LDMS/Tars/ovis-ldms-4.3.3/LDMS/v4.atse.opt.nosos.unstable/BUILD/ovis-ldms-4.3.3/lib/src/ovis_event/.libs -Wl,-rpath-link=/ascldap/users/baallan/stria/distribution/v4.atse.opt.nosos.unstable/LDMS/Tars/ovis-ldms-4.3.3/LDMS/v4.atse.opt.nosos.unstable/BUILD/ovis-ldms-4.3.3/lib/src/json/.libs -Wl,-rpath-link=/ascldap/users/baallan/stria/distribution/v4.atse.opt.nosos.unstable/LDMS/Tars/ovis-ldms-4.3.3/LDMS/v4.atse.opt.nosos.unstable/BUILD/ovis-ldms-4.3.3/lib/src/zap/.libs -Wl,-rpath-link=/ascldap/users/baallan/stria/distribution/v4.atse.opt.nosos.unstable/LDMS/Tars/ovis-ldms-4.3.3/LDMS/v4.atse.opt.nosos.unstable/BUILD/ovis-ldms-4.3.3/lib/src/mmalloc/.libs -Wl,-rpath-link=/ascldap/users/baallan/stria/distribution/v4.atse.opt.nosos.unstable/LDMS/Tars/ovis-ldms-4.3.3/LDMS/v4.atse.opt.nosos.unstable/BUILD/ovis-ldms-4.3.3/ldms/src/core/.libs -Wl,-rpath-link=/ascldap/users/baallan/stria/distribution/v4.atse.opt.nosos.unstable/LDMS/Tars/ovis-ldms-4.3.3/LDMS/v4.atse.opt.nosos.unstable/BUILD/ovis-ldms-4.3.3/ldms/src/auth/.libs -Wl,-rpath-link=/ascldap/users/baallan/stria/distribution/v4.atse.opt.nosos.unstable/LDMS/Tars/ovis-ldms-4.3.3/LDMS/v4.atse.opt.nosos.unstable/BUILD/ovis-ldms-4.3.3/ldms/src/ldmsd/.libs -Wl,-rpath-link=/ascldap/users/baallan/stria/distribution/v4.atse.opt.nosos.unstable/LDMS/Tars/ovis-ldms-4.3.3/LDMS/v4.atse.opt.nosos.unstable/BUILD/ovis-ldms-4.3.3/ldms/src/sampler/.libs -Wl,-rpath-link=/ascldap/users/baallan/stria/distribution/v4.atse.opt.nosos.unstable/LDMS/Tars/ovis-ldms-4.3.3/LDMS/v4.atse.opt.nosos.unstable/BUILD/ovis-ldms-4.3.3/ldms/src/sampler/lustre/.libs -Wl,-rpath-link=/ascldap/users/baallan/stria/distribution/v4.atse.opt.nosos.unstable/LDMS/Tars/ovis-ldms-4.3.3/LDMS/v4.atse.opt.nosos.unstable/BUILD/ovis-ldms-4.3.3/ldms/src/store/.libs -Wl,-z -Wl,relro -Wl,-rpath-link=/opt/ovis/sandia-nosos-ovis_ldms_4.3.3/root/usr/lib64/ovis-ldms/papi-6.0.0/lib   -Wl,-soname -Wl,_zap.so.0 -o .libs/_zap.so.0.0.0
/bin/ld: cannot find -lzap
collect2: error: ld returned 1 exit status
make[5]: *** [_zap.la] Error 1
make[5]: Leaving directory `/home/baallan/stria/distribution/v4.atse.opt.nosos.unstable/LDMS/Tars/ovis-ldms-4.3.3/LDMS/v4.atse.opt.nosos.unstable/BUILD/ovis-ldms-4.3.3/lib/swig/zap'
make[4]: *** [all] Error 2
make[4]: Leaving directory `/home/baallan/stria/distribution/v4.atse.opt.nosos.unstable/LDMS/Tars/ovis-ldms-4.3.3/LDMS/v4.atse.opt.nosos.unstable/BUILD/ovis-ldms-4.3.3/lib/swig/zap'
make[3]: *** [all-recursive] Error 1
make[3]: Leaving directory `/home/baallan/stria/distribution/v4.atse.opt.nosos.unstable/LDMS/Tars/ovis-ldms-4.3.3/LDMS/v4.atse.opt.nosos.unstable/BUILD/ovis-ldms-4.3.3/lib/swig'
make[2]: *** [all-recursive] Error 1
make[2]: Leaving directory `/home/baallan/stria/distribution/v4.atse.opt.nosos.unstable/LDMS/Tars/ovis-ldms-4.3.3/LDMS/v4.atse.opt.nosos.unstable/BUILD/ovis-ldms-4.3.3/lib'
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory `/home/baallan/stria/distribution/v4.atse.opt.nosos.unstable/LDMS/Tars/ovis-ldms-4.3.3/LDMS/v4.atse.opt.nosos.unstable/BUILD/ovis-ldms-4.3.3'

using the configure line:
--with-boost=/usr \
--disable-static \
--with-pkglibdir=ovis-ldms \
--enable-ovis_auth \
--enable-ssl \
--enable-ovis_event \
--enable-zap \
--enable-sock \
--enable-rdma \
--disable-mmap \
--enable-swig \
--disable-readline \
--enable-ldms-python \
--enable-python \
--enable-libgenders \
--enable-genderssystemd \
--disable-sos \
--enable-flatfile \
--enable-csv \
--enable-store \
--disable-rabbitv3 \
--enable-rabbitkw \
--disable-kokkos \
--disable-cray_power_sampler \
--disable-cray_system_sampler \
--disable-aries-gpcdr \
--disable-gpcdlocal \
--disable-aries-mmr \
--disable-ugni \
--disable-perfevent \
--disable-papi \
--disable-procdiskstats \
--disable-atasmart \
--disable-hadoop \
--disable-generic_sampler \
--disable-switchx \
--disable-sensors \
--enable-dstat \
--enable-llnl-edac \
--disable-sysclassib \
--disable-opa2 \
--disable-influx \
--enable-jobinfo \
--enable-perf \
--enable-jobid \
--enable-array_example \
--enable-procinterrupts \
--enable-procnetdev \
--enable-procnfs \
--enable-procsensors \
--enable-procstat \
--enable-vmstat \
--enable-meminfo \
--enable-lustre \
--enable-slurmtest \
--enable-filesingle \
--enable-munge \
--enable-syspapi-sampler \
--with-libpapi=/opt/ovis/sandia-nosos-ovis_ldms_4.3.3/root/usr/lib64/ovis-ldms/papi-6.0.0 \
--enable-fabric --with-libfabric=/usr

If I disable swig, the build goes through.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,208,2020-03-30T08:03:52Z,2020-03-30T17:57:57Z,2020-04-01T17:55:18Z,MERGED,True,4,5,2,https://github.com/narategithub,Fix `-l<LIB>` build issue for internal libraries,1,['V4'],https://github.com/ovis-hpc/ovis/pull/208,https://github.com/narategithub,3,https://github.com/ovis-hpc/ovis/pull/208#issuecomment-607183656,"The previous --disable-rpath build issue fix replaced -L with
-Wl,-rpath-link in OVIS_LIB flag building in options.m4. As a
result, the -l<LIB> (e.g. -lldms) style in *_LDADD (vs
$(top_builddir)/ldms/src/core/libldms.la style) will get a library not
found error.
This patch added back the -L option when building the OVIS_LIB flag in
options.m4 to support internal library -l<LIB> in LDADD. The
meminfo Makefile.am was added in this patch as a showcase.
NOTE: This patch has been tested both with and without
--disable-rpath.","I cannot reproduce. Did you call ./autogen.sh to refresh the configure and automake files?
Here's my flags (based on yours):
--prefix=${PREFIX} \           
--disable-static \             
--with-pkglibdir=ovis-ldms \   
--enable-ovis_auth \           
--enable-ssl \                 
--enable-ovis_event \          
--enable-zap \                 
--enable-sock \                
--enable-rdma \                
--disable-mmap \               
--enable-swig \                
--disable-readline \           
--enable-ldms-python \         
--enable-python \              
--enable-libgenders \          
--enable-genderssystemd \      
--disable-sos \                
--enable-flatfile \            
--enable-csv \                 
--enable-store \               
--disable-rabbitv3 \           
--enable-rabbitkw \            
--disable-kokkos \             
--disable-cray_power_sampler \ 
--disable-cray_system_sampler \
--disable-aries-gpcdr \        
--disable-gpcdlocal \          
--disable-aries-mmr \          
--disable-ugni \               
--disable-perfevent \          
--disable-papi \               
--disable-procdiskstats \      
--disable-atasmart \           
--disable-hadoop \             
--disable-generic_sampler \    
--disable-switchx \            
--disable-sensors \            
--enable-dstat \               
--enable-llnl-edac \           
--disable-sysclassib \         
--disable-opa2 \               
--disable-influx \             
--enable-jobinfo \             
--enable-perf \                
--enable-jobid \               
--enable-array_example \       
--enable-procinterrupts \      
--enable-procnetdev \          
--enable-procnfs \             
--enable-procsensors \         
--enable-procstat \            
--enable-vmstat \                      
--enable-meminfo \                     
--enable-lustre \                      
--enable-slurmtest \                   
--enable-filesingle \                  
--enable-munge \                       
--enable-syspapi-sampler \             
--enable-fabric --with-libfabric=/usr \
CFLAGS='-ggdb3 -O0 -Wall -Werror'",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,208,2020-03-30T08:03:52Z,2020-03-30T17:57:57Z,2020-04-01T17:55:18Z,MERGED,True,4,5,2,https://github.com/narategithub,Fix `-l<LIB>` build issue for internal libraries,1,['V4'],https://github.com/ovis-hpc/ovis/pull/208,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/208#issuecomment-607290384,"The previous --disable-rpath build issue fix replaced -L with
-Wl,-rpath-link in OVIS_LIB flag building in options.m4. As a
result, the -l<LIB> (e.g. -lldms) style in *_LDADD (vs
$(top_builddir)/ldms/src/core/libldms.la style) will get a library not
found error.
This patch added back the -L option when building the OVIS_LIB flag in
options.m4 to support internal library -l<LIB> in LDADD. The
meminfo Makefile.am was added in this patch as a showcase.
NOTE: This patch has been tested both with and without
--disable-rpath.","somehow in my cutting the config flags into the brower the disable-rpath got lost. sorry.
I pushed an update of the complete script (ovis-4: packaging/make-all-ubuntu-12.sh)
Update, autogen, and run that. if it whines about anything genders related, switch those flags to disable.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,208,2020-03-30T08:03:52Z,2020-03-30T17:57:57Z,2020-04-01T17:55:18Z,MERGED,True,4,5,2,https://github.com/narategithub,Fix `-l<LIB>` build issue for internal libraries,1,['V4'],https://github.com/ovis-hpc/ovis/pull/208,https://github.com/narategithub,5,https://github.com/ovis-hpc/ovis/pull/208#issuecomment-607384877,"The previous --disable-rpath build issue fix replaced -L with
-Wl,-rpath-link in OVIS_LIB flag building in options.m4. As a
result, the -l<LIB> (e.g. -lldms) style in *_LDADD (vs
$(top_builddir)/ldms/src/core/libldms.la style) will get a library not
found error.
This patch added back the -L option when building the OVIS_LIB flag in
options.m4 to support internal library -l<LIB> in LDADD. The
meminfo Makefile.am was added in this patch as a showcase.
NOTE: This patch has been tested both with and without
--disable-rpath.","Adding in --disable-rpath also works for me in both Centos7.7 and Ubuntu 18.04. Your ubuntu make script still look for ldms/configure and I cannot run it.
Check your LD_LIBRARY_PATH and existing install .. maybe due to --disable-rpath, libtool pickup the old stuff that was installed previously instead of those in the build tree?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,208,2020-03-30T08:03:52Z,2020-03-30T17:57:57Z,2020-04-01T17:55:18Z,MERGED,True,4,5,2,https://github.com/narategithub,Fix `-l<LIB>` build issue for internal libraries,1,['V4'],https://github.com/ovis-hpc/ovis/pull/208,https://github.com/baallan,6,https://github.com/ovis-hpc/ovis/pull/208#issuecomment-607400401,"The previous --disable-rpath build issue fix replaced -L with
-Wl,-rpath-link in OVIS_LIB flag building in options.m4. As a
result, the -l<LIB> (e.g. -lldms) style in *_LDADD (vs
$(top_builddir)/ldms/src/core/libldms.la style) will get a library not
found error.
This patch added back the -L option when building the OVIS_LIB flag in
options.m4 to support internal library -l<LIB> in LDADD. The
meminfo Makefile.am was added in this patch as a showcase.
NOTE: This patch has been tested both with and without
--disable-rpath.","a clean clone to /tmp works as it does for you. I have no ld_library_path.
so there's something fishy with building in subdirectory development mode that wasn't before, but I'll have to live with it for now. thanks for looking.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,209,2020-03-30T10:54:10Z,2020-03-30T17:59:04Z,2020-09-11T03:24:29Z,MERGED,True,5,1,1,https://github.com/narategithub,Fix store_amqp build error due to amqp interface change,1,['V4'],https://github.com/ovis-hpc/ovis/pull/209,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/209,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,209,2020-03-30T10:54:10Z,2020-03-30T17:59:04Z,2020-09-11T03:24:29Z,MERGED,True,5,1,1,https://github.com/narategithub,Fix store_amqp build error due to amqp interface change,1,['V4'],https://github.com/ovis-hpc/ovis/pull/209,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/209#issuecomment-605930268,,store_amqp in v5 does not have this issue (addressed when it was ported to v5).,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,210,2020-04-01T10:41:16Z,2020-04-01T15:25:58Z,2020-09-11T03:25:33Z,MERGED,True,10,29,3,https://github.com/narategithub,Remove OVIS_GIT_SHORT macro,1,[],https://github.com/ovis-hpc/ovis/pull/210,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/210,Remove OVIS_GIT_SHORT macro and TAG.txt. No one is using it.,Remove OVIS_GIT_SHORT macro and TAG.txt. No one is using it.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,210,2020-04-01T10:41:16Z,2020-04-01T15:25:58Z,2020-09-11T03:25:33Z,MERGED,True,10,29,3,https://github.com/narategithub,Remove OVIS_GIT_SHORT macro,1,[],https://github.com/ovis-hpc/ovis/pull/210,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/210#issuecomment-607174777,Remove OVIS_GIT_SHORT macro and TAG.txt. No one is using it.,NOTE: This has been tested with make dist and install from the dist tarball. The OVIS_GIT_LONG in ovis-ldms-config.h is also inspected.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,211,2020-04-01T14:34:34Z,2020-04-01T14:35:18Z,2020-04-01T15:45:14Z,MERGED,True,2,2,1,https://github.com/baallan,sharing build test script for v4+ubuntu18,1,[],https://github.com/ovis-hpc/ovis/pull/211,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/211,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,211,2020-04-01T14:34:34Z,2020-04-01T14:35:18Z,2020-04-01T15:45:14Z,MERGED,True,2,2,1,https://github.com/baallan,sharing build test script for v4+ubuntu18,1,[],https://github.com/ovis-hpc/ovis/pull/211,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/211#issuecomment-607324593,,"The text says v4+ubuntu18, but the file is named make-all-ubuntu-12. Is one or the other a typo?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,211,2020-04-01T14:34:34Z,2020-04-01T14:35:18Z,2020-04-01T15:45:14Z,MERGED,True,2,2,1,https://github.com/baallan,sharing build test script for v4+ubuntu18,1,[],https://github.com/ovis-hpc/ovis/pull/211,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/211#issuecomment-607328200,,not a typo. the updated script file was created back in the days of U12. you may be right that it's time for a rename...,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,212,2020-04-06T03:06:28Z,2020-04-23T15:54:09Z,2020-05-25T21:39:27Z,MERGED,True,1560,12,9,https://github.com/oceandlr,aries_mmr_configurable sampler,1,[],https://github.com/ovis-hpc/ovis/pull/212,https://github.com/oceandlr,1,https://github.com/ovis-hpc/ovis/pull/212,Aries_mmr_configrurable sampler:  sets/resets/reads configurable Aries counters.,Aries_mmr_configrurable sampler:  sets/resets/reads configurable Aries counters.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,212,2020-04-06T03:06:28Z,2020-04-23T15:54:09Z,2020-05-25T21:39:27Z,MERGED,True,1560,12,9,https://github.com/oceandlr,aries_mmr_configurable sampler,1,[],https://github.com/ovis-hpc/ovis/pull/212,https://github.com/oceandlr,2,https://github.com/ovis-hpc/ovis/pull/212#issuecomment-612488817,Aries_mmr_configrurable sampler:  sets/resets/reads configurable Aries counters.,Going to do a review with @bschwal . Will note here when ready.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,212,2020-04-06T03:06:28Z,2020-04-23T15:54:09Z,2020-05-25T21:39:27Z,MERGED,True,1560,12,9,https://github.com/oceandlr,aries_mmr_configurable sampler,1,[],https://github.com/ovis-hpc/ovis/pull/212,https://github.com/oceandlr,3,https://github.com/ovis-hpc/ovis/pull/212#issuecomment-612710967,Aries_mmr_configrurable sampler:  sets/resets/reads configurable Aries counters.,"This has been revised to specify counters as either U64 or hex in the set and also in the read.
Please re-review @bschwal and @tom95858",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,212,2020-04-06T03:06:28Z,2020-04-23T15:54:09Z,2020-05-25T21:39:27Z,MERGED,True,1560,12,9,https://github.com/oceandlr,aries_mmr_configurable sampler,1,[],https://github.com/ovis-hpc/ovis/pull/212,https://github.com/oceandlr,4,https://github.com/ovis-hpc/ovis/pull/212#issuecomment-618471919,Aries_mmr_configrurable sampler:  sets/resets/reads configurable Aries counters.,@tom95858 can this be taken in?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,213,2020-04-07T16:18:40Z,2020-04-11T15:14:39Z,2020-04-11T15:14:39Z,MERGED,True,621,43,12,https://github.com/baallan,add v4 loadavg sampler and test,3,[],https://github.com/ovis-hpc/ovis/pull/213,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/213,"porting loadavg sampler to v4 from v3 before I forget.
Is bundled with vmstat in configuration options.","porting loadavg sampler to v4 from v3 before I forget.
Is bundled with vmstat in configuration options.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,213,2020-04-07T16:18:40Z,2020-04-11T15:14:39Z,2020-04-11T15:14:39Z,MERGED,True,621,43,12,https://github.com/baallan,add v4 loadavg sampler and test,3,[],https://github.com/ovis-hpc/ovis/pull/213,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/213#issuecomment-611205057,"porting loadavg sampler to v4 from v3 before I forget.
Is bundled with vmstat in configuration options.",@tom95858 updated build files to split loadavg from vmstat configs.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,213,2020-04-07T16:18:40Z,2020-04-11T15:14:39Z,2020-04-11T15:14:39Z,MERGED,True,621,43,12,https://github.com/baallan,add v4 loadavg sampler and test,3,[],https://github.com/ovis-hpc/ovis/pull/213,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/213#issuecomment-611269848,"porting loadavg sampler to v4 from v3 before I forget.
Is bundled with vmstat in configuration options.","Hi @baallan,
Am I misreading this or is it possible for the user to select a combination the 6 metrics in the loadavg file. Doesn't this generate potentially 64 different schema? Is there a reason for this additional complexity? It would seem to make analysis particularly challenging.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,213,2020-04-07T16:18:40Z,2020-04-11T15:14:39Z,2020-04-11T15:14:39Z,MERGED,True,621,43,12,https://github.com/baallan,add v4 loadavg sampler and test,3,[],https://github.com/ovis-hpc/ovis/pull/213,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/213#issuecomment-611532145,"porting loadavg sampler to v4 from v3 before I forget.
Is bundled with vmstat in configuration options.","The plugin (unlike meminfo, vmstat, and procstat) automatically (no admin name invention required) creates a schema name uniquely matching the schema content. The default (all metrics in the source file) is simply loadavg. Every other combination of metric  requests has a unique and documented schema name that will be identical for every other administrator/system in the world that requests the same schema content.
What could be simpler, other than moving on to schema-free user-oriented designs?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,213,2020-04-07T16:18:40Z,2020-04-11T15:14:39Z,2020-04-11T15:14:39Z,MERGED,True,621,43,12,https://github.com/baallan,add v4 loadavg sampler and test,3,[],https://github.com/ovis-hpc/ovis/pull/213,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/213#issuecomment-611803206,"porting loadavg sampler to v4 from v3 before I forget.
Is bundled with vmstat in configuration options.","Hi @baallan, thank you for making the changes. I think it is ready to merge modulo the copyright.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,214,2020-04-09T23:07:29Z,2020-04-10T00:35:17Z,2020-04-10T00:35:17Z,MERGED,True,73,18,2,https://github.com/baallan,fix redundant job set warnings cluttering the logs,1,[],https://github.com/ovis-hpc/ovis/pull/214,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/214,This appends a warnings field to the base sampler structure and uses it to suppress repeated spew of 5 warnings to the log related to jobinfo insufficiency. A warning is issued once and then not issued again unless it is first resolved and then reappears.,This appends a warnings field to the base sampler structure and uses it to suppress repeated spew of 5 warnings to the log related to jobinfo insufficiency. A warning is issued once and then not issued again unless it is first resolved and then reappears.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,214,2020-04-09T23:07:29Z,2020-04-10T00:35:17Z,2020-04-10T00:35:17Z,MERGED,True,73,18,2,https://github.com/baallan,fix redundant job set warnings cluttering the logs,1,[],https://github.com/ovis-hpc/ovis/pull/214,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/214#issuecomment-611817819,This appends a warnings field to the base sampler structure and uses it to suppress repeated spew of 5 warnings to the log related to jobinfo insufficiency. A warning is issued once and then not issued again unless it is first resolved and then reappears.,I think this looks great. Thanks @baallan...,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,216,2020-04-09T23:12:47Z,2020-04-10T00:36:28Z,2020-04-10T00:36:28Z,MERGED,True,2,2,2,https://github.com/baallan,fix hardcoded version number that sneaked into test scripts.,1,[],https://github.com/ovis-hpc/ovis/pull/216,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/216,"a hardcode version slipped into [pll-]ldms-static-test.sh. This replaces it with @Version@
the same branch exists in ovis-hpc/ovis directly but should not.","a hardcode version slipped into [pll-]ldms-static-test.sh. This replaces it with @Version@
the same branch exists in ovis-hpc/ovis directly but should not.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,218,2020-04-20T20:53:09Z,2020-04-23T15:53:49Z,2020-10-08T19:58:42Z,MERGED,True,47,119,9,https://github.com/nichamon,Pass const char * for the attribute name when creating a JSON_ATTR_VALUE object,2,[],https://github.com/ovis-hpc/ovis/pull/218,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/218,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,218,2020-04-20T20:53:09Z,2020-04-23T15:53:49Z,2020-10-08T19:58:42Z,MERGED,True,47,119,9,https://github.com/nichamon,Pass const char * for the attribute name when creating a JSON_ATTR_VALUE object,2,[],https://github.com/ovis-hpc/ovis/pull/218,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/218#issuecomment-616803371,,@tom95858 I separated the changes in the json_util library and the calls of json_entity_new() into two commits. Please let me know if you want it in one commit so that we can compile all commits.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,219,2020-04-21T01:23:15Z,2020-04-23T15:54:49Z,2020-09-11T03:25:16Z,MERGED,True,3402,1851,33,https://github.com/narategithub,Python3,4,[],https://github.com/ovis-hpc/ovis/pull/219,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/219,"LDMS for Python 3 using Cython
Remove swig
Modify ldmsd_controller to use the Cython-based library (does not touch the in-wire protocol)","LDMS for Python 3 using Cython
Remove swig
Modify ldmsd_controller to use the Cython-based library (does not touch the in-wire protocol)",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,220,2020-04-21T01:24:03Z,2020-04-23T15:54:32Z,2020-09-11T03:25:13Z,MERGED,True,2,1,1,https://github.com/narategithub,Fix papi_sampler set delete,1,[],https://github.com/ovis-hpc/ovis/pull/220,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/220,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,221,2020-04-21T01:24:18Z,2020-04-23T15:55:10Z,2020-09-11T03:24:56Z,MERGED,True,1,1,1,https://github.com/narategithub,daemon_exit command also terminate ldmsd_controller,1,[],https://github.com/ovis-hpc/ovis/pull/221,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/221,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,223,2020-04-23T00:29:20Z,2020-04-23T21:07:30Z,2020-04-23T21:07:30Z,MERGED,True,18,7,9,https://github.com/baallan,add plugins_rpath,2,[],https://github.com/ovis-hpc/ovis/pull/223,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/223,"This adds the plugins_rpath (a generalization of the configure.ac soslibdir variable) to configure and environment scripts. Plugins_rpath can be added to the runtime LD_LIBRARY_PATH to allow resolution of any off-path libraries used by ldms plugins, such as libpapi and libsos.","This adds the plugins_rpath (a generalization of the configure.ac soslibdir variable) to configure and environment scripts. Plugins_rpath can be added to the runtime LD_LIBRARY_PATH to allow resolution of any off-path libraries used by ldms plugins, such as libpapi and libsos.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,223,2020-04-23T00:29:20Z,2020-04-23T21:07:30Z,2020-04-23T21:07:30Z,MERGED,True,18,7,9,https://github.com/baallan,add plugins_rpath,2,[],https://github.com/ovis-hpc/ovis/pull/223,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/223#issuecomment-618482214,"This adds the plugins_rpath (a generalization of the configure.ac soslibdir variable) to configure and environment scripts. Plugins_rpath can be added to the runtime LD_LIBRARY_PATH to allow resolution of any off-path libraries used by ldms plugins, such as libpapi and libsos.",@baallan is this ready to go?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,223,2020-04-23T00:29:20Z,2020-04-23T21:07:30Z,2020-04-23T21:07:30Z,MERGED,True,18,7,9,https://github.com/baallan,add plugins_rpath,2,[],https://github.com/ovis-hpc/ovis/pull/223,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/223#issuecomment-618490665,"This adds the plugins_rpath (a generalization of the configure.ac soslibdir variable) to configure and environment scripts. Plugins_rpath can be added to the runtime LD_LIBRARY_PATH to allow resolution of any off-path libraries used by ldms plugins, such as libpapi and libsos.",@tom95858 yes please. good for squash/merge.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,224,2020-04-23T22:24:10Z,2020-04-23T22:27:35Z,2020-04-23T22:27:35Z,MERGED,True,1,1,1,https://github.com/baallan,fix missing link variable for papi-sampler.,1,[],https://github.com/ovis-hpc/ovis/pull/224,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/224,makefile missing variable added,makefile missing variable added,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,224,2020-04-23T22:24:10Z,2020-04-23T22:27:35Z,2020-04-23T22:27:35Z,MERGED,True,1,1,1,https://github.com/baallan,fix missing link variable for papi-sampler.,1,[],https://github.com/ovis-hpc/ovis/pull/224,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/224#issuecomment-618702828,makefile missing variable added,@tom95858 or @narategithub please review and merge.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,225,2020-04-28T10:28:19Z,2020-04-29T16:37:59Z,2020-09-11T03:24:05Z,MERGED,True,1,3,1,https://github.com/narategithub,zap must not be freed by ldms (potential use-after-free),1,[],https://github.com/ovis-hpc/ovis/pull/225,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/225,"In __ldms_xprt_zap_new(), the zap driver is obtained and is cached
by __ldms_zap_get(); zap_get(); call chain. But, in the error path of
__ldms_xprt_zap_new(), the cached zap driver is freed, leading to
use-after-free for the next call of the same transport type. This patch
modify the error path to not free the cached zap driver.","In __ldms_xprt_zap_new(), the zap driver is obtained and is cached
by __ldms_zap_get(); zap_get(); call chain. But, in the error path of
__ldms_xprt_zap_new(), the cached zap driver is freed, leading to
use-after-free for the next call of the same transport type. This patch
modify the error path to not free the cached zap driver.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,226,2020-04-28T10:28:41Z,2020-04-29T16:38:17Z,2020-09-11T03:24:09Z,MERGED,True,1,3,1,https://github.com/narategithub,zap must not be freed by ldms (potential use-after-free),1,[],https://github.com/ovis-hpc/ovis/pull/226,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/226,"In __ldms_xprt_zap_new(), the zap driver is obtained and is cached
by __ldms_zap_get(); zap_get(); call chain. But, in the error path of
__ldms_xprt_zap_new(), the cached zap driver is freed, leading to
use-after-free for the next call of the same transport type. This patch
modify the error path to not free the cached zap driver.","In __ldms_xprt_zap_new(), the zap driver is obtained and is cached
by __ldms_zap_get(); zap_get(); call chain. But, in the error path of
__ldms_xprt_zap_new(), the cached zap driver is freed, leading to
use-after-free for the next call of the same transport type. This patch
modify the error path to not free the cached zap driver.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,227,2020-04-28T17:14:21Z,2020-04-29T16:53:39Z,2020-04-29T16:53:39Z,MERGED,True,3,5,1,https://github.com/baallan,fix format errors and unused vars in jobinfo_slurm,1,[],https://github.com/ovis-hpc/ovis/pull/227,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/227,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,228,2020-04-28T18:06:26Z,2020-04-29T16:49:56Z,2020-04-29T16:49:56Z,MERGED,True,7,3,1,https://github.com/baallan,fix missing papi linkages,1,[],https://github.com/ovis-hpc/ovis/pull/228,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/228,Adding link flags needed when papi and pfm are not in system paths.,Adding link flags needed when papi and pfm are not in system paths.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,229,2020-04-28T19:06:29Z,2020-04-29T17:15:21Z,2020-04-29T18:04:59Z,MERGED,True,9,6,1,https://github.com/baallan,switch to strtok_r from strtok in procinterrupts sampler,1,[],https://github.com/ovis-hpc/ovis/pull/229,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/229,fix thread safety problem,fix thread safety problem,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,229,2020-04-28T19:06:29Z,2020-04-29T17:15:21Z,2020-04-29T18:04:59Z,MERGED,True,9,6,1,https://github.com/baallan,switch to strtok_r from strtok in procinterrupts sampler,1,[],https://github.com/ovis-hpc/ovis/pull/229,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/229#issuecomment-621332107,fix thread safety problem,@baallan are you seeing an error with this? If this code path is actually multi-threaded it has much bigger problems than strtok.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,229,2020-04-28T19:06:29Z,2020-04-29T17:15:21Z,2020-04-29T18:04:59Z,MERGED,True,9,6,1,https://github.com/baallan,switch to strtok_r from strtok in procinterrupts sampler,1,[],https://github.com/ovis-hpc/ovis/pull/229,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/229#issuecomment-621346944,fix thread safety problem,"Ah, I think I get it. This code isn't multi-threaded, but there are other threads in ldmsd using strtok...",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,229,2020-04-28T19:06:29Z,2020-04-29T17:15:21Z,2020-04-29T18:04:59Z,MERGED,True,9,6,1,https://github.com/baallan,switch to strtok_r from strtok in procinterrupts sampler,1,[],https://github.com/ovis-hpc/ovis/pull/229,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/229#issuecomment-621372775,fix thread safety problem,"@tom95858 yes, there should be no daemon/plugin threads using strtok. We have quite a few instances of main using strtok in option handling which should be ok until something forks/loads a threaded plugin.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,230,2020-04-29T09:39:57Z,2020-04-29T16:37:43Z,2020-09-11T03:24:02Z,MERGED,True,1,1,1,https://github.com/narategithub,Fix `json_entity_new()` call in json_parser,1,[],https://github.com/ovis-hpc/ovis/pull/230,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/230,json_parser was broken by the json_entity_new() API change.,json_parser was broken by the json_entity_new() API change.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,232,2020-04-30T18:49:04Z,2020-05-01T21:43:14Z,2020-09-11T02:48:37Z,MERGED,True,2215,0,7,https://github.com/narategithub,app_sampler and store_app port from v5,1,[],https://github.com/ovis-hpc/ovis/pull/232,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/232,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,233,2020-05-01T04:26:03Z,2020-05-01T21:43:28Z,2020-09-11T02:48:05Z,MERGED,True,361,1,4,https://github.com/narategithub,app_sampler man page,2,[],https://github.com/ovis-hpc/ovis/pull/233,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/233,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,234,2020-05-01T04:26:31Z,2020-05-01T21:42:51Z,2020-09-11T02:47:38Z,MERGED,True,406,1,3,https://github.com/narategithub,(v4) Add app_sampler man page,2,[],https://github.com/ovis-hpc/ovis/pull/234,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/234,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,235,2020-05-05T04:07:37Z,2020-06-21T14:18:32Z,2020-06-21T14:18:32Z,MERGED,True,3,1,1,https://github.com/baallan,add oom check to _create_path ldms.c,1,[],https://github.com/ovis-hpc/ovis/pull/235,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/235,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,236,2020-05-05T04:35:35Z,2020-06-21T14:17:18Z,2020-06-21T14:17:18Z,MERGED,True,40,6,1,https://github.com/baallan,"trap ooms, fix null ptr use, fix localtime thread safety, realloc idiom",1,[],https://github.com/ovis-hpc/ovis/pull/236,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/236,this addresses items that can show up at scale or low memory.,this addresses items that can show up at scale or low memory.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,237,2020-05-05T04:40:01Z,2020-06-25T23:18:00Z,2020-06-25T23:18:01Z,MERGED,True,12,0,1,https://github.com/baallan,fix oom in ldms_ls,1,[],https://github.com/ovis-hpc/ovis/pull/237,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/237,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,237,2020-05-05T04:40:01Z,2020-06-25T23:18:00Z,2020-06-25T23:18:01Z,MERGED,True,12,0,1,https://github.com/baallan,fix oom in ldms_ls,1,[],https://github.com/ovis-hpc/ovis/pull/237,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/237#issuecomment-646940616,,"Hi @baallan, what is the goal here? The command is not multi-threaded, this is not a daemon. Cleaning up memory allocated before failure is code without purpose. This patch simply adds a bunch of code that doesn't actually do anything. Please advise.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,237,2020-05-05T04:40:01Z,2020-06-25T23:18:00Z,2020-06-25T23:18:01Z,MERGED,True,12,0,1,https://github.com/baallan,fix oom in ldms_ls,1,[],https://github.com/ovis-hpc/ovis/pull/237,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/237#issuecomment-648974870,,"Isn't the underlying libldms and xprt multithreaded? We have no reason to assume that localtime isn't in use somewhere that might conflict with the print callback, or won't become so.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,237,2020-05-05T04:40:01Z,2020-06-25T23:18:00Z,2020-06-25T23:18:01Z,MERGED,True,12,0,1,https://github.com/baallan,fix oom in ldms_ls,1,[],https://github.com/ovis-hpc/ovis/pull/237,https://github.com/tom95858,4,https://github.com/ovis-hpc/ovis/pull/237#issuecomment-648992993,,"ldms_ls does not receive asynchronous data from peers. It is not a daemon receiving requests from peers; so yes, we have reason to believe that there is no thread toiling away using localtime and if it were, it would be using the thread-safe version!! The underlying issue here is that we continue to add code to a release vehicle that adds regression risk (however small) and is not fixing any symptomatic problem.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,237,2020-05-05T04:40:01Z,2020-06-25T23:18:00Z,2020-06-25T23:18:01Z,MERGED,True,12,0,1,https://github.com/baallan,fix oom in ldms_ls,1,[],https://github.com/ovis-hpc/ovis/pull/237,https://github.com/baallan,5,https://github.com/ovis-hpc/ovis/pull/237#issuecomment-649000028,,@tom95858 reverted the localtime call change.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,238,2020-05-05T04:48:32Z,2020-06-21T14:41:38Z,2020-06-21T14:41:38Z,MERGED,True,31,5,1,https://github.com/baallan,"fix pointer problems in ldmsd.c (oom, leak, overrun, threadsafe local…",1,[],https://github.com/ovis-hpc/ovis/pull/238,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/238,…time),…time),True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,240,2020-05-05T16:27:13Z,2020-06-21T14:36:09Z,2020-06-21T14:36:09Z,MERGED,True,8,3,1,https://github.com/baallan,fix ldmsd_config leak/init and null pointer checks v4,1,[],https://github.com/ovis-hpc/ovis/pull/240,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/240,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,241,2020-05-05T20:09:06Z,2020-06-24T18:33:45Z,2020-06-24T18:33:45Z,MERGED,True,8,0,1,https://github.com/baallan,add oom checks in prdcr_hint_tree_update v4,1,[],https://github.com/ovis-hpc/ovis/pull/241,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/241,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,242,2020-05-05T20:30:42Z,2020-06-21T15:16:00Z,2020-06-21T15:16:00Z,MERGED,True,13,3,1,https://github.com/baallan,"fix leak, oom, overflow, and fmt errors in ldmsd_request.c v4",1,[],https://github.com/ovis-hpc/ovis/pull/242,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/242,"fixes:
buffer overflow in __greeting_path_resp_handler
missed oom chk in Snprintf, __greeting_path_req_handler
mem leaks in __greeting_path_req_handler
fmt err in __prdcr_set_status","fixes:
buffer overflow in __greeting_path_resp_handler
missed oom chk in Snprintf, __greeting_path_req_handler
mem leaks in __greeting_path_req_handler
fmt err in __prdcr_set_status",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,243,2020-05-05T20:48:10Z,2020-07-09T18:53:49Z,2020-07-09T18:53:49Z,MERGED,True,3,2,1,https://github.com/baallan,fix logic bugs in v4 ldmsd_request_util,1,[],https://github.com/ovis-hpc/ovis/pull/243,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/243,"fixes:
req_str_id_cmp return unsigned is inconsistent with internal computation and use as bsearch function
(given c casting rules, we may be operating correctly in spite of ourselves)
use of uninitilized value in add_attr_from_attr_str main logic leads to buffer overrun
use of uninitilized value in less expected branch of __ldmsd_parse_auth_add_req logic leads to incorrect return","fixes:
req_str_id_cmp return unsigned is inconsistent with internal computation and use as bsearch function
(given c casting rules, we may be operating correctly in spite of ourselves)
use of uninitilized value in add_attr_from_attr_str main logic leads to buffer overrun
use of uninitilized value in less expected branch of __ldmsd_parse_auth_add_req logic leads to incorrect return",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,244,2020-05-05T23:46:16Z,2020-07-14T20:38:01Z,2020-07-14T20:38:01Z,MERGED,True,6,5,1,https://github.com/baallan,fix bugs in ldmsd_stream.c v4,1,[],https://github.com/ovis-hpc/ovis/pull/244,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/244,"missing double free, missing null ptr chk, and redundant typedef,","missing double free, missing null ptr chk, and redundant typedef,",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,245,2020-05-06T00:00:55Z,2020-06-08T19:09:12Z,2020-06-08T19:09:12Z,MERGED,True,6,4,1,https://github.com/baallan,fix bugs in v4 updater,1,[],https://github.com/ovis-hpc/ovis/pull/245,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/245,"uninit variable use in schedule_set_updates
uninit variable use in cancel_prdcr_updates
thread unsafe use after free in __updtr_task_tree_cleanup
null pointer use due to brace mis-style in prdcr_ref_new","uninit variable use in schedule_set_updates
uninit variable use in cancel_prdcr_updates
thread unsafe use after free in __updtr_task_tree_cleanup
null pointer use due to brace mis-style in prdcr_ref_new",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,246,2020-05-06T00:07:33Z,2020-06-08T19:07:24Z,2020-06-08T19:07:24Z,MERGED,True,0,12,2,https://github.com/baallan,remove dead code pasted in cray samplers,1,[],https://github.com/ovis-hpc/ovis/pull/246,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/246,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,247,2020-05-06T15:40:58Z,2020-06-08T19:06:26Z,2020-06-08T19:06:26Z,MERGED,True,1,1,1,https://github.com/baallan,remove unused assignment in zap_sock,1,[],https://github.com/ovis-hpc/ovis/pull/247,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/247,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,248,2020-05-06T15:44:30Z,2020-06-21T14:15:57Z,2020-06-21T14:15:57Z,MERGED,True,8,8,1,https://github.com/baallan,fix error coding in v4 zap_rdma.c,1,[],https://github.com/ovis-hpc/ovis/pull/248,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/248,"fix inconsist error typing in __ep_state_check z_rdma_send z_rdma_share z_rdma_write.
fix incorrect return code in __rdma_post_send (use zap instead of errno code) to get correct error message later.","fix inconsist error typing in __ep_state_check z_rdma_send z_rdma_share z_rdma_write.
fix incorrect return code in __rdma_post_send (use zap instead of errno code) to get correct error message later.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,249,2020-05-06T15:54:05Z,2020-07-09T18:55:38Z,2020-07-09T18:55:38Z,MERGED,True,4,3,1,https://github.com/baallan,v4 olog fix file leak and localtime thread safety.,1,[],https://github.com/ovis-hpc/ovis/pull/249,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/249,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,250,2020-05-06T16:10:52Z,2020-07-14T20:38:51Z,2020-07-14T20:38:52Z,MERGED,True,17,8,2,https://github.com/baallan,fix v4 util.c bugs,1,[],https://github.com/ovis-hpc/ovis/pull/250,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/250,"test_util.c:
missing oom check
util:
str_repl_cmd: missing oom check, uninit var use, pipe leak
ovis_pgrep: directory leak, unused var
ovis_get_mem_size: buffer overrun
_scpy: incorrect nul terminator","test_util.c:
missing oom check
util:
str_repl_cmd: missing oom check, uninit var use, pipe leak
ovis_pgrep: directory leak, unused var
ovis_get_mem_size: buffer overrun
_scpy: incorrect nul terminator",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,251,2020-05-06T16:20:50Z,2020-07-19T20:16:11Z,2020-07-19T20:16:12Z,CLOSED,False,5,4,2,https://github.com/baallan,fix json parser nits,1,[],https://github.com/ovis-hpc/ovis/pull/251,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/251,"json_util.h: ifdef sometimes redundant macro
json_util.c: fix leak from incorrect oom check; clear unused vars.","json_util.h: ifdef sometimes redundant macro
json_util.c: fix leak from incorrect oom check; clear unused vars.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,251,2020-05-06T16:20:50Z,2020-07-19T20:16:11Z,2020-07-19T20:16:12Z,CLOSED,False,5,4,2,https://github.com/baallan,fix json parser nits,1,[],https://github.com/ovis-hpc/ovis/pull/251,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/251#issuecomment-660702109,"json_util.h: ifdef sometimes redundant macro
json_util.c: fix leak from incorrect oom check; clear unused vars.","Hi @baallan, I'm going to close this. Changes coming in ovis_json will resolve this and the yy-prefix on the symbols.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,252,2020-05-06T16:50:31Z,2020-06-19T23:51:58Z,2020-06-19T23:51:58Z,MERGED,True,4,4,1,https://github.com/baallan,use threadsafe localtime in ldms.i v4,1,[],https://github.com/ovis-hpc/ovis/pull/252,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/252,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,253,2020-05-06T17:56:51Z,2020-06-19T23:50:56Z,2020-06-19T23:50:57Z,MERGED,True,18,5,2,https://github.com/baallan,fix v4 lustre_sampler bugs,1,[],https://github.com/ovis-hpc/ovis/pull/253,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/253,"lustre_sampler.h: add unused attribute to stats_key sometimes needed.
lustre_sampler.c: missing oom checks, err path memory leaks, buffer overruns/magic numbers","lustre_sampler.h: add unused attribute to stats_key sometimes needed.
lustre_sampler.c: missing oom checks, err path memory leaks, buffer overruns/magic numbers",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,254,2020-05-06T18:29:33Z,2020-06-19T23:53:15Z,2020-06-19T23:53:15Z,MERGED,True,10,0,3,https://github.com/baallan,fix missing oom checks v4 ,1,[],https://github.com/ovis-hpc/ovis/pull/254,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/254,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,255,2020-05-06T18:35:49Z,2020-07-06T23:49:03Z,2020-07-06T23:49:03Z,MERGED,True,15,12,3,https://github.com/baallan,v4 eliminate magic number buffer sizing and theoretical buffer overflow,1,[],https://github.com/ovis-hpc/ovis/pull/255,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/255,This commit groups 3 files with only magic number induced problem fixes.,This commit groups 3 files with only magic number induced problem fixes.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,255,2020-05-06T18:35:49Z,2020-07-06T23:49:03Z,2020-07-06T23:49:03Z,MERGED,True,15,12,3,https://github.com/baallan,v4 eliminate magic number buffer sizing and theoretical buffer overflow,1,[],https://github.com/ovis-hpc/ovis/pull/255,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/255#issuecomment-654518672,This commit groups 3 files with only magic number induced problem fixes.,"This does not fix any problem afaict. It is purely a stylistic change. I do agree that it is nice to make it easy to change the size of these static buffer allocations with one line of code. But LBUFSZ is no less magical than 255. In fact it is less so, because you have to look up what LBUFSZ means.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,256,2020-05-06T18:38:42Z,2020-06-20T00:08:22Z,2020-06-20T00:08:22Z,MERGED,True,2,3,2,https://github.com/baallan,v4 remove dead code from loadavg.c lustre2_oss.c,1,[],https://github.com/ovis-hpc/ovis/pull/256,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/256,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,257,2020-05-06T18:41:15Z,2020-07-06T23:51:04Z,2020-07-06T23:51:05Z,MERGED,True,29,11,1,https://github.com/baallan,v4 fix bugs in perfevent.c,2,[],https://github.com/ovis-hpc/ovis/pull/257,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/257,"thread unsafe use-after-free
missing oom check
memory leaks
improperly unset return codes
missing include
missing read error check
remove unused vars","thread unsafe use-after-free
missing oom check
memory leaks
improperly unset return codes
missing include
missing read error check
remove unused vars",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,258,2020-05-06T18:47:03Z,2020-07-14T20:41:17Z,2020-07-14T20:41:17Z,MERGED,True,8,1,1,https://github.com/baallan,fix missing oom check and error codes v4 procdiskstats,1,[],https://github.com/ovis-hpc/ovis/pull/258,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/258,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,259,2020-05-06T18:51:04Z,2020-07-06T23:00:46Z,2020-07-06T23:00:46Z,MERGED,True,10,10,1,https://github.com/baallan,V4 store csv bugs fixed,1,[],https://github.com/ovis-hpc/ovis/pull/259,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/259,"thread unsafe localtime usage
mem leak in error path
unused assignment code","thread unsafe localtime usage
mem leak in error path
unused assignment code",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,260,2020-05-06T18:59:22Z,2020-07-06T23:02:02Z,2020-07-06T23:02:03Z,MERGED,True,11,4,1,https://github.com/baallan,fix v4 store_function_csv.c bugs,1,[],https://github.com/ovis-hpc/ovis/pull/260,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/260,"unsafe localtime usage
missing oom check
memory leak in err path
int/unsigned mistyping","unsafe localtime usage
missing oom check
memory leak in err path
int/unsigned mistyping",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,261,2020-05-06T19:15:34Z,2020-07-06T23:01:19Z,2020-07-06T23:01:20Z,MERGED,True,3,0,1,https://github.com/baallan,fix v4 store_csv_common bugs,1,[],https://github.com/ovis-hpc/ovis/pull/261,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/261,"mem leak in error path
missing null pointer check in validate_env","mem leak in error path
missing null pointer check in validate_env",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,262,2020-05-06T19:23:42Z,2020-07-06T22:59:35Z,2020-07-06T22:59:35Z,MERGED,True,44,0,2,https://github.com/baallan,add missing oom checks to v4 stream test/util code.,1,[],https://github.com/ovis-hpc/ovis/pull/262,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/262,need to trap oom so later code doesn't get blamed when testing.,need to trap oom so later code doesn't get blamed when testing.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,263,2020-05-06T19:35:25Z,2020-08-18T21:08:31Z,2020-08-18T21:08:32Z,CLOSED,False,7,7,4,https://github.com/baallan,WIP: review apparent v4 leaks request,1,[],https://github.com/ovis-hpc/ovis/pull/263,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/263,"The files in this commit all have comments containing the string 'leak'
marking places with apparent leaks as noted. Seeking input from the experts.
@tom95858 @narategithub @nichamon since all of these are in/near the control path, please comment whether these apparent leaks are somehow actually not or what a good fix is in each case.","The files in this commit all have comments containing the string 'leak'
marking places with apparent leaks as noted. Seeking input from the experts.
@tom95858 @narategithub @nichamon since all of these are in/near the control path, please comment whether these apparent leaks are somehow actually not or what a good fix is in each case.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,263,2020-05-06T19:35:25Z,2020-08-18T21:08:31Z,2020-08-18T21:08:32Z,CLOSED,False,7,7,4,https://github.com/baallan,WIP: review apparent v4 leaks request,1,[],https://github.com/ovis-hpc/ovis/pull/263,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/263#issuecomment-675721465,"The files in this commit all have comments containing the string 'leak'
marking places with apparent leaks as noted. Seeking input from the experts.
@tom95858 @narategithub @nichamon since all of these are in/near the control path, please comment whether these apparent leaks are somehow actually not or what a good fix is in each case.","Hi @baallan, this is not a code change to be reviewed and approved.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,264,2020-05-06T20:40:01Z,2020-06-20T02:54:34Z,2020-10-08T19:58:38Z,MERGED,True,3,7,1,https://github.com/nichamon,ldms_ls sometimes prints extraneous sets with the -l option,1,[],https://github.com/ovis-hpc/ovis/pull/264,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/264,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,265,2020-05-13T20:42:39Z,2020-07-09T17:31:01Z,2020-07-09T17:31:01Z,CLOSED,False,67,67,29,https://github.com/morrone,Rename json_* files to ovis_json_*,1,[],https://github.com/ovis-hpc/ovis/pull/265,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/265,"Ovis/LDMS's own custom json library name and header conflict with well
known existing json libraries. We change the names from json_* to
ovis_json_* to avoid conflicts.
Fixes #222 for v4","Ovis/LDMS's own custom json library name and header conflict with well
known existing json libraries. We change the names from json_* to
ovis_json_* to avoid conflicts.
Fixes #222 for v4",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,265,2020-05-13T20:42:39Z,2020-07-09T17:31:01Z,2020-07-09T17:31:01Z,CLOSED,False,67,67,29,https://github.com/morrone,Rename json_* files to ovis_json_*,1,[],https://github.com/ovis-hpc/ovis/pull/265,https://github.com/morrone,2,https://github.com/ovis-hpc/ovis/pull/265#issuecomment-639636954,"Ovis/LDMS's own custom json library name and header conflict with well
known existing json libraries. We change the names from json_* to
ovis_json_* to avoid conflicts.
Fixes #222 for v4","FYI, If I don't hear a response this is what will wind up in the TOSS release of LDMS.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,265,2020-05-13T20:42:39Z,2020-07-09T17:31:01Z,2020-07-09T17:31:01Z,CLOSED,False,67,67,29,https://github.com/morrone,Rename json_* files to ovis_json_*,1,[],https://github.com/ovis-hpc/ovis/pull/265,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/265#issuecomment-639657961,"Ovis/LDMS's own custom json library name and header conflict with well
known existing json libraries. We change the names from json_* to
ovis_json_* to avoid conflicts.
Fixes #222 for v4","Hi @morrone ,
To refresh my memory on this ... sorry... the issue is that the TOSS prefix is /usr and therefore the headers that we ship go in /usr/include and for json, that means /usr/include/json for which there is another dev library occupying that space. I seem to recall that an acceptable alternative is to put all of our shipped headers under ovis in which case we would have /usr/include/ovis/json
Is that more palatable than continually renaming our headers when we clash with another library?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,265,2020-05-13T20:42:39Z,2020-07-09T17:31:01Z,2020-07-09T17:31:01Z,CLOSED,False,67,67,29,https://github.com/morrone,Rename json_* files to ovis_json_*,1,[],https://github.com/ovis-hpc/ovis/pull/265,https://github.com/morrone,4,https://github.com/ovis-hpc/ovis/pull/265#issuecomment-639825848,"Ovis/LDMS's own custom json library name and header conflict with well
known existing json libraries. We change the names from json_* to
ovis_json_* to avoid conflicts.
Fixes #222 for v4","/usr is the normal install location on most Linux systems, not just TOSS.
Placing things in the normal public locations (which is what the autotools path macros do by default) should be a careful, conscious choice. We shouldn't just throw every little header or library we concoct there by default.
Headers are part of the problem, but libraries are the other. ""json_util"" is going to be too generic of a name to appear in a library path. It needs to be named something that is less likely to conflict with things that the rest of the world creates.
Yes, putting all of the little headers in an ovis or ldms subdirectory includedir would be good longer term. It might make sense to have a subdirectory in libdir if ovis/lmds is going to have lots of little misc libraries instead of one big well known library. But those libraries still need to be named well to avoid conflicts with the rest of the world, because we can't do ""-lsubdir/libname', we just add library paths and do ""-llibname"" at link time.
I'm fine with the patch I supplied in the short term. But you tell me what is acceptable.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,265,2020-05-13T20:42:39Z,2020-07-09T17:31:01Z,2020-07-09T17:31:01Z,CLOSED,False,67,67,29,https://github.com/morrone,Rename json_* files to ovis_json_*,1,[],https://github.com/ovis-hpc/ovis/pull/265,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/265#issuecomment-639847439,"Ovis/LDMS's own custom json library name and header conflict with well
known existing json libraries. We change the names from json_* to
ovis_json_* to avoid conflicts.
Fixes #222 for v4",Is it a crazy question to ask why you are packaging/installing the development headers on TOSS?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,265,2020-05-13T20:42:39Z,2020-07-09T17:31:01Z,2020-07-09T17:31:01Z,CLOSED,False,67,67,29,https://github.com/morrone,Rename json_* files to ovis_json_*,1,[],https://github.com/ovis-hpc/ovis/pull/265,https://github.com/morrone,6,https://github.com/ovis-hpc/ovis/pull/265#issuecomment-639877652,"Ovis/LDMS's own custom json library name and header conflict with well
known existing json libraries. We change the names from json_* to
ovis_json_* to avoid conflicts.
Fixes #222 for v4","It would be interesting to know what the term ""development headers"" means to you.
Since these headers are installed at ""make install"" time I am packaging them up for installation. They do go in the ovis-ldms-devel subpackage.
In my case, the devel package is needed for the ldms-plugins-llnl package, which contains ldms plugins that are built separately from LDMS. It therefore require the ovs-ldms-devel package to build.
It is a pretty common practice to install the -devel subpackages of many packages.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,265,2020-05-13T20:42:39Z,2020-07-09T17:31:01Z,2020-07-09T17:31:01Z,CLOSED,False,67,67,29,https://github.com/morrone,Rename json_* files to ovis_json_*,1,[],https://github.com/ovis-hpc/ovis/pull/265,https://github.com/tom95858,7,https://github.com/ovis-hpc/ovis/pull/265#issuecomment-646932143,"Ovis/LDMS's own custom json library name and header conflict with well
known existing json libraries. We change the names from json_* to
ovis_json_* to avoid conflicts.
Fixes #222 for v4","Hi @morrone. Sorry, not ignoring you ... obviously, if you have out of tree samplers, they need the development headers. That was the basis of my question. Is there any appetite to just move everything to include/ovis? I'm all in for that. I'm reluctant to do this one library at a time. Anyone else want to weigh in? For whatever reason, I'm adverse to just prepending each API that we find collides with some redhat detritis with ovis_, it's just a bit course and arbitrary.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,265,2020-05-13T20:42:39Z,2020-07-09T17:31:01Z,2020-07-09T17:31:01Z,CLOSED,False,67,67,29,https://github.com/morrone,Rename json_* files to ovis_json_*,1,[],https://github.com/ovis-hpc/ovis/pull/265,https://github.com/morrone,8,https://github.com/ovis-hpc/ovis/pull/265#issuecomment-647625243,"Ovis/LDMS's own custom json library name and header conflict with well
known existing json libraries. We change the names from json_* to
ovis_json_* to avoid conflicts.
Fixes #222 for v4","@tom95858 I don't have a problem with that necessarily. But what about the names for all of the little associated libraries? Those need to be named to not conflict with the rest of the world too. libjson_util really can't be named that and also installed.
And FYI, I'm not currently using ovis's json library in any of my work. It just gets pulled in with everything else that is in the -devel package.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,265,2020-05-13T20:42:39Z,2020-07-09T17:31:01Z,2020-07-09T17:31:01Z,CLOSED,False,67,67,29,https://github.com/morrone,Rename json_* files to ovis_json_*,1,[],https://github.com/ovis-hpc/ovis/pull/265,https://github.com/baallan,9,https://github.com/ovis-hpc/ovis/pull/265#issuecomment-648960446,"Ovis/LDMS's own custom json library name and header conflict with well
known existing json libraries. We change the names from json_* to
ovis_json_* to avoid conflicts.
Fixes #222 for v4","I'd be happy to see a flat (/usr/include/ovis/*.h) header space for installs, such that all external code (and public ovis headers) could be written as '#include ""ovis/ldmsd.h""'. This would also, for build, make us keep all the public headers in the source tree ovis/include instead of scattered everywhere, eliminating any possible confusion about what is public and what is not.
the json library case in particular, being something expect users to link for streaming input apps, needs to have a prefix on non-static functions and needs to have the linker-visible bison/flex functions prefixed as well.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,265,2020-05-13T20:42:39Z,2020-07-09T17:31:01Z,2020-07-09T17:31:01Z,CLOSED,False,67,67,29,https://github.com/morrone,Rename json_* files to ovis_json_*,1,[],https://github.com/ovis-hpc/ovis/pull/265,https://github.com/tom95858,10,https://github.com/ovis-hpc/ovis/pull/265#issuecomment-651884818,"Ovis/LDMS's own custom json library name and header conflict with well
known existing json libraries. We change the names from json_* to
ovis_json_* to avoid conflicts.
Fixes #222 for v4","HI @morrone, could you please check out ef93afa and let me know if this resolves the issue for you?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,265,2020-05-13T20:42:39Z,2020-07-09T17:31:01Z,2020-07-09T17:31:01Z,CLOSED,False,67,67,29,https://github.com/morrone,Rename json_* files to ovis_json_*,1,[],https://github.com/ovis-hpc/ovis/pull/265,https://github.com/morrone,11,https://github.com/ovis-hpc/ovis/pull/265#issuecomment-651952434,"Ovis/LDMS's own custom json library name and header conflict with well
known existing json libraries. We change the names from json_* to
ovis_json_* to avoid conflicts.
Fixes #222 for v4","That looks like a step in the right direction, but it does not entirely address the problem. The main problem is that it does not appear to address the library naming issues.
Also, I might prefer to see fewer subdirectories under the ovis includedir. For instance, this patch leaves us with:
%(includedir)/ovis/json/json_util.h
Can we perhaps instead make that just the following?
%(includedir)/ovis/json_util.h",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,265,2020-05-13T20:42:39Z,2020-07-09T17:31:01Z,2020-07-09T17:31:01Z,CLOSED,False,67,67,29,https://github.com/morrone,Rename json_* files to ovis_json_*,1,[],https://github.com/ovis-hpc/ovis/pull/265,https://github.com/tom95858,12,https://github.com/ovis-hpc/ovis/pull/265#issuecomment-651969728,"Ovis/LDMS's own custom json library name and header conflict with well
known existing json libraries. We change the names from json_* to
ovis_json_* to avoid conflicts.
Fixes #222 for v4","Do you want to put everything under %{libdir}/ovis?
I have no issue removing the json prefix, but I was trying to make the patch initially as small as possible.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,265,2020-05-13T20:42:39Z,2020-07-09T17:31:01Z,2020-07-09T17:31:01Z,CLOSED,False,67,67,29,https://github.com/morrone,Rename json_* files to ovis_json_*,1,[],https://github.com/ovis-hpc/ovis/pull/265,https://github.com/baallan,13,https://github.com/ovis-hpc/ovis/pull/265#issuecomment-651979083,"Ovis/LDMS's own custom json library name and header conflict with well
known existing json libraries. We change the names from json_* to
ovis_json_* to avoid conflicts.
Fixes #222 for v4","Obviously not compatible with 'small as possible' patching, the existing ldms header has a symbol conflicting with json_glib: json_parser_new. If we want ldms libraries to be widely compatible with complex hpc apps, we need to protect our json function namespace with a prefix. This will get much harder to do if we wait until later when massive ldmsd stream infrastructure gets built up dependent on json.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,265,2020-05-13T20:42:39Z,2020-07-09T17:31:01Z,2020-07-09T17:31:01Z,CLOSED,False,67,67,29,https://github.com/morrone,Rename json_* files to ovis_json_*,1,[],https://github.com/ovis-hpc/ovis/pull/265,https://github.com/morrone,14,https://github.com/ovis-hpc/ovis/pull/265#issuecomment-652028064,"Ovis/LDMS's own custom json library name and header conflict with well
known existing json libraries. We change the names from json_* to
ovis_json_* to avoid conflicts.
Fixes #222 for v4","Do you want to put everything under %{libdir}/ovis?
I have no issue removing the json prefix, but I was trying to make the patch initially as small as possible.

Unfortunately, no. As I tried to explain before, that does not solve the problem with libraries. If you put them under ${libdir}/ovis, then people need to add ""-L%{libdir}/ovis"" to their command line but the library linkage is still ""-ljson_util"". So the names must be reasonably unique for the libraries. Subdirectories do not address the problem.
You could also place them in subdirecotries, but then we probably want to explicitly include that subdirectory in the global search path by adding a file to /etc/ld.so.conf.d/ovis.conf. But that would merely be organizational. It does nothing to solve the problem of library names conflicting. The libraries must be named correctly to avoid conflicts (a prefix like ovis_ or ldms_ would be sufficient).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,265,2020-05-13T20:42:39Z,2020-07-09T17:31:01Z,2020-07-09T17:31:01Z,CLOSED,False,67,67,29,https://github.com/morrone,Rename json_* files to ovis_json_*,1,[],https://github.com/ovis-hpc/ovis/pull/265,https://github.com/morrone,15,https://github.com/ovis-hpc/ovis/pull/265#issuecomment-652029364,"Ovis/LDMS's own custom json library name and header conflict with well
known existing json libraries. We change the names from json_* to
ovis_json_* to avoid conflicts.
Fixes #222 for v4","I have no issue removing the json prefix, but I was trying to make the patch initially as small as possible.

About this. We are going to force anyone using these paths to change their code, so it would be nice to do that as few times as necessary. I don't think they'll care as much about how many characters change each time as they will about how many times we make them adapt.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,265,2020-05-13T20:42:39Z,2020-07-09T17:31:01Z,2020-07-09T17:31:01Z,CLOSED,False,67,67,29,https://github.com/morrone,Rename json_* files to ovis_json_*,1,[],https://github.com/ovis-hpc/ovis/pull/265,https://github.com/baallan,16,https://github.com/ovis-hpc/ovis/pull/265#issuecomment-652039099,"Ovis/LDMS's own custom json library name and header conflict with well
known existing json libraries. We change the names from json_* to
ovis_json_* to avoid conflicts.
Fixes #222 for v4","libjson_util from us should be renamed libovis_json or libldms_json. Or if ldms is becoming inoperable without json parsing, merge it into the libldms or libldms_utils-- along the lines of @morrone 's idea to reduce the proliferation of microlibraries that always end up linked as the same tuple.
Doing anything which injects ldms-related values into /etc/ld.so.conf.d/*.conf is just a painfully wrong way to go (as has been proved over and over with cray ldms development at snl). In hpc (at least until a world of 100% containerized apps and system services), /etc/ld.so.conf.d/ is just a horrible idea.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,265,2020-05-13T20:42:39Z,2020-07-09T17:31:01Z,2020-07-09T17:31:01Z,CLOSED,False,67,67,29,https://github.com/morrone,Rename json_* files to ovis_json_*,1,[],https://github.com/ovis-hpc/ovis/pull/265,https://github.com/tom95858,17,https://github.com/ovis-hpc/ovis/pull/265#issuecomment-652057836,"Ovis/LDMS's own custom json library name and header conflict with well
known existing json libraries. We change the names from json_* to
ovis_json_* to avoid conflicts.
Fixes #222 for v4","Hi @morrone and @baallan, I think we need to table this discussion and get the direct file collision issues solved first.
Here's why:


There are at least a half-dozen exports of malloc on any redhat system; and dozens on a typical Cray system with modules; IOW, I reject the conjecture that our function names must be globally unique.


The libraries that we do export are not well structured. Let's fix that 1st. We should not have libmmalloc, libcoll, libutil, libthis, libthat, and libthis-other-thing just because we can. Let's examine the reasonable use cases and restructure these libraries before we have a bunch of external code with dependent makefiles linking to them.


I think this is a good topic for the LDMS UG meeting.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,265,2020-05-13T20:42:39Z,2020-07-09T17:31:01Z,2020-07-09T17:31:01Z,CLOSED,False,67,67,29,https://github.com/morrone,Rename json_* files to ovis_json_*,1,[],https://github.com/ovis-hpc/ovis/pull/265,https://github.com/morrone,18,https://github.com/ovis-hpc/ovis/pull/265#issuecomment-652085260,"Ovis/LDMS's own custom json library name and header conflict with well
known existing json libraries. We change the names from json_* to
ovis_json_* to avoid conflicts.
Fixes #222 for v4","There are at least a half-dozen exports of malloc on any redhat system; and dozens on a typical Cray system with modules; IOW, I reject the conjecture that our function names must be globally unique.


I reject your rejection. :) I think you may be picking a special case that doesn't really apply here. Sure, there have been many different malloc implementations, but by and large users are explicitly expected to choose only one malloc at a time, or the mallocs are implements as wrappers or intercepts (LD_PRELOAD, etc.) which will also not cause conflicts.
In the case of ovis's json library, we should almost certainly use names that won't conflict with other json implementations. It is not terribly reasonable to assume that your reinvention of the json library is the one that all coders will want to use. Many people may choose to use more well known existing json libraries, and that should be permitted. If you are not careful with your json function naming, it is pretty easy to create unintentional conflicts.
The same argument likely applies to many other functions exported by ovis and ldms libraries.


The libraries that we do export are not well structured. Let's fix that 1st. We should not have libmmalloc, libcoll, libutil, libthis, libthat, and libthis-other-thing just because we can. Let's examine the reasonable use cases and restructure these libraries before we have a bunch of external code with dependent makefiles linking to them.


I completely agree with you there. I've raised exactly that concern in other tickets in the past.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,265,2020-05-13T20:42:39Z,2020-07-09T17:31:01Z,2020-07-09T17:31:01Z,CLOSED,False,67,67,29,https://github.com/morrone,Rename json_* files to ovis_json_*,1,[],https://github.com/ovis-hpc/ovis/pull/265,https://github.com/tom95858,19,https://github.com/ovis-hpc/ovis/pull/265#issuecomment-652153092,"Ovis/LDMS's own custom json library name and header conflict with well
known existing json libraries. We change the names from json_* to
ovis_json_* to avoid conflicts.
Fixes #222 for v4","Hi @morrone,
Ok, I think your criticism  of my example is completely fair and valid. But my point (which I admit I didn't state clearly) is that the maintenance of a globally unique namespace of library function names is not something that we should attempt to do.
There is a reason the -L flag exists. This issue has existed forever and it's not going to get solved by renaming json_biffle to ovis_json_biffle.  On the face it seems obvious, but at the limit it's an unending problem.
I think that we should partition our namespace such that -L and -I can scope our API names in a way that is in conformance with accepted practice. What I'm adverse to is renaming our API because there are one or more OSS libraries that provide similar functionality and have one or more common names. That is a never ending maintenance nightmare that we will never win.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,265,2020-05-13T20:42:39Z,2020-07-09T17:31:01Z,2020-07-09T17:31:01Z,CLOSED,False,67,67,29,https://github.com/morrone,Rename json_* files to ovis_json_*,1,[],https://github.com/ovis-hpc/ovis/pull/265,https://github.com/morrone,20,https://github.com/ovis-hpc/ovis/pull/265#issuecomment-652224220,"Ovis/LDMS's own custom json library name and header conflict with well
known existing json libraries. We change the names from json_* to
ovis_json_* to avoid conflicts.
Fixes #222 for v4","I think that we should partition our namespace such that -L and -I can scope our API names in a way that is in conformance with accepted practice. What I'm adverse to is renaming our API because there are one or more OSS libraries that provide similar functionality and have one or more common names. That is a never ending maintenance nightmare that we will never win.

-L and -l are not scoping tools. You are going to have to expand on what you are thinking there, but I think they may not do what you are thinking they do.
What I'm proposing with using a common prefix for any of the externally exported function (it is only exported functions that matter here, the internal functions can still be named anything you like) is, to the best of my knowledge, exactly what the accepted practice is.
Adding the project name or some other relatively unique prefix to the function names is what many, many, many projects do. It isn't a never ending maintenance nightmare either. It is simple and straight forward.
You have perhaps heard of glib, one of the base libraries for gnome? The exported functions pretty much all start with ""glib_"". 0mq uses ""zmq_"" as the prefix. HDF5 uses ""H5_"". I think that if you take a stroll through the C language headers in /usr/include, you will find that this has been the accepted practice for decades for libraries and functions outside of the standard C libs.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,265,2020-05-13T20:42:39Z,2020-07-09T17:31:01Z,2020-07-09T17:31:01Z,CLOSED,False,67,67,29,https://github.com/morrone,Rename json_* files to ovis_json_*,1,[],https://github.com/ovis-hpc/ovis/pull/265,https://github.com/tom95858,21,https://github.com/ovis-hpc/ovis/pull/265#issuecomment-652518456,"Ovis/LDMS's own custom json library name and header conflict with well
known existing json libraries. We change the names from json_* to
ovis_json_* to avoid conflicts.
Fixes #222 for v4","@morrone,  this is exactly and precisely what we did, what is your point here? The problem is that other libraries used the same prefix, in this case json. Your suggestion to ""fix this"" is to simply pick a different prefix. I am pointing out:

sooner or later the prefix will collide with some other obscure library
we can defer picking this prefix for a bit if the current clear and present danger has been mitigated
no one but us uses these libraries and anyone who wants to use them has to modify their build to do so,
there are already many many API collisions that are managed using build flags

Please don't go down the ldconfig/LD_LIBRARY_PATH road, yes, I am aware that with sufficient energy expelled some poor energetic soul can get themselves into trouble.
I'll review the -L and -l implementation in my AIX source to see if I can recall what they do; I wrote that code a very long time ago and memories fade.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,265,2020-05-13T20:42:39Z,2020-07-09T17:31:01Z,2020-07-09T17:31:01Z,CLOSED,False,67,67,29,https://github.com/morrone,Rename json_* files to ovis_json_*,1,[],https://github.com/ovis-hpc/ovis/pull/265,https://github.com/baallan,22,https://github.com/ovis-hpc/ovis/pull/265#issuecomment-652524313,"Ovis/LDMS's own custom json library name and header conflict with well
known existing json libraries. We change the names from json_* to
ovis_json_* to avoid conflicts.
Fixes #222 for v4","@morrone is correct that given the Linux-provider installed libraries with prior claim on the prefix, specifically in the case of json,  we should never have created or merged a utility library with conflicting json-prefixed symbols. Practically speaking, ldms will always lose/be left out of applications if linking ldms facilities requires a conflict with the application's larger JSON-configuration environment. That's like us creating a new 'fopen' definition and saying its the application developer's problem.
We already have an ldms* prefix on most of the public api-- this discussion is taking way more time than it should have.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,265,2020-05-13T20:42:39Z,2020-07-09T17:31:01Z,2020-07-09T17:31:01Z,CLOSED,False,67,67,29,https://github.com/morrone,Rename json_* files to ovis_json_*,1,[],https://github.com/ovis-hpc/ovis/pull/265,https://github.com/tom95858,23,https://github.com/ovis-hpc/ovis/pull/265#issuecomment-652594755,"Ovis/LDMS's own custom json library name and header conflict with well
known existing json libraries. We change the names from json_* to
ovis_json_* to avoid conflicts.
Fixes #222 for v4","@ballan, @morrone, fopen doesn't have a prefix. It's a bad example, just like my malloc example. But I agree, this exchange is changing no one's mind but causing people to dig in.
So let's just get to it. Here are the libraries and their current API prefix(es):
The libraries in ovis-ldms, are not meant to be linked with, they are only loaded with dlopen, so I think we can ignore those for the moment?
These are the misbehaving libraries:


libjson_util.so

json_



libldms_store_csv_common.so

ch_
close_
creat_
csv_
parse_
print_
rename_
replace_



libovis_third.so

b62_
base62_
CityHash
WeakHash



libcoll.so

str_
hent_
rbt_
fnv_
idx_
ovis_



libovis_util.so

av_
dstr, dstr_
f_
ol, ol_
ovis_
str_
various API with no prefix, not sure they could not be static



These seem reasonable, but so did ""json_""

libmmalloc.so

mm_


libzap.so

zap_


libovis_auth.so

ovis_auth_


ldmsd_plugattr.so

ldmsd_plugattr_


libldms.so

ldms_


libldmsd_stream.so

ldmsd_


libldmsd_request.so

ldmsd_
req_, probably a missing 'static'



I'll make my proposal one more time:

move all of this out of %{libdir} and into %{libdir}/ovis
rename the libjson_util library to libovis_json
change the prefix to ovis_json_
at our leisure change the remaining libraries as/if necessary.

@baallan, @morrone, your proposal is that colliding API are unacceptable and irresponsible and therefore,

prefix everything with ovis_
update all the call-sites

Is that correct?
I believe that since my proposal is a subset of yours, it is not in conflict, agreed?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,265,2020-05-13T20:42:39Z,2020-07-09T17:31:01Z,2020-07-09T17:31:01Z,CLOSED,False,67,67,29,https://github.com/morrone,Rename json_* files to ovis_json_*,1,[],https://github.com/ovis-hpc/ovis/pull/265,https://github.com/morrone,24,https://github.com/ovis-hpc/ovis/pull/265#issuecomment-652617789,"Ovis/LDMS's own custom json library name and header conflict with well
known existing json libraries. We change the names from json_* to
ovis_json_* to avoid conflicts.
Fixes #222 for v4","@morrone, this is exactly and precisely what we did, what is your point here? The problem is that other libraries used the same prefix, in this case json. Your suggestion to ""fix this"" is to simply pick a different prefix. I am pointing out:

ovis/lmds chose twenty different prefixes, not just one. Some (many?) of them were chosen with seemingly little thought to how they might interact with things outside of ovis. ""json"" is a standard that came long before ovis, and it has been implemented in dozens of libraries. Therefore ""json"" has a fairly high likelihood to conflict with other things. ""ovis"" is much more unique, and less likely to conflict.


sooner or later the prefix will collide with some other obscure library


Just because we can't avoid 100% of the conflicts, it doesn't mean that we should give up on avoiding 99.9% of the conflicts. We can absolutely, and with not too much effort avoid 99.9% of the conflicts.


we can defer picking this prefix for a bit if the current clear and present danger has been mitigated
no one but us uses these libraries and anyone who wants to use them has to modify their build to do so,


I like to suggest that this thinking is how ovis got into trouble in the first place. If the attitude is that no one but us internal to the project should ever use a function, then it should not appear in externally published headers and libaries.
Any time a function is published (by putting it into an installed header and having the symbol exported in an installed library), then we must adopt the attitude that this function is no longer just ""for us"". Anyone wanting to interact with LDMS for any reason (some of which we will not yet have forseen) may do so. It is part of the social contract to choose good names for the things we publish for external use.
I sense that maybe you come from using higher level languages than C? Perhaps where they offer greater namespacing capabilities? I can certainly sympathize with your frustration, but C just doesn't have those things. What we're suggesting really is the standard practice.
You mention ""fopen"", but I don't really think that serves as a counter example. I already stated that the C standard library does not follow this common rule. This applies to libraries other than the standard C library. The standard C library preceded everything else. It gets to just use what ever name it likes. It is all the other libraries that need to avoid collisions.


there are already many many API collisions that are managed using build flags


Yes, when people don't choose good naming for public interfaces, it becomes unavoidable to do things like that. But it is always more work to do that than to simply make good naming choices and avoid 99.9% of the problems in the first place.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,265,2020-05-13T20:42:39Z,2020-07-09T17:31:01Z,2020-07-09T17:31:01Z,CLOSED,False,67,67,29,https://github.com/morrone,Rename json_* files to ovis_json_*,1,[],https://github.com/ovis-hpc/ovis/pull/265,https://github.com/baallan,25,https://github.com/ovis-hpc/ovis/pull/265#issuecomment-652621623,"Ovis/LDMS's own custom json library name and header conflict with well
known existing json libraries. We change the names from json_* to
ovis_json_* to avoid conflicts.
Fixes #222 for v4","I think we have the right layout (lib is %libdir and plugin is %pkglibdir) for linking libraries already, we just need to get the apis clean.
I think we can reduce the cleanup work if we think a little carefully about the several APIs, and which of those impact the linking of third party applications vs linking of plugins. @tom95858 can probably point out a few more, but I think our public interfaces are these:

transport plugins
sampler plugins
store plugins
streams pub/sub api used by other applications to inject data
shm sampler mailbox api

IMO, only the streams and shm apis (and any functions they expose at link) need to be linker-clean/prefixed; our 'messy' libraries used by plugins only we dynamically load are not of much concern. Thus I've never complained much about av_ or mm_ or other misc functions from coll/ and third/ being overly careful in prefix or library naming.
The ldms json library seems to be an integral part of the streams api, so it needs to play nice with any application anywhere that wants to emit an ldms json stream and already uses its own json prejudices for other functionality. I can easily picture:

an arbitrary 3rd party periodic (non-streaming) sampler plugin parsing some other json format file with their own json parser and then reporting data as an ldms_set just like meminfo.
an arbitrary 3rd party store using its own json library for its own devious store purposes.

So the ldms json library also needs to play nice with any plugin that uses its own json parser or its own json emitter.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,265,2020-05-13T20:42:39Z,2020-07-09T17:31:01Z,2020-07-09T17:31:01Z,CLOSED,False,67,67,29,https://github.com/morrone,Rename json_* files to ovis_json_*,1,[],https://github.com/ovis-hpc/ovis/pull/265,https://github.com/morrone,26,https://github.com/ovis-hpc/ovis/pull/265#issuecomment-652621995,"Ovis/LDMS's own custom json library name and header conflict with well
known existing json libraries. We change the names from json_* to
ovis_json_* to avoid conflicts.
Fixes #222 for v4","@tom95858

I'll make my proposal one more time:

move all of this out of %{libdir} and into %{libdir}/ovis


What does that achieve? I am not opposed to it, but I want to make sure that you don't think it is anything more than an organizational change. There is no scoping introduced by this.  And if you do that, then we will want to have an entry in /etc/ld.so.conf.d to include that path in the library search path.


rename the libjson_util library to libovis_json


Sounds great.


change the prefix to ovis_json_


On function names, I presume. Sounds good too.


at our leisure change the remaining libraries as/if necessary.

@baallan, @morrone, your proposal is that colliding API are unacceptable and irresponsible and therefore,

prefix everything with ovis_


I would say ldms_ where that makes sense, and ovis_ where that makes sense. I still don't know if you guys plan to separate ""ovis"" out into a separate package from ldms or not.


update all the call-sites

Is that correct?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,265,2020-05-13T20:42:39Z,2020-07-09T17:31:01Z,2020-07-09T17:31:01Z,CLOSED,False,67,67,29,https://github.com/morrone,Rename json_* files to ovis_json_*,1,[],https://github.com/ovis-hpc/ovis/pull/265,https://github.com/tom95858,27,https://github.com/ovis-hpc/ovis/pull/265#issuecomment-652653951,"Ovis/LDMS's own custom json library name and header conflict with well
known existing json libraries. We change the names from json_* to
ovis_json_* to avoid conflicts.
Fixes #222 for v4","On Wed, Jul 1, 2020 at 2:09 PM Christopher J. Morrone < ***@***.***> wrote:
 @tom95858 <https://github.com/tom95858>

 I'll make my proposal one more time:

    - move *all* of this out of %{libdir} and into %{libdir}/ovis

 What does that achieve? I am not opposed to it, but I want to make sure
 that you don't think it is anything more than an organizational change.
 There is no scoping introduced by this.

I prefer not to walk back down that rabbit hole about whether or not the
directory name, library name, and API prefix are part of the ""namespace"" or
not. I see this whole mess as an artifact of Redhat's relocatable RPM
advice which states that you should remove all of the RPATH information
from your libraries and executables. I don't want to litigate this policy
here, I just want to create software that you can use.
 And if you do that, then we will want to have an entry in
 /etc/ld.so.conf.d to include that path in the library search path.

I _think_ you assume that everyone sets --prefix to /usr/local, or some
other path already in ld.so.conf.d. The installs in /opt/ovis already
needed to do this or set LD_LIBRARY_PATH in the systemctl xxx.env file.

Our namespace slopiness was exposed largely by the use-case where --prefix
is set to /usr/local. Please don't think that I'm saying the problem is the
use-case, I'm not.

All of that said, the rationale for the subdirectory is that it will reduce
the likelihood for library name collisions. Not the API, but libraries
themselves. I understand and agree that it's a reasonable/necessary goal to
avoid library naming collisions when the RPATH information is not there,
but without letting this discussion devolve again, IMO in the general case,
it's a practical impossibility. Thus putting them all under %{libdir}/ovis
makes the library name collision that much less likely.

That said, I think @baallan said that LLNL required that the ""system
libraries"" be installed in /usr/local or some other path already in
ld.so.conf.d. Is this still the case?

I'll defer the move of the libraries for now...

    - rename the libjson_util library to libovis_json

 Sounds great.

Done.
    - change the prefix to ovis_json_

 On function names, I presume. Sounds good too.

Yes,
    - at our leisure change the remaining libraries as/if necessary.

 @baallan <https://github.com/baallan>, @morrone
 <https://github.com/morrone>, your proposal is that colliding API are
 unacceptable and irresponsible and therefore,

    - prefix everything with ovis_

 I would say ldms_ where that makes sense, and ovis_ where that makes
 sense. I still don't know if you guys plan to separate ""ovis"" out into a
 separate package from ldms or not.

I would like to make the renaming of the remaining API part of the collapse
of the libraries into a more reasonable and smaller subset of surviving
libraries.

BTW, I'm sure you know, but LDMS is an acronym that means ""Lightweight
Distributed Metric Service"" which refers to the protocol that underlies the
communication between the daemons. OVIS refers to the software ""suite"", but
people seem to refer to them as one and the same; and in practical terms
they are one and the same, LDMS cannot be separated from OVIS.
…
    - update all the call-sites

 Is that correct?

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#265 (comment)>, or
 unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ABVTPXDXOP37SYJV6AEW2ETRZOJWZANCNFSM4NADHCWQ>
 .


-- 
Thomas Tucker, President, Open Grid Computing, Inc.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,265,2020-05-13T20:42:39Z,2020-07-09T17:31:01Z,2020-07-09T17:31:01Z,CLOSED,False,67,67,29,https://github.com/morrone,Rename json_* files to ovis_json_*,1,[],https://github.com/ovis-hpc/ovis/pull/265,https://github.com/morrone,28,https://github.com/ovis-hpc/ovis/pull/265#issuecomment-652698974,"Ovis/LDMS's own custom json library name and header conflict with well
known existing json libraries. We change the names from json_* to
ovis_json_* to avoid conflicts.
Fixes #222 for v4","And if you do that, then we will want to have an entry in /etc/ld.so.conf.d to include that path in the library search path.
I think you assume that everyone sets --prefix to /usr/local, or some other path already in ld.so.conf.d. The installs in

I have not assumed that, no. We do not set --prefix to /usr/local. We have a default %{prefix} value of /usr, which is, in point of fact, exactly in line with the Linux Standard Base's Filesystem Hierarchy Standard. Sure, you can use /opt too, in which case nothing in that directory will appear in standard paths, and everything must be added through various mechanisms. But /opt is not how Linux distros tend to do things by default. And I would hope that on a system using /opt/ as an install location, they they would still adopt ways to put each package's parts in the standard bin and lib search paths. The way to do that is often to have additinal files or symlinks from paths like /opt/bin and /opt/lib to the respective locations under the /opt/<package_name> locations. Granted, not everyone follows through on that.
Please forgive me if I missed the connection, but you might be overthinking things now because all of this is the same under Debian and Ubuntu which has no need to follow RH's rpath decisions.
The ld command has a number of standard paths compiled right in to its internal SEARCH_DIR path. Amongst those default directories on Linux systems of any flavor are usually: /lib, /usr/lib, and /usr/local/lib. There is no need for custom entries in  /etc/ld.so.conf.d/ if these standard locations are used for installed software.
So I didn't assume that no other install methods exist. I was merely pointing out that the standard Linux install locations do not require this extra library path lookup. Moving the libraries into a subdirectory will require an /etc/ld.so.conf.d on all systems where we want the libraries to appear in the standard search paths. That is a change. Currently they are only needed on the systems that use somewhat less standard install locations, and in those situations the extra path configurations are expected.

All of that said, the rationale for the subdirectory is that it will reduce the likelihood for library name collisions.

Let me try to break down my concern a bit.
Lets say there are two libraries named ""libfoo.so"".  One is in the default ld SEARCH_DIR path, so when I want to link against that I just do ""-lfoo"". There is no need for the ""-L"" to add an additional path. The second  is ovis's own ""libfoo.so"" that ovis places in a subdirectory of its library base path.  Lets say this is /usr/lib/ovis/libfoo.so. Assuming there are no extra entries in /etc/ld.so.conf.d, I would need two ld command line options to link against that: ""-L/usr/lib/ovis"" and ""-lfoo"".
So how do I link against them both at the same time? I can't using normal means. Both are simply ""-lfoo"", and it doesn't much matter to linker which directory they are in. It simply walks its directory search path and stops when it finds the first library that satisfies the ""-lfoo"" requirement. ""-l"" does not represent a hierarchical namespace; it is completely flat.
Having a subdirectory didn't avoid conflict in this case.
Maybe you have only been thinking about conflicting at install time? I suppose it does avoid the one conflict at file install time. There are other conflicts to consider beyond install time. Compile time is perhaps the more significant conflict with which we need to be concerned.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,265,2020-05-13T20:42:39Z,2020-07-09T17:31:01Z,2020-07-09T17:31:01Z,CLOSED,False,67,67,29,https://github.com/morrone,Rename json_* files to ovis_json_*,1,[],https://github.com/ovis-hpc/ovis/pull/265,https://github.com/morrone,29,https://github.com/ovis-hpc/ovis/pull/265#issuecomment-656256327,"Ovis/LDMS's own custom json library name and header conflict with well
known existing json libraries. We change the names from json_* to
ovis_json_* to avoid conflicts.
Fixes #222 for v4",Alternate version landed to OVIS-4 in a94eb6b,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,266,2020-05-13T20:43:15Z,2020-06-20T03:01:18Z,2020-06-20T03:01:19Z,MERGED,True,0,514,3,https://github.com/morrone,Remove obsolete .spec files from the tree,1,[],https://github.com/ovis-hpc/ovis/pull/266,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/266,"The two spec files ldms/ldms.spec.in and lib/ovis-lib.spec.in are
obsolete and no longer functional as of the recent merge of configure
files into the top-level configure script. (Possibly they were
broken before that though.)
We remove them.","The two spec files ldms/ldms.spec.in and lib/ovis-lib.spec.in are
obsolete and no longer functional as of the recent merge of configure
files into the top-level configure script. (Possibly they were
broken before that though.)
We remove them.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,267,2020-05-13T23:26:34Z,2020-07-14T20:37:01Z,2020-07-14T20:37:01Z,MERGED,True,239,1,4,https://github.com/morrone,Implement git-version-gen for ldms versioning,1,[],https://github.com/ovis-hpc/ovis/pull/267,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/267,"Implement git-version-gen for ldms versioning. The git-version-gen
script comes from the autoconf git repository at commit 8a09003
in build-aux/git-gersion-gen.
The LDMS project just needs to begin using annotated tags for its
version tags to work with this change. Right now the version will
show as ""UNKNOWN"" until an annotated tag is created at a previous
version.
The project will also need to decide on a consistent version prefix
Right now this patch assumes that the version prefix is ""OVIS-"".
For testing purposes, the author made an annotated tag like so:
$ git tag -a OVIS-4.3.3.0test OVIS-4.3.3 -m ""Test tag""
With that tag in place, we test that things are working by
running:
$ sh autogen.sh
[...]
$ ./configure --version
ovis-ldms configure 4.3.3.0test.79-6422
generated by GNU Autoconf 2.69
We can see that the current commit ""6422"" is 79 commits ahead of the
4.3.3.0test tag.
Further we can test that the dist tarball is created successfully:
$ ./configure
[...]
$ make dist
$ ls ovis-ldms-*.tar.gz
ovis-ldms-4.3.3.0test.79-6422.tar.gz
And if we unpack that tarball somewhere and verify the version within,
we see:
/tmp/ovis-ldms-4.3.3.0test.79-6422$ ./configure --version
ovis-ldms configure 4.3.3.0test.79-6422
generated by GNU Autoconf 2.69
The patch author recommends that the Ovis ldms project force push
a replacement of the OVIS-4.3.3 tag with one that has the same name,
but is an annotated tag.
Fixes #95","Implement git-version-gen for ldms versioning. The git-version-gen
script comes from the autoconf git repository at commit 8a09003
in build-aux/git-gersion-gen.
The LDMS project just needs to begin using annotated tags for its
version tags to work with this change. Right now the version will
show as ""UNKNOWN"" until an annotated tag is created at a previous
version.
The project will also need to decide on a consistent version prefix
Right now this patch assumes that the version prefix is ""OVIS-"".
For testing purposes, the author made an annotated tag like so:
$ git tag -a OVIS-4.3.3.0test OVIS-4.3.3 -m ""Test tag""
With that tag in place, we test that things are working by
running:
$ sh autogen.sh
[...]
$ ./configure --version
ovis-ldms configure 4.3.3.0test.79-6422
generated by GNU Autoconf 2.69
We can see that the current commit ""6422"" is 79 commits ahead of the
4.3.3.0test tag.
Further we can test that the dist tarball is created successfully:
$ ./configure
[...]
$ make dist
$ ls ovis-ldms-*.tar.gz
ovis-ldms-4.3.3.0test.79-6422.tar.gz
And if we unpack that tarball somewhere and verify the version within,
we see:
/tmp/ovis-ldms-4.3.3.0test.79-6422$ ./configure --version
ovis-ldms configure 4.3.3.0test.79-6422
generated by GNU Autoconf 2.69
The patch author recommends that the Ovis ldms project force push
a replacement of the OVIS-4.3.3 tag with one that has the same name,
but is an annotated tag.
Fixes #95",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,268,2020-05-19T18:50:25Z,2020-06-21T14:14:47Z,2020-06-21T14:14:48Z,MERGED,True,75,45,2,https://github.com/baallan,add base_auth_parse to allow samplers to use standard uid/gid/perm,1,[],https://github.com/ovis-hpc/ovis/pull/268,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/268,"Parsing and checking uid/gid/perm is complicated enough that every
sampler should be able to use it without cloning code or being forced to use the
base schema jobid/compid/appid logic. This factors out the security
config parsing into a function and then calls it from the base_config
function.
I have a network sampler coming that needs this.","Parsing and checking uid/gid/perm is complicated enough that every
sampler should be able to use it without cloning code or being forced to use the
base schema jobid/compid/appid logic. This factors out the security
config parsing into a function and then calls it from the base_config
function.
I have a network sampler coming that needs this.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,268,2020-05-19T18:50:25Z,2020-06-21T14:14:47Z,2020-06-21T14:14:48Z,MERGED,True,75,45,2,https://github.com/baallan,add base_auth_parse to allow samplers to use standard uid/gid/perm,1,[],https://github.com/ovis-hpc/ovis/pull/268,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/268#issuecomment-631040869,"Parsing and checking uid/gid/perm is complicated enough that every
sampler should be able to use it without cloning code or being forced to use the
base schema jobid/compid/appid logic. This factors out the security
config parsing into a function and then calls it from the base_config
function.
I have a network sampler coming that needs this.",@baallan please move this pull request to master. Refactoring all the samplers to use this is not appropriate for a maintenance release.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,268,2020-05-19T18:50:25Z,2020-06-21T14:14:47Z,2020-06-21T14:14:48Z,MERGED,True,75,45,2,https://github.com/baallan,add base_auth_parse to allow samplers to use standard uid/gid/perm,1,[],https://github.com/ovis-hpc/ovis/pull/268,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/268#issuecomment-631048000,"Parsing and checking uid/gid/perm is complicated enough that every
sampler should be able to use it without cloning code or being forced to use the
base schema jobid/compid/appid logic. This factors out the security
config parsing into a function and then calls it from the base_config
function.
I have a network sampler coming that needs this.",@tom95858 there is no change for any existing sampler for this. The sampler base_config calls the new function where the code it wraps used to sit.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,268,2020-05-19T18:50:25Z,2020-06-21T14:14:47Z,2020-06-21T14:14:48Z,MERGED,True,75,45,2,https://github.com/baallan,add base_auth_parse to allow samplers to use standard uid/gid/perm,1,[],https://github.com/ovis-hpc/ovis/pull/268,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/268#issuecomment-647057248,"Parsing and checking uid/gid/perm is complicated enough that every
sampler should be able to use it without cloning code or being forced to use the
base schema jobid/compid/appid logic. This factors out the security
config parsing into a function and then calls it from the base_config
function.
I have a network sampler coming that needs this.",@tom95858 this PR is required to support the ibnet sampler PR.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,269,2020-05-21T20:35:42Z,2020-06-20T04:41:24Z,2020-10-08T19:58:35Z,CLOSED,False,2,2,1,https://github.com/nichamon,A possible use after freed of an lookup RDB in process_set_delete_request,1,[],https://github.com/ovis-hpc/ovis/pull/269,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/269,…uest,…uest,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,269,2020-05-21T20:35:42Z,2020-06-20T04:41:24Z,2020-10-08T19:58:35Z,CLOSED,False,2,2,1,https://github.com/nichamon,A possible use after freed of an lookup RDB in process_set_delete_request,1,[],https://github.com/ovis-hpc/ovis/pull/269,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/269#issuecomment-632333588,…uest,"Hi Mon,

I don't understand the patch. There is a ref on both the set and the rbd.

Tom
…
On Thu, May 21, 2020 at 3:35 PM nichamon ***@***.***> wrote:
 …uest
 ------------------------------
 You can view, comment on, or merge this pull request online at:

   #269
 Commit Summary

    - A possible use after freed of an lookup RDB in
    process_set_delete_request

 File Changes

    - *M* ldms/src/core/ldms_xprt.c
    <https://github.com/ovis-hpc/ovis/pull/269/files#diff-1ad2e6b1189c5997e7528b8510ef1716>
    (4)

 Patch Links:

    - https://github.com/ovis-hpc/ovis/pull/269.patch
    - https://github.com/ovis-hpc/ovis/pull/269.diff

 —
 You are receiving this because your review was requested.
 Reply to this email directly, view it on GitHub
 <#269>, or unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ABVTPXGXP42NCOASFIPBVIDRSWGCXANCNFSM4NHESPAQ>
 .


-- 
Thomas Tucker, President, Open Grid Computing, Inc.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,269,2020-05-21T20:35:42Z,2020-06-20T04:41:24Z,2020-10-08T19:58:35Z,CLOSED,False,2,2,1,https://github.com/nichamon,A possible use after freed of an lookup RDB in process_set_delete_request,1,[],https://github.com/ovis-hpc/ovis/pull/269,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/269#issuecomment-632452547,…uest,"@tom95858
r->set->lock and set->lock is the same lock. I changed from r->set->lock to set->lock because r could go away after the __ldms_free_rbd() call and we could have a use after freed here. Actually I saw it happened. I changed both lines for readability purpose.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,269,2020-05-21T20:35:42Z,2020-06-20T04:41:24Z,2020-10-08T19:58:35Z,CLOSED,False,2,2,1,https://github.com/nichamon,A possible use after freed of an lookup RDB in process_set_delete_request,1,[],https://github.com/ovis-hpc/ovis/pull/269,https://github.com/tom95858,4,https://github.com/ovis-hpc/ovis/pull/269#issuecomment-646940403,…uest,"this has been resolved, thanks Nichamon",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,272,2020-06-02T04:46:23Z,2020-06-20T04:40:25Z,2020-09-11T03:26:35Z,MERGED,True,2233,1340,26,https://github.com/narategithub,shared zap map and ldms rbd removal,1,[],https://github.com/ovis-hpc/ovis/pull/272,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/272,"[x] zap_sock
[x] zap_rdma
[x] zap_ugni
- 2 samp
- 1 agg1
- 1 agg2 -> sos
- also tried killing 1 samp ... the set went away
- resurrecting the sampler and the set was aggregated and stored
again.
[x] fabric
[x] add a way to select fabric provider/domain in
[x] zap API
[x] ldms xprt name (format: fabric.PROVIDER@DOM)
[x] test zap sock with:
[x] fabric.sockets@eth0
[x] fabric.verbs
[x] fabric.ugni - not supported due to lack of WAIT_FD and
fi_poll in gni provider.
[x] zaptest
[x] ldms/ldmsd
[x] modify ldms to use shared map.
[x] getting rid of rbd
[x] Pass ldms-test/agg_test
[x] Pass test_ldms_push
[x] Pass test_ldms_notify
[x] Pass all test cases in ldms-test repo (sock xprt)
[x] manually tested with the following use case:
- 1 sampler (meminfo) listening on sock, fabric.sockets and
fabric.verbs.
- 1 aggregator collecting from the sampler over sock, and the
aggregator also listen to sock, fabric.sockets and fabric.verbs
- ldms_ls to aggregator over each transport type (sock,
fabric.sockets, and fabric.verbs).
- kill the sampler
- ldms_ls to aggregator -- making sure it returns nothing
- resurrect the sampler
- ldms_ls over each tranport to aggregator verifying that the set
(meminfo) is back.","[x] zap_sock
[x] zap_rdma
[x] zap_ugni
- 2 samp
- 1 agg1
- 1 agg2 -> sos
- also tried killing 1 samp ... the set went away
- resurrecting the sampler and the set was aggregated and stored
again.
[x] fabric
[x] add a way to select fabric provider/domain in
[x] zap API
[x] ldms xprt name (format: fabric.PROVIDER@DOM)
[x] test zap sock with:
[x] fabric.sockets@eth0
[x] fabric.verbs
[x] fabric.ugni - not supported due to lack of WAIT_FD and
fi_poll in gni provider.
[x] zaptest
[x] ldms/ldmsd
[x] modify ldms to use shared map.
[x] getting rid of rbd
[x] Pass ldms-test/agg_test
[x] Pass test_ldms_push
[x] Pass test_ldms_notify
[x] Pass all test cases in ldms-test repo (sock xprt)
[x] manually tested with the following use case:
- 1 sampler (meminfo) listening on sock, fabric.sockets and
fabric.verbs.
- 1 aggregator collecting from the sampler over sock, and the
aggregator also listen to sock, fabric.sockets and fabric.verbs
- ldms_ls to aggregator over each transport type (sock,
fabric.sockets, and fabric.verbs).
- kill the sampler
- ldms_ls to aggregator -- making sure it returns nothing
- resurrect the sampler
- ldms_ls over each tranport to aggregator verifying that the set
(meminfo) is back.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,273,2020-06-03T18:36:14Z,2020-06-08T22:24:57Z,2020-06-08T22:24:57Z,CLOSED,False,9,0,3,https://github.com/Snell1224,distclean-local and nola added,16,[],https://github.com/ovis-hpc/ovis/pull/273,https://github.com/Snell1224,1,https://github.com/ovis-hpc/ovis/pull/273,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,273,2020-06-03T18:36:14Z,2020-06-08T22:24:57Z,2020-06-08T22:24:57Z,CLOSED,False,9,0,3,https://github.com/Snell1224,distclean-local and nola added,16,[],https://github.com/ovis-hpc/ovis/pull/273,https://github.com/morrone,2,https://github.com/ovis-hpc/ovis/pull/273#issuecomment-639160019,,"I think that you are probably going to need to cleanup your patch history on this one and resubmit the pull request. Look into the ""git rebase -i"" command to help with that. There should be just one commit with the ""nola"" change, and just one commit with the ""distclean"" change.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,277,2020-06-08T19:52:58Z,2020-07-06T13:13:12Z,2020-07-06T13:13:12Z,MERGED,True,1,1,1,https://github.com/baallan,fix paste-o leading to memory trashing in kwl parse,1,[],https://github.com/ovis-hpc/ovis/pull/277,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/277,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,278,2020-06-08T20:12:57Z,2020-07-14T19:29:56Z,2020-07-14T19:29:56Z,MERGED,True,38,5,3,https://github.com/baallan,Include error messages in sampler_base ooms.,1,[],https://github.com/ovis-hpc/ovis/pull/278,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/278,"report errors from sampler-base when failures occur, often due to out of set memory.","report errors from sampler-base when failures occur, often due to out of set memory.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,278,2020-06-08T20:12:57Z,2020-07-14T19:29:56Z,2020-07-14T19:29:56Z,MERGED,True,38,5,3,https://github.com/baallan,Include error messages in sampler_base ooms.,1,[],https://github.com/ovis-hpc/ovis/pull/278,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/278#issuecomment-655106717,"report errors from sampler-base when failures occur, often due to out of set memory.","@tom95858 Unless there is some violent objection to ovis_strerror, I will also make a commit to get rid of all other strerror_r calls in ldms.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,278,2020-06-08T20:12:57Z,2020-07-14T19:29:56Z,2020-07-14T19:29:56Z,MERGED,True,38,5,3,https://github.com/baallan,Include error messages in sampler_base ooms.,1,[],https://github.com/ovis-hpc/ovis/pull/278,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/278#issuecomment-657819377,"report errors from sampler-base when failures occur, often due to out of set memory.",@tom95858  is there a problem merging this in its revised form?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,279,2020-06-08T20:26:52Z,2020-06-20T02:55:23Z,2020-06-20T02:55:23Z,MERGED,True,238,85,12,https://github.com/baallan,V4 lustre 2.12 fixes,4,[],https://github.com/ovis-hpc/ovis/pull/279,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/279,this combines Omar's updates for lustre2_client and lnet_stats with fixes found during stria testing.,this combines Omar's updates for lustre2_client and lnet_stats with fixes found during stria testing.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,279,2020-06-08T20:26:52Z,2020-06-20T02:55:23Z,2020-06-20T02:55:23Z,MERGED,True,238,85,12,https://github.com/baallan,V4 lustre 2.12 fixes,4,[],https://github.com/ovis-hpc/ovis/pull/279,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/279#issuecomment-640868222,this combines Omar's updates for lustre2_client and lnet_stats with fixes found during stria testing.,@aazizo @valleydlr @tom95858 lustre 2.12 should be working now with the old format samplers.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,281,2020-06-08T22:25:42Z,2020-06-20T02:54:53Z,2020-06-20T02:54:53Z,MERGED,True,9,0,3,https://github.com/Snell1224,Add nola v4,2,[],https://github.com/ovis-hpc/ovis/pull/281,https://github.com/Snell1224,1,https://github.com/ovis-hpc/ovis/pull/281,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,281,2020-06-08T22:25:42Z,2020-06-20T02:54:53Z,2020-06-20T02:54:53Z,MERGED,True,9,0,3,https://github.com/Snell1224,Add nola v4,2,[],https://github.com/ovis-hpc/ovis/pull/281,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/281#issuecomment-646829180,,"@tom95858 if someone could review and merge Sara's build rules patch, it would make our jenkins tests start passing with the main branch. Looks good to me (we did test it on voltrino).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,282,2020-06-10T05:24:32Z,2020-06-20T03:14:06Z,2020-06-20T03:14:06Z,MERGED,True,7,3,2,https://github.com/morrone,Change from generic YACC test to specific BISON test,1,[],https://github.com/ovis-hpc/ovis/pull/282,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/282,"Change from generic YACC test to specific BISON test
Fixes #280","Change from generic YACC test to specific BISON test
Fixes #280",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,284,2020-06-16T00:50:05Z,2020-07-03T20:03:00Z,2020-07-31T18:32:04Z,CLOSED,False,1602,2,16,https://github.com/oceandlr,"variants for ldmsd_streams utilities, store. Man pages and copyrights.",1,[],https://github.com/ovis-hpc/ovis/pull/284,https://github.com/oceandlr,1,https://github.com/ovis-hpc/ovis/pull/284,"variants for ldmsd_streams utilities, store. Man pages and copyrights.
Making request, but want to discuss with @tom95858","variants for ldmsd_streams utilities, store. Man pages and copyrights.
Making request, but want to discuss with @tom95858",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,284,2020-06-16T00:50:05Z,2020-07-03T20:03:00Z,2020-07-31T18:32:04Z,CLOSED,False,1602,2,16,https://github.com/oceandlr,"variants for ldmsd_streams utilities, store. Man pages and copyrights.",1,[],https://github.com/ovis-hpc/ovis/pull/284,https://github.com/oceandlr,2,https://github.com/ovis-hpc/ovis/pull/284#issuecomment-644465481,"variants for ldmsd_streams utilities, store. Man pages and copyrights.
Making request, but want to discuss with @tom95858","Making request, but want to discuss with @tom95858
FYI: @valleydlr",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,284,2020-06-16T00:50:05Z,2020-07-03T20:03:00Z,2020-07-31T18:32:04Z,CLOSED,False,1602,2,16,https://github.com/oceandlr,"variants for ldmsd_streams utilities, store. Man pages and copyrights.",1,[],https://github.com/ovis-hpc/ovis/pull/284,https://github.com/oceandlr,3,https://github.com/ovis-hpc/ovis/pull/284#issuecomment-650828475,"variants for ldmsd_streams utilities, store. Man pages and copyrights.
Making request, but want to discuss with @tom95858",Note: no unsubscribe exists.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,284,2020-06-16T00:50:05Z,2020-07-03T20:03:00Z,2020-07-31T18:32:04Z,CLOSED,False,1602,2,16,https://github.com/oceandlr,"variants for ldmsd_streams utilities, store. Man pages and copyrights.",1,[],https://github.com/ovis-hpc/ovis/pull/284,https://github.com/oceandlr,4,https://github.com/ovis-hpc/ovis/pull/284#issuecomment-650829686,"variants for ldmsd_streams utilities, store. Man pages and copyrights.
Making request, but want to discuss with @tom95858","@tom95858 @valleydlr If you are good with this, do we also want to take it into OVIS-4?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,284,2020-06-16T00:50:05Z,2020-07-03T20:03:00Z,2020-07-31T18:32:04Z,CLOSED,False,1602,2,16,https://github.com/oceandlr,"variants for ldmsd_streams utilities, store. Man pages and copyrights.",1,[],https://github.com/ovis-hpc/ovis/pull/284,https://github.com/oceandlr,5,https://github.com/ovis-hpc/ovis/pull/284#issuecomment-651514291,"variants for ldmsd_streams utilities, store. Man pages and copyrights.
Making request, but want to discuss with @tom95858","updated parser.pl to optionally push a header with types, to support a SOS store later.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,284,2020-06-16T00:50:05Z,2020-07-03T20:03:00Z,2020-07-31T18:32:04Z,CLOSED,False,1602,2,16,https://github.com/oceandlr,"variants for ldmsd_streams utilities, store. Man pages and copyrights.",1,[],https://github.com/ovis-hpc/ovis/pull/284,https://github.com/oceandlr,6,https://github.com/ovis-hpc/ovis/pull/284#issuecomment-653665254,"variants for ldmsd_streams utilities, store. Man pages and copyrights.
Making request, but want to discuss with @tom95858",After discussion with @tom95858 @valleydlr I will rebase on OVIS-4 and put in a merge request there.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,285,2020-06-19T19:22:34Z,2020-06-20T04:51:44Z,2020-06-20T04:51:45Z,MERGED,True,4376,1,17,https://github.com/baallan,configurable ib mad network sampler plugin ibnet,1,[],https://github.com/ovis-hpc/ovis/pull/285,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/285,"A number of supporting utilities are included:


ldms_ibnet_schema_name provides the schema name that will be used for a given set of plugin configuration parameters. This is handy for configuring storage policies.


ldms-ibnet-sampler-gen provides configuration files that spread the load of sampling
the ports of the input fat tree fabric description over the nodes listed in the input samplers file. It also generates optionally a lid/hostname mapping file useful for labeling data during analysis. It also generates optionally visualizations of the network hardware topology (not the routing tables) using graphviz.


ldms-gen-lidfile.sh dumps a lid/guid/port mapping usable for small network systems with only one sampler.","A number of supporting utilities are included:


ldms_ibnet_schema_name provides the schema name that will be used for a given set of plugin configuration parameters. This is handy for configuring storage policies.


ldms-ibnet-sampler-gen provides configuration files that spread the load of sampling
the ports of the input fat tree fabric description over the nodes listed in the input samplers file. It also generates optionally a lid/hostname mapping file useful for labeling data during analysis. It also generates optionally visualizations of the network hardware topology (not the routing tables) using graphviz.


ldms-gen-lidfile.sh dumps a lid/guid/port mapping usable for small network systems with only one sampler.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,285,2020-06-19T19:22:34Z,2020-06-20T04:51:44Z,2020-06-20T04:51:45Z,MERGED,True,4376,1,17,https://github.com/baallan,configurable ib mad network sampler plugin ibnet,1,[],https://github.com/ovis-hpc/ovis/pull/285,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/285#issuecomment-646828378,"A number of supporting utilities are included:


ldms_ibnet_schema_name provides the schema name that will be used for a given set of plugin configuration parameters. This is handy for configuring storage policies.


ldms-ibnet-sampler-gen provides configuration files that spread the load of sampling
the ports of the input fat tree fabric description over the nodes listed in the input samplers file. It also generates optionally a lid/hostname mapping file useful for labeling data during analysis. It also generates optionally visualizations of the network hardware topology (not the routing tables) using graphviz.


ldms-gen-lidfile.sh dumps a lid/guid/port mapping usable for small network systems with only one sampler.","@oceandlr @valleydlr @tom95858 the sampler used in the stria test 2 weeks ago, plus docs, utilities, is available for merge with OVIS-4. it is disabled in build by default.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,287,2020-06-23T20:15:06Z,2020-07-13T23:51:32Z,2020-07-13T23:51:32Z,CLOSED,False,3,5,1,https://github.com/Snell1224,Separate auth and core subdirectories,2,[],https://github.com/ovis-hpc/ovis/pull/287,https://github.com/Snell1224,1,https://github.com/ovis-hpc/ovis/pull/287,"Sub-directories ""core"" and ""auth"" are built when CORE and OVIS_AUTH are enabled, respectively.","Sub-directories ""core"" and ""auth"" are built when CORE and OVIS_AUTH are enabled, respectively.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,287,2020-06-23T20:15:06Z,2020-07-13T23:51:32Z,2020-07-13T23:51:32Z,CLOSED,False,3,5,1,https://github.com/Snell1224,Separate auth and core subdirectories,2,[],https://github.com/ovis-hpc/ovis/pull/287,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/287#issuecomment-653694965,"Sub-directories ""core"" and ""auth"" are built when CORE and OVIS_AUTH are enabled, respectively.","Is there any reasonable use case where 'core' is not enabled? I don't believe anything will build if it were actually disabled. Maybe you could refactor this to remove the 'core', 'auth', and 'ldmsd' ""options"" altogether?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,287,2020-06-23T20:15:06Z,2020-07-13T23:51:32Z,2020-07-13T23:51:32Z,CLOSED,False,3,5,1,https://github.com/Snell1224,Separate auth and core subdirectories,2,[],https://github.com/ovis-hpc/ovis/pull/287,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/287#issuecomment-654468601,"Sub-directories ""core"" and ""auth"" are built when CORE and OVIS_AUTH are enabled, respectively.","@Snell1224 I agree with Tom that disabling core has never made sense, at least not since all the other projects (sos, komondor, etc) were decoupled and removed from the source tree.
@tom95858 is there a scenario where someone could want to build a client that speaks ldms without needing to build the daemon? if not then I agree disabling ldmsd no longer makes sense.
I believe Jim is still occasionally testing with auth disabled, so we will need to keep a configure option to disable auth.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,287,2020-06-23T20:15:06Z,2020-07-13T23:51:32Z,2020-07-13T23:51:32Z,CLOSED,False,3,5,1,https://github.com/Snell1224,Separate auth and core subdirectories,2,[],https://github.com/ovis-hpc/ovis/pull/287,https://github.com/tom95858,4,https://github.com/ovis-hpc/ovis/pull/287#issuecomment-654500341,"Sub-directories ""core"" and ""auth"" are built when CORE and OVIS_AUTH are enabled, respectively.","@snell1244, @baallan, OK, I'll dig into auth and circle back. My general
goal here is to make configure simpler. We've got a gazillion options, and
I am quite certain we don't test the combinations. I'd like to get to a
point where we have far fewer options that address known and tested
use-cases. I think we got here via cut-and-paste, not by thoughtful
inspection.
…
On Mon, Jul 6, 2020 at 3:13 PM Benjamin Allan ***@***.***> wrote:
 @Snell1224 <https://github.com/Snell1224> I agree with Tom that disabling
 core has never made sense, at least not since all the other projects (sos,
 komondor, etc) were decoupled and removed from the source tree.
 @tom95858 <https://github.com/tom95858> is there a scenario where someone
 could want to build a client that speaks ldms without needing to build the
 daemon? if not then I agree disabling ldmsd no longer makes sense.
 I believe Jim is still occasionally testing with auth disabled, so we will
 need to keep a configure option to disable auth.

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#287 (comment)>, or
 unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ABVTPXGWJYIBCX7C2VWTJD3R2I5A3ANCNFSM4OGAEP4Q>
 .


-- 
Thomas Tucker, President, Open Grid Computing, Inc.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,287,2020-06-23T20:15:06Z,2020-07-13T23:51:32Z,2020-07-13T23:51:32Z,CLOSED,False,3,5,1,https://github.com/Snell1224,Separate auth and core subdirectories,2,[],https://github.com/ovis-hpc/ovis/pull/287,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/287#issuecomment-656265577,"Sub-directories ""core"" and ""auth"" are built when CORE and OVIS_AUTH are enabled, respectively.","Hi @Snell1224, @baallan: could we please remove the 'core',  and 'ldmsd' altogether.
With respect to ovis_auth, this adds a dependency on openssl I believe. If you would like to retain that option for this reason, I am fine with that, but am more inclined to remove it because I don't know of any environments that don't have SSL support.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,288,2020-06-23T21:18:17Z,2020-07-14T20:14:05Z,2020-07-14T20:14:05Z,MERGED,True,2,1,2,https://github.com/Snell1224,Added new option for python configuration,3,[],https://github.com/ovis-hpc/ovis/pull/288,https://github.com/Snell1224,1,https://github.com/ovis-hpc/ovis/pull/288,"""ENABLE_LIB_PYMAP"" added to control cython check for sos and ldms installation without python plugins/support.","""ENABLE_LIB_PYMAP"" added to control cython check for sos and ldms installation without python plugins/support.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,288,2020-06-23T21:18:17Z,2020-07-14T20:14:05Z,2020-07-14T20:14:05Z,MERGED,True,2,1,2,https://github.com/Snell1224,Added new option for python configuration,3,[],https://github.com/ovis-hpc/ovis/pull/288,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/288#issuecomment-648928268,"""ENABLE_LIB_PYMAP"" added to control cython check for sos and ldms installation without python plugins/support.","@tom95858 is Nick's ovis/lib/python/Map.pyx something that is part of sos now?
the cython result is used only for this file. If we delete ovis/lib/python, Sara's patch would be to get rid of the cython dependency instead.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,288,2020-06-23T21:18:17Z,2020-07-14T20:14:05Z,2020-07-14T20:14:05Z,MERGED,True,2,1,2,https://github.com/Snell1224,Added new option for python configuration,3,[],https://github.com/ovis-hpc/ovis/pull/288,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/288#issuecomment-651981959,"""ENABLE_LIB_PYMAP"" added to control cython check for sos and ldms installation without python plugins/support.","The Map API was added to allow one to create an id mapping from component_id to some other id name space. The intent was so that you could have simple distance computations like id_0 - id_1 that would be meaningful in different domains, e.g. network vs. facilities. You can disable Map.pyx  in the short term and the build won't require Cython. Can you please provide insight into why this is an issue in the 1st place?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,288,2020-06-23T21:18:17Z,2020-07-14T20:14:05Z,2020-07-14T20:14:05Z,MERGED,True,2,1,2,https://github.com/Snell1224,Added new option for python configuration,3,[],https://github.com/ovis-hpc/ovis/pull/288,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/288#issuecomment-651984048,"""ENABLE_LIB_PYMAP"" added to control cython check for sos and ldms installation without python plugins/support.","in current v4, if sos is enabled it then tests for cython (which is of course not there). this makes the build regression tests fail if any plugin sos related is enabled.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,288,2020-06-23T21:18:17Z,2020-07-14T20:14:05Z,2020-07-14T20:14:05Z,MERGED,True,2,1,2,https://github.com/Snell1224,Added new option for python configuration,3,[],https://github.com/ovis-hpc/ovis/pull/288,https://github.com/Snell1224,5,https://github.com/ovis-hpc/ovis/pull/288#issuecomment-658312205,"""ENABLE_LIB_PYMAP"" added to control cython check for sos and ldms installation without python plugins/support.","@tom95858 I've removed the ""LIB_PYMAP"" option that was added from the first commit along with the cython check line since the build won't need it for the short-term. I haven't been able to squash these commits into one on this pull request so would it be better to start a new pull request?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,290,2020-06-24T18:06:15Z,2020-07-03T16:07:56Z,2020-07-03T16:07:56Z,MERGED,True,21,14,1,https://github.com/bschwal,Ldms csv export sos fix,2,[],https://github.com/ovis-hpc/ovis/pull/290,https://github.com/bschwal,1,https://github.com/ovis-hpc/ovis/pull/290,"Fixed ldms-export-csv-sos script to be reflect the compound indices SOS-4 has by default.
Also added the --kind-file option to pass in a user-generated kind file to the script.","Fixed ldms-export-csv-sos script to be reflect the compound indices SOS-4 has by default.
Also added the --kind-file option to pass in a user-generated kind file to the script.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,290,2020-06-24T18:06:15Z,2020-07-03T16:07:56Z,2020-07-03T16:07:56Z,MERGED,True,21,14,1,https://github.com/bschwal,Ldms csv export sos fix,2,[],https://github.com/ovis-hpc/ovis/pull/290,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/290#issuecomment-649077046,"Fixed ldms-export-csv-sos script to be reflect the compound indices SOS-4 has by default.
Also added the --kind-file option to pass in a user-generated kind file to the script.",@tom95858 this is ready to merge. It's part of the ingest chain for our grafana servers.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,292,2020-06-25T15:31:50Z,2020-07-03T16:07:31Z,2020-07-03T16:07:32Z,MERGED,True,4,4,1,https://github.com/baallan,"fix auth option checking, issue 274",1,[],https://github.com/ovis-hpc/ovis/pull/292,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/292,thanks to Chris for the catch.,thanks to Chris for the catch.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,295,2020-07-04T01:26:58Z,2020-07-06T13:11:06Z,2020-07-31T18:32:02Z,MERGED,True,1968,0,18,https://github.com/oceandlr,Hello streams 4,2,"['Stores', 'Samplers', 'V4']",https://github.com/ovis-hpc/ovis/pull/295,https://github.com/oceandlr,1,https://github.com/ovis-hpc/ovis/pull/295,"Hello_streams sampler and store utilities. These are still in development, but we want to get them into the main line. This includes the hello_sampler and hello_publisher by @tom95858.","Hello_streams sampler and store utilities. These are still in development, but we want to get them into the main line. This includes the hello_sampler and hello_publisher by @tom95858.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,295,2020-07-04T01:26:58Z,2020-07-06T13:11:06Z,2020-07-31T18:32:02Z,MERGED,True,1968,0,18,https://github.com/oceandlr,Hello streams 4,2,"['Stores', 'Samplers', 'V4']",https://github.com/ovis-hpc/ovis/pull/295,https://github.com/oceandlr,2,https://github.com/ovis-hpc/ovis/pull/295#issuecomment-653705403,"Hello_streams sampler and store utilities. These are still in development, but we want to get them into the main line. This includes the hello_sampler and hello_publisher by @tom95858.","@valleydlr @tom95858
I will add the hello_streams sos store later.
Eventually we should refactor the stores since the subscribe callback should be the same as the corresponding store's store function. However, I don't want to make those changes while we are still exploring the best way to do some of these stream functionalities.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,296,2020-07-06T01:51:19Z,2020-07-06T13:10:30Z,2020-09-11T03:25:53Z,MERGED,True,22,20,2,https://github.com/narategithub,Fix ldms set tree insert/find race,2,[],https://github.com/ovis-hpc/ovis/pull/296,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/296,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,297,2020-07-06T21:26:51Z,2020-07-06T22:57:22Z,2020-10-08T19:58:16Z,MERGED,True,387,0,3,https://github.com/nichamon,New json_util APIs,4,[],https://github.com/ovis-hpc/ovis/pull/297,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/297,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,298,2020-07-06T21:28:01Z,2020-07-06T22:57:03Z,2020-08-26T21:27:25Z,MERGED,True,2,2,1,https://github.com/nichamon,ldmsd: typos in test_sampler plugins that causes the config to fail,1,[],https://github.com/ovis-hpc/ovis/pull/298,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/298,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,299,2020-07-06T21:28:46Z,2020-07-06T22:56:48Z,2020-08-26T21:27:20Z,MERGED,True,83,0,2,https://github.com/nichamon,ldmsd: APIs to convert time from string to integer (us) and vice versa,1,[],https://github.com/ovis-hpc/ovis/pull/299,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/299,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,299,2020-07-06T21:28:46Z,2020-07-06T22:56:48Z,2020-08-26T21:27:20Z,MERGED,True,83,0,2,https://github.com/nichamon,ldmsd: APIs to convert time from string to integer (us) and vice versa,1,[],https://github.com/ovis-hpc/ovis/pull/299,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/299#issuecomment-655040370,,"@nichamon please adjusting the time conversions to use uint64_t instead of the ambiguous (and potentially too small) long type.
https://software.intel.com/content/www/us/en/develop/articles/size-of-long-integer-type-on-different-architecture-and-os.html",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,300,2020-07-07T20:02:15Z,2020-07-09T17:31:30Z,2020-08-26T21:27:16Z,MERGED,True,5,1,1,https://github.com/nichamon,ldmsd_controller now supports receiving a single command at command line,1,[],https://github.com/ovis-hpc/ovis/pull/300,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/300,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,301,2020-07-07T23:37:58Z,2020-07-22T17:54:47Z,2020-07-22T17:57:41Z,MERGED,True,171,20,4,https://github.com/baallan,add omnipath network decomp for ldms-ibnet-sampler-gen,1,[],https://github.com/ovis-hpc/ovis/pull/301,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/301,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,301,2020-07-07T23:37:58Z,2020-07-22T17:54:47Z,2020-07-22T17:57:41Z,MERGED,True,171,20,4,https://github.com/baallan,add omnipath network decomp for ldms-ibnet-sampler-gen,1,[],https://github.com/ovis-hpc/ovis/pull/301,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/301#issuecomment-655206978,,"@baallan, this says WIP, but do you want it merged?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,301,2020-07-07T23:37:58Z,2020-07-22T17:54:47Z,2020-07-22T17:57:41Z,MERGED,True,171,20,4,https://github.com/baallan,add omnipath network decomp for ldms-ibnet-sampler-gen,1,[],https://github.com/ovis-hpc/ovis/pull/301,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/301#issuecomment-655560200,,@tom95858 not just yet.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,301,2020-07-07T23:37:58Z,2020-07-22T17:54:47Z,2020-07-22T17:57:41Z,MERGED,True,171,20,4,https://github.com/baallan,add omnipath network decomp for ldms-ibnet-sampler-gen,1,[],https://github.com/ovis-hpc/ovis/pull/301,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/301#issuecomment-662575993,,@tom95858 please merge this one. @morrone I can't find a button to provoke the actions bits to check this PR that was created before they were instituted.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,301,2020-07-07T23:37:58Z,2020-07-22T17:54:47Z,2020-07-22T17:57:41Z,MERGED,True,171,20,4,https://github.com/baallan,add omnipath network decomp for ldms-ibnet-sampler-gen,1,[],https://github.com/ovis-hpc/ovis/pull/301,https://github.com/morrone,5,https://github.com/ovis-hpc/ovis/pull/301#issuecomment-662599085,,"@baallan , yes, I am not aware of any way to manually trigger the actions. The action in the .github/workflows/test-make-dist.yaml is triggered on a push to the OVIS-4 branch, or a pull request for the OVIS-4 branch.
If you want to trigger a test build, you could probably edit your existing commit, and then force-push your v4_ibnet_sampler_omnipath branch again. But that probably isn't necessary to force things for the PRs that existed before the workflow. The tests will happen when the changes are merged, so the test will still get run in the end, and we'll know if make dist goes catastrophically wrong.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,303,2020-07-08T22:48:25Z,2020-07-09T17:31:08Z,2020-07-09T17:31:08Z,MERGED,True,191,22,6,https://github.com/baallan,Update sampler 'variable' to actually work as planned.,1,[],https://github.com/ovis-hpc/ovis/pull/303,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/303,"This sampler periodically redefines its sets and schemas, reusing names.
This works, but the current aggregation never sees the new definitions of recycled names.
Symptom of this is that the store only gets the first cycle of data in each schema.
Is there something about unpublish needed to convince downstream to drop old definitions?
to run the sampler, do install and then
bin/ldms-static-test.sh variable","This sampler periodically redefines its sets and schemas, reusing names.
This works, but the current aggregation never sees the new definitions of recycled names.
Symptom of this is that the store only gets the first cycle of data in each schema.
Is there something about unpublish needed to convince downstream to drop old definitions?
to run the sampler, do install and then
bin/ldms-static-test.sh variable",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,303,2020-07-08T22:48:25Z,2020-07-09T17:31:08Z,2020-07-09T17:31:08Z,MERGED,True,191,22,6,https://github.com/baallan,Update sampler 'variable' to actually work as planned.,1,[],https://github.com/ovis-hpc/ovis/pull/303,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/303#issuecomment-655798327,"This sampler periodically redefines its sets and schemas, reusing names.
This works, but the current aggregation never sees the new definitions of recycled names.
Symptom of this is that the store only gets the first cycle of data in each schema.
Is there something about unpublish needed to convince downstream to drop old definitions?
to run the sampler, do install and then
bin/ldms-static-test.sh variable","@tom95858 @valleydlr I made a pull request with the updated 'variable' sampler I emailed about earlier.
The error described is on vanilla redhat 7/sock transport (vm, not cluster).
A collateral effect of the commit is to move it to a subdirectory and add a man page to document it.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,304,2020-07-09T17:00:26Z,2020-07-09T17:29:55Z,2020-07-09T17:29:56Z,MERGED,True,1,2,1,https://github.com/Snell1224,Patch fix to procstat.3,1,[],https://github.com/ovis-hpc/ovis/pull/304,https://github.com/Snell1224,1,https://github.com/ovis-hpc/ovis/pull/304,Fixed procstat.3 config file for OVIS v4. Used with ldms-static-test.sh test script.,Fixed procstat.3 config file for OVIS v4. Used with ldms-static-test.sh test script.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,305,2020-07-09T17:29:49Z,2020-07-14T20:31:25Z,2020-07-14T20:31:25Z,MERGED,True,23,23,23,https://github.com/morrone,Change all python scripts to explicitly call python2,1,[],https://github.com/ovis-hpc/ovis/pull/305,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/305,"RHEL8 rpm build scripts throw an error if it finds scripts using
just ""python"" on the #! line. They want us to now explicitly call
either ""python2"" or ""python3"".","RHEL8 rpm build scripts throw an error if it finds scripts using
just ""python"" on the #! line. They want us to now explicitly call
either ""python2"" or ""python3"".",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,305,2020-07-09T17:29:49Z,2020-07-14T20:31:25Z,2020-07-14T20:31:25Z,MERGED,True,23,23,23,https://github.com/morrone,Change all python scripts to explicitly call python2,1,[],https://github.com/ovis-hpc/ovis/pull/305,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/305#issuecomment-656312283,"RHEL8 rpm build scripts throw an error if it finds scripts using
just ""python"" on the #! line. They want us to now explicitly call
either ""python2"" or ""python3"".",I think we're in the process of everything switching to python3.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,305,2020-07-09T17:29:49Z,2020-07-14T20:31:25Z,2020-07-14T20:31:25Z,MERGED,True,23,23,23,https://github.com/morrone,Change all python scripts to explicitly call python2,1,[],https://github.com/ovis-hpc/ovis/pull/305,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/305#issuecomment-656318066,"RHEL8 rpm build scripts throw an error if it finds scripts using
just ""python"" on the #! line. They want us to now explicitly call
either ""python2"" or ""python3"".","The switch to python3 is on the master branch, to the best of my understanding. On the OVIS-4 branch we are still at python2. I need to build OVIS-4 on RHEL8 now.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,305,2020-07-09T17:29:49Z,2020-07-14T20:31:25Z,2020-07-14T20:31:25Z,MERGED,True,23,23,23,https://github.com/morrone,Change all python scripts to explicitly call python2,1,[],https://github.com/ovis-hpc/ovis/pull/305,https://github.com/nick-enoent,4,https://github.com/ovis-hpc/ovis/pull/305#issuecomment-656322273,"RHEL8 rpm build scripts throw an error if it finds scripts using
just ""python"" on the #! line. They want us to now explicitly call
either ""python2"" or ""python3"".",I'm in the process of porting OVIS-4 to python3,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,305,2020-07-09T17:29:49Z,2020-07-14T20:31:25Z,2020-07-14T20:31:25Z,MERGED,True,23,23,23,https://github.com/morrone,Change all python scripts to explicitly call python2,1,[],https://github.com/ovis-hpc/ovis/pull/305,https://github.com/morrone,5,https://github.com/ovis-hpc/ovis/pull/305#issuecomment-656337835,"RHEL8 rpm build scripts throw an error if it finds scripts using
just ""python"" on the #! line. They want us to now explicitly call
either ""python2"" or ""python3"".","@nick-enoent
OK. Please make sure that you update all the scripts to explicitly call ""python3"".",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,306,2020-07-09T21:27:27Z,2020-07-09T21:27:38Z,2020-07-09T21:27:38Z,CLOSED,False,59314,43920,809,https://github.com/morrone,Fix make dist,528,[],https://github.com/ovis-hpc/ovis/pull/306,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/306,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,307,2020-07-09T22:34:07Z,2020-07-14T19:24:12Z,2020-07-14T19:24:12Z,MERGED,True,22,0,1,https://github.com/morrone,"Introduce automated testing of ""make dist""",1,[],https://github.com/ovis-hpc/ovis/pull/307,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/307,"It is not uncommon for changes to the ovis build system to break the ""make dist""
target. We introduce a GitHub Actions workflow to automate the test of
the build system up through ""make dist"" so we will automatically be alerted
of breakage on PRs for OVIS-4 and on the OVIS-4 branch.
The master branch hasn't yet had all of the build system cleanup that OVIS-4
has had, but this testing can easily be expaned to master once that has
happened.","It is not uncommon for changes to the ovis build system to break the ""make dist""
target. We introduce a GitHub Actions workflow to automate the test of
the build system up through ""make dist"" so we will automatically be alerted
of breakage on PRs for OVIS-4 and on the OVIS-4 branch.
The master branch hasn't yet had all of the build system cleanup that OVIS-4
has had, but this testing can easily be expaned to master once that has
happened.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,308,2020-07-09T22:39:27Z,2020-07-14T19:23:18Z,2020-07-14T19:23:18Z,MERGED,True,1,1,1,https://github.com/morrone,"Fix bug in hello_stream build that breaks ""make dist""",1,[],https://github.com/ovis-hpc/ovis/pull/308,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/308,The referenced hello_sampler.h file does not exist.,The referenced hello_sampler.h file does not exist.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,308,2020-07-09T22:39:27Z,2020-07-14T19:23:18Z,2020-07-14T19:23:18Z,MERGED,True,1,1,1,https://github.com/morrone,"Fix bug in hello_stream build that breaks ""make dist""",1,[],https://github.com/ovis-hpc/ovis/pull/308,https://github.com/oceandlr,2,https://github.com/ovis-hpc/ovis/pull/308#issuecomment-656432212,The referenced hello_sampler.h file does not exist.,Ack! Thanks! @morrone,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,308,2020-07-09T22:39:27Z,2020-07-14T19:23:18Z,2020-07-14T19:23:18Z,MERGED,True,1,1,1,https://github.com/morrone,"Fix bug in hello_stream build that breaks ""make dist""",1,[],https://github.com/ovis-hpc/ovis/pull/308,https://github.com/oceandlr,3,https://github.com/ovis-hpc/ovis/pull/308#issuecomment-657278693,The referenced hello_sampler.h file does not exist.,@tom95858  @valleydlr  -- we should take this in.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,309,2020-07-10T02:30:30Z,2020-07-13T17:21:43Z,2020-07-13T17:21:43Z,MERGED,True,5,0,2,https://github.com/Snell1224,Variable subdir v4,2,[],https://github.com/ovis-hpc/ovis/pull/309,https://github.com/Snell1224,1,https://github.com/ovis-hpc/ovis/pull/309,"add enable option for ""variable"" sub-directory","add enable option for ""variable"" sub-directory",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,309,2020-07-10T02:30:30Z,2020-07-13T17:21:43Z,2020-07-13T17:21:43Z,MERGED,True,5,0,2,https://github.com/Snell1224,Variable subdir v4,2,[],https://github.com/ovis-hpc/ovis/pull/309,https://github.com/morrone,2,https://github.com/ovis-hpc/ovis/pull/309#issuecomment-656766442,"add enable option for ""variable"" sub-directory","I think that you may have forgotten to include some files in this PR. At least, this adds ldms/src/sampler/variable/Makefile to AC_CONFIG_FILES, but there is no included Makefile.am that would allow that directive to work.
If this is intended to move the variable.c file into a subdirectory, I think that probably should happen in the same PR.
If you would like any tips for testing before pushing a PR, or using git to determine whether all of your changes are captured in commits, I'm happy to chat about that here.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,309,2020-07-10T02:30:30Z,2020-07-13T17:21:43Z,2020-07-13T17:21:43Z,MERGED,True,5,0,2,https://github.com/Snell1224,Variable subdir v4,2,[],https://github.com/ovis-hpc/ovis/pull/309,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/309#issuecomment-656781960,"add enable option for ""variable"" sub-directory",My bad! I missed that 3ac18f8 just landed.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,311,2020-07-13T23:59:32Z,2020-07-14T19:23:36Z,2020-07-14T19:23:36Z,MERGED,True,3,8,2,https://github.com/Snell1224,Remove core and ldmsd options,2,[],https://github.com/ovis-hpc/ovis/pull/311,https://github.com/Snell1224,1,https://github.com/ovis-hpc/ovis/pull/311,remove core and ldmsd options. Keep auth enable/disable options,remove core and ldmsd options. Keep auth enable/disable options,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,312,2020-07-15T03:19:26Z,2020-07-19T21:29:16Z,2020-08-26T21:27:14Z,MERGED,True,4,2,1,https://github.com/nichamon,ovis event: the worker state stuck in FLUSHING if ev_flush is called.,1,[],https://github.com/ovis-hpc/ovis/pull/312,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/312,"With the change the worker state is reset back from FLUSHING to RUNNING
after all events have been flushed.","With the change the worker state is reset back from FLUSHING to RUNNING
after all events have been flushed.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,312,2020-07-15T03:19:26Z,2020-07-19T21:29:16Z,2020-08-26T21:27:14Z,MERGED,True,4,2,1,https://github.com/nichamon,ovis event: the worker state stuck in FLUSHING if ev_flush is called.,1,[],https://github.com/ovis-hpc/ovis/pull/312,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/312#issuecomment-658524882,"With the change the worker state is reset back from FLUSHING to RUNNING
after all events have been flushed.",@tom95858 I found the bug by investigating the cause that an updater cannot be started after it has been stopped.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,312,2020-07-15T03:19:26Z,2020-07-19T21:29:16Z,2020-08-26T21:27:14Z,MERGED,True,4,2,1,https://github.com/nichamon,ovis event: the worker state stuck in FLUSHING if ev_flush is called.,1,[],https://github.com/ovis-hpc/ovis/pull/312,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/312#issuecomment-658980477,"With the change the worker state is reset back from FLUSHING to RUNNING
after all events have been flushed.","@tom95858 The problem with restarting Updaters is that when ev_flush() is called and the worker state is changed to FLUSHING and it stuck in that state forever. When Updaters are restarted, ev_post() returned with EBUSY because the worker is in the FLUSHING state. The change resets the worker state back to RUNNING after it flushes all outstanding events.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,314,2020-07-15T04:37:30Z,2020-07-22T15:35:28Z,2020-07-31T18:31:59Z,MERGED,True,8,5,3,https://github.com/oceandlr,move some examples files from /etc to /share,1,[],https://github.com/ovis-hpc/ovis/pull/314,https://github.com/oceandlr,1,https://github.com/ovis-hpc/ovis/pull/314,"Re issue #310
Moved aries_mmr_set_configs and hello_sampler_util from XXX/etc to XXX/share/doc/ovis-ldms-X.Y.Z/examples","Re issue #310
Moved aries_mmr_set_configs and hello_sampler_util from XXX/etc to XXX/share/doc/ovis-ldms-X.Y.Z/examples",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,314,2020-07-15T04:37:30Z,2020-07-22T15:35:28Z,2020-07-31T18:31:59Z,MERGED,True,8,5,3,https://github.com/oceandlr,move some examples files from /etc to /share,1,[],https://github.com/ovis-hpc/ovis/pull/314,https://github.com/oceandlr,2,https://github.com/ovis-hpc/ovis/pull/314#issuecomment-658541731,"Re issue #310
Moved aries_mmr_set_configs and hello_sampler_util from XXX/etc to XXX/share/doc/ovis-ldms-X.Y.Z/examples","BEFORE accepting this:
@valleydlr -- are you ok with the move of aries_mmr_set_configs? Do you use it in place?
@tom95858 @morrone -- in #310, @morrone was against the install-data-local ... I have kept it as is. If we want this change then there are other places that should change as well.
@tom95858 -- will a move at this point break with any standard policy?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,314,2020-07-15T04:37:30Z,2020-07-22T15:35:28Z,2020-07-31T18:31:59Z,MERGED,True,8,5,3,https://github.com/oceandlr,move some examples files from /etc to /share,1,[],https://github.com/ovis-hpc/ovis/pull/314,https://github.com/oceandlr,3,https://github.com/ovis-hpc/ovis/pull/314#issuecomment-658944544,"Re issue #310
Moved aries_mmr_set_configs and hello_sampler_util from XXX/etc to XXX/share/doc/ovis-ldms-X.Y.Z/examples","@baallan I based this off of XXX/ovis/ldms/src/third-plugins/my_plugin/Makefile.am and ovis/ldms/src/third-plugins/my_plugin/scripts/Makefile.am. Did I misread those?
BTW, it looked to me at the top level configure that $(docdir) gets defined, so it is redefined in those third-plugin places. This is why I used $(datadocdir) as my local name. Am in interpreting this correctly, and if so, should we do similarly here in third-plugins?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,314,2020-07-15T04:37:30Z,2020-07-22T15:35:28Z,2020-07-31T18:31:59Z,MERGED,True,8,5,3,https://github.com/oceandlr,move some examples files from /etc to /share,1,[],https://github.com/ovis-hpc/ovis/pull/314,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/314#issuecomment-658947428,"Re issue #310
Moved aries_mmr_set_configs and hello_sampler_util from XXX/etc to XXX/share/doc/ovis-ldms-X.Y.Z/examples","@oceandlr the third-plugin subdirs are standalone projects in themselves, so things differ. The naming I suggest follows the rule $top/ldms/Makefile.am:install-data-local",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,314,2020-07-15T04:37:30Z,2020-07-22T15:35:28Z,2020-07-31T18:31:59Z,MERGED,True,8,5,3,https://github.com/oceandlr,move some examples files from /etc to /share,1,[],https://github.com/ovis-hpc/ovis/pull/314,https://github.com/oceandlr,5,https://github.com/ovis-hpc/ovis/pull/314#issuecomment-658967237,"Re issue #310
Moved aries_mmr_set_configs and hello_sampler_util from XXX/etc to XXX/share/doc/ovis-ldms-X.Y.Z/examples","updated to address @baallan requested change (sorry if that should go in the thread elsewhere)
Please all still see the 2nd comment for review considerations...",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,314,2020-07-15T04:37:30Z,2020-07-22T15:35:28Z,2020-07-31T18:31:59Z,MERGED,True,8,5,3,https://github.com/oceandlr,move some examples files from /etc to /share,1,[],https://github.com/ovis-hpc/ovis/pull/314,https://github.com/baallan,6,https://github.com/ovis-hpc/ovis/pull/314#issuecomment-658979652,"Re issue #310
Moved aries_mmr_set_configs and hello_sampler_util from XXX/etc to XXX/share/doc/ovis-ldms-X.Y.Z/examples","@oceandlr https://www.gnu.org/software/automake/manual/html_node/Standard-Directory-Variables.html
is the baseline supported by automake. The use of PACKAGE_VERSION instead of just PACKAGE is a common extension used to avoid conflicts when multiple major versions may be installed on the same system.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,314,2020-07-15T04:37:30Z,2020-07-22T15:35:28Z,2020-07-31T18:31:59Z,MERGED,True,8,5,3,https://github.com/oceandlr,move some examples files from /etc to /share,1,[],https://github.com/ovis-hpc/ovis/pull/314,https://github.com/tom95858,7,https://github.com/ovis-hpc/ovis/pull/314#issuecomment-660712665,"Re issue #310
Moved aries_mmr_set_configs and hello_sampler_util from XXX/etc to XXX/share/doc/ovis-ldms-X.Y.Z/examples","@oceandlr, @baallan: is everyone happy with this change?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,314,2020-07-15T04:37:30Z,2020-07-22T15:35:28Z,2020-07-31T18:31:59Z,MERGED,True,8,5,3,https://github.com/oceandlr,move some examples files from /etc to /share,1,[],https://github.com/ovis-hpc/ovis/pull/314,https://github.com/oceandlr,8,https://github.com/ovis-hpc/ovis/pull/314#issuecomment-660715772,"Re issue #310
Moved aries_mmr_set_configs and hello_sampler_util from XXX/etc to XXX/share/doc/ovis-ldms-X.Y.Z/examples","@valleydlr should weigh in on the move since I don't know if he is expecting the Aries config files to be in a particular place.
Also do you @tom95858 have any option on the install-data-local that @morrone was against? However, I don't know what the alternative would be and if we do want to change it then we should change elsewhere, so maybe that should just be a different change, if we want to go that route.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,314,2020-07-15T04:37:30Z,2020-07-22T15:35:28Z,2020-07-31T18:31:59Z,MERGED,True,8,5,3,https://github.com/oceandlr,move some examples files from /etc to /share,1,[],https://github.com/ovis-hpc/ovis/pull/314,https://github.com/morrone,9,https://github.com/ovis-hpc/ovis/pull/314#issuecomment-660717305,"Re issue #310
Moved aries_mmr_set_configs and hello_sampler_util from XXX/etc to XXX/share/doc/ovis-ldms-X.Y.Z/examples","@valleydlr should weigh in on the move since I don't know if he is expecting the Aries config files to be in a particular place.
Also do you @tom95858 have any option on the install-data-local that @morrone was against? However, I don't know what the alternative would be and if we do want to change it then we should change elsewhere, so maybe that should just be a different change, if we want to go that route.

I don't have a problem with cleaning that up some time later. FYI, I documented the alternative to using custom install-data-local hooks in issue #310.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,314,2020-07-15T04:37:30Z,2020-07-22T15:35:28Z,2020-07-31T18:31:59Z,MERGED,True,8,5,3,https://github.com/oceandlr,move some examples files from /etc to /share,1,[],https://github.com/ovis-hpc/ovis/pull/314,https://github.com/valleydlr,10,https://github.com/ovis-hpc/ovis/pull/314#issuecomment-661021516,"Re issue #310
Moved aries_mmr_set_configs and hello_sampler_util from XXX/etc to XXX/share/doc/ovis-ldms-X.Y.Z/examples",I have no problem with this. The aries configs can be copied from one place just as well as another.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,314,2020-07-15T04:37:30Z,2020-07-22T15:35:28Z,2020-07-31T18:31:59Z,MERGED,True,8,5,3,https://github.com/oceandlr,move some examples files from /etc to /share,1,[],https://github.com/ovis-hpc/ovis/pull/314,https://github.com/oceandlr,11,https://github.com/ovis-hpc/ovis/pull/314#issuecomment-661320672,"Re issue #310
Moved aries_mmr_set_configs and hello_sampler_util from XXX/etc to XXX/share/doc/ovis-ldms-X.Y.Z/examples","ok @tom95858, ready to go",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,315,2020-07-15T21:01:36Z,2020-07-19T21:30:17Z,2020-08-11T21:32:15Z,MERGED,True,1,0,1,https://github.com/Snell1224,added libpapi_sampler.so to blacklist,1,[],https://github.com/ovis-hpc/ovis/pull/315,https://github.com/Snell1224,1,https://github.com/ovis-hpc/ovis/pull/315,"added ""libpapi_sampler.so"" to blacklist","added ""libpapi_sampler.so"" to blacklist",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,315,2020-07-15T21:01:36Z,2020-07-19T21:30:17Z,2020-08-11T21:32:15Z,MERGED,True,1,0,1,https://github.com/Snell1224,added libpapi_sampler.so to blacklist,1,[],https://github.com/ovis-hpc/ovis/pull/315,https://github.com/morrone,2,https://github.com/ovis-hpc/ovis/pull/315#issuecomment-660240848,"added ""libpapi_sampler.so"" to blacklist",Can you please elaborate on why we should do this?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,315,2020-07-15T21:01:36Z,2020-07-19T21:30:17Z,2020-08-11T21:32:15Z,MERGED,True,1,0,1,https://github.com/Snell1224,added libpapi_sampler.so to blacklist,1,[],https://github.com/ovis-hpc/ovis/pull/315,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/315#issuecomment-660704078,"added ""libpapi_sampler.so"" to blacklist","@morrone There are sampler plugins in v4  (including papi_sampler) which use the gnu linker dlopen ctor/dtor conventions to do initializations which are not valid (cause seg fault) unless there is a fully started ldmsd. The plugin api changes in v5 appear to have resolved this for the offending plugins in v4. These bad (mostly experimental) plugins cannot be dlopened to get their usage strings and then dlclosed, as is needed to support the 'ldmsd -u' command.
I believe that all the code in the v4 ctor blocks should have been created as call-once in the config() or/and sample method of the blacklisted plugins.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,316,2020-07-17T21:28:43Z,2020-07-19T20:04:44Z,2020-07-19T22:31:24Z,MERGED,True,48,0,1,https://github.com/morrone,Introduce create-release.yaml GitHub workflow,1,[],https://github.com/ovis-hpc/ovis/pull/316,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/316,"This introduces a new ""Create Release"" GitHub workflow, which automates
the process of creating a release on GitHub any time a new tag is pushed
to the repo.
The workflow triggers any time a new tag is pushed to the repo that
matches the pattern 'OVIS-4*'.
First the workflow builds the cannonical tarball.
Next the workflow generates a new release on the
https://github.com/ovis-hpc/ovis/releases page. The release notes
are taken from the body of the annotated tag.
Finally, the cannonical tarball is uploaded to the Assets of the
newly created release.","This introduces a new ""Create Release"" GitHub workflow, which automates
the process of creating a release on GitHub any time a new tag is pushed
to the repo.
The workflow triggers any time a new tag is pushed to the repo that
matches the pattern 'OVIS-4*'.
First the workflow builds the cannonical tarball.
Next the workflow generates a new release on the
https://github.com/ovis-hpc/ovis/releases page. The release notes
are taken from the body of the annotated tag.
Finally, the cannonical tarball is uploaded to the Assets of the
newly created release.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,316,2020-07-17T21:28:43Z,2020-07-19T20:04:44Z,2020-07-19T22:31:24Z,MERGED,True,48,0,1,https://github.com/morrone,Introduce create-release.yaml GitHub workflow,1,[],https://github.com/ovis-hpc/ovis/pull/316,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/316#issuecomment-660705178,"This introduces a new ""Create Release"" GitHub workflow, which automates
the process of creating a release on GitHub any time a new tag is pushed
to the repo.
The workflow triggers any time a new tag is pushed to the repo that
matches the pattern 'OVIS-4*'.
First the workflow builds the cannonical tarball.
Next the workflow generates a new release on the
https://github.com/ovis-hpc/ovis/releases page. The release notes
are taken from the body of the annotated tag.
Finally, the cannonical tarball is uploaded to the Assets of the
newly created release.","It appears this worked, as the releases page has a new item at the top for alpha.0",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,316,2020-07-17T21:28:43Z,2020-07-19T20:04:44Z,2020-07-19T22:31:24Z,MERGED,True,48,0,1,https://github.com/morrone,Introduce create-release.yaml GitHub workflow,1,[],https://github.com/ovis-hpc/ovis/pull/316,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/316#issuecomment-660718216,"This introduces a new ""Create Release"" GitHub workflow, which automates
the process of creating a release on GitHub any time a new tag is pushed
to the repo.
The workflow triggers any time a new tag is pushed to the repo that
matches the pattern 'OVIS-4*'.
First the workflow builds the cannonical tarball.
Next the workflow generates a new release on the
https://github.com/ovis-hpc/ovis/releases page. The release notes
are taken from the body of the annotated tag.
Finally, the cannonical tarball is uploaded to the Assets of the
newly created release.","It appears this worked, as the releases page has a new item at the top for alpha.0

@baallan, I do not think that the timing worked out for that. The tag probably got pushed to the repo before this workflow was pushed. The item for the alpha.0 tag in the releases page is the normal one that appears for any tag. If this had triggered, we would see a full release with attached tarball, and we would see the action that made it happen under the ""Actions"" tab.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,319,2020-07-20T19:38:07Z,2020-07-22T15:33:15Z,2020-07-22T15:33:15Z,MERGED,True,8,5,2,https://github.com/baallan,fix low device limit and missing error on procnetdev,1,[],https://github.com/ovis-hpc/ovis/pull/319,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/319,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,320,2020-07-20T19:49:27Z,2020-07-22T15:32:10Z,2020-07-22T15:32:10Z,MERGED,True,22,2,1,https://github.com/baallan,check gender file syntax earlier.,1,[],https://github.com/ovis-hpc/ovis/pull/320,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/320,failing to check asap means gender syntax errors can masquerade as other problems (no genders found for host) later. this fixes that.,failing to check asap means gender syntax errors can masquerade as other problems (no genders found for host) later. this fixes that.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,321,2020-07-20T20:24:19Z,2020-07-22T15:31:04Z,2020-07-22T15:31:04Z,MERGED,True,42,0,3,https://github.com/baallan,test for sampler fail handling,1,[],https://github.com/ovis-hpc/ovis/pull/321,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/321,"when a sampler fails to sample in v4, it is stopped. this PR provides a test of this failure sequence.","when a sampler fails to sample in v4, it is stopped. this PR provides a test of this failure sequence.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,321,2020-07-20T20:24:19Z,2020-07-22T15:31:04Z,2020-07-22T15:31:04Z,MERGED,True,42,0,3,https://github.com/baallan,test for sampler fail handling,1,[],https://github.com/ovis-hpc/ovis/pull/321,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/321#issuecomment-661320541,"when a sampler fails to sample in v4, it is stopped. this PR provides a test of this failure sequence.",@tom95858 the error dump on ldmsd exit i mentioned in today's phone call appears to be related to sampler handling rather than rdma. this pr reproduces the symptom even when sock is in use.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,325,2020-07-20T23:33:40Z,2020-07-22T15:33:41Z,2020-07-22T15:33:41Z,MERGED,True,4,2,1,https://github.com/baallan,add attrs to transport error output.,1,[],https://github.com/ovis-hpc/ovis/pull/325,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/325,more output (xprt options) in ldmsd_config if transport new fails.,more output (xprt options) in ldmsd_config if transport new fails.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,327,2020-07-21T05:30:31Z,2020-07-22T15:31:50Z,2020-07-22T15:31:50Z,MERGED,True,1,3,1,https://github.com/baallan,v4 fix ibnet makefile so dist is correct,1,[],https://github.com/ovis-hpc/ovis/pull/327,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/327,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,328,2020-07-22T04:15:43Z,2020-07-22T15:31:35Z,2020-08-26T21:29:16Z,MERGED,True,1,1,1,https://github.com/nichamon,json_parse_buffer uses wrong buffer when scan,1,[],https://github.com/ovis-hpc/ovis/pull/328,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/328,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,333,2020-07-23T01:07:16Z,2020-08-06T18:40:02Z,2020-08-06T18:40:02Z,MERGED,True,22,4,1,https://github.com/baallan,improve input error detection and messages on ibnet sampler config,1,[],https://github.com/ovis-hpc/ovis/pull/333,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/333,block scanning on other subsets of the same port if base or extended subset fails.,block scanning on other subsets of the same port if base or extended subset fails.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,334,2020-07-23T20:57:49Z,2020-07-23T23:13:14Z,2020-10-08T19:58:08Z,MERGED,True,0,13,1,https://github.com/nichamon,ldmsd_stream_publish_file waits for a non-existent reply.,1,[],https://github.com/ovis-hpc/ovis/pull/334,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/334,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,335,2020-07-23T21:11:33Z,2020-07-23T23:12:10Z,2020-07-23T23:12:10Z,MERGED,True,95,1,4,https://github.com/baallan,"add 'extra' option to synthetic, to have N clone sets",1,[],https://github.com/ovis-hpc/ovis/pull/335,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/335,"This generates many sets from a test sampler, but the names differ only in the numeric suffix, so it may not tease complex tree structures as desired.","This generates many sets from a test sampler, but the names differ only in the numeric suffix, so it may not tease complex tree structures as desired.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,336,2020-07-23T21:12:27Z,2020-07-23T23:11:07Z,2020-07-23T23:11:07Z,MERGED,True,1,0,1,https://github.com/baallan,V4 sock auth ovis leak,1,[],https://github.com/ovis-hpc/ovis/pull/336,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/336,Fix a leaked pointer in auth  ovis handshake,Fix a leaked pointer in auth  ovis handshake,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,337,2020-07-23T21:36:10Z,2020-07-25T19:08:08Z,2020-07-25T19:08:59Z,MERGED,True,7,2,1,https://github.com/baallan,add code to init entire ovis event structures including holes.,1,[],https://github.com/ovis-hpc/ovis/pull/337,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/337,"This stops numerous valgrind warnings when using sock, at low init code cost.","This stops numerous valgrind warnings when using sock, at low init code cost.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,337,2020-07-23T21:36:10Z,2020-07-25T19:08:08Z,2020-07-25T19:08:59Z,MERGED,True,7,2,1,https://github.com/baallan,add code to init entire ovis event structures including holes.,1,[],https://github.com/ovis-hpc/ovis/pull/337,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/337#issuecomment-663273941,"This stops numerous valgrind warnings when using sock, at low init code cost.","This is a performance hit, not a significant one, but a hit nonetheless. Is there a #define we can check to decide whether we're testing for real leaks or just shutting up valgrind testing. There are other issues in the transport btw fro the same reason, the message has padding holes and valgrind will complain that write is sending uninitialized data.
Don't get me wrong, I love valgrind, but I'm disinclined to consume ergs just to shut it up.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,337,2020-07-23T21:36:10Z,2020-07-25T19:08:08Z,2020-07-25T19:08:59Z,MERGED,True,7,2,1,https://github.com/baallan,add code to init entire ovis event structures including holes.,1,[],https://github.com/ovis-hpc/ovis/pull/337,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/337#issuecomment-663741854,"This stops numerous valgrind warnings when using sock, at low init code cost.","If this is data being transported over the network, it is definitely good practice to initialize it. Otherwise it could lead to unintentional data leaks. You could perhaps just zero the padding holes rather than the entire structure if that is really a concern.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,337,2020-07-23T21:36:10Z,2020-07-25T19:08:08Z,2020-07-25T19:08:59Z,MERGED,True,7,2,1,https://github.com/baallan,add code to init entire ovis event structures including holes.,1,[],https://github.com/ovis-hpc/ovis/pull/337,None,4,https://github.com/ovis-hpc/ovis/pull/337#issuecomment-663752974,"This stops numerous valgrind warnings when using sock, at low init code cost.","Hi @christopher J. Morrone <morrone2@llnl.gov>  could you please expound on
the 'data leaks'. How does this happen exactly?
…
On Fri, Jul 24, 2020 at 4:28 PM Christopher J. Morrone < ***@***.***> wrote:
 If this is data being transported over the network, it is definitely good
 practice to initialize it. Otherwise it could lead to unintentional data
 leaks. You could perhaps just zero the padding holes rather than the entire
 structure if that is really a concern.

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#337 (comment)>, or
 unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ACTLLTQQIIIOG2NGZVTMPE3R5H4INANCNFSM4PGEKLDA>
 .


-- 
Thomas Tucker, President, Open Grid Computing, Inc.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,337,2020-07-23T21:36:10Z,2020-07-25T19:08:08Z,2020-07-25T19:08:59Z,MERGED,True,7,2,1,https://github.com/baallan,add code to init entire ovis event structures including holes.,1,[],https://github.com/ovis-hpc/ovis/pull/337,https://github.com/morrone,5,https://github.com/ovis-hpc/ovis/pull/337#issuecomment-663757667,"This stops numerous valgrind warnings when using sock, at low init code cost.","Sure. If you malloc memory and don't initialize the buffer to known values, it may contain data previously used in the application for other purposes. If that buffer is then transmitted to another entity, that entity can inspect the uninitialized portion of the buffer and see things that were not intended to be seen.
Generally speaking, it is good practice to initialize the buffers to avoid that sort unintentional data exposure.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,337,2020-07-23T21:36:10Z,2020-07-25T19:08:08Z,2020-07-25T19:08:59Z,MERGED,True,7,2,1,https://github.com/baallan,add code to init entire ovis event structures including holes.,1,[],https://github.com/ovis-hpc/ovis/pull/337,https://github.com/tom95858,6,https://github.com/ovis-hpc/ovis/pull/337#issuecomment-663890177,"This stops numerous valgrind warnings when using sock, at low init code cost.","Thanks @morrone, I misinterpreted 'data leak' as memory leak.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,338,2020-07-24T19:03:52Z,2020-07-24T19:06:49Z,2020-07-24T19:06:49Z,MERGED,True,2,2,1,https://github.com/baallan,fix timing option input range,1,[],https://github.com/ovis-hpc/ovis/pull/338,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/338,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,339,2020-07-24T19:04:25Z,2020-07-24T19:06:07Z,2020-07-24T19:06:07Z,MERGED,True,2,2,1,https://github.com/baallan,fix interval default lookup for aggregators,1,[],https://github.com/ovis-hpc/ovis/pull/339,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/339,"ignore upstream aggrgator specs  for interval, offset in genders surfing","ignore upstream aggrgator specs  for interval, offset in genders surfing",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,340,2020-07-24T21:41:59Z,2020-07-24T21:51:16Z,2020-07-24T21:51:16Z,MERGED,True,1,1,1,https://github.com/baallan,fix dist rule for missing script in ibnet sampler,1,[],https://github.com/ovis-hpc/ovis/pull/340,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/340,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,341,2020-07-26T17:10:52Z,2020-07-27T01:38:59Z,2020-07-27T01:38:59Z,MERGED,True,67,2,3,https://github.com/baallan,v4 environment debugging script,2,[],https://github.com/ovis-hpc/ovis/pull/341,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/341,"When things go wrong, this lets users quickly check the environment for variables that might be interfering.
Also useful in pretesting activities in test automation.
Checking for environment variables used only in boot (systemd) scripts is out of scope for this tool.","When things go wrong, this lets users quickly check the environment for variables that might be interfering.
Also useful in pretesting activities in test automation.
Checking for environment variables used only in boot (systemd) scripts is out of scope for this tool.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,342,2020-07-26T20:00:26Z,2020-07-26T20:18:53Z,2020-09-11T03:25:20Z,MERGED,True,33,28,3,https://github.com/narategithub,python3 configure script,1,[],https://github.com/ovis-hpc/ovis/pull/342,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/342,"Modify autoconf configure script (top-level, lib/ and ldms/) to use
/usr/bin/python3 by default.
Also check that the python is version 3.6 or greater.","Modify autoconf configure script (top-level, lib/ and ldms/) to use
/usr/bin/python3 by default.
Also check that the python is version 3.6 or greater.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,342,2020-07-26T20:00:26Z,2020-07-26T20:18:53Z,2020-09-11T03:25:20Z,MERGED,True,33,28,3,https://github.com/narategithub,python3 configure script,1,[],https://github.com/ovis-hpc/ovis/pull/342,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/342#issuecomment-664035331,"Modify autoconf configure script (top-level, lib/ and ldms/) to use
/usr/bin/python3 by default.
Also check that the python is version 3.6 or greater.","Yes, sure, combining them is certainly simpler",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,343,2020-07-26T20:15:45Z,2020-07-26T20:21:22Z,2020-07-26T20:21:22Z,MERGED,True,152,5,1,https://github.com/baallan,add topology csv output for ldms-ibnet-sampler-gen,1,[],https://github.com/ovis-hpc/ovis/pull/343,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/343,feature added to dump topology tables for use with grafana queries,feature added to dump topology tables for use with grafana queries,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,344,2020-07-28T03:09:24Z,2020-07-28T03:11:39Z,2020-09-11T03:22:39Z,MERGED,True,0,1,1,https://github.com/narategithub,Remove an unused global static variable from ldmsd_stream.c,1,[],https://github.com/ovis-hpc/ovis/pull/344,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/344,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,344,2020-07-28T03:09:24Z,2020-07-28T03:11:39Z,2020-09-11T03:22:39Z,MERGED,True,0,1,1,https://github.com/narategithub,Remove an unused global static variable from ldmsd_stream.c,1,[],https://github.com/ovis-hpc/ovis/pull/344,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/344#issuecomment-664750262,,I'm merging this trivial fix now as OVIS-4 build failed if -Wall -Werror options are supplied.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,345,2020-07-28T05:41:21Z,2020-07-29T05:01:19Z,2020-10-08T19:58:06Z,CLOSED,False,119,11,1,https://github.com/nichamon,Refactor the ldmsd_stream_publish test program to really the publish API,1,[],https://github.com/ovis-hpc/ovis/pull/345,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/345,"Without the change, the ldmsd_stream_publish test program doesn't call
the ldmsd_stream_publish API which is the API used by any ldmsd stream
application. The change makes the test program call ldmsd_stream_publish
to really test the API and the underlying logic.","Without the change, the ldmsd_stream_publish test program doesn't call
the ldmsd_stream_publish API which is the API used by any ldmsd stream
application. The change makes the test program call ldmsd_stream_publish
to really test the API and the underlying logic.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,345,2020-07-28T05:41:21Z,2020-07-29T05:01:19Z,2020-10-08T19:58:06Z,CLOSED,False,119,11,1,https://github.com/nichamon,Refactor the ldmsd_stream_publish test program to really the publish API,1,[],https://github.com/ovis-hpc/ovis/pull/345,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/345#issuecomment-664789719,"Without the change, the ldmsd_stream_publish test program doesn't call
the ldmsd_stream_publish API which is the API used by any ldmsd stream
application. The change makes the test program call ldmsd_stream_publish
to really test the API and the underlying logic.",@tom95858  The change has been tested by the test script in the ldms-test repo.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,345,2020-07-28T05:41:21Z,2020-07-29T05:01:19Z,2020-10-08T19:58:06Z,CLOSED,False,119,11,1,https://github.com/nichamon,Refactor the ldmsd_stream_publish test program to really the publish API,1,[],https://github.com/ovis-hpc/ovis/pull/345,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/345#issuecomment-665431903,"Without the change, the ldmsd_stream_publish test program doesn't call
the ldmsd_stream_publish API which is the API used by any ldmsd stream
application. The change makes the test program call ldmsd_stream_publish
to really test the API and the underlying logic.","@tom95858 After I discussed with Narate, I will close this pull request. The ldmsd_stream_publish test program will be added to the ldms-test repo instead of modifying the one in the OVIS repo, so we could avoid unnecessary change in the source tree.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,346,2020-07-29T05:35:34Z,2020-07-30T19:37:03Z,2020-07-30T19:37:03Z,CLOSED,False,47,8,1,https://github.com/narategithub,zap_sock - write before posting to sq,1,[],https://github.com/ovis-hpc/ovis/pull/346,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/346,"This patch modifies zap_sock internal sending mechanism to directly
write to the socket and post the the remainder to the send queue (sq).
Previously, all send data were posted to sq and could cause a send delay
as sq is handled by another zap_sock thread.
This patch passed zap_test and all of the test cases in ldms-test
repository.","This patch modifies zap_sock internal sending mechanism to directly
write to the socket and post the the remainder to the send queue (sq).
Previously, all send data were posted to sq and could cause a send delay
as sq is handled by another zap_sock thread.
This patch passed zap_test and all of the test cases in ldms-test
repository.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,348,2020-07-30T19:40:47Z,2020-08-18T21:10:47Z,2020-09-11T03:26:17Z,CLOSED,False,20,22,1,https://github.com/narategithub,zap_sock - enable EPOLLOUT only when necessary,1,[],https://github.com/ovis-hpc/ovis/pull/348,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/348,"Enable EPOLLOUT only when write() returns EBUSY or EWOULDBLOCK.
This has passed zap_test and all test cases in ldms-test repo.","Enable EPOLLOUT only when write() returns EBUSY or EWOULDBLOCK.
This has passed zap_test and all test cases in ldms-test repo.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,348,2020-07-30T19:40:47Z,2020-08-18T21:10:47Z,2020-09-11T03:26:17Z,CLOSED,False,20,22,1,https://github.com/narategithub,zap_sock - enable EPOLLOUT only when necessary,1,[],https://github.com/ovis-hpc/ovis/pull/348,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/348#issuecomment-666640515,"Enable EPOLLOUT only when write() returns EBUSY or EWOULDBLOCK.
This has passed zap_test and all test cases in ldms-test repo.","@tom95858 v5 code is a bit different. But, I'll apply something similar to it as well.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,348,2020-07-30T19:40:47Z,2020-08-18T21:10:47Z,2020-09-11T03:26:17Z,CLOSED,False,20,22,1,https://github.com/narategithub,zap_sock - enable EPOLLOUT only when necessary,1,[],https://github.com/ovis-hpc/ovis/pull/348,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/348#issuecomment-675722478,"Enable EPOLLOUT only when write() returns EBUSY or EWOULDBLOCK.
This has passed zap_test and all test cases in ldms-test repo.",This change makes me nervous without sufficient scalability testing. Let's push this to 4.3.5/6 when we can get more miles on the scalability testing.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,349,2020-07-31T19:40:50Z,2020-08-02T18:02:16Z,2021-08-22T05:02:13Z,MERGED,True,1,0,1,https://github.com/oceandlr,flush stdout in hello_streams parser.pl,1,['V4'],https://github.com/ovis-hpc/ovis/pull/349,https://github.com/oceandlr,1,https://github.com/ovis-hpc/ovis/pull/349,flush stdout in hello_streams parser.pl,flush stdout in hello_streams parser.pl,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,350,2020-07-31T22:15:47Z,2020-08-18T21:04:49Z,2020-10-08T19:57:55Z,MERGED,True,33,18,3,https://github.com/nichamon,Remove the logic that supports multiple lookup on a set,1,['V4'],https://github.com/ovis-hpc/ovis/pull/350,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/350,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,350,2020-07-31T22:15:47Z,2020-08-18T21:04:49Z,2020-10-08T19:57:55Z,MERGED,True,33,18,3,https://github.com/nichamon,Remove the logic that supports multiple lookup on a set,1,['V4'],https://github.com/ovis-hpc/ovis/pull/350,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/350#issuecomment-667410703,,"@tom95858 I have removed the logic that supports multiple lookups on a set. I left the LOOKUP_SET_INFO alone, i.e., an application can call lookup with the LOOKUP_SET_INFO flag. Actually I would like to remove the whole thing out and change ldms_xprt_dir() so that it always delivers dir_upd.
With this change, if a producer looks up an existing set, the producer will keep trying to look up the set because the set is in the START state and LDMSD will print the error message that the set exists repeatedly. I could turn off the repeated error message.
I have sniff tested the change but not at scale.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,350,2020-07-31T22:15:47Z,2020-08-18T21:04:49Z,2020-10-08T19:57:55Z,MERGED,True,33,18,3,https://github.com/nichamon,Remove the logic that supports multiple lookup on a set,1,['V4'],https://github.com/ovis-hpc/ovis/pull/350,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/350#issuecomment-667809591,,"@tom95858 I have tested that with 2 producers pointing to the same set and 2-level aggregation. I tested the following scenarios.
The 2 sampler daemons were killed one-by-one.
The 2 sampler daemons were killed at the same time.
The 1st-level aggregator was killed while the 2 sampler daemons and the 2nd-level aggregator were running.
The 2 sampler daemons were killed and then the 2nd-level aggregator was killed.
There were no crashes.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,350,2020-07-31T22:15:47Z,2020-08-18T21:04:49Z,2020-10-08T19:57:55Z,MERGED,True,33,18,3,https://github.com/nichamon,Remove the logic that supports multiple lookup on a set,1,['V4'],https://github.com/ovis-hpc/ovis/pull/350,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/350#issuecomment-670135473,,"@nichamon rebuilding on stria, there's an function that could return a random error code even though it succeeded. static int send_req_cancel_push(struct ldms_rbuf_desc *r)
ldms_xprt.c:3333 or thereabouts needs rc initialized to zero.
Please patch.
I'm also working on testing your actual patch.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,350,2020-07-31T22:15:47Z,2020-08-18T21:04:49Z,2020-10-08T19:57:55Z,MERGED,True,33,18,3,https://github.com/nichamon,Remove the logic that supports multiple lookup on a set,1,['V4'],https://github.com/ovis-hpc/ovis/pull/350,https://github.com/baallan,5,https://github.com/ovis-hpc/ovis/pull/350#issuecomment-671024728,,"@nichamon I tried this + pr356 on stria and the l1 no longer crashes when the samplers all exit. For a limited number of cases tried, no sets linger either after sampler daemons are all gone.
I note that ""ldms_ls -x rdma ... $sampler_daemon"" still crashes as it exits with no obvious explanation suggested by valgrinding ldms_ls.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,350,2020-07-31T22:15:47Z,2020-08-18T21:04:49Z,2020-10-08T19:57:55Z,MERGED,True,33,18,3,https://github.com/nichamon,Remove the logic that supports multiple lookup on a set,1,['V4'],https://github.com/ovis-hpc/ovis/pull/350,https://github.com/nichamon,6,https://github.com/ovis-hpc/ovis/pull/350#issuecomment-671704863,,"@nichamon rebuilding on stria, there's an function that could return a random error code even though it succeeded. static int send_req_cancel_push(struct ldms_rbuf_desc *r)
ldms_xprt.c:3333 or thereabouts needs rc initialized to zero.
Please patch.
I'm also working on testing your actual patch.

@baallan I have created a patch #363 for the uninitialized variable warning/error. It is irrelevant from this patch. Have you seen the problem before? I wonder why it has just been unearthed.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,350,2020-07-31T22:15:47Z,2020-08-18T21:04:49Z,2020-10-08T19:57:55Z,MERGED,True,33,18,3,https://github.com/nichamon,Remove the logic that supports multiple lookup on a set,1,['V4'],https://github.com/ovis-hpc/ovis/pull/350,https://github.com/nichamon,7,https://github.com/ovis-hpc/ovis/pull/350#issuecomment-671715024,,"@nichamon I tried this + pr356 on stria and the l1 no longer crashes when the samplers all exit. For a limited number of cases tried, no sets linger either after sampler daemons are all gone.
I note that ""ldms_ls -x rdma ... $sampler_daemon"" still crashes as it exits with no obvious explanation suggested by valgrinding ldms_ls.

@baallan  You need to provide more info about the crash, e.g., valgrind log or gdb core dump. Did you give -v or -l when you started ldms_ls. Is it possible that there was a set on the sampler daemon that was being destroyed while ldms_ls exited?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,350,2020-07-31T22:15:47Z,2020-08-18T21:04:49Z,2020-10-08T19:57:55Z,MERGED,True,33,18,3,https://github.com/nichamon,Remove the logic that supports multiple lookup on a set,1,['V4'],https://github.com/ovis-hpc/ovis/pull/350,https://github.com/baallan,8,https://github.com/ovis-hpc/ovis/pull/350#issuecomment-672939725,,"crash occurs with or without -l -v, but not every single time. looking like a race.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,350,2020-07-31T22:15:47Z,2020-08-18T21:04:49Z,2020-10-08T19:57:55Z,MERGED,True,33,18,3,https://github.com/nichamon,Remove the logic that supports multiple lookup on a set,1,['V4'],https://github.com/ovis-hpc/ovis/pull/350,https://github.com/baallan,9,https://github.com/ovis-hpc/ovis/pull/350#issuecomment-672949023,,"seg fault reported in gdb:
#0  0x000040002118e780 in ibv_get_cq_event () from /lib64/libibverbs.so.1
#1  0x00004000000651e0 in cq_thread_proc (arg=<optimized out>) at zap_rdma.c:1204
#2  0x0000400000607c48 in start_thread (arg=0x40002159f200) at pthread_create.c:309
#3  0x00004000001ef600 in thread_start () at ../sysdeps/unix/sysv/linux/aarch64/clone.S:91

all threads dump:
Thread 8 (Thread 0x4000217af200 (LWP 128469)):
#0  0x00004000001ef7d4 in __GI_epoll_pwait (epfd=epfd@entry=8, events=events@entry=0x4000217ae8d8, maxevents=maxevents@entry=16, 
    timeout=timeout@entry=-1, set=set@entry=0x0) at ../sysdeps/unix/sysv/linux/epoll_pwait.c:48
#1  0x00004000001ef528 in epoll_wait (epfd=epfd@entry=8, events=events@entry=0x4000217ae8d8, maxevents=maxevents@entry=16, timeout=timeout@entry=-1)
    at ../sysdeps/unix/sysv/linux/generic/epoll_wait.c:27
#2  0x0000400000064100 in cm_thread_proc (arg=0x8) at zap_rdma.c:1732
#3  0x0000400000607c48 in start_thread (arg=0x4000217af200) at pthread_create.c:309
#4  0x00004000001ef600 in thread_start () at ../sysdeps/unix/sysv/linux/aarch64/clone.S:91

Thread 7 (Thread 0x40002159f200 (LWP 128468)):
#0  0x000040002118e780 in ibv_get_cq_event () from /lib64/libibverbs.so.1
#1  0x00004000000651e0 in cq_thread_proc (arg=<optimized out>) at zap_rdma.c:1204
#2  0x0000400000607c48 in start_thread (arg=0x40002159f200) at pthread_create.c:309
#3  0x00004000001ef600 in thread_start () at ../sysdeps/unix/sysv/linux/aarch64/clone.S:91

Thread 6 (Thread 0x40000110f200 (LWP 128465)):
#0  0x00004000001ba9d4 in nanosleep () at ../sysdeps/unix/syscall-template.S:83
#1  0x00004000001ba688 in __sleep (seconds=0, seconds@entry=60) at ../sysdeps/unix/sysv/linux/sleep.c:137
#2  0x00004000000a7cd0 in delete_proc (arg=<optimized out>) at ldms.c:2665
#3  0x0000400000607c48 in start_thread (arg=0x40000110f200) at pthread_create.c:309
#4  0x00004000001ef600 in thread_start () at ../sysdeps/unix/sysv/linux/aarch64/clone.S:91

Thread 5 (Thread 0x400000eff200 (LWP 128464)):
#0  0x000040000060c008 in __pthread_cond_wait (cond=0x430290, mutex=0x430260) at pthread_cond_wait.c:153
#1  0x00004000001fc664 in __pthread_cond_wait (cond=<optimized out>, mutex=<optimized out>) at forward.c:149
#2  0x00004000004e21cc in zap_event_thread_proc (arg=0x430250) at zap.c:691
#3  0x0000400000607c48 in start_thread (arg=0x400000eff200) at pthread_create.c:309
#4  0x00004000001ef600 in thread_start () at ../sysdeps/unix/sysv/linux/aarch64/clone.S:91

Thread 4 (Thread 0x400000cef200 (LWP 128463)):
#0  0x000040000060c008 in __pthread_cond_wait (cond=0x4301d0, mutex=0x4301a0) at pthread_cond_wait.c:153
#1  0x00004000001fc664 in __pthread_cond_wait (cond=<optimized out>, mutex=<optimized out>) at forward.c:149
#2  0x00004000004e21cc in zap_event_thread_proc (arg=0x430190) at zap.c:691
#3  0x0000400000607c48 in start_thread (arg=0x400000cef200) at pthread_create.c:309
#4  0x00004000001ef600 in thread_start () at ../sysdeps/unix/sysv/linux/aarch64/clone.S:91

Thread 3 (Thread 0x400000adf200 (LWP 128462)):
#0  0x000040000060c008 in __pthread_cond_wait (cond=0x430110, mutex=0x4300e0) at pthread_cond_wait.c:153
#1  0x00004000001fc664 in __pthread_cond_wait (cond=<optimized out>, mutex=<optimized out>) at forward.c:149
#2  0x00004000004e21cc in zap_event_thread_proc (arg=0x4300d0) at zap.c:691
#3  0x0000400000607c48 in start_thread (arg=0x400000adf200) at pthread_create.c:309
#4  0x00004000001ef600 in thread_start () at ../sysdeps/unix/sysv/linux/aarch64/clone.S:91

Thread 2 (Thread 0x4000008cf200 (LWP 128461)):
#0  0x000040000060c008 in __pthread_cond_wait (cond=0x430050, mutex=0x430020) at pthread_cond_wait.c:153
#1  0x00004000001fc664 in __pthread_cond_wait (cond=<optimized out>, mutex=<optimized out>) at forward.c:149
#2  0x00004000004e21cc in zap_event_thread_proc (arg=0x430010) at zap.c:691
---Type <return> to continue, or q <return> to quit---
#3  0x0000400000607c48 in start_thread (arg=0x4000008cf200) at pthread_create.c:309
#4  0x00004000001ef600 in thread_start () at ../sysdeps/unix/sysv/linux/aarch64/clone.S:91

Thread 1 (Thread 0x400000037c80 (LWP 128460)):
#0  0x000040000018d1ec in _int_free (av=0x400000290530 <main_arena>, p=0x435480, have_lock=0) at malloc.c:3925
#1  0x00004000212a5be0 in __trans_list_clear () from /lib64/libnl-3.so.200
#2  0x000040000000e9e0 in _dl_fini () at dl-fini.c:253
#3  0x000040000014879c in __run_exit_handlers (status=status@entry=0, listp=0x4000002904e8 <__exit_funcs>, 
    run_list_atexit=run_list_atexit@entry=true) at exit.c:77
#4  0x00004000001487c4 in __GI_exit (status=status@entry=0) at exit.c:99
#5  0x0000000000403ddc in main (argc=<optimized out>, argv=<optimized out>) at ldms_ls.c:1034
(gdb)",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,350,2020-07-31T22:15:47Z,2020-08-18T21:04:49Z,2020-10-08T19:57:55Z,MERGED,True,33,18,3,https://github.com/nichamon,Remove the logic that supports multiple lookup on a set,1,['V4'],https://github.com/ovis-hpc/ovis/pull/350,https://github.com/baallan,10,https://github.com/ovis-hpc/ovis/pull/350#issuecomment-672953470,,@nichamon nothing else going on on the sampler daemon (other than samples possibly being updated) while ldms_ls is crashing.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,351,2020-08-01T03:01:02Z,2020-08-01T03:02:45Z,2020-08-01T03:02:46Z,MERGED,True,11,7,2,https://github.com/baallan,fix missing destdir and broken uninstall rules in stream makefiles,1,[],https://github.com/ovis-hpc/ovis/pull/351,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/351,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,352,2020-08-02T00:21:38Z,2020-08-02T02:22:12Z,2020-08-02T02:22:12Z,MERGED,True,11,11,1,https://github.com/oceandlr,fix missing rc initialization,1,"['Stores', 'V4']",https://github.com/ovis-hpc/ovis/pull/352,https://github.com/oceandlr,1,https://github.com/ovis-hpc/ovis/pull/352,"Initialize rc on line 106.
All other changes are whitespace.","Initialize rc on line 106.
All other changes are whitespace.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,353,2020-08-02T03:29:15Z,2020-08-02T03:30:31Z,2020-09-11T03:26:10Z,MERGED,True,4,12,2,https://github.com/narategithub,Remove unused vars from tutorial store and sampler,1,[],https://github.com/ovis-hpc/ovis/pull/353,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/353,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,353,2020-08-02T03:29:15Z,2020-08-02T03:30:31Z,2020-09-11T03:26:10Z,MERGED,True,4,12,2,https://github.com/narategithub,Remove unused vars from tutorial store and sampler,1,[],https://github.com/ovis-hpc/ovis/pull/353,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/353#issuecomment-667620834,,@oceandlr I'm merging this in as OVIS-4 won't build with -Wall -Werror when tutorial store and sampler are enabled.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,353,2020-08-02T03:29:15Z,2020-08-02T03:30:31Z,2020-09-11T03:26:10Z,MERGED,True,4,12,2,https://github.com/narategithub,Remove unused vars from tutorial store and sampler,1,[],https://github.com/ovis-hpc/ovis/pull/353,https://github.com/oceandlr,3,https://github.com/ovis-hpc/ovis/pull/353#issuecomment-667621196,,"Thanks. Maybe someone can update the build check to use those flags
I don't know how it currently works (maybe @morrone @baallan @narategithub can tell me where to look)",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,353,2020-08-02T03:29:15Z,2020-08-02T03:30:31Z,2020-09-11T03:26:10Z,MERGED,True,4,12,2,https://github.com/narategithub,Remove unused vars from tutorial store and sampler,1,[],https://github.com/ovis-hpc/ovis/pull/353,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/353#issuecomment-667698260,,"@oceandlr Commonly we use -Wall (enable a common set of warnings) but not Werror, which converts all warnings into errors. LDMS has almost never been 'warning clean' though most of the plugins are. gcc (and certain language committees) are fond of including warnings about stuff that is stylistic rather than affecting generated code.
As a project we do mostly prefer to eradicate unused variables.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,353,2020-08-02T03:29:15Z,2020-08-02T03:30:31Z,2020-09-11T03:26:10Z,MERGED,True,4,12,2,https://github.com/narategithub,Remove unused vars from tutorial store and sampler,1,[],https://github.com/ovis-hpc/ovis/pull/353,https://github.com/oceandlr,5,https://github.com/ovis-hpc/ovis/pull/353#issuecomment-667698636,,"Ok. I was just wondering if putting it in the check would help discovery of such variables, however I see there would be other issues. I will make sure I check with -Wall in the future before putting in a request, to keep this from happening again.
thanks!",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,353,2020-08-02T03:29:15Z,2020-08-02T03:30:31Z,2020-09-11T03:26:10Z,MERGED,True,4,12,2,https://github.com/narategithub,Remove unused vars from tutorial store and sampler,1,[],https://github.com/ovis-hpc/ovis/pull/353,https://github.com/morrone,6,https://github.com/ovis-hpc/ovis/pull/353#issuecomment-667707040,,"@baallan , @oceandlr  -Wall of course turns on a whole class of warnings, but we could certainly introduce automating build testing that uses a smaller set of warnings. For instance, we could used -Wunused-variable. Or we could use -Wunused and get a catch all of the unused warnings.
I am happy to assist with this. With github actions/workflows, the main limitation is that the Linux VMs on github (GitHub-hosted runners) are only Ubuntu. We would need to work out a reasonable set of ldms configure options that will work with standard packages available under Ubuntu 18.04 (or 20.04 soon). But there is probably a good deal that we can do with that.
Maybe we should start a new issue to discuss the expansion of automated testing?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,354,2020-08-02T07:15:05Z,2020-08-02T17:56:41Z,2020-08-02T17:56:41Z,MERGED,True,2,1,1,https://github.com/baallan,fix crash on exit in hello_stream_store.c,2,[],https://github.com/ovis-hpc/ovis/pull/354,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/354,"fclose does not accept null, which will happen if the plugin is
loaded but never used, as in ldmsd -u.","fclose does not accept null, which will happen if the plugin is
loaded but never used, as in ldmsd -u.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,354,2020-08-02T07:15:05Z,2020-08-02T17:56:41Z,2020-08-02T17:56:41Z,MERGED,True,2,1,1,https://github.com/baallan,fix crash on exit in hello_stream_store.c,2,[],https://github.com/ovis-hpc/ovis/pull/354,https://github.com/oceandlr,2,https://github.com/ovis-hpc/ovis/pull/354#issuecomment-667703082,"fclose does not accept null, which will happen if the plugin is
loaded but never used, as in ldmsd -u.","There are additional changes in here re the lock which aren't consistent with what is in store_flatfile and store_csv.
I am fine with the file close, but I don't know what to do with the other stuff. @baallan",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,354,2020-08-02T07:15:05Z,2020-08-02T17:56:41Z,2020-08-02T17:56:41Z,MERGED,True,2,1,1,https://github.com/baallan,fix crash on exit in hello_stream_store.c,2,[],https://github.com/ovis-hpc/ovis/pull/354,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/354#issuecomment-667703301,"fclose does not accept null, which will happen if the plugin is
loaded but never used, as in ldmsd -u.",will simplify to exclude the mutex change,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,356,2020-08-03T05:18:07Z,2020-08-18T21:05:06Z,2020-10-08T19:57:58Z,MERGED,True,9,2,1,https://github.com/nichamon,ldms_set_delete checks if the set exists in the id tree before removing it.,1,[],https://github.com/ovis-hpc/ovis/pull/356,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/356,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,356,2020-08-03T05:18:07Z,2020-08-18T21:05:06Z,2020-10-08T19:57:58Z,MERGED,True,9,2,1,https://github.com/nichamon,ldms_set_delete checks if the set exists in the id tree before removing it.,1,[],https://github.com/ovis-hpc/ovis/pull/356,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/356#issuecomment-667809130,,"@tom95858  I have tested that with 2 producers pointing to the same set and 2-level aggregation. I tested the following scenarios.
The 2 sampler daemons were killed one-by-one.
The 2 sampler daemons were killed at the same time.
The 1st-level aggregator was killed while the 2 sampler daemons and the 2nd-level aggregator were running.
The 2 sampler daemons were killed and then the 2nd-level aggregator was killed.
There were no crashes.
I have also tested this with the patch that removes the logic supporting multiple lookups (Pull request #350) with the same scenarios.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,359,2020-08-04T18:52:25Z,2020-08-06T06:03:18Z,2020-09-11T03:26:29Z,MERGED,True,35,37,1,https://github.com/narategithub,zap_sock - only enable EPOLLOUT when necessary,1,[],https://github.com/ovis-hpc/ovis/pull/359,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/359,This passed zap_test and all test cases in ldms-test repository.,This passed zap_test and all test cases in ldms-test repository.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,359,2020-08-04T18:52:25Z,2020-08-06T06:03:18Z,2020-09-11T03:26:29Z,MERGED,True,35,37,1,https://github.com/narategithub,zap_sock - only enable EPOLLOUT when necessary,1,[],https://github.com/ovis-hpc/ovis/pull/359,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/359#issuecomment-668766106,This passed zap_test and all test cases in ldms-test repository.,This is for v5.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,360,2020-08-05T19:49:45Z,2020-08-06T06:02:32Z,2020-09-11T03:26:22Z,MERGED,True,829,1084,47,https://github.com/narategithub,Single autoconf,1,[],https://github.com/ovis-hpc/ovis/pull/360,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/360,"Combine lib & ldms autoconf into single top-level autoconf and address
the affected build items.
[x] can make dist
[x] The binaries built and installed from the dist tar ball passed all
tests in ldms-test repository.","Combine lib & ldms autoconf into single top-level autoconf and address
the affected build items.
[x] can make dist
[x] The binaries built and installed from the dist tar ball passed all
tests in ldms-test repository.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,363,2020-08-11T03:33:07Z,2020-08-18T21:05:24Z,2020-08-26T21:27:35Z,MERGED,True,1,1,1,https://github.com/nichamon,ldms_xprt: send_req_cancel_push() returns a random value on success,1,[],https://github.com/ovis-hpc/ovis/pull/363,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/363,"The rc variable wasn't initialized so the function might return a random
number on success.","The rc variable wasn't initialized so the function might return a random
number on success.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,363,2020-08-11T03:33:07Z,2020-08-18T21:05:24Z,2020-08-26T21:27:35Z,MERGED,True,1,1,1,https://github.com/nichamon,ldms_xprt: send_req_cancel_push() returns a random value on success,1,[],https://github.com/ovis-hpc/ovis/pull/363,https://github.com/morrone,2,https://github.com/ovis-hpc/ovis/pull/363#issuecomment-672070682,"The rc variable wasn't initialized so the function might return a random
number on success.","A good git commit message should describe what the commit does. In this case, the commit message is more of a bug report. This is a tiny patch, so a short message is certainly acceptable. But a better commit message might be:
Initialize return code in ldms_xprt.c:send_req_cancel_push()",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,363,2020-08-11T03:33:07Z,2020-08-18T21:05:24Z,2020-08-26T21:27:35Z,MERGED,True,1,1,1,https://github.com/nichamon,ldms_xprt: send_req_cancel_push() returns a random value on success,1,[],https://github.com/ovis-hpc/ovis/pull/363,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/363#issuecomment-672077682,"The rc variable wasn't initialized so the function might return a random
number on success.","Here's a good guide for git commit messages that I think we should strive to follow:
https://chris.beams.io/posts/git-commit/#seven-rules",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,364,2020-08-12T02:26:22Z,2020-08-12T02:37:24Z,2020-08-26T21:27:39Z,MERGED,True,44,21,17,https://github.com/nichamon,Fix linking flags,1,[],https://github.com/ovis-hpc/ovis/pull/364,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/364,"Replace the linking flags of ovis libraries from -l to *.la. Otherwise, ovis cannot be built on Ubuntu.","Replace the linking flags of ovis libraries from -l to *.la. Otherwise, ovis cannot be built on Ubuntu.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,364,2020-08-12T02:26:22Z,2020-08-12T02:37:24Z,2020-08-26T21:27:39Z,MERGED,True,44,21,17,https://github.com/nichamon,Fix linking flags,1,[],https://github.com/ovis-hpc/ovis/pull/364,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/364#issuecomment-673022816,"Replace the linking flags of ovis libraries from -l to *.la. Otherwise, ovis cannot be built on Ubuntu.","We keep changing these back and forth. Let's get to the bottom of why this doesn't work on Ubunto because it should. binding with -l has other issues, in particular where the library actually comes from.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,364,2020-08-12T02:26:22Z,2020-08-12T02:37:24Z,2020-08-26T21:27:39Z,MERGED,True,44,21,17,https://github.com/nichamon,Fix linking flags,1,[],https://github.com/ovis-hpc/ovis/pull/364,https://github.com/narategithub,3,https://github.com/ovis-hpc/ovis/pull/364#issuecomment-673054718,"Replace the linking flags of ovis libraries from -l to *.la. Otherwise, ovis cannot be built on Ubuntu.","This patch removes the use of -l, and uses libtool *.la for the in-project libraries. Are you saying that we were against using libtool '*.la'?


I will dig into why it wasn't working on Ubuntu later. But, I was surprised it worked on CentOS (without this patch) because those -l<our-lib> should fail because the libraries are being built and installed. ... I'll dig into it when I have time 😄 .",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,364,2020-08-12T02:26:22Z,2020-08-12T02:37:24Z,2020-08-26T21:27:39Z,MERGED,True,44,21,17,https://github.com/nichamon,Fix linking flags,1,[],https://github.com/ovis-hpc/ovis/pull/364,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/364#issuecomment-673084445,"Replace the linking flags of ovis libraries from -l to *.la. Otherwise, ovis cannot be built on Ubuntu.","It appears configure.ac lost OPTION_LIB_FLAGS([OVIS]) and OPTION_INCLUDE_FLAGS in some refactorization.
Without that, or an equivalent, a lot of linking stuff is going to break.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,364,2020-08-12T02:26:22Z,2020-08-12T02:37:24Z,2020-08-26T21:27:39Z,MERGED,True,44,21,17,https://github.com/nichamon,Fix linking flags,1,[],https://github.com/ovis-hpc/ovis/pull/364,https://github.com/narategithub,5,https://github.com/ovis-hpc/ovis/pull/364#issuecomment-673187899,"Replace the linking flags of ovis libraries from -l to *.la. Otherwise, ovis cannot be built on Ubuntu.","@baallan Could you be more specific? This is master branch. You can see the single autoconf patch here f4409ff. It is based on the combination of configure.ac, lib/configure.ac and ldms/configure.ac. I have also make dist and build from the generated dist tarball. Maybe I'm missing something?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,364,2020-08-12T02:26:22Z,2020-08-12T02:37:24Z,2020-08-26T21:27:39Z,MERGED,True,44,21,17,https://github.com/nichamon,Fix linking flags,1,[],https://github.com/ovis-hpc/ovis/pull/364,https://github.com/baallan,6,https://github.com/ovis-hpc/ovis/pull/364#issuecomment-673240587,"Replace the linking flags of ovis libraries from -l to *.la. Otherwise, ovis cannot be built on Ubuntu.","You may want to compare the ovis-4 top configure.ac to your configure.ac. Aside from any new plugins and directory renamings, I would expect them to be very similar. Lines 60 -110 of https://github.com/ovis-hpc/ovis/blob/OVIS-4/configure.ac#L10 cause lib and include flags to be well-defined for all the supporting libraries without using directory prefixes in includes.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,370,2020-08-18T22:37:36Z,2020-08-25T06:22:40Z,2020-08-25T06:22:40Z,MERGED,True,13,0,3,https://github.com/baallan,added new static-test script for munge auth,1,[],https://github.com/ovis-hpc/ovis/pull/370,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/370,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,371,2020-08-19T20:11:30Z,2020-08-20T22:43:08Z,2020-08-20T22:43:08Z,MERGED,True,38,8,1,https://github.com/baallan,add better error messages for plugins usage query,1,[],https://github.com/ovis-hpc/ovis/pull/371,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/371,"fixes #357  . issue messages only after all checks are complete, except for invalid path type warnings.","fixes #357  . issue messages only after all checks are complete, except for invalid path type warnings.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,372,2020-08-19T20:49:16Z,2020-08-20T21:25:30Z,2020-08-20T21:25:30Z,MERGED,True,7,7,7,https://github.com/baallan,fix spaces missing after sampler names in config usage lines,1,['V4'],https://github.com/ovis-hpc/ovis/pull/372,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/372,fixes #358,fixes #358,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,373,2020-08-20T02:42:30Z,2020-08-20T21:24:43Z,2020-09-11T03:26:26Z,MERGED,True,6,7,1,https://github.com/narategithub,Fix zap_fabric connect buffer overrun,1,[],https://github.com/ovis-hpc/ovis/pull/373,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/373,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,374,2020-08-20T21:22:53Z,2020-08-20T21:23:01Z,2020-08-20T21:23:24Z,MERGED,True,21,8,2,https://github.com/tom95858,Add pthread_cancel/join logic to the RDMA transport,1,[],https://github.com/ovis-hpc/ovis/pull/374,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/374,"The mlx5 driver now has logic that destroys the verbs
context on exit. This resulted in applications such
as ldms_ls crashing on exit.
Destructor logic has been added to the Zap RDMA
transport driver to cancel and join the threads
that were using these mlx5 resources.","The mlx5 driver now has logic that destroys the verbs
context on exit. This resulted in applications such
as ldms_ls crashing on exit.
Destructor logic has been added to the Zap RDMA
transport driver to cancel and join the threads
that were using these mlx5 resources.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,375,2020-08-21T21:15:26Z,2020-08-21T21:16:02Z,2020-08-26T21:26:08Z,CLOSED,False,62688,44893,827,https://github.com/nichamon,Fix races between set delete and disconnect paths,591,[],https://github.com/ovis-hpc/ovis/pull/375,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/375,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,375,2020-08-21T21:15:26Z,2020-08-21T21:16:02Z,2020-08-26T21:26:08Z,CLOSED,False,62688,44893,827,https://github.com/nichamon,Fix races between set delete and disconnect paths,591,[],https://github.com/ovis-hpc/ovis/pull/375,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/375#issuecomment-678511410,,Wrong destination branch!,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,376,2020-08-21T21:18:05Z,2020-08-21T23:33:39Z,2020-08-26T21:26:08Z,MERGED,True,8,1,1,https://github.com/nichamon,Fix races between the set delete and disconnect paths,2,[],https://github.com/ovis-hpc/ovis/pull/376,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/376,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,377,2020-08-25T04:07:08Z,2020-08-25T06:21:49Z,2020-08-26T21:26:05Z,MERGED,True,14,7,1,https://github.com/nichamon,Fix the build problem of hello_stream on Ubuntu,1,[],https://github.com/ovis-hpc/ovis/pull/377,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/377,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,378,2020-08-25T22:15:45Z,2020-08-27T20:32:20Z,2020-08-27T20:32:20Z,MERGED,True,10,10,2,https://github.com/baallan,fixes distcheck errors from hello_stream,1,[],https://github.com/ovis-hpc/ovis/pull/378,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/378,This solves makefile.am bugs found by Sara from hello example files.,This solves makefile.am bugs found by Sara from hello example files.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,379,2020-08-26T16:41:02Z,2020-08-26T19:11:45Z,2020-09-11T03:25:46Z,MERGED,True,5,7,1,https://github.com/narategithub,Fix `strgp_start` ldmsd scripting translator,1,[],https://github.com/ovis-hpc/ovis/pull/379,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/379,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,380,2020-08-26T21:23:31Z,2020-08-31T22:08:55Z,2020-08-31T22:08:55Z,MERGED,True,74,24,1,https://github.com/nichamon,Fix a crash when a config file contains a line longer than 8172.,1,[],https://github.com/ovis-hpc/ovis/pull/380,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/380,"When a line in a configuraton file is longer than the default maximum
message size of the config file cfg_xprt which is 8172 characters.
ldmsd_config.c:__process_config_file() would pass a record of the whole
request to ldmsd_config.c:__req_filter_failover() which assumes that it
always receives a whole request.
Instead of changing __req_filter_failover() , __process_config_file()
will always pass a whole request to __req_filter_failover(). This is to
avoid changing the failover logic and make a minimal change.","When a line in a configuraton file is longer than the default maximum
message size of the config file cfg_xprt which is 8172 characters.
ldmsd_config.c:__process_config_file() would pass a record of the whole
request to ldmsd_config.c:__req_filter_failover() which assumes that it
always receives a whole request.
Instead of changing __req_filter_failover() , __process_config_file()
will always pass a whole request to __req_filter_failover(). This is to
avoid changing the failover logic and make a minimal change.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,381,2020-08-26T22:00:31Z,2020-09-01T00:25:47Z,2020-10-08T19:57:37Z,MERGED,True,682,1080,1,https://github.com/nichamon,Refactor the test_sampler plugin,1,[],https://github.com/ovis-hpc/ovis/pull/381,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/381,"Without the patch, the test_sampler plugin requests multiple 'config'
lines to define a schema and to add a set. This design is incompatible
with the new JSON configuration protocol. Moreover, the test_sampler
plugin was extended many times, and its code has become complicated.
The change simplifies the plugin code and makes it compatible with the
JSON protocol.","Without the patch, the test_sampler plugin requests multiple 'config'
lines to define a schema and to add a set. This design is incompatible
with the new JSON configuration protocol. Moreover, the test_sampler
plugin was extended many times, and its code has become complicated.
The change simplifies the plugin code and makes it compatible with the
JSON protocol.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,381,2020-08-26T22:00:31Z,2020-09-01T00:25:47Z,2020-10-08T19:57:37Z,MERGED,True,682,1080,1,https://github.com/nichamon,Refactor the test_sampler plugin,1,[],https://github.com/ovis-hpc/ovis/pull/381,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/381#issuecomment-681146339,"Without the patch, the test_sampler plugin requests multiple 'config'
lines to define a schema and to add a set. This design is incompatible
with the new JSON configuration protocol. Moreover, the test_sampler
plugin was extended many times, and its code has become complicated.
The change simplifies the plugin code and makes it compatible with the
JSON protocol.",@narategithub If you could skim through whether the change violated LDMSD plugin interface or not. I refactored it following the plugin interface document.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,382,2020-08-26T22:01:52Z,2020-09-01T00:25:32Z,2020-10-08T19:57:43Z,MERGED,True,3,0,1,https://github.com/nichamon,Handle Updater push mode,1,[],https://github.com/ovis-hpc/ovis/pull/382,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/382,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,382,2020-08-26T22:01:52Z,2020-09-01T00:25:32Z,2020-10-08T19:57:43Z,MERGED,True,3,0,1,https://github.com/nichamon,Handle Updater push mode,1,[],https://github.com/ovis-hpc/ovis/pull/382,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/382#issuecomment-681146877,,@narategithub I forgot to extract the push attribute from the JSON request object of Updaters.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,383,2020-09-01T04:40:44Z,2020-09-01T05:21:55Z,2020-11-09T03:56:08Z,MERGED,True,8,5,1,https://github.com/nichamon,Fix failover configuration buffer reset issue,1,[],https://github.com/ovis-hpc/ovis/pull/383,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/383,"The bug is that the buffer that reads the content from a configuration
file isn't reset if the previous request goes though the deferred
filter.","The bug is that the buffer that reads the content from a configuration
file isn't reset if the previous request goes though the deferred
filter.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,383,2020-09-01T04:40:44Z,2020-09-01T05:21:55Z,2020-11-09T03:56:08Z,MERGED,True,8,5,1,https://github.com/nichamon,Fix failover configuration buffer reset issue,1,[],https://github.com/ovis-hpc/ovis/pull/383,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/383#issuecomment-684249892,"The bug is that the buffer that reads the content from a configuration
file isn't reset if the previous request goes though the deferred
filter.","please add a summary commit message like:
Fix deferred filter buffer reset issue
before the remainder of your commit message and resubmit your request.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,383,2020-09-01T04:40:44Z,2020-09-01T05:21:55Z,2020-11-09T03:56:08Z,MERGED,True,8,5,1,https://github.com/nichamon,Fix failover configuration buffer reset issue,1,[],https://github.com/ovis-hpc/ovis/pull/383,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/383#issuecomment-684258915,"The bug is that the buffer that reads the content from a configuration
file isn't reset if the previous request goes though the deferred
filter.","To be specific:
Fix failover configuration buffer reset issue
If the configuration file contains the commands
failover_start, prdcr_start_regex, prdcr_start,
updtr_start or strgp_start, the
LDMSD will fail at the configuration stage",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,383,2020-09-01T04:40:44Z,2020-09-01T05:21:55Z,2020-11-09T03:56:08Z,MERGED,True,8,5,1,https://github.com/nichamon,Fix failover configuration buffer reset issue,1,[],https://github.com/ovis-hpc/ovis/pull/383,https://github.com/nichamon,4,https://github.com/ovis-hpc/ovis/pull/383#issuecomment-684272018,"The bug is that the buffer that reads the content from a configuration
file isn't reset if the previous request goes though the deferred
filter.",@tom95858 I revised the commit message as requested.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,384,2020-09-01T20:41:53Z,2020-09-02T15:30:24Z,2020-09-02T15:30:24Z,MERGED,True,1,1,1,https://github.com/baallan,fix make distcheck fail on aarch64 due to -msse4.2 flag,1,[],https://github.com/ovis-hpc/ovis/pull/384,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/384,"The crc-based functions enabled with sse42 on some compilers/platforms are not used when CITYSLIM is defined, so omitting the flag has no effect on ldms use of cityhash.","The crc-based functions enabled with sse42 on some compilers/platforms are not used when CITYSLIM is defined, so omitting the flag has no effect on ldms use of cityhash.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,385,2020-09-02T00:04:24Z,2020-09-02T15:30:47Z,2020-09-02T15:30:48Z,MERGED,True,73,27,3,https://github.com/baallan,V4 ibnet improvements,2,[],https://github.com/ovis-hpc/ovis/pull/385,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/385,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,386,2020-09-02T05:41:44Z,2020-09-02T15:31:38Z,2020-09-11T03:26:07Z,MERGED,True,1,1,1,https://github.com/narategithub,Trailing space nits in ldmsd.c,1,[],https://github.com/ovis-hpc/ovis/pull/386,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/386,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,387,2020-09-02T05:42:15Z,2020-09-08T15:20:49Z,2020-09-11T03:26:03Z,MERGED,True,42,14,3,https://github.com/narategithub,V4 listen host,2,[],https://github.com/ovis-hpc/ovis/pull/387,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/387,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,388,2020-09-02T05:42:40Z,2020-09-08T15:21:21Z,2020-09-11T03:26:00Z,MERGED,True,23,20,1,https://github.com/narategithub,Discard the known list of ldms_xprt,1,[],https://github.com/ovis-hpc/ovis/pull/388,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/388,"Discard the use of a fixed list of know ldms_xprt and let zap_get()
discover the specified transport library. The ldms_zap_tbl replaces
the ldms_zap_list to maintain the plugins that have already been
loaded.","Discard the use of a fixed list of know ldms_xprt and let zap_get()
discover the specified transport library. The ldms_zap_tbl replaces
the ldms_zap_list to maintain the plugins that have already been
loaded.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,389,2020-09-02T05:43:34Z,2020-09-08T15:21:40Z,2020-09-11T03:26:13Z,MERGED,True,257,228,2,https://github.com/narategithub,V4 zap fabric,5,[],https://github.com/ovis-hpc/ovis/pull/389,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/389,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,390,2020-09-03T15:32:31Z,2020-09-08T15:19:19Z,2020-09-08T15:19:19Z,MERGED,True,233,0,5,https://github.com/Snell1224,Added test script that executes ldms-static-test.sh for all enabled plugin samplers,1,[],https://github.com/ovis-hpc/ovis/pull/390,https://github.com/Snell1224,1,https://github.com/ovis-hpc/ovis/pull/390,Invoke ldms-static-test.sh for all enabled plugins during installation. Man Page included,Invoke ldms-static-test.sh for all enabled plugins during installation. Man Page included,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,390,2020-09-03T15:32:31Z,2020-09-08T15:19:19Z,2020-09-08T15:19:19Z,MERGED,True,233,0,5,https://github.com/Snell1224,Added test script that executes ldms-static-test.sh for all enabled plugin samplers,1,[],https://github.com/ovis-hpc/ovis/pull/390,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/390#issuecomment-686709117,Invoke ldms-static-test.sh for all enabled plugins during installation. Man Page included,"Hi Sara,
Please change the commit message to something like the following:


The commit message should inform someone about what the change is and why it was made. It should not contain questions like: ""Let me know if you have any questions."" That message will go into the commit log and be there forever; long after any relevance the question may have had is gone.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,390,2020-09-03T15:32:31Z,2020-09-08T15:19:19Z,2020-09-08T15:19:19Z,MERGED,True,233,0,5,https://github.com/Snell1224,Added test script that executes ldms-static-test.sh for all enabled plugin samplers,1,[],https://github.com/ovis-hpc/ovis/pull/390,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/390#issuecomment-686710384,Invoke ldms-static-test.sh for all enabled plugins during installation. Man Page included,"Oops, I got mark-downed. The commit message in general should be something like:
50 char summary message

Any necessary detail of the change",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,390,2020-09-03T15:32:31Z,2020-09-08T15:19:19Z,2020-09-08T15:19:19Z,MERGED,True,233,0,5,https://github.com/Snell1224,Added test script that executes ldms-static-test.sh for all enabled plugin samplers,1,[],https://github.com/ovis-hpc/ovis/pull/390,https://github.com/Snell1224,4,https://github.com/ovis-hpc/ovis/pull/390#issuecomment-687269126,Invoke ldms-static-test.sh for all enabled plugins during installation. Man Page included,Hi @tom95858 I revised the commit message to the one above. Thank you for letting me know.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,391,2020-09-03T15:36:17Z,2020-09-08T15:18:44Z,2020-09-08T15:18:44Z,MERGED,True,61,4,5,https://github.com/Snell1224,Added variable KILL_LDMSD_STRICT ,1,[],https://github.com/ovis-hpc/ovis/pull/391,https://github.com/Snell1224,1,https://github.com/ovis-hpc/ovis/pull/391,Added variable KILL_LDMSD_STRICT to ldms-static-test.sh,Added variable KILL_LDMSD_STRICT to ldms-static-test.sh,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,391,2020-09-03T15:36:17Z,2020-09-08T15:18:44Z,2020-09-08T15:18:44Z,MERGED,True,61,4,5,https://github.com/Snell1224,Added variable KILL_LDMSD_STRICT ,1,[],https://github.com/ovis-hpc/ovis/pull/391,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/391#issuecomment-686710682,Added variable KILL_LDMSD_STRICT to ldms-static-test.sh,"Hi @Snell1224 ,
Same comment regarding the commit message for this change.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,391,2020-09-03T15:36:17Z,2020-09-08T15:18:44Z,2020-09-08T15:18:44Z,MERGED,True,61,4,5,https://github.com/Snell1224,Added variable KILL_LDMSD_STRICT ,1,[],https://github.com/ovis-hpc/ovis/pull/391,https://github.com/Snell1224,3,https://github.com/ovis-hpc/ovis/pull/391#issuecomment-687281847,Added variable KILL_LDMSD_STRICT to ldms-static-test.sh,@tom95858 Revised the commit message here as well.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,392,2020-09-03T20:40:45Z,2020-09-08T15:17:36Z,2020-10-08T19:57:29Z,MERGED,True,1,1,1,https://github.com/nichamon,Enable KEEP-ALIVE in zap sock.,1,[],https://github.com/ovis-hpc/ovis/pull/392,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/392,"The optval value was initialized to 0 which results in disabling
KEEP-ALIVE. The patch initlizes the variable to a non-zero value.","The optval value was initialized to 0 which results in disabling
KEEP-ALIVE. The patch initlizes the variable to a non-zero value.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,394,2020-09-09T17:02:02Z,2020-09-21T00:49:26Z,2020-09-21T00:49:26Z,MERGED,True,2,1,1,https://github.com/baallan,fix invalid pipe pointer usage,1,[],https://github.com/ovis-hpc/ovis/pull/394,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/394,This resets pointer p after the pipe is closed to avoid any double close and initializes p before any possible goto that could lead to closing an random pointer from the stack.,This resets pointer p after the pipe is closed to avoid any double close and initializes p before any possible goto that could lead to closing an random pointer from the stack.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,395,2020-09-09T19:39:29Z,2020-09-21T00:19:23Z,2020-12-08T03:28:38Z,MERGED,True,202,5,1,https://github.com/narategithub,zap_fabric listen without specifying the address,2,[],https://github.com/ovis-hpc/ovis/pull/395,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/395,"REMARK: The network addresses discussed in this patch are IPv4 as
current zap applications use only IPv4 addressing. Generic network
address suport (also not limited to sockaddr) for zap shall be handled
separately in the future.
zap_fabric used fi_info.src_addr to specify the listening address
for the passive endpoint. The applications use address 0 to specify
any addresses to listen to (i.e. only the port is specified). Even
though this worked perfectly on other zap transports, it did not work
on libfabric. For example, on cygnus-08, a machine with a regular
on-board ethernet and a Converged Ethernet card, ldmsd -x fabric:10000 reported a successful listen on port 10000 with verbs
provider (the best provider on the machine), but ldms_ls -x fabric -p 10000 -h cygnus-08-iw could not connect. When the passive side
listen with a specific address, e.g. ldmsd -x fabric:10000:cygnus-08-iw, the active side could connect and read,
i.e. ldms_ls -x fabric -p 10000 -h cygnus-08-iw worked.
Instead of using fi_info.src_addr, this patch uses node and
service string parameters in fi_getinfo() call with FI_SOURCE
flags to let the provider resolve for the appropriate address. The ""*""
string would be supplied to node if the address is 0, and a regular
IPv4 ""AAA.BBB.CCC.DDD"" address would be used if the address is not 0.
A quick test shows that the following scenarios work:


listen without specifying the address
ldmsd -x fabric:10000 <-->
ldms_ls -x fabric -p 10000 -h cygnus-08-iw


listen with specific address (verbs provider)
ldmsd -x fabric:10000:cygnus-08-iw <-->
ldms_ls -x fabric -p 10000 -h cygnus-08-iw


listen with specific address (tcp provider)
ldmsd -x fabric:10000:cygnus-08 <-->
ldms_ls -x fabric -p 10000 -h cygnus-08
(Notice the missing -iw)","REMARK: The network addresses discussed in this patch are IPv4 as
current zap applications use only IPv4 addressing. Generic network
address suport (also not limited to sockaddr) for zap shall be handled
separately in the future.
zap_fabric used fi_info.src_addr to specify the listening address
for the passive endpoint. The applications use address 0 to specify
any addresses to listen to (i.e. only the port is specified). Even
though this worked perfectly on other zap transports, it did not work
on libfabric. For example, on cygnus-08, a machine with a regular
on-board ethernet and a Converged Ethernet card, ldmsd -x fabric:10000 reported a successful listen on port 10000 with verbs
provider (the best provider on the machine), but ldms_ls -x fabric -p 10000 -h cygnus-08-iw could not connect. When the passive side
listen with a specific address, e.g. ldmsd -x fabric:10000:cygnus-08-iw, the active side could connect and read,
i.e. ldms_ls -x fabric -p 10000 -h cygnus-08-iw worked.
Instead of using fi_info.src_addr, this patch uses node and
service string parameters in fi_getinfo() call with FI_SOURCE
flags to let the provider resolve for the appropriate address. The ""*""
string would be supplied to node if the address is 0, and a regular
IPv4 ""AAA.BBB.CCC.DDD"" address would be used if the address is not 0.
A quick test shows that the following scenarios work:


listen without specifying the address
ldmsd -x fabric:10000 <-->
ldms_ls -x fabric -p 10000 -h cygnus-08-iw


listen with specific address (verbs provider)
ldmsd -x fabric:10000:cygnus-08-iw <-->
ldms_ls -x fabric -p 10000 -h cygnus-08-iw


listen with specific address (tcp provider)
ldmsd -x fabric:10000:cygnus-08 <-->
ldms_ls -x fabric -p 10000 -h cygnus-08
(Notice the missing -iw)",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,395,2020-09-09T19:39:29Z,2020-09-21T00:19:23Z,2020-12-08T03:28:38Z,MERGED,True,202,5,1,https://github.com/narategithub,zap_fabric listen without specifying the address,2,[],https://github.com/ovis-hpc/ovis/pull/395,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/395#issuecomment-690002043,"REMARK: The network addresses discussed in this patch are IPv4 as
current zap applications use only IPv4 addressing. Generic network
address suport (also not limited to sockaddr) for zap shall be handled
separately in the future.
zap_fabric used fi_info.src_addr to specify the listening address
for the passive endpoint. The applications use address 0 to specify
any addresses to listen to (i.e. only the port is specified). Even
though this worked perfectly on other zap transports, it did not work
on libfabric. For example, on cygnus-08, a machine with a regular
on-board ethernet and a Converged Ethernet card, ldmsd -x fabric:10000 reported a successful listen on port 10000 with verbs
provider (the best provider on the machine), but ldms_ls -x fabric -p 10000 -h cygnus-08-iw could not connect. When the passive side
listen with a specific address, e.g. ldmsd -x fabric:10000:cygnus-08-iw, the active side could connect and read,
i.e. ldms_ls -x fabric -p 10000 -h cygnus-08-iw worked.
Instead of using fi_info.src_addr, this patch uses node and
service string parameters in fi_getinfo() call with FI_SOURCE
flags to let the provider resolve for the appropriate address. The ""*""
string would be supplied to node if the address is 0, and a regular
IPv4 ""AAA.BBB.CCC.DDD"" address would be used if the address is not 0.
A quick test shows that the following scenarios work:


listen without specifying the address
ldmsd -x fabric:10000 <-->
ldms_ls -x fabric -p 10000 -h cygnus-08-iw


listen with specific address (verbs provider)
ldmsd -x fabric:10000:cygnus-08-iw <-->
ldms_ls -x fabric -p 10000 -h cygnus-08-iw


listen with specific address (tcp provider)
ldmsd -x fabric:10000:cygnus-08 <-->
ldms_ls -x fabric -p 10000 -h cygnus-08
(Notice the missing -iw)",So what is this supposed to do when there are two hsn interfaces? We commonly have both omnipath and mellanox interfaces active.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,395,2020-09-09T19:39:29Z,2020-09-21T00:19:23Z,2020-12-08T03:28:38Z,MERGED,True,202,5,1,https://github.com/narategithub,zap_fabric listen without specifying the address,2,[],https://github.com/ovis-hpc/ovis/pull/395,https://github.com/narategithub,3,https://github.com/ovis-hpc/ovis/pull/395#issuecomment-690349569,"REMARK: The network addresses discussed in this patch are IPv4 as
current zap applications use only IPv4 addressing. Generic network
address suport (also not limited to sockaddr) for zap shall be handled
separately in the future.
zap_fabric used fi_info.src_addr to specify the listening address
for the passive endpoint. The applications use address 0 to specify
any addresses to listen to (i.e. only the port is specified). Even
though this worked perfectly on other zap transports, it did not work
on libfabric. For example, on cygnus-08, a machine with a regular
on-board ethernet and a Converged Ethernet card, ldmsd -x fabric:10000 reported a successful listen on port 10000 with verbs
provider (the best provider on the machine), but ldms_ls -x fabric -p 10000 -h cygnus-08-iw could not connect. When the passive side
listen with a specific address, e.g. ldmsd -x fabric:10000:cygnus-08-iw, the active side could connect and read,
i.e. ldms_ls -x fabric -p 10000 -h cygnus-08-iw worked.
Instead of using fi_info.src_addr, this patch uses node and
service string parameters in fi_getinfo() call with FI_SOURCE
flags to let the provider resolve for the appropriate address. The ""*""
string would be supplied to node if the address is 0, and a regular
IPv4 ""AAA.BBB.CCC.DDD"" address would be used if the address is not 0.
A quick test shows that the following scenarios work:


listen without specifying the address
ldmsd -x fabric:10000 <-->
ldms_ls -x fabric -p 10000 -h cygnus-08-iw


listen with specific address (verbs provider)
ldmsd -x fabric:10000:cygnus-08-iw <-->
ldms_ls -x fabric -p 10000 -h cygnus-08-iw


listen with specific address (tcp provider)
ldmsd -x fabric:10000:cygnus-08 <-->
ldms_ls -x fabric -p 10000 -h cygnus-08
(Notice the missing -iw)",I think it will end up selecting only one domain & provider (per fi_getinfo(3)).,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,395,2020-09-09T19:39:29Z,2020-09-21T00:19:23Z,2020-12-08T03:28:38Z,MERGED,True,202,5,1,https://github.com/narategithub,zap_fabric listen without specifying the address,2,[],https://github.com/ovis-hpc/ovis/pull/395,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/395#issuecomment-690368527,"REMARK: The network addresses discussed in this patch are IPv4 as
current zap applications use only IPv4 addressing. Generic network
address suport (also not limited to sockaddr) for zap shall be handled
separately in the future.
zap_fabric used fi_info.src_addr to specify the listening address
for the passive endpoint. The applications use address 0 to specify
any addresses to listen to (i.e. only the port is specified). Even
though this worked perfectly on other zap transports, it did not work
on libfabric. For example, on cygnus-08, a machine with a regular
on-board ethernet and a Converged Ethernet card, ldmsd -x fabric:10000 reported a successful listen on port 10000 with verbs
provider (the best provider on the machine), but ldms_ls -x fabric -p 10000 -h cygnus-08-iw could not connect. When the passive side
listen with a specific address, e.g. ldmsd -x fabric:10000:cygnus-08-iw, the active side could connect and read,
i.e. ldms_ls -x fabric -p 10000 -h cygnus-08-iw worked.
Instead of using fi_info.src_addr, this patch uses node and
service string parameters in fi_getinfo() call with FI_SOURCE
flags to let the provider resolve for the appropriate address. The ""*""
string would be supplied to node if the address is 0, and a regular
IPv4 ""AAA.BBB.CCC.DDD"" address would be used if the address is not 0.
A quick test shows that the following scenarios work:


listen without specifying the address
ldmsd -x fabric:10000 <-->
ldms_ls -x fabric -p 10000 -h cygnus-08-iw


listen with specific address (verbs provider)
ldmsd -x fabric:10000:cygnus-08-iw <-->
ldms_ls -x fabric -p 10000 -h cygnus-08-iw


listen with specific address (tcp provider)
ldmsd -x fabric:10000:cygnus-08 <-->
ldms_ls -x fabric -p 10000 -h cygnus-08
(Notice the missing -iw)","can we be sure to log (info) the ip addr and protocol of each fabric listener?
That way admins can at least detect surprising results.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,395,2020-09-09T19:39:29Z,2020-09-21T00:19:23Z,2020-12-08T03:28:38Z,MERGED,True,202,5,1,https://github.com/narategithub,zap_fabric listen without specifying the address,2,[],https://github.com/ovis-hpc/ovis/pull/395,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/395#issuecomment-690606257,"REMARK: The network addresses discussed in this patch are IPv4 as
current zap applications use only IPv4 addressing. Generic network
address suport (also not limited to sockaddr) for zap shall be handled
separately in the future.
zap_fabric used fi_info.src_addr to specify the listening address
for the passive endpoint. The applications use address 0 to specify
any addresses to listen to (i.e. only the port is specified). Even
though this worked perfectly on other zap transports, it did not work
on libfabric. For example, on cygnus-08, a machine with a regular
on-board ethernet and a Converged Ethernet card, ldmsd -x fabric:10000 reported a successful listen on port 10000 with verbs
provider (the best provider on the machine), but ldms_ls -x fabric -p 10000 -h cygnus-08-iw could not connect. When the passive side
listen with a specific address, e.g. ldmsd -x fabric:10000:cygnus-08-iw, the active side could connect and read,
i.e. ldms_ls -x fabric -p 10000 -h cygnus-08-iw worked.
Instead of using fi_info.src_addr, this patch uses node and
service string parameters in fi_getinfo() call with FI_SOURCE
flags to let the provider resolve for the appropriate address. The ""*""
string would be supplied to node if the address is 0, and a regular
IPv4 ""AAA.BBB.CCC.DDD"" address would be used if the address is not 0.
A quick test shows that the following scenarios work:


listen without specifying the address
ldmsd -x fabric:10000 <-->
ldms_ls -x fabric -p 10000 -h cygnus-08-iw


listen with specific address (verbs provider)
ldmsd -x fabric:10000:cygnus-08-iw <-->
ldms_ls -x fabric -p 10000 -h cygnus-08-iw


listen with specific address (tcp provider)
ldmsd -x fabric:10000:cygnus-08 <-->
ldms_ls -x fabric -p 10000 -h cygnus-08
(Notice the missing -iw)","If you with to listen on both addresses, you should be able to use
ldmsd -x fabric:ib-addr:port -x fabric:port:fabric-addr ...

@baallan can you please confirm this works on the machine in question?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,395,2020-09-09T19:39:29Z,2020-09-21T00:19:23Z,2020-12-08T03:28:38Z,MERGED,True,202,5,1,https://github.com/narategithub,zap_fabric listen without specifying the address,2,[],https://github.com/ovis-hpc/ovis/pull/395,https://github.com/narategithub,6,https://github.com/ovis-hpc/ovis/pull/395#issuecomment-690606378,"REMARK: The network addresses discussed in this patch are IPv4 as
current zap applications use only IPv4 addressing. Generic network
address suport (also not limited to sockaddr) for zap shall be handled
separately in the future.
zap_fabric used fi_info.src_addr to specify the listening address
for the passive endpoint. The applications use address 0 to specify
any addresses to listen to (i.e. only the port is specified). Even
though this worked perfectly on other zap transports, it did not work
on libfabric. For example, on cygnus-08, a machine with a regular
on-board ethernet and a Converged Ethernet card, ldmsd -x fabric:10000 reported a successful listen on port 10000 with verbs
provider (the best provider on the machine), but ldms_ls -x fabric -p 10000 -h cygnus-08-iw could not connect. When the passive side
listen with a specific address, e.g. ldmsd -x fabric:10000:cygnus-08-iw, the active side could connect and read,
i.e. ldms_ls -x fabric -p 10000 -h cygnus-08-iw worked.
Instead of using fi_info.src_addr, this patch uses node and
service string parameters in fi_getinfo() call with FI_SOURCE
flags to let the provider resolve for the appropriate address. The ""*""
string would be supplied to node if the address is 0, and a regular
IPv4 ""AAA.BBB.CCC.DDD"" address would be used if the address is not 0.
A quick test shows that the following scenarios work:


listen without specifying the address
ldmsd -x fabric:10000 <-->
ldms_ls -x fabric -p 10000 -h cygnus-08-iw


listen with specific address (verbs provider)
ldmsd -x fabric:10000:cygnus-08-iw <-->
ldms_ls -x fabric -p 10000 -h cygnus-08-iw


listen with specific address (tcp provider)
ldmsd -x fabric:10000:cygnus-08 <-->
ldms_ls -x fabric -p 10000 -h cygnus-08
(Notice the missing -iw)",@baallan the address logging is now added be81885 (a part of this pull request).,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,395,2020-09-09T19:39:29Z,2020-09-21T00:19:23Z,2020-12-08T03:28:38Z,MERGED,True,202,5,1,https://github.com/narategithub,zap_fabric listen without specifying the address,2,[],https://github.com/ovis-hpc/ovis/pull/395,https://github.com/baallan,7,https://github.com/ovis-hpc/ovis/pull/395#issuecomment-690755171,"REMARK: The network addresses discussed in this patch are IPv4 as
current zap applications use only IPv4 addressing. Generic network
address suport (also not limited to sockaddr) for zap shall be handled
separately in the future.
zap_fabric used fi_info.src_addr to specify the listening address
for the passive endpoint. The applications use address 0 to specify
any addresses to listen to (i.e. only the port is specified). Even
though this worked perfectly on other zap transports, it did not work
on libfabric. For example, on cygnus-08, a machine with a regular
on-board ethernet and a Converged Ethernet card, ldmsd -x fabric:10000 reported a successful listen on port 10000 with verbs
provider (the best provider on the machine), but ldms_ls -x fabric -p 10000 -h cygnus-08-iw could not connect. When the passive side
listen with a specific address, e.g. ldmsd -x fabric:10000:cygnus-08-iw, the active side could connect and read,
i.e. ldms_ls -x fabric -p 10000 -h cygnus-08-iw worked.
Instead of using fi_info.src_addr, this patch uses node and
service string parameters in fi_getinfo() call with FI_SOURCE
flags to let the provider resolve for the appropriate address. The ""*""
string would be supplied to node if the address is 0, and a regular
IPv4 ""AAA.BBB.CCC.DDD"" address would be used if the address is not 0.
A quick test shows that the following scenarios work:


listen without specifying the address
ldmsd -x fabric:10000 <-->
ldms_ls -x fabric -p 10000 -h cygnus-08-iw


listen with specific address (verbs provider)
ldmsd -x fabric:10000:cygnus-08-iw <-->
ldms_ls -x fabric -p 10000 -h cygnus-08-iw


listen with specific address (tcp provider)
ldmsd -x fabric:10000:cygnus-08 <-->
ldms_ls -x fabric -p 10000 -h cygnus-08
(Notice the missing -iw)","I tested ldmsd -x fabric:ib-addr:port -x fabric:port:fabric-addr
using an ethernet and an omnipath address and both worked.
Testing the combination of omnipath and mellanox will take a bit longer -- I have to build on a different system in /tmp.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,396,2020-09-10T05:52:46Z,2020-09-21T00:47:18Z,2020-09-21T00:47:18Z,MERGED,True,7,7,2,https://github.com/baallan,fix V4 fabric xprt mem inits,2,[],https://github.com/ovis-hpc/ovis/pull/396,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/396,this fixes information leak to network by initializing raw buffers and fixes insufficiently initialized addr and event data in ldms_xprt.c..,this fixes information leak to network by initializing raw buffers and fixes insufficiently initialized addr and event data in ldms_xprt.c..,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,397,2020-09-10T20:24:48Z,2020-09-10T20:39:58Z,2020-09-10T20:39:58Z,CLOSED,False,930,0,8,https://github.com/nichamon,Create a worker/event library,1,[],https://github.com/ovis-hpc/ovis/pull/397,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/397,"This API provides a mechanism to schedule events to worker threads. This
will replace the ldmsd_task paradigm in order to simplify the ldmsd
state machine.","This API provides a mechanism to schedule events to worker threads. This
will replace the ldmsd_task paradigm in order to simplify the ldmsd
state machine.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,398,2020-09-11T05:37:04Z,2020-09-15T02:54:55Z,2020-09-16T02:59:54Z,MERGED,True,924,0,8,https://github.com/nichamon,Create a worker/event library,1,[],https://github.com/ovis-hpc/ovis/pull/398,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/398,"This API provides a mechanism to schedule events to worker threads. This
will replace the ldmsd_task paradigm in order to simplify the ldmsd
state machine.","This API provides a mechanism to schedule events to worker threads. This
will replace the ldmsd_task paradigm in order to simplify the ldmsd
state machine.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,398,2020-09-11T05:37:04Z,2020-09-15T02:54:55Z,2020-09-16T02:59:54Z,MERGED,True,924,0,8,https://github.com/nichamon,Create a worker/event library,1,[],https://github.com/ovis-hpc/ovis/pull/398,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/398#issuecomment-691153633,"This API provides a mechanism to schedule events to worker threads. This
will replace the ldmsd_task paradigm in order to simplify the ldmsd
state machine.",Do we have any documentation (other than code) of the current or planned revised state machines?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,398,2020-09-11T05:37:04Z,2020-09-15T02:54:55Z,2020-09-16T02:59:54Z,MERGED,True,924,0,8,https://github.com/nichamon,Create a worker/event library,1,[],https://github.com/ovis-hpc/ovis/pull/398,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/398#issuecomment-691192437,"This API provides a mechanism to schedule events to worker threads. This
will replace the ldmsd_task paradigm in order to simplify the ldmsd
state machine.","@baallan: This change is just staging master code into the OVIS-4 branch as discussed in the LDMS UG meeting. This does not  change anything in the current state machines.
@nichamon, please:

Remove the comment in the commit message about simplifying the state machines and replacing the ldmsd_task paradigm.
Remove the configure option of the event library itself. There is no need/benefit to not build this library, and the configure is already a bit overwrought with options such as this. The EV_TEST conditional is fine.

Thanks, Tom",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,400,2020-09-17T05:25:00Z,2020-09-21T20:40:58Z,2020-12-08T03:28:03Z,MERGED,True,7,6,4,https://github.com/narategithub,Fix ovis_json CFLAGS and compilation warnings,1,[],https://github.com/ovis-hpc/ovis/pull/400,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/400,"CFLAGS := $(filter-out -Werror, ${CFLAGS}) statement in
ovis_json/Makefile.am was actually a Makefile statement. Automake took
that literally into Makefile that was generated by configure script.
Since CFLAGS was usually not defined in the environment variable nor
given when make was called, CFLAGS became an empty string.
Without the filter-out statement, the value of the CFLAGS in the
corresponding Makefile generated by configure is the value of CFLAGS
given in configure command.
This patch removed the filter-out statement that made CFLAGS an empty
string and addressed the build errors caused by -Wall -Werror.","CFLAGS := $(filter-out -Werror, ${CFLAGS}) statement in
ovis_json/Makefile.am was actually a Makefile statement. Automake took
that literally into Makefile that was generated by configure script.
Since CFLAGS was usually not defined in the environment variable nor
given when make was called, CFLAGS became an empty string.
Without the filter-out statement, the value of the CFLAGS in the
corresponding Makefile generated by configure is the value of CFLAGS
given in configure command.
This patch removed the filter-out statement that made CFLAGS an empty
string and addressed the build errors caused by -Wall -Werror.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,400,2020-09-17T05:25:00Z,2020-09-21T20:40:58Z,2020-12-08T03:28:03Z,MERGED,True,7,6,4,https://github.com/narategithub,Fix ovis_json CFLAGS and compilation warnings,1,[],https://github.com/ovis-hpc/ovis/pull/400,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/400#issuecomment-693888992,"CFLAGS := $(filter-out -Werror, ${CFLAGS}) statement in
ovis_json/Makefile.am was actually a Makefile statement. Automake took
that literally into Makefile that was generated by configure script.
Since CFLAGS was usually not defined in the environment variable nor
given when make was called, CFLAGS became an empty string.
Without the filter-out statement, the value of the CFLAGS in the
corresponding Makefile generated by configure is the value of CFLAGS
given in configure command.
This patch removed the filter-out statement that made CFLAGS an empty
string and addressed the build errors caused by -Wall -Werror.",FYI @nichamon,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,400,2020-09-17T05:25:00Z,2020-09-21T20:40:58Z,2020-12-08T03:28:03Z,MERGED,True,7,6,4,https://github.com/narategithub,Fix ovis_json CFLAGS and compilation warnings,1,[],https://github.com/ovis-hpc/ovis/pull/400,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/400#issuecomment-694744433,"CFLAGS := $(filter-out -Werror, ${CFLAGS}) statement in
ovis_json/Makefile.am was actually a Makefile statement. Automake took
that literally into Makefile that was generated by configure script.
Since CFLAGS was usually not defined in the environment variable nor
given when make was called, CFLAGS became an empty string.
Without the filter-out statement, the value of the CFLAGS in the
corresponding Makefile generated by configure is the value of CFLAGS
given in configure command.
This patch removed the filter-out statement that made CFLAGS an empty
string and addressed the build errors caused by -Wall -Werror.","@narategithub the original reason this was required was because bison/flex was generating code that caused compile to fail with -Wall -Werror. It was not due to the warnings fixed here which were, I think, added after the fact. What platforms did you test build this on?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,400,2020-09-17T05:25:00Z,2020-09-21T20:40:58Z,2020-12-08T03:28:03Z,MERGED,True,7,6,4,https://github.com/narategithub,Fix ovis_json CFLAGS and compilation warnings,1,[],https://github.com/ovis-hpc/ovis/pull/400,https://github.com/narategithub,4,https://github.com/ovis-hpc/ovis/pull/400#issuecomment-694908934,"CFLAGS := $(filter-out -Werror, ${CFLAGS}) statement in
ovis_json/Makefile.am was actually a Makefile statement. Automake took
that literally into Makefile that was generated by configure script.
Since CFLAGS was usually not defined in the environment variable nor
given when make was called, CFLAGS became an empty string.
Without the filter-out statement, the value of the CFLAGS in the
corresponding Makefile generated by configure is the value of CFLAGS
given in configure command.
This patch removed the filter-out statement that made CFLAGS an empty
string and addressed the build errors caused by -Wall -Werror.",@tom95858 I tested this on CentOS7. Do you have a list of distros I should cover?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,400,2020-09-17T05:25:00Z,2020-09-21T20:40:58Z,2020-12-08T03:28:03Z,MERGED,True,7,6,4,https://github.com/narategithub,Fix ovis_json CFLAGS and compilation warnings,1,[],https://github.com/ovis-hpc/ovis/pull/400,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/400#issuecomment-695855870,"CFLAGS := $(filter-out -Werror, ${CFLAGS}) statement in
ovis_json/Makefile.am was actually a Makefile statement. Automake took
that literally into Makefile that was generated by configure script.
Since CFLAGS was usually not defined in the environment variable nor
given when make was called, CFLAGS became an empty string.
Without the filter-out statement, the value of the CFLAGS in the
corresponding Makefile generated by configure is the value of CFLAGS
given in configure command.
This patch removed the filter-out statement that made CFLAGS an empty
string and addressed the build errors caused by -Wall -Werror.",Did you test build it with -Wall -Werror?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,400,2020-09-17T05:25:00Z,2020-09-21T20:40:58Z,2020-12-08T03:28:03Z,MERGED,True,7,6,4,https://github.com/narategithub,Fix ovis_json CFLAGS and compilation warnings,1,[],https://github.com/ovis-hpc/ovis/pull/400,https://github.com/narategithub,6,https://github.com/ovis-hpc/ovis/pull/400#issuecomment-695856337,"CFLAGS := $(filter-out -Werror, ${CFLAGS}) statement in
ovis_json/Makefile.am was actually a Makefile statement. Automake took
that literally into Makefile that was generated by configure script.
Since CFLAGS was usually not defined in the environment variable nor
given when make was called, CFLAGS became an empty string.
Without the filter-out statement, the value of the CFLAGS in the
corresponding Makefile generated by configure is the value of CFLAGS
given in configure command.
This patch removed the filter-out statement that made CFLAGS an empty
string and addressed the build errors caused by -Wall -Werror.",Yes I did.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,400,2020-09-17T05:25:00Z,2020-09-21T20:40:58Z,2020-12-08T03:28:03Z,MERGED,True,7,6,4,https://github.com/narategithub,Fix ovis_json CFLAGS and compilation warnings,1,[],https://github.com/ovis-hpc/ovis/pull/400,https://github.com/baallan,7,https://github.com/ovis-hpc/ovis/pull/400#issuecomment-696298077,"CFLAGS := $(filter-out -Werror, ${CFLAGS}) statement in
ovis_json/Makefile.am was actually a Makefile statement. Automake took
that literally into Makefile that was generated by configure script.
Since CFLAGS was usually not defined in the environment variable nor
given when make was called, CFLAGS became an empty string.
Without the filter-out statement, the value of the CFLAGS in the
corresponding Makefile generated by configure is the value of CFLAGS
given in configure command.
This patch removed the filter-out statement that made CFLAGS an empty
string and addressed the build errors caused by -Wall -Werror.","@narategithub sles12, sles15, rhel server >=7.6, rhel8 (rhel 4-6 are now off the list). python/cython from rhel 7 server software collections are good.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,400,2020-09-17T05:25:00Z,2020-09-21T20:40:58Z,2020-12-08T03:28:03Z,MERGED,True,7,6,4,https://github.com/narategithub,Fix ovis_json CFLAGS and compilation warnings,1,[],https://github.com/ovis-hpc/ovis/pull/400,https://github.com/tom95858,8,https://github.com/ovis-hpc/ovis/pull/400#issuecomment-696362665,"CFLAGS := $(filter-out -Werror, ${CFLAGS}) statement in
ovis_json/Makefile.am was actually a Makefile statement. Automake took
that literally into Makefile that was generated by configure script.
Since CFLAGS was usually not defined in the environment variable nor
given when make was called, CFLAGS became an empty string.
Without the filter-out statement, the value of the CFLAGS in the
corresponding Makefile generated by configure is the value of CFLAGS
given in configure command.
This patch removed the filter-out statement that made CFLAGS an empty
string and addressed the build errors caused by -Wall -Werror.",Thanks @baallan for the testing.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,401,2020-09-18T21:32:51Z,2020-09-22T23:58:26Z,2020-09-28T16:32:29Z,CLOSED,False,37,3,2,https://github.com/Snell1224,fix installcheck error for all plugins enabled,1,[],https://github.com/ovis-hpc/ovis/pull/401,https://github.com/Snell1224,1,https://github.com/ovis-hpc/ovis/pull/401,"Generate the static-test-list file in the same directory as run-static-test.sh. All plugins are listed in static-test-list for ""max"" installcheck (via Jenkins).","Generate the static-test-list file in the same directory as run-static-test.sh. All plugins are listed in static-test-list for ""max"" installcheck (via Jenkins).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,401,2020-09-18T21:32:51Z,2020-09-22T23:58:26Z,2020-09-28T16:32:29Z,CLOSED,False,37,3,2,https://github.com/Snell1224,fix installcheck error for all plugins enabled,1,[],https://github.com/ovis-hpc/ovis/pull/401,https://github.com/morrone,2,https://github.com/ovis-hpc/ovis/pull/401#issuecomment-695906676,"Generate the static-test-list file in the same directory as run-static-test.sh. All plugins are listed in static-test-list for ""max"" installcheck (via Jenkins).","This should not be landed, because static-test-list should not be installed in bin (nor should run-static-test.sh). While you are in this code, could you please take a look at issue #402 where I reported some things that need fixing with run-static-test.sh and static-test-list?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,401,2020-09-18T21:32:51Z,2020-09-22T23:58:26Z,2020-09-28T16:32:29Z,CLOSED,False,37,3,2,https://github.com/Snell1224,fix installcheck error for all plugins enabled,1,[],https://github.com/ovis-hpc/ovis/pull/401,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/401#issuecomment-697029220,"Generate the static-test-list file in the same directory as run-static-test.sh. All plugins are listed in static-test-list for ""max"" installcheck (via Jenkins).",@Snell1224 could you please change the install location as the issue suggests?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,403,2020-09-20T10:32:34Z,2020-09-21T00:16:43Z,2020-09-21T00:16:43Z,MERGED,True,3,3,1,https://github.com/morrone,Repair autoconf quoting in AX_PYTHON_DEVEL calls,1,[],https://github.com/ovis-hpc/ovis/pull/403,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/403,"Incorrectly using "" for quoting in the autoconf flavor of m4 was
resulting in an empty file name ""=3.6"" created at configure time.
We replace the """" with [].","Incorrectly using "" for quoting in the autoconf flavor of m4 was
resulting in an empty file name ""=3.6"" created at configure time.
We replace the """" with [].",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,405,2020-09-21T01:59:48Z,2020-09-28T19:04:21Z,2020-12-08T03:28:07Z,MERGED,True,655,9,14,https://github.com/narategithub,stream_unsubscribe + prdcr_unsubscribe,1,[],https://github.com/ovis-hpc/ovis/pull/405,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/405,"[x] Manages clients of ldmsd stream republishing service in a
red-black-tree with <PEER_ADDR>:<STREAM_NAME> keys. The clients
are registered by LDMSD_STREAM_SUBSCRIBE_REQ.
- RECALL: The ldmsd-to-ldmsd stream republishing service
subscription is driven by prdcr_subscribe config command.
[x] prdcr_unsubscribe config command to instruct ldmsd to unsubscribe
the republishing stream from peers.
[x] ldmsctl
[x] ldmsd_controller
[x] Add LDMSD_STREAM_UNSUBSCRIBE_REQ request. This is an
ldmsd-to-ldmsd request to stop the stream republishing.
[x] automatically remove clients of stream republishing service
(registered by LDMSD_STREAM_SUBSCRIBE_REQ) on connection
termination.
[x] ldms_xprt_sockaddr() caching: cache the remote/local addresses
on the success zap_get_name() so that the remote/local addresses
are still available even after the endpoint became disconnected
(but not yet destroyed), which is required for the republish
client key construction. The caching is valid because the
local/remote addresses are not changed after the endpoint
becomes connected.
[x] Add stream_client_dump config command to dump the current list of
all stream clients (not just the republishing ones) for debugging
and test verification.
[x] ldmsctl
[x] ldmsd_controller
[x] test: ldmsd_stream_test in ldms-test (covers both manual unsubscribe
and automatic client removal on disconnection).","[x] Manages clients of ldmsd stream republishing service in a
red-black-tree with <PEER_ADDR>:<STREAM_NAME> keys. The clients
are registered by LDMSD_STREAM_SUBSCRIBE_REQ.
- RECALL: The ldmsd-to-ldmsd stream republishing service
subscription is driven by prdcr_subscribe config command.
[x] prdcr_unsubscribe config command to instruct ldmsd to unsubscribe
the republishing stream from peers.
[x] ldmsctl
[x] ldmsd_controller
[x] Add LDMSD_STREAM_UNSUBSCRIBE_REQ request. This is an
ldmsd-to-ldmsd request to stop the stream republishing.
[x] automatically remove clients of stream republishing service
(registered by LDMSD_STREAM_SUBSCRIBE_REQ) on connection
termination.
[x] ldms_xprt_sockaddr() caching: cache the remote/local addresses
on the success zap_get_name() so that the remote/local addresses
are still available even after the endpoint became disconnected
(but not yet destroyed), which is required for the republish
client key construction. The caching is valid because the
local/remote addresses are not changed after the endpoint
becomes connected.
[x] Add stream_client_dump config command to dump the current list of
all stream clients (not just the republishing ones) for debugging
and test verification.
[x] ldmsctl
[x] ldmsd_controller
[x] test: ldmsd_stream_test in ldms-test (covers both manual unsubscribe
and automatic client removal on disconnection).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,406,2020-09-21T06:08:12Z,2020-09-22T22:58:26Z,2020-12-08T03:28:10Z,MERGED,True,44,930,18,https://github.com/narategithub,Cython version check and SWIG + lib/python removal,4,[],https://github.com/ovis-hpc/ovis/pull/406,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/406,The primary objective of this pull request is to add Cython version checking in the configure script (commit narategithub@980c02a). The lib/python removal (commit narategithub@84134bd) and SWIG removal (narategithub@8857252) are also included as they were found unused. Splitting these commits into their own pull requests will create a merge conflict afterward as they modify the same section in configure.ac file.,The primary objective of this pull request is to add Cython version checking in the configure script (commit narategithub@980c02a). The lib/python removal (commit narategithub@84134bd) and SWIG removal (narategithub@8857252) are also included as they were found unused. Splitting these commits into their own pull requests will create a merge conflict afterward as they modify the same section in configure.ac file.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,406,2020-09-21T06:08:12Z,2020-09-22T22:58:26Z,2020-12-08T03:28:10Z,MERGED,True,44,930,18,https://github.com/narategithub,Cython version check and SWIG + lib/python removal,4,[],https://github.com/ovis-hpc/ovis/pull/406,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/406#issuecomment-696415244,The primary objective of this pull request is to add Cython version checking in the configure script (commit narategithub@980c02a). The lib/python removal (commit narategithub@84134bd) and SWIG removal (narategithub@8857252) are also included as they were found unused. Splitting these commits into their own pull requests will create a merge conflict afterward as they modify the same section in configure.ac file.,"@morrone I agree with you on all of this. BTW, I don't want to make the container a requirement, I'm advocating there creation as an ""ease of use"" thing.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,406,2020-09-21T06:08:12Z,2020-09-22T22:58:26Z,2020-12-08T03:28:10Z,MERGED,True,44,930,18,https://github.com/narategithub,Cython version check and SWIG + lib/python removal,4,[],https://github.com/ovis-hpc/ovis/pull/406,https://github.com/narategithub,3,https://github.com/ovis-hpc/ovis/pull/406#issuecomment-696480253,The primary objective of this pull request is to add Cython version checking in the configure script (commit narategithub@980c02a). The lib/python removal (commit narategithub@84134bd) and SWIG removal (narategithub@8857252) are also included as they were found unused. Splitting these commits into their own pull requests will create a merge conflict afterward as they modify the same section in configure.ac file.,@tom95858 container? Maybe you're on the wrong thread here :),True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,406,2020-09-21T06:08:12Z,2020-09-22T22:58:26Z,2020-12-08T03:28:10Z,MERGED,True,44,930,18,https://github.com/narategithub,Cython version check and SWIG + lib/python removal,4,[],https://github.com/ovis-hpc/ovis/pull/406,https://github.com/narategithub,4,https://github.com/ovis-hpc/ovis/pull/406#issuecomment-696505270,The primary objective of this pull request is to add Cython version checking in the configure script (commit narategithub@980c02a). The lib/python removal (commit narategithub@84134bd) and SWIG removal (narategithub@8857252) are also included as they were found unused. Splitting these commits into their own pull requests will create a merge conflict afterward as they modify the same section in configure.ac file.,"This thread is already pretty long. So, here's a summary of the current status of the pull request:

--disable-python is an alias of --disable-ldms-python. Giving either --disable-python or --disable-ldms-python will disable the build in ldms/python. Disabling python also drop Cython checking.
If CYTHON=<path_to_cython> is specified (e.g. configure CYTHON=/usr/bin/cython-3.8), it will be used as the Cython program when building ldms/python. If CYTHON is specified to a non-existing path or non-executable path, configure will give an error. Cython version is still be checked.
If CYTHON is not specified, search for it using AC_PATH_PROGS with cython cython3 cython3.6 cython-3.8. If no cython is found in that list, an error is reported. Cython version is also checked as well.
Since ldms/python depends on Cython, and python is enabled by default, Cython check (existence/version) is also performed by default as well. Hence, a bare ./configure will fail if Cython is not installed :(",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,406,2020-09-21T06:08:12Z,2020-09-22T22:58:26Z,2020-12-08T03:28:10Z,MERGED,True,44,930,18,https://github.com/narategithub,Cython version check and SWIG + lib/python removal,4,[],https://github.com/ovis-hpc/ovis/pull/406,https://github.com/morrone,5,https://github.com/ovis-hpc/ovis/pull/406#issuecomment-696911075,The primary objective of this pull request is to add Cython version checking in the configure script (commit narategithub@980c02a). The lib/python removal (commit narategithub@84134bd) and SWIG removal (narategithub@8857252) are also included as they were found unused. Splitting these commits into their own pull requests will create a merge conflict afterward as they modify the same section in configure.ac file.,"Thats pretty good! I apologize that I didn't think of everything all at once, but I have a few more suggestions.
I think the logic should probably go like this:

AC_ARG_ENABLE for python - this needs to be tri-state: enable/disable/did-not-specify. LDMS's own custom macros lose the normal tri-state capability of AC_ARG_ENABLE, and that is key here.
Test for python, extract the major/minor version for the Cython check later (e.g. PYTHON_VERSION=""3.6"")
If python is found, test for Cython. The searched for binary names should be: [cython${PYTHON_VERSION} cython-${PYTHON_VERSION} cython] (and it should be in that order with ""cython"" last)
Finally, resolve the findings of the checks with the AC_ARG_ENABLE results. If AC_ARG_ENABLE was ""enable"" and either python or cython not found, then AC_MSG_ERROR. If IF AC_ARG_ENABLE is just ""did-not-specify"", then either python of cython not found is only an AC_MSG_WARN.

Does that make sense? I can take a stab at it if I'm not being clear.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,406,2020-09-21T06:08:12Z,2020-09-22T22:58:26Z,2020-12-08T03:28:10Z,MERGED,True,44,930,18,https://github.com/narategithub,Cython version check and SWIG + lib/python removal,4,[],https://github.com/ovis-hpc/ovis/pull/406,https://github.com/morrone,6,https://github.com/ovis-hpc/ovis/pull/406#issuecomment-696915335,The primary objective of this pull request is to add Cython version checking in the configure script (commit narategithub@980c02a). The lib/python removal (commit narategithub@84134bd) and SWIG removal (narategithub@8857252) are also included as they were found unused. Splitting these commits into their own pull requests will create a merge conflict afterward as they modify the same section in configure.ac file.,"I wonder too if the ARG should be named ""python-api"" instead of just ""python"". LDMS's python API requires both python and cython, but I can imagine in the future there might be some feature in LDMS that only requires python. Giving the API option a more specific name could avoid future conflict.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,406,2020-09-21T06:08:12Z,2020-09-22T22:58:26Z,2020-12-08T03:28:10Z,MERGED,True,44,930,18,https://github.com/narategithub,Cython version check and SWIG + lib/python removal,4,[],https://github.com/ovis-hpc/ovis/pull/406,https://github.com/tom95858,7,https://github.com/ovis-hpc/ovis/pull/406#issuecomment-696960442,The primary objective of this pull request is to add Cython version checking in the configure script (commit narategithub@980c02a). The lib/python removal (commit narategithub@84134bd) and SWIG removal (narategithub@8857252) are also included as they were found unused. Splitting these commits into their own pull requests will create a merge conflict afterward as they modify the same section in configure.ac file.,"@morrone, @narategithub are you two happy enough with this to merge it, or do we need to tweak anything else?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,406,2020-09-21T06:08:12Z,2020-09-22T22:58:26Z,2020-12-08T03:28:10Z,MERGED,True,44,930,18,https://github.com/narategithub,Cython version check and SWIG + lib/python removal,4,[],https://github.com/ovis-hpc/ovis/pull/406,https://github.com/morrone,8,https://github.com/ovis-hpc/ovis/pull/406#issuecomment-697023447,The primary objective of this pull request is to add Cython version checking in the configure script (commit narategithub@980c02a). The lib/python removal (commit narategithub@84134bd) and SWIG removal (narategithub@8857252) are also included as they were found unused. Splitting these commits into their own pull requests will create a merge conflict afterward as they modify the same section in configure.ac file.,"@tom95858 , there are still things that need additional work for me, but I wouldn't be opposed to landing this and I could follow up with additional changes.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,406,2020-09-21T06:08:12Z,2020-09-22T22:58:26Z,2020-12-08T03:28:10Z,MERGED,True,44,930,18,https://github.com/narategithub,Cython version check and SWIG + lib/python removal,4,[],https://github.com/ovis-hpc/ovis/pull/406,https://github.com/baallan,9,https://github.com/ovis-hpc/ovis/pull/406#issuecomment-697580287,The primary objective of this pull request is to add Cython version checking in the configure script (commit narategithub@980c02a). The lib/python removal (commit narategithub@84134bd) and SWIG removal (narategithub@8857252) are also included as they were found unused. Splitting these commits into their own pull requests will create a merge conflict afterward as they modify the same section in configure.ac file.,"we have many pure-python scripts not dependent on cython or the cython-wrapped libraries.
We have the option of making them unconditionally included (since python 3.6 appears to be python3 in base rhel and suse15).
If being purist (which in this case I would favor), we should have --enable-python-api (default disable) and --disable-python-scripts (default enable); I could be persuaded that they should both be default disabled.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,406,2020-09-21T06:08:12Z,2020-09-22T22:58:26Z,2020-12-08T03:28:10Z,MERGED,True,44,930,18,https://github.com/narategithub,Cython version check and SWIG + lib/python removal,4,[],https://github.com/ovis-hpc/ovis/pull/406,https://github.com/morrone,10,https://github.com/ovis-hpc/ovis/pull/406#issuecomment-697636997,The primary objective of this pull request is to add Cython version checking in the configure script (commit narategithub@980c02a). The lib/python removal (commit narategithub@84134bd) and SWIG removal (narategithub@8857252) are also included as they were found unused. Splitting these commits into their own pull requests will create a merge conflict afterward as they modify the same section in configure.ac file.,"@baallan I do agree with that, but this PR is merged (so no one will remember to look at it), so it would be good to open an new issue to track that.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,410,2020-09-22T23:09:06Z,2020-09-28T19:07:49Z,2020-09-28T19:07:49Z,MERGED,True,219,100,13,https://github.com/morrone,Consolidate sampler default authentication values,6,[],https://github.com/ovis-hpc/ovis/pull/410,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/410,"We modify the sampler code to eliminate the many different hard coded
sampler permission defaults, and instead inherit the default consistently
from ldms_set_new().
Also change the the default permissions from the too-permissive default
of 0777 to a more secure 0440.
This consolidation work is useful on its own as refactoring (to eliminate redundant
hard coded defaults), but it also lays the ground work for introducing
global defaults for sampler uid, gid, and perm that can be set once at the ldmsd
level instead of having to repeat the configuration over and over again for each
smapler plugin in the configuration.
We do still preserve the capability to individually set uid/gid/perm values per
plugins if so desired.","We modify the sampler code to eliminate the many different hard coded
sampler permission defaults, and instead inherit the default consistently
from ldms_set_new().
Also change the the default permissions from the too-permissive default
of 0777 to a more secure 0440.
This consolidation work is useful on its own as refactoring (to eliminate redundant
hard coded defaults), but it also lays the ground work for introducing
global defaults for sampler uid, gid, and perm that can be set once at the ldmsd
level instead of having to repeat the configuration over and over again for each
smapler plugin in the configuration.
We do still preserve the capability to individually set uid/gid/perm values per
plugins if so desired.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,410,2020-09-22T23:09:06Z,2020-09-28T19:07:49Z,2020-09-28T19:07:49Z,MERGED,True,219,100,13,https://github.com/morrone,Consolidate sampler default authentication values,6,[],https://github.com/ovis-hpc/ovis/pull/410,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/410#issuecomment-697552981,"We modify the sampler code to eliminate the many different hard coded
sampler permission defaults, and instead inherit the default consistently
from ldms_set_new().
Also change the the default permissions from the too-permissive default
of 0777 to a more secure 0440.
This consolidation work is useful on its own as refactoring (to eliminate redundant
hard coded defaults), but it also lays the ground work for introducing
global defaults for sampler uid, gid, and perm that can be set once at the ldmsd
level instead of having to repeat the configuration over and over again for each
smapler plugin in the configuration.
We do still preserve the capability to individually set uid/gid/perm values per
plugins if so desired.","@morrone re 777->440 change, will this change affect anyone but munge users? If so, this breaks the use of ldms_ls already present in production administrators scripts.
If the perms affect only munge (as I expect) then this is fine.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,410,2020-09-22T23:09:06Z,2020-09-28T19:07:49Z,2020-09-28T19:07:49Z,MERGED,True,219,100,13,https://github.com/morrone,Consolidate sampler default authentication values,6,[],https://github.com/ovis-hpc/ovis/pull/410,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/410#issuecomment-697622452,"We modify the sampler code to eliminate the many different hard coded
sampler permission defaults, and instead inherit the default consistently
from ldms_set_new().
Also change the the default permissions from the too-permissive default
of 0777 to a more secure 0440.
This consolidation work is useful on its own as refactoring (to eliminate redundant
hard coded defaults), but it also lays the ground work for introducing
global defaults for sampler uid, gid, and perm that can be set once at the ldmsd
level instead of having to repeat the configuration over and over again for each
smapler plugin in the configuration.
We do still preserve the capability to individually set uid/gid/perm values per
plugins if so desired.","@morrone re 777->440 change, will this change affect anyone but munge users? If so, this breaks the use of ldms_ls already present in production administrators scripts.
If the perms affect only munge (as I expect) then this is fine.

This should apply to any auth mechanism that uses uid/gid/perm for protecting access to metric sets. I am guessing that ""munge"" and ""naive"" are the ones that currently employs those.
With the auth ""ovis"" (and I assume auth ""none"") plugin, uid/gid/perm are not used. There is no sense of user or groups in auth ""ovis"", and I'm not aware of the perms doing anything either. At least, ldms_ls reports ""-rwxrwxrwx"" for metrics regardless of what the perms are set to in the code when auth_ovis is used. The only thing that appears to matter for auth_ovis is if you know the secret key, and then you get full access.
But if anyone knows otherwise, that is why we have code review. :)",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,410,2020-09-22T23:09:06Z,2020-09-28T19:07:49Z,2020-09-28T19:07:49Z,MERGED,True,219,100,13,https://github.com/morrone,Consolidate sampler default authentication values,6,[],https://github.com/ovis-hpc/ovis/pull/410,https://github.com/tom95858,4,https://github.com/ovis-hpc/ovis/pull/410#issuecomment-698458068,"We modify the sampler code to eliminate the many different hard coded
sampler permission defaults, and instead inherit the default consistently
from ldms_set_new().
Also change the the default permissions from the too-permissive default
of 0777 to a more secure 0440.
This consolidation work is useful on its own as refactoring (to eliminate redundant
hard coded defaults), but it also lays the ground work for introducing
global defaults for sampler uid, gid, and perm that can be set once at the ldmsd
level instead of having to repeat the configuration over and over again for each
smapler plugin in the configuration.
We do still preserve the capability to individually set uid/gid/perm values per
plugins if so desired.","@morrone, just for the purpose of clarification, the auth mechanisms don't protect access to metric sets. They allow or disallow a connection from a peer, and they set the uid, gid in the ldms transport structure.
Regardless of the authentication method, the uid/gid from the ldms transport structure are used to allow or disallow requests received on that transport.  They are also used to filter content for requests such as LDMS_DIR by returning only the metric set names for which the uid/gid in the transport allow read access.
However, all auth methods except munge unconditionally set the uid/gid to zero. Munge sets this to the effective uid and gid of the connecting peer.
We really need to document what the mode bits mean for the different object types, e.g. metric-set, vs. producer, vs updater, etc...",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,410,2020-09-22T23:09:06Z,2020-09-28T19:07:49Z,2020-09-28T19:07:49Z,MERGED,True,219,100,13,https://github.com/morrone,Consolidate sampler default authentication values,6,[],https://github.com/ovis-hpc/ovis/pull/410,https://github.com/morrone,5,https://github.com/ovis-hpc/ovis/pull/410#issuecomment-698471971,"We modify the sampler code to eliminate the many different hard coded
sampler permission defaults, and instead inherit the default consistently
from ldms_set_new().
Also change the the default permissions from the too-permissive default
of 0777 to a more secure 0440.
This consolidation work is useful on its own as refactoring (to eliminate redundant
hard coded defaults), but it also lays the ground work for introducing
global defaults for sampler uid, gid, and perm that can be set once at the ldmsd
level instead of having to repeat the configuration over and over again for each
smapler plugin in the configuration.
We do still preserve the capability to individually set uid/gid/perm values per
plugins if so desired.","@morrone, just for the purpose of clarification, the auth mechanisms don't protect access to metric sets. They allow or disallow a connection from a peer, and they set the uid, gid in the ldms transport structure.

So does that imply that the peer creates separate connections for every metric set that it wants to read?

However, all auth methods except munge unconditionally set the uid/gid to zero. Munge sets this to the effective uid and gid of the connecting peer.

auth_naive claims to allow uid and gid to be set to anything they want. I would have assumed that it worked like auth_munge,
except without any actual security value (but maybe testing value, or some other use). Is that not how it works?

We really need to document what the mode bits mean for the different object types, e.g. metric-set, vs. producer, vs updater, etc...

Yes, that would be great!",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,410,2020-09-22T23:09:06Z,2020-09-28T19:07:49Z,2020-09-28T19:07:49Z,MERGED,True,219,100,13,https://github.com/morrone,Consolidate sampler default authentication values,6,[],https://github.com/ovis-hpc/ovis/pull/410,https://github.com/tom95858,6,https://github.com/ovis-hpc/ovis/pull/410#issuecomment-698483646,"We modify the sampler code to eliminate the many different hard coded
sampler permission defaults, and instead inherit the default consistently
from ldms_set_new().
Also change the the default permissions from the too-permissive default
of 0777 to a more secure 0440.
This consolidation work is useful on its own as refactoring (to eliminate redundant
hard coded defaults), but it also lays the ground work for introducing
global defaults for sampler uid, gid, and perm that can be set once at the ldmsd
level instead of having to repeat the configuration over and over again for each
smapler plugin in the configuration.
We do still preserve the capability to individually set uid/gid/perm values per
plugins if so desired.","@morrone, just for the purpose of clarification, the auth mechanisms don't protect access to metric sets. They allow or disallow a connection from a peer, and they set the uid, gid in the ldms transport structure.

So does that imply that the peer creates separate connections for every metric set that it wants to read?

Only if you are using munge and the user wants to be both mary and bob. The process would have to seteuid to 'mary', then connect to the ldmsd, and then seteuid to 'bob' and connect to ldmsd.
Otherwise the peer would have to be root to see both bob and mary's sets at the same time. Unless, of course, bob and mary are in the same group, and the set perms were 0440 in which case it would work just fine with one connection.


However, all auth methods except munge unconditionally set the uid/gid to zero. Munge sets this to the effective uid and gid of the connecting peer.

auth_naive claims to allow uid and gid to be set to anything they want. I would have assumed that it worked like auth_munge,
except without any actual security value (but maybe testing value, or some other use). Is that not how it works?

You are correct, that's how naive works and it should not be used in production in my opinion and is useful only for testing.
I


We really need to document what the mode bits mean for the different object types, e.g. metric-set, vs. producer, vs updater, etc...

Yes, that would be great!

I'll add it to my list.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,410,2020-09-22T23:09:06Z,2020-09-28T19:07:49Z,2020-09-28T19:07:49Z,MERGED,True,219,100,13,https://github.com/morrone,Consolidate sampler default authentication values,6,[],https://github.com/ovis-hpc/ovis/pull/410,https://github.com/morrone,7,https://github.com/ovis-hpc/ovis/pull/410#issuecomment-698514551,"We modify the sampler code to eliminate the many different hard coded
sampler permission defaults, and instead inherit the default consistently
from ldms_set_new().
Also change the the default permissions from the too-permissive default
of 0777 to a more secure 0440.
This consolidation work is useful on its own as refactoring (to eliminate redundant
hard coded defaults), but it also lays the ground work for introducing
global defaults for sampler uid, gid, and perm that can be set once at the ldmsd
level instead of having to repeat the configuration over and over again for each
smapler plugin in the configuration.
We do still preserve the capability to individually set uid/gid/perm values per
plugins if so desired.","Oh, I think I understand. When you said "" the auth mechanisms don't protect access to metric sets. They allow or disallow a connection from a peer, and they set the uid, gid in the ldms transport structure."", you were just clarifying that the auth mechanisms only do authentication, not authorization. Authorization is handled at another layer. Got it.
Nevermind about my earlier comment about ldms_ls + auth_ovis reporting the wrong perms. I must have flubbed my testing and pointed at the wrong server earlier. I am seeing the perms as 0440 under ldms_ls with my patches and auth_ovis.
So yes, this changes the metric perms to 0440 in all cases by default. But that does mean that all metrics are still readable by default with auth_ovis. I don't think the executable bit is really used for metrics.
That just leaves the write bit. Do any metrics need to be writable to avoid breaking ""production administrators scripts""?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,410,2020-09-22T23:09:06Z,2020-09-28T19:07:49Z,2020-09-28T19:07:49Z,MERGED,True,219,100,13,https://github.com/morrone,Consolidate sampler default authentication values,6,[],https://github.com/ovis-hpc/ovis/pull/410,https://github.com/morrone,8,https://github.com/ovis-hpc/ovis/pull/410#issuecomment-698516509,"We modify the sampler code to eliminate the many different hard coded
sampler permission defaults, and instead inherit the default consistently
from ldms_set_new().
Also change the the default permissions from the too-permissive default
of 0777 to a more secure 0440.
This consolidation work is useful on its own as refactoring (to eliminate redundant
hard coded defaults), but it also lays the ground work for introducing
global defaults for sampler uid, gid, and perm that can be set once at the ldmsd
level instead of having to repeat the configuration over and over again for each
smapler plugin in the configuration.
We do still preserve the capability to individually set uid/gid/perm values per
plugins if so desired.",It occurs to me that the perm bits are irrelevant for metric sets when the uid/gid is 0. uid/gid 0 is allowed full access in ldms. So it is unlikely that this patch would cause any issue for auth_ovis users.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,410,2020-09-22T23:09:06Z,2020-09-28T19:07:49Z,2020-09-28T19:07:49Z,MERGED,True,219,100,13,https://github.com/morrone,Consolidate sampler default authentication values,6,[],https://github.com/ovis-hpc/ovis/pull/410,https://github.com/baallan,9,https://github.com/ovis-hpc/ovis/pull/410#issuecomment-698520891,"We modify the sampler code to eliminate the many different hard coded
sampler permission defaults, and instead inherit the default consistently
from ldms_set_new().
Also change the the default permissions from the too-permissive default
of 0777 to a more secure 0440.
This consolidation work is useful on its own as refactoring (to eliminate redundant
hard coded defaults), but it also lays the ground work for introducing
global defaults for sampler uid, gid, and perm that can be set once at the ldmsd
level instead of having to repeat the configuration over and over again for each
smapler plugin in the configuration.
We do still preserve the capability to individually set uid/gid/perm values per
plugins if so desired.","@morrone afaik all present production scenarios treat sets as write-once, read everywhere.
I think all past development work on set transformations has proceeded on the basis of read-only and create-new.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,410,2020-09-22T23:09:06Z,2020-09-28T19:07:49Z,2020-09-28T19:07:49Z,MERGED,True,219,100,13,https://github.com/morrone,Consolidate sampler default authentication values,6,[],https://github.com/ovis-hpc/ovis/pull/410,https://github.com/morrone,10,https://github.com/ovis-hpc/ovis/pull/410#issuecomment-698542058,"We modify the sampler code to eliminate the many different hard coded
sampler permission defaults, and instead inherit the default consistently
from ldms_set_new().
Also change the the default permissions from the too-permissive default
of 0777 to a more secure 0440.
This consolidation work is useful on its own as refactoring (to eliminate redundant
hard coded defaults), but it also lays the ground work for introducing
global defaults for sampler uid, gid, and perm that can be set once at the ldmsd
level instead of having to repeat the configuration over and over again for each
smapler plugin in the configuration.
We do still preserve the capability to individually set uid/gid/perm values per
plugins if so desired.","@morrone afaik all present production scenarios treat sets as write-once, read everywhere.
I think all past development work on set transformations has proceeded on the basis of read-only and create-new.

I don't understand. What type of sort of metric would use the ""w"" write bit associated with the metric set?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,410,2020-09-22T23:09:06Z,2020-09-28T19:07:49Z,2020-09-28T19:07:49Z,MERGED,True,219,100,13,https://github.com/morrone,Consolidate sampler default authentication values,6,[],https://github.com/ovis-hpc/ovis/pull/410,https://github.com/baallan,11,https://github.com/ovis-hpc/ovis/pull/410#issuecomment-698547696,"We modify the sampler code to eliminate the many different hard coded
sampler permission defaults, and instead inherit the default consistently
from ldms_set_new().
Also change the the default permissions from the too-permissive default
of 0777 to a more secure 0440.
This consolidation work is useful on its own as refactoring (to eliminate redundant
hard coded defaults), but it also lays the ground work for introducing
global defaults for sampler uid, gid, and perm that can be set once at the ldmsd
level instead of having to repeat the configuration over and over again for each
smapler plugin in the configuration.
We do still preserve the capability to individually set uid/gid/perm values per
plugins if so desired.","In a present ldms-only context, I can't think of anything that would write into a metric set after the originating ldms_transaction_end. So I don't see an immediate use for the write bit. I can imagine down-stream (sosdb, future ldms, etc) a set might have a need to be written to (e.g. data or metadata items not known at the point of origin)  but known/derived elsewhere in the transmission chain.
We have periodically dreamed of (probably event driven) uses of sets to communicate among agent plugins within the ldms hierarchy; enabling write on the sets used by these agents might make sense where sets are part of some load-management scenario by an application.
I do wonder also what we do with the execute bit. Shouldn't it be 550 by default and you don't even know the set name exists, as with ls, if the execute bit is 0 instead of 1. I guess 440 is the 'paranoid' default.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,410,2020-09-22T23:09:06Z,2020-09-28T19:07:49Z,2020-09-28T19:07:49Z,MERGED,True,219,100,13,https://github.com/morrone,Consolidate sampler default authentication values,6,[],https://github.com/ovis-hpc/ovis/pull/410,https://github.com/tom95858,12,https://github.com/ovis-hpc/ovis/pull/410#issuecomment-698551177,"We modify the sampler code to eliminate the many different hard coded
sampler permission defaults, and instead inherit the default consistently
from ldms_set_new().
Also change the the default permissions from the too-permissive default
of 0777 to a more secure 0440.
This consolidation work is useful on its own as refactoring (to eliminate redundant
hard coded defaults), but it also lays the ground work for introducing
global defaults for sampler uid, gid, and perm that can be set once at the ldmsd
level instead of having to repeat the configuration over and over again for each
smapler plugin in the configuration.
We do still preserve the capability to individually set uid/gid/perm values per
plugins if so desired.","@morrone afaik all present production scenarios treat sets as write-once, read everywhere.
I think all past development work on set transformations has proceeded on the basis of read-only and create-new.


@baallan I don't know what you are trying to say here. The ldms_metric_set_xxx code does not look at a sets owner/access bits. Only remote changes use the owner/access rights.

I don't understand. What type of sort of metric would use the ""w"" write bit associated with the metric set?

There is only one bit of logic that uses the 'w' bit in a metric set and that is if a remote user requests to change a local sets user-data. See ldmsd_set_udata_regex and ldmsd_set_udata are the functions that do this. They are called from ldmsd_request.c.
Configuration objects use the 'w' bit to allow a remote peer to change it. The remote peer in this case is almost always the ldmsd_controller.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,410,2020-09-22T23:09:06Z,2020-09-28T19:07:49Z,2020-09-28T19:07:49Z,MERGED,True,219,100,13,https://github.com/morrone,Consolidate sampler default authentication values,6,[],https://github.com/ovis-hpc/ovis/pull/410,https://github.com/morrone,13,https://github.com/ovis-hpc/ovis/pull/410#issuecomment-698551178,"We modify the sampler code to eliminate the many different hard coded
sampler permission defaults, and instead inherit the default consistently
from ldms_set_new().
Also change the the default permissions from the too-permissive default
of 0777 to a more secure 0440.
This consolidation work is useful on its own as refactoring (to eliminate redundant
hard coded defaults), but it also lays the ground work for introducing
global defaults for sampler uid, gid, and perm that can be set once at the ldmsd
level instead of having to repeat the configuration over and over again for each
smapler plugin in the configuration.
We do still preserve the capability to individually set uid/gid/perm values per
plugins if so desired.","I do wonder also what we do with the execute bit. Shouldn't it be 550 by default and you don't even know the set name exists, as with ls, if the execute bit is 0 instead of 1.

No, I don't think so. That doesn't map from filesystem concepts (and granted, ldms can do anything it wants), nor does it seem to currently behave that way.  Removing the x bit from a file doesn't make it so you don't see the file name any more. You remove the x bit from the directory containing the file to make the entire contents of the directory inaccessible.
The x bit doesn't currently do anything that I am aware of (for metric sets), so it would be better to not have it set by default when we don't know what it might do in the future. If it does something useful in the future, we can set it then.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,410,2020-09-22T23:09:06Z,2020-09-28T19:07:49Z,2020-09-28T19:07:49Z,MERGED,True,219,100,13,https://github.com/morrone,Consolidate sampler default authentication values,6,[],https://github.com/ovis-hpc/ovis/pull/410,https://github.com/morrone,14,https://github.com/ovis-hpc/ovis/pull/410#issuecomment-698551805,"We modify the sampler code to eliminate the many different hard coded
sampler permission defaults, and instead inherit the default consistently
from ldms_set_new().
Also change the the default permissions from the too-permissive default
of 0777 to a more secure 0440.
This consolidation work is useful on its own as refactoring (to eliminate redundant
hard coded defaults), but it also lays the ground work for introducing
global defaults for sampler uid, gid, and perm that can be set once at the ldmsd
level instead of having to repeat the configuration over and over again for each
smapler plugin in the configuration.
We do still preserve the capability to individually set uid/gid/perm values per
plugins if so desired.","How exactly does the jobid make it into the ldmsd...for instance with the slurm spank plugin? Is there some jobid metric that needs to be writable, or does that come in through ldms streams or something and use some other authorization path?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,410,2020-09-22T23:09:06Z,2020-09-28T19:07:49Z,2020-09-28T19:07:49Z,MERGED,True,219,100,13,https://github.com/morrone,Consolidate sampler default authentication values,6,[],https://github.com/ovis-hpc/ovis/pull/410,https://github.com/baallan,15,https://github.com/ovis-hpc/ovis/pull/410#issuecomment-698555925,"We modify the sampler code to eliminate the many different hard coded
sampler permission defaults, and instead inherit the default consistently
from ldms_set_new().
Also change the the default permissions from the too-permissive default
of 0777 to a more secure 0440.
This consolidation work is useful on its own as refactoring (to eliminate redundant
hard coded defaults), but it also lays the ground work for introducing
global defaults for sampler uid, gid, and perm that can be set once at the ldmsd
level instead of having to repeat the configuration over and over again for each
smapler plugin in the configuration.
We do still preserve the capability to individually set uid/gid/perm values per
plugins if so desired.","I think of sets as leaf directories and metrics as the files, wrt x bits.
The job data for most sets is read from another set. Another sampler (which depends on config) creates the set containing the original job data. Implicit in this scheme is that (for correctness) the job data sampler must run before the other samplers in the same interval. There is a spank plugin and paired sampler as a method of getting the data and there are other schemes (eg. jobid sampler and prolog/epilog mods to populate a local data file on the compute nodes).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,410,2020-09-22T23:09:06Z,2020-09-28T19:07:49Z,2020-09-28T19:07:49Z,MERGED,True,219,100,13,https://github.com/morrone,Consolidate sampler default authentication values,6,[],https://github.com/ovis-hpc/ovis/pull/410,https://github.com/tom95858,16,https://github.com/ovis-hpc/ovis/pull/410#issuecomment-698559551,"We modify the sampler code to eliminate the many different hard coded
sampler permission defaults, and instead inherit the default consistently
from ldms_set_new().
Also change the the default permissions from the too-permissive default
of 0777 to a more secure 0440.
This consolidation work is useful on its own as refactoring (to eliminate redundant
hard coded defaults), but it also lays the ground work for introducing
global defaults for sampler uid, gid, and perm that can be set once at the ldmsd
level instead of having to repeat the configuration over and over again for each
smapler plugin in the configuration.
We do still preserve the capability to individually set uid/gid/perm values per
plugins if so desired.","How exactly does the jobid make it into the ldmsd...for instance with the slurm spank plugin? Is there some jobid metric that needs to be writable, or does that come in through ldms streams or something and use some other authorization path?

It depends on the job sampler; but the job_id is ""just-like"" any other metric and has the type uint64_t. This is somewhat simplified, but:

In the jobinfo case, the sampler reads from a file and sets the job_id based on the contents of the file.
For the spank plugin/sampler plugin case, the sampler subscribes to an ldmsd stream and receives job update information from which it sets the job_id field

The point is really that the job_id setting is accomplished by the owning ldmsd call ldms_metric_set_u64.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,410,2020-09-22T23:09:06Z,2020-09-28T19:07:49Z,2020-09-28T19:07:49Z,MERGED,True,219,100,13,https://github.com/morrone,Consolidate sampler default authentication values,6,[],https://github.com/ovis-hpc/ovis/pull/410,https://github.com/morrone,17,https://github.com/ovis-hpc/ovis/pull/410#issuecomment-698564279,"We modify the sampler code to eliminate the many different hard coded
sampler permission defaults, and instead inherit the default consistently
from ldms_set_new().
Also change the the default permissions from the too-permissive default
of 0777 to a more secure 0440.
This consolidation work is useful on its own as refactoring (to eliminate redundant
hard coded defaults), but it also lays the ground work for introducing
global defaults for sampler uid, gid, and perm that can be set once at the ldmsd
level instead of having to repeat the configuration over and over again for each
smapler plugin in the configuration.
We do still preserve the capability to individually set uid/gid/perm values per
plugins if so desired.","I think of sets as leaf directories and metrics as the files, wrt x bits.

@baallan, you may think of them that way, but ldms doesn't appear to. :)

For the spank plugin/sampler plugin case, the sampler subscribes to an ldmsd stream and receives job update information from which it sets the job_id field

@tom95858 OK, thanks!  So the spank plugin doesn't need write access to the jobid metric set.
As an aside, why doesn't the spank plugin just connect as a peer and write directly to the metric set? The jobid plugin could just create an empty metric set with the correct uid/gid/perms, and then the spank plugin could just write into it directly, right? Actually, I probably know the answer...the jobid spank plugin was initially more about collecting information about the individual processes in the job than just identifying what job was running on the node. So that probably explains the added complexity.
Is it possible for peers to write into metric sets at this time?
Man, now I'm getting off topic. :)",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,410,2020-09-22T23:09:06Z,2020-09-28T19:07:49Z,2020-09-28T19:07:49Z,MERGED,True,219,100,13,https://github.com/morrone,Consolidate sampler default authentication values,6,[],https://github.com/ovis-hpc/ovis/pull/410,https://github.com/baallan,18,https://github.com/ovis-hpc/ovis/pull/410#issuecomment-698566355,"We modify the sampler code to eliminate the many different hard coded
sampler permission defaults, and instead inherit the default consistently
from ldms_set_new().
Also change the the default permissions from the too-permissive default
of 0777 to a more secure 0440.
This consolidation work is useful on its own as refactoring (to eliminate redundant
hard coded defaults), but it also lays the ground work for introducing
global defaults for sampler uid, gid, and perm that can be set once at the ldmsd
level instead of having to repeat the configuration over and over again for each
smapler plugin in the configuration.
We do still preserve the capability to individually set uid/gid/perm values per
plugins if so desired.",@morrone the fact that ldms does not yet allow per-file permissions but only directory permissions is something we will be driven to correct by down-stream security models if we wish to allow admins to follow unix mode semantics through an entire ovis pipeline (ldms-sosdb-web).,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,410,2020-09-22T23:09:06Z,2020-09-28T19:07:49Z,2020-09-28T19:07:49Z,MERGED,True,219,100,13,https://github.com/morrone,Consolidate sampler default authentication values,6,[],https://github.com/ovis-hpc/ovis/pull/410,https://github.com/baallan,19,https://github.com/ovis-hpc/ovis/pull/410#issuecomment-698571507,"We modify the sampler code to eliminate the many different hard coded
sampler permission defaults, and instead inherit the default consistently
from ldms_set_new().
Also change the the default permissions from the too-permissive default
of 0777 to a more secure 0440.
This consolidation work is useful on its own as refactoring (to eliminate redundant
hard coded defaults), but it also lays the ground work for introducing
global defaults for sampler uid, gid, and perm that can be set once at the ldmsd
level instead of having to repeat the configuration over and over again for each
smapler plugin in the configuration.
We do still preserve the capability to individually set uid/gid/perm values per
plugins if so desired.","@morrone re the actual code in this PR:
You've introduced a race condition on the permissions of a set by removing the mode bits from set_new_.... E.g. fopen(name, mode).
A better (more comprehensible) naming of the several mutators you've added would be in the style of ldms_set_chown, ldms_set_chmod, especially if you are recycling the UNIX mode_t in the argument list for the calls instead of introducing an ldms_mode_t. Granted we may have been abusing mode_t before you looked at this area...",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,410,2020-09-22T23:09:06Z,2020-09-28T19:07:49Z,2020-09-28T19:07:49Z,MERGED,True,219,100,13,https://github.com/morrone,Consolidate sampler default authentication values,6,[],https://github.com/ovis-hpc/ovis/pull/410,https://github.com/morrone,20,https://github.com/ovis-hpc/ovis/pull/410#issuecomment-698584762,"We modify the sampler code to eliminate the many different hard coded
sampler permission defaults, and instead inherit the default consistently
from ldms_set_new().
Also change the the default permissions from the too-permissive default
of 0777 to a more secure 0440.
This consolidation work is useful on its own as refactoring (to eliminate redundant
hard coded defaults), but it also lays the ground work for introducing
global defaults for sampler uid, gid, and perm that can be set once at the ldmsd
level instead of having to repeat the configuration over and over again for each
smapler plugin in the configuration.
We do still preserve the capability to individually set uid/gid/perm values per
plugins if so desired.","@morrone re the actual code in this PR:
You've introduced a race condition on the permissions of a set by removing the mode bits from set_new_.... E.g. fopen(name, mode).

For that to be the case, metric sets would need to be accessible before ldms_set_publish() time. Are metric sets accessible before publishing? And if so, what the heck does ""publish"" actually mean?
And if that were correct then your next suggestion of separate chonw and chmod doesn't follow, because there would always be a race between those two calls.

A better (more comprehensible) naming of the several mutators you've added would be in the style of ldms_set_chown, ldms_set_chmod, especially if you are recycling the UNIX mode_t in the argument list for the calls instead of introducing an ldms_mode_t. Granted we may have been abusing mode_t before you looked at this area...

No, I don't think that is at all consistent with the established naming in this API.
First of all, my ldms_set_{uid|gid|perm}_set() functions are just the direct inverse of the existing ldms_set_(uid|gid|perm)_get() calls. Using a different name would be strange an surprising. If we want to change the naming, we should do so everywhere to be consistent, and I think that change is out of scope for this PR.
Also, the mode_t is exactly consistent with everywhere else in ldms.h. ""ldms_mode_t"" does not appear in ldms.h, only ""mode_t"". If we want to change that, that is fine. But again I think that is out of scope for this PR.
Another thing to look at is that ldms_set_(uid|gid|perm)_get() all return int32_t instead of uid_t/gid_t/mode_t, whcih would make them consistent with the rest of ldms.h. But again, out of scope for this PR.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,410,2020-09-22T23:09:06Z,2020-09-28T19:07:49Z,2020-09-28T19:07:49Z,MERGED,True,219,100,13,https://github.com/morrone,Consolidate sampler default authentication values,6,[],https://github.com/ovis-hpc/ovis/pull/410,https://github.com/baallan,21,https://github.com/ovis-hpc/ovis/pull/410#issuecomment-698597944,"We modify the sampler code to eliminate the many different hard coded
sampler permission defaults, and instead inherit the default consistently
from ldms_set_new().
Also change the the default permissions from the too-permissive default
of 0777 to a more secure 0440.
This consolidation work is useful on its own as refactoring (to eliminate redundant
hard coded defaults), but it also lays the ground work for introducing
global defaults for sampler uid, gid, and perm that can be set once at the ldmsd
level instead of having to repeat the configuration over and over again for each
smapler plugin in the configuration.
We do still preserve the capability to individually set uid/gid/perm values per
plugins if so desired.","@morrone wrote: Are metric sets accessible before publishing? And if so, what the heck does ""publish"" actually mean?
I second the question. We really don't have a v4 documentation of the life-cycle of set instances and how this life-cycle relates to api calls. At least not in headers or man pages.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,410,2020-09-22T23:09:06Z,2020-09-28T19:07:49Z,2020-09-28T19:07:49Z,MERGED,True,219,100,13,https://github.com/morrone,Consolidate sampler default authentication values,6,[],https://github.com/ovis-hpc/ovis/pull/410,https://github.com/morrone,22,https://github.com/ovis-hpc/ovis/pull/410#issuecomment-698606146,"We modify the sampler code to eliminate the many different hard coded
sampler permission defaults, and instead inherit the default consistently
from ldms_set_new().
Also change the the default permissions from the too-permissive default
of 0777 to a more secure 0440.
This consolidation work is useful on its own as refactoring (to eliminate redundant
hard coded defaults), but it also lays the ground work for introducing
global defaults for sampler uid, gid, and perm that can be set once at the ldmsd
level instead of having to repeat the configuration over and over again for each
smapler plugin in the configuration.
We do still preserve the capability to individually set uid/gid/perm values per
plugins if so desired.","@morrone wrote: Are metric sets accessible before publishing? And if so, what the heck does ""publish"" actually mean?
I second the question. We really don't have a v4 documentation of the life-cycle of set instances and how this life-cycle relates to api calls. At least not in headers or man pages.

My guess is that the metrics aren't avaible until publish time. But that was new in v4 (or somewhere in the v4 release stream). I don't think v3 either had, or honored the publish calls. I seem to remember there being publish calls that did nothing at one point, and then later actually worked and metrics only appeared after the metric was published.
So at the very least I would suspect that right now a metric set won't show up in ldms_ls until ldms_set_publish() is called. I don't know if there is some hidden gotcha where it is accessible through some other means before publishing. But if so, that is probably a design or implementation bug. Admittedly if such a loophole existed, it would have to be dealt with before this PR could land it in its current state. But my working assumption that it does not. I am assuming that publish works as one might expect.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,410,2020-09-22T23:09:06Z,2020-09-28T19:07:49Z,2020-09-28T19:07:49Z,MERGED,True,219,100,13,https://github.com/morrone,Consolidate sampler default authentication values,6,[],https://github.com/ovis-hpc/ovis/pull/410,https://github.com/baallan,23,https://github.com/ovis-hpc/ovis/pull/410#issuecomment-698609308,"We modify the sampler code to eliminate the many different hard coded
sampler permission defaults, and instead inherit the default consistently
from ldms_set_new().
Also change the the default permissions from the too-permissive default
of 0777 to a more secure 0440.
This consolidation work is useful on its own as refactoring (to eliminate redundant
hard coded defaults), but it also lays the ground work for introducing
global defaults for sampler uid, gid, and perm that can be set once at the ldmsd
level instead of having to repeat the configuration over and over again for each
smapler plugin in the configuration.
We do still preserve the capability to individually set uid/gid/perm values per
plugins if so desired.",my understanding is that the set may be visible locally with or without publish when it is added to the local set tree at the end of set new. I could easily be wrong...,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,411,2020-09-23T03:01:42Z,2020-09-23T19:30:25Z,2020-12-08T03:27:15Z,CLOSED,False,1,1,1,https://github.com/narategithub,Change Cython minimum version requirement to 0.25,1,[],https://github.com/ovis-hpc/ovis/pull/411,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/411,"Previous Cython minimum version requirement was obtained from a testing
with python36-Cython RHEL7 epel package. After multiple build with
various version of Cython, version 0.25 was found to be the actual
minimum requirement. Cython 0.24 could not compile ldms.pyx.","Previous Cython minimum version requirement was obtained from a testing
with python36-Cython RHEL7 epel package. After multiple build with
various version of Cython, version 0.25 was found to be the actual
minimum requirement. Cython 0.24 could not compile ldms.pyx.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,411,2020-09-23T03:01:42Z,2020-09-23T19:30:25Z,2020-12-08T03:27:15Z,CLOSED,False,1,1,1,https://github.com/narategithub,Change Cython minimum version requirement to 0.25,1,[],https://github.com/ovis-hpc/ovis/pull/411,https://github.com/morrone,2,https://github.com/ovis-hpc/ovis/pull/411#issuecomment-697585995,"Previous Cython minimum version requirement was obtained from a testing
with python36-Cython RHEL7 epel package. After multiple build with
various version of Cython, version 0.25 was found to be the actual
minimum requirement. Cython 0.24 could not compile ldms.pyx.","I based my cython changes on this commit, and my PR has merged, so this PR can now be closed as well.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,412,2020-09-23T03:27:30Z,2020-09-24T19:25:38Z,2020-12-08T03:28:24Z,MERGED,True,26,28,1,https://github.com/narategithub,Update README.md,1,[],https://github.com/ovis-hpc/ovis/pull/412,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/412,"Update requirements, remove deprecated information, and update the short build instruction.","Update requirements, remove deprecated information, and update the short build instruction.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,412,2020-09-23T03:27:30Z,2020-09-24T19:25:38Z,2020-12-08T03:28:24Z,MERGED,True,26,28,1,https://github.com/narategithub,Update README.md,1,[],https://github.com/ovis-hpc/ovis/pull/412,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/412#issuecomment-697112273,"Update requirements, remove deprecated information, and update the short build instruction.",Please merge this after #411,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,413,2020-09-23T06:56:37Z,2020-09-23T15:45:38Z,2020-09-23T15:45:38Z,MERGED,True,196,32,2,https://github.com/morrone,Improve autoconf cython test,2,[],https://github.com/ovis-hpc/ovis/pull/413,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/413,"This version packs the cython test into a function.
The major change is that this version looks for variations on the
cython binary name that contain the python version string that
we detected. That way we don't need to hard code various python
version suffixes for cython. Also, we avoid the issue that there
may potentially be multiple different cython's installed for
multiple versions of Python at the same time (e.g. cython3.6 and
cython3.8 at the same time). This patch makes sure that we don't
pick the cython for the wrong version of python.
Also we run the cython version check in the feature check for
each cython that we find, not just the first one. That is minor
improvement as well.","This version packs the cython test into a function.
The major change is that this version looks for variations on the
cython binary name that contain the python version string that
we detected. That way we don't need to hard code various python
version suffixes for cython. Also, we avoid the issue that there
may potentially be multiple different cython's installed for
multiple versions of Python at the same time (e.g. cython3.6 and
cython3.8 at the same time). This patch makes sure that we don't
pick the cython for the wrong version of python.
Also we run the cython version check in the feature check for
each cython that we find, not just the first one. That is minor
improvement as well.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,414,2020-09-23T19:01:51Z,2020-09-24T20:30:16Z,2020-09-24T20:30:16Z,CLOSED,False,22,0,1,https://github.com/baallan,add pre-push test to verify make dist does not depend on cython,1,[],https://github.com/ovis-hpc/ovis/pull/414,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/414,This action file (when connected) will verify that 'make dist' is not broken for rhel7/vanilla toss3.,This action file (when connected) will verify that 'make dist' is not broken for rhel7/vanilla toss3.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,414,2020-09-23T19:01:51Z,2020-09-24T20:30:16Z,2020-09-24T20:30:16Z,CLOSED,False,22,0,1,https://github.com/baallan,add pre-push test to verify make dist does not depend on cython,1,[],https://github.com/ovis-hpc/ovis/pull/414,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/414#issuecomment-697905873,This action file (when connected) will verify that 'make dist' is not broken for rhel7/vanilla toss3.,"@morrone so does adding this push test make sense to you?
@narategithub I don't understand why you changed the existing 'make dist' test instead of fixing the problem it diagnosed. Cython needs to be not required unless explicitly asked for. It's fine to test both configuration cases, of course.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,414,2020-09-23T19:01:51Z,2020-09-24T20:30:16Z,2020-09-24T20:30:16Z,CLOSED,False,22,0,1,https://github.com/baallan,add pre-push test to verify make dist does not depend on cython,1,[],https://github.com/ovis-hpc/ovis/pull/414,https://github.com/narategithub,3,https://github.com/ovis-hpc/ovis/pull/414#issuecomment-697925840,This action file (when connected) will verify that 'make dist' is not broken for rhel7/vanilla toss3.,"@baallan The reason is that ldmsd_controller requires Cython LDMS to communicate with ldmsd. Other python module in ldms/python/ldmsd/* are there to assist ldmsd_controller.
ldms/python/cmds/kq is the other python program that depends on SOS Python module ... and SOS Py also uses Cython.
So, I don't see anything in ldms/python that does not depend on Cython.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,414,2020-09-23T19:01:51Z,2020-09-24T20:30:16Z,2020-09-24T20:30:16Z,CLOSED,False,22,0,1,https://github.com/baallan,add pre-push test to verify make dist does not depend on cython,1,[],https://github.com/ovis-hpc/ovis/pull/414,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/414#issuecomment-697927218,This action file (when connected) will verify that 'make dist' is not broken for rhel7/vanilla toss3.,@narategithub ldmsd_controller is optional. The c-program interface is all that is required.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,414,2020-09-23T19:01:51Z,2020-09-24T20:30:16Z,2020-09-24T20:30:16Z,CLOSED,False,22,0,1,https://github.com/baallan,add pre-push test to verify make dist does not depend on cython,1,[],https://github.com/ovis-hpc/ovis/pull/414,https://github.com/narategithub,5,https://github.com/ovis-hpc/ovis/pull/414#issuecomment-697927826,This action file (when connected) will verify that 'make dist' is not broken for rhel7/vanilla toss3.,"@baallan please also see my discussion with @morrone here: #406 (comment)
If ldmsd_controller is optional, then why shouldn't we disable python by default?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,414,2020-09-23T19:01:51Z,2020-09-24T20:30:16Z,2020-09-24T20:30:16Z,CLOSED,False,22,0,1,https://github.com/baallan,add pre-push test to verify make dist does not depend on cython,1,[],https://github.com/ovis-hpc/ovis/pull/414,https://github.com/baallan,6,https://github.com/ovis-hpc/ovis/pull/414#issuecomment-697929066,This action file (when connected) will verify that 'make dist' is not broken for rhel7/vanilla toss3.,@narategithub you should disable the cython dependent bits (call it python-libs or python-api) by default. Anything that 'normally requires pip install X' on any of our supported platforms should be disabled by default.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,414,2020-09-23T19:01:51Z,2020-09-24T20:30:16Z,2020-09-24T20:30:16Z,CLOSED,False,22,0,1,https://github.com/baallan,add pre-push test to verify make dist does not depend on cython,1,[],https://github.com/ovis-hpc/ovis/pull/414,https://github.com/narategithub,7,https://github.com/ovis-hpc/ovis/pull/414#issuecomment-697935133,This action file (when connected) will verify that 'make dist' is not broken for rhel7/vanilla toss3.,@baallan Feel free to post a patch as you see fit ;),True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,414,2020-09-23T19:01:51Z,2020-09-24T20:30:16Z,2020-09-24T20:30:16Z,CLOSED,False,22,0,1,https://github.com/baallan,add pre-push test to verify make dist does not depend on cython,1,[],https://github.com/ovis-hpc/ovis/pull/414,https://github.com/baallan,8,https://github.com/ovis-hpc/ovis/pull/414#issuecomment-697953302,This action file (when connected) will verify that 'make dist' is not broken for rhel7/vanilla toss3.,@narategithub perhaps we should just revert the whole python3 patch list if you can't make it pass './configure && make dist' on vanilla rhel7 by default.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,414,2020-09-23T19:01:51Z,2020-09-24T20:30:16Z,2020-09-24T20:30:16Z,CLOSED,False,22,0,1,https://github.com/baallan,add pre-push test to verify make dist does not depend on cython,1,[],https://github.com/ovis-hpc/ovis/pull/414,https://github.com/morrone,9,https://github.com/ovis-hpc/ovis/pull/414#issuecomment-697987576,This action file (when connected) will verify that 'make dist' is not broken for rhel7/vanilla toss3.,"I don't think that we should necessarily add another test workflow for this. But I do think that the ""make dist"" workflows should be switched back to not downloading Cython. Cython is need for real builds (when desitred), not configure for make dist. See PR #415.
As to whether configure should default to not using python/cython if cython isn't found: I do basically agree. I mentioned in a PR review that I think python selection should really be tri-state. The test for the AC_ARG_ENABLE should record, ""yes"" (--enable provided on the command line), ""no"" (--disable provided on the command line), and ""notspecified"" (no opinion expressed on the command line...could also be named ""test"" or ""check"" or something). This is a very common idiom in autoconf.
The only reason I didn't implement that in my cython check update is that the AX_PYTHON_DEVEL macro appears to error out if python isn't found rather than allowing us to provide an action-if-not-found. So we can't run it speculatively in the ""notspecified"" case.
But now that consider it again, python is almost always available. So we could still implement ""nospecified"" for Cython. We could make it so it disables python use when cython is not found, even though missing python would always throw an error.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,414,2020-09-23T19:01:51Z,2020-09-24T20:30:16Z,2020-09-24T20:30:16Z,CLOSED,False,22,0,1,https://github.com/baallan,add pre-push test to verify make dist does not depend on cython,1,[],https://github.com/ovis-hpc/ovis/pull/414,https://github.com/morrone,10,https://github.com/ovis-hpc/ovis/pull/414#issuecomment-697989545,This action file (when connected) will verify that 'make dist' is not broken for rhel7/vanilla toss3.,"Oh, and a minor note on terminology. This is not a ""pre-push"" test you are making, it is actually post-push. After a push happens to the OVIS-4 branch it would trigger, and after a pull-request is initiated that targets OVIS-4, the test would trigger.
The PR test is the important one to catch things before they are merged to the OVIS-4 branch. The OVIS-4 test is just a backup test to make sure nothing when wrong in the merge process.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,414,2020-09-23T19:01:51Z,2020-09-24T20:30:16Z,2020-09-24T20:30:16Z,CLOSED,False,22,0,1,https://github.com/baallan,add pre-push test to verify make dist does not depend on cython,1,[],https://github.com/ovis-hpc/ovis/pull/414,https://github.com/baallan,11,https://github.com/ovis-hpc/ovis/pull/414#issuecomment-697992972,This action file (when connected) will verify that 'make dist' is not broken for rhel7/vanilla toss3.,"Since we are ""supporting cython bindings where available"" and it is available in the standard ubuntu 20 environment currently in beta(ish) on github actions, I would like to see enabling it and building ldms with python/cython enabled as one of the pre-push actions. Since we're paying for github, lets use it as much as possible.
This is separate, of course, from having the default configure command work out of the box (no explicit disables or enables required).
Exactly how we name the actions is esthetics; if we accept PR #415 then I would rename the new file in this one to make-dist-cython and the perhaps figure out how to make it run build/install from the dist tar ball generated.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,414,2020-09-23T19:01:51Z,2020-09-24T20:30:16Z,2020-09-24T20:30:16Z,CLOSED,False,22,0,1,https://github.com/baallan,add pre-push test to verify make dist does not depend on cython,1,[],https://github.com/ovis-hpc/ovis/pull/414,https://github.com/baallan,12,https://github.com/ovis-hpc/ovis/pull/414#issuecomment-697995483,This action file (when connected) will verify that 'make dist' is not broken for rhel7/vanilla toss3.,"pre-push/post-PR, tomAto, tomahto",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,414,2020-09-23T19:01:51Z,2020-09-24T20:30:16Z,2020-09-24T20:30:16Z,CLOSED,False,22,0,1,https://github.com/baallan,add pre-push test to verify make dist does not depend on cython,1,[],https://github.com/ovis-hpc/ovis/pull/414,https://github.com/morrone,13,https://github.com/ovis-hpc/ovis/pull/414#issuecomment-698006255,This action file (when connected) will verify that 'make dist' is not broken for rhel7/vanilla toss3.,"Yes, I think everyone agrees that full build tests would be great to add. We just need someone to decide to do it.
If/When we change the cython check to be optional, the two existing workflows should be updated to put them back to original state where the did not specify ""--disable-cython"". In that case this patch will still not be needed.
A build test instead would certainly be great to add. Yes, that build test could certainly build from a the make dist tarball.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,414,2020-09-23T19:01:51Z,2020-09-24T20:30:16Z,2020-09-24T20:30:16Z,CLOSED,False,22,0,1,https://github.com/baallan,add pre-push test to verify make dist does not depend on cython,1,[],https://github.com/ovis-hpc/ovis/pull/414,https://github.com/morrone,14,https://github.com/ovis-hpc/ovis/pull/414#issuecomment-698138471,This action file (when connected) will verify that 'make dist' is not broken for rhel7/vanilla toss3.,"Alright, I think I've got it! See PR #417. (I dropped PR #415, 417 reverts the workflow files like I suggested here).
Give it a try, let me know if I missed anything.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,414,2020-09-23T19:01:51Z,2020-09-24T20:30:16Z,2020-09-24T20:30:16Z,CLOSED,False,22,0,1,https://github.com/baallan,add pre-push test to verify make dist does not depend on cython,1,[],https://github.com/ovis-hpc/ovis/pull/414,https://github.com/baallan,15,https://github.com/ovis-hpc/ovis/pull/414#issuecomment-698572477,This action file (when connected) will verify that 'make dist' is not broken for rhel7/vanilla toss3.,Dropping in favor of #417.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,415,2020-09-23T21:31:59Z,2020-09-24T05:59:06Z,2020-09-24T05:59:06Z,CLOSED,False,2,6,2,https://github.com/morrone,Don't download cython in the workflows when just doing make dist,1,[],https://github.com/ovis-hpc/ovis/pull/415,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/415,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,416,2020-09-23T22:44:54Z,2020-09-24T19:32:29Z,2021-01-05T20:48:07Z,CLOSED,False,215,138,10,https://github.com/Snell1224,Made suggested changes in issue #402. ,3,[],https://github.com/ovis-hpc/ovis/pull/416,https://github.com/Snell1224,1,https://github.com/ovis-hpc/ovis/pull/416,"Suggested changes from issue #402. Added prefix ""ldms-"" to all additional test scripts. The file containing the ""testlist"" of run-static-test is now 'ldms-static-test-list' which is located in $pkglibdir. The original 'static-test-list' has changed to 'ldms-static-test-bypass' which is also located in $pkglibdir. All files require the ""ldms-test"" conditional which is disabled by default.","Suggested changes from issue #402. Added prefix ""ldms-"" to all additional test scripts. The file containing the ""testlist"" of run-static-test is now 'ldms-static-test-list' which is located in $pkglibdir. The original 'static-test-list' has changed to 'ldms-static-test-bypass' which is also located in $pkglibdir. All files require the ""ldms-test"" conditional which is disabled by default.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,416,2020-09-23T22:44:54Z,2020-09-24T19:32:29Z,2021-01-05T20:48:07Z,CLOSED,False,215,138,10,https://github.com/Snell1224,Made suggested changes in issue #402. ,3,[],https://github.com/ovis-hpc/ovis/pull/416,https://github.com/Snell1224,2,https://github.com/ovis-hpc/ovis/pull/416#issuecomment-698523733,"Suggested changes from issue #402. Added prefix ""ldms-"" to all additional test scripts. The file containing the ""testlist"" of run-static-test is now 'ldms-static-test-list' which is located in $pkglibdir. The original 'static-test-list' has changed to 'ldms-static-test-bypass' which is also located in $pkglibdir. All files require the ""ldms-test"" conditional which is disabled by default.","Okay, I think ldms/src/test will be a fine location. I'll close this request and make a new one since it'll be easier to fix the commit issue and make these changes.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,416,2020-09-23T22:44:54Z,2020-09-24T19:32:29Z,2021-01-05T20:48:07Z,CLOSED,False,215,138,10,https://github.com/Snell1224,Made suggested changes in issue #402. ,3,[],https://github.com/ovis-hpc/ovis/pull/416,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/416#issuecomment-698538175,"Suggested changes from issue #402. Added prefix ""ldms-"" to all additional test scripts. The file containing the ""testlist"" of run-static-test is now 'ldms-static-test-list' which is located in $pkglibdir. The original 'static-test-list' has changed to 'ldms-static-test-bypass' which is also located in $pkglibdir. All files require the ""ldms-test"" conditional which is disabled by default.","You can make a new PR, but that is not necessary (and probably makes sense to continue here for continuity)
You just need to force-push your branch when you get it in good shape. For instance, you named your branch for this issue ""Fixes-#402"". You will want to rework that branch to have the cleaned up commit(s). After that is done you run:
git push -f <whatever remote name you gave to your Snell1224 repo>  Fixes-#402

Github will automatically see that your branch's contents have changed and update this PR with that information.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,416,2020-09-23T22:44:54Z,2020-09-24T19:32:29Z,2021-01-05T20:48:07Z,CLOSED,False,215,138,10,https://github.com/Snell1224,Made suggested changes in issue #402. ,3,[],https://github.com/ovis-hpc/ovis/pull/416,https://github.com/Snell1224,4,https://github.com/ovis-hpc/ovis/pull/416#issuecomment-698544184,"Suggested changes from issue #402. Added prefix ""ldms-"" to all additional test scripts. The file containing the ""testlist"" of run-static-test is now 'ldms-static-test-list' which is located in $pkglibdir. The original 'static-test-list' has changed to 'ldms-static-test-bypass' which is also located in $pkglibdir. All files require the ""ldms-test"" conditional which is disabled by default.",Thank you for the suggestion but I've already made the necessary changes in a new branch so I'm going to start a new PR this time around.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,416,2020-09-23T22:44:54Z,2020-09-24T19:32:29Z,2021-01-05T20:48:07Z,CLOSED,False,215,138,10,https://github.com/Snell1224,Made suggested changes in issue #402. ,3,[],https://github.com/ovis-hpc/ovis/pull/416,https://github.com/morrone,5,https://github.com/ovis-hpc/ovis/pull/416#issuecomment-698553496,"Suggested changes from issue #402. Added prefix ""ldms-"" to all additional test scripts. The file containing the ""testlist"" of run-static-test is now 'ldms-static-test-list' which is located in $pkglibdir. The original 'static-test-list' has changed to 'ldms-static-test-bypass' which is also located in $pkglibdir. All files require the ""ldms-test"" conditional which is disabled by default.","Just FYI for the future, this would have work for the new branch:
git push -f <whatever remote name you gave to your Snell1224 repo> <new-branch-name>:Fixes-#402

The name of the branch in your local repo and the name in the remote repo don't need to be the same. You can push a local branch name to a different remote name using this : syntax.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,416,2020-09-23T22:44:54Z,2020-09-24T19:32:29Z,2021-01-05T20:48:07Z,CLOSED,False,215,138,10,https://github.com/Snell1224,Made suggested changes in issue #402. ,3,[],https://github.com/ovis-hpc/ovis/pull/416,https://github.com/Snell1224,6,https://github.com/ovis-hpc/ovis/pull/416#issuecomment-698557501,"Suggested changes from issue #402. Added prefix ""ldms-"" to all additional test scripts. The file containing the ""testlist"" of run-static-test is now 'ldms-static-test-list' which is located in $pkglibdir. The original 'static-test-list' has changed to 'ldms-static-test-bypass' which is also located in $pkglibdir. All files require the ""ldms-test"" conditional which is disabled by default.","Good to know, I'll definitely use this for future PR's. Thank you.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,417,2020-09-24T06:16:55Z,2020-09-28T19:08:04Z,2020-09-28T19:08:04Z,MERGED,True,79,38,6,https://github.com/morrone,Make the python & cython autoconf checks optional by default,2,[],https://github.com/ovis-hpc/ovis/pull/417,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/417,"Make the python & cython autoconf checks optional by default.
Also allow python & cython to be required with --enable-python,
and disabled with --disable-python.
It turns out that the AX_PYTHON_DEVEL macro is dependent on the
AM_PATH_PYTHON macro. While the AX_PYTHON_DEVEL macro does not
have action-if-found/-not-found options, the AM_PATH_PYTHON macro
does. While it this still allows that AM_PATH_PYTHON can succeed
and AX_PYTHON_DEVEL can fail, in most instances this won't be
the case.
The CYTHON_CHECK macro is upgraded to have action-if-found and
action-if-not-found options. Also the macro is moved into its
own file in the m4 directory.
Since the cython check is now conditional, we remove the special
cython handling from the make dist and create release workflows.","Make the python & cython autoconf checks optional by default.
Also allow python & cython to be required with --enable-python,
and disabled with --disable-python.
It turns out that the AX_PYTHON_DEVEL macro is dependent on the
AM_PATH_PYTHON macro. While the AX_PYTHON_DEVEL macro does not
have action-if-found/-not-found options, the AM_PATH_PYTHON macro
does. While it this still allows that AM_PATH_PYTHON can succeed
and AX_PYTHON_DEVEL can fail, in most instances this won't be
the case.
The CYTHON_CHECK macro is upgraded to have action-if-found and
action-if-not-found options. Also the macro is moved into its
own file in the m4 directory.
Since the cython check is now conditional, we remove the special
cython handling from the make dist and create release workflows.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,417,2020-09-24T06:16:55Z,2020-09-28T19:08:04Z,2020-09-28T19:08:04Z,MERGED,True,79,38,6,https://github.com/morrone,Make the python & cython autoconf checks optional by default,2,[],https://github.com/ovis-hpc/ovis/pull/417,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/417#issuecomment-699030149,"Make the python & cython autoconf checks optional by default.
Also allow python & cython to be required with --enable-python,
and disabled with --disable-python.
It turns out that the AX_PYTHON_DEVEL macro is dependent on the
AM_PATH_PYTHON macro. While the AX_PYTHON_DEVEL macro does not
have action-if-found/-not-found options, the AM_PATH_PYTHON macro
does. While it this still allows that AM_PATH_PYTHON can succeed
and AX_PYTHON_DEVEL can fail, in most instances this won't be
the case.
The CYTHON_CHECK macro is upgraded to have action-if-found and
action-if-not-found options. Also the macro is moved into its
own file in the m4 directory.
Since the cython check is now conditional, we remove the special
cython handling from the make dist and create release workflows.",@morrone Thanks. builds out of the box for me on our toss3 machines.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,419,2020-09-24T16:25:51Z,2020-09-24T19:08:48Z,2020-09-24T19:08:48Z,MERGED,True,14,213,15,https://github.com/morrone,Remove last vestiges of swig from the tree,1,[],https://github.com/ovis-hpc/ovis/pull/419,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/419,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,420,2020-09-24T16:56:41Z,2020-09-24T19:01:38Z,2020-09-24T19:01:39Z,MERGED,True,50,5,17,https://github.com/morrone,Add configure and build products to .gitignore files,1,[],https://github.com/ovis-hpc/ovis/pull/420,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/420,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,421,2020-09-24T19:58:21Z,2020-09-28T19:09:12Z,2020-09-28T19:09:12Z,MERGED,True,202,137,8,https://github.com/Snell1224,Moved test scripts to ldms/src/test and added conditional,1,[],https://github.com/ovis-hpc/ovis/pull/421,https://github.com/Snell1224,1,https://github.com/ovis-hpc/ovis/pull/421,"Suggested changes from issue #402. Added prefix ""ldms-"" to all additional test scripts. The file containing the ""$testlist"" array in run-static-test is now 'ldms-static-test-list'. The original 'static-test-list' has changed to 'ldms-static-test-bypass'. All files are located in ldms/src/test, are installed in $pkglibdir and require the ""ldms-test"" conditional which is disabled by default.","Suggested changes from issue #402. Added prefix ""ldms-"" to all additional test scripts. The file containing the ""$testlist"" array in run-static-test is now 'ldms-static-test-list'. The original 'static-test-list' has changed to 'ldms-static-test-bypass'. All files are located in ldms/src/test, are installed in $pkglibdir and require the ""ldms-test"" conditional which is disabled by default.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,421,2020-09-24T19:58:21Z,2020-09-28T19:09:12Z,2020-09-28T19:09:12Z,MERGED,True,202,137,8,https://github.com/Snell1224,Moved test scripts to ldms/src/test and added conditional,1,[],https://github.com/ovis-hpc/ovis/pull/421,https://github.com/Snell1224,2,https://github.com/ovis-hpc/ovis/pull/421#issuecomment-698616555,"Suggested changes from issue #402. Added prefix ""ldms-"" to all additional test scripts. The file containing the ""$testlist"" array in run-static-test is now 'ldms-static-test-list'. The original 'static-test-list' has changed to 'ldms-static-test-bypass'. All files are located in ldms/src/test, are installed in $pkglibdir and require the ""ldms-test"" conditional which is disabled by default.","Okay I've modified the Makefile.am and ldms-static-test-list.sh with your suggested changes. I left the install-data-hook alone since, from issue #402, we want the files to be installed in $pkglibdir",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,421,2020-09-24T19:58:21Z,2020-09-28T19:09:12Z,2020-09-28T19:09:12Z,MERGED,True,202,137,8,https://github.com/Snell1224,Moved test scripts to ldms/src/test and added conditional,1,[],https://github.com/ovis-hpc/ovis/pull/421,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/421#issuecomment-698622952,"Suggested changes from issue #402. Added prefix ""ldms-"" to all additional test scripts. The file containing the ""$testlist"" array in run-static-test is now 'ldms-static-test-list'. The original 'static-test-list' has changed to 'ldms-static-test-bypass'. All files are located in ldms/src/test, are installed in $pkglibdir and require the ""ldms-test"" conditional which is disabled by default.","Thanks for those updates! I haven't checked if the script works, but I think the build system issues are resolved now.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,421,2020-09-24T19:58:21Z,2020-09-28T19:09:12Z,2020-09-28T19:09:12Z,MERGED,True,202,137,8,https://github.com/Snell1224,Moved test scripts to ldms/src/test and added conditional,1,[],https://github.com/ovis-hpc/ovis/pull/421,https://github.com/Snell1224,4,https://github.com/ovis-hpc/ovis/pull/421#issuecomment-698639894,"Suggested changes from issue #402. Added prefix ""ldms-"" to all additional test scripts. The file containing the ""$testlist"" array in run-static-test is now 'ldms-static-test-list'. The original 'static-test-list' has changed to 'ldms-static-test-bypass'. All files are located in ldms/src/test, are installed in $pkglibdir and require the ""ldms-test"" conditional which is disabled by default.","Sure, no problem! I've ran the script on my local repo and it seems to be working fine. Although I do have python disabled since the system I'm running on doesn't have the updated python and cython versions installed. I don't think that would affect the script but I'm not entirely sure. Let me know if there's any other changes that need to be made.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,421,2020-09-24T19:58:21Z,2020-09-28T19:09:12Z,2020-09-28T19:09:12Z,MERGED,True,202,137,8,https://github.com/Snell1224,Moved test scripts to ldms/src/test and added conditional,1,[],https://github.com/ovis-hpc/ovis/pull/421,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/421#issuecomment-699066800,"Suggested changes from issue #402. Added prefix ""ldms-"" to all additional test scripts. The file containing the ""$testlist"" array in run-static-test is now 'ldms-static-test-list'. The original 'static-test-list' has changed to 'ldms-static-test-bypass'. All files are located in ldms/src/test, are installed in $pkglibdir and require the ""ldms-test"" conditional which is disabled by default.","One final nit, can we please not put the issue# in the commit message summary line. It will be meaningless to anyone exploring the change history outside of github.
It might be a good practice, however, to reference the commit-id when closing the issue.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,421,2020-09-24T19:58:21Z,2020-09-28T19:09:12Z,2020-09-28T19:09:12Z,MERGED,True,202,137,8,https://github.com/Snell1224,Moved test scripts to ldms/src/test and added conditional,1,[],https://github.com/ovis-hpc/ovis/pull/421,https://github.com/morrone,6,https://github.com/ovis-hpc/ovis/pull/421#issuecomment-699096440,"Suggested changes from issue #402. Added prefix ""ldms-"" to all additional test scripts. The file containing the ""$testlist"" array in run-static-test is now 'ldms-static-test-list'. The original 'static-test-list' has changed to 'ldms-static-test-bypass'. All files are located in ldms/src/test, are installed in $pkglibdir and require the ""ldms-test"" conditional which is disabled by default.","One final nit, can we please not put the issue# in the commit message summary line. It will be meaningless to anyone exploring the change history outside of github.
It might be a good practice, however, to reference the commit-id when closing the issue.

I agree that it should not be in the summary. When I suggested referencing the issue in the commit message, I might not have been clear enough. The issue reference should not be on the summary line, only in the body. And the body still needs to describe the commit on its own as if the issue reference was not there. Then the issue reference would be added at the very bottom of the commit message using a github keyword like this:
Fixes #402

The word ""fixes"" that I use here, and mentioned previously, is key because it is one of the keywords that github understands:
https://github.com/gitbucket/gitbucket/wiki/How-to-Close-Reference-issues-and-pull-request
This linkage will then automatically close the linked issue when the PR is merged. If the commit does not completely resolve the issue, so its landing should not automatically close the issue, then it would be best to not use one of those keywords. Instead use other wording like ""Related to issue #402"".
But yes, this information should just be an extra tacked onto the end of the commit message. It does not replace normal rules for writing good commit messages.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,421,2020-09-24T19:58:21Z,2020-09-28T19:09:12Z,2020-09-28T19:09:12Z,MERGED,True,202,137,8,https://github.com/Snell1224,Moved test scripts to ldms/src/test and added conditional,1,[],https://github.com/ovis-hpc/ovis/pull/421,https://github.com/tom95858,7,https://github.com/ovis-hpc/ovis/pull/421#issuecomment-699097674,"Suggested changes from issue #402. Added prefix ""ldms-"" to all additional test scripts. The file containing the ""$testlist"" array in run-static-test is now 'ldms-static-test-list'. The original 'static-test-list' has changed to 'ldms-static-test-bypass'. All files are located in ldms/src/test, are installed in $pkglibdir and require the ""ldms-test"" conditional which is disabled by default.","Thanks @morrone, this all sounds reasonable to me, @Snell1224 please fix the commit message as suggested and I think we're good to go.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,421,2020-09-24T19:58:21Z,2020-09-28T19:09:12Z,2020-09-28T19:09:12Z,MERGED,True,202,137,8,https://github.com/Snell1224,Moved test scripts to ldms/src/test and added conditional,1,[],https://github.com/ovis-hpc/ovis/pull/421,https://github.com/baallan,8,https://github.com/ovis-hpc/ovis/pull/421#issuecomment-699188626,"Suggested changes from issue #402. Added prefix ""ldms-"" to all additional test scripts. The file containing the ""$testlist"" array in run-static-test is now 'ldms-static-test-list'. The original 'static-test-list' has changed to 'ldms-static-test-bypass'. All files are located in ldms/src/test, are installed in $pkglibdir and require the ""ldms-test"" conditional which is disabled by default.","@morrone @tom95858 related to the ""what do we do with installed tests and demos"" topic:
we use pkglibdir for our plugins (which seems to me fine).
I have seen other packages structure pkglibdir to keep it cleaner for the plugin users, e.g.
$pkglibdir/bin
$pkglibdir/data
for utilities not every-day user-facing but also not being the pure example stuff that belongs in /usr/share/doc/$pkg/topic.
Does that seem a directionally correct thing to do? might make some packaging script declarations simpler.
On the other hand I'm not allergic to filling up /usr/bin with ldms* rarely-used programs. We have lots of example in hpc of that (ib* for example).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,421,2020-09-24T19:58:21Z,2020-09-28T19:09:12Z,2020-09-28T19:09:12Z,MERGED,True,202,137,8,https://github.com/Snell1224,Moved test scripts to ldms/src/test and added conditional,1,[],https://github.com/ovis-hpc/ovis/pull/421,https://github.com/Snell1224,9,https://github.com/ovis-hpc/ovis/pull/421#issuecomment-700141759,"Suggested changes from issue #402. Added prefix ""ldms-"" to all additional test scripts. The file containing the ""$testlist"" array in run-static-test is now 'ldms-static-test-list'. The original 'static-test-list' has changed to 'ldms-static-test-bypass'. All files are located in ldms/src/test, are installed in $pkglibdir and require the ""ldms-test"" conditional which is disabled by default.",@morrone @tom95858 The commit message is updated without the issue number. Please let me know if anything else regarding the commit or comment messages need to be changed.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,422,2020-09-24T22:56:37Z,2020-09-25T22:17:16Z,2020-09-25T22:17:16Z,MERGED,True,209,73,48,https://github.com/baallan,update ldms-static-tests.sh for new plugin:port:host syntax,1,[],https://github.com/ovis-hpc/ovis/pull/422,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/422,"ldms_ls and ldmsd require host in some cases of transport specification,
particularly when the fabric transport is in use.
This commit adds xprt specification tests and updates the driver
and scripts to respect a user defined HOST variable in test scripting
instead of assuming localhost.","ldms_ls and ldmsd require host in some cases of transport specification,
particularly when the fabric transport is in use.
This commit adds xprt specification tests and updates the driver
and scripts to respect a user defined HOST variable in test scripting
instead of assuming localhost.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,424,2020-09-25T16:22:36Z,2020-09-25T22:13:42Z,2020-10-08T19:57:24Z,MERGED,True,74,3,2,https://github.com/nichamon,Verify the given interval and offset values of an updater are valid,1,[],https://github.com/ovis-hpc/ovis/pull/424,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/424,"The checks are

the given interval value is not an empty string,
the given interval value is a number,
the given interval value is greater than 0,
the given offset value is not an empty string,
the given offset value is a number.

ldmsd_updtr_new_with_auth() receives the interval and offset values as
char *. The checks are made before the function is called to keep the
patch small, i.e., no changes to the function signature and its
references. If the checks are made in the fucntion, there are no trivial
ways to send informative error messages to remote clients, e.g.,
ldmsd_controller.","The checks are

the given interval value is not an empty string,
the given interval value is a number,
the given interval value is greater than 0,
the given offset value is not an empty string,
the given offset value is a number.

ldmsd_updtr_new_with_auth() receives the interval and offset values as
char *. The checks are made before the function is called to keep the
patch small, i.e., no changes to the function signature and its
references. If the checks are made in the fucntion, there are no trivial
ways to send informative error messages to remote clients, e.g.,
ldmsd_controller.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,424,2020-09-25T16:22:36Z,2020-09-25T22:13:42Z,2020-10-08T19:57:24Z,MERGED,True,74,3,2,https://github.com/nichamon,Verify the given interval and offset values of an updater are valid,1,[],https://github.com/ovis-hpc/ovis/pull/424,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/424#issuecomment-699033159,"The checks are

the given interval value is not an empty string,
the given interval value is a number,
the given interval value is greater than 0,
the given offset value is not an empty string,
the given offset value is a number.

ldmsd_updtr_new_with_auth() receives the interval and offset values as
char *. The checks are made before the function is called to keep the
patch small, i.e., no changes to the function signature and its
references. If the checks are made in the fucntion, there are no trivial
ways to send informative error messages to remote clients, e.g.,
ldmsd_controller.","I thought the interval == 0 was allowed for one-time immediate events.
If trapping errors later is hard, this location is also the place where we need a check for abs(offset ) <= interval/2 (or however we code the check to be consistent with the scheduling use of offset).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,424,2020-09-25T16:22:36Z,2020-09-25T22:13:42Z,2020-10-08T19:57:24Z,MERGED,True,74,3,2,https://github.com/nichamon,Verify the given interval and offset values of an updater are valid,1,[],https://github.com/ovis-hpc/ovis/pull/424,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/424#issuecomment-699068236,"The checks are

the given interval value is not an empty string,
the given interval value is a number,
the given interval value is greater than 0,
the given offset value is not an empty string,
the given offset value is a number.

ldmsd_updtr_new_with_auth() receives the interval and offset values as
char *. The checks are made before the function is called to keep the
patch small, i.e., no changes to the function signature and its
references. If the checks are made in the fucntion, there are no trivial
ways to send informative error messages to remote clients, e.g.,
ldmsd_controller.","@nichamon, also add argument checking in ldmsd_updtr_new_with_auth.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,424,2020-09-25T16:22:36Z,2020-09-25T22:13:42Z,2020-10-08T19:57:24Z,MERGED,True,74,3,2,https://github.com/nichamon,Verify the given interval and offset values of an updater are valid,1,[],https://github.com/ovis-hpc/ovis/pull/424,https://github.com/tom95858,4,https://github.com/ovis-hpc/ovis/pull/424#issuecomment-699068908,"The checks are

the given interval value is not an empty string,
the given interval value is a number,
the given interval value is greater than 0,
the given offset value is not an empty string,
the given offset value is a number.

ldmsd_updtr_new_with_auth() receives the interval and offset values as
char *. The checks are made before the function is called to keep the
patch small, i.e., no changes to the function signature and its
references. If the checks are made in the fucntion, there are no trivial
ways to send informative error messages to remote clients, e.g.,
ldmsd_controller.","@nichamon sorry one more thing, add an 'invalid argument' test(s) to the ldmsd_updtr_new_with_auth test cases.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,424,2020-09-25T16:22:36Z,2020-09-25T22:13:42Z,2020-10-08T19:57:24Z,MERGED,True,74,3,2,https://github.com/nichamon,Verify the given interval and offset values of an updater are valid,1,[],https://github.com/ovis-hpc/ovis/pull/424,https://github.com/nichamon,5,https://github.com/ovis-hpc/ovis/pull/424#issuecomment-699120643,"The checks are

the given interval value is not an empty string,
the given interval value is a number,
the given interval value is greater than 0,
the given offset value is not an empty string,
the given offset value is a number.

ldmsd_updtr_new_with_auth() receives the interval and offset values as
char *. The checks are made before the function is called to keep the
patch small, i.e., no changes to the function signature and its
references. If the checks are made in the fucntion, there are no trivial
ways to send informative error messages to remote clients, e.g.,
ldmsd_controller.","@nichamon, also add argument checking in ldmsd_updtr_new_with_auth.

Done",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,424,2020-09-25T16:22:36Z,2020-09-25T22:13:42Z,2020-10-08T19:57:24Z,MERGED,True,74,3,2,https://github.com/nichamon,Verify the given interval and offset values of an updater are valid,1,[],https://github.com/ovis-hpc/ovis/pull/424,https://github.com/nichamon,6,https://github.com/ovis-hpc/ovis/pull/424#issuecomment-699120905,"The checks are

the given interval value is not an empty string,
the given interval value is a number,
the given interval value is greater than 0,
the given offset value is not an empty string,
the given offset value is a number.

ldmsd_updtr_new_with_auth() receives the interval and offset values as
char *. The checks are made before the function is called to keep the
patch small, i.e., no changes to the function signature and its
references. If the checks are made in the fucntion, there are no trivial
ways to send informative error messages to remote clients, e.g.,
ldmsd_controller.","@nichamon sorry one more thing, add an 'invalid argument' test(s) to the ldmsd_updtr_new_with_auth test cases.

@tom95858 I'll add this to my list.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,424,2020-09-25T16:22:36Z,2020-09-25T22:13:42Z,2020-10-08T19:57:24Z,MERGED,True,74,3,2,https://github.com/nichamon,Verify the given interval and offset values of an updater are valid,1,[],https://github.com/ovis-hpc/ovis/pull/424,https://github.com/nichamon,7,https://github.com/ovis-hpc/ovis/pull/424#issuecomment-699121238,"The checks are

the given interval value is not an empty string,
the given interval value is a number,
the given interval value is greater than 0,
the given offset value is not an empty string,
the given offset value is a number.

ldmsd_updtr_new_with_auth() receives the interval and offset values as
char *. The checks are made before the function is called to keep the
patch small, i.e., no changes to the function signature and its
references. If the checks are made in the fucntion, there are no trivial
ways to send informative error messages to remote clients, e.g.,
ldmsd_controller.","I thought the interval == 0 was allowed for one-time immediate events.
If trapping errors later is hard, this location is also the place where we need a check for abs(offset ) <= interval/2 (or however we code the check to be consistent with the scheduling use of offset).

@baallan I added the verification of offset. The logic used in this patch is the same as the one used to verify the sample offset.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,424,2020-09-25T16:22:36Z,2020-09-25T22:13:42Z,2020-10-08T19:57:24Z,MERGED,True,74,3,2,https://github.com/nichamon,Verify the given interval and offset values of an updater are valid,1,[],https://github.com/ovis-hpc/ovis/pull/424,https://github.com/tom95858,8,https://github.com/ovis-hpc/ovis/pull/424#issuecomment-699156200,"The checks are

the given interval value is not an empty string,
the given interval value is a number,
the given interval value is greater than 0,
the given offset value is not an empty string,
the given offset value is a number.

ldmsd_updtr_new_with_auth() receives the interval and offset values as
char *. The checks are made before the function is called to keep the
patch small, i.e., no changes to the function signature and its
references. If the checks are made in the fucntion, there are no trivial
ways to send informative error messages to remote clients, e.g.,
ldmsd_controller.","@nichamon, can you please add
Fixes #423 

To the end of the commit message.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,424,2020-09-25T16:22:36Z,2020-09-25T22:13:42Z,2020-10-08T19:57:24Z,MERGED,True,74,3,2,https://github.com/nichamon,Verify the given interval and offset values of an updater are valid,1,[],https://github.com/ovis-hpc/ovis/pull/424,https://github.com/nichamon,9,https://github.com/ovis-hpc/ovis/pull/424#issuecomment-699157852,"The checks are

the given interval value is not an empty string,
the given interval value is a number,
the given interval value is greater than 0,
the given offset value is not an empty string,
the given offset value is a number.

ldmsd_updtr_new_with_auth() receives the interval and offset values as
char *. The checks are made before the function is called to keep the
patch small, i.e., no changes to the function signature and its
references. If the checks are made in the fucntion, there are no trivial
ways to send informative error messages to remote clients, e.g.,
ldmsd_controller.","@nichamon, can you please add
Fixes #423 

To the end of the commit message.

@tom95858 Done.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,425,2020-09-25T22:16:31Z,2020-09-25T22:25:42Z,2020-09-25T22:25:42Z,MERGED,True,8,20,3,https://github.com/baallan,"fix test_util.c nits (add sentinel warning, sleep demo)",1,[],https://github.com/ovis-hpc/ovis/pull/425,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/425,"This update allows test_util to run to completion, puts in a test for sleep and other program calls in $( ) popen expansion, and puts in a compiler warning for ovis_join operations which are not null-terminated as required by the header descriptoin.","This update allows test_util to run to completion, puts in a test for sleep and other program calls in $( ) popen expansion, and puts in a compiler warning for ovis_join operations which are not null-terminated as required by the header descriptoin.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,426,2020-09-27T05:26:29Z,2020-09-28T19:21:28Z,2020-12-08T03:27:43Z,MERGED,True,5,3,2,https://github.com/narategithub,`ldms_init()` returns errno for consistency,1,[],https://github.com/ovis-hpc/ovis/pull/426,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/426,"ldms_init() returned -1 on error, which is inconsistent to other
ldms interfaces. It shall return errno for consistency.","ldms_init() returned -1 on error, which is inconsistent to other
ldms interfaces. It shall return errno for consistency.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,426,2020-09-27T05:26:29Z,2020-09-28T19:21:28Z,2020-12-08T03:27:43Z,MERGED,True,5,3,2,https://github.com/narategithub,`ldms_init()` returns errno for consistency,1,[],https://github.com/ovis-hpc/ovis/pull/426,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/426#issuecomment-700091326,"ldms_init() returned -1 on error, which is inconsistent to other
ldms interfaces. It shall return errno for consistency.",I'm inclined to think that init for the package would be better returning -1 and setting errno as many other unix tools do.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,427,2020-09-27T05:27:04Z,2020-09-28T18:02:47Z,2020-12-08T03:28:00Z,MERGED,True,2,1,1,https://github.com/narategithub,Fix double-free when LDMS lookup yields multiple sets,1,[],https://github.com/ovis-hpc/ovis/pull/427,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/427,"In some lookup mode, e.g. LOOKUP_RE and LOOKU_BY_SCHEMA, there can be
multiple sets resulting from the lookup operation. The lookup requesting
side shall expect multiple rendezvous messages from this one lookup
request. However, on the requesting side, the lookup request context was
prematurely freed after the first rendezvous message was received, and
the same ctxt was double-freed in the second rendezvous, and so-on.
The lookup.more flag in the rendezvous message tells the requesting
side if this is the last rendezvous messgae. It shall be checked, and
the lookup context shall not be freed if more rendezvous messages are
expected.","In some lookup mode, e.g. LOOKUP_RE and LOOKU_BY_SCHEMA, there can be
multiple sets resulting from the lookup operation. The lookup requesting
side shall expect multiple rendezvous messages from this one lookup
request. However, on the requesting side, the lookup request context was
prematurely freed after the first rendezvous message was received, and
the same ctxt was double-freed in the second rendezvous, and so-on.
The lookup.more flag in the rendezvous message tells the requesting
side if this is the last rendezvous messgae. It shall be checked, and
the lookup context shall not be freed if more rendezvous messages are
expected.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,428,2020-09-27T05:27:45Z,2020-09-28T19:29:28Z,2020-12-08T03:27:12Z,MERGED,True,64,63,1,https://github.com/narategithub,LDMS Cython with proper exceptions,1,[],https://github.com/ovis-hpc/ovis/pull/428,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/428,"LDMS Cython was using RuntimeError to raise an error from within the
module to the Python application. Even with string describing the error,
it lacks useful attribute such as errno from the underlying C code.
In this patch, RuntimeError usages were replaced with
ConnectionError if the error concerned a transport. For other errors
not directly concerning a transport but stemmed from C function calls,
OSError (the parent of all exceptions that have errno attribute) is
used with the corresponding errno. For all other errors not concerning
C function calls, the more appropriate exception classes from the Python
""builtins"" were selected.","LDMS Cython was using RuntimeError to raise an error from within the
module to the Python application. Even with string describing the error,
it lacks useful attribute such as errno from the underlying C code.
In this patch, RuntimeError usages were replaced with
ConnectionError if the error concerned a transport. For other errors
not directly concerning a transport but stemmed from C function calls,
OSError (the parent of all exceptions that have errno attribute) is
used with the corresponding errno. For all other errors not concerning
C function calls, the more appropriate exception classes from the Python
""builtins"" were selected.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,429,2020-09-27T05:28:12Z,2020-09-28T19:29:47Z,2020-12-08T03:27:19Z,MERGED,True,810,0,8,https://github.com/narategithub,Add LDMS Cython tests (also serves as examples),1,[],https://github.com/ovis-hpc/ovis/pull/429,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/429,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,429,2020-09-27T05:28:12Z,2020-09-28T19:29:47Z,2020-12-08T03:27:19Z,MERGED,True,810,0,8,https://github.com/narategithub,Add LDMS Cython tests (also serves as examples),1,[],https://github.com/ovis-hpc/ovis/pull/429,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/429#issuecomment-699678999,,"NOTE: Since the test uses lookup by schema, it needs #427.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,430,2020-09-28T03:47:21Z,2020-09-28T19:30:13Z,2022-01-18T04:09:46Z,MERGED,True,552,34,3,https://github.com/nichamon,Extend the ovis_json library functionalities,1,[],https://github.com/ovis-hpc/ovis/pull/430,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/430,"The following functionalities are added.

Dump a JSON entity to a string (json_entity_dump)
Copy a JSON entity (json_entity_copy)
Create a JSON dictionary entity by giving the list of its
attribute-value pairs (json_dict_build)
Return the number of dictionary attributes (json_attr_cnt)
Remove an attribute from a dictionary (json_attr_rem)
Pop an element of a list (json_item_pop)
Remove an element of a list (json_item_rem)

For ease of use, the following changes are made.

To create a JSON ATTR entity, json_entity_new() receives char *
instead of json_entity_t for the attribute key
json_attr_add() receives char * as key and json_entity_t as attribute
value, instead of a single attribute entity itself","The following functionalities are added.

Dump a JSON entity to a string (json_entity_dump)
Copy a JSON entity (json_entity_copy)
Create a JSON dictionary entity by giving the list of its
attribute-value pairs (json_dict_build)
Return the number of dictionary attributes (json_attr_cnt)
Remove an attribute from a dictionary (json_attr_rem)
Pop an element of a list (json_item_pop)
Remove an element of a list (json_item_rem)

For ease of use, the following changes are made.

To create a JSON ATTR entity, json_entity_new() receives char *
instead of json_entity_t for the attribute key
json_attr_add() receives char * as key and json_entity_t as attribute
value, instead of a single attribute entity itself",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,430,2020-09-28T03:47:21Z,2020-09-28T19:30:13Z,2022-01-18T04:09:46Z,MERGED,True,552,34,3,https://github.com/nichamon,Extend the ovis_json library functionalities,1,[],https://github.com/ovis-hpc/ovis/pull/430,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/430#issuecomment-699754914,"The following functionalities are added.

Dump a JSON entity to a string (json_entity_dump)
Copy a JSON entity (json_entity_copy)
Create a JSON dictionary entity by giving the list of its
attribute-value pairs (json_dict_build)
Return the number of dictionary attributes (json_attr_cnt)
Remove an attribute from a dictionary (json_attr_rem)
Pop an element of a list (json_item_pop)
Remove an element of a list (json_item_rem)

For ease of use, the following changes are made.

To create a JSON ATTR entity, json_entity_new() receives char *
instead of json_entity_t for the attribute key
json_attr_add() receives char * as key and json_entity_t as attribute
value, instead of a single attribute entity itself",@tom95858 The changes to json_entity_new() and  json_attr_add() don't affect any other source files because there are no callers. I tested the changes with the FVT that is to be merged into the TADA repo.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,431,2020-09-28T06:58:22Z,2020-09-28T19:32:53Z,2020-09-28T19:32:53Z,MERGED,True,21,2,2,https://github.com/morrone,Introduce a build test workflow using a custom CentOS7 container,2,[],https://github.com/ovis-hpc/ovis/pull/431,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/431,"This is a first simple build test for ovis/ldms that uses a CentOS7 container that I created and pushed to Docker Hub.
The test just does autogen, configure, and make. We can expand on this over time, expanding this flow and perhaps adding
other build/test workflows as needed. But this perhaps will server as a good starting point for testing builds.
The logic to employ a container in the github workflow is really simple. We just add the following to the job:
    container:
        image: morrone/centos7-ldms-build:latest

This workflow uses an image that I created using the following Dockerfile:
FROM centos:7
RUN yum install -y epel-release && yum update -y && yum install -y \
autoconf \
automake \
libtool \
make \
bison \
flex \
gettext-devel \
libevent-devel \
openssl-devel \
python3-devel \
python36-Cython

Eventually the ovis team may wish to set up its own Docker Hub account and containers. But I am happy to maintain this particular container for now. I will at least make sure to not put a broken ""latest"" tag up for that container, so it should be safe to land this workflow.","This is a first simple build test for ovis/ldms that uses a CentOS7 container that I created and pushed to Docker Hub.
The test just does autogen, configure, and make. We can expand on this over time, expanding this flow and perhaps adding
other build/test workflows as needed. But this perhaps will server as a good starting point for testing builds.
The logic to employ a container in the github workflow is really simple. We just add the following to the job:
    container:
        image: morrone/centos7-ldms-build:latest

This workflow uses an image that I created using the following Dockerfile:
FROM centos:7
RUN yum install -y epel-release && yum update -y && yum install -y \
autoconf \
automake \
libtool \
make \
bison \
flex \
gettext-devel \
libevent-devel \
openssl-devel \
python3-devel \
python36-Cython

Eventually the ovis team may wish to set up its own Docker Hub account and containers. But I am happy to maintain this particular container for now. I will at least make sure to not put a broken ""latest"" tag up for that container, so it should be safe to land this workflow.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,432,2020-09-29T01:32:35Z,2020-09-29T18:02:38Z,2020-12-08T03:27:22Z,MERGED,True,1,1,1,https://github.com/narategithub,Amend LDMS Cython error type,1,[],https://github.com/ovis-hpc/ovis/pull/432,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/432,"This patch changes TypeError to ValueError per @tom95858 code review
in #428. @narategithub forgot to add -a when he did git --amend.","This patch changes TypeError to ValueError per @tom95858 code review
in #428. @narategithub forgot to add -a when he did git --amend.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,433,2020-09-29T03:42:14Z,2020-09-29T21:48:41Z,2020-09-29T21:48:41Z,MERGED,True,81,132,10,https://github.com/morrone,Update the README,2,[],https://github.com/ovis-hpc/ovis/pull/433,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/433,"This is a first pass at updating the REAME before the 4.3.4 release. It could probably use more work, but perhaps it will be a good starting point.","This is a first pass at updating the REAME before the 4.3.4 release. It could probably use more work, but perhaps it will be a good starting point.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,433,2020-09-29T03:42:14Z,2020-09-29T21:48:41Z,2020-09-29T21:48:41Z,MERGED,True,81,132,10,https://github.com/morrone,Update the README,2,[],https://github.com/ovis-hpc/ovis/pull/433,https://github.com/morrone,2,https://github.com/ovis-hpc/ovis/pull/433#issuecomment-700925810,"This is a first pass at updating the REAME before the 4.3.4 release. It could probably use more work, but perhaps it will be a good starting point.","In addition to the fixes for the review comments, in this version I delete a few of the other README files that are now obsolete. I also delete the obsolete Changelog files in the second commit.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,435,2020-09-29T16:59:08Z,2020-09-29T18:02:00Z,2020-12-08T03:27:05Z,MERGED,True,0,1,1,https://github.com/narategithub,Remove misleading libevent comment in configure,1,[],https://github.com/ovis-hpc/ovis/pull/435,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/435,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,436,2020-09-30T00:15:10Z,2020-09-30T19:27:26Z,2020-09-30T19:27:26Z,MERGED,True,117,278,28,https://github.com/morrone,Build system cleanup,2,[],https://github.com/ovis-hpc/ovis/pull/436,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/436,"Eliminate many unnecessary uses of install-data-local, install-exec-local, clean-local, and related. Replace them with normal automake mechanisms.
Also add more .gitignore entries for build-time files.","Eliminate many unnecessary uses of install-data-local, install-exec-local, clean-local, and related. Replace them with normal automake mechanisms.
Also add more .gitignore entries for build-time files.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,437,2020-09-30T04:47:17Z,2020-09-30T19:28:16Z,2020-12-08T03:28:41Z,MERGED,True,1,1,1,https://github.com/narategithub,Fix zap_ugni GNI_SubscribeErrors error in non-privileged mode,1,[],https://github.com/ovis-hpc/ovis/pull/437,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/437,"Calling GNI_SubscribeErrors() with NULL nic_handle is restricted for
privileged users. For a non-privileged user, the function call results
in GNI_RC_INVALID_PARAM. Since GNI_SubscribeErrors() is called after
zap_ugni attached to a domain and got a _dom.nic handle, the handle is
is used instead of NULL so that non-privileged users can also use
zap_ugni.","Calling GNI_SubscribeErrors() with NULL nic_handle is restricted for
privileged users. For a non-privileged user, the function call results
in GNI_RC_INVALID_PARAM. Since GNI_SubscribeErrors() is called after
zap_ugni attached to a domain and got a _dom.nic handle, the handle is
is used instead of NULL so that non-privileged users can also use
zap_ugni.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,438,2020-09-30T04:47:37Z,2020-09-30T19:28:33Z,2020-12-08T03:27:40Z,MERGED,True,2,2,2,https://github.com/narategithub,Address `-Wall -Werror` error (format-truncation),1,[],https://github.com/ovis-hpc/ovis/pull/438,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/438,"-Wall in GCC 9.3.0 enables -Wformat which also enables
-Wformat-truncation. The -Wformat-truncation warns about possible
formatted output truncationl. For example,
char buff[64];
char s[64];
fgets(s, 63, stdin);
snprintf(buff, sizeof(buff), ""s is %s"", s);
the length of s could be 63, the format ""s is %s"" could be
larger than 64 which results in a warning that turns in to an error by
-Werror.
The two places in the code tree that have format-truncation warnings
have the same kind of usage above, i.e. string printing into another
string with the same size. The printing strings (equivalent to s in
example above) were too big for the content they hold. Downsizing
them appropriately cleared the format-truncation warnings.","-Wall in GCC 9.3.0 enables -Wformat which also enables
-Wformat-truncation. The -Wformat-truncation warns about possible
formatted output truncationl. For example,
char buff[64];
char s[64];
fgets(s, 63, stdin);
snprintf(buff, sizeof(buff), ""s is %s"", s);
the length of s could be 63, the format ""s is %s"" could be
larger than 64 which results in a warning that turns in to an error by
-Werror.
The two places in the code tree that have format-truncation warnings
have the same kind of usage above, i.e. string printing into another
string with the same size. The printing strings (equivalent to s in
example above) were too big for the content they hold. Downsizing
them appropriately cleared the format-truncation warnings.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,439,2020-09-30T19:34:56Z,2020-09-30T19:35:04Z,2020-09-30T19:35:09Z,MERGED,True,4,0,1,https://github.com/tom95858,Add missing return in connect(),1,[],https://github.com/ovis-hpc/ovis/pull/439,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/439,"The refactoring of the Exception types mistakenly removed a return
from the connect method which resulted in None being returned on
synchronous connect.","The refactoring of the Exception types mistakenly removed a return
from the connect method which resulted in None being returned on
synchronous connect.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,440,2020-09-30T19:36:47Z,2020-09-30T19:42:28Z,2020-12-08T03:31:04Z,CLOSED,False,1,0,1,https://github.com/narategithub,ldms.Xprt.connect() shall return 0 on a successful syncronous connect,1,[],https://github.com/ovis-hpc/ovis/pull/440,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/440,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,440,2020-09-30T19:36:47Z,2020-09-30T19:42:28Z,2020-12-08T03:31:04Z,CLOSED,False,1,0,1,https://github.com/narategithub,ldms.Xprt.connect() shall return 0 on a successful syncronous connect,1,[],https://github.com/ovis-hpc/ovis/pull/440,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/440#issuecomment-701603939,,duplicated with #439,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,441,2020-10-01T02:29:59Z,2020-10-01T16:00:06Z,2020-12-08T03:27:09Z,MERGED,True,1,7,2,https://github.com/narategithub,Xprt.connect() python style error handling,1,[],https://github.com/ovis-hpc/ovis/pull/441,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/441,"Opt for python style error report and handling for Xprt.connect(), i.e.
the error would be raised, not returned. This patch also modify the
application that uses the interface (currently just ldmsd_config
module whic is a supporting module for ldmsd_controller).","Opt for python style error report and handling for Xprt.connect(), i.e.
the error would be raised, not returned. This patch also modify the
application that uses the interface (currently just ldmsd_config
module whic is a supporting module for ldmsd_controller).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,442,2020-10-01T06:17:13Z,2020-10-01T16:00:48Z,2020-10-01T20:31:30Z,MERGED,True,93,61,1,https://github.com/nichamon,Fix ldmsctl crashes when it receives a multiple-record message,1,[],https://github.com/ovis-hpc/ovis/pull/442,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/442,"Without the fix, ldmsctl reused a single buffer to receive message
records. It assumed that the buffer would be handled before the next
record arrives. The assumption is not always true if a response message
consists of multiple records. The symptom is as if ldmsctl does not
receive some records, resulting in ldmsctl crashes.","Without the fix, ldmsctl reused a single buffer to receive message
records. It assumed that the buffer would be handled before the next
record arrives. The assumption is not always true if a response message
consists of multiple records. The symptom is as if ldmsctl does not
receive some records, resulting in ldmsctl crashes.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,442,2020-10-01T06:17:13Z,2020-10-01T16:00:48Z,2020-10-01T20:31:30Z,MERGED,True,93,61,1,https://github.com/nichamon,Fix ldmsctl crashes when it receives a multiple-record message,1,[],https://github.com/ovis-hpc/ovis/pull/442,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/442#issuecomment-701913765,"Without the fix, ldmsctl reused a single buffer to receive message
records. It assumed that the buffer would be handled before the next
record arrives. The assumption is not always true if a response message
consists of multiple records. The symptom is as if ldmsctl does not
receive some records, resulting in ldmsctl crashes.",@tom95858 @narategithub found this bug by running the ldmsd_interface_msg_boundary.py test in the source tree. The patch passes the test.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,442,2020-10-01T06:17:13Z,2020-10-01T16:00:48Z,2020-10-01T20:31:30Z,MERGED,True,93,61,1,https://github.com/nichamon,Fix ldmsctl crashes when it receives a multiple-record message,1,[],https://github.com/ovis-hpc/ovis/pull/442,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/442#issuecomment-701928909,"Without the fix, ldmsctl reused a single buffer to receive message
records. It assumed that the buffer would be handled before the next
record arrives. The assumption is not always true if a response message
consists of multiple records. The symptom is as if ldmsctl does not
receive some records, resulting in ldmsctl crashes.","@tom95858 @narategithub The last version passes the test script. After I created the pull request, I found some bugs and a leak. I also initially removed the union from the ldmsctl_ctrl because currently we only use ldms_xprt. However, the change to the ldmsctl_ctrl is unrelated to the patch and makes it hard to follow the diff.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,443,2020-10-01T06:17:23Z,2020-10-26T19:00:41Z,2020-10-26T19:00:41Z,MERGED,True,26,25,4,https://github.com/morrone,Remove SLURM-related configure options,1,[],https://github.com/ovis-hpc/ovis/pull/443,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/443,"Instead of having individual module build options, just build
slurm plugins if their dependecies are met.
The slurm_sampler plugin appears to have no external dependencies,
so it is build unconditionally.
The jobinfo_slurm and slurm_notifier slurm spank plugins are built
it slurm is detected.  They can be required by using ""--with-slurm""
and turned off by using ""--without-slurm"".","Instead of having individual module build options, just build
slurm plugins if their dependecies are met.
The slurm_sampler plugin appears to have no external dependencies,
so it is build unconditionally.
The jobinfo_slurm and slurm_notifier slurm spank plugins are built
it slurm is detected.  They can be required by using ""--with-slurm""
and turned off by using ""--without-slurm"".",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,443,2020-10-01T06:17:23Z,2020-10-26T19:00:41Z,2020-10-26T19:00:41Z,MERGED,True,26,25,4,https://github.com/morrone,Remove SLURM-related configure options,1,[],https://github.com/ovis-hpc/ovis/pull/443,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/443#issuecomment-716083329,"Instead of having individual module build options, just build
slurm plugins if their dependecies are met.
The slurm_sampler plugin appears to have no external dependencies,
so it is build unconditionally.
The jobinfo_slurm and slurm_notifier slurm spank plugins are built
it slurm is detected.  They can be required by using ""--with-slurm""
and turned off by using ""--without-slurm"".","I'm worried that this will cause confusion for users that have a build machine that is missing the necessary slurm bits but nonetheless expect slurm support. With this change, they won't discover they're missing the slurm bits on their build server until they try to deploy their build. Am I missing something?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,443,2020-10-01T06:17:23Z,2020-10-26T19:00:41Z,2020-10-26T19:00:41Z,MERGED,True,26,25,4,https://github.com/morrone,Remove SLURM-related configure options,1,[],https://github.com/ovis-hpc/ovis/pull/443,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/443#issuecomment-716103255,"Instead of having individual module build options, just build
slurm plugins if their dependecies are met.
The slurm_sampler plugin appears to have no external dependencies,
so it is build unconditionally.
The jobinfo_slurm and slurm_notifier slurm spank plugins are built
it slurm is detected.  They can be required by using ""--with-slurm""
and turned off by using ""--without-slurm"".","I'm worried that this will cause confusion for users that have a build machine that is missing the necessary slurm bits but nonetheless expect slurm support. With this change, they won't discover they're missing the slurm bits on their build server until they try to deploy their build. Am I missing something?

If a user requires slurm bits, then they would want to specify ""--with-slurm"". If ""--with-slurm"" is set and slurm is not found, an error will be thrown at configure time. ""--with-slurm"" means ""build all the things that depend on slurm"". ""--without-slurm"" means ""don't build that things that depend on slurm"". Specifying nothing means ""build the slurm dependent components if you happen to find slurm"".
In other words, they definitely will see an error on their build server if they specify ""--with-slurm"", but slurm is missing. (Barring any bugs, of course.)
The main change here is that it cleans up and simplifies things for users at configure time. This change makes it so there is just one option that is focused on the dependency (slurm) instead of three different configure options focused on plugins (and maybe a fourth one to set the path to slurm, but I'm not looking at the code at the moment).
This is a lot easier for people getting started with LDMS. Instead of having to learn the details of LDMS's plugins (Why are there at least three different slurm-related options? which ones might I need and which do I not? Why wouldn't I want to just have them all built?), the user can just go ""Oh, I have SLURM, I'll set --with-slurm"". Then the LDMS configuration issues can be dealt with later at ldmsd run/configuration (here I mean ldmsd -c, type configuration, not the configure script). At build time, they can just specify the simpler dependencies without already needing deep understanding of ldms.
This also helps if the person packaging ldms is not the same as the person the makes the run-time configuration of ldmsd. The latter might have a deeper understanding of ldms plugins than the former.
All in all, I'd like to see us move away from the current excess of configuration options (many that don't really provide a great service). I see this as one step in the cleanup process.
And FYI, I don't necessarily expect to see this land until after 4.3.4 is tagged. If there something else that absolutely needs to land and triggers a whole new testing cycle, then sure, this is probably low enough impact to be included as well. But I wouldn't want it to add any more time to 4.3.4.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,445,2020-10-02T05:35:50Z,2020-10-02T19:53:30Z,2020-10-02T21:48:25Z,MERGED,True,105,59,14,https://github.com/baallan,V434 mem leak repairs,4,[],https://github.com/ovis-hpc/ovis/pull/445,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/445,"This fixes several memory leaks in configuration and ldms_ls handling paths and adds the test scripts that uncovered them.
Each bug fix is in its own commit.","This fixes several memory leaks in configuration and ldms_ls handling paths and adds the test scripts that uncovered them.
Each bug fix is in its own commit.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,445,2020-10-02T05:35:50Z,2020-10-02T19:53:30Z,2020-10-02T21:48:25Z,MERGED,True,105,59,14,https://github.com/baallan,V434 mem leak repairs,4,[],https://github.com/ovis-hpc/ovis/pull/445,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/445#issuecomment-702928447,"This fixes several memory leaks in configuration and ldms_ls handling paths and adds the test scripts that uncovered them.
Each bug fix is in its own commit.",Thanks @baallan for finding and fixing this.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,446,2020-10-02T05:50:47Z,2020-10-25T16:00:05Z,2020-12-08T03:28:14Z,MERGED,True,116,461,16,https://github.com/narategithub,Maintenance of ldmsd tests that use python scripts,2,[],https://github.com/ovis-hpc/ovis/pull/446,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/446,Maintenance of ldmsd tests that use python scripts due to the change of python2->python3 and xprt.connect() interface change. Also fix bugs found along the way.,Maintenance of ldmsd tests that use python scripts due to the change of python2->python3 and xprt.connect() interface change. Also fix bugs found along the way.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,446,2020-10-02T05:50:47Z,2020-10-25T16:00:05Z,2020-12-08T03:28:14Z,MERGED,True,116,461,16,https://github.com/narategithub,Maintenance of ldmsd tests that use python scripts,2,[],https://github.com/ovis-hpc/ovis/pull/446,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/446#issuecomment-704661932,Maintenance of ldmsd tests that use python scripts due to the change of python2->python3 and xprt.connect() interface change. Also fix bugs found along the way.,"@tom95858 @nichamon FYI, the change in ldmsd_controller:

only affect the --debug mode to raise the exception and making it easier to debug, and
a python3-ify in greeting (a test command) handler",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/448,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-703387226,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","@morrone Please review this intermediate step (at least treating logging as a built-in part of libldms) toward getting consistent handling of error messages, particularly missing in auth and transport layers as you have noted. I expect switching to an entirely new logging api is something we should do at the point of the ""new apis for plugins"" later.
I note that the auth plugins do not have a help (usage) string in their api as the other plugins do. They do need it, imo. After that is sorted in some other commit, I will need to update the ldmsd plugin usage dump function to include auth plugins.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-703388840,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","Note: all the now ifdef'd code in ldmsd.c I will be happy to clean up once folk have had a chance to review this.
The refactored code has been built, tested with valgrind, and check with nm to verify no lingering ldmsd_log symbols.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/morrone,4,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-703798070,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","I am not entirely clear on the approach here. I, as a plugin author, want to be able to insert messages into the daemon's normal logging stream, not to create my own independent log files. And probably that is what we want all plugins to do. So the only thing that we need to export to the plugins is an ""ldms_plugin_log()"" style function.
I don't think we need nor want to have each plugin opening and managing their own individual log files, together with the configuration that implies.
In other words, perhaps most of this really should stay in ldmsd rather than moving to ldms. If you intend that the code reuse here is intended for, say, SOS and other daemons, rather than for plugins, then maybe the API needs a refresh rather than a direct move to ldms.
If we are creating a new API, then I don't think we would necessarily want to perpetuate the _logrotate() function. Modern daemons should really not trouble themselves with rotating logs. The ""logrotate"" daemon has been around for a long time, and systemd/journald is growing common in recent times.
To be most compatible with the ""logrotate"" program (although logrotate does offer multiple ways of interacting with daemons), the logging API should just offer a ""_reload()"" function. It would basically just do:
  /* take logging mutex */
  fclose()
  fopen()
  /* release logging mutex */

Then the ldmsd (or other daemons) would call that _reload() function on, say, receipt of signal USR1/USR2/HUP. (There is a case to be made that USR1/USR2 is better, because HUP implies a full reconfiguration. USR1 or USR2 could just be the log reload.)
For even more modern Linux systems, ldmsd would just write its log to stdout, and let systemd/journald handle all of the log file arrangements.
If this is about creating logging function for plugins:
There was some desire (not by me, by the way), that the logging levels of individual plugins be adjusted separately. Certainly parties thought that it was verboten to do log(DEBUG, ) because someone might be trying to see the log(DEBUG, ) from other plugins or the main daemon, and that would be too much noise (I didn't see a problem with plugins just using log(DEBUG,)). So to satisfy that requirement, I think the plugin logging function might be something like this:
ldms_plugin_log(instance, severity, msg);
This would be dependent on the multi-instance code that is coming in the future. But this would allow the parent daemon (e.g. ldmsd) to decide on a per-instance basis whether or not the logging level is high enough to emit the message.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/baallan,5,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-703812220,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","@morrone As noted at ldms_log.h:191, plugin writers just use ldms_log() and move on with their lives. This request lets us get rid of passing log pointers to plugins near dlopen. No need to mess with opening or closing logs. The log model here is a global, thread-safe stream of messages that can be composed anywhere in the code.
The refactoring of ldms_logrotate, while a worthy project now that RHEL6/sysv init can be dropped from support and systemd is ubiquitous, is orthogonal to this simple refactoring to get the basic logging operations visible everywhere in ldms without the excessive pointer passing currently in place. Actually, is systemd ubiquitous? Seems to be missing in many container models.
There is no intent here that the ldms_log functionality is a standalone library for reuse with, e.g., SOS. It's lumped in with libldms.so in the makefile. Perhaps it should be lumped in with lib/ovis_util/util.h instead. That would make it available to zap plugins.
Any refactoring to extend log filtering control to a per-plugin basis is beyond the scope of this request. This request is about just getting existing logging to be uniform everywhere in the auth, plugin, and zap foundations of ldms so we can then remove the convoluted or just plain missing) log pointer handling and get useful messages emitted where they should.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/morrone,6,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-703890648,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","@morrone As noted at ldms_log.h:191, plugin writers just use ldms_log() and move on with their lives. This request lets us get rid of passing log pointers to plugins near dlopen. No need to mess with opening or closing logs. The log model here is a global, thread-safe stream of messages that can be composed anywhere in the code.

Yes, but I don't think that makes sense to export a whole raft of functions to plugins (and the entire world) that should never use those functions. We should make them internal to ldmsd.

The refactoring of ldms_logrotate, while a worthy project now that RHEL6/sysv init can be dropped from support and systemd is ubiquitous, is orthogonal to this simple refactoring to get the basic logging operations visible everywhere in ldms without the excessive pointer passing currently in place.


Actually, is systemd ubiquitous? Seems to be missing in many container models.

It is common in base Linux distros, but I can't speak to its adoption in containers. Keeping logs in containers probably isn't a common thing either. I think the container way is to send all log traffic somewhere off node. I don't know what mechanisms are used to do that though. The logrotate daemon is always an option if one wants logs kept in a container without journald. But yes, this can all be future work, it doesn't have to happen in this PR.

There is no intent here that the ldms_log functionality is a standalone library for reuse with, e.g., SOS. It's lumped in with libldms.so in the makefile. Perhaps it should be lumped in with lib/ovis_util/util.h instead. That would make it available to zap plugins.

This doesn't make sense to me either. Again, the only place this code is supposed to be used is inside of ldmsd. So it should only be inside ldmsd. The only function declaration that should appear in a header that gets installed and is used by various plugins is the ""ldms_log"" function (and associated log levels and such). Everything else should be in ldmsd-internals.
Plugins should only get the implementation of the function when linked into ldmsd at run time. The function implementations should not be exported in libraries that anyone can use if that is not what we intend.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/baallan,7,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-703898613,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","@morrone I take your point that plugin-writers don't need to see the header of the open/close functions. However, we do need to have access to those functions for drivers other than ldmsd.c for testing purposes in a few nontrivial cases.
Do I just split the header into ldms_log.h and ldms_log_int.h or some such that only drivers need to include if they need to tinker?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/morrone,8,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-703901975,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","Sure, that could be reasonable. If the functions declared in ldms_log_int.h need to be used by binaries other than ldmsd (e.g. tests, as you mention), then ldms_log_int.h should be in noinst_HEADERS, and the library that implements ldms_log_int.c (or its like) should be a noinst convenience library, not something that is installed.
But it is not at clear to me why tests would need to use the ldmsd's logging library to implement their own log files. I would think that writing messages to stdout/stderr error would be sufficient for tests.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/baallan,9,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-703912631,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.",Think about unit and coverage testing of plugins and libraries separate from the ldmsd.c driver. Filling those with printf is a problem.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/tom95858,10,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-703914618,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","If we're going to change the API, then I would very much prefer if we moved away from the log-level model to something more descriptive, e.g.
log_msg(service-id, msg-type-id, ...)

Each service gets a number of bits that comprises a mask. The 'severity' level is a piece of that mask. For the sake of argument if you have 64 bits, and 4 levels, each level is 16bits and each service can have 16 msg-type-ids in each severity level.
This would provide very fine grained control over which messages the admin would like to see from the daemon.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/morrone,11,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-703921618,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","@tom95858 I'm not fully following your example. I'm not clear on why a service would have a baked in severity level. You talk about ""a mask"", but there are two parameters in your prototype, so I'm a little fuzzy on where you are suggesting things go.
But in any event, it is not clear to me that combining who is doing the logging (""service"") with the level of logging in one field would be a useful thing to do.
And I think we should be careful about inventing our own severity levels, because what admins are going to need to map ldms levels into the levels they are used to so they can fit ldms into the frameworks that they use with everything else on the system. This mapping almost certainly needs to be built into ldms, because no admin wants to write level conversion scripts for every product that they work with.
Could you clarify what might qualify as a ""service"" under this model?
This is an area where we probably shouldn't reinvent the wheel unless we have really good reasons to do so. Maybe all the messages in your proposal pop out of the daemon in the end labelled with severity level that admins are already familiar with. I don't know. That isn't clear to me yet.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/morrone,12,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-703922953,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","Think about unit and coverage testing of plugins and libraries separate from the ldmsd.c driver. Filling those with printf is a problem.

I can't imagine why it would be a problem to have printf in unit or coverage tests.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/tom95858,13,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-703978321,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","@tom95858 I'm not fully following your example. I'm not clear on why a service would have a baked in severity level. You talk about ""a mask"", but there are two parameters in your prototype, so I'm a little fuzzy on where you are suggesting things go.

A service doesn't have a baked in severity level, the msg-type-id do. It's the same thing we do today, but instead of a

But in any event, it is not clear to me that combining who is doing the logging (""service"") with the level of logging in one field would be a useful thing to do.

It's a proposed implementation. The purpose of using a bit mask is to make the decision of whether or not to log fast.

And I think we should be careful about inventing our own severity levels, because what admins are going to need to map ldms levels into the levels they are used to so they can fit ldms into the frameworks that they use with everything else on the system. This mapping almost certainly needs to be built into ldms, because no admin wants to write level conversion scripts for every product that they work with.

We already have our own severity levels, CRITICAL through DEBUG. We could certainly normalize those if you feel that admins expect something different.

Could you clarify what might qualify as a ""service"" under this model?

Auth
Transport
Updater
Producer
Store
...

This is an area where we probably shouldn't reinvent the wheel unless we have really good reasons to do so. Maybe all the messages in your proposal pop out of the daemon in the end labelled with severity level that admins are already familiar with. I don't know. That isn't clear to me yet.

The msg-id, etc... would not be in the log message. That's just a way to 'filter' what log messages are presented to the admin by allowing them to target what they are after when things get weird.
We would map the current 'levels' into a mask that gets us the equivalent course grained logging.
The only value of this is to reduce the message volume when you're trying to determine what's going on and to make debugging easier by allowing you to get very fine grained messaging (currently DEBUG) for one 'service' (Transport, etc..) and ERROR for everything else.
If we're going to tear up the carpet, I see an opportunity to allow for more targeted logging.
I'm envisioning something like this:
ldmsd_controller --host  --port ...

log_options service=.* level=ERROR

Messages  of severity ERROR (or worse) for all services are logged

log_option service=Transport level=DEBUG

All services except Transport still have ERROR level, but Transport messages are logged at the DEBUG level

log_option service=uGNI msg-id=GNI_ERR_RESOURCE level=OFF

The uGNI plugin would log only resource errors, all other messages from that plugin are turned off
Anyway, that's the idea.
The bitmask talk was just about making the capability above very fast.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/morrone,14,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-703986482,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","OK, I see what you are going for. We probably need to hash out some details.
Are you suggesting that there can only be one log_option rule mask, or that they can somehow stack?
I guess my only concern is that this all seems like overkill, when it is pretty darn easy to just grep (or whatever your favorite tool is) for what you care about in the log. A course syslog-style log level seems more than adequate to me. (And I think plugins should be allowed to log at those normal coarse levels...the ""no DEBUG from plugins"" never seemed right to me.)",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/baallan,15,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-704308315,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","@tom95858 With this request I am not proposing a new API, but only moving the one we have already so it can be accessed uniformly everywhere in our code, eliminating the passing of log pointers. I can split the header as @morrone suggested to keep the open/close functions invisible to plugins.
@morrone I would much prefer the logging api we already have over the undisciplined use of printf. I could maybe be persuaded that we should in a separate commit eliminate the support of syslog and alternate file locations for the log, but I'm not sure I know the unix shell for redirecting stdout of a daemon process to a log file for managing test results-- that seems to be a systemd-specific trick. Do you know that foo? Or the foo to have a unit test run as non-root under systemd?
Re the filter-controlled logging, this seems to be mainly driven in practice by the desire to log way too much debug info all the time and expecting the user to turn it off. This (formatting and then suppressing) makes performance impacts on sampler->sample() and store->store() and probably some transport calls that we must not have.; otherwise I wouldn't mind much since we're already pretty verbose in logging.
I could see an extension on the existing logging to always automatically provide a context string:
#define ldms_log(level, fmt, ...) ldms_log_(level, FILE "":""FUNCTION"":"" fmt, VA_ARGS)
or some such. This would get us out of working in undisciplined location information such as the 'SAMP' macro in many samplers. It (as written) is a gcc-ism.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/baallan,16,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-704317003,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","To be clear: I'm trying to get v4.3 out the door with the logging style we have already extended to all the places that have been identified as needing it to make diagnosing TOSS ldmsd deployments feasible (auth, transport, plugins of either, etc). I really don't want to be introducing more passing of log pointers such as we currently see in sampler plugins.
The api redesign discussion is well and good, but not the scope here.  It feels very much like better being the enemy of good on the path to an admin-friendlier 434 release.
Is there any other feedback on the content of this request?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/tom95858,17,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-704401428,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","To be clear: I'm trying to get v4.3 out the door with the logging style we have already extended to all the places that have been identified as needing it to make diagnosing TOSS ldmsd deployments feasible (auth, transport, plugins of either, etc). I really don't want to be introducing more passing of log pointers such as we currently see in sampler plugins.
The api redesign discussion is well and good, but not the scope here. It feels very much like better being the enemy of good on the path to an admin-friendlier 434 release.
Is there any other feedback on the content of this request?

Hi @baallan, It's not clear to me how this patch achieves any of these goals. You want to extend logging to ""all the places that have been identified as needing it..."" and yet all the places you mention already have access to a logging service.
The auth plugins notably do not currently log messages but they could. The transport provided in the auth_xprt_bind function has a pointer to an ldms_log_fn_t function.
Perhaps for the 4.3.4 time frame you could use the existing code and add the messages you believe are required to the auth plugins.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/morrone,18,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-704404844,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","I would much prefer the logging api we already have over the undisciplined use of printf.

First, note that the following is a diversion about future work. Having the _int.[ch] files will satisfy me for this PR.
printf would not be any more or less disciplined than using the logging API. The logging API implies no discipline when it comes to test messaging. The tests can all use any output file they wish with the current logging API, and the logging levels are probably of very little use in testing context. The logging levels may even conflict with the output expected by automake's test infrastructure.
Discipline comes from following a testing protocol, whether it is something invented from scratch, or something already in wide use such as TAP: http://testanything.org/tap-specification.html.  Harnesses to aid in following the testing protocol can be downloaded or written. For instance, for TAP there is ""sharness"" for shell tests, libtap for C, etc.
TAP is even mentioned in the automake manual's section about support for test suites.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/baallan,19,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-704413787,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","@tom95858 the ldms_log_fn_t is the wrong type (it does not take a level argument, which is only visible via ldmsd.h currently). This is not sufficient for solving the current logging issues. zap_log_fn_t has the same problem in the transport arena.
By far the easiest fix to get the same logging api available everywhere would be to put the proposed ldms_log in a library peer of zap and just use it whereever needed. Existing code passing around log pointers would continue to work unchanged (clean up to follow in future change), and code following the level-tagged api can be added quickly.
So my putting the new library extracted from ldmsd.c in ldms/src/core/libldms needs to be revised to putting it in lib/src/[ovis_util | zap ].
Alternatively, we could just move the log level enum over to lib/src/ovis_util/ovis_log_levels.h and update the auth and zap log pointer types to take a log level. This would force an immediate rewrite of all the existing log calls to add the appropriate level (which needs doing eventually anyway). This is very minimal risk, as the changes all cause compiler errors if missed.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/baallan,20,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-704419066,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","@morrone We also noticed the tap bits in the automake docs, but lacking a credible, complete, and apparently maintainable example, we haven't yet managed to apply it. If you happen to know of a real tap deployment that is compatible with automake 1.13.4 (toss3/rhel7), we'd love to see it.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/tom95858,21,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-704431382,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","@baallan, I'm guessing you will be following up with log related changes to auth plugins, etc...?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/baallan,22,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-704437169,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","@tom95858 The second commit of this pr adds some auth changes, and there would also be some followup logging improvements to zap and its plugins. The first commit needs to be rearranged to put the log header into lib someplace zap can see it.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/baallan,23,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-704438388,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","@tom95858 do we go with this after it's cleaned up, or would you prefer the alternative of adjusting the location of the ldmsd_log_level enum to someplace in lib/ and the existing log_fn_t typedefs equivalent to printf?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/morrone,24,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-704442574,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","@morrone We also noticed the tap bits in the automake docs, but lacking a credible, complete, and apparently maintainable example, we haven't yet managed to apply it. If you happen to know of a real tap deployment that is compatible with automake 1.13.4 (toss3/rhel7), we'd love to see it.

You are asserting some strong generalities that have not been true in my experience. If you want to discuss particular problems you are having in another issue, we could do that. I suspect they can all be worked through.
Flux makes extensive use of TAP. https://github.com/flux-framework/flux-core",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/nichamon,25,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-704535312,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","@baallan Could you please state the objectives of the commit that creates the log library? The commit message states that the patch is to get rid of passing the log handle. It is not clear to me why passing the log handle is a problem though. After following the thread, it sounds to me that another objective is that all OVIS libraries could have the same logging capabilities, especially the log level feature.
What are the requirements this log library satisfies?
Lastly could you please explain why this patch needs to be in the GA? We want to have the GA release ASAP. This patch and the needed changes in other files will postpone the release.
Thanks",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/baallan,26,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-704590999,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","@nichamon the log library (as to be revised following the discussion) provides access to a uniform api like that currently available in src/ldmsd.h but not available currently in lib/src/zap or ldms/src/auth. Adding and/or adjusting more function pointer passing interfaces to get uniform logging everywhere is more work than the currently proposed back-compatible (at compile time) approach.
This will allow numerous missing log messages to be added for a level of administrative friendliness (explaining auth and zap/xprt failures) we need for GA.  If there are critical bugs that we need to get a labeled release in place to address, we can just add a beta tag instead of rushing GA unnecessarily.
If this approach is acceptable, I can get the patch rearranged, tested, and extended with most of the needed log messages this week. Independent of that, I still have scale testing in progress for rdma and fabric transports, which are part of the GA requirements-- likely that will take longer to complete than these user-oriented logging changes.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/tom95858,27,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-704598258,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","@nichamon the log library (as to be revised following the discussion) provides access to a uniform api like that currently available in src/ldmsd.h but not available currently in lib/src/zap or ldms/src/auth. Adding and/or adjusting more function pointer passing interfaces to get uniform logging everywhere is more work than the currently proposed back-compatible (at compile time) approach.

I don't think that is true, however, as you pointed out, the signature for the log function does include the log level.

This will allow numerous missing log messages to be added for a level of administrative friendliness (explaining auth and zap/xprt failures) we need for GA.

Let's get these messages specified so we can reasonably assess whether or not this large change is important enough to hold up G/A.

If there are critical bugs that we need to get a labeled release in place to address, we can just add a beta tag instead of rushing GA unnecessarily.

It takes quite a long time to run the scalability testing. Whenever we add new code, it requires us to re-run these tests. Presently we are continually adding new code that requires restarting large-scale testing. If we continue along this path, we will never G/A.

If this approach is acceptable, I can get the patch rearranged, tested, and extended with most of the needed log messages this week. Independent of that, I still have scale testing in progress for rdma and fabric transports, which are part of the GA requirements-- likely that will take longer to complete than these user-oriented logging changes.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/baallan,28,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-705054096,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","@tom95858 I recall the users meeting discussion ended with agreement that fixing the auth plugin location (and attendant need to fix logging) be a post 434-ga feature. While I would much prefer plugin location and logging to be fixed in 4.3.4 ga, it doesn't have to hold up things.  We just won't use 4.3.4-ga for a toss release.
It (plugin location, logging) should be one of the first things we fix in 4.3.5; we also have a bunch of sampler extensions to fix ""wide set"" issues (lustre, procnetdev, sysclassib) that can be fixed in short order as well to form an admin-friendly 4.3.5 without changes to transport that would need extensive testing.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/baallan,29,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-705102498,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","@nichamon, @tom95858  so an approximate list of approximate requirements for fixing logging would be as follows. A multistep update process may be desirable. A more detailed requirements list would take less time to just implement in code than to compose here:

Somehow or other (this pr is but a single way) expose the ldmsd log level enum to the entire lib&ldms code base, most conveniently in some widely used existing header so that no new #include lines are needed. Renaming the enum (ovis_, ldms_, etc log_level is a matter of taste rather than a requirement.
Update the auth, xprt, zap code and any other existing passed log function pointers to accept a level argument, or alternatively eliminate all passing of log pointers and use a common library everywhere.
Add messages with appropriate log levels for all failures in the auth and zap plugins and zap.c/ldms_auth.c. Particularly notice of auth key/user failures to the log of the rejecting daemon is needed, but any other useful messages about undefined addresses or failed/missing hardware or missing plugin libraries.
Where ever feasible, add fast local logic to suppress redundant logging of the same messages coming from iterative failed attempts to satisfy a single administrative request. E.g. issue the 'connection failed' once per connection target at the beginning of a retry logic and then a 'retry succeeded' when the connection is finally made. The success event clears whatever flag was suppressing redundant messages so that we get a failed message once again if the connection is closed/failed and (unsuccessfully) reopened.

Re some of the code where we have a bucket of debugging messages, but they are all ifdef'd out under normal build conditions. This is fine (for obvious performance reasons) but some of the messages need to be reviewed for promotion to admin-visible diagnostics.
Re the whole per-message filtering discussion, if we get a common log api in place throughout the code base then it becomes much easier to do sed-like things to the code base to introduce log per-message/per-plugin filtering. As it is now, we have too many printf-like pointers with funny aliases to automate such evolution without heavy duty code refactoring tools.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/morrone,30,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-705165451,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","@tom95858 I recall the users meeting discussion ended with agreement that fixing the auth plugin location (and attendant need to fix logging) be a post 434-ga feature. While I would much prefer plugin location and logging to be fixed in 4.3.4 ga, it doesn't have to hold up things. We just won't use 4.3.4-ga for a toss release.

While I completely agree that I would like to see the location of the plugins and other install paths improved, this is a problem in the current toss packages. So it isn't like we would be taking a step backwards. So this wouldn't necessarily prevent its use in TOSS. I don't have an issue with 4.3.4 having the current paths. 4.3.4 is already behind schedule, so I would like to see any PRs that would delay the schedule be put on hold.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/baallan,31,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-705213222,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","Re deferring PRs: 449 and 450 are bug fixes that should go through. 443, 446, 448 can all wait.
@morrone the current toss version of ldms is v3 which has no auth plugin problems. They were introduced in v4 and do represent a step backward. However, the reluctance to push 434 officially into toss is due to the difficulty in diagnosing transport and auth configuration issues, not where the libraries get installed. Our first local toss update cycle which could possibly consume a toss-provided ovis release is Jan/Feb upcoming, so I don't share the urgency others are feeling about 4.3.4 becoming 'ga'. Obviously we want nice things for the cray systems that sometimes update faster than toss, but I still hear lots of hammering and sawing in the cray related bits.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/morrone,32,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-705246046,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","Re deferring PRs: 449 and 450 are bug fixes that should go through. 443, 446, 448 can all wait.
@morrone the current toss version of ldms is v3 which has no auth plugin problems.

The latest TOSS 3 (and pre-4) release has ldms v4.3.3_9toss. Our tag is actually quite a bit beyond 4.3.3 on the OVIS-4 branch, but that was the most recent official tag at the time. We are using that on most of our systems now where we have LDMS installed. I'll be keen to get 4.3.4 when it is out because of at least one important fix. If there are auth problems in 4.3.X, I'd like to see issues opened on them so I can follow along. I haven't encountered any show stoppers with auth munge yet (at least not with the head of OVIS-4).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/baallan,33,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-714723349,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","@tom95858 @morrone based on Tom's comments about filtering logging, I would like to propose the following header/code (actually it runs as a proof of signature validity if you compile it -Wall).
It retains Tom's O(1) cost to filter, with improvements of this proposal:
The opaque msg-type-id (in my case called 'facility') is dynamically determined so that

plugins unknown at daemon build time can define their own names for the configuring of their logs.
not just code, but object instances, can have their own names (imagine the debugging power). No bit-fiddling.

I included the proof of back-compatibility macros with the existing ldmsd log, so we don't have to fix all code in one giant commit when the library is added.
For the ldmsd framework areas that create instances indexed by a string name, this api can be used by the framework to prepopulate a ldms_log_t of the instance or plugin. If so doing, a sampler plugin message structure would look like "" $priority: sampler.$plugin.$instance: $msg"" with timestamp and daemon name handled per usual for the launch mechanism.
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>

enum ldms_log_level {
	LDMS_LNONE = -1,
	/* usual syslog levels */
	LDMS_LDEBUG,
	LDMS_LINFO,
	LDMS_LWARNING,
	LDMS_LERROR,
	LDMS_LCRITICAL,
	/* developer demands logging under all circumstances; the nerve of that developer... */
	LDMS_LALL,
	/* deprecated names for back compatibility */
	LDMSD_LNONE = LDMS_LNONE,
	LDMSD_LDEBUG = LDMS_LDEBUG,
	LDMSD_LINFO = LDMS_LINFO,
	LDMSD_LWARNING = LDMS_LWARNING,
	LDMSD_LERROR = LDMS_LERROR,
	LDMSD_LCRITICAL = LDMS_LCRITICAL,
	LDMSD_LALL = LDMS_LALL,
};

typedef struct ldms_log_facility * ldms_log_t;

/* back compatibility macros */
/* map enum name */
#define ldmsd_loglevel ldms_log_level
/* map ldmsd_log to ldms_log with level 0, that will be taken by the driving main.
 * Migration to use of log facilities can be gradual and separate from adding the library
 * header in ldms.h and linking the library.
 */
#define ldmsd_log_helper(level, fmt, ...) ldms_log(NULL, level, fmt ""%s"", __VA_ARGS__)
#define ldmsd_log(...) ldmsd_log_helper(__VA_ARGS__, """")

/* the utility */

/* get threshold by string name. Cost per order of lookup in underlying hash. */
enum ldms_log_level ldms_log_threshold_get_byname(const char *facility_name);

/* get threshold by facility number. Cost  O(1). 
 */
enum ldms_log_level ldms_log_threshold_get(ldms_log_t fac);

/* Get the facility map formatted for display; lines of name,threshold.
 * Alternately, expose an iterator or some such.
 * Caller frees result.
 */
char * ldms_log_facilities_to_string( );


/* Set the threshold for the facility by name.
 * If this is never called, the facility will have the default threshold of 
 * CRITICAL.
 * Has side effect of creating the facility if needed.
 * Functions to parse level specification and call this are an exercise left to the reader.
 * Following a hierarchical string naming convention for various code areas
 * allows convenient specifications.
 */
int ldms_log_threshold_set(const char *facility_name, enum ldms_log_level lvl);

void __ldms_log(ldms_log_t f, enum ldms_log_level level, const char *fmt, va_list ap);
void ldms_log(ldms_log_t facility, enum ldms_log_level lvl, const char *fmt, ...);


/** \brief Register the name to get an integer tag.
 *
 * The name is used in parsing configuration information that sets the
 * desired log threshold for the facility.
 *
 * Good facility names are . structured to allow pattern matching of related
 * facilities. E.g. 
 * sampler.meminfo, zap.rdma, xprt.*, updtr.*, prdcr.*, auth.munge, store.*.
 * Facility names may even be scoped to configuration object instance names,
 * hence facilities are ldms_log_t.
 *
 * The facility number is used to support O(1) lookup of log_level threshold
 * when filtering log output.
 * Expected use model is that the caller caches the result and passes it to
 * all logging calls, then calls ldms_log_facility_get when done operating.
 *
 * It is not possible to know all facility names at build time of the logging
 * library, due to our plugin architecture.
 */
ldms_log_t ldms_log_facility_get(const char *facility_name);

/** \brief Unregister the facility and name given.
 * Name and facility must match so that others cannot unregister
 * a facility accidentally, e.g due to a memory corruption of the cached value.
 */
void ldms_log_facility_put(ldms_log_t facility);

/* functions to parse level specification are an exercise left to the reader.
 * Following a hierarchical string naming convention for various code areas
 * allows convenient specifications.
 */
int ldms_log_threshold_set(const char *facility_name, enum ldms_log_level lvl);

/* reclaim log-associated memory and ignore all further log callse */
void ldms_log_facility_close();

/* demo */
int main(int argc, char ** argv)
{
	ldms_log_threshold_set(""ldmsd"", LDMS_LDEBUG);
	ldms_log_t f = ldms_log_facility_get(""ldmsd"");

	/* legacy code still works */
	ldmsd_log(LDMSD_LINFO, ""old signature work via macro magic\n"");

	/* new code */
	ldms_log(f, LDMS_LINFO, ""new signature work with no args\n"");
	ldms_log(f, LDMS_LINFO, ""new signature work with %d args\n"", 1);

	ldms_log_facility_put(f);

	ldms_log_facility_close();
	return 0;

}

struct ldms_log_facility {
	char *name;
	enum ldms_log_level threshold;
};

/* dummy implementation for compiler test of signatures. */
void ldms_log_facility_put(ldms_log_t fac)
{
	// for now, leak it.
}

ldms_log_t ldms_log_facility_get(const char *name)
{
	if (!name)
		return NULL;
	// look up in tree here and return if present, else:
	
	struct ldms_log_facility *f = malloc(sizeof(*f));
	if (!f) {
		ldms_log(NULL, LDMS_LCRITICAL, ""ldms_log_facility_get out of memory\n"");
		return NULL;
	}
	f->name = strdup(name);
	if (!f->name) {
		ldms_log(NULL, LDMS_LCRITICAL, ""ldms_log_facility_get out of memory\n"");
		free(f);
		return NULL;
	}
	f->threshold = LDMS_LCRITICAL;
	return f;
}

int ldms_log_threshold_set(const char *facility_name, enum ldms_log_level lvl)
{
	ldms_log_t f = ldms_log_facility_get(facility_name);
	f->threshold = lvl;
	return 0;
}

void ldms_log_facility_close()
{
	// reclaim the name lookup tree
}

enum ldms_log_level ldms_log_threshold_get(ldms_log_t f)
{
	return f->threshold;
}

const char *ldms_log_level_str(enum ldms_log_level level)
{
	return ""'level-str'"";
	// we have real code for this in ldmsd already.
}


void __ldms_log(ldms_log_t f, enum ldms_log_level level, const char *fmt, va_list ap)
{
	assert(f != NULL && fmt != NULL);
	fprintf(stdout, ""%s%s%s: "",
		f->name,
		(f->name[0] != '\0' ? "":"" : """"),
		ldms_log_level_str(level));
	vfprintf(stdout, fmt, ap);
}

void ldms_log(ldms_log_t facility, enum ldms_log_level lvl, const char *fmt, ...)
{
	// func signature test, not full thread-safe library. 
	// lock for ldms_log_t tree and output channel are one.
	static struct ldms_log_facility default_f = { """", LDMS_LNONE };
	if (!facility) {
		facility = &default_f;
		facility->threshold = lvl;
	}
	if (lvl < facility->threshold && 0)
		return;
        va_list ap;
        va_start(ap, fmt);
        __ldms_log(facility, lvl, fmt, ap);
        va_end(ap);
}",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,448,2020-10-05T04:12:31Z,2022-04-19T17:11:47Z,2022-04-19T17:11:47Z,CLOSED,False,667,30,12,https://github.com/baallan,fix V4 auth plugin location issue and log library access problem,2,['post-4.3.4-GA'],https://github.com/ovis-hpc/ovis/pull/448,https://github.com/baallan,34,https://github.com/ovis-hpc/ovis/pull/448#issuecomment-717359473,"This request creates an ldms (rather than ldmsd) logging library from the logging API defined in ldmsd and then uses it in the auth plugins loader. Because ldms_xprt and ldms_auth are part of core/ and both need to log errors appropriately, logging  belongs in core and not in ldmsd/. The changes to the auth plugin loader are in a separate patch for easier review of the auth logic adjustment.
The refactored 'ldms_log.h"" api provides back compatiblity with the former ldmsd declarations. This can be easily removed with sed over the entire code base, but to avoid conflicts we should do that sed at a point where everyone is pretty much checked in.
This change allows all plugin and core library writers to assume that ldms_log() just exists instead of passing around logging pointers.
Refactoring plugin apis to stop passing log pointers is a little more complicated than sed and should also be done at a community negotiated point.","Following the 10/26/20 user group telecon I created https://github.com/ovis-hpc/ovis/wiki/Proposal-5.
I have updated he header/code proposed above following the meeting feedback.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,449,2020-10-07T19:42:49Z,2020-10-18T00:53:18Z,2020-10-18T00:53:18Z,MERGED,True,11,0,2,https://github.com/morrone,Add missing CLEANFILES,2,[],https://github.com/ovis-hpc/ovis/pull/449,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/449,"Add the missing CLEANFILES to ldms/src/Makefile.am to repair
""make distcheck"".
The commit:

713db19 2020-09-30 General build system cleanup

neglected to add the appropriate CLEANFILES in ldms/src/Makefile.am
when it removed the custom distclean-local.
Also add a ""make distcheck"" job to the centos7 workflow.","Add the missing CLEANFILES to ldms/src/Makefile.am to repair
""make distcheck"".
The commit:

713db19 2020-09-30 General build system cleanup

neglected to add the appropriate CLEANFILES in ldms/src/Makefile.am
when it removed the custom distclean-local.
Also add a ""make distcheck"" job to the centos7 workflow.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,450,2020-10-07T21:01:11Z,2020-11-05T18:02:02Z,2021-01-05T20:47:38Z,MERGED,True,0,0,1,https://github.com/Snell1224,Renaming 'run-static-tests.man' to 'ldms-run-static-tests.man',1,[],https://github.com/ovis-hpc/ovis/pull/450,https://github.com/Snell1224,1,https://github.com/ovis-hpc/ovis/pull/450,"Added ""ldms-"" to run-static-tests man page for the ""ldms-run-static-tests.sh"" file.","Added ""ldms-"" to run-static-tests man page for the ""ldms-run-static-tests.sh"" file.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,451,2020-10-08T04:48:32Z,2020-11-03T15:07:56Z,2020-11-09T03:55:08Z,MERGED,True,11,27,2,https://github.com/nichamon,Fix listening endpoint leak and cleanup LDMSD's listening path,2,[],https://github.com/ovis-hpc/ovis/pull/451,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/451,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,451,2020-10-08T04:48:32Z,2020-11-03T15:07:56Z,2020-11-09T03:55:08Z,MERGED,True,11,27,2,https://github.com/nichamon,Fix listening endpoint leak and cleanup LDMSD's listening path,2,[],https://github.com/ovis-hpc/ovis/pull/451,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/451#issuecomment-716708883,,"@nichamon, I understand what the code change is doing. The caller (ldmsd.c) has already created the transport when listen_on_ldms_xprt is called. Please just remove the duplicated logic and assert if listen->x is NULL. If listen->x is NULL, it is a logic error and there is nothing the user can do about that and therefore nothing they could do with this error message.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,451,2020-10-08T04:48:32Z,2020-11-03T15:07:56Z,2020-11-09T03:55:08Z,MERGED,True,11,27,2,https://github.com/nichamon,Fix listening endpoint leak and cleanup LDMSD's listening path,2,[],https://github.com/ovis-hpc/ovis/pull/451,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/451#issuecomment-716729840,,"@nichamon, I understand what the code change is doing. The caller (ldmsd.c) has already created the transport when listen_on_ldms_xprt is called. Please just remove the duplicated logic and assert if listen->x is NULL. If listen->x is NULL, it is a logic error and there is nothing the user can do about that and therefore nothing they could do with this error message.

@tom95858  The change has been made.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,453,2020-10-12T20:53:46Z,2020-11-20T19:26:47Z,2020-11-20T19:26:47Z,CLOSED,False,2,1,2,https://github.com/baallan,V4 transport bugs,4,[],https://github.com/ovis-hpc/ovis/pull/453,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/453,This fixes two information remote disclosure nits and documents (instead of excessively initializing) valid suppression of epoll_ctl event argument initialization warnings.,This fixes two information remote disclosure nits and documents (instead of excessively initializing) valid suppression of epoll_ctl event argument initialization warnings.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,453,2020-10-12T20:53:46Z,2020-11-20T19:26:47Z,2020-11-20T19:26:47Z,CLOSED,False,2,1,2,https://github.com/baallan,V4 transport bugs,4,[],https://github.com/ovis-hpc/ovis/pull/453,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/453#issuecomment-710195806,This fixes two information remote disclosure nits and documents (instead of excessively initializing) valid suppression of epoll_ctl event argument initialization warnings.,"I think readme format for suppressions is both unmaintainable and not directly usable as input to valgrind and other tools that consume stack-list format suppression information.
Comments adjacent to the C code lines evaluated is most maintainable but aesthetically unappealing and not directly usable as input to tools.
.supp files adjacent to the C code files are adequately maintainable and easily assembled into a global suppression list for testing.
Hand-maintained global suppression files are unmaintainable, due to both human factors and platform variations in what should be suppressed.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,453,2020-10-12T20:53:46Z,2020-11-20T19:26:47Z,2020-11-20T19:26:47Z,CLOSED,False,2,1,2,https://github.com/baallan,V4 transport bugs,4,[],https://github.com/ovis-hpc/ovis/pull/453,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/453#issuecomment-710199853,This fixes two information remote disclosure nits and documents (instead of excessively initializing) valid suppression of epoll_ctl event argument initialization warnings.,suppression comments change has been removed.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,453,2020-10-12T20:53:46Z,2020-11-20T19:26:47Z,2020-11-20T19:26:47Z,CLOSED,False,2,1,2,https://github.com/baallan,V4 transport bugs,4,[],https://github.com/ovis-hpc/ovis/pull/453,https://github.com/tom95858,4,https://github.com/ovis-hpc/ovis/pull/453#issuecomment-710743661,This fixes two information remote disclosure nits and documents (instead of excessively initializing) valid suppression of epoll_ctl event argument initialization warnings.,"@baallan, ok great. Then it would seem helpful to refer to the valgrind suppression files in the README.md Valgrind section with information on how to use them.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,453,2020-10-12T20:53:46Z,2020-11-20T19:26:47Z,2020-11-20T19:26:47Z,CLOSED,False,2,1,2,https://github.com/baallan,V4 transport bugs,4,[],https://github.com/ovis-hpc/ovis/pull/453,https://github.com/baallan,5,https://github.com/ovis-hpc/ovis/pull/453#issuecomment-712450392,This fixes two information remote disclosure nits and documents (instead of excessively initializing) valid suppression of epoll_ctl event argument initialization warnings.,@tom95858 I will look at adding suppression files and a readme pointer to them as a separate PR later.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,453,2020-10-12T20:53:46Z,2020-11-20T19:26:47Z,2020-11-20T19:26:47Z,CLOSED,False,2,1,2,https://github.com/baallan,V4 transport bugs,4,[],https://github.com/ovis-hpc/ovis/pull/453,https://github.com/baallan,6,https://github.com/ovis-hpc/ovis/pull/453#issuecomment-731353658,This fixes two information remote disclosure nits and documents (instead of excessively initializing) valid suppression of epoll_ctl event argument initialization warnings.,"I don't see why this is being closed, when the issue is still being shown as late as yesterday in the bundle of output I sent to Narate.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,453,2020-10-12T20:53:46Z,2020-11-20T19:26:47Z,2020-11-20T19:26:47Z,CLOSED,False,2,1,2,https://github.com/baallan,V4 transport bugs,4,[],https://github.com/ovis-hpc/ovis/pull/453,https://github.com/tom95858,7,https://github.com/ovis-hpc/ovis/pull/453#issuecomment-731364154,This fixes two information remote disclosure nits and documents (instead of excessively initializing) valid suppression of epoll_ctl event argument initialization warnings.,"Hi @baallan, so far, the fix is to bzero a 1MB buffer for every message sent. Since this pull request has been idle for 10 days and now can't be merged without conflict, I closed it.
If there is still a problem here, please fix it; know why the fix works, does not break the build, does not cause a regression error, actually fixes a problem, does not negatively affect performance, and then we'll move on from there. Thank you!",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,456,2020-10-13T21:53:26Z,2020-11-09T04:03:50Z,2020-11-09T04:03:50Z,CLOSED,False,999,406,12,https://github.com/nichamon,Add the zap_send_mapped() API to the zap library,1,[],https://github.com/ovis-hpc/ovis/pull/456,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/456,"Currently the zap_send() API receives application buffer and copies it
to another buffer that has been registered with the hardware using the
zap_map() interface. The zap_send() API is simple to use but is
inefficient when the same buffer is to be sent to many clients because
the same buffer is mapped and copied many times.
The zap_send_mapped() API has the following signature.
int zap_send_mapped(zap_ep_t ep, zap_map_t map, void *buf,
size_t len, void *context)
The zap_send_mapped() API posts the RDMA_SEND operation directly from
the previously mapped buffer (map) without requiring registration or
copy by the transport. This significantly improves performance for
sending operation. Unlike the zap_send() API, the zap_send_mapped() API
delivers a completion event via the application callback function unless
the function return an error.","Currently the zap_send() API receives application buffer and copies it
to another buffer that has been registered with the hardware using the
zap_map() interface. The zap_send() API is simple to use but is
inefficient when the same buffer is to be sent to many clients because
the same buffer is mapped and copied many times.
The zap_send_mapped() API has the following signature.
int zap_send_mapped(zap_ep_t ep, zap_map_t map, void *buf,
size_t len, void *context)
The zap_send_mapped() API posts the RDMA_SEND operation directly from
the previously mapped buffer (map) without requiring registration or
copy by the transport. This significantly improves performance for
sending operation. Unlike the zap_send() API, the zap_send_mapped() API
delivers a completion event via the application callback function unless
the function return an error.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,456,2020-10-13T21:53:26Z,2020-11-09T04:03:50Z,2020-11-09T04:03:50Z,CLOSED,False,999,406,12,https://github.com/nichamon,Add the zap_send_mapped() API to the zap library,1,[],https://github.com/ovis-hpc/ovis/pull/456,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/456#issuecomment-708031474,"Currently the zap_send() API receives application buffer and copies it
to another buffer that has been registered with the hardware using the
zap_map() interface. The zap_send() API is simple to use but is
inefficient when the same buffer is to be sent to many clients because
the same buffer is mapped and copied many times.
The zap_send_mapped() API has the following signature.
int zap_send_mapped(zap_ep_t ep, zap_map_t map, void *buf,
size_t len, void *context)
The zap_send_mapped() API posts the RDMA_SEND operation directly from
the previously mapped buffer (map) without requiring registration or
copy by the transport. This significantly improves performance for
sending operation. Unlike the zap_send() API, the zap_send_mapped() API
delivers a completion event via the application callback function unless
the function return an error.",The patch has been tested by the zap_test program for all zap transports. I created this as a draft to prevent the patch get merged before the release.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,458,2020-10-16T19:47:57Z,2020-11-05T18:03:35Z,2020-11-05T18:03:35Z,MERGED,True,259,50,8,https://github.com/baallan,fix most cluster specific and sock assumptions in pll-ldms-static-test,3,[],https://github.com/ovis-hpc/ovis/pull/458,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/458,this is a test scripts only request and is part of testing 4.3.4/can be merged before GA.,this is a test scripts only request and is part of testing 4.3.4/can be merged before GA.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,458,2020-10-16T19:47:57Z,2020-11-05T18:03:35Z,2020-11-05T18:03:35Z,MERGED,True,259,50,8,https://github.com/baallan,fix most cluster specific and sock assumptions in pll-ldms-static-test,3,[],https://github.com/ovis-hpc/ovis/pull/458,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/458#issuecomment-713924431,this is a test scripts only request and is part of testing 4.3.4/can be merged before GA.,I fixed some user specific bits from the original commit. Merge commits all together before pulling into ovis-4.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,458,2020-10-16T19:47:57Z,2020-11-05T18:03:35Z,2020-11-05T18:03:35Z,MERGED,True,259,50,8,https://github.com/baallan,fix most cluster specific and sock assumptions in pll-ldms-static-test,3,[],https://github.com/ovis-hpc/ovis/pull/458,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/458#issuecomment-717355477,this is a test scripts only request and is part of testing 4.3.4/can be merged before GA.,@tom95858 please merge this PR prior to GA. It touches no C code and makes scale testing much easier.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,459,2020-10-16T21:53:10Z,2020-11-12T20:16:57Z,2020-11-12T20:23:19Z,MERGED,True,671,9,4,https://github.com/Snell1224,Implement TAP protocol for test script,1,[],https://github.com/ovis-hpc/ovis/pull/459,https://github.com/Snell1224,1,https://github.com/ovis-hpc/ovis/pull/459,"Adding the Test Anything Protocol (TAP) to generate tests during ""make check"" for the ldms-run-static-test script. During make check (with test-scripts enabled), a test suite will be generated containing the xfails, fails and successes for each plugin listed in ""ldms-static-test-list"".
The main goal is to provide the output status of nested test scripts so we can see which plugin test failed/xfailed/succeeded within the test script during the build process.
Before adding this, the test suite would only provide a pass or fail of the entire ""ldms-run-static-test"" script so the tests running within this script were not being outputted and tracked in the testsuite.
Documentation for TAP Protocol - https://www.gnu.org/software/automake/manual/html_node/Use-TAP-with-the-Automake-test-harness.html#Use-TAP-with-the-Automake-test-harness","Adding the Test Anything Protocol (TAP) to generate tests during ""make check"" for the ldms-run-static-test script. During make check (with test-scripts enabled), a test suite will be generated containing the xfails, fails and successes for each plugin listed in ""ldms-static-test-list"".
The main goal is to provide the output status of nested test scripts so we can see which plugin test failed/xfailed/succeeded within the test script during the build process.
Before adding this, the test suite would only provide a pass or fail of the entire ""ldms-run-static-test"" script so the tests running within this script were not being outputted and tracked in the testsuite.
Documentation for TAP Protocol - https://www.gnu.org/software/automake/manual/html_node/Use-TAP-with-the-Automake-test-harness.html#Use-TAP-with-the-Automake-test-harness",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,459,2020-10-16T21:53:10Z,2020-11-12T20:16:57Z,2020-11-12T20:23:19Z,MERGED,True,671,9,4,https://github.com/Snell1224,Implement TAP protocol for test script,1,[],https://github.com/ovis-hpc/ovis/pull/459,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/459#issuecomment-726321069,"Adding the Test Anything Protocol (TAP) to generate tests during ""make check"" for the ldms-run-static-test script. During make check (with test-scripts enabled), a test suite will be generated containing the xfails, fails and successes for each plugin listed in ""ldms-static-test-list"".
The main goal is to provide the output status of nested test scripts so we can see which plugin test failed/xfailed/succeeded within the test script during the build process.
Before adding this, the test suite would only provide a pass or fail of the entire ""ldms-run-static-test"" script so the tests running within this script were not being outputted and tracked in the testsuite.
Documentation for TAP Protocol - https://www.gnu.org/software/automake/manual/html_node/Use-TAP-with-the-Automake-test-harness.html#Use-TAP-with-the-Automake-test-harness","@Snell1224 now this is merged, please clone  ovis/.github/workflows/build-ddebug-centos7.yaml  to a new name and modify it to build (including the test options to configure) and run make check. And then do a second clone to run make installcheck. For both, enable all current plugins that don't require special libraries (so for example dstat should be enabled but sysclassib should not).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,461,2020-10-18T00:45:24Z,2020-10-18T00:51:01Z,2020-10-18T00:51:07Z,MERGED,True,270,152,8,https://github.com/tom95858,Fix issues found during 72 hr. reliency testing,6,[],https://github.com/ovis-hpc/ovis/pull/461,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/461,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,463,2020-10-18T05:17:15Z,2020-10-26T19:00:01Z,2020-10-26T19:00:01Z,MERGED,True,6,4,1,https://github.com/morrone,"Add test for annotated tag to create-release workflow, other cleanup",1,[],https://github.com/ovis-hpc/ovis/pull/463,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/463,"Add a test that uses git for-each-ref to test if the tag looks like
a annotated tag. If it does not, we print a clear error message,
""does not look like an annotated tag"".
Also, github was warning that set-env is deprecated, so we update
to using the ""$GITHUB_ENV"" file method of setting environment
variables for later steps.
Finally, update to using the ubuntu-20.04 VM from ubuntu-18.04.","Add a test that uses git for-each-ref to test if the tag looks like
a annotated tag. If it does not, we print a clear error message,
""does not look like an annotated tag"".
Also, github was warning that set-env is deprecated, so we update
to using the ""$GITHUB_ENV"" file method of setting environment
variables for later steps.
Finally, update to using the ubuntu-20.04 VM from ubuntu-18.04.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,466,2020-10-20T23:56:09Z,2020-11-11T23:33:08Z,2020-11-12T00:09:13Z,CLOSED,False,150,39,9,https://github.com/baallan,fix redundant connection err and duplicate set messages.,1,[],https://github.com/ovis-hpc/ovis/pull/466,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/466,"This adds (at no additional memory cost due to word alignment) the warned flag(s) to producer and producer-set objects so that warnings about 'failed connections that will be retried' and about 'duplicate set instance names' are issued once per event.
In addition:

related messages that are informational instead of unexpected errors have been demoted to INFO.
prdcr names have been added to debug messages about set update and update scheduling.
the aggdup test demonstrates correct handling when 2 samplers produce the same set instance, then one sampler disappears and reappears.","This adds (at no additional memory cost due to word alignment) the warned flag(s) to producer and producer-set objects so that warnings about 'failed connections that will be retried' and about 'duplicate set instance names' are issued once per event.
In addition:

related messages that are informational instead of unexpected errors have been demoted to INFO.
prdcr names have been added to debug messages about set update and update scheduling.
the aggdup test demonstrates correct handling when 2 samplers produce the same set instance, then one sampler disappears and reappears.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,466,2020-10-20T23:56:09Z,2020-11-11T23:33:08Z,2020-11-12T00:09:13Z,CLOSED,False,150,39,9,https://github.com/baallan,fix redundant connection err and duplicate set messages.,1,[],https://github.com/ovis-hpc/ovis/pull/466,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/466#issuecomment-725721665,"This adds (at no additional memory cost due to word alignment) the warned flag(s) to producer and producer-set objects so that warnings about 'failed connections that will be retried' and about 'duplicate set instance names' are issued once per event.
In addition:

related messages that are informational instead of unexpected errors have been demoted to INFO.
prdcr names have been added to debug messages about set update and update scheduling.
the aggdup test demonstrates correct handling when 2 samplers produce the same set instance, then one sampler disappears and reappears.","@valleydlr, @baallan: I think we agreed to close this.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,466,2020-10-20T23:56:09Z,2020-11-11T23:33:08Z,2020-11-12T00:09:13Z,CLOSED,False,150,39,9,https://github.com/baallan,fix redundant connection err and duplicate set messages.,1,[],https://github.com/ovis-hpc/ovis/pull/466,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/466#issuecomment-725734836,"This adds (at no additional memory cost due to word alignment) the warned flag(s) to producer and producer-set objects so that warnings about 'failed connections that will be retried' and about 'duplicate set instance names' are issued once per event.
In addition:

related messages that are informational instead of unexpected errors have been demoted to INFO.
prdcr names have been added to debug messages about set update and update scheduling.
the aggdup test demonstrates correct handling when 2 samplers produce the same set instance, then one sampler disappears and reappears.","@tom95858 I think we agreed that the ""all encompassing log api refactor"" would help some of this. But the core of this (don't emit redundant messages, even after the api refactor) is still needed.
An item within it which you and I didn't converge on was ""issue a connection ok after a connection has failed"". I suppose I can live without that, if it bothers you too much. I would prefer the major improvement over doing nothing at all.
It would be good if we can agree on a path forward (timing, resources) for extending the logging api to include the facility tag and log level per facility user control. Personally, I'd like to see that api change before or with the plugin api change.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,467,2020-10-21T18:53:47Z,2020-11-12T20:17:29Z,2020-11-12T20:17:29Z,MERGED,True,2,2,2,https://github.com/Snell1224,adding munge to ldms-static-test list,1,[],https://github.com/ovis-hpc/ovis/pull/467,https://github.com/Snell1224,1,https://github.com/ovis-hpc/ovis/pull/467,Adding munge to plugin list for ldms-run-static-test.,Adding munge to plugin list for ldms-run-static-test.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,467,2020-10-21T18:53:47Z,2020-11-12T20:17:29Z,2020-11-12T20:17:29Z,MERGED,True,2,2,2,https://github.com/Snell1224,adding munge to ldms-static-test list,1,[],https://github.com/ovis-hpc/ovis/pull/467,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/467#issuecomment-713908953,Adding munge to plugin list for ldms-run-static-test.,"Isn't there a .in file involved here? We should be using $pkglibdir and not having your home directory appear in the repo.
(admittedly, I need to fix such things in my tests occasionally)-- in fact I have one in #458 still pending. (now fixed)",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,467,2020-10-21T18:53:47Z,2020-11-12T20:17:29Z,2020-11-12T20:17:29Z,MERGED,True,2,2,2,https://github.com/Snell1224,adding munge to ldms-static-test list,1,[],https://github.com/ovis-hpc/ovis/pull/467,https://github.com/Snell1224,3,https://github.com/ovis-hpc/ovis/pull/467#issuecomment-713998581,Adding munge to plugin list for ldms-run-static-test.,"Ah, yes you're right. That's not supposed to be there. I had made some changes to the script and must've added it to the commit without realizing it. Also lost track of the branch I was on and accidently pushed to this one. I meant to only add munge to the test list and test bypass scripts.
Thanks for letting me know!",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,467,2020-10-21T18:53:47Z,2020-11-12T20:17:29Z,2020-11-12T20:17:29Z,MERGED,True,2,2,2,https://github.com/Snell1224,adding munge to ldms-static-test list,1,[],https://github.com/ovis-hpc/ovis/pull/467,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/467#issuecomment-722545465,Adding munge to plugin list for ldms-run-static-test.,@Snell1224 Is there a revision to this or a replacement PR? or is it ready to go?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,467,2020-10-21T18:53:47Z,2020-11-12T20:17:29Z,2020-11-12T20:17:29Z,MERGED,True,2,2,2,https://github.com/Snell1224,adding munge to ldms-static-test list,1,[],https://github.com/ovis-hpc/ovis/pull/467,https://github.com/Snell1224,5,https://github.com/ovis-hpc/ovis/pull/467#issuecomment-726313940,Adding munge to plugin list for ldms-run-static-test.,@baallan yes it is ready to go. Already revised it and fixed the issue.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,468,2020-10-22T03:12:42Z,2020-11-08T03:03:56Z,2020-11-09T03:52:13Z,CLOSED,False,17,2,1,https://github.com/nichamon,Fix zap_fabric:get_name() so that it can receive sa_len of 0.,1,[],https://github.com/ovis-hpc/ovis/pull/468,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/468,"The sa_len parameters of the zap_get_name() API is an output parameter.
The given sa_len value could be 0. Without the change, zap_fabric() would
return an error if the value is 0. This change makes the behavior of
zap_fabric's get_name() compatible with those in the other zap
transports.","The sa_len parameters of the zap_get_name() API is an output parameter.
The given sa_len value could be 0. Without the change, zap_fabric() would
return an error if the value is 0. This change makes the behavior of
zap_fabric's get_name() compatible with those in the other zap
transports.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,468,2020-10-22T03:12:42Z,2020-11-08T03:03:56Z,2020-11-09T03:52:13Z,CLOSED,False,17,2,1,https://github.com/nichamon,Fix zap_fabric:get_name() so that it can receive sa_len of 0.,1,[],https://github.com/ovis-hpc/ovis/pull/468,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/468#issuecomment-714194138,"The sa_len parameters of the zap_get_name() API is an output parameter.
The given sa_len value could be 0. Without the change, zap_fabric() would
return an error if the value is 0. This change makes the behavior of
zap_fabric's get_name() compatible with those in the other zap
transports.","@tom95858 Without this change, zap_fabric cannot be used with munge. ldms_xprt cannot begin the munge authentication process because it fails to get the transport name, i.e., zap_get_name() returns an error.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,468,2020-10-22T03:12:42Z,2020-11-08T03:03:56Z,2020-11-09T03:52:13Z,CLOSED,False,17,2,1,https://github.com/nichamon,Fix zap_fabric:get_name() so that it can receive sa_len of 0.,1,[],https://github.com/ovis-hpc/ovis/pull/468,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/468#issuecomment-716081414,"The sa_len parameters of the zap_get_name() API is an output parameter.
The given sa_len value could be 0. Without the change, zap_fabric() would
return an error if the value is 0. This change makes the behavior of
zap_fabric's get_name() compatible with those in the other zap
transports.","Hi @nichamon, I think on input the sa_len specifies the size of the output structure. On output it specifies the bytes actually written. The reason for this is because different transports (IPv4/IPv6) have different sizes for the sockaddr. So the point is that if the caller gives you a sockaddr_in, and the transport is sockaddr_in6, the interface would overwrite the output buffer.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,468,2020-10-22T03:12:42Z,2020-11-08T03:03:56Z,2020-11-09T03:52:13Z,CLOSED,False,17,2,1,https://github.com/nichamon,Fix zap_fabric:get_name() so that it can receive sa_len of 0.,1,[],https://github.com/ovis-hpc/ovis/pull/468,https://github.com/nichamon,4,https://github.com/ovis-hpc/ovis/pull/468#issuecomment-716284705,"The sa_len parameters of the zap_get_name() API is an output parameter.
The given sa_len value could be 0. Without the change, zap_fabric() would
return an error if the value is 0. This change makes the behavior of
zap_fabric's get_name() compatible with those in the other zap
transports.","HI @tom95858, I understand the idea.
When I tested zap_fabric, I found that I could not use zap_fabric with Munge. The causes were

fi_getname() will return an error (-FI_ETOOSMALL) if the input size is 0. In turn zap_fabric:get_name() returns an error.
ldms_xprt_sockaddr() always passes sa_len with the value 0 (instead of using caller's value).

I created this pull request to make zap_fabric:get_name() compatible with the get_name() interface of the other zap transports, i.e., it won't return an error if the input size is 0.
Regarding ldms_xprt_sockaddr(), I forgot to create a pull request for it. The pull request is #474. There are 2 issues in ldms_xprt_sockaddr(). One is what I mentioned above. The other issue is that ldms_xprt_sockaddr() may cause a buffer overflow.
zap_fabric can be used with Munge by applying either this pull request or pull request #474. However, the pull requests were created for different reasons.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,468,2020-10-22T03:12:42Z,2020-11-08T03:03:56Z,2020-11-09T03:52:13Z,CLOSED,False,17,2,1,https://github.com/nichamon,Fix zap_fabric:get_name() so that it can receive sa_len of 0.,1,[],https://github.com/ovis-hpc/ovis/pull/468,https://github.com/nichamon,5,https://github.com/ovis-hpc/ovis/pull/468#issuecomment-723523997,"The sa_len parameters of the zap_get_name() API is an output parameter.
The given sa_len value could be 0. Without the change, zap_fabric() would
return an error if the value is 0. This change makes the behavior of
zap_fabric's get_name() compatible with those in the other zap
transports.",It is an unnecessary change.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,469,2020-10-22T17:58:30Z,2020-10-26T04:09:35Z,2020-11-09T03:58:14Z,CLOSED,False,12,15,1,https://github.com/nichamon,Remove the atexit() call in zap_fabric,1,[],https://github.com/ovis-hpc/ovis/pull/469,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/469,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,469,2020-10-22T17:58:30Z,2020-10-26T04:09:35Z,2020-11-09T03:58:14Z,CLOSED,False,12,15,1,https://github.com/nichamon,Remove the atexit() call in zap_fabric,1,[],https://github.com/ovis-hpc/ovis/pull/469,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/469#issuecomment-716080948,,Hi @nichamon what symptom does this fix?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,469,2020-10-22T17:58:30Z,2020-10-26T04:09:35Z,2020-11-09T03:58:14Z,CLOSED,False,12,15,1,https://github.com/nichamon,Remove the atexit() call in zap_fabric,1,[],https://github.com/ovis-hpc/ovis/pull/469,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/469#issuecomment-716291462,,"@tom95858 When I tested zap_fabric, sometimes ldms_ls hang when it connected to an aggregator using the verbs provider. This change is one of my efforts to fix it. I just tested it again. It seems it doesn't fix ldms_ls hang problem. I might have tested with the wrong provider before I created the pull request. I'll close this pull request.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,470,2020-10-23T04:57:42Z,2020-10-25T01:53:53Z,2020-12-08T03:28:28Z,MERGED,True,1,2,1,https://github.com/narategithub,Fix zap endpoint leak,1,[],https://github.com/ovis-hpc/ovis/pull/470,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/470,"Zap endpoint x->zap_ep in the LDMS transport were set to NULL in
__ldsm_xprt_resource_free() without calling zap_free(). As a
result, the zap endpoint is leaked. The bug is verified in sock, rdma
and fabric-over-verbs transports by running a sampler ldmsd and check
the number of file descriptors before and after ldms_ls to the
daemon.
This patch freed the zap endpoint before setting it to NULL. The fix
is verified with the file descriptors check described above on sock,
rdma and fabric-over-verbs transports.","Zap endpoint x->zap_ep in the LDMS transport were set to NULL in
__ldsm_xprt_resource_free() without calling zap_free(). As a
result, the zap endpoint is leaked. The bug is verified in sock, rdma
and fabric-over-verbs transports by running a sampler ldmsd and check
the number of file descriptors before and after ldms_ls to the
daemon.
This patch freed the zap endpoint before setting it to NULL. The fix
is verified with the file descriptors check described above on sock,
rdma and fabric-over-verbs transports.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,471,2020-10-23T04:58:02Z,2020-10-25T01:52:46Z,2020-12-08T03:28:21Z,MERGED,True,3,3,1,https://github.com/narategithub,Fix zap_rdma build error with -DDEBUG,1,[],https://github.com/ovis-hpc/ovis/pull/471,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/471,"zap_ep_state_str() call was a typo. It should be
__zap_ep_state_str().","zap_ep_state_str() call was a typo. It should be
__zap_ep_state_str().",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,472,2020-10-23T04:58:12Z,2020-10-25T01:52:00Z,2020-12-08T03:27:36Z,MERGED,True,3,3,1,https://github.com/narategithub,Fix zap_fabric debug crash due to log_fn,1,[],https://github.com/ovis-hpc/ovis/pull/472,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/472,"zap_fabric g.log_fn is used by debugging print in init_once()
before it is set -- leading to SIGSEGV due to g.log_fn being NULL.
g.log_fn is assigned first in this patch.","zap_fabric g.log_fn is used by debugging print in init_once()
before it is set -- leading to SIGSEGV due to g.log_fn being NULL.
g.log_fn is assigned first in this patch.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,473,2020-10-23T20:50:30Z,2020-11-09T04:03:43Z,2020-11-09T04:03:44Z,CLOSED,False,2016,744,16,https://github.com/nichamon,Add Zap's shared map feature,3,[],https://github.com/ovis-hpc/ovis/pull/473,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/473,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,473,2020-10-23T20:50:30Z,2020-11-09T04:03:43Z,2020-11-09T04:03:44Z,CLOSED,False,2016,744,16,https://github.com/nichamon,Add Zap's shared map feature,3,[],https://github.com/ovis-hpc/ovis/pull/473,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/473#issuecomment-715598338,,"Tests that have been performed

zap_sock and zap_rdma passed the zap_test program.
zap_ugni has not been tested yet.
zap_fabric needs to be tested more. There are underlying problems that prevent me from properly testing the change.
ldmsd has been tested: 1 sampler daemon and 1 aggregator. ldms_ls -l to both. They work as expected.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,474,2020-10-26T03:24:09Z,2020-11-05T20:01:04Z,2020-11-09T03:47:05Z,MERGED,True,22,14,2,https://github.com/nichamon,Fix ldms_xprt_sockaddr(),1,[],https://github.com/ovis-hpc/ovis/pull/474,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/474,"This change fixes 2 issues in ldms_xprt_sockaddr().

ldms_xprt_sockaddr() always passes 0 as sa_len to zap_get_name()
instead of the given value by the caller
ldms_xprt_sockaddr() may cause memory overflow if the given buffers
are smaller than the actual addresses.","This change fixes 2 issues in ldms_xprt_sockaddr().

ldms_xprt_sockaddr() always passes 0 as sa_len to zap_get_name()
instead of the given value by the caller
ldms_xprt_sockaddr() may cause memory overflow if the given buffers
are smaller than the actual addresses.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,474,2020-10-26T03:24:09Z,2020-11-05T20:01:04Z,2020-11-09T03:47:05Z,MERGED,True,22,14,2,https://github.com/nichamon,Fix ldms_xprt_sockaddr(),1,[],https://github.com/ovis-hpc/ovis/pull/474,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/474#issuecomment-716713128,"This change fixes 2 issues in ldms_xprt_sockaddr().

ldms_xprt_sockaddr() always passes 0 as sa_len to zap_get_name()
instead of the given value by the caller
ldms_xprt_sockaddr() may cause memory overflow if the given buffers
are smaller than the actual addresses.","@nichamon, the bug is not in ldms_xprt_sockaddr, it is in the callers of this interface. All of the callers should be specifying the size of the local_sa buffer they are providing. It is an application error not to do so and this function should assert or return EINVAL if *sa_len == 0 on input.
On output it should be the size of the address actually written.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,474,2020-10-26T03:24:09Z,2020-11-05T20:01:04Z,2020-11-09T03:47:05Z,MERGED,True,22,14,2,https://github.com/nichamon,Fix ldms_xprt_sockaddr(),1,[],https://github.com/ovis-hpc/ovis/pull/474,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/474#issuecomment-716725523,"This change fixes 2 issues in ldms_xprt_sockaddr().

ldms_xprt_sockaddr() always passes 0 as sa_len to zap_get_name()
instead of the given value by the caller
ldms_xprt_sockaddr() may cause memory overflow if the given buffers
are smaller than the actual addresses.",@tom95858 I also updated the patch so that ldms_xprt_sockaddr returns EINVAL if the given *sa_len is 0.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,474,2020-10-26T03:24:09Z,2020-11-05T20:01:04Z,2020-11-09T03:47:05Z,MERGED,True,22,14,2,https://github.com/nichamon,Fix ldms_xprt_sockaddr(),1,[],https://github.com/ovis-hpc/ovis/pull/474,https://github.com/nichamon,4,https://github.com/ovis-hpc/ovis/pull/474#issuecomment-716974079,"This change fixes 2 issues in ldms_xprt_sockaddr().

ldms_xprt_sockaddr() always passes 0 as sa_len to zap_get_name()
instead of the given value by the caller
ldms_xprt_sockaddr() may cause memory overflow if the given buffers
are smaller than the actual addresses.","@tom95858 I have updated the code.
What I did,
socklen_t __sa_len was removed.
Given that x->local_sa and x->remote_sa already contain the actual addresses:
If x->sa_len > *sa_len, ldms_xprt_sockaddr() returns EINVAL, set *sa_len = x->sa_len doesn't set the given local_sa and remote_sa.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,474,2020-10-26T03:24:09Z,2020-11-05T20:01:04Z,2020-11-09T03:47:05Z,MERGED,True,22,14,2,https://github.com/nichamon,Fix ldms_xprt_sockaddr(),1,[],https://github.com/ovis-hpc/ovis/pull/474,https://github.com/nichamon,5,https://github.com/ovis-hpc/ovis/pull/474#issuecomment-719793325,"This change fixes 2 issues in ldms_xprt_sockaddr().

ldms_xprt_sockaddr() always passes 0 as sa_len to zap_get_name()
instead of the given value by the caller
ldms_xprt_sockaddr() may cause memory overflow if the given buffers
are smaller than the actual addresses.","@tom95858 I have changed x->local_sa and x->remote_sa to be struct sockaddr_storage and modified ldms_xprt_sockaddr() to work similarly to getsockname(). The differences are


ldms_xprt_sockaddr() will return E2BIG if the input sa_len is smaller than the actual address size. getsockname() will return 0 in this case.


ldms_xprt_sockaddr caches the addresses in the LDMS transport (x->local_sa and x->remote_sa) by calling zap_get_name. If they have been cached already, it copies the address in the transport to the input buffers.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,475,2020-10-27T06:04:59Z,2020-11-06T18:21:21Z,2020-12-08T03:27:53Z,MERGED,True,3,1,1,https://github.com/narategithub,Fix endpoint leak when zap_connect failed synchronously,1,[],https://github.com/ovis-hpc/ovis/pull/475,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/475,"When zap_connect() failed synchronously, zap endpoint were left alone
and the ldms xprt reference that was taken when setting zap ucontext was
not put back. Hence, the LDMS xprt reference would never reached 0 and
the associated resources would not be freed. This patch releases the
zap endpoint and put down the associated LDMS xprt reference.","When zap_connect() failed synchronously, zap endpoint were left alone
and the ldms xprt reference that was taken when setting zap ucontext was
not put back. Hence, the LDMS xprt reference would never reached 0 and
the associated resources would not be freed. This patch releases the
zap endpoint and put down the associated LDMS xprt reference.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,475,2020-10-27T06:04:59Z,2020-11-06T18:21:21Z,2020-12-08T03:27:53Z,MERGED,True,3,1,1,https://github.com/narategithub,Fix endpoint leak when zap_connect failed synchronously,1,[],https://github.com/ovis-hpc/ovis/pull/475,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/475#issuecomment-723160498,"When zap_connect() failed synchronously, zap endpoint were left alone
and the ldms xprt reference that was taken when setting zap ucontext was
not put back. Hence, the LDMS xprt reference would never reached 0 and
the associated resources would not be freed. This patch releases the
zap endpoint and put down the associated LDMS xprt reference.","@narategithub, can you please confirm that this issue is resolved in OVIS-4.3.4-GA. I believe that it is, but I would like you to verify. If it is, in fact, fixed, please close this pull request.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,475,2020-10-27T06:04:59Z,2020-11-06T18:21:21Z,2020-12-08T03:27:53Z,MERGED,True,3,1,1,https://github.com/narategithub,Fix endpoint leak when zap_connect failed synchronously,1,[],https://github.com/ovis-hpc/ovis/pull/475,https://github.com/narategithub,3,https://github.com/ovis-hpc/ovis/pull/475#issuecomment-723204167,"When zap_connect() failed synchronously, zap endpoint were left alone
and the ldms xprt reference that was taken when setting zap ucontext was
not put back. Hence, the LDMS xprt reference would never reached 0 and
the associated resources would not be freed. This patch releases the
zap endpoint and put down the associated LDMS xprt reference.","@tom95858 without this patch, the OVIS-4 branch (456bbcd), still have the endpoint leak problem. I have updated the patch to call __ldms_xprt_resource_free() -- making it consistent with connection error and connection reject asynchronous cases.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,476,2020-10-27T06:05:30Z,2020-10-27T15:43:19Z,2020-12-08T03:27:46Z,MERGED,True,1,0,1,https://github.com/narategithub,Fix zap endpoint leak in connect error event,1,[],https://github.com/ovis-hpc/ovis/pull/476,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/476,"When ldms xprt received zap connect error event, it set xprt->zap_ep
to NULL without releasing the zap endoint. This leads to zap endpoint
leak (and file descriptor leak). The bug can be verified by running an
aggregator with a prdcr that tries to connect to a sampler that is not
running. The prdcr will keep reconnecting, and hence growing
/proc/PID/fd. This patch simply put in the forgotten zap_free() to
release the zap endpoint.","When ldms xprt received zap connect error event, it set xprt->zap_ep
to NULL without releasing the zap endoint. This leads to zap endpoint
leak (and file descriptor leak). The bug can be verified by running an
aggregator with a prdcr that tries to connect to a sampler that is not
running. The prdcr will keep reconnecting, and hence growing
/proc/PID/fd. This patch simply put in the forgotten zap_free() to
release the zap endpoint.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,477,2020-10-27T21:47:59Z,2020-11-03T15:12:53Z,2020-11-09T03:46:29Z,MERGED,True,2,2,1,https://github.com/nichamon,Add 'fabric' to ldmsd_controller --xprt option,1,[],https://github.com/ovis-hpc/ovis/pull/477,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/477,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,478,2020-10-28T16:39:19Z,2020-11-05T18:01:17Z,2020-11-05T18:01:17Z,MERGED,True,13,6,5,https://github.com/baallan,Fix extra args appearing in ldmsd command when munge used.,2,[],https://github.com/ovis-hpc/ovis/pull/478,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/478,also set default key file name for ovis auth only if ovis type is specified.,also set default key file name for ovis auth only if ovis type is specified.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,478,2020-10-28T16:39:19Z,2020-11-05T18:01:17Z,2020-11-05T18:01:17Z,MERGED,True,13,6,5,https://github.com/baallan,Fix extra args appearing in ldmsd command when munge used.,2,[],https://github.com/ovis-hpc/ovis/pull/478,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/478#issuecomment-718059804,also set default key file name for ovis auth only if ovis type is specified.,"@tom95858 If going GA, please include this. We need it for munge to work as expected for TOSS folk using genders config.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,480,2020-10-29T23:56:03Z,2020-11-10T06:31:50Z,2020-11-10T06:31:50Z,MERGED,True,10,6,1,https://github.com/baallan,fix masking of perm bits definition error on sampler_base,2,[],https://github.com/ovis-hpc/ovis/pull/480,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/480,The sampler_base parsing of the octal permissions bits allowed parse errors to go through. This could lead to an untrapped configuration error leaving set access security at a level different than the user intended.,The sampler_base parsing of the octal permissions bits allowed parse errors to go through. This could lead to an untrapped configuration error leaving set access security at a level different than the user intended.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,480,2020-10-29T23:56:03Z,2020-11-10T06:31:50Z,2020-11-10T06:31:50Z,MERGED,True,10,6,1,https://github.com/baallan,fix masking of perm bits definition error on sampler_base,2,[],https://github.com/ovis-hpc/ovis/pull/480,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/480#issuecomment-719092398,The sampler_base parsing of the octal permissions bits allowed parse errors to go through. This could lead to an untrapped configuration error leaving set access security at a level different than the user intended.,@tom95858 please include this security fix in 434 ga if it has not already been released.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,480,2020-10-29T23:56:03Z,2020-11-10T06:31:50Z,2020-11-10T06:31:50Z,MERGED,True,10,6,1,https://github.com/baallan,fix masking of perm bits definition error on sampler_base,2,[],https://github.com/ovis-hpc/ovis/pull/480,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/480#issuecomment-720046506,The sampler_base parsing of the octal permissions bits allowed parse errors to go through. This could lead to an untrapped configuration error leaving set access security at a level different than the user intended.,"I think a better approach would be to improve the parsing.
I can't imagine that anyone wants to use base 10 to express permission bits, and your proposed change would make that an error anyway. So why don't we just always interpret numbers for perms fields as base 8? Just change the ""base"" in the strtol() to 8 instead of 0, and then the test for leading zero can just be eliminated. And then folks can specify the numbers like they would with the chmod command line tool. No leading zero necessary.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,480,2020-10-29T23:56:03Z,2020-11-10T06:31:50Z,2020-11-10T06:31:50Z,MERGED,True,10,6,1,https://github.com/baallan,fix masking of perm bits definition error on sampler_base,2,[],https://github.com/ovis-hpc/ovis/pull/480,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/480#issuecomment-720549175,The sampler_base parsing of the octal permissions bits allowed parse errors to go through. This could lead to an untrapped configuration error leaving set access security at a level different than the user intended.,"@tom95858 Do you have a preference or a consistency-with-sos-configs reason for keeping the 0-prefix check on permissions-config arguments? If not, I'm inclined to take Chris' suggestion.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,480,2020-10-29T23:56:03Z,2020-11-10T06:31:50Z,2020-11-10T06:31:50Z,MERGED,True,10,6,1,https://github.com/baallan,fix masking of perm bits definition error on sampler_base,2,[],https://github.com/ovis-hpc/ovis/pull/480,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/480#issuecomment-720571318,The sampler_base parsing of the octal permissions bits allowed parse errors to go through. This could lead to an untrapped configuration error leaving set access security at a level different than the user intended.,I agree with @morrone too.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,480,2020-10-29T23:56:03Z,2020-11-10T06:31:50Z,2020-11-10T06:31:50Z,MERGED,True,10,6,1,https://github.com/baallan,fix masking of perm bits definition error on sampler_base,2,[],https://github.com/ovis-hpc/ovis/pull/480,https://github.com/baallan,6,https://github.com/ovis-hpc/ovis/pull/480#issuecomment-720603445,The sampler_base parsing of the octal permissions bits allowed parse errors to go through. This could lead to an untrapped configuration error leaving set access security at a level different than the user intended.,@tom95858 I updated to assume octal and range check. Is it correct that the valid permission bits are at most 777?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,482,2020-10-31T00:52:28Z,2020-11-10T06:31:23Z,2020-11-10T06:31:23Z,MERGED,True,39,71,4,https://github.com/morrone,Overhaul the libpapi/libpfm configuration handling,1,[],https://github.com/ovis-hpc/ovis/pull/482,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/482,"Convert the libpapi/libpfm configuration to the use of more
standard AC_LIB_HAVE_LINKFLAGS() configuration mechanisms. Also
update all modules that are dependant on libpapi/libpfm to
use the LTLIBPAPI and LTLIBPFM variables that are created by
AC_LIB_HAVE_LINKFLAGS. This fixes the broken linkage and rpath
dependencies that currently existed when using custome papi/pfm
install paths.
We also eliminate the unessary extra configure options for each
component that depends on papi, and instead just have one option
for all components that require papi. The new configure option
is --enable-papi/--disable-papi. The three options are:
--enable-papi specified: papi must be found, or configure returns
an error
--disable-papi specified: do not build components that depend on papi
No papi option specified: test for papi and pfm, and activate build
of dependant components if found
The options to specify customs library install locations are:
--with-libpapi-prefix=PATH
--with-libpfm-prefix=PATH
Both of these options are introduced by AC_LIB_HAVE_LINKFLAGS().","Convert the libpapi/libpfm configuration to the use of more
standard AC_LIB_HAVE_LINKFLAGS() configuration mechanisms. Also
update all modules that are dependant on libpapi/libpfm to
use the LTLIBPAPI and LTLIBPFM variables that are created by
AC_LIB_HAVE_LINKFLAGS. This fixes the broken linkage and rpath
dependencies that currently existed when using custome papi/pfm
install paths.
We also eliminate the unessary extra configure options for each
component that depends on papi, and instead just have one option
for all components that require papi. The new configure option
is --enable-papi/--disable-papi. The three options are:
--enable-papi specified: papi must be found, or configure returns
an error
--disable-papi specified: do not build components that depend on papi
No papi option specified: test for papi and pfm, and activate build
of dependant components if found
The options to specify customs library install locations are:
--with-libpapi-prefix=PATH
--with-libpfm-prefix=PATH
Both of these options are introduced by AC_LIB_HAVE_LINKFLAGS().",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,484,2020-11-02T05:08:49Z,2020-11-09T04:04:17Z,2020-11-09T04:04:17Z,CLOSED,False,20,211,2,https://github.com/nichamon,Remove set_info from ldms_lookup message,1,[],https://github.com/ovis-hpc/ovis/pull/484,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/484,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,485,2020-11-03T04:54:27Z,2020-11-03T15:05:41Z,2020-11-09T03:49:03Z,MERGED,True,1,4,1,https://github.com/nichamon,Fix unlocking an LDMS transport twice in __ldms_xprt_push,1,[],https://github.com/ovis-hpc/ovis/pull/485,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/485,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,486,2020-11-05T00:45:17Z,2020-11-18T16:30:25Z,2020-11-19T18:23:01Z,MERGED,True,471,77,10,https://github.com/baallan,add file descriptor count option to dstat,2,[],https://github.com/ovis-hpc/ovis/pull/486,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/486,"The dstat sampler can now collect a simple or detailed summary
of /proc/self/fd open file descriptors. option fd=1 collects
just the count and fdtypes=1 also collects file descriptor counts
by type (anon, pipe, dev, /path, socket). fd info collection is
off by default.
this also adds the option auto-schema=1 (off by default)
which changes the default schema name from dstat to dstat_$hash
where hash is 1 or 2 hex digits derived from the option flags
which control the content of the schema. A utility ldms_dstat_schema_name
provides the schema name for storage policy setup.
When running an aggregator, using dstat with fdtypes=1 enabled will help identify leaks of file descriptors.","The dstat sampler can now collect a simple or detailed summary
of /proc/self/fd open file descriptors. option fd=1 collects
just the count and fdtypes=1 also collects file descriptor counts
by type (anon, pipe, dev, /path, socket). fd info collection is
off by default.
this also adds the option auto-schema=1 (off by default)
which changes the default schema name from dstat to dstat_$hash
where hash is 1 or 2 hex digits derived from the option flags
which control the content of the schema. A utility ldms_dstat_schema_name
provides the schema name for storage policy setup.
When running an aggregator, using dstat with fdtypes=1 enabled will help identify leaks of file descriptors.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,486,2020-11-05T00:45:17Z,2020-11-18T16:30:25Z,2020-11-19T18:23:01Z,MERGED,True,471,77,10,https://github.com/baallan,add file descriptor count option to dstat,2,[],https://github.com/ovis-hpc/ovis/pull/486,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/486#issuecomment-722055477,"The dstat sampler can now collect a simple or detailed summary
of /proc/self/fd open file descriptors. option fd=1 collects
just the count and fdtypes=1 also collects file descriptor counts
by type (anon, pipe, dev, /path, socket). fd info collection is
off by default.
this also adds the option auto-schema=1 (off by default)
which changes the default schema name from dstat to dstat_$hash
where hash is 1 or 2 hex digits derived from the option flags
which control the content of the schema. A utility ldms_dstat_schema_name
provides the schema name for storage policy setup.
When running an aggregator, using dstat with fdtypes=1 enabled will help identify leaks of file descriptors.","@narategithub I've added file counters to the dstat sampler, so that fd leaks are more easily tracked.
It would be good to get this merged into 434 before GA to simplify testing and post-GA debugging at deployment scale.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,486,2020-11-05T00:45:17Z,2020-11-18T16:30:25Z,2020-11-19T18:23:01Z,MERGED,True,471,77,10,https://github.com/baallan,add file descriptor count option to dstat,2,[],https://github.com/ovis-hpc/ovis/pull/486,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/486#issuecomment-729877968,"The dstat sampler can now collect a simple or detailed summary
of /proc/self/fd open file descriptors. option fd=1 collects
just the count and fdtypes=1 also collects file descriptor counts
by type (anon, pipe, dev, /path, socket). fd info collection is
off by default.
this also adds the option auto-schema=1 (off by default)
which changes the default schema name from dstat to dstat_$hash
where hash is 1 or 2 hex digits derived from the option flags
which control the content of the schema. A utility ldms_dstat_schema_name
provides the schema name for storage policy setup.
When running an aggregator, using dstat with fdtypes=1 enabled will help identify leaks of file descriptors.","@baallan, I don't think we want this done this way since it walks the directory entry to count the file descriptors. That will take a very long time on systems with large numbers of connections and therefore file descriptors ... exactly the ones you are interested in.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,486,2020-11-05T00:45:17Z,2020-11-18T16:30:25Z,2020-11-19T18:23:01Z,MERGED,True,471,77,10,https://github.com/baallan,add file descriptor count option to dstat,2,[],https://github.com/ovis-hpc/ovis/pull/486,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/486#issuecomment-729933777,"The dstat sampler can now collect a simple or detailed summary
of /proc/self/fd open file descriptors. option fd=1 collects
just the count and fdtypes=1 also collects file descriptor counts
by type (anon, pipe, dev, /path, socket). fd info collection is
off by default.
this also adds the option auto-schema=1 (off by default)
which changes the default schema name from dstat to dstat_$hash
where hash is 1 or 2 hex digits derived from the option flags
which control the content of the schema. A utility ldms_dstat_schema_name
provides the schema name for storage policy setup.
When running an aggregator, using dstat with fdtypes=1 enabled will help identify leaks of file descriptors.","@tom95858 Neither Narate nor google came up with a better method of counting and optionally classifying fds when I asked, so I added it and documented it as being a potentially expensive option and made it disabled by default.
If you have a better method that doesn't require kernel access, I can certainly improve the sampler implementation with it.
The sampler gives admins & researchers/testers a valuable ability to build confidence about resource consumption during early deployments; I expect once admins get confident with an updated ldmsd configuration, they'll probably turn off dstat.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,486,2020-11-05T00:45:17Z,2020-11-18T16:30:25Z,2020-11-19T18:23:01Z,MERGED,True,471,77,10,https://github.com/baallan,add file descriptor count option to dstat,2,[],https://github.com/ovis-hpc/ovis/pull/486,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/486#issuecomment-729976868,"The dstat sampler can now collect a simple or detailed summary
of /proc/self/fd open file descriptors. option fd=1 collects
just the count and fdtypes=1 also collects file descriptor counts
by type (anon, pipe, dev, /path, socket). fd info collection is
off by default.
this also adds the option auto-schema=1 (off by default)
which changes the default schema name from dstat to dstat_$hash
where hash is 1 or 2 hex digits derived from the option flags
which control the content of the schema. A utility ldms_dstat_schema_name
provides the schema name for storage policy setup.
When running an aggregator, using dstat with fdtypes=1 enabled will help identify leaks of file descriptors.","Hi @baallan, well this is water under the bridge now since you pushed this change without completing the review. This change will, I believe, give misleading information about the CPU utilization of ldmsd. In addition, the same information is available with ps, lsof, and any number of other utilities that will not affect the CPU, memory and network utilization attributed to ldmsd.
A review of configure.ac indicates that dstat is enabled by default and unfortunately, this change breaks the Centos-7 build with -Wall -Werror.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,486,2020-11-05T00:45:17Z,2020-11-18T16:30:25Z,2020-11-19T18:23:01Z,MERGED,True,471,77,10,https://github.com/baallan,add file descriptor count option to dstat,2,[],https://github.com/ovis-hpc/ovis/pull/486,https://github.com/tom95858,6,https://github.com/ovis-hpc/ovis/pull/486#issuecomment-729980456,"The dstat sampler can now collect a simple or detailed summary
of /proc/self/fd open file descriptors. option fd=1 collects
just the count and fdtypes=1 also collects file descriptor counts
by type (anon, pipe, dev, /path, socket). fd info collection is
off by default.
this also adds the option auto-schema=1 (off by default)
which changes the default schema name from dstat to dstat_$hash
where hash is 1 or 2 hex digits derived from the option flags
which control the content of the schema. A utility ldms_dstat_schema_name
provides the schema name for storage policy setup.
When running an aggregator, using dstat with fdtypes=1 enabled will help identify leaks of file descriptors.","Hi @baallan, I misspoke, it is Ubuntu 18.04 that the failure occurred on.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,486,2020-11-05T00:45:17Z,2020-11-18T16:30:25Z,2020-11-19T18:23:01Z,MERGED,True,471,77,10,https://github.com/baallan,add file descriptor count option to dstat,2,[],https://github.com/ovis-hpc/ovis/pull/486,https://github.com/baallan,7,https://github.com/ovis-hpc/ovis/pull/486#issuecomment-729993553,"The dstat sampler can now collect a simple or detailed summary
of /proc/self/fd open file descriptors. option fd=1 collects
just the count and fdtypes=1 also collects file descriptor counts
by type (anon, pipe, dev, /path, socket). fd info collection is
off by default.
this also adds the option auto-schema=1 (off by default)
which changes the default schema name from dstat to dstat_$hash
where hash is 1 or 2 hex digits derived from the option flags
which control the content of the schema. A utility ldms_dstat_schema_name
provides the schema name for storage policy setup.
When running an aggregator, using dstat with fdtypes=1 enabled will help identify leaks of file descriptors.","Do we not have a test-make-dist.yaml equivalent that runs automatically with ubuntu18/Wall/Werr on the github actions yet? Should I try to make one, or do you/Mon already have one pending someplace?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,486,2020-11-05T00:45:17Z,2020-11-18T16:30:25Z,2020-11-19T18:23:01Z,MERGED,True,471,77,10,https://github.com/baallan,add file descriptor count option to dstat,2,[],https://github.com/ovis-hpc/ovis/pull/486,https://github.com/baallan,8,https://github.com/ovis-hpc/ovis/pull/486#issuecomment-729998871,"The dstat sampler can now collect a simple or detailed summary
of /proc/self/fd open file descriptors. option fd=1 collects
just the count and fdtypes=1 also collects file descriptor counts
by type (anon, pipe, dev, /path, socket). fd info collection is
off by default.
this also adds the option auto-schema=1 (off by default)
which changes the default schema name from dstat to dstat_$hash
where hash is 1 or 2 hex digits derived from the option flags
which control the content of the schema. A utility ldms_dstat_schema_name
provides the schema name for storage policy setup.
When running an aggregator, using dstat with fdtypes=1 enabled will help identify leaks of file descriptors.","@tom95858 Near the top of my testing development list is jenkins-driven performance quantification/regression testing per plugin and overall. We'll see how dstat and the other heavyweights (lustre, procnetdev, edac, vmstat, procstat) do in various configurations. This is one of the internal requirements for getting to deploy on our ARM platforms.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,487,2020-11-05T19:11:38Z,2020-11-05T21:42:45Z,2020-11-05T21:42:45Z,MERGED,True,107,16,7,https://github.com/baallan,"Add 1 sec sampling, fabric-sock test options, file counting",2,[],https://github.com/ovis-hpc/ovis/pull/487,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/487,"incorporated file leak checks in cluster test, and other improvements","incorporated file leak checks in cluster test, and other improvements",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,487,2020-11-05T19:11:38Z,2020-11-05T21:42:45Z,2020-11-05T21:42:45Z,MERGED,True,107,16,7,https://github.com/baallan,"Add 1 sec sampling, fabric-sock test options, file counting",2,[],https://github.com/ovis-hpc/ovis/pull/487,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/487#issuecomment-722620013,"incorporated file leak checks in cluster test, and other improvements",this is a man/test scripts only change,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,489,2020-11-06T15:07:39Z,2020-11-06T15:10:52Z,2020-11-06T15:11:00Z,MERGED,True,757,111,16,https://github.com/tom95858,Cleanup for OVIS-4.3.4 G/A,9,[],https://github.com/ovis-hpc/ovis/pull/489,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/489,"These are the transport statistics discussed in the UG meeting, uGNI CQ recreation on resource error and message cleanup.","These are the transport statistics discussed in the UG meeting, uGNI CQ recreation on resource error and message cleanup.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,490,2020-11-06T17:24:25Z,2020-11-07T15:19:12Z,2020-12-08T03:27:57Z,MERGED,True,1,1,1,https://github.com/narategithub,Fix ldms_xprt build error with `-DDEBUG`,1,[],https://github.com/ovis-hpc/ovis/pull/490,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/490,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,491,2020-11-09T03:43:01Z,2020-11-10T06:30:52Z,2020-12-08T03:26:58Z,MERGED,True,18,0,1,https://github.com/narategithub,Add `-DDEBUG` build test github job,1,[],https://github.com/ovis-hpc/ovis/pull/491,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/491,"This patch adds a github job for a build test with CFLAGS='-DDEBUG'
targeting OVIS-4 branch. This is an effort to keep the DEBUG portion
of the code maintained (at the lesat built).","This patch adds a github job for a build test with CFLAGS='-DDEBUG'
targeting OVIS-4 branch. This is an effort to keep the DEBUG portion
of the code maintained (at the lesat built).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,493,2020-11-10T18:16:00Z,2021-01-26T21:44:11Z,2021-01-26T21:44:11Z,CLOSED,False,16,7,2,https://github.com/morrone,Split apart libpapi and libfm configuration,1,[],https://github.com/ovis-hpc/ovis/pull/493,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/493,"We remove the libpfm linkage from the libhwevent and rapl samplers.
It appears that neither of those had a direct dependency upon libpfm.
With that change made, it is clear that our --enable-papi option should
not also depend upon pfm. We therefore remove that and instead introduce
an --enable-pfm option to require or disable libpfm inclusion. The
--with-libpfm-prefix option remains to specify a path to check for
libpfm.
For instance, the following should now work:
--enable-papi --with-libpapi-prefix=/usr/papi600 --disable-pfm
This would result in only the samplers that depend on papi being built.
Those samplers (only one at time of writing) that also require libpfm
would not be build.","We remove the libpfm linkage from the libhwevent and rapl samplers.
It appears that neither of those had a direct dependency upon libpfm.
With that change made, it is clear that our --enable-papi option should
not also depend upon pfm. We therefore remove that and instead introduce
an --enable-pfm option to require or disable libpfm inclusion. The
--with-libpfm-prefix option remains to specify a path to check for
libpfm.
For instance, the following should now work:
--enable-papi --with-libpapi-prefix=/usr/papi600 --disable-pfm
This would result in only the samplers that depend on papi being built.
Those samplers (only one at time of writing) that also require libpfm
would not be build.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,493,2020-11-10T18:16:00Z,2021-01-26T21:44:11Z,2021-01-26T21:44:11Z,CLOSED,False,16,7,2,https://github.com/morrone,Split apart libpapi and libfm configuration,1,[],https://github.com/ovis-hpc/ovis/pull/493,https://github.com/morrone,2,https://github.com/ovis-hpc/ovis/pull/493#issuecomment-724878496,"We remove the libpfm linkage from the libhwevent and rapl samplers.
It appears that neither of those had a direct dependency upon libpfm.
With that change made, it is clear that our --enable-papi option should
not also depend upon pfm. We therefore remove that and instead introduce
an --enable-pfm option to require or disable libpfm inclusion. The
--with-libpfm-prefix option remains to specify a path to check for
libpfm.
For instance, the following should now work:
--enable-papi --with-libpapi-prefix=/usr/papi600 --disable-pfm
This would result in only the samplers that depend on papi being built.
Those samplers (only one at time of writing) that also require libpfm
would not be build.","@tom95858 , I checked that the samplers built as expected with this patch, but I have never actually used the papi/pfm related samplers. It would be good to verify that one or both of libhweventpapi and/or rapl still work with the explicit -lpfm linkage removed.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,493,2020-11-10T18:16:00Z,2021-01-26T21:44:11Z,2021-01-26T21:44:11Z,CLOSED,False,16,7,2,https://github.com/morrone,Split apart libpapi and libfm configuration,1,[],https://github.com/ovis-hpc/ovis/pull/493,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/493#issuecomment-767847216,"We remove the libpfm linkage from the libhwevent and rapl samplers.
It appears that neither of those had a direct dependency upon libpfm.
With that change made, it is clear that our --enable-papi option should
not also depend upon pfm. We therefore remove that and instead introduce
an --enable-pfm option to require or disable libpfm inclusion. The
--with-libpfm-prefix option remains to specify a path to check for
libpfm.
For instance, the following should now work:
--enable-papi --with-libpapi-prefix=/usr/papi600 --disable-pfm
This would result in only the samplers that depend on papi being built.
Those samplers (only one at time of writing) that also require libpfm
would not be build.",Abandoning.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,494,2020-11-10T22:50:22Z,2020-12-11T15:56:21Z,2020-12-11T15:56:21Z,MERGED,True,6,7,1,https://github.com/morrone,"In hello_sampler, use libsampler_base rather than sampler_base.c",1,[],https://github.com/ovis-hpc/ovis/pull/494,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/494,"Instead of using sampler_base.c in the sources of libhello_stream,
LIBADD libsampler_base.la. This should eliminate the automake warning
about subdir-objects.
Also update the library paths to consistently reference from
$(top_builddir).
Fix #457","Instead of using sampler_base.c in the sources of libhello_stream,
LIBADD libsampler_base.la. This should eliminate the automake warning
about subdir-objects.
Also update the library paths to consistently reference from
$(top_builddir).
Fix #457",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,495,2020-11-10T23:04:00Z,2020-11-16T17:32:11Z,2020-11-23T03:45:38Z,MERGED,True,3,9,1,https://github.com/nichamon,Fix the rapl sampler plugin,1,[],https://github.com/ovis-hpc/ovis/pull/495,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/495,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,496,2020-11-10T23:04:30Z,2020-11-16T17:31:41Z,2020-11-23T03:45:29Z,MERGED,True,4,7,1,https://github.com/nichamon,Fix the hwevetnpapi sampler plugin,1,[],https://github.com/ovis-hpc/ovis/pull/496,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/496,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,497,2020-11-10T23:05:46Z,2021-08-31T04:50:03Z,2021-08-31T04:50:03Z,CLOSED,False,991,399,12,https://github.com/nichamon,Add the zap_send_mapped() API to the zap library,1,[],https://github.com/ovis-hpc/ovis/pull/497,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/497,"Currently the zap_send() API receives application buffer and copies it
to another buffer that has been registered with the hardware using the
zap_map() interface. The zap_send() API is simple to use but is
inefficient when the same buffer is to be sent to many clients because
the same buffer is mapped and copied many times.
The zap_send_mapped() API has the following signature.
int zap_send_mapped(zap_ep_t ep, zap_map_t map, void *buf,
size_t len, void *context)
The zap_send_mapped() API posts the RDMA_SEND operation directly from
the previously mapped buffer (map) without requiring registration or
copy by the transport. This significantly improves performance for
sending operation. Unlike the zap_send() API, the zap_send_mapped() API
delivers a completion event via the application callback function unless
the function return an error.","Currently the zap_send() API receives application buffer and copies it
to another buffer that has been registered with the hardware using the
zap_map() interface. The zap_send() API is simple to use but is
inefficient when the same buffer is to be sent to many clients because
the same buffer is mapped and copied many times.
The zap_send_mapped() API has the following signature.
int zap_send_mapped(zap_ep_t ep, zap_map_t map, void *buf,
size_t len, void *context)
The zap_send_mapped() API posts the RDMA_SEND operation directly from
the previously mapped buffer (map) without requiring registration or
copy by the transport. This significantly improves performance for
sending operation. Unlike the zap_send() API, the zap_send_mapped() API
delivers a completion event via the application callback function unless
the function return an error.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,497,2020-11-10T23:05:46Z,2021-08-31T04:50:03Z,2021-08-31T04:50:03Z,CLOSED,False,991,399,12,https://github.com/nichamon,Add the zap_send_mapped() API to the zap library,1,[],https://github.com/ovis-hpc/ovis/pull/497,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/497#issuecomment-908896364,"Currently the zap_send() API receives application buffer and copies it
to another buffer that has been registered with the hardware using the
zap_map() interface. The zap_send() API is simple to use but is
inefficient when the same buffer is to be sent to many clients because
the same buffer is mapped and copied many times.
The zap_send_mapped() API has the following signature.
int zap_send_mapped(zap_ep_t ep, zap_map_t map, void *buf,
size_t len, void *context)
The zap_send_mapped() API posts the RDMA_SEND operation directly from
the previously mapped buffer (map) without requiring registration or
copy by the transport. This significantly improves performance for
sending operation. Unlike the zap_send() API, the zap_send_mapped() API
delivers a completion event via the application callback function unless
the function return an error.",Part of #783,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,498,2020-11-11T04:58:15Z,2020-11-16T17:16:30Z,2020-11-23T03:45:12Z,MERGED,True,7,22,2,https://github.com/nichamon,Allow root to access anything and remove duplicated logic,2,[],https://github.com/ovis-hpc/ovis/pull/498,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/498,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,498,2020-11-11T04:58:15Z,2020-11-16T17:16:30Z,2020-11-23T03:45:12Z,MERGED,True,7,22,2,https://github.com/nichamon,Allow root to access anything and remove duplicated logic,2,[],https://github.com/ovis-hpc/ovis/pull/498,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/498#issuecomment-725201783,,"@tom95858 The problem I found is that updtr_stop given in ldmsd_controller returns Permission Denied when ldmsd uses -a none or -a ovis. The cfgobj's UID and GID are the process UID and GID when the object is created according to configuration files. Both auth_none and auth_ovis set LDMS transport's remote UID and GID to 0. Since I started ldmsd as a non-root user, the transport's remote UID and the object's UID don't match. In turn, updtr_stop returns Permission Denied.
I modified ovis_access_check so that it allows the access if root is the one who requests the access. Then, I found that ldms_access_check has the same logic so I made ldms_access_check to call ovis_access_check. I didn't remove one of the two functions to make the change small.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,499,2020-11-11T05:45:03Z,2021-03-03T00:26:57Z,2021-03-03T00:26:57Z,MERGED,True,20,211,2,https://github.com/nichamon,Remove set_info from ldms_lookup message,1,[],https://github.com/ovis-hpc/ovis/pull/499,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/499,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,499,2020-11-11T05:45:03Z,2021-03-03T00:26:57Z,2021-03-03T00:26:57Z,MERGED,True,20,211,2,https://github.com/nichamon,Remove set_info from ldms_lookup message,1,[],https://github.com/ovis-hpc/ovis/pull/499,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/499#issuecomment-744104582,,"Hi @nichamon, have you tested if this works with OVIS-4.3.3?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,499,2020-11-11T05:45:03Z,2021-03-03T00:26:57Z,2021-03-03T00:26:57Z,MERGED,True,20,211,2,https://github.com/nichamon,Remove set_info from ldms_lookup message,1,[],https://github.com/ovis-hpc/ovis/pull/499,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/499#issuecomment-744157994,,"Hi @nichamon, have you tested if this works with OVIS-4.3.3?

Hi @tom95858, it passes the Github action that Narate's added to test the compatibility with V4.3.3. The path isn't used since  V4.3.3. However, it is not a bug fix. At this release stage, IMO, let's not merge it. It is a ported code from the master branch.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,500,2020-11-11T14:41:25Z,2020-11-17T16:24:04Z,2020-12-08T03:28:31Z,MERGED,True,1,1,1,https://github.com/narategithub,Fix zap_fabric busy wait in listening endpoint,1,[],https://github.com/ovis-hpc/ovis/pull/500,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/500,"The epoll event parameter for the zap_fabric listening endpoint event
queue was set to EPOLLIN|EPOLLOUT. This made epoll_wait() returned
right away since the file descriptor was (somehow) ready for ""write"",
and when we process the event queue (scrub_cq()), we got -FI_EAGAIN
since there was nothing yet to read. The CM thread in zap_fabric that
processes the event queus will appear busy. Setting the epoll event
parameter to EPOLLIN solved the issue.","The epoll event parameter for the zap_fabric listening endpoint event
queue was set to EPOLLIN|EPOLLOUT. This made epoll_wait() returned
right away since the file descriptor was (somehow) ready for ""write"",
and when we process the event queue (scrub_cq()), we got -FI_EAGAIN
since there was nothing yet to read. The CM thread in zap_fabric that
processes the event queus will appear busy. Setting the epoll event
parameter to EPOLLIN solved the issue.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,501,2020-11-11T14:42:49Z,2020-11-17T16:24:26Z,2020-12-07T18:40:13Z,MERGED,True,1,0,1,https://github.com/narategithub,Fix zap_fabric rendezvous map missing ep ref,1,[],https://github.com/ovis-hpc/ovis/pull/501,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/501,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,502,2020-11-11T14:45:12Z,2020-11-17T16:25:01Z,2020-12-07T18:40:51Z,MERGED,True,14,2,1,https://github.com/narategithub,zap_fabric: fix spinning cq/eq thread,1,[],https://github.com/ovis-hpc/ovis/pull/502,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/502,"zap_fabric cq thread uses epoll with fabric WAIT_FD to tell when a
completion is ready to be processed by fi_cq_read(). However,
fi_cq_read() only reads the completion entry from the cq. It does not
read the notification from the WAIT_FD. As a result, WAIT_FD is always
available for EPOLLIN, and epoll_wait() instantly returned, making the
cq thread spin with false notification.
According to fi_poll(3) man page, fi_trywait() should be called and
get FI_SUCCESS before we natively wait the WAIT_FD (e.g.
epoll_wait()) on both cq and eq. And, if fi_trywait() returns
-FI_EAGAIN, the queue is not empty and shall be processed before
natively wait for new entries.
This patch add the logic in zap_fabric scrub_cq() and scrub_eq() to
call fi_trywait() on the cq and eq, then reprocess the cq and eq if
necessary.
This has been tested with CLAGS='-DDEBUG -DEP_DEBUG ' on fabric-TCP,
fabric-sockets, and fabric-verbs-iWarp.
NOTE: By the code inspection of
libfabric/prov/verbs/src/verbs_cq.c, the cq notification is read from
channel->fd by ibv_get_cq_event() from fi_trywait(). -FI_EAGAIN
only returns if cq has an entry in it. The fi verbs eq works a little
differently (libfabric/prov/verbs/src/verbs_eq.c). verbs provider uses
libfabric socket pairs and list to manage eq notification and delivery.","zap_fabric cq thread uses epoll with fabric WAIT_FD to tell when a
completion is ready to be processed by fi_cq_read(). However,
fi_cq_read() only reads the completion entry from the cq. It does not
read the notification from the WAIT_FD. As a result, WAIT_FD is always
available for EPOLLIN, and epoll_wait() instantly returned, making the
cq thread spin with false notification.
According to fi_poll(3) man page, fi_trywait() should be called and
get FI_SUCCESS before we natively wait the WAIT_FD (e.g.
epoll_wait()) on both cq and eq. And, if fi_trywait() returns
-FI_EAGAIN, the queue is not empty and shall be processed before
natively wait for new entries.
This patch add the logic in zap_fabric scrub_cq() and scrub_eq() to
call fi_trywait() on the cq and eq, then reprocess the cq and eq if
necessary.
This has been tested with CLAGS='-DDEBUG -DEP_DEBUG ' on fabric-TCP,
fabric-sockets, and fabric-verbs-iWarp.
NOTE: By the code inspection of
libfabric/prov/verbs/src/verbs_cq.c, the cq notification is read from
channel->fd by ibv_get_cq_event() from fi_trywait(). -FI_EAGAIN
only returns if cq has an entry in it. The fi verbs eq works a little
differently (libfabric/prov/verbs/src/verbs_eq.c). verbs provider uses
libfabric socket pairs and list to manage eq notification and delivery.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,503,2020-11-11T14:45:21Z,2020-11-17T16:25:43Z,2020-12-07T18:39:29Z,MERGED,True,1,1,1,https://github.com/narategithub,Fix zap_fabric flush_io_q,1,[],https://github.com/ovis-hpc/ovis/pull/503,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/503,"Since zap does not (yet) have send completion, the operation is
flushed without calling application callback. However, the flush
handling of the send request returned from the flush_io_q() function
right away instead of continuing to flush the next work request.
This patch the flush_io_q() to continue flushing the entire io_q.","Since zap does not (yet) have send completion, the operation is
flushed without calling application callback. However, the flush
handling of the send request returned from the flush_io_q() function
right away instead of continuing to flush the next work request.
This patch the flush_io_q() to continue flushing the entire io_q.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,504,2020-11-11T14:46:48Z,2020-11-16T17:10:45Z,2020-12-08T03:28:17Z,MERGED,True,1,1,1,https://github.com/narategithub,Nit fix zap_rdma build error with `-DCTXT_DEBUG`,1,[],https://github.com/ovis-hpc/ovis/pull/504,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/504,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,505,2020-11-11T14:48:26Z,2020-11-16T17:11:17Z,2020-12-08T03:27:33Z,MERGED,True,24,12,1,https://github.com/narategithub,Fix and improve zap_fabric CTXT_DEBUG log,1,[],https://github.com/ovis-hpc/ovis/pull/505,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/505,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,506,2020-11-11T18:41:25Z,2020-11-11T21:12:32Z,2020-11-11T21:12:32Z,MERGED,True,1,1,1,https://github.com/baallan,fix free of uninit pointer from ldmsd_request stack.,1,[],https://github.com/ovis-hpc/ovis/pull/506,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/506,"in handling an err case, buff may be freed without prior assignment.","in handling an err case, buff may be freed without prior assignment.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,507,2020-11-11T21:42:20Z,2020-11-11T23:31:25Z,2020-11-11T23:31:25Z,MERGED,True,0,2,1,https://github.com/baallan,remove configure macro for unused constant,1,[],https://github.com/ovis-hpc/ovis/pull/507,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/507,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,507,2020-11-11T21:42:20Z,2020-11-11T23:31:25Z,2020-11-11T23:31:25Z,MERGED,True,0,2,1,https://github.com/baallan,remove configure macro for unused constant,1,[],https://github.com/ovis-hpc/ovis/pull/507,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/507#issuecomment-725677416,,this was a holdover from v3 afaict,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,508,2020-11-11T21:50:23Z,2020-11-17T04:46:42Z,2020-11-17T04:46:43Z,CLOSED,False,7,3,1,https://github.com/baallan,trap/fix use of uninit pointer/ins in ldmsctl:__handle_cmd,1,[],https://github.com/ovis-hpc/ovis/pull/508,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/508,bug picked up by gcc 4.8.5 -Wall,bug picked up by gcc 4.8.5 -Wall,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,508,2020-11-11T21:50:23Z,2020-11-17T04:46:42Z,2020-11-17T04:46:43Z,CLOSED,False,7,3,1,https://github.com/baallan,trap/fix use of uninit pointer/ins in ldmsctl:__handle_cmd,1,[],https://github.com/ovis-hpc/ovis/pull/508,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/508#issuecomment-728217244,bug picked up by gcc 4.8.5 -Wall,@tom95858 I's working on this patch shortly because I swapped my attention to the dir_update path last week. I'll be back on this tonight.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,508,2020-11-11T21:50:23Z,2020-11-17T04:46:42Z,2020-11-17T04:46:43Z,CLOSED,False,7,3,1,https://github.com/baallan,trap/fix use of uninit pointer/ins in ldmsctl:__handle_cmd,1,[],https://github.com/ovis-hpc/ovis/pull/508,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/508#issuecomment-728218853,bug picked up by gcc 4.8.5 -Wall,@nichamon please close this PR after you create a better PR.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,508,2020-11-11T21:50:23Z,2020-11-17T04:46:42Z,2020-11-17T04:46:43Z,CLOSED,False,7,3,1,https://github.com/baallan,trap/fix use of uninit pointer/ins in ldmsctl:__handle_cmd,1,[],https://github.com/ovis-hpc/ovis/pull/508,https://github.com/nichamon,4,https://github.com/ovis-hpc/ovis/pull/508#issuecomment-728683153,bug picked up by gcc 4.8.5 -Wall,The fix is #517 .,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,509,2020-11-12T06:10:33Z,2020-11-16T17:20:07Z,2020-12-08T03:27:26Z,MERGED,True,17,1,1,https://github.com/narategithub,Add various DEBUG flags to github debug build job,1,[],https://github.com/ovis-hpc/ovis/pull/509,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/509,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,509,2020-11-12T06:10:33Z,2020-11-16T17:20:07Z,2020-12-08T03:27:26Z,MERGED,True,17,1,1,https://github.com/narategithub,Add various DEBUG flags to github debug build job,1,[],https://github.com/ovis-hpc/ovis/pull/509,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/509#issuecomment-725862254,,This patch needs #504 and #505 to succeed.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,511,2020-11-12T07:37:55Z,2020-11-16T18:39:47Z,2020-11-23T03:44:59Z,MERGED,True,10,8,1,https://github.com/nichamon,Fix a possible list corruption in ldmsd_set_deregister(),1,[],https://github.com/ovis-hpc/ovis/pull/511,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/511,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,512,2020-11-12T07:39:41Z,2020-11-17T16:22:01Z,2020-11-23T03:44:42Z,MERGED,True,3,0,1,https://github.com/nichamon,Initialize the buffer length before passing to ldms_xprt_sockaddr,1,[],https://github.com/ovis-hpc/ovis/pull/512,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/512,…addr,…addr,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,512,2020-11-12T07:39:41Z,2020-11-17T16:22:01Z,2020-11-23T03:44:42Z,MERGED,True,3,0,1,https://github.com/nichamon,Initialize the buffer length before passing to ldms_xprt_sockaddr,1,[],https://github.com/ovis-hpc/ovis/pull/512,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/512#issuecomment-728215259,…addr,"What is the symptom here? Are streams broken after the libfabric change for salen == 0?

There are no symptoms if Munge is in used. The reason is that ldms_auth_munge calls ldms_xprt_sockaddr so the remote and local addresses are cached, given that the address buffers are large enough. (Ifldms_xprt_sockaddr returns an error at this state, the connection will be terminated).
For the other authentication methods, stream_subscribe and strean_subscribe requests may fail. I said 'may' here because the input buffer length isn't initialized so the value is unknown. Thus, prdcr_subscribe command may not work properly as the stream_subscribe sent by the aggregator to the sampler daemon could fail. I've seen this symptom when I don't use any authentication method.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,512,2020-11-12T07:39:41Z,2020-11-17T16:22:01Z,2020-11-23T03:44:42Z,MERGED,True,3,0,1,https://github.com/nichamon,Initialize the buffer length before passing to ldms_xprt_sockaddr,1,[],https://github.com/ovis-hpc/ovis/pull/512,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/512#issuecomment-728216228,…addr,The bug doesn't affect slurm sampler plugin and papi sampler plugin because both of them subscribe to a stream by calling ldmsd_stream_subscribe.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,513,2020-11-12T19:47:59Z,2020-12-22T03:29:47Z,2020-12-22T03:29:47Z,CLOSED,False,3,2,1,https://github.com/morrone,Fix handling slurm include in alternate install path,1,[],https://github.com/ovis-hpc/ovis/pull/513,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/513,"Needs testing, but I think that will fix the SLURM_CFLAGS in an alternate location problem.","Needs testing, but I think that will fix the SLURM_CFLAGS in an alternate location problem.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,513,2020-11-12T19:47:59Z,2020-12-22T03:29:47Z,2020-12-22T03:29:47Z,CLOSED,False,3,2,1,https://github.com/morrone,Fix handling slurm include in alternate install path,1,[],https://github.com/ovis-hpc/ovis/pull/513,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/513#issuecomment-726303289,"Needs testing, but I think that will fix the SLURM_CFLAGS in an alternate location problem.",That's what I'm testing now...,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,513,2020-11-12T19:47:59Z,2020-12-22T03:29:47Z,2020-12-22T03:29:47Z,CLOSED,False,3,2,1,https://github.com/morrone,Fix handling slurm include in alternate install path,1,[],https://github.com/ovis-hpc/ovis/pull/513,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/513#issuecomment-749317906,"Needs testing, but I think that will fix the SLURM_CFLAGS in an alternate location problem.",No longer required.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,514,2020-11-12T22:56:04Z,2020-11-16T17:13:36Z,2020-11-23T03:44:22Z,MERGED,True,27,16,2,https://github.com/nichamon,Improve the dir_update path,1,[],https://github.com/ovis-hpc/ovis/pull/514,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/514,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,514,2020-11-12T22:56:04Z,2020-11-16T17:13:36Z,2020-11-23T03:44:22Z,MERGED,True,27,16,2,https://github.com/nichamon,Improve the dir_update path,1,[],https://github.com/ovis-hpc/ovis/pull/514,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/514#issuecomment-726519759,,"Please test this against a 4.3.3 client to ensure that this fixes the issue

I have tested this the dir_update path doesn't crash anymore, but the aggregator asserts when it received a SET_DELETE_REQUEST as it does not recognize the request.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,514,2020-11-12T22:56:04Z,2020-11-16T17:13:36Z,2020-11-23T03:44:22Z,MERGED,True,27,16,2,https://github.com/nichamon,Improve the dir_update path,1,[],https://github.com/ovis-hpc/ovis/pull/514,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/514#issuecomment-726889605,,"@tom95858 I have tested the send_dir_update path. The setup is

sampler daemon runs 4.3.3. It used the test_sampler plugin and created 3 sets.
1st-level agg (AGG1) runs 4.3.3
2nd-level agg (AGG2) runs 4.3.4
ldms_ls -vl to all daemons reported the sets correctly
The sampler daemon was killed.
AGG1 unpublished the sets and in turn send_dir_update is called to send a dir_del to AGG2.
AGG2 received the dir_del message and reseted the set.
ldms_ls -vl to AGG1 and AGG2 reported no sets as expected.
The sampler daemon restarted.
AGG1 added the sets and published the sets. It sent dir_add to AGG2.
AGG2 received the dir_add and added sets.
ldms_ls -vl to all daemons reported the sets correctly.

All daemons survived. The fix is good.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,514,2020-11-12T22:56:04Z,2020-11-16T17:13:36Z,2020-11-23T03:44:22Z,MERGED,True,27,16,2,https://github.com/nichamon,Improve the dir_update path,1,[],https://github.com/ovis-hpc/ovis/pull/514,https://github.com/tom95858,4,https://github.com/ovis-hpc/ovis/pull/514#issuecomment-726957088,,"@nichamon, can you please test that ldms_ls (from the sampler node running ovis-4.3.3) to the aggregator node (running ovis4.3.4) does not crash?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,514,2020-11-12T22:56:04Z,2020-11-16T17:13:36Z,2020-11-23T03:44:22Z,MERGED,True,27,16,2,https://github.com/nichamon,Improve the dir_update path,1,[],https://github.com/ovis-hpc/ovis/pull/514,https://github.com/nichamon,5,https://github.com/ovis-hpc/ovis/pull/514#issuecomment-727080310,,"@nichamon, can you please test that ldms_ls (from the sampler node running ovis-4.3.3) to the aggregator node (running ovis4.3.4) does not crash?

I have tested this. ldms_ls running ovis-4.3.3 with and without -vl works with an aggregator running v4.3.4 + this patch.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,515,2020-11-13T04:13:05Z,2020-11-16T17:21:03Z,2020-12-08T03:27:02Z,MERGED,True,3,3,1,https://github.com/narategithub,github action build test update,1,[],https://github.com/ovis-hpc/ovis/pull/515,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/515,"add ""-Wall -Werror"" to the build test.
use ovishpc container image for the build. This is the same one used
in ldms-test repository.","add ""-Wall -Werror"" to the build test.
use ovishpc container image for the build. This is the same one used
in ldms-test repository.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,515,2020-11-13T04:13:05Z,2020-11-16T17:21:03Z,2020-12-08T03:27:02Z,MERGED,True,3,3,1,https://github.com/narategithub,github action build test update,1,[],https://github.com/ovis-hpc/ovis/pull/515,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/515#issuecomment-726496919,"add ""-Wall -Werror"" to the build test.
use ovishpc container image for the build. This is the same one used
in ldms-test repository.","@tom95858  FYI, The github ""Build Test - CentOS7 / build"" job failed due to hweventpapi. Once #496 is merged and this PR has rebased, the github check should succeed.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,516,2020-11-13T06:54:38Z,2020-11-16T18:52:02Z,2020-12-07T18:29:29Z,MERGED,True,168,0,1,https://github.com/narategithub,Add github workflow for checking 4.3.3 compatibility,1,[],https://github.com/ovis-hpc/ovis/pull/516,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/516,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,516,2020-11-13T06:54:38Z,2020-11-16T18:52:02Z,2020-12-07T18:29:29Z,MERGED,True,168,0,1,https://github.com/narategithub,Add github workflow for checking 4.3.3 compatibility,1,[],https://github.com/ovis-hpc/ovis/pull/516,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/516#issuecomment-726561953,,The check shall be a pass once the compatibility issue is fixed (and this pull request rebased on top of it).,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,516,2020-11-13T06:54:38Z,2020-11-16T18:52:02Z,2020-12-07T18:29:29Z,MERGED,True,168,0,1,https://github.com/narategithub,Add github workflow for checking 4.3.3 compatibility,1,[],https://github.com/ovis-hpc/ovis/pull/516,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/516#issuecomment-728238624,,"@narategithub, can you please confirm that this works with the latest pull requests merged. I think the pre-requisites have been merged, but when I re-run these tests, this compatibility test fails.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,516,2020-11-13T06:54:38Z,2020-11-16T18:52:02Z,2020-12-07T18:29:29Z,MERGED,True,168,0,1,https://github.com/narategithub,Add github workflow for checking 4.3.3 compatibility,1,[],https://github.com/ovis-hpc/ovis/pull/516,https://github.com/narategithub,4,https://github.com/ovis-hpc/ovis/pull/516#issuecomment-728252952,,@tom95858 I'd just rebased + pushed. The test is now a pass & ready to merge.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,517,2020-11-17T04:45:58Z,2020-11-17T16:22:24Z,2020-11-23T03:44:05Z,MERGED,True,16,12,1,https://github.com/nichamon,Fix a use-after-free in ldmsctl.c,1,[],https://github.com/ovis-hpc/ovis/pull/517,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/517,"A symptom of the bug is that the status commands will not report any
status because the error code value is a non-zero, garbage value. No
error messages are printed because the response is not really an error
response.","A symptom of the bug is that the status commands will not report any
status because the error code value is a non-zero, garbage value. No
error messages are printed because the response is not really an error
response.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,517,2020-11-17T04:45:58Z,2020-11-17T16:22:24Z,2020-11-23T03:44:05Z,MERGED,True,16,12,1,https://github.com/nichamon,Fix a use-after-free in ldmsctl.c,1,[],https://github.com/ovis-hpc/ovis/pull/517,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/517#issuecomment-728684018,"A symptom of the bug is that the status commands will not report any
status because the error code value is a non-zero, garbage value. No
error messages are printed because the response is not really an error
response.","@tom95858

@nichamon, please look at this for an actual fix. I think that in the event that there is an error, we'll want to do something different, probably inside the while(1).

I'm not sure what errors are you referring to. In case of an error that LDMSD fails to handle the command, cmd->resp() is responsible to handle it. I added the code to assert if the sem_wait() wakes up but the recv list is empty.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,518,2020-11-17T17:40:02Z,2020-11-17T18:44:12Z,2020-12-07T18:31:02Z,MERGED,True,30,2,1,https://github.com/narategithub,Add ldms_ls(4.3.3) to ldmsd(OVIS-4) compatibility test,1,[],https://github.com/ovis-hpc/ovis/pull/518,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/518,Also add ldms_ls -l checks.,Also add ldms_ls -l checks.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,519,2020-11-18T05:08:53Z,2020-12-11T15:52:57Z,2022-01-18T04:10:06Z,MERGED,True,153,0,2,https://github.com/nichamon,"Add subcribe, xprt_stats and thread_stats to the ldmsctl",1,[],https://github.com/ovis-hpc/ovis/pull/519,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/519,The commands have been added to ldmsd_controller already.,The commands have been added to ldmsd_controller already.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,519,2020-11-18T05:08:53Z,2020-12-11T15:52:57Z,2022-01-18T04:10:06Z,MERGED,True,153,0,2,https://github.com/nichamon,"Add subcribe, xprt_stats and thread_stats to the ldmsctl",1,[],https://github.com/ovis-hpc/ovis/pull/519,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/519#issuecomment-729426932,The commands have been added to ldmsd_controller already.,The patch has been tested that the subscribe command really made the LDMS daemon to subscribe the stream. The xprt_stats and thread_stats commands report the same information as in ldmsd_controller.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,520,2020-11-18T06:03:55Z,2020-11-20T18:59:19Z,2020-11-23T03:43:45Z,MERGED,True,4,2,1,https://github.com/nichamon,Fix bugs in the stream path,2,[],https://github.com/ovis-hpc/ovis/pull/520,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/520,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,520,2020-11-18T06:03:55Z,2020-11-20T18:59:19Z,2020-11-23T03:43:45Z,MERGED,True,4,2,1,https://github.com/nichamon,Fix bugs in the stream path,2,[],https://github.com/ovis-hpc/ovis/pull/520,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/520#issuecomment-729452395,,"The PR contains 2 commits. The first one is the one that takes the LDMS transport's reference when subscribes a stream and puts it back when removes the client from the list. While I tested the patch, I found the bug that is fixed by the second commit. It was a typo that passes &key instead of key which is struct __RSE_key_s * already. It sends a garbage key value to rbt_find_lub. The symptom is that a client may not be removed from the client list.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,520,2020-11-18T06:03:55Z,2020-11-20T18:59:19Z,2020-11-23T03:43:45Z,MERGED,True,4,2,1,https://github.com/nichamon,Fix bugs in the stream path,2,[],https://github.com/ovis-hpc/ovis/pull/520,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/520#issuecomment-731351543,,"We need to be a bit more specific about the naming of the pull request/commit. ""Fix bugs in XXX"" is not particularly informative when reviewing a git log.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,521,2020-11-19T04:20:26Z,2020-11-24T16:15:40Z,2022-01-18T04:10:10Z,MERGED,True,28,0,1,https://github.com/nichamon,Add a build test on Ubuntu-20.04,1,[],https://github.com/ovis-hpc/ovis/pull/521,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/521,"The test includes build job and distcheck job. The build uses the
default enable/disable configure options.","The test includes build job and distcheck job. The build uses the
default enable/disable configure options.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,521,2020-11-19T04:20:26Z,2020-11-24T16:15:40Z,2022-01-18T04:10:10Z,MERGED,True,28,0,1,https://github.com/nichamon,Add a build test on Ubuntu-20.04,1,[],https://github.com/ovis-hpc/ovis/pull/521,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/521#issuecomment-730559591,"The test includes build job and distcheck job. The build uses the
default enable/disable configure options.","@nichamon which gcc version does this end up compiling with, or is there some way to force the output of gcc --version from the yaml script?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,521,2020-11-19T04:20:26Z,2020-11-24T16:15:40Z,2022-01-18T04:10:10Z,MERGED,True,28,0,1,https://github.com/nichamon,Add a build test on Ubuntu-20.04,1,[],https://github.com/ovis-hpc/ovis/pull/521,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/521#issuecomment-730577772,"The test includes build job and distcheck job. The build uses the
default enable/disable configure options.","@nichamon, this seems to be failing because bison and flex are missing from the build container. Am I missing something?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,521,2020-11-19T04:20:26Z,2020-11-24T16:15:40Z,2022-01-18T04:10:10Z,MERGED,True,28,0,1,https://github.com/nichamon,Add a build test on Ubuntu-20.04,1,[],https://github.com/ovis-hpc/ovis/pull/521,https://github.com/nichamon,4,https://github.com/ovis-hpc/ovis/pull/521#issuecomment-730672589,"The test includes build job and distcheck job. The build uses the
default enable/disable configure options.","@nichamon, this seems to be failing because bison and flex are missing from the build container. Am I missing something?

@tom95858 You didn't miss anything. I just pushed a new docker image. Bison and Flex were missing from the previous docker image. Now it will fail because of the errors (-Wall and -Werror) in ldms/src/sampler/dstat/parse_stat.c. I'll address those and probably rebase this on top of the fix.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,521,2020-11-19T04:20:26Z,2020-11-24T16:15:40Z,2022-01-18T04:10:10Z,MERGED,True,28,0,1,https://github.com/nichamon,Add a build test on Ubuntu-20.04,1,[],https://github.com/ovis-hpc/ovis/pull/521,https://github.com/nichamon,5,https://github.com/ovis-hpc/ovis/pull/521#issuecomment-730674861,"The test includes build job and distcheck job. The build uses the
default enable/disable configure options.","@nichamon which gcc version does this end up compiling with, or is there some way to force the output of gcc --version from the yaml script?

The gcc version that the build test uses is gcc (Ubuntu 9.3.0-17ubuntu120.04) 9.3.0. The problem in #486 can be seen when we compile with both gcc (Ubuntu 7.5.0-3ubuntu118.04) 7.5.0 and the one in the build test.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,521,2020-11-19T04:20:26Z,2020-11-24T16:15:40Z,2022-01-18T04:10:10Z,MERGED,True,28,0,1,https://github.com/nichamon,Add a build test on Ubuntu-20.04,1,[],https://github.com/ovis-hpc/ovis/pull/521,https://github.com/baallan,6,https://github.com/ovis-hpc/ovis/pull/521#issuecomment-730682741,"The test includes build job and distcheck job. The build uses the
default enable/disable configure options.","@nichamon the snprintf usage which is generating nuisance warnings is expected to truncate in copying from the longer string; it would be appropriate to pragma suppress that warning in the source.
The readdir_r issue is discussed at:  https://lwn.net/Articles/696474/
It's not obvious to me which way we want to go; will ldmsd be forever compiled with glibc? If not, we may want to pragma suppression that bunch of warnings too.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,521,2020-11-19T04:20:26Z,2020-11-24T16:15:40Z,2022-01-18T04:10:10Z,MERGED,True,28,0,1,https://github.com/nichamon,Add a build test on Ubuntu-20.04,1,[],https://github.com/ovis-hpc/ovis/pull/521,https://github.com/nichamon,7,https://github.com/ovis-hpc/ovis/pull/521#issuecomment-730877961,"The test includes build job and distcheck job. The build uses the
default enable/disable configure options.","@baallan According to the man page, readdir is MT-Unsafe race:dirstream. According to the gnu documentation, this means readdir is not thread-safe in the case of concurrent calls to readdir() that specify the same directory stream. In the dstat plugin case, the dir stream object is local to the parse_proc_pid_fd function, so it is impossible that there will be more than one thread that pass the object to readdir() concurrently.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,521,2020-11-19T04:20:26Z,2020-11-24T16:15:40Z,2022-01-18T04:10:10Z,MERGED,True,28,0,1,https://github.com/nichamon,Add a build test on Ubuntu-20.04,1,[],https://github.com/ovis-hpc/ovis/pull/521,https://github.com/baallan,8,https://github.com/ovis-hpc/ovis/pull/521#issuecomment-731246256,"The test includes build job and distcheck job. The build uses the
default enable/disable configure options.","@nichamon so if i readdir on /proc/$pid/fd simultaneously from two different threads (different plugins with overlapping functionality, which we may easily have happen), are the stream objects definitely different? Or is the same stream returned to both threads by opendir()?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,521,2020-11-19T04:20:26Z,2020-11-24T16:15:40Z,2022-01-18T04:10:10Z,MERGED,True,28,0,1,https://github.com/nichamon,Add a build test on Ubuntu-20.04,1,[],https://github.com/ovis-hpc/ovis/pull/521,https://github.com/nichamon,9,https://github.com/ovis-hpc/ovis/pull/521#issuecomment-731912975,"The test includes build job and distcheck job. The build uses the
default enable/disable configure options.",@tom95858 I have rebased the branch on top of the latest OVIS-4. Now OVIS-4 passes the Ubuntu20.04 build test.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,522,2020-11-19T17:11:05Z,2020-12-11T15:54:11Z,2020-12-11T15:54:11Z,MERGED,True,10,33,1,https://github.com/baallan,fix #481 by applying sampler_base auth parse/set (security),1,[],https://github.com/ovis-hpc/ovis/pull/522,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/522,"replace perm/uid/gid option code with more featureful sampler_base function call.
Fixes #481","replace perm/uid/gid option code with more featureful sampler_base function call.
Fixes #481",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,522,2020-11-19T17:11:05Z,2020-12-11T15:54:11Z,2020-12-11T15:54:11Z,MERGED,True,10,33,1,https://github.com/baallan,fix #481 by applying sampler_base auth parse/set (security),1,[],https://github.com/ovis-hpc/ovis/pull/522,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/522#issuecomment-742985634,"replace perm/uid/gid option code with more featureful sampler_base function call.
Fixes #481",this security fix has been rebased to current OVIS-4. please merge before next release.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,524,2020-11-19T21:51:15Z,2020-11-20T18:54:20Z,2020-12-08T03:28:34Z,MERGED,True,29,29,1,https://github.com/narategithub,zap_sock - only enable EPOLLOUT when necessary,1,[],https://github.com/ovis-hpc/ovis/pull/524,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/524,This passed zap_test and all test cases in ldms-test repository.,This passed zap_test and all test cases in ldms-test repository.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,524,2020-11-19T21:51:15Z,2020-11-20T18:54:20Z,2020-12-08T03:28:34Z,MERGED,True,29,29,1,https://github.com/narategithub,zap_sock - only enable EPOLLOUT when necessary,1,[],https://github.com/ovis-hpc/ovis/pull/524,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/524#issuecomment-730659805,This passed zap_test and all test cases in ldms-test repository.,@tom95858 this is the port of zap_sock block-send (until EAGAIN) from master,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,524,2020-11-19T21:51:15Z,2020-11-20T18:54:20Z,2020-12-08T03:28:34Z,MERGED,True,29,29,1,https://github.com/narategithub,zap_sock - only enable EPOLLOUT when necessary,1,[],https://github.com/ovis-hpc/ovis/pull/524,https://github.com/narategithub,3,https://github.com/ovis-hpc/ovis/pull/524#issuecomment-730712995,This passed zap_test and all test cases in ldms-test repository.,"@tom95858 FYI, a short note on how to get this patch:
$ git remote add narategithub https://github.com/narategithub/ovis
$ git fetch narategithub v4-zap-sock-send
$ git checkout -b v4-zap-sock-send FETCH_HEAD",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,524,2020-11-19T21:51:15Z,2020-11-20T18:54:20Z,2020-12-08T03:28:34Z,MERGED,True,29,29,1,https://github.com/narategithub,zap_sock - only enable EPOLLOUT when necessary,1,[],https://github.com/ovis-hpc/ovis/pull/524,https://github.com/tom95858,4,https://github.com/ovis-hpc/ovis/pull/524#issuecomment-731349318,This passed zap_test and all test cases in ldms-test repository.,Hi have tested this at scale on Voltrino without issue.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,525,2020-11-20T04:47:39Z,2020-11-20T18:50:48Z,2020-12-08T03:27:29Z,MERGED,True,1,0,1,https://github.com/narategithub,Fix zap_fabric build error (w/o DEBUG),1,[],https://github.com/ovis-hpc/ovis/pull/525,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/525,"When building zap_fabric without -DDEBUG, the static global variable
z_fi_op_str is not used. With -Wall -Werror, this resulted in
build error. This patch marks the variable unused with
__attribute__((unused)).","When building zap_fabric without -DDEBUG, the static global variable
z_fi_op_str is not used. With -Wall -Werror, this resulted in
build error. This patch marks the variable unused with
__attribute__((unused)).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,525,2020-11-20T04:47:39Z,2020-11-20T18:50:48Z,2020-12-08T03:27:29Z,MERGED,True,1,0,1,https://github.com/narategithub,Fix zap_fabric build error (w/o DEBUG),1,[],https://github.com/ovis-hpc/ovis/pull/525,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/525#issuecomment-730848672,"When building zap_fabric without -DDEBUG, the static global variable
z_fi_op_str is not used. With -Wall -Werror, this resulted in
build error. This patch marks the variable unused with
__attribute__((unused)).",@tom95858 github actions did not catch this b/c they did not build zap_fabric. I think I should put another build test that enable as many plugins as possible (with and without DEBUG) to catch these kinds of build bugs.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,525,2020-11-20T04:47:39Z,2020-11-20T18:50:48Z,2020-12-08T03:27:29Z,MERGED,True,1,0,1,https://github.com/narategithub,Fix zap_fabric build error (w/o DEBUG),1,[],https://github.com/ovis-hpc/ovis/pull/525,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/525#issuecomment-731318271,"When building zap_fabric without -DDEBUG, the static global variable
z_fi_op_str is not used. With -Wall -Werror, this resulted in
build error. This patch marks the variable unused with
__attribute__((unused)).",@narategithub Why wouldn't the more appropriate change be to move the #if DEBUG from line 110 up to line 92? Seems like unused would be wrong in the case where debug is defined.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,525,2020-11-20T04:47:39Z,2020-11-20T18:50:48Z,2020-12-08T03:27:29Z,MERGED,True,1,0,1,https://github.com/narategithub,Fix zap_fabric build error (w/o DEBUG),1,[],https://github.com/ovis-hpc/ovis/pull/525,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/525#issuecomment-731321007,"When building zap_fabric without -DDEBUG, the static global variable
z_fi_op_str is not used. With -Wall -Werror, this resulted in
build error. This patch marks the variable unused with
__attribute__((unused)).","@tom95858 github actions did not catch this b/c they did not build zap_fabric. I think I should put another build test that enable as many plugins as possible (with and without DEBUG) to catch these kinds of build bugs.

@narategithub
The tricky bit about this is to label the vm/container that has all the extra headers and libraries which support exotic build as ""build only"" in some way. Otherwise one is tempted to proceed on to running tests in the same container which has no corresponding hardware.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,525,2020-11-20T04:47:39Z,2020-11-20T18:50:48Z,2020-12-08T03:27:29Z,MERGED,True,1,0,1,https://github.com/narategithub,Fix zap_fabric build error (w/o DEBUG),1,[],https://github.com/ovis-hpc/ovis/pull/525,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/525#issuecomment-731340079,"When building zap_fabric without -DDEBUG, the static global variable
z_fi_op_str is not used. With -Wall -Werror, this resulted in
build error. This patch marks the variable unused with
__attribute__((unused)).","Hi @narategithub, why didn't our pull build test catch this?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,525,2020-11-20T04:47:39Z,2020-11-20T18:50:48Z,2020-12-08T03:27:29Z,MERGED,True,1,0,1,https://github.com/narategithub,Fix zap_fabric build error (w/o DEBUG),1,[],https://github.com/ovis-hpc/ovis/pull/525,https://github.com/narategithub,6,https://github.com/ovis-hpc/ovis/pull/525#issuecomment-731341820,"When building zap_fabric without -DDEBUG, the static global variable
z_fi_op_str is not used. With -Wall -Werror, this resulted in
build error. This patch marks the variable unused with
__attribute__((unused)).",@tom95858 b/c zap_fabric is disabled by default. That's why I mentioned that we need another build test that enables everything.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,526,2020-11-20T05:41:46Z,2020-11-20T18:52:17Z,2020-11-23T03:42:54Z,MERGED,True,12,6,1,https://github.com/nichamon,Fix the dstat sampler plugin,2,[],https://github.com/ovis-hpc/ovis/pull/526,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/526,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,526,2020-11-20T05:41:46Z,2020-11-20T18:52:17Z,2020-11-23T03:42:54Z,MERGED,True,12,6,1,https://github.com/nichamon,Fix the dstat sampler plugin,2,[],https://github.com/ovis-hpc/ovis/pull/526,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/526#issuecomment-730865646,,"Please note that the pull request addresses 2 problems:

the -Werror and -Wall build error on Ubuntu
the bug that the sampler reports the wrong number of file descriptors. The counter didn't ignore the current and parent directories returned by readdir_r.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,526,2020-11-20T05:41:46Z,2020-11-20T18:52:17Z,2020-11-23T03:42:54Z,MERGED,True,12,6,1,https://github.com/nichamon,Fix the dstat sampler plugin,2,[],https://github.com/ovis-hpc/ovis/pull/526,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/526#issuecomment-730949601,,"@tom95858 The patches have been tested on both Ubuntu18.04 and Centos7.
The configuration of the dstat plugin below
config name=dstat fd=true fdtypes=true ....
is used to configure the dstat plugin so that the changes would be tested.
There are no aggregators. The sampler daemon ran only the dstat plugin.
I compared the result from ldms_ls -l with the number of file descriptors in /proc/self/fd. The results of the code with and without the patch were compared as well. All metric values of the two code versions were the same except fd_count. The fd_count value before applying the patch counts the current and parent directories of /proc/self/fd.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,526,2020-11-20T05:41:46Z,2020-11-20T18:52:17Z,2020-11-23T03:42:54Z,MERGED,True,12,6,1,https://github.com/nichamon,Fix the dstat sampler plugin,2,[],https://github.com/ovis-hpc/ovis/pull/526,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/526#issuecomment-731254334,,"@nichamon When implementing, I considered the correct 'count' to be that which matches ""ls -a /proc/self/fd/|wc -l"" (which would include . and ..).
But if you adjust the man page for dstat to note that . and .. are excluded from the count, then this patch is fine (assuming that opendir result objects are unique per call, which I have no documentation to prove).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,526,2020-11-20T05:41:46Z,2020-11-20T18:52:17Z,2020-11-23T03:42:54Z,MERGED,True,12,6,1,https://github.com/nichamon,Fix the dstat sampler plugin,2,[],https://github.com/ovis-hpc/ovis/pull/526,https://github.com/nichamon,5,https://github.com/ovis-hpc/ovis/pull/526#issuecomment-731280803,,"@baallan I answered your question in #521 here.

@nichamon so if i readdir on /proc/$pid/fd simultaneously from two different threads (different plugins with overlapping functionality, which we may easily have happen), are the stream objects definitely different? Or is the same stream returned to both threads by opendir()?

opendir is thread-safe. It returns different stream objects. You can see the opendir manpage or the source code.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,526,2020-11-20T05:41:46Z,2020-11-20T18:52:17Z,2020-11-23T03:42:54Z,MERGED,True,12,6,1,https://github.com/nichamon,Fix the dstat sampler plugin,2,[],https://github.com/ovis-hpc/ovis/pull/526,https://github.com/nichamon,6,https://github.com/ovis-hpc/ovis/pull/526#issuecomment-731287803,,"@nichamon When implementing, I considered the correct 'count' to be that which matches ""ls -a /proc/self/fd/|wc -l"" (which would include . and ..).

The dstat man page defines fd_count as

  
    
      ovis/ldms/src/sampler/dstat/Plugin_dstat.man
    
    
         Line 98
      in
      f8523cb
    
  
  
    

        
          
           fd_count        total number of open file descriptors. 
        
    
  


I think there is nothing to change on the man page. The patch I made fixes the code so that it reports the fd_count value according to the dstat man page which provides a sensible definition of the fd_count metric. In your opinion, are '.' and '..' open file descriptors?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,526,2020-11-20T05:41:46Z,2020-11-20T18:52:17Z,2020-11-23T03:42:54Z,MERGED,True,12,6,1,https://github.com/nichamon,Fix the dstat sampler plugin,2,[],https://github.com/ovis-hpc/ovis/pull/526,https://github.com/baallan,7,https://github.com/ovis-hpc/ovis/pull/526#issuecomment-731288485,,"opendir is thread-safe. It returns different stream objects. You can see the opendir manpage or the source code.

The man page on rhel7 says nothing about the returned object being unique. But if you've verified that in the opendir source code, then we're all good.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,526,2020-11-20T05:41:46Z,2020-11-20T18:52:17Z,2020-11-23T03:42:54Z,MERGED,True,12,6,1,https://github.com/nichamon,Fix the dstat sampler plugin,2,[],https://github.com/ovis-hpc/ovis/pull/526,https://github.com/nichamon,8,https://github.com/ovis-hpc/ovis/pull/526#issuecomment-731289515,,"opendir is thread-safe. It returns different stream objects. You can see the opendir manpage or the source code.

The man page on rhel7 says nothing about the returned object being unique. But if you've verified that in the opendir source code, then we're all good.

Yes, I have verified the source code.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,527,2020-11-20T07:25:25Z,2020-11-20T18:52:46Z,2020-11-23T03:43:07Z,MERGED,True,0,652,1,https://github.com/nichamon,"Remove a generated file, config/tap-driver.sh",1,[],https://github.com/ovis-hpc/ovis/pull/527,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/527,"The file is generated by autoconf per macro
AC_REQUIRE_AUX_FILE([tap-driver.sh]) in configure.ac.","The file is generated by autoconf per macro
AC_REQUIRE_AUX_FILE([tap-driver.sh]) in configure.ac.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,527,2020-11-20T07:25:25Z,2020-11-20T18:52:46Z,2020-11-23T03:43:07Z,MERGED,True,0,652,1,https://github.com/nichamon,"Remove a generated file, config/tap-driver.sh",1,[],https://github.com/ovis-hpc/ovis/pull/527,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/527#issuecomment-730963548,"The file is generated by autoconf per macro
AC_REQUIRE_AUX_FILE([tap-driver.sh]) in configure.ac.","@baallan @Snell1224 config/tap-driver.sh is generated by autoconf. Please do not add any generated files to the tree.
The problem is that different versions of the tool that generates the file (in this case, autoconf) may generate slightly different content. Without this patch on Ubuntu 18.04, after calling ./autogen.sh the file will be changed.
What I tested is:
From a clean tree, I removed config/tap-driver.sh. After I ran ./autogen.sh, tap-driver.sh exists in the config directory.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,527,2020-11-20T07:25:25Z,2020-11-20T18:52:46Z,2020-11-23T03:43:07Z,MERGED,True,0,652,1,https://github.com/nichamon,"Remove a generated file, config/tap-driver.sh",1,[],https://github.com/ovis-hpc/ovis/pull/527,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/527#issuecomment-731273424,"The file is generated by autoconf per macro
AC_REQUIRE_AUX_FILE([tap-driver.sh]) in configure.ac.","@Snell1224 I cloned and tried Mon's code on my centos 7. It ends up with the same tap-driver.sh, so her pull request seems to be fine.
I notice (./configure --enable-ldms-test --disable-python --prefix=/tmp/pc && make installcheck) that practically everything tested is coming up XFAIL (e.g. meminfo) which I think is unexpected.
Also, it looks like maybe some of the recent configure.ac papi-related changes from Chris may require adjustments to the test scripting.
Below is the relevant output from make installcheck.
Making installcheck in test
make[3]: Entering directory `/tmp/novis/ldms/src/test'
./ldms-run-static-tests.test
/tmp/pc/lib/ovis-ldms/ldms-static-test-list.sh: line 6: @ENABLE_PAPI_SAMPLER_TRUE@: command not found
/tmp/pc/lib/ovis-ldms/ldms-static-test-list.sh: line 7: @ENABLE_SYSPAPI_SAMPLER_TRUE@: command not found
/tmp/pc/lib/ovis-ldms/ldms-static-test-list.sh: line 14: @ENABLE_RAPL_TRUE@: command not found
1..21
FAIL: cannot read test input meminfo
meminfo
not ok 1 - XFAIL: meminfo # TODO - If test is not an expected failure, please remove meminfo from list in /tmp/pc/lib/ovis-ldms/ldms-static-test-bypass
./ldms-run-static-tests.test: line 32: ldmstest/test.meminfo.log: No such file or directory
./ldms-run-static-tests.test: line 33: ldmstest/test.meminfo.log: No such file or directory
FAIL: cannot read test input generic_sampler
generic_sampler
not ok 2 - XFAIL: generic_sampler # TODO - If test is not an expected failure, please remove generic_sampler from list in /tmp/pc/lib/ovis-ldms/ldms-static-test-bypass
./ldms-run-static-tests.test: line 32: ldmstest/test.generic_sampler.log: No such file or directory
./ldms-run-static-tests.test: line 33: ldmstest/test.generic_sampler.log: No such file or directory
FAIL: cannot read test input tsampler
tsampler
not ok 3 - XFAIL: tsampler # TODO - If test is not an expected failure, please remove tsampler from list in /tmp/pc/lib/ovis-ldms/ldms-static-test-bypass
./ldms-run-static-tests.test: line 32: ldmstest/test.tsampler.log: No such file or directory
./ldms-run-static-tests.test: line 33: ldmstest/test.tsampler.log: No such file or directory
FAIL: cannot read test input hfclock
hfclock
not ok 4 - XFAIL: hfclock # TODO - If test is not an expected failure, please remove hfclock from list in /tmp/pc/lib/ovis-ldms/ldms-static-test-bypass
./ldms-run-static-tests.test: line 32: ldmstest/test.hfclock.log: No such file or directory
./ldms-run-static-tests.test: line 33: ldmstest/test.hfclock.log: No such file or directory
FAIL: cannot read test input dstat
dstat
not ok 5 - XFAIL: dstat # TODO - If test is not an expected failure, please remove dstat from list in /tmp/pc/lib/ovis-ldms/ldms-static-test-bypass
./ldms-run-static-tests.test: line 32: ldmstest/test.dstat.log: No such file or directory
./ldms-run-static-tests.test: line 33: ldmstest/test.dstat.log: No such file or directory
FAIL: cannot read test input loadavg
loadavg
not ok 6 - XFAIL: loadavg # TODO - If test is not an expected failure, please remove loadavg from list in /tmp/pc/lib/ovis-ldms/ldms-static-test-bypass
./ldms-run-static-tests.test: line 32: ldmstest/test.loadavg.log: No such file or directory
./ldms-run-static-tests.test: line 33: ldmstest/test.loadavg.log: No such file or directory
FAIL: cannot read test input procinterrupts
procinterrupts
not ok 7 - XFAIL: procinterrupts # TODO - If test is not an expected failure, please remove procinterrupts from list in /tmp/pc/lib/ovis-ldms/ldms-static-test-bypass
./ldms-run-static-tests.test: line 32: ldmstest/test.procinterrupts.log: No such file or directory
./ldms-run-static-tests.test: line 33: ldmstest/test.procinterrupts.log: No such file or directory
FAIL: cannot read test input procstat
procstat
not ok 8 - XFAIL: procstat # TODO - If test is not an expected failure, please remove procstat from list in /tmp/pc/lib/ovis-ldms/ldms-static-test-bypass
./ldms-run-static-tests.test: line 32: ldmstest/test.procstat.log: No such file or directory
./ldms-run-static-tests.test: line 33: ldmstest/test.procstat.log: No such file or directory
FAIL: cannot read test input procnetdev
procnetdev
not ok 9 - XFAIL: procnetdev # TODO - If test is not an expected failure, please remove procnetdev from list in /tmp/pc/lib/ovis-ldms/ldms-static-test-bypass
./ldms-run-static-tests.test: line 32: ldmstest/test.procnetdev.log: No such file or directory
./ldms-run-static-tests.test: line 33: ldmstest/test.procnetdev.log: No such file or directory
FAIL: cannot read test input vmstat
vmstat
not ok 10 - XFAIL: vmstat # TODO - If test is not an expected failure, please remove vmstat from list in /tmp/pc/lib/ovis-ldms/ldms-static-test-bypass
./ldms-run-static-tests.test: line 32: ldmstest/test.vmstat.log: No such file or directory
./ldms-run-static-tests.test: line 33: ldmstest/test.vmstat.log: No such file or directory
FAIL: cannot read test input clock
clock
not ok 11 - XFAIL: clock # TODO - If test is not an expected failure, please remove clock from list in /tmp/pc/lib/ovis-ldms/ldms-static-test-bypass
./ldms-run-static-tests.test: line 32: ldmstest/test.clock.log: No such file or directory
./ldms-run-static-tests.test: line 33: ldmstest/test.clock.log: No such file or directory
FAIL: cannot read test input variable
variable
not ok 12 - XFAIL: variable # TODO - If test is not an expected failure, please remove variable from list in /tmp/pc/lib/ovis-ldms/ldms-static-test-bypass
./ldms-run-static-tests.test: line 32: ldmstest/test.variable.log: No such file or directory
./ldms-run-static-tests.test: line 33: ldmstest/test.variable.log: No such file or directory
FAIL: cannot read test input array_example
array_example
not ok 13 - XFAIL: array_example # TODO - If test is not an expected failure, please remove array_example from list in /tmp/pc/lib/ovis-ldms/ldms-static-test-bypass
./ldms-run-static-tests.test: line 32: ldmstest/test.array_example.log: No such file or directory
./ldms-run-static-tests.test: line 33: ldmstest/test.array_example.log: No such file or directory
FAIL: cannot read test input synthetic
synthetic
not ok 14 - XFAIL: synthetic # TODO - If test is not an expected failure, please remove synthetic from list in /tmp/pc/lib/ovis-ldms/ldms-static-test-bypass
./ldms-run-static-tests.test: line 32: ldmstest/test.synthetic.log: No such file or directory
./ldms-run-static-tests.test: line 33: ldmstest/test.synthetic.log: No such file or directory
FAIL: cannot read test input procnfs
procnfs
not ok 15 - XFAIL: procnfs # TODO - If test is not an expected failure, please remove procnfs from list in /tmp/pc/lib/ovis-ldms/ldms-static-test-bypass
./ldms-run-static-tests.test: line 32: ldmstest/test.procnfs.log: No such file or directory
./ldms-run-static-tests.test: line 33: ldmstest/test.procnfs.log: No such file or directory
FAIL: cannot read test input lustre
lustre
not ok 16 - XFAIL: lustre # TODO - If test is not an expected failure, please remove lustre from list in /tmp/pc/lib/ovis-ldms/ldms-static-test-bypass
./ldms-run-static-tests.test: line 32: ldmstest/test.lustre.log: No such file or directory
./ldms-run-static-tests.test: line 33: ldmstest/test.lustre.log: No such file or directory
FAIL: cannot read test input lustre2_client
lustre2_client
not ok 17 - XFAIL: lustre2_client # TODO - If test is not an expected failure, please remove lustre2_client from list in /tmp/pc/lib/ovis-ldms/ldms-static-test-bypass
./ldms-run-static-tests.test: line 32: ldmstest/test.lustre2_client.log: No such file or directory
./ldms-run-static-tests.test: line 33: ldmstest/test.lustre2_client.log: No such file or directory
FAIL: cannot read test input lnet_stats
lnet_stats
not ok 18 - XFAIL: lnet_stats # TODO - If test is not an expected failure, please remove lnet_stats from list in /tmp/pc/lib/ovis-ldms/ldms-static-test-bypass
./ldms-run-static-tests.test: line 32: ldmstest/test.lnet_stats.log: No such file or directory
./ldms-run-static-tests.test: line 33: ldmstest/test.lnet_stats.log: No such file or directory
FAIL: cannot read test input procdiskstats
procdiskstats
not ok 19 - XFAIL: procdiskstats # TODO - If test is not an expected failure, please remove procdiskstats from list in /tmp/pc/lib/ovis-ldms/ldms-static-test-bypass
./ldms-run-static-tests.test: line 32: ldmstest/test.procdiskstats.log: No such file or directory
./ldms-run-static-tests.test: line 33: ldmstest/test.procdiskstats.log: No such file or directory
FAIL: cannot read test input hello_stream
hello_stream
not ok 20 - XFAIL: hello_stream # TODO - If test is not an expected failure, please remove hello_stream from list in /tmp/pc/lib/ovis-ldms/ldms-static-test-bypass
./ldms-run-static-tests.test: line 32: ldmstest/test.hello_stream.log: No such file or directory
./ldms-run-static-tests.test: line 33: ldmstest/test.hello_stream.log: No such file or directory
FAIL: cannot read test input llnl
llnl
not ok 21 - XFAIL: llnl # TODO - If test is not an expected failure, please remove llnl from list in /tmp/pc/lib/ovis-ldms/ldms-static-test-bypass
./ldms-run-static-tests.test: line 32: ldmstest/test.llnl.log: No such file or directory
./ldms-run-static-tests.test: line 33: ldmstest/test.llnl.log: No such file or directory
DONE.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,527,2020-11-20T07:25:25Z,2020-11-20T18:52:46Z,2020-11-23T03:43:07Z,MERGED,True,0,652,1,https://github.com/nichamon,"Remove a generated file, config/tap-driver.sh",1,[],https://github.com/ovis-hpc/ovis/pull/527,https://github.com/nichamon,4,https://github.com/ovis-hpc/ovis/pull/527#issuecomment-731295926,"The file is generated by autoconf per macro
AC_REQUIRE_AUX_FILE([tap-driver.sh]) in configure.ac.","@baallan Thanks for testing it out. I tried running the ldms-run-static-test.test script but got no result. By the way, how to run the script, I read man pages but still have no idea what <input_file> referred in the man page should be.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,527,2020-11-20T07:25:25Z,2020-11-20T18:52:46Z,2020-11-23T03:43:07Z,MERGED,True,0,652,1,https://github.com/nichamon,"Remove a generated file, config/tap-driver.sh",1,[],https://github.com/ovis-hpc/ovis/pull/527,https://github.com/nichamon,5,https://github.com/ovis-hpc/ovis/pull/527#issuecomment-731298078,"The file is generated by autoconf per macro
AC_REQUIRE_AUX_FILE([tap-driver.sh]) in configure.ac.","@baallan When I tried running ./ldms-run-static-tests.test -l, I got a syntax error message at the last line.
./ldms-run-static-tests.test: 4: /opt/ovis/lib/ovis-ldms/ldms-static-test-list.sh: testlist[0]=meminfo: not found
./ldms-run-static-tests.test: 6: /opt/ovis/lib/ovis-ldms/ldms-static-test-list.sh: @ENABLE_PAPI_SAMPLER_TRUE@: not found
./ldms-run-static-tests.test: 7: /opt/ovis/lib/ovis-ldms/ldms-static-test-list.sh: @ENABLE_SYSPAPI_SAMPLER_TRUE@: not found
./ldms-run-static-tests.test: 11: /opt/ovis/lib/ovis-ldms/ldms-static-test-list.sh: testlist[0]=generic_sampler: not found
./ldms-run-static-tests.test: 14: /opt/ovis/lib/ovis-ldms/ldms-static-test-list.sh: @ENABLE_RAPL_TRUE@: not found
./ldms-run-static-tests.test: 18: /opt/ovis/lib/ovis-ldms/ldms-static-test-list.sh: testlist[0]=tsampler: not found
./ldms-run-static-tests.test: 19: /opt/ovis/lib/ovis-ldms/ldms-static-test-list.sh: testlist[0]=hfclock: not found
./ldms-run-static-tests.test: 20: /opt/ovis/lib/ovis-ldms/ldms-static-test-list.sh: testlist[0]=dstat: not found
./ldms-run-static-tests.test: 22: /opt/ovis/lib/ovis-ldms/ldms-static-test-list.sh: testlist[0]=loadavg: not found
./ldms-run-static-tests.test: 23: /opt/ovis/lib/ovis-ldms/ldms-static-test-list.sh: testlist[0]=procinterrupts: not found
./ldms-run-static-tests.test: 24: /opt/ovis/lib/ovis-ldms/ldms-static-test-list.sh: testlist[0]=procstat: not found
./ldms-run-static-tests.test: 25: /opt/ovis/lib/ovis-ldms/ldms-static-test-list.sh: testlist[0]=procnetdev: not found
./ldms-run-static-tests.test: 26: /opt/ovis/lib/ovis-ldms/ldms-static-test-list.sh: testlist[0]=vmstat: not found
./ldms-run-static-tests.test: 27: /opt/ovis/lib/ovis-ldms/ldms-static-test-list.sh: testlist[0]=clock: not found
./ldms-run-static-tests.test: 29: /opt/ovis/lib/ovis-ldms/ldms-static-test-list.sh: testlist[0]=variable: not found
./ldms-run-static-tests.test: 30: /opt/ovis/lib/ovis-ldms/ldms-static-test-list.sh: testlist[0]=array_example: not found
./ldms-run-static-tests.test: 31: /opt/ovis/lib/ovis-ldms/ldms-static-test-list.sh: testlist[0]=synthetic: not found
./ldms-run-static-tests.test: 32: /opt/ovis/lib/ovis-ldms/ldms-static-test-list.sh: testlist[0]=procnfs: not found
./ldms-run-static-tests.test: 33: /opt/ovis/lib/ovis-ldms/ldms-static-test-list.sh: testlist[0]=lustre: not found
./ldms-run-static-tests.test: 34: /opt/ovis/lib/ovis-ldms/ldms-static-test-list.sh: testlist[0]=lustre2_client: not found
./ldms-run-static-tests.test: 35: /opt/ovis/lib/ovis-ldms/ldms-static-test-list.sh: testlist[0]=lnet_stats: not found
./ldms-run-static-tests.test: 40: /opt/ovis/lib/ovis-ldms/ldms-static-test-list.sh: testlist[0]=procdiskstats: not found
./ldms-run-static-tests.test: 42: /opt/ovis/lib/ovis-ldms/ldms-static-test-list.sh: testlist[0]=hello_stream: not found
./ldms-run-static-tests.test: 43: /opt/ovis/lib/ovis-ldms/ldms-static-test-list.sh: testlist[0]=llnl: not found
./ldms-run-static-tests.test: 18: function: not found
./ldms-run-static-tests.test: usage:
./ldms-run-static-tests.test -h
./ldms-run-static-tests.test -l
        -h produces help message
        -l produces list of enabled plugins
See man ldms-static-test and run-static-tests.sh for details.
./ldms-run-static-tests.test: 27: Syntax error: ""}"" unexpected

Could you give some pointers on how to run the static tests? Thanks!
P.S. If you want, I could create an issue for this so that we won't flood this PR with irrelevant discussion.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,527,2020-11-20T07:25:25Z,2020-11-20T18:52:46Z,2020-11-23T03:43:07Z,MERGED,True,0,652,1,https://github.com/nichamon,"Remove a generated file, config/tap-driver.sh",1,[],https://github.com/ovis-hpc/ovis/pull/527,https://github.com/baallan,6,https://github.com/ovis-hpc/ovis/pull/527#issuecomment-731312023,"The file is generated by autoconf per macro
AC_REQUIRE_AUX_FILE([tap-driver.sh]) in configure.ac.","@nichamon merging this should be fine. It looks like the other problems with ./ldms-run-static-tests.test are from unrelated changes to configure.ac that simplified some of the configure options.
One of our goals (not yet quite possible) is to extend the PR/pull testing to include 'make check' and 'make installcheck' with all the generic test configure args enabled. (similar to the build checks you're adding/have added recently).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,527,2020-11-20T07:25:25Z,2020-11-20T18:52:46Z,2020-11-23T03:43:07Z,MERGED,True,0,652,1,https://github.com/nichamon,"Remove a generated file, config/tap-driver.sh",1,[],https://github.com/ovis-hpc/ovis/pull/527,https://github.com/tom95858,7,https://github.com/ovis-hpc/ovis/pull/527#issuecomment-731341668,"The file is generated by autoconf per macro
AC_REQUIRE_AUX_FILE([tap-driver.sh]) in configure.ac.","@baallan, @nichamon I think there are parallel efforts going on here. There is a repository ./ldms-test that has containerized unit, functional, and system level regression tests. We should coordinate on expanding those test cases instead of creating/maintaining a separate test infrastructure.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,527,2020-11-20T07:25:25Z,2020-11-20T18:52:46Z,2020-11-23T03:43:07Z,MERGED,True,0,652,1,https://github.com/nichamon,"Remove a generated file, config/tap-driver.sh",1,[],https://github.com/ovis-hpc/ovis/pull/527,https://github.com/baallan,8,https://github.com/ovis-hpc/ovis/pull/527#issuecomment-731358799,"The file is generated by autoconf per macro
AC_REQUIRE_AUX_FILE([tap-driver.sh]) in configure.ac.","@tom95858 we should get a meeting and some presentations and some planning on the calendar after the holiday.
The two test ""infrastructures"", if you want to call them that, are (thus far) for meeting different (perhaps slightly overlapping) requirement sets.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,528,2020-11-20T07:41:11Z,2020-12-11T02:16:34Z,2020-12-11T02:16:34Z,CLOSED,False,3,2,1,https://github.com/narategithub,Fix slurm configure,2,[],https://github.com/ovis-hpc/ovis/pull/528,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/528,"This pull request addresses the following issues.
When Slurm is not installed in a system default directory (/usr), and --with-slurm=<SLURM_PREFIX> is given to the configure script, the build system will silently not build plugins that depend on slurm because:

SLURM_CFLAGS includes the installation prefix (withval) instead of prefix/include (withval/include). have_slurm will end up being no.
There is a typo in the condition checking before printing an error that makes it not printing the error.

In addition, SLURM_CFLAGS is not exported to automake -- making the build failed later even though 1 and 2 is fixed.
So far, I have not experienced this because ovishpc/ovis-centos-build dockerhub image has slurm installed in the default system directories. Building on a system that has slurm installed in /opt/slurm exposes the issues.","This pull request addresses the following issues.
When Slurm is not installed in a system default directory (/usr), and --with-slurm=<SLURM_PREFIX> is given to the configure script, the build system will silently not build plugins that depend on slurm because:

SLURM_CFLAGS includes the installation prefix (withval) instead of prefix/include (withval/include). have_slurm will end up being no.
There is a typo in the condition checking before printing an error that makes it not printing the error.

In addition, SLURM_CFLAGS is not exported to automake -- making the build failed later even though 1 and 2 is fixed.
So far, I have not experienced this because ovishpc/ovis-centos-build dockerhub image has slurm installed in the default system directories. Building on a system that has slurm installed in /opt/slurm exposes the issues.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,528,2020-11-20T07:41:11Z,2020-12-11T02:16:34Z,2020-12-11T02:16:34Z,CLOSED,False,3,2,1,https://github.com/narategithub,Fix slurm configure,2,[],https://github.com/ovis-hpc/ovis/pull/528,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/528#issuecomment-731348191,"This pull request addresses the following issues.
When Slurm is not installed in a system default directory (/usr), and --with-slurm=<SLURM_PREFIX> is given to the configure script, the build system will silently not build plugins that depend on slurm because:

SLURM_CFLAGS includes the installation prefix (withval) instead of prefix/include (withval/include). have_slurm will end up being no.
There is a typo in the condition checking before printing an error that makes it not printing the error.

In addition, SLURM_CFLAGS is not exported to automake -- making the build failed later even though 1 and 2 is fixed.
So far, I have not experienced this because ovishpc/ovis-centos-build dockerhub image has slurm installed in the default system directories. Building on a system that has slurm installed in /opt/slurm exposes the issues.","Hi @narategithub, This fix is already in post-ga-fixes branch. I'll post this soon for review.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,528,2020-11-20T07:41:11Z,2020-12-11T02:16:34Z,2020-12-11T02:16:34Z,CLOSED,False,3,2,1,https://github.com/narategithub,Fix slurm configure,2,[],https://github.com/ovis-hpc/ovis/pull/528,https://github.com/narategithub,3,https://github.com/ovis-hpc/ovis/pull/528#issuecomment-731352362,"This pull request addresses the following issues.
When Slurm is not installed in a system default directory (/usr), and --with-slurm=<SLURM_PREFIX> is given to the configure script, the build system will silently not build plugins that depend on slurm because:

SLURM_CFLAGS includes the installation prefix (withval) instead of prefix/include (withval/include). have_slurm will end up being no.
There is a typo in the condition checking before printing an error that makes it not printing the error.

In addition, SLURM_CFLAGS is not exported to automake -- making the build failed later even though 1 and 2 is fixed.
So far, I have not experienced this because ovishpc/ovis-centos-build dockerhub image has slurm installed in the default system directories. Building on a system that has slurm installed in /opt/slurm exposes the issues.",@tom95858 Gotcha. I'll close this when patches from post-ga-fixes arr posted. Thanks!,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,528,2020-11-20T07:41:11Z,2020-12-11T02:16:34Z,2020-12-11T02:16:34Z,CLOSED,False,3,2,1,https://github.com/narategithub,Fix slurm configure,2,[],https://github.com/ovis-hpc/ovis/pull/528,https://github.com/tom95858,4,https://github.com/ovis-hpc/ovis/pull/528#issuecomment-742920541,"This pull request addresses the following issues.
When Slurm is not installed in a system default directory (/usr), and --with-slurm=<SLURM_PREFIX> is given to the configure script, the build system will silently not build plugins that depend on slurm because:

SLURM_CFLAGS includes the installation prefix (withval) instead of prefix/include (withval/include). have_slurm will end up being no.
There is a typo in the condition checking before printing an error that makes it not printing the error.

In addition, SLURM_CFLAGS is not exported to automake -- making the build failed later even though 1 and 2 is fixed.
So far, I have not experienced this because ovishpc/ovis-centos-build dockerhub image has slurm installed in the default system directories. Building on a system that has slurm installed in /opt/slurm exposes the issues.",I believe this is fixed in OVIS-4 top of tree,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,529,2020-11-24T05:28:45Z,2020-11-24T16:14:00Z,2022-01-18T04:10:17Z,MERGED,True,5,4,1,https://github.com/nichamon,Make the 4.3.3 compatibility test (4.3.3-compat-test.yaml) more robust,1,[],https://github.com/ovis-hpc/ovis/pull/529,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/529,"Change the update offset of the 1st-level aggregator to be 100 ms
ealier than that of the 2nd-level aggregator
Make the test sleep between starting the sampler daemon and starting
the 1st-level aggregator
Fix a typo that causes the test to start ldms_ls (>v4.3.3) instead of ldms_ls (v4.3.3)","Change the update offset of the 1st-level aggregator to be 100 ms
ealier than that of the 2nd-level aggregator
Make the test sleep between starting the sampler daemon and starting
the 1st-level aggregator
Fix a typo that causes the test to start ldms_ls (>v4.3.3) instead of ldms_ls (v4.3.3)",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,530,2020-11-24T18:17:05Z,2020-12-11T02:15:33Z,2020-12-11T02:15:33Z,MERGED,True,568,164,2,https://github.com/narategithub,zap_rdma omnipath workaround,4,[],https://github.com/ovis-hpc/ovis/pull/530,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/530,omnipath evidently does not deliver all completions. This series of commits contain zap_rdma workaround for omnipath and zap_rdma debug log improvements introduced when debugging zap_rdma over omnipath.,omnipath evidently does not deliver all completions. This series of commits contain zap_rdma workaround for omnipath and zap_rdma debug log improvements introduced when debugging zap_rdma over omnipath.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,530,2020-11-24T18:17:05Z,2020-12-11T02:15:33Z,2020-12-11T02:15:33Z,MERGED,True,568,164,2,https://github.com/narategithub,zap_rdma omnipath workaround,4,[],https://github.com/ovis-hpc/ovis/pull/530,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/530#issuecomment-735312645,omnipath evidently does not deliver all completions. This series of commits contain zap_rdma workaround for omnipath and zap_rdma debug log improvements introduced when debugging zap_rdma over omnipath.,"I would like this to be tested at ""scale"" on real Infiniband (i.e. not Pathscale), and iWarp. This change is fairly large and I'm concerned that we might regress OFA compliant providers.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,530,2020-11-24T18:17:05Z,2020-12-11T02:15:33Z,2020-12-11T02:15:33Z,MERGED,True,568,164,2,https://github.com/narategithub,zap_rdma omnipath workaround,4,[],https://github.com/ovis-hpc/ovis/pull/530,https://github.com/narategithub,3,https://github.com/ovis-hpc/ovis/pull/530#issuecomment-735504508,omnipath evidently does not deliver all completions. This series of commits contain zap_rdma workaround for omnipath and zap_rdma debug log improvements introduced when debugging zap_rdma over omnipath.,Sure.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,530,2020-11-24T18:17:05Z,2020-12-11T02:15:33Z,2020-12-11T02:15:33Z,MERGED,True,568,164,2,https://github.com/narategithub,zap_rdma omnipath workaround,4,[],https://github.com/ovis-hpc/ovis/pull/530,https://github.com/narategithub,4,https://github.com/ovis-hpc/ovis/pull/530#issuecomment-735998415,omnipath evidently does not deliver all completions. This series of commits contain zap_rdma workaround for omnipath and zap_rdma debug log improvements introduced when debugging zap_rdma over omnipath.,@tom95858 I experienced a dead lock inside librdmacm.so:rdma_destroy_id() on both iWarp and IB hardware. I'm closing this pull request + debugging it. I'll re-open this again when it passed the scale test.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,530,2020-11-24T18:17:05Z,2020-12-11T02:15:33Z,2020-12-11T02:15:33Z,MERGED,True,568,164,2,https://github.com/narategithub,zap_rdma omnipath workaround,4,[],https://github.com/ovis-hpc/ovis/pull/530,https://github.com/narategithub,5,https://github.com/ovis-hpc/ovis/pull/530#issuecomment-740755555,omnipath evidently does not deliver all completions. This series of commits contain zap_rdma workaround for omnipath and zap_rdma debug log improvements introduced when debugging zap_rdma over omnipath.,"This has passed a sampler+L1 flap test at scale on Mellanox IB and Chelsio iWarp hardware.
Still waiting for omnipath test results.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,530,2020-11-24T18:17:05Z,2020-12-11T02:15:33Z,2020-12-11T02:15:33Z,MERGED,True,568,164,2,https://github.com/narategithub,zap_rdma omnipath workaround,4,[],https://github.com/ovis-hpc/ovis/pull/530,https://github.com/narategithub,6,https://github.com/ovis-hpc/ovis/pull/530#issuecomment-741889007,omnipath evidently does not deliver all completions. This series of commits contain zap_rdma workaround for omnipath and zap_rdma debug log improvements introduced when debugging zap_rdma over omnipath.,"@tom95858 From the latest logs that @baallan sent to me, I believe this pull request is good to go. The passive-side (samplers) memory leak that happened in both zap_rdma and zap_sock cases are a separate issue that is addressed in #548.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,531,2020-11-24T18:18:25Z,2020-11-29T00:58:49Z,2020-12-08T03:27:50Z,MERGED,True,0,12,1,https://github.com/narategithub,Fix zap ep leak in ldms xprt,1,[],https://github.com/ovis-hpc/ovis/pull/531,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/531,"The zap references taken when LDMS xprt sends a lookup message or a dir
message are put back when the corresponding reply messages have
received. However, the reply messages may never arrive because of the
disconnection and zap endpoints are leaked. These zap references before
send are not necessary and shall be removed.","The zap references taken when LDMS xprt sends a lookup message or a dir
message are put back when the corresponding reply messages have
received. However, the reply messages may never arrive because of the
disconnection and zap endpoints are leaked. These zap references before
send are not necessary and shall be removed.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,532,2020-11-25T07:42:27Z,2020-12-02T02:09:29Z,2022-01-18T04:10:19Z,MERGED,True,11,6,1,https://github.com/nichamon,Fix zap.c so that LDMS processes can run as daemons on Ubuntu20.04,1,[],https://github.com/ovis-hpc/ovis/pull/532,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/532,"When an LDMSD starts on Ubuntu20.04 as a daemon, the process stuck after
the demonization process starts. It turns out that it is a deadlock when
glibc is handling the child hook registered in zap.c by calling
pthead_atfork(). In zap.c, cs_init() calls pthread_atfork() and
registers cs_init() itself as the child hook handler.","When an LDMSD starts on Ubuntu20.04 as a daemon, the process stuck after
the demonization process starts. It turns out that it is a deadlock when
glibc is handling the child hook registered in zap.c by calling
pthead_atfork(). In zap.c, cs_init() calls pthread_atfork() and
registers cs_init() itself as the child hook handler.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,532,2020-11-25T07:42:27Z,2020-12-02T02:09:29Z,2022-01-18T04:10:19Z,MERGED,True,11,6,1,https://github.com/nichamon,Fix zap.c so that LDMS processes can run as daemons on Ubuntu20.04,1,[],https://github.com/ovis-hpc/ovis/pull/532,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/532#issuecomment-733529577,"When an LDMSD starts on Ubuntu20.04 as a daemon, the process stuck after
the demonization process starts. It turns out that it is a deadlock when
glibc is handling the child hook registered in zap.c by calling
pthead_atfork(). In zap.c, cs_init() calls pthread_atfork() and
registers cs_init() itself as the child hook handler.","@tom95858 Some background ... I upgraded my desktop to Ubuntu-20.04. When I run LDMSD from the OVIS-4 branch, ldmsd didn't start properly. I installed the glibc debugging symbols so I can see the steps in the gdb session. I also compared the source code of glibc in Ubuntu-20.04 and Ubuntu-18.04 (The version I had before I upgraded my machine).
The problem isn't just on my desktop. I saw the same problem on docker containers based on Ubuntu-20.04.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,532,2020-11-25T07:42:27Z,2020-12-02T02:09:29Z,2022-01-18T04:10:19Z,MERGED,True,11,6,1,https://github.com/nichamon,Fix zap.c so that LDMS processes can run as daemons on Ubuntu20.04,1,[],https://github.com/ovis-hpc/ovis/pull/532,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/532#issuecomment-734474429,"When an LDMSD starts on Ubuntu20.04 as a daemon, the process stuck after
the demonization process starts. It turns out that it is a deadlock when
glibc is handling the child hook registered in zap.c by calling
pthead_atfork(). In zap.c, cs_init() calls pthread_atfork() and
registers cs_init() itself as the child hook handler.",There are more problems with Ubuntu 20.04. I'm closing this pull request and will open a new one when I sort everything out.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,534,2020-11-30T13:04:53Z,2020-12-11T02:14:34Z,2021-06-10T21:38:42Z,MERGED,True,1490,311,18,https://github.com/tom95858,Various fixes to the OVIS-4 GA,17,[],https://github.com/ovis-hpc/ovis/pull/534,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/534,"These fixes resolve build, transport, sampler and ldmsd issues with the OVIS-4 GA release","These fixes resolve build, transport, sampler and ldmsd issues with the OVIS-4 GA release",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,534,2020-11-30T13:04:53Z,2020-12-11T02:14:34Z,2021-06-10T21:38:42Z,MERGED,True,1490,311,18,https://github.com/tom95858,Various fixes to the OVIS-4 GA,17,[],https://github.com/ovis-hpc/ovis/pull/534,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/534#issuecomment-735774385,"These fixes resolve build, transport, sampler and ldmsd issues with the OVIS-4 GA release","@morrone, @baallan: could you guys please take a look at this. The change is large and overlaps with areas that you are involved with.
If you get the time to pull, build and test that would be greatly appreciated.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,534,2020-11-30T13:04:53Z,2020-12-11T02:14:34Z,2021-06-10T21:38:42Z,MERGED,True,1490,311,18,https://github.com/tom95858,Various fixes to the OVIS-4 GA,17,[],https://github.com/ovis-hpc/ovis/pull/534,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/534#issuecomment-735864483,"These fixes resolve build, transport, sampler and ldmsd issues with the OVIS-4 GA release",@tom95858 will try to do this for cts1x and stria by wednesday.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,534,2020-11-30T13:04:53Z,2020-12-11T02:14:34Z,2021-06-10T21:38:42Z,MERGED,True,1490,311,18,https://github.com/tom95858,Various fixes to the OVIS-4 GA,17,[],https://github.com/ovis-hpc/ovis/pull/534,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/534#issuecomment-735907544,"These fixes resolve build, transport, sampler and ldmsd issues with the OVIS-4 GA release","@tom95858 do I need to also apply any of the following when testing this:
#497 #499 #530 #532, particularly 530?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,534,2020-11-30T13:04:53Z,2020-12-11T02:14:34Z,2021-06-10T21:38:42Z,MERGED,True,1490,311,18,https://github.com/tom95858,Various fixes to the OVIS-4 GA,17,[],https://github.com/ovis-hpc/ovis/pull/534,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/534#issuecomment-736754409,"These fixes resolve build, transport, sampler and ldmsd issues with the OVIS-4 GA release","@tom95858 do I need to also apply any of the following when testing this:


#497 - no
#499 - no
#530 - yes, but I believe that @narategithub  is refactoring this due to some issues he found on IB and iWARP
#532 - no",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,534,2020-11-30T13:04:53Z,2020-12-11T02:14:34Z,2021-06-10T21:38:42Z,MERGED,True,1490,311,18,https://github.com/tom95858,Various fixes to the OVIS-4 GA,17,[],https://github.com/ovis-hpc/ovis/pull/534,https://github.com/baallan,6,https://github.com/ovis-hpc/ovis/pull/534#issuecomment-737553596,"These fixes resolve build, transport, sampler and ldmsd issues with the OVIS-4 GA release","@tom95858 @narategithub I'm testing the following single-node, multidaemon scenario for sock transport (centos7):
Create N-L0s. Create P-L1s, each aggregating all L0s. Create 1 L2 aggregating from all L1s. (yes, expecting redundant sets handling).
Flap the L0s. No evident leak of FDs as determined with ls proc/pid/fd from L1 or L2.
Flap the L1s. Evident leak of socket FDs as determined with ls proc/pid/fd from L2, no apparent fd leak from L0s.
Attaching logs of ls (l2.txt.tar.gz) and log of L2 (1.txt.gz).
L2.txt.tar.gz
1.txt.gz
just in case of interest, the test driver code is:
# stop L1s and restart nflap times
for nf in $(seq 1 $NFLAP); do
        KILL_LDMSD $l_ones
        SLEEP 2
        FILECNT_LDMSD 1 3
        LDMSD -s 1000 -c -P serial.producer,$samplers_csv $l_ones
        SLEEP 5
        FILECNT_LDMSD 1 2 3
done

and N=16, P=4 (sampler/L1 counts)",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,534,2020-11-30T13:04:53Z,2020-12-11T02:14:34Z,2021-06-10T21:38:42Z,MERGED,True,1490,311,18,https://github.com/tom95858,Various fixes to the OVIS-4 GA,17,[],https://github.com/ovis-hpc/ovis/pull/534,https://github.com/tom95858,7,https://github.com/ovis-hpc/ovis/pull/534#issuecomment-737993456,"These fixes resolve build, transport, sampler and ldmsd issues with the OVIS-4 GA release","Hi @baallan,

@tom95858 @narategithub I'm testing the following single-node, multidaemon scenario for sock transport (centos7):
Create N-L0s. Create P-L1s, each aggregating all L0s. Create 1 L2 aggregating from all L1s. (yes, expecting redundant sets handling).
Flap the L0s. No evident leak of FDs as determined with ls proc/pid/fd from L1 or L2.
Flap the L1s. Evident leak of socket FDs as determined with ls proc/pid/fd from L2, no apparent fd leak from L0s.

Thank you for performing this test. This is not a supported configuration and the daemon is leaking where it would once just assert. We'll take a look at this, but I don't consider it a stop-ship issue.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,534,2020-11-30T13:04:53Z,2020-12-11T02:14:34Z,2021-06-10T21:38:42Z,MERGED,True,1490,311,18,https://github.com/tom95858,Various fixes to the OVIS-4 GA,17,[],https://github.com/ovis-hpc/ovis/pull/534,https://github.com/tom95858,8,https://github.com/ovis-hpc/ovis/pull/534#issuecomment-737994074,"These fixes resolve build, transport, sampler and ldmsd issues with the OVIS-4 GA release","@baallan, could you please repeat the test, but with a supported configuration? I am running this test on Voltrino and don't see the issue.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,534,2020-11-30T13:04:53Z,2020-12-11T02:14:34Z,2021-06-10T21:38:42Z,MERGED,True,1490,311,18,https://github.com/tom95858,Various fixes to the OVIS-4 GA,17,[],https://github.com/ovis-hpc/ovis/pull/534,https://github.com/tom95858,9,https://github.com/ovis-hpc/ovis/pull/534#issuecomment-738001247,"These fixes resolve build, transport, sampler and ldmsd issues with the OVIS-4 GA release","Hi @baallan,  I think what you are seeing are sockets that are in the CLOSE_WAIT state (according to my testing of this). This occurs when the peer fails to respond to the final TCP FIN that is occurring because the peer was killed. The TCP protocol will wait 2MSL (two trips around the planet) which is a few minutes before cleaning up that fd. You can confirm this by using lsof -p  instead of ls /proc//fd | wc -l.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,534,2020-11-30T13:04:53Z,2020-12-11T02:14:34Z,2021-06-10T21:38:42Z,MERGED,True,1490,311,18,https://github.com/tom95858,Various fixes to the OVIS-4 GA,17,[],https://github.com/ovis-hpc/ovis/pull/534,https://github.com/baallan,10,https://github.com/ovis-hpc/ovis/pull/534#issuecomment-738207020,"These fixes resolve build, transport, sampler and ldmsd issues with the OVIS-4 GA release","@tom95858 are the attached from netstat and lsof consistent with your theory?
I'm not seeing any CLOSE_WAIT states, but if the expected close sequence is order minutes maybe it hasn't gotten to close_wait yet?
ldmsd.pid.1.ns.1607016759.gz
ldmsd.pid.1.lsof.1607016759.gz
Also, can you define what you mean here by 'supported configuration'? A cts1/toss machine? else?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,535,2020-11-30T17:59:43Z,2020-12-11T02:17:05Z,2020-12-11T02:17:05Z,MERGED,True,3,3,1,https://github.com/baallan,fix uninit var messages so Wall/Werror works for ldms_jobid.c,1,[],https://github.com/ovis-hpc/ovis/pull/535,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/535,"The variables being additionally initialized are actually guarded by corresponding
*_is_set bools, but it would take IPA for gcc to notice and prevent the extraneous warning.","The variables being additionally initialized are actually guarded by corresponding
*_is_set bools, but it would take IPA for gcc to notice and prevent the extraneous warning.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,536,2020-11-30T20:34:28Z,2020-12-11T02:18:30Z,2020-12-11T02:18:30Z,MERGED,True,2,0,1,https://github.com/baallan,fix information leak in sock plugin,1,[],https://github.com/ovis-hpc/ovis/pull/536,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/536,"struct sock_msg_read_resp has an alignment hole after 'status'.
This change fixes the information leak to network of that hole (memset)
and the uninitialized dst_ptr space.","struct sock_msg_read_resp has an alignment hole after 'status'.
This change fixes the information leak to network of that hole (memset)
and the uninitialized dst_ptr space.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,536,2020-11-30T20:34:28Z,2020-12-11T02:18:30Z,2020-12-11T02:18:30Z,MERGED,True,2,0,1,https://github.com/baallan,fix information leak in sock plugin,1,[],https://github.com/ovis-hpc/ovis/pull/536,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/536#issuecomment-736821125,"struct sock_msg_read_resp has an alignment hole after 'status'.
This change fixes the information leak to network of that hole (memset)
and the uninitialized dst_ptr space.","@tom95858 apparently I can't request you review this PR with the web ui.
Don't know if something about github is currently broken or I just fell off some privilege list.
In any case, found a minimalist way to stop one of the information leaks in sock and made this pr.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,537,2020-11-30T22:11:43Z,2022-04-19T17:11:03Z,2022-04-19T17:11:03Z,CLOSED,False,20,9,2,https://github.com/baallan,add define for sampler base attributes.,1,[],https://github.com/ovis-hpc/ovis/pull/537,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/537,"This lets plugins apply attribute config filters without duplicating
a string list that can get out of date as the base evolves.
It also documents the list in code form instead of comments.
The list is the union of the attributes actually processed
in sampler_base.c and the ones reserved in the documentation
of sampler_base.h.","This lets plugins apply attribute config filters without duplicating
a string list that can get out of date as the base evolves.
It also documents the list in code form instead of comments.
The list is the union of the attributes actually processed
in sampler_base.c and the ones reserved in the documentation
of sampler_base.h.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,537,2020-11-30T22:11:43Z,2022-04-19T17:11:03Z,2022-04-19T17:11:03Z,CLOSED,False,20,9,2,https://github.com/baallan,add define for sampler base attributes.,1,[],https://github.com/ovis-hpc/ovis/pull/537,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/537#issuecomment-742972329,"This lets plugins apply attribute config filters without duplicating
a string list that can get out of date as the base evolves.
It also documents the list in code form instead of comments.
The list is the union of the attributes actually processed
in sampler_base.c and the ones reserved in the documentation
of sampler_base.h.",@tom95858 @narategithub I need this merged to sustainably remove cloned code in dstat.c  and avoid creating similar code in other samplers.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,537,2020-11-30T22:11:43Z,2022-04-19T17:11:03Z,2022-04-19T17:11:03Z,CLOSED,False,20,9,2,https://github.com/baallan,add define for sampler base attributes.,1,[],https://github.com/ovis-hpc/ovis/pull/537,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/537#issuecomment-744103259,"This lets plugins apply attribute config filters without duplicating
a string list that can get out of date as the base evolves.
It also documents the list in code form instead of comments.
The list is the union of the attributes actually processed
in sampler_base.c and the ones reserved in the documentation
of sampler_base.h.","@baallan, The way this is coded, it duplicates the string list (if not the string constant itself, which is compiler optimization dependent).
Aren't these options processed the sampler_base code? Why is your dstat sampler doing with these values that isn't done within sampler base?
That said, it I can see how it would be useful to know what attributes are handled in sampler_base; if for no other reason than to avoid collisions. But to do that you would export a global array of strings, not a #define of string constants that are replicated everywhere they are used.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,537,2020-11-30T22:11:43Z,2022-04-19T17:11:03Z,2022-04-19T17:11:03Z,CLOSED,False,20,9,2,https://github.com/baallan,add define for sampler base attributes.,1,[],https://github.com/ovis-hpc/ovis/pull/537,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/537#issuecomment-744523715,"This lets plugins apply attribute config filters without duplicating
a string list that can get out of date as the base evolves.
It also documents the list in code form instead of comments.
The list is the union of the attributes actually processed
in sampler_base.c and the ones reserved in the documentation
of sampler_base.h.","@tom95858 The question that needs to be answered (for admin-friendliness) by each sampler config() function is:
""Is there an option that we don't recognize?"" (e.g. spelling errors, retired formerly deprecated options).
There are multiple ways to crack that nut. It would be a mere matter of programming to add use of the plugattr checker routines into sampler base and have the samplers pass their list of sampler-specific attributes into the base, have the base merge the lists and do the check.  But if we're counting every string constant, then we also need to find a new approach to log statements that doesn't blow up the global string list.
Since my understanding is that there's a major refactor of sampler_base coming anyway, I went with the least intrusive solution for now. But if we can do something that is more directionally correct, that's acceptable. I would like to see nearly all of sampler_base become more ""mix in""  (as is the case with the perm/uid/gid auth config function)  than strict ""OO"", if your aim is to strictly minimize things like the size of the global string constants table.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,537,2020-11-30T22:11:43Z,2022-04-19T17:11:03Z,2022-04-19T17:11:03Z,CLOSED,False,20,9,2,https://github.com/baallan,add define for sampler base attributes.,1,[],https://github.com/ovis-hpc/ovis/pull/537,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/537#issuecomment-744592042,"This lets plugins apply attribute config filters without duplicating
a string list that can get out of date as the base evolves.
It also documents the list in code form instead of comments.
The list is the union of the attributes actually processed
in sampler_base.c and the ones reserved in the documentation
of sampler_base.h.","@tom95858 The question that needs to be answered (for admin-friendliness) by each sampler config() function is:
""Is there an option that we don't recognize?"" (e.g. spelling errors, retired formerly deprecated options).

The original design point (right or wrong) was to have the configuration option parsing be forgiving, i.e. if the configuration option was not recognized, it would simply be ignored. We are clearly migrating away from that, and I think that is fine.

There are multiple ways to crack that nut. It would be a mere matter of programming to add use of the plugattr checker routines into sampler base and have the samplers pass their list of sampler-specific attributes into the base, have the base merge the lists and do the check.

It seems reasonable to me to allow sampler_base and the dependent sampler check their options separately. If you would like to provide some kind of ""plugattr checker"" service to sampler base that the dependent sampler calls, that seems somewhat reasonable, but to be truly useful, it would need to do data type checking, value checking (range, valid-list), optional vs. required options, etc...

But if we're counting every string constant, then we also need to find a new approach to log statements that doesn't blow up the global string list.

Regarding string duplication, I'm not particularly concerned, I was simply responding to your comment about every sampler ""duplicating"" this list. String constants will get merged if the compiler can tell that they are the same but it can't do so if the strings are part of different targets. So, for example, if sampler_base.c and my_sampler.c are compiled together, the compiler will merge the string constants. If libsampler_base.so and libmy_sampler.so are linked together, the linker will merge them if they have the same symbol name.
That's why I suggested changing your implementation to create a single global array of strings and then every sampler uses that array by name. In this way, every sampler that uses that list will be merged into a single instance by the linker.
All that said, I don't think you need to do any of this. Just let sampler_base check its options and derived samplers check theirs.

Since my understanding is that there's a major refactor of sampler_base coming anyway, I went with the least intrusive solution for now. But if we can do something that is more directionally correct, that's acceptable. I would like to see nearly all of sampler_base become more ""mix in"" (as is the case with the perm/uid/gid auth config function) than strict ""OO"", if your aim is to strictly minimize things like the size of the global string constants table.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,537,2020-11-30T22:11:43Z,2022-04-19T17:11:03Z,2022-04-19T17:11:03Z,CLOSED,False,20,9,2,https://github.com/baallan,add define for sampler base attributes.,1,[],https://github.com/ovis-hpc/ovis/pull/537,https://github.com/baallan,6,https://github.com/ovis-hpc/ovis/pull/537#issuecomment-744594975,"This lets plugins apply attribute config filters without duplicating
a string list that can get out of date as the base evolves.
It also documents the list in code form instead of comments.
The list is the union of the attributes actually processed
in sampler_base.c and the ones reserved in the documentation
of sampler_base.h.","@tom95858 so how would you propose the base check its options and the derived check its options if neither knows the other's option list and the definition of check is: ""is this an attribute I don't recognize as a valid exact spelling match""?
Somewhere, someone has to see the entire valid attribute list, else each party thinks the other parties attributes are invalid.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,537,2020-11-30T22:11:43Z,2022-04-19T17:11:03Z,2022-04-19T17:11:03Z,CLOSED,False,20,9,2,https://github.com/baallan,add define for sampler base attributes.,1,[],https://github.com/ovis-hpc/ovis/pull/537,https://github.com/baallan,7,https://github.com/ovis-hpc/ovis/pull/537#issuecomment-785165400,"This lets plugins apply attribute config filters without duplicating
a string list that can get out of date as the base evolves.
It also documents the list in code form instead of comments.
The list is the union of the attributes actually processed
in sampler_base.c and the ones reserved in the documentation
of sampler_base.h.",@tom95858 so If I change this to a global array as you suggested on 12/14 are you good to merge it?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,538,2020-12-01T00:31:18Z,2020-12-11T15:52:10Z,2020-12-11T15:52:10Z,MERGED,True,11,1,3,https://github.com/baallan,fix ovis_join_buf to match ovis_join behavior,1,[],https://github.com/ovis-hpc/ovis/pull/538,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/538,"also fix leak in test_util.c.
Fixes the lack of proper buf initialization in ovis_join_buf which could also lead to buffer overflow as well as the behavior mismatch.","also fix leak in test_util.c.
Fixes the lack of proper buf initialization in ovis_join_buf which could also lead to buffer overflow as well as the behavior mismatch.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,538,2020-12-01T00:31:18Z,2020-12-11T15:52:10Z,2020-12-11T15:52:10Z,MERGED,True,11,1,3,https://github.com/baallan,fix ovis_join_buf to match ovis_join behavior,1,[],https://github.com/ovis-hpc/ovis/pull/538,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/538#issuecomment-736620942,"also fix leak in test_util.c.
Fixes the lack of proper buf initialization in ovis_join_buf which could also lead to buffer overflow as well as the behavior mismatch.","@narategithub @nichamon The testing is failing immediately on some of the tests with ""GitHub Actions has encountered an internal error when running your job"" and no other information.
Any idea what that means? Did we forget to put money in the meter? I don't see any changes to the action scripts yesterday.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,538,2020-12-01T00:31:18Z,2020-12-11T15:52:10Z,2020-12-11T15:52:10Z,MERGED,True,11,1,3,https://github.com/baallan,fix ovis_join_buf to match ovis_join behavior,1,[],https://github.com/ovis-hpc/ovis/pull/538,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/538#issuecomment-736781139,"also fix leak in test_util.c.
Fixes the lack of proper buf initialization in ovis_join_buf which could also lead to buffer overflow as well as the behavior mismatch.","I've done an empty push to v4_ovis_join_buf_err
git commit --allow-empty -m ""trigger GitHub actions"" ; git push mine v4_ovis_join_buf_err
to refire the checks, since there isn't any apparent web button to do so.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,538,2020-12-01T00:31:18Z,2020-12-11T15:52:10Z,2020-12-11T15:52:10Z,MERGED,True,11,1,3,https://github.com/baallan,fix ovis_join_buf to match ovis_join behavior,1,[],https://github.com/ovis-hpc/ovis/pull/538,https://github.com/nichamon,4,https://github.com/ovis-hpc/ovis/pull/538#issuecomment-736974506,"also fix leak in test_util.c.
Fixes the lack of proper buf initialization in ovis_join_buf which could also lead to buffer overflow as well as the behavior mismatch.","@narategithub @nichamon The testing is failing immediately on some of the tests with ""GitHub Actions has encountered an internal error when running your job"" and no other information.
Any idea what that means? Did we forget to put money in the meter? I don't see any changes to the action scripts yesterday.

Do you remember which test actions the pull request failed? I have seen the compatibility test failed before but it provided the information which condition that caused the failure.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,538,2020-12-01T00:31:18Z,2020-12-11T15:52:10Z,2020-12-11T15:52:10Z,MERGED,True,11,1,3,https://github.com/baallan,fix ovis_join_buf to match ovis_join behavior,1,[],https://github.com/ovis-hpc/ovis/pull/538,https://github.com/nichamon,5,https://github.com/ovis-hpc/ovis/pull/538#issuecomment-736974873,"also fix leak in test_util.c.
Fixes the lack of proper buf initialization in ovis_join_buf which could also lead to buffer overflow as well as the behavior mismatch.","I've done an empty push to v4_ovis_join_buf_err
git commit --allow-empty -m ""trigger GitHub actions"" ; git push mine v4_ovis_join_buf_err
to refire the checks, since there isn't any apparent web button to do so.

Instead of adding an empty commit, you can just do git commit --amend without any changes to the tree. After you push your local branch, github actions will be triggered.
Could you please remove the empty commit? Thanks!",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,538,2020-12-01T00:31:18Z,2020-12-11T15:52:10Z,2020-12-11T15:52:10Z,MERGED,True,11,1,3,https://github.com/baallan,fix ovis_join_buf to match ovis_join behavior,1,[],https://github.com/ovis-hpc/ovis/pull/538,https://github.com/baallan,6,https://github.com/ovis-hpc/ovis/pull/538#issuecomment-737321320,"also fix leak in test_util.c.
Fixes the lack of proper buf initialization in ovis_join_buf which could also lead to buffer overflow as well as the behavior mismatch.","git --amend
refuses to do anything to an unchanged tree, so that doesn't work.
If an empty commit is so annoying, don't we have a squash option on the pull button?

Instead of adding an empty commit, you can just do git commit --amend without any changes to the tree. After you push your local branch, github actions will be triggered.
Could you please remove the empty commit? Thanks!",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,538,2020-12-01T00:31:18Z,2020-12-11T15:52:10Z,2020-12-11T15:52:10Z,MERGED,True,11,1,3,https://github.com/baallan,fix ovis_join_buf to match ovis_join behavior,1,[],https://github.com/ovis-hpc/ovis/pull/538,https://github.com/baallan,7,https://github.com/ovis-hpc/ovis/pull/538#issuecomment-737325689,"also fix leak in test_util.c.
Fixes the lack of proper buf initialization in ovis_join_buf which could also lead to buffer overflow as well as the behavior mismatch.","@narategithub @nichamon The testing is failing immediately on some of the tests with ""GitHub Actions has encountered an internal error when running your job"" and no other information.
Any idea what that means? Did we forget to put money in the meter? I don't see any changes to the action scripts yesterday.

Do you remember which test actions the pull request failed? I have seen the compatibility test failed before but it provided the information which condition that caused the failure.

See https://github.com/ovis-hpc/ovis/actions?page=2
where the failed tests are still listed. It looks like some sort of github service outage: all fails were die at line 1 of the action on 'internal' error.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,538,2020-12-01T00:31:18Z,2020-12-11T15:52:10Z,2020-12-11T15:52:10Z,MERGED,True,11,1,3,https://github.com/baallan,fix ovis_join_buf to match ovis_join behavior,1,[],https://github.com/ovis-hpc/ovis/pull/538,https://github.com/baallan,8,https://github.com/ovis-hpc/ovis/pull/538#issuecomment-737329244,"also fix leak in test_util.c.
Fixes the lack of proper buf initialization in ovis_join_buf which could also lead to buffer overflow as well as the behavior mismatch.","@nichamon git rebase managed to do what amend will not.
So, failing the reappearance of a 'rerun action' button, a method example that will leave us w/out empty commits for github bots is (at the cost of double action execution):
git commit --allow-empty -m ""trigger GitHub actions"" ; git push mine v4_ovis_join_buf_err
(wait for action bots)
git rebase -i HEAD~2;  git push -f mine v4_ovis_join_buf_err
(wait for action bots again)",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,538,2020-12-01T00:31:18Z,2020-12-11T15:52:10Z,2020-12-11T15:52:10Z,MERGED,True,11,1,3,https://github.com/baallan,fix ovis_join_buf to match ovis_join behavior,1,[],https://github.com/ovis-hpc/ovis/pull/538,https://github.com/nichamon,9,https://github.com/ovis-hpc/ovis/pull/538#issuecomment-738597662,"also fix leak in test_util.c.
Fixes the lack of proper buf initialization in ovis_join_buf which could also lead to buffer overflow as well as the behavior mismatch.","@baallan The fail jobs you saw were caused by github internal errors as the message said. You can rerun any jobs that are caused by github internal errors by clicking the 're-run jobs' at the top right above the 3-dots symbol.

git --amend
refuses to do anything to an unchanged tree, so that doesn't work.

I'm not sure what you meant by this. Did git commit --amend return an error? Or you didn't see any changes to the commit. According to the git-commit manpage, git commit --amend actually creates a new commit, so the commit ID will change after the command is executed.  What I did and work before is as follows.
git commit --amend
git push -f origin HEAD
origin is my github repo.
The actions will be triggered.
Anyway the re-run jobs button should be present if the error is github internal error.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,538,2020-12-01T00:31:18Z,2020-12-11T15:52:10Z,2020-12-11T15:52:10Z,MERGED,True,11,1,3,https://github.com/baallan,fix ovis_join_buf to match ovis_join behavior,1,[],https://github.com/ovis-hpc/ovis/pull/538,https://github.com/baallan,10,https://github.com/ovis-hpc/ovis/pull/538#issuecomment-738867281,"also fix leak in test_util.c.
Fixes the lack of proper buf initialization in ovis_join_buf which could also lead to buffer overflow as well as the behavior mismatch.","The only thing presented on the ... button of the failed jobs is ""view 538"" and ""view workflow file"".
If you see more options when you try, please send me a screen shot of where you found them.
There is no other ... button presented to me except per-test-attempt.
In any case, the patch of this issue has passed all the actions and needs to be reviewed or merged.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,538,2020-12-01T00:31:18Z,2020-12-11T15:52:10Z,2020-12-11T15:52:10Z,MERGED,True,11,1,3,https://github.com/baallan,fix ovis_join_buf to match ovis_join behavior,1,[],https://github.com/ovis-hpc/ovis/pull/538,https://github.com/nichamon,11,https://github.com/ovis-hpc/ovis/pull/538#issuecomment-738926315,"also fix leak in test_util.c.
Fixes the lack of proper buf initialization in ovis_join_buf which could also lead to buffer overflow as well as the behavior mismatch.",@baallan Here is the screen shot from the failed job. The other one passed after I clicked thevre-run button.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,538,2020-12-01T00:31:18Z,2020-12-11T15:52:10Z,2020-12-11T15:52:10Z,MERGED,True,11,1,3,https://github.com/baallan,fix ovis_join_buf to match ovis_join behavior,1,[],https://github.com/ovis-hpc/ovis/pull/538,https://github.com/baallan,12,https://github.com/ovis-hpc/ovis/pull/538#issuecomment-742730776,"also fix leak in test_util.c.
Fixes the lack of proper buf initialization in ovis_join_buf which could also lead to buffer overflow as well as the behavior mismatch.","@nichamon can you send me the full url of where you captured that?
The closest I have come is https://github.com/ovis-hpc/ovis/actions/runs/392767526
which for me has no right corner rerun button.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,539,2020-12-01T21:44:18Z,2020-12-11T15:54:56Z,2020-12-11T15:54:56Z,MERGED,True,71,71,27,https://github.com/baallan,remove unsupported udata_default argument from tests,1,[],https://github.com/ovis-hpc/ovis/pull/539,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/539,"the udata_default attribute no longer exists in v4,
This patch removes it from all test scripts that tried to apply it.","the udata_default attribute no longer exists in v4,
This patch removes it from all test scripts that tried to apply it.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,542,2020-12-07T18:25:20Z,2020-12-11T15:50:35Z,2020-12-11T15:50:36Z,MERGED,True,49,50,1,https://github.com/narategithub,Prevent SIGPIPE in zap_sock,1,[],https://github.com/ovis-hpc/ovis/pull/542,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/542,"zap_sock used write() to write messages to the socket. It is possible
to write to a disconnected socket, and when it happened SIGPIPE was
sent to the calling process and the process terminated (default SIGPIPE
action).
Instead of write(), this patch uses send() with MSG_NOSIGNAL to
disable the SIGPIPE on disconnected socket.","zap_sock used write() to write messages to the socket. It is possible
to write to a disconnected socket, and when it happened SIGPIPE was
sent to the calling process and the process terminated (default SIGPIPE
action).
Instead of write(), this patch uses send() with MSG_NOSIGNAL to
disable the SIGPIPE on disconnected socket.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,542,2020-12-07T18:25:20Z,2020-12-11T15:50:35Z,2020-12-11T15:50:36Z,MERGED,True,49,50,1,https://github.com/narategithub,Prevent SIGPIPE in zap_sock,1,[],https://github.com/ovis-hpc/ovis/pull/542,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/542#issuecomment-740096152,"zap_sock used write() to write messages to the socket. It is possible
to write to a disconnected socket, and when it happened SIGPIPE was
sent to the calling process and the process terminated (default SIGPIPE
action).
Instead of write(), this patch uses send() with MSG_NOSIGNAL to
disable the SIGPIPE on disconnected socket.",@tom95858 this shall fix the SIGPIPE issue I asked you in the e-mail.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,542,2020-12-07T18:25:20Z,2020-12-11T15:50:35Z,2020-12-11T15:50:36Z,MERGED,True,49,50,1,https://github.com/narategithub,Prevent SIGPIPE in zap_sock,1,[],https://github.com/ovis-hpc/ovis/pull/542,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/542#issuecomment-740712528,"zap_sock used write() to write messages to the socket. It is possible
to write to a disconnected socket, and when it happened SIGPIPE was
sent to the calling process and the process terminated (default SIGPIPE
action).
Instead of write(), this patch uses send() with MSG_NOSIGNAL to
disable the SIGPIPE on disconnected socket.",I have been seeing the sigpipe in my testing. is this something that is on (or will be added) to the branch I'm testing?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,542,2020-12-07T18:25:20Z,2020-12-11T15:50:35Z,2020-12-11T15:50:36Z,MERGED,True,49,50,1,https://github.com/narategithub,Prevent SIGPIPE in zap_sock,1,[],https://github.com/ovis-hpc/ovis/pull/542,https://github.com/narategithub,4,https://github.com/ovis-hpc/ovis/pull/542#issuecomment-740726728,"zap_sock used write() to write messages to the socket. It is possible
to write to a disconnected socket, and when it happened SIGPIPE was
sent to the calling process and the process terminated (default SIGPIPE
action).
Instead of write(), this patch uses send() with MSG_NOSIGNAL to
disable the SIGPIPE on disconnected socket.","@baallan this is not in the branch you're testing (narategithub/OVIS-4-fix). But, I thought you're testing zap_rdma over omnipath with that branch.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,542,2020-12-07T18:25:20Z,2020-12-11T15:50:35Z,2020-12-11T15:50:36Z,MERGED,True,49,50,1,https://github.com/narategithub,Prevent SIGPIPE in zap_sock,1,[],https://github.com/ovis-hpc/ovis/pull/542,https://github.com/baallan,5,https://github.com/ovis-hpc/ovis/pull/542#issuecomment-740732091,"zap_sock used write() to write messages to the socket. It is possible
to write to a disconnected socket, and when it happened SIGPIPE was
sent to the calling process and the process terminated (default SIGPIPE
action).
Instead of write(), this patch uses send() with MSG_NOSIGNAL to
disable the SIGPIPE on disconnected socket.",@narate it's easy to run both at the same time and compare.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,542,2020-12-07T18:25:20Z,2020-12-11T15:50:35Z,2020-12-11T15:50:36Z,MERGED,True,49,50,1,https://github.com/narategithub,Prevent SIGPIPE in zap_sock,1,[],https://github.com/ovis-hpc/ovis/pull/542,https://github.com/narategithub,6,https://github.com/ovis-hpc/ovis/pull/542#issuecomment-740737381,"zap_sock used write() to write messages to the socket. It is possible
to write to a disconnected socket, and when it happened SIGPIPE was
sent to the calling process and the process terminated (default SIGPIPE
action).
Instead of write(), this patch uses send() with MSG_NOSIGNAL to
disable the SIGPIPE on disconnected socket.",@baallan I'd just added this in narategithub/OVIS-4-fix. Please fetch & merge. It was not there originally b/c I just have this fix yesterday.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,542,2020-12-07T18:25:20Z,2020-12-11T15:50:35Z,2020-12-11T15:50:36Z,MERGED,True,49,50,1,https://github.com/narategithub,Prevent SIGPIPE in zap_sock,1,[],https://github.com/ovis-hpc/ovis/pull/542,https://github.com/baallan,7,https://github.com/ovis-hpc/ovis/pull/542#issuecomment-740768944,"zap_sock used write() to write messages to the socket. It is possible
to write to a disconnected socket, and when it happened SIGPIPE was
sent to the calling process and the process terminated (default SIGPIPE
action).
Instead of write(), this patch uses send() with MSG_NOSIGNAL to
disable the SIGPIPE on disconnected socket.","@narategithub if you could review and include 536 545 546 547 fixes found in yesterday and previous testing rounds, that would make seeing newer problems easier.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,542,2020-12-07T18:25:20Z,2020-12-11T15:50:35Z,2020-12-11T15:50:36Z,MERGED,True,49,50,1,https://github.com/narategithub,Prevent SIGPIPE in zap_sock,1,[],https://github.com/ovis-hpc/ovis/pull/542,https://github.com/tom95858,8,https://github.com/ovis-hpc/ovis/pull/542#issuecomment-740773424,"zap_sock used write() to write messages to the socket. It is possible
to write to a disconnected socket, and when it happened SIGPIPE was
sent to the calling process and the process terminated (default SIGPIPE
action).
Instead of write(), this patch uses send() with MSG_NOSIGNAL to
disable the SIGPIPE on disconnected socket.","__sock_send_msg_nolock used to always return ZAP_ERR_OK; so this adds quite a few new error paths. I think a far simpler fix is to add this:
int set = 1;
setsockopt(sd, SOL_SOCKET, SO_NOSIGPIPE, (void *)&set, sizeof(int));

Looking at this bit of code I notice that we have three functions for setting socket options:
     rc = __set_sockbuf_sz(sep->sock);
     rc = __sock_nonblock(sep->sock);
     rc = __set_keep_alive(sep);

The reason this is bad is because someone could forget to add on of these calls to a path and we get inconsistent options on the active vs. passive side. In fact we did do that. _z_sock_conn_request is missing the call to __set_keep_alive.
So could we please refactor this change to have all the socket options set in one function, add the new SO_NOSIGPIPE option and call this one function from __z_sock_conn_request and z_sock_connect?
Also leave the call to write as is; as well as the return code from sock_write so that we don't add a bunch of new error paths?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,542,2020-12-07T18:25:20Z,2020-12-11T15:50:35Z,2020-12-11T15:50:36Z,MERGED,True,49,50,1,https://github.com/narategithub,Prevent SIGPIPE in zap_sock,1,[],https://github.com/ovis-hpc/ovis/pull/542,https://github.com/narategithub,9,https://github.com/ovis-hpc/ovis/pull/542#issuecomment-740781881,"zap_sock used write() to write messages to the socket. It is possible
to write to a disconnected socket, and when it happened SIGPIPE was
sent to the calling process and the process terminated (default SIGPIPE
action).
Instead of write(), this patch uses send() with MSG_NOSIGNAL to
disable the SIGPIPE on disconnected socket.","@tom95858 OK, I'll do that. Where did you find SO_NOSIGPIPE? I searched PIPE in socket(7), tcp(7) and setsockopt(2) and could not find it.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,542,2020-12-07T18:25:20Z,2020-12-11T15:50:35Z,2020-12-11T15:50:36Z,MERGED,True,49,50,1,https://github.com/narategithub,Prevent SIGPIPE in zap_sock,1,[],https://github.com/ovis-hpc/ovis/pull/542,https://github.com/narategithub,10,https://github.com/ovis-hpc/ovis/pull/542#issuecomment-740814555,"zap_sock used write() to write messages to the socket. It is possible
to write to a disconnected socket, and when it happened SIGPIPE was
sent to the calling process and the process terminated (default SIGPIPE
action).
Instead of write(), this patch uses send() with MSG_NOSIGNAL to
disable the SIGPIPE on disconnected socket.","@tom95858 I don't think there is a SO_NOSIGPIPE in Linux. Here's the uapi/asm-generic/socket.h in Linus's linux master branch on github: https://github.com/torvalds/linux/blob/master/include/uapi/asm-generic/socket.h
How shall I proceed?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,542,2020-12-07T18:25:20Z,2020-12-11T15:50:35Z,2020-12-11T15:50:36Z,MERGED,True,49,50,1,https://github.com/narategithub,Prevent SIGPIPE in zap_sock,1,[],https://github.com/ovis-hpc/ovis/pull/542,https://github.com/narategithub,11,https://github.com/ovis-hpc/ovis/pull/542#issuecomment-740883036,"zap_sock used write() to write messages to the socket. It is possible
to write to a disconnected socket, and when it happened SIGPIPE was
sent to the calling process and the process terminated (default SIGPIPE
action).
Instead of write(), this patch uses send() with MSG_NOSIGNAL to
disable the SIGPIPE on disconnected socket.","@tom95858 I think this is ready to merge. I also scale-flap test on cygus, but let it run just about 10 min, and all look fine. Could you please review it? Thanks!",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,542,2020-12-07T18:25:20Z,2020-12-11T15:50:35Z,2020-12-11T15:50:36Z,MERGED,True,49,50,1,https://github.com/narategithub,Prevent SIGPIPE in zap_sock,1,[],https://github.com/ovis-hpc/ovis/pull/542,https://github.com/narategithub,12,https://github.com/ovis-hpc/ovis/pull/542#issuecomment-742934801,"zap_sock used write() to write messages to the socket. It is possible
to write to a disconnected socket, and when it happened SIGPIPE was
sent to the calling process and the process terminated (default SIGPIPE
action).
Instead of write(), this patch uses send() with MSG_NOSIGNAL to
disable the SIGPIPE on disconnected socket.",@tom95858 just a reminder. Please don't forget to include this in the release.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,543,2020-12-08T03:33:31Z,2020-12-11T15:53:14Z,2020-12-11T15:53:15Z,MERGED,True,2,0,1,https://github.com/narategithub,Fix ldmsctl segmentation fault on EOF,1,[],https://github.com/ovis-hpc/ovis/pull/543,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/543,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,544,2020-12-08T11:31:03Z,2022-04-19T17:12:07Z,2022-04-19T17:12:07Z,CLOSED,False,2587,219,16,https://github.com/morrone,Import m4 files from gnulib instead of gettext,1,[],https://github.com/ovis-hpc/ovis/pull/544,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/544,"Import m4 files from gnulib instead of gettext
gettext is not the true source of config.rpath,, lib-ld.m4,
lib-link.m4, and lib-prefix.m4. gnulib is the true source of those
files. This commit updates ovis to get the files from the true origin
rather than getting them indirectly from another project.
This approach both gets us more up-to-date files right now and also
give us a cleaner documented approach for updating an maintaining
those file in the future.
The gnulib-tool command from the gnulib project is used to import
the current latest m4 files in support of AC_LIB_HAVE_LINKFLAGS.
This also has the effect of including the AC_LIB_RPATH macro.
This was run when the gnulib project was at commit
e649a3bbd4be8a6af0db7275f6600bb5bed1ffb7 in its repository.
The following command was employed:
  gnulib-tool --no-vc-files --source-base=gnulib --import havelib","Import m4 files from gnulib instead of gettext
gettext is not the true source of config.rpath,, lib-ld.m4,
lib-link.m4, and lib-prefix.m4. gnulib is the true source of those
files. This commit updates ovis to get the files from the true origin
rather than getting them indirectly from another project.
This approach both gets us more up-to-date files right now and also
give us a cleaner documented approach for updating an maintaining
those file in the future.
The gnulib-tool command from the gnulib project is used to import
the current latest m4 files in support of AC_LIB_HAVE_LINKFLAGS.
This also has the effect of including the AC_LIB_RPATH macro.
This was run when the gnulib project was at commit
e649a3bbd4be8a6af0db7275f6600bb5bed1ffb7 in its repository.
The following command was employed:
  gnulib-tool --no-vc-files --source-base=gnulib --import havelib",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,544,2020-12-08T11:31:03Z,2022-04-19T17:12:07Z,2022-04-19T17:12:07Z,CLOSED,False,2587,219,16,https://github.com/morrone,Import m4 files from gnulib instead of gettext,1,[],https://github.com/ovis-hpc/ovis/pull/544,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/544#issuecomment-795974275,"Import m4 files from gnulib instead of gettext
gettext is not the true source of config.rpath,, lib-ld.m4,
lib-link.m4, and lib-prefix.m4. gnulib is the true source of those
files. This commit updates ovis to get the files from the true origin
rather than getting them indirectly from another project.
This approach both gets us more up-to-date files right now and also
give us a cleaner documented approach for updating an maintaining
those file in the future.
The gnulib-tool command from the gnulib project is used to import
the current latest m4 files in support of AC_LIB_HAVE_LINKFLAGS.
This also has the effect of including the AC_LIB_RPATH macro.
This was run when the gnulib project was at commit
e649a3bbd4be8a6af0db7275f6600bb5bed1ffb7 in its repository.
The following command was employed:
  gnulib-tool --no-vc-files --source-base=gnulib --import havelib","@tom95858 @morrone can we figure out how to make the current set of github  checks run on this and the decide if we're taking it?
@morrone is there a little shell script involving ""gnulib-tool --..."" you could add to ovis/util/ to let a developer easily update what you have done when the need arises? Or is that somehow already there and I'm just not seeing it?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,544,2020-12-08T11:31:03Z,2022-04-19T17:12:07Z,2022-04-19T17:12:07Z,CLOSED,False,2587,219,16,https://github.com/morrone,Import m4 files from gnulib instead of gettext,1,[],https://github.com/ovis-hpc/ovis/pull/544,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/544#issuecomment-796045579,"Import m4 files from gnulib instead of gettext
gettext is not the true source of config.rpath,, lib-ld.m4,
lib-link.m4, and lib-prefix.m4. gnulib is the true source of those
files. This commit updates ovis to get the files from the true origin
rather than getting them indirectly from another project.
This approach both gets us more up-to-date files right now and also
give us a cleaner documented approach for updating an maintaining
those file in the future.
The gnulib-tool command from the gnulib project is used to import
the current latest m4 files in support of AC_LIB_HAVE_LINKFLAGS.
This also has the effect of including the AC_LIB_RPATH macro.
This was run when the gnulib project was at commit
e649a3bbd4be8a6af0db7275f6600bb5bed1ffb7 in its repository.
The following command was employed:
  gnulib-tool --no-vc-files --source-base=gnulib --import havelib","m4/gnulib-cache,m4 contains the details of how gnulib was configured, and a command line version to reproduce what was done in the future. I am reluctant to try to make this easier, because gnulib-tool is not a normal system-installed package. It is always something that needs to be checked out and used from its source tree. It is probably better that the person updating the gnulib stuff understand what they are doing. If copy-and-paste of the command from that file is a significant barrier, then they might not know what they are doing with gnulib in general.
I rebased this PR so all of the checks are now run against the head of OVIS-4 at this time.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,545,2020-12-08T16:59:40Z,2020-12-08T17:22:12Z,2020-12-08T17:36:10Z,MERGED,True,1,0,1,https://github.com/baallan,fix ldms_xprt remote memory leak in send_dir_update,1,[],https://github.com/ovis-hpc/ovis/pull/545,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/545,fix addresses one of the problems in #453,fix addresses one of the problems in #453,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,545,2020-12-08T16:59:40Z,2020-12-08T17:22:12Z,2020-12-08T17:36:10Z,MERGED,True,1,0,1,https://github.com/baallan,fix ldms_xprt remote memory leak in send_dir_update,1,[],https://github.com/ovis-hpc/ovis/pull/545,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/545#issuecomment-740776923,fix addresses one of the problems in #453,@tom95858 I think this is a good patch.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,546,2020-12-08T17:00:27Z,2020-12-11T15:51:25Z,2020-12-11T15:51:25Z,MERGED,True,1,0,1,https://github.com/baallan,fix local use of uninit data in rdma logging,1,[],https://github.com/ovis-hpc/ovis/pull/546,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/546,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,547,2020-12-08T17:01:17Z,2020-12-11T15:48:06Z,2020-12-11T15:48:06Z,MERGED,True,8,2,1,https://github.com/baallan,fix minor leaks in ldms_ls to make memcheck cleaner.,1,[],https://github.com/ovis-hpc/ovis/pull/547,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/547,"in some scenarios, this makes ldms_ls completely clean for memcheck","in some scenarios, this makes ldms_ls completely clean for memcheck",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,548,2020-12-09T06:23:01Z,2020-12-11T15:47:39Z,2020-12-11T15:47:39Z,MERGED,True,30,4,2,https://github.com/nichamon,Put back the RBD share_lookup reference when disconnected,1,[],https://github.com/ovis-hpc/ovis/pull/548,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/548,"LDMS takes the share_lookup references on RBDs and sets when it responds to a
lookup request. Without this patch, LDMS puts the references back only when
applications call ldms_set_delete(). Thus, LDMS leaks the RBDs and sets that
have been looked-up. The leak also affects LDMSDs when it respond to an ldms_ls
-l request.","LDMS takes the share_lookup references on RBDs and sets when it responds to a
lookup request. Without this patch, LDMS puts the references back only when
applications call ldms_set_delete(). Thus, LDMS leaks the RBDs and sets that
have been looked-up. The leak also affects LDMSDs when it respond to an ldms_ls
-l request.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,548,2020-12-09T06:23:01Z,2020-12-11T15:47:39Z,2020-12-11T15:47:39Z,MERGED,True,30,4,2,https://github.com/nichamon,Put back the RBD share_lookup reference when disconnected,1,[],https://github.com/ovis-hpc/ovis/pull/548,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/548#issuecomment-741571201,"LDMS takes the share_lookup references on RBDs and sets when it responds to a
lookup request. Without this patch, LDMS puts the references back only when
applications call ldms_set_delete(). Thus, LDMS leaks the RBDs and sets that
have been looked-up. The leak also affects LDMSDs when it respond to an ldms_ls
-l request.","@baallan found a leak in the Valgrind logs of sampler daemons. @narategithub pointed me to the leak upon his inspection.
After I tested OVIS-4 + post-ga-fixes, I found that the references taken on RBDs and sets (share_lookup) in send_lookup_reply are not put back in the case of disconnection. They are put back only when the sampler daemon receives the SET_DELETE reply.
I have tested the patch and confirmed that the references are put back when the connection between the sampler daemon and the aggregator is disconnected. After the disconnection, I also terminated the plugins to delete the sets. All RBDs associated with the sets were freed and the sets were freed. However, I haven't tested the patch at scale.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,548,2020-12-09T06:23:01Z,2020-12-11T15:47:39Z,2020-12-11T15:47:39Z,MERGED,True,30,4,2,https://github.com/nichamon,Put back the RBD share_lookup reference when disconnected,1,[],https://github.com/ovis-hpc/ovis/pull/548,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/548#issuecomment-741873279,"LDMS takes the share_lookup references on RBDs and sets when it responds to a
lookup request. Without this patch, LDMS puts the references back only when
applications call ldms_set_delete(). Thus, LDMS leaks the RBDs and sets that
have been looked-up. The leak also affects LDMSDs when it respond to an ldms_ls
-l request.",@nichamon thanks for the quick fix. @narategithub do I assume correctly that a revised OVIS-4-fix with this weeks related patches all included will be out soonish for me to retest?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,548,2020-12-09T06:23:01Z,2020-12-11T15:47:39Z,2020-12-11T15:47:39Z,MERGED,True,30,4,2,https://github.com/nichamon,Put back the RBD share_lookup reference when disconnected,1,[],https://github.com/ovis-hpc/ovis/pull/548,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/548#issuecomment-742971391,"LDMS takes the share_lookup references on RBDs and sets when it responds to a
lookup request. Without this patch, LDMS puts the references back only when
applications call ldms_set_delete(). Thus, LDMS leaks the RBDs and sets that
have been looked-up. The leak also affects LDMSDs when it respond to an ldms_ls
-l request.",in today's testing of ovis-4-fix the symptom this patch addresses is no longer present.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,549,2020-12-10T00:18:50Z,2020-12-11T15:57:49Z,2020-12-11T15:57:49Z,MERGED,True,2,11,3,https://github.com/baallan,remove buggy ldmsd_msg_logger function,1,[],https://github.com/ovis-hpc/ovis/pull/549,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/549,"the ldmsd_msg_logger function:
is not thread safe
is passed to all the plugins that take a log pointer
contains an easily exploitable buffer overrun
is redundant with ldmsd_log.
This patch removes the function and redirects the only caller to ldmsd_log.
It leaves a #define for any client code that might have used it.","the ldmsd_msg_logger function:
is not thread safe
is passed to all the plugins that take a log pointer
contains an easily exploitable buffer overrun
is redundant with ldmsd_log.
This patch removes the function and redirects the only caller to ldmsd_log.
It leaves a #define for any client code that might have used it.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,549,2020-12-10T00:18:50Z,2020-12-11T15:57:49Z,2020-12-11T15:57:49Z,MERGED,True,2,11,3,https://github.com/baallan,remove buggy ldmsd_msg_logger function,1,[],https://github.com/ovis-hpc/ovis/pull/549,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/549#issuecomment-742147581,"the ldmsd_msg_logger function:
is not thread safe
is passed to all the plugins that take a log pointer
contains an easily exploitable buffer overrun
is redundant with ldmsd_log.
This patch removes the function and redirects the only caller to ldmsd_log.
It leaves a #define for any client code that might have used it.",@nichamon please tell us if there is some use case for ldmsd_msg_logger that I overlooked.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,549,2020-12-10T00:18:50Z,2020-12-11T15:57:49Z,2020-12-11T15:57:49Z,MERGED,True,2,11,3,https://github.com/baallan,remove buggy ldmsd_msg_logger function,1,[],https://github.com/ovis-hpc/ovis/pull/549,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/549#issuecomment-742225827,"the ldmsd_msg_logger function:
is not thread safe
is passed to all the plugins that take a log pointer
contains an easily exploitable buffer overrun
is redundant with ldmsd_log.
This patch removes the function and redirects the only caller to ldmsd_log.
It leaves a #define for any client code that might have used it.","@nichamon please tell us if there is some use case for ldmsd_msg_logger that I overlooked.

The result of grep from the top of the OVIS-4 branch:
$ grep -rn 'ldmsd_msg_logger' ldms/*
ldms/src/ldmsd/ldmsd.c:281:void ldmsd_msg_logger(enum ldmsd_loglevel level, const char *fmt, ...)
ldms/src/ldmsd/ldmsd_config.c:175:      lpi = pget(ldmsd_msg_logger);
ldms/src/ldmsd/ldmsd.h:814:void ldmsd_msg_logger(enum ldmsd_loglevel level, const char *fmt, ...);

I agree that there is only one caller as you mentioned.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,550,2020-12-10T03:43:46Z,2020-12-11T15:47:11Z,2020-12-15T05:49:56Z,MERGED,True,0,5,1,https://github.com/nichamon,Fix a possible use-after-freed in the cleanup path,1,[],https://github.com/ovis-hpc/ovis/pull/550,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/550,"The cleanup logic iterates through the storage policy tree to close all
stores. It also puts back a storage policy reference, which is
erroneous. It is unnecessary to put the reference back as we only want
to close the stores and not free the storage policies. Moreover, this
could cause a use-after-free if all producer sets associated with a
storage policy have been deleted. The storage policy will be freed when
the cleanup logic puts back the reference, and then the cleanup logic
reaccesses the storage policy to get the next storage policy.","The cleanup logic iterates through the storage policy tree to close all
stores. It also puts back a storage policy reference, which is
erroneous. It is unnecessary to put the reference back as we only want
to close the stores and not free the storage policies. Moreover, this
could cause a use-after-free if all producer sets associated with a
storage policy have been deleted. The storage policy will be freed when
the cleanup logic puts back the reference, and then the cleanup logic
reaccesses the storage policy to get the next storage policy.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,550,2020-12-10T03:43:46Z,2020-12-11T15:47:11Z,2020-12-15T05:49:56Z,MERGED,True,0,5,1,https://github.com/nichamon,Fix a possible use-after-freed in the cleanup path,1,[],https://github.com/ovis-hpc/ovis/pull/550,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/550#issuecomment-742219748,"The cleanup logic iterates through the storage policy tree to close all
stores. It also puts back a storage policy reference, which is
erroneous. It is unnecessary to put the reference back as we only want
to close the stores and not free the storage policies. Moreover, this
could cause a use-after-free if all producer sets associated with a
storage policy have been deleted. The storage policy will be freed when
the cleanup logic puts back the reference, and then the cleanup logic
reaccesses the storage policy to get the next storage policy.","@baallan found the use-after-free issue at cleanup while LDMSD was closing the stores after LDMSD was disconnected from its producers.
I have confirmed the use-after-free issue.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,550,2020-12-10T03:43:46Z,2020-12-11T15:47:11Z,2020-12-15T05:49:56Z,MERGED,True,0,5,1,https://github.com/nichamon,Fix a possible use-after-freed in the cleanup path,1,[],https://github.com/ovis-hpc/ovis/pull/550,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/550#issuecomment-742970300,"The cleanup logic iterates through the storage policy tree to close all
stores. It also puts back a storage policy reference, which is
erroneous. It is unnecessary to put the reference back as we only want
to close the stores and not free the storage policies. Moreover, this
could cause a use-after-free if all producer sets associated with a
storage policy have been deleted. The storage policy will be freed when
the cleanup logic puts back the reference, and then the cleanup logic
reaccesses the storage policy to get the next storage policy.",I tested Narates fix branch that included this patch and I no longer get the use-after errors.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,551,2020-12-10T05:12:24Z,2020-12-11T02:52:02Z,2020-12-11T02:52:02Z,CLOSED,False,1,1,1,https://github.com/narategithub,Fix `zap_accumulate()` sample_no overflow,1,[],https://github.com/ovis-hpc/ovis/pull/551,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/551,"zap_accumulate() uses int to receive sample_no. The caller however
supplied uint64_t (proc_count and wait_count), causing the overflow. This
patch change the type of the sample_no parameter to the matching uint64_t.","zap_accumulate() uses int to receive sample_no. The caller however
supplied uint64_t (proc_count and wait_count), causing the overflow. This
patch change the type of the sample_no parameter to the matching uint64_t.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,551,2020-12-10T05:12:24Z,2020-12-11T02:52:02Z,2020-12-11T02:52:02Z,CLOSED,False,1,1,1,https://github.com/narategithub,Fix `zap_accumulate()` sample_no overflow,1,[],https://github.com/ovis-hpc/ovis/pull/551,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/551#issuecomment-742247851,"zap_accumulate() uses int to receive sample_no. The caller however
supplied uint64_t (proc_count and wait_count), causing the overflow. This
patch change the type of the sample_no parameter to the matching uint64_t.","@tom95858,
FYI, the symptom of the bug that this pull request addresses is memory corruption. In my test, I got SIGFPE in zap_accumulate() because window_size somehow was set to 0. I believe what happened was that the stats->proc_count (which is uint64_t) becomes larger than 2147483647 (max int), making sample_no negative, and hence win_sample = sample_no % window_size being negative. window[win_sample] = sample then write to the negative-index cell. The following is the stack trace and the values of stats I encountered.
Program received signal SIGFPE, Arithmetic exception.
[Switching to Thread 0x7f2494416700 (LWP 1531)]
0x00007f24d8dd1535 in zap_accumulate (sample_no=-2147483220, sample=0, window_size=0, 
    current_sum=183, window=0x1c0daa0) at ../../../../lib/src/zap/zap.c:908
908         win_sample = sample_no % window_size;
(gdb) bt
#0  0x00007f24d8dd1535 in zap_accumulate (sample_no=-2147483220, sample=0, window_size=0, 
    current_sum=183, window=0x1c0daa0) at ../../../../lib/src/zap/zap.c:908
#1  0x00007f24d8dd1633 in zap_thrstat_wait_start (stats=0x1bf7ec0)
    at ../../../../lib/src/zap/zap.c:923
#2  0x00007f249441b8d6 in sock_ev_cb (ev=0x7f2484020be8)
    at ../../../../../lib/src/zap/sock/zap_sock.c:1135
#3  0x00007f24d7d7f6c0 in ovis_scheduler_loop (m=0x1bfc800, return_on_empty=0)
    at ../../../../lib/src/ovis_event/ovis_event.c:694
#4  0x00007f249441c0da in io_thread_proc (arg=0x0)
    at ../../../../../lib/src/zap/sock/zap_sock.c:1321
#5  0x00007f24d7964ea5 in start_thread () from /usr/lib64/libpthread.so.0
#6  0x00007f24d86e68dd in clone () from /usr/lib64/libc.so.6

(gdb) p *stats 
$8 = {name = 0x0, window_size = 0, wait_start = {tv_sec = 1607568640, tv_nsec = 827159153}, 
  wait_end = {tv_sec = 1607568640, tv_nsec = 827158241}, waiting = 1, 
  proc_count = 2147484076, wait_count = 2147484076, proc_sum = 183, 
  wait_sum = 18443248346284794951, wait_window = 0x1bff170, proc_window = 0x1c0daa0, entry = {
    le_next = 0x1be2220, le_prev = 0x7f24d8fd43e8 <thrstat_list>}}",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,551,2020-12-10T05:12:24Z,2020-12-11T02:52:02Z,2020-12-11T02:52:02Z,CLOSED,False,1,1,1,https://github.com/narategithub,Fix `zap_accumulate()` sample_no overflow,1,[],https://github.com/ovis-hpc/ovis/pull/551,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/551#issuecomment-742824031,"zap_accumulate() uses int to receive sample_no. The caller however
supplied uint64_t (proc_count and wait_count), causing the overflow. This
patch change the type of the sample_no parameter to the matching uint64_t.",This is fixed in my tree. It's also in ovis-hpc/for-eric branch. My latest version is on Voltrino which was down for DST until last night. All that will be pushed in a few hours.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,551,2020-12-10T05:12:24Z,2020-12-11T02:52:02Z,2020-12-11T02:52:02Z,CLOSED,False,1,1,1,https://github.com/narategithub,Fix `zap_accumulate()` sample_no overflow,1,[],https://github.com/ovis-hpc/ovis/pull/551,https://github.com/narategithub,4,https://github.com/ovis-hpc/ovis/pull/551#issuecomment-742931432,"zap_accumulate() uses int to receive sample_no. The caller however
supplied uint64_t (proc_count and wait_count), causing the overflow. This
patch change the type of the sample_no parameter to the matching uint64_t.",gotcha.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,552,2020-12-11T07:37:35Z,2020-12-11T15:46:15Z,2020-12-11T17:03:08Z,CLOSED,False,2,2,1,https://github.com/baallan,fix buffer overrun in zap event queue definition.,1,[],https://github.com/ovis-hpc/ovis/pull/552,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/552,"The thread name buffer is too small for the potential names, if thread limit
from user is high. This could potentially corrupt event queue setup in init_atfork, depending on stack layout determined by compiler.","The thread name buffer is too small for the potential names, if thread limit
from user is high. This could potentially corrupt event queue setup in init_atfork, depending on stack layout determined by compiler.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,552,2020-12-11T07:37:35Z,2020-12-11T15:46:15Z,2020-12-11T17:03:08Z,CLOSED,False,2,2,1,https://github.com/baallan,fix buffer overrun in zap event queue definition.,1,[],https://github.com/ovis-hpc/ovis/pull/552,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/552#issuecomment-743270224,"The thread name buffer is too small for the potential names, if thread limit
from user is high. This could potentially corrupt event queue setup in init_atfork, depending on stack layout determined by compiler.",There is no possibility of corruption because snprintf is being used. Bumping the buffer size does not accomplish anything because the maximum pthread name is 16,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,552,2020-12-11T07:37:35Z,2020-12-11T15:46:15Z,2020-12-11T17:03:08Z,CLOSED,False,2,2,1,https://github.com/baallan,fix buffer overrun in zap event queue definition.,1,[],https://github.com/ovis-hpc/ovis/pull/552,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/552#issuecomment-743312184,"The thread name buffer is too small for the potential names, if thread limit
from user is high. This could potentially corrupt event queue setup in init_atfork, depending on stack layout determined by compiler.","@tom95858 in the light of day (and your comment), yes, snprintf prevents the overrun. But it doesn't prevent the incorrect name truncation of the stats. Based on the name format string, the maximum number  that fits in the name is '9999'. On the large systems coming down the pipe, this is considerably smaller than what might be read from the user via ZAP_EVENT_WORKERS env. Being limited to 16 characters in the current format leads to incorrect report formatting for thread worker stats names.
Do I increase the allowed name length and retitle/describe the patch, or put in guard code that limits worker count to 9999, or shorten the name format prefix to z:wkr:?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,553,2020-12-11T17:19:19Z,2020-12-11T17:43:11Z,2020-12-11T17:43:15Z,MERGED,True,0,2,1,https://github.com/tom95858,Remove gettext build dependency references,1,[],https://github.com/ovis-hpc/ovis/pull/553,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/553,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,554,2020-12-11T18:38:11Z,2020-12-13T17:18:31Z,2020-12-13T17:18:31Z,MERGED,True,2,6,1,https://github.com/narategithub,Fix zap_sock close() not shutdown,1,[],https://github.com/ovis-hpc/ovis/pull/554,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/554,"The shutdown() calls in zap_sock close implementation were
accidentally checked in, making socket connection stayed connected in
the case of bad authentication test (e.g. mismatched keyes or wrong
munge domain) in ldmsd_auth_ovis_test and ldmsd_auth_test tests in
ldms-test repository. Re-introducing the shutdown() calls solved the
issue.","The shutdown() calls in zap_sock close implementation were
accidentally checked in, making socket connection stayed connected in
the case of bad authentication test (e.g. mismatched keyes or wrong
munge domain) in ldmsd_auth_ovis_test and ldmsd_auth_test tests in
ldms-test repository. Re-introducing the shutdown() calls solved the
issue.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,554,2020-12-11T18:38:11Z,2020-12-13T17:18:31Z,2020-12-13T17:18:31Z,MERGED,True,2,6,1,https://github.com/narategithub,Fix zap_sock close() not shutdown,1,[],https://github.com/ovis-hpc/ovis/pull/554,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/554#issuecomment-743390100,"The shutdown() calls in zap_sock close implementation were
accidentally checked in, making socket connection stayed connected in
the case of bad authentication test (e.g. mismatched keyes or wrong
munge domain) in ldmsd_auth_ovis_test and ldmsd_auth_test tests in
ldms-test repository. Re-introducing the shutdown() calls solved the
issue.","@tom95858 I did try having only the EAGAIN removal last night, leaving the shutdown() calls commented out. The result was that EPOLLHUP is never delivered, and hence zap disconnect event is never delivered. ldms_ls with bad auth just stuck there forever, but CPU utilization was not at 100% anymore. I'd just forced-pushed the patch to include EAGAIN removal in the case of read() returning 0.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,554,2020-12-11T18:38:11Z,2020-12-13T17:18:31Z,2020-12-13T17:18:31Z,MERGED,True,2,6,1,https://github.com/narategithub,Fix zap_sock close() not shutdown,1,[],https://github.com/ovis-hpc/ovis/pull/554,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/554#issuecomment-743437386,"The shutdown() calls in zap_sock close implementation were
accidentally checked in, making socket connection stayed connected in
the case of bad authentication test (e.g. mismatched keyes or wrong
munge domain) in ldmsd_auth_ovis_test and ldmsd_auth_test tests in
ldms-test repository. Re-introducing the shutdown() calls solved the
issue.","Hi @narategithub, this breaks streams.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,554,2020-12-11T18:38:11Z,2020-12-13T17:18:31Z,2020-12-13T17:18:31Z,MERGED,True,2,6,1,https://github.com/narategithub,Fix zap_sock close() not shutdown,1,[],https://github.com/ovis-hpc/ovis/pull/554,https://github.com/narategithub,4,https://github.com/ovis-hpc/ovis/pull/554#issuecomment-743442118,"The shutdown() calls in zap_sock close implementation were
accidentally checked in, making socket connection stayed connected in
the case of bad authentication test (e.g. mismatched keyes or wrong
munge domain) in ldmsd_auth_ovis_test and ldmsd_auth_test tests in
ldms-test repository. Re-introducing the shutdown() calls solved the
issue.",@tom95858 Could you please point me to your stream test? So that I can test/debug with ldms-test in one go?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,554,2020-12-11T18:38:11Z,2020-12-13T17:18:31Z,2020-12-13T17:18:31Z,MERGED,True,2,6,1,https://github.com/narategithub,Fix zap_sock close() not shutdown,1,[],https://github.com/ovis-hpc/ovis/pull/554,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/554#issuecomment-743471891,"The shutdown() calls in zap_sock close implementation were
accidentally checked in, making socket connection stayed connected in
the case of bad authentication test (e.g. mismatched keyes or wrong
munge domain) in ldmsd_auth_ovis_test and ldmsd_auth_test tests in
ldms-test repository. Re-introducing the shutdown() calls solved the
issue.","publisher:
ldmsd_stream_publish -h nid00062 -x sock -a munge -p 12345 -f ffile -s test_stream

subscriber:
ldmsd_stream_subscribe -p 12345 -s test_stream -a munge

ffile contains the data to publish. Mine contains this:
1
2
3
4
5",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,554,2020-12-11T18:38:11Z,2020-12-13T17:18:31Z,2020-12-13T17:18:31Z,MERGED,True,2,6,1,https://github.com/narategithub,Fix zap_sock close() not shutdown,1,[],https://github.com/ovis-hpc/ovis/pull/554,https://github.com/narategithub,6,https://github.com/ovis-hpc/ovis/pull/554#issuecomment-743485973,"The shutdown() calls in zap_sock close implementation were
accidentally checked in, making socket connection stayed connected in
the case of bad authentication test (e.g. mismatched keyes or wrong
munge domain) in ldmsd_auth_ovis_test and ldmsd_auth_test tests in
ldms-test repository. Re-introducing the shutdown() calls solved the
issue.",Thanks! I'll debug this tonight.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,554,2020-12-11T18:38:11Z,2020-12-13T17:18:31Z,2020-12-13T17:18:31Z,MERGED,True,2,6,1,https://github.com/narategithub,Fix zap_sock close() not shutdown,1,[],https://github.com/ovis-hpc/ovis/pull/554,https://github.com/tom95858,7,https://github.com/ovis-hpc/ovis/pull/554#issuecomment-743702106,"The shutdown() calls in zap_sock close implementation were
accidentally checked in, making socket connection stayed connected in
the case of bad authentication test (e.g. mismatched keyes or wrong
munge domain) in ldmsd_auth_ovis_test and ldmsd_auth_test tests in
ldms-test repository. Re-introducing the shutdown() calls solved the
issue.",You might experiment with SHUT_WR instead of SHUT_RDWR,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,555,2020-12-13T20:45:46Z,2020-12-14T16:12:45Z,2020-12-14T16:12:50Z,MERGED,True,5,7,3,https://github.com/tom95858,V4.3.5 final,3,[],https://github.com/ovis-hpc/ovis/pull/555,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/555,"Fix SEGV on REJECT on Cray uGNI.
Fix authentication failure disconnect
Refactor streams data delivery at exit
Update README to remove mention of gettext dependency","Fix SEGV on REJECT on Cray uGNI.
Fix authentication failure disconnect
Refactor streams data delivery at exit
Update README to remove mention of gettext dependency",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,556,2020-12-15T05:53:23Z,2020-12-15T16:12:03Z,2020-12-15T16:12:03Z,MERGED,True,8,3,1,https://github.com/narategithub,Fix rdma zap endpoint use-after-free,1,[],https://github.com/ovis-hpc/ovis/pull/556,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/556,"zap_rdma ignore TIMEWAIT_EXIT event as the endpoints are destroyed
since DISCONNECTED or ERROR events are handled, and we don't want to
wait around to free resources. Hence, if the event is TIMEWAIT_EXIT,
rep could already be gone and we shall not access it.","zap_rdma ignore TIMEWAIT_EXIT event as the endpoints are destroyed
since DISCONNECTED or ERROR events are handled, and we don't want to
wait around to free resources. Hence, if the event is TIMEWAIT_EXIT,
rep could already be gone and we shall not access it.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,556,2020-12-15T05:53:23Z,2020-12-15T16:12:03Z,2020-12-15T16:12:03Z,MERGED,True,8,3,1,https://github.com/narategithub,Fix rdma zap endpoint use-after-free,1,[],https://github.com/ovis-hpc/ovis/pull/556,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/556#issuecomment-745081778,"zap_rdma ignore TIMEWAIT_EXIT event as the endpoints are destroyed
since DISCONNECTED or ERROR events are handled, and we don't want to
wait around to free resources. Hence, if the event is TIMEWAIT_EXIT,
rep could already be gone and we shall not access it.",@tom95858 please don't merge this yet. It need to test over night.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,557,2020-12-15T05:53:48Z,2020-12-15T06:24:03Z,2020-12-15T06:30:01Z,MERGED,True,5,1,1,https://github.com/narategithub,Fix rbd use after free,1,[],https://github.com/ovis-hpc/ovis/pull/557,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/557,"The releasing of rbd in __ldms_xprt_resource_free() could race with
ldms_xprt_set_delete(). In such case, __ldms_xprt_resource_free()
released the xprt lock, and then ldms_xprt_set_delete() took the lock
and call __ldms_rbd_xprt_release() which removed the rbd from the tree
and drop a reference. That reference could be the last reference to
the rbd, and hence once ldms_xprt_set_delete() released the lock and
__ldms_xprt_resource_free() took the lock again, the rbd would already
be freed -- causing a use-after-free issue.
This patch solved the issue by taking the rbd reference while the rbd
is still in the tree and xprt lock is still hold, and drop the
reference after we're done processing it.","The releasing of rbd in __ldms_xprt_resource_free() could race with
ldms_xprt_set_delete(). In such case, __ldms_xprt_resource_free()
released the xprt lock, and then ldms_xprt_set_delete() took the lock
and call __ldms_rbd_xprt_release() which removed the rbd from the tree
and drop a reference. That reference could be the last reference to
the rbd, and hence once ldms_xprt_set_delete() released the lock and
__ldms_xprt_resource_free() took the lock again, the rbd would already
be freed -- causing a use-after-free issue.
This patch solved the issue by taking the rbd reference while the rbd
is still in the tree and xprt lock is still hold, and drop the
reference after we're done processing it.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,557,2020-12-15T05:53:48Z,2020-12-15T06:24:03Z,2020-12-15T06:30:01Z,MERGED,True,5,1,1,https://github.com/narategithub,Fix rbd use after free,1,[],https://github.com/ovis-hpc/ovis/pull/557,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/557#issuecomment-745081493,"The releasing of rbd in __ldms_xprt_resource_free() could race with
ldms_xprt_set_delete(). In such case, __ldms_xprt_resource_free()
released the xprt lock, and then ldms_xprt_set_delete() took the lock
and call __ldms_rbd_xprt_release() which removed the rbd from the tree
and drop a reference. That reference could be the last reference to
the rbd, and hence once ldms_xprt_set_delete() released the lock and
__ldms_xprt_resource_free() took the lock again, the rbd would already
be freed -- causing a use-after-free issue.
This patch solved the issue by taking the rbd reference while the rbd
is still in the tree and xprt lock is still hold, and drop the
reference after we're done processing it.","@narategithub Did you see a crash from this, or is this by inspection.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,557,2020-12-15T05:53:48Z,2020-12-15T06:24:03Z,2020-12-15T06:30:01Z,MERGED,True,5,1,1,https://github.com/narategithub,Fix rbd use after free,1,[],https://github.com/ovis-hpc/ovis/pull/557,https://github.com/narategithub,3,https://github.com/ovis-hpc/ovis/pull/557#issuecomment-745083744,"The releasing of rbd in __ldms_xprt_resource_free() could race with
ldms_xprt_set_delete(). In such case, __ldms_xprt_resource_free()
released the xprt lock, and then ldms_xprt_set_delete() took the lock
and call __ldms_rbd_xprt_release() which removed the rbd from the tree
and drop a reference. That reference could be the last reference to
the rbd, and hence once ldms_xprt_set_delete() released the lock and
__ldms_xprt_resource_free() took the lock again, the rbd would already
be freed -- causing a use-after-free issue.
This patch solved the issue by taking the rbd reference while the rbd
is still in the tree and xprt lock is still hold, and drop the
reference after we're done processing it.",@tom95858 I saw a crash on this on cygnus. I am also running scale-flap test on cygnus as well.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,558,2020-12-15T15:50:05Z,2020-12-20T21:42:03Z,2020-12-20T21:42:03Z,MERGED,True,2,4,1,https://github.com/narategithub,Fix zap_rdma submit_pending() deadlock,1,[],https://github.com/ovis-hpc/ovis/pull/558,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/558,"submit_pendin() took endpoint lock to free the context while holding
credit lock, while the read/write/send took endpoint lock then credit
lock. This created a dead lock. submit_pending() should re-acquire the
credit lock after it is done freeing context and release the endpoint
lock, which is what this patch does.","submit_pendin() took endpoint lock to free the context while holding
credit lock, while the read/write/send took endpoint lock then credit
lock. This created a dead lock. submit_pending() should re-acquire the
credit lock after it is done freeing context and release the endpoint
lock, which is what this patch does.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,558,2020-12-15T15:50:05Z,2020-12-20T21:42:03Z,2020-12-20T21:42:03Z,MERGED,True,2,4,1,https://github.com/narategithub,Fix zap_rdma submit_pending() deadlock,1,[],https://github.com/ovis-hpc/ovis/pull/558,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/558#issuecomment-747665299,"submit_pendin() took endpoint lock to free the context while holding
credit lock, while the read/write/send took endpoint lock then credit
lock. This created a dead lock. submit_pending() should re-acquire the
credit lock after it is done freeing context and release the endpoint
lock, which is what this patch does.",@narategithub should I accept this?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,558,2020-12-15T15:50:05Z,2020-12-20T21:42:03Z,2020-12-20T21:42:03Z,MERGED,True,2,4,1,https://github.com/narategithub,Fix zap_rdma submit_pending() deadlock,1,[],https://github.com/ovis-hpc/ovis/pull/558,https://github.com/narategithub,3,https://github.com/ovis-hpc/ovis/pull/558#issuecomment-747671527,"submit_pendin() took endpoint lock to free the context while holding
credit lock, while the read/write/send took endpoint lock then credit
lock. This created a dead lock. submit_pending() should re-acquire the
credit lock after it is done freeing context and release the endpoint
lock, which is what this patch does.","@tom95858 Yes, please.
FYI, the slow leak with RDMA in scale-flap test is still there. I'm still hunting it.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,559,2020-12-16T23:31:21Z,2020-12-20T01:51:33Z,2020-12-20T01:51:33Z,MERGED,True,33,3,3,https://github.com/baallan,add config check for new ibv_wc_t* enums,1,[],https://github.com/ovis-hpc/ovis/pull/559,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/559,This patch checks at configure for enums that exist on TOSS3 infiniband/verbs.h but not some mellanox ib library versions and ifdefs them out if they are not all defined. Affects at least ARM platforms.,This patch checks at configure for enums that exist on TOSS3 infiniband/verbs.h but not some mellanox ib library versions and ifdefs them out if they are not all defined. Affects at least ARM platforms.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,559,2020-12-16T23:31:21Z,2020-12-20T01:51:33Z,2020-12-20T01:51:33Z,MERGED,True,33,3,3,https://github.com/baallan,add config check for new ibv_wc_t* enums,1,[],https://github.com/ovis-hpc/ovis/pull/559,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/559#issuecomment-747105267,This patch checks at configure for enums that exist on TOSS3 infiniband/verbs.h but not some mellanox ib library versions and ifdefs them out if they are not all defined. Affects at least ARM platforms.,@narategithub let us know if you have something better coming for this problem. this is the quickie I made to let build finish on stria.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,559,2020-12-16T23:31:21Z,2020-12-20T01:51:33Z,2020-12-20T01:51:33Z,MERGED,True,33,3,3,https://github.com/baallan,add config check for new ibv_wc_t* enums,1,[],https://github.com/ovis-hpc/ovis/pull/559,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/559#issuecomment-747537284,This patch checks at configure for enums that exist on TOSS3 infiniband/verbs.h but not some mellanox ib library versions and ifdefs them out if they are not all defined. Affects at least ARM platforms.,"Does the build test include --enable-rdma? If not, we should add the necessary OFA RPM to the container and do so.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,559,2020-12-16T23:31:21Z,2020-12-20T01:51:33Z,2020-12-20T01:51:33Z,MERGED,True,33,3,3,https://github.com/baallan,add config check for new ibv_wc_t* enums,1,[],https://github.com/ovis-hpc/ovis/pull/559,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/559#issuecomment-747557930,This patch checks at configure for enums that exist on TOSS3 infiniband/verbs.h but not some mellanox ib library versions and ifdefs them out if they are not all defined. Affects at least ARM platforms.,"Looks like ""Build Test with -DDEBUG - CentOS7""  includes --enable-rdma in .github/workflows.
The patch has been manually tested on both 'with' and 'without' systems. (cts1x, stria).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,559,2020-12-16T23:31:21Z,2020-12-20T01:51:33Z,2020-12-20T01:51:33Z,MERGED,True,33,3,3,https://github.com/baallan,add config check for new ibv_wc_t* enums,1,[],https://github.com/ovis-hpc/ovis/pull/559,https://github.com/baallan,5,https://github.com/ovis-hpc/ovis/pull/559#issuecomment-747579319,This patch checks at configure for enums that exist on TOSS3 infiniband/verbs.h but not some mellanox ib library versions and ifdefs them out if they are not all defined. Affects at least ARM platforms.,"rdma is enabled in the ""Build Test with -DDEBUG - CentOS7"" build, based on a closer reading of the logs.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,560,2020-12-17T17:19:42Z,2020-12-17T19:54:28Z,2020-12-17T19:54:28Z,MERGED,True,20,0,2,https://github.com/narategithub,Add build-with-rdma github action step,1,[],https://github.com/ovis-hpc/ovis/pull/560,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/560,"Add another github action step to test build with rdma but without DEBUG
in both CentOS and Ubuntu build test actions.","Add another github action step to test build with rdma but without DEBUG
in both CentOS and Ubuntu build test actions.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,560,2020-12-17T17:19:42Z,2020-12-17T19:54:28Z,2020-12-17T19:54:28Z,MERGED,True,20,0,2,https://github.com/narategithub,Add build-with-rdma github action step,1,[],https://github.com/ovis-hpc/ovis/pull/560,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/560#issuecomment-747589797,"Add another github action step to test build with rdma but without DEBUG
in both CentOS and Ubuntu build test actions.",I think we can get rid of the build tests that don't include --enable-rdma correct? They are redundant?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,560,2020-12-17T17:19:42Z,2020-12-17T19:54:28Z,2020-12-17T19:54:28Z,MERGED,True,20,0,2,https://github.com/narategithub,Add build-with-rdma github action step,1,[],https://github.com/ovis-hpc/ovis/pull/560,https://github.com/narategithub,3,https://github.com/ovis-hpc/ovis/pull/560#issuecomment-747595204,"Add another github action step to test build with rdma but without DEBUG
in both CentOS and Ubuntu build test actions.","I think the one without --enable-rdma is to test the bare minimum test. The case of --enable-rdma is currently a superset of bare minimum as --enable-rdma just build more stuff. However, I remembered in the past that we all build with --enable-SOMETHING and we never get a build error, but when @valleydlr build without that option, his build failed. So, I think the bare build test is still needed.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,560,2020-12-17T17:19:42Z,2020-12-17T19:54:28Z,2020-12-17T19:54:28Z,MERGED,True,20,0,2,https://github.com/narategithub,Add build-with-rdma github action step,1,[],https://github.com/ovis-hpc/ovis/pull/560,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/560#issuecomment-747627917,"Add another github action step to test build with rdma but without DEBUG
in both CentOS and Ubuntu build test actions.","yes, please, we should have a bare './configure && make install && make installcheck' test or equivalent on each flavor of rhel/suse/centos/ubuntu that we can manage on github actions. Obviously some flavors may not be possible due to unavailability of containers due to OS licensing issues.   I think the bare ./configure test is part of doing a 'make distcheck' test, so maybe this is covered if we pass ""make distcheck"".",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,561,2020-12-18T02:02:06Z,2020-12-18T02:27:18Z,2020-12-18T02:27:18Z,CLOSED,False,965,0,7,https://github.com/wooloo1121,Timescaledb store plugin,20,[],https://github.com/ovis-hpc/ovis/pull/561,https://github.com/wooloo1121,1,https://github.com/ovis-hpc/ovis/pull/561,TimescaleDB store plugin developed based on the influx store plugin,TimescaleDB store plugin developed based on the influx store plugin,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,562,2020-12-18T02:36:35Z,2020-12-27T19:35:22Z,2020-12-27T19:35:22Z,MERGED,True,815,1,8,https://github.com/wooloo1121,Timescaledb store plugin,60,[],https://github.com/ovis-hpc/ovis/pull/562,https://github.com/wooloo1121,1,https://github.com/ovis-hpc/ovis/pull/562,"Store plugin saving data into TimescaleDB, developed based on the influx store plugin.","Store plugin saving data into TimescaleDB, developed based on the influx store plugin.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,562,2020-12-18T02:36:35Z,2020-12-27T19:35:22Z,2020-12-27T19:35:22Z,MERGED,True,815,1,8,https://github.com/wooloo1121,Timescaledb store plugin,60,[],https://github.com/ovis-hpc/ovis/pull/562,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/562#issuecomment-748548319,"Store plugin saving data into TimescaleDB, developed based on the influx store plugin.","Hi @wooloo1121, the last thing is that this pull request can no longer be merged. You need to rebase your change on top of the current OVIS-4 top-of-tree.
You should be able to do something like this:
git fetch
git rebase -i origin/OVIS-4

The rebase will fail and you will have to resolve the conflicts. After doing so, you can force-push your changes back to the pull request branch.
I don't think you need any of the changes to the *.yaml files because the container should be updated at this point to include the dependencies that you yum-installed.
Please don't hesitate to post any questions you have if you run into problems with this process.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,562,2020-12-18T02:36:35Z,2020-12-27T19:35:22Z,2020-12-27T19:35:22Z,MERGED,True,815,1,8,https://github.com/wooloo1121,Timescaledb store plugin,60,[],https://github.com/ovis-hpc/ovis/pull/562,https://github.com/wooloo1121,3,https://github.com/ovis-hpc/ovis/pull/562#issuecomment-748578517,"Store plugin saving data into TimescaleDB, developed based on the influx store plugin.","Hi @wooloo1121, the last thing is that this pull request can no longer be merged. You need to rebase your change on top of the current OVIS-4 top-of-tree.
You should be able to do something like this:
git fetch
git rebase -i origin/OVIS-4

The rebase will fail and you will have to resolve the conflicts. After doing so, you can force-push your changes back to the pull request branch.
I don't think you need any of the changes to the *.yaml files because the container should be updated at this point to include the dependencies that you yum-installed.
Please don't hesitate to post any questions you have if you run into problems with this process.

Hi @tom95858, thank you so much for the instructions. It should be fine now.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,562,2020-12-18T02:36:35Z,2020-12-27T19:35:22Z,2020-12-27T19:35:22Z,MERGED,True,815,1,8,https://github.com/wooloo1121,Timescaledb store plugin,60,[],https://github.com/ovis-hpc/ovis/pull/562,https://github.com/wooloo1121,4,https://github.com/ovis-hpc/ovis/pull/562#issuecomment-748708060,"Store plugin saving data into TimescaleDB, developed based on the influx store plugin.",@tom95858 Should I combine these commits into one?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,562,2020-12-18T02:36:35Z,2020-12-27T19:35:22Z,2020-12-27T19:35:22Z,MERGED,True,815,1,8,https://github.com/wooloo1121,Timescaledb store plugin,60,[],https://github.com/ovis-hpc/ovis/pull/562,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/562#issuecomment-749112618,"Store plugin saving data into TimescaleDB, developed based on the influx store plugin.","@tom95858 Should I combine these commits into one?

I can squash them when I rebase and merge.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,562,2020-12-18T02:36:35Z,2020-12-27T19:35:22Z,2020-12-27T19:35:22Z,MERGED,True,815,1,8,https://github.com/wooloo1121,Timescaledb store plugin,60,[],https://github.com/ovis-hpc/ovis/pull/562,https://github.com/wooloo1121,6,https://github.com/ovis-hpc/ovis/pull/562#issuecomment-750793918,"Store plugin saving data into TimescaleDB, developed based on the influx store plugin.","I don't think you need any of the changes to the *.yaml files because the container should be updated at this point to include the dependencies that you yum-installed.

Hi @tom95858, It seems the image ovishpc/ovis-4.3.3-centos7 hasn't been updated yet so the ""Compatibility test with OVIS-4.3.3"" failed. And the environment for ""make dist"" test seems not updated either.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,562,2020-12-18T02:36:35Z,2020-12-27T19:35:22Z,2020-12-27T19:35:22Z,MERGED,True,815,1,8,https://github.com/wooloo1121,Timescaledb store plugin,60,[],https://github.com/ovis-hpc/ovis/pull/562,https://github.com/wooloo1121,7,https://github.com/ovis-hpc/ovis/pull/562#issuecomment-751340008,"Store plugin saving data into TimescaleDB, developed based on the influx store plugin.","Hi @tom95858, I just found a problem in the original influx store source. In config for measurement_limit, if this filed is set in config file then no matter what the value is the original code will return error. Since the logic is that if the value is invalid, measurement_limit is set to default value, so I removed this return statement.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,563,2020-12-18T21:37:56Z,2020-12-20T21:41:44Z,2022-01-18T04:10:25Z,MERGED,True,16,12,3,https://github.com/nichamon,Fix a share_lookup RBD reference leak in the ldms_set_delete path,1,[],https://github.com/ovis-hpc/ovis/pull/563,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/563,"The leak occurs when

there is a race between the ldms_set_delete() path and the disconnected
path (Note that the disconnected path releases the transport lock, takes
the set lock, releases the set lock, and retakes the transport lock),
*the ldms_set_delete() path removes the leak RBD from the transport’s RBD
tree while the disconnected path handles another RBD, and
LDMS fails to send the SET_DELETE request to the disconnected client,
i.e., zap_send() synchronously fails due to the disconnected connection.
The SET_DELETE context is freed upon the synchronous error.

LDMS releases the share_lookup RBD references either in the disconnected
path or in the SET_DELETE reply handling path. Since LDMS fails to send
the SET_DELETE request to the client, it will not receive the SET_DELETE
reply. Besides, the ldms_set_delete() path has removed all RBDs from all
associated LDMS transport’s RBD trees. Thus, the disconnected path has
no access to the RBDs. Therefore, LDMS did not release the share_lookup
RBD references in this scenario.","The leak occurs when

there is a race between the ldms_set_delete() path and the disconnected
path (Note that the disconnected path releases the transport lock, takes
the set lock, releases the set lock, and retakes the transport lock),
*the ldms_set_delete() path removes the leak RBD from the transport’s RBD
tree while the disconnected path handles another RBD, and
LDMS fails to send the SET_DELETE request to the disconnected client,
i.e., zap_send() synchronously fails due to the disconnected connection.
The SET_DELETE context is freed upon the synchronous error.

LDMS releases the share_lookup RBD references either in the disconnected
path or in the SET_DELETE reply handling path. Since LDMS fails to send
the SET_DELETE request to the client, it will not receive the SET_DELETE
reply. Besides, the ldms_set_delete() path has removed all RBDs from all
associated LDMS transport’s RBD trees. Thus, the disconnected path has
no access to the RBDs. Therefore, LDMS did not release the share_lookup
RBD references in this scenario.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,563,2020-12-18T21:37:56Z,2020-12-20T21:41:44Z,2022-01-18T04:10:25Z,MERGED,True,16,12,3,https://github.com/nichamon,Fix a share_lookup RBD reference leak in the ldms_set_delete path,1,[],https://github.com/ovis-hpc/ovis/pull/563,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/563#issuecomment-748338767,"The leak occurs when

there is a race between the ldms_set_delete() path and the disconnected
path (Note that the disconnected path releases the transport lock, takes
the set lock, releases the set lock, and retakes the transport lock),
*the ldms_set_delete() path removes the leak RBD from the transport’s RBD
tree while the disconnected path handles another RBD, and
LDMS fails to send the SET_DELETE request to the disconnected client,
i.e., zap_send() synchronously fails due to the disconnected connection.
The SET_DELETE context is freed upon the synchronous error.

LDMS releases the share_lookup RBD references either in the disconnected
path or in the SET_DELETE reply handling path. Since LDMS fails to send
the SET_DELETE request to the client, it will not receive the SET_DELETE
reply. Besides, the ldms_set_delete() path has removed all RBDs from all
associated LDMS transport’s RBD trees. Thus, the disconnected path has
no access to the RBDs. Therefore, LDMS did not release the share_lookup
RBD references in this scenario.","@tom95858 The patch has been tested with 2 test setups. Both setups use RDMA. The 1st-level aggregator is the daemon that Narate and I focus on for the share_lookup RBD reference leak.


Narate's setup has been running for about 5 hours. It is still running.
sampler daemons are flapped
One 1st-level aggregator
One 2nd-level aggregator is not flapped.


Nichamon's setup was stopped and checked the Valgrind result.
200 sampler daemons with 11 sets are flapped every 30 seconds.
One 1st-level aggregator was started with Valgrind.
One 2nd-level aggregator is flapped every 30 seconds.
The Valgrind result indicates that we are not leaking any RBDs anymore.


I believe that I didn't catch this leak when I tested my previous patch #548 because I built the binaries differently (I didn't turn on -D_REF_TRACK_ this time) and different transport (Last time I tested the patch in #548 with zap_sock).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,563,2020-12-18T21:37:56Z,2020-12-20T21:41:44Z,2022-01-18T04:10:25Z,MERGED,True,16,12,3,https://github.com/nichamon,Fix a share_lookup RBD reference leak in the ldms_set_delete path,1,[],https://github.com/ovis-hpc/ovis/pull/563,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/563#issuecomment-748517251,"The leak occurs when

there is a race between the ldms_set_delete() path and the disconnected
path (Note that the disconnected path releases the transport lock, takes
the set lock, releases the set lock, and retakes the transport lock),
*the ldms_set_delete() path removes the leak RBD from the transport’s RBD
tree while the disconnected path handles another RBD, and
LDMS fails to send the SET_DELETE request to the disconnected client,
i.e., zap_send() synchronously fails due to the disconnected connection.
The SET_DELETE context is freed upon the synchronous error.

LDMS releases the share_lookup RBD references either in the disconnected
path or in the SET_DELETE reply handling path. Since LDMS fails to send
the SET_DELETE request to the client, it will not receive the SET_DELETE
reply. Besides, the ldms_set_delete() path has removed all RBDs from all
associated LDMS transport’s RBD trees. Thus, the disconnected path has
no access to the RBDs. Therefore, LDMS did not release the share_lookup
RBD references in this scenario.",@tom95858 I made the change from a function to a #define.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,565,2020-12-24T01:38:38Z,2020-12-24T09:34:43Z,2020-12-24T09:34:43Z,MERGED,True,1,0,1,https://github.com/oceandlr,reset rc if mkdir failed because already exists,1,[],https://github.com/ovis-hpc/ovis/pull/565,https://github.com/oceandlr,1,https://github.com/ovis-hpc/ovis/pull/565,"Otherwise the store fails if the dir exists, even though the dir can be reused.","Otherwise the store fails if the dir exists, even though the dir can be reused.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,567,2020-12-27T19:36:22Z,2020-12-29T01:10:45Z,2021-01-02T17:08:10Z,CLOSED,False,0,0,0,https://github.com/tom95858,"Revert ""Timescaledb store plugin""",120,[],https://github.com/ovis-hpc/ovis/pull/567,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/567,Reverts #562,Reverts #562,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,567,2020-12-27T19:36:22Z,2020-12-29T01:10:45Z,2021-01-02T17:08:10Z,CLOSED,False,0,0,0,https://github.com/tom95858,"Revert ""Timescaledb store plugin""",120,[],https://github.com/ovis-hpc/ovis/pull/567,https://github.com/wooloo1121,2,https://github.com/ovis-hpc/ovis/pull/567#issuecomment-751541710,Reverts #562,"Reverts #562

Hi @tom95858, thank you for merge my pull request. But is there any problem that caused this?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,567,2020-12-27T19:36:22Z,2020-12-29T01:10:45Z,2021-01-02T17:08:10Z,CLOSED,False,0,0,0,https://github.com/tom95858,"Revert ""Timescaledb store plugin""",120,[],https://github.com/ovis-hpc/ovis/pull/567,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/567#issuecomment-751912012,Reverts #562,"I believe that something got a bit confused in Tom's git processes. This reverts things on a branch that is not consistent with the current state of the OVIS-4 branch, so I think it is safe for me to close this. If there was some reason to revert commit 7c985ad, titled ""Add timescaledb store plugin"", we would do that with a single revert commit, not like this.
I am going to close this PR on the assumption that this was part of an earlier attempt to cleanup a mistaken push.
@tom95858, if the state on OVIS-4 is not what you intended, and you are having trouble correcting it, just let me know. I can help with that.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,567,2020-12-27T19:36:22Z,2020-12-29T01:10:45Z,2021-01-02T17:08:10Z,CLOSED,False,0,0,0,https://github.com/tom95858,"Revert ""Timescaledb store plugin""",120,[],https://github.com/ovis-hpc/ovis/pull/567,https://github.com/tom95858,4,https://github.com/ovis-hpc/ovis/pull/567#issuecomment-751956039,Reverts #562,"Hi Karin,

No you absolutely did everything that was asked. However, when I initially
merged your request, I forgot to say ""squash"", so there were 60+ commits on
the top of the tree. So thinking I had time since it was Christmas, I
rebased and squashed your commits and then force-pushed them.
Unfortunately, I had one extra commit in my tree that I had forgotten
about. This is entirely on me.

Thanks for your code and your patience.

@christopher J. Morrone <morrone2@llnl.gov>  we can either revert that
commit (basically a patch that reverts the patch), or we can simply ""fix""
it. I have code that makes it better, but does not fix it. We can discuss
on another thread if you like, but basically it has to do with nnodes,
ncpus, gid, etc... that have a zero value at the time job_prolog event is
delivered... and I'm working through characterizing all of this.
…
On Mon, Dec 28, 2020 at 6:10 PM Christopher J. Morrone < ***@***.***> wrote:
 I believe that something got a bit confused in Tom's git processes. This
 reverts things on a branch that is not consistent with the current state of
 the OVIS-4 branch, so I think it is safe for me to close this. If there was
 some reason to revert commit 7c985ad
 <7c985ad>,
 titled ""Add timescaledb store plugin"", we would do that with a single
 revert commit, not like this.

 I am going to close this PR on the assumption that this was part of an
 earlier attempt to cleanup a mistaken push.

 @tom95858 <https://github.com/tom95858>, if the state on OVIS-4 is not
 what you intended, and you are having trouble correcting it, just let me
 know. I can help with that.

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#567 (comment)>, or
 unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ABVTPXBMDAT3EFUFOGA2BTDSXEUCHANCNFSM4VLD755A>
 .


-- 
Thomas Tucker, President, Open Grid Computing, Inc.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,573,2020-12-28T20:40:07Z,2020-12-28T20:49:08Z,2020-12-28T20:49:19Z,CLOSED,False,62,78,1,https://github.com/tom95858,"Bind job ""init""/""exit"" events to Job Prolog/Epilog",1,[],https://github.com/ovis-hpc/ovis/pull/573,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/573,"This is an initial refactoring of event binding in the
Spank plugin. This will have to be augmented because some
values that are available in the previous slurmstepd
callbacks have a zero value at prolog time.","This is an initial refactoring of event binding in the
Spank plugin. This will have to be augmented because some
values that are available in the previous slurmstepd
callbacks have a zero value at prolog time.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,573,2020-12-28T20:40:07Z,2020-12-28T20:49:08Z,2020-12-28T20:49:19Z,CLOSED,False,62,78,1,https://github.com/tom95858,"Bind job ""init""/""exit"" events to Job Prolog/Epilog",1,[],https://github.com/ovis-hpc/ovis/pull/573,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/573#issuecomment-751859716,"This is an initial refactoring of event binding in the
Spank plugin. This will have to be augmented because some
values that are available in the previous slurmstepd
callbacks have a zero value at prolog time.",Converting to draft...,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,577,2020-12-29T20:28:07Z,2020-12-30T18:34:06Z,2020-12-30T18:34:11Z,CLOSED,False,28,94,1,https://github.com/tom95858,Revert slurm_notifier commit,1,[],https://github.com/ovis-hpc/ovis/pull/577,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/577,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,577,2020-12-29T20:28:07Z,2020-12-30T18:34:06Z,2020-12-30T18:34:11Z,CLOSED,False,28,94,1,https://github.com/tom95858,Revert slurm_notifier commit,1,[],https://github.com/ovis-hpc/ovis/pull/577,https://github.com/morrone,2,https://github.com/ovis-hpc/ovis/pull/577#issuecomment-752232048,,"Please keep the standard git revert message, which would have been:
Revert ""Fix Slurm step handling in Spank plugin""

This reverts commit 4a28e2c73b1409ef8378785729780c88d62d50b0.

For those of us that are fluent in git, that message format makes it possible to instantly identify which commit in the history is being reverted.
You can add additional commentary after the standard message if so desired.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,577,2020-12-29T20:28:07Z,2020-12-30T18:34:06Z,2020-12-30T18:34:11Z,CLOSED,False,28,94,1,https://github.com/tom95858,Revert slurm_notifier commit,1,[],https://github.com/ovis-hpc/ovis/pull/577,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/577#issuecomment-752247896,,PR #579 has the correct commit message.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,578,2020-12-29T20:28:19Z,2021-01-08T17:34:31Z,2021-01-08T17:34:31Z,MERGED,True,7,11,2,https://github.com/morrone,Throw an error if auth enabled but openssl not found,1,[],https://github.com/ovis-hpc/ovis/pull/578,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/578,"The ovis_auth library has a hard dependency on openssl.  Change the configure
script to throw an error if ovis-auth is enabled, but openssl is not found.
Remove the HAVE_SSL variable, which was unused and would currently serve
little purpose.
Fixes #80","The ovis_auth library has a hard dependency on openssl.  Change the configure
script to throw an error if ovis-auth is enabled, but openssl is not found.
Remove the HAVE_SSL variable, which was unused and would currently serve
little purpose.
Fixes #80",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,579,2020-12-29T20:29:03Z,2020-12-30T18:33:45Z,2020-12-30T18:33:45Z,MERGED,True,28,94,1,https://github.com/morrone,"Revert ""Fix Slurm step handling in Spank plugin""",1,[],https://github.com/ovis-hpc/ovis/pull/579,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/579,This reverts commit 4a28e2c.,This reverts commit 4a28e2c.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,580,2020-12-29T20:47:50Z,2021-01-01T16:28:24Z,2021-01-01T16:28:24Z,MERGED,True,1,1,1,https://github.com/morrone,Fix build-test-ubuntu.yaml workflow,1,[],https://github.com/ovis-hpc/ovis/pull/580,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/580,"The workflow had two jobs with the same name, which hid the fact
that the rdma build on the ubuntu docker container was not working.
Fix the name of the rdma job.","The workflow had two jobs with the same name, which hid the fact
that the rdma build on the ubuntu docker container was not working.
Fix the name of the rdma job.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,580,2020-12-29T20:47:50Z,2021-01-01T16:28:24Z,2021-01-01T16:28:24Z,MERGED,True,1,1,1,https://github.com/morrone,Fix build-test-ubuntu.yaml workflow,1,[],https://github.com/ovis-hpc/ovis/pull/580,https://github.com/morrone,2,https://github.com/ovis-hpc/ovis/pull/580#issuecomment-752250715,"The workflow had two jobs with the same name, which hid the fact
that the rdma build on the ubuntu docker container was not working.
Fix the name of the rdma job.","@narategithub, does the ovishpc/ovis-ubuntu-build container have infiniband packages installed? The build is not passing when I fix the name of the job that uses ""configure --enable-rdma"".
Perhaps we should just remove this job from the ubuntu workflow rather than fixing the job name?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,581,2020-12-31T07:02:27Z,2020-12-31T08:36:39Z,2020-12-31T08:49:39Z,CLOSED,False,1,1,1,https://github.com/narategithub,Fix copy-paste error in Ubuntu github rdma build test,1,[],https://github.com/ovis-hpc/ovis/pull/581,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/581,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,581,2020-12-31T07:02:27Z,2020-12-31T08:36:39Z,2020-12-31T08:49:39Z,CLOSED,False,1,1,1,https://github.com/narategithub,Fix copy-paste error in Ubuntu github rdma build test,1,[],https://github.com/ovis-hpc/ovis/pull/581,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/581#issuecomment-752876297,,"@morrone the problem with the Ubuntu build test with RDMA were two folds: 1) docker image not having libibverbs-dev and librdmacm-dev installed, and 2) duplicate job name. It is strange that it was not throwing errors earlier. I'm sorry that you ran into it. I've just added the libibverbes-dev and librdmacm-dev into ovishpc/ovis-ubuntu-build image. This patch shall fix the problem you experienced in #580. Could you please rebase #580 after @tom95858 merged this in?
@tom95858 could you please merge this patch to fix Ubuntu build check before #580?
Happy New Year!",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,581,2020-12-31T07:02:27Z,2020-12-31T08:36:39Z,2020-12-31T08:49:39Z,CLOSED,False,1,1,1,https://github.com/narategithub,Fix copy-paste error in Ubuntu github rdma build test,1,[],https://github.com/ovis-hpc/ovis/pull/581,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/581#issuecomment-752889423,,"Yes, #580 is rebased now, so this is now redundant.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,581,2020-12-31T07:02:27Z,2020-12-31T08:36:39Z,2020-12-31T08:49:39Z,CLOSED,False,1,1,1,https://github.com/narategithub,Fix copy-paste error in Ubuntu github rdma build test,1,[],https://github.com/ovis-hpc/ovis/pull/581,https://github.com/narategithub,4,https://github.com/ovis-hpc/ovis/pull/581#issuecomment-752893034,,@morrone I was confused when you close my pull request. Just realized that I did exactly what you did in #580.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,582,2021-01-01T16:38:43Z,2021-01-01T16:56:05Z,2021-01-01T16:56:16Z,MERGED,True,0,4,1,https://github.com/tom95858,Remove EAGAIN check when read returns 0 (EOF),1,[],https://github.com/ovis-hpc/ovis/pull/582,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/582,"This can cause the I/O thread to spin when the peer
closes the connection.","This can cause the I/O thread to spin when the peer
closes the connection.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,583,2021-01-02T16:50:50Z,2021-01-08T17:11:15Z,2021-06-10T21:38:40Z,MERGED,True,267,148,3,https://github.com/tom95858,Refactor Slurm notifier and sampler event handling,1,[],https://github.com/ovis-hpc/ovis/pull/583,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/583,"slurm_notifier Spank plugin changes


Bind ""init""/""exit"" events to prolog/epilog spank callbacks

PrologFlags=Alloc will cause prolog events to be delivered
immediately as opposed to at the 1st job step. This is
particularly useful for salloc -N x bash jobs.
At prolog time NTASKS and NNODES is not available and
therefore before the first job step is launched, the
nnodes and ntasks values are zero



Add ""step_init""/""step_exit"" events

These events contain accurate values for ntasks and nnodes



slurm_sampler changes

Sampler binds job start/end times to the ""init""/""exit""
events
Job step start/end events do not modify the job start
and end times
Caveats:

Job task PID are updated at each job step and overwrite
any previous value
Job size begins at zero at salloc time and is updated
at each job-step



papi_sampler changes

Remove chatty messages that result from papi_sampler data
missing from subscriber_data","slurm_notifier Spank plugin changes


Bind ""init""/""exit"" events to prolog/epilog spank callbacks

PrologFlags=Alloc will cause prolog events to be delivered
immediately as opposed to at the 1st job step. This is
particularly useful for salloc -N x bash jobs.
At prolog time NTASKS and NNODES is not available and
therefore before the first job step is launched, the
nnodes and ntasks values are zero



Add ""step_init""/""step_exit"" events

These events contain accurate values for ntasks and nnodes



slurm_sampler changes

Sampler binds job start/end times to the ""init""/""exit""
events
Job step start/end events do not modify the job start
and end times
Caveats:

Job task PID are updated at each job step and overwrite
any previous value
Job size begins at zero at salloc time and is updated
at each job-step



papi_sampler changes

Remove chatty messages that result from papi_sampler data
missing from subscriber_data",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,583,2021-01-02T16:50:50Z,2021-01-08T17:11:15Z,2021-06-10T21:38:40Z,MERGED,True,267,148,3,https://github.com/tom95858,Refactor Slurm notifier and sampler event handling,1,[],https://github.com/ovis-hpc/ovis/pull/583,https://github.com/morrone,2,https://github.com/ovis-hpc/ovis/pull/583#issuecomment-754184214,"slurm_notifier Spank plugin changes


Bind ""init""/""exit"" events to prolog/epilog spank callbacks

PrologFlags=Alloc will cause prolog events to be delivered
immediately as opposed to at the 1st job step. This is
particularly useful for salloc -N x bash jobs.
At prolog time NTASKS and NNODES is not available and
therefore before the first job step is launched, the
nnodes and ntasks values are zero



Add ""step_init""/""step_exit"" events

These events contain accurate values for ntasks and nnodes



slurm_sampler changes

Sampler binds job start/end times to the ""init""/""exit""
events
Job step start/end events do not modify the job start
and end times
Caveats:

Job task PID are updated at each job step and overwrite
any previous value
Job size begins at zero at salloc time and is updated
at each job-step



papi_sampler changes

Remove chatty messages that result from papi_sampler data
missing from subscriber_data","@tom95858 , according to the slurm documentation, there is an environment variable named ""SLURM_JOB_NODELIST"" set when the job prolog script is called. It should be reasonable to parse that node list (in hostlist string format, I presume) to derive the job allocation's node count at prolog time.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,583,2021-01-02T16:50:50Z,2021-01-08T17:11:15Z,2021-06-10T21:38:40Z,MERGED,True,267,148,3,https://github.com/tom95858,Refactor Slurm notifier and sampler event handling,1,[],https://github.com/ovis-hpc/ovis/pull/583,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/583#issuecomment-754221594,"slurm_notifier Spank plugin changes


Bind ""init""/""exit"" events to prolog/epilog spank callbacks

PrologFlags=Alloc will cause prolog events to be delivered
immediately as opposed to at the 1st job step. This is
particularly useful for salloc -N x bash jobs.
At prolog time NTASKS and NNODES is not available and
therefore before the first job step is launched, the
nnodes and ntasks values are zero



Add ""step_init""/""step_exit"" events

These events contain accurate values for ntasks and nnodes



slurm_sampler changes

Sampler binds job start/end times to the ""init""/""exit""
events
Job step start/end events do not modify the job start
and end times
Caveats:

Job task PID are updated at each job step and overwrite
any previous value
Job size begins at zero at salloc time and is updated
at each job-step



papi_sampler changes

Remove chatty messages that result from papi_sampler data
missing from subscriber_data","Yeah, that's a good idea. Let me take a look at that. I had originally discounted that imagining full-machine jobs on Cory with 20k nodes and the performance impact of parsing that, but it's only a job startup.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,583,2021-01-02T16:50:50Z,2021-01-08T17:11:15Z,2021-06-10T21:38:40Z,MERGED,True,267,148,3,https://github.com/tom95858,Refactor Slurm notifier and sampler event handling,1,[],https://github.com/ovis-hpc/ovis/pull/583,https://github.com/tom95858,4,https://github.com/ovis-hpc/ovis/pull/583#issuecomment-754307725,"slurm_notifier Spank plugin changes


Bind ""init""/""exit"" events to prolog/epilog spank callbacks

PrologFlags=Alloc will cause prolog events to be delivered
immediately as opposed to at the 1st job step. This is
particularly useful for salloc -N x bash jobs.
At prolog time NTASKS and NNODES is not available and
therefore before the first job step is launched, the
nnodes and ntasks values are zero



Add ""step_init""/""step_exit"" events

These events contain accurate values for ntasks and nnodes



slurm_sampler changes

Sampler binds job start/end times to the ""init""/""exit""
events
Job step start/end events do not modify the job start
and end times
Caveats:

Job task PID are updated at each job step and overwrite
any previous value
Job size begins at zero at salloc time and is updated
at each job-step



papi_sampler changes

Remove chatty messages that result from papi_sampler data
missing from subscriber_data",SLURM_JOB_NODELIST is not set at slurm_spank_job_prolog time. I checked using both spank_getenv and getenv.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,583,2021-01-02T16:50:50Z,2021-01-08T17:11:15Z,2021-06-10T21:38:40Z,MERGED,True,267,148,3,https://github.com/tom95858,Refactor Slurm notifier and sampler event handling,1,[],https://github.com/ovis-hpc/ovis/pull/583,https://github.com/morrone,5,https://github.com/ovis-hpc/ovis/pull/583#issuecomment-754379063,"slurm_notifier Spank plugin changes


Bind ""init""/""exit"" events to prolog/epilog spank callbacks

PrologFlags=Alloc will cause prolog events to be delivered
immediately as opposed to at the 1st job step. This is
particularly useful for salloc -N x bash jobs.
At prolog time NTASKS and NNODES is not available and
therefore before the first job step is launched, the
nnodes and ntasks values are zero



Add ""step_init""/""step_exit"" events

These events contain accurate values for ntasks and nnodes



slurm_sampler changes

Sampler binds job start/end times to the ""init""/""exit""
events
Job step start/end events do not modify the job start
and end times
Caveats:

Job task PID are updated at each job step and overwrite
any previous value
Job size begins at zero at salloc time and is updated
at each job-step



papi_sampler changes

Remove chatty messages that result from papi_sampler data
missing from subscriber_data","SLURM_JOB_NODELIST is not set at slurm_spank_job_prolog time. I checked using both spank_getenv and getenv.

Yes, the documentation appears to be wrong. It is named ""SLURM_NODELIST"".
Edit: also possible that the variable changes in future releases...I didn't check that.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,583,2021-01-02T16:50:50Z,2021-01-08T17:11:15Z,2021-06-10T21:38:40Z,MERGED,True,267,148,3,https://github.com/tom95858,Refactor Slurm notifier and sampler event handling,1,[],https://github.com/ovis-hpc/ovis/pull/583,https://github.com/tom95858,6,https://github.com/ovis-hpc/ovis/pull/583#issuecomment-754439947,"slurm_notifier Spank plugin changes


Bind ""init""/""exit"" events to prolog/epilog spank callbacks

PrologFlags=Alloc will cause prolog events to be delivered
immediately as opposed to at the 1st job step. This is
particularly useful for salloc -N x bash jobs.
At prolog time NTASKS and NNODES is not available and
therefore before the first job step is launched, the
nnodes and ntasks values are zero



Add ""step_init""/""step_exit"" events

These events contain accurate values for ntasks and nnodes



slurm_sampler changes

Sampler binds job start/end times to the ""init""/""exit""
events
Job step start/end events do not modify the job start
and end times
Caveats:

Job task PID are updated at each job step and overwrite
any previous value
Job size begins at zero at salloc time and is updated
at each job-step



papi_sampler changes

Remove chatty messages that result from papi_sampler data
missing from subscriber_data","Ok, ill try that
…
On Mon, Jan 4, 2021, 9:07 PM Christopher J. Morrone < ***@***.***> wrote:
 SLURM_JOB_NODELIST is not set at slurm_spank_job_prolog time. I checked
 using both spank_getenv and getenv.

 Yes, the documentation appears to be wrong. It is named ""SLURM_NODELIST"".

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#583 (comment)>, or
 unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ABVTPXCBTISKGZEG7FGG6BLSYKF6XANCNFSM4VRFW56A>
 .",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,583,2021-01-02T16:50:50Z,2021-01-08T17:11:15Z,2021-06-10T21:38:40Z,MERGED,True,267,148,3,https://github.com/tom95858,Refactor Slurm notifier and sampler event handling,1,[],https://github.com/ovis-hpc/ovis/pull/583,https://github.com/tom95858,7,https://github.com/ovis-hpc/ovis/pull/583#issuecomment-755487651,"slurm_notifier Spank plugin changes


Bind ""init""/""exit"" events to prolog/epilog spank callbacks

PrologFlags=Alloc will cause prolog events to be delivered
immediately as opposed to at the 1st job step. This is
particularly useful for salloc -N x bash jobs.
At prolog time NTASKS and NNODES is not available and
therefore before the first job step is launched, the
nnodes and ntasks values are zero



Add ""step_init""/""step_exit"" events

These events contain accurate values for ntasks and nnodes



slurm_sampler changes

Sampler binds job start/end times to the ""init""/""exit""
events
Job step start/end events do not modify the job start
and end times
Caveats:

Job task PID are updated at each job step and overwrite
any previous value
Job size begins at zero at salloc time and is updated
at each job-step



papi_sampler changes

Remove chatty messages that result from papi_sampler data
missing from subscriber_data","Here are my findings:
salloc -N 8 bash
env | grep SLURM
SLURM_NODELIST=orion-iw-[01-08]
SLURM_JOB_NAME=bash
SLURM_NODE_ALIASES=(null)
SLURM_JOB_QOS=normal
SLURM_NNODES=8
SLURM_JOBID=698
SLURM_TASKS_PER_NODE=16(x8)
SLURM_JOB_ID=698
SLURM_SUBMIT_DIR=/home/tom/influx-test
SLURM_JOB_NODELIST=orion-iw-[01-08]
SLURM_CLUSTER_NAME=orion
SLURM_JOB_CPUS_PER_NODE=16(x8)
SLURM_SUBMIT_HOST=ovs-5416.ogc.int
SLURM_JOB_PARTITION=ldms
SLURM_JOB_NUM_NODES=8
This contains all the data we need to populate a reasonable ""job_size"" for the set.
However on the compute nodes where the spank plugins are running, these values are node specific, e.g.
srun -N 1 env | grep SLURM
SLURM_NODELIST=orion-iw-[01-08]
SLURM_JOB_NAME=bash
SLURM_JOB_QOS=normal
SLURM_NNODES=1
SLURM_JOBID=698
SLURM_TASKS_PER_NODE=1
SLURM_JOB_ID=698
SLURM_SUBMIT_DIR=/home/tom/influx-test
SLURM_JOB_NODELIST=orion-iw-[01-08]
SLURM_CLUSTER_NAME=orion
SLURM_JOB_CPUS_PER_NODE=16(x8)
SLURM_SUBMIT_HOST=ovs-5416.ogc.int
SLURM_JOB_PARTITION=ldms
SLURM_JOB_NUM_NODES=8
SLURM_PRIO_PROCESS=0
SLURM_UMASK=0002
SLURM_NTASKS=1
SLURM_NPROCS=1
SLURM_DISTRIBUTION=cyclic
SLURM_STEP_ID=0
SLURM_STEPID=0
SLURM_SRUN_COMM_PORT=32859
SLURM_STEP_NODELIST=orion-iw-01
SLURM_STEP_NUM_NODES=1
SLURM_STEP_NUM_TASKS=1
SLURM_STEP_TASKS_PER_NODE=1
SLURM_STEP_LAUNCHER_PORT=32859
SLURM_SRUN_COMM_HOST=192.168.2.1
SLURM_TOPOLOGY_ADDR=orion-iw-01
SLURM_TOPOLOGY_ADDR_PATTERN=node
SLURM_CPUS_ON_NODE=16
SLURM_TASK_PID=37165
SLURM_NODEID=0
SLURM_PROCID=0
SLURM_LOCALID=0
SLURM_LAUNCH_NODE_IPADDR=192.168.2.1
SLURM_GTIDS=0
SLURM_CHECKPOINT_IMAGE_DIR=/var/slurm/checkpoint
SLURM_JOB_UID=1002
SLURM_JOB_USER=tom
SLURM_JOB_GID=1002
SLURMD_NODENAME=orion-iw-01

So although we can determine NNODES at the allocated nodes, we can't compute the TASKS_PER_NODE because that is step specific.
So it's not clear to me that this is any better than what we have already.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,583,2021-01-02T16:50:50Z,2021-01-08T17:11:15Z,2021-06-10T21:38:40Z,MERGED,True,267,148,3,https://github.com/tom95858,Refactor Slurm notifier and sampler event handling,1,[],https://github.com/ovis-hpc/ovis/pull/583,https://github.com/morrone,8,https://github.com/ovis-hpc/ovis/pull/583#issuecomment-755789858,"slurm_notifier Spank plugin changes


Bind ""init""/""exit"" events to prolog/epilog spank callbacks

PrologFlags=Alloc will cause prolog events to be delivered
immediately as opposed to at the 1st job step. This is
particularly useful for salloc -N x bash jobs.
At prolog time NTASKS and NNODES is not available and
therefore before the first job step is launched, the
nnodes and ntasks values are zero



Add ""step_init""/""step_exit"" events

These events contain accurate values for ntasks and nnodes



slurm_sampler changes

Sampler binds job start/end times to the ""init""/""exit""
events
Job step start/end events do not modify the job start
and end times
Caveats:

Job task PID are updated at each job step and overwrite
any previous value
Job size begins at zero at salloc time and is updated
at each job-step



papi_sampler changes

Remove chatty messages that result from papi_sampler data
missing from subscriber_data","Right, that matches what I have been saying. ""tasks per node"" is inherently a step specific concept. The allocation can't know ahead of time how many tasks a step will put on each node in the allocation. slurm allows one to set defaults for task count that a step launch can choose to employ or ignore. But those default numbers in the allocation state would not have been useful for us even if they were available in environment variables. You shouldn't try to fill in the task count at prolog/epilog time.
BUT you probably need to take care here too!  Here is an example of the sort of thing you would need to understand and parse if you attempt to use those fields:
SLURM_STEP_NUM_NODES=4
SLURM_STEP_NUM_TASKS=21
SLURM_STEP_TASKS_PER_NODE=6,5(x3)

What this is telling you is that 6 tasks were assigned to one node, and three nodes each got 5 tasks. I don't know if this string is ordered to match SLURM_NODELIST order or not.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,583,2021-01-02T16:50:50Z,2021-01-08T17:11:15Z,2021-06-10T21:38:40Z,MERGED,True,267,148,3,https://github.com/tom95858,Refactor Slurm notifier and sampler event handling,1,[],https://github.com/ovis-hpc/ovis/pull/583,https://github.com/baallan,9,https://github.com/ovis-hpc/ovis/pull/583#issuecomment-756206809,"slurm_notifier Spank plugin changes


Bind ""init""/""exit"" events to prolog/epilog spank callbacks

PrologFlags=Alloc will cause prolog events to be delivered
immediately as opposed to at the 1st job step. This is
particularly useful for salloc -N x bash jobs.
At prolog time NTASKS and NNODES is not available and
therefore before the first job step is launched, the
nnodes and ntasks values are zero



Add ""step_init""/""step_exit"" events

These events contain accurate values for ntasks and nnodes



slurm_sampler changes

Sampler binds job start/end times to the ""init""/""exit""
events
Job step start/end events do not modify the job start
and end times
Caveats:

Job task PID are updated at each job step and overwrite
any previous value
Job size begins at zero at salloc time and is updated
at each job-step



papi_sampler changes

Remove chatty messages that result from papi_sampler data
missing from subscriber_data","I cannot help wondering if, at the level of detail being discussed here, we haven't gone down the rabbit hole.
And by that I mean all this fine-grained job detail stuff would be far more reliably translated from the slurm (or other resource manager) system database into some sos/ovis/other database with a periodic/db-event-driven query engine that maps details from one database to another instead of trying to trap event streams. In fact we have application teams doing this (sans ldms) already.
The original jobid sampler (V2/V3) tried to capture at the compute node only the job id present on the node at sample time. This is the minimum needed to get most useful analyses done in the presence of clock discrepancies between compute node and slurm database. Yes clock issues should be rare, but we saw them happen. In particular, there (historically) have been skew bugs and bugs where the end time of a job does not get logged properly in the job history database, but we could easily pick the job end time (to the nearest sample interval) off the ldms compute node jobid data. All the other analysis types (step, task, nodelist etc) can be done better from directly db>db copied data using the node-recorded jobid list as a sanity check/fast query pre-filter.
This approach also gets us out of the business of coding to the evolving event hooks of every hpc resource manager/scheduler.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,583,2021-01-02T16:50:50Z,2021-01-08T17:11:15Z,2021-06-10T21:38:40Z,MERGED,True,267,148,3,https://github.com/tom95858,Refactor Slurm notifier and sampler event handling,1,[],https://github.com/ovis-hpc/ovis/pull/583,https://github.com/tom95858,10,https://github.com/ovis-hpc/ovis/pull/583#issuecomment-756227501,"slurm_notifier Spank plugin changes


Bind ""init""/""exit"" events to prolog/epilog spank callbacks

PrologFlags=Alloc will cause prolog events to be delivered
immediately as opposed to at the 1st job step. This is
particularly useful for salloc -N x bash jobs.
At prolog time NTASKS and NNODES is not available and
therefore before the first job step is launched, the
nnodes and ntasks values are zero



Add ""step_init""/""step_exit"" events

These events contain accurate values for ntasks and nnodes



slurm_sampler changes

Sampler binds job start/end times to the ""init""/""exit""
events
Job step start/end events do not modify the job start
and end times
Caveats:

Job task PID are updated at each job step and overwrite
any previous value
Job size begins at zero at salloc time and is updated
at each job-step



papi_sampler changes

Remove chatty messages that result from papi_sampler data
missing from subscriber_data","On Wed, Jan 6, 2021 at 5:11 PM Christopher J. Morrone < ***@***.***> wrote:
 Right, that matches what I have been saying. ""tasks per node"" is
 *inherently* a step specific concept. The allocation can't know ahead of
 time how many tasks a step will put on each node in the allocation. slurm
 allows one to set defaults for task count that a step launch can choose to
 employ or ignore. But those default numbers in the allocation state would
 not have been useful for us even if they were available in environment
 variables. You shouldn't try to fill in the task count at prolog/epilog
 time.

Right, the point of the note was to prove that out in light of your
suggestion regarding SLURM_NODELIST, etc...
 BUT you probably need to take care here too! Here is an example of the
 sort of thing you would need to understand and parse if you attempt to use
 those fields:

 SLURM_STEP_NUM_NODES=4
 SLURM_STEP_NUM_TASKS=21
 SLURM_STEP_TASKS_PER_NODE=6,5(x3)

 What this is telling you is that 6 tasks were assigned to one node, and
 three nodes each got 5 tasks. I don't know if this string is ordered to
 match SLURM_NODELIST order or not.

According to the docs, it is, but there are spank variables that can be
queried directly with spank_get_item that doesn't require parsing strings.

One other thing before I post another version, should we set the app_id to
the current step_id? Right now, app_id is always zero. My sense is that it
could be useful.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,584,2021-01-02T17:53:30Z,2021-01-08T17:00:03Z,2021-01-08T17:00:07Z,MERGED,True,15,10,2,https://github.com/tom95858,Fix endpoint ref count issue in CONNECT_ERROR path,1,[],https://github.com/ovis-hpc/ovis/pull/584,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/584,"The passive side CONNECT_ERROR path drops an extra reference
that causes the zap_interpose_cb to crash when it de-references
the endpoint.
Also took the connect reference before the call to zap_accept to ensure
that the reference is taken before the callback provided in zap_accept
is called.
The bug is triggered when the remote peer disconnects before the
zap_accept ACCEPT/ACK sequence is completed resulting in a
CONNECT_ERROR event being delivered to ldms_zap_auto_cb","The passive side CONNECT_ERROR path drops an extra reference
that causes the zap_interpose_cb to crash when it de-references
the endpoint.
Also took the connect reference before the call to zap_accept to ensure
that the reference is taken before the callback provided in zap_accept
is called.
The bug is triggered when the remote peer disconnects before the
zap_accept ACCEPT/ACK sequence is completed resulting in a
CONNECT_ERROR event being delivered to ldms_zap_auto_cb",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,586,2021-01-07T21:38:37Z,2021-02-24T19:43:10Z,2021-02-24T19:43:11Z,MERGED,True,8,10,3,https://github.com/Snell1224,Modified test list for papi/syspapi samplers & removed rapl,1,[],https://github.com/ovis-hpc/ovis/pull/586,https://github.com/Snell1224,1,https://github.com/ovis-hpc/ovis/pull/586,"In reference to pull request #527 , the ldms-static-test-list has been updated to correctly check the syspapi and papi sampler options. In configure.ac, the ""OPTION_DEFAULT_DISABLE/ENABLE"" that was originally used for the syspapi/papi samplers was changed to ""HAVE_LIBPAPI"" and ""HAVE_LIBPFM"".


Removed rapl in ldms-static-test-list. The check for this was removed in configure.ac and from what I understand, it is an experimental/retired sampler and don't think it will hurt to remove it from the make ""check/installcheck"" testing.


Updated the ldms-run-static-tests man page to the correct script type (.sh to .test).","In reference to pull request #527 , the ldms-static-test-list has been updated to correctly check the syspapi and papi sampler options. In configure.ac, the ""OPTION_DEFAULT_DISABLE/ENABLE"" that was originally used for the syspapi/papi samplers was changed to ""HAVE_LIBPAPI"" and ""HAVE_LIBPFM"".


Removed rapl in ldms-static-test-list. The check for this was removed in configure.ac and from what I understand, it is an experimental/retired sampler and don't think it will hurt to remove it from the make ""check/installcheck"" testing.


Updated the ldms-run-static-tests man page to the correct script type (.sh to .test).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,588,2021-01-12T19:15:59Z,2021-01-12T21:54:47Z,2021-01-12T21:54:48Z,CLOSED,False,40,9,1,https://github.com/narategithub,Fix spank_notifier init event,1,[],https://github.com/ovis-hpc/ovis/pull/588,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/588,"spank_notifier init event was created in job prolog, which is a
job_script context. User-specified environment variables (such as
SUBSCRIBER_DATA) are not available in job_script context. In fact,
SLURM_JOB_NAME, SLURM_JOB_USER are also not available in job_script
context. This made papi_sampler ignored all jobs.
This patch moves the creation/sending of the init event into
slurm_spank_init() and sends the init event only if it is the first step
(JOB_STEPID=0) on each participated node.
NOTE1: This has passed papi_sampler_test in ldms-test repository
(commit id: 4d2f29a). Without this patch, the test failed.
NOTE2: This patch has not yet addressed papi_sampler to handle
multi-step jobs. It shall be addressed separately.","spank_notifier init event was created in job prolog, which is a
job_script context. User-specified environment variables (such as
SUBSCRIBER_DATA) are not available in job_script context. In fact,
SLURM_JOB_NAME, SLURM_JOB_USER are also not available in job_script
context. This made papi_sampler ignored all jobs.
This patch moves the creation/sending of the init event into
slurm_spank_init() and sends the init event only if it is the first step
(JOB_STEPID=0) on each participated node.
NOTE1: This has passed papi_sampler_test in ldms-test repository
(commit id: 4d2f29a). Without this patch, the test failed.
NOTE2: This patch has not yet addressed papi_sampler to handle
multi-step jobs. It shall be addressed separately.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,588,2021-01-12T19:15:59Z,2021-01-12T21:54:47Z,2021-01-12T21:54:48Z,CLOSED,False,40,9,1,https://github.com/narategithub,Fix spank_notifier init event,1,[],https://github.com/ovis-hpc/ovis/pull/588,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/588#issuecomment-759060696,"spank_notifier init event was created in job prolog, which is a
job_script context. User-specified environment variables (such as
SUBSCRIBER_DATA) are not available in job_script context. In fact,
SLURM_JOB_NAME, SLURM_JOB_USER are also not available in job_script
context. This made papi_sampler ignored all jobs.
This patch moves the creation/sending of the init event into
slurm_spank_init() and sends the init event only if it is the first step
(JOB_STEPID=0) on each participated node.
NOTE1: This has passed papi_sampler_test in ldms-test repository
(commit id: 4d2f29a). Without this patch, the test failed.
NOTE2: This patch has not yet addressed papi_sampler to handle
multi-step jobs. It shall be addressed separately.","Narate, please read the commentary on the slurm_notifier pull request.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,589,2021-01-15T21:05:23Z,2021-01-16T19:05:20Z,2021-01-16T19:05:24Z,MERGED,True,91,63,3,https://github.com/tom95858,Support for multi-step jobs in PAPI sampler.,2,[],https://github.com/ovis-hpc/ovis/pull/589,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/589,"These changes move the SUBSCRIBER_DATA field to the step_init event so that each job step can have it's own SUBSCRIBER_DATA value.
The PAPI sampler is updated to support multi-step jobs. Each step in the job has it's own metric set; the set name is constructed with a suffix of <job_id> ""."" <step_id>.
Both serial and overlapping job steps are supported.","These changes move the SUBSCRIBER_DATA field to the step_init event so that each job step can have it's own SUBSCRIBER_DATA value.
The PAPI sampler is updated to support multi-step jobs. Each step in the job has it's own metric set; the set name is constructed with a suffix of <job_id> ""."" <step_id>.
Both serial and overlapping job steps are supported.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,589,2021-01-15T21:05:23Z,2021-01-16T19:05:20Z,2021-01-16T19:05:24Z,MERGED,True,91,63,3,https://github.com/tom95858,Support for multi-step jobs in PAPI sampler.,2,[],https://github.com/ovis-hpc/ovis/pull/589,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/589#issuecomment-761299549,"These changes move the SUBSCRIBER_DATA field to the step_init event so that each job step can have it's own SUBSCRIBER_DATA value.
The PAPI sampler is updated to support multi-step jobs. Each step in the job has it's own metric set; the set name is constructed with a suffix of <job_id> ""."" <step_id>.
Both serial and overlapping job steps are supported.",@tom95858 I'll also update papi_sampler_test and papi_store_test to include multi-step jobs. But this patch passed the existing tests (that was previously failed).,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,590,2021-01-16T22:20:47Z,2021-01-17T04:25:22Z,2021-01-17T04:25:32Z,MERGED,True,306,4,10,https://github.com/tom95858,Prdcr set stats,2,[],https://github.com/ovis-hpc/ovis/pull/590,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/590,"Add producer and set statistics commands

```

These command shows summary producer and set statistics as follows:
Producer Stats - 1920us
Name                 Count
-------------------- ----------------
prdcr_count                      9750
stopped_count                    7312
disconnected_count               1483
connecting_count                    0
connected_count                   955
stopping_count                      0
set_count                        1910

and set statistics:

sock:nid00018:10001> set_stats
Set Stats - 74us
Name                 Count
-------------------- ----------------
active_count                        3
deleting_count                      0
mem_total_kb                      512
mem_free_kb                       484
mem_used_kb                        28","Add producer and set statistics commands

```

These command shows summary producer and set statistics as follows:
Producer Stats - 1920us
Name                 Count
-------------------- ----------------
prdcr_count                      9750
stopped_count                    7312
disconnected_count               1483
connecting_count                    0
connected_count                   955
stopping_count                      0
set_count                        1910

and set statistics:

sock:nid00018:10001> set_stats
Set Stats - 74us
Name                 Count
-------------------- ----------------
active_count                        3
deleting_count                      0
mem_total_kb                      512
mem_free_kb                       484
mem_used_kb                        28",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,591,2021-01-17T05:48:31Z,2021-01-18T05:05:06Z,2022-01-18T04:10:27Z,MERGED,True,143,0,2,https://github.com/nichamon,Add prdcr_stats and set_stats to ldmsctl,1,[],https://github.com/ovis-hpc/ovis/pull/591,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/591,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,591,2021-01-17T05:48:31Z,2021-01-18T05:05:06Z,2022-01-18T04:10:27Z,MERGED,True,143,0,2,https://github.com/nichamon,Add prdcr_stats and set_stats to ldmsctl,1,[],https://github.com/ovis-hpc/ovis/pull/591,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/591#issuecomment-761957315,,"I know there is a lot of mixed messaging about this, but free() checks for NULL. So the additional check in our code is just a waste of ergs.
From the free man page
...
The  free() function shall cause the space pointed to by ptr to be deallocated; that is, made available for further allocation. If ptr is a null pointer, no action shall occur.
...",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,591,2021-01-17T05:48:31Z,2021-01-18T05:05:06Z,2022-01-18T04:10:27Z,MERGED,True,143,0,2,https://github.com/nichamon,Add prdcr_stats and set_stats to ldmsctl,1,[],https://github.com/ovis-hpc/ovis/pull/591,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/591#issuecomment-761960935,,"I know there is a lot of mixed messaging about this, but free() checks for NULL. So the additional check in our code is just a waste of ergs.
From the free man page
...
The free() function shall cause the space pointed to by ptr to be deallocated; that is, made available for further allocation. If ptr is a null pointer, no action shall occur.
...

Got it. I'll remove the commit that check for NULL points before calling free() and rename the pull request.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,592,2021-01-18T03:55:13Z,2021-03-12T19:31:06Z,2022-01-18T04:09:02Z,MERGED,True,83,23,1,https://github.com/nichamon,Fix the push path and the test_ldms_push program,1,[],https://github.com/ovis-hpc/ovis/pull/592,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/592,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,592,2021-01-18T03:55:13Z,2021-03-12T19:31:06Z,2022-01-18T04:09:02Z,MERGED,True,83,23,1,https://github.com/nichamon,Fix the push path and the test_ldms_push program,1,[],https://github.com/ovis-hpc/ovis/pull/592,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/592#issuecomment-761974181,,"The bug was found because LDMS fails the test case of canceling push in the test_ldms_push program. The symptom is that push could not be canceled. The cause is that the push path called ldms_lookup_rbd(), which could return any of the RBDs that correspond to the transport and the set. A symptom is that push could not be canceled. Another symptom is that new RBDs could be allocated every time LDMS receives a push register request instead of updating an existing push RBD.
After I fixed the call of ldms_lookup_rbd(), I found the reference problems. An RBD reference is taken every time LDMS receives a push register request. This is unnecessary. Also, process_cancel_push_request() calls __ldms_free_rbd() which will put back the ""rendezvous_push"" reference twice. It puts back one reference extra.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,592,2021-01-18T03:55:13Z,2021-03-12T19:31:06Z,2022-01-18T04:09:02Z,MERGED,True,83,23,1,https://github.com/nichamon,Fix the push path and the test_ldms_push program,1,[],https://github.com/ovis-hpc/ovis/pull/592,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/592#issuecomment-761976463,,"Without the patch to ldms_xprt, clients may not be able to cancel push updates. However, it will receive push updates. If the updater with the push mode has been restarted, the client may receive multiple push updates when the set got changed on the server.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,592,2021-01-18T03:55:13Z,2021-03-12T19:31:06Z,2022-01-18T04:09:02Z,MERGED,True,83,23,1,https://github.com/nichamon,Fix the push path and the test_ldms_push program,1,[],https://github.com/ovis-hpc/ovis/pull/592,https://github.com/tom95858,4,https://github.com/ovis-hpc/ovis/pull/592#issuecomment-789323250,,@nichamon what is the status of this pull request?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,592,2021-01-18T03:55:13Z,2021-03-12T19:31:06Z,2022-01-18T04:09:02Z,MERGED,True,83,23,1,https://github.com/nichamon,Fix the push path and the test_ldms_push program,1,[],https://github.com/ovis-hpc/ovis/pull/592,https://github.com/nichamon,5,https://github.com/ovis-hpc/ovis/pull/592#issuecomment-792375073,,"@tom95858 I have tested the patch on Voltrino. No crashes and aggregators received the data as expected in the push mode. The cancel push path works properly.

sampler daemons: 200 daemons x 5 nodes & 11 sets per daemon. All sampler daemons killed 2 minutes after they started and restarted again in 30 seconds.
agg11 and agg12: each connected to 500 sampler daemons.
agg21 connected to agg11 and agg12. agg21 had 2 updaters: one updater for each agg11 and agg12. Both Updaters used the onchange push mode. The updater for agg11's sets was stopped and started periodically to test the cancel push path.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,592,2021-01-18T03:55:13Z,2021-03-12T19:31:06Z,2022-01-18T04:09:02Z,MERGED,True,83,23,1,https://github.com/nichamon,Fix the push path and the test_ldms_push program,1,[],https://github.com/ovis-hpc/ovis/pull/592,https://github.com/tom95858,6,https://github.com/ovis-hpc/ovis/pull/592#issuecomment-793002140,,"It's showing as WIP, is this ready for review yet?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,592,2021-01-18T03:55:13Z,2021-03-12T19:31:06Z,2022-01-18T04:09:02Z,MERGED,True,83,23,1,https://github.com/nichamon,Fix the push path and the test_ldms_push program,1,[],https://github.com/ovis-hpc/ovis/pull/592,https://github.com/tom95858,7,https://github.com/ovis-hpc/ovis/pull/592#issuecomment-796052257,,"@nichamon, I don't think we need the push-mode RBD ... correct? I don't believe that it's used. Am I missing something here?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,592,2021-01-18T03:55:13Z,2021-03-12T19:31:06Z,2022-01-18T04:09:02Z,MERGED,True,83,23,1,https://github.com/nichamon,Fix the push path and the test_ldms_push program,1,[],https://github.com/ovis-hpc/ovis/pull/592,https://github.com/nichamon,8,https://github.com/ovis-hpc/ovis/pull/592#issuecomment-796504768,,"Currently, ldms_xprt_push iterates through set->remote_rbd_list and sends the set content when it finds a push rbd. The bottomline is that LDMS uses push rbd to tracks if a client has register for push or not. However, we don't really need it. We could add a push_flag to the rbd structure similar to the notify mechanism. Also, the push registration logic doesn't need zap_share anymore.
I didn't remove the push_rbd in this patch because they will be gone when the logic (ported from master) that completely removes the rbd structure from LDMS is merged.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,593,2021-01-18T04:46:46Z,2021-01-18T15:45:58Z,2022-01-18T04:10:28Z,MERGED,True,0,1,1,https://github.com/nichamon,Not put back a prd_set reference when the push updater stops,1,[],https://github.com/ovis-hpc/ovis/pull/593,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/593,"A push updater does not take any producer set references when it starts.
Putting a producer set reference back when it stops will cause a
use-after-free issue.","A push updater does not take any producer set references when it starts.
Putting a producer set reference back when it stops will cause a
use-after-free issue.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,593,2021-01-18T04:46:46Z,2021-01-18T15:45:58Z,2022-01-18T04:10:28Z,MERGED,True,0,1,1,https://github.com/nichamon,Not put back a prd_set reference when the push updater stops,1,[],https://github.com/ovis-hpc/ovis/pull/593,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/593#issuecomment-761982513,"A push updater does not take any producer set references when it starts.
Putting a producer set reference back when it stops will cause a
use-after-free issue.","Hi Mon, should it take a reference?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,593,2021-01-18T04:46:46Z,2021-01-18T15:45:58Z,2022-01-18T04:10:28Z,MERGED,True,0,1,1,https://github.com/nichamon,Not put back a prd_set reference when the push updater stops,1,[],https://github.com/ovis-hpc/ovis/pull/593,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/593#issuecomment-762324645,"A push updater does not take any producer set references when it starts.
Putting a producer set reference back when it stops will cause a
use-after-free issue.","Hi Mon, should it take a reference?

Hi Tom, I think we don't need to take a producer set reference when the updater registers for push updates. I also found the commit that you removed the line that took the reference -- commit 5d1e528. The message is ""The reference didn't actually serve any purpose because it was taken in the updater which may not be started. This makes it impossible to tell when the reference can actually be dropped. The reference is removed.""
I agree with the message. Producers have no idea that an updater has taken a push reference, so there are no ways that the producers will put back the push reference. On the other hand, updaters have no ideas when a connection is gone, so they cannot put back the push reference upon a DISCONNECTED event. The producer sets will be left dangling.
When an updater cancels a push register, it iterates through the producer's set tree. The updater doesn't hold a handle to producer sets, so it is safe not to take the push reference when the updater registers for push updates.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,593,2021-01-18T04:46:46Z,2021-01-18T15:45:58Z,2022-01-18T04:10:28Z,MERGED,True,0,1,1,https://github.com/nichamon,Not put back a prd_set reference when the push updater stops,1,[],https://github.com/ovis-hpc/ovis/pull/593,https://github.com/tom95858,4,https://github.com/ovis-hpc/ovis/pull/593#issuecomment-762345627,"A push updater does not take any producer set references when it starts.
Putting a producer set reference back when it stops will cause a
use-after-free issue.","Great, thanks for the explanation.
…
On Mon, Jan 18, 2021 at 8:37 AM nichamon ***@***.***> wrote:
 Hi Mon, should it take a reference?

 Hi Tom, I think we don't need to take a producer set reference when the
 updater registers for push updates. I also found the commit that you
 removed the line that took the reference -- commit 5d1e528
 <5d1e528>.
 The message is ""The reference didn't actually serve any purpose because it
 was taken in the updater which may not be started. This makes it impossible
 to tell when the reference can actually be dropped. The reference is
 removed.""

 I agree with the message. Producers have no idea that an updater has taken
 a push reference, so there are no ways that the producers will put back the
 push reference. On the other hand, updaters have no ideas when a connection
 is gone, so they cannot put back the push reference upon a DISCONNECTED
 event. The producer sets will be left dangling.

 When an updater cancels a push register, it iterates through the
 producer's set tree. The updater doesn't hold a handle to producer sets, so
 it is safe not to take the push reference when the updater registers for
 push updates.

 —
 You are receiving this because your review was requested.
 Reply to this email directly, view it on GitHub
 <#593 (comment)>, or
 unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ABVTPXCH7L27PDKDVYQ2AR3S2RITRANCNFSM4WGW3VLQ>
 .


-- 
Thomas Tucker, President, Open Grid Computing, Inc.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,594,2021-01-18T18:51:42Z,2021-01-18T19:18:00Z,2021-01-18T19:18:05Z,MERGED,True,53,45,2,https://github.com/tom95858,Move job_user and job_name to step_init,1,[],https://github.com/ovis-hpc/ovis/pull/594,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/594,"The job_user and job_name environment variables are not set in the
job_prolog context.","The job_user and job_name environment variables are not set in the
job_prolog context.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,597,2021-01-19T19:26:20Z,2021-02-10T00:41:36Z,2021-02-10T00:41:36Z,MERGED,True,1481,2,6,https://github.com/narategithub,Add enumeration compatibility checking,1,[],https://github.com/ovis-hpc/ovis/pull/597,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/597,"This commit add a github action checking that the values of enumerations
in .github/enum-check/ovis-4.3.3-enum.list are preserved and
compatible with OVIS-4.3.3.","This commit add a github action checking that the values of enumerations
in .github/enum-check/ovis-4.3.3-enum.list are preserved and
compatible with OVIS-4.3.3.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,597,2021-01-19T19:26:20Z,2021-02-10T00:41:36Z,2021-02-10T00:41:36Z,MERGED,True,1481,2,6,https://github.com/narategithub,Add enumeration compatibility checking,1,[],https://github.com/ovis-hpc/ovis/pull/597,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/597#issuecomment-763150419,"This commit add a github action checking that the values of enumerations
in .github/enum-check/ovis-4.3.3-enum.list are preserved and
compatible with OVIS-4.3.3.",Can we extend this to include checks for 4.3.4 <-> 4.3.5 <-> 4.3.6?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,597,2021-01-19T19:26:20Z,2021-02-10T00:41:36Z,2021-02-10T00:41:36Z,MERGED,True,1481,2,6,https://github.com/narategithub,Add enumeration compatibility checking,1,[],https://github.com/ovis-hpc/ovis/pull/597,https://github.com/narategithub,3,https://github.com/ovis-hpc/ovis/pull/597#issuecomment-763151964,"This commit add a github action checking that the values of enumerations
in .github/enum-check/ovis-4.3.3-enum.list are preserved and
compatible with OVIS-4.3.3.",Sure. I'll do it tonight.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,597,2021-01-19T19:26:20Z,2021-02-10T00:41:36Z,2021-02-10T00:41:36Z,MERGED,True,1481,2,6,https://github.com/narategithub,Add enumeration compatibility checking,1,[],https://github.com/ovis-hpc/ovis/pull/597,https://github.com/narategithub,4,https://github.com/ovis-hpc/ovis/pull/597#issuecomment-763311405,"This commit add a github action checking that the values of enumerations
in .github/enum-check/ovis-4.3.3-enum.list are preserved and
compatible with OVIS-4.3.3.","@tom95858,
I think I got a little confused with your request 😵 The action checks the preservation of enums from 4.3.3 against the code in the (future) pull request. My guess is that you want the same enum check against the (future) pull request with 4.3.4, 4.3.5 and 4.3.6 too, right?
Anyway, the script is also capable of listing all enumeration values ... so with diff, the changes in enumerations from 4.3.3<-->4.3.4<-->4.3.5<-->4.3.6 are as follows:
(We can ignore the *_LAST and LDMSD_NOTSUPPORT_REQ since they're the last enum that are subject to change. The + new entries should be fine, but the - removed or modified entries may break the network protocol compatibility).
4.3.3 --> 4.3.4
--- 4.3.3.list  2021-01-20 03:31:28.694040211 +0000                              
+++ 4.3.4.list  2021-01-20 03:26:17.045994232 +0000                              
@@ -507,6 +507,7 @@                                                              
 KLDMS_REQ_PUBLISH_SET=2                                                         
 KLDMS_REQ_UNPUBLISH_SET=3                                                       
 KLDMS_REQ_UPDATE_SET=4                                                          
+LDMSD_ATTR_AUTH=35                                                              
 LDMSD_ATTR_AUTO_INTERVAL=31                                                     
 LDMSD_ATTR_AUTO_SWITCH=28                                                       
 LDMSD_ATTR_BASE=18                                                              
@@ -517,7 +518,7 @@                                                              
 LDMSD_ATTR_INSTANCE=7                                                           
 LDMSD_ATTR_INTERVAL=2                                                           
 LDMSD_ATTR_JSON=26                                                              
-LDMSD_ATTR_LAST=35                                                              
+LDMSD_ATTR_LAST=37                                                              
 LDMSD_ATTR_LEVEL=20                                                             
 LDMSD_ATTR_MATCH=11                                                             
 LDMSD_ATTR_METRIC=15                                                            
@@ -532,6 +533,7 @@                                                              
 LDMSD_ATTR_PUSH=23                                                              
 LDMSD_ATTR_REC_LEN=25                                                           
 LDMSD_ATTR_REGEX=4                                                              
+LDMSD_ATTR_RESET=36                                                             
 LDMSD_ATTR_SCHEMA=14                                                            
 LDMSD_ATTR_STREAM=34                                                            
 LDMSD_ATTR_STRING=16                                                            
@@ -543,6 +545,10 @@                                                             
 LDMSD_ATTR_UDATA=17                                                             
 LDMSD_ATTR_UID=32                                                               
 LDMSD_ATTR_XPRT=8                                                               
+LDMSD_AUTH_ADD_REQ=2560                                                         
+LDMSD_AUTH_DEL_REQ=2561                                                         
+LDMSD_CFGOBJ_AUTH=5                                                             
+LDMSD_CFGOBJ_LISTEN=4                                                           
 LDMSD_CFGOBJ_PRDCR=1                                                            
 LDMSD_CFGOBJ_STRGP=3                                                            
 LDMSD_CFGOBJ_UPDTR=2                                                            
@@ -574,13 +580,14 @@                                                            
 LDMSD_LDEBUG=0                                                                  
 LDMSD_LERROR=3                                                                  
 LDMSD_LINFO=1                                                                   
+LDMSD_LISTEN_REQ=1550                                                           
 LDMSD_LLASTLEVEL=6                                                              
 LDMSD_LNONE=-1                                                                  
 LDMSD_LOGROTATE_REQ=1544                                                        
 LDMSD_LWARNING=2                                                                
 LDMSD_NAME_MATCH_INST_NAME=0                                                    
 LDMSD_NAME_MATCH_SCHEMA_NAME=1                                                  
-LDMSD_NOTSUPPORT_REQ=2306                                                       
+LDMSD_NOTSUPPORT_REQ=2562                                                       
 LDMSD_ONESHOT_REQ=1543                                                          
 LDMSD_PLUGIN_OTHER=0                                                            
 LDMSD_PLUGIN_SAMPLER=1                                                          
@@ -599,6 +606,7 @@                                                              
 LDMSD_PRDCR_DEL_REQ=257                                                         
 LDMSD_PRDCR_HINT_TREE_REQ=264                                                   
 LDMSD_PRDCR_SET_REQ=263                                                         
+LDMSD_PRDCR_SET_STATE_DELETED=4                                                 
 LDMSD_PRDCR_SET_STATE_LOOKUP=1                                                  
 LDMSD_PRDCR_SET_STATE_READY=2                                                   
 LDMSD_PRDCR_SET_STATE_START=0                                                   
@@ -617,6 +625,7 @@                                                              
 LDMSD_PRDCR_TYPE_ACTIVE=0                                                       
 LDMSD_PRDCR_TYPE_LOCAL=2                                                        
 LDMSD_PRDCR_TYPE_PASSIVE=1                                                      
+LDMSD_PRDCR_UNSUBSCRIBE_REQ=266                                                 
 LDMSD_RECORD_LEN_ADVICE_REQ=1546                                                
 LDMSD_SETGROUP_ADD_REQ=2048                                                     
 LDMSD_SETGROUP_DEL_REQ=2050                                                     
@@ -632,10 +641,12 @@                                                            
 LDMSD_SMPLR_DEL_REQ=1025                                                        
 LDMSD_SMPLR_START_REQ=1026                                                      
 LDMSD_SMPLR_STOP_REQ=1027                                                       
+LDMSD_STREAM_CLIENT_DUMP_REQ=2307                                               
 LDMSD_STREAM_JSON=1                                                             
 LDMSD_STREAM_PUBLISH_REQ=2304                                                   
 LDMSD_STREAM_STRING=0                                                           
 LDMSD_STREAM_SUBSCRIBE_REQ=2305                                                 
+LDMSD_STREAM_UNSUBSCRIBE_REQ=2306                                               
 LDMSD_STRGP_ADD_REQ=512                                                         
 LDMSD_STRGP_DEL_REQ=513                                                         
 LDMSD_STRGP_METRIC_ADD_REQ=519                                                  
@@ -650,6 +661,7 @@                                                              
 LDMSD_TASK_STATE_RUNNING=2                                                      
 LDMSD_TASK_STATE_STARTED=1                                                      
 LDMSD_TASK_STATE_STOPPED=0                                                      
+LDMSD_THREAD_STATS_REQ=1549                                                     
 LDMSD_UPDTR_ADD_REQ=768                                                         
 LDMSD_UPDTR_DEL_REQ=769                                                         
 LDMSD_UPDTR_MATCH_ADD_REQ=775                                                   
@@ -665,6 +677,7 @@                                                              
 LDMSD_UPDTR_TASK_REQ=777                                                        
 LDMSD_VERBOSE_REQ=1538                                                          
 LDMSD_VERSION_REQ=1540                                                          
+LDMSD_XPRT_STATS_REQ=1548                                                       
 LDMS_CMD_AUTH=8                                                                 
 LDMS_CMD_AUTH_APPROVAL_REPLY=263                                                
 LDMS_CMD_AUTH_CHALLENGE_REPLY=262                                               
@@ -684,15 +697,19 @@                                                            
 LDMS_CMD_REQ_NOTIFY=3                                                           
 LDMS_CMD_REQ_NOTIFY_REPLY=261                                                   
 LDMS_CMD_SEND_MSG=5                                                             
+LDMS_CMD_SET_DELETE=9                                                           
+LDMS_CMD_SET_DELETE_REPLY=266                                                   
 LDMS_CMD_XPRT_PRIVATE=-2147483648                                               
 LDMS_CONTEXT_DIR=0                                                              
 LDMS_CONTEXT_DIR_CANCEL=1                                                       
-LDMS_CONTEXT_LOOKUP=2                                                           
-LDMS_CONTEXT_PUSH=6                                                             
-LDMS_CONTEXT_REQ_NOTIFY=4                                                       
-LDMS_CONTEXT_SEND=5                                                             
-LDMS_CONTEXT_UPDATE=3                                                           
-LDMS_CONTEXT_UPDATE_META=7                                                      
+LDMS_CONTEXT_LOOKUP_READ=3                                                      
+LDMS_CONTEXT_LOOKUP_REQ=2                                                       
+LDMS_CONTEXT_PUSH=7                                                             
+LDMS_CONTEXT_REQ_NOTIFY=5                                                       
+LDMS_CONTEXT_SEND=6                                                             
+LDMS_CONTEXT_SET_DELETE=9                                                       
+LDMS_CONTEXT_UPDATE=4                                                           
+LDMS_CONTEXT_UPDATE_META=8                                                      
 LDMS_DIR_ADD=2                                                                  
 LDMS_DIR_DEL=1                                                                  
 LDMS_DIR_LIST=0                                                                 
@@ -745,9 +762,18 @@                                                             
 LDMS_XPRT_EVENT_CONNECTED=0                                                     
 LDMS_XPRT_EVENT_DISCONNECTED=3                                                  
 LDMS_XPRT_EVENT_ERROR=2                                                         
-LDMS_XPRT_EVENT_LAST=5                                                          
+LDMS_XPRT_EVENT_LAST=6                                                          
 LDMS_XPRT_EVENT_RECV=4                                                          
 LDMS_XPRT_EVENT_REJECTED=1                                                      
+LDMS_XPRT_EVENT_SET_DELETE=5                                                    
+LDMS_XPRT_OP_COUNT=7                                                            
+LDMS_XPRT_OP_DIR_REP=5                                                          
+LDMS_XPRT_OP_DIR_REQ=4                                                          
+LDMS_XPRT_OP_LOOKUP=0                                                           
+LDMS_XPRT_OP_PUBLISH=2                                                          
+LDMS_XPRT_OP_SEND=6                                                             
+LDMS_XPRT_OP_SET_DELETE=3                                                       
+LDMS_XPRT_OP_UPDATE=1                                                           
 OVIS_EVENT_EPOLL=1                                                              
 OVIS_EVENT_EPOLL_TIMEOUT=3                                                      
 OVIS_EVENT_PERIODIC=4                                                           
4.3.4 --> 4.3.5
--- 4.3.4.list  2021-01-20 03:26:17.045994232 +0000                              
+++ 4.3.5.list  2021-01-20 03:26:21.570111057 +0000                              
@@ -879,6 +879,8 @@                                                              
 ZAP_EVENT_WRITE_COMPLETE=8                                                      
 ZAP_MAP_LOCAL=1                                                                 
 ZAP_MAP_REMOTE=2                                                                
+Z_RDMA_DEV_HFI1=1                                                               
+Z_RDMA_DEV_OTHER=0                                                              
 Z_RDMA_MSG_ACCEPT=4                                                             
 Z_RDMA_MSG_CREDIT_UPDATE=1                                                      
 Z_RDMA_MSG_REJECT=5                                                             
4.3.5 --> 4.3.6
--- 4.3.5.list  2021-01-20 03:26:21.570111057 +0000                              
+++ 4.3.6.list  2021-01-20 03:26:25.994225300 +0000                              
@@ -580,7 +580,7 @@                                                              
 LDMSD_LDEBUG=0                                                                  
 LDMSD_LERROR=3                                                                  
 LDMSD_LINFO=1                                                                   
-LDMSD_LISTEN_REQ=1550                                                           
+LDMSD_LISTEN_REQ=1552                                                           
 LDMSD_LLASTLEVEL=6                                                              
 LDMSD_LNONE=-1                                                                  
 LDMSD_LOGROTATE_REQ=1544                                                        
@@ -618,6 +618,7 @@                                                              
 LDMSD_PRDCR_STATE_DISCONNECTED=1                                                
 LDMSD_PRDCR_STATE_STOPPED=0                                                     
 LDMSD_PRDCR_STATE_STOPPING=4                                                    
+LDMSD_PRDCR_STATS_REQ=1550                                                      
 LDMSD_PRDCR_STATUS_REQ=260                                                      
 LDMSD_PRDCR_STOP_REGEX_REQ=262                                                  
 LDMSD_PRDCR_STOP_REQ=259                                                        
@@ -635,6 +636,7 @@                                                              
 LDMSD_SET_ORIGIN_PRDCR=2                                                        
 LDMSD_SET_ORIGIN_SAMP_PI=1                                                      
 LDMSD_SET_ROUTE_REQ=1547                                                        
+LDMSD_SET_STATS_REQ=1551                                                        
 LDMSD_SET_UDATA_REGEX_REQ=1537                                                  
 LDMSD_SET_UDATA_REQ=1536                                                        
 LDMSD_SMPLR_ADD_REQ=1024                                                        
And 4.3.5 --> 4.3.6 showed the LDMSD_LISTEN_REQ number change you mentioned the other day.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,597,2021-01-19T19:26:20Z,2021-02-10T00:41:36Z,2021-02-10T00:41:36Z,MERGED,True,1481,2,6,https://github.com/narategithub,Add enumeration compatibility checking,1,[],https://github.com/ovis-hpc/ovis/pull/597,https://github.com/narategithub,5,https://github.com/ovis-hpc/ovis/pull/597#issuecomment-763332420,"This commit add a github action checking that the values of enumerations
in .github/enum-check/ovis-4.3.3-enum.list are preserved and
compatible with OVIS-4.3.3.","@tom95858 the script now checks enumerations of the future pull requests against 4.3.3, 4.3.4, 4.3.5 and 4.3.6. However, LDMSD_LISTEN_REQ is dropped from the 4.3.4 and 4.3.5 check list since 4.3.6 changed its value. LDMSD_LISTEN_REQ is in 4.3.6 check list though. Hence, if the future pull requests change its value, the check will report an error.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,599,2021-01-22T06:16:12Z,2021-02-24T19:42:39Z,2021-02-24T19:42:39Z,MERGED,True,1,1,1,https://github.com/baallan,fix syntax error in ldmsd.in for genders.,1,[],https://github.com/ovis-hpc/ovis/pull/599,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/599,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,600,2021-01-22T06:36:10Z,2021-02-24T19:43:31Z,2021-02-24T20:52:57Z,MERGED,True,70,6,23,https://github.com/baallan,update gender config example to v4,1,[],https://github.com/ovis-hpc/ovis/pull/600,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/600,updating the plugins-conf subdir of the genders systemd example to v4.,updating the plugins-conf subdir of the genders systemd example to v4.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,600,2021-01-22T06:36:10Z,2021-02-24T19:43:31Z,2021-02-24T20:52:57Z,MERGED,True,70,6,23,https://github.com/baallan,update gender config example to v4,1,[],https://github.com/ovis-hpc/ovis/pull/600,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/600#issuecomment-767927186,updating the plugins-conf subdir of the genders systemd example to v4.,@morrone  thankyou for catching the makefile omission.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,600,2021-01-22T06:36:10Z,2021-02-24T19:43:31Z,2021-02-24T20:52:57Z,MERGED,True,70,6,23,https://github.com/baallan,update gender config example to v4,1,[],https://github.com/ovis-hpc/ovis/pull/600,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/600#issuecomment-785329465,updating the plugins-conf subdir of the genders systemd example to v4.,@tom95858 the Makefile.am omission does not appear to have been addressed before landing.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,600,2021-01-22T06:36:10Z,2021-02-24T19:43:31Z,2021-02-24T20:52:57Z,MERGED,True,70,6,23,https://github.com/baallan,update gender config example to v4,1,[],https://github.com/ovis-hpc/ovis/pull/600,https://github.com/tom95858,4,https://github.com/ovis-hpc/ovis/pull/600#issuecomment-785337380,updating the plugins-conf subdir of the genders systemd example to v4.,"@morrone, sorry I was told this had been addressed and was ready for merge. @baallan  please resolve this ASAP?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,600,2021-01-22T06:36:10Z,2021-02-24T19:43:31Z,2021-02-24T20:52:57Z,MERGED,True,70,6,23,https://github.com/baallan,update gender config example to v4,1,[],https://github.com/ovis-hpc/ovis/pull/600,https://github.com/baallan,5,https://github.com/ovis-hpc/ovis/pull/600#issuecomment-785376748,updating the plugins-conf subdir of the genders systemd example to v4.,I will add the makefile update to the same branch and open another request today. Apologies; it slipped my mind.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,602,2021-01-28T10:57:51Z,2021-01-29T04:23:39Z,2021-01-29T04:23:39Z,CLOSED,False,442,170,12,https://github.com/narategithub,Fix big ldmsd_stream,2,[],https://github.com/ovis-hpc/ovis/pull/602,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/602,"This pull request contains 2 commits:

""Fix big ldmsd_stream data."" This commit contains a (quite big) patch addressing ldmsd_stream with data too big to fit in a message. It also addresses the record splitting mechanisms of ldmsd_stream request that is mismatch that of the ldmsd_request.
""Add sq status check."" This commit addresses the issue of when to disconnect the xprt in ldmsd_stream_publish_file. Even though a new zap API is added, I believe it does not make it incompatible with ldmsd 4.3.6.

NOTE1: This pull request has passed all test cases in ldms-test repository.
NOTE2: A manual test between ldmsd_stream_subscribe and ldmsd_stream_publish is also performed, with SOCKBUF_SZ 256 (see zap_sock.h) to encourage a lot of record splitting:
$ python3 <<EOF
> import json
> f = open('data.json', 'w')
> print(json.dumps([i for i in range(0, 65536)]), file=f)
> f.close()
> EOF

$ ldmsd_stream_subscribe -x sock -p 10000 -s test -f out.txt

$ ldmsd_stream_publish -h localhost -x sock -p 10000 -s test -t ${FORMAT} -f ${FILE}

# NOTE: The FORMAT being tested are both json and string.","This pull request contains 2 commits:

""Fix big ldmsd_stream data."" This commit contains a (quite big) patch addressing ldmsd_stream with data too big to fit in a message. It also addresses the record splitting mechanisms of ldmsd_stream request that is mismatch that of the ldmsd_request.
""Add sq status check."" This commit addresses the issue of when to disconnect the xprt in ldmsd_stream_publish_file. Even though a new zap API is added, I believe it does not make it incompatible with ldmsd 4.3.6.

NOTE1: This pull request has passed all test cases in ldms-test repository.
NOTE2: A manual test between ldmsd_stream_subscribe and ldmsd_stream_publish is also performed, with SOCKBUF_SZ 256 (see zap_sock.h) to encourage a lot of record splitting:
$ python3 <<EOF
> import json
> f = open('data.json', 'w')
> print(json.dumps([i for i in range(0, 65536)]), file=f)
> f.close()
> EOF

$ ldmsd_stream_subscribe -x sock -p 10000 -s test -f out.txt

$ ldmsd_stream_publish -h localhost -x sock -p 10000 -s test -t ${FORMAT} -f ${FILE}

# NOTE: The FORMAT being tested are both json and string.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,603,2021-01-31T04:03:35Z,2021-02-01T17:26:03Z,2021-02-01T17:26:03Z,MERGED,True,10,0,1,https://github.com/narategithub,Fix wrong error in listen config command when auth not found.,1,[],https://github.com/ovis-hpc/ovis/pull/603,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/603,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,604,2021-01-31T19:16:20Z,2021-01-31T19:20:15Z,2021-01-31T19:20:19Z,MERGED,True,6,5,1,https://github.com/tom95858,prdcr_subscribe crashes on duplicate stream name,1,[],https://github.com/ovis-hpc/ovis/pull/604,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/604,"When a stream is added to a producer, the logic checks
if the stream has already been subscribed. The error
path in this duplicate name case free'd the stream in the list
corrupting the data structure.","When a stream is added to a producer, the logic checks
if the stream has already been subscribed. The error
path in this duplicate name case free'd the stream in the list
corrupting the data structure.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,605,2021-01-31T19:28:45Z,2021-01-31T19:38:40Z,2021-06-10T21:38:37Z,MERGED,True,18,5,2,https://github.com/tom95858,Add the auto interval config to updtr_status command,1,[],https://github.com/ovis-hpc/ovis/pull/605,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/605,The auto-interval information was not included in the updtr_status comand. This change adds a column for this information.,The auto-interval information was not included in the updtr_status comand. This change adds a column for this information.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,606,2021-02-01T17:59:37Z,2021-02-04T18:25:55Z,2021-02-04T18:25:55Z,MERGED,True,1,1,1,https://github.com/narategithub,"Change the deafult auth reference to ""auth_default""",1,[],https://github.com/ovis-hpc/ovis/pull/606,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/606,"Change the default authentication reference to auth_default so that
users can explicitly specify it in listen and prdcr_add
configuration commands.","Change the default authentication reference to auth_default so that
users can explicitly specify it in listen and prdcr_add
configuration commands.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,606,2021-02-01T17:59:37Z,2021-02-04T18:25:55Z,2021-02-04T18:25:55Z,MERGED,True,1,1,1,https://github.com/narategithub,"Change the deafult auth reference to ""auth_default""",1,[],https://github.com/ovis-hpc/ovis/pull/606,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/606#issuecomment-771044557,"Change the default authentication reference to auth_default so that
users can explicitly specify it in listen and prdcr_add
configuration commands.","@tom95858 I tested it with the following config
auth_add name=none plugin=none
listen  xprt=sock port=10002 auth=auth_default
listen  xprt=sock port=10003
listen  xprt=sock port=10004 auth=none
load name=meminfo
config name=meminfo component_id=1 instance=node-1/meminfo producer=node-1 perm=0777
start name=meminfo interval=1000000 offset=0
load name=vmstat
config name=vmstat component_id=1 instance=node-1/vmstat producer=node-1 perm=0700
start name=vmstat interval=1000000 offset=0

and with the following ldmsd CLI:
$ ldmsd -a munge -x sock 10001 -c /etc/ldmsd.conf -l /var/log/ldmsd.log -v INFO
The following is the ldms_ls results:
$ ldms_ls -x sock -p 10001 
Connection failed/rejected.

$ ldms_ls -x sock -p 10001 -a munge
node-1/vmstat                      
node-1/meminfo                     
                                   
$ ldms_ls -x sock -p 10002 -a munge
node-1/vmstat                      
node-1/meminfo       

$ ldms_ls -x sock -p 10003 -a munge
node-1/vmstat
node-1/meminfo

$ ldms_ls -x sock -p 10004 -a munge
Connection failed/rejected.

$ ldms_ls -x sock -p 10004
node-1/vmstat
node-1/meminfo",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,607,2021-02-01T19:03:12Z,2021-02-02T19:28:09Z,2021-02-02T19:28:09Z,MERGED,True,5,5,1,https://github.com/narategithub,"Fix `listen` on the same port, different interface",1,[],https://github.com/ovis-hpc/ovis/pull/607,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/607,"Listening on the same port but different interfaces was not allowed due
to the key construction of the listen config object that used only
""XPRT:PORT"". This patch fixes the issue by using ""XPRT:PORT:HOST"" as the
key instead.
With the following config:
auth_add name=dom1 plugin=munge
listen  xprt=sock port=10001 host=node-1 auth=dom1
listen  xprt=sock port=10001 host=localhost
load name=meminfo
config name=meminfo component_id=1 instance=node-1/meminfo producer=node-1 perm=0777
start name=meminfo interval=1000000 offset=0
load name=vmstat
config name=vmstat component_id=1 instance=node-1/vmstat producer=node-1 perm=0700
start name=vmstat interval=1000000 offset=0

and the following CLI (on node-1):
$ ldmsd -c /etc/ldmsd.conf -l /var/log/ldmsd.log -v INFO

The ldms_ls shows that the listening on the same port, different
interfaces works correctly:
$ ldms_ls -x sock -p 10001 -a munge -h node-1
node-1/vmstat
node-1/meminfo

$ ldms_ls -x sock -p 10001 -h node-1
Connection failed/rejected.

$ ldms_ls -x sock -p 10001 -a munge -h localhost
Connection failed/rejected.

$ ldms_ls -x sock -p 10001 -h localhost
node-1/vmstat
node-1/meminfo","Listening on the same port but different interfaces was not allowed due
to the key construction of the listen config object that used only
""XPRT:PORT"". This patch fixes the issue by using ""XPRT:PORT:HOST"" as the
key instead.
With the following config:
auth_add name=dom1 plugin=munge
listen  xprt=sock port=10001 host=node-1 auth=dom1
listen  xprt=sock port=10001 host=localhost
load name=meminfo
config name=meminfo component_id=1 instance=node-1/meminfo producer=node-1 perm=0777
start name=meminfo interval=1000000 offset=0
load name=vmstat
config name=vmstat component_id=1 instance=node-1/vmstat producer=node-1 perm=0700
start name=vmstat interval=1000000 offset=0

and the following CLI (on node-1):
$ ldmsd -c /etc/ldmsd.conf -l /var/log/ldmsd.log -v INFO

The ldms_ls shows that the listening on the same port, different
interfaces works correctly:
$ ldms_ls -x sock -p 10001 -a munge -h node-1
node-1/vmstat
node-1/meminfo

$ ldms_ls -x sock -p 10001 -h node-1
Connection failed/rejected.

$ ldms_ls -x sock -p 10001 -a munge -h localhost
Connection failed/rejected.

$ ldms_ls -x sock -p 10001 -h localhost
node-1/vmstat
node-1/meminfo",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,608,2021-02-02T04:57:56Z,2021-02-09T17:04:41Z,2022-01-18T04:09:07Z,MERGED,True,112,28,6,https://github.com/nichamon,Allow adding listen endpoints after init,2,[],https://github.com/ovis-hpc/ovis/pull/608,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/608,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,610,2021-02-04T03:20:07Z,2021-02-04T18:23:44Z,2021-02-04T18:23:44Z,MERGED,True,7,3,1,https://github.com/narategithub,Fix papi_sampler segmentation fault on job exit event,1,[],https://github.com/ovis-hpc/ovis/pull/610,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/610,"handle_job_exit() in papi_sampler incorrectly assumed that
job->set was always successfully created before the job exit event and
accessed the set. This resulted in segmentation fault. This patch
modifies papi_sampler to check the set before accessing it.","handle_job_exit() in papi_sampler incorrectly assumed that
job->set was always successfully created before the job exit event and
accessed the set. This resulted in segmentation fault. This patch
modifies papi_sampler to check the set before accessing it.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,610,2021-02-04T03:20:07Z,2021-02-04T18:23:44Z,2021-02-04T18:23:44Z,MERGED,True,7,3,1,https://github.com/narategithub,Fix papi_sampler segmentation fault on job exit event,1,[],https://github.com/ovis-hpc/ovis/pull/610,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/610#issuecomment-772997948,"handle_job_exit() in papi_sampler incorrectly assumed that
job->set was always successfully created before the job exit event and
accessed the set. This resulted in segmentation fault. This patch
modifies papi_sampler to check the set before accessing it.",@tom95858 I found this when I tested the new zap_sock against tests in ldms-test repo.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,610,2021-02-04T03:20:07Z,2021-02-04T18:23:44Z,2021-02-04T18:23:44Z,MERGED,True,7,3,1,https://github.com/narategithub,Fix papi_sampler segmentation fault on job exit event,1,[],https://github.com/ovis-hpc/ovis/pull/610,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/610#issuecomment-773512378,"handle_job_exit() in papi_sampler incorrectly assumed that
job->set was always successfully created before the job exit event and
accessed the set. This resulted in segmentation fault. This patch
modifies papi_sampler to check the set before accessing it.",Thanks @narategithub,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,611,2021-02-04T20:29:53Z,2021-08-31T04:50:35Z,2021-08-31T04:50:36Z,CLOSED,False,4482,2852,15,https://github.com/narategithub,[PLS-REVIEW] New zap thread model,2,[],https://github.com/ovis-hpc/ovis/pull/611,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/611,"NOTE: Please see `lib/src/zap/ZAP_THREAD_NOTE.md` for an overview of
      the zap thread mechanism.

[x] busy-ness calculation (using Tom's  thrstat)
[x] sock
    [x] zap_test
    [x] ldmsd: samp->agg1->agg2 (w/sos)
    [x] all tests in ldms-test (sock)
[x] rdma
    [x] samp - agg1 - agg2 - store test
    [x] flap samp (sniff)
    [x] flap agg1 (sniff)
        [x] flap agg2 (sniff)
    [x] fd check
        [x] ldms_ls - ldmsd test
[x] ugni
   [x] ldmsd - ldms_ls
       - with debug print, the endpoint references are correct, the
         endpoints (both active and passive) are destroyed at the end.
   [x] samp - agg1 - agg2 - ldms_ls, with flapping agg1
   [x] samp (many sets) - agg1 - ldms_ls
   [x] scale test: many samp -> agg11+agg12 -> agg2
   [*] NOTE1: Need to protect GNI calls with the global `ugni_lock`.
       Not protecting them at all gave us SIGSEGV and SIGABRT down in
       the libugni. Protecting only the CQ of each thread using
       thread's own mutex also did not work. We got GNI_DlaDrain()
       hanged when we have multiple io threads.
   [*] NOTE2: `GNI_MemRegister()` call with recv CQ to register SMSG
       mbox memory took 0.6-0.7 seconds to complete. It is the source
       of the connection slowness seen by `ldms_ls`. Fortunately, this
       happens only once for each io thread initialization.
[x] fabric over tcp: 64 samps -> 2 agg1 -> 1 agg2 - ldms_ls
[x] fabric over verbs: 64 samps -> 2 agg1 -> 1 agg2 - ldms_ls","NOTE: Please see `lib/src/zap/ZAP_THREAD_NOTE.md` for an overview of
      the zap thread mechanism.

[x] busy-ness calculation (using Tom's  thrstat)
[x] sock
    [x] zap_test
    [x] ldmsd: samp->agg1->agg2 (w/sos)
    [x] all tests in ldms-test (sock)
[x] rdma
    [x] samp - agg1 - agg2 - store test
    [x] flap samp (sniff)
    [x] flap agg1 (sniff)
        [x] flap agg2 (sniff)
    [x] fd check
        [x] ldms_ls - ldmsd test
[x] ugni
   [x] ldmsd - ldms_ls
       - with debug print, the endpoint references are correct, the
         endpoints (both active and passive) are destroyed at the end.
   [x] samp - agg1 - agg2 - ldms_ls, with flapping agg1
   [x] samp (many sets) - agg1 - ldms_ls
   [x] scale test: many samp -> agg11+agg12 -> agg2
   [*] NOTE1: Need to protect GNI calls with the global `ugni_lock`.
       Not protecting them at all gave us SIGSEGV and SIGABRT down in
       the libugni. Protecting only the CQ of each thread using
       thread's own mutex also did not work. We got GNI_DlaDrain()
       hanged when we have multiple io threads.
   [*] NOTE2: `GNI_MemRegister()` call with recv CQ to register SMSG
       mbox memory took 0.6-0.7 seconds to complete. It is the source
       of the connection slowness seen by `ldms_ls`. Fortunately, this
       happens only once for each io thread initialization.
[x] fabric over tcp: 64 samps -> 2 agg1 -> 1 agg2 - ldms_ls
[x] fabric over verbs: 64 samps -> 2 agg1 -> 1 agg2 - ldms_ls",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,611,2021-02-04T20:29:53Z,2021-08-31T04:50:35Z,2021-08-31T04:50:36Z,CLOSED,False,4482,2852,15,https://github.com/narategithub,[PLS-REVIEW] New zap thread model,2,[],https://github.com/ovis-hpc/ovis/pull/611,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/611#issuecomment-776848187,"NOTE: Please see `lib/src/zap/ZAP_THREAD_NOTE.md` for an overview of
      the zap thread mechanism.

[x] busy-ness calculation (using Tom's  thrstat)
[x] sock
    [x] zap_test
    [x] ldmsd: samp->agg1->agg2 (w/sos)
    [x] all tests in ldms-test (sock)
[x] rdma
    [x] samp - agg1 - agg2 - store test
    [x] flap samp (sniff)
    [x] flap agg1 (sniff)
        [x] flap agg2 (sniff)
    [x] fd check
        [x] ldms_ls - ldmsd test
[x] ugni
   [x] ldmsd - ldms_ls
       - with debug print, the endpoint references are correct, the
         endpoints (both active and passive) are destroyed at the end.
   [x] samp - agg1 - agg2 - ldms_ls, with flapping agg1
   [x] samp (many sets) - agg1 - ldms_ls
   [x] scale test: many samp -> agg11+agg12 -> agg2
   [*] NOTE1: Need to protect GNI calls with the global `ugni_lock`.
       Not protecting them at all gave us SIGSEGV and SIGABRT down in
       the libugni. Protecting only the CQ of each thread using
       thread's own mutex also did not work. We got GNI_DlaDrain()
       hanged when we have multiple io threads.
   [*] NOTE2: `GNI_MemRegister()` call with recv CQ to register SMSG
       mbox memory took 0.6-0.7 seconds to complete. It is the source
       of the connection slowness seen by `ldms_ls`. Fortunately, this
       happens only once for each io thread initialization.
[x] fabric over tcp: 64 samps -> 2 agg1 -> 1 agg2 - ldms_ls
[x] fabric over verbs: 64 samps -> 2 agg1 -> 1 agg2 - ldms_ls","re point 4.1 of the zap thread note. There should be, even in the case of 'too busy' be some administratively defined hard upper bound on the number of threads created for zap io. First because it's a good idea to let admins control their daemons and second because elsewhere in the code there is a message format which (as @narategithub commented in another PR) expects the number of threads to be never > 1000. The limit and its control should be added to the code and the documentation and the design doc/discussion notes.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,611,2021-02-04T20:29:53Z,2021-08-31T04:50:35Z,2021-08-31T04:50:36Z,CLOSED,False,4482,2852,15,https://github.com/narategithub,[PLS-REVIEW] New zap thread model,2,[],https://github.com/ovis-hpc/ovis/pull/611,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/611#issuecomment-778341633,"NOTE: Please see `lib/src/zap/ZAP_THREAD_NOTE.md` for an overview of
      the zap thread mechanism.

[x] busy-ness calculation (using Tom's  thrstat)
[x] sock
    [x] zap_test
    [x] ldmsd: samp->agg1->agg2 (w/sos)
    [x] all tests in ldms-test (sock)
[x] rdma
    [x] samp - agg1 - agg2 - store test
    [x] flap samp (sniff)
    [x] flap agg1 (sniff)
        [x] flap agg2 (sniff)
    [x] fd check
        [x] ldms_ls - ldmsd test
[x] ugni
   [x] ldmsd - ldms_ls
       - with debug print, the endpoint references are correct, the
         endpoints (both active and passive) are destroyed at the end.
   [x] samp - agg1 - agg2 - ldms_ls, with flapping agg1
   [x] samp (many sets) - agg1 - ldms_ls
   [x] scale test: many samp -> agg11+agg12 -> agg2
   [*] NOTE1: Need to protect GNI calls with the global `ugni_lock`.
       Not protecting them at all gave us SIGSEGV and SIGABRT down in
       the libugni. Protecting only the CQ of each thread using
       thread's own mutex also did not work. We got GNI_DlaDrain()
       hanged when we have multiple io threads.
   [*] NOTE2: `GNI_MemRegister()` call with recv CQ to register SMSG
       mbox memory took 0.6-0.7 seconds to complete. It is the source
       of the connection slowness seen by `ldms_ls`. Fortunately, this
       happens only once for each io thread initialization.
[x] fabric over tcp: 64 samps -> 2 agg1 -> 1 agg2 - ldms_ls
[x] fabric over verbs: 64 samps -> 2 agg1 -> 1 agg2 - ldms_ls",It looks like there is some good documentation about the new model in the comment. But could you please summarize what the general motivation is for this change? What goal(s) is/are trying to be accomplished through this change?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,611,2021-02-04T20:29:53Z,2021-08-31T04:50:35Z,2021-08-31T04:50:36Z,CLOSED,False,4482,2852,15,https://github.com/narategithub,[PLS-REVIEW] New zap thread model,2,[],https://github.com/ovis-hpc/ovis/pull/611,https://github.com/tom95858,4,https://github.com/ovis-hpc/ovis/pull/611#issuecomment-778390522,"NOTE: Please see `lib/src/zap/ZAP_THREAD_NOTE.md` for an overview of
      the zap thread mechanism.

[x] busy-ness calculation (using Tom's  thrstat)
[x] sock
    [x] zap_test
    [x] ldmsd: samp->agg1->agg2 (w/sos)
    [x] all tests in ldms-test (sock)
[x] rdma
    [x] samp - agg1 - agg2 - store test
    [x] flap samp (sniff)
    [x] flap agg1 (sniff)
        [x] flap agg2 (sniff)
    [x] fd check
        [x] ldms_ls - ldmsd test
[x] ugni
   [x] ldmsd - ldms_ls
       - with debug print, the endpoint references are correct, the
         endpoints (both active and passive) are destroyed at the end.
   [x] samp - agg1 - agg2 - ldms_ls, with flapping agg1
   [x] samp (many sets) - agg1 - ldms_ls
   [x] scale test: many samp -> agg11+agg12 -> agg2
   [*] NOTE1: Need to protect GNI calls with the global `ugni_lock`.
       Not protecting them at all gave us SIGSEGV and SIGABRT down in
       the libugni. Protecting only the CQ of each thread using
       thread's own mutex also did not work. We got GNI_DlaDrain()
       hanged when we have multiple io threads.
   [*] NOTE2: `GNI_MemRegister()` call with recv CQ to register SMSG
       mbox memory took 0.6-0.7 seconds to complete. It is the source
       of the connection slowness seen by `ldms_ls`. Fortunately, this
       happens only once for each io thread initialization.
[x] fabric over tcp: 64 samps -> 2 agg1 -> 1 agg2 - ldms_ls
[x] fabric over verbs: 64 samps -> 2 agg1 -> 1 agg2 - ldms_ls","The current transport event flow is implemented privately in each transport provider and is single threaded, i.e. all transports of the same type share the same thread. This logic monitors activity (via epoll) on a set of file descriptors and generates Zap events that are ultimately delivered to the application. The single thread that monitors the I/O events limits scalability for large endpoint counts such as at the 1st level aggregators. The figure below illustrates this implementation.

This change implements a shared, multi-thread event subsystem in libzap.so to monitor the endpoint file descriptors as shown in the figure below.

A secondary benefit is that the system administrator does not have to guess how many threads are required to support a given workload. The implementation will scale the thread counts up and down as latency and load dictate. As mentioned by others, the system administrator will likely want to set an upper limit on the thread count, however a core-count reasonable upper limit will be used as a default",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,611,2021-02-04T20:29:53Z,2021-08-31T04:50:35Z,2021-08-31T04:50:36Z,CLOSED,False,4482,2852,15,https://github.com/narategithub,[PLS-REVIEW] New zap thread model,2,[],https://github.com/ovis-hpc/ovis/pull/611,https://github.com/morrone,5,https://github.com/ovis-hpc/ovis/pull/611#issuecomment-778413993,"NOTE: Please see `lib/src/zap/ZAP_THREAD_NOTE.md` for an overview of
      the zap thread mechanism.

[x] busy-ness calculation (using Tom's  thrstat)
[x] sock
    [x] zap_test
    [x] ldmsd: samp->agg1->agg2 (w/sos)
    [x] all tests in ldms-test (sock)
[x] rdma
    [x] samp - agg1 - agg2 - store test
    [x] flap samp (sniff)
    [x] flap agg1 (sniff)
        [x] flap agg2 (sniff)
    [x] fd check
        [x] ldms_ls - ldmsd test
[x] ugni
   [x] ldmsd - ldms_ls
       - with debug print, the endpoint references are correct, the
         endpoints (both active and passive) are destroyed at the end.
   [x] samp - agg1 - agg2 - ldms_ls, with flapping agg1
   [x] samp (many sets) - agg1 - ldms_ls
   [x] scale test: many samp -> agg11+agg12 -> agg2
   [*] NOTE1: Need to protect GNI calls with the global `ugni_lock`.
       Not protecting them at all gave us SIGSEGV and SIGABRT down in
       the libugni. Protecting only the CQ of each thread using
       thread's own mutex also did not work. We got GNI_DlaDrain()
       hanged when we have multiple io threads.
   [*] NOTE2: `GNI_MemRegister()` call with recv CQ to register SMSG
       mbox memory took 0.6-0.7 seconds to complete. It is the source
       of the connection slowness seen by `ldms_ls`. Fortunately, this
       happens only once for each io thread initialization.
[x] fabric over tcp: 64 samps -> 2 agg1 -> 1 agg2 - ldms_ls
[x] fabric over verbs: 64 samps -> 2 agg1 -> 1 agg2 - ldms_ls","Thanks! That is great context.
If the diagrams are accurate, then of course the new model has the tradeoff that the ""Application callback function"" is now called under the context of the transport thread, and blocks processing of new messages (for the set of endpoints that it monitors, of course) until it is complete. That was not an issue under the previous model.
Perhaps if we can guarantee that the application callback function is short and bounded in processing time, this would be acceptable, but otherwise it looks like it introduces a new problem.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,611,2021-02-04T20:29:53Z,2021-08-31T04:50:35Z,2021-08-31T04:50:36Z,CLOSED,False,4482,2852,15,https://github.com/narategithub,[PLS-REVIEW] New zap thread model,2,[],https://github.com/ovis-hpc/ovis/pull/611,https://github.com/tom95858,6,https://github.com/ovis-hpc/ovis/pull/611#issuecomment-779491711,"NOTE: Please see `lib/src/zap/ZAP_THREAD_NOTE.md` for an overview of
      the zap thread mechanism.

[x] busy-ness calculation (using Tom's  thrstat)
[x] sock
    [x] zap_test
    [x] ldmsd: samp->agg1->agg2 (w/sos)
    [x] all tests in ldms-test (sock)
[x] rdma
    [x] samp - agg1 - agg2 - store test
    [x] flap samp (sniff)
    [x] flap agg1 (sniff)
        [x] flap agg2 (sniff)
    [x] fd check
        [x] ldms_ls - ldmsd test
[x] ugni
   [x] ldmsd - ldms_ls
       - with debug print, the endpoint references are correct, the
         endpoints (both active and passive) are destroyed at the end.
   [x] samp - agg1 - agg2 - ldms_ls, with flapping agg1
   [x] samp (many sets) - agg1 - ldms_ls
   [x] scale test: many samp -> agg11+agg12 -> agg2
   [*] NOTE1: Need to protect GNI calls with the global `ugni_lock`.
       Not protecting them at all gave us SIGSEGV and SIGABRT down in
       the libugni. Protecting only the CQ of each thread using
       thread's own mutex also did not work. We got GNI_DlaDrain()
       hanged when we have multiple io threads.
   [*] NOTE2: `GNI_MemRegister()` call with recv CQ to register SMSG
       mbox memory took 0.6-0.7 seconds to complete. It is the source
       of the connection slowness seen by `ldms_ls`. Fortunately, this
       happens only once for each io thread initialization.
[x] fabric over tcp: 64 samps -> 2 agg1 -> 1 agg2 - ldms_ls
[x] fabric over verbs: 64 samps -> 2 agg1 -> 1 agg2 - ldms_ls","If the diagrams are accurate, then of course the new model has the tradeoff that the ""Application callback function"" is now called under the context of the transport thread, and blocks processing of new messages (for the set of endpoints that it monitors, of course) until it is complete. That was not an issue under the previous model.

Right, but only if we assume that the the queue into which I/O events are posted would grow unbounded. The depth of this queue is 4096 by default and can be tweaked with ZAP_EVENT_QDEPTH; but effectively it has the same issue, if ldmsd (i.e. the application) cant keep up, I/O will back up. The intent of this new model is to detect this and grow the thread pool as required.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,611,2021-02-04T20:29:53Z,2021-08-31T04:50:35Z,2021-08-31T04:50:36Z,CLOSED,False,4482,2852,15,https://github.com/narategithub,[PLS-REVIEW] New zap thread model,2,[],https://github.com/ovis-hpc/ovis/pull/611,https://github.com/tom95858,7,https://github.com/ovis-hpc/ovis/pull/611#issuecomment-780017627,"NOTE: Please see `lib/src/zap/ZAP_THREAD_NOTE.md` for an overview of
      the zap thread mechanism.

[x] busy-ness calculation (using Tom's  thrstat)
[x] sock
    [x] zap_test
    [x] ldmsd: samp->agg1->agg2 (w/sos)
    [x] all tests in ldms-test (sock)
[x] rdma
    [x] samp - agg1 - agg2 - store test
    [x] flap samp (sniff)
    [x] flap agg1 (sniff)
        [x] flap agg2 (sniff)
    [x] fd check
        [x] ldms_ls - ldmsd test
[x] ugni
   [x] ldmsd - ldms_ls
       - with debug print, the endpoint references are correct, the
         endpoints (both active and passive) are destroyed at the end.
   [x] samp - agg1 - agg2 - ldms_ls, with flapping agg1
   [x] samp (many sets) - agg1 - ldms_ls
   [x] scale test: many samp -> agg11+agg12 -> agg2
   [*] NOTE1: Need to protect GNI calls with the global `ugni_lock`.
       Not protecting them at all gave us SIGSEGV and SIGABRT down in
       the libugni. Protecting only the CQ of each thread using
       thread's own mutex also did not work. We got GNI_DlaDrain()
       hanged when we have multiple io threads.
   [*] NOTE2: `GNI_MemRegister()` call with recv CQ to register SMSG
       mbox memory took 0.6-0.7 seconds to complete. It is the source
       of the connection slowness seen by `ldms_ls`. Fortunately, this
       happens only once for each io thread initialization.
[x] fabric over tcp: 64 samps -> 2 agg1 -> 1 agg2 - ldms_ls
[x] fabric over verbs: 64 samps -> 2 agg1 -> 1 agg2 - ldms_ls","@narategithub, it looks like the build fails with -D DEBUG.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,611,2021-02-04T20:29:53Z,2021-08-31T04:50:35Z,2021-08-31T04:50:36Z,CLOSED,False,4482,2852,15,https://github.com/narategithub,[PLS-REVIEW] New zap thread model,2,[],https://github.com/ovis-hpc/ovis/pull/611,https://github.com/narategithub,8,https://github.com/ovis-hpc/ovis/pull/611#issuecomment-780079963,"NOTE: Please see `lib/src/zap/ZAP_THREAD_NOTE.md` for an overview of
      the zap thread mechanism.

[x] busy-ness calculation (using Tom's  thrstat)
[x] sock
    [x] zap_test
    [x] ldmsd: samp->agg1->agg2 (w/sos)
    [x] all tests in ldms-test (sock)
[x] rdma
    [x] samp - agg1 - agg2 - store test
    [x] flap samp (sniff)
    [x] flap agg1 (sniff)
        [x] flap agg2 (sniff)
    [x] fd check
        [x] ldms_ls - ldmsd test
[x] ugni
   [x] ldmsd - ldms_ls
       - with debug print, the endpoint references are correct, the
         endpoints (both active and passive) are destroyed at the end.
   [x] samp - agg1 - agg2 - ldms_ls, with flapping agg1
   [x] samp (many sets) - agg1 - ldms_ls
   [x] scale test: many samp -> agg11+agg12 -> agg2
   [*] NOTE1: Need to protect GNI calls with the global `ugni_lock`.
       Not protecting them at all gave us SIGSEGV and SIGABRT down in
       the libugni. Protecting only the CQ of each thread using
       thread's own mutex also did not work. We got GNI_DlaDrain()
       hanged when we have multiple io threads.
   [*] NOTE2: `GNI_MemRegister()` call with recv CQ to register SMSG
       mbox memory took 0.6-0.7 seconds to complete. It is the source
       of the connection slowness seen by `ldms_ls`. Fortunately, this
       happens only once for each io thread initialization.
[x] fabric over tcp: 64 samps -> 2 agg1 -> 1 agg2 - ldms_ls
[x] fabric over verbs: 64 samps -> 2 agg1 -> 1 agg2 - ldms_ls",@tom95858 The debug-build test failed because of zap_fabric. This work-in-progress has not touched fabric transport yet. I tried building with -DDEBUG -Wall -Werror with only sock and rdma and it succeeded.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,611,2021-02-04T20:29:53Z,2021-08-31T04:50:35Z,2021-08-31T04:50:36Z,CLOSED,False,4482,2852,15,https://github.com/narategithub,[PLS-REVIEW] New zap thread model,2,[],https://github.com/ovis-hpc/ovis/pull/611,https://github.com/narategithub,9,https://github.com/ovis-hpc/ovis/pull/611#issuecomment-837194486,"NOTE: Please see `lib/src/zap/ZAP_THREAD_NOTE.md` for an overview of
      the zap thread mechanism.

[x] busy-ness calculation (using Tom's  thrstat)
[x] sock
    [x] zap_test
    [x] ldmsd: samp->agg1->agg2 (w/sos)
    [x] all tests in ldms-test (sock)
[x] rdma
    [x] samp - agg1 - agg2 - store test
    [x] flap samp (sniff)
    [x] flap agg1 (sniff)
        [x] flap agg2 (sniff)
    [x] fd check
        [x] ldms_ls - ldmsd test
[x] ugni
   [x] ldmsd - ldms_ls
       - with debug print, the endpoint references are correct, the
         endpoints (both active and passive) are destroyed at the end.
   [x] samp - agg1 - agg2 - ldms_ls, with flapping agg1
   [x] samp (many sets) - agg1 - ldms_ls
   [x] scale test: many samp -> agg11+agg12 -> agg2
   [*] NOTE1: Need to protect GNI calls with the global `ugni_lock`.
       Not protecting them at all gave us SIGSEGV and SIGABRT down in
       the libugni. Protecting only the CQ of each thread using
       thread's own mutex also did not work. We got GNI_DlaDrain()
       hanged when we have multiple io threads.
   [*] NOTE2: `GNI_MemRegister()` call with recv CQ to register SMSG
       mbox memory took 0.6-0.7 seconds to complete. It is the source
       of the connection slowness seen by `ldms_ls`. Fortunately, this
       happens only once for each io thread initialization.
[x] fabric over tcp: 64 samps -> 2 agg1 -> 1 agg2 - ldms_ls
[x] fabric over verbs: 64 samps -> 2 agg1 -> 1 agg2 - ldms_ls",@tom95858 this is ready for you to review.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,611,2021-02-04T20:29:53Z,2021-08-31T04:50:35Z,2021-08-31T04:50:36Z,CLOSED,False,4482,2852,15,https://github.com/narategithub,[PLS-REVIEW] New zap thread model,2,[],https://github.com/ovis-hpc/ovis/pull/611,https://github.com/narategithub,10,https://github.com/ovis-hpc/ovis/pull/611#issuecomment-908896592,"NOTE: Please see `lib/src/zap/ZAP_THREAD_NOTE.md` for an overview of
      the zap thread mechanism.

[x] busy-ness calculation (using Tom's  thrstat)
[x] sock
    [x] zap_test
    [x] ldmsd: samp->agg1->agg2 (w/sos)
    [x] all tests in ldms-test (sock)
[x] rdma
    [x] samp - agg1 - agg2 - store test
    [x] flap samp (sniff)
    [x] flap agg1 (sniff)
        [x] flap agg2 (sniff)
    [x] fd check
        [x] ldms_ls - ldmsd test
[x] ugni
   [x] ldmsd - ldms_ls
       - with debug print, the endpoint references are correct, the
         endpoints (both active and passive) are destroyed at the end.
   [x] samp - agg1 - agg2 - ldms_ls, with flapping agg1
   [x] samp (many sets) - agg1 - ldms_ls
   [x] scale test: many samp -> agg11+agg12 -> agg2
   [*] NOTE1: Need to protect GNI calls with the global `ugni_lock`.
       Not protecting them at all gave us SIGSEGV and SIGABRT down in
       the libugni. Protecting only the CQ of each thread using
       thread's own mutex also did not work. We got GNI_DlaDrain()
       hanged when we have multiple io threads.
   [*] NOTE2: `GNI_MemRegister()` call with recv CQ to register SMSG
       mbox memory took 0.6-0.7 seconds to complete. It is the source
       of the connection slowness seen by `ldms_ls`. Fortunately, this
       happens only once for each io thread initialization.
[x] fabric over tcp: 64 samps -> 2 agg1 -> 1 agg2 - ldms_ls
[x] fabric over verbs: 64 samps -> 2 agg1 -> 1 agg2 - ldms_ls",Part of #783,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,612,2021-02-04T22:20:06Z,2021-02-12T18:23:20Z,2022-01-18T04:09:06Z,MERGED,True,486,289,8,https://github.com/nichamon,Unify the code that chunks & gathers records to a message and refactor ldmsd_stream_subcribe,3,[],https://github.com/ovis-hpc/ovis/pull/612,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/612,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,613,2021-02-05T05:41:26Z,2021-02-09T17:14:19Z,2021-02-09T17:14:19Z,MERGED,True,30,18,13,https://github.com/narategithub,Address build warnings (errors) when '-O2' is given,1,[],https://github.com/ovis-hpc/ovis/pull/613,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/613,"This patch addresses warnings, which become errors, found when building
with CFLAGS='-O2 -Wall -Werror' on CLE 7.0.UP02 (SuSE 15.1) system.","This patch addresses warnings, which become errors, found when building
with CFLAGS='-O2 -Wall -Werror' on CLE 7.0.UP02 (SuSE 15.1) system.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,613,2021-02-05T05:41:26Z,2021-02-09T17:14:19Z,2021-02-09T17:14:19Z,MERGED,True,30,18,13,https://github.com/narategithub,Address build warnings (errors) when '-O2' is given,1,[],https://github.com/ovis-hpc/ovis/pull/613,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/613#issuecomment-774853432,"This patch addresses warnings, which become errors, found when building
with CFLAGS='-O2 -Wall -Werror' on CLE 7.0.UP02 (SuSE 15.1) system.","Is this the Intel toolchain or the GNU toolchain? IOW, did you load PrgEnv_Gnu before configuring/building?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,613,2021-02-05T05:41:26Z,2021-02-09T17:14:19Z,2021-02-09T17:14:19Z,MERGED,True,30,18,13,https://github.com/narategithub,Address build warnings (errors) when '-O2' is given,1,[],https://github.com/ovis-hpc/ovis/pull/613,https://github.com/narategithub,3,https://github.com/ovis-hpc/ovis/pull/613#issuecomment-775183551,"This patch addresses warnings, which become errors, found when building
with CFLAGS='-O2 -Wall -Werror' on CLE 7.0.UP02 (SuSE 15.1) system.","This is in PrgEnv_Gnu environment. @nichamon and I also tried CFLAGS='-Wall -Werror -O2 on CentOS, some of the warnings (that turned into errors) in this patch also came up. When we build with -O0 or not giving any optimization option, these warnings didn't come up though.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,613,2021-02-05T05:41:26Z,2021-02-09T17:14:19Z,2021-02-09T17:14:19Z,MERGED,True,30,18,13,https://github.com/narategithub,Address build warnings (errors) when '-O2' is given,1,[],https://github.com/ovis-hpc/ovis/pull/613,https://github.com/tom95858,4,https://github.com/ovis-hpc/ovis/pull/613#issuecomment-775256992,"This patch addresses warnings, which become errors, found when building
with CFLAGS='-O2 -Wall -Werror' on CLE 7.0.UP02 (SuSE 15.1) system.","Let's start with the real issues, i.e. the potential use of an uninitialized variable. Put those in their own pull request, and then let's try and figure out what's up with strcpy/strncpy, etc... Also, there are a bunch of trailing spaces that you cleaned up. I wonder if we can add a pull check that will ensure a pull request is not adding white-space pollution.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,613,2021-02-05T05:41:26Z,2021-02-09T17:14:19Z,2021-02-09T17:14:19Z,MERGED,True,30,18,13,https://github.com/narategithub,Address build warnings (errors) when '-O2' is given,1,[],https://github.com/ovis-hpc/ovis/pull/613,https://github.com/narategithub,5,https://github.com/ovis-hpc/ovis/pull/613#issuecomment-775265501,"This patch addresses warnings, which become errors, found when building
with CFLAGS='-O2 -Wall -Werror' on CLE 7.0.UP02 (SuSE 15.1) system.",OK. I'll separate the strcpy/strncpy out. I'll also add a github action check for trailing spaces.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,613,2021-02-05T05:41:26Z,2021-02-09T17:14:19Z,2021-02-09T17:14:19Z,MERGED,True,30,18,13,https://github.com/narategithub,Address build warnings (errors) when '-O2' is given,1,[],https://github.com/ovis-hpc/ovis/pull/613,https://github.com/tom95858,6,https://github.com/ovis-hpc/ovis/pull/613#issuecomment-775290045,"This patch addresses warnings, which become errors, found when building
with CFLAGS='-O2 -Wall -Werror' on CLE 7.0.UP02 (SuSE 15.1) system.","I think the strncpy warning comes up if the size specified is equal the destination buffer size. To make it go away, I think you can just make the size argument sz - 1.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,613,2021-02-05T05:41:26Z,2021-02-09T17:14:19Z,2021-02-09T17:14:19Z,MERGED,True,30,18,13,https://github.com/narategithub,Address build warnings (errors) when '-O2' is given,1,[],https://github.com/ovis-hpc/ovis/pull/613,https://github.com/narategithub,7,https://github.com/ovis-hpc/ovis/pull/613#issuecomment-775293413,"This patch addresses warnings, which become errors, found when building
with CFLAGS='-O2 -Wall -Werror' on CLE 7.0.UP02 (SuSE 15.1) system.","I tried, it didn't 😆",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,613,2021-02-05T05:41:26Z,2021-02-09T17:14:19Z,2021-02-09T17:14:19Z,MERGED,True,30,18,13,https://github.com/narategithub,Address build warnings (errors) when '-O2' is given,1,[],https://github.com/ovis-hpc/ovis/pull/613,https://github.com/narategithub,8,https://github.com/ovis-hpc/ovis/pull/613#issuecomment-775330809,"This patch addresses warnings, which become errors, found when building
with CFLAGS='-O2 -Wall -Werror' on CLE 7.0.UP02 (SuSE 15.1) system.",@tom95858 the strcpy/strncpy/snprintf have been removed from the patch. It is ready for you to review.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,613,2021-02-05T05:41:26Z,2021-02-09T17:14:19Z,2021-02-09T17:14:19Z,MERGED,True,30,18,13,https://github.com/narategithub,Address build warnings (errors) when '-O2' is given,1,[],https://github.com/ovis-hpc/ovis/pull/613,https://github.com/narategithub,9,https://github.com/ovis-hpc/ovis/pull/613#issuecomment-775363190,"This patch addresses warnings, which become errors, found when building
with CFLAGS='-O2 -Wall -Werror' on CLE 7.0.UP02 (SuSE 15.1) system.",@tom95858 the commit has been fixed up.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,614,2021-02-05T19:37:42Z,2021-02-18T17:32:54Z,2021-02-18T17:32:54Z,MERGED,True,13,16,1,https://github.com/morrone,Improve code comments about ldmsd messages,1,[],https://github.com/ovis-hpc/ovis/pull/614,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/614,"Update the code comments about the ldmsd message
Standard Record Format, and remove the information about
the no longer used String Record Format.","Update the code comments about the ldmsd message
Standard Record Format, and remove the information about
the no longer used String Record Format.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,615,2021-02-06T00:51:52Z,2021-02-06T16:58:37Z,2021-02-06T16:58:37Z,MERGED,True,1,0,1,https://github.com/baallan,improve handling of missing input file,1,[],https://github.com/ovis-hpc/ovis/pull/615,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/615,Prevent further used of an invalid string after it's been found bad.,Prevent further used of an invalid string after it's been found bad.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,617,2021-02-08T18:13:44Z,2021-02-08T19:04:34Z,2021-02-08T19:04:34Z,MERGED,True,29,0,1,https://github.com/narategithub,Add trailing-space-checking github action,1,[],https://github.com/ovis-hpc/ovis/pull/617,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/617,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,617,2021-02-08T18:13:44Z,2021-02-08T19:04:34Z,2021-02-08T19:04:34Z,MERGED,True,29,0,1,https://github.com/narategithub,Add trailing-space-checking github action,1,[],https://github.com/ovis-hpc/ovis/pull/617,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/617#issuecomment-775369232,,"This has been tested with a ""bad"" pull request (containing trailing white spaces), and a ""good"" one.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,618,2021-02-09T04:15:57Z,2021-08-31T04:51:03Z,2022-01-18T04:08:45Z,CLOSED,False,232,55,6,https://github.com/nichamon,Introduce metric units to LDMS,3,[],https://github.com/ovis-hpc/ovis/pull/618,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/618,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,618,2021-02-09T04:15:57Z,2021-08-31T04:51:03Z,2022-01-18T04:08:45Z,CLOSED,False,232,55,6,https://github.com/nichamon,Introduce metric units to LDMS,3,[],https://github.com/ovis-hpc/ovis/pull/618,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/618#issuecomment-776048322,,"Why are we shortening the space available for the metric name to accommodate the unit string?  Widen the fields, and if width is a problem, make display of units optional. (-U)",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,618,2021-02-09T04:15:57Z,2021-08-31T04:51:03Z,2022-01-18T04:08:45Z,CLOSED,False,232,55,6,https://github.com/nichamon,Introduce metric units to LDMS,3,[],https://github.com/ovis-hpc/ovis/pull/618,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/618#issuecomment-776923714,,"Why are we shortening the space available for the metric name to accommodate the unit string? Widen the fields, and if width is a problem, make display of units optional. (-U)

@baallan, @morrone, the reason for the ""clever code"" is because we require binary compatibility with earlier releases. So we can't change the size of these things or it will break.
@morrone, we can change the name of the field, but vd_strings is less informative in my opinion than vd_name.
@nichamon, did you look at using vd_user_data for the units string? I don't think this field is used. That would give us 7B (1 for the terminating '\0') for the unit string, which I think is sufficient.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,618,2021-02-09T04:15:57Z,2021-08-31T04:51:03Z,2022-01-18T04:08:45Z,CLOSED,False,232,55,6,https://github.com/nichamon,Introduce metric units to LDMS,3,[],https://github.com/ovis-hpc/ovis/pull/618,https://github.com/morrone,4,https://github.com/ovis-hpc/ovis/pull/618#issuecomment-776939432,,"Why are we shortening the space available for the metric name to accommodate the unit string? Widen the fields, and if width is a problem, make display of units optional. (-U)

@baallan, @morrone, the reason for the ""clever code"" is because we require binary compatibility with earlier releases. So we can't change the size of these things or it will break.
@morrone, we can change the name of the field, but vd_strings is less informative in my opinion than vd_name.
@nichamon, did you look at using vd_user_data for the units string? I don't think this field is used. That would give us 7B (1 for the terminating '\0') for the unit string, which I think is sufficient.

I completely understood that this was for backwards compatibility reasons.
But I'm not sure that you got my point about renaming vd_name, because my point was more about change than advocating for a particular new name. My point is that it needs to be renamed so that people will not think it represents a single field when it in fact represents two fields. It also needs to be well documented how a single field is being overloaded to pack in two fields. Being too-clever-for-our-own good to avoid changing the protocol will bite us in the long term in terms of code complexity and technical debt, unless we take careful measures to avoid confusion.
Are we really sure that 7 bytes would be enough? Have we done a survey of the units that we currently use? I'm a little concerned that we'll wind up with some strange abbreviations that deprive us of the clarity that we would hope for by adding the units field.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,618,2021-02-09T04:15:57Z,2021-08-31T04:51:03Z,2022-01-18T04:08:45Z,CLOSED,False,232,55,6,https://github.com/nichamon,Introduce metric units to LDMS,3,[],https://github.com/ovis-hpc/ovis/pull/618,https://github.com/baallan,5,https://github.com/ovis-hpc/ovis/pull/618#issuecomment-776984031,,"@tom95858 I'm talking about (and just about) the io format to screen, not wire protocol. The currently proposed change is actual back-incompatible. Adding a -U to enable printing units only when present would preserve back-compatibility.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,618,2021-02-09T04:15:57Z,2021-08-31T04:51:03Z,2022-01-18T04:08:45Z,CLOSED,False,232,55,6,https://github.com/nichamon,Introduce metric units to LDMS,3,[],https://github.com/ovis-hpc/ovis/pull/618,https://github.com/tom95858,6,https://github.com/ovis-hpc/ovis/pull/618#issuecomment-776989818,,"@morrone, I think I understand about changing the name and I think changing it is fine, maybe vd_name_units or somesuch. I think we need a comment too.
The support for metric units (in master) had a fixed size string of 8B that was part of the mdesc structure; since that fits in the unused field I mentioned it as a possibility. If we feel that's not long enough, @nichamon 's current implementation allows for that, but has this somewhat in-obvious embedded '\0'.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,618,2021-02-09T04:15:57Z,2021-08-31T04:51:03Z,2022-01-18T04:08:45Z,CLOSED,False,232,55,6,https://github.com/nichamon,Introduce metric units to LDMS,3,[],https://github.com/ovis-hpc/ovis/pull/618,https://github.com/tom95858,7,https://github.com/ovis-hpc/ovis/pull/618#issuecomment-776991513,,"@baallan, please explain how exactly this is backward in-compatible.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,618,2021-02-09T04:15:57Z,2021-08-31T04:51:03Z,2022-01-18T04:08:45Z,CLOSED,False,232,55,6,https://github.com/nichamon,Introduce metric units to LDMS,3,[],https://github.com/ovis-hpc/ovis/pull/618,https://github.com/baallan,8,https://github.com/ovis-hpc/ovis/pull/618#issuecomment-777020255,,"@baallan, please explain how exactly this is backward in-compatible.

If I'm reading the screen and suddenly a new column appears and my old column is shorter and is truncating its contents unlike it did before, I'd call that back incompatible. That's what the string format change does.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,618,2021-02-09T04:15:57Z,2021-08-31T04:51:03Z,2022-01-18T04:08:45Z,CLOSED,False,232,55,6,https://github.com/nichamon,Introduce metric units to LDMS,3,[],https://github.com/ovis-hpc/ovis/pull/618,https://github.com/nichamon,9,https://github.com/ovis-hpc/ovis/pull/618#issuecomment-779434924,,"@nichamon, did you look at using vd_user_data for the units string? I don't think this field is used. That would give us 7B (1 for the terminating '\0') for the unit string, which I think is sufficient.

Hi @tom95858 ,
There are configuration commands to set user data. I don't have information on whether users are using the commands to set the user data. I prefer not to have a length-restriction on the unit lengths. Historically, the length limitation has bitten us a few times, and we had to change the data structure/code.  Do you have any concerns over long unit strings?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,618,2021-02-09T04:15:57Z,2021-08-31T04:51:03Z,2022-01-18T04:08:45Z,CLOSED,False,232,55,6,https://github.com/nichamon,Introduce metric units to LDMS,3,[],https://github.com/ovis-hpc/ovis/pull/618,https://github.com/nichamon,10,https://github.com/ovis-hpc/ovis/pull/618#issuecomment-779444529,,"@morrone, I think I understand about changing the name and I think changing it is fine, maybe vd_name_units or somesuch. I think we need a comment too.
The support for metric units (in master) had a fixed size string of 8B that was part of the mdesc structure; since that fits in the unused field I mentioned it as a possibility. If we feel that's not long enough, @nichamon 's current implementation allows for that, but has this somewhat in-obvious embedded '\0'.

@tom95858 @morrone
I think we are on the same page that the field vd_name and vd_name_len should be renamed. I will change them to vd_name_unit and vd_name_util_len. I will add comments to clarify the field definitions.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,618,2021-02-09T04:15:57Z,2021-08-31T04:51:03Z,2022-01-18T04:08:45Z,CLOSED,False,232,55,6,https://github.com/nichamon,Introduce metric units to LDMS,3,[],https://github.com/ovis-hpc/ovis/pull/618,https://github.com/nichamon,11,https://github.com/ovis-hpc/ovis/pull/618#issuecomment-779585376,,@tom95858 @morrone I have addressed the field names and added comments as well as the API documents.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,618,2021-02-09T04:15:57Z,2021-08-31T04:51:03Z,2022-01-18T04:08:45Z,CLOSED,False,232,55,6,https://github.com/nichamon,Introduce metric units to LDMS,3,[],https://github.com/ovis-hpc/ovis/pull/618,https://github.com/tom95858,12,https://github.com/ovis-hpc/ovis/pull/618#issuecomment-780014121,,"I don't think it is desirable to have these 'disable format xyz' flags. The
number and meaning of these flags would grow over time and are simply not
maintainable. We can't possibly predict the ways in which users may build
scripts that process command-x's output.

I do think it is reasonable to have a flag that allows us to export data as
CSV or JSON for example. This would make it much easier to write and
maintain scripts that process command output.
…
On Tue, Feb 16, 2021 at 9:01 AM Benjamin Allan ***@***.***> wrote:
 ***@***.**** commented on this pull request.
 ------------------------------

 In ldms/src/ldmsd/ldms_ls.c
 <#618 (comment)>:

 >  	}
 -	if (user_data)
 -		sprintf(name_str, ""%-42s 0x%"" PRIx64,

 This is not a satisfactory solution as we have metrics with names that
 already end with (xxxxxxx). please make units a separate column and make
 that column controllable by a format control flag.
 Unix 'ls' has numerous format control flags, and there's no reason ldms_ls
 shouldn't.

 If we're on a spree to make ldms_ls compatible and useful and extensible,
 please consider the example of slurm 'sacct' which supports a ""machine
 parseable"" mode. In machine parseable mode, columns are separated by a
 documented character (| in the case of sacct; we could use \t instead) and
 a corresponding column header is optionally produced using the same
 separator. If you aren't using ""parseable"" mode, you get no expectation of
 back compatibility. If you add a documented parseable mode simultaneously,
 I withdraw any objections about whimsical human-oriented formatting. Notice
 in the sacct example that you get a ""format"" option to specify which
 columns you want (for either parsable or whimsical format).

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#618 (comment)>, or
 unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ABVTPXAOPZLNA7T5SOBDYDLS7KJFJANCNFSM4XKHWIEA>
 .


-- 
Thomas Tucker, President, Open Grid Computing, Inc.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,618,2021-02-09T04:15:57Z,2021-08-31T04:51:03Z,2022-01-18T04:08:45Z,CLOSED,False,232,55,6,https://github.com/nichamon,Introduce metric units to LDMS,3,[],https://github.com/ovis-hpc/ovis/pull/618,https://github.com/baallan,13,https://github.com/ovis-hpc/ovis/pull/618#issuecomment-780031184,,"I do think it is reasonable to have a flag that allows us to export data as CSV or JSON for example. This would make it much easier to write and maintain scripts that process command output.

So to be specific about something that has proved very useful:
sacct -o FORMAT -p
produces something very import friendly to spreadsheets and python/perl tabular parsing in spite of a lot of gunk that may appear inside the report columns. FORMAT defines the columns selected, not tabular vs json. In particular, commas and whitespace do not interfere because the pipe separator is used. See 'man sacct'. Arguably, we could support ""-o format -f<json|tabular[:separator]>"" since -p is already taken and we should probably reserve -d for debugging output not yet provided.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,618,2021-02-09T04:15:57Z,2021-08-31T04:51:03Z,2022-01-18T04:08:45Z,CLOSED,False,232,55,6,https://github.com/nichamon,Introduce metric units to LDMS,3,[],https://github.com/ovis-hpc/ovis/pull/618,https://github.com/tom95858,14,https://github.com/ovis-hpc/ovis/pull/618#issuecomment-780036929,,"@baallan, @nichamon , then let's please take a look at sacct and do this work in a different patch? I think it will be a bit substantial.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,618,2021-02-09T04:15:57Z,2021-08-31T04:51:03Z,2022-01-18T04:08:45Z,CLOSED,False,232,55,6,https://github.com/nichamon,Introduce metric units to LDMS,3,[],https://github.com/ovis-hpc/ovis/pull/618,https://github.com/baallan,15,https://github.com/ovis-hpc/ovis/pull/618#issuecomment-780080426,,"A separate patch to add sacct-style output make sense to me. I would prefer to see it merged/released at the same time as anything that modifies ldms_ls output, so that the downstream repair to filters broken by changes to ldms_ls human format are all addressable by going directly to the machine parsable formats instead of needing another iteration of ldms_ls human output parsing.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,618,2021-02-09T04:15:57Z,2021-08-31T04:51:03Z,2022-01-18T04:08:45Z,CLOSED,False,232,55,6,https://github.com/nichamon,Introduce metric units to LDMS,3,[],https://github.com/ovis-hpc/ovis/pull/618,https://github.com/nichamon,16,https://github.com/ovis-hpc/ovis/pull/618#issuecomment-780122321,,"@tom95858 IMO, any changes to ldms_ls that do not relate to metric units should go to another patch.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,618,2021-02-09T04:15:57Z,2021-08-31T04:51:03Z,2022-01-18T04:08:45Z,CLOSED,False,232,55,6,https://github.com/nichamon,Introduce metric units to LDMS,3,[],https://github.com/ovis-hpc/ovis/pull/618,https://github.com/baallan,17,https://github.com/ovis-hpc/ovis/pull/618#issuecomment-832450352,,"@valleydlr Given that very few of the data sources actually supply units, why are we adding units to the data collection infrastructure? What requirement is this addressing? It seems that the efficient solution would be to supply a separately curated database that can be independently queried with a key of plugin_name:metric_name for the units and many other useful attributes.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,618,2021-02-09T04:15:57Z,2021-08-31T04:51:03Z,2022-01-18T04:08:45Z,CLOSED,False,232,55,6,https://github.com/nichamon,Introduce metric units to LDMS,3,[],https://github.com/ovis-hpc/ovis/pull/618,https://github.com/narategithub,18,https://github.com/ovis-hpc/ovis/pull/618#issuecomment-908896745,,Part of #783,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,619,2021-02-09T04:27:24Z,2021-02-09T17:00:41Z,2021-02-09T17:00:41Z,MERGED,True,2,3,1,https://github.com/narategithub,Fix rbd leak/infinite loop/crash in `ldms_set_delete()`,1,[],https://github.com/ovis-hpc/ovis/pull/619,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/619,"next_rbd was not set before jumping to next_1 label. If the first
rbd did not have xprt, then the loop stopped prematurely (as
rbd = next_rbd being NULL). If the first rbd had xprt, but one of
the other rbd did not have xprt, rbd value would stay the same
since next_rbd value won't change and rbd = next_rbd. This resulted
either in an inifinite loop (rbd won't be NULL) or a crash (too many
ref_put() on the rbd).","next_rbd was not set before jumping to next_1 label. If the first
rbd did not have xprt, then the loop stopped prematurely (as
rbd = next_rbd being NULL). If the first rbd had xprt, but one of
the other rbd did not have xprt, rbd value would stay the same
since next_rbd value won't change and rbd = next_rbd. This resulted
either in an inifinite loop (rbd won't be NULL) or a crash (too many
ref_put() on the rbd).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,619,2021-02-09T04:27:24Z,2021-02-09T17:00:41Z,2021-02-09T17:00:41Z,MERGED,True,2,3,1,https://github.com/narategithub,Fix rbd leak/infinite loop/crash in `ldms_set_delete()`,1,[],https://github.com/ovis-hpc/ovis/pull/619,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/619#issuecomment-775673110,"next_rbd was not set before jumping to next_1 label. If the first
rbd did not have xprt, then the loop stopped prematurely (as
rbd = next_rbd being NULL). If the first rbd had xprt, but one of
the other rbd did not have xprt, rbd value would stay the same
since next_rbd value won't change and rbd = next_rbd. This resulted
either in an inifinite loop (rbd won't be NULL) or a crash (too many
ref_put() on the rbd).",This has passed all test cases in ldms-test.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,620,2021-02-09T06:16:18Z,2021-02-09T16:59:21Z,2022-01-18T04:09:07Z,MERGED,True,15,20,1,https://github.com/nichamon,Update the test_ldms_push test program,1,[],https://github.com/ovis-hpc/ovis/pull/620,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/620,"The patch addresses two issues.

The range of the update status has been changed, but the test hasn’t
been updated accordingly. Without the changes, some test conditions are
always true, and some are always false.
As clients, the test program did not use the given host value to connect
to servers. Clients could not connect to a server on a remote machine.","The patch addresses two issues.

The range of the update status has been changed, but the test hasn’t
been updated accordingly. Without the changes, some test conditions are
always true, and some are always false.
As clients, the test program did not use the given host value to connect
to servers. Clients could not connect to a server on a remote machine.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,621,2021-02-10T06:05:45Z,2021-02-11T18:37:20Z,2021-02-11T18:37:20Z,MERGED,True,87,33,9,https://github.com/narategithub,Resolve `-O2` warnings on `strncpy`,1,[],https://github.com/ovis-hpc/ovis/pull/621,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/621,"On Cray Linux Environment (CLE) 7.0.UP02, gcc-9 seems to be the
preferred GNU C compiler. When '-O2' is supplied to the CFLAGS,
-Werror=stringop-truncation (which is not present in GCC 4.8.5 on
CentOS 7) is also enabled and gives the following warnings in many
places in our source tree (which results in error by -Werror):
    error: ‘strncpy’ specified bound <NUMBER> equals destination size

This patch addresses places where the warnings occur, and provides
length checking if necessary.","On Cray Linux Environment (CLE) 7.0.UP02, gcc-9 seems to be the
preferred GNU C compiler. When '-O2' is supplied to the CFLAGS,
-Werror=stringop-truncation (which is not present in GCC 4.8.5 on
CentOS 7) is also enabled and gives the following warnings in many
places in our source tree (which results in error by -Werror):
    error: ‘strncpy’ specified bound <NUMBER> equals destination size

This patch addresses places where the warnings occur, and provides
length checking if necessary.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,621,2021-02-10T06:05:45Z,2021-02-11T18:37:20Z,2021-02-11T18:37:20Z,MERGED,True,87,33,9,https://github.com/narategithub,Resolve `-O2` warnings on `strncpy`,1,[],https://github.com/ovis-hpc/ovis/pull/621,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/621#issuecomment-776469209,"On Cray Linux Environment (CLE) 7.0.UP02, gcc-9 seems to be the
preferred GNU C compiler. When '-O2' is supplied to the CFLAGS,
-Werror=stringop-truncation (which is not present in GCC 4.8.5 on
CentOS 7) is also enabled and gives the following warnings in many
places in our source tree (which results in error by -Werror):
    error: ‘strncpy’ specified bound <NUMBER> equals destination size

This patch addresses places where the warnings occur, and provides
length checking if necessary.","This pull request has been build-test with CFLAGS='-O2 -Wall -Werror' on: CentOS7, openSUSE15 (gcc-9) and CLE7. The binaries build on CentOS7 are also tested against all test cases in ldms-test repository.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,622,2021-02-10T21:12:14Z,2021-03-03T00:25:30Z,2021-03-03T00:25:30Z,MERGED,True,1375,0,15,https://github.com/Snell1224,Implement tx2mon sampler plugin,1,[],https://github.com/ovis-hpc/ovis/pull/622,https://github.com/Snell1224,1,https://github.com/ovis-hpc/ovis/pull/622,"Adding a sampler called tx2mon. This sampler is designed to run on Stria because this machine contains the kernel module ""tx2mon_kmod"" that produces the decoded sysfs files that are used to map to operating region metrics.
As with the tx2mon utility, the tx2mon sampler reports cpu and system-on-chip information from the node files located in the /sys/bus/platform/devices/tx2mon/[socinfo, node_raw], decodes and provides the metric values of the SoC management controller (MC) operating region, current temperature from sensors and the frequencies and power measurements that is logged by the MC to host memory.
The tx2mon sampler reports the same units and variables as the tx2mon command-line utility.
The sampler contains two options where:
1.) User can enable/disable set system metrics and additional information of the internal block frequencies. (extra=true/false)
2.) User can view the frequency and temperature readings of each core or only the maximum and minimum frequency and temperature of all cores. (array=true/false)
Test and auto-schema naming option scripts have been created for ldms-static-test.sh.","Adding a sampler called tx2mon. This sampler is designed to run on Stria because this machine contains the kernel module ""tx2mon_kmod"" that produces the decoded sysfs files that are used to map to operating region metrics.
As with the tx2mon utility, the tx2mon sampler reports cpu and system-on-chip information from the node files located in the /sys/bus/platform/devices/tx2mon/[socinfo, node_raw], decodes and provides the metric values of the SoC management controller (MC) operating region, current temperature from sensors and the frequencies and power measurements that is logged by the MC to host memory.
The tx2mon sampler reports the same units and variables as the tx2mon command-line utility.
The sampler contains two options where:
1.) User can enable/disable set system metrics and additional information of the internal block frequencies. (extra=true/false)
2.) User can view the frequency and temperature readings of each core or only the maximum and minimum frequency and temperature of all cores. (array=true/false)
Test and auto-schema naming option scripts have been created for ldms-static-test.sh.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,622,2021-02-10T21:12:14Z,2021-03-03T00:25:30Z,2021-03-03T00:25:30Z,MERGED,True,1375,0,15,https://github.com/Snell1224,Implement tx2mon sampler plugin,1,[],https://github.com/ovis-hpc/ovis/pull/622,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/622#issuecomment-777079262,"Adding a sampler called tx2mon. This sampler is designed to run on Stria because this machine contains the kernel module ""tx2mon_kmod"" that produces the decoded sysfs files that are used to map to operating region metrics.
As with the tx2mon utility, the tx2mon sampler reports cpu and system-on-chip information from the node files located in the /sys/bus/platform/devices/tx2mon/[socinfo, node_raw], decodes and provides the metric values of the SoC management controller (MC) operating region, current temperature from sensors and the frequencies and power measurements that is logged by the MC to host memory.
The tx2mon sampler reports the same units and variables as the tx2mon command-line utility.
The sampler contains two options where:
1.) User can enable/disable set system metrics and additional information of the internal block frequencies. (extra=true/false)
2.) User can view the frequency and temperature readings of each core or only the maximum and minimum frequency and temperature of all cores. (array=true/false)
Test and auto-schema naming option scripts have been created for ldms-static-test.sh.","@tom95858 please review or delegate as appropriate so we can include this in the upcoming builds for thunder x2 platforms (stria/astra). I have tested it, including configure script changes and valgrind runs, on stria nodes with and without tx2mon present in the OS.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,623,2021-02-11T00:24:44Z,2021-02-11T18:17:36Z,2021-02-11T18:17:37Z,MERGED,True,2,49,2,https://github.com/morrone,Fix secondary group authentication,2,[],https://github.com/ovis-hpc/ovis/pull/623,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/623,Secondary group authentication is broken in 4.3.5+. A fairly innocuous looking deduplication of code revealed a bug in the implementation to which we switch. This fixes the bug and cleans up another function that was made redundant in the original patch.,Secondary group authentication is broken in 4.3.5+. A fairly innocuous looking deduplication of code revealed a bug in the implementation to which we switch. This fixes the bug and cleans up another function that was made redundant in the original patch.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,623,2021-02-11T00:24:44Z,2021-02-11T18:17:36Z,2021-02-11T18:17:37Z,MERGED,True,2,49,2,https://github.com/morrone,Fix secondary group authentication,2,[],https://github.com/ovis-hpc/ovis/pull/623,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/623#issuecomment-777691186,Secondary group authentication is broken in 4.3.5+. A fairly innocuous looking deduplication of code revealed a bug in the implementation to which we switch. This fixes the bug and cleans up another function that was made redundant in the original patch.,"Thanks @morrone, good catch.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,624,2021-02-11T16:59:14Z,2021-02-12T18:19:25Z,2021-02-12T18:19:34Z,CLOSED,False,217,82,5,https://github.com/tom95858,Streams fixes,4,[],https://github.com/ovis-hpc/ovis/pull/624,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/624,These changes improve the performance of the LDMSD streams facility.,These changes improve the performance of the LDMSD streams facility.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,625,2021-02-11T19:44:24Z,2021-02-11T21:27:15Z,2021-02-11T21:27:15Z,MERGED,True,0,2,1,https://github.com/narategithub,Only check space on pull request,1,[],https://github.com/ovis-hpc/ovis/pull/625,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/625,"The space-checking github action should be executed against pull
requests only.","The space-checking github action should be executed against pull
requests only.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,626,2021-02-11T20:13:14Z,2021-05-11T16:16:15Z,2021-05-11T16:16:15Z,MERGED,True,69,2,8,https://github.com/narategithub,zap close to wait for empty sq,2,[],https://github.com/ovis-hpc/ovis/pull/626,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/626,"Modify zap close to wait for empty send queue. This is to ensure
that the send operations requested by the application got submitted
to the underlying socket before the socket get destroyed by close().
This patch has been tested with test cases in ldms-test repository.","Modify zap close to wait for empty send queue. This is to ensure
that the send operations requested by the application got submitted
to the underlying socket before the socket get destroyed by close().
This patch has been tested with test cases in ldms-test repository.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,626,2021-02-11T20:13:14Z,2021-05-11T16:16:15Z,2021-05-11T16:16:15Z,MERGED,True,69,2,8,https://github.com/narategithub,zap close to wait for empty sq,2,[],https://github.com/ovis-hpc/ovis/pull/626,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/626#issuecomment-777766197,"Modify zap close to wait for empty send queue. This is to ensure
that the send operations requested by the application got submitted
to the underlying socket before the socket get destroyed by close().
This patch has been tested with test cases in ldms-test repository.","@tom95858 I think this change has a high risk of deadlock. ldms_xprt_close() which calls zap_close() actually get called from various places in the zap callback path. Since zap_close() is blocked in the thread working on the callback which also works on processing sq entries, the sq may never be emptied. Maybe we have to wait for the send completion patch instead?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,626,2021-02-11T20:13:14Z,2021-05-11T16:16:15Z,2021-05-11T16:16:15Z,MERGED,True,69,2,8,https://github.com/narategithub,zap close to wait for empty sq,2,[],https://github.com/ovis-hpc/ovis/pull/626,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/626#issuecomment-777802188,"Modify zap close to wait for empty send queue. This is to ensure
that the send operations requested by the application got submitted
to the underlying socket before the socket get destroyed by close().
This patch has been tested with test cases in ldms-test repository.","Perhaps the upcall path in zap_sock.c should not call zap_close directly; it should call an internal function that doesn't wait. The case where we have an issue is when the application calls exit() immediately after calling zap_close(). To test out that theory, could add a zap_close_wait() function and see that it does what you expect.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,626,2021-02-11T20:13:14Z,2021-05-11T16:16:15Z,2021-05-11T16:16:15Z,MERGED,True,69,2,8,https://github.com/narategithub,zap close to wait for empty sq,2,[],https://github.com/ovis-hpc/ovis/pull/626,https://github.com/narategithub,4,https://github.com/ovis-hpc/ovis/pull/626#issuecomment-777951598,"Modify zap close to wait for empty send queue. This is to ensure
that the send operations requested by the application got submitted
to the underlying socket before the socket get destroyed by close().
This patch has been tested with test cases in ldms-test repository.","@tom95858 I made the change so that zap sock close would not block if it is called from the endpoint callback chain (zap worker thread of the endpoint). I think this should suffice .. (but I may be wrong 😅).
Adding zap_close_wait() implies zap.close_wait() for each transport, and ldms_xprt_close_wait() too, right? Seems like a bigger change.
I'll remove the draft status so that you can merge if it looks OK.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,626,2021-02-11T20:13:14Z,2021-05-11T16:16:15Z,2021-05-11T16:16:15Z,MERGED,True,69,2,8,https://github.com/narategithub,zap close to wait for empty sq,2,[],https://github.com/ovis-hpc/ovis/pull/626,https://github.com/narategithub,5,https://github.com/ovis-hpc/ovis/pull/626#issuecomment-780752901,"Modify zap close to wait for empty send queue. This is to ensure
that the send operations requested by the application got submitted
to the underlying socket before the socket get destroyed by close().
This patch has been tested with test cases in ldms-test repository.",@tom95858 I've updated other transports + sniff-tested them.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,626,2021-02-11T20:13:14Z,2021-05-11T16:16:15Z,2021-05-11T16:16:15Z,MERGED,True,69,2,8,https://github.com/narategithub,zap close to wait for empty sq,2,[],https://github.com/ovis-hpc/ovis/pull/626,https://github.com/tom95858,6,https://github.com/ovis-hpc/ovis/pull/626#issuecomment-786190959,"Modify zap close to wait for empty send queue. This is to ensure
that the send operations requested by the application got submitted
to the underlying socket before the socket get destroyed by close().
This patch has been tested with test cases in ldms-test repository.","@narategithub, how much testing has this change had? Is it ready to be merged? Have we done any scalability testing on it?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,626,2021-02-11T20:13:14Z,2021-05-11T16:16:15Z,2021-05-11T16:16:15Z,MERGED,True,69,2,8,https://github.com/narategithub,zap close to wait for empty sq,2,[],https://github.com/ovis-hpc/ovis/pull/626,https://github.com/tom95858,7,https://github.com/ovis-hpc/ovis/pull/626#issuecomment-786191783,"Modify zap close to wait for empty send queue. This is to ensure
that the send operations requested by the application got submitted
to the underlying socket before the socket get destroyed by close().
This patch has been tested with test cases in ldms-test repository.",It looks like this needs to be rebased.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,626,2021-02-11T20:13:14Z,2021-05-11T16:16:15Z,2021-05-11T16:16:15Z,MERGED,True,69,2,8,https://github.com/narategithub,zap close to wait for empty sq,2,[],https://github.com/ovis-hpc/ovis/pull/626,https://github.com/narategithub,8,https://github.com/ovis-hpc/ovis/pull/626#issuecomment-786356990,"Modify zap close to wait for empty send queue. This is to ensure
that the send operations requested by the application got submitted
to the underlying socket before the socket get destroyed by close().
This patch has been tested with test cases in ldms-test repository.",@tom95858 I've not scale-test it yet. I'll do the sock & rdma on Cygnus. @nichamon  will help test this out on uGNI.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,626,2021-02-11T20:13:14Z,2021-05-11T16:16:15Z,2021-05-11T16:16:15Z,MERGED,True,69,2,8,https://github.com/narategithub,zap close to wait for empty sq,2,[],https://github.com/ovis-hpc/ovis/pull/626,https://github.com/narategithub,9,https://github.com/ovis-hpc/ovis/pull/626#issuecomment-786459565,"Modify zap close to wait for empty send queue. This is to ensure
that the send operations requested by the application got submitted
to the underlying socket before the socket get destroyed by close().
This patch has been tested with test cases in ldms-test repository.","@tom95858 Updates:
I use the following setup on cygnus:

100 samplers on cygnus-01..04 (400 samplers total), each sampler has 1 test set
4 agg1, each connect to 100 samplers
2 agg2, each connect to 2 agg1
1 agg3, connect to the 2 agg2

sampler daemons flap (restart) every 1 minute. agg2 flap every 5 cycle of sampler flaps.
sock seems OK (ran for about 20 minutes).
rdma has been running for about the same time now .. still OK (data on agg3 is up-to-date). I'll let it run overnight and check again tomorrow (rdma).
@nichamon is still working on testing this on uGNI xprt.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,626,2021-02-11T20:13:14Z,2021-05-11T16:16:15Z,2021-05-11T16:16:15Z,MERGED,True,69,2,8,https://github.com/narategithub,zap close to wait for empty sq,2,[],https://github.com/ovis-hpc/ovis/pull/626,https://github.com/narategithub,10,https://github.com/ovis-hpc/ovis/pull/626#issuecomment-786796620,"Modify zap close to wait for empty send queue. This is to ensure
that the send operations requested by the application got submitted
to the underlying socket before the socket get destroyed by close().
This patch has been tested with test cases in ldms-test repository.",@tom95858 zap_rdma is good. @nichamon is working on uGNI test.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,626,2021-02-11T20:13:14Z,2021-05-11T16:16:15Z,2021-05-11T16:16:15Z,MERGED,True,69,2,8,https://github.com/narategithub,zap close to wait for empty sq,2,[],https://github.com/ovis-hpc/ovis/pull/626,https://github.com/nichamon,11,https://github.com/ovis-hpc/ovis/pull/626#issuecomment-788593373,"Modify zap close to wait for empty send queue. This is to ensure
that the send operations requested by the application got submitted
to the underlying socket before the socket get destroyed by close().
This patch has been tested with test cases in ldms-test repository.",The patch passes the same tests as I ran for the fix to ldmsd_stream_publish_file() #644 (comment). It passes both for zap_sock and zap_ugni.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,626,2021-02-11T20:13:14Z,2021-05-11T16:16:15Z,2021-05-11T16:16:15Z,MERGED,True,69,2,8,https://github.com/narategithub,zap close to wait for empty sq,2,[],https://github.com/ovis-hpc/ovis/pull/626,https://github.com/nichamon,12,https://github.com/ovis-hpc/ovis/pull/626#issuecomment-788637148,"Modify zap close to wait for empty send queue. This is to ensure
that the send operations requested by the application got submitted
to the underlying socket before the socket get destroyed by close().
This patch has been tested with test cases in ldms-test repository.","I ran into a problem when testing zap_rdma. ldmsd_stream_publish hang at exit because zap_rdma blocked at pthread_join() in zap_rdma_fini. The problem is irrelevant from the patch, but it prevents me from completing the test. I'll modify my test script to handle the problem.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,626,2021-02-11T20:13:14Z,2021-05-11T16:16:15Z,2021-05-11T16:16:15Z,MERGED,True,69,2,8,https://github.com/narategithub,zap close to wait for empty sq,2,[],https://github.com/ovis-hpc/ovis/pull/626,https://github.com/nichamon,13,https://github.com/ovis-hpc/ovis/pull/626#issuecomment-790298199,"Modify zap close to wait for empty send queue. This is to ensure
that the send operations requested by the application got submitted
to the underlying socket before the socket get destroyed by close().
This patch has been tested with test cases in ldms-test repository.",The patch also passed the test when using zap_rdma.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,626,2021-02-11T20:13:14Z,2021-05-11T16:16:15Z,2021-05-11T16:16:15Z,MERGED,True,69,2,8,https://github.com/narategithub,zap close to wait for empty sq,2,[],https://github.com/ovis-hpc/ovis/pull/626,https://github.com/nichamon,14,https://github.com/ovis-hpc/ovis/pull/626#issuecomment-796513726,"Modify zap close to wait for empty send queue. This is to ensure
that the send operations requested by the application got submitted
to the underlying socket before the socket get destroyed by close().
This patch has been tested with test cases in ldms-test repository.","For zap_fabric, ldmsd_stream_subscribe didn't receive all the stream data sent by ldmsd_stream_publish regardless of the stream size, smaller or bigger than the max msg length. @narategithub and I have been investigating this.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,626,2021-02-11T20:13:14Z,2021-05-11T16:16:15Z,2021-05-11T16:16:15Z,MERGED,True,69,2,8,https://github.com/narategithub,zap close to wait for empty sq,2,[],https://github.com/ovis-hpc/ovis/pull/626,https://github.com/tom95858,15,https://github.com/ovis-hpc/ovis/pull/626#issuecomment-797112556,"Modify zap close to wait for empty send queue. This is to ensure
that the send operations requested by the application got submitted
to the underlying socket before the socket get destroyed by close().
This patch has been tested with test cases in ldms-test repository.","@nichamon, is this ready to go? Should we fix the pthread_timejoin_np in this patch and retest with RDMA?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,626,2021-02-11T20:13:14Z,2021-05-11T16:16:15Z,2021-05-11T16:16:15Z,MERGED,True,69,2,8,https://github.com/narategithub,zap close to wait for empty sq,2,[],https://github.com/ovis-hpc/ovis/pull/626,https://github.com/narategithub,16,https://github.com/ovis-hpc/ovis/pull/626#issuecomment-797245899,"Modify zap close to wait for empty send queue. This is to ensure
that the send operations requested by the application got submitted
to the underlying socket before the socket get destroyed by close().
This patch has been tested with test cases in ldms-test repository.",@tom95858 pthread_timedjoin_np() has been added (commit 8144b20) into this pull request.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,626,2021-02-11T20:13:14Z,2021-05-11T16:16:15Z,2021-05-11T16:16:15Z,MERGED,True,69,2,8,https://github.com/narategithub,zap close to wait for empty sq,2,[],https://github.com/ovis-hpc/ovis/pull/626,https://github.com/nichamon,17,https://github.com/ovis-hpc/ovis/pull/626#issuecomment-797295990,"Modify zap close to wait for empty send queue. This is to ensure
that the send operations requested by the application got submitted
to the underlying socket before the socket get destroyed by close().
This patch has been tested with test cases in ldms-test repository.","I think this is ready to be merged.
I retested zap_rdma with the pthread_timejoin_np(). I ran ldmsd_stream_publish 3000 times, and I could not reproduce the hang. I would say that the zap_rdma close and pthread_timedjoin_np patches are good.
Narate and I also tested zap_fabric in this patch, and ldmsd_stream_subscribe receives all streams sent by ldmsd_stream_publish. I ran ldmsd_stream_publish 3000 times, and ldmsd_stream_subscribe received all the streams data.

For zap_fabric, ldmsd_stream_subscribe didn't receive all the stream data sent by ldmsd_stream_publish regardless of the stream size, smaller or bigger than the max msg length. @narategithub and I have been investigating this.

My test script was the cause of the problem above.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,627,2021-02-12T05:55:15Z,2021-02-25T20:18:20Z,2021-02-25T20:18:20Z,MERGED,True,235,6,9,https://github.com/morrone,Create the metric_sets_default_authz configuration option and rpc,2,[],https://github.com/ovis-hpc/ovis/pull/627,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/627,"Create a new configuration directive ""metric_sets_default_authz"" and
the associated rpc with ID LDMSD_SET_DEFAULT_AUTHZ_REQ.
This directive/rpc allows the default uid, gid, and perms of
metrics sets to be configured. All subsequently created metric sets
will use these default values unless overridden.","Create a new configuration directive ""metric_sets_default_authz"" and
the associated rpc with ID LDMSD_SET_DEFAULT_AUTHZ_REQ.
This directive/rpc allows the default uid, gid, and perms of
metrics sets to be configured. All subsequently created metric sets
will use these default values unless overridden.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,627,2021-02-12T05:55:15Z,2021-02-25T20:18:20Z,2021-02-25T20:18:20Z,MERGED,True,235,6,9,https://github.com/morrone,Create the metric_sets_default_authz configuration option and rpc,2,[],https://github.com/ovis-hpc/ovis/pull/627,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/627#issuecomment-780827247,"Create a new configuration directive ""metric_sets_default_authz"" and
the associated rpc with ID LDMSD_SET_DEFAULT_AUTHZ_REQ.
This directive/rpc allows the default uid, gid, and perms of
metrics sets to be configured. All subsequently created metric sets
will use these default values unless overridden.","I'm adverse to adding yet another lock. There is an existing lock, the set tree lock, that would fix this race, however, this is the hottest lock in the system. If we're going to do this, we need to combine the three set_default function calls into one and use the set tree lock to make their update/query atomic. That function would use -1 to mean ""ignore"" for a given parameter. The set tree lock is already taken during set creation.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,627,2021-02-12T05:55:15Z,2021-02-25T20:18:20Z,2021-02-25T20:18:20Z,MERGED,True,235,6,9,https://github.com/morrone,Create the metric_sets_default_authz configuration option and rpc,2,[],https://github.com/ovis-hpc/ovis/pull/627,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/627#issuecomment-780861941,"Create a new configuration directive ""metric_sets_default_authz"" and
the associated rpc with ID LDMSD_SET_DEFAULT_AUTHZ_REQ.
This directive/rpc allows the default uid, gid, and perms of
metrics sets to be configured. All subsequently created metric sets
will use these default values unless overridden.","I'm adverse to adding yet another lock. There is an existing lock, the set tree lock, that would fix this race, however, this is the hottest lock in the system.

I do not think that lock is at all appropriate for this use case. As you have mentioned, it is already a hot lock. Also, this specific use case lends itself well to a reader/writer lock because writes going to be pretty uncommon relative to reads. A lock with a tightly constrained use is a better way to go in this case, I think. That is the route I'm taking at the moment.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,627,2021-02-12T05:55:15Z,2021-02-25T20:18:20Z,2021-02-25T20:18:20Z,MERGED,True,235,6,9,https://github.com/morrone,Create the metric_sets_default_authz configuration option and rpc,2,[],https://github.com/ovis-hpc/ovis/pull/627,https://github.com/nichamon,4,https://github.com/ovis-hpc/ovis/pull/627#issuecomment-780893811,"Create a new configuration directive ""metric_sets_default_authz"" and
the associated rpc with ID LDMSD_SET_DEFAULT_AUTHZ_REQ.
This directive/rpc allows the default uid, gid, and perms of
metrics sets to be configured. All subsequently created metric sets
will use these default values unless overridden.","@tom95858 @morrone
I want to make sure that we are on the same page on two points.

The UID/GID/perm should be set in one call. -1 could be used to mean 'ignore'.
We need a lock to prevent the race, whether an existing one or a new one.

@tom95858

The set tree lock is already taken during set creation.

__record_set takes the set_tree_lock. ldms_set_new_with_auth assigns the UID/GID/perm values to the set header data structure before it calls __record_set. If we want to use the set_tree_lock, ldms_set_new_with_auth must take the set_tree_lock before it calls __record_set. Besides, we don't want to change the __record_set signature to receive UID/GID/perm because it is also used in the lookup path. Do we really want to use the set_tree_lock to fix this race?
@morrone

it just pushes the problem off onto the shoulders of the plugin author. But we're not giving the plugin author any way to resolve that issue.

There is no need for sampler plugin authors to handle the race at all. As I mentioned, LDMSD can control when to change the default values and create a set. You can make LDMSD provide an API that is a wrapper of ldms_set_new_with_auth. The wrapper takes care of getting the default values and locking. Sampler plugin authors call the wrapper instead of LDMS's APIs.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,627,2021-02-12T05:55:15Z,2021-02-25T20:18:20Z,2021-02-25T20:18:20Z,MERGED,True,235,6,9,https://github.com/morrone,Create the metric_sets_default_authz configuration option and rpc,2,[],https://github.com/ovis-hpc/ovis/pull/627,https://github.com/nichamon,5,https://github.com/ovis-hpc/ovis/pull/627#issuecomment-780893942,"Create a new configuration directive ""metric_sets_default_authz"" and
the associated rpc with ID LDMSD_SET_DEFAULT_AUTHZ_REQ.
This directive/rpc allows the default uid, gid, and perms of
metrics sets to be configured. All subsequently created metric sets
will use these default values unless overridden.","@morrone
By the way, since you prefer to manage the customized UID/GID/perm default values in the LDMS layer and we need to set the UID/GID/perm in one go (not separately in 3 function calls), I don't see why we need to create another API to set the values while we already have ldms_set_new_with_auth.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,627,2021-02-12T05:55:15Z,2021-02-25T20:18:20Z,2021-02-25T20:18:20Z,MERGED,True,235,6,9,https://github.com/morrone,Create the metric_sets_default_authz configuration option and rpc,2,[],https://github.com/ovis-hpc/ovis/pull/627,https://github.com/morrone,6,https://github.com/ovis-hpc/ovis/pull/627#issuecomment-780905057,"Create a new configuration directive ""metric_sets_default_authz"" and
the associated rpc with ID LDMSD_SET_DEFAULT_AUTHZ_REQ.
This directive/rpc allows the default uid, gid, and perms of
metrics sets to be configured. All subsequently created metric sets
will use these default values unless overridden.","ldms_set_new_with_auth() and ldms_set_new() are functions that create metric sets.

@morrone
By the way, since you prefer to manage the customized UID/GID/perm default values in the LDMS layer and we need to set the UID/GID/perm in one go (not separately in 3 function calls), I don't see why we need to create another API to set the values while we already have ldms_set_new_with_auth.

I don't understand where the confusion is arising here. ldms_set_new() and ldms_set_new_with_auth() are functions that create metric sets. I am creating functions that allow the setting of default authorization values for metric sets at creation time. Those are not the same thing. ldms_set_new_with_auth doesn't address this at all, because the caller imposes their own authroization values rather than using the defaults.
And as I already pointed out, ldms_set_new_with_auth is almost entirely unused in the code at this point. ldms_set_new() is mostly used, and that allows what I think will be a common usage from users (I know it will be here at LLNL): Set the uid/gid/perm defaults once at the beginning of the configuration file, and not have to remember to repeat those over and over again for each sampler plugin.
Previously when ldms_set_new_with_auth() was more widely used, it resulted in several different hard-coded default authroization values. Doing away with that allows us to have centralized default values that are configurable. This seems vastly superior to me than having hard-coded defaults repeated over again in the code that just need to be manually kept in sync by the developer.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,627,2021-02-12T05:55:15Z,2021-02-25T20:18:20Z,2021-02-25T20:18:20Z,MERGED,True,235,6,9,https://github.com/morrone,Create the metric_sets_default_authz configuration option and rpc,2,[],https://github.com/ovis-hpc/ovis/pull/627,https://github.com/nichamon,7,https://github.com/ovis-hpc/ovis/pull/627#issuecomment-780912685,"Create a new configuration directive ""metric_sets_default_authz"" and
the associated rpc with ID LDMSD_SET_DEFAULT_AUTHZ_REQ.
This directive/rpc allows the default uid, gid, and perms of
metrics sets to be configured. All subsequently created metric sets
will use these default values unless overridden.","@morrone When I posted the comment, I was thinking about the APIs in LDMS that set the UID/GID/perm of a particular set separately. While I reviewed the pull request, I came across many places in LDMSD that calls ldms_set_new() and ldms_set_uid/gid/perm_set. Anyway, my comment is unrelated to this patch. Sorry about the confusion.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,627,2021-02-12T05:55:15Z,2021-02-25T20:18:20Z,2021-02-25T20:18:20Z,MERGED,True,235,6,9,https://github.com/morrone,Create the metric_sets_default_authz configuration option and rpc,2,[],https://github.com/ovis-hpc/ovis/pull/627,https://github.com/morrone,8,https://github.com/ovis-hpc/ovis/pull/627#issuecomment-780921038,"Create a new configuration directive ""metric_sets_default_authz"" and
the associated rpc with ID LDMSD_SET_DEFAULT_AUTHZ_REQ.
This directive/rpc allows the default uid, gid, and perms of
metrics sets to be configured. All subsequently created metric sets
will use these default values unless overridden.","@morrone When I posted the comment, I was thinking about the APIs in LDMS that set the UID/GID/perm of a particular set separately. While I reviewed the pull request, I came across many places in LDMSD that calls ldms_set_new() and ldms_set_uid/gid/perm_set. Anyway, my comment is unrelated to this patch. Sorry about the confusion.

Oh, OK! Yes, that could be changed in another PR at some point. But I can explain the reasons why that is the way that it is:

ldms already had separate _get() functions for each of uid/gid/perm, so it was consistent and symmetric to also have three separate _set() functions.
Using ldms_set_new() and separate _set() functions seems to align better with how plugin authors will normally operate. Plugins each need to parse their own ""uid="", ""gid="", and ""perm="", configure options, and those options are usually each optional. So it is entirely consistent with common practice to do this:

set = ldms_set_new()
if (user requested a custom uid in this plugin)
  ldms_set_uid_set(plugin_uid)
if (user requested a custom gid in this plugin)
  ldms_set_gid_set(plugin_gid)
if (user reuqested a custom perm in this plugin)
  ldms_set_perm_set(plugin_perm)

Sure, the plugin could look up the defaults on its own every single time and merge the defaults with only its locally set options, but that is more work than the above, which better fits the common idiom. And for the individual metric set there is no atomicity issue (as long as the permissions are set before the metric set goes public with _publish()) like there is with the global defaults.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,627,2021-02-12T05:55:15Z,2021-02-25T20:18:20Z,2021-02-25T20:18:20Z,MERGED,True,235,6,9,https://github.com/morrone,Create the metric_sets_default_authz configuration option and rpc,2,[],https://github.com/ovis-hpc/ovis/pull/627,https://github.com/morrone,9,https://github.com/ovis-hpc/ovis/pull/627#issuecomment-780935441,"Create a new configuration directive ""metric_sets_default_authz"" and
the associated rpc with ID LDMSD_SET_DEFAULT_AUTHZ_REQ.
This directive/rpc allows the default uid, gid, and perms of
metrics sets to be configured. All subsequently created metric sets
will use these default values unless overridden.","Agreed. But I'm wondering if we are talking past each other. I for one only want to make -1 mean ""use the default"", handle the race condition one way or another, and set the defaults in one function, not three.

Yes, I am already moving to having one ""set"" and one ""get"" function for the defaults. Just wait for the refresh, and maybe it will be more clear then. But ""ldms_set_new_with_auth()"" is somewhat of separate discussion. It doesn't help us with the atomicity issue that Nichamon raised, I acknowledged, and have code coming that addresses.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,627,2021-02-12T05:55:15Z,2021-02-25T20:18:20Z,2021-02-25T20:18:20Z,MERGED,True,235,6,9,https://github.com/morrone,Create the metric_sets_default_authz configuration option and rpc,2,[],https://github.com/ovis-hpc/ovis/pull/627,https://github.com/morrone,10,https://github.com/ovis-hpc/ovis/pull/627#issuecomment-781585298,"Create a new configuration directive ""metric_sets_default_authz"" and
the associated rpc with ID LDMSD_SET_DEFAULT_AUTHZ_REQ.
This directive/rpc allows the default uid, gid, and perms of
metrics sets to be configured. All subsequently created metric sets
will use these default values unless overridden.","Hi folks. I didn't want to leave people hanging, so here is an updated version of this PR. I did convert this to a Draft, because all of my normal test beds are inaccessible at the moment. So this version of my changes has no testing beyond building.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,627,2021-02-12T05:55:15Z,2021-02-25T20:18:20Z,2021-02-25T20:18:20Z,MERGED,True,235,6,9,https://github.com/morrone,Create the metric_sets_default_authz configuration option and rpc,2,[],https://github.com/ovis-hpc/ovis/pull/627,https://github.com/morrone,11,https://github.com/ovis-hpc/ovis/pull/627#issuecomment-781651265,"Create a new configuration directive ""metric_sets_default_authz"" and
the associated rpc with ID LDMSD_SET_DEFAULT_AUTHZ_REQ.
This directive/rpc allows the default uid, gid, and perms of
metrics sets to be configured. All subsequently created metric sets
will use these default values unless overridden.","OK, I fixed a dumb bug and ran through some testing. It is ready for next round of reviews.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,627,2021-02-12T05:55:15Z,2021-02-25T20:18:20Z,2021-02-25T20:18:20Z,MERGED,True,235,6,9,https://github.com/morrone,Create the metric_sets_default_authz configuration option and rpc,2,[],https://github.com/ovis-hpc/ovis/pull/627,https://github.com/morrone,12,https://github.com/ovis-hpc/ovis/pull/627#issuecomment-782366582,"Create a new configuration directive ""metric_sets_default_authz"" and
the associated rpc with ID LDMSD_SET_DEFAULT_AUTHZ_REQ.
This directive/rpc allows the default uid, gid, and perms of
metrics sets to be configured. All subsequently created metric sets
will use these default values unless overridden.",I updated the PR to remove the controversial comment about ldms_set_new_with_auth().,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,628,2021-02-12T17:59:42Z,2021-02-12T18:21:57Z,2021-06-10T21:38:13Z,MERGED,True,3,1,1,https://github.com/tom95858,Set errno if auth domain cannot be found,1,[],https://github.com/ovis-hpc/ovis/pull/628,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/628,"When creating a new producer, ldmsd_auth_find is called to associate
an authentication domain with the connection to the peer. If the domain
does not exist, the create fails, but errno is not set. This change now
sets errno to ENOENT in that case.","When creating a new producer, ldmsd_auth_find is called to associate
an authentication domain with the connection to the peer. If the domain
does not exist, the create fails, but errno is not set. This change now
sets errno to ENOENT in that case.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,629,2021-02-12T18:00:14Z,2021-02-12T18:21:40Z,2021-02-16T16:23:58Z,MERGED,True,10,9,1,https://github.com/tom95858,Set the effective uid/gid to the peer's uid/gid,1,[],https://github.com/ovis-hpc/ovis/pull/629,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/629,"This security enhancement ensures that a connected peer cannot cause the
ldmsd to undertake any action with elevated privilege.","This security enhancement ensures that a connected peer cannot cause the
ldmsd to undertake any action with elevated privilege.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,629,2021-02-12T18:00:14Z,2021-02-12T18:21:40Z,2021-02-16T16:23:58Z,MERGED,True,10,9,1,https://github.com/tom95858,Set the effective uid/gid to the peer's uid/gid,1,[],https://github.com/ovis-hpc/ovis/pull/629,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/629#issuecomment-778359678,"This security enhancement ensures that a connected peer cannot cause the
ldmsd to undertake any action with elevated privilege.",Does this change not update the uid for all threads in the daemon? Doesn't that stop any sampler which requires euid 0 to access its /proc entries to fail from the moment of the id change?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,629,2021-02-12T18:00:14Z,2021-02-12T18:21:40Z,2021-02-16T16:23:58Z,MERGED,True,10,9,1,https://github.com/tom95858,Set the effective uid/gid to the peer's uid/gid,1,[],https://github.com/ovis-hpc/ovis/pull/629,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/629#issuecomment-778369443,"This security enhancement ensures that a connected peer cannot cause the
ldmsd to undertake any action with elevated privilege.","The short answer is that /proc does not require root access although it is possible to mount /proc with options that restrict access to /proc/pid. I did, however, mislabel this commit, only the uid is set, not the gid.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,629,2021-02-12T18:00:14Z,2021-02-12T18:21:40Z,2021-02-16T16:23:58Z,MERGED,True,10,9,1,https://github.com/tom95858,Set the effective uid/gid to the peer's uid/gid,1,[],https://github.com/ovis-hpc/ovis/pull/629,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/629#issuecomment-778399324,"This security enhancement ensures that a connected peer cannot cause the
ldmsd to undertake any action with elevated privilege.","Let me revise my question to include ""euid 0 to access its /proc entries or other sampled devices""
I'm thinking in particular of sysclassib/ibnet, opa2, tx2mon, lustre (/sys/kernel/debug/lustre/*)",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,629,2021-02-12T18:00:14Z,2021-02-12T18:21:40Z,2021-02-16T16:23:58Z,MERGED,True,10,9,1,https://github.com/tom95858,Set the effective uid/gid to the peer's uid/gid,1,[],https://github.com/ovis-hpc/ovis/pull/629,https://github.com/baallan,5,https://github.com/ovis-hpc/ovis/pull/629#issuecomment-779352038,"This security enhancement ensures that a connected peer cannot cause the
ldmsd to undertake any action with elevated privilege.","@tom95858 this generates (would fail with -Wall -Werror) on rhel7 (below):
You might want to check the return code and log something at INFO level, since it's sort of an expected case to run unprivileged.
../../../../ldms/src/core/ldms_xprt.c: In function 'recv_cb':
../../../../ldms/src/core/ldms_xprt.c:1980:10: warning: ignoring return value of 'seteuid', declared with attribute warn_unused_result [-Wunused-result]
seteuid(x->ruid);
^
../../../../ldms/src/core/ldms_xprt.c:1987:10: warning: ignoring return value of 'seteuid', declared with attribute warn_unused_result [-Wunused-result]
seteuid(euid);",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,629,2021-02-12T18:00:14Z,2021-02-12T18:21:40Z,2021-02-16T16:23:58Z,MERGED,True,10,9,1,https://github.com/tom95858,Set the effective uid/gid to the peer's uid/gid,1,[],https://github.com/ovis-hpc/ovis/pull/629,https://github.com/baallan,6,https://github.com/ovis-hpc/ovis/pull/629#issuecomment-779949421,"This security enhancement ensures that a connected peer cannot cause the
ldmsd to undertake any action with elevated privilege.","@tom95858 two potential problems with this patch.

assuming a typical attack on a complex code (arbitrary stack corruption achieved somewhere during the callback which is wrapped in the seteuid/revert-euid), this patch doesn't prevent the attack's subsequent privileged action after the euid-managing stack frame returns.
the approach is racy: all the threads in the daemon get their privileges changed, while some of them are sampling or storing using privilege to open devices.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,630,2021-02-12T18:21:14Z,2021-02-18T17:31:01Z,2021-02-18T17:31:04Z,MERGED,True,219,93,7,https://github.com/tom95858,Stream performance improvements,4,[],https://github.com/ovis-hpc/ovis/pull/630,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/630,"These changes significantly reduce the overhead of publishing
JSON data if that data is being forwarded and not otherwise consumed
at the subscriber.
The publisher is also acknowledged before delivering the data to the
subscribers. This reduces the latency at the producer waiting
for the ACK.","These changes significantly reduce the overhead of publishing
JSON data if that data is being forwarded and not otherwise consumed
at the subscriber.
The publisher is also acknowledged before delivering the data to the
subscribers. This reduces the latency at the producer waiting
for the ACK.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,630,2021-02-12T18:21:14Z,2021-02-18T17:31:01Z,2021-02-18T17:31:04Z,MERGED,True,219,93,7,https://github.com/tom95858,Stream performance improvements,4,[],https://github.com/ovis-hpc/ovis/pull/630,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/630#issuecomment-779572317,"These changes significantly reduce the overhead of publishing
JSON data if that data is being forwarded and not otherwise consumed
at the subscriber.
The publisher is also acknowledged before delivering the data to the
subscribers. This reduces the latency at the producer waiting
for the ACK.",@tom95858 Could you please rebase this on top of the latest OVIS-4? There are many changes I believe are unrelated to the patch.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,630,2021-02-12T18:21:14Z,2021-02-18T17:31:01Z,2021-02-18T17:31:04Z,MERGED,True,219,93,7,https://github.com/tom95858,Stream performance improvements,4,[],https://github.com/ovis-hpc/ovis/pull/630,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/630#issuecomment-780005144,"These changes significantly reduce the overhead of publishing
JSON data if that data is being forwarded and not otherwise consumed
at the subscriber.
The publisher is also acknowledged before delivering the data to the
subscribers. This reduces the latency at the producer waiting
for the ACK.","Sure, testing now...",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,633,2021-02-16T23:03:29Z,2021-02-18T17:32:17Z,2022-01-18T04:09:05Z,MERGED,True,1,3,1,https://github.com/nichamon,Fix a bug in zap_ugni that prevents active close transports,1,[],https://github.com/ovis-hpc/ovis/pull/633,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/633,"zap_ugni moves the endpoint state to CLOSE before going to the switch
cases that determine whether to shut down the socket or not. The bug
causes zap_ugni not to shut down the socket in any case. This results in
applications cannot actively close Zap ugni transports.","zap_ugni moves the endpoint state to CLOSE before going to the switch
cases that determine whether to shut down the socket or not. The bug
causes zap_ugni not to shut down the socket in any case. This results in
applications cannot actively close Zap ugni transports.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,633,2021-02-16T23:03:29Z,2021-02-18T17:32:17Z,2022-01-18T04:09:05Z,MERGED,True,1,3,1,https://github.com/nichamon,Fix a bug in zap_ugni that prevents active close transports,1,[],https://github.com/ovis-hpc/ovis/pull/633,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/633#issuecomment-780176999,"zap_ugni moves the endpoint state to CLOSE before going to the switch
cases that determine whether to shut down the socket or not. The bug
causes zap_ugni not to shut down the socket in any case. This results in
applications cannot actively close Zap ugni transports.","@tom95858 With the bug, z_ugni_close won't shut down the socket, so zap_ugni won't deliver the disconnect event to applications. In the LDMSD layer, prdcr_stop will cause producers to be stuck in the STOPPING state.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,633,2021-02-16T23:03:29Z,2021-02-18T17:32:17Z,2022-01-18T04:09:05Z,MERGED,True,1,3,1,https://github.com/nichamon,Fix a bug in zap_ugni that prevents active close transports,1,[],https://github.com/ovis-hpc/ovis/pull/633,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/633#issuecomment-780863755,"zap_ugni moves the endpoint state to CLOSE before going to the switch
cases that determine whether to shut down the socket or not. The bug
causes zap_ugni not to shut down the socket in any case. This results in
applications cannot actively close Zap ugni transports.","I missed the race. However, the bug that causes zap_ugni to not shutdown the socket at all is still there. I'll push an update to address the race and the not shutting down problem shortly.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,633,2021-02-16T23:03:29Z,2021-02-18T17:32:17Z,2022-01-18T04:09:05Z,MERGED,True,1,3,1,https://github.com/nichamon,Fix a bug in zap_ugni that prevents active close transports,1,[],https://github.com/ovis-hpc/ovis/pull/633,https://github.com/nichamon,4,https://github.com/ovis-hpc/ovis/pull/633#issuecomment-780868796,"zap_ugni moves the endpoint state to CLOSE before going to the switch
cases that determine whether to shut down the socket or not. The bug
causes zap_ugni not to shut down the socket in any case. This results in
applications cannot actively close Zap ugni transports.","At another look, we don't have the race betweenz_ugni_close and ugni_sock_event. Both paths held the endpoint lock. In my patch, z_ugni_close moves the endpoint state to CLOSE while it holds the endpoint lock. ugni_sock_event takes the lock before checking the endpoint state. There is no way that ugni_sock_event will find the state in the other states besides CLOSE if z_ugni_close is called before ugni_sock_event awake. If there is a race regarding the endpoint state in another path, it must be that that path does not take the endpoint lock before checking the endpoint state, right?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,634,2021-02-17T22:08:01Z,2021-02-18T17:30:13Z,2021-02-18T17:30:13Z,MERGED,True,6,6,1,https://github.com/morrone,Attempt to correct and improve the ldms comments about the set tree lock,1,[],https://github.com/ovis-hpc/ovis/pull/634,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/634,"__record_set() grabs the __set_tree_lock using __ldms_set_tree_lock(),
so the code commend is corrected to say that the caller must NOT
be holding the ldms set tree lock when it is called.
__ldms_create_set() uses __record_set(), so likewise the caller must
not be holding the lock.
The lock messages are also updated to say ""ldms set tree lock""
rather than just ""set tree lock"". This is a small attempt to disambiguate
the ldms __set_tree_lock from the ldmsd set_tree_lock. Granted,
it would be a layering violation for ldms to depend on a lock in ldmsd,
but every little bit of disambiguation helps.","__record_set() grabs the __set_tree_lock using __ldms_set_tree_lock(),
so the code commend is corrected to say that the caller must NOT
be holding the ldms set tree lock when it is called.
__ldms_create_set() uses __record_set(), so likewise the caller must
not be holding the lock.
The lock messages are also updated to say ""ldms set tree lock""
rather than just ""set tree lock"". This is a small attempt to disambiguate
the ldms __set_tree_lock from the ldmsd set_tree_lock. Granted,
it would be a layering violation for ldms to depend on a lock in ldmsd,
but every little bit of disambiguation helps.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,635,2021-02-17T22:39:52Z,2021-02-24T19:43:51Z,2021-02-24T19:43:51Z,MERGED,True,98,0,7,https://github.com/Snell1224,Include auto_interval test scripts,1,[],https://github.com/ovis-hpc/ovis/pull/635,https://github.com/Snell1224,1,https://github.com/ovis-hpc/ovis/pull/635,"Include test scripts for the ""auto_interval"" option when updating the aggregator daemons.
There are 3 sampler daemons with interval hints of 1sec (fast), 5secs (medium), and 10 secs (slow) and two aggregator daemons that aggregate the data at 1 sec and 10 secs, respectively.
Test scripts have been checked will Valgrind.","Include test scripts for the ""auto_interval"" option when updating the aggregator daemons.
There are 3 sampler daemons with interval hints of 1sec (fast), 5secs (medium), and 10 secs (slow) and two aggregator daemons that aggregate the data at 1 sec and 10 secs, respectively.
Test scripts have been checked will Valgrind.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,635,2021-02-17T22:39:52Z,2021-02-24T19:43:51Z,2021-02-24T19:43:51Z,MERGED,True,98,0,7,https://github.com/Snell1224,Include auto_interval test scripts,1,[],https://github.com/ovis-hpc/ovis/pull/635,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/635#issuecomment-781706447,"Include test scripts for the ""auto_interval"" option when updating the aggregator daemons.
There are 3 sampler daemons with interval hints of 1sec (fast), 5secs (medium), and 10 secs (slow) and two aggregator daemons that aggregate the data at 1 sec and 10 secs, respectively.
Test scripts have been checked will Valgrind.","patch.txt
After running the new test, attached are suggested changes with the aims of:

extending test length to make sure the csv files output slow/medium data.
including test case in the list output by ldms-static-test.sh -l.
making the initial updater intervals 2,15 so that if they unexpectedly stick, it is obvious in the csv timestamp deltas.

Does the script that runs most cases as part of make check pick up this new one automatically, or need a modification?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,635,2021-02-17T22:39:52Z,2021-02-24T19:43:51Z,2021-02-24T19:43:51Z,MERGED,True,98,0,7,https://github.com/Snell1224,Include auto_interval test scripts,1,[],https://github.com/ovis-hpc/ovis/pull/635,https://github.com/Snell1224,3,https://github.com/ovis-hpc/ovis/pull/635#issuecomment-781717811,"Include test scripts for the ""auto_interval"" option when updating the aggregator daemons.
There are 3 sampler daemons with interval hints of 1sec (fast), 5secs (medium), and 10 secs (slow) and two aggregator daemons that aggregate the data at 1 sec and 10 secs, respectively.
Test scripts have been checked will Valgrind.","Okay I can make these changes.
And if you are talking about ldms-run-static-tests.sh then no, I'll need to add auto_interval to the test case list in order to be tested during make check....Come to think of it, I'll also need to add the tx2mon sampler as well so thanks for the reminder!.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,635,2021-02-17T22:39:52Z,2021-02-24T19:43:51Z,2021-02-24T19:43:51Z,MERGED,True,98,0,7,https://github.com/Snell1224,Include auto_interval test scripts,1,[],https://github.com/ovis-hpc/ovis/pull/635,https://github.com/tom95858,4,https://github.com/ovis-hpc/ovis/pull/635#issuecomment-782718459,"Include test scripts for the ""auto_interval"" option when updating the aggregator daemons.
There are 3 sampler daemons with interval hints of 1sec (fast), 5secs (medium), and 10 secs (slow) and two aggregator daemons that aggregate the data at 1 sec and 10 secs, respectively.
Test scripts have been checked will Valgrind.",Why aren't we adding these tests to the ldms-test repository instead of here in the examples directory?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,635,2021-02-17T22:39:52Z,2021-02-24T19:43:51Z,2021-02-24T19:43:51Z,MERGED,True,98,0,7,https://github.com/Snell1224,Include auto_interval test scripts,1,[],https://github.com/ovis-hpc/ovis/pull/635,https://github.com/baallan,5,https://github.com/ovis-hpc/ovis/pull/635#issuecomment-783477771,"Include test scripts for the ""auto_interval"" option when updating the aggregator daemons.
There are 3 sampler daemons with interval hints of 1sec (fast), 5secs (medium), and 10 secs (slow) and two aggregator daemons that aggregate the data at 1 sec and 10 secs, respectively.
Test scripts have been checked will Valgrind.","These tests and the rest of the ""make check/example"" scripts are executable as part of a build on any deployment platform. It may be appropriate do something similar in the separate ldms-test repository or another containerized testing environment, but that does not eliminate the need for them as part of 'make check'. You are welcome to clone the logic to another project where appropriate.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,636,2021-02-18T23:05:33Z,2021-02-25T20:33:40Z,2021-02-25T20:33:41Z,MERGED,True,32,8,1,https://github.com/baallan,preserve command line format in ldmsd at runtime.,1,[],https://github.com/ovis-hpc/ovis/pull/636,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/636,"This applies strdup to keep -x and -A options from being edited in place, making ps output more useful.
It also makes the -A error messages more useful by echoing the offending arg string.","This applies strdup to keep -x and -A options from being edited in place, making ps output more useful.
It also makes the -A error messages more useful by echoing the offending arg string.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,636,2021-02-18T23:05:33Z,2021-02-25T20:33:40Z,2021-02-25T20:33:41Z,MERGED,True,32,8,1,https://github.com/baallan,preserve command line format in ldmsd at runtime.,1,[],https://github.com/ovis-hpc/ovis/pull/636,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/636#issuecomment-783554446,"This applies strdup to keep -x and -A options from being edited in place, making ps output more useful.
It also makes the -A error messages more useful by echoing the offending arg string.",@tom95858 @narategithub this has been revised for most of Tom's comments and the whitespace bug.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,638,2021-02-23T01:12:52Z,2021-02-24T19:44:11Z,2021-02-24T19:44:11Z,MERGED,True,4,0,2,https://github.com/Snell1224,Added test cases to static runs list,1,[],https://github.com/ovis-hpc/ovis/pull/638,https://github.com/Snell1224,1,https://github.com/ovis-hpc/ovis/pull/638,"Added the ""tx2mon"" and ""auto_interval"" test cases to ldms-static-test-list.sh so they are tested during ""make check"" and ""make installcheck"".
Since tx2mon is not default ""enabled"" and the auto-interval test case is under revision in pull request #635 , I've added them in the ldms-static-test-list-bypass file so automake does not fail (and then stop) during the make check process.","Added the ""tx2mon"" and ""auto_interval"" test cases to ldms-static-test-list.sh so they are tested during ""make check"" and ""make installcheck"".
Since tx2mon is not default ""enabled"" and the auto-interval test case is under revision in pull request #635 , I've added them in the ldms-static-test-list-bypass file so automake does not fail (and then stop) during the make check process.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,639,2021-02-23T05:56:46Z,2021-08-31T04:51:23Z,2022-01-18T04:10:55Z,CLOSED,False,2490,980,31,https://github.com/nichamon,"zap_send_mapped, Zap shared map and Zap SEND complete events",9,[],https://github.com/ovis-hpc/ovis/pull/639,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/639,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,639,2021-02-23T05:56:46Z,2021-08-31T04:51:23Z,2022-01-18T04:10:55Z,CLOSED,False,2490,980,31,https://github.com/nichamon,"zap_send_mapped, Zap shared map and Zap SEND complete events",9,[],https://github.com/ovis-hpc/ovis/pull/639,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/639#issuecomment-908896872,,Part of #783,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,640,2021-02-24T17:52:17Z,2021-02-24T18:15:02Z,2022-01-18T04:09:04Z,MERGED,True,19,11,2,https://github.com/nichamon,Fix bugs in ldmsd_request that cause unrecognized message errors,3,[],https://github.com/ovis-hpc/ovis/pull/640,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/640,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,641,2021-02-24T21:13:32Z,2021-02-24T21:27:45Z,2021-02-24T21:27:45Z,MERGED,True,19,1,1,https://github.com/baallan,V436 genders example update (makefile.am),1,[],https://github.com/ovis-hpc/ovis/pull/641,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/641,fix unaddressed review issue from #600.,fix unaddressed review issue from #600.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,641,2021-02-24T21:13:32Z,2021-02-24T21:27:45Z,2021-02-24T21:27:45Z,MERGED,True,19,1,1,https://github.com/baallan,V436 genders example update (makefile.am),1,[],https://github.com/ovis-hpc/ovis/pull/641,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/641#issuecomment-785392397,fix unaddressed review issue from #600.,@tom95858 I added the file list update @morrone pointed out as missing.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,644,2021-02-26T23:05:42Z,2021-03-01T17:38:47Z,2022-01-18T04:09:03Z,MERGED,True,75,1,2,https://github.com/nichamon,Fix ldmsd_stream_publish not send all data,2,[],https://github.com/ovis-hpc/ovis/pull/644,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/644,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,644,2021-02-26T23:05:42Z,2021-03-01T17:38:47Z,2022-01-18T04:09:03Z,MERGED,True,75,1,2,https://github.com/nichamon,Fix ldmsd_stream_publish not send all data,2,[],https://github.com/ovis-hpc/ovis/pull/644,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/644#issuecomment-786943299,,"@tom95858  I haven't had a chance to test this yet. I'll continue tonight and over the weekend.
Without the patch, I cannot reproduce the issue that the ldmsd_stream_publish program doesn't send all the data when it is >64k. In the test, the ldmsd_stream_publish program sent a stream of 85M to ldmsd_stream_subscribe. I tested this on Voltrino with zap_sock, so I'll see how I could make sure that the patch really addresses the issue.
Also, I need to do some magic before I can use uGNI on Voltrino.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,644,2021-02-26T23:05:42Z,2021-03-01T17:38:47Z,2022-01-18T04:09:03Z,MERGED,True,75,1,2,https://github.com/nichamon,Fix ldmsd_stream_publish not send all data,2,[],https://github.com/ovis-hpc/ovis/pull/644,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/644#issuecomment-787014214,,"@tom95858 I can reproduce the problem that ldmsd_stream_publish may not send all the data.
@narategithub  and I tested the patch and it fixes the problem.
We tested the following scenarios.

ldmsd_stream_publish program publishes a JSON stream to the ldmsd_stream_subscribe program.
ldmsd_stream_publish program publishes a string stream to the ldmsd_stream_subscribe program.
ldmsd_stream_publish program published a JSON stream to LDMSD using the test_stream_sampler plugin in the TADA repo.
ldmsd_stream_publish program published a string stream to LDMSD using the test_stream_sampler plugin in the TADA repo.

For each scenario, the data sizes and the number of repetitions are as follows.

5kB repeated 1000
7M repeated 100

Narate implemented test scripts that compare the output with the input data. ldmsd_stream_subscribe program and the LDMSD sampler plugin received all data in all test runs.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,645,2021-02-26T23:49:11Z,2021-03-03T00:24:26Z,2021-03-03T00:24:26Z,MERGED,True,36,950,9,https://github.com/baallan,remove csv store file event notification support,2,[],https://github.com/ovis-hpc/ovis/pull/645,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/645,"This removes the csv file event notification functionality (and attendant ovis_util/notification.*). This functionality is redundant with the newer ""rename-on-close"" functionality of store_csv. Anything done with notification is done more reliably (and with less ldmsd complexity) using the rename with a template argument that moves the closed files into another directory (spool). Any independent utility can watch the spool directory for new files and know that they are complete when they appear as the result of an mv. This change eliminates race conditions inherent in combining file renames with file event notifications.
This change is back incompatible with v3 storage configurations which used the notify functionality. No known v4 installations use the these file event notification hooks. The hooks were originally added because rollover did not support rename/mv and NFS3 does not support inotify.","This removes the csv file event notification functionality (and attendant ovis_util/notification.*). This functionality is redundant with the newer ""rename-on-close"" functionality of store_csv. Anything done with notification is done more reliably (and with less ldmsd complexity) using the rename with a template argument that moves the closed files into another directory (spool). Any independent utility can watch the spool directory for new files and know that they are complete when they appear as the result of an mv. This change eliminates race conditions inherent in combining file renames with file event notifications.
This change is back incompatible with v3 storage configurations which used the notify functionality. No known v4 installations use the these file event notification hooks. The hooks were originally added because rollover did not support rename/mv and NFS3 does not support inotify.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,645,2021-02-26T23:49:11Z,2021-03-03T00:24:26Z,2021-03-03T00:24:26Z,MERGED,True,36,950,9,https://github.com/baallan,remove csv store file event notification support,2,[],https://github.com/ovis-hpc/ovis/pull/645,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/645#issuecomment-788105634,"This removes the csv file event notification functionality (and attendant ovis_util/notification.*). This functionality is redundant with the newer ""rename-on-close"" functionality of store_csv. Anything done with notification is done more reliably (and with less ldmsd complexity) using the rename with a template argument that moves the closed files into another directory (spool). Any independent utility can watch the spool directory for new files and know that they are complete when they appear as the result of an mv. This change eliminates race conditions inherent in combining file renames with file event notifications.
This change is back incompatible with v3 storage configurations which used the notify functionality. No known v4 installations use the these file event notification hooks. The hooks were originally added because rollover did not support rename/mv and NFS3 does not support inotify.","@baallan, please fix the pull request checks. @oceandlr, is this change ok with you?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,645,2021-02-26T23:49:11Z,2021-03-03T00:24:26Z,2021-03-03T00:24:26Z,MERGED,True,36,950,9,https://github.com/baallan,remove csv store file event notification support,2,[],https://github.com/ovis-hpc/ovis/pull/645,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/645#issuecomment-788110961,"This removes the csv file event notification functionality (and attendant ovis_util/notification.*). This functionality is redundant with the newer ""rename-on-close"" functionality of store_csv. Anything done with notification is done more reliably (and with less ldmsd complexity) using the rename with a template argument that moves the closed files into another directory (spool). Any independent utility can watch the spool directory for new files and know that they are complete when they appear as the result of an mv. This change eliminates race conditions inherent in combining file renames with file event notifications.
This change is back incompatible with v3 storage configurations which used the notify functionality. No known v4 installations use the these file event notification hooks. The hooks were originally added because rollover did not support rename/mv and NFS3 does not support inotify.",@tom95858 looks like all are passing. whitespace fixed.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,645,2021-02-26T23:49:11Z,2021-03-03T00:24:26Z,2021-03-03T00:24:26Z,MERGED,True,36,950,9,https://github.com/baallan,remove csv store file event notification support,2,[],https://github.com/ovis-hpc/ovis/pull/645,https://github.com/oceandlr,4,https://github.com/ovis-hpc/ovis/pull/645#issuecomment-788118875,"This removes the csv file event notification functionality (and attendant ovis_util/notification.*). This functionality is redundant with the newer ""rename-on-close"" functionality of store_csv. Anything done with notification is done more reliably (and with less ldmsd complexity) using the rename with a template argument that moves the closed files into another directory (spool). Any independent utility can watch the spool directory for new files and know that they are complete when they appear as the result of an mv. This change eliminates race conditions inherent in combining file renames with file event notifications.
This change is back incompatible with v3 storage configurations which used the notify functionality. No known v4 installations use the these file event notification hooks. The hooks were originally added because rollover did not support rename/mv and NFS3 does not support inotify.",I haven't looked since I was not an assignee. I can do so tonight....,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,645,2021-02-26T23:49:11Z,2021-03-03T00:24:26Z,2021-03-03T00:24:26Z,MERGED,True,36,950,9,https://github.com/baallan,remove csv store file event notification support,2,[],https://github.com/ovis-hpc/ovis/pull/645,https://github.com/oceandlr,5,https://github.com/ovis-hpc/ovis/pull/645#issuecomment-788967223,"This removes the csv file event notification functionality (and attendant ovis_util/notification.*). This functionality is redundant with the newer ""rename-on-close"" functionality of store_csv. Anything done with notification is done more reliably (and with less ldmsd complexity) using the rename with a template argument that moves the closed files into another directory (spool). Any independent utility can watch the spool directory for new files and know that they are complete when they appear as the result of an mv. This change eliminates race conditions inherent in combining file renames with file event notifications.
This change is back incompatible with v3 storage configurations which used the notify functionality. No known v4 installations use the these file event notification hooks. The hooks were originally added because rollover did not support rename/mv and NFS3 does not support inotify.","I did not get to this yesterday. @baallan proposed removing this functionality. That seemed reasonable and it appears to be encapsulated, so the removal is probably clean. If anyone can verify that the store still works as usual, then, that would be an ok check. We never used this functionality in the Cray system installs which were the ones I was familiar with.
It is possible that I can get to this tomorrow, but you shouldn't have to wait on me.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,645,2021-02-26T23:49:11Z,2021-03-03T00:24:26Z,2021-03-03T00:24:26Z,MERGED,True,36,950,9,https://github.com/baallan,remove csv store file event notification support,2,[],https://github.com/ovis-hpc/ovis/pull/645,https://github.com/baallan,6,https://github.com/ovis-hpc/ovis/pull/645#issuecomment-789047805,"This removes the csv file event notification functionality (and attendant ovis_util/notification.*). This functionality is redundant with the newer ""rename-on-close"" functionality of store_csv. Anything done with notification is done more reliably (and with less ldmsd complexity) using the rename with a template argument that moves the closed files into another directory (spool). Any independent utility can watch the spool directory for new files and know that they are complete when they appear as the result of an mv. This change eliminates race conditions inherent in combining file renames with file event notifications.
This change is back incompatible with v3 storage configurations which used the notify functionality. No known v4 installations use the these file event notification hooks. The hooks were originally added because rollover did not support rename/mv and NFS3 does not support inotify.","I ran the store with all the configurations in the ldms-static-test suite, including the non-noitification store-specific tests and some valgrind runs.
The only distant concerns would be if someone somewhere using v3 has quietly deployed the notification feature in their data management pipeline. If they have, we have workarounds available when they upgrade to v4.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,645,2021-02-26T23:49:11Z,2021-03-03T00:24:26Z,2021-03-03T00:24:26Z,MERGED,True,36,950,9,https://github.com/baallan,remove csv store file event notification support,2,[],https://github.com/ovis-hpc/ovis/pull/645,https://github.com/oceandlr,7,https://github.com/ovis-hpc/ovis/pull/645#issuecomment-789050902,"This removes the csv file event notification functionality (and attendant ovis_util/notification.*). This functionality is redundant with the newer ""rename-on-close"" functionality of store_csv. Anything done with notification is done more reliably (and with less ldmsd complexity) using the rename with a template argument that moves the closed files into another directory (spool). Any independent utility can watch the spool directory for new files and know that they are complete when they appear as the result of an mv. This change eliminates race conditions inherent in combining file renames with file event notifications.
This change is back incompatible with v3 storage configurations which used the notify functionality. No known v4 installations use the these file event notification hooks. The hooks were originally added because rollover did not support rename/mv and NFS3 does not support inotify.","I agree the distant concern should not be a blocker. If @tom95858 is ok with me not testing this, then I am fine with it. Otherwise I will do my best to try tomorrow.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,647,2021-03-01T15:52:56Z,2021-03-01T17:36:46Z,2021-05-27T18:21:46Z,MERGED,True,463,0,6,https://github.com/miketxli,Add rdc plugin to collect AMD GPU metrics,1,[],https://github.com/ovis-hpc/ovis/pull/647,https://github.com/miketxli,1,https://github.com/ovis-hpc/ovis/pull/647,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,647,2021-03-01T15:52:56Z,2021-03-01T17:36:46Z,2021-05-27T18:21:46Z,MERGED,True,463,0,6,https://github.com/miketxli,Add rdc plugin to collect AMD GPU metrics,1,[],https://github.com/ovis-hpc/ovis/pull/647,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/647#issuecomment-812366402,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"@miketxli  I've backported the amd gpu sampler to https://github.com/baallan/ovis.git branch backport_rdc derived from the OVIS-4 branch.
If you or a colleague have time and an environment to test in, please try to build (and ideally run) it and let me know what problems you find. ovis/ldms/src/sampler/rdc_sampler/Makefile.am will need some minor tweaking to find the right headers/libs.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,647,2021-03-01T15:52:56Z,2021-03-01T17:36:46Z,2021-05-27T18:21:46Z,MERGED,True,463,0,6,https://github.com/miketxli,Add rdc plugin to collect AMD GPU metrics,1,[],https://github.com/ovis-hpc/ovis/pull/647,https://github.com/miketxli,3,https://github.com/ovis-hpc/ovis/pull/647#issuecomment-812711058,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"@baallan Great, let me build and test it. I'll let you know the result.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,647,2021-03-01T15:52:56Z,2021-03-01T17:36:46Z,2021-05-27T18:21:46Z,MERGED,True,463,0,6,https://github.com/miketxli,Add rdc plugin to collect AMD GPU metrics,1,[],https://github.com/ovis-hpc/ovis/pull/647,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/647#issuecomment-848999089,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"@miketxli Thanks for testing and letting me know the revised rdc_sampler worked with your setup.
I'm trying now to build with rocm-4.1.0 and run with mi50 and v320 based cards; the library says the RDC_FI_ECC_CORRECT_TOTAL, RDC_FI_ECC_UNCORRECT_TOTAL, and XGMI metrics are unsupported. Is this the expected behavior?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,647,2021-03-01T15:52:56Z,2021-03-01T17:36:46Z,2021-05-27T18:21:46Z,MERGED,True,463,0,6,https://github.com/miketxli,Add rdc plugin to collect AMD GPU metrics,1,[],https://github.com/ovis-hpc/ovis/pull/647,https://github.com/miketxli,5,https://github.com/ovis-hpc/ovis/pull/647#issuecomment-849010845,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"@miketxli Thanks for testing and letting me know the revised rdc_sampler worked with your setup.
I'm trying now to build with rocm-4.1.0 and run with mi50 and v320 based cards; the library says the RDC_FI_ECC_CORRECT_TOTAL, RDC_FI_ECC_UNCORRECT_TOTAL, and XGMI metrics are unsupported. Is this the expected behavior?

Did you connect mi50s using an XGMI connector?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,647,2021-03-01T15:52:56Z,2021-03-01T17:36:46Z,2021-05-27T18:21:46Z,MERGED,True,463,0,6,https://github.com/miketxli,Add rdc plugin to collect AMD GPU metrics,1,[],https://github.com/ovis-hpc/ovis/pull/647,https://github.com/baallan,6,https://github.com/ovis-hpc/ovis/pull/647#issuecomment-849016495,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"Is there a convenient way to tell if they are xgmi connected, perhaps in the output of rocm-smi -a?
I suspect they are not connected. The more concerning thing would be the ECC metrics; are they no longer using ecc memory?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,647,2021-03-01T15:52:56Z,2021-03-01T17:36:46Z,2021-05-27T18:21:46Z,MERGED,True,463,0,6,https://github.com/miketxli,Add rdc plugin to collect AMD GPU metrics,1,[],https://github.com/ovis-hpc/ovis/pull/647,https://github.com/miketxli,7,https://github.com/ovis-hpc/ovis/pull/647#issuecomment-849115671,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"Is there a convenient way to tell if they are xgmi connected, perhaps in the output of rocm-smi -a?
I suspect they are not connected. The more concerning thing would be the ECC metrics; are they no longer using ecc memory?


Yes, rocm-smi --showtopo
They use different way to get those metrics. There is patch for this.  See https://github.com/RadeonOpenCompute/rdc/tree/master/ras_prebuild. You need to copy all those files in the same folder as the librdc.so. I haven't try it myself. But this will be fixed in next release.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,647,2021-03-01T15:52:56Z,2021-03-01T17:36:46Z,2021-05-27T18:21:46Z,MERGED,True,463,0,6,https://github.com/miketxli,Add rdc plugin to collect AMD GPU metrics,1,[],https://github.com/ovis-hpc/ovis/pull/647,https://github.com/baallan,8,https://github.com/ovis-hpc/ovis/pull/647#issuecomment-849124765,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"Thanks for the clues. So it would show link type other than PCIE (xgmi instead?) if we had the direct connections, yes? And by next release you mean a rocm 4.3 or some other?
It seems in the meantime, I should drop the ECC metrics from the default counter set. Would you agree?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,647,2021-03-01T15:52:56Z,2021-03-01T17:36:46Z,2021-05-27T18:21:46Z,MERGED,True,463,0,6,https://github.com/miketxli,Add rdc plugin to collect AMD GPU metrics,1,[],https://github.com/ovis-hpc/ovis/pull/647,https://github.com/miketxli,9,https://github.com/ovis-hpc/ovis/pull/647#issuecomment-849844068,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"Thanks for the clues. So it would show link type other than PCIE (xgmi instead?) if we had the direct connections, yes? And by next release you mean a rocm 4.3 or some other?
It seems in the meantime, I should drop the ECC metrics from the default counter set. Would you agree?

yes to xgmi.
I think you drop ECC from default set until it is stabilized in later release. I will find out target release for you.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,648,2021-03-02T00:06:43Z,2021-06-28T16:01:47Z,2021-06-28T16:01:47Z,CLOSED,False,318,1,5,https://github.com/baallan,WIP: Add store-oriented hashes of schema content to sampler_base.,2,[],https://github.com/ovis-hpc/ovis/pull/648,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/648,"Store authors often need to know if the schema
of two set instances are equivalent, independent of schema string name.
This removes strongly relying on administrators to invent globally
consistent schema names and provides a fast method (comparing hashes)
of verifying that no conflicts in schema content exist.
As computing a hash of the schema is
an expensive operation, computing it once at set creation minimizes work
globally. This patch defines 8 byte integer hash codes (stored in
set_info key/value pairs as 17 byte strings) for 4 kinds of schema
equivalence check: see sampler_base.h enum ldms_schema_hash_t.
The new sampler_base functions are designed with signatures and argument
handling such that they may be applied to multiple set instances in the same
sampler independently, should the specific sampler need it. This also
allows samplers not derived from sampler_base to apply the hash setting functions.
The update to the ldms_ls man page simply identifies that ldms_ls -v
will show set_info strings, such as the updater hints and these schema hash values.
Creating trees based on the string hash key or the string hash key converted
back to a uint64_t allows rapid determination of which store a set instance
can be safely routed to, for those stores (or storage policies)
requiring matching schema.
With this addition, it becomes trivially easy for a single CSV or SOS store
to be configured which accepts any set instance of any schema and dispatches to the appropriate table/file. (with suitable implementation extensions to the store plugins).
An alternative approach to storing the hashes in set_info is to store them in metadata. This might save transmission bytes at the expense of storage bytes, however.","Store authors often need to know if the schema
of two set instances are equivalent, independent of schema string name.
This removes strongly relying on administrators to invent globally
consistent schema names and provides a fast method (comparing hashes)
of verifying that no conflicts in schema content exist.
As computing a hash of the schema is
an expensive operation, computing it once at set creation minimizes work
globally. This patch defines 8 byte integer hash codes (stored in
set_info key/value pairs as 17 byte strings) for 4 kinds of schema
equivalence check: see sampler_base.h enum ldms_schema_hash_t.
The new sampler_base functions are designed with signatures and argument
handling such that they may be applied to multiple set instances in the same
sampler independently, should the specific sampler need it. This also
allows samplers not derived from sampler_base to apply the hash setting functions.
The update to the ldms_ls man page simply identifies that ldms_ls -v
will show set_info strings, such as the updater hints and these schema hash values.
Creating trees based on the string hash key or the string hash key converted
back to a uint64_t allows rapid determination of which store a set instance
can be safely routed to, for those stores (or storage policies)
requiring matching schema.
With this addition, it becomes trivially easy for a single CSV or SOS store
to be configured which accepts any set instance of any schema and dispatches to the appropriate table/file. (with suitable implementation extensions to the store plugins).
An alternative approach to storing the hashes in set_info is to store them in metadata. This might save transmission bytes at the expense of storage bytes, however.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,648,2021-03-02T00:06:43Z,2021-06-28T16:01:47Z,2021-06-28T16:01:47Z,CLOSED,False,318,1,5,https://github.com/baallan,WIP: Add store-oriented hashes of schema content to sampler_base.,2,[],https://github.com/ovis-hpc/ovis/pull/648,https://github.com/oceandlr,2,https://github.com/ovis-hpc/ovis/pull/648#issuecomment-789056756,"Store authors often need to know if the schema
of two set instances are equivalent, independent of schema string name.
This removes strongly relying on administrators to invent globally
consistent schema names and provides a fast method (comparing hashes)
of verifying that no conflicts in schema content exist.
As computing a hash of the schema is
an expensive operation, computing it once at set creation minimizes work
globally. This patch defines 8 byte integer hash codes (stored in
set_info key/value pairs as 17 byte strings) for 4 kinds of schema
equivalence check: see sampler_base.h enum ldms_schema_hash_t.
The new sampler_base functions are designed with signatures and argument
handling such that they may be applied to multiple set instances in the same
sampler independently, should the specific sampler need it. This also
allows samplers not derived from sampler_base to apply the hash setting functions.
The update to the ldms_ls man page simply identifies that ldms_ls -v
will show set_info strings, such as the updater hints and these schema hash values.
Creating trees based on the string hash key or the string hash key converted
back to a uint64_t allows rapid determination of which store a set instance
can be safely routed to, for those stores (or storage policies)
requiring matching schema.
With this addition, it becomes trivially easy for a single CSV or SOS store
to be configured which accepts any set instance of any schema and dispatches to the appropriate table/file. (with suitable implementation extensions to the store plugins).
An alternative approach to storing the hashes in set_info is to store them in metadata. This might save transmission bytes at the expense of storage bytes, however.","I want to discuss this. I find these giant macro-based developments difficult to figure out and so I end up ignoring them. As a result there is a lot of functionality which is ignored or duplicated.
I think it would be beneficial to have a larger discussion about what is common functionality that can go into things like sampler_base or store_csv_common. Then we can commit to documentation that would facilitate using these features and we can commit to their general adoption.
@baallan @tom95858 @valleydlr",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,648,2021-03-02T00:06:43Z,2021-06-28T16:01:47Z,2021-06-28T16:01:47Z,CLOSED,False,318,1,5,https://github.com/baallan,WIP: Add store-oriented hashes of schema content to sampler_base.,2,[],https://github.com/ovis-hpc/ovis/pull/648,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/648#issuecomment-789067834,"Store authors often need to know if the schema
of two set instances are equivalent, independent of schema string name.
This removes strongly relying on administrators to invent globally
consistent schema names and provides a fast method (comparing hashes)
of verifying that no conflicts in schema content exist.
As computing a hash of the schema is
an expensive operation, computing it once at set creation minimizes work
globally. This patch defines 8 byte integer hash codes (stored in
set_info key/value pairs as 17 byte strings) for 4 kinds of schema
equivalence check: see sampler_base.h enum ldms_schema_hash_t.
The new sampler_base functions are designed with signatures and argument
handling such that they may be applied to multiple set instances in the same
sampler independently, should the specific sampler need it. This also
allows samplers not derived from sampler_base to apply the hash setting functions.
The update to the ldms_ls man page simply identifies that ldms_ls -v
will show set_info strings, such as the updater hints and these schema hash values.
Creating trees based on the string hash key or the string hash key converted
back to a uint64_t allows rapid determination of which store a set instance
can be safely routed to, for those stores (or storage policies)
requiring matching schema.
With this addition, it becomes trivially easy for a single CSV or SOS store
to be configured which accepts any set instance of any schema and dispatches to the appropriate table/file. (with suitable implementation extensions to the store plugins).
An alternative approach to storing the hashes in set_info is to store them in metadata. This might save transmission bytes at the expense of storage bytes, however.","@oceandlr the macro usage in this case is about consistently handling N (=4 currently) hashes and being easily expanded for others while keeping the logic of building the strings visible. It might be more readable if the macros were renamed ADD_ instead of DC*.   If we decide the visibility isn't needed or isn't achieved even with better macro names, I can run the code through the preprocessor and update the patch.
To see the unwound code:
cd $objdir/ldms/src/sampler
CFLAGS=""-save-temps"" make sampler_base.lo
indent sampler_base.i

edit sampler_base.i and search down for dsnp",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,648,2021-03-02T00:06:43Z,2021-06-28T16:01:47Z,2021-06-28T16:01:47Z,CLOSED,False,318,1,5,https://github.com/baallan,WIP: Add store-oriented hashes of schema content to sampler_base.,2,[],https://github.com/ovis-hpc/ovis/pull/648,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/648#issuecomment-789086496,"Store authors often need to know if the schema
of two set instances are equivalent, independent of schema string name.
This removes strongly relying on administrators to invent globally
consistent schema names and provides a fast method (comparing hashes)
of verifying that no conflicts in schema content exist.
As computing a hash of the schema is
an expensive operation, computing it once at set creation minimizes work
globally. This patch defines 8 byte integer hash codes (stored in
set_info key/value pairs as 17 byte strings) for 4 kinds of schema
equivalence check: see sampler_base.h enum ldms_schema_hash_t.
The new sampler_base functions are designed with signatures and argument
handling such that they may be applied to multiple set instances in the same
sampler independently, should the specific sampler need it. This also
allows samplers not derived from sampler_base to apply the hash setting functions.
The update to the ldms_ls man page simply identifies that ldms_ls -v
will show set_info strings, such as the updater hints and these schema hash values.
Creating trees based on the string hash key or the string hash key converted
back to a uint64_t allows rapid determination of which store a set instance
can be safely routed to, for those stores (or storage policies)
requiring matching schema.
With this addition, it becomes trivially easy for a single CSV or SOS store
to be configured which accepts any set instance of any schema and dispatches to the appropriate table/file. (with suitable implementation extensions to the store plugins).
An alternative approach to storing the hashes in set_info is to store them in metadata. This might save transmission bytes at the expense of storage bytes, however.","The addition of these hashes to the set instance could be enabled with a new sampler_base option instead of always on. e.g. add option hash_info=no to disable calling base_set_hashes_set. It would go a long way, however, to enabling end-to-end hands free configuration of schema names and stores if the presence of the hashes were the default.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,648,2021-03-02T00:06:43Z,2021-06-28T16:01:47Z,2021-06-28T16:01:47Z,CLOSED,False,318,1,5,https://github.com/baallan,WIP: Add store-oriented hashes of schema content to sampler_base.,2,[],https://github.com/ovis-hpc/ovis/pull/648,https://github.com/baallan,5,https://github.com/ovis-hpc/ovis/pull/648#issuecomment-789175045,"Store authors often need to know if the schema
of two set instances are equivalent, independent of schema string name.
This removes strongly relying on administrators to invent globally
consistent schema names and provides a fast method (comparing hashes)
of verifying that no conflicts in schema content exist.
As computing a hash of the schema is
an expensive operation, computing it once at set creation minimizes work
globally. This patch defines 8 byte integer hash codes (stored in
set_info key/value pairs as 17 byte strings) for 4 kinds of schema
equivalence check: see sampler_base.h enum ldms_schema_hash_t.
The new sampler_base functions are designed with signatures and argument
handling such that they may be applied to multiple set instances in the same
sampler independently, should the specific sampler need it. This also
allows samplers not derived from sampler_base to apply the hash setting functions.
The update to the ldms_ls man page simply identifies that ldms_ls -v
will show set_info strings, such as the updater hints and these schema hash values.
Creating trees based on the string hash key or the string hash key converted
back to a uint64_t allows rapid determination of which store a set instance
can be safely routed to, for those stores (or storage policies)
requiring matching schema.
With this addition, it becomes trivially easy for a single CSV or SOS store
to be configured which accepts any set instance of any schema and dispatches to the appropriate table/file. (with suitable implementation extensions to the store plugins).
An alternative approach to storing the hashes in set_info is to store them in metadata. This might save transmission bytes at the expense of storage bytes, however.","I've updated the code to use clearer macro names and do so consistently. The main logic become ~50 lines long. The expanded version is appended here and you can see how it would be easy to miss a detail if another hashing variant is added in the absence of the DO_N macro.
int base_set_hashes_set(base_data_t base, ldms_set_t set)
{
	if (!set && base)
		set = base->set;
	if (!set)
		return EINVAL;
	int rc = 0;
	dstring_t nalch64_ds;
	dstr_init2(&nalch64_ds, 4096);
	dstring_t napch64_ds;
	dstr_init2(&napch64_ds, 4096);
	dstring_t alch64_ds;
	dstr_init2(&alch64_ds, 4096);
	dstring_t apch64_ds;
	dstr_init2(&apch64_ds, 4096);
	const char *sn = ldms_set_schema_name_get(set);
	uint32_t sc = ldms_set_card_get(set);

	dstrcat(&nalch64_ds, sn, -1);
	dstrcat(&napch64_ds, sn, -1);
	dstrcat(&nalch64_ds, "","", 1);
	dstrcat(&napch64_ds, "","", 1);

	dstrcat_uint(&nalch64_ds, (uint64_t) sc);
	dstrcat_uint(&napch64_ds, (uint64_t) sc);
	dstrcat_uint(&alch64_ds, (uint64_t) sc);
	dstrcat_uint(&apch64_ds, (uint64_t) sc);
	dstrcat(&nalch64_ds, "","", 1);
	dstrcat(&napch64_ds, "","", 1);
	dstrcat(&alch64_ds, "","", 1);
	dstrcat(&apch64_ds, "","", 1);
	int i;
	for (i = 0; i < sc; i++) {

		const char *mn = ldms_metric_name_get(set, i);
		enum ldms_value_type mt = ldms_metric_type_get(set, i);
		const char *mts = ldms_metric_type_to_str(mt);
		dstrcat(&nalch64_ds, mn, -1);
		dstrcat(&napch64_ds, mn, -1);
		dstrcat(&alch64_ds, mn, -1);
		dstrcat(&apch64_ds, mn, -1);
		dstrcat(&nalch64_ds, ""___"", 3);
		dstrcat(&napch64_ds, ""___"", 3);
		dstrcat(&alch64_ds, ""___"", 3);
		dstrcat(&apch64_ds, ""___"", 3);
		dstrcat(&nalch64_ds, mts, -1);
		dstrcat(&napch64_ds, mts, -1);
		dstrcat(&alch64_ds, mts, -1);
		dstrcat(&apch64_ds, mts, -1);

		if (ldms_type_is_array(mt)) {
			uint32_t ml;
			ml = ldms_metric_array_get_len(set, i);
			dstrcat_int(&nalch64_ds, ml);
			dstrcat_int(&alch64_ds, ml);
		}
		if (NULL == dstrcat(&nalch64_ds, "","", 1)) {
			rc = ENOMEM;
			goto err;
		};
		if (NULL == dstrcat(&napch64_ds, "","", 1)) {
			rc = ENOMEM;
			goto err;
		};
		if (NULL == dstrcat(&alch64_ds, "","", 1)) {
			rc = ENOMEM;
			goto err;
		};
		if (NULL == dstrcat(&apch64_ds, "","", 1)) {
			rc = ENOMEM;
			goto err;
		};
	}
	const char *nalch64_buf = dstrval(&nalch64_ds);
	const char *napch64_buf = dstrval(&napch64_ds);
	const char *alch64_buf = dstrval(&alch64_ds);
	const char *apch64_buf = dstrval(&apch64_ds);
	int nalch64_len = dstrlen(&nalch64_ds);
	int napch64_len = dstrlen(&napch64_ds);
	int alch64_len = dstrlen(&alch64_ds);
	int apch64_len = dstrlen(&apch64_ds);
	uint64_t nalch64_hash_u = CityHash64(nalch64_buf, nalch64_len);
	uint64_t napch64_hash_u = CityHash64(napch64_buf, napch64_len);
	uint64_t alch64_hash_u = CityHash64(alch64_buf, alch64_len);
	uint64_t apch64_hash_u = CityHash64(apch64_buf, apch64_len);
	char nalch64_hash[17];
	char napch64_hash[17];
	char alch64_hash[17];
	char apch64_hash[17];
	sprintf(nalch64_hash, ""%"" ""l"" ""X"", nalch64_hash_u);
	sprintf(napch64_hash, ""%"" ""l"" ""X"", napch64_hash_u);
	sprintf(alch64_hash, ""%"" ""l"" ""X"", alch64_hash_u);
	sprintf(apch64_hash, ""%"" ""l"" ""X"", apch64_hash_u);
	ldms_set_info_set(set, ""SH_NAME_ARRAY_LEN_CH64"", nalch64_hash);
	ldms_set_info_set(set, ""SH_NAME_ARRAY_POLY_CH64"", napch64_hash);
	ldms_set_info_set(set, ""SH_ARRAY_LEN_CH64"", alch64_hash);
	ldms_set_info_set(set, ""SH_ARRAY_POLY_CH64"", apch64_hash);
	if (base && base->log) {
		base->log(LDMSD_LDEBUG, ""sampler_base: %s %s %s\n"", sn,
			  ""SH_NAME_ARRAY_LEN_CH64"", nalch64_hash);
		base->log(LDMSD_LDEBUG, ""sampler_base: %s %s %s\n"", sn,
			  ""SH_NAME_ARRAY_POLY_CH64"", napch64_hash);
		base->log(LDMSD_LDEBUG, ""sampler_base: %s %s %s\n"", sn,
			  ""SH_ARRAY_LEN_CH64"", alch64_hash);
		base->log(LDMSD_LDEBUG, ""sampler_base: %s %s %s\n"", sn,
			  ""SH_ARRAY_POLY_CH64"", apch64_hash);

		base->log(LDMSD_LDEBUG,
			  ""sampler_base: %s %s set description %s\n"", sn,
			  ""SH_NAME_ARRAY_LEN_CH64"", nalch64_buf);;
		base->log(LDMSD_LDEBUG,
			  ""sampler_base: %s %s set description %s\n"", sn,
			  ""SH_NAME_ARRAY_POLY_CH64"", napch64_buf);;
		base->log(LDMSD_LDEBUG,
			  ""sampler_base: %s %s set description %s\n"", sn,
			  ""SH_ARRAY_LEN_CH64"", alch64_buf);;
		base->log(LDMSD_LDEBUG,
			  ""sampler_base: %s %s set description %s\n"", sn,
			  ""SH_ARRAY_POLY_CH64"", apch64_buf);;

	}

 err:
	dstr_free(&nalch64_ds);
	dstr_free(&napch64_ds);
	dstr_free(&alch64_ds);
	dstr_free(&apch64_ds);
	return rc;
}

const char *base_set_hash_get(base_data_t base, ldms_set_t set, ldms_schema_hash_t lsh)
{
	const char *r = NULL;
	if (!set && base)
		set = base->set;
	if (!set)
		return r;

	switch (lsh) {
	case SH_NAME_ARRAY_LEN_CH64:
		r = ldms_set_info_get(set, ""SH_NAME_ARRAY_LEN_CH64"");
		break;
	case SH_NAME_ARRAY_POLY_CH64:
		r = ldms_set_info_get(set, ""SH_NAME_ARRAY_POLY_CH64"");
		break;
	case SH_ARRAY_LEN_CH64:
		r = ldms_set_info_get(set, ""SH_ARRAY_LEN_CH64"");
		break;
	case SH_ARRAY_POLY_CH64:
		r = ldms_set_info_get(set, ""SH_ARRAY_POLY_CH64"");
		break;
	default:
		break;
	}
	return r;

}",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,648,2021-03-02T00:06:43Z,2021-06-28T16:01:47Z,2021-06-28T16:01:47Z,CLOSED,False,318,1,5,https://github.com/baallan,WIP: Add store-oriented hashes of schema content to sampler_base.,2,[],https://github.com/ovis-hpc/ovis/pull/648,https://github.com/morrone,6,https://github.com/ovis-hpc/ovis/pull/648#issuecomment-789203354,"Store authors often need to know if the schema
of two set instances are equivalent, independent of schema string name.
This removes strongly relying on administrators to invent globally
consistent schema names and provides a fast method (comparing hashes)
of verifying that no conflicts in schema content exist.
As computing a hash of the schema is
an expensive operation, computing it once at set creation minimizes work
globally. This patch defines 8 byte integer hash codes (stored in
set_info key/value pairs as 17 byte strings) for 4 kinds of schema
equivalence check: see sampler_base.h enum ldms_schema_hash_t.
The new sampler_base functions are designed with signatures and argument
handling such that they may be applied to multiple set instances in the same
sampler independently, should the specific sampler need it. This also
allows samplers not derived from sampler_base to apply the hash setting functions.
The update to the ldms_ls man page simply identifies that ldms_ls -v
will show set_info strings, such as the updater hints and these schema hash values.
Creating trees based on the string hash key or the string hash key converted
back to a uint64_t allows rapid determination of which store a set instance
can be safely routed to, for those stores (or storage policies)
requiring matching schema.
With this addition, it becomes trivially easy for a single CSV or SOS store
to be configured which accepts any set instance of any schema and dispatches to the appropriate table/file. (with suitable implementation extensions to the store plugins).
An alternative approach to storing the hashes in set_info is to store them in metadata. This might save transmission bytes at the expense of storage bytes, however.","I am confused about this approach to adding hashes of schemas. This is a hash of the schema, correct? So shouldn't the schema's hash be calculated as part of the schema, and stored in a structure associated with the schema? Then it is just a lookup to add the hash to the metadata of the (potentially many) metric sets that are created from that schema.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,648,2021-03-02T00:06:43Z,2021-06-28T16:01:47Z,2021-06-28T16:01:47Z,CLOSED,False,318,1,5,https://github.com/baallan,WIP: Add store-oriented hashes of schema content to sampler_base.,2,[],https://github.com/ovis-hpc/ovis/pull/648,https://github.com/baallan,7,https://github.com/ovis-hpc/ovis/pull/648#issuecomment-789226519,"Store authors often need to know if the schema
of two set instances are equivalent, independent of schema string name.
This removes strongly relying on administrators to invent globally
consistent schema names and provides a fast method (comparing hashes)
of verifying that no conflicts in schema content exist.
As computing a hash of the schema is
an expensive operation, computing it once at set creation minimizes work
globally. This patch defines 8 byte integer hash codes (stored in
set_info key/value pairs as 17 byte strings) for 4 kinds of schema
equivalence check: see sampler_base.h enum ldms_schema_hash_t.
The new sampler_base functions are designed with signatures and argument
handling such that they may be applied to multiple set instances in the same
sampler independently, should the specific sampler need it. This also
allows samplers not derived from sampler_base to apply the hash setting functions.
The update to the ldms_ls man page simply identifies that ldms_ls -v
will show set_info strings, such as the updater hints and these schema hash values.
Creating trees based on the string hash key or the string hash key converted
back to a uint64_t allows rapid determination of which store a set instance
can be safely routed to, for those stores (or storage policies)
requiring matching schema.
With this addition, it becomes trivially easy for a single CSV or SOS store
to be configured which accepts any set instance of any schema and dispatches to the appropriate table/file. (with suitable implementation extensions to the store plugins).
An alternative approach to storing the hashes in set_info is to store them in metadata. This might save transmission bytes at the expense of storage bytes, however.","@morrone good questions. I would love it if I could store a hash once on a schema and if a schema became ""frozen"" the first time it was used in a set_new; a preprocessing step of the set new would be to compute the schema hashes and mark the schema 'complete'.
First I didn't see a flexible slot in the schema (something that won't break line protocols) to add hashes. Maybe I missed something. I want this change to be compatible with current/previous v4 wire protocols and so far it is. (passed that github check).
Second (probably less significantly), there's nothing that ""finalizes"" a schema. In fact afaict, a schema is associated to a set instance only by a name string stored in the set, so there's nothing to prevent someone from adding more members to an existing named schema after a set instance has been created (except ""customary usage""). Essentially the schema info is copied into the set instance at create, so the set is the definitive source for hashing instead of looking up a schema instance and looking up a hash there.  It's also not entirely clear to me that schema objects are ever moved across the wire; so what happens when a set instance comes across with nothing except the schema name? We don't really use schemas (beyond the name) at the store: we query the set instance for everything. My understanding is that the same schema name can be defined with different content on every collector daemon, and that this causes no problems to the transport or aggregator nodes; this means there isn't a common 'schema table' keyed by schema name in use at aggregators or stores. Thus the set instance metadata (not meta metrics) serves as the schema at the aggregator or the store and there's no other, better place to store the hashes.
There is a minor issue with the concept of ""set_info"" key/value pairs: anyone can reset the value for a key, so again we're counting on ""customary usage"" to preserve the semantics of the hash values stored in the set_info table. Note we are counting on ""customary usage"" to preserve the semantics of the hints for update scheduling, etc also, so I don't find putting the schema hashes in the same table and expecting them to be treated as 'read-only' a problem.  We're trading flexibility in protocol for ""protection"" by hiding the hashes inside a fixed C structure location that one might attempt to hide behind a void pointer or something.
But maybe I've misunderstood one of the data structures or transmission techniques.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,648,2021-03-02T00:06:43Z,2021-06-28T16:01:47Z,2021-06-28T16:01:47Z,CLOSED,False,318,1,5,https://github.com/baallan,WIP: Add store-oriented hashes of schema content to sampler_base.,2,[],https://github.com/ovis-hpc/ovis/pull/648,https://github.com/tom95858,8,https://github.com/ovis-hpc/ovis/pull/648#issuecomment-789319758,"Store authors often need to know if the schema
of two set instances are equivalent, independent of schema string name.
This removes strongly relying on administrators to invent globally
consistent schema names and provides a fast method (comparing hashes)
of verifying that no conflicts in schema content exist.
As computing a hash of the schema is
an expensive operation, computing it once at set creation minimizes work
globally. This patch defines 8 byte integer hash codes (stored in
set_info key/value pairs as 17 byte strings) for 4 kinds of schema
equivalence check: see sampler_base.h enum ldms_schema_hash_t.
The new sampler_base functions are designed with signatures and argument
handling such that they may be applied to multiple set instances in the same
sampler independently, should the specific sampler need it. This also
allows samplers not derived from sampler_base to apply the hash setting functions.
The update to the ldms_ls man page simply identifies that ldms_ls -v
will show set_info strings, such as the updater hints and these schema hash values.
Creating trees based on the string hash key or the string hash key converted
back to a uint64_t allows rapid determination of which store a set instance
can be safely routed to, for those stores (or storage policies)
requiring matching schema.
With this addition, it becomes trivially easy for a single CSV or SOS store
to be configured which accepts any set instance of any schema and dispatches to the appropriate table/file. (with suitable implementation extensions to the store plugins).
An alternative approach to storing the hashes in set_info is to store them in metadata. This might save transmission bytes at the expense of storage bytes, however.","@morrone, yes this can all be done in the schema code itself and saved in
the schema definition. When the schema it is used in ldms_set_new, the hash
would be stored in one of the currently unused fields in the metric set
header, preserving backward compatibility.  From there it would be conveyed
when the set is exchanged  with the peer so a consumer can trivially
determine if two different sets with the same schema are in fact identical.

Implementation aside, absent a use case at the peer indicating how the hash
will be used, this all seems highly speculative as to its utility. For
example, are array lengths part of the hash? What about the new metric_list
and flexible schema types coming this year? I think we need a larger more
thoughtful discussion of how schema and schema changes are managed in the
larger LDMS ecosystem so that whatever this is, it is part of an end-to-end
solution.
…
On Tue, Mar 2, 2021 at 1:45 PM Christopher J. Morrone < ***@***.***> wrote:
 I am confused about this approach to adding hashes of schemas. This is a
 hash of the *schema*, correct? So shouldn't the schema's hash be
 calculated as part of the schema, and stored in a structure associated with
 the schema? Then it is just a lookup to add the hash to the metadata of the
 (potentially many) metric sets that are created from that schema.

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#648 (comment)>, or
 unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ABVTPXCJI7TYW2TR6CLRR5TTBVE6NANCNFSM4YNTKBTQ>
 .


-- 
Thomas Tucker, President, Open Grid Computing, Inc.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,648,2021-03-02T00:06:43Z,2021-06-28T16:01:47Z,2021-06-28T16:01:47Z,CLOSED,False,318,1,5,https://github.com/baallan,WIP: Add store-oriented hashes of schema content to sampler_base.,2,[],https://github.com/ovis-hpc/ovis/pull/648,https://github.com/baallan,9,https://github.com/ovis-hpc/ovis/pull/648#issuecomment-789870101,"Store authors often need to know if the schema
of two set instances are equivalent, independent of schema string name.
This removes strongly relying on administrators to invent globally
consistent schema names and provides a fast method (comparing hashes)
of verifying that no conflicts in schema content exist.
As computing a hash of the schema is
an expensive operation, computing it once at set creation minimizes work
globally. This patch defines 8 byte integer hash codes (stored in
set_info key/value pairs as 17 byte strings) for 4 kinds of schema
equivalence check: see sampler_base.h enum ldms_schema_hash_t.
The new sampler_base functions are designed with signatures and argument
handling such that they may be applied to multiple set instances in the same
sampler independently, should the specific sampler need it. This also
allows samplers not derived from sampler_base to apply the hash setting functions.
The update to the ldms_ls man page simply identifies that ldms_ls -v
will show set_info strings, such as the updater hints and these schema hash values.
Creating trees based on the string hash key or the string hash key converted
back to a uint64_t allows rapid determination of which store a set instance
can be safely routed to, for those stores (or storage policies)
requiring matching schema.
With this addition, it becomes trivially easy for a single CSV or SOS store
to be configured which accepts any set instance of any schema and dispatches to the appropriate table/file. (with suitable implementation extensions to the store plugins).
An alternative approach to storing the hashes in set_info is to store them in metadata. This might save transmission bytes at the expense of storage bytes, however.","@tom95858 Do share. Are the flexible schema and metric_list documented as proposals or development branches someplace?
One of Ann's comments triggered the thought that:

if we could extend set_info values to be polymorphic: either string (transmissable) or void * (not transmitted over network, unless you have a clever plan...), and
if set instance metric value updates from the network do not wipe and replace the set_info items.

Then I can accomplish what I want to do at the stores (or elsewhere) without:

inducing data structure changes to schema or sets (beyond making set_info polymorphic)
inducing new network overhead.
changing sampler_base

Are the 'if' conditions currently met or easily meetable?
And, yes, a separate discussion about schemas and whether they have any role in ldms that should be exposed to system administrators would be a fine thing.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,648,2021-03-02T00:06:43Z,2021-06-28T16:01:47Z,2021-06-28T16:01:47Z,CLOSED,False,318,1,5,https://github.com/baallan,WIP: Add store-oriented hashes of schema content to sampler_base.,2,[],https://github.com/ovis-hpc/ovis/pull/648,https://github.com/baallan,10,https://github.com/ovis-hpc/ovis/pull/648#issuecomment-869808121,"Store authors often need to know if the schema
of two set instances are equivalent, independent of schema string name.
This removes strongly relying on administrators to invent globally
consistent schema names and provides a fast method (comparing hashes)
of verifying that no conflicts in schema content exist.
As computing a hash of the schema is
an expensive operation, computing it once at set creation minimizes work
globally. This patch defines 8 byte integer hash codes (stored in
set_info key/value pairs as 17 byte strings) for 4 kinds of schema
equivalence check: see sampler_base.h enum ldms_schema_hash_t.
The new sampler_base functions are designed with signatures and argument
handling such that they may be applied to multiple set instances in the same
sampler independently, should the specific sampler need it. This also
allows samplers not derived from sampler_base to apply the hash setting functions.
The update to the ldms_ls man page simply identifies that ldms_ls -v
will show set_info strings, such as the updater hints and these schema hash values.
Creating trees based on the string hash key or the string hash key converted
back to a uint64_t allows rapid determination of which store a set instance
can be safely routed to, for those stores (or storage policies)
requiring matching schema.
With this addition, it becomes trivially easy for a single CSV or SOS store
to be configured which accepts any set instance of any schema and dispatches to the appropriate table/file. (with suitable implementation extensions to the store plugins).
An alternative approach to storing the hashes in set_info is to store them in metadata. This might save transmission bytes at the expense of storage bytes, however.",Closing this request because (A) I just accidentally force pushed an older version  of the patch and (B) it looks like putting the hash creation and management on the store plugins that care about it is a better approach.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,649,2021-03-03T23:04:00Z,2021-03-05T01:34:02Z,2021-03-05T01:34:02Z,MERGED,True,0,7,1,https://github.com/baallan,remove  dead store api,2,[],https://github.com/ovis-hpc/ovis/pull/649,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/649,"Would prefer to convert to deleting these, but folk need to look first.
These two functions stubs date from 2013/2015 and are nowhere implemented.","Would prefer to convert to deleting these, but folk need to look first.
These two functions stubs date from 2013/2015 and are nowhere implemented.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,649,2021-03-03T23:04:00Z,2021-03-05T01:34:02Z,2021-03-05T01:34:02Z,MERGED,True,0,7,1,https://github.com/baallan,remove  dead store api,2,[],https://github.com/ovis-hpc/ovis/pull/649,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/649#issuecomment-790176009,"Would prefer to convert to deleting these, but folk need to look first.
These two functions stubs date from 2013/2015 and are nowhere implemented.","@baallan, I am OK with just removing these.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,649,2021-03-03T23:04:00Z,2021-03-05T01:34:02Z,2021-03-05T01:34:02Z,MERGED,True,0,7,1,https://github.com/baallan,remove  dead store api,2,[],https://github.com/ovis-hpc/ovis/pull/649,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/649#issuecomment-790225015,"Would prefer to convert to deleting these, but folk need to look first.
These two functions stubs date from 2013/2015 and are nowhere implemented.",@tom95858 I converted patch to delete them. I assume you can still squash this when pulling/merging.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,650,2021-03-04T01:48:14Z,2021-03-10T20:24:22Z,2021-03-10T20:24:22Z,MERGED,True,16,6,2,https://github.com/baallan,add cpu_num metric and more error checking to tx2mon,1,[],https://github.com/ovis-hpc/ovis/pull/650,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/650,"This records the socket number (cpu_num) in the data set so it doesn't have to be extracted from the set instance name.
Additional nits fixed:

It adds return checking so that config fails if a metric add fails.
It fixes an array overrun that happens and is trapped only when compiled in hardened mode
per ARM/rhel7 RPM build defaults (-Wp,-D_FORTIFY_SOURCE=2 -fstack-protector-strong).
It converts a lingering printf into a log call.","This records the socket number (cpu_num) in the data set so it doesn't have to be extracted from the set instance name.
Additional nits fixed:

It adds return checking so that config fails if a metric add fails.
It fixes an array overrun that happens and is trapped only when compiled in hardened mode
per ARM/rhel7 RPM build defaults (-Wp,-D_FORTIFY_SOURCE=2 -fstack-protector-strong).
It converts a lingering printf into a log call.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,650,2021-03-04T01:48:14Z,2021-03-10T20:24:22Z,2021-03-10T20:24:22Z,MERGED,True,16,6,2,https://github.com/baallan,add cpu_num metric and more error checking to tx2mon,1,[],https://github.com/ovis-hpc/ovis/pull/650,https://github.com/Snell1224,2,https://github.com/ovis-hpc/ovis/pull/650#issuecomment-796002537,"This records the socket number (cpu_num) in the data set so it doesn't have to be extracted from the set instance name.
Additional nits fixed:

It adds return checking so that config fails if a metric add fails.
It fixes an array overrun that happens and is trapped only when compiled in hardened mode
per ARM/rhel7 RPM build defaults (-Wp,-D_FORTIFY_SOURCE=2 -fstack-protector-strong).
It converts a lingering printf into a log call.",@baallan Tested the build on stria with make install/installcheck/check and it was successful. Also tested with ldms-static-test and the tx2mon sampler ran without errors.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,650,2021-03-04T01:48:14Z,2021-03-10T20:24:22Z,2021-03-10T20:24:22Z,MERGED,True,16,6,2,https://github.com/baallan,add cpu_num metric and more error checking to tx2mon,1,[],https://github.com/ovis-hpc/ovis/pull/650,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/650#issuecomment-796013478,"This records the socket number (cpu_num) in the data set so it doesn't have to be extracted from the set instance name.
Additional nits fixed:

It adds return checking so that config fails if a metric add fails.
It fixes an array overrun that happens and is trapped only when compiled in hardened mode
per ARM/rhel7 RPM build defaults (-Wp,-D_FORTIFY_SOURCE=2 -fstack-protector-strong).
It converts a lingering printf into a log call.","@tom95858 @valleydlr  as Sara has checked it, please merge this at your earliest convenience.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,654,2021-03-07T00:29:51Z,2021-08-21T22:53:45Z,2021-08-21T22:53:45Z,CLOSED,False,1853,49,18,https://github.com/oceandlr,L2 streams store ,16,['Stores'],https://github.com/ovis-hpc/ovis/pull/654,https://github.com/oceandlr,1,https://github.com/ovis-hpc/ovis/pull/654,"current l2 stream store. This is in development, as indicated. Directory location (hello_streams) reflects that since that is where current streams capabilities which are for demonstration are located.
This store will evolve for performance reasons. It will also be used to assess commonality to go into store base capabilities.","current l2 stream store. This is in development, as indicated. Directory location (hello_streams) reflects that since that is where current streams capabilities which are for demonstration are located.
This store will evolve for performance reasons. It will also be used to assess commonality to go into store base capabilities.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,654,2021-03-07T00:29:51Z,2021-08-21T22:53:45Z,2021-08-21T22:53:45Z,CLOSED,False,1853,49,18,https://github.com/oceandlr,L2 streams store ,16,['Stores'],https://github.com/ovis-hpc/ovis/pull/654,https://github.com/morrone,2,https://github.com/ovis-hpc/ovis/pull/654#issuecomment-794222757,"current l2 stream store. This is in development, as indicated. Directory location (hello_streams) reflects that since that is where current streams capabilities which are for demonstration are located.
This store will evolve for performance reasons. It will also be used to assess commonality to go into store base capabilities.","What does ""L2"" mean?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,654,2021-03-07T00:29:51Z,2021-08-21T22:53:45Z,2021-08-21T22:53:45Z,CLOSED,False,1853,49,18,https://github.com/oceandlr,L2 streams store ,16,['Stores'],https://github.com/ovis-hpc/ovis/pull/654,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/654#issuecomment-794311513,"current l2 stream store. This is in development, as indicated. Directory location (hello_streams) reflects that since that is where current streams capabilities which are for demonstration are located.
This store will evolve for performance reasons. It will also be used to assess commonality to go into store base capabilities.","@oceandlr, maybe we should rename this app_event_store or something else that indicates what it actually does.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,654,2021-03-07T00:29:51Z,2021-08-21T22:53:45Z,2021-08-21T22:53:45Z,CLOSED,False,1853,49,18,https://github.com/oceandlr,L2 streams store ,16,['Stores'],https://github.com/ovis-hpc/ovis/pull/654,https://github.com/oceandlr,4,https://github.com/ovis-hpc/ovis/pull/654#issuecomment-794627909,"current l2 stream store. This is in development, as indicated. Directory location (hello_streams) reflects that since that is where current streams capabilities which are for demonstration are located.
This store will evolve for performance reasons. It will also be used to assess commonality to go into store base capabilities.","Thanks, everyone, for the comments. I will check them out.
Re name: it is a good point that it should be named meaningfully. This one assumes an input format that the L2 team has decided on. If they change to something else, then I will change the innards. I think it is useful for a variety of reasons to have in the release and I am treating hello_streams as a demo location as mentioned above.
I could:

rename for now. if we need something different for the L2, then maybe I should just spin that into some other named thing
make a decision now about putting this into contrib somewhere.

@valleydlr  @tom95858",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,654,2021-03-07T00:29:51Z,2021-08-21T22:53:45Z,2021-08-21T22:53:45Z,CLOSED,False,1853,49,18,https://github.com/oceandlr,L2 streams store ,16,['Stores'],https://github.com/ovis-hpc/ovis/pull/654,https://github.com/baallan,5,https://github.com/ovis-hpc/ovis/pull/654#issuecomment-794766127,"current l2 stream store. This is in development, as indicated. Directory location (hello_streams) reflects that since that is where current streams capabilities which are for demonstration are located.
This store will evolve for performance reasons. It will also be used to assess commonality to go into store base capabilities.","Consider adding the following files to ldms/scripts/examples/, so that anyone can run a simple demo/test case on their machine with: ""ldms-static-test.sh stream_store""
This example reproduces the problems described earlier, with complete details dumped to ldmstest/stream_store/[log,run,store]/*
::::::::::::::
stream_store
::::::::::::::
export plugname=stream_store
portbase=61020
echo '{""job-id"" : 10364, ""rank"" : 1, ""kokkos-perf-data"" : [ {""name"" : ""SPARTAFOO0"", ""count"": 0, ""time"": 0.0000},{""name"" : ""SPARTAFOO
1"", ""count"": 1, ""time"": 0.0001},{""name"" : ""SPARTAFOO2"", ""count"": 2, ""time"": 0.0002},{""name"" : ""SPARTAFOO3"", ""count"": 3, ""time"": 0.00
03},{""name"" : ""SPARTAFOO4"", ""count"": 4, ""time"": 0.0004},{""name"" : ""SPARTAFOO5"", ""count"": 5, ""time"": 0.0005},{""name"" : ""SPARTAFOO6"", 
""count"": 6, ""time"": 0.0006},{""name"" : ""SPARTAFOO7"", ""count"": 7, ""time"": 0.0007},{""name"" : ""SPARTAFOO8"", ""count"": 8, ""time"": 0.0008},
{""name"" : ""SPARTAFOO9"", ""count"": 9, ""time"": 0.0009}] }' > $LDMSD_RUN/x.json
LDMSD 1
for i in $(seq 10); do
	SLEEP 1
	hello_cat_publisher -p $port1 -a none -s foo -t json -x sock -h localhost -f $LDMSD_RUN/x.json
done

SLEEP 1
KILL_LDMSD 1
file_created $STOREDIR/csv/foo.*
::::::::::::::
stream_store.1
::::::::::::::
load name=l2_stream_csv_store
config name=l2_stream_csv_store path=${STOREDIR} container=csv stream=foo buffer=1 rollover=3

prdcr_add name=localhost1 host=localhost type=active xprt=sock port=${port1} interval=20000000
prdcr_subscribe stream=foo regex=localhost*
prdcr_start name=localhost1",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,654,2021-03-07T00:29:51Z,2021-08-21T22:53:45Z,2021-08-21T22:53:45Z,CLOSED,False,1853,49,18,https://github.com/oceandlr,L2 streams store ,16,['Stores'],https://github.com/ovis-hpc/ovis/pull/654,https://github.com/oceandlr,6,https://github.com/ovis-hpc/ovis/pull/654#issuecomment-795600501,"current l2 stream store. This is in development, as indicated. Directory location (hello_streams) reflects that since that is where current streams capabilities which are for demonstration are located.
This store will evolve for performance reasons. It will also be used to assess commonality to go into store base capabilities.","@tom95858 @valleydlr - please give me your advice....
I spoke with @valleydlr about where to put this. Since this is testing and possibly specific to one case, it probably shouldn't be in the release. for the l2, I could keep this in my own repo, but then it won't be in the RPMs that are being built on the machines. Is it reasonable for me to rebase on top of the release, build locally and then give you a binary of library to drop in by hand when we need it?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,654,2021-03-07T00:29:51Z,2021-08-21T22:53:45Z,2021-08-21T22:53:45Z,CLOSED,False,1853,49,18,https://github.com/oceandlr,L2 streams store ,16,['Stores'],https://github.com/ovis-hpc/ovis/pull/654,https://github.com/morrone,7,https://github.com/ovis-hpc/ovis/pull/654#issuecomment-795975508,"current l2 stream store. This is in development, as indicated. Directory location (hello_streams) reflects that since that is where current streams capabilities which are for demonstration are located.
This store will evolve for performance reasons. It will also be used to assess commonality to go into store base capabilities.","I spoke with @valleydlr about where to put this. Since this is testing and possibly specific to one case, it probably shouldn't be in the release. for the l2, I could keep this in my own repo, but then it won't be in the RPMs that are being built on the machines. Is it reasonable for me to rebase on top of the release, build locally and then give you a binary of library to drop in by hand when we need it?

With samplers, I build and rpm package samper plugins separately from (after) the ovis-ldms builds. That may be more to learn than you are looking for, but I thought I would mention that as a possibility. It would allow you to make an rpm of your development store for install on your machines.
Granted, I don't know for sure that ovis-ldms is exporting everything needed to build store plugins the way that it exports everything needed for sampler plugins.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,654,2021-03-07T00:29:51Z,2021-08-21T22:53:45Z,2021-08-21T22:53:45Z,CLOSED,False,1853,49,18,https://github.com/oceandlr,L2 streams store ,16,['Stores'],https://github.com/ovis-hpc/ovis/pull/654,https://github.com/baallan,8,https://github.com/ovis-hpc/ovis/pull/654#issuecomment-795991945,"current l2 stream store. This is in development, as indicated. Directory location (hello_streams) reflects that since that is where current streams capabilities which are for demonstration are located.
This store will evolve for performance reasons. It will also be used to assess commonality to go into store base capabilities.","It is certainly the intent that stores can be built externally the same way as samplers. If there is header information missing, there's a bug. I had snl-only stores doing this for a while.
But that said, for test packaging/test system install purposes, it's trivial to cherry pick this store addition into the packaging process so long as the development branch is rebased to OVIS-4 before packaging. I don't see a rush to merge before things are fully baked. There's few enough of us involved that coordinating shouldn't be a problem.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,654,2021-03-07T00:29:51Z,2021-08-21T22:53:45Z,2021-08-21T22:53:45Z,CLOSED,False,1853,49,18,https://github.com/oceandlr,L2 streams store ,16,['Stores'],https://github.com/ovis-hpc/ovis/pull/654,https://github.com/oceandlr,9,https://github.com/ovis-hpc/ovis/pull/654#issuecomment-891319860,"current l2 stream store. This is in development, as indicated. Directory location (hello_streams) reflects that since that is where current streams capabilities which are for demonstration are located.
This store will evolve for performance reasons. It will also be used to assess commonality to go into store base capabilities.","After discussion with various stakeholders, it was decided that it is desirable to get this store into the mainline. It's the most reasonable, flexible format for json that results in an unambiguous CSV format. I will be closing this and putting in a new request with the store under a different name. This will probably additionally replace the hello_streams_store; I think having that one soley for tutorial purposes is unnecessary.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,654,2021-03-07T00:29:51Z,2021-08-21T22:53:45Z,2021-08-21T22:53:45Z,CLOSED,False,1853,49,18,https://github.com/oceandlr,L2 streams store ,16,['Stores'],https://github.com/ovis-hpc/ovis/pull/654,https://github.com/oceandlr,10,https://github.com/ovis-hpc/ovis/pull/654#issuecomment-903185623,"current l2 stream store. This is in development, as indicated. Directory location (hello_streams) reflects that since that is where current streams capabilities which are for demonstration are located.
This store will evolve for performance reasons. It will also be used to assess commonality to go into store base capabilities.",closing this. a new one will go in on OVIS-4.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,655,2021-03-10T01:32:32Z,2021-03-17T23:30:38Z,2021-03-17T23:30:38Z,MERGED,True,10,12,2,https://github.com/morrone,store_csv: Repair constant file rename errors,2,[],https://github.com/ovis-hpc/ovis/pull/655,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/655,"When altheader=0, the default setting for the store_csv store:
The store_csv code has a bug that results in chown/chmod error
messages every time a file is renamed. A sanitized version of
the error looks like:
DEBUG: store_csv: rename_output: rename(A, B)
ERROR: store_csv: rename_output: unable to chmod(A,660): No such file or directory.
ERROR: store_csv: rename_output: unable to chown(A, , : No such file or directory.
DEBUG: store_csv: rename_output: rename(A, B)
It appears that the second redundant rename of ""A"" to ""B"" succeeds, even
though the chmod and chown of ""A"" fail immediately before. However, this is
not the case. In fact only the first rename succeeds as we would expect, and
the error from the second rename is simply ignored. The code comment
explaining the ignored error says:
""enoent happens if altheader = 0 or typeheader = 0""
So it was recognized that the code was incorrect, but the error was ignored
rather than fixing the problem.
The issue seems to be that when altheader=0, the header is not a separate
file, but added as a comment in the main CSV file. However the code redundantly
fills in the same file name for the headerfile rather than recognizing this
fact.
This code has become a bit spaghettified over the years, and probably
needs an overhaul to make a fully clean fix.
In the mean time we use a small fix to avoid the incorrect file rename
attempts when altheader is zero and when typeheader is zero.","When altheader=0, the default setting for the store_csv store:
The store_csv code has a bug that results in chown/chmod error
messages every time a file is renamed. A sanitized version of
the error looks like:
DEBUG: store_csv: rename_output: rename(A, B)
ERROR: store_csv: rename_output: unable to chmod(A,660): No such file or directory.
ERROR: store_csv: rename_output: unable to chown(A, , : No such file or directory.
DEBUG: store_csv: rename_output: rename(A, B)
It appears that the second redundant rename of ""A"" to ""B"" succeeds, even
though the chmod and chown of ""A"" fail immediately before. However, this is
not the case. In fact only the first rename succeeds as we would expect, and
the error from the second rename is simply ignored. The code comment
explaining the ignored error says:
""enoent happens if altheader = 0 or typeheader = 0""
So it was recognized that the code was incorrect, but the error was ignored
rather than fixing the problem.
The issue seems to be that when altheader=0, the header is not a separate
file, but added as a comment in the main CSV file. However the code redundantly
fills in the same file name for the headerfile rather than recognizing this
fact.
This code has become a bit spaghettified over the years, and probably
needs an overhaul to make a fully clean fix.
In the mean time we use a small fix to avoid the incorrect file rename
attempts when altheader is zero and when typeheader is zero.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,655,2021-03-10T01:32:32Z,2021-03-17T23:30:38Z,2021-03-17T23:30:38Z,MERGED,True,10,12,2,https://github.com/morrone,store_csv: Repair constant file rename errors,2,[],https://github.com/ovis-hpc/ovis/pull/655,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/655#issuecomment-795672307,"When altheader=0, the default setting for the store_csv store:
The store_csv code has a bug that results in chown/chmod error
messages every time a file is renamed. A sanitized version of
the error looks like:
DEBUG: store_csv: rename_output: rename(A, B)
ERROR: store_csv: rename_output: unable to chmod(A,660): No such file or directory.
ERROR: store_csv: rename_output: unable to chown(A, , : No such file or directory.
DEBUG: store_csv: rename_output: rename(A, B)
It appears that the second redundant rename of ""A"" to ""B"" succeeds, even
though the chmod and chown of ""A"" fail immediately before. However, this is
not the case. In fact only the first rename succeeds as we would expect, and
the error from the second rename is simply ignored. The code comment
explaining the ignored error says:
""enoent happens if altheader = 0 or typeheader = 0""
So it was recognized that the code was incorrect, but the error was ignored
rather than fixing the problem.
The issue seems to be that when altheader=0, the header is not a separate
file, but added as a comment in the main CSV file. However the code redundantly
fills in the same file name for the headerfile rather than recognizing this
fact.
This code has become a bit spaghettified over the years, and probably
needs an overhaul to make a fully clean fix.
In the mean time we use a small fix to avoid the incorrect file rename
attempts when altheader is zero and when typeheader is zero.","@morrone please rebase to top of tree.
Do you have an input store config example you can share that produces incorrect files, or is this strictly a style issue?
The order of calls in rename_output is chmod/chown/rename, so your explanation here cannot be correct, unless you intended to start it with ""For the case when altheader=0,..."".
Less the commingled unrelated nit changes, the proposed change looks ok, though I haven't run it though the csv tests.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,655,2021-03-10T01:32:32Z,2021-03-17T23:30:38Z,2021-03-17T23:30:38Z,MERGED,True,10,12,2,https://github.com/morrone,store_csv: Repair constant file rename errors,2,[],https://github.com/ovis-hpc/ovis/pull/655,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/655#issuecomment-795961791,"When altheader=0, the default setting for the store_csv store:
The store_csv code has a bug that results in chown/chmod error
messages every time a file is renamed. A sanitized version of
the error looks like:
DEBUG: store_csv: rename_output: rename(A, B)
ERROR: store_csv: rename_output: unable to chmod(A,660): No such file or directory.
ERROR: store_csv: rename_output: unable to chown(A, , : No such file or directory.
DEBUG: store_csv: rename_output: rename(A, B)
It appears that the second redundant rename of ""A"" to ""B"" succeeds, even
though the chmod and chown of ""A"" fail immediately before. However, this is
not the case. In fact only the first rename succeeds as we would expect, and
the error from the second rename is simply ignored. The code comment
explaining the ignored error says:
""enoent happens if altheader = 0 or typeheader = 0""
So it was recognized that the code was incorrect, but the error was ignored
rather than fixing the problem.
The issue seems to be that when altheader=0, the header is not a separate
file, but added as a comment in the main CSV file. However the code redundantly
fills in the same file name for the headerfile rather than recognizing this
fact.
This code has become a bit spaghettified over the years, and probably
needs an overhaul to make a fully clean fix.
In the mean time we use a small fix to avoid the incorrect file rename
attempts when altheader is zero and when typeheader is zero.","@morrone please rebase to top of tree.

It is already at the top of the OVIS-4 tree.

Do you have an input store config example you can share that produces incorrect files, or is this strictly a style issue?

While not a fatal issue (the files are still copied), the code is attempting operations in the filesystem that cannot possibly work. That makes it a bug. While it does that it is throwing a constant stream of error messages in the logs, and makes it a bug with an annoyance. So this is not an issue of (code?) style at all.

The order of calls in rename_output is chmod/chown/rename, so your explanation here cannot be correct, unless you intended to start it with ""For the case when altheader=0,..."".

The order of the calls in my example is consistent with the chmod/chown/rename in the code. And yes, this is for the default mode of operation, altheader=0.
In case it isn't entirely clear, the code is calling ""rename_output()"" twice on the same file. That is a bug. It should only be calling rename_output() once for a particular file. rename_output() does the following:
chmod()
chown()
rename()
so two calls to rename_output() for the same file would do:
chmod()
chown()
rename()
chmod()
chown()
rename()
If one were to set ""-v DEBUG"", there would be no mention of the first two chmod() and chown() in the logs because those two calls would succeed. Then the first rename() is mentioned in a DEBUG level message. Then the second set of chmod() and chown() fail, so we see ERROR messages in the logs about those. Finally, the second rename() is mentioned at DEBUG level in the logs (and fails, but the code ignores that). In other words:
chmod() no message in the logs
chown() no message in the logs
rename() message in logs at DEBUG level
chmod() ERROR in logs
chwon() ERROR in logs
rename() message in logs at DEBUG level
Hopefully that explains why the log example I gave is correct in its order.

Less the commingled unrelated nit changes, the proposed change looks ok, though I haven't run it though the csv tests.

Testing and thorough review would be good on this one. I'm not entirely sure that I accounted for every side condition.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,655,2021-03-10T01:32:32Z,2021-03-17T23:30:38Z,2021-03-17T23:30:38Z,MERGED,True,10,12,2,https://github.com/morrone,store_csv: Repair constant file rename errors,2,[],https://github.com/ovis-hpc/ovis/pull/655,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/655#issuecomment-796029086,"When altheader=0, the default setting for the store_csv store:
The store_csv code has a bug that results in chown/chmod error
messages every time a file is renamed. A sanitized version of
the error looks like:
DEBUG: store_csv: rename_output: rename(A, B)
ERROR: store_csv: rename_output: unable to chmod(A,660): No such file or directory.
ERROR: store_csv: rename_output: unable to chown(A, , : No such file or directory.
DEBUG: store_csv: rename_output: rename(A, B)
It appears that the second redundant rename of ""A"" to ""B"" succeeds, even
though the chmod and chown of ""A"" fail immediately before. However, this is
not the case. In fact only the first rename succeeds as we would expect, and
the error from the second rename is simply ignored. The code comment
explaining the ignored error says:
""enoent happens if altheader = 0 or typeheader = 0""
So it was recognized that the code was incorrect, but the error was ignored
rather than fixing the problem.
The issue seems to be that when altheader=0, the header is not a separate
file, but added as a comment in the main CSV file. However the code redundantly
fills in the same file name for the headerfile rather than recognizing this
fact.
This code has become a bit spaghettified over the years, and probably
needs an overhaul to make a fully clean fix.
In the mean time we use a small fix to avoid the incorrect file rename
attempts when altheader is zero and when typeheader is zero.",I will run this through the related ldms-static-test.sh cases and review the logs. Will take a little while.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,655,2021-03-10T01:32:32Z,2021-03-17T23:30:38Z,2021-03-17T23:30:38Z,MERGED,True,10,12,2,https://github.com/morrone,store_csv: Repair constant file rename errors,2,[],https://github.com/ovis-hpc/ovis/pull/655,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/655#issuecomment-797111866,"When altheader=0, the default setting for the store_csv store:
The store_csv code has a bug that results in chown/chmod error
messages every time a file is renamed. A sanitized version of
the error looks like:
DEBUG: store_csv: rename_output: rename(A, B)
ERROR: store_csv: rename_output: unable to chmod(A,660): No such file or directory.
ERROR: store_csv: rename_output: unable to chown(A, , : No such file or directory.
DEBUG: store_csv: rename_output: rename(A, B)
It appears that the second redundant rename of ""A"" to ""B"" succeeds, even
though the chmod and chown of ""A"" fail immediately before. However, this is
not the case. In fact only the first rename succeeds as we would expect, and
the error from the second rename is simply ignored. The code comment
explaining the ignored error says:
""enoent happens if altheader = 0 or typeheader = 0""
So it was recognized that the code was incorrect, but the error was ignored
rather than fixing the problem.
The issue seems to be that when altheader=0, the header is not a separate
file, but added as a comment in the main CSV file. However the code redundantly
fills in the same file name for the headerfile rather than recognizing this
fact.
This code has become a bit spaghettified over the years, and probably
needs an overhaul to make a fully clean fix.
In the mean time we use a small fix to avoid the incorrect file rename
attempts when altheader is zero and when typeheader is zero.","Hi @morrone, @baallan is this ready to go?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,655,2021-03-10T01:32:32Z,2021-03-17T23:30:38Z,2021-03-17T23:30:38Z,MERGED,True,10,12,2,https://github.com/morrone,store_csv: Repair constant file rename errors,2,[],https://github.com/ovis-hpc/ovis/pull/655,https://github.com/baallan,6,https://github.com/ovis-hpc/ovis/pull/655#issuecomment-797139185,"When altheader=0, the default setting for the store_csv store:
The store_csv code has a bug that results in chown/chmod error
messages every time a file is renamed. A sanitized version of
the error looks like:
DEBUG: store_csv: rename_output: rename(A, B)
ERROR: store_csv: rename_output: unable to chmod(A,660): No such file or directory.
ERROR: store_csv: rename_output: unable to chown(A, , : No such file or directory.
DEBUG: store_csv: rename_output: rename(A, B)
It appears that the second redundant rename of ""A"" to ""B"" succeeds, even
though the chmod and chown of ""A"" fail immediately before. However, this is
not the case. In fact only the first rename succeeds as we would expect, and
the error from the second rename is simply ignored. The code comment
explaining the ignored error says:
""enoent happens if altheader = 0 or typeheader = 0""
So it was recognized that the code was incorrect, but the error was ignored
rather than fixing the problem.
The issue seems to be that when altheader=0, the header is not a separate
file, but added as a comment in the main CSV file. However the code redundantly
fills in the same file name for the headerfile rather than recognizing this
fact.
This code has become a bit spaghettified over the years, and probably
needs an overhaul to make a fully clean fix.
In the mean time we use a small fix to avoid the incorrect file rename
attempts when altheader is zero and when typeheader is zero.",I owe running some tests based on Chris and my last comments. will try to get that done tomorrow.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,655,2021-03-10T01:32:32Z,2021-03-17T23:30:38Z,2021-03-17T23:30:38Z,MERGED,True,10,12,2,https://github.com/morrone,store_csv: Repair constant file rename errors,2,[],https://github.com/ovis-hpc/ovis/pull/655,https://github.com/baallan,7,https://github.com/ovis-hpc/ovis/pull/655#issuecomment-797791600,"When altheader=0, the default setting for the store_csv store:
The store_csv code has a bug that results in chown/chmod error
messages every time a file is renamed. A sanitized version of
the error looks like:
DEBUG: store_csv: rename_output: rename(A, B)
ERROR: store_csv: rename_output: unable to chmod(A,660): No such file or directory.
ERROR: store_csv: rename_output: unable to chown(A, , : No such file or directory.
DEBUG: store_csv: rename_output: rename(A, B)
It appears that the second redundant rename of ""A"" to ""B"" succeeds, even
though the chmod and chown of ""A"" fail immediately before. However, this is
not the case. In fact only the first rename succeeds as we would expect, and
the error from the second rename is simply ignored. The code comment
explaining the ignored error says:
""enoent happens if altheader = 0 or typeheader = 0""
So it was recognized that the code was incorrect, but the error was ignored
rather than fixing the problem.
The issue seems to be that when altheader=0, the header is not a separate
file, but added as a comment in the main CSV file. However the code redundantly
fills in the same file name for the headerfile rather than recognizing this
fact.
This code has become a bit spaghettified over the years, and probably
needs an overhaul to make a fully clean fix.
In the mean time we use a small fix to avoid the incorrect file rename
attempts when altheader is zero and when typeheader is zero.","@morrone the following additions to your patch make the logs quieter and the permissions better defaulted.
iff --git a/ldms/src/store/store_csv.c b/ldms/src/store/store_csv.c
index 6037df0..0fe6a75 100644
--- a/ldms/src/store/store_csv.c
+++ b/ldms/src/store/store_csv.c
@@ -790,14 +790,14 @@ static int print_header_from_store(struct csv_store_handle *s_handle, ld
 
        /* dump data types header, or whine and continue to other headers. */
        if (s_handle->typeheader > 0 && s_handle->typeheader <= TH_MAX) {
-               fp = fopen(s_handle->typefilename, ""w"");
+               fp = fopen_perm(s_handle->typefilename, ""w"", LDMSD_DEFAULT_FILE_PERM);
                if (!fp) {
                        int rc = errno;
                        PG.msglog(LDMSD_LERROR, PNAME "": print_header: %s ""
                                ""failed to open types file (%d).\n"",
                                s_handle->typefilename, rc);
                } else {
-                       ch_output(fp, tmp_path, CSHC(s_handle), &PG);
+                       ch_output(fp, s_handle->typefilename, CSHC(s_handle), &PG);
                        csv_format_types_common(s_handle->typeheader, fp, 
                                s_handle->typefilename, CCSHC(s_handle),
                                s_handle->udata, &PG, set,
diff --git a/ldms/src/store/store_csv_common.c b/ldms/src/store/store_csv_common.c
index d9890be..abb8851 100644
--- a/ldms/src/store/store_csv_common.c
+++ b/ldms/src/store/store_csv_common.c
@@ -913,8 +913,10 @@ void close_store_common(struct csv_store_handle_common *s_handle, struct 
        }
 
        rename_output(s_handle->filename, FTYPE_DATA, s_handle, cps);
-       rename_output(s_handle->headerfilename, FTYPE_HDR, s_handle, cps);
-       rename_output(s_handle->typefilename, FTYPE_KIND, s_handle, cps);
+       if (s_handle->altheader)
+               rename_output(s_handle->headerfilename, FTYPE_HDR, s_handle, cps);
+       if (s_handle->typeheader)
+               rename_output(s_handle->typefilename, FTYPE_KIND, s_handle, cps);
        replace_string(&(s_handle->filename), NULL);
        replace_string(&(s_handle->headerfilename),  NULL);
        replace_string(&(s_handle->typefilename),  NULL);",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,655,2021-03-10T01:32:32Z,2021-03-17T23:30:38Z,2021-03-17T23:30:38Z,MERGED,True,10,12,2,https://github.com/morrone,store_csv: Repair constant file rename errors,2,[],https://github.com/ovis-hpc/ovis/pull/655,https://github.com/morrone,8,https://github.com/ovis-hpc/ovis/pull/655#issuecomment-798870262,"When altheader=0, the default setting for the store_csv store:
The store_csv code has a bug that results in chown/chmod error
messages every time a file is renamed. A sanitized version of
the error looks like:
DEBUG: store_csv: rename_output: rename(A, B)
ERROR: store_csv: rename_output: unable to chmod(A,660): No such file or directory.
ERROR: store_csv: rename_output: unable to chown(A, , : No such file or directory.
DEBUG: store_csv: rename_output: rename(A, B)
It appears that the second redundant rename of ""A"" to ""B"" succeeds, even
though the chmod and chown of ""A"" fail immediately before. However, this is
not the case. In fact only the first rename succeeds as we would expect, and
the error from the second rename is simply ignored. The code comment
explaining the ignored error says:
""enoent happens if altheader = 0 or typeheader = 0""
So it was recognized that the code was incorrect, but the error was ignored
rather than fixing the problem.
The issue seems to be that when altheader=0, the header is not a separate
file, but added as a comment in the main CSV file. However the code redundantly
fills in the same file name for the headerfile rather than recognizing this
fact.
This code has become a bit spaghettified over the years, and probably
needs an overhaul to make a fully clean fix.
In the mean time we use a small fix to avoid the incorrect file rename
attempts when altheader is zero and when typeheader is zero.","@morrone the following additions to your patch make the logs quieter and the permissions better defaulted.

Feel free to submit a follow-on PR!",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,655,2021-03-10T01:32:32Z,2021-03-17T23:30:38Z,2021-03-17T23:30:38Z,MERGED,True,10,12,2,https://github.com/morrone,store_csv: Repair constant file rename errors,2,[],https://github.com/ovis-hpc/ovis/pull/655,https://github.com/baallan,9,https://github.com/ovis-hpc/ovis/pull/655#issuecomment-800672886,"When altheader=0, the default setting for the store_csv store:
The store_csv code has a bug that results in chown/chmod error
messages every time a file is renamed. A sanitized version of
the error looks like:
DEBUG: store_csv: rename_output: rename(A, B)
ERROR: store_csv: rename_output: unable to chmod(A,660): No such file or directory.
ERROR: store_csv: rename_output: unable to chown(A, , : No such file or directory.
DEBUG: store_csv: rename_output: rename(A, B)
It appears that the second redundant rename of ""A"" to ""B"" succeeds, even
though the chmod and chown of ""A"" fail immediately before. However, this is
not the case. In fact only the first rename succeeds as we would expect, and
the error from the second rename is simply ignored. The code comment
explaining the ignored error says:
""enoent happens if altheader = 0 or typeheader = 0""
So it was recognized that the code was incorrect, but the error was ignored
rather than fixing the problem.
The issue seems to be that when altheader=0, the header is not a separate
file, but added as a comment in the main CSV file. However the code redundantly
fills in the same file name for the headerfile rather than recognizing this
fact.
This code has become a bit spaghettified over the years, and probably
needs an overhaul to make a fully clean fix.
In the mean time we use a small fix to avoid the incorrect file rename
attempts when altheader is zero and when typeheader is zero.",@tom95858 This patch plus #664 quiets unnecessary file-related store_csv debug messages.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,655,2021-03-10T01:32:32Z,2021-03-17T23:30:38Z,2021-03-17T23:30:38Z,MERGED,True,10,12,2,https://github.com/morrone,store_csv: Repair constant file rename errors,2,[],https://github.com/ovis-hpc/ovis/pull/655,https://github.com/baallan,10,https://github.com/ovis-hpc/ovis/pull/655#issuecomment-801194619,"When altheader=0, the default setting for the store_csv store:
The store_csv code has a bug that results in chown/chmod error
messages every time a file is renamed. A sanitized version of
the error looks like:
DEBUG: store_csv: rename_output: rename(A, B)
ERROR: store_csv: rename_output: unable to chmod(A,660): No such file or directory.
ERROR: store_csv: rename_output: unable to chown(A, , : No such file or directory.
DEBUG: store_csv: rename_output: rename(A, B)
It appears that the second redundant rename of ""A"" to ""B"" succeeds, even
though the chmod and chown of ""A"" fail immediately before. However, this is
not the case. In fact only the first rename succeeds as we would expect, and
the error from the second rename is simply ignored. The code comment
explaining the ignored error says:
""enoent happens if altheader = 0 or typeheader = 0""
So it was recognized that the code was incorrect, but the error was ignored
rather than fixing the problem.
The issue seems to be that when altheader=0, the header is not a separate
file, but added as a comment in the main CSV file. However the code redundantly
fills in the same file name for the headerfile rather than recognizing this
fact.
This code has become a bit spaghettified over the years, and probably
needs an overhaul to make a fully clean fix.
In the mean time we use a small fix to avoid the incorrect file rename
attempts when altheader is zero and when typeheader is zero.","@tom95858 yes, this patch + 664 is ready to go as a pair.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,656,2021-03-10T17:09:20Z,2021-03-10T20:26:11Z,2021-03-10T20:26:11Z,MERGED,True,31,0,5,https://github.com/baallan,add test of csv store create-time uid/gid,1,[],https://github.com/ovis-hpc/ovis/pull/656,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/656,"In this test, files are born user 99 and closed with change to user 199.
This works on centos 7 local file systems.
It may have issues on some NFS implementations.
To run the test after a make install, chown privilege is needed.
The invocation is:
allowroot=1 ldms-static-test.sh uidgidcsv
The output should show something like an end of:
sleep 5 ...done
-rw-------. 1 nobody nobody 576 Mar 10 09:54 /scratch1/baallan/ann-ovis/ldmstest/uidgidcsv/store/node/uidgidcsv.1615395250
sleep 5 ...done
-rw-------. 1 199 nobody 2131 Mar 10 09:54 /scratch1/baallan/ann-ovis/ldmstest/uidgidcsv/store/clemens-c7/uidgidcsv.1615395250
sleep 1 ...done
logs and data stored under /scratch1/baallan/ann-ovis/ldmstest/uidgidcsv
done","In this test, files are born user 99 and closed with change to user 199.
This works on centos 7 local file systems.
It may have issues on some NFS implementations.
To run the test after a make install, chown privilege is needed.
The invocation is:
allowroot=1 ldms-static-test.sh uidgidcsv
The output should show something like an end of:
sleep 5 ...done
-rw-------. 1 nobody nobody 576 Mar 10 09:54 /scratch1/baallan/ann-ovis/ldmstest/uidgidcsv/store/node/uidgidcsv.1615395250
sleep 5 ...done
-rw-------. 1 199 nobody 2131 Mar 10 09:54 /scratch1/baallan/ann-ovis/ldmstest/uidgidcsv/store/clemens-c7/uidgidcsv.1615395250
sleep 1 ...done
logs and data stored under /scratch1/baallan/ann-ovis/ldmstest/uidgidcsv
done",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,656,2021-03-10T17:09:20Z,2021-03-10T20:26:11Z,2021-03-10T20:26:11Z,MERGED,True,31,0,5,https://github.com/baallan,add test of csv store create-time uid/gid,1,[],https://github.com/ovis-hpc/ovis/pull/656,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/656#issuecomment-795764868,"In this test, files are born user 99 and closed with change to user 199.
This works on centos 7 local file systems.
It may have issues on some NFS implementations.
To run the test after a make install, chown privilege is needed.
The invocation is:
allowroot=1 ldms-static-test.sh uidgidcsv
The output should show something like an end of:
sleep 5 ...done
-rw-------. 1 nobody nobody 576 Mar 10 09:54 /scratch1/baallan/ann-ovis/ldmstest/uidgidcsv/store/node/uidgidcsv.1615395250
sleep 5 ...done
-rw-------. 1 199 nobody 2131 Mar 10 09:54 /scratch1/baallan/ann-ovis/ldmstest/uidgidcsv/store/clemens-c7/uidgidcsv.1615395250
sleep 1 ...done
logs and data stored under /scratch1/baallan/ann-ovis/ldmstest/uidgidcsv
done","@valleydlr This test should always work as described on a local spinny/nvme or RAM (/dev/shm) file system and (afaik) lustre. If it fails on a particular nfs implementation,  we should note that in our man pages.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,658,2021-03-11T04:04:47Z,2021-03-11T16:47:29Z,2022-01-18T04:09:00Z,MERGED,True,1,2,1,https://github.com/nichamon,Fix ldmsctl to provide the correct msg length to response handlers,1,[],https://github.com/ovis-hpc/ovis/pull/658,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/658,"The patch (5195ba3) that unifies the code to gather records into a whole
LDMSD message introduced the bug. The patch does not set the value of
the msglen variable in the __handle_cmd(). Resulting in __handle_cmd
always pass 0 as the response message length. The response handlers of
the status commands, e.g., prdcr_status, updtr_status, and
daemon_status, use the value provided by the __handle_cmd() when they
parse the string into a JSON object.","The patch (5195ba3) that unifies the code to gather records into a whole
LDMSD message introduced the bug. The patch does not set the value of
the msglen variable in the __handle_cmd(). Resulting in __handle_cmd
always pass 0 as the response message length. The response handlers of
the status commands, e.g., prdcr_status, updtr_status, and
daemon_status, use the value provided by the __handle_cmd() when they
parse the string into a JSON object.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,658,2021-03-11T04:04:47Z,2021-03-11T16:47:29Z,2022-01-18T04:09:00Z,MERGED,True,1,2,1,https://github.com/nichamon,Fix ldmsctl to provide the correct msg length to response handlers,1,[],https://github.com/ovis-hpc/ovis/pull/658,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/658#issuecomment-796432733,"The patch (5195ba3) that unifies the code to gather records into a whole
LDMSD message introduced the bug. The patch does not set the value of
the msglen variable in the __handle_cmd(). Resulting in __handle_cmd
always pass 0 as the response message length. The response handlers of
the status commands, e.g., prdcr_status, updtr_status, and
daemon_status, use the value provided by the __handle_cmd() when they
parse the string into a JSON object.",Ultimately I would like to get rid of the len argument in the cmd->resp definition and change all response handlers to pass attr->attr_len to json_parse_buffer() instead of len. I didn't do this in the patch to make the patch as small as possible.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,658,2021-03-11T04:04:47Z,2021-03-11T16:47:29Z,2022-01-18T04:09:00Z,MERGED,True,1,2,1,https://github.com/nichamon,Fix ldmsctl to provide the correct msg length to response handlers,1,[],https://github.com/ovis-hpc/ovis/pull/658,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/658#issuecomment-796488287,"The patch (5195ba3) that unifies the code to gather records into a whole
LDMSD message introduced the bug. The patch does not set the value of
the msglen variable in the __handle_cmd(). Resulting in __handle_cmd
always pass 0 as the response message length. The response handlers of
the status commands, e.g., prdcr_status, updtr_status, and
daemon_status, use the value provided by the __handle_cmd() when they
parse the string into a JSON object.","@tom95858 We should merge this patch; otherwise, prdcr_stauts, updtr_status, #_status in ldmsctl won't work.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,659,2021-03-11T06:32:04Z,2021-03-11T20:44:42Z,2021-03-11T20:44:42Z,MERGED,True,211,20,2,https://github.com/narategithub,"Revert ""Remove set_info from ldms_lookup message""",1,[],https://github.com/ovis-hpc/ovis/pull/659,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/659,This reverts commit d456597.,This reverts commit d456597.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,659,2021-03-11T06:32:04Z,2021-03-11T20:44:42Z,2021-03-11T20:44:42Z,MERGED,True,211,20,2,https://github.com/narategithub,"Revert ""Remove set_info from ldms_lookup message""",1,[],https://github.com/ovis-hpc/ovis/pull/659,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/659#issuecomment-796503938,This reverts commit d456597.,"@tom95858,
I just found out that setgroup has been broken from setgroup_test in ldms-test repo. With help from @nichamon, we identified that the removal of lookup set_info from d456597 was the culprit. We also confirmed that the set_info won't be set correctly on the aggregator because the set was not yet created when agg received dir_reply, and when the set was created in the lookup path the set_info was not available to set anymore. Hence, the group set on the aggregator won't have member information from the sampler. Given the time constrain, we think that reverting the commit is the best action.
With #658 and this pull request, all test cases in ldms-test succeeded.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,659,2021-03-11T06:32:04Z,2021-03-11T20:44:42Z,2021-03-11T20:44:42Z,MERGED,True,211,20,2,https://github.com/narategithub,"Revert ""Remove set_info from ldms_lookup message""",1,[],https://github.com/ovis-hpc/ovis/pull/659,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/659#issuecomment-796511401,This reverts commit d456597.,"Without this PR, the LDMS sets on aggregators  won't have any remote set_info until there is a dir_upd that updates remote set_info. This won't affect the auto_update feature because it uses only the hint info in the dir_reply. However, ldmsd group gets the set member list by calling ldms_set_set_info_get().",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,660,2021-03-11T17:56:00Z,2021-03-11T18:01:48Z,2021-03-11T18:01:52Z,MERGED,True,4,0,1,https://github.com/tom95858,Make the delete_proc thread cancellable,1,[],https://github.com/ovis-hpc/ovis/pull/660,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/660,"A streams plugin that is dlclose'd can crash if the
thread is blocked in sleep when the dlclose occurs.","A streams plugin that is dlclose'd can crash if the
thread is blocked in sleep when the dlclose occurs.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,661,2021-03-11T21:23:56Z,2021-03-11T23:09:46Z,2022-01-18T04:08:57Z,MERGED,True,41,48,1,https://github.com/nichamon,Update the daemon_status response handler in ldmsctl,1,[],https://github.com/ovis-hpc/ovis/pull/661,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/661,"The result of the daemon_status command has included the thread
statistics, but the daemon_status response handler in ldmsctl does not
handle the thread statistics. This change makes the handler print the
thread statistics.","The result of the daemon_status command has included the thread
statistics, but the daemon_status response handler in ldmsctl does not
handle the thread statistics. This change makes the handler print the
thread statistics.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,662,2021-03-12T04:56:18Z,2021-03-12T19:30:27Z,2021-03-12T19:30:27Z,MERGED,True,23,13,1,https://github.com/narategithub,ldmsd_stream_subscribe listen on a specific address,1,[],https://github.com/ovis-hpc/ovis/pull/662,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/662,"Add -h <host> option to ldmsd_stream_subscribe so that it can
listen to a specific address. This is useful for fabric transport.","Add -h <host> option to ldmsd_stream_subscribe so that it can
listen to a specific address. This is useful for fabric transport.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,663,2021-03-13T00:57:02Z,2021-03-15T17:51:51Z,2021-03-15T18:06:56Z,MERGED,True,2,0,1,https://github.com/baallan,add needed set swaps for tx2mon sample().,1,[],https://github.com/ovis-hpc/ovis/pull/663,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/663,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,663,2021-03-13T00:57:02Z,2021-03-15T17:51:51Z,2021-03-15T18:06:56Z,MERGED,True,2,0,1,https://github.com/baallan,add needed set swaps for tx2mon sample().,1,[],https://github.com/ovis-hpc/ovis/pull/663,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/663#issuecomment-797838215,,"@Snell1224 additional testing revealed that data sets weren't being marked with updated timestamps in sample() after initial population, even though the actual data was being updated. This should fix that.
@tom95858 can you add Snell1224 to the project so she appears as a possible reviewer going forward?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,663,2021-03-13T00:57:02Z,2021-03-15T17:51:51Z,2021-03-15T18:06:56Z,MERGED,True,2,0,1,https://github.com/baallan,add needed set swaps for tx2mon sample().,1,[],https://github.com/ovis-hpc/ovis/pull/663,https://github.com/Snell1224,3,https://github.com/ovis-hpc/ovis/pull/663#issuecomment-799632657,,@baallan @tom95858 Tested with make check/install and ldms-static-test.sh. Worked as expected.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,664,2021-03-15T20:56:34Z,2021-03-17T23:27:59Z,2021-03-17T23:27:59Z,MERGED,True,36,8,6,https://github.com/baallan,csv: fix typeheader create perms and extra close messages,2,[],https://github.com/ovis-hpc/ovis/pull/664,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/664,this extends to close the improvement from #655 and fixes the related perms on the typeheader file.,this extends to close the improvement from #655 and fixes the related perms on the typeheader file.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,665,2021-03-15T21:23:02Z,2021-03-16T21:36:30Z,2021-03-16T21:36:30Z,CLOSED,False,126,242,1,https://github.com/baallan,fixes #657 which includes per message memory leaks,1,[],https://github.com/ovis-hpc/ovis/pull/665,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/665,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,665,2021-03-15T21:23:02Z,2021-03-16T21:36:30Z,2021-03-16T21:36:30Z,CLOSED,False,126,242,1,https://github.com/baallan,fixes #657 which includes per message memory leaks,1,[],https://github.com/ovis-hpc/ovis/pull/665,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/665#issuecomment-800622508,,"Never mind, I'll fix it.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,666,2021-03-16T19:42:10Z,2021-04-08T15:05:17Z,2021-04-08T15:05:17Z,MERGED,True,3440,0,29,https://github.com/morrone,Upstream sampler plugins from ldms-plugins-llnl,5,[],https://github.com/ovis-hpc/ovis/pull/666,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/666,"This is a PR to upstream four plugins from the ldms-plugins-llnl project. They are: dcgm (Nvidia GPU monitoring), lustre_client, lustre_ost, and lustre_mdt.","This is a PR to upstream four plugins from the ldms-plugins-llnl project. They are: dcgm (Nvidia GPU monitoring), lustre_client, lustre_ost, and lustre_mdt.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,666,2021-03-16T19:42:10Z,2021-04-08T15:05:17Z,2021-04-08T15:05:17Z,MERGED,True,3440,0,29,https://github.com/morrone,Upstream sampler plugins from ldms-plugins-llnl,5,[],https://github.com/ovis-hpc/ovis/pull/666,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/666#issuecomment-801440205,"This is a PR to upstream four plugins from the ldms-plugins-llnl project. They are: dcgm (Nvidia GPU monitoring), lustre_client, lustre_ost, and lustre_mdt.","Hi @morrone, this looks great. I will attempt to do a thorough review here shortly. Right off the top, could you please edit the top level LICENSE file and add the license/keys to which your header file comments refer.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,666,2021-03-16T19:42:10Z,2021-04-08T15:05:17Z,2021-04-08T15:05:17Z,MERGED,True,3440,0,29,https://github.com/morrone,Upstream sampler plugins from ldms-plugins-llnl,5,[],https://github.com/ovis-hpc/ovis/pull/666,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/666#issuecomment-801483094,"This is a PR to upstream four plugins from the ldms-plugins-llnl project. They are: dcgm (Nvidia GPU monitoring), lustre_client, lustre_ost, and lustre_mdt.","Hi @morrone, this looks great. I will attempt to do a thorough review here shortly. Right off the top, could you please edit the top level LICENSE file and add the license/keys to which your header file comments refer.

The top level LICENSE file already contains the licenses to which my headers refer, which is why I am referring to that. I purposely choose licensing that matched ovis's licensing. Although I do now notice a couple of issues: The top level LICENSE file refers to a file ""COPYING"" as containing the GPLv2, but that is missing at the top level. And frankly, LICENSE should probably be called COPYING since everything refers to that file. We wouldn't want to have conflicting LICENSE and COPYING files (one that says dual-licensing, and the other just containing the GPLv2). I think I'll submit a PR to clean up that situation. And then I can update this PR to reflect that if it looks good.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,666,2021-03-16T19:42:10Z,2021-04-08T15:05:17Z,2021-04-08T15:05:17Z,MERGED,True,3440,0,29,https://github.com/morrone,Upstream sampler plugins from ldms-plugins-llnl,5,[],https://github.com/ovis-hpc/ovis/pull/666,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/666#issuecomment-801490608,"This is a PR to upstream four plugins from the ldms-plugins-llnl project. They are: dcgm (Nvidia GPU monitoring), lustre_client, lustre_ost, and lustre_mdt.","@valleydlr a subtle difference from the old wide format lustre samplers is these new ones don't provide the local rate computation on read/write bytes, which was found to be handy at snl and ncsa, but might be considered redundant with a robust analysis pipeline.
If precomputed rates are a must have, we'll need to make a subsequent feature request; I wouldn't hold up merging this for it.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,666,2021-03-16T19:42:10Z,2021-04-08T15:05:17Z,2021-04-08T15:05:17Z,MERGED,True,3440,0,29,https://github.com/morrone,Upstream sampler plugins from ldms-plugins-llnl,5,[],https://github.com/ovis-hpc/ovis/pull/666,https://github.com/morrone,5,https://github.com/ovis-hpc/ovis/pull/666#issuecomment-801494291,"This is a PR to upstream four plugins from the ldms-plugins-llnl project. They are: dcgm (Nvidia GPU monitoring), lustre_client, lustre_ost, and lustre_mdt.","There are more than subtle differences too. These are not reworkings of the existing plugins, they are completely new ones. So anyone considering them should consider all of the differences.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,666,2021-03-16T19:42:10Z,2021-04-08T15:05:17Z,2021-04-08T15:05:17Z,MERGED,True,3440,0,29,https://github.com/morrone,Upstream sampler plugins from ldms-plugins-llnl,5,[],https://github.com/ovis-hpc/ovis/pull/666,https://github.com/morrone,6,https://github.com/ovis-hpc/ovis/pull/666#issuecomment-801504777,"This is a PR to upstream four plugins from the ldms-plugins-llnl project. They are: dcgm (Nvidia GPU monitoring), lustre_client, lustre_ost, and lustre_mdt.",I updated the copyright comments on the assumption that #669 will land too.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,666,2021-03-16T19:42:10Z,2021-04-08T15:05:17Z,2021-04-08T15:05:17Z,MERGED,True,3440,0,29,https://github.com/morrone,Upstream sampler plugins from ldms-plugins-llnl,5,[],https://github.com/ovis-hpc/ovis/pull/666,https://github.com/baallan,7,https://github.com/ovis-hpc/ovis/pull/666#issuecomment-802025020,"This is a PR to upstream four plugins from the ldms-plugins-llnl project. They are: dcgm (Nvidia GPU monitoring), lustre_client, lustre_ost, and lustre_mdt.",I believe at some point we deliberately took away 'copying' and several other typical files  at the top level. At present they seem to live under lib/ and ldms/. I don't recall the rationale for most of that.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,667,2021-03-16T23:09:38Z,2021-04-13T20:10:56Z,2021-04-13T20:10:56Z,MERGED,True,71,52,22,https://github.com/baallan,Adding/documenting free() semantics for various object free functions.,2,[],https://github.com/ovis-hpc/ovis/pull/667,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/667,"For headered functions with names containing _free, this patch documents
and in some cases adds, the key semantics of free():
do nothing if given a NULL pointer
release resources if given a valid pointer.
Why?

This allows us to stop using syntax of the sort: if (x) free_operator(x), making for easier to read and write code.
This prevents data-corrupting random walks through memory that start by
dereferencing a NULL argument in destructor code.

Special cases:

where assert is in use, assertions are checked after the NULL check,","For headered functions with names containing _free, this patch documents
and in some cases adds, the key semantics of free():
do nothing if given a NULL pointer
release resources if given a valid pointer.
Why?

This allows us to stop using syntax of the sort: if (x) free_operator(x), making for easier to read and write code.
This prevents data-corrupting random walks through memory that start by
dereferencing a NULL argument in destructor code.

Special cases:

where assert is in use, assertions are checked after the NULL check,",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,667,2021-03-16T23:09:38Z,2021-04-13T20:10:56Z,2021-04-13T20:10:56Z,MERGED,True,71,52,22,https://github.com/baallan,Adding/documenting free() semantics for various object free functions.,2,[],https://github.com/ovis-hpc/ovis/pull/667,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/667#issuecomment-815955425,"For headered functions with names containing _free, this patch documents
and in some cases adds, the key semantics of free():
do nothing if given a NULL pointer
release resources if given a valid pointer.
Why?

This allows us to stop using syntax of the sort: if (x) free_operator(x), making for easier to read and write code.
This prevents data-corrupting random walks through memory that start by
dereferencing a NULL argument in destructor code.

Special cases:

where assert is in use, assertions are checked after the NULL check,",Re removing assertions: some of them are checking api behavior/use contracts that I am not in a good position to say no longer need checking. The additional null checks should (where added) keep us from entering the realm of undefined behaviors when compiled with -DNDEBUG.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,667,2021-03-16T23:09:38Z,2021-04-13T20:10:56Z,2021-04-13T20:10:56Z,MERGED,True,71,52,22,https://github.com/baallan,Adding/documenting free() semantics for various object free functions.,2,[],https://github.com/ovis-hpc/ovis/pull/667,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/667#issuecomment-818074757,"For headered functions with names containing _free, this patch documents
and in some cases adds, the key semantics of free():
do nothing if given a NULL pointer
release resources if given a valid pointer.
Why?

This allows us to stop using syntax of the sort: if (x) free_operator(x), making for easier to read and write code.
This prevents data-corrupting random walks through memory that start by
dereferencing a NULL argument in destructor code.

Special cases:

where assert is in use, assertions are checked after the NULL check,",@tom95858 I believe i've fixed the things you requested. I rebased on ovis-4 as well.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,667,2021-03-16T23:09:38Z,2021-04-13T20:10:56Z,2021-04-13T20:10:56Z,MERGED,True,71,52,22,https://github.com/baallan,Adding/documenting free() semantics for various object free functions.,2,[],https://github.com/ovis-hpc/ovis/pull/667,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/667#issuecomment-818246563,"For headered functions with names containing _free, this patch documents
and in some cases adds, the key semantics of free():
do nothing if given a NULL pointer
release resources if given a valid pointer.
Why?

This allows us to stop using syntax of the sort: if (x) free_operator(x), making for easier to read and write code.
This prevents data-corrupting random walks through memory that start by
dereferencing a NULL argument in destructor code.

Special cases:

where assert is in use, assertions are checked after the NULL check,","@tom95858 I did those, and also a few unadorned assert(0) expanded to include a clue string in the same files.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,667,2021-03-16T23:09:38Z,2021-04-13T20:10:56Z,2021-04-13T20:10:56Z,MERGED,True,71,52,22,https://github.com/baallan,Adding/documenting free() semantics for various object free functions.,2,[],https://github.com/ovis-hpc/ovis/pull/667,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/667#issuecomment-818516665,"For headered functions with names containing _free, this patch documents
and in some cases adds, the key semantics of free():
do nothing if given a NULL pointer
release resources if given a valid pointer.
Why?

This allows us to stop using syntax of the sort: if (x) free_operator(x), making for easier to read and write code.
This prevents data-corrupting random walks through memory that start by
dereferencing a NULL argument in destructor code.

Special cases:

where assert is in use, assertions are checked after the NULL check,","Hi @baallan, where are we on this? I'd like to get it merged.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,667,2021-03-16T23:09:38Z,2021-04-13T20:10:56Z,2021-04-13T20:10:56Z,MERGED,True,71,52,22,https://github.com/baallan,Adding/documenting free() semantics for various object free functions.,2,[],https://github.com/ovis-hpc/ovis/pull/667,https://github.com/baallan,6,https://github.com/ovis-hpc/ovis/pull/667#issuecomment-818769166,"For headered functions with names containing _free, this patch documents
and in some cases adds, the key semantics of free():
do nothing if given a NULL pointer
release resources if given a valid pointer.
Why?

This allows us to stop using syntax of the sort: if (x) free_operator(x), making for easier to read and write code.
This prevents data-corrupting random walks through memory that start by
dereferencing a NULL argument in destructor code.

Special cases:

where assert is in use, assertions are checked after the NULL check,",its ready; fixed what you requested yesterday.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,668,2021-03-17T02:36:34Z,2021-12-06T16:31:11Z,2021-12-06T16:31:11Z,CLOSED,False,38,103,3,https://github.com/morrone,Configure simplification,2,[],https://github.com/ovis-hpc/ovis/pull/668,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/668,"OVIS_INCLUDE_ABS and OVIS_LIB_ABS are autoconf variables used
throughout many Makefile.am files in the tree. However, as it
stands it is less than easy to figureout how and where those
variables are set. One needs to make some educated guesses
and search the code to figure out that they are constructed
by the OPTION_LIB_FLAGS and OPTION_INCLUDE_FLAGS macros.
In practice these macros do more to obfuscate the code than to
improve it. Also, there is no reuse of these macros, so that
is not a good reason to make these macros.
Additionally, the macros set far more include paths than it
really should be.
We turn the OVIS_INCLUDE_ABS and OVIS_LIB_ABS variables into
simple lists.
This may be a first step in trying to fix ovis's header issues.","OVIS_INCLUDE_ABS and OVIS_LIB_ABS are autoconf variables used
throughout many Makefile.am files in the tree. However, as it
stands it is less than easy to figureout how and where those
variables are set. One needs to make some educated guesses
and search the code to figure out that they are constructed
by the OPTION_LIB_FLAGS and OPTION_INCLUDE_FLAGS macros.
In practice these macros do more to obfuscate the code than to
improve it. Also, there is no reuse of these macros, so that
is not a good reason to make these macros.
Additionally, the macros set far more include paths than it
really should be.
We turn the OVIS_INCLUDE_ABS and OVIS_LIB_ABS variables into
simple lists.
This may be a first step in trying to fix ovis's header issues.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,668,2021-03-17T02:36:34Z,2021-12-06T16:31:11Z,2021-12-06T16:31:11Z,CLOSED,False,38,103,3,https://github.com/morrone,Configure simplification,2,[],https://github.com/ovis-hpc/ovis/pull/668,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/668#issuecomment-801190833,"OVIS_INCLUDE_ABS and OVIS_LIB_ABS are autoconf variables used
throughout many Makefile.am files in the tree. However, as it
stands it is less than easy to figureout how and where those
variables are set. One needs to make some educated guesses
and search the code to figure out that they are constructed
by the OPTION_LIB_FLAGS and OPTION_INCLUDE_FLAGS macros.
In practice these macros do more to obfuscate the code than to
improve it. Also, there is no reuse of these macros, so that
is not a good reason to make these macros.
Additionally, the macros set far more include paths than it
really should be.
We turn the OVIS_INCLUDE_ABS and OVIS_LIB_ABS variables into
simple lists.
This may be a first step in trying to fix ovis's header issues.","I disagree with all the justifications of this proposed change:

it is less than easy to figure out how and where those variables are set.

It's all set in configure.ac, as with every autotools project.
A more reasonable approach to solving this aspect is to place a comment in configure.ac adjacent to the macro calls that says ""compute OVIS_INCLUDE_ABS"" etc.

In practice these macros do more to obfuscate the code than to improve it.

No, the 'knowledge added' is in the directory list, not in the expansion by wrapping every list element in the baroque libtoolisms/cppisms.

Also, there is no reuse of these macros, so that is not a good reason to make these macros.

Reuse is not a primary goal in configure scripts. Maintainability is. The core information to be maintained in this case is the list of directories that matter, not the current gnu option syntax provided by the macro expansion. m4 macros in configure.ac function as 'includes' very often in many projects.

Additionally, the macros set far more include paths than it really should be.

If we have truly dead code directories, then the correct solution is remove them from the list.

We turn the OVIS_INCLUDE_ABS and OVIS_LIB_ABS variables into simple lists.

The proposed lists are not simpler than the lists you are replacing.

This may be a first step in trying to fix ovis's header issues.

This patch is a no-op in trying to fix ovis' header issues.
Please open (or expand on) an actual issue so we can discuss and get to a solution. Maybe something along the lines of:

topic: LDMS source include statements and header locations need refactoring to make builds easier to specify
comment: Both ldms build before install and third party build after install should function correctly with use of single include option -I$ovis_include_dir.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,668,2021-03-17T02:36:34Z,2021-12-06T16:31:11Z,2021-12-06T16:31:11Z,CLOSED,False,38,103,3,https://github.com/morrone,Configure simplification,2,[],https://github.com/ovis-hpc/ovis/pull/668,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/668#issuecomment-801318564,"OVIS_INCLUDE_ABS and OVIS_LIB_ABS are autoconf variables used
throughout many Makefile.am files in the tree. However, as it
stands it is less than easy to figureout how and where those
variables are set. One needs to make some educated guesses
and search the code to figure out that they are constructed
by the OPTION_LIB_FLAGS and OPTION_INCLUDE_FLAGS macros.
In practice these macros do more to obfuscate the code than to
improve it. Also, there is no reuse of these macros, so that
is not a good reason to make these macros.
Additionally, the macros set far more include paths than it
really should be.
We turn the OVIS_INCLUDE_ABS and OVIS_LIB_ABS variables into
simple lists.
This may be a first step in trying to fix ovis's header issues.","This patch is not a no-op. This patch literally halves the number variables we are setting, and in the case of the includes further halves the number of -I values that appear on the command line.
Did you miss that? Why did you miss that? Is it perhaps because the current system obscures what is really going on?
It looks like since we are obscuring what is going on, people just keep adding directories to the list rather than figuring out a scheme for managing the header files. This patch airs our dirty laundry. It is a first step in figuring out what to clean up.
And in the case of libraries, why is any of this even being done? By moving this out of the function, we have this staring us in the face. and will be reminded that we need to take a look at it. I imagine there was some rationale behind always adding an rpath link to the .libs directories (ignoring the (--disable-rpath configure option, by the way). Maybe it has something to do with running in-tree? But I have a suspicion that this is not the normal way to accomplish whatever it is that was trying to accomplish.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,668,2021-03-17T02:36:34Z,2021-12-06T16:31:11Z,2021-12-06T16:31:11Z,CLOSED,False,38,103,3,https://github.com/morrone,Configure simplification,2,[],https://github.com/ovis-hpc/ovis/pull/668,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/668#issuecomment-801330388,"OVIS_INCLUDE_ABS and OVIS_LIB_ABS are autoconf variables used
throughout many Makefile.am files in the tree. However, as it
stands it is less than easy to figureout how and where those
variables are set. One needs to make some educated guesses
and search the code to figure out that they are constructed
by the OPTION_LIB_FLAGS and OPTION_INCLUDE_FLAGS macros.
In practice these macros do more to obfuscate the code than to
improve it. Also, there is no reuse of these macros, so that
is not a good reason to make these macros.
Additionally, the macros set far more include paths than it
really should be.
We turn the OVIS_INCLUDE_ABS and OVIS_LIB_ABS variables into
simple lists.
This may be a first step in trying to fix ovis's header issues.","@morrone halving a long list which is normally unseen (unless you're in the habit of 'make V=1')  isn't progress. That's why I don't make a note of it here. Unrolling a loop of m4 output with light pruning into configure.ac that we hardly ever look at isn't going to provoke anyone to do anything.
Proposing something which would eliminate the need for more than one -I would be progress.
We need the dirty laundry you refer to burned, not aired.
Re libtoolisms-- yeah, that's a correctness thing Narate discovered. We also need to be very careful that omission of something doesn't leave us pulling a library or header from system locations at build or run time or install. Of course things run in the build tree: that's what 'make check' does.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,668,2021-03-17T02:36:34Z,2021-12-06T16:31:11Z,2021-12-06T16:31:11Z,CLOSED,False,38,103,3,https://github.com/morrone,Configure simplification,2,[],https://github.com/ovis-hpc/ovis/pull/668,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/668#issuecomment-813527874,"OVIS_INCLUDE_ABS and OVIS_LIB_ABS are autoconf variables used
throughout many Makefile.am files in the tree. However, as it
stands it is less than easy to figureout how and where those
variables are set. One needs to make some educated guesses
and search the code to figure out that they are constructed
by the OPTION_LIB_FLAGS and OPTION_INCLUDE_FLAGS macros.
In practice these macros do more to obfuscate the code than to
improve it. Also, there is no reuse of these macros, so that
is not a good reason to make these macros.
Additionally, the macros set far more include paths than it
really should be.
We turn the OVIS_INCLUDE_ABS and OVIS_LIB_ABS variables into
simple lists.
This may be a first step in trying to fix ovis's header issues.","@morrone, @baallan Did this git resolved?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,668,2021-03-17T02:36:34Z,2021-12-06T16:31:11Z,2021-12-06T16:31:11Z,CLOSED,False,38,103,3,https://github.com/morrone,Configure simplification,2,[],https://github.com/ovis-hpc/ovis/pull/668,https://github.com/baallan,6,https://github.com/ovis-hpc/ovis/pull/668#issuecomment-813533861,"OVIS_INCLUDE_ABS and OVIS_LIB_ABS are autoconf variables used
throughout many Makefile.am files in the tree. However, as it
stands it is less than easy to figureout how and where those
variables are set. One needs to make some educated guesses
and search the code to figure out that they are constructed
by the OPTION_LIB_FLAGS and OPTION_INCLUDE_FLAGS macros.
In practice these macros do more to obfuscate the code than to
improve it. Also, there is no reuse of these macros, so that
is not a good reason to make these macros.
Additionally, the macros set far more include paths than it
really should be.
We turn the OVIS_INCLUDE_ABS and OVIS_LIB_ABS variables into
simple lists.
This may be a first step in trying to fix ovis's header issues.","@tom95858 I think it's fair to say that Chris and I are still fully opposed on this specific patch. We seem to be agreed that the real underlying problem is hyperdecomposed header and library locations and/or include statement styles which prevent us from achieving build with a simple
-I$ldms_include_dir -L$ldms_libdir",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,668,2021-03-17T02:36:34Z,2021-12-06T16:31:11Z,2021-12-06T16:31:11Z,CLOSED,False,38,103,3,https://github.com/morrone,Configure simplification,2,[],https://github.com/ovis-hpc/ovis/pull/668,https://github.com/tom95858,7,https://github.com/ovis-hpc/ovis/pull/668#issuecomment-818517973,"OVIS_INCLUDE_ABS and OVIS_LIB_ABS are autoconf variables used
throughout many Makefile.am files in the tree. However, as it
stands it is less than easy to figureout how and where those
variables are set. One needs to make some educated guesses
and search the code to figure out that they are constructed
by the OPTION_LIB_FLAGS and OPTION_INCLUDE_FLAGS macros.
In practice these macros do more to obfuscate the code than to
improve it. Also, there is no reuse of these macros, so that
is not a good reason to make these macros.
Additionally, the macros set far more include paths than it
really should be.
We turn the OVIS_INCLUDE_ABS and OVIS_LIB_ABS variables into
simple lists.
This may be a first step in trying to fix ovis's header issues.","@baallan, @morrone, do either of you have suggestions for combining libraries and/or headers into a smaller number of larger name spaces?
Note that the interfaces in libc are defined in many different header files. This is largely historical, but true nonetheless. Does it make sense to combine ovis/lib into a single thing ala libc?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,668,2021-03-17T02:36:34Z,2021-12-06T16:31:11Z,2021-12-06T16:31:11Z,CLOSED,False,38,103,3,https://github.com/morrone,Configure simplification,2,[],https://github.com/ovis-hpc/ovis/pull/668,https://github.com/baallan,8,https://github.com/ovis-hpc/ovis/pull/668#issuecomment-818784950,"OVIS_INCLUDE_ABS and OVIS_LIB_ABS are autoconf variables used
throughout many Makefile.am files in the tree. However, as it
stands it is less than easy to figureout how and where those
variables are set. One needs to make some educated guesses
and search the code to figure out that they are constructed
by the OPTION_LIB_FLAGS and OPTION_INCLUDE_FLAGS macros.
In practice these macros do more to obfuscate the code than to
improve it. Also, there is no reuse of these macros, so that
is not a good reason to make these macros.
Additionally, the macros set far more include paths than it
really should be.
We turn the OVIS_INCLUDE_ABS and OVIS_LIB_ABS variables into
simple lists.
This may be a first step in trying to fix ovis's header issues.","I would start by picking what we want our includes to look like in third party code (and work it so that we use the same #includes in ours). I propose (@morrone may have a better suggestion) (because I'm a little phobic about giant header directories)
-I$prefix/include
#include ""ldms/zap/thing1.h""
#include ""ldms/util/thing2.h""
#include ""ldms/ldmsd/ldmsd.h""

reducing lib/* to lib/zap, lib/third, and lib/util (all the other subdirss go to util) and then move subdirs zap, third, and ovis_util into ovis/ldms/src and get rid of ovis/lib entirely.
Another alternative is to jump in with both feet on the  $top/[src,include,] organization and have a single include directory for everything except plugins and plugin-type-specific apis. I've always hated the idea that x.h lives in a different directory than x.c, but I think I'm getting over it.
so
#include ""ldms/ldmsd.h""
#include ""ldms/store-api.h""
#include ""ldms/csv_plugins_util/format.h""",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,668,2021-03-17T02:36:34Z,2021-12-06T16:31:11Z,2021-12-06T16:31:11Z,CLOSED,False,38,103,3,https://github.com/morrone,Configure simplification,2,[],https://github.com/ovis-hpc/ovis/pull/668,https://github.com/baallan,9,https://github.com/ovis-hpc/ovis/pull/668#issuecomment-818786734,"OVIS_INCLUDE_ABS and OVIS_LIB_ABS are autoconf variables used
throughout many Makefile.am files in the tree. However, as it
stands it is less than easy to figureout how and where those
variables are set. One needs to make some educated guesses
and search the code to figure out that they are constructed
by the OPTION_LIB_FLAGS and OPTION_INCLUDE_FLAGS macros.
In practice these macros do more to obfuscate the code than to
improve it. Also, there is no reuse of these macros, so that
is not a good reason to make these macros.
Additionally, the macros set far more include paths than it
really should be.
We turn the OVIS_INCLUDE_ABS and OVIS_LIB_ABS variables into
simple lists.
This may be a first step in trying to fix ovis's header issues.","A thing that worries me (unrelated to dir layout), however, is we presently have the same symbols being defined in ldms,lib and sos implementations (e.g. rbt).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,669,2021-03-17T22:36:53Z,2021-03-19T17:40:03Z,2021-03-19T17:40:03Z,MERGED,True,3,346,6,https://github.com/morrone,Add missing COPYING file at top level,1,[],https://github.com/ovis-hpc/ovis/pull/669,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/669,"This update renames the LICENSE to COPYING, because most of the
code refers to a ""COPYING"" file at the top level. This way
COPYING will now correctly state the dual-license nature of
ovis's licensing. The COPYING file refers to a the gpl v2
in a file named ""gpl-2.0.txt"" at the top level for further
clarity.","This update renames the LICENSE to COPYING, because most of the
code refers to a ""COPYING"" file at the top level. This way
COPYING will now correctly state the dual-license nature of
ovis's licensing. The COPYING file refers to a the gpl v2
in a file named ""gpl-2.0.txt"" at the top level for further
clarity.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,669,2021-03-17T22:36:53Z,2021-03-19T17:40:03Z,2021-03-19T17:40:03Z,MERGED,True,3,346,6,https://github.com/morrone,Add missing COPYING file at top level,1,[],https://github.com/ovis-hpc/ovis/pull/669,https://github.com/morrone,2,https://github.com/ovis-hpc/ovis/pull/669#issuecomment-801494798,"This update renames the LICENSE to COPYING, because most of the
code refers to a ""COPYING"" file at the top level. This way
COPYING will now correctly state the dual-license nature of
ovis's licensing. The COPYING file refers to a the gpl v2
in a file named ""gpl-2.0.txt"" at the top level for further
clarity.","If this looks reasonable, I'll update PR #666 to reflect this change.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,671,2021-03-18T17:37:01Z,2021-03-22T19:53:50Z,2021-03-22T19:53:50Z,CLOSED,False,46,13,3,https://github.com/baallan,replace sys_errlist which finally is gone from gnu libc.,2,[],https://github.com/ovis-hpc/ovis/pull/671,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/671,Looks like gnu libc drops sys_errlist from headers and libraries on or before 2.32.,Looks like gnu libc drops sys_errlist from headers and libraries on or before 2.32.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,671,2021-03-18T17:37:01Z,2021-03-22T19:53:50Z,2021-03-22T19:53:50Z,CLOSED,False,46,13,3,https://github.com/baallan,replace sys_errlist which finally is gone from gnu libc.,2,[],https://github.com/ovis-hpc/ovis/pull/671,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/671#issuecomment-804348970,Looks like gnu libc drops sys_errlist from headers and libraries on or before 2.32.,superceded by 672.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,672,2021-03-18T19:14:09Z,2021-04-08T15:04:29Z,2021-04-08T15:04:29Z,MERGED,True,110,117,28,https://github.com/baallan,compensate for gnu libc 2.32 removal of sys_errlist and use alternate strerror thread safely,1,[],https://github.com/ovis-hpc/ovis/pull/672,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/672,"This solves reported issue #670, by switching everywhere to STRERROR macro defined in ovis_util/util.h.","This solves reported issue #670, by switching everywhere to STRERROR macro defined in ovis_util/util.h.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,672,2021-03-18T19:14:09Z,2021-04-08T15:04:29Z,2021-04-08T15:04:29Z,MERGED,True,110,117,28,https://github.com/baallan,compensate for gnu libc 2.32 removal of sys_errlist and use alternate strerror thread safely,1,[],https://github.com/ovis-hpc/ovis/pull/672,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/672#issuecomment-802997607,"This solves reported issue #670, by switching everywhere to STRERROR macro defined in ovis_util/util.h.","@baallan, I don't see why this is necessary or advisable. Adding additional serialization into the daemon when the potential race artifact is a corrupted log message is bad practice.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,672,2021-03-18T19:14:09Z,2021-04-08T15:04:29Z,2021-04-08T15:04:29Z,MERGED,True,110,117,28,https://github.com/baallan,compensate for gnu libc 2.32 removal of sys_errlist and use alternate strerror thread safely,1,[],https://github.com/ovis-hpc/ovis/pull/672,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/672#issuecomment-804152131,"This solves reported issue #670, by switching everywhere to STRERROR macro defined in ovis_util/util.h.","@tom95858 this is actually removing strerror_r serialization and potential strerror message corruption from the daemon in most locations by switching to ovis_strerror which requires no locking. Any place that strerror_r is still in use, it can be replaced if we agree to changed the dependencies of that place to include util.h/libutil. I can add that to this patch if need be.  Actually, the only place strerror_r remains is once in auth.c.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,672,2021-03-18T19:14:09Z,2021-04-08T15:04:29Z,2021-04-08T15:04:29Z,MERGED,True,110,117,28,https://github.com/baallan,compensate for gnu libc 2.32 removal of sys_errlist and use alternate strerror thread safely,1,[],https://github.com/ovis-hpc/ovis/pull/672,https://github.com/morrone,4,https://github.com/ovis-hpc/ovis/pull/672#issuecomment-804315332,"This solves reported issue #670, by switching everywhere to STRERROR macro defined in ovis_util/util.h.","@tom95858 , unless I am missing something, ""thread safe"" (or ""reentrant"") here does not imply locking. It just means employing a reentrant model: using a user-provided buffer to store the error string (as in strerr_r) rather than employing an internal buffer that would collide between reentrant calls (as in strerr). So I don't think this is introducing serialization.
@baallan, it would be helpful if the one new commit in this PR was actually rebased on the commits in PR #671, since that was apparently your intent. Having it based on copies of the commits #671 makes things harder on reviewers because we would have to go in and actually compare the commits manually to determine that the code is correct. If you base this commit on that one, we can just review #671 and then review the one additional commit in this PR.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,672,2021-03-18T19:14:09Z,2021-04-08T15:04:29Z,2021-04-08T15:04:29Z,MERGED,True,110,117,28,https://github.com/baallan,compensate for gnu libc 2.32 removal of sys_errlist and use alternate strerror thread safely,1,[],https://github.com/ovis-hpc/ovis/pull/672,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/672#issuecomment-804346682,"This solves reported issue #670, by switching everywhere to STRERROR macro defined in ovis_util/util.h.","@morrone, @baallan, I have done a poor job explaining my concern. The only time that strerror returns anything other than a static const char * is when the errno that's passed in is not recognized. IOW, the errno value is invalid. In that case, it sprintf's an error into a static char * and returns it to you. In short, that's the only time that there is any kind of thread-safety issue; and if that happens you have another bug.
So to resolve this ""problem"", we've added a whole new interface (ovis_strerror) that copies all of the existing static const char * into another array of static const char * and resolves the thread issue by returning ""unknown error"" instead of a string that includes the offending error.
So in short, we've changed 25+ files, countless lines of code, duplicated memory and resolved the potential race of two threads providing sterror with a bad errno and having the resulting error string corrupted. I apologize, but I find this ridiculous.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,672,2021-03-18T19:14:09Z,2021-04-08T15:04:29Z,2021-04-08T15:04:29Z,MERGED,True,110,117,28,https://github.com/baallan,compensate for gnu libc 2.32 removal of sys_errlist and use alternate strerror thread safely,1,[],https://github.com/ovis-hpc/ovis/pull/672,https://github.com/baallan,6,https://github.com/ovis-hpc/ovis/pull/672#issuecomment-804359209,"This solves reported issue #670, by switching everywhere to STRERROR macro defined in ovis_util/util.h.","@tom95858 This is not the first time the libc developers have taken away a non-posix feature and made us do ""ridiculous"" things.
We need this fix to run on a new machine at SNL and elsewhere (#670).
The lines of code changed (excluding adding 2 small functions in util.c) is < 100.
And it gets rid of a whole class of repetitive warnings when thread analyzing ldmsd, as a bonus.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,672,2021-03-18T19:14:09Z,2021-04-08T15:04:29Z,2021-04-08T15:04:29Z,MERGED,True,110,117,28,https://github.com/baallan,compensate for gnu libc 2.32 removal of sys_errlist and use alternate strerror thread safely,1,[],https://github.com/ovis-hpc/ovis/pull/672,https://github.com/morrone,7,https://github.com/ovis-hpc/ovis/pull/672#issuecomment-804456119,"This solves reported issue #670, by switching everywhere to STRERROR macro defined in ovis_util/util.h.","@morrone, @baallan, I have done a poor job explaining my concern. The only time that strerror returns anything other than a static const char * is when the errno that's passed in is not recognized. IOW, the errno value is invalid. In that case, it sprintf's an error into a static char * and returns it to you. In short, that's the only time that there is any kind of thread-safety issue; and if that happens you have another bug.

You are making assumptions about strerror() implementation, which isn't the best practice.
I'm not going to advocate this PR's approach of copying all of the strings or using ovis_strerror() is the best approach. I would probably prefer to just use strerror_r(), and deal with the extra lines needed for the temporary buffers. And I agree with your complaint about losing the error number for the unknown errror case.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,672,2021-03-18T19:14:09Z,2021-04-08T15:04:29Z,2021-04-08T15:04:29Z,MERGED,True,110,117,28,https://github.com/baallan,compensate for gnu libc 2.32 removal of sys_errlist and use alternate strerror thread safely,1,[],https://github.com/ovis-hpc/ovis/pull/672,https://github.com/morrone,8,https://github.com/ovis-hpc/ovis/pull/672#issuecomment-804589298,"This solves reported issue #670, by switching everywhere to STRERROR macro defined in ovis_util/util.h.",The way I would probably do this is build the strerror_r() call into a logging function.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,672,2021-03-18T19:14:09Z,2021-04-08T15:04:29Z,2021-04-08T15:04:29Z,MERGED,True,110,117,28,https://github.com/baallan,compensate for gnu libc 2.32 removal of sys_errlist and use alternate strerror thread safely,1,[],https://github.com/ovis-hpc/ovis/pull/672,https://github.com/tom95858,9,https://github.com/ovis-hpc/ovis/pull/672#issuecomment-805883497,"This solves reported issue #670, by switching everywhere to STRERROR macro defined in ovis_util/util.h.","@baallan, @morrone there is a ""%m"" format specifier (non-Posix GNU extension). It would get rid of all calls to strerror(errno).
There are also a lot of patterns like this:
{
    int xxx = errno;
    ... strerror(xxx);
}
Not sure why that pattern exists, perhaps paranoia about printf/strerror futzing with errno? But that pattern could also be removed with ""%m"".
Finally, for this kind of thing:
    ...strerror(ERRNO);
Something super simple like this:
#define STERROR(_rc_) ({ char *msg=alloca(32); strerror_r(_rc_, msg, 32); msg; })

and change strerror(...) --> STRERROR(...)
For those remaining call sites (~22 or so)",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,672,2021-03-18T19:14:09Z,2021-04-08T15:04:29Z,2021-04-08T15:04:29Z,MERGED,True,110,117,28,https://github.com/baallan,compensate for gnu libc 2.32 removal of sys_errlist and use alternate strerror thread safely,1,[],https://github.com/ovis-hpc/ovis/pull/672,https://github.com/baallan,10,https://github.com/ovis-hpc/ovis/pull/672#issuecomment-805901613,"This solves reported issue #670, by switching everywhere to STRERROR macro defined in ovis_util/util.h.","@tom95858 The use of alloca as proposed here results in an invalid stack pointer being passed into the format machinery. The buffer size needed (for LANG C) is at least 60, and accounting for the internationalization library under strerror probably 80. We need to do either (a) strerror_r and it's syntactic overheads everywhere {as @morrone suggests) or (b) ovis_strerror to be portable to current gnu libc and posix standards.
Strerror is documented as changing errno sometimes, as may other calls that may be inlined to create the printf arguments, so for many situations where one might want to preserve the errno value (debug, further return code, etc) the x=errno pattern before print is often justified. Certainly not claiming it's always needed in every case where it may have been pasted in ldms development.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,672,2021-03-18T19:14:09Z,2021-04-08T15:04:29Z,2021-04-08T15:04:29Z,MERGED,True,110,117,28,https://github.com/baallan,compensate for gnu libc 2.32 removal of sys_errlist and use alternate strerror thread safely,1,[],https://github.com/ovis-hpc/ovis/pull/672,https://github.com/morrone,11,https://github.com/ovis-hpc/ovis/pull/672#issuecomment-805917782,"This solves reported issue #670, by switching everywhere to STRERROR macro defined in ovis_util/util.h.","A third option is to make a new logging function (or set of logging functions) that always append strerror_r() to whatever message the caller wants printed. Basically what we want is perror(), but with format string and variable number of arguments like (f)printf().
We might also consider why we are sending error messages to stdout rather than stderr.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,672,2021-03-18T19:14:09Z,2021-04-08T15:04:29Z,2021-04-08T15:04:29Z,MERGED,True,110,117,28,https://github.com/baallan,compensate for gnu libc 2.32 removal of sys_errlist and use alternate strerror thread safely,1,[],https://github.com/ovis-hpc/ovis/pull/672,https://github.com/baallan,12,https://github.com/ovis-hpc/ovis/pull/672#issuecomment-805956370,"This solves reported issue #670, by switching everywhere to STRERROR macro defined in ovis_util/util.h.","The aim of this patch was to get a thread-safe change in place to resolve the build failure on libc 2.32.
A proper refactor/expansion of the logging api to include an option that appends/inserts the strerror strings into selected messages would be a fine thing but be out of scope. Also out of scope is a change I think we all want to expand the api to something like:
LOG(facility, level, format, ...) where we can change the log level by the facility tag.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,672,2021-03-18T19:14:09Z,2021-04-08T15:04:29Z,2021-04-08T15:04:29Z,MERGED,True,110,117,28,https://github.com/baallan,compensate for gnu libc 2.32 removal of sys_errlist and use alternate strerror thread safely,1,[],https://github.com/ovis-hpc/ovis/pull/672,https://github.com/morrone,13,https://github.com/ovis-hpc/ovis/pull/672#issuecomment-805969040,"This solves reported issue #670, by switching everywhere to STRERROR macro defined in ovis_util/util.h.","In that case, we could provide sys_nerr and anything else that is missing through autoconf tests and replacement until such point as we have better APIs that no longer use them. That keeps the work-arounds outside of the code proper.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,672,2021-03-18T19:14:09Z,2021-04-08T15:04:29Z,2021-04-08T15:04:29Z,MERGED,True,110,117,28,https://github.com/baallan,compensate for gnu libc 2.32 removal of sys_errlist and use alternate strerror thread safely,1,[],https://github.com/ovis-hpc/ovis/pull/672,https://github.com/baallan,14,https://github.com/ovis-hpc/ovis/pull/672#issuecomment-805988205,"This solves reported issue #670, by switching everywhere to STRERROR macro defined in ovis_util/util.h.","@morrone If you have a 'compat' solution such as you suggest, please do so we can close issue 670.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,672,2021-03-18T19:14:09Z,2021-04-08T15:04:29Z,2021-04-08T15:04:29Z,MERGED,True,110,117,28,https://github.com/baallan,compensate for gnu libc 2.32 removal of sys_errlist and use alternate strerror thread safely,1,[],https://github.com/ovis-hpc/ovis/pull/672,https://github.com/tom95858,15,https://github.com/ovis-hpc/ovis/pull/672#issuecomment-805991684,"This solves reported issue #670, by switching everywhere to STRERROR macro defined in ovis_util/util.h.","@tom95858 The use of alloca as proposed here results in an invalid stack pointer being passed into the format machinery.

I'm fairly certain that this claim is false. From the documentation:
The  alloca()  function  allocates  size  bytes  of space in the stack frame of the caller.  This temporary space is automatically freed when the **function** that called alloca() returns to its caller.

That said, I feared your claim as well, i.e. the { } block would dealloc the stack buffer on exit. However, I reviewed the assembly code and that was not the case. The documentation seems to confirm that the memory is not freed until the ""...function that called alloca()..."" returns.

The buffer size needed (for LANG C) is at least 60, and accounting for the internationalization library under strerror probably 80.

The 32B was just an example. Make it larger.

We need to do either (a) strerror_r and it's syntactic overheads everywhere {as @morrone suggests) or (b) ovis_strerror to be portable to current gnu libc and posix standards.

The macro is what @morrone suggests without the coding of the same sequence 22 times.

Strerror is documented as changing errno sometimes,

errno is passed in as a parameter, whether strerror changes errno does not affect the parameter value.

... as may other calls that may be inlined to create the printf arguments, so for many situations where one might want to preserve the errno value (debug, further return code, etc) the x=errno pattern before print is often justified. Certainly not claiming it's always needed in every case where it may have been pasted in ldms development.

Sure, but the ones I looked at had none of these conditions.
All that said, I would like to avoid changing/re-changing this logic over and over again. The use of str_errlist was reluctantly accepted in the first place after a similarly long exchange in June of last year and here we are again.
If alloca behaves like I believe it does; are we good to go or is there some other concern?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,672,2021-03-18T19:14:09Z,2021-04-08T15:04:29Z,2021-04-08T15:04:29Z,MERGED,True,110,117,28,https://github.com/baallan,compensate for gnu libc 2.32 removal of sys_errlist and use alternate strerror thread safely,1,[],https://github.com/ovis-hpc/ovis/pull/672,https://github.com/tom95858,16,https://github.com/ovis-hpc/ovis/pull/672#issuecomment-805999755,"This solves reported issue #670, by switching everywhere to STRERROR macro defined in ovis_util/util.h.","PS: is anyone worried about the ""%m"" format specifier? I checked it with clang, gcc, and PrgEnv-intel on Cray.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,672,2021-03-18T19:14:09Z,2021-04-08T15:04:29Z,2021-04-08T15:04:29Z,MERGED,True,110,117,28,https://github.com/baallan,compensate for gnu libc 2.32 removal of sys_errlist and use alternate strerror thread safely,1,[],https://github.com/ovis-hpc/ovis/pull/672,https://github.com/baallan,17,https://github.com/ovis-hpc/ovis/pull/672#issuecomment-806007889,"This solves reported issue #670, by switching everywhere to STRERROR macro defined in ovis_util/util.h.","re %m, if it's something you can check for at configure and provide an alternative for, then fine. We have quite a bit of gnu C-ism in our code base already-- I wouldn't choose now to get strict posix religion, or c99 religion or whatever.
Yes, it would be nice if we could find the path of gnu libc and determine if it really uses streerror(errno) or the underlying private array or strerror_r. If assuming that behavior (once checked) is still odiferous,  the proposed STRERROR/alloca would seem to be ok given the function scope and not syntactic scope of alloca.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,672,2021-03-18T19:14:09Z,2021-04-08T15:04:29Z,2021-04-08T15:04:29Z,MERGED,True,110,117,28,https://github.com/baallan,compensate for gnu libc 2.32 removal of sys_errlist and use alternate strerror thread safely,1,[],https://github.com/ovis-hpc/ovis/pull/672,https://github.com/tom95858,18,https://github.com/ovis-hpc/ovis/pull/672#issuecomment-806029626,"This solves reported issue #670, by switching everywhere to STRERROR macro defined in ovis_util/util.h.","@baallan, I think we would have to build a specific config test. But that said, If we don't like it, let's just not use it. I'm actually not a fan of the fact that it doesn't take an argument, but rather uses errno directly.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,672,2021-03-18T19:14:09Z,2021-04-08T15:04:29Z,2021-04-08T15:04:29Z,MERGED,True,110,117,28,https://github.com/baallan,compensate for gnu libc 2.32 removal of sys_errlist and use alternate strerror thread safely,1,[],https://github.com/ovis-hpc/ovis/pull/672,https://github.com/baallan,19,https://github.com/ovis-hpc/ovis/pull/672#issuecomment-806185124,"This solves reported issue #670, by switching everywhere to STRERROR macro defined in ovis_util/util.h.","@tom95858 With a little testing I'm starting to like the STRERROR macro you proposed instead of a function, but it does appear that the ({}) syntax is still a gnu extension on c99/c11. Does something like the following work on your clang?
Yes, the msg below may be seat belt and suspenders, but it would make reading processed code more clear when debugging in the presence of a msg variable. I would still like to name the macro ovis_strerror to avoid typing in all caps (and since the macro acts like a function).
#include ""stdlib.h""
#include ""stdio.h""
#include ""string.h""
#define STRERROR(_rc_) ({ char *_msg_ = alloca(80); strerror_r(_rc_, _msg_, 80); _msg_; })
void foo() {
	printf(""p1: %d %s\n"", 11, STRERROR(11));
	printf(""p2: %d %s\n"", 132, STRERROR(132));
	printf(""p3: %s %s\n"", STRERROR(8), STRERROR(133));
}
int main() {
	foo();
	return 0;
}",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,672,2021-03-18T19:14:09Z,2021-04-08T15:04:29Z,2021-04-08T15:04:29Z,MERGED,True,110,117,28,https://github.com/baallan,compensate for gnu libc 2.32 removal of sys_errlist and use alternate strerror thread safely,1,[],https://github.com/ovis-hpc/ovis/pull/672,https://github.com/tom95858,20,https://github.com/ovis-hpc/ovis/pull/672#issuecomment-806306305,"This solves reported issue #670, by switching everywhere to STRERROR macro defined in ovis_util/util.h.","Hi @baallan,
I'm pretty sure the ({}) syntax is all the way back to K&R, but I'm certainly willing to be informed otherwise. See old implementations of container_of before this kind of thing was added as a GNU extension",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,672,2021-03-18T19:14:09Z,2021-04-08T15:04:29Z,2021-04-08T15:04:29Z,MERGED,True,110,117,28,https://github.com/baallan,compensate for gnu libc 2.32 removal of sys_errlist and use alternate strerror thread safely,1,[],https://github.com/ovis-hpc/ovis/pull/672,https://github.com/baallan,21,https://github.com/ovis-hpc/ovis/pull/672#issuecomment-807205087,"This solves reported issue #670, by switching everywhere to STRERROR macro defined in ovis_util/util.h.","@tom95858 I agree it's likely to be a universal extension, but I can't actually find it in the recent standards docs. gnu documents it as extension 'statement exprs'. if we're happy requiring gcc on hypothetical embedded platforms, or if at least clang allows it (some arm dev teams are clang based), I think that's good enough for me.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,672,2021-03-18T19:14:09Z,2021-04-08T15:04:29Z,2021-04-08T15:04:29Z,MERGED,True,110,117,28,https://github.com/baallan,compensate for gnu libc 2.32 removal of sys_errlist and use alternate strerror thread safely,1,[],https://github.com/ovis-hpc/ovis/pull/672,https://github.com/baallan,22,https://github.com/ovis-hpc/ovis/pull/672#issuecomment-813535865,"This solves reported issue #670, by switching everywhere to STRERROR macro defined in ovis_util/util.h.",Per last week's phone call w/ @tom95858 I will update this to use the suggested macro approach with statement expression style. apparently this works across gcc/clang/intel.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,672,2021-03-18T19:14:09Z,2021-04-08T15:04:29Z,2021-04-08T15:04:29Z,MERGED,True,110,117,28,https://github.com/baallan,compensate for gnu libc 2.32 removal of sys_errlist and use alternate strerror thread safely,1,[],https://github.com/ovis-hpc/ovis/pull/672,https://github.com/baallan,23,https://github.com/ovis-hpc/ovis/pull/672#issuecomment-813714603,"This solves reported issue #670, by switching everywhere to STRERROR macro defined in ovis_util/util.h.","@tom95858 assuming this passes all the build checks still running, it is ready to go unless someone wants a prefix (OVIS_, O_, L_?) on STRERROR.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,673,2021-03-29T18:34:19Z,2021-03-30T16:41:29Z,2021-03-30T16:41:29Z,MERGED,True,11,4,2,https://github.com/narategithub,Fix buffer reallocation in ldmsd_request,1,[],https://github.com/ovis-hpc/ovis/pull/673,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/673,"The size provided to the realloc() call was not the size of the entire
buffer. Instead, the remaining size (sz) was given. This caused a
buffer overrun on ldmsd (e.g. when processing thread_stats request).
This patch corrects the size of the reallocation to be the size of the
entire buffer (off + sz).","The size provided to the realloc() call was not the size of the entire
buffer. Instead, the remaining size (sz) was given. This caused a
buffer overrun on ldmsd (e.g. when processing thread_stats request).
This patch corrects the size of the reallocation to be the size of the
entire buffer (off + sz).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,673,2021-03-29T18:34:19Z,2021-03-30T16:41:29Z,2021-03-30T16:41:29Z,MERGED,True,11,4,2,https://github.com/narategithub,Fix buffer reallocation in ldmsd_request,1,[],https://github.com/ovis-hpc/ovis/pull/673,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/673#issuecomment-809617677,"The size provided to the realloc() call was not the size of the entire
buffer. Instead, the remaining size (sz) was given. This caused a
buffer overrun on ldmsd (e.g. when processing thread_stats request).
This patch corrects the size of the reallocation to be the size of the
entire buffer (off + sz).","@tom95858 I can reproduce the buffer overrun detected by valgrind on the thread_stats command processing. What happened was that when the buffer was reallocated, the remaining size was supplied to realloc() instead of the size of the entire buffer. With this patch, the buffer overrun is not seen anymore.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,676,2021-03-31T19:09:57Z,2021-04-05T17:38:58Z,2021-04-05T17:38:58Z,MERGED,True,14,0,3,https://github.com/narategithub,Fix occasional SEGEV when ldmsd_controller exited,1,[],https://github.com/ovis-hpc/ovis/pull/676,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/676,"When ldmsd_controller exit, ldms_xprt was closed but the Python main
thread did not wait for the DISCONNECTED event. The segmentation fault
happened when zap_thread delivered DISCONNECTED event which took the
Python GIL in the callback path, but the Python GIL was already
destroyed because the Python main thread was exiting. This was supposed
not to happen because ldmsd_controller used Xprt in a blocking mode and
Xprt.close() shall timed-wait for the DICONNECTED event (like it did for
blocking Xprt.connect()).
This patch fixes the Cython Xprt.close() to timed-wait in the blocking
mode and adds the missing do_quit() call in ldmsd_controller in the
case of EOF (Ctrl-D) command loop exit.","When ldmsd_controller exit, ldms_xprt was closed but the Python main
thread did not wait for the DISCONNECTED event. The segmentation fault
happened when zap_thread delivered DISCONNECTED event which took the
Python GIL in the callback path, but the Python GIL was already
destroyed because the Python main thread was exiting. This was supposed
not to happen because ldmsd_controller used Xprt in a blocking mode and
Xprt.close() shall timed-wait for the DICONNECTED event (like it did for
blocking Xprt.connect()).
This patch fixes the Cython Xprt.close() to timed-wait in the blocking
mode and adds the missing do_quit() call in ldmsd_controller in the
case of EOF (Ctrl-D) command loop exit.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,677,2021-03-31T19:10:24Z,2021-04-01T14:11:21Z,2021-04-01T14:11:21Z,MERGED,True,2,0,1,https://github.com/narategithub,Add missing timed-wait calculation for xprt_close in slurm_notifier,1,[],https://github.com/ovis-hpc/ovis/pull/677,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/677,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,678,2021-04-02T14:56:05Z,2021-04-08T15:00:25Z,2021-04-08T21:20:29Z,MERGED,True,1474,0,12,https://github.com/baallan,backport rdc_sampler from amd on master to OVIS-4,2,[],https://github.com/ovis-hpc/ovis/pull/678,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/678,"Tested against a rhel7 ROCM 4.0.0 installation.
Notable minor differences from master rdc_sampler on which this is base:

Uses the 4.3.6 sampler_base api from OVIS-4 instead of the draft multi-instance API from master.
The sampler instance can be configured multiple times, but each call wipes out all previous configuration.
Man pages supplied.
All options are defaulted if not given.
Allows selection of any available field, rather than only the 10 or so default ones; the default list is used
if metrics=xxx is not given. As the RDC header evolves with more fields, the plugin should not need to.
The metrics argument accepts values that redefine the default list: 'base' and 'xgmi', which may be extended as hardware evolves.
The default metric list is 'base', which exclude xgmi communication metrics.
Requested metrics are checked for type compatibility (int64_t).
New option 'shape' allows the user to select set geometry: 0-  a single wide set of the selected metrics across each gpu; 1- N per-device sets, with a 'device' column included. 2- (reserved, but not supported) a single narrow set with a vector indexed by gpu for each metric. Some unfortunate poking through the abstraction boundary of sampler_base.h results; I have tried to make it obvious where this occurs. Getting rid of the 'shape' option is an anticipated improvement.
New option 'warmup' controls the delay between starting the amd library and attempting to sample. Do-nothing sample calls instead of sleep() are used to implement the delay.
The configuration schema= given is used as the base of a derived schema name, where the suffix is determined automatically by the shape= and metrics= options and number of gpus. For a given configuration, the schema name can be determined by running the ldms_rdc_schema_name utility supplied before configuring other plugins, if needed.
The ""business logic"" is isolated to rdcinfo.c and the plugin boilerplate is in rdc_plugin.c.
The obvious 'singleton' pattern is used, and lock management is confined to rdc_plugin.c so the author/maintainer of rdcinfo.c can view it as single-threaded.
Any failure in querying metrics causes the plugin to rdc_shutdown the gpu query library, otherwise the rdc library spews to log regularly, annoying sys admins.
Configure with this sampler on AMD platforms looks like:
./configure --enable-rdc RDC_CFLAGS=-I/opt/rocm/rdc/include RDC_LIBS=-L/opt/rocm/rdc/lib ...
Once built, a quick test is 'ldms-static-test.sh rdc_sampler' if ldms is in your PATH.

Open issues:

Is there any sort of ""block query"" command to get a batch of counters all at once instead of Nmetrics*Pgpus individual calls?
There is a probable race at ldmsd exit with the embedded amd library unless the rdc plugin is stopped and terminated. In some circumstances, this leads to a seg fault during process cleanup.","Tested against a rhel7 ROCM 4.0.0 installation.
Notable minor differences from master rdc_sampler on which this is base:

Uses the 4.3.6 sampler_base api from OVIS-4 instead of the draft multi-instance API from master.
The sampler instance can be configured multiple times, but each call wipes out all previous configuration.
Man pages supplied.
All options are defaulted if not given.
Allows selection of any available field, rather than only the 10 or so default ones; the default list is used
if metrics=xxx is not given. As the RDC header evolves with more fields, the plugin should not need to.
The metrics argument accepts values that redefine the default list: 'base' and 'xgmi', which may be extended as hardware evolves.
The default metric list is 'base', which exclude xgmi communication metrics.
Requested metrics are checked for type compatibility (int64_t).
New option 'shape' allows the user to select set geometry: 0-  a single wide set of the selected metrics across each gpu; 1- N per-device sets, with a 'device' column included. 2- (reserved, but not supported) a single narrow set with a vector indexed by gpu for each metric. Some unfortunate poking through the abstraction boundary of sampler_base.h results; I have tried to make it obvious where this occurs. Getting rid of the 'shape' option is an anticipated improvement.
New option 'warmup' controls the delay between starting the amd library and attempting to sample. Do-nothing sample calls instead of sleep() are used to implement the delay.
The configuration schema= given is used as the base of a derived schema name, where the suffix is determined automatically by the shape= and metrics= options and number of gpus. For a given configuration, the schema name can be determined by running the ldms_rdc_schema_name utility supplied before configuring other plugins, if needed.
The ""business logic"" is isolated to rdcinfo.c and the plugin boilerplate is in rdc_plugin.c.
The obvious 'singleton' pattern is used, and lock management is confined to rdc_plugin.c so the author/maintainer of rdcinfo.c can view it as single-threaded.
Any failure in querying metrics causes the plugin to rdc_shutdown the gpu query library, otherwise the rdc library spews to log regularly, annoying sys admins.
Configure with this sampler on AMD platforms looks like:
./configure --enable-rdc RDC_CFLAGS=-I/opt/rocm/rdc/include RDC_LIBS=-L/opt/rocm/rdc/lib ...
Once built, a quick test is 'ldms-static-test.sh rdc_sampler' if ldms is in your PATH.

Open issues:

Is there any sort of ""block query"" command to get a batch of counters all at once instead of Nmetrics*Pgpus individual calls?
There is a probable race at ldmsd exit with the embedded amd library unless the rdc plugin is stopped and terminated. In some circumstances, this leads to a seg fault during process cleanup.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,678,2021-04-02T14:56:05Z,2021-04-08T15:00:25Z,2021-04-08T21:20:29Z,MERGED,True,1474,0,12,https://github.com/baallan,backport rdc_sampler from amd on master to OVIS-4,2,[],https://github.com/ovis-hpc/ovis/pull/678,https://github.com/morrone,2,https://github.com/ovis-hpc/ovis/pull/678#issuecomment-812651570,"Tested against a rhel7 ROCM 4.0.0 installation.
Notable minor differences from master rdc_sampler on which this is base:

Uses the 4.3.6 sampler_base api from OVIS-4 instead of the draft multi-instance API from master.
The sampler instance can be configured multiple times, but each call wipes out all previous configuration.
Man pages supplied.
All options are defaulted if not given.
Allows selection of any available field, rather than only the 10 or so default ones; the default list is used
if metrics=xxx is not given. As the RDC header evolves with more fields, the plugin should not need to.
The metrics argument accepts values that redefine the default list: 'base' and 'xgmi', which may be extended as hardware evolves.
The default metric list is 'base', which exclude xgmi communication metrics.
Requested metrics are checked for type compatibility (int64_t).
New option 'shape' allows the user to select set geometry: 0-  a single wide set of the selected metrics across each gpu; 1- N per-device sets, with a 'device' column included. 2- (reserved, but not supported) a single narrow set with a vector indexed by gpu for each metric. Some unfortunate poking through the abstraction boundary of sampler_base.h results; I have tried to make it obvious where this occurs. Getting rid of the 'shape' option is an anticipated improvement.
New option 'warmup' controls the delay between starting the amd library and attempting to sample. Do-nothing sample calls instead of sleep() are used to implement the delay.
The configuration schema= given is used as the base of a derived schema name, where the suffix is determined automatically by the shape= and metrics= options and number of gpus. For a given configuration, the schema name can be determined by running the ldms_rdc_schema_name utility supplied before configuring other plugins, if needed.
The ""business logic"" is isolated to rdcinfo.c and the plugin boilerplate is in rdc_plugin.c.
The obvious 'singleton' pattern is used, and lock management is confined to rdc_plugin.c so the author/maintainer of rdcinfo.c can view it as single-threaded.
Any failure in querying metrics causes the plugin to rdc_shutdown the gpu query library, otherwise the rdc library spews to log regularly, annoying sys admins.
Configure with this sampler on AMD platforms looks like:
./configure --enable-rdc RDC_CFLAGS=-I/opt/rocm/rdc/include RDC_LIBS=-L/opt/rocm/rdc/lib ...
Once built, a quick test is 'ldms-static-test.sh rdc_sampler' if ldms is in your PATH.

Open issues:

Is there any sort of ""block query"" command to get a batch of counters all at once instead of Nmetrics*Pgpus individual calls?
There is a probable race at ldmsd exit with the embedded amd library unless the rdc plugin is stopped and terminated. In some circumstances, this leads to a seg fault during process cleanup.","Perhaps we also should rework this plugin to use a single-GPU schema and one metric set per GPU (all sharing the same schema). We see to be moving that direction with many of our plugins, so it might be best to do that up front on new plugins rather than dealing with the change over later.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,678,2021-04-02T14:56:05Z,2021-04-08T15:00:25Z,2021-04-08T21:20:29Z,MERGED,True,1474,0,12,https://github.com/baallan,backport rdc_sampler from amd on master to OVIS-4,2,[],https://github.com/ovis-hpc/ovis/pull/678,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/678#issuecomment-812656354,"Tested against a rhel7 ROCM 4.0.0 installation.
Notable minor differences from master rdc_sampler on which this is base:

Uses the 4.3.6 sampler_base api from OVIS-4 instead of the draft multi-instance API from master.
The sampler instance can be configured multiple times, but each call wipes out all previous configuration.
Man pages supplied.
All options are defaulted if not given.
Allows selection of any available field, rather than only the 10 or so default ones; the default list is used
if metrics=xxx is not given. As the RDC header evolves with more fields, the plugin should not need to.
The metrics argument accepts values that redefine the default list: 'base' and 'xgmi', which may be extended as hardware evolves.
The default metric list is 'base', which exclude xgmi communication metrics.
Requested metrics are checked for type compatibility (int64_t).
New option 'shape' allows the user to select set geometry: 0-  a single wide set of the selected metrics across each gpu; 1- N per-device sets, with a 'device' column included. 2- (reserved, but not supported) a single narrow set with a vector indexed by gpu for each metric. Some unfortunate poking through the abstraction boundary of sampler_base.h results; I have tried to make it obvious where this occurs. Getting rid of the 'shape' option is an anticipated improvement.
New option 'warmup' controls the delay between starting the amd library and attempting to sample. Do-nothing sample calls instead of sleep() are used to implement the delay.
The configuration schema= given is used as the base of a derived schema name, where the suffix is determined automatically by the shape= and metrics= options and number of gpus. For a given configuration, the schema name can be determined by running the ldms_rdc_schema_name utility supplied before configuring other plugins, if needed.
The ""business logic"" is isolated to rdcinfo.c and the plugin boilerplate is in rdc_plugin.c.
The obvious 'singleton' pattern is used, and lock management is confined to rdc_plugin.c so the author/maintainer of rdcinfo.c can view it as single-threaded.
Any failure in querying metrics causes the plugin to rdc_shutdown the gpu query library, otherwise the rdc library spews to log regularly, annoying sys admins.
Configure with this sampler on AMD platforms looks like:
./configure --enable-rdc RDC_CFLAGS=-I/opt/rocm/rdc/include RDC_LIBS=-L/opt/rocm/rdc/lib ...
Once built, a quick test is 'ldms-static-test.sh rdc_sampler' if ldms is in your PATH.

Open issues:

Is there any sort of ""block query"" command to get a batch of counters all at once instead of Nmetrics*Pgpus individual calls?
There is a probable race at ldmsd exit with the embedded amd library unless the rdc plugin is stopped and terminated. In some circumstances, this leads to a seg fault during process cleanup.","See 'shape' mentioned in the initial comment that I made when posting the PR. Does exactly what you want. The default is the wide set, so that this implementation will work the same way AMD's original did (from a backend storage point of view).

Perhaps we also should rework this plugin to use a single-GPU schema ...",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,678,2021-04-02T14:56:05Z,2021-04-08T15:00:25Z,2021-04-08T21:20:29Z,MERGED,True,1474,0,12,https://github.com/baallan,backport rdc_sampler from amd on master to OVIS-4,2,[],https://github.com/ovis-hpc/ovis/pull/678,https://github.com/morrone,4,https://github.com/ovis-hpc/ovis/pull/678#issuecomment-812670668,"Tested against a rhel7 ROCM 4.0.0 installation.
Notable minor differences from master rdc_sampler on which this is base:

Uses the 4.3.6 sampler_base api from OVIS-4 instead of the draft multi-instance API from master.
The sampler instance can be configured multiple times, but each call wipes out all previous configuration.
Man pages supplied.
All options are defaulted if not given.
Allows selection of any available field, rather than only the 10 or so default ones; the default list is used
if metrics=xxx is not given. As the RDC header evolves with more fields, the plugin should not need to.
The metrics argument accepts values that redefine the default list: 'base' and 'xgmi', which may be extended as hardware evolves.
The default metric list is 'base', which exclude xgmi communication metrics.
Requested metrics are checked for type compatibility (int64_t).
New option 'shape' allows the user to select set geometry: 0-  a single wide set of the selected metrics across each gpu; 1- N per-device sets, with a 'device' column included. 2- (reserved, but not supported) a single narrow set with a vector indexed by gpu for each metric. Some unfortunate poking through the abstraction boundary of sampler_base.h results; I have tried to make it obvious where this occurs. Getting rid of the 'shape' option is an anticipated improvement.
New option 'warmup' controls the delay between starting the amd library and attempting to sample. Do-nothing sample calls instead of sleep() are used to implement the delay.
The configuration schema= given is used as the base of a derived schema name, where the suffix is determined automatically by the shape= and metrics= options and number of gpus. For a given configuration, the schema name can be determined by running the ldms_rdc_schema_name utility supplied before configuring other plugins, if needed.
The ""business logic"" is isolated to rdcinfo.c and the plugin boilerplate is in rdc_plugin.c.
The obvious 'singleton' pattern is used, and lock management is confined to rdc_plugin.c so the author/maintainer of rdcinfo.c can view it as single-threaded.
Any failure in querying metrics causes the plugin to rdc_shutdown the gpu query library, otherwise the rdc library spews to log regularly, annoying sys admins.
Configure with this sampler on AMD platforms looks like:
./configure --enable-rdc RDC_CFLAGS=-I/opt/rocm/rdc/include RDC_LIBS=-L/opt/rocm/rdc/lib ...
Once built, a quick test is 'ldms-static-test.sh rdc_sampler' if ldms is in your PATH.

Open issues:

Is there any sort of ""block query"" command to get a batch of counters all at once instead of Nmetrics*Pgpus individual calls?
There is a probable race at ldmsd exit with the embedded amd library unless the rdc plugin is stopped and terminated. In some circumstances, this leads to a seg fault during process cleanup.","This PR should be marked ""Draft"" since it is still a work in progress.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,678,2021-04-02T14:56:05Z,2021-04-08T15:00:25Z,2021-04-08T21:20:29Z,MERGED,True,1474,0,12,https://github.com/baallan,backport rdc_sampler from amd on master to OVIS-4,2,[],https://github.com/ovis-hpc/ovis/pull/678,https://github.com/morrone,5,https://github.com/ovis-hpc/ovis/pull/678#issuecomment-812672237,"Tested against a rhel7 ROCM 4.0.0 installation.
Notable minor differences from master rdc_sampler on which this is base:

Uses the 4.3.6 sampler_base api from OVIS-4 instead of the draft multi-instance API from master.
The sampler instance can be configured multiple times, but each call wipes out all previous configuration.
Man pages supplied.
All options are defaulted if not given.
Allows selection of any available field, rather than only the 10 or so default ones; the default list is used
if metrics=xxx is not given. As the RDC header evolves with more fields, the plugin should not need to.
The metrics argument accepts values that redefine the default list: 'base' and 'xgmi', which may be extended as hardware evolves.
The default metric list is 'base', which exclude xgmi communication metrics.
Requested metrics are checked for type compatibility (int64_t).
New option 'shape' allows the user to select set geometry: 0-  a single wide set of the selected metrics across each gpu; 1- N per-device sets, with a 'device' column included. 2- (reserved, but not supported) a single narrow set with a vector indexed by gpu for each metric. Some unfortunate poking through the abstraction boundary of sampler_base.h results; I have tried to make it obvious where this occurs. Getting rid of the 'shape' option is an anticipated improvement.
New option 'warmup' controls the delay between starting the amd library and attempting to sample. Do-nothing sample calls instead of sleep() are used to implement the delay.
The configuration schema= given is used as the base of a derived schema name, where the suffix is determined automatically by the shape= and metrics= options and number of gpus. For a given configuration, the schema name can be determined by running the ldms_rdc_schema_name utility supplied before configuring other plugins, if needed.
The ""business logic"" is isolated to rdcinfo.c and the plugin boilerplate is in rdc_plugin.c.
The obvious 'singleton' pattern is used, and lock management is confined to rdc_plugin.c so the author/maintainer of rdcinfo.c can view it as single-threaded.
Any failure in querying metrics causes the plugin to rdc_shutdown the gpu query library, otherwise the rdc library spews to log regularly, annoying sys admins.
Configure with this sampler on AMD platforms looks like:
./configure --enable-rdc RDC_CFLAGS=-I/opt/rocm/rdc/include RDC_LIBS=-L/opt/rocm/rdc/lib ...
Once built, a quick test is 'ldms-static-test.sh rdc_sampler' if ldms is in your PATH.

Open issues:

Is there any sort of ""block query"" command to get a batch of counters all at once instead of Nmetrics*Pgpus individual calls?
There is a probable race at ldmsd exit with the embedded amd library unless the rdc plugin is stopped and terminated. In some circumstances, this leads to a seg fault during process cleanup.","See 'shape' mentioned in the initial comment that I made when posting the PR. Does exactly what you want. The default is the wide set, so that this implementation will work the same way AMD's original did (from a backend storage point of view).

That is great!
I don't think we need to default to wide. AMD's plugin hasn't made it into any production LDMS release yet. I think per-gpu metrics sets should be the default.
I also think we should consider making that the only supported ""shape"". The extra shape code significantly complicates the sampler code. I don't think we want to go down the path of making plugin authors individually implement all of the same additional complexity over and over again. If we genuinely think we need different shapes for plugins, then maybe we need to take a step back and consider offering that functionality to plugin authors through new APIs.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,678,2021-04-02T14:56:05Z,2021-04-08T15:00:25Z,2021-04-08T21:20:29Z,MERGED,True,1474,0,12,https://github.com/baallan,backport rdc_sampler from amd on master to OVIS-4,2,[],https://github.com/ovis-hpc/ovis/pull/678,https://github.com/baallan,6,https://github.com/ovis-hpc/ovis/pull/678#issuecomment-813445530,"Tested against a rhel7 ROCM 4.0.0 installation.
Notable minor differences from master rdc_sampler on which this is base:

Uses the 4.3.6 sampler_base api from OVIS-4 instead of the draft multi-instance API from master.
The sampler instance can be configured multiple times, but each call wipes out all previous configuration.
Man pages supplied.
All options are defaulted if not given.
Allows selection of any available field, rather than only the 10 or so default ones; the default list is used
if metrics=xxx is not given. As the RDC header evolves with more fields, the plugin should not need to.
The metrics argument accepts values that redefine the default list: 'base' and 'xgmi', which may be extended as hardware evolves.
The default metric list is 'base', which exclude xgmi communication metrics.
Requested metrics are checked for type compatibility (int64_t).
New option 'shape' allows the user to select set geometry: 0-  a single wide set of the selected metrics across each gpu; 1- N per-device sets, with a 'device' column included. 2- (reserved, but not supported) a single narrow set with a vector indexed by gpu for each metric. Some unfortunate poking through the abstraction boundary of sampler_base.h results; I have tried to make it obvious where this occurs. Getting rid of the 'shape' option is an anticipated improvement.
New option 'warmup' controls the delay between starting the amd library and attempting to sample. Do-nothing sample calls instead of sleep() are used to implement the delay.
The configuration schema= given is used as the base of a derived schema name, where the suffix is determined automatically by the shape= and metrics= options and number of gpus. For a given configuration, the schema name can be determined by running the ldms_rdc_schema_name utility supplied before configuring other plugins, if needed.
The ""business logic"" is isolated to rdcinfo.c and the plugin boilerplate is in rdc_plugin.c.
The obvious 'singleton' pattern is used, and lock management is confined to rdc_plugin.c so the author/maintainer of rdcinfo.c can view it as single-threaded.
Any failure in querying metrics causes the plugin to rdc_shutdown the gpu query library, otherwise the rdc library spews to log regularly, annoying sys admins.
Configure with this sampler on AMD platforms looks like:
./configure --enable-rdc RDC_CFLAGS=-I/opt/rocm/rdc/include RDC_LIBS=-L/opt/rocm/rdc/lib ...
Once built, a quick test is 'ldms-static-test.sh rdc_sampler' if ldms is in your PATH.

Open issues:

Is there any sort of ""block query"" command to get a batch of counters all at once instead of Nmetrics*Pgpus individual calls?
There is a probable race at ldmsd exit with the embedded amd library unless the rdc plugin is stopped and terminated. In some circumstances, this leads to a seg fault during process cleanup.","@morrone I suspect we will defer to AMD's desires here, if they have some backend processing commitment already regarding the wide set.  If not, I agree a single narrow shape with multiple sets would be much easier to maintain long term.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,678,2021-04-02T14:56:05Z,2021-04-08T15:00:25Z,2021-04-08T21:20:29Z,MERGED,True,1474,0,12,https://github.com/baallan,backport rdc_sampler from amd on master to OVIS-4,2,[],https://github.com/ovis-hpc/ovis/pull/678,https://github.com/tom95858,7,https://github.com/ovis-hpc/ovis/pull/678#issuecomment-813526594,"Tested against a rhel7 ROCM 4.0.0 installation.
Notable minor differences from master rdc_sampler on which this is base:

Uses the 4.3.6 sampler_base api from OVIS-4 instead of the draft multi-instance API from master.
The sampler instance can be configured multiple times, but each call wipes out all previous configuration.
Man pages supplied.
All options are defaulted if not given.
Allows selection of any available field, rather than only the 10 or so default ones; the default list is used
if metrics=xxx is not given. As the RDC header evolves with more fields, the plugin should not need to.
The metrics argument accepts values that redefine the default list: 'base' and 'xgmi', which may be extended as hardware evolves.
The default metric list is 'base', which exclude xgmi communication metrics.
Requested metrics are checked for type compatibility (int64_t).
New option 'shape' allows the user to select set geometry: 0-  a single wide set of the selected metrics across each gpu; 1- N per-device sets, with a 'device' column included. 2- (reserved, but not supported) a single narrow set with a vector indexed by gpu for each metric. Some unfortunate poking through the abstraction boundary of sampler_base.h results; I have tried to make it obvious where this occurs. Getting rid of the 'shape' option is an anticipated improvement.
New option 'warmup' controls the delay between starting the amd library and attempting to sample. Do-nothing sample calls instead of sleep() are used to implement the delay.
The configuration schema= given is used as the base of a derived schema name, where the suffix is determined automatically by the shape= and metrics= options and number of gpus. For a given configuration, the schema name can be determined by running the ldms_rdc_schema_name utility supplied before configuring other plugins, if needed.
The ""business logic"" is isolated to rdcinfo.c and the plugin boilerplate is in rdc_plugin.c.
The obvious 'singleton' pattern is used, and lock management is confined to rdc_plugin.c so the author/maintainer of rdcinfo.c can view it as single-threaded.
Any failure in querying metrics causes the plugin to rdc_shutdown the gpu query library, otherwise the rdc library spews to log regularly, annoying sys admins.
Configure with this sampler on AMD platforms looks like:
./configure --enable-rdc RDC_CFLAGS=-I/opt/rocm/rdc/include RDC_LIBS=-L/opt/rocm/rdc/lib ...
Once built, a quick test is 'ldms-static-test.sh rdc_sampler' if ldms is in your PATH.

Open issues:

Is there any sort of ""block query"" command to get a batch of counters all at once instead of Nmetrics*Pgpus individual calls?
There is a probable race at ldmsd exit with the embedded amd library unless the rdc plugin is stopped and terminated. In some circumstances, this leads to a seg fault during process cleanup.","@baallan, @morrone: I think the single set per GPU is the way to go. Otherwise it becomes really difficult to decode all of this at the back-end. I believe that AMD would welcome our guidance here as to why this is the preferred approach.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,678,2021-04-02T14:56:05Z,2021-04-08T15:00:25Z,2021-04-08T21:20:29Z,MERGED,True,1474,0,12,https://github.com/baallan,backport rdc_sampler from amd on master to OVIS-4,2,[],https://github.com/ovis-hpc/ovis/pull/678,https://github.com/miketxli,8,https://github.com/ovis-hpc/ovis/pull/678#issuecomment-813566531,"Tested against a rhel7 ROCM 4.0.0 installation.
Notable minor differences from master rdc_sampler on which this is base:

Uses the 4.3.6 sampler_base api from OVIS-4 instead of the draft multi-instance API from master.
The sampler instance can be configured multiple times, but each call wipes out all previous configuration.
Man pages supplied.
All options are defaulted if not given.
Allows selection of any available field, rather than only the 10 or so default ones; the default list is used
if metrics=xxx is not given. As the RDC header evolves with more fields, the plugin should not need to.
The metrics argument accepts values that redefine the default list: 'base' and 'xgmi', which may be extended as hardware evolves.
The default metric list is 'base', which exclude xgmi communication metrics.
Requested metrics are checked for type compatibility (int64_t).
New option 'shape' allows the user to select set geometry: 0-  a single wide set of the selected metrics across each gpu; 1- N per-device sets, with a 'device' column included. 2- (reserved, but not supported) a single narrow set with a vector indexed by gpu for each metric. Some unfortunate poking through the abstraction boundary of sampler_base.h results; I have tried to make it obvious where this occurs. Getting rid of the 'shape' option is an anticipated improvement.
New option 'warmup' controls the delay between starting the amd library and attempting to sample. Do-nothing sample calls instead of sleep() are used to implement the delay.
The configuration schema= given is used as the base of a derived schema name, where the suffix is determined automatically by the shape= and metrics= options and number of gpus. For a given configuration, the schema name can be determined by running the ldms_rdc_schema_name utility supplied before configuring other plugins, if needed.
The ""business logic"" is isolated to rdcinfo.c and the plugin boilerplate is in rdc_plugin.c.
The obvious 'singleton' pattern is used, and lock management is confined to rdc_plugin.c so the author/maintainer of rdcinfo.c can view it as single-threaded.
Any failure in querying metrics causes the plugin to rdc_shutdown the gpu query library, otherwise the rdc library spews to log regularly, annoying sys admins.
Configure with this sampler on AMD platforms looks like:
./configure --enable-rdc RDC_CFLAGS=-I/opt/rocm/rdc/include RDC_LIBS=-L/opt/rocm/rdc/lib ...
Once built, a quick test is 'ldms-static-test.sh rdc_sampler' if ldms is in your PATH.

Open issues:

Is there any sort of ""block query"" command to get a batch of counters all at once instead of Nmetrics*Pgpus individual calls?
There is a probable race at ldmsd exit with the embedded amd library unless the rdc plugin is stopped and terminated. In some circumstances, this leads to a seg fault during process cleanup.","@baallan
Should we expect it to work on older hardware: Vega 10 [Radeon Instinct MI25]?  Yes, It should work with Vega10 and later.
Are there rhel-derived packages for RDC? Yes, see https://rocmdocs.amd.com/en/latest/Installation_Guide/Installation-Guide.html. It's not included in rcom-dkms. Try to do ""sudo yum install rdc"". It works in Ubuntu like ""sudo apt-get -y install rdc"". If that doesn't work, you can get the rpm from https://repo.radeon.com/rocm/yum/ , looking for rdc***.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,678,2021-04-02T14:56:05Z,2021-04-08T15:00:25Z,2021-04-08T21:20:29Z,MERGED,True,1474,0,12,https://github.com/baallan,backport rdc_sampler from amd on master to OVIS-4,2,[],https://github.com/ovis-hpc/ovis/pull/678,https://github.com/miketxli,9,https://github.com/ovis-hpc/ovis/pull/678#issuecomment-813597224,"Tested against a rhel7 ROCM 4.0.0 installation.
Notable minor differences from master rdc_sampler on which this is base:

Uses the 4.3.6 sampler_base api from OVIS-4 instead of the draft multi-instance API from master.
The sampler instance can be configured multiple times, but each call wipes out all previous configuration.
Man pages supplied.
All options are defaulted if not given.
Allows selection of any available field, rather than only the 10 or so default ones; the default list is used
if metrics=xxx is not given. As the RDC header evolves with more fields, the plugin should not need to.
The metrics argument accepts values that redefine the default list: 'base' and 'xgmi', which may be extended as hardware evolves.
The default metric list is 'base', which exclude xgmi communication metrics.
Requested metrics are checked for type compatibility (int64_t).
New option 'shape' allows the user to select set geometry: 0-  a single wide set of the selected metrics across each gpu; 1- N per-device sets, with a 'device' column included. 2- (reserved, but not supported) a single narrow set with a vector indexed by gpu for each metric. Some unfortunate poking through the abstraction boundary of sampler_base.h results; I have tried to make it obvious where this occurs. Getting rid of the 'shape' option is an anticipated improvement.
New option 'warmup' controls the delay between starting the amd library and attempting to sample. Do-nothing sample calls instead of sleep() are used to implement the delay.
The configuration schema= given is used as the base of a derived schema name, where the suffix is determined automatically by the shape= and metrics= options and number of gpus. For a given configuration, the schema name can be determined by running the ldms_rdc_schema_name utility supplied before configuring other plugins, if needed.
The ""business logic"" is isolated to rdcinfo.c and the plugin boilerplate is in rdc_plugin.c.
The obvious 'singleton' pattern is used, and lock management is confined to rdc_plugin.c so the author/maintainer of rdcinfo.c can view it as single-threaded.
Any failure in querying metrics causes the plugin to rdc_shutdown the gpu query library, otherwise the rdc library spews to log regularly, annoying sys admins.
Configure with this sampler on AMD platforms looks like:
./configure --enable-rdc RDC_CFLAGS=-I/opt/rocm/rdc/include RDC_LIBS=-L/opt/rocm/rdc/lib ...
Once built, a quick test is 'ldms-static-test.sh rdc_sampler' if ldms is in your PATH.

Open issues:

Is there any sort of ""block query"" command to get a batch of counters all at once instead of Nmetrics*Pgpus individual calls?
There is a probable race at ldmsd exit with the embedded amd library unless the rdc plugin is stopped and terminated. In some circumstances, this leads to a seg fault during process cleanup.","@baallan @morrone @tom95858
The single set per GPU is fine for AMD.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,678,2021-04-02T14:56:05Z,2021-04-08T15:00:25Z,2021-04-08T21:20:29Z,MERGED,True,1474,0,12,https://github.com/baallan,backport rdc_sampler from amd on master to OVIS-4,2,[],https://github.com/ovis-hpc/ovis/pull/678,https://github.com/miketxli,10,https://github.com/ovis-hpc/ovis/pull/678#issuecomment-813597992,"Tested against a rhel7 ROCM 4.0.0 installation.
Notable minor differences from master rdc_sampler on which this is base:

Uses the 4.3.6 sampler_base api from OVIS-4 instead of the draft multi-instance API from master.
The sampler instance can be configured multiple times, but each call wipes out all previous configuration.
Man pages supplied.
All options are defaulted if not given.
Allows selection of any available field, rather than only the 10 or so default ones; the default list is used
if metrics=xxx is not given. As the RDC header evolves with more fields, the plugin should not need to.
The metrics argument accepts values that redefine the default list: 'base' and 'xgmi', which may be extended as hardware evolves.
The default metric list is 'base', which exclude xgmi communication metrics.
Requested metrics are checked for type compatibility (int64_t).
New option 'shape' allows the user to select set geometry: 0-  a single wide set of the selected metrics across each gpu; 1- N per-device sets, with a 'device' column included. 2- (reserved, but not supported) a single narrow set with a vector indexed by gpu for each metric. Some unfortunate poking through the abstraction boundary of sampler_base.h results; I have tried to make it obvious where this occurs. Getting rid of the 'shape' option is an anticipated improvement.
New option 'warmup' controls the delay between starting the amd library and attempting to sample. Do-nothing sample calls instead of sleep() are used to implement the delay.
The configuration schema= given is used as the base of a derived schema name, where the suffix is determined automatically by the shape= and metrics= options and number of gpus. For a given configuration, the schema name can be determined by running the ldms_rdc_schema_name utility supplied before configuring other plugins, if needed.
The ""business logic"" is isolated to rdcinfo.c and the plugin boilerplate is in rdc_plugin.c.
The obvious 'singleton' pattern is used, and lock management is confined to rdc_plugin.c so the author/maintainer of rdcinfo.c can view it as single-threaded.
Any failure in querying metrics causes the plugin to rdc_shutdown the gpu query library, otherwise the rdc library spews to log regularly, annoying sys admins.
Configure with this sampler on AMD platforms looks like:
./configure --enable-rdc RDC_CFLAGS=-I/opt/rocm/rdc/include RDC_LIBS=-L/opt/rocm/rdc/lib ...
Once built, a quick test is 'ldms-static-test.sh rdc_sampler' if ldms is in your PATH.

Open issues:

Is there any sort of ""block query"" command to get a batch of counters all at once instead of Nmetrics*Pgpus individual calls?
There is a probable race at ldmsd exit with the embedded amd library unless the rdc plugin is stopped and terminated. In some circumstances, this leads to a seg fault during process cleanup.","@baallan  Does it work in a real gpu environment, as rewritten? I will try to build and test it on my test machine.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,678,2021-04-02T14:56:05Z,2021-04-08T15:00:25Z,2021-04-08T21:20:29Z,MERGED,True,1474,0,12,https://github.com/baallan,backport rdc_sampler from amd on master to OVIS-4,2,[],https://github.com/ovis-hpc/ovis/pull/678,https://github.com/miketxli,11,https://github.com/ovis-hpc/ovis/pull/678#issuecomment-813621321,"Tested against a rhel7 ROCM 4.0.0 installation.
Notable minor differences from master rdc_sampler on which this is base:

Uses the 4.3.6 sampler_base api from OVIS-4 instead of the draft multi-instance API from master.
The sampler instance can be configured multiple times, but each call wipes out all previous configuration.
Man pages supplied.
All options are defaulted if not given.
Allows selection of any available field, rather than only the 10 or so default ones; the default list is used
if metrics=xxx is not given. As the RDC header evolves with more fields, the plugin should not need to.
The metrics argument accepts values that redefine the default list: 'base' and 'xgmi', which may be extended as hardware evolves.
The default metric list is 'base', which exclude xgmi communication metrics.
Requested metrics are checked for type compatibility (int64_t).
New option 'shape' allows the user to select set geometry: 0-  a single wide set of the selected metrics across each gpu; 1- N per-device sets, with a 'device' column included. 2- (reserved, but not supported) a single narrow set with a vector indexed by gpu for each metric. Some unfortunate poking through the abstraction boundary of sampler_base.h results; I have tried to make it obvious where this occurs. Getting rid of the 'shape' option is an anticipated improvement.
New option 'warmup' controls the delay between starting the amd library and attempting to sample. Do-nothing sample calls instead of sleep() are used to implement the delay.
The configuration schema= given is used as the base of a derived schema name, where the suffix is determined automatically by the shape= and metrics= options and number of gpus. For a given configuration, the schema name can be determined by running the ldms_rdc_schema_name utility supplied before configuring other plugins, if needed.
The ""business logic"" is isolated to rdcinfo.c and the plugin boilerplate is in rdc_plugin.c.
The obvious 'singleton' pattern is used, and lock management is confined to rdc_plugin.c so the author/maintainer of rdcinfo.c can view it as single-threaded.
Any failure in querying metrics causes the plugin to rdc_shutdown the gpu query library, otherwise the rdc library spews to log regularly, annoying sys admins.
Configure with this sampler on AMD platforms looks like:
./configure --enable-rdc RDC_CFLAGS=-I/opt/rocm/rdc/include RDC_LIBS=-L/opt/rocm/rdc/lib ...
Once built, a quick test is 'ldms-static-test.sh rdc_sampler' if ldms is in your PATH.

Open issues:

Is there any sort of ""block query"" command to get a batch of counters all at once instead of Nmetrics*Pgpus individual calls?
There is a probable race at ldmsd exit with the embedded amd library unless the rdc plugin is stopped and terminated. In some circumstances, this leads to a seg fault during process cleanup.",@baallan I think we need a fix in configure.ac and Makefile.am in order to build this correctly.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,678,2021-04-02T14:56:05Z,2021-04-08T15:00:25Z,2021-04-08T21:20:29Z,MERGED,True,1474,0,12,https://github.com/baallan,backport rdc_sampler from amd on master to OVIS-4,2,[],https://github.com/ovis-hpc/ovis/pull/678,https://github.com/baallan,12,https://github.com/ovis-hpc/ovis/pull/678#issuecomment-813635922,"Tested against a rhel7 ROCM 4.0.0 installation.
Notable minor differences from master rdc_sampler on which this is base:

Uses the 4.3.6 sampler_base api from OVIS-4 instead of the draft multi-instance API from master.
The sampler instance can be configured multiple times, but each call wipes out all previous configuration.
Man pages supplied.
All options are defaulted if not given.
Allows selection of any available field, rather than only the 10 or so default ones; the default list is used
if metrics=xxx is not given. As the RDC header evolves with more fields, the plugin should not need to.
The metrics argument accepts values that redefine the default list: 'base' and 'xgmi', which may be extended as hardware evolves.
The default metric list is 'base', which exclude xgmi communication metrics.
Requested metrics are checked for type compatibility (int64_t).
New option 'shape' allows the user to select set geometry: 0-  a single wide set of the selected metrics across each gpu; 1- N per-device sets, with a 'device' column included. 2- (reserved, but not supported) a single narrow set with a vector indexed by gpu for each metric. Some unfortunate poking through the abstraction boundary of sampler_base.h results; I have tried to make it obvious where this occurs. Getting rid of the 'shape' option is an anticipated improvement.
New option 'warmup' controls the delay between starting the amd library and attempting to sample. Do-nothing sample calls instead of sleep() are used to implement the delay.
The configuration schema= given is used as the base of a derived schema name, where the suffix is determined automatically by the shape= and metrics= options and number of gpus. For a given configuration, the schema name can be determined by running the ldms_rdc_schema_name utility supplied before configuring other plugins, if needed.
The ""business logic"" is isolated to rdcinfo.c and the plugin boilerplate is in rdc_plugin.c.
The obvious 'singleton' pattern is used, and lock management is confined to rdc_plugin.c so the author/maintainer of rdcinfo.c can view it as single-threaded.
Any failure in querying metrics causes the plugin to rdc_shutdown the gpu query library, otherwise the rdc library spews to log regularly, annoying sys admins.
Configure with this sampler on AMD platforms looks like:
./configure --enable-rdc RDC_CFLAGS=-I/opt/rocm/rdc/include RDC_LIBS=-L/opt/rocm/rdc/lib ...
Once built, a quick test is 'ldms-static-test.sh rdc_sampler' if ldms is in your PATH.

Open issues:

Is there any sort of ""block query"" command to get a batch of counters all at once instead of Nmetrics*Pgpus individual calls?
There is a probable race at ldmsd exit with the embedded amd library unless the rdc plugin is stopped and terminated. In some circumstances, this leads to a seg fault during process cleanup.","@miketxli  trying to catch up on the conversations:

I have not yet tested this against real hardware. I'm working on getting a local hardware/software environment set up that provides a gpu I could test this against. This may take some time. If you happen to have a test node someplace I can access quickly, I'd be happy to work on it there with you instead.
I can remove the wide set option easily and go with a set per device if you are sure it is ok with your team going forward.
Because I do not have a full understanding yet of the rdc build/runtime environment, I haven't ported in the patches to configure.ac; my first glance left me thinking maybe there were more flags added to configure than needed.
Can you tell me if I need a specific version of gcc just to use rdc with real hardware? Is there some 'must match gcc version=Y' or 'must match gcc version used to build RPM named X""?
Please let me know how a build/test of the sampler configured with shape=1 goes after you've hacked around the missing bits in configure.ac and removed the baallan gunk in your makefile.am.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,678,2021-04-02T14:56:05Z,2021-04-08T15:00:25Z,2021-04-08T21:20:29Z,MERGED,True,1474,0,12,https://github.com/baallan,backport rdc_sampler from amd on master to OVIS-4,2,[],https://github.com/ovis-hpc/ovis/pull/678,https://github.com/miketxli,13,https://github.com/ovis-hpc/ovis/pull/678#issuecomment-813668080,"Tested against a rhel7 ROCM 4.0.0 installation.
Notable minor differences from master rdc_sampler on which this is base:

Uses the 4.3.6 sampler_base api from OVIS-4 instead of the draft multi-instance API from master.
The sampler instance can be configured multiple times, but each call wipes out all previous configuration.
Man pages supplied.
All options are defaulted if not given.
Allows selection of any available field, rather than only the 10 or so default ones; the default list is used
if metrics=xxx is not given. As the RDC header evolves with more fields, the plugin should not need to.
The metrics argument accepts values that redefine the default list: 'base' and 'xgmi', which may be extended as hardware evolves.
The default metric list is 'base', which exclude xgmi communication metrics.
Requested metrics are checked for type compatibility (int64_t).
New option 'shape' allows the user to select set geometry: 0-  a single wide set of the selected metrics across each gpu; 1- N per-device sets, with a 'device' column included. 2- (reserved, but not supported) a single narrow set with a vector indexed by gpu for each metric. Some unfortunate poking through the abstraction boundary of sampler_base.h results; I have tried to make it obvious where this occurs. Getting rid of the 'shape' option is an anticipated improvement.
New option 'warmup' controls the delay between starting the amd library and attempting to sample. Do-nothing sample calls instead of sleep() are used to implement the delay.
The configuration schema= given is used as the base of a derived schema name, where the suffix is determined automatically by the shape= and metrics= options and number of gpus. For a given configuration, the schema name can be determined by running the ldms_rdc_schema_name utility supplied before configuring other plugins, if needed.
The ""business logic"" is isolated to rdcinfo.c and the plugin boilerplate is in rdc_plugin.c.
The obvious 'singleton' pattern is used, and lock management is confined to rdc_plugin.c so the author/maintainer of rdcinfo.c can view it as single-threaded.
Any failure in querying metrics causes the plugin to rdc_shutdown the gpu query library, otherwise the rdc library spews to log regularly, annoying sys admins.
Configure with this sampler on AMD platforms looks like:
./configure --enable-rdc RDC_CFLAGS=-I/opt/rocm/rdc/include RDC_LIBS=-L/opt/rocm/rdc/lib ...
Once built, a quick test is 'ldms-static-test.sh rdc_sampler' if ldms is in your PATH.

Open issues:

Is there any sort of ""block query"" command to get a batch of counters all at once instead of Nmetrics*Pgpus individual calls?
There is a probable race at ldmsd exit with the embedded amd library unless the rdc plugin is stopped and terminated. In some circumstances, this leads to a seg fault during process cleanup.","I have test machines, but they are all located in AMD's internal network. I don't have machines that are accessible from outside.
We can keep shape configuration for now. It's bit easy for testing
Yes, RDC itself is based on rocm_smi library, which is a low level library and included in rocm-dkms. You really need get the rocm frame work and RDC installed + HW in order to test it.
RDC require cmake 3.15
I will try to hack configure.ac and makefile.am and just to get it compiled and tested.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,678,2021-04-02T14:56:05Z,2021-04-08T15:00:25Z,2021-04-08T21:20:29Z,MERGED,True,1474,0,12,https://github.com/baallan,backport rdc_sampler from amd on master to OVIS-4,2,[],https://github.com/ovis-hpc/ovis/pull/678,https://github.com/baallan,14,https://github.com/ovis-hpc/ovis/pull/678#issuecomment-814229900,"Tested against a rhel7 ROCM 4.0.0 installation.
Notable minor differences from master rdc_sampler on which this is base:

Uses the 4.3.6 sampler_base api from OVIS-4 instead of the draft multi-instance API from master.
The sampler instance can be configured multiple times, but each call wipes out all previous configuration.
Man pages supplied.
All options are defaulted if not given.
Allows selection of any available field, rather than only the 10 or so default ones; the default list is used
if metrics=xxx is not given. As the RDC header evolves with more fields, the plugin should not need to.
The metrics argument accepts values that redefine the default list: 'base' and 'xgmi', which may be extended as hardware evolves.
The default metric list is 'base', which exclude xgmi communication metrics.
Requested metrics are checked for type compatibility (int64_t).
New option 'shape' allows the user to select set geometry: 0-  a single wide set of the selected metrics across each gpu; 1- N per-device sets, with a 'device' column included. 2- (reserved, but not supported) a single narrow set with a vector indexed by gpu for each metric. Some unfortunate poking through the abstraction boundary of sampler_base.h results; I have tried to make it obvious where this occurs. Getting rid of the 'shape' option is an anticipated improvement.
New option 'warmup' controls the delay between starting the amd library and attempting to sample. Do-nothing sample calls instead of sleep() are used to implement the delay.
The configuration schema= given is used as the base of a derived schema name, where the suffix is determined automatically by the shape= and metrics= options and number of gpus. For a given configuration, the schema name can be determined by running the ldms_rdc_schema_name utility supplied before configuring other plugins, if needed.
The ""business logic"" is isolated to rdcinfo.c and the plugin boilerplate is in rdc_plugin.c.
The obvious 'singleton' pattern is used, and lock management is confined to rdc_plugin.c so the author/maintainer of rdcinfo.c can view it as single-threaded.
Any failure in querying metrics causes the plugin to rdc_shutdown the gpu query library, otherwise the rdc library spews to log regularly, annoying sys admins.
Configure with this sampler on AMD platforms looks like:
./configure --enable-rdc RDC_CFLAGS=-I/opt/rocm/rdc/include RDC_LIBS=-L/opt/rocm/rdc/lib ...
Once built, a quick test is 'ldms-static-test.sh rdc_sampler' if ldms is in your PATH.

Open issues:

Is there any sort of ""block query"" command to get a batch of counters all at once instead of Nmetrics*Pgpus individual calls?
There is a probable race at ldmsd exit with the embedded amd library unless the rdc plugin is stopped and terminated. In some circumstances, this leads to a seg fault during process cleanup.","@miketxli It looks like I may have a complete rdc package environment now on a local gpu host.  Is there a simple command line check of the environment adequateness which you can recommend, perhaps a utility showing something about the GPUs discovered?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,678,2021-04-02T14:56:05Z,2021-04-08T15:00:25Z,2021-04-08T21:20:29Z,MERGED,True,1474,0,12,https://github.com/baallan,backport rdc_sampler from amd on master to OVIS-4,2,[],https://github.com/ovis-hpc/ovis/pull/678,https://github.com/miketxli,15,https://github.com/ovis-hpc/ovis/pull/678#issuecomment-814313835,"Tested against a rhel7 ROCM 4.0.0 installation.
Notable minor differences from master rdc_sampler on which this is base:

Uses the 4.3.6 sampler_base api from OVIS-4 instead of the draft multi-instance API from master.
The sampler instance can be configured multiple times, but each call wipes out all previous configuration.
Man pages supplied.
All options are defaulted if not given.
Allows selection of any available field, rather than only the 10 or so default ones; the default list is used
if metrics=xxx is not given. As the RDC header evolves with more fields, the plugin should not need to.
The metrics argument accepts values that redefine the default list: 'base' and 'xgmi', which may be extended as hardware evolves.
The default metric list is 'base', which exclude xgmi communication metrics.
Requested metrics are checked for type compatibility (int64_t).
New option 'shape' allows the user to select set geometry: 0-  a single wide set of the selected metrics across each gpu; 1- N per-device sets, with a 'device' column included. 2- (reserved, but not supported) a single narrow set with a vector indexed by gpu for each metric. Some unfortunate poking through the abstraction boundary of sampler_base.h results; I have tried to make it obvious where this occurs. Getting rid of the 'shape' option is an anticipated improvement.
New option 'warmup' controls the delay between starting the amd library and attempting to sample. Do-nothing sample calls instead of sleep() are used to implement the delay.
The configuration schema= given is used as the base of a derived schema name, where the suffix is determined automatically by the shape= and metrics= options and number of gpus. For a given configuration, the schema name can be determined by running the ldms_rdc_schema_name utility supplied before configuring other plugins, if needed.
The ""business logic"" is isolated to rdcinfo.c and the plugin boilerplate is in rdc_plugin.c.
The obvious 'singleton' pattern is used, and lock management is confined to rdc_plugin.c so the author/maintainer of rdcinfo.c can view it as single-threaded.
Any failure in querying metrics causes the plugin to rdc_shutdown the gpu query library, otherwise the rdc library spews to log regularly, annoying sys admins.
Configure with this sampler on AMD platforms looks like:
./configure --enable-rdc RDC_CFLAGS=-I/opt/rocm/rdc/include RDC_LIBS=-L/opt/rocm/rdc/lib ...
Once built, a quick test is 'ldms-static-test.sh rdc_sampler' if ldms is in your PATH.

Open issues:

Is there any sort of ""block query"" command to get a batch of counters all at once instead of Nmetrics*Pgpus individual calls?
There is a probable race at ldmsd exit with the embedded amd library unless the rdc plugin is stopped and terminated. In some circumstances, this leads to a seg fault during process cleanup.","@miketxli It looks like I may have a complete rdc package environment now on a local gpu host. Is there a simple command line check of the environment adequateness which you can recommend, perhaps a utility showing something about the GPUs discovered?

run /opt/rocm/bin/rocm-smi -a",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,678,2021-04-02T14:56:05Z,2021-04-08T15:00:25Z,2021-04-08T21:20:29Z,MERGED,True,1474,0,12,https://github.com/baallan,backport rdc_sampler from amd on master to OVIS-4,2,[],https://github.com/ovis-hpc/ovis/pull/678,https://github.com/baallan,16,https://github.com/ovis-hpc/ovis/pull/678#issuecomment-815391334,"Tested against a rhel7 ROCM 4.0.0 installation.
Notable minor differences from master rdc_sampler on which this is base:

Uses the 4.3.6 sampler_base api from OVIS-4 instead of the draft multi-instance API from master.
The sampler instance can be configured multiple times, but each call wipes out all previous configuration.
Man pages supplied.
All options are defaulted if not given.
Allows selection of any available field, rather than only the 10 or so default ones; the default list is used
if metrics=xxx is not given. As the RDC header evolves with more fields, the plugin should not need to.
The metrics argument accepts values that redefine the default list: 'base' and 'xgmi', which may be extended as hardware evolves.
The default metric list is 'base', which exclude xgmi communication metrics.
Requested metrics are checked for type compatibility (int64_t).
New option 'shape' allows the user to select set geometry: 0-  a single wide set of the selected metrics across each gpu; 1- N per-device sets, with a 'device' column included. 2- (reserved, but not supported) a single narrow set with a vector indexed by gpu for each metric. Some unfortunate poking through the abstraction boundary of sampler_base.h results; I have tried to make it obvious where this occurs. Getting rid of the 'shape' option is an anticipated improvement.
New option 'warmup' controls the delay between starting the amd library and attempting to sample. Do-nothing sample calls instead of sleep() are used to implement the delay.
The configuration schema= given is used as the base of a derived schema name, where the suffix is determined automatically by the shape= and metrics= options and number of gpus. For a given configuration, the schema name can be determined by running the ldms_rdc_schema_name utility supplied before configuring other plugins, if needed.
The ""business logic"" is isolated to rdcinfo.c and the plugin boilerplate is in rdc_plugin.c.
The obvious 'singleton' pattern is used, and lock management is confined to rdc_plugin.c so the author/maintainer of rdcinfo.c can view it as single-threaded.
Any failure in querying metrics causes the plugin to rdc_shutdown the gpu query library, otherwise the rdc library spews to log regularly, annoying sys admins.
Configure with this sampler on AMD platforms looks like:
./configure --enable-rdc RDC_CFLAGS=-I/opt/rocm/rdc/include RDC_LIBS=-L/opt/rocm/rdc/lib ...
Once built, a quick test is 'ldms-static-test.sh rdc_sampler' if ldms is in your PATH.

Open issues:

Is there any sort of ""block query"" command to get a batch of counters all at once instead of Nmetrics*Pgpus individual calls?
There is a probable race at ldmsd exit with the embedded amd library unless the rdc plugin is stopped and terminated. In some circumstances, this leads to a seg fault during process cleanup.","@miketxli I think this is all ready to go. Please let us know if it runs for you (notice the change in configure arguments and the test case provided in the PR main comment above).
@valleydlr I believe we have reached 'good enough' in the amd sampler. A separate PR addresses memory bugs turned up while testing this. @tom95858 can merge at his convenience or wait for test feedback from @miketxli.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,678,2021-04-02T14:56:05Z,2021-04-08T15:00:25Z,2021-04-08T21:20:29Z,MERGED,True,1474,0,12,https://github.com/baallan,backport rdc_sampler from amd on master to OVIS-4,2,[],https://github.com/ovis-hpc/ovis/pull/678,https://github.com/miketxli,17,https://github.com/ovis-hpc/ovis/pull/678#issuecomment-815939987,"Tested against a rhel7 ROCM 4.0.0 installation.
Notable minor differences from master rdc_sampler on which this is base:

Uses the 4.3.6 sampler_base api from OVIS-4 instead of the draft multi-instance API from master.
The sampler instance can be configured multiple times, but each call wipes out all previous configuration.
Man pages supplied.
All options are defaulted if not given.
Allows selection of any available field, rather than only the 10 or so default ones; the default list is used
if metrics=xxx is not given. As the RDC header evolves with more fields, the plugin should not need to.
The metrics argument accepts values that redefine the default list: 'base' and 'xgmi', which may be extended as hardware evolves.
The default metric list is 'base', which exclude xgmi communication metrics.
Requested metrics are checked for type compatibility (int64_t).
New option 'shape' allows the user to select set geometry: 0-  a single wide set of the selected metrics across each gpu; 1- N per-device sets, with a 'device' column included. 2- (reserved, but not supported) a single narrow set with a vector indexed by gpu for each metric. Some unfortunate poking through the abstraction boundary of sampler_base.h results; I have tried to make it obvious where this occurs. Getting rid of the 'shape' option is an anticipated improvement.
New option 'warmup' controls the delay between starting the amd library and attempting to sample. Do-nothing sample calls instead of sleep() are used to implement the delay.
The configuration schema= given is used as the base of a derived schema name, where the suffix is determined automatically by the shape= and metrics= options and number of gpus. For a given configuration, the schema name can be determined by running the ldms_rdc_schema_name utility supplied before configuring other plugins, if needed.
The ""business logic"" is isolated to rdcinfo.c and the plugin boilerplate is in rdc_plugin.c.
The obvious 'singleton' pattern is used, and lock management is confined to rdc_plugin.c so the author/maintainer of rdcinfo.c can view it as single-threaded.
Any failure in querying metrics causes the plugin to rdc_shutdown the gpu query library, otherwise the rdc library spews to log regularly, annoying sys admins.
Configure with this sampler on AMD platforms looks like:
./configure --enable-rdc RDC_CFLAGS=-I/opt/rocm/rdc/include RDC_LIBS=-L/opt/rocm/rdc/lib ...
Once built, a quick test is 'ldms-static-test.sh rdc_sampler' if ldms is in your PATH.

Open issues:

Is there any sort of ""block query"" command to get a batch of counters all at once instead of Nmetrics*Pgpus individual calls?
There is a probable race at ldmsd exit with the embedded amd library unless the rdc plugin is stopped and terminated. In some circumstances, this leads to a seg fault during process cleanup.","@miketxli I think this is all ready to go. Please let us know if it runs for you (notice the change in configure arguments and the test case provided in the PR main comment above).
@valleydlr I believe we have reached 'good enough' in the amd sampler. A separate PR addresses memory bugs turned up while testing this. @tom95858 can merge at his convenience or wait for test feedback from @miketxli.

Great! I'm good with this, have tested with Vega10 and new Navi card. It works as expected.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,678,2021-04-02T14:56:05Z,2021-04-08T15:00:25Z,2021-04-08T21:20:29Z,MERGED,True,1474,0,12,https://github.com/baallan,backport rdc_sampler from amd on master to OVIS-4,2,[],https://github.com/ovis-hpc/ovis/pull/678,https://github.com/baallan,18,https://github.com/ovis-hpc/ovis/pull/678#issuecomment-815949356,"Tested against a rhel7 ROCM 4.0.0 installation.
Notable minor differences from master rdc_sampler on which this is base:

Uses the 4.3.6 sampler_base api from OVIS-4 instead of the draft multi-instance API from master.
The sampler instance can be configured multiple times, but each call wipes out all previous configuration.
Man pages supplied.
All options are defaulted if not given.
Allows selection of any available field, rather than only the 10 or so default ones; the default list is used
if metrics=xxx is not given. As the RDC header evolves with more fields, the plugin should not need to.
The metrics argument accepts values that redefine the default list: 'base' and 'xgmi', which may be extended as hardware evolves.
The default metric list is 'base', which exclude xgmi communication metrics.
Requested metrics are checked for type compatibility (int64_t).
New option 'shape' allows the user to select set geometry: 0-  a single wide set of the selected metrics across each gpu; 1- N per-device sets, with a 'device' column included. 2- (reserved, but not supported) a single narrow set with a vector indexed by gpu for each metric. Some unfortunate poking through the abstraction boundary of sampler_base.h results; I have tried to make it obvious where this occurs. Getting rid of the 'shape' option is an anticipated improvement.
New option 'warmup' controls the delay between starting the amd library and attempting to sample. Do-nothing sample calls instead of sleep() are used to implement the delay.
The configuration schema= given is used as the base of a derived schema name, where the suffix is determined automatically by the shape= and metrics= options and number of gpus. For a given configuration, the schema name can be determined by running the ldms_rdc_schema_name utility supplied before configuring other plugins, if needed.
The ""business logic"" is isolated to rdcinfo.c and the plugin boilerplate is in rdc_plugin.c.
The obvious 'singleton' pattern is used, and lock management is confined to rdc_plugin.c so the author/maintainer of rdcinfo.c can view it as single-threaded.
Any failure in querying metrics causes the plugin to rdc_shutdown the gpu query library, otherwise the rdc library spews to log regularly, annoying sys admins.
Configure with this sampler on AMD platforms looks like:
./configure --enable-rdc RDC_CFLAGS=-I/opt/rocm/rdc/include RDC_LIBS=-L/opt/rocm/rdc/lib ...
Once built, a quick test is 'ldms-static-test.sh rdc_sampler' if ldms is in your PATH.

Open issues:

Is there any sort of ""block query"" command to get a batch of counters all at once instead of Nmetrics*Pgpus individual calls?
There is a probable race at ldmsd exit with the embedded amd library unless the rdc plugin is stopped and terminated. In some circumstances, this leads to a seg fault during process cleanup.",@miketxli Thanks for your help in getting this capability added!,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,678,2021-04-02T14:56:05Z,2021-04-08T15:00:25Z,2021-04-08T21:20:29Z,MERGED,True,1474,0,12,https://github.com/baallan,backport rdc_sampler from amd on master to OVIS-4,2,[],https://github.com/ovis-hpc/ovis/pull/678,https://github.com/morrone,19,https://github.com/ovis-hpc/ovis/pull/678#issuecomment-816030689,"Tested against a rhel7 ROCM 4.0.0 installation.
Notable minor differences from master rdc_sampler on which this is base:

Uses the 4.3.6 sampler_base api from OVIS-4 instead of the draft multi-instance API from master.
The sampler instance can be configured multiple times, but each call wipes out all previous configuration.
Man pages supplied.
All options are defaulted if not given.
Allows selection of any available field, rather than only the 10 or so default ones; the default list is used
if metrics=xxx is not given. As the RDC header evolves with more fields, the plugin should not need to.
The metrics argument accepts values that redefine the default list: 'base' and 'xgmi', which may be extended as hardware evolves.
The default metric list is 'base', which exclude xgmi communication metrics.
Requested metrics are checked for type compatibility (int64_t).
New option 'shape' allows the user to select set geometry: 0-  a single wide set of the selected metrics across each gpu; 1- N per-device sets, with a 'device' column included. 2- (reserved, but not supported) a single narrow set with a vector indexed by gpu for each metric. Some unfortunate poking through the abstraction boundary of sampler_base.h results; I have tried to make it obvious where this occurs. Getting rid of the 'shape' option is an anticipated improvement.
New option 'warmup' controls the delay between starting the amd library and attempting to sample. Do-nothing sample calls instead of sleep() are used to implement the delay.
The configuration schema= given is used as the base of a derived schema name, where the suffix is determined automatically by the shape= and metrics= options and number of gpus. For a given configuration, the schema name can be determined by running the ldms_rdc_schema_name utility supplied before configuring other plugins, if needed.
The ""business logic"" is isolated to rdcinfo.c and the plugin boilerplate is in rdc_plugin.c.
The obvious 'singleton' pattern is used, and lock management is confined to rdc_plugin.c so the author/maintainer of rdcinfo.c can view it as single-threaded.
Any failure in querying metrics causes the plugin to rdc_shutdown the gpu query library, otherwise the rdc library spews to log regularly, annoying sys admins.
Configure with this sampler on AMD platforms looks like:
./configure --enable-rdc RDC_CFLAGS=-I/opt/rocm/rdc/include RDC_LIBS=-L/opt/rocm/rdc/lib ...
Once built, a quick test is 'ldms-static-test.sh rdc_sampler' if ldms is in your PATH.

Open issues:

Is there any sort of ""block query"" command to get a batch of counters all at once instead of Nmetrics*Pgpus individual calls?
There is a probable race at ldmsd exit with the embedded amd library unless the rdc plugin is stopped and terminated. In some circumstances, this leads to a seg fault during process cleanup.",@tom95858 I thought that we we dropping the shape stuff before landing? At the very least I think we should switch the default to per-device  before we do a release. Better would be to drop the extra code.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,678,2021-04-02T14:56:05Z,2021-04-08T15:00:25Z,2021-04-08T21:20:29Z,MERGED,True,1474,0,12,https://github.com/baallan,backport rdc_sampler from amd on master to OVIS-4,2,[],https://github.com/ovis-hpc/ovis/pull/678,https://github.com/tom95858,20,https://github.com/ovis-hpc/ovis/pull/678#issuecomment-816053900,"Tested against a rhel7 ROCM 4.0.0 installation.
Notable minor differences from master rdc_sampler on which this is base:

Uses the 4.3.6 sampler_base api from OVIS-4 instead of the draft multi-instance API from master.
The sampler instance can be configured multiple times, but each call wipes out all previous configuration.
Man pages supplied.
All options are defaulted if not given.
Allows selection of any available field, rather than only the 10 or so default ones; the default list is used
if metrics=xxx is not given. As the RDC header evolves with more fields, the plugin should not need to.
The metrics argument accepts values that redefine the default list: 'base' and 'xgmi', which may be extended as hardware evolves.
The default metric list is 'base', which exclude xgmi communication metrics.
Requested metrics are checked for type compatibility (int64_t).
New option 'shape' allows the user to select set geometry: 0-  a single wide set of the selected metrics across each gpu; 1- N per-device sets, with a 'device' column included. 2- (reserved, but not supported) a single narrow set with a vector indexed by gpu for each metric. Some unfortunate poking through the abstraction boundary of sampler_base.h results; I have tried to make it obvious where this occurs. Getting rid of the 'shape' option is an anticipated improvement.
New option 'warmup' controls the delay between starting the amd library and attempting to sample. Do-nothing sample calls instead of sleep() are used to implement the delay.
The configuration schema= given is used as the base of a derived schema name, where the suffix is determined automatically by the shape= and metrics= options and number of gpus. For a given configuration, the schema name can be determined by running the ldms_rdc_schema_name utility supplied before configuring other plugins, if needed.
The ""business logic"" is isolated to rdcinfo.c and the plugin boilerplate is in rdc_plugin.c.
The obvious 'singleton' pattern is used, and lock management is confined to rdc_plugin.c so the author/maintainer of rdcinfo.c can view it as single-threaded.
Any failure in querying metrics causes the plugin to rdc_shutdown the gpu query library, otherwise the rdc library spews to log regularly, annoying sys admins.
Configure with this sampler on AMD platforms looks like:
./configure --enable-rdc RDC_CFLAGS=-I/opt/rocm/rdc/include RDC_LIBS=-L/opt/rocm/rdc/lib ...
Once built, a quick test is 'ldms-static-test.sh rdc_sampler' if ldms is in your PATH.

Open issues:

Is there any sort of ""block query"" command to get a batch of counters all at once instead of Nmetrics*Pgpus individual calls?
There is a probable race at ldmsd exit with the embedded amd library unless the rdc plugin is stopped and terminated. In some circumstances, this leads to a seg fault during process cleanup.","@morrone, I apologize if this was a review requirement that I missed. I think @miketxli and @baallan were of the 'good enough' mind set. Given that one needs to install rocm etc... to even get this thing to compile, it seems relatively low risk to get this in so that it is more convenient for AMD, etc... to test and improve.
That said, I prefer switching the default to per-device if that is a currently implemented configuration option.  I don't see any benefit to combining everything into one set (the current default). Could you or someone else submit a pull request so that we can litigate this...soon.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,678,2021-04-02T14:56:05Z,2021-04-08T15:00:25Z,2021-04-08T21:20:29Z,MERGED,True,1474,0,12,https://github.com/baallan,backport rdc_sampler from amd on master to OVIS-4,2,[],https://github.com/ovis-hpc/ovis/pull/678,https://github.com/baallan,21,https://github.com/ovis-hpc/ovis/pull/678#issuecomment-816070204,"Tested against a rhel7 ROCM 4.0.0 installation.
Notable minor differences from master rdc_sampler on which this is base:

Uses the 4.3.6 sampler_base api from OVIS-4 instead of the draft multi-instance API from master.
The sampler instance can be configured multiple times, but each call wipes out all previous configuration.
Man pages supplied.
All options are defaulted if not given.
Allows selection of any available field, rather than only the 10 or so default ones; the default list is used
if metrics=xxx is not given. As the RDC header evolves with more fields, the plugin should not need to.
The metrics argument accepts values that redefine the default list: 'base' and 'xgmi', which may be extended as hardware evolves.
The default metric list is 'base', which exclude xgmi communication metrics.
Requested metrics are checked for type compatibility (int64_t).
New option 'shape' allows the user to select set geometry: 0-  a single wide set of the selected metrics across each gpu; 1- N per-device sets, with a 'device' column included. 2- (reserved, but not supported) a single narrow set with a vector indexed by gpu for each metric. Some unfortunate poking through the abstraction boundary of sampler_base.h results; I have tried to make it obvious where this occurs. Getting rid of the 'shape' option is an anticipated improvement.
New option 'warmup' controls the delay between starting the amd library and attempting to sample. Do-nothing sample calls instead of sleep() are used to implement the delay.
The configuration schema= given is used as the base of a derived schema name, where the suffix is determined automatically by the shape= and metrics= options and number of gpus. For a given configuration, the schema name can be determined by running the ldms_rdc_schema_name utility supplied before configuring other plugins, if needed.
The ""business logic"" is isolated to rdcinfo.c and the plugin boilerplate is in rdc_plugin.c.
The obvious 'singleton' pattern is used, and lock management is confined to rdc_plugin.c so the author/maintainer of rdcinfo.c can view it as single-threaded.
Any failure in querying metrics causes the plugin to rdc_shutdown the gpu query library, otherwise the rdc library spews to log regularly, annoying sys admins.
Configure with this sampler on AMD platforms looks like:
./configure --enable-rdc RDC_CFLAGS=-I/opt/rocm/rdc/include RDC_LIBS=-L/opt/rocm/rdc/lib ...
Once built, a quick test is 'ldms-static-test.sh rdc_sampler' if ldms is in your PATH.

Open issues:

Is there any sort of ""block query"" command to get a batch of counters all at once instead of Nmetrics*Pgpus individual calls?
There is a probable race at ldmsd exit with the embedded amd library unless the rdc plugin is stopped and terminated. In some circumstances, this leads to a seg fault during process cleanup.","@morrone If we get an all-clear from AMD to remove the wide set option, I will submit a revision to remove it. If you want to submit a patch in the meanwhile to switch the default from wide to per device sets, please go ahead.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,678,2021-04-02T14:56:05Z,2021-04-08T15:00:25Z,2021-04-08T21:20:29Z,MERGED,True,1474,0,12,https://github.com/baallan,backport rdc_sampler from amd on master to OVIS-4,2,[],https://github.com/ovis-hpc/ovis/pull/678,https://github.com/tom95858,22,https://github.com/ovis-hpc/ovis/pull/678#issuecomment-816093217,"Tested against a rhel7 ROCM 4.0.0 installation.
Notable minor differences from master rdc_sampler on which this is base:

Uses the 4.3.6 sampler_base api from OVIS-4 instead of the draft multi-instance API from master.
The sampler instance can be configured multiple times, but each call wipes out all previous configuration.
Man pages supplied.
All options are defaulted if not given.
Allows selection of any available field, rather than only the 10 or so default ones; the default list is used
if metrics=xxx is not given. As the RDC header evolves with more fields, the plugin should not need to.
The metrics argument accepts values that redefine the default list: 'base' and 'xgmi', which may be extended as hardware evolves.
The default metric list is 'base', which exclude xgmi communication metrics.
Requested metrics are checked for type compatibility (int64_t).
New option 'shape' allows the user to select set geometry: 0-  a single wide set of the selected metrics across each gpu; 1- N per-device sets, with a 'device' column included. 2- (reserved, but not supported) a single narrow set with a vector indexed by gpu for each metric. Some unfortunate poking through the abstraction boundary of sampler_base.h results; I have tried to make it obvious where this occurs. Getting rid of the 'shape' option is an anticipated improvement.
New option 'warmup' controls the delay between starting the amd library and attempting to sample. Do-nothing sample calls instead of sleep() are used to implement the delay.
The configuration schema= given is used as the base of a derived schema name, where the suffix is determined automatically by the shape= and metrics= options and number of gpus. For a given configuration, the schema name can be determined by running the ldms_rdc_schema_name utility supplied before configuring other plugins, if needed.
The ""business logic"" is isolated to rdcinfo.c and the plugin boilerplate is in rdc_plugin.c.
The obvious 'singleton' pattern is used, and lock management is confined to rdc_plugin.c so the author/maintainer of rdcinfo.c can view it as single-threaded.
Any failure in querying metrics causes the plugin to rdc_shutdown the gpu query library, otherwise the rdc library spews to log regularly, annoying sys admins.
Configure with this sampler on AMD platforms looks like:
./configure --enable-rdc RDC_CFLAGS=-I/opt/rocm/rdc/include RDC_LIBS=-L/opt/rocm/rdc/lib ...
Once built, a quick test is 'ldms-static-test.sh rdc_sampler' if ldms is in your PATH.

Open issues:

Is there any sort of ""block query"" command to get a batch of counters all at once instead of Nmetrics*Pgpus individual calls?
There is a probable race at ldmsd exit with the embedded amd library unless the rdc plugin is stopped and terminated. In some circumstances, this leads to a seg fault during process cleanup.","Thanks @baallan for getting this all refactored. This is great.
I hope this doesn't offend anyone, particularly, @miketxli, but if we feel that separate sets is a condition of acceptance, we simply need to say so and explain why. I also think that having this as a per-sampler configuration option is not a good idea and should be discouraged; note that developers adding new samplers will look at this latest one for guidance.
I feel that separate sets per resource instance (GPU) should be the preferred approach  going forward. Requiring analysis modules (and/or stores) to separate device instances from a metric set is inherently hard to do and per resource type dependent.  We have resolved the set delete issue (to handle resources coming and going). It seems appropriate and preferred to move forward with a set-per-resource approach unless there is a very good reason to do otherwise.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,678,2021-04-02T14:56:05Z,2021-04-08T15:00:25Z,2021-04-08T21:20:29Z,MERGED,True,1474,0,12,https://github.com/baallan,backport rdc_sampler from amd on master to OVIS-4,2,[],https://github.com/ovis-hpc/ovis/pull/678,https://github.com/miketxli,23,https://github.com/ovis-hpc/ovis/pull/678#issuecomment-816156759,"Tested against a rhel7 ROCM 4.0.0 installation.
Notable minor differences from master rdc_sampler on which this is base:

Uses the 4.3.6 sampler_base api from OVIS-4 instead of the draft multi-instance API from master.
The sampler instance can be configured multiple times, but each call wipes out all previous configuration.
Man pages supplied.
All options are defaulted if not given.
Allows selection of any available field, rather than only the 10 or so default ones; the default list is used
if metrics=xxx is not given. As the RDC header evolves with more fields, the plugin should not need to.
The metrics argument accepts values that redefine the default list: 'base' and 'xgmi', which may be extended as hardware evolves.
The default metric list is 'base', which exclude xgmi communication metrics.
Requested metrics are checked for type compatibility (int64_t).
New option 'shape' allows the user to select set geometry: 0-  a single wide set of the selected metrics across each gpu; 1- N per-device sets, with a 'device' column included. 2- (reserved, but not supported) a single narrow set with a vector indexed by gpu for each metric. Some unfortunate poking through the abstraction boundary of sampler_base.h results; I have tried to make it obvious where this occurs. Getting rid of the 'shape' option is an anticipated improvement.
New option 'warmup' controls the delay between starting the amd library and attempting to sample. Do-nothing sample calls instead of sleep() are used to implement the delay.
The configuration schema= given is used as the base of a derived schema name, where the suffix is determined automatically by the shape= and metrics= options and number of gpus. For a given configuration, the schema name can be determined by running the ldms_rdc_schema_name utility supplied before configuring other plugins, if needed.
The ""business logic"" is isolated to rdcinfo.c and the plugin boilerplate is in rdc_plugin.c.
The obvious 'singleton' pattern is used, and lock management is confined to rdc_plugin.c so the author/maintainer of rdcinfo.c can view it as single-threaded.
Any failure in querying metrics causes the plugin to rdc_shutdown the gpu query library, otherwise the rdc library spews to log regularly, annoying sys admins.
Configure with this sampler on AMD platforms looks like:
./configure --enable-rdc RDC_CFLAGS=-I/opt/rocm/rdc/include RDC_LIBS=-L/opt/rocm/rdc/lib ...
Once built, a quick test is 'ldms-static-test.sh rdc_sampler' if ldms is in your PATH.

Open issues:

Is there any sort of ""block query"" command to get a batch of counters all at once instead of Nmetrics*Pgpus individual calls?
There is a probable race at ldmsd exit with the embedded amd library unless the rdc plugin is stopped and terminated. In some circumstances, this leads to a seg fault during process cleanup.",@tom95858  There isn't any particular reason we have to keep per-sampler configuration. We are good with per-GPU configuration only.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,678,2021-04-02T14:56:05Z,2021-04-08T15:00:25Z,2021-04-08T21:20:29Z,MERGED,True,1474,0,12,https://github.com/baallan,backport rdc_sampler from amd on master to OVIS-4,2,[],https://github.com/ovis-hpc/ovis/pull/678,https://github.com/baallan,24,https://github.com/ovis-hpc/ovis/pull/678#issuecomment-816202621,"Tested against a rhel7 ROCM 4.0.0 installation.
Notable minor differences from master rdc_sampler on which this is base:

Uses the 4.3.6 sampler_base api from OVIS-4 instead of the draft multi-instance API from master.
The sampler instance can be configured multiple times, but each call wipes out all previous configuration.
Man pages supplied.
All options are defaulted if not given.
Allows selection of any available field, rather than only the 10 or so default ones; the default list is used
if metrics=xxx is not given. As the RDC header evolves with more fields, the plugin should not need to.
The metrics argument accepts values that redefine the default list: 'base' and 'xgmi', which may be extended as hardware evolves.
The default metric list is 'base', which exclude xgmi communication metrics.
Requested metrics are checked for type compatibility (int64_t).
New option 'shape' allows the user to select set geometry: 0-  a single wide set of the selected metrics across each gpu; 1- N per-device sets, with a 'device' column included. 2- (reserved, but not supported) a single narrow set with a vector indexed by gpu for each metric. Some unfortunate poking through the abstraction boundary of sampler_base.h results; I have tried to make it obvious where this occurs. Getting rid of the 'shape' option is an anticipated improvement.
New option 'warmup' controls the delay between starting the amd library and attempting to sample. Do-nothing sample calls instead of sleep() are used to implement the delay.
The configuration schema= given is used as the base of a derived schema name, where the suffix is determined automatically by the shape= and metrics= options and number of gpus. For a given configuration, the schema name can be determined by running the ldms_rdc_schema_name utility supplied before configuring other plugins, if needed.
The ""business logic"" is isolated to rdcinfo.c and the plugin boilerplate is in rdc_plugin.c.
The obvious 'singleton' pattern is used, and lock management is confined to rdc_plugin.c so the author/maintainer of rdcinfo.c can view it as single-threaded.
Any failure in querying metrics causes the plugin to rdc_shutdown the gpu query library, otherwise the rdc library spews to log regularly, annoying sys admins.
Configure with this sampler on AMD platforms looks like:
./configure --enable-rdc RDC_CFLAGS=-I/opt/rocm/rdc/include RDC_LIBS=-L/opt/rocm/rdc/lib ...
Once built, a quick test is 'ldms-static-test.sh rdc_sampler' if ldms is in your PATH.

Open issues:

Is there any sort of ""block query"" command to get a batch of counters all at once instead of Nmetrics*Pgpus individual calls?
There is a probable race at ldmsd exit with the embedded amd library unless the rdc plugin is stopped and terminated. In some circumstances, this leads to a seg fault during process cleanup.",@miketxli @tom95858 @morrone I will remove the wide set option in another PR.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,678,2021-04-02T14:56:05Z,2021-04-08T15:00:25Z,2021-04-08T21:20:29Z,MERGED,True,1474,0,12,https://github.com/baallan,backport rdc_sampler from amd on master to OVIS-4,2,[],https://github.com/ovis-hpc/ovis/pull/678,https://github.com/tom95858,25,https://github.com/ovis-hpc/ovis/pull/678#issuecomment-816213871,"Tested against a rhel7 ROCM 4.0.0 installation.
Notable minor differences from master rdc_sampler on which this is base:

Uses the 4.3.6 sampler_base api from OVIS-4 instead of the draft multi-instance API from master.
The sampler instance can be configured multiple times, but each call wipes out all previous configuration.
Man pages supplied.
All options are defaulted if not given.
Allows selection of any available field, rather than only the 10 or so default ones; the default list is used
if metrics=xxx is not given. As the RDC header evolves with more fields, the plugin should not need to.
The metrics argument accepts values that redefine the default list: 'base' and 'xgmi', which may be extended as hardware evolves.
The default metric list is 'base', which exclude xgmi communication metrics.
Requested metrics are checked for type compatibility (int64_t).
New option 'shape' allows the user to select set geometry: 0-  a single wide set of the selected metrics across each gpu; 1- N per-device sets, with a 'device' column included. 2- (reserved, but not supported) a single narrow set with a vector indexed by gpu for each metric. Some unfortunate poking through the abstraction boundary of sampler_base.h results; I have tried to make it obvious where this occurs. Getting rid of the 'shape' option is an anticipated improvement.
New option 'warmup' controls the delay between starting the amd library and attempting to sample. Do-nothing sample calls instead of sleep() are used to implement the delay.
The configuration schema= given is used as the base of a derived schema name, where the suffix is determined automatically by the shape= and metrics= options and number of gpus. For a given configuration, the schema name can be determined by running the ldms_rdc_schema_name utility supplied before configuring other plugins, if needed.
The ""business logic"" is isolated to rdcinfo.c and the plugin boilerplate is in rdc_plugin.c.
The obvious 'singleton' pattern is used, and lock management is confined to rdc_plugin.c so the author/maintainer of rdcinfo.c can view it as single-threaded.
Any failure in querying metrics causes the plugin to rdc_shutdown the gpu query library, otherwise the rdc library spews to log regularly, annoying sys admins.
Configure with this sampler on AMD platforms looks like:
./configure --enable-rdc RDC_CFLAGS=-I/opt/rocm/rdc/include RDC_LIBS=-L/opt/rocm/rdc/lib ...
Once built, a quick test is 'ldms-static-test.sh rdc_sampler' if ldms is in your PATH.

Open issues:

Is there any sort of ""block query"" command to get a batch of counters all at once instead of Nmetrics*Pgpus individual calls?
There is a probable race at ldmsd exit with the embedded amd library unless the rdc plugin is stopped and terminated. In some circumstances, this leads to a seg fault during process cleanup.","@baallan, @miketxli: thanks very much for the quick replies.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,679,2021-04-06T17:32:26Z,2021-04-12T18:05:10Z,2021-04-12T18:05:10Z,MERGED,True,8,3,3,https://github.com/nick-enoent,Check config request length,1,[],https://github.com/ovis-hpc/ovis/pull/679,https://github.com/nick-enoent,1,https://github.com/ovis-hpc/ovis/pull/679,Check config request len rather than trusting discrim implicitly,Check config request len rather than trusting discrim implicitly,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,679,2021-04-06T17:32:26Z,2021-04-12T18:05:10Z,2021-04-12T18:05:10Z,MERGED,True,8,3,3,https://github.com/nick-enoent,Check config request length,1,[],https://github.com/ovis-hpc/ovis/pull/679,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/679#issuecomment-815894695,Check config request len rather than trusting discrim implicitly,"@nichamon , can you please run your config tests on this change?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,679,2021-04-06T17:32:26Z,2021-04-12T18:05:10Z,2021-04-12T18:05:10Z,MERGED,True,8,3,3,https://github.com/nick-enoent,Check config request length,1,[],https://github.com/ovis-hpc/ovis/pull/679,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/679#issuecomment-816177330,Check config request len rather than trusting discrim implicitly,"@tom95858 No test scripts directly test the functions. A TADA test tests whether LDMSD handles configuration commands sent by ldmsd_controller and ldmsctl correctly or not when the commands are bogus and legit with single and multiple attributes. @nick-enoent has volunteered to run the test, and I have pointed him to the TADA test script.
Should I write a test that directly tests the functions? The functions will be gone when the new configuration protocol is ported, though.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,679,2021-04-06T17:32:26Z,2021-04-12T18:05:10Z,2021-04-12T18:05:10Z,MERGED,True,8,3,3,https://github.com/nick-enoent,Check config request length,1,[],https://github.com/ovis-hpc/ovis/pull/679,https://github.com/tom95858,4,https://github.com/ovis-hpc/ovis/pull/679#issuecomment-816212042,Check config request len rather than trusting discrim implicitly,"Hi Mon,
On Thu, Apr 8, 2021 at 3:45 PM nichamon ***@***.***> wrote:
 @tom95858 <https://github.com/tom95858> No test scripts directly test the
 functions. A TADA test tests whether LDMSD handles configuration commands
 sent by ldmsd_controller and ldmsctl correctly or not when the commands are
 bogus and legit with single and multiple attributes. @nick-enoent
 <https://github.com/nick-enoent> has volunteered to run the test, and I
 have pointed him to the TADA test script.

 Should I write a test that directly tests the functions?

That is an important goal for security testing, but I believe that is a
different effort.

Nick's change is supposed to be ""invisible"" to properly behaving clients.
We have changed the checks that are done by the low-level ldms_attr_first,
ldms_attr_next functions. These API are used by nearly all configuration
request processing. I thought that we had  tests for the configuration
commands, e.g. plugn_add, plugn_config, etc... Perhaps these are only in
master, but my concern is that we inadvertently regress some configuration
command. I want to confirm that this change is invisible, not that it is a
remedy for all security threats.
 The functions will be gone when the new configuration protocol is ported,
 though.

It won't. It will just have a different name...


—
…
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#679 (comment)>, or
 unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ABVTPXH7F5TWWQSMLK4GZ7TTHYIVPANCNFSM42PFOT7Q>
 .


-- 
Thomas Tucker, President, Open Grid Computing, Inc.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,679,2021-04-06T17:32:26Z,2021-04-12T18:05:10Z,2021-04-12T18:05:10Z,MERGED,True,8,3,3,https://github.com/nick-enoent,Check config request length,1,[],https://github.com/ovis-hpc/ovis/pull/679,https://github.com/nichamon,5,https://github.com/ovis-hpc/ovis/pull/679#issuecomment-816230319,Check config request len rather than trusting discrim implicitly,"@tom95858  The tests that test all configuration commands are in the old test repo that I ran it weekly a couple of years ago. I haven't had a chance to port it to the TADA repo, and I haven't maintained it. However, let me look at them. I wrote them in Python 2. If I set the Python environment correctly, I should be able to run the test. I'll keep you posted.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,680,2021-04-06T22:33:06Z,2021-04-08T14:50:32Z,2022-01-18T04:08:53Z,MERGED,True,3,0,1,https://github.com/nichamon,Fix ldmsd_msg_gather to set the msg length to the total msg length,1,[],https://github.com/ovis-hpc/ovis/pull/680,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/680,"…egnth
ldmsd_msg_gather does not update the request header object's message
length to include the subsequent records' legnths after the first
record. Therefore, the message length may be shorter than the actual
message length. At this time, the bug is asymptotic because no
ldmsd_msg_gather’s callers use the message length. The fix is to prevent
future pitfalls.","…egnth
ldmsd_msg_gather does not update the request header object's message
length to include the subsequent records' legnths after the first
record. Therefore, the message length may be shorter than the actual
message length. At this time, the bug is asymptotic because no
ldmsd_msg_gather’s callers use the message length. The fix is to prevent
future pitfalls.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,680,2021-04-06T22:33:06Z,2021-04-08T14:50:32Z,2022-01-18T04:08:53Z,MERGED,True,3,0,1,https://github.com/nichamon,Fix ldmsd_msg_gather to set the msg length to the total msg length,1,[],https://github.com/ovis-hpc/ovis/pull/680,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/680#issuecomment-814478713,"…egnth
ldmsd_msg_gather does not update the request header object's message
length to include the subsequent records' legnths after the first
record. Therefore, the message length may be shorter than the actual
message length. At this time, the bug is asymptotic because no
ldmsd_msg_gather’s callers use the message length. The fix is to prevent
future pitfalls.","@nick-enoent Tom let me know that you found a bug in ldmsd_msg_gather. Here is the fix. For some reason, I cannot add you as a reviewer.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,680,2021-04-06T22:33:06Z,2021-04-08T14:50:32Z,2022-01-18T04:08:53Z,MERGED,True,3,0,1,https://github.com/nichamon,Fix ldmsd_msg_gather to set the msg length to the total msg length,1,[],https://github.com/ovis-hpc/ovis/pull/680,https://github.com/nick-enoent,3,https://github.com/ovis-hpc/ovis/pull/680#issuecomment-815244255,"…egnth
ldmsd_msg_gather does not update the request header object's message
length to include the subsequent records' legnths after the first
record. Therefore, the message length may be shorter than the actual
message length. At this time, the bug is asymptotic because no
ldmsd_msg_gather’s callers use the message length. The fix is to prevent
future pitfalls.",Thanks for looking at this @nichamon. I've been having issues adding reviewers to my pull requests as well. Not sure if that's something to do with ovis repo privileges or what.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,681,2021-04-07T19:06:21Z,2021-04-08T14:58:06Z,2021-04-08T14:58:06Z,MERGED,True,12,1,2,https://github.com/baallan,separate patches fix two memory misuse bugs,2,[],https://github.com/ovis-hpc/ovis/pull/681,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/681,"the bug in ldmsd.c causes wild frees to occur in multi-set samplers (any sampler with per-device sets) during ldmsd_set_deregister.
the bug in sampler_base is a forgotten string free in base_del.","the bug in ldmsd.c causes wild frees to occur in multi-set samplers (any sampler with per-device sets) during ldmsd_set_deregister.
the bug in sampler_base is a forgotten string free in base_del.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,682,2021-04-08T23:06:04Z,2021-04-09T00:48:10Z,2021-04-09T00:48:10Z,MERGED,True,124,272,8,https://github.com/baallan,rdc devices only version,4,[],https://github.com/ovis-hpc/ovis/pull/682,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/682,"This removes the shape option, fixes a bug in delivery of the device metric, adds a debug option to ldms_rdc_schema_name, and updates manual pages.","This removes the shape option, fixes a bug in delivery of the device metric, adds a debug option to ldms_rdc_schema_name, and updates manual pages.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,682,2021-04-08T23:06:04Z,2021-04-09T00:48:10Z,2021-04-09T00:48:10Z,MERGED,True,124,272,8,https://github.com/baallan,rdc devices only version,4,[],https://github.com/ovis-hpc/ovis/pull/682,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/682#issuecomment-816292859,"This removes the shape option, fixes a bug in delivery of the device metric, adds a debug option to ldms_rdc_schema_name, and updates manual pages.",@tom95858 the wide set option has been removed and the code retested.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,682,2021-04-08T23:06:04Z,2021-04-09T00:48:10Z,2021-04-09T00:48:10Z,MERGED,True,124,272,8,https://github.com/baallan,rdc devices only version,4,[],https://github.com/ovis-hpc/ovis/pull/682,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/682#issuecomment-816294587,"This removes the shape option, fixes a bug in delivery of the device metric, adds a debug option to ldms_rdc_schema_name, and updates manual pages.","Please squash when merging.
I assume it is expected behavior that meta metric changes within a base_sample_being/end cycle are not delivered on the immediately following set pull but appear to an aggregator after the set with the MD GN change has been delivered. For this reason I shifted the device name from meta to metric.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,683,2021-04-09T00:21:16Z,2021-04-12T18:44:47Z,2021-04-12T18:44:47Z,MERGED,True,701,27,6,https://github.com/morrone,Upstream the ibmad sampler plugin from ldms-plugins-llnl,2,[],https://github.com/ovis-hpc/ovis/pull/683,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/683,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,684,2021-04-10T02:01:08Z,2021-04-12T18:45:30Z,2021-04-12T18:45:30Z,MERGED,True,621,0,8,https://github.com/baallan,add procnet sampler to report per-device network metrics,1,[],https://github.com/ovis-hpc/ovis/pull/684,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/684,"This sampler reports data from /proc/net/dev with a set per port.
It reports all active ports that are not excluded.
It only reports a new set when some metric actually changes, including an update number so that analysis can tell the difference between missing and unchanging data (a sequence gap in 'update' indicates lost data); this has been a frequently requested feature in the past by admins.","This sampler reports data from /proc/net/dev with a set per port.
It reports all active ports that are not excluded.
It only reports a new set when some metric actually changes, including an update number so that analysis can tell the difference between missing and unchanging data (a sequence gap in 'update' indicates lost data); this has been a frequently requested feature in the past by admins.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,685,2021-04-12T16:42:28Z,2021-04-12T20:43:53Z,2021-04-12T20:43:53Z,MERGED,True,5,4,1,https://github.com/baallan,fix usage of pkg_check_modules,1,[],https://github.com/ovis-hpc/ovis/pull/685,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/685,pkg_check_modules has some m4 foo that requires careful handling per comments in pkg.m4. This adds that care.,pkg_check_modules has some m4 foo that requires careful handling per comments in pkg.m4. This adds that care.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,686,2021-04-13T20:28:40Z,2021-04-13T21:02:22Z,2021-04-13T21:02:27Z,MERGED,True,5,1,1,https://github.com/tom95858,Fix entity leak in ldmsd_stream_deliver,1,[],https://github.com/ovis-hpc/ovis/pull/686,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/686,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,688,2021-04-14T15:20:20Z,2021-04-16T17:43:07Z,2021-04-16T17:43:07Z,MERGED,True,1,1,1,https://github.com/baallan,update cfgobj_trees local redeclaration for ldmsd_auth,1,[],https://github.com/ovis-hpc/ovis/pull/688,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/688,"fixes #670
This minimalist change fixes a duplicate global trapped as an error by gcc 10.2.
It now matches the cloned extern declarations in ldmsd_prdcr.c ldmsd_strgp.c ldmsd_updtr.c.
A better solution would be to add an ldmsd_config.h defining cfgobj_trees and include it
everywhere needed.","fixes #670
This minimalist change fixes a duplicate global trapped as an error by gcc 10.2.
It now matches the cloned extern declarations in ldmsd_prdcr.c ldmsd_strgp.c ldmsd_updtr.c.
A better solution would be to add an ldmsd_config.h defining cfgobj_trees and include it
everywhere needed.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,688,2021-04-14T15:20:20Z,2021-04-16T17:43:07Z,2021-04-16T17:43:07Z,MERGED,True,1,1,1,https://github.com/baallan,update cfgobj_trees local redeclaration for ldmsd_auth,1,[],https://github.com/ovis-hpc/ovis/pull/688,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/688#issuecomment-819606478,"fixes #670
This minimalist change fixes a duplicate global trapped as an error by gcc 10.2.
It now matches the cloned extern declarations in ldmsd_prdcr.c ldmsd_strgp.c ldmsd_updtr.c.
A better solution would be to add an ldmsd_config.h defining cfgobj_trees and include it
everywhere needed.","@tom95858 please include this patch so that we can build with gcc 10.
Unless the original intent was to have a private cfgobj_trees in ldmsd_auth.c, which seems unlikely.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,689,2021-04-15T21:36:30Z,2021-04-16T17:43:36Z,2021-04-16T17:43:36Z,MERGED,True,0,4,1,https://github.com/narategithub,Fix ibmad build errors (unused variables),1,[],https://github.com/ovis-hpc/ovis/pull/689,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/689,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,690,2021-04-15T21:37:10Z,2021-04-16T17:53:47Z,2021-04-16T17:53:47Z,MERGED,True,23,69,1,https://github.com/narategithub,Fix ldmsd_request:stream_xprt_term(),1,[],https://github.com/ovis-hpc/ovis/pull/690,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/690,"When LDMS xprt terminated in ldmsd, ldmsd went through the collection
of stream clients to clean up the stream clients associated with the
transport. The collection of clients used <remote_addr,stream_name>
for rbt keys. However, on rdma transport, the remote addresses of two
transports from the same remote host got resolved to the same address.
This resulted in premature stream client cleanup due to the address
mixed-up. In addition, on the socket transport, ldms_xprt_sockaddr()
call in stream_xprt_term() returned ENOTCONN the
ldms_xprt_sockaddr() exited immediately, leaking the stream client
and the associated LDMS xprt.
This patch modifies the key to of the stream collections to use
xprt pointer instead.
NOTE: This has been tested on rdma and sock transports with GDB to
verify the correct find/removal.","When LDMS xprt terminated in ldmsd, ldmsd went through the collection
of stream clients to clean up the stream clients associated with the
transport. The collection of clients used <remote_addr,stream_name>
for rbt keys. However, on rdma transport, the remote addresses of two
transports from the same remote host got resolved to the same address.
This resulted in premature stream client cleanup due to the address
mixed-up. In addition, on the socket transport, ldms_xprt_sockaddr()
call in stream_xprt_term() returned ENOTCONN the
ldms_xprt_sockaddr() exited immediately, leaking the stream client
and the associated LDMS xprt.
This patch modifies the key to of the stream collections to use
xprt pointer instead.
NOTE: This has been tested on rdma and sock transports with GDB to
verify the correct find/removal.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,690,2021-04-15T21:37:10Z,2021-04-16T17:53:47Z,2021-04-16T17:53:47Z,MERGED,True,23,69,1,https://github.com/narategithub,Fix ldmsd_request:stream_xprt_term(),1,[],https://github.com/ovis-hpc/ovis/pull/690,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/690#issuecomment-820746913,"When LDMS xprt terminated in ldmsd, ldmsd went through the collection
of stream clients to clean up the stream clients associated with the
transport. The collection of clients used <remote_addr,stream_name>
for rbt keys. However, on rdma transport, the remote addresses of two
transports from the same remote host got resolved to the same address.
This resulted in premature stream client cleanup due to the address
mixed-up. In addition, on the socket transport, ldms_xprt_sockaddr()
call in stream_xprt_term() returned ENOTCONN the
ldms_xprt_sockaddr() exited immediately, leaking the stream client
and the associated LDMS xprt.
This patch modifies the key to of the stream collections to use
xprt pointer instead.
NOTE: This has been tested on rdma and sock transports with GDB to
verify the correct find/removal.",@tom95858 could you please give this a try?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,692,2021-04-16T01:06:32Z,2021-04-16T17:54:02Z,2021-04-16T17:54:02Z,MERGED,True,10,0,2,https://github.com/morrone,Add check for infiniband/iba/ib_types.h header,1,[],https://github.com/ovis-hpc/ovis/pull/692,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/692,Resolves #691,Resolves #691,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,693,2021-04-16T20:23:16Z,2021-04-16T20:33:06Z,2021-04-16T20:33:10Z,MERGED,True,127,237,4,https://github.com/tom95858,Final 4.3.7  Cleanup,2,[],https://github.com/ovis-hpc/ovis/pull/693,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/693,"These two commits fix a memory leak in the streams publish/subscribe paths
and removes uGNI logic that results in a confusing warning when an application
exits.","These two commits fix a memory leak in the streams publish/subscribe paths
and removes uGNI logic that results in a confusing warning when an application
exits.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,694,2021-04-16T21:15:57Z,2021-04-24T00:17:39Z,2021-04-24T00:17:39Z,CLOSED,False,12,0,1,https://github.com/aazizo,Temporary fix the xprt connection establishment delay,1,[],https://github.com/ovis-hpc/ovis/pull/694,https://github.com/aazizo,1,https://github.com/ovis-hpc/ovis/pull/694,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,694,2021-04-16T21:15:57Z,2021-04-24T00:17:39Z,2021-04-24T00:17:39Z,CLOSED,False,12,0,1,https://github.com/aazizo,Temporary fix the xprt connection establishment delay,1,[],https://github.com/ovis-hpc/ovis/pull/694,https://github.com/aazizo,2,https://github.com/ovis-hpc/ovis/pull/694#issuecomment-821570591,,"@tom95858 I added the check and delay code to check if the xprt is actually connected before returning a successfuk flag from the function, because when we tested with the kokkos connector we were losing the first few messages due to an initial connection problem.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,694,2021-04-16T21:15:57Z,2021-04-24T00:17:39Z,2021-04-24T00:17:39Z,CLOSED,False,12,0,1,https://github.com/aazizo,Temporary fix the xprt connection establishment delay,1,[],https://github.com/ovis-hpc/ovis/pull/694,https://github.com/aazizo,3,https://github.com/ovis-hpc/ovis/pull/694#issuecomment-821571103,,"BTW, this is the not the best fix and I just made it to make things work with kokkos in the mean time and show you the problem.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,695,2021-04-19T15:57:54Z,2021-05-05T14:10:54Z,2021-05-05T14:10:54Z,MERGED,True,3,0,1,https://github.com/baallan,label origin of appended debug config lines in gender generated config file,1,[],https://github.com/ovis-hpc/ovis/pull/695,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/695,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,695,2021-04-19T15:57:54Z,2021-05-05T14:10:54Z,2021-05-05T14:10:54Z,MERGED,True,3,0,1,https://github.com/baallan,label origin of appended debug config lines in gender generated config file,1,[],https://github.com/ovis-hpc/ovis/pull/695,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/695#issuecomment-822588485,,@tom95858 please include this before 4.3.7.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,695,2021-04-19T15:57:54Z,2021-05-05T14:10:54Z,2021-05-05T14:10:54Z,MERGED,True,3,0,1,https://github.com/baallan,label origin of appended debug config lines in gender generated config file,1,[],https://github.com/ovis-hpc/ovis/pull/695,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/695#issuecomment-822818683,,"@baallan, 4.3.7 is already tagged. For the purposes of testing, you should host this in your own branch. Regarding genders in general, per the users group meeting, we need to have a discussion about where we go with genders in the future.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,697,2021-04-23T18:07:07Z,2021-04-24T00:16:38Z,2021-04-24T01:33:45Z,MERGED,True,2,2,2,https://github.com/narategithub,Fix ldmsd message with no attributes,1,[],https://github.com/ovis-hpc/ovis/pull/697,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/697,"For an ldmsd message that has no attributes (e.g.
LDMSD_FAILOVER_PEERCFG_REQ message), the flag of the message was
incorrectly set to only EOM instead of SOM|EOM. In addition, the
message length would be exactly 4 bytes. This patch addresses the
message length assertion and the message flags to correctly handle the
message with no attributes.","For an ldmsd message that has no attributes (e.g.
LDMSD_FAILOVER_PEERCFG_REQ message), the flag of the message was
incorrectly set to only EOM instead of SOM|EOM. In addition, the
message length would be exactly 4 bytes. This patch addresses the
message length assertion and the message flags to correctly handle the
message with no attributes.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,697,2021-04-23T18:07:07Z,2021-04-24T00:16:38Z,2021-04-24T01:33:45Z,MERGED,True,2,2,2,https://github.com/narategithub,Fix ldmsd message with no attributes,1,[],https://github.com/ovis-hpc/ovis/pull/697,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/697#issuecomment-825832175,"For an ldmsd message that has no attributes (e.g.
LDMSD_FAILOVER_PEERCFG_REQ message), the flag of the message was
incorrectly set to only EOM instead of SOM|EOM. In addition, the
message length would be exactly 4 bytes. This patch addresses the
message length assertion and the message flags to correctly handle the
message with no attributes.","Thanks @Snell1224 for testing out failover and discover that it wasn't working, and thanks @nichamon for helping in identifying the root cause.
This patch shall address the failover issue in @Snell1224 test.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,697,2021-04-23T18:07:07Z,2021-04-24T00:16:38Z,2021-04-24T01:33:45Z,MERGED,True,2,2,2,https://github.com/narategithub,Fix ldmsd message with no attributes,1,[],https://github.com/ovis-hpc/ovis/pull/697,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/697#issuecomment-825867745,"For an ldmsd message that has no attributes (e.g.
LDMSD_FAILOVER_PEERCFG_REQ message), the flag of the message was
incorrectly set to only EOM instead of SOM|EOM. In addition, the
message length would be exactly 4 bytes. This patch addresses the
message length assertion and the message flags to correctly handle the
message with no attributes.",@Snell1224 can you confirm that this fixes your issue?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,697,2021-04-23T18:07:07Z,2021-04-24T00:16:38Z,2021-04-24T01:33:45Z,MERGED,True,2,2,2,https://github.com/narategithub,Fix ldmsd message with no attributes,1,[],https://github.com/ovis-hpc/ovis/pull/697,https://github.com/Snell1224,4,https://github.com/ovis-hpc/ovis/pull/697#issuecomment-826013568,"For an ldmsd message that has no attributes (e.g.
LDMSD_FAILOVER_PEERCFG_REQ message), the flag of the message was
incorrectly set to only EOM instead of SOM|EOM. In addition, the
message length would be exactly 4 bytes. This patch addresses the
message length assertion and the message flags to correctly handle the
message with no attributes.","@tom95858 yes, this fixed the original
issue I had. Sorry for the late response.
And thank you @narategithub and @nichamon for making these fixes.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,698,2021-04-23T21:05:00Z,2021-04-24T00:17:59Z,2022-01-18T04:08:51Z,MERGED,True,6,5,1,https://github.com/nichamon,Handle errors in __stream_republish_cb and __ldmsd_append_buffer,1,[],https://github.com/ovis-hpc/ovis/pull/698,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/698,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,700,2021-04-26T18:15:40Z,2021-04-28T19:47:23Z,2021-04-28T20:12:06Z,CLOSED,False,219,41,16,https://github.com/baallan,add compid option to lustre_client,7,[],https://github.com/ovis-hpc/ovis/pull/700,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/700,this adds a compid helper and applies it to lustre_client and adds a test for it and jobid in lustre_client.,this adds a compid helper and applies it to lustre_client and adds a test for it and jobid in lustre_client.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,700,2021-04-26T18:15:40Z,2021-04-28T19:47:23Z,2021-04-28T20:12:06Z,CLOSED,False,219,41,16,https://github.com/baallan,add compid option to lustre_client,7,[],https://github.com/ovis-hpc/ovis/pull/700,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/700#issuecomment-827112940,this adds a compid helper and applies it to lustre_client and adds a test for it and jobid in lustre_client.,"Post user-group meeting feedback:

avoid generating ambiguous schema names, which optional comp-id metric does.

not clear if the desired solution is to make comp-id unconditional or to add _c to schema name if compid is present.


not clear if job info should be optional or required, particularly going forward when node multitenancy gets involved.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,700,2021-04-26T18:15:40Z,2021-04-28T19:47:23Z,2021-04-28T20:12:06Z,CLOSED,False,219,41,16,https://github.com/baallan,add compid option to lustre_client,7,[],https://github.com/ovis-hpc/ovis/pull/700,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/700#issuecomment-827918736,this adds a compid helper and applies it to lustre_client and adds a test for it and jobid in lustre_client.,@morrone still need a choice on how to resolve the schema ambiguity: generate alternate schema name(s) or just include compid always.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,700,2021-04-26T18:15:40Z,2021-04-28T19:47:23Z,2021-04-28T20:12:06Z,CLOSED,False,219,41,16,https://github.com/baallan,add compid option to lustre_client,7,[],https://github.com/ovis-hpc/ovis/pull/700,https://github.com/morrone,4,https://github.com/ovis-hpc/ovis/pull/700#issuecomment-827968091,this adds a compid helper and applies it to lustre_client and adds a test for it and jobid in lustre_client.,"@morrone still need a choice on how to resolve the schema ambiguity: generate alternate schema name(s) or just include compid always.

Having compid always is fine with me.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,700,2021-04-26T18:15:40Z,2021-04-28T19:47:23Z,2021-04-28T20:12:06Z,CLOSED,False,219,41,16,https://github.com/baallan,add compid option to lustre_client,7,[],https://github.com/ovis-hpc/ovis/pull/700,https://github.com/baallan,5,https://github.com/ovis-hpc/ovis/pull/700#issuecomment-828007613,this adds a compid helper and applies it to lustre_client and adds a test for it and jobid in lustre_client.,"@morrone I've extended the patch to make the component id 'always on' for lustre_client.
I'm not at all sure that binary size is insignificant if we approach this as noinst; 15k here and 15k there can add up fast.
But if @tom95858 agrees with you that linking as 'noinst' somehow makes the new helper invisible to other developers, I'll change it.
I suppose one could argue that with the addition of component_id and producer as parameters, we might as well derive this sampler from sampler_base. :-)",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,700,2021-04-26T18:15:40Z,2021-04-28T19:47:23Z,2021-04-28T20:12:06Z,CLOSED,False,219,41,16,https://github.com/baallan,add compid option to lustre_client,7,[],https://github.com/ovis-hpc/ovis/pull/700,https://github.com/morrone,6,https://github.com/ovis-hpc/ovis/pull/700#issuecomment-828240182,this adds a compid helper and applies it to lustre_client and adds a test for it and jobid in lustre_client.,"I suppose one could argue that with the addition of component_id and producer as parameters, we might as well derive this sampler from sampler_base. :-)

That would not work until sampler_base undergoes more reworking. sampler_base has an in-built assumption that there is a one-to-one mapping of schema to metric set (each metric set has its own schema structure). The API and internal structures don't really allow for the workings of many of my plugins where there is one schema that is shared amongst many metric sets. Its notion of how instance handling works is still too rigid to, for instance, work with this plugin. And sampler_base's handling of component IDs won't map to this plugin's model either.
I would have used sampler_base in my plugins if I could, but it just doesn't work for them in its current form. And when I first started I probably didn't have enough knowledge of the space to overhaul sampler_base and make it work with a broader swath of sampler plugin use cases. These days I have probably built up enough knowledge of the sampler functionality to make some informed suggestions for the next design that will follow on after sampler_base. I am hoping that the next plugin API will incorporate that sort of thing.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,700,2021-04-26T18:15:40Z,2021-04-28T19:47:23Z,2021-04-28T20:12:06Z,CLOSED,False,219,41,16,https://github.com/baallan,add compid option to lustre_client,7,[],https://github.com/ovis-hpc/ovis/pull/700,https://github.com/baallan,7,https://github.com/ovis-hpc/ovis/pull/700#issuecomment-828685010,this adds a compid helper and applies it to lustre_client and adds a test for it and jobid in lustre_client.,@morrone man page update and noinst change added.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,700,2021-04-26T18:15:40Z,2021-04-28T19:47:23Z,2021-04-28T20:12:06Z,CLOSED,False,219,41,16,https://github.com/baallan,add compid option to lustre_client,7,[],https://github.com/ovis-hpc/ovis/pull/700,https://github.com/morrone,8,https://github.com/ovis-hpc/ovis/pull/700#issuecomment-828705381,this adds a compid helper and applies it to lustre_client and adds a test for it and jobid in lustre_client.,"Burried in one of the code comment @tom95858 questioned why there are so many files touched and the new comp id API. Here's my take on the situation:
Tom, you know how you want plugins to be written with a near magical amount of minimal coding the new plugin API? This is the sort of thing that we will need to offer to plugin authors through an API to make that happen. Otherwise this is one of dozens of tedious tasks that all the plugins authors need to replicate when they write their plugin.
Now, I am not claiming that this is the long term approach we want to take for that API. I think multiple of these related items need to be combined into a single well-formed library (with good consistent function name prefixes) rather than dozens of tiny libraries. And possibly one set of functions could handle many different options, allowing the plugin author to select a subset of configuration options through a bit mask or something. But as long as we understand that and keep these tiny libraries internal to the tree (noinst, not published), then I am less concerned about having some tiny helper libraries for now. These demonstrate that there is an need that is unmet in the current sampler_base implementation. We can address that need in a temporary fashion now, while planning for something better in association with the new plugin API.
I suspect that folks will probably look at other of my plugins and decide that those need comp ID added as well. This helper library would make that easier and consistent across multiple plugins.
I would perhaps suggest that this PR could have its commits arranged a little better. I would probably do a series of logically separated commits ordered like so:

A commit that just introduces the comp ID helper library
A commit that adds comp ID to the lustre_client plugin
A commit that contains the unrelated cleanup (e.g. introducing colons to log messages)
A commit that introduces tests

Ultimately I wasn't planning to enforce that organization. But would that perhaps help make things more digestible for you, @tom95858?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,700,2021-04-26T18:15:40Z,2021-04-28T19:47:23Z,2021-04-28T20:12:06Z,CLOSED,False,219,41,16,https://github.com/baallan,add compid option to lustre_client,7,[],https://github.com/ovis-hpc/ovis/pull/700,https://github.com/morrone,9,https://github.com/ovis-hpc/ovis/pull/700#issuecomment-828707844,this adds a compid helper and applies it to lustre_client and adds a test for it and jobid in lustre_client.,"@baallan, do we really need those three empty files in the examples directory? That might be a way to shave a few files off the PR too.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,700,2021-04-26T18:15:40Z,2021-04-28T19:47:23Z,2021-04-28T20:12:06Z,CLOSED,False,219,41,16,https://github.com/baallan,add compid option to lustre_client,7,[],https://github.com/ovis-hpc/ovis/pull/700,https://github.com/baallan,10,https://github.com/ovis-hpc/ovis/pull/700#issuecomment-828731311,this adds a compid helper and applies it to lustre_client and adds a test for it and jobid in lustre_client.,"closing and reopening from another branch, as rebasing got messed up eventually.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,700,2021-04-26T18:15:40Z,2021-04-28T19:47:23Z,2021-04-28T20:12:06Z,CLOSED,False,219,41,16,https://github.com/baallan,add compid option to lustre_client,7,[],https://github.com/ovis-hpc/ovis/pull/700,https://github.com/morrone,11,https://github.com/ovis-hpc/ovis/pull/700#issuecomment-828732626,this adds a compid helper and applies it to lustre_client and adds a test for it and jobid in lustre_client.,"When you get that branch working locally, you could just force push it to ""baallan:compid_helper"" on github. There isn't necessarily a need to start a new PR.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,700,2021-04-26T18:15:40Z,2021-04-28T19:47:23Z,2021-04-28T20:12:06Z,CLOSED,False,219,41,16,https://github.com/baallan,add compid option to lustre_client,7,[],https://github.com/ovis-hpc/ovis/pull/700,https://github.com/morrone,12,https://github.com/ovis-hpc/ovis/pull/700#issuecomment-828732998,this adds a compid helper and applies it to lustre_client and adds a test for it and jobid in lustre_client.,I can help with git-fu if you have any questions.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,700,2021-04-26T18:15:40Z,2021-04-28T19:47:23Z,2021-04-28T20:12:06Z,CLOSED,False,219,41,16,https://github.com/baallan,add compid option to lustre_client,7,[],https://github.com/ovis-hpc/ovis/pull/700,https://github.com/baallan,13,https://github.com/ovis-hpc/ovis/pull/700#issuecomment-828737843,this adds a compid helper and applies it to lustre_client and adds a test for it and jobid in lustre_client.,"I took it as an opportunity to add files in different commits, which (splitting an old commit along file lines) is something i've never found a happy write-up about.
I believe the new version has all the things you asked about in #700 (except the 3 empty files which are a requirement of the testing framework in use-- nother nit to be fixed) addressed.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,700,2021-04-26T18:15:40Z,2021-04-28T19:47:23Z,2021-04-28T20:12:06Z,CLOSED,False,219,41,16,https://github.com/baallan,add compid option to lustre_client,7,[],https://github.com/ovis-hpc/ovis/pull/700,https://github.com/morrone,14,https://github.com/ovis-hpc/ovis/pull/700#issuecomment-828745532,this adds a compid helper and applies it to lustre_client and adds a test for it and jobid in lustre_client.,"@baallan
Here is one set of instructions on how to split up a commit in your history (look in the ""Splitting a Commit"" section):
https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History
Here is another explanation of the process:
https://embeddedartistry.com/blog/2018/02/19/code-cleanup-splitting-up-git-commits-in-the-middle-of-a-branch/
If those don't do it for you, I can probably help fill in more detail.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,701,2021-04-26T19:57:26Z,2021-04-28T16:53:16Z,2021-04-28T16:53:16Z,MERGED,True,23,8,3,https://github.com/baallan,fixes missing support for instance in lustre_client,1,[],https://github.com/ovis-hpc/ovis/pull/701,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/701,"The producer parameter is now used (instead of ignored) as the
prefix of the instance names generated by appending /$llite_name.
This prevents breakage (redundant instance names) during scale testing
with multiple samplers per node.
If producer is not specified, default of $hostname remains.
Man page updated accordingly.","The producer parameter is now used (instead of ignored) as the
prefix of the instance names generated by appending /$llite_name.
This prevents breakage (redundant instance names) during scale testing
with multiple samplers per node.
If producer is not specified, default of $hostname remains.
Man page updated accordingly.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,701,2021-04-26T19:57:26Z,2021-04-28T16:53:16Z,2021-04-28T16:53:16Z,MERGED,True,23,8,3,https://github.com/baallan,fixes missing support for instance in lustre_client,1,[],https://github.com/ovis-hpc/ovis/pull/701,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/701#issuecomment-827801071,"The producer parameter is now used (instead of ignored) as the
prefix of the instance names generated by appending /$llite_name.
This prevents breakage (redundant instance names) during scale testing
with multiple samplers per node.
If producer is not specified, default of $hostname remains.
Man page updated accordingly.",I think the convention has been that the producer name was the prefix for the instance name. This is also required when running multiple samplers on the same host since gethostname() would create a collision.,True,{'THUMBS_UP': ['https://github.com/morrone']}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,702,2021-04-26T23:10:43Z,2021-05-11T16:14:12Z,2021-05-11T16:14:12Z,MERGED,True,52,6,3,https://github.com/nick-enoent,Ldmsd request validation,1,[],https://github.com/ovis-hpc/ovis/pull/702,https://github.com/nick-enoent,1,https://github.com/ovis-hpc/ovis/pull/702,"Validate length of request headers
Validate attr doesn't reference beyond end of request
Check attr string is null terminated","Validate length of request headers
Validate attr doesn't reference beyond end of request
Check attr string is null terminated",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,702,2021-04-26T23:10:43Z,2021-05-11T16:14:12Z,2021-05-11T16:14:12Z,MERGED,True,52,6,3,https://github.com/nick-enoent,Ldmsd request validation,1,[],https://github.com/ovis-hpc/ovis/pull/702,https://github.com/morrone,2,https://github.com/ovis-hpc/ovis/pull/702#issuecomment-837159491,"Validate length of request headers
Validate attr doesn't reference beyond end of request
Check attr string is null terminated","@nick-enoent , Could you please mark the old review conversations complete? That will get rid of the clutter and make the new review easier.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,702,2021-04-26T23:10:43Z,2021-05-11T16:14:12Z,2021-05-11T16:14:12Z,MERGED,True,52,6,3,https://github.com/nick-enoent,Ldmsd request validation,1,[],https://github.com/ovis-hpc/ovis/pull/702,https://github.com/nick-enoent,3,https://github.com/ovis-hpc/ovis/pull/702#issuecomment-837276801,"Validate length of request headers
Validate attr doesn't reference beyond end of request
Check attr string is null terminated",@morrone No problem,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,703,2021-04-27T17:24:54Z,2021-04-28T16:54:52Z,2021-05-16T17:49:48Z,MERGED,True,9,0,1,https://github.com/tom95858,Report authentication not found error,1,[],https://github.com/ovis-hpc/ovis/pull/703,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/703,"Previously, a missing authentication configuration
object was reported as ENOMEM.","Previously, a missing authentication configuration
object was reported as ENOMEM.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,704,2021-04-27T23:00:12Z,2021-04-28T16:55:16Z,2021-05-13T17:57:25Z,MERGED,True,1,0,1,https://github.com/tom95858,Free leaked symbol list,1,[],https://github.com/ovis-hpc/ovis/pull/704,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/704,"The ldmsd_stream_client_dump allocated a symbol list that was
not being freed.","The ldmsd_stream_client_dump allocated a symbol list that was
not being freed.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,705,2021-04-28T04:23:17Z,2021-04-29T21:15:40Z,2022-01-18T04:08:49Z,MERGED,True,0,3,1,https://github.com/nichamon,Remove an erroneous return line in stream_republish_cb,1,[],https://github.com/ovis-hpc/ovis/pull/705,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/705,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,705,2021-04-28T04:23:17Z,2021-04-29T21:15:40Z,2022-01-18T04:08:49Z,MERGED,True,0,3,1,https://github.com/nichamon,Remove an erroneous return line in stream_republish_cb,1,[],https://github.com/ovis-hpc/ovis/pull/705,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/705#issuecomment-828133774,,"@tom95858 The return line should have been removed in my previous patch. I didn't push all the changes in my local branch to the remote one, and the change was left in my local branch.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,705,2021-04-28T04:23:17Z,2021-04-29T21:15:40Z,2022-01-18T04:08:49Z,MERGED,True,0,3,1,https://github.com/nichamon,Remove an erroneous return line in stream_republish_cb,1,[],https://github.com/ovis-hpc/ovis/pull/705,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/705#issuecomment-828737074,,I'm closing this because the logic has been fixed in #703 .,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,705,2021-04-28T04:23:17Z,2021-04-29T21:15:40Z,2022-01-18T04:08:49Z,MERGED,True,0,3,1,https://github.com/nichamon,Remove an erroneous return line in stream_republish_cb,1,[],https://github.com/ovis-hpc/ovis/pull/705,https://github.com/nichamon,4,https://github.com/ovis-hpc/ovis/pull/705#issuecomment-828788201,,@tom95858 I have removed the 3 lines.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,706,2021-04-28T04:39:06Z,2021-04-28T16:57:10Z,2021-04-28T16:57:10Z,MERGED,True,2,0,1,https://github.com/morrone,Add missing ldms_transaction_begin/end to ibmad plugin,1,[],https://github.com/ovis-hpc/ovis/pull/706,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/706,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,707,2021-04-28T16:53:32Z,2021-04-28T21:58:27Z,2021-04-28T21:58:33Z,MERGED,True,29,4,5,https://github.com/tom95858,Use unique connection identifier in message keys,1,[],https://github.com/ovis-hpc/ovis/pull/707,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/707,"A [pointer:msg_no] key was being used to match
requests with responses. However, if an ldms transport
were disconnected, and then reconnected, the pointer
could be reused in a subsequent connection resulting
in matching a response with the wrong request. This
change generates a unique uint64_t identifier
that is used as part of the key instead of a pointer
to the transport instance.","A [pointer:msg_no] key was being used to match
requests with responses. However, if an ldms transport
were disconnected, and then reconnected, the pointer
could be reused in a subsequent connection resulting
in matching a response with the wrong request. This
change generates a unique uint64_t identifier
that is used as part of the key instead of a pointer
to the transport instance.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,707,2021-04-28T16:53:32Z,2021-04-28T21:58:27Z,2021-04-28T21:58:33Z,MERGED,True,29,4,5,https://github.com/tom95858,Use unique connection identifier in message keys,1,[],https://github.com/ovis-hpc/ovis/pull/707,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/707#issuecomment-828627459,"A [pointer:msg_no] key was being used to match
requests with responses. However, if an ldms transport
were disconnected, and then reconnected, the pointer
could be reused in a subsequent connection resulting
in matching a response with the wrong request. This
change generates a unique uint64_t identifier
that is used as part of the key instead of a pointer
to the transport instance.",@tom95858 I'll test this against ldms-test and will get back to you.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,707,2021-04-28T16:53:32Z,2021-04-28T21:58:27Z,2021-04-28T21:58:33Z,MERGED,True,29,4,5,https://github.com/tom95858,Use unique connection identifier in message keys,1,[],https://github.com/ovis-hpc/ovis/pull/707,https://github.com/narategithub,3,https://github.com/ovis-hpc/ovis/pull/707#issuecomment-828724600,"A [pointer:msg_no] key was being used to match
requests with responses. However, if an ldms transport
were disconnected, and then reconnected, the pointer
could be reused in a subsequent connection resulting
in matching a response with the wrong request. This
change generates a unique uint64_t identifier
that is used as part of the key instead of a pointer
to the transport instance.",@tom95858 This passed all tests in ldms-test repo.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,708,2021-04-28T19:46:28Z,2021-05-10T18:31:04Z,2021-05-10T18:31:04Z,MERGED,True,177,27,12,https://github.com/baallan,"adding compid to lustre_client, with helper",2,[],https://github.com/ovis-hpc/ovis/pull/708,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/708,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,709,2021-05-04T06:33:42Z,2021-05-05T14:10:15Z,2021-05-05T14:10:16Z,MERGED,True,176,29,6,https://github.com/narategithub,Fix papi_sampler/syspapi deadlock on multi-tenant slurm,1,[],https://github.com/ovis-hpc/ovis/pull/709,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/709,"In the case of multi-tenant slurm, ldmsd may receive multiple job
events concurrently, i.e. slurm stream data are being delivered from
multiple threads. papi_sampler uses ldmsd_stream_deliver() to
notify syspapi about the task init event to pause syspapi, or
no-more-task event to resume syspapi, and resulted in the following
deadlock (found by papi_store_test over singularity in ldms-test
repository):
thr0:                                 thr1:
ldmsd_stream_deliver(""slurm"")         ldmsd_stream_deliver(""slurm"")
  __find_stream()                       __find_stream()
    take s_tree_lock                      wait s_tree_lock
    take s->s_lock                        .
    release s_tree_lock                   .
  cb()                                    take s_tree_lock
    ldmsd_stream_deliver(""syspapi"")       wait s->s_lock
      __find_stream()
        wait s_tree_lock

This patch avoid recursive calls of ldmsd_stream_deliver() (even
though on different streams) to avoid the deadlock shown above.
papi_hook library is introduced to be used only by syspapi and
papi_sampler to register/execute the job init hook and no-job hook.
This patch has been tested with all test cases in ldms-test
repository (with singularity).","In the case of multi-tenant slurm, ldmsd may receive multiple job
events concurrently, i.e. slurm stream data are being delivered from
multiple threads. papi_sampler uses ldmsd_stream_deliver() to
notify syspapi about the task init event to pause syspapi, or
no-more-task event to resume syspapi, and resulted in the following
deadlock (found by papi_store_test over singularity in ldms-test
repository):
thr0:                                 thr1:
ldmsd_stream_deliver(""slurm"")         ldmsd_stream_deliver(""slurm"")
  __find_stream()                       __find_stream()
    take s_tree_lock                      wait s_tree_lock
    take s->s_lock                        .
    release s_tree_lock                   .
  cb()                                    take s_tree_lock
    ldmsd_stream_deliver(""syspapi"")       wait s->s_lock
      __find_stream()
        wait s_tree_lock

This patch avoid recursive calls of ldmsd_stream_deliver() (even
though on different streams) to avoid the deadlock shown above.
papi_hook library is introduced to be used only by syspapi and
papi_sampler to register/execute the job init hook and no-job hook.
This patch has been tested with all test cases in ldms-test
repository (with singularity).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,710,2021-05-05T14:54:14Z,2021-05-06T03:00:38Z,2022-01-18T04:08:39Z,CLOSED,False,19,3,1,https://github.com/nichamon,Add an attribute to stream publish requests to not receiving the ack,1,[],https://github.com/ovis-hpc/ovis/pull/710,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/710,"Stream publishers could add an optional LDMSD_ATTR_TYPE attribute
to tell LDMSD's stream_publish_handler not to send an acknowledgement
back.
The stream republish path uses the attribute so that it would free the
command request right after it sends the request. This is to reduce the
memory footprint in the stream republish/forward path.","Stream publishers could add an optional LDMSD_ATTR_TYPE attribute
to tell LDMSD's stream_publish_handler not to send an acknowledgement
back.
The stream republish path uses the attribute so that it would free the
command request right after it sends the request. This is to reduce the
memory footprint in the stream republish/forward path.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,710,2021-05-05T14:54:14Z,2021-05-06T03:00:38Z,2022-01-18T04:08:39Z,CLOSED,False,19,3,1,https://github.com/nichamon,Add an attribute to stream publish requests to not receiving the ack,1,[],https://github.com/ovis-hpc/ovis/pull/710,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/710#issuecomment-832756242,"Stream publishers could add an optional LDMSD_ATTR_TYPE attribute
to tell LDMSD's stream_publish_handler not to send an acknowledgement
back.
The stream republish path uses the attribute so that it would free the
command request right after it sends the request. This is to reduce the
memory footprint in the stream republish/forward path.","@tom95858 This is an approach to reduce the memory footprint in the stream republish path and the number of request contexts in the tree. It is an alternative of #711 .
I prefer this approach over #711 because this patch uses less memory. The patch freed the whole rcmd not just the send buffer (rcmd->reqc->rep_buf). The only features that uses rcmd is the failover mechanism. No ones use the other config commands that sends requests to another LDMSD, e.g., set_route.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,710,2021-05-05T14:54:14Z,2021-05-06T03:00:38Z,2022-01-18T04:08:39Z,CLOSED,False,19,3,1,https://github.com/nichamon,Add an attribute to stream publish requests to not receiving the ack,1,[],https://github.com/ovis-hpc/ovis/pull/710,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/710#issuecomment-833009609,"Stream publishers could add an optional LDMSD_ATTR_TYPE attribute
to tell LDMSD's stream_publish_handler not to send an acknowledgement
back.
The stream republish path uses the attribute so that it would free the
command request right after it sends the request. This is to reduce the
memory footprint in the stream republish/forward path.","I don't see how #711 and #710 are alternatives to one another. Can't they both be done?

Yes, we can merge both of them.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,710,2021-05-05T14:54:14Z,2021-05-06T03:00:38Z,2022-01-18T04:08:39Z,CLOSED,False,19,3,1,https://github.com/nichamon,Add an attribute to stream publish requests to not receiving the ack,1,[],https://github.com/ovis-hpc/ovis/pull/710,https://github.com/tom95858,4,https://github.com/ovis-hpc/ovis/pull/710#issuecomment-833126422,"Stream publishers could add an optional LDMSD_ATTR_TYPE attribute
to tell LDMSD's stream_publish_handler not to send an acknowledgement
back.
The stream republish path uses the attribute so that it would free the
command request right after it sends the request. This is to reduce the
memory footprint in the stream republish/forward path.","@nichamon Can you please combine these two, rebase and post a pull request? Thanks.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,710,2021-05-05T14:54:14Z,2021-05-06T03:00:38Z,2022-01-18T04:08:39Z,CLOSED,False,19,3,1,https://github.com/nichamon,Add an attribute to stream publish requests to not receiving the ack,1,[],https://github.com/ovis-hpc/ovis/pull/710,https://github.com/nichamon,5,https://github.com/ovis-hpc/ovis/pull/710#issuecomment-833188829,"Stream publishers could add an optional LDMSD_ATTR_TYPE attribute
to tell LDMSD's stream_publish_handler not to send an acknowledgement
back.
The stream republish path uses the attribute so that it would free the
command request right after it sends the request. This is to reduce the
memory footprint in the stream republish/forward path.",#712 contains the patch. I'm closing this.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,711,2021-05-05T14:54:24Z,2021-05-06T03:00:13Z,2022-01-18T04:08:40Z,CLOSED,False,5,1,1,https://github.com/nichamon,Make LDMSD free the send buffer after sending a request,1,[],https://github.com/ovis-hpc/ovis/pull/711,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/711,"LDMSD dose not use request_context's send buffer
(ldmsd_req_ctxt->rep_buf) after it sends the content in the buffer. The
patch applies only on ldmsd_req_cmd's request context.
We made the patch in order to reduce the memory footprint in the stream
republish path. However, the patch reduces LDMSD's memory usage when
sending any request to another LDMSD.","LDMSD dose not use request_context's send buffer
(ldmsd_req_ctxt->rep_buf) after it sends the content in the buffer. The
patch applies only on ldmsd_req_cmd's request context.
We made the patch in order to reduce the memory footprint in the stream
republish path. However, the patch reduces LDMSD's memory usage when
sending any request to another LDMSD.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,711,2021-05-05T14:54:24Z,2021-05-06T03:00:13Z,2022-01-18T04:08:40Z,CLOSED,False,5,1,1,https://github.com/nichamon,Make LDMSD free the send buffer after sending a request,1,[],https://github.com/ovis-hpc/ovis/pull/711,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/711#issuecomment-832755594,"LDMSD dose not use request_context's send buffer
(ldmsd_req_ctxt->rep_buf) after it sends the content in the buffer. The
patch applies only on ldmsd_req_cmd's request context.
We made the patch in order to reduce the memory footprint in the stream
republish path. However, the patch reduces LDMSD's memory usage when
sending any request to another LDMSD.",@tom95858 This is an alternative of #710 .,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,711,2021-05-05T14:54:24Z,2021-05-06T03:00:13Z,2022-01-18T04:08:40Z,CLOSED,False,5,1,1,https://github.com/nichamon,Make LDMSD free the send buffer after sending a request,1,[],https://github.com/ovis-hpc/ovis/pull/711,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/711#issuecomment-833188680,"LDMSD dose not use request_context's send buffer
(ldmsd_req_ctxt->rep_buf) after it sends the content in the buffer. The
patch applies only on ldmsd_req_cmd's request context.
We made the patch in order to reduce the memory footprint in the stream
republish path. However, the patch reduces LDMSD's memory usage when
sending any request to another LDMSD.",#712 includes the patch. I'm closing this.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,712,2021-05-06T02:59:17Z,2021-05-10T18:33:24Z,2022-01-18T04:08:38Z,MERGED,True,24,4,1,https://github.com/nichamon,Stream republish optimization,1,[],https://github.com/ovis-hpc/ovis/pull/712,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/712,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,712,2021-05-06T02:59:17Z,2021-05-10T18:33:24Z,2022-01-18T04:08:38Z,MERGED,True,24,4,1,https://github.com/nichamon,Stream republish optimization,1,[],https://github.com/ovis-hpc/ovis/pull/712,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/712#issuecomment-833188531,,@tom95858 Here is the pull request that contains both patches in #710  and #711 .,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,712,2021-05-06T02:59:17Z,2021-05-10T18:33:24Z,2022-01-18T04:08:38Z,MERGED,True,24,4,1,https://github.com/nichamon,Stream republish optimization,1,[],https://github.com/ovis-hpc/ovis/pull/712,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/712#issuecomment-834364448,,...also please squash this two commits into one.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,713,2021-05-06T03:02:32Z,2021-05-10T18:32:14Z,2022-01-18T04:08:36Z,MERGED,True,43,47,4,https://github.com/nichamon,Fix a key collision problem between sent requests and received requests,1,[],https://github.com/ovis-hpc/ovis/pull/713,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/713,"Without the patch, an LDMSD’s request context key consists of a message
number and a connection ID. The host generates the message number of
to-be-sent requests. In contrast, the peer generates the message number
of received requests. LDMSD has a single tree that contains the contexts
of both sent requests and received requests. The connection IDs in the
request sent to a peer and in the request received from the same peer
will be the same.
Moreover, the message numbers of the two requests could be the same
because the host and the peer generate them. When this happens, we would
see error messages “Duplicate message number …” or “Cannot find the
original request …”.
The patch adds a flag in request context keys to differentiate between
to-be-sent requests and received requests. It prevents the key collision
problem above.","Without the patch, an LDMSD’s request context key consists of a message
number and a connection ID. The host generates the message number of
to-be-sent requests. In contrast, the peer generates the message number
of received requests. LDMSD has a single tree that contains the contexts
of both sent requests and received requests. The connection IDs in the
request sent to a peer and in the request received from the same peer
will be the same.
Moreover, the message numbers of the two requests could be the same
because the host and the peer generate them. When this happens, we would
see error messages “Duplicate message number …” or “Cannot find the
original request …”.
The patch adds a flag in request context keys to differentiate between
to-be-sent requests and received requests. It prevents the key collision
problem above.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,713,2021-05-06T03:02:32Z,2021-05-10T18:32:14Z,2022-01-18T04:08:36Z,MERGED,True,43,47,4,https://github.com/nichamon,Fix a key collision problem between sent requests and received requests,1,[],https://github.com/ovis-hpc/ovis/pull/713,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/713#issuecomment-833198383,"Without the patch, an LDMSD’s request context key consists of a message
number and a connection ID. The host generates the message number of
to-be-sent requests. In contrast, the peer generates the message number
of received requests. LDMSD has a single tree that contains the contexts
of both sent requests and received requests. The connection IDs in the
request sent to a peer and in the request received from the same peer
will be the same.
Moreover, the message numbers of the two requests could be the same
because the host and the peer generate them. When this happens, we would
see error messages “Duplicate message number …” or “Cannot find the
original request …”.
The patch adds a flag in request context keys to differentiate between
to-be-sent requests and received requests. It prevents the key collision
problem above.","I found the bug when I tested OVIS-4 with failover. Sometimes failover works and sometimes it doesn't. I saw the error messages ""Cannot find the original request context"" or ""Duplicate message number .."" in the log file of the LDMSD pair. We see this now because we use a generated connection ID instead of memory addresses. Before the patch that use unique connection ID in message keys, the connection ID of requests allocated by alloc_req_cmd_ctxt is the memory address of ldms_t, but the connection Id of requests received in ldmsd_process_config_request is the memory address of the ldmsd_cfg_xprt_t.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,713,2021-05-06T03:02:32Z,2021-05-10T18:32:14Z,2022-01-18T04:08:36Z,MERGED,True,43,47,4,https://github.com/nichamon,Fix a key collision problem between sent requests and received requests,1,[],https://github.com/ovis-hpc/ovis/pull/713,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/713#issuecomment-834326314,"Without the patch, an LDMSD’s request context key consists of a message
number and a connection ID. The host generates the message number of
to-be-sent requests. In contrast, the peer generates the message number
of received requests. LDMSD has a single tree that contains the contexts
of both sent requests and received requests. The connection IDs in the
request sent to a peer and in the request received from the same peer
will be the same.
Moreover, the message numbers of the two requests could be the same
because the host and the peer generate them. When this happens, we would
see error messages “Duplicate message number …” or “Cannot find the
original request …”.
The patch adds a flag in request context keys to differentiate between
to-be-sent requests and received requests. It prevents the key collision
problem above.","This problem exists regardless of whether the  connection portion of the key is an ID or a pointer, correct?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,715,2021-05-07T19:57:39Z,2021-05-10T18:31:22Z,2022-01-18T04:08:27Z,MERGED,True,38,6,1,https://github.com/nichamon,Add failover for prdcr_subscribe,1,[],https://github.com/ovis-hpc/ovis/pull/715,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/715,"Without the patch, the failover pair does not share the prdcr_subscribe
configuration. As a result, the failover buddy will not send a
stream_subscribe request to the producers that it has taken over from
its failed buddy. The patch addresses this, and the failover buddy sends
a stream_subscribe request to the producers it has taken over. If there
is another aggregation level, the patch assumes that the failover buddy
has received a stream_subscibe request from its aggregator before taking
over the failed daemon. In other words, the failover buddy does not
automatically republish the stream to the failed daemon’s aggregator.","Without the patch, the failover pair does not share the prdcr_subscribe
configuration. As a result, the failover buddy will not send a
stream_subscribe request to the producers that it has taken over from
its failed buddy. The patch addresses this, and the failover buddy sends
a stream_subscribe request to the producers it has taken over. If there
is another aggregation level, the patch assumes that the failover buddy
has received a stream_subscibe request from its aggregator before taking
over the failed daemon. In other words, the failover buddy does not
automatically republish the stream to the failed daemon’s aggregator.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,715,2021-05-07T19:57:39Z,2021-05-10T18:31:22Z,2022-01-18T04:08:27Z,MERGED,True,38,6,1,https://github.com/nichamon,Add failover for prdcr_subscribe,1,[],https://github.com/ovis-hpc/ovis/pull/715,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/715#issuecomment-834740779,"Without the patch, the failover pair does not share the prdcr_subscribe
configuration. As a result, the failover buddy will not send a
stream_subscribe request to the producers that it has taken over from
its failed buddy. The patch addresses this, and the failover buddy sends
a stream_subscribe request to the producers it has taken over. If there
is another aggregation level, the patch assumes that the failover buddy
has received a stream_subscibe request from its aggregator before taking
over the failed daemon. In other words, the failover buddy does not
automatically republish the stream to the failed daemon’s aggregator.","I found this problem while I was testing #712 and #713. The symptom I saw is as follows. Agg11 and agg22 were a failover pair. Agg11 received a prdcr_subscribe request, and it has sent stream_subscribe requests to its producers. When agg11 died, and agg12 took over, agg12 did not receive any streams from agg11's producers.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,716,2021-05-10T19:01:48Z,2021-05-11T16:14:52Z,2021-05-11T16:14:52Z,MERGED,True,1,0,1,https://github.com/narategithub,Fix test_sampler `default` schema,1,[],https://github.com/ovis-hpc/ovis/pull/716,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/716,"test_sampler default schema did not specify the metric type in its own
metric records. As a result, the type could be any number and the
sample() which should increment the value of the metric failed to do
so because of the invalid type. This patch specified the metric type and
the issue went away.","test_sampler default schema did not specify the metric type in its own
metric records. As a result, the type could be any number and the
sample() which should increment the value of the metric failed to do
so because of the invalid type. This patch specified the metric type and
the issue went away.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,717,2021-05-12T03:14:36Z,2021-05-13T18:09:28Z,2022-01-18T04:08:23Z,MERGED,True,1,0,1,https://github.com/nichamon,Fix wrong config transport type,1,[],https://github.com/ovis-hpc/ovis/pull/717,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/717,"LDMSD does not set the type of LDMS-endpoint configuration transports,
so the type is the configuration file. As a result, the connection ID is
the configuration transport memory address instead of the LDMS transport
ID.","LDMSD does not set the type of LDMS-endpoint configuration transports,
so the type is the configuration file. As a result, the connection ID is
the configuration transport memory address instead of the LDMS transport
ID.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,717,2021-05-12T03:14:36Z,2021-05-13T18:09:28Z,2022-01-18T04:08:23Z,MERGED,True,1,0,1,https://github.com/nichamon,Fix wrong config transport type,1,[],https://github.com/ovis-hpc/ovis/pull/717,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/717#issuecomment-839400985,"LDMSD does not set the type of LDMS-endpoint configuration transports,
so the type is the configuration file. As a result, the connection ID is
the configuration transport memory address instead of the LDMS transport
ID.",I introduced this bug in #713.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,718,2021-05-12T03:52:07Z,2021-06-01T19:11:10Z,2022-01-18T04:08:21Z,CLOSED,False,11,1,1,https://github.com/nichamon,Make ldmsd's stream data NULL-terminated,1,[],https://github.com/ovis-hpc/ovis/pull/718,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/718,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,718,2021-05-12T03:52:07Z,2021-06-01T19:11:10Z,2022-01-18T04:08:21Z,CLOSED,False,11,1,1,https://github.com/nichamon,Make ldmsd's stream data NULL-terminated,1,[],https://github.com/ovis-hpc/ovis/pull/718,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/718#issuecomment-840048126,,"@tom95858 please don't forget spank_notifier. It calls ldmsd_steam_publish(), and it did not include '\0' in the data.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,719,2021-05-13T02:57:45Z,2021-06-09T19:21:06Z,2022-01-18T04:08:14Z,MERGED,True,34,25,3,https://github.com/nichamon,Validate requests before converting the network-endian to the host endian,2,[],https://github.com/ovis-hpc/ovis/pull/719,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/719,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,719,2021-05-13T02:57:45Z,2021-06-09T19:21:06Z,2022-01-18T04:08:14Z,MERGED,True,34,25,3,https://github.com/nichamon,Validate requests before converting the network-endian to the host endian,2,[],https://github.com/ovis-hpc/ovis/pull/719,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/719#issuecomment-840845786,,"I tested the change with stream and failover, and both work. When I tested stream, I included #718 .",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,719,2021-05-13T02:57:45Z,2021-06-09T19:21:06Z,2022-01-18T04:08:14Z,MERGED,True,34,25,3,https://github.com/nichamon,Validate requests before converting the network-endian to the host endian,2,[],https://github.com/ovis-hpc/ovis/pull/719,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/719#issuecomment-849890526,,@nichamon can you please rebase this change?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,719,2021-05-13T02:57:45Z,2021-06-09T19:21:06Z,2022-01-18T04:08:14Z,MERGED,True,34,25,3,https://github.com/nichamon,Validate requests before converting the network-endian to the host endian,2,[],https://github.com/ovis-hpc/ovis/pull/719,https://github.com/nichamon,4,https://github.com/ovis-hpc/ovis/pull/719#issuecomment-849916269,,@tom95858 I just rebased the patch as requested.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,719,2021-05-13T02:57:45Z,2021-06-09T19:21:06Z,2022-01-18T04:08:14Z,MERGED,True,34,25,3,https://github.com/nichamon,Validate requests before converting the network-endian to the host endian,2,[],https://github.com/ovis-hpc/ovis/pull/719,https://github.com/narategithub,5,https://github.com/ovis-hpc/ovis/pull/719#issuecomment-852387741,,"@nichamon I think you (or Tom) need to mark the requested change ""resolved"" in order for this PR to be merged. Can you also rebase this on top of OVIS-4 too?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,719,2021-05-13T02:57:45Z,2021-06-09T19:21:06Z,2022-01-18T04:08:14Z,MERGED,True,34,25,3,https://github.com/nichamon,Validate requests before converting the network-endian to the host endian,2,[],https://github.com/ovis-hpc/ovis/pull/719,https://github.com/nichamon,6,https://github.com/ovis-hpc/ovis/pull/719#issuecomment-852676036,,"@tom95858 I rebased this on top of the OVIS-4 branch. If you still cannot merge it, please approve the changes. On the 'File changed' tab, click 'review changes' and then 'approve'.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,721,2021-05-13T17:03:07Z,2021-05-13T17:57:21Z,2021-05-13T17:57:25Z,MERGED,True,1,0,1,https://github.com/tom95858,Free leaked symbol list,1,[],https://github.com/ovis-hpc/ovis/pull/721,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/721,"The ldmsd_stream_client_dump allocated a symbol list that was
not being freed.","The ldmsd_stream_client_dump allocated a symbol list that was
not being freed.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,723,2021-05-27T02:16:07Z,2021-05-27T19:07:33Z,2021-05-27T19:07:33Z,MERGED,True,30,10,7,https://github.com/narategithub,Add receive message transport stats,2,[],https://github.com/ovis-hpc/ovis/pull/723,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/723,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,724,2021-05-27T02:19:35Z,2021-05-27T19:07:51Z,2021-06-01T16:14:02Z,MERGED,True,1,1,1,https://github.com/narategithub,Change calloc to malloc in LDMSD request logic,1,[],https://github.com/ovis-hpc/ovis/pull/724,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/724,"Using calloc results in bzero'ing max_msg_size
which is 1M of memory on socket transports.","Using calloc results in bzero'ing max_msg_size
which is 1M of memory on socket transports.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,724,2021-05-27T02:19:35Z,2021-05-27T19:07:51Z,2021-06-01T16:14:02Z,MERGED,True,1,1,1,https://github.com/narategithub,Change calloc to malloc in LDMSD request logic,1,[],https://github.com/ovis-hpc/ovis/pull/724,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/724#issuecomment-849675723,"Using calloc results in bzero'ing max_msg_size
which is 1M of memory on socket transports.","@narategithub do we have evidence that switching to malloc does not result in leaking unintended data (data structure holes, etc) across the wire?
Basically for all messages, do we have a proof of no uninitialized holes in the messages sent, or at least reasonable valgrind evidence?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,724,2021-05-27T02:19:35Z,2021-05-27T19:07:51Z,2021-06-01T16:14:02Z,MERGED,True,1,1,1,https://github.com/narategithub,Change calloc to malloc in LDMSD request logic,1,[],https://github.com/ovis-hpc/ovis/pull/724,https://github.com/narategithub,3,https://github.com/ovis-hpc/ovis/pull/724#issuecomment-849699557,"Using calloc results in bzero'ing max_msg_size
which is 1M of memory on socket transports.",I didn't run valgrind against this. I'll relay the question to @tom95858 and @valleydlr as this PR is from ovis-4.3.8-fixes.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,724,2021-05-27T02:19:35Z,2021-05-27T19:07:51Z,2021-06-01T16:14:02Z,MERGED,True,1,1,1,https://github.com/narategithub,Change calloc to malloc in LDMSD request logic,1,[],https://github.com/ovis-hpc/ovis/pull/724,https://github.com/tom95858,4,https://github.com/ovis-hpc/ovis/pull/724#issuecomment-850740624,"Using calloc results in bzero'ing max_msg_size
which is 1M of memory on socket transports.","These are authenticated connections with trusted partners. It is not a web
service. Yes, it is possible that data from a previous allocation will be
included in a reply/request. The solution to a BFAI complaint from valgrind
is not to memcpy 1MB of data for every request and vacate the cache of your
CPU, it is to properly initialize the data (IF) it is necessary.
…
On Thu, May 27, 2021 at 8:20 AM Benjamin Allan ***@***.***> wrote:
 @narategithub <https://github.com/narategithub> do we have evidence that
 switching to malloc does not result in leaking unintended data (data
 structure holes, etc) across the wire?
 Basically for all messages, do we have a proof of no uninitialized holes
 in the messages sent, or at least reasonable valgrind evidence?

 —
 You are receiving this because your review was requested.
 Reply to this email directly, view it on GitHub
 <#724 (comment)>, or
 unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ABVTPXALUCCOYR4QBSGQXGDTPZILXANCNFSM45TIBSLQ>
 .


-- 
Thomas Tucker, President, Open Grid Computing, Inc.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,724,2021-05-27T02:19:35Z,2021-05-27T19:07:51Z,2021-06-01T16:14:02Z,MERGED,True,1,1,1,https://github.com/narategithub,Change calloc to malloc in LDMSD request logic,1,[],https://github.com/ovis-hpc/ovis/pull/724,https://github.com/baallan,5,https://github.com/ovis-hpc/ovis/pull/724#issuecomment-852252653,"Using calloc results in bzero'ing max_msg_size
which is 1M of memory on socket transports.","The stream connections from unprivileged apps to privileged daemons reduce validity of the assumption of trust, particularly when running in environments with higher security/separation requirements. I agree we want to avoid MB zeroing by default, but that puts the burden of testing for no-holes (or for initialization when there are specific unavoidable holes) on the ldms-test work.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,725,2021-05-27T02:20:27Z,2021-05-27T19:08:15Z,2021-05-27T19:08:15Z,MERGED,True,14,4,2,https://github.com/narategithub,Shorten the PAPI set reclamation timeout,1,[],https://github.com/ovis-hpc/ovis/pull/725,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/725,"The set reclamation timeout was the same as the expiry
which resulted in keeping sets twice as long in memory.","The set reclamation timeout was the same as the expiry
which resulted in keeping sets twice as long in memory.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,726,2021-05-27T02:20:52Z,2021-05-27T19:08:36Z,2021-05-27T19:08:36Z,MERGED,True,34,5,1,https://github.com/narategithub,Add option to publish one line at a time,1,[],https://github.com/ovis-hpc/ovis/pull/726,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/726,This allows sending large numbers of messages on a single connection.,This allows sending large numbers of messages on a single connection.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,727,2021-05-27T02:21:24Z,2021-05-27T19:09:01Z,2021-05-27T19:09:01Z,MERGED,True,9,2,1,https://github.com/narategithub,Ensure '\0' terminates stream data,1,[],https://github.com/ovis-hpc/ovis/pull/727,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/727,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,728,2021-05-27T02:21:47Z,2021-05-27T21:53:36Z,2021-05-27T21:53:37Z,CLOSED,False,17,3,2,https://github.com/narategithub,Cleanup up contexts in msg_tree on disconnect,1,[],https://github.com/ovis-hpc/ovis/pull/728,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/728,"The message tree maintains configuration requests and replies.
If a connection were to reset while there were outstanding configuration
requests, these context would remain in the tree forever.","The message tree maintains configuration requests and replies.
If a connection were to reset while there were outstanding configuration
requests, these context would remain in the tree forever.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,728,2021-05-27T02:21:47Z,2021-05-27T21:53:36Z,2021-05-27T21:53:37Z,CLOSED,False,17,3,2,https://github.com/narategithub,Cleanup up contexts in msg_tree on disconnect,1,[],https://github.com/ovis-hpc/ovis/pull/728,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/728#issuecomment-849966653,"The message tree maintains configuration requests and replies.
If a connection were to reset while there were outstanding configuration
requests, these context would remain in the tree forever.",This is replaced with #733,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,729,2021-05-27T02:21:58Z,2021-05-27T19:38:38Z,2021-05-27T19:38:38Z,MERGED,True,46,24,5,https://github.com/narategithub,V4 zap ev cache,2,[],https://github.com/ovis-hpc/ovis/pull/729,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/729,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,730,2021-05-27T02:22:08Z,2021-05-27T19:11:23Z,2021-05-27T19:11:23Z,MERGED,True,1,1,1,https://github.com/narategithub,ldmsd request validation fix,1,[],https://github.com/ovis-hpc/ovis/pull/730,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/730,"The ldmsd request validation logic did not handle attribute values with a
length of zero correctly.","The ldmsd request validation logic did not handle attribute values with a
length of zero correctly.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,733,2021-05-27T21:52:48Z,2021-06-01T19:13:55Z,2021-06-10T21:38:08Z,MERGED,True,21,7,4,https://github.com/tom95858,Cleanup up contexts in msg_tree on disconnect,1,[],https://github.com/ovis-hpc/ovis/pull/733,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/733,"The message tree maintains configuration requests and replies. If a connection were to reset while there were outstanding configuration requests, these context would remain in the tree forever.
I have added the changes recommended by Nichamon. I have tested this at 3 levels of aggregation, but would appreciate any testing that you have.","The message tree maintains configuration requests and replies. If a connection were to reset while there were outstanding configuration requests, these context would remain in the tree forever.
I have added the changes recommended by Nichamon. I have tested this at 3 levels of aggregation, but would appreciate any testing that you have.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,733,2021-05-27T21:52:48Z,2021-06-01T19:13:55Z,2021-06-10T21:38:08Z,MERGED,True,21,7,4,https://github.com/tom95858,Cleanup up contexts in msg_tree on disconnect,1,[],https://github.com/ovis-hpc/ovis/pull/733,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/733#issuecomment-850170342,"The message tree maintains configuration requests and replies. If a connection were to reset while there were outstanding configuration requests, these context would remain in the tree forever.
I have added the changes recommended by Nichamon. I have tested this at 3 levels of aggregation, but would appreciate any testing that you have.","@tom95858 I think this patch is fine. OVIS-4 failed some tests in ldms-test though.
I've tested this commit (which is on top of OVIS-4) with tests on ldms-test repo, and ran into a few issues. However, the issues were not caused by this pull request. This pull request + relevant patches passed all tests on ldms-test.
Here's how my tree looks when it passed all tests in ldms-test:
* ca30ff20  (HEAD -> 733-plus) Fix slurm_notifier stream publish -Narate Taerat
* a82c5b0e  Remove deprecated rec_len check in ldmsd_stream_subscribe -Narate Taerat
* ffc4493d  Fix ldmsd_stream_publish_file (message length violation) -Narate Taerat
* 27b9d759  Remove extra `ldms_set_put()` when creating a setgroup -Narate Taerat
* f25776c9  (733) Cleanup up contexts in msg_tree on disconnect -Tom Tucker
* b2721e2c  (github/OVIS-4, github/HEAD, OVIS-4) Fix threadstat computation -Tom Tucker

And here's the list of the pull requests associated to the commits above:

#734
#735
#736
#737",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,734,2021-05-28T06:06:16Z,2021-06-01T19:14:10Z,2021-06-01T19:14:10Z,MERGED,True,0,2,1,https://github.com/narategithub,Remove extra `ldms_set_put()` when creating a setgroup,1,[],https://github.com/ovis-hpc/ovis/pull/734,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/734,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,735,2021-05-28T06:07:21Z,2021-06-01T19:15:12Z,2021-06-01T19:15:12Z,MERGED,True,3,3,1,https://github.com/narategithub,Fix ldmsd_stream_publish_file (message length violation),1,[],https://github.com/ovis-hpc/ovis/pull/735,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/735,"ldmsd_stream_publish_file set the message buffer length greater than the
maximum transport message length, which resulted in zap send error when
publish large enough file. This bug failed ldmsd_stream_test in
ldms-test repository.
ldmsd_stream_test requires this patch to succeed.","ldmsd_stream_publish_file set the message buffer length greater than the
maximum transport message length, which resulted in zap send error when
publish large enough file. This bug failed ldmsd_stream_test in
ldms-test repository.
ldmsd_stream_test requires this patch to succeed.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,736,2021-05-28T06:08:34Z,2021-06-01T19:15:44Z,2021-06-01T19:15:44Z,MERGED,True,0,5,1,https://github.com/narategithub,Remove deprecated rec_len check in ldmsd_stream_subscribe,1,[],https://github.com/ovis-hpc/ovis/pull/736,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/736,"ldmsd_stream_subscribe checked the record length. If the record length
was greater than the transport maximum message length, the record needed
data aggregation from multiple messages. The logic to aggregate data was
there, i.e. the program did support record aggregation, and the record
length check logic was deprecated and must be removed to support big
stream.
This patch is required for ldmsd_stream_test to succeed.","ldmsd_stream_subscribe checked the record length. If the record length
was greater than the transport maximum message length, the record needed
data aggregation from multiple messages. The logic to aggregate data was
there, i.e. the program did support record aggregation, and the record
length check logic was deprecated and must be removed to support big
stream.
This patch is required for ldmsd_stream_test to succeed.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,737,2021-05-28T06:09:25Z,2021-06-01T19:16:13Z,2021-06-01T19:16:13Z,MERGED,True,2,2,2,https://github.com/narategithub,Fix slurm_notifier stream publish,1,[],https://github.com/ovis-hpc/ovis/pull/737,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/737,"This patch addressed two things that contributed to the issue of missing
'\0' in stream pulish data sent by slurm_notifier.

From vsnprintf(3) ""... a return value of size or more means that
the output was truncated."" Hence, the buffer must be expanded when
cnt >= space (not cnt > space).
JSON buffer jb->cursor is the current lenght of the output
string. Since vsnprintf() put '\0' when the output is not
truncated, jb->jbuf[jb->cursor] is always '\0', and
jb->cursor+1 is a valid data length that will include '\0' in the
stream data.

This patch is required for slurm-related tests in ldms-test (e.g.
agg_slurm_test, and mt-slurm-test) to succeed.","This patch addressed two things that contributed to the issue of missing
'\0' in stream pulish data sent by slurm_notifier.

From vsnprintf(3) ""... a return value of size or more means that
the output was truncated."" Hence, the buffer must be expanded when
cnt >= space (not cnt > space).
JSON buffer jb->cursor is the current lenght of the output
string. Since vsnprintf() put '\0' when the output is not
truncated, jb->jbuf[jb->cursor] is always '\0', and
jb->cursor+1 is a valid data length that will include '\0' in the
stream data.

This patch is required for slurm-related tests in ldms-test (e.g.
agg_slurm_test, and mt-slurm-test) to succeed.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,738,2021-05-28T22:27:35Z,2021-06-02T02:43:10Z,2022-01-18T04:08:20Z,CLOSED,False,17,5,2,https://github.com/nichamon,Make reqc->xprt point to memory on the heap instead of the stack,1,[],https://github.com/ovis-hpc/ovis/pull/738,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/738,"The LDMSD config transport’s memory addresses passed by ldmsd_process_msg_request()’s callers are on the stack. This is not an issue if the requests come from configuration files. In contrast, the memory address of an LDMS config transport could be invalid while the request context is in the message tree because ldmsd_recv_msg() had been returned already. Moreover, LDMSD could access the invalid address in the disconnected path when ldmsd_xprt_term() iterates through the message tree.","The LDMSD config transport’s memory addresses passed by ldmsd_process_msg_request()’s callers are on the stack. This is not an issue if the requests come from configuration files. In contrast, the memory address of an LDMS config transport could be invalid while the request context is in the message tree because ldmsd_recv_msg() had been returned already. Moreover, LDMSD could access the invalid address in the disconnected path when ldmsd_xprt_term() iterates through the message tree.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,738,2021-05-28T22:27:35Z,2021-06-02T02:43:10Z,2022-01-18T04:08:20Z,CLOSED,False,17,5,2,https://github.com/nichamon,Make reqc->xprt point to memory on the heap instead of the stack,1,[],https://github.com/ovis-hpc/ovis/pull/738,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/738#issuecomment-850704217,"The LDMSD config transport’s memory addresses passed by ldmsd_process_msg_request()’s callers are on the stack. This is not an issue if the requests come from configuration files. In contrast, the memory address of an LDMS config transport could be invalid while the request context is in the message tree because ldmsd_recv_msg() had been returned already. Moreover, LDMSD could access the invalid address in the disconnected path when ldmsd_xprt_term() iterates through the message tree.","@tom95858 @narategithub I ran into problems when I test Narate's 733-plus branch. I develop the patch on top of his branch. However, the patch depends on #733 .",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,738,2021-05-28T22:27:35Z,2021-06-02T02:43:10Z,2022-01-18T04:08:20Z,CLOSED,False,17,5,2,https://github.com/nichamon,Make reqc->xprt point to memory on the heap instead of the stack,1,[],https://github.com/ovis-hpc/ovis/pull/738,https://github.com/narategithub,3,https://github.com/ovis-hpc/ovis/pull/738#issuecomment-852386790,"The LDMSD config transport’s memory addresses passed by ldmsd_process_msg_request()’s callers are on the stack. This is not an issue if the requests come from configuration files. In contrast, the memory address of an LDMS config transport could be invalid while the request context is in the message tree because ldmsd_recv_msg() had been returned already. Moreover, LDMSD could access the invalid address in the disconnected path when ldmsd_xprt_term() iterates through the message tree.",@nichamon can you please rebase this on top of OVIS-4?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,738,2021-05-28T22:27:35Z,2021-06-02T02:43:10Z,2022-01-18T04:08:20Z,CLOSED,False,17,5,2,https://github.com/nichamon,Make reqc->xprt point to memory on the heap instead of the stack,1,[],https://github.com/ovis-hpc/ovis/pull/738,https://github.com/nichamon,4,https://github.com/ovis-hpc/ovis/pull/738#issuecomment-852670010,"The LDMSD config transport’s memory addresses passed by ldmsd_process_msg_request()’s callers are on the stack. This is not an issue if the requests come from configuration files. In contrast, the memory address of an LDMS config transport could be invalid while the request context is in the message tree because ldmsd_recv_msg() had been returned already. Moreover, LDMSD could access the invalid address in the disconnected path when ldmsd_xprt_term() iterates through the message tree.",We won't take this patch.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,741,2021-06-02T02:44:08Z,2021-06-09T19:21:33Z,2022-01-18T04:08:18Z,MERGED,True,2,2,1,https://github.com/nichamon,Use LDMS xprt’s conn_id in ldmsd_xprt_term() to cleanup msg_tree,1,[],https://github.com/ovis-hpc/ovis/pull/741,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/741,"reqc->xprt’s content is valid under the ldmsd_recv_msg() stack. It could
be garbage in different paths because reqc->xprt is an address in the
stack. The patch compares reqc->key.conn_id with the disconnected xprt’s
conn_id to clean up the request contexts.","reqc->xprt’s content is valid under the ldmsd_recv_msg() stack. It could
be garbage in different paths because reqc->xprt is an address in the
stack. The patch compares reqc->key.conn_id with the disconnected xprt’s
conn_id to clean up the request contexts.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,742,2021-06-02T02:47:34Z,2021-06-09T19:21:55Z,2022-01-18T04:08:17Z,MERGED,True,1,1,1,https://github.com/nichamon,Don't take LDMS transport's reference in stream_republish_cb(),1,[],https://github.com/ovis-hpc/ovis/pull/742,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/742,"stream_republish_cb() takes an LDMS transport's reference but does not
put back. Sampler daemons would leak LDMS transports when it republishes
stream to the aggregator. ldmsd_req_cmd_new() already takes a reference
when it initializes the configuration transport.","stream_republish_cb() takes an LDMS transport's reference but does not
put back. Sampler daemons would leak LDMS transports when it republishes
stream to the aggregator. ldmsd_req_cmd_new() already takes a reference
when it initializes the configuration transport.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,742,2021-06-02T02:47:34Z,2021-06-09T19:21:55Z,2022-01-18T04:08:17Z,MERGED,True,1,1,1,https://github.com/nichamon,Don't take LDMS transport's reference in stream_republish_cb(),1,[],https://github.com/ovis-hpc/ovis/pull/742,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/742#issuecomment-852674981,"stream_republish_cb() takes an LDMS transport's reference but does not
put back. Sampler daemons would leak LDMS transports when it republishes
stream to the aggregator. ldmsd_req_cmd_new() already takes a reference
when it initializes the configuration transport.","When I tested #741 , I found that sampler daemons had dangling LDMS transports in xprt_list after the sampler daemons disconnected from the aggregator.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,743,2021-06-09T14:54:16Z,2021-06-09T19:22:50Z,2022-01-18T04:08:12Z,MERGED,True,0,3,1,https://github.com/nichamon,Cleanup unused code in ldmsd_prdcr.c:_add_cb(),1,[],https://github.com/ovis-hpc/ovis/pull/743,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/743,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,744,2021-06-09T17:17:45Z,2021-06-09T19:23:31Z,2021-06-09T19:23:31Z,MERGED,True,2,8,1,https://github.com/baallan,remove ecc defaults from rdc_sampler,1,[],https://github.com/ovis-hpc/ovis/pull/744,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/744,"amd dropped ecc reporting in 4.1, 4.2 rocm.","amd dropped ecc reporting in 4.1, 4.2 rocm.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,745,2021-06-10T19:24:05Z,2021-06-10T21:36:14Z,2021-06-10T21:36:20Z,MERGED,True,126,7,6,https://github.com/tom95858,Add a periodic flush interval to storage policies,1,[],https://github.com/ovis-hpc/ovis/pull/745,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/745,"This change adds a periodic call to a storage plugin's flush method.
Previously, this method was never called. The optional 'flush' keyword
is added to the strgp_add command and is used to specify the flush
interval. If the keyword is not specified, the default interval is zero
and the flush method is never called.","This change adds a periodic call to a storage plugin's flush method.
Previously, this method was never called. The optional 'flush' keyword
is added to the strgp_add command and is used to specify the flush
interval. If the keyword is not specified, the default interval is zero
and the flush method is never called.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,745,2021-06-10T19:24:05Z,2021-06-10T21:36:14Z,2021-06-10T21:36:20Z,MERGED,True,126,7,6,https://github.com/tom95858,Add a periodic flush interval to storage policies,1,[],https://github.com/ovis-hpc/ovis/pull/745,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/745#issuecomment-858951849,"This change adds a periodic call to a storage plugin's flush method.
Previously, this method was never called. The optional 'flush' keyword
is added to the strgp_add command and is used to specify the flush
interval. If the keyword is not specified, the default interval is zero
and the flush method is never called.",@nichamon could you please add the new strgp_add option to the ldmsdctl command?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,746,2021-06-10T22:47:57Z,2021-06-10T23:24:40Z,2021-06-10T23:24:47Z,MERGED,True,1,0,1,https://github.com/tom95858,Add the flush attribute to configuration files,1,[],https://github.com/ovis-hpc/ovis/pull/746,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/746,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,747,2021-06-11T16:09:56Z,2021-06-17T22:01:10Z,2022-01-18T04:08:10Z,MERGED,True,2,0,1,https://github.com/nichamon,Update strgp_add help in ldmsctl to include the flush attribute,1,[],https://github.com/ovis-hpc/ovis/pull/747,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/747,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,748,2021-06-11T16:10:20Z,2021-06-17T22:00:50Z,2022-01-18T04:10:40Z,MERGED,True,14,9,3,https://github.com/nichamon,Update strgp_status to report the flush interval,1,[],https://github.com/ovis-hpc/ovis/pull/748,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/748,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,748,2021-06-11T16:10:20Z,2021-06-17T22:00:50Z,2022-01-18T04:10:40Z,MERGED,True,14,9,3,https://github.com/nichamon,Update strgp_status to report the flush interval,1,[],https://github.com/ovis-hpc/ovis/pull/748,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/748#issuecomment-859690279,,@tom95858 Please feel free to close this PR if we don't wanna add the flush interval to the strgp_status report.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,749,2021-06-17T03:42:32Z,2021-06-17T21:59:58Z,2021-06-17T21:59:58Z,MERGED,True,33,0,1,https://github.com/narategithub,Pause/resume syspapi using ldmsd stream,1,[],https://github.com/ovis-hpc/ovis/pull/749,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/749,"Reintroducing the ability to pause and resume syspapi using ldmsd
stream so that system administrators can pause/resume syspapi from
prolog/epilog script. Please note that when papi_sampler is present
and syspapi is configured with auto_pause=1, syspapi will automatically
paused when papi_sampler receive slurm ""task_init"" event. In this case,
syspapi will automatically resume when no tasks are running.","Reintroducing the ability to pause and resume syspapi using ldmsd
stream so that system administrators can pause/resume syspapi from
prolog/epilog script. Please note that when papi_sampler is present
and syspapi is configured with auto_pause=1, syspapi will automatically
paused when papi_sampler receive slurm ""task_init"" event. In this case,
syspapi will automatically resume when no tasks are running.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,749,2021-06-17T03:42:32Z,2021-06-17T21:59:58Z,2021-06-17T21:59:58Z,MERGED,True,33,0,1,https://github.com/narategithub,Pause/resume syspapi using ldmsd stream,1,[],https://github.com/ovis-hpc/ovis/pull/749,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/749#issuecomment-862903155,"Reintroducing the ability to pause and resume syspapi using ldmsd
stream so that system administrators can pause/resume syspapi from
prolog/epilog script. Please note that when papi_sampler is present
and syspapi is configured with auto_pause=1, syspapi will automatically
paused when papi_sampler receive slurm ""task_init"" event. In this case,
syspapi will automatically resume when no tasks are running.","This patch has passed all papi-related tests in ldms-test repository.
This patch has also been tested manually as follows:
$ date && ldms_ls -x sock -p 10001 -h node-1 -l
Wed Jun 16 22:34:06 CDT 2021
syspapi_sampler: consistent, last update: Wed Jun 16 22:34:06 2021 -0500 [2030us]
M u64        component_id                               0
D u64        job_id                                     0
D u64        app_id                                     0
D u64[]      PAPI_L1_DCA                                0,0,0,0,0,0,0,0
D u64[]      PAPI_L1_DCH                                0,0,0,0,0,0,0,0
D u64[]      PAPI_TOT_CYC                               1363949,1193806,3880133,3962132,3348661,4185786,2183709,7429689
D u64[]      PAPI_TOT_INS                               236507,189175,1166934,759837,848576,1097239,567167,3245842

$ date && ldms_ls -x sock -p 10001 -h node-1 -l
Wed Jun 16 22:34:11 CDT 2021
syspapi_sampler: consistent, last update: Wed Jun 16 22:34:11 2021 -0500 [2293us]
M u64        component_id                               0
D u64        job_id                                     0
D u64        app_id                                     0
D u64[]      PAPI_L1_DCA                                0,0,0,0,0,0,0,0
D u64[]      PAPI_L1_DCH                                0,0,0,0,0,0,0,0
D u64[]      PAPI_TOT_CYC                               3976820,1975370,3931808,2973236,2700997,1829577,2239676,4148230
D u64[]      PAPI_TOT_INS                               4481759,456433,1193652,674689,659855,424052,618492,2262628

# Use BASH ""here strings"" to work around the pipe issue in pull request #750.
# Note that this is a BASH feature and probably won't work with ""sh"".
$ ldmsd_stream_publish -x sock -p 10001 -h node-1 -s syspapi_stream -t string <<<pause

$ date && ldms_ls -x sock -p 10001 -h node-1 -l
Wed Jun 16 22:34:41 CDT 2021
syspapi_sampler: consistent, last update: Wed Jun 16 22:34:37 2021 -0500 [2237us]
M u64        component_id                               0
D u64        job_id                                     0
D u64        app_id                                     0
D u64[]      PAPI_L1_DCA                                0,0,0,0,0,0,0,0
D u64[]      PAPI_L1_DCH                                0,0,0,0,0,0,0,0
D u64[]      PAPI_TOT_CYC                               1269663,3613241,2155542,5310008,1528446,2245216,3516073,1037052
D u64[]      PAPI_TOT_INS                               263310,1942521,435065,1375829,326455,548571,916355,189122

$ date && ldms_ls -x sock -p 10001 -h node-1 -l
Wed Jun 16 22:34:47 CDT 2021
syspapi_sampler: consistent, last update: Wed Jun 16 22:34:37 2021 -0500 [2237us]
M u64        component_id                               0
D u64        job_id                                     0
D u64        app_id                                     0
D u64[]      PAPI_L1_DCA                                0,0,0,0,0,0,0,0
D u64[]      PAPI_L1_DCH                                0,0,0,0,0,0,0,0
D u64[]      PAPI_TOT_CYC                               1269663,3613241,2155542,5310008,1528446,2245216,3516073,1037052
D u64[]      PAPI_TOT_INS                               263310,1942521,435065,1375829,326455,548571,916355,189122

# Note that the result from `date` command has changed but the transaction timestamp stayed the same

# Use bash ""here strings"" to work around the pipe issue
$ ldmsd_stream_publish -x sock -p 10001 -h node-1 -s syspapi_stream -t string <<<resume

$ date && ldms_ls -x sock -p 10001 -h node-1 -l
Wed Jun 16 22:35:03 CDT 2021
syspapi_sampler: consistent, last update: Wed Jun 16 22:35:03 2021 -0500 [2551us]
M u64        component_id                               0
D u64        job_id                                     0
D u64        app_id                                     0
D u64[]      PAPI_L1_DCA                                0,0,0,0,0,0,0,0
D u64[]      PAPI_L1_DCH                                0,0,0,0,0,0,0,0
D u64[]      PAPI_TOT_CYC                               1370111,1671323,2160658,2854220,4746774,1586416,2548878,1548070
D u64[]      PAPI_TOT_INS                               241595,384529,536250,913652,2369395,370380,757419,304503

$ date && ldms_ls -x sock -p 10001 -h node-1 -l
Wed Jun 16 22:35:07 CDT 2021
syspapi_sampler: consistent, last update: Wed Jun 16 22:35:07 2021 -0500 [2151us]
M u64        component_id                               0
D u64        job_id                                     0
D u64        app_id                                     0
D u64[]      PAPI_L1_DCA                                0,0,0,0,0,0,0,0
D u64[]      PAPI_L1_DCH                                0,0,0,0,0,0,0,0
D u64[]      PAPI_TOT_CYC                               1549385,2809453,2862529,3036276,2835956,2905092,3126267,3297313
D u64[]      PAPI_TOT_INS                               322989,624456,906090,921965,689707,680851,908632,2013089",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,750,2021-06-17T03:44:59Z,2021-06-17T22:02:16Z,2022-01-18T04:10:43Z,MERGED,True,56,13,1,https://github.com/nichamon,Make ldmsd_stream_publish_file() support Piped stdin,1,[],https://github.com/ovis-hpc/ovis/pull/750,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/750,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,750,2021-06-17T03:44:59Z,2021-06-17T22:02:16Z,2022-01-18T04:10:43Z,MERGED,True,56,13,1,https://github.com/nichamon,Make ldmsd_stream_publish_file() support Piped stdin,1,[],https://github.com/ovis-hpc/ovis/pull/750,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/750#issuecomment-862897562,,"I have tested the patch with.
echo -n pause | ldmsd_stream_publish -x sock -p 10001 -h localhost

and
ldmsd_stream_publish -x sock -p 10001 -h localhost -f <file>

LDMSD receives stream data successfully.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,750,2021-06-17T03:44:59Z,2021-06-17T22:02:16Z,2022-01-18T04:10:43Z,MERGED,True,56,13,1,https://github.com/nichamon,Make ldmsd_stream_publish_file() support Piped stdin,1,[],https://github.com/ovis-hpc/ovis/pull/750,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/750#issuecomment-862904139,,"I also think about limiting the size of a stream if pipe is used. The limit could be the max message length, or it could be a constant number, not varied by transports. Limiting the size would prevent the out-of-memory error. What do you guys think?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,751,2021-06-17T14:49:04Z,2021-06-17T21:55:52Z,2021-06-17T21:55:52Z,MERGED,True,8,6,1,https://github.com/narategithub,Fix NULL pointer access in ldms Python dir_cb,1,[],https://github.com/ovis-hpc/ovis/pull/751,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/751,The dir in dir_cb() could be NULL when status is non-zero.,The dir in dir_cb() could be NULL when status is non-zero.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,752,2021-06-18T15:27:55Z,2021-06-19T06:33:02Z,2022-01-18T04:10:45Z,MERGED,True,7,2,1,https://github.com/nichamon,Make ldmsd_stream_publish_file() null terminated for non-seekable stream,1,[],https://github.com/ovis-hpc/ovis/pull/752,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/752,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,752,2021-06-18T15:27:55Z,2021-06-19T06:33:02Z,2022-01-18T04:10:45Z,MERGED,True,7,2,1,https://github.com/nichamon,Make ldmsd_stream_publish_file() null terminated for non-seekable stream,1,[],https://github.com/ovis-hpc/ovis/pull/752,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/752#issuecomment-864120612,,"@tom95858 This morning I tested the top of OVIS-4 after you merged the pull requests. On the container I used, I set the MALLOC_PERTURB_ env so that the system will initialize allocated memory to a non-zero value, and I found that ldmsd_stream_publish_file() doesn't null-terminated the stream data if pipe is used. I also tested the code on the same container when I developed the patch and confirmed that if I don't set the env, the code works fine. To make the function always work, I created this pull request.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,753,2021-06-18T17:50:19Z,2021-09-01T15:25:57Z,2021-09-01T15:25:58Z,MERGED,True,828,0,9,https://github.com/baallan,Add a stream blob writing plugin.,3,[],https://github.com/ovis-hpc/ovis/pull/753,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/753,"This plugin subscribes to any number of streams and creates a message-indexed
dump of each stream. There is no parsing of the messages, so this is fast.
Converting blobs to any particular database format is left to other tools.
Test/demo script and man page included","This plugin subscribes to any number of streams and creates a message-indexed
dump of each stream. There is no parsing of the messages, so this is fast.
Converting blobs to any particular database format is left to other tools.
Test/demo script and man page included",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,753,2021-06-18T17:50:19Z,2021-09-01T15:25:57Z,2021-09-01T15:25:58Z,MERGED,True,828,0,9,https://github.com/baallan,Add a stream blob writing plugin.,3,[],https://github.com/ovis-hpc/ovis/pull/753,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/753#issuecomment-881083315,"This plugin subscribes to any number of streams and creates a message-indexed
dump of each stream. There is no parsing of the messages, so this is fast.
Converting blobs to any particular database format is left to other tools.
Test/demo script and man page included",@tom95858 Ready to review/merge.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,754,2021-06-21T18:43:14Z,2021-07-19T22:51:41Z,2021-07-19T22:51:41Z,MERGED,True,6,5,1,https://github.com/narategithub,Fix zap_rdma ibv_post_send() race,1,[],https://github.com/ovis-hpc/ovis/pull/754,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/754,"ibv_post_send() can be called from the application thread(s) or from
the cq thread. It should be protected by the same lock to ensure
correct message sequence.","ibv_post_send() can be called from the application thread(s) or from
the cq thread. It should be protected by the same lock to ensure
correct message sequence.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,754,2021-06-21T18:43:14Z,2021-07-19T22:51:41Z,2021-07-19T22:51:41Z,MERGED,True,6,5,1,https://github.com/narategithub,Fix zap_rdma ibv_post_send() race,1,[],https://github.com/ovis-hpc/ovis/pull/754,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/754#issuecomment-866184819,"ibv_post_send() can be called from the application thread(s) or from
the cq thread. It should be protected by the same lock to ensure
correct message sequence.","I seem to recall that there was a deadlock for credit updates that the two
locks fixed.
…
On Tue, Jun 22, 2021 at 11:24 AM narategithub ***@***.***> wrote:
 ***@***.**** commented on this pull request.
 ------------------------------

 In lib/src/zap/rdma/zap_rdma.c
 <#754 (comment)>:

 >  		pthread_mutex_unlock(&rep->ep.lock);

 +		pthread_mutex_lock(&rep->credit_lock);

 +		rc = ENOSPC;


 @tom95858 <https://github.com/tom95858> we probably won't. But at this
 point I'm afraid to pull credit_lock out and break everything 😅 .

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#754 (comment)>, or
 unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ABVTPXEFOHBCV3A2FABUGILTUDBL7ANCNFSM47CD6XVA>
 .


-- 
Thomas Tucker, President, Open Grid Computing, Inc.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,754,2021-06-21T18:43:14Z,2021-07-19T22:51:41Z,2021-07-19T22:51:41Z,MERGED,True,6,5,1,https://github.com/narategithub,Fix zap_rdma ibv_post_send() race,1,[],https://github.com/ovis-hpc/ovis/pull/754,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/754#issuecomment-871793302,"ibv_post_send() can be called from the application thread(s) or from
the cq thread. It should be protected by the same lock to ensure
correct message sequence.","@narategithub, You ran this with your scalability test?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,754,2021-06-21T18:43:14Z,2021-07-19T22:51:41Z,2021-07-19T22:51:41Z,MERGED,True,6,5,1,https://github.com/narategithub,Fix zap_rdma ibv_post_send() race,1,[],https://github.com/ovis-hpc/ovis/pull/754,https://github.com/narategithub,4,https://github.com/ovis-hpc/ovis/pull/754#issuecomment-871837142,"ibv_post_send() can be called from the application thread(s) or from
the cq thread. It should be protected by the same lock to ensure
correct message sequence.",@tom95858 just did. It passed the test on cygnus ( 64K sets: 256 sets-per-sampler x 256 samplers  -> 16 x L1 -> 4 x L2 -> L3 ).,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,755,2021-06-21T18:47:11Z,2021-07-08T01:19:22Z,2021-07-08T01:19:22Z,MERGED,True,2,2,1,https://github.com/narategithub,Fix zap_rdma get_name() local/remote mix up,1,[],https://github.com/ovis-hpc/ovis/pull/755,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/755,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,755,2021-06-21T18:47:11Z,2021-07-08T01:19:22Z,2021-07-08T01:19:22Z,MERGED,True,2,2,1,https://github.com/narategithub,Fix zap_rdma get_name() local/remote mix up,1,[],https://github.com/ovis-hpc/ovis/pull/755,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/755#issuecomment-865315068,,@tom95858 can you please point me to the tests? So that I'll change them too.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,755,2021-06-21T18:47:11Z,2021-07-08T01:19:22Z,2021-07-08T01:19:22Z,MERGED,True,2,2,1,https://github.com/narategithub,Fix zap_rdma get_name() local/remote mix up,1,[],https://github.com/ovis-hpc/ovis/pull/755,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/755#issuecomment-866147480,,"@narategithub I didn't mean test code in, I meant functionality. When I changed it, things like prdcr_subscribe, etc... stopped working.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,755,2021-06-21T18:47:11Z,2021-07-08T01:19:22Z,2021-07-08T01:19:22Z,MERGED,True,2,2,1,https://github.com/narategithub,Fix zap_rdma get_name() local/remote mix up,1,[],https://github.com/ovis-hpc/ovis/pull/755,https://github.com/narategithub,4,https://github.com/ovis-hpc/ovis/pull/755#issuecomment-866175160,,Ah. I C. I have not tested those functionalities on rdma. I'll test them and let you know (as well as find all places that call zap_get_name()).,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,755,2021-06-21T18:47:11Z,2021-07-08T01:19:22Z,2021-07-08T01:19:22Z,MERGED,True,2,2,1,https://github.com/narategithub,Fix zap_rdma get_name() local/remote mix up,1,[],https://github.com/ovis-hpc/ovis/pull/755,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/755#issuecomment-871792959,,"@narategithub:

Do we have prdcr_subscribe, etc... tests in TADA?
Have we run them?
Can you add them if they are not already there?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,755,2021-06-21T18:47:11Z,2021-07-08T01:19:22Z,2021-07-08T01:19:22Z,MERGED,True,2,2,1,https://github.com/narategithub,Fix zap_rdma get_name() local/remote mix up,1,[],https://github.com/ovis-hpc/ovis/pull/755,https://github.com/narategithub,6,https://github.com/ovis-hpc/ovis/pull/755#issuecomment-871838359,,"@tom95858 we have ldms-test/prdcr_subscribe_test, but that is container-based which run only on socket transport. I'll make a new one that run on host (like ldms-test/scalability) so that rdma can be used.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,755,2021-06-21T18:47:11Z,2021-07-08T01:19:22Z,2021-07-08T01:19:22Z,MERGED,True,2,2,1,https://github.com/narategithub,Fix zap_rdma get_name() local/remote mix up,1,[],https://github.com/ovis-hpc/ovis/pull/755,https://github.com/narategithub,7,https://github.com/ovis-hpc/ovis/pull/755#issuecomment-875964280,,"@tom95858
ldms-test/direct_prdcr_subscribe_test which test prdcr_subscribe ( publish -> 2 samplers -> 1x L1 -> 1x L2 -> dump + verify ) directly on the hosts (non-containerized) has been pushed to ldms-test repo. This pull request has been tested against it over rdma transport on cygnus cluster.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,756,2021-06-21T18:47:19Z,2021-06-21T18:58:05Z,2021-06-21T18:58:05Z,MERGED,True,2,0,1,https://github.com/narategithub,Name cq and cm threads in zap_rdma,1,[],https://github.com/ovis-hpc/ovis/pull/756,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/756,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,757,2021-06-22T15:44:13Z,2021-06-22T21:58:30Z,2021-06-22T21:58:30Z,MERGED,True,6,156,1,https://github.com/nichamon,Delete the unused test code in the main() function,1,[],https://github.com/ovis-hpc/ovis/pull/757,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/757,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,758,2021-06-26T00:05:13Z,2021-09-01T15:03:30Z,2021-09-01T15:03:30Z,MERGED,True,4866,1,11,https://github.com/baallan,add kernel/netlink based pid notifier & simple publish stream api,4,[],https://github.com/ovis-hpc/ovis/pull/758,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/758,"Program netlink-notifier does similar work to slurm notifier without
a spank/slurm dependency.
The ldms_sps library provides a simple-to-use library wrapping the
ldmsd_stream and ldms_xprt libraries.
In particular it lets the user specify the target daemon/port (or many)
and then delivers message to any available port and drops messages when
no ports are available. It transparently handles reconnections, timeouts,
threads, etc.
It supports netlink-notifier and is proposed to support kokkos and other
long-lived stream publishers.","Program netlink-notifier does similar work to slurm notifier without
a spank/slurm dependency.
The ldms_sps library provides a simple-to-use library wrapping the
ldmsd_stream and ldms_xprt libraries.
In particular it lets the user specify the target daemon/port (or many)
and then delivers message to any available port and drops messages when
no ports are available. It transparently handles reconnections, timeouts,
threads, etc.
It supports netlink-notifier and is proposed to support kokkos and other
long-lived stream publishers.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,758,2021-06-26T00:05:13Z,2021-09-01T15:03:30Z,2021-09-01T15:03:30Z,MERGED,True,4866,1,11,https://github.com/baallan,add kernel/netlink based pid notifier & simple publish stream api,4,[],https://github.com/ovis-hpc/ovis/pull/758,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/758#issuecomment-870069425,"Program netlink-notifier does similar work to slurm notifier without
a spank/slurm dependency.
The ldms_sps library provides a simple-to-use library wrapping the
ldmsd_stream and ldms_xprt libraries.
In particular it lets the user specify the target daemon/port (or many)
and then delivers message to any available port and drops messages when
no ports are available. It transparently handles reconnections, timeouts,
threads, etc.
It supports netlink-notifier and is proposed to support kokkos and other
long-lived stream publishers.","@baallan , it seems like given the turn on this that it should be a WIP, not a pull request.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,758,2021-06-26T00:05:13Z,2021-09-01T15:03:30Z,2021-09-01T15:03:30Z,MERGED,True,4866,1,11,https://github.com/baallan,add kernel/netlink based pid notifier & simple publish stream api,4,[],https://github.com/ovis-hpc/ovis/pull/758,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/758#issuecomment-870097750,"Program netlink-notifier does similar work to slurm notifier without
a spank/slurm dependency.
The ldms_sps library provides a simple-to-use library wrapping the
ldmsd_stream and ldms_xprt libraries.
In particular it lets the user specify the target daemon/port (or many)
and then delivers message to any available port and drops messages when
no ports are available. It transparently handles reconnections, timeouts,
threads, etc.
It supports netlink-notifier and is proposed to support kokkos and other
long-lived stream publishers.","The churn has been on documentation and extra options, largely. But i'll mark it WIP for now. Expecting to finish up testing tomorrow. The ldms_sps, which is the part that most needs inspecting, is stable afaict.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,758,2021-06-26T00:05:13Z,2021-09-01T15:03:30Z,2021-09-01T15:03:30Z,MERGED,True,4866,1,11,https://github.com/baallan,add kernel/netlink based pid notifier & simple publish stream api,4,[],https://github.com/ovis-hpc/ovis/pull/758,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/758#issuecomment-881083702,"Program netlink-notifier does similar work to slurm notifier without
a spank/slurm dependency.
The ldms_sps library provides a simple-to-use library wrapping the
ldmsd_stream and ldms_xprt libraries.
In particular it lets the user specify the target daemon/port (or many)
and then delivers message to any available port and drops messages when
no ports are available. It transparently handles reconnections, timeouts,
threads, etc.
It supports netlink-notifier and is proposed to support kokkos and other
long-lived stream publishers.",@tom95858 ready to review/merge,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,758,2021-06-26T00:05:13Z,2021-09-01T15:03:30Z,2021-09-01T15:03:30Z,MERGED,True,4866,1,11,https://github.com/baallan,add kernel/netlink based pid notifier & simple publish stream api,4,[],https://github.com/ovis-hpc/ovis/pull/758,https://github.com/baallan,5,https://github.com/ovis-hpc/ovis/pull/758#issuecomment-897078994,"Program netlink-notifier does similar work to slurm notifier without
a spank/slurm dependency.
The ldms_sps library provides a simple-to-use library wrapping the
ldmsd_stream and ldms_xprt libraries.
In particular it lets the user specify the target daemon/port (or many)
and then delivers message to any available port and drops messages when
no ports are available. It transparently handles reconnections, timeouts,
threads, etc.
It supports netlink-notifier and is proposed to support kokkos and other
long-lived stream publishers.","@tom95858 changed back to work-in-progress, as a unit-ish test is in development and testing with darshan extension found some important nits.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,758,2021-06-26T00:05:13Z,2021-09-01T15:03:30Z,2021-09-01T15:03:30Z,MERGED,True,4866,1,11,https://github.com/baallan,add kernel/netlink based pid notifier & simple publish stream api,4,[],https://github.com/ovis-hpc/ovis/pull/758,https://github.com/tom95858,6,https://github.com/ovis-hpc/ovis/pull/758#issuecomment-901481131,"Program netlink-notifier does similar work to slurm notifier without
a spank/slurm dependency.
The ldms_sps library provides a simple-to-use library wrapping the
ldmsd_stream and ldms_xprt libraries.
In particular it lets the user specify the target daemon/port (or many)
and then delivers message to any available port and drops messages when
no ports are available. It transparently handles reconnections, timeouts,
threads, etc.
It supports netlink-notifier and is proposed to support kokkos and other
long-lived stream publishers.",Hi @baallan is this still WIP?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,758,2021-06-26T00:05:13Z,2021-09-01T15:03:30Z,2021-09-01T15:03:30Z,MERGED,True,4866,1,11,https://github.com/baallan,add kernel/netlink based pid notifier & simple publish stream api,4,[],https://github.com/ovis-hpc/ovis/pull/758,https://github.com/baallan,7,https://github.com/ovis-hpc/ovis/pull/758#issuecomment-901483052,"Program netlink-notifier does similar work to slurm notifier without
a spank/slurm dependency.
The ldms_sps library provides a simple-to-use library wrapping the
ldmsd_stream and ldms_xprt libraries.
In particular it lets the user specify the target daemon/port (or many)
and then delivers message to any available port and drops messages when
no ports are available. It transparently handles reconnections, timeouts,
threads, etc.
It supports netlink-notifier and is proposed to support kokkos and other
long-lived stream publishers.","@tom95858 It is now back to work in progress because we turned up some issues in testing it as part of darshan.
Also, the issue on lingering set names ( #771 ) needs to be resolved, I suppose, before we merge this.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,758,2021-06-26T00:05:13Z,2021-09-01T15:03:30Z,2021-09-01T15:03:30Z,MERGED,True,4866,1,11,https://github.com/baallan,add kernel/netlink based pid notifier & simple publish stream api,4,[],https://github.com/ovis-hpc/ovis/pull/758,https://github.com/tom95858,8,https://github.com/ovis-hpc/ovis/pull/758#issuecomment-908810156,"Program netlink-notifier does similar work to slurm notifier without
a spank/slurm dependency.
The ldms_sps library provides a simple-to-use library wrapping the
ldmsd_stream and ldms_xprt libraries.
In particular it lets the user specify the target daemon/port (or many)
and then delivers message to any available port and drops messages when
no ports are available. It transparently handles reconnections, timeouts,
threads, etc.
It supports netlink-notifier and is proposed to support kokkos and other
long-lived stream publishers.","@baallan, this is good to go yes?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,758,2021-06-26T00:05:13Z,2021-09-01T15:03:30Z,2021-09-01T15:03:30Z,MERGED,True,4866,1,11,https://github.com/baallan,add kernel/netlink based pid notifier & simple publish stream api,4,[],https://github.com/ovis-hpc/ovis/pull/758,https://github.com/tom95858,9,https://github.com/ovis-hpc/ovis/pull/758#issuecomment-908811605,"Program netlink-notifier does similar work to slurm notifier without
a spank/slurm dependency.
The ldms_sps library provides a simple-to-use library wrapping the
ldmsd_stream and ldms_xprt libraries.
In particular it lets the user specify the target daemon/port (or many)
and then delivers message to any available port and drops messages when
no ports are available. It transparently handles reconnections, timeouts,
threads, etc.
It supports netlink-notifier and is proposed to support kokkos and other
long-lived stream publishers.","Hi @baallan, the only think we might consider is that ""netlink"" is a generic interface to Linux kernel services. This sampler is using one instance of that to get notified of new processes. We might want to consider renaming this sampler/configuration option to something more specific. Right now, I think it's fine, but it is certainly a likelihood that we will use the netlink interface in future samplers fr other purposes.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,758,2021-06-26T00:05:13Z,2021-09-01T15:03:30Z,2021-09-01T15:03:30Z,MERGED,True,4866,1,11,https://github.com/baallan,add kernel/netlink based pid notifier & simple publish stream api,4,[],https://github.com/ovis-hpc/ovis/pull/758,https://github.com/baallan,10,https://github.com/ovis-hpc/ovis/pull/758#issuecomment-909357266,"Program netlink-notifier does similar work to slurm notifier without
a spank/slurm dependency.
The ldms_sps library provides a simple-to-use library wrapping the
ldmsd_stream and ldms_xprt libraries.
In particular it lets the user specify the target daemon/port (or many)
and then delivers message to any available port and drops messages when
no ports are available. It transparently handles reconnections, timeouts,
threads, etc.
It supports netlink-notifier and is proposed to support kokkos and other
long-lived stream publishers.","I believe it is good enough, unless there is a new ""stop publishing/stop subscribing"" api I have missed. I too can imagine we might find additional uses for netlink, though at the moment the one I want most (trace file operations at kernel level) seems to be out of scope for netlink (but existing in several elsewheres).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,759,2021-06-30T15:30:42Z,2021-06-30T23:31:20Z,2021-06-30T23:31:20Z,MERGED,True,5,5,1,https://github.com/narategithub,Fix forever blocked ldms.dir() in Python,1,[],https://github.com/ovis-hpc/ovis/pull/759,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/759,"If the connection is terminated while ldms.dir() is waiting for the
dir result, it blocking waits indefinitely. This patch remove the
_dir_sem semaphore specific for ldms.dir() and use _conn_sem
instead, so that the ldms.dir() unblocks and raise an exception when
the connection terminates.","If the connection is terminated while ldms.dir() is waiting for the
dir result, it blocking waits indefinitely. This patch remove the
_dir_sem semaphore specific for ldms.dir() and use _conn_sem
instead, so that the ldms.dir() unblocks and raise an exception when
the connection terminates.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,760,2021-06-30T15:31:01Z,2021-07-19T22:50:55Z,2021-07-19T22:50:55Z,MERGED,True,2,0,1,https://github.com/narategithub,Fix SIGSEGV caused by `json_parser_free(NULL)`,1,[],https://github.com/ovis-hpc/ovis/pull/760,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/760,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,760,2021-06-30T15:31:01Z,2021-07-19T22:50:55Z,2021-07-19T22:50:55Z,MERGED,True,2,0,1,https://github.com/narategithub,Fix SIGSEGV caused by `json_parser_free(NULL)`,1,[],https://github.com/ovis-hpc/ovis/pull/760,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/760#issuecomment-871759324,,"@narategithub Instead of this patch, please fix json_parser_free(NULL) so it acts like regular free(NULL) (check for null and return doing nothing). That way we can stop with the extraneous guard code every time JPF is called.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,760,2021-06-30T15:31:01Z,2021-07-19T22:50:55Z,2021-07-19T22:50:55Z,MERGED,True,2,0,1,https://github.com/narategithub,Fix SIGSEGV caused by `json_parser_free(NULL)`,1,[],https://github.com/ovis-hpc/ovis/pull/760,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/760#issuecomment-882672275,,@narategithub could you please make the change recommended by @baallan,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,760,2021-06-30T15:31:01Z,2021-07-19T22:50:55Z,2021-07-19T22:50:55Z,MERGED,True,2,0,1,https://github.com/narategithub,Fix SIGSEGV caused by `json_parser_free(NULL)`,1,[],https://github.com/ovis-hpc/ovis/pull/760,https://github.com/narategithub,4,https://github.com/ovis-hpc/ovis/pull/760#issuecomment-882676087,,@tom95858 sure. I was not comfortable in doing so as it could hide the bugs and make debugging harder.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,760,2021-06-30T15:31:01Z,2021-07-19T22:50:55Z,2021-07-19T22:50:55Z,MERGED,True,2,0,1,https://github.com/narategithub,Fix SIGSEGV caused by `json_parser_free(NULL)`,1,[],https://github.com/ovis-hpc/ovis/pull/760,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/760#issuecomment-882687953,,"I think that is a valid concern, however, we've adopted the model of
'free()' which ignores a NULL input. This simplifies the code since every
asset you allocate doesn't have to be checked with the if (a) free(a) code
pattern in the error path.
…
On Mon, Jul 19, 2021 at 10:13 AM narategithub ***@***.***> wrote:
 @tom95858 <https://github.com/tom95858> sure. I was not comfortable in
 doing so as it could hide the bugs and make debugging harder.

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#760 (comment)>, or
 unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ABVTPXCKMUK4QIQY62ZXBWDTYRFJFANCNFSM47SSXDMQ>
 .


-- 
Thomas Tucker, President, Open Grid Computing, Inc.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,760,2021-06-30T15:31:01Z,2021-07-19T22:50:55Z,2021-07-19T22:50:55Z,MERGED,True,2,0,1,https://github.com/narategithub,Fix SIGSEGV caused by `json_parser_free(NULL)`,1,[],https://github.com/ovis-hpc/ovis/pull/760,https://github.com/narategithub,6,https://github.com/ovis-hpc/ovis/pull/760#issuecomment-882701255,,@tom95858 the change has been made. I think it is now ready to merge.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,761,2021-07-01T16:50:58Z,2021-08-17T00:38:49Z,2021-08-17T00:38:49Z,MERGED,True,181,12,6,https://github.com/baallan,"minor patches for json, htbl, and rbt ",3,[],https://github.com/ovis-hpc/ovis/pull/761,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/761,"json needs an value_str_str function, htbl needs a test like rbt, and rbt needs format string patches to pass -Wall -Werr.","json needs an value_str_str function, htbl needs a test like rbt, and rbt needs format string patches to pass -Wall -Werr.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,761,2021-07-01T16:50:58Z,2021-08-17T00:38:49Z,2021-08-17T00:38:49Z,MERGED,True,181,12,6,https://github.com/baallan,"minor patches for json, htbl, and rbt ",3,[],https://github.com/ovis-hpc/ovis/pull/761,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/761#issuecomment-872414045,"json needs an value_str_str function, htbl needs a test like rbt, and rbt needs format string patches to pass -Wall -Werr.",@narategithub @tom95858 The patches here came up while developing stream data plugins and debugging htbl & rbt usage.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,761,2021-07-01T16:50:58Z,2021-08-17T00:38:49Z,2021-08-17T00:38:49Z,MERGED,True,181,12,6,https://github.com/baallan,"minor patches for json, htbl, and rbt ",3,[],https://github.com/ovis-hpc/ovis/pull/761,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/761#issuecomment-872417886,"json needs an value_str_str function, htbl needs a test like rbt, and rbt needs format string patches to pass -Wall -Werr.",extra push because I forgot to delete the #define JDEBUG inside the json C.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,761,2021-07-01T16:50:58Z,2021-08-17T00:38:49Z,2021-08-17T00:38:49Z,MERGED,True,181,12,6,https://github.com/baallan,"minor patches for json, htbl, and rbt ",3,[],https://github.com/ovis-hpc/ovis/pull/761,https://github.com/tom95858,4,https://github.com/ovis-hpc/ovis/pull/761#issuecomment-882671824,"json needs an value_str_str function, htbl needs a test like rbt, and rbt needs format string patches to pass -Wall -Werr.","@baallan, I do think it is a legitimate question as to why it needs to be a counted string as opposed to just a null terminated char *. I think I just did it that way to avoid lots of strlen(s) when the length is known a-priori.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,761,2021-07-01T16:50:58Z,2021-08-17T00:38:49Z,2021-08-17T00:38:49Z,MERGED,True,181,12,6,https://github.com/baallan,"minor patches for json, htbl, and rbt ",3,[],https://github.com/ovis-hpc/ovis/pull/761,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/761#issuecomment-882790875,"json needs an value_str_str function, htbl needs a test like rbt, and rbt needs format string patches to pass -Wall -Werr.",I think I like your suggestion.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,761,2021-07-01T16:50:58Z,2021-08-17T00:38:49Z,2021-08-17T00:38:49Z,MERGED,True,181,12,6,https://github.com/baallan,"minor patches for json, htbl, and rbt ",3,[],https://github.com/ovis-hpc/ovis/pull/761,https://github.com/baallan,6,https://github.com/ovis-hpc/ovis/pull/761#issuecomment-882793178,"json needs an value_str_str function, htbl needs a test like rbt, and rbt needs format string patches to pass -Wall -Werr.","I think I like your suggestion.

I've made several. Which one?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,761,2021-07-01T16:50:58Z,2021-08-17T00:38:49Z,2021-08-17T00:38:49Z,MERGED,True,181,12,6,https://github.com/baallan,"minor patches for json, htbl, and rbt ",3,[],https://github.com/ovis-hpc/ovis/pull/761,https://github.com/tom95858,7,https://github.com/ovis-hpc/ovis/pull/761#issuecomment-882911037,"json needs an value_str_str function, htbl needs a test like rbt, and rbt needs format string patches to pass -Wall -Werr.","@baallan, add a convenience interface that returns the str_.str portion of  the json counted string. To avoid changing the current interfaces and the associated code, you could call the interface json_value_cstr(e) and it would return the ""C-string"" associated with the counted string 'e'.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,761,2021-07-01T16:50:58Z,2021-08-17T00:38:49Z,2021-08-17T00:38:49Z,MERGED,True,181,12,6,https://github.com/baallan,"minor patches for json, htbl, and rbt ",3,[],https://github.com/ovis-hpc/ovis/pull/761,https://github.com/baallan,8,https://github.com/ovis-hpc/ovis/pull/761#issuecomment-884271089,"json needs an value_str_str function, htbl needs a test like rbt, and rbt needs format string patches to pass -Wall -Werr.","@baallan, add a convenience interface that returns the str_.str portion of the json counted string. To avoid changing the current interfaces and the associated code, you could call the interface json_value_cstr(e) and it would return the ""C-string"" associated with the counted string 'e'.

will do.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,761,2021-07-01T16:50:58Z,2021-08-17T00:38:49Z,2021-08-17T00:38:49Z,MERGED,True,181,12,6,https://github.com/baallan,"minor patches for json, htbl, and rbt ",3,[],https://github.com/ovis-hpc/ovis/pull/761,https://github.com/baallan,9,https://github.com/ovis-hpc/ovis/pull/761#issuecomment-884358781,"json needs an value_str_str function, htbl needs a test like rbt, and rbt needs format string patches to pass -Wall -Werr.",@tom95858 updated to  json_value_cstr(e) and included it in ovis_json_test.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,762,2021-07-07T16:28:39Z,2021-07-08T01:19:57Z,2021-07-08T01:19:57Z,MERGED,True,28,8,1,https://github.com/baallan,"fix missing v_char case in csv, whitespace and err msg.",1,[],https://github.com/ovis-hpc/ovis/pull/762,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/762,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,762,2021-07-07T16:28:39Z,2021-07-08T01:19:57Z,2021-07-08T01:19:57Z,MERGED,True,28,8,1,https://github.com/baallan,"fix missing v_char case in csv, whitespace and err msg.",1,[],https://github.com/ovis-hpc/ovis/pull/762,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/762#issuecomment-875750157,,"Without the char value type case added here, the store rejects all data sets containing a char metric.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,763,2021-07-07T22:59:12Z,2021-09-19T15:15:18Z,2021-09-20T16:53:14Z,CLOSED,False,17,3,1,https://github.com/baallan,Demote ENOENT message to LINFO on update callback,3,[],https://github.com/ovis-hpc/ovis/pull/763,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/763,"Samplers removing set instances (and this propagating upstream)
is now a routine event (lustre mount points, app_sampler processes).
This demotes that event to an info from an error, leaving the other
non-specific messages as LERROR.","Samplers removing set instances (and this propagating upstream)
is now a routine event (lustre mount points, app_sampler processes).
This demotes that event to an info from an error, leaving the other
non-specific messages as LERROR.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,763,2021-07-07T22:59:12Z,2021-09-19T15:15:18Z,2021-09-20T16:53:14Z,CLOSED,False,17,3,1,https://github.com/baallan,Demote ENOENT message to LINFO on update callback,3,[],https://github.com/ovis-hpc/ovis/pull/763,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/763#issuecomment-882667326,"Samplers removing set instances (and this propagating upstream)
is now a routine event (lustre mount points, app_sampler processes).
This demotes that event to an info from an error, leaving the other
non-specific messages as LERROR.","@baallan I have no issue with demoting the error, but this is the lookup path, not the update path which means it happens once when the agg becomes aware of the set via dir_add. Are you seeing this error a lot? If you are it seems like it may be indicative of either a configuration error or some deeper bug.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,763,2021-07-07T22:59:12Z,2021-09-19T15:15:18Z,2021-09-20T16:53:14Z,CLOSED,False,17,3,1,https://github.com/baallan,Demote ENOENT message to LINFO on update callback,3,[],https://github.com/ovis-hpc/ovis/pull/763,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/763#issuecomment-882713542,"Samplers removing set instances (and this propagating upstream)
is now a routine event (lustre mount points, app_sampler processes).
This demotes that event to an info from an error, leaving the other
non-specific messages as LERROR.",@tom95858 I can send you a log of the nuisance messages if you like. These happen in testing the linux_proc_sampler (similar to app_sampler in terms of sets appear/disappear).,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,763,2021-07-07T22:59:12Z,2021-09-19T15:15:18Z,2021-09-20T16:53:14Z,CLOSED,False,17,3,1,https://github.com/baallan,Demote ENOENT message to LINFO on update callback,3,[],https://github.com/ovis-hpc/ovis/pull/763,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/763#issuecomment-889394602,"Samplers removing set instances (and this propagating upstream)
is now a routine event (lustre mount points, app_sampler processes).
This demotes that event to an info from an error, leaving the other
non-specific messages as LERROR.","This is fine as-is, but additional work will likely touch the same function in resolving #771.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,763,2021-07-07T22:59:12Z,2021-09-19T15:15:18Z,2021-09-20T16:53:14Z,CLOSED,False,17,3,1,https://github.com/baallan,Demote ENOENT message to LINFO on update callback,3,[],https://github.com/ovis-hpc/ovis/pull/763,https://github.com/baallan,5,https://github.com/ovis-hpc/ovis/pull/763#issuecomment-905794378,"Samplers removing set instances (and this propagating upstream)
is now a routine event (lustre mount points, app_sampler processes).
This demotes that event to an info from an error, leaving the other
non-specific messages as LERROR.",@tom95858 I rebased this patch on current ovis-4 and extended it with a commit that causes the failed-never-to-succeed work to be done once instead of repeatedly.  I haven't managed to spot any clean way to just remove the bad prdcr_set from the set_tree which would eliminate the issue (on the aggregator side).,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,763,2021-07-07T22:59:12Z,2021-09-19T15:15:18Z,2021-09-20T16:53:14Z,CLOSED,False,17,3,1,https://github.com/baallan,Demote ENOENT message to LINFO on update callback,3,[],https://github.com/ovis-hpc/ovis/pull/763,https://github.com/tom95858,6,https://github.com/ovis-hpc/ovis/pull/763#issuecomment-905797297,"Samplers removing set instances (and this propagating upstream)
is now a routine event (lustre mount points, app_sampler processes).
This demotes that event to an info from an error, leaving the other
non-specific messages as LERROR.","@baallan if you have a way to reliably reproduce this, let's set up a zoom session so that we can root-cause this issue.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,763,2021-07-07T22:59:12Z,2021-09-19T15:15:18Z,2021-09-20T16:53:14Z,CLOSED,False,17,3,1,https://github.com/baallan,Demote ENOENT message to LINFO on update callback,3,[],https://github.com/ovis-hpc/ovis/pull/763,https://github.com/baallan,7,https://github.com/ovis-hpc/ovis/pull/763#issuecomment-905804103,"Samplers removing set instances (and this propagating upstream)
is now a routine event (lustre mount points, app_sampler processes).
This demotes that event to an info from an error, leaving the other
non-specific messages as LERROR.","@tom95858 highly reproducible; I can give you a branch name to build and run locally, or we can get on a zoom today or tomorrow after 2.30 MT.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,763,2021-07-07T22:59:12Z,2021-09-19T15:15:18Z,2021-09-20T16:53:14Z,CLOSED,False,17,3,1,https://github.com/baallan,Demote ENOENT message to LINFO on update callback,3,[],https://github.com/ovis-hpc/ovis/pull/763,https://github.com/tom95858,8,https://github.com/ovis-hpc/ovis/pull/763#issuecomment-905967488,"Samplers removing set instances (and this propagating upstream)
is now a routine event (lustre mount points, app_sampler processes).
This demotes that event to an info from an error, leaving the other
non-specific messages as LERROR.","Nichanon will u be available?
…
On Wed, Aug 25, 2021, 1:14 PM Benjamin Allan ***@***.***> wrote:
 @tom95858 <https://github.com/tom95858> highly reproducible; I can give
 you a branch name to build and run locally, or we can get on a zoom today
 or tomorrow after 2.30 MT.

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#763 (comment)>, or
 unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ABVTPXBMJFYBWAEPSYLJAGTT6U6JFANCNFSM477SDD7Q>
 .
 Triage notifications on the go with GitHub Mobile for iOS
 <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>
 or Android
 <https://play.google.com/store/apps/details?id=com.github.android&utm_campaign=notification-email>
 .",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,763,2021-07-07T22:59:12Z,2021-09-19T15:15:18Z,2021-09-20T16:53:14Z,CLOSED,False,17,3,1,https://github.com/baallan,Demote ENOENT message to LINFO on update callback,3,[],https://github.com/ovis-hpc/ovis/pull/763,https://github.com/nichamon,9,https://github.com/ovis-hpc/ovis/pull/763#issuecomment-906518844,"Samplers removing set instances (and this propagating upstream)
is now a routine event (lustre mount points, app_sampler processes).
This demotes that event to an info from an error, leaving the other
non-specific messages as LERROR.","Nichanon will u be available?

@tom95858 @baallan Sorry, I just saw the message. Today (8/26) I'm available until 3 PM CDT. Tomorrow I'm available 9-3 CDT.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,763,2021-07-07T22:59:12Z,2021-09-19T15:15:18Z,2021-09-20T16:53:14Z,CLOSED,False,17,3,1,https://github.com/baallan,Demote ENOENT message to LINFO on update callback,3,[],https://github.com/ovis-hpc/ovis/pull/763,https://github.com/baallan,10,https://github.com/ovis-hpc/ovis/pull/763#issuecomment-906527674,"Samplers removing set instances (and this propagating upstream)
is now a routine event (lustre mount points, app_sampler processes).
This demotes that event to an info from an error, leaving the other
non-specific messages as LERROR.","Nichanon will u be available?

@tom95858 @baallan Sorry, I just saw the message. Today (8/26) I'm available until 3 PM CDT. Tomorrow I'm available 9-3 CDT.

Tomorrow 11-2 CT is ok for me.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,763,2021-07-07T22:59:12Z,2021-09-19T15:15:18Z,2021-09-20T16:53:14Z,CLOSED,False,17,3,1,https://github.com/baallan,Demote ENOENT message to LINFO on update callback,3,[],https://github.com/ovis-hpc/ovis/pull/763,https://github.com/nichamon,11,https://github.com/ovis-hpc/ovis/pull/763#issuecomment-908638613,"Samplers removing set instances (and this propagating upstream)
is now a routine event (lustre mount points, app_sampler processes).
This demotes that event to an info from an error, leaving the other
non-specific messages as LERROR.",See my comments in #771 (comment).,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,763,2021-07-07T22:59:12Z,2021-09-19T15:15:18Z,2021-09-20T16:53:14Z,CLOSED,False,17,3,1,https://github.com/baallan,Demote ENOENT message to LINFO on update callback,3,[],https://github.com/ovis-hpc/ovis/pull/763,https://github.com/tom95858,12,https://github.com/ovis-hpc/ovis/pull/763#issuecomment-921358170,"Samplers removing set instances (and this propagating upstream)
is now a routine event (lustre mount points, app_sampler processes).
This demotes that event to an info from an error, leaving the other
non-specific messages as LERROR.",@baallan could you please close this. This has been fixed with the SET_DELETE message change.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,763,2021-07-07T22:59:12Z,2021-09-19T15:15:18Z,2021-09-20T16:53:14Z,CLOSED,False,17,3,1,https://github.com/baallan,Demote ENOENT message to LINFO on update callback,3,[],https://github.com/ovis-hpc/ovis/pull/763,https://github.com/baallan,13,https://github.com/ovis-hpc/ovis/pull/763#issuecomment-923102956,"Samplers removing set instances (and this propagating upstream)
is now a routine event (lustre mount points, app_sampler processes).
This demotes that event to an info from an error, leaving the other
non-specific messages as LERROR.",@tom95858 I was out friday. I will rerun my tests that provoke it and see if there's anything that still needs revising.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,764,2021-07-07T23:22:50Z,2021-07-19T22:50:20Z,2021-07-19T22:50:20Z,MERGED,True,24,6,3,https://github.com/baallan,Add env var LDMSD_LOG_TIME_SEC to alter log timestamp format.,1,[],https://github.com/ovis-hpc/ovis/pull/764,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/764,"The default behavior is to log with date strings. If the env var
LDMSD_LOG_TIME_SEC is set to anything, epoch time (%lu.%06lu) is
used instead.","The default behavior is to log with date strings. If the env var
LDMSD_LOG_TIME_SEC is set to anything, epoch time (%lu.%06lu) is
used instead.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,764,2021-07-07T23:22:50Z,2021-07-19T22:50:20Z,2021-07-19T22:50:20Z,MERGED,True,24,6,3,https://github.com/baallan,Add env var LDMSD_LOG_TIME_SEC to alter log timestamp format.,1,[],https://github.com/ovis-hpc/ovis/pull/764,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/764#issuecomment-882674779,"The default behavior is to log with date strings. If the env var
LDMSD_LOG_TIME_SEC is set to anything, epoch time (%lu.%06lu) is
used instead.","@baallan, does it make sense to use LDMSD_LOG_TIME_FMT to allow the user to explicitly specify the desired format?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,764,2021-07-07T23:22:50Z,2021-07-19T22:50:20Z,2021-07-19T22:50:20Z,MERGED,True,24,6,3,https://github.com/baallan,Add env var LDMSD_LOG_TIME_SEC to alter log timestamp format.,1,[],https://github.com/ovis-hpc/ovis/pull/764,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/764#issuecomment-882735256,"The default behavior is to log with date strings. If the env var
LDMSD_LOG_TIME_SEC is set to anything, epoch time (%lu.%06lu) is
used instead.","@tom95858 I tried that first (since slurm has that feature), but it got me into a lot of 'undefined behavior' territory if the format string is bogus and it also did NOT get me the sub-second field I was after. So if we want arbitrary strftime support, that would be a second feature for managing time format.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,766,2021-07-15T22:47:49Z,2021-07-19T22:38:07Z,2021-07-19T22:38:07Z,MERGED,True,1,1,1,https://github.com/baallan,exclude default /lib and /lib64 from extra lib search path computed by OPTION_WITH,1,[],https://github.com/ovis-hpc/ovis/pull/766,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/766,"Without this change extraneous /lib can appear in search paths before the build's libdir, causing older installations of ldms to get mixed with the build and fail immediately on symbols or crash later.","Without this change extraneous /lib can appear in search paths before the build's libdir, causing older installations of ldms to get mixed with the build and fail immediately on symbols or crash later.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,767,2021-07-16T00:13:50Z,2021-09-01T15:04:09Z,2021-09-01T15:04:09Z,MERGED,True,2695,3,13,https://github.com/baallan,Add linux_proc_sampler and related doc derived from app_sampler.,3,[],https://github.com/ovis-hpc/ovis/pull/767,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/767,"This new sampler consumes pids from a stream compatible with it or the app_sampler and supplied by slurm_notifier or netlink-notifier pending in #758.
It has been tested on CTS-1 hardware/toss-3 and centos.
It provides reference tests for app_sampler and linux_proc_sampler driven by ldms-static-test.sh and man page.
It is partially derived (with attribution) from forkstat.
It is disabled by default; configure with '--enable-app-sampler' to test; changing the default to enabled for app_sampler and this would be a good thing but is separable.
It will not pass a build bot test until #761 is merged for json_value_str_str.","This new sampler consumes pids from a stream compatible with it or the app_sampler and supplied by slurm_notifier or netlink-notifier pending in #758.
It has been tested on CTS-1 hardware/toss-3 and centos.
It provides reference tests for app_sampler and linux_proc_sampler driven by ldms-static-test.sh and man page.
It is partially derived (with attribution) from forkstat.
It is disabled by default; configure with '--enable-app-sampler' to test; changing the default to enabled for app_sampler and this would be a good thing but is separable.
It will not pass a build bot test until #761 is merged for json_value_str_str.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,767,2021-07-16T00:13:50Z,2021-09-01T15:04:09Z,2021-09-01T15:04:09Z,MERGED,True,2695,3,13,https://github.com/baallan,Add linux_proc_sampler and related doc derived from app_sampler.,3,[],https://github.com/ovis-hpc/ovis/pull/767,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/767#issuecomment-881093639,"This new sampler consumes pids from a stream compatible with it or the app_sampler and supplied by slurm_notifier or netlink-notifier pending in #758.
It has been tested on CTS-1 hardware/toss-3 and centos.
It provides reference tests for app_sampler and linux_proc_sampler driven by ldms-static-test.sh and man page.
It is partially derived (with attribution) from forkstat.
It is disabled by default; configure with '--enable-app-sampler' to test; changing the default to enabled for app_sampler and this would be a good thing but is separable.
It will not pass a build bot test until #761 is merged for json_value_str_str.","@tom95858 this can be easily tested after you merge #758, #761, #763.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,767,2021-07-16T00:13:50Z,2021-09-01T15:04:09Z,2021-09-01T15:04:09Z,MERGED,True,2695,3,13,https://github.com/baallan,Add linux_proc_sampler and related doc derived from app_sampler.,3,[],https://github.com/ovis-hpc/ovis/pull/767,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/767#issuecomment-905599560,"This new sampler consumes pids from a stream compatible with it or the app_sampler and supplied by slurm_notifier or netlink-notifier pending in #758.
It has been tested on CTS-1 hardware/toss-3 and centos.
It provides reference tests for app_sampler and linux_proc_sampler driven by ldms-static-test.sh and man page.
It is partially derived (with attribution) from forkstat.
It is disabled by default; configure with '--enable-app-sampler' to test; changing the default to enabled for app_sampler and this would be a good thing but is separable.
It will not pass a build bot test until #761 is merged for json_value_str_str.","@tom95858 this sampler is ready for review.
I  propose changing the default of app-sampler to OPTION_DEFAULT_ENABLE before merging, as the code in this directory is not dependent on anything uncommon.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,768,2021-07-19T14:38:54Z,2021-07-19T15:57:19Z,2022-01-18T04:10:48Z,MERGED,True,4,2,1,https://github.com/nichamon,Fix a deadlock in ldmsd_cfgobj_del(),1,[],https://github.com/ovis-hpc/ovis/pull/768,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/768,"The function calls pthread_mutex_lock() instead of
pthread_mutex_unlock().","The function calls pthread_mutex_lock() instead of
pthread_mutex_unlock().",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,769,2021-07-20T15:39:40Z,2021-08-17T00:37:38Z,2022-01-18T04:10:50Z,MERGED,True,1,1,1,https://github.com/nichamon,Fix the strgp_status report's flush value,1,[],https://github.com/ovis-hpc/ovis/pull/769,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/769,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,769,2021-07-20T15:39:40Z,2021-08-17T00:37:38Z,2022-01-18T04:10:50Z,MERGED,True,1,1,1,https://github.com/nichamon,Fix the strgp_status report's flush value,1,[],https://github.com/ovis-hpc/ovis/pull/769,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/769#issuecomment-883495176,,"@tom95858 The comment @baallan made was on a merged PR #748.  Thanks, @baallan, for catching this.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,770,2021-07-20T20:10:39Z,2021-08-17T00:36:50Z,2022-01-18T04:10:53Z,MERGED,True,9,1,1,https://github.com/nichamon,Fix the failover's ping logic,1,[],https://github.com/ovis-hpc/ovis/pull/770,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/770,"The patch fixes two bugs in the failover’s ping logic. First, the ping
response does not include PEERCFG_ACTIVATED in the flag when the peercfg
has been activated. Second, the ping response handler checks whether the
failover buddy has activated the peercfg or not with the wrong logic. It
verifies whether the buddy’s failover has been configured or not instead
of checking if the buddy has started the peercfg. If the buddy has
started the peercfg, it should not start its own cfg yet.","The patch fixes two bugs in the failover’s ping logic. First, the ping
response does not include PEERCFG_ACTIVATED in the flag when the peercfg
has been activated. Second, the ping response handler checks whether the
failover buddy has activated the peercfg or not with the wrong logic. It
verifies whether the buddy’s failover has been configured or not instead
of checking if the buddy has started the peercfg. If the buddy has
started the peercfg, it should not start its own cfg yet.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,770,2021-07-20T20:10:39Z,2021-08-17T00:36:50Z,2022-01-18T04:10:53Z,MERGED,True,9,1,1,https://github.com/nichamon,Fix the failover's ping logic,1,[],https://github.com/ovis-hpc/ovis/pull/770,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/770#issuecomment-884352292,"The patch fixes two bugs in the failover’s ping logic. First, the ping
response does not include PEERCFG_ACTIVATED in the flag when the peercfg
has been activated. Second, the ping response handler checks whether the
failover buddy has activated the peercfg or not with the wrong logic. It
verifies whether the buddy’s failover has been configured or not instead
of checking if the buddy has started the peercfg. If the buddy has
started the peercfg, it should not start its own cfg yet.",I found the bugs by code inspection and git history. The patch passed the failover_test in the ldms-test repo.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,774,2021-07-27T06:43:32Z,2021-08-31T00:50:57Z,2021-08-31T00:50:57Z,MERGED,True,61,55,5,https://github.com/baallan,fix #765 lnet_stats  retry needed,3,[],https://github.com/ovis-hpc/ovis/pull/774,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/774,"fixes #765
includes updated man page and test driver","fixes #765
includes updated man page and test driver",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,774,2021-07-27T06:43:32Z,2021-08-31T00:50:57Z,2021-08-31T00:50:57Z,MERGED,True,61,55,5,https://github.com/baallan,fix #765 lnet_stats  retry needed,3,[],https://github.com/ovis-hpc/ovis/pull/774,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/774#issuecomment-908629123,"fixes #765
includes updated man page and test driver",@tom95858 this should be good to go now.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,775,2021-07-29T17:05:27Z,2021-08-18T18:49:05Z,2021-08-18T18:49:05Z,MERGED,True,4,2,1,https://github.com/baallan,fix #773 unreleased lock in __send_lookup_reply,2,[],https://github.com/ovis-hpc/ovis/pull/775,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/775,fixes related error logging in caller also.,fixes related error logging in caller also.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,775,2021-07-29T17:05:27Z,2021-08-18T18:49:05Z,2021-08-18T18:49:05Z,MERGED,True,4,2,1,https://github.com/baallan,fix #773 unreleased lock in __send_lookup_reply,2,[],https://github.com/ovis-hpc/ovis/pull/775,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/775#issuecomment-899085150,fixes related error logging in caller also.,@nichamon could you please review this,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,775,2021-07-29T17:05:27Z,2021-08-18T18:49:05Z,2021-08-18T18:49:05Z,MERGED,True,4,2,1,https://github.com/baallan,fix #773 unreleased lock in __send_lookup_reply,2,[],https://github.com/ovis-hpc/ovis/pull/775,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/775#issuecomment-899822341,fixes related error logging in caller also.,"@tom95858 The fixes are legit.
@baallan Thanks for catching the missing unlock and the wrong error code variable. What do think about merging the two error messages, the zap_send synchronously errors and the local error code? The two messages are related. If zap_send() doesn't fail, the client will receive the error. In this case, the zap_send() failed so you logged the error that triggers the zap_send(). Shall we log the error something like
x->log(""%s: x %p: zap_send synchronously errors '%s' while sending the error %d (%s)\n"",
				__func__, x, zap_err_str(zerr), rc, STRERROR(rc));",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,775,2021-07-29T17:05:27Z,2021-08-18T18:49:05Z,2021-08-18T18:49:05Z,MERGED,True,4,2,1,https://github.com/baallan,fix #773 unreleased lock in __send_lookup_reply,2,[],https://github.com/ovis-hpc/ovis/pull/775,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/775#issuecomment-900393277,fixes related error logging in caller also.,@nichamon done combining the messages.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,775,2021-07-29T17:05:27Z,2021-08-18T18:49:05Z,2021-08-18T18:49:05Z,MERGED,True,4,2,1,https://github.com/baallan,fix #773 unreleased lock in __send_lookup_reply,2,[],https://github.com/ovis-hpc/ovis/pull/775,https://github.com/baallan,5,https://github.com/ovis-hpc/ovis/pull/775#issuecomment-900425131,fixes related error logging in caller also.,@nichamon looks like the build fail on ubuntu is provoked by github and not the code change.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,775,2021-07-29T17:05:27Z,2021-08-18T18:49:05Z,2021-08-18T18:49:05Z,MERGED,True,4,2,1,https://github.com/baallan,fix #773 unreleased lock in __send_lookup_reply,2,[],https://github.com/ovis-hpc/ovis/pull/775,https://github.com/nichamon,6,https://github.com/ovis-hpc/ovis/pull/775#issuecomment-900591052,fixes related error logging in caller also.,"@nichamon looks like the build fail on ubuntu is provoked by github and not the code change.

@baallan Github didn't even run ./autogen.sh yet. It failed when it tried to fetch the code. Could you try to re-run the test again?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,775,2021-07-29T17:05:27Z,2021-08-18T18:49:05Z,2021-08-18T18:49:05Z,MERGED,True,4,2,1,https://github.com/baallan,fix #773 unreleased lock in __send_lookup_reply,2,[],https://github.com/ovis-hpc/ovis/pull/775,https://github.com/baallan,7,https://github.com/ovis-hpc/ovis/pull/775#issuecomment-900603264,fixes related error logging in caller also.,"@nichamon I tried, and there is no page which presents me with an option to rerun the check or the entire workflow; I presume this is due to my role in the project being 'outside collaborator'.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,775,2021-07-29T17:05:27Z,2021-08-18T18:49:05Z,2021-08-18T18:49:05Z,MERGED,True,4,2,1,https://github.com/baallan,fix #773 unreleased lock in __send_lookup_reply,2,[],https://github.com/ovis-hpc/ovis/pull/775,https://github.com/nichamon,8,https://github.com/ovis-hpc/ovis/pull/775#issuecomment-900630408,fixes related error logging in caller also.,"@baallan What works for me in this situation is to do git commit --amend without changing the code and the commit message. Could you please give it a try?
On your local machine,
> git checkout <branch name>
> git commit --amend # Save and close the editor without changing anything
> git push -f <remote> HEAD

You would need to force push the HEAD to the remote branch because git commit --amend will always change the TIP of the branch locally.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,775,2021-07-29T17:05:27Z,2021-08-18T18:49:05Z,2021-08-18T18:49:05Z,MERGED,True,4,2,1,https://github.com/baallan,fix #773 unreleased lock in __send_lookup_reply,2,[],https://github.com/ovis-hpc/ovis/pull/775,https://github.com/baallan,9,https://github.com/ovis-hpc/ovis/pull/775#issuecomment-900632298,fixes related error logging in caller also.,"@nichamon the re-run checks hack that seems to work is to close and immediately reopen the issue, doable with  UI buttons, though undocumented.",True,{'THUMBS_UP': ['https://github.com/nichamon']}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,775,2021-07-29T17:05:27Z,2021-08-18T18:49:05Z,2021-08-18T18:49:05Z,MERGED,True,4,2,1,https://github.com/baallan,fix #773 unreleased lock in __send_lookup_reply,2,[],https://github.com/ovis-hpc/ovis/pull/775,https://github.com/baallan,10,https://github.com/ovis-hpc/ovis/pull/775#issuecomment-901339413,fixes related error logging in caller also.,@nichamon is there anything else you would like changed before you can approve this one?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,775,2021-07-29T17:05:27Z,2021-08-18T18:49:05Z,2021-08-18T18:49:05Z,MERGED,True,4,2,1,https://github.com/baallan,fix #773 unreleased lock in __send_lookup_reply,2,[],https://github.com/ovis-hpc/ovis/pull/775,https://github.com/nichamon,11,https://github.com/ovis-hpc/ovis/pull/775#issuecomment-901341118,fixes related error logging in caller also.,@baallan I approved it yesterday before you resolved the Github action fail. I just approved it again just in case.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,776,2021-07-29T17:07:59Z,2021-08-18T18:49:26Z,2021-08-18T18:49:26Z,MERGED,True,19,12,1,https://github.com/baallan,fixes #772 missing unlock in process_dir_set_info,1,[],https://github.com/ovis-hpc/ovis/pull/776,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/776,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,776,2021-07-29T17:07:59Z,2021-08-18T18:49:26Z,2021-08-18T18:49:26Z,MERGED,True,19,12,1,https://github.com/baallan,fixes #772 missing unlock in process_dir_set_info,1,[],https://github.com/ovis-hpc/ovis/pull/776,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/776#issuecomment-899084998,,@nichamon could you please review this,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,776,2021-07-29T17:07:59Z,2021-08-18T18:49:26Z,2021-08-18T18:49:26Z,MERGED,True,19,12,1,https://github.com/baallan,fixes #772 missing unlock in process_dir_set_info,1,[],https://github.com/ovis-hpc/ovis/pull/776,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/776#issuecomment-899907586,,@nichamon please approve when it looks correct.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,777,2021-08-22T00:27:00Z,2021-10-23T20:53:16Z,2021-10-23T20:53:16Z,MERGED,True,1737,1629,18,https://github.com/oceandlr,(l2) streams_csv_store,6,"['Stores', 'V4']",https://github.com/ovis-hpc/ovis/pull/777,https://github.com/oceandlr,1,https://github.com/ovis-hpc/ovis/pull/777,streams_csv_store (was l2_streams_csv_store).,streams_csv_store (was l2_streams_csv_store).,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,777,2021-08-22T00:27:00Z,2021-10-23T20:53:16Z,2021-10-23T20:53:16Z,MERGED,True,1737,1629,18,https://github.com/oceandlr,(l2) streams_csv_store,6,"['Stores', 'V4']",https://github.com/ovis-hpc/ovis/pull/777,https://github.com/oceandlr,2,https://github.com/ovis-hpc/ovis/pull/777#issuecomment-903194108,streams_csv_store (was l2_streams_csv_store).,This is the revamp of #654,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,777,2021-08-22T00:27:00Z,2021-10-23T20:53:16Z,2021-10-23T20:53:16Z,MERGED,True,1737,1629,18,https://github.com/oceandlr,(l2) streams_csv_store,6,"['Stores', 'V4']",https://github.com/ovis-hpc/ovis/pull/777,https://github.com/oceandlr,3,https://github.com/ovis-hpc/ovis/pull/777#issuecomment-905076667,streams_csv_store (was l2_streams_csv_store).,"Hold off on this. I will rename streams to stream, as per the related discussion.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,777,2021-08-22T00:27:00Z,2021-10-23T20:53:16Z,2021-10-23T20:53:16Z,MERGED,True,1737,1629,18,https://github.com/oceandlr,(l2) streams_csv_store,6,"['Stores', 'V4']",https://github.com/ovis-hpc/ovis/pull/777,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/777#issuecomment-905967642,streams_csv_store (was l2_streams_csv_store).,@oceandlr running tests and finding things to fix. There's a seg fault in the current config() of some rollover options; will post a comprehensive patch when everything else finally looks good.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,777,2021-08-22T00:27:00Z,2021-10-23T20:53:16Z,2021-10-23T20:53:16Z,MERGED,True,1737,1629,18,https://github.com/oceandlr,(l2) streams_csv_store,6,"['Stores', 'V4']",https://github.com/ovis-hpc/ovis/pull/777,https://github.com/oceandlr,5,https://github.com/ovis-hpc/ovis/pull/777#issuecomment-907839201,streams_csv_store (was l2_streams_csv_store).,"Items from @baallan separate branch

00fb306 is about ldmsd.c. Make this a separate commit for @tom95858 to review.
I have taken 65e9073 which is the test as a cherry-pick and changed to ldmsd_stream_publish to have this correct with the deprecation. You will need to add your disconnect test to ldmsd_stream_publish.c instead of hello_cat_publisher which is now deprecated.
I have taken some of 3469953, but not all. Some of these are not consistent with
store_csv.c
I",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,777,2021-08-22T00:27:00Z,2021-10-23T20:53:16Z,2021-10-23T20:53:16Z,MERGED,True,1737,1629,18,https://github.com/oceandlr,(l2) streams_csv_store,6,"['Stores', 'V4']",https://github.com/ovis-hpc/ovis/pull/777,https://github.com/oceandlr,6,https://github.com/ovis-hpc/ovis/pull/777#issuecomment-907850296,streams_csv_store (was l2_streams_csv_store).,Meeting with @baallan on 8/31. Goal is to be able to take this after that meeting.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,777,2021-08-22T00:27:00Z,2021-10-23T20:53:16Z,2021-10-23T20:53:16Z,MERGED,True,1737,1629,18,https://github.com/oceandlr,(l2) streams_csv_store,6,"['Stores', 'V4']",https://github.com/ovis-hpc/ovis/pull/777,https://github.com/baallan,7,https://github.com/ovis-hpc/ovis/pull/777#issuecomment-908525506,streams_csv_store (was l2_streams_csv_store).,@oceandlr the deprecation/renaming should have targeted subdir stream_csv instead of just stream/ which is ambiguous.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,777,2021-08-22T00:27:00Z,2021-10-23T20:53:16Z,2021-10-23T20:53:16Z,MERGED,True,1737,1629,18,https://github.com/oceandlr,(l2) streams_csv_store,6,"['Stores', 'V4']",https://github.com/ovis-hpc/ovis/pull/777,https://github.com/oceandlr,8,https://github.com/ovis-hpc/ovis/pull/777#issuecomment-908552944,streams_csv_store (was l2_streams_csv_store).,"@baallan Deliberately so. This way we can put other streams stuff under the same subdir.
I expect in the future that since the stream_cb is really the same as the normal store functionality, that we can evolve to a design where streams stores go away and the normal stores support both.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,777,2021-08-22T00:27:00Z,2021-10-23T20:53:16Z,2021-10-23T20:53:16Z,MERGED,True,1737,1629,18,https://github.com/oceandlr,(l2) streams_csv_store,6,"['Stores', 'V4']",https://github.com/ovis-hpc/ovis/pull/777,https://github.com/tom95858,9,https://github.com/ovis-hpc/ovis/pull/777#issuecomment-921360611,streams_csv_store (was l2_streams_csv_store).,"@oceandlr, @baallan where are we on this pull request?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,777,2021-08-22T00:27:00Z,2021-10-23T20:53:16Z,2021-10-23T20:53:16Z,MERGED,True,1737,1629,18,https://github.com/oceandlr,(l2) streams_csv_store,6,"['Stores', 'V4']",https://github.com/ovis-hpc/ovis/pull/777,https://github.com/oceandlr,10,https://github.com/ovis-hpc/ovis/pull/777#issuecomment-921905409,streams_csv_store (was l2_streams_csv_store).,"@tom95858 I will put the various termination items in the locations as in the Discussion thread 785 Plugin End state this weekend. I will rebase and let you know when you can merge.
Sorry about the delay.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,777,2021-08-22T00:27:00Z,2021-10-23T20:53:16Z,2021-10-23T20:53:16Z,MERGED,True,1737,1629,18,https://github.com/oceandlr,(l2) streams_csv_store,6,"['Stores', 'V4']",https://github.com/ovis-hpc/ovis/pull/777,https://github.com/baallan,11,https://github.com/ovis-hpc/ovis/pull/777#issuecomment-923101653,streams_csv_store (was l2_streams_csv_store).,"@tom95858 I have a test script set for this plugin; I don't think Ann is planning to include it in the revised pull request, so I'll keep an eye out and rerun that when this is updated.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,777,2021-08-22T00:27:00Z,2021-10-23T20:53:16Z,2021-10-23T20:53:16Z,MERGED,True,1737,1629,18,https://github.com/oceandlr,(l2) streams_csv_store,6,"['Stores', 'V4']",https://github.com/ovis-hpc/ovis/pull/777,https://github.com/tom95858,12,https://github.com/ovis-hpc/ovis/pull/777#issuecomment-928149353,streams_csv_store (was l2_streams_csv_store).,@oceandlr What's the status of this? It currently has merge conflicts.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,777,2021-08-22T00:27:00Z,2021-10-23T20:53:16Z,2021-10-23T20:53:16Z,MERGED,True,1737,1629,18,https://github.com/oceandlr,(l2) streams_csv_store,6,"['Stores', 'V4']",https://github.com/ovis-hpc/ovis/pull/777,https://github.com/oceandlr,13,https://github.com/ovis-hpc/ovis/pull/777#issuecomment-928151642,streams_csv_store (was l2_streams_csv_store).,I have not had a chance to update since 10 days ago. I will let you know when it is ready. Sorry about the delay.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,777,2021-08-22T00:27:00Z,2021-10-23T20:53:16Z,2021-10-23T20:53:16Z,MERGED,True,1737,1629,18,https://github.com/oceandlr,(l2) streams_csv_store,6,"['Stores', 'V4']",https://github.com/ovis-hpc/ovis/pull/777,https://github.com/tom95858,14,https://github.com/ovis-hpc/ovis/pull/777#issuecomment-928152666,streams_csv_store (was l2_streams_csv_store).,"@oceandlr ***@***.***> no worries. I was just trying to clean
up the pull request list in advance of testing on Voltrino
…
On Mon, Sep 27, 2021 at 12:15 PM oceandlr ***@***.***> wrote:
 I have not had a chance to update since 10 days ago. I will let you know
 when it is ready. Sorry about the delay.

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#777 (comment)>, or
 unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ABVTPXFWREGPA2B5PXCU7DTUECYCZANCNFSM5CSLOKAQ>
 .
 Triage notifications on the go with GitHub Mobile for iOS
 <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>
 or Android
 <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.



-- 
Thomas Tucker, President, Open Grid Computing, Inc.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,777,2021-08-22T00:27:00Z,2021-10-23T20:53:16Z,2021-10-23T20:53:16Z,MERGED,True,1737,1629,18,https://github.com/oceandlr,(l2) streams_csv_store,6,"['Stores', 'V4']",https://github.com/ovis-hpc/ovis/pull/777,https://github.com/oceandlr,15,https://github.com/ovis-hpc/ovis/pull/777#issuecomment-933034566,streams_csv_store (was l2_streams_csv_store).,"@tom95858 I have put the items from fini into term and also used the function that you said is effectively stream unsubscribe. Please take this now.
I have also removed some of the various hello utilities that are now replaced by ldmsd_stream_publish @nichamon
@valleydlr",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,777,2021-08-22T00:27:00Z,2021-10-23T20:53:16Z,2021-10-23T20:53:16Z,MERGED,True,1737,1629,18,https://github.com/oceandlr,(l2) streams_csv_store,6,"['Stores', 'V4']",https://github.com/ovis-hpc/ovis/pull/777,https://github.com/baallan,16,https://github.com/ovis-hpc/ovis/pull/777#issuecomment-933848902,streams_csv_store (was l2_streams_csv_store).,"@oceandlr there appears to still be a deadlock in the code. I'm checking on what the smallest fix is.
@tom95858 Are we accepting code with c++ line-end comments? If so can you update the developer guidelines accordingly?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,777,2021-08-22T00:27:00Z,2021-10-23T20:53:16Z,2021-10-23T20:53:16Z,MERGED,True,1737,1629,18,https://github.com/oceandlr,(l2) streams_csv_store,6,"['Stores', 'V4']",https://github.com/ovis-hpc/ovis/pull/777,https://github.com/oceandlr,17,https://github.com/ovis-hpc/ovis/pull/777#issuecomment-933849683,streams_csv_store (was l2_streams_csv_store).,what are you testing and what is happening @baallan,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,777,2021-08-22T00:27:00Z,2021-10-23T20:53:16Z,2021-10-23T20:53:16Z,MERGED,True,1737,1629,18,https://github.com/oceandlr,(l2) streams_csv_store,6,"['Stores', 'V4']",https://github.com/ovis-hpc/ovis/pull/777,https://github.com/baallan,18,https://github.com/ovis-hpc/ovis/pull/777#issuecomment-933853746,streams_csv_store (was l2_streams_csv_store).,"I am testing the daemon shutting down while messages are still coming in. The daemon is hanging instead of exiting, which was something I saw in earlier testing until I fixed it in my 2nd review branch.  I'm working with gdb now to verify its the same problem and not a new one.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,777,2021-08-22T00:27:00Z,2021-10-23T20:53:16Z,2021-10-23T20:53:16Z,MERGED,True,1737,1629,18,https://github.com/oceandlr,(l2) streams_csv_store,6,"['Stores', 'V4']",https://github.com/ovis-hpc/ovis/pull/777,https://github.com/baallan,19,https://github.com/ovis-hpc/ovis/pull/777#issuecomment-933994941,streams_csv_store (was l2_streams_csv_store).,@oceandlr I have opened a new pull request # 3 on your fork with the non-cosmetic changes needed (unless @tom95858 has a better solution). The deadlock in play has gdb traces included with the pull request.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,777,2021-08-22T00:27:00Z,2021-10-23T20:53:16Z,2021-10-23T20:53:16Z,MERGED,True,1737,1629,18,https://github.com/oceandlr,(l2) streams_csv_store,6,"['Stores', 'V4']",https://github.com/ovis-hpc/ovis/pull/777,https://github.com/tom95858,20,https://github.com/ovis-hpc/ovis/pull/777#issuecomment-934517058,streams_csv_store (was l2_streams_csv_store).,"@tom95858 Are we accepting code with c++ line-end comments? If so can you update the developer guidelines accordingly?

We should refactor the // to /* */ comments to be consistent with the coding guidelines. Also there is code that is commented out which should be removed.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,777,2021-08-22T00:27:00Z,2021-10-23T20:53:16Z,2021-10-23T20:53:16Z,MERGED,True,1737,1629,18,https://github.com/oceandlr,(l2) streams_csv_store,6,"['Stores', 'V4']",https://github.com/ovis-hpc/ovis/pull/777,https://github.com/tom95858,21,https://github.com/ovis-hpc/ovis/pull/777#issuecomment-943631974,streams_csv_store (was l2_streams_csv_store).,"@baallan, @oceandlr have the requested changes been made and the deadlock confirmed to be removed?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,777,2021-08-22T00:27:00Z,2021-10-23T20:53:16Z,2021-10-23T20:53:16Z,MERGED,True,1737,1629,18,https://github.com/oceandlr,(l2) streams_csv_store,6,"['Stores', 'V4']",https://github.com/ovis-hpc/ovis/pull/777,https://github.com/baallan,22,https://github.com/ovis-hpc/ovis/pull/777#issuecomment-943724229,streams_csv_store (was l2_streams_csv_store).,"@tom95858 @oceandlr hasn't yet. Based on the stacks you examined yesterday, is my proposed list of locking changes an ok workaround to stream close/deliver conflict? Do you anticipate we will eventually have a revised stream api or internals such that there would not be a deadlock, or is close/delivery a fundamental conflict we must live with a bit of raciness on at cleanup?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,777,2021-08-22T00:27:00Z,2021-10-23T20:53:16Z,2021-10-23T20:53:16Z,MERGED,True,1737,1629,18,https://github.com/oceandlr,(l2) streams_csv_store,6,"['Stores', 'V4']",https://github.com/ovis-hpc/ovis/pull/777,https://github.com/tom95858,23,https://github.com/ovis-hpc/ovis/pull/777#issuecomment-943860522,streams_csv_store (was l2_streams_csv_store).,"I think we need to look at the streams API, but I don't believe this to be
a streams ""raciness"" issue. The problem is that the cleanup path that calls
the streams close code is holding a lock that the recv callback wants.
That's an application bug, not a library API bug. If we are going to
guarantee that the application is notified of all incoming data, then this
will absolutely happen. It is possible that there is a bug in the
ldmsd_stream_close path and I will look at this.
…
On Thu, Oct 14, 2021 at 2:54 PM Benjamin Allan ***@***.***> wrote:
 @tom95858 <https://github.com/tom95858> @oceandlr
 <https://github.com/oceandlr> hasn't yet. Based on the stacks you
 examined yesterday, is my proposed list of locking changes an ok workaround
 to stream close/deliver conflict? Do you anticipate we will eventually have
 a revised stream api or internals such that there would not be a deadlock,
 or is close/delivery a fundamental conflict we must live with a bit of
 raciness on at cleanup?

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#777 (comment)>, or
 unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ABVTPXDVIOHKYIQAAPQ2BMTUG47Q3ANCNFSM5CSLOKAQ>
 .
 Triage notifications on the go with GitHub Mobile for iOS
 <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>
 or Android
 <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.



-- 
Thomas Tucker, President, Open Grid Computing, Inc.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,777,2021-08-22T00:27:00Z,2021-10-23T20:53:16Z,2021-10-23T20:53:16Z,MERGED,True,1737,1629,18,https://github.com/oceandlr,(l2) streams_csv_store,6,"['Stores', 'V4']",https://github.com/ovis-hpc/ovis/pull/777,https://github.com/oceandlr,24,https://github.com/ovis-hpc/ovis/pull/777#issuecomment-947910917,streams_csv_store (was l2_streams_csv_store).,"@tom95858 not sure what you wanted with term, after looking at it. I have removed the attribute items as we previously discussed. Can you take a look?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,777,2021-08-22T00:27:00Z,2021-10-23T20:53:16Z,2021-10-23T20:53:16Z,MERGED,True,1737,1629,18,https://github.com/oceandlr,(l2) streams_csv_store,6,"['Stores', 'V4']",https://github.com/ovis-hpc/ovis/pull/777,https://github.com/oceandlr,25,https://github.com/ovis-hpc/ovis/pull/777#issuecomment-950064175,streams_csv_store (was l2_streams_csv_store).,"@tom95858 where are we on this for inclusion for LDMSCON?
@valleydlr",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,779,2021-08-24T17:54:16Z,2021-09-17T01:48:56Z,2021-09-17T01:48:57Z,MERGED,True,347,85,9,https://github.com/nichamon,Get rid of the log file lock,5,[],https://github.com/ovis-hpc/ovis/pull/779,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/779,"Logging to the log file becomes a performance bottleneck when a burst of
errors occur, especially on aggregators. We use event-driven programming
to get rid of the log file's lock. The ldmsd_log() function publishes an
event to a worker exclusively responsible for printing data to
the log file or the syslog. Thus, there is only one thread that accesses the log file.","Logging to the log file becomes a performance bottleneck when a burst of
errors occur, especially on aggregators. We use event-driven programming
to get rid of the log file's lock. The ldmsd_log() function publishes an
event to a worker exclusively responsible for printing data to
the log file or the syslog. Thus, there is only one thread that accesses the log file.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,779,2021-08-24T17:54:16Z,2021-09-17T01:48:56Z,2021-09-17T01:48:57Z,MERGED,True,347,85,9,https://github.com/nichamon,Get rid of the log file lock,5,[],https://github.com/ovis-hpc/ovis/pull/779,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/779#issuecomment-904912876,"Logging to the log file becomes a performance bottleneck when a burst of
errors occur, especially on aggregators. We use event-driven programming
to get rid of the log file's lock. The ldmsd_log() function publishes an
event to a worker exclusively responsible for printing data to
the log file or the syslog. Thus, there is only one thread that accesses the log file.","This is a very undesirable change as implemented. In particular:

We need logging to work precisely when malloc has failed, so starting every message with a data allocation for an event is  a non-starter.
Adding a call to free (which can be a huge performance bottleneck) for the event processing to every log message can be a huge time sink and memory fragmenter.

For the cited case of aggregators, if logging is a problem, just configure to log less. This patch turns a ""slows down aggregation"" problem into a ""blows up memory"" problem which is likely to be substantially worse.
It seems like this is a band-aid instead of solving the problem of allowing logging to be precisely targeted as in:
https://github.com/ovis-hpc/ovis-wiki/wiki/Proposal-5",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,779,2021-08-24T17:54:16Z,2021-09-17T01:48:56Z,2021-09-17T01:48:57Z,MERGED,True,347,85,9,https://github.com/nichamon,Get rid of the log file lock,5,[],https://github.com/ovis-hpc/ovis/pull/779,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/779#issuecomment-905648220,"Logging to the log file becomes a performance bottleneck when a burst of
errors occur, especially on aggregators. We use event-driven programming
to get rid of the log file's lock. The ldmsd_log() function publishes an
event to a worker exclusively responsible for printing data to
the log file or the syslog. Thus, there is only one thread that accesses the log file.","This is a very undesirable change as implemented. In particular:
* We need logging to work precisely when malloc has failed, so starting every message with a data allocation for an event is  a non-starter.


Ensuring ENOMEM messages get to the log file is no small challenge. The current implementation does not guarantee this either.

* Adding a call to free (which can be a huge performance bottleneck) for the event processing to every log message can be a huge time sink and memory fragmenter.


I believe this is an overstatement. Malloc/free are quite efficient.
That said, it would be more efficient to have a pool of pre-allocated log-event buffers and then vsprintf into those buffers for logging. By the way, printf/vsprintf may call malloc().
Also, @nichamon could you please compare the CPU utilization of this with the existing logging. I'm not asking that you instrument the logging path, just look at the CPU utilization of the daemon as a whole with and without this patch.

For the cited case of aggregators, if logging is a problem, just configure to log less. This patch turns a ""slows down aggregation"" problem into a ""blows up memory"" problem which is likely to be substantially worse.

You measured this? Can you share the results?

It seems like this is a band-aid instead of solving the problem of allowing logging to be precisely targeted as in:
https://github.com/ovis-hpc/ovis-wiki/wiki/Proposal-5

This removes a very hot lock from the daemon while ensuring the ordering of messages. Proposal-5 is orthogonal to this patch I believe.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,779,2021-08-24T17:54:16Z,2021-09-17T01:48:56Z,2021-09-17T01:48:57Z,MERGED,True,347,85,9,https://github.com/nichamon,Get rid of the log file lock,5,[],https://github.com/ovis-hpc/ovis/pull/779,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/779#issuecomment-905695340,"Logging to the log file becomes a performance bottleneck when a burst of
errors occur, especially on aggregators. We use event-driven programming
to get rid of the log file's lock. The ldmsd_log() function publishes an
event to a worker exclusively responsible for printing data to
the log file or the syslog. Thus, there is only one thread that accesses the log file.","@tom95858 Re the memory blows up: lets take the advertised (JB) 10000 clients per aggregator, 1Hz sampling, 10 log lines of 80 bytes per set update, 10 sets per client. This comes to 80MB/s. It's very easy to picture that kind of data creation rate (across 2 aggregators) outstripping a local log disk or remote nfs link.  Granted in most hpc systems with 10000 clients, hardware will be better provisioned at the L1, but maybe not at the L2.
Re the lock: I'm not sure how moving the hot lock down into malloc/free really helps us. Seems like we're throwing a lot of thought into just moving a lock around. You still have to have a lock to inject/remove messages into the log event list, don't you?
Why would vsnprintf be calling malloc? Wouldn't a preallocated (and perhaps growable) ring buffer with variable record size be the thing to do here to stay out of malloc/free?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,779,2021-08-24T17:54:16Z,2021-09-17T01:48:56Z,2021-09-17T01:48:57Z,MERGED,True,347,85,9,https://github.com/nichamon,Get rid of the log file lock,5,[],https://github.com/ovis-hpc/ovis/pull/779,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/779#issuecomment-907669240,"Logging to the log file becomes a performance bottleneck when a burst of
errors occur, especially on aggregators. We use event-driven programming
to get rid of the log file's lock. The ldmsd_log() function publishes an
event to a worker exclusively responsible for printing data to
the log file or the syslog. Thus, there is only one thread that accesses the log file.","The pre-allocated buffer is what has already been suggested in a review. With regard to speculation about malloc/free and 'moving the lock around', @nichamon 's testing showed that with the new implementation and a log setting of INFO we were able to reliably sample and store a sizable cluster configuration. Without the change, the daemon backed up and stopped sampling and storing altogether. I think @nichamon has demonstrated that an evidence-based approach to design choices results in better outcomes.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,779,2021-08-24T17:54:16Z,2021-09-17T01:48:56Z,2021-09-17T01:48:57Z,MERGED,True,347,85,9,https://github.com/nichamon,Get rid of the log file lock,5,[],https://github.com/ovis-hpc/ovis/pull/779,https://github.com/nichamon,6,https://github.com/ovis-hpc/ovis/pull/779#issuecomment-911967165,"Logging to the log file becomes a performance bottleneck when a burst of
errors occur, especially on aggregators. We use event-driven programming
to get rid of the log file's lock. The ldmsd_log() function publishes an
event to a worker exclusively responsible for printing data to
the log file or the syslog. Thus, there is only one thread that accesses the log file.","@tom95858  I just tried running the current OVIS-4 with the INFO log level on Voltrino. With the OVIS-4 code base (without this patch), Zap spawned tens of threads because the threads were stuck in flushing the log file. The results from this run and the run without multi-thread zap strongly suggest that we should not have Zap threads or LDMSD worker threads responsible for writing to the log file.
What is the objective of having the pre-allocated buffers? Is it to avoid spending CPU time to do malloc/free at every log message? Having the pre-allocated buffer pools will need 1) a lock and 2) a strategy that handles when the number of log messages overwhelms the pre-allocated buffers. Could we try without the pre-allocated buffers and go from there when we witness issues?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,779,2021-08-24T17:54:16Z,2021-09-17T01:48:56Z,2021-09-17T01:48:57Z,MERGED,True,347,85,9,https://github.com/nichamon,Get rid of the log file lock,5,[],https://github.com/ovis-hpc/ovis/pull/779,https://github.com/nichamon,7,https://github.com/ovis-hpc/ovis/pull/779#issuecomment-912009774,"Logging to the log file becomes a performance bottleneck when a burst of
errors occur, especially on aggregators. We use event-driven programming
to get rid of the log file's lock. The ldmsd_log() function publishes an
event to a worker exclusively responsible for printing data to
the log file or the syslog. Thus, there is only one thread that accesses the log file.","After discussing with @tom95858, we conclude that we will address the pre-allocated buffer in the future. I have removed the periodically flush logic from the patch, so LDMSD will call fflush() when there are no messages waiting in the log queue.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,779,2021-08-24T17:54:16Z,2021-09-17T01:48:56Z,2021-09-17T01:48:57Z,MERGED,True,347,85,9,https://github.com/nichamon,Get rid of the log file lock,5,[],https://github.com/ovis-hpc/ovis/pull/779,https://github.com/baallan,8,https://github.com/ovis-hpc/ovis/pull/779#issuecomment-912037176,"Logging to the log file becomes a performance bottleneck when a burst of
errors occur, especially on aggregators. We use event-driven programming
to get rid of the log file's lock. The ldmsd_log() function publishes an
event to a worker exclusively responsible for printing data to
the log file or the syslog. Thus, there is only one thread that accesses the log file.",@nichamon the major reason for preexisting buffers is to ensure (as best one can) that a message about ENOMEM gets delivered to the log. Which is hard to do if messages cause malloc.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,779,2021-08-24T17:54:16Z,2021-09-17T01:48:56Z,2021-09-17T01:48:57Z,MERGED,True,347,85,9,https://github.com/nichamon,Get rid of the log file lock,5,[],https://github.com/ovis-hpc/ovis/pull/779,https://github.com/tom95858,9,https://github.com/ovis-hpc/ovis/pull/779#issuecomment-912161336,"Logging to the log file becomes a performance bottleneck when a burst of
errors occur, especially on aggregators. We use event-driven programming
to get rid of the log file's lock. The ldmsd_log() function publishes an
event to a worker exclusively responsible for printing data to
the log file or the syslog. Thus, there is only one thread that accesses the log file.","@nichamon

What is the objective of having the pre-allocated buffers? Is it to avoid spending CPU time to do malloc/free at every log message?

That is a part of the objective, but not entirely.

Having the pre-allocated buffer pools will need 1) a lock

We can use a lock-less producer/consumer data structure where only the producer updates the head, and only the consumer updates the tail. But even without that, the issue is that we're holding a global lock while we flush to the log. Even with a lock, the time that the lock is held is infinitesimal as compared to the time it is held now.
The 2nd reason is that this will naturally throttle the logger. Right now the logger backlog potentially grows unbounded. With a pool of pre-allocated buffers, when these buffers fill up, the logging thread must wait until there is space to log additional messages.
The number of these pre-allocated buffers could be scaled with the debug level. Given that the log messages are naturally bursty, e.g. when an aggregator connects to thousands of producers and then looks up every metric set, or after each update cycle; if we scale to a limit that supports the bursts, we don't hold up the daemon while it is trying to get work done in the presence of a large number of log messages.

and 2) a strategy that handles when the number of log messages overwhelms the pre-allocated buffers.

This is true, in that case the logging thread would have to block until there is space to log the new message. Right now, however, competing log clients block on every message.

Could we try without the pre-allocated buffers and go from there when we witness issues?

I think so, it is better than the current approach, but perhaps could be made better. With the current serial logging, let's move the lock above the fflush(). I don't think it will help actually because internally fflush() locks the output file descriptor anyway, but it would be interesting to try.
I'll look at the event subsystem to see if it has a similar issue, i.e. overrunning the worker thread.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,779,2021-08-24T17:54:16Z,2021-09-17T01:48:56Z,2021-09-17T01:48:57Z,MERGED,True,347,85,9,https://github.com/nichamon,Get rid of the log file lock,5,[],https://github.com/ovis-hpc/ovis/pull/779,https://github.com/nichamon,10,https://github.com/ovis-hpc/ovis/pull/779#issuecomment-912192941,"Logging to the log file becomes a performance bottleneck when a burst of
errors occur, especially on aggregators. We use event-driven programming
to get rid of the log file's lock. The ldmsd_log() function publishes an
event to a worker exclusively responsible for printing data to
the log file or the syslog. Thus, there is only one thread that accesses the log file.","With the current serial logging, let's move the lock above the flush().

FYI, with this patch, LDMSD has no global lock for logging.
How logging works in this patch.

The logging thread creates an event and allocates a string for the log message to log a message.
Then, the logging thread posts the event to the logger worker.
The logger writes to the file descriptor.
If the logger has no other events in the queue, it calls fflush().",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,779,2021-08-24T17:54:16Z,2021-09-17T01:48:56Z,2021-09-17T01:48:57Z,MERGED,True,347,85,9,https://github.com/nichamon,Get rid of the log file lock,5,[],https://github.com/ovis-hpc/ovis/pull/779,https://github.com/tom95858,11,https://github.com/ovis-hpc/ovis/pull/779#issuecomment-912201069,"Logging to the log file becomes a performance bottleneck when a burst of
errors occur, especially on aggregators. We use event-driven programming
to get rid of the log file's lock. The ldmsd_log() function publishes an
event to a worker exclusively responsible for printing data to
the log file or the syslog. Thus, there is only one thread that accesses the log file.","@nichamon,


With the current serial logging, let's move the lock above the flush().

FYI, with this patch, LDMSD has no global lock for logging.

I realize that, I'm talking about the old locking without this patch. That's the lock I'm talking about moving, for the purposes of comparison with the logging with this patch.
BTW, even  with the patch there is locking inside fprintf, fflush, etc... on the log file pointer.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,779,2021-08-24T17:54:16Z,2021-09-17T01:48:56Z,2021-09-17T01:48:57Z,MERGED,True,347,85,9,https://github.com/nichamon,Get rid of the log file lock,5,[],https://github.com/ovis-hpc/ovis/pull/779,https://github.com/tom95858,12,https://github.com/ovis-hpc/ovis/pull/779#issuecomment-921358970,"Logging to the log file becomes a performance bottleneck when a burst of
errors occur, especially on aggregators. We use event-driven programming
to get rid of the log file's lock. The ldmsd_log() function publishes an
event to a worker exclusively responsible for printing data to
the log file or the syslog. Thus, there is only one thread that accesses the log file.","@nichamon can you please let me know when you are ready to have this merged? It's not a WIP or draft, but changes keep being made.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,779,2021-08-24T17:54:16Z,2021-09-17T01:48:56Z,2021-09-17T01:48:57Z,MERGED,True,347,85,9,https://github.com/nichamon,Get rid of the log file lock,5,[],https://github.com/ovis-hpc/ovis/pull/779,https://github.com/nichamon,13,https://github.com/ovis-hpc/ovis/pull/779#issuecomment-921383257,"Logging to the log file becomes a performance bottleneck when a burst of
errors occur, especially on aggregators. We use event-driven programming
to get rid of the log file's lock. The ldmsd_log() function publishes an
event to a worker exclusively responsible for printing data to
the log file or the syslog. Thus, there is only one thread that accesses the log file.",@tom95858 It is ready. The changes 8 days ago addressed the flush call. The change today was a rebased on the top of the latest OVIS-4.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,780,2021-08-25T16:49:13Z,2021-08-30T18:58:18Z,2021-09-10T14:39:42Z,MERGED,True,95,21,3,https://github.com/narategithub,Re-initialize ldms/zap threads at first endpoint creation,1,[],https://github.com/ovis-hpc/ovis/pull/780,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/780,"The new process has only one thread after fork (see fork(2)), and
hence the need of pthread_atfork() in ldms.c, zap.c and
zap_sock.c to re-initialize the set delete thread, zap worker
threads and zap sock io thread respectively. However, the Slurm
job_container feature failed to run a task because it called
setns() that did not support multi-threading. Basically, Slurm
job_container feature could not be used with slurm_notifier.
To work around the Slurm job_container setns() issue, this patch
modified ldms.c, zap.c and zap_sock.c so that they will not
re-create the threads right away after fork. Instead, they will just
reset the initialization state at fork, and the transport-related
threads will be created at the creation of the first endpoint after
fork (the set-related thread will be created at the first set
creation).
This has been tested on top of OVIS-4.3.7 and slurm 20.11.8 on OGC
cygnus cluster.","The new process has only one thread after fork (see fork(2)), and
hence the need of pthread_atfork() in ldms.c, zap.c and
zap_sock.c to re-initialize the set delete thread, zap worker
threads and zap sock io thread respectively. However, the Slurm
job_container feature failed to run a task because it called
setns() that did not support multi-threading. Basically, Slurm
job_container feature could not be used with slurm_notifier.
To work around the Slurm job_container setns() issue, this patch
modified ldms.c, zap.c and zap_sock.c so that they will not
re-create the threads right away after fork. Instead, they will just
reset the initialization state at fork, and the transport-related
threads will be created at the creation of the first endpoint after
fork (the set-related thread will be created at the first set
creation).
This has been tested on top of OVIS-4.3.7 and slurm 20.11.8 on OGC
cygnus cluster.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,780,2021-08-25T16:49:13Z,2021-08-30T18:58:18Z,2021-09-10T14:39:42Z,MERGED,True,95,21,3,https://github.com/narategithub,Re-initialize ldms/zap threads at first endpoint creation,1,[],https://github.com/ovis-hpc/ovis/pull/780,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/780#issuecomment-907667324,"The new process has only one thread after fork (see fork(2)), and
hence the need of pthread_atfork() in ldms.c, zap.c and
zap_sock.c to re-initialize the set delete thread, zap worker
threads and zap sock io thread respectively. However, the Slurm
job_container feature failed to run a task because it called
setns() that did not support multi-threading. Basically, Slurm
job_container feature could not be used with slurm_notifier.
To work around the Slurm job_container setns() issue, this patch
modified ldms.c, zap.c and zap_sock.c so that they will not
re-create the threads right away after fork. Instead, they will just
reset the initialization state at fork, and the transport-related
threads will be created at the creation of the first endpoint after
fork (the set-related thread will be created at the first set
creation).
This has been tested on top of OVIS-4.3.7 and slurm 20.11.8 on OGC
cygnus cluster.",@eric-roman can you confirm that this fixes the issue and that you are happy with the fix?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,780,2021-08-25T16:49:13Z,2021-08-30T18:58:18Z,2021-09-10T14:39:42Z,MERGED,True,95,21,3,https://github.com/narategithub,Re-initialize ldms/zap threads at first endpoint creation,1,[],https://github.com/ovis-hpc/ovis/pull/780,https://github.com/eric-roman,3,https://github.com/ovis-hpc/ovis/pull/780#issuecomment-916955906,"The new process has only one thread after fork (see fork(2)), and
hence the need of pthread_atfork() in ldms.c, zap.c and
zap_sock.c to re-initialize the set delete thread, zap worker
threads and zap sock io thread respectively. However, the Slurm
job_container feature failed to run a task because it called
setns() that did not support multi-threading. Basically, Slurm
job_container feature could not be used with slurm_notifier.
To work around the Slurm job_container setns() issue, this patch
modified ldms.c, zap.c and zap_sock.c so that they will not
re-create the threads right away after fork. Instead, they will just
reset the initialization state at fork, and the transport-related
threads will be created at the creation of the first endpoint after
fork (the set-related thread will be created at the first set
creation).
This has been tested on top of OVIS-4.3.7 and slurm 20.11.8 on OGC
cygnus cluster.","I was able to test this and I am not seeing the problem.  Before closing the issue I want our container expert, who provided the original test case, to take a look at it, but I think it's all set.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,781,2021-08-25T21:22:39Z,2021-08-27T00:29:41Z,2021-08-27T00:29:42Z,MERGED,True,8,0,1,https://github.com/eric-roman,Add call to slurm_init() required for Slurm 20.11,1,[],https://github.com/ovis-hpc/ovis/pull/781,https://github.com/eric-roman,1,https://github.com/ovis-hpc/ovis/pull/781,Slurm 20.11 requires slurm_init() to be called before calling libslurm.  The slurm_notifier plugin uses a debug call from libslurm.  This caused us some issues with the notifier.  This patch adds the required call wrapped with an ifdef to ensure that it is called in versions 20.11 and later. It has been tested on a system here and works as intended.  Addresses #782,Slurm 20.11 requires slurm_init() to be called before calling libslurm.  The slurm_notifier plugin uses a debug call from libslurm.  This caused us some issues with the notifier.  This patch adds the required call wrapped with an ifdef to ensure that it is called in versions 20.11 and later. It has been tested on a system here and works as intended.  Addresses #782,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,783,2021-08-31T04:49:18Z,2021-08-31T23:06:29Z,2021-08-31T23:06:30Z,MERGED,True,9726,4688,51,https://github.com/narategithub,V4 staging,25,[],https://github.com/ovis-hpc/ovis/pull/783,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/783,"This pull requests contain (a lot of) commits from v4-staging branch which includes the following features:

metric unit support
zap_send_mapped() (similar to RDMA send)
zap shared map: a zap memory map that is created independent of zap endpoint and can be used with many endpoints (regardless of transport types)
ref library
zap send completion / ldms send completion events
new zap thread model

This has been tested with:

containerized test cases in ldms-test (sock only)
non-containerized scalability test in ldms-test/scalability (scale branch) on sock, rdma, and ugni
zap_test on sock, rdma, and ugni","This pull requests contain (a lot of) commits from v4-staging branch which includes the following features:

metric unit support
zap_send_mapped() (similar to RDMA send)
zap shared map: a zap memory map that is created independent of zap endpoint and can be used with many endpoints (regardless of transport types)
ref library
zap send completion / ldms send completion events
new zap thread model

This has been tested with:

containerized test cases in ldms-test (sock only)
non-containerized scalability test in ldms-test/scalability (scale branch) on sock, rdma, and ugni
zap_test on sock, rdma, and ugni",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,783,2021-08-31T04:49:18Z,2021-08-31T23:06:29Z,2021-08-31T23:06:30Z,MERGED,True,9726,4688,51,https://github.com/narategithub,V4 staging,25,[],https://github.com/ovis-hpc/ovis/pull/783,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/783#issuecomment-908899067,"This pull requests contain (a lot of) commits from v4-staging branch which includes the following features:

metric unit support
zap_send_mapped() (similar to RDMA send)
zap shared map: a zap memory map that is created independent of zap endpoint and can be used with many endpoints (regardless of transport types)
ref library
zap send completion / ldms send completion events
new zap thread model

This has been tested with:

containerized test cases in ldms-test (sock only)
non-containerized scalability test in ldms-test/scalability (scale branch) on sock, rdma, and ugni
zap_test on sock, rdma, and ugni",@tom95858 I'll look into the compatibility test issue tomorrow.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,783,2021-08-31T04:49:18Z,2021-08-31T23:06:29Z,2021-08-31T23:06:30Z,MERGED,True,9726,4688,51,https://github.com/narategithub,V4 staging,25,[],https://github.com/ovis-hpc/ovis/pull/783,https://github.com/narategithub,3,https://github.com/ovis-hpc/ovis/pull/783#issuecomment-909443671,"This pull requests contain (a lot of) commits from v4-staging branch which includes the following features:

metric unit support
zap_send_mapped() (similar to RDMA send)
zap shared map: a zap memory map that is created independent of zap endpoint and can be used with many endpoints (regardless of transport types)
ref library
zap send completion / ldms send completion events
new zap thread model

This has been tested with:

containerized test cases in ldms-test (sock only)
non-containerized scalability test in ldms-test/scalability (scale branch) on sock, rdma, and ugni
zap_test on sock, rdma, and ugni",@tom95858 This is ready to review/merge.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,786,2021-09-01T22:13:32Z,2021-09-13T18:52:56Z,2021-09-13T18:52:56Z,MERGED,True,59,57,5,https://github.com/narategithub,Advertise LDMS set delete event to peers,1,[],https://github.com/ovis-hpc/ovis/pull/786,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/786,"Previously, LDMS advertised the set delete event only to peers that has
successfully looked up the set. In the case of quick set add-delete, the
peer will only get DIR ADD event but won't get LDMS set delete
notification because the lookup process has not completed in time. This
patch modifies LDMS so that it advertises set delete event to downstream
LDMS peers so that the peer can undo what it has done from DIR ADD
event.","Previously, LDMS advertised the set delete event only to peers that has
successfully looked up the set. In the case of quick set add-delete, the
peer will only get DIR ADD event but won't get LDMS set delete
notification because the lookup process has not completed in time. This
patch modifies LDMS so that it advertises set delete event to downstream
LDMS peers so that the peer can undo what it has done from DIR ADD
event.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,786,2021-09-01T22:13:32Z,2021-09-13T18:52:56Z,2021-09-13T18:52:56Z,MERGED,True,59,57,5,https://github.com/narategithub,Advertise LDMS set delete event to peers,1,[],https://github.com/ovis-hpc/ovis/pull/786,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/786#issuecomment-910831272,"Previously, LDMS advertised the set delete event only to peers that has
successfully looked up the set. In the case of quick set add-delete, the
peer will only get DIR ADD event but won't get LDMS set delete
notification because the lookup process has not completed in time. This
patch modifies LDMS so that it advertises set delete event to downstream
LDMS peers so that the peer can undo what it has done from DIR ADD
event.","@tom95858 @nichamon
The code passed this test: https://github.com/ovis-hpc/ldms-test/blob/quick_add_rm/quick_set_add_rm_test .",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,786,2021-09-01T22:13:32Z,2021-09-13T18:52:56Z,2021-09-13T18:52:56Z,MERGED,True,59,57,5,https://github.com/narategithub,Advertise LDMS set delete event to peers,1,[],https://github.com/ovis-hpc/ovis/pull/786,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/786#issuecomment-911801550,"Previously, LDMS advertised the set delete event only to peers that has
successfully looked up the set. In the case of quick set add-delete, the
peer will only get DIR ADD event but won't get LDMS set delete
notification because the lookup process has not completed in time. This
patch modifies LDMS so that it advertises set delete event to downstream
LDMS peers so that the peer can undo what it has done from DIR ADD
event.",@narategithub is this expected to be a complete fix for #771 ?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,786,2021-09-01T22:13:32Z,2021-09-13T18:52:56Z,2021-09-13T18:52:56Z,MERGED,True,59,57,5,https://github.com/narategithub,Advertise LDMS set delete event to peers,1,[],https://github.com/ovis-hpc/ovis/pull/786,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/786#issuecomment-912053438,"Previously, LDMS advertised the set delete event only to peers that has
successfully looked up the set. In the case of quick set add-delete, the
peer will only get DIR ADD event but won't get LDMS set delete
notification because the lookup process has not completed in time. This
patch modifies LDMS so that it advertises set delete event to downstream
LDMS peers so that the peer can undo what it has done from DIR ADD
event.","@narategithub In trying this patch, my screen is drowned in messages:
""ERR: Level-3: : () () event_cb:186 Received invalid event type""
Don't know if this is an error or just a debug that slipped in.
I no longer see the lingering sets on the L1, as mentioned in #771; thank you.
In testing (valgrind drd), i'm seeing a bunch of new data race errors in zap and zap sock that i didn't see in earlier testing (~2 weeks ago). I don't think this is related to the patch here.
In testing (valgrind memcheck) I'm seeing a new message (below) which indicates the message len checking is in some case getting an uninitialized value.  This might be related to the patch here if the delete message is on a new code path. The same message occurs on the L1 and L2.
==32411== Thread 4:
==32411== Conditional jump or move depends on uninitialised value(s)
==32411==    at 0x4E46C38: ldms_xprt_sockaddr (ldms_xprt.c:3811)
==32411==    by 0x4E47064: ldms_zap_cb (ldms_xprt.c:2744)
==32411==    by 0x1204BDF2: process_sep_msg_accepted (zap_sock.c:518)
==32411==    by 0x1204D0F0: sock_read (zap_sock.c:1355)
==32411==    by 0x1204D0F0: sock_ev_cb (zap_sock.c:1150)
==32411==    by 0x1204DC24: io_thread_proc (zap_sock.c:1406)
==32411==    by 0x70D5EA4: start_thread (in /usr/lib64/libpthread-2.17.so)
==32411==    by 0x63909FC: clone (in /usr/lib64/libc-2.17.so)
==32411==  Uninitialised value was created by a stack allocation
==32411==    at 0x4E46CB0: ldms_zap_cb (ldms_xprt.c:2693)
==32411==",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,786,2021-09-01T22:13:32Z,2021-09-13T18:52:56Z,2021-09-13T18:52:56Z,MERGED,True,59,57,5,https://github.com/narategithub,Advertise LDMS set delete event to peers,1,[],https://github.com/ovis-hpc/ovis/pull/786,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/786#issuecomment-918456276,"Previously, LDMS advertised the set delete event only to peers that has
successfully looked up the set. In the case of quick set add-delete, the
peer will only get DIR ADD event but won't get LDMS set delete
notification because the lookup process has not completed in time. This
patch modifies LDMS so that it advertises set delete event to downstream
LDMS peers so that the peer can undo what it has done from DIR ADD
event.",@narategithub Did you confirm/disconfirm that this issue is not the cause of the error messages @baallan is seeing?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,786,2021-09-01T22:13:32Z,2021-09-13T18:52:56Z,2021-09-13T18:52:56Z,MERGED,True,59,57,5,https://github.com/narategithub,Advertise LDMS set delete event to peers,1,[],https://github.com/ovis-hpc/ovis/pull/786,https://github.com/tom95858,6,https://github.com/ovis-hpc/ovis/pull/786#issuecomment-918481020,"Previously, LDMS advertised the set delete event only to peers that has
successfully looked up the set. In the case of quick set add-delete, the
peer will only get DIR ADD event but won't get LDMS set delete
notification because the lookup process has not completed in time. This
patch modifies LDMS so that it advertises set delete event to downstream
LDMS peers so that the peer can undo what it has done from DIR ADD
event.","@narategithub it looks to me like ldms_xprt_sockaddr is all balled up. It looks like it's trying to avoid calling zap_get_name() if it has already been called, but there is other logic that tests that the address buffer is big enough to contain the result addresses. A look at the call sites shows that many of the input buffer size is not initialized. Finally the initialization that calls zap_get_name() sets the input length incorrectly and won't work with IPv6",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,787,2021-09-02T19:59:31Z,2021-11-16T17:27:04Z,2021-11-16T17:27:04Z,CLOSED,False,10267,6458,24,https://github.com/nichamon,Apply the event-driven paradigm to LDMSD's routines,18,[],https://github.com/ovis-hpc/ovis/pull/787,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/787,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,787,2021-09-02T19:59:31Z,2021-11-16T17:27:04Z,2021-11-16T17:27:04Z,CLOSED,False,10267,6458,24,https://github.com/nichamon,Apply the event-driven paradigm to LDMSD's routines,18,[],https://github.com/ovis-hpc/ovis/pull/787,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/787#issuecomment-912015260,,Please expect constant code changes as I'm debugging the patch and I'll rebase it on top of #779 tonight.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,788,2021-09-02T21:14:22Z,2021-09-19T01:16:06Z,2021-09-19T01:16:06Z,MERGED,True,3362,116,26,https://github.com/narategithub,ldms list type (heap),6,[],https://github.com/ovis-hpc/ovis/pull/788,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/788,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,788,2021-09-02T21:14:22Z,2021-09-19T01:16:06Z,2021-09-19T01:16:06Z,MERGED,True,3362,116,26,https://github.com/narategithub,ldms list type (heap),6,[],https://github.com/ovis-hpc/ovis/pull/788,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/788#issuecomment-912089037,,"@tom95858
This is currently a draft. The patches were ported from @tom ovis-list.tgz. It built, but I have not tested it yet.
With its current stage, it will break the compatibility with OVIS-4 HEAD. In order to preserve the compatibility, I think we need the following:

the ldms_set_hdr->heap_sz must use the reserved space, In other words:

struct ldms_set_hdr {
	/* The unique metric set producer name */
	char producer_name[LDMS_PRODUCER_NAME_MAX];
	uint64_t meta_gn;	/* Meta-data generation number */
	struct ldms_version version;	/* LDMS version */
	uint8_t flags;	/* Set format flags */
	uint8_t pad1;	/* data pad */
	uint8_t pad2;	/* data pad */
	uint8_t pad3;	/* data pad */
	uint32_t card;		/* Size of dictionary */
	uint32_t meta_sz;	/* size of meta data in bytes */
	uint32_t data_sz;	/* size of metric values in bytes */
	uint32_t heap_sz;	/* size of heap in bytes */
	uint32_t uid;           /* UID */
	uint32_t gid;           /* GID */
	uint32_t perm;          /* permission */
	uint32_t array_card;    /* number of sets in the set array */
	uint32_t reserved[8];	/* area reserved for compatible core updates */
	uint32_t dict[OVIS_FLEX];/* The attr/metric dictionary */
};
should be
	/* The unique metric set producer name */
	char producer_name[LDMS_PRODUCER_NAME_MAX];
	uint64_t meta_gn;	/* Meta-data generation number */
	struct ldms_version version;	/* LDMS version */
	uint8_t flags;	/* Set format flags */
	uint8_t pad1;	/* data pad */
	uint8_t pad2;	/* data pad */
	uint8_t pad3;	/* data pad */
	uint32_t card;		/* Size of dictionary */
	uint32_t meta_sz;	/* size of meta data in bytes */
	uint32_t data_sz;	/* size of metric values in bytes */
	uint32_t uid;           /* UID */
	uint32_t gid;           /* GID */
	uint32_t perm;          /* permission */
	uint32_t array_card;    /* number of sets in the set array */
	uint32_t heap_sz;	/* size of heap in bytes */
	uint32_t reserved[7];	/* area reserved for compatible core updates */
	uint32_t dict[OVIS_FLEX];/* The attr/metric dictionary */
( In the earlier call with you, I was mistakenly looking at the pad1, pad2, pad3. That's why I said we have only 24 more bits for the heap_sz).

The ldms_set_hdr->data_sz should be actual_data_sz + heap_sz. This is because OVIS-4 uses ldms_set_hdr->data_sz to calculate the location of the set data (in set array). In the case of the current set data index being non-zero, if the data_sz does not include heap_sz, the OVIS-4 client (e.g. ldms_ls) will calculate wrong set data address if it lookup the set from this patch. See: https://github.com/narategithub/ovis/blob/2729bab9fb554fd1d72073a85dace2c8097b4e79/ldms/src/core/ldms_private.h#L182

REMARK: Since OVIS-4 HEAD doesn't know LDMS_V_LIST and LDMS_V_LIST_ENTRY, it is obvious that the OVIS-4 client won't be able to 100% work with the new ldmsd that uses LDMS_V_LIST. The OVIS-4 ldmsd collecting data from the new ldmsd would probably be OK ... depending on how storage plugins handle unknown datatype. OVIS-4 ldms_ls that query the new ldmsd that uses LDMS_V_LIST will print ""Unknown metric type"" for that particular metric.
@tom95858 what do you think? Any comments / suggestions? I'll proceed with 1 and 2 and test it while waiting for your input.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,788,2021-09-02T21:14:22Z,2021-09-19T01:16:06Z,2021-09-19T01:16:06Z,MERGED,True,3362,116,26,https://github.com/narategithub,ldms list type (heap),6,[],https://github.com/ovis-hpc/ovis/pull/788,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/788#issuecomment-912139263,,"@narategithub, yeah, that's why I was a bit confused. I thought I had made much space for future features. You're use of that 1st word for the heap size is the appropriate use of that reserved space.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,788,2021-09-02T21:14:22Z,2021-09-19T01:16:06Z,2021-09-19T01:16:06Z,MERGED,True,3362,116,26,https://github.com/narategithub,ldms list type (heap),6,[],https://github.com/ovis-hpc/ovis/pull/788,https://github.com/tom95858,4,https://github.com/ovis-hpc/ovis/pull/788#issuecomment-917297528,,"@narategithub I don't think it is a necessary backward compatibility claim that ldms_ls from an old LDMS will work with a new LDMS. I think it's that a new aggregator will continue to work with older LDMS samplers, i.e. the aggregators can be newer, but the samplers can be older.
But I think we should socialize this claim. We discussed this at the 2019 LDMSCONN, but that was a while ago.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,788,2021-09-02T21:14:22Z,2021-09-19T01:16:06Z,2021-09-19T01:16:06Z,MERGED,True,3362,116,26,https://github.com/narategithub,ldms list type (heap),6,[],https://github.com/ovis-hpc/ovis/pull/788,https://github.com/narategithub,5,https://github.com/ovis-hpc/ovis/pull/788#issuecomment-917318151,,@tom95858 got it.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,788,2021-09-02T21:14:22Z,2021-09-19T01:16:06Z,2021-09-19T01:16:06Z,MERGED,True,3362,116,26,https://github.com/narategithub,ldms list type (heap),6,[],https://github.com/ovis-hpc/ovis/pull/788,https://github.com/baallan,6,https://github.com/ovis-hpc/ovis/pull/788#issuecomment-918270910,,"Within a single series like v4, ls should keep working from old version hosts to new aggregators.
in particular, a cluster on 4.x (well the admin nodes on it hosting 4.x L1s) should be able to ls 4.y L2s at the analysis servers.  At the very least, the user of 4.x -> 4.y ls should get back a well formed error message describing the problem, not a crash.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,788,2021-09-02T21:14:22Z,2021-09-19T01:16:06Z,2021-09-19T01:16:06Z,MERGED,True,3362,116,26,https://github.com/narategithub,ldms list type (heap),6,[],https://github.com/ovis-hpc/ovis/pull/788,https://github.com/narategithub,7,https://github.com/ovis-hpc/ovis/pull/788#issuecomment-921148257,,"@tom95858 This is ready for your review. It passed the compatibility test, the ldms_list_test in narategithub/ldms-list (will merge to ovis-hpc/ldms-list after this PR is merged), and other test cases in ldms-list -- except setgroup which is a known bug that shall be addressed in another PR.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,788,2021-09-02T21:14:22Z,2021-09-19T01:16:06Z,2021-09-19T01:16:06Z,MERGED,True,3362,116,26,https://github.com/narategithub,ldms list type (heap),6,[],https://github.com/ovis-hpc/ovis/pull/788,https://github.com/tom95858,8,https://github.com/ovis-hpc/ovis/pull/788#issuecomment-921362804,,"Within a single series like v4, ls should keep working from old version hosts to new aggregators.

This is specifically not a goal per the compatibility guidelines we discussed at LDMSCONN

in particular, a cluster on 4.x (well the admin nodes on it hosting 4.x L1s) should be able to ls 4.y L2s at the analysis servers. At the very least, the user of 4.x -> 4.y ls should get back a well formed error message describing the problem, not a crash.

It should certainly not crash. We should test this actually. @narategithub, would you please add a forward ""does not crash"" test to the auto-tests? Specifically 4.3.3 --> pull request.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,788,2021-09-02T21:14:22Z,2021-09-19T01:16:06Z,2021-09-19T01:16:06Z,MERGED,True,3362,116,26,https://github.com/narategithub,ldms list type (heap),6,[],https://github.com/ovis-hpc/ovis/pull/788,https://github.com/narategithub,9,https://github.com/ovis-hpc/ovis/pull/788#issuecomment-921862038,,"Within a single series like v4, ls should keep working from old version hosts to new aggregators.

This is specifically not a goal per the compatibility guidelines we discussed at LDMSCONN

in particular, a cluster on 4.x (well the admin nodes on it hosting 4.x L1s) should be able to ls 4.y L2s at the analysis servers. At the very least, the user of 4.x -> 4.y ls should get back a well formed error message describing the problem, not a crash.

It should certainly not crash. We should test this actually. @narategithub, would you please add a forward ""does not crash"" test to the auto-tests? Specifically 4.3.3 --> pull request.

Sure. I'm adding it with this PR.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,788,2021-09-02T21:14:22Z,2021-09-19T01:16:06Z,2021-09-19T01:16:06Z,MERGED,True,3362,116,26,https://github.com/narategithub,ldms list type (heap),6,[],https://github.com/ovis-hpc/ovis/pull/788,https://github.com/narategithub,10,https://github.com/ovis-hpc/ovis/pull/788#issuecomment-921935145,,@tom95858 ready for you to re-review.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,788,2021-09-02T21:14:22Z,2021-09-19T01:16:06Z,2021-09-19T01:16:06Z,MERGED,True,3362,116,26,https://github.com/narategithub,ldms list type (heap),6,[],https://github.com/ovis-hpc/ovis/pull/788,https://github.com/narategithub,11,https://github.com/ovis-hpc/ovis/pull/788#issuecomment-922174240,,"Other than the doc stuff, I think it's ready to merge...thanks @narategithub

@tom95858 oops. sorry about that. I'd just pushed the changes to those doc strings. Could you please take a look once more?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,790,2021-09-03T21:35:13Z,2021-09-17T00:31:02Z,2021-09-17T00:31:02Z,MERGED,True,63,9,4,https://github.com/morrone,store_csv: Add time_format option,1,[],https://github.com/ovis-hpc/ovis/pull/790,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/790,"The time format used by LDMS in CSV files can be a bit difficult to use in practice. A great many existing tools use milliseconds-since-epoch as an internal or natively understood time format (Kafka, Cassandra, Elasticsearch, etc.). This PR introduces a store_csv option that keeps the current time format as the default, but allows the use of and alternate time format (time_format=1), where:
A value of 1 chooses an alternate format where the first field (Time_msec) is , and the
second field (Time_usec) is just the additional  since the epoch in excess of the milliseconds since
epoch. In other words, there is no overlap of the values in the first and seconds fields, which is in contrast to the
repetition employed by format 0.","The time format used by LDMS in CSV files can be a bit difficult to use in practice. A great many existing tools use milliseconds-since-epoch as an internal or natively understood time format (Kafka, Cassandra, Elasticsearch, etc.). This PR introduces a store_csv option that keeps the current time format as the default, but allows the use of and alternate time format (time_format=1), where:
A value of 1 chooses an alternate format where the first field (Time_msec) is , and the
second field (Time_usec) is just the additional  since the epoch in excess of the milliseconds since
epoch. In other words, there is no overlap of the values in the first and seconds fields, which is in contrast to the
repetition employed by format 0.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,790,2021-09-03T21:35:13Z,2021-09-17T00:31:02Z,2021-09-17T00:31:02Z,MERGED,True,63,9,4,https://github.com/morrone,store_csv: Add time_format option,1,[],https://github.com/ovis-hpc/ovis/pull/790,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/790#issuecomment-912846596,"The time format used by LDMS in CSV files can be a bit difficult to use in practice. A great many existing tools use milliseconds-since-epoch as an internal or natively understood time format (Kafka, Cassandra, Elasticsearch, etc.). This PR introduces a store_csv option that keeps the current time format as the default, but allows the use of and alternate time format (time_format=1), where:
A value of 1 chooses an alternate format where the first field (Time_msec) is , and the
second field (Time_usec) is just the additional  since the epoch in excess of the milliseconds since
epoch. In other words, there is no overlap of the values in the first and seconds fields, which is in contrast to the
repetition employed by format 0.","I think this feature would be better put into a set transform plugin so that all stores could see the change in data, but I don't have a strong objection to it being added to store_csv this way. Wouldn't the better solution for Kafka, Cassandra, Elasticsearch be to have their own store plugins?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,790,2021-09-03T21:35:13Z,2021-09-17T00:31:02Z,2021-09-17T00:31:02Z,MERGED,True,63,9,4,https://github.com/morrone,store_csv: Add time_format option,1,[],https://github.com/ovis-hpc/ovis/pull/790,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/790#issuecomment-912850227,"The time format used by LDMS in CSV files can be a bit difficult to use in practice. A great many existing tools use milliseconds-since-epoch as an internal or natively understood time format (Kafka, Cassandra, Elasticsearch, etc.). This PR introduces a store_csv option that keeps the current time format as the default, but allows the use of and alternate time format (time_format=1), where:
A value of 1 chooses an alternate format where the first field (Time_msec) is , and the
second field (Time_usec) is just the additional  since the epoch in excess of the milliseconds since
epoch. In other words, there is no overlap of the values in the first and seconds fields, which is in contrast to the
repetition employed by format 0.","I think this feature would be better put into a set transform plugin so that all stores could see the change in data, but I don't have a strong objection to it being added to store_csv this way. Wouldn't the better solution for Kafka, Cassandra, Elasticsearch be to have their own store plugins?

I'm not transforming any data in the metric set, so I don't think transforming sets is the way to go. I am just changing how the store_csv plugin chooses to represent time.
Yes, a Kafka store would certainly address our needs (because that in turn feeds the database(s)). A Kafka store is certainly on the roadmap, but could be several months from fruition.
Further, the changes that we need to make to our infrastructure to allow direct data feeds to Kafka (rather than our current all-CSV-files-all-the-time approach) could also take several months  This new time_format option lets us get around the time problem today.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,790,2021-09-03T21:35:13Z,2021-09-17T00:31:02Z,2021-09-17T00:31:02Z,MERGED,True,63,9,4,https://github.com/morrone,store_csv: Add time_format option,1,[],https://github.com/ovis-hpc/ovis/pull/790,https://github.com/tom95858,4,https://github.com/ovis-hpc/ovis/pull/790#issuecomment-917295853,"The time format used by LDMS in CSV files can be a bit difficult to use in practice. A great many existing tools use milliseconds-since-epoch as an internal or natively understood time format (Kafka, Cassandra, Elasticsearch, etc.). This PR introduces a store_csv option that keeps the current time format as the default, but allows the use of and alternate time format (time_format=1), where:
A value of 1 chooses an alternate format where the first field (Time_msec) is , and the
second field (Time_usec) is just the additional  since the epoch in excess of the milliseconds since
epoch. In other words, there is no overlap of the values in the first and seconds fields, which is in contrast to the
repetition employed by format 0.","@oceandlr, @valleydlr is this change ok with you?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,790,2021-09-03T21:35:13Z,2021-09-17T00:31:02Z,2021-09-17T00:31:02Z,MERGED,True,63,9,4,https://github.com/morrone,store_csv: Add time_format option,1,[],https://github.com/ovis-hpc/ovis/pull/790,https://github.com/valleydlr,5,https://github.com/ovis-hpc/ovis/pull/790#issuecomment-918480809,"The time format used by LDMS in CSV files can be a bit difficult to use in practice. A great many existing tools use milliseconds-since-epoch as an internal or natively understood time format (Kafka, Cassandra, Elasticsearch, etc.). This PR introduces a store_csv option that keeps the current time format as the default, but allows the use of and alternate time format (time_format=1), where:
A value of 1 chooses an alternate format where the first field (Time_msec) is , and the
second field (Time_usec) is just the additional  since the epoch in excess of the milliseconds since
epoch. In other words, there is no overlap of the values in the first and seconds fields, which is in contrast to the
repetition employed by format 0.",+1,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,792,2021-09-09T02:11:59Z,2021-09-17T00:31:23Z,2021-09-17T00:31:23Z,MERGED,True,3,3,1,https://github.com/nichamon,Make the test_sampler plugin compatible with OVIS-4.3.7,1,[],https://github.com/ovis-hpc/ovis/pull/792,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/792,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,796,2021-09-10T04:58:13Z,2021-09-13T18:12:55Z,2021-09-13T18:12:56Z,MERGED,True,21,2,1,https://github.com/narategithub,Fix auth_munge compatiblity issue over rdma xprt,1,[],https://github.com/ovis-hpc/ovis/pull/796,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/796,"auth_munge uses local address obtained from zap as munge data payload.
The peer then unmunge the payload and compare with its remote address
(which is our local address). If the payload matches the expected
address, the connection is authenticated.
zap_rdma had a bug that mixed up remote/local addresses, and the bug
stayed in the tree for quite some time (since v4.3.3). After v4.3.7,
commit 891da2b addressed the local/remote address mixed-up bug, but
this introduced auth_munge compatibility issue over rdma xprt because
v4.3.7 expected the mixed-up remote address, but 891da2b would send
the correct one, causing auth_munge to invalidate the connection.
This patch is a work-around in auth_munge to use the mixed-up
addresses for the rdma transport.","auth_munge uses local address obtained from zap as munge data payload.
The peer then unmunge the payload and compare with its remote address
(which is our local address). If the payload matches the expected
address, the connection is authenticated.
zap_rdma had a bug that mixed up remote/local addresses, and the bug
stayed in the tree for quite some time (since v4.3.3). After v4.3.7,
commit 891da2b addressed the local/remote address mixed-up bug, but
this introduced auth_munge compatibility issue over rdma xprt because
v4.3.7 expected the mixed-up remote address, but 891da2b would send
the correct one, causing auth_munge to invalidate the connection.
This patch is a work-around in auth_munge to use the mixed-up
addresses for the rdma transport.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,796,2021-09-10T04:58:13Z,2021-09-13T18:12:55Z,2021-09-13T18:12:56Z,MERGED,True,21,2,1,https://github.com/narategithub,Fix auth_munge compatiblity issue over rdma xprt,1,[],https://github.com/ovis-hpc/ovis/pull/796,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/796#issuecomment-916636874,"auth_munge uses local address obtained from zap as munge data payload.
The peer then unmunge the payload and compare with its remote address
(which is our local address). If the payload matches the expected
address, the connection is authenticated.
zap_rdma had a bug that mixed up remote/local addresses, and the bug
stayed in the tree for quite some time (since v4.3.3). After v4.3.7,
commit 891da2b addressed the local/remote address mixed-up bug, but
this introduced auth_munge compatibility issue over rdma xprt because
v4.3.7 expected the mixed-up remote address, but 891da2b would send
the correct one, causing auth_munge to invalidate the connection.
This patch is a work-around in auth_munge to use the mixed-up
addresses for the rdma transport.","This patch has been tested with the following test scenario:


 v4.3.7 sampler --rdma/munge--> 796 ldms_ls


 v4.3.7 sampler --rdma/none--> 796 ldms_ls


 v4.3.7 sampler --sock/munge--> 796 ldms_ls


 v4.3.7 sampler --sock/none--> 796 ldms_ls


 796 sampler --rdma/munge--> 796 ldms_ls


 796 sampler --rdma/none--> 796 ldms_ls


 796 sampler --sock/munge--> 796 ldms_ls


 796 sampler --sock/none--> 796 ldms_ls


 796 sampler --rdma/munge--> v4.3.7 ldms_ls


 796 sampler --rdma/none--> v4.3.7 ldms_ls


 796 sampler --sock/munge--> v4.3.7ldms_ls


 796 sampler --sock/none--> v4.3.7ldms_ls",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,796,2021-09-10T04:58:13Z,2021-09-13T18:12:55Z,2021-09-13T18:12:56Z,MERGED,True,21,2,1,https://github.com/narategithub,Fix auth_munge compatiblity issue over rdma xprt,1,[],https://github.com/ovis-hpc/ovis/pull/796,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/796#issuecomment-917430584,"auth_munge uses local address obtained from zap as munge data payload.
The peer then unmunge the payload and compare with its remote address
(which is our local address). If the payload matches the expected
address, the connection is authenticated.
zap_rdma had a bug that mixed up remote/local addresses, and the bug
stayed in the tree for quite some time (since v4.3.3). After v4.3.7,
commit 891da2b addressed the local/remote address mixed-up bug, but
this introduced auth_munge compatibility issue over rdma xprt because
v4.3.7 expected the mixed-up remote address, but 891da2b would send
the correct one, causing auth_munge to invalidate the connection.
This patch is a work-around in auth_munge to use the mixed-up
addresses for the rdma transport.","@narategithub There's a reason why we fixed this. In other words, there was some other issue that this swapping caused. Do you remember what that was? Because swapping these back is going to reintroduce that issue.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,796,2021-09-10T04:58:13Z,2021-09-13T18:12:55Z,2021-09-13T18:12:56Z,MERGED,True,21,2,1,https://github.com/narategithub,Fix auth_munge compatiblity issue over rdma xprt,1,[],https://github.com/ovis-hpc/ovis/pull/796,https://github.com/narategithub,4,https://github.com/ovis-hpc/ovis/pull/796#issuecomment-918225420,"auth_munge uses local address obtained from zap as munge data payload.
The peer then unmunge the payload and compare with its remote address
(which is our local address). If the payload matches the expected
address, the connection is authenticated.
zap_rdma had a bug that mixed up remote/local addresses, and the bug
stayed in the tree for quite some time (since v4.3.3). After v4.3.7,
commit 891da2b addressed the local/remote address mixed-up bug, but
this introduced auth_munge compatibility issue over rdma xprt because
v4.3.7 expected the mixed-up remote address, but 891da2b would send
the correct one, causing auth_munge to invalidate the connection.
This patch is a work-around in auth_munge to use the mixed-up
addresses for the rdma transport.","@tom95858 The zap_rdma fix is not reverted. This patch only touches auth_munge. So, it should not re-introduce the bug caused by the swapped zap_rdma addresses elsewhere. However, I would like to note that this patch will not be compatible with OVIS-4 installation that contains 891da2b. But I think that should be OK as they're not yet released.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,797,2021-09-15T19:03:34Z,2021-09-17T00:31:38Z,2022-01-18T04:11:01Z,MERGED,True,7,3,1,https://github.com/nichamon,Prevent ldms_xprt from delivering SEND_COMPLETE during authentication,1,[],https://github.com/ovis-hpc/ovis/pull/797,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/797,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,798,2021-09-15T19:09:57Z,2021-09-17T00:32:07Z,2021-09-17T00:32:08Z,MERGED,True,45,4,12,https://github.com/nichamon,Handle SEND_COMPLETE events in ldms_xprt's clients,1,[],https://github.com/ovis-hpc/ovis/pull/798,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/798,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,798,2021-09-15T19:09:57Z,2021-09-17T00:32:07Z,2021-09-17T00:32:08Z,MERGED,True,45,4,12,https://github.com/nichamon,Handle SEND_COMPLETE events in ldms_xprt's clients,1,[],https://github.com/ovis-hpc/ovis/pull/798,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/798#issuecomment-920309490,,"@tom95858 Besides the test programs, there are 6 more files that don't handle the SEND_COMPLETE events.

The blocked connect path and the passive connect path in ldms_xprt.c
ldms_sps.c
ldmsd_upload.c
ldmsd_stream_subscribe.c -- The SEND_COMPLETE event corresponds to the acknowledgment sent to the publisher
hello_cat_publisher.c -- a sampler plugin
hello_publisher.c -- a sampler plugin",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,798,2021-09-15T19:09:57Z,2021-09-17T00:32:07Z,2021-09-17T00:32:08Z,MERGED,True,45,4,12,https://github.com/nichamon,Handle SEND_COMPLETE events in ldms_xprt's clients,1,[],https://github.com/ovis-hpc/ovis/pull/798,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/798#issuecomment-920328523,,@nichamon Ann's csv request #777 removes/renames many of the hello* stuff files. you may want to split this (or just refactor after).,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,798,2021-09-15T19:09:57Z,2021-09-17T00:32:07Z,2021-09-17T00:32:08Z,MERGED,True,45,4,12,https://github.com/nichamon,Handle SEND_COMPLETE events in ldms_xprt's clients,1,[],https://github.com/ovis-hpc/ovis/pull/798,https://github.com/nichamon,4,https://github.com/ovis-hpc/ovis/pull/798#issuecomment-920505779,,"@nichamon Ann's csv request #777 removes/renames many of the hello* stuff files. you may want to split this (or just refactor after).

@baallan Thanks for letting me know.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,799,2021-09-20T17:37:50Z,2021-09-27T18:12:46Z,2021-09-27T18:12:46Z,MERGED,True,9,9,3,https://github.com/baallan,update csv test to include milli format,1,[],https://github.com/ovis-hpc/ovis/pull/799,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/799,"This adds enabling the milli format on some of the existing csv tests and shifts the test sampling offsets so that millis other than 0 are visible.
OVIS-4 with recent changes from @morrone works correctly with this test.","This adds enabling the milli format on some of the existing csv tests and shifts the test sampling offsets so that millis other than 0 are visible.
OVIS-4 with recent changes from @morrone works correctly with this test.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,800,2021-09-20T18:43:01Z,2021-09-27T18:10:41Z,2021-09-27T18:10:41Z,CLOSED,False,1,1,1,https://github.com/baallan,correct use of uninitialized len value in xprt.,1,[],https://github.com/ovis-hpc/ovis/pull/800,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/800,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,801,2021-09-20T18:43:24Z,2021-09-21T03:21:13Z,2021-09-21T03:21:13Z,MERGED,True,1,2,1,https://github.com/baallan,correct zeroing the header to prevent network leak of data.,1,[],https://github.com/ovis-hpc/ovis/pull/801,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/801,"This also stops valgrind whining due to the leaked struct padding
in rmsg. rmsg header is 36 bytes on all platforms.","This also stops valgrind whining due to the leaked struct padding
in rmsg. rmsg header is 36 bytes on all platforms.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,802,2021-09-21T16:05:38Z,2021-09-21T20:02:08Z,2022-01-18T04:07:35Z,MERGED,True,10,8,1,https://github.com/nichamon,Fix __process_dir_set_info() handling wrong key names,1,[],https://github.com/ovis-hpc/ovis/pull/802,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/802,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,802,2021-09-21T16:05:38Z,2021-09-21T20:02:08Z,2022-01-18T04:07:35Z,MERGED,True,10,8,1,https://github.com/nichamon,Fix __process_dir_set_info() handling wrong key names,1,[],https://github.com/ovis-hpc/ovis/pull/802,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/802#issuecomment-924135142,,"This is the bug I found in the process_dir_reply() path that causes the auto-update to fail. With the patch, the auto-update works. I'm writing a test for the auto-update mode.
@narategithub The patch does not fix the bug in the set_group logic, though.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,802,2021-09-21T16:05:38Z,2021-09-21T20:02:08Z,2022-01-18T04:07:35Z,MERGED,True,10,8,1,https://github.com/nichamon,Fix __process_dir_set_info() handling wrong key names,1,[],https://github.com/ovis-hpc/ovis/pull/802,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/802#issuecomment-924340027,,"This is the bug I found in the process_dir_reply() path that causes the auto-update to fail. With the patch, the auto-update works. I'm writing a test for the auto-update mode.
@narategithub The patch does not fix the bug in the set_group logic, though.

I found another bug in the same path. I have updated the patch. With the patch, OVIS-4 passes the setgroup_test in the ldms-test repo.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,803,2021-09-21T21:13:43Z,2021-09-22T22:26:37Z,2021-09-22T22:26:38Z,CLOSED,False,10,2,1,https://github.com/narategithub,Fix ldms update never completed bug,1,[],https://github.com/ovis-hpc/ovis/pull/803,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/803,"When the ldms consumer (e.g. ldms_ls or agg) updated the looked-up set
before the producer (e.g. sampler) sampled a new data since previous
update, the consumer side won't get update complete callback at all.
What happened was that the zap_read completion was delivered but the
logic in ldms xprt detected that the data was old and didn't call update
complete. This patch modified the code to call the update callback in
the case of receiving the old data.","When the ldms consumer (e.g. ldms_ls or agg) updated the looked-up set
before the producer (e.g. sampler) sampled a new data since previous
update, the consumer side won't get update complete callback at all.
What happened was that the zap_read completion was delivered but the
logic in ldms xprt detected that the data was old and didn't call update
complete. This patch modified the code to call the update callback in
the case of receiving the old data.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,803,2021-09-21T21:13:43Z,2021-09-22T22:26:37Z,2021-09-22T22:26:38Z,CLOSED,False,10,2,1,https://github.com/narategithub,Fix ldms update never completed bug,1,[],https://github.com/ovis-hpc/ovis/pull/803,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/803#issuecomment-924390878,"When the ldms consumer (e.g. ldms_ls or agg) updated the looked-up set
before the producer (e.g. sampler) sampled a new data since previous
update, the consumer side won't get update complete callback at all.
What happened was that the zap_read completion was delivered but the
logic in ldms xprt detected that the data was old and didn't call update
complete. This patch modified the code to call the update callback in
the case of receiving the old data.","@tom95858 This passed all existing test cases in ldms-test, including setgroup_test (fixed by @nichamon #802) and the new test for this corner case in my tree here. I'll merge the test case into ldms-test/master when this PR is merged.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,803,2021-09-21T21:13:43Z,2021-09-22T22:26:37Z,2021-09-22T22:26:38Z,CLOSED,False,10,2,1,https://github.com/narategithub,Fix ldms update never completed bug,1,[],https://github.com/ovis-hpc/ovis/pull/803,https://github.com/narategithub,3,https://github.com/ovis-hpc/ovis/pull/803#issuecomment-925373861,"When the ldms consumer (e.g. ldms_ls or agg) updated the looked-up set
before the producer (e.g. sampler) sampled a new data since previous
update, the consumer side won't get update complete callback at all.
What happened was that the zap_read completion was delivered but the
logic in ldms xprt detected that the data was old and didn't call update
complete. This patch modified the code to call the update callback in
the case of receiving the old data.",This broke ldms_list_test .. I forgot to add ldms_list_test into test-all.sh.  I'll re-open this after it really passed all the tests.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,804,2021-09-22T14:34:08Z,2021-09-27T18:09:18Z,2021-09-27T18:09:18Z,MERGED,True,111,36,4,https://github.com/narategithub,Fix ldms_xprt_sockaddr() calls to not assume ipv4 addresses,2,[],https://github.com/ovis-hpc/ovis/pull/804,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/804,Also add compatibility test with munge authentication in github actions since the patch touches ldms_auth_munge.c,Also add compatibility test with munge authentication in github actions since the patch touches ldms_auth_munge.c,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,804,2021-09-22T14:34:08Z,2021-09-27T18:09:18Z,2021-09-27T18:09:18Z,MERGED,True,111,36,4,https://github.com/narategithub,Fix ldms_xprt_sockaddr() calls to not assume ipv4 addresses,2,[],https://github.com/ovis-hpc/ovis/pull/804,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/804#issuecomment-925000384,Also add compatibility test with munge authentication in github actions since the patch touches ldms_auth_munge.c,"@tom95858 I think ldms_xprt_sockaddr() itself works correctly. If the caller provide smaller output buffer, it returns E2BIG to let the caller know that the provided buffer size is not enough, and *sa_len is set to the required size. As for the caching ... I have a vague memory that I put it in because the debugging code keep calling ldms_xprt_sockaddr() and it was so slow when calling zap_get_name() repeatedly, and caching helped.

  
    
      ovis/ldms/src/core/ldms_xprt.c
    
    
        Lines 3808 to 3836
      in
      24da2a3
    
  
  
    

        
          
           int ldms_xprt_sockaddr(ldms_t _x, struct sockaddr *local_sa, 
        

        
          
           		       struct sockaddr *remote_sa, 
        

        
          
           		       socklen_t *sa_len) 
        

        
          
           { 
        

        
          
           	struct ldms_xprt *x = _x; 
        

        
          
           	zap_err_t zerr; 
        

        
          
            
        

        
          
           	if (!x->sa_len) { 
        

        
          
           		/* 
        

        
          
           		 * The addresses have never been gotten. 
        

        
          
           		 * Get the addresses first. 
        

        
          
           		 */ 
        

        
          
           		x->sa_len = sizeof(x->local_sa); 
        

        
          
           		zerr = zap_get_name(x->zap_ep, (struct sockaddr *)&x->local_sa, 
        

        
          
           				    (struct sockaddr *)&x->remote_sa, &x->sa_len); 
        

        
          
           		if (zerr) 
        

        
          
           			return zap_zerr2errno(zerr); 
        

        
          
           	} 
        

        
          
            
        

        
          
           	if (x->sa_len > *sa_len) { 
        

        
          
           		*sa_len = x->sa_len; 
        

        
          
           		return E2BIG; 
        

        
          
           	} 
        

        
          
            
        

        
          
           	memcpy(local_sa, &x->local_sa, x->sa_len); 
        

        
          
           	memcpy(remote_sa, &x->remote_sa, x->sa_len); 
        

        
          
           	*sa_len = x->sa_len; 
        

        
          
           	return 0; 
        

        
          
           }",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,804,2021-09-22T14:34:08Z,2021-09-27T18:09:18Z,2021-09-27T18:09:18Z,MERGED,True,111,36,4,https://github.com/narategithub,Fix ldms_xprt_sockaddr() calls to not assume ipv4 addresses,2,[],https://github.com/ovis-hpc/ovis/pull/804,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/804#issuecomment-925728040,Also add compatibility test with munge authentication in github actions since the patch touches ldms_auth_munge.c,This is missing the fix to ldms_xprt_sockaddr that checks for a 0 length and sets the length to sizeof(sockaddr) if so.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,804,2021-09-22T14:34:08Z,2021-09-27T18:09:18Z,2021-09-27T18:09:18Z,MERGED,True,111,36,4,https://github.com/narategithub,Fix ldms_xprt_sockaddr() calls to not assume ipv4 addresses,2,[],https://github.com/ovis-hpc/ovis/pull/804,https://github.com/narategithub,4,https://github.com/ovis-hpc/ovis/pull/804#issuecomment-925758058,Also add compatibility test with munge authentication in github actions since the patch touches ldms_auth_munge.c,"This is missing the fix to ldms_xprt_sockaddr that checks for a 0 length and sets the length to sizeof(sockaddr) if so.

I think ldms_xprt_sockaddr() already covered this case. Let's assume that *sa_len is 0. If this is the first call, x->sa_len is also 0. Then, the following code will get and cache the local and remote addresses with the length.

  
    
      ovis/ldms/src/core/ldms_xprt.c
    
    
        Lines 3815 to 3825
      in
      24da2a3
    
  
  
    

        
          
           	if (!x->sa_len) { 
        

        
          
           		/* 
        

        
          
           		 * The addresses have never been gotten. 
        

        
          
           		 * Get the addresses first. 
        

        
          
           		 */ 
        

        
          
           		x->sa_len = sizeof(x->local_sa); 
        

        
          
           		zerr = zap_get_name(x->zap_ep, (struct sockaddr *)&x->local_sa, 
        

        
          
           				    (struct sockaddr *)&x->remote_sa, &x->sa_len); 
        

        
          
           		if (zerr) 
        

        
          
           			return zap_zerr2errno(zerr); 
        

        
          
           	} 
        
    
  


If this call is not the first call, the local and remote addresses with length are already cached.
Then, because *sa_len is 0, which will always be less than the x->sa_len that has been cached, the following code will be executed and the function returned with E2BIG.

  
    
      ovis/ldms/src/core/ldms_xprt.c
    
    
        Lines 3827 to 3830
      in
      24da2a3
    
  
  
    

        
          
           if (x->sa_len > *sa_len) { 
        

        
          
           	*sa_len = x->sa_len; 
        

        
          
           	return E2BIG; 
        

        
          
           } 
        
    
  


😃",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,804,2021-09-22T14:34:08Z,2021-09-27T18:09:18Z,2021-09-27T18:09:18Z,MERGED,True,111,36,4,https://github.com/narategithub,Fix ldms_xprt_sockaddr() calls to not assume ipv4 addresses,2,[],https://github.com/ovis-hpc/ovis/pull/804,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/804#issuecomment-926236062,Also add compatibility test with munge authentication in github actions since the patch touches ldms_auth_munge.c,"This ""optimization"" presumes that every call to this function provides the same input buffer and size. That is a bug. If we need to cache the address we should do so in the Zap transport, not in ldms_xprt_sockaddr(). I am curious as to what performance problem you are seeing and on which transport(s).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,804,2021-09-22T14:34:08Z,2021-09-27T18:09:18Z,2021-09-27T18:09:18Z,MERGED,True,111,36,4,https://github.com/narategithub,Fix ldms_xprt_sockaddr() calls to not assume ipv4 addresses,2,[],https://github.com/ovis-hpc/ovis/pull/804,https://github.com/narategithub,6,https://github.com/ovis-hpc/ovis/pull/804#issuecomment-926627741,Also add compatibility test with munge authentication in github actions since the patch touches ldms_auth_munge.c,"TL; DR: I'm removing the caching + running the test in ldms-test.

This ""optimization"" presumes that every call to this function provides the same input buffer and size. That is a bug.

It doesn't care about input buffer size as long as it fits output size. It behaves the same as getsockname(2) except for that ldms_xprt_sockaddr() doesn't copy addresses at all if the size is not big enough. The cached addresses are struct sockaddr_storage which is 128 bytes. If we have a zap transport that will return address bigger than 128 bytes, then we have a bug in this case.

If we need to cache the address we should do so in the Zap transport, not in ldms_xprt_sockaddr(). I am curious as to what performance problem you are seeing and on which transport(s).

OK. I'll remove the caching from ldms xprt. Regarding the performance issue, I think my memory got mixed up with something else. Weeding through gitlog I found 1405c16 that introduce address caching in ldms_xprt. The following is a snippet from the commit message:
        [x] ldms_xprt_sockaddr() caching: cache the remote/local addresses
            on the success zap_get_name() so that the remote/local addresses
            are still available even after the endpoint became disconnected
            (but not yet destroyed), which is required for the republish
            client key construction. The caching is valid because the
            local/remote addresses are not changed after the endpoint
            becomes connected.

Someone must be calling ldms_xprt_sockaddr() after the endpoint became disconnected but still wanted the addresses when it was connected. Anyway, in our current OVIS-4 head (b0b8b7f), there are only two places that call ldms_xprt_sockaddr(): in ldms_auth_munge.c and the call to initial the cache after becoming connected in ldms_xprt.c. Both places are not the case that the quoted commit message referred to.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,804,2021-09-22T14:34:08Z,2021-09-27T18:09:18Z,2021-09-27T18:09:18Z,MERGED,True,111,36,4,https://github.com/narategithub,Fix ldms_xprt_sockaddr() calls to not assume ipv4 addresses,2,[],https://github.com/ovis-hpc/ovis/pull/804,https://github.com/narategithub,7,https://github.com/ovis-hpc/ovis/pull/804#issuecomment-926713316,Also add compatibility test with munge authentication in github actions since the patch touches ldms_auth_munge.c,@tom95858 the caching is now removed.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,804,2021-09-22T14:34:08Z,2021-09-27T18:09:18Z,2021-09-27T18:09:18Z,MERGED,True,111,36,4,https://github.com/narategithub,Fix ldms_xprt_sockaddr() calls to not assume ipv4 addresses,2,[],https://github.com/ovis-hpc/ovis/pull/804,https://github.com/narategithub,8,https://github.com/ovis-hpc/ovis/pull/804#issuecomment-926713803,Also add compatibility test with munge authentication in github actions since the patch touches ldms_auth_munge.c,also passed all container-based test cases in ldms-test.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,804,2021-09-22T14:34:08Z,2021-09-27T18:09:18Z,2021-09-27T18:09:18Z,MERGED,True,111,36,4,https://github.com/narategithub,Fix ldms_xprt_sockaddr() calls to not assume ipv4 addresses,2,[],https://github.com/ovis-hpc/ovis/pull/804,https://github.com/tom95858,9,https://github.com/ovis-hpc/ovis/pull/804#issuecomment-927160847,Also add compatibility test with munge authentication in github actions since the patch touches ldms_auth_munge.c,"TL; DR: I'm removing the caching + running the test in ldms-test.

This ""optimization"" presumes that every call to this function provides the same input buffer and size. That is a bug.

It doesn't care about input buffer size as long as it fits output size. It behaves the same as getsockname(2) except for that ldms_xprt_sockaddr() doesn't copy addresses at all if the size is not big enough.

I'm failing to make the point. There is no such thing as 'input' vs. 'output' buffer, it's the same buffer. The caller sets the buffer size because it is the only one that knows what was provided.

... The cached addresses are struct sockaddr_storage which is 128 bytes. If we have a zap transport that will return address bigger than 128 bytes, then we have a bug in this case.

It doesn't matter how big the cache buffer is. You're stuffing it into the buffer the caller provided regardless; the size of which was set to zero when this caching logic was introduced.


If we need to cache the address we should do so in the Zap transport, not in ldms_xprt_sockaddr(). I am curious as to what performance problem you are seeing and on which transport(s).

OK. I'll remove the caching from ldms xprt. Regarding the performance issue, I think my memory got mixed up with something else. Weeding through gitlog I found 1405c16 that introduce address caching in ldms_xprt. The following is a snippet from the commit message:
        [x] ldms_xprt_sockaddr() caching: cache the remote/local addresses
            on the success zap_get_name() so that the remote/local addresses
            are still available even after the endpoint became disconnected
            (but not yet destroyed), which is required for the republish
            client key construction. The caching is valid because the
            local/remote addresses are not changed after the endpoint
            becomes connected.

Someone must be calling ldms_xprt_sockaddr() after the endpoint became disconnected but still wanted the addresses when it was connected. Anyway, in our current OVIS-4 head (b0b8b7f), there are only two places that call ldms_xprt_sockaddr(): in ldms_auth_munge.c and the call to initial the cache after becoming connected in ldms_xprt.c. Both places are not the case that the quoted commit message referred to.

I'm not following you here. You say you're removing the caching logic and then arguing that it's required by the streams logic.
I would like the interface to behave reliably and consistently. Right now it assumes that the caller provided struct sockaddr_storage *. If this is the requirement of the interface, then change the parameter types to struct sockaddr_storage * so that the function declaration makes this obvious. The compiler will then check that this condition is met. Then you can leave the ""caching"" logic in there.
In any case the check for size needs to be removed because it's set by the ldms_xprt_sockaddr function internally and does not represent the size of the buffer provided by the caller.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,804,2021-09-22T14:34:08Z,2021-09-27T18:09:18Z,2021-09-27T18:09:18Z,MERGED,True,111,36,4,https://github.com/narategithub,Fix ldms_xprt_sockaddr() calls to not assume ipv4 addresses,2,[],https://github.com/ovis-hpc/ovis/pull/804,https://github.com/narategithub,10,https://github.com/ovis-hpc/ovis/pull/804#issuecomment-928060451,Also add compatibility test with munge authentication in github actions since the patch touches ldms_auth_munge.c,"@tom95858
Sorry for the confusion, here's the status of this PR:

Caching has been removed. I agree with you that if it is requited, it should be done by the underlying transport.
I think right now we don't need caching. There is currently only 1 place that calls ldms_xprt_sockaddr(), which is in ldms_auth_munge.c, which previously assumed ipv4 struct sockaddr_in address buffers. It is changed to struct sockaddr_storage to accommodate other kinds of addresses as well. According to socket.h, struct sockaddr_stroage is ""Structure large enough to hold any socket address (with the historical exception of AF_UNIX).""
I think the caching removal is safe. It also passed all of the container-based test cases in ldms-test and the compatibility test with munge introduced in this pull request.

My opinion regarding struct sockaddr * vs struct sockaddr_storage *, I think we should keep struct sockaddr * to mimic getsockname(2).

P.S. The caching x->sa_len was set to sizeof( struct x->local_sa ) before calling zap_get_name(). zap_get_name() never received buffer lenght 0 (@nichamon fixed it in a916c4f).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,805,2021-09-22T21:11:16Z,2021-09-23T11:33:45Z,2021-09-23T11:33:45Z,MERGED,True,4,4,1,https://github.com/narategithub,Fix log level checking bug,1,[],https://github.com/ovis-hpc/ovis/pull/805,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/805,"Log level was checked in ldmsd_log(). However, the true logging
function was __ldmsd_log(), and other convenient logging functions
(e.g. ldmsd_linfo()) call __ldmsd_log() directly without checking
the log level. This results in convenient functions such as
ldmsd_linfo() to be able to log messages even though the log level is
set to be higher (e.g. ERROR). This patch moved the log level checking
into __ldmsd_log() to solve the issue.","Log level was checked in ldmsd_log(). However, the true logging
function was __ldmsd_log(), and other convenient logging functions
(e.g. ldmsd_linfo()) call __ldmsd_log() directly without checking
the log level. This results in convenient functions such as
ldmsd_linfo() to be able to log messages even though the log level is
set to be higher (e.g. ERROR). This patch moved the log level checking
into __ldmsd_log() to solve the issue.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,806,2021-09-23T15:19:34Z,2021-09-27T18:12:09Z,2021-09-27T18:12:09Z,MERGED,True,11,2,1,https://github.com/narategithub,Fix ldms update never completed bug,1,[],https://github.com/ovis-hpc/ovis/pull/806,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/806,"When the ldms consumer (e.g. ldms_ls or agg) updated the looked-up set
before the producer (e.g. sampler) sampled a new data since previous
update, the consumer side won't get update complete callback at all.
What happened was that the zap_read completion was delivered but the
logic in ldms xprt detected that the data was old and didn't call update
complete. This patch modified the code to call the update callback in
the case of receiving the old data.","When the ldms consumer (e.g. ldms_ls or agg) updated the looked-up set
before the producer (e.g. sampler) sampled a new data since previous
update, the consumer side won't get update complete callback at all.
What happened was that the zap_read completion was delivered but the
logic in ldms xprt detected that the data was old and didn't call update
complete. This patch modified the code to call the update callback in
the case of receiving the old data.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,806,2021-09-23T15:19:34Z,2021-09-27T18:12:09Z,2021-09-27T18:12:09Z,MERGED,True,11,2,1,https://github.com/narategithub,Fix ldms update never completed bug,1,[],https://github.com/ovis-hpc/ovis/pull/806,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/806#issuecomment-925920297,"When the ldms consumer (e.g. ldms_ls or agg) updated the looked-up set
before the producer (e.g. sampler) sampled a new data since previous
update, the consumer side won't get update complete callback at all.
What happened was that the zap_read completion was delivered but the
logic in ldms xprt detected that the data was old and didn't call update
complete. This patch modified the code to call the update callback in
the case of receiving the old data.","@tom95858 This time it passed all of the container-based test cases in ldms-test, including the new one set_array_hang_test that specifically covering the issue this PR is solving. I'll merge set_array_hang_test into ldms-test/master after this PR is merged.
You can see the test results here: https://gist.github.com/narategithub/8b2d35cb7a74b2a9678a367da0220c6e#file-test-all-log",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,806,2021-09-23T15:19:34Z,2021-09-27T18:12:09Z,2021-09-27T18:12:09Z,MERGED,True,11,2,1,https://github.com/narategithub,Fix ldms update never completed bug,1,[],https://github.com/ovis-hpc/ovis/pull/806,https://github.com/narategithub,3,https://github.com/ovis-hpc/ovis/pull/806#issuecomment-925938804,"When the ldms consumer (e.g. ldms_ls or agg) updated the looked-up set
before the producer (e.g. sampler) sampled a new data since previous
update, the consumer side won't get update complete callback at all.
What happened was that the zap_read completion was delivered but the
logic in ldms xprt detected that the data was old and didn't call update
complete. This patch modified the code to call the update callback in
the case of receiving the old data.",p.s. github does not allow me to re-open #803 due to a forced push.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,806,2021-09-23T15:19:34Z,2021-09-27T18:12:09Z,2021-09-27T18:12:09Z,MERGED,True,11,2,1,https://github.com/narategithub,Fix ldms update never completed bug,1,[],https://github.com/ovis-hpc/ovis/pull/806,https://github.com/tom95858,4,https://github.com/ovis-hpc/ovis/pull/806#issuecomment-928145304,"When the ldms consumer (e.g. ldms_ls or agg) updated the looked-up set
before the producer (e.g. sampler) sampled a new data since previous
update, the consumer side won't get update complete callback at all.
What happened was that the zap_read completion was delivered but the
logic in ldms xprt detected that the data was old and didn't call update
complete. This patch modified the code to call the update callback in
the case of receiving the old data.",@narategithub is this good to go?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,806,2021-09-23T15:19:34Z,2021-09-27T18:12:09Z,2021-09-27T18:12:09Z,MERGED,True,11,2,1,https://github.com/narategithub,Fix ldms update never completed bug,1,[],https://github.com/ovis-hpc/ovis/pull/806,https://github.com/narategithub,5,https://github.com/ovis-hpc/ovis/pull/806#issuecomment-928148066,"When the ldms consumer (e.g. ldms_ls or agg) updated the looked-up set
before the producer (e.g. sampler) sampled a new data since previous
update, the consumer side won't get update complete callback at all.
What happened was that the zap_read completion was delivered but the
logic in ldms xprt detected that the data was old and didn't call update
complete. This patch modified the code to call the update callback in
the case of receiving the old data.",@tom95858 I believe it is.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,807,2021-09-23T19:46:02Z,2021-09-27T18:09:52Z,2022-01-18T04:07:32Z,MERGED,True,5,9,1,https://github.com/nichamon,Fix ldms_xprt_put() and ldms_xprt_get(),2,[],https://github.com/ovis-hpc/ovis/pull/807,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/807,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,807,2021-09-23T19:46:02Z,2021-09-27T18:09:52Z,2022-01-18T04:07:32Z,MERGED,True,5,9,1,https://github.com/nichamon,Fix ldms_xprt_put() and ldms_xprt_get(),2,[],https://github.com/ovis-hpc/ovis/pull/807,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/807#issuecomment-926119557,,"While I was investigating the cause of a deadlock on L1 in a 2-level aggregation test with flapped sampler daemons, I found that the ldms_xprt_put() always takes the xprt_list_lock, even though the function does not remove the endpoint from the xprt_list. This was a part of a deadlock between a thread processing a SET_DELETE reply from L2 and another thread sending a SET_DELETE request to L2.
Thread processing a SET_DELETE reply from L2

process_set_delete_reply()
pthread_mutex_lock(&x->lock)
__ldms_free_ctxt()
ldms_xprt_put(x)
pthread_mutex_lock(&xprt_list_lock) regardless of ref_count

Thread sending a SET_DELETE request to L2

ldms_set_delete()
__ldms_dir_del_set()
pthread_mutex_lock(&xprt_list_lock) to iterate send the SET_DELETE request to any clients that have sent a dir_request.
ldms_xprt_set_delete()
pthread_mutex_lock(&x->lock) to create a SET_DELETE request context

In this patch, I changed ldms_xprt_put() so that it would take the xprt_list_lock only when removing the endpoint from the xprt_list. I was the one who made ldms_xprt_put() to always take the xprt_list_lock. I think it was the wrong fix to the problem that ldms_xprt took a reference after it has reached 0. If this happens, it means there is a bug somewhere.  The change in ldms_xprt_get() makes sure that we would know it happens.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,808,2021-09-27T18:27:46Z,2021-10-13T16:19:33Z,2021-10-13T16:19:33Z,MERGED,True,606,0,5,https://github.com/aazizo,Darshan store,4,[],https://github.com/ovis-hpc/ovis/pull/808,https://github.com/aazizo,1,https://github.com/ovis-hpc/ovis/pull/808,This commit contains the darshan SOS store files and man page,This commit contains the darshan SOS store files and man page,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,808,2021-09-27T18:27:46Z,2021-10-13T16:19:33Z,2021-10-13T16:19:33Z,MERGED,True,606,0,5,https://github.com/aazizo,Darshan store,4,[],https://github.com/ovis-hpc/ovis/pull/808,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/808#issuecomment-929583896,This commit contains the darshan SOS store files and man page,@aazizo this patch is failing the default tests. Please fix the trailing space issue and re-submit.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,809,2021-09-27T20:59:14Z,2021-09-27T22:49:07Z,2021-09-27T22:49:07Z,MERGED,True,8,1,1,https://github.com/narategithub,Fix SIGSEGV in zap_rdma __ep_flush() path,1,[],https://github.com/ovis-hpc/ovis/pull/809,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/809,"__ep_flush() may be called before cq_channel is created. Hence, it
shall check if cq_channel is not NULL before trying to reap the cq
event from the channel in the flush path. In addition, __ep_flush()
should reap the event from the channel directly instead of calling
z_rdma_handle_cq_event() which will re-arm the channel that we are
flushing.","__ep_flush() may be called before cq_channel is created. Hence, it
shall check if cq_channel is not NULL before trying to reap the cq
event from the channel in the flush path. In addition, __ep_flush()
should reap the event from the channel directly instead of calling
z_rdma_handle_cq_event() which will re-arm the channel that we are
flushing.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,809,2021-09-27T20:59:14Z,2021-09-27T22:49:07Z,2021-09-27T22:49:07Z,MERGED,True,8,1,1,https://github.com/narategithub,Fix SIGSEGV in zap_rdma __ep_flush() path,1,[],https://github.com/ovis-hpc/ovis/pull/809,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/809#issuecomment-928278580,"__ep_flush() may be called before cq_channel is created. Hence, it
shall check if cq_channel is not NULL before trying to reap the cq
event from the channel in the flush path. In addition, __ep_flush()
should reap the event from the channel directly instead of calling
z_rdma_handle_cq_event() which will re-arm the channel that we are
flushing.","@tom95858
The change passed the end-to-end test https://github.com/ovis-hpc/ldms-test/tree/master/scalability with moderate scale setting:
40 samplers over 4 hosts (10 samplers/host) ==> 4 L1 on 2 hosts (2/host) ==> 2 L2 on 1 host ==> 1 L3 w/ SOS.
I also manually tested ldms_ls -x rdma -p 10000 -h cygnus-01-iw but with no ldmsd running on cygnus-01. ldms_ls yielded Connection failed/rejected. as expected. FYI, it did have segmentation fault before this PR.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,809,2021-09-27T20:59:14Z,2021-09-27T22:49:07Z,2021-09-27T22:49:07Z,MERGED,True,8,1,1,https://github.com/narategithub,Fix SIGSEGV in zap_rdma __ep_flush() path,1,[],https://github.com/ovis-hpc/ovis/pull/809,https://github.com/narategithub,3,https://github.com/ovis-hpc/ovis/pull/809#issuecomment-928280068,"__ep_flush() may be called before cq_channel is created. Hence, it
shall check if cq_channel is not NULL before trying to reap the cq
event from the channel in the flush path. In addition, __ep_flush()
should reap the event from the channel directly instead of calling
z_rdma_handle_cq_event() which will re-arm the channel that we are
flushing.",Forgot to mention that I'm adding a script in ldms-test to cover this.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,810,2021-09-28T17:47:50Z,2021-09-28T18:45:19Z,2022-01-18T04:07:28Z,MERGED,True,6,6,1,https://github.com/nichamon,Get rid of markdown characters in the github action scripts,1,[],https://github.com/ovis-hpc/ovis/pull/810,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/810,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,810,2021-09-28T17:47:50Z,2021-09-28T18:45:19Z,2022-01-18T04:07:28Z,MERGED,True,6,6,1,https://github.com/nichamon,Get rid of markdown characters in the github action scripts,1,[],https://github.com/ovis-hpc/ovis/pull/810,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/810#issuecomment-929506517,,What is the reason for this change?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,810,2021-09-28T17:47:50Z,2021-09-28T18:45:19Z,2022-01-18T04:07:28Z,MERGED,True,6,6,1,https://github.com/nichamon,Get rid of markdown characters in the github action scripts,1,[],https://github.com/ovis-hpc/ovis/pull/810,https://github.com/narategithub,3,https://github.com/ovis-hpc/ovis/pull/810#issuecomment-929527320,,"@tom95858
In Markdown, the text between backticks ""`"" are formatted as fixed width (e.g. term). I accidentally put them into the string in the test script to emphasize some terms. However, backticks has a special meaning in bash. It is equivalent to $(), which takes the text between backticks or parentheses and execute it as a command. For example,
# These two are equivalent
$ echo ""I am `whoami`""
$ echo ""I am $(whoami)""
As such, the text meant to be emphasized in the error message are evaluated as a command, which is a bug. We have not seen this before because the tests passed and the error string was not evaluated. @nichamon found this out because one of the test script failed and the error message got evaluated.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,811,2021-09-29T14:58:45Z,2021-10-13T19:00:29Z,2021-10-13T19:00:29Z,MERGED,True,6,0,1,https://github.com/baallan,add conditional checks to autogen.sh enabling pre-commit hook,1,[],https://github.com/ovis-hpc/ovis/pull/811,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/811,"Does nothing if there is already a pre-commit hook installed.
Enables the pre-commit.sample hook otherwise when git is present.
This makes our normal workflow (clone; ./autogen.sh) support
automatic trailing whitespace warnings at local commit instead
of at PR time.","Does nothing if there is already a pre-commit hook installed.
Enables the pre-commit.sample hook otherwise when git is present.
This makes our normal workflow (clone; ./autogen.sh) support
automatic trailing whitespace warnings at local commit instead
of at PR time.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,813,2021-10-04T15:16:27Z,2021-10-04T18:13:20Z,2021-10-04T18:13:20Z,MERGED,True,22,11,2,https://github.com/narategithub,Fix ldms-munge over zap_ugni,2,[],https://github.com/ovis-hpc/ovis/pull/813,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/813,This has been manually tested with ldmsd - ldms_ls with munge authentication.,This has been manually tested with ldmsd - ldms_ls with munge authentication.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,814,2021-10-04T15:17:20Z,2021-10-05T15:03:09Z,2021-10-05T15:03:10Z,MERGED,True,8,0,1,https://github.com/narategithub,Fix zap_ugni disconnection handling while receiving a socket message,1,[],https://github.com/ovis-hpc/ovis/pull/814,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/814,"z_ugni_sock_recv() did not handle the case that read() returns 0
(peer close) when receiving the first message on socket to setup the
GNI connection.","z_ugni_sock_recv() did not handle the case that read() returns 0
(peer close) when receiving the first message on socket to setup the
GNI connection.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,815,2021-10-04T21:14:01Z,2021-10-05T22:18:29Z,2021-10-05T22:18:29Z,MERGED,True,323,118,2,https://github.com/narategithub,zap_ugni - remove endpoint-per-thread limitation,1,[],https://github.com/ovis-hpc/ovis/pull/815,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/815,"NOTE: This passed ldms-test/scalability with ugni transport on
voltrino:

160 sampler daemons spread among 16 compute nodes

16 sets per sampler daemon
2560 sets total


4 L1 aggregators spread between 2 nodes

each take 1/4 of the sampler daemons


2 L2 aggregators on one compute nodes

each take 1/2 of the L1 daemons


1 L3 aggregator with SOS","NOTE: This passed ldms-test/scalability with ugni transport on
voltrino:

160 sampler daemons spread among 16 compute nodes

16 sets per sampler daemon
2560 sets total


4 L1 aggregators spread between 2 nodes

each take 1/4 of the sampler daemons


2 L2 aggregators on one compute nodes

each take 1/2 of the L1 daemons


1 L3 aggregator with SOS",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,816,2021-10-05T04:53:03Z,2021-10-05T22:09:44Z,2021-10-05T22:09:44Z,MERGED,True,2,0,1,https://github.com/narategithub,Add a weekly test status shield/badge to README.md,1,[],https://github.com/ovis-hpc/ovis/pull/816,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/816,"Add a weekly test status shield (or badge) to README.md. The shield is
an SVG image generated by https://shields.io and the JSON data
provided by https://github.com/ldms-test/weekly-report weekly report
repository. When the weekly script is run, the new results is published
to the weekly report repository and the shield is automatically updated
(after 5-minute github image cache expiration) without altering the URL
(no changes to README.md).","Add a weekly test status shield (or badge) to README.md. The shield is
an SVG image generated by https://shields.io and the JSON data
provided by https://github.com/ldms-test/weekly-report weekly report
repository. When the weekly script is run, the new results is published
to the weekly report repository and the shield is automatically updated
(after 5-minute github image cache expiration) without altering the URL
(no changes to README.md).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,816,2021-10-05T04:53:03Z,2021-10-05T22:09:44Z,2021-10-05T22:09:44Z,MERGED,True,2,0,1,https://github.com/narategithub,Add a weekly test status shield/badge to README.md,1,[],https://github.com/ovis-hpc/ovis/pull/816,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/816#issuecomment-934060965,"Add a weekly test status shield (or badge) to README.md. The shield is
an SVG image generated by https://shields.io and the JSON data
provided by https://github.com/ldms-test/weekly-report weekly report
repository. When the weekly script is run, the new results is published
to the weekly report repository and the shield is automatically updated
(after 5-minute github image cache expiration) without altering the URL
(no changes to README.md).",Please see https://github.com/narategithub/ovis/tree/weekly-test-shield#readme as an example of the shield/badge added by this pull request.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,817,2021-10-06T23:02:18Z,2021-10-19T17:00:42Z,2021-10-19T17:00:42Z,CLOSED,False,84,19,3,https://github.com/narategithub,zap_ugni resource configuration by environment variables,4,[],https://github.com/ovis-hpc/ovis/pull/817,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/817,"zap_ugni consumed too much resources for message buffers on the sampler
daemon. The message buffers were allocated in a big chunk in advanced to
accomodate a number of future endpoints. This may be good for an
aggregator as a chunk of send/recv memory requires a memory registration
and allocate many of the small chunks may underlying resources for
memory registration. However, enforcing a smaller number of large chunk
waste the memory on the sampler daemon unnecessarily, as it expected
only a few connections, not thousands, at a time.

This patch intoduces environment variables so that users can modify the
chunk size appropriately. The default values favor sampler daemon as
changing sampler daemon in production is harder than modifying the
aggregator configuration as we have many more sampler daemons in
production than the aggregator daemons.","zap_ugni consumed too much resources for message buffers on the sampler
daemon. The message buffers were allocated in a big chunk in advanced to
accomodate a number of future endpoints. This may be good for an
aggregator as a chunk of send/recv memory requires a memory registration
and allocate many of the small chunks may underlying resources for
memory registration. However, enforcing a smaller number of large chunk
waste the memory on the sampler daemon unnecessarily, as it expected
only a few connections, not thousands, at a time.

This patch intoduces environment variables so that users can modify the
chunk size appropriately. The default values favor sampler daemon as
changing sampler daemon in production is harder than modifying the
aggregator configuration as we have many more sampler daemons in
production than the aggregator daemons.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,817,2021-10-06T23:02:18Z,2021-10-19T17:00:42Z,2021-10-19T17:00:42Z,CLOSED,False,84,19,3,https://github.com/narategithub,zap_ugni resource configuration by environment variables,4,[],https://github.com/ovis-hpc/ovis/pull/817,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/817#issuecomment-937306804,"zap_ugni consumed too much resources for message buffers on the sampler
daemon. The message buffers were allocated in a big chunk in advanced to
accomodate a number of future endpoints. This may be good for an
aggregator as a chunk of send/recv memory requires a memory registration
and allocate many of the small chunks may underlying resources for
memory registration. However, enforcing a smaller number of large chunk
waste the memory on the sampler daemon unnecessarily, as it expected
only a few connections, not thousands, at a time.

This patch intoduces environment variables so that users can modify the
chunk size appropriately. The default values favor sampler daemon as
changing sampler daemon in production is harder than modifying the
aggregator configuration as we have many more sampler daemons in
production than the aggregator daemons.",@nichamon here you are.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,817,2021-10-06T23:02:18Z,2021-10-19T17:00:42Z,2021-10-19T17:00:42Z,CLOSED,False,84,19,3,https://github.com/narategithub,zap_ugni resource configuration by environment variables,4,[],https://github.com/ovis-hpc/ovis/pull/817,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/817#issuecomment-938362572,"zap_ugni consumed too much resources for message buffers on the sampler
daemon. The message buffers were allocated in a big chunk in advanced to
accomodate a number of future endpoints. This may be good for an
aggregator as a chunk of send/recv memory requires a memory registration
and allocate many of the small chunks may underlying resources for
memory registration. However, enforcing a smaller number of large chunk
waste the memory on the sampler daemon unnecessarily, as it expected
only a few connections, not thousands, at a time.

This patch intoduces environment variables so that users can modify the
chunk size appropriately. The default values favor sampler daemon as
changing sampler daemon in production is harder than modifying the
aggregator configuration as we have many more sampler daemons in
production than the aggregator daemons.","@narategithub I would prefer an implementation that re-mapped these buffers as the endpoint count grows. I understand that we wish to minimize the uGNI memory registration handles, however, having the administrator have to guess this value creates configuration hardship I think, especially when diagnosing why connections fail at run-time. I would rather pursue an approach where the msg space grows dynamically without the administrator having to guess the correct value. These buffer handles are not advertised to peers I don't believe, so I think that's it is possible to quiesce active connections and remap their RQ buffers.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,817,2021-10-06T23:02:18Z,2021-10-19T17:00:42Z,2021-10-19T17:00:42Z,CLOSED,False,84,19,3,https://github.com/narategithub,zap_ugni resource configuration by environment variables,4,[],https://github.com/ovis-hpc/ovis/pull/817,https://github.com/narategithub,4,https://github.com/ovis-hpc/ovis/pull/817#issuecomment-938697921,"zap_ugni consumed too much resources for message buffers on the sampler
daemon. The message buffers were allocated in a big chunk in advanced to
accomodate a number of future endpoints. This may be good for an
aggregator as a chunk of send/recv memory requires a memory registration
and allocate many of the small chunks may underlying resources for
memory registration. However, enforcing a smaller number of large chunk
waste the memory on the sampler daemon unnecessarily, as it expected
only a few connections, not thousands, at a time.

This patch intoduces environment variables so that users can modify the
chunk size appropriately. The default values favor sampler daemon as
changing sampler daemon in production is harder than modifying the
aggregator configuration as we have many more sampler daemons in
production than the aggregator daemons.","@tom95858 I think the buffer is advertised. The message send is actually RDMA PUT, which needs both local_mem_hndl (GNI memory handle of our send buf) and remote_mem_hndl (GNI memory handle of peer's recv buf).

  
    
      ovis/lib/src/zap/ugni/zap_ugni.c
    
    
        Lines 1757 to 1766
      in
      febb7f4
    
  
  
    

        
          
           /* prep post descriptor */ 
        

        
          
           wr->send_wr->post.type = GNI_POST_RDMA_PUT; 
        

        
          
           wr->send_wr->post.cq_mode = GNI_CQMODE_GLOBAL_EVENT | GNI_CQMODE_REMOTE_EVENT; 
        

        
          
           wr->send_wr->post.dlvr_mode = GNI_DLVMODE_IN_ORDER; 
        

        
          
           wr->send_wr->post.local_addr = (uint64_t)sbuf->bytes; 
        

        
          
           wr->send_wr->post.local_mem_hndl = uep->mbuf->chunk->mbuf_mh; 
        

        
          
           rbuf_off = mbuf->rbuf[idx].bytes - (char*)mbuf; 
        

        
          
           wr->send_wr->post.remote_addr = uep->peer_ep_desc.mbuf_addr + rbuf_off; 
        

        
          
           wr->send_wr->post.remote_mem_hndl = uep->peer_ep_desc.mbuf_mh; 
        

        
          
           wr->send_wr->post.length = sizeof(*sbuf); 
        
    
  


To achieve automatic remapping, we would have to let all the peers in that pool know and wait for their acknowledgement ... not sure if we wanna go this route.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,817,2021-10-06T23:02:18Z,2021-10-19T17:00:42Z,2021-10-19T17:00:42Z,CLOSED,False,84,19,3,https://github.com/narategithub,zap_ugni resource configuration by environment variables,4,[],https://github.com/ovis-hpc/ovis/pull/817,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/817#issuecomment-946920936,"zap_ugni consumed too much resources for message buffers on the sampler
daemon. The message buffers were allocated in a big chunk in advanced to
accomodate a number of future endpoints. This may be good for an
aggregator as a chunk of send/recv memory requires a memory registration
and allocate many of the small chunks may underlying resources for
memory registration. However, enforcing a smaller number of large chunk
waste the memory on the sampler daemon unnecessarily, as it expected
only a few connections, not thousands, at a time.

This patch intoduces environment variables so that users can modify the
chunk size appropriately. The default values favor sampler daemon as
changing sampler daemon in production is harder than modifying the
aggregator configuration as we have many more sampler daemons in
production than the aggregator daemons.",We are reverting the socket changes that required this configuration.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,818,2021-10-07T16:58:33Z,2021-10-07T17:35:05Z,2022-05-26T20:07:16Z,MERGED,True,29,17,5,https://github.com/nichamon,Initialize socklen before calling zap_get_name(),1,[],https://github.com/ovis-hpc/ovis/pull/818,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/818,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,818,2021-10-07T16:58:33Z,2021-10-07T17:35:05Z,2022-05-26T20:07:16Z,MERGED,True,29,17,5,https://github.com/nichamon,Initialize socklen before calling zap_get_name(),1,[],https://github.com/ovis-hpc/ovis/pull/818,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/818#issuecomment-937984408,,"@tom95858 Narate tested ldms_ls to an LDMSD on Voltrino with munge. ldms_ls reported expecting results as follows.
ldmsd -x ugni:10000 -x sock:10001 -a munge -c samplerd.conf

ldms_ls -x ugni -p 10000 -a munge : ldms_ls reported the set.
ldms_ls -x ugni -p 10000 : LDMSD rejected the connection request.
ldms_ls -x sock -p 10001 -a munge : ldms_ls reported the set.
ldms_ls -x sock -p 10001 : LDMSD rejected the connection request.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,818,2021-10-07T16:58:33Z,2021-10-07T17:35:05Z,2022-05-26T20:07:16Z,MERGED,True,29,17,5,https://github.com/nichamon,Initialize socklen before calling zap_get_name(),1,[],https://github.com/ovis-hpc/ovis/pull/818,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/818#issuecomment-937987752,,@tom95858 I forgot to push my local branch to Github before I made the previous comment. Narate tested the latest patch already (commit ID  5a4dc5b).,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,819,2021-10-07T20:08:12Z,2021-10-08T18:43:08Z,2021-12-06T20:27:24Z,MERGED,True,42,25,6,https://github.com/tom95858,Voltrino fixes,2,[],https://github.com/ovis-hpc/ovis/pull/819,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/819,These changes handle an issue with a build-tool upgrade on Voltrino creating additional warnings in the cray_system_sampler and removal of the empty ovis_ref library.,These changes handle an issue with a build-tool upgrade on Voltrino creating additional warnings in the cray_system_sampler and removal of the empty ovis_ref library.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,820,2021-10-12T15:18:45Z,2021-10-12T21:34:28Z,2021-10-12T21:34:28Z,MERGED,True,1,0,1,https://github.com/narategithub,Fix ldms_ls SIGSEGV at exit with OFED librdmacm,1,[],https://github.com/ovis-hpc/ovis/pull/820,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/820,"rdma_cma_fini() is in atexit list in OFED librdmacm. At the end of
ldms_ls, exit() is called and subsequently rdma_cma_fini() and
ibv_close_device(). This raced with the zap_rdma thread as it was
also tearing down the endpoint used by ldms_ls.
To avoid the race, this patch adds a call to ldms_xprt_term() to
terminate all zap threads before exit() at the end of ldms_ls.","rdma_cma_fini() is in atexit list in OFED librdmacm. At the end of
ldms_ls, exit() is called and subsequently rdma_cma_fini() and
ibv_close_device(). This raced with the zap_rdma thread as it was
also tearing down the endpoint used by ldms_ls.
To avoid the race, this patch adds a call to ldms_xprt_term() to
terminate all zap threads before exit() at the end of ldms_ls.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,821,2021-10-14T22:55:38Z,2021-10-14T23:57:36Z,2021-10-14T23:57:36Z,MERGED,True,154,14,3,https://github.com/baallan,add man page for ldmsd_stream_publish and -r/-i options,1,[],https://github.com/ovis-hpc/ovis/pull/821,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/821,"Options -r count -i delay allow the publisher to repeat file input
to the publishing target count times with a delay between repeats.","Options -r count -i delay allow the publisher to repeat file input
to the publishing target count times with a delay between repeats.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,821,2021-10-14T22:55:38Z,2021-10-14T23:57:36Z,2021-10-14T23:57:36Z,MERGED,True,154,14,3,https://github.com/baallan,add man page for ldmsd_stream_publish and -r/-i options,1,[],https://github.com/ovis-hpc/ovis/pull/821,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/821#issuecomment-943823508,"Options -r count -i delay allow the publisher to repeat file input
to the publishing target count times with a delay between repeats.","@tom95858 this adds the stream publish iterator feature used to drive tests that turn up the deadlock in #777.
This will probably need rebasing after #777 is merged, since it also adds the man page.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,823,2021-10-19T19:17:55Z,2021-12-06T20:35:50Z,2021-12-06T20:35:51Z,MERGED,True,20,5,1,https://github.com/baallan,fix error messages for truncate and listen functions in ldmsd.c,1,[],https://github.com/ovis-hpc/ovis/pull/823,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/823,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,823,2021-10-19T19:17:55Z,2021-12-06T20:35:50Z,2021-12-06T20:35:51Z,MERGED,True,20,5,1,https://github.com/baallan,fix error messages for truncate and listen functions in ldmsd.c,1,[],https://github.com/ovis-hpc/ovis/pull/823,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/823#issuecomment-986976110,,@tom95858 please review this.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,824,2021-10-19T20:20:57Z,2021-12-14T23:38:02Z,2021-12-14T23:38:02Z,CLOSED,False,110,26,2,https://github.com/baallan,fix multiple -x handling and listener setup messages on ldmsd,1,[],https://github.com/ovis-hpc/ovis/pull/824,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/824,"To make -x options handle multiple listeners independently, the optional fields in a listener specification are extended to:
XPRT:PORT[:[host]:[AUTH[:authopts]]]
Without this patch, all -x defined listeners are tied to the -a (default_auth) configuration.
Where the AUTH field is omitted, the default auth method (as possibly redefined with the -a argument) will be used.
Implementation: where AUTH is the name of an authentication plugin specified explicitly with -x, it will cause the equivalent of
auth_add name=AUTH plugin=AUTH 

with authopts also included if provided.
This enables listeners to be defined in the systemd service file (or elsewhere) such as:
ldmsd -x rdma:411:host-ib0:ovis:conf=/file -x sock:412::munge

so that a daemon can be started and listening without any input file needed to define listeners and authentications.","To make -x options handle multiple listeners independently, the optional fields in a listener specification are extended to:
XPRT:PORT[:[host]:[AUTH[:authopts]]]
Without this patch, all -x defined listeners are tied to the -a (default_auth) configuration.
Where the AUTH field is omitted, the default auth method (as possibly redefined with the -a argument) will be used.
Implementation: where AUTH is the name of an authentication plugin specified explicitly with -x, it will cause the equivalent of
auth_add name=AUTH plugin=AUTH 

with authopts also included if provided.
This enables listeners to be defined in the systemd service file (or elsewhere) such as:
ldmsd -x rdma:411:host-ib0:ovis:conf=/file -x sock:412::munge

so that a daemon can be started and listening without any input file needed to define listeners and authentications.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,824,2021-10-19T20:20:57Z,2021-12-14T23:38:02Z,2021-12-14T23:38:02Z,CLOSED,False,110,26,2,https://github.com/baallan,fix multiple -x handling and listener setup messages on ldmsd,1,[],https://github.com/ovis-hpc/ovis/pull/824,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/824#issuecomment-947104280,"To make -x options handle multiple listeners independently, the optional fields in a listener specification are extended to:
XPRT:PORT[:[host]:[AUTH[:authopts]]]
Without this patch, all -x defined listeners are tied to the -a (default_auth) configuration.
Where the AUTH field is omitted, the default auth method (as possibly redefined with the -a argument) will be used.
Implementation: where AUTH is the name of an authentication plugin specified explicitly with -x, it will cause the equivalent of
auth_add name=AUTH plugin=AUTH 

with authopts also included if provided.
This enables listeners to be defined in the systemd service file (or elsewhere) such as:
ldmsd -x rdma:411:host-ib0:ovis:conf=/file -x sock:412::munge

so that a daemon can be started and listening without any input file needed to define listeners and authentications.","The pull test fails on this are caused by lack of #825 rather than by this patch. After 825 is merged, this should pass the pull checks.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,824,2021-10-19T20:20:57Z,2021-12-14T23:38:02Z,2021-12-14T23:38:02Z,CLOSED,False,110,26,2,https://github.com/baallan,fix multiple -x handling and listener setup messages on ldmsd,1,[],https://github.com/ovis-hpc/ovis/pull/824,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/824#issuecomment-987214012,"To make -x options handle multiple listeners independently, the optional fields in a listener specification are extended to:
XPRT:PORT[:[host]:[AUTH[:authopts]]]
Without this patch, all -x defined listeners are tied to the -a (default_auth) configuration.
Where the AUTH field is omitted, the default auth method (as possibly redefined with the -a argument) will be used.
Implementation: where AUTH is the name of an authentication plugin specified explicitly with -x, it will cause the equivalent of
auth_add name=AUTH plugin=AUTH 

with authopts also included if provided.
This enables listeners to be defined in the systemd service file (or elsewhere) such as:
ldmsd -x rdma:411:host-ib0:ovis:conf=/file -x sock:412::munge

so that a daemon can be started and listening without any input file needed to define listeners and authentications.","@tom95858 after #825 is merged this would pass all the checks.
if both 825 and 826 are merged, I will  need to refactor this slightly to account for 826.
also, host must always come last because of ipv6, which must be accounted for in the refactoring.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,824,2021-10-19T20:20:57Z,2021-12-14T23:38:02Z,2021-12-14T23:38:02Z,CLOSED,False,110,26,2,https://github.com/baallan,fix multiple -x handling and listener setup messages on ldmsd,1,[],https://github.com/ovis-hpc/ovis/pull/824,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/824#issuecomment-994141044,"To make -x options handle multiple listeners independently, the optional fields in a listener specification are extended to:
XPRT:PORT[:[host]:[AUTH[:authopts]]]
Without this patch, all -x defined listeners are tied to the -a (default_auth) configuration.
Where the AUTH field is omitted, the default auth method (as possibly redefined with the -a argument) will be used.
Implementation: where AUTH is the name of an authentication plugin specified explicitly with -x, it will cause the equivalent of
auth_add name=AUTH plugin=AUTH 

with authopts also included if provided.
This enables listeners to be defined in the systemd service file (or elsewhere) such as:
ldmsd -x rdma:411:host-ib0:ovis:conf=/file -x sock:412::munge

so that a daemon can be started and listening without any input file needed to define listeners and authentications.",creating a new version of this shortly that handles ipv6 syntax.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,825,2021-10-19T20:58:33Z,2021-12-10T02:48:56Z,2021-12-10T02:48:56Z,MERGED,True,1923,1207,14,https://github.com/baallan,add missing file cleanup from test_sps.sh,3,[],https://github.com/ovis-hpc/ovis/pull/825,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/825,this removes test output files which in some circumstances make distcheck fail and block other unrelated pull requests.,this removes test output files which in some circumstances make distcheck fail and block other unrelated pull requests.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,825,2021-10-19T20:58:33Z,2021-12-10T02:48:56Z,2021-12-10T02:48:56Z,MERGED,True,1923,1207,14,https://github.com/baallan,add missing file cleanup from test_sps.sh,3,[],https://github.com/ovis-hpc/ovis/pull/825,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/825#issuecomment-949018257,this removes test output files which in some circumstances make distcheck fail and block other unrelated pull requests.,"@baallan, is this related to the ldms_sps library? That library needs to be removed.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,825,2021-10-19T20:58:33Z,2021-12-10T02:48:56Z,2021-12-10T02:48:56Z,MERGED,True,1923,1207,14,https://github.com/baallan,add missing file cleanup from test_sps.sh,3,[],https://github.com/ovis-hpc/ovis/pull/825,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/825#issuecomment-949080287,this removes test output files which in some circumstances make distcheck fail and block other unrelated pull requests.,"@tom95858 has the functionality of ldms_sps been moved into another functionality of the stream/xprt API that simplifies the numerously duplicated and complex chunks of stream publishing code that are going into kokkos, calipre, darshan, etc?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,825,2021-10-19T20:58:33Z,2021-12-10T02:48:56Z,2021-12-10T02:48:56Z,MERGED,True,1923,1207,14,https://github.com/baallan,add missing file cleanup from test_sps.sh,3,[],https://github.com/ovis-hpc/ovis/pull/825,https://github.com/tom95858,4,https://github.com/ovis-hpc/ovis/pull/825#issuecomment-949137826,this removes test output files which in some circumstances make distcheck fail and block other unrelated pull requests.,Please remove the ldms_sps library and the associated files.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,825,2021-10-19T20:58:33Z,2021-12-10T02:48:56Z,2021-12-10T02:48:56Z,MERGED,True,1923,1207,14,https://github.com/baallan,add missing file cleanup from test_sps.sh,3,[],https://github.com/ovis-hpc/ovis/pull/825,https://github.com/baallan,5,https://github.com/ovis-hpc/ovis/pull/825#issuecomment-949739912,this removes test output files which in some circumstances make distcheck fail and block other unrelated pull requests.,"@tom95858 the library is in use by other code in the tree. I can relocate/rename the library, but it cannot be removed.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,825,2021-10-19T20:58:33Z,2021-12-10T02:48:56Z,2021-12-10T02:48:56Z,MERGED,True,1923,1207,14,https://github.com/baallan,add missing file cleanup from test_sps.sh,3,[],https://github.com/ovis-hpc/ovis/pull/825,https://github.com/tom95858,6,https://github.com/ovis-hpc/ovis/pull/825#issuecomment-950039085,this removes test output files which in some circumstances make distcheck fail and block other unrelated pull requests.,"@baallan, You may at your option refactor the netlink sampler to use the ldmsd_streams API, or remove the netlink sampler along with this library. I believe that this is the only sampler that uses this library and was how the ldms_sps library was originally added.
Also should you choose to refactor the netlink sampler, please correct the copyright, it does not contain the appropriate attributions.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,825,2021-10-19T20:58:33Z,2021-12-10T02:48:56Z,2021-12-10T02:48:56Z,MERGED,True,1923,1207,14,https://github.com/baallan,add missing file cleanup from test_sps.sh,3,[],https://github.com/ovis-hpc/ovis/pull/825,https://github.com/baallan,7,https://github.com/ovis-hpc/ovis/pull/825#issuecomment-951068749,this removes test output files which in some circumstances make distcheck fail and block other unrelated pull requests.,"re the copyright notice, are you referring to any problem other than the paragraph to be removed in ldmsd.c about: DE-AC04-xxxxx (The old lockmart contract #)?
@tom95858 oh, nevermind. I see the missing ogc line in netlink; yeah, the jbuf formatter came from ogc examples.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,825,2021-10-19T20:58:33Z,2021-12-10T02:48:56Z,2021-12-10T02:48:56Z,MERGED,True,1923,1207,14,https://github.com/baallan,add missing file cleanup from test_sps.sh,3,[],https://github.com/ovis-hpc/ovis/pull/825,https://github.com/baallan,8,https://github.com/ovis-hpc/ovis/pull/825#issuecomment-985845014,this removes test output files which in some circumstances make distcheck fail and block other unrelated pull requests.,@tom95858 I have removed the ldms_sps library from the ldmsd/ directory and cleaned up related problems with distclean.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,825,2021-10-19T20:58:33Z,2021-12-10T02:48:56Z,2021-12-10T02:48:56Z,MERGED,True,1923,1207,14,https://github.com/baallan,add missing file cleanup from test_sps.sh,3,[],https://github.com/ovis-hpc/ovis/pull/825,https://github.com/baallan,9,https://github.com/ovis-hpc/ovis/pull/825#issuecomment-989279917,this removes test output files which in some circumstances make distcheck fail and block other unrelated pull requests.,@tom95858 please merge the revised #825. It is needed for scale testing on voltrino and eclipse.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,826,2021-10-22T20:13:36Z,2021-12-14T18:50:22Z,2022-01-18T04:07:00Z,MERGED,True,825,380,10,https://github.com/nichamon,Support LDMSD cmd-line options in configuration files,4,[],https://github.com/ovis-hpc/ovis/pull/826,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/826,"To specify a cmd-line option in a configuration file, use the command
'option'. For example,
option l=/var/log/ldmsd.log v=INFO
option m=2gb
A configuration file example is at ldms/examples/cmdline-opts/ldmsd_w_cmdline_opts.conf.","To specify a cmd-line option in a configuration file, use the command
'option'. For example,
option l=/var/log/ldmsd.log v=INFO
option m=2gb
A configuration file example is at ldms/examples/cmdline-opts/ldmsd_w_cmdline_opts.conf.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,826,2021-10-22T20:13:36Z,2021-12-14T18:50:22Z,2022-01-18T04:07:00Z,MERGED,True,825,380,10,https://github.com/nichamon,Support LDMSD cmd-line options in configuration files,4,[],https://github.com/ovis-hpc/ovis/pull/826,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/826#issuecomment-949989979,"To specify a cmd-line option in a configuration file, use the command
'option'. For example,
option l=/var/log/ldmsd.log v=INFO
option m=2gb
A configuration file example is at ldms/examples/cmdline-opts/ldmsd_w_cmdline_opts.conf.",This is a bizarre feature. What is the use-case?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,826,2021-10-22T20:13:36Z,2021-12-14T18:50:22Z,2022-01-18T04:07:00Z,MERGED,True,825,380,10,https://github.com/nichamon,Support LDMSD cmd-line options in configuration files,4,[],https://github.com/ovis-hpc/ovis/pull/826,https://github.com/valleydlr,3,https://github.com/ovis-hpc/ovis/pull/826#issuecomment-949992379,"To specify a cmd-line option in a configuration file, use the command
'option'. For example,
option l=/var/log/ldmsd.log v=INFO
option m=2gb
A configuration file example is at ldms/examples/cmdline-opts/ldmsd_w_cmdline_opts.conf.",@baallan This enables one to put traditional command line options into a configuration file.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,826,2021-10-22T20:13:36Z,2021-12-14T18:50:22Z,2022-01-18T04:07:00Z,MERGED,True,825,380,10,https://github.com/nichamon,Support LDMSD cmd-line options in configuration files,4,[],https://github.com/ovis-hpc/ovis/pull/826,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/826#issuecomment-949997521,"To specify a cmd-line option in a configuration file, use the command
'option'. For example,
option l=/var/log/ldmsd.log v=INFO
option m=2gb
A configuration file example is at ldms/examples/cmdline-opts/ldmsd_w_cmdline_opts.conf.","@valleydlr you stated what it does. but why?  In production it doesn't buy us anything because all that just goes in a systemd .service file. So what is the new use-case?
If there's something compelling, then I would request that #824 be merged before this refactoring is applied.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,826,2021-10-22T20:13:36Z,2021-12-14T18:50:22Z,2022-01-18T04:07:00Z,MERGED,True,825,380,10,https://github.com/nichamon,Support LDMSD cmd-line options in configuration files,4,[],https://github.com/ovis-hpc/ovis/pull/826,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/826#issuecomment-950037133,"To specify a cmd-line option in a configuration file, use the command
'option'. For example,
option l=/var/log/ldmsd.log v=INFO
option m=2gb
A configuration file example is at ldms/examples/cmdline-opts/ldmsd_w_cmdline_opts.conf.","This is a bizarre feature. What is the use-case?

This feature allows for the configuration of listeners, log file locations, log file levels, etc... from a configuration file, and by extension ldmsd_controller, and maestro. This feature was requested by Sandia in 2019/2020. It has been back-ported from master to OVIS-4 as part of our efforts to retain backward compatibility while continuing to incorporate new features.
WRT to ""bizarre"", please refrain from demeaning language directed at the work product of individuals posting pull requests.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,826,2021-10-22T20:13:36Z,2021-12-14T18:50:22Z,2022-01-18T04:07:00Z,MERGED,True,825,380,10,https://github.com/nichamon,Support LDMSD cmd-line options in configuration files,4,[],https://github.com/ovis-hpc/ovis/pull/826,https://github.com/tom95858,6,https://github.com/ovis-hpc/ovis/pull/826#issuecomment-950037209,"To specify a cmd-line option in a configuration file, use the command
'option'. For example,
option l=/var/log/ldmsd.log v=INFO
option m=2gb
A configuration file example is at ldms/examples/cmdline-opts/ldmsd_w_cmdline_opts.conf.","@nichamon, not all of the pull-request checks succeeded. Could you please resolve/explain these failures and resubmit?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,826,2021-10-22T20:13:36Z,2021-12-14T18:50:22Z,2022-01-18T04:07:00Z,MERGED,True,825,380,10,https://github.com/nichamon,Support LDMSD cmd-line options in configuration files,4,[],https://github.com/ovis-hpc/ovis/pull/826,https://github.com/nichamon,7,https://github.com/ovis-hpc/ovis/pull/826#issuecomment-950056071,"To specify a cmd-line option in a configuration file, use the command
'option'. For example,
option l=/var/log/ldmsd.log v=INFO
option m=2gb
A configuration file example is at ldms/examples/cmdline-opts/ldmsd_w_cmdline_opts.conf.",@tom95858 The failed actions were caused by bugs in my patches. The bugs have been fixed.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,826,2021-10-22T20:13:36Z,2021-12-14T18:50:22Z,2022-01-18T04:07:00Z,MERGED,True,825,380,10,https://github.com/nichamon,Support LDMSD cmd-line options in configuration files,4,[],https://github.com/ovis-hpc/ovis/pull/826,https://github.com/baallan,8,https://github.com/ovis-hpc/ovis/pull/826#issuecomment-950182660,"To specify a cmd-line option in a configuration file, use the command
'option'. For example,
option l=/var/log/ldmsd.log v=INFO
option m=2gb
A configuration file example is at ldms/examples/cmdline-opts/ldmsd_w_cmdline_opts.conf.","WRT to ""bizarre"", please refrain from demeaning language directed at the work product of individuals posting pull requests.

@tom95858 @nichamon my apologies if either of you or ogc is offended. No 'demeaning' was intended. Let's say ""highly unusual feature"" instead. I have never seen another linux software tool that does this kind of shell/getopt syntax being processed in a configuration file with an altogether different key/value oriented syntax. It seems a very odd direction to go, given the maestro work and the overlapping ""listen "" syntax also recently added.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,826,2021-10-22T20:13:36Z,2021-12-14T18:50:22Z,2022-01-18T04:07:00Z,MERGED,True,825,380,10,https://github.com/nichamon,Support LDMSD cmd-line options in configuration files,4,[],https://github.com/ovis-hpc/ovis/pull/826,https://github.com/nichamon,9,https://github.com/ovis-hpc/ovis/pull/826#issuecomment-951245189,"To specify a cmd-line option in a configuration file, use the command
'option'. For example,
option l=/var/log/ldmsd.log v=INFO
option m=2gb
A configuration file example is at ldms/examples/cmdline-opts/ldmsd_w_cmdline_opts.conf.","@tom95858 I made the changes. I updated the ldmsd.man and added help for the option command in ldmsd_controller.
ldmsd_controller > help option",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,826,2021-10-22T20:13:36Z,2021-12-14T18:50:22Z,2022-01-18T04:07:00Z,MERGED,True,825,380,10,https://github.com/nichamon,Support LDMSD cmd-line options in configuration files,4,[],https://github.com/ovis-hpc/ovis/pull/826,https://github.com/nichamon,10,https://github.com/ovis-hpc/ovis/pull/826#issuecomment-952341846,"To specify a cmd-line option in a configuration file, use the command
'option'. For example,
option l=/var/log/ldmsd.log v=INFO
option m=2gb
A configuration file example is at ldms/examples/cmdline-opts/ldmsd_w_cmdline_opts.conf.","@nichamon, I think I really like this syntax. Can I please ask you to do one more thing? The ldmsd short option string is incorrect. It includes at a couple ('t', 'f') options that are not implemented and don't do anything. Could you please comb through the usage message and the short options string to make sure that we're consistent? Also, the deprecated options list is incomplete in the usage message. I'm inclined to remove it.

I will go through the FMT, the usage, the loop thru the options, and the man page. I'll make additional commit in this pull request.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,826,2021-10-22T20:13:36Z,2021-12-14T18:50:22Z,2022-01-18T04:07:00Z,MERGED,True,825,380,10,https://github.com/nichamon,Support LDMSD cmd-line options in configuration files,4,[],https://github.com/ovis-hpc/ovis/pull/826,https://github.com/baallan,11,https://github.com/ovis-hpc/ovis/pull/826#issuecomment-952361731,"To specify a cmd-line option in a configuration file, use the command
'option'. For example,
option l=/var/log/ldmsd.log v=INFO
option m=2gb
A configuration file example is at ldms/examples/cmdline-opts/ldmsd_w_cmdline_opts.conf.","@nichamon @tom95858 in the current patch, 2 minor items:
Is there intended to be any relationship between option host_name and the underlying environment variables HOSTNAME, host, or function gethostname? Might it not be better to call this producer_name and document what it defaults to if not supplied?
And maybe add a few more words on what daemon_name is expected to be used for?
Normally there is a daemon instance name supplied (and configurable) at the systemd layer, and it gets prepended in the log messages.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,826,2021-10-22T20:13:36Z,2021-12-14T18:50:22Z,2022-01-18T04:07:00Z,MERGED,True,825,380,10,https://github.com/nichamon,Support LDMSD cmd-line options in configuration files,4,[],https://github.com/ovis-hpc/ovis/pull/826,https://github.com/nichamon,12,https://github.com/ovis-hpc/ovis/pull/826#issuecomment-952486887,"To specify a cmd-line option in a configuration file, use the command
'option'. For example,
option l=/var/log/ldmsd.log v=INFO
option m=2gb
A configuration file example is at ldms/examples/cmdline-opts/ldmsd_w_cmdline_opts.conf.","@tom95858 I removed the unsupported or deprecated options from the FMT list, the usage, and the man page. I also removed the -H option as it is redundant with the -n option. -H is the hostname used by the kernel metric sets, and -n is the daemon name used by the failover feature to verify the buddy name.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,826,2021-10-22T20:13:36Z,2021-12-14T18:50:22Z,2022-01-18T04:07:00Z,MERGED,True,825,380,10,https://github.com/nichamon,Support LDMSD cmd-line options in configuration files,4,[],https://github.com/ovis-hpc/ovis/pull/826,https://github.com/tom95858,13,https://github.com/ovis-hpc/ovis/pull/826#issuecomment-962557362,"To specify a cmd-line option in a configuration file, use the command
'option'. For example,
option l=/var/log/ldmsd.log v=INFO
option m=2gb
A configuration file example is at ldms/examples/cmdline-opts/ldmsd_w_cmdline_opts.conf.",Hi @nichamon is this ready to go?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,826,2021-10-22T20:13:36Z,2021-12-14T18:50:22Z,2022-01-18T04:07:00Z,MERGED,True,825,380,10,https://github.com/nichamon,Support LDMSD cmd-line options in configuration files,4,[],https://github.com/ovis-hpc/ovis/pull/826,https://github.com/nichamon,14,https://github.com/ovis-hpc/ovis/pull/826#issuecomment-962767099,"To specify a cmd-line option in a configuration file, use the command
'option'. For example,
option l=/var/log/ldmsd.log v=INFO
option m=2gb
A configuration file example is at ldms/examples/cmdline-opts/ldmsd_w_cmdline_opts.conf.","Hi @nichamon is this ready to go?

@tom95858 Yes, it is ready.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,826,2021-10-22T20:13:36Z,2021-12-14T18:50:22Z,2022-01-18T04:07:00Z,MERGED,True,825,380,10,https://github.com/nichamon,Support LDMSD cmd-line options in configuration files,4,[],https://github.com/ovis-hpc/ovis/pull/826,https://github.com/nichamon,15,https://github.com/ovis-hpc/ovis/pull/826#issuecomment-978870795,"To specify a cmd-line option in a configuration file, use the command
'option'. For example,
option l=/var/log/ldmsd.log v=INFO
option m=2gb
A configuration file example is at ldms/examples/cmdline-opts/ldmsd_w_cmdline_opts.conf.","@tom95858 I changed the option command so that it takes the options the same format as the command line.
For example,
option -l /path/to/logfile -v ERROR",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,826,2021-10-22T20:13:36Z,2021-12-14T18:50:22Z,2022-01-18T04:07:00Z,MERGED,True,825,380,10,https://github.com/nichamon,Support LDMSD cmd-line options in configuration files,4,[],https://github.com/ovis-hpc/ovis/pull/826,https://github.com/tom95858,16,https://github.com/ovis-hpc/ovis/pull/826#issuecomment-987176200,"To specify a cmd-line option in a configuration file, use the command
'option'. For example,
option l=/var/log/ldmsd.log v=INFO
option m=2gb
A configuration file example is at ldms/examples/cmdline-opts/ldmsd_w_cmdline_opts.conf.","@nichamon, did you address @morrone concern about the hard coding of the array length?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,826,2021-10-22T20:13:36Z,2021-12-14T18:50:22Z,2022-01-18T04:07:00Z,MERGED,True,825,380,10,https://github.com/nichamon,Support LDMSD cmd-line options in configuration files,4,[],https://github.com/ovis-hpc/ovis/pull/826,https://github.com/nichamon,17,https://github.com/ovis-hpc/ovis/pull/826#issuecomment-987700956,"To specify a cmd-line option in a configuration file, use the command
'option'. For example,
option l=/var/log/ldmsd.log v=INFO
option m=2gb
A configuration file example is at ldms/examples/cmdline-opts/ldmsd_w_cmdline_opts.conf.","@nichamon, did you address @morrone concern about the hard coding of the array length?

I put a comment explaining why I picked 11, which is the total number of cmd-line options supported in config files.
I also rebased the code and resolved the conflicts.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,826,2021-10-22T20:13:36Z,2021-12-14T18:50:22Z,2022-01-18T04:07:00Z,MERGED,True,825,380,10,https://github.com/nichamon,Support LDMSD cmd-line options in configuration files,4,[],https://github.com/ovis-hpc/ovis/pull/826,https://github.com/morrone,18,https://github.com/ovis-hpc/ovis/pull/826#issuecomment-988099827,"To specify a cmd-line option in a configuration file, use the command
'option'. For example,
option l=/var/log/ldmsd.log v=INFO
option m=2gb
A configuration file example is at ldms/examples/cmdline-opts/ldmsd_w_cmdline_opts.conf.","@nichamon, did you address @morrone concern about the hard coding of the array length?

I put a comment explaining why I picked 11, which is the total number of cmd-line options supported in config files.

I am not sure that the comment resolved things. I am a bit confused about a few things in the cmd_line_arg_set_handler() function. I'll comment inline.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,826,2021-10-22T20:13:36Z,2021-12-14T18:50:22Z,2022-01-18T04:07:00Z,MERGED,True,825,380,10,https://github.com/nichamon,Support LDMSD cmd-line options in configuration files,4,[],https://github.com/ovis-hpc/ovis/pull/826,https://github.com/nichamon,19,https://github.com/ovis-hpc/ovis/pull/826#issuecomment-990775712,"To specify a cmd-line option in a configuration file, use the command
'option'. For example,
option l=/var/log/ldmsd.log v=INFO
option m=2gb
A configuration file example is at ldms/examples/cmdline-opts/ldmsd_w_cmdline_opts.conf.","@tom95858 @morrone @baallan I got rid of the hard-coded array size.  I count the number of cmd-line tokens and allocate the array accordingly. Parsing through the option string twice shouldn't affect LDMSD setup time significantly.
@morrone  Thanks for the detailed review. The current logic supports  ""--longoption=blah"", and it has been tested. Please let me know if it doesn't work for you.
@baallan

doesn't s need to be freed at some point?
Thanks for catching this.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,826,2021-10-22T20:13:36Z,2021-12-14T18:50:22Z,2022-01-18T04:07:00Z,MERGED,True,825,380,10,https://github.com/nichamon,Support LDMSD cmd-line options in configuration files,4,[],https://github.com/ovis-hpc/ovis/pull/826,https://github.com/morrone,20,https://github.com/ovis-hpc/ovis/pull/826#issuecomment-993718767,"To specify a cmd-line option in a configuration file, use the command
'option'. For example,
option l=/var/log/ldmsd.log v=INFO
option m=2gb
A configuration file example is at ldms/examples/cmdline-opts/ldmsd_w_cmdline_opts.conf.","@morrone Thanks for the detailed review. The current logic supports ""--longoption=blah"", and it has been tested. Please let me know if it doesn't work for you.

It is OK with me. Thanks.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,827,2021-10-22T22:15:42Z,2021-10-23T01:42:00Z,2021-10-23T01:42:00Z,MERGED,True,4,0,1,https://github.com/narategithub,Add more information prints in ldms manysets-test,1,[],https://github.com/ovis-hpc/ovis/pull/827,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/827,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,828,2021-10-22T22:17:46Z,2021-10-23T01:22:12Z,2021-10-23T01:22:12Z,MERGED,True,2,0,1,https://github.com/narategithub,Fix double free bug in ldms,1,[],https://github.com/ovis-hpc/ovis/pull/828,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/828,"The lp and pp pointers in __ldms_xprt_release_sets() were not
reset to NULL and then got reused in the next iteration, causing a
double-free issue.","The lp and pp pointers in __ldms_xprt_release_sets() were not
reset to NULL and then got reused in the next iteration, causing a
double-free issue.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,829,2021-10-22T22:18:05Z,2021-10-23T01:21:39Z,2021-10-23T01:21:39Z,MERGED,True,2,0,1,https://github.com/narategithub,Fix SIGSEGV due to NULL prdcr_set in ldmsd,1,[],https://github.com/ovis-hpc/ovis/pull/829,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/829,"The producer set may not yet be created when the ldmsd receive
DIR_DELETE from the peer. For example, an L2 aggregator issued a dir
request to an L1 aggregator. The L1 aggregator send DIR_LIST to the L2
aggregator in chunks. In the mean time, a sampler (a peer of L1) may die
and causing the L1 to issue a DIR_DELETE message to the L2 aggregator
that the DIR_LIST chunk of that set may not yet arrived. In this case,
ldmsd_prdcr_set_find() will return NULL and cause a segmentation
fault. This patch NULL-check the returned prdcr set before using it in
the DIR_DELETE path.","The producer set may not yet be created when the ldmsd receive
DIR_DELETE from the peer. For example, an L2 aggregator issued a dir
request to an L1 aggregator. The L1 aggregator send DIR_LIST to the L2
aggregator in chunks. In the mean time, a sampler (a peer of L1) may die
and causing the L1 to issue a DIR_DELETE message to the L2 aggregator
that the DIR_LIST chunk of that set may not yet arrived. In this case,
ldmsd_prdcr_set_find() will return NULL and cause a segmentation
fault. This patch NULL-check the returned prdcr set before using it in
the DIR_DELETE path.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,830,2021-10-25T19:20:19Z,2021-10-26T02:44:19Z,2021-10-26T19:15:21Z,MERGED,True,13,0,2,https://github.com/narategithub,Limit the number of zap threads with nprocs,1,[],https://github.com/ovis-hpc/ovis/pull/830,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/830,"A new zap thread was created if the existing ones were too busy.
However, ldmsd could end up spwaning too many threads without any
limitation. This patch limits the number of zap threads with the number
of processors in the system.","A new zap thread was created if the existing ones were too busy.
However, ldmsd could end up spwaning too many threads without any
limitation. This patch limits the number of zap threads with the number
of processors in the system.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,830,2021-10-25T19:20:19Z,2021-10-26T02:44:19Z,2021-10-26T19:15:21Z,MERGED,True,13,0,2,https://github.com/narategithub,Limit the number of zap threads with nprocs,1,[],https://github.com/ovis-hpc/ovis/pull/830,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/830#issuecomment-951244126,"A new zap thread was created if the existing ones were too busy.
However, ldmsd could end up spwaning too many threads without any
limitation. This patch limits the number of zap threads with the number
of processors in the system.","@tom95858
I've tested on my desktop (4 cores / 8 threads ==> 8 nprocs), 16 sampler daemons, 1 agg with ZAP_IO_BUSY=0 for the aggregator so that the existing threads would be deemed ""busy"" all the time (to keep creating new thread for a new endpoint).
I use ldmsd_controller > thread_stats to check the thread statistics, and I see only 8 threads (as expected)
sock:localhost:10000> thread_stats
Name             Samples      Sample Rate  Utilization
---------------- ------------ ------------ ------------
zap_sock_io                 4         0.24         0.00
zap_sock_io                 4         0.24         0.00
zap_sock_io                 9         0.54         0.01
zap_sock_io                 8         0.48         0.00
zap_sock_io                12         0.71         0.01
zap_sock_io                 8         0.47         0.00
zap_sock_io                 8         0.47         0.00
zap_sock_io                17         0.99         0.01
sock:localhost:10000>

This change also passed all the containerized tests in ldms-test/test-all.sh as well.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,830,2021-10-25T19:20:19Z,2021-10-26T02:44:19Z,2021-10-26T19:15:21Z,MERGED,True,13,0,2,https://github.com/narategithub,Limit the number of zap threads with nprocs,1,[],https://github.com/ovis-hpc/ovis/pull/830,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/830#issuecomment-952185235,"A new zap thread was created if the existing ones were too busy.
However, ldmsd could end up spwaning too many threads without any
limitation. This patch limits the number of zap threads with the number
of processors in the system.","@narategithub could this thread upper limit also be set with an optional environment variable? On our systems, the number returned by get_nproc is actually higher than the core count, and there are other circumstances in which we might want to lower the limit. The get_nproc fallback if the env isn't set is fine.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,830,2021-10-25T19:20:19Z,2021-10-26T02:44:19Z,2021-10-26T19:15:21Z,MERGED,True,13,0,2,https://github.com/narategithub,Limit the number of zap threads with nprocs,1,[],https://github.com/ovis-hpc/ovis/pull/830,https://github.com/narategithub,4,https://github.com/ovis-hpc/ovis/pull/830#issuecomment-952222442,"A new zap thread was created if the existing ones were too busy.
However, ldmsd could end up spwaning too many threads without any
limitation. This patch limits the number of zap threads with the number
of processors in the system.",@baallan I'm fine with an environment variable limiting the max number of threads with the default to nprocs. @tom95858 @valleydlr what do you think?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,830,2021-10-25T19:20:19Z,2021-10-26T02:44:19Z,2021-10-26T19:15:21Z,MERGED,True,13,0,2,https://github.com/narategithub,Limit the number of zap threads with nprocs,1,[],https://github.com/ovis-hpc/ovis/pull/830,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/830#issuecomment-952232084,"A new zap thread was created if the existing ones were too busy.
However, ldmsd could end up spwaning too many threads without any
limitation. This patch limits the number of zap threads with the number
of processors in the system.","export ZAP_IO_MAX=16

is fine with me.
…
On Tue, Oct 26, 2021 at 12:58 PM narategithub ***@***.***> wrote:
 @baallan <https://github.com/baallan> I'm fine with an environment
 variable limiting the max number of threads with the default to nprocs.
 @tom95858 <https://github.com/tom95858> @valleydlr
 <https://github.com/valleydlr> what do you think?

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#830 (comment)>, or
 unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ABVTPXFGE65Q5SAWRY2RU5LUI323XANCNFSM5GWAV23A>
 .
 Triage notifications on the go with GitHub Mobile for iOS
 <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>
 or Android
 <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.



-- 
Thomas Tucker, President, Open Grid Computing, Inc.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,830,2021-10-25T19:20:19Z,2021-10-26T02:44:19Z,2021-10-26T19:15:21Z,MERGED,True,13,0,2,https://github.com/narategithub,Limit the number of zap threads with nprocs,1,[],https://github.com/ovis-hpc/ovis/pull/830,https://github.com/narategithub,6,https://github.com/ovis-hpc/ovis/pull/830#issuecomment-952235353,"A new zap thread was created if the existing ones were too busy.
However, ldmsd could end up spwaning too many threads without any
limitation. This patch limits the number of zap threads with the number
of processors in the system.",OK. I'll post the patch soon.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,831,2021-10-25T20:12:30Z,2021-10-26T02:43:43Z,2021-10-26T02:43:43Z,MERGED,True,15,5,4,https://github.com/narategithub,Add `Hsize` (heap size) report in ldms_ls (and dir_data),1,[],https://github.com/ovis-hpc/ovis/pull/831,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/831,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,831,2021-10-25T20:12:30Z,2021-10-26T02:43:43Z,2021-10-26T02:43:43Z,MERGED,True,15,5,4,https://github.com/narategithub,Add `Hsize` (heap size) report in ldms_ls (and dir_data),1,[],https://github.com/ovis-hpc/ovis/pull/831,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/831#issuecomment-951271713,,"Sniff-tested:
$ ldms_ls -x sock -p 10001 -v
Schema         Instance                 Flags  Msize  Dsize  Hsize  UID    GID    Perm       Update            Duration          Info
-------------- ------------------------ ------ ------ ------ ------ ------ ------ ---------- ----------------- ----------------- --------
meminfo        meminfo.1                   CL    2832    528      0   1000   1000 -r--r----- 1635192427.001203          0.000073 ""updt_hint_us""=""1000000:0""
list_sampler   list.1                      CL    1424   9184   8704   1000   1000 -r--r----- 1635192427.001223          0.000017 ""updt_hint_us""=""1000000:0""
-------------- ------------------------ ------ ------ ------ ------ ------ ------ ---------- ----------------- ----------------- --------
Total Sets: 2, Meta Data (kB): 4.26, Data (kB) 9.71, Memory (kB): 13.97",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,832,2021-10-25T21:15:55Z,2021-10-25T23:06:43Z,2021-10-25T23:06:43Z,MERGED,True,23,23,5,https://github.com/narategithub,Refactor ldms_list APIs,1,[],https://github.com/ovis-hpc/ovis/pull/832,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/832,"Refactor ldms_list_append() to ldms_list_append_item(), and
ldms_list_del() to ldms_list_remove_item().","Refactor ldms_list_append() to ldms_list_append_item(), and
ldms_list_del() to ldms_list_remove_item().",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,832,2021-10-25T21:15:55Z,2021-10-25T23:06:43Z,2021-10-25T23:06:43Z,MERGED,True,23,23,5,https://github.com/narategithub,Refactor ldms_list APIs,1,[],https://github.com/ovis-hpc/ovis/pull/832,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/832#issuecomment-951338690,"Refactor ldms_list_append() to ldms_list_append_item(), and
ldms_list_del() to ldms_list_remove_item().","FYI, #830 + #831 + #832 were staged and tested against ldms-test/test-all.sh tests.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,833,2021-10-26T17:07:44Z,2021-10-27T21:37:05Z,2021-10-27T21:37:05Z,MERGED,True,547,1544,2,https://github.com/narategithub,zap_ugni messaging with TCP socket,1,[],https://github.com/ovis-hpc/ovis/pull/833,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/833,"Reverting zap_ugni messaging back to TCP messaging due to issues with
GNI RDMA PUT messaging. This also bring back the compatibility with
OVIS-4.3.7.
Passed ldms-test/scalability test with:

18 nodes x 250 ldmsds/node = 4500 daemons

16 sets/daemon x 4500 daemons = 72000 sets


1 nodes x 2 L1 daemons/node = 2 L1 daemons
1 node  x 2 L2 daemons/node = 2 L2 daemons
1 L3 daemon
NO SOS

Passed ldms-test/single-agg-scalability with

20 nodes x 250 ldmsds/node = 5000 daemons

16 sets / daemon x 5000 daemons = 80000 sets


1 agg","Reverting zap_ugni messaging back to TCP messaging due to issues with
GNI RDMA PUT messaging. This also bring back the compatibility with
OVIS-4.3.7.
Passed ldms-test/scalability test with:

18 nodes x 250 ldmsds/node = 4500 daemons

16 sets/daemon x 4500 daemons = 72000 sets


1 nodes x 2 L1 daemons/node = 2 L1 daemons
1 node  x 2 L2 daemons/node = 2 L2 daemons
1 L3 daemon
NO SOS

Passed ldms-test/single-agg-scalability with

20 nodes x 250 ldmsds/node = 5000 daemons

16 sets / daemon x 5000 daemons = 80000 sets


1 agg",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,833,2021-10-26T17:07:44Z,2021-10-27T21:37:05Z,2021-10-27T21:37:05Z,MERGED,True,547,1544,2,https://github.com/narategithub,zap_ugni messaging with TCP socket,1,[],https://github.com/ovis-hpc/ovis/pull/833,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/833#issuecomment-953270587,"Reverting zap_ugni messaging back to TCP messaging due to issues with
GNI RDMA PUT messaging. This also bring back the compatibility with
OVIS-4.3.7.
Passed ldms-test/scalability test with:

18 nodes x 250 ldmsds/node = 4500 daemons

16 sets/daemon x 4500 daemons = 72000 sets


1 nodes x 2 L1 daemons/node = 2 L1 daemons
1 node  x 2 L2 daemons/node = 2 L2 daemons
1 L3 daemon
NO SOS

Passed ldms-test/single-agg-scalability with

20 nodes x 250 ldmsds/node = 5000 daemons

16 sets / daemon x 5000 daemons = 80000 sets


1 agg","With testing at a small scale on Voltrino, I don't see any problems. It is more stable than using RDMA put for send/receive.
I tested the patch on Voltrino: 1500 connections x 10 sets per connection with ugni+munge

The sampler daemons were not flapped. I don't see any evidences that we have a leak.
The sampler daemons were flapped every 30 seconds. L1 collected and updated sets as expected, and it cleaned up the sets properly when the connections were disconnected. I had a problem with flapping the sampler daemons more than 5 times, so this was the best effort. We should try as root.
L2 behaved as expected, cleaning up the sets when L0 were killed or when the connection to L1 was disconnected. It reconnected to L1 and collected the sets correctly after reconnections.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,834,2021-10-26T20:04:50Z,2021-10-26T20:20:14Z,2021-10-26T20:20:14Z,MERGED,True,3,3,1,https://github.com/narategithub,Add ZAP_IO_MAX environment variable,1,[],https://github.com/ovis-hpc/ovis/pull/834,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/834,"Add ZAP_IO_MAX environment variable to limit the maximum number of zap
threads. If not set, the default value is the number of CPUs from
get_nprocs().","Add ZAP_IO_MAX environment variable to limit the maximum number of zap
threads. If not set, the default value is the number of CPUs from
get_nprocs().",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,834,2021-10-26T20:04:50Z,2021-10-26T20:20:14Z,2021-10-26T20:20:14Z,MERGED,True,3,3,1,https://github.com/narategithub,Add ZAP_IO_MAX environment variable,1,[],https://github.com/ovis-hpc/ovis/pull/834,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/834#issuecomment-952284748,"Add ZAP_IO_MAX environment variable to limit the maximum number of zap
threads. If not set, the default value is the number of CPUs from
get_nprocs().","NOTE: sniffed-tested with 16 sampler daemons --> 1 aggregator with ZAP_IO_BUSY=0 so that the aggregator will keep creating a new thread for each new endpoint. With ZAP_IO_MAX=2, ldmsd_controller > thread_stats showed only 2 zap_sock_io threads as expected. Without ZAP_IO_MAX, the thread_stats reported 8 threads as expected (== nprocs).
This patch also passed all test cases in ldms-test/test-all.sh.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,835,2021-11-12T17:39:33Z,2021-11-24T19:56:10Z,2022-01-18T04:13:38Z,MERGED,True,69,3,2,https://github.com/nichamon,Report errors when interval/offset/regex of updtr_# is invalid,1,[],https://github.com/ovis-hpc/ovis/pull/835,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/835,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,835,2021-11-12T17:39:33Z,2021-11-24T19:56:10Z,2022-01-18T04:13:38Z,MERGED,True,69,3,2,https://github.com/nichamon,Report errors when interval/offset/regex of updtr_# is invalid,1,[],https://github.com/ovis-hpc/ovis/pull/835,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/835#issuecomment-967296731,,"The patch addresses minor problems in various updtr_* config commands, which were found by the new test scripts in ovis-hpc/ldms-test#15.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,837,2021-11-24T02:59:38Z,2021-11-24T19:55:56Z,2021-11-24T19:55:56Z,MERGED,True,7,4,4,https://github.com/nichamon,"Register lustre, papi, and slurm sets in LDMSD's set tree",2,[],https://github.com/ovis-hpc/ovis/pull/837,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/837,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,838,2021-11-25T04:01:33Z,2021-11-25T21:04:50Z,2022-01-18T04:07:02Z,MERGED,True,3,2,3,https://github.com/nichamon,Register lustre's job_stats and slurm sets to LDMSD's set_tree,2,[],https://github.com/ovis-hpc/ovis/pull/838,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/838,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,838,2021-11-25T04:01:33Z,2021-11-25T21:04:50Z,2022-01-18T04:07:02Z,MERGED,True,3,2,3,https://github.com/nichamon,Register lustre's job_stats and slurm sets to LDMSD's set_tree,2,[],https://github.com/ovis-hpc/ovis/pull/838,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/838#issuecomment-978809624,,@tom95858 I found additional sets (job_stats) that the Lustre plugins do not register to LDMSD's set tree. Slurm plugin also doesn't register the sets to LDMSD's set tree. I created the previous pull request #837  prematurely. Sorry!.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,839,2021-11-29T19:52:15Z,2021-11-29T19:57:17Z,2021-11-29T19:57:17Z,MERGED,True,77,52,10,https://github.com/morrone,Rename ibmad/dcgm plugins to ibmad_sampler/dcgm_sampler,1,[],https://github.com/ovis-hpc/ovis/pull/839,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/839,"Rename the ibmad plugin to ibmad_sampler and the dcgm
plugin to dcgm_sampler. There are install hooks from the
previous plugin shared object names to the new ones to
aid in the transition. Also to maintain compatibility
though the rename, the schema names remain ""ibmad""
and ""dcgm"" respectively.
Fixes #822","Rename the ibmad plugin to ibmad_sampler and the dcgm
plugin to dcgm_sampler. There are install hooks from the
previous plugin shared object names to the new ones to
aid in the transition. Also to maintain compatibility
though the rename, the schema names remain ""ibmad""
and ""dcgm"" respectively.
Fixes #822",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,840,2021-11-29T21:15:25Z,2021-11-29T21:28:35Z,2021-11-29T21:28:35Z,MERGED,True,0,6,1,https://github.com/morrone,Remove circular build dependency,1,[],https://github.com/ovis-hpc/ovis/pull/840,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/840,"The build system rightly complains about a circular build dependency:
make[3]: Circular lsdate <- lsdate dependency dropped.
make[3]: Circular ovis-roll-over.py <- ovis-roll-over.py dependency dropped.
Remove the manually created lsdate and ovis-roll-over.py targets
in favor of the normal listings in bin_SCRIPTS and EXTRA_DIST.","The build system rightly complains about a circular build dependency:
make[3]: Circular lsdate <- lsdate dependency dropped.
make[3]: Circular ovis-roll-over.py <- ovis-roll-over.py dependency dropped.
Remove the manually created lsdate and ovis-roll-over.py targets
in favor of the normal listings in bin_SCRIPTS and EXTRA_DIST.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,841,2021-12-01T23:06:05Z,2021-12-01T23:36:35Z,2021-12-01T23:36:35Z,MERGED,True,1,0,1,https://github.com/nick-enoent,Add AUTH attribute to ID_NAME_MAP dict,1,[],https://github.com/ovis-hpc/ovis/pull/841,https://github.com/nick-enoent,1,https://github.com/ovis-hpc/ovis/pull/841,"Fix bug where creation of a python LDMSD_Req_Attr object with ""AUTH"" attribute will fail","Fix bug where creation of a python LDMSD_Req_Attr object with ""AUTH"" attribute will fail",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,842,2021-12-02T23:16:27Z,2021-12-02T23:21:23Z,2021-12-06T20:27:00Z,MERGED,True,4,0,2,https://github.com/tom95858,Add UUID to the Darshan and Kokkos Store schema,1,[],https://github.com/ovis-hpc/ovis/pull/842,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/842,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,844,2021-12-14T01:24:49Z,2021-12-14T18:47:34Z,2021-12-14T18:47:34Z,MERGED,True,39,15,6,https://github.com/baallan,add sc_clk_tck optional field to dstat sampler,1,[],https://github.com/ovis-hpc/ovis/pull/844,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/844,"fixes #843
updated man page and test.","fixes #843
updated man page and test.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,845,2021-12-14T18:32:08Z,2021-12-14T18:47:45Z,2021-12-14T18:47:45Z,MERGED,True,25,1,2,https://github.com/baallan,add sc_clk_tck optional metric to procstat,1,[],https://github.com/ovis-hpc/ovis/pull/845,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/845,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,846,2021-12-14T23:41:40Z,2021-12-14T23:45:41Z,2021-12-14T23:45:41Z,CLOSED,False,118,22,2,https://github.com/baallan,add @auth:authopts to ldmsd -x option syntax,1,[],https://github.com/ovis-hpc/ovis/pull/846,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/846,"This allows multiple listener specifications with independent authentication
methods from the command line to simplify startup via systemd service scripts
or test cases.","This allows multiple listener specifications with independent authentication
methods from the command line to simplify startup via systemd service scripts
or test cases.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,846,2021-12-14T23:41:40Z,2021-12-14T23:45:41Z,2021-12-14T23:45:41Z,CLOSED,False,118,22,2,https://github.com/baallan,add @auth:authopts to ldmsd -x option syntax,1,[],https://github.com/ovis-hpc/ovis/pull/846,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/846#issuecomment-994144424,"This allows multiple listener specifications with independent authentication
methods from the command line to simplify startup via systemd service scripts
or test cases.",something off here w/git usage.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,847,2021-12-15T04:53:36Z,,2022-04-21T01:26:34Z,OPEN,False,176,42,2,https://github.com/baallan,fix ldmsd -a order dependence bug and enable independent -x listeners,1,[],https://github.com/ovis-hpc/ovis/pull/847,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/847,"In addition to fixing sequence dependence (-x before -a yields wrong default
authentication setting) of listener options, this patch extends the
-x option syntax to -x xprt:port[:host][@auth[:authopts]]
This allows multiple listener specifications with independent authentication
methods from the command line to simplify startup via systemd service scripts
or test cases. Previously all -x options were tied to the same (-a) authentication method.
Internal documentation of cleanup also added.","In addition to fixing sequence dependence (-x before -a yields wrong default
authentication setting) of listener options, this patch extends the
-x option syntax to -x xprt:port[:host][@auth[:authopts]]
This allows multiple listener specifications with independent authentication
methods from the command line to simplify startup via systemd service scripts
or test cases. Previously all -x options were tied to the same (-a) authentication method.
Internal documentation of cleanup also added.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,847,2021-12-15T04:53:36Z,,2022-04-21T01:26:34Z,OPEN,False,176,42,2,https://github.com/baallan,fix ldmsd -a order dependence bug and enable independent -x listeners,1,[],https://github.com/ovis-hpc/ovis/pull/847,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/847#issuecomment-994991132,"In addition to fixing sequence dependence (-x before -a yields wrong default
authentication setting) of listener options, this patch extends the
-x option syntax to -x xprt:port[:host][@auth[:authopts]]
This allows multiple listener specifications with independent authentication
methods from the command line to simplify startup via systemd service scripts
or test cases. Previously all -x options were tied to the same (-a) authentication method.
Internal documentation of cleanup also added.","looking into what it is about the test that causes this fail. there's been no protocol changes other than the command line, so if fixing a bug has unmasked another bug then fixing the test script will be the solution.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,847,2021-12-15T04:53:36Z,,2022-04-21T01:26:34Z,OPEN,False,176,42,2,https://github.com/baallan,fix ldmsd -a order dependence bug and enable independent -x listeners,1,[],https://github.com/ovis-hpc/ovis/pull/847,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/847#issuecomment-995022750,"In addition to fixing sequence dependence (-x before -a yields wrong default
authentication setting) of listener options, this patch extends the
-x option syntax to -x xprt:port[:host][@auth[:authopts]]
This allows multiple listener specifications with independent authentication
methods from the command line to simplify startup via systemd service scripts
or test cases. Previously all -x options were tied to the same (-a) authentication method.
Internal documentation of cleanup also added.",@nichamon can you review this whenever you get a chance?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,847,2021-12-15T04:53:36Z,,2022-04-21T01:26:34Z,OPEN,False,176,42,2,https://github.com/baallan,fix ldmsd -a order dependence bug and enable independent -x listeners,1,[],https://github.com/ovis-hpc/ovis/pull/847,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/847#issuecomment-996179062,"In addition to fixing sequence dependence (-x before -a yields wrong default
authentication setting) of listener options, this patch extends the
-x option syntax to -x xprt:port[:host][@auth[:authopts]]
This allows multiple listener specifications with independent authentication
methods from the command line to simplify startup via systemd service scripts
or test cases. Previously all -x options were tied to the same (-a) authentication method.
Internal documentation of cleanup also added.","I don't propose this patch for the pending release if we are sticking to the tomorrow-release schedule.
Alternatively to this redesign, we accept order dependence of -a -A -x, but allow multiple specification of the -a -A and -x, with the last values seen for -a,-A becoming the defaults. This would require a different patch that unifies the -x processing with the -a/-A parsing but allow the redefinition of -a/-A until all cmdline options have processed.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,847,2021-12-15T04:53:36Z,,2022-04-21T01:26:34Z,OPEN,False,176,42,2,https://github.com/baallan,fix ldmsd -a order dependence bug and enable independent -x listeners,1,[],https://github.com/ovis-hpc/ovis/pull/847,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/847#issuecomment-996191230,"In addition to fixing sequence dependence (-x before -a yields wrong default
authentication setting) of listener options, this patch extends the
-x option syntax to -x xprt:port[:host][@auth[:authopts]]
This allows multiple listener specifications with independent authentication
methods from the command line to simplify startup via systemd service scripts
or test cases. Previously all -x options were tied to the same (-a) authentication method.
Internal documentation of cleanup also added.","@baallan, should we revert your previous patch? I had erroneously assumed that it had been tested.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,847,2021-12-15T04:53:36Z,,2022-04-21T01:26:34Z,OPEN,False,176,42,2,https://github.com/baallan,fix ldmsd -a order dependence bug and enable independent -x listeners,1,[],https://github.com/ovis-hpc/ovis/pull/847,https://github.com/baallan,6,https://github.com/ovis-hpc/ovis/pull/847#issuecomment-996210306,"In addition to fixing sequence dependence (-x before -a yields wrong default
authentication setting) of listener options, this patch extends the
-x option syntax to -x xprt:port[:host][@auth[:authopts]]
This allows multiple listener specifications with independent authentication
methods from the command line to simplify startup via systemd service scripts
or test cases. Previously all -x options were tied to the same (-a) authentication method.
Internal documentation of cleanup also added.",the previous patch wasn't applied. i closed it and opened this one after porting the previous patch to Mons rearranged option handling.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,847,2021-12-15T04:53:36Z,,2022-04-21T01:26:34Z,OPEN,False,176,42,2,https://github.com/baallan,fix ldmsd -a order dependence bug and enable independent -x listeners,1,[],https://github.com/ovis-hpc/ovis/pull/847,https://github.com/tom95858,7,https://github.com/ovis-hpc/ovis/pull/847#issuecomment-1001088885,"In addition to fixing sequence dependence (-x before -a yields wrong default
authentication setting) of listener options, this patch extends the
-x option syntax to -x xprt:port[:host][@auth[:authopts]]
This allows multiple listener specifications with independent authentication
methods from the command line to simplify startup via systemd service scripts
or test cases. Previously all -x options were tied to the same (-a) authentication method.
Internal documentation of cleanup also added.","@baallan, @nichamon why are we doing this exactly? What is wrong with the expanded auth configuration supported in the configuration files.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,847,2021-12-15T04:53:36Z,,2022-04-21T01:26:34Z,OPEN,False,176,42,2,https://github.com/baallan,fix ldmsd -a order dependence bug and enable independent -x listeners,1,[],https://github.com/ovis-hpc/ovis/pull/847,https://github.com/nichamon,8,https://github.com/ovis-hpc/ovis/pull/847#issuecomment-1004311522,"In addition to fixing sequence dependence (-x before -a yields wrong default
authentication setting) of listener options, this patch extends the
-x option syntax to -x xprt:port[:host][@auth[:authopts]]
This allows multiple listener specifications with independent authentication
methods from the command line to simplify startup via systemd service scripts
or test cases. Previously all -x options were tied to the same (-a) authentication method.
Internal documentation of cleanup also added.","@baallan, @nichamon why are we doing this exactly? What is wrong with the expanded auth configuration supported in the configuration files.

@tom95858 Yes, the configuration commands in the configuration files support specifying a specific authentication for each listening endpoint. As @baallan was the one who made the changes, I'll wait for him to answer your questions.
In case someone isn't familiar with how to do this in the configuration files, here are some examples. You can find examples of configuration files with such usages here https://github.com/ovis-hpc/ovis/tree/OVIS-4/ldms/examples/cmdline-opts.
auth_add name=my_munge plugin=munge
listen xprt=sock port=10002 auth=my_munge # NOTE: auth=<auth_domain_name>

auth_add name=munge # If 'plugin' is not given, the plugin name and the authentication domain name are the same.
listen xprt=sock port=10003 auth=munge",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,847,2021-12-15T04:53:36Z,,2022-04-21T01:26:34Z,OPEN,False,176,42,2,https://github.com/baallan,fix ldmsd -a order dependence bug and enable independent -x listeners,1,[],https://github.com/ovis-hpc/ovis/pull/847,https://github.com/baallan,9,https://github.com/ovis-hpc/ovis/pull/847#issuecomment-1005065647,"In addition to fixing sequence dependence (-x before -a yields wrong default
authentication setting) of listener options, this patch extends the
-x option syntax to -x xprt:port[:host][@auth[:authopts]]
This allows multiple listener specifications with independent authentication
methods from the command line to simplify startup via systemd service scripts
or test cases. Previously all -x options were tied to the same (-a) authentication method.
Internal documentation of cleanup also added.","@baallan, @nichamon why are we doing this exactly? What is wrong with the expanded auth configuration supported in the configuration files.

@tom95858 this allows us to start a daemon from a command line in  a systemd script with multiple listeners with distinct auth methods and no dependence on another configuration file. Such a daemon can be ready for immediate contact by user applications or by maestro configuration.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,847,2021-12-15T04:53:36Z,,2022-04-21T01:26:34Z,OPEN,False,176,42,2,https://github.com/baallan,fix ldmsd -a order dependence bug and enable independent -x listeners,1,[],https://github.com/ovis-hpc/ovis/pull/847,https://github.com/tom95858,10,https://github.com/ovis-hpc/ovis/pull/847#issuecomment-1007744913,"In addition to fixing sequence dependence (-x before -a yields wrong default
authentication setting) of listener options, this patch extends the
-x option syntax to -x xprt:port[:host][@auth[:authopts]]
This allows multiple listener specifications with independent authentication
methods from the command line to simplify startup via systemd service scripts
or test cases. Previously all -x options were tied to the same (-a) authentication method.
Internal documentation of cleanup also added.","@nichamon, @baallan, where are we on this. This patch seems to break things correct?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,847,2021-12-15T04:53:36Z,,2022-04-21T01:26:34Z,OPEN,False,176,42,2,https://github.com/baallan,fix ldmsd -a order dependence bug and enable independent -x listeners,1,[],https://github.com/ovis-hpc/ovis/pull/847,https://github.com/baallan,11,https://github.com/ovis-hpc/ovis/pull/847#issuecomment-1007746298,"In addition to fixing sequence dependence (-x before -a yields wrong default
authentication setting) of listener options, this patch extends the
-x option syntax to -x xprt:port[:host][@auth[:authopts]]
This allows multiple listener specifications with independent authentication
methods from the command line to simplify startup via systemd service scripts
or test cases. Previously all -x options were tied to the same (-a) authentication method.
Internal documentation of cleanup also added.",i need to respond yet to Mon's latest comments. converted to draft for now.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,847,2021-12-15T04:53:36Z,,2022-04-21T01:26:34Z,OPEN,False,176,42,2,https://github.com/baallan,fix ldmsd -a order dependence bug and enable independent -x listeners,1,[],https://github.com/ovis-hpc/ovis/pull/847,https://github.com/baallan,12,https://github.com/ovis-hpc/ovis/pull/847#issuecomment-1102895737,"In addition to fixing sequence dependence (-x before -a yields wrong default
authentication setting) of listener options, this patch extends the
-x option syntax to -x xprt:port[:host][@auth[:authopts]]
This allows multiple listener specifications with independent authentication
methods from the command line to simplify startup via systemd service scripts
or test cases. Previously all -x options were tied to the same (-a) authentication method.
Internal documentation of cleanup also added.",@tom95858 why are you closing something marked as draft?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,847,2021-12-15T04:53:36Z,,2022-04-21T01:26:34Z,OPEN,False,176,42,2,https://github.com/baallan,fix ldmsd -a order dependence bug and enable independent -x listeners,1,[],https://github.com/ovis-hpc/ovis/pull/847,https://github.com/tom95858,13,https://github.com/ovis-hpc/ovis/pull/847#issuecomment-1104615113,"In addition to fixing sequence dependence (-x before -a yields wrong default
authentication setting) of listener options, this patch extends the
-x option syntax to -x xprt:port[:host][@auth[:authopts]]
This allows multiple listener specifications with independent authentication
methods from the command line to simplify startup via systemd service scripts
or test cases. Previously all -x options were tied to the same (-a) authentication method.
Internal documentation of cleanup also added.",@baallan because it's been in this state since December 14?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,848,2021-12-16T18:39:49Z,2022-01-07T21:11:44Z,2022-01-07T21:11:44Z,MERGED,True,40,31,2,https://github.com/baallan,fix validations of interval/offset on updtr_start and uninit count leading to arbitrarily large calloc,3,[],https://github.com/ovis-hpc/ovis/pull/848,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/848,"fixes ldmsd_request.c uninit variable that can lead to allocation failure and incomplete input validation that can lead to updtr start failure. The commits are split by topic.
in the updtr case, user can specify an invalid offset while defaulting the interval, so the half-range validation is needed in two places.","fixes ldmsd_request.c uninit variable that can lead to allocation failure and incomplete input validation that can lead to updtr start failure. The commits are split by topic.
in the updtr case, user can specify an invalid offset while defaulting the interval, so the half-range validation is needed in two places.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,848,2021-12-16T18:39:49Z,2022-01-07T21:11:44Z,2022-01-07T21:11:44Z,MERGED,True,40,31,2,https://github.com/baallan,fix validations of interval/offset on updtr_start and uninit count leading to arbitrarily large calloc,3,[],https://github.com/ovis-hpc/ovis/pull/848,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/848#issuecomment-1005264011,"fixes ldmsd_request.c uninit variable that can lead to allocation failure and incomplete input validation that can lead to updtr start failure. The commits are split by topic.
in the updtr case, user can specify an invalid offset while defaulting the interval, so the half-range validation is needed in two places.",@nichamon thanks for reviewing. @tom95858 let me know if you need something else changed here before merging.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,849,2021-12-16T20:12:14Z,2022-01-14T10:16:23Z,2022-01-14T10:16:23Z,MERGED,True,8,0,1,https://github.com/baallan,update build to support rocm 4.5 rdc device headers on gcc4-gcc8,1,[],https://github.com/ovis-hpc/ovis/pull/849,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/849,"working on reporting the issue upstream. With this patch, the sampler builds and works.","working on reporting the issue upstream. With this patch, the sampler builds and works.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,849,2021-12-16T20:12:14Z,2022-01-14T10:16:23Z,2022-01-14T10:16:23Z,MERGED,True,8,0,1,https://github.com/baallan,update build to support rocm 4.5 rdc device headers on gcc4-gcc8,1,[],https://github.com/ovis-hpc/ovis/pull/849,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/849#issuecomment-996162446,"working on reporting the issue upstream. With this patch, the sampler builds and works.","I loathe having to make compat headers like this, but it seems there's no other workaround until upstream fixes their header or our platforms catch up to their unstated compiler requirements. I wonder if maybe they build with clang or latest gcc instead of widely deployed gccs.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,849,2021-12-16T20:12:14Z,2022-01-14T10:16:23Z,2022-01-14T10:16:23Z,MERGED,True,8,0,1,https://github.com/baallan,update build to support rocm 4.5 rdc device headers on gcc4-gcc8,1,[],https://github.com/ovis-hpc/ovis/pull/849,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/849#issuecomment-996189833,"working on reporting the issue upstream. With this patch, the sampler builds and works.",Could you please state the problem that this patch solves. Thanks.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,849,2021-12-16T20:12:14Z,2022-01-14T10:16:23Z,2022-01-14T10:16:23Z,MERGED,True,8,0,1,https://github.com/baallan,update build to support rocm 4.5 rdc device headers on gcc4-gcc8,1,[],https://github.com/ovis-hpc/ovis/pull/849,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/849#issuecomment-996209287,"working on reporting the issue upstream. With this patch, the sampler builds and works.","RadeonOpenCompute/ROCm#1641
documents the problem.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,852,2021-12-17T03:47:41Z,,2022-04-19T17:13:27Z,OPEN,False,1,1,1,https://github.com/baallan,update return value to prevent nuisance warnings.,1,[],https://github.com/ovis-hpc/ovis/pull/852,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/852,"this stops spurious warnings  in the log about
"": create_hfi_port error ""","this stops spurious warnings  in the log about
"": create_hfi_port error """,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,852,2021-12-17T03:47:41Z,,2022-04-19T17:13:27Z,OPEN,False,1,1,1,https://github.com/baallan,update return value to prevent nuisance warnings.,1,[],https://github.com/ovis-hpc/ovis/pull/852,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/852#issuecomment-1102893358,"this stops spurious warnings  in the log about
"": create_hfi_port error ""","Hi @baallan, please convert this from a draft or close it.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,853,2021-12-17T05:40:20Z,2021-12-17T20:46:12Z,2021-12-17T20:46:13Z,MERGED,True,1,0,1,https://github.com/baallan,fix missing call to update perms on procnet sets,1,[],https://github.com/ovis-hpc/ovis/pull/853,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/853,fixes #850,fixes #850,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,854,2021-12-17T08:13:18Z,2021-12-17T20:45:25Z,2021-12-17T20:45:25Z,MERGED,True,8,1,2,https://github.com/baallan,add auth support to ibmad_sampler,1,[],https://github.com/ovis-hpc/ovis/pull/854,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/854,this add auth configuration and register/deregister to the ibmad sampler.,this add auth configuration and register/deregister to the ibmad sampler.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,854,2021-12-17T08:13:18Z,2021-12-17T20:45:25Z,2021-12-17T20:45:25Z,MERGED,True,8,1,2,https://github.com/baallan,add auth support to ibmad_sampler,1,[],https://github.com/ovis-hpc/ovis/pull/854,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/854#issuecomment-996524732,this add auth configuration and register/deregister to the ibmad sampler.,this somehow does not address the  problem that the updater hint is never set.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,855,2021-12-17T17:11:43Z,2021-12-17T20:46:40Z,2021-12-17T20:46:40Z,MERGED,True,1,0,1,https://github.com/baallan,expanding memory for procinterrupts sampler test,1,[],https://github.com/ovis-hpc/ovis/pull/855,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/855,newer kernels produce  a huge amount of interrupt information.,newer kernels produce  a huge amount of interrupt information.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,856,2021-12-17T20:43:11Z,2021-12-29T18:54:49Z,2021-12-29T18:54:49Z,MERGED,True,5,9,1,https://github.com/tom95858,Add transaction support to store_sos,1,[],https://github.com/ovis-hpc/ovis/pull/856,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/856,"This allows for the SOS store to serialize with external
administrative actions such as importing and exporting
partitions.","This allows for the SOS store to serialize with external
administrative actions such as importing and exporting
partitions.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,857,2022-01-01T19:51:12Z,2022-01-01T19:58:07Z,2022-01-01T19:58:18Z,MERGED,True,725,53,11,https://github.com/tom95858,Kokkos appmon store,10,[],https://github.com/ovis-hpc/ovis/pull/857,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/857,Kokkos Application Monitoring store and multiple fixes implemented as part of scalability testing.,Kokkos Application Monitoring store and multiple fixes implemented as part of scalability testing.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,858,2022-01-05T12:40:21Z,2022-03-24T16:34:13Z,2022-03-24T16:34:13Z,MERGED,True,3730,183,17,https://github.com/narategithub,LDMS_V_RECORD and LDMS Schema digest,3,[],https://github.com/ovis-hpc/ovis/pull/858,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/858,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,858,2022-01-05T12:40:21Z,2022-03-24T16:34:13Z,2022-03-24T16:34:13Z,MERGED,True,3730,183,17,https://github.com/narategithub,LDMS_V_RECORD and LDMS Schema digest,3,[],https://github.com/ovis-hpc/ovis/pull/858,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/858#issuecomment-1005689450,,"@tom95858
This pull request has been tested with ovis-hpc/ldms-test branch record (with new test cases for LDMS_V_RECORD and Schema digest). It passed a subset of test cases that were not failed on OVIS-4 (99b4e6e1). The failed test cases on OVIS-4 (99b4e6e1) were due to SOS-5 and papi sampler. I'll handle them separately.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,858,2022-01-05T12:40:21Z,2022-03-24T16:34:13Z,2022-03-24T16:34:13Z,MERGED,True,3730,183,17,https://github.com/narategithub,LDMS_V_RECORD and LDMS Schema digest,3,[],https://github.com/ovis-hpc/ovis/pull/858,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/858#issuecomment-1005921292,,"@narategithub this does not fully provide the digest service advertised (disambiguating schema) since it does not (at least) account for the length of arrays in the digest computation. Granted there may be some applications/stores which don't care about array length, but many row-oriented clients do need array lengths included in disambiguation.
Based on the c++-style commented out code in the patch handling 'array_count' you are aware of the issue, so we just need to include both digest values in the data available to clients.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,858,2022-01-05T12:40:21Z,2022-03-24T16:34:13Z,2022-03-24T16:34:13Z,MERGED,True,3730,183,17,https://github.com/narategithub,LDMS_V_RECORD and LDMS Schema digest,3,[],https://github.com/ovis-hpc/ovis/pull/858,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/858#issuecomment-1005925769,,"Based on the c++-style commented out code in the patch handling 'array_count' you are aware of the issue, so we just need to include both digest values in the data available to clients.

Since the digest(s) are being carried in the extended schema name string in the data structure, carrying 2 (or N) of them instead of 1 isn't particularly burdensome.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,858,2022-01-05T12:40:21Z,2022-03-24T16:34:13Z,2022-03-24T16:34:13Z,MERGED,True,3730,183,17,https://github.com/narategithub,LDMS_V_RECORD and LDMS Schema digest,3,[],https://github.com/ovis-hpc/ovis/pull/858,https://github.com/narategithub,5,https://github.com/ovis-hpc/ovis/pull/858#issuecomment-1006021312,,@tom95858 did you intentionally leave the array length out?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,858,2022-01-05T12:40:21Z,2022-03-24T16:34:13Z,2022-03-24T16:34:13Z,MERGED,True,3730,183,17,https://github.com/narategithub,LDMS_V_RECORD and LDMS Schema digest,3,[],https://github.com/ovis-hpc/ovis/pull/858,https://github.com/baallan,6,https://github.com/ovis-hpc/ovis/pull/858#issuecomment-1006106209,,"re the list/record extension: given the complexity of defining and accessing lists and records, it would be very helpful (and probably introduce opportunities for performance optimization) if there were a way to define a list and record as either polymorphic or monotyped. Whether this would be as a simple splitting of the value type enum (list_poly vs list type) or an attribute carried elsewhere is a design choice in need of more thought.
I would propose that non-polymorphic lists/records cannot contain nested polymorphic types.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,858,2022-01-05T12:40:21Z,2022-03-24T16:34:13Z,2022-03-24T16:34:13Z,MERGED,True,3730,183,17,https://github.com/narategithub,LDMS_V_RECORD and LDMS Schema digest,3,[],https://github.com/ovis-hpc/ovis/pull/858,https://github.com/tom95858,7,https://github.com/ovis-hpc/ovis/pull/858#issuecomment-1007751114,,"@narategithub yes, I intentionally left the array length out because it is an easily testable value and it seemed similar to list length in that it would be variable. So my logic at the time was that the digest would only include the metrics and types. A list, for example, may include different numbers of different types. Lists, don't ensure that all the elements in the list are the same type. If we go down that road, I imagined that the digest becomes useless because we end up with every set instance having a different digest. In addition, when we change the list, we end up with a new digest; so the the digest then become mutable and has to be checked at every update, essentially making the caching of set meta data in the storage plugin much less useful. Anyway ... that's the logic. I am still inclined to leave the array length out and require that storage plugins, etc... check the length ...",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,858,2022-01-05T12:40:21Z,2022-03-24T16:34:13Z,2022-03-24T16:34:13Z,MERGED,True,3730,183,17,https://github.com/narategithub,LDMS_V_RECORD and LDMS Schema digest,3,[],https://github.com/ovis-hpc/ovis/pull/858,https://github.com/baallan,8,https://github.com/ovis-hpc/ovis/pull/858#issuecomment-1007794804,,"@tom95858 wrote

Anyway ... that's the logic. I am still inclined to leave the array length out and require that storage plugins, etc... check the length ...

Requiring plugins to do a 'deep' analysis of every set every time a new set update notification arrives defeats the purpose of publishing a digest from the framework. It leaves 'fixed schema required' stores in very bad semantic and performance positions.
If the set instances on a specific daemon instance can be annotated with a set-instance-specific void pointer token included in the callbacks (e.g. to have
store(store_handle, set, set_instance_specific_client_token)

)
then the notion of digest can/should be left to the plugins and the plugins can digest any way that suits their individual semantics.
This would let us deprecate of the currently problematic:
int (*store)(ldmsd_store_handle_t sh, ldms_set_t set, int *, size_t count);

replacing it with some unambiguous service routines.
If we want to keep going down the 'framework makes digests' rabbit hole, we need to make the hard things possible (lists/records do this) and the simple things easy (letting the user define their expectation for polymorphism or not).
It would be a very simple thing to extend the current proposed change to let the set definition developer tell us:
ldms_record_create(char *name, bool poly);
ldms_schema_create(char *name, bool poly);

and cache the polymorphic or isomorphic flag with the developer's intent.
Or if we don't want to change schema_create signature, refine the semantics so that:
// define polymorphic-enabled types
ldms_record_create(name, poly=true) 
ldms_schema_poly_create(name)
// define non-polymorphic-enabled types
ldms_schema_create(name); // defines poly=false
ldms_record_create(name, poly=false) 

And for the above to work we need to be precise about what we mean by poly:


A record is isomorphic to second record if it contains no lists and is element-wise congruent with the second.


A list is isomorphic element-wise if it contains only one type of scalar/array or isomorphic record (otherwise the list is polymorphic).


A set can be usefully digested by the framework for all plugin writers' convenience (with and without length flavors of digest) if it contains only scalars, arrays, and isomorphic lists. (This makes the standard use-case of a list of similar devices digestible).


Anything that isn't isomorphic as defined above is polymorphic and there is no point for the framework to digest it by any method.


Any set instance that is isomorphic can be digested in common ways ( with and without length considerations).


Any schema/record flagged as isomorphic intent can be precisely checked by the framework during the creation process to ensure isomorphism.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,858,2022-01-05T12:40:21Z,2022-03-24T16:34:13Z,2022-03-24T16:34:13Z,MERGED,True,3730,183,17,https://github.com/narategithub,LDMS_V_RECORD and LDMS Schema digest,3,[],https://github.com/ovis-hpc/ovis/pull/858,https://github.com/narategithub,9,https://github.com/ovis-hpc/ovis/pull/858#issuecomment-1009159410,,"@narategithub yes, I intentionally left the array length out because it is an easily testable value and it seemed similar to list length in that it would be variable. So my logic at the time was that the digest would only include the metrics and types. A list, for example, may include different numbers of different types. Lists, don't ensure that all the elements in the list are the same type. If we go down that road, I imagined that the digest becomes useless because we end up with every set instance having a different digest. In addition, when we change the list, we end up with a new digest; so the the digest then become mutable and has to be checked at every update, essentially making the caching of set meta data in the storage plugin much less useful. Anyway ... that's the logic. I am still inclined to leave the array length out and require that storage plugins, etc... check the length ...

@tom95858
I agree with you on the LIST, as it is dynamic and hence its length should not be a part of the digest.
I would like to point out that the ARRAY length is static .. if we happened to have the following schemas from two nodes:
/* from node-1 */
{
  ""name"": ""cpu_stat"",
  ""metrics"": [
    {
        ""metric_name"": ""utime"",
        ""metric_type"": ""LDMS_V_F32_ARRAY"",
        ""array_length"": 4,  /* <-- has 4 CPUs */
    },
  ]
}

/* from node-2 */
{
  ""name"": ""cpu_stat"",
  ""metrics"": [
    {
        ""metric_name"": ""utime"",
        ""metric_type"": ""LDMS_V_F32_ARRAY"",
        ""array_length"": 8,  /* <-- has 8 CPUs */
    },
  ]
}
Without the array length in the digest, they will have the same digest. For the store that treat ARRAY type as dynamic, I think it will be OK. But for the store that take the schema as-is ... if the data from node-1 came first, the data from node-2 may break the store (e.g. allocate space for 4 elements, but write 8 elements). This is a bad example though. I think if we have samplers utilizing ARRAY this way, it should be using LIST instead. I'll add the length of the array type (and not the list) into the digest for now.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,858,2022-01-05T12:40:21Z,2022-03-24T16:34:13Z,2022-03-24T16:34:13Z,MERGED,True,3730,183,17,https://github.com/narategithub,LDMS_V_RECORD and LDMS Schema digest,3,[],https://github.com/ovis-hpc/ovis/pull/858,https://github.com/baallan,10,https://github.com/ovis-hpc/ovis/pull/858#issuecomment-1009245263,,"I'll add the length of the array type (and not the list) into the digest for now.

Since we have known use cases with and without array len sensitivity (csv, sos), why not go ahead with producing both digests since the storage of 2 instead of 1 digests seems to be trivial?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,858,2022-01-05T12:40:21Z,2022-03-24T16:34:13Z,2022-03-24T16:34:13Z,MERGED,True,3730,183,17,https://github.com/narategithub,LDMS_V_RECORD and LDMS Schema digest,3,[],https://github.com/ovis-hpc/ovis/pull/858,https://github.com/tom95858,11,https://github.com/ovis-hpc/ovis/pull/858#issuecomment-1010271047,,"@narategithub, @baallan: I am aware that two sets with the same schema digest and different array lengths can and will happen as you describe. However, the addition of the LDMS_V_LIST has introduced variant data types anyway,  and therefore logic and policy to handle these types needs to be added to the storage policy and plugins. Otherwise we have to add a different schema and different storage policy for every single instance of the set from different nodes. My perspective is that schema proliferation is much less desirable than the additional logic and complexity that will be required in the storage plugins. I came to this conclusion while working on the analysis of a cluster that included many different kinds of nodes with differing processor counts, etc...PS: this problem extends to the storage back-ends as well, e.g. a DSOS cluster that aggregates multiple containers together and why the SOS schema digests should not be generated on the fly. Otherwise one container's meminfo schema would appear to be different than another even though they are in-fact identical.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,858,2022-01-05T12:40:21Z,2022-03-24T16:34:13Z,2022-03-24T16:34:13Z,MERGED,True,3730,183,17,https://github.com/narategithub,LDMS_V_RECORD and LDMS Schema digest,3,[],https://github.com/ovis-hpc/ovis/pull/858,https://github.com/narategithub,12,https://github.com/ovis-hpc/ovis/pull/858#issuecomment-1010291056,,"@tom95858
Got it. I'll remove the array length from the digest then.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,858,2022-01-05T12:40:21Z,2022-03-24T16:34:13Z,2022-03-24T16:34:13Z,MERGED,True,3730,183,17,https://github.com/narategithub,LDMS_V_RECORD and LDMS Schema digest,3,[],https://github.com/ovis-hpc/ovis/pull/858,https://github.com/baallan,13,https://github.com/ovis-hpc/ovis/pull/858#issuecomment-1010315984,,"@tom95858 why are we designing the core of ldms around a peculiarity of SOS (particularly when it is not needed)?
Your scenario description seems to:
a) be shying away hard from the basic API design tenet: ""make the simple things easy (especially when it's cheap to do so) and the hard things possible""
b) suggest a better solution is to:

keep digests out of the core entirely
provide efficient methods for creating and managing digests local to the node, plugin, and set instance for those that need them
keep digests with ldms_set_info_(set/get) {maybe with a tree instead of a list in the hidden set_info implementation.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,858,2022-01-05T12:40:21Z,2022-03-24T16:34:13Z,2022-03-24T16:34:13Z,MERGED,True,3730,183,17,https://github.com/narategithub,LDMS_V_RECORD and LDMS Schema digest,3,[],https://github.com/ovis-hpc/ovis/pull/858,https://github.com/tom95858,14,https://github.com/ovis-hpc/ovis/pull/858#issuecomment-1010334154,,"@baallan, @narategithub: The SOS UUID and the LDMS set digest are different things and they serve different purposes. This change conflates that and will need to be changed. We need to do a presentation on this in an LDMS user's group meeting.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,858,2022-01-05T12:40:21Z,2022-03-24T16:34:13Z,2022-03-24T16:34:13Z,MERGED,True,3730,183,17,https://github.com/narategithub,LDMS_V_RECORD and LDMS Schema digest,3,[],https://github.com/ovis-hpc/ovis/pull/858,https://github.com/baallan,15,https://github.com/ovis-hpc/ovis/pull/858#issuecomment-1010339474,,@tom95858 @narategithub is there any reason we should NOT take the first two commits of this PR and defer the later commits (or at least the third commit)?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,858,2022-01-05T12:40:21Z,2022-03-24T16:34:13Z,2022-03-24T16:34:13Z,MERGED,True,3730,183,17,https://github.com/narategithub,LDMS_V_RECORD and LDMS Schema digest,3,[],https://github.com/ovis-hpc/ovis/pull/858,https://github.com/tom95858,16,https://github.com/ovis-hpc/ovis/pull/858#issuecomment-1010380976,,"@allan, Benjamin ***@***.***>
 yes, I don't _think_ we want this commit in 4.3.8 and I think we need to
release 4.3.8 within a week.
…
On Tue, Jan 11, 2022 at 1:36 PM Benjamin Allan ***@***.***> wrote:
 @tom95858 <https://github.com/tom95858> @narategithub
 <https://github.com/narategithub> is there any reason we should NOT take
 the first two commits of this PR and defer the later commits (or at least
 the third commit)?

 —
 Reply to this email directly, view it on GitHub
 <#858 (comment)>, or
 unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ABVTPXGKRZXT5YO6EKY5MK3UVSIDJANCNFSM5LJ2AOHQ>
 .
 Triage notifications on the go with GitHub Mobile for iOS
 <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>
 or Android
 <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.

 You are receiving this because you were mentioned.Message ID:
 ***@***.***>


-- 
Thomas Tucker, President, Open Grid Computing, Inc.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,858,2022-01-05T12:40:21Z,2022-03-24T16:34:13Z,2022-03-24T16:34:13Z,MERGED,True,3730,183,17,https://github.com/narategithub,LDMS_V_RECORD and LDMS Schema digest,3,[],https://github.com/ovis-hpc/ovis/pull/858,https://github.com/baallan,17,https://github.com/ovis-hpc/ovis/pull/858#issuecomment-1010391225,,"@tom95858 i was thinking post-4.3.8 for this (the first two) but before we have completed a full community discussion of digests, what the 'schema' tag really means (and doesn't mean), what we want to do about storage policies, etc.
anything faulty in that thinking?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,858,2022-01-05T12:40:21Z,2022-03-24T16:34:13Z,2022-03-24T16:34:13Z,MERGED,True,3730,183,17,https://github.com/narategithub,LDMS_V_RECORD and LDMS Schema digest,3,[],https://github.com/ovis-hpc/ovis/pull/858,https://github.com/nichamon,18,https://github.com/ovis-hpc/ovis/pull/858#issuecomment-1039574307,,"@narategithub Could you please add the list and record type to the type_name_map table? ldms_metric_str_to_type() does not work for the types. I think 'record_type' maps to LDMS_V_RECORD_TYPE, 'record' map to LDMS_V_RECORD_INST, and 'record_array' maps to LDMS_V_RECORD_ARRAY.What do you think?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,858,2022-01-05T12:40:21Z,2022-03-24T16:34:13Z,2022-03-24T16:34:13Z,MERGED,True,3730,183,17,https://github.com/narategithub,LDMS_V_RECORD and LDMS Schema digest,3,[],https://github.com/ovis-hpc/ovis/pull/858,https://github.com/narategithub,19,https://github.com/ovis-hpc/ovis/pull/858#issuecomment-1050491357,,I don't know why forced push to github close this pull request ... reopening it 🤷,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,858,2022-01-05T12:40:21Z,2022-03-24T16:34:13Z,2022-03-24T16:34:13Z,MERGED,True,3730,183,17,https://github.com/narategithub,LDMS_V_RECORD and LDMS Schema digest,3,[],https://github.com/ovis-hpc/ovis/pull/858,https://github.com/narategithub,20,https://github.com/ovis-hpc/ovis/pull/858#issuecomment-1075492958,,@tom95858 I've rebased this on top of OVIS-4 (78649a5) + retested it against all tests in ldms-test/record branch. I think it is good to go. I'll post the ldms-record-samplers pull request after this is merged to avoid confusion.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,859,2022-01-06T17:51:11Z,2022-01-10T16:27:22Z,2022-01-10T16:27:22Z,CLOSED,False,16,2,5,https://github.com/narategithub,Fix store issues with SOS-5,1,[],https://github.com/ovis-hpc/ovis/pull/859,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/859,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,859,2022-01-06T17:51:11Z,2022-01-10T16:27:22Z,2022-01-10T16:27:22Z,CLOSED,False,16,2,5,https://github.com/narategithub,Fix store issues with SOS-5,1,[],https://github.com/ovis-hpc/ovis/pull/859,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/859#issuecomment-1009057010,,The sos_schema.uuid should be the LDMS schema digest. This PR is closed and the commit will be a part of #858.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,861,2022-01-07T01:05:49Z,2022-01-07T20:46:28Z,2022-01-07T20:46:28Z,MERGED,True,12,1,8,https://github.com/morrone,"Add missing ldmsd_set_deregister() calls, plus other minor fixes",6,[],https://github.com/ovis-hpc/ovis/pull/861,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/861,"Add missing ldmsd_set_deregister() calls to several samplers, as mentioned in issue #860.
Additionally, add the missing ldms_set_unpublish() call to the slurm_sampler and add both ldmsd_set_register() and ldmsd_set_unregister() calls to the dcgm_sampler.","Add missing ldmsd_set_deregister() calls to several samplers, as mentioned in issue #860.
Additionally, add the missing ldms_set_unpublish() call to the slurm_sampler and add both ldmsd_set_register() and ldmsd_set_unregister() calls to the dcgm_sampler.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,862,2022-01-07T01:13:48Z,2022-01-07T20:45:41Z,2022-01-07T20:45:41Z,MERGED,True,6,6,2,https://github.com/morrone,"Fix typo, s/pluing_name/plugin_name",1,[],https://github.com/ovis-hpc/ovis/pull/862,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/862,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,864,2022-01-07T21:24:53Z,2022-01-08T18:42:18Z,2022-01-18T04:06:57Z,MERGED,True,1,0,1,https://github.com/nichamon,Make the 'env' command as a priority command,1,[],https://github.com/ovis-hpc/ovis/pull/864,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/864,"Without this change, LDMSD skips any ‘env’ commands preceding the priority
commands (option, listen, auth_add, and verbose) in a configuration file, so
name substitution in the priority commands results in an empty string. The
patch that supports the command-line options in configuration files (commit
001fb2 in PR826) introduced the bug.
Fixes #863","Without this change, LDMSD skips any ‘env’ commands preceding the priority
commands (option, listen, auth_add, and verbose) in a configuration file, so
name substitution in the priority commands results in an empty string. The
patch that supports the command-line options in configuration files (commit
001fb2 in PR826) introduced the bug.
Fixes #863",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,865,2022-01-10T23:05:03Z,2022-01-11T19:50:12Z,2022-01-11T20:54:58Z,MERGED,True,2,2,2,https://github.com/morrone,Change ibmad and dcgm sampler names to match new file name,1,[],https://github.com/ovis-hpc/ovis/pull/865,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/865,"The new plugin names for ibmad and dcgm are ibmad_sampler
and dcgm_sampler, respectively. Symlinks to the previous
names still exist for the old names to aid transition.
Unfortunately, the API makes it such that only one of these
name (practically speaking) can have working metric
set hints. This can be addressed in the future in a new
plugin API.
We make the plugins report the same name as the new
plugin file name. The plugins probably aren't in too
wide use yet, so we err on the side of making this
work for future users.","The new plugin names for ibmad and dcgm are ibmad_sampler
and dcgm_sampler, respectively. Symlinks to the previous
names still exist for the old names to aid transition.
Unfortunately, the API makes it such that only one of these
name (practically speaking) can have working metric
set hints. This can be addressed in the future in a new
plugin API.
We make the plugins report the same name as the new
plugin file name. The plugins probably aren't in too
wide use yet, so we err on the side of making this
work for future users.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,865,2022-01-10T23:05:03Z,2022-01-11T19:50:12Z,2022-01-11T20:54:58Z,MERGED,True,2,2,2,https://github.com/morrone,Change ibmad and dcgm sampler names to match new file name,1,[],https://github.com/ovis-hpc/ovis/pull/865,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/865#issuecomment-1009577959,"The new plugin names for ibmad and dcgm are ibmad_sampler
and dcgm_sampler, respectively. Symlinks to the previous
names still exist for the old names to aid transition.
Unfortunately, the API makes it such that only one of these
name (practically speaking) can have working metric
set hints. This can be addressed in the future in a new
plugin API.
We make the plugins report the same name as the new
plugin file name. The plugins probably aren't in too
wide use yet, so we err on the side of making this
work for future users.",+1,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,865,2022-01-10T23:05:03Z,2022-01-11T19:50:12Z,2022-01-11T20:54:58Z,MERGED,True,2,2,2,https://github.com/morrone,Change ibmad and dcgm sampler names to match new file name,1,[],https://github.com/ovis-hpc/ovis/pull/865,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/865#issuecomment-1010351809,"The new plugin names for ibmad and dcgm are ibmad_sampler
and dcgm_sampler, respectively. Symlinks to the previous
names still exist for the old names to aid transition.
Unfortunately, the API makes it such that only one of these
name (practically speaking) can have working metric
set hints. This can be addressed in the future in a new
plugin API.
We make the plugins report the same name as the new
plugin file name. The plugins probably aren't in too
wide use yet, so we err on the side of making this
work for future users.",@morrone will/did you follow up with removing the symlink creation from makefile.am? it keeps breaking my build/debug process anyway.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,866,2022-01-11T17:13:52Z,2022-01-11T19:49:38Z,2022-01-11T19:49:38Z,MERGED,True,5,0,1,https://github.com/baallan,add register/deregister for ibnet sets so hints should populate,1,[],https://github.com/ovis-hpc/ovis/pull/866,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/866,"the ibnet sampler developed before register/deregister needs updating.
this patch updates it.","the ibnet sampler developed before register/deregister needs updating.
this patch updates it.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,866,2022-01-11T17:13:52Z,2022-01-11T19:49:38Z,2022-01-11T19:49:38Z,MERGED,True,5,0,1,https://github.com/baallan,add register/deregister for ibnet sets so hints should populate,1,[],https://github.com/ovis-hpc/ovis/pull/866,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/866#issuecomment-1010183359,"the ibnet sampler developed before register/deregister needs updating.
this patch updates it.",@tom95858 this sampler patch is needed for the pending release to support auto interval on the ibnet sampler.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,867,2022-01-12T02:20:02Z,2022-01-14T10:15:33Z,2022-01-14T10:15:33Z,MERGED,True,30,10,2,https://github.com/baallan,add linux_proc_sampler option to collect sys_clk_tck for set which may report ticks,1,[],https://github.com/ovis-hpc/ovis/pull/867,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/867,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,867,2022-01-12T02:20:02Z,2022-01-14T10:15:33Z,2022-01-14T10:15:33Z,MERGED,True,30,10,2,https://github.com/baallan,add linux_proc_sampler option to collect sys_clk_tck for set which may report ticks,1,[],https://github.com/ovis-hpc/ovis/pull/867,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/867#issuecomment-1010565562,,@tom95858 this adds ticks/sec metadata to the linux_proc_sampler as we did for procstat and others.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,867,2022-01-12T02:20:02Z,2022-01-14T10:15:33Z,2022-01-14T10:15:33Z,MERGED,True,30,10,2,https://github.com/baallan,add linux_proc_sampler option to collect sys_clk_tck for set which may report ticks,1,[],https://github.com/ovis-hpc/ovis/pull/867,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/867#issuecomment-1010571030,,looks like we have an outage on the testing platform; will close and reopen again later to provoke retries.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,867,2022-01-12T02:20:02Z,2022-01-14T10:15:33Z,2022-01-14T10:15:33Z,MERGED,True,30,10,2,https://github.com/baallan,add linux_proc_sampler option to collect sys_clk_tck for set which may report ticks,1,[],https://github.com/ovis-hpc/ovis/pull/867,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/867#issuecomment-1011200463,,@tom95858 looks like github test platform is back and this pull passed everything as expected. ready to merge.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,868,2022-01-12T19:17:29Z,2022-01-14T10:11:58Z,2022-01-14T10:11:58Z,MERGED,True,3,1,1,https://github.com/baallan,add log message for open failure of config file in linux_proc_sampler.,1,[],https://github.com/ovis-hpc/ovis/pull/868,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/868,good to provide admins a clue about which file failed.,good to provide admins a clue about which file failed.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,869,2022-01-13T00:43:23Z,2022-01-14T16:24:56Z,2022-01-14T16:24:57Z,MERGED,True,24,4,4,https://github.com/baallan,fix bugs in  auth arg  and instance name handling for genders-based configuration,2,[],https://github.com/ovis-hpc/ovis/pull/869,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/869,-A must be included in the command line when an auth_ovis conf or auth_munge socket option is included in the configuration and the default instance name must be overridden if instance is included in the user-defined configuration.,-A must be included in the command line when an auth_ovis conf or auth_munge socket option is included in the configuration and the default instance name must be overridden if instance is included in the user-defined configuration.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,869,2022-01-13T00:43:23Z,2022-01-14T16:24:56Z,2022-01-14T16:24:57Z,MERGED,True,24,4,4,https://github.com/baallan,fix bugs in  auth arg  and instance name handling for genders-based configuration,2,[],https://github.com/ovis-hpc/ovis/pull/869,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/869#issuecomment-1012578639,-A must be included in the command line when an auth_ovis conf or auth_munge socket option is included in the configuration and the default instance name must be overridden if instance is included in the user-defined configuration.,"@tom95858 @nichamon none of the files in this PR have anything to do with the ldms/src tree, so they cannot break 4.3.3 compatibility. (all changes are shell scripting or man page except for a standalone c++ file generator)
I trust the fail occurred due to 4.3.3 test revision work that appears to be going on.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,869,2022-01-13T00:43:23Z,2022-01-14T16:24:56Z,2022-01-14T16:24:57Z,MERGED,True,24,4,4,https://github.com/baallan,fix bugs in  auth arg  and instance name handling for genders-based configuration,2,[],https://github.com/ovis-hpc/ovis/pull/869,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/869#issuecomment-1012597882,-A must be included in the command line when an auth_ovis conf or auth_munge socket option is included in the configuration and the default instance name must be overridden if instance is included in the user-defined configuration.,"@baallan @tom95858 I'm aware of the problem. I have been digging into the problem this afternoon, and a patch to fix the problem should be ready tonight.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,869,2022-01-13T00:43:23Z,2022-01-14T16:24:56Z,2022-01-14T16:24:57Z,MERGED,True,24,4,4,https://github.com/baallan,fix bugs in  auth arg  and instance name handling for genders-based configuration,2,[],https://github.com/ovis-hpc/ovis/pull/869,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/869#issuecomment-1013254940,-A must be included in the command line when an auth_ovis conf or auth_munge socket option is included in the configuration and the default instance name must be overridden if instance is included in the user-defined configuration.,@tom95858 i reran the checks after the workflow updates and it passed/is ready.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,870,2022-01-13T21:08:09Z,2022-01-14T19:00:54Z,2022-01-18T04:06:54Z,MERGED,True,4,5,1,https://github.com/nichamon,Make __destroy_set_no_lock() only reset contexts related to the set,1,[],https://github.com/ovis-hpc/ovis/pull/870,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/870,"The commit fbf21b7 made __destroy_set_no_lock() to reset the set handle
in all transport contexts in the transport's list to NULL, including the
contexts that point to other sets. It breaks the link between the
transport and the other sets. A result is that the transport won't put
back the other sets' references when destroying corresponding contexts.","The commit fbf21b7 made __destroy_set_no_lock() to reset the set handle
in all transport contexts in the transport's list to NULL, including the
contexts that point to other sets. It breaks the link between the
transport and the other sets. A result is that the transport won't put
back the other sets' references when destroying corresponding contexts.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,870,2022-01-13T21:08:09Z,2022-01-14T19:00:54Z,2022-01-18T04:06:54Z,MERGED,True,4,5,1,https://github.com/nichamon,Make __destroy_set_no_lock() only reset contexts related to the set,1,[],https://github.com/ovis-hpc/ovis/pull/870,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/870#issuecomment-1012523017,"The commit fbf21b7 made __destroy_set_no_lock() to reset the set handle
in all transport contexts in the transport's list to NULL, including the
contexts that point to other sets. It breaks the link between the
transport and the other sets. A result is that the transport won't put
back the other sets' references when destroying corresponding contexts.",@tom95858 I found the problem by code inspection while I went through the patches merged since December.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,871,2022-01-13T21:53:59Z,2022-01-14T10:11:23Z,2022-01-18T04:06:56Z,MERGED,True,2,1,1,https://github.com/nichamon,Fix the Github compatibility test workflow,1,[],https://github.com/ovis-hpc/ovis/pull/871,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/871,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,871,2022-01-13T21:53:59Z,2022-01-14T10:11:23Z,2022-01-18T04:06:56Z,MERGED,True,2,1,1,https://github.com/nichamon,Fix the Github compatibility test workflow,1,[],https://github.com/ovis-hpc/ovis/pull/871,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/871#issuecomment-1012835699,,"@tom95858 Without this change, you won't be able to merge any pull requests.
@baallan This is a fix for the failed Github workflow you mentioned in #869 (comment)",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,872,2022-01-14T05:26:42Z,2022-01-14T06:42:20Z,2022-01-14T06:42:20Z,CLOSED,False,3,1,7,https://github.com/narategithub,[WIP],1,[],https://github.com/ovis-hpc/ovis/pull/872,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/872,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,873,2022-01-14T20:28:45Z,2022-01-15T19:22:19Z,2022-01-15T19:22:20Z,MERGED,True,8,20,2,https://github.com/baallan,fix build warnings in ipmi sampler,1,[],https://github.com/ovis-hpc/ovis/pull/873,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/873,-Werr build will fail if ipmi is enabled. this fixes that.,-Werr build will fail if ipmi is enabled. this fixes that.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,873,2022-01-14T20:28:45Z,2022-01-15T19:22:19Z,2022-01-15T19:22:20Z,MERGED,True,8,20,2,https://github.com/baallan,fix build warnings in ipmi sampler,1,[],https://github.com/ovis-hpc/ovis/pull/873,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/873#issuecomment-1013463139,-Werr build will fail if ipmi is enabled. this fixes that.,@tom95858 please merge this before release if possible.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,874,2022-01-16T17:33:27Z,2022-01-18T16:37:23Z,2022-01-18T16:37:23Z,MERGED,True,51,45,2,https://github.com/tom95858,Store resilience,2,[],https://github.com/ovis-hpc/ovis/pull/874,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/874,"These commits fix resiliency issues found during 4.3.8 testing with
some of the storage plugins.","These commits fix resiliency issues found during 4.3.8 testing with
some of the storage plugins.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,875,2022-01-17T22:57:16Z,2022-01-18T16:38:29Z,2022-01-18T16:38:29Z,MERGED,True,71,10,1,https://github.com/aazizo,Darshan store: support HDF5 Json messages parsing,1,[],https://github.com/ovis-hpc/ovis/pull/875,https://github.com/aazizo,1,https://github.com/ovis-hpc/ovis/pull/875,Support HDF5 Json messages parsing,Support HDF5 Json messages parsing,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,875,2022-01-17T22:57:16Z,2022-01-18T16:38:29Z,2022-01-18T16:38:29Z,MERGED,True,71,10,1,https://github.com/aazizo,Darshan store: support HDF5 Json messages parsing,1,[],https://github.com/ovis-hpc/ovis/pull/875,https://github.com/aazizo,2,https://github.com/ovis-hpc/ovis/pull/875#issuecomment-1014940934,Support HDF5 Json messages parsing,@tom95858 Can you please review this commit and merge it to the current release.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,876,2022-01-20T07:04:29Z,2022-01-20T21:27:36Z,2022-01-20T21:27:37Z,MERGED,True,6,1,2,https://github.com/narategithub,Fix SIGABRT due to invalid heap access,1,[],https://github.com/ovis-hpc/ovis/pull/876,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/876,"When the set update completed with ""inconsistent"" state, the heap is in
an invalid state and should not be accessed.
In particular, consider the case of SAMP -> AGG_L1 -> ldms_ls. SAMP
has a sampler that uses LDMS_V_LIST. AGG_L1 has finished looking up
the set from SAMP, and is in the middle of updating it. At this point,
the metadata on AGG_L1 has been populated, but the data+heap parts are
still uninitialized. In the mean time, ldms_ls lookup + update the set
and get SIGABRT from ldms_heap_get() due to bad heap signature because
of the uninitialized data+heap part on the AGG_L1 that ldms_ls copied
the data from.
This patch:

adds set consistency check before getting the heap in the LDMS set
update path.
adds heap pointer check in the ldms_list_first() list/heap access.","When the set update completed with ""inconsistent"" state, the heap is in
an invalid state and should not be accessed.
In particular, consider the case of SAMP -> AGG_L1 -> ldms_ls. SAMP
has a sampler that uses LDMS_V_LIST. AGG_L1 has finished looking up
the set from SAMP, and is in the middle of updating it. At this point,
the metadata on AGG_L1 has been populated, but the data+heap parts are
still uninitialized. In the mean time, ldms_ls lookup + update the set
and get SIGABRT from ldms_heap_get() due to bad heap signature because
of the uninitialized data+heap part on the AGG_L1 that ldms_ls copied
the data from.
This patch:

adds set consistency check before getting the heap in the LDMS set
update path.
adds heap pointer check in the ldms_list_first() list/heap access.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,877,2022-01-29T03:43:47Z,2022-01-31T20:02:48Z,2022-01-31T20:02:48Z,MERGED,True,3,2,1,https://github.com/baallan,fix build for boost-dependence when not in /usr,1,[],https://github.com/ovis-hpc/ovis/pull/877,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/877,This fixes makefile.am insufficiency when boost is not installed with prefix /usr. Affects only the c++ genders config file processor.,This fixes makefile.am insufficiency when boost is not installed with prefix /usr. Affects only the c++ genders config file processor.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,877,2022-01-29T03:43:47Z,2022-01-31T20:02:48Z,2022-01-31T20:02:48Z,MERGED,True,3,2,1,https://github.com/baallan,fix build for boost-dependence when not in /usr,1,[],https://github.com/ovis-hpc/ovis/pull/877,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/877#issuecomment-1024824513,This fixes makefile.am insufficiency when boost is not installed with prefix /usr. Affects only the c++ genders config file processor.,need this for the 4.8 release @tom95858,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,880,2022-02-03T18:00:38Z,2022-02-03T22:46:20Z,2022-02-03T22:46:20Z,MERGED,True,9,4,2,https://github.com/morrone,Update workflows to use the current runs-on and containers,1,[],https://github.com/ovis-hpc/ovis/pull/880,https://github.com/morrone,1,https://github.com/ovis-hpc/ovis/pull/880,"Update the create-release.yaml and test-make-dist.yaml workflows
to use the same runs-on (Ubuntu-20.04) and container
(ovishpc/ovis-ubuntu-build) as used elsewhere. Keeping these two
files in sync should help to avoid surprise problems at release
time.","Update the create-release.yaml and test-make-dist.yaml workflows
to use the same runs-on (Ubuntu-20.04) and container
(ovishpc/ovis-ubuntu-build) as used elsewhere. Keeping these two
files in sync should help to avoid surprise problems at release
time.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,881,2022-02-09T23:30:18Z,2022-03-02T19:44:12Z,2022-03-02T19:44:12Z,MERGED,True,128,19,1,https://github.com/baallan,add argv_sep option to specify nul replacements in cmdline metric,1,[],https://github.com/ovis-hpc/ovis/pull/881,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/881,"The cmdline metric normally is a nul separated/terminated string list in a single char array. The len metric cmdline_len also available.
Currently no text-based store format handles embedded nul correctly. Allowing the user to specify a single char separator allows cmdline to be represented in the way the admin chooses. In the long term, converting cmdline from a string metric to a list of strings metric is the right thing to do.
This patch also fixes missing \n on several log messages.","The cmdline metric normally is a nul separated/terminated string list in a single char array. The len metric cmdline_len also available.
Currently no text-based store format handles embedded nul correctly. Allowing the user to specify a single char separator allows cmdline to be represented in the way the admin chooses. In the long term, converting cmdline from a string metric to a list of strings metric is the right thing to do.
This patch also fixes missing \n on several log messages.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,882,2022-02-22T06:21:52Z,2022-04-20T16:50:05Z,2022-04-20T16:50:05Z,CLOSED,False,209,11,4,https://github.com/baallan,add value expansion by other keys in av_list,2,[],https://github.com/ovis-hpc/ovis/pull/882,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/882,"This allows common usage patterns to be expressed without change across plugins, for example:
config name=foo job_set=${host}/jobid component_id=${COMPONENT_ID} schema=~{name} instance=${host}/~{schema}

might expand to
config name=foo job_set=nid0001/jobid component_id=123 schema=foo instance=nid0001/foo

and the equivalent maestro yaml line count shrinks by 75% and reduces the chance of typos and misapplication of a common patterns.","This allows common usage patterns to be expressed without change across plugins, for example:
config name=foo job_set=${host}/jobid component_id=${COMPONENT_ID} schema=~{name} instance=${host}/~{schema}

might expand to
config name=foo job_set=nid0001/jobid component_id=123 schema=foo instance=nid0001/foo

and the equivalent maestro yaml line count shrinks by 75% and reduces the chance of typos and misapplication of a common patterns.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,882,2022-02-22T06:21:52Z,2022-04-20T16:50:05Z,2022-04-20T16:50:05Z,CLOSED,False,209,11,4,https://github.com/baallan,add value expansion by other keys in av_list,2,[],https://github.com/ovis-hpc/ovis/pull/882,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/882#issuecomment-1049140064,"This allows common usage patterns to be expressed without change across plugins, for example:
config name=foo job_set=${host}/jobid component_id=${COMPONENT_ID} schema=~{name} instance=${host}/~{schema}

might expand to
config name=foo job_set=nid0001/jobid component_id=123 schema=foo instance=nid0001/foo

and the equivalent maestro yaml line count shrinks by 75% and reduces the chance of typos and misapplication of a common patterns.",@tom95858 This patch addresses ovis-hpc/maestro#15 and allows the hard-coding of patterns that do no always apply to be removed from maestro.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,882,2022-02-22T06:21:52Z,2022-04-20T16:50:05Z,2022-04-20T16:50:05Z,CLOSED,False,209,11,4,https://github.com/baallan,add value expansion by other keys in av_list,2,[],https://github.com/ovis-hpc/ovis/pull/882,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/882#issuecomment-1049198715,"This allows common usage patterns to be expressed without change across plugins, for example:
config name=foo job_set=${host}/jobid component_id=${COMPONENT_ID} schema=~{name} instance=${host}/~{schema}

might expand to
config name=foo job_set=nid0001/jobid component_id=123 schema=foo instance=nid0001/foo

and the equivalent maestro yaml line count shrinks by 75% and reduces the chance of typos and misapplication of a common patterns.",@nichamon could you please review this? Thanks.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,882,2022-02-22T06:21:52Z,2022-04-20T16:50:05Z,2022-04-20T16:50:05Z,CLOSED,False,209,11,4,https://github.com/baallan,add value expansion by other keys in av_list,2,[],https://github.com/ovis-hpc/ovis/pull/882,https://github.com/nichamon,4,https://github.com/ovis-hpc/ovis/pull/882#issuecomment-1049935974,"This allows common usage patterns to be expressed without change across plugins, for example:
config name=foo job_set=${host}/jobid component_id=${COMPONENT_ID} schema=~{name} instance=${host}/~{schema}

might expand to
config name=foo job_set=nid0001/jobid component_id=123 schema=foo instance=nid0001/foo

and the equivalent maestro yaml line count shrinks by 75% and reduces the chance of typos and misapplication of a common patterns.","@nichamon could you please review this? Thanks.

Sure!",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,882,2022-02-22T06:21:52Z,2022-04-20T16:50:05Z,2022-04-20T16:50:05Z,CLOSED,False,209,11,4,https://github.com/baallan,add value expansion by other keys in av_list,2,[],https://github.com/ovis-hpc/ovis/pull/882,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/882#issuecomment-1050117446,"This allows common usage patterns to be expressed without change across plugins, for example:
config name=foo job_set=${host}/jobid component_id=${COMPONENT_ID} schema=~{name} instance=${host}/~{schema}

might expand to
config name=foo job_set=nid0001/jobid component_id=123 schema=foo instance=nid0001/foo

and the equivalent maestro yaml line count shrinks by 75% and reduces the chance of typos and misapplication of a common patterns.","@baallan it seems like this only replaces values with other values on the same config line. In other words, there's no dictionary of 'vars' that you are referring to, just other strings in the same line.  Can you please provide an example of how this reduces the maestro config line count by %75? It seems like this belongs in the YAML parsing in maestro where one can refer to any value in the config file as opposed  to just a single line in the v4 config file.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,882,2022-02-22T06:21:52Z,2022-04-20T16:50:05Z,2022-04-20T16:50:05Z,CLOSED,False,209,11,4,https://github.com/baallan,add value expansion by other keys in av_list,2,[],https://github.com/ovis-hpc/ovis/pull/882,https://github.com/baallan,6,https://github.com/ovis-hpc/ovis/pull/882#issuecomment-1050210359,"This allows common usage patterns to be expressed without change across plugins, for example:
config name=foo job_set=${host}/jobid component_id=${COMPONENT_ID} schema=~{name} instance=${host}/~{schema}

might expand to
config name=foo job_set=nid0001/jobid component_id=123 schema=foo instance=nid0001/foo

and the equivalent maestro yaml line count shrinks by 75% and reduces the chance of typos and misapplication of a common patterns.","@baallan it seems like this only replaces values with other values on the same config line. In other words, there's no dictionary of 'vars' that you are referring to, just other strings in the same line.

The dictionary here is indeed other things in the same line, which is a limitation of this implementation. Supporting ~{} syntax at the yaml parse level would be highly preferable.
The anchor syntax lets us reduce repetitive config lines that introduce the possibility of typos, a very good thing.
The anchor substitution syntax in yaml suffers from the following well-known limitations, over which the ~{} interpretation for our application provides easy-to-understand improvements:

Anchor names are global and cannot be redefined, so they do not provide the context-sensitivity this solution provides.
Lists cannot be composed from multiple anchor substitutions

These deficiencies have been discussed in the yaml community and where it is firmly concluded (by the developers, not by the numerous users that bring it up every year in frustration on stackoverflow) that all the various proposed solutions belong at the scope of the application interpretation and not in the yaml spec.

Can you please provide an example of how this reduces the maestro config line count by %75? It seems like this belongs in the YAML parsing in maestro where one can refer to any value in the config file as opposed to just a single line in the v4 config file.

yes. The sampler config syntax has some incorrectly hardwired attributes in the present maestro implementation (maestro bug #15). The clean yaml solution is to put those attributes into the yaml anchor for sampler defaults and let them be overridden in the usual yaml way. But the yaml anchor needs to include ~{name} (the context) to be useful.
For an example from our arm cluster (sampler plugin configuration)
wc -l $NO TILDE_VERSION
122
wc -l $TILDE_VERSION
54
(yaml blocks below)
The tilde version of sampler configs:
Incidentally this would be even smaller if we put the ~{} processing into the yaml instead of ldms because then we need only one anchor and one <<: in most sampler cases (reducing most plugins to two lines only instead of 4, lowering the potential line count to ~30).
    plugins :
      - <<: *sampler-time-defaults
        name : jobid
        config :
          <<: *sampler-config-defaults
          file : /var/run/ldms.slurm.jobinfo
      - <<: *sampler-time-defaults
        name : lustre_client
        config :
          <<: *sampler-config-defaults
      - <<: *sampler-time-defaults
        name : loadavg
        config :
          <<: *sampler-config-defaults
      - <<: *sampler-time-defaults
        name : tx2mon
        config :
          <<: *sampler-config-defaults
      - <<: *sampler-time-defaults
        name : meminfo
        config :
          <<: *sampler-config-defaults
      - <<: *sampler-time-defaults
        name : lnet_stats
        config :
          <<: *sampler-config-defaults
      - <<: *sampler-time-defaults
        name : vmstat
        config :
          <<: *sampler-config-defaults
      - <<: *sampler-time-defaults
        name : procnfs
        config :
          <<: *sampler-config-defaults
      - <<: *sampler-time-defaults
        name : procstat
        config :
          <<: *sampler-config-defaults
          maxcpu : 0
          schema : procstat_0
      - <<: *sampler-time-defaults
        name : procnet
        config :
          <<: *sampler-config-defaults
      - <<: *sampler-time-defaults
        name : sysclassib
        config :
          <<: *sampler-config-defaults
          ports : ""mlx5_0.1,mlx5_1.1""
          schema : sysclassib_lserver
      - <<: *sampler-time-defaults
        name : dstat
        config :
          <<: *sampler-config-defaults

the no-tilde version
  - name :  jobid 
    interval :  1s 
    offset :  0s 
    config :
      producer : ${host}
      component_id :  ${COMPONENT_ID} 
      instance :  ${host}/~{schema} 
      perm :  0644 
      schema :  ~{name}
      file :  /var/run/ldms.slurm.jobinfo 
  - name :  lustre_client 
    interval :  1s 
    offset :  0s
    config :
      producer : ${host}
      component_id :  ${COMPONENT_ID} 
      instance :  ${host}/~{schema} 
      job_set :  ${host}/jobid 
      perm :  0644 
      schema :  ~{name}
  - name :  loadavg 
    interval :  1s 
    offset :  0s
    config :
      producer : ${host}
      component_id :  ${COMPONENT_ID} 
      instance :  ${host}/~{schema} 
      job_set :  ${host}/jobid 
      perm :  0644 
      schema :  ~{name} 
  - name :  tx2mon 
    interval :  1s 
    offset :  0s 
    config : 
      producer : ${host}
      component_id :  ${COMPONENT_ID} 
      instance :  ${host}/~{schema} 
      job_set :  ${host}/jobid 
      perm :  0644 
      schema :  ~{name} 
  - name :  meminfo 
    interval :  1s 
    offset :  0s 
    config : 
      producer : ${host}
      component_id :  ${COMPONENT_ID} 
      instance :  ${host}/~{schema} 
      job_set :  ${host}/jobid 
      perm :  0644 
      schema :  ~{name} 
  - name :  lnet_stats 
    interval :  1s 
    offset :  0s 
    config : 
      producer : ${host}
      component_id :  ${COMPONENT_ID} 
      instance :  ${host}/~{schema} 
      job_set :  ${host}/jobid 
      perm :  0644 
      schema :  ~{name}
  - name :  vmstat 
    interval :  1s 
    offset :  0s 
    config : 
      producer : ${host}
      component_id :  ${COMPONENT_ID} 
      instance :  ${host}/~{schema} 
      job_set :  ${host}/jobid 
      perm :  0644 
      schema :  ~{name}
  - name :  procnfs 
    interval :  1s 
    offset :  0s 
    config : 
      producer : ${host}
      component_id :  ${COMPONENT_ID} 
      instance :  ${host}/~{schema} 
      job_set :  ${host}/jobid 
      perm :  0644 
      schema :  ~{name}
  - name :  procstat 
    interval :  1s 
    offset :  0s
    config : 
      producer : ${host}
      component_id :  ${COMPONENT_ID} 
      instance :  ${host}/~{schema} 
      job_set :  ${host}/jobid 
      perm :  0644 
      schema :  procstat_0
      maxcpu : 0
  - name :  procnet 
    interval :  1s 
    offset :  0s
    config : 
      producer : ${host}
      component_id :  ${COMPONENT_ID} 
      instance :  ${host}/~{schema} 
      job_set :  ${host}/jobid 
      perm :  0644 
      schema :  ~{name}
  - name :  sysclassib 
    interval :  1s 
    offset :  0s
    config :  
      producer : ${host}
      component_id :  ${COMPONENT_ID} 
      instance :  ${host}/~{schema} 
      job_set :  ${host}/jobid 
      perm :  0644 
      schema :  sysclassib_lserver
      ports :  mlx5_0.1,mlx5_1.1 
    name :  dstat 
    interval :  1s 
    offset :  0s
    config : 
      producer : ${host}
      component_id :  ${COMPONENT_ID}  
      job_set :  ${host}/jobid 
      schema :  ~{name}
      perm : ""0644""

for completeness, the anchors used in the tilde version are:
sampler_time_defaults : &sampler-time-defaults
  interval : ""1s""
  offset : ""0s""

sampler_config_defaults : &sampler-config-defaults
  job_set : ${host}/jobid
  component_id: ${COMPONENT_ID}
  schema : ~{name}
  instance : ${host}/~{schema}
  job_set : ${host}/jobid
  perm : ""0644""",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,882,2022-02-22T06:21:52Z,2022-04-20T16:50:05Z,2022-04-20T16:50:05Z,CLOSED,False,209,11,4,https://github.com/baallan,add value expansion by other keys in av_list,2,[],https://github.com/ovis-hpc/ovis/pull/882,https://github.com/baallan,7,https://github.com/ovis-hpc/ovis/pull/882#issuecomment-1050226271,"This allows common usage patterns to be expressed without change across plugins, for example:
config name=foo job_set=${host}/jobid component_id=${COMPONENT_ID} schema=~{name} instance=${host}/~{schema}

might expand to
config name=foo job_set=nid0001/jobid component_id=123 schema=foo instance=nid0001/foo

and the equivalent maestro yaml line count shrinks by 75% and reduces the chance of typos and misapplication of a common patterns.","To implement ~{} support based on pyyaml/maestro takes a tilde substitution class (~50 lines python) and a tree walk performing substitutions on the parsed yaml config (~30 lines python).   These were done last year. If our ultimate goal is to eliminate python and have ldmsd.c consume yaml, then these two bits of python would have to be translated.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,882,2022-02-22T06:21:52Z,2022-04-20T16:50:05Z,2022-04-20T16:50:05Z,CLOSED,False,209,11,4,https://github.com/baallan,add value expansion by other keys in av_list,2,[],https://github.com/ovis-hpc/ovis/pull/882,https://github.com/tom95858,8,https://github.com/ovis-hpc/ovis/pull/882#issuecomment-1050310328,"This allows common usage patterns to be expressed without change across plugins, for example:
config name=foo job_set=${host}/jobid component_id=${COMPONENT_ID} schema=~{name} instance=${host}/~{schema}

might expand to
config name=foo job_set=nid0001/jobid component_id=123 schema=foo instance=nid0001/foo

and the equivalent maestro yaml line count shrinks by 75% and reduces the chance of typos and misapplication of a common patterns.","I'm bit confused because both examples use ~{} substitution. The key difference seems to be that one version uses a merge key to set the defaults which also includes ~{}.
In any event. I am inclined add the ~{} substitution to the yaml parsing in maestro.
WRT ldmsd consuming YAML directly, the maestro --local mode is intended for this purpose.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,882,2022-02-22T06:21:52Z,2022-04-20T16:50:05Z,2022-04-20T16:50:05Z,CLOSED,False,209,11,4,https://github.com/baallan,add value expansion by other keys in av_list,2,[],https://github.com/ovis-hpc/ovis/pull/882,https://github.com/baallan,9,https://github.com/ovis-hpc/ovis/pull/882#issuecomment-1050316750,"This allows common usage patterns to be expressed without change across plugins, for example:
config name=foo job_set=${host}/jobid component_id=${COMPONENT_ID} schema=~{name} instance=${host}/~{schema}

might expand to
config name=foo job_set=nid0001/jobid component_id=123 schema=foo instance=nid0001/foo

and the equivalent maestro yaml line count shrinks by 75% and reduces the chance of typos and misapplication of a common patterns.","Apologies: Where the longer (no-tilde label) example has ~{name} or ~{schema} they would have to be replaced with the context-specific values by the admin yaml writer. As the point was to demonstrate the line count, i didn't manually do all the string substitutions. You can clearly see, though, that a yaml anchor such as ' *name or *schema ' wouldn't work since these are global.
I have the ~{} substitution coded for the maestro software level, if you accept that it is useful from this example.
That would let me close this PR.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,882,2022-02-22T06:21:52Z,2022-04-20T16:50:05Z,2022-04-20T16:50:05Z,CLOSED,False,209,11,4,https://github.com/baallan,add value expansion by other keys in av_list,2,[],https://github.com/ovis-hpc/ovis/pull/882,https://github.com/nichamon,10,https://github.com/ovis-hpc/ovis/pull/882#issuecomment-1050353122,"This allows common usage patterns to be expressed without change across plugins, for example:
config name=foo job_set=${host}/jobid component_id=${COMPONENT_ID} schema=~{name} instance=${host}/~{schema}

might expand to
config name=foo job_set=nid0001/jobid component_id=123 schema=foo instance=nid0001/foo

and the equivalent maestro yaml line count shrinks by 75% and reduces the chance of typos and misapplication of a common patterns.","@baallan @tom95858 I reviewed the code in detail before I saw your conversation.
The changes in this pull request are not a subset of the (to-be-done) changes in Maestro. They serve different purposes. The benefits of the changes are that users don't have to type the same strings multiple times on the same line in LDMSD config files, as shown in Ben's first comment. They have no effect on Maestro YAML config file line count, as shown in Ben's Maestro config files above. I'm not sure about the changes' impact on the production environment as we use Maestro instead of writing LDMSD config files directly.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,882,2022-02-22T06:21:52Z,2022-04-20T16:50:05Z,2022-04-20T16:50:05Z,CLOSED,False,209,11,4,https://github.com/baallan,add value expansion by other keys in av_list,2,[],https://github.com/ovis-hpc/ovis/pull/882,https://github.com/morrone,11,https://github.com/ovis-hpc/ovis/pull/882#issuecomment-1050358542,"This allows common usage patterns to be expressed without change across plugins, for example:
config name=foo job_set=${host}/jobid component_id=${COMPONENT_ID} schema=~{name} instance=${host}/~{schema}

might expand to
config name=foo job_set=nid0001/jobid component_id=123 schema=foo instance=nid0001/foo

and the equivalent maestro yaml line count shrinks by 75% and reduces the chance of typos and misapplication of a common patterns.","@baallan @tom95858 I reviewed the code in detail before I saw your conversation.
The change doesn't affect the maestro YAML config file line count, which is also shown by the examples Ben gave above. The changes' benefit is that users don't have to type the same strings multiple times on the same line in LDMSD config files.

I think if you reread Ben's example, you will see that is shows a maestro YAML example where it reduces the line count. Reducing duplicated typing on the same line very likely would not be sufficient reason to introduce this change.
I think I am also currently leaning towards preferring this support in maestro.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,882,2022-02-22T06:21:52Z,2022-04-20T16:50:05Z,2022-04-20T16:50:05Z,CLOSED,False,209,11,4,https://github.com/baallan,add value expansion by other keys in av_list,2,[],https://github.com/ovis-hpc/ovis/pull/882,https://github.com/baallan,12,https://github.com/ovis-hpc/ovis/pull/882#issuecomment-1050381925,"This allows common usage patterns to be expressed without change across plugins, for example:
config name=foo job_set=${host}/jobid component_id=${COMPONENT_ID} schema=~{name} instance=${host}/~{schema}

might expand to
config name=foo job_set=nid0001/jobid component_id=123 schema=foo instance=nid0001/foo

and the equivalent maestro yaml line count shrinks by 75% and reduces the chance of typos and misapplication of a common patterns.","I think if you reread Ben's example, you will see that is shows a maestro YAML example where it reduces the line count. Reducing duplicated typing on the same line very likely would not be sufficient reason to introduce this change.

In the ldmsd config language, the point of the ~{} is not to simplify a single line but to let the same line be used over and over for different plugins with only the name= attribute having to be redefined.

I think I am also currently leaning towards preferring this support in maestro.

That's where I want to put it too, because if I put it in maestro/yaml, i can do substitutions not only within the line but from the nearest upward scope in the yaml tree.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,882,2022-02-22T06:21:52Z,2022-04-20T16:50:05Z,2022-04-20T16:50:05Z,CLOSED,False,209,11,4,https://github.com/baallan,add value expansion by other keys in av_list,2,[],https://github.com/ovis-hpc/ovis/pull/882,https://github.com/baallan,13,https://github.com/ovis-hpc/ovis/pull/882#issuecomment-1102899721,"This allows common usage patterns to be expressed without change across plugins, for example:
config name=foo job_set=${host}/jobid component_id=${COMPONENT_ID} schema=~{name} instance=${host}/~{schema}

might expand to
config name=foo job_set=nid0001/jobid component_id=123 schema=foo instance=nid0001/foo

and the equivalent maestro yaml line count shrinks by 75% and reduces the chance of typos and misapplication of a common patterns.","@tom95858  I believe the conversation above suggests the right design solution is to put the ~{} expansion feature into maestro, so this can be closed.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,883,2022-02-22T19:41:31Z,2022-02-24T17:44:50Z,2022-02-24T17:44:50Z,MERGED,True,44,49,23,https://github.com/baallan,move files in share/doc/ovis-ldms-$version to share/doc/ovis-ldms,1,[],https://github.com/ovis-hpc/ovis/pull/883,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/883,"This makes our install more standard but most likely will require
minor mods to rpm spec files, as noted in #366.","This makes our install more standard but most likely will require
minor mods to rpm spec files, as noted in #366.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,884,2022-02-22T21:01:42Z,2022-02-24T17:43:27Z,2022-02-24T18:07:13Z,MERGED,True,0,1,1,https://github.com/nick-enoent,Bug fix for ldmsd_listen_new error handling,1,[],https://github.com/ovis-hpc/ovis/pull/884,https://github.com/nick-enoent,1,https://github.com/ovis-hpc/ovis/pull/884,"Fix error where ldmsd hardcodes error to ENOMEM if
ldmsd_listen_new fails to create listen object","Fix error where ldmsd hardcodes error to ENOMEM if
ldmsd_listen_new fails to create listen object",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,885,2022-02-23T22:27:04Z,2022-02-23T23:42:25Z,2022-02-23T23:42:25Z,MERGED,True,26,1,2,https://github.com/narategithub,Addressing passive zap endpoint thread starvation,1,[],https://github.com/ovis-hpc/ovis/pull/885,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/885,"When a passive endpoint was assigned to a thread that has an active
endpoint with high activity, the routine of the passive endpoint (e.g.
accepting a connection) could be starved. The routines of the passive
endpoints are quite light-weighted. So, this patch assigns the passive
endpoints into its own thread to avoid the starvation.","When a passive endpoint was assigned to a thread that has an active
endpoint with high activity, the routine of the passive endpoint (e.g.
accepting a connection) could be starved. The routines of the passive
endpoints are quite light-weighted. So, this patch assigns the passive
endpoints into its own thread to avoid the starvation.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,885,2022-02-23T22:27:04Z,2022-02-23T23:42:25Z,2022-02-23T23:42:25Z,MERGED,True,26,1,2,https://github.com/narategithub,Addressing passive zap endpoint thread starvation,1,[],https://github.com/ovis-hpc/ovis/pull/885,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/885#issuecomment-1049276765,"When a passive endpoint was assigned to a thread that has an active
endpoint with high activity, the routine of the passive endpoint (e.g.
accepting a connection) could be starved. The routines of the passive
endpoints are quite light-weighted. So, this patch assigns the passive
endpoints into its own thread to avoid the starvation.","@tom95858,
I've tested this patch against ldms-test, and also manually gdb the sampler and the aggregator to see that the passive endpoints are being assigned to the passive_ep_thread.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,886,2022-02-24T03:24:13Z,2022-02-24T17:46:03Z,2022-02-24T17:46:03Z,MERGED,True,16,0,2,https://github.com/baallan,update tx2mon to run (noop) without errors on non-tx2,2,[],https://github.com/ovis-hpc/ovis/pull/886,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/886,"This adds support for globally loading tx2mon sampler on mixed node-type systems.
Produces no sets or errors unless hardware type is aarch64.","This adds support for globally loading tx2mon sampler on mixed node-type systems.
Produces no sets or errors unless hardware type is aarch64.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,887,2022-02-24T17:17:08Z,2022-02-24T18:11:09Z,2022-02-24T18:11:15Z,MERGED,True,21,2,1,https://github.com/tom95858,Add transaction timeout in store_sos,1,[],https://github.com/ovis-hpc/ovis/pull/887,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/887,"The SOS store uses transactions to coordinate with
storage management activities such as roll-over. If
one of these activities fails and leaves the transaction
open, it would hang the SOS store and associated I/O
thread. This changes adds a configurable timeout that
the store will wait to acquire a transaction.","The SOS store uses transactions to coordinate with
storage management activities such as roll-over. If
one of these activities fails and leaves the transaction
open, it would hang the SOS store and associated I/O
thread. This changes adds a configurable timeout that
the store will wait to acquire a transaction.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,888,2022-03-01T19:47:02Z,2022-03-10T06:29:14Z,2022-03-10T06:29:15Z,MERGED,True,1,0,1,https://github.com/narategithub,Fix `include` ldmsd config command,1,[],https://github.com/ovis-hpc/ovis/pull/888,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/888,"The include path=FILE ldmsd config command was supposed to be in the
priority command list so that it is processed in the first scan.","The include path=FILE ldmsd config command was supposed to be in the
priority command list so that it is processed in the first scan.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,889,2022-03-01T19:47:25Z,2022-03-10T06:29:46Z,2022-03-10T06:29:46Z,MERGED,True,16,4,1,https://github.com/narategithub,Fix `test_sampler` string tokenizer,1,[],https://github.com/ovis-hpc/ovis/pull/889,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/889,"Fix the bug that __strtok() tokenizer in test_sampler did not return
the last token. Also add a note to clarify why we cannot use
strtok() or strtok_r().","Fix the bug that __strtok() tokenizer in test_sampler did not return
the last token. Also add a note to clarify why we cannot use
strtok() or strtok_r().",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,890,2022-03-03T04:27:52Z,2022-03-09T19:10:03Z,2022-03-09T19:10:52Z,MERGED,True,4,19,2,https://github.com/narategithub,Do not keep unused zap sock IO entries,1,[],https://github.com/ovis-hpc/ovis/pull/890,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/890,"zap_sock IO entries were kept in the free_q so that it can be used
immediately for the next IO alloc. This patch free() the IO entries
instead of keeping it around.","zap_sock IO entries were kept in the free_q so that it can be used
immediately for the next IO alloc. This patch free() the IO entries
instead of keeping it around.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,890,2022-03-03T04:27:52Z,2022-03-09T19:10:03Z,2022-03-09T19:10:52Z,MERGED,True,4,19,2,https://github.com/narategithub,Do not keep unused zap sock IO entries,1,[],https://github.com/ovis-hpc/ovis/pull/890,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/890#issuecomment-1057657216,"zap_sock IO entries were kept in the free_q so that it can be used
immediately for the next IO alloc. This patch free() the IO entries
instead of keeping it around.","@tom95858 This is a part of the stream ""leak"" you asked me to look into. Please do not merge this yet. I think the OOM on L1 you described was caused by IO queue to L2 growing w/o bound due to a lot of incoming stream (from L0 / samplers) and just 1 output pipe to L2.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,890,2022-03-03T04:27:52Z,2022-03-09T19:10:03Z,2022-03-09T19:10:52Z,MERGED,True,4,19,2,https://github.com/narategithub,Do not keep unused zap sock IO entries,1,[],https://github.com/ovis-hpc/ovis/pull/890,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/890#issuecomment-1063264973,"zap_sock IO entries were kept in the free_q so that it can be used
immediately for the next IO alloc. This patch free() the IO entries
instead of keeping it around.","@narategithub Oops, I merged this...",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,891,2022-03-08T22:25:08Z,2022-03-09T19:09:44Z,2022-03-09T19:09:44Z,MERGED,True,2,2,2,https://github.com/baallan,fix lingering references to share/doc/ovis-ldms-VERSION,1,[],https://github.com/ovis-hpc/ovis/pull/891,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/891,this fixes two test drivers that reference share/doc/ovis-ldms that were overlooked in fixing the build files to install under ovis-ldms instead of ovis-ldms-version,this fixes two test drivers that reference share/doc/ovis-ldms that were overlooked in fixing the build files to install under ovis-ldms instead of ovis-ldms-version,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,893,2022-03-09T16:39:49Z,2022-03-10T06:28:37Z,2022-03-10T06:28:37Z,MERGED,True,555,159,3,https://github.com/nichamon,Fix LDMS's heap and rrbt logic,6,[],https://github.com/ovis-hpc/ovis/pull/893,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/893,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,894,2022-03-10T19:59:32Z,2022-03-10T22:26:07Z,2022-05-26T20:07:01Z,MERGED,True,8,8,2,https://github.com/nichamon,Add missing 'static' to the functions in rbt and rrbt,2,[],https://github.com/ovis-hpc/ovis/pull/894,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/894,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,895,2022-03-20T18:47:07Z,2022-03-26T20:57:28Z,2022-03-26T20:57:28Z,MERGED,True,0,2,1,https://github.com/tom95858,Remove the cfg_lock from the callback path,1,[],https://github.com/ovis-hpc/ovis/pull/895,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/895,"The stream recv handler in kokkos_appmon was taking a
lock in the callback path that could deadlock with the
config downcall path.","The stream recv handler in kokkos_appmon was taking a
lock in the callback path that could deadlock with the
config downcall path.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,898,2022-03-24T16:41:15Z,2022-03-26T20:57:39Z,2022-03-26T20:57:39Z,MERGED,True,1364,1,11,https://github.com/narategithub,procnetdev2 and procstat2 (utilizing LDMS Records),6,[],https://github.com/ovis-hpc/ovis/pull/898,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/898,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,900,2022-04-04T15:27:28Z,2022-04-04T18:10:57Z,2022-04-04T18:10:57Z,MERGED,True,1,1,1,https://github.com/narategithub,Fix udata formatting in ldms_ls,1,[],https://github.com/ovis-hpc/ovis/pull/900,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/900,"This patch addresses 2 issues with ldms_ls -lu print format:


Missing a "" "" after udata print, making the udata output globbed
together with the metric data.


When metric udata is 0, the format ""%#""PRIx64 (""%#lx"") does not
print '0x0'. It instead printed just single '0'.


This patch explicitly print the prefix '0x' follows by plain hex print
format without the prefix and a space ( ""0x%"" PRIx64 "" "" ).","This patch addresses 2 issues with ldms_ls -lu print format:


Missing a "" "" after udata print, making the udata output globbed
together with the metric data.


When metric udata is 0, the format ""%#""PRIx64 (""%#lx"") does not
print '0x0'. It instead printed just single '0'.


This patch explicitly print the prefix '0x' follows by plain hex print
format without the prefix and a space ( ""0x%"" PRIx64 "" "" ).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,902,2022-04-07T19:39:06Z,2022-04-11T21:34:24Z,2022-04-11T21:34:25Z,CLOSED,False,477,0,3,https://github.com/vsurjadidjaja,Create kp_kernel_ldms.cpp,5,[],https://github.com/ovis-hpc/ovis/pull/902,https://github.com/vsurjadidjaja,1,https://github.com/ovis-hpc/ovis/pull/902,Adding Kokkos connector to the current LDMS build. This file is responsible for connecting the application to LDMS and preparing kernel function information to send to LDMS.,Adding Kokkos connector to the current LDMS build. This file is responsible for connecting the application to LDMS and preparing kernel function information to send to LDMS.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,902,2022-04-07T19:39:06Z,2022-04-11T21:34:24Z,2022-04-11T21:34:25Z,CLOSED,False,477,0,3,https://github.com/vsurjadidjaja,Create kp_kernel_ldms.cpp,5,[],https://github.com/ovis-hpc/ovis/pull/902,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/902#issuecomment-1092187552,Adding Kokkos connector to the current LDMS build. This file is responsible for connecting the application to LDMS and preparing kernel function information to send to LDMS.,"Hi Ashley,

Could you please combine these pull requests into a single change? These
change are all related and do not stand alone.

Thanks, Tom
…
On Thu, Apr 7, 2022 at 1:39 PM Vanessa Surjadidjaja < ***@***.***> wrote:
 Adding Kokkos connector to the current LDMS build. This file is
 responsible for connecting the application to LDMS and preparing kernel
 function information to send to LDMS.
 ------------------------------
 You can view, comment on, or merge this pull request online at:

   #902
 Commit Summary

    - ac8a896
    <ac8a896>
    Create kp_kernel_ldms.cpp

 File Changes

 (1 file <https://github.com/ovis-hpc/ovis/pull/902/files>)

    - *A* kokkosConnector/kp_kernel_ldms.cpp
    <https://github.com/ovis-hpc/ovis/pull/902/files#diff-03fbd57aa36543657923fa4cd558c80c45d07ff09274c52bc1fc045427e586cb>
    (269)

 Patch Links:

    - https://github.com/ovis-hpc/ovis/pull/902.patch
    - https://github.com/ovis-hpc/ovis/pull/902.diff

 —
 Reply to this email directly, view it on GitHub
 <#902>, or unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ABVTPXCPIF7DXQFMR6PXWL3VD42WNANCNFSM5S2M7BUQ>
 .
 You are receiving this because you are subscribed to this thread.Message
 ID: ***@***.***>


-- 
Thomas Tucker, President, Open Grid Computing, Inc.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,902,2022-04-07T19:39:06Z,2022-04-11T21:34:24Z,2022-04-11T21:34:25Z,CLOSED,False,477,0,3,https://github.com/vsurjadidjaja,Create kp_kernel_ldms.cpp,5,[],https://github.com/ovis-hpc/ovis/pull/902,https://github.com/vsurjadidjaja,3,https://github.com/ovis-hpc/ovis/pull/902#issuecomment-1095589402,Adding Kokkos connector to the current LDMS build. This file is responsible for connecting the application to LDMS and preparing kernel function information to send to LDMS.,Merging into 1 pull request,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,903,2022-04-07T19:40:30Z,2022-04-11T21:34:09Z,2022-04-11T21:34:10Z,CLOSED,False,179,0,1,https://github.com/vsurjadidjaja,Create kp_kernel_info.h,1,[],https://github.com/ovis-hpc/ovis/pull/903,https://github.com/vsurjadidjaja,1,https://github.com/ovis-hpc/ovis/pull/903,Adding the header file for the Kokkos kernel function information. Organizes and prepares the message to be sent to LDMS.,Adding the header file for the Kokkos kernel function information. Organizes and prepares the message to be sent to LDMS.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,903,2022-04-07T19:40:30Z,2022-04-11T21:34:09Z,2022-04-11T21:34:10Z,CLOSED,False,179,0,1,https://github.com/vsurjadidjaja,Create kp_kernel_info.h,1,[],https://github.com/ovis-hpc/ovis/pull/903,https://github.com/vsurjadidjaja,2,https://github.com/ovis-hpc/ovis/pull/903#issuecomment-1095589202,Adding the header file for the Kokkos kernel function information. Organizes and prepares the message to be sent to LDMS.,Merging into 1 pull request,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,904,2022-04-07T19:41:43Z,2022-04-11T21:33:53Z,2022-04-11T21:33:54Z,CLOSED,False,29,0,1,https://github.com/vsurjadidjaja,Create kp_kernel_timer.h,1,[],https://github.com/ovis-hpc/ovis/pull/904,https://github.com/vsurjadidjaja,1,https://github.com/ovis-hpc/ovis/pull/904,Adding the header file that is responsible for providing the appropriate timer for the Kokkos kernel function messages.,Adding the header file that is responsible for providing the appropriate timer for the Kokkos kernel function messages.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,904,2022-04-07T19:41:43Z,2022-04-11T21:33:53Z,2022-04-11T21:33:54Z,CLOSED,False,29,0,1,https://github.com/vsurjadidjaja,Create kp_kernel_timer.h,1,[],https://github.com/ovis-hpc/ovis/pull/904,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/904#issuecomment-1094162124,Adding the header file that is responsible for providing the appropriate timer for the Kokkos kernel function messages.,"HI @vsurjadidjaja, could you please combine these pull requests into one?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,904,2022-04-07T19:41:43Z,2022-04-11T21:33:53Z,2022-04-11T21:33:54Z,CLOSED,False,29,0,1,https://github.com/vsurjadidjaja,Create kp_kernel_timer.h,1,[],https://github.com/ovis-hpc/ovis/pull/904,https://github.com/vsurjadidjaja,3,https://github.com/ovis-hpc/ovis/pull/904#issuecomment-1095588950,Adding the header file that is responsible for providing the appropriate timer for the Kokkos kernel function messages.,Merging into 1 pull request,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,905,2022-04-08T19:07:04Z,2022-04-12T17:25:13Z,2022-04-12T17:25:13Z,MERGED,True,156,10,5,https://github.com/nick-enoent,Add updtr_match_list request,1,[],https://github.com/ovis-hpc/ovis/pull/905,https://github.com/nick-enoent,1,https://github.com/ovis-hpc/ovis/pull/905,"Returns the matched metric sets of updater policies
Add updtr_match_list to ldmsd_controller","Returns the matched metric sets of updater policies
Add updtr_match_list to ldmsd_controller",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,906,2022-04-11T21:35:22Z,2022-04-14T23:38:17Z,2022-04-14T23:38:17Z,MERGED,True,463,0,3,https://github.com/vsurjadidjaja,Adding Kokkos Connector,8,[],https://github.com/ovis-hpc/ovis/pull/906,https://github.com/vsurjadidjaja,1,https://github.com/ovis-hpc/ovis/pull/906,Adding files for the Kokkos Connector,Adding files for the Kokkos Connector,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,907,2022-04-12T20:15:06Z,2022-04-20T20:55:28Z,2022-04-20T23:13:53Z,MERGED,True,283,12,7,https://github.com/baallan,"Add include/exclude/rate options, fix producer and rate computations",2,[],https://github.com/ovis-hpc/ovis/pull/907,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/907,"Updated man page and added check driver.
The include/exclude options allow admins to indicate ports of interest
and prevent queries at every sample which generate nuisance log messages
from mad libraries.
The rate option allows admins to suppress redundant data when desired.
The producer option is now used to set the producer metadata.
The rate computation now returns -1 when the rate computed is
invalid for any reason; this permits plots of the rate metrics
to work with standard tools which may otherwise detect large
spurious values that mis-scale the plot axis.","Updated man page and added check driver.
The include/exclude options allow admins to indicate ports of interest
and prevent queries at every sample which generate nuisance log messages
from mad libraries.
The rate option allows admins to suppress redundant data when desired.
The producer option is now used to set the producer metadata.
The rate computation now returns -1 when the rate computed is
invalid for any reason; this permits plots of the rate metrics
to work with standard tools which may otherwise detect large
spurious values that mis-scale the plot axis.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,907,2022-04-12T20:15:06Z,2022-04-20T20:55:28Z,2022-04-20T23:13:53Z,MERGED,True,283,12,7,https://github.com/baallan,"Add include/exclude/rate options, fix producer and rate computations",2,[],https://github.com/ovis-hpc/ovis/pull/907,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/907#issuecomment-1097179087,"Updated man page and added check driver.
The include/exclude options allow admins to indicate ports of interest
and prevent queries at every sample which generate nuisance log messages
from mad libraries.
The rate option allows admins to suppress redundant data when desired.
The producer option is now used to set the producer metadata.
The rate computation now returns -1 when the rate computed is
invalid for any reason; this permits plots of the rate metrics
to work with standard tools which may otherwise detect large
spurious values that mis-scale the plot axis.","@morrone I added an options and fixes here to make the ibmad sampler deployable on my production systems. The intent is that without any additional options specified, the prior behaviors persist. The exceptions are: producer is now set where before we always got the empty string and now the rate computation is either valid and precise or has a -1 result instead of an imprecise negative or nan result.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,907,2022-04-12T20:15:06Z,2022-04-20T20:55:28Z,2022-04-20T23:13:53Z,MERGED,True,283,12,7,https://github.com/baallan,"Add include/exclude/rate options, fix producer and rate computations",2,[],https://github.com/ovis-hpc/ovis/pull/907,https://github.com/morrone,3,https://github.com/ovis-hpc/ovis/pull/907#issuecomment-1097366697,"Updated man page and added check driver.
The include/exclude options allow admins to indicate ports of interest
and prevent queries at every sample which generate nuisance log messages
from mad libraries.
The rate option allows admins to suppress redundant data when desired.
The producer option is now used to set the producer metadata.
The rate computation now returns -1 when the rate computed is
invalid for any reason; this permits plots of the rate metrics
to work with standard tools which may otherwise detect large
spurious values that mis-scale the plot axis.","As a general comment for future PRs, it would help if the different logical changes where in different commits.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,907,2022-04-12T20:15:06Z,2022-04-20T20:55:28Z,2022-04-20T23:13:53Z,MERGED,True,283,12,7,https://github.com/baallan,"Add include/exclude/rate options, fix producer and rate computations",2,[],https://github.com/ovis-hpc/ovis/pull/907,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/907#issuecomment-1099530004,"Updated man page and added check driver.
The include/exclude options allow admins to indicate ports of interest
and prevent queries at every sample which generate nuisance log messages
from mad libraries.
The rate option allows admins to suppress redundant data when desired.
The producer option is now used to set the producer metadata.
The rate computation now returns -1 when the rate computed is
invalid for any reason; this permits plots of the rate metrics
to work with standard tools which may otherwise detect large
spurious values that mis-scale the plot axis.",@morrone any other items (aside from squashing it after you review the update?),True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,907,2022-04-12T20:15:06Z,2022-04-20T20:55:28Z,2022-04-20T23:13:53Z,MERGED,True,283,12,7,https://github.com/baallan,"Add include/exclude/rate options, fix producer and rate computations",2,[],https://github.com/ovis-hpc/ovis/pull/907,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/907#issuecomment-1102866045,"Updated man page and added check driver.
The include/exclude options allow admins to indicate ports of interest
and prevent queries at every sample which generate nuisance log messages
from mad libraries.
The rate option allows admins to suppress redundant data when desired.
The producer option is now used to set the producer metadata.
The rate computation now returns -1 when the rate computed is
invalid for any reason; this permits plots of the rate metrics
to work with standard tools which may otherwise detect large
spurious values that mis-scale the plot axis.","This seems like a lot of configuration complexity and code to remove a ""nuisance warning"" from a log file. @morrone, @baallan is this change ready to go?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,907,2022-04-12T20:15:06Z,2022-04-20T20:55:28Z,2022-04-20T23:13:53Z,MERGED,True,283,12,7,https://github.com/baallan,"Add include/exclude/rate options, fix producer and rate computations",2,[],https://github.com/ovis-hpc/ovis/pull/907,https://github.com/baallan,6,https://github.com/ovis-hpc/ovis/pull/907#issuecomment-1102877103,"Updated man page and added check driver.
The include/exclude options allow admins to indicate ports of interest
and prevent queries at every sample which generate nuisance log messages
from mad libraries.
The rate option allows admins to suppress redundant data when desired.
The producer option is now used to set the producer metadata.
The rate computation now returns -1 when the rate computed is
invalid for any reason; this permits plots of the rate metrics
to work with standard tools which may otherwise detect large
spurious values that mis-scale the plot axis.","7000 nodes * 6 log lines @1Hz tends to annoy my admins.
I think it's ready to go, but @morrone hasn't reexamined (or at least not left us a new message).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,907,2022-04-12T20:15:06Z,2022-04-20T20:55:28Z,2022-04-20T23:13:53Z,MERGED,True,283,12,7,https://github.com/baallan,"Add include/exclude/rate options, fix producer and rate computations",2,[],https://github.com/ovis-hpc/ovis/pull/907,https://github.com/morrone,7,https://github.com/ovis-hpc/ovis/pull/907#issuecomment-1104428757,"Updated man page and added check driver.
The include/exclude options allow admins to indicate ports of interest
and prevent queries at every sample which generate nuisance log messages
from mad libraries.
The rate option allows admins to suppress redundant data when desired.
The producer option is now used to set the producer metadata.
The rate computation now returns -1 when the rate computed is
invalid for any reason; this permits plots of the rate metrics
to work with standard tools which may otherwise detect large
spurious values that mis-scale the plot axis.","Things have been busy lately, but I'll run through it now.
@tom95858 the complexity of the implementation was my biggest concern too. We could of course look for changes at a lower rate than the sampling rate to reduce messages. But there is still good reason, I think, to have include/exclude options. The messages are still going to be excessive even at lower scan intervals, and they come from somewhere other than ldms. It is going to confuse and annoy the sysadmins.
Also, on our ppc64le systems (but the architecture might not be relevant to the issue) we have IB devices with ""virtual"" interfaces. There are also unused virtual interfaces that are present but inactive. When we probe those interfaces it also causes error messages in the logs, but more importantly the probing call is slow. It is on the order of a few seconds sometimes, so it would interrupt ldms's sampling ny time we scan them. So we would probably need this capability here at LLNL also if we go into production with monitoring IB on those clusters.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,907,2022-04-12T20:15:06Z,2022-04-20T20:55:28Z,2022-04-20T23:13:53Z,MERGED,True,283,12,7,https://github.com/baallan,"Add include/exclude/rate options, fix producer and rate computations",2,[],https://github.com/ovis-hpc/ovis/pull/907,https://github.com/morrone,8,https://github.com/ovis-hpc/ovis/pull/907#issuecomment-1104473141,"Updated man page and added check driver.
The include/exclude options allow admins to indicate ports of interest
and prevent queries at every sample which generate nuisance log messages
from mad libraries.
The rate option allows admins to suppress redundant data when desired.
The producer option is now used to set the producer metadata.
The rate computation now returns -1 when the rate computed is
invalid for any reason; this permits plots of the rate metrics
to work with standard tools which may otherwise detect large
spurious values that mis-scale the plot axis.","@tom95858 , whoa, hey you jumped the gun on the merge there. The revised code looks like it has a bug to me in the ""match all"" logic.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,907,2022-04-12T20:15:06Z,2022-04-20T20:55:28Z,2022-04-20T23:13:53Z,MERGED,True,283,12,7,https://github.com/baallan,"Add include/exclude/rate options, fix producer and rate computations",2,[],https://github.com/ovis-hpc/ovis/pull/907,https://github.com/morrone,9,https://github.com/ovis-hpc/ovis/pull/907#issuecomment-1104482904,"Updated man page and added check driver.
The include/exclude options allow admins to indicate ports of interest
and prevent queries at every sample which generate nuisance log messages
from mad libraries.
The rate option allows admins to suppress redundant data when desired.
The producer option is now used to set the producer metadata.
The rate computation now returns -1 when the rate computed is
invalid for any reason; this permits plots of the rate metrics
to work with standard tools which may otherwise detect large
spurious values that mis-scale the plot axis.","Ah, OK, I see where ports_bits is set to UINT64_MAX. Thats just misleading for the reader to see it set to the wrong value with no comment, and then reset later on in the code. But it will work.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,907,2022-04-12T20:15:06Z,2022-04-20T20:55:28Z,2022-04-20T23:13:53Z,MERGED,True,283,12,7,https://github.com/baallan,"Add include/exclude/rate options, fix producer and rate computations",2,[],https://github.com/ovis-hpc/ovis/pull/907,https://github.com/baallan,10,https://github.com/ovis-hpc/ovis/pull/907#issuecomment-1104540589,"Updated man page and added check driver.
The include/exclude options allow admins to indicate ports of interest
and prevent queries at every sample which generate nuisance log messages
from mad libraries.
The rate option allows admins to suppress redundant data when desired.
The producer option is now used to set the producer metadata.
The rate computation now returns -1 when the rate computed is
invalid for any reason; this permits plots of the rate metrics
to work with standard tools which may otherwise detect large
spurious values that mis-scale the plot axis.","I concur that ibmad_sampler can be slow on my sockdirect systems where 3 of 4 ib ports are 'never used' (although 2 appear 'active', only the 1st can perform successful mad calls). The slowness affects the timing of other the samplers.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,908,2022-04-13T02:00:13Z,2022-05-13T18:26:39Z,2022-05-26T20:06:53Z,MERGED,True,623,0,4,https://github.com/nichamon,Add LDMS's ldms_mval_t setter/getter APIs,1,[],https://github.com/ovis-hpc/ovis/pull/908,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/908,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,909,2022-04-13T04:32:09Z,2022-05-24T19:40:07Z,2022-05-26T20:06:28Z,CLOSED,False,1098,64,17,https://github.com/nichamon,Make LDMSD collect and report stream information,12,[],https://github.com/ovis-hpc/ovis/pull/909,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/909,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,909,2022-04-13T04:32:09Z,2022-05-24T19:40:07Z,2022-05-26T20:06:28Z,CLOSED,False,1098,64,17,https://github.com/nichamon,Make LDMSD collect and report stream information,12,[],https://github.com/ovis-hpc/ovis/pull/909,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/909#issuecomment-1097553139,,"@tom95858 @narategithub @nick-enoent LDMSD sends a stream update to clients when a new stream is available. It only reports the information about the new stream. The information isn't helpful for the load/balancing because we don't have the rate of the new stream yet. I need to think more about how/when LDMSD will send a stream update with useful information for both new streams and existing streams. For your information, with this patch, clients can ask for information on the available streams periodically (multiple times).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,909,2022-04-13T04:32:09Z,2022-05-24T19:40:07Z,2022-05-26T20:06:28Z,CLOSED,False,1098,64,17,https://github.com/nichamon,Make LDMSD collect and report stream information,12,[],https://github.com/ovis-hpc/ovis/pull/909,https://github.com/baallan,3,https://github.com/ovis-hpc/ovis/pull/909#issuecomment-1128986634,,"@nichamon please explain ""Purge stream publishers if it's inactive"". In particular, it's perfectly reasonable for a long lived hpc publisher (e.g. something monitoring process creation events) to be idle for many hours/days. Under what conditions is something publishing intermittently ""inactive""? If its underlying connection to the first receiving daemon is gone? If the connection is there but just quiet?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,909,2022-04-13T04:32:09Z,2022-05-24T19:40:07Z,2022-05-26T20:06:28Z,CLOSED,False,1098,64,17,https://github.com/nichamon,Make LDMSD collect and report stream information,12,[],https://github.com/ovis-hpc/ovis/pull/909,https://github.com/nichamon,4,https://github.com/ovis-hpc/ovis/pull/909#issuecomment-1129053848,,"@nichamon please explain ""Purge stream publishers if it's inactive"". In particular, it's perfectly reasonable for a long lived hpc publisher (e.g. something monitoring process creation events) to be idle for many hours/days. Under what conditions is something publishing intermittently ""inactive""? If its underlying connection to the first receiving daemon is gone? If the connection is there but just quiet?

This code purges a publisher after not sending any messages to LDMSD for a specific duration. The duration is configurable. I have thought about your case. I also consider how slurm_notifier works, which creates a new connection for each message. I decided not to use connected/disconnected events as a measurement.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,909,2022-04-13T04:32:09Z,2022-05-24T19:40:07Z,2022-05-26T20:06:28Z,CLOSED,False,1098,64,17,https://github.com/nichamon,Make LDMSD collect and report stream information,12,[],https://github.com/ovis-hpc/ovis/pull/909,https://github.com/baallan,5,https://github.com/ovis-hpc/ovis/pull/909#issuecomment-1129078097,,"For bursty clients (which vary between frequent events and long quiet periods and are a common if not the dominant pattern in hpc) assuming a new connection with each event forces poor performance.  Since the duration is configurable, I suggest the duration be configurable by the calling client (which is the only place where behavior expectations are actually known). A global default which is only globally tunable cannot satisfy two use cases simultaneously. It is likely we will always have at least two use cases: application data (probably minutes timeout desired) and system events (process start/end- timeout desired in days), and a third use case of an IB fabric sampler rebalancing its load periodically via stream messages (timeout in hours).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,910,2022-04-19T02:14:22Z,2022-04-19T17:06:04Z,2022-04-19T17:06:04Z,MERGED,True,202,39,5,https://github.com/nichamon,Allow users getting record information from a record type handle,1,[],https://github.com/ovis-hpc/ovis/pull/910,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/910,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,911,2022-04-19T14:05:34Z,2022-04-19T17:07:07Z,2022-05-26T20:06:58Z,MERGED,True,1194,576,2,https://github.com/nichamon,Add list and record support in the test_sampler plugin,2,[],https://github.com/ovis-hpc/ovis/pull/911,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/911,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,912,2022-04-19T14:07:01Z,2022-04-19T17:07:42Z,2022-05-26T20:06:56Z,MERGED,True,1293,595,5,https://github.com/nichamon,Add the list and record support in store_csv and store_sos,2,[],https://github.com/ovis-hpc/ovis/pull/912,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/912,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,913,2022-04-20T19:57:47Z,2022-05-26T17:33:09Z,2022-05-26T20:06:23Z,MERGED,True,220,21,4,https://github.com/nichamon,Add an API to create a set with a heap of a specific size,1,[],https://github.com/ovis-hpc/ovis/pull/913,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/913,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,913,2022-04-20T19:57:47Z,2022-05-26T17:33:09Z,2022-05-26T20:06:23Z,MERGED,True,220,21,4,https://github.com/nichamon,Add an API to create a set with a heap of a specific size,1,[],https://github.com/ovis-hpc/ovis/pull/913,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/913#issuecomment-1132015815,,@nichamon sorry for letting this sit so long. I think we discussed adding a new API to set an attribute in the schema to set the heap size to override the default (e.g. ldms_schema_heap_size_set). We also discussed adding this new API. For some reason we chose the later. Do you recall why?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,913,2022-04-20T19:57:47Z,2022-05-26T17:33:09Z,2022-05-26T20:06:23Z,MERGED,True,220,21,4,https://github.com/nichamon,Add an API to create a set with a heap of a specific size,1,[],https://github.com/ovis-hpc/ovis/pull/913,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/913#issuecomment-1132392396,,"@nichamon sorry for letting this sit so long. I think we discussed adding a new API to set an attribute in the schema to set the heap size to override the default (e.g. ldms_schema_heap_size_set). We also discussed adding this new API. For some reason we chose the later. Do you recall why?

We wanted to solve the problem that LDMSD may fail to add a new list item either because the heap is too small or the free heap memory is fragmented. An easy thing to do is delete the current set and create a new set with a bigger heap. If LDMS provides only ldms_set_new_with_heap(...., size_t heap_sz), authors can create a set in one call. Compared to LDMS providing only ldms_schema_heap_sz_get(), authors need to call the API and then ldms_set_new(). It is more convenient to have ldms_set_new_with_heap(). Another reason is that the heap is per set, not per schema, so IMO it is natural to provide the heap size when creating a new set.
I saw another reason we cannot provide ldms_schema_heap_size_set() while I implemented the change. ldms_schema does not cache the total heap size. It caches the heap size for each metric list. The total heap size is calculated at set creation.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,913,2022-04-20T19:57:47Z,2022-05-26T17:33:09Z,2022-05-26T20:06:23Z,MERGED,True,220,21,4,https://github.com/nichamon,Add an API to create a set with a heap of a specific size,1,[],https://github.com/ovis-hpc/ovis/pull/913,https://github.com/tom95858,4,https://github.com/ovis-hpc/ovis/pull/913#issuecomment-1135019984,,"Hi @nichamon, there seem to be merge conflicts now. Can you please rebase and push?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,913,2022-04-20T19:57:47Z,2022-05-26T17:33:09Z,2022-05-26T20:06:23Z,MERGED,True,220,21,4,https://github.com/nichamon,Add an API to create a set with a heap of a specific size,1,[],https://github.com/ovis-hpc/ovis/pull/913,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/913#issuecomment-1138672281,,"@nichamon, could you please fix the merge conflicts in this patch?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,913,2022-04-20T19:57:47Z,2022-05-26T17:33:09Z,2022-05-26T20:06:23Z,MERGED,True,220,21,4,https://github.com/nichamon,Add an API to create a set with a heap of a specific size,1,[],https://github.com/ovis-hpc/ovis/pull/913,https://github.com/nichamon,6,https://github.com/ovis-hpc/ovis/pull/913#issuecomment-1138741118,,"@nichamon, could you please fix the merge conflicts in this patch?

I rebased the patch on top of OVIS-4.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,914,2022-04-28T16:36:10Z,2022-04-28T17:56:12Z,2022-04-28T17:56:21Z,MERGED,True,4,4,1,https://github.com/tom95858,Fix printf format warning for %lld,1,[],https://github.com/ovis-hpc/ovis/pull/914,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/914,"The %lld results in a warning on some systems. Convert to
the portable PRIu64 format specifier.","The %lld results in a warning on some systems. Convert to
the portable PRIu64 format specifier.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,916,2022-05-02T15:40:53Z,2022-05-02T19:37:46Z,2022-05-02T19:37:47Z,MERGED,True,2,2,1,https://github.com/narategithub,Fix store_csv not storing data when there are no lists,1,[],https://github.com/ovis-hpc/ovis/pull/916,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/916,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,917,2022-05-13T01:43:51Z,2022-05-13T18:25:15Z,2022-05-13T18:25:15Z,MERGED,True,2,1,1,https://github.com/narategithub,Fix ldms record flag bugs,1,[],https://github.com/ovis-hpc/ovis/pull/917,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/917,"This patch addresses the following issues:

The flags of records in the array of records were not initialized
properly.
The flag check condition in ldms_record_card() contained a
typological error (the && logical-and operation should be &
bitwise-and operation).","This patch addresses the following issues:

The flags of records in the array of records were not initialized
properly.
The flag check condition in ldms_record_card() contained a
typological error (the && logical-and operation should be &
bitwise-and operation).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,918,2022-05-17T18:28:33Z,2022-05-23T16:44:20Z,2022-05-26T20:06:52Z,MERGED,True,254,5,2,https://github.com/nichamon,Extend the test_sampler plugin to be able to publish stream periodically,1,[],https://github.com/ovis-hpc/ovis/pull/918,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/918,"With the change, the test_sampler plugin can be configured to publish
stream data periodically from a file to a specific client. The feature
can be used in testing to simulate an LDMSD's component that publishes
stream data to a client.","With the change, the test_sampler plugin can be configured to publish
stream data periodically from a file to a specific client. The feature
can be used in testing to simulate an LDMSD's component that publishes
stream data to a client.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,919,2022-05-19T00:05:51Z,2022-05-23T16:43:52Z,2022-05-23T16:43:53Z,CLOSED,False,1,1,1,https://github.com/baallan,fix bug in ldmsd option processing,1,[],https://github.com/ovis-hpc/ovis/pull/919,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/919,"when -n is not specified and -x is not specified, null pointer
dereference occurs in computing daemon name; this patch fixes that.","when -n is not specified and -x is not specified, null pointer
dereference occurs in computing daemon name; this patch fixes that.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,919,2022-05-19T00:05:51Z,2022-05-23T16:43:52Z,2022-05-23T16:43:53Z,CLOSED,False,1,1,1,https://github.com/baallan,fix bug in ldmsd option processing,1,[],https://github.com/ovis-hpc/ovis/pull/919,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/919#issuecomment-1132013549,"when -n is not specified and -x is not specified, null pointer
dereference occurs in computing daemon name; this patch fixes that.","@narategithub, @baallan the only place this is used is in the failover logic when informing the peer of your name. It seems like this approach is rife for misconfiguration. @narategithub can we get rid of this code and change ldmsd_myname_get() to construct the name by constructing the name from the local address in  f->ax (see ldmsd_failover.c:995.) If we can, then I propose we get rid of the global variable 'myname' altogether.
That said, is there any reason we need the LDMSD_ATTR_PEER_NAME at all? The failover peer could figure this out from the remote address in the transport on which it receives the LDMSD_FAILOVER_PAIR_REQ.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,919,2022-05-19T00:05:51Z,2022-05-23T16:43:52Z,2022-05-23T16:43:53Z,CLOSED,False,1,1,1,https://github.com/baallan,fix bug in ldmsd option processing,1,[],https://github.com/ovis-hpc/ovis/pull/919,https://github.com/narategithub,3,https://github.com/ovis-hpc/ovis/pull/919#issuecomment-1132030098,"when -n is not specified and -x is not specified, null pointer
dereference occurs in computing daemon name; this patch fixes that.","@tom95858 ldmsd may listen on multiple transports (e.g. ugni on 411 and sock on 412). In such case, what should be the name?
Or, since the failover is destined to be removed, in favor of miestro, shall we remove both failover and myname now? I'm inclined to remove failover + myname now :)
I believe the 'myname' is only used by the failover code.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,919,2022-05-19T00:05:51Z,2022-05-23T16:43:52Z,2022-05-23T16:43:53Z,CLOSED,False,1,1,1,https://github.com/baallan,fix bug in ldmsd option processing,1,[],https://github.com/ovis-hpc/ovis/pull/919,https://github.com/tom95858,4,https://github.com/ovis-hpc/ovis/pull/919#issuecomment-1132033025,"when -n is not specified and -x is not specified, null pointer
dereference occurs in computing daemon name; this patch fixes that.","Hi @narategithub, I get all that, but the peer already knows the name. It's sitting in the transport handle on which it receives the PEER config request. All the myname does it make it possible to mess it up with the -n option; or am I missing something?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,919,2022-05-19T00:05:51Z,2022-05-23T16:43:52Z,2022-05-23T16:43:53Z,CLOSED,False,1,1,1,https://github.com/baallan,fix bug in ldmsd option processing,1,[],https://github.com/ovis-hpc/ovis/pull/919,https://github.com/baallan,5,https://github.com/ovis-hpc/ovis/pull/919#issuecomment-1132064350,"when -n is not specified and -x is not specified, null pointer
dereference occurs in computing daemon name; this patch fixes that.","@tom95858 fine w/me to remove failover, etc but I don't know if Jim has any non-sandia sites using it.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,919,2022-05-19T00:05:51Z,2022-05-23T16:43:52Z,2022-05-23T16:43:53Z,CLOSED,False,1,1,1,https://github.com/baallan,fix bug in ldmsd option processing,1,[],https://github.com/ovis-hpc/ovis/pull/919,https://github.com/narategithub,6,https://github.com/ovis-hpc/ovis/pull/919#issuecomment-1132064880,"when -n is not specified and -x is not specified, null pointer
dereference occurs in computing daemon name; this patch fixes that.",@tom95858 The -n was there because ldmsd does not know what to pick for the name in the case of multiple listening transports. The name is the identity to verify that the failover config really intend to pair with the peer.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,919,2022-05-19T00:05:51Z,2022-05-23T16:43:52Z,2022-05-23T16:43:53Z,CLOSED,False,1,1,1,https://github.com/baallan,fix bug in ldmsd option processing,1,[],https://github.com/ovis-hpc/ovis/pull/919,https://github.com/baallan,7,https://github.com/ovis-hpc/ovis/pull/919#issuecomment-1132083030,"when -n is not specified and -x is not specified, null pointer
dereference occurs in computing daemon name; this patch fixes that.","@narategithub seems odd to have -n but nothing else failover related on the command line. looks like all other failover aspects are in the config file, so why not retire -n (and add to config file if not already covered)?",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,919,2022-05-19T00:05:51Z,2022-05-23T16:43:52Z,2022-05-23T16:43:53Z,CLOSED,False,1,1,1,https://github.com/baallan,fix bug in ldmsd option processing,1,[],https://github.com/ovis-hpc/ovis/pull/919,https://github.com/tom95858,8,https://github.com/ovis-hpc/ovis/pull/919#issuecomment-1132116826,"when -n is not specified and -x is not specified, null pointer
dereference occurs in computing daemon name; this patch fixes that.","@narategithub, I get that, but you're already connected to the peer. The failover connection has already been established and it's sitting in f->ax. I realize that you may get configuration information messages over a connection different than the one you intend to exchange failover information over, but it seems like it's already too late at this point..the connection is already established and therefore the peer has already been elected. Is there some path that creates a new connection after this happens? Please point me at this code.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,919,2022-05-19T00:05:51Z,2022-05-23T16:43:52Z,2022-05-23T16:43:53Z,CLOSED,False,1,1,1,https://github.com/baallan,fix bug in ldmsd option processing,1,[],https://github.com/ovis-hpc/ovis/pull/919,https://github.com/narategithub,9,https://github.com/ovis-hpc/ovis/pull/919#issuecomment-1132145225,"when -n is not specified and -x is not specified, null pointer
dereference occurs in computing daemon name; this patch fixes that.","@tom95858
On ldmsd_1, if failover_config is configured with peer_name=ldmsd_2, the ldmsd_1 only accept failover pair request from the peer that declare its name as ldmsd_2.

  
    
      ovis/ldms/src/ldmsd/ldmsd_failover.c
    
    
         Line 1944
      in
      b7e7158
    
  
  
    

        
          
           int failover_pair_handler(ldmsd_req_ctxt_t req) 
        
    
  


If the peer is named other than ldmsd_2, the peer will get an error in the response and the connection is terminated:

  
    
      ovis/ldms/src/ldmsd/ldmsd_failover.c
    
    
        Lines 963 to 967
      in
      b7e7158
    
  
  
    

        
          
           if (rc) { 
        

        
          
           	f->conn_state = FAILOVER_CONN_STATE_ERROR; 
        

        
          
           	ldms_xprt_close(f->ax); 
        

        
          
           	/* the disconnect path will handle the state change */ 
        

        
          
           } 
        
    
  


If the peer has the correct name ldmsd_2, the peer (ldmsd_2) will then proceed to request configurations from ldmsd_1:

  
    
      ovis/ldms/src/ldmsd/ldmsd_failover.c
    
    
        Lines 957 to 960
      in
      b7e7158
    
  
  
    

        
          
           ldmsd_linfo(""Failover pairing success, peer: %s\n"", f->peer_name); 
        

        
          
            
        

        
          
           f->conn_state = FAILOVER_CONN_STATE_RESETTING; 
        

        
          
           rc = __failover_reset_and_request_peercfg(f);",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,919,2022-05-19T00:05:51Z,2022-05-23T16:43:52Z,2022-05-23T16:43:53Z,CLOSED,False,1,1,1,https://github.com/baallan,fix bug in ldmsd option processing,1,[],https://github.com/ovis-hpc/ovis/pull/919,https://github.com/tom95858,10,https://github.com/ovis-hpc/ovis/pull/919#issuecomment-1134903634,"when -n is not specified and -x is not specified, null pointer
dereference occurs in computing daemon name; this patch fixes that.","As we've discussed, this pull request is supplanted by #922",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,920,2022-05-19T19:07:03Z,2022-05-20T16:08:27Z,2022-05-20T16:08:27Z,MERGED,True,1,1,1,https://github.com/nick-enoent,Format byte strings when returning DirSet info,1,[],https://github.com/ovis-hpc/ovis/pull/920,https://github.com/nick-enoent,1,https://github.com/ovis-hpc/ovis/pull/920,"Return DirSet info dict key:values formatted as strings, rather than byte strings","Return DirSet info dict key:values formatted as strings, rather than byte strings",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,921,2022-05-20T17:43:20Z,2022-05-23T18:45:28Z,2022-05-23T18:45:28Z,MERGED,True,93,23,11,https://github.com/baallan,"fix compid, producer, log level in lustre dynamic plugins",1,[],https://github.com/ovis-hpc/ovis/pull/921,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/921,"reduced log level to 'debug' for checks of the top directory
that will be missing when each lustre service is off (an expected condition
in some deployments).
added component_id and producer option processing from attributes
for consistency with other plugins and updated man pages.
for mdt,ost which do not run on compute nodes, leaving out jobid metric.","reduced log level to 'debug' for checks of the top directory
that will be missing when each lustre service is off (an expected condition
in some deployments).
added component_id and producer option processing from attributes
for consistency with other plugins and updated man pages.
for mdt,ost which do not run on compute nodes, leaving out jobid metric.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,921,2022-05-20T17:43:20Z,2022-05-23T18:45:28Z,2022-05-23T18:45:28Z,MERGED,True,93,23,11,https://github.com/baallan,"fix compid, producer, log level in lustre dynamic plugins",1,[],https://github.com/ovis-hpc/ovis/pull/921,https://github.com/baallan,2,https://github.com/ovis-hpc/ovis/pull/921#issuecomment-1133164111,"reduced log level to 'debug' for checks of the top directory
that will be missing when each lustre service is off (an expected condition
in some deployments).
added component_id and producer option processing from attributes
for consistency with other plugins and updated man pages.
for mdt,ost which do not run on compute nodes, leaving out jobid metric.",Operation of these changes was verified on stria at snl.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,921,2022-05-20T17:43:20Z,2022-05-23T18:45:28Z,2022-05-23T18:45:28Z,MERGED,True,93,23,11,https://github.com/baallan,"fix compid, producer, log level in lustre dynamic plugins",1,[],https://github.com/ovis-hpc/ovis/pull/921,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/921#issuecomment-1133198530,"reduced log level to 'debug' for checks of the top directory
that will be missing when each lustre service is off (an expected condition
in some deployments).
added component_id and producer option processing from attributes
for consistency with other plugins and updated man pages.
for mdt,ost which do not run on compute nodes, leaving out jobid metric.",@morrone this looks fine to me. Could you please review?,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,921,2022-05-20T17:43:20Z,2022-05-23T18:45:28Z,2022-05-23T18:45:28Z,MERGED,True,93,23,11,https://github.com/baallan,"fix compid, producer, log level in lustre dynamic plugins",1,[],https://github.com/ovis-hpc/ovis/pull/921,https://github.com/tom95858,4,https://github.com/ovis-hpc/ovis/pull/921#issuecomment-1135019094,"reduced log level to 'debug' for checks of the top directory
that will be missing when each lustre service is off (an expected condition
in some deployments).
added component_id and producer option processing from attributes
for consistency with other plugins and updated man pages.
for mdt,ost which do not run on compute nodes, leaving out jobid metric.","I guess this is OK with @morrone, so I will merge it.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,922,2022-05-20T20:13:27Z,2022-05-26T14:56:55Z,2022-05-26T14:56:55Z,MERGED,True,37,14,4,https://github.com/narategithub,Fix ldmsd name issues & terminate ldmsd if no listening xprt,3,[],https://github.com/ovis-hpc/ovis/pull/922,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/922,"Enforce -n <OUR_NAME> and failover_config peer_name=<PEER_NAME>
Terminate LDMSD if there is no listening transport","Enforce -n <OUR_NAME> and failover_config peer_name=<PEER_NAME>
Terminate LDMSD if there is no listening transport",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,922,2022-05-20T20:13:27Z,2022-05-26T14:56:55Z,2022-05-26T14:56:55Z,MERGED,True,37,14,4,https://github.com/narategithub,Fix ldmsd name issues & terminate ldmsd if no listening xprt,3,[],https://github.com/ovis-hpc/ovis/pull/922,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/922#issuecomment-1133317911,"Enforce -n <OUR_NAME> and failover_config peer_name=<PEER_NAME>
Terminate LDMSD if there is no listening transport",@tom I've sniff tested this with /ldms/test/failover-simple/ in OVIS source tree & failover_test in ldms-test repo.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,922,2022-05-20T20:13:27Z,2022-05-26T14:56:55Z,2022-05-26T14:56:55Z,MERGED,True,37,14,4,https://github.com/narategithub,Fix ldmsd name issues & terminate ldmsd if no listening xprt,3,[],https://github.com/ovis-hpc/ovis/pull/922,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/922#issuecomment-1133472337,"Enforce -n <OUR_NAME> and failover_config peer_name=<PEER_NAME>
Terminate LDMSD if there is no listening transport","@baallan, please confirm this fixes the crash you saw.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,922,2022-05-20T20:13:27Z,2022-05-26T14:56:55Z,2022-05-26T14:56:55Z,MERGED,True,37,14,4,https://github.com/narategithub,Fix ldmsd name issues & terminate ldmsd if no listening xprt,3,[],https://github.com/ovis-hpc/ovis/pull/922,https://github.com/baallan,4,https://github.com/ovis-hpc/ovis/pull/922#issuecomment-1134809700,"Enforce -n <OUR_NAME> and failover_config peer_name=<PEER_NAME>
Terminate LDMSD if there is no listening transport","@tom95858 I will check the case I was previously concerned with.
Based on the commit comments, it appears this patch requires that there be some listener by the end of command line and input file processing. however, there are valid use cases (such as store of pulled data w/out providing listener, in a security oriented situation) where no listener is desired.
If the listener requirement is enforced only when a fail-over mechanism requires a listener, then that is fine.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,922,2022-05-20T20:13:27Z,2022-05-26T14:56:55Z,2022-05-26T14:56:55Z,MERGED,True,37,14,4,https://github.com/narategithub,Fix ldmsd name issues & terminate ldmsd if no listening xprt,3,[],https://github.com/ovis-hpc/ovis/pull/922,https://github.com/tom95858,5,https://github.com/ovis-hpc/ovis/pull/922#issuecomment-1134902211,"Enforce -n <OUR_NAME> and failover_config peer_name=<PEER_NAME>
Terminate LDMSD if there is no listening transport","@narategithub based on Ben's comment, can you please change this patch to require either a transport (i.e. -x) or a configuration file (-c). Running the daemon without one or the other is an error.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,922,2022-05-20T20:13:27Z,2022-05-26T14:56:55Z,2022-05-26T14:56:55Z,MERGED,True,37,14,4,https://github.com/narategithub,Fix ldmsd name issues & terminate ldmsd if no listening xprt,3,[],https://github.com/ovis-hpc/ovis/pull/922,https://github.com/narategithub,6,https://github.com/ovis-hpc/ovis/pull/922#issuecomment-1135324981,"Enforce -n <OUR_NAME> and failover_config peer_name=<PEER_NAME>
Terminate LDMSD if there is no listening transport",@tom95858 @baallan done. Also tested with ldms-test/failover_test && tested by hand with/witout -c/-x combinations.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,922,2022-05-20T20:13:27Z,2022-05-26T14:56:55Z,2022-05-26T14:56:55Z,MERGED,True,37,14,4,https://github.com/narategithub,Fix ldmsd name issues & terminate ldmsd if no listening xprt,3,[],https://github.com/ovis-hpc/ovis/pull/922,https://github.com/baallan,7,https://github.com/ovis-hpc/ovis/pull/922#issuecomment-1136404861,"Enforce -n <OUR_NAME> and failover_config peer_name=<PEER_NAME>
Terminate LDMSD if there is no listening transport","@tom95858 This fixes the crash i saw. it needs a more useful log message, as already noted.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,922,2022-05-20T20:13:27Z,2022-05-26T14:56:55Z,2022-05-26T14:56:55Z,MERGED,True,37,14,4,https://github.com/narategithub,Fix ldmsd name issues & terminate ldmsd if no listening xprt,3,[],https://github.com/ovis-hpc/ovis/pull/922,https://github.com/tom95858,8,https://github.com/ovis-hpc/ovis/pull/922#issuecomment-1137010622,"Enforce -n <OUR_NAME> and failover_config peer_name=<PEER_NAME>
Terminate LDMSD if there is no listening transport","Hi @baallan, could you please propose a better error message.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,922,2022-05-20T20:13:27Z,2022-05-26T14:56:55Z,2022-05-26T14:56:55Z,MERGED,True,37,14,4,https://github.com/narategithub,Fix ldmsd name issues & terminate ldmsd if no listening xprt,3,[],https://github.com/ovis-hpc/ovis/pull/922,https://github.com/tom95858,9,https://github.com/ovis-hpc/ovis/pull/922#issuecomment-1137896498,"Enforce -n <OUR_NAME> and failover_config peer_name=<PEER_NAME>
Terminate LDMSD if there is no listening transport","@narategithub, if this is ok with you please make the log message change Ben suggests.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,922,2022-05-20T20:13:27Z,2022-05-26T14:56:55Z,2022-05-26T14:56:55Z,MERGED,True,37,14,4,https://github.com/narategithub,Fix ldmsd name issues & terminate ldmsd if no listening xprt,3,[],https://github.com/ovis-hpc/ovis/pull/922,https://github.com/narategithub,10,https://github.com/ovis-hpc/ovis/pull/922#issuecomment-1138036844,"Enforce -n <OUR_NAME> and failover_config peer_name=<PEER_NAME>
Terminate LDMSD if there is no listening transport",I think the original warning message is informative enough .. anyway let's move on and change it. I'll update the patch soon.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,922,2022-05-20T20:13:27Z,2022-05-26T14:56:55Z,2022-05-26T14:56:55Z,MERGED,True,37,14,4,https://github.com/narategithub,Fix ldmsd name issues & terminate ldmsd if no listening xprt,3,[],https://github.com/ovis-hpc/ovis/pull/922,https://github.com/narategithub,11,https://github.com/ovis-hpc/ovis/pull/922#issuecomment-1138038265,"Enforce -n <OUR_NAME> and failover_config peer_name=<PEER_NAME>
Terminate LDMSD if there is no listening transport",@tom95858 I think this is ready to merge.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,923,2022-05-23T17:21:09Z,2022-05-26T14:59:00Z,2022-05-26T20:06:47Z,MERGED,True,59,28,2,https://github.com/nichamon,Add ldms_xprt_names() API to obtain the local and remote addresses,1,[],https://github.com/ovis-hpc/ovis/pull/923,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/923,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,923,2022-05-23T17:21:09Z,2022-05-26T14:59:00Z,2022-05-26T20:06:47Z,MERGED,True,59,28,2,https://github.com/nichamon,Add ldms_xprt_names() API to obtain the local and remote addresses,1,[],https://github.com/ovis-hpc/ovis/pull/923,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/923#issuecomment-1134947836,,@tom95858 The patch is a part of the stream information changes.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,923,2022-05-23T17:21:09Z,2022-05-26T14:59:00Z,2022-05-26T20:06:47Z,MERGED,True,59,28,2,https://github.com/nichamon,Add ldms_xprt_names() API to obtain the local and remote addresses,1,[],https://github.com/ovis-hpc/ovis/pull/923,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/923#issuecomment-1135326771,,"I agree with you that ldms_xprt_names() is thread-safe, but __ldms_xprt_names() is not thread-safe.
I just pushed the patch that uses the caller buffers and gets rid of __ldms_xprt_names(), the static buffers, and the lock.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,924,2022-05-23T17:34:54Z,2022-05-23T18:40:17Z,2022-05-26T20:06:48Z,MERGED,True,5,1,1,https://github.com/nichamon,Make ldmsd_controller receive a single config command at the cmd-line,1,[],https://github.com/ovis-hpc/ovis/pull/924,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/924,"With the patch, users can give a single config command at the command line.
--cmd  is a new ldmsd_controller's command-line option. For example,
ldmsd_controller -x  -p  -h  --cmd 'prdcr_status'
ldmsd_controller -x  -p  -h  --cmd 'prdcr_start name=node0001'","With the patch, users can give a single config command at the command line.
--cmd  is a new ldmsd_controller's command-line option. For example,
ldmsd_controller -x  -p  -h  --cmd 'prdcr_status'
ldmsd_controller -x  -p  -h  --cmd 'prdcr_start name=node0001'",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,924,2022-05-23T17:34:54Z,2022-05-23T18:40:17Z,2022-05-26T20:06:48Z,MERGED,True,5,1,1,https://github.com/nichamon,Make ldmsd_controller receive a single config command at the cmd-line,1,[],https://github.com/ovis-hpc/ovis/pull/924,https://github.com/tom95858,2,https://github.com/ovis-hpc/ovis/pull/924#issuecomment-1134966169,"With the patch, users can give a single config command at the command line.
--cmd  is a new ldmsd_controller's command-line option. For example,
ldmsd_controller -x  -p  -h  --cmd 'prdcr_status'
ldmsd_controller -x  -p  -h  --cmd 'prdcr_start name=node0001'","@nichamon, how is this better than just
echo prdcr_status | ldmsd_controller --...",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,924,2022-05-23T17:34:54Z,2022-05-23T18:40:17Z,2022-05-26T20:06:48Z,MERGED,True,5,1,1,https://github.com/nichamon,Make ldmsd_controller receive a single config command at the cmd-line,1,[],https://github.com/ovis-hpc/ovis/pull/924,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/924#issuecomment-1135003472,"With the patch, users can give a single config command at the command line.
--cmd  is a new ldmsd_controller's command-line option. For example,
ldmsd_controller -x  -p  -h  --cmd 'prdcr_status'
ldmsd_controller -x  -p  -h  --cmd 'prdcr_start name=node0001'","@nichamon, how is this better than just echo prdcr_status | ldmsd_controller --...

I don't know whether it's better than echo and pipe method besides the change allowing users to send a single config command without invoking 3 commands. The echo and pipe overhead are insignificant.
I don't do echo and then pipe (for an ancient reason which I forgot what it was), and that's why I added the new command-line option.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,925,2022-05-24T03:38:19Z,2022-05-26T14:57:51Z,2022-05-26T20:06:46Z,MERGED,True,13,3,2,https://github.com/nichamon,Fix a config transport memory corruption,1,[],https://github.com/ovis-hpc/ovis/pull/925,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/925,"Without the patch, the config transport referenced by ldmsd_req_ctxt objects
points to memory on the stack. LDMSD may access the config transport's
memory after it has been reused.","Without the patch, the config transport referenced by ldmsd_req_ctxt objects
points to memory on the stack. LDMSD may access the config transport's
memory after it has been reused.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,925,2022-05-24T03:38:19Z,2022-05-26T14:57:51Z,2022-05-26T20:06:46Z,MERGED,True,13,3,2,https://github.com/nichamon,Fix a config transport memory corruption,1,[],https://github.com/ovis-hpc/ovis/pull/925,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/925#issuecomment-1135367190,"Without the patch, the config transport referenced by ldmsd_req_ctxt objects
points to memory on the stack. LDMSD may access the config transport's
memory after it has been reused.",@tom95858 I found the bug when I implemented the stream info logic.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,926,2022-05-24T03:41:14Z,2022-05-26T14:58:15Z,2022-05-26T20:06:44Z,MERGED,True,4,5,1,https://github.com/nichamon,Fix the set_route response handler,1,[],https://github.com/ovis-hpc/ovis/pull/926,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/926,"The patch fixes the attribute length. Without the patch, the client
cannot unpack the set_route response.","The patch fixes the attribute length. Without the patch, the client
cannot unpack the set_route response.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,927,2022-05-24T19:38:20Z,2022-05-26T15:00:31Z,2022-05-26T20:06:31Z,MERGED,True,36,0,3,https://github.com/nichamon,Allow applications to set LDMS transport's context,1,[],https://github.com/ovis-hpc/ovis/pull/927,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/927,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,927,2022-05-24T19:38:20Z,2022-05-26T15:00:31Z,2022-05-26T20:06:31Z,MERGED,True,36,0,3,https://github.com/nichamon,Allow applications to set LDMS transport's context,1,[],https://github.com/ovis-hpc/ovis/pull/927,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/927#issuecomment-1136358757,,@tom95858 The stream_info patch uses the API to verify if an LDMS transport endpoint connects to a producer.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,928,2022-05-24T20:02:30Z,2022-05-26T15:01:04Z,2022-05-26T20:06:26Z,MERGED,True,1082,47,17,https://github.com/nichamon,Allow LDMSD interfaces to query stream information,10,[],https://github.com/ovis-hpc/ovis/pull/928,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/928,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,928,2022-05-24T20:02:30Z,2022-05-26T15:01:04Z,2022-05-26T20:06:26Z,MERGED,True,1082,47,17,https://github.com/nichamon,Allow LDMSD interfaces to query stream information,10,[],https://github.com/ovis-hpc/ovis/pull/928,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/928#issuecomment-1136379491,,The pull request is on top of #927 and #925.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,928,2022-05-24T20:02:30Z,2022-05-26T15:01:04Z,2022-05-26T20:06:26Z,MERGED,True,1082,47,17,https://github.com/nichamon,Allow LDMSD interfaces to query stream information,10,[],https://github.com/ovis-hpc/ovis/pull/928,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/928#issuecomment-1136705711,,"The patch provides two configuration commands to query the stream information: stream_dir and prdcr_stream_dir.

The stream_dir config message is to query the stream information of an LDSMD.
The prdcr_stream_dir config message is to query the stream information of the producers matched by a regular expression.

Examples of the stream_dir response


Sending a stream_dir request to a sampler daemon (samplerd2)

The sampler daemon received the data of two streams: foo and bar. It subscribed to stream 'foo', but not stream 'bar'. first msg and last msg are the timestamps the sampler daemon has received the first and last messages of the streams. Obviously, there are no producers on the sampler daemons.

This sampler daemon (samplerd1) received the data from stream 'foo', and it subscribed to it.


Sending a stream_dir request to an aggregator

The aggregator received the data from stream 'foo' that samplerd1 and samplerd2 republished. The first line contains the overall information of stream 'foo'. The information in subsection 'producers' is the information per producer. For example, the aggregator has received 6 messages: 2 from samplerd1 and 4 from samplerd2.


An Example of the prdcr_stream_dir response

Sending a prdcr_stream_dir request to an aggregator

The aggregator acted as a proxy that forwarded the stream_dir request to the matched producers and aggregated the result. Since samplerd2 didn't subscribe to stream 'bar', it didn't republish the stream 'bar' data to the aggregator. The stream_dir response didn't include stream 'bar'.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,928,2022-05-24T20:02:30Z,2022-05-26T15:01:04Z,2022-05-26T20:06:26Z,MERGED,True,1082,47,17,https://github.com/nichamon,Allow LDMSD interfaces to query stream information,10,[],https://github.com/ovis-hpc/ovis/pull/928,https://github.com/nichamon,4,https://github.com/ovis-hpc/ovis/pull/928#issuecomment-1136708261,,"In the beginning, Maestro could send the prdcr_stream_dir request to an L1 to get the stream information of each producer. Then, it has the stream names to construct the prdcr_subscribe requests. Later on, it could use stream_dir to get the stream information of an LDMSD or prdcr_stream_dir to the stream information of a set of producers.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,929,2022-05-24T20:56:10Z,2022-05-26T15:02:06Z,2022-05-26T15:02:07Z,MERGED,True,9,3,1,https://github.com/baallan,fix: make ldms_ls error messages more useful & less verbose,1,[],https://github.com/ovis-hpc/ovis/pull/929,https://github.com/baallan,1,https://github.com/ovis-hpc/ovis/pull/929,this eliminates the usage dump where it is inappropriate (when error is not usage syntax) and names the offending unknown option character when it is detected.,this eliminates the usage dump where it is inappropriate (when error is not usage syntax) and names the offending unknown option character when it is detected.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,930,2022-05-25T04:23:04Z,2022-05-27T15:24:56Z,2022-06-02T19:09:56Z,CLOSED,False,473,0,5,https://github.com/nichamon,Add a thermal sampler that monitors coretemp,1,[],https://github.com/ovis-hpc/ovis/pull/930,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/930,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,930,2022-05-25T04:23:04Z,2022-05-27T15:24:56Z,2022-06-02T19:09:56Z,CLOSED,False,473,0,5,https://github.com/nichamon,Add a thermal sampler that monitors coretemp,1,[],https://github.com/ovis-hpc/ovis/pull/930,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/930#issuecomment-1136710323,,@tom95858 I didn't see the pull request so I created it from your branch rebased on top of the current OVIS-4.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,930,2022-05-25T04:23:04Z,2022-05-27T15:24:56Z,2022-06-02T19:09:56Z,CLOSED,False,473,0,5,https://github.com/nichamon,Add a thermal sampler that monitors coretemp,1,[],https://github.com/ovis-hpc/ovis/pull/930,https://github.com/tom95858,3,https://github.com/ovis-hpc/ovis/pull/930#issuecomment-1136947876,,"@nichmon, I've modified this to use a list of records for each core. I'll update the branch shortly. One issue is that ldms_ls does not report the metric units in the output. It also formats the list data as JSON. Not sure if that's what we want.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,930,2022-05-25T04:23:04Z,2022-05-27T15:24:56Z,2022-06-02T19:09:56Z,CLOSED,False,473,0,5,https://github.com/nichamon,Add a thermal sampler that monitors coretemp,1,[],https://github.com/ovis-hpc/ovis/pull/930,https://github.com/nichmon,4,https://github.com/ovis-hpc/ovis/pull/930#issuecomment-1137060637,,Wrong nichmon!,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,930,2022-05-25T04:23:04Z,2022-05-27T15:24:56Z,2022-06-02T19:09:56Z,CLOSED,False,473,0,5,https://github.com/nichamon,Add a thermal sampler that monitors coretemp,1,[],https://github.com/ovis-hpc/ovis/pull/930,https://github.com/nichamon,5,https://github.com/ovis-hpc/ovis/pull/930#issuecomment-1139721423,,The pull request was replaced by #931.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,931,2022-05-27T13:28:54Z,,2022-06-02T22:02:34Z,OPEN,False,480,0,5,https://github.com/tom95858,Add sampler to collect from the coretemp module,1,[],https://github.com/ovis-hpc/ovis/pull/931,https://github.com/tom95858,1,https://github.com/ovis-hpc/ovis/pull/931,"This sampler monitors data from the /sys/dev entries
collected by the coretemp module.","This sampler monitors data from the /sys/dev entries
collected by the coretemp module.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,932,2022-05-27T17:39:32Z,2022-06-02T05:50:11Z,2022-06-02T05:51:56Z,MERGED,True,51,0,1,https://github.com/nick-enoent,add 'set_load' to set_stats response,1,[],https://github.com/ovis-hpc/ovis/pull/932,https://github.com/nick-enoent,1,https://github.com/ovis-hpc/ovis/pull/932,"calculated by taking the frequency of updater set intervals in seconds
multiplied by the data size of a set
Example Response:
Name                 Count

active_count                        6
deleting_count                      0
mem_total_kb                      512
mem_free_kb                       478
mem_used_kb                        34
set_load                         3000","calculated by taking the frequency of updater set intervals in seconds
multiplied by the data size of a set
Example Response:
Name                 Count

active_count                        6
deleting_count                      0
mem_total_kb                      512
mem_free_kb                       478
mem_used_kb                        34
set_load                         3000",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,933,2022-05-31T08:46:23Z,2022-05-31T15:32:09Z,2022-05-31T15:32:09Z,MERGED,True,5133,456,30,https://github.com/narategithub,Decomposition,5,[],https://github.com/ovis-hpc/ovis/pull/933,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/933,"Implement decomposition feature (set-row conversion)
Modify store_sos and store_csv to support decomposition
Implement store_kafka (require decomposition / no traditional config support)","Implement decomposition feature (set-row conversion)
Modify store_sos and store_csv to support decomposition
Implement store_kafka (require decomposition / no traditional config support)",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,933,2022-05-31T08:46:23Z,2022-05-31T15:32:09Z,2022-05-31T15:32:09Z,MERGED,True,5133,456,30,https://github.com/narategithub,Decomposition,5,[],https://github.com/ovis-hpc/ovis/pull/933,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/933#issuecomment-1141856661,"Implement decomposition feature (set-row conversion)
Modify store_sos and store_csv to support decomposition
Implement store_kafka (require decomposition / no traditional config support)","@tom95858 This has passed the decomposition test in https://github.com/narategithub/ldms-test/blob/decomp/ldmsd_decomp_test and all other tests, except setgroup_test. OVIS-4 also failed setgroup_test, so I think the bug is already in the OVIS-4 branch and not directly related to this patch. I'll debug setgrup_test and submit a separate patch (I'm guessing a change related to setinfo might have broken the setgroup).",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,934,2022-06-01T03:36:47Z,2022-06-01T17:58:02Z,2022-06-01T17:58:02Z,MERGED,True,303,47,1,https://github.com/nichamon,Reformat ldms_ls's lists of record and record array outputs,1,[],https://github.com/ovis-hpc/ovis/pull/934,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/934,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,934,2022-06-01T03:36:47Z,2022-06-01T17:58:02Z,2022-06-01T17:58:02Z,MERGED,True,303,47,1,https://github.com/nichamon,Reformat ldms_ls's lists of record and record array outputs,1,[],https://github.com/ovis-hpc/ovis/pull/934,https://github.com/nichamon,2,https://github.com/ovis-hpc/ovis/pull/934#issuecomment-1143082254,,"With the change, ldms_ls output for the coretemp set is as follows. It's an example of a list of records.

softirq_list is an example of a list of a primitive type.",True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,934,2022-06-01T03:36:47Z,2022-06-01T17:58:02Z,2022-06-01T17:58:02Z,MERGED,True,303,47,1,https://github.com/nichamon,Reformat ldms_ls's lists of record and record array outputs,1,[],https://github.com/ovis-hpc/ovis/pull/934,https://github.com/nichamon,3,https://github.com/ovis-hpc/ovis/pull/934#issuecomment-1143084419,,@tom95858 The record entry unit is printed at the header line.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,934,2022-06-01T03:36:47Z,2022-06-01T17:58:02Z,2022-06-01T17:58:02Z,MERGED,True,303,47,1,https://github.com/nichamon,Reformat ldms_ls's lists of record and record array outputs,1,[],https://github.com/ovis-hpc/ovis/pull/934,https://github.com/tom95858,4,https://github.com/ovis-hpc/ovis/pull/934#issuecomment-1143960861,,This looks awesome...,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,935,2022-06-01T05:34:44Z,2022-06-01T17:57:13Z,2022-06-01T17:57:13Z,MERGED,True,1,0,1,https://github.com/narategithub,Fix store_csv SIGSEGV due to missing mval assignment,1,[],https://github.com/ovis-hpc/ovis/pull/935,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/935,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,935,2022-06-01T05:34:44Z,2022-06-01T17:57:13Z,2022-06-01T17:57:13Z,MERGED,True,1,0,1,https://github.com/narategithub,Fix store_csv SIGSEGV due to missing mval assignment,1,[],https://github.com/ovis-hpc/ovis/pull/935,https://github.com/narategithub,2,https://github.com/ovis-hpc/ovis/pull/935#issuecomment-1143137197,,@tom95858 this patch fix a store_csv bug discovered by ldms-test/store_list_record_test (just merged into the ldms-test repo). The bug was introduced by the decomposition changes.,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,936,2022-06-02T19:50:06Z,,2022-06-02T19:50:06Z,OPEN,False,20,3,1,https://github.com/nichamon,Fix the test_sampler plugin when it fails to allocate heaps,1,[],https://github.com/ovis-hpc/ovis/pull/936,https://github.com/nichamon,1,https://github.com/ovis-hpc/ovis/pull/936,,,True,{}
ovis-hpc/ovis,https://github.com/ovis-hpc/ovis,937,2022-06-02T22:20:54Z,,2022-06-02T22:23:13Z,OPEN,False,310,12,6,https://github.com/narategithub,Decomposition documentation & updates,1,[],https://github.com/ovis-hpc/ovis/pull/937,https://github.com/narategithub,1,https://github.com/ovis-hpc/ovis/pull/937,"Add ldmsd_decomposition man page
Add Plugin_store_kafka man page
Update Plusing_store_sos, mentioning decomposition option
Update Plusing_store_csv, mentioning decomposition option","Add ldmsd_decomposition man page
Add Plugin_store_kafka man page
Update Plusing_store_sos, mentioning decomposition option
Update Plusing_store_csv, mentioning decomposition option",True,{}
