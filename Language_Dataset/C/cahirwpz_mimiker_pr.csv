cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,47,2016-02-18T15:09:06Z,2016-04-05T12:44:53Z,2016-04-05T12:44:55Z,CLOSED,False,304,3,4,https://github.com/cahirwpz,Add physical memory allocator,1,[],https://github.com/cahirwpz/mimiker/pull/47,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/47,Ready for merge with master.,Ready for merge with master.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,47,2016-02-18T15:09:06Z,2016-04-05T12:44:53Z,2016-04-05T12:44:55Z,CLOSED,False,304,3,4,https://github.com/cahirwpz,Add physical memory allocator,1,[],https://github.com/cahirwpz/mimiker/pull/47,https://github.com/coodie,2,https://github.com/cahirwpz/mimiker/pull/47#issuecomment-185777344,Ready for merge with master.,"Am i supposed to review the code, and accept merge pull request?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,47,2016-02-18T15:09:06Z,2016-04-05T12:44:53Z,2016-04-05T12:44:55Z,CLOSED,False,304,3,4,https://github.com/cahirwpz,Add physical memory allocator,1,[],https://github.com/cahirwpz/mimiker/pull/47,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/47#issuecomment-185784003,Ready for merge with master.,You're supposed to review my changes. I'll merge PR myself.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,48,2016-03-28T23:55:52Z,2016-05-13T18:48:53Z,2016-05-13T18:48:53Z,CLOSED,False,183,1,4,https://github.com/Darge,add callout queue,5,[],https://github.com/cahirwpz/mimiker/pull/48,https://github.com/Darge,1,https://github.com/cahirwpz/mimiker/pull/48,implements #45,implements #45,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,48,2016-03-28T23:55:52Z,2016-05-13T18:48:53Z,2016-05-13T18:48:53Z,CLOSED,False,183,1,4,https://github.com/Darge,add callout queue,5,[],https://github.com/cahirwpz/mimiker/pull/48,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/48#issuecomment-217790512,implements #45,Could you resolve conflicts and move this branch to my repo. I'd like to integrate it.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,48,2016-03-28T23:55:52Z,2016-05-13T18:48:53Z,2016-05-13T18:48:53Z,CLOSED,False,183,1,4,https://github.com/Darge,add callout queue,5,[],https://github.com/cahirwpz/mimiker/pull/48,https://github.com/Darge,3,https://github.com/cahirwpz/mimiker/pull/48#issuecomment-217846357,implements #45,"Branch added.
I created it from scratch, so that there are no merge commits - the history will be cleaner.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,49,2016-03-29T12:44:56Z,2016-05-04T11:04:42Z,2016-05-04T11:04:54Z,MERGED,True,86,0,2,https://github.com/coodie,Basic interrupt handler registration,2,[],https://github.com/cahirwpz/mimiker/pull/49,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/49,"Not really pull request. Just a place to discuss this topic before final implementation, and show what I've done already.
Couple of questions:

For what types of interrupts are we going to use this handler? This is important since this will determine the implementation. Can you provide simple example?
With this implementation and my knowledge about interrupts I need to keep list of all possible intr_events, and then pick proper interrupt event based on irq which comes. Is it a problem or is there different (possibly better) solution? On FreeBSD intr_event handlers are called individually by specific interrupts. In order to apply this solution we'll need to chose set of events we'd like to handle.

We can't really implement this well until we have threads. Other solution which would solve problem with time-consuming interrupts (without using threads) would be to put them on special list and keep on running them in main thread, until nothing is done. But obviously this isn't good.
As long as I don't have threads I can't implement this properly.","Not really pull request. Just a place to discuss this topic before final implementation, and show what I've done already.
Couple of questions:

For what types of interrupts are we going to use this handler? This is important since this will determine the implementation. Can you provide simple example?
With this implementation and my knowledge about interrupts I need to keep list of all possible intr_events, and then pick proper interrupt event based on irq which comes. Is it a problem or is there different (possibly better) solution? On FreeBSD intr_event handlers are called individually by specific interrupts. In order to apply this solution we'll need to chose set of events we'd like to handle.

We can't really implement this well until we have threads. Other solution which would solve problem with time-consuming interrupts (without using threads) would be to put them on special list and keep on running them in main thread, until nothing is done. But obviously this isn't good.
As long as I don't have threads I can't implement this properly.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,49,2016-03-29T12:44:56Z,2016-05-04T11:04:42Z,2016-05-04T11:04:54Z,MERGED,True,86,0,2,https://github.com/coodie,Basic interrupt handler registration,2,[],https://github.com/cahirwpz/mimiker/pull/49,https://github.com/coodie,2,https://github.com/cahirwpz/mimiker/pull/49#issuecomment-207487499,"Not really pull request. Just a place to discuss this topic before final implementation, and show what I've done already.
Couple of questions:

For what types of interrupts are we going to use this handler? This is important since this will determine the implementation. Can you provide simple example?
With this implementation and my knowledge about interrupts I need to keep list of all possible intr_events, and then pick proper interrupt event based on irq which comes. Is it a problem or is there different (possibly better) solution? On FreeBSD intr_event handlers are called individually by specific interrupts. In order to apply this solution we'll need to chose set of events we'd like to handle.

We can't really implement this well until we have threads. Other solution which would solve problem with time-consuming interrupts (without using threads) would be to put them on special list and keep on running them in main thread, until nothing is done. But obviously this isn't good.
As long as I don't have threads I can't implement this properly.","I updated this code.
When it comes to unwanted changes in main.c, they are result of running astyle on this file. Therefore I recommend to run astyle by you in main repo (I pushed the modified script), and when trying to merge this with master branch simply resolve conflicts in main.c . Unless you don't care and want some of lines in main.c to be overwritten by me running astyle (but you know, we want to keep real history on blame probably).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,51,2016-05-03T00:07:14Z,2016-05-13T18:49:04Z,2016-05-13T18:49:04Z,CLOSED,False,292,2,4,https://github.com/Darge,Add a generic memory allocator.,20,[],https://github.com/cahirwpz/mimiker/pull/51,https://github.com/Darge,1,https://github.com/cahirwpz/mimiker/pull/51,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,51,2016-05-03T00:07:14Z,2016-05-13T18:49:04Z,2016-05-13T18:49:04Z,CLOSED,False,292,2,4,https://github.com/Darge,Add a generic memory allocator.,20,[],https://github.com/cahirwpz/mimiker/pull/51,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/51#issuecomment-216776159,,You should have push access to my repo. Could you create the branch in my repo so I can apply some changes.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,51,2016-05-03T00:07:14Z,2016-05-13T18:49:04Z,2016-05-13T18:49:04Z,CLOSED,False,292,2,4,https://github.com/Darge,Add a generic memory allocator.,20,[],https://github.com/cahirwpz/mimiker/pull/51,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/51#issuecomment-216834584,,Have you had a closer look at #37 ?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,54,2016-05-13T17:59:10Z,2016-05-13T19:22:16Z,2016-05-13T19:22:38Z,MERGED,True,29,70,2,https://github.com/coodie,ge_table is now array of addresses,4,[],https://github.com/cahirwpz/mimiker/pull/54,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/54,"Look at title for more description.
@cahirwpz Please review this code. I'm bad assembly programmer, so I'd rather make sure everything works, before this goes to repo.
Besides I think irq_handler asm code can be simplified and we can directly jump to proper functions. I guess it is enough to mark proper functions with ((interrupt)) attribute. For example we could remove entire 'irq_handler' label in intr.S and then mark hardclock with ((attribute)), and other functions aswell. Note that there are more awesome properties of attributes, for more information check here:
https://gcc.gnu.org/onlinedocs/gcc/MIPS-Function-Attributes.html","Look at title for more description.
@cahirwpz Please review this code. I'm bad assembly programmer, so I'd rather make sure everything works, before this goes to repo.
Besides I think irq_handler asm code can be simplified and we can directly jump to proper functions. I guess it is enough to mark proper functions with ((interrupt)) attribute. For example we could remove entire 'irq_handler' label in intr.S and then mark hardclock with ((attribute)), and other functions aswell. Note that there are more awesome properties of attributes, for more information check here:
https://gcc.gnu.org/onlinedocs/gcc/MIPS-Function-Attributes.html",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,54,2016-05-13T17:59:10Z,2016-05-13T19:22:16Z,2016-05-13T19:22:38Z,MERGED,True,29,70,2,https://github.com/coodie,ge_table is now array of addresses,4,[],https://github.com/cahirwpz/mimiker/pull/54,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/54#issuecomment-219132192,"Look at title for more description.
@cahirwpz Please review this code. I'm bad assembly programmer, so I'd rather make sure everything works, before this goes to repo.
Besides I think irq_handler asm code can be simplified and we can directly jump to proper functions. I guess it is enough to mark proper functions with ((interrupt)) attribute. For example we could remove entire 'irq_handler' label in intr.S and then mark hardclock with ((attribute)), and other functions aswell. Note that there are more awesome properties of attributes, for more information check here:
https://gcc.gnu.org/onlinedocs/gcc/MIPS-Function-Attributes.html",Please verify if my change works (I don't have ovpsim installed locally) and merge.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,54,2016-05-13T17:59:10Z,2016-05-13T19:22:16Z,2016-05-13T19:22:38Z,MERGED,True,29,70,2,https://github.com/coodie,ge_table is now array of addresses,4,[],https://github.com/cahirwpz/mimiker/pull/54,https://github.com/coodie,3,https://github.com/cahirwpz/mimiker/pull/54#issuecomment-219136440,"Look at title for more description.
@cahirwpz Please review this code. I'm bad assembly programmer, so I'd rather make sure everything works, before this goes to repo.
Besides I think irq_handler asm code can be simplified and we can directly jump to proper functions. I guess it is enough to mark proper functions with ((interrupt)) attribute. For example we could remove entire 'irq_handler' label in intr.S and then mark hardclock with ((attribute)), and other functions aswell. Note that there are more awesome properties of attributes, for more information check here:
https://gcc.gnu.org/onlinedocs/gcc/MIPS-Function-Attributes.html","Everything works fine. I'll merge this. (Yayz, first merged by me pull request!)",True,{'LAUGH': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,55,2016-05-25T20:18:10Z,2016-05-31T13:26:32Z,2016-05-31T13:26:32Z,MERGED,True,86,4,6,https://github.com/Darge,Implement runq,1,[],https://github.com/cahirwpz/mimiker/pull/55,https://github.com/Darge,1,https://github.com/cahirwpz/mimiker/pull/55,Implements #39,Implements #39,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,55,2016-05-25T20:18:10Z,2016-05-31T13:26:32Z,2016-05-31T13:26:32Z,MERGED,True,86,4,6,https://github.com/Darge,Implement runq,1,[],https://github.com/cahirwpz/mimiker/pull/55,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/55#issuecomment-221810310,Implements #39,Please reorganize the test in such a way that it's runnable outside of kernel code. Look for _KERNEL identifier in subr_unit.c to understand what I mean. Modify Makefile to compile runq-test from runq.c as well.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,56,2016-05-26T00:46:18Z,2016-10-10T08:49:23Z,2016-10-10T08:55:19Z,MERGED,True,209,7,7,https://github.com/Darge,implement sleepq,2,[],https://github.com/cahirwpz/mimiker/pull/56,https://github.com/Darge,1,https://github.com/cahirwpz/mimiker/pull/56,Implements #40,Implements #40,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,56,2016-05-26T00:46:18Z,2016-10-10T08:49:23Z,2016-10-10T08:55:19Z,MERGED,True,209,7,7,https://github.com/Darge,implement sleepq,2,[],https://github.com/cahirwpz/mimiker/pull/56,https://github.com/Darge,2,https://github.com/cahirwpz/mimiker/pull/56#issuecomment-222796726,Implements #40,"Merged with master.
I left TODO in places where threads are supposed to be put to sleep and woken up. We don't have a scheduler yet.
I also don't know if I should panic if sleepq_signal or sleepq_broadcast have no threads to wake up.
And what about the new field, void *td_wchan in thread.h?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,57,2016-05-28T15:45:52Z,2016-06-02T21:09:52Z,2016-06-28T20:33:02Z,CLOSED,False,563,4,9,https://github.com/coodie,Added pmap.h vm_map.h tlb.h,1,[],https://github.com/cahirwpz/mimiker/pull/57,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/57,"I couldn't manage to split this commit into few smaller commits, because all of them depend on each other, but I don't think this will be a big problem when reviewing this. I fixed (hopefully) all bugs. I didn't add too many comments because this would take me couple of hours, while code names and 'design' speaks a lot about functionality of every function. I'll work on this while hoping this will be reviewed.
When it comes to the code itself, I plan to add more tlb functions. This would be simply wrapping functions given by toolchain into more readable format. I'd also like to provide some tests to every subsystem. It turned out that inserting using trees is WAY much simpler and makes code more concise.","I couldn't manage to split this commit into few smaller commits, because all of them depend on each other, but I don't think this will be a big problem when reviewing this. I fixed (hopefully) all bugs. I didn't add too many comments because this would take me couple of hours, while code names and 'design' speaks a lot about functionality of every function. I'll work on this while hoping this will be reviewed.
When it comes to the code itself, I plan to add more tlb functions. This would be simply wrapping functions given by toolchain into more readable format. I'd also like to provide some tests to every subsystem. It turned out that inserting using trees is WAY much simpler and makes code more concise.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,58,2016-06-02T17:07:51Z,2016-06-08T19:20:03Z,2016-06-28T20:33:11Z,MERGED,True,324,29,8,https://github.com/coodie,Add pmap and tlb,1,[],https://github.com/cahirwpz/mimiker/pull/58,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/58,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,58,2016-06-02T17:07:51Z,2016-06-08T19:20:03Z,2016-06-28T20:33:11Z,MERGED,True,324,29,8,https://github.com/coodie,Add pmap and tlb,1,[],https://github.com/cahirwpz/mimiker/pull/58,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/58#issuecomment-224599844,,LGTM. Please squash it and merge with master.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,59,2016-06-28T20:35:18Z,2016-07-23T17:39:22Z,2016-08-07T19:56:08Z,MERGED,True,513,10,6,https://github.com/coodie,Add vm_map,1,[],https://github.com/cahirwpz/mimiker/pull/59,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/59,"Code needs some refactoring and the interface for most of functions could be better, but in my opinion this is ready for merge with master. After this I'd like to implement some of paging on demand. But this needs pager (I already read chapter about pagers in FreeBSD book, to be honest I really like this solution), and is better to be implemented in other pull request/commit. This is also necessary to make sure everything works.","Code needs some refactoring and the interface for most of functions could be better, but in my opinion this is ready for merge with master. After this I'd like to implement some of paging on demand. But this needs pager (I already read chapter about pagers in FreeBSD book, to be honest I really like this solution), and is better to be implemented in other pull request/commit. This is also necessary to make sure everything works.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,60,2016-07-18T18:02:14Z,2016-08-02T11:46:27Z,2016-08-08T09:02:06Z,MERGED,True,169,0,1,https://github.com/coodie,Add you_complete_me script,1,[],https://github.com/cahirwpz/mimiker/pull/60,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/60,"I added you_complete_me vim script I'm using for development. A lot of people have problem with setting up YCM correctly therefore I decide to put my script here.
I recommend Installing the plugin using:
https://github.com/VundleVim/Vundle.vim
Here is more detailed guide about how to install YouCompleteMe
https://github.com/Valloric/YouCompleteMe
Following installation steps which worked for me:
cd ~/.vim/bundle/YouCompleteMe/
./install.py --clang-completer
If you have YouCompleteMe, adding '.ycm_extra_conf.py' should make this work out of the box.
ALSO VERY IMPORTANT: you imgtec toolchains should be installed in:
$HOME/local","I added you_complete_me vim script I'm using for development. A lot of people have problem with setting up YCM correctly therefore I decide to put my script here.
I recommend Installing the plugin using:
https://github.com/VundleVim/Vundle.vim
Here is more detailed guide about how to install YouCompleteMe
https://github.com/Valloric/YouCompleteMe
Following installation steps which worked for me:
cd ~/.vim/bundle/YouCompleteMe/
./install.py --clang-completer
If you have YouCompleteMe, adding '.ycm_extra_conf.py' should make this work out of the box.
ALSO VERY IMPORTANT: you imgtec toolchains should be installed in:
$HOME/local",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,61,2016-08-07T19:55:34Z,2016-08-07T19:55:50Z,2016-08-07T19:56:07Z,MERGED,True,134,80,6,https://github.com/coodie,Pager refactor,1,[],https://github.com/cahirwpz/mimiker/pull/61,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/61,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,62,2016-08-09T22:04:20Z,2016-08-09T22:04:30Z,2016-08-09T22:04:30Z,MERGED,True,98,28,10,https://github.com/Darge,Add preemptive scheduling,1,[],https://github.com/cahirwpz/mimiker/pull/62,https://github.com/Darge,1,https://github.com/cahirwpz/mimiker/pull/62,"Closes #45, #39, #33.","Closes #45, #39, #33.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,64,2016-08-12T17:17:42Z,2016-08-12T17:17:58Z,2016-08-12T17:17:58Z,MERGED,True,205,104,9,https://github.com/cahirwpz,Scheduler,3,[],https://github.com/cahirwpz/mimiker/pull/64,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/64,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,65,2016-08-13T18:06:53Z,2016-08-31T09:02:12Z,2016-10-10T08:55:18Z,CLOSED,False,64,16,6,https://github.com/Darge,synchronize the scheduler,1,[],https://github.com/cahirwpz/mimiker/pull/65,https://github.com/Darge,1,https://github.com/cahirwpz/mimiker/pull/65,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,65,2016-08-13T18:06:53Z,2016-08-31T09:02:12Z,2016-10-10T08:55:18Z,CLOSED,False,64,16,6,https://github.com/Darge,synchronize the scheduler,1,[],https://github.com/cahirwpz/mimiker/pull/65,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/65#issuecomment-243703012,,"This PR was an attempt to synchronize the scheduler. However there were no right tools available to do so correctly. Hence a second attempt must be devised.
I'm trying to put all prerequisites in place. Please have a look at 2daefcc. I'm now going to change context switching routines as discussed offline. Stay tuned.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,66,2016-08-15T02:06:03Z,2016-08-15T02:48:10Z,2016-08-15T02:48:33Z,CLOSED,False,88,19,9,https://github.com/Darge,Implement thread_exit,2,[],https://github.com/cahirwpz/mimiker/pull/66,https://github.com/Darge,1,https://github.com/cahirwpz/mimiker/pull/66,"It has a dependency on another branch: https://github.com/cahirwpz/mimiker/tree/basic_sync,","It has a dependency on another branch: https://github.com/cahirwpz/mimiker/tree/basic_sync,",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,67,2016-08-15T14:28:47Z,2016-08-15T14:45:38Z,2016-08-15T14:52:18Z,MERGED,True,309,146,11,https://github.com/coodie,Add fictitious_pages and refactor pager,1,[],https://github.com/cahirwpz/mimiker/pull/67,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/67,Pager refactor and fictitious pages,Pager refactor and fictitious pages,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,68,2016-08-15T14:43:30Z,2016-11-13T14:25:20Z,2017-04-19T13:17:57Z,CLOSED,False,436,31,15,https://github.com/Darge,Mutexes,5,[],https://github.com/cahirwpz/mimiker/pull/68,https://github.com/Darge,1,https://github.com/cahirwpz/mimiker/pull/68,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,69,2016-08-15T14:51:18Z,2016-08-15T14:52:01Z,2016-08-15T14:52:05Z,CLOSED,False,0,0,0,https://github.com/coodie,"Revert ""Add fictitious_pages and refactor pager""",1,[],https://github.com/cahirwpz/mimiker/pull/69,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/69,Reverts #67,Reverts #67,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,70,2016-08-15T14:54:01Z,2016-08-19T15:50:07Z,2016-08-19T15:52:34Z,MERGED,True,648,534,20,https://github.com/coodie,Add fictitious_pages and refactor pager,5,[],https://github.com/cahirwpz/mimiker/pull/70,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/70,"Don't merge the request yet, still working on it.","Don't merge the request yet, still working on it.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,71,2016-08-21T22:27:16Z,2016-08-21T22:28:05Z,2016-08-21T22:29:59Z,CLOSED,False,1,1,1,https://github.com/Darge,Change a global array size from 0 to 1,1,[],https://github.com/cahirwpz/mimiker/pull/71,https://github.com/Darge,1,https://github.com/cahirwpz/mimiker/pull/71,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,71,2016-08-21T22:27:16Z,2016-08-21T22:28:05Z,2016-08-21T22:29:59Z,CLOSED,False,1,1,1,https://github.com/Darge,Change a global array size from 0 to 1,1,[],https://github.com/cahirwpz/mimiker/pull/71,https://github.com/Darge,2,https://github.com/cahirwpz/mimiker/pull/71#issuecomment-241286417,,"I decided to simply push the change, sorry for trouble.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,72,2016-09-30T23:50:38Z,2016-10-28T21:41:54Z,2016-11-11T12:53:30Z,CLOSED,False,41,3,2,https://github.com/coodie,Pmap remove pde,7,[],https://github.com/cahirwpz/mimiker/pull/72,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/72,"I had a problem with debugging which turned out not to be a bug in my code but... in Makefile, after running make clean and make code started to work, someone (possibly having more experience in writing Makefiles) needs to look into Makefile because this consumed few hours of my time.
I'm still not 100% sure that code works, this needs some kind of testing, and I'll work on it. There are few points to make:

Number of mapped entries is number of valid entries. When there are no valid PTE entries on PDE page I assume that PDE page can be deleted.
Since I decided to count valid entries I needed space to do so. I had couple of ideas like

Add array with PDE_SIZE entries which would keep count for every PDE entry. This is obviously wrong because this would eat A LOT of space and increase initialization time.
Add extra structure which would keep reference to allocated page along with the count. I didn't like this idea, because this required me to manage memory of extra structure which i don't like doing (and pmap doesn't have any memory pool).


The best Idea I could come up with was add extra fields in vm_page, note that because it is inside union, there is basically no extra space overhead.","I had a problem with debugging which turned out not to be a bug in my code but... in Makefile, after running make clean and make code started to work, someone (possibly having more experience in writing Makefiles) needs to look into Makefile because this consumed few hours of my time.
I'm still not 100% sure that code works, this needs some kind of testing, and I'll work on it. There are few points to make:

Number of mapped entries is number of valid entries. When there are no valid PTE entries on PDE page I assume that PDE page can be deleted.
Since I decided to count valid entries I needed space to do so. I had couple of ideas like

Add array with PDE_SIZE entries which would keep count for every PDE entry. This is obviously wrong because this would eat A LOT of space and increase initialization time.
Add extra structure which would keep reference to allocated page along with the count. I didn't like this idea, because this required me to manage memory of extra structure which i don't like doing (and pmap doesn't have any memory pool).


The best Idea I could come up with was add extra fields in vm_page, note that because it is inside union, there is basically no extra space overhead.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,72,2016-09-30T23:50:38Z,2016-10-28T21:41:54Z,2016-11-11T12:53:30Z,CLOSED,False,41,3,2,https://github.com/coodie,Pmap remove pde,7,[],https://github.com/cahirwpz/mimiker/pull/72,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/72#issuecomment-250895466,"I had a problem with debugging which turned out not to be a bug in my code but... in Makefile, after running make clean and make code started to work, someone (possibly having more experience in writing Makefiles) needs to look into Makefile because this consumed few hours of my time.
I'm still not 100% sure that code works, this needs some kind of testing, and I'll work on it. There are few points to make:

Number of mapped entries is number of valid entries. When there are no valid PTE entries on PDE page I assume that PDE page can be deleted.
Since I decided to count valid entries I needed space to do so. I had couple of ideas like

Add array with PDE_SIZE entries which would keep count for every PDE entry. This is obviously wrong because this would eat A LOT of space and increase initialization time.
Add extra structure which would keep reference to allocated page along with the count. I didn't like this idea, because this required me to manage memory of extra structure which i don't like doing (and pmap doesn't have any memory pool).


The best Idea I could come up with was add extra fields in vm_page, note that because it is inside union, there is basically no extra space overhead.",I've run into problem with Makefiles as well. I fully agree we have to change build system to something easier to manage. My latest attempts to befriend SCons were quite successful and I'm thinking of migration.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,74,2016-10-06T22:48:34Z,2016-10-07T09:27:05Z,2016-12-14T21:01:38Z,MERGED,True,11,0,3,https://github.com/rafalcieslak,Improved emacs integration,1,[],https://github.com/cahirwpz/mimiker/pull/74,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/74,"Generating emacs-style tags file
Added emacs backup files to gitignore
Created a minimal .clang_complete which specifies standard and include
dirs for autocompletion and on-the-fly compilation checks","Generating emacs-style tags file
Added emacs backup files to gitignore
Created a minimal .clang_complete which specifies standard and include
dirs for autocompletion and on-the-fly compilation checks",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,75,2016-10-07T14:50:20Z,2016-10-07T17:25:51Z,2016-12-14T21:01:51Z,MERGED,True,21,5,1,https://github.com/rafalcieslak,Selectable debugger in launch script,3,[],https://github.com/cahirwpz/mimiker/pull/75,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/75,"Optional flag -D selects the gdb frontend to run in debug mode.
Currently recognized values are gdb, cgdb, gdbtui, emacs and ddd.
The default behavior of the launch script is unmodified.","Optional flag -D selects the gdb frontend to run in debug mode.
Currently recognized values are gdb, cgdb, gdbtui, emacs and ddd.
The default behavior of the launch script is unmodified.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,75,2016-10-07T14:50:20Z,2016-10-07T17:25:51Z,2016-12-14T21:01:51Z,MERGED,True,21,5,1,https://github.com/rafalcieslak,Selectable debugger in launch script,3,[],https://github.com/cahirwpz/mimiker/pull/75,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/75#issuecomment-252311429,"Optional flag -D selects the gdb frontend to run in debug mode.
Currently recognized values are gdb, cgdb, gdbtui, emacs and ddd.
The default behavior of the launch script is unmodified.",Ok. Please squash commits into single one and I'll merge the PR.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,75,2016-10-07T14:50:20Z,2016-10-07T17:25:51Z,2016-12-14T21:01:51Z,MERGED,True,21,5,1,https://github.com/rafalcieslak,Selectable debugger in launch script,3,[],https://github.com/cahirwpz/mimiker/pull/75,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/75#issuecomment-252311571,"Optional flag -D selects the gdb frontend to run in debug mode.
Currently recognized values are gdb, cgdb, gdbtui, emacs and ddd.
The default behavior of the launch script is unmodified.",Ah... I have a possibility to do so by myself. Don't bother.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,76,2016-10-11T20:54:11Z,2016-10-11T21:22:10Z,2016-10-11T21:27:19Z,MERGED,True,1,1,1,https://github.com/goniz,Fixed TLB entry not invalidated due to bad asid mask,1,[],https://github.com/cahirwpz/mimiker/pull/76,https://github.com/goniz,1,https://github.com/cahirwpz/mimiker/pull/76,"Hello
I'm using your platform as a reference in my own hobby educational OS and I've found this typo while debugging..
It seems to cause pmap_map() to fail invalidating TLB entries and this affects mapping a PFN1 page while PFN0 is already mapped or the other way around.","Hello
I'm using your platform as a reference in my own hobby educational OS and I've found this typo while debugging..
It seems to cause pmap_map() to fail invalidating TLB entries and this affects mapping a PFN1 page while PFN0 is already mapped or the other way around.",True,{'THUMBS_UP': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,76,2016-10-11T20:54:11Z,2016-10-11T21:22:10Z,2016-10-11T21:27:19Z,MERGED,True,1,1,1,https://github.com/goniz,Fixed TLB entry not invalidated due to bad asid mask,1,[],https://github.com/cahirwpz/mimiker/pull/76,https://github.com/coodie,2,https://github.com/cahirwpz/mimiker/pull/76#issuecomment-253050441,"Hello
I'm using your platform as a reference in my own hobby educational OS and I've found this typo while debugging..
It seems to cause pmap_map() to fail invalidating TLB entries and this affects mapping a PFN1 page while PFN0 is already mapped or the other way around.","I might not be head of the project, but it's obvious bug and should be fixed asap. Thanks a lot for your contribution, I hope the debugging session didn't take too long :).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,77,2016-10-11T21:04:42Z,2016-10-11T21:23:16Z,2016-10-11T21:27:29Z,MERGED,True,1,1,1,https://github.com/goniz,Fixed C0_PAGEMASK garbage values in tlb_overwrite_random(),1,[],https://github.com/cahirwpz/mimiker/pull/77,https://github.com/goniz,1,https://github.com/cahirwpz/mimiker/pull/77,"tlb_overwrite_random() assumed to be given a forth argument to write to C0_PAGEMASK
but C function declaration did not reflect this argument and was called without it.
the PageMask register might be overwritten with garbage data","tlb_overwrite_random() assumed to be given a forth argument to write to C0_PAGEMASK
but C function declaration did not reflect this argument and was called without it.
the PageMask register might be overwritten with garbage data",True,{'THUMBS_UP': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,77,2016-10-11T21:04:42Z,2016-10-11T21:23:16Z,2016-10-11T21:27:29Z,MERGED,True,1,1,1,https://github.com/goniz,Fixed C0_PAGEMASK garbage values in tlb_overwrite_random(),1,[],https://github.com/cahirwpz/mimiker/pull/77,https://github.com/coodie,2,https://github.com/cahirwpz/mimiker/pull/77#issuecomment-253050771,"tlb_overwrite_random() assumed to be given a forth argument to write to C0_PAGEMASK
but C function declaration did not reflect this argument and was called without it.
the PageMask register might be overwritten with garbage data","Again - obvious bug, and again - thanks for fixing!",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,78,2016-10-14T17:18:35Z,2016-10-14T19:39:25Z,2016-10-14T19:54:37Z,MERGED,True,1,1,1,https://github.com/goniz,Fixed wrong bitmask in status register in user_exc_enter(),1,[],https://github.com/cahirwpz/mimiker/pull/78,https://github.com/goniz,1,https://github.com/cahirwpz/mimiker/pull/78,"The status register SR_KSU bits are: 0 for kernel, 1 for supervisor, 2 for user
Before this commit, user_exc_enter() 'turned off' the kernel-bits instead of the user-bits","The status register SR_KSU bits are: 0 for kernel, 1 for supervisor, 2 for user
Before this commit, user_exc_enter() 'turned off' the kernel-bits instead of the user-bits",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,78,2016-10-14T17:18:35Z,2016-10-14T19:39:25Z,2016-10-14T19:54:37Z,MERGED,True,1,1,1,https://github.com/goniz,Fixed wrong bitmask in status register in user_exc_enter(),1,[],https://github.com/cahirwpz/mimiker/pull/78,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/78#issuecomment-253867787,"The status register SR_KSU bits are: 0 for kernel, 1 for supervisor, 2 for user
Before this commit, user_exc_enter() 'turned off' the kernel-bits instead of the user-bits",I don't have access to header files from the toolchain right now. Could you tell me what are the values of SR_KSU_* definitions?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,78,2016-10-14T17:18:35Z,2016-10-14T19:39:25Z,2016-10-14T19:54:37Z,MERGED,True,1,1,1,https://github.com/goniz,Fixed wrong bitmask in status register in user_exc_enter(),1,[],https://github.com/cahirwpz/mimiker/pull/78,https://github.com/goniz,3,https://github.com/cahirwpz/mimiker/pull/78#issuecomment-253873660,"The status register SR_KSU bits are: 0 for kernel, 1 for supervisor, 2 for user
Before this commit, user_exc_enter() 'turned off' the kernel-bits instead of the user-bits","#define SR_KSU_MASK 0x00000018  /* ksu mode mask /
#define SR_KSU_SHIFT         3
#define SR_KSU_BITS      2
#define SR_KSU_USER 0x00000010  / user mode /
#define SR_KSU_SPVS 0x00000008  / supervisor mode /
#define SR_KSU_KERN 0x00000000  / kernel mode */",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,78,2016-10-14T17:18:35Z,2016-10-14T19:39:25Z,2016-10-14T19:54:37Z,MERGED,True,1,1,1,https://github.com/goniz,Fixed wrong bitmask in status register in user_exc_enter(),1,[],https://github.com/cahirwpz/mimiker/pull/78,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/78#issuecomment-253883501,"The status register SR_KSU bits are: 0 for kernel, 1 for supervisor, 2 for user
Before this commit, user_exc_enter() 'turned off' the kernel-bits instead of the user-bits",Please use SR_KSU_MASK instead of SR_KSU_USER then. Thanks for pointing out the bug!,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,78,2016-10-14T17:18:35Z,2016-10-14T19:39:25Z,2016-10-14T19:54:37Z,MERGED,True,1,1,1,https://github.com/goniz,Fixed wrong bitmask in status register in user_exc_enter(),1,[],https://github.com/cahirwpz/mimiker/pull/78,https://github.com/goniz,5,https://github.com/cahirwpz/mimiker/pull/78#issuecomment-253885524,"The status register SR_KSU bits are: 0 for kernel, 1 for supervisor, 2 for user
Before this commit, user_exc_enter() 'turned off' the kernel-bits instead of the user-bits","Good point!
Done.",True,{'THUMBS_UP': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,79,2016-10-19T14:43:24Z,2016-10-20T10:56:17Z,2016-12-14T21:01:52Z,MERGED,True,1670,8,13,https://github.com/rafalcieslak,Imported used smallclib sources,1,[],https://github.com/cahirwpz/mimiker/pull/79,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/79,"The most recent release of Imgtech's MIPS SDK does not include the MIPS Bare Metal SmallCLib, which is now provided as a separate download.
It will be convenient to import the parts of smallclib that we use into our source, instead of pulling these files from the toolchain during compilation. I did my best for this change to have minimal impact on our existing code.","The most recent release of Imgtech's MIPS SDK does not include the MIPS Bare Metal SmallCLib, which is now provided as a separate download.
It will be convenient to import the parts of smallclib that we use into our source, instead of pulling these files from the toolchain during compilation. I did my best for this change to have minimal impact on our existing code.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,79,2016-10-19T14:43:24Z,2016-10-20T10:56:17Z,2016-12-14T21:01:52Z,MERGED,True,1670,8,13,https://github.com/rafalcieslak,Imported used smallclib sources,1,[],https://github.com/cahirwpz/mimiker/pull/79,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/79#issuecomment-254848491,"The most recent release of Imgtech's MIPS SDK does not include the MIPS Bare Metal SmallCLib, which is now provided as a separate download.
It will be convenient to import the parts of smallclib that we use into our source, instead of pulling these files from the toolchain during compilation. I did my best for this change to have minimal impact on our existing code.",Just a quick question – would it be possible to (quickly) replace (some of) those files with corresponding implementations from BSD libc?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,80,2016-10-21T18:55:33Z,2016-10-28T20:44:28Z,2016-12-14T21:03:03Z,MERGED,True,543,9,14,https://github.com/rafalcieslak,[WIP] Embedding user ELFs,27,[],https://github.com/cahirwpz/mimiker/pull/80,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/80,"This branch is not to be merged. It is a temporary sketch/playground that I made for demonstrating how to correctly embed an ELF file as binary data within the kernel image. The exec() function demonstrates it can access the data.
By the way, I checked in 'Allow edits from maintainers' when creating this branch, which should let you push commits onto this branch, even though it originates in my fork.","This branch is not to be merged. It is a temporary sketch/playground that I made for demonstrating how to correctly embed an ELF file as binary data within the kernel image. The exec() function demonstrates it can access the data.
By the way, I checked in 'Allow edits from maintainers' when creating this branch, which should let you push commits onto this branch, even though it originates in my fork.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,80,2016-10-21T18:55:33Z,2016-10-28T20:44:28Z,2016-12-14T21:03:03Z,MERGED,True,543,9,14,https://github.com/rafalcieslak,[WIP] Embedding user ELFs,27,[],https://github.com/cahirwpz/mimiker/pull/80,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/80#issuecomment-255497856,"This branch is not to be merged. It is a temporary sketch/playground that I made for demonstrating how to correctly embed an ELF file as binary data within the kernel image. The exec() function demonstrates it can access the data.
By the way, I checked in 'Allow edits from maintainers' when creating this branch, which should let you push commits onto this branch, even though it originates in my fork.","I also made a simple proof-of-concept ELF loading. At this point exec() is able to successfully parse the ELF, prepare a virtual memory map, load contents, enable memory protection* and update the context so that the loaded code gets executed.
The example program (elf/prog.c) uses a text string from .data to animate a marquee in an array in .bss. An easy way to see that it works is to run the program (test in exec.c/elf), interrupt the debugger, and see print (char*)0x4000, which is where the scrolling string is written.
DISCLAIMER: This is a prototype implementation, I have NOT yet thoroughly examined exec implementation in FreeBSD. I did this to investigate what challenges I would face, to gain a better understanding of the problem.
In particular, the loaded code is executed in kernel mode, on kernel stack. The created memory map is not associated with the thread (for it is a kernel thread, the memory map should be associated with a user-space process). So there is a lot more to be done here.
But anyway, I welcome feedback.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,80,2016-10-21T18:55:33Z,2016-10-28T20:44:28Z,2016-12-14T21:03:03Z,MERGED,True,543,9,14,https://github.com/rafalcieslak,[WIP] Embedding user ELFs,27,[],https://github.com/cahirwpz/mimiker/pull/80,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/80#issuecomment-255591027,"This branch is not to be merged. It is a temporary sketch/playground that I made for demonstrating how to correctly embed an ELF file as binary data within the kernel image. The exec() function demonstrates it can access the data.
By the way, I checked in 'Allow edits from maintainers' when creating this branch, which should let you push commits onto this branch, even though it originates in my fork.","Just a quick note on the PR – it's too big :)
If you're quite confident you'll need header files stolen from *BSD, please put them into another PR and state clearly the origin. I'll merge them immediately.
Please use types from stdint.h wherever makes sense to do so. Use clang-format to keep formatting consistent.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,80,2016-10-21T18:55:33Z,2016-10-28T20:44:28Z,2016-12-14T21:03:03Z,MERGED,True,543,9,14,https://github.com/rafalcieslak,[WIP] Embedding user ELFs,27,[],https://github.com/cahirwpz/mimiker/pull/80,https://github.com/rafalcieslak,4,https://github.com/cahirwpz/mimiker/pull/80#issuecomment-255612922,"This branch is not to be merged. It is a temporary sketch/playground that I made for demonstrating how to correctly embed an ELF file as binary data within the kernel image. The exec() function demonstrates it can access the data.
By the way, I checked in 'Allow edits from maintainers' when creating this branch, which should let you push commits onto this branch, even though it originates in my fork.","I had to rebase this branch onto master to incorporate #83 and #84.
At this point exec is prepares a new stack for the user image, copies program argument vector onto that stack, and these values are correctly passed to user main()'s argc and argv. Some hints on how to test this are written down in ./exec.c test case.
I have consulted FreeBSD implementation of exec, and while it does some interesting tricks that I will be happy to present at the seminar, not all of them are relevant for our case. I have corrected various details in my implementation according to theirs, as it helped me to clear up some misconceptions I had.
I have also improved the verbosity of various comments, wrote down the description of the environment in which user programs start, and (finally) formatted the source with using .clang-format style (can we maybe hook it to run automatically before commit?).
What I would like to do, but is currently impossible, is to start multiple (different) user programs, and see the scheduler switch between them. What is missing is a process description thread - in particular, the vm map that is associated with a process. When switching between user threads, the current user vm map should also be switched, which is not yet implemented. I am unsure whether this (large...) branch is a good place to work on implementing process structure. However, I have marked places in do_exec where interaction with process structure should happen.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,80,2016-10-21T18:55:33Z,2016-10-28T20:44:28Z,2016-12-14T21:03:03Z,MERGED,True,543,9,14,https://github.com/rafalcieslak,[WIP] Embedding user ELFs,27,[],https://github.com/cahirwpz/mimiker/pull/80,https://github.com/rafalcieslak,5,https://github.com/cahirwpz/mimiker/pull/80#issuecomment-256486172,"This branch is not to be merged. It is a temporary sketch/playground that I made for demonstrating how to correctly embed an ELF file as binary data within the kernel image. The exec() function demonstrates it can access the data.
By the way, I checked in 'Allow edits from maintainers' when creating this branch, which should let you push commits onto this branch, even though it originates in my fork.","Rebased onto master to solve conflicts, updated return values to use errno.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,80,2016-10-21T18:55:33Z,2016-10-28T20:44:28Z,2016-12-14T21:03:03Z,MERGED,True,543,9,14,https://github.com/rafalcieslak,[WIP] Embedding user ELFs,27,[],https://github.com/cahirwpz/mimiker/pull/80,https://github.com/cahirwpz,6,https://github.com/cahirwpz/mimiker/pull/80#issuecomment-256993255,"This branch is not to be merged. It is a temporary sketch/playground that I made for demonstrating how to correctly embed an ELF file as binary data within the kernel image. The exec() function demonstrates it can access the data.
By the way, I checked in 'Allow edits from maintainers' when creating this branch, which should let you push commits onto this branch, even though it originates in my fork.",Looks mostly ok. Please have a look at my questions and apply fixes if needed.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,80,2016-10-21T18:55:33Z,2016-10-28T20:44:28Z,2016-12-14T21:03:03Z,MERGED,True,543,9,14,https://github.com/rafalcieslak,[WIP] Embedding user ELFs,27,[],https://github.com/cahirwpz/mimiker/pull/80,https://github.com/rafalcieslak,7,https://github.com/cahirwpz/mimiker/pull/80#issuecomment-257014945,"This branch is not to be merged. It is a temporary sketch/playground that I made for demonstrating how to correctly embed an ELF file as binary data within the kernel image. The exec() function demonstrates it can access the data.
By the way, I checked in 'Allow edits from maintainers' when creating this branch, which should let you push commits onto this branch, even though it originates in my fork.","I pushed all fixes. I'm also wondering if it wouldn't make sense to move prepare_program_stack from exec.c to mips/exec.c, as it uses strictly machine-specific layout.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,80,2016-10-21T18:55:33Z,2016-10-28T20:44:28Z,2016-12-14T21:03:03Z,MERGED,True,543,9,14,https://github.com/rafalcieslak,[WIP] Embedding user ELFs,27,[],https://github.com/cahirwpz/mimiker/pull/80,https://github.com/cahirwpz,8,https://github.com/cahirwpz/mimiker/pull/80#issuecomment-257018061,"This branch is not to be merged. It is a temporary sketch/playground that I made for demonstrating how to correctly embed an ELF file as binary data within the kernel image. The exec() function demonstrates it can access the data.
By the way, I checked in 'Allow edits from maintainers' when creating this branch, which should let you push commits onto this branch, even though it originates in my fork.","There're still // comments out there ;-) There should be no platform dependent code inside sys directory, so moving the code around makes sense - good point!",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,80,2016-10-21T18:55:33Z,2016-10-28T20:44:28Z,2016-12-14T21:03:03Z,MERGED,True,543,9,14,https://github.com/rafalcieslak,[WIP] Embedding user ELFs,27,[],https://github.com/cahirwpz/mimiker/pull/80,https://github.com/rafalcieslak,9,https://github.com/cahirwpz/mimiker/pull/80#issuecomment-257022915,"This branch is not to be merged. It is a temporary sketch/playground that I made for demonstrating how to correctly embed an ELF file as binary data within the kernel image. The exec() function demonstrates it can access the data.
By the way, I checked in 'Allow edits from maintainers' when creating this branch, which should let you push commits onto this branch, even though it originates in my fork.",Fixed and synced with master.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,80,2016-10-21T18:55:33Z,2016-10-28T20:44:28Z,2016-12-14T21:03:03Z,MERGED,True,543,9,14,https://github.com/rafalcieslak,[WIP] Embedding user ELFs,27,[],https://github.com/cahirwpz/mimiker/pull/80,https://github.com/cahirwpz,10,https://github.com/cahirwpz/mimiker/pull/80#issuecomment-257023731,"This branch is not to be merged. It is a temporary sketch/playground that I made for demonstrating how to correctly embed an ELF file as binary data within the kernel image. The exec() function demonstrates it can access the data.
By the way, I checked in 'Allow edits from maintainers' when creating this branch, which should let you push commits onto this branch, even though it originates in my fork.",Good job!,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,81,2016-10-22T16:44:00Z,2016-10-23T20:08:54Z,2016-10-23T20:08:54Z,CLOSED,False,16,6,3,https://github.com/goniz,Use global var instead of C0_USERLOCAL for improved portability.,1,[],https://github.com/cahirwpz/mimiker/pull/81,https://github.com/goniz,1,https://github.com/cahirwpz/mimiker/pull/81,"A regular global variable is less cool, but much more portable then a c0 USERLOCAL register..
USERLOCAL behaves weird on QEMU and this is one of the changes needed for running mimiker on QEMU.","A regular global variable is less cool, but much more portable then a c0 USERLOCAL register..
USERLOCAL behaves weird on QEMU and this is one of the changes needed for running mimiker on QEMU.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,81,2016-10-22T16:44:00Z,2016-10-23T20:08:54Z,2016-10-23T20:08:54Z,CLOSED,False,16,6,3,https://github.com/goniz,Use global var instead of C0_USERLOCAL for improved portability.,1,[],https://github.com/cahirwpz/mimiker/pull/81,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/81#issuecomment-255583295,"A regular global variable is less cool, but much more portable then a c0 USERLOCAL register..
USERLOCAL behaves weird on QEMU and this is one of the changes needed for running mimiker on QEMU.","I understand your concern, but in fact we need a solution that fixes more general problem – i.e. how to keep global state of the operating system that needs to be shared between different subsystems.
We should definitely follow SPOT rule. In fact FreeBSD does that by using pcpu structure! Could you read the sources and try to figure out how pcpu_space is used throught different parts of the kernel? When done I guess you'll have much better idea how to approach removal of C0_USERLOCAL.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,81,2016-10-22T16:44:00Z,2016-10-23T20:08:54Z,2016-10-23T20:08:54Z,CLOSED,False,16,6,3,https://github.com/goniz,Use global var instead of C0_USERLOCAL for improved portability.,1,[],https://github.com/cahirwpz/mimiker/pull/81,https://github.com/goniz,3,https://github.com/cahirwpz/mimiker/pull/81#issuecomment-255587711,"A regular global variable is less cool, but much more portable then a c0 USERLOCAL register..
USERLOCAL behaves weird on QEMU and this is one of the changes needed for running mimiker on QEMU.","Do we intend to implement SMP support?
as far as I can tell, the pcpu structure is used primary to allow the same code to run on multiple cores",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,81,2016-10-22T16:44:00Z,2016-10-23T20:08:54Z,2016-10-23T20:08:54Z,CLOSED,False,16,6,3,https://github.com/goniz,Use global var instead of C0_USERLOCAL for improved portability.,1,[],https://github.com/cahirwpz/mimiker/pull/81,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/81#issuecomment-255590657,"A regular global variable is less cool, but much more portable then a c0 USERLOCAL register..
USERLOCAL behaves weird on QEMU and this is one of the changes needed for running mimiker on QEMU.","In long-term SMP support is highly desired. For the time being we ignore it. However I see pcpu structure as a good place to keep, in one place, global variables related to CPU state.
Please, have a look at mips/pcpu.h as well.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,81,2016-10-22T16:44:00Z,2016-10-23T20:08:54Z,2016-10-23T20:08:54Z,CLOSED,False,16,6,3,https://github.com/goniz,Use global var instead of C0_USERLOCAL for improved portability.,1,[],https://github.com/cahirwpz/mimiker/pull/81,https://github.com/goniz,5,https://github.com/cahirwpz/mimiker/pull/81#issuecomment-255591556,"A regular global variable is less cool, but much more portable then a c0 USERLOCAL register..
USERLOCAL behaves weird on QEMU and this is one of the changes needed for running mimiker on QEMU.","I did look there already.
For non smp systems it acts as a simple global structure with ""api"" macros for access.
If that's what you have in mind then it's fairly simple to implement.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,81,2016-10-22T16:44:00Z,2016-10-23T20:08:54Z,2016-10-23T20:08:54Z,CLOSED,False,16,6,3,https://github.com/goniz,Use global var instead of C0_USERLOCAL for improved portability.,1,[],https://github.com/cahirwpz/mimiker/pull/81,https://github.com/cahirwpz,6,https://github.com/cahirwpz/mimiker/pull/81#issuecomment-255592855,"A regular global variable is less cool, but much more portable then a c0 USERLOCAL register..
USERLOCAL behaves weird on QEMU and this is one of the changes needed for running mimiker on QEMU.",Well... yes. Just define a global structure and API to access it. That'll solve the problem with portability (and QEMU missing C0_USERLOCAL implementation) and help adding SMP support later.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,81,2016-10-22T16:44:00Z,2016-10-23T20:08:54Z,2016-10-23T20:08:54Z,CLOSED,False,16,6,3,https://github.com/goniz,Use global var instead of C0_USERLOCAL for improved portability.,1,[],https://github.com/cahirwpz/mimiker/pull/81,https://github.com/goniz,7,https://github.com/cahirwpz/mimiker/pull/81#issuecomment-255611039,"A regular global variable is less cool, but much more portable then a c0 USERLOCAL register..
USERLOCAL behaves weird on QEMU and this is one of the changes needed for running mimiker on QEMU.",See pull request #85,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,82,2016-10-22T16:53:31Z,2016-10-23T17:00:07Z,2016-10-25T18:54:33Z,MERGED,True,18,8,2,https://github.com/goniz,boot: use regular jr to transfer control to kernel_boot instead of eret,2,[],https://github.com/cahirwpz/mimiker/pull/82,https://github.com/goniz,1,https://github.com/cahirwpz/mimiker/pull/82,"QEMU does not like c0_errpc and freaks out
Please report if this breaks your non-qemu emulator.
And if its does, we'll need to think if we want to solve this in different compilation targets or in startup runtime.","QEMU does not like c0_errpc and freaks out
Please report if this breaks your non-qemu emulator.
And if its does, we'll need to think if we want to solve this in different compilation targets or in startup runtime.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,82,2016-10-22T16:53:31Z,2016-10-23T17:00:07Z,2016-10-25T18:54:33Z,MERGED,True,18,8,2,https://github.com/goniz,boot: use regular jr to transfer control to kernel_boot instead of eret,2,[],https://github.com/cahirwpz/mimiker/pull/82,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/82#issuecomment-255574999,"QEMU does not like c0_errpc and freaks out
Please report if this breaks your non-qemu emulator.
And if its does, we'll need to think if we want to solve this in different compilation targets or in startup runtime.","QEMU is buggy to the point, we decided not to use it and replace it with OVPsim.
Could spend some time reading YAMON documentation and add a comment which describes initial boot environment for kernel? I guess this code may be rewritten without using eret at all.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,82,2016-10-22T16:53:31Z,2016-10-23T17:00:07Z,2016-10-25T18:54:33Z,MERGED,True,18,8,2,https://github.com/goniz,boot: use regular jr to transfer control to kernel_boot instead of eret,2,[],https://github.com/cahirwpz/mimiker/pull/82,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/82#issuecomment-255575238,"QEMU does not like c0_errpc and freaks out
Please report if this breaks your non-qemu emulator.
And if its does, we'll need to think if we want to solve this in different compilation targets or in startup runtime.","Please do following tasks:

identify corresponding code in FreeBSD source tree and put links here,
under gdb dump C0_STATUS just after _start.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,82,2016-10-22T16:53:31Z,2016-10-23T17:00:07Z,2016-10-25T18:54:33Z,MERGED,True,18,8,2,https://github.com/goniz,boot: use regular jr to transfer control to kernel_boot instead of eret,2,[],https://github.com/cahirwpz/mimiker/pull/82,https://github.com/goniz,4,https://github.com/cahirwpz/mimiker/pull/82#issuecomment-255581746,"QEMU does not like c0_errpc and freaks out
Please report if this breaks your non-qemu emulator.
And if its does, we'll need to think if we want to solve this in different compilation targets or in startup runtime.","http://bxr.su/FreeBSD/sys/mips/mips/locore.S
It seems to me, that they turn off most of the bits in SR, then enable fpu and go right ahead to calling platform init and such.
After that platform_init + mi_startup sets up the rest of the subsystems required for threading and fixes the current execution environment to be the first thread
When it's done,  it passes itself to the ""swapper""  function to be scheduled in/out.
I hope I got it right.. 😉",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,82,2016-10-22T16:53:31Z,2016-10-23T17:00:07Z,2016-10-25T18:54:33Z,MERGED,True,18,8,2,https://github.com/goniz,boot: use regular jr to transfer control to kernel_boot instead of eret,2,[],https://github.com/cahirwpz/mimiker/pull/82,https://github.com/goniz,5,https://github.com/cahirwpz/mimiker/pull/82#issuecomment-255582166,"QEMU does not like c0_errpc and freaks out
Please report if this breaks your non-qemu emulator.
And if its does, we'll need to think if we want to solve this in different compilation targets or in startup runtime.",c0_status value is 0x00400000 at _start,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,82,2016-10-22T16:53:31Z,2016-10-23T17:00:07Z,2016-10-25T18:54:33Z,MERGED,True,18,8,2,https://github.com/goniz,boot: use regular jr to transfer control to kernel_boot instead of eret,2,[],https://github.com/cahirwpz/mimiker/pull/82,https://github.com/cahirwpz,6,https://github.com/cahirwpz/mimiker/pull/82#issuecomment-255582727,"QEMU does not like c0_errpc and freaks out
Please report if this breaks your non-qemu emulator.
And if its does, we'll need to think if we want to solve this in different compilation targets or in startup runtime.","The bit is SR_BEV (boot exception vectors). Apparently YAMON starts the program in kernel mode with exceptions turned off – eret does not make sense at all here. Seems like boot.S needs to be rewritten.
Could you verify YAMON behaviour by reading the documentation (link in main README.md file)?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,82,2016-10-22T16:53:31Z,2016-10-23T17:00:07Z,2016-10-25T18:54:33Z,MERGED,True,18,8,2,https://github.com/goniz,boot: use regular jr to transfer control to kernel_boot instead of eret,2,[],https://github.com/cahirwpz/mimiker/pull/82,https://github.com/goniz,7,https://github.com/cahirwpz/mimiker/pull/82#issuecomment-255583207,"QEMU does not like c0_errpc and freaks out
Please report if this breaks your non-qemu emulator.
And if its does, we'll need to think if we want to solve this in different compilation targets or in startup runtime.","Already working on it.
Will backup my implementation with the YAMON doc.",True,{'THUMBS_UP': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,82,2016-10-22T16:53:31Z,2016-10-23T17:00:07Z,2016-10-25T18:54:33Z,MERGED,True,18,8,2,https://github.com/goniz,boot: use regular jr to transfer control to kernel_boot instead of eret,2,[],https://github.com/cahirwpz/mimiker/pull/82,https://github.com/goniz,8,https://github.com/cahirwpz/mimiker/pull/82#issuecomment-255586642,"QEMU does not like c0_errpc and freaks out
Please report if this breaks your non-qemu emulator.
And if its does, we'll need to think if we want to solve this in different compilation targets or in startup runtime.","YAMON docs were somewhat vague.. and it seems it did not require too much changes to make it work..
Please report if its working as expected in OVPsim.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,82,2016-10-22T16:53:31Z,2016-10-23T17:00:07Z,2016-10-25T18:54:33Z,MERGED,True,18,8,2,https://github.com/goniz,boot: use regular jr to transfer control to kernel_boot instead of eret,2,[],https://github.com/cahirwpz/mimiker/pull/82,https://github.com/cahirwpz,9,https://github.com/cahirwpz/mimiker/pull/82#issuecomment-255598131,"QEMU does not like c0_errpc and freaks out
Please report if this breaks your non-qemu emulator.
And if its does, we'll need to think if we want to solve this in different compilation targets or in startup runtime.",AFAIK there's an option to allow owner of forked project to make changes in your branch? Could you make sure it's enabled - I'd like to put several comments into the file.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,82,2016-10-22T16:53:31Z,2016-10-23T17:00:07Z,2016-10-25T18:54:33Z,MERGED,True,18,8,2,https://github.com/goniz,boot: use regular jr to transfer control to kernel_boot instead of eret,2,[],https://github.com/cahirwpz/mimiker/pull/82,https://github.com/goniz,10,https://github.com/cahirwpz/mimiker/pull/82#issuecomment-255598343,"QEMU does not like c0_errpc and freaks out
Please report if this breaks your non-qemu emulator.
And if its does, we'll need to think if we want to solve this in different compilation targets or in startup runtime.","Are you talking about ""allow edits from maintainers""? It's enabled",True,{'THUMBS_UP': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,82,2016-10-22T16:53:31Z,2016-10-23T17:00:07Z,2016-10-25T18:54:33Z,MERGED,True,18,8,2,https://github.com/goniz,boot: use regular jr to transfer control to kernel_boot instead of eret,2,[],https://github.com/cahirwpz/mimiker/pull/82,https://github.com/goniz,11,https://github.com/cahirwpz/mimiker/pull/82#issuecomment-256139533,"QEMU does not like c0_errpc and freaks out
Please report if this breaks your non-qemu emulator.
And if its does, we'll need to think if we want to solve this in different compilation targets or in startup runtime.","Already working on it.
Will backup my implementation with the YAMON doc.
On Sun, Oct 23, 2016, 14:13 Krystian Bacławski notifications@github.com
wrote:

The bit is SR_BEV (boot exception vectors). Apparently YAMON starts the
program in kernel mode with exceptions turned off – eret does not make
sense at all here. Seems like boot.S needs to be rewritten.
Could you verify YAMON behaviour by reading the documentation (link in
main README.md file)?
—
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHub
#82 (comment), or mute
the thread
https://github.com/notifications/unsubscribe-auth/AA7no_i7_Z-cK5TYrX12IP4Zj9zC4Ejoks5q20FrgaJpZM4Kd6Mr
.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,83,2016-10-23T16:26:34Z,2016-10-23T17:35:34Z,2016-12-14T21:01:54Z,MERGED,True,1976,0,4,https://github.com/rafalcieslak,Imported headers with ELF type definitions from FreeBSD svn,3,[],https://github.com/cahirwpz/mimiker/pull/83,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/83,"These headers define structures, symbols and constants that follow the ELF file format specification.
They were copied from FreeBSD SVN (as of 22 X 2016). Since they implement an old, solid standard, they were almost unchanged for 18 years, and we will not have to update them in the future.","These headers define structures, symbols and constants that follow the ELF file format specification.
They were copied from FreeBSD SVN (as of 22 X 2016). Since they implement an old, solid standard, they were almost unchanged for 18 years, and we will not have to update them in the future.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,83,2016-10-23T16:26:34Z,2016-10-23T17:35:34Z,2016-12-14T21:01:54Z,MERGED,True,1976,0,4,https://github.com/rafalcieslak,Imported headers with ELF type definitions from FreeBSD svn,3,[],https://github.com/cahirwpz/mimiker/pull/83,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/83#issuecomment-255598295,"These headers define structures, symbols and constants that follow the ELF file format specification.
They were copied from FreeBSD SVN (as of 22 X 2016). Since they implement an old, solid standard, they were almost unchanged for 18 years, and we will not have to update them in the future.",Would it make sense to run clang-format over those header files?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,83,2016-10-23T16:26:34Z,2016-10-23T17:35:34Z,2016-12-14T21:01:54Z,MERGED,True,1976,0,4,https://github.com/rafalcieslak,Imported headers with ELF type definitions from FreeBSD svn,3,[],https://github.com/cahirwpz/mimiker/pull/83,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/83#issuecomment-255600964,"These headers define structures, symbols and constants that follow the ELF file format specification.
They were copied from FreeBSD SVN (as of 22 X 2016). Since they implement an old, solid standard, they were almost unchanged for 18 years, and we will not have to update them in the future.","Running clang-format on these headers using our .clang-format style description seriously misaligns values #define blocks, which are numerous in these files. For example, it turns:
#define STB_LOCAL   0   /* Local symbol */
#define STB_GLOBAL  1   /* Global symbol */
#define STB_WEAK    2   /* like global - lower precedence */
#define STB_LOOS    10  /* Start of operating system reserved range. */
#define STB_GNU_UNIQUE  10  /* Unique symbol (GNU) */
#define STB_HIOS    12  /* End of operating system reserved range. */
#define STB_LOPROC  13  /* reserved range for processor */
#define STB_HIPROC  15  /*   specific semantics. */

into
#define STB_LOCAL 0       /* Local symbol */
#define STB_GLOBAL 1      /* Global symbol */
#define STB_WEAK 2        /* like global - lower precedence */
#define STB_LOOS 10       /* Start of operating system reserved range. */
#define STB_GNU_UNIQUE 10 /* Unique symbol (GNU) */
#define STB_HIOS 12       /* End of operating system reserved range. */
#define STB_LOPROC 13     /* reserved range for processor */
#define STB_HIPROC 15     /*   specific semantics. */

I do not know which version we prefer.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,83,2016-10-23T16:26:34Z,2016-10-23T17:35:34Z,2016-12-14T21:01:54Z,MERGED,True,1976,0,4,https://github.com/rafalcieslak,Imported headers with ELF type definitions from FreeBSD svn,3,[],https://github.com/cahirwpz/mimiker/pull/83,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/83#issuecomment-255601366,"These headers define structures, symbols and constants that follow the ELF file format specification.
They were copied from FreeBSD SVN (as of 22 X 2016). Since they implement an old, solid standard, they were almost unchanged for 18 years, and we will not have to update them in the future.","The latter, please.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,83,2016-10-23T16:26:34Z,2016-10-23T17:35:34Z,2016-12-14T21:01:54Z,MERGED,True,1976,0,4,https://github.com/rafalcieslak,Imported headers with ELF type definitions from FreeBSD svn,3,[],https://github.com/cahirwpz/mimiker/pull/83,https://github.com/rafalcieslak,5,https://github.com/cahirwpz/mimiker/pull/83#issuecomment-255601859,"These headers define structures, symbols and constants that follow the ELF file format specification.
They were copied from FreeBSD SVN (as of 22 X 2016). Since they implement an old, solid standard, they were almost unchanged for 18 years, and we will not have to update them in the future.",Done. Almost all changes done by clang-format are limited to trimming multiple spaces.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,84,2016-10-23T17:31:14Z,2016-10-23T18:10:25Z,2016-12-14T21:01:53Z,MERGED,True,148,0,2,https://github.com/rafalcieslak,Imported strcmp from smallclib,1,[],https://github.com/cahirwpz/mimiker/pull/84,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/84,"This is fairly straightforward. This branch expands the set of basic functions we import from SmallCLib to include strcmp.
I came to need this function at 9861491 in elf-playground. Basically, if we intend to include multiple ELFs embedded in the kernel image, it will be handy to be able to refer to them by their name, so that exec interface can take a string (""path to file"") as its argument.
This implementation of strcmp is very simple, has no dependencies. Including it has no impact on our existing sources.","This is fairly straightforward. This branch expands the set of basic functions we import from SmallCLib to include strcmp.
I came to need this function at 9861491 in elf-playground. Basically, if we intend to include multiple ELFs embedded in the kernel image, it will be handy to be able to refer to them by their name, so that exec interface can take a string (""path to file"") as its argument.
This implementation of strcmp is very simple, has no dependencies. Including it has no impact on our existing sources.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,84,2016-10-23T17:31:14Z,2016-10-23T18:10:25Z,2016-12-14T21:01:53Z,MERGED,True,148,0,2,https://github.com/rafalcieslak,Imported strcmp from smallclib,1,[],https://github.com/cahirwpz/mimiker/pull/84,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/84#issuecomment-255601925,"This is fairly straightforward. This branch expands the set of basic functions we import from SmallCLib to include strcmp.
I came to need this function at 9861491 in elf-playground. Basically, if we intend to include multiple ELFs embedded in the kernel image, it will be handy to be able to refer to them by their name, so that exec interface can take a string (""path to file"") as its argument.
This implementation of strcmp is very simple, has no dependencies. Including it has no impact on our existing sources.",This one is simplier.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,84,2016-10-23T17:31:14Z,2016-10-23T18:10:25Z,2016-12-14T21:01:53Z,MERGED,True,148,0,2,https://github.com/rafalcieslak,Imported strcmp from smallclib,1,[],https://github.com/cahirwpz/mimiker/pull/84,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/84#issuecomment-255602222,"This is fairly straightforward. This branch expands the set of basic functions we import from SmallCLib to include strcmp.
I came to need this function at 9861491 in elf-playground. Basically, if we intend to include multiple ELFs embedded in the kernel image, it will be handy to be able to refer to them by their name, so that exec interface can take a string (""path to file"") as its argument.
This implementation of strcmp is very simple, has no dependencies. Including it has no impact on our existing sources.","It is indeed, although it is similar to the one from smallclib with __PREFER_SIZE_OVER_SPEED__ defined. And I suppose I could quickly write an even simpler implementation. But is picking different (nicest?) implementations from various sources per each per stdlib function what we actually want? I supposed that the purpose of agreeing on smallclib was mostly so that we could stick with it and import whatever we need from there. Mixing various sources may become tedious in the future.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,84,2016-10-23T17:31:14Z,2016-10-23T18:10:25Z,2016-12-14T21:01:53Z,MERGED,True,148,0,2,https://github.com/rafalcieslak,Imported strcmp from smallclib,1,[],https://github.com/cahirwpz/mimiker/pull/84,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/84#issuecomment-255604021,"This is fairly straightforward. This branch expands the set of basic functions we import from SmallCLib to include strcmp.
I came to need this function at 9861491 in elf-playground. Basically, if we intend to include multiple ELFs embedded in the kernel image, it will be handy to be able to refer to them by their name, so that exec interface can take a string (""path to file"") as its argument.
This implementation of strcmp is very simple, has no dependencies. Including it has no impact on our existing sources.","To be clear - I'll always prefer implementation that is simpler. AFAIR we initially chose smallclib over everything else, only because of printf simplicity. The choice was optimal at the time being... but I'm not convinced it's valid anymore.
Let's discuss it during seminar this week. I'll accept strcmp from smallclib for now.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,85,2016-10-23T20:08:17Z,2016-10-26T18:38:00Z,2016-10-26T18:38:58Z,MERGED,True,61,7,9,https://github.com/goniz,Introduced pcpu_t structure to hold global cpu state,2,[],https://github.com/cahirwpz/mimiker/pull/85,https://github.com/goniz,1,https://github.com/cahirwpz/mimiker/pull/85,"Initial proposal for the implementation of the pcpu_t structure used to hold global cpu state

Used sys/mips/include/pcpu.h and sys/sys/pcpu.h as reference.
Implemented both C and ASM api macros.
In the future this will hold per-cpu cpu state, for now its a simple global cpu state structure.
As of now, only current_thread is held in pcpu_t.","Initial proposal for the implementation of the pcpu_t structure used to hold global cpu state

Used sys/mips/include/pcpu.h and sys/sys/pcpu.h as reference.
Implemented both C and ASM api macros.
In the future this will hold per-cpu cpu state, for now its a simple global cpu state structure.
As of now, only current_thread is held in pcpu_t.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,85,2016-10-23T20:08:17Z,2016-10-26T18:38:00Z,2016-10-26T18:38:58Z,MERGED,True,61,7,9,https://github.com/goniz,Introduced pcpu_t structure to hold global cpu state,2,[],https://github.com/cahirwpz/mimiker/pull/85,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/85#issuecomment-256439205,"Initial proposal for the implementation of the pcpu_t structure used to hold global cpu state

Used sys/mips/include/pcpu.h and sys/sys/pcpu.h as reference.
Implemented both C and ASM api macros.
In the future this will hold per-cpu cpu state, for now its a simple global cpu state structure.
As of now, only current_thread is held in pcpu_t.",Good work! Thanks!,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,87,2016-10-28T20:12:32Z,2016-10-28T21:10:38Z,2016-10-28T21:10:38Z,MERGED,True,20,11,7,https://github.com/coodie,Remove asid from vm_map and pmap interface,3,[],https://github.com/cahirwpz/mimiker/pull/87,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/87,"While working on changing vm_map for user threads i realised it is better to keep asids away from interface. In future, when we have processes we might want to create asid or pid allocator, but for now simple incrementation until we run out of asids should be enough.","While working on changing vm_map for user threads i realised it is better to keep asids away from interface. In future, when we have processes we might want to create asid or pid allocator, but for now simple incrementation until we run out of asids should be enough.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,87,2016-10-28T20:12:32Z,2016-10-28T21:10:38Z,2016-10-28T21:10:38Z,MERGED,True,20,11,7,https://github.com/coodie,Remove asid from vm_map and pmap interface,3,[],https://github.com/cahirwpz/mimiker/pull/87,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/87#issuecomment-257024396,"While working on changing vm_map for user threads i realised it is better to keep asids away from interface. In future, when we have processes we might want to create asid or pid allocator, but for now simple incrementation until we run out of asids should be enough.",Please remember to run clang-format on your changes :),True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,87,2016-10-28T20:12:32Z,2016-10-28T21:10:38Z,2016-10-28T21:10:38Z,MERGED,True,20,11,7,https://github.com/coodie,Remove asid from vm_map and pmap interface,3,[],https://github.com/cahirwpz/mimiker/pull/87,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/87#issuecomment-257026049,"While working on changing vm_map for user threads i realised it is better to keep asids away from interface. In future, when we have processes we might want to create asid or pid allocator, but for now simple incrementation until we run out of asids should be enough.",This is great! I will need this change for experimenting with loading multiple user programs.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,87,2016-10-28T20:12:32Z,2016-10-28T21:10:38Z,2016-10-28T21:10:38Z,MERGED,True,20,11,7,https://github.com/coodie,Remove asid from vm_map and pmap interface,3,[],https://github.com/cahirwpz/mimiker/pull/87,https://github.com/coodie,4,https://github.com/cahirwpz/mimiker/pull/87#issuecomment-257026394,"While working on changing vm_map for user threads i realised it is better to keep asids away from interface. In future, when we have processes we might want to create asid or pid allocator, but for now simple incrementation until we run out of asids should be enough.","Running clang-format on mips/pmap.c pollutes this file with other formatting changes not associated with my change, because clang-format wasn't used on this file everytime it was changed.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,88,2016-10-28T21:44:48Z,2016-10-28T21:47:09Z,2016-12-14T21:03:05Z,MERGED,True,1,2,1,https://github.com/rafalcieslak,High-priority fix for non-compilable master,1,[],https://github.com/cahirwpz/mimiker/pull/88,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/88,"Recent parallel merges introduced conflicting vm_map_new API change and usage.
Can we merge this ASAP?","Recent parallel merges introduced conflicting vm_map_new API change and usage.
Can we merge this ASAP?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,89,2016-10-28T23:22:08Z,2016-10-29T06:30:48Z,2016-12-14T21:03:06Z,MERGED,True,1944,1991,62,https://github.com/rafalcieslak,Ran clang-format over all .c and .h files,1,[],https://github.com/cahirwpz/mimiker/pull/89,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/89,"Somebody has to do that eventually.
If you don't like this PR being so large and unverifiable by hand, please go ahead and run clang-format directly in master. If we demand all new changes to be formatted correctly, it will be much more convenient if existing code also is. Especially as I've configured my editor to run clang-format automatically each time I save a file - currently this introduces a lot of unrelated changes to my commits.
By the way, as we are sticking to .clang-format style definition, can we agree to remove the redundant file astyle.options?","Somebody has to do that eventually.
If you don't like this PR being so large and unverifiable by hand, please go ahead and run clang-format directly in master. If we demand all new changes to be formatted correctly, it will be much more convenient if existing code also is. Especially as I've configured my editor to run clang-format automatically each time I save a file - currently this introduces a lot of unrelated changes to my commits.
By the way, as we are sticking to .clang-format style definition, can we agree to remove the redundant file astyle.options?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,89,2016-10-28T23:22:08Z,2016-10-29T06:30:48Z,2016-12-14T21:03:06Z,MERGED,True,1944,1991,62,https://github.com/rafalcieslak,Ran clang-format over all .c and .h files,1,[],https://github.com/cahirwpz/mimiker/pull/89,https://github.com/coodie,2,https://github.com/cahirwpz/mimiker/pull/89#issuecomment-257051652,"Somebody has to do that eventually.
If you don't like this PR being so large and unverifiable by hand, please go ahead and run clang-format directly in master. If we demand all new changes to be formatted correctly, it will be much more convenient if existing code also is. Especially as I've configured my editor to run clang-format automatically each time I save a file - currently this introduces a lot of unrelated changes to my commits.
By the way, as we are sticking to .clang-format style definition, can we agree to remove the redundant file astyle.options?","Good idea, i'm also tired of manually formatting to avoid git blame and commit pollution. I'd merge this instantly, but I think we need @cahirwpz opinion.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,89,2016-10-28T23:22:08Z,2016-10-29T06:30:48Z,2016-12-14T21:03:06Z,MERGED,True,1944,1991,62,https://github.com/rafalcieslak,Ran clang-format over all .c and .h files,1,[],https://github.com/cahirwpz/mimiker/pull/89,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/89#issuecomment-257074458,"Somebody has to do that eventually.
If you don't like this PR being so large and unverifiable by hand, please go ahead and run clang-format directly in master. If we demand all new changes to be formatted correctly, it will be much more convenient if existing code also is. Especially as I've configured my editor to run clang-format automatically each time I save a file - currently this introduces a lot of unrelated changes to my commits.
By the way, as we are sticking to .clang-format style definition, can we agree to remove the redundant file astyle.options?",Please remove astyle.options in another commit.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,90,2016-10-28T23:27:31Z,2016-11-05T10:51:56Z,2016-11-05T10:52:29Z,MERGED,True,72,11,7,https://github.com/coodie,User threads switch vm_map spaces,2,[],https://github.com/cahirwpz/mimiker/pull/90,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/90,"I decided to introduce user space threads, which are in fact one thread processes. This is needed to test execution of recently introduced elf files and good introduction to processes. This will obviously need some changes, but it is a good start.","I decided to introduce user space threads, which are in fact one thread processes. This is needed to test execution of recently introduced elf files and good introduction to processes. This will obviously need some changes, but it is a good start.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,90,2016-10-28T23:27:31Z,2016-11-05T10:51:56Z,2016-11-05T10:52:29Z,MERGED,True,72,11,7,https://github.com/coodie,User threads switch vm_map spaces,2,[],https://github.com/cahirwpz/mimiker/pull/90,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/90#issuecomment-257053004,"I decided to introduce user space threads, which are in fact one thread processes. This is needed to test execution of recently introduced elf files and good introduction to processes. This will obviously need some changes, but it is a good start.","I have been using this branch for a while now, testing it with my experimental parallel user program support, and it appears to be working well.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,90,2016-10-28T23:27:31Z,2016-11-05T10:51:56Z,2016-11-05T10:52:29Z,MERGED,True,72,11,7,https://github.com/coodie,User threads switch vm_map spaces,2,[],https://github.com/cahirwpz/mimiker/pull/90,https://github.com/coodie,3,https://github.com/cahirwpz/mimiker/pull/90#issuecomment-257054140,"I decided to introduce user space threads, which are in fact one thread processes. This is needed to test execution of recently introduced elf files and good introduction to processes. This will obviously need some changes, but it is a good start.","I suspect this will be merged, therefore I'll work on turnstiles from this branchmerge. @cahirwpz  Please merge this ASAP.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,90,2016-10-28T23:27:31Z,2016-11-05T10:51:56Z,2016-11-05T10:52:29Z,MERGED,True,72,11,7,https://github.com/coodie,User threads switch vm_map spaces,2,[],https://github.com/cahirwpz/mimiker/pull/90,https://github.com/coodie,4,https://github.com/cahirwpz/mimiker/pull/90#issuecomment-257084266,"I decided to introduce user space threads, which are in fact one thread processes. This is needed to test execution of recently introduced elf files and good introduction to processes. This will obviously need some changes, but it is a good start.",@cahirwpz Can you please review this? I don't feel like rebasing branches after every commit on master which creates merge conflicts.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,90,2016-10-28T23:27:31Z,2016-11-05T10:51:56Z,2016-11-05T10:52:29Z,MERGED,True,72,11,7,https://github.com/coodie,User threads switch vm_map spaces,2,[],https://github.com/cahirwpz/mimiker/pull/90,https://github.com/cahirwpz,5,https://github.com/cahirwpz/mimiker/pull/90#issuecomment-258095791,"I decided to introduce user space threads, which are in fact one thread processes. This is needed to test execution of recently introduced elf files and good introduction to processes. This will obviously need some changes, but it is a good start.","Is there any progress here? If not, I'll fix the PR taking into account my comments.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,90,2016-10-28T23:27:31Z,2016-11-05T10:51:56Z,2016-11-05T10:52:29Z,MERGED,True,72,11,7,https://github.com/coodie,User threads switch vm_map spaces,2,[],https://github.com/cahirwpz/mimiker/pull/90,https://github.com/rafalcieslak,6,https://github.com/cahirwpz/mimiker/pull/90#issuecomment-258104964,"I decided to introduce user space threads, which are in fact one thread processes. This is needed to test execution of recently introduced elf files and good introduction to processes. This will obviously need some changes, but it is a good start.","Please go ahead. @coodie was recently busy and asked me to finish this
branch, so you may do this just as well.",True,{'THUMBS_UP': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,91,2016-10-28T23:46:35Z,2016-10-29T06:32:11Z,2016-12-14T21:03:08Z,MERGED,True,4,1,1,https://github.com/rafalcieslak,./launch script: -D flag implies -d,1,[],https://github.com/cahirwpz/mimiker/pull/91,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/91,"This is a cosmetic change for the launch script. Specifying a debugger by using -D flag implies debug mode enabled with -d, so one can skip -d when using non-default debugger.","This is a cosmetic change for the launch script. Specifying a debugger by using -D flag implies debug mode enabled with -d, so one can skip -d when using non-default debugger.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,92,2016-10-29T15:08:39Z,2016-11-03T09:29:56Z,2016-12-14T21:03:10Z,CLOSED,False,9,1,1,https://github.com/rafalcieslak,Fix for user threads never getting preempted,1,[],https://github.com/cahirwpz/mimiker/pull/92,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/92,"The finalization for for kernel_exc_enter already checks whether the current threads TD_NEEDSSWITCH, and switches context if it does. This patch adds the same logic to user_exc_enter. Without this fix any thread running in user mode may be interrupted, but the scheduler never gets a chance to preempt it.
This is part of preparation for experimental usermode support I'm working on.","The finalization for for kernel_exc_enter already checks whether the current threads TD_NEEDSSWITCH, and switches context if it does. This patch adds the same logic to user_exc_enter. Without this fix any thread running in user mode may be interrupted, but the scheduler never gets a chance to preempt it.
This is part of preparation for experimental usermode support I'm working on.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,92,2016-10-29T15:08:39Z,2016-11-03T09:29:56Z,2016-12-14T21:03:10Z,CLOSED,False,9,1,1,https://github.com/rafalcieslak,Fix for user threads never getting preempted,1,[],https://github.com/cahirwpz/mimiker/pull/92,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/92#issuecomment-257099875,"The finalization for for kernel_exc_enter already checks whether the current threads TD_NEEDSSWITCH, and switches context if it does. This patch adds the same logic to user_exc_enter. Without this fix any thread running in user mode may be interrupted, but the scheduler never gets a chance to preempt it.
This is part of preparation for experimental usermode support I'm working on.",Please don't work on it. I've already started fixing many issues around exception processing. Unfortunately I lost access to zeus server and I cannot continue.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,92,2016-10-29T15:08:39Z,2016-11-03T09:29:56Z,2016-12-14T21:03:10Z,CLOSED,False,9,1,1,https://github.com/rafalcieslak,Fix for user threads never getting preempted,1,[],https://github.com/cahirwpz/mimiker/pull/92,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/92#issuecomment-257100187,"The finalization for for kernel_exc_enter already checks whether the current threads TD_NEEDSSWITCH, and switches context if it does. This patch adds the same logic to user_exc_enter. Without this fix any thread running in user mode may be interrupted, but the scheduler never gets a chance to preempt it.
This is part of preparation for experimental usermode support I'm working on.","That's a shame, because I've been also working on this since early morning. In this case I'll wait for your patches and compare them with mine. Would you mind creating a PR with them instead of committing directly to master so that we can discuss your changes?
Zeus is generally very unreliable. More often than not, I find myself being forced to use a local copy of OVPsim with my personal license, and I am glad I have it configured for local use.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,92,2016-10-29T15:08:39Z,2016-11-03T09:29:56Z,2016-12-14T21:03:10Z,CLOSED,False,9,1,1,https://github.com/rafalcieslak,Fix for user threads never getting preempted,1,[],https://github.com/cahirwpz/mimiker/pull/92,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/92#issuecomment-257101510,"The finalization for for kernel_exc_enter already checks whether the current threads TD_NEEDSSWITCH, and switches context if it does. This patch adds the same logic to user_exc_enter. Without this fix any thread running in user mode may be interrupted, but the scheduler never gets a chance to preempt it.
This is part of preparation for experimental usermode support I'm working on.","Roughly speaking, I've managed to run syscalls from user-space. I only needed to fix a problem with kernel-space stack in user_exc_enter. I'm afraid I won't have the access to patches till Monday :(",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,92,2016-10-29T15:08:39Z,2016-11-03T09:29:56Z,2016-12-14T21:03:10Z,CLOSED,False,9,1,1,https://github.com/rafalcieslak,Fix for user threads never getting preempted,1,[],https://github.com/cahirwpz/mimiker/pull/92,https://github.com/rafalcieslak,5,https://github.com/cahirwpz/mimiker/pull/92#issuecomment-257105443,"The finalization for for kernel_exc_enter already checks whether the current threads TD_NEEDSSWITCH, and switches context if it does. This patch adds the same logic to user_exc_enter. Without this fix any thread running in user mode may be interrupted, but the scheduler never gets a chance to preempt it.
This is part of preparation for experimental usermode support I'm working on.","My use case (still experimenting with running multiple user threads in parallel) required more fixes. I'll list them briefly as these bugs may affect syscalls as well! So besides the patch in this PR:

Kernel $sp needs setting up when entering exception handler from user mode. There's a TODO comment on that.
ctx_switch loads status register using incorrect base address (is: a0, should be: a1).
Entire sched_switch procedure needs some sync, otherwise runq may become corrupted if an interrupt happens while choosing a thread to run. Simple cs_enter/leave seems to solve this problem.

I have a hunch that my branch will be complimentary to your work on syscalls, and it will be interesting to cross-test them against each other.",True,{'THUMBS_UP': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,92,2016-10-29T15:08:39Z,2016-11-03T09:29:56Z,2016-12-14T21:03:10Z,CLOSED,False,9,1,1,https://github.com/rafalcieslak,Fix for user threads never getting preempted,1,[],https://github.com/cahirwpz/mimiker/pull/92,https://github.com/cahirwpz,6,https://github.com/cahirwpz/mimiker/pull/92#issuecomment-258095974,"The finalization for for kernel_exc_enter already checks whether the current threads TD_NEEDSSWITCH, and switches context if it does. This patch adds the same logic to user_exc_enter. Without this fix any thread running in user mode may be interrupted, but the scheduler never gets a chance to preempt it.
This is part of preparation for experimental usermode support I'm working on.",Not an issue anymore. Fixed in 4d79fce.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,93,2016-10-29T19:13:45Z,2016-10-29T19:15:39Z,2016-12-14T21:03:22Z,MERGED,True,14,12,2,https://github.com/rafalcieslak,Track file directory in make output,1,[],https://github.com/cahirwpz/mimiker/pull/93,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/93,"This branch improves make output, so that processed files are represented by their path, not just their name. Current output is confusing for files from different directories that share identical names.
Old output format (fragments):
[CC] thread.c -> thread.o
[CC] pcpu.c -> pcpu.o
[AS] start.S -> start.o
[LD] prog.o -> prog.uelf
[CC] thread.c -> thread.ko

New output format:
[CC] sys/thread.c -> sys/thread.o
[CC] sys/pcpu.c -> sys/pcpu.o
[AS] user/start.S -> user/start.o
[LD] user/prog.o -> user/prog.uelf
[CC] thread.c -> thread.ko

This works even for multi-level recursive Makefiles. It also works when make is called in a subdirectory.","This branch improves make output, so that processed files are represented by their path, not just their name. Current output is confusing for files from different directories that share identical names.
Old output format (fragments):
[CC] thread.c -> thread.o
[CC] pcpu.c -> pcpu.o
[AS] start.S -> start.o
[LD] prog.o -> prog.uelf
[CC] thread.c -> thread.ko

New output format:
[CC] sys/thread.c -> sys/thread.o
[CC] sys/pcpu.c -> sys/pcpu.o
[AS] user/start.S -> user/start.o
[LD] user/prog.o -> user/prog.uelf
[CC] thread.c -> thread.ko

This works even for multi-level recursive Makefiles. It also works when make is called in a subdirectory.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,94,2016-10-29T20:06:37Z,2016-11-04T21:11:47Z,2016-12-14T21:03:24Z,CLOSED,False,25,12,4,https://github.com/rafalcieslak,Fixed pmap_type/vm_map_type confusion,1,[],https://github.com/cahirwpz/mimiker/pull/94,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/94,"As of now, pmap_type_t and vm_map_type_t are used interchangeably. It works, because these two enums are identical, but it is a confusing example of implicit type conversions - and clang is very annoyed by how we confuse these types.
This branch fixes type sanity, by refactoring vm_map interface so that it only uses vm_map_type, and fixing enum values used on calls to vm_map functions.","As of now, pmap_type_t and vm_map_type_t are used interchangeably. It works, because these two enums are identical, but it is a confusing example of implicit type conversions - and clang is very annoyed by how we confuse these types.
This branch fixes type sanity, by refactoring vm_map interface so that it only uses vm_map_type, and fixing enum values used on calls to vm_map functions.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,94,2016-10-29T20:06:37Z,2016-11-04T21:11:47Z,2016-12-14T21:03:24Z,CLOSED,False,25,12,4,https://github.com/rafalcieslak,Fixed pmap_type/vm_map_type confusion,1,[],https://github.com/cahirwpz/mimiker/pull/94,https://github.com/coodie,2,https://github.com/cahirwpz/mimiker/pull/94#issuecomment-257126185,"As of now, pmap_type_t and vm_map_type_t are used interchangeably. It works, because these two enums are identical, but it is a confusing example of implicit type conversions - and clang is very annoyed by how we confuse these types.
This branch fixes type sanity, by refactoring vm_map interface so that it only uses vm_map_type, and fixing enum values used on calls to vm_map functions.","I really like this change, because I'm often confused whether I should PMAP_* or VM_MAP_* macros, and yes - we should also use some extra tool to discover more bugs.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,94,2016-10-29T20:06:37Z,2016-11-04T21:11:47Z,2016-12-14T21:03:24Z,CLOSED,False,25,12,4,https://github.com/rafalcieslak,Fixed pmap_type/vm_map_type confusion,1,[],https://github.com/cahirwpz/mimiker/pull/94,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/94#issuecomment-257135120,"As of now, pmap_type_t and vm_map_type_t are used interchangeably. It works, because these two enums are identical, but it is a confusing example of implicit type conversions - and clang is very annoyed by how we confuse these types.
This branch fixes type sanity, by refactoring vm_map interface so that it only uses vm_map_type, and fixing enum values used on calls to vm_map functions.","I wonder if we're going to need more than two active vm_map's. I tried to come up with a scenario where three or more need to be active at once... and nothing comes to my mind.
Perhaps we should just use:
vm_map_t *get_user_vm_map();
vm_map_t *get_kernel_vm_map();",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,94,2016-10-29T20:06:37Z,2016-11-04T21:11:47Z,2016-12-14T21:03:24Z,CLOSED,False,25,12,4,https://github.com/rafalcieslak,Fixed pmap_type/vm_map_type confusion,1,[],https://github.com/cahirwpz/mimiker/pull/94,https://github.com/rafalcieslak,4,https://github.com/cahirwpz/mimiker/pull/94#issuecomment-257153058,"As of now, pmap_type_t and vm_map_type_t are used interchangeably. It works, because these two enums are identical, but it is a confusing example of implicit type conversions - and clang is very annoyed by how we confuse these types.
This branch fixes type sanity, by refactoring vm_map interface so that it only uses vm_map_type, and fixing enum values used on calls to vm_map functions.","By following this logic, we should also split:
static vm_map_t *active_vm_map[VM_MAP_LAST];
into:
static vm_map_t *active_user_vm_map;
static vm_map_t *active_kernel_vm_map;",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,94,2016-10-29T20:06:37Z,2016-11-04T21:11:47Z,2016-12-14T21:03:24Z,CLOSED,False,25,12,4,https://github.com/rafalcieslak,Fixed pmap_type/vm_map_type confusion,1,[],https://github.com/cahirwpz/mimiker/pull/94,https://github.com/cahirwpz,5,https://github.com/cahirwpz/mimiker/pull/94#issuecomment-257159633,"As of now, pmap_type_t and vm_map_type_t are used interchangeably. It works, because these two enums are identical, but it is a confusing example of implicit type conversions - and clang is very annoyed by how we confuse these types.
This branch fixes type sanity, by refactoring vm_map interface so that it only uses vm_map_type, and fixing enum values used on calls to vm_map functions.","I don't think active_user_vm_map has to be global. If we introduced a pointer to vm_map in thread_t structure, then active_user_vm_map could be looked up by accessing currthread from pcpu structure.
On the other hand kernel vm_map could be allocated statically in .data section.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,94,2016-10-29T20:06:37Z,2016-11-04T21:11:47Z,2016-12-14T21:03:24Z,CLOSED,False,25,12,4,https://github.com/rafalcieslak,Fixed pmap_type/vm_map_type confusion,1,[],https://github.com/cahirwpz/mimiker/pull/94,https://github.com/rafalcieslak,6,https://github.com/cahirwpz/mimiker/pull/94#issuecomment-258472476,"As of now, pmap_type_t and vm_map_type_t are used interchangeably. It works, because these two enums are identical, but it is a confusing example of implicit type conversions - and clang is very annoyed by how we confuse these types.
This branch fixes type sanity, by refactoring vm_map interface so that it only uses vm_map_type, and fixing enum values used on calls to vm_map functions.","For the record, getting current user vm_map from thread struct can't be reliably implemented before #90 is done.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,94,2016-10-29T20:06:37Z,2016-11-04T21:11:47Z,2016-12-14T21:03:24Z,CLOSED,False,25,12,4,https://github.com/rafalcieslak,Fixed pmap_type/vm_map_type confusion,1,[],https://github.com/cahirwpz/mimiker/pull/94,https://github.com/cahirwpz,7,https://github.com/cahirwpz/mimiker/pull/94#issuecomment-258548592,"As of now, pmap_type_t and vm_map_type_t are used interchangeably. It works, because these two enums are identical, but it is a confusing example of implicit type conversions - and clang is very annoyed by how we confuse these types.
This branch fixes type sanity, by refactoring vm_map interface so that it only uses vm_map_type, and fixing enum values used on calls to vm_map functions.",Resolved with 756b358.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,95,2016-10-29T20:59:20Z,2016-10-29T21:07:34Z,2016-11-03T09:30:29Z,MERGED,True,1,1,1,https://github.com/coodie,Serious typeo in sched_switch code (& and ==),2,[],https://github.com/cahirwpz/mimiker/pull/95,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/95,"Shouldn't this be ""=="" instead of ""&"" ?
By the way, since me and @rafalcieslak managed to find some bugs in @cahirwpz implementation, wouldn't it be good idea to make pull requests so everyone can do code review?","Shouldn't this be ""=="" instead of ""&"" ?
By the way, since me and @rafalcieslak managed to find some bugs in @cahirwpz implementation, wouldn't it be good idea to make pull requests so everyone can do code review?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,95,2016-10-29T20:59:20Z,2016-10-29T21:07:34Z,2016-11-03T09:30:29Z,MERGED,True,1,1,1,https://github.com/coodie,Serious typeo in sched_switch code (& and ==),2,[],https://github.com/cahirwpz/mimiker/pull/95,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/95#issuecomment-257116039,"Shouldn't this be ""=="" instead of ""&"" ?
By the way, since me and @rafalcieslak managed to find some bugs in @cahirwpz implementation, wouldn't it be good idea to make pull requests so everyone can do code review?",I'm a human and I make mistakes – I'll ask both of you for review when my changes are non-trivial.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,95,2016-10-29T20:59:20Z,2016-10-29T21:07:34Z,2016-11-03T09:30:29Z,MERGED,True,1,1,1,https://github.com/coodie,Serious typeo in sched_switch code (& and ==),2,[],https://github.com/cahirwpz/mimiker/pull/95,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/95#issuecomment-257116339,"Shouldn't this be ""=="" instead of ""&"" ?
By the way, since me and @rafalcieslak managed to find some bugs in @cahirwpz implementation, wouldn't it be good idea to make pull requests so everyone can do code review?","You just saved me a lot of debugging!
But I doubt I could spot this if I were to review this code.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,95,2016-10-29T20:59:20Z,2016-10-29T21:07:34Z,2016-11-03T09:30:29Z,MERGED,True,1,1,1,https://github.com/coodie,Serious typeo in sched_switch code (& and ==),2,[],https://github.com/cahirwpz/mimiker/pull/95,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/95#issuecomment-257134901,"Shouldn't this be ""=="" instead of ""&"" ?
By the way, since me and @rafalcieslak managed to find some bugs in @cahirwpz implementation, wouldn't it be good idea to make pull requests so everyone can do code review?","""Given enough eyeballs, all bugs are shallow."" – Linus Torvalds ;-)",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,96,2016-10-30T01:58:23Z,2016-10-30T06:32:48Z,2016-11-03T09:30:27Z,MERGED,True,1,1,1,https://github.com/coodie,Unsigned variable is always bigger than zero!,1,[],https://github.com/cahirwpz/mimiker/pull/96,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/96,No need to explain what's going on here. This causes bus error if runq is empty (which happened in my case).,No need to explain what's going on here. This causes bus error if runq is empty (which happened in my case).,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,96,2016-10-30T01:58:23Z,2016-10-30T06:32:48Z,2016-11-03T09:30:27Z,MERGED,True,1,1,1,https://github.com/coodie,Unsigned variable is always bigger than zero!,1,[],https://github.com/cahirwpz/mimiker/pull/96,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/96#issuecomment-257134752,No need to explain what's going on here. This causes bus error if runq is empty (which happened in my case).,Another nasty bug identified! Thanks!,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,96,2016-10-30T01:58:23Z,2016-10-30T06:32:48Z,2016-11-03T09:30:27Z,MERGED,True,1,1,1,https://github.com/coodie,Unsigned variable is always bigger than zero!,1,[],https://github.com/cahirwpz/mimiker/pull/96,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/96#issuecomment-257134940,No need to explain what's going on here. This causes bus error if runq is empty (which happened in my case).,This made me think... shouldn't compiler warn about it?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,96,2016-10-30T01:58:23Z,2016-10-30T06:32:48Z,2016-11-03T09:30:27Z,MERGED,True,1,1,1,https://github.com/coodie,Unsigned variable is always bigger than zero!,1,[],https://github.com/cahirwpz/mimiker/pull/96,https://github.com/rafalcieslak,4,https://github.com/cahirwpz/mimiker/pull/96#issuecomment-257148315,No need to explain what's going on here. This causes bus error if runq is empty (which happened in my case).,"GCC would warn us if we enabled -Wextra, or at least -Wsign-compare.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,96,2016-10-30T01:58:23Z,2016-10-30T06:32:48Z,2016-11-03T09:30:27Z,MERGED,True,1,1,1,https://github.com/coodie,Unsigned variable is always bigger than zero!,1,[],https://github.com/cahirwpz/mimiker/pull/96,https://github.com/cahirwpz,5,https://github.com/cahirwpz/mimiker/pull/96#issuecomment-257159015,No need to explain what's going on here. This causes bus error if runq is empty (which happened in my case).,"Then I guess we should start using -Wextra flag immediately.
How difficult would it be to run clang frontend on kernel sources to catch extra warnings?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,96,2016-10-30T01:58:23Z,2016-10-30T06:32:48Z,2016-11-03T09:30:27Z,MERGED,True,1,1,1,https://github.com/coodie,Unsigned variable is always bigger than zero!,1,[],https://github.com/cahirwpz/mimiker/pull/96,https://github.com/rafalcieslak,6,https://github.com/cahirwpz/mimiker/pull/96#issuecomment-257161295,No need to explain what's going on here. This causes bus error if runq is empty (which happened in my case).,"Fairly straightforward, I believe.
$ clang -fsyntax-only -Wall -Wextra -Iinclude --std=gnu11 sys/vm_map.c

In my case this outputs some 8 warnings for this file. The only tricky parts are that it (unlike mips-mti-elf-gcc) is not aware of header files we pull from the toolchain (mips/cpu.h, in particular), and that it has some trouble expanding preprocessor macros from include/elf/*.h.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,97,2016-10-30T13:25:29Z,2016-10-30T15:44:12Z,2016-12-14T21:03:26Z,MERGED,True,6,35,2,https://github.com/rafalcieslak,"Removing depracated astyle support, make rules for clang-format",2,[],https://github.com/cahirwpz/mimiker/pull/97,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/97,"As we are now committed to clang-format, the astyle.options file is redundant. This branch removes the file and associated rules in Makefile, and implements a new make target format which runs clang-format over all .h and .c files, except imported ones.","As we are now committed to clang-format, the astyle.options file is redundant. This branch removes the file and associated rules in Makefile, and implements a new make target format which runs clang-format over all .h and .c files, except imported ones.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,98,2016-10-31T16:42:36Z,2016-11-03T09:24:01Z,2016-11-03T09:31:35Z,MERGED,True,87,22,4,https://github.com/cahirwpz,Implement syscalls from user space. Fix switching routines.,2,[],https://github.com/cahirwpz/mimiker/pull/98,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/98,"@rafalcieslak @coodie Please review hard ;-)
BTW. vm_map.elf and pmap.elf tests in master branch are broken.","@rafalcieslak @coodie Please review hard ;-)
BTW. vm_map.elf and pmap.elf tests in master branch are broken.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,98,2016-10-31T16:42:36Z,2016-11-03T09:24:01Z,2016-11-03T09:31:35Z,MERGED,True,87,22,4,https://github.com/cahirwpz,Implement syscalls from user space. Fix switching routines.,2,[],https://github.com/cahirwpz/mimiker/pull/98,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/98#issuecomment-258083803,"@rafalcieslak @coodie Please review hard ;-)
BTW. vm_map.elf and pmap.elf tests in master branch are broken.","I have been testing this branch + vm_space_switch for a while, and I have been able to correctly switch between user programs now(!) - so this branch does indeed correctly fix the issues I experienced. Very nice! Green light from me.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,99,2016-11-02T09:54:54Z,2016-11-03T09:35:22Z,2017-05-23T12:52:44Z,MERGED,True,8,3,1,https://github.com/dyniec,Travis,2,[],https://github.com/cahirwpz/mimiker/pull/99,https://github.com/dyniec,1,https://github.com/cahirwpz/mimiker/pull/99,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,99,2016-11-02T09:54:54Z,2016-11-03T09:35:22Z,2017-05-23T12:52:44Z,MERGED,True,8,3,1,https://github.com/dyniec,Travis,2,[],https://github.com/cahirwpz/mimiker/pull/99,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/99#issuecomment-257903066,,"Looks ok!
Have you tried to run the kernel with qemu provided by Imagination Technologies ?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,99,2016-11-02T09:54:54Z,2016-11-03T09:35:22Z,2017-05-23T12:52:44Z,MERGED,True,8,3,1,https://github.com/dyniec,Travis,2,[],https://github.com/cahirwpz/mimiker/pull/99,https://github.com/dyniec,3,https://github.com/cahirwpz/mimiker/pull/99#issuecomment-257976650,,"Yes. And it works! I changed launch script. UART over TCP works. Tests give similar (if not the same) results. I'm not sure about gdb.
Only difference I found(and TLB size):
Vectored interrupts implemented : no\n UserLocal register implemented  : no
I hope i can change this in qemu settings.
Idea for automated tests(for Travis) :
nm.expect('Test passed.') in lauch_qemu, but not every .elf finishes with this status.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,99,2016-11-02T09:54:54Z,2016-11-03T09:35:22Z,2017-05-23T12:52:44Z,MERGED,True,8,3,1,https://github.com/dyniec,Travis,2,[],https://github.com/cahirwpz/mimiker/pull/99,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/99#issuecomment-257982119,,Could you start working on launch script modifications to enable qemu as an alternative simulator? Extra -S / --simulator option would be ok.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,99,2016-11-02T09:54:54Z,2016-11-03T09:35:22Z,2017-05-23T12:52:44Z,MERGED,True,8,3,1,https://github.com/dyniec,Travis,2,[],https://github.com/cahirwpz/mimiker/pull/99,https://github.com/cahirwpz,5,https://github.com/cahirwpz/mimiker/pull/99#issuecomment-258096773,,I'll merge the branch as is. Please start working on launch script modifications in another PR.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,100,2016-11-04T15:24:12Z,2016-11-04T18:37:46Z,2016-12-14T21:03:30Z,MERGED,True,1,1,1,https://github.com/rafalcieslak,Fixed typo in ctx_resume,1,[],https://github.com/cahirwpz/mimiker/pull/100,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/100,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,101,2016-11-05T15:43:11Z,2016-11-05T19:10:31Z,2016-12-14T21:03:39Z,CLOSED,False,132,98,8,https://github.com/rafalcieslak,User mode programs,7,[],https://github.com/cahirwpz/mimiker/pull/101,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/101,"This branch concludes changes to do_exec() that are required to correctly start multiple user-mode threads. It implements ctx_init_usermode which is semantically similar to fork_trampoline, gets exec() to store vmap to thread structure and switch to usermode when switching to loaded program, cleans up exec() from machine-specific code and provides a simple demonstration.
My recommended quick-test procedure (until we have a ""print"" syscall):

Load exec.elf in debugger
add-symbol-file user/prog.uelf 0x00400000
continue multiple times to step through all main()s
Interrupt the execution ^C, print textarea, continue further.
Interrupt again. Unless you are unlucky, a different user thread is now active, and it wrote different values to textarea.
Repeat to observe threads getting switched.","This branch concludes changes to do_exec() that are required to correctly start multiple user-mode threads. It implements ctx_init_usermode which is semantically similar to fork_trampoline, gets exec() to store vmap to thread structure and switch to usermode when switching to loaded program, cleans up exec() from machine-specific code and provides a simple demonstration.
My recommended quick-test procedure (until we have a ""print"" syscall):

Load exec.elf in debugger
add-symbol-file user/prog.uelf 0x00400000
continue multiple times to step through all main()s
Interrupt the execution ^C, print textarea, continue further.
Interrupt again. Unless you are unlucky, a different user thread is now active, and it wrote different values to textarea.
Repeat to observe threads getting switched.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,101,2016-11-05T15:43:11Z,2016-11-05T19:10:31Z,2016-12-14T21:03:39Z,CLOSED,False,132,98,8,https://github.com/rafalcieslak,User mode programs,7,[],https://github.com/cahirwpz/mimiker/pull/101,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/101#issuecomment-258630957,"This branch concludes changes to do_exec() that are required to correctly start multiple user-mode threads. It implements ctx_init_usermode which is semantically similar to fork_trampoline, gets exec() to store vmap to thread structure and switch to usermode when switching to loaded program, cleans up exec() from machine-specific code and provides a simple demonstration.
My recommended quick-test procedure (until we have a ""print"" syscall):

Load exec.elf in debugger
add-symbol-file user/prog.uelf 0x00400000
continue multiple times to step through all main()s
Interrupt the execution ^C, print textarea, continue further.
Interrupt again. Unless you are unlucky, a different user thread is now active, and it wrote different values to textarea.
Repeat to observe threads getting switched.","If you finished working on that branch, I'd like to possibly make some changes (in your repository) before merging with master. Is that ok with you?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,101,2016-11-05T15:43:11Z,2016-11-05T19:10:31Z,2016-12-14T21:03:39Z,CLOSED,False,132,98,8,https://github.com/rafalcieslak,User mode programs,7,[],https://github.com/cahirwpz/mimiker/pull/101,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/101#issuecomment-258631522,"This branch concludes changes to do_exec() that are required to correctly start multiple user-mode threads. It implements ctx_init_usermode which is semantically similar to fork_trampoline, gets exec() to store vmap to thread structure and switch to usermode when switching to loaded program, cleans up exec() from machine-specific code and provides a simple demonstration.
My recommended quick-test procedure (until we have a ""print"" syscall):

Load exec.elf in debugger
add-symbol-file user/prog.uelf 0x00400000
continue multiple times to step through all main()s
Interrupt the execution ^C, print textarea, continue further.
Interrupt again. Unless you are unlucky, a different user thread is now active, and it wrote different values to textarea.
Repeat to observe threads getting switched.",Go ahead.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,103,2016-11-05T16:26:23Z,2016-11-05T17:54:06Z,2016-11-05T18:09:57Z,MERGED,True,9,3,2,https://github.com/cahirwpz,vm_map_activate uses current thread's vm space,1,[],https://github.com/cahirwpz/mimiker/pull/103,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/103,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,103,2016-11-05T16:26:23Z,2016-11-05T17:54:06Z,2016-11-05T18:09:57Z,MERGED,True,9,3,2,https://github.com/cahirwpz,vm_map_activate uses current thread's vm space,1,[],https://github.com/cahirwpz/mimiker/pull/103,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/103#issuecomment-258624938,,@rafalcieslak As you gave the PR a look – can I merge it?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,103,2016-11-05T16:26:23Z,2016-11-05T17:54:06Z,2016-11-05T18:09:57Z,MERGED,True,9,3,2,https://github.com/cahirwpz,vm_map_activate uses current thread's vm space,1,[],https://github.com/cahirwpz/mimiker/pull/103,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/103#issuecomment-258629323,,"Yes, it looks fine.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,104,2016-11-05T18:13:13Z,2016-11-05T18:15:12Z,2016-12-14T21:03:35Z,MERGED,True,28,15,2,https://github.com/rafalcieslak,Templates for get_elf_image and generic ./user Makefile,1,[],https://github.com/cahirwpz/mimiker/pull/104,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/104,"These proposed changes simplify adding multiple user programs to ./user, by implementing a generic Makefile and templates for selecting embedded elf image in get_elf_image.","These proposed changes simplify adding multiple user programs to ./user, by implementing a generic Makefile and templates for selecting embedded elf image in get_elf_image.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,104,2016-11-05T18:13:13Z,2016-11-05T18:15:12Z,2016-12-14T21:03:35Z,MERGED,True,28,15,2,https://github.com/rafalcieslak,Templates for get_elf_image and generic ./user Makefile,1,[],https://github.com/cahirwpz/mimiker/pull/104,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/104#issuecomment-258630879,"These proposed changes simplify adding multiple user programs to ./user, by implementing a generic Makefile and templates for selecting embedded elf image in get_elf_image.",LGTM!,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,105,2016-11-05T19:09:53Z,2016-11-05T19:12:58Z,2016-11-05T19:24:17Z,MERGED,True,124,96,7,https://github.com/cahirwpz,Rafalcieslak parallel user programs6,5,[],https://github.com/cahirwpz/mimiker/pull/105,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/105,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,106,2016-11-05T19:15:45Z,2016-11-11T18:18:33Z,2017-05-23T12:52:43Z,MERGED,True,131,58,2,https://github.com/dyniec,Added qemu support to lauch script,4,[],https://github.com/cahirwpz/mimiker/pull/106,https://github.com/dyniec,1,https://github.com/cahirwpz/mimiker/pull/106,"QEMU works most of the time. In rtc.elfeven first printed time is correct(OVPsim).
But sometimes (30% of runs) mimiker stops/crashes before main. Even errors are non-deterministic.
Last printfed message is [startup] subsystems initialized or [thread] Activating 'main' {0x802be030} thread!. When run with debugger attached it stops just after kmalloc_init(td_pool) in thread_init.
QEMU likes to exit with different messages: one of them is
dma: command fc not supported
dma: command ff not supported
qemu: unsupported keyboard cmd=0x78
qemu: unsupported keyboard cmd=0x14
qemu: unsupported keyboard cmd=0x10
qemu: unsupported keyboard cmd=0x80
and another one
PFLASH: Possible BUG - Write block confirm.
When started with debugger only second one appears.
I'm not sure if we should merge this, but I would be happy if somebody could check if this is either mimiker's or qemu's fault.","QEMU works most of the time. In rtc.elfeven first printed time is correct(OVPsim).
But sometimes (30% of runs) mimiker stops/crashes before main. Even errors are non-deterministic.
Last printfed message is [startup] subsystems initialized or [thread] Activating 'main' {0x802be030} thread!. When run with debugger attached it stops just after kmalloc_init(td_pool) in thread_init.
QEMU likes to exit with different messages: one of them is
dma: command fc not supported
dma: command ff not supported
qemu: unsupported keyboard cmd=0x78
qemu: unsupported keyboard cmd=0x14
qemu: unsupported keyboard cmd=0x10
qemu: unsupported keyboard cmd=0x80
and another one
PFLASH: Possible BUG - Write block confirm.
When started with debugger only second one appears.
I'm not sure if we should merge this, but I would be happy if somebody could check if this is either mimiker's or qemu's fault.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,106,2016-11-05T19:15:45Z,2016-11-11T18:18:33Z,2017-05-23T12:52:43Z,MERGED,True,131,58,2,https://github.com/dyniec,Added qemu support to lauch script,4,[],https://github.com/cahirwpz/mimiker/pull/106,https://github.com/goniz,2,https://github.com/cahirwpz/mimiker/pull/106#issuecomment-258634913,"QEMU works most of the time. In rtc.elfeven first printed time is correct(OVPsim).
But sometimes (30% of runs) mimiker stops/crashes before main. Even errors are non-deterministic.
Last printfed message is [startup] subsystems initialized or [thread] Activating 'main' {0x802be030} thread!. When run with debugger attached it stops just after kmalloc_init(td_pool) in thread_init.
QEMU likes to exit with different messages: one of them is
dma: command fc not supported
dma: command ff not supported
qemu: unsupported keyboard cmd=0x78
qemu: unsupported keyboard cmd=0x14
qemu: unsupported keyboard cmd=0x10
qemu: unsupported keyboard cmd=0x80
and another one
PFLASH: Possible BUG - Write block confirm.
When started with debugger only second one appears.
I'm not sure if we should merge this, but I would be happy if somebody could check if this is either mimiker's or qemu's fault.","I have a lot of experience running on qemu, and 100% of the times I've encountered these errors, my bugs were to blame..
Take those crashes as warnings for the debugging sessions ahead of you.  :)",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,106,2016-11-05T19:15:45Z,2016-11-11T18:18:33Z,2017-05-23T12:52:43Z,MERGED,True,131,58,2,https://github.com/dyniec,Added qemu support to lauch script,4,[],https://github.com/cahirwpz/mimiker/pull/106,https://github.com/goniz,3,https://github.com/cahirwpz/mimiker/pull/106#issuecomment-258635212,"QEMU works most of the time. In rtc.elfeven first printed time is correct(OVPsim).
But sometimes (30% of runs) mimiker stops/crashes before main. Even errors are non-deterministic.
Last printfed message is [startup] subsystems initialized or [thread] Activating 'main' {0x802be030} thread!. When run with debugger attached it stops just after kmalloc_init(td_pool) in thread_init.
QEMU likes to exit with different messages: one of them is
dma: command fc not supported
dma: command ff not supported
qemu: unsupported keyboard cmd=0x78
qemu: unsupported keyboard cmd=0x14
qemu: unsupported keyboard cmd=0x10
qemu: unsupported keyboard cmd=0x80
and another one
PFLASH: Possible BUG - Write block confirm.
When started with debugger only second one appears.
I'm not sure if we should merge this, but I would be happy if somebody could check if this is either mimiker's or qemu's fault.",You might also want to specify the cpu family in the qemu flags using -cpu,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,106,2016-11-05T19:15:45Z,2016-11-11T18:18:33Z,2017-05-23T12:52:43Z,MERGED,True,131,58,2,https://github.com/dyniec,Added qemu support to lauch script,4,[],https://github.com/cahirwpz/mimiker/pull/106,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/106#issuecomment-258636011,"QEMU works most of the time. In rtc.elfeven first printed time is correct(OVPsim).
But sometimes (30% of runs) mimiker stops/crashes before main. Even errors are non-deterministic.
Last printfed message is [startup] subsystems initialized or [thread] Activating 'main' {0x802be030} thread!. When run with debugger attached it stops just after kmalloc_init(td_pool) in thread_init.
QEMU likes to exit with different messages: one of them is
dma: command fc not supported
dma: command ff not supported
qemu: unsupported keyboard cmd=0x78
qemu: unsupported keyboard cmd=0x14
qemu: unsupported keyboard cmd=0x10
qemu: unsupported keyboard cmd=0x80
and another one
PFLASH: Possible BUG - Write block confirm.
When started with debugger only second one appears.
I'm not sure if we should merge this, but I would be happy if somebody could check if this is either mimiker's or qemu's fault.",FYI OVPsim simulates 24Ke processor by default.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,106,2016-11-05T19:15:45Z,2016-11-11T18:18:33Z,2017-05-23T12:52:43Z,MERGED,True,131,58,2,https://github.com/dyniec,Added qemu support to lauch script,4,[],https://github.com/cahirwpz/mimiker/pull/106,https://github.com/dyniec,5,https://github.com/cahirwpz/mimiker/pull/106#issuecomment-258637847,"QEMU works most of the time. In rtc.elfeven first printed time is correct(OVPsim).
But sometimes (30% of runs) mimiker stops/crashes before main. Even errors are non-deterministic.
Last printfed message is [startup] subsystems initialized or [thread] Activating 'main' {0x802be030} thread!. When run with debugger attached it stops just after kmalloc_init(td_pool) in thread_init.
QEMU likes to exit with different messages: one of them is
dma: command fc not supported
dma: command ff not supported
qemu: unsupported keyboard cmd=0x78
qemu: unsupported keyboard cmd=0x14
qemu: unsupported keyboard cmd=0x10
qemu: unsupported keyboard cmd=0x80
and another one
PFLASH: Possible BUG - Write block confirm.
When started with debugger only second one appears.
I'm not sure if we should merge this, but I would be happy if somebody could check if this is either mimiker's or qemu's fault.","QEMU reports support for these families:
MIPS '4Kc'
MIPS '4Km'
MIPS '4KEcR1'
MIPS '4KEmR1'
MIPS '4KEc'
MIPS '4KEm'
MIPS '24Kc'
MIPS '24Kf'
MIPS '34Kf'
MIPS '74Kf'
MIPS 'M14K'
MIPS 'M14Kc'
MIPS 'P5600'
MIPS 'mips32r6-generic'
Those don't even boot properly:
MIPS '4Kc'
MIPS '4Km'
MIPS '4KEcR1'
MIPS '4KEmR1'
MIPS '4KEm'
MIPS 'M14K'
MIPS 'mips32r6-generic'
I hope any of them(maybe 24Kf) is similar to 24Ke.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,106,2016-11-05T19:15:45Z,2016-11-11T18:18:33Z,2017-05-23T12:52:43Z,MERGED,True,131,58,2,https://github.com/dyniec,Added qemu support to lauch script,4,[],https://github.com/cahirwpz/mimiker/pull/106,https://github.com/cahirwpz,6,https://github.com/cahirwpz/mimiker/pull/106#issuecomment-258639177,"QEMU works most of the time. In rtc.elfeven first printed time is correct(OVPsim).
But sometimes (30% of runs) mimiker stops/crashes before main. Even errors are non-deterministic.
Last printfed message is [startup] subsystems initialized or [thread] Activating 'main' {0x802be030} thread!. When run with debugger attached it stops just after kmalloc_init(td_pool) in thread_init.
QEMU likes to exit with different messages: one of them is
dma: command fc not supported
dma: command ff not supported
qemu: unsupported keyboard cmd=0x78
qemu: unsupported keyboard cmd=0x14
qemu: unsupported keyboard cmd=0x10
qemu: unsupported keyboard cmd=0x80
and another one
PFLASH: Possible BUG - Write block confirm.
When started with debugger only second one appears.
I'm not sure if we should merge this, but I would be happy if somebody could check if this is either mimiker's or qemu's fault.","Right! I meant 24Kf, which is 24Kc + FPU.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,107,2016-11-05T20:14:10Z,2016-11-11T18:54:32Z,2016-12-14T21:03:47Z,CLOSED,False,110,6,9,https://github.com/rafalcieslak,Hello world,5,[],https://github.com/cahirwpz/mimiker/pull/107,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/107,"This proposal implements the bare minimum required for user-space programs to output some text via UART, for debugging purposes. It does not incorporate an elegant system call handler table, nor universal procedures for copying system call arguments - which I believe should be done as a separate change.
A lot of changes I did here may be done in various ways (I tried to make this change minimal), so I'm looking for feedback.
I chose arbitrary high syscall numbers 1001 and 1002, as to not interfere with any reserved value.
A new demonstration program is included, which prints out a ""Hello world"" when started.","This proposal implements the bare minimum required for user-space programs to output some text via UART, for debugging purposes. It does not incorporate an elegant system call handler table, nor universal procedures for copying system call arguments - which I believe should be done as a separate change.
A lot of changes I did here may be done in various ways (I tried to make this change minimal), so I'm looking for feedback.
I chose arbitrary high syscall numbers 1001 and 1002, as to not interfere with any reserved value.
A new demonstration program is included, which prints out a ""Hello world"" when started.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,107,2016-11-05T20:14:10Z,2016-11-11T18:54:32Z,2016-12-14T21:03:47Z,CLOSED,False,110,6,9,https://github.com/rafalcieslak,Hello world,5,[],https://github.com/cahirwpz/mimiker/pull/107,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/107#issuecomment-258717661,"This proposal implements the bare minimum required for user-space programs to output some text via UART, for debugging purposes. It does not incorporate an elegant system call handler table, nor universal procedures for copying system call arguments - which I believe should be done as a separate change.
A lot of changes I did here may be done in various ways (I tried to make this change minimal), so I'm looking for feedback.
I chose arbitrary high syscall numbers 1001 and 1002, as to not interfere with any reserved value.
A new demonstration program is included, which prints out a ""Hello world"" when started.","@cahirwpz: I'm considering writing a simple syscall vector. Should I create a separate PR for it, or do you wish me to add it to this branch?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,107,2016-11-05T20:14:10Z,2016-11-11T18:54:32Z,2016-12-14T21:03:47Z,CLOSED,False,110,6,9,https://github.com/rafalcieslak,Hello world,5,[],https://github.com/cahirwpz/mimiker/pull/107,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/107#issuecomment-258760540,"This proposal implements the bare minimum required for user-space programs to output some text via UART, for debugging purposes. It does not incorporate an elegant system call handler table, nor universal procedures for copying system call arguments - which I believe should be done as a separate change.
A lot of changes I did here may be done in various ways (I tried to make this change minimal), so I'm looking for feedback.
I chose arbitrary high syscall numbers 1001 and 1002, as to not interfere with any reserved value.
A new demonstration program is included, which prints out a ""Hello world"" when started.","Please implement syscall vector in separate PR. Use include/sysent.h and sys/sysent.c files for that. As the toolchain from toolchain/mips contains newlib without syscall interface, I'd like you to investigate what is missing there and what needs to be implemented.
syscall.h from newlib lists small number of syscalls that are needed to use C standard library functionality. Please add dummy implementation for:
#define SYS_exit        1
#define SYS_open        2
#define SYS_close       3
#define SYS_read        4
#define SYS_write       5
#define SYS_lseek       6
#define SYS_unlink      7
#define SYS_getpid      8
#define SYS_kill        9
#define SYS_fstat       10",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,107,2016-11-05T20:14:10Z,2016-11-11T18:54:32Z,2016-12-14T21:03:47Z,CLOSED,False,110,6,9,https://github.com/rafalcieslak,Hello world,5,[],https://github.com/cahirwpz/mimiker/pull/107,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/107#issuecomment-258794788,"This proposal implements the bare minimum required for user-space programs to output some text via UART, for debugging purposes. It does not incorporate an elegant system call handler table, nor universal procedures for copying system call arguments - which I believe should be done as a separate change.
A lot of changes I did here may be done in various ways (I tried to make this change minimal), so I'm looking for feedback.
I chose arbitrary high syscall numbers 1001 and 1002, as to not interfere with any reserved value.
A new demonstration program is included, which prints out a ""Hello world"" when started.","Dummy syscalls implementation are given in libnosys.a:
$ cd ~/local/mips-unknown-elf/mips-unknown-elf/sysroot/lib
$ mips-unknown-elf-nm libnosys.a | grep T | cut -d ' ' -f 3 | sort
_chown
close
execve
_exit
fork
fstat
getpid
gettimeofday
isatty
kill
link
lseek
open
read
_readlink
sbrk
stat
_symlink
times
unlink
wait
write",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,107,2016-11-05T20:14:10Z,2016-11-11T18:54:32Z,2016-12-14T21:03:47Z,CLOSED,False,110,6,9,https://github.com/rafalcieslak,Hello world,5,[],https://github.com/cahirwpz/mimiker/pull/107,https://github.com/rafalcieslak,5,https://github.com/cahirwpz/mimiker/pull/107#issuecomment-258891776,"This proposal implements the bare minimum required for user-space programs to output some text via UART, for debugging purposes. It does not incorporate an elegant system call handler table, nor universal procedures for copying system call arguments - which I believe should be done as a separate change.
A lot of changes I did here may be done in various ways (I tried to make this change minimal), so I'm looking for feedback.
I chose arbitrary high syscall numbers 1001 and 1002, as to not interfere with any reserved value.
A new demonstration program is included, which prints out a ""Hello world"" when started.","What's interesting about those stubs is that they store error code at 0(gp):
write.o:     file format elf32-littlemips


Disassembly of section .text:

00000000 <write>:
_DEFUN (_write, (file, ptr, len),
        int   file  _AND
        char *ptr   _AND
        int   len)
{
  errno = ENOSYS;
   0:   24020058    li  v0,88
   4:   af820000    sw  v0,0(gp)
  return -1;
}
   8:   03e00008    jr  ra
   c:   2402ffff    li  v0,-1

Is that a convention?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,107,2016-11-05T20:14:10Z,2016-11-11T18:54:32Z,2016-12-14T21:03:47Z,CLOSED,False,110,6,9,https://github.com/rafalcieslak,Hello world,5,[],https://github.com/cahirwpz/mimiker/pull/107,https://github.com/cahirwpz,6,https://github.com/cahirwpz/mimiker/pull/107#issuecomment-258921141,"This proposal implements the bare minimum required for user-space programs to output some text via UART, for debugging purposes. It does not incorporate an elegant system call handler table, nor universal procedures for copying system call arguments - which I believe should be done as a separate change.
A lot of changes I did here may be done in various ways (I tried to make this change minimal), so I'm looking for feedback.
I chose arbitrary high syscall numbers 1001 and 1002, as to not interfere with any reserved value.
A new demonstration program is included, which prints out a ""Hello world"" when started.","I guess the code above assumes errno to be placed in global data area. Excerpt from MIPS Assembly Language Programmer’s Guide,  page 11-23:

The global data area is part of the data segment of an executable program. It
contains short data items which can be addressed by the gp register relative
addressing mode. The global data area comprises all the sections with the
SHF_MIPS_GPREL attribute.
The compilers generate short-form (one machine instruction) gp relative
addressing for all data items in any of these sections with the
SHF_MIPS_GPREL attribute. The compilers must generate two machine
instructions to load or store data items outside the global data area. A program
executes faster if more data items are placed in the global data area.
The size of the global data area is limited by the addressing constraints on gp
relative addressing, namely plus or minus 32 kilobytes relative to gp. This
limits the size of the global data area to 64 kilobytes.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,107,2016-11-05T20:14:10Z,2016-11-11T18:54:32Z,2016-12-14T21:03:47Z,CLOSED,False,110,6,9,https://github.com/rafalcieslak,Hello world,5,[],https://github.com/cahirwpz/mimiker/pull/107,https://github.com/rafalcieslak,7,https://github.com/cahirwpz/mimiker/pull/107#issuecomment-259289754,"This proposal implements the bare minimum required for user-space programs to output some text via UART, for debugging purposes. It does not incorporate an elegant system call handler table, nor universal procedures for copying system call arguments - which I believe should be done as a separate change.
A lot of changes I did here may be done in various ways (I tried to make this change minimal), so I'm looking for feedback.
I chose arbitrary high syscall numbers 1001 and 1002, as to not interfere with any reserved value.
A new demonstration program is included, which prints out a ""Hello world"" when started.","Yes, naturally. But there is an issue I have been facing with the small-data section for a while: when anything (literally anything, can be as small as 4 bytes) is placed into that section, the linker gets annoyed, and outputs a message similar to this:
ld: small-data section exceeds 64KB; lower small-data size limit (see option -G)
test.o: In function `test_func':
test-file.c:28:(.text+0xc): relocation truncated to fit: R_MIPS_GPREL16 against `some_variable'

This message surprises me, because there is no way I exceed 64KB with a single int variable. But ld insists. I tried lowering the limit of what data is considered ""small"" by using -G8 or -G1, but even then, ld still complains. The only way I managed to get this working is to use -G0, which effectively disables small data entirely, then it finally gets ""under 64 KB"".
This is the reason why makefiles in ./user compile and link sources with -G0. So far it looked like a fair solution, but I've encountered another.
I was trying to somehow experiment with newlib. I successfully compiled it for mipsel with our custom toolchain, and I can link user programs against newlib, so some functions (say, strlen) work fine! However, there are various functions which use global variables - for example, errno. Naturally, errno lands in small-data, which triggers the same linker problem:
/mipsel-unknown-elf/lib/gcc/mipsel-unknown-elf/5.2.0/../../../../mipsel-unknown-elf/bin/ld: small-data section exceeds 64KB; lower small-data size limit (see option -G)
libnosys.a(execve.o): In function `execve':
/newlib-cygwin/build-mips/mipsel-unknown-elf/libgloss/libnosys/../../../../libgloss/libnosys/execve.c:21:(.text+0xc): relocation truncated to fit: R_MIPS_GPREL16 against `errno'

This completely stops me from using newlib. I see these options we have for solving this problem:


Compile newlib with -G0. This is not entirely straight-forward, because newlib's configure script does not expose an option to append arbitrary flags for the target compiler, but it's probably doable by editing newlib's makefiles. However, I am suspicious about this option. In the previous comment I've noticed that - at least - nosyslib assumes that errno is in small-data, as it is accessed by 0(gp). So if we force errno to .data, nosyslib will break. What about the rest of newlib? Maybe the assumption of errno being in .sdata is also used elsewhere? I'm not sure if that is the case, but if it is, then we can't just -G0.


Fix ld, convince it that .sdata used in input .o files is not that large (it isn't! simple readelf confirms that). Maybe the problem is with our custom linker scripts? There isn't much information about this MIPS-specific problem on the internet, but all mentions that I was able to find generally boil down to using -G0, so I wasn't able to find anything explaining why does this happen.


This is the n-th time I spent a lot of time investigating this issue, and I don't seem to be getting anywhere. I would really appreciate some assistance with this problem.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,107,2016-11-05T20:14:10Z,2016-11-11T18:54:32Z,2016-12-14T21:03:47Z,CLOSED,False,110,6,9,https://github.com/rafalcieslak,Hello world,5,[],https://github.com/cahirwpz/mimiker/pull/107,https://github.com/rafalcieslak,8,https://github.com/cahirwpz/mimiker/pull/107#issuecomment-259316612,"This proposal implements the bare minimum required for user-space programs to output some text via UART, for debugging purposes. It does not incorporate an elegant system call handler table, nor universal procedures for copying system call arguments - which I believe should be done as a separate change.
A lot of changes I did here may be done in various ways (I tried to make this change minimal), so I'm looking for feedback.
I chose arbitrary high syscall numbers 1001 and 1002, as to not interfere with any reserved value.
A new demonstration program is included, which prints out a ""Hello world"" when started.","Okay, this was a fun night. I think I have figured out what is going on.
TL;DR: Minor, rare bug in GNU ld.bfd. Easy to avoid.
So, being stubborn, I ended up investigating how does to linker process .sdata and related, and how exactly is gp set. Now this is generally confusing, because the source files of ld.bfd are difficult to read. So instead I looked into ld.gold, and learned a lot about .sdata by reading what gold does.
So here are some facts about $gp that I deduced from binutils-2.25.1/gold/mips.cc (sorry for no links, but I can't find online-browsable binutils sources):

It is recommended to place .sdata immediately after .got, if the latter is present.
gp should be 16-byte alligned.
gp should point at a 15-bit offset from .got (or close to, to fulfill 16-byte alignment requirement).

Thus, by default, gold will place gp at .got + ALIGN(16) + 0x7ff0. The offset is chosen so that the the furthest negative relative reference from gp will be nearby .got. If .got is missing (as it will be, in our case), gold uses .sdata instead of .got.
Interestingly enough, a comment in gold sources states that no modern MIPS elf architectures use gp for addressing .sdata, only .got. Luckily they still support such architectures.
Now: if the linker script provides a _gp symbol, gold will use it's address for gp, regardless of where .got is placed.
So what is wrong with ld.bdf? It expects the _gp symbol to be present. And it is in the default builtin linker script. When that symbol is not present, ld.bdf does not emit any error message, instead it arbitrarily sets gp to 0x12345678 (binutils-2.25.1/ld/elfxx-mips.c:12820), and continues. Naturally, later on this causes some .sdata references that use gp fail, as they can't reach data using such pointless gp. Thus ld assumes that since data is too far from gp, then it must have exceeded 64KB limit - which explains the confusing message.
Apparently ld did not expect we would write a custom linker script. Also continuing with a random value in gp is clearly a bug - this is an uninitialized value, hard-coded only to suppress compiler warning.
So to solve this problem we should switch to gold define a hidden _gp symbol in the userspace linker script. I've tested that it does indeed solve the issue, but I still have to verify if the elf build this way is correct - also, now exec would have to set gp correctly, to match the .sdata section. I'll look into it and prepare a patch soon.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,107,2016-11-05T20:14:10Z,2016-11-11T18:54:32Z,2016-12-14T21:03:47Z,CLOSED,False,110,6,9,https://github.com/rafalcieslak,Hello world,5,[],https://github.com/cahirwpz/mimiker/pull/107,https://github.com/cahirwpz,9,https://github.com/cahirwpz/mimiker/pull/107#issuecomment-259360069,"This proposal implements the bare minimum required for user-space programs to output some text via UART, for debugging purposes. It does not incorporate an elegant system call handler table, nor universal procedures for copying system call arguments - which I believe should be done as a separate change.
A lot of changes I did here may be done in various ways (I tried to make this change minimal), so I'm looking for feedback.
I chose arbitrary high syscall numbers 1001 and 1002, as to not interfere with any reserved value.
A new demonstration program is included, which prints out a ""Hello world"" when started.","Nice findings! I really do appreciate your perseverance in pinning down the culprit. Now it seems to be pretty obvious that _gp symbol was missing, but I guess at first glance it was deeply confusing. Unfortunately ld.bfd doesn't follow good engineering practice to fail quickly and not propagate error.
If the problem is really solved then I guess userspace C standard library is mostly a problem of the past. This brings us closer to a kernel we can show off, which is HUGE!",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,107,2016-11-05T20:14:10Z,2016-11-11T18:54:32Z,2016-12-14T21:03:47Z,CLOSED,False,110,6,9,https://github.com/rafalcieslak,Hello world,5,[],https://github.com/cahirwpz/mimiker/pull/107,https://github.com/cahirwpz,10,https://github.com/cahirwpz/mimiker/pull/107#issuecomment-260002083,"This proposal implements the bare minimum required for user-space programs to output some text via UART, for debugging purposes. It does not incorporate an elegant system call handler table, nor universal procedures for copying system call arguments - which I believe should be done as a separate change.
A lot of changes I did here may be done in various ways (I tried to make this change minimal), so I'm looking for feedback.
I chose arbitrary high syscall numbers 1001 and 1002, as to not interfere with any reserved value.
A new demonstration program is included, which prints out a ""Hello world"" when started.",@rafalcieslak I guess we can close this PR. IIUC you'll work on the problem in #125 and consecutive PRs ?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,108,2016-11-05T22:01:07Z,2016-11-11T18:36:56Z,2016-11-13T14:33:45Z,CLOSED,False,112,0,2,https://github.com/coodie,Initial gdb commands for thread debugging,5,[],https://github.com/cahirwpz/mimiker/pull/108,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/108,"Since I'm stuck debugging turnstiles I decided to implement some debugging framework to help me with it. Toolchain gdb doesn't support python by default so I had to compile my own with python support. This is example on how to use python API to get some commands into gdb. I added just one which is 'kernel-threads' which prints runnable threads and currently running one. I'll find commands which track context_switches and new threads appearing in kernel useful and I'll definitely add them. They are mostly for my use, but someone might find them helpful.","Since I'm stuck debugging turnstiles I decided to implement some debugging framework to help me with it. Toolchain gdb doesn't support python by default so I had to compile my own with python support. This is example on how to use python API to get some commands into gdb. I added just one which is 'kernel-threads' which prints runnable threads and currently running one. I'll find commands which track context_switches and new threads appearing in kernel useful and I'll definitely add them. They are mostly for my use, but someone might find them helpful.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,108,2016-11-05T22:01:07Z,2016-11-11T18:36:56Z,2016-11-13T14:33:45Z,CLOSED,False,112,0,2,https://github.com/coodie,Initial gdb commands for thread debugging,5,[],https://github.com/cahirwpz/mimiker/pull/108,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/108#issuecomment-258645553,"Since I'm stuck debugging turnstiles I decided to implement some debugging framework to help me with it. Toolchain gdb doesn't support python by default so I had to compile my own with python support. This is example on how to use python API to get some commands into gdb. I added just one which is 'kernel-threads' which prints runnable threads and currently running one. I'll find commands which track context_switches and new threads appearing in kernel useful and I'll definitely add them. They are mostly for my use, but someone might find them helpful.",This looks very handy. Could you guide me how should I compile my gdb to test it? I assume the toolchain's version is not just a plain standard gdb? Do I somehow enable mips support?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,108,2016-11-05T22:01:07Z,2016-11-11T18:36:56Z,2016-11-13T14:33:45Z,CLOSED,False,112,0,2,https://github.com/coodie,Initial gdb commands for thread debugging,5,[],https://github.com/cahirwpz/mimiker/pull/108,https://github.com/coodie,3,https://github.com/cahirwpz/mimiker/pull/108#issuecomment-258647428,"Since I'm stuck debugging turnstiles I decided to implement some debugging framework to help me with it. Toolchain gdb doesn't support python by default so I had to compile my own with python support. This is example on how to use python API to get some commands into gdb. I added just one which is 'kernel-threads' which prints runnable threads and currently running one. I'll find commands which track context_switches and new threads appearing in kernel useful and I'll definitely add them. They are mostly for my use, but someone might find them helpful.","It actually is gdb compiled from sources, if you run it you will encounter following message:
This GDB was configured as ""--host=x86_64-pc-linux-gnu --target=mips-mti-elf""

In general if you want to have gdb with python support you want to download the gdb sources and run command:
./configure --with-python --target=mips-mti-elf
If you want to have gdb store it's data (libraries, compiled binary) after make install in other place, you want to run it as
./configure --with-python --target=mips-mti-elf --prefix=/path/to/directory",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,108,2016-11-05T22:01:07Z,2016-11-11T18:36:56Z,2016-11-13T14:33:45Z,CLOSED,False,112,0,2,https://github.com/coodie,Initial gdb commands for thread debugging,5,[],https://github.com/cahirwpz/mimiker/pull/108,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/108#issuecomment-258673415,"Since I'm stuck debugging turnstiles I decided to implement some debugging framework to help me with it. Toolchain gdb doesn't support python by default so I had to compile my own with python support. This is example on how to use python API to get some commands into gdb. I added just one which is 'kernel-threads' which prints runnable threads and currently running one. I'll find commands which track context_switches and new threads appearing in kernel useful and I'll definitely add them. They are mostly for my use, but someone might find them helpful.","This looks just awesome! I hope we'll create a nice set of GDB extensions that will make our debugging sessions much more productive. Please prepare a short speech about python gdb scripts for next seminar meeting.
W.r.t. python formatting... please use three tools to check your code pep8, pylint and pyflakes. All of them are available as a part of python-mode for Vim.
It'd be even better if you could configure git pre-commit hook to run those tools automatically.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,108,2016-11-05T22:01:07Z,2016-11-11T18:36:56Z,2016-11-13T14:33:45Z,CLOSED,False,112,0,2,https://github.com/coodie,Initial gdb commands for thread debugging,5,[],https://github.com/cahirwpz/mimiker/pull/108,https://github.com/cahirwpz,5,https://github.com/cahirwpz/mimiker/pull/108#issuecomment-260024474,"Since I'm stuck debugging turnstiles I decided to implement some debugging framework to help me with it. Toolchain gdb doesn't support python by default so I had to compile my own with python support. This is example on how to use python API to get some commands into gdb. I added just one which is 'kernel-threads' which prints runnable threads and currently running one. I'll find commands which track context_switches and new threads appearing in kernel useful and I'll definitely add them. They are mostly for my use, but someone might find them helpful.",More recent version of this PR is #124,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,109,2016-11-06T00:37:14Z,2016-11-06T15:23:39Z,2016-12-14T21:03:48Z,MERGED,True,107,7,3,https://github.com/rafalcieslak,Implemented vm_map_findspace,2,[],https://github.com/cahirwpz/mimiker/pull/109,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/109,"This branch introduces vm_map_findspace, which finds a free space in virtual memory large enough to fit requested length. It is roughly based on FreeBSD's vm_map_findspace. This branch also includes some formatting fixes unrelated to findspace, because one of us is not running make format before each commit. I've also included a pretty compelling test case which should be enough for now.
I need this function to correctly implement anonymous mappings for mmap syscall. And I need that syscall in order to implement fork, because our current ""no-processes"" thread model requires me to actually implement clone, with adjustable level of memory sharing - and traditionally it is the caller to clone who has to provide a new stack for child thread, so it will need mmap to create space for such stack. And since mmap is pretty easy to implement, I thought it would be a nice place to start.","This branch introduces vm_map_findspace, which finds a free space in virtual memory large enough to fit requested length. It is roughly based on FreeBSD's vm_map_findspace. This branch also includes some formatting fixes unrelated to findspace, because one of us is not running make format before each commit. I've also included a pretty compelling test case which should be enough for now.
I need this function to correctly implement anonymous mappings for mmap syscall. And I need that syscall in order to implement fork, because our current ""no-processes"" thread model requires me to actually implement clone, with adjustable level of memory sharing - and traditionally it is the caller to clone who has to provide a new stack for child thread, so it will need mmap to create space for such stack. And since mmap is pretty easy to implement, I thought it would be a nice place to start.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,109,2016-11-06T00:37:14Z,2016-11-06T15:23:39Z,2016-12-14T21:03:48Z,MERGED,True,107,7,3,https://github.com/rafalcieslak,Implemented vm_map_findspace,2,[],https://github.com/cahirwpz/mimiker/pull/109,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/109#issuecomment-258665730,"This branch introduces vm_map_findspace, which finds a free space in virtual memory large enough to fit requested length. It is roughly based on FreeBSD's vm_map_findspace. This branch also includes some formatting fixes unrelated to findspace, because one of us is not running make format before each commit. I've also included a pretty compelling test case which should be enough for now.
I need this function to correctly implement anonymous mappings for mmap syscall. And I need that syscall in order to implement fork, because our current ""no-processes"" thread model requires me to actually implement clone, with adjustable level of memory sharing - and traditionally it is the caller to clone who has to provide a new stack for child thread, so it will need mmap to create space for such stack. And since mmap is pretty easy to implement, I thought it would be a nice place to start.",LGTM!,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,110,2016-11-06T13:09:48Z,2016-11-08T15:56:39Z,2016-11-08T15:56:39Z,CLOSED,False,284,13,15,https://github.com/coodie,Turnstile,23,[],https://github.com/cahirwpz/mimiker/pull/110,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/110,"I finally got something that looks like it is working. I'm still unsure about some places but I need to make better tests and think of more places where context_switches might occur. This could possibly be merged, but the code isn't clean yet.","I finally got something that looks like it is working. I'm still unsure about some places but I need to make better tests and think of more places where context_switches might occur. This could possibly be merged, but the code isn't clean yet.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,110,2016-11-06T13:09:48Z,2016-11-08T15:56:39Z,2016-11-08T15:56:39Z,CLOSED,False,284,13,15,https://github.com/coodie,Turnstile,23,[],https://github.com/cahirwpz/mimiker/pull/110,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/110#issuecomment-258766729,"I finally got something that looks like it is working. I'm still unsure about some places but I need to make better tests and think of more places where context_switches might occur. This could possibly be merged, but the code isn't clean yet.","This PR is huge! We'll have to split it into smaller ones.
Please create another PR with your attempt to fix synchronization issues around the scheduler.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,111,2016-11-06T17:36:30Z,2016-11-07T07:41:11Z,2016-11-07T07:41:17Z,MERGED,True,11,21,2,https://github.com/coodie,Remove mtx_t,2,[],https://github.com/cahirwpz/mimiker/pull/111,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/111,"With upcoming turnstiles I find old mtx_t unnecessary. We should follow FreeBSD convention and make mtx_t good, old blocking mutex.","With upcoming turnstiles I find old mtx_t unnecessary. We should follow FreeBSD convention and make mtx_t good, old blocking mutex.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,112,2016-11-07T00:20:39Z,2017-04-07T14:01:57Z,2017-04-07T14:01:57Z,MERGED,True,151,11,12,https://github.com/rafalcieslak,Implemented mmap,27,[],https://github.com/cahirwpz/mimiker/pull/112,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/112,"This is a very basic mmap implementation that only supports anonymous mappings. Generally, it is merely a fancy wrapping for vm_map_findspace and vm_map_add_entry. It is not yet hooked to a syscall handler, but eventually it will be useful for userspace programs.
Incidentally I discovered some minor bugs in vm_map_findspace, so this branch fixes them as well.","This is a very basic mmap implementation that only supports anonymous mappings. Generally, it is merely a fancy wrapping for vm_map_findspace and vm_map_add_entry. It is not yet hooked to a syscall handler, but eventually it will be useful for userspace programs.
Incidentally I discovered some minor bugs in vm_map_findspace, so this branch fixes them as well.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,112,2016-11-07T00:20:39Z,2017-04-07T14:01:57Z,2017-04-07T14:01:57Z,MERGED,True,151,11,12,https://github.com/rafalcieslak,Implemented mmap,27,[],https://github.com/cahirwpz/mimiker/pull/112,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/112#issuecomment-258784549,"This is a very basic mmap implementation that only supports anonymous mappings. Generally, it is merely a fancy wrapping for vm_map_findspace and vm_map_add_entry. It is not yet hooked to a syscall handler, but eventually it will be useful for userspace programs.
Incidentally I discovered some minor bugs in vm_map_findspace, so this branch fixes them as well.","As far as I can tell malloc from newlib can be configured to use mmap. But since there's not a single mmap user for the time being let's postpone this commit. However fixes to vm_map_findspace are of high value right now, so move them to another PR, which will get merged very soon.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,112,2016-11-07T00:20:39Z,2017-04-07T14:01:57Z,2017-04-07T14:01:57Z,MERGED,True,151,11,12,https://github.com/rafalcieslak,Implemented mmap,27,[],https://github.com/cahirwpz/mimiker/pull/112,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/112#issuecomment-261639298,"This is a very basic mmap implementation that only supports anonymous mappings. Generally, it is merely a fancy wrapping for vm_map_findspace and vm_map_add_entry. It is not yet hooked to a syscall handler, but eventually it will be useful for userspace programs.
Incidentally I discovered some minor bugs in vm_map_findspace, so this branch fixes them as well.",I've cleaned up this branch and updated it to use new syscall interface.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,112,2016-11-07T00:20:39Z,2017-04-07T14:01:57Z,2017-04-07T14:01:57Z,MERGED,True,151,11,12,https://github.com/rafalcieslak,Implemented mmap,27,[],https://github.com/cahirwpz/mimiker/pull/112,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/112#issuecomment-263389261,"This is a very basic mmap implementation that only supports anonymous mappings. Generally, it is merely a fancy wrapping for vm_map_findspace and vm_map_add_entry. It is not yet hooked to a syscall handler, but eventually it will be useful for userspace programs.
Incidentally I discovered some minor bugs in vm_map_findspace, so this branch fixes them as well.","I'll not accept mmap and munmap syscall interface until kernel-side interface is well tested.
Having kernel threads gracefully crash on bad address access and copyin and copyout routines in place, it's time to provide thorough testing for vm_map interface. With that being done and added implementation of signals we can return to mmap and family implementation.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,112,2016-11-07T00:20:39Z,2017-04-07T14:01:57Z,2017-04-07T14:01:57Z,MERGED,True,151,11,12,https://github.com/rafalcieslak,Implemented mmap,27,[],https://github.com/cahirwpz/mimiker/pull/112,https://github.com/rafalcieslak,5,https://github.com/cahirwpz/mimiker/pull/112#issuecomment-292514527,"This is a very basic mmap implementation that only supports anonymous mappings. Generally, it is merely a fancy wrapping for vm_map_findspace and vm_map_add_entry. It is not yet hooked to a syscall handler, but eventually it will be useful for userspace programs.
Incidentally I discovered some minor bugs in vm_map_findspace, so this branch fixes them as well.",Do we really need signals before a simple mmap? I still believe mmap will be useful for fork - user programs typically use mmap to allocate the stack of a new thread when asking fork to share memory map between parent/child.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,112,2016-11-07T00:20:39Z,2017-04-07T14:01:57Z,2017-04-07T14:01:57Z,MERGED,True,151,11,12,https://github.com/rafalcieslak,Implemented mmap,27,[],https://github.com/cahirwpz/mimiker/pull/112,https://github.com/rafalcieslak,6,https://github.com/cahirwpz/mimiker/pull/112#issuecomment-292536240,"This is a very basic mmap implementation that only supports anonymous mappings. Generally, it is merely a fancy wrapping for vm_map_findspace and vm_map_add_entry. It is not yet hooked to a syscall handler, but eventually it will be useful for userspace programs.
Incidentally I discovered some minor bugs in vm_map_findspace, so this branch fixes them as well.","All done.
I've also realized that with VFS interface in place, it will be pretty simple to implement support for non-anonymous (file-backed) mappings. All it would take is adding a new pager which keeps a reference to an open file_t.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,112,2016-11-07T00:20:39Z,2017-04-07T14:01:57Z,2017-04-07T14:01:57Z,MERGED,True,151,11,12,https://github.com/rafalcieslak,Implemented mmap,27,[],https://github.com/cahirwpz/mimiker/pull/112,https://github.com/rafalcieslak,7,https://github.com/cahirwpz/mimiker/pull/112#issuecomment-292540389,"This is a very basic mmap implementation that only supports anonymous mappings. Generally, it is merely a fancy wrapping for vm_map_findspace and vm_map_add_entry. It is not yet hooked to a syscall handler, but eventually it will be useful for userspace programs.
Incidentally I discovered some minor bugs in vm_map_findspace, so this branch fixes them as well.","The Travis test issue is a false positive, and I propose a fix for it in #250.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,113,2016-11-07T10:04:57Z,2016-11-11T06:43:11Z,2016-12-14T21:04:10Z,MERGED,True,24,24,2,https://github.com/rafalcieslak,Fix for vm_map_findspace start strictness,5,[],https://github.com/cahirwpz/mimiker/pull/113,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/113,"Extracted from #112 per request. vm_map_findspace would sometimes return an address lower than start, this patch fixes it to never consider spaces that would begin before start.","Extracted from #112 per request. vm_map_findspace would sometimes return an address lower than start, this patch fixes it to never consider spaces that would begin before start.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,113,2016-11-07T10:04:57Z,2016-11-11T06:43:11Z,2016-12-14T21:04:10Z,MERGED,True,24,24,2,https://github.com/rafalcieslak,Fix for vm_map_findspace start strictness,5,[],https://github.com/cahirwpz/mimiker/pull/113,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/113#issuecomment-259678065,"Extracted from #112 per request. vm_map_findspace would sometimes return an address lower than start, this patch fixes it to never consider spaces that would begin before start.","Please review my changes. I think it's much more streamlined than your implementation and easier to track. When you write complex logic please always attempt to reduce number of special cases under consideration.
I moved the comment close to the implementation. The idea is that you keep all information required to understand the logic of a procedure in one place.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,113,2016-11-07T10:04:57Z,2016-11-11T06:43:11Z,2016-12-14T21:04:10Z,MERGED,True,24,24,2,https://github.com/rafalcieslak,Fix for vm_map_findspace start strictness,5,[],https://github.com/cahirwpz/mimiker/pull/113,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/113#issuecomment-259681018,"Extracted from #112 per request. vm_map_findspace would sometimes return an address lower than start, this patch fixes it to never consider spaces that would begin before start.","Originally I have considered using something similar to next ? next->start : map->pmap->end; to unify these cases, but I was worried you would consider it a trick, so I implemented another variant which was slightly more complex, but also more explicit. I always find it difficult to find the right spot between hacks and simplifying code, that will be to your liking.
I really dislike not having interface documented in header files. Genrerally I agree that the information required to understand the implementation should be nearby that implementation, but for functions that are meant to be used externally (say, in other TUs), the function specification must be present in the header file. This way

a developer who wishes to use the function only has to read the header
in order to learn about an interface one only has to browse through functions available in the header file
various tools can automatically pull the docs from included header files

The way I see it, details about how implementation works should be placed in/near the implementation, but function specification, including argument constraints and semantics, must be available in the header.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,113,2016-11-07T10:04:57Z,2016-11-11T06:43:11Z,2016-12-14T21:04:10Z,MERGED,True,24,24,2,https://github.com/rafalcieslak,Fix for vm_map_findspace start strictness,5,[],https://github.com/cahirwpz/mimiker/pull/113,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/113#issuecomment-259754312,"Extracted from #112 per request. vm_map_findspace would sometimes return an address lower than start, this patch fixes it to never consider spaces that would begin before start.","I always prefer shorter and simpler implementations. I believe you have enough experience and coding culture not to worry about my bias.
As you mention comments are kinda anti-pattern and I agree – it's much better to spend time making the procedure interface easy to use rather than document all quirks. Comments explaining implementation details should be scarce and close to the implementation.
If you see no bugs in the code, I'm ready to merge it.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,113,2016-11-07T10:04:57Z,2016-11-11T06:43:11Z,2016-12-14T21:04:10Z,MERGED,True,24,24,2,https://github.com/rafalcieslak,Fix for vm_map_findspace start strictness,5,[],https://github.com/cahirwpz/mimiker/pull/113,https://github.com/rafalcieslak,5,https://github.com/cahirwpz/mimiker/pull/113#issuecomment-259846729,"Extracted from #112 per request. vm_map_findspace would sometimes return an address lower than start, this patch fixes it to never consider spaces that would begin before start.",I'm positive this branch is ready to hit master.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,114,2016-11-07T15:52:59Z,2016-11-07T16:49:08Z,2016-12-14T21:04:05Z,MERGED,True,4,4,1,https://github.com/rafalcieslak,Exclude toolchain path from tags file search,1,[],https://github.com/cahirwpz/mimiker/pull/114,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/114,"By default, the new toolchain builder downloads all sources to ./toolchain/mips/.build/src. We don't want to pull tags from these sources, not only they are irrelevant, but it also takes a very long time to make tags.","By default, the new toolchain builder downloads all sources to ./toolchain/mips/.build/src. We don't want to pull tags from these sources, not only they are irrelevant, but it also takes a very long time to make tags.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,116,2016-11-07T17:22:56Z,2016-11-07T17:29:53Z,2016-12-14T21:04:06Z,MERGED,True,2194,11,7,https://github.com/rafalcieslak,Import ImgTech MIPS headers,2,[],https://github.com/cahirwpz/mimiker/pull/116,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/116,"In order to become independent from ImgTech's toolchain, this branch imports the mips-specific header files (and their recursive dependencies) we use. I've run clang-format on these, except for m32c0.h which becomes corrupt in the process. This branch also edits make tags rules so that tags are no longer imported from toolchain headers, it also corrects make format rule so that clang-format no longer tries to process toolchain source files.
This branch fixes #115.
Note that P in Makefile.common is unmodified. Enabling new toolchain emits a ton of new warnings (as we are migrating gcc 4.8 -> 5.2), so these need cleaning up before compilation succeeds, and these deserve a separate PR (though temporarily disabling -Werror got me a correctly working kernel image!).","In order to become independent from ImgTech's toolchain, this branch imports the mips-specific header files (and their recursive dependencies) we use. I've run clang-format on these, except for m32c0.h which becomes corrupt in the process. This branch also edits make tags rules so that tags are no longer imported from toolchain headers, it also corrects make format rule so that clang-format no longer tries to process toolchain source files.
This branch fixes #115.
Note that P in Makefile.common is unmodified. Enabling new toolchain emits a ton of new warnings (as we are migrating gcc 4.8 -> 5.2), so these need cleaning up before compilation succeeds, and these deserve a separate PR (though temporarily disabling -Werror got me a correctly working kernel image!).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,117,2016-11-07T18:05:25Z,2016-11-07T19:58:37Z,2016-12-14T21:04:08Z,MERGED,True,28,14,7,https://github.com/rafalcieslak,New toolchain support in make rules,5,[],https://github.com/cahirwpz/mimiker/pull/117,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/117,"This tiny change to Makefile.common enables the custom toolchain - if available at host. Since this would be a major breaking change for other contributors (and for travis), for some transitional period both toolchains are supported. Make simply checks whether mipsel-unknown-elf-gcc is available, and if not, it falls back to mips-mti-elf-*. In both cases compilation succeeds, and the produced kernel image operates normally.
Also I had to disable -Wformat. gcc 5.2 is very confused about one particular detail that appears in numerous places in our sources, namely printing a vm_addr_t (or similar address types) with a %lx. vm_addr_t is AKA unsigned int, so gcc complains that we should not use the l prefix for printing. I might go ahead and correct all %lx to %x, but since they are there for some reason, I assume we want such address types to be realized as long.","This tiny change to Makefile.common enables the custom toolchain - if available at host. Since this would be a major breaking change for other contributors (and for travis), for some transitional period both toolchains are supported. Make simply checks whether mipsel-unknown-elf-gcc is available, and if not, it falls back to mips-mti-elf-*. In both cases compilation succeeds, and the produced kernel image operates normally.
Also I had to disable -Wformat. gcc 5.2 is very confused about one particular detail that appears in numerous places in our sources, namely printing a vm_addr_t (or similar address types) with a %lx. vm_addr_t is AKA unsigned int, so gcc complains that we should not use the l prefix for printing. I might go ahead and correct all %lx to %x, but since they are there for some reason, I assume we want such address types to be realized as long.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,117,2016-11-07T18:05:25Z,2016-11-07T19:58:37Z,2016-12-14T21:04:08Z,MERGED,True,28,14,7,https://github.com/rafalcieslak,New toolchain support in make rules,5,[],https://github.com/cahirwpz/mimiker/pull/117,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/117#issuecomment-258916307,"This tiny change to Makefile.common enables the custom toolchain - if available at host. Since this would be a major breaking change for other contributors (and for travis), for some transitional period both toolchains are supported. Make simply checks whether mipsel-unknown-elf-gcc is available, and if not, it falls back to mips-mti-elf-*. In both cases compilation succeeds, and the produced kernel image operates normally.
Also I had to disable -Wformat. gcc 5.2 is very confused about one particular detail that appears in numerous places in our sources, namely printing a vm_addr_t (or similar address types) with a %lx. vm_addr_t is AKA unsigned int, so gcc complains that we should not use the l prefix for printing. I might go ahead and correct all %lx to %x, but since they are there for some reason, I assume we want such address types to be realized as long.",I guess vm_addr_t should be defined as intptr_t.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,117,2016-11-07T18:05:25Z,2016-11-07T19:58:37Z,2016-12-14T21:04:08Z,MERGED,True,28,14,7,https://github.com/rafalcieslak,New toolchain support in make rules,5,[],https://github.com/cahirwpz/mimiker/pull/117,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/117#issuecomment-258917205,"This tiny change to Makefile.common enables the custom toolchain - if available at host. Since this would be a major breaking change for other contributors (and for travis), for some transitional period both toolchains are supported. Make simply checks whether mipsel-unknown-elf-gcc is available, and if not, it falls back to mips-mti-elf-*. In both cases compilation succeeds, and the produced kernel image operates normally.
Also I had to disable -Wformat. gcc 5.2 is very confused about one particular detail that appears in numerous places in our sources, namely printing a vm_addr_t (or similar address types) with a %lx. vm_addr_t is AKA unsigned int, so gcc complains that we should not use the l prefix for printing. I might go ahead and correct all %lx to %x, but since they are there for some reason, I assume we want such address types to be realized as long.","We define vm_addr_t as uintptr_t, in common.h. That, in turn, becomes unsigned int. What I end up with is a ton of:
/include/common.h:81:13: error: format '%lx' expects argument of type 'long unsigned int', but argument 4 has type 'vm_addr_t {aka unsigned int}' [-Werror=format=]
     kprintf(""[panic] %s:%d "" FMT ""\n"", __FILE__, __LINE__, ##__VA_ARGS__);     \
             ^
pmap.c:359:5: note: in expansion of macro 'panic'
     panic(""No virtual address space defined for %08lx!"", vaddr);
     ^",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,117,2016-11-07T18:05:25Z,2016-11-07T19:58:37Z,2016-12-14T21:04:08Z,MERGED,True,28,14,7,https://github.com/rafalcieslak,New toolchain support in make rules,5,[],https://github.com/cahirwpz/mimiker/pull/117,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/117#issuecomment-258919191,"This tiny change to Makefile.common enables the custom toolchain - if available at host. Since this would be a major breaking change for other contributors (and for travis), for some transitional period both toolchains are supported. Make simply checks whether mipsel-unknown-elf-gcc is available, and if not, it falls back to mips-mti-elf-*. In both cases compilation succeeds, and the produced kernel image operates normally.
Also I had to disable -Wformat. gcc 5.2 is very confused about one particular detail that appears in numerous places in our sources, namely printing a vm_addr_t (or similar address types) with a %lx. vm_addr_t is AKA unsigned int, so gcc complains that we should not use the l prefix for printing. I might go ahead and correct all %lx to %x, but since they are there for some reason, I assume we want such address types to be realized as long.","If you defined vm_addr_t as unsigned long would that solve the problem?
EDIT: I assume sizeof(unsigned long) and sizeof(void *) is the same.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,117,2016-11-07T18:05:25Z,2016-11-07T19:58:37Z,2016-12-14T21:04:08Z,MERGED,True,28,14,7,https://github.com/rafalcieslak,New toolchain support in make rules,5,[],https://github.com/cahirwpz/mimiker/pull/117,https://github.com/rafalcieslak,5,https://github.com/cahirwpz/mimiker/pull/117#issuecomment-258922211,"This tiny change to Makefile.common enables the custom toolchain - if available at host. Since this would be a major breaking change for other contributors (and for travis), for some transitional period both toolchains are supported. Make simply checks whether mipsel-unknown-elf-gcc is available, and if not, it falls back to mips-mti-elf-*. In both cases compilation succeeds, and the produced kernel image operates normally.
Also I had to disable -Wformat. gcc 5.2 is very confused about one particular detail that appears in numerous places in our sources, namely printing a vm_addr_t (or similar address types) with a %lx. vm_addr_t is AKA unsigned int, so gcc complains that we should not use the l prefix for printing. I might go ahead and correct all %lx to %x, but since they are there for some reason, I assume we want such address types to be realized as long.","A quick test confirms that sizeof(unsigned long) == sizeof(void*). This makes sense, unsigned long is guaranteed to be at least 32 bits in size, while unsigned int may use just 16. Indeed defining vm_addr_t as unsigned long fixes the issue, do you want me to add this to this branch?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,117,2016-11-07T18:05:25Z,2016-11-07T19:58:37Z,2016-12-14T21:04:08Z,MERGED,True,28,14,7,https://github.com/rafalcieslak,New toolchain support in make rules,5,[],https://github.com/cahirwpz/mimiker/pull/117,https://github.com/cahirwpz,6,https://github.com/cahirwpz/mimiker/pull/117#issuecomment-258925858,"This tiny change to Makefile.common enables the custom toolchain - if available at host. Since this would be a major breaking change for other contributors (and for travis), for some transitional period both toolchains are supported. Make simply checks whether mipsel-unknown-elf-gcc is available, and if not, it falls back to mips-mti-elf-*. In both cases compilation succeeds, and the produced kernel image operates normally.
Also I had to disable -Wformat. gcc 5.2 is very confused about one particular detail that appears in numerous places in our sources, namely printing a vm_addr_t (or similar address types) with a %lx. vm_addr_t is AKA unsigned int, so gcc complains that we should not use the l prefix for printing. I might go ahead and correct all %lx to %x, but since they are there for some reason, I assume we want such address types to be realized as long.","Yes, please do so... and reenable -Wformat.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,117,2016-11-07T18:05:25Z,2016-11-07T19:58:37Z,2016-12-14T21:04:08Z,MERGED,True,28,14,7,https://github.com/rafalcieslak,New toolchain support in make rules,5,[],https://github.com/cahirwpz/mimiker/pull/117,https://github.com/rafalcieslak,7,https://github.com/cahirwpz/mimiker/pull/117#issuecomment-258928942,"This tiny change to Makefile.common enables the custom toolchain - if available at host. Since this would be a major breaking change for other contributors (and for travis), for some transitional period both toolchains are supported. Make simply checks whether mipsel-unknown-elf-gcc is available, and if not, it falls back to mips-mti-elf-*. In both cases compilation succeeds, and the produced kernel image operates normally.
Also I had to disable -Wformat. gcc 5.2 is very confused about one particular detail that appears in numerous places in our sources, namely printing a vm_addr_t (or similar address types) with a %lx. vm_addr_t is AKA unsigned int, so gcc complains that we should not use the l prefix for printing. I might go ahead and correct all %lx to %x, but since they are there for some reason, I assume we want such address types to be realized as long.","Done. By the way, is it not a problem that now size_t is unsigned int and not unsigned long? This is starting to confuse me.
EDIT: So according to Travis, it is a problem. I guess we need to decide either way?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,117,2016-11-07T18:05:25Z,2016-11-07T19:58:37Z,2016-12-14T21:04:08Z,MERGED,True,28,14,7,https://github.com/rafalcieslak,New toolchain support in make rules,5,[],https://github.com/cahirwpz/mimiker/pull/117,https://github.com/cahirwpz,8,https://github.com/cahirwpz/mimiker/pull/117#issuecomment-258936330,"This tiny change to Makefile.common enables the custom toolchain - if available at host. Since this would be a major breaking change for other contributors (and for travis), for some transitional period both toolchains are supported. Make simply checks whether mipsel-unknown-elf-gcc is available, and if not, it falls back to mips-mti-elf-*. In both cases compilation succeeds, and the produced kernel image operates normally.
Also I had to disable -Wformat. gcc 5.2 is very confused about one particular detail that appears in numerous places in our sources, namely printing a vm_addr_t (or similar address types) with a %lx. vm_addr_t is AKA unsigned int, so gcc complains that we should not use the l prefix for printing. I might go ahead and correct all %lx to %x, but since they are there for some reason, I assume we want such address types to be realized as long.",Grepping through toolchain files I could only find size_t defined as unsigned long and that's exactly what I'd expect on 32-bit architecture.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,117,2016-11-07T18:05:25Z,2016-11-07T19:58:37Z,2016-12-14T21:04:08Z,MERGED,True,28,14,7,https://github.com/rafalcieslak,New toolchain support in make rules,5,[],https://github.com/cahirwpz/mimiker/pull/117,https://github.com/pdziepak,9,https://github.com/cahirwpz/mimiker/pull/117#issuecomment-258937388,"This tiny change to Makefile.common enables the custom toolchain - if available at host. Since this would be a major breaking change for other contributors (and for travis), for some transitional period both toolchains are supported. Make simply checks whether mipsel-unknown-elf-gcc is available, and if not, it falls back to mips-mti-elf-*. In both cases compilation succeeds, and the produced kernel image operates normally.
Also I had to disable -Wformat. gcc 5.2 is very confused about one particular detail that appears in numerous places in our sources, namely printing a vm_addr_t (or similar address types) with a %lx. vm_addr_t is AKA unsigned int, so gcc complains that we should not use the l prefix for printing. I might go ahead and correct all %lx to %x, but since they are there for some reason, I assume we want such address types to be realized as long.","The standard way to print types like uintptr_t and [u]int{8, 16, 32, 64}_t family is to use macros from inttypes.h. However, size_t, intmax_t and ptrdiff_t have special z, j and t length modifiers. For example:
uintptr_t pointer;
size_t size;
printf(""This is my uintptr_t = %"" PRIuPTR, value);
printf(""...and this is my size_t = %zu, value);
This is the most future-proof and machine independent way to deal with format strings. For custom types like vm_addr_t it is probably a good idea to define their own macros.
BTW Nice thing about unsigned long that it can be size_t and uintptr_t for both all 32-bit architectures and LP64 ones (which is almost everything except Windows).",True,{'THUMBS_UP': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,117,2016-11-07T18:05:25Z,2016-11-07T19:58:37Z,2016-12-14T21:04:08Z,MERGED,True,28,14,7,https://github.com/rafalcieslak,New toolchain support in make rules,5,[],https://github.com/cahirwpz/mimiker/pull/117,https://github.com/rafalcieslak,10,https://github.com/cahirwpz/mimiker/pull/117#issuecomment-258940974,"This tiny change to Makefile.common enables the custom toolchain - if available at host. Since this would be a major breaking change for other contributors (and for travis), for some transitional period both toolchains are supported. Make simply checks whether mipsel-unknown-elf-gcc is available, and if not, it falls back to mips-mti-elf-*. In both cases compilation succeeds, and the produced kernel image operates normally.
Also I had to disable -Wformat. gcc 5.2 is very confused about one particular detail that appears in numerous places in our sources, namely printing a vm_addr_t (or similar address types) with a %lx. vm_addr_t is AKA unsigned int, so gcc complains that we should not use the l prefix for printing. I might go ahead and correct all %lx to %x, but since they are there for some reason, I assume we want such address types to be realized as long.","But when I do:
$ mipsel-unknown-elf-gcc -mips32r2 -EL -g -std=gnu11 -Og -Wall -Werror -fno-builtin -ffreestanding -Wall -Werror -DDEBUG -I/mimiker/include  exec.c -E | grep size_t -C1
# 216 ""~/local/mipsel-unknown-elf/lib/gcc/mipsel-unknown-elf/5.2.0/include/stddef.h"" 3 4
typedef unsigned int size_t;
[...]

So I look around that stddef.h file:
#ifndef __SIZE_TYPE__
#define __SIZE_TYPE__ long unsigned int
#endif
#if !(defined (__GNUG__) && defined (size_t))
typedef __SIZE_TYPE__ size_t; // <- this is line 216

and __SIZE_TYPE__ does not appear anywhere else in the file (which does not #include any other files). So if it is not using long unsigned int, then __SIZE_TYPE__ must be a preprocessor built-in.
And apparently it is.
How do we influence that?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,117,2016-11-07T18:05:25Z,2016-11-07T19:58:37Z,2016-12-14T21:04:08Z,MERGED,True,28,14,7,https://github.com/rafalcieslak,New toolchain support in make rules,5,[],https://github.com/cahirwpz/mimiker/pull/117,https://github.com/cahirwpz,11,https://github.com/cahirwpz/mimiker/pull/117#issuecomment-258943103,"This tiny change to Makefile.common enables the custom toolchain - if available at host. Since this would be a major breaking change for other contributors (and for travis), for some transitional period both toolchains are supported. Make simply checks whether mipsel-unknown-elf-gcc is available, and if not, it falls back to mips-mti-elf-*. In both cases compilation succeeds, and the produced kernel image operates normally.
Also I had to disable -Wformat. gcc 5.2 is very confused about one particular detail that appears in numerous places in our sources, namely printing a vm_addr_t (or similar address types) with a %lx. vm_addr_t is AKA unsigned int, so gcc complains that we should not use the l prefix for printing. I might go ahead and correct all %lx to %x, but since they are there for some reason, I assume we want such address types to be realized as long.",Ignore my previous comment. Just use %zu as @pdziepak suggested.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,118,2016-11-08T12:45:34Z,2016-11-08T15:56:02Z,2016-11-11T12:53:19Z,MERGED,True,6,2,1,https://github.com/coodie,Fix sched_switch and sched_add race conditions,1,[],https://github.com/cahirwpz/mimiker/pull/118,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/118,"This PR surrounds sched_switch and sched_add with critical section, in case of turnstiles it sometimes happened that runq was left in undefined state due to races.","This PR surrounds sched_switch and sched_add with critical section, in case of turnstiles it sometimes happened that runq was left in undefined state due to races.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,119,2016-11-08T15:11:47Z,2016-11-08T16:18:11Z,2016-11-11T12:53:19Z,MERGED,True,80,1,3,https://github.com/coodie,"Basic atomic operations (compare and swap, atomic store)",4,[],https://github.com/cahirwpz/mimiker/pull/119,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/119,"This PR adds atomic operations stolen from FreeBSD. They are used to implement mutexes on other branch, thus tested and proved to be working.","This PR adds atomic operations stolen from FreeBSD. They are used to implement mutexes on other branch, thus tested and proved to be working.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,119,2016-11-08T15:11:47Z,2016-11-08T16:18:11Z,2016-11-11T12:53:19Z,MERGED,True,80,1,3,https://github.com/coodie,"Basic atomic operations (compare and swap, atomic store)",4,[],https://github.com/cahirwpz/mimiker/pull/119,https://github.com/pdziepak,2,https://github.com/cahirwpz/mimiker/pull/119#issuecomment-259220404,"This PR adds atomic operations stolen from FreeBSD. They are used to implement mutexes on other branch, thus tested and proved to be working.","Generally, it is better to prefer standard solutions to anything else and if they are not available then compiler builtins are always better than custom implementation. The reason for that is that if the compiler exactly knows what the function is doing it can better optimise it.
In this case there are obviously C11 atomics which can be implemented using GCC builtins [1]. C11 atomics have the additonal advantage of being more flexible in terms of memory ordering specification that most custom implementations (including this one).
Another thing to consider is that kernels without multicore support should very rarely need atomic operations (actually, I am very tempted to say ""should never need them"", but surely someone will come up with some obscure counterexample ;). Atomics are usually expensive even if there is no contention (this obviously can vary depending on the architecture/cpu model – worth checking the actual values for MIPS) and single core kernel can do all synchronisation by disabling interrupts or just disabling preemption (often cheaper than disabling interrupts).
[1] https://gcc.gnu.org/onlinedocs/gcc/_005f_005fatomic-Builtins.html#g_t_005f_005fatomic-Builtins",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,120,2016-11-08T15:29:42Z,2016-11-08T16:41:56Z,2016-11-11T12:53:17Z,MERGED,True,48,1,4,https://github.com/coodie,Add turnstile data structure,2,[],https://github.com/cahirwpz/mimiker/pull/120,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/120,"Add basic turnstile data structure. I decided to implement all I need to get the blocking mutexes done. And it turns out I needed only turnstile_wait and turnstile_signal. I'm still unsure about it working but I spent some time on testing implementation of turnstile using mutexes on other branch and everything seems to be ok. I'd like this and mutexes to be merged ASAP, so I can spill mutexes around the code and we can start testing if this implementation is correct. In other branch I plan to add some debugging commands to make life for potential debugging person easier.
This is very tiny, but it's all that is necessary to implement blocking mutexes. Since we don't really have high-level scheduler which reassigns priorities, we don't really have priorities and we don't need to solve priority inversion by hand. I decided not to implement keeping turnstile inside thread structure (FreeBSD memory optimisation) because I find correctness of mutexes more important than unnecessary at-the-moment optimization (this isn't however very difficult to implement).","Add basic turnstile data structure. I decided to implement all I need to get the blocking mutexes done. And it turns out I needed only turnstile_wait and turnstile_signal. I'm still unsure about it working but I spent some time on testing implementation of turnstile using mutexes on other branch and everything seems to be ok. I'd like this and mutexes to be merged ASAP, so I can spill mutexes around the code and we can start testing if this implementation is correct. In other branch I plan to add some debugging commands to make life for potential debugging person easier.
This is very tiny, but it's all that is necessary to implement blocking mutexes. Since we don't really have high-level scheduler which reassigns priorities, we don't really have priorities and we don't need to solve priority inversion by hand. I decided not to implement keeping turnstile inside thread structure (FreeBSD memory optimisation) because I find correctness of mutexes more important than unnecessary at-the-moment optimization (this isn't however very difficult to implement).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,121,2016-11-11T00:08:07Z,2016-11-11T06:45:04Z,2016-12-14T21:04:11Z,MERGED,True,28,15,4,https://github.com/rafalcieslak,Enabled _gp support for usermode programs,1,[],https://github.com/cahirwpz/mimiker/pull/121,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/121,"This branch enables small-data section and prepares $gp for usermode programs. Some details are explained in the discussion here. The updated test prog.c verifies that data can be successfully accessed with the gp.
I mentioned that while testing this I encountered a serious bug with context saving; I did not - it was my test that was incorrect.","This branch enables small-data section and prepares $gp for usermode programs. Some details are explained in the discussion here. The updated test prog.c verifies that data can be successfully accessed with the gp.
I mentioned that while testing this I encountered a serious bug with context saving; I did not - it was my test that was incorrect.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,122,2016-11-11T01:03:09Z,2016-11-13T14:15:06Z,2016-11-13T14:33:41Z,MERGED,True,206,10,9,https://github.com/coodie,Add blocking mutexes,20,[],https://github.com/cahirwpz/mimiker/pull/122,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/122,This PR adds mutexes which make use of turnstile data structure.,This PR adds mutexes which make use of turnstile data structure.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,122,2016-11-11T01:03:09Z,2016-11-13T14:15:06Z,2016-11-13T14:33:41Z,MERGED,True,206,10,9,https://github.com/coodie,Add blocking mutexes,20,[],https://github.com/cahirwpz/mimiker/pull/122,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/122#issuecomment-260186101,This PR adds mutexes which make use of turnstile data structure.,Let's finish it up today! We're almost there ;-),True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,122,2016-11-11T01:03:09Z,2016-11-13T14:15:06Z,2016-11-13T14:33:41Z,MERGED,True,206,10,9,https://github.com/coodie,Add blocking mutexes,20,[],https://github.com/cahirwpz/mimiker/pull/122,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/122#issuecomment-260188757,This PR adds mutexes which make use of turnstile data structure.,"Good job! Finally, we have a basic implementation of mutexes!",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,123,2016-11-11T02:23:11Z,2016-11-11T07:45:16Z,2016-12-14T21:04:14Z,MERGED,True,76,12,4,https://github.com/rafalcieslak,Thread IDs and all_threads list,6,[],https://github.com/cahirwpz/mimiker/pull/123,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/123,"As discussed, these minor utilities will simplify implementing some things a lot.
@psie, you may be interested in this.
Unfortunately, this branch also does some formatting fixes.","As discussed, these minor utilities will simplify implementing some things a lot.
@psie, you may be interested in this.
Unfortunately, this branch also does some formatting fixes.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,124,2016-11-11T15:09:35Z,2016-11-11T18:42:13Z,2016-11-11T18:42:13Z,MERGED,True,171,0,6,https://github.com/psie,initial gdb scripts for thread debugging,3,[],https://github.com/cahirwpz/mimiker/pull/124,https://github.com/psie,1,https://github.com/cahirwpz/mimiker/pull/124,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,124,2016-11-11T15:09:35Z,2016-11-11T18:42:13Z,2016-11-11T18:42:13Z,MERGED,True,171,0,6,https://github.com/psie,initial gdb scripts for thread debugging,3,[],https://github.com/cahirwpz/mimiker/pull/124,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/124#issuecomment-259978504,,"We've recently implemented a list of all threads and thread IDs, see (5deb0ed). You may want to incorporate these features in your scripts.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,124,2016-11-11T15:09:35Z,2016-11-11T18:42:13Z,2016-11-11T18:42:13Z,MERGED,True,171,0,6,https://github.com/psie,initial gdb scripts for thread debugging,3,[],https://github.com/cahirwpz/mimiker/pull/124,https://github.com/coodie,3,https://github.com/cahirwpz/mimiker/pull/124#issuecomment-259983411,,"@psie
Would you like me to do it or you want to do it?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,124,2016-11-11T15:09:35Z,2016-11-11T18:42:13Z,2016-11-11T18:42:13Z,MERGED,True,171,0,6,https://github.com/psie,initial gdb scripts for thread debugging,3,[],https://github.com/cahirwpz/mimiker/pull/124,https://github.com/psie,4,https://github.com/cahirwpz/mimiker/pull/124#issuecomment-259984565,,"@rafalcieslak Thanks, that will come in very handyi ndeed.
@coodie I'd rather you do it since you need this quick and I am progressing slowly.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,124,2016-11-11T15:09:35Z,2016-11-11T18:42:13Z,2016-11-11T18:42:13Z,MERGED,True,171,0,6,https://github.com/psie,initial gdb scripts for thread debugging,3,[],https://github.com/cahirwpz/mimiker/pull/124,https://github.com/coodie,5,https://github.com/cahirwpz/mimiker/pull/124#issuecomment-259985267,,"@psie
Okay, I'm fine with it :).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,124,2016-11-11T15:09:35Z,2016-11-11T18:42:13Z,2016-11-11T18:42:13Z,MERGED,True,171,0,6,https://github.com/psie,initial gdb scripts for thread debugging,3,[],https://github.com/cahirwpz/mimiker/pull/124,https://github.com/coodie,6,https://github.com/cahirwpz/mimiker/pull/124#issuecomment-260006991,,"@cahirwpz
Is this a problem to merge this now? I don't feel like playing with git for couple of hours and move files between branches because there can be more commands... while these are ok. I'd rather this to be merged and ready for use by everyone and then make new branch and PR from master.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,124,2016-11-11T15:09:35Z,2016-11-11T18:42:13Z,2016-11-11T18:42:13Z,MERGED,True,171,0,6,https://github.com/psie,initial gdb scripts for thread debugging,3,[],https://github.com/cahirwpz/mimiker/pull/124,https://github.com/cahirwpz,7,https://github.com/cahirwpz/mimiker/pull/124#issuecomment-260021075,,I'm somewhat confused. Should I close #108?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,125,2016-11-11T15:09:57Z,2016-11-11T22:08:54Z,2016-11-11T22:08:54Z,MERGED,True,141,16,3,https://github.com/rafalcieslak,Enabled libc for user programs,7,[],https://github.com/cahirwpz/mimiker/pull/125,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/125,"Thanks to crosstool-ng already building newlib for us, it turned out that enabling libc is as simple as adding -lc to linker flags - so this branch has a working libc demo.
Note that disabling -nostdlib is not the same as adding -ld. In particular, -nostdlib pulls crti.o and crtbegin.o from compiler's resources, and we are definitely not at the point where we might use them instead of our own start.S.
I'll continue working on this branch to add system call wrappers stubs. Kernel-side system call support will be done in a separate branch.","Thanks to crosstool-ng already building newlib for us, it turned out that enabling libc is as simple as adding -lc to linker flags - so this branch has a working libc demo.
Note that disabling -nostdlib is not the same as adding -ld. In particular, -nostdlib pulls crti.o and crtbegin.o from compiler's resources, and we are definitely not at the point where we might use them instead of our own start.S.
I'll continue working on this branch to add system call wrappers stubs. Kernel-side system call support will be done in a separate branch.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,125,2016-11-11T15:09:57Z,2016-11-11T22:08:54Z,2016-11-11T22:08:54Z,MERGED,True,141,16,3,https://github.com/rafalcieslak,Enabled libc for user programs,7,[],https://github.com/cahirwpz/mimiker/pull/125,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/125#issuecomment-259999880,"Thanks to crosstool-ng already building newlib for us, it turned out that enabling libc is as simple as adding -lc to linker flags - so this branch has a working libc demo.
Note that disabling -nostdlib is not the same as adding -ld. In particular, -nostdlib pulls crti.o and crtbegin.o from compiler's resources, and we are definitely not at the point where we might use them instead of our own start.S.
I'll continue working on this branch to add system call wrappers stubs. Kernel-side system call support will be done in a separate branch.",I'm ready to merge this branch as is.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,125,2016-11-11T15:09:57Z,2016-11-11T22:08:54Z,2016-11-11T22:08:54Z,MERGED,True,141,16,3,https://github.com/rafalcieslak,Enabled libc for user programs,7,[],https://github.com/cahirwpz/mimiker/pull/125,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/125#issuecomment-260009128,"Thanks to crosstool-ng already building newlib for us, it turned out that enabling libc is as simple as adding -lc to linker flags - so this branch has a working libc demo.
Note that disabling -nostdlib is not the same as adding -ld. In particular, -nostdlib pulls crti.o and crtbegin.o from compiler's resources, and we are definitely not at the point where we might use them instead of our own start.S.
I'll continue working on this branch to add system call wrappers stubs. Kernel-side system call support will be done in a separate branch.","Travis uses the old toolchain, which, apparently, comes with a different unistd.h, so implementations for system call wrappers do not match their prototypes. I may remove #include <unistd.h> to fix this mismatch, but it would need restoring once we move to new toolchain entirely.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,125,2016-11-11T15:09:57Z,2016-11-11T22:08:54Z,2016-11-11T22:08:54Z,MERGED,True,141,16,3,https://github.com/rafalcieslak,Enabled libc for user programs,7,[],https://github.com/cahirwpz/mimiker/pull/125,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/125#issuecomment-260025398,"Thanks to crosstool-ng already building newlib for us, it turned out that enabling libc is as simple as adding -lc to linker flags - so this branch has a working libc demo.
Note that disabling -nostdlib is not the same as adding -ld. In particular, -nostdlib pulls crti.o and crtbegin.o from compiler's resources, and we are definitely not at the point where we might use them instead of our own start.S.
I'll continue working on this branch to add system call wrappers stubs. Kernel-side system call support will be done in a separate branch.",Would you be able to ifdef things out based on preprocessor builin defines?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,125,2016-11-11T15:09:57Z,2016-11-11T22:08:54Z,2016-11-11T22:08:54Z,MERGED,True,141,16,3,https://github.com/rafalcieslak,Enabled libc for user programs,7,[],https://github.com/cahirwpz/mimiker/pull/125,https://github.com/rafalcieslak,5,https://github.com/cahirwpz/mimiker/pull/125#issuecomment-260037282,"Thanks to crosstool-ng already building newlib for us, it turned out that enabling libc is as simple as adding -lc to linker flags - so this branch has a working libc demo.
Note that disabling -nostdlib is not the same as adding -ld. In particular, -nostdlib pulls crti.o and crtbegin.o from compiler's resources, and we are definitely not at the point where we might use them instead of our own start.S.
I'll continue working on this branch to add system call wrappers stubs. Kernel-side system call support will be done in a separate branch.","This is ridiculous. libc provided by mips-mti-elf uses -mhard-float, while libc provided by mipsel-unknown-elf uses -msoft-float, so I can't produce universal prog.o that would link correctly with libcs from both toolchains.
To solve this, I would need to introduce extra makefile variables that control compilation flags depending on the used toolchain. Should I do that? We'll be dropping support for ""old toolchain"" eventually (soon?).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,125,2016-11-11T15:09:57Z,2016-11-11T22:08:54Z,2016-11-11T22:08:54Z,MERGED,True,141,16,3,https://github.com/rafalcieslak,Enabled libc for user programs,7,[],https://github.com/cahirwpz/mimiker/pull/125,https://github.com/goniz,6,https://github.com/cahirwpz/mimiker/pull/125#issuecomment-260040219,"Thanks to crosstool-ng already building newlib for us, it turned out that enabling libc is as simple as adding -lc to linker flags - so this branch has a working libc demo.
Note that disabling -nostdlib is not the same as adding -ld. In particular, -nostdlib pulls crti.o and crtbegin.o from compiler's resources, and we are definitely not at the point where we might use them instead of our own start.S.
I'll continue working on this branch to add system call wrappers stubs. Kernel-side system call support will be done in a separate branch.","yes, the mti-elf toolchain provides super weird newlib libc versions only with hard float while the mti-linux has soft float..
by my taste, the crosstool-ng generated toolchain is preferable as you can always update the toolchain components when the need arises and the toolchain defaults can be adjusted to fit your products needs..",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,125,2016-11-11T15:09:57Z,2016-11-11T22:08:54Z,2016-11-11T22:08:54Z,MERGED,True,141,16,3,https://github.com/rafalcieslak,Enabled libc for user programs,7,[],https://github.com/cahirwpz/mimiker/pull/125,https://github.com/cahirwpz,7,https://github.com/cahirwpz/mimiker/pull/125#issuecomment-260053904,"Thanks to crosstool-ng already building newlib for us, it turned out that enabling libc is as simple as adding -lc to linker flags - so this branch has a working libc demo.
Note that disabling -nostdlib is not the same as adding -ld. In particular, -nostdlib pulls crti.o and crtbegin.o from compiler's resources, and we are definitely not at the point where we might use them instead of our own start.S.
I'll continue working on this branch to add system call wrappers stubs. Kernel-side system call support will be done in a separate branch.",Enabled hardware FPU in the toolchain with b36621f.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,125,2016-11-11T15:09:57Z,2016-11-11T22:08:54Z,2016-11-11T22:08:54Z,MERGED,True,141,16,3,https://github.com/rafalcieslak,Enabled libc for user programs,7,[],https://github.com/cahirwpz/mimiker/pull/125,https://github.com/rafalcieslak,8,https://github.com/cahirwpz/mimiker/pull/125#issuecomment-260064064,"Thanks to crosstool-ng already building newlib for us, it turned out that enabling libc is as simple as adding -lc to linker flags - so this branch has a working libc demo.
Note that disabling -nostdlib is not the same as adding -ld. In particular, -nostdlib pulls crti.o and crtbegin.o from compiler's resources, and we are definitely not at the point where we might use them instead of our own start.S.
I'll continue working on this branch to add system call wrappers stubs. Kernel-side system call support will be done in a separate branch.","The toolchain accepts new configuration, and indeed passes -mhard-float when building some components, but not all. This results in linker printing numerous warnings when linking prog.uelf, that are similar to this:
~/local/mipsel-unknown-elf/lib/gcc/mipsel-unknown-elf/5.2.0/../../../../mipsel-unknown-elf/bin/ld:
Warning: prog.uelf uses -mhard-float (set by start.o),
~/local/mipsel-unknown-elf/lib/gcc/mipsel-unknown-elf/5.2.0/../../../../mipsel-unknown-elf/lib/libc.a(lib_a-abort.o)
uses -msoft-float

For the record, crostool compiled abort.c from newlib with this command:
mipsel-unknown-elf-cc -B/mimiker/toolchain/mips/.build/mipsel-unknown-elf/build/build-libc/mipsel-unknown-elf/newlib/ -isystem /mimiker/toolchain/mips/.build/mipsel-unknown-elf/build/build-libc/mipsel-unknown-elf/newlib/targ-include -isystem /mimiker/toolchain/mips/.build/src/newlib-2.2.0/newlib/libc/include -B/mimiker/toolchain/mips/.build/mipsel-unknown-elf/build/build-libc/mipsel-unknown-elf/libgloss/mips -L/mimiker/toolchain/mips/.build/mipsel-unknown-elf/build/build-libc/mipsel-unknown-elf/libgloss/libnosys -L/mimiker/toolchain/mips/.build/src/newlib-2.2.0/libgloss/mips    -DPACKAGE_NAME=""newlib"" -DPACKAGE_TARNAME=""newlib"" -DPACKAGE_VERSION=""2.2.0"" -DPACKAGE_STRING=""newlib 2.2.0"" -DPACKAGE_BUGREPORT="""" -DPACKAGE_URL="""" -I. -I/mimiker/toolchain/mips/.build/src/newlib-2.2.0/newlib/libc/stdlib -Os -D__NO_SYSCALLS__ -DNO_FLOATING_POINT -DMISSING_SYSCALL_NAMES -fno-builtin      -g -Os -c -o lib_a-abort.o `test -f 'abort.c' || echo '/mimiker/toolchain/mips/.build/src/newlib-2.2.0/newlib/libc/stdlib/'`abort.c

So user programs do successfully compile, but the linker reminds us to be careful about mixing soft and hard floats. Even though newlib objects like abort.o don't actually use floating point calculations.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,126,2016-11-11T21:15:51Z,2016-11-12T07:09:55Z,2016-12-14T21:04:22Z,MERGED,True,138,14,10,https://github.com/rafalcieslak,Syscalls vector and sys_write stub,8,[],https://github.com/cahirwpz/mimiker/pull/126,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/126,"This is an improved variant of #107. Introduces a minimal syscall vector, and implements sys_write stub, which may be used by user programs for writing to temporary stdout/stderr dummies.","This is an improved variant of #107. Introduces a minimal syscall vector, and implements sys_write stub, which may be used by user programs for writing to temporary stdout/stderr dummies.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,126,2016-11-11T21:15:51Z,2016-11-12T07:09:55Z,2016-12-14T21:04:22Z,MERGED,True,138,14,10,https://github.com/rafalcieslak,Syscalls vector and sys_write stub,8,[],https://github.com/cahirwpz/mimiker/pull/126,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/126#issuecomment-260077451,"This is an improved variant of #107. Introduces a minimal syscall vector, and implements sys_write stub, which may be used by user programs for writing to temporary stdout/stderr dummies.","Merged with master, so that write implementation now lands in user/syscalls.c, like other wrapper stubs. I modified error value processing so that negative return values represent errors. Also, it turns out I can use ""%a0"" for register clobbers (silly intel-oriented gcc), so that asm inline is much more readable now.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,127,2016-11-12T13:12:32Z,2016-11-14T14:45:37Z,2016-12-14T21:04:31Z,MERGED,True,69,139,6,https://github.com/rafalcieslak,Expanding user syscall stubs,6,[],https://github.com/cahirwpz/mimiker/pull/127,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/127,"This branch effectively glues #125 and #126, so that the standard library can actually use system calls.
Good news is that printf in userspace actually works now, even though we don't have sbrk. I don't know how does it do string formatting (all libc's internal memory allocation fails) but somehow it does.","This branch effectively glues #125 and #126, so that the standard library can actually use system calls.
Good news is that printf in userspace actually works now, even though we don't have sbrk. I don't know how does it do string formatting (all libc's internal memory allocation fails) but somehow it does.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,128,2016-11-12T14:24:15Z,2016-11-13T08:31:48Z,2016-11-13T14:33:44Z,MERGED,True,104,7,1,https://github.com/coodie,Add kthread command,4,[],https://github.com/cahirwpz/mimiker/pull/128,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/128,This PR adds kthread command to gdb. Everything should be documented and easy to use.,This PR adds kthread command to gdb. Everything should be documented and easy to use.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,129,2016-11-12T14:48:09Z,2016-11-18T11:02:59Z,2016-11-18T11:02:59Z,MERGED,True,159,26,6,https://github.com/rafalcieslak,Implemented sbrk system call,13,[],https://github.com/cahirwpz/mimiker/pull/129,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/129,"Here's a simple yet complete sbrk implementation. It doesn't actually use .data (because we actually don't know where it is, and there may be no free space next to it), but that shouldn't matter. libc appears to be using it fine, even malloc in user program works now! There is a basic test provided in user/prog.c. I needed to add a vm_map_expand  function, which is used for increasing the length of a vm_map_entry.","Here's a simple yet complete sbrk implementation. It doesn't actually use .data (because we actually don't know where it is, and there may be no free space next to it), but that shouldn't matter. libc appears to be using it fine, even malloc in user program works now! There is a basic test provided in user/prog.c. I needed to add a vm_map_expand  function, which is used for increasing the length of a vm_map_entry.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,129,2016-11-12T14:48:09Z,2016-11-18T11:02:59Z,2016-11-18T11:02:59Z,MERGED,True,159,26,6,https://github.com/rafalcieslak,Implemented sbrk system call,13,[],https://github.com/cahirwpz/mimiker/pull/129,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/129#issuecomment-260197444,"Here's a simple yet complete sbrk implementation. It doesn't actually use .data (because we actually don't know where it is, and there may be no free space next to it), but that shouldn't matter. libc appears to be using it fine, even malloc in user program works now! There is a basic test provided in user/prog.c. I needed to add a vm_map_expand  function, which is used for increasing the length of a vm_map_entry.","All requests done. I'm wondering whether we should invalidate some TLB entries when a vm_map_entry gets shrinked so that the old data wouldn't be accessible anymore. Any program that accesses the freed memory area triggers UB, so we are free to do whatever we want. In case of sbrk, it is not even a security issue, because the data that's left there belonged to the same program anyway... so I suggest we leave it for now, as correctly invalidating TLB may be tricky to implement.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,129,2016-11-12T14:48:09Z,2016-11-18T11:02:59Z,2016-11-18T11:02:59Z,MERGED,True,159,26,6,https://github.com/rafalcieslak,Implemented sbrk system call,13,[],https://github.com/cahirwpz/mimiker/pull/129,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/129#issuecomment-260358609,"Here's a simple yet complete sbrk implementation. It doesn't actually use .data (because we actually don't know where it is, and there may be no free space next to it), but that shouldn't matter. libc appears to be using it fine, even malloc in user program works now! There is a basic test provided in user/prog.c. I needed to add a vm_map_expand  function, which is used for increasing the length of a vm_map_entry.","Now that I think about it: maybe it's not a security issue, but we need to clean TLB anyway - because if the same address space is used soon after for another mapping (say, mmap, or next sbrk), then the TLB entries may be still pointing to the old location.
Same problem happens when a vm_map_entry is removed from the map (unmmap) - the TLB must have corresponding entries invalidated.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,129,2016-11-12T14:48:09Z,2016-11-18T11:02:59Z,2016-11-18T11:02:59Z,MERGED,True,159,26,6,https://github.com/rafalcieslak,Implemented sbrk system call,13,[],https://github.com/cahirwpz/mimiker/pull/129,https://github.com/rafalcieslak,4,https://github.com/cahirwpz/mimiker/pull/129#issuecomment-261369552,"Here's a simple yet complete sbrk implementation. It doesn't actually use .data (because we actually don't know where it is, and there may be no free space next to it), but that shouldn't matter. libc appears to be using it fine, even malloc in user program works now! There is a basic test provided in user/prog.c. I needed to add a vm_map_expand  function, which is used for increasing the length of a vm_map_entry.","I've updated this branch so that it works with recent additions to the syscall vector and glue. I've also disabled negative arguments to sbrk, marking them with comments in source and warnings in runtime.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,130,2016-11-13T14:22:40Z,2016-11-13T14:28:16Z,2016-11-13T14:33:40Z,MERGED,True,35,5,2,https://github.com/coodie,Split makefile sources into rows,1,[],https://github.com/cahirwpz/mimiker/pull/130,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/130,"I don't like the fact that while rebasing or merging a branch which adds new files to repo I often have to resolve conflicts in makefiles, splitting this into rows should avoid these conflicts in most of cases.","I don't like the fact that while rebasing or merging a branch which adds new files to repo I often have to resolve conflicts in makefiles, splitting this into rows should avoid these conflicts in most of cases.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,132,2016-11-13T20:25:27Z,2016-11-13T20:26:28Z,2016-12-14T21:04:25Z,MERGED,True,1,1,1,https://github.com/rafalcieslak,Fix for #131,1,[],https://github.com/cahirwpz/mimiker/pull/132,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/132,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,133,2016-11-13T23:39:39Z,2016-11-14T06:36:15Z,2016-12-14T21:04:27Z,MERGED,True,3,0,1,https://github.com/rafalcieslak,Added *.pyc files to .gitignore,1,[],https://github.com/cahirwpz/mimiker/pull/133,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/133,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,134,2016-11-14T01:27:37Z,2016-11-14T09:32:29Z,2016-12-14T21:04:29Z,MERGED,True,38,39,1,https://github.com/rafalcieslak,Major makefile cleanup,1,[],https://github.com/cahirwpz/mimiker/pull/134,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/134,"I finally got down to cleaning up the main Makefile. My changes include:

Correcting dependencies so that they point to files and not their parent directories
Simplifying frequently edited variables
Automatically generating as much as possible to reduce human-error risk (for example, creating a new test *.c required adding the file in two places in Makefile, and as some tests were present in only one of these places, the success of build varied with the order of dependency evaluation...)
Providing slightly more documentation, as makefiles tend to get difficult to read. Minor formatting fixes.

As a pleasant effects of these changes:

make no longer pointlessly rebuilds kernel .elfs and some other files when nothing was changed
Fixed dependencies finally allow for parallelized building.

I've tested this new Makefile by manually touching each *.{c,h,S} file and verifying whether all targets rebuild correctly and in order, both with make and make -j32, so I am fairly confident everything works well.","I finally got down to cleaning up the main Makefile. My changes include:

Correcting dependencies so that they point to files and not their parent directories
Simplifying frequently edited variables
Automatically generating as much as possible to reduce human-error risk (for example, creating a new test *.c required adding the file in two places in Makefile, and as some tests were present in only one of these places, the success of build varied with the order of dependency evaluation...)
Providing slightly more documentation, as makefiles tend to get difficult to read. Minor formatting fixes.

As a pleasant effects of these changes:

make no longer pointlessly rebuilds kernel .elfs and some other files when nothing was changed
Fixed dependencies finally allow for parallelized building.

I've tested this new Makefile by manually touching each *.{c,h,S} file and verifying whether all targets rebuild correctly and in order, both with make and make -j32, so I am fairly confident everything works well.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,134,2016-11-14T01:27:37Z,2016-11-14T09:32:29Z,2016-12-14T21:04:29Z,MERGED,True,38,39,1,https://github.com/rafalcieslak,Major makefile cleanup,1,[],https://github.com/cahirwpz/mimiker/pull/134,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/134#issuecomment-260287989,"I finally got down to cleaning up the main Makefile. My changes include:

Correcting dependencies so that they point to files and not their parent directories
Simplifying frequently edited variables
Automatically generating as much as possible to reduce human-error risk (for example, creating a new test *.c required adding the file in two places in Makefile, and as some tests were present in only one of these places, the success of build varied with the order of dependency evaluation...)
Providing slightly more documentation, as makefiles tend to get difficult to read. Minor formatting fixes.

As a pleasant effects of these changes:

make no longer pointlessly rebuilds kernel .elfs and some other files when nothing was changed
Fixed dependencies finally allow for parallelized building.

I've tested this new Makefile by manually touching each *.{c,h,S} file and verifying whether all targets rebuild correctly and in order, both with make and make -j32, so I am fairly confident everything works well.","Make metaprogramming FTW! It looks way better, thanks!",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,136,2016-11-17T20:07:57Z,2016-11-17T20:24:23Z,2016-12-14T21:04:42Z,MERGED,True,2,0,1,https://github.com/rafalcieslak,High-priority fix for syscalls destroying user stack,1,[],https://github.com/cahirwpz/mimiker/pull/136,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/136,"The last two instructions of set_errno, called in userspace when syscalls return error code:
        jr      $ra
        addiu   $sp, $sp, 24

are compiled into:
        jr      $ra
        nop
        addiu   $sp, $sp, 24

so the procedure does not restore $sp correctly! This branch fixes this issue by adding .set noreorder assembler directive, which makes it trust us about branch delay slots.
I hope we can merge this ASAP, because this is blocking all my other syscall-related work. Also: let this be a reminder to us all to always run tests even after cosmetic changes!","The last two instructions of set_errno, called in userspace when syscalls return error code:
        jr      $ra
        addiu   $sp, $sp, 24

are compiled into:
        jr      $ra
        nop
        addiu   $sp, $sp, 24

so the procedure does not restore $sp correctly! This branch fixes this issue by adding .set noreorder assembler directive, which makes it trust us about branch delay slots.
I hope we can merge this ASAP, because this is blocking all my other syscall-related work. Also: let this be a reminder to us all to always run tests even after cosmetic changes!",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,137,2016-11-17T20:28:57Z,2016-11-17T20:37:41Z,2016-12-14T21:04:41Z,MERGED,True,21,2,3,https://github.com/rafalcieslak,sys_exit stub,1,[],https://github.com/cahirwpz/mimiker/pull/137,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/137,"Per request, here is the sys_exit stub extracted from #129.","Per request, here is the sys_exit stub extracted from #129.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,138,2016-11-17T21:28:52Z,2016-11-18T14:42:03Z,2016-11-18T14:42:03Z,MERGED,True,52,59,8,https://github.com/rafalcieslak,Implemented argument passing when creating a new thread,1,[],https://github.com/cahirwpz/mimiker/pull/138,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/138,"Basically this modifies
thread_t *thread_create(const char *name, void (*fn)());

into
thread_t *thread_create(const char *name, void (*fn)(void *), void *arg);

so that one can optionally pass an argument to the thread function, in a manner similar to pthread_create. This mechanism is necessary to create an init kernel thread, as it needs to start arbitrarily many threads.  Incidentally this also cleans up thread creation in sched.c.","Basically this modifies
thread_t *thread_create(const char *name, void (*fn)());

into
thread_t *thread_create(const char *name, void (*fn)(void *), void *arg);

so that one can optionally pass an argument to the thread function, in a manner similar to pthread_create. This mechanism is necessary to create an init kernel thread, as it needs to start arbitrarily many threads.  Incidentally this also cleans up thread creation in sched.c.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,139,2016-11-17T22:19:42Z,2016-11-17T22:31:32Z,2016-11-17T22:31:32Z,MERGED,True,3,4,2,https://github.com/rafalcieslak,Unified syscall debug output,1,[],https://github.com/cahirwpz/mimiker/pull/139,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/139,"Merely a minor cosmetic change to cleanup kernel debug messages for syscalls to make debugging syscalls easier, at least until we can properly filter messages.","Merely a minor cosmetic change to cleanup kernel debug messages for syscalls to make debugging syscalls easier, at least until we can properly filter messages.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,140,2016-11-18T21:19:17Z,2016-11-22T12:00:40Z,2016-11-22T12:00:40Z,MERGED,True,650,662,26,https://github.com/rafalcieslak,Imported some clib string functions,6,[],https://github.com/cahirwpz/mimiker/pull/140,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/140,I need these to create a simple kernel args parser.,I need these to create a simple kernel args parser.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,140,2016-11-18T21:19:17Z,2016-11-22T12:00:40Z,2016-11-22T12:00:40Z,MERGED,True,650,662,26,https://github.com/rafalcieslak,Imported some clib string functions,6,[],https://github.com/cahirwpz/mimiker/pull/140,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/140#issuecomment-261660395,I need these to create a simple kernel args parser.,"It turns out that smallclib's implementation of strsep is incorrect, because and it behaves just like strtok. Therefore I imported strsep from FreeBSD's libkern, and it seems to work correctly.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,140,2016-11-18T21:19:17Z,2016-11-22T12:00:40Z,2016-11-22T12:00:40Z,MERGED,True,650,662,26,https://github.com/rafalcieslak,Imported some clib string functions,6,[],https://github.com/cahirwpz/mimiker/pull/140,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/140#issuecomment-261712698,I need these to create a simple kernel args parser.,"This is first time we've run into problems with smallclib. My hunch was that it would happen and will happen again. That's why I proposed to take all routines (or as much as possible) from *BSD systems. We know they're widely used, throughly tested and behave well on variety of systems.
Moreover, not all C standard library functions are considered to be well designed. strtok is such an example – manual pages:

state that the function is obsoleted by strsep(3) in FreeBSD,
or warn a user and give extensive list of bugs in Linux.

Thus, it's time to make a policy on importing new functions into stdc:

If a function to be imported is not a part of *BSD libkern, one must provide good justification for its use.
Always prefer simpler implementation over optimized one.
Format new files and remove everything that the reader should not be bothered about.

I'd keep current way the sources are organized, i.e. directories: stdlib, string and so on.
@rafalcieslak please give me your opinion.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,140,2016-11-18T21:19:17Z,2016-11-22T12:00:40Z,2016-11-22T12:00:40Z,MERGED,True,650,662,26,https://github.com/rafalcieslak,Imported some clib string functions,6,[],https://github.com/cahirwpz/mimiker/pull/140,https://github.com/rafalcieslak,4,https://github.com/cahirwpz/mimiker/pull/140#issuecomment-261791766,I need these to create a simple kernel args parser.,"To be fair, I wasn't accurate when I said that smallclib's strsep is incorrect. strsep is non-standard function, and actually smallclib does not provide it - but it has an incomplete stub, which - when completed, makes strsep an alias for strtok. So, strictly speaking, smallclib doesn't do anything wrong here. The problem we encountered this time is not with smallclib at all, but with my whim to use a non-standard function. IIRC, previous problems we had with smallclib should also be attributed to our inability to use it correctly.
But I don't mind switching to e.g. libkern. It provides a reasonable subset of standard functions with their ""safer"" replacements, and various additional utilities we may find useful at some point. Hopefully it would save us from revisiting this topic every month or so.
If we import sources from elsewhere, I suggest to keep our changes to minimum (including cleanup!). We don't want to fork and maintain our own version of the standard library, which might happen if we start modifying and simplifying copied files.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,141,2016-11-18T23:54:44Z,2016-11-24T15:16:23Z,2016-11-24T15:16:23Z,CLOSED,False,488,16,12,https://github.com/rafalcieslak,Basic kernel arguments support,9,[],https://github.com/cahirwpz/mimiker/pull/141,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/141,"Note: This branch incorporates changes from #140, so please process it before this one.
Here's a simple interface for accessing kernel args. These proposed changes include:

parsing kernel arguments (splitting them by spaces)
providing utilities for convenient access to arguments, namely:

const char *kernel_args_get(const char *key);
int kernel_args_get_flag(const char *flag);

The new test args.c is pretty self-explanatory. The launch script was updated, so that it may be run like this:
./launch -d args.elf arg1=value1 flag1 arg2=value2

Works with both OVPsim and QEMU.
@mkaim: I suppose you will find this useful.","Note: This branch incorporates changes from #140, so please process it before this one.
Here's a simple interface for accessing kernel args. These proposed changes include:

parsing kernel arguments (splitting them by spaces)
providing utilities for convenient access to arguments, namely:

const char *kernel_args_get(const char *key);
int kernel_args_get_flag(const char *flag);

The new test args.c is pretty self-explanatory. The launch script was updated, so that it may be run like this:
./launch -d args.elf arg1=value1 flag1 arg2=value2

Works with both OVPsim and QEMU.
@mkaim: I suppose you will find this useful.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,141,2016-11-18T23:54:44Z,2016-11-24T15:16:23Z,2016-11-24T15:16:23Z,CLOSED,False,488,16,12,https://github.com/rafalcieslak,Basic kernel arguments support,9,[],https://github.com/cahirwpz/mimiker/pull/141,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/141#issuecomment-261714746,"Note: This branch incorporates changes from #140, so please process it before this one.
Here's a simple interface for accessing kernel args. These proposed changes include:

parsing kernel arguments (splitting them by spaces)
providing utilities for convenient access to arguments, namely:

const char *kernel_args_get(const char *key);
int kernel_args_get_flag(const char *flag);

The new test args.c is pretty self-explanatory. The launch script was updated, so that it may be run like this:
./launch -d args.elf arg1=value1 flag1 arg2=value2

Works with both OVPsim and QEMU.
@mkaim: I suppose you will find this useful.","I acknowledge the fact that we need global kernel runtime configuration. FreeBSD solves that using kenv inteface, i.e. getenv and setenv functions. Please read kern_environment.c, find similar solution in other kernels and compare them, try to capture all requirements and propose an interface (header file).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,141,2016-11-18T23:54:44Z,2016-11-24T15:16:23Z,2016-11-24T15:16:23Z,CLOSED,False,488,16,12,https://github.com/rafalcieslak,Basic kernel arguments support,9,[],https://github.com/cahirwpz/mimiker/pull/141,https://github.com/mkaim,3,https://github.com/cahirwpz/mimiker/pull/141#issuecomment-261717346,"Note: This branch incorporates changes from #140, so please process it before this one.
Here's a simple interface for accessing kernel args. These proposed changes include:

parsing kernel arguments (splitting them by spaces)
providing utilities for convenient access to arguments, namely:

const char *kernel_args_get(const char *key);
int kernel_args_get_flag(const char *flag);

The new test args.c is pretty self-explanatory. The launch script was updated, so that it may be run like this:
./launch -d args.elf arg1=value1 flag1 arg2=value2

Works with both OVPsim and QEMU.
@mkaim: I suppose you will find this useful.","Well, it was my job to handle argv and now there is my pull request doing almost same work.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,142,2016-11-19T14:32:06Z,2016-11-24T10:55:12Z,2016-11-24T10:55:12Z,MERGED,True,118,33,5,https://github.com/mkaim,Kernel args,17,[],https://github.com/cahirwpz/mimiker/pull/142,https://github.com/mkaim,1,https://github.com/cahirwpz/mimiker/pull/142,"This pull request includes:

platform_init function in mips/malta.c that clears bss section and fixes argv
very simple argv parser - almost copy-paste from @rafalcieslak pull request

argv fix function properly handle quoted strings. - it's no longer true after code simplification.
Hope that args.c file is self-explanatory.","This pull request includes:

platform_init function in mips/malta.c that clears bss section and fixes argv
very simple argv parser - almost copy-paste from @rafalcieslak pull request

argv fix function properly handle quoted strings. - it's no longer true after code simplification.
Hope that args.c file is self-explanatory.",True,{'THUMBS_UP': ['https://github.com/rafalcieslak']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,142,2016-11-19T14:32:06Z,2016-11-24T10:55:12Z,2016-11-24T10:55:12Z,MERGED,True,118,33,5,https://github.com/mkaim,Kernel args,17,[],https://github.com/cahirwpz/mimiker/pull/142,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/142#issuecomment-261720780,"This pull request includes:

platform_init function in mips/malta.c that clears bss section and fixes argv
very simple argv parser - almost copy-paste from @rafalcieslak pull request

argv fix function properly handle quoted strings. - it's no longer true after code simplification.
Hope that args.c file is self-explanatory.",Let's move launch script to separate PR and discuss the changes there.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,148,2016-11-24T10:30:47Z,2016-11-24T10:55:49Z,2016-11-24T10:55:49Z,MERGED,True,3,3,1,https://github.com/rafalcieslak,Call _exit when user main() returns,1,[],https://github.com/cahirwpz/mimiker/pull/148,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/148,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,149,2016-11-24T14:44:03Z,2016-12-10T22:08:44Z,2016-12-10T22:08:44Z,MERGED,True,178,9,5,https://github.com/strzkrzysiek,Additional gdb kdump subcommands (physmem),9,[],https://github.com/cahirwpz/mimiker/pull/149,https://github.com/strzkrzysiek,1,https://github.com/cahirwpz/mimiker/pull/149,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,150,2016-11-24T15:40:27Z,2016-11-24T18:46:48Z,2016-11-24T18:46:48Z,MERGED,True,6,2,1,https://github.com/rafalcieslak,Kernel argument support in launch script,1,[],https://github.com/cahirwpz/mimiker/pull/150,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/150,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,151,2016-11-24T18:10:24Z,2016-11-26T11:28:53Z,2016-11-26T11:28:53Z,MERGED,True,49,16,5,https://github.com/psie,thread_exit stub,2,[],https://github.com/cahirwpz/mimiker/pull/151,https://github.com/psie,1,https://github.com/cahirwpz/mimiker/pull/151,This is only a stub. For now thread is marked not to be executed but nothing is cleaned after.,This is only a stub. For now thread is marked not to be executed but nothing is cleaned after.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,152,2016-11-27T01:39:35Z,2017-01-04T15:43:24Z,2017-01-04T15:43:24Z,MERGED,True,669,68,23,https://github.com/rafalcieslak,Basic file descriptor support,55,[],https://github.com/cahirwpz/mimiker/pull/152,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/152,"Here is my proposed interface to files and descriptor tables.
I realize this is a not as small PR. I did my best to implement as little as possible and keep changes to minimum, but it's still not a trivial change. I believe it will be very difficult to split it into smaller parts, because pretty much everything here is needed even to get the simplest example working. So if anyone has some ideas on how to trim this PR, I'm all ears - just take note of how these new functions depend on each other. I suppose the primary reason of why this change is big is because all logic is split into a large number of tiny functions, and all of them are very useful on their own. Anyway, I suppose it won't be hard to review, since everything here is mostly straight-forward.
I've based my implementation on FreeBSD, but it is severly simplified, and supports only the very basic operations. What I find confusing about FreeBSD's implementation is that they name various concepts using the same term fd. So sometimes ""closing fd"" refers to removing the file descriptor table, sometimes to invalidating a particular descriptor, and sometimes to closing the underlying file. To clean up the terms, I'm using:

file_desc_table referring to the per-thread mapping from integers to files
file_desc then I mean a particular descriptor (number) in the table
file when I refer to the underlying file.

As we agreed, currently there is a hard limit of 20 files open per-process.
As for now, it is difficult to test this implementation thoroughly, and it will stay this way up until we implement fork/clone and/or dup. I suggest we test this as much as we can with currently available features, and re-investigate this when new features make use of this interface.
Because I removed the previous way we processed write() to files 1 and 2, usermode programs no longer have a way of printing output. My suggestion for fixing this is to implement a stub /dev/uart pseudo-file, in a way almost identical to how I implemented /dev/null. It's going to be very simple, and will also help testing descriptors a lot!
I am not yet finished with this branch, I will be cleaning up the implementation a bit, and will prepare some more exhaustive tests. Comments on the interface and initial implementation are very welcome!","Here is my proposed interface to files and descriptor tables.
I realize this is a not as small PR. I did my best to implement as little as possible and keep changes to minimum, but it's still not a trivial change. I believe it will be very difficult to split it into smaller parts, because pretty much everything here is needed even to get the simplest example working. So if anyone has some ideas on how to trim this PR, I'm all ears - just take note of how these new functions depend on each other. I suppose the primary reason of why this change is big is because all logic is split into a large number of tiny functions, and all of them are very useful on their own. Anyway, I suppose it won't be hard to review, since everything here is mostly straight-forward.
I've based my implementation on FreeBSD, but it is severly simplified, and supports only the very basic operations. What I find confusing about FreeBSD's implementation is that they name various concepts using the same term fd. So sometimes ""closing fd"" refers to removing the file descriptor table, sometimes to invalidating a particular descriptor, and sometimes to closing the underlying file. To clean up the terms, I'm using:

file_desc_table referring to the per-thread mapping from integers to files
file_desc then I mean a particular descriptor (number) in the table
file when I refer to the underlying file.

As we agreed, currently there is a hard limit of 20 files open per-process.
As for now, it is difficult to test this implementation thoroughly, and it will stay this way up until we implement fork/clone and/or dup. I suggest we test this as much as we can with currently available features, and re-investigate this when new features make use of this interface.
Because I removed the previous way we processed write() to files 1 and 2, usermode programs no longer have a way of printing output. My suggestion for fixing this is to implement a stub /dev/uart pseudo-file, in a way almost identical to how I implemented /dev/null. It's going to be very simple, and will also help testing descriptors a lot!
I am not yet finished with this branch, I will be cleaning up the implementation a bit, and will prepare some more exhaustive tests. Comments on the interface and initial implementation are very welcome!",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,152,2016-11-27T01:39:35Z,2017-01-04T15:43:24Z,2017-01-04T15:43:24Z,MERGED,True,669,68,23,https://github.com/rafalcieslak,Basic file descriptor support,55,[],https://github.com/cahirwpz/mimiker/pull/152,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/152#issuecomment-263156971,"Here is my proposed interface to files and descriptor tables.
I realize this is a not as small PR. I did my best to implement as little as possible and keep changes to minimum, but it's still not a trivial change. I believe it will be very difficult to split it into smaller parts, because pretty much everything here is needed even to get the simplest example working. So if anyone has some ideas on how to trim this PR, I'm all ears - just take note of how these new functions depend on each other. I suppose the primary reason of why this change is big is because all logic is split into a large number of tiny functions, and all of them are very useful on their own. Anyway, I suppose it won't be hard to review, since everything here is mostly straight-forward.
I've based my implementation on FreeBSD, but it is severly simplified, and supports only the very basic operations. What I find confusing about FreeBSD's implementation is that they name various concepts using the same term fd. So sometimes ""closing fd"" refers to removing the file descriptor table, sometimes to invalidating a particular descriptor, and sometimes to closing the underlying file. To clean up the terms, I'm using:

file_desc_table referring to the per-thread mapping from integers to files
file_desc then I mean a particular descriptor (number) in the table
file when I refer to the underlying file.

As we agreed, currently there is a hard limit of 20 files open per-process.
As for now, it is difficult to test this implementation thoroughly, and it will stay this way up until we implement fork/clone and/or dup. I suggest we test this as much as we can with currently available features, and re-investigate this when new features make use of this interface.
Because I removed the previous way we processed write() to files 1 and 2, usermode programs no longer have a way of printing output. My suggestion for fixing this is to implement a stub /dev/uart pseudo-file, in a way almost identical to how I implemented /dev/null. It's going to be very simple, and will also help testing descriptors a lot!
I am not yet finished with this branch, I will be cleaning up the implementation a bit, and will prepare some more exhaustive tests. Comments on the interface and initial implementation are very welcome!",At this point fd_test.c is fairly complex and uses all basic descriptor operations.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,152,2016-11-27T01:39:35Z,2017-01-04T15:43:24Z,2017-01-04T15:43:24Z,MERGED,True,669,68,23,https://github.com/rafalcieslak,Basic file descriptor support,55,[],https://github.com/cahirwpz/mimiker/pull/152,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/152#issuecomment-263373373,"Here is my proposed interface to files and descriptor tables.
I realize this is a not as small PR. I did my best to implement as little as possible and keep changes to minimum, but it's still not a trivial change. I believe it will be very difficult to split it into smaller parts, because pretty much everything here is needed even to get the simplest example working. So if anyone has some ideas on how to trim this PR, I'm all ears - just take note of how these new functions depend on each other. I suppose the primary reason of why this change is big is because all logic is split into a large number of tiny functions, and all of them are very useful on their own. Anyway, I suppose it won't be hard to review, since everything here is mostly straight-forward.
I've based my implementation on FreeBSD, but it is severly simplified, and supports only the very basic operations. What I find confusing about FreeBSD's implementation is that they name various concepts using the same term fd. So sometimes ""closing fd"" refers to removing the file descriptor table, sometimes to invalidating a particular descriptor, and sometimes to closing the underlying file. To clean up the terms, I'm using:

file_desc_table referring to the per-thread mapping from integers to files
file_desc then I mean a particular descriptor (number) in the table
file when I refer to the underlying file.

As we agreed, currently there is a hard limit of 20 files open per-process.
As for now, it is difficult to test this implementation thoroughly, and it will stay this way up until we implement fork/clone and/or dup. I suggest we test this as much as we can with currently available features, and re-investigate this when new features make use of this interface.
Because I removed the previous way we processed write() to files 1 and 2, usermode programs no longer have a way of printing output. My suggestion for fixing this is to implement a stub /dev/uart pseudo-file, in a way almost identical to how I implemented /dev/null. It's going to be very simple, and will also help testing descriptors a lot!
I am not yet finished with this branch, I will be cleaning up the implementation a bit, and will prepare some more exhaustive tests. Comments on the interface and initial implementation are very welcome!","I've updated this branch so that sys_{read,write,open} now correctly copyin/copyout data from/to user space. I've also added extra tests to fd_test.c which make sure that kernel correctly handles invalid pointers in syscall arguments.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,152,2016-11-27T01:39:35Z,2017-01-04T15:43:24Z,2017-01-04T15:43:24Z,MERGED,True,669,68,23,https://github.com/rafalcieslak,Basic file descriptor support,55,[],https://github.com/cahirwpz/mimiker/pull/152,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/152#issuecomment-263378351,"Here is my proposed interface to files and descriptor tables.
I realize this is a not as small PR. I did my best to implement as little as possible and keep changes to minimum, but it's still not a trivial change. I believe it will be very difficult to split it into smaller parts, because pretty much everything here is needed even to get the simplest example working. So if anyone has some ideas on how to trim this PR, I'm all ears - just take note of how these new functions depend on each other. I suppose the primary reason of why this change is big is because all logic is split into a large number of tiny functions, and all of them are very useful on their own. Anyway, I suppose it won't be hard to review, since everything here is mostly straight-forward.
I've based my implementation on FreeBSD, but it is severly simplified, and supports only the very basic operations. What I find confusing about FreeBSD's implementation is that they name various concepts using the same term fd. So sometimes ""closing fd"" refers to removing the file descriptor table, sometimes to invalidating a particular descriptor, and sometimes to closing the underlying file. To clean up the terms, I'm using:

file_desc_table referring to the per-thread mapping from integers to files
file_desc then I mean a particular descriptor (number) in the table
file when I refer to the underlying file.

As we agreed, currently there is a hard limit of 20 files open per-process.
As for now, it is difficult to test this implementation thoroughly, and it will stay this way up until we implement fork/clone and/or dup. I suggest we test this as much as we can with currently available features, and re-investigate this when new features make use of this interface.
Because I removed the previous way we processed write() to files 1 and 2, usermode programs no longer have a way of printing output. My suggestion for fixing this is to implement a stub /dev/uart pseudo-file, in a way almost identical to how I implemented /dev/null. It's going to be very simple, and will also help testing descriptors a lot!
I am not yet finished with this branch, I will be cleaning up the implementation a bit, and will prepare some more exhaustive tests. Comments on the interface and initial implementation are very welcome!","Let's work on trimming down this PR.

Firstly... move the test and simple fixes to their correspoding PRs. This will get merged promptly.
Secondly... I'll ask you to read 8d87530 and share your opinion on it. I'd like you to implement devnull as the first device, after you move it to dev/null.c location. Later a wrapper for rtc.c could be provided as well.

As a preparation for the implementation of first device you should write uiomove, which should be relatively straightforward. Please have a look at subr_copy.c.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,152,2016-11-27T01:39:35Z,2017-01-04T15:43:24Z,2017-01-04T15:43:24Z,MERGED,True,669,68,23,https://github.com/rafalcieslak,Basic file descriptor support,55,[],https://github.com/cahirwpz/mimiker/pull/152,https://github.com/rafalcieslak,5,https://github.com/cahirwpz/mimiker/pull/152#issuecomment-263395380,"Here is my proposed interface to files and descriptor tables.
I realize this is a not as small PR. I did my best to implement as little as possible and keep changes to minimum, but it's still not a trivial change. I believe it will be very difficult to split it into smaller parts, because pretty much everything here is needed even to get the simplest example working. So if anyone has some ideas on how to trim this PR, I'm all ears - just take note of how these new functions depend on each other. I suppose the primary reason of why this change is big is because all logic is split into a large number of tiny functions, and all of them are very useful on their own. Anyway, I suppose it won't be hard to review, since everything here is mostly straight-forward.
I've based my implementation on FreeBSD, but it is severly simplified, and supports only the very basic operations. What I find confusing about FreeBSD's implementation is that they name various concepts using the same term fd. So sometimes ""closing fd"" refers to removing the file descriptor table, sometimes to invalidating a particular descriptor, and sometimes to closing the underlying file. To clean up the terms, I'm using:

file_desc_table referring to the per-thread mapping from integers to files
file_desc then I mean a particular descriptor (number) in the table
file when I refer to the underlying file.

As we agreed, currently there is a hard limit of 20 files open per-process.
As for now, it is difficult to test this implementation thoroughly, and it will stay this way up until we implement fork/clone and/or dup. I suggest we test this as much as we can with currently available features, and re-investigate this when new features make use of this interface.
Because I removed the previous way we processed write() to files 1 and 2, usermode programs no longer have a way of printing output. My suggestion for fixing this is to implement a stub /dev/uart pseudo-file, in a way almost identical to how I implemented /dev/null. It's going to be very simple, and will also help testing descriptors a lot!
I am not yet finished with this branch, I will be cleaning up the implementation a bit, and will prepare some more exhaustive tests. Comments on the interface and initial implementation are very welcome!","I'm not sure if moving fd_test.c away from this branch is a good idea. Whenever I update anything here or add new features and/or possible fail scenarios, I will update the tests, so keeping them in a separate branch will be tedious.
I've investigated how uiomove works, and clearly NetBSD's version is much simpler than the one used in FreeBSD (which I failed to comprehend). Also please note that NetBSD does not use uiomove for /dev/null at all, and actually, in order to use it I would need to implement e.g. a /dev/zero. And, naturally, implementing 8d87530 and related utilities will grow this branch even more, instead of trimming it down... Should I work on basic devices and uiomove in a separate branch?
My notes about 8d87530:

I believe the uio_vmspace pointer in uio_t is unnecessary, as we currently assume that the user vm map corresponding to currently running thread is always active.
I don't think we will want to provide device mmap support at this point, so maybe we should postpone adding d_mmap.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,152,2016-11-27T01:39:35Z,2017-01-04T15:43:24Z,2017-01-04T15:43:24Z,MERGED,True,669,68,23,https://github.com/rafalcieslak,Basic file descriptor support,55,[],https://github.com/cahirwpz/mimiker/pull/152,https://github.com/cahirwpz,6,https://github.com/cahirwpz/mimiker/pull/152#issuecomment-263412630,"Here is my proposed interface to files and descriptor tables.
I realize this is a not as small PR. I did my best to implement as little as possible and keep changes to minimum, but it's still not a trivial change. I believe it will be very difficult to split it into smaller parts, because pretty much everything here is needed even to get the simplest example working. So if anyone has some ideas on how to trim this PR, I'm all ears - just take note of how these new functions depend on each other. I suppose the primary reason of why this change is big is because all logic is split into a large number of tiny functions, and all of them are very useful on their own. Anyway, I suppose it won't be hard to review, since everything here is mostly straight-forward.
I've based my implementation on FreeBSD, but it is severly simplified, and supports only the very basic operations. What I find confusing about FreeBSD's implementation is that they name various concepts using the same term fd. So sometimes ""closing fd"" refers to removing the file descriptor table, sometimes to invalidating a particular descriptor, and sometimes to closing the underlying file. To clean up the terms, I'm using:

file_desc_table referring to the per-thread mapping from integers to files
file_desc then I mean a particular descriptor (number) in the table
file when I refer to the underlying file.

As we agreed, currently there is a hard limit of 20 files open per-process.
As for now, it is difficult to test this implementation thoroughly, and it will stay this way up until we implement fork/clone and/or dup. I suggest we test this as much as we can with currently available features, and re-investigate this when new features make use of this interface.
Because I removed the previous way we processed write() to files 1 and 2, usermode programs no longer have a way of printing output. My suggestion for fixing this is to implement a stub /dev/uart pseudo-file, in a way almost identical to how I implemented /dev/null. It's going to be very simple, and will also help testing descriptors a lot!
I am not yet finished with this branch, I will be cleaning up the implementation a bit, and will prepare some more exhaustive tests. Comments on the interface and initial implementation are very welcome!","Should I work on basic devices and uiomove in a separate branch?

Yes, please. We probably don't need /dev/zero, however we could add dev/malta/uart_cbus.c (i.e. interrupt driven tty2 driver), since sleepqueue implementation is just behind the corner (sched_yield will do for now).

the uio_vmspace pointer in uio_t is unnecessary

Other choice was thread_t. This unambiguously identifies address space which we want to copy to / from. I reckon the field is not particularly useful but I'd keep it there for the record – just to make it easier to debug tens or hundreds uio's in flight.

we should postpone adding d_mmap

I agree.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,152,2016-11-27T01:39:35Z,2017-01-04T15:43:24Z,2017-01-04T15:43:24Z,MERGED,True,669,68,23,https://github.com/rafalcieslak,Basic file descriptor support,55,[],https://github.com/cahirwpz/mimiker/pull/152,https://github.com/rafalcieslak,7,https://github.com/cahirwpz/mimiker/pull/152#issuecomment-263415368,"Here is my proposed interface to files and descriptor tables.
I realize this is a not as small PR. I did my best to implement as little as possible and keep changes to minimum, but it's still not a trivial change. I believe it will be very difficult to split it into smaller parts, because pretty much everything here is needed even to get the simplest example working. So if anyone has some ideas on how to trim this PR, I'm all ears - just take note of how these new functions depend on each other. I suppose the primary reason of why this change is big is because all logic is split into a large number of tiny functions, and all of them are very useful on their own. Anyway, I suppose it won't be hard to review, since everything here is mostly straight-forward.
I've based my implementation on FreeBSD, but it is severly simplified, and supports only the very basic operations. What I find confusing about FreeBSD's implementation is that they name various concepts using the same term fd. So sometimes ""closing fd"" refers to removing the file descriptor table, sometimes to invalidating a particular descriptor, and sometimes to closing the underlying file. To clean up the terms, I'm using:

file_desc_table referring to the per-thread mapping from integers to files
file_desc then I mean a particular descriptor (number) in the table
file when I refer to the underlying file.

As we agreed, currently there is a hard limit of 20 files open per-process.
As for now, it is difficult to test this implementation thoroughly, and it will stay this way up until we implement fork/clone and/or dup. I suggest we test this as much as we can with currently available features, and re-investigate this when new features make use of this interface.
Because I removed the previous way we processed write() to files 1 and 2, usermode programs no longer have a way of printing output. My suggestion for fixing this is to implement a stub /dev/uart pseudo-file, in a way almost identical to how I implemented /dev/null. It's going to be very simple, and will also help testing descriptors a lot!
I am not yet finished with this branch, I will be cleaning up the implementation a bit, and will prepare some more exhaustive tests. Comments on the interface and initial implementation are very welcome!","We probably don't need /dev/zero

I completely agree that we don't need it for anything, but I think its implementation would be good for documentation purposes, as it would be a non-quite-trivial example of using the device interface. A /dev/zero would also help in preparing meaningful tests, since /dev/null doesn't even use uiomove. For this reason, if I were to implement writing to a /dev/zero, I would actually copy the data into some junkyard buffer - merely to demonstrate/test the interface.
What is handy about uio_vmspace is that it may be used to recognize whether the move is performed from/to user space, or kernel space. I imagine some drivers may want to use uiomove for their own purposes, in such case copying data should not fail on writing to kernel space addresses. See copyout_vmspace.",True,{'THUMBS_UP': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,152,2016-11-27T01:39:35Z,2017-01-04T15:43:24Z,2017-01-04T15:43:24Z,MERGED,True,669,68,23,https://github.com/rafalcieslak,Basic file descriptor support,55,[],https://github.com/cahirwpz/mimiker/pull/152,https://github.com/cahirwpz,8,https://github.com/cahirwpz/mimiker/pull/152#issuecomment-263416115,"Here is my proposed interface to files and descriptor tables.
I realize this is a not as small PR. I did my best to implement as little as possible and keep changes to minimum, but it's still not a trivial change. I believe it will be very difficult to split it into smaller parts, because pretty much everything here is needed even to get the simplest example working. So if anyone has some ideas on how to trim this PR, I'm all ears - just take note of how these new functions depend on each other. I suppose the primary reason of why this change is big is because all logic is split into a large number of tiny functions, and all of them are very useful on their own. Anyway, I suppose it won't be hard to review, since everything here is mostly straight-forward.
I've based my implementation on FreeBSD, but it is severly simplified, and supports only the very basic operations. What I find confusing about FreeBSD's implementation is that they name various concepts using the same term fd. So sometimes ""closing fd"" refers to removing the file descriptor table, sometimes to invalidating a particular descriptor, and sometimes to closing the underlying file. To clean up the terms, I'm using:

file_desc_table referring to the per-thread mapping from integers to files
file_desc then I mean a particular descriptor (number) in the table
file when I refer to the underlying file.

As we agreed, currently there is a hard limit of 20 files open per-process.
As for now, it is difficult to test this implementation thoroughly, and it will stay this way up until we implement fork/clone and/or dup. I suggest we test this as much as we can with currently available features, and re-investigate this when new features make use of this interface.
Because I removed the previous way we processed write() to files 1 and 2, usermode programs no longer have a way of printing output. My suggestion for fixing this is to implement a stub /dev/uart pseudo-file, in a way almost identical to how I implemented /dev/null. It's going to be very simple, and will also help testing descriptors a lot!
I am not yet finished with this branch, I will be cleaning up the implementation a bit, and will prepare some more exhaustive tests. Comments on the interface and initial implementation are very welcome!","I'm not sure if moving fd_test.c away from this branch is a good idea.

I reckon it is worth it, as it will get merged promptly. Even if you modify the file later, the PR will still be smaller.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,152,2016-11-27T01:39:35Z,2017-01-04T15:43:24Z,2017-01-04T15:43:24Z,MERGED,True,669,68,23,https://github.com/rafalcieslak,Basic file descriptor support,55,[],https://github.com/cahirwpz/mimiker/pull/152,https://github.com/rafalcieslak,9,https://github.com/cahirwpz/mimiker/pull/152#issuecomment-266314542,"Here is my proposed interface to files and descriptor tables.
I realize this is a not as small PR. I did my best to implement as little as possible and keep changes to minimum, but it's still not a trivial change. I believe it will be very difficult to split it into smaller parts, because pretty much everything here is needed even to get the simplest example working. So if anyone has some ideas on how to trim this PR, I'm all ears - just take note of how these new functions depend on each other. I suppose the primary reason of why this change is big is because all logic is split into a large number of tiny functions, and all of them are very useful on their own. Anyway, I suppose it won't be hard to review, since everything here is mostly straight-forward.
I've based my implementation on FreeBSD, but it is severly simplified, and supports only the very basic operations. What I find confusing about FreeBSD's implementation is that they name various concepts using the same term fd. So sometimes ""closing fd"" refers to removing the file descriptor table, sometimes to invalidating a particular descriptor, and sometimes to closing the underlying file. To clean up the terms, I'm using:

file_desc_table referring to the per-thread mapping from integers to files
file_desc then I mean a particular descriptor (number) in the table
file when I refer to the underlying file.

As we agreed, currently there is a hard limit of 20 files open per-process.
As for now, it is difficult to test this implementation thoroughly, and it will stay this way up until we implement fork/clone and/or dup. I suggest we test this as much as we can with currently available features, and re-investigate this when new features make use of this interface.
Because I removed the previous way we processed write() to files 1 and 2, usermode programs no longer have a way of printing output. My suggestion for fixing this is to implement a stub /dev/uart pseudo-file, in a way almost identical to how I implemented /dev/null. It's going to be very simple, and will also help testing descriptors a lot!
I am not yet finished with this branch, I will be cleaning up the implementation a bit, and will prepare some more exhaustive tests. Comments on the interface and initial implementation are very welcome!",I'm glad I took my time to prepare a complex fd_test.c - this way porting this branch to use VFS totally felt like test-driven development!,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,152,2016-11-27T01:39:35Z,2017-01-04T15:43:24Z,2017-01-04T15:43:24Z,MERGED,True,669,68,23,https://github.com/rafalcieslak,Basic file descriptor support,55,[],https://github.com/cahirwpz/mimiker/pull/152,https://github.com/rafalcieslak,10,https://github.com/cahirwpz/mimiker/pull/152#issuecomment-266484165,"Here is my proposed interface to files and descriptor tables.
I realize this is a not as small PR. I did my best to implement as little as possible and keep changes to minimum, but it's still not a trivial change. I believe it will be very difficult to split it into smaller parts, because pretty much everything here is needed even to get the simplest example working. So if anyone has some ideas on how to trim this PR, I'm all ears - just take note of how these new functions depend on each other. I suppose the primary reason of why this change is big is because all logic is split into a large number of tiny functions, and all of them are very useful on their own. Anyway, I suppose it won't be hard to review, since everything here is mostly straight-forward.
I've based my implementation on FreeBSD, but it is severly simplified, and supports only the very basic operations. What I find confusing about FreeBSD's implementation is that they name various concepts using the same term fd. So sometimes ""closing fd"" refers to removing the file descriptor table, sometimes to invalidating a particular descriptor, and sometimes to closing the underlying file. To clean up the terms, I'm using:

file_desc_table referring to the per-thread mapping from integers to files
file_desc then I mean a particular descriptor (number) in the table
file when I refer to the underlying file.

As we agreed, currently there is a hard limit of 20 files open per-process.
As for now, it is difficult to test this implementation thoroughly, and it will stay this way up until we implement fork/clone and/or dup. I suggest we test this as much as we can with currently available features, and re-investigate this when new features make use of this interface.
Because I removed the previous way we processed write() to files 1 and 2, usermode programs no longer have a way of printing output. My suggestion for fixing this is to implement a stub /dev/uart pseudo-file, in a way almost identical to how I implemented /dev/null. It's going to be very simple, and will also help testing descriptors a lot!
I am not yet finished with this branch, I will be cleaning up the implementation a bit, and will prepare some more exhaustive tests. Comments on the interface and initial implementation are very welcome!","I'm done with the final refactoring I wanted to do - this branch is again ready to be reviewed.
Stuff I did not implement yet and should be done in a next PR:

writev/readv
stat/fstat`
lseek",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,152,2016-11-27T01:39:35Z,2017-01-04T15:43:24Z,2017-01-04T15:43:24Z,MERGED,True,669,68,23,https://github.com/rafalcieslak,Basic file descriptor support,55,[],https://github.com/cahirwpz/mimiker/pull/152,https://github.com/cahirwpz,11,https://github.com/cahirwpz/mimiker/pull/152#issuecomment-266525520,"Here is my proposed interface to files and descriptor tables.
I realize this is a not as small PR. I did my best to implement as little as possible and keep changes to minimum, but it's still not a trivial change. I believe it will be very difficult to split it into smaller parts, because pretty much everything here is needed even to get the simplest example working. So if anyone has some ideas on how to trim this PR, I'm all ears - just take note of how these new functions depend on each other. I suppose the primary reason of why this change is big is because all logic is split into a large number of tiny functions, and all of them are very useful on their own. Anyway, I suppose it won't be hard to review, since everything here is mostly straight-forward.
I've based my implementation on FreeBSD, but it is severly simplified, and supports only the very basic operations. What I find confusing about FreeBSD's implementation is that they name various concepts using the same term fd. So sometimes ""closing fd"" refers to removing the file descriptor table, sometimes to invalidating a particular descriptor, and sometimes to closing the underlying file. To clean up the terms, I'm using:

file_desc_table referring to the per-thread mapping from integers to files
file_desc then I mean a particular descriptor (number) in the table
file when I refer to the underlying file.

As we agreed, currently there is a hard limit of 20 files open per-process.
As for now, it is difficult to test this implementation thoroughly, and it will stay this way up until we implement fork/clone and/or dup. I suggest we test this as much as we can with currently available features, and re-investigate this when new features make use of this interface.
Because I removed the previous way we processed write() to files 1 and 2, usermode programs no longer have a way of printing output. My suggestion for fixing this is to implement a stub /dev/uart pseudo-file, in a way almost identical to how I implemented /dev/null. It's going to be very simple, and will also help testing descriptors a lot!
I am not yet finished with this branch, I will be cleaning up the implementation a bit, and will prepare some more exhaustive tests. Comments on the interface and initial implementation are very welcome!",Please move changes that are not specific to file / file descriptor management to a separate PR.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,152,2016-11-27T01:39:35Z,2017-01-04T15:43:24Z,2017-01-04T15:43:24Z,MERGED,True,669,68,23,https://github.com/rafalcieslak,Basic file descriptor support,55,[],https://github.com/cahirwpz/mimiker/pull/152,https://github.com/cahirwpz,12,https://github.com/cahirwpz/mimiker/pull/152#issuecomment-270382390,"Here is my proposed interface to files and descriptor tables.
I realize this is a not as small PR. I did my best to implement as little as possible and keep changes to minimum, but it's still not a trivial change. I believe it will be very difficult to split it into smaller parts, because pretty much everything here is needed even to get the simplest example working. So if anyone has some ideas on how to trim this PR, I'm all ears - just take note of how these new functions depend on each other. I suppose the primary reason of why this change is big is because all logic is split into a large number of tiny functions, and all of them are very useful on their own. Anyway, I suppose it won't be hard to review, since everything here is mostly straight-forward.
I've based my implementation on FreeBSD, but it is severly simplified, and supports only the very basic operations. What I find confusing about FreeBSD's implementation is that they name various concepts using the same term fd. So sometimes ""closing fd"" refers to removing the file descriptor table, sometimes to invalidating a particular descriptor, and sometimes to closing the underlying file. To clean up the terms, I'm using:

file_desc_table referring to the per-thread mapping from integers to files
file_desc then I mean a particular descriptor (number) in the table
file when I refer to the underlying file.

As we agreed, currently there is a hard limit of 20 files open per-process.
As for now, it is difficult to test this implementation thoroughly, and it will stay this way up until we implement fork/clone and/or dup. I suggest we test this as much as we can with currently available features, and re-investigate this when new features make use of this interface.
Because I removed the previous way we processed write() to files 1 and 2, usermode programs no longer have a way of printing output. My suggestion for fixing this is to implement a stub /dev/uart pseudo-file, in a way almost identical to how I implemented /dev/null. It's going to be very simple, and will also help testing descriptors a lot!
I am not yet finished with this branch, I will be cleaning up the implementation a bit, and will prepare some more exhaustive tests. Comments on the interface and initial implementation are very welcome!","LGTM
I remember you complaining on current method of conducting code merge. It's obvious I won't pull ~50 commits into the master. How should we proceed to save you unnecessary work?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,152,2016-11-27T01:39:35Z,2017-01-04T15:43:24Z,2017-01-04T15:43:24Z,MERGED,True,669,68,23,https://github.com/rafalcieslak,Basic file descriptor support,55,[],https://github.com/cahirwpz/mimiker/pull/152,https://github.com/rafalcieslak,13,https://github.com/cahirwpz/mimiker/pull/152#issuecomment-270385846,"Here is my proposed interface to files and descriptor tables.
I realize this is a not as small PR. I did my best to implement as little as possible and keep changes to minimum, but it's still not a trivial change. I believe it will be very difficult to split it into smaller parts, because pretty much everything here is needed even to get the simplest example working. So if anyone has some ideas on how to trim this PR, I'm all ears - just take note of how these new functions depend on each other. I suppose the primary reason of why this change is big is because all logic is split into a large number of tiny functions, and all of them are very useful on their own. Anyway, I suppose it won't be hard to review, since everything here is mostly straight-forward.
I've based my implementation on FreeBSD, but it is severly simplified, and supports only the very basic operations. What I find confusing about FreeBSD's implementation is that they name various concepts using the same term fd. So sometimes ""closing fd"" refers to removing the file descriptor table, sometimes to invalidating a particular descriptor, and sometimes to closing the underlying file. To clean up the terms, I'm using:

file_desc_table referring to the per-thread mapping from integers to files
file_desc then I mean a particular descriptor (number) in the table
file when I refer to the underlying file.

As we agreed, currently there is a hard limit of 20 files open per-process.
As for now, it is difficult to test this implementation thoroughly, and it will stay this way up until we implement fork/clone and/or dup. I suggest we test this as much as we can with currently available features, and re-investigate this when new features make use of this interface.
Because I removed the previous way we processed write() to files 1 and 2, usermode programs no longer have a way of printing output. My suggestion for fixing this is to implement a stub /dev/uart pseudo-file, in a way almost identical to how I implemented /dev/null. It's going to be very simple, and will also help testing descriptors a lot!
I am not yet finished with this branch, I will be cleaning up the implementation a bit, and will prepare some more exhaustive tests. Comments on the interface and initial implementation are very welcome!","I believe this would require a detailed discussion, so for now let's merge this as you normally would - I don't have many branches that incorporate these changes anyway, so I should be fine.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,153,2016-11-28T14:59:34Z,2016-11-28T19:33:49Z,2016-12-10T08:10:42Z,MERGED,True,265,43,16,https://github.com/cahirwpz,Safe data copy between kernel and user space,8,[],https://github.com/cahirwpz/mimiker/pull/153,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/153,"This PR adds copyin, copyout, copyinstr, fuword32, suword32 that deal with safe copying of data between user and kernel space.
To show that it actually works user/syscall_test.c was recycled into user/misbehave.c and I fixed a kernel crash on following user code:
assert(write(STDOUT_FILENO, (char *)0xDEADC0DE, 100) == -1);
assert(errno == EFAULT);
The issue is not fully fixed, but all tools are right in place. To detect if an exception happened one must check td_onfault field which stores program counter of failing routine continuation.
@rafalcieslak Please review the code.","This PR adds copyin, copyout, copyinstr, fuword32, suword32 that deal with safe copying of data between user and kernel space.
To show that it actually works user/syscall_test.c was recycled into user/misbehave.c and I fixed a kernel crash on following user code:
assert(write(STDOUT_FILENO, (char *)0xDEADC0DE, 100) == -1);
assert(errno == EFAULT);
The issue is not fully fixed, but all tools are right in place. To detect if an exception happened one must check td_onfault field which stores program counter of failing routine continuation.
@rafalcieslak Please review the code.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,153,2016-11-28T14:59:34Z,2016-11-28T19:33:49Z,2016-12-10T08:10:42Z,MERGED,True,265,43,16,https://github.com/cahirwpz,Safe data copy between kernel and user space,8,[],https://github.com/cahirwpz/mimiker/pull/153,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/153#issuecomment-263343798,"This PR adds copyin, copyout, copyinstr, fuword32, suword32 that deal with safe copying of data between user and kernel space.
To show that it actually works user/syscall_test.c was recycled into user/misbehave.c and I fixed a kernel crash on following user code:
assert(write(STDOUT_FILENO, (char *)0xDEADC0DE, 100) == -1);
assert(errno == EFAULT);
The issue is not fully fixed, but all tools are right in place. To detect if an exception happened one must check td_onfault field which stores program counter of failing routine continuation.
@rafalcieslak Please review the code.",@rafalcieslak Is the PR ready to merge in your opinion?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,153,2016-11-28T14:59:34Z,2016-11-28T19:33:49Z,2016-12-10T08:10:42Z,MERGED,True,265,43,16,https://github.com/cahirwpz,Safe data copy between kernel and user space,8,[],https://github.com/cahirwpz/mimiker/pull/153,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/153#issuecomment-263370022,"This PR adds copyin, copyout, copyinstr, fuword32, suword32 that deal with safe copying of data between user and kernel space.
To show that it actually works user/syscall_test.c was recycled into user/misbehave.c and I fixed a kernel crash on following user code:
assert(write(STDOUT_FILENO, (char *)0xDEADC0DE, 100) == -1);
assert(errno == EFAULT);
The issue is not fully fixed, but all tools are right in place. To detect if an exception happened one must check td_onfault field which stores program counter of failing routine continuation.
@rafalcieslak Please review the code.","I tested copyin, copyout and copyinstr with #152 and an even larger testcase set, and everything appears to be working well now.",True,{'THUMBS_UP': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,154,2016-11-28T23:13:59Z,2016-12-01T08:25:50Z,2016-12-01T08:25:50Z,MERGED,True,197,0,8,https://github.com/rafalcieslak,Implemented uiomove (and imported device interface),4,[],https://github.com/cahirwpz/mimiker/pull/154,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/154,"This was indeed straight-forward. I hope this is what you meant!
I imported 8d87530 with very minor changes.
The provided test case verifies that both move directions work, multiple io vectors are supported, as well as offsets.","This was indeed straight-forward. I hope this is what you meant!
I imported 8d87530 with very minor changes.
The provided test case verifies that both move directions work, multiple io vectors are supported, as well as offsets.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,155,2016-11-29T00:15:36Z,2016-11-29T07:17:47Z,2016-11-29T07:17:47Z,MERGED,True,171,2,5,https://github.com/rafalcieslak,File descriptors test,2,[],https://github.com/cahirwpz/mimiker/pull/155,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/155,"Simple user program testing various descriptor features, extracted from #152. Naturally, as for now these tests do not work at all, but - at the point of writing this - #152 passes these tests successfully, so they are probably correct. Luckily the tests are now much easier to read, as I've introduced some convenient macros.","Simple user program testing various descriptor features, extracted from #152. Naturally, as for now these tests do not work at all, but - at the point of writing this - #152 passes these tests successfully, so they are probably correct. Luckily the tests are now much easier to read, as I've introduced some convenient macros.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,157,2016-12-01T23:39:52Z,2016-12-09T14:58:00Z,2016-12-09T14:58:00Z,CLOSED,False,206,0,8,https://github.com/rafalcieslak,"cdev, devfs stubs, /dev/null and /dev/zero",1,[],https://github.com/cahirwpz/mimiker/pull/157,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/157,"I decided that there is no point (yet) in having devfs use its own list of registered devices, for now it looks for cdevs in the list of all allocated character devices. This made devfs stub so simple it's silly.
The next steps will be to add some more devices (uart, kmem), and link devfs with #152.","I decided that there is no point (yet) in having devfs use its own list of registered devices, for now it looks for cdevs in the list of all allocated character devices. This made devfs stub so simple it's silly.
The next steps will be to add some more devices (uart, kmem), and link devfs with #152.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,157,2016-12-01T23:39:52Z,2016-12-09T14:58:00Z,2016-12-09T14:58:00Z,CLOSED,False,206,0,8,https://github.com/rafalcieslak,"cdev, devfs stubs, /dev/null and /dev/zero",1,[],https://github.com/cahirwpz/mimiker/pull/157,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/157#issuecomment-265150074,"I decided that there is no point (yet) in having devfs use its own list of registered devices, for now it looks for cdevs in the list of all allocated character devices. This made devfs stub so simple it's silly.
The next steps will be to add some more devices (uart, kmem), and link devfs with #152.","In FreeBSD, the functions that implement a layer translating from vnode operations to cdev operations are listed here and below. These functions don't do much, but they are not trivial either.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,157,2016-12-01T23:39:52Z,2016-12-09T14:58:00Z,2016-12-09T14:58:00Z,CLOSED,False,206,0,8,https://github.com/rafalcieslak,"cdev, devfs stubs, /dev/null and /dev/zero",1,[],https://github.com/cahirwpz/mimiker/pull/157,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/157#issuecomment-266033086,"I decided that there is no point (yet) in having devfs use its own list of registered devices, for now it looks for cdevs in the list of all allocated character devices. This made devfs stub so simple it's silly.
The next steps will be to add some more devices (uart, kmem), and link devfs with #152.",This branch is superseded by #167.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,158,2016-12-03T20:28:54Z,2016-12-06T14:19:03Z,2016-12-10T08:10:55Z,MERGED,True,145,153,17,https://github.com/cahirwpz,Split kernel startup into two phases,7,[],https://github.com/cahirwpz/mimiker/pull/158,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/158,"This PR fixes various issues with kernel startup phase. Firstly it splits previous kernel_init into platform_init and kernel_init. The former does various hardware dependant initialization steps and creates a thread that will execute kernel_init procedure. The latter does machine independent stuff, runs scheduler and never returns. Secondly makes PCI initialization use regular memory allocator. Thirdly it fixes some mistakes in sw & hw interrupts handling routines.
The outcome of this effort is that tests run with QEMU, which might be of interest to @goniz
EDIT: The intent of this PR is to fix #156","This PR fixes various issues with kernel startup phase. Firstly it splits previous kernel_init into platform_init and kernel_init. The former does various hardware dependant initialization steps and creates a thread that will execute kernel_init procedure. The latter does machine independent stuff, runs scheduler and never returns. Secondly makes PCI initialization use regular memory allocator. Thirdly it fixes some mistakes in sw & hw interrupts handling routines.
The outcome of this effort is that tests run with QEMU, which might be of interest to @goniz
EDIT: The intent of this PR is to fix #156",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,158,2016-12-03T20:28:54Z,2016-12-06T14:19:03Z,2016-12-10T08:10:55Z,MERGED,True,145,153,17,https://github.com/cahirwpz,Split kernel startup into two phases,7,[],https://github.com/cahirwpz/mimiker/pull/158,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/158#issuecomment-264668587,"This PR fixes various issues with kernel startup phase. Firstly it splits previous kernel_init into platform_init and kernel_init. The former does various hardware dependant initialization steps and creates a thread that will execute kernel_init procedure. The latter does machine independent stuff, runs scheduler and never returns. Secondly makes PCI initialization use regular memory allocator. Thirdly it fixes some mistakes in sw & hw interrupts handling routines.
The outcome of this effort is that tests run with QEMU, which might be of interest to @goniz
EDIT: The intent of this PR is to fix #156",@rafalcieslak Please review :),True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,158,2016-12-03T20:28:54Z,2016-12-06T14:19:03Z,2016-12-10T08:10:55Z,MERGED,True,145,153,17,https://github.com/cahirwpz,Split kernel startup into two phases,7,[],https://github.com/cahirwpz/mimiker/pull/158,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/158#issuecomment-265145458,"This PR fixes various issues with kernel startup phase. Firstly it splits previous kernel_init into platform_init and kernel_init. The former does various hardware dependant initialization steps and creates a thread that will execute kernel_init procedure. The latter does machine independent stuff, runs scheduler and never returns. Secondly makes PCI initialization use regular memory allocator. Thirdly it fixes some mistakes in sw & hw interrupts handling routines.
The outcome of this effort is that tests run with QEMU, which might be of interest to @goniz
EDIT: The intent of this PR is to fix #156","Sorry for the delay. These changes look good, I've run all tests under QEMU and they seem to work fine on my end. Since we've already discussed this PR, I don't have more questions or comments.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,160,2016-12-06T14:11:27Z,2016-12-06T14:19:43Z,2016-12-06T14:19:44Z,MERGED,True,7,1,2,https://github.com/rafalcieslak,Fixed .sbss section for user programs,1,[],https://github.com/cahirwpz/mimiker/pull/160,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/160,"When I was repairing the linker script for user programs so that they could use gp correctly, I forgot to add the .sbss section. It is definitely needed to compile some external programs. I've consulted the gcc's default linker script for our platform, so the section layout should be correct.
I've also asked user/Makefile to NOT remove start.o when other targets are complete, so that I can use start.o when linking external programs.","When I was repairing the linker script for user programs so that they could use gp correctly, I forgot to add the .sbss section. It is definitely needed to compile some external programs. I've consulted the gcc's default linker script for our platform, so the section layout should be correct.
I've also asked user/Makefile to NOT remove start.o when other targets are complete, so that I can use start.o when linking external programs.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,163,2016-12-06T20:10:13Z,2016-12-07T07:55:36Z,2016-12-07T07:55:36Z,MERGED,True,2,0,1,https://github.com/rafalcieslak,Minor fix to how C0_STATUS is handled when transitioning from/to user mode,1,[],https://github.com/cahirwpz/mimiker/pull/163,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/163,"Some recent changes made us never actually enter user mode, and completely invalidate C0_STATUS when we leave it.","Some recent changes made us never actually enter user mode, and completely invalidate C0_STATUS when we leave it.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,164,2016-12-07T11:56:59Z,2016-12-07T17:54:11Z,2016-12-07T17:54:11Z,MERGED,True,1,1,1,https://github.com/rafalcieslak,Fix #162,1,[],https://github.com/cahirwpz/mimiker/pull/164,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/164,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,165,2016-12-07T12:18:24Z,2016-12-07T17:55:00Z,2016-12-07T17:55:00Z,MERGED,True,1,0,1,https://github.com/rafalcieslak,Fixed .sbss allignment,1,[],https://github.com/cahirwpz/mimiker/pull/165,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/165,"For some reason the tests I originally used happened to have a page-alligned end of .sdata section, but that's not always the case, and our exec implementation requires the subsequent segment .sbss to be page-alligned.","For some reason the tests I originally used happened to have a page-alligned end of .sdata section, but that's not always the case, and our exec implementation requires the subsequent segment .sbss to be page-alligned.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,166,2016-12-07T13:52:43Z,2016-12-10T17:42:58Z,2016-12-10T17:42:58Z,MERGED,True,33,21,1,https://github.com/rafalcieslak,Fixed indices in tlb_exception_handler,4,[],https://github.com/cahirwpz/mimiker/pull/166,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/166,"The issue I found in tlb_exception_handler is that the PTE validity check:
if (is_valid(pmap->pde[index]) || is_valid(pmap->pde[index + 1])) {
is not accurate. It may happen (and that's probably what I observed in #161) that a mapping created ends at an even page, and some other mapping, created after the first one is accessed, starts at a corresponding odd page.
In that case the PDE will have a valid entry for index, but not for index+1. If we happen to access data that is backed by index+1, then the test quoted above will succeed, because pde[index] is valid. So we end up updating TLB with an invalid entry for index+1, while we should actually call vm_page_fault, to have pde updated.
My proposed solution is to test not whether any of pages in pair has valid entry in pde, but to test whether the one accessed has. In order to do that, I use variable index to store the index of the page accessed, while base_index stores the index rounded down to an even number.
Also, by the way: is tlb_exception_handler the right place to check td->td_onfault? What if copyin/copyout tries to access a valid address that is accessible by the user program, but just happens to be not present in TLB? Shouldn't we check for td->td_onfault iff vm_page_fault fails?","The issue I found in tlb_exception_handler is that the PTE validity check:
if (is_valid(pmap->pde[index]) || is_valid(pmap->pde[index + 1])) {
is not accurate. It may happen (and that's probably what I observed in #161) that a mapping created ends at an even page, and some other mapping, created after the first one is accessed, starts at a corresponding odd page.
In that case the PDE will have a valid entry for index, but not for index+1. If we happen to access data that is backed by index+1, then the test quoted above will succeed, because pde[index] is valid. So we end up updating TLB with an invalid entry for index+1, while we should actually call vm_page_fault, to have pde updated.
My proposed solution is to test not whether any of pages in pair has valid entry in pde, but to test whether the one accessed has. In order to do that, I use variable index to store the index of the page accessed, while base_index stores the index rounded down to an even number.
Also, by the way: is tlb_exception_handler the right place to check td->td_onfault? What if copyin/copyout tries to access a valid address that is accessible by the user program, but just happens to be not present in TLB? Shouldn't we check for td->td_onfault iff vm_page_fault fails?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,166,2016-12-07T13:52:43Z,2016-12-10T17:42:58Z,2016-12-10T17:42:58Z,MERGED,True,33,21,1,https://github.com/rafalcieslak,Fixed indices in tlb_exception_handler,4,[],https://github.com/cahirwpz/mimiker/pull/166,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/166#issuecomment-266213614,"The issue I found in tlb_exception_handler is that the PTE validity check:
if (is_valid(pmap->pde[index]) || is_valid(pmap->pde[index + 1])) {
is not accurate. It may happen (and that's probably what I observed in #161) that a mapping created ends at an even page, and some other mapping, created after the first one is accessed, starts at a corresponding odd page.
In that case the PDE will have a valid entry for index, but not for index+1. If we happen to access data that is backed by index+1, then the test quoted above will succeed, because pde[index] is valid. So we end up updating TLB with an invalid entry for index+1, while we should actually call vm_page_fault, to have pde updated.
My proposed solution is to test not whether any of pages in pair has valid entry in pde, but to test whether the one accessed has. In order to do that, I use variable index to store the index of the page accessed, while base_index stores the index rounded down to an even number.
Also, by the way: is tlb_exception_handler the right place to check td->td_onfault? What if copyin/copyout tries to access a valid address that is accessible by the user program, but just happens to be not present in TLB? Shouldn't we check for td->td_onfault iff vm_page_fault fails?","There's something wrong with exec and I cannot successfully run exec_misbehave.elf test:
[pmap.c:186] Add mapping for page 00408000 (PTE at c0001020)
[exec.c:132] Processing a PT_LOAD segment: VirtAddr = 0x407020, Offset = 0x00008020, FileSiz = 0x00000000, MemSiz = 0x0000001c, Flags = 6
[exec.c:134] Exec failed: Segment p_vaddr is not page alligned

Please note that proper spelling is aligned not alligned!",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,166,2016-12-07T13:52:43Z,2016-12-10T17:42:58Z,2016-12-10T17:42:58Z,MERGED,True,33,21,1,https://github.com/rafalcieslak,Fixed indices in tlb_exception_handler,4,[],https://github.com/cahirwpz/mimiker/pull/166,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/166#issuecomment-266213780,"The issue I found in tlb_exception_handler is that the PTE validity check:
if (is_valid(pmap->pde[index]) || is_valid(pmap->pde[index + 1])) {
is not accurate. It may happen (and that's probably what I observed in #161) that a mapping created ends at an even page, and some other mapping, created after the first one is accessed, starts at a corresponding odd page.
In that case the PDE will have a valid entry for index, but not for index+1. If we happen to access data that is backed by index+1, then the test quoted above will succeed, because pde[index] is valid. So we end up updating TLB with an invalid entry for index+1, while we should actually call vm_page_fault, to have pde updated.
My proposed solution is to test not whether any of pages in pair has valid entry in pde, but to test whether the one accessed has. In order to do that, I use variable index to store the index of the page accessed, while base_index stores the index rounded down to an even number.
Also, by the way: is tlb_exception_handler the right place to check td->td_onfault? What if copyin/copyout tries to access a valid address that is accessible by the user program, but just happens to be not present in TLB? Shouldn't we check for td->td_onfault iff vm_page_fault fails?",I think that was fixed by 7e9b8bf in master.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,166,2016-12-07T13:52:43Z,2016-12-10T17:42:58Z,2016-12-10T17:42:58Z,MERGED,True,33,21,1,https://github.com/rafalcieslak,Fixed indices in tlb_exception_handler,4,[],https://github.com/cahirwpz/mimiker/pull/166,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/166#issuecomment-266214397,"The issue I found in tlb_exception_handler is that the PTE validity check:
if (is_valid(pmap->pde[index]) || is_valid(pmap->pde[index + 1])) {
is not accurate. It may happen (and that's probably what I observed in #161) that a mapping created ends at an even page, and some other mapping, created after the first one is accessed, starts at a corresponding odd page.
In that case the PDE will have a valid entry for index, but not for index+1. If we happen to access data that is backed by index+1, then the test quoted above will succeed, because pde[index] is valid. So we end up updating TLB with an invalid entry for index+1, while we should actually call vm_page_fault, to have pde updated.
My proposed solution is to test not whether any of pages in pair has valid entry in pde, but to test whether the one accessed has. In order to do that, I use variable index to store the index of the page accessed, while base_index stores the index rounded down to an even number.
Also, by the way: is tlb_exception_handler the right place to check td->td_onfault? What if copyin/copyout tries to access a valid address that is accessible by the user program, but just happens to be not present in TLB? Shouldn't we check for td->td_onfault iff vm_page_fault fails?","Apparently it did not solve the problem, the binary is still failing, though git history says:
2016-12-10 15:43 Krystian Bacławski     o [fix_tlb_pmap_indices2] {origin/fix_tlb_pmap_indices2} Handle copyin/copyout fault if everything else failed.
2016-12-07 15:01 Rafał Cieślak          o Renamed indices in tlb_exception_handler
2016-12-07 14:41 Rafał Cieślak          o Fixed indices in tlb_exception_handler
2016-12-07 08:55 Rafał Cieślak          o Fix C0_STATUS handling on transitioning from/to user mode (#163)
2016-12-06 15:19 Rafał Cieślak          o Fixed .sbss section for user programs (#160)",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,166,2016-12-07T13:52:43Z,2016-12-10T17:42:58Z,2016-12-10T17:42:58Z,MERGED,True,33,21,1,https://github.com/rafalcieslak,Fixed indices in tlb_exception_handler,4,[],https://github.com/cahirwpz/mimiker/pull/166,https://github.com/rafalcieslak,5,https://github.com/cahirwpz/mimiker/pull/166#issuecomment-266214903,"The issue I found in tlb_exception_handler is that the PTE validity check:
if (is_valid(pmap->pde[index]) || is_valid(pmap->pde[index + 1])) {
is not accurate. It may happen (and that's probably what I observed in #161) that a mapping created ends at an even page, and some other mapping, created after the first one is accessed, starts at a corresponding odd page.
In that case the PDE will have a valid entry for index, but not for index+1. If we happen to access data that is backed by index+1, then the test quoted above will succeed, because pde[index] is valid. So we end up updating TLB with an invalid entry for index+1, while we should actually call vm_page_fault, to have pde updated.
My proposed solution is to test not whether any of pages in pair has valid entry in pde, but to test whether the one accessed has. In order to do that, I use variable index to store the index of the page accessed, while base_index stores the index rounded down to an even number.
Also, by the way: is tlb_exception_handler the right place to check td->td_onfault? What if copyin/copyout tries to access a valid address that is accessible by the user program, but just happens to be not present in TLB? Shouldn't we check for td->td_onfault iff vm_page_fault fails?","I cannot reproduce this bug. I tested this branch in a new, clean working directory, and misbehave runs correctly.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,166,2016-12-07T13:52:43Z,2016-12-10T17:42:58Z,2016-12-10T17:42:58Z,MERGED,True,33,21,1,https://github.com/rafalcieslak,Fixed indices in tlb_exception_handler,4,[],https://github.com/cahirwpz/mimiker/pull/166,https://github.com/rafalcieslak,6,https://github.com/cahirwpz/mimiker/pull/166#issuecomment-266214974,"The issue I found in tlb_exception_handler is that the PTE validity check:
if (is_valid(pmap->pde[index]) || is_valid(pmap->pde[index + 1])) {
is not accurate. It may happen (and that's probably what I observed in #161) that a mapping created ends at an even page, and some other mapping, created after the first one is accessed, starts at a corresponding odd page.
In that case the PDE will have a valid entry for index, but not for index+1. If we happen to access data that is backed by index+1, then the test quoted above will succeed, because pde[index] is valid. So we end up updating TLB with an invalid entry for index+1, while we should actually call vm_page_fault, to have pde updated.
My proposed solution is to test not whether any of pages in pair has valid entry in pde, but to test whether the one accessed has. In order to do that, I use variable index to store the index of the page accessed, while base_index stores the index rounded down to an even number.
Also, by the way: is tlb_exception_handler the right place to check td->td_onfault? What if copyin/copyout tries to access a valid address that is accessible by the user program, but just happens to be not present in TLB? Shouldn't we check for td->td_onfault iff vm_page_fault fails?","I've merged from master, to pull in the changes to the ./user build rules - maybe you have some intermediate build files left from another branch?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,166,2016-12-07T13:52:43Z,2016-12-10T17:42:58Z,2016-12-10T17:42:58Z,MERGED,True,33,21,1,https://github.com/rafalcieslak,Fixed indices in tlb_exception_handler,4,[],https://github.com/cahirwpz/mimiker/pull/166,https://github.com/cahirwpz,7,https://github.com/cahirwpz/mimiker/pull/166#issuecomment-266216173,"The issue I found in tlb_exception_handler is that the PTE validity check:
if (is_valid(pmap->pde[index]) || is_valid(pmap->pde[index + 1])) {
is not accurate. It may happen (and that's probably what I observed in #161) that a mapping created ends at an even page, and some other mapping, created after the first one is accessed, starts at a corresponding odd page.
In that case the PDE will have a valid entry for index, but not for index+1. If we happen to access data that is backed by index+1, then the test quoted above will succeed, because pde[index] is valid. So we end up updating TLB with an invalid entry for index+1, while we should actually call vm_page_fault, to have pde updated.
My proposed solution is to test not whether any of pages in pair has valid entry in pde, but to test whether the one accessed has. In order to do that, I use variable index to store the index of the page accessed, while base_index stores the index rounded down to an even number.
Also, by the way: is tlb_exception_handler the right place to check td->td_onfault? What if copyin/copyout tries to access a valid address that is accessible by the user program, but just happens to be not present in TLB? Shouldn't we check for td->td_onfault iff vm_page_fault fails?","Your last commit (merge) did the trick, thanks!",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,167,2016-12-09T01:26:34Z,2016-12-11T17:52:09Z,2016-12-11T17:52:09Z,MERGED,True,828,17,14,https://github.com/rafalcieslak,Initial VFS interface,23,[],https://github.com/cahirwpz/mimiker/pull/167,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/167,"I wrote down the interface we discussed today. I've also gave a closer look at how these mechanisms cooperate in FreeBSD, and I am now pretty confident to how it works overall.
This branch is not complete, I created this PR just to share the interface ASAP. There will be no way to test this branch until I re-implement devfs using this new interface, which I hope to do soon - so this branch will progressively grow bigger with new features - but you can ask me to stop at any point. In particular, I will probably need to reimplement file_t in a fashion pretty much identical to #152 (or maybe I can avoid this, temporarily, by not returning a user-accessible file from VOP_OPEN).
I also hope that by providing this very basic implementation I may help others understand the core mechanics of filesystems and mounting.","I wrote down the interface we discussed today. I've also gave a closer look at how these mechanisms cooperate in FreeBSD, and I am now pretty confident to how it works overall.
This branch is not complete, I created this PR just to share the interface ASAP. There will be no way to test this branch until I re-implement devfs using this new interface, which I hope to do soon - so this branch will progressively grow bigger with new features - but you can ask me to stop at any point. In particular, I will probably need to reimplement file_t in a fashion pretty much identical to #152 (or maybe I can avoid this, temporarily, by not returning a user-accessible file from VOP_OPEN).
I also hope that by providing this very basic implementation I may help others understand the core mechanics of filesystems and mounting.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,167,2016-12-09T01:26:34Z,2016-12-11T17:52:09Z,2016-12-11T17:52:09Z,MERGED,True,828,17,14,https://github.com/rafalcieslak,Initial VFS interface,23,[],https://github.com/cahirwpz/mimiker/pull/167,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/167#issuecomment-266035924,"I wrote down the interface we discussed today. I've also gave a closer look at how these mechanisms cooperate in FreeBSD, and I am now pretty confident to how it works overall.
This branch is not complete, I created this PR just to share the interface ASAP. There will be no way to test this branch until I re-implement devfs using this new interface, which I hope to do soon - so this branch will progressively grow bigger with new features - but you can ask me to stop at any point. In particular, I will probably need to reimplement file_t in a fashion pretty much identical to #152 (or maybe I can avoid this, temporarily, by not returning a user-accessible file from VOP_OPEN).
I also hope that by providing this very basic implementation I may help others understand the core mechanics of filesystems and mounting.","This is taking a nice shape! And it took much less effort to get this working than I anticipated, apparently the research we did yesterday was on point.
At this point there is a filesystem-type interface present, a single filesystem type devfs is implemented and it gets registered during startup. Later, an instance of devfs gets mounted on /dev. Currently /dev provides two device implementations, namely zero and null. These are accessible by their path, as vfs_lookup translates a pathname into the underlying vnode, taking care of filesystem boundaries (see ./vfs.c for example access).
zero and null may be written to and read from as vnode ops, but they do not support open operation - it will only be useful for #152, so I suggest we implement it later. Also none of vnodes I provided implement readdir, it's also unnecessary at this moment.
I'm seriously considering implementing a embedfs file system type - for the files we embed in kernel image, just to demonstrate filesystem type diversity. However, I don't want to inflate this branch.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,167,2016-12-09T01:26:34Z,2016-12-11T17:52:09Z,2016-12-11T17:52:09Z,MERGED,True,828,17,14,https://github.com/rafalcieslak,Initial VFS interface,23,[],https://github.com/cahirwpz/mimiker/pull/167,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/167#issuecomment-266218165,"I wrote down the interface we discussed today. I've also gave a closer look at how these mechanisms cooperate in FreeBSD, and I am now pretty confident to how it works overall.
This branch is not complete, I created this PR just to share the interface ASAP. There will be no way to test this branch until I re-implement devfs using this new interface, which I hope to do soon - so this branch will progressively grow bigger with new features - but you can ask me to stop at any point. In particular, I will probably need to reimplement file_t in a fashion pretty much identical to #152 (or maybe I can avoid this, temporarily, by not returning a user-accessible file from VOP_OPEN).
I also hope that by providing this very basic implementation I may help others understand the core mechanics of filesystems and mounting.","For the record, I also have a working /dev/uart, but I am not adding it to this branch (unless you ask me to) to keep this PR small.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,167,2016-12-09T01:26:34Z,2016-12-11T17:52:09Z,2016-12-11T17:52:09Z,MERGED,True,828,17,14,https://github.com/rafalcieslak,Initial VFS interface,23,[],https://github.com/cahirwpz/mimiker/pull/167,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/167#issuecomment-266291989,"I wrote down the interface we discussed today. I've also gave a closer look at how these mechanisms cooperate in FreeBSD, and I am now pretty confident to how it works overall.
This branch is not complete, I created this PR just to share the interface ASAP. There will be no way to test this branch until I re-implement devfs using this new interface, which I hope to do soon - so this branch will progressively grow bigger with new features - but you can ask me to stop at any point. In particular, I will probably need to reimplement file_t in a fashion pretty much identical to #152 (or maybe I can avoid this, temporarily, by not returning a user-accessible file from VOP_OPEN).
I also hope that by providing this very basic implementation I may help others understand the core mechanics of filesystems and mounting.","If you don't find my last commit disturbing, I'm ready to accept the PR.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,167,2016-12-09T01:26:34Z,2016-12-11T17:52:09Z,2016-12-11T17:52:09Z,MERGED,True,828,17,14,https://github.com/rafalcieslak,Initial VFS interface,23,[],https://github.com/cahirwpz/mimiker/pull/167,https://github.com/rafalcieslak,5,https://github.com/cahirwpz/mimiker/pull/167#issuecomment-266293409,"I wrote down the interface we discussed today. I've also gave a closer look at how these mechanisms cooperate in FreeBSD, and I am now pretty confident to how it works overall.
This branch is not complete, I created this PR just to share the interface ASAP. There will be no way to test this branch until I re-implement devfs using this new interface, which I hope to do soon - so this branch will progressively grow bigger with new features - but you can ask me to stop at any point. In particular, I will probably need to reimplement file_t in a fashion pretty much identical to #152 (or maybe I can avoid this, temporarily, by not returning a user-accessible file from VOP_OPEN).
I also hope that by providing this very basic implementation I may help others understand the core mechanics of filesystems and mounting.",Looks good! One detail though: can we have a comment in vnode_unref stating that (or why) we're not freeing vnodes yet - just so that it wouldn't confuse other readers (or us in the future)?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,169,2016-12-09T21:42:30Z,2016-12-10T11:10:22Z,2016-12-10T11:10:22Z,MERGED,True,76,30,9,https://github.com/rafalcieslak,Cleaned up user program build process,2,[],https://github.com/cahirwpz/mimiker/pull/169,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/169,"I decided to simplify the way user programs are build. I reorganized the ./user directory, so that each usermode program now lives in a separate subdirectory. This way, in order to add a new program (or test a third-party one), you just need to add a new subdirectory to ./user/ - no need to edit ./user/Makefile. Usermode programs may provide their own Makefile, or may use the common template from ./user/Makefile.usercommon.","I decided to simplify the way user programs are build. I reorganized the ./user directory, so that each usermode program now lives in a separate subdirectory. This way, in order to add a new program (or test a third-party one), you just need to add a new subdirectory to ./user/ - no need to edit ./user/Makefile. Usermode programs may provide their own Makefile, or may use the common template from ./user/Makefile.usercommon.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,170,2016-12-09T23:58:27Z,2016-12-10T10:55:17Z,2016-12-10T11:35:32Z,MERGED,True,71,9,5,https://github.com/rafalcieslak,Linker sets,3,[],https://github.com/cahirwpz/mimiker/pull/170,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/170,"Very simple and straightforward implementation of linker sets, based on DragonFly BSD.
ref: #168","Very simple and straightforward implementation of linker sets, based on DragonFly BSD.
ref: #168",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,170,2016-12-09T23:58:27Z,2016-12-10T10:55:17Z,2016-12-10T11:35:32Z,MERGED,True,71,9,5,https://github.com/rafalcieslak,Linker sets,3,[],https://github.com/cahirwpz/mimiker/pull/170,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/170#issuecomment-266191812,"Very simple and straightforward implementation of linker sets, based on DragonFly BSD.
ref: #168",Please investigate header dependency issue. Otherwise the PR is ready for merge.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,170,2016-12-09T23:58:27Z,2016-12-10T10:55:17Z,2016-12-10T11:35:32Z,MERGED,True,71,9,5,https://github.com/rafalcieslak,Linker sets,3,[],https://github.com/cahirwpz/mimiker/pull/170,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/170#issuecomment-266201803,"Very simple and straightforward implementation of linker sets, based on DragonFly BSD.
ref: #168","I think the reason is pretty obvious: we do not generate dependency data for test sources. The tests only depend on lib{mips,sys,stdc}.a, and are rebuild when any of these subcomponents changes - so as long as ./linkerset.c is the only user of ./include/linker_set.h, touching the header will not rebuild the test, but once we start using that header anywhere in sys, the test will start rebuilding correctly. We might start emitting dep rules for test sources, but I don't think this is a big issue.
EDIT: I see you fixed that already, and it required much less work than I anticipated - cool!",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,171,2016-12-10T11:14:58Z,2016-12-10T11:21:09Z,2016-12-10T11:56:33Z,MERGED,True,3,0,1,https://github.com/lynxD,Add .swp files to .gitignore,1,[],https://github.com/cahirwpz/mimiker/pull/171,https://github.com/lynxD,1,https://github.com/cahirwpz/mimiker/pull/171,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,172,2016-12-10T12:38:10Z,2016-12-10T13:14:14Z,2016-12-10T13:14:14Z,MERGED,True,58,74,23,https://github.com/rafalcieslak,Moved test sources to ./tests subdirectory,3,[],https://github.com/cahirwpz/mimiker/pull/172,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/172,"We've been trying to do that for some time already - I decided to investigate, and here's my solution.
What's cool about this change is that it happens to significantly simplify our makefiles! The root ./Makefile no longer deals with any sources, and does not require meta-programming anymore. Test building in ./tests/ follows ./Makefile.common. The root directory is not longer cluttered.
I've also fixed various bugs in Makefiles - in particular, I took the chance to (again) get parallelized builds to work - we're having more and more source files so running make with -j starts bringing benefits. Supporting -j builds requires carefully specified dependencies and build order, so I fixed the parts where we were wrong.
@coodie, I know you've given up working on this a long while ago, so you may be interested in how I did this.","We've been trying to do that for some time already - I decided to investigate, and here's my solution.
What's cool about this change is that it happens to significantly simplify our makefiles! The root ./Makefile no longer deals with any sources, and does not require meta-programming anymore. Test building in ./tests/ follows ./Makefile.common. The root directory is not longer cluttered.
I've also fixed various bugs in Makefiles - in particular, I took the chance to (again) get parallelized builds to work - we're having more and more source files so running make with -j starts bringing benefits. Supporting -j builds requires carefully specified dependencies and build order, so I fixed the parts where we were wrong.
@coodie, I know you've given up working on this a long while ago, so you may be interested in how I did this.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,172,2016-12-10T12:38:10Z,2016-12-10T13:14:14Z,2016-12-10T13:14:14Z,MERGED,True,58,74,23,https://github.com/rafalcieslak,Moved test sources to ./tests subdirectory,3,[],https://github.com/cahirwpz/mimiker/pull/172,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/172#issuecomment-266206158,"We've been trying to do that for some time already - I decided to investigate, and here's my solution.
What's cool about this change is that it happens to significantly simplify our makefiles! The root ./Makefile no longer deals with any sources, and does not require meta-programming anymore. Test building in ./tests/ follows ./Makefile.common. The root directory is not longer cluttered.
I've also fixed various bugs in Makefiles - in particular, I took the chance to (again) get parallelized builds to work - we're having more and more source files so running make with -j starts bringing benefits. Supporting -j builds requires carefully specified dependencies and build order, so I fixed the parts where we were wrong.
@coodie, I know you've given up working on this a long while ago, so you may be interested in how I did this.",Please move $(TOPDIR)/malta.ld to $(TOPDIR)/mips/malta.ld as well.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,173,2016-12-10T13:34:43Z,2016-12-11T14:23:57Z,2016-12-11T14:23:57Z,MERGED,True,16,12,3,https://github.com/rafalcieslak,Fixed exec arg alignment and argv[0],2,[],https://github.com/cahirwpz/mimiker/pull/173,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/173,"Fixed arguments in ./exec.c so that we follow the convention of passing the program name as the first argument.
Fixed alignment of arguments on the program stack when the number of arguments is even.","Fixed arguments in ./exec.c so that we follow the convention of passing the program name as the first argument.
Fixed alignment of arguments on the program stack when the number of arguments is even.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,173,2016-12-10T13:34:43Z,2016-12-11T14:23:57Z,2016-12-11T14:23:57Z,MERGED,True,16,12,3,https://github.com/rafalcieslak,Fixed exec arg alignment and argv[0],2,[],https://github.com/cahirwpz/mimiker/pull/173,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/173#issuecomment-266210520,"Fixed arguments in ./exec.c so that we follow the convention of passing the program name as the first argument.
Fixed alignment of arguments on the program stack when the number of arguments is even.",Does it make sense to leave only machine dependent bits in mips/stack.c and preprare initial program stack in machine independent manner? Please have a look at #102,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,173,2016-12-10T13:34:43Z,2016-12-11T14:23:57Z,2016-12-11T14:23:57Z,MERGED,True,16,12,3,https://github.com/rafalcieslak,Fixed exec arg alignment and argv[0],2,[],https://github.com/cahirwpz/mimiker/pull/173,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/173#issuecomment-266210961,"Fixed arguments in ./exec.c so that we follow the convention of passing the program name as the first argument.
Fixed alignment of arguments on the program stack when the number of arguments is even.","I'm worried this may bring little benefit. The problem I see is that we need to know all arguments in advance, to correctly figure out where to place the first argument. Therefore such call_add_argument (at least the MIPS variant) wouldn't do anything besides storing the argument, and call_finalize would do exactly everything prepare_program_stack does now.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,173,2016-12-10T13:34:43Z,2016-12-11T14:23:57Z,2016-12-11T14:23:57Z,MERGED,True,16,12,3,https://github.com/rafalcieslak,Fixed exec arg alignment and argv[0],2,[],https://github.com/cahirwpz/mimiker/pull/173,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/173#issuecomment-266211225,"Fixed arguments in ./exec.c so that we follow the convention of passing the program name as the first argument.
Fixed alignment of arguments on the program stack when the number of arguments is even.","What about a machine dependent routine that knows how to put a (1) string, (2) pointer, (3) integer onto the stack ?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,174,2016-12-10T14:10:42Z,2016-12-10T14:40:38Z,2016-12-10T14:40:38Z,MERGED,True,1,1,1,https://github.com/lynxD,Clean hidden files as well,2,[],https://github.com/cahirwpz/mimiker/pull/174,https://github.com/lynxD,1,https://github.com/cahirwpz/mimiker/pull/174,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,175,2016-12-10T14:30:28Z,2016-12-10T14:39:49Z,2016-12-10T14:39:49Z,MERGED,True,1,1,1,https://github.com/rafalcieslak,Fixed missing rependency *.elf: KRT,1,[],https://github.com/cahirwpz/mimiker/pull/175,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/175,"We lost this dependency at some point. Without it everything builds just fine, but touching a file in, say, ./sys did not cause the tests to rebuild.","We lost this dependency at some point. Without it everything builds just fine, but touching a file in, say, ./sys did not cause the tests to rebuild.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,176,2016-12-10T20:41:44Z,2017-01-16T14:52:18Z,2017-01-16T14:53:00Z,MERGED,True,76,67,11,https://github.com/cahirwpz,"Simplify mutex implementation, add recursive capability.",7,[],https://github.com/cahirwpz/mimiker/pull/176,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/176,"@rafalcieslak, @coodie Please review.
I've noticed some locking patterns while reviewing #167 that made me wondering if it's right time to add recursive mutexes. This is my first attempt. I've completely got rid of atomic_cmp_exchange  as we run whole OS on single core - critical section will do for now.","@rafalcieslak, @coodie Please review.
I've noticed some locking patterns while reviewing #167 that made me wondering if it's right time to add recursive mutexes. This is my first attempt. I've completely got rid of atomic_cmp_exchange  as we run whole OS on single core - critical section will do for now.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,176,2016-12-10T20:41:44Z,2017-01-16T14:52:18Z,2017-01-16T14:53:00Z,MERGED,True,76,67,11,https://github.com/cahirwpz,"Simplify mutex implementation, add recursive capability.",7,[],https://github.com/cahirwpz/mimiker/pull/176,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/176#issuecomment-266244691,"@rafalcieslak, @coodie Please review.
I've noticed some locking patterns while reviewing #167 that made me wondering if it's right time to add recursive mutexes. This is my first attempt. I've completely got rid of atomic_cmp_exchange  as we run whole OS on single core - critical section will do for now.","This looks good to me, but I'm not the right person to review this. I know you've spend a very long time with @coodie polishing mutex implementation, so replacing it with a major rewrite without reviewing it just as hard as the previous version would invalidate your efforts. But let's wait for @coodie's input on this.
As a side-note, can we keep the mtx_islocked? In some operations I would prefer to assert(mtx_islocked) instead of locking recursively. For example, anyone who calls vnode_hold (from #167) will want to modify the vnode, so by using such assertion in vnode_hold we make it much less likely to accidentally forget locking the mutex. This assertion is a common pattern in FreeBSD, and is used to ensure that the caller remembered to lock the appropriate mutex.
Also my suggestion is that in case this PR takes a longer while to review properly (EDIT: I know @coodie won't be able to take a detailed look at this for a few more days), we shouldn't wait for it to get merged in order to work on #167. The impact of recursive mutices on #167 is quite low, can be easily added at any time, and we'll have to correct the way we use locks in the entire source anyway.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,177,2016-12-11T23:12:05Z,2016-12-12T07:26:08Z,2016-12-12T07:26:08Z,MERGED,True,60,0,3,https://github.com/rafalcieslak,Basic /dev/uart stub,2,[],https://github.com/cahirwpz/mimiker/pull/177,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/177,"Here's a quick implementation of a /dev/uart device. We need it because #152 makes user programs unable to output any text - and using a /dev/uart for fds 1 and 2 will be a good workaround (until we have terminal support...).
I did not implement reading from UART, because it is not as crucial at the moment, and we need to discuss poll behavior beforehand.
Also (especially for those, who did not follow VFS development), this PR demonstrates how simple it is to implement new devices using the interface we have. Of particular note is SET_ENTRY at the end of dev_uart.c which uses linker set to have init_dev_uart called when devfs starts, without modifying devfs sources.","Here's a quick implementation of a /dev/uart device. We need it because #152 makes user programs unable to output any text - and using a /dev/uart for fds 1 and 2 will be a good workaround (until we have terminal support...).
I did not implement reading from UART, because it is not as crucial at the moment, and we need to discuss poll behavior beforehand.
Also (especially for those, who did not follow VFS development), this PR demonstrates how simple it is to implement new devices using the interface we have. Of particular note is SET_ENTRY at the end of dev_uart.c which uses linker set to have init_dev_uart called when devfs starts, without modifying devfs sources.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,178,2016-12-11T23:35:56Z,2016-12-12T07:33:37Z,2016-12-12T07:33:37Z,MERGED,True,29,22,5,https://github.com/rafalcieslak,Filesystem type registration with a linker set,2,[],https://github.com/cahirwpz/mimiker/pull/178,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/178,"This branch introduces a linker set which gathers all filesystem types implemented in the kernel. It also uses vfs_init the way it was intended to be used.
Naturally, this is useful for implementing new file systems, if anybody, hypothetically, would like to do that.","This branch introduces a linker set which gathers all filesystem types implemented in the kernel. It also uses vfs_init the way it was intended to be used.
Naturally, this is useful for implementing new file systems, if anybody, hypothetically, would like to do that.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,179,2016-12-12T01:04:53Z,2017-04-13T10:26:33Z,2017-04-13T10:26:33Z,CLOSED,False,219,5,10,https://github.com/rafalcieslak,embedfs,6,[],https://github.com/cahirwpz/mimiker/pull/179,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/179,"WARNING: This branch uses #178 as a prerequisite, and therefore it pulls all changes introduced by #178. It will wait until #178 is merged.
To go in pair with #177, this branch demonstrates what does it take to implement a new filesystem type! This one is not particularly sophisticated, it only implements read and comes with no directories - but the implementation is very easy to follow.
This file system provides convenient access to files embedded in the kernel image. We currently use this mechanism for exposing user programs to exec. This branch makes such data accessible as read-only files residing in /embed. Adding a new embedded file requires adding it's corresponding *.eo to LD_EMBED in Makefile.common, and declaring anywhere in a source file:
EMBED_FILE(""filename.xyz"", filename_binary)
where filename_binary is the symbol linker used for marking the file. Such file can be then accessed as a vnode with a vfs_lookup(""/embed/filename.xyz"", &v).
We haven't discussed this proposal much, so I don't know if we even want to merge such filesystem. I reckon it will be quite useful to have some data in the filesystem before we have a working ramdisk. We may want to link exec with embedfs later on, so that it uses VFS to access program .elf images!
Regardless of whether we're interested in applying this PR or not, I will be using this filesystem for my own experiments, and it serves as a nice demo of what we've been working on during the weekend.","WARNING: This branch uses #178 as a prerequisite, and therefore it pulls all changes introduced by #178. It will wait until #178 is merged.
To go in pair with #177, this branch demonstrates what does it take to implement a new filesystem type! This one is not particularly sophisticated, it only implements read and comes with no directories - but the implementation is very easy to follow.
This file system provides convenient access to files embedded in the kernel image. We currently use this mechanism for exposing user programs to exec. This branch makes such data accessible as read-only files residing in /embed. Adding a new embedded file requires adding it's corresponding *.eo to LD_EMBED in Makefile.common, and declaring anywhere in a source file:
EMBED_FILE(""filename.xyz"", filename_binary)
where filename_binary is the symbol linker used for marking the file. Such file can be then accessed as a vnode with a vfs_lookup(""/embed/filename.xyz"", &v).
We haven't discussed this proposal much, so I don't know if we even want to merge such filesystem. I reckon it will be quite useful to have some data in the filesystem before we have a working ramdisk. We may want to link exec with embedfs later on, so that it uses VFS to access program .elf images!
Regardless of whether we're interested in applying this PR or not, I will be using this filesystem for my own experiments, and it serves as a nice demo of what we've been working on during the weekend.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,179,2016-12-12T01:04:53Z,2017-04-13T10:26:33Z,2017-04-13T10:26:33Z,CLOSED,False,219,5,10,https://github.com/rafalcieslak,embedfs,6,[],https://github.com/cahirwpz/mimiker/pull/179,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/179#issuecomment-293852159,"WARNING: This branch uses #178 as a prerequisite, and therefore it pulls all changes introduced by #178. It will wait until #178 is merged.
To go in pair with #177, this branch demonstrates what does it take to implement a new filesystem type! This one is not particularly sophisticated, it only implements read and comes with no directories - but the implementation is very easy to follow.
This file system provides convenient access to files embedded in the kernel image. We currently use this mechanism for exposing user programs to exec. This branch makes such data accessible as read-only files residing in /embed. Adding a new embedded file requires adding it's corresponding *.eo to LD_EMBED in Makefile.common, and declaring anywhere in a source file:
EMBED_FILE(""filename.xyz"", filename_binary)
where filename_binary is the symbol linker used for marking the file. Such file can be then accessed as a vnode with a vfs_lookup(""/embed/filename.xyz"", &v).
We haven't discussed this proposal much, so I don't know if we even want to merge such filesystem. I reckon it will be quite useful to have some data in the filesystem before we have a working ramdisk. We may want to link exec with embedfs later on, so that it uses VFS to access program .elf images!
Regardless of whether we're interested in applying this PR or not, I will be using this filesystem for my own experiments, and it serves as a nice demo of what we've been working on during the weekend.","With cpio support in place, this branch is no longer relevant or useful.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,180,2016-12-12T19:50:30Z,2016-12-12T20:08:42Z,2016-12-12T20:08:42Z,MERGED,True,21,15,10,https://github.com/rafalcieslak,Various fixes extracted from #152,1,[],https://github.com/cahirwpz/mimiker/pull/180,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/180,"Per your request, I've extracted from #152 as much as possible.","Per your request, I've extracted from #152 as much as possible.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,181,2016-12-15T14:15:02Z,2016-12-16T16:59:45Z,2016-12-18T17:07:49Z,MERGED,True,240,108,13,https://github.com/czapiga,"Changes to: cond_var, sleepq, tests",3,[],https://github.com/cahirwpz/mimiker/pull/181,https://github.com/czapiga,1,https://github.com/cahirwpz/mimiker/pull/181,"sleepq interface and implementation changes
added condition variables interface and implementation
added producer_consumer test
removed old sleepq test","sleepq interface and implementation changes
added condition variables interface and implementation
added producer_consumer test
removed old sleepq test",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,181,2016-12-15T14:15:02Z,2016-12-16T16:59:45Z,2016-12-18T17:07:49Z,MERGED,True,240,108,13,https://github.com/czapiga,"Changes to: cond_var, sleepq, tests",3,[],https://github.com/cahirwpz/mimiker/pull/181,https://github.com/czapiga,2,https://github.com/cahirwpz/mimiker/pull/181#issuecomment-267412579,"sleepq interface and implementation changes
added condition variables interface and implementation
added producer_consumer test
removed old sleepq test",Seems like our hiding of condvar struct implementation didn't go so well,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,182,2016-12-18T17:23:41Z,2017-01-04T10:42:40Z,2017-01-04T10:42:40Z,MERGED,True,370,233,10,https://github.com/czapiga,strtol,2,[],https://github.com/cahirwpz/mimiker/pull/182,https://github.com/czapiga,1,https://github.com/cahirwpz/mimiker/pull/182,"Added ctype includes, strtol implementation and test","Added ctype includes, strtol implementation and test",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,183,2016-12-19T00:51:21Z,2017-01-04T17:31:12Z,2017-01-04T17:31:15Z,CLOSED,False,97,67,6,https://github.com/coodie,Add initrd section to linker script,1,[],https://github.com/cahirwpz/mimiker/pull/183,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/183,"There are few problems with the way the OVPSim maps initial ramdisk to kernel space. Looking at the code of SmartLoader, initial ramdisk is always placed at the end of .data - or in general at the last section with PT_LOAD attribute. We could probably hack around and try to place ramdisk behind .bss section, and this could be easily done with setting .bss to PT_LOAD, but we don't want to do that.
There are few solutions I could come up with to this problem:

Copy ramdisk to other place before .bss is zeroed. This is a little bit more difficult.
Maybe PT_LOAD .bss isn't that bad at all.
Add non-PT_LOAD section containing fixed amount of space for ramdisk. This isn't that bad for now, because we won't need big ramdisks for some time probably, it is extremly easy to add and requires no changes to existing code.","There are few problems with the way the OVPSim maps initial ramdisk to kernel space. Looking at the code of SmartLoader, initial ramdisk is always placed at the end of .data - or in general at the last section with PT_LOAD attribute. We could probably hack around and try to place ramdisk behind .bss section, and this could be easily done with setting .bss to PT_LOAD, but we don't want to do that.
There are few solutions I could come up with to this problem:

Copy ramdisk to other place before .bss is zeroed. This is a little bit more difficult.
Maybe PT_LOAD .bss isn't that bad at all.
Add non-PT_LOAD section containing fixed amount of space for ramdisk. This isn't that bad for now, because we won't need big ramdisks for some time probably, it is extremly easy to add and requires no changes to existing code.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,183,2016-12-19T00:51:21Z,2017-01-04T17:31:12Z,2017-01-04T17:31:15Z,CLOSED,False,97,67,6,https://github.com/coodie,Add initrd section to linker script,1,[],https://github.com/cahirwpz/mimiker/pull/183,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/183#issuecomment-268184909,"There are few problems with the way the OVPSim maps initial ramdisk to kernel space. Looking at the code of SmartLoader, initial ramdisk is always placed at the end of .data - or in general at the last section with PT_LOAD attribute. We could probably hack around and try to place ramdisk behind .bss section, and this could be easily done with setting .bss to PT_LOAD, but we don't want to do that.
There are few solutions I could come up with to this problem:

Copy ramdisk to other place before .bss is zeroed. This is a little bit more difficult.
Maybe PT_LOAD .bss isn't that bad at all.
Add non-PT_LOAD section containing fixed amount of space for ramdisk. This isn't that bad for now, because we won't need big ramdisks for some time probably, it is extremly easy to add and requires no changes to existing code.",Please do not modify the linker script. Use the same technique we're using to embed ELF files into kernel image. Please ask @rafalcieslak how to use it.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,183,2016-12-19T00:51:21Z,2017-01-04T17:31:12Z,2017-01-04T17:31:15Z,CLOSED,False,97,67,6,https://github.com/coodie,Add initrd section to linker script,1,[],https://github.com/cahirwpz/mimiker/pull/183,https://github.com/coodie,3,https://github.com/cahirwpz/mimiker/pull/183#issuecomment-268339617,"There are few problems with the way the OVPSim maps initial ramdisk to kernel space. Looking at the code of SmartLoader, initial ramdisk is always placed at the end of .data - or in general at the last section with PT_LOAD attribute. We could probably hack around and try to place ramdisk behind .bss section, and this could be easily done with setting .bss to PT_LOAD, but we don't want to do that.
There are few solutions I could come up with to this problem:

Copy ramdisk to other place before .bss is zeroed. This is a little bit more difficult.
Maybe PT_LOAD .bss isn't that bad at all.
Add non-PT_LOAD section containing fixed amount of space for ramdisk. This isn't that bad for now, because we won't need big ramdisks for some time probably, it is extremly easy to add and requires no changes to existing code.","I could try embed ramdisk inside kernel, but do we really want to recompile the kernel everytime we want to use other ramdisk?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,183,2016-12-19T00:51:21Z,2017-01-04T17:31:12Z,2017-01-04T17:31:15Z,CLOSED,False,97,67,6,https://github.com/coodie,Add initrd section to linker script,1,[],https://github.com/cahirwpz/mimiker/pull/183,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/183#issuecomment-268343160,"There are few problems with the way the OVPSim maps initial ramdisk to kernel space. Looking at the code of SmartLoader, initial ramdisk is always placed at the end of .data - or in general at the last section with PT_LOAD attribute. We could probably hack around and try to place ramdisk behind .bss section, and this could be easily done with setting .bss to PT_LOAD, but we don't want to do that.
There are few solutions I could come up with to this problem:

Copy ramdisk to other place before .bss is zeroed. This is a little bit more difficult.
Maybe PT_LOAD .bss isn't that bad at all.
Add non-PT_LOAD section containing fixed amount of space for ramdisk. This isn't that bad for now, because we won't need big ramdisks for some time probably, it is extremly easy to add and requires no changes to existing code.","You don't need to compile whole kernel. Just perform linking once again. But that has to be done in both cases – i.e. your original solution and ramdisk embedding, AFAIUC.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,183,2016-12-19T00:51:21Z,2017-01-04T17:31:12Z,2017-01-04T17:31:15Z,CLOSED,False,97,67,6,https://github.com/coodie,Add initrd section to linker script,1,[],https://github.com/cahirwpz/mimiker/pull/183,https://github.com/coodie,5,https://github.com/cahirwpz/mimiker/pull/183#issuecomment-268346427,"There are few problems with the way the OVPSim maps initial ramdisk to kernel space. Looking at the code of SmartLoader, initial ramdisk is always placed at the end of .data - or in general at the last section with PT_LOAD attribute. We could probably hack around and try to place ramdisk behind .bss section, and this could be easily done with setting .bss to PT_LOAD, but we don't want to do that.
There are few solutions I could come up with to this problem:

Copy ramdisk to other place before .bss is zeroed. This is a little bit more difficult.
Maybe PT_LOAD .bss isn't that bad at all.
Add non-PT_LOAD section containing fixed amount of space for ramdisk. This isn't that bad for now, because we won't need big ramdisks for some time probably, it is extremly easy to add and requires no changes to existing code.","We don't have to recompile or relink the kernel in case of this solution. We just have 20kb linker space for ramdisk.
However there is better solution to that: move bss section before data. Then ramdisk would be placed after data (as it always is in the case of ovpsim --ramdisk command). There is one problem however, we need some early allocation mechanism and currently we do this by extending .bss section. But what is the problem of allocating by extending the pointer to the end of ramdisk?
Note that all of these problems are caused by impossibility of moving ramdisk around in the kernel from ovpsim command line. I think in general we want to be able to run any program in user space without having to compile it into kernel (as it is currently), but rather put it into ramdisk and then run kernel with ramdisk given.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,183,2016-12-19T00:51:21Z,2017-01-04T17:31:12Z,2017-01-04T17:31:15Z,CLOSED,False,97,67,6,https://github.com/coodie,Add initrd section to linker script,1,[],https://github.com/cahirwpz/mimiker/pull/183,https://github.com/rafalcieslak,6,https://github.com/cahirwpz/mimiker/pull/183#issuecomment-268348690,"There are few problems with the way the OVPSim maps initial ramdisk to kernel space. Looking at the code of SmartLoader, initial ramdisk is always placed at the end of .data - or in general at the last section with PT_LOAD attribute. We could probably hack around and try to place ramdisk behind .bss section, and this could be easily done with setting .bss to PT_LOAD, but we don't want to do that.
There are few solutions I could come up with to this problem:

Copy ramdisk to other place before .bss is zeroed. This is a little bit more difficult.
Maybe PT_LOAD .bss isn't that bad at all.
Add non-PT_LOAD section containing fixed amount of space for ramdisk. This isn't that bad for now, because we won't need big ramdisks for some time probably, it is extremly easy to add and requires no changes to existing code.","I completely agree that the ramdisk should be provided separately, not embedded into the kernel image. We will want to configure the ramdisk independently from the kernel. That is one of the most useful features of a ramdisk: one can modify it without touching kernel sources. I imagine eventually we'll be using a single kernel image, and a ramdisk with init for PID 1.
Just in case you missed the point of this PR: it's not trying to place the ramdisk data in the linker script. What it is supposed to do is to reserve some free space between .data and .bss where SmartLoaderLinux will place the ramdisk provided with initrd argument.",True,{'THUMBS_UP': ['https://github.com/coodie']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,183,2016-12-19T00:51:21Z,2017-01-04T17:31:12Z,2017-01-04T17:31:15Z,CLOSED,False,97,67,6,https://github.com/coodie,Add initrd section to linker script,1,[],https://github.com/cahirwpz/mimiker/pull/183,https://github.com/cahirwpz,7,https://github.com/cahirwpz/mimiker/pull/183#issuecomment-268355631,"There are few problems with the way the OVPSim maps initial ramdisk to kernel space. Looking at the code of SmartLoader, initial ramdisk is always placed at the end of .data - or in general at the last section with PT_LOAD attribute. We could probably hack around and try to place ramdisk behind .bss section, and this could be easily done with setting .bss to PT_LOAD, but we don't want to do that.
There are few solutions I could come up with to this problem:

Copy ramdisk to other place before .bss is zeroed. This is a little bit more difficult.
Maybe PT_LOAD .bss isn't that bad at all.
Add non-PT_LOAD section containing fixed amount of space for ramdisk. This isn't that bad for now, because we won't need big ramdisks for some time probably, it is extremly easy to add and requires no changes to existing code.",What about moving ramdisk to the end of memory before we clear .bss? Then at pmap initalization phase we can reserve those pages.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,183,2016-12-19T00:51:21Z,2017-01-04T17:31:12Z,2017-01-04T17:31:15Z,CLOSED,False,97,67,6,https://github.com/coodie,Add initrd section to linker script,1,[],https://github.com/cahirwpz/mimiker/pull/183,https://github.com/cahirwpz,8,https://github.com/cahirwpz/mimiker/pull/183#issuecomment-268359370,"There are few problems with the way the OVPSim maps initial ramdisk to kernel space. Looking at the code of SmartLoader, initial ramdisk is always placed at the end of .data - or in general at the last section with PT_LOAD attribute. We could probably hack around and try to place ramdisk behind .bss section, and this could be easily done with setting .bss to PT_LOAD, but we don't want to do that.
There are few solutions I could come up with to this problem:

Copy ramdisk to other place before .bss is zeroed. This is a little bit more difficult.
Maybe PT_LOAD .bss isn't that bad at all.
Add non-PT_LOAD section containing fixed amount of space for ramdisk. This isn't that bad for now, because we won't need big ramdisks for some time probably, it is extremly easy to add and requires no changes to existing code.",Another idea: could we add zero sized PT_LOAD segment a few megabytes after end of .bss section?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,183,2016-12-19T00:51:21Z,2017-01-04T17:31:12Z,2017-01-04T17:31:15Z,CLOSED,False,97,67,6,https://github.com/coodie,Add initrd section to linker script,1,[],https://github.com/cahirwpz/mimiker/pull/183,https://github.com/coodie,9,https://github.com/cahirwpz/mimiker/pull/183#issuecomment-268359769,"There are few problems with the way the OVPSim maps initial ramdisk to kernel space. Looking at the code of SmartLoader, initial ramdisk is always placed at the end of .data - or in general at the last section with PT_LOAD attribute. We could probably hack around and try to place ramdisk behind .bss section, and this could be easily done with setting .bss to PT_LOAD, but we don't want to do that.
There are few solutions I could come up with to this problem:

Copy ramdisk to other place before .bss is zeroed. This is a little bit more difficult.
Maybe PT_LOAD .bss isn't that bad at all.
Add non-PT_LOAD section containing fixed amount of space for ramdisk. This isn't that bad for now, because we won't need big ramdisks for some time probably, it is extremly easy to add and requires no changes to existing code.","Another idea: could we add zero sized PT_LOAD segment a few megabytes after end of .bss section? That's also great idea, but we need to allocate memory somehow :).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,183,2016-12-19T00:51:21Z,2017-01-04T17:31:12Z,2017-01-04T17:31:15Z,CLOSED,False,97,67,6,https://github.com/coodie,Add initrd section to linker script,1,[],https://github.com/cahirwpz/mimiker/pull/183,https://github.com/cahirwpz,10,https://github.com/cahirwpz/mimiker/pull/183#issuecomment-268361325,"There are few problems with the way the OVPSim maps initial ramdisk to kernel space. Looking at the code of SmartLoader, initial ramdisk is always placed at the end of .data - or in general at the last section with PT_LOAD attribute. We could probably hack around and try to place ramdisk behind .bss section, and this could be easily done with setting .bss to PT_LOAD, but we don't want to do that.
There are few solutions I could come up with to this problem:

Copy ramdisk to other place before .bss is zeroed. This is a little bit more difficult.
Maybe PT_LOAD .bss isn't that bad at all.
Add non-PT_LOAD section containing fixed amount of space for ramdisk. This isn't that bad for now, because we won't need big ramdisks for some time probably, it is extremly easy to add and requires no changes to existing code.",Could you check final size of .bss section by printing sbrk.end address in kernel_sbrk_shutdown?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,183,2016-12-19T00:51:21Z,2017-01-04T17:31:12Z,2017-01-04T17:31:15Z,CLOSED,False,97,67,6,https://github.com/coodie,Add initrd section to linker script,1,[],https://github.com/cahirwpz/mimiker/pull/183,https://github.com/rafalcieslak,11,https://github.com/cahirwpz/mimiker/pull/183#issuecomment-268814034,"There are few problems with the way the OVPSim maps initial ramdisk to kernel space. Looking at the code of SmartLoader, initial ramdisk is always placed at the end of .data - or in general at the last section with PT_LOAD attribute. We could probably hack around and try to place ramdisk behind .bss section, and this could be easily done with setting .bss to PT_LOAD, but we don't want to do that.
There are few solutions I could come up with to this problem:

Copy ramdisk to other place before .bss is zeroed. This is a little bit more difficult.
Maybe PT_LOAD .bss isn't that bad at all.
Add non-PT_LOAD section containing fixed amount of space for ramdisk. This isn't that bad for now, because we won't need big ramdisks for some time probably, it is extremly easy to add and requires no changes to existing code.","Here you go. At start:
sbrk.ptr = 0x801aea14
sbrk.end = 0x803aea14

At  shutdown:
sbrk.ptr: 0x8032eb14
sbrk.end: 0x8032f000

These results are for current master.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,184,2016-12-22T01:33:26Z,2017-04-11T19:44:22Z,2017-04-13T17:22:13Z,MERGED,True,597,69,20,https://github.com/coodie,Add cpio based ramdisk,45,['WiP'],https://github.com/cahirwpz/mimiker/pull/184,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/184,"THIS PR IS NOT DONE YET!
This PR is created to show problems associated with ramdisk implementation and current state of work. Comment secition under PR also creates some space for discussion.

I found it is way much easier to decode crc formatted cpio archive (because in classic cpio bytes are octal), however there are few issues  with paddings so i had to look at cpio source code and play a bit to be able to decode cpio correctly (still not 100% sure it works, but I tested it few times and couldn't find non-working version). Just pass --format=crc when running cpio command.
I did some kernel args parsing, to be thrown away layer after @mkaim implements this.
There is better way to load ramdisk into the kernel, rather than allocate fixed size space between .data and .bss.

Almost everything is done. Missing stuff:

Slight refactor (at least running clang format).
vnode_readdir (to be done in another PR)
vnode_open, this one however depends on file descriptors (to be done in another PR)","THIS PR IS NOT DONE YET!
This PR is created to show problems associated with ramdisk implementation and current state of work. Comment secition under PR also creates some space for discussion.

I found it is way much easier to decode crc formatted cpio archive (because in classic cpio bytes are octal), however there are few issues  with paddings so i had to look at cpio source code and play a bit to be able to decode cpio correctly (still not 100% sure it works, but I tested it few times and couldn't find non-working version). Just pass --format=crc when running cpio command.
I did some kernel args parsing, to be thrown away layer after @mkaim implements this.
There is better way to load ramdisk into the kernel, rather than allocate fixed size space between .data and .bss.

Almost everything is done. Missing stuff:

Slight refactor (at least running clang format).
vnode_readdir (to be done in another PR)
vnode_open, this one however depends on file descriptors (to be done in another PR)",True,{'HOORAY': ['https://github.com/rafalcieslak']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,184,2016-12-22T01:33:26Z,2017-04-11T19:44:22Z,2017-04-13T17:22:13Z,MERGED,True,597,69,20,https://github.com/coodie,Add cpio based ramdisk,45,['WiP'],https://github.com/cahirwpz/mimiker/pull/184,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/184#issuecomment-268700450,"THIS PR IS NOT DONE YET!
This PR is created to show problems associated with ramdisk implementation and current state of work. Comment secition under PR also creates some space for discussion.

I found it is way much easier to decode crc formatted cpio archive (because in classic cpio bytes are octal), however there are few issues  with paddings so i had to look at cpio source code and play a bit to be able to decode cpio correctly (still not 100% sure it works, but I tested it few times and couldn't find non-working version). Just pass --format=crc when running cpio command.
I did some kernel args parsing, to be thrown away layer after @mkaim implements this.
There is better way to load ramdisk into the kernel, rather than allocate fixed size space between .data and .bss.

Almost everything is done. Missing stuff:

Slight refactor (at least running clang format).
vnode_readdir (to be done in another PR)
vnode_open, this one however depends on file descriptors (to be done in another PR)","I did some kernel args parsing, to be thrown away layer after @mkaim implements this.

Congratulations, you are the third person to implement this independently.
@cahirwpz Could you please write down (as a new issue) some minimum requirements you want our sysctl implementation to fulfill? I suppose making a working stub should be of highest priority now.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,184,2016-12-22T01:33:26Z,2017-04-11T19:44:22Z,2017-04-13T17:22:13Z,MERGED,True,597,69,20,https://github.com/coodie,Add cpio based ramdisk,45,['WiP'],https://github.com/cahirwpz/mimiker/pull/184,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/184#issuecomment-272909947,"THIS PR IS NOT DONE YET!
This PR is created to show problems associated with ramdisk implementation and current state of work. Comment secition under PR also creates some space for discussion.

I found it is way much easier to decode crc formatted cpio archive (because in classic cpio bytes are octal), however there are few issues  with paddings so i had to look at cpio source code and play a bit to be able to decode cpio correctly (still not 100% sure it works, but I tested it few times and couldn't find non-working version). Just pass --format=crc when running cpio command.
I did some kernel args parsing, to be thrown away layer after @mkaim implements this.
There is better way to load ramdisk into the kernel, rather than allocate fixed size space between .data and .bss.

Almost everything is done. Missing stuff:

Slight refactor (at least running clang format).
vnode_readdir (to be done in another PR)
vnode_open, this one however depends on file descriptors (to be done in another PR)","I created archive with following command:
find . -depth -print | cpio -H crc -ov > ../initrd

... where directory structure is listed below:
empty_file
file1
file2
file3
file4
just_another_dir/file6
some_dir/nested_dir
some_dir/nested_dir/file5
some_dir/nested_dir/message

... and I was not able to make the test pass by running launch --ramdisk initrd test=ramdisk. Could you provide a script that creates a ramdisk for testing purposes?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,184,2016-12-22T01:33:26Z,2017-04-11T19:44:22Z,2017-04-13T17:22:13Z,MERGED,True,597,69,20,https://github.com/coodie,Add cpio based ramdisk,45,['WiP'],https://github.com/cahirwpz/mimiker/pull/184,https://github.com/coodie,4,https://github.com/cahirwpz/mimiker/pull/184#issuecomment-273912971,"THIS PR IS NOT DONE YET!
This PR is created to show problems associated with ramdisk implementation and current state of work. Comment secition under PR also creates some space for discussion.

I found it is way much easier to decode crc formatted cpio archive (because in classic cpio bytes are octal), however there are few issues  with paddings so i had to look at cpio source code and play a bit to be able to decode cpio correctly (still not 100% sure it works, but I tested it few times and couldn't find non-working version). Just pass --format=crc when running cpio command.
I did some kernel args parsing, to be thrown away layer after @mkaim implements this.
There is better way to load ramdisk into the kernel, rather than allocate fixed size space between .data and .bss.

Almost everything is done. Missing stuff:

Slight refactor (at least running clang format).
vnode_readdir (to be done in another PR)
vnode_open, this one however depends on file descriptors (to be done in another PR)","I commited everything and I think this is ready to be merged with master.
There is also initial ramdisk for testing purposes in tests/initrd.cpio.
Here is command which works (yours probably works too):
find -depth -print | cpio --format=crc -o > ../initrd.cpio
Here is how you launch this:
./launch --ramdisk tests/initrd.cpio test=ramdisk
Note that for now initrd is mounted in /initrd/ which means that every path of the directory you've put into ramdisk is going to start with /initrd/ inside kernel.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,184,2016-12-22T01:33:26Z,2017-04-11T19:44:22Z,2017-04-13T17:22:13Z,MERGED,True,597,69,20,https://github.com/coodie,Add cpio based ramdisk,45,['WiP'],https://github.com/cahirwpz/mimiker/pull/184,https://github.com/cahirwpz,5,https://github.com/cahirwpz/mimiker/pull/184#issuecomment-275636170,"THIS PR IS NOT DONE YET!
This PR is created to show problems associated with ramdisk implementation and current state of work. Comment secition under PR also creates some space for discussion.

I found it is way much easier to decode crc formatted cpio archive (because in classic cpio bytes are octal), however there are few issues  with paddings so i had to look at cpio source code and play a bit to be able to decode cpio correctly (still not 100% sure it works, but I tested it few times and couldn't find non-working version). Just pass --format=crc when running cpio command.
I did some kernel args parsing, to be thrown away layer after @mkaim implements this.
There is better way to load ramdisk into the kernel, rather than allocate fixed size space between .data and .bss.

Almost everything is done. Missing stuff:

Slight refactor (at least running clang format).
vnode_readdir (to be done in another PR)
vnode_open, this one however depends on file descriptors (to be done in another PR)","Please build tree of cpio_node's as we discussed during our last meeting. Note that each archived  directory has corresponding cpio_node structure. You'll have to extend cpio_node structure with two extra fields:
cpio_list_t c_children; /* head of list that stores direct descendants */
TAILQ_ENTRY(cpio_node) c_siblings; /* nodes that have the same parent */
EDIT: also note that POSIX.1 cpio archive handling should be trivial to add.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,184,2016-12-22T01:33:26Z,2017-04-11T19:44:22Z,2017-04-13T17:22:13Z,MERGED,True,597,69,20,https://github.com/coodie,Add cpio based ramdisk,45,['WiP'],https://github.com/cahirwpz/mimiker/pull/184,https://github.com/coodie,6,https://github.com/cahirwpz/mimiker/pull/184#issuecomment-289249646,"THIS PR IS NOT DONE YET!
This PR is created to show problems associated with ramdisk implementation and current state of work. Comment secition under PR also creates some space for discussion.

I found it is way much easier to decode crc formatted cpio archive (because in classic cpio bytes are octal), however there are few issues  with paddings so i had to look at cpio source code and play a bit to be able to decode cpio correctly (still not 100% sure it works, but I tested it few times and couldn't find non-working version). Just pass --format=crc when running cpio command.
I did some kernel args parsing, to be thrown away layer after @mkaim implements this.
There is better way to load ramdisk into the kernel, rather than allocate fixed size space between .data and .bss.

Almost everything is done. Missing stuff:

Slight refactor (at least running clang format).
vnode_readdir (to be done in another PR)
vnode_open, this one however depends on file descriptors (to be done in another PR)","@cahirwpz
I've done tree building, what is left to be done? Would you like me to implement remaining operations? (vnode_open, vnode_readdir)",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,184,2016-12-22T01:33:26Z,2017-04-11T19:44:22Z,2017-04-13T17:22:13Z,MERGED,True,597,69,20,https://github.com/coodie,Add cpio based ramdisk,45,['WiP'],https://github.com/cahirwpz/mimiker/pull/184,https://github.com/cahirwpz,7,https://github.com/cahirwpz/mimiker/pull/184#issuecomment-289274054,"THIS PR IS NOT DONE YET!
This PR is created to show problems associated with ramdisk implementation and current state of work. Comment secition under PR also creates some space for discussion.

I found it is way much easier to decode crc formatted cpio archive (because in classic cpio bytes are octal), however there are few issues  with paddings so i had to look at cpio source code and play a bit to be able to decode cpio correctly (still not 100% sure it works, but I tested it few times and couldn't find non-working version). Just pass --format=crc when running cpio command.
I did some kernel args parsing, to be thrown away layer after @mkaim implements this.
There is better way to load ramdisk into the kernel, rather than allocate fixed size space between .data and .bss.

Almost everything is done. Missing stuff:

Slight refactor (at least running clang format).
vnode_readdir (to be done in another PR)
vnode_open, this one however depends on file descriptors (to be done in another PR)",Please write a kernel-space test that will use VOP interface to perform operation similar to find / -ls command.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,184,2016-12-22T01:33:26Z,2017-04-11T19:44:22Z,2017-04-13T17:22:13Z,MERGED,True,597,69,20,https://github.com/coodie,Add cpio based ramdisk,45,['WiP'],https://github.com/cahirwpz/mimiker/pull/184,https://github.com/coodie,8,https://github.com/cahirwpz/mimiker/pull/184#issuecomment-291487860,"THIS PR IS NOT DONE YET!
This PR is created to show problems associated with ramdisk implementation and current state of work. Comment secition under PR also creates some space for discussion.

I found it is way much easier to decode crc formatted cpio archive (because in classic cpio bytes are octal), however there are few issues  with paddings so i had to look at cpio source code and play a bit to be able to decode cpio correctly (still not 100% sure it works, but I tested it few times and couldn't find non-working version). Just pass --format=crc when running cpio command.
I did some kernel args parsing, to be thrown away layer after @mkaim implements this.
There is better way to load ramdisk into the kernel, rather than allocate fixed size space between .data and .bss.

Almost everything is done. Missing stuff:

Slight refactor (at least running clang format).
vnode_readdir (to be done in another PR)
vnode_open, this one however depends on file descriptors (to be done in another PR)","Won't bash be better, easier and more readable for generating directories? It's basically a bunch of mkdirs and echos... in python it's actually more difficult. And I doubt we are going to run this on windows.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,184,2016-12-22T01:33:26Z,2017-04-11T19:44:22Z,2017-04-13T17:22:13Z,MERGED,True,597,69,20,https://github.com/coodie,Add cpio based ramdisk,45,['WiP'],https://github.com/cahirwpz/mimiker/pull/184,https://github.com/cahirwpz,9,https://github.com/cahirwpz/mimiker/pull/184#issuecomment-291494945,"THIS PR IS NOT DONE YET!
This PR is created to show problems associated with ramdisk implementation and current state of work. Comment secition under PR also creates some space for discussion.

I found it is way much easier to decode crc formatted cpio archive (because in classic cpio bytes are octal), however there are few issues  with paddings so i had to look at cpio source code and play a bit to be able to decode cpio correctly (still not 100% sure it works, but I tested it few times and couldn't find non-working version). Just pass --format=crc when running cpio command.
I did some kernel args parsing, to be thrown away layer after @mkaim implements this.
There is better way to load ramdisk into the kernel, rather than allocate fixed size space between .data and .bss.

Almost everything is done. Missing stuff:

Slight refactor (at least running clang format).
vnode_readdir (to be done in another PR)
vnode_open, this one however depends on file descriptors (to be done in another PR)","Bash script is fine. Indeed, Python may be an overkill for the task.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,184,2016-12-22T01:33:26Z,2017-04-11T19:44:22Z,2017-04-13T17:22:13Z,MERGED,True,597,69,20,https://github.com/coodie,Add cpio based ramdisk,45,['WiP'],https://github.com/cahirwpz/mimiker/pull/184,https://github.com/coodie,10,https://github.com/cahirwpz/mimiker/pull/184#issuecomment-292541351,"THIS PR IS NOT DONE YET!
This PR is created to show problems associated with ramdisk implementation and current state of work. Comment secition under PR also creates some space for discussion.

I found it is way much easier to decode crc formatted cpio archive (because in classic cpio bytes are octal), however there are few issues  with paddings so i had to look at cpio source code and play a bit to be able to decode cpio correctly (still not 100% sure it works, but I tested it few times and couldn't find non-working version). Just pass --format=crc when running cpio command.
I did some kernel args parsing, to be thrown away layer after @mkaim implements this.
There is better way to load ramdisk into the kernel, rather than allocate fixed size space between .data and .bss.

Almost everything is done. Missing stuff:

Slight refactor (at least running clang format).
vnode_readdir (to be done in another PR)
vnode_open, this one however depends on file descriptors (to be done in another PR)","For some non-obvious reason ramdisk doesn't work with Qemu (there is wrong magic number). Also, qemu gives rd_start as 64 bit string, meaning that I have change parsing algorithm (not a big problem, but pollutes code anyway). This is probably going to take me while to figure this out. I'd merge this PR at this moment, and move adding qemu support to other branch.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,184,2016-12-22T01:33:26Z,2017-04-11T19:44:22Z,2017-04-13T17:22:13Z,MERGED,True,597,69,20,https://github.com/coodie,Add cpio based ramdisk,45,['WiP'],https://github.com/cahirwpz/mimiker/pull/184,https://github.com/rafalcieslak,11,https://github.com/cahirwpz/mimiker/pull/184#issuecomment-292782710,"THIS PR IS NOT DONE YET!
This PR is created to show problems associated with ramdisk implementation and current state of work. Comment secition under PR also creates some space for discussion.

I found it is way much easier to decode crc formatted cpio archive (because in classic cpio bytes are octal), however there are few issues  with paddings so i had to look at cpio source code and play a bit to be able to decode cpio correctly (still not 100% sure it works, but I tested it few times and couldn't find non-working version). Just pass --format=crc when running cpio command.
I did some kernel args parsing, to be thrown away layer after @mkaim implements this.
There is better way to load ramdisk into the kernel, rather than allocate fixed size space between .data and .bss.

Almost everything is done. Missing stuff:

Slight refactor (at least running clang format).
vnode_readdir (to be done in another PR)
vnode_open, this one however depends on file descriptors (to be done in another PR)","There are some minor problems with the build process, but please don't focus on them. I've came up with a very elegant and extensive solution which will let us nicely integrate ramdisk content definition and gathering with the build process, but it will require a lot of makefile meta-programming. So let's just make sure the ramdisk is build anyhow (and it is already), and we'll improve the build process soon afterwards - this branch is waaaaay overdue anyway. I'll either propose a solution in the next two days, or will discuss it during the next meeting.
One significant problem I've noticed concerns launching the kernel without any ramdisk - parse_rd_start crashes as it is given a null pointer, and it tries to strlen it. I think it should at least crash gracefully with a message informing that the ramdisk is missing. However, I don't expect we'll be starting the kernel without a ramdisk at all once this is merged, so an assert ensuring that there is a ramdisk provided should be fine too.
Also I don't expect we'll be using multiple ramdisks for different purposes, so hardcoding the one we use into the launch script so that the kernel always has a ramdisk seems viable - and it would also solve the above problem.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,184,2016-12-22T01:33:26Z,2017-04-11T19:44:22Z,2017-04-13T17:22:13Z,MERGED,True,597,69,20,https://github.com/coodie,Add cpio based ramdisk,45,['WiP'],https://github.com/cahirwpz/mimiker/pull/184,https://github.com/cahirwpz,12,https://github.com/cahirwpz/mimiker/pull/184#issuecomment-293378458,"THIS PR IS NOT DONE YET!
This PR is created to show problems associated with ramdisk implementation and current state of work. Comment secition under PR also creates some space for discussion.

I found it is way much easier to decode crc formatted cpio archive (because in classic cpio bytes are octal), however there are few issues  with paddings so i had to look at cpio source code and play a bit to be able to decode cpio correctly (still not 100% sure it works, but I tested it few times and couldn't find non-working version). Just pass --format=crc when running cpio command.
I did some kernel args parsing, to be thrown away layer after @mkaim implements this.
There is better way to load ramdisk into the kernel, rather than allocate fixed size space between .data and .bss.

Almost everything is done. Missing stuff:

Slight refactor (at least running clang format).
vnode_readdir (to be done in another PR)
vnode_open, this one however depends on file descriptors (to be done in another PR)","I accept this PR on a premise that you'll implement v_open, v_readdir and v_getattr operations for ramdisk vnodes and test the access to ramdisk files from userspace in consecutive PR(s).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,185,2017-01-12T16:48:43Z,2017-03-24T23:00:43Z,2017-03-24T23:00:43Z,CLOSED,False,162,0,10,https://github.com/psie,[WIP] Worker thread,4,['WiP'],https://github.com/cahirwpz/mimiker/pull/185,https://github.com/psie,1,https://github.com/cahirwpz/mimiker/pull/185,This is a draft of worker thread concept. Includes a use case of cleaning up after a thread that exited. Awaiting comments.,This is a draft of worker thread concept. Includes a use case of cleaning up after a thread that exited. Awaiting comments.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,185,2017-01-12T16:48:43Z,2017-03-24T23:00:43Z,2017-03-24T23:00:43Z,CLOSED,False,162,0,10,https://github.com/psie,[WIP] Worker thread,4,['WiP'],https://github.com/cahirwpz/mimiker/pull/185,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/185#issuecomment-274727872,This is a draft of worker thread concept. Includes a use case of cleaning up after a thread that exited. Awaiting comments.,"Hi, is there any progress on this task?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,185,2017-01-12T16:48:43Z,2017-03-24T23:00:43Z,2017-03-24T23:00:43Z,CLOSED,False,162,0,10,https://github.com/psie,[WIP] Worker thread,4,['WiP'],https://github.com/cahirwpz/mimiker/pull/185,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/185#issuecomment-289162941,This is a draft of worker thread concept. Includes a use case of cleaning up after a thread that exited. Awaiting comments.,Moved to #216.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,186,2017-01-13T14:15:59Z,2017-01-16T12:11:15Z,2017-01-16T12:11:15Z,MERGED,True,248,123,28,https://github.com/rafalcieslak,Implemented init= and test= kernel arguments support,2,[],https://github.com/cahirwpz/mimiker/pull/186,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/186,"This branch cleans up the build process by reducing the final output to just a single .elf kernel image. The kernel now accepts init=PROGRAM and test=TEST arguments, which may be used to run a user-space program as the init process, or run the specified kernel test. This slightly generalizes our test architecture, and improves build time.
Tests are now declared with TEST_ADD(name, function_implementing_test), which appends appropriate data to a linker set. Tests no longer provide their own version of main, the only main is now implemented in sys/main.c. Kernel image is linked once, to mimiker.elf in the root directory. The launch script uses mimiker.elf by default, so it may be used like this:
./launch init=fd_test

or
./launch -td test=vm_map

As always, many files weren't formatted with make format, so this diff also has to incorporate formatting fixes.","This branch cleans up the build process by reducing the final output to just a single .elf kernel image. The kernel now accepts init=PROGRAM and test=TEST arguments, which may be used to run a user-space program as the init process, or run the specified kernel test. This slightly generalizes our test architecture, and improves build time.
Tests are now declared with TEST_ADD(name, function_implementing_test), which appends appropriate data to a linker set. Tests no longer provide their own version of main, the only main is now implemented in sys/main.c. Kernel image is linked once, to mimiker.elf in the root directory. The launch script uses mimiker.elf by default, so it may be used like this:
./launch init=fd_test

or
./launch -td test=vm_map

As always, many files weren't formatted with make format, so this diff also has to incorporate formatting fixes.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,187,2017-01-16T12:54:27Z,2017-01-16T14:34:58Z,2017-01-16T14:34:58Z,MERGED,True,1,1,1,https://github.com/rafalcieslak,Fixed kernel args format for QEMU,1,[],https://github.com/cahirwpz/mimiker/pull/187,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/187,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,188,2017-01-16T14:19:39Z,2017-01-16T14:34:48Z,2017-01-16T14:34:48Z,MERGED,True,46,37,1,https://github.com/rafalcieslak,Updated README,1,[],https://github.com/cahirwpz/mimiker/pull/188,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/188,"Our current README is unhelpful.

It provides outdated information on getting the toolchain we're migrating from.
It focuses on setting up OVPsim, which is really outside the scope of our documentation.

I've prepared an updated version, which briefly instructs how to prepare the mipsel-unknown-elf toolchain, how to build the kernel, and how to test it. I believe people interested in this project would find these instructions much more helpful.
If we want to keep the instructions on setting up OVPsim, I believe the github project wiki would be a better place.","Our current README is unhelpful.

It provides outdated information on getting the toolchain we're migrating from.
It focuses on setting up OVPsim, which is really outside the scope of our documentation.

I've prepared an updated version, which briefly instructs how to prepare the mipsel-unknown-elf toolchain, how to build the kernel, and how to test it. I believe people interested in this project would find these instructions much more helpful.
If we want to keep the instructions on setting up OVPsim, I believe the github project wiki would be a better place.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,190,2017-01-19T15:28:01Z,2018-12-17T18:07:43Z,2018-12-17T18:07:43Z,CLOSED,False,641,146,11,https://github.com/strzkrzysiek,PTE size extension to 8B (draft) ,18,[],https://github.com/cahirwpz/mimiker/pull/190,https://github.com/strzkrzysiek,1,https://github.com/cahirwpz/mimiker/pull/190,PTE size extended to 8B in order to be able to store additional flags. #159,PTE size extended to 8B in order to be able to store additional flags. #159,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,190,2017-01-19T15:28:01Z,2018-12-17T18:07:43Z,2018-12-17T18:07:43Z,CLOSED,False,641,146,11,https://github.com/strzkrzysiek,PTE size extension to 8B (draft) ,18,[],https://github.com/cahirwpz/mimiker/pull/190,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/190#issuecomment-275325876,PTE size extended to 8B in order to be able to store additional flags. #159,We discussed the changes during last meeting. Has been there any progress since then?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,190,2017-01-19T15:28:01Z,2018-12-17T18:07:43Z,2018-12-17T18:07:43Z,CLOSED,False,641,146,11,https://github.com/strzkrzysiek,PTE size extension to 8B (draft) ,18,[],https://github.com/cahirwpz/mimiker/pull/190,https://github.com/strzkrzysiek,3,https://github.com/cahirwpz/mimiker/pull/190#issuecomment-275331036,PTE size extended to 8B in order to be able to store additional flags. #159,Yes. Some should be pushed by the evening.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,190,2017-01-19T15:28:01Z,2018-12-17T18:07:43Z,2018-12-17T18:07:43Z,CLOSED,False,641,146,11,https://github.com/strzkrzysiek,PTE size extension to 8B (draft) ,18,[],https://github.com/cahirwpz/mimiker/pull/190,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/190#issuecomment-275678828,PTE size extended to 8B in order to be able to store additional flags. #159,"I'm afraid there're still some bugs in modified pmap.c. Please make sure to run all relevant tests, e.g.:
./launch -t test=vm_map",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,190,2017-01-19T15:28:01Z,2018-12-17T18:07:43Z,2018-12-17T18:07:43Z,CLOSED,False,641,146,11,https://github.com/strzkrzysiek,PTE size extension to 8B (draft) ,18,[],https://github.com/cahirwpz/mimiker/pull/190,https://github.com/strzkrzysiek,5,https://github.com/cahirwpz/mimiker/pull/190#issuecomment-276660397,PTE size extended to 8B in order to be able to store additional flags. #159,"I have investigated a little bit the cause of the failing vm_map test.
The first problem was while setting PTE. It caused exception because sometimes respective PDE entry was no longer present in TLB. It is fixed in the next commit.
The second problem is the simplified TLB Refill procedure. Why? The very first store operation is done on address 0x01001000. Obviously, TLB Refill exception is raised and the control is passed to the handler. There we stopped distinguish between even and odd pages so the even-page PTE is loaded first. This PTE is stored at the address 0xC0008000. This operation again raises an exception which this time passes the control to the General Exception Handler and in consequence to the TLB Exception Handler. This handler has no single clue which page is actually requested because the only thing it has is BadVAddr register which contains 0xC0008000. This is translated back into the address 0x0100000 and the Page Fault procedure is called. It obviously fails, because this page is mapped but has no access rights.
What I recommend for now is to keep the TLB Refill Handler in the extended version for now. I have had a brief look into the source code of FreeBSD and they don't do the trick but I haven't figured it out yet how do they do it. Here is the link.
Accepting this pull request will let me proceed with further work. About the possible solutions it would be nice to talk in person.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,190,2017-01-19T15:28:01Z,2018-12-17T18:07:43Z,2018-12-17T18:07:43Z,CLOSED,False,641,146,11,https://github.com/strzkrzysiek,PTE size extension to 8B (draft) ,18,[],https://github.com/cahirwpz/mimiker/pull/190,https://github.com/strzkrzysiek,6,https://github.com/cahirwpz/mimiker/pull/190#issuecomment-280013686,PTE size extended to 8B in order to be able to store additional flags. #159,I have no idea why the check fails. Trying to reproduce this failure (seed: 2181325586) results in a success using my machine. Any ideas what can be the cause of this inconsistency?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,190,2017-01-19T15:28:01Z,2018-12-17T18:07:43Z,2018-12-17T18:07:43Z,CLOSED,False,641,146,11,https://github.com/strzkrzysiek,PTE size extension to 8B (draft) ,18,[],https://github.com/cahirwpz/mimiker/pull/190,https://github.com/cahirwpz,7,https://github.com/cahirwpz/mimiker/pull/190#issuecomment-286531915,PTE size extended to 8B in order to be able to store additional flags. #159,"It's not difficult to crash referenced_modified_test. You can do it easily by running run_tests.py.
For instance, following test run launch -t test=all seed=930810437 repeat=5 fails with log:
[pmem] pm_alloc {paddr:348000 size:2}
[pmap.c:101] Page directory table allocated at c0802000
[pmem] pm_alloc {paddr:3f0000 size:16}
[pmem] pm_alloc {paddr:34e000 size:2}
[pmap.c:166] Page table fragment c0006000 allocated at 0034e000
[pmap.c:244] Add mapping for page 00ff8000 (PTE at c0007fc0)
[pmap.c:244] Add mapping for page 00ff9000 (PTE at c0007fc8)
[pmap.c:244] Add mapping for page 00ffa000 (PTE at c0007fd0)
[pmap.c:244] Add mapping for page 00ffb000 (PTE at c0007fd8)
[pmap.c:244] Add mapping for page 00ffc000 (PTE at c0007fe0)
[pmap.c:244] Add mapping for page 00ffd000 (PTE at c0007fe8)
[pmap.c:244] Add mapping for page 00ffe000 (PTE at c0007ff0)
[pmap.c:244] Add mapping for page 00fff000 (PTE at c0007ff8)
[pmem] pm_alloc {paddr:34c000 size:2}
[pmap.c:166] Page table fragment c0008000 allocated at 0034c000
[pmap.c:244] Add mapping for page 01000000 (PTE at c0008000)
[pmap.c:244] Add mapping for page 01001000 (PTE at c0008008)
[pmap.c:244] Add mapping for page 01002000 (PTE at c0008010)
[pmap.c:244] Add mapping for page 01003000 (PTE at c0008018)
[pmap.c:244] Add mapping for page 01004000 (PTE at c0008020)
[pmap.c:244] Add mapping for page 01005000 (PTE at c0008028)
[pmap.c:244] Add mapping for page 01006000 (PTE at c0008030)
[pmap.c:244] Add mapping for page 01007000 (PTE at c0008038)
[referenced_modified_test.c:68] Storing at address: 0x0xff8000
[referenced_modified_test.c:68] Storing at address: 0x0x1006000
[referenced_modified_test.c:68] Storing at address: 0x0xffd000
[referenced_modified_test.c:68] Storing at address: 0x0x1004000
[referenced_modified_test.c:63] Loading 0 from address: 0x0xffb000
[referenced_modified_test.c:68] Storing at address: 0x0x1007000
[referenced_modified_test.c:63] Loading 0 from address: 0x0x1005000
[referenced_modified_test.c:63] Loading 0 from address: 0x0xffc000
[referenced_modified_test.c:68] Storing at address: 0x0x1003000
[referenced_modified_test.c:63] Loading 0 from address: 0x0x1001000
[pmap.c:553] Assertion '0xc0000000 > orig_vaddr || orig_vaddr >= 0xc0000000 + ((1024 * 1024) * sizeof(pte_t))' failed!
[thread.c:91] Thread 'main' {0x8033e208} has finished.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,190,2017-01-19T15:28:01Z,2018-12-17T18:07:43Z,2018-12-17T18:07:43Z,CLOSED,False,641,146,11,https://github.com/strzkrzysiek,PTE size extension to 8B (draft) ,18,[],https://github.com/cahirwpz/mimiker/pull/190,https://github.com/cahirwpz,8,https://github.com/cahirwpz/mimiker/pull/190#issuecomment-447941533,PTE size extended to 8B in order to be able to store additional flags. #159,"After all, we're going to keep referenced and modified bits in vm_page structures. The development of pmap.c went in completely different directions and we're not going to make any use of this code, unfortunately.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,191,2017-01-19T23:36:29Z,2017-03-10T15:55:15Z,2017-03-10T15:55:15Z,MERGED,True,116,4,3,https://github.com/czapiga,Initial rwlock implementation,8,['accepted'],https://github.com/cahirwpz/mimiker/pull/191,https://github.com/czapiga,1,https://github.com/cahirwpz/mimiker/pull/191,This implementation is based on condvar and mutex. In near future I will replace condvar and mutex by sleepqueue and critical_*() functions.,This implementation is based on condvar and mutex. In near future I will replace condvar and mutex by sleepqueue and critical_*() functions.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,191,2017-01-19T23:36:29Z,2017-03-10T15:55:15Z,2017-03-10T15:55:15Z,MERGED,True,116,4,3,https://github.com/czapiga,Initial rwlock implementation,8,['accepted'],https://github.com/cahirwpz/mimiker/pull/191,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/191#issuecomment-275728070,This implementation is based on condvar and mutex. In near future I will replace condvar and mutex by sleepqueue and critical_*() functions.,"Please dig through some books, *BSD tests and internet resources to find nice use case for our rwlock. I want the implementation to be tested before it gets merged with the master.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,192,2017-01-20T10:18:21Z,2017-01-23T16:17:30Z,2017-01-23T16:17:30Z,CLOSED,False,4,3,1,https://github.com/czapiga,Changes in mutex implementation,1,[],https://github.com/cahirwpz/mimiker/pull/192,https://github.com/czapiga,1,https://github.com/cahirwpz/mimiker/pull/192,I think this is important to have critical_*() around m->m_count++ and m->m_count--,I think this is important to have critical_*() around m->m_count++ and m->m_count--,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,192,2017-01-20T10:18:21Z,2017-01-23T16:17:30Z,2017-01-23T16:17:30Z,CLOSED,False,4,3,1,https://github.com/czapiga,Changes in mutex implementation,1,[],https://github.com/cahirwpz/mimiker/pull/192,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/192#issuecomment-274433044,I think this is important to have critical_*() around m->m_count++ and m->m_count--,"I don't think so. Can you prove it? Note that only the owner can set m_owner field to thread_self().
In mtx_lock the program will enter first conditional scope only if the thread locked the mutex previously. Otherwise m_owner field will be set to something else than thread_self() and nobody will change it to thread_self() in the meantime.
Similarly mtx_unlock we assume explicitly (by assert statement) that the only thread that calls mtx_unlock is the one that locked it previously.
Please note that recursive mutex state transitions look as follows:
{unowned} mtx_lock {owned, count=0} mtx_lock {owned, count=1} ...
... {owned, count=1} mtx_unlock {owned, count=0} mtx_unlock {unowned}

If you find this explanation valid, then please add it in the comment. They will be valuable for the reader if they get confused.
However... because you sowed the seeds of doubt, perhaps the implementation should be analyzed for interaction with interrupt context of owner's thread.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,193,2017-01-20T13:13:20Z,2017-01-20T14:05:08Z,2017-01-20T14:05:08Z,MERGED,True,39,44,26,https://github.com/rafalcieslak,Disabled std library headers use in kernel,1,[],https://github.com/cahirwpz/mimiker/pull/193,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/193,"As requested, this branch gets the kernel to compile in a fully free-standing environment. This is achieved with a combination of -ffreestanding and -nostdinc flags. However, as -nostdinc disables too much, the build script will query gcc about it's install dir, and will manually add include directories where compiler headers (not standard library headers) are located.
I've had to include some extra type definitions to common.h. It also turned out that the main user of standard library headers is _stdio.h, and it pulls ~20 headers as dependencies; so I've stripped it down from various functions we don't use anyway, so that it no longer requires that many type definitions.","As requested, this branch gets the kernel to compile in a fully free-standing environment. This is achieved with a combination of -ffreestanding and -nostdinc flags. However, as -nostdinc disables too much, the build script will query gcc about it's install dir, and will manually add include directories where compiler headers (not standard library headers) are located.
I've had to include some extra type definitions to common.h. It also turned out that the main user of standard library headers is _stdio.h, and it pulls ~20 headers as dependencies; so I've stripped it down from various functions we don't use anyway, so that it no longer requires that many type definitions.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,194,2017-01-20T13:59:33Z,2017-01-23T10:34:29Z,2017-01-23T10:34:29Z,MERGED,True,100,12,9,https://github.com/rafalcieslak,Basic lseek and fstat interface,4,[],https://github.com/cahirwpz/mimiker/pull/194,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/194,"Cherry-picked from the doom_test3 branch, slightly updated to reflect recent changes (error return value sign, some renamed functions).
As usual, some files I edited weren't formatted correctly.
Note that as for now no filesystems support VOP_GETATTR, but cpio eventually will.","Cherry-picked from the doom_test3 branch, slightly updated to reflect recent changes (error return value sign, some renamed functions).
As usual, some files I edited weren't formatted correctly.
Note that as for now no filesystems support VOP_GETATTR, but cpio eventually will.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,195,2017-01-26T15:41:27Z,2017-01-27T21:12:58Z,2017-01-27T21:12:58Z,MERGED,True,439,145,31,https://github.com/rafalcieslak,Richer tests and CI support,24,[],https://github.com/cahirwpz/mimiker/pull/195,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/195,"This branch introduces better kernel test support:

Canonical failure/success messages for easy grepping over kernel output
Per-test flags: KTEST_FLAG_NORETURN, KTEST_FLAG_DIRTY, KTEST_FLAG_USERMODE.
Automatically running all tests (those which can be tested one after another) when command-line argument test=all is present
ktest_assert macro and KTEST_FAILURE return code
Displaying test name if it has failed
When running in all tests mode and a test fails, the full list of tests that were ran previously is displayed, with the failing test marked

This branch is not finished yet, I'm working on shuffling the test list so that the tests are ran in an arbitrary order. The shuffle RNG will be initialized with seed passed as command-line argument, and if a test fails, the seed will be displayed alongside the list of tests, so that this particular test order may be easily reproduced - by reusing the seed number.
Also, it turned out that a large number of tests we use fails if some other test was previously performed - for some tests this is natural, but there are many tests that should not break kernel state, yet they do. I've temporarily marked these tests with the KTEST_FLAG_BROKEN flag, and I'm planing to fix them.","This branch introduces better kernel test support:

Canonical failure/success messages for easy grepping over kernel output
Per-test flags: KTEST_FLAG_NORETURN, KTEST_FLAG_DIRTY, KTEST_FLAG_USERMODE.
Automatically running all tests (those which can be tested one after another) when command-line argument test=all is present
ktest_assert macro and KTEST_FAILURE return code
Displaying test name if it has failed
When running in all tests mode and a test fails, the full list of tests that were ran previously is displayed, with the failing test marked

This branch is not finished yet, I'm working on shuffling the test list so that the tests are ran in an arbitrary order. The shuffle RNG will be initialized with seed passed as command-line argument, and if a test fails, the seed will be displayed alongside the list of tests, so that this particular test order may be easily reproduced - by reusing the seed number.
Also, it turned out that a large number of tests we use fails if some other test was previously performed - for some tests this is natural, but there are many tests that should not break kernel state, yet they do. I've temporarily marked these tests with the KTEST_FLAG_BROKEN flag, and I'm planing to fix them.",True,{'HOORAY': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,195,2017-01-26T15:41:27Z,2017-01-27T21:12:58Z,2017-01-27T21:12:58Z,MERGED,True,439,145,31,https://github.com/rafalcieslak,Richer tests and CI support,24,[],https://github.com/cahirwpz/mimiker/pull/195,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/195#issuecomment-275556005,"This branch introduces better kernel test support:

Canonical failure/success messages for easy grepping over kernel output
Per-test flags: KTEST_FLAG_NORETURN, KTEST_FLAG_DIRTY, KTEST_FLAG_USERMODE.
Automatically running all tests (those which can be tested one after another) when command-line argument test=all is present
ktest_assert macro and KTEST_FAILURE return code
Displaying test name if it has failed
When running in all tests mode and a test fails, the full list of tests that were ran previously is displayed, with the failing test marked

This branch is not finished yet, I'm working on shuffling the test list so that the tests are ran in an arbitrary order. The shuffle RNG will be initialized with seed passed as command-line argument, and if a test fails, the seed will be displayed alongside the list of tests, so that this particular test order may be easily reproduced - by reusing the seed number.
Also, it turned out that a large number of tests we use fails if some other test was previously performed - for some tests this is natural, but there are many tests that should not break kernel state, yet they do. I've temporarily marked these tests with the KTEST_FLAG_BROKEN flag, and I'm planing to fix them.","Here's an example of use. I start the kernel with ./launch -t test=all seed=2. The tail of the output is:
  [...]

Running test uiomove.
Assertion 'res == 1' at uiomove.c:58 failed!
[TEST FAILED]
Failure while running multiple tests.
  strtol
  linker_set
  malloc
  findspace
  uiomove  <---- FAILED
The seed used for this test order was: 2. Start kernel with `test=all seed=2` to reproduce this test case.
[ktest.c:49] Halting kernel on failed test.

I find this quite convenient. And this mechanism has already helped me find some bugs that were not discovered by running each test separately!",True,{'HOORAY': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,195,2017-01-26T15:41:27Z,2017-01-27T21:12:58Z,2017-01-27T21:12:58Z,MERGED,True,439,145,31,https://github.com/rafalcieslak,Richer tests and CI support,24,[],https://github.com/cahirwpz/mimiker/pull/195,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/195#issuecomment-275647390,"This branch introduces better kernel test support:

Canonical failure/success messages for easy grepping over kernel output
Per-test flags: KTEST_FLAG_NORETURN, KTEST_FLAG_DIRTY, KTEST_FLAG_USERMODE.
Automatically running all tests (those which can be tested one after another) when command-line argument test=all is present
ktest_assert macro and KTEST_FAILURE return code
Displaying test name if it has failed
When running in all tests mode and a test fails, the full list of tests that were ran previously is displayed, with the failing test marked

This branch is not finished yet, I'm working on shuffling the test list so that the tests are ran in an arbitrary order. The shuffle RNG will be initialized with seed passed as command-line argument, and if a test fails, the seed will be displayed alongside the list of tests, so that this particular test order may be easily reproduced - by reusing the seed number.
Also, it turned out that a large number of tests we use fails if some other test was previously performed - for some tests this is natural, but there are many tests that should not break kernel state, yet they do. I've temporarily marked these tests with the KTEST_FLAG_BROKEN flag, and I'm planing to fix them.","I've also added a run_tests.py script which automatically runs kernel tests using some randomly selected seeds. It reports the nature of failure as well as the failing test order (for easy reproduction), returns 0/1 exit code on success/failure. I've hooked it to make test target.
Here's how it works in practice:
$ make test
Using CC: mipsel-unknown-elf-gcc -mips32r2 -EL -g
[DEP] tests/.broken.D
[CC] tests/broken.c -> tests/broken.o
[AR] tests/broken.o tests/callout.o tests/crash.o tests/exec.o tests/exec_misbehave.o tests/exec_fd_test.o tests/linker_set.o tests/malloc.o tests/mutex.o tests/physmem.o tests/pmap.o tests/producer_consumer.o tests/rtc.o tests/sched.o tests/strtol.o tests/syscall.o tests/thread.o tests/uiomove.o tests/vm_map.o tests/vfs.o -> tests/libtests.a
[LD] Linking kernel image: mimiker.elf
Testing seed 1484965626...
Test failure reported!

Failure while running multiple tests.
  linker_set
  pmap_user
  vm
  vfs
  uiomove
  findspace
  strtol
  malloc
  thread
  pmap_kernel
  broken_test  <---- FAILED
The seed used for this test order was: 1484965626. Start kernel with `test=all seed=1484965626` to reproduce this test case.
[ktest.c:51] Halting kernel on failed test.

[thread.c:91] Thread 'main' {0x8033e208} has finished.

Makefile:38: recipe for target 'test' failed
make: *** [test] Error 1

And here's a successful run:
$ make test
Using CC: mipsel-unknown-elf-gcc -mips32r2 -EL -g
[DEP] tests/.broken.D
[CC] tests/broken.c -> tests/broken.o
[AR] tests/broken.o tests/callout.o tests/crash.o tests/exec.o tests/exec_misbehave.o tests/exec_fd_test.o tests/linker_set.o tests/malloc.o tests/mutex.o tests/physmem.o tests/pmap.o tests/producer_consumer.o tests/rtc.o tests/sched.o tests/strtol.o tests/syscall.o tests/thread.o tests/uiomove.o tests/vm_map.o tests/vfs.o -> tests/libtests.a
[LD] Linking kernel image: mimiker.elf
Testing seed 69759498...
Testing seed 2792287138...
Testing seed 257390304...
Testing seed 4157792272...
Testing seed 3604868030...
Tests successful!

Another nice feature is that the ktest framework is now capable of detecting invalid memory address correctly, so that such faults within kernel tests will be considered a proper failure instead of looping endlessly.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,195,2017-01-26T15:41:27Z,2017-01-27T21:12:58Z,2017-01-27T21:12:58Z,MERGED,True,439,145,31,https://github.com/rafalcieslak,Richer tests and CI support,24,[],https://github.com/cahirwpz/mimiker/pull/195,https://github.com/rafalcieslak,4,https://github.com/cahirwpz/mimiker/pull/195#issuecomment-275649800,"This branch introduces better kernel test support:

Canonical failure/success messages for easy grepping over kernel output
Per-test flags: KTEST_FLAG_NORETURN, KTEST_FLAG_DIRTY, KTEST_FLAG_USERMODE.
Automatically running all tests (those which can be tested one after another) when command-line argument test=all is present
ktest_assert macro and KTEST_FAILURE return code
Displaying test name if it has failed
When running in all tests mode and a test fails, the full list of tests that were ran previously is displayed, with the failing test marked

This branch is not finished yet, I'm working on shuffling the test list so that the tests are ran in an arbitrary order. The shuffle RNG will be initialized with seed passed as command-line argument, and if a test fails, the seed will be displayed alongside the list of tests, so that this particular test order may be easily reproduced - by reusing the seed number.
Also, it turned out that a large number of tests we use fails if some other test was previously performed - for some tests this is natural, but there are many tests that should not break kernel state, yet they do. I've temporarily marked these tests with the KTEST_FLAG_BROKEN flag, and I'm planing to fix them.","As you can see, the tests are now running on Travis, and it correctly reports test failures (for example, see this build). I consider this branch ready for review.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,195,2017-01-26T15:41:27Z,2017-01-27T21:12:58Z,2017-01-27T21:12:58Z,MERGED,True,439,145,31,https://github.com/rafalcieslak,Richer tests and CI support,24,[],https://github.com/cahirwpz/mimiker/pull/195,https://github.com/cahirwpz,5,https://github.com/cahirwpz/mimiker/pull/195#issuecomment-275697067,"This branch introduces better kernel test support:

Canonical failure/success messages for easy grepping over kernel output
Per-test flags: KTEST_FLAG_NORETURN, KTEST_FLAG_DIRTY, KTEST_FLAG_USERMODE.
Automatically running all tests (those which can be tested one after another) when command-line argument test=all is present
ktest_assert macro and KTEST_FAILURE return code
Displaying test name if it has failed
When running in all tests mode and a test fails, the full list of tests that were ran previously is displayed, with the failing test marked

This branch is not finished yet, I'm working on shuffling the test list so that the tests are ran in an arbitrary order. The shuffle RNG will be initialized with seed passed as command-line argument, and if a test fails, the seed will be displayed alongside the list of tests, so that this particular test order may be easily reproduced - by reusing the seed number.
Also, it turned out that a large number of tests we use fails if some other test was previously performed - for some tests this is natural, but there are many tests that should not break kernel state, yet they do. I've temporarily marked these tests with the KTEST_FLAG_BROKEN flag, and I'm planing to fix them.","This change is highly desired QA feature, I hope it'll be ready for merge with master ASAP.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,195,2017-01-26T15:41:27Z,2017-01-27T21:12:58Z,2017-01-27T21:12:58Z,MERGED,True,439,145,31,https://github.com/rafalcieslak,Richer tests and CI support,24,[],https://github.com/cahirwpz/mimiker/pull/195,https://github.com/cahirwpz,6,https://github.com/cahirwpz/mimiker/pull/195#issuecomment-275767402,"This branch introduces better kernel test support:

Canonical failure/success messages for easy grepping over kernel output
Per-test flags: KTEST_FLAG_NORETURN, KTEST_FLAG_DIRTY, KTEST_FLAG_USERMODE.
Automatically running all tests (those which can be tested one after another) when command-line argument test=all is present
ktest_assert macro and KTEST_FAILURE return code
Displaying test name if it has failed
When running in all tests mode and a test fails, the full list of tests that were ran previously is displayed, with the failing test marked

This branch is not finished yet, I'm working on shuffling the test list so that the tests are ran in an arbitrary order. The shuffle RNG will be initialized with seed passed as command-line argument, and if a test fails, the seed will be displayed alongside the list of tests, so that this particular test order may be easily reproduced - by reusing the seed number.
Also, it turned out that a large number of tests we use fails if some other test was previously performed - for some tests this is natural, but there are many tests that should not break kernel state, yet they do. I've temporarily marked these tests with the KTEST_FLAG_BROKEN flag, and I'm planing to fix them.",LGTM Should I merge it ?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,195,2017-01-26T15:41:27Z,2017-01-27T21:12:58Z,2017-01-27T21:12:58Z,MERGED,True,439,145,31,https://github.com/rafalcieslak,Richer tests and CI support,24,[],https://github.com/cahirwpz/mimiker/pull/195,https://github.com/rafalcieslak,7,https://github.com/cahirwpz/mimiker/pull/195#issuecomment-275767797,"This branch introduces better kernel test support:

Canonical failure/success messages for easy grepping over kernel output
Per-test flags: KTEST_FLAG_NORETURN, KTEST_FLAG_DIRTY, KTEST_FLAG_USERMODE.
Automatically running all tests (those which can be tested one after another) when command-line argument test=all is present
ktest_assert macro and KTEST_FAILURE return code
Displaying test name if it has failed
When running in all tests mode and a test fails, the full list of tests that were ran previously is displayed, with the failing test marked

This branch is not finished yet, I'm working on shuffling the test list so that the tests are ran in an arbitrary order. The shuffle RNG will be initialized with seed passed as command-line argument, and if a test fails, the seed will be displayed alongside the list of tests, so that this particular test order may be easily reproduced - by reusing the seed number.
Also, it turned out that a large number of tests we use fails if some other test was previously performed - for some tests this is natural, but there are many tests that should not break kernel state, yet they do. I've temporarily marked these tests with the KTEST_FLAG_BROKEN flag, and I'm planing to fix them.",I believe it's ready.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,196,2017-01-27T15:04:33Z,2017-01-27T15:07:44Z,2017-01-27T15:07:44Z,MERGED,True,4,2,1,https://github.com/rafalcieslak,Fix for vfs_lookup vnode ref counting,1,[],https://github.com/cahirwpz/mimiker/pull/196,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/196,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,197,2017-01-28T00:47:23Z,2017-01-28T07:46:13Z,2017-01-28T07:46:13Z,MERGED,True,2,1,1,https://github.com/rafalcieslak,Fixed scheduler never getting started,1,[],https://github.com/cahirwpz/mimiker/pull/197,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/197,"I've noticed that when kernel tests are running, the scheduler was not started (sched_active is false). This makes it impossible to use conditional variables in tests, and these would be very useful for verifying multi-threaded tests.
Apparently the sched_run() that appears in kernel_init was never called, because it was preceded by a thread_switch_to. I've fixed this so that the ""main"" thread is properly registered in the scheduler, and then sched_run() is called.","I've noticed that when kernel tests are running, the scheduler was not started (sched_active is false). This makes it impossible to use conditional variables in tests, and these would be very useful for verifying multi-threaded tests.
Apparently the sched_run() that appears in kernel_init was never called, because it was preceded by a thread_switch_to. I've fixed this so that the ""main"" thread is properly registered in the scheduler, and then sched_run() is called.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,198,2017-01-28T01:26:30Z,2017-02-02T12:52:38Z,2017-02-02T12:52:38Z,MERGED,True,78,13,3,https://github.com/rafalcieslak,Replaced callout tests,8,[],https://github.com/cahirwpz/mimiker/pull/198,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/198,"NOTE: This branch incorporates #197, because it uses conditional variables, and these need a working scheduler!
I've looked at our existing callout test, and it's absolute trash. It needlessly messes up internal state, and only works if we're lucky enough to have no clock interrupts appear both in the meantime and before the test.
Here are three safer tests that verify whether callouts are processed correctly, whether the order of execution is right, and whether removing callouts actually stops them from being executed. They use conditional variables to notify the main test thread from a callout-triggered function about state change.","NOTE: This branch incorporates #197, because it uses conditional variables, and these need a working scheduler!
I've looked at our existing callout test, and it's absolute trash. It needlessly messes up internal state, and only works if we're lucky enough to have no clock interrupts appear both in the meantime and before the test.
Here are three safer tests that verify whether callouts are processed correctly, whether the order of execution is right, and whether removing callouts actually stops them from being executed. They use conditional variables to notify the main test thread from a callout-triggered function about state change.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,199,2017-01-28T13:53:17Z,2017-03-10T15:00:06Z,2017-03-10T15:00:06Z,MERGED,True,70,12,4,https://github.com/rafalcieslak,Various ktest fixes,12,[],https://github.com/cahirwpz/mimiker/pull/199,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/199,I'll be using this PR to investigate spuriously failing tests on Travis.,I'll be using this PR to investigate spuriously failing tests on Travis.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,199,2017-01-28T13:53:17Z,2017-03-10T15:00:06Z,2017-03-10T15:00:06Z,MERGED,True,70,12,4,https://github.com/rafalcieslak,Various ktest fixes,12,[],https://github.com/cahirwpz/mimiker/pull/199,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/199#issuecomment-275849759,I'll be using this PR to investigate spuriously failing tests on Travis.,"The result of this build suggests that QEMU did not even start within the timeout! pexpect received no output from the simulation at all. I've seen this happen on my local machine a few times, but it was quite rare. This sort of problem could happen when there is a daemon listening for TCP at port 8000, but I don't think this is the case in our Travis sandbox.
I'll have run_tests.py restart the simulation several times in case no output was received at all.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,199,2017-01-28T13:53:17Z,2017-03-10T15:00:06Z,2017-03-10T15:00:06Z,MERGED,True,70,12,4,https://github.com/rafalcieslak,Various ktest fixes,12,[],https://github.com/cahirwpz/mimiker/pull/199,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/199#issuecomment-275851872,I'll be using this PR to investigate spuriously failing tests on Travis.,"I don't know how to interpret this result. It looks like the kernel hangs on thread_switch_to. Unsurprisingly, I am not able to reproduce this scenario on my local machine. Note that these threads are not registered in the scheduler, so this is not an unlucky preemption. I'll try to come up with a way of debugging this non-interactively on Travis - assuming I will be able to trigger this problem again.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,199,2017-01-28T13:53:17Z,2017-03-10T15:00:06Z,2017-03-10T15:00:06Z,MERGED,True,70,12,4,https://github.com/rafalcieslak,Various ktest fixes,12,[],https://github.com/cahirwpz/mimiker/pull/199,https://github.com/rafalcieslak,4,https://github.com/cahirwpz/mimiker/pull/199#issuecomment-275868684,I'll be using this PR to investigate spuriously failing tests on Travis.,"One problem I've identified was that most memory tests were dirty, i.e. they did not restore original state when completed. Also sometimes it just happens that QEMU takes a very long time to start, or outputs an EOF immediately after starting - I've modified run_tests.py so that it will retry the test (up to 5 times) when such condition is detected, and it seems to have helped!
I'll keep restarting a recent build to (hopefully) identify more problems.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,199,2017-01-28T13:53:17Z,2017-03-10T15:00:06Z,2017-03-10T15:00:06Z,MERGED,True,70,12,4,https://github.com/rafalcieslak,Various ktest fixes,12,[],https://github.com/cahirwpz/mimiker/pull/199,https://github.com/rafalcieslak,5,https://github.com/cahirwpz/mimiker/pull/199#issuecomment-275870763,I'll be using this PR to investigate spuriously failing tests on Travis.,"Okay, so here's a summary of changes in this branch:

Memory tests now restore original state.
If QEMU for some reason fails to start at all, run_tests.py will retry the test several times.
Simulator process is now forcefully terminated when a test run completes of times out.
Printing [TEST_PASSED] now happens in a critical section, to avoid begin preempted whilst printing.

I am not entirely certain this fixes the problems we've observed, but it certainly fixes some problems. I've restart the recent build on Travis 10 times already, and all test runs were successful, so maybe this fix is on point.
I consider this PR ready for review.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,199,2017-01-28T13:53:17Z,2017-03-10T15:00:06Z,2017-03-10T15:00:06Z,MERGED,True,70,12,4,https://github.com/rafalcieslak,Various ktest fixes,12,[],https://github.com/cahirwpz/mimiker/pull/199,https://github.com/rafalcieslak,6,https://github.com/cahirwpz/mimiker/pull/199#issuecomment-277664533,I'll be using this PR to investigate spuriously failing tests on Travis.,"Wrapping kprintf in a critical section is controversial, so I've disabled it for now. After all, it is very unlikely this problem would cause a false-negative.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,200,2017-01-30T15:45:39Z,2017-03-26T23:21:14Z,2017-03-26T23:21:14Z,MERGED,True,11,4,1,https://github.com/rafalcieslak,Usermode kernel tests,32,[],https://github.com/cahirwpz/mimiker/pull/200,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/200,"Note: This branch is built on top of #198 and #199, so please review these two first!
This branch extends the ktest framework so that usermode programs may be treated as tests. In particular, we would like to run the fd_test program as proper test, I expect that we'll have many more similar tests in the future. The best way to explain the interface is to have a peek at the new version of exec_fd_test.c:
static void test_fd_user_thread(void *arg) {
  exec_args_t exec_args;
  exec_args.prog_name = ""fd_test"";
  exec_args.argv = (const char *[]){""fd_test""};
  exec_args.argc = 1;

  do_exec(&exec_args);
}

static int test_exec_fd_test() {
  thread_t *user_thread = thread_create(""fd_test"", test_fd_user_thread, NULL);
  sched_add(user_thread);
  ktest_wait_for_user_thread(user_thread, 1000);
  return KTEST_SUCCESS;
}
The ktest_wait_for_user_thread function is a blocking call which waits until user_thread exits, and tests its exit code - if it is non-zero, it will be reported as test failure. If 1000 ms have elapsed and user_thread did not finish, or if it performs invalid memory operation, it will be also treated as test failure.
The implementation is very simple and it uses a combination of a conditional variable in thread_t and a removable callout.
Thanks to this feature, I've been able to find a specific bug in vnode reference counting - I've fixed it in 62baf71. I'll cherry-pick this commit in a separate PR so that it can be merged quickly. Already merged.","Note: This branch is built on top of #198 and #199, so please review these two first!
This branch extends the ktest framework so that usermode programs may be treated as tests. In particular, we would like to run the fd_test program as proper test, I expect that we'll have many more similar tests in the future. The best way to explain the interface is to have a peek at the new version of exec_fd_test.c:
static void test_fd_user_thread(void *arg) {
  exec_args_t exec_args;
  exec_args.prog_name = ""fd_test"";
  exec_args.argv = (const char *[]){""fd_test""};
  exec_args.argc = 1;

  do_exec(&exec_args);
}

static int test_exec_fd_test() {
  thread_t *user_thread = thread_create(""fd_test"", test_fd_user_thread, NULL);
  sched_add(user_thread);
  ktest_wait_for_user_thread(user_thread, 1000);
  return KTEST_SUCCESS;
}
The ktest_wait_for_user_thread function is a blocking call which waits until user_thread exits, and tests its exit code - if it is non-zero, it will be reported as test failure. If 1000 ms have elapsed and user_thread did not finish, or if it performs invalid memory operation, it will be also treated as test failure.
The implementation is very simple and it uses a combination of a conditional variable in thread_t and a removable callout.
Thanks to this feature, I've been able to find a specific bug in vnode reference counting - I've fixed it in 62baf71. I'll cherry-pick this commit in a separate PR so that it can be merged quickly. Already merged.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,200,2017-01-30T15:45:39Z,2017-03-26T23:21:14Z,2017-03-26T23:21:14Z,MERGED,True,11,4,1,https://github.com/rafalcieslak,Usermode kernel tests,32,[],https://github.com/cahirwpz/mimiker/pull/200,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/200#issuecomment-287334135,"Note: This branch is built on top of #198 and #199, so please review these two first!
This branch extends the ktest framework so that usermode programs may be treated as tests. In particular, we would like to run the fd_test program as proper test, I expect that we'll have many more similar tests in the future. The best way to explain the interface is to have a peek at the new version of exec_fd_test.c:
static void test_fd_user_thread(void *arg) {
  exec_args_t exec_args;
  exec_args.prog_name = ""fd_test"";
  exec_args.argv = (const char *[]){""fd_test""};
  exec_args.argc = 1;

  do_exec(&exec_args);
}

static int test_exec_fd_test() {
  thread_t *user_thread = thread_create(""fd_test"", test_fd_user_thread, NULL);
  sched_add(user_thread);
  ktest_wait_for_user_thread(user_thread, 1000);
  return KTEST_SUCCESS;
}
The ktest_wait_for_user_thread function is a blocking call which waits until user_thread exits, and tests its exit code - if it is non-zero, it will be reported as test failure. If 1000 ms have elapsed and user_thread did not finish, or if it performs invalid memory operation, it will be also treated as test failure.
The implementation is very simple and it uses a combination of a conditional variable in thread_t and a removable callout.
Thanks to this feature, I've been able to find a specific bug in vnode reference counting - I've fixed it in 62baf71. I'll cherry-pick this commit in a separate PR so that it can be merged quickly. Already merged.",Just a random question... couldn't we rename ktest_usermode_exit to thread_cancel or thread_exit; ktest_wait_for_user_thread to thread_join_timeout; and make those belong to thread interface?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,200,2017-01-30T15:45:39Z,2017-03-26T23:21:14Z,2017-03-26T23:21:14Z,MERGED,True,11,4,1,https://github.com/rafalcieslak,Usermode kernel tests,32,[],https://github.com/cahirwpz/mimiker/pull/200,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/200#issuecomment-289324715,"Note: This branch is built on top of #198 and #199, so please review these two first!
This branch extends the ktest framework so that usermode programs may be treated as tests. In particular, we would like to run the fd_test program as proper test, I expect that we'll have many more similar tests in the future. The best way to explain the interface is to have a peek at the new version of exec_fd_test.c:
static void test_fd_user_thread(void *arg) {
  exec_args_t exec_args;
  exec_args.prog_name = ""fd_test"";
  exec_args.argv = (const char *[]){""fd_test""};
  exec_args.argc = 1;

  do_exec(&exec_args);
}

static int test_exec_fd_test() {
  thread_t *user_thread = thread_create(""fd_test"", test_fd_user_thread, NULL);
  sched_add(user_thread);
  ktest_wait_for_user_thread(user_thread, 1000);
  return KTEST_SUCCESS;
}
The ktest_wait_for_user_thread function is a blocking call which waits until user_thread exits, and tests its exit code - if it is non-zero, it will be reported as test failure. If 1000 ms have elapsed and user_thread did not finish, or if it performs invalid memory operation, it will be also treated as test failure.
The implementation is very simple and it uses a combination of a conditional variable in thread_t and a removable callout.
Thanks to this feature, I've been able to find a specific bug in vnode reference counting - I've fixed it in 62baf71. I'll cherry-pick this commit in a separate PR so that it can be merged quickly. Already merged.","Funny thing, this branch got trimmed down from 250 diff lines to barely 10.
It's should be simple to review it now :-)",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,201,2017-01-30T15:51:29Z,2017-01-30T21:35:24Z,2017-01-30T21:35:24Z,MERGED,True,7,1,3,https://github.com/rafalcieslak,Fixed vnode ref counting on vfs_open and vnode_generic_close,1,[],https://github.com/cahirwpz/mimiker/pull/201,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/201,This is a fairly simple fix for vnode ref counts that I've discovered while working on #200.,This is a fairly simple fix for vnode ref counts that I've discovered while working on #200.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,201,2017-01-30T15:51:29Z,2017-01-30T21:35:24Z,2017-01-30T21:35:24Z,MERGED,True,7,1,3,https://github.com/rafalcieslak,Fixed vnode ref counting on vfs_open and vnode_generic_close,1,[],https://github.com/cahirwpz/mimiker/pull/201,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/201#issuecomment-276100758,This is a fairly simple fix for vnode ref counts that I've discovered while working on #200.,Note: This travis check failure is most likely fixed by #199.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,202,2017-01-30T16:29:32Z,2017-03-10T15:52:42Z,2017-03-10T15:52:42Z,MERGED,True,40,27,3,https://github.com/rafalcieslak,Repeatitive ktesting,14,[],https://github.com/cahirwpz/mimiker/pull/202,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/202,"Note: This branch is built on top of #199, so please review it first.
Kernel tests are expected to leave kernel in unmodified state, so it should be perfectly sound to run a single test multiple times. If some actions triggered by a test break internal kernel state, it is possible that a subsequent run of the same test will be a failure - even though other tests run just fine.
For this reason I've implemented an option which allows copying each test on the list several times, before the list of tests is shuffled. This way the tests will be even more thorough.
Thanks to this mechanism, I've already identified a problem in kernel_pmap test, and I've fixed it in 9799e39. I'll cherry-pick this commit in a separate branch so that it may be merged quickly. Already merged.","Note: This branch is built on top of #199, so please review it first.
Kernel tests are expected to leave kernel in unmodified state, so it should be perfectly sound to run a single test multiple times. If some actions triggered by a test break internal kernel state, it is possible that a subsequent run of the same test will be a failure - even though other tests run just fine.
For this reason I've implemented an option which allows copying each test on the list several times, before the list of tests is shuffled. This way the tests will be even more thorough.
Thanks to this mechanism, I've already identified a problem in kernel_pmap test, and I've fixed it in 9799e39. I'll cherry-pick this commit in a separate branch so that it may be merged quickly. Already merged.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,203,2017-01-30T16:32:48Z,2017-01-30T21:36:40Z,2017-01-30T21:36:40Z,MERGED,True,1,1,1,https://github.com/rafalcieslak,Fixed kernel_pmap test destroying kernel pmap,1,[],https://github.com/cahirwpz/mimiker/pull/203,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/203,"This is a straight-forward fix for an obvious bug in pmap_kernel test, which I've found while working on #202.","This is a straight-forward fix for an obvious bug in pmap_kernel test, which I've found while working on #202.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,204,2017-02-15T01:31:48Z,2017-03-10T16:10:50Z,2017-05-23T12:52:42Z,MERGED,True,18,8,4,https://github.com/dyniec,Toolchain in deb package,3,[],https://github.com/cahirwpz/mimiker/pull/204,https://github.com/dyniec,1,https://github.com/cahirwpz/mimiker/pull/204,"Toolchain is installed in /opt. $PATH isn't touched, so .travis.yml exports new value.
dh_make is required to package.","Toolchain is installed in /opt. $PATH isn't touched, so .travis.yml exports new value.
dh_make is required to package.",True,{'HOORAY': ['https://github.com/rafalcieslak']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,205,2017-03-14T11:46:07Z,2017-03-21T13:32:18Z,2017-03-21T13:32:18Z,MERGED,True,160,16,5,https://github.com/czapiga,rwlock tests and bug fixes,8,['bug'],https://github.com/cahirwpz/mimiker/pull/205,https://github.com/czapiga,1,https://github.com/cahirwpz/mimiker/pull/205,Created few sanity checks for rwlocks and fixed bugs in rw_try_upgrade and __rw_assert.,Created few sanity checks for rwlocks and fixed bugs in rw_try_upgrade and __rw_assert.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,206,2017-03-17T10:19:10Z,2017-03-17T11:00:31Z,2017-03-17T11:00:32Z,MERGED,True,5,4,2,https://github.com/rafalcieslak,Minor improvements to ktests output,1,[],https://github.com/cahirwpz/mimiker/pull/206,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/206,"Some cosmetic fixes to test output display. Most importantly, I've learned about pexpect's before which allows me to gather and print out the entire kernel output in case of a failed test - this will make it much easier to investigate travis failures.","Some cosmetic fixes to test output display. Most importantly, I've learned about pexpect's before which allows me to gather and print out the entire kernel output in case of a failed test - this will make it much easier to investigate travis failures.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,207,2017-03-17T11:00:31Z,2017-03-17T12:47:28Z,2017-03-17T12:47:28Z,MERGED,True,45,3,3,https://github.com/rafalcieslak,Implemented ktests with a random integer,3,[],https://github.com/cahirwpz/mimiker/pull/207,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/207,Yet another ktest feature: Tests added with KTEST_ADD_RANDINT will be passed a random (deterministic) integer as an argument. The range [0..max] may be specified as an extra argument when registering the test.,Yet another ktest feature: Tests added with KTEST_ADD_RANDINT will be passed a random (deterministic) integer as an argument. The range [0..max] may be specified as an extra argument when registering the test.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,207,2017-03-17T11:00:31Z,2017-03-17T12:47:28Z,2017-03-17T12:47:28Z,MERGED,True,45,3,3,https://github.com/rafalcieslak,Implemented ktests with a random integer,3,[],https://github.com/cahirwpz/mimiker/pull/207,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/207#issuecomment-287334458,Yet another ktest feature: Tests added with KTEST_ADD_RANDINT will be passed a random (deterministic) integer as an argument. The range [0..max] may be specified as an extra argument when registering the test.,LGTM. Please run clang-format on the change.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,208,2017-03-17T11:09:32Z,2017-03-17T17:36:16Z,2017-03-17T17:36:16Z,MERGED,True,76,72,14,https://github.com/rafalcieslak,Convenient ktest_assert alias,7,[],https://github.com/cahirwpz/mimiker/pull/208,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/208,"I've recently noticed @czapiga using assert when writing new tests, while he should choose ktest_assert instead, as this variant correctly notifies the testing framework about a failure.
We can avoid this inconvenience by defining assert to be an alias of ktest_assert when compiling sources in ./tests directory.","I've recently noticed @czapiga using assert when writing new tests, while he should choose ktest_assert instead, as this variant correctly notifies the testing framework about a failure.
We can avoid this inconvenience by defining assert to be an alias of ktest_assert when compiling sources in ./tests directory.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,208,2017-03-17T11:09:32Z,2017-03-17T17:36:16Z,2017-03-17T17:36:16Z,MERGED,True,76,72,14,https://github.com/rafalcieslak,Convenient ktest_assert alias,7,[],https://github.com/cahirwpz/mimiker/pull/208,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/208#issuecomment-287333578,"I've recently noticed @czapiga using assert when writing new tests, while he should choose ktest_assert instead, as this variant correctly notifies the testing framework about a failure.
We can avoid this inconvenience by defining assert to be an alias of ktest_assert when compiling sources in ./tests directory.",How about redirecting regular calls to assert (e.g. in pmap module to ktest_assert)? I'd like the test framework to capture failed assertions in all code called by a test.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,208,2017-03-17T11:09:32Z,2017-03-17T17:36:16Z,2017-03-17T17:36:16Z,MERGED,True,76,72,14,https://github.com/rafalcieslak,Convenient ktest_assert alias,7,[],https://github.com/cahirwpz/mimiker/pull/208,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/208#issuecomment-287362714,"I've recently noticed @czapiga using assert when writing new tests, while he should choose ktest_assert instead, as this variant correctly notifies the testing framework about a failure.
We can avoid this inconvenience by defining assert to be an alias of ktest_assert when compiling sources in ./tests directory.","This seems like a good idea.
kprintf(""Assertion .... failed"");
if(ktest_test_running_flag)
  ktest_failure();
else
  panic(...);
As this logic requires peeking into ktest_running_test_flag, I'll have to implement it as a proper function and not within the assert macro (which should still provide condition check so that we pay the cost of a function call only if the assertion actually fails). I'm not sure which .c file should this implementation belong to, is it okay if I create assert.c?
EDIT: If we choose to implement such function called whenever any assertion fails, it will be handy to place a breakpoint on it within .gdbinit.",True,{'THUMBS_UP': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,208,2017-03-17T11:09:32Z,2017-03-17T17:36:16Z,2017-03-17T17:36:16Z,MERGED,True,76,72,14,https://github.com/rafalcieslak,Convenient ktest_assert alias,7,[],https://github.com/cahirwpz/mimiker/pull/208,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/208#issuecomment-287377930,"I've recently noticed @czapiga using assert when writing new tests, while he should choose ktest_assert instead, as this variant correctly notifies the testing framework about a failure.
We can avoid this inconvenience by defining assert to be an alias of ktest_assert when compiling sources in ./tests directory.","Yes, it is ok to create assert.c file.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,209,2017-03-17T11:20:45Z,2017-03-17T11:23:31Z,2017-03-17T11:23:31Z,MERGED,True,1,1,1,https://github.com/rafalcieslak,Removed a non-ascii character from kmalloc_dump,1,[],https://github.com/cahirwpz/mimiker/pull/209,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/209,"The dash in:
""[kmalloc]  malloc_arena %p – %p:\n""

was a non-ascii character. This disables travis from correctly displaying failed test output!
It looks as if someone's editor used automatic fancy unicode character substitution.","The dash in:
""[kmalloc]  malloc_arena %p – %p:\n""

was a non-ascii character. This disables travis from correctly displaying failed test output!
It looks as if someone's editor used automatic fancy unicode character substitution.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,210,2017-03-17T11:54:04Z,2017-03-17T11:58:53Z,2017-03-17T11:58:53Z,MERGED,True,218,213,20,https://github.com/rafalcieslak,Formatted sources,1,[],https://github.com/cahirwpz/mimiker/pull/210,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/210,"I need to make format my new changes, but that introduces a lot of formatting fixes for old sources - so as the first step I've formatted all sources currently in master.","I need to make format my new changes, but that introduces a lot of formatting fixes for old sources - so as the first step I've formatted all sources currently in master.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,211,2017-03-17T12:25:26Z,2017-03-21T14:19:43Z,2017-03-21T14:19:43Z,MERGED,True,29,12,2,https://github.com/rafalcieslak,Various callout fixes,16,[],https://github.com/cahirwpz/mimiker/pull/211,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/211,"I created this PR only so that I can debug travis test results, please ignore it for now.","I created this PR only so that I can debug travis test results, please ignore it for now.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,211,2017-03-17T12:25:26Z,2017-03-21T14:19:43Z,2017-03-21T14:19:43Z,MERGED,True,29,12,2,https://github.com/rafalcieslak,Various callout fixes,16,[],https://github.com/cahirwpz/mimiker/pull/211,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/211#issuecomment-287353853,"I created this PR only so that I can debug travis test results, please ignore it for now.","It appears that callout's ci.last may lag behind actual time quite a lot! This is because ci.last is incremented not until it equals time... but until it equals time modulo CALLOUT_BUCKETS (10). Therefore, it a clock interrupt arrives late (e.g. we spent a long time in a critical section), ci.last will be permanently lower than actual current time - and in result registering a callout with callout_setup_relative computes a too small c_time, so the callout gets triggered far too early (or even immediatelly).
And that causes a second problem. When multiple callouts from the same bucket are triggered at once, their order of execution is the same as the order of registration - and thus it is not guaranteed that action A, scheduled for a time earlier than B, will actually execute before B. So the callout_order test fails. (We would have to sort scheduled events before executing them, but sorting is O(nlogn), and we don't want to spend much time under an interrupt!)
The callout_stop test fails when a clock interrupt arrives after a ""bad"" callout was added, but before it was removed. This should not happen, because the ""bad"" callout is scheduled at +10ms, which should be much more than enough. However, if ci.last is more than 10ms behind actual time, the ""bad"" callout will fire as soon as any clock interrupt arrives, which may happen way before the callout is unregistered.
The way I see it, these observations prove that our current callout implementation is based on a completely flawed design, and will require a major rewrite.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,211,2017-03-17T12:25:26Z,2017-03-21T14:19:43Z,2017-03-21T14:19:43Z,MERGED,True,29,12,2,https://github.com/rafalcieslak,Various callout fixes,16,[],https://github.com/cahirwpz/mimiker/pull/211,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/211#issuecomment-287355232,"I created this PR only so that I can debug travis test results, please ignore it for now.","Now, I can fix the callout_process routine so that ci.last is correctly updated, and thus fix the problems that appear on Travis. However, I am not sure if it is worth it: the callout implementation will be still broken due to how it calls multiple triggers in the same bucked according to registration order. And the modulo comparison between actual time and ci.last may cause some callouts to be ignored when processing a late (delayed) clock interrupt.
So I can provide a valid workaround for the issue we experience on Travis, but we would still have to consider callouts as utterly broken.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,211,2017-03-17T12:25:26Z,2017-03-21T14:19:43Z,2017-03-21T14:19:43Z,MERGED,True,29,12,2,https://github.com/rafalcieslak,Various callout fixes,16,[],https://github.com/cahirwpz/mimiker/pull/211,https://github.com/rafalcieslak,4,https://github.com/cahirwpz/mimiker/pull/211#issuecomment-287355930,"I created this PR only so that I can debug travis test results, please ignore it for now.","One more note: The reason why this problem does not appear on ovpsim is because we receive clock interrupts there once every 2 milliseconds (which is lower than CALLOUT_BUCKETS, so the modulo comparison never lets ci.last drift too far away), while on qemu we receive them once per 2-20 milliseconds.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,211,2017-03-17T12:25:26Z,2017-03-21T14:19:43Z,2017-03-21T14:19:43Z,MERGED,True,29,12,2,https://github.com/rafalcieslak,Various callout fixes,16,[],https://github.com/cahirwpz/mimiker/pull/211,https://github.com/rafalcieslak,5,https://github.com/cahirwpz/mimiker/pull/211#issuecomment-287422811,"I created this PR only so that I can debug travis test results, please ignore it for now.","I've cleaned up this branch so that the changes it introduces are actually useful.
Summary:

Rewritten the main loop of callout_process so that it never skips any triggers even if time delta is large, and always correctly updates ci.last.
Increased the number of callout buckets. The purpose of these buckets is such that we don't want to iterate over many registered callouts each time callout_process is called, and therefore we limit our search to valid buckets. Thus, the more buckets we use, the less work each callout_process has to do (ignoring cache behavior), and we totally can afford 64 buckets. What is important is that callouts may be triggered out-of-order only when the time delta between subsequent callout_process calls is greater than the number of buckets. 10 buckets was definitely too little (as I've observed occasional deltas >25ms on Travis), yet it would be pretty weird if we were to not receive any clock interrupt for more than 64ms.
Wrapped callout tests preparation in a critical section, so that interrupts won't interfere with relative timing calculations.

Still, in case of a >64ms lag, some callouts may be triggered out-of-order. Note that this can't be solved by using an RB-tree in each bucket, since in the case of such a large time difference all buckets are browsed.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,215,2017-03-24T22:06:39Z,2017-03-25T10:29:27Z,2017-03-25T10:29:27Z,MERGED,True,5,4,3,https://github.com/rafalcieslak,Formatted sources,1,[],https://github.com/cahirwpz/mimiker/pull/215,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/215,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,216,2017-03-24T22:53:31Z,2017-06-06T14:33:02Z,2017-06-06T14:33:02Z,MERGED,True,128,2,7,https://github.com/rafalcieslak,Worker thread,30,[],https://github.com/cahirwpz/mimiker/pull/216,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/216,"This is a continuation of #185 moved to a new branch and rebased on top of current master.
New features:

thread_join
Taskqueues/workqueue
Cleaning up after a thread has exitted (thread_delete was unused until now)
Thread exit code

Again, this PR incorporates some code formatting fixes in unrelated files.
I should probably merge workqueue.* files into taskqueue.*, would you like me to do that?","This is a continuation of #185 moved to a new branch and rebased on top of current master.
New features:

thread_join
Taskqueues/workqueue
Cleaning up after a thread has exitted (thread_delete was unused until now)
Thread exit code

Again, this PR incorporates some code formatting fixes in unrelated files.
I should probably merge workqueue.* files into taskqueue.*, would you like me to do that?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,216,2017-03-24T22:53:31Z,2017-06-06T14:33:02Z,2017-06-06T14:33:02Z,MERGED,True,128,2,7,https://github.com/rafalcieslak,Worker thread,30,[],https://github.com/cahirwpz/mimiker/pull/216,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/216#issuecomment-289163331,"This is a continuation of #185 moved to a new branch and rebased on top of current master.
New features:

thread_join
Taskqueues/workqueue
Cleaning up after a thread has exitted (thread_delete was unused until now)
Thread exit code

Again, this PR incorporates some code formatting fixes in unrelated files.
I should probably merge workqueue.* files into taskqueue.*, would you like me to do that?",This current Travis test failure is addressed by #217.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,216,2017-03-24T22:53:31Z,2017-06-06T14:33:02Z,2017-06-06T14:33:02Z,MERGED,True,128,2,7,https://github.com/rafalcieslak,Worker thread,30,[],https://github.com/cahirwpz/mimiker/pull/216,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/216#issuecomment-289265847,"This is a continuation of #185 moved to a new branch and rebased on top of current master.
New features:

thread_join
Taskqueues/workqueue
Cleaning up after a thread has exitted (thread_delete was unused until now)
Thread exit code

Again, this PR incorporates some code formatting fixes in unrelated files.
I should probably merge workqueue.* files into taskqueue.*, would you like me to do that?",Please merge workqueue and taskqueue as you mentioned in the initial comment.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,216,2017-03-24T22:53:31Z,2017-06-06T14:33:02Z,2017-06-06T14:33:02Z,MERGED,True,128,2,7,https://github.com/rafalcieslak,Worker thread,30,[],https://github.com/cahirwpz/mimiker/pull/216,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/216#issuecomment-289273428,"This is a continuation of #185 moved to a new branch and rebased on top of current master.
New features:

thread_join
Taskqueues/workqueue
Cleaning up after a thread has exitted (thread_delete was unused until now)
Thread exit code

Again, this PR incorporates some code formatting fixes in unrelated files.
I should probably merge workqueue.* files into taskqueue.*, would you like me to do that?","Apparently we don't need to implement taskqueue to clean up after a thread exits. Please have a look at FreeBSD's thread_reap – it's called from thread_alloc and thread_wait, which make sense! NetBSD provides similar procedure called lwp_free which again is called in lwp_create and lwp_wait, though FreeBSD's implementation seems to be cleaner.
They both use a queue of threads to be destroyed (zombies), instead of taskqueue.
My proposal is to split this PR into one that solely focuses on thread_join and thread_exit, and other that implements taskqueue's. I'll review thread related PR first. I'm waiting for your feedback.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,216,2017-03-24T22:53:31Z,2017-06-06T14:33:02Z,2017-06-06T14:33:02Z,MERGED,True,128,2,7,https://github.com/rafalcieslak,Worker thread,30,[],https://github.com/cahirwpz/mimiker/pull/216,https://github.com/cahirwpz,5,https://github.com/cahirwpz/mimiker/pull/216#issuecomment-290982852,"This is a continuation of #185 moved to a new branch and rebased on top of current master.
New features:

thread_join
Taskqueues/workqueue
Cleaning up after a thread has exitted (thread_delete was unused until now)
Thread exit code

Again, this PR incorporates some code formatting fixes in unrelated files.
I should probably merge workqueue.* files into taskqueue.*, would you like me to do that?",I have to evaluate how actually we want taskqueue's to be used in the kernel. By looking at FreeBSD kernel source it's not yet apparent to me.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,216,2017-03-24T22:53:31Z,2017-06-06T14:33:02Z,2017-06-06T14:33:02Z,MERGED,True,128,2,7,https://github.com/rafalcieslak,Worker thread,30,[],https://github.com/cahirwpz/mimiker/pull/216,https://github.com/rafalcieslak,6,https://github.com/cahirwpz/mimiker/pull/216#issuecomment-293333710,"This is a continuation of #185 moved to a new branch and rebased on top of current master.
New features:

thread_join
Taskqueues/workqueue
Cleaning up after a thread has exitted (thread_delete was unused until now)
Thread exit code

Again, this PR incorporates some code formatting fixes in unrelated files.
I should probably merge workqueue.* files into taskqueue.*, would you like me to do that?",We've decided to reimplement it so that all memory is allocated outside work queue interface.,True,{'THUMBS_UP': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,216,2017-03-24T22:53:31Z,2017-06-06T14:33:02Z,2017-06-06T14:33:02Z,MERGED,True,128,2,7,https://github.com/rafalcieslak,Worker thread,30,[],https://github.com/cahirwpz/mimiker/pull/216,https://github.com/rafalcieslak,7,https://github.com/cahirwpz/mimiker/pull/216#issuecomment-298380626,"This is a continuation of #185 moved to a new branch and rebased on top of current master.
New features:

thread_join
Taskqueues/workqueue
Cleaning up after a thread has exitted (thread_delete was unused until now)
Thread exit code

Again, this PR incorporates some code formatting fixes in unrelated files.
I should probably merge workqueue.* files into taskqueue.*, would you like me to do that?","@cahirwpz Can I please get a status update on this one? Workqueues are required to implement callout improvements (#213), which are necessary for better timeout support, and nanosleep-like systemcalls.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,216,2017-03-24T22:53:31Z,2017-06-06T14:33:02Z,2017-06-06T14:33:02Z,MERGED,True,128,2,7,https://github.com/rafalcieslak,Worker thread,30,[],https://github.com/cahirwpz/mimiker/pull/216,https://github.com/cahirwpz,8,https://github.com/cahirwpz/mimiker/pull/216#issuecomment-298685409,"This is a continuation of #185 moved to a new branch and rebased on top of current master.
New features:

thread_join
Taskqueues/workqueue
Cleaning up after a thread has exitted (thread_delete was unused until now)
Thread exit code

Again, this PR incorporates some code formatting fixes in unrelated files.
I should probably merge workqueue.* files into taskqueue.*, would you like me to do that?","@rafalcieslak This task has relatively low priority. ATM it's important for me to finish review of #271 and #276, and continue my work towards more complete driver infrastructure.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,216,2017-03-24T22:53:31Z,2017-06-06T14:33:02Z,2017-06-06T14:33:02Z,MERGED,True,128,2,7,https://github.com/rafalcieslak,Worker thread,30,[],https://github.com/cahirwpz/mimiker/pull/216,https://github.com/cahirwpz,9,https://github.com/cahirwpz/mimiker/pull/216#issuecomment-306504891,"This is a continuation of #185 moved to a new branch and rebased on top of current master.
New features:

thread_join
Taskqueues/workqueue
Cleaning up after a thread has exitted (thread_delete was unused until now)
Thread exit code

Again, this PR incorporates some code formatting fixes in unrelated files.
I should probably merge workqueue.* files into taskqueue.*, would you like me to do that?","I've decoupled thread management from taskqueue. Though there's no immediate need to use this interface, I'll integrate it with the kernel. I hope it'll be a good starting point for message ports (as known from microkernels) implementation.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,217,2017-03-24T23:02:24Z,2017-03-25T15:09:08Z,2017-03-25T15:09:08Z,MERGED,True,2,2,1,https://github.com/rafalcieslak,Increased time intervals for callout_stop test,1,[],https://github.com/cahirwpz/mimiker/pull/217,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/217,"When fixing callout implementation I forgot to increase time intervals for callout_stop test. 40ms is twice as much as the largest qemu lag on travis I've ever experienced, so it should be just enough for now.","When fixing callout implementation I forgot to increase time intervals for callout_stop test. 40ms is twice as much as the largest qemu lag on travis I've ever experienced, so it should be just enough for now.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,218,2017-03-25T01:14:36Z,2017-04-09T11:55:08Z,2017-04-09T11:55:08Z,MERGED,True,153,18,17,https://github.com/rafalcieslak,Basic fork,12,[],https://github.com/cahirwpz/mimiker/pull/218,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/218,"This is my most recent attempt at implementing a basic fork(). It almost seems too simple to work! Did I miss anything important?
This implementation shares the userspace memory between parent and child (!!!) which is, naturally, a major issue, as both threads will use the same user stack. We're not ready to perform COW yet, so I suppose I'll just have to clone the entire td_uspace vm_map (which is probably okay for now, but please confirm before I put effort into writing such mechanism).
I am super hyped by this branch, as this fork uncovered a major bugs in descriptor table management! I'll extract the fix as a separate PR soon.
Some parts of do_fork are very platform-dependent, but I can't come up with some elegant ways of abstracting them, so I could use some hints.
I believe this is the high time we've decided on our fork interface. Do we want a richer (clone-like maybe) interface? If yes, what options shall we support? Shared/cloned vm, shared/cloned descriptor table, optional vfork come to mind. Do we wish to implement such richer interface as another syscall, separate from plain simple fork (although they both could share implementation, just with a different set of parameters)?","This is my most recent attempt at implementing a basic fork(). It almost seems too simple to work! Did I miss anything important?
This implementation shares the userspace memory between parent and child (!!!) which is, naturally, a major issue, as both threads will use the same user stack. We're not ready to perform COW yet, so I suppose I'll just have to clone the entire td_uspace vm_map (which is probably okay for now, but please confirm before I put effort into writing such mechanism).
I am super hyped by this branch, as this fork uncovered a major bugs in descriptor table management! I'll extract the fix as a separate PR soon.
Some parts of do_fork are very platform-dependent, but I can't come up with some elegant ways of abstracting them, so I could use some hints.
I believe this is the high time we've decided on our fork interface. Do we want a richer (clone-like maybe) interface? If yes, what options shall we support? Shared/cloned vm, shared/cloned descriptor table, optional vfork come to mind. Do we wish to implement such richer interface as another syscall, separate from plain simple fork (although they both could share implementation, just with a different set of parameters)?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,218,2017-03-25T01:14:36Z,2017-04-09T11:55:08Z,2017-04-09T11:55:08Z,MERGED,True,153,18,17,https://github.com/rafalcieslak,Basic fork,12,[],https://github.com/cahirwpz/mimiker/pull/218,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/218#issuecomment-289276360,"This is my most recent attempt at implementing a basic fork(). It almost seems too simple to work! Did I miss anything important?
This implementation shares the userspace memory between parent and child (!!!) which is, naturally, a major issue, as both threads will use the same user stack. We're not ready to perform COW yet, so I suppose I'll just have to clone the entire td_uspace vm_map (which is probably okay for now, but please confirm before I put effort into writing such mechanism).
I am super hyped by this branch, as this fork uncovered a major bugs in descriptor table management! I'll extract the fix as a separate PR soon.
Some parts of do_fork are very platform-dependent, but I can't come up with some elegant ways of abstracting them, so I could use some hints.
I believe this is the high time we've decided on our fork interface. Do we want a richer (clone-like maybe) interface? If yes, what options shall we support? Shared/cloned vm, shared/cloned descriptor table, optional vfork come to mind. Do we wish to implement such richer interface as another syscall, separate from plain simple fork (although they both could share implementation, just with a different set of parameters)?","I'm in the process of reading fork() implementation in both FreeBSD and NetBSD. In principle is rather trivial. I guess we can start with simple interface and then gradually modify it having more sophisticated requirements.
I'll have a look at platform dependant parts of fork implementation. I remember seeing fork_trampoline to be written in assembly.
I guess just copying td_uspace will do for now, although I have to look at this mechanism in *BSD kernels to make sure we don't make a mistake.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,218,2017-03-25T01:14:36Z,2017-04-09T11:55:08Z,2017-04-09T11:55:08Z,MERGED,True,153,18,17,https://github.com/rafalcieslak,Basic fork,12,[],https://github.com/cahirwpz/mimiker/pull/218,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/218#issuecomment-289279240,"This is my most recent attempt at implementing a basic fork(). It almost seems too simple to work! Did I miss anything important?
This implementation shares the userspace memory between parent and child (!!!) which is, naturally, a major issue, as both threads will use the same user stack. We're not ready to perform COW yet, so I suppose I'll just have to clone the entire td_uspace vm_map (which is probably okay for now, but please confirm before I put effort into writing such mechanism).
I am super hyped by this branch, as this fork uncovered a major bugs in descriptor table management! I'll extract the fix as a separate PR soon.
Some parts of do_fork are very platform-dependent, but I can't come up with some elegant ways of abstracting them, so I could use some hints.
I believe this is the high time we've decided on our fork interface. Do we want a richer (clone-like maybe) interface? If yes, what options shall we support? Shared/cloned vm, shared/cloned descriptor table, optional vfork come to mind. Do we wish to implement such richer interface as another syscall, separate from plain simple fork (although they both could share implementation, just with a different set of parameters)?","What happens during fork_trampoline is pretty much the same was what we do with user_exc_leave.
EDIT: I've already moved machine-dependent parts away from do_fork, and it looks much better in current state than few commits before.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,219,2017-03-25T12:18:13Z,2017-03-25T15:03:42Z,2017-03-25T15:03:42Z,MERGED,True,3,1,1,https://github.com/rafalcieslak,Fixed fdtab_copy,1,[],https://github.com/cahirwpz/mimiker/pull/219,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/219,Extracted from #218.,Extracted from #218.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,220,2017-03-25T12:29:53Z,2017-03-25T15:02:23Z,2017-03-25T15:02:23Z,MERGED,True,12,6,1,https://github.com/rafalcieslak,Implemented `--ovpsim` option for ./run_tests.py,1,[],https://github.com/cahirwpz/mimiker/pull/220,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/220,Useful when running tests on a local machine.,Useful when running tests on a local machine.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,221,2017-03-25T12:35:36Z,2017-03-25T15:08:44Z,2017-03-25T15:08:44Z,MERGED,True,16,15,1,https://github.com/rafalcieslak,Fixed test/server inconsiscency in launch script,3,[],https://github.com/cahirwpz/mimiker/pull/221,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/221,"This bug was originally discovered by @strzkrzysiek.
When launching the kernel using ./launch script with -t option (which is useful for redirecting kernel output to another terminal or file) and -d option simultaneously, both qemu monitor and gdb interface will hook to the same terminal, and will share input/output, making it impossible to enter gdb commands.
This patch disables the qemu monitor in test mode - we do not use the monitor interface anyway.","This bug was originally discovered by @strzkrzysiek.
When launching the kernel using ./launch script with -t option (which is useful for redirecting kernel output to another terminal or file) and -d option simultaneously, both qemu monitor and gdb interface will hook to the same terminal, and will share input/output, making it impossible to enter gdb commands.
This patch disables the qemu monitor in test mode - we do not use the monitor interface anyway.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,221,2017-03-25T12:35:36Z,2017-03-25T15:08:44Z,2017-03-25T15:08:44Z,MERGED,True,16,15,1,https://github.com/rafalcieslak,Fixed test/server inconsiscency in launch script,3,[],https://github.com/cahirwpz/mimiker/pull/221,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/221#issuecomment-289210880,"This bug was originally discovered by @strzkrzysiek.
When launching the kernel using ./launch script with -t option (which is useful for redirecting kernel output to another terminal or file) and -d option simultaneously, both qemu monitor and gdb interface will hook to the same terminal, and will share input/output, making it impossible to enter gdb commands.
This patch disables the qemu monitor in test mode - we do not use the monitor interface anyway.","A closer investigation let me to an observation that we are starting nc incorrectly, so that in case qemu is not ready when it opens a connection, it permanently becomes a zombie process. I'll try to rewrite this part to correct this issue.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,221,2017-03-25T12:35:36Z,2017-03-25T15:08:44Z,2017-03-25T15:08:44Z,MERGED,True,16,15,1,https://github.com/rafalcieslak,Fixed test/server inconsiscency in launch script,3,[],https://github.com/cahirwpz/mimiker/pull/221,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/221#issuecomment-289214302,"This bug was originally discovered by @strzkrzysiek.
When launching the kernel using ./launch script with -t option (which is useful for redirecting kernel output to another terminal or file) and -d option simultaneously, both qemu monitor and gdb interface will hook to the same terminal, and will share input/output, making it impossible to enter gdb commands.
This patch disables the qemu monitor in test mode - we do not use the monitor interface anyway.","I went a step further and fixed the inconsistency of the --test (-t) option of the launch script. I've split it into --test and --server (-s). The former will redirect simulator output to stdout (no-op for qemu). The other will expose the output via TCP server at port 8000. This way it becomes clear where the output actually goes. Option -s is particularly useful when running a debugger, this way simulator output does not interleave with debugger output.
Incidentally, this feature actually simplifies ./launch script implementation a bit, because we no longer need to start nc when using qemu.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,222,2017-03-25T18:34:16Z,2017-03-26T08:15:57Z,2017-03-26T08:15:57Z,MERGED,True,31,3,2,https://github.com/rafalcieslak,Automatically inspect kernel state on test deadlock,1,[],https://github.com/cahirwpz/mimiker/pull/222,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/222,"This is a particularly nifty feature: When test results are inconclusive because neither success nor failure were reported within timeout, the run_tests.py script will launch gdb to get some information (info registers, backtrace, kdump threads, etc.) about kernel state, which may give some hints on why did it hang.","This is a particularly nifty feature: When test results are inconclusive because neither success nor failure were reported within timeout, the run_tests.py script will launch gdb to get some information (info registers, backtrace, kdump threads, etc.) about kernel state, which may give some hints on why did it hang.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,222,2017-03-25T18:34:16Z,2017-03-26T08:15:57Z,2017-03-26T08:15:57Z,MERGED,True,31,3,2,https://github.com/rafalcieslak,Automatically inspect kernel state on test deadlock,1,[],https://github.com/cahirwpz/mimiker/pull/222,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/222#issuecomment-289231334,"This is a particularly nifty feature: When test results are inconclusive because neither success nor failure were reported within timeout, the run_tests.py script will launch gdb to get some information (info registers, backtrace, kdump threads, etc.) about kernel state, which may give some hints on why did it hang.",I've restarted the test build until it failed so that its output demonstrates this feature in action.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,223,2017-03-26T12:12:11Z,2017-03-26T21:48:34Z,2017-03-26T21:48:34Z,MERGED,True,147,8,4,https://github.com/rafalcieslak,Implemented thread_join and thread_reap,4,[],https://github.com/cahirwpz/mimiker/pull/223,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/223,See #216.,See #216.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,223,2017-03-26T12:12:11Z,2017-03-26T21:48:34Z,2017-03-26T21:48:34Z,MERGED,True,147,8,4,https://github.com/rafalcieslak,Implemented thread_join and thread_reap,4,[],https://github.com/cahirwpz/mimiker/pull/223,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/223#issuecomment-289284276,See #216.,The test results indicate that the idle thread is incorrectly marked as RUNNING. I've fixed this issue in #224.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,224,2017-03-26T12:57:51Z,2017-03-26T21:39:07Z,2017-03-26T21:39:07Z,MERGED,True,4,1,1,https://github.com/rafalcieslak,Fixed idle thread always marked as running,1,[],https://github.com/cahirwpz/mimiker/pull/224,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/224,"The idle thread would always stay marked as TDS_RUNNING, this patch fixes this problem.","The idle thread would always stay marked as TDS_RUNNING, this patch fixes this problem.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,224,2017-03-26T12:57:51Z,2017-03-26T21:39:07Z,2017-03-26T21:39:07Z,MERGED,True,4,1,1,https://github.com/rafalcieslak,Fixed idle thread always marked as running,1,[],https://github.com/cahirwpz/mimiker/pull/224,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/224#issuecomment-289284073,"The idle thread would always stay marked as TDS_RUNNING, this patch fixes this problem.","The test results for this commit have enlightened me!
This branch fixes the problem where the idle thread (kernel-main) would stay marked as running even though it was not. But the test results are that kernel got stuck in the middle of thread test (typical). The threads state is:
 kdump threads
----------------------------------
| Id | Name        | State       |
----------------------------------
| 0  | kernel-main | TDS_RUNNING |
| 1  | main        | TDS_READY   |
| 2  | first       | TDS_RUNNING |
| 3  | second      | TDS_READY   |
----------------------------------

so there are still more than 1 threads marked as RUNNING at the same time (wasn't this branch supposed to fix that?).
The problem is that this time it is actually the idle thread that is in fact executing, so the first thread (one of threads created within the thread test) is the one incorrectly marked as running. Why is that? The thing is, the first and second thread are not managed by the scheduler at all, they are not inserted into the runqueue etc, because this is a legacy test back from when we did not have a working scheduler.
The test uses an old function thread_switch_to (which forces a context switch independent from the scheduler), to switch back and forth between first and second threads. This function marks one thread as RUNNING, and the other as READY. thread_switch_to is not uses anywhere else, it exists only to serve this test.
This test used to work well back when we had no scheduler, but we can now run into problems if this test gets preempted, which naturally will cause interference. The first and second threads are not on the runqueue, but main is!
In this particular case observable of the aforementioned failed test run the nature of the deadlock is such that the first thread was preempted, and somehow (some time later on) we see the idle thread is executing (sched_run () at sched.c:99   td->td_flags |= TDF_NEEDSWITCH;), and there is no way we'll return to the first thread as it was (correctly) not registered in the scheduler.
My conclusion is that the thread test is severely outdated and no longer makes any sense with the presence of a scheduler, even if its threads are not registered for scheduling. Same goes for thread_switch_to, as it itself interferes with scheduler logic. Thus I propose two possible solutions:

Removing the thread test entirely (as well as thread_switch_to function). Soon we'll implement proper thread_join, which will allow us to prepare much better and more natural tests for threads behavior.
Wrapping the entire thread test in a critical section. I did not test if that works, but it should disable the scheduler for the duration of the test.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,224,2017-03-26T12:57:51Z,2017-03-26T21:39:07Z,2017-03-26T21:39:07Z,MERGED,True,4,1,1,https://github.com/rafalcieslak,Fixed idle thread always marked as running,1,[],https://github.com/cahirwpz/mimiker/pull/224,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/224#issuecomment-289311163,"The idle thread would always stay marked as TDS_RUNNING, this patch fixes this problem.",That is lenghty explanation! My answer will be much shorter... We can safely remove the piece of code which is a remnant of times where we did not have the scheduler. As you correctly noticed there's no much use of keeping thread_switch_to routine and the test for it.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,224,2017-03-26T12:57:51Z,2017-03-26T21:39:07Z,2017-03-26T21:39:07Z,MERGED,True,4,1,1,https://github.com/rafalcieslak,Fixed idle thread always marked as running,1,[],https://github.com/cahirwpz/mimiker/pull/224,https://github.com/rafalcieslak,4,https://github.com/cahirwpz/mimiker/pull/224#issuecomment-289316936,"The idle thread would always stay marked as TDS_RUNNING, this patch fixes this problem.",#225 solves this problem by removing outdated code.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,225,2017-03-26T21:16:51Z,2017-03-26T21:39:47Z,2017-03-26T21:39:47Z,MERGED,True,1,96,5,https://github.com/rafalcieslak,Removed legacy thread functions,1,[],https://github.com/cahirwpz/mimiker/pull/225,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/225,"This branch removes thread_switch_to, thread_dump_all and the defective thread test.
There is a high chance this will make travis test results more meaningful.","This branch removes thread_switch_to, thread_dump_all and the defective thread test.
There is a high chance this will make travis test results more meaningful.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,226,2017-03-26T22:20:34Z,2017-03-26T22:29:02Z,2017-03-26T22:29:02Z,MERGED,True,4,4,4,https://github.com/rafalcieslak,Fixed thread_exit interface,1,[],https://github.com/cahirwpz/mimiker/pull/226,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/226,"Uhm, this is what happens when I move features between multiple branches too much. Funny that the compiler did not consider this as an error.","Uhm, this is what happens when I move features between multiple branches too much. Funny that the compiler did not consider this as an error.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,228,2017-03-27T12:47:20Z,2017-04-03T20:41:44Z,2017-04-03T20:41:44Z,MERGED,True,71,16,3,https://github.com/rafalcieslak,rwlock for vm_map,7,[],https://github.com/cahirwpz/mimiker/pull/228,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/228,"We're starting to think about accessing a vm_map from multiple threads, so it's the high time we implemented synchronization for the vm_map_t structure. This branch uses rwlock for that purpose. This is convenient, because most access done to a vm_map is due to page faults, and as these do not modify the structure, we're happy to allow more than one thread to look up pages in the map simultaneously.
The rwlock locks the map structure and it's entries, but - naturally - not the data within address space represented by the map.
To implement this correctly, I had to do some minor refactoring:

The pmap_t *pmap field in vm_map_t is now a constant pointer, as it is only set when the map is created, and it never gets changed. This way it is explicitly marked as immutable, and thus access to pmap does not require locking the rwlock.
sbrk implementation details (which do a lot of operation on the underlying vm_map) are moved to vm_map_sbrk in vm_map.c, so that the internal structure of a vm_map (and synchronisation strategy) does not leak outside vm_map.c.
I moved around some condition checks in rw_enter, so that a recursive lock would allow recursive READERS while it is WLOCKED. Previously, a writer-locked recursive rwlock would only allow recursive writers to enter, but I see no reason why should it not let extra recursive readers in. A good example of a use-case is vm_map_sbrk, which starts by locking the rwlock for WRITING, does some work, and then calls vm_map_findspace, which has to enter the lock for READING. Since the used lock is recursive, it seems to me that this is a valid scenario.","We're starting to think about accessing a vm_map from multiple threads, so it's the high time we implemented synchronization for the vm_map_t structure. This branch uses rwlock for that purpose. This is convenient, because most access done to a vm_map is due to page faults, and as these do not modify the structure, we're happy to allow more than one thread to look up pages in the map simultaneously.
The rwlock locks the map structure and it's entries, but - naturally - not the data within address space represented by the map.
To implement this correctly, I had to do some minor refactoring:

The pmap_t *pmap field in vm_map_t is now a constant pointer, as it is only set when the map is created, and it never gets changed. This way it is explicitly marked as immutable, and thus access to pmap does not require locking the rwlock.
sbrk implementation details (which do a lot of operation on the underlying vm_map) are moved to vm_map_sbrk in vm_map.c, so that the internal structure of a vm_map (and synchronisation strategy) does not leak outside vm_map.c.
I moved around some condition checks in rw_enter, so that a recursive lock would allow recursive READERS while it is WLOCKED. Previously, a writer-locked recursive rwlock would only allow recursive writers to enter, but I see no reason why should it not let extra recursive readers in. A good example of a use-case is vm_map_sbrk, which starts by locking the rwlock for WRITING, does some work, and then calls vm_map_findspace, which has to enter the lock for READING. Since the used lock is recursive, it seems to me that this is a valid scenario.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,228,2017-03-27T12:47:20Z,2017-04-03T20:41:44Z,2017-04-03T20:41:44Z,MERGED,True,71,16,3,https://github.com/rafalcieslak,rwlock for vm_map,7,[],https://github.com/cahirwpz/mimiker/pull/228,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/228#issuecomment-291260919,"We're starting to think about accessing a vm_map from multiple threads, so it's the high time we implemented synchronization for the vm_map_t structure. This branch uses rwlock for that purpose. This is convenient, because most access done to a vm_map is due to page faults, and as these do not modify the structure, we're happy to allow more than one thread to look up pages in the map simultaneously.
The rwlock locks the map structure and it's entries, but - naturally - not the data within address space represented by the map.
To implement this correctly, I had to do some minor refactoring:

The pmap_t *pmap field in vm_map_t is now a constant pointer, as it is only set when the map is created, and it never gets changed. This way it is explicitly marked as immutable, and thus access to pmap does not require locking the rwlock.
sbrk implementation details (which do a lot of operation on the underlying vm_map) are moved to vm_map_sbrk in vm_map.c, so that the internal structure of a vm_map (and synchronisation strategy) does not leak outside vm_map.c.
I moved around some condition checks in rw_enter, so that a recursive lock would allow recursive READERS while it is WLOCKED. Previously, a writer-locked recursive rwlock would only allow recursive writers to enter, but I see no reason why should it not let extra recursive readers in. A good example of a use-case is vm_map_sbrk, which starts by locking the rwlock for WRITING, does some work, and then calls vm_map_findspace, which has to enter the lock for READING. Since the used lock is recursive, it seems to me that this is a valid scenario.",LGTM. Should I merge this branch before I start reviewing #238 ?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,228,2017-03-27T12:47:20Z,2017-04-03T20:41:44Z,2017-04-03T20:41:44Z,MERGED,True,71,16,3,https://github.com/rafalcieslak,rwlock for vm_map,7,[],https://github.com/cahirwpz/mimiker/pull/228,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/228#issuecomment-291263194,"We're starting to think about accessing a vm_map from multiple threads, so it's the high time we implemented synchronization for the vm_map_t structure. This branch uses rwlock for that purpose. This is convenient, because most access done to a vm_map is due to page faults, and as these do not modify the structure, we're happy to allow more than one thread to look up pages in the map simultaneously.
The rwlock locks the map structure and it's entries, but - naturally - not the data within address space represented by the map.
To implement this correctly, I had to do some minor refactoring:

The pmap_t *pmap field in vm_map_t is now a constant pointer, as it is only set when the map is created, and it never gets changed. This way it is explicitly marked as immutable, and thus access to pmap does not require locking the rwlock.
sbrk implementation details (which do a lot of operation on the underlying vm_map) are moved to vm_map_sbrk in vm_map.c, so that the internal structure of a vm_map (and synchronisation strategy) does not leak outside vm_map.c.
I moved around some condition checks in rw_enter, so that a recursive lock would allow recursive READERS while it is WLOCKED. Previously, a writer-locked recursive rwlock would only allow recursive writers to enter, but I see no reason why should it not let extra recursive readers in. A good example of a use-case is vm_map_sbrk, which starts by locking the rwlock for WRITING, does some work, and then calls vm_map_findspace, which has to enter the lock for READING. Since the used lock is recursive, it seems to me that this is a valid scenario.",Yes.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,229,2017-03-27T13:18:17Z,2017-03-27T18:15:25Z,2017-03-27T18:15:25Z,MERGED,True,4,4,1,https://github.com/rafalcieslak,Fix for #227,2,[],https://github.com/cahirwpz/mimiker/pull/229,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/229,Wrapped thread_join into a critical section.,Wrapped thread_join into a critical section.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,230,2017-03-27T14:23:21Z,2017-03-27T18:14:47Z,2017-03-27T18:14:47Z,MERGED,True,4,1,1,https://github.com/rafalcieslak,Reduced randint range for test_malloc_random,1,[],https://github.com/cahirwpz/mimiker/pull/230,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/230,"malloc_randint fails occasionally, when the generated random integer - used as the size of allocation - is close to the size of entire pool, because malloc is unable to fit the mem_block_t structure.
At b3925e8, an example offending seed is (for OVPsim):
test=all seed=516288384 repeat=5:
Running test malloc_randint.
[pmem] pm_alloc {paddr:3c0000 size:64}
[malloc.c:196] memory exhausted in 'testing memory pool'

This branch fixes the problem by slightly reducing the range of random integers for this test.","malloc_randint fails occasionally, when the generated random integer - used as the size of allocation - is close to the size of entire pool, because malloc is unable to fit the mem_block_t structure.
At b3925e8, an example offending seed is (for OVPsim):
test=all seed=516288384 repeat=5:
Running test malloc_randint.
[pmem] pm_alloc {paddr:3c0000 size:64}
[malloc.c:196] memory exhausted in 'testing memory pool'

This branch fixes the problem by slightly reducing the range of random integers for this test.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,231,2017-03-27T14:45:34Z,2017-03-27T18:15:51Z,2017-03-27T18:15:51Z,MERGED,True,4,3,3,https://github.com/rafalcieslak,Improved debug log on deadlocks,1,[],https://github.com/cahirwpz/mimiker/pull/231,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/231,"I find it annoying to see:
[sleepq.c:68] Sleep 'main' thread on '(null)' (0x801b8704)

while we have an interface for specifying names for wait channels. This branch improves some calls to sleepq_wait so that they provide meaningful name, instead of lazily passing a NULL.
I've also decided to rename the thread which enters sched_run to idle thread, otherwise we end up with both kernel-main and main in output logs, and one has to KNOW that kernel-main had become the idle thread and now functions as one.","I find it annoying to see:
[sleepq.c:68] Sleep 'main' thread on '(null)' (0x801b8704)

while we have an interface for specifying names for wait channels. This branch improves some calls to sleepq_wait so that they provide meaningful name, instead of lazily passing a NULL.
I've also decided to rename the thread which enters sched_run to idle thread, otherwise we end up with both kernel-main and main in output logs, and one has to KNOW that kernel-main had become the idle thread and now functions as one.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,232,2017-03-27T15:30:18Z,2017-03-29T15:12:03Z,2017-03-29T15:12:03Z,MERGED,True,6,1,1,https://github.com/rafalcieslak,Fixed exception level for new threads,3,[],https://github.com/cahirwpz/mimiker/pull/232,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/232,"This is a tiny change, but it fixes a huge bug.
To understand it, please have a look at the ending of kern_exc_leave:
# [...] Restoring state

# ... and finally status register (assume EXL bit is set)
LOAD_REG($k1, SR, $sp)
mtc0    $k1, C0_STATUS

# Restore stack frame.
move    $sp, $k0

sync
eret

If the assumption mentioned in comment is not met, that is: EXL bit of the status register stored in saved context is not set, then between the mtc0 instruction and eret an interrupt may arrive. This is unacceptable, because it would overwrite the just-restored context (in particular, it overwrites EPC address with the address of the move instruction, resulting in a endless loop over the last three instructions). That seems unlikely to happen, so here's a proof:
b3925e8, OVPsimp: test=all seed=823261445 repeat=5
EDIT: You can also see the problem in this build for #234.
Now typically the stored SR has EXL set, because usually we store the SR value in kern_exc_enter. But when a new context is prepared in ctx_init, the contents of SR are based on current SR state - so naturally it is likely the EXL bit is 0.
The reason we've not observed this issue until now is because this problem may only occur on the very first ctx_switch -> kern_exc_leave for a new thread, and it requires the interrupt to come at a very precise moment - which happens very rarely. So it only goes to show how much have our testing procedures improved that we are able to catch such an obscure problem.
This fix ensures SR EXL bit is set for all fresh contexts.","This is a tiny change, but it fixes a huge bug.
To understand it, please have a look at the ending of kern_exc_leave:
# [...] Restoring state

# ... and finally status register (assume EXL bit is set)
LOAD_REG($k1, SR, $sp)
mtc0    $k1, C0_STATUS

# Restore stack frame.
move    $sp, $k0

sync
eret

If the assumption mentioned in comment is not met, that is: EXL bit of the status register stored in saved context is not set, then between the mtc0 instruction and eret an interrupt may arrive. This is unacceptable, because it would overwrite the just-restored context (in particular, it overwrites EPC address with the address of the move instruction, resulting in a endless loop over the last three instructions). That seems unlikely to happen, so here's a proof:
b3925e8, OVPsimp: test=all seed=823261445 repeat=5
EDIT: You can also see the problem in this build for #234.
Now typically the stored SR has EXL set, because usually we store the SR value in kern_exc_enter. But when a new context is prepared in ctx_init, the contents of SR are based on current SR state - so naturally it is likely the EXL bit is 0.
The reason we've not observed this issue until now is because this problem may only occur on the very first ctx_switch -> kern_exc_leave for a new thread, and it requires the interrupt to come at a very precise moment - which happens very rarely. So it only goes to show how much have our testing procedures improved that we are able to catch such an obscure problem.
This fix ensures SR EXL bit is set for all fresh contexts.",True,{'THUMBS_UP': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,232,2017-03-27T15:30:18Z,2017-03-29T15:12:03Z,2017-03-29T15:12:03Z,MERGED,True,6,1,1,https://github.com/rafalcieslak,Fixed exception level for new threads,3,[],https://github.com/cahirwpz/mimiker/pull/232,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/232#issuecomment-289729815,"This is a tiny change, but it fixes a huge bug.
To understand it, please have a look at the ending of kern_exc_leave:
# [...] Restoring state

# ... and finally status register (assume EXL bit is set)
LOAD_REG($k1, SR, $sp)
mtc0    $k1, C0_STATUS

# Restore stack frame.
move    $sp, $k0

sync
eret

If the assumption mentioned in comment is not met, that is: EXL bit of the status register stored in saved context is not set, then between the mtc0 instruction and eret an interrupt may arrive. This is unacceptable, because it would overwrite the just-restored context (in particular, it overwrites EPC address with the address of the move instruction, resulting in a endless loop over the last three instructions). That seems unlikely to happen, so here's a proof:
b3925e8, OVPsimp: test=all seed=823261445 repeat=5
EDIT: You can also see the problem in this build for #234.
Now typically the stored SR has EXL set, because usually we store the SR value in kern_exc_enter. But when a new context is prepared in ctx_init, the contents of SR are based on current SR state - so naturally it is likely the EXL bit is 0.
The reason we've not observed this issue until now is because this problem may only occur on the very first ctx_switch -> kern_exc_leave for a new thread, and it requires the interrupt to come at a very precise moment - which happens very rarely. So it only goes to show how much have our testing procedures improved that we are able to catch such an obscure problem.
This fix ensures SR EXL bit is set for all fresh contexts.","Indeed capturing this bug shows how adequate is our testing framework, kudos for you!
While you identified and fixed a serious bug, your solution does not prevent some others weird scenarios to happen. Let's set up status register explicitly, instead of taking it's value from the caller context!
I looked briefly on C0.Status register documentation. I think we should set it up as follows:
{KSU = 0, ERL = 0, EXL = 1, IE = 1, NMI = 0, SR = 0, CU[0..3] = 0} ... and others zero as well. Interrupt configuration i.e. IM0-IM7 and BEV should be taken from caller's context. What do you think?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,233,2017-03-27T15:37:36Z,2017-03-27T18:17:09Z,2017-03-27T18:17:09Z,MERGED,True,8,0,1,https://github.com/rafalcieslak,Infinite testing mode,1,[],https://github.com/cahirwpz/mimiker/pull/233,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/233,Very useful for running tests on a local machine.,Very useful for running tests on a local machine.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,234,2017-03-27T18:26:51Z,2017-04-06T18:48:05Z,2017-04-06T18:48:06Z,MERGED,True,22,9,2,https://github.com/rafalcieslak,Fix deadlock on zombie_threads_mtx,6,[],https://github.com/cahirwpz/mimiker/pull/234,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/234,"During thread_exit, the mutex on zombie_threads must be unlocked before critical section is left. Otherwise we risk preemption before the mutex is unlocked, and as the thread is TDS_INACTIVE, it will never resume execution - permanently blocking any other threads from locking on the mutex.
I've observed this problem several times on my local machine, but I've only managed to trigger it with QEMU, and thus I cannot provide a seed for reproducing the issue.","During thread_exit, the mutex on zombie_threads must be unlocked before critical section is left. Otherwise we risk preemption before the mutex is unlocked, and as the thread is TDS_INACTIVE, it will never resume execution - permanently blocking any other threads from locking on the mutex.
I've observed this problem several times on my local machine, but I've only managed to trigger it with QEMU, and thus I cannot provide a seed for reproducing the issue.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,234,2017-03-27T18:26:51Z,2017-04-06T18:48:05Z,2017-04-06T18:48:06Z,MERGED,True,22,9,2,https://github.com/rafalcieslak,Fix deadlock on zombie_threads_mtx,6,[],https://github.com/cahirwpz/mimiker/pull/234,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/234#issuecomment-289543944,"During thread_exit, the mutex on zombie_threads must be unlocked before critical section is left. Otherwise we risk preemption before the mutex is unlocked, and as the thread is TDS_INACTIVE, it will never resume execution - permanently blocking any other threads from locking on the mutex.
I've observed this problem several times on my local machine, but I've only managed to trigger it with QEMU, and thus I cannot provide a seed for reproducing the issue.","Oh, this just popped in in a master Travis build. The test thread_join is unable to thread_create, because it gets stuck in thread_reap where it is unable to lock on the zombie_threads mutex - it is owned by fd_test thread, which was preempted before it unlocking the mutex.
EDIT: And the same happened in this build for #232! So there are two PRs each fixing one issue, and each fails tests because of the other bug. I have a feeling we are going in the right direction.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,234,2017-03-27T18:26:51Z,2017-04-06T18:48:05Z,2017-04-06T18:48:06Z,MERGED,True,22,9,2,https://github.com/rafalcieslak,Fix deadlock on zombie_threads_mtx,6,[],https://github.com/cahirwpz/mimiker/pull/234,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/234#issuecomment-289731971,"During thread_exit, the mutex on zombie_threads must be unlocked before critical section is left. Otherwise we risk preemption before the mutex is unlocked, and as the thread is TDS_INACTIVE, it will never resume execution - permanently blocking any other threads from locking on the mutex.
I've observed this problem several times on my local machine, but I've only managed to trigger it with QEMU, and thus I cannot provide a seed for reproducing the issue.","Locking strategy of code that starts in sys/thread.c:133 looks like utter mess. A brief look at NetBSD's proc and lwp (FreeBSD's proc and thread reveal similar structure) shows that they use at least one mutex (l_mutex, p_lock) for whole task structure and additional conditional variable (l_waitcv, p_waitcv) to aid exit and join calls implementation.
Please add td_lock and td_waitcv to thread structure and provide cleaner solution to fix the bug.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,234,2017-03-27T18:26:51Z,2017-04-06T18:48:05Z,2017-04-06T18:48:06Z,MERGED,True,22,9,2,https://github.com/rafalcieslak,Fix deadlock on zombie_threads_mtx,6,[],https://github.com/cahirwpz/mimiker/pull/234,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/234#issuecomment-292273482,"During thread_exit, the mutex on zombie_threads must be unlocked before critical section is left. Otherwise we risk preemption before the mutex is unlocked, and as the thread is TDS_INACTIVE, it will never resume execution - permanently blocking any other threads from locking on the mutex.
I've observed this problem several times on my local machine, but I've only managed to trigger it with QEMU, and thus I cannot provide a seed for reproducing the issue.","Ok. I believe there's no simple and clean way to fix the problem tackled by this PR. While I consider the change to be hack, we cannot wait any longer for it being integrated.
@rafalcieslak please look at issue #242, I'll put more information there soon.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,235,2017-03-29T13:38:56Z,2017-03-29T15:45:46Z,2017-03-29T15:45:52Z,MERGED,True,39,4,3,https://github.com/rafalcieslak,Automatically verify source code formatting,11,[],https://github.com/cahirwpz/mimiker/pull/235,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/235,As we discussed. References #214.,As we discussed. References #214.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,235,2017-03-29T13:38:56Z,2017-03-29T15:45:46Z,2017-03-29T15:45:52Z,MERGED,True,39,4,3,https://github.com/rafalcieslak,Automatically verify source code formatting,11,[],https://github.com/cahirwpz/mimiker/pull/235,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/235#issuecomment-290122928,As we discussed. References #214.,"This was tricky to set up, because Travis uses some weird configuration where it's difficult to use llvm != 3.5, and our .clang-format file only works correctly with clang >= 3.8.
Here's an example build where formatting was incorrect, notice the diff & message at the end of the build log. This branch is finally ready for review.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,235,2017-03-29T13:38:56Z,2017-03-29T15:45:46Z,2017-03-29T15:45:52Z,MERGED,True,39,4,3,https://github.com/rafalcieslak,Automatically verify source code formatting,11,[],https://github.com/cahirwpz/mimiker/pull/235,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/235#issuecomment-290132460,As we discussed. References #214.,LGTM. Implements #214,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,236,2017-04-02T13:29:52Z,2017-04-02T13:42:39Z,2017-04-02T13:42:39Z,MERGED,True,65,39,5,https://github.com/rafalcieslak,Moved sbrk interface to sbrk.c,2,[],https://github.com/cahirwpz/mimiker/pull/236,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/236,Per request in discussion of #228.,Per request in discussion of #228.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,237,2017-04-02T15:14:02Z,2017-04-18T09:30:05Z,2017-04-18T09:30:05Z,MERGED,True,94,84,15,https://github.com/czapiga,Added synchronization to malloc module and created few basic tests,20,[],https://github.com/cahirwpz/mimiker/pull/237,https://github.com/czapiga,1,https://github.com/cahirwpz/mimiker/pull/237,I'm going to create more complex (multithreaded) test in next two days.,I'm going to create more complex (multithreaded) test in next two days.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,237,2017-04-02T15:14:02Z,2017-04-18T09:30:05Z,2017-04-18T09:30:05Z,MERGED,True,94,84,15,https://github.com/czapiga,Added synchronization to malloc module and created few basic tests,20,[],https://github.com/cahirwpz/mimiker/pull/237,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/237#issuecomment-293379582,I'm going to create more complex (multithreaded) test in next two days.,Please move multithreaded tests to separate PR and I'll accept this one and merge with master.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,237,2017-04-02T15:14:02Z,2017-04-18T09:30:05Z,2017-04-18T09:30:05Z,MERGED,True,94,84,15,https://github.com/czapiga,Added synchronization to malloc module and created few basic tests,20,[],https://github.com/cahirwpz/mimiker/pull/237,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/237#issuecomment-294534179,I'm going to create more complex (multithreaded) test in next two days.,"Now that the long test is gone, can we please revert the test timeout from 25 to 5 seconds?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,238,2017-04-03T11:27:58Z,2017-04-04T09:10:27Z,2017-04-04T09:10:27Z,MERGED,True,53,81,10,https://github.com/rafalcieslak,Lock guards,13,[],https://github.com/cahirwpz/mimiker/pull/238,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/238,"WARNING: This branch incorporates changes from #228 (which is close to merging).
Inspired by this suggestion I've implemented lock_guards for both mtx_t and rwlock_t. This branch also enables the use of these guards thorough the entire codebase. I've only switched to lock_guards in places where it actually simplifies source code, so the normal mtx_lock etc. are still widely used.
The diff will grow up a bit once #228 is merged, because this branch also slightly simplifies logic introduced by #228.
My implementation is mildly inspired by systemd's implementation of a similar mechanism.","WARNING: This branch incorporates changes from #228 (which is close to merging).
Inspired by this suggestion I've implemented lock_guards for both mtx_t and rwlock_t. This branch also enables the use of these guards thorough the entire codebase. I've only switched to lock_guards in places where it actually simplifies source code, so the normal mtx_lock etc. are still widely used.
The diff will grow up a bit once #228 is merged, because this branch also slightly simplifies logic introduced by #228.
My implementation is mildly inspired by systemd's implementation of a similar mechanism.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,238,2017-04-03T11:27:58Z,2017-04-04T09:10:27Z,2017-04-04T09:10:27Z,MERGED,True,53,81,10,https://github.com/rafalcieslak,Lock guards,13,[],https://github.com/cahirwpz/mimiker/pull/238,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/238#issuecomment-291422494,"WARNING: This branch incorporates changes from #228 (which is close to merging).
Inspired by this suggestion I've implemented lock_guards for both mtx_t and rwlock_t. This branch also enables the use of these guards thorough the entire codebase. I've only switched to lock_guards in places where it actually simplifies source code, so the normal mtx_lock etc. are still widely used.
The diff will grow up a bit once #228 is merged, because this branch also slightly simplifies logic introduced by #228.
My implementation is mildly inspired by systemd's implementation of a similar mechanism.","I don't like to invent names on my own, so I borrowed the C++ name for the same RAII concept: std::lock_guard<T>. (Note that there also is a scoped_lock in the fresh C++17 standard, but it has a slightly different meaning!)",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,239,2017-04-05T02:31:52Z,2017-04-24T20:35:04Z,2017-04-25T07:08:31Z,MERGED,True,167,0,5,https://github.com/laky55555,Klog,12,[],https://github.com/cahirwpz/mimiker/pull/239,https://github.com/laky55555,1,https://github.com/cahirwpz/mimiker/pull/239,"Added logging mechanism.
Currently logging is not thread safe.
There is problem when logging message without any parameters.
Logging is done with klog(format, params) or klog_mask(costum_mask, format, params).
Printing saved logs is done with klog_dump_all();
During starting user can add custom mask for logging messages with klog-mask=hex_number.","Added logging mechanism.
Currently logging is not thread safe.
There is problem when logging message without any parameters.
Logging is done with klog(format, params) or klog_mask(costum_mask, format, params).
Printing saved logs is done with klog_dump_all();
During starting user can add custom mask for logging messages with klog-mask=hex_number.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,240,2017-04-05T08:34:52Z,2017-04-28T16:52:29Z,2017-04-28T17:29:33Z,MERGED,True,337,0,7,https://github.com/MoloToha,Pooled memory allocator,44,[],https://github.com/cahirwpz/mimiker/pull/240,https://github.com/MoloToha,1,https://github.com/cahirwpz/mimiker/pull/240,Uploaded basic prototype for pooled memory allocator along with a very basic test to just see if it works at all. I will try to write a more complex test and resolve TODO's in the nearest future.,Uploaded basic prototype for pooled memory allocator along with a very basic test to just see if it works at all. I will try to write a more complex test and resolve TODO's in the nearest future.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,240,2017-04-05T08:34:52Z,2017-04-28T16:52:29Z,2017-04-28T17:29:33Z,MERGED,True,337,0,7,https://github.com/MoloToha,Pooled memory allocator,44,[],https://github.com/cahirwpz/mimiker/pull/240,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/240#issuecomment-291859817,Uploaded basic prototype for pooled memory allocator along with a very basic test to just see if it works at all. I will try to write a more complex test and resolve TODO's in the nearest future.,"Also: remember to run make format periodically - it will help you clean up your code.
Additionally, you can skip some parenthesis:
(x->y)++ is the same as x->y++,
&(x->y) is the same as &x->y.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,240,2017-04-05T08:34:52Z,2017-04-28T16:52:29Z,2017-04-28T17:29:33Z,MERGED,True,337,0,7,https://github.com/MoloToha,Pooled memory allocator,44,[],https://github.com/cahirwpz/mimiker/pull/240,https://github.com/MoloToha,3,https://github.com/cahirwpz/mimiker/pull/240#issuecomment-291893855,Uploaded basic prototype for pooled memory allocator along with a very basic test to just see if it works at all. I will try to write a more complex test and resolve TODO's in the nearest future.,Thank you for suggestions! I will implement them ASAP.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,240,2017-04-05T08:34:52Z,2017-04-28T16:52:29Z,2017-04-28T17:29:33Z,MERGED,True,337,0,7,https://github.com/MoloToha,Pooled memory allocator,44,[],https://github.com/cahirwpz/mimiker/pull/240,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/240#issuecomment-292148931,Uploaded basic prototype for pooled memory allocator along with a very basic test to just see if it works at all. I will try to write a more complex test and resolve TODO's in the nearest future.,@MoloToha Please address code changes outlined by @rafalcieslak. The suggestions can be viewed by clicking show outdated on this page. If I hadn't run clang-format they wouldn't be hidden – sorry for inconvenience.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,240,2017-04-05T08:34:52Z,2017-04-28T16:52:29Z,2017-04-28T17:29:33Z,MERGED,True,337,0,7,https://github.com/MoloToha,Pooled memory allocator,44,[],https://github.com/cahirwpz/mimiker/pull/240,https://github.com/MoloToha,5,https://github.com/cahirwpz/mimiker/pull/240#issuecomment-294219261,Uploaded basic prototype for pooled memory allocator along with a very basic test to just see if it works at all. I will try to write a more complex test and resolve TODO's in the nearest future.,"The last commit is my attempt to integrate this component into kernel, everything works (at least on my computer), test runs correctly, currently this test is set up to cause memory corruption, so you should comment line containing memset (which causes this memory corruption) in order to pass the test.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,240,2017-04-05T08:34:52Z,2017-04-28T16:52:29Z,2017-04-28T17:29:33Z,MERGED,True,337,0,7,https://github.com/MoloToha,Pooled memory allocator,44,[],https://github.com/cahirwpz/mimiker/pull/240,https://github.com/rafalcieslak,6,https://github.com/cahirwpz/mimiker/pull/240#issuecomment-294221694,Uploaded basic prototype for pooled memory allocator along with a very basic test to just see if it works at all. I will try to write a more complex test and resolve TODO's in the nearest future.,"I see this is shaping up nicely. Note that throughout the codebase we prefer:
/* C-style comments */
over:
// C++-style comments.
If you want to prepare a test which intentionally crashes (to demonstrate something), you can pass KTEST_FLAG_BROKEN to KTEST_ADD - this way the test will not be launched automatically during automatic testing, but you will still be able to run it by specifying test=....",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,240,2017-04-05T08:34:52Z,2017-04-28T16:52:29Z,2017-04-28T17:29:33Z,MERGED,True,337,0,7,https://github.com/MoloToha,Pooled memory allocator,44,[],https://github.com/cahirwpz/mimiker/pull/240,https://github.com/MoloToha,7,https://github.com/cahirwpz/mimiker/pull/240#issuecomment-294221883,Uploaded basic prototype for pooled memory allocator along with a very basic test to just see if it works at all. I will try to write a more complex test and resolve TODO's in the nearest future.,"This memset writes zeroes to space that is occupied by other items inside a slab, thus creating an artificial memory corruption",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,240,2017-04-05T08:34:52Z,2017-04-28T16:52:29Z,2017-04-28T17:29:33Z,MERGED,True,337,0,7,https://github.com/MoloToha,Pooled memory allocator,44,[],https://github.com/cahirwpz/mimiker/pull/240,https://github.com/rafalcieslak,8,https://github.com/cahirwpz/mimiker/pull/240#issuecomment-294240689,Uploaded basic prototype for pooled memory allocator along with a very basic test to just see if it works at all. I will try to write a more complex test and resolve TODO's in the nearest future.,"So I gave this branch a close examination and (besides my previous comments) I believe this implementation is sound and solid. Good job 👍! As you see, most of my remarks are about code style - I really don't have much to complain about how the pool allocator functions. I believe this branch will be ready for merging very soon, although certainly @cahirwpz will have much more stylistic remarks than I do.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,240,2017-04-05T08:34:52Z,2017-04-28T16:52:29Z,2017-04-28T17:29:33Z,MERGED,True,337,0,7,https://github.com/MoloToha,Pooled memory allocator,44,[],https://github.com/cahirwpz/mimiker/pull/240,https://github.com/MoloToha,9,https://github.com/cahirwpz/mimiker/pull/240#issuecomment-294245608,Uploaded basic prototype for pooled memory allocator along with a very basic test to just see if it works at all. I will try to write a more complex test and resolve TODO's in the nearest future.,"I addressed all issues, the last one remaining is proper calculation of ph_ntotal (total # of items in slab), because atm it is still done by the old formula which uses size of the old bitmap (8 times bigger than the current one) and uses the worst case value for bitmap padding (which is 3 bytes).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,240,2017-04-05T08:34:52Z,2017-04-28T16:52:29Z,2017-04-28T17:29:33Z,MERGED,True,337,0,7,https://github.com/MoloToha,Pooled memory allocator,44,[],https://github.com/cahirwpz/mimiker/pull/240,https://github.com/cahirwpz,10,https://github.com/cahirwpz/mimiker/pull/240#issuecomment-297013694,Uploaded basic prototype for pooled memory allocator along with a very basic test to just see if it works at all. I will try to write a more complex test and resolve TODO's in the nearest future.,We're almost there... I'll have another detailed read this week and apply some cosmetic changes.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,240,2017-04-05T08:34:52Z,2017-04-28T16:52:29Z,2017-04-28T17:29:33Z,MERGED,True,337,0,7,https://github.com/MoloToha,Pooled memory allocator,44,[],https://github.com/cahirwpz/mimiker/pull/240,https://github.com/rafalcieslak,11,https://github.com/cahirwpz/mimiker/pull/240#issuecomment-297145413,Uploaded basic prototype for pooled memory allocator along with a very basic test to just see if it works at all. I will try to write a more complex test and resolve TODO's in the nearest future.,"I am not 100% sure, but it appears as though the last failed test result was due to spurious qemu lag. Unless we keep experiencing this particular problem (deadlock after  Sleep 'main' thread on 'callout_good'), I suggest we ignore it - the callouts interface will be getting a major upgrade soon anyway.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,240,2017-04-05T08:34:52Z,2017-04-28T16:52:29Z,2017-04-28T17:29:33Z,MERGED,True,337,0,7,https://github.com/MoloToha,Pooled memory allocator,44,[],https://github.com/cahirwpz/mimiker/pull/240,https://github.com/cahirwpz,12,https://github.com/cahirwpz/mimiker/pull/240#issuecomment-298004971,Uploaded basic prototype for pooled memory allocator along with a very basic test to just see if it works at all. I will try to write a more complex test and resolve TODO's in the nearest future.,@MoloToha Please do not modify this PR anymore if not requested. I'm taking it over in order to clean it up for merge with master.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,243,2017-04-06T17:33:59Z,2017-04-06T17:41:17Z,2017-04-06T17:41:17Z,MERGED,True,1,1,1,https://github.com/czapiga,Formatting fix,1,[],https://github.com/cahirwpz/mimiker/pull/243,https://github.com/czapiga,1,https://github.com/cahirwpz/mimiker/pull/243,Formatting fix after last commit. Actually fixing travis to see if it detects issues on other pull requests,Formatting fix after last commit. Actually fixing travis to see if it detects issues on other pull requests,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,243,2017-04-06T17:33:59Z,2017-04-06T17:41:17Z,2017-04-06T17:41:17Z,MERGED,True,1,1,1,https://github.com/czapiga,Formatting fix,1,[],https://github.com/cahirwpz/mimiker/pull/243,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/243#issuecomment-292251519,Formatting fix after last commit. Actually fixing travis to see if it detects issues on other pull requests,"@cahirwpz, this is why we need to fix Travis tests ASAP: it found the problem in your recent commit, but we're starting to ignore the test results, as they keep reporting the same problem (#234).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,250,2017-04-07T13:44:41Z,2017-04-07T14:04:29Z,2017-04-07T14:04:29Z,MERGED,True,16,7,1,https://github.com/rafalcieslak,Minor fixes to callout tests,1,[],https://github.com/cahirwpz/mimiker/pull/250,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/250,"This branch does not address issues of #213! It barely fixes the callouts tests so that they won't fail when they should not. This is done in three steps:


Wrapping callout setup and sleepq wait in a critical section. This prevents sleepq from being signalled before we get to wait on it (sleepq_wait takes a long time to print a debug message, so - until #239 is ready - there is some chance of preemption: see this Travis log).


Ignoring callout execution order, since we no longer care about it.


Reducing time values. Using critical sections and ignoring order allows for tighter timing, which in turn makes the tests execute significantly faster, which is particularly observable when testing with repeat=5.","This branch does not address issues of #213! It barely fixes the callouts tests so that they won't fail when they should not. This is done in three steps:


Wrapping callout setup and sleepq wait in a critical section. This prevents sleepq from being signalled before we get to wait on it (sleepq_wait takes a long time to print a debug message, so - until #239 is ready - there is some chance of preemption: see this Travis log).


Ignoring callout execution order, since we no longer care about it.


Reducing time values. Using critical sections and ignoring order allows for tighter timing, which in turn makes the tests execute significantly faster, which is particularly observable when testing with repeat=5.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,252,2017-04-07T16:07:05Z,2017-04-10T05:46:27Z,2017-04-15T08:55:45Z,CLOSED,False,24,13,1,https://github.com/cahirwpz,Make debugging session with OVPsim and QEMU work without glitches,1,[],https://github.com/cahirwpz/mimiker/pull/252,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/252,"I had experienced many problems trying to create a proper debugging session under gdb / gdbtui or cgdb. This change fixes most of them, but leaves some space for improvements.","I had experienced many problems trying to create a proper debugging session under gdb / gdbtui or cgdb. This change fixes most of them, but leaves some space for improvements.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,252,2017-04-07T16:07:05Z,2017-04-10T05:46:27Z,2017-04-15T08:55:45Z,CLOSED,False,24,13,1,https://github.com/cahirwpz,Make debugging session with OVPsim and QEMU work without glitches,1,[],https://github.com/cahirwpz/mimiker/pull/252,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/252#issuecomment-292780815,"I had experienced many problems trying to create a proper debugging session under gdb / gdbtui or cgdb. This change fixes most of them, but leaves some space for improvements.","TL;DR: You force developers to spawn xterm, ouch.
I'm sorry, but this change completely breaks my workflow, and decreases the flexibility of the launch script. Spawning an xterm is a nice trick, but it should be optional. With this change in place you make it impossible to start a debugging session without creating a new xterm window for kernel UART output, and I would find it very inconvenient.
Let me describe my current workflow so that the limitations imposed by your idea become apparent. I use two terminals (or, usually, two tabs in the same terminal window). One of them keeps running while true; do nc localhost 8000; done. The other one starts the launch script (with -s flag, which redirects UART output via TCP server at 8000). This way the second terminal controls the debugger, while kernel output is visible in the first terminal.
I'm fairly certain I'm not the only student who uses this approach, I believe it was originally popularized by @strzkrzysiek. So what's convenient about it?


I can quickly filter kernel output by piping nc to grep in the first terminal. This seems unnecessary for simple kernel tests, but when running a larger application it is tremendously helpful to track only a couple of messages that I'm currently interested in. Note that this won't be solved by klog, because I don't necessarily want to filter messages by their assigned kernel component - grep allows me for a more fine-grained choice.
To achieve the same with this fix in place, I would need to modify the launch script every time I want to change grep arguments. Ouch.


Similarly, it is frequently useful to store the kernel output into a file (e.g. to compare it with a different run). Using nc I can simply redirect it's output > into a file, using xterm I would need to modify the command passed to xterm.


Starting xterm opens a new window. For those who open up multiple terminal windows that doesn't seem like a big deal, they keep alt+tab-ing between all these windows anyway. But when you use a drop-down style terminal like tilda or guake, you want to organize all your shells in tabs (or muxes), because this way switching between them is much faster and predictable, as it does not involve your window manager (and again, it's not just me who uses their computer this way, @coodie is also a fan of a drop-down terminal). More, sometimes it's convenient to run a shell within your text editor. Any extra windows that would appear then are an obstruction. (Also, when I work using my super-sluggish netbook, I frequently don't run an X server at all - but you could argue that this is an extreme case we won't support). Using a TCP connection with nc managing where the output will pop up is entirely up to me.


So I'm not really happy with this change, not because it reverts my recent changes, but because it forces the developers to work in one particular way.
However, I believe this can be fixed by slightly changing the direction of your proposed fix.
What I recently wanted to achieve (and the introduction of -s flag was as step in this direction) was to separate the debugging options from kernel output options.
The current situation is that we have three ways of dealing with UART messages:
1a. Using no flags, the simulator default behavior is used. In case of ovpsim, this means opening a new terminal (bah!). In case of qemu, the behavior is similar to -t. That's kind of inconsistent.
1b. Using -s flag kernel output is exposed via TCP server.
1c. Using -t flag kernel output is passed to current stdio. This is what Travis uses.
The exact problem you're trying to solve is that when running the debugger via -d flag with QEMU and no kernel output redirection, both qemu output and the debugger will share stdio, which leads to all kinds of glitches. I see it not as a problem in how we execute the debug -d mode, but in how we interpret kernel output options. As you see, the options we currently have (1a - 1c) are slightly inconsistent. I suppose we could fix them so that there is:
2a. An option to pass kernel output to an xterm window (this may be the default behavior).
2b. An option to expose kernel output via TCP server.
2c. An option to pass kernel output to current stdio.
If these options were independent from whether a debugger gets started or not, then this would solve the problems you've been experiencing (well, unless you start a debugger with 2c, but you would need to explicitly request such combination). It would also allow the developers to choose their preferred workflow. It would fix OOTB experience, by starting xterm by default (kind of like ovpsim does). And it would improve the consistency of the launch script, by simplifying 1a into 2a.
So what do you think? I understand this would require some extra refactoring of the launch script, but this would solve the targeted problems once and for all, while not limiting developers to one particular way of managing terminals and kernel output.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,252,2017-04-07T16:07:05Z,2017-04-10T05:46:27Z,2017-04-15T08:55:45Z,CLOSED,False,24,13,1,https://github.com/cahirwpz,Make debugging session with OVPsim and QEMU work without glitches,1,[],https://github.com/cahirwpz/mimiker/pull/252,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/252#issuecomment-292782861,"I had experienced many problems trying to create a proper debugging session under gdb / gdbtui or cgdb. This change fixes most of them, but leaves some space for improvements.","Up to this moment I was not aware of your and other people workflow. Having that in mind I see my approach to solve the problem is flawed.
Nonetheless, as you perhaps noticed, my change was motivated by inconsistent launch script behaviour and clash on stdout between a simulator and a debugger. The solution you propose seems to leave the most freedom, yet yields consistent user experience.
Just a minor remark - with -t option I'd disallow to launch a debugger.
Please fix the script to match proposed behaviour (you can ditch my changes). When it's done, I'll check if my workflow is not affected (and apply fixes if needed) and we'll ask other developers if they experience any problems.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,253,2017-04-09T08:42:30Z,2017-05-29T05:39:51Z,2017-05-29T05:39:51Z,MERGED,True,134,29,11,https://github.com/czapiga,Basic accounting for threads,25,[],https://github.com/cahirwpz/mimiker/pull/253,https://github.com/czapiga,1,https://github.com/cahirwpz/mimiker/pull/253,These changes implements #246,These changes implements #246,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,253,2017-04-09T08:42:30Z,2017-05-29T05:39:51Z,2017-05-29T05:39:51Z,MERGED,True,134,29,11,https://github.com/czapiga,Basic accounting for threads,25,[],https://github.com/cahirwpz/mimiker/pull/253,https://github.com/czapiga,2,https://github.com/cahirwpz/mimiker/pull/253#issuecomment-297764277,These changes implements #246,After NetBSD code analysis I think there is little change needed here. I will update this ASAP,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,253,2017-04-09T08:42:30Z,2017-05-29T05:39:51Z,2017-05-29T05:39:51Z,MERGED,True,134,29,11,https://github.com/czapiga,Basic accounting for threads,25,[],https://github.com/cahirwpz/mimiker/pull/253,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/253#issuecomment-300112455,These changes implements #246,@rafalcieslak Could you investigate what caused a Travis failure – it's somehow related to run_tests.py script...,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,253,2017-04-09T08:42:30Z,2017-05-29T05:39:51Z,2017-05-29T05:39:51Z,MERGED,True,134,29,11,https://github.com/czapiga,Basic accounting for threads,25,[],https://github.com/cahirwpz/mimiker/pull/253,https://github.com/rafalcieslak,4,https://github.com/cahirwpz/mimiker/pull/253#issuecomment-300113933,These changes implements #246,"All it says is that kernel output had a non-ascii byte. That means either there are some non-ascii characters in our source code (some text editors automatically perform fancy substitutions for some characters), or kernel started dumping binary data (unterminated string, invalid ptr). I'm not sure if that's easily fixable by improving run_tests.py, I don't know any good way to dump raw binary data to std output in Python.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,253,2017-04-09T08:42:30Z,2017-05-29T05:39:51Z,2017-05-29T05:39:51Z,MERGED,True,134,29,11,https://github.com/czapiga,Basic accounting for threads,25,[],https://github.com/cahirwpz/mimiker/pull/253,https://github.com/rafalcieslak,5,https://github.com/cahirwpz/mimiker/pull/253#issuecomment-300777846,These changes implements #246,I hope I'll be able to tell more about this problem once #304 is merged.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,253,2017-04-09T08:42:30Z,2017-05-29T05:39:51Z,2017-05-29T05:39:51Z,MERGED,True,134,29,11,https://github.com/czapiga,Basic accounting for threads,25,[],https://github.com/cahirwpz/mimiker/pull/253,https://github.com/rafalcieslak,6,https://github.com/cahirwpz/mimiker/pull/253#issuecomment-301254164,These changes implements #246,"I've found the reason for non-ascii characters in output log:
Running test ramdisk.
file /usr/include/sys/errno.h:
/* errno is not a global variable, because that would make using it
   non-reentrant.  Instead, its address is returned by the function
   __errno.  */

#ifndef _SYS_ERRNO_H_
#ifdef __cplusplus
extern ""C"" {
#endif
#define _SYS_ERRNO_H_

#include <sys/reent.h>

#ifndef _REENT_ONLY
#define errno (*__errno())
extern int *__errno _PARAMS ((void));
#endif

/* Please don't use these variables directly.
   Use strerror instead. */
extern __IMPORT _CONST char * _CONST _sys_errlist[];
extern __IMPORT intPÂ��Â€�

Apparently the ramdisk tests reads some invalid data from include headers used for demonstration. I'll open a separate issue addressing the problem.
I have no idea what causes the test to fail, though. ktest_failure() does get called, but it gets stuck in
    for (test_entry_t **ptr = autorun_tests; *ptr != NULL; ptr++) {
??? autorun_tests should never be modified after tests have started, so it looks like some major memory corruption (or Travis output is bonkers - it doesn't even include confirmation from ./run_tests.py).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,253,2017-04-09T08:42:30Z,2017-05-29T05:39:51Z,2017-05-29T05:39:51Z,MERGED,True,134,29,11,https://github.com/czapiga,Basic accounting for threads,25,[],https://github.com/cahirwpz/mimiker/pull/253,https://github.com/cahirwpz,7,https://github.com/cahirwpz/mimiker/pull/253#issuecomment-303020639,These changes implements #246,Blocked by #331 as we need to measure time with higher resolution for the tests to pass.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,253,2017-04-09T08:42:30Z,2017-05-29T05:39:51Z,2017-05-29T05:39:51Z,MERGED,True,134,29,11,https://github.com/czapiga,Basic accounting for threads,25,[],https://github.com/cahirwpz/mimiker/pull/253,https://github.com/czapiga,8,https://github.com/cahirwpz/mimiker/pull/253#issuecomment-303391129,These changes implements #246,I don't understand travis output.. I did run make format and I'm aligned with upstream/master..,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,253,2017-04-09T08:42:30Z,2017-05-29T05:39:51Z,2017-05-29T05:39:51Z,MERGED,True,134,29,11,https://github.com/czapiga,Basic accounting for threads,25,[],https://github.com/cahirwpz/mimiker/pull/253,https://github.com/czapiga,9,https://github.com/cahirwpz/mimiker/pull/253#issuecomment-303391393,These changes implements #246,"@rafalcieslak please, can you look at this from travis POV",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,253,2017-04-09T08:42:30Z,2017-05-29T05:39:51Z,2017-05-29T05:39:51Z,MERGED,True,134,29,11,https://github.com/czapiga,Basic accounting for threads,25,[],https://github.com/cahirwpz/mimiker/pull/253,https://github.com/cahirwpz,10,https://github.com/cahirwpz/mimiker/pull/253#issuecomment-303434308,These changes implements #246,@czapiga which version of clang-format do you use locally?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,253,2017-04-09T08:42:30Z,2017-05-29T05:39:51Z,2017-05-29T05:39:51Z,MERGED,True,134,29,11,https://github.com/czapiga,Basic accounting for threads,25,[],https://github.com/cahirwpz/mimiker/pull/253,https://github.com/cahirwpz,11,https://github.com/cahirwpz/mimiker/pull/253#issuecomment-303522055,These changes implements #246,"@czapiga If you can reformulate timeval_t API to make it more convenient to use and render code that uses it more concise, then go for it!",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,253,2017-04-09T08:42:30Z,2017-05-29T05:39:51Z,2017-05-29T05:39:51Z,MERGED,True,134,29,11,https://github.com/czapiga,Basic accounting for threads,25,[],https://github.com/cahirwpz/mimiker/pull/253,https://github.com/czapiga,12,https://github.com/cahirwpz/mimiker/pull/253#issuecomment-303648169,These changes implements #246,@cahirwpz I use clang-format 3.9.1,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,253,2017-04-09T08:42:30Z,2017-05-29T05:39:51Z,2017-05-29T05:39:51Z,MERGED,True,134,29,11,https://github.com/czapiga,Basic accounting for threads,25,[],https://github.com/cahirwpz/mimiker/pull/253,https://github.com/czapiga,13,https://github.com/cahirwpz/mimiker/pull/253#issuecomment-303737519,These changes implements #246,I think tests can sometimes fail due to bug found during  #342. I will try to finish  #342 ASAP.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,253,2017-04-09T08:42:30Z,2017-05-29T05:39:51Z,2017-05-29T05:39:51Z,MERGED,True,134,29,11,https://github.com/czapiga,Basic accounting for threads,25,[],https://github.com/cahirwpz/mimiker/pull/253,https://github.com/czapiga,14,https://github.com/cahirwpz/mimiker/pull/253#issuecomment-304506000,These changes implements #246,@cahirwpz I think it's ready to merge,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,255,2017-04-09T21:15:02Z,2017-04-19T12:22:38Z,2017-04-19T12:22:38Z,MERGED,True,366,174,6,https://github.com/rafalcieslak,Launcher script cleanup,16,[],https://github.com/cahirwpz/mimiker/pull/255,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/255,"I decided to clean up the launch script so that it is easier to maintain and behaves more consistently.
There is still a lot of work ahead - there are some major problems wrt. how interrupts are managed, but I just wanted to demo the direction I'm taking.","I decided to clean up the launch script so that it is easier to maintain and behaves more consistently.
There is still a lot of work ahead - there are some major problems wrt. how interrupts are managed, but I just wanted to demo the direction I'm taking.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,255,2017-04-09T21:15:02Z,2017-04-19T12:22:38Z,2017-04-19T12:22:38Z,MERGED,True,366,174,6,https://github.com/rafalcieslak,Launcher script cleanup,16,[],https://github.com/cahirwpz/mimiker/pull/255,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/255#issuecomment-292821644,"I decided to clean up the launch script so that it is easier to maintain and behaves more consistently.
There is still a lot of work ahead - there are some major problems wrt. how interrupts are managed, but I just wanted to demo the direction I'm taking.","Some interesting challenges I've faced:
The start_new_session option for subprocess.Popen seemed cool, because it creates a new process group for the new process, and thus SIGINT sent to the parent (child) will not be delivered to the child (parent). We need this feature, because we want to sent Ctrl+C to the debugger without interrupting the simulator.
However, the problem with using process groups for all subprocesses is that when the parent is SIGTERMed, the children are not, so we need to take care of them in a signal handler. But a SIGKILL to the launch script is a worse problem: it does not kill children, and parent can't react on this! This leaves qemu running in background, which is unacceptable for many obvious reasons.
Solving this issue was quite a challenge, but eventually I came up with a simple solution: The debugger becomes the foreground process of the TTY. This way all events such as Ctrl+C are delivered directly to the debugger, which is convenient, and lets us manage processes in a sane manner.
Another problem, one which I am unable to fully solve, is that cgdb ignores SIGTERM. It registers a universal handler for some signals, including SIGINT, SIGHUP and SIGTERM, but the handler only processes some of these signals, not SIGTERM. That means the only simple way to stop the debugger (e.g. when the user closes xterm window) is to SIGKILL it, which gives it no chance to reset terminal configuration. I use stty sane to return to some reasonable config, but it's not perfect - and I shouldn't have to deal with such problem in the first place. Bad cgdb.",True,{'THUMBS_UP': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,255,2017-04-09T21:15:02Z,2017-04-19T12:22:38Z,2017-04-19T12:22:38Z,MERGED,True,366,174,6,https://github.com/rafalcieslak,Launcher script cleanup,16,[],https://github.com/cahirwpz/mimiker/pull/255,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/255#issuecomment-292822657,"I decided to clean up the launch script so that it is easier to maintain and behaves more consistently.
There is still a lot of work ahead - there are some major problems wrt. how interrupts are managed, but I just wanted to demo the direction I'm taking.","Okay, should be cleaned up and ready for review. Note that this is pretty much rewrite from scratch, so the diff is not the recommended way of reading changes.
Simulator choice, debugger and output direction are now configurable separately. All options conform to a simple shared interface, which simplifies the main script a lot, and makes it much easier to maintain all  options.
Available options, in order of preference:

-S - Simulators: ovpsim, qemu
-O - Output: xterm, server, stdio
-D - Debuggers: cgdb, ddd, emacs, gdbtui, gdb

I've tested all combinations except for ddd, emacs and gdbtui. That includes normal operation, as well as closing/killing processes.
Some convenience flags -s, -t, -d are supported and have kept unchanged meaning, for compatibility. In fact, this change should be entirely backwards-compatible - except for that by default qemu will also use xterm for output.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,256,2017-04-10T13:02:21Z,2017-04-14T17:52:22Z,2017-04-14T17:52:22Z,MERGED,True,124,65,13,https://github.com/rafalcieslak,Building initrd,6,[],https://github.com/cahirwpz/mimiker/pull/256,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/256,"This is my proposed solution for building the initrd with the kernel. The idea is to place some initrd.rules files in any place in the source tree. These files define what should be placed in the ramdisk - their format is self-explanatory, see e.g. user/initrd.rules:
prog/prog.uelf /bin/prog
fd_test/fd_test.uelf /bin/fd_test
test_fork/test_fork.uelf /bin/test_fork
misbehave/misbehave.uelf /bin/misbehave

The build script gathers these files and prepares the ramdisk according to these rules. It also generates a set of dependencies for make, so that it correctly updates the ramdisk when required.
This method is extensible, universal and simple to maintain.
@coodie, how do you like this script?","This is my proposed solution for building the initrd with the kernel. The idea is to place some initrd.rules files in any place in the source tree. These files define what should be placed in the ramdisk - their format is self-explanatory, see e.g. user/initrd.rules:
prog/prog.uelf /bin/prog
fd_test/fd_test.uelf /bin/fd_test
test_fork/test_fork.uelf /bin/test_fork
misbehave/misbehave.uelf /bin/misbehave

The build script gathers these files and prepares the ramdisk according to these rules. It also generates a set of dependencies for make, so that it correctly updates the ramdisk when required.
This method is extensible, universal and simple to maintain.
@coodie, how do you like this script?",True,"{'THUMBS_UP': ['https://github.com/coodie', 'https://github.com/cahirwpz']}"
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,256,2017-04-10T13:02:21Z,2017-04-14T17:52:22Z,2017-04-14T17:52:22Z,MERGED,True,124,65,13,https://github.com/rafalcieslak,Building initrd,6,[],https://github.com/cahirwpz/mimiker/pull/256,https://github.com/coodie,2,https://github.com/cahirwpz/mimiker/pull/256#issuecomment-292954278,"This is my proposed solution for building the initrd with the kernel. The idea is to place some initrd.rules files in any place in the source tree. These files define what should be placed in the ramdisk - their format is self-explanatory, see e.g. user/initrd.rules:
prog/prog.uelf /bin/prog
fd_test/fd_test.uelf /bin/fd_test
test_fork/test_fork.uelf /bin/test_fork
misbehave/misbehave.uelf /bin/misbehave

The build script gathers these files and prepares the ramdisk according to these rules. It also generates a set of dependencies for make, so that it correctly updates the ramdisk when required.
This method is extensible, universal and simple to maintain.
@coodie, how do you like this script?","I don't really like using  Makefile (because It is old and hard to use), and I'd rather avoid using Makefile as much as possible. I'd rather have small bash script which builds initial ramdisk every time it should be built. In this case we have a problem where you want to load .uelf files which are inside our build system, therefore ramdisk should be rebuild every time they are changed. Although I hate Makefiles, I must admit that this solution is probably the cleanest, and your script is actually pretty readable.
EDIT
Oh well, I haven't understood this solution well. It is actually simpler than I thought. It's simple bash script which puts files into ramdiskbased on some file and rebuilds it every time our kernel is changed.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,256,2017-04-10T13:02:21Z,2017-04-14T17:52:22Z,2017-04-14T17:52:22Z,MERGED,True,124,65,13,https://github.com/rafalcieslak,Building initrd,6,[],https://github.com/cahirwpz/mimiker/pull/256,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/256#issuecomment-293176698,"This is my proposed solution for building the initrd with the kernel. The idea is to place some initrd.rules files in any place in the source tree. These files define what should be placed in the ramdisk - their format is self-explanatory, see e.g. user/initrd.rules:
prog/prog.uelf /bin/prog
fd_test/fd_test.uelf /bin/fd_test
test_fork/test_fork.uelf /bin/test_fork
misbehave/misbehave.uelf /bin/misbehave

The build script gathers these files and prepares the ramdisk according to these rules. It also generates a set of dependencies for make, so that it correctly updates the ramdisk when required.
This method is extensible, universal and simple to maintain.
@coodie, how do you like this script?",@coodie Please finish the review and approve changes if you don't have any more remarks.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,256,2017-04-10T13:02:21Z,2017-04-14T17:52:22Z,2017-04-14T17:52:22Z,MERGED,True,124,65,13,https://github.com/rafalcieslak,Building initrd,6,[],https://github.com/cahirwpz/mimiker/pull/256,https://github.com/rafalcieslak,4,https://github.com/cahirwpz/mimiker/pull/256#issuecomment-293643182,"This is my proposed solution for building the initrd with the kernel. The idea is to place some initrd.rules files in any place in the source tree. These files define what should be placed in the ramdisk - their format is self-explanatory, see e.g. user/initrd.rules:
prog/prog.uelf /bin/prog
fd_test/fd_test.uelf /bin/fd_test
test_fork/test_fork.uelf /bin/test_fork
misbehave/misbehave.uelf /bin/misbehave

The build script gathers these files and prepares the ramdisk according to these rules. It also generates a set of dependencies for make, so that it correctly updates the ramdisk when required.
This method is extensible, universal and simple to maintain.
@coodie, how do you like this script?","I've updated this branch to address mentioned problems, and to reflect on changes introduced by merging cpio support.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,256,2017-04-10T13:02:21Z,2017-04-14T17:52:22Z,2017-04-14T17:52:22Z,MERGED,True,124,65,13,https://github.com/rafalcieslak,Building initrd,6,[],https://github.com/cahirwpz/mimiker/pull/256,https://github.com/rafalcieslak,5,https://github.com/cahirwpz/mimiker/pull/256#issuecomment-294162123,"This is my proposed solution for building the initrd with the kernel. The idea is to place some initrd.rules files in any place in the source tree. These files define what should be placed in the ramdisk - their format is self-explanatory, see e.g. user/initrd.rules:
prog/prog.uelf /bin/prog
fd_test/fd_test.uelf /bin/fd_test
test_fork/test_fork.uelf /bin/test_fork
misbehave/misbehave.uelf /bin/misbehave

The build script gathers these files and prepares the ramdisk according to these rules. It also generates a set of dependencies for make, so that it correctly updates the ramdisk when required.
This method is extensible, universal and simple to maintain.
@coodie, how do you like this script?",So do we merge this?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,257,2017-04-13T14:17:21Z,2017-04-15T13:07:10Z,2017-04-15T13:07:10Z,MERGED,True,16,0,1,https://github.com/rafalcieslak,Implemented dev_uart_read,3,[],https://github.com/cahirwpz/mimiker/pull/257,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/257,"This is just filling in the missing glue between uart_cbus and dev_uart, so that user programs can get some bytes from uart input.
A proper solution will require device infrastructure and terminal support - but we're far away from that.","This is just filling in the missing glue between uart_cbus and dev_uart, so that user programs can get some bytes from uart input.
A proper solution will require device infrastructure and terminal support - but we're far away from that.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,258,2017-04-13T18:55:28Z,2017-05-01T15:53:02Z,2017-05-01T15:53:02Z,CLOSED,False,399,139,12,https://github.com/rafalcieslak,Experiments with driver interface,2,[],https://github.com/cahirwpz/mimiker/pull/258,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/258,"Here are my initial attempts at preparing a driver interface. I've decided to open this PR very early, so that you can comment on whether my direction is sound.
This interface is mostly inspired by LDD3 (https://lwn.net/Kernel/LDD3/) with some details based on FreeBSD implementation. My version is stripped down to absolute minimum, so that we have a solid hierarchy of data structures and their responsibilities, without cluttering the interface with features we won't be using right now.
At this point there is some partial support for PCI bus (for the most part I've extracted platform-independent parts from mips/pci.c to sys/pci_bus.c), PCI drivers (an example driver for 82371EB is present, but it doesn't do anything at all) and device-driver matching and probing.
I will continue this work so that the 82371EB actually does something useful - ideally I would use it to access the 16550 beneath it.
Note that I am NOT using any source code from Linux.","Here are my initial attempts at preparing a driver interface. I've decided to open this PR very early, so that you can comment on whether my direction is sound.
This interface is mostly inspired by LDD3 (https://lwn.net/Kernel/LDD3/) with some details based on FreeBSD implementation. My version is stripped down to absolute minimum, so that we have a solid hierarchy of data structures and their responsibilities, without cluttering the interface with features we won't be using right now.
At this point there is some partial support for PCI bus (for the most part I've extracted platform-independent parts from mips/pci.c to sys/pci_bus.c), PCI drivers (an example driver for 82371EB is present, but it doesn't do anything at all) and device-driver matching and probing.
I will continue this work so that the 82371EB actually does something useful - ideally I would use it to access the 16550 beneath it.
Note that I am NOT using any source code from Linux.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,258,2017-04-13T18:55:28Z,2017-05-01T15:53:02Z,2017-05-01T15:53:02Z,CLOSED,False,399,139,12,https://github.com/rafalcieslak,Experiments with driver interface,2,[],https://github.com/cahirwpz/mimiker/pull/258,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/258#issuecomment-294946946,"Here are my initial attempts at preparing a driver interface. I've decided to open this PR very early, so that you can comment on whether my direction is sound.
This interface is mostly inspired by LDD3 (https://lwn.net/Kernel/LDD3/) with some details based on FreeBSD implementation. My version is stripped down to absolute minimum, so that we have a solid hierarchy of data structures and their responsibilities, without cluttering the interface with features we won't be using right now.
At this point there is some partial support for PCI bus (for the most part I've extracted platform-independent parts from mips/pci.c to sys/pci_bus.c), PCI drivers (an example driver for 82371EB is present, but it doesn't do anything at all) and device-driver matching and probing.
I will continue this work so that the 82371EB actually does something useful - ideally I would use it to access the 16550 beneath it.
Note that I am NOT using any source code from Linux.",The sooner we meet and discuss our ideas for driver infrastructure the better is for the project. I hope we'll smoothly converge at reasonable solution that could be quickly implemented.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,258,2017-04-13T18:55:28Z,2017-05-01T15:53:02Z,2017-05-01T15:53:02Z,CLOSED,False,399,139,12,https://github.com/rafalcieslak,Experiments with driver interface,2,[],https://github.com/cahirwpz/mimiker/pull/258,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/258#issuecomment-298359933,"Here are my initial attempts at preparing a driver interface. I've decided to open this PR very early, so that you can comment on whether my direction is sound.
This interface is mostly inspired by LDD3 (https://lwn.net/Kernel/LDD3/) with some details based on FreeBSD implementation. My version is stripped down to absolute minimum, so that we have a solid hierarchy of data structures and their responsibilities, without cluttering the interface with features we won't be using right now.
At this point there is some partial support for PCI bus (for the most part I've extracted platform-independent parts from mips/pci.c to sys/pci_bus.c), PCI drivers (an example driver for 82371EB is present, but it doesn't do anything at all) and device-driver matching and probing.
I will continue this work so that the 82371EB actually does something useful - ideally I would use it to access the 16550 beneath it.
Note that I am NOT using any source code from Linux.",This branch is obsolete and no longer provides useful insight.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,259,2017-04-14T15:32:56Z,2017-04-17T18:23:36Z,2017-04-17T18:23:36Z,MERGED,True,135,112,12,https://github.com/rafalcieslak,Removed files embedded in kernel image,8,[],https://github.com/cahirwpz/mimiker/pull/259,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/259,"We no longer need the silly trick of embedding files into kernel image - we can use ramdisk for providing files. This simplifies build and linking process.

Removed make rules related to .uelf.o.
Moved /initrd mount point to /.
Renamed references to user programs to paths in /bin.
Linked do_exec with vfs interface.
Implemented absolutely minimal stub of getattr for initrd - @coodie, I suppose the rest will be up to you.
Fixed a minor bug in intird where it would return invalid errno code.","We no longer need the silly trick of embedding files into kernel image - we can use ramdisk for providing files. This simplifies build and linking process.

Removed make rules related to .uelf.o.
Moved /initrd mount point to /.
Renamed references to user programs to paths in /bin.
Linked do_exec with vfs interface.
Implemented absolutely minimal stub of getattr for initrd - @coodie, I suppose the rest will be up to you.
Fixed a minor bug in intird where it would return invalid errno code.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,260,2017-04-14T23:22:17Z,2017-04-18T14:49:36Z,2017-04-19T13:18:37Z,CLOSED,False,35,0,2,https://github.com/coodie,Add initrd_open but mostly tests,1,[],https://github.com/cahirwpz/mimiker/pull/260,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/260,"I took a look at current implementation of initrd and realised that open operation was missing. However it turns out it was very easy to add, because of vnode_open_generic.","I took a look at current implementation of initrd and realised that open operation was missing. However it turns out it was very easy to add, because of vnode_open_generic.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,260,2017-04-14T23:22:17Z,2017-04-18T14:49:36Z,2017-04-19T13:18:37Z,CLOSED,False,35,0,2,https://github.com/coodie,Add initrd_open but mostly tests,1,[],https://github.com/cahirwpz/mimiker/pull/260,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/260#issuecomment-294551331,"I took a look at current implementation of initrd and realised that open operation was missing. However it turns out it was very easy to add, because of vnode_open_generic.",Please merge from master - the ramdisk is now mounted in the root / directory.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,260,2017-04-14T23:22:17Z,2017-04-18T14:49:36Z,2017-04-19T13:18:37Z,CLOSED,False,35,0,2,https://github.com/coodie,Add initrd_open but mostly tests,1,[],https://github.com/cahirwpz/mimiker/pull/260,https://github.com/coodie,3,https://github.com/cahirwpz/mimiker/pull/260#issuecomment-294869067,"I took a look at current implementation of initrd and realised that open operation was missing. However it turns out it was very easy to add, because of vnode_open_generic.","With #261 addition this PR is no longer necessary, because reading from initrd is already tested there, and vnode_generic_open is added to initrd file system operations.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,261,2017-04-17T14:17:20Z,2017-04-18T14:21:20Z,2017-04-19T13:17:52Z,MERGED,True,58,5,7,https://github.com/coodie,Uiomove offset,9,[],https://github.com/cahirwpz/mimiker/pull/261,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/261,"While I've been working on getdirents syscall I had 'elegancy problem'. My implementation of getdirents system call was incredibly ugly and I couldn't really come up with elegant way of fixing it.
I have looked into NetBSD code and noticed that it is indeed fault of our implementation of 'uiomove'. In our case uio_offset is IN argument of uio, while in fact this argument is 'OUT' argument supposed to show how much of the entire UIO operation was shifted. This argument is also used in setting proper file reading offsets. I can explain it in more details on seminary. Here is link to the NetBSD's implementaiton of uiomove:
http://bxr.su/NetBSD/sys/kern/subr_copy.c#99
Here is example usage in tmpfs in getdirents operation:
http://bxr.su/NetBSD/sys/fs/tmpfs/tmpfs_subr.c#807
Note how they check uio->uio_offset in their implementation and based on that they do something. I haven't looked into other operations, but I'm pretty confident uio_offset is also used there in similar way.","While I've been working on getdirents syscall I had 'elegancy problem'. My implementation of getdirents system call was incredibly ugly and I couldn't really come up with elegant way of fixing it.
I have looked into NetBSD code and noticed that it is indeed fault of our implementation of 'uiomove'. In our case uio_offset is IN argument of uio, while in fact this argument is 'OUT' argument supposed to show how much of the entire UIO operation was shifted. This argument is also used in setting proper file reading offsets. I can explain it in more details on seminary. Here is link to the NetBSD's implementaiton of uiomove:
http://bxr.su/NetBSD/sys/kern/subr_copy.c#99
Here is example usage in tmpfs in getdirents operation:
http://bxr.su/NetBSD/sys/fs/tmpfs/tmpfs_subr.c#807
Note how they check uio->uio_offset in their implementation and based on that they do something. I haven't looked into other operations, but I'm pretty confident uio_offset is also used there in similar way.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,261,2017-04-17T14:17:20Z,2017-04-18T14:21:20Z,2017-04-19T13:17:52Z,MERGED,True,58,5,7,https://github.com/coodie,Uiomove offset,9,[],https://github.com/cahirwpz/mimiker/pull/261,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/261#issuecomment-294547353,"While I've been working on getdirents syscall I had 'elegancy problem'. My implementation of getdirents system call was incredibly ugly and I couldn't really come up with elegant way of fixing it.
I have looked into NetBSD code and noticed that it is indeed fault of our implementation of 'uiomove'. In our case uio_offset is IN argument of uio, while in fact this argument is 'OUT' argument supposed to show how much of the entire UIO operation was shifted. This argument is also used in setting proper file reading offsets. I can explain it in more details on seminary. Here is link to the NetBSD's implementaiton of uiomove:
http://bxr.su/NetBSD/sys/kern/subr_copy.c#99
Here is example usage in tmpfs in getdirents operation:
http://bxr.su/NetBSD/sys/fs/tmpfs/tmpfs_subr.c#807
Note how they check uio->uio_offset in their implementation and based on that they do something. I haven't looked into other operations, but I'm pretty confident uio_offset is also used there in similar way.","I appreciate your time investigating this, and I admit our current handling of uio_offset is incomplete (and I am the one to blame for that). However, I am not convinced that the offset is just an out argument! My idea of the purpose of the offset field is such that it should be possible to call uiomove multiple times in sequence, which should process subsequent data (this may be useful e.g. when some target buffer is smaller than the amount of data we want to transfer). The offset field would be updated on each call to uiomove so that the next call will begin transferring data from where it previously ended. That would make the offset an in/out argument.
However, NetBSD's implementation of uiomove indeed ignores the input value of the offset - as you probably have noticed. I suppose it is this way because it's a generic implementation of uiomove, and it is supposed to be relevant even for devices which do not support the concept of position. Please have a look at uiomove_frombuf, which actually reads the offset from uio, and passes it to uiomove with pos + offset, size - offset arguments (!!!). Apparently our implementation of uiomove has the semantics of NetBSD's uiomove_frombuf!
The example you've linked to is actually a proof against your argument. Notice the call to uiomove appears after the uio_offset gets validated. The tmpfs_dir_getdents function is supposed to process a data transfer as requested by the uio argument - and to achieve that it starts by checking whether the uio_offset argument matches one of specific special cases (and if it does, a different function gets to process  the request). That confirms that the uio_offset is an input argument - it just gets processed early (see line 840) to determine which buffer we'll be reading from, and therefore afterwards the actual call to uiomove can ignore the offset.
So it seems that you are partially right. The uio_offset is both input and output argument. It should be updated by uiomove, and sometimes it may be useful to check it after performing uiomove. But it should be also possible to use it as an input argument, to specify the position in target buffer where the data transfer should begin.
This is indeed a complex mechanism, so it's good you've put some extra efforts into investigating it, and it would be great if you could explain these issues on our next meeting so that everyone can have a clear idea on how to use uio. The part where you fix uiomove so that it increments uio_offset is an important fix. But don't make it ignore the input value of uio_offset - although it might be a good idea to split uiomove into uiomove and uiomove_frombuf, with only the former taking the offset into account. You may want to investigate how uiomove_frombuf is used in practice.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,261,2017-04-17T14:17:20Z,2017-04-18T14:21:20Z,2017-04-19T13:17:52Z,MERGED,True,58,5,7,https://github.com/coodie,Uiomove offset,9,[],https://github.com/cahirwpz/mimiker/pull/261,https://github.com/coodie,3,https://github.com/cahirwpz/mimiker/pull/261#issuecomment-294556473,"While I've been working on getdirents syscall I had 'elegancy problem'. My implementation of getdirents system call was incredibly ugly and I couldn't really come up with elegant way of fixing it.
I have looked into NetBSD code and noticed that it is indeed fault of our implementation of 'uiomove'. In our case uio_offset is IN argument of uio, while in fact this argument is 'OUT' argument supposed to show how much of the entire UIO operation was shifted. This argument is also used in setting proper file reading offsets. I can explain it in more details on seminary. Here is link to the NetBSD's implementaiton of uiomove:
http://bxr.su/NetBSD/sys/kern/subr_copy.c#99
Here is example usage in tmpfs in getdirents operation:
http://bxr.su/NetBSD/sys/fs/tmpfs/tmpfs_subr.c#807
Note how they check uio->uio_offset in their implementation and based on that they do something. I haven't looked into other operations, but I'm pretty confident uio_offset is also used there in similar way.","As far as I understand this, the offset argument simply represents how much data we have currently transferred using the uio we already have. Because If we pass our uio many times around program transferring data between different buffers we might lose track of how much data we transferred. This data is incredibly useful in many places. One good example might be executing read on some file descriptor many times and trying to keep track of offset in file. If uiomove performs copying operation on buf+offset instead 'buf' then it becomes nearly impossible to implement lazy reading efficiently. Also, what if our data representation is not contiguous array but it is some list (as it is in the case of readdir). Normally we would probably have to transfer it to array representation and then run uiomove on that, or make some nasty shifting and passing buf-offset making the final implementation look terrible (I've run into that while working on readdir). Otherwise we can just locate proper element of the list (which represents offset we are supposed to read from), and starting from there run uiomove on each element of the list until we satisfy the uiomove request.
I'm 100% sure this is correct solution and I'm not going to work on readdir until this is merged with master.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,261,2017-04-17T14:17:20Z,2017-04-18T14:21:20Z,2017-04-19T13:17:52Z,MERGED,True,58,5,7,https://github.com/coodie,Uiomove offset,9,[],https://github.com/cahirwpz/mimiker/pull/261,https://github.com/rafalcieslak,4,https://github.com/cahirwpz/mimiker/pull/261#issuecomment-294559594,"While I've been working on getdirents syscall I had 'elegancy problem'. My implementation of getdirents system call was incredibly ugly and I couldn't really come up with elegant way of fixing it.
I have looked into NetBSD code and noticed that it is indeed fault of our implementation of 'uiomove'. In our case uio_offset is IN argument of uio, while in fact this argument is 'OUT' argument supposed to show how much of the entire UIO operation was shifted. This argument is also used in setting proper file reading offsets. I can explain it in more details on seminary. Here is link to the NetBSD's implementaiton of uiomove:
http://bxr.su/NetBSD/sys/kern/subr_copy.c#99
Here is example usage in tmpfs in getdirents operation:
http://bxr.su/NetBSD/sys/fs/tmpfs/tmpfs_subr.c#807
Note how they check uio->uio_offset in their implementation and based on that they do something. I haven't looked into other operations, but I'm pretty confident uio_offset is also used there in similar way.","Please read my previous comment carefully, because you are clearly missing some important details. I agree with the points you've raised. In particular, the solution I suggested (separating uiomove and uiomove_frombuf) solves the issue of lazy reading and accessing noncontiguous data. More so, it solves it the way you want it to be solved - while still offering the sporadic convenience of current implementation. If you really can't see my point, then I guess we'll have to discuss it in person, because I am strongly against merging this proposal in its current form.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,261,2017-04-17T14:17:20Z,2017-04-18T14:21:20Z,2017-04-19T13:17:52Z,MERGED,True,58,5,7,https://github.com/coodie,Uiomove offset,9,[],https://github.com/cahirwpz/mimiker/pull/261,https://github.com/coodie,5,https://github.com/cahirwpz/mimiker/pull/261#issuecomment-294604156,"While I've been working on getdirents syscall I had 'elegancy problem'. My implementation of getdirents system call was incredibly ugly and I couldn't really come up with elegant way of fixing it.
I have looked into NetBSD code and noticed that it is indeed fault of our implementation of 'uiomove'. In our case uio_offset is IN argument of uio, while in fact this argument is 'OUT' argument supposed to show how much of the entire UIO operation was shifted. This argument is also used in setting proper file reading offsets. I can explain it in more details on seminary. Here is link to the NetBSD's implementaiton of uiomove:
http://bxr.su/NetBSD/sys/kern/subr_copy.c#99
Here is example usage in tmpfs in getdirents operation:
http://bxr.su/NetBSD/sys/fs/tmpfs/tmpfs_subr.c#807
Note how they check uio->uio_offset in their implementation and based on that they do something. I haven't looked into other operations, but I'm pretty confident uio_offset is also used there in similar way.","Oh well. I think I get your point. At this moment this isn't really that big issue, because I don't see where uiomove_frombuf might be used.
I think this would be good to add uiomove_frombuf function anyway, so someone who isn't familiar with uio has this function already. I think adding this function to vnode_initrd_read will provide good example.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,261,2017-04-17T14:17:20Z,2017-04-18T14:21:20Z,2017-04-19T13:17:52Z,MERGED,True,58,5,7,https://github.com/coodie,Uiomove offset,9,[],https://github.com/cahirwpz/mimiker/pull/261,https://github.com/rafalcieslak,6,https://github.com/cahirwpz/mimiker/pull/261#issuecomment-294738950,"While I've been working on getdirents syscall I had 'elegancy problem'. My implementation of getdirents system call was incredibly ugly and I couldn't really come up with elegant way of fixing it.
I have looked into NetBSD code and noticed that it is indeed fault of our implementation of 'uiomove'. In our case uio_offset is IN argument of uio, while in fact this argument is 'OUT' argument supposed to show how much of the entire UIO operation was shifted. This argument is also used in setting proper file reading offsets. I can explain it in more details on seminary. Here is link to the NetBSD's implementaiton of uiomove:
http://bxr.su/NetBSD/sys/kern/subr_copy.c#99
Here is example usage in tmpfs in getdirents operation:
http://bxr.su/NetBSD/sys/fs/tmpfs/tmpfs_subr.c#807
Note how they check uio->uio_offset in their implementation and based on that they do something. I haven't looked into other operations, but I'm pretty confident uio_offset is also used there in similar way.","My experiments suggest that uiomove_frombuf may be very useful for device drivers, free physmem access and buffered I/O.
Since you're recently working with many uios, I thought you may want to implement #262 as well, either in this or a separate PR.
As a side note, we are currently missing an important test case, which would verify that we manage file positions correctly. Such test would have to call read (from userspace) multiple times and check if different parts of the file are read, it would also have to see whether lseek works as expected. This is somewhat related to this PR, as you slightly change the way these offsets are managed, and we have no test to confirm you didn't break anything. [However, I do have manually tested this branch with DOOM which heavily relies on these offsets being correct, and I've not found any problems.]",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,261,2017-04-17T14:17:20Z,2017-04-18T14:21:20Z,2017-04-19T13:17:52Z,MERGED,True,58,5,7,https://github.com/coodie,Uiomove offset,9,[],https://github.com/cahirwpz/mimiker/pull/261,https://github.com/cahirwpz,7,https://github.com/cahirwpz/mimiker/pull/261#issuecomment-294743432,"While I've been working on getdirents syscall I had 'elegancy problem'. My implementation of getdirents system call was incredibly ugly and I couldn't really come up with elegant way of fixing it.
I have looked into NetBSD code and noticed that it is indeed fault of our implementation of 'uiomove'. In our case uio_offset is IN argument of uio, while in fact this argument is 'OUT' argument supposed to show how much of the entire UIO operation was shifted. This argument is also used in setting proper file reading offsets. I can explain it in more details on seminary. Here is link to the NetBSD's implementaiton of uiomove:
http://bxr.su/NetBSD/sys/kern/subr_copy.c#99
Here is example usage in tmpfs in getdirents operation:
http://bxr.su/NetBSD/sys/fs/tmpfs/tmpfs_subr.c#807
Note how they check uio->uio_offset in their implementation and based on that they do something. I haven't looked into other operations, but I'm pretty confident uio_offset is also used there in similar way.","I'm pleased to see that you sorted out the issue by yourselves :-)
Having read your discussion about uiomove and uiomove_frombuf, comparing corresponding manual pages and peeking at FreeBSD and NetBSD implementations I'm convinced this PR fixes important issue and is ready to be merged.
However, as @rafalcieslak suggested, I'd like to see extra test case(s) (if possible) that would trigger the bug in the original code. As for #262 - it's probably better to implement it in another PR.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,261,2017-04-17T14:17:20Z,2017-04-18T14:21:20Z,2017-04-19T13:17:52Z,MERGED,True,58,5,7,https://github.com/coodie,Uiomove offset,9,[],https://github.com/cahirwpz/mimiker/pull/261,https://github.com/coodie,8,https://github.com/cahirwpz/mimiker/pull/261#issuecomment-294824969,"While I've been working on getdirents syscall I had 'elegancy problem'. My implementation of getdirents system call was incredibly ugly and I couldn't really come up with elegant way of fixing it.
I have looked into NetBSD code and noticed that it is indeed fault of our implementation of 'uiomove'. In our case uio_offset is IN argument of uio, while in fact this argument is 'OUT' argument supposed to show how much of the entire UIO operation was shifted. This argument is also used in setting proper file reading offsets. I can explain it in more details on seminary. Here is link to the NetBSD's implementaiton of uiomove:
http://bxr.su/NetBSD/sys/kern/subr_copy.c#99
Here is example usage in tmpfs in getdirents operation:
http://bxr.su/NetBSD/sys/fs/tmpfs/tmpfs_subr.c#807
Note how they check uio->uio_offset in their implementation and based on that they do something. I haven't looked into other operations, but I'm pretty confident uio_offset is also used there in similar way.",In order to write tests you want I need to add vnode_generic_open which is added in other PR. This is one line change and I hope you don't mind I added this in this PR. There is big part of lseek implementation missing and I don't think this is relevant for this PR.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,261,2017-04-17T14:17:20Z,2017-04-18T14:21:20Z,2017-04-19T13:17:52Z,MERGED,True,58,5,7,https://github.com/coodie,Uiomove offset,9,[],https://github.com/cahirwpz/mimiker/pull/261,https://github.com/rafalcieslak,9,https://github.com/cahirwpz/mimiker/pull/261#issuecomment-294829073,"While I've been working on getdirents syscall I had 'elegancy problem'. My implementation of getdirents system call was incredibly ugly and I couldn't really come up with elegant way of fixing it.
I have looked into NetBSD code and noticed that it is indeed fault of our implementation of 'uiomove'. In our case uio_offset is IN argument of uio, while in fact this argument is 'OUT' argument supposed to show how much of the entire UIO operation was shifted. This argument is also used in setting proper file reading offsets. I can explain it in more details on seminary. Here is link to the NetBSD's implementaiton of uiomove:
http://bxr.su/NetBSD/sys/kern/subr_copy.c#99
Here is example usage in tmpfs in getdirents operation:
http://bxr.su/NetBSD/sys/fs/tmpfs/tmpfs_subr.c#807
Note how they check uio->uio_offset in their implementation and based on that they do something. I haven't looked into other operations, but I'm pretty confident uio_offset is also used there in similar way.","Yes, current lseek is very limited. Please merge from master! We've recently started mounting the ramdisk in / instead of /initrd.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,263,2017-04-17T21:10:07Z,2017-04-18T07:10:27Z,2017-04-18T07:10:27Z,MERGED,True,1,1,1,https://github.com/rafalcieslak,Increased stack size to 8 MiB,1,[],https://github.com/cahirwpz/mimiker/pull/263,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/263,"We've discussed this some long time ago, and I though I've already fixed this - but apparently not. Our user program stack is far too small and does not grow. This tiny patch increases stack size to 8MiB, which should be enough for most programs. Since the underlying pages are provided on-demand, this change has no performance penalties.","We've discussed this some long time ago, and I though I've already fixed this - but apparently not. Our user program stack is far too small and does not grow. This tiny patch increases stack size to 8MiB, which should be enough for most programs. Since the underlying pages are provided on-demand, this change has no performance penalties.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,264,2017-04-17T21:18:26Z,2017-04-18T09:39:09Z,2017-04-18T09:39:09Z,MERGED,True,11,7,2,https://github.com/rafalcieslak,Fixed file attr structure's newlib compatibility,2,[],https://github.com/cahirwpz/mimiker/pull/264,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/264,"We've recently defined our dev_t, ino_t, mode_t (probably when the cpio ramdisk was introduced). Since then our struct vattr is no longer binary compatible with newlib's struct stat. This results in user programs being unable to correctly ask about file size etc! This branch fixes our vattr structure definition (in newlib compatibility mode) so that it matches newlib's layout.
I guess we'll have to eventually look into porting newlib, but until then this will be enough to get some userspace programs running correctly.","We've recently defined our dev_t, ino_t, mode_t (probably when the cpio ramdisk was introduced). Since then our struct vattr is no longer binary compatible with newlib's struct stat. This results in user programs being unable to correctly ask about file size etc! This branch fixes our vattr structure definition (in newlib compatibility mode) so that it matches newlib's layout.
I guess we'll have to eventually look into porting newlib, but until then this will be enough to get some userspace programs running correctly.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,264,2017-04-17T21:18:26Z,2017-04-18T09:39:09Z,2017-04-18T09:39:09Z,MERGED,True,11,7,2,https://github.com/rafalcieslak,Fixed file attr structure's newlib compatibility,2,[],https://github.com/cahirwpz/mimiker/pull/264,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/264#issuecomment-294738831,"We've recently defined our dev_t, ino_t, mode_t (probably when the cpio ramdisk was introduced). Since then our struct vattr is no longer binary compatible with newlib's struct stat. This results in user programs being unable to correctly ask about file size etc! This branch fixes our vattr structure definition (in newlib compatibility mode) so that it matches newlib's layout.
I guess we'll have to eventually look into porting newlib, but until then this will be enough to get some userspace programs running correctly.","I think it's better to align the size of dev_t, ino_t, mode_t and other system-wide types with syscall interface rather that particular filesystem driver. As such I'd prefer to declare cpio_dev_t type instead of newlib_dev_t. Does it make sense?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,265,2017-04-18T10:48:21Z,2017-04-18T12:03:31Z,2017-04-19T13:18:20Z,MERGED,True,2,1,1,https://github.com/rafalcieslak,Fixed occasional deadlock on `thread_join`,5,['bug'],https://github.com/cahirwpz/mimiker/pull/265,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/265,"A closer investigation uncovered that sched_switch is flawed and it's critical section ended too soon. Before ctx_switch re-disables interrupts, they are enabled for a short while by critical_leave(). If the thread gets preempted at that very moment, we end up with multiple threads marked as RUNNING, neither are added to run queue, etc. which caused the deadlock we occasionally observed in Travis results.
This fix extends the critical section until after ctx_switch, which prevents the described problem. I've restarted the Travis test 10+ times without a single failure.
I expect this is the last change needed to fix Travis false negatives.","A closer investigation uncovered that sched_switch is flawed and it's critical section ended too soon. Before ctx_switch re-disables interrupts, they are enabled for a short while by critical_leave(). If the thread gets preempted at that very moment, we end up with multiple threads marked as RUNNING, neither are added to run queue, etc. which caused the deadlock we occasionally observed in Travis results.
This fix extends the critical section until after ctx_switch, which prevents the described problem. I've restarted the Travis test 10+ times without a single failure.
I expect this is the last change needed to fix Travis false negatives.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,265,2017-04-18T10:48:21Z,2017-04-18T12:03:31Z,2017-04-19T13:18:20Z,MERGED,True,2,1,1,https://github.com/rafalcieslak,Fixed occasional deadlock on `thread_join`,5,['bug'],https://github.com/cahirwpz/mimiker/pull/265,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/265#issuecomment-294808791,"A closer investigation uncovered that sched_switch is flawed and it's critical section ended too soon. Before ctx_switch re-disables interrupts, they are enabled for a short while by critical_leave(). If the thread gets preempted at that very moment, we end up with multiple threads marked as RUNNING, neither are added to run queue, etc. which caused the deadlock we occasionally observed in Travis results.
This fix extends the critical section until after ctx_switch, which prevents the described problem. I've restarted the Travis test 10+ times without a single failure.
I expect this is the last change needed to fix Travis false negatives.",The fix makes 100% sense. It's a pity I didn't find it during a code review -_-,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,265,2017-04-18T10:48:21Z,2017-04-18T12:03:31Z,2017-04-19T13:18:20Z,MERGED,True,2,1,1,https://github.com/rafalcieslak,Fixed occasional deadlock on `thread_join`,5,['bug'],https://github.com/cahirwpz/mimiker/pull/265,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/265#issuecomment-294810913,"A closer investigation uncovered that sched_switch is flawed and it's critical section ended too soon. Before ctx_switch re-disables interrupts, they are enabled for a short while by critical_leave(). If the thread gets preempted at that very moment, we end up with multiple threads marked as RUNNING, neither are added to run queue, etc. which caused the deadlock we occasionally observed in Travis results.
This fix extends the critical section until after ctx_switch, which prevents the described problem. I've restarted the Travis test 10+ times without a single failure.
I expect this is the last change needed to fix Travis false negatives.","For the record, this issue was introduced by #118, so a very long time ago. I suppose perfect synchronization wasn't that important back then.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,266,2017-04-18T14:46:23Z,2017-04-19T13:14:10Z,2017-04-19T13:17:47Z,MERGED,True,131,100,12,https://github.com/cahirwpz,Decouple console functionality from UART driver code,4,[],https://github.com/cahirwpz/mimiker/pull/266,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/266,"The change aims at decoupling CBUS UART driver code from console-like device functionality. The interface is loosely based on *BSD console device interface present in cons.h and described in cons(9).
To make linker sets work for files in mips subdirectory I had to modify top-level Makefile (that took me some time to figure out).
In long run I'm aiming at decoupling driver code from hardware resource with help of bus_space(9)-like interface which has been partially implemented in bus-space branch.","The change aims at decoupling CBUS UART driver code from console-like device functionality. The interface is loosely based on *BSD console device interface present in cons.h and described in cons(9).
To make linker sets work for files in mips subdirectory I had to modify top-level Makefile (that took me some time to figure out).
In long run I'm aiming at decoupling driver code from hardware resource with help of bus_space(9)-like interface which has been partially implemented in bus-space branch.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,266,2017-04-18T14:46:23Z,2017-04-19T13:14:10Z,2017-04-19T13:17:47Z,MERGED,True,131,100,12,https://github.com/cahirwpz,Decouple console functionality from UART driver code,4,[],https://github.com/cahirwpz/mimiker/pull/266,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/266#issuecomment-295122419,"The change aims at decoupling CBUS UART driver code from console-like device functionality. The interface is loosely based on *BSD console device interface present in cons.h and described in cons(9).
To make linker sets work for files in mips subdirectory I had to modify top-level Makefile (that took me some time to figure out).
In long run I'm aiming at decoupling driver code from hardware resource with help of bus_space(9)-like interface which has been partially implemented in bus-space branch.","@rafalcieslak, @dyniec: Please review changes.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,267,2017-04-18T18:19:31Z,2017-04-18T18:54:30Z,2017-04-18T18:54:30Z,MERGED,True,18,1,2,https://github.com/rafalcieslak,Inform the PCI bus about our space assignment,2,[],https://github.com/cahirwpz/mimiker/pull/267,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/267,"It took me several weeks to fully debug my VGA driver on QEMU - which made me quite knowledgeable about vga, pci and memory management implementation in QEMU (phew!). My final conclusion is that the BARs on QEMU PCI are uninitialized, and therefore QEMU fails to create memory mapping when we request to enable memory access to a PCI device.
On OVPsim, BARs are (presumably) configured by bootloader/BIOS. We compute the addresses we're going to use in pci_bus_assign_space, and it happens that OVPsim's choice matches ours. This is not the case for QEMU, where these registers are uninitialized and contain junk values - which I do have confirmed with QEMU's sources and by tracing a lifetime of a PCI device in QEMU with a debugger, in multiple QEMU versions (2.0, 2.5, 2.8.1).
So if these registers are not initialized, we can set them up on our own. I do not know whose responsibility it should be, maybe the bootloader is expected to do that for us - but it does not. Either way it's probably a good idea to set these registers explicitly, so that they always match our space assignment. Without this fix no PCI device memory can be accessed using QEMU.
In some sense this patch is unnecessary, we don't use any PCI devices yet and the (non-generic) VGA driver is the only user of the PCI interface. We also expect a major rewrite to the PCI interface is just around the corner, with bus/device infrastructure coming up soon. However, I want to introduce this fix anyway, because the current implementation of pci_bus_assign_space is fundamentally flawed and does not serve its purpose. It will be also a good reference point, so that a proper implementation of the PCI bus interface will take this problem into account.
The other nice thing about this fix is that it is the last patch required to run the DOOM demo on QEMU out-of-the-box (except the VGA driver). Pretty cool! On QEMU the demo runs at above 1500 FPS, so we'll have to implement a nanosleep soon.","It took me several weeks to fully debug my VGA driver on QEMU - which made me quite knowledgeable about vga, pci and memory management implementation in QEMU (phew!). My final conclusion is that the BARs on QEMU PCI are uninitialized, and therefore QEMU fails to create memory mapping when we request to enable memory access to a PCI device.
On OVPsim, BARs are (presumably) configured by bootloader/BIOS. We compute the addresses we're going to use in pci_bus_assign_space, and it happens that OVPsim's choice matches ours. This is not the case for QEMU, where these registers are uninitialized and contain junk values - which I do have confirmed with QEMU's sources and by tracing a lifetime of a PCI device in QEMU with a debugger, in multiple QEMU versions (2.0, 2.5, 2.8.1).
So if these registers are not initialized, we can set them up on our own. I do not know whose responsibility it should be, maybe the bootloader is expected to do that for us - but it does not. Either way it's probably a good idea to set these registers explicitly, so that they always match our space assignment. Without this fix no PCI device memory can be accessed using QEMU.
In some sense this patch is unnecessary, we don't use any PCI devices yet and the (non-generic) VGA driver is the only user of the PCI interface. We also expect a major rewrite to the PCI interface is just around the corner, with bus/device infrastructure coming up soon. However, I want to introduce this fix anyway, because the current implementation of pci_bus_assign_space is fundamentally flawed and does not serve its purpose. It will be also a good reference point, so that a proper implementation of the PCI bus interface will take this problem into account.
The other nice thing about this fix is that it is the last patch required to run the DOOM demo on QEMU out-of-the-box (except the VGA driver). Pretty cool! On QEMU the demo runs at above 1500 FPS, so we'll have to implement a nanosleep soon.",True,{'HOORAY': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,267,2017-04-18T18:19:31Z,2017-04-18T18:54:30Z,2017-04-18T18:54:30Z,MERGED,True,18,1,2,https://github.com/rafalcieslak,Inform the PCI bus about our space assignment,2,[],https://github.com/cahirwpz/mimiker/pull/267,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/267#issuecomment-294940251,"It took me several weeks to fully debug my VGA driver on QEMU - which made me quite knowledgeable about vga, pci and memory management implementation in QEMU (phew!). My final conclusion is that the BARs on QEMU PCI are uninitialized, and therefore QEMU fails to create memory mapping when we request to enable memory access to a PCI device.
On OVPsim, BARs are (presumably) configured by bootloader/BIOS. We compute the addresses we're going to use in pci_bus_assign_space, and it happens that OVPsim's choice matches ours. This is not the case for QEMU, where these registers are uninitialized and contain junk values - which I do have confirmed with QEMU's sources and by tracing a lifetime of a PCI device in QEMU with a debugger, in multiple QEMU versions (2.0, 2.5, 2.8.1).
So if these registers are not initialized, we can set them up on our own. I do not know whose responsibility it should be, maybe the bootloader is expected to do that for us - but it does not. Either way it's probably a good idea to set these registers explicitly, so that they always match our space assignment. Without this fix no PCI device memory can be accessed using QEMU.
In some sense this patch is unnecessary, we don't use any PCI devices yet and the (non-generic) VGA driver is the only user of the PCI interface. We also expect a major rewrite to the PCI interface is just around the corner, with bus/device infrastructure coming up soon. However, I want to introduce this fix anyway, because the current implementation of pci_bus_assign_space is fundamentally flawed and does not serve its purpose. It will be also a good reference point, so that a proper implementation of the PCI bus interface will take this problem into account.
The other nice thing about this fix is that it is the last patch required to run the DOOM demo on QEMU out-of-the-box (except the VGA driver). Pretty cool! On QEMU the demo runs at above 1500 FPS, so we'll have to implement a nanosleep soon.","FYI it is not only about BARs but interrupts as well. AFAIK BARs and interrupts are assigned by auto-detection process performed by PCI driver code. Normally Linux does not rely on BIOS to setup PCI correctly, seems like *BSD do the same.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,268,2017-04-19T19:16:08Z,2017-05-15T21:26:05Z,2017-05-16T12:53:31Z,MERGED,True,53,10,7,https://github.com/coodie,Getdirentries syscall,51,[],https://github.com/cahirwpz/mimiker/pull/268,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/268,This PR adds implementation of getdirentries system call.,This PR adds implementation of getdirentries system call.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,268,2017-04-19T19:16:08Z,2017-05-15T21:26:05Z,2017-05-16T12:53:31Z,MERGED,True,53,10,7,https://github.com/coodie,Getdirentries syscall,51,[],https://github.com/cahirwpz/mimiker/pull/268,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/268#issuecomment-297153544,This PR adds implementation of getdirentries system call.,"I've managed to reproduce this issue with 100% success rate. The kernel works okay if I build my own .cpio archive, but it crashes with the one built by Travis. Note that Travis (probably) runs an older version of cpio than you do, so there may be some slight differences. For your convenience, here's the (zipped) .cpio archive as built by Travis: travis-initrd.zip. If you use it as the ramdisk for kernel, you should be able to investigate the nature of the crash. I don't know exactly the internals of a cpio archive, so you'll have to take it from here - good luck.",True,{'HEART': ['https://github.com/coodie']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,268,2017-04-19T19:16:08Z,2017-05-15T21:26:05Z,2017-05-16T12:53:31Z,MERGED,True,53,10,7,https://github.com/coodie,Getdirentries syscall,51,[],https://github.com/cahirwpz/mimiker/pull/268,https://github.com/coodie,3,https://github.com/cahirwpz/mimiker/pull/268#issuecomment-301283163,This PR adds implementation of getdirentries system call.,"@rafalcieslak @cahirwpz
I think this branch is ready to be merged (or reviewed at least).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,268,2017-04-19T19:16:08Z,2017-05-15T21:26:05Z,2017-05-16T12:53:31Z,MERGED,True,53,10,7,https://github.com/coodie,Getdirentries syscall,51,[],https://github.com/cahirwpz/mimiker/pull/268,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/268#issuecomment-301609585,This PR adds implementation of getdirentries system call.,The changes I'm not going to review yet were moved to getdirentries_tests branch. We'll continue the work from there.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,269,2017-04-21T10:21:32Z,2017-04-22T07:31:53Z,2017-04-22T07:32:07Z,MERGED,True,116,28,5,https://github.com/cahirwpz,Decouple ns16550 driver code from hw resource access method,4,[],https://github.com/cahirwpz/mimiker/pull/269,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/269,"Main purpose of this PR is to show how bus_space and resource structures help to decouple driver code from actual hardware resource(s) (in this case 16550 UART register set). Same code should be capable of handling tty0 and tty1 by just replacing cbus_uart in in and out functions to resources describing UART devices in FDC37M81x controller attached to ISA bus in PIIX4 chipset.
Next step is to perform similar task (i.e. decoupling) for GT-64120 PCI-bridge chipset by introducing pci_read_config and pci_write_config functions and corresponding function table.","Main purpose of this PR is to show how bus_space and resource structures help to decouple driver code from actual hardware resource(s) (in this case 16550 UART register set). Same code should be capable of handling tty0 and tty1 by just replacing cbus_uart in in and out functions to resources describing UART devices in FDC37M81x controller attached to ISA bus in PIIX4 chipset.
Next step is to perform similar task (i.e. decoupling) for GT-64120 PCI-bridge chipset by introducing pci_read_config and pci_write_config functions and corresponding function table.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,269,2017-04-21T10:21:32Z,2017-04-22T07:31:53Z,2017-04-22T07:32:07Z,MERGED,True,116,28,5,https://github.com/cahirwpz,Decouple ns16550 driver code from hw resource access method,4,[],https://github.com/cahirwpz/mimiker/pull/269,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/269#issuecomment-296268804,"Main purpose of this PR is to show how bus_space and resource structures help to decouple driver code from actual hardware resource(s) (in this case 16550 UART register set). Same code should be capable of handling tty0 and tty1 by just replacing cbus_uart in in and out functions to resources describing UART devices in FDC37M81x controller attached to ISA bus in PIIX4 chipset.
Next step is to perform similar task (i.e. decoupling) for GT-64120 PCI-bridge chipset by introducing pci_read_config and pci_write_config functions and corresponding function table.","This looks interesting. I'm still not clear on the wider picture - like managing dynamically discovered resources, or binding a driver to a particular resource (this driver is hardcoded to use the cbus_uart, I expected it to be linked with the resource somewhere during platform-specific startup process) - but I see you're already preparing a pci branch which should demonstrate most concepts I'm missing. I don't have any comments to this implementation, it seems straight-forward.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,270,2017-04-22T14:14:12Z,2017-04-23T21:29:16Z,2017-04-23T21:29:16Z,MERGED,True,18,19,7,https://github.com/rafalcieslak,Significantly simplified user-mode program compilation,2,[],https://github.com/cahirwpz/mimiker/pull/270,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/270,"This branch:

Configures the user-mode linker script to pull in the standard library and our custom layer (with _start and syscall proxies), named libmimiker.
Prepares a ./user/sysroot directory. It is used as a base for compiling usermode programs, and is additionally included in the ramdisk image, in case these files would one day become useful during kernel runtime 😏
Removes numerous compiler flags that are no longer necessary since we actually use a standard library for usermode programs
Slightly cleans up user Makefiles.

With these changes, compiling usermode programs becomes much simpler! Specifying where the --sysroot is and picking the -T linker script is completely enough.
I am totally not trying to compile GCC for mimiker, noo, not at all, no way.","This branch:

Configures the user-mode linker script to pull in the standard library and our custom layer (with _start and syscall proxies), named libmimiker.
Prepares a ./user/sysroot directory. It is used as a base for compiling usermode programs, and is additionally included in the ramdisk image, in case these files would one day become useful during kernel runtime 😏
Removes numerous compiler flags that are no longer necessary since we actually use a standard library for usermode programs
Slightly cleans up user Makefiles.

With these changes, compiling usermode programs becomes much simpler! Specifying where the --sysroot is and picking the -T linker script is completely enough.
I am totally not trying to compile GCC for mimiker, noo, not at all, no way.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,271,2017-04-23T17:42:12Z,2017-05-18T20:31:06Z,2017-05-19T14:14:24Z,MERGED,True,435,13,18,https://github.com/rafalcieslak,Basic signal support,46,[],https://github.com/cahirwpz/mimiker/pull/271,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/271,"I've implemented basic signal sending, processing and delivery. This branch is pretty heavy, but I don't see a way of introducing this changes in smaller parts.
Quick overview first. What works:

Sending a signal from userspace (raise, kill).
Sending a signal from kernel space (SIGSEGV is sent to the offending thread on memory violation).
Customizing thread reaction on a signal (signal, sigaction, SIG_IGN, SIG_DFL, or a custom handler function).
Recursive signal handlers.

What does not work yet:

Signal masking.
Optionally switching to a different stack space for user signal handlers (I'm pretty sure this is a legacy optimization).
Thread/process distinction (in POSIX sense) does not exist, a signal is always delivered to one particular thread, threads never share the same PID.
Proper newlib integration. Newlib tries to emulate signals in userspace - by mocking signal and raise functions with some silly routines that deliver signals only to the thread that raised them. We'll need to recompile newlib with -DSIGNAL_PROVIDED, to disable this. We'll also need to provide newlib internals with our signal numbers - on a failed assertion newlib calls kill(getpid(), 6) hoping to use SIGABRT, but 6 is SIGKILL in this implementation.
SIGSTOP and SIGCONT.
Proper automatic testing of signals. Preparing an automated test will be very difficult until we have a wait and waitpid. I've prepared some demonstrations in prog.c, but they need to be examined manually.
sigsuspend.

My implementation is a simplified fusion of ideas from the FreeBSD design book, FreeBSD, NetBSD and Linux implementations.
The trampoline problem we've been discussing for many weeks turned out to be easily solvable. Very old Linux versions and pretty old FreeBSD version used a mechanism where the kernel would copy a ""return from sighandler"" procedure onto user process stack. Nowadays the stack is protected from execution, and this approach would not work. We wanted to overcome it by mapping a single page with executable code into process memory map... but that seems complicated, and requires the memory system to support such tricks. What Linux does is much simpler - the ""return from sighandler"" procedure (commonly called trampoline) is provided by the C library, not by the kernel.  The sigaction structure has a field sa_restorer which has to contain the address where a sighandler should return. The C library wraps sigaction and signal functions so that it fills in that field with a pointer to a trampoline function it provides. In our case, we don't need to do any cleanup after a signal handler has finished, so it's okay to use sigreturn syscall proxy address as the value of sa_restorer. I think this is a very simple and elegant solution.
The main reasons why my implementation is so much simpler than other system's is that

we don't support thread groups (processes), process groups and sessions
our threads do not have that many states they can be in when a signal is delivered
we don't support multiple processors yet
we don't need to stay compatible with a ton of legacy programs that exploited the way signals worked in a very old kernel version.

With these assumptions, signals are a pleasure to implement.","I've implemented basic signal sending, processing and delivery. This branch is pretty heavy, but I don't see a way of introducing this changes in smaller parts.
Quick overview first. What works:

Sending a signal from userspace (raise, kill).
Sending a signal from kernel space (SIGSEGV is sent to the offending thread on memory violation).
Customizing thread reaction on a signal (signal, sigaction, SIG_IGN, SIG_DFL, or a custom handler function).
Recursive signal handlers.

What does not work yet:

Signal masking.
Optionally switching to a different stack space for user signal handlers (I'm pretty sure this is a legacy optimization).
Thread/process distinction (in POSIX sense) does not exist, a signal is always delivered to one particular thread, threads never share the same PID.
Proper newlib integration. Newlib tries to emulate signals in userspace - by mocking signal and raise functions with some silly routines that deliver signals only to the thread that raised them. We'll need to recompile newlib with -DSIGNAL_PROVIDED, to disable this. We'll also need to provide newlib internals with our signal numbers - on a failed assertion newlib calls kill(getpid(), 6) hoping to use SIGABRT, but 6 is SIGKILL in this implementation.
SIGSTOP and SIGCONT.
Proper automatic testing of signals. Preparing an automated test will be very difficult until we have a wait and waitpid. I've prepared some demonstrations in prog.c, but they need to be examined manually.
sigsuspend.

My implementation is a simplified fusion of ideas from the FreeBSD design book, FreeBSD, NetBSD and Linux implementations.
The trampoline problem we've been discussing for many weeks turned out to be easily solvable. Very old Linux versions and pretty old FreeBSD version used a mechanism where the kernel would copy a ""return from sighandler"" procedure onto user process stack. Nowadays the stack is protected from execution, and this approach would not work. We wanted to overcome it by mapping a single page with executable code into process memory map... but that seems complicated, and requires the memory system to support such tricks. What Linux does is much simpler - the ""return from sighandler"" procedure (commonly called trampoline) is provided by the C library, not by the kernel.  The sigaction structure has a field sa_restorer which has to contain the address where a sighandler should return. The C library wraps sigaction and signal functions so that it fills in that field with a pointer to a trampoline function it provides. In our case, we don't need to do any cleanup after a signal handler has finished, so it's okay to use sigreturn syscall proxy address as the value of sa_restorer. I think this is a very simple and elegant solution.
The main reasons why my implementation is so much simpler than other system's is that

we don't support thread groups (processes), process groups and sessions
our threads do not have that many states they can be in when a signal is delivered
we don't support multiple processors yet
we don't need to stay compatible with a ton of legacy programs that exploited the way signals worked in a very old kernel version.

With these assumptions, signals are a pleasure to implement.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,271,2017-04-23T17:42:12Z,2017-05-18T20:31:06Z,2017-05-19T14:14:24Z,MERGED,True,435,13,18,https://github.com/rafalcieslak,Basic signal support,46,[],https://github.com/cahirwpz/mimiker/pull/271,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/271#issuecomment-297985594,"I've implemented basic signal sending, processing and delivery. This branch is pretty heavy, but I don't see a way of introducing this changes in smaller parts.
Quick overview first. What works:

Sending a signal from userspace (raise, kill).
Sending a signal from kernel space (SIGSEGV is sent to the offending thread on memory violation).
Customizing thread reaction on a signal (signal, sigaction, SIG_IGN, SIG_DFL, or a custom handler function).
Recursive signal handlers.

What does not work yet:

Signal masking.
Optionally switching to a different stack space for user signal handlers (I'm pretty sure this is a legacy optimization).
Thread/process distinction (in POSIX sense) does not exist, a signal is always delivered to one particular thread, threads never share the same PID.
Proper newlib integration. Newlib tries to emulate signals in userspace - by mocking signal and raise functions with some silly routines that deliver signals only to the thread that raised them. We'll need to recompile newlib with -DSIGNAL_PROVIDED, to disable this. We'll also need to provide newlib internals with our signal numbers - on a failed assertion newlib calls kill(getpid(), 6) hoping to use SIGABRT, but 6 is SIGKILL in this implementation.
SIGSTOP and SIGCONT.
Proper automatic testing of signals. Preparing an automated test will be very difficult until we have a wait and waitpid. I've prepared some demonstrations in prog.c, but they need to be examined manually.
sigsuspend.

My implementation is a simplified fusion of ideas from the FreeBSD design book, FreeBSD, NetBSD and Linux implementations.
The trampoline problem we've been discussing for many weeks turned out to be easily solvable. Very old Linux versions and pretty old FreeBSD version used a mechanism where the kernel would copy a ""return from sighandler"" procedure onto user process stack. Nowadays the stack is protected from execution, and this approach would not work. We wanted to overcome it by mapping a single page with executable code into process memory map... but that seems complicated, and requires the memory system to support such tricks. What Linux does is much simpler - the ""return from sighandler"" procedure (commonly called trampoline) is provided by the C library, not by the kernel.  The sigaction structure has a field sa_restorer which has to contain the address where a sighandler should return. The C library wraps sigaction and signal functions so that it fills in that field with a pointer to a trampoline function it provides. In our case, we don't need to do any cleanup after a signal handler has finished, so it's okay to use sigreturn syscall proxy address as the value of sa_restorer. I think this is a very simple and elegant solution.
The main reasons why my implementation is so much simpler than other system's is that

we don't support thread groups (processes), process groups and sessions
our threads do not have that many states they can be in when a signal is delivered
we don't support multiple processors yet
we don't need to stay compatible with a ton of legacy programs that exploited the way signals worked in a very old kernel version.

With these assumptions, signals are a pleasure to implement.",This PR is currently blocked by #278 and #276.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,271,2017-04-23T17:42:12Z,2017-05-18T20:31:06Z,2017-05-19T14:14:24Z,MERGED,True,435,13,18,https://github.com/rafalcieslak,Basic signal support,46,[],https://github.com/cahirwpz/mimiker/pull/271,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/271#issuecomment-299707101,"I've implemented basic signal sending, processing and delivery. This branch is pretty heavy, but I don't see a way of introducing this changes in smaller parts.
Quick overview first. What works:

Sending a signal from userspace (raise, kill).
Sending a signal from kernel space (SIGSEGV is sent to the offending thread on memory violation).
Customizing thread reaction on a signal (signal, sigaction, SIG_IGN, SIG_DFL, or a custom handler function).
Recursive signal handlers.

What does not work yet:

Signal masking.
Optionally switching to a different stack space for user signal handlers (I'm pretty sure this is a legacy optimization).
Thread/process distinction (in POSIX sense) does not exist, a signal is always delivered to one particular thread, threads never share the same PID.
Proper newlib integration. Newlib tries to emulate signals in userspace - by mocking signal and raise functions with some silly routines that deliver signals only to the thread that raised them. We'll need to recompile newlib with -DSIGNAL_PROVIDED, to disable this. We'll also need to provide newlib internals with our signal numbers - on a failed assertion newlib calls kill(getpid(), 6) hoping to use SIGABRT, but 6 is SIGKILL in this implementation.
SIGSTOP and SIGCONT.
Proper automatic testing of signals. Preparing an automated test will be very difficult until we have a wait and waitpid. I've prepared some demonstrations in prog.c, but they need to be examined manually.
sigsuspend.

My implementation is a simplified fusion of ideas from the FreeBSD design book, FreeBSD, NetBSD and Linux implementations.
The trampoline problem we've been discussing for many weeks turned out to be easily solvable. Very old Linux versions and pretty old FreeBSD version used a mechanism where the kernel would copy a ""return from sighandler"" procedure onto user process stack. Nowadays the stack is protected from execution, and this approach would not work. We wanted to overcome it by mapping a single page with executable code into process memory map... but that seems complicated, and requires the memory system to support such tricks. What Linux does is much simpler - the ""return from sighandler"" procedure (commonly called trampoline) is provided by the C library, not by the kernel.  The sigaction structure has a field sa_restorer which has to contain the address where a sighandler should return. The C library wraps sigaction and signal functions so that it fills in that field with a pointer to a trampoline function it provides. In our case, we don't need to do any cleanup after a signal handler has finished, so it's okay to use sigreturn syscall proxy address as the value of sa_restorer. I think this is a very simple and elegant solution.
The main reasons why my implementation is so much simpler than other system's is that

we don't support thread groups (processes), process groups and sessions
our threads do not have that many states they can be in when a signal is delivered
we don't support multiple processors yet
we don't need to stay compatible with a ton of legacy programs that exploited the way signals worked in a very old kernel version.

With these assumptions, signals are a pleasure to implement.","From now on this branch compiles newlib with -DSIGNAL_PROVIDED, and therefore it requries a one-time make distclean to force newlib to recompile.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,271,2017-04-23T17:42:12Z,2017-05-18T20:31:06Z,2017-05-19T14:14:24Z,MERGED,True,435,13,18,https://github.com/rafalcieslak,Basic signal support,46,[],https://github.com/cahirwpz/mimiker/pull/271,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/271#issuecomment-302532448,"I've implemented basic signal sending, processing and delivery. This branch is pretty heavy, but I don't see a way of introducing this changes in smaller parts.
Quick overview first. What works:

Sending a signal from userspace (raise, kill).
Sending a signal from kernel space (SIGSEGV is sent to the offending thread on memory violation).
Customizing thread reaction on a signal (signal, sigaction, SIG_IGN, SIG_DFL, or a custom handler function).
Recursive signal handlers.

What does not work yet:

Signal masking.
Optionally switching to a different stack space for user signal handlers (I'm pretty sure this is a legacy optimization).
Thread/process distinction (in POSIX sense) does not exist, a signal is always delivered to one particular thread, threads never share the same PID.
Proper newlib integration. Newlib tries to emulate signals in userspace - by mocking signal and raise functions with some silly routines that deliver signals only to the thread that raised them. We'll need to recompile newlib with -DSIGNAL_PROVIDED, to disable this. We'll also need to provide newlib internals with our signal numbers - on a failed assertion newlib calls kill(getpid(), 6) hoping to use SIGABRT, but 6 is SIGKILL in this implementation.
SIGSTOP and SIGCONT.
Proper automatic testing of signals. Preparing an automated test will be very difficult until we have a wait and waitpid. I've prepared some demonstrations in prog.c, but they need to be examined manually.
sigsuspend.

My implementation is a simplified fusion of ideas from the FreeBSD design book, FreeBSD, NetBSD and Linux implementations.
The trampoline problem we've been discussing for many weeks turned out to be easily solvable. Very old Linux versions and pretty old FreeBSD version used a mechanism where the kernel would copy a ""return from sighandler"" procedure onto user process stack. Nowadays the stack is protected from execution, and this approach would not work. We wanted to overcome it by mapping a single page with executable code into process memory map... but that seems complicated, and requires the memory system to support such tricks. What Linux does is much simpler - the ""return from sighandler"" procedure (commonly called trampoline) is provided by the C library, not by the kernel.  The sigaction structure has a field sa_restorer which has to contain the address where a sighandler should return. The C library wraps sigaction and signal functions so that it fills in that field with a pointer to a trampoline function it provides. In our case, we don't need to do any cleanup after a signal handler has finished, so it's okay to use sigreturn syscall proxy address as the value of sa_restorer. I think this is a very simple and elegant solution.
The main reasons why my implementation is so much simpler than other system's is that

we don't support thread groups (processes), process groups and sessions
our threads do not have that many states they can be in when a signal is delivered
we don't support multiple processors yet
we don't need to stay compatible with a ton of legacy programs that exploited the way signals worked in a very old kernel version.

With these assumptions, signals are a pleasure to implement.",Though I still have some doubts w.r.t. to locking and separtion of concerns in sig_check I'm going to accept this change and merge.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,273,2017-04-24T09:50:09Z,2017-04-24T20:04:50Z,2017-04-25T05:42:55Z,MERGED,True,83,29,4,https://github.com/MoloToha,Implemented resizable file descriptor table,5,[],https://github.com/cahirwpz/mimiker/pull/273,https://github.com/MoloToha,1,https://github.com/cahirwpz/mimiker/pull/273,"Improved current implementation of file descriptor table so that it can grow (but isn't able to shrink yet), as requested in #247","Improved current implementation of file descriptor table so that it can grow (but isn't able to shrink yet), as requested in #247",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,274,2017-04-25T12:57:37Z,2017-05-01T18:44:48Z,2017-05-02T10:25:17Z,CLOSED,False,40,81,6,https://github.com/coodie,Add prepare_uio,3,[],https://github.com/cahirwpz/mimiker/pull/274,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/274,"This PR adds prepare_uio functions, which prepare single-vectored uio operation structures.","This PR adds prepare_uio functions, which prepare single-vectored uio operation structures.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,274,2017-04-25T12:57:37Z,2017-05-01T18:44:48Z,2017-05-02T10:25:17Z,CLOSED,False,40,81,6,https://github.com/coodie,Add prepare_uio,3,[],https://github.com/cahirwpz/mimiker/pull/274,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/274#issuecomment-297874748,"This PR adds prepare_uio functions, which prepare single-vectored uio operation structures.","I am unsure about naming these functions like prepare_user_uio. This name suggest this is the initialization function that must be called for any user uio, which is obviously not true. Maybe prepare_basic_user_uio or prepare_simple_user_uio would make it clear that this is barely a convenience function for some specific, simple kinds of data transfer?
Also note that you still need to declare iovec_t iov and pass it to prepare_*_uio. I suppose if both prepare_*_uio functions were macros, you could simplify things even further, something like (untested!):
#define prepare_user_uio(uio, op, buffer, buflen) \
iovec_t iov_##__LINE__; \
prepare_uio(uio, &iov_##__LINE__, get_user_vm_map(), buffer, buflen);",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,274,2017-04-25T12:57:37Z,2017-05-01T18:44:48Z,2017-05-02T10:25:17Z,CLOSED,False,40,81,6,https://github.com/coodie,Add prepare_uio,3,[],https://github.com/cahirwpz/mimiker/pull/274,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/274#issuecomment-297975983,"This PR adds prepare_uio functions, which prepare single-vectored uio operation structures.","Sigh, I gotta say I liked @coodie's version slightly more (although it still needed improvements). Plan9 extensions for unnamed fields introduce needless ambiguity, which makes exact structure layout less obvious. And once we decide to enable these extensions, we have no good excuse for not using them widely, namely for all other union fields we use. You've wrapped all uios in additional scopes, which serve no purpose besides limiting the range of a variable - which is not even explicitly declared in that new scope! I recommend either reusing uio variables, or giving them different names when multiple uios are used by the same function (that's what the name argument is for, right?).
Also, in future, when rewriting someone else's proposal from scratch, please use a separate branch/PR (maybe using the original branch as merge target instead of master). You've made it difficult to compare @coodie's variant with yours, and @coodie is now unable to fix/improve his solution. I also feel that overwriting 100% of other developer's proposed changes without discussing them (or your alternative ideas) first is kinda disrespectful.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,274,2017-04-25T12:57:37Z,2017-05-01T18:44:48Z,2017-05-02T10:25:17Z,CLOSED,False,40,81,6,https://github.com/coodie,Add prepare_uio,3,[],https://github.com/cahirwpz/mimiker/pull/274,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/274#issuecomment-297983861,"This PR adds prepare_uio functions, which prepare single-vectored uio operation structures.",@rafalcieslak You're right. I'll revert changes and place them in another PR.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,274,2017-04-25T12:57:37Z,2017-05-01T18:44:48Z,2017-05-02T10:25:17Z,CLOSED,False,40,81,6,https://github.com/coodie,Add prepare_uio,3,[],https://github.com/cahirwpz/mimiker/pull/274,https://github.com/coodie,5,https://github.com/cahirwpz/mimiker/pull/274#issuecomment-297994593,"This PR adds prepare_uio functions, which prepare single-vectored uio operation structures.","I don't want to spend too much time discussing this change, because it's mostly done for our convenience and I'm afraid this might turn into a little bit of bikeshedding.
I have considered idea of using macro to put iovec on stack, but I couldn't come with elegant way of doing that, because in vfs tests uio is reused so I couldn't base it on uio name (there would be name conflict), I forgot about LINE, while this obviously fixes this problem. I can't really see reason why not to use this, so I'll implement this.
When it comes to names, naming them prepare was very initial idea, and we haven't used that before and I'm ok with this. I don't really like spending too much time thinking about how to name a variable, so I'm going to take @rafalcieslak propositions and rename then accordingly (although in my opinion they are too lengthy).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,274,2017-04-25T12:57:37Z,2017-05-01T18:44:48Z,2017-05-02T10:25:17Z,CLOSED,False,40,81,6,https://github.com/coodie,Add prepare_uio,3,[],https://github.com/cahirwpz/mimiker/pull/274,https://github.com/cahirwpz,6,https://github.com/cahirwpz/mimiker/pull/274#issuecomment-298003914,"This PR adds prepare_uio functions, which prepare single-vectored uio operation structures.","@coodie I'm sorry for overwriting your changes. I guess I've got overexcited (and I'm still are) about discovery of simple subtyping for structures in GCC. Please note, you should modify sys/exec.c as well.
If you find #279 acceptable as an alternative you can merge it into your branch. If you decide to do so,  you'll get credit for the task as well.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,274,2017-04-25T12:57:37Z,2017-05-01T18:44:48Z,2017-05-02T10:25:17Z,CLOSED,False,40,81,6,https://github.com/coodie,Add prepare_uio,3,[],https://github.com/cahirwpz/mimiker/pull/274,https://github.com/cahirwpz,7,https://github.com/cahirwpz/mimiker/pull/274#issuecomment-298399472,"This PR adds prepare_uio functions, which prepare single-vectored uio operation structures.",Implemented by #282,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,275,2017-04-25T20:51:02Z,2017-04-30T07:22:33Z,2017-04-30T07:22:33Z,MERGED,True,470,8,17,https://github.com/rafalcieslak,VGA driver,15,[],https://github.com/cahirwpz/mimiker/pull/275,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/275,"Works with both OVPsim and QEMU. When launching the kernel, use -g flag to enable VGA output. I had to move round some PCI macros to make them accessible by the VGA driver - due to the temporary lack of a PCI bus interface.
The vga tests renders and displays a beautiful, photo-realistic rainbow 🌈 in FullHD. Should look almost like this one, except our rainbow is animated!","Works with both OVPsim and QEMU. When launching the kernel, use -g flag to enable VGA output. I had to move round some PCI macros to make them accessible by the VGA driver - due to the temporary lack of a PCI bus interface.
The vga tests renders and displays a beautiful, photo-realistic rainbow 🌈 in FullHD. Should look almost like this one, except our rainbow is animated!",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,275,2017-04-25T20:51:02Z,2017-04-30T07:22:33Z,2017-04-30T07:22:33Z,MERGED,True,470,8,17,https://github.com/rafalcieslak,VGA driver,15,[],https://github.com/cahirwpz/mimiker/pull/275,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/275#issuecomment-297988503,"Works with both OVPsim and QEMU. When launching the kernel, use -g flag to enable VGA output. I had to move round some PCI macros to make them accessible by the VGA driver - due to the temporary lack of a PCI bus interface.
The vga tests renders and displays a beautiful, photo-realistic rainbow 🌈 in FullHD. Should look almost like this one, except our rainbow is animated!","Given you understood well my recent changes in driver infrastructure, would you be able to rewrite the driver to make use of new pci_bus_driver, BARs represented as set of resource_t and corresponding bus_space?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,275,2017-04-25T20:51:02Z,2017-04-30T07:22:33Z,2017-04-30T07:22:33Z,MERGED,True,470,8,17,https://github.com/rafalcieslak,VGA driver,15,[],https://github.com/cahirwpz/mimiker/pull/275,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/275#issuecomment-298042197,"Works with both OVPsim and QEMU. When launching the kernel, use -g flag to enable VGA output. I had to move round some PCI macros to make them accessible by the VGA driver - due to the temporary lack of a PCI bus interface.
The vga tests renders and displays a beautiful, photo-realistic rainbow 🌈 in FullHD. Should look almost like this one, except our rainbow is animated!",I'll see what I can do.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,275,2017-04-25T20:51:02Z,2017-04-30T07:22:33Z,2017-04-30T07:22:33Z,MERGED,True,470,8,17,https://github.com/rafalcieslak,VGA driver,15,[],https://github.com/cahirwpz/mimiker/pull/275,https://github.com/rafalcieslak,4,https://github.com/cahirwpz/mimiker/pull/275#issuecomment-298069183,"Works with both OVPsim and QEMU. When launching the kernel, use -g flag to enable VGA output. I had to move round some PCI macros to make them accessible by the VGA driver - due to the temporary lack of a PCI bus interface.
The vga tests renders and displays a beautiful, photo-realistic rainbow 🌈 in FullHD. Should look almost like this one, except our rainbow is animated!","I am completely stuck. There are two issues that I can't find a way around:


VGA uses several I/O registers which I've been accessing using the physical address 0x18000000 + regaddr. That memory region is the PCI ioports base, but apparently the VGA device does not have any I/O bars? EDIT: I've probably mixed up PCI and ISA access to the same VGA device. Using memory-mapped I/O instead should solve this problem.


I don't know how to write data to a resource. I can't directly write using .r_start + x address, as it only represents bus-specific offset. Should I use bus_space_write for all accesses? That would be a very slow way of copying an entire framebuffer byte-by-byte into device memory...


I'd appreciate some help here.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,275,2017-04-25T20:51:02Z,2017-04-30T07:22:33Z,2017-04-30T07:22:33Z,MERGED,True,470,8,17,https://github.com/rafalcieslak,VGA driver,15,[],https://github.com/cahirwpz/mimiker/pull/275,https://github.com/rafalcieslak,5,https://github.com/cahirwpz/mimiker/pull/275#issuecomment-298077328,"Works with both OVPsim and QEMU. When launching the kernel, use -g flag to enable VGA output. I had to move round some PCI macros to make them accessible by the VGA driver - due to the temporary lack of a PCI bus interface.
The vga tests renders and displays a beautiful, photo-realistic rainbow 🌈 in FullHD. Should look almost like this one, except our rainbow is animated!","Oh. Let me clarify my issue. I cannot access any memory behind a PCI BAR, because neither the resource address is meaningful (it's a physical address, I'd need to map it to KSEG2 in order to write to it...), and BAR's r_bus_space is unset. How do I use BAR resources, then?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,275,2017-04-25T20:51:02Z,2017-04-30T07:22:33Z,2017-04-30T07:22:33Z,MERGED,True,470,8,17,https://github.com/rafalcieslak,VGA driver,15,[],https://github.com/cahirwpz/mimiker/pull/275,https://github.com/cahirwpz,6,https://github.com/cahirwpz/mimiker/pull/275#issuecomment-298086861,"Works with both OVPsim and QEMU. When launching the kernel, use -g flag to enable VGA output. I had to move round some PCI macros to make them accessible by the VGA driver - due to the temporary lack of a PCI bus interface.
The vga tests renders and displays a beautiful, photo-realistic rainbow 🌈 in FullHD. Should look almost like this one, except our rainbow is animated!",Please have a look at pci-bus-fixes branch. Does it solve problems that you encountered?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,275,2017-04-25T20:51:02Z,2017-04-30T07:22:33Z,2017-04-30T07:22:33Z,MERGED,True,470,8,17,https://github.com/rafalcieslak,VGA driver,15,[],https://github.com/cahirwpz/mimiker/pull/275,https://github.com/rafalcieslak,7,https://github.com/cahirwpz/mimiker/pull/275#issuecomment-298094296,"Works with both OVPsim and QEMU. When launching the kernel, use -g flag to enable VGA output. I had to move round some PCI macros to make them accessible by the VGA driver - due to the temporary lack of a PCI bus interface.
The vga tests renders and displays a beautiful, photo-realistic rainbow 🌈 in FullHD. Should look almost like this one, except our rainbow is animated!",I suppose so! I'll import it here so that I can continue work ASAP.,True,{'THUMBS_UP': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,275,2017-04-25T20:51:02Z,2017-04-30T07:22:33Z,2017-04-30T07:22:33Z,MERGED,True,470,8,17,https://github.com/rafalcieslak,VGA driver,15,[],https://github.com/cahirwpz/mimiker/pull/275,https://github.com/rafalcieslak,8,https://github.com/cahirwpz/mimiker/pull/275#issuecomment-298113853,"Works with both OVPsim and QEMU. When launching the kernel, use -g flag to enable VGA output. I had to move round some PCI macros to make them accessible by the VGA driver - due to the temporary lack of a PCI bus interface.
The vga tests renders and displays a beautiful, photo-realistic rainbow 🌈 in FullHD. Should look almost like this one, except our rainbow is animated!","I have some bad news. OVPsim's CirrusLogic GD5446 has incomplete PCI support. In particular, it lacks MMIO - in fact, entire BAR1 is inaccessible (proof: ImperasLib/source/cirrus.ovpworld.org/peripheral/GD5446/1.0/vga.c, function mapGPIO, which is only referenced in pciIint in the same file. It explicitly declares that the entire memory region is not supported). Without this feature, it is impossible to setup VGA registers via PCI. The VGA device works correctly via ISA bus, and all registers are configurable there, which is why this device is usable at all.
Because of this, using the VGA device via PCI bus only on OVPsim is not possible. I could make my driver use ISA bus for configuring VGA registers and PCI bus for data transfer, but it would defeat the purpose of this branch.
On the other hand, QEMU has not such problem - MMIO via BAR1 works correctly (although I can't confirm whether it behaves exactly as the original GD5446), and I can use it to set up VGA registers.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,275,2017-04-25T20:51:02Z,2017-04-30T07:22:33Z,2017-04-30T07:22:33Z,MERGED,True,470,8,17,https://github.com/rafalcieslak,VGA driver,15,[],https://github.com/cahirwpz/mimiker/pull/275,https://github.com/cahirwpz,9,https://github.com/cahirwpz/mimiker/pull/275#issuecomment-298153680,"Works with both OVPsim and QEMU. When launching the kernel, use -g flag to enable VGA output. I had to move round some PCI macros to make them accessible by the VGA driver - due to the temporary lack of a PCI bus interface.
The vga tests renders and displays a beautiful, photo-realistic rainbow 🌈 in FullHD. Should look almost like this one, except our rainbow is animated!",Please ignore the problem for now and focus on getting the driver work under OVPSim.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,275,2017-04-25T20:51:02Z,2017-04-30T07:22:33Z,2017-04-30T07:22:33Z,MERGED,True,470,8,17,https://github.com/rafalcieslak,VGA driver,15,[],https://github.com/cahirwpz/mimiker/pull/275,https://github.com/rafalcieslak,10,https://github.com/cahirwpz/mimiker/pull/275#issuecomment-298169527,"Works with both OVPsim and QEMU. When launching the kernel, use -g flag to enable VGA output. I had to move round some PCI macros to make them accessible by the VGA driver - due to the temporary lack of a PCI bus interface.
The vga tests renders and displays a beautiful, photo-realistic rainbow 🌈 in FullHD. Should look almost like this one, except our rainbow is animated!","Huh? The e-mail I received, as a notification of your comment, was:

Please ignore the problem for now and focus on getting the driver work under QEMU.

Now I see you've made a mistake, and actually meant OVPsim, and not QEMU. This is very unfortunate, as I've spent this day rewriting the driver from scratch with only QEMU in mind, which simplified things a lot, because QEMU's stdvga is much simpler to configure (see for yourself, thanks to Bochs VBE extensions, the driver code is now actually readable and intuitive!).
So I've prepared a very elegant QEMU stdvga driver, which uses the PCI and bus interfaces. As a natural consequence of hooking the driver to /dev/vga, I also had to prepare a generic vga framebuffer interface. But it turns out this is exactly the opposite of what you've wanted.
I'd like you to review this code anyway. It is still some demonstration of how I use the bus interface. My suggestion is to support GD4556 with a separate driver - due to major differences how it is configured, although the driver would hook up to the same vga interface I've created, so high-level access would be entirely transparent. Writing a cirrus driver requires support for ISA bus first, though.
EDIT: As a side note, enabling resolutions above 320x240 is very tricky with a Cirrus, and super-simple with stdvga.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,275,2017-04-25T20:51:02Z,2017-04-30T07:22:33Z,2017-04-30T07:22:33Z,MERGED,True,470,8,17,https://github.com/rafalcieslak,VGA driver,15,[],https://github.com/cahirwpz/mimiker/pull/275,https://github.com/rafalcieslak,11,https://github.com/cahirwpz/mimiker/pull/275#issuecomment-298185805,"Works with both OVPsim and QEMU. When launching the kernel, use -g flag to enable VGA output. I had to move round some PCI macros to make them accessible by the VGA driver - due to the temporary lack of a PCI bus interface.
The vga tests renders and displays a beautiful, photo-realistic rainbow 🌈 in FullHD. Should look almost like this one, except our rainbow is animated!","Since display tests can't be automated anyway, I decided to remove the tests/vga.c rainbow test, and implemented a user-space test program instead - it computes and displays a visualization of the Mandelbrot set.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,276,2017-04-25T21:29:28Z,2017-05-07T12:56:23Z,2017-05-07T12:56:23Z,MERGED,True,229,228,31,https://github.com/rafalcieslak,Compiling newlib,23,[],https://github.com/cahirwpz/mimiker/pull/276,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/276,"This branch introduces changes necessary for building newlib with the kernel.
NOTE: This branch is useless with a toolchain that has newlib built-in!
Quick overview:

cache is a store for newlib-2.5.0.tar.gz and unpacked sources.
user/sysroot-newlib is dynamically generated and is the directory where newlib gets installed after it is compiled.
user/sysroot-base is versioned and contains our custom headers and other files.
libmimiker was moved to a dedicated directory user/libmimiker.
user/sysroot is dynamically created, and contains the full sysroot - composed of files from sysroot-newlib, sysroot-base and libmimiker. It may be used as --sysroot for compiling third-party programs. It is also copied to / of the ramdisk.

I also did some minor changes to unrelated Makefile rules, to improve parallelized build times, and to remove some depracated conditions. initrd malloc pool size had to be increased as the cpio archive grows larger.
We'll have to prepare a new toolchain build without newlib for this branch to make sense, I'll look into that soon. (By the way, I've recently learned that ALL gcc toolchain builds are fully relocatable by design, moving the toolchain to a different directory will always work, and if you can build gcc so that it can't be moved, then gcc developers would be VERY interested in details.). I'd also suggest to change our vendor flavor name from unknown to mimiker, so that our new toolchain name would be mips-mimiker-elf. This has two advantages:

Newlib, as well as many 3rd party programs, contain conditional code that depends on the vendor name - using a custom one like mimiker may simplify porting.
It'll give us a way to easily (temporarily) distinguish between toolchain version (kind of like we did during the switch from mips-mti-elf to mipsel-unknown-elf) and inform the developer if they are using incorrect one.

I recommend starting reading the diff from user/Makefile.
This branch addresses #272.","This branch introduces changes necessary for building newlib with the kernel.
NOTE: This branch is useless with a toolchain that has newlib built-in!
Quick overview:

cache is a store for newlib-2.5.0.tar.gz and unpacked sources.
user/sysroot-newlib is dynamically generated and is the directory where newlib gets installed after it is compiled.
user/sysroot-base is versioned and contains our custom headers and other files.
libmimiker was moved to a dedicated directory user/libmimiker.
user/sysroot is dynamically created, and contains the full sysroot - composed of files from sysroot-newlib, sysroot-base and libmimiker. It may be used as --sysroot for compiling third-party programs. It is also copied to / of the ramdisk.

I also did some minor changes to unrelated Makefile rules, to improve parallelized build times, and to remove some depracated conditions. initrd malloc pool size had to be increased as the cpio archive grows larger.
We'll have to prepare a new toolchain build without newlib for this branch to make sense, I'll look into that soon. (By the way, I've recently learned that ALL gcc toolchain builds are fully relocatable by design, moving the toolchain to a different directory will always work, and if you can build gcc so that it can't be moved, then gcc developers would be VERY interested in details.). I'd also suggest to change our vendor flavor name from unknown to mimiker, so that our new toolchain name would be mips-mimiker-elf. This has two advantages:

Newlib, as well as many 3rd party programs, contain conditional code that depends on the vendor name - using a custom one like mimiker may simplify porting.
It'll give us a way to easily (temporarily) distinguish between toolchain version (kind of like we did during the switch from mips-mti-elf to mipsel-unknown-elf) and inform the developer if they are using incorrect one.

I recommend starting reading the diff from user/Makefile.
This branch addresses #272.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,276,2017-04-25T21:29:28Z,2017-05-07T12:56:23Z,2017-05-07T12:56:23Z,MERGED,True,229,228,31,https://github.com/rafalcieslak,Compiling newlib,23,[],https://github.com/cahirwpz/mimiker/pull/276,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/276#issuecomment-297475481,"This branch introduces changes necessary for building newlib with the kernel.
NOTE: This branch is useless with a toolchain that has newlib built-in!
Quick overview:

cache is a store for newlib-2.5.0.tar.gz and unpacked sources.
user/sysroot-newlib is dynamically generated and is the directory where newlib gets installed after it is compiled.
user/sysroot-base is versioned and contains our custom headers and other files.
libmimiker was moved to a dedicated directory user/libmimiker.
user/sysroot is dynamically created, and contains the full sysroot - composed of files from sysroot-newlib, sysroot-base and libmimiker. It may be used as --sysroot for compiling third-party programs. It is also copied to / of the ramdisk.

I also did some minor changes to unrelated Makefile rules, to improve parallelized build times, and to remove some depracated conditions. initrd malloc pool size had to be increased as the cpio archive grows larger.
We'll have to prepare a new toolchain build without newlib for this branch to make sense, I'll look into that soon. (By the way, I've recently learned that ALL gcc toolchain builds are fully relocatable by design, moving the toolchain to a different directory will always work, and if you can build gcc so that it can't be moved, then gcc developers would be VERY interested in details.). I'd also suggest to change our vendor flavor name from unknown to mimiker, so that our new toolchain name would be mips-mimiker-elf. This has two advantages:

Newlib, as well as many 3rd party programs, contain conditional code that depends on the vendor name - using a custom one like mimiker may simplify porting.
It'll give us a way to easily (temporarily) distinguish between toolchain version (kind of like we did during the switch from mips-mti-elf to mipsel-unknown-elf) and inform the developer if they are using incorrect one.

I recommend starting reading the diff from user/Makefile.
This branch addresses #272.","I've prepared a newlibless toolchain, and configured Travis to use it. This inflated the diff a little bit, but overall changes are still relatively small.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,276,2017-04-25T21:29:28Z,2017-05-07T12:56:23Z,2017-05-07T12:56:23Z,MERGED,True,229,228,31,https://github.com/rafalcieslak,Compiling newlib,23,[],https://github.com/cahirwpz/mimiker/pull/276,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/276#issuecomment-298566905,"This branch introduces changes necessary for building newlib with the kernel.
NOTE: This branch is useless with a toolchain that has newlib built-in!
Quick overview:

cache is a store for newlib-2.5.0.tar.gz and unpacked sources.
user/sysroot-newlib is dynamically generated and is the directory where newlib gets installed after it is compiled.
user/sysroot-base is versioned and contains our custom headers and other files.
libmimiker was moved to a dedicated directory user/libmimiker.
user/sysroot is dynamically created, and contains the full sysroot - composed of files from sysroot-newlib, sysroot-base and libmimiker. It may be used as --sysroot for compiling third-party programs. It is also copied to / of the ramdisk.

I also did some minor changes to unrelated Makefile rules, to improve parallelized build times, and to remove some depracated conditions. initrd malloc pool size had to be increased as the cpio archive grows larger.
We'll have to prepare a new toolchain build without newlib for this branch to make sense, I'll look into that soon. (By the way, I've recently learned that ALL gcc toolchain builds are fully relocatable by design, moving the toolchain to a different directory will always work, and if you can build gcc so that it can't be moved, then gcc developers would be VERY interested in details.). I'd also suggest to change our vendor flavor name from unknown to mimiker, so that our new toolchain name would be mips-mimiker-elf. This has two advantages:

Newlib, as well as many 3rd party programs, contain conditional code that depends on the vendor name - using a custom one like mimiker may simplify porting.
It'll give us a way to easily (temporarily) distinguish between toolchain version (kind of like we did during the switch from mips-mti-elf to mipsel-unknown-elf) and inform the developer if they are using incorrect one.

I recommend starting reading the diff from user/Makefile.
This branch addresses #272.","I'm having some thoughts that may render the process more explicit and easier to maintain:

I'd like user programs to facilitate make install DESTDIR=${sysroot} method of installation. This way program's build and installation processes are expressed in a single Makefile.
Given the above is implemented, process of creating a ramdisk is simplified. Just take contents of sysroot and put it into initrd file. Ramdisk structure becomes explicit (find $sysroot -ls) and no initrd.rules is needed anymore.
I'd be nice to keep 3rd party programs and libraries in single directory as submodules. If we ever decide to fork newlib, just changing repository URL will do the trick.

These're my first thoughts after trying out this PR. When ideas above are sorted out, I'll have a closer look at details.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,276,2017-04-25T21:29:28Z,2017-05-07T12:56:23Z,2017-05-07T12:56:23Z,MERGED,True,229,228,31,https://github.com/rafalcieslak,Compiling newlib,23,[],https://github.com/cahirwpz/mimiker/pull/276,https://github.com/rafalcieslak,4,https://github.com/cahirwpz/mimiker/pull/276#issuecomment-298693207,"This branch introduces changes necessary for building newlib with the kernel.
NOTE: This branch is useless with a toolchain that has newlib built-in!
Quick overview:

cache is a store for newlib-2.5.0.tar.gz and unpacked sources.
user/sysroot-newlib is dynamically generated and is the directory where newlib gets installed after it is compiled.
user/sysroot-base is versioned and contains our custom headers and other files.
libmimiker was moved to a dedicated directory user/libmimiker.
user/sysroot is dynamically created, and contains the full sysroot - composed of files from sysroot-newlib, sysroot-base and libmimiker. It may be used as --sysroot for compiling third-party programs. It is also copied to / of the ramdisk.

I also did some minor changes to unrelated Makefile rules, to improve parallelized build times, and to remove some depracated conditions. initrd malloc pool size had to be increased as the cpio archive grows larger.
We'll have to prepare a new toolchain build without newlib for this branch to make sense, I'll look into that soon. (By the way, I've recently learned that ALL gcc toolchain builds are fully relocatable by design, moving the toolchain to a different directory will always work, and if you can build gcc so that it can't be moved, then gcc developers would be VERY interested in details.). I'd also suggest to change our vendor flavor name from unknown to mimiker, so that our new toolchain name would be mips-mimiker-elf. This has two advantages:

Newlib, as well as many 3rd party programs, contain conditional code that depends on the vendor name - using a custom one like mimiker may simplify porting.
It'll give us a way to easily (temporarily) distinguish between toolchain version (kind of like we did during the switch from mips-mti-elf to mipsel-unknown-elf) and inform the developer if they are using incorrect one.

I recommend starting reading the diff from user/Makefile.
This branch addresses #272.","I'm glad that you see the natural consequence of managing sysroot this way! I wanted to introduce this mechanism in a subsequent change to keep this one simpler, but since you're fine with it I can do it right here.


This is exactly the point that makes the idea of preparing a sysroot so elegant. Again, I originally wanted to investigate the removal of initrd.rules in a next step to keep this one simple. The only tricky part that will require to be configured with care is that (as for now) some tests come with their own collection of files, so these will also need to be installed in sysroot, but that's certainly not a big deal.


The issue with submodules is that they force us to use git. If we decide to switch to another std library that happens to use e.g. Subversion, then we would need to create and host a git mirror of the entire repository. Also ATM the size of entire newlib-cygwin repo is about 150MB, which is kind of heavy - and we can't do a shallow fetch for the submodule, because git servers refuse to send shallow snapshots for non-head commits (e.g. tagged releases). Naturally, both these minor issues disappear once we have our fork.


I'm also starting to feel that we're going to need to introduce changes to newlib sources (larger than just headers) much sooner rather than later. This is mainly because the internal features of newlib also use these headers, so substituting them after newlib was already compiled only works for some particular headers that are not used in std function definitions. For example fprintf indirectly calls lseek with SEEK_SET, and thus the proper definition of that constant must already be present when newlib gets compiled. Maybe, since we're changing the way we use newlib anyway, starting the fork right now isn't such a bad idea after all?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,276,2017-04-25T21:29:28Z,2017-05-07T12:56:23Z,2017-05-07T12:56:23Z,MERGED,True,229,228,31,https://github.com/rafalcieslak,Compiling newlib,23,[],https://github.com/cahirwpz/mimiker/pull/276,https://github.com/cahirwpz,5,https://github.com/cahirwpz/mimiker/pull/276#issuecomment-298726081,"This branch introduces changes necessary for building newlib with the kernel.
NOTE: This branch is useless with a toolchain that has newlib built-in!
Quick overview:

cache is a store for newlib-2.5.0.tar.gz and unpacked sources.
user/sysroot-newlib is dynamically generated and is the directory where newlib gets installed after it is compiled.
user/sysroot-base is versioned and contains our custom headers and other files.
libmimiker was moved to a dedicated directory user/libmimiker.
user/sysroot is dynamically created, and contains the full sysroot - composed of files from sysroot-newlib, sysroot-base and libmimiker. It may be used as --sysroot for compiling third-party programs. It is also copied to / of the ramdisk.

I also did some minor changes to unrelated Makefile rules, to improve parallelized build times, and to remove some depracated conditions. initrd malloc pool size had to be increased as the cpio archive grows larger.
We'll have to prepare a new toolchain build without newlib for this branch to make sense, I'll look into that soon. (By the way, I've recently learned that ALL gcc toolchain builds are fully relocatable by design, moving the toolchain to a different directory will always work, and if you can build gcc so that it can't be moved, then gcc developers would be VERY interested in details.). I'd also suggest to change our vendor flavor name from unknown to mimiker, so that our new toolchain name would be mips-mimiker-elf. This has two advantages:

Newlib, as well as many 3rd party programs, contain conditional code that depends on the vendor name - using a custom one like mimiker may simplify porting.
It'll give us a way to easily (temporarily) distinguish between toolchain version (kind of like we did during the switch from mips-mti-elf to mipsel-unknown-elf) and inform the developer if they are using incorrect one.

I recommend starting reading the diff from user/Makefile.
This branch addresses #272.","Just short answer to encourage you to widen the scope of PR:

Please do so!
Ditto. With both changes in place, it will be clear that this PR is a breakthrough.
I need some time to think about it...",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,276,2017-04-25T21:29:28Z,2017-05-07T12:56:23Z,2017-05-07T12:56:23Z,MERGED,True,229,228,31,https://github.com/rafalcieslak,Compiling newlib,23,[],https://github.com/cahirwpz/mimiker/pull/276,https://github.com/rafalcieslak,6,https://github.com/cahirwpz/mimiker/pull/276#issuecomment-298902366,"This branch introduces changes necessary for building newlib with the kernel.
NOTE: This branch is useless with a toolchain that has newlib built-in!
Quick overview:

cache is a store for newlib-2.5.0.tar.gz and unpacked sources.
user/sysroot-newlib is dynamically generated and is the directory where newlib gets installed after it is compiled.
user/sysroot-base is versioned and contains our custom headers and other files.
libmimiker was moved to a dedicated directory user/libmimiker.
user/sysroot is dynamically created, and contains the full sysroot - composed of files from sysroot-newlib, sysroot-base and libmimiker. It may be used as --sysroot for compiling third-party programs. It is also copied to / of the ramdisk.

I also did some minor changes to unrelated Makefile rules, to improve parallelized build times, and to remove some depracated conditions. initrd malloc pool size had to be increased as the cpio archive grows larger.
We'll have to prepare a new toolchain build without newlib for this branch to make sense, I'll look into that soon. (By the way, I've recently learned that ALL gcc toolchain builds are fully relocatable by design, moving the toolchain to a different directory will always work, and if you can build gcc so that it can't be moved, then gcc developers would be VERY interested in details.). I'd also suggest to change our vendor flavor name from unknown to mimiker, so that our new toolchain name would be mips-mimiker-elf. This has two advantages:

Newlib, as well as many 3rd party programs, contain conditional code that depends on the vendor name - using a custom one like mimiker may simplify porting.
It'll give us a way to easily (temporarily) distinguish between toolchain version (kind of like we did during the switch from mips-mti-elf to mipsel-unknown-elf) and inform the developer if they are using incorrect one.

I recommend starting reading the diff from user/Makefile.
This branch addresses #272.","I've started by moving ./user/{sysroot,libmimiker} to ./, so that the user directory contains only user programs.
I see a potential difficulty with configuring the build system so that user programs install themselves into the sysroot: it would introduce a circular dependency between any user program and the sysroot directory. Also, tracking which files in the sysroot come from where is virtually impossible, so I'll need to wipe out the entire sysroot dir and re-generate it every time make runs, and thus the installation (not compilation) procedure for each user program will require repeating every time - in order to ensure that all dependencies are always satisfied. If I were to fix it by generating depfiles for the sysroot, then the top-level makefile would need to know the details of the installation procedure expressed in a deeply nested makefile, which would make our build scripts an incredible mess. Any wiser, extensive solution immediately starts to behave as a real package manager... so I'd rather not implement anything like it at the moment - I'll stay with recreating the sysroot too frequently.
EDIT: Sigh, it gets worse. Recreating the sysroot forces all user programs to recompile, as the standard library or libmimiker might have been updated. Furthermore, installing any user program into the sysroot causes others to recompile, because there is no way of telling that the installed program did not touch standard library files. We'd need to track the origin of files in sysroot... (again, a package manager). For now I think I'll use two separate directories: sysroot and install to break this circular dependency, and I'll keep looking for better solutions.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,276,2017-04-25T21:29:28Z,2017-05-07T12:56:23Z,2017-05-07T12:56:23Z,MERGED,True,229,228,31,https://github.com/rafalcieslak,Compiling newlib,23,[],https://github.com/cahirwpz/mimiker/pull/276,https://github.com/cahirwpz,7,https://github.com/cahirwpz/mimiker/pull/276#issuecomment-299118375,"This branch introduces changes necessary for building newlib with the kernel.
NOTE: This branch is useless with a toolchain that has newlib built-in!
Quick overview:

cache is a store for newlib-2.5.0.tar.gz and unpacked sources.
user/sysroot-newlib is dynamically generated and is the directory where newlib gets installed after it is compiled.
user/sysroot-base is versioned and contains our custom headers and other files.
libmimiker was moved to a dedicated directory user/libmimiker.
user/sysroot is dynamically created, and contains the full sysroot - composed of files from sysroot-newlib, sysroot-base and libmimiker. It may be used as --sysroot for compiling third-party programs. It is also copied to / of the ramdisk.

I also did some minor changes to unrelated Makefile rules, to improve parallelized build times, and to remove some depracated conditions. initrd malloc pool size had to be increased as the cpio archive grows larger.
We'll have to prepare a new toolchain build without newlib for this branch to make sense, I'll look into that soon. (By the way, I've recently learned that ALL gcc toolchain builds are fully relocatable by design, moving the toolchain to a different directory will always work, and if you can build gcc so that it can't be moved, then gcc developers would be VERY interested in details.). I'd also suggest to change our vendor flavor name from unknown to mimiker, so that our new toolchain name would be mips-mimiker-elf. This has two advantages:

Newlib, as well as many 3rd party programs, contain conditional code that depends on the vendor name - using a custom one like mimiker may simplify porting.
It'll give us a way to easily (temporarily) distinguish between toolchain version (kind of like we did during the switch from mips-mti-elf to mipsel-unknown-elf) and inform the developer if they are using incorrect one.

I recommend starting reading the diff from user/Makefile.
This branch addresses #272.","IMO it's reasonable to split the process into four phases:

patch newlib with our files, install header files into sysroot,
build kernel using sysroot contents,
build newlib and install it into initrd,
build user programs using initrd contents, install them into initrd and create cpio archive.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,276,2017-04-25T21:29:28Z,2017-05-07T12:56:23Z,2017-05-07T12:56:23Z,MERGED,True,229,228,31,https://github.com/rafalcieslak,Compiling newlib,23,[],https://github.com/cahirwpz/mimiker/pull/276,https://github.com/rafalcieslak,8,https://github.com/cahirwpz/mimiker/pull/276#issuecomment-299154773,"This branch introduces changes necessary for building newlib with the kernel.
NOTE: This branch is useless with a toolchain that has newlib built-in!
Quick overview:

cache is a store for newlib-2.5.0.tar.gz and unpacked sources.
user/sysroot-newlib is dynamically generated and is the directory where newlib gets installed after it is compiled.
user/sysroot-base is versioned and contains our custom headers and other files.
libmimiker was moved to a dedicated directory user/libmimiker.
user/sysroot is dynamically created, and contains the full sysroot - composed of files from sysroot-newlib, sysroot-base and libmimiker. It may be used as --sysroot for compiling third-party programs. It is also copied to / of the ramdisk.

I also did some minor changes to unrelated Makefile rules, to improve parallelized build times, and to remove some depracated conditions. initrd malloc pool size had to be increased as the cpio archive grows larger.
We'll have to prepare a new toolchain build without newlib for this branch to make sense, I'll look into that soon. (By the way, I've recently learned that ALL gcc toolchain builds are fully relocatable by design, moving the toolchain to a different directory will always work, and if you can build gcc so that it can't be moved, then gcc developers would be VERY interested in details.). I'd also suggest to change our vendor flavor name from unknown to mimiker, so that our new toolchain name would be mips-mimiker-elf. This has two advantages:

Newlib, as well as many 3rd party programs, contain conditional code that depends on the vendor name - using a custom one like mimiker may simplify porting.
It'll give us a way to easily (temporarily) distinguish between toolchain version (kind of like we did during the switch from mips-mti-elf to mipsel-unknown-elf) and inform the developer if they are using incorrect one.

I recommend starting reading the diff from user/Makefile.
This branch addresses #272.","I suppose we may need to meet and discuss this in greater detail (we've only had 2h of meeting for the past 4 weeks and it's starting to show). The entire process is not as simple as you think! When designing these build stages, please keep in mind that kernel compilation is not one-off, we repeatedly run make during development to recompile recent changes, and therefore make must understand how each components depend on each other in order to correctly decide which stages must be re-done.
You imply we need newlib headers in sysroot even to compile the kernel. That is not true (as this branch happens to demonstrate). In fact, we need newlib to not be present in the sysroot, in order to ensure we don't pull any parts of userspace standard library into the kernel. Even headers are dangerous, many newlib headers contain static inline function implementations, and most of them are invalid if they don't get linked with newlib's libc.a. For kernel purposes, we use ./stdc which provides various utilities similar to the standard library - so unless you want to replace them with kernel-side newlib, stage 1 is irrelevant.
Let me walk you throught the problem I see with mixing both newlib and user programs in the same directory you've called initrd. Remember that all make does is satisfying dependencies using target rules. Suppose we've already compiled the kernel and everything is working fine. ./initrd/ is populated with various files from various sources, many of them were copied into initrd as the result of invoking make install in a user program (or third party program) directory. All the install target recipe has done was cp-ing or install-ing some files into the destination directory. Now suppose we've edited some files in some of these programs, and/or the standard library. That should result in some files in ./initrd getting updated. But how do we know a particular file in initrd is out-of-date? We don't track where it came from. We can't even reliably tell if it belongs to newlib, or a user program (which one?), or maybe a third party program. With initrd.rules, which were gathered into centralized installation rules, preparing dependencies for files in the initrd directory was simple. But now the only thing we can do to ensure that the ./initrd is kept up to date, is re-installing all its contents, because, due to missing dependencies, make will never know how to perform a partial update.
Now if we need to reinstall all contents of the ./initrd directory every time any change was done to kernel sources, then in particular we also need to reinstall newlib. But hey, if we do so, then immediately all user programs, which use newlib from ./initrd directory require re-compiling, because the library they use has (possibly) changed! So we need to compile all of them, again, every time. After that is done, we can make install user programs, and they will populate ./initrd, done.
Another possible issue concerns files removed from initrd. Suppose we have a program which installed initrd/A and initrd/B, but due to recent changes it no longer needs B and from now on it only installs A to initrd. So we should remove initrd/B now. But, as we don't know the origin of initrd/B, we can't tell what program installed it, or what it's even doing there. Is it still needed? So the only reliable way to ensure no files are left over from previous initrd versions, we'd need to purge all contents of the initrd every time before installing anything in there. But... that's not a problem at all, since we've just established that we need to reinstall everything every-time, so removing all contents beforehand doesn't do much difference.
This way we end up forced to recreate the install directory from scratch every time any user program is modified, which, in turn, required recompiling all user programs.
So, in other words: Using program-defined make install decentralizes dependency information.
Without that information, top-level Makefiles can no longer reliably determine the minimal amount of work for updating the ramdisk according to source changes.
And naturally all of these problems become 100x harder if some of our user programs become libraries installed to the ramdisk, and other programs need these libraries to compile...
As I've said, this is not an easy process and expressing it as a series of simple ""stages"" hides and masks many problems. If you still believe that the exciting idea of having everything install itself into initrd is so simple to execute, then I ask you to either examine it more thoroughly, or tinker with a possible implementation. Reliably managing dependencies in a dynamically created installation directory is a very difficult problem. But it's a very well-known problem, and the software used to solve it is called a package manager.",True,{'THUMBS_UP': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,276,2017-04-25T21:29:28Z,2017-05-07T12:56:23Z,2017-05-07T12:56:23Z,MERGED,True,229,228,31,https://github.com/rafalcieslak,Compiling newlib,23,[],https://github.com/cahirwpz/mimiker/pull/276,https://github.com/rafalcieslak,9,https://github.com/cahirwpz/mimiker/pull/276#issuecomment-299583105,"This branch introduces changes necessary for building newlib with the kernel.
NOTE: This branch is useless with a toolchain that has newlib built-in!
Quick overview:

cache is a store for newlib-2.5.0.tar.gz and unpacked sources.
user/sysroot-newlib is dynamically generated and is the directory where newlib gets installed after it is compiled.
user/sysroot-base is versioned and contains our custom headers and other files.
libmimiker was moved to a dedicated directory user/libmimiker.
user/sysroot is dynamically created, and contains the full sysroot - composed of files from sysroot-newlib, sysroot-base and libmimiker. It may be used as --sysroot for compiling third-party programs. It is also copied to / of the ramdisk.

I also did some minor changes to unrelated Makefile rules, to improve parallelized build times, and to remove some depracated conditions. initrd malloc pool size had to be increased as the cpio archive grows larger.
We'll have to prepare a new toolchain build without newlib for this branch to make sense, I'll look into that soon. (By the way, I've recently learned that ALL gcc toolchain builds are fully relocatable by design, moving the toolchain to a different directory will always work, and if you can build gcc so that it can't be moved, then gcc developers would be VERY interested in details.). I'd also suggest to change our vendor flavor name from unknown to mimiker, so that our new toolchain name would be mips-mimiker-elf. This has two advantages:

Newlib, as well as many 3rd party programs, contain conditional code that depends on the vendor name - using a custom one like mimiker may simplify porting.
It'll give us a way to easily (temporarily) distinguish between toolchain version (kind of like we did during the switch from mips-mti-elf to mipsel-unknown-elf) and inform the developer if they are using incorrect one.

I recommend starting reading the diff from user/Makefile.
This branch addresses #272.","I've updated this branch according to the ideas we've exchanged on a recent meeting. It only slightly simplified make rules, and some extra tricks were required to work around other make oddities. I can't say I like the way this branch looks ATM.
I think what we're trying to do: using make dependencies to gather independent files into a directory, is very non-standard way of using make. We may be using a wrong tool for the problem! Mind you' I am completely fine with using make to compile kernel itself, and to compile each user program independently. That's following what make is designed for. What I think make isn't designed for is orchestrating the file installation process. Maybe we could use a nifty bash/python script for gathering files into sysroot (it would call make install + fakechroot in user program dirs) and managing dependencies between them, while still using make for compilation. I have some new ideas that need refining.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,276,2017-04-25T21:29:28Z,2017-05-07T12:56:23Z,2017-05-07T12:56:23Z,MERGED,True,229,228,31,https://github.com/rafalcieslak,Compiling newlib,23,[],https://github.com/cahirwpz/mimiker/pull/276,https://github.com/rafalcieslak,10,https://github.com/cahirwpz/mimiker/pull/276#issuecomment-299636038,"This branch introduces changes necessary for building newlib with the kernel.
NOTE: This branch is useless with a toolchain that has newlib built-in!
Quick overview:

cache is a store for newlib-2.5.0.tar.gz and unpacked sources.
user/sysroot-newlib is dynamically generated and is the directory where newlib gets installed after it is compiled.
user/sysroot-base is versioned and contains our custom headers and other files.
libmimiker was moved to a dedicated directory user/libmimiker.
user/sysroot is dynamically created, and contains the full sysroot - composed of files from sysroot-newlib, sysroot-base and libmimiker. It may be used as --sysroot for compiling third-party programs. It is also copied to / of the ramdisk.

I also did some minor changes to unrelated Makefile rules, to improve parallelized build times, and to remove some depracated conditions. initrd malloc pool size had to be increased as the cpio archive grows larger.
We'll have to prepare a new toolchain build without newlib for this branch to make sense, I'll look into that soon. (By the way, I've recently learned that ALL gcc toolchain builds are fully relocatable by design, moving the toolchain to a different directory will always work, and if you can build gcc so that it can't be moved, then gcc developers would be VERY interested in details.). I'd also suggest to change our vendor flavor name from unknown to mimiker, so that our new toolchain name would be mips-mimiker-elf. This has two advantages:

Newlib, as well as many 3rd party programs, contain conditional code that depends on the vendor name - using a custom one like mimiker may simplify porting.
It'll give us a way to easily (temporarily) distinguish between toolchain version (kind of like we did during the switch from mips-mti-elf to mipsel-unknown-elf) and inform the developer if they are using incorrect one.

I recommend starting reading the diff from user/Makefile.
This branch addresses #272.","Here's my conclusion after investigating these issues for many good hours. make is a great too for micro-managing dependencies between particular files. But it is not a good tool for managing dependencies between separate projects! This is because make only ever works on single files, and not entire trees. make also generally assumes that recipes have no side-effects, that is, their only useful output should be the recipe target itself, and certainly not stuff outside current tree, especially if it is managed by a different set of rules. Trying to force make to address source or installation directories results in all kinds of weird behavior, because its an ambiguous demand, and make was never designed to work as a package manager.
I believe it would be much simpler to build user programs and install them into sysroot using a dedicated python script.
Here's how I would see this. My explanation is detailed and therefore long, but the concept is actually very simple, and will immediately allow us to do all kinds of cool things!

Each directory in user would represent a single program or library. The contents of the directory are arbitrary, but it is recommended that it contains a Makefile with all and install targets (so exactly as they do now).
We would stop treating newlib as a special entity and place it in ./user/newlib, since it is barely a user-mode library and nothing else. We might either have ./user/newlib point to a third-party repository, or we might move the ""download & compile"" make script into ./user/newlib/Makefile.


This way newlib gets uniform treatment, all user programs and libraries will be processed the same way.


User programs would provide a description file which contains dependency information, and, if required, compile/install script, in case a program does not use a Makefile. For example, a ./user/prog/rules.json file might contain:

{
  ""name"": ""prog"",
  ""depends"": [""stdc""]
}

The sysroot-building python script would gather all information from user/* directories, to have a full image of how programs and 3drparty projects depend on each other. It would then compile them in the right order.
The python script would maintain a cache directory with installed files. For example, prog wouldn't get installed to sysroot/ directly, but to sysroot-cache/prog/ instead. This way the sysroot-cache directory kind of contains binary packages in form of directories.
(!!!) In order to compile user program X which depends on Y and Z, the python script would create a temporary build-sysroot by copying (merging) the contents of sysroot-cache/Y/ and sysroot-cache/Z/. The build-sysroot directory would be passed as --sysroot for compiling X. The actual compilation for X would use traditional make. When making X is done, the python script would use fakechroot to have X installed into sysroot-cache/X/. This way X doesn't need to be aware of the entire process, and everything is transparent!
Naturally, the python script would also track which projects need recompiling, but that becomes simple when we keep all packages as separate directory trees, it just needs to scan the sysroot-cache/X directory to see what is the most recently modified file, and only recompile what's necessary - using it's dependency information.
To prepare the actual initd archive, all sysroot-cache/*/ directories are merged.

This approach would solve all problems I've experienced with this branch. It also has extra advantages:

Managing user libraries is free, they don't differ in any way from programs.
The process is completely transparent and user programs shouldn't need any adaptation.
Adding third party libraries and programs becomes super simple! Just drop a submodule or source directory into user, place a rules.json with dependency description, all done.
Compilation dependencies are airtight - only what is specified as dependencies will be present in sysroot used for compilation, so no unwanted stuff may be pulled in, even by mistake.
It is very scalable, and will stay simple to maintain even if we use a very large number of user libraries and programs.

Note that this mechanism is virtually impossible to implement using plain make, due to how it handles directories and complex dependencies. Actually, I see a possibly valid way of implementing this using make (or any build system), but it requires creating a large number of meta-files and fake dynamically generated dependencies, which would be a great pain to maintain!
I came to a strong belief that make is great for compilation, but not great for managing file installation and directory layout. The solution I propose is very elegant, in fact it ends up behaving as a minimalistic package manager that only moves some files around. I believe it will be also pretty simple to implement in a coherent way - so I'll be preparing a demonstration very soon. I'll be using this branch as a base, if you want to keep this PR using these weird make rules, please let me know and I'll move to a new branch.
EDIT: I'll use a separate branch for the manager script. It should be simple to add it as a separate feature. In this branch, compilation works, but dependencies between user programs are order-only, so changes in, say, libmimiker, do not cause fd_test to recompile. We've agreed that would be fine for now.",True,{'HEART': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,276,2017-04-25T21:29:28Z,2017-05-07T12:56:23Z,2017-05-07T12:56:23Z,MERGED,True,229,228,31,https://github.com/rafalcieslak,Compiling newlib,23,[],https://github.com/cahirwpz/mimiker/pull/276,https://github.com/cahirwpz,11,https://github.com/cahirwpz/mimiker/pull/276#issuecomment-299704637,"This branch introduces changes necessary for building newlib with the kernel.
NOTE: This branch is useless with a toolchain that has newlib built-in!
Quick overview:

cache is a store for newlib-2.5.0.tar.gz and unpacked sources.
user/sysroot-newlib is dynamically generated and is the directory where newlib gets installed after it is compiled.
user/sysroot-base is versioned and contains our custom headers and other files.
libmimiker was moved to a dedicated directory user/libmimiker.
user/sysroot is dynamically created, and contains the full sysroot - composed of files from sysroot-newlib, sysroot-base and libmimiker. It may be used as --sysroot for compiling third-party programs. It is also copied to / of the ramdisk.

I also did some minor changes to unrelated Makefile rules, to improve parallelized build times, and to remove some depracated conditions. initrd malloc pool size had to be increased as the cpio archive grows larger.
We'll have to prepare a new toolchain build without newlib for this branch to make sense, I'll look into that soon. (By the way, I've recently learned that ALL gcc toolchain builds are fully relocatable by design, moving the toolchain to a different directory will always work, and if you can build gcc so that it can't be moved, then gcc developers would be VERY interested in details.). I'd also suggest to change our vendor flavor name from unknown to mimiker, so that our new toolchain name would be mips-mimiker-elf. This has two advantages:

Newlib, as well as many 3rd party programs, contain conditional code that depends on the vendor name - using a custom one like mimiker may simplify porting.
It'll give us a way to easily (temporarily) distinguish between toolchain version (kind of like we did during the switch from mips-mti-elf to mipsel-unknown-elf) and inform the developer if they are using incorrect one.

I recommend starting reading the diff from user/Makefile.
This branch addresses #272.","Your last post is definitely worth saving as an issue in tracking system! I roughly get the idea and I like it, however there's nothing better than you explaining the whole concept in person.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,277,2017-04-27T13:49:06Z,2017-04-28T12:36:32Z,2017-04-28T17:29:32Z,MERGED,True,277,147,8,https://github.com/cahirwpz,Hardware independent PCI bus driver,8,[],https://github.com/cahirwpz/mimiker/pull/277,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/277,"PCI bus enumeration and BAR configuration code has been decoupled from actual method of accessing PCI configuration space by introduction of gt_pci driver. Enumeration process creates a set of resource_t elements that could be allocated by driver code (after bus_alloc_resource counterpart is implemented).
Proper drivers are still missing. PCI driver has a temporary structure gathering all required resources for it to work. There will be a follow up PR that will try to clean up the code in preparation for basic driver structure. I'll investigate VGA and RTC driver structure.","PCI bus enumeration and BAR configuration code has been decoupled from actual method of accessing PCI configuration space by introduction of gt_pci driver. Enumeration process creates a set of resource_t elements that could be allocated by driver code (after bus_alloc_resource counterpart is implemented).
Proper drivers are still missing. PCI driver has a temporary structure gathering all required resources for it to work. There will be a follow up PR that will try to clean up the code in preparation for basic driver structure. I'll investigate VGA and RTC driver structure.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,277,2017-04-27T13:49:06Z,2017-04-28T12:36:32Z,2017-04-28T17:29:32Z,MERGED,True,277,147,8,https://github.com/cahirwpz,Hardware independent PCI bus driver,8,[],https://github.com/cahirwpz/mimiker/pull/277,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/277#issuecomment-297974722,"PCI bus enumeration and BAR configuration code has been decoupled from actual method of accessing PCI configuration space by introduction of gt_pci driver. Enumeration process creates a set of resource_t elements that could be allocated by driver code (after bus_alloc_resource counterpart is implemented).
Proper drivers are still missing. PCI driver has a temporary structure gathering all required resources for it to work. There will be a follow up PR that will try to clean up the code in preparation for basic driver structure. I'll investigate VGA and RTC driver structure.","Do you plan to introduce a generic device structure for all kinds of devices (a pci_device would be a specific kind of device)?

Yes, I do. However initially the configuration will be static to large degree. Indeed pci_device will become just a device, but I have to play with the idea of device and driver first.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,277,2017-04-27T13:49:06Z,2017-04-28T12:36:32Z,2017-04-28T17:29:32Z,MERGED,True,277,147,8,https://github.com/cahirwpz,Hardware independent PCI bus driver,8,[],https://github.com/cahirwpz/mimiker/pull/277,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/277#issuecomment-297978941,"PCI bus enumeration and BAR configuration code has been decoupled from actual method of accessing PCI configuration space by introduction of gt_pci driver. Enumeration process creates a set of resource_t elements that could be allocated by driver code (after bus_alloc_resource counterpart is implemented).
Proper drivers are still missing. PCI driver has a temporary structure gathering all required resources for it to work. There will be a follow up PR that will try to clean up the code in preparation for basic driver structure. I'll investigate VGA and RTC driver structure.",Ok. I added some comments and TODO's for future. Do you have any further remarks?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,277,2017-04-27T13:49:06Z,2017-04-28T12:36:32Z,2017-04-28T17:29:32Z,MERGED,True,277,147,8,https://github.com/cahirwpz,Hardware independent PCI bus driver,8,[],https://github.com/cahirwpz/mimiker/pull/277,https://github.com/rafalcieslak,4,https://github.com/cahirwpz/mimiker/pull/277#issuecomment-297978988,"PCI bus enumeration and BAR configuration code has been decoupled from actual method of accessing PCI configuration space by introduction of gt_pci driver. Enumeration process creates a set of resource_t elements that could be allocated by driver code (after bus_alloc_resource counterpart is implemented).
Proper drivers are still missing. PCI driver has a temporary structure gathering all required resources for it to work. There will be a follow up PR that will try to clean up the code in preparation for basic driver structure. I'll investigate VGA and RTC driver structure.","Thanks for your explanations, I can now see the greater picture! These extra comments really clear things up. Consider me now in favor of merging this branch.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,279,2017-04-28T12:32:02Z,2017-04-28T17:02:17Z,2017-04-28T17:02:17Z,CLOSED,False,67,102,6,https://github.com/cahirwpz,Function helpers to create uio_t structure for single transfer,5,[],https://github.com/cahirwpz/mimiker/pull/279,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/279,"This change introduces macro MAKE_UIO that defines uio_t structure with single I/O operation. With it we capture common use case into a single line. This is an alternative to #274.
I'm planning to use -fplan9-extensions features in our code. I find it extremely convenient to use camouflaged subtyping for structures. This works as follows:
struct A {
  int foo;
};

struct B {
  struct A;
  unsigned bar;
};

void incr(struct A *a) {
 a->foo++;
}

void func() {
 struct B b = { -1, 2 };
 incr(&b);
}","This change introduces macro MAKE_UIO that defines uio_t structure with single I/O operation. With it we capture common use case into a single line. This is an alternative to #274.
I'm planning to use -fplan9-extensions features in our code. I find it extremely convenient to use camouflaged subtyping for structures. This works as follows:
struct A {
  int foo;
};

struct B {
  struct A;
  unsigned bar;
};

void incr(struct A *a) {
 a->foo++;
}

void func() {
 struct B b = { -1, 2 };
 incr(&b);
}",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,279,2017-04-28T12:32:02Z,2017-04-28T17:02:17Z,2017-04-28T17:02:17Z,CLOSED,False,67,102,6,https://github.com/cahirwpz,Function helpers to create uio_t structure for single transfer,5,[],https://github.com/cahirwpz/mimiker/pull/279,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/279#issuecomment-298001283,"This change introduces macro MAKE_UIO that defines uio_t structure with single I/O operation. With it we capture common use case into a single line. This is an alternative to #274.
I'm planning to use -fplan9-extensions features in our code. I find it extremely convenient to use camouflaged subtyping for structures. This works as follows:
struct A {
  int foo;
};

struct B {
  struct A;
  unsigned bar;
};

void incr(struct A *a) {
 a->foo++;
}

void func() {
 struct B b = { -1, 2 };
 incr(&b);
}",I merged my ideas with those from @coodie change. Please note sys/exec.c was modified to use uio_make* as well.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,279,2017-04-28T12:32:02Z,2017-04-28T17:02:17Z,2017-04-28T17:02:17Z,CLOSED,False,67,102,6,https://github.com/cahirwpz,Function helpers to create uio_t structure for single transfer,5,[],https://github.com/cahirwpz/mimiker/pull/279,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/279#issuecomment-298036904,"This change introduces macro MAKE_UIO that defines uio_t structure with single I/O operation. With it we capture common use case into a single line. This is an alternative to #274.
I'm planning to use -fplan9-extensions features in our code. I find it extremely convenient to use camouflaged subtyping for structures. This works as follows:
struct A {
  int foo;
};

struct B {
  struct A;
  unsigned bar;
};

void incr(struct A *a) {
 a->foo++;
}

void func() {
 struct B b = { -1, 2 };
 incr(&b);
}","The original example you've provided in PR description is also a great example of what bothers me most about indirect access to anonymous field. It introduces implicit conversions to otherwise very explicit language.
void incr(struct A *a);

  struct B b = { -1, 2 };
  incr(&b);
The incr(&b) looks like there is some implicit cast going on (struct B* to struct A*, which, as a matter of fact, would cause UB), but that's not what actually happens here! This conversion is more like C++-style upcasting. (I don't know the detailed plan9 compiler history, but given it's age it is likely that this extension was indeed an early attempt at richer types before C++ began to crystallize.)",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,279,2017-04-28T12:32:02Z,2017-04-28T17:02:17Z,2017-04-28T17:02:17Z,CLOSED,False,67,102,6,https://github.com/cahirwpz,Function helpers to create uio_t structure for single transfer,5,[],https://github.com/cahirwpz/mimiker/pull/279,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/279#issuecomment-298052445,"This change introduces macro MAKE_UIO that defines uio_t structure with single I/O operation. With it we capture common use case into a single line. This is an alternative to #274.
I'm planning to use -fplan9-extensions features in our code. I find it extremely convenient to use camouflaged subtyping for structures. This works as follows:
struct A {
  int foo;
};

struct B {
  struct A;
  unsigned bar;
};

void incr(struct A *a) {
 a->foo++;
}

void func() {
 struct B b = { -1, 2 };
 incr(&b);
}",I see this GCC extension drew a lot of controversy. Let's discuss it at the next meeting.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,280,2017-04-29T20:14:23Z,2017-04-30T07:23:05Z,2017-04-30T07:23:05Z,MERGED,True,368,0,4,https://github.com/rafalcieslak,Imported sscanf,1,[],https://github.com/cahirwpz/mimiker/pull/280,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/280,"Simple as that. I need sscanf for another branch I'm working on, and I know you like to import new stdc functions in separate pull requests. The implementation I picked from smallclib is the natural counterpart of snprintf we already use. I've only modified include directives to match our header file layout.","Simple as that. I need sscanf for another branch I'm working on, and I know you like to import new stdc functions in separate pull requests. The implementation I picked from smallclib is the natural counterpart of snprintf we already use. I've only modified include directives to match our header file layout.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,281,2017-04-29T20:45:57Z,2017-05-01T17:56:07Z,2017-05-01T17:56:07Z,MERGED,True,143,17,4,https://github.com/rafalcieslak,Configurable VGA video mode,21,[],https://github.com/cahirwpz/mimiker/pull/281,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/281,"NOTE: This branch is built on top of #275 (VGA driver) and #280 (Imported sscanf), so the diff won't make sense until these other two branches are merged!
This branch introduces support for dynamically configured VGA video mode. The user-space program mandelbrot enables higher resolution by writing 640 480 8 to /dev/vga/videomode. The interface is generic, and VGA drivers may choose to support it or not.
It is also a nice demonstration of how devfs may be used for configuring drivers.","NOTE: This branch is built on top of #275 (VGA driver) and #280 (Imported sscanf), so the diff won't make sense until these other two branches are merged!
This branch introduces support for dynamically configured VGA video mode. The user-space program mandelbrot enables higher resolution by writing 640 480 8 to /dev/vga/videomode. The interface is generic, and VGA drivers may choose to support it or not.
It is also a nice demonstration of how devfs may be used for configuring drivers.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,282,2017-05-01T11:00:36Z,2017-05-01T18:39:43Z,2017-05-02T10:25:15Z,MERGED,True,24,86,5,https://github.com/cahirwpz,Initializer macro for single UIO transfer,3,[],https://github.com/cahirwpz/mimiker/pull/282,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/282,"This is alternative solution to PR #274. I think I've found the cleanest solution to the problem, that does not require using rare C extensions.","This is alternative solution to PR #274. I think I've found the cleanest solution to the problem, that does not require using rare C extensions.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,282,2017-05-01T11:00:36Z,2017-05-01T18:39:43Z,2017-05-02T10:25:15Z,MERGED,True,24,86,5,https://github.com/cahirwpz,Initializer macro for single UIO transfer,3,[],https://github.com/cahirwpz/mimiker/pull/282,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/282#issuecomment-298319149,"This is alternative solution to PR #274. I think I've found the cleanest solution to the problem, that does not require using rare C extensions.",@coodie @rafalcieslak Could you compare this solution against the original?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,283,2017-05-01T14:29:57Z,2017-05-02T11:15:41Z,2017-05-02T11:15:41Z,MERGED,True,1,1,1,https://github.com/rafalcieslak,Fixed seeking for write-only files,1,['bug'],https://github.com/cahirwpz/mimiker/pull/283,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/283,"Fixed a tiny bug in do_lseek, where the file requested with a descriptor was assumed to be readable. This is not the case e.g. for /dev/vga/fb, and thus user programs were unable to seek back to framebuffer start.","Fixed a tiny bug in do_lseek, where the file requested with a descriptor was assumed to be readable. This is not the case e.g. for /dev/vga/fb, and thus user programs were unable to seek back to framebuffer start.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,284,2017-05-01T14:40:53Z,2017-06-08T12:38:17Z,2017-06-08T12:38:17Z,MERGED,True,370,0,8,https://github.com/rafalcieslak,Basic ps/2 8042 support,16,[],https://github.com/cahirwpz/mimiker/pull/284,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/284,"I've implemented a very basic 8042 driver, which initial support for a ps/2 keyboard. The scancodes are gathered by a separate thread, which collects them into a buffer that user programs may read via /dev/scancode.
My implementation does not use interrupts (but I suppose it'll be pretty easy to enable them once we support interrupt management). Also, naturally, the /dev/scancode is not pollable, so it requires reading repeatedly (or, e.g. every frame, since events are buffered). The scancodes are not translated into keypress/keyrelease events in any way - I've only implemeted the ""raw"" interface.
However, even with these limitations in place, my headless_doom fork already supports the scancode interface, and, with #283, DOOM is now playable!
EDIT: For the record, this also works under OVPsim - but the FDC37M817 ignores scan code table selection, and insists on using mode 2. Sigh. This doesn't affect this branch though, only that user-side scancode recognition is trickier.
EDIT2: I also have a feeling this driver may be the perfect place for demonstrating interrupt registration and handling.","I've implemented a very basic 8042 driver, which initial support for a ps/2 keyboard. The scancodes are gathered by a separate thread, which collects them into a buffer that user programs may read via /dev/scancode.
My implementation does not use interrupts (but I suppose it'll be pretty easy to enable them once we support interrupt management). Also, naturally, the /dev/scancode is not pollable, so it requires reading repeatedly (or, e.g. every frame, since events are buffered). The scancodes are not translated into keypress/keyrelease events in any way - I've only implemeted the ""raw"" interface.
However, even with these limitations in place, my headless_doom fork already supports the scancode interface, and, with #283, DOOM is now playable!
EDIT: For the record, this also works under OVPsim - but the FDC37M817 ignores scan code table selection, and insists on using mode 2. Sigh. This doesn't affect this branch though, only that user-side scancode recognition is trickier.
EDIT2: I also have a feeling this driver may be the perfect place for demonstrating interrupt registration and handling.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,284,2017-05-01T14:40:53Z,2017-06-08T12:38:17Z,2017-06-08T12:38:17Z,MERGED,True,370,0,8,https://github.com/rafalcieslak,Basic ps/2 8042 support,16,[],https://github.com/cahirwpz/mimiker/pull/284,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/284#issuecomment-298350285,"I've implemented a very basic 8042 driver, which initial support for a ps/2 keyboard. The scancodes are gathered by a separate thread, which collects them into a buffer that user programs may read via /dev/scancode.
My implementation does not use interrupts (but I suppose it'll be pretty easy to enable them once we support interrupt management). Also, naturally, the /dev/scancode is not pollable, so it requires reading repeatedly (or, e.g. every frame, since events are buffered). The scancodes are not translated into keypress/keyrelease events in any way - I've only implemeted the ""raw"" interface.
However, even with these limitations in place, my headless_doom fork already supports the scancode interface, and, with #283, DOOM is now playable!
EDIT: For the record, this also works under OVPsim - but the FDC37M817 ignores scan code table selection, and insists on using mode 2. Sigh. This doesn't affect this branch though, only that user-side scancode recognition is trickier.
EDIT2: I also have a feeling this driver may be the perfect place for demonstrating interrupt registration and handling.","Travis had found an issue with the pmap test: it assumed there are no other threads in the system, and that it doesn't have to worry about preemption. But this branch introduces a ""keyboard reader"" thread which keeps running all the time (in a future change, it will just be woken up by an interrupt handler) - so I had to wrap both pmap tests into a critical section.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,284,2017-05-01T14:40:53Z,2017-06-08T12:38:17Z,2017-06-08T12:38:17Z,MERGED,True,370,0,8,https://github.com/rafalcieslak,Basic ps/2 8042 support,16,[],https://github.com/cahirwpz/mimiker/pull/284,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/284#issuecomment-299189928,"I've implemented a very basic 8042 driver, which initial support for a ps/2 keyboard. The scancodes are gathered by a separate thread, which collects them into a buffer that user programs may read via /dev/scancode.
My implementation does not use interrupts (but I suppose it'll be pretty easy to enable them once we support interrupt management). Also, naturally, the /dev/scancode is not pollable, so it requires reading repeatedly (or, e.g. every frame, since events are buffered). The scancodes are not translated into keypress/keyrelease events in any way - I've only implemeted the ""raw"" interface.
However, even with these limitations in place, my headless_doom fork already supports the scancode interface, and, with #283, DOOM is now playable!
EDIT: For the record, this also works under OVPsim - but the FDC37M817 ignores scan code table selection, and insists on using mode 2. Sigh. This doesn't affect this branch though, only that user-side scancode recognition is trickier.
EDIT2: I also have a feeling this driver may be the perfect place for demonstrating interrupt registration and handling.","I've closely examined OVPsim sources. It's absolutely clear that OVPsim's PS/2 support is a direct copy from QEMU. I've tried to find the exact QEMU version they used, and I've only managed to find out that it must have been at most 0.8... which was released way back in 2006. OVPsim's copied implementation had very little changes since then, and is quite limited. For example, it ignores requests for selecting a scan code table, and always sticks to table 2 (so I guess my hands are tied and I'll stick to table 2 as well). Many keys produce incorrect scancodes. Some keys only generate BREAK and no MAKE scancode. I can't programmatically differentiate QEMU's keyboard from OVPsim's, because they respond with the same keyboard identification code (OVPsim's uses QEMU's unmodified code).
So, generally, keyboard support on OVPsim is a real mess, and there is nothing we can do about it. I'll update this branch to deal with OVPsim as well as it's possible, but it will leave much to desire.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,284,2017-05-01T14:40:53Z,2017-06-08T12:38:17Z,2017-06-08T12:38:17Z,MERGED,True,370,0,8,https://github.com/rafalcieslak,Basic ps/2 8042 support,16,[],https://github.com/cahirwpz/mimiker/pull/284,https://github.com/rafalcieslak,4,https://github.com/cahirwpz/mimiker/pull/284#issuecomment-299546386,"I've implemented a very basic 8042 driver, which initial support for a ps/2 keyboard. The scancodes are gathered by a separate thread, which collects them into a buffer that user programs may read via /dev/scancode.
My implementation does not use interrupts (but I suppose it'll be pretty easy to enable them once we support interrupt management). Also, naturally, the /dev/scancode is not pollable, so it requires reading repeatedly (or, e.g. every frame, since events are buffered). The scancodes are not translated into keypress/keyrelease events in any way - I've only implemeted the ""raw"" interface.
However, even with these limitations in place, my headless_doom fork already supports the scancode interface, and, with #283, DOOM is now playable!
EDIT: For the record, this also works under OVPsim - but the FDC37M817 ignores scan code table selection, and insists on using mode 2. Sigh. This doesn't affect this branch though, only that user-side scancode recognition is trickier.
EDIT2: I also have a feeling this driver may be the perfect place for demonstrating interrupt registration and handling.",This branch is currently waiting for #292 (PCI-ISA bridge) to be implemented.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,285,2017-05-01T17:23:59Z,2017-05-02T06:47:19Z,2017-05-02T06:47:19Z,MERGED,True,116,5,10,https://github.com/rafalcieslak,Process structure stub,3,['accepted'],https://github.com/cahirwpz/mimiker/pull/285,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/285,"This branch introduces proc structure. In order to keep this change minimal, I've not removed any fields from thread structure, and proc is not very useful at the moment. I suggest introducing more fields to proc in subsequent PRs.
I've modified fork so that it creates a new process for the new thread, and exec so that it creates new process for current thread (if called by a kernel thread). I've also implemented getpid syscall and proc_get_by_pid convenience function.
This should be enough to push #271 (Basic signal support) forward.","This branch introduces proc structure. In order to keep this change minimal, I've not removed any fields from thread structure, and proc is not very useful at the moment. I suggest introducing more fields to proc in subsequent PRs.
I've modified fork so that it creates a new process for the new thread, and exec so that it creates new process for current thread (if called by a kernel thread). I've also implemented getpid syscall and proc_get_by_pid convenience function.
This should be enough to push #271 (Basic signal support) forward.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,289,2017-05-02T14:37:14Z,2017-05-11T11:36:54Z,2017-05-11T11:36:54Z,MERGED,True,70,44,13,https://github.com/rafalcieslak,Moved uspace field from thread_t to proc_t,15,[],https://github.com/cahirwpz/mimiker/pull/289,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/289,"Moving td_uspace to p_uspace turned out to be more complicated than I expected it to be. This is because we've been using the td_uspace field in two ways:

To store the userspace map of a particular user-mode thread
To keep a temporary userspace map that is different from 1. when we need to do some operations on it and need to be sure it will be re-activated when the current thread continues after preemption.

If we want the uspace to be a property of a process and shared between multiple threads, than we can no longer use it for 2, it wouldn't make any sense. Therefore I had to significantly modify the semantics of vm_map_activate. Until now, it would activate a vm_map and assign it to the current thread. As threads no longer have each their own vm_map reference, the former is no longer possible. So now all vm_map_activate does is activating the vm_map for use. This, in turn, means that we need to make sure to disable preemption while we're using an active vm_map that is not native to the current thread/process. Therefore I've been forced to add extra critical_sections to vm_map_clone and do_exec, as both these temporarily activate a different userspace vm_map in order to prepare it.
I've also had to completely disable the sched test - as threads no longer carry a uspace, the test is pointless. It was already marked as KTEST_FLAG_BROKEN, so it's not like we've been using it a lot.","Moving td_uspace to p_uspace turned out to be more complicated than I expected it to be. This is because we've been using the td_uspace field in two ways:

To store the userspace map of a particular user-mode thread
To keep a temporary userspace map that is different from 1. when we need to do some operations on it and need to be sure it will be re-activated when the current thread continues after preemption.

If we want the uspace to be a property of a process and shared between multiple threads, than we can no longer use it for 2, it wouldn't make any sense. Therefore I had to significantly modify the semantics of vm_map_activate. Until now, it would activate a vm_map and assign it to the current thread. As threads no longer have each their own vm_map reference, the former is no longer possible. So now all vm_map_activate does is activating the vm_map for use. This, in turn, means that we need to make sure to disable preemption while we're using an active vm_map that is not native to the current thread/process. Therefore I've been forced to add extra critical_sections to vm_map_clone and do_exec, as both these temporarily activate a different userspace vm_map in order to prepare it.
I've also had to completely disable the sched test - as threads no longer carry a uspace, the test is pointless. It was already marked as KTEST_FLAG_BROKEN, so it's not like we've been using it a lot.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,289,2017-05-02T14:37:14Z,2017-05-11T11:36:54Z,2017-05-11T11:36:54Z,MERGED,True,70,44,13,https://github.com/rafalcieslak,Moved uspace field from thread_t to proc_t,15,[],https://github.com/cahirwpz/mimiker/pull/289,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/289#issuecomment-298867393,"Moving td_uspace to p_uspace turned out to be more complicated than I expected it to be. This is because we've been using the td_uspace field in two ways:

To store the userspace map of a particular user-mode thread
To keep a temporary userspace map that is different from 1. when we need to do some operations on it and need to be sure it will be re-activated when the current thread continues after preemption.

If we want the uspace to be a property of a process and shared between multiple threads, than we can no longer use it for 2, it wouldn't make any sense. Therefore I had to significantly modify the semantics of vm_map_activate. Until now, it would activate a vm_map and assign it to the current thread. As threads no longer have each their own vm_map reference, the former is no longer possible. So now all vm_map_activate does is activating the vm_map for use. This, in turn, means that we need to make sure to disable preemption while we're using an active vm_map that is not native to the current thread/process. Therefore I've been forced to add extra critical_sections to vm_map_clone and do_exec, as both these temporarily activate a different userspace vm_map in order to prepare it.
I've also had to completely disable the sched test - as threads no longer carry a uspace, the test is pointless. It was already marked as KTEST_FLAG_BROKEN, so it's not like we've been using it a lot.","As you know critical_* mechanism is not a generic way to synchronize threads. It should be limited to the implementation of basic synchronization primitives and some parts of scheduler. Every time we use critical_* outside of this scope shows a design flaw in our kernel, and wrapping significant parts of do_exec and vm_map_clone makes the flaw apparent to full extent.
We have to find an alternative way to synchronize the parts of kernel that needlessly use critical_* primitive. Firstly we should identify minimal guarantees that are needed to perform the task and then choose right solution. Perhaps it's time to revisit #242. I'll reread spl(9) and kpreempt(9). Your suggestions are welcome!",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,289,2017-05-02T14:37:14Z,2017-05-11T11:36:54Z,2017-05-11T11:36:54Z,MERGED,True,70,44,13,https://github.com/rafalcieslak,Moved uspace field from thread_t to proc_t,15,[],https://github.com/cahirwpz/mimiker/pull/289,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/289#issuecomment-298918940,"Moving td_uspace to p_uspace turned out to be more complicated than I expected it to be. This is because we've been using the td_uspace field in two ways:

To store the userspace map of a particular user-mode thread
To keep a temporary userspace map that is different from 1. when we need to do some operations on it and need to be sure it will be re-activated when the current thread continues after preemption.

If we want the uspace to be a property of a process and shared between multiple threads, than we can no longer use it for 2, it wouldn't make any sense. Therefore I had to significantly modify the semantics of vm_map_activate. Until now, it would activate a vm_map and assign it to the current thread. As threads no longer have each their own vm_map reference, the former is no longer possible. So now all vm_map_activate does is activating the vm_map for use. This, in turn, means that we need to make sure to disable preemption while we're using an active vm_map that is not native to the current thread/process. Therefore I've been forced to add extra critical_sections to vm_map_clone and do_exec, as both these temporarily activate a different userspace vm_map in order to prepare it.
I've also had to completely disable the sched test - as threads no longer carry a uspace, the test is pointless. It was already marked as KTEST_FLAG_BROKEN, so it's not like we've been using it a lot.","Yes, I've only used critical_* due to the lack of any better alternative. But I suppose we don't necessarily need better synchronization features for this particular PR.
First thing is that I wouldn't worry much about vm_map_clone - the entire function is a temporary hack which we hope to remove soon once we have better memory management features available.
do_exec is different - we care about its implementation. The nature of the exec system call is such that on successful exec, all other threads of the calling process are terminated (and it's probably rare for an exec to get called by a multi-threaded context). We could hypothetically terminate all other threads before preparing the new vm_map. That would be convenient, once other threads are terminated, we can safely assign the vmap to p_uspace, and only then prepare the vmap - this way we'll be safe if we get preempted, as no other threads would share the vmap yet. However, if exec happens to fail, all other threads must stay alive (or do they? I can't find specific info on that anywhere, but it sounds logical not to terminate them if exec would not succeed.) - so before we terminate them we need to be sure that no further errors may happen. So for this to work, we would need to validate the entire ELF file first, then kill other threads, then assign a new vmap, then setup the vmap according to the ELF file. If that sounds okay to you, I can try re-implement exec to use this two-stage setup, and we'll never need a critical section. OTOH, if we want the other threads alive while we prepare new process memory map, then the minimal guarantee we need for this to work is that no other threads of the same process can continue while we're setting up vmap.
Side note: I haven't thought about it in greater detail, but what if a thread that activates a particular uspace would lock a recursive mutex on that vm_map structure? The lock would be released/acquired in the vm_map_activate function. When editing a vm_map, lock the mutex recursively once more. This way no other threads will be able to activate a vm_map while it's being edited by another thread, and no thread will be able to edit a vm_map while it's in use by another thread (e.g. on another processor). It sounds almost to simple to be true...?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,289,2017-05-02T14:37:14Z,2017-05-11T11:36:54Z,2017-05-11T11:36:54Z,MERGED,True,70,44,13,https://github.com/rafalcieslak,Moved uspace field from thread_t to proc_t,15,[],https://github.com/cahirwpz/mimiker/pull/289,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/289#issuecomment-299133752,"Moving td_uspace to p_uspace turned out to be more complicated than I expected it to be. This is because we've been using the td_uspace field in two ways:

To store the userspace map of a particular user-mode thread
To keep a temporary userspace map that is different from 1. when we need to do some operations on it and need to be sure it will be re-activated when the current thread continues after preemption.

If we want the uspace to be a property of a process and shared between multiple threads, than we can no longer use it for 2, it wouldn't make any sense. Therefore I had to significantly modify the semantics of vm_map_activate. Until now, it would activate a vm_map and assign it to the current thread. As threads no longer have each their own vm_map reference, the former is no longer possible. So now all vm_map_activate does is activating the vm_map for use. This, in turn, means that we need to make sure to disable preemption while we're using an active vm_map that is not native to the current thread/process. Therefore I've been forced to add extra critical_sections to vm_map_clone and do_exec, as both these temporarily activate a different userspace vm_map in order to prepare it.
I've also had to completely disable the sched test - as threads no longer carry a uspace, the test is pointless. It was already marked as KTEST_FLAG_BROKEN, so it's not like we've been using it a lot.","Multithreading doesn't play well with unix process model. Handling properly fork in multithreaded application is problematic. POSIX.1 specification for exec* doesn't say exactly what to do when exec call fails:

A call to any exec function from a process with more than one thread shall result in all threads being terminated and the new executable image being loaded and executed.

A programmer that calls fork or exec in multithreaded application does not understand consequences of running multiple threads very well. IMO in most cases introduction of threads is driven by bad design decisions.
Let's ignore weird corner cases and support the most common scenario well , which is fork + exec. When exec fails a programmer is supposed to terminate the process.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,289,2017-05-02T14:37:14Z,2017-05-11T11:36:54Z,2017-05-11T11:36:54Z,MERGED,True,70,44,13,https://github.com/rafalcieslak,Moved uspace field from thread_t to proc_t,15,[],https://github.com/cahirwpz/mimiker/pull/289,https://github.com/rafalcieslak,5,https://github.com/cahirwpz/mimiker/pull/289#issuecomment-299156269,"Moving td_uspace to p_uspace turned out to be more complicated than I expected it to be. This is because we've been using the td_uspace field in two ways:

To store the userspace map of a particular user-mode thread
To keep a temporary userspace map that is different from 1. when we need to do some operations on it and need to be sure it will be re-activated when the current thread continues after preemption.

If we want the uspace to be a property of a process and shared between multiple threads, than we can no longer use it for 2, it wouldn't make any sense. Therefore I had to significantly modify the semantics of vm_map_activate. Until now, it would activate a vm_map and assign it to the current thread. As threads no longer have each their own vm_map reference, the former is no longer possible. So now all vm_map_activate does is activating the vm_map for use. This, in turn, means that we need to make sure to disable preemption while we're using an active vm_map that is not native to the current thread/process. Therefore I've been forced to add extra critical_sections to vm_map_clone and do_exec, as both these temporarily activate a different userspace vm_map in order to prepare it.
I've also had to completely disable the sched test - as threads no longer carry a uspace, the test is pointless. It was already marked as KTEST_FLAG_BROKEN, so it's not like we've been using it a lot.","I've managed to confirm that Linux destroys all threads on a call to execve, regardless whether the call was successful or not - and that is also a good indication that it's okay if we do the same. I'll update this branch soon.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,290,2017-05-02T16:32:07Z,2017-05-02T17:23:10Z,2017-05-02T17:23:10Z,MERGED,True,32,25,6,https://github.com/rafalcieslak,Moved fdtable from thread_t to proc_t,3,[],https://github.com/cahirwpz/mimiker/pull/290,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/290,"This was certainly simpler than uspace. Note that until we fix exit to kill all process' threads, the file descriptor table never gets released (because processes are never destroyed).","This was certainly simpler than uspace. Note that until we fix exit to kill all process' threads, the file descriptor table never gets released (because processes are never destroyed).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,295,2017-05-07T12:19:48Z,2017-05-07T13:10:01Z,2017-05-07T13:10:01Z,MERGED,True,15,11,5,https://github.com/rafalcieslak,M_DEV memory pool,2,['accepted'],https://github.com/cahirwpz/mimiker/pull/295,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/295,"I've removed M_STDVGA memory pool and created a generic M_DEV. I also took the opportunity to rename stdvga.c to drv_stdvga.c.
By the way, could we please merge device branch ASAP and fix it later? Pretty much everything I'm trying to experiment with requires these device and driver structures to be present.","I've removed M_STDVGA memory pool and created a generic M_DEV. I also took the opportunity to rename stdvga.c to drv_stdvga.c.
By the way, could we please merge device branch ASAP and fix it later? Pretty much everything I'm trying to experiment with requires these device and driver structures to be present.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,297,2017-05-07T18:42:52Z,2017-05-07T21:29:18Z,2017-05-14T17:55:23Z,MERGED,True,285,170,11,https://github.com/cahirwpz,Early device driver infrastructure,9,[],https://github.com/cahirwpz/mimiker/pull/297,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/297,@rafalcieslak I put this under review only because you insisted to have device drivers sooner than later. I'm pretty confident the change is going in right direction.,@rafalcieslak I put this under review only because you insisted to have device drivers sooner than later. I'm pretty confident the change is going in right direction.,True,{'HOORAY': ['https://github.com/rafalcieslak']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,297,2017-05-07T18:42:52Z,2017-05-07T21:29:18Z,2017-05-14T17:55:23Z,MERGED,True,285,170,11,https://github.com/cahirwpz,Early device driver infrastructure,9,[],https://github.com/cahirwpz/mimiker/pull/297,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/297#issuecomment-299727590,@rafalcieslak I put this under review only because you insisted to have device drivers sooner than later. I'm pretty confident the change is going in right direction.,"Please find some extra information below that probably should make it way into comments:

bus_methods structure will contain functions bus_intr_setup, bus_intr_teardown, bus_alloc_resource and alike,
device_probe returns an integer, the higher the more suitable the driver is,
device_attach returns 0 on success, and errno.h number on failure,
device_t is not supposed to be extended as we initially discussed, all extra data should be contained within state and instance.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,297,2017-05-07T18:42:52Z,2017-05-07T21:29:18Z,2017-05-14T17:55:23Z,MERGED,True,285,170,11,https://github.com/cahirwpz,Early device driver infrastructure,9,[],https://github.com/cahirwpz/mimiker/pull/297,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/297#issuecomment-299727738,@rafalcieslak I put this under review only because you insisted to have device drivers sooner than later. I'm pretty confident the change is going in right direction.,"About device_t extensions. What are your arguments against the layout we've originally discussed?
struct pci_device{
    pci device data...
    device_t device;
}
Other device types would provide their own xyz_device structure. In fact anything that contains an embedded struct device is a device. I find this layout much cleaner and more consistent than hiding everything behind void* pointers.
My arguments for that layout:


Less memory allocations are performed, less pointer dereferences are required, and cache locality is improved.


Less typeless pointers are present in sources.


pci-specific functions, like pci_read_config would take a pci_device* as an argument, instead of generic device_t*. That means compiler can do more type checking for us! (this is my favorite argument)


Source code is slightly simpler to read, because there are much less spots where you need to know what is the exact type of a device, as it can be explicitly stated in the source.


I suppose there may be more reasons to prefer the second layout - it should be easy to find them, the driver documentation from the period when Linux switched from the first to the second layout does mention some more reasons for the switch.
EDIT: Extra argument for using this layout for drivers: This way the PCI bus would be able to iterate over only PCI drivers, instead of all drivers in the system. In fact, a pci_driver_t might also contain a list of supported device/vendor ID's, so that the drivers would be probed only if it actually makes sense, and they wouldn't need to check the basic metadata on their own and would focus on the details instead.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,297,2017-05-07T18:42:52Z,2017-05-07T21:29:18Z,2017-05-14T17:55:23Z,MERGED,True,285,170,11,https://github.com/cahirwpz,Early device driver infrastructure,9,[],https://github.com/cahirwpz/mimiker/pull/297,https://github.com/rafalcieslak,4,https://github.com/cahirwpz/mimiker/pull/297#issuecomment-299734963,@rafalcieslak I put this under review only because you insisted to have device drivers sooner than later. I'm pretty confident the change is going in right direction.,"I can agree to stop whining about device_t structure layout if you promise me to thoroughly reconsider my idea in few weeks time, once we have a bunch of drivers in place and I provide an elegant demonstration comparing these two solutions.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,297,2017-05-07T18:42:52Z,2017-05-07T21:29:18Z,2017-05-14T17:55:23Z,MERGED,True,285,170,11,https://github.com/cahirwpz,Early device driver infrastructure,9,[],https://github.com/cahirwpz/mimiker/pull/297,https://github.com/cahirwpz,5,https://github.com/cahirwpz/mimiker/pull/297#issuecomment-299735432,@rafalcieslak I put this under review only because you insisted to have device drivers sooner than later. I'm pretty confident the change is going in right direction.,Frankly... I could not come up with a clean solution implementing proposed approach. I'd be more than happy if we could work out safer and cleaner way to achieve the same.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,297,2017-05-07T18:42:52Z,2017-05-07T21:29:18Z,2017-05-14T17:55:23Z,MERGED,True,285,170,11,https://github.com/cahirwpz,Early device driver infrastructure,9,[],https://github.com/cahirwpz/mimiker/pull/297,https://github.com/rafalcieslak,6,https://github.com/cahirwpz/mimiker/pull/297#issuecomment-299735570,@rafalcieslak I put this under review only because you insisted to have device drivers sooner than later. I'm pretty confident the change is going in right direction.,"Fair enough. I'll keep experimenting to learn what challenges we would need to solve. Either way, let's stick to your variant for now.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,297,2017-05-07T18:42:52Z,2017-05-07T21:29:18Z,2017-05-14T17:55:23Z,MERGED,True,285,170,11,https://github.com/cahirwpz,Early device driver infrastructure,9,[],https://github.com/cahirwpz/mimiker/pull/297,https://github.com/cahirwpz,7,https://github.com/cahirwpz/mimiker/pull/297#issuecomment-299735869,@rafalcieslak I put this under review only because you insisted to have device drivers sooner than later. I'm pretty confident the change is going in right direction.,Should I merge the branch as is?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,297,2017-05-07T18:42:52Z,2017-05-07T21:29:18Z,2017-05-14T17:55:23Z,MERGED,True,285,170,11,https://github.com/cahirwpz,Early device driver infrastructure,9,[],https://github.com/cahirwpz/mimiker/pull/297,https://github.com/rafalcieslak,8,https://github.com/cahirwpz/mimiker/pull/297#issuecomment-299735990,@rafalcieslak I put this under review only because you insisted to have device drivers sooner than later. I'm pretty confident the change is going in right direction.,"Please do. This seems to be a fine foundation, we can add next features and improvement separately.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,298,2017-05-08T00:26:44Z,2017-06-10T11:43:37Z,2017-06-10T11:43:37Z,CLOSED,False,293,59,9,https://github.com/rafalcieslak,Initial PCI-ISA bridge and RTC drivers implmementation,10,"[""won't fix""]",https://github.com/cahirwpz/mimiker/pull/298,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/298,"There are still some missing details I'll add soon, but I need to know if I'm going in the right direction. This implementation is functional, the RTC driver exposes a /dev interface, and the rtc kernel test reads from it.
My doubts about this branch concern how I manage resource_t and resource_t* references - because of how the ISA must be dynamically created when a PCI bridge is discovered.
In my implementation:

a pci bus has an additional lowio resource which covers the low I/O addresses (as reserved by PCI standard for ISA compatibility)
a piix4isa device has a transparent reference to the lowio and its own isa resource, owned by the piix4isa device, which represents the actual isa bus (it provides its own read/write operations, which relay requests to the lowio reference).
all pci devices have a transparent reference to the isa bus resource
a particular pci device may store in its state a reference to isa bus, in future I expect this reference to only refer to a subset of addresses within isa bus.

This hierarchy looks logical to me, but I am still not 100% certain I understand all the details about resource_t.
Adresses #292.","There are still some missing details I'll add soon, but I need to know if I'm going in the right direction. This implementation is functional, the RTC driver exposes a /dev interface, and the rtc kernel test reads from it.
My doubts about this branch concern how I manage resource_t and resource_t* references - because of how the ISA must be dynamically created when a PCI bridge is discovered.
In my implementation:

a pci bus has an additional lowio resource which covers the low I/O addresses (as reserved by PCI standard for ISA compatibility)
a piix4isa device has a transparent reference to the lowio and its own isa resource, owned by the piix4isa device, which represents the actual isa bus (it provides its own read/write operations, which relay requests to the lowio reference).
all pci devices have a transparent reference to the isa bus resource
a particular pci device may store in its state a reference to isa bus, in future I expect this reference to only refer to a subset of addresses within isa bus.

This hierarchy looks logical to me, but I am still not 100% certain I understand all the details about resource_t.
Adresses #292.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,298,2017-05-08T00:26:44Z,2017-06-10T11:43:37Z,2017-06-10T11:43:37Z,CLOSED,False,293,59,9,https://github.com/rafalcieslak,Initial PCI-ISA bridge and RTC drivers implmementation,10,"[""won't fix""]",https://github.com/cahirwpz/mimiker/pull/298,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/298#issuecomment-300293265,"There are still some missing details I'll add soon, but I need to know if I'm going in the right direction. This implementation is functional, the RTC driver exposes a /dev interface, and the rtc kernel test reads from it.
My doubts about this branch concern how I manage resource_t and resource_t* references - because of how the ISA must be dynamically created when a PCI bridge is discovered.
In my implementation:

a pci bus has an additional lowio resource which covers the low I/O addresses (as reserved by PCI standard for ISA compatibility)
a piix4isa device has a transparent reference to the lowio and its own isa resource, owned by the piix4isa device, which represents the actual isa bus (it provides its own read/write operations, which relay requests to the lowio reference).
all pci devices have a transparent reference to the isa bus resource
a particular pci device may store in its state a reference to isa bus, in future I expect this reference to only refer to a subset of addresses within isa bus.

This hierarchy looks logical to me, but I am still not 100% certain I understand all the details about resource_t.
Adresses #292.",Does the mc146818->regs resource look better now?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,298,2017-05-08T00:26:44Z,2017-06-10T11:43:37Z,2017-06-10T11:43:37Z,CLOSED,False,293,59,9,https://github.com/rafalcieslak,Initial PCI-ISA bridge and RTC drivers implmementation,10,"[""won't fix""]",https://github.com/cahirwpz/mimiker/pull/298,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/298#issuecomment-307560170,"There are still some missing details I'll add soon, but I need to know if I'm going in the right direction. This implementation is functional, the RTC driver exposes a /dev interface, and the rtc kernel test reads from it.
My doubts about this branch concern how I manage resource_t and resource_t* references - because of how the ISA must be dynamically created when a PCI bridge is discovered.
In my implementation:

a pci bus has an additional lowio resource which covers the low I/O addresses (as reserved by PCI standard for ISA compatibility)
a piix4isa device has a transparent reference to the lowio and its own isa resource, owned by the piix4isa device, which represents the actual isa bus (it provides its own read/write operations, which relay requests to the lowio reference).
all pci devices have a transparent reference to the isa bus resource
a particular pci device may store in its state a reference to isa bus, in future I expect this reference to only refer to a subset of addresses within isa bus.

This hierarchy looks logical to me, but I am still not 100% certain I understand all the details about resource_t.
Adresses #292.","I missed some concepts behind ISA bus, which was pointed out in #380, which requires to approach the problem quite differently. Hence the scope of changes offered by this PR is no longer relevant for ISA bus driver development.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,299,2017-05-08T03:07:39Z,2017-05-16T12:39:13Z,2017-05-16T12:53:40Z,CLOSED,False,1,1,1,https://github.com/coodie,Change compiled flag from -Og to -O0,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/299,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/299,"It is said that -Og flag is supposed not to interfere with debugging, but in fact it does. Apparently this makes register allocation, making gdb print message that value is in register instead of just printing it, and possibly some other optimizations. I find this rather annoying than useful, and obviously we don't need any kind of optimization. In future, when our kernel has more functionalities we might introduce release and debug builds.","It is said that -Og flag is supposed not to interfere with debugging, but in fact it does. Apparently this makes register allocation, making gdb print message that value is in register instead of just printing it, and possibly some other optimizations. I find this rather annoying than useful, and obviously we don't need any kind of optimization. In future, when our kernel has more functionalities we might introduce release and debug builds.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,299,2017-05-08T03:07:39Z,2017-05-16T12:39:13Z,2017-05-16T12:53:40Z,CLOSED,False,1,1,1,https://github.com/coodie,Change compiled flag from -Og to -O0,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/299,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/299#issuecomment-299821294,"It is said that -Og flag is supposed not to interfere with debugging, but in fact it does. Apparently this makes register allocation, making gdb print message that value is in register instead of just printing it, and possibly some other optimizations. I find this rather annoying than useful, and obviously we don't need any kind of optimization. In future, when our kernel has more functionalities we might introduce release and debug builds.","I don't know, if we use -Og by default, you can still temporarily switch to -O0 when you need it for debugging... Is it that much of a deal? When I work on the most obscure bugs, I tend to alter my debug config a lot.
Interestingly, Travis says our test fail when compiled with -O0 (yet they pass with -Og, which is a clear indication of undefined behavior). It looks like the fault has something to do with preparing the ramdisk, could you give a look at test logs, do you know where the problem might be? Could it be something you've already fixed in #268 (Getdirentries syscall)?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,299,2017-05-08T03:07:39Z,2017-05-16T12:39:13Z,2017-05-16T12:53:40Z,CLOSED,False,1,1,1,https://github.com/coodie,Change compiled flag from -Og to -O0,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/299,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/299#issuecomment-300101422,"It is said that -Og flag is supposed not to interfere with debugging, but in fact it does. Apparently this makes register allocation, making gdb print message that value is in register instead of just printing it, and possibly some other optimizations. I find this rather annoying than useful, and obviously we don't need any kind of optimization. In future, when our kernel has more functionalities we might introduce release and debug builds.","Please introduce extra make variable that will switch between DEBUG and NORMAL builds, i.e. by invoking make DEBUG=1 user instructs make to produce binaries suitable for in-depth debugging.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,299,2017-05-08T03:07:39Z,2017-05-16T12:39:13Z,2017-05-16T12:53:40Z,CLOSED,False,1,1,1,https://github.com/coodie,Change compiled flag from -Og to -O0,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/299,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/299#issuecomment-301769194,"It is said that -Og flag is supposed not to interfere with debugging, but in fact it does. Apparently this makes register allocation, making gdb print message that value is in register instead of just printing it, and possibly some other optimizations. I find this rather annoying than useful, and obviously we don't need any kind of optimization. In future, when our kernel has more functionalities we might introduce release and debug builds.",After some investigation done by @coodie #310 issue was created.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,300,2017-05-08T11:45:05Z,2017-05-12T13:54:42Z,2017-05-12T13:54:42Z,MERGED,True,96,35,13,https://github.com/rafalcieslak,Simplified mount interface,4,['accepted'],https://github.com/cahirwpz/mimiker/pull/300,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/300,"Initially I only wanted to remove the if (strncmp(path, ""/dev/"", 5) == 0) and associated vfs_root_dev_vnode, turned out some extra cleanup to the mount process was required, and I ended up with an elegant
vfs_domount_named(""initrd"", ""/"");
vfs_domount_named(""devfs"", ""/dev"");
in kernel_init(...).","Initially I only wanted to remove the if (strncmp(path, ""/dev/"", 5) == 0) and associated vfs_root_dev_vnode, turned out some extra cleanup to the mount process was required, and I ended up with an elegant
vfs_domount_named(""initrd"", ""/"");
vfs_domount_named(""devfs"", ""/dev"");
in kernel_init(...).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,300,2017-05-08T11:45:05Z,2017-05-12T13:54:42Z,2017-05-12T13:54:42Z,MERGED,True,96,35,13,https://github.com/rafalcieslak,Simplified mount interface,4,['accepted'],https://github.com/cahirwpz/mimiker/pull/300,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/300#issuecomment-300099172,"Initially I only wanted to remove the if (strncmp(path, ""/dev/"", 5) == 0) and associated vfs_root_dev_vnode, turned out some extra cleanup to the mount process was required, and I ended up with an elegant
vfs_domount_named(""initrd"", ""/"");
vfs_domount_named(""devfs"", ""/dev"");
in kernel_init(...).","vfs_domount_named looks to me like a good candidate for a function that would implement mount syscall! We wouldn't use last three arguments yet, but why not introduce it right now?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,300,2017-05-08T11:45:05Z,2017-05-12T13:54:42Z,2017-05-12T13:54:42Z,MERGED,True,96,35,13,https://github.com/rafalcieslak,Simplified mount interface,4,['accepted'],https://github.com/cahirwpz/mimiker/pull/300,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/300#issuecomment-300102115,"Initially I only wanted to remove the if (strncmp(path, ""/dev/"", 5) == 0) and associated vfs_root_dev_vnode, turned out some extra cleanup to the mount process was required, and I ended up with an elegant
vfs_domount_named(""initrd"", ""/"");
vfs_domount_named(""devfs"", ""/dev"");
in kernel_init(...).","I've considered that, but I don't think a mount syscall would be of much value. I suppose we wouldn't use it until we have some reasonable init program.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,300,2017-05-08T11:45:05Z,2017-05-12T13:54:42Z,2017-05-12T13:54:42Z,MERGED,True,96,35,13,https://github.com/rafalcieslak,Simplified mount interface,4,['accepted'],https://github.com/cahirwpz/mimiker/pull/300,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/300#issuecomment-300106454,"Initially I only wanted to remove the if (strncmp(path, ""/dev/"", 5) == 0) and associated vfs_root_dev_vnode, turned out some extra cleanup to the mount process was required, and I ended up with an elegant
vfs_domount_named(""initrd"", ""/"");
vfs_domount_named(""devfs"", ""/dev"");
in kernel_init(...).","That's right, but we could make some provisions for the future, e.g. by renaming vfs_mount_named to do_mount, at least.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,301,2017-05-08T12:00:57Z,2017-05-14T13:55:25Z,2017-05-14T13:55:25Z,MERGED,True,87,24,9,https://github.com/rafalcieslak,Minor debugging experience improvements,9,['accepted'],https://github.com/cahirwpz/mimiker/pull/301,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/301,"I've added a user_return label user before eret in user_exc_leave. When debugging user programs and/or syscalls, it is very convenient to place a tbreak on this label, to continue debugging the user application from the moment the current system call returns.


As our kernel main no longer does anything interesting, I've changed the implicit breakpoint from main to kernel_init, so that a default debugging session starts there.


I've added a boring panic_fail function (similar to assert_fail) so that I could add an implicit breakpoint on it. This way a default debugging session will not only automatically stop at failed assertions, but also at any panic condition.","I've added a user_return label user before eret in user_exc_leave. When debugging user programs and/or syscalls, it is very convenient to place a tbreak on this label, to continue debugging the user application from the moment the current system call returns.


As our kernel main no longer does anything interesting, I've changed the implicit breakpoint from main to kernel_init, so that a default debugging session starts there.


I've added a boring panic_fail function (similar to assert_fail) so that I could add an implicit breakpoint on it. This way a default debugging session will not only automatically stop at failed assertions, but also at any panic condition.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,301,2017-05-08T12:00:57Z,2017-05-14T13:55:25Z,2017-05-14T13:55:25Z,MERGED,True,87,24,9,https://github.com/rafalcieslak,Minor debugging experience improvements,9,['accepted'],https://github.com/cahirwpz/mimiker/pull/301,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/301#issuecomment-300102782,"I've added a user_return label user before eret in user_exc_leave. When debugging user programs and/or syscalls, it is very convenient to place a tbreak on this label, to continue debugging the user application from the moment the current system call returns.


As our kernel main no longer does anything interesting, I've changed the implicit breakpoint from main to kernel_init, so that a default debugging session starts there.


I've added a boring panic_fail function (similar to assert_fail) so that I could add an implicit breakpoint on it. This way a default debugging session will not only automatically stop at failed assertions, but also at any panic condition.",LGTM. Could you also extend launch script to redirect CBUS UART messages to x-terminal-emulator? I had some issues running debug session on mimiker server with nc localhost 8000 opened in other terminal (OTOH each user should get other port number I guess). I think launch script had some issues trying to kill simulator process (in both cases of OVPsim and QEMU).,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,301,2017-05-08T12:00:57Z,2017-05-14T13:55:25Z,2017-05-14T13:55:25Z,MERGED,True,87,24,9,https://github.com/rafalcieslak,Minor debugging experience improvements,9,['accepted'],https://github.com/cahirwpz/mimiker/pull/301,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/301#issuecomment-300534842,"I've added a user_return label user before eret in user_exc_leave. When debugging user programs and/or syscalls, it is very convenient to place a tbreak on this label, to continue debugging the user application from the moment the current system call returns.


As our kernel main no longer does anything interesting, I've changed the implicit breakpoint from main to kernel_init, so that a default debugging session starts there.


I've added a boring panic_fail function (similar to assert_fail) so that I could add an implicit breakpoint on it. This way a default debugging session will not only automatically stop at failed assertions, but also at any panic condition.","The reason you can't use the (default) -o xterm on the mimiker server (launcher automatically falls back to stdout) is because:
xterm: command not found",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,301,2017-05-08T12:00:57Z,2017-05-14T13:55:25Z,2017-05-14T13:55:25Z,MERGED,True,87,24,9,https://github.com/rafalcieslak,Minor debugging experience improvements,9,['accepted'],https://github.com/cahirwpz/mimiker/pull/301,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/301#issuecomment-300748105,"I've added a user_return label user before eret in user_exc_leave. When debugging user programs and/or syscalls, it is very convenient to place a tbreak on this label, to continue debugging the user application from the moment the current system call returns.


As our kernel main no longer does anything interesting, I've changed the implicit breakpoint from main to kernel_init, so that a default debugging session starts there.


I've added a boring panic_fail function (similar to assert_fail) so that I could add an implicit breakpoint on it. This way a default debugging session will not only automatically stop at failed assertions, but also at any panic condition.","Right – that makes sense! Wouldn't it be better if we changed xterm to x-terminal-emulator so that system owner can choose right tool by using update-alternatives utility (urxvt on mimiker server). I remember we had a brief discussion about it and you were somewhat reluctant to accept x-terminal-emulator, can you recall the argument?
I've encountered small issue – if you close xterm window with a button then the script fails to kill simulator (both OVPsim and qemu) correctly.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,301,2017-05-08T12:00:57Z,2017-05-14T13:55:25Z,2017-05-14T13:55:25Z,MERGED,True,87,24,9,https://github.com/rafalcieslak,Minor debugging experience improvements,9,['accepted'],https://github.com/cahirwpz/mimiker/pull/301,https://github.com/rafalcieslak,5,https://github.com/cahirwpz/mimiker/pull/301#issuecomment-300749934,"I've added a user_return label user before eret in user_exc_leave. When debugging user programs and/or syscalls, it is very convenient to place a tbreak on this label, to continue debugging the user application from the moment the current system call returns.


As our kernel main no longer does anything interesting, I've changed the implicit breakpoint from main to kernel_init, so that a default debugging session starts there.


I've added a boring panic_fail function (similar to assert_fail) so that I could add an implicit breakpoint on it. This way a default debugging session will not only automatically stop at failed assertions, but also at any panic condition.","On Debian-based systems the only guarantee about a x-terminal-emulator is that it accepts -e flag. That's not enough. For example, on my desktop, the default x-terminal-emulator is gnome-terminal which exhibits very weird behavior; it doesn't stay open as we would like it to and terminates too early, sending some odd signals to everyone around (?), which messes with the script. In order to support x-terminal-emulator we'd either need to test the script with a multitude of terminals (won't happen) or we would need to impose only minimum requirements for the terminal - clearly for gnome-terminal passing -e command is not enough. If you really want to use x-terminal-emulator and hope for the best, please enable it in a separate branch, because I expect it to introduce a lot of issues depending on terminal choice.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,301,2017-05-08T12:00:57Z,2017-05-14T13:55:25Z,2017-05-14T13:55:25Z,MERGED,True,87,24,9,https://github.com/rafalcieslak,Minor debugging experience improvements,9,['accepted'],https://github.com/cahirwpz/mimiker/pull/301,https://github.com/cahirwpz,6,https://github.com/cahirwpz/mimiker/pull/301#issuecomment-300751598,"I've added a user_return label user before eret in user_exc_leave. When debugging user programs and/or syscalls, it is very convenient to place a tbreak on this label, to continue debugging the user application from the moment the current system call returns.


As our kernel main no longer does anything interesting, I've changed the implicit breakpoint from main to kernel_init, so that a default debugging session starts there.


I've added a boring panic_fail function (similar to assert_fail) so that I could add an implicit breakpoint on it. This way a default debugging session will not only automatically stop at failed assertions, but also at any panic condition.","Ok. Then we'll stick to xterm.
I've uninstalled cgdb because it's messing up terminal completely. However the script does not check which debuggers are available and crashes trying to choose the default, which should be one of gdbtui or gdb.
When I start debugging session with gdbtui by invoking launch -d test=mutex, gdb claims the program is not being run and an exception is thrown:
Traceback (most recent call last):
  File ""./launch"", line 108, in <module>
    dbg.stop()
  File ""/home/cahir/workspace/mimiker-cieslak/launcher/debuggers.py"", line 23, in stop
    Launchable.stop(self)
  File ""/home/cahir/workspace/mimiker-cieslak/launcher/common.py"", line 54, in stop
    self.process.send_signal(signal.SIGTERM)
  File ""/usr/lib/python3.4/subprocess.py"", line 1681, in send_signal
    os.kill(self.pid, sig)
ProcessLookupError: [Errno 3] No such process

EDIT: The exception is thrown after typing quit into gdb.
EDIT2: With qemu debugging works fine, however the exception persists.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,301,2017-05-08T12:00:57Z,2017-05-14T13:55:25Z,2017-05-14T13:55:25Z,MERGED,True,87,24,9,https://github.com/rafalcieslak,Minor debugging experience improvements,9,['accepted'],https://github.com/cahirwpz/mimiker/pull/301,https://github.com/rafalcieslak,7,https://github.com/cahirwpz/mimiker/pull/301#issuecomment-300753500,"I've added a user_return label user before eret in user_exc_leave. When debugging user programs and/or syscalls, it is very convenient to place a tbreak on this label, to continue debugging the user application from the moment the current system call returns.


As our kernel main no longer does anything interesting, I've changed the implicit breakpoint from main to kernel_init, so that a default debugging session starts there.


I've added a boring panic_fail function (similar to assert_fail) so that I could add an implicit breakpoint on it. This way a default debugging session will not only automatically stop at failed assertions, but also at any panic condition.","cgdb is generally very inconsiderate about terminal configuration. The launcher scripts has countermeasures in place that restore a sane config after closing/killing cgdb.
The script does check which debuggers are available, for proof see output of ./launch --help which lists only available options. But as the documentation states, the -d flag is only a shorthand for --debugger cgdb. It is necessary for keeping the behavior of the script unchanged. Modifying the meaning of this flag might confuse other developers who are used to it.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,301,2017-05-08T12:00:57Z,2017-05-14T13:55:25Z,2017-05-14T13:55:25Z,MERGED,True,87,24,9,https://github.com/rafalcieslak,Minor debugging experience improvements,9,['accepted'],https://github.com/cahirwpz/mimiker/pull/301,https://github.com/rafalcieslak,8,https://github.com/cahirwpz/mimiker/pull/301#issuecomment-300754896,"I've added a user_return label user before eret in user_exc_leave. When debugging user programs and/or syscalls, it is very convenient to place a tbreak on this label, to continue debugging the user application from the moment the current system call returns.


As our kernel main no longer does anything interesting, I've changed the implicit breakpoint from main to kernel_init, so that a default debugging session starts there.


I've added a boring panic_fail function (similar to assert_fail) so that I could add an implicit breakpoint on it. This way a default debugging session will not only automatically stop at failed assertions, but also at any panic condition.","I see another potential issue. The port used by GDB is currently fixed as 1234. It should differ for each user. I can configure the launcher script to request simulators to use a different port, but GDB will use whatever is present in .gdbinit, which is set to 1234. In order to correctly assign different GDB port numbers for each user we'd need to dynamically generate .gdbinit before the debugger is started.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,301,2017-05-08T12:00:57Z,2017-05-14T13:55:25Z,2017-05-14T13:55:25Z,MERGED,True,87,24,9,https://github.com/rafalcieslak,Minor debugging experience improvements,9,['accepted'],https://github.com/cahirwpz/mimiker/pull/301,https://github.com/cahirwpz,9,https://github.com/cahirwpz/mimiker/pull/301#issuecomment-300756899,"I've added a user_return label user before eret in user_exc_leave. When debugging user programs and/or syscalls, it is very convenient to place a tbreak on this label, to continue debugging the user application from the moment the current system call returns.


As our kernel main no longer does anything interesting, I've changed the implicit breakpoint from main to kernel_init, so that a default debugging session starts there.


I've added a boring panic_fail function (similar to assert_fail) so that I could add an implicit breakpoint on it. This way a default debugging session will not only automatically stop at failed assertions, but also at any panic condition.","The default behaviour of the script should be to launch a debugger that is considered to be the  common denominator (i.e. if no gdb is installed other choices won't work anyway), please change -d to --debugger gdb.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,301,2017-05-08T12:00:57Z,2017-05-14T13:55:25Z,2017-05-14T13:55:25Z,MERGED,True,87,24,9,https://github.com/rafalcieslak,Minor debugging experience improvements,9,['accepted'],https://github.com/cahirwpz/mimiker/pull/301,https://github.com/cahirwpz,10,https://github.com/cahirwpz/mimiker/pull/301#issuecomment-301239002,"I've added a user_return label user before eret in user_exc_leave. When debugging user programs and/or syscalls, it is very convenient to place a tbreak on this label, to continue debugging the user application from the moment the current system call returns.


As our kernel main no longer does anything interesting, I've changed the implicit breakpoint from main to kernel_init, so that a default debugging session starts there.


I've added a boring panic_fail function (similar to assert_fail) so that I could add an implicit breakpoint on it. This way a default debugging session will not only automatically stop at failed assertions, but also at any panic condition.","@rafalcieslak Please fix bug mentioned in this post and the PR will be ready to merge. In described scenario launch script leaves simulator running in the background, so that it must be killed by hand.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,301,2017-05-08T12:00:57Z,2017-05-14T13:55:25Z,2017-05-14T13:55:25Z,MERGED,True,87,24,9,https://github.com/rafalcieslak,Minor debugging experience improvements,9,['accepted'],https://github.com/cahirwpz/mimiker/pull/301,https://github.com/rafalcieslak,11,https://github.com/cahirwpz/mimiker/pull/301#issuecomment-301246764,"I've added a user_return label user before eret in user_exc_leave. When debugging user programs and/or syscalls, it is very convenient to place a tbreak on this label, to continue debugging the user application from the moment the current system call returns.


As our kernel main no longer does anything interesting, I've changed the implicit breakpoint from main to kernel_init, so that a default debugging session starts there.


I've added a boring panic_fail function (similar to assert_fail) so that I could add an implicit breakpoint on it. This way a default debugging session will not only automatically stop at failed assertions, but also at any panic condition.","I've fixed the bug where the launch script would fail to terminate subprocesses.

However, I don't know how to solve the problem that debugging does not work with OVPsim and xterm. The reason for it is that xterm takes a very long time to start, because X is a synchronous protocol, so if your round-trip time to mimiker server is large, it adds up for every X request. Starting xterm may take many seconds, or even a minute or two! (Yeah, X-forwarding sucks.) OVPsim has a small (few seconds), unconfigurable timeout for the incoming connection, which we perform from within xterm. If xterm doesn't start in time, the connection arrives too late, and OVPsim gets super confused.
OTOH, qemu has no such limit, and thus debugging with qemu and xterm works completely fine for me. Same goes for OVPsim + nc/socat, as these open the connection immediately.
I can't come up with a simple solution to the OVPsim timeout! When starting xterm on mimiker server, we'd need first to (use a script to) open a connection and buffer it's output to some file (so that the connection is opened ASAP), then we would start xterm and wait for X-forwarding to initialize, then another script running within xterm would first open the file and dump its contents, then the first script would transfer the open socket to the second script, which would then continue the connection normally. But that's a lot of work (to workaround an OVPsim problem)!
I'd appreciate some ideas on how to deal with this issue.
Yet another reason why I prefer to run OVPsim locally - no latency.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,301,2017-05-08T12:00:57Z,2017-05-14T13:55:25Z,2017-05-14T13:55:25Z,MERGED,True,87,24,9,https://github.com/rafalcieslak,Minor debugging experience improvements,9,['accepted'],https://github.com/cahirwpz/mimiker/pull/301,https://github.com/cahirwpz,12,https://github.com/cahirwpz/mimiker/pull/301#issuecomment-301315026,"I've added a user_return label user before eret in user_exc_leave. When debugging user programs and/or syscalls, it is very convenient to place a tbreak on this label, to continue debugging the user application from the moment the current system call returns.


As our kernel main no longer does anything interesting, I've changed the implicit breakpoint from main to kernel_init, so that a default debugging session starts there.


I've added a boring panic_fail function (similar to assert_fail) so that I could add an implicit breakpoint on it. This way a default debugging session will not only automatically stop at failed assertions, but also at any panic condition.","I can't come up with a simple solution to the OVPsim timeout!

There's one and very simple solution - just use a terminal that doesn't take ~8 seconds to startup over SSH. urxvt does it in a blink of an eye. I've added another output handler.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,302,2017-05-08T13:11:09Z,2017-05-25T18:47:54Z,2017-05-25T18:47:54Z,CLOSED,False,40,22,5,https://github.com/rafalcieslak,Improved devfs_install,1,[],https://github.com/cahirwpz/mimiker/pull/302,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/302,"This branch adds an optional DEVFS_INSTALL_FLAG_NUMBERED flag for devfs_install, which allows installing multiple devices sharing the same name into /dev - they will be automatically numbered e.g. /dev/vga (== /dev/vga0), /dev/vga1, /dev/vga2, ... This removes the silly assumption that only the first device of a particular driver may expose a /dev interface.
I've also fixed a potential race condition in devfs_install.","This branch adds an optional DEVFS_INSTALL_FLAG_NUMBERED flag for devfs_install, which allows installing multiple devices sharing the same name into /dev - they will be automatically numbered e.g. /dev/vga (== /dev/vga0), /dev/vga1, /dev/vga2, ... This removes the silly assumption that only the first device of a particular driver may expose a /dev interface.
I've also fixed a potential race condition in devfs_install.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,302,2017-05-08T13:11:09Z,2017-05-25T18:47:54Z,2017-05-25T18:47:54Z,CLOSED,False,40,22,5,https://github.com/rafalcieslak,Improved devfs_install,1,[],https://github.com/cahirwpz/mimiker/pull/302,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/302#issuecomment-300098471,"This branch adds an optional DEVFS_INSTALL_FLAG_NUMBERED flag for devfs_install, which allows installing multiple devices sharing the same name into /dev - they will be automatically numbered e.g. /dev/vga (== /dev/vga0), /dev/vga1, /dev/vga2, ... This removes the silly assumption that only the first device of a particular driver may expose a /dev interface.
I've also fixed a potential race condition in devfs_install.","I've got completely different view on device naming scheme. Name and unit number of a device, according to my understanding of *BSD device drivers, comes from devclass structure. Each device is assigned devclass after it's created and device.nameunit is set to unique identifier (rtc0, video1, tty7, etc.) by calling devclass_add_device.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,302,2017-05-08T13:11:09Z,2017-05-25T18:47:54Z,2017-05-25T18:47:54Z,CLOSED,False,40,22,5,https://github.com/rafalcieslak,Improved devfs_install,1,[],https://github.com/cahirwpz/mimiker/pull/302,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/302#issuecomment-304091579,"This branch adds an optional DEVFS_INSTALL_FLAG_NUMBERED flag for devfs_install, which allows installing multiple devices sharing the same name into /dev - they will be automatically numbered e.g. /dev/vga (== /dev/vga0), /dev/vga1, /dev/vga2, ... This removes the silly assumption that only the first device of a particular driver may expose a /dev interface.
I've also fixed a potential race condition in devfs_install.","Obsoleted by #344. With addition of device classes (incl. device->d_nameunit field) and rewrite of devfs using (yet to be written) pseudo filesystem framework, we won't need this patch.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,303,2017-05-09T15:44:36Z,2017-05-17T20:01:18Z,2017-05-17T20:18:23Z,MERGED,True,118,2,13,https://github.com/MoloToha,Implementation of dup and dup2 syscalls,12,[],https://github.com/cahirwpz/mimiker/pull/303,https://github.com/MoloToha,1,https://github.com/cahirwpz/mimiker/pull/303,"Since I'm working on pipes, I have to implement dup and dup2 syscalls as well to be able to replace standard input and output with pipe ends.","Since I'm working on pipes, I have to implement dup and dup2 syscalls as well to be able to replace standard input and output with pipe ends.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,303,2017-05-09T15:44:36Z,2017-05-17T20:01:18Z,2017-05-17T20:18:23Z,MERGED,True,118,2,13,https://github.com/MoloToha,Implementation of dup and dup2 syscalls,12,[],https://github.com/cahirwpz/mimiker/pull/303,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/303#issuecomment-300801206,"Since I'm working on pipes, I have to implement dup and dup2 syscalls as well to be able to replace standard input and output with pipe ends.","Once you have syscalls working, a great way to test this feature in a user program would be to:

open some file with open as descriptor x
dup descriptor 1 (stdin) to  y
dup2 x into 1 (stdin)
scanf some data and verify that it matches the contents of file
restore original behavior by dup2-ing y into 1.

That would both test the system calls, and prove that they are capable of realizing one of their main uses.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,303,2017-05-09T15:44:36Z,2017-05-17T20:01:18Z,2017-05-17T20:18:23Z,MERGED,True,118,2,13,https://github.com/MoloToha,Implementation of dup and dup2 syscalls,12,[],https://github.com/cahirwpz/mimiker/pull/303,https://github.com/MoloToha,3,https://github.com/cahirwpz/mimiker/pull/303#issuecomment-301834555,"Since I'm working on pipes, I have to implement dup and dup2 syscalls as well to be able to replace standard input and output with pipe ends.","I've discovered a very strange issue while working with user space test -- scanf can be used only once, after that it does nothing (I tested that without dups, so it shouldn't be a problem with them)",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,303,2017-05-09T15:44:36Z,2017-05-17T20:01:18Z,2017-05-17T20:18:23Z,MERGED,True,118,2,13,https://github.com/MoloToha,Implementation of dup and dup2 syscalls,12,[],https://github.com/cahirwpz/mimiker/pull/303,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/303#issuecomment-302201775,"Since I'm working on pipes, I have to implement dup and dup2 syscalls as well to be able to replace standard input and output with pipe ends.","I've discovered a very strange issue while working with user space test -- scanf can be used only once, after that it does nothing (I tested that without dups, so it shouldn't be a problem with them)

@MoloToha Please create an issue in the issue tracking system with bug label. Describe the problem and show a program that triggers unwanted behaviour.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,304,2017-05-11T12:44:30Z,2017-05-13T10:12:10Z,2017-05-13T10:19:59Z,MERGED,True,9,4,1,https://github.com/rafalcieslak,Dealing with non-ascii output when running automatic tests,5,[],https://github.com/cahirwpz/mimiker/pull/304,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/304,"If the kernel prints out any non-ascii character, the run_tests.py script isn't useful as it is unable to decode binary data. This branch proposes a fix: In case ascii decoding fails for any reason, the output is still dumped, encoded as base64, so that the developer may investigate what exactly is wrong with it.
I don't expect this feature to be useful when working on a local machine, but will help us troubleshoot problems on Travis. It should help @czapiga investigate the problems at #253.","If the kernel prints out any non-ascii character, the run_tests.py script isn't useful as it is unable to decode binary data. This branch proposes a fix: In case ascii decoding fails for any reason, the output is still dumped, encoded as base64, so that the developer may investigate what exactly is wrong with it.
I don't expect this feature to be useful when working on a local machine, but will help us troubleshoot problems on Travis. It should help @czapiga investigate the problems at #253.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,304,2017-05-11T12:44:30Z,2017-05-13T10:12:10Z,2017-05-13T10:19:59Z,MERGED,True,9,4,1,https://github.com/rafalcieslak,Dealing with non-ascii output when running automatic tests,5,[],https://github.com/cahirwpz/mimiker/pull/304,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/304#issuecomment-300790647,"If the kernel prints out any non-ascii character, the run_tests.py script isn't useful as it is unable to decode binary data. This branch proposes a fix: In case ascii decoding fails for any reason, the output is still dumped, encoded as base64, so that the developer may investigate what exactly is wrong with it.
I don't expect this feature to be useful when working on a local machine, but will help us troubleshoot problems on Travis. It should help @czapiga investigate the problems at #253.",This test result shows the feature in action.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,304,2017-05-11T12:44:30Z,2017-05-13T10:12:10Z,2017-05-13T10:19:59Z,MERGED,True,9,4,1,https://github.com/rafalcieslak,Dealing with non-ascii output when running automatic tests,5,[],https://github.com/cahirwpz/mimiker/pull/304,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/304#issuecomment-300793627,"If the kernel prints out any non-ascii character, the run_tests.py script isn't useful as it is unable to decode binary data. This branch proposes a fix: In case ascii decoding fails for any reason, the output is still dumped, encoded as base64, so that the developer may investigate what exactly is wrong with it.
I don't expect this feature to be useful when working on a local machine, but will help us troubleshoot problems on Travis. It should help @czapiga investigate the problems at #253.","I guess it'd be much better if you could replace only non-ascii character by '<%2x>' % ord(c), if that can be done easily. Right now, one offending character renders output totally unreadable without decoding base64 string in external tool.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,304,2017-05-11T12:44:30Z,2017-05-13T10:12:10Z,2017-05-13T10:19:59Z,MERGED,True,9,4,1,https://github.com/rafalcieslak,Dealing with non-ascii output when running automatic tests,5,[],https://github.com/cahirwpz/mimiker/pull/304,https://github.com/rafalcieslak,4,https://github.com/cahirwpz/mimiker/pull/304#issuecomment-300799982,"If the kernel prints out any non-ascii character, the run_tests.py script isn't useful as it is unable to decode binary data. This branch proposes a fix: In case ascii decoding fails for any reason, the output is still dumped, encoded as base64, so that the developer may investigate what exactly is wrong with it.
I don't expect this feature to be useful when working on a local machine, but will help us troubleshoot problems on Travis. It should help @czapiga investigate the problems at #253.","I don't know... I don't want this output to be readable. A non-ascii character is a highly unusual situation that signifies a major bug. Ideally we'd never want to use this feature. The purpose of base64 encoding isn't to ""display"" the output, it's to make sure we can easily download 1:1 exact binary data from Travis. Decoding the string is simple, base64 -d > binary.file, and will produce the exact unmodified output, to be examined with hexedit or any similar tool. If I substituted some bytes with ""<%2x>"", it would be difficult to grep-search for similar sequence in source/binary files. Also the values of these bytes are usually irrelevant in the output, seeing the ord(c) in output wouldn't help to understand the issue.
Note that this feature shouldn't be of much use when working on a local machine, where you can simply run ./launch to get the exact output. This is why I don't write the data into a binary file - the premise of this branch is to make the data retrievable from Travis, where such file would be useless.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,304,2017-05-11T12:44:30Z,2017-05-13T10:12:10Z,2017-05-13T10:19:59Z,MERGED,True,9,4,1,https://github.com/rafalcieslak,Dealing with non-ascii output when running automatic tests,5,[],https://github.com/cahirwpz/mimiker/pull/304,https://github.com/rafalcieslak,5,https://github.com/cahirwpz/mimiker/pull/304#issuecomment-301207660,"If the kernel prints out any non-ascii character, the run_tests.py script isn't useful as it is unable to decode binary data. This branch proposes a fix: In case ascii decoding fails for any reason, the output is still dumped, encoded as base64, so that the developer may investigate what exactly is wrong with it.
I don't expect this feature to be useful when working on a local machine, but will help us troubleshoot problems on Travis. It should help @czapiga investigate the problems at #253.",#306 also seems to be affected by this issue.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,304,2017-05-11T12:44:30Z,2017-05-13T10:12:10Z,2017-05-13T10:19:59Z,MERGED,True,9,4,1,https://github.com/rafalcieslak,Dealing with non-ascii output when running automatic tests,5,[],https://github.com/cahirwpz/mimiker/pull/304,https://github.com/laky55555,6,https://github.com/cahirwpz/mimiker/pull/304#issuecomment-301209307,"If the kernel prints out any non-ascii character, the run_tests.py script isn't useful as it is unable to decode binary data. This branch proposes a fix: In case ascii decoding fails for any reason, the output is still dumped, encoded as base64, so that the developer may investigate what exactly is wrong with it.
I don't expect this feature to be useful when working on a local machine, but will help us troubleshoot problems on Travis. It should help @czapiga investigate the problems at #253.","In #306 Travis says "" 'utf-8' codec can't decode"". Should I try to use this run_tests.py on travis to get full output?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,304,2017-05-11T12:44:30Z,2017-05-13T10:12:10Z,2017-05-13T10:19:59Z,MERGED,True,9,4,1,https://github.com/rafalcieslak,Dealing with non-ascii output when running automatic tests,5,[],https://github.com/cahirwpz/mimiker/pull/304,https://github.com/rafalcieslak,7,https://github.com/cahirwpz/mimiker/pull/304#issuecomment-301239161,"If the kernel prints out any non-ascii character, the run_tests.py script isn't useful as it is unable to decode binary data. This branch proposes a fix: In case ascii decoding fails for any reason, the output is still dumped, encoded as base64, so that the developer may investigate what exactly is wrong with it.
I don't expect this feature to be useful when working on a local machine, but will help us troubleshoot problems on Travis. It should help @czapiga investigate the problems at #253.","Using your solution, some invalid characters seem to be skipped... So binary output from kernel may be unnoticed.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,305,2017-05-11T21:12:13Z,2017-05-22T07:23:22Z,2017-05-22T07:23:22Z,MERGED,True,99,0,1,https://github.com/czapiga,Malloc multithreaded tests,5,['bug'],https://github.com/cahirwpz/mimiker/pull/305,https://github.com/czapiga,1,https://github.com/cahirwpz/mimiker/pull/305,I think I'm just missing rand() function,I think I'm just missing rand() function,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,305,2017-05-11T21:12:13Z,2017-05-22T07:23:22Z,2017-05-22T07:23:22Z,MERGED,True,99,0,1,https://github.com/czapiga,Malloc multithreaded tests,5,['bug'],https://github.com/cahirwpz/mimiker/pull/305,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/305#issuecomment-302865278,I think I'm just missing rand() function,"If you need to limit klog verboseness please use function below:
unsigned klog_setmask(unsigned newmask);",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,305,2017-05-11T21:12:13Z,2017-05-22T07:23:22Z,2017-05-22T07:23:22Z,MERGED,True,99,0,1,https://github.com/czapiga,Malloc multithreaded tests,5,['bug'],https://github.com/cahirwpz/mimiker/pull/305,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/305#issuecomment-302865348,I think I'm just missing rand() function,"Also... please note I recently introduced SCOPED_MTX_LOCK and WITH_MTX_LOCK constructs, which you should make use of if that improves code readability.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,305,2017-05-11T21:12:13Z,2017-05-22T07:23:22Z,2017-05-22T07:23:22Z,MERGED,True,99,0,1,https://github.com/czapiga,Malloc multithreaded tests,5,['bug'],https://github.com/cahirwpz/mimiker/pull/305,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/305#issuecomment-302866901,I think I'm just missing rand() function,"These are good tests! I was able to immediately trigger some bugs...
After increasing PTRS_ARRAY_SIZE to 1000:
[thread] Thread 'Malloc test thread' {0x80070850} has been created.
[thread] Joining 'main' {0x805ea230} with 'Malloc test thread' {0x805ea428}
[sleepq] Sleep 'main' thread on 'td_waitcv' (0x805ea434)
Assertion ""mtx_owned(m)"" at [mutex.c:34] failed!

... and to 10000:
[thread] Thread 'Malloc test thread' {0x80070850} has been created.
[thread] Joining 'main' {0x805ea230} with 'Malloc test thread' {0x805ea428}
[sleepq] Sleep 'main' thread on 'td_waitcv' (0x805ea434)
Assertion ""current->ma_magic == 0xC0DECAFE"" at [malloc.c:185] failed!

Please play with the tests for a little bit longer and try identify even more bugs (and possibly fix them).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,305,2017-05-11T21:12:13Z,2017-05-22T07:23:22Z,2017-05-22T07:23:22Z,MERGED,True,99,0,1,https://github.com/czapiga,Malloc multithreaded tests,5,['bug'],https://github.com/cahirwpz/mimiker/pull/305,https://github.com/cahirwpz,5,https://github.com/cahirwpz/mimiker/pull/305#issuecomment-303019633,I think I'm just missing rand() function,I moved the task of fixing the bugs to #338.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,306,2017-05-12T23:15:32Z,2017-05-13T16:06:35Z,2017-05-14T12:55:38Z,MERGED,True,334,113,25,https://github.com/laky55555,Klog tests,15,[],https://github.com/cahirwpz/mimiker/pull/306,https://github.com/laky55555,1,https://github.com/cahirwpz/mimiker/pull/306,"Transfered all logs that are possible to klog.
Logs that are used before initialization of locking mechanisms are left.","Transfered all logs that are possible to klog.
Logs that are used before initialization of locking mechanisms are left.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,309,2017-05-13T16:22:37Z,2017-05-14T12:55:02Z,2017-05-14T12:55:33Z,MERGED,True,46,24,3,https://github.com/coodie,Vfs lookup mount fix,5,['bug'],https://github.com/cahirwpz/mimiker/pull/309,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/309,"In current version of vfs_lookup there was a 'bug' or more likely a misunderstanding with how lookup is supposed to work. The bug is about performing vfs_lookup where the leaf (last directory on path) has something mounted under it, in this case we want to return the mounted child.
I have looked up at FreeBSD implementation to have better understanding and possibly ease implementation, but it is incredibly difficult to read because of all the cases it covers + path caching.
Here is vfs_lookup counterpart in FreeBSD:
http://bxr.su/FreeBSD/sys/kern/vfs_lookup.c#124
Note that namei procedure calls lookup in few places, while lookup performs mounting fix in this line:
http://bxr.su/FreeBSD/sys/kern/vfs_lookup.c#789
There is no fixing a mounted name before we enter the lookup procedure, but if you look at it's starting argument http://bxr.su/FreeBSD/sys/sys/namei.h#72, it is assigned in http://bxr.su/FreeBSD/sys/kern/vfs_lookup.c#514, meaning that the vnode we pass to lookup is already the deepest mounted subchild. In our case we have only one lookup function getting full path, so we have to fix that assumption before main lookup loop.
Our implementation still lacks a lot of features and It doesn't have to perfect yet. Please don't waste too much time discussing on this simple change, #268 depends on this.","In current version of vfs_lookup there was a 'bug' or more likely a misunderstanding with how lookup is supposed to work. The bug is about performing vfs_lookup where the leaf (last directory on path) has something mounted under it, in this case we want to return the mounted child.
I have looked up at FreeBSD implementation to have better understanding and possibly ease implementation, but it is incredibly difficult to read because of all the cases it covers + path caching.
Here is vfs_lookup counterpart in FreeBSD:
http://bxr.su/FreeBSD/sys/kern/vfs_lookup.c#124
Note that namei procedure calls lookup in few places, while lookup performs mounting fix in this line:
http://bxr.su/FreeBSD/sys/kern/vfs_lookup.c#789
There is no fixing a mounted name before we enter the lookup procedure, but if you look at it's starting argument http://bxr.su/FreeBSD/sys/sys/namei.h#72, it is assigned in http://bxr.su/FreeBSD/sys/kern/vfs_lookup.c#514, meaning that the vnode we pass to lookup is already the deepest mounted subchild. In our case we have only one lookup function getting full path, so we have to fix that assumption before main lookup loop.
Our implementation still lacks a lot of features and It doesn't have to perfect yet. Please don't waste too much time discussing on this simple change, #268 depends on this.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,309,2017-05-13T16:22:37Z,2017-05-14T12:55:02Z,2017-05-14T12:55:33Z,MERGED,True,46,24,3,https://github.com/coodie,Vfs lookup mount fix,5,['bug'],https://github.com/cahirwpz/mimiker/pull/309,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/309#issuecomment-301259183,"In current version of vfs_lookup there was a 'bug' or more likely a misunderstanding with how lookup is supposed to work. The bug is about performing vfs_lookup where the leaf (last directory on path) has something mounted under it, in this case we want to return the mounted child.
I have looked up at FreeBSD implementation to have better understanding and possibly ease implementation, but it is incredibly difficult to read because of all the cases it covers + path caching.
Here is vfs_lookup counterpart in FreeBSD:
http://bxr.su/FreeBSD/sys/kern/vfs_lookup.c#124
Note that namei procedure calls lookup in few places, while lookup performs mounting fix in this line:
http://bxr.su/FreeBSD/sys/kern/vfs_lookup.c#789
There is no fixing a mounted name before we enter the lookup procedure, but if you look at it's starting argument http://bxr.su/FreeBSD/sys/sys/namei.h#72, it is assigned in http://bxr.su/FreeBSD/sys/kern/vfs_lookup.c#514, meaning that the vnode we pass to lookup is already the deepest mounted subchild. In our case we have only one lookup function getting full path, so we have to fix that assumption before main lookup loop.
Our implementation still lacks a lot of features and It doesn't have to perfect yet. Please don't waste too much time discussing on this simple change, #268 depends on this.","I confirm this branch fixes an important problem. Back when I provided the original implementation of out vfs_lookup I didn't realize that e.g. request for /dev should return the root of devfs, not the /dev in initrd. Therefore I consider this fix valid.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,309,2017-05-13T16:22:37Z,2017-05-14T12:55:02Z,2017-05-14T12:55:33Z,MERGED,True,46,24,3,https://github.com/coodie,Vfs lookup mount fix,5,['bug'],https://github.com/cahirwpz/mimiker/pull/309,https://github.com/coodie,3,https://github.com/cahirwpz/mimiker/pull/309#issuecomment-301259560,"In current version of vfs_lookup there was a 'bug' or more likely a misunderstanding with how lookup is supposed to work. The bug is about performing vfs_lookup where the leaf (last directory on path) has something mounted under it, in this case we want to return the mounted child.
I have looked up at FreeBSD implementation to have better understanding and possibly ease implementation, but it is incredibly difficult to read because of all the cases it covers + path caching.
Here is vfs_lookup counterpart in FreeBSD:
http://bxr.su/FreeBSD/sys/kern/vfs_lookup.c#124
Note that namei procedure calls lookup in few places, while lookup performs mounting fix in this line:
http://bxr.su/FreeBSD/sys/kern/vfs_lookup.c#789
There is no fixing a mounted name before we enter the lookup procedure, but if you look at it's starting argument http://bxr.su/FreeBSD/sys/sys/namei.h#72, it is assigned in http://bxr.su/FreeBSD/sys/kern/vfs_lookup.c#514, meaning that the vnode we pass to lookup is already the deepest mounted subchild. In our case we have only one lookup function getting full path, so we have to fix that assumption before main lookup loop.
Our implementation still lacks a lot of features and It doesn't have to perfect yet. Please don't waste too much time discussing on this simple change, #268 depends on this.","Travis build is failing, @rafalcieslak can you see why?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,309,2017-05-13T16:22:37Z,2017-05-14T12:55:02Z,2017-05-14T12:55:33Z,MERGED,True,46,24,3,https://github.com/coodie,Vfs lookup mount fix,5,['bug'],https://github.com/cahirwpz/mimiker/pull/309,https://github.com/rafalcieslak,4,https://github.com/cahirwpz/mimiker/pull/309#issuecomment-301260512,"In current version of vfs_lookup there was a 'bug' or more likely a misunderstanding with how lookup is supposed to work. The bug is about performing vfs_lookup where the leaf (last directory on path) has something mounted under it, in this case we want to return the mounted child.
I have looked up at FreeBSD implementation to have better understanding and possibly ease implementation, but it is incredibly difficult to read because of all the cases it covers + path caching.
Here is vfs_lookup counterpart in FreeBSD:
http://bxr.su/FreeBSD/sys/kern/vfs_lookup.c#124
Note that namei procedure calls lookup in few places, while lookup performs mounting fix in this line:
http://bxr.su/FreeBSD/sys/kern/vfs_lookup.c#789
There is no fixing a mounted name before we enter the lookup procedure, but if you look at it's starting argument http://bxr.su/FreeBSD/sys/sys/namei.h#72, it is assigned in http://bxr.su/FreeBSD/sys/kern/vfs_lookup.c#514, meaning that the vnode we pass to lookup is already the deepest mounted subchild. In our case we have only one lookup function getting full path, so we have to fix that assumption before main lookup loop.
Our implementation still lacks a lot of features and It doesn't have to perfect yet. Please don't waste too much time discussing on this simple change, #268 depends on this.","It is clear to me that the timeout hit while kernel was still printing out something. The recently merged klog tests are VERY verbose, and printing output takes a lot of time... we should stop doing that, we really don't need 5k lines of output from tests.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,313,2017-05-14T21:24:37Z,2017-05-30T14:06:33Z,2017-05-31T19:56:21Z,CLOSED,False,292,64,6,https://github.com/cahirwpz,Bus methods to setup and teardown interrupts,31,[],https://github.com/cahirwpz/mimiker/pull/313,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/313,"This PR introduces bus_intr_setup and bus_intr_teardown functions and shows how they are implemented for root device. The root device is top-level device where autoconfiguration process starts. Each platform defines its own rootdev. In Malta platform case, rootdev_attach asks gt_pci to discover its children.
I'm still having some doubts if clock interrupt handler should be registered through rootdev. I don't like the fact that core kernel functionality (i.e. clock that drives scheduler) requires driver framework to be in place.
Next step would be to implement intr_setup and intr_teardown for gt_pci. I'll try to find out if I can quickly add proper ns16550 driver for cbus_uart.
In subsequent PRs device classes and resource allocation mechanism need to be addressed.","This PR introduces bus_intr_setup and bus_intr_teardown functions and shows how they are implemented for root device. The root device is top-level device where autoconfiguration process starts. Each platform defines its own rootdev. In Malta platform case, rootdev_attach asks gt_pci to discover its children.
I'm still having some doubts if clock interrupt handler should be registered through rootdev. I don't like the fact that core kernel functionality (i.e. clock that drives scheduler) requires driver framework to be in place.
Next step would be to implement intr_setup and intr_teardown for gt_pci. I'll try to find out if I can quickly add proper ns16550 driver for cbus_uart.
In subsequent PRs device classes and resource allocation mechanism need to be addressed.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,313,2017-05-14T21:24:37Z,2017-05-30T14:06:33Z,2017-05-31T19:56:21Z,CLOSED,False,292,64,6,https://github.com/cahirwpz,Bus methods to setup and teardown interrupts,31,[],https://github.com/cahirwpz/mimiker/pull/313,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/313#issuecomment-302403127,"This PR introduces bus_intr_setup and bus_intr_teardown functions and shows how they are implemented for root device. The root device is top-level device where autoconfiguration process starts. Each platform defines its own rootdev. In Malta platform case, rootdev_attach asks gt_pci to discover its children.
I'm still having some doubts if clock interrupt handler should be registered through rootdev. I don't like the fact that core kernel functionality (i.e. clock that drives scheduler) requires driver framework to be in place.
Next step would be to implement intr_setup and intr_teardown for gt_pci. I'll try to find out if I can quickly add proper ns16550 driver for cbus_uart.
In subsequent PRs device classes and resource allocation mechanism need to be addressed.","I have only reviewed the generic bus-interrupt management code and not the details of hardware interaction. These changes look good to me. The interface seems just about right, and I have no remarks.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,313,2017-05-14T21:24:37Z,2017-05-30T14:06:33Z,2017-05-31T19:56:21Z,CLOSED,False,292,64,6,https://github.com/cahirwpz,Bus methods to setup and teardown interrupts,31,[],https://github.com/cahirwpz/mimiker/pull/313,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/313#issuecomment-304889066,"This PR introduces bus_intr_setup and bus_intr_teardown functions and shows how they are implemented for root device. The root device is top-level device where autoconfiguration process starts. Each platform defines its own rootdev. In Malta platform case, rootdev_attach asks gt_pci to discover its children.
I'm still having some doubts if clock interrupt handler should be registered through rootdev. I don't like the fact that core kernel functionality (i.e. clock that drives scheduler) requires driver framework to be in place.
Next step would be to implement intr_setup and intr_teardown for gt_pci. I'll try to find out if I can quickly add proper ns16550 driver for cbus_uart.
In subsequent PRs device classes and resource allocation mechanism need to be addressed.",Implemented and merged – an example of usage will follow.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,315,2017-05-16T01:40:58Z,2017-05-18T11:04:11Z,2017-05-23T12:47:44Z,MERGED,True,224,115,30,https://github.com/dyniec,sysinit,23,[],https://github.com/cahirwpz/mimiker/pull/315,https://github.com/dyniec,1,https://github.com/cahirwpz/mimiker/pull/315,"Prototype for sysinit #294. Order is built from the end.
It's definitely not ready to merge. At this moment it works in place, but requires O(n*m) (where n-number of modules, m- number of relations) time. Also it doesn't verify if there's a cycle. It will be skipped if occurs. Soon I will move tests to separate file, and integrate inits into this.
It turns out that array literals can't be passed directly to macros.","Prototype for sysinit #294. Order is built from the end.
It's definitely not ready to merge. At this moment it works in place, but requires O(n*m) (where n-number of modules, m- number of relations) time. Also it doesn't verify if there's a cycle. It will be skipped if occurs. Soon I will move tests to separate file, and integrate inits into this.
It turns out that array literals can't be passed directly to macros.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,315,2017-05-16T01:40:58Z,2017-05-18T11:04:11Z,2017-05-23T12:47:44Z,MERGED,True,224,115,30,https://github.com/dyniec,sysinit,23,[],https://github.com/cahirwpz/mimiker/pull/315,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/315#issuecomment-301743762,"Prototype for sysinit #294. Order is built from the end.
It's definitely not ready to merge. At this moment it works in place, but requires O(n*m) (where n-number of modules, m- number of relations) time. Also it doesn't verify if there's a cycle. It will be skipped if occurs. Soon I will move tests to separate file, and integrate inits into this.
It turns out that array literals can't be passed directly to macros.","It turns out that array literals can't be passed directly to macros.

Yeah, the preprocessor does not consider {} brackets as parenthesis, so by writing:
SYSINIT_ADD(last, dummy, {""mid1"", ""mid2"", NULL});
the preprocessor would think you're passing 5 arguments to the SYSINIT_ADD macro. The usual workaround is to use a helper macro like this:
#define DEPS(...) (char*[]){__VA_ARGS__}
then you can write:
SYSINIT_ADD(last, dummy, DEPS(""mid1"", ""mid2"", NULL));
and everything is fine!
You may also move the (char*[]) cast to inside SYSINIT_ADD macro, which would turn the DEPS macro into a universal ""array initializer"" helper.",True,{'THUMBS_UP': ['https://github.com/dyniec']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,315,2017-05-16T01:40:58Z,2017-05-18T11:04:11Z,2017-05-23T12:47:44Z,MERGED,True,224,115,30,https://github.com/dyniec,sysinit,23,[],https://github.com/cahirwpz/mimiker/pull/315,https://github.com/dyniec,3,https://github.com/cahirwpz/mimiker/pull/315#issuecomment-301933156,"Prototype for sysinit #294. Order is built from the end.
It's definitely not ready to merge. At this moment it works in place, but requires O(n*m) (where n-number of modules, m- number of relations) time. Also it doesn't verify if there's a cycle. It will be skipped if occurs. Soon I will move tests to separate file, and integrate inits into this.
It turns out that array literals can't be passed directly to macros.","Turns out there's program dot in graphviz package which can easily create plot graphs.
It's much easier to comprehend them than grepping through sources.

compared to
mips/clock.c:SYSINIT_ADD(mips_clock, mips_clock_init, DEPS(""callout"", ""sched""));
mips/pmap.c:SYSINIT_ADD(pmap, pmap_init, NODEPS);
sys/callout.c:SYSINIT_ADD(callout, callout_init, NODEPS);
sys/device.c:SYSINIT_ADD(driver, driver_init, NODEPS);
sys/file.c:SYSINIT_ADD(file, file_init, DEPS(""vfs"", ""vnode""));
sys/filedesc.c:SYSINIT_ADD(filedesc, fd_init, DEPS(""file""));
sys/initrd.c:SYSINIT_ADD(ramdisk, ramdisk_init, DEPS(""vm_map"", ""vnode""));
sys/proc.c:SYSINIT_ADD(proc, proc_init, NODEPS);
sys/sched.c:SYSINIT_ADD(sched, sched_init, DEPS(""callout""));
sys/vfs.c:SYSINIT_ADD(vfs, vfs_init, DEPS(""vnode""));
sys/vfs_vnode.c:SYSINIT_ADD(vnode, vnode_init, NODEPS);
sys/vm_map.c:SYSINIT_ADD(vm_map, vm_map_init, DEPS(""pmap"", ""vm_object""));
sys/vm_object.c:SYSINIT_ADD(vm_object, vm_object_init, DEPS(""pmap""));


I've already created python script that generates graph description from sources. If somebody considers it usefull I can upload it.",True,"{'HOORAY': ['https://github.com/coodie'], 'HEART': ['https://github.com/rafalcieslak', 'https://github.com/cahirwpz']}"
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,315,2017-05-16T01:40:58Z,2017-05-18T11:04:11Z,2017-05-23T12:47:44Z,MERGED,True,224,115,30,https://github.com/dyniec,sysinit,23,[],https://github.com/cahirwpz/mimiker/pull/315,https://github.com/rafalcieslak,4,https://github.com/cahirwpz/mimiker/pull/315#issuecomment-302092871,"Prototype for sysinit #294. Order is built from the end.
It's definitely not ready to merge. At this moment it works in place, but requires O(n*m) (where n-number of modules, m- number of relations) time. Also it doesn't verify if there's a cycle. It will be skipped if occurs. Soon I will move tests to separate file, and integrate inits into this.
It turns out that array literals can't be passed directly to macros.","We need every piece of documentation we can get, so it would be awesome to have such script ready to use!
By the way, note that we prefer /* C-style comments */ over // C++-style comments.
As a side note, thanks to your nice graph, I noticed that maybe we should move contents of ramdisk_init into initrd_init? This way ramdisk initialization would happen as a filesystem init function, as a part of vfs_init and thus ramdisk would not need a sysinit entry. (Although this change wouldn't need to happen as a part of this branch.) @coodie, you have a better idea on the order ramdisk initializes things, would that be a reasonable option?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,315,2017-05-16T01:40:58Z,2017-05-18T11:04:11Z,2017-05-23T12:47:44Z,MERGED,True,224,115,30,https://github.com/dyniec,sysinit,23,[],https://github.com/cahirwpz/mimiker/pull/315,https://github.com/cahirwpz,5,https://github.com/cahirwpz/mimiker/pull/315#issuecomment-302370299,"Prototype for sysinit #294. Order is built from the end.
It's definitely not ready to merge. At this moment it works in place, but requires O(n*m) (where n-number of modules, m- number of relations) time. Also it doesn't verify if there's a cycle. It will be skipped if occurs. Soon I will move tests to separate file, and integrate inits into this.
It turns out that array literals can't be passed directly to macros.",IMO the pull request is ready to be merged. Please open another PR where you will add the script (script/show-sysinit.py) to produce the graph visualisation of system initialization process.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,316,2017-05-16T19:29:37Z,2017-06-09T19:29:39Z,2017-06-09T21:06:29Z,CLOSED,False,380,41,8,https://github.com/cahirwpz,getdirentries continuation,57,['WiP'],https://github.com/cahirwpz/mimiker/pull/316,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/316,This PR is a follow up for #268. It's main purpose is to split the change into smaller pieces and merge them individually. In the process we will identify possible improvements in various kernel interfaces. One of them was proposed in issue #314.,This PR is a follow up for #268. It's main purpose is to split the change into smaller pieces and merge them individually. In the process we will identify possible improvements in various kernel interfaces. One of them was proposed in issue #314.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,316,2017-05-16T19:29:37Z,2017-06-09T19:29:39Z,2017-06-09T21:06:29Z,CLOSED,False,380,41,8,https://github.com/cahirwpz,getdirentries continuation,57,['WiP'],https://github.com/cahirwpz/mimiker/pull/316,https://github.com/coodie,2,https://github.com/cahirwpz/mimiker/pull/316#issuecomment-301904775,This PR is a follow up for #268. It's main purpose is to split the change into smaller pieces and merge them individually. In the process we will identify possible improvements in various kernel interfaces. One of them was proposed in issue #314.,"I have one idea concerning direntries, I suspect that in future we will introduce few small filesystems, and in order to make them complete and usable in user space, readdir will be necessary to work with all of them. I guess it would be good idea to implement 'default' readdir (like default open vnode_open_generic, for example). Readdir is pretty complicated to write and there are many details you have to know in order to write it correctly, so I think making default readdir will save a lot of time in future, even if it will be very inefficient for most of file systems.
/dev/vga might be a good start to see how to implement first default readdir operation.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,316,2017-05-16T19:29:37Z,2017-06-09T19:29:39Z,2017-06-09T21:06:29Z,CLOSED,False,380,41,8,https://github.com/cahirwpz,getdirentries continuation,57,['WiP'],https://github.com/cahirwpz/mimiker/pull/316,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/316#issuecomment-301912142,This PR is a follow up for #268. It's main purpose is to split the change into smaller pieces and merge them individually. In the process we will identify possible improvements in various kernel interfaces. One of them was proposed in issue #314.,"I conform that initial value of memory pointed by basep is not relevant, at least for my installation of FreeBSD 11.0. I used find_root program to test it.  Moreover getdirentries(2) manual page clearly states that (in comparison to Linux manual page):

The getdirentries() system call writes the position of the block read into the location pointed to by basep.  Alternatively, the current position pointer may be set and retrieved by lseek(2).	 The current position pointer should only be set to a value returned by lseek(2), a value returned in the location pointed to by basep or zero.

The values written into basep under FreeBSD make quite a lot of sense – seems that they're an offset from the beginning of dirent array in kernel space.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,316,2017-05-16T19:29:37Z,2017-06-09T19:29:39Z,2017-06-09T21:06:29Z,CLOSED,False,380,41,8,https://github.com/cahirwpz,getdirentries continuation,57,['WiP'],https://github.com/cahirwpz/mimiker/pull/316,https://github.com/coodie,4,https://github.com/cahirwpz/mimiker/pull/316#issuecomment-301918667,This PR is a follow up for #268. It's main purpose is to split the change into smaller pieces and merge them individually. In the process we will identify possible improvements in various kernel interfaces. One of them was proposed in issue #314.,"This means that in case of directory file descriptors we could store pointer to recently read directory entry. T think that's the purpose so that you can still let the user have that flexibility of reading from given point while maintaining ease of implementation, because now the offset represents anything you want (offset in the buffer, pointer to last read element on the list, etc.).
While there is nothing wrong with my implementation, because it's up to me how I use the offset argument. I think more generalized assumption about the offset will make implementation of initrd readdir easier.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,316,2017-05-16T19:29:37Z,2017-06-09T19:29:39Z,2017-06-09T21:06:29Z,CLOSED,False,380,41,8,https://github.com/cahirwpz,getdirentries continuation,57,['WiP'],https://github.com/cahirwpz/mimiker/pull/316,https://github.com/cahirwpz,5,https://github.com/cahirwpz/mimiker/pull/316#issuecomment-302231125,This PR is a follow up for #268. It's main purpose is to split the change into smaller pieces and merge them individually. In the process we will identify possible improvements in various kernel interfaces. One of them was proposed in issue #314.,"[...] I think making default readdir will save a lot of time in future, even if it will be very inefficient for most of file systems.
/dev/vga might be a good start to see how to implement first default readdir operation.

That's a great idea! If there's an easy way to achieve it, please do so.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,316,2017-05-16T19:29:37Z,2017-06-09T19:29:39Z,2017-06-09T21:06:29Z,CLOSED,False,380,41,8,https://github.com/cahirwpz,getdirentries continuation,57,['WiP'],https://github.com/cahirwpz/mimiker/pull/316,https://github.com/cahirwpz,6,https://github.com/cahirwpz/mimiker/pull/316#issuecomment-307479247,This PR is a follow up for #268. It's main purpose is to split the change into smaller pieces and merge them individually. In the process we will identify possible improvements in various kernel interfaces. One of them was proposed in issue #314.,Obsoleted by #375.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,317,2017-05-16T21:45:28Z,2017-05-16T21:45:56Z,2017-05-17T15:03:36Z,MERGED,True,50,0,3,https://github.com/cahirwpz,List directory recursively,53,[],https://github.com/cahirwpz/mimiker/pull/317,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/317,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,318,2017-05-16T21:49:06Z,2017-05-17T02:43:42Z,2017-05-17T15:03:36Z,MERGED,True,50,0,3,https://github.com/cahirwpz,List directory recursively,53,[],https://github.com/cahirwpz/mimiker/pull/318,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/318,"@coodie Please merge with master. I tried to do it myself, but then commit ownership was transferred to me.","@coodie Please merge with master. I tried to do it myself, but then commit ownership was transferred to me.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,319,2017-05-17T15:02:10Z,2017-05-17T19:01:49Z,2017-05-17T19:23:43Z,MERGED,True,57,8,4,https://github.com/cahirwpz,Import pseudo-random number generator from *BSD,2,[],https://github.com/cahirwpz/mimiker/pull/319,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/319,"@czapiga Is that would you would like to have to finish #305 ?
@rafalcieslak I guess we can replace rand from ktest.c with this PRNG. Should I do it?","@czapiga Is that would you would like to have to finish #305 ?
@rafalcieslak I guess we can replace rand from ktest.c with this PRNG. Should I do it?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,319,2017-05-17T15:02:10Z,2017-05-17T19:01:49Z,2017-05-17T19:23:43Z,MERGED,True,57,8,4,https://github.com/cahirwpz,Import pseudo-random number generator from *BSD,2,[],https://github.com/cahirwpz/mimiker/pull/319,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/319#issuecomment-302147687,"@czapiga Is that would you would like to have to finish #305 ?
@rafalcieslak I guess we can replace rand from ktest.c with this PRNG. Should I do it?",Looks good. Go ahead.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,320,2017-05-17T15:43:18Z,2017-05-18T15:27:37Z,2017-05-18T15:28:03Z,CLOSED,False,46,3,2,https://github.com/cahirwpz,High resolution timer,1,[],https://github.com/cahirwpz/mimiker/pull/320,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/320,"To increase the resolution of kernel clock we should probably migrate from realtime_t to timeval_t. Firstly hardware clock in mips/clock.c should be rewritten to maintain timeval_t time, then sys/clock.c should follow. @czapiga After that's done you can continue with #253.","To increase the resolution of kernel clock we should probably migrate from realtime_t to timeval_t. Firstly hardware clock in mips/clock.c should be rewritten to maintain timeval_t time, then sys/clock.c should follow. @czapiga After that's done you can continue with #253.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,320,2017-05-17T15:43:18Z,2017-05-18T15:27:37Z,2017-05-18T15:28:03Z,CLOSED,False,46,3,2,https://github.com/cahirwpz,High resolution timer,1,[],https://github.com/cahirwpz/mimiker/pull/320,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/320#issuecomment-302440012,"To increase the resolution of kernel clock we should probably migrate from realtime_t to timeval_t. Firstly hardware clock in mips/clock.c should be rewritten to maintain timeval_t time, then sys/clock.c should follow. @czapiga After that's done you can continue with #253.",Moved to #327.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,322,2017-05-17T23:59:07Z,2017-05-18T06:12:34Z,2017-05-18T06:12:34Z,MERGED,True,1,1,1,https://github.com/rafalcieslak,Compile newlib with debugging symbols,1,[],https://github.com/cahirwpz/mimiker/pull/322,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/322,This helps a lot when debugging problems like #321.,This helps a lot when debugging problems like #321.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,323,2017-05-18T00:08:40Z,2017-05-18T06:15:22Z,2017-05-18T06:15:22Z,MERGED,True,3,3,1,https://github.com/rafalcieslak,Fixed dev_cons_read,1,[],https://github.com/cahirwpz/mimiker/pull/323,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/323,This should fix #321.,This should fix #321.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,324,2017-05-18T06:32:14Z,2017-05-19T16:12:42Z,2017-05-22T09:18:50Z,MERGED,True,261,248,27,https://github.com/cahirwpz,Python-like with statement for mutex locking,8,[],https://github.com/cahirwpz/mimiker/pull/324,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/324,"During code reviews I have noticed that mtx_scoped_lock blends visually with the surrounding code too much. More important issue is that it does not force a programmer to think how long a mutex is really needed to be acquired, so the mutex may be held for code that does not require such assumption. To address the problem we could write following code with mtx_scoped_lock:
{
  mtx_scoped_lock(a_lock);
  ...
}
... or use WITH_MTX_LOCK:
WITH_MTX_LOCK (a_lock) {
  ...
}
Please give me your feedback on usefulness of this construct.","During code reviews I have noticed that mtx_scoped_lock blends visually with the surrounding code too much. More important issue is that it does not force a programmer to think how long a mutex is really needed to be acquired, so the mutex may be held for code that does not require such assumption. To address the problem we could write following code with mtx_scoped_lock:
{
  mtx_scoped_lock(a_lock);
  ...
}
... or use WITH_MTX_LOCK:
WITH_MTX_LOCK (a_lock) {
  ...
}
Please give me your feedback on usefulness of this construct.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,324,2017-05-18T06:32:14Z,2017-05-19T16:12:42Z,2017-05-22T09:18:50Z,MERGED,True,261,248,27,https://github.com/cahirwpz,Python-like with statement for mutex locking,8,[],https://github.com/cahirwpz/mimiker/pull/324,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/324#issuecomment-302370282,"During code reviews I have noticed that mtx_scoped_lock blends visually with the surrounding code too much. More important issue is that it does not force a programmer to think how long a mutex is really needed to be acquired, so the mutex may be held for code that does not require such assumption. To address the problem we could write following code with mtx_scoped_lock:
{
  mtx_scoped_lock(a_lock);
  ...
}
... or use WITH_MTX_LOCK:
WITH_MTX_LOCK (a_lock) {
  ...
}
Please give me your feedback on usefulness of this construct.","This is awesome! I wanted to come up with such a mechanism, but I couldn't figure out how to implement it in C. The for trick seems to work well, although it seems to slightly abuse the scoped_lock macro.
I suppose we could also use a similar macro for critical_enter/leave.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,324,2017-05-18T06:32:14Z,2017-05-19T16:12:42Z,2017-05-22T09:18:50Z,MERGED,True,261,248,27,https://github.com/cahirwpz,Python-like with statement for mutex locking,8,[],https://github.com/cahirwpz/mimiker/pull/324,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/324#issuecomment-302372781,"During code reviews I have noticed that mtx_scoped_lock blends visually with the surrounding code too much. More important issue is that it does not force a programmer to think how long a mutex is really needed to be acquired, so the mutex may be held for code that does not require such assumption. To address the problem we could write following code with mtx_scoped_lock:
{
  mtx_scoped_lock(a_lock);
  ...
}
... or use WITH_MTX_LOCK:
WITH_MTX_LOCK (a_lock) {
  ...
}
Please give me your feedback on usefulness of this construct.","[...] I couldn't figure out how to implement it in C.

I knew it was possible for some time, but I needed to consult P99 goodness to make it happen.

I suppose we could also use a similar macro for critical_enter/leave

The trick could be applied in many other places. Critical section is a good candidate:
/* excerpt from `sys/mutex.c` */
IN_CRITICAL_SECTION() {
  while (m->m_owner != NULL)
    sleepq_wait(&m->m_owner, ""mutex"");
  m->m_owner = thread_self();
}",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,324,2017-05-18T06:32:14Z,2017-05-19T16:12:42Z,2017-05-22T09:18:50Z,MERGED,True,261,248,27,https://github.com/cahirwpz,Python-like with statement for mutex locking,8,[],https://github.com/cahirwpz/mimiker/pull/324,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/324#issuecomment-302531533,"During code reviews I have noticed that mtx_scoped_lock blends visually with the surrounding code too much. More important issue is that it does not force a programmer to think how long a mutex is really needed to be acquired, so the mutex may be held for code that does not require such assumption. To address the problem we could write following code with mtx_scoped_lock:
{
  mtx_scoped_lock(a_lock);
  ...
}
... or use WITH_MTX_LOCK:
WITH_MTX_LOCK (a_lock) {
  ...
}
Please give me your feedback on usefulness of this construct.","@rafalcieslak I implemented WITH_MTX_LOCK, WITH_RW_LOCK and IN_CRITICAL_SECTION. Please have a look. Be prepared to see massive diffs due to indentation changes. The most suprising thing to see is that with-statements, thanks to loop semantics, render some goto's obsolete.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,324,2017-05-18T06:32:14Z,2017-05-19T16:12:42Z,2017-05-22T09:18:50Z,MERGED,True,261,248,27,https://github.com/cahirwpz,Python-like with statement for mutex locking,8,[],https://github.com/cahirwpz/mimiker/pull/324,https://github.com/rafalcieslak,5,https://github.com/cahirwpz/mimiker/pull/324#issuecomment-302554358,"During code reviews I have noticed that mtx_scoped_lock blends visually with the surrounding code too much. More important issue is that it does not force a programmer to think how long a mutex is really needed to be acquired, so the mutex may be held for code that does not require such assumption. To address the problem we could write following code with mtx_scoped_lock:
{
  mtx_scoped_lock(a_lock);
  ...
}
... or use WITH_MTX_LOCK:
WITH_MTX_LOCK (a_lock) {
  ...
}
Please give me your feedback on usefulness of this construct.","While I really like these macros and how they simplify things, I think you're using them a bit too much. It's great to wrap particular pieces of code, but using them to wrap entire functions kind of defeats the purpose of cleaning up code. We have many functions that look like this:
void function(){
  mtx_scoped_lock(...);
  /* lots of code */
}
and that's entirely fine, there is no need to introduce an extra nested scope, the function itself already provides one. Using WITH_ in this example makes things look a bit more complex than they actually are.
Also, could we get rid of () from IN_CRITICAL_SECTION() {...}?
I can't wait to resolving all the merge conflicts this branch will cause due to indentation changes! 😬 That's unavoidable, though.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,324,2017-05-18T06:32:14Z,2017-05-19T16:12:42Z,2017-05-22T09:18:50Z,MERGED,True,261,248,27,https://github.com/cahirwpz,Python-like with statement for mutex locking,8,[],https://github.com/cahirwpz/mimiker/pull/324,https://github.com/cahirwpz,6,https://github.com/cahirwpz/mimiker/pull/324#issuecomment-302634554,"During code reviews I have noticed that mtx_scoped_lock blends visually with the surrounding code too much. More important issue is that it does not force a programmer to think how long a mutex is really needed to be acquired, so the mutex may be held for code that does not require such assumption. To address the problem we could write following code with mtx_scoped_lock:
{
  mtx_scoped_lock(a_lock);
  ...
}
... or use WITH_MTX_LOCK:
WITH_MTX_LOCK (a_lock) {
  ...
}
Please give me your feedback on usefulness of this construct.","[...] I think you're using them a bit too much.

That allowed me to evaluate different use scenarios. You're right that in majority cases scoped lock is just fine. I reworked the PR to minimize introduced indentation changes. Please note that to mark important role of scoped lock in our code, I decided to change their names to upper case to make them visually stand out. Oh, and I introduced SCOPED_CRITICAL_SECTION().",True,{'THUMBS_UP': ['https://github.com/rafalcieslak']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,324,2017-05-18T06:32:14Z,2017-05-19T16:12:42Z,2017-05-22T09:18:50Z,MERGED,True,261,248,27,https://github.com/cahirwpz,Python-like with statement for mutex locking,8,[],https://github.com/cahirwpz/mimiker/pull/324,https://github.com/cahirwpz,7,https://github.com/cahirwpz/mimiker/pull/324#issuecomment-302663635,"During code reviews I have noticed that mtx_scoped_lock blends visually with the surrounding code too much. More important issue is that it does not force a programmer to think how long a mutex is really needed to be acquired, so the mutex may be held for code that does not require such assumption. To address the problem we could write following code with mtx_scoped_lock:
{
  mtx_scoped_lock(a_lock);
  ...
}
... or use WITH_MTX_LOCK:
WITH_MTX_LOCK (a_lock) {
  ...
}
Please give me your feedback on usefulness of this construct.",@rafalcieslak Should I merge so that you can use new constructs in #329 ?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,324,2017-05-18T06:32:14Z,2017-05-19T16:12:42Z,2017-05-22T09:18:50Z,MERGED,True,261,248,27,https://github.com/cahirwpz,Python-like with statement for mutex locking,8,[],https://github.com/cahirwpz/mimiker/pull/324,https://github.com/rafalcieslak,8,https://github.com/cahirwpz/mimiker/pull/324#issuecomment-302738150,"During code reviews I have noticed that mtx_scoped_lock blends visually with the surrounding code too much. More important issue is that it does not force a programmer to think how long a mutex is really needed to be acquired, so the mutex may be held for code that does not require such assumption. To address the problem we could write following code with mtx_scoped_lock:
{
  mtx_scoped_lock(a_lock);
  ...
}
... or use WITH_MTX_LOCK:
WITH_MTX_LOCK (a_lock) {
  ...
}
Please give me your feedback on usefulness of this construct.","Go ahead. Pretty much every code we write uses some kind of synchronization mechanisms, so it'll be good to have these macros ready for use ASAP.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,325,2017-05-18T07:57:39Z,2017-05-18T10:13:44Z,2017-05-23T12:52:40Z,MERGED,True,1,1,1,https://github.com/dyniec,Fixed binary junk during ramdisk test,1,[],https://github.com/cahirwpz/mimiker/pull/325,https://github.com/dyniec,1,https://github.com/cahirwpz/mimiker/pull/325,Fix for #308,Fix for #308,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,328,2017-05-18T15:37:38Z,2017-06-26T17:06:02Z,2017-06-26T17:06:02Z,MERGED,True,388,248,25,https://github.com/rafalcieslak,Implemented utest user program,33,[],https://github.com/cahirwpz/mimiker/pull/328,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/328,"Per #326, I've gathered all usermode tests into utest program. It gets integrated with kernel tests via tests/utest.c file. This obsoletes misbehave, fd_test, dup_test and most of prog (which I intend to turn into a sandbox program for temporary tests and experiments).","Per #326, I've gathered all usermode tests into utest program. It gets integrated with kernel tests via tests/utest.c file. This obsoletes misbehave, fd_test, dup_test and most of prog (which I intend to turn into a sandbox program for temporary tests and experiments).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,328,2017-05-18T15:37:38Z,2017-06-26T17:06:02Z,2017-06-26T17:06:02Z,MERGED,True,388,248,25,https://github.com/rafalcieslak,Implemented utest user program,33,[],https://github.com/cahirwpz/mimiker/pull/328,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/328#issuecomment-302449379,"Per #326, I've gathered all usermode tests into utest program. It gets integrated with kernel tests via tests/utest.c file. This obsoletes misbehave, fd_test, dup_test and most of prog (which I intend to turn into a sandbox program for temporary tests and experiments).","Interestingly, running these tests with other kernel tests unveiled some memory leaks! (Yay, we're at the point where memory leaks are a thing! 😇) It's probably no surprise that vm_map memory pool was too small as we don't clean up vm_map_entries thoroughly, but it's peculiar that file and filedesc memory pools also get exhausted after some user programs start. I'll investigate.
EDIT: It seems the problem is that we never destroy processes...",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,328,2017-05-18T15:37:38Z,2017-06-26T17:06:02Z,2017-06-26T17:06:02Z,MERGED,True,388,248,25,https://github.com/rafalcieslak,Implemented utest user program,33,[],https://github.com/cahirwpz/mimiker/pull/328,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/328#issuecomment-302529180,"Per #326, I've gathered all usermode tests into utest program. It gets integrated with kernel tests via tests/utest.c file. This obsoletes misbehave, fd_test, dup_test and most of prog (which I intend to turn into a sandbox program for temporary tests and experiments).",I won't be able to get these new tests to run correctly before #329 (Implemented exit and waitpid) is done.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,328,2017-05-18T15:37:38Z,2017-06-26T17:06:02Z,2017-06-26T17:06:02Z,MERGED,True,388,248,25,https://github.com/rafalcieslak,Implemented utest user program,33,[],https://github.com/cahirwpz/mimiker/pull/328,https://github.com/rafalcieslak,4,https://github.com/cahirwpz/mimiker/pull/328#issuecomment-302880569,"Per #326, I've gathered all usermode tests into utest program. It gets integrated with kernel tests via tests/utest.c file. This obsoletes misbehave, fd_test, dup_test and most of prog (which I intend to turn into a sandbox program for temporary tests and experiments).","Thanks to #329 (Implemented exit and waitpid), memory leaks are fixed and automatic tests should start working now. I needed to increase overall test timeout, but that's not because the tests are long [see #311 (Introduce long test flag for ktest)], but because I've added a large number of new tests.
With new tools in place, I was able to implement a very simple usermode test that dereferences a null pointer, and ktest ensures that it got terminated with a SIGSEGV. Cool!",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,328,2017-05-18T15:37:38Z,2017-06-26T17:06:02Z,2017-06-26T17:06:02Z,MERGED,True,388,248,25,https://github.com/rafalcieslak,Implemented utest user program,33,[],https://github.com/cahirwpz/mimiker/pull/328,https://github.com/rafalcieslak,5,https://github.com/cahirwpz/mimiker/pull/328#issuecomment-302881544,"Per #326, I've gathered all usermode tests into utest program. It gets integrated with kernel tests via tests/utest.c file. This obsoletes misbehave, fd_test, dup_test and most of prog (which I intend to turn into a sandbox program for temporary tests and experiments).","I don't see a point in investigating Travis errors before #334 (Disable pmap in klog mask by default) is accepted. In the last failed build, 20908 lines are pmap messages, out of 30952 total, which is more than 66%, and that certainly contributes to hitting the time limit.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,328,2017-05-18T15:37:38Z,2017-06-26T17:06:02Z,2017-06-26T17:06:02Z,MERGED,True,388,248,25,https://github.com/rafalcieslak,Implemented utest user program,33,[],https://github.com/cahirwpz/mimiker/pull/328,https://github.com/rafalcieslak,6,https://github.com/cahirwpz/mimiker/pull/328#issuecomment-302882335,"Per #326, I've gathered all usermode tests into utest program. It gets integrated with kernel tests via tests/utest.c file. This obsoletes misbehave, fd_test, dup_test and most of prog (which I intend to turn into a sandbox program for temporary tests and experiments).","I don't suppose I need to prove the usefulness of these tests, but, for the record, they've just discovered a regression in master introduced by merging #335 (Simplify copying data between user-space and kernel-space), see user_fork_wait test. I'll investigate ASAP.
EDIT: #336 proposes a fix.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,328,2017-05-18T15:37:38Z,2017-06-26T17:06:02Z,2017-06-26T17:06:02Z,MERGED,True,388,248,25,https://github.com/rafalcieslak,Implemented utest user program,33,[],https://github.com/cahirwpz/mimiker/pull/328,https://github.com/cahirwpz,7,https://github.com/cahirwpz/mimiker/pull/328#issuecomment-304446273,"Per #326, I've gathered all usermode tests into utest program. It gets integrated with kernel tests via tests/utest.c file. This obsoletes misbehave, fd_test, dup_test and most of prog (which I intend to turn into a sandbox program for temporary tests and experiments).",@rafalcieslak are there any chances you'll find some time to fix bugs and make the PR ready for review soon? It'd be really nice if we cleaned user-space tests run procedure.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,328,2017-05-18T15:37:38Z,2017-06-26T17:06:02Z,2017-06-26T17:06:02Z,MERGED,True,388,248,25,https://github.com/rafalcieslak,Implemented utest user program,33,[],https://github.com/cahirwpz/mimiker/pull/328,https://github.com/rafalcieslak,8,https://github.com/cahirwpz/mimiker/pull/328#issuecomment-304450176,"Per #326, I've gathered all usermode tests into utest program. It gets integrated with kernel tests via tests/utest.c file. This obsoletes misbehave, fd_test, dup_test and most of prog (which I intend to turn into a sandbox program for temporary tests and experiments).","I'll see what I can do, but it may take some time - after all, I'm debugging tens of new tests that we did not run previously. These new tests heavily rely on proper synchronization, (much more than previous tests) which makes it very tricky to troubleshoot.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,328,2017-05-18T15:37:38Z,2017-06-26T17:06:02Z,2017-06-26T17:06:02Z,MERGED,True,388,248,25,https://github.com/rafalcieslak,Implemented utest user program,33,[],https://github.com/cahirwpz/mimiker/pull/328,https://github.com/cahirwpz,9,https://github.com/cahirwpz/mimiker/pull/328#issuecomment-304451205,"Per #326, I've gathered all usermode tests into utest program. It gets integrated with kernel tests via tests/utest.c file. This obsoletes misbehave, fd_test, dup_test and most of prog (which I intend to turn into a sandbox program for temporary tests and experiments).","Ok, I understand. Note that it's all right if we merged new framework, and then enabled tests one by one.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,328,2017-05-18T15:37:38Z,2017-06-26T17:06:02Z,2017-06-26T17:06:02Z,MERGED,True,388,248,25,https://github.com/rafalcieslak,Implemented utest user program,33,[],https://github.com/cahirwpz/mimiker/pull/328,https://github.com/rafalcieslak,10,https://github.com/cahirwpz/mimiker/pull/328#issuecomment-308723174,"Per #326, I've gathered all usermode tests into utest program. It gets integrated with kernel tests via tests/utest.c file. This obsoletes misbehave, fd_test, dup_test and most of prog (which I intend to turn into a sandbox program for temporary tests and experiments).","I believe I have identified the problem. It occurs when thread A executes do_waitpid while it's child (B) executes proc_exit (e.g. as a result of sig_check, as in this case), and a context switch happens in an unfortunate moment - namely at a point where A has locked B's mutex and needs to also lock it's parents (A's) mutex as well, while, at the same time, B has locked A's mutex and wishes to lock child's (B's) mutex - which causes a bi-directional deadlock.
For reproduction, example seed is 3769242755 with test=all and repeat=5 for QEMU 2.5.0 at revision 9436642.
A possible solution would be to have child_find_by_state not lock child's mutex - it's unnecessary, given it only peeks at child's state, which doesn't require atomicity.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,328,2017-05-18T15:37:38Z,2017-06-26T17:06:02Z,2017-06-26T17:06:02Z,MERGED,True,388,248,25,https://github.com/rafalcieslak,Implemented utest user program,33,[],https://github.com/cahirwpz/mimiker/pull/328,https://github.com/rafalcieslak,11,https://github.com/cahirwpz/mimiker/pull/328#issuecomment-308727408,"Per #326, I've gathered all usermode tests into utest program. It gets integrated with kernel tests via tests/utest.c file. This obsoletes misbehave, fd_test, dup_test and most of prog (which I intend to turn into a sandbox program for temporary tests and experiments).","It seems everything is okay now, and this branch is ready for review!
In meantime, two new user programs were introduced: test_rtc and test_kbd. Since these are interactive program not written with automatic testing in mind, I am not able to integrate them with utest, so I'll leave them untouched.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,329,2017-05-18T20:15:53Z,2017-05-20T14:11:08Z,2017-05-20T14:11:08Z,MERGED,True,335,19,15,https://github.com/rafalcieslak,Implemented exit and waitpid,15,[],https://github.com/cahirwpz/mimiker/pull/329,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/329,"Initially, I wanted to resolve #326 (One user program for all user-space tests). It turned out that running many user programs without restarting the kernel causes memory leaks, because we never reclaim resources allocated for a process. That's because out exit would only terminate a thread, and not the entire process. So to fix that, I needed to implement a proper exit, but in order to test it in any way I had to also implement wait/waitpid (Note: I recommend against splitting this PR into exit and wait PRs, these two both would need to introduce the logic of process' state after death!).
The result is quite attractive, as you can see in test_fork.c. My waitpid supports pid -1 for waiting for any child, and WNOHANG option for returning immediately if no children are zombies.
Naturally, I've also verified that this fixes the memory leaks.
The implementation is straight-forward, maybe except for locks in waitpid - but that's only because I need to use both child's and parent's locks in slightly different patterns, which may seem ugly at the first sight.
Since threads no longer have a return value, the tests tests/exec_* are no longer able to verify the exit code of the userspace thread, but I suggest to fix that after #328 (Implemented utest user program) is done, as it does a major refactor to these tests anyway.
EDIT: I think this also solves #291 (Thread exit vs process exit) for now.","Initially, I wanted to resolve #326 (One user program for all user-space tests). It turned out that running many user programs without restarting the kernel causes memory leaks, because we never reclaim resources allocated for a process. That's because out exit would only terminate a thread, and not the entire process. So to fix that, I needed to implement a proper exit, but in order to test it in any way I had to also implement wait/waitpid (Note: I recommend against splitting this PR into exit and wait PRs, these two both would need to introduce the logic of process' state after death!).
The result is quite attractive, as you can see in test_fork.c. My waitpid supports pid -1 for waiting for any child, and WNOHANG option for returning immediately if no children are zombies.
Naturally, I've also verified that this fixes the memory leaks.
The implementation is straight-forward, maybe except for locks in waitpid - but that's only because I need to use both child's and parent's locks in slightly different patterns, which may seem ugly at the first sight.
Since threads no longer have a return value, the tests tests/exec_* are no longer able to verify the exit code of the userspace thread, but I suggest to fix that after #328 (Implemented utest user program) is done, as it does a major refactor to these tests anyway.
EDIT: I think this also solves #291 (Thread exit vs process exit) for now.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,329,2017-05-18T20:15:53Z,2017-05-20T14:11:08Z,2017-05-20T14:11:08Z,MERGED,True,335,19,15,https://github.com/rafalcieslak,Implemented exit and waitpid,15,[],https://github.com/cahirwpz/mimiker/pull/329,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/329#issuecomment-302563988,"Initially, I wanted to resolve #326 (One user program for all user-space tests). It turned out that running many user programs without restarting the kernel causes memory leaks, because we never reclaim resources allocated for a process. That's because out exit would only terminate a thread, and not the entire process. So to fix that, I needed to implement a proper exit, but in order to test it in any way I had to also implement wait/waitpid (Note: I recommend against splitting this PR into exit and wait PRs, these two both would need to introduce the logic of process' state after death!).
The result is quite attractive, as you can see in test_fork.c. My waitpid supports pid -1 for waiting for any child, and WNOHANG option for returning immediately if no children are zombies.
Naturally, I've also verified that this fixes the memory leaks.
The implementation is straight-forward, maybe except for locks in waitpid - but that's only because I need to use both child's and parent's locks in slightly different patterns, which may seem ugly at the first sight.
Since threads no longer have a return value, the tests tests/exec_* are no longer able to verify the exit code of the userspace thread, but I suggest to fix that after #328 (Implemented utest user program) is done, as it does a major refactor to these tests anyway.
EDIT: I think this also solves #291 (Thread exit vs process exit) for now.","I've updated this branch to support signals. Now killing a process will also clean up it's resources, and notify whoever waits for it! I've also implemented W* macros that decode exit code / signal number from status returned by wait. Both test_fork and prog make use of wait now.",True,{'HOORAY': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,329,2017-05-18T20:15:53Z,2017-05-20T14:11:08Z,2017-05-20T14:11:08Z,MERGED,True,335,19,15,https://github.com/rafalcieslak,Implemented exit and waitpid,15,[],https://github.com/cahirwpz/mimiker/pull/329,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/329#issuecomment-302740444,"Initially, I wanted to resolve #326 (One user program for all user-space tests). It turned out that running many user programs without restarting the kernel causes memory leaks, because we never reclaim resources allocated for a process. That's because out exit would only terminate a thread, and not the entire process. So to fix that, I needed to implement a proper exit, but in order to test it in any way I had to also implement wait/waitpid (Note: I recommend against splitting this PR into exit and wait PRs, these two both would need to introduce the logic of process' state after death!).
The result is quite attractive, as you can see in test_fork.c. My waitpid supports pid -1 for waiting for any child, and WNOHANG option for returning immediately if no children are zombies.
Naturally, I've also verified that this fixes the memory leaks.
The implementation is straight-forward, maybe except for locks in waitpid - but that's only because I need to use both child's and parent's locks in slightly different patterns, which may seem ugly at the first sight.
Since threads no longer have a return value, the tests tests/exec_* are no longer able to verify the exit code of the userspace thread, but I suggest to fix that after #328 (Implemented utest user program) is done, as it does a major refactor to these tests anyway.
EDIT: I think this also solves #291 (Thread exit vs process exit) for now.",It should be now apparent what is the purpose of each lock in waitpid.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,329,2017-05-18T20:15:53Z,2017-05-20T14:11:08Z,2017-05-20T14:11:08Z,MERGED,True,335,19,15,https://github.com/rafalcieslak,Implemented exit and waitpid,15,[],https://github.com/cahirwpz/mimiker/pull/329,https://github.com/rafalcieslak,4,https://github.com/cahirwpz/mimiker/pull/329#issuecomment-302871944,"Initially, I wanted to resolve #326 (One user program for all user-space tests). It turned out that running many user programs without restarting the kernel causes memory leaks, because we never reclaim resources allocated for a process. That's because out exit would only terminate a thread, and not the entire process. So to fix that, I needed to implement a proper exit, but in order to test it in any way I had to also implement wait/waitpid (Note: I recommend against splitting this PR into exit and wait PRs, these two both would need to introduce the logic of process' state after death!).
The result is quite attractive, as you can see in test_fork.c. My waitpid supports pid -1 for waiting for any child, and WNOHANG option for returning immediately if no children are zombies.
Naturally, I've also verified that this fixes the memory leaks.
The implementation is straight-forward, maybe except for locks in waitpid - but that's only because I need to use both child's and parent's locks in slightly different patterns, which may seem ugly at the first sight.
Since threads no longer have a return value, the tests tests/exec_* are no longer able to verify the exit code of the userspace thread, but I suggest to fix that after #328 (Implemented utest user program) is done, as it does a major refactor to these tests anyway.
EDIT: I think this also solves #291 (Thread exit vs process exit) for now.","Now that signal support was merged, I can add SIGCHLD where applicable. But... remember when I mentioned signal code is a ton of special cases and conditions? Well, here's one: SIGCHLD is ignored by default. But child process gets reaped immediately (without turning into a zombie) only if the parent explicitly ignores SIGCHLD, not by default.
So, in a way, the logic of how to perform a process exit will depend on how the parent's signal handlers are set up. Smells weird, but I suppose that's how it must be done.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,329,2017-05-18T20:15:53Z,2017-05-20T14:11:08Z,2017-05-20T14:11:08Z,MERGED,True,335,19,15,https://github.com/rafalcieslak,Implemented exit and waitpid,15,[],https://github.com/cahirwpz/mimiker/pull/329,https://github.com/cahirwpz,5,https://github.com/cahirwpz/mimiker/pull/329#issuecomment-302874037,"Initially, I wanted to resolve #326 (One user program for all user-space tests). It turned out that running many user programs without restarting the kernel causes memory leaks, because we never reclaim resources allocated for a process. That's because out exit would only terminate a thread, and not the entire process. So to fix that, I needed to implement a proper exit, but in order to test it in any way I had to also implement wait/waitpid (Note: I recommend against splitting this PR into exit and wait PRs, these two both would need to introduce the logic of process' state after death!).
The result is quite attractive, as you can see in test_fork.c. My waitpid supports pid -1 for waiting for any child, and WNOHANG option for returning immediately if no children are zombies.
Naturally, I've also verified that this fixes the memory leaks.
The implementation is straight-forward, maybe except for locks in waitpid - but that's only because I need to use both child's and parent's locks in slightly different patterns, which may seem ugly at the first sight.
Since threads no longer have a return value, the tests tests/exec_* are no longer able to verify the exit code of the userspace thread, but I suggest to fix that after #328 (Implemented utest user program) is done, as it does a major refactor to these tests anyway.
EDIT: I think this also solves #291 (Thread exit vs process exit) for now.","W.r.t. SIGCHLD please leave an information that we don't handle it properly. Preferably, please open an issue explaining what's missing.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,329,2017-05-18T20:15:53Z,2017-05-20T14:11:08Z,2017-05-20T14:11:08Z,MERGED,True,335,19,15,https://github.com/rafalcieslak,Implemented exit and waitpid,15,[],https://github.com/cahirwpz/mimiker/pull/329,https://github.com/rafalcieslak,6,https://github.com/cahirwpz/mimiker/pull/329#issuecomment-302874122,"Initially, I wanted to resolve #326 (One user program for all user-space tests). It turned out that running many user programs without restarting the kernel causes memory leaks, because we never reclaim resources allocated for a process. That's because out exit would only terminate a thread, and not the entire process. So to fix that, I needed to implement a proper exit, but in order to test it in any way I had to also implement wait/waitpid (Note: I recommend against splitting this PR into exit and wait PRs, these two both would need to introduce the logic of process' state after death!).
The result is quite attractive, as you can see in test_fork.c. My waitpid supports pid -1 for waiting for any child, and WNOHANG option for returning immediately if no children are zombies.
Naturally, I've also verified that this fixes the memory leaks.
The implementation is straight-forward, maybe except for locks in waitpid - but that's only because I need to use both child's and parent's locks in slightly different patterns, which may seem ugly at the first sight.
Since threads no longer have a return value, the tests tests/exec_* are no longer able to verify the exit code of the userspace thread, but I suggest to fix that after #328 (Implemented utest user program) is done, as it does a major refactor to these tests anyway.
EDIT: I think this also solves #291 (Thread exit vs process exit) for now.","Oh... I just implemented proper support for SIGCHLD, and several tests in test_fork to prove it makes sense and fulfills the required interface. It wasn't hard! I've also added some changes that make exit behave correctly when the calling process was orphaned.",True,{'HEART': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,329,2017-05-18T20:15:53Z,2017-05-20T14:11:08Z,2017-05-20T14:11:08Z,MERGED,True,335,19,15,https://github.com/rafalcieslak,Implemented exit and waitpid,15,[],https://github.com/cahirwpz/mimiker/pull/329,https://github.com/cahirwpz,7,https://github.com/cahirwpz/mimiker/pull/329#issuecomment-302875073,"Initially, I wanted to resolve #326 (One user program for all user-space tests). It turned out that running many user programs without restarting the kernel causes memory leaks, because we never reclaim resources allocated for a process. That's because out exit would only terminate a thread, and not the entire process. So to fix that, I needed to implement a proper exit, but in order to test it in any way I had to also implement wait/waitpid (Note: I recommend against splitting this PR into exit and wait PRs, these two both would need to introduce the logic of process' state after death!).
The result is quite attractive, as you can see in test_fork.c. My waitpid supports pid -1 for waiting for any child, and WNOHANG option for returning immediately if no children are zombies.
Naturally, I've also verified that this fixes the memory leaks.
The implementation is straight-forward, maybe except for locks in waitpid - but that's only because I need to use both child's and parent's locks in slightly different patterns, which may seem ugly at the first sight.
Since threads no longer have a return value, the tests tests/exec_* are no longer able to verify the exit code of the userspace thread, but I suggest to fix that after #328 (Implemented utest user program) is done, as it does a major refactor to these tests anyway.
EDIT: I think this also solves #291 (Thread exit vs process exit) for now.","LGTM When final fixes are done, please merge.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,330,2017-05-19T17:06:22Z,2017-05-20T10:56:39Z,2017-05-20T10:56:39Z,MERGED,True,19,49,10,https://github.com/rafalcieslak,Simplified mutex and tailq initialization,2,[],https://github.com/cahirwpz/mimiker/pull/330,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/330,"I was in a mood for cleanup today. I've always wondered why:

We rarely use TAILQ_HEAD_INITIALIZER macro
We have not implemented a MUTEX_INITIALIZER macro

These are very useful for initializing static/global variables. I've applied them consistently where applicable, and that rendered as much as three init_ functions useless (!), so I've removed them entirely.","I was in a mood for cleanup today. I've always wondered why:

We rarely use TAILQ_HEAD_INITIALIZER macro
We have not implemented a MUTEX_INITIALIZER macro

These are very useful for initializing static/global variables. I've applied them consistently where applicable, and that rendered as much as three init_ functions useless (!), so I've removed them entirely.",True,{'THUMBS_UP': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,330,2017-05-19T17:06:22Z,2017-05-20T10:56:39Z,2017-05-20T10:56:39Z,MERGED,True,19,49,10,https://github.com/rafalcieslak,Simplified mutex and tailq initialization,2,[],https://github.com/cahirwpz/mimiker/pull/330,https://github.com/czapiga,2,https://github.com/cahirwpz/mimiker/pull/330#issuecomment-302865861,"I was in a mood for cleanup today. I've always wondered why:

We rarely use TAILQ_HEAD_INITIALIZER macro
We have not implemented a MUTEX_INITIALIZER macro

These are very useful for initializing static/global variables. I've applied them consistently where applicable, and that rendered as much as three init_ functions useless (!), so I've removed them entirely.",Ship it,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,330,2017-05-19T17:06:22Z,2017-05-20T10:56:39Z,2017-05-20T10:56:39Z,MERGED,True,19,49,10,https://github.com/rafalcieslak,Simplified mutex and tailq initialization,2,[],https://github.com/cahirwpz/mimiker/pull/330,https://github.com/czapiga,3,https://github.com/cahirwpz/mimiker/pull/330#issuecomment-302865880,"I was in a mood for cleanup today. I've always wondered why:

We rarely use TAILQ_HEAD_INITIALIZER macro
We have not implemented a MUTEX_INITIALIZER macro

These are very useful for initializing static/global variables. I've applied them consistently where applicable, and that rendered as much as three init_ functions useless (!), so I've removed them entirely.",Whoops,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,330,2017-05-19T17:06:22Z,2017-05-20T10:56:39Z,2017-05-20T10:56:39Z,MERGED,True,19,49,10,https://github.com/rafalcieslak,Simplified mutex and tailq initialization,2,[],https://github.com/cahirwpz/mimiker/pull/330,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/330#issuecomment-302866003,"I was in a mood for cleanup today. I've always wondered why:

We rarely use TAILQ_HEAD_INITIALIZER macro
We have not implemented a MUTEX_INITIALIZER macro

These are very useful for initializing static/global variables. I've applied them consistently where applicable, and that rendered as much as three init_ functions useless (!), so I've removed them entirely.",Cleanup changes are welcome! Thanks!,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,331,2017-05-20T11:10:44Z,2017-05-23T08:43:46Z,2017-05-23T08:43:46Z,MERGED,True,154,63,15,https://github.com/czapiga,High resolution timer,21,[],https://github.com/cahirwpz/mimiker/pull/331,https://github.com/czapiga,1,https://github.com/cahirwpz/mimiker/pull/331,In this PR I will work on #327 issue. mips_clock_us will be incremented every mircosecond but for now I just wanted to check if changing types won't break anything.,In this PR I will work on #327 issue. mips_clock_us will be incremented every mircosecond but for now I just wanted to check if changing types won't break anything.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,331,2017-05-20T11:10:44Z,2017-05-23T08:43:46Z,2017-05-23T08:43:46Z,MERGED,True,154,63,15,https://github.com/czapiga,High resolution timer,21,[],https://github.com/cahirwpz/mimiker/pull/331,https://github.com/czapiga,2,https://github.com/cahirwpz/mimiker/pull/331#issuecomment-302867626,In this PR I will work on #327 issue. mips_clock_us will be incremented every mircosecond but for now I just wanted to check if changing types won't break anything.,@cahirwpz Is this how I should actually change timer resolution? It seems like after going down to 1us tests are not even executed. I have to debug why kernel freezes but first I'd like to be sure I'm not doing something stupid with mips32_set_c0,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,331,2017-05-20T11:10:44Z,2017-05-23T08:43:46Z,2017-05-23T08:43:46Z,MERGED,True,154,63,15,https://github.com/czapiga,High resolution timer,21,[],https://github.com/cahirwpz/mimiker/pull/331,https://github.com/czapiga,3,https://github.com/cahirwpz/mimiker/pull/331#issuecomment-302868143,In this PR I will work on #327 issue. mips_clock_us will be incremented every mircosecond but for now I just wanted to check if changing types won't break anything.,I noticed that I can go down with clock to ~20us on OVPsim and ~40us on qemu. Setting it to lower value makes kernel freeze in few different places,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,331,2017-05-20T11:10:44Z,2017-05-23T08:43:46Z,2017-05-23T08:43:46Z,MERGED,True,154,63,15,https://github.com/czapiga,High resolution timer,21,[],https://github.com/cahirwpz/mimiker/pull/331,https://github.com/czapiga,4,https://github.com/cahirwpz/mimiker/pull/331#issuecomment-302868679,In this PR I will work on #327 issue. mips_clock_us will be incremented every mircosecond but for now I just wanted to check if changing types won't break anything.,It was called once per ms because of  if (ms != _ms) in sys/clock.c,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,331,2017-05-20T11:10:44Z,2017-05-23T08:43:46Z,2017-05-23T08:43:46Z,MERGED,True,154,63,15,https://github.com/czapiga,High resolution timer,21,[],https://github.com/cahirwpz/mimiker/pull/331,https://github.com/cahirwpz,5,https://github.com/cahirwpz/mimiker/pull/331#issuecomment-302868975,In this PR I will work on #327 issue. mips_clock_us will be incremented every mircosecond but for now I just wanted to check if changing types won't break anything.,Well... we don't want the timer to cause interrupt storm!!! I wanted clock_get to return exact time (based on C0_COUNT) without making any impact on the scheduler and callouts.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,331,2017-05-20T11:10:44Z,2017-05-23T08:43:46Z,2017-05-23T08:43:46Z,MERGED,True,154,63,15,https://github.com/czapiga,High resolution timer,21,[],https://github.com/cahirwpz/mimiker/pull/331,https://github.com/czapiga,6,https://github.com/cahirwpz/mimiker/pull/331#issuecomment-302869174,In this PR I will work on #327 issue. mips_clock_us will be incremented every mircosecond but for now I just wanted to check if changing types won't break anything.,"Ok, I think I get it now..",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,331,2017-05-20T11:10:44Z,2017-05-23T08:43:46Z,2017-05-23T08:43:46Z,MERGED,True,154,63,15,https://github.com/czapiga,High resolution timer,21,[],https://github.com/cahirwpz/mimiker/pull/331,https://github.com/rafalcieslak,7,https://github.com/cahirwpz/mimiker/pull/331#issuecomment-302882076,In this PR I will work on #327 issue. mips_clock_us will be incremented every mircosecond but for now I just wanted to check if changing types won't break anything.,"@czapiga Side note: ATM you are the only one in the team who uses the not ready label to mark unfinished PRs, others use WIP for that. cahirwpz, me and coodie have been using  not ready to mark tasks and PRs that require work in other areas, extra discussion, or additional research before work on such task can even begin.
Based on what we typically use labels for, I've created this table some time ago - it may serve as a nice overview of what do we usually mean with each label. I'm not forcing you to strictly follow these descriptions, though. It is not an officially accepted list. We may want to discuss it in future to reduce confusion and hopefully improve our labeling consistency.",True,{'THUMBS_UP': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,331,2017-05-20T11:10:44Z,2017-05-23T08:43:46Z,2017-05-23T08:43:46Z,MERGED,True,154,63,15,https://github.com/czapiga,High resolution timer,21,[],https://github.com/cahirwpz/mimiker/pull/331,https://github.com/cahirwpz,8,https://github.com/cahirwpz/mimiker/pull/331#issuecomment-303043005,In this PR I will work on #327 issue. mips_clock_us will be incremented every mircosecond but for now I just wanted to check if changing types won't break anything.,@czapiga What is the progress? I'd like this task to be finished sooner than later. It will unblock #253 and enable us to add gettimeofday syscall.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,331,2017-05-20T11:10:44Z,2017-05-23T08:43:46Z,2017-05-23T08:43:46Z,MERGED,True,154,63,15,https://github.com/czapiga,High resolution timer,21,[],https://github.com/cahirwpz/mimiker/pull/331,https://github.com/czapiga,9,https://github.com/cahirwpz/mimiker/pull/331#issuecomment-303223143,In this PR I will work on #327 issue. mips_clock_us will be incremented every mircosecond but for now I just wanted to check if changing types won't break anything.,I will try to end this till Thursday.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,331,2017-05-20T11:10:44Z,2017-05-23T08:43:46Z,2017-05-23T08:43:46Z,MERGED,True,154,63,15,https://github.com/czapiga,High resolution timer,21,[],https://github.com/cahirwpz/mimiker/pull/331,https://github.com/czapiga,10,https://github.com/cahirwpz/mimiker/pull/331#issuecomment-303232761,In this PR I will work on #327 issue. mips_clock_us will be incremented every mircosecond but for now I just wanted to check if changing types won't break anything.,@cahirwpz Just to be sure.. We want interface like this: timeval_t clock_get(); ?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,331,2017-05-20T11:10:44Z,2017-05-23T08:43:46Z,2017-05-23T08:43:46Z,MERGED,True,154,63,15,https://github.com/czapiga,High resolution timer,21,[],https://github.com/cahirwpz/mimiker/pull/331,https://github.com/czapiga,11,https://github.com/cahirwpz/mimiker/pull/331#issuecomment-303242311,In this PR I will work on #327 issue. mips_clock_us will be incremented every mircosecond but for now I just wanted to check if changing types won't break anything.,If it's possible I would like this to be merged then I will finish #253 and after that I will go back to timer_event_t interface.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,334,2017-05-20T14:51:26Z,2017-05-20T15:59:20Z,2017-05-20T15:59:20Z,MERGED,True,3,1,2,https://github.com/rafalcieslak,Disable pmap in klog mask by default,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/334,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/334,"NOTE: I know I can set any mask I want on my own, but this is about changing the deafult experience.
At this point pmap logs are extremely verbose, and they render the output completely unreadable and unattractive. When running test_fork, pmap logs take 75% of the output! Just see for yourself how much of a difference it makes: completely useless output versus clean description of what the kernel is doing. Stunning!
Furthermore, disabling pmap logs by default should increase the speed of automatic tests a lot.
And it's not like we need to see these messages by default, when was the last time any of us had to debug pmap behavior? We can explicitly re-enable it when working on pmap.","NOTE: I know I can set any mask I want on my own, but this is about changing the deafult experience.
At this point pmap logs are extremely verbose, and they render the output completely unreadable and unattractive. When running test_fork, pmap logs take 75% of the output! Just see for yourself how much of a difference it makes: completely useless output versus clean description of what the kernel is doing. Stunning!
Furthermore, disabling pmap logs by default should increase the speed of automatic tests a lot.
And it's not like we need to see these messages by default, when was the last time any of us had to debug pmap behavior? We can explicitly re-enable it when working on pmap.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,335,2017-05-20T15:35:18Z,2017-05-20T15:59:09Z,2017-05-22T09:18:41Z,MERGED,True,16,58,4,https://github.com/cahirwpz,Simplify copying data between user-space and kernel-space,1,[],https://github.com/cahirwpz/mimiker/pull/335,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/335,"Mixing copy{in,out} with {su,fu}word32 in syscall implementations started looking awkward, as the latter did not return EFAULT. Frankly, I can no longer justify {fu,su}word32 existence in our code base, so I removed it.
Instead of it I introduced generic copy{in,out}_s, which simplified code using regular copy{in,out} as well.","Mixing copy{in,out} with {su,fu}word32 in syscall implementations started looking awkward, as the latter did not return EFAULT. Frankly, I can no longer justify {fu,su}word32 existence in our code base, so I removed it.
Instead of it I introduced generic copy{in,out}_s, which simplified code using regular copy{in,out} as well.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,336,2017-05-20T16:12:59Z,2017-05-20T16:54:58Z,2017-05-20T16:54:58Z,MERGED,True,5,2,1,https://github.com/rafalcieslak,Fix waitpid return value,2,['bug'],https://github.com/cahirwpz/mimiker/pull/336,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/336,"This bug was introduced with #335 (Simplify copying data between user-space and kernel-space). copyout_s would overwrite the value returned by do_waitpid, which is the PID of the process we've waited for.
We don't have tests in place that would detect such issue, which is why I find #328 (Implemented utest user program) important.","This bug was introduced with #335 (Simplify copying data between user-space and kernel-space). copyout_s would overwrite the value returned by do_waitpid, which is the PID of the process we've waited for.
We don't have tests in place that would detect such issue, which is why I find #328 (Implemented utest user program) important.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,337,2017-05-20T18:59:17Z,2017-05-29T18:00:42Z,2017-05-30T09:09:25Z,MERGED,True,214,69,12,https://github.com/cahirwpz,readdir operation for initrd with generic readdir algorithm,15,[],https://github.com/cahirwpz/mimiker/pull/337,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/337,"This change extracts code from #316 required to implement readdir operation for initrd filesystem. Preliminary work has been done by @coodie. I've only abstracted away readdir routine to be as independant from the filesystem as possible. Hopefully readdir_generic will be reused by other filesystems, in particular pseudofs framework (yet to be implemented) used to create devfs, stdvgafs and other device filesystems.","This change extracts code from #316 required to implement readdir operation for initrd filesystem. Preliminary work has been done by @coodie. I've only abstracted away readdir routine to be as independant from the filesystem as possible. Hopefully readdir_generic will be reused by other filesystems, in particular pseudofs framework (yet to be implemented) used to create devfs, stdvgafs and other device filesystems.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,337,2017-05-20T18:59:17Z,2017-05-29T18:00:42Z,2017-05-30T09:09:25Z,MERGED,True,214,69,12,https://github.com/cahirwpz,readdir operation for initrd with generic readdir algorithm,15,[],https://github.com/cahirwpz/mimiker/pull/337,https://github.com/coodie,2,https://github.com/cahirwpz/mimiker/pull/337#issuecomment-302902594,"This change extracts code from #316 required to implement readdir operation for initrd filesystem. Preliminary work has been done by @coodie. I've only abstracted away readdir routine to be as independant from the filesystem as possible. Hopefully readdir_generic will be reused by other filesystems, in particular pseudofs framework (yet to be implemented) used to create devfs, stdvgafs and other device filesystems.","Here is a list of things you have done wrong:


Miscommunication
I don't like the fact that you took my task without mentioning to me you were going to do this. Not asking, not trying to communicate it to me anyhow, just sat down and did my job. I mentioned on seminar I wasn't going to spend much time on mimiker this weekend.


Taking credit for somebody's else work
Thank you for calling over 30 hours spent working on this task 'preliminary work', I've put a lot of effort to avoid unnecessary discussions but It doesn't matter how hard I try, you never notice this. This task is simple enough and It would feel great if I could take full credit for it.


Putting effort in wrong places
You mention quite often that you have no time to review my changes, but you have time to do my job. You are the person to teach me and other students, my changes are still unreviewed and I know they will never and ever be.  You - as an educator, leader and experienced programmer - should focus on other, possibly more difficult or vital tasks of the kernel, which no students want to do or are too difficult.


No educational value
Remember that this is educational project not a product we will ever be able to sell or anyone ever will use for special purpose, the goal is to learn and have fun. I don't get to learn anything from that. This task is easy and should be given to student to implement, make a review.


No satisfaction and fun
This project takes a lot of time, and main benefits I can gain from this are fun and satisfaction (when will I have opportunity to work on OS in my life?), let me have those.


No respect for me and my work
You haven't noticed the work I've put into this, you have scattered entire readdir branch into few other smaller subbranches, haven't done your job which is give feedback and make review. Action like this carries message nice idea, but you are a terrible programmer and I'd better do it myself. Plus, this really rarely happens to other students, am I worse or what? Sure, I could be better and I agree I'm not a very good programmer, but this is a matter of respect and teacher-student relationship. If student doesn't get feedback and practice how can he learn?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,337,2017-05-20T18:59:17Z,2017-05-29T18:00:42Z,2017-05-30T09:09:25Z,MERGED,True,214,69,12,https://github.com/cahirwpz,readdir operation for initrd with generic readdir algorithm,15,[],https://github.com/cahirwpz/mimiker/pull/337,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/337#issuecomment-302908422,"This change extracts code from #316 required to implement readdir operation for initrd filesystem. Preliminary work has been done by @coodie. I've only abstracted away readdir routine to be as independant from the filesystem as possible. Hopefully readdir_generic will be reused by other filesystems, in particular pseudofs framework (yet to be implemented) used to create devfs, stdvgafs and other device filesystems.","Thank you for the effort you spend to write words of constructive criticism.


As we know, using GitHub to communicate has its own limitations. To make things worse, there's not enough time during weekly meeting to discuss everything, and that is why I decided to devote some extra office hours for discussions. We have no luxury to work together every day, do pair programming, talk about issues, etc. The communication is an issue and it will be – it's high time to learn to live with it. There's good will on my side to push the project forward... please do not assume I do anything wrong on purpose.


Formally speaking the code does not belong to me or you. Its rightful owner is University of Wroclaw. I'm trying to grade everybody's work in a fair manner – you're getting the credit for your work according to the rules I apply to every project's member.


Unfortunately, I've learnt (in this project) that it frequently takes less time to rewrite sb's code than to explain how to rewrite it. During such refactoring phases I often identify underlying problems – among them misdesigned pieces of the architecture and missing abstractions & tools (in this case - pseudofs framework, apparently). If a problem seems superficial to you, it doesn't need to be - patience is a virtue.


You preferred to choose an easy task, because you have a full-time job. We know that one learns the most from challenges... however if you're persistent you can find challenges even in seemingly dull tasks. As for the project, in long run it may serve as a research platform – for now nobody knows its true purpose.


When I was on internal interview by Google kernel team, they told me that it's not uncommon for one not to push a line of code into the kernel for a month. I rejected the offer... and now I know what they were talking about. Developing an OS kernel is not a fast paced project.


One of the rules I set up at the beginning of the project was (roughly): ""Only elegant and clean enough solutions will be integrated into the kernel source base.""
If I see value in a piece of code that cannot be immediately merged, my task is to adapt it appropriately – either by leaving remarks during code reviews or doing changes by hand. Heavy code rewrites happens to other people too – it's not uncommon, unfortunately. Nice ideas are great, but it takes some effort and talent to convey them.
We've been working on the kernel for about a year. Throughout this time you've received a lot of feedback from me, you've seen other people's code that eventually got merged. I encouraged you to read books explaining good practice (The Pragmatic Programmer, The Art of Unix Programming, etc.). The outcome of my efforts is not overwhelming, that's a pity.
Also... please note that I asked you to split the PR into smaller changes and you rejected my kind request.


Finally... I'd much prefer if we could focus on getting your ideas hammered out into good code. Getting emotional will get us nowhere. Let's be professional.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,337,2017-05-20T18:59:17Z,2017-05-29T18:00:42Z,2017-05-30T09:09:25Z,MERGED,True,214,69,12,https://github.com/cahirwpz,readdir operation for initrd with generic readdir algorithm,15,[],https://github.com/cahirwpz/mimiker/pull/337,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/337#issuecomment-303232119,"This change extracts code from #316 required to implement readdir operation for initrd filesystem. Preliminary work has been done by @coodie. I've only abstracted away readdir routine to be as independant from the filesystem as possible. Hopefully readdir_generic will be reused by other filesystems, in particular pseudofs framework (yet to be implemented) used to create devfs, stdvgafs and other device filesystems.","One very non-obvious thing is that we are going to need to return . and .. entries in generic readdir, I can't find any documentation on this but this is returned by getdirentries on linux so I assume this is necessary, they even have different inode numbers for different directories.

Indeed I completely omitted that problem. I'm not going to add options to readdir_generic instead of it I'll normalize ramdisk contents so that it matches common expectations (i.e. lack of files representing . and ..).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,337,2017-05-20T18:59:17Z,2017-05-29T18:00:42Z,2017-05-30T09:09:25Z,MERGED,True,214,69,12,https://github.com/cahirwpz,readdir operation for initrd with generic readdir algorithm,15,[],https://github.com/cahirwpz/mimiker/pull/337,https://github.com/cahirwpz,5,https://github.com/cahirwpz/mimiker/pull/337#issuecomment-303257672,"This change extracts code from #316 required to implement readdir operation for initrd filesystem. Preliminary work has been done by @coodie. I've only abstracted away readdir routine to be as independant from the filesystem as possible. Hopefully readdir_generic will be reused by other filesystems, in particular pseudofs framework (yet to be implemented) used to create devfs, stdvgafs and other device filesystems.","How does enumeration of inodes relate to generic_readdir ?

I have added a c_parent field to cpio_node_t as well. FTM their usefulness may not be apparent. I'm still trying to add . and .. in a graceful manner. When I'm done with modifications I'll remove WIP branch so we can go back to the review process.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,337,2017-05-20T18:59:17Z,2017-05-29T18:00:42Z,2017-05-30T09:09:25Z,MERGED,True,214,69,12,https://github.com/cahirwpz,readdir operation for initrd with generic readdir algorithm,15,[],https://github.com/cahirwpz/mimiker/pull/337,https://github.com/cahirwpz,6,https://github.com/cahirwpz/mimiker/pull/337#issuecomment-304446126,"This change extracts code from #316 required to implement readdir operation for initrd filesystem. Preliminary work has been done by @coodie. I've only abstracted away readdir routine to be as independant from the filesystem as possible. Hopefully readdir_generic will be reused by other filesystems, in particular pseudofs framework (yet to be implemented) used to create devfs, stdvgafs and other device filesystems.","Please continue the review. I added . and .. handling and simplified the interface a bit.
I skipped the problem of using seek on directories, and did not use file->f_data for optimization. When the PR is merged I'll add an issue describing features that one could add to current implementation.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,337,2017-05-20T18:59:17Z,2017-05-29T18:00:42Z,2017-05-30T09:09:25Z,MERGED,True,214,69,12,https://github.com/cahirwpz,readdir operation for initrd with generic readdir algorithm,15,[],https://github.com/cahirwpz/mimiker/pull/337,https://github.com/cahirwpz,7,https://github.com/cahirwpz/mimiker/pull/337#issuecomment-304500990,"This change extracts code from #316 required to implement readdir operation for initrd filesystem. Preliminary work has been done by @coodie. I've only abstracted away readdir routine to be as independant from the filesystem as possible. Hopefully readdir_generic will be reused by other filesystems, in particular pseudofs framework (yet to be implemented) used to create devfs, stdvgafs and other device filesystems.",Please review so that we can return to #316.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,337,2017-05-20T18:59:17Z,2017-05-29T18:00:42Z,2017-05-30T09:09:25Z,MERGED,True,214,69,12,https://github.com/cahirwpz,readdir operation for initrd with generic readdir algorithm,15,[],https://github.com/cahirwpz/mimiker/pull/337,https://github.com/cahirwpz,8,https://github.com/cahirwpz/mimiker/pull/337#issuecomment-304577169,"This change extracts code from #316 required to implement readdir operation for initrd filesystem. Preliminary work has been done by @coodie. I've only abstracted away readdir routine to be as independant from the filesystem as possible. Hopefully readdir_generic will be reused by other filesystems, in particular pseudofs framework (yet to be implemented) used to create devfs, stdvgafs and other device filesystems.","I'm going to merge this branch today's evening. If you have any remarks or questions please say
/ ask them now.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,339,2017-05-23T00:01:12Z,2017-05-25T20:04:31Z,2017-05-31T19:56:31Z,MERGED,True,5,5,2,https://github.com/laky55555,"Modified klog test to comply with implementation, fix bug with costum…",1,[],https://github.com/cahirwpz/mimiker/pull/339,https://github.com/laky55555,1,https://github.com/cahirwpz/mimiker/pull/339,"Resolving bugs in klog test introduced with changes in klog implementation.
Fixing bug in definition of klog with custom mask.","Resolving bugs in klog test introduced with changes in klog implementation.
Fixing bug in definition of klog with custom mask.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,339,2017-05-23T00:01:12Z,2017-05-25T20:04:31Z,2017-05-31T19:56:31Z,MERGED,True,5,5,2,https://github.com/laky55555,"Modified klog test to comply with implementation, fix bug with costum…",1,[],https://github.com/cahirwpz/mimiker/pull/339,https://github.com/laky55555,2,https://github.com/cahirwpz/mimiker/pull/339#issuecomment-303257238,"Resolving bugs in klog test introduced with changes in klog implementation.
Fixing bug in definition of klog with custom mask.","Maybe we should introduce change mask in scope for klog, in the same
way/reason as with mutexes.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,339,2017-05-23T00:01:12Z,2017-05-25T20:04:31Z,2017-05-31T19:56:31Z,MERGED,True,5,5,2,https://github.com/laky55555,"Modified klog test to comply with implementation, fix bug with costum…",1,[],https://github.com/cahirwpz/mimiker/pull/339,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/339#issuecomment-303311742,"Resolving bugs in klog test introduced with changes in klog implementation.
Fixing bug in definition of klog with custom mask.","Maybe we should introduce change mask in scope for klog, in the same way/reason as with mutexes.

Please feel free to add it to this PR.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,340,2017-05-23T00:34:46Z,2017-05-30T07:24:10Z,2017-05-30T09:09:24Z,MERGED,True,118,22,8,https://github.com/laky55555,"Added kdump klog functionality, fixed bug in segment ptable",9,[],https://github.com/cahirwpz/mimiker/pull/340,https://github.com/laky55555,1,https://github.com/cahirwpz/mimiker/pull/340,"Added new printing in gdb for klog.
Currently everything in klog is printed.
Maybe kdump klog should also implement some kind flags,
-v for modifying what we want to print on the screen.
[Usage] kdump klog","Added new printing in gdb for klog.
Currently everything in klog is printed.
Maybe kdump klog should also implement some kind flags,
-v for modifying what we want to print on the screen.
[Usage] kdump klog",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,340,2017-05-23T00:34:46Z,2017-05-30T07:24:10Z,2017-05-30T09:09:24Z,MERGED,True,118,22,8,https://github.com/laky55555,"Added kdump klog functionality, fixed bug in segment ptable",9,[],https://github.com/cahirwpz/mimiker/pull/340,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/340#issuecomment-303332406,"Added new printing in gdb for klog.
Currently everything in klog is printed.
Maybe kdump klog should also implement some kind flags,
-v for modifying what we want to print on the screen.
[Usage] kdump klog",FYI kl_timestamp type was changed to timeval_t. Please update your code to reflect that change.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,340,2017-05-23T00:34:46Z,2017-05-30T07:24:10Z,2017-05-30T09:09:24Z,MERGED,True,118,22,8,https://github.com/laky55555,"Added kdump klog functionality, fixed bug in segment ptable",9,[],https://github.com/cahirwpz/mimiker/pull/340,https://github.com/laky55555,3,https://github.com/cahirwpz/mimiker/pull/340#issuecomment-304524302,"Added new printing in gdb for klog.
Currently everything in klog is printed.
Maybe kdump klog should also implement some kind flags,
-v for modifying what we want to print on the screen.
[Usage] kdump klog",[NOTE] After mips_timer module is initialized timer starts from beginning again.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,341,2017-05-23T13:16:47Z,2017-05-25T06:24:12Z,2017-05-25T06:24:12Z,MERGED,True,30,0,1,https://github.com/dyniec,graph visualisation of system initialization process,4,[],https://github.com/cahirwpz/mimiker/pull/341,https://github.com/dyniec,1,https://github.com/cahirwpz/mimiker/pull/341,"Requires graphviz package.
Usage (in main mimiker directory):
python3 script/show-sysinit.py | dot -Tpng > a.png.","Requires graphviz package.
Usage (in main mimiker directory):
python3 script/show-sysinit.py | dot -Tpng > a.png.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,341,2017-05-23T13:16:47Z,2017-05-25T06:24:12Z,2017-05-25T06:24:12Z,MERGED,True,30,0,1,https://github.com/dyniec,graph visualisation of system initialization process,4,[],https://github.com/cahirwpz/mimiker/pull/341,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/341#issuecomment-303768942,"Requires graphviz package.
Usage (in main mimiker directory):
python3 script/show-sysinit.py | dot -Tpng > a.png.","Please fix all errors and warnings reported by pep8. The script is installed on mimiker server:
# pep8 script/show-sysinit.py
script/show-sysinit.py:3:10: E401 multiple imports on one line
script/show-sysinit.py:5:1: E302 expected 2 blank lines, found 1
...

Just a side note... probably pep8 check should be integrated into our build process.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,341,2017-05-23T13:16:47Z,2017-05-25T06:24:12Z,2017-05-25T06:24:12Z,MERGED,True,30,0,1,https://github.com/dyniec,graph visualisation of system initialization process,4,[],https://github.com/cahirwpz/mimiker/pull/341,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/341#issuecomment-303830895,"Requires graphviz package.
Usage (in main mimiker directory):
python3 script/show-sysinit.py | dot -Tpng > a.png.","Please implement #345, so that code style problem is solved once and for all, and return here.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,343,2017-05-24T18:44:08Z,2017-05-25T21:29:18Z,2017-05-25T21:29:18Z,CLOSED,False,173,95,56,https://github.com/czapiga,Adding -Wextra and -Wstrict-prototypes compile flags,5,"['bug', 'WiP']",https://github.com/cahirwpz/mimiker/pull/343,https://github.com/czapiga,1,https://github.com/cahirwpz/mimiker/pull/343,PR for #342,PR for #342,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,343,2017-05-24T18:44:08Z,2017-05-25T21:29:18Z,2017-05-25T21:29:18Z,CLOSED,False,173,95,56,https://github.com/czapiga,Adding -Wextra and -Wstrict-prototypes compile flags,5,"['bug', 'WiP']",https://github.com/cahirwpz/mimiker/pull/343,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/343#issuecomment-303816269,PR for #342,I suppose it might be better to use __unused where applicable instead of (void)x.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,343,2017-05-24T18:44:08Z,2017-05-25T21:29:18Z,2017-05-25T21:29:18Z,CLOSED,False,173,95,56,https://github.com/czapiga,Adding -Wextra and -Wstrict-prototypes compile flags,5,"['bug', 'WiP']",https://github.com/cahirwpz/mimiker/pull/343,https://github.com/czapiga,3,https://github.com/cahirwpz/mimiker/pull/343#issuecomment-303821869,PR for #342,It's like function signature with clean list of arguments in one line vs function signature with few lines of params and their attributes. I would like to hear a good argument before I do this work one more time (it melts my brain).,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,343,2017-05-24T18:44:08Z,2017-05-25T21:29:18Z,2017-05-25T21:29:18Z,CLOSED,False,173,95,56,https://github.com/czapiga,Adding -Wextra and -Wstrict-prototypes compile flags,5,"['bug', 'WiP']",https://github.com/cahirwpz/mimiker/pull/343,https://github.com/czapiga,4,https://github.com/cahirwpz/mimiker/pull/343#issuecomment-303831274,PR for #342,"Well, I have bigger problem now after changing critical_enter() to critical_enter(void). As far as I understand SCOPED_STMT and WITH_STMT is passing NULL to that function(and to void critical_leave(void);):

In file included from /home/czapiga/mimiker/include/klog.h:4:0,
from intr.c:2:
intr.c: In function 'mips_intr_setup':
/home/czapiga/mimiker/include/sync.h:22:42: error: too many arguments to function 'critical_enter'
#define CRITICAL_SECTION WITH_STMT(void, critical_enter, critical_leave, NULL)
^
/home/czapiga/mimiker/include/common.h:116:5: note: in definition of macro 'SCOPED_STMT'
ACQUIRE(VAL, ##VA_ARGS);                                               
     ^
/home/czapiga/mimiker/include/sync.h:22:26: note: in expansion of macro 'WITH_STMT'
#define CRITICAL_SECTION WITH_STMT(void, critical_enter, critical_leave, NULL)
^
intr.c:47:3: note: in expansion of macro 'CRITICAL_SECTION'
CRITICAL_SECTION {

Do you know how to fix that? I was trying to create SCOPED_STMT0 and WITH_STMT0 with no VAL, ##__VA_ARGS__ but I failed because RELEASE was still getting some input param
Full output on failed travis job :)",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,343,2017-05-24T18:44:08Z,2017-05-25T21:29:18Z,2017-05-25T21:29:18Z,CLOSED,False,173,95,56,https://github.com/czapiga,Adding -Wextra and -Wstrict-prototypes compile flags,5,"['bug', 'WiP']",https://github.com/cahirwpz/mimiker/pull/343,https://github.com/cahirwpz,5,https://github.com/cahirwpz/mimiker/pull/343#issuecomment-303840281,PR for #342,Hmm... I think you're trying to do too much for one go. Can we start with adding only -Wstrict-prototypes and then with consecutive PRs add one warning option (and fix all offending code) at a time?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,343,2017-05-24T18:44:08Z,2017-05-25T21:29:18Z,2017-05-25T21:29:18Z,CLOSED,False,173,95,56,https://github.com/czapiga,Adding -Wextra and -Wstrict-prototypes compile flags,5,"['bug', 'WiP']",https://github.com/cahirwpz/mimiker/pull/343,https://github.com/czapiga,6,https://github.com/cahirwpz/mimiker/pull/343#issuecomment-303841904,PR for #342,Please no.. I think it's almost ready (blocked by critical interface) and these are just some trivial changes. If you insist on splitting it then we can push -Wextra part first since it was already working (fixed all issues in previous commits).,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,343,2017-05-24T18:44:08Z,2017-05-25T21:29:18Z,2017-05-25T21:29:18Z,CLOSED,False,173,95,56,https://github.com/czapiga,Adding -Wextra and -Wstrict-prototypes compile flags,5,"['bug', 'WiP']",https://github.com/cahirwpz/mimiker/pull/343,https://github.com/cahirwpz,7,https://github.com/cahirwpz/mimiker/pull/343#issuecomment-303843417,PR for #342,@czapiga I can help you with that. It should be relatively easy to extract -Wstrict-prototypes changes thanks to cherry picking.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,343,2017-05-24T18:44:08Z,2017-05-25T21:29:18Z,2017-05-25T21:29:18Z,CLOSED,False,173,95,56,https://github.com/czapiga,Adding -Wextra and -Wstrict-prototypes compile flags,5,"['bug', 'WiP']",https://github.com/cahirwpz/mimiker/pull/343,https://github.com/czapiga,8,https://github.com/cahirwpz/mimiker/pull/343#issuecomment-303846248,PR for #342,"@cahirwpz Ok, I will revert some changes and leave only -Wextra part in this PR. Then I will create PR for -Wstrict-prototypes.",True,{'THUMBS_UP': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,343,2017-05-24T18:44:08Z,2017-05-25T21:29:18Z,2017-05-25T21:29:18Z,CLOSED,False,173,95,56,https://github.com/czapiga,Adding -Wextra and -Wstrict-prototypes compile flags,5,"['bug', 'WiP']",https://github.com/cahirwpz/mimiker/pull/343,https://github.com/cahirwpz,9,https://github.com/cahirwpz/mimiker/pull/343#issuecomment-303848403,PR for #342,"Greate... and please change Makefile.common to:
WFLAGS   = -Wall -Wstrict-prototypes -Werror
CFLAGS   = -std=gnu11 -Og $(WFLAGS) -fno-builtin -nostdinc -nostdlib \
            $(GCC_SYSTEM_INC) -ffreestanding
CPPFLAGS = $(WFLAGS) -DDEBUG -I$(TOPDIR)/include",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,347,2017-05-24T23:10:58Z,2017-05-25T06:18:46Z,2017-05-25T16:30:07Z,MERGED,True,25,5,3,https://github.com/dyniec,Pep8,4,[],https://github.com/cahirwpz/mimiker/pull/347,https://github.com/dyniec,1,https://github.com/cahirwpz/mimiker/pull/347,"I had to use different approach than verify-format.sh. I just locate *.py files which aren't hidden (.ycm_extra_conf.py) or in cache (newlib/doc) and run pep8 on every one.
Implementation of  #345","I had to use different approach than verify-format.sh. I just locate *.py files which aren't hidden (.ycm_extra_conf.py) or in cache (newlib/doc) and run pep8 on every one.
Implementation of  #345",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,347,2017-05-24T23:10:58Z,2017-05-25T06:18:46Z,2017-05-25T16:30:07Z,MERGED,True,25,5,3,https://github.com/dyniec,Pep8,4,[],https://github.com/cahirwpz/mimiker/pull/347,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/347#issuecomment-303932608,"I had to use different approach than verify-format.sh. I just locate *.py files which aren't hidden (.ycm_extra_conf.py) or in cache (newlib/doc) and run pep8 on every one.
Implementation of  #345","I'll merge it as is, but please quickly prepare another PR that fixes PEP8 warnings in our code base.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,348,2017-05-25T19:35:04Z,2017-05-26T13:58:56Z,2017-05-28T08:41:14Z,MERGED,True,132,72,16,https://github.com/cahirwpz,"Add VOP_CLOSE, extend VOP_READDIR with extra argument",14,[],https://github.com/cahirwpz/mimiker/pull/348,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/348,"Short description:

add VOP_CLOSE operation that takes file_t object,
VOP_READDIR takes f_data field of file_t object,
move some function declarations from mount.h to vfs.h which they belong to,
some minor cleanups.

I decided that initrd_vnode_open for V_DIR will create state for readdir_generic, and will keep it in f_data field of file_t structure. Thus we need initrd_vnode_close to be capable of removing that state. The state itself will be passed as an extra argument to VOP_READDIR.","Short description:

add VOP_CLOSE operation that takes file_t object,
VOP_READDIR takes f_data field of file_t object,
move some function declarations from mount.h to vfs.h which they belong to,
some minor cleanups.

I decided that initrd_vnode_open for V_DIR will create state for readdir_generic, and will keep it in f_data field of file_t structure. Thus we need initrd_vnode_close to be capable of removing that state. The state itself will be passed as an extra argument to VOP_READDIR.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,349,2017-05-25T20:00:31Z,2017-05-25T20:30:24Z,2017-05-28T08:41:14Z,MERGED,True,31,31,11,https://github.com/cahirwpz,Fix PEP8 errors and warnings.,2,[],https://github.com/cahirwpz/mimiker/pull/349,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/349,Please review it quickly. I'd like to merge it ASAP.,Please review it quickly. I'd like to merge it ASAP.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,350,2017-05-25T21:55:13Z,2017-05-26T06:47:44Z,2017-05-26T06:47:45Z,MERGED,True,42,35,15,https://github.com/czapiga,Enabled Wextra compilation flag,5,[],https://github.com/cahirwpz/mimiker/pull/350,https://github.com/czapiga,1,https://github.com/cahirwpz/mimiker/pull/350,Wextra part of #342,Wextra part of #342,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,351,2017-05-26T07:26:39Z,2017-05-26T23:28:32Z,2017-05-28T08:41:13Z,MERGED,True,164,39,13,https://github.com/cahirwpz,Import stat.h from NetBSD and add necessary types,5,[],https://github.com/cahirwpz/mimiker/pull/351,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/351,@dyniec Because you're going to implement stat syscall and modify ls_rec program to print out file information I decided to copy and modify necessary header files code from *BSD.,@dyniec Because you're going to implement stat syscall and modify ls_rec program to print out file information I decided to copy and modify necessary header files code from *BSD.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,353,2017-05-27T15:25:49Z,2017-05-30T06:06:08Z,2017-05-30T06:06:08Z,MERGED,True,141,117,17,https://github.com/czapiga,Timer events,19,[],https://github.com/cahirwpz/mimiker/pull/353,https://github.com/czapiga,1,https://github.com/cahirwpz/mimiker/pull/353,Implements timer_event_t part of #327,Implements timer_event_t part of #327,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,353,2017-05-27T15:25:49Z,2017-05-30T06:06:08Z,2017-05-30T06:06:08Z,MERGED,True,141,117,17,https://github.com/czapiga,Timer events,19,[],https://github.com/cahirwpz/mimiker/pull/353,https://github.com/czapiga,2,https://github.com/cahirwpz/mimiker/pull/353#issuecomment-304462530,Implements timer_event_t part of #327,This code works on OVPsim but it hangs on QEMU,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,353,2017-05-27T15:25:49Z,2017-05-30T06:06:08Z,2017-05-30T06:06:08Z,MERGED,True,141,117,17,https://github.com/czapiga,Timer events,19,[],https://github.com/cahirwpz/mimiker/pull/353,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/353#issuecomment-304464271,Implements timer_event_t part of #327,Well... it's not synchronized... in this case with CRITICAL_SECTION. I would not expect it to work ;-),True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,353,2017-05-27T15:25:49Z,2017-05-30T06:06:08Z,2017-05-30T06:06:08Z,MERGED,True,141,117,17,https://github.com/czapiga,Timer events,19,[],https://github.com/cahirwpz/mimiker/pull/353,https://github.com/czapiga,4,https://github.com/cahirwpz/mimiker/pull/353#issuecomment-304478386,Implements timer_event_t part of #327,What should I actually synchronize? I've tried to add CRITICAL_SECTION only to intr handler and then even to every function in that module and result is the same.. Also it wasn't synchronized before that's why I didn't add any CRITICAL_SECTION in first place,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,353,2017-05-27T15:25:49Z,2017-05-30T06:06:08Z,2017-05-30T06:06:08Z,MERGED,True,141,117,17,https://github.com/czapiga,Timer events,19,[],https://github.com/cahirwpz/mimiker/pull/353,https://github.com/cahirwpz,5,https://github.com/cahirwpz/mimiker/pull/353#issuecomment-304497829,Implements timer_event_t part of #327,"Following functions do need to by synchronized when calling outside of interrupt context:

void cpu_timer_add_event(timer_event_t *tev);
void cpu_timer_remove_event(timer_event_t *tev);
I think you may safely use CRITICAL_SECTION within an interrupt as well.

Following function should never be called outside interrupt handler, so it shouldn't be even exposed in timer.h. It doesn't need to be synchronized.

void cpu_timer_intr(void *arg)


The interrupt should only be registered (i.e. mips_intr_setup), when there's at least one timer_event available for processing, otherwise the interrupt should be disabled. Please don't add superficial event in cpu_timer_init.


You may use klog facility within interrupt context. However KL_INTR should be disabled by default, so that message printing do not interfere with interrupt processing, which is time critical. You should be able to print klog conveniently from gdb after kernel is stopped, as soon as @laky55555 finishes work on #340 (it's still marked as work in progress).


If you're sure your code should work, but the problem persists, we'll have to investigate mips_intr_* routines to make sure, there's no bug there.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,353,2017-05-27T15:25:49Z,2017-05-30T06:06:08Z,2017-05-30T06:06:08Z,MERGED,True,141,117,17,https://github.com/czapiga,Timer events,19,[],https://github.com/cahirwpz/mimiker/pull/353,https://github.com/czapiga,6,https://github.com/cahirwpz/mimiker/pull/353#issuecomment-304509488,Implements timer_event_t part of #327,"@cahirwpz

Now these functions are called only while processing interrupt
I made that static and removed from interface
I think there will be always at least one timer_event - void mips_clock(timer_event_t *tev) which calls void clock(systime_t _ms) and I add it in static void cpu_timer_init(void). I can create static void mips_clock_init(void) in mips/clock.c and copy that initialization code there if thats what you want",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,353,2017-05-27T15:25:49Z,2017-05-30T06:06:08Z,2017-05-30T06:06:08Z,MERGED,True,141,117,17,https://github.com/czapiga,Timer events,19,[],https://github.com/cahirwpz/mimiker/pull/353,https://github.com/cahirwpz,7,https://github.com/cahirwpz/mimiker/pull/353#issuecomment-304509845,Implements timer_event_t part of #327,"That's true, but it should be handled as any other timer event (need not be a special case).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,353,2017-05-27T15:25:49Z,2017-05-30T06:06:08Z,2017-05-30T06:06:08Z,MERGED,True,141,117,17,https://github.com/czapiga,Timer events,19,[],https://github.com/cahirwpz/mimiker/pull/353,https://github.com/cahirwpz,8,https://github.com/cahirwpz/mimiker/pull/353#issuecomment-304708595,Implements timer_event_t part of #327,Ok. I'm taking it over in order to debug it.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,354,2017-05-28T01:33:42Z,2018-12-17T18:09:02Z,2018-12-17T18:32:01Z,CLOSED,False,61,7,4,https://github.com/coodie,vnode ops extend,6,['WiP'],https://github.com/cahirwpz/mimiker/pull/354,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/354,"While working on tmpfs prototype I realised I'll need some extra operations on vnodes and extra system calls. I have recently pushed some of these to master, but I think it needs a little review and discussion.
I'm not so sure what vattr argument is for, but I hope this will clarify.
Tests for these functionalities will come with tmpfs implementation.","While working on tmpfs prototype I realised I'll need some extra operations on vnodes and extra system calls. I have recently pushed some of these to master, but I think it needs a little review and discussion.
I'm not so sure what vattr argument is for, but I hope this will clarify.
Tests for these functionalities will come with tmpfs implementation.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,354,2017-05-28T01:33:42Z,2018-12-17T18:09:02Z,2018-12-17T18:32:01Z,CLOSED,False,61,7,4,https://github.com/coodie,vnode ops extend,6,['WiP'],https://github.com/cahirwpz/mimiker/pull/354,https://github.com/coodie,2,https://github.com/cahirwpz/mimiker/pull/354#issuecomment-305152439,"While working on tmpfs prototype I realised I'll need some extra operations on vnodes and extra system calls. I have recently pushed some of these to master, but I think it needs a little review and discussion.
I'm not so sure what vattr argument is for, but I hope this will clarify.
Tests for these functionalities will come with tmpfs implementation.","@cahirwpz
Can you please take a look at it?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,354,2017-05-28T01:33:42Z,2018-12-17T18:09:02Z,2018-12-17T18:32:01Z,CLOSED,False,61,7,4,https://github.com/coodie,vnode ops extend,6,['WiP'],https://github.com/cahirwpz/mimiker/pull/354,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/354#issuecomment-447942055,"While working on tmpfs prototype I realised I'll need some extra operations on vnodes and extra system calls. I have recently pushed some of these to master, but I think it needs a little review and discussion.
I'm not so sure what vattr argument is for, but I hope this will clarify.
Tests for these functionalities will come with tmpfs implementation.","Unfortunately, we're not going to make any use of this code.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,356,2017-05-28T01:56:39Z,2019-02-12T14:41:07Z,2019-02-12T15:43:59Z,CLOSED,False,454,7,11,https://github.com/coodie,Add tmpfs,27,['WiP'],https://github.com/cahirwpz/mimiker/pull/356,https://github.com/coodie,1,https://github.com/cahirwpz/mimiker/pull/356,"This is WIP branch providing tmpfs.
Depends on #354","This is WIP branch providing tmpfs.
Depends on #354",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,356,2017-05-28T01:56:39Z,2019-02-12T14:41:07Z,2019-02-12T15:43:59Z,CLOSED,False,454,7,11,https://github.com/coodie,Add tmpfs,27,['WiP'],https://github.com/cahirwpz/mimiker/pull/356,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/356#issuecomment-462784790,"This is WIP branch providing tmpfs.
Depends on #354",The value of this PR diminished to the point I find it to have no value to Mimiker anymore.,True,{'CONFUSED': ['https://github.com/rafalcieslak']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,357,2017-05-29T22:27:20Z,2017-06-06T13:15:19Z,2017-06-06T13:15:19Z,MERGED,True,311,259,90,https://github.com/czapiga,Enabled -Wstrict-prototypes (part of #342),4,[],https://github.com/cahirwpz/mimiker/pull/357,https://github.com/czapiga,1,https://github.com/cahirwpz/mimiker/pull/357,I'm not sure about changes in sys/fork.c sys/ktest.c. Also there is problem in include/sync.h I've mentioned before,I'm not sure about changes in sys/fork.c sys/ktest.c. Also there is problem in include/sync.h I've mentioned before,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,358,2017-05-30T09:59:54Z,2017-06-27T13:53:53Z,2017-06-27T13:53:53Z,MERGED,True,139,7,10,https://github.com/dyniec,lseek whence,16,['WiP'],https://github.com/cahirwpz/mimiker/pull/358,https://github.com/dyniec,1,https://github.com/cahirwpz/mimiker/pull/358,Doesn't check if file is pipe or offset overflow occurred. I will add tests in this branch.,Doesn't check if file is pipe or offset overflow occurred. I will add tests in this branch.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,358,2017-05-30T09:59:54Z,2017-06-27T13:53:53Z,2017-06-27T13:53:53Z,MERGED,True,139,7,10,https://github.com/dyniec,lseek whence,16,['WiP'],https://github.com/cahirwpz/mimiker/pull/358,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/358#issuecomment-306484656,Doesn't check if file is pipe or offset overflow occurred. I will add tests in this branch.,@dyniec Any progress here? Remember to run make format before you commit a change.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,358,2017-05-30T09:59:54Z,2017-06-27T13:53:53Z,2017-06-27T13:53:53Z,MERGED,True,139,7,10,https://github.com/dyniec,lseek whence,16,['WiP'],https://github.com/cahirwpz/mimiker/pull/358,https://github.com/dyniec,3,https://github.com/cahirwpz/mimiker/pull/358#issuecomment-306493860,Doesn't check if file is pipe or offset overflow occurred. I will add tests in this branch.,"Soon I will send userspace program.
…
On 6 June 2017 at 15:23, Krystian Bacławski ***@***.***> wrote:
 @dyniec <https://github.com/dyniec> Any progress here? Remember to run make
 format before you commit a change.

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#358 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/AGx5Y9WwzTWZc4B1u98MzvEbjpvpOOVnks5sBVLcgaJpZM4NqEz0>
 .


-- 
Pozdrawiam
Paweł Dybiec",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,360,2017-05-30T14:11:49Z,2017-06-08T17:03:49Z,2017-06-09T21:06:33Z,MERGED,True,73,35,2,https://github.com/cahirwpz,RTC driver mockup,8,[],https://github.com/cahirwpz/mimiker/pull/360,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/360,"This change shows that interrupts are correctly routed from ISA devices to the CPU.
2Hz periodic interrupt is used to wake up main thread in order to print a message.","This change shows that interrupts are correctly routed from ISA devices to the CPU.
2Hz periodic interrupt is used to wake up main thread in order to print a message.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,366,2017-06-05T20:50:27Z,2018-07-20T19:23:25Z,2018-07-20T19:23:25Z,MERGED,True,85,3,9,https://github.com/czapiga,"clock_gettime, nanosleep and gettimeofday syscalls",28,['WiP'],https://github.com/cahirwpz/mimiker/pull/366,https://github.com/czapiga,1,https://github.com/cahirwpz/mimiker/pull/366,Implementing syscalls from #363,Implementing syscalls from #363,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,366,2017-06-05T20:50:27Z,2018-07-20T19:23:25Z,2018-07-20T19:23:25Z,MERGED,True,85,3,9,https://github.com/czapiga,"clock_gettime, nanosleep and gettimeofday syscalls",28,['WiP'],https://github.com/cahirwpz/mimiker/pull/366,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/366#issuecomment-307486444,Implementing syscalls from #363,@czapiga What is the progress on the task? Have you read my recent comment in #363?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,366,2017-06-05T20:50:27Z,2018-07-20T19:23:25Z,2018-07-20T19:23:25Z,MERGED,True,85,3,9,https://github.com/czapiga,"clock_gettime, nanosleep and gettimeofday syscalls",28,['WiP'],https://github.com/cahirwpz/mimiker/pull/366,https://github.com/czapiga,3,https://github.com/cahirwpz/mimiker/pull/366#issuecomment-307558275,Implementing syscalls from #363,@cahirwpz I will work on that in next three days (starting tomorrow). Sorry but I am very busy with my work - I had many overtime hours this week including today. I think I will end it before our next meeting.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,366,2017-06-05T20:50:27Z,2018-07-20T19:23:25Z,2018-07-20T19:23:25Z,MERGED,True,85,3,9,https://github.com/czapiga,"clock_gettime, nanosleep and gettimeofday syscalls",28,['WiP'],https://github.com/cahirwpz/mimiker/pull/366,https://github.com/czapiga,4,https://github.com/cahirwpz/mimiker/pull/366#issuecomment-308272717,Implementing syscalls from #363,"@cahirwpz Well, I'm not sure if I'm doing it right. I'm calling do_clock_gettime in user/libmimiker/time.c instead of clock_gettime because there is no clock_gettime function for now. I need time.h header and I'm not sure if I should just link our include/time.h to user/newlib/overrides/include/ and make #ifdef _KERNELSPACE or what..",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,366,2017-06-05T20:50:27Z,2018-07-20T19:23:25Z,2018-07-20T19:23:25Z,MERGED,True,85,3,9,https://github.com/czapiga,"clock_gettime, nanosleep and gettimeofday syscalls",28,['WiP'],https://github.com/cahirwpz/mimiker/pull/366,https://github.com/czapiga,5,https://github.com/cahirwpz/mimiker/pull/366#issuecomment-311999940,Implementing syscalls from #363,@cahirwpz I waited with tests to the point when implementation would be ready. I just wanted to meet with you and discuss few things (related to syscalls implementation). Also please check my mails I sent you in last 2 days.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,366,2017-06-05T20:50:27Z,2018-07-20T19:23:25Z,2018-07-20T19:23:25Z,MERGED,True,85,3,9,https://github.com/czapiga,"clock_gettime, nanosleep and gettimeofday syscalls",28,['WiP'],https://github.com/cahirwpz/mimiker/pull/366,https://github.com/cahirwpz,6,https://github.com/cahirwpz/mimiker/pull/366#issuecomment-397183966,Implementing syscalls from #363,@melouber & @ilikeheaps After you're done with callouts and interruptible sleep I'd like you to finish this PR. Please note the change adds user-space visible functionality to the kernel!,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,368,2017-06-06T13:34:52Z,2017-06-09T20:01:26Z,2017-06-09T20:01:26Z,CLOSED,False,2,0,1,https://github.com/dyniec,Mandelbrot bug research,4,"['bug', 'WiP']",https://github.com/cahirwpz/mimiker/pull/368,https://github.com/dyniec,1,https://github.com/cahirwpz/mimiker/pull/368,#359,#359,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,368,2017-06-06T13:34:52Z,2017-06-09T20:01:26Z,2017-06-09T20:01:26Z,CLOSED,False,2,0,1,https://github.com/dyniec,Mandelbrot bug research,4,"['bug', 'WiP']",https://github.com/cahirwpz/mimiker/pull/368,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/368#issuecomment-307325304,#359,"After merge with master, it works on mimiker server. However, image looks kinda funky. Definitely it needs some investigation.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,368,2017-06-06T13:34:52Z,2017-06-09T20:01:26Z,2017-06-09T20:01:26Z,CLOSED,False,2,0,1,https://github.com/dyniec,Mandelbrot bug research,4,"['bug', 'WiP']",https://github.com/cahirwpz/mimiker/pull/368,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/368#issuecomment-307486017,#359,After running make distclean in master branch mandelbrot works like a charm!,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,370,2017-06-06T21:04:56Z,2017-06-07T06:22:23Z,2017-06-07T06:22:23Z,MERGED,True,3,2,2,https://github.com/rafalcieslak,Fix all problems,2,[],https://github.com/cahirwpz/mimiker/pull/370,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/370,This branch enables QEMU instruction counting and makes it the default simulator.,This branch enables QEMU instruction counting and makes it the default simulator.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,370,2017-06-06T21:04:56Z,2017-06-07T06:22:23Z,2017-06-07T06:22:23Z,MERGED,True,3,2,2,https://github.com/rafalcieslak,Fix all problems,2,[],https://github.com/cahirwpz/mimiker/pull/370,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/370#issuecomment-306617514,This branch enables QEMU instruction counting and makes it the default simulator.,Oohhh... I'm thrilled to see this change in action. Does it work for future problems as well?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,370,2017-06-06T21:04:56Z,2017-06-07T06:22:23Z,2017-06-07T06:22:23Z,MERGED,True,3,2,2,https://github.com/rafalcieslak,Fix all problems,2,[],https://github.com/cahirwpz/mimiker/pull/370,https://github.com/rafalcieslak,3,https://github.com/cahirwpz/mimiker/pull/370#issuecomment-306618289,This branch enables QEMU instruction counting and makes it the default simulator.,Wow! Timeout reached - and I am already able to reproduce the problem! (I had to switch to qemu 2.0  though.),True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,370,2017-06-06T21:04:56Z,2017-06-07T06:22:23Z,2017-06-07T06:22:23Z,MERGED,True,3,2,2,https://github.com/rafalcieslak,Fix all problems,2,[],https://github.com/cahirwpz/mimiker/pull/370,https://github.com/rafalcieslak,4,https://github.com/cahirwpz/mimiker/pull/370#issuecomment-306621906,This branch enables QEMU instruction counting and makes it the default simulator.,"Okay, the issue turned out to be pretty simple - nothing seems to be wrong, the timeout was reached prematurely. This kind of makes sense, as QEMU no longer executes in max-speed mode, but synchronizes everything . This, however, has a nice side effect that execution speed should be the same on all machines (except when the host machine is simply too slow), so we'll probably no longer disagree on timeout values. I suppose we might even tune the speed to more or less match Malta's processor...
EDIT: It appears that QEMU 2.0 ignores shift=N option for icount. Sigh. We can live with the default shift for now.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,370,2017-06-06T21:04:56Z,2017-06-07T06:22:23Z,2017-06-07T06:22:23Z,MERGED,True,3,2,2,https://github.com/rafalcieslak,Fix all problems,2,[],https://github.com/cahirwpz/mimiker/pull/370,https://github.com/cahirwpz,5,https://github.com/cahirwpz/mimiker/pull/370#issuecomment-306629030,This branch enables QEMU instruction counting and makes it the default simulator.,LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,372,2017-06-08T14:55:37Z,2017-06-08T16:39:56Z,2017-06-08T16:43:18Z,MERGED,True,65,54,9,https://github.com/cahirwpz,Various fixes to drivers,3,[],https://github.com/cahirwpz/mimiker/pull/372,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/372,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,373,2017-06-08T16:43:09Z,2018-12-17T10:22:52Z,2018-12-18T22:35:37Z,MERGED,True,183,13,4,https://github.com/cahirwpz,NS16550 UART driver,16,['WiP'],https://github.com/cahirwpz/mimiker/pull/373,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/373,"Testing ground for NS16550 driver that should handle all devices of using same chip interface, i.e. UART0 (COM1), UART1 (COM2), UART2(cbus).","Testing ground for NS16550 driver that should handle all devices of using same chip interface, i.e. UART0 (COM1), UART1 (COM2), UART2(cbus).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,374,2017-06-09T09:34:41Z,2017-06-09T09:35:35Z,2017-06-09T21:06:23Z,MERGED,True,225,153,14,https://github.com/cahirwpz,Changes extracted from #354 + fixes / cleanups,10,[],https://github.com/cahirwpz/mimiker/pull/374,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/374,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,375,2017-06-09T15:58:42Z,2017-06-10T18:51:37Z,2017-06-16T10:26:11Z,MERGED,True,196,137,10,https://github.com/cahirwpz,New devfs API,8,[],https://github.com/cahirwpz/mimiker/pull/375,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/375,"This change introduces API for registering device subtrees in device filesystem. The most apparent improvement is visible on sys/dev_vga.c file. Same functionality is expressed with ~20 lines less, but with addition of directory listing (tested with /bin/ls_rec).
Registering device files (fb, palette and videomode) in a subdirectory (vga) boils down to:
devfs_makedir(NULL, ""vga"", &vga_root);
devfs_makedev(vga_root, ""fb"", &framebuffer_vnodeops, vga); /* /dev/vga/fb */
devfs_makedev(vga_root, ""palette"", &palette_vnodeops, vga); /* /dev/vga/palette */
devfs_makedev(vga_root, ""videomode"", &videomode_vnodeops, vga); /* /dev/vga/videomode */","This change introduces API for registering device subtrees in device filesystem. The most apparent improvement is visible on sys/dev_vga.c file. Same functionality is expressed with ~20 lines less, but with addition of directory listing (tested with /bin/ls_rec).
Registering device files (fb, palette and videomode) in a subdirectory (vga) boils down to:
devfs_makedir(NULL, ""vga"", &vga_root);
devfs_makedev(vga_root, ""fb"", &framebuffer_vnodeops, vga); /* /dev/vga/fb */
devfs_makedev(vga_root, ""palette"", &palette_vnodeops, vga); /* /dev/vga/palette */
devfs_makedev(vga_root, ""videomode"", &videomode_vnodeops, vga); /* /dev/vga/videomode */",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,375,2017-06-09T15:58:42Z,2017-06-10T18:51:37Z,2017-06-16T10:26:11Z,MERGED,True,196,137,10,https://github.com/cahirwpz,New devfs API,8,[],https://github.com/cahirwpz/mimiker/pull/375,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/375#issuecomment-307479820,"This change introduces API for registering device subtrees in device filesystem. The most apparent improvement is visible on sys/dev_vga.c file. Same functionality is expressed with ~20 lines less, but with addition of directory listing (tested with /bin/ls_rec).
Registering device files (fb, palette and videomode) in a subdirectory (vga) boils down to:
devfs_makedir(NULL, ""vga"", &vga_root);
devfs_makedev(vga_root, ""fb"", &framebuffer_vnodeops, vga); /* /dev/vga/fb */
devfs_makedev(vga_root, ""palette"", &palette_vnodeops, vga); /* /dev/vga/palette */
devfs_makedev(vga_root, ""videomode"", &videomode_vnodeops, vga); /* /dev/vga/videomode */",@rafalcieslak Please have a quick look. I hope I didn't miss anything important.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,376,2017-06-09T18:59:48Z,2017-06-09T19:13:58Z,2017-06-09T19:13:58Z,MERGED,True,1,1,1,https://github.com/rafalcieslak,Revert a major regression in vnode_open_generic,1,['bug'],https://github.com/cahirwpz/mimiker/pull/376,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/376,"I suggest to revert this change which was introduced as a part of this major patch. I see no point of it, and because of this change usermode programs are no longer able to write to stdout. Note that:
O_RDONLY = 0
O_WRONLY = 1
O_RDWR = 2

These are numbers, not bitmasks. Thus masking mode with O_RDWR causes files that are requested in O_WRONLY mode (like stdout) to be opened in FF_READ mode, which is incorrect.
I also urge you, again, to manually test some user programs, especially during such extensive changes as the one that introduced this problem, as it would immediately detect this issue and save us both time! Although... I think I shouldn't care anymore.","I suggest to revert this change which was introduced as a part of this major patch. I see no point of it, and because of this change usermode programs are no longer able to write to stdout. Note that:
O_RDONLY = 0
O_WRONLY = 1
O_RDWR = 2

These are numbers, not bitmasks. Thus masking mode with O_RDWR causes files that are requested in O_WRONLY mode (like stdout) to be opened in FF_READ mode, which is incorrect.
I also urge you, again, to manually test some user programs, especially during such extensive changes as the one that introduced this problem, as it would immediately detect this issue and save us both time! Although... I think I shouldn't care anymore.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,376,2017-06-09T18:59:48Z,2017-06-09T19:13:58Z,2017-06-09T19:13:58Z,MERGED,True,1,1,1,https://github.com/rafalcieslak,Revert a major regression in vnode_open_generic,1,['bug'],https://github.com/cahirwpz/mimiker/pull/376,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/376#issuecomment-307475309,"I suggest to revert this change which was introduced as a part of this major patch. I see no point of it, and because of this change usermode programs are no longer able to write to stdout. Note that:
O_RDONLY = 0
O_WRONLY = 1
O_RDWR = 2

These are numbers, not bitmasks. Thus masking mode with O_RDWR causes files that are requested in O_WRONLY mode (like stdout) to be opened in FF_READ mode, which is incorrect.
I also urge you, again, to manually test some user programs, especially during such extensive changes as the one that introduced this problem, as it would immediately detect this issue and save us both time! Although... I think I shouldn't care anymore.","FWIW, that same change broke one more thing: PATH_MAX for sys_open was increased from 256 to 1024, but the corresponding test in fd_test wasn't updated, and thus fd_test fails ATM. I'm going to fix that in utest (#328) instead.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,376,2017-06-09T18:59:48Z,2017-06-09T19:13:58Z,2017-06-09T19:13:58Z,MERGED,True,1,1,1,https://github.com/rafalcieslak,Revert a major regression in vnode_open_generic,1,['bug'],https://github.com/cahirwpz/mimiker/pull/376,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/376#issuecomment-307475815,"I suggest to revert this change which was introduced as a part of this major patch. I see no point of it, and because of this change usermode programs are no longer able to write to stdout. Note that:
O_RDONLY = 0
O_WRONLY = 1
O_RDWR = 2

These are numbers, not bitmasks. Thus masking mode with O_RDWR causes files that are requested in O_WRONLY mode (like stdout) to be opened in FF_READ mode, which is incorrect.
I also urge you, again, to manually test some user programs, especially during such extensive changes as the one that introduced this problem, as it would immediately detect this issue and save us both time! Although... I think I shouldn't care anymore.","I'm running some programs manually... I've already identified the issue and fixed that in here, although I think that reverting that line is plain better. Thanks!

Although... I think I shouldn't care anymore.

You definitely should! You did a great job on testing infrastructure. I hope your #328 effort will greatly improve testing procedure in user-space.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,377,2017-06-09T20:42:21Z,2017-06-09T21:17:45Z,2017-06-09T21:17:45Z,MERGED,True,47,1,2,https://github.com/rafalcieslak,CircleCI support,8,[],https://github.com/cahirwpz/mimiker/pull/377,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/377,"This branch enables CircleCI support (in addition to TravisCI). It will grant us much greater control over our CI environment.
After some research, I've gathered which CircleCI advantages over TravisCI will be of use to us:

CircleCI containers are based on Docker, and in fact they allow to run any docker image! I've chosen Ubuntu 16.04 for a start, as it has all packages we need in decently new versions (QEMU 2.5 from repositories is totally okay for us, though switching to an even newer version in the future won't be a problem).

In fact, at some point we may want to create our own docker image, which would come with all utilities, toolchains and configuration pre-installed. That would be a great way to provide a standardized development environment, and would simplify the CircleCI config a lot - it would be just a matter of pulling our hypothetical docker image.


CircleCI runs so much faster. Not only in terms of CPU, but also network bandwidth and storage I/O. ATM system setup takes 1.5 minutes, compilation takes a minute, and running all tests ~3 minutes.

Yes, 3 minutes for 100 seeds. That's barely 2 seconds per seed! We may be able to reduce the main tests timeout by a great deal.
With a custom docker image system setup would go down to as little as 5 seconds, meaning we would get formatting & compilation results ready within a minute from pushing to repository - WOW!


Open source projects get 4 simultaneously available containers for free. If we enable them, we'll instantly get 4x as many seeds tested within the same time. (Or we might decrease the number of seeds tested per run 4 times, so that we get the same results 4 times faster.)
SSH connection to the testing container is available OOTB, no tricks required - just click ""Restart build with SSH enabled"" and you get an IP+port to connect to. Super useful for testing what went wrong, reproducing issues, or even running GDB directly on the testing environment!
Build runs may upload so-called artifacts, that is - arbitrary files with build and/or test results. We missed that feature on Travis when we wanted to examine what does the initrd.cpio look like when build by Travis. This build script uses this feature to make mimiker.elf and initrd.cpio ready for a direct download - just go to 'Artifacts' tab of build results, and you can download them with a single click. We may want to consider storing kernel output in a similar manner, so that it may be easily downloaded.
CircleCI allows to specify different jobs in a single test run (this feature has minor bugs ATM, so I did not enable it yet). That will allow us to split the test process into multiple stages: compilation, formatting verification, pep8 verification and kernel tests. Each of these will run separately and will appear as a separate check-mark on github. This way we'll know the results of formatting check within few seconds from pushing to repo, while other test modes will be still running. Splitting these into separate checkmarks will also simplify developer's work - it will be immediately apparent when a build failed due to formatting problems or due to other reason.
CircleCI has a very simple file cache available, which allows to store files between builds. Should we download more than just newlib during compilation, we may want to cache these downloads so that they don't need to be repeated on each build run.

Naturally, nothing will build before we enable CircleCI integration for this repository, which is as simple as heading to https://circleci.com/dashboard and flipping the right switch ON. I suppose repository owner should be the one to enable it, although I think I am also able to activate it.
Note that this config is for CircleCI 2.0! CircleCI 2.0 is currently in public beta, and is only enabled when requested via a link at https://circleci.com/beta-access/
For testing & preview, I've enabled CircleCI for my mimiker fork. You can see an example test build here: https://circleci.com/gh/rafalcieslak/mimiker/63","This branch enables CircleCI support (in addition to TravisCI). It will grant us much greater control over our CI environment.
After some research, I've gathered which CircleCI advantages over TravisCI will be of use to us:

CircleCI containers are based on Docker, and in fact they allow to run any docker image! I've chosen Ubuntu 16.04 for a start, as it has all packages we need in decently new versions (QEMU 2.5 from repositories is totally okay for us, though switching to an even newer version in the future won't be a problem).

In fact, at some point we may want to create our own docker image, which would come with all utilities, toolchains and configuration pre-installed. That would be a great way to provide a standardized development environment, and would simplify the CircleCI config a lot - it would be just a matter of pulling our hypothetical docker image.


CircleCI runs so much faster. Not only in terms of CPU, but also network bandwidth and storage I/O. ATM system setup takes 1.5 minutes, compilation takes a minute, and running all tests ~3 minutes.

Yes, 3 minutes for 100 seeds. That's barely 2 seconds per seed! We may be able to reduce the main tests timeout by a great deal.
With a custom docker image system setup would go down to as little as 5 seconds, meaning we would get formatting & compilation results ready within a minute from pushing to repository - WOW!


Open source projects get 4 simultaneously available containers for free. If we enable them, we'll instantly get 4x as many seeds tested within the same time. (Or we might decrease the number of seeds tested per run 4 times, so that we get the same results 4 times faster.)
SSH connection to the testing container is available OOTB, no tricks required - just click ""Restart build with SSH enabled"" and you get an IP+port to connect to. Super useful for testing what went wrong, reproducing issues, or even running GDB directly on the testing environment!
Build runs may upload so-called artifacts, that is - arbitrary files with build and/or test results. We missed that feature on Travis when we wanted to examine what does the initrd.cpio look like when build by Travis. This build script uses this feature to make mimiker.elf and initrd.cpio ready for a direct download - just go to 'Artifacts' tab of build results, and you can download them with a single click. We may want to consider storing kernel output in a similar manner, so that it may be easily downloaded.
CircleCI allows to specify different jobs in a single test run (this feature has minor bugs ATM, so I did not enable it yet). That will allow us to split the test process into multiple stages: compilation, formatting verification, pep8 verification and kernel tests. Each of these will run separately and will appear as a separate check-mark on github. This way we'll know the results of formatting check within few seconds from pushing to repo, while other test modes will be still running. Splitting these into separate checkmarks will also simplify developer's work - it will be immediately apparent when a build failed due to formatting problems or due to other reason.
CircleCI has a very simple file cache available, which allows to store files between builds. Should we download more than just newlib during compilation, we may want to cache these downloads so that they don't need to be repeated on each build run.

Naturally, nothing will build before we enable CircleCI integration for this repository, which is as simple as heading to https://circleci.com/dashboard and flipping the right switch ON. I suppose repository owner should be the one to enable it, although I think I am also able to activate it.
Note that this config is for CircleCI 2.0! CircleCI 2.0 is currently in public beta, and is only enabled when requested via a link at https://circleci.com/beta-access/
For testing & preview, I've enabled CircleCI for my mimiker fork. You can see an example test build here: https://circleci.com/gh/rafalcieslak/mimiker/63",True,{'HOORAY': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,377,2017-06-09T20:42:21Z,2017-06-09T21:17:45Z,2017-06-09T21:17:45Z,MERGED,True,47,1,2,https://github.com/rafalcieslak,CircleCI support,8,[],https://github.com/cahirwpz/mimiker/pull/377,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/377#issuecomment-307502063,"This branch enables CircleCI support (in addition to TravisCI). It will grant us much greater control over our CI environment.
After some research, I've gathered which CircleCI advantages over TravisCI will be of use to us:

CircleCI containers are based on Docker, and in fact they allow to run any docker image! I've chosen Ubuntu 16.04 for a start, as it has all packages we need in decently new versions (QEMU 2.5 from repositories is totally okay for us, though switching to an even newer version in the future won't be a problem).

In fact, at some point we may want to create our own docker image, which would come with all utilities, toolchains and configuration pre-installed. That would be a great way to provide a standardized development environment, and would simplify the CircleCI config a lot - it would be just a matter of pulling our hypothetical docker image.


CircleCI runs so much faster. Not only in terms of CPU, but also network bandwidth and storage I/O. ATM system setup takes 1.5 minutes, compilation takes a minute, and running all tests ~3 minutes.

Yes, 3 minutes for 100 seeds. That's barely 2 seconds per seed! We may be able to reduce the main tests timeout by a great deal.
With a custom docker image system setup would go down to as little as 5 seconds, meaning we would get formatting & compilation results ready within a minute from pushing to repository - WOW!


Open source projects get 4 simultaneously available containers for free. If we enable them, we'll instantly get 4x as many seeds tested within the same time. (Or we might decrease the number of seeds tested per run 4 times, so that we get the same results 4 times faster.)
SSH connection to the testing container is available OOTB, no tricks required - just click ""Restart build with SSH enabled"" and you get an IP+port to connect to. Super useful for testing what went wrong, reproducing issues, or even running GDB directly on the testing environment!
Build runs may upload so-called artifacts, that is - arbitrary files with build and/or test results. We missed that feature on Travis when we wanted to examine what does the initrd.cpio look like when build by Travis. This build script uses this feature to make mimiker.elf and initrd.cpio ready for a direct download - just go to 'Artifacts' tab of build results, and you can download them with a single click. We may want to consider storing kernel output in a similar manner, so that it may be easily downloaded.
CircleCI allows to specify different jobs in a single test run (this feature has minor bugs ATM, so I did not enable it yet). That will allow us to split the test process into multiple stages: compilation, formatting verification, pep8 verification and kernel tests. Each of these will run separately and will appear as a separate check-mark on github. This way we'll know the results of formatting check within few seconds from pushing to repo, while other test modes will be still running. Splitting these into separate checkmarks will also simplify developer's work - it will be immediately apparent when a build failed due to formatting problems or due to other reason.
CircleCI has a very simple file cache available, which allows to store files between builds. Should we download more than just newlib during compilation, we may want to cache these downloads so that they don't need to be repeated on each build run.

Naturally, nothing will build before we enable CircleCI integration for this repository, which is as simple as heading to https://circleci.com/dashboard and flipping the right switch ON. I suppose repository owner should be the one to enable it, although I think I am also able to activate it.
Note that this config is for CircleCI 2.0! CircleCI 2.0 is currently in public beta, and is only enabled when requested via a link at https://circleci.com/beta-access/
For testing & preview, I've enabled CircleCI for my mimiker fork. You can see an example test build here: https://circleci.com/gh/rafalcieslak/mimiker/63",I've enabled CircleCI for my account and mimiker repository. It works like a charm and indeed is much faster than TravisCI. I found configuration script to be self-explanatory.  The set of advantages and possible improvements (over TravisCI) offered by CircleCI is impressive. I reckon the explanation you provided is worth restating and posting as CircleCI improvements wish-task. All in all I'm in favour of switching to CircleCI immediately. Good job!,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,379,2017-06-10T09:14:57Z,2017-06-12T21:25:56Z,2017-06-16T10:26:10Z,MERGED,True,73,19,5,https://github.com/cahirwpz,RTC driver,11,[],https://github.com/cahirwpz/mimiker/pull/379,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/379,"Took RTC mockup driver from tests directory and some ideas from #298 in order to prepare something that can be considered to be a RTC device driver.
Depends on #375","Took RTC mockup driver from tests directory and some ideas from #298 in order to prepare something that can be considered to be a RTC device driver.
Depends on #375",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,381,2017-06-12T13:54:48Z,2017-06-13T14:01:37Z,2017-06-14T22:44:50Z,MERGED,True,69,28,2,https://github.com/rafalcieslak,Even cooler CircleCI,4,[],https://github.com/cahirwpz/mimiker/pull/381,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/381,"Now that we're using CircleCI, I went a step further and prepared some advanced features.

Our config no longer uses the stock ubuntu:16.04 image, but a custom one, build with .circleci/image/Dockerfile - it comes with all tools we need pre-installed. That means the build environment no longer has to apt-get all the stuff we need, which speeds up the build process.

I've measured time between git push to receiving an email warning about incorrect source code formatting - less than 20 seconds, this is absolutely crazy!
You may want to copy the docker image from my repository on dockerhub (rafalcieslak/mimiker-build-base) to a repository created by you, although pulling it from from mine won't cause any inconvenience until you wish to publish an updated version.


I've split the test stages into separate CircleCI jobs. That means:

we get 4 test results visible on GitHub, each indicating different kind of success/failure.
the jobs run independently in parallel, which means ./verify-* doesn't wait form make to publish it's results to GitHub.



At the moment CircleCI allows defining multiple jobs, but will only start the one named build, and there is no elegant command to trigger other jobs. Instead, I use CircleCI web API to request a job to be started. Because of that there's an ugly trigger_job function in the config script¹. For security reasons, CIRCLE_API_TOKEN is not present in config file and is instead provided as an environmental variable via CircleCI project config. The main job only starts others: verify-formatting, verify-pep8 and compile. Each of them may fail or succeed and has a corresponding checkmark on GitHub. The first two are straight-forward, the other runs make, saves result as artifacts for convenient download, and also stores the result into cache, so that the final job, kernel_tests (triggered when compile is done), may restore the cache and run tests using files compiled by previous job.
So that's a very simple yet lighting-fast and quite convenient setup. And, as a side effect, we have a docker image that contains entire setup required to run Mimiker.
¹) This is the currently recommended way of triggering jobs, before they release proper support for it. By request they enable beta-access to a better solution, I've dropped them an e-mail. Should they agree, I hope to clean up the config.
EDIT: Hint - click on Show all checks below to see separate jobs/tests.","Now that we're using CircleCI, I went a step further and prepared some advanced features.

Our config no longer uses the stock ubuntu:16.04 image, but a custom one, build with .circleci/image/Dockerfile - it comes with all tools we need pre-installed. That means the build environment no longer has to apt-get all the stuff we need, which speeds up the build process.

I've measured time between git push to receiving an email warning about incorrect source code formatting - less than 20 seconds, this is absolutely crazy!
You may want to copy the docker image from my repository on dockerhub (rafalcieslak/mimiker-build-base) to a repository created by you, although pulling it from from mine won't cause any inconvenience until you wish to publish an updated version.


I've split the test stages into separate CircleCI jobs. That means:

we get 4 test results visible on GitHub, each indicating different kind of success/failure.
the jobs run independently in parallel, which means ./verify-* doesn't wait form make to publish it's results to GitHub.



At the moment CircleCI allows defining multiple jobs, but will only start the one named build, and there is no elegant command to trigger other jobs. Instead, I use CircleCI web API to request a job to be started. Because of that there's an ugly trigger_job function in the config script¹. For security reasons, CIRCLE_API_TOKEN is not present in config file and is instead provided as an environmental variable via CircleCI project config. The main job only starts others: verify-formatting, verify-pep8 and compile. Each of them may fail or succeed and has a corresponding checkmark on GitHub. The first two are straight-forward, the other runs make, saves result as artifacts for convenient download, and also stores the result into cache, so that the final job, kernel_tests (triggered when compile is done), may restore the cache and run tests using files compiled by previous job.
So that's a very simple yet lighting-fast and quite convenient setup. And, as a side effect, we have a docker image that contains entire setup required to run Mimiker.
¹) This is the currently recommended way of triggering jobs, before they release proper support for it. By request they enable beta-access to a better solution, I've dropped them an e-mail. Should they agree, I hope to clean up the config.
EDIT: Hint - click on Show all checks below to see separate jobs/tests.",True,{'HOORAY': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,381,2017-06-12T13:54:48Z,2017-06-13T14:01:37Z,2017-06-14T22:44:50Z,MERGED,True,69,28,2,https://github.com/rafalcieslak,Even cooler CircleCI,4,[],https://github.com/cahirwpz/mimiker/pull/381,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/381#issuecomment-308125563,"Now that we're using CircleCI, I went a step further and prepared some advanced features.

Our config no longer uses the stock ubuntu:16.04 image, but a custom one, build with .circleci/image/Dockerfile - it comes with all tools we need pre-installed. That means the build environment no longer has to apt-get all the stuff we need, which speeds up the build process.

I've measured time between git push to receiving an email warning about incorrect source code formatting - less than 20 seconds, this is absolutely crazy!
You may want to copy the docker image from my repository on dockerhub (rafalcieslak/mimiker-build-base) to a repository created by you, although pulling it from from mine won't cause any inconvenience until you wish to publish an updated version.


I've split the test stages into separate CircleCI jobs. That means:

we get 4 test results visible on GitHub, each indicating different kind of success/failure.
the jobs run independently in parallel, which means ./verify-* doesn't wait form make to publish it's results to GitHub.



At the moment CircleCI allows defining multiple jobs, but will only start the one named build, and there is no elegant command to trigger other jobs. Instead, I use CircleCI web API to request a job to be started. Because of that there's an ugly trigger_job function in the config script¹. For security reasons, CIRCLE_API_TOKEN is not present in config file and is instead provided as an environmental variable via CircleCI project config. The main job only starts others: verify-formatting, verify-pep8 and compile. Each of them may fail or succeed and has a corresponding checkmark on GitHub. The first two are straight-forward, the other runs make, saves result as artifacts for convenient download, and also stores the result into cache, so that the final job, kernel_tests (triggered when compile is done), may restore the cache and run tests using files compiled by previous job.
So that's a very simple yet lighting-fast and quite convenient setup. And, as a side effect, we have a docker image that contains entire setup required to run Mimiker.
¹) This is the currently recommended way of triggering jobs, before they release proper support for it. By request they enable beta-access to a better solution, I've dropped them an e-mail. Should they agree, I hope to clean up the config.
EDIT: Hint - click on Show all checks below to see separate jobs/tests.",LGTM! I'm merging it immediately!,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,382,2017-06-13T15:22:21Z,2018-03-26T10:31:01Z,2018-03-26T10:31:17Z,CLOSED,False,332,2,12,https://github.com/MoloToha,Inter-process communication with pipes,13,['WiP'],https://github.com/cahirwpz/mimiker/pull/382,https://github.com/MoloToha,1,https://github.com/cahirwpz/mimiker/pull/382,So far only fileops structure is implemented,So far only fileops structure is implemented,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,382,2017-06-13T15:22:21Z,2018-03-26T10:31:01Z,2018-03-26T10:31:17Z,CLOSED,False,332,2,12,https://github.com/MoloToha,Inter-process communication with pipes,13,['WiP'],https://github.com/cahirwpz/mimiker/pull/382,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/382#issuecomment-311365630,So far only fileops structure is implemented,@MoloToha What about userspace tests?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,382,2017-06-13T15:22:21Z,2018-03-26T10:31:01Z,2018-03-26T10:31:17Z,CLOSED,False,332,2,12,https://github.com/MoloToha,Inter-process communication with pipes,13,['WiP'],https://github.com/cahirwpz/mimiker/pull/382,https://github.com/MoloToha,3,https://github.com/cahirwpz/mimiker/pull/382#issuecomment-311401921,So far only fileops structure is implemented,Working on it,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,382,2017-06-13T15:22:21Z,2018-03-26T10:31:01Z,2018-03-26T10:31:17Z,CLOSED,False,332,2,12,https://github.com/MoloToha,Inter-process communication with pipes,13,['WiP'],https://github.com/cahirwpz/mimiker/pull/382,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/382#issuecomment-376120748,So far only fileops structure is implemented,"Development is continued in https://github.com/MoloToha/mimiker
PR will be reopened when the patchset is ready for review.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,383,2017-06-14T22:37:33Z,2017-06-16T12:16:43Z,2017-06-28T23:13:35Z,MERGED,True,24,45,1,https://github.com/rafalcieslak,Circleci workflows,16,[],https://github.com/cahirwpz/mimiker/pull/383,https://github.com/rafalcieslak,1,https://github.com/cahirwpz/mimiker/pull/383,"Today early morning we were accepted into private beta of CircleCI workflows feature. Today evening workflows left beta, and are now available to all CircleCI 2.0 users.
This branch is barely a cleanup for CircleCI config I promised to do, and it shouldn't change general behavior. Job triggers are removed and workflow block describes dependencies between jobs, also defaults are used to share parts of configuration between jobs.","Today early morning we were accepted into private beta of CircleCI workflows feature. Today evening workflows left beta, and are now available to all CircleCI 2.0 users.
This branch is barely a cleanup for CircleCI config I promised to do, and it shouldn't change general behavior. Job triggers are removed and workflow block describes dependencies between jobs, also defaults are used to share parts of configuration between jobs.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,383,2017-06-14T22:37:33Z,2017-06-16T12:16:43Z,2017-06-28T23:13:35Z,MERGED,True,24,45,1,https://github.com/rafalcieslak,Circleci workflows,16,[],https://github.com/cahirwpz/mimiker/pull/383,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/383#issuecomment-308586387,"Today early morning we were accepted into private beta of CircleCI workflows feature. Today evening workflows left beta, and are now available to all CircleCI 2.0 users.
This branch is barely a cleanup for CircleCI config I promised to do, and it shouldn't change general behavior. Job triggers are removed and workflow block describes dependencies between jobs, also defaults are used to share parts of configuration between jobs.","This took me a while to troubleshoot, because, at the moment, syntax errors in workflows section trigger no errors and just cause CircleCI to ignore build request. The workflow is now working as intended, head to https://circleci.com/gh/cahirwpz/workflows/mimiker for a nice overview.
Look at how clean & concise .circleci/config.yml is now!",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,383,2017-06-14T22:37:33Z,2017-06-16T12:16:43Z,2017-06-28T23:13:35Z,MERGED,True,24,45,1,https://github.com/rafalcieslak,Circleci workflows,16,[],https://github.com/cahirwpz/mimiker/pull/383,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/383#issuecomment-309011399,"Today early morning we were accepted into private beta of CircleCI workflows feature. Today evening workflows left beta, and are now available to all CircleCI 2.0 users.
This branch is barely a cleanup for CircleCI config I promised to do, and it shouldn't change general behavior. Job triggers are removed and workflow block describes dependencies between jobs, also defaults are used to share parts of configuration between jobs.",Thanks for the explanation!,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,384,2017-06-15T21:50:07Z,2017-06-16T17:16:51Z,2017-06-28T23:13:34Z,MERGED,True,1,0,1,https://github.com/laky55555,Fixed small bug related to relative path,1,[],https://github.com/cahirwpz/mimiker/pull/384,https://github.com/laky55555,1,https://github.com/cahirwpz/mimiker/pull/384,Because we don't implement relative paths expected error wasn't name too long but ENOENT so test didn't succeed.,Because we don't implement relative paths expected error wasn't name too long but ENOENT so test didn't succeed.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,384,2017-06-15T21:50:07Z,2017-06-16T17:16:51Z,2017-06-28T23:13:34Z,MERGED,True,1,0,1,https://github.com/laky55555,Fixed small bug related to relative path,1,[],https://github.com/cahirwpz/mimiker/pull/384,https://github.com/rafalcieslak,2,https://github.com/cahirwpz/mimiker/pull/384#issuecomment-308878865,Because we don't implement relative paths expected error wasn't name too long but ENOENT so test didn't succeed.,"Nice catch! This test is supposed to provide an insanely long file name to open, but recently our limit for file name lenght was raised from 256 to 1024. This test uses 500 characters, which fits into 1024 limit. I believe a proper solution is to make this file name longer than 1024. #328, which I hope will be merged soon, completely reorganizes the way we do user-mode tests, and removes (among others) the fd_test program. In #328 the test procedure is moved to utest, and I've fixed it there by increasing the size of too_long to 2000.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,385,2017-06-16T14:34:18Z,2017-06-28T22:25:13Z,2017-06-28T23:13:23Z,MERGED,True,125,8,17,https://github.com/laky55555,Basic implementation of access,11,[],https://github.com/cahirwpz/mimiker/pull/385,https://github.com/laky55555,1,https://github.com/cahirwpz/mimiker/pull/385,"Implementation of syscall access.
Relaying a lot on vfs_lookup so has the same deficiencies #355.
Added basic user credentials for implementation purposes.
Currently there is no credentials implemented on threads so access don't check any credentials, it just check if file exist.
Should I add checking access (VOP_ACCESS) to rest of the path?","Implementation of syscall access.
Relaying a lot on vfs_lookup so has the same deficiencies #355.
Added basic user credentials for implementation purposes.
Currently there is no credentials implemented on threads so access don't check any credentials, it just check if file exist.
Should I add checking access (VOP_ACCESS) to rest of the path?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,386,2017-06-25T22:28:11Z,2017-06-27T09:56:17Z,2017-06-27T09:56:17Z,MERGED,True,1,1,1,https://github.com/dyniec,Uiomove - fails if at the end of buffer,1,[],https://github.com/cahirwpz/mimiker/pull/386,https://github.com/dyniec,1,https://github.com/cahirwpz/mimiker/pull/386,Without this fix user program in #358 which expects read to return 0 at the end of file fails due to assert.,Without this fix user program in #358 which expects read to return 0 at the end of file fails due to assert.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,387,2017-06-26T17:51:48Z,2017-06-26T20:35:24Z,2017-06-28T23:13:25Z,MERGED,True,60,64,5,https://github.com/cahirwpz,do_exec cleanups,6,['WiP'],https://github.com/cahirwpz/mimiker/pull/387,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/387,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,388,2017-06-28T23:13:59Z,2017-07-17T08:37:02Z,2017-07-17T08:38:05Z,MERGED,True,111,9,13,https://github.com/cahirwpz,stat(2) system call,8,['WiP'],https://github.com/cahirwpz/mimiker/pull/388,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/388,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,389,2017-06-30T18:08:46Z,2018-04-27T20:27:54Z,2018-04-27T20:29:49Z,CLOSED,False,377,14,18,https://github.com/pwit81,A sys_execve wrapper for do_exec,19,['WiP'],https://github.com/cahirwpz/mimiker/pull/389,https://github.com/pwit81,1,https://github.com/cahirwpz/mimiker/pull/389,"Some remarks:

no support for environments
exec_args_t.argv type is incorrect. It is const char**, should be char *const,
available docs don't specify meaning of ARG_MAX error code in unambigous way
tests are perhaps pretty weak and should be improved.","Some remarks:

no support for environments
exec_args_t.argv type is incorrect. It is const char**, should be char *const,
available docs don't specify meaning of ARG_MAX error code in unambigous way
tests are perhaps pretty weak and should be improved.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,389,2017-06-30T18:08:46Z,2018-04-27T20:27:54Z,2018-04-27T20:29:49Z,CLOSED,False,377,14,18,https://github.com/pwit81,A sys_execve wrapper for do_exec,19,['WiP'],https://github.com/cahirwpz/mimiker/pull/389,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/389#issuecomment-385085214,"Some remarks:

no support for environments
exec_args_t.argv type is incorrect. It is const char**, should be char *const,
available docs don't specify meaning of ARG_MAX error code in unambigous way
tests are perhaps pretty weak and should be improved.",Further work on this feature is continued in #422,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,390,2017-06-30T22:42:06Z,2017-06-30T22:42:39Z,2017-06-30T22:42:57Z,MERGED,True,27,16,2,https://github.com/cahirwpz,Simplify acquiring strategy for process locks,4,[],https://github.com/cahirwpz/mimiker/pull/390,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/390,"Fix proc_reap race condition on non-recursive p_lock
do_waitpid on a child did not lock parent p_lock","Fix proc_reap race condition on non-recursive p_lock
do_waitpid on a child did not lock parent p_lock",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,391,2017-07-01T10:09:11Z,2017-07-03T10:04:58Z,2017-07-03T10:06:29Z,CLOSED,False,8,5,3,https://github.com/cahirwpz,Fix for #332,1,"['WiP', 'research']",https://github.com/cahirwpz/mimiker/pull/391,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/391,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,392,2017-07-01T11:09:55Z,2017-07-17T07:31:45Z,2017-07-17T07:37:29Z,MERGED,True,65,16,7,https://github.com/cahirwpz,pmap improvements,9,"['WiP', 'research']",https://github.com/cahirwpz/mimiker/pull/392,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/392,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,394,2017-07-02T16:48:39Z,2017-07-02T16:48:52Z,2017-07-02T16:48:52Z,MERGED,True,674,508,4,https://github.com/cahirwpz,Take full control of toolchain build procedure,5,[],https://github.com/cahirwpz/mimiker/pull/394,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/394,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,395,2017-07-02T21:01:29Z,2017-07-02T21:01:38Z,2017-07-02T21:38:28Z,MERGED,True,97,46,9,https://github.com/cahirwpz,mipsel-mimiker-elf toolchain (semi-)properly packaged for Debian,10,[],https://github.com/cahirwpz/mimiker/pull/395,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/395,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,396,2017-07-05T20:36:45Z,2017-07-05T20:47:58Z,2017-07-05T20:48:41Z,MERGED,True,19,10,3,https://github.com/cahirwpz,Switch CircleCI build environment to Debian 9.0,5,[],https://github.com/cahirwpz/mimiker/pull/396,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/396,This change also installs new toolchain based on gcc 6.3.0,This change also installs new toolchain based on gcc 6.3.0,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,397,2017-07-06T09:55:54Z,2017-07-06T16:04:58Z,2017-07-08T13:06:01Z,MERGED,True,567,484,26,https://github.com/cahirwpz,Improve logging experience to ease debugging,18,[],https://github.com/cahirwpz/mimiker/pull/397,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/397,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,398,2017-07-07T19:01:42Z,2017-07-07T19:02:37Z,2017-07-08T13:06:00Z,MERGED,True,259,221,30,https://github.com/cahirwpz,Makefiles cleanup,7,[],https://github.com/cahirwpz/mimiker/pull/398,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/398,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,399,2017-07-07T20:50:11Z,2017-07-07T20:51:01Z,2017-07-08T13:05:58Z,MERGED,True,20,40,6,https://github.com/cahirwpz,Simplify newlib build procedure,1,[],https://github.com/cahirwpz/mimiker/pull/399,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/399,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,400,2017-07-08T11:19:34Z,2017-07-08T11:21:07Z,2017-07-08T13:05:55Z,MERGED,True,315,188,22,https://github.com/cahirwpz,Debugging framework improvements,18,[],https://github.com/cahirwpz/mimiker/pull/400,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/400,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,401,2017-07-08T18:40:51Z,2017-07-08T21:40:57Z,2017-07-08T21:41:18Z,CLOSED,False,0,0,0,https://github.com/cahirwpz,Fix deadlocks that emerge during test runs,0,['WiP'],https://github.com/cahirwpz/mimiker/pull/401,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/401,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,403,2017-07-17T16:52:26Z,2017-07-17T17:13:17Z,2017-07-17T18:05:47Z,MERGED,True,16,8,1,https://github.com/pwit81,Fix crash during brk segment creation on execve in forked processes,1,[],https://github.com/cahirwpz/mimiker/pull/403,https://github.com/pwit81,1,https://github.com/cahirwpz/mimiker/pull/403,A small fixup concerning preservation of old process memory image during execve attempt.,A small fixup concerning preservation of old process memory image during execve attempt.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,404,2017-07-17T18:51:32Z,2017-07-18T09:02:06Z,2018-04-27T20:29:37Z,MERGED,True,66,0,2,https://github.com/pwit81,Syslimits,4,[],https://github.com/cahirwpz/mimiker/pull/404,https://github.com/pwit81,1,https://github.com/cahirwpz/mimiker/pull/404,"We need a header file for storing system-wide limits, like ARG_MAX (max. bytes in execve argv and envp arrays), MAX_PATH (max bytes in a path)  or IOV_MAX (max elements in an I/O vector). We borrowed one from newlib.","We need a header file for storing system-wide limits, like ARG_MAX (max. bytes in execve argv and envp arrays), MAX_PATH (max bytes in a path)  or IOV_MAX (max elements in an I/O vector). We borrowed one from newlib.",True,{'THUMBS_UP': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,405,2017-07-18T13:43:34Z,2017-07-18T17:58:38Z,2018-04-27T20:29:37Z,MERGED,True,14,11,3,https://github.com/pwit81,Definition of PATH_MAX removed from include/mount.h. VFS_PATH_MAX and…,3,[],https://github.com/cahirwpz/mimiker/pull/405,https://github.com/pwit81,1,https://github.com/cahirwpz/mimiker/pull/405,… PATH_MAX unified. Source files updated accordingly.,… PATH_MAX unified. Source files updated accordingly.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,406,2017-07-21T15:21:23Z,2020-09-07T12:59:29Z,2021-02-09T06:54:23Z,CLOSED,False,239,0,7,https://github.com/pwit81,A gdb user defined command to print kernel memory pools statistics.,18,[],https://github.com/cahirwpz/mimiker/pull/406,https://github.com/pwit81,1,https://github.com/cahirwpz/mimiker/pull/406,"This is a simple python script implementing gdb command of the form kmem pool, where pool is one of pools defined by MALLOC_DEFINE, e.g. M_TEMP, M_VFS, M_FD.  Invoke gdb command help kmem for details.","This is a simple python script implementing gdb command of the form kmem pool, where pool is one of pools defined by MALLOC_DEFINE, e.g. M_TEMP, M_VFS, M_FD.  Invoke gdb command help kmem for details.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,406,2017-07-21T15:21:23Z,2020-09-07T12:59:29Z,2021-02-09T06:54:23Z,CLOSED,False,239,0,7,https://github.com/pwit81,A gdb user defined command to print kernel memory pools statistics.,18,[],https://github.com/cahirwpz/mimiker/pull/406,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/406#issuecomment-324284798,"This is a simple python script implementing gdb command of the form kmem pool, where pool is one of pools defined by MALLOC_DEFINE, e.g. M_TEMP, M_VFS, M_FD.  Invoke gdb command help kmem for details.","Ok, I'm back into the game after a long break.
The printout from kmem command is not very informative and cannot replace kmem_dump at the moment. To be more precise, when I entered gdb command call kmem_dump(M_VFS) at randomly chosen moment I got following:
[kmem] pool at 0x80121830:
[kmem] > malloc_arena 0x80e28020 - 0x80e29000:
[kmem]    U 0x80e28020 32
[kmem]    U 0x80e28050 8
[kmem]    U 0x80e28068 32
[kmem]    U 0x80e28098 8
[kmem]    U 0x80e280b0 32
[kmem]    U 0x80e280e0 8
[kmem]    U 0x80e280f8 56
[kmem]    U 0x80e28140 56
[kmem]    U 0x80e28188 32
[kmem]    U 0x80e281b8 8
[kmem]    U 0x80e281d0 32
[kmem]    U 0x80e28200 8
[kmem]    U 0x80e28218 32
[kmem]    U 0x80e28248 8
[kmem]    U 0x80e28260 32
[kmem]    U 0x80e28290 16
[kmem]    U 0x80e282b0 32
[kmem]    U 0x80e282e0 8
[kmem]    U 0x80e282f8 32
[kmem]    U 0x80e28328 16
[kmem]    F 0x80e28348 3240

General format of output should be:
pool information:
> arena[0] information
 > arena[0].block[0] information
 > arena[0].block[1] information
 ...
> arena[1] information
 ...

Please note that the output must contain used and free blocks.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,406,2017-07-21T15:21:23Z,2020-09-07T12:59:29Z,2021-02-09T06:54:23Z,CLOSED,False,239,0,7,https://github.com/pwit81,A gdb user defined command to print kernel memory pools statistics.,18,[],https://github.com/cahirwpz/mimiker/pull/406,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/406#issuecomment-407360037,"This is a simple python script implementing gdb command of the form kmem pool, where pool is one of pools defined by MALLOC_DEFINE, e.g. M_TEMP, M_VFS, M_FD.  Invoke gdb command help kmem for details.",@pwit81 This task is not yet finished. Look at my previous comment. Printout from kmem command still does not report used blocks.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,406,2017-07-21T15:21:23Z,2020-09-07T12:59:29Z,2021-02-09T06:54:23Z,CLOSED,False,239,0,7,https://github.com/pwit81,A gdb user defined command to print kernel memory pools statistics.,18,[],https://github.com/cahirwpz/mimiker/pull/406,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/406#issuecomment-688309554,"This is a simple python script implementing gdb command of the form kmem pool, where pool is one of pools defined by MALLOC_DEFINE, e.g. M_TEMP, M_VFS, M_FD.  Invoke gdb command help kmem for details.",I decided to close this PR since kmalloc memory manager is being completely rewritten.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,408,2018-04-06T23:03:03Z,2018-04-09T07:15:37Z,2018-04-09T07:15:38Z,MERGED,True,2,2,1,https://github.com/wmoc,Increased timeouts for GDB,1,[],https://github.com/cahirwpz/mimiker/pull/408,https://github.com/wmoc,1,https://github.com/cahirwpz/mimiker/pull/408,Sometimes gdb takes longer to startup and print diagnostic messages. With following patch we give it more time. Hopefully it will resolve an issue where debugger is killed prematurely after a failed test run.,Sometimes gdb takes longer to startup and print diagnostic messages. With following patch we give it more time. Hopefully it will resolve an issue where debugger is killed prematurely after a failed test run.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,408,2018-04-06T23:03:03Z,2018-04-09T07:15:37Z,2018-04-09T07:15:38Z,MERGED,True,2,2,1,https://github.com/wmoc,Increased timeouts for GDB,1,[],https://github.com/cahirwpz/mimiker/pull/408,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/408#issuecomment-379657127,Sometimes gdb takes longer to startup and print diagnostic messages. With following patch we give it more time. Hopefully it will resolve an issue where debugger is killed prematurely after a failed test run.,I filled out PR's main comment. LGTM.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,409,2018-04-06T23:05:06Z,2018-05-01T14:45:23Z,2018-05-01T14:45:23Z,MERGED,True,172,4,5,https://github.com/wmoc,Handle FPU in a lazy way in context switching,5,[],https://github.com/cahirwpz/mimiker/pull/409,https://github.com/wmoc,1,https://github.com/cahirwpz/mimiker/pull/409,"So far, FPU data was not preserved between context switches. Now processes that are using FPU are marked, and FPU context is saved only for them.","So far, FPU data was not preserved between context switches. Now processes that are using FPU are marked, and FPU context is saved only for them.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,409,2018-04-06T23:05:06Z,2018-05-01T14:45:23Z,2018-05-01T14:45:23Z,MERGED,True,172,4,5,https://github.com/wmoc,Handle FPU in a lazy way in context switching,5,[],https://github.com/cahirwpz/mimiker/pull/409,https://github.com/wmoc,2,https://github.com/cahirwpz/mimiker/pull/409#issuecomment-383374016,"So far, FPU data was not preserved between context switches. Now processes that are using FPU are marked, and FPU context is saved only for them.",Now it should be ok.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,410,2018-04-07T20:52:38Z,2018-05-25T17:13:19Z,2018-05-25T17:13:26Z,MERGED,True,239,1,6,https://github.com/mzr,Tests for preserving FPU context across processes using FPU.,12,[],https://github.com/cahirwpz/mimiker/pull/410,https://github.com/mzr,1,https://github.com/cahirwpz/mimiker/pull/410,"Tests for #409 :

test_fpu_fcsr - checks FPU FCSR register preservation.
test_fpu_gpr_preservation - checks 32 FPU FPR's.
test_fpu_cpy_ctx_on_fork - checks whether child inherited parent's FPU context.
test_fpu_ctx_signals - checks appropiate FPU context preservation across nested signal handlers which use FPU.

First 2 tests need at least one context switch to happen. nanosleep() from #366  would shorten them significantly.
Third test depends on a scheduler.","Tests for #409 :

test_fpu_fcsr - checks FPU FCSR register preservation.
test_fpu_gpr_preservation - checks 32 FPU FPR's.
test_fpu_cpy_ctx_on_fork - checks whether child inherited parent's FPU context.
test_fpu_ctx_signals - checks appropiate FPU context preservation across nested signal handlers which use FPU.

First 2 tests need at least one context switch to happen. nanosleep() from #366  would shorten them significantly.
Third test depends on a scheduler.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,410,2018-04-07T20:52:38Z,2018-05-25T17:13:19Z,2018-05-25T17:13:26Z,MERGED,True,239,1,6,https://github.com/mzr,Tests for preserving FPU context across processes using FPU.,12,[],https://github.com/cahirwpz/mimiker/pull/410,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/410#issuecomment-390994914,"Tests for #409 :

test_fpu_fcsr - checks FPU FCSR register preservation.
test_fpu_gpr_preservation - checks 32 FPU FPR's.
test_fpu_cpy_ctx_on_fork - checks whether child inherited parent's FPU context.
test_fpu_ctx_signals - checks appropiate FPU context preservation across nested signal handlers which use FPU.

First 2 tests need at least one context switch to happen. nanosleep() from #366  would shorten them significantly.
Third test depends on a scheduler.",@dingorth Could we try to integrate this PR with master but with tests disabled?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,410,2018-04-07T20:52:38Z,2018-05-25T17:13:19Z,2018-05-25T17:13:26Z,MERGED,True,239,1,6,https://github.com/mzr,Tests for preserving FPU context across processes using FPU.,12,[],https://github.com/cahirwpz/mimiker/pull/410,https://github.com/mzr,3,https://github.com/cahirwpz/mimiker/pull/410#issuecomment-392102060,"Tests for #409 :

test_fpu_fcsr - checks FPU FCSR register preservation.
test_fpu_gpr_preservation - checks 32 FPU FPR's.
test_fpu_cpy_ctx_on_fork - checks whether child inherited parent's FPU context.
test_fpu_ctx_signals - checks appropiate FPU context preservation across nested signal handlers which use FPU.

First 2 tests need at least one context switch to happen. nanosleep() from #366  would shorten them significantly.
Third test depends on a scheduler.","@cahirwpz Yeah, why not. I've already added suitable comments in user/utest/fpu_ctx.c.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,410,2018-04-07T20:52:38Z,2018-05-25T17:13:19Z,2018-05-25T17:13:26Z,MERGED,True,239,1,6,https://github.com/mzr,Tests for preserving FPU context across processes using FPU.,12,[],https://github.com/cahirwpz/mimiker/pull/410,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/410#issuecomment-392105405,"Tests for #409 :

test_fpu_fcsr - checks FPU FCSR register preservation.
test_fpu_gpr_preservation - checks 32 FPU FPR's.
test_fpu_cpy_ctx_on_fork - checks whether child inherited parent's FPU context.
test_fpu_ctx_signals - checks appropiate FPU context preservation across nested signal handlers which use FPU.

First 2 tests need at least one context switch to happen. nanosleep() from #366  would shorten them significantly.
Third test depends on a scheduler.",Ok then. Please resolve conflicts with master and I'll merge the PR.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,410,2018-04-07T20:52:38Z,2018-05-25T17:13:19Z,2018-05-25T17:13:26Z,MERGED,True,239,1,6,https://github.com/mzr,Tests for preserving FPU context across processes using FPU.,12,[],https://github.com/cahirwpz/mimiker/pull/410,https://github.com/mzr,5,https://github.com/cahirwpz/mimiker/pull/410#issuecomment-392107964,"Tests for #409 :

test_fpu_fcsr - checks FPU FCSR register preservation.
test_fpu_gpr_preservation - checks 32 FPU FPR's.
test_fpu_cpy_ctx_on_fork - checks whether child inherited parent's FPU context.
test_fpu_ctx_signals - checks appropiate FPU context preservation across nested signal handlers which use FPU.

First 2 tests need at least one context switch to happen. nanosleep() from #366  would shorten them significantly.
Third test depends on a scheduler.",Done.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,411,2018-04-09T17:06:09Z,2018-04-16T09:32:07Z,2018-09-12T09:06:11Z,MERGED,True,1,1,1,https://github.com/mzr,A typo in sys/ktest.c,1,[],https://github.com/cahirwpz/mimiker/pull/411,https://github.com/mzr,1,https://github.com/cahirwpz/mimiker/pull/411,Little typo.,Little typo.,True,"{'THUMBS_DOWN': ['https://github.com/j-piecuch'], 'CONFUSED': ['https://github.com/j-piecuch'], 'HEART': ['https://github.com/j-piecuch'], 'LAUGH': ['https://github.com/j-piecuch'], 'HOORAY': ['https://github.com/j-piecuch'], 'THUMBS_UP': ['https://github.com/mzr', 'https://github.com/j-piecuch', 'https://github.com/dyniec', 'https://github.com/wmoc']}"
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,412,2018-04-09T18:59:32Z,2018-04-10T12:39:11Z,2018-04-10T12:39:11Z,MERGED,True,49,45,5,https://github.com/j-piecuch,Embed initial ramdisk inside the kernel binary,13,[],https://github.com/cahirwpz/mimiker/pull/412,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/412,"Remove associated emulator options from the launcher script
Minor refactoring -- see commit messages","Remove associated emulator options from the launcher script
Minor refactoring -- see commit messages",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,412,2018-04-09T18:59:32Z,2018-04-10T12:39:11Z,2018-04-10T12:39:11Z,MERGED,True,49,45,5,https://github.com/j-piecuch,Embed initial ramdisk inside the kernel binary,13,[],https://github.com/cahirwpz/mimiker/pull/412,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/412#issuecomment-380083275,"Remove associated emulator options from the launcher script
Minor refactoring -- see commit messages",I'm aware of problems with signal_segfault test spuriously failing. Nevertheless I'll integrate this change with master.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,413,2018-04-11T17:52:23Z,2018-04-14T06:33:27Z,2018-04-14T06:33:27Z,MERGED,True,79,82,7,https://github.com/j-piecuch,Use `kernel_sbrk` to allocate physical memory description segment.,9,[],https://github.com/cahirwpz/mimiker/pull/413,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/413,"Use kernel_sbrk to allocate physical memory segment in pm_bootstrap.
Replaced uses of __kernel_start and __kernel_end in malta.c with accessor functions kernel_get_start and kernel_get_end.
Calls to kernel_sbrk can now change the value returned by kernel_get_end. It can be frozen by calling kernel_sbrk_freeze.","Use kernel_sbrk to allocate physical memory segment in pm_bootstrap.
Replaced uses of __kernel_start and __kernel_end in malta.c with accessor functions kernel_get_start and kernel_get_end.
Calls to kernel_sbrk can now change the value returned by kernel_get_end. It can be frozen by calling kernel_sbrk_freeze.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,413,2018-04-11T17:52:23Z,2018-04-14T06:33:27Z,2018-04-14T06:33:27Z,MERGED,True,79,82,7,https://github.com/j-piecuch,Use `kernel_sbrk` to allocate physical memory description segment.,9,[],https://github.com/cahirwpz/mimiker/pull/413,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/413#issuecomment-380779897,"Use kernel_sbrk to allocate physical memory segment in pm_bootstrap.
Replaced uses of __kernel_start and __kernel_end in malta.c with accessor functions kernel_get_start and kernel_get_end.
Calls to kernel_sbrk can now change the value returned by kernel_get_end. It can be frozen by calling kernel_sbrk_freeze.",@j-piecuch Please review PR after my changes.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,414,2018-04-11T18:05:32Z,2018-04-16T09:34:36Z,2018-04-16T09:34:36Z,CLOSED,False,1,0,1,https://github.com/j-piecuch,Add missing `#include <mips/mips.h>` in `mips/malta.c`,1,[],https://github.com/cahirwpz/mimiker/pull/414,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/414,"The MIPS_KSEG0_TO_PHYS macro defined in include/mips/mips.h
is used in mips/malta.c, but the necessary header is not included.","The MIPS_KSEG0_TO_PHYS macro defined in include/mips/mips.h
is used in mips/malta.c, but the necessary header is not included.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,414,2018-04-11T18:05:32Z,2018-04-16T09:34:36Z,2018-04-16T09:34:36Z,CLOSED,False,1,0,1,https://github.com/j-piecuch,Add missing `#include <mips/mips.h>` in `mips/malta.c`,1,[],https://github.com/cahirwpz/mimiker/pull/414,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/414#issuecomment-381539290,"The MIPS_KSEG0_TO_PHYS macro defined in include/mips/mips.h
is used in mips/malta.c, but the necessary header is not included.",Hmm... include/mips/malta.h depends on include/mips/mips.h.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,415,2018-04-11T18:27:21Z,2018-04-12T08:42:06Z,2018-04-12T08:42:06Z,MERGED,True,1,1,1,https://github.com/j-piecuch,Swap include order so that `SYSROOT` is defined.,1,[],https://github.com/cahirwpz/mimiker/pull/415,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/415,"build/flags.user.mk adds --sysroot=$(SYSROOT) to CFLAGS, but
SYSROOT is defined in build/common.mk, which is included by
build/build.mk. Therefore, build/build.mk needs to be included
before build/flags.user.mk in order for the flag to be properly
defined.","build/flags.user.mk adds --sysroot=$(SYSROOT) to CFLAGS, but
SYSROOT is defined in build/common.mk, which is included by
build/build.mk. Therefore, build/build.mk needs to be included
before build/flags.user.mk in order for the flag to be properly
defined.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,415,2018-04-11T18:27:21Z,2018-04-12T08:42:06Z,2018-04-12T08:42:06Z,MERGED,True,1,1,1,https://github.com/j-piecuch,Swap include order so that `SYSROOT` is defined.,1,[],https://github.com/cahirwpz/mimiker/pull/415,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/415#issuecomment-380725253,"build/flags.user.mk adds --sysroot=$(SYSROOT) to CFLAGS, but
SYSROOT is defined in build/common.mk, which is included by
build/build.mk. Therefore, build/build.mk needs to be included
before build/flags.user.mk in order for the flag to be properly
defined.",LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,416,2018-04-15T12:16:16Z,2018-04-16T09:06:09Z,2018-04-17T15:08:16Z,MERGED,True,66,6,3,https://github.com/jpszczolowski,Added priority propagation functions to scheduler.,9,[],https://github.com/cahirwpz/mimiker/pull/416,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/416,"Two new functions available to call in scheduler:


void sched_lend_prio(thread_t *td, td_prio_t prio);


void sched_unlend_prio(thread_t *td, td_prio_t prio);


They will be used in turnstile implementation.
Also added td_base_prio to thread structure and TDF_BORROWING to thread flags.","Two new functions available to call in scheduler:


void sched_lend_prio(thread_t *td, td_prio_t prio);


void sched_unlend_prio(thread_t *td, td_prio_t prio);


They will be used in turnstile implementation.
Also added td_base_prio to thread structure and TDF_BORROWING to thread flags.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,416,2018-04-15T12:16:16Z,2018-04-16T09:06:09Z,2018-04-17T15:08:16Z,MERGED,True,66,6,3,https://github.com/jpszczolowski,Added priority propagation functions to scheduler.,9,[],https://github.com/cahirwpz/mimiker/pull/416,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/416#issuecomment-381530894,"Two new functions available to call in scheduler:


void sched_lend_prio(thread_t *td, td_prio_t prio);


void sched_unlend_prio(thread_t *td, td_prio_t prio);


They will be used in turnstile implementation.
Also added td_base_prio to thread structure and TDF_BORROWING to thread flags.",LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,417,2018-04-19T09:31:41Z,2018-04-20T15:29:02Z,2018-04-20T15:29:44Z,MERGED,True,503,91,12,https://github.com/cahirwpz,Use i8254 PIT for system clock,15,[],https://github.com/cahirwpz/mimiker/pull/417,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/417,"Add infrastructure for timers that trigger callbacks either periodically or in one-shot mode.
Introduce bintime_t structure for high-fidelity time measurement.
Add i8254 PIT driver.
Use timer infrastructure to trigger system clock every 1ms.
Repurpose MIPS CPU timer for time measurement.","Add infrastructure for timers that trigger callbacks either periodically or in one-shot mode.
Introduce bintime_t structure for high-fidelity time measurement.
Add i8254 PIT driver.
Use timer infrastructure to trigger system clock every 1ms.
Repurpose MIPS CPU timer for time measurement.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,417,2018-04-19T09:31:41Z,2018-04-20T15:29:02Z,2018-04-20T15:29:44Z,MERGED,True,503,91,12,https://github.com/cahirwpz,Use i8254 PIT for system clock,15,[],https://github.com/cahirwpz/mimiker/pull/417,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/417#issuecomment-383065308,"Add infrastructure for timers that trigger callbacks either periodically or in one-shot mode.
Introduce bintime_t structure for high-fidelity time measurement.
Add i8254 PIT driver.
Use timer infrastructure to trigger system clock every 1ms.
Repurpose MIPS CPU timer for time measurement.",@pwit81 I addressed all your remarks. Is there anything else I should explain / fix?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,417,2018-04-19T09:31:41Z,2018-04-20T15:29:02Z,2018-04-20T15:29:44Z,MERGED,True,503,91,12,https://github.com/cahirwpz,Use i8254 PIT for system clock,15,[],https://github.com/cahirwpz/mimiker/pull/417,https://github.com/pwit81,3,https://github.com/cahirwpz/mimiker/pull/417#issuecomment-383066216,"Add infrastructure for timers that trigger callbacks either periodically or in one-shot mode.
Introduce bintime_t structure for high-fidelity time measurement.
Add i8254 PIT driver.
Use timer infrastructure to trigger system clock every 1ms.
Repurpose MIPS CPU timer for time measurement.",Give me a dozen of minutes more.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,417,2018-04-19T09:31:41Z,2018-04-20T15:29:02Z,2018-04-20T15:29:44Z,MERGED,True,503,91,12,https://github.com/cahirwpz,Use i8254 PIT for system clock,15,[],https://github.com/cahirwpz/mimiker/pull/417,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/417#issuecomment-383132820,"Add infrastructure for timers that trigger callbacks either periodically or in one-shot mode.
Introduce bintime_t structure for high-fidelity time measurement.
Add i8254 PIT driver.
Use timer infrastructure to trigger system clock every 1ms.
Repurpose MIPS CPU timer for time measurement.",Ok. We agreed (off-line) that the PR may be merged with master.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,418,2018-04-20T19:19:02Z,2018-06-02T08:15:17Z,2018-06-02T09:29:35Z,MERGED,True,484,24,11,https://github.com/jpszczolowski,Turnstile and mutex implementation,252,[],https://github.com/cahirwpz/mimiker/pull/418,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/418,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,419,2018-04-21T18:59:29Z,2018-05-01T12:43:52Z,2018-10-29T20:19:12Z,MERGED,True,86,1,6,https://github.com/mzr,Testing Coprocessor Unusable and Reserved Instruction exception in userspace.,10,[],https://github.com/cahirwpz/mimiker/pull/419,https://github.com/mzr,1,https://github.com/cahirwpz/mimiker/pull/419,"testing Coprocessor Unusable exception in userspace.
testing Reserved Instruction exception in userspace.","testing Coprocessor Unusable exception in userspace.
testing Reserved Instruction exception in userspace.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,419,2018-04-21T18:59:29Z,2018-05-01T12:43:52Z,2018-10-29T20:19:12Z,MERGED,True,86,1,6,https://github.com/mzr,Testing Coprocessor Unusable and Reserved Instruction exception in userspace.,10,[],https://github.com/cahirwpz/mimiker/pull/419,https://github.com/mzr,2,https://github.com/cahirwpz/mimiker/pull/419#issuecomment-383320541,"testing Coprocessor Unusable exception in userspace.
testing Reserved Instruction exception in userspace.","How to raise Reserved Instruction exception in userspace? Does it really make sense to do that?
EDIT: Figured it out.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,419,2018-04-21T18:59:29Z,2018-05-01T12:43:52Z,2018-10-29T20:19:12Z,MERGED,True,86,1,6,https://github.com/mzr,Testing Coprocessor Unusable and Reserved Instruction exception in userspace.,10,[],https://github.com/cahirwpz/mimiker/pull/419,https://github.com/mzr,3,https://github.com/cahirwpz/mimiker/pull/419#issuecomment-385248306,"testing Coprocessor Unusable exception in userspace.
testing Reserved Instruction exception in userspace.",Created issue #424,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,420,2018-04-22T19:38:39Z,2018-05-04T09:46:41Z,2018-05-04T09:57:49Z,MERGED,True,27,5,2,https://github.com/jpszczolowski,Added non-static set priority function to scheduler,6,[],https://github.com/cahirwpz/mimiker/pull/420,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/420,"As for now in scheduler, we have static function to change thread's active priority. In this pull request we are adding non-static function for other parts of kernel to change thread's base priority (and adjust active accordingly, which involves turnstiles).","As for now in scheduler, we have static function to change thread's active priority. In this pull request we are adding non-static function for other parts of kernel to change thread's base priority (and adjust active accordingly, which involves turnstiles).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,421,2018-04-23T08:25:48Z,2018-05-01T10:23:30Z,2018-05-01T10:23:31Z,MERGED,True,181,90,6,https://github.com/j-piecuch,Major changes to `tlb_refill` and `tlb_exception_handler`,10,[],https://github.com/cahirwpz/mimiker/pull/421,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/421,"TLB misses should not happen in tlb_refill.
tlb_exception_handler is now significantly simpler.","TLB misses should not happen in tlb_refill.
tlb_exception_handler is now significantly simpler.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,421,2018-04-23T08:25:48Z,2018-05-01T10:23:30Z,2018-05-01T10:23:31Z,MERGED,True,181,90,6,https://github.com/j-piecuch,Major changes to `tlb_refill` and `tlb_exception_handler`,10,[],https://github.com/cahirwpz/mimiker/pull/421,https://github.com/j-piecuch,2,https://github.com/cahirwpz/mimiker/pull/421#issuecomment-385506187,"TLB misses should not happen in tlb_refill.
tlb_exception_handler is now significantly simpler.",Yes. I have no further comments.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,422,2018-04-27T18:29:48Z,2018-12-17T18:24:14Z,2018-12-17T18:24:14Z,CLOSED,False,479,6,21,https://github.com/JakubSzczerbinski,A sys_execve wrapper for do_exec [Continuation],51,['WiP'],https://github.com/cahirwpz/mimiker/pull/422,https://github.com/JakubSzczerbinski,1,https://github.com/cahirwpz/mimiker/pull/422,Update and cleanup of changes introduced here.,Update and cleanup of changes introduced here.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,422,2018-04-27T18:29:48Z,2018-12-17T18:24:14Z,2018-12-17T18:24:14Z,CLOSED,False,479,6,21,https://github.com/JakubSzczerbinski,A sys_execve wrapper for do_exec [Continuation],51,['WiP'],https://github.com/cahirwpz/mimiker/pull/422,https://github.com/JakubSzczerbinski,2,https://github.com/cahirwpz/mimiker/pull/422#issuecomment-386833476,Update and cleanup of changes introduced here.,"'sys_execve' should do some signal setup. According to 'http://netbsd.gw.com/cgi-bin/man-cgi?
execve':


""Signals set to be ignored in the calling process are set to be ignored in the new process. Signals which are set to be caught in the calling process image are set to default action in the new process image. Blocked signals remain blocked regardless of changes to the signal action. The signal stack is reset to be undefined (see sigaction(2) for more information).""

This is issue regarding do_exec. These changes only introduce do_exec wrapper and do_exec issues are not relevant for these changes (not directly at least). I think this issue and concerns about the type of exec_args.argv should be addressed indepently from reviewed changes.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,422,2018-04-27T18:29:48Z,2018-12-17T18:24:14Z,2018-12-17T18:24:14Z,CLOSED,False,479,6,21,https://github.com/JakubSzczerbinski,A sys_execve wrapper for do_exec [Continuation],51,['WiP'],https://github.com/cahirwpz/mimiker/pull/422,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/422#issuecomment-397889141,Update and cleanup of changes introduced here.,@JakubSzczerbinski Any progress here?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,422,2018-04-27T18:29:48Z,2018-12-17T18:24:14Z,2018-12-17T18:24:14Z,CLOSED,False,479,6,21,https://github.com/JakubSzczerbinski,A sys_execve wrapper for do_exec [Continuation],51,['WiP'],https://github.com/cahirwpz/mimiker/pull/422,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/422#issuecomment-447947031,Update and cleanup of changes introduced here.,Further sys_execve development was moved to #496,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,423,2018-04-28T10:02:03Z,2018-04-29T20:04:34Z,2018-06-20T07:51:14Z,MERGED,True,10,0,1,https://github.com/jpszczolowski,`preempt_enable` should switch to another thread if indirectly requested,2,[],https://github.com/cahirwpz/mimiker/pull/423,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/423,"In Mimiker we set TDF_NEEDSWITCH when thread's time slice is exhausted or when some another thread with higher priority is added to run queue.
To solve issue #241 I add code to preempt_enable which preempts current thread if TDF_NEEDSWITCH is set.
Note that critical_exit in FreeBSD is counterpart of our preempt_enable.","In Mimiker we set TDF_NEEDSWITCH when thread's time slice is exhausted or when some another thread with higher priority is added to run queue.
To solve issue #241 I add code to preempt_enable which preempts current thread if TDF_NEEDSWITCH is set.
Note that critical_exit in FreeBSD is counterpart of our preempt_enable.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,423,2018-04-28T10:02:03Z,2018-04-29T20:04:34Z,2018-06-20T07:51:14Z,MERGED,True,10,0,1,https://github.com/jpszczolowski,`preempt_enable` should switch to another thread if indirectly requested,2,[],https://github.com/cahirwpz/mimiker/pull/423,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/423#issuecomment-385277413,"In Mimiker we set TDF_NEEDSWITCH when thread's time slice is exhausted or when some another thread with higher priority is added to run queue.
To solve issue #241 I add code to preempt_enable which preempts current thread if TDF_NEEDSWITCH is set.
Note that critical_exit in FreeBSD is counterpart of our preempt_enable.",LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,425,2018-05-02T11:14:43Z,2018-05-02T15:10:44Z,2018-05-02T15:10:44Z,MERGED,True,343,2,13,https://github.com/pwit81,Pipe,14,[],https://github.com/cahirwpz/mimiker/pull/425,https://github.com/pwit81,1,https://github.com/cahirwpz/mimiker/pull/425,Import Anton's work into the main repository.,Import Anton's work into the main repository.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,426,2018-05-03T15:04:51Z,2018-05-03T15:16:56Z,2018-05-03T15:19:47Z,MERGED,True,10,9,6,https://github.com/jpszczolowski,Little cleanup before turnstile PR,4,[],https://github.com/cahirwpz/mimiker/pull/426,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/426,"Move td_prio_t definition from include/thread.h to include/common.h
Rename td_prio_t to prio_t
Unify prio_t from include/interrupt.h with prio_t from include/common.h (now interrupt priority is uint8_t instead if int!)
Add #include <common.h> to include/pool.h","Move td_prio_t definition from include/thread.h to include/common.h
Rename td_prio_t to prio_t
Unify prio_t from include/interrupt.h with prio_t from include/common.h (now interrupt priority is uint8_t instead if int!)
Add #include <common.h> to include/pool.h",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,426,2018-05-03T15:04:51Z,2018-05-03T15:16:56Z,2018-05-03T15:19:47Z,MERGED,True,10,9,6,https://github.com/jpszczolowski,Little cleanup before turnstile PR,4,[],https://github.com/cahirwpz/mimiker/pull/426,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/426#issuecomment-386331509,"Move td_prio_t definition from include/thread.h to include/common.h
Rename td_prio_t to prio_t
Unify prio_t from include/interrupt.h with prio_t from include/common.h (now interrupt priority is uint8_t instead if int!)
Add #include <common.h> to include/pool.h",LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,427,2018-05-04T23:49:47Z,2018-05-25T08:42:01Z,2018-05-25T08:42:24Z,MERGED,True,74,23,1,https://github.com/ilikeheaps,Improve/fix mutex test,19,[],https://github.com/cahirwpz/mimiker/pull/427,https://github.com/ilikeheaps,1,https://github.com/cahirwpz/mimiker/pull/427,"Current mutex test doesn't fail (or fails rarely) with empty mutex implementation.

yield CPU while inside the mutex to create some opportunity for failure
make T parameter (number of threads) easily configurable
add prefixes to variables to separate tests
add a very basic test

The test parameters could be now significantly decreased (empty mutex implementation fails at N=1 T=2) for faster testing.","Current mutex test doesn't fail (or fails rarely) with empty mutex implementation.

yield CPU while inside the mutex to create some opportunity for failure
make T parameter (number of threads) easily configurable
add prefixes to variables to separate tests
add a very basic test

The test parameters could be now significantly decreased (empty mutex implementation fails at N=1 T=2) for faster testing.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,427,2018-05-04T23:49:47Z,2018-05-25T08:42:01Z,2018-05-25T08:42:24Z,MERGED,True,74,23,1,https://github.com/ilikeheaps,Improve/fix mutex test,19,[],https://github.com/cahirwpz/mimiker/pull/427,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/427#issuecomment-391978859,"Current mutex test doesn't fail (or fails rarely) with empty mutex implementation.

yield CPU while inside the mutex to create some opportunity for failure
make T parameter (number of threads) easily configurable
add prefixes to variables to separate tests
add a very basic test

The test parameters could be now significantly decreased (empty mutex implementation fails at N=1 T=2) for faster testing.",LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,428,2018-05-11T11:22:14Z,2018-05-25T14:55:13Z,2018-05-25T15:05:54Z,MERGED,True,311,0,5,https://github.com/jpszczolowski,Added turnstile tests,64,[],https://github.com/cahirwpz/mimiker/pull/428,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/428,"There are three test files:

turnstile_simple.c
turnstile_complex.c
turnstile_adjust.c

The first one checks whether priority propagation happens.
The second one checks whether chain priority propagation happens.
The third one is added because turnstile_simple.c and turnstile_complex.c tests are using mutexes, i.e. are using functions turnstile_wait, turnstile_broadcast, turnstile_lookup, turnstile_acquire, and are not using turnstile_adjust function, which would be left untested.
I think that we should merge these three files into one file or put them into one folder (this would probably require changes in our build system). But now they're separate to increase readability during review.
Test turnstile_adjust.c was made by @ilikeheaps and I've reviewed and accepted it. I put this information here as I can't approve changes to my own PR.","There are three test files:

turnstile_simple.c
turnstile_complex.c
turnstile_adjust.c

The first one checks whether priority propagation happens.
The second one checks whether chain priority propagation happens.
The third one is added because turnstile_simple.c and turnstile_complex.c tests are using mutexes, i.e. are using functions turnstile_wait, turnstile_broadcast, turnstile_lookup, turnstile_acquire, and are not using turnstile_adjust function, which would be left untested.
I think that we should merge these three files into one file or put them into one folder (this would probably require changes in our build system). But now they're separate to increase readability during review.
Test turnstile_adjust.c was made by @ilikeheaps and I've reviewed and accepted it. I put this information here as I can't approve changes to my own PR.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,429,2018-05-11T16:09:23Z,2018-05-11T16:12:13Z,2018-05-11T16:12:13Z,MERGED,True,1,1,1,https://github.com/mzr,Switched to in_kernel_mode function,1,[],https://github.com/cahirwpz/mimiker/pull/429,https://github.com/mzr,1,https://github.com/cahirwpz/mimiker/pull/429,"Since we have that function, we should use it.","Since we have that function, we should use it.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,429,2018-05-11T16:09:23Z,2018-05-11T16:12:13Z,2018-05-11T16:12:13Z,MERGED,True,1,1,1,https://github.com/mzr,Switched to in_kernel_mode function,1,[],https://github.com/cahirwpz/mimiker/pull/429,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/429#issuecomment-388410197,"Since we have that function, we should use it.",LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,430,2018-05-11T17:36:48Z,2018-05-22T13:07:48Z,2018-05-22T13:07:48Z,MERGED,True,14,12,1,https://github.com/wmoc,added reserved instruction handler and updated cp unusable handler to send signals,3,[],https://github.com/cahirwpz/mimiker/pull/430,https://github.com/wmoc,1,https://github.com/cahirwpz/mimiker/pull/430,"Now in case of reserved instruction exception or coprocessor unusable exception (other than FPU coprocessor), SIGILL is sent to process, instead of panicking.","Now in case of reserved instruction exception or coprocessor unusable exception (other than FPU coprocessor), SIGILL is sent to process, instead of panicking.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,431,2018-05-11T19:47:38Z,2018-05-22T14:18:35Z,2018-05-22T14:18:35Z,MERGED,True,43,29,6,https://github.com/mzr,"Testing Floating Point, Unaligned Access exceptions and wrong syscall number behaviour.",14,[],https://github.com/cahirwpz/mimiker/pull/431,https://github.com/mzr,1,https://github.com/cahirwpz/mimiker/pull/431,"refactored   test_exc_cop_unusable(), test_exc_reserved_instruction(), test_syscall_in_bds()
implemented tests: floating point exception, unaligned access, ENOSYS","refactored   test_exc_cop_unusable(), test_exc_reserved_instruction(), test_syscall_in_bds()
implemented tests: floating point exception, unaligned access, ENOSYS",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,432,2018-05-21T10:37:49Z,2018-07-20T16:16:05Z,2018-07-20T16:16:05Z,CLOSED,False,262,4,15,https://github.com/cahirwpz,Simple pipe implementation,56,['WiP'],https://github.com/cahirwpz/mimiker/pull/432,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/432,"The implementation does not support signalling (SIGPIPE) nor read / write atomicity. Our pipes are bidirectional – same as in BSD family.
It's worth to mention that write end of pipe is owner of synchronization primitives and the buffer.","The implementation does not support signalling (SIGPIPE) nor read / write atomicity. Our pipes are bidirectional – same as in BSD family.
It's worth to mention that write end of pipe is owner of synchronization primitives and the buffer.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,432,2018-05-21T10:37:49Z,2018-07-20T16:16:05Z,2018-07-20T16:16:05Z,CLOSED,False,262,4,15,https://github.com/cahirwpz,Simple pipe implementation,56,['WiP'],https://github.com/cahirwpz/mimiker/pull/432,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/432#issuecomment-390644392,"The implementation does not support signalling (SIGPIPE) nor read / write atomicity. Our pipes are bidirectional – same as in BSD family.
It's worth to mention that write end of pipe is owner of synchronization primitives and the buffer.",@pwit81 Please review ringbuf first. This is natural candidate to merge it with master sooner than pipe branch as whole.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,432,2018-05-21T10:37:49Z,2018-07-20T16:16:05Z,2018-07-20T16:16:05Z,CLOSED,False,262,4,15,https://github.com/cahirwpz,Simple pipe implementation,56,['WiP'],https://github.com/cahirwpz/mimiker/pull/432,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/432#issuecomment-390645048,"The implementation does not support signalling (SIGPIPE) nor read / write atomicity. Our pipes are bidirectional – same as in BSD family.
It's worth to mention that write end of pipe is owner of synchronization primitives and the buffer.","@pwit81 Please note that pipe_close might be buggy, but this is not the only reason for this PR to fail tests. There's ongoing work on fixing synchronization of proc structure as well.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,432,2018-05-21T10:37:49Z,2018-07-20T16:16:05Z,2018-07-20T16:16:05Z,CLOSED,False,262,4,15,https://github.com/cahirwpz,Simple pipe implementation,56,['WiP'],https://github.com/cahirwpz/mimiker/pull/432,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/432#issuecomment-392444948,"The implementation does not support signalling (SIGPIPE) nor read / write atomicity. Our pipes are bidirectional – same as in BSD family.
It's worth to mention that write end of pipe is owner of synchronization primitives and the buffer.",TODO (a) make closed producer end available for reading by consumer (b) possibly remove closed field.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,434,2018-05-21T21:35:01Z,2018-05-22T14:28:45Z,2018-05-22T14:30:12Z,MERGED,True,45,10,5,https://github.com/jpszczolowski,Cleanup before turnstile PR - thread getters,15,[],https://github.com/cahirwpz/mimiker/pull/434,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/434,"Implemented getters.
I have no idea whether we want some other getters like td_needs_switch or td_slice_ended.
Maybe we want some setters like td_set_ready, td_set_running, td_set_needswitch or td_clr_needswitch. @cahirwpz ?
EDIT: 33th test seed fails. 😕 😕","Implemented getters.
I have no idea whether we want some other getters like td_needs_switch or td_slice_ended.
Maybe we want some setters like td_set_ready, td_set_running, td_set_needswitch or td_clr_needswitch. @cahirwpz ?
EDIT: 33th test seed fails. 😕 😕",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,434,2018-05-21T21:35:01Z,2018-05-22T14:28:45Z,2018-05-22T14:30:12Z,MERGED,True,45,10,5,https://github.com/jpszczolowski,Cleanup before turnstile PR - thread getters,15,[],https://github.com/cahirwpz/mimiker/pull/434,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/434#issuecomment-390962938,"Implemented getters.
I have no idea whether we want some other getters like td_needs_switch or td_slice_ended.
Maybe we want some setters like td_set_ready, td_set_running, td_set_needswitch or td_clr_needswitch. @cahirwpz ?
EDIT: 33th test seed fails. 😕 😕",LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,434,2018-05-21T21:35:01Z,2018-05-22T14:28:45Z,2018-05-22T14:30:12Z,MERGED,True,45,10,5,https://github.com/jpszczolowski,Cleanup before turnstile PR - thread getters,15,[],https://github.com/cahirwpz/mimiker/pull/434,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/434#issuecomment-390963099,"Implemented getters.
I have no idea whether we want some other getters like td_needs_switch or td_slice_ended.
Maybe we want some setters like td_set_ready, td_set_running, td_set_needswitch or td_clr_needswitch. @cahirwpz ?
EDIT: 33th test seed fails. 😕 😕",If @ilikeheaps accepts I'm willing to merge it.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,434,2018-05-21T21:35:01Z,2018-05-22T14:28:45Z,2018-05-22T14:30:12Z,MERGED,True,45,10,5,https://github.com/jpszczolowski,Cleanup before turnstile PR - thread getters,15,[],https://github.com/cahirwpz/mimiker/pull/434,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/434#issuecomment-390988726,"Implemented getters.
I have no idea whether we want some other getters like td_needs_switch or td_slice_ended.
Maybe we want some setters like td_set_ready, td_set_running, td_set_needswitch or td_clr_needswitch. @cahirwpz ?
EDIT: 33th test seed fails. 😕 😕",Ok. I restored mtx_owner function and adjusted documentation string appropriately.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,435,2018-05-22T12:38:30Z,2018-05-26T08:44:50Z,2018-05-26T08:44:50Z,MERGED,True,70,26,2,https://github.com/j-piecuch,Allow for multiple tests to be specified on the command line + non-default repeat for user-specified tests,6,[],https://github.com/cahirwpz/mimiker/pull/435,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/435,"The user can now specify multiple specific tests to be run, e.g. test=findspace,user_pmap.
It is now also possible to specify a repeat count for tests other than all, so for example test=findspace,user_pmap repeat=2 will first run findspace 2 times, and then run user_pmap 2 times.","The user can now specify multiple specific tests to be run, e.g. test=findspace,user_pmap.
It is now also possible to specify a repeat count for tests other than all, so for example test=findspace,user_pmap repeat=2 will first run findspace 2 times, and then run user_pmap 2 times.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,435,2018-05-22T12:38:30Z,2018-05-26T08:44:50Z,2018-05-26T08:44:50Z,MERGED,True,70,26,2,https://github.com/j-piecuch,Allow for multiple tests to be specified on the command line + non-default repeat for user-specified tests,6,[],https://github.com/cahirwpz/mimiker/pull/435,https://github.com/mzr,2,https://github.com/cahirwpz/mimiker/pull/435#issuecomment-391033633,"The user can now specify multiple specific tests to be run, e.g. test=findspace,user_pmap.
It is now also possible to specify a repeat count for tests other than all, so for example test=findspace,user_pmap repeat=2 will first run findspace 2 times, and then run user_pmap 2 times.",Could you please add description of this functionality to #436?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,435,2018-05-22T12:38:30Z,2018-05-26T08:44:50Z,2018-05-26T08:44:50Z,MERGED,True,70,26,2,https://github.com/j-piecuch,Allow for multiple tests to be specified on the command line + non-default repeat for user-specified tests,6,[],https://github.com/cahirwpz/mimiker/pull/435,https://github.com/j-piecuch,3,https://github.com/cahirwpz/mimiker/pull/435#issuecomment-391034990,"The user can now specify multiple specific tests to be run, e.g. test=findspace,user_pmap.
It is now also possible to specify a repeat count for tests other than all, so for example test=findspace,user_pmap repeat=2 will first run findspace 2 times, and then run user_pmap 2 times.",I will as soon as the changes are actually merged into master.,True,{'THUMBS_UP': ['https://github.com/mzr']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,435,2018-05-22T12:38:30Z,2018-05-26T08:44:50Z,2018-05-26T08:44:50Z,MERGED,True,70,26,2,https://github.com/j-piecuch,Allow for multiple tests to be specified on the command line + non-default repeat for user-specified tests,6,[],https://github.com/cahirwpz/mimiker/pull/435,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/435#issuecomment-392099720,"The user can now specify multiple specific tests to be run, e.g. test=findspace,user_pmap.
It is now also possible to specify a repeat count for tests other than all, so for example test=findspace,user_pmap repeat=2 will first run findspace 2 times, and then run user_pmap 2 times.","@j-piecuch #436 got merged. Please add info to tests/README.md (mandatory) and improve the document (optional) if you wish.
BTW. Please have a look at build error on my last commit to this branch - apparently it's pmap related...",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,436,2018-05-22T14:58:54Z,2018-05-25T15:42:25Z,2018-05-25T15:42:26Z,MERGED,True,72,9,2,https://github.com/mzr,Testing infrastructure description in readme.,14,[],https://github.com/cahirwpz/mimiker/pull/436,https://github.com/mzr,1,https://github.com/cahirwpz/mimiker/pull/436,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,436,2018-05-22T14:58:54Z,2018-05-25T15:42:25Z,2018-05-25T15:42:26Z,MERGED,True,72,9,2,https://github.com/mzr,Testing infrastructure description in readme.,14,[],https://github.com/cahirwpz/mimiker/pull/436,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/436#issuecomment-391606627,,Please run spell checker on the file (usefull -> useful) and move info about tests to tests/README.md.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,436,2018-05-22T14:58:54Z,2018-05-25T15:42:25Z,2018-05-25T15:42:26Z,MERGED,True,72,9,2,https://github.com/mzr,Testing infrastructure description in readme.,14,[],https://github.com/cahirwpz/mimiker/pull/436,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/436#issuecomment-392098602,,LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,437,2018-05-23T20:11:59Z,2018-06-07T21:21:47Z,2018-06-07T21:21:48Z,CLOSED,False,385,91,14,https://github.com/wmoc,Resource Management,44,['WiP'],https://github.com/cahirwpz/mimiker/pull/437,https://github.com/wmoc,1,https://github.com/cahirwpz/mimiker/pull/437,We need good resource manager like other BSDs. Now for example ISA and PCI devices are using the same memory addresses.,We need good resource manager like other BSDs. Now for example ISA and PCI devices are using the same memory addresses.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,437,2018-05-23T20:11:59Z,2018-06-07T21:21:47Z,2018-06-07T21:21:48Z,CLOSED,False,385,91,14,https://github.com/wmoc,Resource Management,44,['WiP'],https://github.com/cahirwpz/mimiker/pull/437,https://github.com/wmoc,2,https://github.com/cahirwpz/mimiker/pull/437#issuecomment-395569184,We need good resource manager like other BSDs. Now for example ISA and PCI devices are using the same memory addresses.,Continued in #447,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,438,2018-05-25T06:19:38Z,2018-06-06T18:45:54Z,2018-06-06T18:45:54Z,CLOSED,False,336,113,15,https://github.com/mzr,Abstractions for device resource management.,29,['WiP'],https://github.com/cahirwpz/mimiker/pull/438,https://github.com/mzr,1,https://github.com/cahirwpz/mimiker/pull/438,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,438,2018-05-25T06:19:38Z,2018-06-06T18:45:54Z,2018-06-06T18:45:54Z,CLOSED,False,336,113,15,https://github.com/mzr,Abstractions for device resource management.,29,['WiP'],https://github.com/cahirwpz/mimiker/pull/438,https://github.com/wmoc,2,https://github.com/cahirwpz/mimiker/pull/438#issuecomment-395173582,,Included in #447,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,439,2018-05-25T08:06:37Z,2018-05-25T15:18:26Z,2018-05-25T15:18:26Z,MERGED,True,20,4,1,https://github.com/j-piecuch,pmap_setup now preserves calling thread's mapping and disables preemption.,2,[],https://github.com/cahirwpz/mimiker/pull/439,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/439,"pmap_setup had a bug which made a thread clear its own UPD when switched out at a certain point during initialization of a new pmap. It also didn't preserve the calling thread's UPD mapping, so  calling pmap_new had a side effect of actually activating the newly created pmap. This PR fixes both issues.","pmap_setup had a bug which made a thread clear its own UPD when switched out at a certain point during initialization of a new pmap. It also didn't preserve the calling thread's UPD mapping, so  calling pmap_new had a side effect of actually activating the newly created pmap. This PR fixes both issues.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,439,2018-05-25T08:06:37Z,2018-05-25T15:18:26Z,2018-05-25T15:18:26Z,MERGED,True,20,4,1,https://github.com/j-piecuch,pmap_setup now preserves calling thread's mapping and disables preemption.,2,[],https://github.com/cahirwpz/mimiker/pull/439,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/439#issuecomment-392090542,"pmap_setup had a bug which made a thread clear its own UPD when switched out at a certain point during initialization of a new pmap. It also didn't preserve the calling thread's UPD mapping, so  calling pmap_new had a side effect of actually activating the newly created pmap. This PR fixes both issues.",This looks ok and I'll merge this PR. However I have some doubts if nobody actively uses PD during interrupt handling. FTTB I cannot see such thing to happen.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,440,2018-05-25T20:41:16Z,2018-05-25T21:19:32Z,2018-05-26T16:35:11Z,CLOSED,False,283,8,4,https://github.com/pwit81,Ringbuf tests and fixes,1,[],https://github.com/cahirwpz/mimiker/pull/440,https://github.com/pwit81,1,https://github.com/cahirwpz/mimiker/pull/440,Adds unit tests for ring buffer. Fixes the implementation.,Adds unit tests for ring buffer. Fixes the implementation.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,440,2018-05-25T20:41:16Z,2018-05-25T21:19:32Z,2018-05-26T16:35:11Z,CLOSED,False,283,8,4,https://github.com/pwit81,Ringbuf tests and fixes,1,[],https://github.com/cahirwpz/mimiker/pull/440,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/440#issuecomment-392240799,Adds unit tests for ring buffer. Fixes the implementation.,FYI I applied some fixes to ringbuf_read and ringbuf_write and merged them with master.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,440,2018-05-25T20:41:16Z,2018-05-25T21:19:32Z,2018-05-26T16:35:11Z,CLOSED,False,283,8,4,https://github.com/pwit81,Ringbuf tests and fixes,1,[],https://github.com/cahirwpz/mimiker/pull/440,https://github.com/pwit81,3,https://github.com/cahirwpz/mimiker/pull/440#issuecomment-392272663,Adds unit tests for ring buffer. Fixes the implementation.,"This was still buggy. I fixed it, added unit tests and pushed to branch ringbuf.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,441,2018-05-26T08:30:21Z,2018-07-05T13:37:10Z,2018-07-05T13:37:11Z,MERGED,True,23,1,2,https://github.com/j-piecuch,Detect kernel stack overflow in kern_exc_enter and panic when it happens.,5,['WiP'],https://github.com/cahirwpz/mimiker/pull/441,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/441,I think that most of the intermittent test failures are caused by kernel stack overflows due to the timer interrupt interrupting its own handler. This PR introduces a check into kern_exc_enter so that such incidents can be caught and the kernel can safely panic with the space that's left on the stack.,I think that most of the intermittent test failures are caused by kernel stack overflows due to the timer interrupt interrupting its own handler. This PR introduces a check into kern_exc_enter so that such incidents can be caught and the kernel can safely panic with the space that's left on the stack.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,441,2018-05-26T08:30:21Z,2018-07-05T13:37:10Z,2018-07-05T13:37:11Z,MERGED,True,23,1,2,https://github.com/j-piecuch,Detect kernel stack overflow in kern_exc_enter and panic when it happens.,5,['WiP'],https://github.com/cahirwpz/mimiker/pull/441,https://github.com/j-piecuch,2,https://github.com/cahirwpz/mimiker/pull/441#issuecomment-392333391,I think that most of the intermittent test failures are caused by kernel stack overflows due to the timer interrupt interrupting its own handler. This PR introduces a check into kern_exc_enter so that such incidents can be caught and the kernel can safely panic with the space that's left on the stack.,You can see that the tests for this PR fail because of kstack overflow -- see the backtrace.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,441,2018-05-26T08:30:21Z,2018-07-05T13:37:10Z,2018-07-05T13:37:11Z,MERGED,True,23,1,2,https://github.com/j-piecuch,Detect kernel stack overflow in kern_exc_enter and panic when it happens.,5,['WiP'],https://github.com/cahirwpz/mimiker/pull/441,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/441#issuecomment-396059345,I think that most of the intermittent test failures are caused by kernel stack overflows due to the timer interrupt interrupting its own handler. This PR introduces a check into kern_exc_enter so that such incidents can be caught and the kernel can safely panic with the space that's left on the stack.,@j-piecuch Please merge the most recent master with this branch.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,441,2018-05-26T08:30:21Z,2018-07-05T13:37:10Z,2018-07-05T13:37:11Z,MERGED,True,23,1,2,https://github.com/j-piecuch,Detect kernel stack overflow in kern_exc_enter and panic when it happens.,5,['WiP'],https://github.com/cahirwpz/mimiker/pull/441,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/441#issuecomment-396501223,I think that most of the intermittent test failures are caused by kernel stack overflows due to the timer interrupt interrupting its own handler. This PR introduces a check into kern_exc_enter so that such incidents can be caught and the kernel can safely panic with the space that's left on the stack.,To reproduce the error put break tlb_refill if $$bad == 0x80000000 into .gdbinit.template. With such setup kernel crashes quite consistently. However if simulators.py:69 is changed from shift=auto to shift=3 then the bug goes away under patched QEMU 2.12.0. Hence I reckon this is yet another time-measurement related issue but I might be wrong.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,442,2018-05-26T16:37:30Z,2019-01-09T10:03:27Z,2019-01-09T10:04:50Z,MERGED,True,219,7,4,https://github.com/pwit81,Unit tests and another fix to ring buffer impl.,12,[],https://github.com/cahirwpz/mimiker/pull/442,https://github.com/pwit81,1,https://github.com/cahirwpz/mimiker/pull/442,Corrected a bug and added some unit tests.,Corrected a bug and added some unit tests.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,442,2018-05-26T16:37:30Z,2019-01-09T10:03:27Z,2019-01-09T10:04:50Z,MERGED,True,219,7,4,https://github.com/pwit81,Unit tests and another fix to ring buffer impl.,12,[],https://github.com/cahirwpz/mimiker/pull/442,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/442#issuecomment-396059164,Corrected a bug and added some unit tests.,For the record: I backported ringbuf fix into master. Thanks for finding it!,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,442,2018-05-26T16:37:30Z,2019-01-09T10:03:27Z,2019-01-09T10:04:50Z,MERGED,True,219,7,4,https://github.com/pwit81,Unit tests and another fix to ring buffer impl.,12,[],https://github.com/cahirwpz/mimiker/pull/442,https://github.com/jpszczolowski,3,https://github.com/cahirwpz/mimiker/pull/442#issuecomment-448387180,Corrected a bug and added some unit tests.,Why don't we have ringbuf tests in master branch?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,442,2018-05-26T16:37:30Z,2019-01-09T10:03:27Z,2019-01-09T10:04:50Z,MERGED,True,219,7,4,https://github.com/pwit81,Unit tests and another fix to ring buffer impl.,12,[],https://github.com/cahirwpz/mimiker/pull/442,https://github.com/jpszczolowski,4,https://github.com/cahirwpz/mimiker/pull/442#issuecomment-451572595,Corrected a bug and added some unit tests.,"@pwit81 do we need kmalloc and UIO_SINGLE_KERNEL in these tests? I think that ringbuf tests should use ringbuf and as few other modules as possible. If we need a buffer, we can use a local array inside test function.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,442,2018-05-26T16:37:30Z,2019-01-09T10:03:27Z,2019-01-09T10:04:50Z,MERGED,True,219,7,4,https://github.com/pwit81,Unit tests and another fix to ring buffer impl.,12,[],https://github.com/cahirwpz/mimiker/pull/442,https://github.com/cahirwpz,5,https://github.com/cahirwpz/mimiker/pull/442#issuecomment-451928615,Corrected a bug and added some unit tests.,@pwit81 I'm somewhat confused why this PR introduces ringbuf_alloc and ringbuf_destroy.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,442,2018-05-26T16:37:30Z,2019-01-09T10:03:27Z,2019-01-09T10:04:50Z,MERGED,True,219,7,4,https://github.com/pwit81,Unit tests and another fix to ring buffer impl.,12,[],https://github.com/cahirwpz/mimiker/pull/442,https://github.com/jpszczolowski,6,https://github.com/cahirwpz/mimiker/pull/442#issuecomment-451928908,Corrected a bug and added some unit tests.,"@pwit81 ok, I'm sorry, use of UIO_SINGLE_KERNEL in the tests is necessary. But I'm not sure whether we want to introduce ringbuf_alloc, ringbuf_destroy and kmem_pool inside ringbuf implementation and tests.
I've:

changed implementation of produce and consume and added asserts (so that now these functions cannot be used wrong),
moved each test into separate KTEST_ADD.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,442,2018-05-26T16:37:30Z,2019-01-09T10:03:27Z,2019-01-09T10:04:50Z,MERGED,True,219,7,4,https://github.com/pwit81,Unit tests and another fix to ring buffer impl.,12,[],https://github.com/cahirwpz/mimiker/pull/442,https://github.com/jpszczolowski,7,https://github.com/cahirwpz/mimiker/pull/442#issuecomment-451929101,Corrected a bug and added some unit tests.,"@cahirwpz yes, exactly.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,442,2018-05-26T16:37:30Z,2019-01-09T10:03:27Z,2019-01-09T10:04:50Z,MERGED,True,219,7,4,https://github.com/pwit81,Unit tests and another fix to ring buffer impl.,12,[],https://github.com/cahirwpz/mimiker/pull/442,https://github.com/cahirwpz,8,https://github.com/cahirwpz/mimiker/pull/442#issuecomment-451940276,Corrected a bug and added some unit tests.,"I think we can safely replace ringbuf_alloc, ringbuf_destroy with
void ringbuf_init(ringbuf_t *rb, void *buf, size_t buflen) { ... }",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,442,2018-05-26T16:37:30Z,2019-01-09T10:03:27Z,2019-01-09T10:04:50Z,MERGED,True,219,7,4,https://github.com/pwit81,Unit tests and another fix to ring buffer impl.,12,[],https://github.com/cahirwpz/mimiker/pull/442,https://github.com/jpszczolowski,9,https://github.com/cahirwpz/mimiker/pull/442#issuecomment-452481922,Corrected a bug and added some unit tests.,@cahirwpz in my opinion this PR is ready,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,443,2018-05-27T10:59:44Z,2018-07-05T12:49:13Z,2018-07-05T12:49:13Z,MERGED,True,79,27,8,https://github.com/j-piecuch,Move some special-purpose code & data to separate sections.,8,[],https://github.com/cahirwpz/mimiker/pull/443,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/443,"Move exception entry points to .ebase
Move code from exc.S to .text.wired
Move pcpu data to .data.wired
Move TLB debug code & data to .text.debug & .data.debug respectively","Move exception entry points to .ebase
Move code from exc.S to .text.wired
Move pcpu data to .data.wired
Move TLB debug code & data to .text.debug & .data.debug respectively",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,444,2018-05-29T18:20:42Z,2018-05-31T21:05:55Z,2018-05-31T21:05:55Z,MERGED,True,68,18,2,https://github.com/j-piecuch, Disable interrupts & don't generate exceptions when accessing TLB ,14,[],https://github.com/cahirwpz/mimiker/pull/444,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/444,"Depends on #443.
Diff: j-piecuch/mimiker@special-sections...j-piecuch:tlb-intr-fix
Functions that access the TLB must not be interrupted or generate exceptions between setting necessary coprocessor 0 register and executing the instruction that consumes them.","Depends on #443.
Diff: j-piecuch/mimiker@special-sections...j-piecuch:tlb-intr-fix
Functions that access the TLB must not be interrupted or generate exceptions between setting necessary coprocessor 0 register and executing the instruction that consumes them.",True,{'HOORAY': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,444,2018-05-29T18:20:42Z,2018-05-31T21:05:55Z,2018-05-31T21:05:55Z,MERGED,True,68,18,2,https://github.com/j-piecuch, Disable interrupts & don't generate exceptions when accessing TLB ,14,[],https://github.com/cahirwpz/mimiker/pull/444,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/444#issuecomment-393670577,"Depends on #443.
Diff: j-piecuch/mimiker@special-sections...j-piecuch:tlb-intr-fix
Functions that access the TLB must not be interrupted or generate exceptions between setting necessary coprocessor 0 register and executing the instruction that consumes them.",This patch seems to fix some random crashes in master. I'll merge it ASAP.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,445,2018-06-02T15:53:14Z,2018-06-04T06:34:55Z,2018-06-04T06:34:55Z,MERGED,True,26,9,2,https://github.com/j-piecuch,Synchronize pmap operations using mutexes,3,[],https://github.com/cahirwpz/mimiker/pull/445,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/445,"Add mutex to pmap_t
Synchronize pmap operations using mutexes","Add mutex to pmap_t
Synchronize pmap operations using mutexes",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,445,2018-06-02T15:53:14Z,2018-06-04T06:34:55Z,2018-06-04T06:34:55Z,MERGED,True,26,9,2,https://github.com/j-piecuch,Synchronize pmap operations using mutexes,3,[],https://github.com/cahirwpz/mimiker/pull/445,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/445#issuecomment-394248578,"Add mutex to pmap_t
Synchronize pmap operations using mutexes",LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,446,2018-06-03T16:27:00Z,2018-07-04T08:33:18Z,2018-07-04T08:33:18Z,MERGED,True,427,327,17,https://github.com/j-piecuch,vm_map: API rework & synchronization,16,[],https://github.com/cahirwpz/mimiker/pull/446,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/446,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,446,2018-06-03T16:27:00Z,2018-07-04T08:33:18Z,2018-07-04T08:33:18Z,MERGED,True,427,327,17,https://github.com/j-piecuch,vm_map: API rework & synchronization,16,[],https://github.com/cahirwpz/mimiker/pull/446,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/446#issuecomment-397871494,,@j-piecuch What is the progress with adding vm_object_alloc and vm_map_insert?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,447,2018-06-06T18:42:14Z,2018-06-19T09:53:22Z,2018-06-19T10:58:14Z,MERGED,True,512,246,17,https://github.com/mzr,bus_resource_alloc for devices & resource manager,149,[],https://github.com/cahirwpz/mimiker/pull/447,https://github.com/mzr,1,https://github.com/cahirwpz/mimiker/pull/447,Adds bus_resource_allocate_* interface to device drivers infrastructure which uses resource manager.,Adds bus_resource_allocate_* interface to device drivers infrastructure which uses resource manager.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,448,2018-06-07T20:32:12Z,2018-06-10T12:14:18Z,2018-06-10T12:14:18Z,CLOSED,False,8,2,2,https://github.com/wmoc,added flag PF_ZERO,1,['WiP'],https://github.com/cahirwpz/mimiker/pull/448,https://github.com/wmoc,1,https://github.com/cahirwpz/mimiker/pull/448,"Having flag which tells pool allocator to returned memory with zeros, is simpler and more elegant way, than clearing data structure fields one by one in constructor.","Having flag which tells pool allocator to returned memory with zeros, is simpler and more elegant way, than clearing data structure fields one by one in constructor.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,448,2018-06-07T20:32:12Z,2018-06-10T12:14:18Z,2018-06-10T12:14:18Z,CLOSED,False,8,2,2,https://github.com/wmoc,added flag PF_ZERO,1,['WiP'],https://github.com/cahirwpz/mimiker/pull/448,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/448#issuecomment-396044452,"Having flag which tells pool allocator to returned memory with zeros, is simpler and more elegant way, than clearing data structure fields one by one in constructor.","During conversation we came to conclusion that this PR is wrongly motivated.
That was most likely caused by missing documentation. @wmoczulsky will add
doxygen-style documentation that explains purpose of this allocator and its API.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,449,2018-06-08T16:06:18Z,2018-06-09T06:09:45Z,2018-06-09T10:12:25Z,MERGED,True,5,5,1,https://github.com/jpszczolowski,Typo in tests/README.md,7,[],https://github.com/cahirwpz/mimiker/pull/449,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/449,"Fixed typo ""test"" to ""tests"".
Deleted trailing spaces from the file.","Fixed typo ""test"" to ""tests"".
Deleted trailing spaces from the file.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,449,2018-06-08T16:06:18Z,2018-06-09T06:09:45Z,2018-06-09T10:12:25Z,MERGED,True,5,5,1,https://github.com/jpszczolowski,Typo in tests/README.md,7,[],https://github.com/cahirwpz/mimiker/pull/449,https://github.com/mzr,2,https://github.com/cahirwpz/mimiker/pull/449#issuecomment-395818516,"Fixed typo ""test"" to ""tests"".
Deleted trailing spaces from the file.",Looks good to me.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,450,2018-06-09T23:47:25Z,2018-07-07T10:13:01Z,2018-07-08T23:50:06Z,MERGED,True,223,20,6,https://github.com/ilikeheaps,Interruptible sleep,69,[],https://github.com/cahirwpz/mimiker/pull/450,https://github.com/ilikeheaps,1,https://github.com/cahirwpz/mimiker/pull/450,"add function sleepq_wait_abortable for sleeping with some special options (only SLPF_INT currently)

it will return the cause of wake-up
regular sleepq_wait has no change in semantics
I want to use at least one more flag (for timed sleep) so that's why it appears a bit over-engineered right now


add function sleepq_abort to wake up a particular thread (with special reason like SLEEPQ_WKP_INT)

the functions returns true if it succeeded; false otherwise (if the thread isn't sleeping or doesn't accept the reason)


use that function to wake up the target thread in sig_send","add function sleepq_wait_abortable for sleeping with some special options (only SLPF_INT currently)

it will return the cause of wake-up
regular sleepq_wait has no change in semantics
I want to use at least one more flag (for timed sleep) so that's why it appears a bit over-engineered right now


add function sleepq_abort to wake up a particular thread (with special reason like SLEEPQ_WKP_INT)

the functions returns true if it succeeded; false otherwise (if the thread isn't sleeping or doesn't accept the reason)


use that function to wake up the target thread in sig_send",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,450,2018-06-09T23:47:25Z,2018-07-07T10:13:01Z,2018-07-08T23:50:06Z,MERGED,True,223,20,6,https://github.com/ilikeheaps,Interruptible sleep,69,[],https://github.com/cahirwpz/mimiker/pull/450,https://github.com/ilikeheaps,2,https://github.com/cahirwpz/mimiker/pull/450#issuecomment-401577559,"add function sleepq_wait_abortable for sleeping with some special options (only SLPF_INT currently)

it will return the cause of wake-up
regular sleepq_wait has no change in semantics
I want to use at least one more flag (for timed sleep) so that's why it appears a bit over-engineered right now


add function sleepq_abort to wake up a particular thread (with special reason like SLEEPQ_WKP_INT)

the functions returns true if it succeeded; false otherwise (if the thread isn't sleeping or doesn't accept the reason)


use that function to wake up the target thread in sig_send","This PR depends on #459.
@cahirwpz I think I addressed all issues we discussed during last meeting. I have only few more considerations right now:

Should we make a macro for calling sleepq_wait(wchan, waitpt) with waitpt = __caller(0), perhaps in a separate PR?
I suppose it would make sense to explain the terminology (interruptible vs. abortable) somewhere or change it.
I changed the flags and now wakeup type is just a subset of sleep flags type. So
status = sleepq_wait_abortable(wchan, waitpt, SQ_INTERRUPT)
means ""sleep interruptibly"" and status == SQ_INTERRUPT means ""was I woken by an interrupt?"". Is this fine or should we instead make synonyms for use in different contexts for cleaner code (SQ_INTERRUPTED, SQ_INTERRUPTIBLE)? I actually introduced separate typedefs for flags and wakeups (sq_flags_t and sq_wakeup_t) so perhaps it would make sense to have also separate names for the defined values.
Should we #define sleepq_wait_interruptible(wchan, waitpt) sleepq_wait_abortable(wchan, waitpt, SQ_INTERRUPT)?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,450,2018-06-09T23:47:25Z,2018-07-07T10:13:01Z,2018-07-08T23:50:06Z,MERGED,True,223,20,6,https://github.com/ilikeheaps,Interruptible sleep,69,[],https://github.com/cahirwpz/mimiker/pull/450,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/450#issuecomment-402507797,"add function sleepq_wait_abortable for sleeping with some special options (only SLPF_INT currently)

it will return the cause of wake-up
regular sleepq_wait has no change in semantics
I want to use at least one more flag (for timed sleep) so that's why it appears a bit over-engineered right now


add function sleepq_abort to wake up a particular thread (with special reason like SLEEPQ_WKP_INT)

the functions returns true if it succeeded; false otherwise (if the thread isn't sleeping or doesn't accept the reason)


use that function to wake up the target thread in sig_send",@ilikeheaps The PR is ready for merge in my opinion. Please review the code.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,451,2018-06-10T10:52:14Z,2018-06-10T12:10:12Z,2018-06-10T12:10:45Z,MERGED,True,22,19,2,https://github.com/jpszczolowski,Fix and enable callout tests,10,[],https://github.com/cahirwpz/mimiker/pull/451,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/451,"bzero local callout_t variables (there was a problem with non-zero initial c_flags flag within callout_t variables, which is checked in _callout_setup function) in callout tests and sleepq test
disable interrupts instead of preemption (race conditions)
remove one critical section as callouts already run with interrupts disabled","bzero local callout_t variables (there was a problem with non-zero initial c_flags flag within callout_t variables, which is checked in _callout_setup function) in callout tests and sleepq test
disable interrupts instead of preemption (race conditions)
remove one critical section as callouts already run with interrupts disabled",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,451,2018-06-10T10:52:14Z,2018-06-10T12:10:12Z,2018-06-10T12:10:45Z,MERGED,True,22,19,2,https://github.com/jpszczolowski,Fix and enable callout tests,10,[],https://github.com/cahirwpz/mimiker/pull/451,https://github.com/jpszczolowski,2,https://github.com/cahirwpz/mimiker/pull/451#issuecomment-396043709,"bzero local callout_t variables (there was a problem with non-zero initial c_flags flag within callout_t variables, which is checked in _callout_setup function) in callout tests and sleepq test
disable interrupts instead of preemption (race conditions)
remove one critical section as callouts already run with interrupts disabled",These changes have been included in #451,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,451,2018-06-10T10:52:14Z,2018-06-10T12:10:12Z,2018-06-10T12:10:45Z,MERGED,True,22,19,2,https://github.com/jpszczolowski,Fix and enable callout tests,10,[],https://github.com/cahirwpz/mimiker/pull/451,https://github.com/jpszczolowski,3,https://github.com/cahirwpz/mimiker/pull/451#issuecomment-396043837,"bzero local callout_t variables (there was a problem with non-zero initial c_flags flag within callout_t variables, which is checked in _callout_setup function) in callout tests and sleepq test
disable interrupts instead of preemption (race conditions)
remove one critical section as callouts already run with interrupts disabled",Closed by accident.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,451,2018-06-10T10:52:14Z,2018-06-10T12:10:12Z,2018-06-10T12:10:45Z,MERGED,True,22,19,2,https://github.com/jpszczolowski,Fix and enable callout tests,10,[],https://github.com/cahirwpz/mimiker/pull/451,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/451#issuecomment-396044154,"bzero local callout_t variables (there was a problem with non-zero initial c_flags flag within callout_t variables, which is checked in _callout_setup function) in callout tests and sleepq test
disable interrupts instead of preemption (race conditions)
remove one critical section as callouts already run with interrupts disabled",LGTM.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,452,2018-06-10T11:15:40Z,2018-06-10T12:06:02Z,2018-06-10T12:06:42Z,CLOSED,False,1,0,1,https://github.com/jpszczolowski,Fix wrong callout creation in sleepq test,7,[],https://github.com/cahirwpz/mimiker/pull/452,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/452,bzero local callout_t variable as described in #451,bzero local callout_t variable as described in #451,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,452,2018-06-10T11:15:40Z,2018-06-10T12:06:02Z,2018-06-10T12:06:42Z,CLOSED,False,1,0,1,https://github.com/jpszczolowski,Fix wrong callout creation in sleepq test,7,[],https://github.com/cahirwpz/mimiker/pull/452,https://github.com/jpszczolowski,2,https://github.com/cahirwpz/mimiker/pull/452#issuecomment-396043878,bzero local callout_t variable as described in #451,These changes have been included in #451,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,455,2018-06-10T18:18:48Z,2018-06-11T10:12:31Z,2018-06-11T10:12:31Z,MERGED,True,72,52,2,https://github.com/j-piecuch,Add PT access procedures & simplify tlb_refill,2,[],https://github.com/cahirwpz/mimiker/pull/455,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/455,"Add pmap_pte_read and pmap_pte_write which don't generate TLB misses on PT access.
Remove code handling PT accesses from tlb_refill","Add pmap_pte_read and pmap_pte_write which don't generate TLB misses on PT access.
Remove code handling PT accesses from tlb_refill",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,456,2018-06-15T11:15:05Z,2018-06-17T12:11:39Z,2018-06-17T12:13:52Z,MERGED,True,77,45,3,https://github.com/jpszczolowski,Implemented callout_drain & tweaked callout tests,13,[],https://github.com/cahirwpz/mimiker/pull/456,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/456,"implemented callout_drain
tweaked callout tests
added callout_drain test","implemented callout_drain
tweaked callout tests
added callout_drain test",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,456,2018-06-15T11:15:05Z,2018-06-17T12:11:39Z,2018-06-17T12:13:52Z,MERGED,True,77,45,3,https://github.com/jpszczolowski,Implemented callout_drain & tweaked callout tests,13,[],https://github.com/cahirwpz/mimiker/pull/456,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/456#issuecomment-397874621,"implemented callout_drain
tweaked callout tests
added callout_drain test",LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,457,2018-06-18T13:27:30Z,2019-11-28T16:58:24Z,2019-11-28T21:51:38Z,MERGED,True,91,37,2,https://github.com/cahirwpz,MIPS CPU timer implementation,16,['bug'],https://github.com/cahirwpz/mimiker/pull/457,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/457,"MIPS processor built-in timer utilizes C0_COUNT and C0_COMPARE registers of system coprocessor. It has much higher resolution than Intel PIT and could be used to deliver both periodic interrupt and timestamps.
Unfortunately the timer moves forward in time without a good reason. That behavior cannot be reproduced on mimiker server, but when QEMU runs in Docker (through CircleCI) the bug is triggered every test run.
To be sure the culprit is QEMU, I have to dig into its sources and find when C0_COUNT is compared against C0_COMPARE and if C0_COUNT is dependent only on processed instruction count.
EDIT: Apparently this bug was fixed somewhere between QEMU 2.10 and 4.1 :)","MIPS processor built-in timer utilizes C0_COUNT and C0_COMPARE registers of system coprocessor. It has much higher resolution than Intel PIT and could be used to deliver both periodic interrupt and timestamps.
Unfortunately the timer moves forward in time without a good reason. That behavior cannot be reproduced on mimiker server, but when QEMU runs in Docker (through CircleCI) the bug is triggered every test run.
To be sure the culprit is QEMU, I have to dig into its sources and find when C0_COUNT is compared against C0_COMPARE and if C0_COUNT is dependent only on processed instruction count.
EDIT: Apparently this bug was fixed somewhere between QEMU 2.10 and 4.1 :)",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,458,2018-06-19T11:56:07Z,2018-07-26T12:42:42Z,2018-07-27T15:34:48Z,MERGED,True,516,316,16,https://github.com/cahirwpz,Update ISA drivers to allocate port ranges,24,"['bug', 'WiP']",https://github.com/cahirwpz/mimiker/pull/458,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/458,"@dingorth @wmoczulsky Please fix recently introduced code to handle use case that was introduced with this PR, i.e. I want to allocate ISA port ranges.","@dingorth @wmoczulsky Please fix recently introduced code to handle use case that was introduced with this PR, i.e. I want to allocate ISA port ranges.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,458,2018-06-19T11:56:07Z,2018-07-26T12:42:42Z,2018-07-27T15:34:48Z,MERGED,True,516,316,16,https://github.com/cahirwpz,Update ISA drivers to allocate port ranges,24,"['bug', 'WiP']",https://github.com/cahirwpz/mimiker/pull/458,https://github.com/mzr,2,https://github.com/cahirwpz/mimiker/pull/458#issuecomment-401143416,"@dingorth @wmoczulsky Please fix recently introduced code to handle use case that was introduced with this PR, i.e. I want to allocate ISA port ranges.","Ok, I know what causes that.
Firstly, start, and end require absolute addresses, not offsets within specific rman.
Secondly, atkbdc_probe allocates resource:
  resource_t *regs = bus_resource_alloc(dev, RT_ISA, 0, IO_KBD + ISA_BEGIN, ISA_BEGIN + IO_KBD + IO_KBDSIZE - 1, IO_KBDSIZE, 0);
This resource is not deallocated! It should be, but resource deallocation is not implemented.
Then when we are trying to allocate this resource for the second time in atkbdc_attach,
  atkbdc->regs = bus_resource_alloc(dev, RT_ISA, 0, IO_KBD + ISA_BEGIN, ISA_BEGIN + IO_KBD + IO_KBDSIZE - 1, IO_KBDSIZE, 0);
we can't have it because it was already allocated and it's not shareable (because shareable resources are not implemented yet).
There is more...
All resources emerge from main resource manager which is located in rootdev and it manages resources of type RT_MEMORY. This implies that ALL resources in our system are of type RT_MEMORY!
I've hotfixed it, but it looks kind of ugly.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,459,2018-07-01T01:39:15Z,2018-07-02T15:29:35Z,2018-07-08T23:51:24Z,MERGED,True,25,6,3,https://github.com/ilikeheaps,Switch out when waking a higher priority thread from sleepq,14,[],https://github.com/cahirwpz/mimiker/pull/459,https://github.com/ilikeheaps,1,https://github.com/cahirwpz/mimiker/pull/459,This PR adds sched_maybe_switch(void) function which does the switch if a higher priority thread has been added or current thread's time slice is exhausted (=== when TDF_NEEDSWITCH is set). That function is used to obtain desired functionality from sleepq_signal and sleepq_broadcast.,This PR adds sched_maybe_switch(void) function which does the switch if a higher priority thread has been added or current thread's time slice is exhausted (=== when TDF_NEEDSWITCH is set). That function is used to obtain desired functionality from sleepq_signal and sleepq_broadcast.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,460,2018-07-01T01:48:07Z,2018-07-18T10:06:06Z,2018-07-22T16:33:16Z,MERGED,True,157,16,7,https://github.com/ilikeheaps,Timed sleep,126,[],https://github.com/cahirwpz/mimiker/pull/460,https://github.com/ilikeheaps,1,https://github.com/cahirwpz/mimiker/pull/460,"This PR is continuation of #450.
We need timed sleep to play Doom. This PR adds timed sleep.","This PR is continuation of #450.
We need timed sleep to play Doom. This PR adds timed sleep.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,461,2018-07-14T19:13:00Z,2018-07-17T21:11:58Z,2018-07-17T21:11:58Z,CLOSED,False,17,14,1,https://github.com/ilikeheaps,Minor improvements to `run_tests.py`,3,[],https://github.com/cahirwpz/mimiker/pull/461,https://github.com/ilikeheaps,1,https://github.com/cahirwpz/mimiker/pull/461,"print (gdb) prompt in the first line of interactive session
add --commands [CMD ...] argument that specifies gdb commands to run upon failure. Default commands are left unchanged (klog, info registers, backtrace, list, kthread).","print (gdb) prompt in the first line of interactive session
add --commands [CMD ...] argument that specifies gdb commands to run upon failure. Default commands are left unchanged (klog, info registers, backtrace, list, kthread).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,461,2018-07-14T19:13:00Z,2018-07-17T21:11:58Z,2018-07-17T21:11:58Z,CLOSED,False,17,14,1,https://github.com/ilikeheaps,Minor improvements to `run_tests.py`,3,[],https://github.com/cahirwpz/mimiker/pull/461,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/461#issuecomment-405507316,"print (gdb) prompt in the first line of interactive session
add --commands [CMD ...] argument that specifies gdb commands to run upon failure. Default commands are left unchanged (klog, info registers, backtrace, list, kthread).","I understand the purpose of this change, however I'm not in favour of solving it this way.
After all we want interactive mode of run_tests.py to be friendly towards a programmer, which can be achieved by not flooding him with possibly irrelevant messages, but offering useful help.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,461,2018-07-14T19:13:00Z,2018-07-17T21:11:58Z,2018-07-17T21:11:58Z,CLOSED,False,17,14,1,https://github.com/ilikeheaps,Minor improvements to `run_tests.py`,3,[],https://github.com/cahirwpz/mimiker/pull/461,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/461#issuecomment-405687836,"print (gdb) prompt in the first line of interactive session
add --commands [CMD ...] argument that specifies gdb commands to run upon failure. Default commands are left unchanged (klog, info registers, backtrace, list, kthread).",Please have a look at 44deb19,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,461,2018-07-14T19:13:00Z,2018-07-17T21:11:58Z,2018-07-17T21:11:58Z,CLOSED,False,17,14,1,https://github.com/ilikeheaps,Minor improvements to `run_tests.py`,3,[],https://github.com/cahirwpz/mimiker/pull/461,https://github.com/ilikeheaps,4,https://github.com/cahirwpz/mimiker/pull/461#issuecomment-405729501,"print (gdb) prompt in the first line of interactive session
add --commands [CMD ...] argument that specifies gdb commands to run upon failure. Default commands are left unchanged (klog, info registers, backtrace, list, kthread).",Alright. I suppose this PR doesn't bring any more value.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,462,2018-07-18T10:34:58Z,2018-07-24T05:58:54Z,2018-07-24T05:58:54Z,MERGED,True,113,61,6,https://github.com/ilikeheaps,Map sleepq interface onto condvar interface,13,[],https://github.com/cahirwpz/mimiker/pull/462,https://github.com/ilikeheaps,1,https://github.com/cahirwpz/mimiker/pull/462,We added interruptible and timed sleep. In this PR we expose it through a higher-level condvar interface.,We added interruptible and timed sleep. In this PR we expose it through a higher-level condvar interface.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,463,2018-07-28T17:04:52Z,2018-07-31T09:39:38Z,2018-07-31T09:39:38Z,MERGED,True,106,45,7,https://github.com/pwit81,Implementation of environment variables management.,13,[],https://github.com/cahirwpz/mimiker/pull/463,https://github.com/pwit81,1,https://github.com/cahirwpz/mimiker/pull/463,"The implementation must meet following criteria:
User programs must accept another argument envp, so that main signature is:
int main(int argc, char **argv, char **envp);
User programs must be able to access environment variables directly:
extern char **environ;
...or through set of functions (should be implemented by newlib):
char *getenv(const char *name);
int setenv(const char *name, const char *value, int overwrite);
int putenv(char *string);
int unsetenv(const char *name);
The stack
It's shape is defined in ""System V ABI MIPS RISC Processor Supplement, 3rd edition"", p. 30-35.
There's a useful example up there which is ""Figure 3-29: Example Process Stack"".","The implementation must meet following criteria:
User programs must accept another argument envp, so that main signature is:
int main(int argc, char **argv, char **envp);
User programs must be able to access environment variables directly:
extern char **environ;
...or through set of functions (should be implemented by newlib):
char *getenv(const char *name);
int setenv(const char *name, const char *value, int overwrite);
int putenv(char *string);
int unsetenv(const char *name);
The stack
It's shape is defined in ""System V ABI MIPS RISC Processor Supplement, 3rd edition"", p. 30-35.
There's a useful example up there which is ""Figure 3-29: Example Process Stack"".",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,463,2018-07-28T17:04:52Z,2018-07-31T09:39:38Z,2018-07-31T09:39:38Z,MERGED,True,106,45,7,https://github.com/pwit81,Implementation of environment variables management.,13,[],https://github.com/cahirwpz/mimiker/pull/463,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/463#issuecomment-409159940,"The implementation must meet following criteria:
User programs must accept another argument envp, so that main signature is:
int main(int argc, char **argv, char **envp);
User programs must be able to access environment variables directly:
extern char **environ;
...or through set of functions (should be implemented by newlib):
char *getenv(const char *name);
int setenv(const char *name, const char *value, int overwrite);
int putenv(char *string);
int unsetenv(const char *name);
The stack
It's shape is defined in ""System V ABI MIPS RISC Processor Supplement, 3rd edition"", p. 30-35.
There's a useful example up there which is ""Figure 3-29: Example Process Stack"".",LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,464,2018-08-02T19:21:52Z,2019-10-16T20:45:32Z,2019-10-16T20:45:33Z,CLOSED,False,279,134,13,https://github.com/pwit81,Pass arguments to user-space programs via kernel command line.,40,[],https://github.com/cahirwpz/mimiker/pull/464,https://github.com/pwit81,1,https://github.com/cahirwpz/mimiker/pull/464,"Pass arguments/environment to user-space programs. For now only user argv handling is implemented.
Example usage:
$ ./launch init_args=\""sandbox dummy foo\"" init=/bin/sandbox","Pass arguments/environment to user-space programs. For now only user argv handling is implemented.
Example usage:
$ ./launch init_args=\""sandbox dummy foo\"" init=/bin/sandbox",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,464,2018-08-02T19:21:52Z,2019-10-16T20:45:32Z,2019-10-16T20:45:33Z,CLOSED,False,279,134,13,https://github.com/pwit81,Pass arguments to user-space programs via kernel command line.,40,[],https://github.com/cahirwpz/mimiker/pull/464,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/464#issuecomment-453971215,"Pass arguments/environment to user-space programs. For now only user argv handling is implemented.
Example usage:
$ ./launch init_args=\""sandbox dummy foo\"" init=/bin/sandbox","Why not simplify kernel launch command to:
$ ./launch init=\""/bin/sandbox dummy foo\""",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,464,2018-08-02T19:21:52Z,2019-10-16T20:45:32Z,2019-10-16T20:45:33Z,CLOSED,False,279,134,13,https://github.com/pwit81,Pass arguments to user-space programs via kernel command line.,40,[],https://github.com/cahirwpz/mimiker/pull/464,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/464#issuecomment-453979504,"Pass arguments/environment to user-space programs. For now only user argv handling is implemented.
Example usage:
$ ./launch init_args=\""sandbox dummy foo\"" init=/bin/sandbox",@bgrm Please finish this task and clean up the code.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,464,2018-08-02T19:21:52Z,2019-10-16T20:45:32Z,2019-10-16T20:45:33Z,CLOSED,False,279,134,13,https://github.com/pwit81,Pass arguments to user-space programs via kernel command line.,40,[],https://github.com/cahirwpz/mimiker/pull/464,https://github.com/bgrm,4,https://github.com/cahirwpz/mimiker/pull/464#issuecomment-457938727,"Pass arguments/environment to user-space programs. For now only user argv handling is implemented.
Example usage:
$ ./launch init_args=\""sandbox dummy foo\"" init=/bin/sandbox","@cahirwpz I've noticed some issues with running launcher with kernel arguments containing strings of specific format, like "" -str"", "" =str"", or a character "" | "". For example:

following command:
$ ./launch -t klog-quiet=1 init=\""/bin/sandbox -dummy\"" 
results with:

usage: launch [-h] [-k KERNEL] [-D DEBUGGER] [-d] [-t] [-g] [ARGS [ARGS ...]]
launch: error: argument -d/--debug: ignored explicit argument 'ummy""'



command:
$ ./launch -t klog-quiet=1 init=\""/bin/sandbox =dummy\""
results with:
zsh: dummy"" not found


command:
$ ./launch -t klog-quiet=1 init=\""/bin/sandbox |dummy\""
results with:


zsh: command not found: dummy""
(...)
2019/01/27 18:21:31 socat[26877] E write(1, 0x556c2031b1d0, 1): Broken pipe
qemu-mimiker-mipsel: terminating on signal 15 from pid 26872 (python3)

It seems that there's a bug in the launcher's parser. But actually I don't know if it's the case in the master branch.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,464,2018-08-02T19:21:52Z,2019-10-16T20:45:32Z,2019-10-16T20:45:33Z,CLOSED,False,279,134,13,https://github.com/pwit81,Pass arguments to user-space programs via kernel command line.,40,[],https://github.com/cahirwpz/mimiker/pull/464,https://github.com/cahirwpz,5,https://github.com/cahirwpz/mimiker/pull/464#issuecomment-458017539,"Pass arguments/environment to user-space programs. For now only user argv handling is implemented.
Example usage:
$ ./launch init_args=\""sandbox dummy foo\"" init=/bin/sandbox",I wouldn't go as far as saying it's a bug. argparse module has been present in Python 2 & 3 for many years. We just need to find a way to pass init parameter in a way that is well understood by both argparse and the kernel.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,464,2018-08-02T19:21:52Z,2019-10-16T20:45:32Z,2019-10-16T20:45:33Z,CLOSED,False,279,134,13,https://github.com/pwit81,Pass arguments to user-space programs via kernel command line.,40,[],https://github.com/cahirwpz/mimiker/pull/464,https://github.com/cahirwpz,6,https://github.com/cahirwpz/mimiker/pull/464#issuecomment-542884049,"Pass arguments/environment to user-space programs. For now only user argv handling is implemented.
Example usage:
$ ./launch init_args=\""sandbox dummy foo\"" init=/bin/sandbox",Far too many changes has been merged into source tree to recover this PR to working state. It has to be rewritten from scratch most likely. Hence I close it.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,465,2018-10-03T18:48:26Z,2018-10-23T09:51:10Z,2018-10-23T09:51:10Z,MERGED,True,1,1,1,https://github.com/Tomatosoup97,Fix broken link to older version of MIPS toolchain,1,[],https://github.com/cahirwpz/mimiker/pull/465,https://github.com/Tomatosoup97,1,https://github.com/cahirwpz/mimiker/pull/465,Version 1.2 is used in continuous integration (https://github.com/cahirwpz/mimiker/blob/master/.circleci/image/Dockerfile) and link to 1.1 results in 404,Version 1.2 is used in continuous integration (https://github.com/cahirwpz/mimiker/blob/master/.circleci/image/Dockerfile) and link to 1.1 results in 404,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,467,2018-10-04T08:07:56Z,2018-10-23T09:51:48Z,2018-10-23T09:51:48Z,CLOSED,False,1,1,1,https://github.com/wmoc,Update URL to toolchain binary,1,[],https://github.com/cahirwpz/mimiker/pull/467,https://github.com/wmoc,1,https://github.com/cahirwpz/mimiker/pull/467,new URL found in .circleci/image/Dockerfile,new URL found in .circleci/image/Dockerfile,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,467,2018-10-04T08:07:56Z,2018-10-23T09:51:48Z,2018-10-23T09:51:48Z,CLOSED,False,1,1,1,https://github.com/wmoc,Update URL to toolchain binary,1,[],https://github.com/cahirwpz/mimiker/pull/467,https://github.com/mzr,2,https://github.com/cahirwpz/mimiker/pull/467#issuecomment-427311058,new URL found in .circleci/image/Dockerfile,Duplicate of #465.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,467,2018-10-04T08:07:56Z,2018-10-23T09:51:48Z,2018-10-23T09:51:48Z,CLOSED,False,1,1,1,https://github.com/wmoc,Update URL to toolchain binary,1,[],https://github.com/cahirwpz/mimiker/pull/467,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/467#issuecomment-432179233,new URL found in .circleci/image/Dockerfile,Fixed in #465,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,468,2018-10-06T16:05:52Z,2018-10-23T09:52:28Z,2018-10-23T09:52:28Z,MERGED,True,1,1,1,https://github.com/Tomatosoup97,Correct typo in README,1,[],https://github.com/cahirwpz/mimiker/pull/468,https://github.com/Tomatosoup97,1,https://github.com/cahirwpz/mimiker/pull/468,s/toolchnain/toolchain,s/toolchnain/toolchain,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,469,2018-10-07T13:36:53Z,2019-01-17T13:29:53Z,2019-01-17T13:43:49Z,MERGED,True,133,3,9,https://github.com/Tomatosoup97,Provide docker environment for easy mimiker development,60,[],https://github.com/cahirwpz/mimiker/pull/469,https://github.com/Tomatosoup97,1,https://github.com/cahirwpz/mimiker/pull/469,Docker-based local development. Please refer to READMEs for more details.,Docker-based local development. Please refer to READMEs for more details.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,469,2018-10-07T13:36:53Z,2019-01-17T13:29:53Z,2019-01-17T13:43:49Z,MERGED,True,133,3,9,https://github.com/Tomatosoup97,Provide docker environment for easy mimiker development,60,[],https://github.com/cahirwpz/mimiker/pull/469,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/469#issuecomment-427754026,Docker-based local development. Please refer to READMEs for more details.,Please have a look at following file: https://github.com/cahirwpz/mimiker/blob/master/.circleci/image/Dockerfile,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,469,2018-10-07T13:36:53Z,2019-01-17T13:29:53Z,2019-01-17T13:43:49Z,MERGED,True,133,3,9,https://github.com/Tomatosoup97,Provide docker environment for easy mimiker development,60,[],https://github.com/cahirwpz/mimiker/pull/469,https://github.com/Tomatosoup97,3,https://github.com/cahirwpz/mimiker/pull/469#issuecomment-427760107,Docker-based local development. Please refer to READMEs for more details.,@cahirwpz it is an extension of the file that you mentioned (see FROM mimiker:latest) -  I would prefer to discuss the details of this change in person,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,469,2018-10-07T13:36:53Z,2019-01-17T13:29:53Z,2019-01-17T13:43:49Z,MERGED,True,133,3,9,https://github.com/Tomatosoup97,Provide docker environment for easy mimiker development,60,[],https://github.com/cahirwpz/mimiker/pull/469,https://github.com/jpszczolowski,4,https://github.com/cahirwpz/mimiker/pull/469#issuecomment-442424888,Docker-based local development. Please refer to READMEs for more details.,What is the current state of this PR?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,469,2018-10-07T13:36:53Z,2019-01-17T13:29:53Z,2019-01-17T13:43:49Z,MERGED,True,133,3,9,https://github.com/Tomatosoup97,Provide docker environment for easy mimiker development,60,[],https://github.com/cahirwpz/mimiker/pull/469,https://github.com/Tomatosoup97,5,https://github.com/cahirwpz/mimiker/pull/469#issuecomment-443887508,Docker-based local development. Please refer to READMEs for more details.,@jpszczolowski It's ready for review now,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,469,2018-10-07T13:36:53Z,2019-01-17T13:29:53Z,2019-01-17T13:43:49Z,MERGED,True,133,3,9,https://github.com/Tomatosoup97,Provide docker environment for easy mimiker development,60,[],https://github.com/cahirwpz/mimiker/pull/469,https://github.com/wmoc,6,https://github.com/cahirwpz/mimiker/pull/469#issuecomment-444476342,Docker-based local development. Please refer to READMEs for more details.,Why we won't merge this Dockerfile with the one from CircleCI? Actually you only add Tmux. Having two distinct docker images makes it harder to maintain.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,469,2018-10-07T13:36:53Z,2019-01-17T13:29:53Z,2019-01-17T13:43:49Z,MERGED,True,133,3,9,https://github.com/Tomatosoup97,Provide docker environment for easy mimiker development,60,[],https://github.com/cahirwpz/mimiker/pull/469,https://github.com/jpszczolowski,7,https://github.com/cahirwpz/mimiker/pull/469#issuecomment-446358691,Docker-based local development. Please refer to READMEs for more details.,"I've cloned this branch into my computer and run make docker. It does nothing and ends immediately:
$ make docker
$

And when I try to do this step manually:
$ cd docker
$ make run
docker-compose up -d
Pulling mimiker (cahirwpz/mimiker-dev:latest)...
ERROR: pull access denied for cahirwpz/mimiker-dev, repository does not exist or may require 'docker login'
Makefile:8: recipe for target 'up' failed
make: *** [up] Error 1
$

I get this error.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,469,2018-10-07T13:36:53Z,2019-01-17T13:29:53Z,2019-01-17T13:43:49Z,MERGED,True,133,3,9,https://github.com/Tomatosoup97,Provide docker environment for easy mimiker development,60,[],https://github.com/cahirwpz/mimiker/pull/469,https://github.com/jpszczolowski,8,https://github.com/cahirwpz/mimiker/pull/469#issuecomment-446374551,Docker-based local development. Please refer to READMEs for more details.,"Inside docker's tmux there is no fancy gdb debugging (kthread, backtrace etc.).
Probably you want to add RUN echo ""add-auto-load-safe-path ~/mimiker/.gdbinit"" >> ~/.gdbinit to the Dockerfile.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,469,2018-10-07T13:36:53Z,2019-01-17T13:29:53Z,2019-01-17T13:43:49Z,MERGED,True,133,3,9,https://github.com/Tomatosoup97,Provide docker environment for easy mimiker development,60,[],https://github.com/cahirwpz/mimiker/pull/469,https://github.com/cahirwpz,9,https://github.com/cahirwpz/mimiker/pull/469#issuecomment-446555248,Docker-based local development. Please refer to READMEs for more details.,@Tomatosoup97 Why do you leave empty line at the end of every file? So far this was not a part of coding convention...,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,469,2018-10-07T13:36:53Z,2019-01-17T13:29:53Z,2019-01-17T13:43:49Z,MERGED,True,133,3,9,https://github.com/Tomatosoup97,Provide docker environment for easy mimiker development,60,[],https://github.com/cahirwpz/mimiker/pull/469,https://github.com/cahirwpz,10,https://github.com/cahirwpz/mimiker/pull/469#issuecomment-446555336,Docker-based local development. Please refer to READMEs for more details.,Please resolve the conflict.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,469,2018-10-07T13:36:53Z,2019-01-17T13:29:53Z,2019-01-17T13:43:49Z,MERGED,True,133,3,9,https://github.com/Tomatosoup97,Provide docker environment for easy mimiker development,60,[],https://github.com/cahirwpz/mimiker/pull/469,https://github.com/wmoc,11,https://github.com/cahirwpz/mimiker/pull/469#issuecomment-446555345,Docker-based local development. Please refer to READMEs for more details.,"There is a problem with using git inside docker image. If you checkout new file, it is owned by root. So probably we want to use --user flag.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,469,2018-10-07T13:36:53Z,2019-01-17T13:29:53Z,2019-01-17T13:43:49Z,MERGED,True,133,3,9,https://github.com/Tomatosoup97,Provide docker environment for easy mimiker development,60,[],https://github.com/cahirwpz/mimiker/pull/469,https://github.com/Tomatosoup97,12,https://github.com/cahirwpz/mimiker/pull/469#issuecomment-446582093,Docker-based local development. Please refer to READMEs for more details.,"@cahirwpz conflict resolved. In the projects that I work we usually enforce a newline at the end of the file, it's quite convenient. Because of that I have a habit of adding it when I edit the file, If our convention is the opposite, we should check it in some file formatter. Code conventions that are not enforced in any way are usually neglected over time.
@wmoczulsky adding a --user flag where?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,469,2018-10-07T13:36:53Z,2019-01-17T13:29:53Z,2019-01-17T13:43:49Z,MERGED,True,133,3,9,https://github.com/Tomatosoup97,Provide docker environment for easy mimiker development,60,[],https://github.com/cahirwpz/mimiker/pull/469,https://github.com/cahirwpz,13,https://github.com/cahirwpz/mimiker/pull/469#issuecomment-446582753,Docker-based local development. Please refer to READMEs for more details.,@Tomatosoup97 Could I read a rationale supporting use of extra newline somewhere? I don't understand in what way it's convenient.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,469,2018-10-07T13:36:53Z,2019-01-17T13:29:53Z,2019-01-17T13:43:49Z,MERGED,True,133,3,9,https://github.com/Tomatosoup97,Provide docker environment for easy mimiker development,60,[],https://github.com/cahirwpz/mimiker/pull/469,https://github.com/cahirwpz,14,https://github.com/cahirwpz/mimiker/pull/469#issuecomment-446950957,Docker-based local development. Please refer to READMEs for more details.,"Host X-server is not available inside the container:
root@mimiker:~/mimiker# ./launch -g init=/bin/mandelbrot
qemu-system-mimiker: -serial tcp:127.0.0.1:8000,server,wait: info: QEMU waiting for connection on: disconnected:tcp:127.0.0.1:8000,server
Could not initialize SDL(x11 not available) - exiting",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,469,2018-10-07T13:36:53Z,2019-01-17T13:29:53Z,2019-01-17T13:43:49Z,MERGED,True,133,3,9,https://github.com/Tomatosoup97,Provide docker environment for easy mimiker development,60,[],https://github.com/cahirwpz/mimiker/pull/469,https://github.com/cahirwpz,15,https://github.com/cahirwpz/mimiker/pull/469#issuecomment-446963199,Docker-based local development. Please refer to READMEs for more details.,"All files created during compilation inside a container are owned by root user outside the container. Steps to reproduce:
$ make -C docker compile
$ ls -l
...
-rwxr-xr-x 1 root  root  11456600 gru 13 14:11 mimiker.elf
-rw-r--r-- 1 root  root    297594 gru 13 14:11 mimiker.elf.map
...",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,469,2018-10-07T13:36:53Z,2019-01-17T13:29:53Z,2019-01-17T13:43:49Z,MERGED,True,133,3,9,https://github.com/Tomatosoup97,Provide docker environment for easy mimiker development,60,[],https://github.com/cahirwpz/mimiker/pull/469,https://github.com/cahirwpz,16,https://github.com/cahirwpz/mimiker/pull/469#issuecomment-447794796,Docker-based local development. Please refer to READMEs for more details.,@Tomatosoup97 Any progress here?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,469,2018-10-07T13:36:53Z,2019-01-17T13:29:53Z,2019-01-17T13:43:49Z,MERGED,True,133,3,9,https://github.com/Tomatosoup97,Provide docker environment for easy mimiker development,60,[],https://github.com/cahirwpz/mimiker/pull/469,https://github.com/jpszczolowski,17,https://github.com/cahirwpz/mimiker/pull/469#issuecomment-448221317,Docker-based local development. Please refer to READMEs for more details.,"Now files created by the container are owned by me and group ""1024"" or ""sudo"".
-rwxr-xr-x 1 jpszczolowski          1024  12M gru 18 14:15 mimiker.elf
-rw-r--r-- 1 jpszczolowski          1024 315K gru 18 14:15 mimiker.elf.map

-rw-r--r-- 1 jpszczolowski sudo           21K gru 18 14:23 turnstile_propagate_many.o

That's probably OK.
But you broke gdb debugging. Please change add-auto-load-safe-path mimiker/.gdbinit to add-auto-load-safe-path ~/mimiker/.gdbinit.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,469,2018-10-07T13:36:53Z,2019-01-17T13:29:53Z,2019-01-17T13:43:49Z,MERGED,True,133,3,9,https://github.com/Tomatosoup97,Provide docker environment for easy mimiker development,60,[],https://github.com/cahirwpz/mimiker/pull/469,https://github.com/jpszczolowski,18,https://github.com/cahirwpz/mimiker/pull/469#issuecomment-448237285,Docker-based local development. Please refer to READMEs for more details.,Can we please add ack tool to our container?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,469,2018-10-07T13:36:53Z,2019-01-17T13:29:53Z,2019-01-17T13:43:49Z,MERGED,True,133,3,9,https://github.com/Tomatosoup97,Provide docker environment for easy mimiker development,60,[],https://github.com/cahirwpz/mimiker/pull/469,https://github.com/Tomatosoup97,19,https://github.com/cahirwpz/mimiker/pull/469#issuecomment-448536648,Docker-based local development. Please refer to READMEs for more details.,"@jpszczolowski ack added, gdbinit path fixed - thanks for spotting that!",True,{'HOORAY': ['https://github.com/jpszczolowski']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,469,2018-10-07T13:36:53Z,2019-01-17T13:29:53Z,2019-01-17T13:43:49Z,MERGED,True,133,3,9,https://github.com/Tomatosoup97,Provide docker environment for easy mimiker development,60,[],https://github.com/cahirwpz/mimiker/pull/469,https://github.com/mzr,20,https://github.com/cahirwpz/mimiker/pull/469#issuecomment-454500366,Docker-based local development. Please refer to READMEs for more details.,"➜  docker git:(bbde463) make run
touch /tmp/.docker.xauth
xauth nlist :0 | sed -e 's/^..../ffff/' | xauth -f /tmp/.docker.xauth nmerge -
docker-compose up -d
Pulling mimiker (mimiker-dev:latest)...
ERROR: The image for the service you're trying to recreate has been removed. If you continue, volume data could be lost. Consider backing up your data before continuing.

Continue with the new image? [yN]y
Pulling mimiker (mimiker-dev:latest)...
ERROR: pull access denied for mimiker-dev, repository does not exist or may require 'docker login'
make: *** [Makefile:16: up] Error 1

when trying to make run.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,469,2018-10-07T13:36:53Z,2019-01-17T13:29:53Z,2019-01-17T13:43:49Z,MERGED,True,133,3,9,https://github.com/Tomatosoup97,Provide docker environment for easy mimiker development,60,[],https://github.com/cahirwpz/mimiker/pull/469,https://github.com/mzr,21,https://github.com/cahirwpz/mimiker/pull/469#issuecomment-454503515,Docker-based local development. Please refer to READMEs for more details.,"Also when running make build:
Step 4/10 : RUN apt-get -q update && apt-get upgrade -y
 ---> Running in b3ac6f165a10
Ign:1 http://cdn-fastly.deb.debian.org/debian stretch InRelease
Get:2 http://security-cdn.debian.org/debian-security stretch/updates InRelease [94.3 kB]
Get:3 http://cdn-fastly.deb.debian.org/debian stretch-updates InRelease [91.0 kB]
Get:4 http://cdn-fastly.deb.debian.org/debian stretch-backports InRelease [91.8 kB]
Get:6 http://security-cdn.debian.org/debian-security stretch/updates/main amd64 Packages [467 kB]
Hit:5 http://cdn-fastly.deb.debian.org/debian stretch Release
Get:8 http://cdn-fastly.deb.debian.org/debian stretch-updates/main amd64 Packages.diff/Index [6640 B]
Get:9 http://cdn-fastly.deb.debian.org/debian stretch-backports/main amd64 Packages.diff/Index [27.8 kB]
Get:9 http://cdn-fastly.deb.debian.org/debian stretch-backports/main amd64 Packages.diff/Index [27.8 kB]
Get:10 http://cdn-fastly.deb.debian.org/debian stretch-updates/main amd64 Packages 2019-01-02-2012.38.pdiff [332 B]
Get:10 http://cdn-fastly.deb.debian.org/debian stretch-updates/main amd64 Packages 2019-01-02-2012.38.pdiff [332 B]
Get:11 http://cdn-fastly.deb.debian.org/debian stretch-backports/main amd64 Packages [558 kB]
Reading package lists...
E: Could not open file /var/lib/apt/lists/deb.debian.org_debian_dists_stretch-backports_main_binary-amd64_Packages.diff_Index - open (2: No such file or directory)

EDIT:
Resolved by c568191",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,469,2018-10-07T13:36:53Z,2019-01-17T13:29:53Z,2019-01-17T13:43:49Z,MERGED,True,133,3,9,https://github.com/Tomatosoup97,Provide docker environment for easy mimiker development,60,[],https://github.com/cahirwpz/mimiker/pull/469,https://github.com/cahirwpz,22,https://github.com/cahirwpz/mimiker/pull/469#issuecomment-455061726,Docker-based local development. Please refer to READMEs for more details.,@Tomatosoup97  LGTM. Should I merge?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,469,2018-10-07T13:36:53Z,2019-01-17T13:29:53Z,2019-01-17T13:43:49Z,MERGED,True,133,3,9,https://github.com/Tomatosoup97,Provide docker environment for easy mimiker development,60,[],https://github.com/cahirwpz/mimiker/pull/469,https://github.com/Tomatosoup97,23,https://github.com/cahirwpz/mimiker/pull/469#issuecomment-455111617,Docker-based local development. Please refer to READMEs for more details.,"@cahirwpz yes, it is ready to merge now",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,469,2018-10-07T13:36:53Z,2019-01-17T13:29:53Z,2019-01-17T13:43:49Z,MERGED,True,133,3,9,https://github.com/Tomatosoup97,Provide docker environment for easy mimiker development,60,[],https://github.com/cahirwpz/mimiker/pull/469,https://github.com/cahirwpz,24,https://github.com/cahirwpz/mimiker/pull/469#issuecomment-455112031,Docker-based local development. Please refer to READMEs for more details.,@mzr Your approval is required as well.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,469,2018-10-07T13:36:53Z,2019-01-17T13:29:53Z,2019-01-17T13:43:49Z,MERGED,True,133,3,9,https://github.com/Tomatosoup97,Provide docker environment for easy mimiker development,60,[],https://github.com/cahirwpz/mimiker/pull/469,https://github.com/Tomatosoup97,25,https://github.com/cahirwpz/mimiker/pull/469#issuecomment-455176264,Docker-based local development. Please refer to READMEs for more details.,🎉,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,470,2018-10-07T14:30:09Z,2018-10-23T10:52:28Z,2018-10-23T10:57:41Z,MERGED,True,102,82,18,https://github.com/jpszczolowski,Switch to clang-format-6.0,3,[],https://github.com/cahirwpz/mimiker/pull/470,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/470,#433,#433,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,470,2018-10-07T14:30:09Z,2018-10-23T10:52:28Z,2018-10-23T10:57:41Z,MERGED,True,102,82,18,https://github.com/jpszczolowski,Switch to clang-format-6.0,3,[],https://github.com/cahirwpz/mimiker/pull/470,https://github.com/jpszczolowski,2,https://github.com/cahirwpz/mimiker/pull/470#issuecomment-431669489,#433,How can we make CircleCI rebuild the Dockerfile?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,470,2018-10-07T14:30:09Z,2018-10-23T10:52:28Z,2018-10-23T10:57:41Z,MERGED,True,102,82,18,https://github.com/jpszczolowski,Switch to clang-format-6.0,3,[],https://github.com/cahirwpz/mimiker/pull/470,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/470#issuecomment-432198690,#433,Closes #433,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,471,2018-10-24T13:44:28Z,2018-10-24T16:23:56Z,2018-10-24T16:23:56Z,MERGED,True,1,2,2,https://github.com/wmoc,Specify clang-format version in Makefile,1,[],https://github.com/cahirwpz/mimiker/pull/471,https://github.com/wmoc,1,https://github.com/cahirwpz/mimiker/pull/471,"clang-format-6.0 instead of clang-format, so wrong one will rise error.
Removed making symbolic link in Dockerfile, because it is not necessay now.","clang-format-6.0 instead of clang-format, so wrong one will rise error.
Removed making symbolic link in Dockerfile, because it is not necessay now.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,472,2018-10-29T20:02:48Z,2018-11-01T21:34:07Z,2018-11-01T21:43:24Z,MERGED,True,27,7,9,https://github.com/mzr,Move drivers to separate directory,3,[],https://github.com/cahirwpz/mimiker/pull/472,https://github.com/mzr,1,https://github.com/cahirwpz/mimiker/pull/472,"moved drivers to drv directory
adjusted clean directives in Makefiles","moved drivers to drv directory
adjusted clean directives in Makefiles",True,{'THUMBS_UP': ['https://github.com/jpszczolowski']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,472,2018-10-29T20:02:48Z,2018-11-01T21:34:07Z,2018-11-01T21:43:24Z,MERGED,True,27,7,9,https://github.com/mzr,Move drivers to separate directory,3,[],https://github.com/cahirwpz/mimiker/pull/472,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/472#issuecomment-434176852,"moved drivers to drv directory
adjusted clean directives in Makefiles","@Tomatosoup97 Please review the changes.
@pwit81 Please consider creating an issue in which you request a project member to document Makefile conventions.
@mzr LGTM.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,474,2018-11-01T10:44:33Z,2018-12-15T21:47:33Z,2018-12-15T21:47:33Z,CLOSED,False,53,31,18,https://github.com/mzr,Add private arguments to sysinit objects.,4,['WiP'],https://github.com/cahirwpz/mimiker/pull/474,https://github.com/mzr,1,https://github.com/cahirwpz/mimiker/pull/474,"Something like this would be required to specify only one generic driver init procedure.
Probably we will only need this when implementing dynamic devclasses initialization process, with every driver as a separate sysinit module.
This branch is fork of a #472","Something like this would be required to specify only one generic driver init procedure.
Probably we will only need this when implementing dynamic devclasses initialization process, with every driver as a separate sysinit module.
This branch is fork of a #472",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,474,2018-11-01T10:44:33Z,2018-12-15T21:47:33Z,2018-12-15T21:47:33Z,CLOSED,False,53,31,18,https://github.com/mzr,Add private arguments to sysinit objects.,4,['WiP'],https://github.com/cahirwpz/mimiker/pull/474,https://github.com/mzr,2,https://github.com/cahirwpz/mimiker/pull/474#issuecomment-447600142,"Something like this would be required to specify only one generic driver init procedure.
Probably we will only need this when implementing dynamic devclasses initialization process, with every driver as a separate sysinit module.
This branch is fork of a #472",Not needed. For now.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,475,2018-11-02T18:08:29Z,2019-01-08T19:06:39Z,2019-01-08T19:06:39Z,CLOSED,False,283,11,11,https://github.com/staffik,Process groups implementation,26,['WiP'],https://github.com/cahirwpz/mimiker/pull/475,https://github.com/staffik,1,https://github.com/cahirwpz/mimiker/pull/475,Implement process groups concept,Implement process groups concept,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,475,2018-11-02T18:08:29Z,2019-01-08T19:06:39Z,2019-01-08T19:06:39Z,CLOSED,False,283,11,11,https://github.com/staffik,Process groups implementation,26,['WiP'],https://github.com/cahirwpz/mimiker/pull/475,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/475#issuecomment-443658560,Implement process groups concept,Any progress here?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,476,2018-11-06T21:42:05Z,2018-12-12T12:29:02Z,2018-12-12T12:29:02Z,MERGED,True,59,0,9,https://github.com/mzr,Devclass macros,11,[],https://github.com/cahirwpz/mimiker/pull/476,https://github.com/mzr,1,https://github.com/cahirwpz/mimiker/pull/476,"Added 3 macros:

DEVCLASS_CREATE(dc_name) - creates devclass dc_name.
DEVCLASS_ADD_DRV(dc_name, driver_structure) - adds driver_t structure to devclass dc_name.
DEVCLASS_FOREACH(drv, dc) - iterates over device_t structures of a devclass dc.

and one function:
devclass_t *devclass_find(const char *classname) - finds a devclass by name.","Added 3 macros:

DEVCLASS_CREATE(dc_name) - creates devclass dc_name.
DEVCLASS_ADD_DRV(dc_name, driver_structure) - adds driver_t structure to devclass dc_name.
DEVCLASS_FOREACH(drv, dc) - iterates over device_t structures of a devclass dc.

and one function:
devclass_t *devclass_find(const char *classname) - finds a devclass by name.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,476,2018-11-06T21:42:05Z,2018-12-12T12:29:02Z,2018-12-12T12:29:02Z,MERGED,True,59,0,9,https://github.com/mzr,Devclass macros,11,[],https://github.com/cahirwpz/mimiker/pull/476,https://github.com/mzr,2,https://github.com/cahirwpz/mimiker/pull/476#issuecomment-443535723,"Added 3 macros:

DEVCLASS_CREATE(dc_name) - creates devclass dc_name.
DEVCLASS_ADD_DRV(dc_name, driver_structure) - adds driver_t structure to devclass dc_name.
DEVCLASS_FOREACH(drv, dc) - iterates over device_t structures of a devclass dc.

and one function:
devclass_t *devclass_find(const char *classname) - finds a devclass by name.",Added DEVCLASS_FOREACH macro and implemented draft versions of subroutines for the probe & attach process.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,476,2018-11-06T21:42:05Z,2018-12-12T12:29:02Z,2018-12-12T12:29:02Z,MERGED,True,59,0,9,https://github.com/mzr,Devclass macros,11,[],https://github.com/cahirwpz/mimiker/pull/476,https://github.com/mzr,3,https://github.com/cahirwpz/mimiker/pull/476#issuecomment-446320492,"Added 3 macros:

DEVCLASS_CREATE(dc_name) - creates devclass dc_name.
DEVCLASS_ADD_DRV(dc_name, driver_structure) - adds driver_t structure to devclass dc_name.
DEVCLASS_FOREACH(drv, dc) - iterates over device_t structures of a devclass dc.

and one function:
devclass_t *devclass_find(const char *classname) - finds a devclass by name.",Now it is compatible with new directory structure.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,477,2018-11-07T11:47:02Z,2018-11-29T20:29:56Z,2018-11-29T20:29:56Z,MERGED,True,14,5,6,https://github.com/Tomatosoup97,Improve docstrings for drivers infrastructure,5,[],https://github.com/cahirwpz/mimiker/pull/477,https://github.com/Tomatosoup97,1,https://github.com/cahirwpz/mimiker/pull/477,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,477,2018-11-07T11:47:02Z,2018-11-29T20:29:56Z,2018-11-29T20:29:56Z,MERGED,True,14,5,6,https://github.com/Tomatosoup97,Improve docstrings for drivers infrastructure,5,[],https://github.com/cahirwpz/mimiker/pull/477,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/477#issuecomment-440978588,,When can I expect the PR to leave WIP status?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,477,2018-11-07T11:47:02Z,2018-11-29T20:29:56Z,2018-11-29T20:29:56Z,MERGED,True,14,5,6,https://github.com/Tomatosoup97,Improve docstrings for drivers infrastructure,5,[],https://github.com/cahirwpz/mimiker/pull/477,https://github.com/Tomatosoup97,3,https://github.com/cahirwpz/mimiker/pull/477#issuecomment-442436932,,After discussion with @mzr we are abandoing some of the changes in include/bus.h docstrings since the interface might change soon due to device hints implementation. The PR is read to review,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,477,2018-11-07T11:47:02Z,2018-11-29T20:29:56Z,2018-11-29T20:29:56Z,MERGED,True,14,5,6,https://github.com/Tomatosoup97,Improve docstrings for drivers infrastructure,5,[],https://github.com/cahirwpz/mimiker/pull/477,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/477#issuecomment-442830230,,@mzr I'm waiting for your review before I start.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,478,2018-11-14T08:51:52Z,2018-11-14T12:37:16Z,2018-11-14T12:37:23Z,MERGED,True,4,1,1,https://github.com/jpszczolowski,Add Visual Studio Code files to .gitignore,2,[],https://github.com/cahirwpz/mimiker/pull/478,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/478,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,479,2018-11-14T09:47:45Z,2018-12-03T10:18:08Z,2018-12-03T10:26:10Z,MERGED,True,196,139,29,https://github.com/jpszczolowski,Reverse thread priority meaning,14,[],https://github.com/cahirwpz/mimiker/pull/479,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/479,"Added new header file, priority.h
Reversed thread priority value meaning (0 is now highest priority)
Added functions to compare priorities, i.a. prio_lt(prio_t, prio_t)
Introduced 3 priority groups: ithreads, kthreads, uthreads
Added functions that transform [0, 255] range to range of priorities of a given thread group. E.g. prio_kthread(0) returns highest kernel thread priority (currently: 32), prio_kthread(255) returns lowest kernel thread priority (currently: 95)
Added priority column to gdb thread dump (kthread command), that is displayed e.g. in case of failed assert
Refactored turnstile and sleepq tests; these tests implicitly made some assumptions that main kernel thread's priority is 0 and that lower priority value means more important thread","Added new header file, priority.h
Reversed thread priority value meaning (0 is now highest priority)
Added functions to compare priorities, i.a. prio_lt(prio_t, prio_t)
Introduced 3 priority groups: ithreads, kthreads, uthreads
Added functions that transform [0, 255] range to range of priorities of a given thread group. E.g. prio_kthread(0) returns highest kernel thread priority (currently: 32), prio_kthread(255) returns lowest kernel thread priority (currently: 95)
Added priority column to gdb thread dump (kthread command), that is displayed e.g. in case of failed assert
Refactored turnstile and sleepq tests; these tests implicitly made some assumptions that main kernel thread's priority is 0 and that lower priority value means more important thread",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,479,2018-11-14T09:47:45Z,2018-12-03T10:18:08Z,2018-12-03T10:26:10Z,MERGED,True,196,139,29,https://github.com/jpszczolowski,Reverse thread priority meaning,14,[],https://github.com/cahirwpz/mimiker/pull/479,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/479#issuecomment-438651236,"Added new header file, priority.h
Reversed thread priority value meaning (0 is now highest priority)
Added functions to compare priorities, i.a. prio_lt(prio_t, prio_t)
Introduced 3 priority groups: ithreads, kthreads, uthreads
Added functions that transform [0, 255] range to range of priorities of a given thread group. E.g. prio_kthread(0) returns highest kernel thread priority (currently: 32), prio_kthread(255) returns lowest kernel thread priority (currently: 95)
Added priority column to gdb thread dump (kthread command), that is displayed e.g. in case of failed assert
Refactored turnstile and sleepq tests; these tests implicitly made some assumptions that main kernel thread's priority is 0 and that lower priority value means more important thread","Given this transition:
/* old */ if (td->td_prio > oldtd->td_prio)
/* new */ if (td_prio_cmp(td->td_prio, oldtd->td_prio, PRIO_GT))
I reckon we have following alternatives to new version:
/* #1 */ if (prio_gt(td->td_prio, oldtd->td_prio))
/* #2 */ if (prio_cmp(td->td_prio, >, oldtd->td_prio))
/* #3 */ if (td->td_prio PRIO_GT oldtd->td_prio)
Each one of them is terser that your proposal. Please consider one of them.
There's also a concern if prio_t is really bound to be the priority of a thread. Perhaps prio_t should be used to express priorities system-wide in variety of contexts, for instance mailbox messages?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,479,2018-11-14T09:47:45Z,2018-12-03T10:18:08Z,2018-12-03T10:26:10Z,MERGED,True,196,139,29,https://github.com/jpszczolowski,Reverse thread priority meaning,14,[],https://github.com/cahirwpz/mimiker/pull/479,https://github.com/jpszczolowski,3,https://github.com/cahirwpz/mimiker/pull/479#issuecomment-442418659,"Added new header file, priority.h
Reversed thread priority value meaning (0 is now highest priority)
Added functions to compare priorities, i.a. prio_lt(prio_t, prio_t)
Introduced 3 priority groups: ithreads, kthreads, uthreads
Added functions that transform [0, 255] range to range of priorities of a given thread group. E.g. prio_kthread(0) returns highest kernel thread priority (currently: 32), prio_kthread(255) returns lowest kernel thread priority (currently: 95)
Added priority column to gdb thread dump (kthread command), that is displayed e.g. in case of failed assert
Refactored turnstile and sleepq tests; these tests implicitly made some assumptions that main kernel thread's priority is 0 and that lower priority value means more important thread",@pmaslankowski this PR is ready to be reviewed,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,479,2018-11-14T09:47:45Z,2018-12-03T10:18:08Z,2018-12-03T10:26:10Z,MERGED,True,196,139,29,https://github.com/jpszczolowski,Reverse thread priority meaning,14,[],https://github.com/cahirwpz/mimiker/pull/479,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/479#issuecomment-443137540,"Added new header file, priority.h
Reversed thread priority value meaning (0 is now highest priority)
Added functions to compare priorities, i.a. prio_lt(prio_t, prio_t)
Introduced 3 priority groups: ithreads, kthreads, uthreads
Added functions that transform [0, 255] range to range of priorities of a given thread group. E.g. prio_kthread(0) returns highest kernel thread priority (currently: 32), prio_kthread(255) returns lowest kernel thread priority (currently: 95)
Added priority column to gdb thread dump (kthread command), that is displayed e.g. in case of failed assert
Refactored turnstile and sleepq tests; these tests implicitly made some assumptions that main kernel thread's priority is 0 and that lower priority value means more important thread",@pmaslankowski I'm waiting for your review.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,479,2018-11-14T09:47:45Z,2018-12-03T10:18:08Z,2018-12-03T10:26:10Z,MERGED,True,196,139,29,https://github.com/jpszczolowski,Reverse thread priority meaning,14,[],https://github.com/cahirwpz/mimiker/pull/479,https://github.com/cahirwpz,5,https://github.com/cahirwpz/mimiker/pull/479#issuecomment-443660798,"Added new header file, priority.h
Reversed thread priority value meaning (0 is now highest priority)
Added functions to compare priorities, i.a. prio_lt(prio_t, prio_t)
Introduced 3 priority groups: ithreads, kthreads, uthreads
Added functions that transform [0, 255] range to range of priorities of a given thread group. E.g. prio_kthread(0) returns highest kernel thread priority (currently: 32), prio_kthread(255) returns lowest kernel thread priority (currently: 95)
Added priority column to gdb thread dump (kthread command), that is displayed e.g. in case of failed assert
Refactored turnstile and sleepq tests; these tests implicitly made some assumptions that main kernel thread's priority is 0 and that lower priority value means more important thread",Good job!,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,480,2018-11-14T12:35:21Z,2019-01-15T22:25:09Z,2019-01-15T22:25:09Z,CLOSED,False,1,0,1,https://github.com/jpszczolowski,Implement interrupt threads,2,['WiP'],https://github.com/cahirwpz/mimiker/pull/480,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/480,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,480,2018-11-14T12:35:21Z,2019-01-15T22:25:09Z,2019-01-15T22:25:09Z,CLOSED,False,1,0,1,https://github.com/jpszczolowski,Implement interrupt threads,2,['WiP'],https://github.com/cahirwpz/mimiker/pull/480,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/480#issuecomment-453954218,,Any progress in here or should I close this PR ?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,480,2018-11-14T12:35:21Z,2019-01-15T22:25:09Z,2019-01-15T22:25:09Z,CLOSED,False,1,0,1,https://github.com/jpszczolowski,Implement interrupt threads,2,['WiP'],https://github.com/cahirwpz/mimiker/pull/480,https://github.com/jpszczolowski,3,https://github.com/cahirwpz/mimiker/pull/480#issuecomment-454575477,,I'm closing this PR as I've accidentally deleted my branch. Will open another one.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,481,2018-11-21T19:09:21Z,2018-12-12T11:31:43Z,2018-12-12T11:31:43Z,MERGED,True,60,36,7,https://github.com/bgrm,Moving kmalloc from pm to vm,9,[],https://github.com/cahirwpz/mimiker/pull/481,https://github.com/bgrm,1,https://github.com/cahirwpz/mimiker/pull/481,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,481,2018-11-21T19:09:21Z,2018-12-12T11:31:43Z,2018-12-12T11:31:43Z,MERGED,True,60,36,7,https://github.com/bgrm,Moving kmalloc from pm to vm,9,[],https://github.com/cahirwpz/mimiker/pull/481,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/481#issuecomment-443658635,,Any progress here?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,481,2018-11-21T19:09:21Z,2018-12-12T11:31:43Z,2018-12-12T11:31:43Z,MERGED,True,60,36,7,https://github.com/bgrm,Moving kmalloc from pm to vm,9,[],https://github.com/cahirwpz/mimiker/pull/481,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/481#issuecomment-445231366,,@bgrm I disabled offending tests. We'll have to rethink them.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,482,2018-11-27T18:09:58Z,2018-11-29T14:00:12Z,2018-11-29T14:00:12Z,MERGED,True,19,3,1,https://github.com/Tomatosoup97,Docstrings for linker set's macros,4,[],https://github.com/cahirwpz/mimiker/pull/482,https://github.com/Tomatosoup97,1,https://github.com/cahirwpz/mimiker/pull/482,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,483,2018-11-27T20:42:29Z,2018-12-14T12:11:38Z,2018-12-14T12:11:38Z,MERGED,True,166,1,6,https://github.com/Tomatosoup97,Generate device hints array based on FDT conf file,39,[],https://github.com/cahirwpz/mimiker/pull/483,https://github.com/Tomatosoup97,1,https://github.com/cahirwpz/mimiker/pull/483,"Python script for generating static C array for device hints from FDT (Flat Device Tree) format
Obvious issues:

FDT is exemplary and probably should be rethought","Python script for generating static C array for device hints from FDT (Flat Device Tree) format
Obvious issues:

FDT is exemplary and probably should be rethought",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,483,2018-11-27T20:42:29Z,2018-12-14T12:11:38Z,2018-12-14T12:11:38Z,MERGED,True,166,1,6,https://github.com/Tomatosoup97,Generate device hints array based on FDT conf file,39,[],https://github.com/cahirwpz/mimiker/pull/483,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/483#issuecomment-442836418,"Python script for generating static C array for device hints from FDT (Flat Device Tree) format
Obvious issues:

FDT is exemplary and probably should be rethought","@Tomatosoup97 I'd prefer you wrote more pythonic code, including use of list & dictionary comprehensions where possible.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,483,2018-11-27T20:42:29Z,2018-12-14T12:11:38Z,2018-12-14T12:11:38Z,MERGED,True,166,1,6,https://github.com/Tomatosoup97,Generate device hints array based on FDT conf file,39,[],https://github.com/cahirwpz/mimiker/pull/483,https://github.com/Tomatosoup97,3,https://github.com/cahirwpz/mimiker/pull/483#issuecomment-442979127,"Python script for generating static C array for device hints from FDT (Flat Device Tree) format
Obvious issues:

FDT is exemplary and probably should be rethought","@cahirwpz done, rewritten the code so that it uses more list comprehensions. There is one map left, but I think that in that case it is more natural to use it over list comprehension. There are a few things left related to this change on which I will work during the weekend.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,483,2018-11-27T20:42:29Z,2018-12-14T12:11:38Z,2018-12-14T12:11:38Z,MERGED,True,166,1,6,https://github.com/Tomatosoup97,Generate device hints array based on FDT conf file,39,[],https://github.com/cahirwpz/mimiker/pull/483,https://github.com/mzr,4,https://github.com/cahirwpz/mimiker/pull/483#issuecomment-446320991,"Python script for generating static C array for device hints from FDT (Flat Device Tree) format
Obvious issues:

FDT is exemplary and probably should be rethought",Not compiling? @Tomatosoup97,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,483,2018-11-27T20:42:29Z,2018-12-14T12:11:38Z,2018-12-14T12:11:38Z,MERGED,True,166,1,6,https://github.com/Tomatosoup97,Generate device hints array based on FDT conf file,39,[],https://github.com/cahirwpz/mimiker/pull/483,https://github.com/Tomatosoup97,5,https://github.com/cahirwpz/mimiker/pull/483#issuecomment-446364984,"Python script for generating static C array for device hints from FDT (Flat Device Tree) format
Obvious issues:

FDT is exemplary and probably should be rethought","@mzr it didn't compile b/c I have merged into master branch incorrectly, should work now",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,484,2018-12-02T20:28:24Z,2018-12-03T07:42:24Z,2018-12-03T10:21:18Z,MERGED,True,1,1,1,https://github.com/jpszczolowski,Delete scheduler's dependency on callout,3,[],https://github.com/cahirwpz/mimiker/pull/484,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/484,I've noticed that callouts are not being used in the scheduler.,I've noticed that callouts are not being used in the scheduler.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,485,2018-12-05T22:45:16Z,2018-12-12T17:21:06Z,2018-12-12T22:51:34Z,MERGED,True,72,70,4,https://github.com/jpszczolowski,Move callout execution to top-half,12,[],https://github.com/cahirwpz/mimiker/pull/485,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/485,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,485,2018-12-05T22:45:16Z,2018-12-12T17:21:06Z,2018-12-12T22:51:34Z,MERGED,True,72,70,4,https://github.com/jpszczolowski,Move callout execution to top-half,12,[],https://github.com/cahirwpz/mimiker/pull/485,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/485#issuecomment-444863194,,"I fixed handling exceptions in critical sections.
Now you get a nice message from the kernel:
KERNEL PANIC!!! 
TLB exception (load or instruction fetch) at $801095dc!
Caused by reference to $ffffe000!
HINT: Type 'info line *0x801095dc' into gdb to find faulty code line.

Unfortunately this is not the culprit, but rather a result of overwriting code with random data.
I belive the real culprit is in sys/callout.c:57.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,486,2018-12-06T12:46:37Z,2018-12-06T12:46:59Z,2018-12-06T12:47:37Z,MERGED,True,43,18,4,https://github.com/cahirwpz,Better kernel oops handling,3,[],https://github.com/cahirwpz/mimiker/pull/486,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/486,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,487,2018-12-06T15:13:11Z,2018-12-06T15:15:02Z,2018-12-06T15:15:17Z,MERGED,True,98,79,57,https://github.com/cahirwpz,Split user directory into bin & lib,13,[],https://github.com/cahirwpz/mimiker/pull/487,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/487,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,488,2018-12-07T17:19:59Z,2018-12-07T17:20:41Z,2018-12-07T17:20:54Z,MERGED,True,325,352,25,https://github.com/cahirwpz,Build system rewrite,4,[],https://github.com/cahirwpz/mimiker/pull/488,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/488,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,489,2018-12-10T23:30:40Z,2018-12-12T10:09:03Z,2018-12-12T10:09:03Z,MERGED,True,4,1,2,https://github.com/Tomatosoup97,Install python dependencies based on requirements file,2,[],https://github.com/cahirwpz/mimiker/pull/489,https://github.com/Tomatosoup97,1,https://github.com/cahirwpz/mimiker/pull/489,"Install python dependencies from requirements file
Pros:

Version pinning
Easily accessible requirements.txt file

Climbing through relative path to get to the requirements file seems cumbersome, but according to the plan the location of .circleci/image/Dockerfile might change soon, so I wouldn't put much attention on that.
About versions:
pep8==1.7.1 - we currently use 1.7.0, so there shouldn't be any issues
pexpect==4.6.0 - on the server we now have 4.2.1, but according to their changelog no backward-incompatible changes were introduced https://pexpect.readthedocs.io/en/latest/history.html#version-4-6","Install python dependencies from requirements file
Pros:

Version pinning
Easily accessible requirements.txt file

Climbing through relative path to get to the requirements file seems cumbersome, but according to the plan the location of .circleci/image/Dockerfile might change soon, so I wouldn't put much attention on that.
About versions:
pep8==1.7.1 - we currently use 1.7.0, so there shouldn't be any issues
pexpect==4.6.0 - on the server we now have 4.2.1, but according to their changelog no backward-incompatible changes were introduced https://pexpect.readthedocs.io/en/latest/history.html#version-4-6",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,490,2018-12-12T09:51:57Z,2019-01-07T21:53:38Z,2019-01-07T21:53:38Z,CLOSED,False,57,0,3,https://github.com/Tomatosoup97,Device hints,1,['WiP'],https://github.com/cahirwpz/mimiker/pull/490,https://github.com/Tomatosoup97,1,https://github.com/cahirwpz/mimiker/pull/490,"First skeleton of device hints, early draft","First skeleton of device hints, early draft",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,491,2018-12-12T12:50:30Z,2019-02-12T14:29:00Z,2019-02-12T14:29:01Z,CLOSED,False,273,114,15,https://github.com/mzr,Device drivers infrastructure improvements - draft,11,['WiP'],https://github.com/cahirwpz/mimiker/pull/491,https://github.com/mzr,1,https://github.com/cahirwpz/mimiker/pull/491,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,491,2018-12-12T12:50:30Z,2019-02-12T14:29:00Z,2019-02-12T14:29:01Z,CLOSED,False,273,114,15,https://github.com/mzr,Device drivers infrastructure improvements - draft,11,['WiP'],https://github.com/cahirwpz/mimiker/pull/491,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/491#issuecomment-462780244,,This PR is outdated and it's not clear if it has any value anymore. Hence I decided to close it.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,492,2018-12-14T07:53:51Z,2018-12-15T21:15:32Z,2018-12-15T21:15:32Z,CLOSED,False,0,0,0,https://github.com/barnasm,toolchain aarch64,0,['WiP'],https://github.com/cahirwpz/mimiker/pull/492,https://github.com/barnasm,1,https://github.com/cahirwpz/mimiker/pull/492,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,493,2018-12-14T12:20:11Z,2018-12-14T14:04:15Z,2018-12-14T16:37:33Z,MERGED,True,114,50,13,https://github.com/cahirwpz,Update toolchain & add support for aarch64,15,[],https://github.com/cahirwpz/mimiker/pull/493,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/493,"This PR aims at reducing size of #492, by extracting certain functionality and merge it with current infrastructure.
Goals:

update gcc, binutils, gdb to the most recent versions
support aarch64 architecture","This PR aims at reducing size of #492, by extracting certain functionality and merge it with current infrastructure.
Goals:

update gcc, binutils, gdb to the most recent versions
support aarch64 architecture",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,495,2018-12-16T11:16:54Z,2019-02-12T14:50:28Z,2019-02-12T14:50:28Z,CLOSED,False,87,0,3,https://github.com/wmoc,Add userspace tests for process groups,2,['WiP'],https://github.com/cahirwpz/mimiker/pull/495,https://github.com/wmoc,1,https://github.com/cahirwpz/mimiker/pull/495,"As process groups don't exist yet, the tests were run only on linux for now
and this commit breaks compilation of mimiker.","As process groups don't exist yet, the tests were run only on linux for now
and this commit breaks compilation of mimiker.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,495,2018-12-16T11:16:54Z,2019-02-12T14:50:28Z,2019-02-12T14:50:28Z,CLOSED,False,87,0,3,https://github.com/wmoc,Add userspace tests for process groups,2,['WiP'],https://github.com/cahirwpz/mimiker/pull/495,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/495#issuecomment-447938808,"As process groups don't exist yet, the tests were run only on linux for now
and this commit breaks compilation of mimiker.","These tests must at least compile in order to be merged with master.
I think the only way is to take system calls stubs from #475.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,495,2018-12-16T11:16:54Z,2019-02-12T14:50:28Z,2019-02-12T14:50:28Z,CLOSED,False,87,0,3,https://github.com/wmoc,Add userspace tests for process groups,2,['WiP'],https://github.com/cahirwpz/mimiker/pull/495,https://github.com/wmoc,3,https://github.com/cahirwpz/mimiker/pull/495#issuecomment-448352863,"As process groups don't exist yet, the tests were run only on linux for now
and this commit breaks compilation of mimiker.","These tests must at least compile in order to be merged with master.
I think the only way is to take system calls stubs from #475.

In my opinion, we should have PR with stubs for those functions first, next PR for tests and then PR with implementation. First PR should be easy. I think, that we should work on API and internal implementation separately. Also implementation should take place after we are sure what API we want to have. In such easy feature this fragmentation is possible.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,495,2018-12-16T11:16:54Z,2019-02-12T14:50:28Z,2019-02-12T14:50:28Z,CLOSED,False,87,0,3,https://github.com/wmoc,Add userspace tests for process groups,2,['WiP'],https://github.com/cahirwpz/mimiker/pull/495,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/495#issuecomment-453955064,"As process groups don't exist yet, the tests were run only on linux for now
and this commit breaks compilation of mimiker.","@wmoczulsky, @staffik Should I consider this PR as dead? There's completely no activity in here.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,495,2018-12-16T11:16:54Z,2019-02-12T14:50:28Z,2019-02-12T14:50:28Z,CLOSED,False,87,0,3,https://github.com/wmoc,Add userspace tests for process groups,2,['WiP'],https://github.com/cahirwpz/mimiker/pull/495,https://github.com/cahirwpz,5,https://github.com/cahirwpz/mimiker/pull/495#issuecomment-454753286,"As process groups don't exist yet, the tests were run only on linux for now
and this commit breaks compilation of mimiker.",@staffik Why have you accepted a change that does not compile?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,495,2018-12-16T11:16:54Z,2019-02-12T14:50:28Z,2019-02-12T14:50:28Z,CLOSED,False,87,0,3,https://github.com/wmoc,Add userspace tests for process groups,2,['WiP'],https://github.com/cahirwpz/mimiker/pull/495,https://github.com/staffik,6,https://github.com/cahirwpz/mimiker/pull/495#issuecomment-455360151,"As process groups don't exist yet, the tests were run only on linux for now
and this commit breaks compilation of mimiker.",@cahirwpz  I mean it is ok given that we have Process groups implementation merged to master too. I checked that with Process groups implementation it compiles and tests pass.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,495,2018-12-16T11:16:54Z,2019-02-12T14:50:28Z,2019-02-12T14:50:28Z,CLOSED,False,87,0,3,https://github.com/wmoc,Add userspace tests for process groups,2,['WiP'],https://github.com/cahirwpz/mimiker/pull/495,https://github.com/cahirwpz,7,https://github.com/cahirwpz/mimiker/pull/495#issuecomment-462788394,"As process groups don't exist yet, the tests were run only on linux for now
and this commit breaks compilation of mimiker.",Nothing has changed here for last two months. I reckon this PR is dead.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,496,2018-12-17T18:22:13Z,2018-12-19T19:21:20Z,2018-12-22T13:50:52Z,MERGED,True,196,27,8,https://github.com/cahirwpz,sys_execve implementation + minimalistic shell,70,[],https://github.com/cahirwpz/mimiker/pull/496,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/496,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,497,2018-12-17T18:36:19Z,2019-01-24T19:21:57Z,2019-02-12T15:44:09Z,CLOSED,False,57,0,2,https://github.com/cahirwpz,GDB extension: dump list of all processes,4,['WiP'],https://github.com/cahirwpz/mimiker/pull/497,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/497,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,497,2018-12-17T18:36:19Z,2019-01-24T19:21:57Z,2019-02-12T15:44:09Z,CLOSED,False,57,0,2,https://github.com/cahirwpz,GDB extension: dump list of all processes,4,['WiP'],https://github.com/cahirwpz/mimiker/pull/497,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/497#issuecomment-457322877,,Became part of #529,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,498,2018-12-17T18:41:11Z,2019-02-12T15:43:18Z,2019-02-12T15:43:54Z,MERGED,True,21,16,7,https://github.com/cahirwpz,Move kernel switch context on kernel stack,4,['accepted'],https://github.com/cahirwpz/mimiker/pull/498,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/498,"Is there any benefit of doing that this way? If no, remove this branch!","Is there any benefit of doing that this way? If no, remove this branch!",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,498,2018-12-17T18:41:11Z,2019-02-12T15:43:18Z,2019-02-12T15:43:54Z,MERGED,True,21,16,7,https://github.com/cahirwpz,Move kernel switch context on kernel stack,4,['accepted'],https://github.com/cahirwpz/mimiker/pull/498,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/498#issuecomment-462810097,"Is there any benefit of doing that this way? If no, remove this branch!",Exception and interrupt context is always saved on stack. For consistency switch context should be saved on stack as well.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,501,2018-12-19T21:13:41Z,2019-02-12T15:01:03Z,2019-02-12T15:01:03Z,MERGED,True,109,0,7,https://github.com/barnasm,openocd make + .deb package creator,10,[],https://github.com/cahirwpz/mimiker/pull/501,https://github.com/barnasm,1,https://github.com/cahirwpz/mimiker/pull/501,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,501,2018-12-19T21:13:41Z,2019-02-12T15:01:03Z,2019-02-12T15:01:03Z,MERGED,True,109,0,7,https://github.com/barnasm,openocd make + .deb package creator,10,[],https://github.com/cahirwpz/mimiker/pull/501,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/501#issuecomment-453952396,,"On freshly cloned repository I get:
rm -rf openocd-build
mkdir openocd-build
cd openocd-0.10.0+dev && \
    ./bootstrap && \
sed -i 's/'""'""'openocd'""'""'/'""'""'openocd-mimiker'""'""'/g' configure
/bin/sh: 1: cd: can't cd to openocd-0.10.0+dev
Makefile:13: polecenia dla obiektu 'configure-stamp' nie powiodły się
make: *** [configure-stamp] Błąd 2

Please test build process more thoroughly.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,502,2018-12-22T14:21:45Z,2019-01-14T10:20:43Z,2019-01-17T19:36:52Z,MERGED,True,8,6,2,https://github.com/cahirwpz,Cannot kmalloc blocks larger than PAGESIZE,5,['bug'],https://github.com/cahirwpz/mimiker/pull/502,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/502,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,503,2018-12-22T17:16:24Z,2018-12-22T18:17:00Z,2018-12-22T18:17:00Z,MERGED,True,11,8,2,https://github.com/pwit81,Alignment correction in exeve arguments roll-in function,4,[],https://github.com/cahirwpz/mimiker/pull/503,https://github.com/pwit81,1,https://github.com/cahirwpz/mimiker/pull/503,A buffer_t structure used by exec_args_copyin needs more alignment.,A buffer_t structure used by exec_args_copyin needs more alignment.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,504,2018-12-23T11:03:34Z,2018-12-23T12:30:10Z,2018-12-23T12:30:23Z,MERGED,True,292,234,5,https://github.com/cahirwpz,Review current do_exec implementation,9,[],https://github.com/cahirwpz/mimiker/pull/504,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/504,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,505,2018-12-24T07:52:00Z,2018-12-27T12:00:15Z,2018-12-27T12:30:12Z,MERGED,True,171,78,5,https://github.com/cahirwpz,Extend execve to support shebang,10,[],https://github.com/cahirwpz/mimiker/pull/505,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/505,Aims to implement #500,Aims to implement #500,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,506,2018-12-27T13:01:25Z,2018-12-27T15:09:03Z,2018-12-27T15:09:17Z,MERGED,True,71,12,12,https://github.com/cahirwpz,Lua promotion to Mimiker OS standard tools,7,['WiP'],https://github.com/cahirwpz/mimiker/pull/506,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/506,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,512,2019-01-03T18:17:47Z,2019-01-05T12:14:46Z,2019-01-05T13:41:03Z,MERGED,True,66,44,16,https://github.com/jpszczolowski,Refactor threads' names,45,[],https://github.com/cahirwpz/mimiker/pull/512,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/512,"My proposal of thread naming rules. Try to:

not use thread word,
prefix kernel test thread with test,
prefix user test thread with utest,
use format [prefix-]module[-name[-number]], e.g. callout, test-malloc, test-sleepq-waiter-2.","My proposal of thread naming rules. Try to:

not use thread word,
prefix kernel test thread with test,
prefix user test thread with utest,
use format [prefix-]module[-name[-number]], e.g. callout, test-malloc, test-sleepq-waiter-2.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,512,2019-01-03T18:17:47Z,2019-01-05T12:14:46Z,2019-01-05T13:41:03Z,MERGED,True,66,44,16,https://github.com/jpszczolowski,Refactor threads' names,45,[],https://github.com/cahirwpz/mimiker/pull/512,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/512#issuecomment-451233133,"My proposal of thread naming rules. Try to:

not use thread word,
prefix kernel test thread with test,
prefix user test thread with utest,
use format [prefix-]module[-name[-number]], e.g. callout, test-malloc, test-sleepq-waiter-2.",Could you write a documentation for thread_create function and add new thread naming convention there?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,512,2019-01-03T18:17:47Z,2019-01-05T12:14:46Z,2019-01-05T13:41:03Z,MERGED,True,66,44,16,https://github.com/jpszczolowski,Refactor threads' names,45,[],https://github.com/cahirwpz/mimiker/pull/512,https://github.com/jpszczolowski,3,https://github.com/cahirwpz/mimiker/pull/512#issuecomment-451582582,"My proposal of thread naming rules. Try to:

not use thread word,
prefix kernel test thread with test,
prefix user test thread with utest,
use format [prefix-]module[-name[-number]], e.g. callout, test-malloc, test-sleepq-waiter-2.",@cahirwpz done,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,515,2019-01-07T21:54:54Z,2019-02-12T15:45:54Z,2019-02-12T15:45:54Z,CLOSED,False,199,8,16,https://github.com/Tomatosoup97,Device hints,4,['WiP'],https://github.com/cahirwpz/mimiker/pull/515,https://github.com/Tomatosoup97,1,https://github.com/cahirwpz/mimiker/pull/515,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,515,2019-01-07T21:54:54Z,2019-02-12T15:45:54Z,2019-02-12T15:45:54Z,CLOSED,False,199,8,16,https://github.com/Tomatosoup97,Device hints,4,['WiP'],https://github.com/cahirwpz/mimiker/pull/515,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/515#issuecomment-462811390,,I cannot see this PR moving the kernel into right direction with drivers infrastructure. Hence I decided to close it.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,517,2019-01-08T19:05:50Z,2019-02-13T17:59:13Z,2019-02-13T17:59:13Z,MERGED,True,220,49,5,https://github.com/staffik,Process groups implementation.,15,[],https://github.com/cahirwpz/mimiker/pull/517,https://github.com/staffik,1,https://github.com/cahirwpz/mimiker/pull/517,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,520,2019-01-10T06:27:26Z,2019-01-10T17:55:24Z,2019-01-11T22:34:26Z,MERGED,True,72,13,3,https://github.com/cahirwpz,Implement extra functionalities for Lua to enable #513,4,[],https://github.com/cahirwpz/mimiker/pull/520,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/520,"simple getopt in Lua for command line parsing
throw a pair {[err] = errno, [msg] = sys_errlist[errno]} instead of just a number","simple getopt in Lua for command line parsing
throw a pair {[err] = errno, [msg] = sys_errlist[errno]} instead of just a number",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,521,2019-01-15T22:25:16Z,2019-02-03T07:45:22Z,2019-02-03T08:03:56Z,MERGED,True,139,84,6,https://github.com/jpszczolowski,Implement interrupt threads,43,[],https://github.com/cahirwpz/mimiker/pull/521,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/521,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,521,2019-01-15T22:25:16Z,2019-02-03T07:45:22Z,2019-02-03T08:03:56Z,MERGED,True,139,84,6,https://github.com/jpszczolowski,Implement interrupt threads,43,[],https://github.com/cahirwpz/mimiker/pull/521,https://github.com/jpszczolowski,2,https://github.com/cahirwpz/mimiker/pull/521#issuecomment-454578831,,"@cahirwpz why if I delete mips32_set_c0(C0_CAUSE, frame->cause & ~CR_IP_MASK); inside mips_intr_handler the tests still pass? Isn't this instruction something like EOI?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,521,2019-01-15T22:25:16Z,2019-02-03T07:45:22Z,2019-02-03T08:03:56Z,MERGED,True,139,84,6,https://github.com/jpszczolowski,Implement interrupt threads,43,[],https://github.com/cahirwpz/mimiker/pull/521,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/521#issuecomment-454680848,,"Hmm... apparently I missed the fact that C0_CAUSE.IP[7..0] bits are read-only. I suppose they get zero'ed after a read is performed, but I cannot find it in the documentation.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,521,2019-01-15T22:25:16Z,2019-02-03T07:45:22Z,2019-02-03T08:03:56Z,MERGED,True,139,84,6,https://github.com/jpszczolowski,Implement interrupt threads,43,[],https://github.com/cahirwpz/mimiker/pull/521,https://github.com/jpszczolowski,4,https://github.com/cahirwpz/mimiker/pull/521#issuecomment-460029850,,LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,522,2019-01-17T12:27:29Z,2019-01-17T19:36:24Z,2019-01-17T19:36:51Z,MERGED,True,313,439,19,https://github.com/cahirwpz,tmux-based launch program,15,['WiP'],https://github.com/cahirwpz/mimiker/pull/522,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/522,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,524,2019-01-21T11:36:05Z,2019-01-23T16:39:46Z,2019-01-23T16:39:46Z,MERGED,True,2,1,1,https://github.com/wmoc,Fix group id in Dockerfile,2,['bug'],https://github.com/cahirwpz/mimiker/pull/524,https://github.com/wmoc,1,https://github.com/cahirwpz/mimiker/pull/524,"--ingroup option allowed only one GID (https://manpages.debian.org/jessie/adduser/adduser.8.en.html)
so user was added only to sudo group
Previously files inside container were created with sudo group.
before:
_  mimiker git:(master) _ id
uid=1000(mimiker) gid=27(sudo) groups=27(sudo)

after:
_  mimiker git:(master) _ id
uid=1000(mimiker) gid=1000(mimiker) groups=1000(mimiker),27(sudo)","--ingroup option allowed only one GID (https://manpages.debian.org/jessie/adduser/adduser.8.en.html)
so user was added only to sudo group
Previously files inside container were created with sudo group.
before:
_  mimiker git:(master) _ id
uid=1000(mimiker) gid=27(sudo) groups=27(sudo)

after:
_  mimiker git:(master) _ id
uid=1000(mimiker) gid=1000(mimiker) groups=1000(mimiker),27(sudo)",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,524,2019-01-21T11:36:05Z,2019-01-23T16:39:46Z,2019-01-23T16:39:46Z,MERGED,True,2,1,1,https://github.com/wmoc,Fix group id in Dockerfile,2,['bug'],https://github.com/cahirwpz/mimiker/pull/524,https://github.com/Tomatosoup97,2,https://github.com/cahirwpz/mimiker/pull/524#issuecomment-456046898,"--ingroup option allowed only one GID (https://manpages.debian.org/jessie/adduser/adduser.8.en.html)
so user was added only to sudo group
Previously files inside container were created with sudo group.
before:
_  mimiker git:(master) _ id
uid=1000(mimiker) gid=27(sudo) groups=27(sudo)

after:
_  mimiker git:(master) _ id
uid=1000(mimiker) gid=1000(mimiker) groups=1000(mimiker),27(sudo)","Thanks for spotting that! An alternative way would be to use --add_extra_groups, but your solution is also fine and avoids creating additional conf files. LGTM.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,525,2019-01-21T11:57:57Z,2019-02-15T15:38:17Z,2019-02-15T15:38:17Z,MERGED,True,23,11,6,https://github.com/wmoc,Proper locking of proc_t,12,['bug'],https://github.com/cahirwpz/mimiker/pull/525,https://github.com/wmoc,1,https://github.com/cahirwpz/mimiker/pull/525,In many places like exec.c:run_program() and fork.c:do_fork()  structure proc_t is not locked in accordance with annotations. I will try to fix this.,In many places like exec.c:run_program() and fork.c:do_fork()  structure proc_t is not locked in accordance with annotations. I will try to fix this.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,525,2019-01-21T11:57:57Z,2019-02-15T15:38:17Z,2019-02-15T15:38:17Z,MERGED,True,23,11,6,https://github.com/wmoc,Proper locking of proc_t,12,['bug'],https://github.com/cahirwpz/mimiker/pull/525,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/525#issuecomment-462779377,In many places like exec.c:run_program() and fork.c:do_fork()  structure proc_t is not locked in accordance with annotations. I will try to fix this.,Changes introduced by this PR have little value and the PR is unlikely to be finished before semester ends.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,525,2019-01-21T11:57:57Z,2019-02-15T15:38:17Z,2019-02-15T15:38:17Z,MERGED,True,23,11,6,https://github.com/wmoc,Proper locking of proc_t,12,['bug'],https://github.com/cahirwpz/mimiker/pull/525,https://github.com/wmoc,3,https://github.com/cahirwpz/mimiker/pull/525#issuecomment-462856417,In many places like exec.c:run_program() and fork.c:do_fork()  structure proc_t is not locked in accordance with annotations. I will try to fix this.,"I changed locking strategy for proc_t. Now some fields are marked to use only in the same thread/proc, hence locking in most places is now unnecessary.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,526,2019-01-21T23:02:26Z,2019-02-12T14:39:20Z,2019-02-12T14:39:21Z,CLOSED,False,1,1,1,https://github.com/Tomatosoup97,Port docker to new launch,11,['WiP'],https://github.com/cahirwpz/mimiker/pull/526,https://github.com/Tomatosoup97,1,https://github.com/cahirwpz/mimiker/pull/526,Related issue: #523,Related issue: #523,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,526,2019-01-21T23:02:26Z,2019-02-12T14:39:20Z,2019-02-12T14:39:21Z,CLOSED,False,1,1,1,https://github.com/Tomatosoup97,Port docker to new launch,11,['WiP'],https://github.com/cahirwpz/mimiker/pull/526,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/526#issuecomment-462784154,Related issue: #523,Please change docker/Dockerfile.tpl in another PR.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,527,2019-01-23T00:33:06Z,2019-01-23T17:03:55Z,2019-01-23T17:03:55Z,MERGED,True,26,0,3,https://github.com/Tomatosoup97,Test for devclass_find and improved docstrings,4,[],https://github.com/cahirwpz/mimiker/pull/527,https://github.com/Tomatosoup97,1,https://github.com/cahirwpz/mimiker/pull/527,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,528,2019-01-23T00:40:52Z,2019-01-23T09:53:33Z,2019-01-23T09:53:33Z,MERGED,True,1,1,1,https://github.com/Tomatosoup97,Include more swap file extension types in gitignore,1,[],https://github.com/cahirwpz/mimiker/pull/528,https://github.com/Tomatosoup97,1,https://github.com/cahirwpz/mimiker/pull/528,"After failing to create *.swp file, vim might create other *.swX
files which will make mess in the repository
Reference: http://vimdoc.sourceforge.net/htmldoc/recover.html#swap-file","After failing to create *.swp file, vim might create other *.swX
files which will make mess in the repository
Reference: http://vimdoc.sourceforge.net/htmldoc/recover.html#swap-file",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,529,2019-01-23T11:26:31Z,2019-02-13T10:04:22Z,2019-02-13T10:04:32Z,MERGED,True,137,63,5,https://github.com/cahirwpz,Several improvements to gdb infrastructure,32,['WiP'],https://github.com/cahirwpz/mimiker/pull/529,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/529,"Fix long lasting bugs.
Improve tracing threads and processes.","Fix long lasting bugs.
Improve tracing threads and processes.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,530,2019-01-23T15:53:48Z,2019-01-23T16:44:28Z,2019-01-23T16:44:28Z,MERGED,True,80,23,9,https://github.com/mzr,Compiling mimiker with DTB,5,[],https://github.com/cahirwpz/mimiker/pull/530,https://github.com/mzr,1,https://github.com/cahirwpz/mimiker/pull/530,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,531,2019-01-23T16:57:40Z,2019-01-23T17:38:19Z,2019-01-23T17:38:19Z,MERGED,True,1122,0,3,https://github.com/mzr,FDT,10,[],https://github.com/cahirwpz/mimiker/pull/531,https://github.com/mzr,1,https://github.com/cahirwpz/mimiker/pull/531,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,532,2019-01-24T17:46:38Z,2019-02-12T15:46:08Z,2019-02-12T15:46:08Z,CLOSED,False,84,8,9,https://github.com/Tomatosoup97,Define name and unit fields for a device and provide related functions,2,['WiP'],https://github.com/cahirwpz/mimiker/pull/532,https://github.com/Tomatosoup97,1,https://github.com/cahirwpz/mimiker/pull/532,"This change is necessary in order to search for a device in FDT. Names for the devices are based on malta.dts file.

device_get_fullname
device_construct_fullpath
Provide tests for the above functions","This change is necessary in order to search for a device in FDT. Names for the devices are based on malta.dts file.

device_get_fullname
device_construct_fullpath
Provide tests for the above functions",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,532,2019-01-24T17:46:38Z,2019-02-12T15:46:08Z,2019-02-12T15:46:08Z,CLOSED,False,84,8,9,https://github.com/Tomatosoup97,Define name and unit fields for a device and provide related functions,2,['WiP'],https://github.com/cahirwpz/mimiker/pull/532,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/532#issuecomment-462811485,"This change is necessary in order to search for a device in FDT. Names for the devices are based on malta.dts file.

device_get_fullname
device_construct_fullpath
Provide tests for the above functions",I cannot see this PR moving the kernel into right direction with drivers infrastructure. Hence I decided to close it.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,533,2019-01-25T10:26:00Z,2019-11-28T17:06:07Z,2019-11-28T17:06:07Z,CLOSED,False,87,0,3,https://github.com/Tomatosoup97,Provide basic unit tests for FDT interface,6,['WiP'],https://github.com/cahirwpz/mimiker/pull/533,https://github.com/Tomatosoup97,1,https://github.com/cahirwpz/mimiker/pull/533,"Despite of the fact that the tests will assure that operations on FDT work as expected, they will provide us a basic usage guide.","Despite of the fact that the tests will assure that operations on FDT work as expected, they will provide us a basic usage guide.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,533,2019-01-25T10:26:00Z,2019-11-28T17:06:07Z,2019-11-28T17:06:07Z,CLOSED,False,87,0,3,https://github.com/Tomatosoup97,Provide basic unit tests for FDT interface,6,['WiP'],https://github.com/cahirwpz/mimiker/pull/533,https://github.com/mzr,2,https://github.com/cahirwpz/mimiker/pull/533#issuecomment-458843799,"Despite of the fact that the tests will assure that operations on FDT work as expected, they will provide us a basic usage guide.",Kernel tests are failing. What's te state of this PR ?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,533,2019-01-25T10:26:00Z,2019-11-28T17:06:07Z,2019-11-28T17:06:07Z,CLOSED,False,87,0,3,https://github.com/Tomatosoup97,Provide basic unit tests for FDT interface,6,['WiP'],https://github.com/cahirwpz/mimiker/pull/533,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/533#issuecomment-462782470,"Despite of the fact that the tests will assure that operations on FDT work as expected, they will provide us a basic usage guide.","This PR seems to be useful, are there any chances it will get prepared for merge soon?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,533,2019-01-25T10:26:00Z,2019-11-28T17:06:07Z,2019-11-28T17:06:07Z,CLOSED,False,87,0,3,https://github.com/Tomatosoup97,Provide basic unit tests for FDT interface,6,['WiP'],https://github.com/cahirwpz/mimiker/pull/533,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/533#issuecomment-559562833,"Despite of the fact that the tests will assure that operations on FDT work as expected, they will provide us a basic usage guide.",This PR isn't that valuable anymore. I decided to close it.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,534,2019-01-28T23:00:42Z,2019-11-28T17:04:52Z,2019-11-28T17:04:53Z,CLOSED,False,106,0,5,https://github.com/Tomatosoup97,Initial draft for device properties structure,9,"['accepted', 'WiP']",https://github.com/cahirwpz/mimiker/pull/534,https://github.com/Tomatosoup97,1,https://github.com/cahirwpz/mimiker/pull/534,Early draft of how the devprops (device properties) could look like. Any critique or improvement suggestion is welcome.,Early draft of how the devprops (device properties) could look like. Any critique or improvement suggestion is welcome.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,534,2019-01-28T23:00:42Z,2019-11-28T17:04:52Z,2019-11-28T17:04:53Z,CLOSED,False,106,0,5,https://github.com/Tomatosoup97,Initial draft for device properties structure,9,"['accepted', 'WiP']",https://github.com/cahirwpz/mimiker/pull/534,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/534#issuecomment-559562531,Early draft of how the devprops (device properties) could look like. Any critique or improvement suggestion is welcome.,"This PR got heavily outdated. There's too little value in it to be worth spending time to update it to current code base. Hence, I decided to close it.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,535,2019-01-29T21:16:31Z,2019-01-31T17:27:07Z,2019-01-31T18:00:31Z,MERGED,True,2,2,1,https://github.com/jpszczolowski,Fix UART's condvar hang,4,[],https://github.com/cahirwpz/mimiker/pull/535,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/535,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,536,2019-01-29T21:44:06Z,2019-02-01T13:26:45Z,2019-02-01T17:46:47Z,MERGED,True,57,32,1,https://github.com/mzr,Changing malta.dts to meet discussed criteria.,1,[],https://github.com/cahirwpz/mimiker/pull/536,https://github.com/mzr,1,https://github.com/cahirwpz/mimiker/pull/536,"Number after @ in node name is a logical unit number.
3rd field in reg specifies logical rid for a given resource.","Number after @ in node name is a logical unit number.
3rd field in reg specifies logical rid for a given resource.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,536,2019-01-29T21:44:06Z,2019-02-01T13:26:45Z,2019-02-01T17:46:47Z,MERGED,True,57,32,1,https://github.com/mzr,Changing malta.dts to meet discussed criteria.,1,[],https://github.com/cahirwpz/mimiker/pull/536,https://github.com/jpszczolowski,2,https://github.com/cahirwpz/mimiker/pull/536#issuecomment-459806653,"Number after @ in node name is a logical unit number.
3rd field in reg specifies logical rid for a given resource.","During the compilation I can see (probably caused by this merge):
[DTB] mips/malta.dts -> mips/malta.dtb
Warning (reg_format): ""reg"" property in /memory has invalid length (8 bytes) (#address-cells == 2, #size-cells == 1)
Warning (reg_format): ""reg"" property in /root@0/cbus@0 has invalid length (12 bytes) (#address-cells == 1, #size-cells == 1)
Warning (reg_format): ""reg"" property in /root@0/cbus@0/serial@0 has invalid length (12 bytes) (#address-cells == 1, #size-cells == 1)
Warning (reg_format): ""reg"" property in /root@0/pci@0/isa@0/rtc@0 has invalid length (12 bytes) (#address-cells == 1, #size-cells == 1)
Warning (reg_format): ""reg"" property in /root@0/pci@0/isa@0/pit@0 has invalid length (12 bytes) (#address-cells == 1, #size-cells == 1)
Warning (reg_format): ""reg"" property in /root@0/pci@0/isa@0/serial@0 has invalid length (12 bytes) (#address-cells == 1, #size-cells == 1)
Warning (reg_format): ""reg"" property in /root@0/pci@0/isa@0/serial@1 has invalid length (12 bytes) (#address-cells == 1, #size-cells == 1)
Warning (unit_address_vs_reg): Node /cpus/cpu@0 has a unit name, but no reg property
Warning (unit_address_vs_reg): Node /memory has a reg or ranges property, but no unit name
Warning (unit_address_vs_reg): Node /root@0 has a unit name, but no reg property
Warning (avoid_default_addr_size): Relying on default #address-cells value for /memory
Warning (avoid_default_addr_size): Relying on default #size-cells value for /memory
Warning (avoid_default_addr_size): Relying on default #address-cells value for /root@0/pci@0/isa@0
Warning (avoid_default_addr_size): Relying on default #size-cells value for /root@0/pci@0/isa@0",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,537,2019-01-30T11:50:54Z,2019-01-31T20:03:41Z,2019-01-31T20:05:43Z,MERGED,True,2,3,2,https://github.com/jpszczolowski,Change Dockerfile's FROM version to :latest,6,[],https://github.com/cahirwpz/mimiker/pull/537,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/537,We should use latest version instead of 1.6 (which is out-of-date anyway). We have latest tag on the Docker Hubsince 11dafa3.,We should use latest version instead of 1.6 (which is out-of-date anyway). We have latest tag on the Docker Hubsince 11dafa3.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,537,2019-01-30T11:50:54Z,2019-01-31T20:03:41Z,2019-01-31T20:05:43Z,MERGED,True,2,3,2,https://github.com/jpszczolowski,Change Dockerfile's FROM version to :latest,6,[],https://github.com/cahirwpz/mimiker/pull/537,https://github.com/Tomatosoup97,2,https://github.com/cahirwpz/mimiker/pull/537#issuecomment-458919139,We should use latest version instead of 1.6 (which is out-of-date anyway). We have latest tag on the Docker Hubsince 11dafa3.,"@jpszczolowski please see #526, where this change is already done",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,537,2019-01-30T11:50:54Z,2019-01-31T20:03:41Z,2019-01-31T20:05:43Z,MERGED,True,2,3,2,https://github.com/jpszczolowski,Change Dockerfile's FROM version to :latest,6,[],https://github.com/cahirwpz/mimiker/pull/537,https://github.com/jpszczolowski,3,https://github.com/cahirwpz/mimiker/pull/537#issuecomment-458923231,We should use latest version instead of 1.6 (which is out-of-date anyway). We have latest tag on the Docker Hubsince 11dafa3.,"Ok, I didn't know that this change is inside #526
But I still think that this PR is worth merging now as the tag change is not at all related to #526.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,539,2019-02-01T15:24:53Z,2019-02-01T15:58:33Z,2019-02-01T15:58:52Z,MERGED,True,99,99,4,https://github.com/jpszczolowski,Rename interrupt chain to interrupt event,5,[],https://github.com/cahirwpz/mimiker/pull/539,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/539,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,540,2019-02-02T17:54:42Z,2019-02-12T19:32:22Z,2019-02-12T19:32:23Z,MERGED,True,180,58,14,https://github.com/bgrm,Enable sbrk with negative args + munmap in simple variant,26,[],https://github.com/cahirwpz/mimiker/pull/540,https://github.com/bgrm,1,https://github.com/cahirwpz/mimiker/pull/540,issue 393,issue 393,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,540,2019-02-02T17:54:42Z,2019-02-12T19:32:22Z,2019-02-12T19:32:23Z,MERGED,True,180,58,14,https://github.com/bgrm,Enable sbrk with negative args + munmap in simple variant,26,[],https://github.com/cahirwpz/mimiker/pull/540,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/540#issuecomment-460034279,issue 393,Please add tests for munmap in bin/utest/mmap.c.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,541,2019-02-08T21:11:17Z,2019-02-11T10:22:48Z,2019-02-12T15:36:00Z,MERGED,True,75,19,3,https://github.com/jpszczolowski,Fix exception handling when interrupts are disabled,13,[],https://github.com/cahirwpz/mimiker/pull/541,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/541,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,542,2019-02-10T18:53:15Z,2019-02-10T22:05:02Z,2019-02-10T22:05:02Z,MERGED,True,10,8,7,https://github.com/staffik,proper .clang-format formatting of LIST_FOREACH macro,3,[],https://github.com/cahirwpz/mimiker/pull/542,https://github.com/staffik,1,https://github.com/cahirwpz/mimiker/pull/542,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,542,2019-02-10T18:53:15Z,2019-02-10T22:05:02Z,2019-02-10T22:05:02Z,MERGED,True,10,8,7,https://github.com/staffik,proper .clang-format formatting of LIST_FOREACH macro,3,[],https://github.com/cahirwpz/mimiker/pull/542,https://github.com/jpszczolowski,2,https://github.com/cahirwpz/mimiker/pull/542#issuecomment-462166731,,"Maybe we should also add TAILQ_FOREACH_REVERSE, TAILQ_FOREACH_SAFE, LIST_FOREACH_SAFE?",True,{'THUMBS_UP': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,542,2019-02-10T18:53:15Z,2019-02-10T22:05:02Z,2019-02-10T22:05:02Z,MERGED,True,10,8,7,https://github.com/staffik,proper .clang-format formatting of LIST_FOREACH macro,3,[],https://github.com/cahirwpz/mimiker/pull/542,https://github.com/staffik,3,https://github.com/cahirwpz/mimiker/pull/542#issuecomment-462178071,,"Maybe we should also add TAILQ_FOREACH_REVERSE, TAILQ_FOREACH_SAFE, LIST_FOREACH_SAFE?

done",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,543,2019-02-10T19:03:41Z,2019-02-11T11:44:35Z,2019-02-11T11:44:35Z,MERGED,True,14,14,1,https://github.com/staffik,better symbols related to locks in proc.h,5,[],https://github.com/cahirwpz/mimiker/pull/543,https://github.com/staffik,1,https://github.com/cahirwpz/mimiker/pull/543,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,544,2019-02-10T19:11:32Z,2019-02-10T21:12:00Z,2019-02-10T21:12:00Z,MERGED,True,9,9,1,https://github.com/staffik,easier to read code in do_fork function,1,[],https://github.com/cahirwpz/mimiker/pull/544,https://github.com/staffik,1,https://github.com/cahirwpz/mimiker/pull/544,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,546,2019-02-11T22:38:38Z,2019-02-12T14:43:44Z,2019-02-12T14:43:53Z,MERGED,True,15,11,5,https://github.com/staffik,move do_kill to proc_sendsig,1,[],https://github.com/cahirwpz/mimiker/pull/546,https://github.com/staffik,1,https://github.com/cahirwpz/mimiker/pull/546,In response to issue: #545,In response to issue: #545,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,546,2019-02-11T22:38:38Z,2019-02-12T14:43:44Z,2019-02-12T14:43:53Z,MERGED,True,15,11,5,https://github.com/staffik,move do_kill to proc_sendsig,1,[],https://github.com/cahirwpz/mimiker/pull/546,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/546#issuecomment-462785838,In response to issue: #545,Fixes #546,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,547,2019-02-13T20:33:49Z,2019-02-13T20:43:47Z,2019-02-13T20:43:47Z,MERGED,True,8,1,1,https://github.com/staffik,killpg syscall,1,[],https://github.com/cahirwpz/mimiker/pull/547,https://github.com/staffik,1,https://github.com/cahirwpz/mimiker/pull/547,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,548,2019-02-15T15:39:57Z,2019-12-02T07:56:32Z,2019-12-02T08:34:50Z,MERGED,True,179,0,7,https://github.com/staffik,"Tests for setpgid, kill and killpg.",7,[],https://github.com/cahirwpz/mimiker/pull/548,https://github.com/staffik,1,https://github.com/cahirwpz/mimiker/pull/548,"Summary

add bin/utest/pgrp.c file with tests:

test_setpgid - test setpgid syscall
test_kill - test sending signal to other process
test_killpg_same_group - test sending signal to own process group
test_killpg_other_group - test sending signal to other process group


fix issue with unwaited children in test_fd_pipe
add mising proc_unlock to proc_getpgid(..)","Summary

add bin/utest/pgrp.c file with tests:

test_setpgid - test setpgid syscall
test_kill - test sending signal to other process
test_killpg_same_group - test sending signal to own process group
test_killpg_other_group - test sending signal to other process group


fix issue with unwaited children in test_fd_pipe
add mising proc_unlock to proc_getpgid(..)",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,549,2019-03-20T13:02:02Z,2019-03-21T06:09:48Z,2019-03-21T11:38:37Z,MERGED,True,1,1,1,https://github.com/jpszczolowski,Fix gdb kthread command,6,[],https://github.com/cahirwpz/mimiker/pull/549,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/549,"This PR fixes kthread command broken by f19e195.
More details: Thread.dump_all() uses Thread.current() to get the current thread but the aforementioned commit changed the semantics of Thread.current():
+    def current():
+        return gdb.parse_and_eval('_pcpu_data->curthread')
 
-    def current(cls):
-        return cls(gdb.parse_and_eval('_pcpu_data->curthread').dereference())
+    def from_current(cls):
+        return cls(Thread.current().dereference())","This PR fixes kthread command broken by f19e195.
More details: Thread.dump_all() uses Thread.current() to get the current thread but the aforementioned commit changed the semantics of Thread.current():
+    def current():
+        return gdb.parse_and_eval('_pcpu_data->curthread')
 
-    def current(cls):
-        return cls(gdb.parse_and_eval('_pcpu_data->curthread').dereference())
+    def from_current(cls):
+        return cls(Thread.current().dereference())",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,550,2019-04-16T09:28:22Z,2019-05-23T05:59:45Z,2019-05-23T13:09:23Z,MERGED,True,3,11,1,https://github.com/jpszczolowski,Remove wrong interlock of interrupt thread's spinlock,8,[],https://github.com/cahirwpz/mimiker/pull/550,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/550,"Let's look at the sys/interrupt.c file. Currently there are two places where the code acquires a spinlock (delegated_lock) and then may switch its context. Such behavior is wrong since inside mips/switch.S we only care about an interlock for td_spin. So after the context switch, delegated_lock is still owned (i.e. delegated_lock->s_owner is not NULL)  and other threads/interrupt contexts will fail while trying to acquire it.
Right now, even without this PR, everything seems to work fine because the interrupt thread is unused. But tests start to fail if we move UART (drv/ns16550.c) handling from the bottom half to the interrupt thread.
I've removed delegated_lock from the code. In function intr_event_run_handlers interrupts are already disabled, in function intr_thread I've disabled interrupts instead of acquiring the spinlock.","Let's look at the sys/interrupt.c file. Currently there are two places where the code acquires a spinlock (delegated_lock) and then may switch its context. Such behavior is wrong since inside mips/switch.S we only care about an interlock for td_spin. So after the context switch, delegated_lock is still owned (i.e. delegated_lock->s_owner is not NULL)  and other threads/interrupt contexts will fail while trying to acquire it.
Right now, even without this PR, everything seems to work fine because the interrupt thread is unused. But tests start to fail if we move UART (drv/ns16550.c) handling from the bottom half to the interrupt thread.
I've removed delegated_lock from the code. In function intr_event_run_handlers interrupts are already disabled, in function intr_thread I've disabled interrupts instead of acquiring the spinlock.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,550,2019-04-16T09:28:22Z,2019-05-23T05:59:45Z,2019-05-23T13:09:23Z,MERGED,True,3,11,1,https://github.com/jpszczolowski,Remove wrong interlock of interrupt thread's spinlock,8,[],https://github.com/cahirwpz/mimiker/pull/550,https://github.com/jpszczolowski,2,https://github.com/cahirwpz/mimiker/pull/550#issuecomment-494968697,"Let's look at the sys/interrupt.c file. Currently there are two places where the code acquires a spinlock (delegated_lock) and then may switch its context. Such behavior is wrong since inside mips/switch.S we only care about an interlock for td_spin. So after the context switch, delegated_lock is still owned (i.e. delegated_lock->s_owner is not NULL)  and other threads/interrupt contexts will fail while trying to acquire it.
Right now, even without this PR, everything seems to work fine because the interrupt thread is unused. But tests start to fail if we move UART (drv/ns16550.c) handling from the bottom half to the interrupt thread.
I've removed delegated_lock from the code. In function intr_event_run_handlers interrupts are already disabled, in function intr_thread I've disabled interrupts instead of acquiring the spinlock.",@cahirwpz done,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,552,2019-08-30T15:43:38Z,2019-08-30T15:53:55Z,2019-08-30T15:53:59Z,MERGED,True,43874,1241,512,https://github.com/cahirwpz,Replace newlib with NetBSD libc,25,[],https://github.com/cahirwpz/mimiker/pull/552,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/552,This PR is massive and completely beyond any chances of being reviewed. However such change could not be split in smaller reviewable pieces.,This PR is massive and completely beyond any chances of being reviewed. However such change could not be split in smaller reviewable pieces.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,555,2019-10-06T17:43:28Z,2019-10-09T11:46:27Z,2019-10-10T10:19:05Z,MERGED,True,157,4,15,https://github.com/jpszczolowski,Implement simple sigaltstack & sigprocmask & setcontext,8,[],https://github.com/cahirwpz/mimiker/pull/555,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/555,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,556,2019-10-08T14:37:13Z,2019-10-14T13:50:15Z,2019-10-14T13:58:27Z,MERGED,True,17,5,4,https://github.com/mzr,gdb nextuser command,5,[],https://github.com/cahirwpz/mimiker/pull/556,https://github.com/mzr,1,https://github.com/cahirwpz/mimiker/pull/556,"Continues execution and breaks on first user-mode command after exiting kernel-mode.
Related to #533 .","Continues execution and breaks on first user-mode command after exiting kernel-mode.
Related to #533 .",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,557,2019-10-09T07:41:41Z,2019-10-09T10:53:45Z,2019-10-10T10:18:51Z,MERGED,True,21,17,3,https://github.com/jpszczolowski,Fix pgrp/proc locking issue ,1,[],https://github.com/cahirwpz/mimiker/pull/557,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/557,This is @cahirwpz 's patch from #general Slack channel.,This is @cahirwpz 's patch from #general Slack channel.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,558,2019-10-13T15:51:05Z,2019-11-29T06:35:48Z,2019-11-29T21:45:00Z,MERGED,True,6,9,2,https://github.com/jpszczolowski,Simplify setcontext syscall by rearranging regs in exc_frame_t,7,[],https://github.com/cahirwpz/mimiker/pull/558,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/558,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,558,2019-10-13T15:51:05Z,2019-11-29T06:35:48Z,2019-11-29T21:45:00Z,MERGED,True,6,9,2,https://github.com/jpszczolowski,Simplify setcontext syscall by rearranging regs in exc_frame_t,7,[],https://github.com/cahirwpz/mimiker/pull/558,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/558#issuecomment-541878710,,What about this comment https://github.com/cahirwpz/mimiker/blob/master/include/mips/mcontext.h#L73 ?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,558,2019-10-13T15:51:05Z,2019-11-29T06:35:48Z,2019-11-29T21:45:00Z,MERGED,True,6,9,2,https://github.com/jpszczolowski,Simplify setcontext syscall by rearranging regs in exc_frame_t,7,[],https://github.com/cahirwpz/mimiker/pull/558,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/558#issuecomment-541885312,,"I don't like the idea of storing registers $k0, $k1 and $zero in mcontext_t – this is pointless. On the other hand it'd be nice to somehow unify exc_frame_t and mcontext_t.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,558,2019-10-13T15:51:05Z,2019-11-29T06:35:48Z,2019-11-29T21:45:00Z,MERGED,True,6,9,2,https://github.com/jpszczolowski,Simplify setcontext syscall by rearranging regs in exc_frame_t,7,[],https://github.com/cahirwpz/mimiker/pull/558,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/558#issuecomment-559676274,,"I'll merge it as is, however in future we should give all context structures another look.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,559,2019-10-13T21:31:02Z,2019-10-14T19:09:48Z,2019-10-15T21:11:34Z,MERGED,True,2,11,3,https://github.com/jpszczolowski,Use proper ENOTSUP value & fix VOP_CALL,3,[],https://github.com/cahirwpz/mimiker/pull/559,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/559,"Change ENOTSUP from 134 (newlib) to 86 (NetBSD)
VOP_CALL now returns ENOTSUP instead of -ENOTSUP","Change ENOTSUP from 134 (newlib) to 86 (NetBSD)
VOP_CALL now returns ENOTSUP instead of -ENOTSUP",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,560,2019-10-13T21:42:51Z,2019-10-14T19:28:02Z,2019-10-15T21:11:32Z,MERGED,True,3,3,1,https://github.com/jpszczolowski,Change VOP_READDIR so that it returns 0 on success,4,[],https://github.com/cahirwpz/mimiker/pull/560,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/560,"This PR:

changes successful return value of readdir_generic() from uio->uio_offset - offset to 0.

Why:

VOP_READDIR should return 0 or error code (https://netbsd.gw.com/cgi-bin/man-cgi?VOP_LOOKUP+9+NetBSD-6.0+i386), and our VOP_READDIR is implemented by calling readdir_generic().","This PR:

changes successful return value of readdir_generic() from uio->uio_offset - offset to 0.

Why:

VOP_READDIR should return 0 or error code (https://netbsd.gw.com/cgi-bin/man-cgi?VOP_LOOKUP+9+NetBSD-6.0+i386), and our VOP_READDIR is implemented by calling readdir_generic().",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,561,2019-10-15T20:42:46Z,2019-10-16T08:07:43Z,2019-10-16T08:17:33Z,MERGED,True,1,0,1,https://github.com/jpszczolowski,Fix return value of sys_getdirentries,1,[],https://github.com/cahirwpz/mimiker/pull/561,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/561,"This PR fixes ls application.

Currently sys_getdirentires() returns 0 on success.
According to https://netbsd.gw.com/cgi-bin/man-cgi?getdirentries+3+NetBSD-current, the return value should be:

If successful, the number of bytes actually transferred is returned.","This PR fixes ls application.

Currently sys_getdirentires() returns 0 on success.
According to https://netbsd.gw.com/cgi-bin/man-cgi?getdirentries+3+NetBSD-current, the return value should be:

If successful, the number of bytes actually transferred is returned.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,562,2019-10-16T12:26:34Z,2019-10-16T20:38:54Z,2019-10-16T20:38:54Z,MERGED,True,0,130,9,https://github.com/mzr,Remove docker development environment,3,[],https://github.com/cahirwpz/mimiker/pull/562,https://github.com/mzr,1,https://github.com/cahirwpz/mimiker/pull/562,Docker development environment is no longer supported.,Docker development environment is no longer supported.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,562,2019-10-16T12:26:34Z,2019-10-16T20:38:54Z,2019-10-16T20:38:54Z,MERGED,True,0,130,9,https://github.com/mzr,Remove docker development environment,3,[],https://github.com/cahirwpz/mimiker/pull/562,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/562#issuecomment-542881121,Docker development environment is no longer supported.,It was a distraction from the very beginning. Good riddance!,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,566,2019-10-20T20:15:00Z,2019-10-24T09:20:25Z,2019-10-24T21:27:36Z,MERGED,True,58,1,6,https://github.com/jpszczolowski,Add sigaction tests that i.a. check returning from signal handler,6,[],https://github.com/cahirwpz/mimiker/pull/566,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/566,"This PR adds two sigaction tests:

sigaction_with_setjmp() -- which checks whether we can jump out of a signal handler using setjmp()/longjmp(),
sigaction_handler_returns() -- which checks whether returning from a signal handler works,

Currently the aforementioned tests fail since sa->sa_restorer is always NULL when we call sigaction. That is also the reason why currently /bin/ksh keeps getting SIGSEGV.","This PR adds two sigaction tests:

sigaction_with_setjmp() -- which checks whether we can jump out of a signal handler using setjmp()/longjmp(),
sigaction_handler_returns() -- which checks whether returning from a signal handler works,

Currently the aforementioned tests fail since sa->sa_restorer is always NULL when we call sigaction. That is also the reason why currently /bin/ksh keeps getting SIGSEGV.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,568,2019-10-23T11:07:36Z,2019-10-24T09:04:21Z,2019-10-24T09:04:51Z,MERGED,True,48,22,7,https://github.com/jpszczolowski,Implement simple sigcode (signal trampoline),9,[],https://github.com/cahirwpz/mimiker/pull/568,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/568,TODO: description,TODO: description,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,570,2019-10-28T14:48:21Z,2019-10-28T16:36:49Z,2019-10-28T16:36:49Z,CLOSED,False,0,0,0,https://github.com/xThaid,tmpfs,0,[],https://github.com/cahirwpz/mimiker/pull/570,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/570,Add some basic functionalities of tmpfs.,Add some basic functionalities of tmpfs.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,571,2019-10-28T16:45:34Z,2019-11-01T11:44:21Z,2019-11-01T11:44:21Z,CLOSED,False,385,2,8,https://github.com/xThaid,Tmpfs,4,[],https://github.com/cahirwpz/mimiker/pull/571,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/571,Add some basic functionalities of tmpfs.,Add some basic functionalities of tmpfs.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,571,2019-10-28T16:45:34Z,2019-11-01T11:44:21Z,2019-11-01T11:44:21Z,CLOSED,False,385,2,8,https://github.com/xThaid,Tmpfs,4,[],https://github.com/cahirwpz/mimiker/pull/571,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/571#issuecomment-548708165,Add some basic functionalities of tmpfs.,"Please split the PR into three smaller ones:

extend vnodeops with VOP_RECLAIM operation
add skeleton for tmpfs without any vnodeops or vfsops
implement several functions in the skeleton",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,572,2019-11-01T11:42:27Z,2019-11-01T15:06:47Z,2019-11-01T15:16:41Z,MERGED,True,12,2,2,https://github.com/xThaid,Add VOP_RECLAIM operation to VFS and add empty vnode constructor.,2,[],https://github.com/cahirwpz/mimiker/pull/572,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/572,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,572,2019-11-01T11:42:27Z,2019-11-01T15:06:47Z,2019-11-01T15:16:41Z,MERGED,True,12,2,2,https://github.com/xThaid,Add VOP_RECLAIM operation to VFS and add empty vnode constructor.,2,[],https://github.com/cahirwpz/mimiker/pull/572,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/572#issuecomment-548822602,,LGTM.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,573,2019-11-01T11:43:03Z,2019-11-01T15:34:58Z,2019-11-19T09:00:50Z,MERGED,True,141,0,4,https://github.com/xThaid,Add tmpfs.,4,[],https://github.com/cahirwpz/mimiker/pull/573,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/573,"Create basic structure of tmpfs.
Add tmp directory to the sysroot.","Create basic structure of tmpfs.
Add tmp directory to the sysroot.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,574,2019-11-01T21:29:14Z,2019-11-03T16:07:38Z,2019-11-19T09:00:47Z,MERGED,True,184,15,1,https://github.com/xThaid,Implement basic tmpfs VOP functions.,7,[],https://github.com/cahirwpz/mimiker/pull/574,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/574,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,575,2019-11-02T15:10:35Z,2019-11-04T11:25:57Z,2019-11-04T11:25:57Z,MERGED,True,77,52,6,https://github.com/mzr,Glue kernel-space backtrace with user-space backtrace.,17,[],https://github.com/cahirwpz/mimiker/pull/575,https://github.com/mzr,1,https://github.com/cahirwpz/mimiker/pull/575,"Providing unwind debug info using .cfi_* directives.
https://sourceware.org/binutils/docs/as/CFI-directives.html#CFI-directives
#553","Providing unwind debug info using .cfi_* directives.
https://sourceware.org/binutils/docs/as/CFI-directives.html#CFI-directives
#553",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,576,2019-11-03T00:46:24Z,2019-11-04T12:15:10Z,2019-11-04T12:15:57Z,MERGED,True,18,13,2,https://github.com/jpszczolowski,Reading from pipe should return only what's available,8,[],https://github.com/cahirwpz/mimiker/pull/576,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/576,"From Advanced Programming in the UNIX Environment (Third Edition), section 3.7:

Data is read from an open file with the read function. [...] There are several cases in which the number of bytes actually read is less than the amount requested:

[...]
When reading from a pipe or FIFO. If the pipe contains fewer bytes than requested, read will return only what is available.


In our case /bin/ksh is reading from pipe using nbytes set to 65535 (in order to read everything). Right now Mimiker blocks this read until 65535 bytes are available.","From Advanced Programming in the UNIX Environment (Third Edition), section 3.7:

Data is read from an open file with the read function. [...] There are several cases in which the number of bytes actually read is less than the amount requested:

[...]
When reading from a pipe or FIFO. If the pipe contains fewer bytes than requested, read will return only what is available.


In our case /bin/ksh is reading from pipe using nbytes set to 65535 (in order to read everything). Right now Mimiker blocks this read until 65535 bytes are available.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,576,2019-11-03T00:46:24Z,2019-11-04T12:15:10Z,2019-11-04T12:15:57Z,MERGED,True,18,13,2,https://github.com/jpszczolowski,Reading from pipe should return only what's available,8,[],https://github.com/cahirwpz/mimiker/pull/576,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/576#issuecomment-549112817,"From Advanced Programming in the UNIX Environment (Third Edition), section 3.7:

Data is read from an open file with the read function. [...] There are several cases in which the number of bytes actually read is less than the amount requested:

[...]
When reading from a pipe or FIFO. If the pipe contains fewer bytes than requested, read will return only what is available.


In our case /bin/ksh is reading from pipe using nbytes set to 65535 (in order to read everything). Right now Mimiker blocks this read until 65535 bytes are available.","Right! read(...) on pipe is allowed to return short count. But when there's nothing to read it must wait, unless the other end of pipe was closed. Returning 0 from read(...) always means EOF.
You removed:
      /* the buffer is empty so wait for some data to be produced */
      cv_wait(&producer->nonempty, &producer->mtx);

... which was a bad idea, and that forced you to busy wait in assert_read_equal_blocking.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,577,2019-11-03T00:56:37Z,2019-11-03T14:20:29Z,2019-11-03T14:40:11Z,MERGED,True,80,38,15,https://github.com/jpszczolowski,Implement fcntl syscall (only F_DUPFD command),9,[],https://github.com/cahirwpz/mimiker/pull/577,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/577,"fcntl syscall is used (and needed) by /bin/ksh while using pipes (e.g. calling cat /bin/ls | wc), so that's another step to have a working shell.","fcntl syscall is used (and needed) by /bin/ksh while using pipes (e.g. calling cat /bin/ls | wc), so that's another step to have a working shell.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,578,2019-11-04T16:10:24Z,2019-11-05T06:20:25Z,2019-11-05T09:38:33Z,MERGED,True,1,0,1,https://github.com/mzr,Added *.out files autogenerated by ksh to .gitignore,2,[],https://github.com/cahirwpz/mimiker/pull/578,https://github.com/mzr,1,https://github.com/cahirwpz/mimiker/pull/578,,,True,{'HOORAY': ['https://github.com/mzr']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,579,2019-11-04T18:41:35Z,2019-11-05T06:15:56Z,2019-11-05T09:38:13Z,MERGED,True,2,1,1,https://github.com/mzr,jmp to __sc_error inside SYSCALL is now local,2,[],https://github.com/cahirwpz/mimiker/pull/579,https://github.com/mzr,1,https://github.com/cahirwpz/mimiker/pull/579,"bnez is I-type instruction so it can't jump too far.
That caused failure in build 9010 of pull/578 (#578) on CircleCI.
Now it jumps to local label, and then j instruction (J-type) is used to jump further.","bnez is I-type instruction so it can't jump too far.
That caused failure in build 9010 of pull/578 (#578) on CircleCI.
Now it jumps to local label, and then j instruction (J-type) is used to jump further.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,579,2019-11-04T18:41:35Z,2019-11-05T06:15:56Z,2019-11-05T09:38:13Z,MERGED,True,2,1,1,https://github.com/mzr,jmp to __sc_error inside SYSCALL is now local,2,[],https://github.com/cahirwpz/mimiker/pull/579,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/579#issuecomment-549677935,"bnez is I-type instruction so it can't jump too far.
That caused failure in build 9010 of pull/578 (#578) on CircleCI.
Now it jumps to local label, and then j instruction (J-type) is used to jump further.",Please note that you need to use .set noreorder to control instructions inserted into delay slots. Please always check with objdump if generated assembly is matches your expectations. I could see double nop instruction scattered around.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,581,2019-11-07T16:31:33Z,2019-11-07T17:38:21Z,2019-11-25T16:44:10Z,MERGED,True,1,1,1,https://github.com/mzr,Fixed python gdb $process() function,1,[],https://github.com/cahirwpz/mimiker/pull/581,https://github.com/mzr,1,https://github.com/cahirwpz/mimiker/pull/581,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,582,2019-11-07T21:41:31Z,2019-11-13T11:45:37Z,2019-11-13T11:45:37Z,MERGED,True,47,33,4,https://github.com/pj1031999,Pass arguments to userspace programs.,10,[],https://github.com/cahirwpz/mimiker/pull/582,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/582,"Add option to pass arguments to init program using launch. Everything after --
will be passed as arguments.
Example command:
./launch -d init=/bin/ls -- / /usr","Add option to pass arguments to init program using launch. Everything after --
will be passed as arguments.
Example command:
./launch -d init=/bin/ls -- / /usr",True,{'HEART': ['https://github.com/mzr']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,583,2019-11-10T13:53:10Z,2019-11-18T21:20:19Z,2019-11-18T22:37:44Z,MERGED,True,432,10,7,https://github.com/jpszczolowski,Implement vmem subsystem (create & add & alloc calls),18,[],https://github.com/cahirwpz/mimiker/pull/583,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/583,"This PR is based on NetBSD's vmem implementation, which is available here: https://nxr.netbsd.org/xref/src/sys/kern/subr_vmem.c
What is vmem? You can find more information here:

The vmem(9) API is a general address space allocator.  It is used internally by kmem(9), pool(9), vm(9), and other kernel subsystems and device drivers to allocate regions of various kinds of address spaces.

Source: MEMORYALLOCATORS(9), NetBSD Kernel Developer's Manual, https://netbsd.gw.com/cgi-bin/man-cgi?memoryallocators+9+NetBSD-current

In this section we describe a new general−purpose resource allocator, vmem, which provides guaranteed constant−time performance with low fragmentation. Vmem appears to be the first resource allocator that can do this.

Source: Magazines and Vmem: Extending the Slab Allocator to Many CPUs and Arbitrary Resources, J. Bonwick et al. (2001), https://www.usenix.org/legacy/event/usenix01/full_papers/bonwick/bonwick.pdf","This PR is based on NetBSD's vmem implementation, which is available here: https://nxr.netbsd.org/xref/src/sys/kern/subr_vmem.c
What is vmem? You can find more information here:

The vmem(9) API is a general address space allocator.  It is used internally by kmem(9), pool(9), vm(9), and other kernel subsystems and device drivers to allocate regions of various kinds of address spaces.

Source: MEMORYALLOCATORS(9), NetBSD Kernel Developer's Manual, https://netbsd.gw.com/cgi-bin/man-cgi?memoryallocators+9+NetBSD-current

In this section we describe a new general−purpose resource allocator, vmem, which provides guaranteed constant−time performance with low fragmentation. Vmem appears to be the first resource allocator that can do this.

Source: Magazines and Vmem: Extending the Slab Allocator to Many CPUs and Arbitrary Resources, J. Bonwick et al. (2001), https://www.usenix.org/legacy/event/usenix01/full_papers/bonwick/bonwick.pdf",True,"{'CONFUSED': ['https://github.com/mzr'], 'LAUGH': ['https://github.com/jpszczolowski'], 'HEART': ['https://github.com/jpszczolowski']}"
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,583,2019-11-10T13:53:10Z,2019-11-18T21:20:19Z,2019-11-18T22:37:44Z,MERGED,True,432,10,7,https://github.com/jpszczolowski,Implement vmem subsystem (create & add & alloc calls),18,[],https://github.com/cahirwpz/mimiker/pull/583,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/583#issuecomment-554955632,"This PR is based on NetBSD's vmem implementation, which is available here: https://nxr.netbsd.org/xref/src/sys/kern/subr_vmem.c
What is vmem? You can find more information here:

The vmem(9) API is a general address space allocator.  It is used internally by kmem(9), pool(9), vm(9), and other kernel subsystems and device drivers to allocate regions of various kinds of address spaces.

Source: MEMORYALLOCATORS(9), NetBSD Kernel Developer's Manual, https://netbsd.gw.com/cgi-bin/man-cgi?memoryallocators+9+NetBSD-current

In this section we describe a new general−purpose resource allocator, vmem, which provides guaranteed constant−time performance with low fragmentation. Vmem appears to be the first resource allocator that can do this.

Source: Magazines and Vmem: Extending the Slab Allocator to Many CPUs and Arbitrary Resources, J. Bonwick et al. (2001), https://www.usenix.org/legacy/event/usenix01/full_papers/bonwick/bonwick.pdf",Please find extra review for this code.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,584,2019-11-13T15:34:48Z,2019-11-14T07:08:16Z,2019-11-14T09:44:21Z,MERGED,True,1,1,1,https://github.com/jpszczolowski,Fix log2 function in mimiker.h,3,[],https://github.com/cahirwpz/mimiker/pull/584,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/584,"Currently our log2(x) implementation works fine iff x is a power of 2. This PR fixes it.
You can find a simple comparison of old-log vs new-log here: https://ideone.com/BNRNFU","Currently our log2(x) implementation works fine iff x is a power of 2. This PR fixes it.
You can find a simple comparison of old-log vs new-log here: https://ideone.com/BNRNFU",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,585,2019-11-13T15:58:54Z,2019-11-18T21:15:17Z,2019-11-19T09:02:34Z,MERGED,True,142,28,2,https://github.com/xThaid,Extend vfs_lookup to return parent vnode.,6,[],https://github.com/cahirwpz/mimiker/pull/585,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/585,"vfs_lookup interface has changed. Now it accepts nameiop_t, which denotes lookup operation and returns nameidata_t, which encapsulates results: both vnode and its parent. When vfs_lookup is called with NAMEI_CREATE operation, returned parent vnode is held and locked. Otherwise parent is released.","vfs_lookup interface has changed. Now it accepts nameiop_t, which denotes lookup operation and returns nameidata_t, which encapsulates results: both vnode and its parent. When vfs_lookup is called with NAMEI_CREATE operation, returned parent vnode is held and locked. Otherwise parent is released.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,586,2019-11-13T22:55:34Z,2019-11-18T10:30:38Z,2019-11-18T15:24:08Z,MERGED,True,24,16,2,https://github.com/JakubSzczerbinski,Improvements and fixes to initrd filesystem,5,[],https://github.com/cahirwpz/mimiker/pull/586,https://github.com/JakubSzczerbinski,1,https://github.com/cahirwpz/mimiker/pull/586,"Support for lookup of parent node
Added ino_t to vattr
Saving vnode refrence in cpio root node","Support for lookup of parent node
Added ino_t to vattr
Saving vnode refrence in cpio root node",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,587,2019-11-14T15:18:14Z,2019-11-18T10:06:38Z,2019-11-18T10:06:39Z,CLOSED,False,4,2,1,https://github.com/mzr,let gdb read kernel memory,1,[],https://github.com/cahirwpz/mimiker/pull/587,https://github.com/mzr,1,https://github.com/cahirwpz/mimiker/pull/587,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,587,2019-11-14T15:18:14Z,2019-11-18T10:06:38Z,2019-11-18T10:06:39Z,CLOSED,False,4,2,1,https://github.com/mzr,let gdb read kernel memory,1,[],https://github.com/cahirwpz/mimiker/pull/587,https://github.com/mzr,2,https://github.com/cahirwpz/mimiker/pull/587#issuecomment-554002990,,Breaks #575,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,587,2019-11-14T15:18:14Z,2019-11-18T10:06:38Z,2019-11-18T10:06:39Z,CLOSED,False,4,2,1,https://github.com/mzr,let gdb read kernel memory,1,[],https://github.com/cahirwpz/mimiker/pull/587,https://github.com/mzr,3,https://github.com/cahirwpz/mimiker/pull/587#issuecomment-554945711,,#590 Solves the same problem without breaking user-backtrace.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,589,2019-11-17T18:22:36Z,2019-11-18T09:42:59Z,2019-11-18T09:51:11Z,MERGED,True,10,1,3,https://github.com/mzr,Separate debug symbols in sysroot,1,[],https://github.com/cahirwpz/mimiker/pull/589,https://github.com/mzr,1,https://github.com/cahirwpz/mimiker/pull/589,"Files with just debug symbols for user-space executables are now placed in sysroot/bin - the same path as corresponding executable. They are not packed into initrd.
It makes mapping from mimikerOS executables paths to hostOS symbol files trivial.","Files with just debug symbols for user-space executables are now placed in sysroot/bin - the same path as corresponding executable. They are not packed into initrd.
It makes mapping from mimikerOS executables paths to hostOS symbol files trivial.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,590,2019-11-18T10:06:03Z,2019-11-18T12:50:53Z,2019-11-18T12:50:53Z,CLOSED,False,37,3,1,https://github.com/mzr,Read kernel memory while on bp in user-space.,2,[],https://github.com/cahirwpz/mimiker/pull/590,https://github.com/mzr,1,https://github.com/cahirwpz/mimiker/pull/590,This patch lets gdb read kernel memory while on bp in user-space. User processes still are not allowed to read kernel memory. This code looks nasty but this is the only working solution among few others.,This patch lets gdb read kernel memory while on bp in user-space. User processes still are not allowed to read kernel memory. This code looks nasty but this is the only working solution among few others.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,590,2019-11-18T10:06:03Z,2019-11-18T12:50:53Z,2019-11-18T12:50:53Z,CLOSED,False,37,3,1,https://github.com/mzr,Read kernel memory while on bp in user-space.,2,[],https://github.com/cahirwpz/mimiker/pull/590,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/590#issuecomment-554949868,This patch lets gdb read kernel memory while on bp in user-space. User processes still are not allowed to read kernel memory. This code looks nasty but this is the only working solution among few others.,I merged my version of patch into master. If you find the patch to be buggy please rewrite it. Otherwise close the PR.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,591,2019-11-18T12:47:19Z,2019-11-18T20:34:11Z,2019-11-18T20:44:23Z,MERGED,True,25,6,3,https://github.com/mzr,Load symbols automatically on startup,6,[],https://github.com/cahirwpz/mimiker/pull/591,https://github.com/mzr,1,https://github.com/cahirwpz/mimiker/pull/591,"Editing .gdbinit is a pain. Now it is not.
Related to #588","Editing .gdbinit is a pain. Now it is not.
Related to #588",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,592,2019-11-18T14:57:10Z,2019-11-18T21:17:08Z,2019-11-18T21:17:09Z,MERGED,True,54,50,10,https://github.com/j-piecuch,Successfully compile the kernel with Clang,10,[],https://github.com/cahirwpz/mimiker/pull/592,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/592,"The entire kernel can now be compiled with Clang by setting the CLANG make variable to 1. We still use the GNU linker to link the kernel.
In order to build the whole system with Clang, either some minor adjustments need to be made in a couple of places (due to Clang being a bit more strict with its warnings), or we can turn some warnings off. You can check out a sample warning by running make CLANG=1 in project root.","The entire kernel can now be compiled with Clang by setting the CLANG make variable to 1. We still use the GNU linker to link the kernel.
In order to build the whole system with Clang, either some minor adjustments need to be made in a couple of places (due to Clang being a bit more strict with its warnings), or we can turn some warnings off. You can check out a sample warning by running make CLANG=1 in project root.",True,"{'THUMBS_UP': ['https://github.com/mzr'], 'HOORAY': ['https://github.com/jpszczolowski']}"
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,593,2019-11-19T00:12:21Z,2019-11-19T09:19:56Z,2019-11-19T09:20:42Z,MERGED,True,81,103,2,https://github.com/jpszczolowski,vmem: comments & simplify vmem_alloc & little refactor,7,[],https://github.com/cahirwpz/mimiker/pull/593,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/593,"Added comments in vmem.h and to structures in vmem.c
Changed vmem_assert_locked() function to VMEM_ASSERT_LOCKED() macro
Make use of align() and is_aligned() from include/sys/mimiker.h
Change vm_quantum_mask field to vm_quantum, as the latter is used more frequently (note that mask = quantum - 1)
Delete vmem_align_and_fit() call from vmem_alloc() (no need to align as all existing segments are already aligned to vm_quantum, no need to check size as it's INSTANTFIT strategy)
Delete ""btnew_prev"" case inside vmem_alloc(), as it would never happen
Check that segments' start addresses are aligned to vm_quantum in vmem_check_sanity()
Check that segments' sizes are at least equal vm_quantum in vmem_check_sanity()","Added comments in vmem.h and to structures in vmem.c
Changed vmem_assert_locked() function to VMEM_ASSERT_LOCKED() macro
Make use of align() and is_aligned() from include/sys/mimiker.h
Change vm_quantum_mask field to vm_quantum, as the latter is used more frequently (note that mask = quantum - 1)
Delete vmem_align_and_fit() call from vmem_alloc() (no need to align as all existing segments are already aligned to vm_quantum, no need to check size as it's INSTANTFIT strategy)
Delete ""btnew_prev"" case inside vmem_alloc(), as it would never happen
Check that segments' start addresses are aligned to vm_quantum in vmem_check_sanity()
Check that segments' sizes are at least equal vm_quantum in vmem_check_sanity()",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,595,2019-11-20T16:25:41Z,2019-11-20T17:12:48Z,2019-11-20T17:12:49Z,MERGED,True,2,0,1,https://github.com/mzr,kfree should do nothing when NULL is passed,1,['bug'],https://github.com/cahirwpz/mimiker/pull/595,https://github.com/mzr,1,https://github.com/cahirwpz/mimiker/pull/595,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,596,2019-11-20T16:44:15Z,2019-11-21T11:41:15Z,2019-11-23T11:21:16Z,MERGED,True,111,78,6,https://github.com/xThaid,Remove memory allocation for a lookup path in vfs_nameresolve,5,[],https://github.com/cahirwpz/mimiker/pull/596,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/596,"Extra copy of path name in vfs_nameresolve was redundant, so I changed it.  Path components name that are passed to VOP_LOOKUP aren't now NULL-terminated.","Extra copy of path name in vfs_nameresolve was redundant, so I changed it.  Path components name that are passed to VOP_LOOKUP aren't now NULL-terminated.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,597,2019-11-21T20:41:44Z,2019-11-22T10:04:27Z,2019-11-22T10:04:27Z,MERGED,True,62,32,10,https://github.com/j-piecuch,Compile everything with Clang,10,[],https://github.com/cahirwpz/mimiker/pull/597,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/597,Now it's possible to run make CLANG=1. Tested with Clang 9.0. All tests pass.,Now it's possible to run make CLANG=1. Tested with Clang 9.0. All tests pass.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,598,2019-11-22T11:06:07Z,2019-11-26T07:28:53Z,2019-11-26T07:28:53Z,MERGED,True,60,3,5,https://github.com/mzr,Dynamically swappng symbols,28,[],https://github.com/cahirwpz/mimiker/pull/598,https://github.com/mzr,1,https://github.com/cahirwpz/mimiker/pull/598,"As a proper kernel, we are able to run multiple user-space processes. Their binaries are loaded at the same address - 0x400000. Gdb was not aware of which process's binary was loaded at that address, so it wasn't swapping symbols. That resulted in faulty and misleading user-space backtraces.
Now symbols are swapped automatically.","As a proper kernel, we are able to run multiple user-space processes. Their binaries are loaded at the same address - 0x400000. Gdb was not aware of which process's binary was loaded at that address, so it wasn't swapping symbols. That resulted in faulty and misleading user-space backtraces.
Now symbols are swapped automatically.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,599,2019-11-22T15:43:35Z,2019-11-28T15:59:54Z,2019-11-28T15:59:55Z,MERGED,True,31,17,3,https://github.com/j-piecuch,Add Clang build & tests to CircleCI.,5,[],https://github.com/cahirwpz/mimiker/pull/599,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/599,The build_clang job is failing due to the docker container not having Clang installed. It is up to @cahirwpz to update the image used in config.yml.,The build_clang job is failing due to the docker container not having Clang installed. It is up to @cahirwpz to update the image used in config.yml.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,600,2019-11-22T22:30:18Z,2019-11-26T07:30:56Z,2019-11-27T08:55:52Z,MERGED,True,23,32,2,https://github.com/jpszczolowski,vmem: change instant-fit to best-fit allocation strategy,3,[],https://github.com/cahirwpz/mimiker/pull/600,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/600,"Currently in vmem we support only instant-fit allocation strategy. Why is that less than ideal? Suppose we want to allocate a new block of size N. Then instant-fit can fail to find free segments of size M, if log2(N) is equal to log2(M).
I've changed instant-fit to best-fit, which is slower in general, but always succeeds (if there exists any block of size M, where M >= N). I've also changed our test case a little bit -- the current test would fail for instant-fit strategy.
Note: in NetBSD both strategies are implemented. If instant-fit cannot find any block, the strategy is switched to best-fit.","Currently in vmem we support only instant-fit allocation strategy. Why is that less than ideal? Suppose we want to allocate a new block of size N. Then instant-fit can fail to find free segments of size M, if log2(N) is equal to log2(M).
I've changed instant-fit to best-fit, which is slower in general, but always succeeds (if there exists any block of size M, where M >= N). I've also changed our test case a little bit -- the current test would fail for instant-fit strategy.
Note: in NetBSD both strategies are implemented. If instant-fit cannot find any block, the strategy is switched to best-fit.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,601,2019-11-23T14:21:49Z,2019-11-27T21:12:13Z,2019-12-13T17:05:56Z,MERGED,True,65,1,5,https://github.com/xThaid,Implement mkdir syscall,3,[],https://github.com/cahirwpz/mimiker/pull/601,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/601,Implemented mkdir syscall.,Implemented mkdir syscall.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,601,2019-11-23T14:21:49Z,2019-11-27T21:12:13Z,2019-12-13T17:05:56Z,MERGED,True,65,1,5,https://github.com/xThaid,Implement mkdir syscall,3,[],https://github.com/cahirwpz/mimiker/pull/601,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/601#issuecomment-559044537,Implemented mkdir syscall.,One more thing... please add a useful description for the PR.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,602,2019-11-25T17:01:33Z,2019-11-27T11:48:36Z,2019-11-27T11:48:53Z,MERGED,True,211,75,4,https://github.com/jpszczolowski,vmem: implement free() & destroy() calls,11,[],https://github.com/cahirwpz/mimiker/pull/602,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/602,"Parameters base and size have been removed from vmem_create() call, so that fresh vmem instance has no initial span, and one must call vmem_add() explicitly
Implemented vmem_free()
Implemented vmem_destroy() with extensive sanity check -- the kernel check that the destroyed vmem instance is empty and its memory is not corrupted
Updated sys/tests/vmem.c test, so that it uses vmem_free() and vmem_destroy()","Parameters base and size have been removed from vmem_create() call, so that fresh vmem instance has no initial span, and one must call vmem_add() explicitly
Implemented vmem_free()
Implemented vmem_destroy() with extensive sanity check -- the kernel check that the destroyed vmem instance is empty and its memory is not corrupted
Updated sys/tests/vmem.c test, so that it uses vmem_free() and vmem_destroy()",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,602,2019-11-25T17:01:33Z,2019-11-27T11:48:36Z,2019-11-27T11:48:53Z,MERGED,True,211,75,4,https://github.com/jpszczolowski,vmem: implement free() & destroy() calls,11,[],https://github.com/cahirwpz/mimiker/pull/602,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/602#issuecomment-558499769,"Parameters base and size have been removed from vmem_create() call, so that fresh vmem instance has no initial span, and one must call vmem_add() explicitly
Implemented vmem_free()
Implemented vmem_destroy() with extensive sanity check -- the kernel check that the destroyed vmem instance is empty and its memory is not corrupted
Updated sys/tests/vmem.c test, so that it uses vmem_free() and vmem_destroy()",Please resolve conflicts and add PR description.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,603,2019-11-25T23:06:13Z,2020-01-07T22:18:51Z,2020-01-07T22:18:52Z,MERGED,True,252,8,17,https://github.com/JakubSzczerbinski,"Implementation of getcwd, chdir syscalls",36,[],https://github.com/cahirwpz/mimiker/pull/603,https://github.com/JakubSzczerbinski,1,https://github.com/cahirwpz/mimiker/pull/603,"The working directory of a process is a directory of a hierarchical file system, if any, dynamically associated with each process.
When the process refers to a file using a simple file name or relative path (as opposed to a file designated by a full path from a root directory), the reference is interpreted relative to the working directory of the process.

Implementation of getcwd and chdir syscalls based on NetBSD

Stores working directory as vnode in proc structure,
Sets working directory to root during exec,
Copies working directory during fork,
Chdir: sets working directory as vnode retrieved by lookup on its argument,
Getcwd: returns path from root to working directory vnode,
Assumes there is a one global filesystem root (doesn't support chroot),
Only contains setting and getting working directory. (Does not contain other related changes, for example lookup of relative paths)

NetBSD man pages: chdir, getcwd","The working directory of a process is a directory of a hierarchical file system, if any, dynamically associated with each process.
When the process refers to a file using a simple file name or relative path (as opposed to a file designated by a full path from a root directory), the reference is interpreted relative to the working directory of the process.

Implementation of getcwd and chdir syscalls based on NetBSD

Stores working directory as vnode in proc structure,
Sets working directory to root during exec,
Copies working directory during fork,
Chdir: sets working directory as vnode retrieved by lookup on its argument,
Getcwd: returns path from root to working directory vnode,
Assumes there is a one global filesystem root (doesn't support chroot),
Only contains setting and getting working directory. (Does not contain other related changes, for example lookup of relative paths)

NetBSD man pages: chdir, getcwd",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,603,2019-11-25T23:06:13Z,2020-01-07T22:18:51Z,2020-01-07T22:18:52Z,MERGED,True,252,8,17,https://github.com/JakubSzczerbinski,"Implementation of getcwd, chdir syscalls",36,[],https://github.com/cahirwpz/mimiker/pull/603,https://github.com/jpszczolowski,2,https://github.com/cahirwpz/mimiker/pull/603#issuecomment-558395550,"The working directory of a process is a directory of a hierarchical file system, if any, dynamically associated with each process.
When the process refers to a file using a simple file name or relative path (as opposed to a file designated by a full path from a root directory), the reference is interpreted relative to the working directory of the process.

Implementation of getcwd and chdir syscalls based on NetBSD

Stores working directory as vnode in proc structure,
Sets working directory to root during exec,
Copies working directory during fork,
Chdir: sets working directory as vnode retrieved by lookup on its argument,
Getcwd: returns path from root to working directory vnode,
Assumes there is a one global filesystem root (doesn't support chroot),
Only contains setting and getting working directory. (Does not contain other related changes, for example lookup of relative paths)

NetBSD man pages: chdir, getcwd",Why do you start bin/utest/getcwd.c and sys/kern/getcwd.c files with a newline?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,603,2019-11-25T23:06:13Z,2020-01-07T22:18:51Z,2020-01-07T22:18:52Z,MERGED,True,252,8,17,https://github.com/JakubSzczerbinski,"Implementation of getcwd, chdir syscalls",36,[],https://github.com/cahirwpz/mimiker/pull/603,https://github.com/jpszczolowski,3,https://github.com/cahirwpz/mimiker/pull/603#issuecomment-558396907,"The working directory of a process is a directory of a hierarchical file system, if any, dynamically associated with each process.
When the process refers to a file using a simple file name or relative path (as opposed to a file designated by a full path from a root directory), the reference is interpreted relative to the working directory of the process.

Implementation of getcwd and chdir syscalls based on NetBSD

Stores working directory as vnode in proc structure,
Sets working directory to root during exec,
Copies working directory during fork,
Chdir: sets working directory as vnode retrieved by lookup on its argument,
Getcwd: returns path from root to working directory vnode,
Assumes there is a one global filesystem root (doesn't support chroot),
Only contains setting and getting working directory. (Does not contain other related changes, for example lookup of relative paths)

NetBSD man pages: chdir, getcwd","Please follow Mimiker's include guard convention. You can find an example here: 
  
    
      mimiker/include/sys/malloc.h
    
    
        Lines 1 to 2
      in
      884ecdb
    
  
  
    

        
          
           #ifndef _SYS_MALLOC_H_ 
        

        
          
           #define _SYS_MALLOC_H_ 
        
    
  



  
    
      mimiker/include/sys/malloc.h
    
    
         Line 44
      in
      884ecdb
    
  
  
    

        
          
           #endif /* !_SYS_MALLOC_H_ */",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,603,2019-11-25T23:06:13Z,2020-01-07T22:18:51Z,2020-01-07T22:18:52Z,MERGED,True,252,8,17,https://github.com/JakubSzczerbinski,"Implementation of getcwd, chdir syscalls",36,[],https://github.com/cahirwpz/mimiker/pull/603,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/603#issuecomment-565363734,"The working directory of a process is a directory of a hierarchical file system, if any, dynamically associated with each process.
When the process refers to a file using a simple file name or relative path (as opposed to a file designated by a full path from a root directory), the reference is interpreted relative to the working directory of the process.

Implementation of getcwd and chdir syscalls based on NetBSD

Stores working directory as vnode in proc structure,
Sets working directory to root during exec,
Copies working directory during fork,
Chdir: sets working directory as vnode retrieved by lookup on its argument,
Getcwd: returns path from root to working directory vnode,
Assumes there is a one global filesystem root (doesn't support chroot),
Only contains setting and getting working directory. (Does not contain other related changes, for example lookup of relative paths)

NetBSD man pages: chdir, getcwd","Please also provide reasonable description for the PR, as requested by @pwit81 on #docs channel.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,603,2019-11-25T23:06:13Z,2020-01-07T22:18:51Z,2020-01-07T22:18:52Z,MERGED,True,252,8,17,https://github.com/JakubSzczerbinski,"Implementation of getcwd, chdir syscalls",36,[],https://github.com/cahirwpz/mimiker/pull/603,https://github.com/cahirwpz,5,https://github.com/cahirwpz/mimiker/pull/603#issuecomment-566204394,"The working directory of a process is a directory of a hierarchical file system, if any, dynamically associated with each process.
When the process refers to a file using a simple file name or relative path (as opposed to a file designated by a full path from a root directory), the reference is interpreted relative to the working directory of the process.

Implementation of getcwd and chdir syscalls based on NetBSD

Stores working directory as vnode in proc structure,
Sets working directory to root during exec,
Copies working directory during fork,
Chdir: sets working directory as vnode retrieved by lookup on its argument,
Getcwd: returns path from root to working directory vnode,
Assumes there is a one global filesystem root (doesn't support chroot),
Only contains setting and getting working directory. (Does not contain other related changes, for example lookup of relative paths)

NetBSD man pages: chdir, getcwd",Please resolve conflicts and write PR description.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,604,2019-11-27T17:01:24Z,2019-11-27T21:12:43Z,2019-12-13T17:05:58Z,MERGED,True,19,19,5,https://github.com/xThaid,Rename vfs_lookup to vfs_namelookup.,1,[],https://github.com/cahirwpz/mimiker/pull/604,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/604,Renamed vfs_lookup to make VNR naming more consistent.,Renamed vfs_lookup to make VNR naming more consistent.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,605,2019-11-27T17:57:55Z,2019-11-29T21:50:00Z,2019-12-13T17:06:01Z,MERGED,True,55,3,3,https://github.com/xThaid,Implement rmdir syscall.,5,[],https://github.com/cahirwpz/mimiker/pull/605,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/605,Implemented rmdir syscall. The meaning of possible errors is the same as described in manual.,Implemented rmdir syscall. The meaning of possible errors is the same as described in manual.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,605,2019-11-27T17:57:55Z,2019-11-29T21:50:00Z,2019-12-13T17:06:01Z,MERGED,True,55,3,3,https://github.com/xThaid,Implement rmdir syscall.,5,[],https://github.com/cahirwpz/mimiker/pull/605,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/605#issuecomment-559253384,Implemented rmdir syscall. The meaning of possible errors is the same as described in manual.,Please update branch and resolve conflicts.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,606,2019-11-27T18:01:17Z,2019-11-27T21:36:57Z,2019-12-13T17:06:01Z,MERGED,True,21,4,1,https://github.com/xThaid,Implement VOP_RMDIR in tmpfs,4,[],https://github.com/cahirwpz/mimiker/pull/606,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/606,Tmpfs now supports deleting directories.,Tmpfs now supports deleting directories.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,607,2019-11-29T19:07:31Z,2019-11-29T21:52:34Z,2019-11-29T21:52:34Z,MERGED,True,9,2,2,https://github.com/mzr,"Fixing #594. Do not deliver signals to zombies, ...",5,[],https://github.com/cahirwpz/mimiker/pull/607,https://github.com/mzr,1,https://github.com/cahirwpz/mimiker/pull/607,"signals are not delivered to zombies
That caused #594 .
pids start at 1
Pids shouldn't start at 0, because:

If	pid is zero:
	     The sig signal is sent to all processes whose group ID is equal
	     to	the process group ID of	the sender, and	for which the process
	     has permission; this is a variant of killpg(2).","signals are not delivered to zombies
That caused #594 .
pids start at 1
Pids shouldn't start at 0, because:

If	pid is zero:
	     The sig signal is sent to all processes whose group ID is equal
	     to	the process group ID of	the sender, and	for which the process
	     has permission; this is a variant of killpg(2).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,607,2019-11-29T19:07:31Z,2019-11-29T21:52:34Z,2019-11-29T21:52:34Z,MERGED,True,9,2,2,https://github.com/mzr,"Fixing #594. Do not deliver signals to zombies, ...",5,[],https://github.com/cahirwpz/mimiker/pull/607,https://github.com/mzr,2,https://github.com/cahirwpz/mimiker/pull/607#issuecomment-559877438,"signals are not delivered to zombies
That caused #594 .
pids start at 1
Pids shouldn't start at 0, because:

If	pid is zero:
	     The sig signal is sent to all processes whose group ID is equal
	     to	the process group ID of	the sender, and	for which the process
	     has permission; this is a variant of killpg(2).","# echo a | wc | wc
echo a | wc | wc
       1       3      25
# 

Another level of pipeing is not possible due to memory exhaustion in pipe buffers.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,607,2019-11-29T19:07:31Z,2019-11-29T21:52:34Z,2019-11-29T21:52:34Z,MERGED,True,9,2,2,https://github.com/mzr,"Fixing #594. Do not deliver signals to zombies, ...",5,[],https://github.com/cahirwpz/mimiker/pull/607,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/607#issuecomment-559885296,"signals are not delivered to zombies
That caused #594 .
pids start at 1
Pids shouldn't start at 0, because:

If	pid is zero:
	     The sig signal is sent to all processes whose group ID is equal
	     to	the process group ID of	the sender, and	for which the process
	     has permission; this is a variant of killpg(2).",LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,608,2019-11-29T21:40:38Z,2020-01-24T22:10:34Z,2020-01-24T22:10:34Z,MERGED,True,80,2,2,https://github.com/mzr,[RFC] tmux++,9,[],https://github.com/cahirwpz/mimiker/pull/608,https://github.com/mzr,1,https://github.com/cahirwpz/mimiker/pull/608,"ctrl + m: enable/disable mouse.
[ enter | [ ]: vi-style copy mode
I hope that rest is self-explanatory.
Copying to system clipboard is... tricky.
In order to do that we would need xsel/xclip installed.","ctrl + m: enable/disable mouse.
[ enter | [ ]: vi-style copy mode
I hope that rest is self-explanatory.
Copying to system clipboard is... tricky.
In order to do that we would need xsel/xclip installed.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,608,2019-11-29T21:40:38Z,2020-01-24T22:10:34Z,2020-01-24T22:10:34Z,MERGED,True,80,2,2,https://github.com/mzr,[RFC] tmux++,9,[],https://github.com/cahirwpz/mimiker/pull/608,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/608#issuecomment-559885060,"ctrl + m: enable/disable mouse.
[ enter | [ ]: vi-style copy mode
I hope that rest is self-explanatory.
Copying to system clipboard is... tricky.
In order to do that we would need xsel/xclip installed.",LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,609,2019-11-29T22:17:15Z,2019-12-11T10:23:27Z,2019-12-11T10:23:51Z,MERGED,True,2,2,2,https://github.com/jpszczolowski,"Cleanup after ""Do not deliver signals to zombies""",2,[],https://github.com/cahirwpz/mimiker/pull/609,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/609,"Array equal to {[0] = 1, 0} is in fact equal to {1}.
Changed a comment about PID(0) -- now it's PID(1).","Array equal to {[0] = 1, 0} is in fact equal to {1}.
Changed a comment about PID(0) -- now it's PID(1).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,610,2019-11-29T22:18:02Z,2019-11-30T08:48:37Z,2019-11-30T08:48:37Z,CLOSED,False,2,2,2,https://github.com/mzr,Remove unnecessary complexity from #607,1,[],https://github.com/cahirwpz/mimiker/pull/610,https://github.com/mzr,1,https://github.com/cahirwpz/mimiker/pull/610,I was fiddling with some C syntax and forgot to delete it... AFAIK standard says that uninitialized indices are initialized to 0.,I was fiddling with some C syntax and forgot to delete it... AFAIK standard says that uninitialized indices are initialized to 0.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,610,2019-11-29T22:18:02Z,2019-11-30T08:48:37Z,2019-11-30T08:48:37Z,CLOSED,False,2,2,2,https://github.com/mzr,Remove unnecessary complexity from #607,1,[],https://github.com/cahirwpz/mimiker/pull/610,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/610#issuecomment-559928857,I was fiddling with some C syntax and forgot to delete it... AFAIK standard says that uninitialized indices are initialized to 0.,Duplicate of #609,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,611,2019-11-30T15:49:30Z,2019-12-02T20:35:19Z,2019-12-13T17:05:17Z,MERGED,True,92,9,4,https://github.com/xThaid,Implement readdir v-node operation for tmpfs,7,[],https://github.com/cahirwpz/mimiker/pull/611,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/611,"Added node identifiers in tmpfs (simple incremental IDs)
Directories in tmpfs now remember theirs parent (and also number of links is correctly updated)
Implemented readdir syscall (using our helper routine readdir_generic)","Added node identifiers in tmpfs (simple incremental IDs)
Directories in tmpfs now remember theirs parent (and also number of links is correctly updated)
Implemented readdir syscall (using our helper routine readdir_generic)",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,611,2019-11-30T15:49:30Z,2019-12-02T20:35:19Z,2019-12-13T17:05:17Z,MERGED,True,92,9,4,https://github.com/xThaid,Implement readdir v-node operation for tmpfs,7,[],https://github.com/cahirwpz/mimiker/pull/611,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/611#issuecomment-560077628,"Added node identifiers in tmpfs (simple incremental IDs)
Directories in tmpfs now remember theirs parent (and also number of links is correctly updated)
Implemented readdir syscall (using our helper routine readdir_generic)","i-node of "".."" entry in root directory of tmpfs should be set to i-node of mount point, i.e. directory of filesystem where tmpfs was mounted. Please check it on Linux with ls -ia.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,612,2019-11-30T15:53:11Z,2019-12-11T17:23:05Z,2019-12-13T17:05:44Z,MERGED,True,53,1,5,https://github.com/xThaid,Add some vfs tests,4,[],https://github.com/cahirwpz/mimiker/pull/612,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/612,Added some vfs userspace tests checking basic functionality of creating/deleting directories.,Added some vfs userspace tests checking basic functionality of creating/deleting directories.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,614,2019-12-09T15:26:05Z,2019-12-10T07:02:48Z,2019-12-11T15:32:24Z,MERGED,True,28,9,1,https://github.com/xThaid,Add remove v-node operation for tmpfs.,3,[],https://github.com/cahirwpz/mimiker/pull/614,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/614,Tmpfs is now able to create/remove files and directories.,Tmpfs is now able to create/remove files and directories.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,615,2019-12-09T16:26:06Z,2019-12-11T17:22:27Z,2019-12-13T17:05:18Z,MERGED,True,34,14,2,https://github.com/xThaid,Implement unlink syscall.,5,[],https://github.com/cahirwpz/mimiker/pull/615,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/615,"Next step to file system completeness. Now implemented unlink syscall.
I also made some clean-ups in vfs name resolver:

Changed

vnode_unlock(v);
vnode_drop(v);
to
vnode_put(v);

Moved ENAMETOOLONG error checking to vfs_nameresolve
Changed semantic of VOP_RMDIR to provide consistency of v-node operations. VOP_RMDIR should not release any nodes. Moved to next PR.","Next step to file system completeness. Now implemented unlink syscall.
I also made some clean-ups in vfs name resolver:

Changed

vnode_unlock(v);
vnode_drop(v);
to
vnode_put(v);

Moved ENAMETOOLONG error checking to vfs_nameresolve
Changed semantic of VOP_RMDIR to provide consistency of v-node operations. VOP_RMDIR should not release any nodes. Moved to next PR.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,616,2019-12-09T16:46:34Z,2020-04-07T12:43:25Z,2020-04-07T12:52:32Z,MERGED,True,442,12,17,https://github.com/jpszczolowski,Add support for KASAN (Kernel Address Sanitizer),81,[],https://github.com/cahirwpz/mimiker/pull/616,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/616,Work based on KASANs from Linux and NetBSD kernels.,Work based on KASANs from Linux and NetBSD kernels.,True,"{'THUMBS_UP': ['https://github.com/dyniec'], 'HEART': ['https://github.com/dyniec'], 'HOORAY': ['https://github.com/dyniec']}"
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,617,2019-12-11T17:53:11Z,2019-12-11T18:25:51Z,2019-12-13T17:05:16Z,MERGED,True,10,11,3,https://github.com/xThaid,Introduce v-node locking consistency in vop operations.,2,[],https://github.com/cahirwpz/mimiker/pull/617,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/617,I have changed VOP_REMOVE and VOP_RMDIR interface to take removed v-node as argument. The point is that file system implementations should not lock/unlock v-nodes in this operations. It is related to this comment.,I have changed VOP_REMOVE and VOP_RMDIR interface to take removed v-node as argument. The point is that file system implementations should not lock/unlock v-nodes in this operations. It is related to this comment.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,618,2019-12-13T16:56:50Z,2019-12-16T19:21:54Z,2020-03-24T11:36:20Z,MERGED,True,62,23,4,https://github.com/xThaid,Add support for creating file using open syscall.,1,[],https://github.com/cahirwpz/mimiker/pull/618,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/618,"We can create new regular files using open syscall with O_CREATE flag specified. I have also handled O_APPEND flag. It doesn't have any effect now, but at least it doesn't return with error, as it did before.","We can create new regular files using open syscall with O_CREATE flag specified. I have also handled O_APPEND flag. It doesn't have any effect now, but at least it doesn't return with error, as it did before.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,619,2019-12-25T20:51:21Z,2020-01-04T18:56:08Z,2020-03-24T11:36:21Z,MERGED,True,38,10,5,https://github.com/xThaid,Add support for O_TRUNC flag in open syscall,6,[],https://github.com/cahirwpz/mimiker/pull/619,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/619,open syscall now supports truncating file while opening it. It was necessary to implement VOP_SETATTR vfs operation beforehand.,open syscall now supports truncating file while opening it. It was necessary to implement VOP_SETATTR vfs operation beforehand.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,620,2020-01-04T20:32:35Z,2020-01-19T18:15:19Z,2020-03-24T11:36:24Z,CLOSED,False,320,11,5,https://github.com/xThaid,Add read/write operations for tmpfs,13,[],https://github.com/cahirwpz/mimiker/pull/620,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/620,"Read and write operations for tmpfs are now fully working. Addressing a file's data blocks is based on a structure adopted from ext2 filesystem. The key features are fixed logical block size, ease of data location and indirect blocks. Default level of indirection is 2, which should be enough (file's size can be up to roughly 4GiB).
I also have written some unit tests for this code.","Read and write operations for tmpfs are now fully working. Addressing a file's data blocks is based on a structure adopted from ext2 filesystem. The key features are fixed logical block size, ease of data location and indirect blocks. Default level of indirection is 2, which should be enough (file's size can be up to roughly 4GiB).
I also have written some unit tests for this code.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,620,2020-01-04T20:32:35Z,2020-01-19T18:15:19Z,2020-03-24T11:36:24Z,CLOSED,False,320,11,5,https://github.com/xThaid,Add read/write operations for tmpfs,13,[],https://github.com/cahirwpz/mimiker/pull/620,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/620#issuecomment-571801835,"Read and write operations for tmpfs are now fully working. Addressing a file's data blocks is based on a structure adopted from ext2 filesystem. The key features are fixed logical block size, ease of data location and indirect blocks. Default level of indirection is 2, which should be enough (file's size can be up to roughly 4GiB).
I also have written some unit tests for this code.",I wonder... maybe you tried to make the code too generic by assuming someone will be tempted to change value of INDIR_LEVELS?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,620,2020-01-04T20:32:35Z,2020-01-19T18:15:19Z,2020-03-24T11:36:24Z,CLOSED,False,320,11,5,https://github.com/xThaid,Add read/write operations for tmpfs,13,[],https://github.com/cahirwpz/mimiker/pull/620,https://github.com/xThaid,3,https://github.com/cahirwpz/mimiker/pull/620#issuecomment-573346276,"Read and write operations for tmpfs are now fully working. Addressing a file's data blocks is based on a structure adopted from ext2 filesystem. The key features are fixed logical block size, ease of data location and indirect blocks. Default level of indirection is 2, which should be enough (file's size can be up to roughly 4GiB).
I also have written some unit tests for this code.","I know this code may be too generic, but I feel like this is more clear and compact than hard-coding two levels of indirection. In my opinion, changing file size one block at a time also simplifies whole logic. I tried to write something else, but all resulted in rather longer and repetitive code with multiple if statements.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,620,2020-01-04T20:32:35Z,2020-01-19T18:15:19Z,2020-03-24T11:36:24Z,CLOSED,False,320,11,5,https://github.com/xThaid,Add read/write operations for tmpfs,13,[],https://github.com/cahirwpz/mimiker/pull/620,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/620#issuecomment-573680356,"Read and write operations for tmpfs are now fully working. Addressing a file's data blocks is based on a structure adopted from ext2 filesystem. The key features are fixed logical block size, ease of data location and indirect blocks. Default level of indirection is 2, which should be enough (file's size can be up to roughly 4GiB).
I also have written some unit tests for this code.","I'm willing to accept simpler code, even if it involves making it more verbose.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,620,2020-01-04T20:32:35Z,2020-01-19T18:15:19Z,2020-03-24T11:36:24Z,CLOSED,False,320,11,5,https://github.com/xThaid,Add read/write operations for tmpfs,13,[],https://github.com/cahirwpz/mimiker/pull/620,https://github.com/xThaid,5,https://github.com/cahirwpz/mimiker/pull/620#issuecomment-576031026,"Read and write operations for tmpfs are now fully working. Addressing a file's data blocks is based on a structure adopted from ext2 filesystem. The key features are fixed logical block size, ease of data location and indirect blocks. Default level of indirection is 2, which should be enough (file's size can be up to roughly 4GiB).
I also have written some unit tests for this code.",Second version is in another PR #624.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,621,2020-01-11T20:52:04Z,2020-01-13T13:46:35Z,2020-03-24T11:36:26Z,MERGED,True,33,52,4,https://github.com/xThaid,Consistency in using componentname in vfs.,1,[],https://github.com/cahirwpz/mimiker/pull/621,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/621,"There was some inconsistency in calling some vfs functions. They haven taken const char * as argument, which resulted in unnecessary memory allocations. Now they all use componentname like in NetBSD.","There was some inconsistency in calling some vfs functions. They haven taken const char * as argument, which resulted in unnecessary memory allocations. Now they all use componentname like in NetBSD.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,622,2020-01-15T14:55:57Z,2020-01-20T21:23:56Z,2020-01-20T21:23:56Z,MERGED,True,116,59,7,https://github.com/pj1031999,Add O_CLOEXEC support.,16,[],https://github.com/cahirwpz/mimiker/pull/622,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/622,"Add O_CLOEXEC suport.
Introduce fdent structure into fdtab that contains open file and flag for file descriptor. It's based on fdfile from NetBSD.
Add O_CLOEXEC support for open, dup, dup2, fcntl, execve.","Add O_CLOEXEC suport.
Introduce fdent structure into fdtab that contains open file and flag for file descriptor. It's based on fdfile from NetBSD.
Add O_CLOEXEC support for open, dup, dup2, fcntl, execve.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,623,2020-01-19T10:21:04Z,2020-01-19T13:10:00Z,2020-01-19T13:14:29Z,MERGED,True,5,3,1,https://github.com/jpszczolowski,Minimize the race condition in sleepq_sync test,1,['bug'],https://github.com/cahirwpz/mimiker/pull/623,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/623,"In sleepq_sync test, there are threads calling sleepq_wait and callouts calling sleepq_broadcast. This PR changes the test so that the threads are created before the callouts are set up. This minimizes the chance of a wake-up being lost.","In sleepq_sync test, there are threads calling sleepq_wait and callouts calling sleepq_broadcast. This PR changes the test so that the threads are created before the callouts are set up. This minimizes the chance of a wake-up being lost.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,624,2020-01-19T18:14:52Z,2020-01-20T11:56:11Z,2020-03-24T11:36:27Z,MERGED,True,314,11,5,https://github.com/xThaid,Add read/write operations for tmpfs.,17,[],https://github.com/cahirwpz/mimiker/pull/624,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/624,Code of #620 had to be rewritten due to being over complicated.,Code of #620 had to be rewritten due to being over complicated.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,625,2020-01-20T13:46:35Z,2020-04-21T10:57:18Z,2020-04-21T10:57:19Z,CLOSED,False,38,15,4,https://github.com/JakubSzczerbinski,Implementation of sigprocmask syscall,7,[],https://github.com/cahirwpz/mimiker/pull/625,https://github.com/JakubSzczerbinski,1,https://github.com/cahirwpz/mimiker/pull/625,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,625,2020-01-20T13:46:35Z,2020-04-21T10:57:18Z,2020-04-21T10:57:19Z,CLOSED,False,38,15,4,https://github.com/JakubSzczerbinski,Implementation of sigprocmask syscall,7,[],https://github.com/cahirwpz/mimiker/pull/625,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/625#issuecomment-617106799,,Work is continued in #680,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,626,2020-01-20T13:52:29Z,2020-01-20T21:26:16Z,2020-01-20T21:26:16Z,MERGED,True,38,8,5,https://github.com/JakubSzczerbinski,Relative nameresolve,13,[],https://github.com/cahirwpz/mimiker/pull/626,https://github.com/JakubSzczerbinski,1,https://github.com/cahirwpz/mimiker/pull/626,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,626,2020-01-20T13:52:29Z,2020-01-20T21:26:16Z,2020-01-20T21:26:16Z,MERGED,True,38,8,5,https://github.com/JakubSzczerbinski,Relative nameresolve,13,[],https://github.com/cahirwpz/mimiker/pull/626,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/626#issuecomment-576287992,,"Please provide PR description!
The change works for simple case, but it fails when . or .. is at the beginning of path:
# cd tmp
# echo foo > bar
# cat bar
foo
# cat ./bar
No such file or directory.
# cat ../tmp/bar
No such file or directory.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,626,2020-01-20T13:52:29Z,2020-01-20T21:26:16Z,2020-01-20T21:26:16Z,MERGED,True,38,8,5,https://github.com/JakubSzczerbinski,Relative nameresolve,13,[],https://github.com/cahirwpz/mimiker/pull/626,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/626#issuecomment-576434512,,I'll accept partial implementation FTTB,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,627,2020-01-20T15:34:05Z,2020-01-24T15:21:48Z,2020-03-24T11:36:33Z,MERGED,True,44,33,13,https://github.com/xThaid,Add support for O_APPEND flag,5,[],https://github.com/cahirwpz/mimiker/pull/627,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/627,We can now open files with O_APPEND flag. This allows using >> in shell.,We can now open files with O_APPEND flag. This allows using >> in shell.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,628,2020-01-20T15:54:32Z,2020-01-20T18:54:49Z,2020-03-24T11:36:30Z,MERGED,True,9,0,1,https://github.com/xThaid,Relative paths in tmpfs,1,[],https://github.com/cahirwpz/mimiker/pull/628,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/628,Support for . and .. during path lookups in tmpfs.,Support for . and .. during path lookups in tmpfs.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,629,2020-01-21T11:48:53Z,2020-01-24T06:51:58Z,2020-01-24T11:26:46Z,MERGED,True,134,2,14,https://github.com/xThaid,Truncate syscall,5,[],https://github.com/cahirwpz/mimiker/pull/629,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/629,"I have implemented truncate, ftruncate syscall. I have written also some unit tests.","I have implemented truncate, ftruncate syscall. I have written also some unit tests.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,630,2020-01-21T15:27:29Z,2020-01-27T12:21:57Z,2020-03-24T11:36:34Z,MERGED,True,57,38,5,https://github.com/xThaid,Fix possible race condition in vnode fileops,2,[],https://github.com/cahirwpz/mimiker/pull/630,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/630,Writing/reading/moving file cursor wasn't properly secured from a race condition.,Writing/reading/moving file cursor wasn't properly secured from a race condition.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,631,2020-01-22T15:28:20Z,2020-01-22T17:46:08Z,2020-01-22T17:46:08Z,MERGED,True,16,33,13,https://github.com/pj1031999,Add getdents syscall.,6,[],https://github.com/cahirwpz/mimiker/pull/631,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/631,"Implement getdents syscall and remove getdirentries.
Adopt existing userspace programs to use new syscall.","Implement getdents syscall and remove getdirentries.
Adopt existing userspace programs to use new syscall.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,632,2020-01-22T16:01:39Z,2020-01-22T19:47:22Z,2020-01-22T19:47:22Z,MERGED,True,16,0,3,https://github.com/pj1031999,Add F_GETFD for fcntl.,3,[],https://github.com/cahirwpz/mimiker/pull/632,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/632,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,632,2020-01-22T16:01:39Z,2020-01-22T19:47:22Z,2020-01-22T19:47:22Z,MERGED,True,16,0,3,https://github.com/pj1031999,Add F_GETFD for fcntl.,3,[],https://github.com/cahirwpz/mimiker/pull/632,https://github.com/xThaid,2,https://github.com/cahirwpz/mimiker/pull/632#issuecomment-577260902,,Looks good.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,633,2020-01-24T20:14:45Z,2020-01-25T10:23:16Z,2020-01-25T10:51:39Z,MERGED,True,5,5,4,https://github.com/xThaid,Kernel panic during VOP_READDIR,3,[],https://github.com/cahirwpz/mimiker/pull/633,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/633,"Reproduction:

create regular file in /tmp,
list content of /tmp/ directory.

The problem was in this function:

  
    
      mimiker/sys/kern/vfs_readdir.c
    
    
        Lines 15 to 17
      in
      ee3c796
    
  
  
    

        
          
           uint8_t vnode_to_dt(vnode_t *v) { 
        

        
          
             return vttodt_tab[v->v_type]; 
        

        
          
           } 
        
    
  


While listing content of the directory, some child might not have any reference and this means that there isn't any vnode attached to it. Then, this causes dereferencing NULL pointer - kernel panic.","Reproduction:

create regular file in /tmp,
list content of /tmp/ directory.

The problem was in this function:

  
    
      mimiker/sys/kern/vfs_readdir.c
    
    
        Lines 15 to 17
      in
      ee3c796
    
  
  
    

        
          
           uint8_t vnode_to_dt(vnode_t *v) { 
        

        
          
             return vttodt_tab[v->v_type]; 
        

        
          
           } 
        
    
  


While listing content of the directory, some child might not have any reference and this means that there isn't any vnode attached to it. Then, this causes dereferencing NULL pointer - kernel panic.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,634,2020-01-26T18:33:47Z,2020-01-27T06:34:44Z,2020-04-30T10:34:31Z,MERGED,True,4,4,1,https://github.com/jpszczolowski,Fix inappropriate usage of MIPS_KSEG0_TO_PHYS macro,2,[],https://github.com/cahirwpz/mimiker/pull/634,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/634,"Macro MIPS_KSEG0_TO_PHYS is (wrongly) applied to KSEG2 symbols. This is misleading, though technically correct, as the definition of MIPS_KSEG0_TO_PHYS and MIPS_KSEG2_TO_PHYS is exactly the same.","Macro MIPS_KSEG0_TO_PHYS is (wrongly) applied to KSEG2 symbols. This is misleading, though technically correct, as the definition of MIPS_KSEG0_TO_PHYS and MIPS_KSEG2_TO_PHYS is exactly the same.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,636,2020-01-27T15:36:49Z,2020-03-31T13:35:39Z,2020-03-31T13:40:39Z,MERGED,True,153,80,14,https://github.com/jpszczolowski,Access kernel stack using only KSEG2 addresses,23,[],https://github.com/cahirwpz/mimiker/pull/636,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/636,"We would like to always access kernel stack through kseg2 addresses, so that we can enable KASAN stack instrumentation.","We would like to always access kernel stack through kseg2 addresses, so that we can enable KASAN stack instrumentation.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,637,2020-01-27T16:03:11Z,2020-01-27T22:02:46Z,2020-03-24T11:36:07Z,MERGED,True,0,2,2,https://github.com/xThaid,Remove file mutex,1,[],https://github.com/cahirwpz/mimiker/pull/637,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/637,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,638,2020-01-27T16:29:38Z,2020-02-03T21:33:38Z,2020-02-03T21:33:39Z,MERGED,True,21,0,1,https://github.com/pj1031999,Add F_GETFL and F_SETFL for fcntl.,6,[],https://github.com/cahirwpz/mimiker/pull/638,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/638,Add F_GETFL and F_SETFL for fcntl.,Add F_GETFL and F_SETFL for fcntl.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,639,2020-01-27T16:31:10Z,2020-01-29T14:52:40Z,2020-01-29T14:52:40Z,MERGED,True,163,40,11,https://github.com/JakubSzczerbinski,Support for '..' and '.' path components in name resolve,25,[],https://github.com/cahirwpz/mimiker/pull/639,https://github.com/JakubSzczerbinski,1,https://github.com/cahirwpz/mimiker/pull/639,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,640,2020-01-27T19:39:42Z,2020-01-27T21:47:05Z,2020-01-31T20:42:06Z,MERGED,True,4,1,3,https://github.com/jpszczolowski,Fix buffer-overflow in strntoul implementation,2,[],https://github.com/cahirwpz/mimiker/pull/640,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/640,Fixes #635,Fixes #635,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,641,2020-01-29T11:42:12Z,2020-01-29T12:02:12Z,2020-01-29T12:02:12Z,MERGED,True,2,1,1,https://github.com/pj1031999,Fix ioctl buffer overflow.,1,[],https://github.com/cahirwpz/mimiker/pull/641,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/641,"Fix ioctl buffer overflow.
For bin/ls we call ioctl with command TIOCGWINSZ which invokes ns16550_ioctl where we always clear 44 bytes of memory. But buffer length returned by IOCPARM_LEN in sys_ioctl is 8 so we have overflow.
After the change we clean exactly as many bytes as we have allocated.","Fix ioctl buffer overflow.
For bin/ls we call ioctl with command TIOCGWINSZ which invokes ns16550_ioctl where we always clear 44 bytes of memory. But buffer length returned by IOCPARM_LEN in sys_ioctl is 8 so we have overflow.
After the change we clean exactly as many bytes as we have allocated.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,642,2020-01-29T15:50:36Z,2020-01-29T17:12:04Z,2020-01-29T19:23:45Z,MERGED,True,1,1,1,https://github.com/jpszczolowski,Fix link to tests/README.md,1,[],https://github.com/cahirwpz/mimiker/pull/642,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/642,README.md was moved from tests/ to sys/tests/.,README.md was moved from tests/ to sys/tests/.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,643,2020-01-29T22:53:59Z,2020-01-30T08:13:45Z,2020-01-30T15:21:47Z,MERGED,True,100,34,9,https://github.com/xThaid,Implement fstatat syscall,4,[],https://github.com/cahirwpz/mimiker/pull/643,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/643,Implement fstatat syscall. It required some modifications to vfs name resolver. We can now provide starting directory of the path lookup.,Implement fstatat syscall. It required some modifications to vfs name resolver. We can now provide starting directory of the path lookup.,True,{'HOORAY': ['https://github.com/jpszczolowski']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,644,2020-01-29T23:18:54Z,2020-01-30T07:37:18Z,2020-01-30T09:29:27Z,MERGED,True,5,0,1,https://github.com/jpszczolowski,Remove race condition from vm_map test,4,['bug'],https://github.com/cahirwpz/mimiker/pull/644,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/644,Description of the change is in the comment added to paging_on_demand_and_memory_protection_demo() test.,Description of the change is in the comment added to paging_on_demand_and_memory_protection_demo() test.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,645,2020-01-30T01:43:55Z,2020-01-30T07:38:58Z,2020-02-29T16:47:16Z,MERGED,True,2,2,1,https://github.com/jpszczolowski,Fix use-after-free inside thread_reap,2,[],https://github.com/cahirwpz/mimiker/pull/645,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/645,"Currently inside thread_reap we have a TAILQ_FOREACH loop which basically translates to:
for (... ; ... ; td = td->td_zombieq.tqe_next) {
  thread_delete(td);
}

The access to td->td_zombieq after calling thread_delete is obviously a use-after-free.
The bug has been found by KASAN:
======================================
ERROR: KernelAddressSanitizer:
invalid access to addr 0xc000b640
READ of size 4
code 0xfc
======================================

Breakpoint 3, panic_fail () at /home/jpszczolowski/mimiker/sys/kern/assert.c:6
6       __noreturn void panic_fail(void) {
(gdb) bt
#0  panic_fail () at /home/jpszczolowski/mimiker/sys/kern/assert.c:6
#1  0xc0132520 in kasan_shadow_check (read=0x1, size=0x4, addr=0xc000b640) at /home/jpszczolowski/mimiker/sys/kern/kasan.c:143
#2  __asan_load4_noabort (addr=addr@entry=0xc000b640) at /home/jpszczolowski/mimiker/sys/kern/kasan.c:246
#3  0xc011d74c in thread_reap () at /home/jpszczolowski/mimiker/sys/kern/thread.c:38
#4  0xc011d7bc in thread_create (name=name@entry=0xc016c0c0 ""test-mutex"", fn=fn@entry=0xc0150864 <simple_routine>, arg=arg@entry=0x0, prio=prio@entry=0x20) at /home/jpszczolowski/mimiker/sys/kern/thread.c:83
#5  0xc0150734 in test_mutex_simple () at /home/jpszczolowski/mimiker/include/sys/priority.h:28
#6  0xc012f6f0 in run_test (t=0xc017de40 <mutex_simple_test>) at /home/jpszczolowski/mimiker/sys/kern/ktest.c:117
#7  0xc012fae0 in run_all_tests () at /home/jpszczolowski/mimiker/sys/kern/ktest.c:193
#8  0xc012fd50 in ktest_main (test=test@entry=0xc0188f64 <_stack0+3940> ""all"") at /home/jpszczolowski/mimiker/sys/kern/ktest.c:251
#9  0xc012f128 in kmain () at /home/jpszczolowski/mimiker/sys/kern/main.c:20
#10 0xc011d958 in thread_self () at /home/jpszczolowski/mimiker/sys/kern/thread.c:120","Currently inside thread_reap we have a TAILQ_FOREACH loop which basically translates to:
for (... ; ... ; td = td->td_zombieq.tqe_next) {
  thread_delete(td);
}

The access to td->td_zombieq after calling thread_delete is obviously a use-after-free.
The bug has been found by KASAN:
======================================
ERROR: KernelAddressSanitizer:
invalid access to addr 0xc000b640
READ of size 4
code 0xfc
======================================

Breakpoint 3, panic_fail () at /home/jpszczolowski/mimiker/sys/kern/assert.c:6
6       __noreturn void panic_fail(void) {
(gdb) bt
#0  panic_fail () at /home/jpszczolowski/mimiker/sys/kern/assert.c:6
#1  0xc0132520 in kasan_shadow_check (read=0x1, size=0x4, addr=0xc000b640) at /home/jpszczolowski/mimiker/sys/kern/kasan.c:143
#2  __asan_load4_noabort (addr=addr@entry=0xc000b640) at /home/jpszczolowski/mimiker/sys/kern/kasan.c:246
#3  0xc011d74c in thread_reap () at /home/jpszczolowski/mimiker/sys/kern/thread.c:38
#4  0xc011d7bc in thread_create (name=name@entry=0xc016c0c0 ""test-mutex"", fn=fn@entry=0xc0150864 <simple_routine>, arg=arg@entry=0x0, prio=prio@entry=0x20) at /home/jpszczolowski/mimiker/sys/kern/thread.c:83
#5  0xc0150734 in test_mutex_simple () at /home/jpszczolowski/mimiker/include/sys/priority.h:28
#6  0xc012f6f0 in run_test (t=0xc017de40 <mutex_simple_test>) at /home/jpszczolowski/mimiker/sys/kern/ktest.c:117
#7  0xc012fae0 in run_all_tests () at /home/jpszczolowski/mimiker/sys/kern/ktest.c:193
#8  0xc012fd50 in ktest_main (test=test@entry=0xc0188f64 <_stack0+3940> ""all"") at /home/jpszczolowski/mimiker/sys/kern/ktest.c:251
#9  0xc012f128 in kmain () at /home/jpszczolowski/mimiker/sys/kern/main.c:20
#10 0xc011d958 in thread_self () at /home/jpszczolowski/mimiker/sys/kern/thread.c:120",True,{'HEART': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,645,2020-01-30T01:43:55Z,2020-01-30T07:38:58Z,2020-02-29T16:47:16Z,MERGED,True,2,2,1,https://github.com/jpszczolowski,Fix use-after-free inside thread_reap,2,[],https://github.com/cahirwpz/mimiker/pull/645,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/645#issuecomment-580122908,"Currently inside thread_reap we have a TAILQ_FOREACH loop which basically translates to:
for (... ; ... ; td = td->td_zombieq.tqe_next) {
  thread_delete(td);
}

The access to td->td_zombieq after calling thread_delete is obviously a use-after-free.
The bug has been found by KASAN:
======================================
ERROR: KernelAddressSanitizer:
invalid access to addr 0xc000b640
READ of size 4
code 0xfc
======================================

Breakpoint 3, panic_fail () at /home/jpszczolowski/mimiker/sys/kern/assert.c:6
6       __noreturn void panic_fail(void) {
(gdb) bt
#0  panic_fail () at /home/jpszczolowski/mimiker/sys/kern/assert.c:6
#1  0xc0132520 in kasan_shadow_check (read=0x1, size=0x4, addr=0xc000b640) at /home/jpszczolowski/mimiker/sys/kern/kasan.c:143
#2  __asan_load4_noabort (addr=addr@entry=0xc000b640) at /home/jpszczolowski/mimiker/sys/kern/kasan.c:246
#3  0xc011d74c in thread_reap () at /home/jpszczolowski/mimiker/sys/kern/thread.c:38
#4  0xc011d7bc in thread_create (name=name@entry=0xc016c0c0 ""test-mutex"", fn=fn@entry=0xc0150864 <simple_routine>, arg=arg@entry=0x0, prio=prio@entry=0x20) at /home/jpszczolowski/mimiker/sys/kern/thread.c:83
#5  0xc0150734 in test_mutex_simple () at /home/jpszczolowski/mimiker/include/sys/priority.h:28
#6  0xc012f6f0 in run_test (t=0xc017de40 <mutex_simple_test>) at /home/jpszczolowski/mimiker/sys/kern/ktest.c:117
#7  0xc012fae0 in run_all_tests () at /home/jpszczolowski/mimiker/sys/kern/ktest.c:193
#8  0xc012fd50 in ktest_main (test=test@entry=0xc0188f64 <_stack0+3940> ""all"") at /home/jpszczolowski/mimiker/sys/kern/ktest.c:251
#9  0xc012f128 in kmain () at /home/jpszczolowski/mimiker/sys/kern/main.c:20
#10 0xc011d958 in thread_self () at /home/jpszczolowski/mimiker/sys/kern/thread.c:120",LGTM Nice find! 👍,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,646,2020-01-31T12:59:19Z,2020-02-01T09:12:04Z,2020-03-24T11:36:09Z,MERGED,True,98,17,15,https://github.com/xThaid,Symbolic links,10,[],https://github.com/cahirwpz/mimiker/pull/646,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/646,"This is early stage of symbolic links. I have added readlinkat syscall. For now, it is only supported by the initrd file system.","This is early stage of symbolic links. I have added readlinkat syscall. For now, it is only supported by the initrd file system.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,646,2020-01-31T12:59:19Z,2020-02-01T09:12:04Z,2020-03-24T11:36:09Z,MERGED,True,98,17,15,https://github.com/xThaid,Symbolic links,10,[],https://github.com/cahirwpz/mimiker/pull/646,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/646#issuecomment-581010529,"This is early stage of symbolic links. I have added readlinkat syscall. For now, it is only supported by the initrd file system.",LGTM though name resolution does not handle symbolic links. I'll accept it as an intermediate step.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,647,2020-01-31T20:38:36Z,2020-01-31T23:13:57Z,2020-01-31T23:18:02Z,MERGED,True,4,1,1,https://github.com/jpszczolowski,Fix stack-buffer-overflow in videomode_write,2,[],https://github.com/cahirwpz/mimiker/pull/647,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/647,"int sscanf(const char *ibuf, const char *fmt, ...) function expects the input to be NULL-terminated C string (at the beginning it calls strlen() on ibuf). Our videomode_write() function calls sscanf() on non-NULL-terminated buffer, which causes stack-buffer-overflow during strlen() call.
The bug has been found by KASAN (kasan_strlen function, which replaces assembly strlen implementation during KASAN-enabled runs):
======================================
ERROR: KernelAddressSanitizer:
invalid access to addr 0xc0024c50
READ of size 1
code 0xf3
======================================

(gdb) bt
#0  panic_fail () at /home/jpszczolowski/mimiker/sys/kern/assert.c:6
#1  0xc0131954 in kasan_shadow_check (read=0x0, size=0x1, addr=0xc0024c50) at /home/jpszczolowski/mimiker/sys/kern/kasan.c:143
#2  kasan_strlen (str=str@entry=0xc0024c40 ""640 480 8M\002\300\070\335\022\300x\177\031\300\005"") at /home/jpszczolowski/mimiker/sys/kern/kasan.c:159                                                                                                        
#3  0xc0144ac0 in vsscanf (inp=inp@entry=0xc0024c40 ""640 480 8M\002\300\070\335\022\300x\177\031\300\005"", fmt0=fmt0@entry=0xc0165180 ""%d %d %d"", ap=<optimized out>) at /home/jpszczolowski/mimiker/sys/libkern/stdio/scanf.c:116                           
#4  0xc0145868 in sscanf (ibuf=ibuf@entry=0xc0024c40 ""640 480 8M\002\300\070\335\022\300x\177\031\300\005"", fmt=fmt@entry=0xc0165180 ""%d %d %d"") at /home/jpszczolowski/mimiker/sys/libkern/stdio/scanf.c:88                                                 
#5  0xc013d7ec in videomode_write (v=<optimized out>, uio=0xc0024dc0, ioflag=<optimized out>) at /home/jpszczolowski/mimiker/sys/kern/dev_vga.c:40                                                                                                           
#6  0xc0114668 in VOP_WRITE (ioflag=0x0, uio=0xc0024dc0, v=0xc0001298) at /home/jpszczolowski/mimiker/include/sys/vnode.h:137
#7  default_vnwrite (f=0xc002a0a8, uio=0xc0024dc0) at /home/jpszczolowski/mimiker/sys/kern/vfs_vnode.c:164
#8  0xc011585c in FOP_WRITE (uio=0xc0024dc0, f=0xc002a0a8) at /home/jpszczolowski/mimiker/include/sys/file.h:63
#9  do_write (p=p@entry=0xc0025028, fd=fd@entry=0x3, uio=uio@entry=0xc0024dc0) at /home/jpszczolowski/mimiker/sys/kern/vfs_syscalls.c:58                                                                                                                     
#10 0xc0123be8 in sys_write (p=0xc0025028, args=args@entry=0xc0024ef4, res=res@entry=0xc0024e80) at /home/jpszczolowski/mimiker/sys/kern/syscalls.c:254                                                                                                      
#11 0xc01027a8 in syscall_handler (frame=0xc0024ee8) at /home/jpszczolowski/mimiker/sys/mips/trap.c:32
#12 0xc0102e64 in mips_exc_handler (frame=0xc0024ee8) at /home/jpszczolowski/mimiker/sys/mips/trap.c:208
#13 <signal handler called>
#14 0x004005b0 in write () at /home/jpszczolowski/mimiker/lib/libc/sys/syscalls.S:7
#15 0x0040525c in __swrite (cookie=0x424578 <usual>, buf=0x8001000, n=0x9) at /home/jpszczolowski/mimiker/lib/libc/stdio/stdio.c:82                                                                                                                          
#16 0x00401680 in __sflush (fp=0x424578 <usual>) at /home/jpszczolowski/mimiker/lib/libc/stdio/fflush.c:95
#17 0x00401584 in fclose (fp=fp@entry=0x424578 <usual>) at /home/jpszczolowski/mimiker/lib/libc/stdio/fclose.c:51
#18 0x00400090 in prepare_videomode () at /home/jpszczolowski/mimiker/bin/mandelbrot/mandelbrot.c:24
#19 0x004002dc in main () at /home/jpszczolowski/mimiker/bin/mandelbrot/mandelbrot.c:61
#20 0x00400520 in ___start (argc=0x1, argv=0x7f7fffe4, envp=<optimized out>) at /home/jpszczolowski/mimiker/lib/csu/crt0-common.c:18                                                                                                                         
#21 0x00000000 in ?? ()","int sscanf(const char *ibuf, const char *fmt, ...) function expects the input to be NULL-terminated C string (at the beginning it calls strlen() on ibuf). Our videomode_write() function calls sscanf() on non-NULL-terminated buffer, which causes stack-buffer-overflow during strlen() call.
The bug has been found by KASAN (kasan_strlen function, which replaces assembly strlen implementation during KASAN-enabled runs):
======================================
ERROR: KernelAddressSanitizer:
invalid access to addr 0xc0024c50
READ of size 1
code 0xf3
======================================

(gdb) bt
#0  panic_fail () at /home/jpszczolowski/mimiker/sys/kern/assert.c:6
#1  0xc0131954 in kasan_shadow_check (read=0x0, size=0x1, addr=0xc0024c50) at /home/jpszczolowski/mimiker/sys/kern/kasan.c:143
#2  kasan_strlen (str=str@entry=0xc0024c40 ""640 480 8M\002\300\070\335\022\300x\177\031\300\005"") at /home/jpszczolowski/mimiker/sys/kern/kasan.c:159                                                                                                        
#3  0xc0144ac0 in vsscanf (inp=inp@entry=0xc0024c40 ""640 480 8M\002\300\070\335\022\300x\177\031\300\005"", fmt0=fmt0@entry=0xc0165180 ""%d %d %d"", ap=<optimized out>) at /home/jpszczolowski/mimiker/sys/libkern/stdio/scanf.c:116                           
#4  0xc0145868 in sscanf (ibuf=ibuf@entry=0xc0024c40 ""640 480 8M\002\300\070\335\022\300x\177\031\300\005"", fmt=fmt@entry=0xc0165180 ""%d %d %d"") at /home/jpszczolowski/mimiker/sys/libkern/stdio/scanf.c:88                                                 
#5  0xc013d7ec in videomode_write (v=<optimized out>, uio=0xc0024dc0, ioflag=<optimized out>) at /home/jpszczolowski/mimiker/sys/kern/dev_vga.c:40                                                                                                           
#6  0xc0114668 in VOP_WRITE (ioflag=0x0, uio=0xc0024dc0, v=0xc0001298) at /home/jpszczolowski/mimiker/include/sys/vnode.h:137
#7  default_vnwrite (f=0xc002a0a8, uio=0xc0024dc0) at /home/jpszczolowski/mimiker/sys/kern/vfs_vnode.c:164
#8  0xc011585c in FOP_WRITE (uio=0xc0024dc0, f=0xc002a0a8) at /home/jpszczolowski/mimiker/include/sys/file.h:63
#9  do_write (p=p@entry=0xc0025028, fd=fd@entry=0x3, uio=uio@entry=0xc0024dc0) at /home/jpszczolowski/mimiker/sys/kern/vfs_syscalls.c:58                                                                                                                     
#10 0xc0123be8 in sys_write (p=0xc0025028, args=args@entry=0xc0024ef4, res=res@entry=0xc0024e80) at /home/jpszczolowski/mimiker/sys/kern/syscalls.c:254                                                                                                      
#11 0xc01027a8 in syscall_handler (frame=0xc0024ee8) at /home/jpszczolowski/mimiker/sys/mips/trap.c:32
#12 0xc0102e64 in mips_exc_handler (frame=0xc0024ee8) at /home/jpszczolowski/mimiker/sys/mips/trap.c:208
#13 <signal handler called>
#14 0x004005b0 in write () at /home/jpszczolowski/mimiker/lib/libc/sys/syscalls.S:7
#15 0x0040525c in __swrite (cookie=0x424578 <usual>, buf=0x8001000, n=0x9) at /home/jpszczolowski/mimiker/lib/libc/stdio/stdio.c:82                                                                                                                          
#16 0x00401680 in __sflush (fp=0x424578 <usual>) at /home/jpszczolowski/mimiker/lib/libc/stdio/fflush.c:95
#17 0x00401584 in fclose (fp=fp@entry=0x424578 <usual>) at /home/jpszczolowski/mimiker/lib/libc/stdio/fclose.c:51
#18 0x00400090 in prepare_videomode () at /home/jpszczolowski/mimiker/bin/mandelbrot/mandelbrot.c:24
#19 0x004002dc in main () at /home/jpszczolowski/mimiker/bin/mandelbrot/mandelbrot.c:61
#20 0x00400520 in ___start (argc=0x1, argv=0x7f7fffe4, envp=<optimized out>) at /home/jpszczolowski/mimiker/lib/csu/crt0-common.c:18                                                                                                                         
#21 0x00000000 in ?? ()",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,648,2020-02-11T19:10:22Z,2020-02-14T08:49:09Z,2020-03-24T11:36:01Z,MERGED,True,196,17,18,https://github.com/xThaid,Symlinks in tmpfs,14,[],https://github.com/cahirwpz/mimiker/pull/648,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/648,I've added support for reading and making symbolic links in tmpfs. I have also implemented symlinkat system call.,I've added support for reading and making symbolic links in tmpfs. I have also implemented symlinkat system call.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,649,2020-02-12T18:54:59Z,2020-02-12T20:14:31Z,2020-03-24T11:36:11Z,MERGED,True,28,4,7,https://github.com/xThaid,umask syscall,3,[],https://github.com/cahirwpz/mimiker/pull/649,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/649,Implemented umask system call. Access permissions taken as argument by mkdir(2) and open(2) system calls are now restricted by the umask.,Implemented umask system call. Access permissions taken as argument by mkdir(2) and open(2) system calls are now restricted by the umask.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,649,2020-02-12T18:54:59Z,2020-02-12T20:14:31Z,2020-03-24T11:36:11Z,MERGED,True,28,4,7,https://github.com/xThaid,umask syscall,3,[],https://github.com/cahirwpz/mimiker/pull/649,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/649#issuecomment-585396578,Implemented umask system call. Access permissions taken as argument by mkdir(2) and open(2) system calls are now restricted by the umask.,LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,650,2020-02-20T10:15:41Z,2020-03-15T11:54:33Z,2020-03-24T11:36:00Z,MERGED,True,286,80,4,https://github.com/xThaid,Symbolic links resolving,7,[],https://github.com/cahirwpz/mimiker/pull/650,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/650,Paths with symbolic links in it are now correctly resolved.,Paths with symbolic links in it are now correctly resolved.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,650,2020-02-20T10:15:41Z,2020-03-15T11:54:33Z,2020-03-24T11:36:00Z,MERGED,True,286,80,4,https://github.com/xThaid,Symbolic links resolving,7,[],https://github.com/cahirwpz/mimiker/pull/650,https://github.com/xThaid,2,https://github.com/cahirwpz/mimiker/pull/650#issuecomment-589991284,Paths with symbolic links in it are now correctly resolved.,Our previous efforts to remove memory allocation for the path during name resolving was quite useless. We need extra buffer anyway as we modify path while following symbolic links.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,651,2020-03-15T18:05:46Z,2020-03-15T18:38:43Z,2020-03-24T11:35:57Z,MERGED,True,16,7,1,https://github.com/xThaid,Add VOP_GETATTR operation for ns16550 device,1,[],https://github.com/cahirwpz/mimiker/pull/651,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/651,"devfs is missing most of the VOP_* operations and it can cause some errors e.g. when running stat without arguments. It seems that implementing these operations will require quite a lot of work.
This PR introduces simple implementation of VOP_GETATTR for ns16550 device.","devfs is missing most of the VOP_* operations and it can cause some errors e.g. when running stat without arguments. It seems that implementing these operations will require quite a lot of work.
This PR introduces simple implementation of VOP_GETATTR for ns16550 device.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,652,2020-03-16T20:00:20Z,2020-03-23T10:11:33Z,2020-03-23T10:12:36Z,CLOSED,False,1,1,1,https://github.com/jpszczolowski,Enable tmux mouse support,1,[],https://github.com/cahirwpz/mimiker/pull/652,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/652,In my opinion it would be nice to have tmux mouse support enabled by default.,In my opinion it would be nice to have tmux mouse support enabled by default.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,652,2020-03-16T20:00:20Z,2020-03-23T10:11:33Z,2020-03-23T10:12:36Z,CLOSED,False,1,1,1,https://github.com/jpszczolowski,Enable tmux mouse support,1,[],https://github.com/cahirwpz/mimiker/pull/652,https://github.com/pj1031999,2,https://github.com/cahirwpz/mimiker/pull/652#issuecomment-599734940,In my opinion it would be nice to have tmux mouse support enabled by default.,I disagree. From my point of view it is very annoying.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,652,2020-03-16T20:00:20Z,2020-03-23T10:11:33Z,2020-03-23T10:12:36Z,CLOSED,False,1,1,1,https://github.com/jpszczolowski,Enable tmux mouse support,1,[],https://github.com/cahirwpz/mimiker/pull/652,https://github.com/jpszczolowski,3,https://github.com/cahirwpz/mimiker/pull/652#issuecomment-599738113,In my opinion it would be nice to have tmux mouse support enabled by default.,@pj1031999 FYI mouse mode has (almost) always been enabled in Mimiker but has been recently disabled in one of the final commits of #608 (and I don't see any reason for that),True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,652,2020-03-16T20:00:20Z,2020-03-23T10:11:33Z,2020-03-23T10:12:36Z,CLOSED,False,1,1,1,https://github.com/jpszczolowski,Enable tmux mouse support,1,[],https://github.com/cahirwpz/mimiker/pull/652,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/652#issuecomment-599916709,In my opinion it would be nice to have tmux mouse support enabled by default.,"This is a matter of local user settings. One is free to configure tmux as he wishes and current configuration file should ease that process by providing extensive comments.
Hence I propose to revert to original settings (off) and a comment to set -g mouse line that explains what are the advantages and disadvantages of using this option.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,652,2020-03-16T20:00:20Z,2020-03-23T10:11:33Z,2020-03-23T10:12:36Z,CLOSED,False,1,1,1,https://github.com/jpszczolowski,Enable tmux mouse support,1,[],https://github.com/cahirwpz/mimiker/pull/652,https://github.com/jpszczolowski,5,https://github.com/cahirwpz/mimiker/pull/652#issuecomment-599923342,In my opinion it would be nice to have tmux mouse support enabled by default.,"This is a matter of local user settings. One is free to configure tmux as he wishes

@cahirwpz I've tried putting set -g mouse on into .tmux.conf.local file, but it doesn't seem to work.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,652,2020-03-16T20:00:20Z,2020-03-23T10:11:33Z,2020-03-23T10:12:36Z,CLOSED,False,1,1,1,https://github.com/jpszczolowski,Enable tmux mouse support,1,[],https://github.com/cahirwpz/mimiker/pull/652,https://github.com/cahirwpz,6,https://github.com/cahirwpz/mimiker/pull/652#issuecomment-602501158,In my opinion it would be nice to have tmux mouse support enabled by default.,Fixed by #654,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,654,2020-03-19T17:21:09Z,2020-03-23T10:11:15Z,2020-03-23T10:37:01Z,MERGED,True,6,4,2,https://github.com/mzr,Fix tmux overrides.,2,[],https://github.com/cahirwpz/mimiker/pull/654,https://github.com/mzr,1,https://github.com/cahirwpz/mimiker/pull/654,"This seems to be the simplest solution. There is an env var MIMIKER_REPO set by ./launch.
It is set to ./launch's cwd, and then it is used in .tmux.conf to source /.tmux.conf.local.","This seems to be the simplest solution. There is an env var MIMIKER_REPO set by ./launch.
It is set to ./launch's cwd, and then it is used in .tmux.conf to source /.tmux.conf.local.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,654,2020-03-19T17:21:09Z,2020-03-23T10:11:15Z,2020-03-23T10:37:01Z,MERGED,True,6,4,2,https://github.com/mzr,Fix tmux overrides.,2,[],https://github.com/cahirwpz/mimiker/pull/654,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/654#issuecomment-602500774,"This seems to be the simplest solution. There is an env var MIMIKER_REPO set by ./launch.
It is set to ./launch's cwd, and then it is used in .tmux.conf to source /.tmux.conf.local.","Tested it with .tmux.conf.local contents:
set -g mouse on

... and it works flawlessly.
@mzr Thanks for fixing that!",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,655,2020-03-21T17:29:28Z,2020-03-23T13:01:09Z,2020-03-24T11:36:13Z,MERGED,True,432,416,8,https://github.com/xThaid,VFS name resolver cleanup,5,[],https://github.com/cahirwpz/mimiker/pull/655,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/655,"After symbolic link resolution was introduced into Mimiker, internal buffer used by vnr has become mutable and it caused bugs like referencing released memory. This is fixed by slightly changing vnr interface. I've also made some cleanups. Fixes #653.","After symbolic link resolution was introduced into Mimiker, internal buffer used by vnr has become mutable and it caused bugs like referencing released memory. This is fixed by slightly changing vnr interface. I've also made some cleanups. Fixes #653.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,656,2020-03-21T18:49:37Z,2020-03-27T13:51:56Z,2020-03-27T13:51:56Z,MERGED,True,24,10,3,https://github.com/pj1031999,Allocate memory for page table.,11,[],https://github.com/cahirwpz/mimiker/pull/656,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/656,Allocate additional memory for page table needed before fully moving kernel to virtual memory.,Allocate additional memory for page table needed before fully moving kernel to virtual memory.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,656,2020-03-21T18:49:37Z,2020-03-27T13:51:56Z,2020-03-27T13:51:56Z,MERGED,True,24,10,3,https://github.com/pj1031999,Allocate memory for page table.,11,[],https://github.com/cahirwpz/mimiker/pull/656,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/656#issuecomment-602485832,Allocate additional memory for page table needed before fully moving kernel to virtual memory.,"Now, please move the code to boot.c and make it expose correct kernel end address for malta.c code.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,657,2020-03-24T11:33:02Z,2020-03-24T14:43:37Z,2020-03-24T14:43:37Z,MERGED,True,44,51,2,https://github.com/xThaid,Yet another attempt to clean up vfs_syscalls.c,2,[],https://github.com/cahirwpz/mimiker/pull/657,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/657,"Fix function call in vfs_namelookupat routine
Move repeatedly used code in a single functions
Clean up vfs_open","Fix function call in vfs_namelookupat routine
Move repeatedly used code in a single functions
Clean up vfs_open",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,658,2020-03-27T12:36:20Z,2020-03-31T11:16:49Z,2020-03-31T11:16:49Z,MERGED,True,153,125,16,https://github.com/xThaid,Implement *at syscalls,6,[],https://github.com/cahirwpz/mimiker/pull/658,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/658,"Next small step to system calls completeness. This PR introduces: mkdirat, unlinkat, faccessat, openat. rmdir system call is now a libc's wrapper of unlinkat.","Next small step to system calls completeness. This PR introduces: mkdirat, unlinkat, faccessat, openat. rmdir system call is now a libc's wrapper of unlinkat.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,659,2020-03-30T21:10:02Z,2020-05-08T13:07:34Z,2020-05-08T13:07:34Z,MERGED,True,88,48,7,https://github.com/pj1031999,Page table,20,[],https://github.com/cahirwpz/mimiker/pull/659,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/659,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,659,2020-03-30T21:10:02Z,2020-05-08T13:07:34Z,2020-05-08T13:07:34Z,MERGED,True,88,48,7,https://github.com/pj1031999,Page table,20,[],https://github.com/cahirwpz/mimiker/pull/659,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/659#issuecomment-610440998,,Please resolve conflicts with master.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,660,2020-03-31T09:29:38Z,2020-03-31T11:15:47Z,2020-03-31T11:15:47Z,MERGED,True,34,23,3,https://github.com/pj1031999,CTASSERT,5,[],https://github.com/cahirwpz/mimiker/pull/660,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/660,Create compile time assertion macro.,Create compile time assertion macro.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,661,2020-03-31T12:03:59Z,2020-03-31T13:49:28Z,2020-03-31T13:49:29Z,MERGED,True,198,9,16,https://github.com/xThaid,linkat system call,3,[],https://github.com/cahirwpz/mimiker/pull/661,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/661,Implemented linkat with related VOP_LINK operation. This implies we can create hard links.,Implemented linkat with related VOP_LINK operation. This implies we can create hard links.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,662,2020-04-01T15:43:02Z,2020-04-03T08:03:12Z,2020-04-03T08:03:12Z,MERGED,True,91,63,6,https://github.com/xThaid,Fix argument passing in system calls,2,[],https://github.com/cahirwpz/mimiker/pull/662,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/662,"032 ABI uses only 4 registers for parameter passing later arguments are passed on stack. This was not handled yet. Because of that, some system calls like linkat weren't working.","032 ABI uses only 4 registers for parameter passing later arguments are passed on stack. This was not handled yet. Because of that, some system calls like linkat weren't working.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,662,2020-04-01T15:43:02Z,2020-04-03T08:03:12Z,2020-04-03T08:03:12Z,MERGED,True,91,63,6,https://github.com/xThaid,Fix argument passing in system calls,2,[],https://github.com/cahirwpz/mimiker/pull/662,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/662#issuecomment-608290707,"032 ABI uses only 4 registers for parameter passing later arguments are passed on stack. This was not handled yet. Because of that, some system calls like linkat weren't working.",kernel_tests_clang failures are due to recent changes in mips/ebase.S which will be fixed soon.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,663,2020-04-04T16:40:26Z,2020-04-06T13:23:42Z,2020-04-30T10:35:10Z,MERGED,True,14,5,1,https://github.com/jpszczolowski,Properly restore FPU context,2,[],https://github.com/cahirwpz/mimiker/pull/663,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/663,"Previous change to ebase.S file caused the FPU context to be restored improperly. This is how it should be done:

FPU has to be enabled before calling LOAD_FPU_CTX(),
we should decide whether or not to restore FPU context based on status (not pc) register.","Previous change to ebase.S file caused the FPU context to be restored improperly. This is how it should be done:

FPU has to be enabled before calling LOAD_FPU_CTX(),
we should decide whether or not to restore FPU context based on status (not pc) register.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,664,2020-04-05T14:13:50Z,2020-04-17T15:38:23Z,2020-04-17T15:48:31Z,MERGED,True,24,5,6,https://github.com/jpszczolowski,Add KASAN-enabled kernel tests to CircleCI,7,[],https://github.com/cahirwpz/mimiker/pull/664,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/664,This PR should be merged after #616,This PR should be merged after #616,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,665,2020-04-06T11:30:35Z,2020-04-06T11:47:54Z,2020-04-06T11:47:55Z,MERGED,True,8,6,1,https://github.com/xThaid,Fix arguments passing to open system call wrapper,1,[],https://github.com/cahirwpz/mimiker/pull/665,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/665,There was a problem with passing arguments that are variable. Now it should be OK.,There was a problem with passing arguments that are variable. Now it should be OK.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,666,2020-04-06T22:08:04Z,2020-04-24T06:31:08Z,2020-04-24T06:31:08Z,MERGED,True,23,20,5,https://github.com/pj1031999,pmap cleanup,15,[],https://github.com/cahirwpz/mimiker/pull/666,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/666,Fixed usage of pte_t and pde_t.,Fixed usage of pte_t and pde_t.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,666,2020-04-06T22:08:04Z,2020-04-24T06:31:08Z,2020-04-24T06:31:08Z,MERGED,True,23,20,5,https://github.com/pj1031999,pmap cleanup,15,[],https://github.com/cahirwpz/mimiker/pull/666,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/666#issuecomment-610319537,Fixed usage of pte_t and pde_t.,"Don't you want to clean up boot.c as well (i.e. line 77) ?
EDIT: And pmap.h line 11... maybe there're also other places that require attention?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,667,2020-04-07T08:40:15Z,2020-04-07T10:50:51Z,2020-04-07T10:50:51Z,MERGED,True,142,7,17,https://github.com/xThaid,Implement fchmodat system call,1,[],https://github.com/cahirwpz/mimiker/pull/667,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/667,"chmod, lchmod, fchmod, fchmodat system calls are available in Mimiker now.","chmod, lchmod, fchmod, fchmodat system calls are available in Mimiker now.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,670,2020-04-07T18:52:43Z,2020-04-21T11:04:53Z,2020-04-21T11:04:53Z,MERGED,True,146,24,9,https://github.com/j-piecuch,SIGSTOP/SIGCONT implementation,27,[],https://github.com/cahirwpz/mimiker/pull/670,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/670,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,671,2020-04-10T15:26:52Z,2020-05-16T06:44:47Z,2020-06-10T17:42:20Z,MERGED,True,148,39,8,https://github.com/jpszczolowski,KASAN: add heap quarantine,56,[],https://github.com/cahirwpz/mimiker/pull/671,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/671,Add pool & kmalloc quarantine that helps detecting use-after-free bugs,Add pool & kmalloc quarantine that helps detecting use-after-free bugs,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,671,2020-04-10T15:26:52Z,2020-05-16T06:44:47Z,2020-06-10T17:42:20Z,MERGED,True,148,39,8,https://github.com/jpszczolowski,KASAN: add heap quarantine,56,[],https://github.com/cahirwpz/mimiker/pull/671,https://github.com/jpszczolowski,2,https://github.com/cahirwpz/mimiker/pull/671#issuecomment-619346434,Add pool & kmalloc quarantine that helps detecting use-after-free bugs,Kernel tests will fail here (with KASAN use-after-free bug) until #685 is resolved,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,671,2020-04-10T15:26:52Z,2020-05-16T06:44:47Z,2020-06-10T17:42:20Z,MERGED,True,148,39,8,https://github.com/jpszczolowski,KASAN: add heap quarantine,56,[],https://github.com/cahirwpz/mimiker/pull/671,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/671#issuecomment-629185060,Add pool & kmalloc quarantine that helps detecting use-after-free bugs,Please resolve conflicts.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,671,2020-04-10T15:26:52Z,2020-05-16T06:44:47Z,2020-06-10T17:42:20Z,MERGED,True,148,39,8,https://github.com/jpszczolowski,KASAN: add heap quarantine,56,[],https://github.com/cahirwpz/mimiker/pull/671,https://github.com/jpszczolowski,4,https://github.com/cahirwpz/mimiker/pull/671#issuecomment-629201525,Add pool & kmalloc quarantine that helps detecting use-after-free bugs,@cahirwpz conflicts resolved!,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,673,2020-04-14T14:27:02Z,2020-10-05T10:25:58Z,2020-10-05T10:25:58Z,MERGED,True,6,2,1,https://github.com/j-piecuch,Fix potential lost wakeup in cv_wait(_timed).,3,[],https://github.com/cahirwpz/mimiker/pull/673,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/673,Fixes #668,Fixes #668,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,673,2020-04-14T14:27:02Z,2020-10-05T10:25:58Z,2020-10-05T10:25:58Z,MERGED,True,6,2,1,https://github.com/j-piecuch,Fix potential lost wakeup in cv_wait(_timed).,3,[],https://github.com/cahirwpz/mimiker/pull/673,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/673#issuecomment-616601282,Fixes #668,I reckon this PR tries to workaround some fundamental issues. I'm still looking into #242 to decide.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,673,2020-04-14T14:27:02Z,2020-10-05T10:25:58Z,2020-10-05T10:25:58Z,MERGED,True,6,2,1,https://github.com/j-piecuch,Fix potential lost wakeup in cv_wait(_timed).,3,[],https://github.com/cahirwpz/mimiker/pull/673,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/673#issuecomment-703543298,Fixes #668,I consider it as a temporary solution and accept it.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,674,2020-04-14T15:00:09Z,2020-04-14T19:19:44Z,2020-04-14T19:19:44Z,MERGED,True,21,3,1,https://github.com/j-piecuch,Fix race between sig_kill and _sleepq_wait.,3,[],https://github.com/cahirwpz/mimiker/pull/674,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/674,Fixes #669,Fixes #669,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,675,2020-04-14T18:48:31Z,2020-04-17T11:26:20Z,2020-04-17T11:26:20Z,MERGED,True,45,3,8,https://github.com/j-piecuch,Add sched_yield syscall.,8,[],https://github.com/cahirwpz/mimiker/pull/675,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/675,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,676,2020-04-17T16:12:57Z,2020-04-17T17:06:09Z,2020-04-17T17:06:09Z,MERGED,True,2,18,3,https://github.com/j-piecuch,"Remove yield(), use thread_yield() instead.",2,[],https://github.com/cahirwpz/mimiker/pull/676,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/676,For some reason I thought that we didn't have a yield function in the kernel. Turns out we did.,For some reason I thought that we didn't have a yield function in the kernel. Turns out we did.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,677,2020-04-17T23:25:33Z,2020-04-20T14:40:15Z,2020-04-20T16:32:56Z,MERGED,True,2,2,2,https://github.com/jpszczolowski,mtx_init & spin_init should set proper lock type,2,[],https://github.com/cahirwpz/mimiker/pull/677,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/677,"Right now spin_init does not set spinlock's type to LK_SPIN, but it should. Look at SPIN_INITIALIZER implementation:

  
    
      mimiker/include/sys/spinlock.h
    
    
        Lines 33 to 36
      in
      019d278
    
  
  
    

        
          
           #define SPIN_INITIALIZER(type)                                                 \ 
        

        
          
             (spin_t) {                                                                   \ 
        

        
          
               .s_type = (type) | LK_SPIN                                                 \ 
        

        
          
             } 
        
    
  


spin_init is used in atkbdc and ns16550:

  
    
      mimiker/sys/drv/ns16550.c
    
    
         Line 163
      in
      019d278
    
  
  
    

        
          
           spin_init(&ns16550->lock, 0); 
        
    
  


So in fact ns16550->lock (of type spin_t) is used inside cv_wait as a mutex.

  
    
      mimiker/sys/drv/ns16550.c
    
    
        Lines 56 to 60
      in
      019d278
    
  
  
    

        
          
           WITH_SPIN_LOCK (&ns16550->lock) { 
        

        
          
             /* For simplicity, copy to the user space one byte at a time. */ 
        

        
          
             while (!ringbuf_getb(&ns16550->rx_buf, &byte)) 
        

        
          
               cv_wait(&ns16550->rx_nonempty, &ns16550->lock); 
        

        
          
           } 
        
    
  


But we mustn't use mutexes in the lower half!","Right now spin_init does not set spinlock's type to LK_SPIN, but it should. Look at SPIN_INITIALIZER implementation:

  
    
      mimiker/include/sys/spinlock.h
    
    
        Lines 33 to 36
      in
      019d278
    
  
  
    

        
          
           #define SPIN_INITIALIZER(type)                                                 \ 
        

        
          
             (spin_t) {                                                                   \ 
        

        
          
               .s_type = (type) | LK_SPIN                                                 \ 
        

        
          
             } 
        
    
  


spin_init is used in atkbdc and ns16550:

  
    
      mimiker/sys/drv/ns16550.c
    
    
         Line 163
      in
      019d278
    
  
  
    

        
          
           spin_init(&ns16550->lock, 0); 
        
    
  


So in fact ns16550->lock (of type spin_t) is used inside cv_wait as a mutex.

  
    
      mimiker/sys/drv/ns16550.c
    
    
        Lines 56 to 60
      in
      019d278
    
  
  
    

        
          
           WITH_SPIN_LOCK (&ns16550->lock) { 
        

        
          
             /* For simplicity, copy to the user space one byte at a time. */ 
        

        
          
             while (!ringbuf_getb(&ns16550->rx_buf, &byte)) 
        

        
          
               cv_wait(&ns16550->rx_nonempty, &ns16550->lock); 
        

        
          
           } 
        
    
  


But we mustn't use mutexes in the lower half!",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,677,2020-04-17T23:25:33Z,2020-04-20T14:40:15Z,2020-04-20T16:32:56Z,MERGED,True,2,2,2,https://github.com/jpszczolowski,mtx_init & spin_init should set proper lock type,2,[],https://github.com/cahirwpz/mimiker/pull/677,https://github.com/jpszczolowski,2,https://github.com/cahirwpz/mimiker/pull/677#issuecomment-615507988,"Right now spin_init does not set spinlock's type to LK_SPIN, but it should. Look at SPIN_INITIALIZER implementation:

  
    
      mimiker/include/sys/spinlock.h
    
    
        Lines 33 to 36
      in
      019d278
    
  
  
    

        
          
           #define SPIN_INITIALIZER(type)                                                 \ 
        

        
          
             (spin_t) {                                                                   \ 
        

        
          
               .s_type = (type) | LK_SPIN                                                 \ 
        

        
          
             } 
        
    
  


spin_init is used in atkbdc and ns16550:

  
    
      mimiker/sys/drv/ns16550.c
    
    
         Line 163
      in
      019d278
    
  
  
    

        
          
           spin_init(&ns16550->lock, 0); 
        
    
  


So in fact ns16550->lock (of type spin_t) is used inside cv_wait as a mutex.

  
    
      mimiker/sys/drv/ns16550.c
    
    
        Lines 56 to 60
      in
      019d278
    
  
  
    

        
          
           WITH_SPIN_LOCK (&ns16550->lock) { 
        

        
          
             /* For simplicity, copy to the user space one byte at a time. */ 
        

        
          
             while (!ringbuf_getb(&ns16550->rx_buf, &byte)) 
        

        
          
               cv_wait(&ns16550->rx_nonempty, &ns16550->lock); 
        

        
          
           } 
        
    
  


But we mustn't use mutexes in the lower half!",I've just checked mtx_init and it also doesn't set lock type to LK_SLEEP.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,677,2020-04-17T23:25:33Z,2020-04-20T14:40:15Z,2020-04-20T16:32:56Z,MERGED,True,2,2,2,https://github.com/jpszczolowski,mtx_init & spin_init should set proper lock type,2,[],https://github.com/cahirwpz/mimiker/pull/677,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/677#issuecomment-616597289,"Right now spin_init does not set spinlock's type to LK_SPIN, but it should. Look at SPIN_INITIALIZER implementation:

  
    
      mimiker/include/sys/spinlock.h
    
    
        Lines 33 to 36
      in
      019d278
    
  
  
    

        
          
           #define SPIN_INITIALIZER(type)                                                 \ 
        

        
          
             (spin_t) {                                                                   \ 
        

        
          
               .s_type = (type) | LK_SPIN                                                 \ 
        

        
          
             } 
        
    
  


spin_init is used in atkbdc and ns16550:

  
    
      mimiker/sys/drv/ns16550.c
    
    
         Line 163
      in
      019d278
    
  
  
    

        
          
           spin_init(&ns16550->lock, 0); 
        
    
  


So in fact ns16550->lock (of type spin_t) is used inside cv_wait as a mutex.

  
    
      mimiker/sys/drv/ns16550.c
    
    
        Lines 56 to 60
      in
      019d278
    
  
  
    

        
          
           WITH_SPIN_LOCK (&ns16550->lock) { 
        

        
          
             /* For simplicity, copy to the user space one byte at a time. */ 
        

        
          
             while (!ringbuf_getb(&ns16550->rx_buf, &byte)) 
        

        
          
               cv_wait(&ns16550->rx_nonempty, &ns16550->lock); 
        

        
          
           } 
        
    
  


But we mustn't use mutexes in the lower half!",I'll merge it as is and pass the baton to @j-piecuch for further improvements of lock infrastructure.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,679,2020-04-20T19:01:22Z,2020-04-23T09:44:53Z,2020-04-23T09:44:53Z,MERGED,True,96,62,11,https://github.com/j-piecuch,Adjustments to lock_type_t,14,[],https://github.com/cahirwpz/mimiker/pull/679,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/679,"Add a new lock type (LK_BLOCK) that represents ordinary mutexes that use turnstiles
Adjust lock type values so that it is possible to check that the caller doesn't try to set the lock type themselves in mtx_init and spin_init","Add a new lock type (LK_BLOCK) that represents ordinary mutexes that use turnstiles
Adjust lock type values so that it is possible to check that the caller doesn't try to set the lock type themselves in mtx_init and spin_init",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,679,2020-04-20T19:01:22Z,2020-04-23T09:44:53Z,2020-04-23T09:44:53Z,MERGED,True,96,62,11,https://github.com/j-piecuch,Adjustments to lock_type_t,14,[],https://github.com/cahirwpz/mimiker/pull/679,https://github.com/jpszczolowski,2,https://github.com/cahirwpz/mimiker/pull/679#issuecomment-617083764,"Add a new lock type (LK_BLOCK) that represents ordinary mutexes that use turnstiles
Adjust lock type values so that it is possible to check that the caller doesn't try to set the lock type themselves in mtx_init and spin_init",What do you think of an idea of having a struct for lock attributes that contains two fields: enum-type and int-flags? It would be very self-descriptive.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,679,2020-04-20T19:01:22Z,2020-04-23T09:44:53Z,2020-04-23T09:44:53Z,MERGED,True,96,62,11,https://github.com/j-piecuch,Adjustments to lock_type_t,14,[],https://github.com/cahirwpz/mimiker/pull/679,https://github.com/j-piecuch,3,https://github.com/cahirwpz/mimiker/pull/679#issuecomment-617101099,"Add a new lock type (LK_BLOCK) that represents ordinary mutexes that use turnstiles
Adjust lock type values so that it is possible to check that the caller doesn't try to set the lock type themselves in mtx_init and spin_init","What do you think of an idea of having a struct for lock attributes that contains two fields: enum-type and int-flags? It would be very self-descriptive.

Yes, but it would double the size of the type... I don't know if we want that.
I added some comments to lock_attrs_t that hopefully clarify its usage.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,679,2020-04-20T19:01:22Z,2020-04-23T09:44:53Z,2020-04-23T09:44:53Z,MERGED,True,96,62,11,https://github.com/j-piecuch,Adjustments to lock_type_t,14,[],https://github.com/cahirwpz/mimiker/pull/679,https://github.com/jpszczolowski,4,https://github.com/cahirwpz/mimiker/pull/679#issuecomment-617134668,"Add a new lock type (LK_BLOCK) that represents ordinary mutexes that use turnstiles
Adjust lock type values so that it is possible to check that the caller doesn't try to set the lock type themselves in mtx_init and spin_init",@j-piecuch I've added some getters in sys/lock.h file. Please have a look.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,679,2020-04-20T19:01:22Z,2020-04-23T09:44:53Z,2020-04-23T09:44:53Z,MERGED,True,96,62,11,https://github.com/j-piecuch,Adjustments to lock_type_t,14,[],https://github.com/cahirwpz/mimiker/pull/679,https://github.com/j-piecuch,5,https://github.com/cahirwpz/mimiker/pull/679#issuecomment-617643084,"Add a new lock type (LK_BLOCK) that represents ordinary mutexes that use turnstiles
Adjust lock type values so that it is possible to check that the caller doesn't try to set the lock type themselves in mtx_init and spin_init","@j-piecuch I've added some getters in sys/lock.h file. Please have a look.

LGTM. I also thought about changing LK_{BLOCK,SPIN,SLEEP} to LK_TYPE_{BLOCK,SPIN,SLEEP} to make it obvious that they represent the lock's type without looking at the documentation.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,680,2020-04-21T10:52:21Z,2020-04-30T09:05:40Z,2020-04-30T09:05:40Z,MERGED,True,214,39,8,https://github.com/j-piecuch,sigprocmask implementation,68,[],https://github.com/cahirwpz/mimiker/pull/680,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/680,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,680,2020-04-21T10:52:21Z,2020-04-30T09:05:40Z,2020-04-30T09:05:40Z,MERGED,True,214,39,8,https://github.com/j-piecuch,sigprocmask implementation,68,[],https://github.com/cahirwpz/mimiker/pull/680,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/680#issuecomment-620532845,,Resolve conflicts please.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,681,2020-04-21T12:02:43Z,2020-05-15T18:24:05Z,2020-05-15T18:24:05Z,MERGED,True,256,79,13,https://github.com/j-piecuch,Add WUNTRACED and WCONTINUED support to wait4,96,[],https://github.com/cahirwpz/mimiker/pull/681,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/681,"WUNTRACED lets the caller wait for a child process to stop.
WCONTINUED lets the caller wait for a child process to continue.
This PR includes changes from #680","WUNTRACED lets the caller wait for a child process to stop.
WCONTINUED lets the caller wait for a child process to continue.
This PR includes changes from #680",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,682,2020-04-21T13:07:06Z,2020-04-25T08:35:38Z,2020-04-25T08:35:38Z,CLOSED,False,3,3,1,https://github.com/jpszczolowski,Increase timeouts in run_tests.py,4,['WiP'],https://github.com/cahirwpz/mimiker/pull/682,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/682,"Sometimes we cannot see why a kernel test failed because there is a timeout while waiting for gdb to spawn / finish executing our command.
This PR increases timeouts in run_tests.py by some arbitrary values.","Sometimes we cannot see why a kernel test failed because there is a timeout while waiting for gdb to spawn / finish executing our command.
This PR increases timeouts in run_tests.py by some arbitrary values.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,682,2020-04-21T13:07:06Z,2020-04-25T08:35:38Z,2020-04-25T08:35:38Z,CLOSED,False,3,3,1,https://github.com/jpszczolowski,Increase timeouts in run_tests.py,4,['WiP'],https://github.com/cahirwpz/mimiker/pull/682,https://github.com/jpszczolowski,2,https://github.com/cahirwpz/mimiker/pull/682#issuecomment-619343354,"Sometimes we cannot see why a kernel test failed because there is a timeout while waiting for gdb to spawn / finish executing our command.
This PR increases timeouts in run_tests.py by some arbitrary values.",This PR does not solve the problem. Please see issue #686,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,683,2020-04-22T07:24:34Z,2020-04-23T09:46:30Z,2020-04-28T14:07:48Z,MERGED,True,17,6,6,https://github.com/cahirwpz,Move callout structures from stack to dynamically or statically allocated memory,5,[],https://github.com/cahirwpz/mimiker/pull/683,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/683,"Move thread sleep callout from stack to thread structure.
Review tests/sleepq.c
Move one callout in tests/callout.c to bss section.","Move thread sleep callout from stack to thread structure.
Review tests/sleepq.c
Move one callout in tests/callout.c to bss section.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,684,2020-04-22T16:10:44Z,2020-04-23T08:38:39Z,2020-04-23T08:38:39Z,MERGED,True,9,10,2,https://github.com/j-piecuch,Don't copyin user sigaction if the pointer is NULL.,1,[],https://github.com/cahirwpz/mimiker/pull/684,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/684,"The user might want to only read a signal's disposition, in which case the input sigaction pointer will be NULL.
This is not an error, and we shouldn't try to copyin the sigaction in that case.","The user might want to only read a signal's disposition, in which case the input sigaction pointer will be NULL.
This is not an error, and we shouldn't try to copyin the sigaction in that case.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,687,2020-04-27T16:38:17Z,2020-04-28T13:15:12Z,2020-04-28T13:15:12Z,MERGED,True,3,3,2,https://github.com/xThaid,Fix two bugs related to file modes,2,[],https://github.com/cahirwpz/mimiker/pull/687,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/687,"When a file had been truncated (e.g. while opening a file with O_TRUNC flag) its mode was also removed. Invalid setting in vattr_t was the cause.
The second problem was that file type was omitted while changing permissions.","When a file had been truncated (e.g. while opening a file with O_TRUNC flag) its mode was also removed. Invalid setting in vattr_t was the cause.
The second problem was that file type was omitted while changing permissions.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,688,2020-04-28T09:28:13Z,2020-04-28T10:35:26Z,2020-04-28T10:35:27Z,MERGED,True,8,10,4,https://github.com/j-piecuch,Don't unlock the process in sig_kill.,2,[],https://github.com/cahirwpz/mimiker/pull/688,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/688,This only led to errors in sig_kill where we forgot to unlock it.,This only led to errors in sig_kill where we forgot to unlock it.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,688,2020-04-28T09:28:13Z,2020-04-28T10:35:26Z,2020-04-28T10:35:27Z,MERGED,True,8,10,4,https://github.com/j-piecuch,Don't unlock the process in sig_kill.,2,[],https://github.com/cahirwpz/mimiker/pull/688,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/688#issuecomment-620497586,This only led to errors in sig_kill where we forgot to unlock it.,LGTM However I'd add an information here: https://mimiker.ii.uni.wroc.pl/source/xref/mimiker/include/sys/signal.h?r=0d9fc7f1#82 that it returns with p::p_lock being held as well.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,689,2020-04-28T10:10:22Z,2020-04-28T12:08:50Z,2020-04-28T12:08:50Z,MERGED,True,16,4,2,https://github.com/j-piecuch,Implement auto-reap.,2,[],https://github.com/cahirwpz/mimiker/pull/689,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/689,"If the parent of an exiting child ignores SIGCHLD, the child shouldn't leave any state for the parent to reap.","If the parent of an exiting child ignores SIGCHLD, the child shouldn't leave any state for the parent to reap.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,689,2020-04-28T10:10:22Z,2020-04-28T12:08:50Z,2020-04-28T12:08:50Z,MERGED,True,16,4,2,https://github.com/j-piecuch,Implement auto-reap.,2,[],https://github.com/cahirwpz/mimiker/pull/689,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/689#issuecomment-620525841,"If the parent of an exiting child ignores SIGCHLD, the child shouldn't leave any state for the parent to reap.",Resolve conflicts please.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,689,2020-04-28T10:10:22Z,2020-04-28T12:08:50Z,2020-04-28T12:08:50Z,MERGED,True,16,4,2,https://github.com/j-piecuch,Implement auto-reap.,2,[],https://github.com/cahirwpz/mimiker/pull/689,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/689#issuecomment-620564940,"If the parent of an exiting child ignores SIGCHLD, the child shouldn't leave any state for the parent to reap.",LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,690,2020-04-28T11:41:09Z,2020-05-20T09:56:07Z,2020-05-20T09:56:07Z,CLOSED,False,72,28,3,https://github.com/j-piecuch,Rework PID management,12,[],https://github.com/cahirwpz/mimiker/pull/690,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/690,"It shouldn't be possible to allocate a new PID such that there is a process group with PGID equal to the new PID (that would mean that processes could accidentally become leaders of unrelated process groups). Currently, no such checks are performed on PID allocation. This PR fixes this issue and makes PID lookups faster by using a table instead of a linked list.","It shouldn't be possible to allocate a new PID such that there is a process group with PGID equal to the new PID (that would mean that processes could accidentally become leaders of unrelated process groups). Currently, no such checks are performed on PID allocation. This PR fixes this issue and makes PID lookups faster by using a table instead of a linked list.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,690,2020-04-28T11:41:09Z,2020-05-20T09:56:07Z,2020-05-20T09:56:07Z,CLOSED,False,72,28,3,https://github.com/j-piecuch,Rework PID management,12,[],https://github.com/cahirwpz/mimiker/pull/690,https://github.com/j-piecuch,2,https://github.com/cahirwpz/mimiker/pull/690#issuecomment-631372898,"It shouldn't be possible to allocate a new PID such that there is a process group with PGID equal to the new PID (that would mean that processes could accidentally become leaders of unrelated process groups). Currently, no such checks are performed on PID allocation. This PR fixes this issue and makes PID lookups faster by using a table instead of a linked list.","This PR is superseded by #709, closing.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,691,2020-04-28T12:39:33Z,2020-07-14T14:29:04Z,2020-07-14T14:29:05Z,MERGED,True,231,48,7,https://github.com/j-piecuch,Basic session support,187,[],https://github.com/cahirwpz/mimiker/pull/691,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/691,Includes changes from #681,Includes changes from #681,True,{'HOORAY': ['https://github.com/jpszczolowski']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,692,2020-04-28T13:02:18Z,2020-11-02T17:28:25Z,2020-11-02T17:28:25Z,MERGED,True,109,76,4,https://github.com/xThaid,Cleanup locking in VFS name resolver,8,[],https://github.com/cahirwpz/mimiker/pull/692,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/692,"As VFS name resolver grew bigger and bigger, new code was written, but in some places it wasn't consistent in terms of locking. I tidied up the code, changed some variables names (I found some of them confusing) and wrote a small brief describing the assumptions and conventions about locking. I also handled some edge cases occurring while crossing mounting points.
Link to the brief.","As VFS name resolver grew bigger and bigger, new code was written, but in some places it wasn't consistent in terms of locking. I tidied up the code, changed some variables names (I found some of them confusing) and wrote a small brief describing the assumptions and conventions about locking. I also handled some edge cases occurring while crossing mounting points.
Link to the brief.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,693,2020-04-28T13:39:54Z,2020-04-30T08:12:38Z,2020-04-30T08:12:50Z,MERGED,True,114,108,6,https://github.com/jpszczolowski,KASAN & allocators: cleanup,7,[],https://github.com/cahirwpz/mimiker/pull/693,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/693,"Remove kasan_ prefix from static KASAN functions
Better KASAN test fail report by calling ktest_failure
Use non-static kasan_mark_valid instead of static kasan_shadow_clean (they did the same thing)
Delete kasan_shadow_clean
Cleanup in malloc.c & pool.c
Provide additional vmem's P_BT_BOOTPAGE page","Remove kasan_ prefix from static KASAN functions
Better KASAN test fail report by calling ktest_failure
Use non-static kasan_mark_valid instead of static kasan_shadow_clean (they did the same thing)
Delete kasan_shadow_clean
Cleanup in malloc.c & pool.c
Provide additional vmem's P_BT_BOOTPAGE page",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,694,2020-04-28T15:21:16Z,2020-04-28T15:54:25Z,2020-04-28T15:54:25Z,MERGED,True,10,5,1,https://github.com/j-piecuch,Temporary fix of test_callout_stop.,1,[],https://github.com/cahirwpz/mimiker/pull/694,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/694,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,695,2020-04-29T18:21:04Z,2020-05-16T11:15:28Z,2020-05-16T11:15:28Z,MERGED,True,16,6,2,https://github.com/j-piecuch,Auto-reap fixes,6,[],https://github.com/cahirwpz/mimiker/pull/695,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/695,"Currently, if a process that ignores SIGCHLD forks and waits for the child to exit, it will wait forever, but it can happen for 2 different reasons:

If the child exits before the parent calls wait(), do_waitpid will fail to find a child process matching the criteria (because there are no children at all) and will wait until a child changes state, which will never happen.
What should happen: do_waitpid should notice that there are not child processes matching the criteria and return immediately with ECHILD.
If the call to wait() happens before the child exits, the parent will wait until a child changes state, but the child will not notify the parent in proc_exit, because auto_reap will be true.
What should happen: the child should notify the parent unconditionally in proc_exit. The parent will then check that it has no children matching the criteria and return with ECHILD.

Both cases are bugs. This PR fixes both of them.","Currently, if a process that ignores SIGCHLD forks and waits for the child to exit, it will wait forever, but it can happen for 2 different reasons:

If the child exits before the parent calls wait(), do_waitpid will fail to find a child process matching the criteria (because there are no children at all) and will wait until a child changes state, which will never happen.
What should happen: do_waitpid should notice that there are not child processes matching the criteria and return immediately with ECHILD.
If the call to wait() happens before the child exits, the parent will wait until a child changes state, but the child will not notify the parent in proc_exit, because auto_reap will be true.
What should happen: the child should notify the parent unconditionally in proc_exit. The parent will then check that it has no children matching the criteria and return with ECHILD.

Both cases are bugs. This PR fixes both of them.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,696,2020-04-30T08:10:47Z,2020-04-30T09:06:06Z,2020-04-30T09:06:06Z,MERGED,True,3,2,2,https://github.com/j-piecuch,Use sched_yield when busy-waiting in user tests.,1,[],https://github.com/cahirwpz/mimiker/pull/696,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/696,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,697,2020-04-30T10:33:32Z,2020-05-15T11:32:11Z,2020-05-15T11:33:49Z,MERGED,True,146,37,9,https://github.com/jpszczolowski,KASAN: instrument allocators & memory-related functions,9,[],https://github.com/cahirwpz/mimiker/pull/697,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/697,"Add alloca instrumentation
Add copyin, copyinstr, copyout instrumentation
Add pool & kmalloc instrumentation that detects overflow and use-after-free bugs","Add alloca instrumentation
Add copyin, copyinstr, copyout instrumentation
Add pool & kmalloc instrumentation that detects overflow and use-after-free bugs",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,697,2020-04-30T10:33:32Z,2020-05-15T11:32:11Z,2020-05-15T11:33:49Z,MERGED,True,146,37,9,https://github.com/jpszczolowski,KASAN: instrument allocators & memory-related functions,9,[],https://github.com/cahirwpz/mimiker/pull/697,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/697#issuecomment-629184675,"Add alloca instrumentation
Add copyin, copyinstr, copyout instrumentation
Add pool & kmalloc instrumentation that detects overflow and use-after-free bugs",Please note that you should use #if KASAN instead of #ifdef KASAN since KASAN is always defined but it has (boolean) value now.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,698,2020-04-30T10:58:43Z,2020-05-01T09:10:17Z,2020-05-01T09:58:41Z,MERGED,True,9,0,3,https://github.com/jpszczolowski,Remove resource from device before deallocation,2,[],https://github.com/cahirwpz/mimiker/pull/698,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/698,"gt_pci_release_resource now calls device_remove_resource, so deallocated resource does not stay on dev->resources tail queue (note that gt_pci_alloc_resource calls device_add_resource, which adds a newly allocated resource to dev->resources)
device_alloc now calls TAILQ_INIT(&dev->resources) (another bug fixed?)

Fixes #685","gt_pci_release_resource now calls device_remove_resource, so deallocated resource does not stay on dev->resources tail queue (note that gt_pci_alloc_resource calls device_add_resource, which adds a newly allocated resource to dev->resources)
device_alloc now calls TAILQ_INIT(&dev->resources) (another bug fixed?)

Fixes #685",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,699,2020-05-05T12:16:46Z,2020-05-06T05:40:50Z,2020-05-06T09:54:29Z,MERGED,True,5,5,2,https://github.com/jpszczolowski,KASAN: rename PTE to PDE in boot code,1,[],https://github.com/cahirwpz/mimiker/pull/699,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/699,There is a mistake that PDE (page directory entry) is described as PTE (page table entry) in KASAN's code.,There is a mistake that PDE (page directory entry) is described as PTE (page table entry) in KASAN's code.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,700,2020-05-08T22:23:52Z,2020-05-22T16:33:16Z,2020-05-22T16:33:17Z,MERGED,True,419,46,28,https://github.com/franciscozdo,Credentials syscalls,18,[],https://github.com/cahirwpz/mimiker/pull/700,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/700,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,701,2020-05-11T23:18:11Z,2020-05-15T13:43:40Z,2020-05-15T13:43:41Z,MERGED,True,66,21,8,https://github.com/pj1031999,Introduce cache bits,8,[],https://github.com/cahirwpz/mimiker/pull/701,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/701,"According to MIPS32® 24KE™ Processor Core Family Software User’s Manual we have four different cacheabilities (5.3 table 5.8).

Cacheable, noncoherent, write-through, no write allocate
Uncached
Cacheable, noncoherent, write-back, write allocate
Uncached Accelerated

In this pull request I want to introduce interface for pmap to set those cacheabilities.
Default mode is write-through.
In kmem and vm I set write-back as actual policy.","According to MIPS32® 24KE™ Processor Core Family Software User’s Manual we have four different cacheabilities (5.3 table 5.8).

Cacheable, noncoherent, write-through, no write allocate
Uncached
Cacheable, noncoherent, write-back, write allocate
Uncached Accelerated

In this pull request I want to introduce interface for pmap to set those cacheabilities.
Default mode is write-through.
In kmem and vm I set write-back as actual policy.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,702,2020-05-12T10:27:46Z,2020-05-25T20:05:35Z,2020-05-25T20:05:35Z,MERGED,True,99,15,12,https://github.com/xThaid,Implement statvfs & fstatvfs system calls,7,[],https://github.com/cahirwpz/mimiker/pull/702,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/702,"statvfs & fstatvfs are now implemented, but at the moment they are quite nonfunctional since none of our file systems supports it.","statvfs & fstatvfs are now implemented, but at the moment they are quite nonfunctional since none of our file systems supports it.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,702,2020-05-12T10:27:46Z,2020-05-25T20:05:35Z,2020-05-25T20:05:35Z,MERGED,True,99,15,12,https://github.com/xThaid,Implement statvfs & fstatvfs system calls,7,[],https://github.com/cahirwpz/mimiker/pull/702,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/702#issuecomment-633702014,"statvfs & fstatvfs are now implemented, but at the moment they are quite nonfunctional since none of our file systems supports it.",LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,703,2020-05-12T13:35:29Z,2020-06-09T12:46:24Z,2020-06-09T12:46:24Z,MERGED,True,144,33,18,https://github.com/wiklam,Gettimeofday syscall.,15,[],https://github.com/cahirwpz/mimiker/pull/703,https://github.com/wiklam,1,https://github.com/cahirwpz/mimiker/pull/703,Adding gettimeofday syscall with user test.,Adding gettimeofday syscall with user test.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,704,2020-05-13T11:52:08Z,2020-05-15T10:05:41Z,2020-05-15T10:05:41Z,MERGED,True,3,0,1,https://github.com/j-piecuch,Clean .kasan.D without having to pass `KASAN=1` to `make clean`.,1,[],https://github.com/cahirwpz/mimiker/pull/704,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/704,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,704,2020-05-13T11:52:08Z,2020-05-15T10:05:41Z,2020-05-15T10:05:41Z,MERGED,True,3,0,1,https://github.com/j-piecuch,Clean .kasan.D without having to pass `KASAN=1` to `make clean`.,1,[],https://github.com/cahirwpz/mimiker/pull/704,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/704#issuecomment-629149940,,LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,705,2020-05-14T11:45:07Z,2020-05-15T10:04:55Z,2020-05-15T10:04:55Z,MERGED,True,2,1,1,https://github.com/j-piecuch,Fix race between kmem_free() and kmem_alloc().,1,[],https://github.com/cahirwpz/mimiker/pull/705,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/705,"A race is possible where thread 1 call kmem_free() and is preemted
right after vmem_free(). Then, thread 2 calls kmem_alloc() and
allocates the piece of address space just freed. Then, thread 1
marks the allocated addresses as invalid and unmaps them from the
kernel pmap.
By moving the call to vmem_free() to the very end, we make sure
that we 'own' the piece of address space until we're done with the
bookkeeping.","A race is possible where thread 1 call kmem_free() and is preemted
right after vmem_free(). Then, thread 2 calls kmem_alloc() and
allocates the piece of address space just freed. Then, thread 1
marks the allocated addresses as invalid and unmaps them from the
kernel pmap.
By moving the call to vmem_free() to the very end, we make sure
that we 'own' the piece of address space until we're done with the
bookkeeping.",True,{'HOORAY': ['https://github.com/jpszczolowski']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,705,2020-05-14T11:45:07Z,2020-05-15T10:04:55Z,2020-05-15T10:04:55Z,MERGED,True,2,1,1,https://github.com/j-piecuch,Fix race between kmem_free() and kmem_alloc().,1,[],https://github.com/cahirwpz/mimiker/pull/705,https://github.com/jpszczolowski,2,https://github.com/cahirwpz/mimiker/pull/705#issuecomment-628586842,"A race is possible where thread 1 call kmem_free() and is preemted
right after vmem_free(). Then, thread 2 calls kmem_alloc() and
allocates the piece of address space just freed. Then, thread 1
marks the allocated addresses as invalid and unmaps them from the
kernel pmap.
By moving the call to vmem_free() to the very end, we make sure
that we 'own' the piece of address space until we're done with the
bookkeeping.","The race condition also caused the KASAN to report kmem use-after-free
on branch j-piecuch:sessions
===========KernelAddressSanitizer===========
ERROR:
* invalid access to address 0xc00ffe38
* write of size 4
* redzone code 0xfb (kmem use-after-free)
============================================

(gdb) backtrace
#0  panic_fail () at /root/mimiker/sys/kern/assert.c:13
#1  0xc0133e7c in ktest_failure () at /root/mimiker/sys/kern/ktest.c:65
#2  0xc010e624 in shadow_check (read=false, size=4, addr=3222273592, addr@entry=3222273624) at /root/mimiker/sys/kern/kasan.c:171
#3  __asan_store4_noabort (addr=addr@entry=3222273592) at /root/mimiker/sys/kern/kasan.c:240
#4  0xc010964c in ctx_set_retval (ctx=0xc00ffe18, value=value@entry=0) at /root/mimiker/sys/mips/context.c:16
#5  0xc012a664 in sched_wakeup (td=td@entry=0xc000b928, reason=reason@entry=0) at /root/mimiker/sys/kern/sched.c:44
#6  0xc012a83c in sched_add (td=0xc000b928) at /root/mimiker/sys/kern/sched.c:28
#7  0xc014d9a0 in test_sleepq_abort_mult () at /root/mimiker/sys/tests/sleepq_abort.c:95
#8  0xc0133fe4 in run_test (t=0xc017f600 <sleepq_abort_mult_test>) at /root/mimiker/sys/kern/ktest.c:117
#9  0xc01343a8 in run_all_tests () at /root/mimiker/sys/kern/ktest.c:193
#10 0xc0134618 in ktest_main (test=test@entry=0xc018cf58 <_stack0+3928> ""all"") at /root/mimiker/sys/kern/ktest.c:251
#11 0xc0133a30 in kmain () at /root/mimiker/sys/kern/main.c:23
#12 0xc01208a0 in thread_self () at /root/mimiker/sys/kern/thread.c:122

Thanks @j-piecuch for discovering what caused the crash!",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,705,2020-05-14T11:45:07Z,2020-05-15T10:04:55Z,2020-05-15T10:04:55Z,MERGED,True,2,1,1,https://github.com/j-piecuch,Fix race between kmem_free() and kmem_alloc().,1,[],https://github.com/cahirwpz/mimiker/pull/705,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/705#issuecomment-629149572,"A race is possible where thread 1 call kmem_free() and is preemted
right after vmem_free(). Then, thread 2 calls kmem_alloc() and
allocates the piece of address space just freed. Then, thread 1
marks the allocated addresses as invalid and unmaps them from the
kernel pmap.
By moving the call to vmem_free() to the very end, we make sure
that we 'own' the piece of address space until we're done with the
bookkeeping.",LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,706,2020-05-18T22:20:19Z,2020-05-19T08:15:05Z,2020-05-19T08:15:05Z,MERGED,True,5,10,4,https://github.com/pj1031999,Remove unused bus_spac_ map flags,6,[],https://github.com/cahirwpz/mimiker/pull/706,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/706,"According to the results of the investigation, the following flags are not used
in NetBSD and FreeBSD. Let's remove them.

BUS_SPACE_MAP_CACHEABLE
BUS_SPACE_MAP_LINEAR
BUS_SPACE_MAP_PREFETCHABLE","According to the results of the investigation, the following flags are not used
in NetBSD and FreeBSD. Let's remove them.

BUS_SPACE_MAP_CACHEABLE
BUS_SPACE_MAP_LINEAR
BUS_SPACE_MAP_PREFETCHABLE",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,706,2020-05-18T22:20:19Z,2020-05-19T08:15:05Z,2020-05-19T08:15:05Z,MERGED,True,5,10,4,https://github.com/pj1031999,Remove unused bus_spac_ map flags,6,[],https://github.com/cahirwpz/mimiker/pull/706,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/706#issuecomment-630661387,"According to the results of the investigation, the following flags are not used
in NetBSD and FreeBSD. Let's remove them.

BUS_SPACE_MAP_CACHEABLE
BUS_SPACE_MAP_LINEAR
BUS_SPACE_MAP_PREFETCHABLE",LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,708,2020-05-19T20:23:18Z,2020-05-24T13:08:41Z,2020-05-24T13:10:08Z,MERGED,True,221,37,15,https://github.com/j-piecuch,sigsuspend() and signal handler mask implementation,19,[],https://github.com/cahirwpz/mimiker/pull/708,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/708,"This fixes an issue with ksh where the shell would wait forever for the completion of a command.
I encountered a couple of difficulties:

I'm unable to call sleepq_abort() when holding td_spin of the thread I'm trying to wake up.
_sleepq_wait() returns immediately if TDF_NEEDSIGCHK is set, but I think this flag is only a safe approximation of whether any signal is actually pending. I think we should call sig_pending() in _sleepq_interrupted_early(), but that requires acquiring a process lock.","This fixes an issue with ksh where the shell would wait forever for the completion of a command.
I encountered a couple of difficulties:

I'm unable to call sleepq_abort() when holding td_spin of the thread I'm trying to wake up.
_sleepq_wait() returns immediately if TDF_NEEDSIGCHK is set, but I think this flag is only a safe approximation of whether any signal is actually pending. I think we should call sig_pending() in _sleepq_interrupted_early(), but that requires acquiring a process lock.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,708,2020-05-19T20:23:18Z,2020-05-24T13:08:41Z,2020-05-24T13:10:08Z,MERGED,True,221,37,15,https://github.com/j-piecuch,sigsuspend() and signal handler mask implementation,19,[],https://github.com/cahirwpz/mimiker/pull/708,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/708#issuecomment-633228741,"This fixes an issue with ksh where the shell would wait forever for the completion of a command.
I encountered a couple of difficulties:

I'm unable to call sleepq_abort() when holding td_spin of the thread I'm trying to wake up.
_sleepq_wait() returns immediately if TDF_NEEDSIGCHK is set, but I think this flag is only a safe approximation of whether any signal is actually pending. I think we should call sig_pending() in _sleepq_interrupted_early(), but that requires acquiring a process lock.",I like how you attach a meaningful description to each commit in the branch. It's easy afterwards to prepare single large commit for master branch.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,709,2020-05-20T09:55:25Z,2020-05-25T19:41:07Z,2020-05-25T19:41:07Z,MERGED,True,78,40,3,https://github.com/j-piecuch,Manage PIDs and PGIDs using hashtables.,9,[],https://github.com/cahirwpz/mimiker/pull/709,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/709,This PR supersedes #690,This PR supersedes #690,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,710,2020-05-21T15:17:58Z,2020-05-25T20:03:46Z,2020-05-25T20:03:46Z,MERGED,True,13,5,1,https://github.com/j-piecuch,Signal parent on process stop.,3,[],https://github.com/cahirwpz/mimiker/pull/710,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/710,This behavior is specified in POSIX. I must have missed it when I was implementing SIGSTOP.,This behavior is specified in POSIX. I must have missed it when I was implementing SIGSTOP.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,711,2020-05-23T14:24:34Z,2020-05-24T12:55:58Z,2020-05-24T12:55:58Z,MERGED,True,0,1,1,https://github.com/pj1031999,remove duplicated #define,1,[],https://github.com/cahirwpz/mimiker/pull/711,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/711,Remove bus_space_read_1 that was defined 2 times.,Remove bus_space_read_1 that was defined 2 times.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,712,2020-05-25T17:40:39Z,2020-12-01T12:09:37Z,2020-12-01T12:09:37Z,MERGED,True,336,146,1,https://github.com/xThaid,Memory allocator for tmpfs,24,[],https://github.com/cahirwpz/mimiker/pull/712,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/712,"There should be a dedicated memory allocator for tmpfs as it currently don't have any.
Work is in the very early stage and for now this PR is to present the idea since it should be discussed.","There should be a dedicated memory allocator for tmpfs as it currently don't have any.
Work is in the very early stage and for now this PR is to present the idea since it should be discussed.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,713,2020-05-26T14:36:40Z,2020-06-08T22:26:37Z,2020-06-08T22:26:38Z,CLOSED,False,338,178,25,https://github.com/wiklam,Separating kernelspace from userspace for time related functions/structs.,14,['accepted'],https://github.com/cahirwpz/mimiker/pull/713,https://github.com/wiklam,1,https://github.com/cahirwpz/mimiker/pull/713,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,713,2020-05-26T14:36:40Z,2020-06-08T22:26:37Z,2020-06-08T22:26:38Z,CLOSED,False,338,178,25,https://github.com/wiklam,Separating kernelspace from userspace for time related functions/structs.,14,['accepted'],https://github.com/cahirwpz/mimiker/pull/713,https://github.com/wiklam,2,https://github.com/cahirwpz/mimiker/pull/713#issuecomment-640920199,,The proposal was used in #716 and #717.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,714,2020-05-30T11:45:47Z,,2021-03-15T06:57:29Z,OPEN,False,93,1,5,https://github.com/jpszczolowski,Add support for KUBSAN (Kernel Undefined Behavior Sanitizer),2,"['WiP', 'proposal']",https://github.com/cahirwpz/mimiker/pull/714,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/714,"Please refer to [KUBSAN in the Linux kernel], [OpenBSD's KUBSAN manual], [NetBSD's blog post about GSoC 2018 KUBSAN project].","Please refer to [KUBSAN in the Linux kernel], [OpenBSD's KUBSAN manual], [NetBSD's blog post about GSoC 2018 KUBSAN project].",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,715,2020-05-30T12:38:59Z,2020-06-02T05:57:46Z,2020-06-02T08:13:27Z,MERGED,True,1,1,1,https://github.com/jpszczolowski,Fix global buffer-overflow in vm_page_alloc,2,[],https://github.com/cahirwpz/mimiker/pull/715,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/715,"Found by KUBSAN
Description
Function vm_page_alloc has the following loop:
while (TAILQ_EMPTY(&freelist[i]) && i < PM_NQUEUES)
  i++;
which causes an overflow while accessing freelist[PM_NQUEUES]. Please note that freelist is defined as follows:
static vm_pagelist_t freelist[PM_NQUEUES];
Backtrace
(gdb) bt
#0  panic_fail () at /home/jpszczolowski/mimiker/sys/kern/assert.c:6
#1  0xc011ed38 in kubsan_fail () at /home/jpszczolowski/mimiker/sys/kern/kubsan.c:14
#2  0xc011edc8 in __ubsan_handle_out_of_bounds () at /home/jpszczolowski/mimiker/sys/kern/kubsan.c:29
#3  0xc012e398 in vm_page_alloc (npages=npages@entry=0x1) at /home/jpszczolowski/mimiker/sys/kern/vm_physmem.c:201
#4  0xc0106f60 in pmap_add_pde (pmap=pmap@entry=0xc02f6120 <kernel_pmap>, vaddr=vaddr@entry=0xc0400000) at /home/jpszczolowski/mimiker/sys/mips/pmap.c:182
#5  0xc0107624 in pmap_pte_write (pmap=pmap@entry=0xc02f6120 <kernel_pmap>, vaddr=vaddr@entry=0xc0400000, pte=0x4000399f, pte@entry=0x40003987, flags=flags@entry=0x0) at /home/jpszczolowski/mimiker/sys/mips/pmap.c:173
#6  0xc0108448 in pmap_kenter (va=va@entry=0xc0400000, pa=pa@entry=0xe6000, prot=prot@entry=(VM_PROT_READ | VM_PROT_WRITE), flags=flags@entry=0x0) at /home/jpszczolowski/mimiker/sys/mips/pmap.c:224
#7  0xc012c7a0 in vm_boot_alloc (n=n@entry=0x12e254) at /home/jpszczolowski/mimiker/sys/kern/vm_physmem.c:72
#8  0xc012d3f0 in vm_page_init () at /home/jpszczolowski/mimiker/sys/kern/vm_physmem.c:96
#9  0xc0163d38 in kernel_init () at /home/jpszczolowski/mimiker/sys/kern/startup.c:27
#10 0xc010b6ec in platform_init () at /home/jpszczolowski/mimiker/sys/mips/malta.c:171
#11 0x80101044 in _start () at /home/jpszczolowski/mimiker/sys/mips/start.S:43","Found by KUBSAN
Description
Function vm_page_alloc has the following loop:
while (TAILQ_EMPTY(&freelist[i]) && i < PM_NQUEUES)
  i++;
which causes an overflow while accessing freelist[PM_NQUEUES]. Please note that freelist is defined as follows:
static vm_pagelist_t freelist[PM_NQUEUES];
Backtrace
(gdb) bt
#0  panic_fail () at /home/jpszczolowski/mimiker/sys/kern/assert.c:6
#1  0xc011ed38 in kubsan_fail () at /home/jpszczolowski/mimiker/sys/kern/kubsan.c:14
#2  0xc011edc8 in __ubsan_handle_out_of_bounds () at /home/jpszczolowski/mimiker/sys/kern/kubsan.c:29
#3  0xc012e398 in vm_page_alloc (npages=npages@entry=0x1) at /home/jpszczolowski/mimiker/sys/kern/vm_physmem.c:201
#4  0xc0106f60 in pmap_add_pde (pmap=pmap@entry=0xc02f6120 <kernel_pmap>, vaddr=vaddr@entry=0xc0400000) at /home/jpszczolowski/mimiker/sys/mips/pmap.c:182
#5  0xc0107624 in pmap_pte_write (pmap=pmap@entry=0xc02f6120 <kernel_pmap>, vaddr=vaddr@entry=0xc0400000, pte=0x4000399f, pte@entry=0x40003987, flags=flags@entry=0x0) at /home/jpszczolowski/mimiker/sys/mips/pmap.c:173
#6  0xc0108448 in pmap_kenter (va=va@entry=0xc0400000, pa=pa@entry=0xe6000, prot=prot@entry=(VM_PROT_READ | VM_PROT_WRITE), flags=flags@entry=0x0) at /home/jpszczolowski/mimiker/sys/mips/pmap.c:224
#7  0xc012c7a0 in vm_boot_alloc (n=n@entry=0x12e254) at /home/jpszczolowski/mimiker/sys/kern/vm_physmem.c:72
#8  0xc012d3f0 in vm_page_init () at /home/jpszczolowski/mimiker/sys/kern/vm_physmem.c:96
#9  0xc0163d38 in kernel_init () at /home/jpszczolowski/mimiker/sys/kern/startup.c:27
#10 0xc010b6ec in platform_init () at /home/jpszczolowski/mimiker/sys/mips/malta.c:171
#11 0x80101044 in _start () at /home/jpszczolowski/mimiker/sys/mips/start.S:43",True,"{'HOORAY': ['https://github.com/xThaid'], 'HEART': ['https://github.com/cahirwpz']}"
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,715,2020-05-30T12:38:59Z,2020-06-02T05:57:46Z,2020-06-02T08:13:27Z,MERGED,True,1,1,1,https://github.com/jpszczolowski,Fix global buffer-overflow in vm_page_alloc,2,[],https://github.com/cahirwpz/mimiker/pull/715,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/715#issuecomment-636438481,"Found by KUBSAN
Description
Function vm_page_alloc has the following loop:
while (TAILQ_EMPTY(&freelist[i]) && i < PM_NQUEUES)
  i++;
which causes an overflow while accessing freelist[PM_NQUEUES]. Please note that freelist is defined as follows:
static vm_pagelist_t freelist[PM_NQUEUES];
Backtrace
(gdb) bt
#0  panic_fail () at /home/jpszczolowski/mimiker/sys/kern/assert.c:6
#1  0xc011ed38 in kubsan_fail () at /home/jpszczolowski/mimiker/sys/kern/kubsan.c:14
#2  0xc011edc8 in __ubsan_handle_out_of_bounds () at /home/jpszczolowski/mimiker/sys/kern/kubsan.c:29
#3  0xc012e398 in vm_page_alloc (npages=npages@entry=0x1) at /home/jpszczolowski/mimiker/sys/kern/vm_physmem.c:201
#4  0xc0106f60 in pmap_add_pde (pmap=pmap@entry=0xc02f6120 <kernel_pmap>, vaddr=vaddr@entry=0xc0400000) at /home/jpszczolowski/mimiker/sys/mips/pmap.c:182
#5  0xc0107624 in pmap_pte_write (pmap=pmap@entry=0xc02f6120 <kernel_pmap>, vaddr=vaddr@entry=0xc0400000, pte=0x4000399f, pte@entry=0x40003987, flags=flags@entry=0x0) at /home/jpszczolowski/mimiker/sys/mips/pmap.c:173
#6  0xc0108448 in pmap_kenter (va=va@entry=0xc0400000, pa=pa@entry=0xe6000, prot=prot@entry=(VM_PROT_READ | VM_PROT_WRITE), flags=flags@entry=0x0) at /home/jpszczolowski/mimiker/sys/mips/pmap.c:224
#7  0xc012c7a0 in vm_boot_alloc (n=n@entry=0x12e254) at /home/jpszczolowski/mimiker/sys/kern/vm_physmem.c:72
#8  0xc012d3f0 in vm_page_init () at /home/jpszczolowski/mimiker/sys/kern/vm_physmem.c:96
#9  0xc0163d38 in kernel_init () at /home/jpszczolowski/mimiker/sys/kern/startup.c:27
#10 0xc010b6ec in platform_init () at /home/jpszczolowski/mimiker/sys/mips/malta.c:171
#11 0x80101044 in _start () at /home/jpszczolowski/mimiker/sys/mips/start.S:43",LGTM Nice find! Congrats!,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,716,2020-05-31T21:42:39Z,2020-06-02T08:11:09Z,2020-06-02T08:49:56Z,MERGED,True,100,69,14,https://github.com/wiklam,Replacing timeval with bintime in kernel.,10,[],https://github.com/cahirwpz/mimiker/pull/716,https://github.com/wiklam,1,https://github.com/cahirwpz/mimiker/pull/716,"Changing the representation of how we store time in kernel to more accurate, which give higher precision (2^-64 ≈ 5 * 10^-20 (bintime) instead of 10^-6 (timeval)).","Changing the representation of how we store time in kernel to more accurate, which give higher precision (2^-64 ≈ 5 * 10^-20 (bintime) instead of 10^-6 (timeval)).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,717,2020-06-02T11:22:46Z,2020-06-02T13:03:39Z,2020-06-03T00:19:26Z,MERGED,True,7,97,8,https://github.com/wiklam,Removing unused macros and function duplications related with time.,8,[],https://github.com/cahirwpz/mimiker/pull/717,https://github.com/wiklam,1,https://github.com/cahirwpz/mimiker/pull/717,"After replacing timeval by bintime some functions/structures will not be used anymore. Functions related only with timeval are duplicated e.g. timeval_add, timeval_clear.","After replacing timeval by bintime some functions/structures will not be used anymore. Functions related only with timeval are duplicated e.g. timeval_add, timeval_clear.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,717,2020-06-02T11:22:46Z,2020-06-02T13:03:39Z,2020-06-03T00:19:26Z,MERGED,True,7,97,8,https://github.com/wiklam,Removing unused macros and function duplications related with time.,8,[],https://github.com/cahirwpz/mimiker/pull/717,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/717#issuecomment-637527614,"After replacing timeval by bintime some functions/structures will not be used anymore. Functions related only with timeval are duplicated e.g. timeval_add, timeval_clear.",LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,718,2020-06-04T04:02:13Z,2020-06-04T13:45:56Z,2020-06-04T13:45:56Z,CLOSED,False,50,11,8,https://github.com/wiklam,Replacing timeval by bintime for rusage in kernel.,7,[],https://github.com/cahirwpz/mimiker/pull/718,https://github.com/wiklam,1,https://github.com/cahirwpz/mimiker/pull/718,"This change brings us one step closer to remove timeval from kernel. Struct krusage could be defined just for kernel space but in such situation, we have to use some implicit properties of the structures in _wait4 and probably in some future syscalls related to rusage.","This change brings us one step closer to remove timeval from kernel. Struct krusage could be defined just for kernel space but in such situation, we have to use some implicit properties of the structures in _wait4 and probably in some future syscalls related to rusage.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,718,2020-06-04T04:02:13Z,2020-06-04T13:45:56Z,2020-06-04T13:45:56Z,CLOSED,False,50,11,8,https://github.com/wiklam,Replacing timeval by bintime for rusage in kernel.,7,[],https://github.com/cahirwpz/mimiker/pull/718,https://github.com/wiklam,2,https://github.com/cahirwpz/mimiker/pull/718#issuecomment-638858046,"This change brings us one step closer to remove timeval from kernel. Struct krusage could be defined just for kernel space but in such situation, we have to use some implicit properties of the structures in _wait4 and probably in some future syscalls related to rusage.",The cost of removing timeval from kernel is higher than the benefits (the complexity of the code rise). We should try to limit the scope for timeval and timespec (e.g. to syscall interface).,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,719,2020-06-05T12:18:53Z,2020-06-09T05:23:37Z,2020-06-09T05:23:50Z,MERGED,True,82,58,8,https://github.com/pj1031999,Map rootdev into virtual address space,7,[],https://github.com/cahirwpz/mimiker/pull/719,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/719,"map rootdev and its children into virtual address space
enable pci ports and memory in activate_resource
create generic bus_space_map
create generic_bus_space object
introduce kva_alloc which allocates a virtual address range with no underlying object and no initial mapping to physical memory
introduce kva_free which releases a region of kernel virtual memory allocated with kva_alloc","map rootdev and its children into virtual address space
enable pci ports and memory in activate_resource
create generic bus_space_map
create generic_bus_space object
introduce kva_alloc which allocates a virtual address range with no underlying object and no initial mapping to physical memory
introduce kva_free which releases a region of kernel virtual memory allocated with kva_alloc",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,720,2020-06-06T12:21:58Z,2020-06-09T12:44:03Z,2020-06-09T12:44:03Z,MERGED,True,146,2,13,https://github.com/franciscozdo,setgroups and getgroups syscalls,27,[],https://github.com/cahirwpz/mimiker/pull/720,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/720,"In this PR I implemented syscalls:

setgroups
getgroups

Added user test to check this systemcalls.","In this PR I implemented syscalls:

setgroups
getgroups

Added user test to check this systemcalls.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,720,2020-06-06T12:21:58Z,2020-06-09T12:44:03Z,2020-06-09T12:44:03Z,MERGED,True,146,2,13,https://github.com/franciscozdo,setgroups and getgroups syscalls,27,[],https://github.com/cahirwpz/mimiker/pull/720,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/720#issuecomment-641176794,"In this PR I implemented syscalls:

setgroups
getgroups

Added user test to check this systemcalls.",Please provide summary for this pull request.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,721,2020-06-14T14:11:04Z,2021-01-18T21:02:32Z,2021-01-18T21:02:32Z,MERGED,True,165,10,8,https://github.com/wiklam,Nanosleep syscall.,30,['accepted'],https://github.com/cahirwpz/mimiker/pull/721,https://github.com/wiklam,1,https://github.com/cahirwpz/mimiker/pull/721,"Adding nanosleep syscall with user and kernel tests.
The tests will be probably hidden (they are time-consuming) to speed up the test checks.","Adding nanosleep syscall with user and kernel tests.
The tests will be probably hidden (they are time-consuming) to speed up the test checks.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,722,2020-06-14T14:25:37Z,2020-06-23T09:50:22Z,2020-06-23T09:50:23Z,MERGED,True,31,32,4,https://github.com/wiklam,Fixing clk_tck definition & moving tm2sec to time.c,3,[],https://github.com/cahirwpz/mimiker/pull/722,https://github.com/wiklam,1,https://github.com/cahirwpz/mimiker/pull/722,"Changing value  clk_tck to 1000, cause our system tick take 1ms.
Moving tm2sec to more appropriate file for this type of function.","Changing value  clk_tck to 1000, cause our system tick take 1ms.
Moving tm2sec to more appropriate file for this type of function.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,722,2020-06-14T14:25:37Z,2020-06-23T09:50:22Z,2020-06-23T09:50:23Z,MERGED,True,31,32,4,https://github.com/wiklam,Fixing clk_tck definition & moving tm2sec to time.c,3,[],https://github.com/cahirwpz/mimiker/pull/722,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/722#issuecomment-648035446,"Changing value  clk_tck to 1000, cause our system tick take 1ms.
Moving tm2sec to more appropriate file for this type of function.",LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,723,2020-06-15T14:24:02Z,2020-06-22T10:11:40Z,2020-06-22T10:11:40Z,MERGED,True,17,5,6,https://github.com/pj1031999,Map cbus_uart into virtual address space,9,[],https://github.com/cahirwpz/mimiker/pull/723,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/723,"Move cn_init to kernel_init after initialization of memory subsystems
Map cbus_uart into virtual address space","Move cn_init to kernel_init after initialization of memory subsystems
Map cbus_uart into virtual address space",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,724,2020-06-15T15:40:28Z,2020-06-16T04:50:15Z,2020-06-16T04:50:15Z,MERGED,True,1,0,1,https://github.com/pj1031999,check page alignment in pmap_kenter,1,[],https://github.com/cahirwpz/mimiker/pull/724,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/724,check page alignment in pmap_kenter,check page alignment in pmap_kenter,True,{'LAUGH': ['https://github.com/xThaid']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,724,2020-06-15T15:40:28Z,2020-06-16T04:50:15Z,2020-06-16T04:50:15Z,MERGED,True,1,0,1,https://github.com/pj1031999,check page alignment in pmap_kenter,1,[],https://github.com/cahirwpz/mimiker/pull/724,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/724#issuecomment-644529131,check page alignment in pmap_kenter,LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,725,2020-06-22T19:14:16Z,2020-06-23T10:16:52Z,2020-10-13T09:24:27Z,MERGED,True,37,64,10,https://github.com/pj1031999,Use devclasses for device initialization,8,[],https://github.com/cahirwpz/mimiker/pull/725,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/725,"fix bus_generic_probe -- now it initializes only devices in correct devclass
use devclass interface for device initialization
introduce new member of device_t for access to devclass
remove gt_pci_bus and gt_pci global references
stop using SYSINIT_ADD for device initialization
use bus_generic_probe everywhere where it is possible","fix bus_generic_probe -- now it initializes only devices in correct devclass
use devclass interface for device initialization
introduce new member of device_t for access to devclass
remove gt_pci_bus and gt_pci global references
stop using SYSINIT_ADD for device initialization
use bus_generic_probe everywhere where it is possible",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,725,2020-06-22T19:14:16Z,2020-06-23T10:16:52Z,2020-10-13T09:24:27Z,MERGED,True,37,64,10,https://github.com/pj1031999,Use devclasses for device initialization,8,[],https://github.com/cahirwpz/mimiker/pull/725,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/725#issuecomment-648047500,"fix bus_generic_probe -- now it initializes only devices in correct devclass
use devclass interface for device initialization
introduce new member of device_t for access to devclass
remove gt_pci_bus and gt_pci global references
stop using SYSINIT_ADD for device initialization
use bus_generic_probe everywhere where it is possible",LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,726,2020-06-23T08:37:33Z,2020-06-23T09:49:16Z,2020-06-23T09:49:16Z,MERGED,True,25,14,2,https://github.com/xThaid,Split kmem_alloc & kmem_free functions,1,[],https://github.com/cahirwpz/mimiker/pull/726,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/726,New functions will be used in tmpfs.,New functions will be used in tmpfs.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,726,2020-06-23T08:37:33Z,2020-06-23T09:49:16Z,2020-06-23T09:49:16Z,MERGED,True,25,14,2,https://github.com/xThaid,Split kmem_alloc & kmem_free functions,1,[],https://github.com/cahirwpz/mimiker/pull/726,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/726#issuecomment-648034979,New functions will be used in tmpfs.,LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,727,2020-06-30T15:23:41Z,2020-07-03T15:29:49Z,2020-07-03T15:29:49Z,MERGED,True,44,25,13,https://github.com/pj1031999,devclasses,9,[],https://github.com/cahirwpz/mimiker/pull/727,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/727,"Cleanup the infrastructure for drivers.

Introduce device_identify which register proper devclass in devices.
Remove unused make_device function. We are using device_alloc in contrast to make_device from FreeBSD.
Fix TODO in gt_pci_attach.
Introduce unit field in device_t.","Cleanup the infrastructure for drivers.

Introduce device_identify which register proper devclass in devices.
Remove unused make_device function. We are using device_alloc in contrast to make_device from FreeBSD.
Fix TODO in gt_pci_attach.
Introduce unit field in device_t.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,728,2020-07-10T00:17:18Z,2020-07-11T08:05:50Z,2020-07-11T08:05:50Z,CLOSED,False,1,1,1,https://github.com/jpszczolowski,New kernel feature,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/728,https://github.com/jpszczolowski,1,https://github.com/cahirwpz/mimiker/pull/728,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,729,2020-07-10T10:20:08Z,2020-11-02T19:10:18Z,2020-11-02T19:10:22Z,MERGED,True,96,54,1,https://github.com/pj1031999,FDT for Malta board,6,[],https://github.com/cahirwpz/mimiker/pull/729,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/729,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,729,2020-07-10T10:20:08Z,2020-11-02T19:10:18Z,2020-11-02T19:10:22Z,MERGED,True,96,54,1,https://github.com/pj1031999,FDT for Malta board,6,[],https://github.com/cahirwpz/mimiker/pull/729,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/729#issuecomment-720668459,,@pj1031999 Someone else will finish this file for MIPS Malta board.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,730,2020-07-12T21:49:53Z,2020-07-14T11:22:49Z,2020-07-14T11:22:49Z,MERGED,True,176,0,3,https://github.com/pj1031999,tests for fdt,2,[],https://github.com/cahirwpz/mimiker/pull/730,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/730,"In #729  we try to introduce Flattened Device Tree. It describes a machine hardware configuration.
In this PR I introduce tests for parser of fdt structure.","In #729  we try to introduce Flattened Device Tree. It describes a machine hardware configuration.
In this PR I introduce tests for parser of fdt structure.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,731,2020-07-14T10:41:20Z,2020-07-14T11:22:10Z,2020-07-14T11:39:33Z,MERGED,True,249,219,23,https://github.com/cahirwpz,Introduce proc0,7,[],https://github.com/cahirwpz/mimiker/pull/731,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/731,Process zero plays role of a sentinel value. It's sole role is to fork() and create init process.,Process zero plays role of a sentinel value. It's sole role is to fork() and create init process.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,732,2020-07-17T15:01:01Z,2020-07-22T18:52:54Z,2020-09-03T20:30:15Z,MERGED,True,401,126,40,https://github.com/pj1031999,Build on Aarch64,16,['AArch64'],https://github.com/cahirwpz/mimiker/pull/732,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/732,"Changes required to make Mimiker build for AArch64.
From now we can build Mimiker for two platform:

make BOARD=malta for Malta board (default)
make BOARD=rpi3 for Raspberry Pi 3

Introduce new --board argument for run_tests.py and launch.
By default we want to emulate Malta board --board malta but we can emulate rpi3 --board rpi3.
Add build tests with CircleCi.","Changes required to make Mimiker build for AArch64.
From now we can build Mimiker for two platform:

make BOARD=malta for Malta board (default)
make BOARD=rpi3 for Raspberry Pi 3

Introduce new --board argument for run_tests.py and launch.
By default we want to emulate Malta board --board malta but we can emulate rpi3 --board rpi3.
Add build tests with CircleCi.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,732,2020-07-17T15:01:01Z,2020-07-22T18:52:54Z,2020-09-03T20:30:15Z,MERGED,True,401,126,40,https://github.com/pj1031999,Build on Aarch64,16,['AArch64'],https://github.com/cahirwpz/mimiker/pull/732,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/732#issuecomment-662625263,"Changes required to make Mimiker build for AArch64.
From now we can build Mimiker for two platform:

make BOARD=malta for Malta board (default)
make BOARD=rpi3 for Raspberry Pi 3

Introduce new --board argument for run_tests.py and launch.
By default we want to emulate Malta board --board malta but we can emulate rpi3 --board rpi3.
Add build tests with CircleCi.",LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,733,2020-07-22T19:18:05Z,2020-07-23T07:02:48Z,2020-07-23T07:02:48Z,MERGED,True,0,135,2,https://github.com/pj1031999,Remove gendevhint.py,1,[],https://github.com/cahirwpz/mimiker/pull/733,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/733,"We no longer plan to use gendevhint.py.
Let's remove it.","We no longer plan to use gendevhint.py.
Let's remove it.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,734,2020-07-22T19:41:37Z,2020-07-23T07:01:30Z,2020-07-23T07:01:30Z,MERGED,True,11,13,7,https://github.com/pj1031999,Rename platform to board.,2,[],https://github.com/cahirwpz/mimiker/pull/734,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/734,Rename platform to board.,Rename platform to board.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,735,2020-07-22T20:19:05Z,2020-07-24T17:10:00Z,2020-09-03T20:31:00Z,MERGED,True,70,70,49,https://github.com/pj1031999,Arch rename,4,['AArch64'],https://github.com/cahirwpz/mimiker/pull/735,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/735,Rename arm64 to aarch64.,Rename arm64 to aarch64.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,735,2020-07-22T20:19:05Z,2020-07-24T17:10:00Z,2020-09-03T20:31:00Z,MERGED,True,70,70,49,https://github.com/pj1031999,Arch rename,4,['AArch64'],https://github.com/cahirwpz/mimiker/pull/735,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/735#issuecomment-663640130,Rename arm64 to aarch64.,LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,736,2020-07-28T21:40:54Z,2020-08-10T13:02:58Z,2020-08-10T13:02:58Z,MERGED,True,1452,21,18,https://github.com/pj1031999,AArch64 support,30,['AArch64'],https://github.com/cahirwpz/mimiker/pull/736,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/736,"Setup initial stack.
Jump to C code.
Drop to EL1.

The AArch64 architecture defines a set of exception levels with common usage model:

EL0 – applications
EL1 – OS kernel and associated functions that are typically described as privileged
EL2 – hypervisor
EL3 – secure monitor




Enable cache coherency.
Clear bss.
Build page table.

create a four-level page table
VA bits [47:39] is level 0 index (512GB per entry)
VA bits [38:30] is level 1 index (1GB per entry)
VA bits [29:21] is level 2 index (2MB per entry)
VA bits [20:12] is level 3 index (4KB per entry)


Configure MMU.","Setup initial stack.
Jump to C code.
Drop to EL1.

The AArch64 architecture defines a set of exception levels with common usage model:

EL0 – applications
EL1 – OS kernel and associated functions that are typically described as privileged
EL2 – hypervisor
EL3 – secure monitor




Enable cache coherency.
Clear bss.
Build page table.

create a four-level page table
VA bits [47:39] is level 0 index (512GB per entry)
VA bits [38:30] is level 1 index (1GB per entry)
VA bits [29:21] is level 2 index (2MB per entry)
VA bits [20:12] is level 3 index (4KB per entry)


Configure MMU.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,737,2020-08-10T18:38:18Z,2020-08-11T07:41:16Z,2020-08-11T07:41:16Z,MERGED,True,5,9,2,https://github.com/pj1031999,Remove assumptions about initial stack.,1,['AArch64'],https://github.com/cahirwpz/mimiker/pull/737,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/737,Create one page in _boot_data for stack.,Create one page in _boot_data for stack.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,738,2020-08-11T23:07:23Z,2020-08-12T12:22:31Z,2020-09-03T20:30:50Z,MERGED,True,100,39,9,https://github.com/pj1031999,Use LINUX_BOOT_ABI for AArch64.,8,['AArch64'],https://github.com/cahirwpz/mimiker/pull/738,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/738,"Use LINUX_BOOT_ABI for AArch64.
QEMU assumes the .img files are the Linux. We need LINUX_BOOT_ABI for RPI3 support.","Use LINUX_BOOT_ABI for AArch64.
QEMU assumes the .img files are the Linux. We need LINUX_BOOT_ABI for RPI3 support.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,739,2020-08-12T21:19:12Z,2020-08-21T12:05:23Z,2020-08-21T14:25:13Z,MERGED,True,318,86,14,https://github.com/pj1031999,Build stack for thread0 on AArch64.,14,['AArch64'],https://github.com/cahirwpz/mimiker/pull/739,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/739,Build stack for thread0 on AArch64.,Build stack for thread0 on AArch64.,True,{'HOORAY': ['https://github.com/jpszczolowski']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,740,2020-08-14T12:43:30Z,2020-08-27T05:20:54Z,2020-08-27T05:20:58Z,MERGED,True,40,14,1,https://github.com/pj1031999,Directly-mapped page table for AArch64,5,['AArch64'],https://github.com/cahirwpz/mimiker/pull/740,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/740,"Build directly-mapped page table.
DMAP will be located at DMAP_BASE which is 0xffffff8000000000.","Build directly-mapped page table.
DMAP will be located at DMAP_BASE which is 0xffffff8000000000.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,740,2020-08-14T12:43:30Z,2020-08-27T05:20:54Z,2020-08-27T05:20:58Z,MERGED,True,40,14,1,https://github.com/pj1031999,Directly-mapped page table for AArch64,5,['AArch64'],https://github.com/cahirwpz/mimiker/pull/740,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/740#issuecomment-674372829,"Build directly-mapped page table.
DMAP will be located at DMAP_BASE which is 0xffffff8000000000.","There's subtle problem with current solution. When a page table grows we'll have to write to l*_* tables as well, in order to map new page directories. That forces us to map those pages in virtual addresses.
Let's start to implement pmap - that will force us to understand problem better. I hope we'll avoid direct map after all.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,741,2020-08-14T15:33:51Z,2020-08-27T11:42:54Z,2020-08-27T11:42:58Z,MERGED,True,151,44,5,https://github.com/pj1031999,AArch64 exceptions.,3,['AArch64'],https://github.com/cahirwpz/mimiker/pull/741,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/741,"According to sys/arm64/arm64/exception.S from FreeBSD we only need to handle:

Synchronous EL1h
IRQ EL1h
Synchronous 64-bit EL0
IRQ 64-bit EL0","According to sys/arm64/arm64/exception.S from FreeBSD we only need to handle:

Synchronous EL1h
IRQ EL1h
Synchronous 64-bit EL0
IRQ 64-bit EL0",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,741,2020-08-14T15:33:51Z,2020-08-27T11:42:54Z,2020-08-27T11:42:58Z,MERGED,True,151,44,5,https://github.com/pj1031999,AArch64 exceptions.,3,['AArch64'],https://github.com/cahirwpz/mimiker/pull/741,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/741#issuecomment-681896047,"According to sys/arm64/arm64/exception.S from FreeBSD we only need to handle:

Synchronous EL1h
IRQ EL1h
Synchronous 64-bit EL0
IRQ 64-bit EL0",Although exception handling is not yet finished I'll accept this PR as intermediate step.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,742,2020-08-26T17:21:49Z,2020-08-27T10:37:12Z,2020-08-27T10:37:15Z,MERGED,True,95,52,11,https://github.com/pj1031999,Board init,19,['AArch64'],https://github.com/cahirwpz/mimiker/pull/742,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/742,"Introduce board_init function.
Init klog.
Silence gdb errors related to tlb.
Jump to kernel_init.

Should be merged after #740","Introduce board_init function.
Init klog.
Silence gdb errors related to tlb.
Jump to kernel_init.

Should be merged after #740",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,743,2020-08-26T21:22:22Z,2020-10-02T09:26:27Z,2020-10-02T09:26:30Z,MERGED,True,528,59,11,https://github.com/pj1031999,Implement pmap module for AArch64,76,['AArch64'],https://github.com/cahirwpz/mimiker/pull/743,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/743,Should be merged after #742 and #748.,Should be merged after #742 and #748.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,744,2020-09-03T14:46:20Z,2020-09-08T14:57:17Z,2020-09-08T14:57:23Z,MERGED,True,545,442,13,https://github.com/cahirwpz,New kernel generic purpose memory allocator,16,[],https://github.com/cahirwpz/mimiker/pull/744,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/744,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,745,2020-09-03T20:26:09Z,2020-09-04T10:43:40Z,2020-09-04T10:43:44Z,MERGED,True,2,2,1,https://github.com/pj1031999,Fix off-by-one error in vm_physmem.,2,[],https://github.com/cahirwpz/mimiker/pull/745,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/745,Fix off-by-one error in vm_physmem found in #743.,Fix off-by-one error in vm_physmem found in #743.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,746,2020-09-04T08:30:17Z,2020-09-04T15:26:58Z,2020-09-04T15:27:02Z,MERGED,True,7,3,1,https://github.com/pj1031999,AArch64 cpu_intr_,3,['AArch64'],https://github.com/cahirwpz/mimiker/pull/746,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/746,"Implemented in #743.

cpu_intr_disable
cpu_intr_enable
cpu_intr_disabled","Implemented in #743.

cpu_intr_disable
cpu_intr_enable
cpu_intr_disabled",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,747,2020-09-04T12:20:44Z,2020-09-04T15:17:50Z,2020-09-04T15:17:54Z,MERGED,True,406,491,36,https://github.com/cahirwpz,Clean up CPU context representation in kernel space,9,[],https://github.com/cahirwpz/mimiker/pull/747,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/747,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,748,2020-09-05T13:37:00Z,2020-09-11T14:46:11Z,2020-09-11T14:46:15Z,MERGED,True,274,115,15,https://github.com/pj1031999,AArch64 CPU context,14,['AArch64'],https://github.com/cahirwpz/mimiker/pull/748,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/748,Merge changes related to CPU context on AArch64 from #743 and #747.,Merge changes related to CPU context on AArch64 from #743 and #747.,True,{'HOORAY': ['https://github.com/jpszczolowski']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,749,2020-09-08T18:20:09Z,2020-09-09T14:50:18Z,2021-02-09T06:54:25Z,MERGED,True,186,65,16,https://github.com/cahirwpz,Memory usage statistics extension for GDB,11,[],https://github.com/cahirwpz/mimiker/pull/749,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/749,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,750,2020-09-08T21:41:13Z,2020-09-09T08:07:33Z,2020-09-09T08:07:38Z,MERGED,True,1,1,1,https://github.com/pj1031999,Fix cpu_intr_disabled,1,['AArch64'],https://github.com/cahirwpz/mimiker/pull/750,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/750,When I bit is set then exceptions are masked.,When I bit is set then exceptions are masked.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,751,2020-09-08T23:57:12Z,2020-09-09T08:06:23Z,2020-09-09T08:06:27Z,MERGED,True,128,149,6,https://github.com/cahirwpz,Remove header from every item managed by pool allocator,4,[],https://github.com/cahirwpz/mimiker/pull/751,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/751,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,752,2020-09-11T20:14:03Z,2020-09-18T14:08:25Z,2020-09-18T14:08:28Z,MERGED,True,420,224,12,https://github.com/pj1031999,Add pv_entries to pmap and improve pmap tests,22,[],https://github.com/cahirwpz/mimiker/pull/752,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/752,"Tests added in #743.

test_pmap_kenter for pmap_kenter and pmap_kremove
test_pmap_page for pmap_copy_page and pmap_zero_page
test_pmap_kextract for pmap_kextract
fix test_kernel_pmap","Tests added in #743.

test_pmap_kenter for pmap_kenter and pmap_kremove
test_pmap_page for pmap_copy_page and pmap_zero_page
test_pmap_kextract for pmap_kextract
fix test_kernel_pmap",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,752,2020-09-11T20:14:03Z,2020-09-18T14:08:25Z,2020-09-18T14:08:28Z,MERGED,True,420,224,12,https://github.com/pj1031999,Add pv_entries to pmap and improve pmap tests,22,[],https://github.com/cahirwpz/mimiker/pull/752,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/752#issuecomment-691417647,"Tests added in #743.

test_pmap_kenter for pmap_kenter and pmap_kremove
test_pmap_page for pmap_copy_page and pmap_zero_page
test_pmap_kextract for pmap_kextract
fix test_kernel_pmap","Please use kasan_mark_valid and kasan_mark_invalid instead disabling tests for KASAN. The procedures are quite well documented. You can basically copy some lines from kmem.c.
Please add pmap_kextract procedure to pmap interface.
BTW. Kernel pmap is always active. You cannot make it inactive for obvious reasons. I'm not sure there's need to call pmap_activate in these tests.
PS. Could you have a look at test_kernel_pmap and make it work again (with requisite changes).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,753,2020-09-15T11:05:04Z,2020-09-15T14:13:21Z,2020-09-15T14:14:20Z,MERGED,True,147,204,9,https://github.com/cahirwpz,Simplify interrupt & trap handling for MIPS platform,8,[],https://github.com/cahirwpz/mimiker/pull/753,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/753,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,754,2020-09-15T14:30:09Z,2020-09-15T18:20:58Z,2020-09-15T18:21:01Z,MERGED,True,174,125,9,https://github.com/cahirwpz,Move tlb_exception_handler to sys/mips/trap.c,6,[],https://github.com/cahirwpz/mimiker/pull/754,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/754,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,755,2020-09-16T12:50:40Z,2020-09-16T13:01:56Z,2020-09-16T13:01:59Z,MERGED,True,91,95,16,https://github.com/cahirwpz,Clean up thread's locks,5,[],https://github.com/cahirwpz/mimiker/pull/755,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/755,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,756,2020-09-16T13:47:48Z,,2020-11-20T17:09:49Z,OPEN,False,106,101,6,https://github.com/cahirwpz,New locking scheme for dispatcher & scheduler,15,['WiP'],https://github.com/cahirwpz/mimiker/pull/756,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/756,The aim of this PR is to implement the strategy as described in #242,The aim of this PR is to implement the strategy as described in #242,True,{'HOORAY': ['https://github.com/jpszczolowski']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,757,2020-09-16T22:37:36Z,2020-09-17T08:37:44Z,2020-09-17T08:37:47Z,MERGED,True,140,7,4,https://github.com/pj1031999,Trap handler for AArch64,2,['AArch64'],https://github.com/cahirwpz/mimiker/pull/757,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/757,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,758,2020-09-19T11:26:11Z,2020-09-21T11:03:03Z,2020-09-21T11:10:26Z,MERGED,True,83,117,4,https://github.com/cahirwpz,Revert almost the greatest idea in MIPS pmap,4,[],https://github.com/cahirwpz/mimiker/pull/758,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/758,"Treat kseg0 as direct map for free.
Remove workarounds.","Treat kseg0 as direct map for free.
Remove workarounds.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,759,2020-09-27T21:27:52Z,2020-10-05T11:07:12Z,2020-10-05T11:07:15Z,MERGED,True,205,62,9,https://github.com/pj1031999,Implement copy.S.,14,['AArch64'],https://github.com/cahirwpz/mimiker/pull/759,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/759,"Implementation of kernel copy functions.

copyin
copyout
copyinstr
try_load_word
try_store_word

New implementation of copystr which is machine independent.","Implementation of kernel copy functions.

copyin
copyout
copyinstr
try_load_word
try_store_word

New implementation of copystr which is machine independent.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,760,2020-09-30T14:05:12Z,2020-09-30T14:13:29Z,2020-09-30T14:13:32Z,MERGED,True,153,96,6,https://github.com/cahirwpz,Fast path for mutex locking & unlocking.,6,[],https://github.com/cahirwpz/mimiker/pull/760,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/760,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,761,2020-10-01T16:04:41Z,2020-10-02T07:47:32Z,2020-10-02T07:47:39Z,MERGED,True,97,123,14,https://github.com/cahirwpz,Simplify ctx_switch by moving code to C.,7,[],https://github.com/cahirwpz/mimiker/pull/761,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/761,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,762,2020-10-04T18:18:42Z,2020-10-09T13:05:17Z,2020-10-12T09:12:00Z,MERGED,True,18,26,1,https://github.com/pj1031999,Simplify ctx_switch.,6,['AArch64'],https://github.com/cahirwpz/mimiker/pull/762,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/762,Simplify ctx_switch.,Simplify ctx_switch.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,762,2020-10-04T18:18:42Z,2020-10-09T13:05:17Z,2020-10-12T09:12:00Z,MERGED,True,18,26,1,https://github.com/pj1031999,Simplify ctx_switch.,6,['AArch64'],https://github.com/cahirwpz/mimiker/pull/762,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/762#issuecomment-704748706,Simplify ctx_switch.,"Remember that first thing you need to do after .ctx_resume label is to switch stack, so that vm_map_switch executes on target thread stack.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,763,2020-10-06T10:00:21Z,2020-12-08T10:03:29Z,2020-12-08T10:03:29Z,CLOSED,False,431,40,5,https://github.com/j-piecuch,TTY subsystem,45,['WiP'],https://github.com/cahirwpz/mimiker/pull/763,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/763,"Bare-bones TTY skeleton
 Basic canonical mode (line editing, nothing more)
 Integration with sessions (controlling terminal ioctls, foreground/background process groups etc.)
 Signal handling","Bare-bones TTY skeleton
 Basic canonical mode (line editing, nothing more)
 Integration with sessions (controlling terminal ioctls, foreground/background process groups etc.)
 Signal handling",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,763,2020-10-06T10:00:21Z,2020-12-08T10:03:29Z,2020-12-08T10:03:29Z,CLOSED,False,431,40,5,https://github.com/j-piecuch,TTY subsystem,45,['WiP'],https://github.com/cahirwpz/mimiker/pull/763,https://github.com/j-piecuch,2,https://github.com/cahirwpz/mimiker/pull/763#issuecomment-740519646,"Bare-bones TTY skeleton
 Basic canonical mode (line editing, nothing more)
 Integration with sessions (controlling terminal ioctls, foreground/background process groups etc.)
 Signal handling","Closing due to the limited usefulness of this branch, and the TTY subsystem being mostly done.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,764,2020-10-07T11:43:39Z,2021-03-19T14:23:18Z,2021-03-19T14:23:31Z,MERGED,True,107,26,8,https://github.com/pj1031999,Introduce pmap_growkernel,34,['accepted'],https://github.com/cahirwpz/mimiker/pull/764,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/764,"Implement pmap_growkernel based on NetBSD version for AArch64.
Implementation for:

AArch64
MIPS","Implement pmap_growkernel based on NetBSD version for AArch64.
Implementation for:

AArch64
MIPS",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,765,2020-10-09T10:32:55Z,2020-10-17T18:11:05Z,2020-10-17T18:11:06Z,CLOSED,False,513,4,7,https://github.com/franciscozdo,Port `su` program,9,[],https://github.com/cahirwpz/mimiker/pull/765,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/765,Depends on changes in #766 and #767.,Depends on changes in #766 and #767.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,765,2020-10-09T10:32:55Z,2020-10-17T18:11:05Z,2020-10-17T18:11:06Z,CLOSED,False,513,4,7,https://github.com/franciscozdo,Port `su` program,9,[],https://github.com/cahirwpz/mimiker/pull/765,https://github.com/pj1031999,2,https://github.com/cahirwpz/mimiker/pull/765#issuecomment-706122361,Depends on changes in #766 and #767.,I see a lot of #if 0 ... #endif in code. Is it ok?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,766,2020-10-10T06:49:01Z,2020-10-12T10:25:11Z,2020-10-12T10:25:11Z,MERGED,True,7,0,1,https://github.com/franciscozdo,Implementation of execv,12,[],https://github.com/cahirwpz/mimiker/pull/766,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/766,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,766,2020-10-10T06:49:01Z,2020-10-12T10:25:11Z,2020-10-12T10:25:11Z,MERGED,True,7,0,1,https://github.com/franciscozdo,Implementation of execv,12,[],https://github.com/cahirwpz/mimiker/pull/766,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/766#issuecomment-707018188,,"@franciscozdo Undoubtedly exec function is an important addition to the set of supported libc functions. However tests for execve seem to me to be a little redundant as we use this functionality all the time.
In long run I'd much prefer to ""borrow"" testing framework and test from NetBSD. I don't think implementing system call tests is effective use of our time. Especially when we consider the fact that we took libc and other user-space libraries and programs from NetBSD.
Please remove the tests and leave only the wrapper for execve.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,767,2020-10-10T07:46:26Z,2020-10-12T09:59:45Z,2020-10-12T09:59:45Z,MERGED,True,88,3,3,https://github.com/franciscozdo,Implementation of initgroups,7,[],https://github.com/cahirwpz/mimiker/pull/767,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/767,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,768,2020-10-10T19:21:12Z,2020-11-09T11:56:09Z,2020-11-09T11:56:19Z,MERGED,True,200,17,4,https://github.com/pj1031999,AArch64 timer.,45,['AArch64'],https://github.com/cahirwpz/mimiker/pull/768,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/768,"Enable timer on AArch64.
It depends on changes from #769, #770, #771, #772, #787, #788.","Enable timer on AArch64.
It depends on changes from #769, #770, #771, #772, #787, #788.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,769,2020-10-10T19:29:00Z,2020-10-12T11:36:23Z,2020-10-12T11:36:26Z,MERGED,True,107,51,4,https://github.com/pj1031999,Call Frame Information for AArch64 exceptions,4,['AArch64'],https://github.com/cahirwpz/mimiker/pull/769,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/769,Give information for gdb where registers are saved during exception on AArch64.,Give information for gdb where registers are saved during exception on AArch64.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,770,2020-10-10T19:35:14Z,2020-10-12T09:11:24Z,2020-10-12T09:11:28Z,MERGED,True,3,1,2,https://github.com/pj1031999,Increase P_VMEM pool size for vmem_t,1,[],https://github.com/cahirwpz/mimiker/pull/770,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/770,On AArch64 vmem_t doesn't fit on one page.,On AArch64 vmem_t doesn't fit on one page.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,771,2020-10-10T19:40:38Z,2020-10-11T07:53:15Z,2020-10-11T07:53:19Z,MERGED,True,2,2,1,https://github.com/pj1031999,Fix bintime printing,1,[],https://github.com/cahirwpz/mimiker/pull/771,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/771,Fix bintime printing.,Fix bintime printing.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,772,2020-10-10T19:49:25Z,2020-10-12T09:13:30Z,2020-10-12T09:13:30Z,MERGED,True,3,2,1,https://github.com/pj1031999,Handling the lack of a timer in tm_reserve,1,[],https://github.com/cahirwpz/mimiker/pull/772,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/772,Do not dereference NULL address when timer is not found.,Do not dereference NULL address when timer is not found.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,773,2020-10-11T17:35:55Z,2020-10-12T09:04:47Z,2020-10-12T09:11:40Z,MERGED,True,27,27,8,https://github.com/pj1031999,Add void to function signatures in utest,1,[],https://github.com/cahirwpz/mimiker/pull/773,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/773,"Add void to function without arguments in utest.
In C foo(void) is different than foo(). Second variant could take any number of parameters of unknown types.","Add void to function without arguments in utest.
In C foo(void) is different than foo(). Second variant could take any number of parameters of unknown types.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,775,2020-10-13T21:51:11Z,2020-10-13T22:00:10Z,2020-10-13T22:00:10Z,CLOSED,False,479,1,3,https://github.com/komik0,Import seq from NetBSD,3,[],https://github.com/cahirwpz/mimiker/pull/775,https://github.com/komik0,1,https://github.com/cahirwpz/mimiker/pull/775,This cs introduce seq (well known command from NetBSD/Linux),This cs introduce seq (well known command from NetBSD/Linux),True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,775,2020-10-13T21:51:11Z,2020-10-13T22:00:10Z,2020-10-13T22:00:10Z,CLOSED,False,479,1,3,https://github.com/komik0,Import seq from NetBSD,3,[],https://github.com/cahirwpz/mimiker/pull/775,https://github.com/komik0,2,https://github.com/cahirwpz/mimiker/pull/775#issuecomment-708032646,This cs introduce seq (well known command from NetBSD/Linux),pushed from wrong branch,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,776,2020-10-13T22:20:39Z,2020-10-14T09:00:12Z,2020-10-14T09:00:12Z,MERGED,True,477,1,3,https://github.com/komik0,Import seq from NetBSD,2,[],https://github.com/cahirwpz/mimiker/pull/776,https://github.com/komik0,1,https://github.com/cahirwpz/mimiker/pull/776,This cs introduce seq (well known command from NetBSD/Linux),This cs introduce seq (well known command from NetBSD/Linux),True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,777,2020-10-15T19:50:37Z,2020-10-26T12:40:23Z,2020-10-26T12:40:24Z,MERGED,True,635,102,12,https://github.com/j-piecuch,Basic TTY implementation (raw mode only),22,[],https://github.com/cahirwpz/mimiker/pull/777,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/777,"Add default control characters to ttydefaults.h
Add ringbuf_reset() function
Add launcher option to run socat in raw mode
Replace /dev/uart with a terminal device
Remove unneeded NS16550 UART code
Implement basic TTY device with an asynchronous serial device driver interface","Add default control characters to ttydefaults.h
Add ringbuf_reset() function
Add launcher option to run socat in raw mode
Replace /dev/uart with a terminal device
Remove unneeded NS16550 UART code
Implement basic TTY device with an asynchronous serial device driver interface",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,778,2020-10-16T09:53:29Z,2020-10-16T15:41:57Z,2020-10-16T15:41:57Z,MERGED,True,16,2,1,https://github.com/franciscozdo,Sysconf stub,10,[],https://github.com/cahirwpz/mimiker/pull/778,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/778,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,779,2020-10-17T11:52:20Z,,2021-03-15T07:06:18Z,OPEN,False,4,2,1,https://github.com/cahirwpz,Regenerate assym.h when a dependency of genassym.cf changes,1,['WiP'],https://github.com/cahirwpz/mimiker/pull/779,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/779,Should fix #516 as well,Should fix #516 as well,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,780,2020-10-18T10:01:03Z,2020-10-23T16:03:30Z,2020-10-23T16:03:30Z,MERGED,True,898,3,25,https://github.com/franciscozdo,Port su program from NetBSD,23,[],https://github.com/cahirwpz/mimiker/pull/780,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/780,"I removed some code from BSD implementation (macro BSD4_4). I don't think we will use it.
Added syscalls which do nothing but su needs them.

getpriority()
setpriority()

Added some dummy functions that do nothing just return 0 or """" to avoid commenting out code in su.

getusershell()
setusershell()
ttyname()
crypt()
getpass()","I removed some code from BSD implementation (macro BSD4_4). I don't think we will use it.
Added syscalls which do nothing but su needs them.

getpriority()
setpriority()

Added some dummy functions that do nothing just return 0 or """" to avoid commenting out code in su.

getusershell()
setusershell()
ttyname()
crypt()
getpass()",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,780,2020-10-18T10:01:03Z,2020-10-23T16:03:30Z,2020-10-23T16:03:30Z,MERGED,True,898,3,25,https://github.com/franciscozdo,Port su program from NetBSD,23,[],https://github.com/cahirwpz/mimiker/pull/780,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/780#issuecomment-712401015,"I removed some code from BSD implementation (macro BSD4_4). I don't think we will use it.
Added syscalls which do nothing but su needs them.

getpriority()
setpriority()

Added some dummy functions that do nothing just return 0 or """" to avoid commenting out code in su.

getusershell()
setusershell()
ttyname()
crypt()
getpass()","Could we adapt:

getusershell & setusershell from http://bxr.su/OpenBSD/lib/libc/gen/getusershell.c
ttyname from http://bxr.su/OpenBSD/lib/libc/gen/ttyname.c (let's just comment out lines 90 - 107)
?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,780,2020-10-18T10:01:03Z,2020-10-23T16:03:30Z,2020-10-23T16:03:30Z,MERGED,True,898,3,25,https://github.com/franciscozdo,Port su program from NetBSD,23,[],https://github.com/cahirwpz/mimiker/pull/780,https://github.com/franciscozdo,3,https://github.com/cahirwpz/mimiker/pull/780#issuecomment-712745820,"I removed some code from BSD implementation (macro BSD4_4). I don't think we will use it.
Added syscalls which do nothing but su needs them.

getpriority()
setpriority()

Added some dummy functions that do nothing just return 0 or """" to avoid commenting out code in su.

getusershell()
setusershell()
ttyname()
crypt()
getpass()","Could we adapt:

getusershell & setusershell from http://bxr.su/OpenBSD/lib/libc/gen/getusershell.c
ttyname from http://bxr.su/OpenBSD/lib/libc/gen/ttyname.c (let's just comment out lines 90 - 107)
?


I have adapted getusershell and setusershell but ttyname left. IMO there is too much to add. It must be done better than just copying from BSD.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,781,2020-10-19T15:59:26Z,2020-11-16T15:05:57Z,2020-11-16T15:05:57Z,MERGED,True,295,64,10,https://github.com/MichalBlk,A base implementation of siginfo feature,14,[],https://github.com/cahirwpz/mimiker/pull/781,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/781,A simple base implementation of siginfo feature.,A simple base implementation of siginfo feature.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,781,2020-10-19T15:59:26Z,2020-11-16T15:05:57Z,2020-11-16T15:05:57Z,MERGED,True,295,64,10,https://github.com/MichalBlk,A base implementation of siginfo feature,14,[],https://github.com/cahirwpz/mimiker/pull/781,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/781#issuecomment-716063613,A simple base implementation of siginfo feature.,"@j-piecuch Please review, especially parts using locks.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,781,2020-10-19T15:59:26Z,2020-11-16T15:05:57Z,2020-11-16T15:05:57Z,MERGED,True,295,64,10,https://github.com/MichalBlk,A base implementation of siginfo feature,14,[],https://github.com/cahirwpz/mimiker/pull/781,https://github.com/MichalBlk,3,https://github.com/cahirwpz/mimiker/pull/781#issuecomment-723682686,A simple base implementation of siginfo feature.,Fixed.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,782,2020-10-19T16:16:45Z,2020-10-19T19:31:31Z,2020-10-19T19:31:31Z,MERGED,True,7,7,1,https://github.com/wiklam,Using CPU_FREQ only for initialization and small fix.,2,[],https://github.com/cahirwpz/mimiker/pull/782,https://github.com/wiklam,1,https://github.com/cahirwpz/mimiker/pull/782,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,782,2020-10-19T16:16:45Z,2020-10-19T19:31:31Z,2020-10-19T19:31:31Z,MERGED,True,7,7,1,https://github.com/wiklam,Using CPU_FREQ only for initialization and small fix.,2,[],https://github.com/cahirwpz/mimiker/pull/782,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/782#issuecomment-712393759,,LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,783,2020-10-22T09:21:50Z,2020-10-30T17:14:54Z,2020-10-30T17:14:54Z,MERGED,True,234,45,12,https://github.com/franciscozdo,Cred syscalls v2,21,[],https://github.com/cahirwpz/mimiker/pull/783,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/783,"Implementation of syscalls:

setuid()
seteuid()
setreuid()
setgid()
setegid()
setregid()

I wrote this syscalls looking to FreeBSD Manual Pages, NetBSD Manual Pages, Linux Manual Pages and POSIX standard.","Implementation of syscalls:

setuid()
seteuid()
setreuid()
setgid()
setegid()
setregid()

I wrote this syscalls looking to FreeBSD Manual Pages, NetBSD Manual Pages, Linux Manual Pages and POSIX standard.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,783,2020-10-22T09:21:50Z,2020-10-30T17:14:54Z,2020-10-30T17:14:54Z,MERGED,True,234,45,12,https://github.com/franciscozdo,Cred syscalls v2,21,[],https://github.com/cahirwpz/mimiker/pull/783,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/783#issuecomment-716521642,"Implementation of syscalls:

setuid()
seteuid()
setreuid()
setgid()
setegid()
setregid()

I wrote this syscalls looking to FreeBSD Manual Pages, NetBSD Manual Pages, Linux Manual Pages and POSIX standard.",LGTM. Please resolve conflict before we proceed with merge.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,784,2020-10-23T19:14:11Z,2020-10-30T17:49:49Z,2020-10-30T17:49:49Z,MERGED,True,28,13,2,https://github.com/xThaid,Kill QEMU after simulation,7,[],https://github.com/cahirwpz/mimiker/pull/784,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/784,"Added executing pkill -9 qemu after tmux session is closed. Just to make sure it won't hang forever.
I also removed session.kill_session(), because it only caused the error and as far as I know server.kill_server() destroys all sessions too.","Added executing pkill -9 qemu after tmux session is closed. Just to make sure it won't hang forever.
I also removed session.kill_session(), because it only caused the error and as far as I know server.kill_server() destroys all sessions too.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,785,2020-10-27T16:18:47Z,2020-11-02T12:24:51Z,2020-11-02T12:35:35Z,CLOSED,False,250,122,10,https://github.com/j-piecuch,Make it possible to signal a process group without holding all_proc_mtx,15,[],https://github.com/cahirwpz/mimiker/pull/785,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/785,"This PR changes our locking rules to make it possible to signal a process group without holding all_proc_mtx.
Summary of changes:

Add a mutex to pgrp_t that protects the list of members
proc_t::p_parent, proc_t::p_pglist, proc_t::p_pgrp and pgrp_t::pg_members are now protected by a pair of locks: holding either one suffices for reading, but both must be held for writing.
proc_t::p_flags is now protected by proc_t::p_lock instead of all_proc_mtx
Add a rule that permits acquiring parent process's lock while holding the child process's lock

As a result of making these changes, some stuff broke, which this PR also fixes:

There was a potential lost wakeup in do_waitpid: fixed by introducing the PF_CHILD_STATE_CHANGED flag.
Unlocking a mutex while holding the current thread's lock is incorrect, since mtx_unlock can acquire it. This bug was already present before I made the changes, the changes merely made the bug actually cause a panic. I fixed it by introducing the TDF_STOPPING flag.","This PR changes our locking rules to make it possible to signal a process group without holding all_proc_mtx.
Summary of changes:

Add a mutex to pgrp_t that protects the list of members
proc_t::p_parent, proc_t::p_pglist, proc_t::p_pgrp and pgrp_t::pg_members are now protected by a pair of locks: holding either one suffices for reading, but both must be held for writing.
proc_t::p_flags is now protected by proc_t::p_lock instead of all_proc_mtx
Add a rule that permits acquiring parent process's lock while holding the child process's lock

As a result of making these changes, some stuff broke, which this PR also fixes:

There was a potential lost wakeup in do_waitpid: fixed by introducing the PF_CHILD_STATE_CHANGED flag.
Unlocking a mutex while holding the current thread's lock is incorrect, since mtx_unlock can acquire it. This bug was already present before I made the changes, the changes merely made the bug actually cause a panic. I fixed it by introducing the TDF_STOPPING flag.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,785,2020-10-27T16:18:47Z,2020-11-02T12:24:51Z,2020-11-02T12:35:35Z,CLOSED,False,250,122,10,https://github.com/j-piecuch,Make it possible to signal a process group without holding all_proc_mtx,15,[],https://github.com/cahirwpz/mimiker/pull/785,https://github.com/j-piecuch,2,https://github.com/cahirwpz/mimiker/pull/785#issuecomment-720440587,"This PR changes our locking rules to make it possible to signal a process group without holding all_proc_mtx.
Summary of changes:

Add a mutex to pgrp_t that protects the list of members
proc_t::p_parent, proc_t::p_pglist, proc_t::p_pgrp and pgrp_t::pg_members are now protected by a pair of locks: holding either one suffices for reading, but both must be held for writing.
proc_t::p_flags is now protected by proc_t::p_lock instead of all_proc_mtx
Add a rule that permits acquiring parent process's lock while holding the child process's lock

As a result of making these changes, some stuff broke, which this PR also fixes:

There was a potential lost wakeup in do_waitpid: fixed by introducing the PF_CHILD_STATE_CHANGED flag.
Unlocking a mutex while holding the current thread's lock is incorrect, since mtx_unlock can acquire it. This bug was already present before I made the changes, the changes merely made the bug actually cause a panic. I fixed it by introducing the TDF_STOPPING flag.",Superseded by #803,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,786,2020-10-28T11:54:12Z,2020-11-09T09:59:45Z,2020-11-09T09:59:45Z,MERGED,True,358,24,5,https://github.com/j-piecuch,TTY: Implement line editing in canonical mode,51,[],https://github.com/cahirwpz/mimiker/pull/786,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/786,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,787,2020-10-28T16:19:30Z,2020-11-02T17:56:52Z,2020-11-02T17:56:57Z,MERGED,True,107,7,1,https://github.com/pj1031999,AArch64 rootdev.,8,['AArch64'],https://github.com/cahirwpz/mimiker/pull/787,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/787,"Add functions for AArch64 rootdev from #768.
Add RPI3 specific bcm2835reg.h.","Add functions for AArch64 rootdev from #768.
Add RPI3 specific bcm2835reg.h.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,788,2020-10-28T18:18:57Z,2020-11-06T13:59:31Z,2020-11-06T13:59:35Z,MERGED,True,117,29,12,https://github.com/pj1031999,AArch64 interrupts,24,['AArch64'],https://github.com/cahirwpz/mimiker/pull/788,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/788,"Add interrupts related functions from #768.
It should be merged after #787.","Add interrupts related functions from #768.
It should be merged after #787.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,788,2020-10-28T18:18:57Z,2020-11-06T13:59:31Z,2020-11-06T13:59:35Z,MERGED,True,117,29,12,https://github.com/pj1031999,AArch64 interrupts,24,['AArch64'],https://github.com/cahirwpz/mimiker/pull/788,https://github.com/xThaid,2,https://github.com/cahirwpz/mimiker/pull/788#issuecomment-721867290,"Add interrupts related functions from #768.
It should be merged after #787.","As far as I'm concerned, looks good.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,788,2020-10-28T18:18:57Z,2020-11-06T13:59:31Z,2020-11-06T13:59:35Z,MERGED,True,117,29,12,https://github.com/pj1031999,AArch64 interrupts,24,['AArch64'],https://github.com/cahirwpz/mimiker/pull/788,https://github.com/mohrcore,3,https://github.com/cahirwpz/mimiker/pull/788#issuecomment-722662710,"Add interrupts related functions from #768.
It should be merged after #787.",LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,789,2020-10-30T09:47:31Z,2020-11-06T07:22:50Z,2020-11-06T07:22:50Z,MERGED,True,90,49,13,https://github.com/mohrcore,Driver infrastructure improvements,16,[],https://github.com/cahirwpz/mimiker/pull/789,https://github.com/mohrcore,1,https://github.com/cahirwpz/mimiker/pull/789,"The DEVCLASS commit #725 introduced a problem where the drivers started to attach to wrong devices due to incorrent probing mechanism. Additionally, device_t's  created in device detection mechanisms were not scanned when probing drivers for a bus device.
This issue solves #774","The DEVCLASS commit #725 introduced a problem where the drivers started to attach to wrong devices due to incorrent probing mechanism. Additionally, device_t's  created in device detection mechanisms were not scanned when probing drivers for a bus device.
This issue solves #774",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,789,2020-10-30T09:47:31Z,2020-11-06T07:22:50Z,2020-11-06T07:22:50Z,MERGED,True,90,49,13,https://github.com/mohrcore,Driver infrastructure improvements,16,[],https://github.com/cahirwpz/mimiker/pull/789,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/789#issuecomment-720457384,"The DEVCLASS commit #725 introduced a problem where the drivers started to attach to wrong devices due to incorrent probing mechanism. Additionally, device_t's  created in device detection mechanisms were not scanned when probing drivers for a bus device.
This issue solves #774",@mohrcore @ThomasStachovsky Please respond to @pj1031999 remarks. He must approve your changes before I start to review the PR.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,790,2020-10-30T15:49:46Z,2020-10-31T08:20:31Z,2020-10-31T08:20:31Z,MERGED,True,35,5,2,https://github.com/j-piecuch,Allow sleeping with a locked vnode.,4,[],https://github.com/cahirwpz/mimiker/pull/790,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/790,"This is a workaround that allows us to sleep in implementations of VOP_READ and VOP_WRITE. In the future, we should replace it with a proper lock that allows sleeping.","This is a workaround that allows us to sleep in implementations of VOP_READ and VOP_WRITE. In the future, we should replace it with a proper lock that allows sleeping.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,790,2020-10-30T15:49:46Z,2020-10-31T08:20:31Z,2020-10-31T08:20:31Z,MERGED,True,35,5,2,https://github.com/j-piecuch,Allow sleeping with a locked vnode.,4,[],https://github.com/cahirwpz/mimiker/pull/790,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/790#issuecomment-719902128,"This is a workaround that allows us to sleep in implementations of VOP_READ and VOP_WRITE. In the future, we should replace it with a proper lock that allows sleeping.",LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,791,2020-10-30T19:51:38Z,2020-11-06T08:16:33Z,2020-11-06T08:16:33Z,MERGED,True,181,49,11,https://github.com/j-piecuch,Allow processes to set the process group of their children.,13,[],https://github.com/cahirwpz/mimiker/pull/791,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/791,ksh needs it for proper job control.,ksh needs it for proper job control.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,792,2020-10-30T22:47:01Z,2020-10-31T11:04:54Z,2020-10-31T11:04:54Z,MERGED,True,1,2,2,https://github.com/MichalBlk,Tiny changes.,1,[],https://github.com/cahirwpz/mimiker/pull/792,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/792,Fix a typo and remove a needless header.,Fix a typo and remove a needless header.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,792,2020-10-30T22:47:01Z,2020-10-31T11:04:54Z,2020-10-31T11:04:54Z,MERGED,True,1,2,2,https://github.com/MichalBlk,Tiny changes.,1,[],https://github.com/cahirwpz/mimiker/pull/792,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/792#issuecomment-719901162,Fix a typo and remove a needless header.,Could you split all of those changes into three separate PRs. In case of rman I'd like to request additional changes if possible. Perhaps interrupt handling also calls for some improvements. I'd like to discuss these issues separately.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,793,2020-10-31T10:35:18Z,2020-11-15T18:50:13Z,2020-11-15T18:50:14Z,CLOSED,False,207,65,7,https://github.com/MichalBlk,Improve hardware resource management,9,['blocked'],https://github.com/cahirwpz/mimiker/pull/793,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/793,Resource manager should manage multiple regions.,Resource manager should manage multiple regions.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,793,2020-10-31T10:35:18Z,2020-11-15T18:50:13Z,2020-11-15T18:50:14Z,CLOSED,False,207,65,7,https://github.com/MichalBlk,Improve hardware resource management,9,['blocked'],https://github.com/cahirwpz/mimiker/pull/793,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/793#issuecomment-719926165,Resource manager should manage multiple regions.,For the record: we need a single rman to manage multiple disjoint ranges of memory / ioports / irqs.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,794,2020-10-31T10:36:22Z,2020-12-05T22:34:14Z,2020-12-05T22:34:14Z,CLOSED,False,29,12,2,https://github.com/MichalBlk,Improve interrupt handling framework,2,['WiP'],https://github.com/cahirwpz/mimiker/pull/794,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/794,"Improvements:

fix of the intr_event_run_handlers():

don't lose interrupts on the same interrupt event (I know that it doesn't affect us for now),
handle undefined filter functions (since filter isn't mandatory),
properly count handlers on an interrupt event","Improvements:

fix of the intr_event_run_handlers():

don't lose interrupts on the same interrupt event (I know that it doesn't affect us for now),
handle undefined filter functions (since filter isn't mandatory),
properly count handlers on an interrupt event",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,794,2020-10-31T10:36:22Z,2020-12-05T22:34:14Z,2020-12-05T22:34:14Z,CLOSED,False,29,12,2,https://github.com/MichalBlk,Improve interrupt handling framework,2,['WiP'],https://github.com/cahirwpz/mimiker/pull/794,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/794#issuecomment-719925923,"Improvements:

fix of the intr_event_run_handlers():

don't lose interrupts on the same interrupt event (I know that it doesn't affect us for now),
handle undefined filter functions (since filter isn't mandatory),
properly count handlers on an interrupt event",For the record: we need to dynamically create and bind interrupt threads with intr_event and provide fast method of waking them up in case a task was delegated from filter routine.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,794,2020-10-31T10:36:22Z,2020-12-05T22:34:14Z,2020-12-05T22:34:14Z,CLOSED,False,29,12,2,https://github.com/MichalBlk,Improve interrupt handling framework,2,['WiP'],https://github.com/cahirwpz/mimiker/pull/794,https://github.com/jpszczolowski,3,https://github.com/cahirwpz/mimiker/pull/794#issuecomment-719931339,"Improvements:

fix of the intr_event_run_handlers():

don't lose interrupts on the same interrupt event (I know that it doesn't affect us for now),
handle undefined filter functions (since filter isn't mandatory),
properly count handlers on an interrupt event","After your change if several ih_filters return IF_DELEGATE, we'll call ie_disable once here:

  
    
      mimiker/sys/kern/interrupt.c
    
    
        Lines 117 to 119
      in
      692d861
    
  
  
    

        
          
           if (ithread) { 
        

        
          
             if (ie->ie_disable) 
        

        
          
               ie->ie_disable(ie); 
        
    
  


but call ie_enable more than once (i.e. for each ih) in intr_thread here:

  
    
      mimiker/sys/kern/interrupt.c
    
    
        Lines 143 to 144
      in
      692d861
    
  
  
    

        
          
           if (ie->ie_enable) 
        

        
          
             ie->ie_enable(ie); 
        
    
  


Is that intended?",True,{'ROCKET': ['https://github.com/xThaid']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,794,2020-10-31T10:36:22Z,2020-12-05T22:34:14Z,2020-12-05T22:34:14Z,CLOSED,False,29,12,2,https://github.com/MichalBlk,Improve interrupt handling framework,2,['WiP'],https://github.com/cahirwpz/mimiker/pull/794,https://github.com/jpszczolowski,4,https://github.com/cahirwpz/mimiker/pull/794#issuecomment-719933965,"Improvements:

fix of the intr_event_run_handlers():

don't lose interrupts on the same interrupt event (I know that it doesn't affect us for now),
handle undefined filter functions (since filter isn't mandatory),
properly count handlers on an interrupt event","I'm not sure, but maybe we want to call ie_disable once and ie_enable once (after last ih, that comes from a given ie, has been serviced by the intr_thread).
In FreeBSD they do something similar by calling ie->ie_pre_ithread once:
http://bxr.su/FreeBSD/sys/kern/kern_intr.c#1409
and then ie->ie_post_ithread once:
http://bxr.su/FreeBSD/sys/kern/kern_intr.c#1212
BTW their infrastructure is a little bit different -- they have an intr_thread per each intr_event.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,794,2020-10-31T10:36:22Z,2020-12-05T22:34:14Z,2020-12-05T22:34:14Z,CLOSED,False,29,12,2,https://github.com/MichalBlk,Improve interrupt handling framework,2,['WiP'],https://github.com/cahirwpz/mimiker/pull/794,https://github.com/cahirwpz,5,https://github.com/cahirwpz/mimiker/pull/794#issuecomment-719937619,"Improvements:

fix of the intr_event_run_handlers():

don't lose interrupts on the same interrupt event (I know that it doesn't affect us for now),
handle undefined filter functions (since filter isn't mandatory),
properly count handlers on an interrupt event","@jpszczolowski FYI our short-term goal is to add single thread per intr_event on demand – i.e. when first handler is registered that requires execution of ih_handler in interrupt thread context.
BTW it's good to see you here! Given your experience with Mimiker, it would be great if you could help us with code reviews from time to time!",True,{'THUMBS_UP': ['https://github.com/jpszczolowski']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,795,2020-10-31T15:10:29Z,2020-10-31T16:20:39Z,2020-10-31T16:20:39Z,MERGED,True,4,4,2,https://github.com/j-piecuch,Replace assignments with equality checks in asserts.,1,[],https://github.com/cahirwpz/mimiker/pull/795,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/795,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,796,2020-10-31T15:58:25Z,2020-11-02T12:12:53Z,2020-11-02T12:12:53Z,MERGED,True,93,53,4,https://github.com/j-piecuch,Bugfixes from #785,12,[],https://github.com/cahirwpz/mimiker/pull/796,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/796,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,797,2020-10-31T18:43:55Z,2020-10-31T18:58:02Z,2020-10-31T18:58:02Z,MERGED,True,8,33,6,https://github.com/MichalBlk,Simplify drivers interface.,2,[],https://github.com/cahirwpz/mimiker/pull/797,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/797,Remove some (for now) unnecessary device and resource fields.,Remove some (for now) unnecessary device and resource fields.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,798,2020-11-01T17:21:49Z,2020-11-02T09:05:42Z,2020-11-02T09:05:42Z,MERGED,True,39,62,2,https://github.com/j-piecuch,Get rid of the TDF_SLEEPY flag.,2,[],https://github.com/cahirwpz/mimiker/pull/798,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/798,"Now we hold a spinlock all the way from entering a thread into the sleepq until sched_switch(), so we can't receive a signal
or be woken up in the middle.
This also eliminates the need for 2 signal checks and fixes a bug where we didn't leave the sleepq if the second signal check finds that we should interrupt the sleep:  
  
    
      mimiker/sys/kern/sleepq.c
    
    
        Lines 171 to 174
      in
      5073f58
    
  
  
    

        
          
           if (sq_interrupted_early(td, sleep)) { 
        

        
          
             td->td_flags &= ~(TDF_SLPINTR | TDF_SLPTIMED); 
        

        
          
             status = EINTR; 
        

        
          
           } else {","Now we hold a spinlock all the way from entering a thread into the sleepq until sched_switch(), so we can't receive a signal
or be woken up in the middle.
This also eliminates the need for 2 signal checks and fixes a bug where we didn't leave the sleepq if the second signal check finds that we should interrupt the sleep:  
  
    
      mimiker/sys/kern/sleepq.c
    
    
        Lines 171 to 174
      in
      5073f58
    
  
  
    

        
          
           if (sq_interrupted_early(td, sleep)) { 
        

        
          
             td->td_flags &= ~(TDF_SLPINTR | TDF_SLPTIMED); 
        

        
          
             status = EINTR; 
        

        
          
           } else {",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,798,2020-11-01T17:21:49Z,2020-11-02T09:05:42Z,2020-11-02T09:05:42Z,MERGED,True,39,62,2,https://github.com/j-piecuch,Get rid of the TDF_SLEEPY flag.,2,[],https://github.com/cahirwpz/mimiker/pull/798,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/798#issuecomment-720318174,"Now we hold a spinlock all the way from entering a thread into the sleepq until sched_switch(), so we can't receive a signal
or be woken up in the middle.
This also eliminates the need for 2 signal checks and fixes a bug where we didn't leave the sleepq if the second signal check finds that we should interrupt the sleep:  
  
    
      mimiker/sys/kern/sleepq.c
    
    
        Lines 171 to 174
      in
      5073f58
    
  
  
    

        
          
           if (sq_interrupted_early(td, sleep)) { 
        

        
          
             td->td_flags &= ~(TDF_SLPINTR | TDF_SLPTIMED); 
        

        
          
             status = EINTR; 
        

        
          
           } else {","Though we're holding td_lock for a little bit longer, I recognize the value of code simplification. If this fixes a bug, then it's even better. LGTM.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,799,2020-11-01T23:40:00Z,2020-11-02T07:29:30Z,2020-11-02T07:29:34Z,MERGED,True,259,0,1,https://github.com/pj1031999,Import bcm2835reg.h,2,['AArch64'],https://github.com/cahirwpz/mimiker/pull/799,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/799,"Import bcm2835reg.h
It is used in #768, #787, #788.","Import bcm2835reg.h
It is used in #768, #787, #788.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,800,2020-11-02T01:01:49Z,2020-11-02T07:30:20Z,2020-11-02T07:30:23Z,MERGED,True,5,1,2,https://github.com/pj1031999,AArch64 fixes,4,['AArch64'],https://github.com/cahirwpz/mimiker/pull/800,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/800,Some fixes from #768.,Some fixes from #768.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,801,2020-11-02T10:22:03Z,2020-11-02T16:49:34Z,2020-11-02T16:49:34Z,MERGED,True,13,2,3,https://github.com/franciscozdo,Fix locking during fork,14,[],https://github.com/cahirwpz/mimiker/pull/801,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/801,We were copying credentials of parent process with no lock held. Unless we have only one thread per process it won't break. But it will be safer and less error prone in the future.,We were copying credentials of parent process with no lock held. Unless we have only one thread per process it won't break. But it will be safer and less error prone in the future.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,802,2020-11-02T10:37:01Z,2020-11-13T20:03:15Z,2020-11-13T20:03:15Z,MERGED,True,97,27,5,https://github.com/franciscozdo,Signal privilege checks,36,[],https://github.com/cahirwpz/mimiker/pull/802,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/802,Introduce checking privilege to signal other process.,Introduce checking privilege to signal other process.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,803,2020-11-02T12:24:22Z,2020-11-02T13:00:09Z,2020-11-02T13:00:09Z,MERGED,True,157,78,9,https://github.com/j-piecuch,Make it possible to signal a process group without holding all_proc_mtx.,18,[],https://github.com/cahirwpz/mimiker/pull/803,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/803,This is the non-bugfix part of #785.,This is the non-bugfix part of #785.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,805,2020-11-02T15:06:51Z,2020-11-12T12:14:41Z,2020-11-12T14:51:57Z,MERGED,True,321,274,25,https://github.com/cahirwpz,Rework MIPS rootdev driver and its direct children,29,[],https://github.com/cahirwpz/mimiker/pull/805,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/805,First attempt to clean up driver infrastructure. Goal of this PR is to identify major deficiencies in root device of MIPS architecture and fix them. I'm not going to fix every issue but try to determine right direction for future developments.,First attempt to clean up driver infrastructure. Goal of this PR is to identify major deficiencies in root device of MIPS architecture and fix them. I'm not going to fix every issue but try to determine right direction for future developments.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,806,2020-11-02T15:08:48Z,2020-11-05T09:50:57Z,2020-11-05T09:50:57Z,CLOSED,False,32,14,3,https://github.com/franciscozdo,Add error handling while sending signals,18,[],https://github.com/cahirwpz/mimiker/pull/806,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/806,This changes will prepare signal sending mechanism for future changes in checking privileges to sending signals.,This changes will prepare signal sending mechanism for future changes in checking privileges to sending signals.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,806,2020-11-02T15:08:48Z,2020-11-05T09:50:57Z,2020-11-05T09:50:57Z,CLOSED,False,32,14,3,https://github.com/franciscozdo,Add error handling while sending signals,18,[],https://github.com/cahirwpz/mimiker/pull/806,https://github.com/franciscozdo,2,https://github.com/cahirwpz/mimiker/pull/806#issuecomment-722268171,This changes will prepare signal sending mechanism for future changes in checking privileges to sending signals.,According to comments this changes are not needed.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,807,2020-11-03T11:57:49Z,2020-11-06T07:30:27Z,2020-11-06T07:30:27Z,MERGED,True,7,0,2,https://github.com/j-piecuch,Clarify behavior of sig_post().,2,[],https://github.com/cahirwpz/mimiker/pull/807,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/807,"It wasn't clear to me that calling sig_post() multiple times won't make us lose pending signals. It turns out it's safe, but it's far from obvious. I have added some comments to help future readers of the code.","It wasn't clear to me that calling sig_post() multiple times won't make us lose pending signals. It turns out it's safe, but it's far from obvious. I have added some comments to help future readers of the code.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,808,2020-11-04T17:58:18Z,2020-11-06T08:08:18Z,2020-11-06T08:08:18Z,MERGED,True,30,19,3,https://github.com/j-piecuch,Discard pending signals when ignoring them via sigaction().,2,[],https://github.com/cahirwpz/mimiker/pull/808,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/808,"This gives us the nice property that if sig_pending() returns a signal, then that signal isn't ignored. I will be using this property in the future.","This gives us the nice property that if sig_pending() returns a signal, then that signal isn't ignored. I will be using this property in the future.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,809,2020-11-05T15:34:23Z,2020-11-13T20:00:19Z,2020-11-13T20:00:19Z,MERGED,True,54,21,3,https://github.com/j-piecuch,Move TTY I/O functions into fileops. ,7,[],https://github.com/cahirwpz/mimiker/pull/809,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/809,"This allows us to bypass the vnode layer during I/O, which we need to do, since the vnode layer acquires the vnode lock for the duration of VOP_READ and VOP_WRITE.","This allows us to bypass the vnode layer during I/O, which we need to do, since the vnode layer acquires the vnode lock for the duration of VOP_READ and VOP_WRITE.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,810,2020-11-06T05:59:56Z,2021-12-19T04:16:44Z,2021-12-19T04:16:44Z,CLOSED,False,83,4,5,https://github.com/wiklam,Estimate timesource frequency - infrastructure.,6,['WiP'],https://github.com/cahirwpz/mimiker/pull/810,https://github.com/wiklam,1,https://github.com/cahirwpz/mimiker/pull/810,We want to use timers with fixed frequencies to estimate the real frequency of our time source.,We want to use timers with fixed frequencies to estimate the real frequency of our time source.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,811,2020-11-06T10:23:35Z,2020-12-08T10:01:44Z,2020-12-08T10:01:44Z,CLOSED,False,162,28,10,https://github.com/j-piecuch,Properly catch stop signals in sleepq_wait().,18,['blocked'],https://github.com/cahirwpz/mimiker/pull/811,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/811,"Sending a stop signal to a sleeping thread shouldn't interrupt its sleep (in the sense of returning EINTR).
It should make the thread stop, and after it's resumed, return from sleepq_wait() without an error, so it's somewhat like a spurious wakeup. We expect callers to handle such wakeups correctly.","Sending a stop signal to a sleeping thread shouldn't interrupt its sleep (in the sense of returning EINTR).
It should make the thread stop, and after it's resumed, return from sleepq_wait() without an error, so it's somewhat like a spurious wakeup. We expect callers to handle such wakeups correctly.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,811,2020-11-06T10:23:35Z,2020-12-08T10:01:44Z,2020-12-08T10:01:44Z,CLOSED,False,162,28,10,https://github.com/j-piecuch,Properly catch stop signals in sleepq_wait().,18,['blocked'],https://github.com/cahirwpz/mimiker/pull/811,https://github.com/j-piecuch,2,https://github.com/cahirwpz/mimiker/pull/811#issuecomment-740518560,"Sending a stop signal to a sleeping thread shouldn't interrupt its sleep (in the sense of returning EINTR).
It should make the thread stop, and after it's resumed, return from sleepq_wait() without an error, so it's somewhat like a spurious wakeup. We expect callers to handle such wakeups correctly.","We decided that a better approach is for SIGSTOP to interrupt the sleep, stop at the userspace boundary, and restart the interrupted syscall if no signals with handlers were caught.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,812,2020-11-06T11:27:33Z,2020-11-06T11:31:23Z,2020-11-06T11:33:52Z,CLOSED,False,53,0,4,https://github.com/komik0,Add dummy driver for rtl8139,1,[],https://github.com/cahirwpz/mimiker/pull/812,https://github.com/komik0,1,https://github.com/cahirwpz/mimiker/pull/812,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,813,2020-11-06T11:35:31Z,2020-11-09T07:52:36Z,2020-11-09T21:44:23Z,MERGED,True,43,5,6,https://github.com/komik0,Add dummy driver for rtl8139,3,[],https://github.com/cahirwpz/mimiker/pull/813,https://github.com/komik0,1,https://github.com/cahirwpz/mimiker/pull/813,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,813,2020-11-06T11:35:31Z,2020-11-09T07:52:36Z,2020-11-09T21:44:23Z,MERGED,True,43,5,6,https://github.com/komik0,Add dummy driver for rtl8139,3,[],https://github.com/cahirwpz/mimiker/pull/813,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/813#issuecomment-723830195,,@komik0 Please add reasonable description for upcoming PRs.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,814,2020-11-07T23:27:33Z,2020-11-09T08:50:08Z,2020-11-09T08:50:08Z,MERGED,True,47,29,2,https://github.com/MichalBlk,Minor fixes to PCI.,4,[],https://github.com/cahirwpz/mimiker/pull/814,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/814,Check the multiple functions bit of a device and handle bar size correctly.,Check the multiple functions bit of a device and handle bar size correctly.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,815,2020-11-07T23:38:57Z,2020-11-09T08:50:40Z,2020-11-09T08:50:40Z,CLOSED,False,2,0,1,https://github.com/komik0,Restore old value of BAR registers accordingly to https://wiki.osdev.org/PCI,1,[],https://github.com/cahirwpz/mimiker/pull/815,https://github.com/komik0,1,https://github.com/cahirwpz/mimiker/pull/815,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,815,2020-11-07T23:38:57Z,2020-11-09T08:50:40Z,2020-11-09T08:50:40Z,CLOSED,False,2,0,1,https://github.com/komik0,Restore old value of BAR registers accordingly to https://wiki.osdev.org/PCI,1,[],https://github.com/cahirwpz/mimiker/pull/815,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/815#issuecomment-723865580,,Already done in #814,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,816,2020-11-09T11:41:52Z,2020-11-16T15:04:14Z,2020-11-16T15:04:14Z,MERGED,True,128,24,5,https://github.com/j-piecuch,TTY: serialize tty_write() calls and implement draining the output queue.,72,[],https://github.com/cahirwpz/mimiker/pull/816,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/816,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,816,2020-11-09T11:41:52Z,2020-11-16T15:04:14Z,2020-11-16T15:04:14Z,MERGED,True,128,24,5,https://github.com/j-piecuch,TTY: serialize tty_write() calls and implement draining the output queue.,72,[],https://github.com/cahirwpz/mimiker/pull/816,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/816#issuecomment-727201356,,Please resolve conflicts.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,816,2020-11-09T11:41:52Z,2020-11-16T15:04:14Z,2020-11-16T15:04:14Z,MERGED,True,128,24,5,https://github.com/j-piecuch,TTY: serialize tty_write() calls and implement draining the output queue.,72,[],https://github.com/cahirwpz/mimiker/pull/816,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/816#issuecomment-727803094,,"If comments are added, there'll be nothing else to stop use from merging the PR with master.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,817,2020-11-09T19:30:45Z,2020-11-13T19:44:18Z,2020-11-13T19:44:18Z,MERGED,True,9,3,3,https://github.com/MichalBlk,Sequential bar numbers.,2,[],https://github.com/cahirwpz/mimiker/pull/817,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/817,"Make device bars appear sequentially in the PCI device structure
so that a driver does not have to check which bar is vaild and which is not.","Make device bars appear sequentially in the PCI device structure
so that a driver does not have to check which bar is vaild and which is not.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,818,2020-11-13T11:19:52Z,2020-11-19T21:43:27Z,2020-11-19T21:43:33Z,MERGED,True,436,1,6,https://github.com/pj1031999,PL011 driver,34,['AArch64'],https://github.com/cahirwpz/mimiker/pull/818,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/818,"Introduce UART for RPi3.
Depends on fixes from #824, #825.","Introduce UART for RPi3.
Depends on fixes from #824, #825.",True,{'HOORAY': ['https://github.com/xThaid']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,819,2020-11-13T12:21:18Z,2020-11-13T12:22:11Z,2020-11-13T12:22:16Z,MERGED,True,164,0,1,https://github.com/pj1031999,Import plcomreg.h from NetBSD,1,[],https://github.com/cahirwpz/mimiker/pull/819,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/819,It's needed by #818.,It's needed by #818.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,820,2020-11-13T16:28:50Z,2020-11-17T11:45:44Z,2020-11-17T11:45:47Z,MERGED,True,248,180,15,https://github.com/cahirwpz,Manage IRQ resources.,19,[],https://github.com/cahirwpz/mimiker/pull/820,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/820,An attempt to manage IRQ as if they were resources. To use an interrupt you have to first allocate if from device's bus.,An attempt to manage IRQ as if they were resources. To use an interrupt you have to first allocate if from device's bus.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,821,2020-11-13T17:58:15Z,2020-11-16T12:10:28Z,2020-11-16T12:10:28Z,MERGED,True,45,0,3,https://github.com/franciscozdo,Implement setting uid and gid according to set-user/group-ID bits,25,[],https://github.com/cahirwpz/mimiker/pull/821,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/821,When set-user-ID bit is set in the new process file mode then effective user id is set to owner of file and saved user id is set to old effective user id. The same is done when set-group-ID bit is set.,When set-user-ID bit is set in the new process file mode then effective user id is set to owner of file and saved user id is set to old effective user id. The same is done when set-group-ID bit is set.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,822,2020-11-13T22:47:33Z,2020-11-23T22:09:38Z,2020-11-23T22:09:38Z,CLOSED,False,2,1,1,https://github.com/komik0,Use tap device as a qemu's backend network interface,1,['WiP'],https://github.com/cahirwpz/mimiker/pull/822,https://github.com/komik0,1,https://github.com/cahirwpz/mimiker/pull/822,"It seems that the easiest way to use tap device by qemu is:

create tap device by our host startup scripts:

sudo ip tuntap add dev tap0 mode tap group netdev one_queue vnet_hdr
sudo ip link set tap0 up

IMO, this is minimal invasive approach - but perhaps it will be problem if there are more than one qemu running.
Second approach is to create a config file where we can select which tap device we want to use.
For instance, tap0-10 devices would be create by startup scripts.
The third approach is to install tunctl on our host PC and then:
sudo setcap cap_net_admin+ep `which tunctl` 
But here we still need to discuss how to set some parameters (e.q ip link set tap0 up)","It seems that the easiest way to use tap device by qemu is:

create tap device by our host startup scripts:

sudo ip tuntap add dev tap0 mode tap group netdev one_queue vnet_hdr
sudo ip link set tap0 up

IMO, this is minimal invasive approach - but perhaps it will be problem if there are more than one qemu running.
Second approach is to create a config file where we can select which tap device we want to use.
For instance, tap0-10 devices would be create by startup scripts.
The third approach is to install tunctl on our host PC and then:
sudo setcap cap_net_admin+ep `which tunctl` 
But here we still need to discuss how to set some parameters (e.q ip link set tap0 up)",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,823,2020-11-14T23:41:27Z,2020-11-27T11:09:29Z,2020-11-27T11:09:29Z,CLOSED,False,601,102,16,https://github.com/komik0,RTL8139 Alloc regs resource,10,[],https://github.com/cahirwpz/mimiker/pull/823,https://github.com/komik0,1,https://github.com/cahirwpz/mimiker/pull/823,"With this commit the following changes are introduced:

resource for rtl8139 regs is added
software reset is performed
dirty workaround for rman_alloc_resource

Important note:
to proceed with further improvement of this driver, there is needed to close #822 and #820","With this commit the following changes are introduced:

resource for rtl8139 regs is added
software reset is performed
dirty workaround for rman_alloc_resource

Important note:
to proceed with further improvement of this driver, there is needed to close #822 and #820",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,823,2020-11-14T23:41:27Z,2020-11-27T11:09:29Z,2020-11-27T11:09:29Z,CLOSED,False,601,102,16,https://github.com/komik0,RTL8139 Alloc regs resource,10,[],https://github.com/cahirwpz/mimiker/pull/823,https://github.com/komik0,2,https://github.com/cahirwpz/mimiker/pull/823#issuecomment-734781666,"With this commit the following changes are introduced:

resource for rtl8139 regs is added
software reset is performed
dirty workaround for rman_alloc_resource

Important note:
to proceed with further improvement of this driver, there is needed to close #822 and #820",I will upload easier to review version in another PR,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,824,2020-11-15T14:58:55Z,2020-11-16T07:08:52Z,2020-11-16T07:08:55Z,MERGED,True,6,6,1,https://github.com/pj1031999,Fix rootdev_enable/disable_irq.,1,['AArch64'],https://github.com/cahirwpz/mimiker/pull/824,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/824,Use correct registers for enabling and disabling irq.,Use correct registers for enabling and disabling irq.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,825,2020-11-15T15:00:50Z,2020-11-16T07:07:37Z,2020-11-16T07:07:41Z,MERGED,True,1,1,1,https://github.com/pj1031999,Fix SAVE_CTX.,1,['AArch64'],https://github.com/cahirwpz/mimiker/pull/825,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/825,Being consistent in PC & LR.,Being consistent in PC & LR.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,826,2020-11-15T15:38:51Z,2020-11-29T08:34:22Z,2020-11-29T08:34:23Z,MERGED,True,245,156,10,https://github.com/MichalBlk,Somewhat more reasonable resource manager,33,[],https://github.com/cahirwpz/mimiker/pull/826,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/826,"The main goals:

Implement multiple regions within a single resource manager.
Add proper alignment mechanism (via res_flags_t). (alignment is now separated from res_flags_t and is only part of internal driver interface).","The main goals:

Implement multiple regions within a single resource manager.
Add proper alignment mechanism (via res_flags_t). (alignment is now separated from res_flags_t and is only part of internal driver interface).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,826,2020-11-15T15:38:51Z,2020-11-29T08:34:22Z,2020-11-29T08:34:23Z,MERGED,True,245,156,10,https://github.com/MichalBlk,Somewhat more reasonable resource manager,33,[],https://github.com/cahirwpz/mimiker/pull/826,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/826#issuecomment-728879248,"The main goals:

Implement multiple regions within a single resource manager.
Add proper alignment mechanism (via res_flags_t). (alignment is now separated from res_flags_t and is only part of internal driver interface).",Please resolve conflicts after #820 merge.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,826,2020-11-15T15:38:51Z,2020-11-29T08:34:22Z,2020-11-29T08:34:23Z,MERGED,True,245,156,10,https://github.com/MichalBlk,Somewhat more reasonable resource manager,33,[],https://github.com/cahirwpz/mimiker/pull/826,https://github.com/MichalBlk,3,https://github.com/cahirwpz/mimiker/pull/826#issuecomment-729055474,"The main goals:

Implement multiple regions within a single resource manager.
Add proper alignment mechanism (via res_flags_t). (alignment is now separated from res_flags_t and is only part of internal driver interface).",I've limited sharing to irqs and updated PR due to #820 .,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,827,2020-11-16T11:11:27Z,2020-11-16T19:25:10Z,2020-11-16T19:25:10Z,MERGED,True,3,1,1,https://github.com/franciscozdo,Fix setuid syscall,22,[],https://github.com/cahirwpz/mimiker/pull/827,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/827,There was one condition inverted.,There was one condition inverted.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,828,2020-11-16T11:53:15Z,2020-11-18T14:03:42Z,2020-11-18T14:03:42Z,MERGED,True,38,4,3,https://github.com/j-piecuch,Reset caught signals on exec.,4,[],https://github.com/cahirwpz/mimiker/pull/828,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/828,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,829,2020-11-16T13:53:02Z,2021-01-13T16:50:25Z,2021-01-13T16:50:26Z,MERGED,True,74,57,3,https://github.com/wiklam,PIT timer with 64 bit counter,25,['accepted'],https://github.com/cahirwpz/mimiker/pull/829,https://github.com/wiklam,1,https://github.com/cahirwpz/mimiker/pull/829,"Simplifying the Programmable Interval Timer infrastructure and removing some races during time update.
We do not guarantee that we won't miss a whole period before we read the counter. We could use RTC interrupts to read the counter more often then PIT to prevent tick loss, but after a discussion, it will be too complicated handling it that way.","Simplifying the Programmable Interval Timer infrastructure and removing some races during time update.
We do not guarantee that we won't miss a whole period before we read the counter. We could use RTC interrupts to read the counter more often then PIT to prevent tick loss, but after a discussion, it will be too complicated handling it that way.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,830,2020-11-16T16:59:03Z,2020-11-18T21:36:57Z,2020-11-18T21:36:58Z,MERGED,True,7,0,1,https://github.com/bkjg,Fix bug in do_chdir,2,[],https://github.com/cahirwpz/mimiker/pull/830,https://github.com/bkjg,1,https://github.com/cahirwpz/mimiker/pull/830,Add check if file given as argument to cd command is a directory,Add check if file given as argument to cd command is a directory,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,831,2020-11-16T17:10:23Z,2020-12-08T11:27:49Z,2020-12-08T11:27:49Z,MERGED,True,234,67,19,https://github.com/bkjg,Shared memory in fork,34,[],https://github.com/cahirwpz/mimiker/pull/831,https://github.com/bkjg,1,https://github.com/cahirwpz/mimiker/pull/831,Add sharing shared memory instead of copying in fork syscall,Add sharing shared memory instead of copying in fork syscall,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,831,2020-11-16T17:10:23Z,2020-12-08T11:27:49Z,2020-12-08T11:27:49Z,MERGED,True,234,67,19,https://github.com/bkjg,Shared memory in fork,34,[],https://github.com/cahirwpz/mimiker/pull/831,https://github.com/bkjg,2,https://github.com/cahirwpz/mimiker/pull/831#issuecomment-735282283,Add sharing shared memory instead of copying in fork syscall,@j-piecuch Thank you for your comments! You're absolutely right! I fixed it.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,831,2020-11-16T17:10:23Z,2020-12-08T11:27:49Z,2020-12-08T11:27:49Z,MERGED,True,234,67,19,https://github.com/bkjg,Shared memory in fork,34,[],https://github.com/cahirwpz/mimiker/pull/831,https://github.com/j-piecuch,3,https://github.com/cahirwpz/mimiker/pull/831#issuecomment-739561107,Add sharing shared memory instead of copying in fork syscall,"Besides what Franek said, I'm interested in why the kernel has slowed down noticeably.
Could you explain that?

@pj1031999 I ran ./run_tests.py --thorough on this branch and master, and here are my results:
master:
real	19m26.254s
user	16m19.070s
sys	1m2.625s

bkjg:shared_memory:
real	19m38.627s
user	16m30.054s
sys	1m0.461s

Given that the shared_memory branch has 2 more tests, I wouldn't say the kernel has noticeably slowed down.",True,{'THUMBS_UP': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,831,2020-11-16T17:10:23Z,2020-12-08T11:27:49Z,2020-12-08T11:27:49Z,MERGED,True,234,67,19,https://github.com/bkjg,Shared memory in fork,34,[],https://github.com/cahirwpz/mimiker/pull/831,https://github.com/pj1031999,4,https://github.com/cahirwpz/mimiker/pull/831#issuecomment-739849598,Add sharing shared memory instead of copying in fork syscall,@j-piecuch for me it was 16m vs 19m on clang.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,832,2020-11-16T17:14:57Z,2021-03-15T06:49:54Z,2021-03-15T06:49:54Z,CLOSED,False,207,49,13,https://github.com/bkjg,Copy-on-write inside fork syscall,116,['proposal'],https://github.com/cahirwpz/mimiker/pull/832,https://github.com/bkjg,1,https://github.com/cahirwpz/mimiker/pull/832,Add copy-on-write to fork.,Add copy-on-write to fork.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,832,2020-11-16T17:14:57Z,2021-03-15T06:49:54Z,2021-03-15T06:49:54Z,CLOSED,False,207,49,13,https://github.com/bkjg,Copy-on-write inside fork syscall,116,['proposal'],https://github.com/cahirwpz/mimiker/pull/832,https://github.com/pj1031999,2,https://github.com/cahirwpz/mimiker/pull/832#issuecomment-738019579,Add copy-on-write to fork.,@bkjg what is a status of that PR? Should I start reviewing the code?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,832,2020-11-16T17:14:57Z,2021-03-15T06:49:54Z,2021-03-15T06:49:54Z,CLOSED,False,207,49,13,https://github.com/bkjg,Copy-on-write inside fork syscall,116,['proposal'],https://github.com/cahirwpz/mimiker/pull/832,https://github.com/bkjg,3,https://github.com/cahirwpz/mimiker/pull/832#issuecomment-738035457,Add copy-on-write to fork.,"@bkjg what is a status of that PR? Should I start reviewing the code?

@pj1031999 In order to successfully review of this PR we should wait until #831 is merged, because this PR depends on changes from that PR, so they are visible here too.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,832,2020-11-16T17:14:57Z,2021-03-15T06:49:54Z,2021-03-15T06:49:54Z,CLOSED,False,207,49,13,https://github.com/bkjg,Copy-on-write inside fork syscall,116,['proposal'],https://github.com/cahirwpz/mimiker/pull/832,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/832#issuecomment-740564175,Add copy-on-write to fork.,Please resolve conflicts after #831 merge.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,832,2020-11-16T17:14:57Z,2021-03-15T06:49:54Z,2021-03-15T06:49:54Z,CLOSED,False,207,49,13,https://github.com/bkjg,Copy-on-write inside fork syscall,116,['proposal'],https://github.com/cahirwpz/mimiker/pull/832,https://github.com/cahirwpz,5,https://github.com/cahirwpz/mimiker/pull/832#issuecomment-745094018,Add copy-on-write to fork.,Please merge master into your branch and resolve conflicts.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,832,2020-11-16T17:14:57Z,2021-03-15T06:49:54Z,2021-03-15T06:49:54Z,CLOSED,False,207,49,13,https://github.com/bkjg,Copy-on-write inside fork syscall,116,['proposal'],https://github.com/cahirwpz/mimiker/pull/832,https://github.com/cahirwpz,6,https://github.com/cahirwpz/mimiker/pull/832#issuecomment-798878263,Add copy-on-write to fork.,@franciscozdo Please evaluate this PR for useful changes in the context of adapting Cranor's amap.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,832,2020-11-16T17:14:57Z,2021-03-15T06:49:54Z,2021-03-15T06:49:54Z,CLOSED,False,207,49,13,https://github.com/bkjg,Copy-on-write inside fork syscall,116,['proposal'],https://github.com/cahirwpz/mimiker/pull/832,https://github.com/franciscozdo,7,https://github.com/cahirwpz/mimiker/pull/832#issuecomment-798921482,Add copy-on-write to fork.,Copy-on-write will be handled in another way.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,832,2020-11-16T17:14:57Z,2021-03-15T06:49:54Z,2021-03-15T06:49:54Z,CLOSED,False,207,49,13,https://github.com/bkjg,Copy-on-write inside fork syscall,116,['proposal'],https://github.com/cahirwpz/mimiker/pull/832,https://github.com/cahirwpz,8,https://github.com/cahirwpz/mimiker/pull/832#issuecomment-799162382,Add copy-on-write to fork.,Hence we're going to handle CoW in a different way I'm closing this PR.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,833,2020-11-16T17:50:14Z,2020-11-27T10:30:01Z,2020-11-27T10:30:01Z,MERGED,True,304,71,6,https://github.com/j-piecuch,TTY: Introduce concepts of controlling terminal and foreground process group,16,[],https://github.com/cahirwpz/mimiker/pull/833,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/833,"Add concepts of controlling tty and foreground pgrp
Implement ioctls for getting and setting foreground pgrp
Implement background wait in tty_{read,write}()
Add SIGTTIN and SIGTTOU signals","Add concepts of controlling tty and foreground pgrp
Implement ioctls for getting and setting foreground pgrp
Implement background wait in tty_{read,write}()
Add SIGTTIN and SIGTTOU signals",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,834,2020-11-18T14:30:53Z,2020-11-18T21:40:00Z,2020-11-18T21:40:03Z,MERGED,True,2,2,2,https://github.com/pj1031999,Fix assert in pmap_enter.,4,['AArch64'],https://github.com/cahirwpz/mimiker/pull/834,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/834,Use virtual address instead of physical address.,Use virtual address instead of physical address.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,834,2020-11-18T14:30:53Z,2020-11-18T21:40:00Z,2020-11-18T21:40:03Z,MERGED,True,2,2,2,https://github.com/pj1031999,Fix assert in pmap_enter.,4,['AArch64'],https://github.com/cahirwpz/mimiker/pull/834,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/834#issuecomment-729719225,Use virtual address instead of physical address.,Could you fix pmap_enter in MIPS as well ?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,834,2020-11-18T14:30:53Z,2020-11-18T21:40:00Z,2020-11-18T21:40:03Z,MERGED,True,2,2,2,https://github.com/pj1031999,Fix assert in pmap_enter.,4,['AArch64'],https://github.com/cahirwpz/mimiker/pull/834,https://github.com/pj1031999,3,https://github.com/cahirwpz/mimiker/pull/834#issuecomment-729725859,Use virtual address instead of physical address.,"Could you fix pmap_enter in MIPS as well ?

Done.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,835,2020-11-18T16:02:21Z,2020-11-27T16:02:31Z,2020-11-27T16:02:34Z,MERGED,True,49,15,7,https://github.com/pj1031999,Add support for ELF on AArch64.,5,['AArch64'],https://github.com/cahirwpz/mimiker/pull/835,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/835,Add support for ELF on AArch64.,Add support for ELF on AArch64.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,836,2020-11-19T20:58:22Z,2020-12-11T18:15:38Z,2020-12-11T18:15:38Z,CLOSED,False,133,0,2,https://github.com/mohrcore,ISA bus driver,20,['WiP'],https://github.com/cahirwpz/mimiker/pull/836,https://github.com/mohrcore,1,https://github.com/cahirwpz/mimiker/pull/836,"WIP ISA bus driver.
Should solve #380 in future.","WIP ISA bus driver.
Should solve #380 in future.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,836,2020-11-19T20:58:22Z,2020-12-11T18:15:38Z,2020-12-11T18:15:38Z,CLOSED,False,133,0,2,https://github.com/mohrcore,ISA bus driver,20,['WiP'],https://github.com/cahirwpz/mimiker/pull/836,https://github.com/mohrcore,2,https://github.com/cahirwpz/mimiker/pull/836#issuecomment-743347801,"WIP ISA bus driver.
Should solve #380 in future.","I'm closing this PR as I move into another branch after failed rebase attempts.
This is continued in  #873.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,837,2020-11-21T14:33:34Z,2020-11-27T13:43:15Z,2020-11-27T13:43:15Z,MERGED,True,29,2,1,https://github.com/pj1031999,Restore link register in copy.S.,4,['AArch64'],https://github.com/cahirwpz/mimiker/pull/837,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/837,"Restore link register in copyin, copyout, copyinstr, copyerr.","Restore link register in copyin, copyout, copyinstr, copyerr.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,838,2020-11-21T14:34:41Z,2020-12-11T14:35:40Z,2020-12-11T14:35:43Z,MERGED,True,7,0,2,https://github.com/pj1031999,Load user context in proper way.,2,['AArch64'],https://github.com/cahirwpz/mimiker/pull/838,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/838,Load user context in proper way.,Load user context in proper way.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,839,2020-11-21T14:35:41Z,2020-11-22T07:09:45Z,2020-11-22T07:09:49Z,MERGED,True,3,2,1,https://github.com/pj1031999,User pmap.,2,['AArch64'],https://github.com/cahirwpz/mimiker/pull/839,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/839,Enable memory translation for EL0.,Enable memory translation for EL0.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,840,2020-11-21T17:26:31Z,2020-11-27T13:33:22Z,2020-11-27T13:33:25Z,MERGED,True,13,1,1,https://github.com/pj1031999,Starting procedure for user ELF images.,4,['AArch64'],https://github.com/cahirwpz/mimiker/pull/840,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/840,Starting procedure for user ELF images.,Starting procedure for user ELF images.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,841,2020-11-22T13:04:32Z,2020-11-26T12:22:24Z,2020-11-26T12:22:28Z,MERGED,True,312,298,4,https://github.com/pj1031999,Size independent arguments for syscall,4,[],https://github.com/cahirwpz/mimiker/pull/841,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/841,"That change introduce wrappers for arguments that allow to pass something smaller than register.
All arguments inside _args_t are packed into union of register_t and real argument so now we can use memcpy for creating arguments from CPU context in machine dependent layer of syscalls without problems.
It's necessary for AArch64 where arguments are smaller than registers.","That change introduce wrappers for arguments that allow to pass something smaller than register.
All arguments inside _args_t are packed into union of register_t and real argument so now we can use memcpy for creating arguments from CPU context in machine dependent layer of syscalls without problems.
It's necessary for AArch64 where arguments are smaller than registers.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,842,2020-11-22T16:02:08Z,2020-11-29T09:08:37Z,2020-11-29T09:08:40Z,MERGED,True,54,6,5,https://github.com/pj1031999,Syscall handler for AArch64.,5,['AArch64'],https://github.com/cahirwpz/mimiker/pull/842,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/842,Syscall handler for AArch64.,Syscall handler for AArch64.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,843,2020-11-22T21:55:02Z,2020-12-04T19:49:34Z,2020-12-04T19:49:34Z,MERGED,True,329,220,18,https://github.com/MichalBlk,Resource lists.,31,[],https://github.com/cahirwpz/mimiker/pull/843,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/843,"For each device, we maintain a resource list which is initialized in parent bus attach function and used while allocating resources on device behalf. It simplifies and unifies bus allocation interface.","For each device, we maintain a resource list which is initialized in parent bus attach function and used while allocating resources on device behalf. It simplifies and unifies bus allocation interface.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,843,2020-11-22T21:55:02Z,2020-12-04T19:49:34Z,2020-12-04T19:49:34Z,MERGED,True,329,220,18,https://github.com/MichalBlk,Resource lists.,31,[],https://github.com/cahirwpz/mimiker/pull/843,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/843#issuecomment-735365128,"For each device, we maintain a resource list which is initialized in parent bus attach function and used while allocating resources on device behalf. It simplifies and unifies bus allocation interface.",Please resolve conflicts after #826 merge and provide meaningful description for the PR.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,843,2020-11-22T21:55:02Z,2020-12-04T19:49:34Z,2020-12-04T19:49:34Z,MERGED,True,329,220,18,https://github.com/MichalBlk,Resource lists.,31,[],https://github.com/cahirwpz/mimiker/pull/843,https://github.com/MichalBlk,3,https://github.com/cahirwpz/mimiker/pull/843#issuecomment-735386949,"For each device, we maintain a resource list which is initialized in parent bus attach function and used while allocating resources on device behalf. It simplifies and unifies bus allocation interface.",Done. It's up to date.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,844,2020-11-23T13:23:03Z,2020-12-08T07:58:43Z,2020-12-08T07:58:43Z,MERGED,True,115,73,4,https://github.com/ThomasStachovsky,Interrupt threads implementation,22,[],https://github.com/cahirwpz/mimiker/pull/844,https://github.com/ThomasStachovsky,1,https://github.com/cahirwpz/mimiker/pull/844,Interrupt threads implementation.,Interrupt threads implementation.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,844,2020-11-23T13:23:03Z,2020-12-08T07:58:43Z,2020-12-08T07:58:43Z,MERGED,True,115,73,4,https://github.com/ThomasStachovsky,Interrupt threads implementation,22,[],https://github.com/cahirwpz/mimiker/pull/844,https://github.com/pj1031999,2,https://github.com/cahirwpz/mimiker/pull/844#issuecomment-734769605,Interrupt threads implementation.,@ThomasStachovsky is it a final version of PR? You requested review but we still have a WIP label here.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,844,2020-11-23T13:23:03Z,2020-12-08T07:58:43Z,2020-12-08T07:58:43Z,MERGED,True,115,73,4,https://github.com/ThomasStachovsky,Interrupt threads implementation,22,[],https://github.com/cahirwpz/mimiker/pull/844,https://github.com/MichalBlk,3,https://github.com/cahirwpz/mimiker/pull/844#issuecomment-739853027,Interrupt threads implementation.,LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,845,2020-11-23T22:55:21Z,2020-12-04T19:50:34Z,2020-12-04T19:50:34Z,CLOSED,False,1,1,1,https://github.com/komik0,Improve qemu-mimiker cleaning,1,[],https://github.com/cahirwpz/mimiker/pull/845,https://github.com/komik0,1,https://github.com/cahirwpz/mimiker/pull/845,"To avoid make error caused by quilt - in case when we want to import
new patches, we need to clean also .pc
We can be more gentle and use quilt here (to clean his files) but this approach is also correct
and covers our needs","To avoid make error caused by quilt - in case when we want to import
new patches, we need to clean also .pc
We can be more gentle and use quilt here (to clean his files) but this approach is also correct
and covers our needs",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,845,2020-11-23T22:55:21Z,2020-12-04T19:50:34Z,2020-12-04T19:50:34Z,CLOSED,False,1,1,1,https://github.com/komik0,Improve qemu-mimiker cleaning,1,[],https://github.com/cahirwpz/mimiker/pull/845,https://github.com/komik0,2,https://github.com/cahirwpz/mimiker/pull/845#issuecomment-732475029,"To avoid make error caused by quilt - in case when we want to import
new patches, we need to clean also .pc
We can be more gentle and use quilt here (to clean his files) but this approach is also correct
and covers our needs",my mistake,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,845,2020-11-23T22:55:21Z,2020-12-04T19:50:34Z,2020-12-04T19:50:34Z,CLOSED,False,1,1,1,https://github.com/komik0,Improve qemu-mimiker cleaning,1,[],https://github.com/cahirwpz/mimiker/pull/845,https://github.com/komik0,3,https://github.com/cahirwpz/mimiker/pull/845#issuecomment-732475636,"To avoid make error caused by quilt - in case when we want to import
new patches, we need to clean also .pc
We can be more gentle and use quilt here (to clean his files) but this approach is also correct
and covers our needs",because it was my mistake. we can consider it as a small improvement.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,845,2020-11-23T22:55:21Z,2020-12-04T19:50:34Z,2020-12-04T19:50:34Z,CLOSED,False,1,1,1,https://github.com/komik0,Improve qemu-mimiker cleaning,1,[],https://github.com/cahirwpz/mimiker/pull/845,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/845#issuecomment-734146358,"To avoid make error caused by quilt - in case when we want to import
new patches, we need to clean also .pc
We can be more gentle and use quilt here (to clean his files) but this approach is also correct
and covers our needs","If we can use quilt for that instead of forcefully remove its directory, then please do so.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,845,2020-11-23T22:55:21Z,2020-12-04T19:50:34Z,2020-12-04T19:50:34Z,CLOSED,False,1,1,1,https://github.com/komik0,Improve qemu-mimiker cleaning,1,[],https://github.com/cahirwpz/mimiker/pull/845,https://github.com/komik0,5,https://github.com/cahirwpz/mimiker/pull/845#issuecomment-738243713,"To avoid make error caused by quilt - in case when we want to import
new patches, we need to clean also .pc
We can be more gentle and use quilt here (to clean his files) but this approach is also correct
and covers our needs",not needed,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,845,2020-11-23T22:55:21Z,2020-12-04T19:50:34Z,2020-12-04T19:50:34Z,CLOSED,False,1,1,1,https://github.com/komik0,Improve qemu-mimiker cleaning,1,[],https://github.com/cahirwpz/mimiker/pull/845,https://github.com/cahirwpz,6,https://github.com/cahirwpz/mimiker/pull/845#issuecomment-738984169,"To avoid make error caused by quilt - in case when we want to import
new patches, we need to clean also .pc
We can be more gentle and use quilt here (to clean his files) but this approach is also correct
and covers our needs",If the PR is not needed as you stated in your previous comment then I'll close it.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,846,2020-11-25T18:38:50Z,2020-11-26T08:15:59Z,2020-12-16T20:32:24Z,MERGED,True,12,0,2,https://github.com/franciscozdo,Implement file owner and group,1,[],https://github.com/cahirwpz/mimiker/pull/846,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/846,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,846,2020-11-25T18:38:50Z,2020-11-26T08:15:59Z,2020-12-16T20:32:24Z,MERGED,True,12,0,2,https://github.com/franciscozdo,Implement file owner and group,1,[],https://github.com/cahirwpz/mimiker/pull/846,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/846#issuecomment-734145325,,LGTM Although I would expect you to fill in PR description in the future.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,847,2020-11-25T18:45:12Z,2020-11-30T07:05:24Z,2020-12-16T20:35:09Z,MERGED,True,207,18,17,https://github.com/franciscozdo,Chown,7,[],https://github.com/cahirwpz/mimiker/pull/847,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/847,"I have implemented chown syscall and added privilege checks in chmod.
Process can chmod if:

is super-user
is owner of file

I didn't involved checks while setting S_ISVTX bit on files, because we have no interpretation of sticky-bit on files
Process can chown when:

is super-user
is owner and NOT setting new owner and new group is in his supplementary groups

When changing owner or group of file bits S_ISUID or S_ISGID are cleared.","I have implemented chown syscall and added privilege checks in chmod.
Process can chmod if:

is super-user
is owner of file

I didn't involved checks while setting S_ISVTX bit on files, because we have no interpretation of sticky-bit on files
Process can chown when:

is super-user
is owner and NOT setting new owner and new group is in his supplementary groups

When changing owner or group of file bits S_ISUID or S_ISGID are cleared.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,848,2020-11-27T11:10:18Z,2020-12-14T12:41:10Z,2020-12-14T12:41:10Z,MERGED,True,53,1,4,https://github.com/komik0,RTL8139: Alloc registers resource and perform software reset,15,[],https://github.com/cahirwpz/mimiker/pull/848,https://github.com/komik0,1,https://github.com/cahirwpz/mimiker/pull/848,"With this commit the following changes are introduced:

resource for rtl8139 regs is added
software reset is performed","With this commit the following changes are introduced:

resource for rtl8139 regs is added
software reset is performed",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,848,2020-11-27T11:10:18Z,2020-12-14T12:41:10Z,2020-12-14T12:41:10Z,MERGED,True,53,1,4,https://github.com/komik0,RTL8139: Alloc registers resource and perform software reset,15,[],https://github.com/cahirwpz/mimiker/pull/848,https://github.com/MichalBlk,2,https://github.com/cahirwpz/mimiker/pull/848#issuecomment-735368706,"With this commit the following changes are introduced:

resource for rtl8139 regs is added
software reset is performed",Please adjust to #826,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,849,2020-11-29T15:16:12Z,2020-12-07T18:49:04Z,2020-12-07T18:49:04Z,CLOSED,False,19,9,3,https://github.com/mohrcore,Fix sequential PCI bar RIDs,4,[],https://github.com/cahirwpz/mimiker/pull/849,https://github.com/mohrcore,1,https://github.com/cahirwpz/mimiker/pull/849,"First of all, I'm not very familiar with the concept of PCI bars yet, so it's quite possible there's a better solution.
#817 was meant to free PCI device drivers from being responsible for choosing the right PCI bar RIDs by letting them just pick n natural numbers beginning from 0.
I am surprised it actually ended up getting merged to master branch. There's just one driver which benefits from this change and it is stdvga on MIPS board. Yet, after this commit, anyone who had run mimiker with -g option would notice that the VGA is broken.
Currently, my solution makes the drivers access PCI bar resources using RIDs as if they were sequential while retaining the underlying physical order. Which bar is valid for use depends on its config which is read in pci_enumerate procedure and it looks like reordering them (if possible) would require changing their configurations, which I believe are written by the device connected to the PCI bus.","First of all, I'm not very familiar with the concept of PCI bars yet, so it's quite possible there's a better solution.
#817 was meant to free PCI device drivers from being responsible for choosing the right PCI bar RIDs by letting them just pick n natural numbers beginning from 0.
I am surprised it actually ended up getting merged to master branch. There's just one driver which benefits from this change and it is stdvga on MIPS board. Yet, after this commit, anyone who had run mimiker with -g option would notice that the VGA is broken.
Currently, my solution makes the drivers access PCI bar resources using RIDs as if they were sequential while retaining the underlying physical order. Which bar is valid for use depends on its config which is read in pci_enumerate procedure and it looks like reordering them (if possible) would require changing their configurations, which I believe are written by the device connected to the PCI bus.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,849,2020-11-29T15:16:12Z,2020-12-07T18:49:04Z,2020-12-07T18:49:04Z,CLOSED,False,19,9,3,https://github.com/mohrcore,Fix sequential PCI bar RIDs,4,[],https://github.com/cahirwpz/mimiker/pull/849,https://github.com/MichalBlk,2,https://github.com/cahirwpz/mimiker/pull/849#issuecomment-735433042,"First of all, I'm not very familiar with the concept of PCI bars yet, so it's quite possible there's a better solution.
#817 was meant to free PCI device drivers from being responsible for choosing the right PCI bar RIDs by letting them just pick n natural numbers beginning from 0.
I am surprised it actually ended up getting merged to master branch. There's just one driver which benefits from this change and it is stdvga on MIPS board. Yet, after this commit, anyone who had run mimiker with -g option would notice that the VGA is broken.
Currently, my solution makes the drivers access PCI bar resources using RIDs as if they were sequential while retaining the underlying physical order. Which bar is valid for use depends on its config which is read in pci_enumerate procedure and it looks like reordering them (if possible) would require changing their configurations, which I believe are written by the device connected to the PCI bus.","We can make distinction between real bar id and sequential bar id in the pci_bar structure (e.g. rrid and srid).
Then in pci_bus_enumerate do pcid->bar[id].rrid = i and use it in gt_pci_activate_resource. It would only require minor changes.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,849,2020-11-29T15:16:12Z,2020-12-07T18:49:04Z,2020-12-07T18:49:04Z,CLOSED,False,19,9,3,https://github.com/mohrcore,Fix sequential PCI bar RIDs,4,[],https://github.com/cahirwpz/mimiker/pull/849,https://github.com/mohrcore,3,https://github.com/cahirwpz/mimiker/pull/849#issuecomment-735444896,"First of all, I'm not very familiar with the concept of PCI bars yet, so it's quite possible there's a better solution.
#817 was meant to free PCI device drivers from being responsible for choosing the right PCI bar RIDs by letting them just pick n natural numbers beginning from 0.
I am surprised it actually ended up getting merged to master branch. There's just one driver which benefits from this change and it is stdvga on MIPS board. Yet, after this commit, anyone who had run mimiker with -g option would notice that the VGA is broken.
Currently, my solution makes the drivers access PCI bar resources using RIDs as if they were sequential while retaining the underlying physical order. Which bar is valid for use depends on its config which is read in pci_enumerate procedure and it looks like reordering them (if possible) would require changing their configurations, which I believe are written by the device connected to the PCI bus.","We can make distinction between real bar id and sequential bar id in the pci_bar structure (e.g. rrid and srid).
Then in pci_bus_enumerate do pcid->bar[id].rrid = i and use it in gt_pci_activate_resource. It would only require minor changes.

Ok, but why? Is there any use for keeping real bar id there?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,849,2020-11-29T15:16:12Z,2020-12-07T18:49:04Z,2020-12-07T18:49:04Z,CLOSED,False,19,9,3,https://github.com/mohrcore,Fix sequential PCI bar RIDs,4,[],https://github.com/cahirwpz/mimiker/pull/849,https://github.com/MichalBlk,4,https://github.com/cahirwpz/mimiker/pull/849#issuecomment-735475549,"First of all, I'm not very familiar with the concept of PCI bars yet, so it's quite possible there's a better solution.
#817 was meant to free PCI device drivers from being responsible for choosing the right PCI bar RIDs by letting them just pick n natural numbers beginning from 0.
I am surprised it actually ended up getting merged to master branch. There's just one driver which benefits from this change and it is stdvga on MIPS board. Yet, after this commit, anyone who had run mimiker with -g option would notice that the VGA is broken.
Currently, my solution makes the drivers access PCI bar resources using RIDs as if they were sequential while retaining the underlying physical order. Which bar is valid for use depends on its config which is read in pci_enumerate procedure and it looks like reordering them (if possible) would require changing their configurations, which I believe are written by the device connected to the PCI bus.",It eliminates the need to create gt_pci_bar_of_rid and additional logic in gt_pci_alloc_resource.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,849,2020-11-29T15:16:12Z,2020-12-07T18:49:04Z,2020-12-07T18:49:04Z,CLOSED,False,19,9,3,https://github.com/mohrcore,Fix sequential PCI bar RIDs,4,[],https://github.com/cahirwpz/mimiker/pull/849,https://github.com/mohrcore,5,https://github.com/cahirwpz/mimiker/pull/849#issuecomment-738220119,"First of all, I'm not very familiar with the concept of PCI bars yet, so it's quite possible there's a better solution.
#817 was meant to free PCI device drivers from being responsible for choosing the right PCI bar RIDs by letting them just pick n natural numbers beginning from 0.
I am surprised it actually ended up getting merged to master branch. There's just one driver which benefits from this change and it is stdvga on MIPS board. Yet, after this commit, anyone who had run mimiker with -g option would notice that the VGA is broken.
Currently, my solution makes the drivers access PCI bar resources using RIDs as if they were sequential while retaining the underlying physical order. Which bar is valid for use depends on its config which is read in pci_enumerate procedure and it looks like reordering them (if possible) would require changing their configurations, which I believe are written by the device connected to the PCI bus.","I wrote a different solution which, much like what @MichalBlk has suggested. I'm not sure wheter I like it more. It feels more intuitive to store pci_bar_t in order of those bars instead of ordering them by their RIDs. I feel like we are mixing information that's related to drivers (RIDs) with information that describes connected hardware a bit too much here. Ideally, I think we should neither store RID in pci_bar_t or put these pci_bar_ts in order that's unrelated to hardware. Resource lists should take care of that when they are implemented.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,849,2020-11-29T15:16:12Z,2020-12-07T18:49:04Z,2020-12-07T18:49:04Z,CLOSED,False,19,9,3,https://github.com/mohrcore,Fix sequential PCI bar RIDs,4,[],https://github.com/cahirwpz/mimiker/pull/849,https://github.com/MichalBlk,6,https://github.com/cahirwpz/mimiker/pull/849#issuecomment-738703240,"First of all, I'm not very familiar with the concept of PCI bars yet, so it's quite possible there's a better solution.
#817 was meant to free PCI device drivers from being responsible for choosing the right PCI bar RIDs by letting them just pick n natural numbers beginning from 0.
I am surprised it actually ended up getting merged to master branch. There's just one driver which benefits from this change and it is stdvga on MIPS board. Yet, after this commit, anyone who had run mimiker with -g option would notice that the VGA is broken.
Currently, my solution makes the drivers access PCI bar resources using RIDs as if they were sequential while retaining the underlying physical order. Which bar is valid for use depends on its config which is read in pci_enumerate procedure and it looks like reordering them (if possible) would require changing their configurations, which I believe are written by the device connected to the PCI bus.","I'm sorry. I didn't think it through. We only need one identifier in the bar structure (let's call it rid). It will remember the physical position of the bar. Then we do pcid->bar[pcid->nbars++] = (pci_bar_t){..., .rid = i, ...}.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,849,2020-11-29T15:16:12Z,2020-12-07T18:49:04Z,2020-12-07T18:49:04Z,CLOSED,False,19,9,3,https://github.com/mohrcore,Fix sequential PCI bar RIDs,4,[],https://github.com/cahirwpz/mimiker/pull/849,https://github.com/cahirwpz,7,https://github.com/cahirwpz/mimiker/pull/849#issuecomment-740108353,"First of all, I'm not very familiar with the concept of PCI bars yet, so it's quite possible there's a better solution.
#817 was meant to free PCI device drivers from being responsible for choosing the right PCI bar RIDs by letting them just pick n natural numbers beginning from 0.
I am surprised it actually ended up getting merged to master branch. There's just one driver which benefits from this change and it is stdvga on MIPS board. Yet, after this commit, anyone who had run mimiker with -g option would notice that the VGA is broken.
Currently, my solution makes the drivers access PCI bar resources using RIDs as if they were sequential while retaining the underlying physical order. Which bar is valid for use depends on its config which is read in pci_enumerate procedure and it looks like reordering them (if possible) would require changing their configurations, which I believe are written by the device connected to the PCI bus.",We're back to original solution. We don't want to renumber BARs.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,850,2020-11-29T16:48:11Z,2020-11-30T07:07:57Z,2020-11-30T07:08:00Z,MERGED,True,1,2,1,https://github.com/pj1031999,Implement user_mode_p for AArch64.,1,['AArch64'],https://github.com/cahirwpz/mimiker/pull/850,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/850,Implement user_mode_p for AArch64.,Implement user_mode_p for AArch64.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,851,2020-11-29T16:49:02Z,2021-01-13T16:23:41Z,2021-01-13T16:23:45Z,MERGED,True,99,64,8,https://github.com/pj1031999,Signals for AArch64.,11,"['accepted', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/851,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/851,Signals for AArch64.,Signals for AArch64.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,852,2020-11-30T10:46:08Z,2021-01-17T10:56:11Z,2021-01-17T10:56:11Z,CLOSED,False,112,2,6,https://github.com/pj1031999,Enable FPU on AArch64.,2,"['WiP', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/852,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/852,Enable FPU on AArch64.,Enable FPU on AArch64.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,852,2020-11-30T10:46:08Z,2021-01-17T10:56:11Z,2021-01-17T10:56:11Z,CLOSED,False,112,2,6,https://github.com/pj1031999,Enable FPU on AArch64.,2,"['WiP', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/852,https://github.com/pj1031999,2,https://github.com/cahirwpz/mimiker/pull/852#issuecomment-761770883,Enable FPU on AArch64.,Further work on the FPU is in #931.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,853,2020-12-01T13:13:38Z,2020-12-02T11:57:32Z,2020-12-02T11:57:32Z,MERGED,True,123,8,16,https://github.com/j-piecuch,Implement setlogin() and getlogin(),7,[],https://github.com/cahirwpz/mimiker/pull/853,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/853,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,854,2020-12-01T13:51:03Z,2020-12-07T20:19:33Z,2020-12-07T20:19:33Z,MERGED,True,55,17,11,https://github.com/j-piecuch,Implement /dev/tty pseudo-device.,5,[],https://github.com/cahirwpz/mimiker/pull/854,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/854,This device always refers to the opening process's controlling terminal.,This device always refers to the opening process's controlling terminal.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,855,2020-12-03T02:18:04Z,2020-12-04T15:52:06Z,2020-12-04T15:52:06Z,CLOSED,False,3,1,1,https://github.com/wiklam,Adding timer and performance interrupts to mips.,1,[],https://github.com/cahirwpz/mimiker/pull/855,https://github.com/wiklam,1,https://github.com/cahirwpz/mimiker/pull/855,"According to MIPS32® 24KEf™ Processor Core Datasheet - Interrupt Handling  and MIPS® Malta™-R Development Platform
User’s Manual - Table 4.16  we have also a timer and performance interrupts.","According to MIPS32® 24KEf™ Processor Core Datasheet - Interrupt Handling  and MIPS® Malta™-R Development Platform
User’s Manual - Table 4.16  we have also a timer and performance interrupts.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,855,2020-12-03T02:18:04Z,2020-12-04T15:52:06Z,2020-12-04T15:52:06Z,CLOSED,False,3,1,1,https://github.com/wiklam,Adding timer and performance interrupts to mips.,1,[],https://github.com/cahirwpz/mimiker/pull/855,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/855#issuecomment-737767237,"According to MIPS32® 24KEf™ Processor Core Datasheet - Interrupt Handling  and MIPS® Malta™-R Development Platform
User’s Manual - Table 4.16  we have also a timer and performance interrupts.",Have you made sure that these are actually implemented in QEmu?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,855,2020-12-03T02:18:04Z,2020-12-04T15:52:06Z,2020-12-04T15:52:06Z,CLOSED,False,3,1,1,https://github.com/wiklam,Adding timer and performance interrupts to mips.,1,[],https://github.com/cahirwpz/mimiker/pull/855,https://github.com/wiklam,3,https://github.com/cahirwpz/mimiker/pull/855#issuecomment-737971138,"According to MIPS32® 24KEf™ Processor Core Datasheet - Interrupt Handling  and MIPS® Malta™-R Development Platform
User’s Manual - Table 4.16  we have also a timer and performance interrupts.","Have you made sure that these are actually implemented in QEmu?

We are already using the MIPS_TIMER interrupt for rtc, and our interrupt controller supports the interrupt levels in QEmu - i8259.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,856,2020-12-03T15:48:18Z,2020-12-04T19:38:34Z,2020-12-04T19:38:35Z,MERGED,True,10,0,1,https://github.com/j-piecuch,tty: don't report errors on partial reads/writes.,1,[],https://github.com/cahirwpz/mimiker/pull/856,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/856,"If we report an error, the number of bytes read/written is not returned to userspace.","If we report an error, the number of bytes read/written is not returned to userspace.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,857,2020-12-04T11:19:42Z,2020-12-21T13:07:24Z,2020-12-21T13:07:24Z,CLOSED,False,67,7,1,https://github.com/ThomasStachovsky,cbus driver,1,['WiP'],https://github.com/cahirwpz/mimiker/pull/857,https://github.com/ThomasStachovsky,1,https://github.com/cahirwpz/mimiker/pull/857,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,858,2020-12-04T21:29:52Z,2020-12-07T14:30:05Z,2020-12-07T14:30:05Z,MERGED,True,4,8,3,https://github.com/MichalBlk,Only use physical bar numbers.,1,[],https://github.com/cahirwpz/mimiker/pull/858,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/858,"Abandon the current approach which (incorrectly) tries to provide sequential bar numbers to a device driver. We should only rely on physical bar identifiers, which drivers must be aware of.","Abandon the current approach which (incorrectly) tries to provide sequential bar numbers to a device driver. We should only rely on physical bar identifiers, which drivers must be aware of.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,859,2020-12-05T17:06:31Z,,2022-06-06T14:52:06Z,OPEN,False,1209,40,14,https://github.com/mohrcore,e.MMC/SD(SC/HC) drivers for RPi 3,106,"['WiP', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/859,https://github.com/mohrcore,1,https://github.com/cahirwpz/mimiker/pull/859,"Working on EMMC driver for RPi3.
Currently porting some stolen code and trying to get it to work.
This PR compiles all the work related to making drivers based on e.MMC.
A driver for e.MMC controller on BCM2835

 e.MMC interface (completed in #1057)
 Driver for e.MMC controller on BCM2835 (#1101 in progress: review)
 Machine-independent driver for SD(SC/HC) bus (#1135 in progress: review)","Working on EMMC driver for RPi3.
Currently porting some stolen code and trying to get it to work.
This PR compiles all the work related to making drivers based on e.MMC.
A driver for e.MMC controller on BCM2835

 e.MMC interface (completed in #1057)
 Driver for e.MMC controller on BCM2835 (#1101 in progress: review)
 Machine-independent driver for SD(SC/HC) bus (#1135 in progress: review)",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,859,2020-12-05T17:06:31Z,,2022-06-06T14:52:06Z,OPEN,False,1209,40,14,https://github.com/mohrcore,e.MMC/SD(SC/HC) drivers for RPi 3,106,"['WiP', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/859,https://github.com/mohrcore,2,https://github.com/cahirwpz/mimiker/pull/859#issuecomment-774754327,"Working on EMMC driver for RPi3.
Currently porting some stolen code and trying to get it to work.
This PR compiles all the work related to making drivers based on e.MMC.
A driver for e.MMC controller on BCM2835

 e.MMC interface (completed in #1057)
 Driver for e.MMC controller on BCM2835 (#1101 in progress: review)
 Machine-independent driver for SD(SC/HC) bus (#1135 in progress: review)","f u n  f a c t: Apparently there are two eMMC controllers onboard and the one that's documented by Broadcom doesn't even implement full specs. The other one seems to be undocumented but Linux and FreeBSD's drivers use this one instead. However it seems to be disabled (at least for the SD card reader) by default. Also it looks like there's a confusion regarding the matter of which one should be called ""Arasan controller"", so I'm just going to call the one at MMIO_BASE + 0x00300000 **** controller, because supposedly it doesn't comply with the standard, and the other one (MMIO_BASE +  0x202000) is going to be called The Snobby Controller, because it seems that only a select elite is allowed to read its docs.
So right now, this is a WIP driver for the **** controller, but hopefully it won't be a big problem to move to the Snobby one after I get this one working.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,859,2020-12-05T17:06:31Z,,2022-06-06T14:52:06Z,OPEN,False,1209,40,14,https://github.com/mohrcore,e.MMC/SD(SC/HC) drivers for RPi 3,106,"['WiP', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/859,https://github.com/mohrcore,3,https://github.com/cahirwpz/mimiker/pull/859#issuecomment-812884496,"Working on EMMC driver for RPi3.
Currently porting some stolen code and trying to get it to work.
This PR compiles all the work related to making drivers based on e.MMC.
A driver for e.MMC controller on BCM2835

 e.MMC interface (completed in #1057)
 Driver for e.MMC controller on BCM2835 (#1101 in progress: review)
 Machine-independent driver for SD(SC/HC) bus (#1135 in progress: review)","So I've decided to merge #1057 into this branch already. If any adjustments will be done to the interface, I'll just merge them here later.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,859,2020-12-05T17:06:31Z,,2022-06-06T14:52:06Z,OPEN,False,1209,40,14,https://github.com/mohrcore,e.MMC/SD(SC/HC) drivers for RPi 3,106,"['WiP', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/859,https://github.com/mohrcore,4,https://github.com/cahirwpz/mimiker/pull/859#issuecomment-824995781,"Working on EMMC driver for RPi3.
Currently porting some stolen code and trying to get it to work.
This PR compiles all the work related to making drivers based on e.MMC.
A driver for e.MMC controller on BCM2835

 e.MMC interface (completed in #1057)
 Driver for e.MMC controller on BCM2835 (#1101 in progress: review)
 Machine-independent driver for SD(SC/HC) bus (#1135 in progress: review)","Something really weird has happened and the driver no longer recognizes the card as SDHC like it used to, but as SDSC. I'm pretty sure the code responsible for doing that in sd.c reamained unchanged. I'll have to look into that.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,859,2020-12-05T17:06:31Z,,2022-06-06T14:52:06Z,OPEN,False,1209,40,14,https://github.com/mohrcore,e.MMC/SD(SC/HC) drivers for RPi 3,106,"['WiP', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/859,https://github.com/mohrcore,5,https://github.com/cahirwpz/mimiker/pull/859#issuecomment-827078280,"Working on EMMC driver for RPi3.
Currently porting some stolen code and trying to get it to work.
This PR compiles all the work related to making drivers based on e.MMC.
A driver for e.MMC controller on BCM2835

 e.MMC interface (completed in #1057)
 Driver for e.MMC controller on BCM2835 (#1101 in progress: review)
 Machine-independent driver for SD(SC/HC) bus (#1135 in progress: review)","I wanted to make two PRs that would feature e.MMC controller  and SD drivers separately, but due to the fact that separating them leaves emmc devclass empty which results in linker failing I'm not exactly sure what to do with this.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,860,2020-12-05T17:29:43Z,2020-12-11T20:55:41Z,2020-12-11T20:55:41Z,MERGED,True,91,32,5,https://github.com/MichalBlk,Enhance configuration space handling.,16,[],https://github.com/cahirwpz/mimiker/pull/860,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/860,"Disable memory/IO accesses during PCI bar sizing (as required by the specification).
Add function which enables bus master mode for a device.
Write address to a BAR register while activating a RT_IOPORTS resource (RTL8139 and USB controller use RT_IOPORTS bars).","Disable memory/IO accesses during PCI bar sizing (as required by the specification).
Add function which enables bus master mode for a device.
Write address to a BAR register while activating a RT_IOPORTS resource (RTL8139 and USB controller use RT_IOPORTS bars).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,861,2020-12-06T12:17:44Z,2020-12-21T15:08:14Z,2020-12-21T15:08:14Z,MERGED,True,184,86,13,https://github.com/j-piecuch,Implement syscall restarting,17,[],https://github.com/cahirwpz/mimiker/pull/861,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/861,"Move stop & kill signal handling to sig_check()
Add ERESTARTSYS and ERESTARTNOHAND error codes, remove ERESTART
Move setting syscall return value to on_user_exc_leave()","Move stop & kill signal handling to sig_check()
Add ERESTARTSYS and ERESTARTNOHAND error codes, remove ERESTART
Move setting syscall return value to on_user_exc_leave()",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,862,2020-12-06T23:12:49Z,2020-12-11T13:36:40Z,2020-12-11T13:37:12Z,MERGED,True,82,338,13,https://github.com/pj1031999,Simplify context in user space (part 1),15,[],https://github.com/cahirwpz/mimiker/pull/862,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/862,"Unify struct sigcontext with ucontext_t.
Remove regnum.h.
Fix restoring of FPU context for mips.
Remove machine/signal.h.","Unify struct sigcontext with ucontext_t.
Remove regnum.h.
Fix restoring of FPU context for mips.
Remove machine/signal.h.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,863,2020-12-07T03:45:56Z,2021-03-29T23:02:58Z,2021-03-29T23:03:56Z,CLOSED,False,600,1,14,https://github.com/wiklam,Kernel profiling,32,['WiP'],https://github.com/cahirwpz/mimiker/pull/863,https://github.com/wiklam,1,https://github.com/cahirwpz/mimiker/pull/863,"Kernel profiling enable to create a graph of the called functions.


 Profiling data initialization.


 Function which will collect information at the beginning of each function call.


 Compiler instrumentalization


 Save the profiled data


 Profiled data parser","Kernel profiling enable to create a graph of the called functions.


 Profiling data initialization.


 Function which will collect information at the beginning of each function call.


 Compiler instrumentalization


 Save the profiled data


 Profiled data parser",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,863,2020-12-07T03:45:56Z,2021-03-29T23:02:58Z,2021-03-29T23:03:56Z,CLOSED,False,600,1,14,https://github.com/wiklam,Kernel profiling,32,['WiP'],https://github.com/cahirwpz/mimiker/pull/863,https://github.com/wiklam,2,https://github.com/cahirwpz/mimiker/pull/863#issuecomment-809782257,"Kernel profiling enable to create a graph of the called functions.


 Profiling data initialization.


 Function which will collect information at the beginning of each function call.


 Compiler instrumentalization


 Save the profiled data


 Profiled data parser",Introduced in #979  and #1062,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,864,2020-12-07T12:43:23Z,2020-12-11T16:54:33Z,2020-12-11T16:54:37Z,MERGED,True,32,56,6,https://github.com/pj1031999,Simplify context in kernel space (part 2),13,[],https://github.com/cahirwpz/mimiker/pull/864,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/864,"Don't ignore arguments for sigreturn.
Simplify sig_ctx_t.
Simplify sig_return.

Depends on #862.","Don't ignore arguments for sigreturn.
Simplify sig_ctx_t.
Simplify sig_return.

Depends on #862.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,865,2020-12-07T12:58:44Z,2020-12-11T19:05:10Z,2020-12-16T20:32:53Z,CLOSED,False,1,1,1,https://github.com/franciscozdo,Typo fix in do_truncate,1,[],https://github.com/cahirwpz/mimiker/pull/865,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/865,I included this changes in #866.,I included this changes in #866.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,865,2020-12-07T12:58:44Z,2020-12-11T19:05:10Z,2020-12-16T20:32:53Z,CLOSED,False,1,1,1,https://github.com/franciscozdo,Typo fix in do_truncate,1,[],https://github.com/cahirwpz/mimiker/pull/865,https://github.com/franciscozdo,2,https://github.com/cahirwpz/mimiker/pull/865#issuecomment-743370051,I included this changes in #866.,This changes are made in #866.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,866,2020-12-07T13:12:38Z,2020-12-15T07:19:05Z,2020-12-16T20:33:34Z,MERGED,True,110,36,9,https://github.com/franciscozdo,Access checks during open,28,[],https://github.com/cahirwpz/mimiker/pull/866,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/866,"I implemented checks performed while opening existing file. For now we don't check if we have permissions to perform operations on directories on path to given file.
It required some fixes in tests. Some files should be created with RW permissions","I implemented checks performed while opening existing file. For now we don't check if we have permissions to perform operations on directories on path to given file.
It required some fixes in tests. Some files should be created with RW permissions",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,867,2020-12-07T16:44:35Z,2021-06-08T14:11:41Z,2021-06-08T14:11:41Z,MERGED,True,381,6,13,https://github.com/xThaid,KCSAN,47,['accepted'],https://github.com/cahirwpz/mimiker/pull/867,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/867,,,True,"{'HOORAY': ['https://github.com/jpszczolowski', 'https://github.com/pj1031999', 'https://github.com/cahirwpz']}"
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,867,2020-12-07T16:44:35Z,2021-06-08T14:11:41Z,2021-06-08T14:11:41Z,MERGED,True,381,6,13,https://github.com/xThaid,KCSAN,47,['accepted'],https://github.com/cahirwpz/mimiker/pull/867,https://github.com/xThaid,2,https://github.com/cahirwpz/mimiker/pull/867#issuecomment-778661290,,"OK, so in theory this is a working version of KCSAN, which could be reviewed. It is only working in theory, because it requires higher version of the tool chain and as long as Mimiker doesn't support many threads running at the same time - this tool will be useless.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,867,2020-12-07T16:44:35Z,2021-06-08T14:11:41Z,2021-06-08T14:11:41Z,MERGED,True,381,6,13,https://github.com/xThaid,KCSAN,47,['accepted'],https://github.com/cahirwpz/mimiker/pull/867,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/867#issuecomment-778663616,,Please move changes unrelated to KCSAN to another PR.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,867,2020-12-07T16:44:35Z,2021-06-08T14:11:41Z,2021-06-08T14:11:41Z,MERGED,True,381,6,13,https://github.com/xThaid,KCSAN,47,['accepted'],https://github.com/cahirwpz/mimiker/pull/867,https://github.com/jpszczolowski,4,https://github.com/cahirwpz/mimiker/pull/867#issuecomment-811371617,,Could you please also mention KCSAN=1 flag in https://github.com/cahirwpz/mimiker/blob/master/README.md?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,867,2020-12-07T16:44:35Z,2021-06-08T14:11:41Z,2021-06-08T14:11:41Z,MERGED,True,381,6,13,https://github.com/xThaid,KCSAN,47,['accepted'],https://github.com/cahirwpz/mimiker/pull/867,https://github.com/xThaid,5,https://github.com/cahirwpz/mimiker/pull/867#issuecomment-817371231,,"Could you please also mention KCSAN=1 flag in https://github.com/cahirwpz/mimiker/blob/master/README.md?

Done",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,868,2020-12-07T17:08:54Z,2020-12-07T19:44:59Z,2020-12-07T19:44:59Z,MERGED,True,1,1,1,https://github.com/wiklam,Typo in vm_page_alloc.,1,[],https://github.com/cahirwpz/mimiker/pull/868,https://github.com/wiklam,1,https://github.com/cahirwpz/mimiker/pull/868,We are not able to allocate more pages then PM_NQUEUES.,We are not able to allocate more pages then PM_NQUEUES.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,869,2020-12-08T11:51:52Z,2020-12-08T12:31:11Z,2020-12-08T12:31:12Z,CLOSED,False,6,1,1,https://github.com/j-piecuch,Add launcher option to select UARTs that should be run in raw mode.,1,[],https://github.com/cahirwpz/mimiker/pull/869,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/869,"Add support for selecting raw mode UARTs from the command line.
We should also consider running /dev/tty1 in raw mode by default, since we now have a working TTY subsystem.","Add support for selecting raw mode UARTs from the command line.
We should also consider running /dev/tty1 in raw mode by default, since we now have a working TTY subsystem.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,869,2020-12-08T11:51:52Z,2020-12-08T12:31:11Z,2020-12-08T12:31:12Z,CLOSED,False,6,1,1,https://github.com/j-piecuch,Add launcher option to select UARTs that should be run in raw mode.,1,[],https://github.com/cahirwpz/mimiker/pull/869,https://github.com/j-piecuch,2,https://github.com/cahirwpz/mimiker/pull/869#issuecomment-740591979,"Add support for selecting raw mode UARTs from the command line.
We should also consider running /dev/tty1 in raw mode by default, since we now have a working TTY subsystem.",Superseded by #870,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,870,2020-12-08T12:30:29Z,2020-12-08T13:12:49Z,2020-12-08T13:12:49Z,MERGED,True,1,1,1,https://github.com/j-piecuch,launcher: run socat on /dev/tty1 in raw mode by default.,1,[],https://github.com/cahirwpz/mimiker/pull/870,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/870,At this point our TTY subsystem has enough features to handle raw input.,At this point our TTY subsystem has enough features to handle raw input.,True,{'ROCKET': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,871,2020-12-11T14:13:52Z,2021-03-15T06:50:37Z,2021-03-15T06:50:38Z,CLOSED,False,220,35,14,https://github.com/bkjg,vm_object_t: add merging shadow objects,91,['proposal'],https://github.com/cahirwpz/mimiker/pull/871,https://github.com/bkjg,1,https://github.com/cahirwpz/mimiker/pull/871,This PR depends on #832.,This PR depends on #832.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,871,2020-12-11T14:13:52Z,2021-03-15T06:50:37Z,2021-03-15T06:50:38Z,CLOSED,False,220,35,14,https://github.com/bkjg,vm_object_t: add merging shadow objects,91,['proposal'],https://github.com/cahirwpz/mimiker/pull/871,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/871#issuecomment-798878360,This PR depends on #832.,@franciscozdo Please evaluate this PR for useful changes in the context of adapting Cranor's amap.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,871,2020-12-11T14:13:52Z,2021-03-15T06:50:37Z,2021-03-15T06:50:38Z,CLOSED,False,220,35,14,https://github.com/bkjg,vm_object_t: add merging shadow objects,91,['proposal'],https://github.com/cahirwpz/mimiker/pull/871,https://github.com/franciscozdo,3,https://github.com/cahirwpz/mimiker/pull/871#issuecomment-798920861,This PR depends on #832.,"This PR will not be used, because we will redefine meaning of objects in VM system.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,871,2020-12-11T14:13:52Z,2021-03-15T06:50:37Z,2021-03-15T06:50:38Z,CLOSED,False,220,35,14,https://github.com/bkjg,vm_object_t: add merging shadow objects,91,['proposal'],https://github.com/cahirwpz/mimiker/pull/871,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/871#issuecomment-799162779,This PR depends on #832.,Since we're going to use amap-s instead of shadow objects I'm closing this PR.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,872,2020-12-11T18:04:20Z,2020-12-11T20:52:38Z,2020-12-11T20:52:41Z,MERGED,True,149,159,28,https://github.com/cahirwpz,Further unification of context handling,6,[],https://github.com/cahirwpz/mimiker/pull/872,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/872,Let's simplify and unify all context handling in the kernel to make it as portable as possible.,Let's simplify and unify all context handling in the kernel to make it as portable as possible.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,873,2020-12-11T18:14:37Z,2021-02-08T11:34:59Z,2021-02-08T11:34:59Z,MERGED,True,164,35,9,https://github.com/mohrcore,ISA bus driver for Malta,35,['accepted'],https://github.com/cahirwpz/mimiker/pull/873,https://github.com/mohrcore,1,https://github.com/cahirwpz/mimiker/pull/873,"Working on ISA bus driver.
This is a an update and a continuation of #836, I had to switch to another branch, due to rebasing problems.","Working on ISA bus driver.
This is a an update and a continuation of #836, I had to switch to another branch, due to rebasing problems.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,873,2020-12-11T18:14:37Z,2021-02-08T11:34:59Z,2021-02-08T11:34:59Z,MERGED,True,164,35,9,https://github.com/mohrcore,ISA bus driver for Malta,35,['accepted'],https://github.com/cahirwpz/mimiker/pull/873,https://github.com/mohrcore,2,https://github.com/cahirwpz/mimiker/pull/873#issuecomment-749086101,"Working on ISA bus driver.
This is a an update and a continuation of #836, I had to switch to another branch, due to rebasing problems.",Blocked by #888,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,874,2020-12-11T21:13:00Z,2020-12-16T08:07:28Z,2020-12-16T20:30:54Z,MERGED,True,82,43,10,https://github.com/franciscozdo,Devfs attributes,20,[],https://github.com/cahirwpz/mimiker/pull/874,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/874,"Introduced devfs_getdata() which returns data holded by devfs node. Before data was holded in vnode::v_data but now vnode holds pointer to devfs node. (It is needed to perform vop_getattr.)
Added attributes to devfs nodes.
For now we cannot do seek on character devices.","Introduced devfs_getdata() which returns data holded by devfs node. Before data was holded in vnode::v_data but now vnode holds pointer to devfs node. (It is needed to perform vop_getattr.)
Added attributes to devfs nodes.
For now we cannot do seek on character devices.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,875,2020-12-12T20:51:42Z,2020-12-17T14:58:11Z,2020-12-17T14:58:11Z,MERGED,True,84,79,6,https://github.com/mohrcore,Multiple independent driver interfaces,12,[],https://github.com/cahirwpz/mimiker/pull/875,https://github.com/mohrcore,1,https://github.com/cahirwpz/mimiker/pull/875,"This small PR allows drivers to implement any combination of interfaces.
Currently we have only two interfaces (bus and PCI), however we will get more of them, eg. block device and perhaps ICU.
The reason for which I'm making this PR now is because I'll be needing it soon.","This small PR allows drivers to implement any combination of interfaces.
Currently we have only two interfaces (bus and PCI), however we will get more of them, eg. block device and perhaps ICU.
The reason for which I'm making this PR now is because I'll be needing it soon.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,875,2020-12-12T20:51:42Z,2020-12-17T14:58:11Z,2020-12-17T14:58:11Z,MERGED,True,84,79,6,https://github.com/mohrcore,Multiple independent driver interfaces,12,[],https://github.com/cahirwpz/mimiker/pull/875,https://github.com/mohrcore,2,https://github.com/cahirwpz/mimiker/pull/875#issuecomment-743904163,"This small PR allows drivers to implement any combination of interfaces.
Currently we have only two interfaces (bus and PCI), however we will get more of them, eg. block device and perhaps ICU.
The reason for which I'm making this PR now is because I'll be needing it soon.","I made some changes (aba30d3), probably while @komik0 was reviewing my PR.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,875,2020-12-12T20:51:42Z,2020-12-17T14:58:11Z,2020-12-17T14:58:11Z,MERGED,True,84,79,6,https://github.com/mohrcore,Multiple independent driver interfaces,12,[],https://github.com/cahirwpz/mimiker/pull/875,https://github.com/mohrcore,3,https://github.com/cahirwpz/mimiker/pull/875#issuecomment-743910002,"This small PR allows drivers to implement any combination of interfaces.
Currently we have only two interfaces (bus and PCI), however we will get more of them, eg. block device and perhaps ICU.
The reason for which I'm making this PR now is because I'll be needing it soon.","I'm thinking about completely dropping driver sub-classes like bus_driver_t and pci_bus_driver_t an instead of that just go with per-driver type definitions. The only reason for exposing them was to make use of simple inheritance pattern which, as for this PR, is no longer the way driver interfaces work. This is also confusing now as interface declarations (by ""declarations"" offset values stored within interfaces field of driver_t) are being set up in a place unrelated to type definitions, yet they describe certain properties of those types.",True,{'THUMBS_UP': ['https://github.com/komik0']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,876,2020-12-13T12:29:27Z,2020-12-14T22:10:19Z,2020-12-14T22:10:19Z,MERGED,True,51,60,3,https://github.com/bkjg,Delete red-black trees,5,[],https://github.com/cahirwpz/mimiker/pull/876,https://github.com/bkjg,1,https://github.com/cahirwpz/mimiker/pull/876,Red-black trees inside vm_object didn't work properly so the time has come to remove them.,Red-black trees inside vm_object didn't work properly so the time has come to remove them.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,877,2020-12-13T16:32:08Z,2020-12-15T06:36:54Z,2020-12-15T06:36:54Z,MERGED,True,48,19,3,https://github.com/bkjg,Implement locking mechanism for pv_list in vm_page_t structure,6,[],https://github.com/cahirwpz/mimiker/pull/877,https://github.com/bkjg,1,https://github.com/cahirwpz/mimiker/pull/877,Now pv_list in vm_page_t structure isn't protected by any mechanism. That can lead to many races when we will try to share our resources. This PR will introduce lock for all pv_list to protect our data and in the same time - to save some memory by using only one lock for all pv_list data structures.,Now pv_list in vm_page_t structure isn't protected by any mechanism. That can lead to many races when we will try to share our resources. This PR will introduce lock for all pv_list to protect our data and in the same time - to save some memory by using only one lock for all pv_list data structures.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,878,2020-12-13T22:53:43Z,2021-01-28T20:47:01Z,2021-01-28T20:47:01Z,CLOSED,False,16,4,3,https://github.com/pj1031999,Enable verify_formatting for AArch64,3,['AArch64'],https://github.com/cahirwpz/mimiker/pull/878,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/878,Enable verify_formatting for AArch64.,Enable verify_formatting for AArch64.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,878,2020-12-13T22:53:43Z,2021-01-28T20:47:01Z,2021-01-28T20:47:01Z,CLOSED,False,16,4,3,https://github.com/pj1031999,Enable verify_formatting for AArch64,3,['AArch64'],https://github.com/cahirwpz/mimiker/pull/878,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/878#issuecomment-769379390,Enable verify_formatting for AArch64.,Since we switched to GH Actions this PR is no longer valid.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,879,2020-12-14T01:34:52Z,2020-12-15T08:18:13Z,2020-12-15T08:18:17Z,MERGED,True,19,5,2,https://github.com/pj1031999,Implement do_setcontext for AArch64.,2,['AArch64'],https://github.com/cahirwpz/mimiker/pull/879,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/879,Implement do_setcontext for AArch64.,Implement do_setcontext for AArch64.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,880,2020-12-14T02:13:25Z,2021-01-15T15:21:23Z,2021-01-15T15:21:27Z,MERGED,True,313,7,7,https://github.com/pj1031999,AArch64: non-local jumps,7,"['accepted', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/880,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/880,"sigsetjmp
siglongjmp
setjmp
longjmp
_setjmp
_longjmp","sigsetjmp
siglongjmp
setjmp
longjmp
_setjmp
_longjmp",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,881,2020-12-15T11:05:04Z,2020-12-15T21:08:06Z,2020-12-16T20:31:31Z,MERGED,True,2,0,1,https://github.com/franciscozdo,Repair tmpfs root attributes,1,[],https://github.com/cahirwpz/mimiker/pull/881,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/881,Root of tmpfs had no inforamation about owner and group.,Root of tmpfs had no inforamation about owner and group.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,882,2020-12-15T15:50:37Z,2020-12-21T12:43:39Z,2020-12-21T12:43:39Z,MERGED,True,46,13,3,https://github.com/j-piecuch,tty: notify driver when there's space in the input queue.,5,[],https://github.com/cahirwpz/mimiker/pull/882,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/882,"This PR kicks off a series of (hopefully small) PRs with an end goal of implementing pseudoterminals.
Why we need this PR:
write() calls on a PTY master device can block due to the slave device's input queue being full. We need some means of notifying the master that space has become available.","This PR kicks off a series of (hopefully small) PRs with an end goal of implementing pseudoterminals.
Why we need this PR:
write() calls on a PTY master device can block due to the slave device's input queue being full. We need some means of notifying the master that space has become available.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,883,2020-12-15T16:31:34Z,2020-12-16T16:27:43Z,2020-12-16T16:27:43Z,MERGED,True,41,20,3,https://github.com/j-piecuch,Implement removing devfs nodes.,6,[],https://github.com/cahirwpz/mimiker/pull/883,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/883,"PTY slave devices must be removed when the corresponding master device is closed. For this, it's necessary to be able to remove devfs nodes.","PTY slave devices must be removed when the corresponding master device is closed. For this, it's necessary to be able to remove devfs nodes.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,884,2020-12-16T17:36:35Z,2020-12-21T13:16:30Z,2020-12-21T13:16:30Z,MERGED,True,68,26,3,https://github.com/j-piecuch,Track TTY open() and close() calls.,7,[],https://github.com/cahirwpz/mimiker/pull/884,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/884,"Add an open count to the tty_t structure
Notify the driver when the open count goes from 0 to 1 and from 1 to 0
Unify common parts of tty_vn_open() and dev_tty_open()
Add helper function for making TTY devfs entries","Add an open count to the tty_t structure
Notify the driver when the open count goes from 0 to 1 and from 1 to 0
Unify common parts of tty_vn_open() and dev_tty_open()
Add helper function for making TTY devfs entries",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,884,2020-12-16T17:36:35Z,2020-12-21T13:16:30Z,2020-12-21T13:16:30Z,MERGED,True,68,26,3,https://github.com/j-piecuch,Track TTY open() and close() calls.,7,[],https://github.com/cahirwpz/mimiker/pull/884,https://github.com/j-piecuch,2,https://github.com/cahirwpz/mimiker/pull/884#issuecomment-748945221,"Add an open count to the tty_t structure
Notify the driver when the open count goes from 0 to 1 and from 1 to 0
Unify common parts of tty_vn_open() and dev_tty_open()
Add helper function for making TTY devfs entries","@cahirwpz The assoc parameter in __tty_vn_open() was there to avoid the redundant call to maybe_assoc_ctty(), since when opening /dev/tty we know that the terminal is our controlling terminal. It was a questionable optimization, since calling maybe_assoc_ctty() is not expensive at all. I have removed the assoc parameter.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,884,2020-12-16T17:36:35Z,2020-12-21T13:16:30Z,2020-12-21T13:16:30Z,MERGED,True,68,26,3,https://github.com/j-piecuch,Track TTY open() and close() calls.,7,[],https://github.com/cahirwpz/mimiker/pull/884,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/884#issuecomment-748955457,"Add an open count to the tty_t structure
Notify the driver when the open count goes from 0 to 1 and from 1 to 0
Unify common parts of tty_vn_open() and dev_tty_open()
Add helper function for making TTY devfs entries",Oops... please resolve conflicts.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,885,2020-12-16T21:20:48Z,2020-12-21T11:28:05Z,2021-01-03T09:16:08Z,MERGED,True,62,37,7,https://github.com/franciscozdo,Check permissions during lookup,5,[],https://github.com/cahirwpz/mimiker/pull/885,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/885,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,886,2020-12-17T12:30:47Z,2020-12-21T08:13:13Z,2020-12-21T08:13:13Z,MERGED,True,45,0,3,https://github.com/j-piecuch,Reclaim devfs directory nodes.,2,[],https://github.com/cahirwpz/mimiker/pull/886,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/886,"There was an oversight in #883: when a devfs directory node is unlinked, the devfs layer is responsible for freeing the directory node after all references to the vnode are gone (i.e. in VOP_RECLAIM()), but we didn't provide an implementation of VOP_RECLAIM().
I have also thrown in a devfs directory removal test.","There was an oversight in #883: when a devfs directory node is unlinked, the devfs layer is responsible for freeing the directory node after all references to the vnode are gone (i.e. in VOP_RECLAIM()), but we didn't provide an implementation of VOP_RECLAIM().
I have also thrown in a devfs directory removal test.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,887,2020-12-17T14:25:03Z,2021-01-13T13:28:57Z,2021-01-13T13:28:57Z,MERGED,True,119,211,10,https://github.com/pj1031999,Simplify context in user space (part 3) ,6,['accepted'],https://github.com/cahirwpz/mimiker/pull/887,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/887,Use ucontext_t as jmp_buf representation.,Use ucontext_t as jmp_buf representation.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,888,2020-12-17T23:09:15Z,2021-01-13T21:46:56Z,2021-01-13T21:46:57Z,CLOSED,False,79,35,15,https://github.com/mohrcore,ICU interface and searching,9,['WiP'],https://github.com/cahirwpz/mimiker/pull/888,https://github.com/mohrcore,1,https://github.com/cahirwpz/mimiker/pull/888,Made a separate interface for ICUs. Also ICU methods now search the tree upwards until they find the first device with a driver that implements ICU interface.,Made a separate interface for ICUs. Also ICU methods now search the tree upwards until they find the first device with a driver that implements ICU interface.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,888,2020-12-17T23:09:15Z,2021-01-13T21:46:56Z,2021-01-13T21:46:57Z,CLOSED,False,79,35,15,https://github.com/mohrcore,ICU interface and searching,9,['WiP'],https://github.com/cahirwpz/mimiker/pull/888,https://github.com/mohrcore,2,https://github.com/cahirwpz/mimiker/pull/888#issuecomment-748527183,Made a separate interface for ICUs. Also ICU methods now search the tree upwards until they find the first device with a driver that implements ICU interface.,"I rewrote icu_intr_setup and icu_intr_teardown procedures so now they are iterative instead of being recursive. Disassembling the binaries prior to that change revealed that there seems to be no tail call optimisation applied. This allowed for a potential stack overflow in kernel mode, which is obviously unacceptable. Also it nullified inlining.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,888,2020-12-17T23:09:15Z,2021-01-13T21:46:56Z,2021-01-13T21:46:57Z,CLOSED,False,79,35,15,https://github.com/mohrcore,ICU interface and searching,9,['WiP'],https://github.com/cahirwpz/mimiker/pull/888,https://github.com/mohrcore,3,https://github.com/cahirwpz/mimiker/pull/888#issuecomment-753635079,Made a separate interface for ICUs. Also ICU methods now search the tree upwards until they find the first device with a driver that implements ICU interface.,"Uh, so the solution we came up with was to make dynamic dispatch more granular, ie. make ALL methods dispatchable instead of dispatching interfaces in some method wrappers. However there's another problem with this solution. There's a tremendous amount of code that relies on an assumption that the dev parameter of driver methods is a direct child of the device that uses the driver. Unfortunately, allowing every method to be dispatched dynamically means that all of the code that relies on this assumption should be rewritten, even tho it's gonna do exactly the same as before and the whole dispatch part of it will be a sort of dead code.
However, I'm in favor of such solution anyway as passing a child as a dev parameter feels extremely awkward, especially now that we are going to have a dispatching system.
I think the signatures of some methods could be changed to make dev the device that actually uses the driver and some methods should have additional target parameter if they (may) need to know what device has a driver that made the call (eg. determine PCI bar for some PCI bus methods or or interrupt handlers that do some stuff with the device). The wrappers (such as bus_intr_setup) would still be used in the same way, as they would perform dynamic dispatch starting from dev's parent.
That's at least the solution I'm working on right now. Since there are a lot of changes involved here, I'd appreciate some opinions on it.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,888,2020-12-17T23:09:15Z,2021-01-13T21:46:56Z,2021-01-13T21:46:57Z,CLOSED,False,79,35,15,https://github.com/mohrcore,ICU interface and searching,9,['WiP'],https://github.com/cahirwpz/mimiker/pull/888,https://github.com/mohrcore,4,https://github.com/cahirwpz/mimiker/pull/888#issuecomment-759758975,Made a separate interface for ICUs. Also ICU methods now search the tree upwards until they find the first device with a driver that implements ICU interface.,"I'm closing this PR as the problem it addressed has been solved in #906. We chose a different approach and instead of dispatching interfaces we dispatch methods.
(which is an approach I don't like, but whatever, it's good enough and allows PIC methods to be a part of bus interface, just like in FreeBSD)",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,889,2020-12-19T16:08:09Z,2021-02-05T19:37:52Z,2021-02-05T19:37:52Z,CLOSED,False,15,1,3,https://github.com/komik0,RTL8139: Improve qemu config,8,['accepted'],https://github.com/cahirwpz/mimiker/pull/889,https://github.com/komik0,1,https://github.com/cahirwpz/mimiker/pull/889,"Now with:

ssh -p10022 root@localhost- we are able to gen some traffic.
/usr/sbin/tcpdump -qxxxns 0 -A -r rtl8139.pcap - we are able to inspect traffic","Now with:

ssh -p10022 root@localhost- we are able to gen some traffic.
/usr/sbin/tcpdump -qxxxns 0 -A -r rtl8139.pcap - we are able to inspect traffic",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,889,2020-12-19T16:08:09Z,2021-02-05T19:37:52Z,2021-02-05T19:37:52Z,CLOSED,False,15,1,3,https://github.com/komik0,RTL8139: Improve qemu config,8,['accepted'],https://github.com/cahirwpz/mimiker/pull/889,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/889#issuecomment-748904484,"Now with:

ssh -p10022 root@localhost- we are able to gen some traffic.
/usr/sbin/tcpdump -qxxxns 0 -A -r rtl8139.pcap - we are able to inspect traffic",@komik0 We don't even look into PRs that do not pass all checks in CircleCI.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,889,2020-12-19T16:08:09Z,2021-02-05T19:37:52Z,2021-02-05T19:37:52Z,CLOSED,False,15,1,3,https://github.com/komik0,RTL8139: Improve qemu config,8,['accepted'],https://github.com/cahirwpz/mimiker/pull/889,https://github.com/komik0,3,https://github.com/cahirwpz/mimiker/pull/889#issuecomment-752014446,"Now with:

ssh -p10022 root@localhost- we are able to gen some traffic.
/usr/sbin/tcpdump -qxxxns 0 -A -r rtl8139.pcap - we are able to inspect traffic","@cahirwpz - done, ready for review",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,889,2020-12-19T16:08:09Z,2021-02-05T19:37:52Z,2021-02-05T19:37:52Z,CLOSED,False,15,1,3,https://github.com/komik0,RTL8139: Improve qemu config,8,['accepted'],https://github.com/cahirwpz/mimiker/pull/889,https://github.com/komik0,4,https://github.com/cahirwpz/mimiker/pull/889#issuecomment-763937313,"Now with:

ssh -p10022 root@localhost- we are able to gen some traffic.
/usr/sbin/tcpdump -qxxxns 0 -A -r rtl8139.pcap - we are able to inspect traffic",@pj1031999 thanks for pointing this issue. rtl8139 is not supported on qemu arch64. So I've moved that code under malta-dependent options,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,889,2020-12-19T16:08:09Z,2021-02-05T19:37:52Z,2021-02-05T19:37:52Z,CLOSED,False,15,1,3,https://github.com/komik0,RTL8139: Improve qemu config,8,['accepted'],https://github.com/cahirwpz/mimiker/pull/889,https://github.com/cahirwpz,5,https://github.com/cahirwpz/mimiker/pull/889#issuecomment-770993855,"Now with:

ssh -p10022 root@localhost- we are able to gen some traffic.
/usr/sbin/tcpdump -qxxxns 0 -A -r rtl8139.pcap - we are able to inspect traffic",Please resolve conflicts.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,889,2020-12-19T16:08:09Z,2021-02-05T19:37:52Z,2021-02-05T19:37:52Z,CLOSED,False,15,1,3,https://github.com/komik0,RTL8139: Improve qemu config,8,['accepted'],https://github.com/cahirwpz/mimiker/pull/889,https://github.com/komik0,6,https://github.com/cahirwpz/mimiker/pull/889#issuecomment-773602771,"Now with:

ssh -p10022 root@localhost- we are able to gen some traffic.
/usr/sbin/tcpdump -qxxxns 0 -A -r rtl8139.pcap - we are able to inspect traffic",Moved to #988,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,889,2020-12-19T16:08:09Z,2021-02-05T19:37:52Z,2021-02-05T19:37:52Z,CLOSED,False,15,1,3,https://github.com/komik0,RTL8139: Improve qemu config,8,['accepted'],https://github.com/cahirwpz/mimiker/pull/889,https://github.com/cahirwpz,7,https://github.com/cahirwpz/mimiker/pull/889#issuecomment-774245607,"Now with:

ssh -p10022 root@localhost- we are able to gen some traffic.
/usr/sbin/tcpdump -qxxxns 0 -A -r rtl8139.pcap - we are able to inspect traffic",Merge with master as #988,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,890,2020-12-19T20:53:30Z,2021-02-15T21:05:02Z,2021-02-16T06:08:41Z,MERGED,True,80,8,2,https://github.com/komik0,RTL8139: first version of rx-interrupt handler,30,['accepted'],https://github.com/cahirwpz/mimiker/pull/890,https://github.com/komik0,1,https://github.com/cahirwpz/mimiker/pull/890,This cs alloc irq resource and outlines rx-interrupt handler,This cs alloc irq resource and outlines rx-interrupt handler,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,890,2020-12-19T20:53:30Z,2021-02-15T21:05:02Z,2021-02-16T06:08:41Z,MERGED,True,80,8,2,https://github.com/komik0,RTL8139: first version of rx-interrupt handler,30,['accepted'],https://github.com/cahirwpz/mimiker/pull/890,https://github.com/MichalBlk,2,https://github.com/cahirwpz/mimiker/pull/890#issuecomment-768871706,This cs alloc irq resource and outlines rx-interrupt handler,Pleas update the description.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,890,2020-12-19T20:53:30Z,2021-02-15T21:05:02Z,2021-02-16T06:08:41Z,MERGED,True,80,8,2,https://github.com/komik0,RTL8139: first version of rx-interrupt handler,30,['accepted'],https://github.com/cahirwpz/mimiker/pull/890,https://github.com/MichalBlk,3,https://github.com/cahirwpz/mimiker/pull/890#issuecomment-770470598,This cs alloc irq resource and outlines rx-interrupt handler,It'd nice to update the description of this PR.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,891,2020-12-21T08:45:46Z,2020-12-21T10:47:39Z,2020-12-21T10:47:45Z,MERGED,True,1,1,1,https://github.com/pj1031999,AArch64: fix pmap_copy_page,1,['AArch64'],https://github.com/cahirwpz/mimiker/pull/891,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/891,Fix pmap_copy_page.,Fix pmap_copy_page.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,892,2020-12-21T13:06:35Z,2021-03-15T06:55:27Z,2021-03-15T06:55:27Z,CLOSED,False,179,99,8,https://github.com/ThomasStachovsky,Cbus Driver,3,['WiP'],https://github.com/cahirwpz/mimiker/pull/892,https://github.com/ThomasStachovsky,1,https://github.com/cahirwpz/mimiker/pull/892,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,892,2020-12-21T13:06:35Z,2021-03-15T06:55:27Z,2021-03-15T06:55:27Z,CLOSED,False,179,99,8,https://github.com/ThomasStachovsky,Cbus Driver,3,['WiP'],https://github.com/cahirwpz/mimiker/pull/892,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/892#issuecomment-799165286,,Development of this PR halted due to @ThomasStachovsky leaving the project. Since this PR isn't finish and doesn't represent much value I decided to close it.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,893,2020-12-21T15:24:58Z,2021-01-11T12:21:02Z,2021-01-11T12:21:02Z,MERGED,True,178,24,3,https://github.com/j-piecuch,Allow for detaching serial device driver from TTY.,10,[],https://github.com/cahirwpz/mimiker/pull/893,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/893,"When the PTY master device file is closed, the corresponding slave device should disappear.
This PR implements the disappearing part.","When the PTY master device file is closed, the corresponding slave device should disappear.
This PR implements the disappearing part.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,894,2020-12-21T15:34:18Z,2020-12-28T13:15:00Z,2020-12-28T13:15:00Z,MERGED,True,68,15,5,https://github.com/j-piecuch,Properly handle stop signals in sigsuspend(),8,[],https://github.com/cahirwpz/mimiker/pull/894,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/894,"Stopping a process that's sleeping in sigsuspend() with a signal should not return EINTR to the user, but we currently do that.
In this PR we leverage ERESTARTNOHAND to restart the syscall if no signal with an installed handler is caught.","Stopping a process that's sleeping in sigsuspend() with a signal should not return EINTR to the user, but we currently do that.
In this PR we leverage ERESTARTNOHAND to restart the syscall if no signal with an installed handler is caught.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,895,2020-12-21T16:40:28Z,2021-01-22T19:34:37Z,2021-01-22T19:34:37Z,MERGED,True,25,0,3,https://github.com/MichalBlk,gt64120: route PCI interrupts to i8259,7,['accepted'],https://github.com/cahirwpz/mimiker/pull/895,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/895,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,896,2020-12-21T17:47:29Z,2020-12-28T07:49:02Z,2020-12-28T07:49:02Z,MERGED,True,2,2,2,https://github.com/j-piecuch,Some hotfixes,2,[],https://github.com/cahirwpz/mimiker/pull/896,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/896,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,897,2020-12-21T18:05:24Z,2021-02-21T09:42:20Z,2021-02-21T09:42:23Z,MERGED,True,36,30,6,https://github.com/cahirwpz,toolchain: update qemu from 4.1.0 to 5.2.0,6,['WiP'],https://github.com/cahirwpz/mimiker/pull/897,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/897,Hopefully this will resolve some debugging issues.,Hopefully this will resolve some debugging issues.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,898,2020-12-22T16:55:43Z,2021-01-22T11:30:52Z,2021-01-22T11:30:53Z,MERGED,True,73,29,6,https://github.com/MichalBlk,Interrupt sharing.,13,['accepted'],https://github.com/cahirwpz/mimiker/pull/898,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/898,Implement interrupt resource sharing.,Implement interrupt resource sharing.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,898,2020-12-22T16:55:43Z,2021-01-22T11:30:52Z,2021-01-22T11:30:53Z,MERGED,True,73,29,6,https://github.com/MichalBlk,Interrupt sharing.,13,['accepted'],https://github.com/cahirwpz/mimiker/pull/898,https://github.com/MichalBlk,2,https://github.com/cahirwpz/mimiker/pull/898#issuecomment-753382069,Implement interrupt resource sharing.,I made some major changes to the code regarding moving auxiliary data and rid to the resource_list_entry structure.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,898,2020-12-22T16:55:43Z,2021-01-22T11:30:52Z,2021-01-22T11:30:53Z,MERGED,True,73,29,6,https://github.com/MichalBlk,Interrupt sharing.,13,['accepted'],https://github.com/cahirwpz/mimiker/pull/898,https://github.com/MichalBlk,3,https://github.com/cahirwpz/mimiker/pull/898#issuecomment-763183841,Implement interrupt resource sharing.,The solution has been updated.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,898,2020-12-22T16:55:43Z,2021-01-22T11:30:52Z,2021-01-22T11:30:53Z,MERGED,True,73,29,6,https://github.com/MichalBlk,Interrupt sharing.,13,['accepted'],https://github.com/cahirwpz/mimiker/pull/898,https://github.com/MichalBlk,4,https://github.com/cahirwpz/mimiker/pull/898#issuecomment-763956608,Implement interrupt resource sharing.,I don't think that resource_activate and resource_deactivate require some additional logic regarding refcnt.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,898,2020-12-22T16:55:43Z,2021-01-22T11:30:52Z,2021-01-22T11:30:53Z,MERGED,True,73,29,6,https://github.com/MichalBlk,Interrupt sharing.,13,['accepted'],https://github.com/cahirwpz/mimiker/pull/898,https://github.com/MichalBlk,5,https://github.com/cahirwpz/mimiker/pull/898#issuecomment-763991420,Implement interrupt resource sharing.,"Ok, I've changed my mind. We do need to care about refcnt during activation and deactivation.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,898,2020-12-22T16:55:43Z,2021-01-22T11:30:52Z,2021-01-22T11:30:53Z,MERGED,True,73,29,6,https://github.com/MichalBlk,Interrupt sharing.,13,['accepted'],https://github.com/cahirwpz/mimiker/pull/898,https://github.com/MichalBlk,6,https://github.com/cahirwpz/mimiker/pull/898#issuecomment-764012033,Implement interrupt resource sharing.,"Ok, it's ready.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,899,2020-12-29T16:23:28Z,2021-01-11T12:05:38Z,2021-01-11T12:05:38Z,MERGED,True,102,2,5,https://github.com/j-piecuch,Add atto and incurses to /contrib.,8,[],https://github.com/cahirwpz/mimiker/pull/899,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/899,"atto is a minimal emacs-like text editor.
incurses is a minimal implementation of an ncurses library, just enough to make atto work.","atto is a minimal emacs-like text editor.
incurses is a minimal implementation of an ncurses library, just enough to make atto work.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,899,2020-12-29T16:23:28Z,2021-01-11T12:05:38Z,2021-01-11T12:05:38Z,MERGED,True,102,2,5,https://github.com/j-piecuch,Add atto and incurses to /contrib.,8,[],https://github.com/cahirwpz/mimiker/pull/899,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/899#issuecomment-753297174,"atto is a minimal emacs-like text editor.
incurses is a minimal implementation of an ncurses library, just enough to make atto work.",IIUC incurses is supposed to handle only this subset of ncurses API which is used solely by atto. Hence I think we can safely make incurses compilation a part of atto build process. There's no need to build these separately.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,899,2020-12-29T16:23:28Z,2021-01-11T12:05:38Z,2021-01-11T12:05:38Z,MERGED,True,102,2,5,https://github.com/j-piecuch,Add atto and incurses to /contrib.,8,[],https://github.com/cahirwpz/mimiker/pull/899,https://github.com/j-piecuch,3,https://github.com/cahirwpz/mimiker/pull/899#issuecomment-753326202,"atto is a minimal emacs-like text editor.
incurses is a minimal implementation of an ncurses library, just enough to make atto work.","I thought you wanted them built separately, but ok, I have integrated them.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,900,2020-12-31T20:20:14Z,2021-02-18T01:01:57Z,2021-02-18T01:01:57Z,CLOSED,False,193,4,5,https://github.com/komik0,Rtl8139 rx path,9,['blocked'],https://github.com/cahirwpz/mimiker/pull/900,https://github.com/komik0,1,https://github.com/cahirwpz/mimiker/pull/900,the first version of rx path,the first version of rx path,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,900,2020-12-31T20:20:14Z,2021-02-18T01:01:57Z,2021-02-18T01:01:57Z,CLOSED,False,193,4,5,https://github.com/komik0,Rtl8139 rx path,9,['blocked'],https://github.com/cahirwpz/mimiker/pull/900,https://github.com/komik0,2,https://github.com/cahirwpz/mimiker/pull/900#issuecomment-780957684,the first version of rx path,"moved to #1005
the issues pointed by @wiklam should be closed there",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,901,2021-01-02T19:40:16Z,,2021-03-18T12:05:54Z,OPEN,False,270,17,16,https://github.com/bkjg,Implement mprotect,45,[],https://github.com/cahirwpz/mimiker/pull/901,https://github.com/bkjg,1,https://github.com/cahirwpz/mimiker/pull/901,Implement mprotect. The most significant addition here is splitting the segments when we are trying to change the permissions only of the part of them.,Implement mprotect. The most significant addition here is splitting the segments when we are trying to change the permissions only of the part of them.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,901,2021-01-02T19:40:16Z,,2021-03-18T12:05:54Z,OPEN,False,270,17,16,https://github.com/bkjg,Implement mprotect,45,[],https://github.com/cahirwpz/mimiker/pull/901,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/901#issuecomment-775935227,Implement mprotect. The most significant addition here is splitting the segments when we are trying to change the permissions only of the part of them.,Please resolve conflicts.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,901,2021-01-02T19:40:16Z,,2021-03-18T12:05:54Z,OPEN,False,270,17,16,https://github.com/bkjg,Implement mprotect,45,[],https://github.com/cahirwpz/mimiker/pull/901,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/901#issuecomment-798878492,Implement mprotect. The most significant addition here is splitting the segments when we are trying to change the permissions only of the part of them.,@franciscozdo Please evaluate this PR for useful changes in the context of adapting Cranor's amap.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,901,2021-01-02T19:40:16Z,,2021-03-18T12:05:54Z,OPEN,False,270,17,16,https://github.com/bkjg,Implement mprotect,45,[],https://github.com/cahirwpz/mimiker/pull/901,https://github.com/franciscozdo,4,https://github.com/cahirwpz/mimiker/pull/901#issuecomment-799261774,Implement mprotect. The most significant addition here is splitting the segments when we are trying to change the permissions only of the part of them.,The only things we could take from this PR are changes made to pmap.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,902,2021-01-02T20:36:58Z,2021-01-13T19:39:49Z,2021-01-13T19:40:43Z,MERGED,True,37,44,2,https://github.com/j-piecuch,Handle signals in the TTY layer using ERESTARTSYS,18,['accepted'],https://github.com/cahirwpz/mimiker/pull/902,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/902,"When a signal is waiting to be delivered, the TTY layer immediately returns ERESTARTSYS to handle the signal. If it was a stop signal and no handler was run, then the system call will be restarted, and if a handler was run, the system call returns EINTR, which is exactly what we want. Now we don't need t_background_cv.","When a signal is waiting to be delivered, the TTY layer immediately returns ERESTARTSYS to handle the signal. If it was a stop signal and no handler was run, then the system call will be restarted, and if a handler was run, the system call returns EINTR, which is exactly what we want. Now we don't need t_background_cv.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,902,2021-01-02T20:36:58Z,2021-01-13T19:39:49Z,2021-01-13T19:40:43Z,MERGED,True,37,44,2,https://github.com/j-piecuch,Handle signals in the TTY layer using ERESTARTSYS,18,['accepted'],https://github.com/cahirwpz/mimiker/pull/902,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/902#issuecomment-757918709,"When a signal is waiting to be delivered, the TTY layer immediately returns ERESTARTSYS to handle the signal. If it was a stop signal and no handler was run, then the system call will be restarted, and if a handler was run, the system call returns EINTR, which is exactly what we want. Now we don't need t_background_cv.",Please resolve conflicts.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,903,2021-01-03T12:31:56Z,2021-01-11T10:24:51Z,2021-01-11T10:50:52Z,MERGED,True,12,3,2,https://github.com/franciscozdo,Checking permission to perform write operation on directory,3,[],https://github.com/cahirwpz/mimiker/pull/903,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/903,"We should check permission to write to directory when we create or remove files and directories.
Now we also should change permissions of /tmp dir because everyone should have permission to create files in it. (In the future this directory should have also sticky bit set so users can't delete others' files).","We should check permission to write to directory when we create or remove files and directories.
Now we also should change permissions of /tmp dir because everyone should have permission to create files in it. (In the future this directory should have also sticky bit set so users can't delete others' files).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,903,2021-01-03T12:31:56Z,2021-01-11T10:24:51Z,2021-01-11T10:50:52Z,MERGED,True,12,3,2,https://github.com/franciscozdo,Checking permission to perform write operation on directory,3,[],https://github.com/cahirwpz/mimiker/pull/903,https://github.com/franciscozdo,2,https://github.com/cahirwpz/mimiker/pull/903#issuecomment-757557429,"We should check permission to write to directory when we create or remove files and directories.
Now we also should change permissions of /tmp dir because everyone should have permission to create files in it. (In the future this directory should have also sticky bit set so users can't delete others' files).",Thanks! I provided description so it will be clear now.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,904,2021-01-03T13:10:14Z,2021-01-11T10:16:17Z,2021-01-11T10:51:01Z,MERGED,True,318,1,6,https://github.com/franciscozdo,Port chown program,3,[],https://github.com/cahirwpz/mimiker/pull/904,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/904,"I added functions:

uid_from_user()
gid_from_group()

And added implementation for:

user_from_uid()
group_from_gid()","I added functions:

uid_from_user()
gid_from_group()

And added implementation for:

user_from_uid()
group_from_gid()",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,905,2021-01-03T13:22:16Z,2021-01-08T18:07:26Z,2021-01-08T18:07:26Z,CLOSED,False,51,1,7,https://github.com/bkjg,Fix protection bug [WIP],2,['WiP'],https://github.com/cahirwpz/mimiker/pull/905,https://github.com/bkjg,1,https://github.com/cahirwpz/mimiker/pull/905,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,906,2021-01-03T17:30:42Z,2021-01-13T17:57:20Z,2021-01-13T21:34:18Z,MERGED,True,55,11,5,https://github.com/mohrcore,Dynamic method dispatch for device drivers,11,[],https://github.com/cahirwpz/mimiker/pull/906,https://github.com/mohrcore,1,https://github.com/cahirwpz/mimiker/pull/906,"See #888 for some background.
This PR aims to add a dynamic dispatch for device driver methods implemented as interfaces. If a method is not implemented by device's parent, the dispatch mechanism tries to find a suitable device higher in device tree that implements such method.
This also means that some method signatures have to change as the assumption that a direct child of a bus calls the method does not hold true anymore (unless it has to, then an assert is being used). The dev parameter is now the device that is the method actually operates on instead of being it's direct child (which is something I considered to be very confusing in previous design). The new target parameter is a device whose driver called the method.","See #888 for some background.
This PR aims to add a dynamic dispatch for device driver methods implemented as interfaces. If a method is not implemented by device's parent, the dispatch mechanism tries to find a suitable device higher in device tree that implements such method.
This also means that some method signatures have to change as the assumption that a direct child of a bus calls the method does not hold true anymore (unless it has to, then an assert is being used). The dev parameter is now the device that is the method actually operates on instead of being it's direct child (which is something I considered to be very confusing in previous design). The new target parameter is a device whose driver called the method.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,906,2021-01-03T17:30:42Z,2021-01-13T17:57:20Z,2021-01-13T21:34:18Z,MERGED,True,55,11,5,https://github.com/mohrcore,Dynamic method dispatch for device drivers,11,[],https://github.com/cahirwpz/mimiker/pull/906,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/906#issuecomment-756689581,"See #888 for some background.
This PR aims to add a dynamic dispatch for device driver methods implemented as interfaces. If a method is not implemented by device's parent, the dispatch mechanism tries to find a suitable device higher in device tree that implements such method.
This also means that some method signatures have to change as the assumption that a direct child of a bus calls the method does not hold true anymore (unless it has to, then an assert is being used). The dev parameter is now the device that is the method actually operates on instead of being it's direct child (which is something I considered to be very confusing in previous design). The new target parameter is a device whose driver called the method.",This PR attempts to introduce two major changes at once. It's difficult to separate them with my eyes. Hence I'm reluctant to review the code until two functionalities are split into separate PRs.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,906,2021-01-03T17:30:42Z,2021-01-13T17:57:20Z,2021-01-13T21:34:18Z,MERGED,True,55,11,5,https://github.com/mohrcore,Dynamic method dispatch for device drivers,11,[],https://github.com/cahirwpz/mimiker/pull/906,https://github.com/mohrcore,3,https://github.com/cahirwpz/mimiker/pull/906#issuecomment-758888265,"See #888 for some background.
This PR aims to add a dynamic dispatch for device driver methods implemented as interfaces. If a method is not implemented by device's parent, the dispatch mechanism tries to find a suitable device higher in device tree that implements such method.
This also means that some method signatures have to change as the assumption that a direct child of a bus calls the method does not hold true anymore (unless it has to, then an assert is being used). The dev parameter is now the device that is the method actually operates on instead of being it's direct child (which is something I considered to be very confusing in previous design). The new target parameter is a device whose driver called the method.","oh no...
(Apparently I don't know how to properly update a branch.)",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,906,2021-01-03T17:30:42Z,2021-01-13T17:57:20Z,2021-01-13T21:34:18Z,MERGED,True,55,11,5,https://github.com/mohrcore,Dynamic method dispatch for device drivers,11,[],https://github.com/cahirwpz/mimiker/pull/906,https://github.com/mohrcore,4,https://github.com/cahirwpz/mimiker/pull/906#issuecomment-758892770,"See #888 for some background.
This PR aims to add a dynamic dispatch for device driver methods implemented as interfaces. If a method is not implemented by device's parent, the dispatch mechanism tries to find a suitable device higher in device tree that implements such method.
This also means that some method signatures have to change as the assumption that a direct child of a bus calls the method does not hold true anymore (unless it has to, then an assert is being used). The dev parameter is now the device that is the method actually operates on instead of being it's direct child (which is something I considered to be very confusing in previous design). The new target parameter is a device whose driver called the method.","I've simplified this PR to exclude the part with changing method signatures. It will be necessary to provide a proper dispatch mechanism that will work in all scenarios, however this solution will work in some scenarios (ie. the bus device does about care wether the dev device is the caller).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,906,2021-01-03T17:30:42Z,2021-01-13T17:57:20Z,2021-01-13T21:34:18Z,MERGED,True,55,11,5,https://github.com/mohrcore,Dynamic method dispatch for device drivers,11,[],https://github.com/cahirwpz/mimiker/pull/906,https://github.com/mohrcore,5,https://github.com/cahirwpz/mimiker/pull/906#issuecomment-759753382,"See #888 for some background.
This PR aims to add a dynamic dispatch for device driver methods implemented as interfaces. If a method is not implemented by device's parent, the dispatch mechanism tries to find a suitable device higher in device tree that implements such method.
This also means that some method signatures have to change as the assumption that a direct child of a bus calls the method does not hold true anymore (unless it has to, then an assert is being used). The dev parameter is now the device that is the method actually operates on instead of being it's direct child (which is something I considered to be very confusing in previous design). The new target parameter is a device whose driver called the method.","Looks like @cahirwpz outran me with those changes.
Anyway, I'm glad this was merged quickly.
This should unblock #873.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,907,2021-01-04T19:51:13Z,,2021-03-15T09:29:46Z,OPEN,False,122,39,2,https://github.com/bkjg,mmap: allow replacing mappings when MAP_FIXED flag is specified,18,['proposal'],https://github.com/cahirwpz/mimiker/pull/907,https://github.com/bkjg,1,https://github.com/cahirwpz/mimiker/pull/907,This PR introduces changes which will make mmap posix friendly namely allowing replacing existing mappings by the new ones when MAP_FIXED flag is specified.,This PR introduces changes which will make mmap posix friendly namely allowing replacing existing mappings by the new ones when MAP_FIXED flag is specified.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,907,2021-01-04T19:51:13Z,,2021-03-15T09:29:46Z,OPEN,False,122,39,2,https://github.com/bkjg,mmap: allow replacing mappings when MAP_FIXED flag is specified,18,['proposal'],https://github.com/cahirwpz/mimiker/pull/907,https://github.com/bkjg,2,https://github.com/cahirwpz/mimiker/pull/907#issuecomment-766780852,This PR introduces changes which will make mmap posix friendly namely allowing replacing existing mappings by the new ones when MAP_FIXED flag is specified.,"Your tests are not working on AArch64.
vm_map_fixed_bad - assert_fail for vm_map_fixed_bad () at /sys/tests/vm_map.c:255
Please fix that.

@pj1031999 Should be fixed.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,907,2021-01-04T19:51:13Z,,2021-03-15T09:29:46Z,OPEN,False,122,39,2,https://github.com/bkjg,mmap: allow replacing mappings when MAP_FIXED flag is specified,18,['proposal'],https://github.com/cahirwpz/mimiker/pull/907,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/907#issuecomment-798878601,This PR introduces changes which will make mmap posix friendly namely allowing replacing existing mappings by the new ones when MAP_FIXED flag is specified.,@franciscozdo Please evaluate this PR for useful changes in the context of adapting Cranor's amap.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,907,2021-01-04T19:51:13Z,,2021-03-15T09:29:46Z,OPEN,False,122,39,2,https://github.com/bkjg,mmap: allow replacing mappings when MAP_FIXED flag is specified,18,['proposal'],https://github.com/cahirwpz/mimiker/pull/907,https://github.com/franciscozdo,4,https://github.com/cahirwpz/mimiker/pull/907#issuecomment-799264543,This PR introduces changes which will make mmap posix friendly namely allowing replacing existing mappings by the new ones when MAP_FIXED flag is specified.,I think we will do it in different way because we won't have segments.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,908,2021-01-05T18:29:07Z,2021-01-18T21:05:00Z,2021-01-18T21:05:00Z,MERGED,True,55,15,4,https://github.com/bkjg,munmap: allow munmapping pieces of segments,11,['accepted'],https://github.com/cahirwpz/mimiker/pull/908,https://github.com/bkjg,1,https://github.com/cahirwpz/mimiker/pull/908,This PR introduces changes which will make munmap posix friendly namely allowing munmapping pieces of segments.,This PR introduces changes which will make munmap posix friendly namely allowing munmapping pieces of segments.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,909,2021-01-07T15:43:45Z,2021-01-15T17:36:56Z,2021-01-15T17:36:56Z,CLOSED,False,82,74,2,https://github.com/bkjg,pmap: fix locks,5,['review'],https://github.com/cahirwpz/mimiker/pull/909,https://github.com/bkjg,1,https://github.com/cahirwpz/mimiker/pull/909,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,909,2021-01-07T15:43:45Z,2021-01-15T17:36:56Z,2021-01-15T17:36:56Z,CLOSED,False,82,74,2,https://github.com/bkjg,pmap: fix locks,5,['review'],https://github.com/cahirwpz/mimiker/pull/909,https://github.com/franciscozdo,2,https://github.com/cahirwpz/mimiker/pull/909#issuecomment-757564195,,"sys/aarch64/pmap.c:281
Have you ever run that part of code?
You acquire mutex in 281 and then do the same in 291.
Now you have deadlock on every pmap_kenter call.

@pj1031999 sorry for deleting this comment. It was by accident.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,910,2021-01-07T17:29:50Z,2021-01-31T09:32:01Z,2021-01-31T09:32:01Z,MERGED,True,418,8,17,https://github.com/j-piecuch,Implement pseudoterminals,52,['accepted'],https://github.com/cahirwpz/mimiker/pull/910,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/910,"posix_openpt() returns a an open file descriptor for the master side of a new pseudoterminal.
ptsname() is used to retrieve the path of the slave device from the file descriptor of the master device.

I will add userspace tests in another PR, so that this one doesn't get too big.","posix_openpt() returns a an open file descriptor for the master side of a new pseudoterminal.
ptsname() is used to retrieve the path of the slave device from the file descriptor of the master device.

I will add userspace tests in another PR, so that this one doesn't get too big.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,911,2021-01-07T18:17:23Z,2021-03-15T06:53:39Z,2021-03-15T06:53:39Z,CLOSED,False,191,17,17,https://github.com/bkjg,cow: optimization of pages in backing objects,100,['blocked'],https://github.com/cahirwpz/mimiker/pull/911,https://github.com/bkjg,1,https://github.com/cahirwpz/mimiker/pull/911,This PR depends on #832,This PR depends on #832,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,911,2021-01-07T18:17:23Z,2021-03-15T06:53:39Z,2021-03-15T06:53:39Z,CLOSED,False,191,17,17,https://github.com/bkjg,cow: optimization of pages in backing objects,100,['blocked'],https://github.com/cahirwpz/mimiker/pull/911,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/911#issuecomment-799164369,This PR depends on #832,"Since the PR depends on #832 that was closed, we are not going to merge this one as well.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,912,2021-01-08T11:12:13Z,2021-01-08T18:08:46Z,2021-01-08T18:08:46Z,CLOSED,False,223,86,14,https://github.com/bkjg,vm_object: add rwlocks,89,[],https://github.com/cahirwpz/mimiker/pull/912,https://github.com/bkjg,1,https://github.com/cahirwpz/mimiker/pull/912,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,913,2021-01-08T11:36:49Z,2022-06-06T17:21:52Z,2022-06-06T17:21:52Z,CLOSED,False,943,3,4,https://github.com/ThomasStachovsky,IDE ATA Driver (PIO),28,['orphaned'],https://github.com/cahirwpz/mimiker/pull/913,https://github.com/ThomasStachovsky,1,https://github.com/cahirwpz/mimiker/pull/913,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,913,2021-01-08T11:36:49Z,2022-06-06T17:21:52Z,2022-06-06T17:21:52Z,CLOSED,False,943,3,4,https://github.com/ThomasStachovsky,IDE ATA Driver (PIO),28,['orphaned'],https://github.com/cahirwpz/mimiker/pull/913,https://github.com/ThomasStachovsky,2,https://github.com/cahirwpz/mimiker/pull/913#issuecomment-775232478,,"The code of the driver is ready for review. The only thing to be changed are the additions in pci.c, but maybe it would be better to do this in another pull request?
This code after merging the isa driver PR should not pass tests! To make it pass tests we have to make a small PR for the isa driver. This is because the isa driver takes the whole range of addresses in which there are addresses of ports used by the ide controller.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,913,2021-01-08T11:36:49Z,2022-06-06T17:21:52Z,2022-06-06T17:21:52Z,CLOSED,False,943,3,4,https://github.com/ThomasStachovsky,IDE ATA Driver (PIO),28,['orphaned'],https://github.com/cahirwpz/mimiker/pull/913,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/913#issuecomment-1147691867,,Since we're planning to remove support for MIPS architecture we don't need support for IDE devices. Thus this PR is no longer relevant.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,914,2021-01-09T15:32:27Z,,2021-03-15T07:04:17Z,OPEN,False,243,4,5,https://github.com/komik0,Rtl8139 tx path,12,"['WiP', 'orphaned']",https://github.com/cahirwpz/mimiker/pull/914,https://github.com/komik0,1,https://github.com/cahirwpz/mimiker/pull/914,"now we only send dummy ack for every packet.
this is just demo version (for monday's meeting) - to show what's needed to send any packet.","now we only send dummy ack for every packet.
this is just demo version (for monday's meeting) - to show what's needed to send any packet.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,915,2021-01-11T10:41:39Z,2021-01-13T17:04:36Z,2021-01-13T17:46:12Z,MERGED,True,569,13,2,https://github.com/franciscozdo,Get pwcache from NetBSD,5,['accepted'],https://github.com/cahirwpz/mimiker/pull/915,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/915,Simply copied files pwcache.c and pwcache.h.,Simply copied files pwcache.c and pwcache.h.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,915,2021-01-11T10:41:39Z,2021-01-13T17:04:36Z,2021-01-13T17:46:12Z,MERGED,True,569,13,2,https://github.com/franciscozdo,Get pwcache from NetBSD,5,['accepted'],https://github.com/cahirwpz/mimiker/pull/915,https://github.com/franciscozdo,2,https://github.com/cahirwpz/mimiker/pull/915#issuecomment-757867103,Simply copied files pwcache.c and pwcache.h.,"Diffs
pwcache.c
1,2d0
< /*    $NetBSD: pwcache.c,v 1.32 2018/11/08 06:43:52 msaitoh Exp $     */
<
73,81d70
< #if defined(LIBC_SCCS) && !defined(lint)
< #if 0
< static char sccsid[] = ""@(#)cache.c   8.1 (Berkeley) 5/31/93"";
< #else
< __RCSID(""$NetBSD: pwcache.c,v 1.32 2018/11/08 06:43:52 msaitoh Exp $"");
< #endif
< #endif /* LIBC_SCCS and not lint */
<
< #include ""namespace.h""
98,103d86
< #endif
<
< #ifdef __weak_alias
< __weak_alias(user_from_uid,_user_from_uid)
< __weak_alias(group_from_gid,_group_from_gid)
< __weak_alias(pwcache_groupdb,_pwcache_groupdb)

pwcache.h
1,2d0
< /*    $NetBSD: pwcache.h,v 1.5 2003/11/10 08:51:51 wiz Exp $  */
<",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,916,2021-01-11T15:06:32Z,2021-01-18T19:50:03Z,2021-01-18T19:50:03Z,MERGED,True,41,2,3,https://github.com/j-piecuch,tty: add support for ISIG flag (i.e. send signals in response to certain control characters),7,['accepted'],https://github.com/cahirwpz/mimiker/pull/916,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/916,"If the ISIG terminal flag is set, certain control characters result in a signal being sent to the foreground process group:

VINTR causes SIGINT to be sent,
VSUSP causes SIGTSTP to be sent,
VQUIT causes SIGQUIT to be sent.","If the ISIG terminal flag is set, certain control characters result in a signal being sent to the foreground process group:

VINTR causes SIGINT to be sent,
VSUSP causes SIGTSTP to be sent,
VQUIT causes SIGQUIT to be sent.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,917,2021-01-11T22:46:50Z,2021-01-19T16:43:27Z,2021-01-19T16:43:28Z,MERGED,True,272,255,12,https://github.com/MichalBlk,Reorganize hardware resources handling.,14,['accepted'],https://github.com/cahirwpz/mimiker/pull/917,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/917,"Extract type dependent fields from the resource_t structure to the resource_list_entry_t structure.
Make the resource_t structure an rman private structure.
Present the resource_list_entry_t structure as a public handle to hardware resources and rename it to resource_t.","Extract type dependent fields from the resource_t structure to the resource_list_entry_t structure.
Make the resource_t structure an rman private structure.
Present the resource_list_entry_t structure as a public handle to hardware resources and rename it to resource_t.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,918,2021-01-12T12:42:24Z,2021-01-13T18:23:36Z,2021-01-13T19:40:32Z,MERGED,True,54,0,2,https://github.com/j-piecuch,Add FIONREAD ioctl,3,['accepted'],https://github.com/cahirwpz/mimiker/pull/918,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/918,"The FIONREAD ioctl returns the number of bytes ready to be read. It will be useful for testing canonical mode, to check that no bytes are ready to be read until a complete line is typed.","The FIONREAD ioctl returns the number of bytes ready to be read. It will be useful for testing canonical mode, to check that no bytes are ready to be read until a complete line is typed.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,919,2021-01-12T14:05:12Z,2021-02-08T11:54:47Z,2021-02-08T11:54:47Z,MERGED,True,319,2,9,https://github.com/j-piecuch,TTY & PTY userspace tests,80,['accepted'],https://github.com/cahirwpz/mimiker/pull/919,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/919,"This PR adds a basic PTY test, and 3 TTY tests that test canonical mode, echo and signals.
It also fixes a small bug: we didn't echo characters in raw mode even if ECHO was set.","This PR adds a basic PTY test, and 3 TTY tests that test canonical mode, echo and signals.
It also fixes a small bug: we didn't echo characters in raw mode even if ECHO was set.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,920,2021-01-12T16:08:29Z,2021-01-18T19:46:26Z,2021-01-18T19:46:27Z,MERGED,True,327,2,2,https://github.com/j-piecuch,"Add getpass(), getpass_r() and getpassfd() from NetBSD",4,['accepted'],https://github.com/cahirwpz/mimiker/pull/920,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/920,"getpassfd() has been modified slightly so that it doesn't use poll(). As a consequence, it ignores the tout argument.
If you want to test it, the getpass-test branch on my fork has a getpass program which shows that it works.","getpassfd() has been modified slightly so that it doesn't use poll(). As a consequence, it ignores the tout argument.
If you want to test it, the getpass-test branch on my fork has a getpass program which shows that it works.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,921,2021-01-12T19:16:47Z,2021-01-18T21:07:31Z,2021-01-18T21:07:31Z,MERGED,True,101,52,16,https://github.com/MichalBlk,Progressive device tree scanning.,8,['accepted'],https://github.com/cahirwpz/mimiker/pull/921,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/921,"Scan the device tree multiple times. Each scan is identified be a pass number and each device driver is assigned a pass number.
At each scan, drivers can be attached to devices. Driver can be probed and attached only if the current system-wide pass number
matches the driver's pass number. The first pass is devoted to detect basic hardware resources like timers and buses. All remaining devices are processed during the second (FTTB also last) pass.","Scan the device tree multiple times. Each scan is identified be a pass number and each device driver is assigned a pass number.
At each scan, drivers can be attached to devices. Driver can be probed and attached only if the current system-wide pass number
matches the driver's pass number. The first pass is devoted to detect basic hardware resources like timers and buses. All remaining devices are processed during the second (FTTB also last) pass.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,922,2021-01-13T22:59:46Z,2021-01-18T21:22:19Z,2021-01-22T19:35:15Z,MERGED,True,6,6,4,https://github.com/xThaid,Add an attribute to disable the compiler instrumentation,5,['accepted'],https://github.com/cahirwpz/mimiker/pull/922,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/922,"Some functions can't be instrumented because of stack issues. The compilers (both GCC and Clang) provide an attribute to specify that a particular set of instrumentations should not be applied to a function, so we won't have to write extra Makefile rules anymore.","Some functions can't be instrumented because of stack issues. The compilers (both GCC and Clang) provide an attribute to specify that a particular set of instrumentations should not be applied to a function, so we won't have to write extra Makefile rules anymore.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,922,2021-01-13T22:59:46Z,2021-01-18T21:22:19Z,2021-01-22T19:35:15Z,MERGED,True,6,6,4,https://github.com/xThaid,Add an attribute to disable the compiler instrumentation,5,['accepted'],https://github.com/cahirwpz/mimiker/pull/922,https://github.com/xThaid,2,https://github.com/cahirwpz/mimiker/pull/922#issuecomment-760116822,"Some functions can't be instrumented because of stack issues. The compilers (both GCC and Clang) provide an attribute to specify that a particular set of instrumentations should not be applied to a function, so we won't have to write extra Makefile rules anymore.","What about other functions used from copy.S like bcopy?

copy.S uses only bcopy and copystr and bcopy is already implemented in assembly.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,923,2021-01-14T11:55:25Z,2021-01-18T19:48:04Z,2021-01-18T19:48:04Z,MERGED,True,54,36,4,https://github.com/j-piecuch,Implement TIOCGWINSZ and TIOCSWINSZ ioctls,4,['accepted'],https://github.com/cahirwpz/mimiker/pull/923,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/923,"Implement ioctls for getting and setting the terminal window size.
Also, allocate tty_t structures with the M_ZERO flag, so that we don't need to explicitly zero-initialize most fields.","Implement ioctls for getting and setting the terminal window size.
Also, allocate tty_t structures with the M_ZERO flag, so that we don't need to explicitly zero-initialize most fields.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,924,2021-01-14T22:29:25Z,2021-01-15T13:45:26Z,2021-01-15T13:45:31Z,MERGED,True,9,3,4,https://github.com/pj1031999,AArch64: fix buffer overflow in syscall handler,4,"['bug', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/924,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/924,"Fix buffer overflow in syscall handler.
Number of registers copied from context into args buffer should not be greater than SYS_MAXSYSARGS.","Fix buffer overflow in syscall handler.
Number of registers copied from context into args buffer should not be greater than SYS_MAXSYSARGS.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,925,2021-01-15T10:17:27Z,2021-01-15T12:52:12Z,2021-01-22T19:35:25Z,MERGED,True,3,1,2,https://github.com/franciscozdo,Allow to set set-user-id bit on userspace programs,2,['accepted'],https://github.com/cahirwpz/mimiker/pull/925,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/925,We can specify if program will have set set-user-id bit by setting variable SETUID in Makefile for that program.,We can specify if program will have set set-user-id bit by setting variable SETUID in Makefile for that program.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,926,2021-01-15T10:23:42Z,2021-01-18T13:12:22Z,2021-01-18T14:05:01Z,MERGED,True,14,6,1,https://github.com/franciscozdo,Fix files and directory ownership,2,['accepted'],https://github.com/cahirwpz/mimiker/pull/926,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/926,"File should have owner and group of creating process effective uid and gid.
I also added set-group-id functionality on directories. Files created under such directories will have group of parent dir. Directories will have group of parent dir and also set set-group-id.","File should have owner and group of creating process effective uid and gid.
I also added set-group-id functionality on directories. Files created under such directories will have group of parent dir. Directories will have group of parent dir and also set set-group-id.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,927,2021-01-15T12:36:12Z,2021-01-22T09:51:17Z,2021-01-22T09:51:17Z,MERGED,True,8,18,1,https://github.com/wiklam,Simplify PIT timer - remove spinlock,4,['accepted'],https://github.com/cahirwpz/mimiker/pull/927,https://github.com/wiklam,1,https://github.com/cahirwpz/mimiker/pull/927,Updating the counter when we request time from the timer increase the quality of measured time.,Updating the counter when we request time from the timer increase the quality of measured time.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,928,2021-01-15T15:06:52Z,2021-01-22T19:30:58Z,2021-01-22T19:31:02Z,MERGED,True,92,53,5,https://github.com/cahirwpz,"Save FPU context on ctx_switch, restore on user_exc_leave.",16,['accepted'],https://github.com/cahirwpz/mimiker/pull/928,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/928,"We don't want to needlessly save & restore FPU context. Moreover we would like to perform both things in a uniform way on both MIPS & AArch64. Let us save (where?) an information that current FPU context is valid and has not been saved. We need to save the context only when kernel thread calls ctx_switch and mark that FPU context was saved, so we don't accidentally save it the second time. We need to restore FPU context only when ctx_switch was performed.
Let's devise private thread flags aka td_pflags:
TDP_FPCTXSAVED: the context was saved because ctx_switch happened
TDP_FPCTXUSED: the context is valid and should be saved & restored on demand","We don't want to needlessly save & restore FPU context. Moreover we would like to perform both things in a uniform way on both MIPS & AArch64. Let us save (where?) an information that current FPU context is valid and has not been saved. We need to save the context only when kernel thread calls ctx_switch and mark that FPU context was saved, so we don't accidentally save it the second time. We need to restore FPU context only when ctx_switch was performed.
Let's devise private thread flags aka td_pflags:
TDP_FPCTXSAVED: the context was saved because ctx_switch happened
TDP_FPCTXUSED: the context is valid and should be saved & restored on demand",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,929,2021-01-15T18:01:01Z,2021-02-08T11:32:41Z,2021-02-08T11:32:41Z,MERGED,True,132,9,10,https://github.com/j-piecuch,Add various functionality required to port the `script` program.,82,['accepted'],https://github.com/cahirwpz/mimiker/pull/929,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/929,"Add bswap{16,32,64}() (implemented as macros using __builtin_bswap{16,32,64}()
Add login_tty() from NetBSD and implement openpty() in libutil
Implement TIOCSCTTY ioctl()","Add bswap{16,32,64}() (implemented as macros using __builtin_bswap{16,32,64}()
Add login_tty() from NetBSD and implement openpty() in libutil
Implement TIOCSCTTY ioctl()",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,930,2021-01-15T18:46:11Z,2021-01-22T16:17:33Z,2021-01-22T16:17:33Z,MERGED,True,39,24,3,https://github.com/j-piecuch,Fix gdb `kthread` command,3,['accepted'],https://github.com/cahirwpz/mimiker/pull/930,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/930,"Currently, kthread <tid> doesn't print the backtrace of the target thread, because the Context class was not updated when we simplified context handling.

Update the Context class to reflect recent changes to context handling
Handle case where regex doesn't match in ProgramCounter::__str__()","Currently, kthread <tid> doesn't print the backtrace of the target thread, because the Context class was not updated when we simplified context handling.

Update the Context class to reflect recent changes to context handling
Handle case where regex doesn't match in ProgramCounter::__str__()",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,931,2021-01-16T22:40:41Z,2021-01-29T13:42:53Z,2021-02-16T06:08:33Z,MERGED,True,172,8,4,https://github.com/pj1031999,"AArch64: save FPU context on ctx_switch, restore on user_exc_leave.",19,"['accepted', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/931,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/931,Port #928 for AArch64.,Port #928 for AArch64.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,931,2021-01-16T22:40:41Z,2021-01-29T13:42:53Z,2021-02-16T06:08:33Z,MERGED,True,172,8,4,https://github.com/pj1031999,"AArch64: save FPU context on ctx_switch, restore on user_exc_leave.",19,"['accepted', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/931,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/931#issuecomment-762482415,Port #928 for AArch64.,Could you move MIPS implementation to separate PR?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,931,2021-01-16T22:40:41Z,2021-01-29T13:42:53Z,2021-02-16T06:08:33Z,MERGED,True,172,8,4,https://github.com/pj1031999,"AArch64: save FPU context on ctx_switch, restore on user_exc_leave.",19,"['accepted', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/931,https://github.com/pj1031999,3,https://github.com/cahirwpz/mimiker/pull/931#issuecomment-762485216,Port #928 for AArch64.,@cahirwpz see #928.,True,{'THUMBS_UP': ['https://github.com/cahirwpz']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,933,2021-01-18T03:54:25Z,2021-01-18T13:10:18Z,2021-01-18T14:21:42Z,MERGED,True,4,6,1,https://github.com/mohrcore,Remove unnecessary ICU_LEN from gt64120 driver,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/933,https://github.com/mohrcore,1,https://github.com/cahirwpz/mimiker/pull/933,Use IO_ICUSIZE instead of sort-of random ICU_LEN.,Use IO_ICUSIZE instead of sort-of random ICU_LEN.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,934,2021-01-18T12:46:59Z,2021-02-09T13:21:42Z,2021-02-09T13:21:42Z,MERGED,True,157,35,8,https://github.com/bkjg,pmap: fix bug with permissions,21,['accepted'],https://github.com/cahirwpz/mimiker/pull/934,https://github.com/bkjg,1,https://github.com/cahirwpz/mimiker/pull/934,This pull request fix bug in pmap which allowed for example for writing to readonly memory.,This pull request fix bug in pmap which allowed for example for writing to readonly memory.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,934,2021-01-18T12:46:59Z,2021-02-09T13:21:42Z,2021-02-09T13:21:42Z,MERGED,True,157,35,8,https://github.com/bkjg,pmap: fix bug with permissions,21,['accepted'],https://github.com/cahirwpz/mimiker/pull/934,https://github.com/bkjg,2,https://github.com/cahirwpz/mimiker/pull/934#issuecomment-765905224,This pull request fix bug in pmap which allowed for example for writing to readonly memory.,"Please fix errors on CLANG build.
assertion ""sigsegv_handled == 1"" failed: file ""/root/mimiker/bin/utest/mmap.c"", line 126, function ""test_mmap_readonly""

@pj1031999  Fixed.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,935,2021-01-18T13:10:29Z,,2021-07-11T19:43:05Z,OPEN,False,1234,41,26,https://github.com/MichalBlk,Malta USB (UHCI HC).,101,['WiP'],https://github.com/cahirwpz/mimiker/pull/935,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/935,"Implement USB on Malta platform. This involves:

UHCI host controller driver
USB bus driver (implement as a set of routines, not an actual bus driver)
HID mouse driver
HID keyboard driver
USB mass storage device driver (Bulk-Only protocol)","Implement USB on Malta platform. This involves:

UHCI host controller driver
USB bus driver (implement as a set of routines, not an actual bus driver)
HID mouse driver
HID keyboard driver
USB mass storage device driver (Bulk-Only protocol)",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,935,2021-01-18T13:10:29Z,,2021-07-11T19:43:05Z,OPEN,False,1234,41,26,https://github.com/MichalBlk,Malta USB (UHCI HC).,101,['WiP'],https://github.com/cahirwpz/mimiker/pull/935,https://github.com/MichalBlk,2,https://github.com/cahirwpz/mimiker/pull/935#issuecomment-836363109,"Implement USB on Malta platform. This involves:

UHCI host controller driver
USB bus driver (implement as a set of routines, not an actual bus driver)
HID mouse driver
HID keyboard driver
USB mass storage device driver (Bulk-Only protocol)","umass driver hasn't been rewritten yet to employ new USB interfaces, however HID mouse and keyboard have.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,935,2021-01-18T13:10:29Z,,2021-07-11T19:43:05Z,OPEN,False,1234,41,26,https://github.com/MichalBlk,Malta USB (UHCI HC).,101,['WiP'],https://github.com/cahirwpz/mimiker/pull/935,https://github.com/MichalBlk,3,https://github.com/cahirwpz/mimiker/pull/935#issuecomment-841695172,"Implement USB on Malta platform. This involves:

UHCI host controller driver
USB bus driver (implement as a set of routines, not an actual bus driver)
HID mouse driver
HID keyboard driver
USB mass storage device driver (Bulk-Only protocol)","USB mass storage device driver has been rewritten, and works fine.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,936,2021-01-18T14:47:10Z,2021-01-22T11:13:56Z,2021-01-22T11:17:34Z,MERGED,True,9,1,1,https://github.com/pj1031999,AArch64: fix user-space sbrk test.,1,"['accepted', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/936,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/936,Fix user-space sbrk test for AArch64 - #932.,Fix user-space sbrk test for AArch64 - #932.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,937,2021-01-18T15:54:42Z,2021-01-22T11:14:33Z,2021-01-22T11:17:28Z,MERGED,True,11,1,1,https://github.com/pj1031999,AArch64: fix user-space mmap test.,1,"['accepted', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/937,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/937,Fix user-space mmap test for AArch64 - #932.,Fix user-space mmap test for AArch64 - #932.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,938,2021-01-18T16:10:26Z,2021-01-18T21:35:14Z,2021-01-18T21:35:17Z,MERGED,True,651,116,14,https://github.com/pj1031999,Compile kernel without FPU on MIPS.,4,[],https://github.com/cahirwpz/mimiker/pull/938,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/938,"Compile kernel without FPU on MIPS.
Part of #928.","Compile kernel without FPU on MIPS.
Part of #928.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,939,2021-01-18T17:33:41Z,2021-04-21T19:51:04Z,2021-04-21T19:51:04Z,CLOSED,False,15,0,2,https://github.com/MichalBlk,Introduce the mdelay function.,2,[],https://github.com/cahirwpz/mimiker/pull/939,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/939,The mdelay function waits for a given amount of ms. It's devoted for use inside device drivers and any other field which requires accurate waiting at ms level.,The mdelay function waits for a given amount of ms. It's devoted for use inside device drivers and any other field which requires accurate waiting at ms level.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,939,2021-01-18T17:33:41Z,2021-04-21T19:51:04Z,2021-04-21T19:51:04Z,CLOSED,False,15,0,2,https://github.com/MichalBlk,Introduce the mdelay function.,2,[],https://github.com/cahirwpz/mimiker/pull/939,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/939#issuecomment-822296499,The mdelay function waits for a given amount of ms. It's devoted for use inside device drivers and any other field which requires accurate waiting at ms level.,"@MichalBlk Since we don't have clear use case for this function, the code has rotten and is not eligible for merging anymore. Please close this PR.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,940,2021-01-19T16:53:38Z,2021-01-19T17:46:13Z,2021-01-19T17:46:17Z,MERGED,True,136,120,7,https://github.com/cahirwpz,Factor out new resource handling functions after #917,5,[],https://github.com/cahirwpz/mimiker/pull/940,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/940,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,941,2021-01-19T21:13:21Z,2021-01-21T15:34:42Z,2021-01-21T15:34:46Z,MERGED,True,28,13,3,https://github.com/pj1031999,AArch64: use virtual address instead of physical address in tlb_invalidate.,3,"['accepted', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/941,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/941,"Use virtual address instead of physical address in tlb_invalidate.
TLBI VAE1IS & TLBI VAAE1IS require virtual address as argument.
Fix kernel-space pmap_page_copy test for AArch64 - #932.","Use virtual address instead of physical address in tlb_invalidate.
TLBI VAE1IS & TLBI VAAE1IS require virtual address as argument.
Fix kernel-space pmap_page_copy test for AArch64 - #932.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,942,2021-01-19T21:34:57Z,2021-01-22T11:17:02Z,2021-01-22T11:17:08Z,MERGED,True,9,1,1,https://github.com/pj1031999,AArch64: fix kernel-space findspace test.,1,"['accepted', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/942,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/942,Fix kernel-space findspace test for AArch64 - #932.,Fix kernel-space findspace test for AArch64 - #932.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,943,2021-01-19T22:42:07Z,2021-01-20T08:12:18Z,2021-01-20T08:12:18Z,MERGED,True,11,6,2,https://github.com/MichalBlk,Round up memory bars to the page size boundary.,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/943,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/943,Fix memory bar sizes relying on the PCI 3.0 specification.,Fix memory bar sizes relying on the PCI 3.0 specification.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,944,2021-01-20T21:51:39Z,2021-02-08T11:28:42Z,2021-02-08T11:28:42Z,CLOSED,False,3,12,1,https://github.com/MichalBlk,Don't unwind the PCI bus interface.,3,['review'],https://github.com/cahirwpz/mimiker/pull/944,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/944,There is no other device which can implement the PCI bus interface and a PCI request must be handled directly by device's parent PCI bus.,There is no other device which can implement the PCI bus interface and a PCI request must be handled directly by device's parent PCI bus.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,944,2021-01-20T21:51:39Z,2021-02-08T11:28:42Z,2021-02-08T11:28:42Z,CLOSED,False,3,12,1,https://github.com/MichalBlk,Don't unwind the PCI bus interface.,3,['review'],https://github.com/cahirwpz/mimiker/pull/944,https://github.com/mohrcore,2,https://github.com/cahirwpz/mimiker/pull/944#issuecomment-765048907,There is no other device which can implement the PCI bus interface and a PCI request must be handled directly by device's parent PCI bus.,"I no longer know what is supposed to be dispatched.
The whole dispatching thing is a mess and there's nothing that would make dispatchable methods stand out. I ""solved"" this issue by making every method virtually dispatchable and moving the responsibility of handling non-sense scenarios to drivers. This way the infrastructure itself remains consistent. With that said, I don't like the changes you proposed, but I fully understand why do you propose them.
As for now, i'll leave it with no explicit rejection or approval. This PR attempts to simplify some code and I'd happily approve such thing if there was a clear way of telling what methods are dispatchable (eg. a change their naming conventions).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,944,2021-01-20T21:51:39Z,2021-02-08T11:28:42Z,2021-02-08T11:28:42Z,CLOSED,False,3,12,1,https://github.com/MichalBlk,Don't unwind the PCI bus interface.,3,['review'],https://github.com/cahirwpz/mimiker/pull/944,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/944#issuecomment-775078163,There is no other device which can implement the PCI bus interface and a PCI request must be handled directly by device's parent PCI bus.,Since this PR does not solve any important problem we're facing I decided to close this PR. Perhaps we'll revisit it in the future.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,945,2021-01-21T09:24:26Z,2021-01-28T08:09:55Z,2021-02-28T12:01:50Z,MERGED,True,1326,4,7,https://github.com/franciscozdo,Login program,12,['accepted'],https://github.com/cahirwpz/mimiker/pull/945,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/945,"This PR tries to port login from NetBSD.
I have marked every part of code that uses not implemented features with NOT_IMPLEMENTED macro.
(Changes needed by login were done here ->  #949)","This PR tries to port login from NetBSD.
I have marked every part of code that uses not implemented features with NOT_IMPLEMENTED macro.
(Changes needed by login were done here ->  #949)",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,945,2021-01-21T09:24:26Z,2021-01-28T08:09:55Z,2021-02-28T12:01:50Z,MERGED,True,1326,4,7,https://github.com/franciscozdo,Login program,12,['accepted'],https://github.com/cahirwpz/mimiker/pull/945,https://github.com/franciscozdo,2,https://github.com/cahirwpz/mimiker/pull/945#issuecomment-764518457,"This PR tries to port login from NetBSD.
I have marked every part of code that uses not implemented features with NOT_IMPLEMENTED macro.
(Changes needed by login were done here ->  #949)","diff with original sources (except NOT_IMPLEMENTED)
login.c:
33,43d32
< #ifndef lint
< __COPYRIGHT(""@(#) Copyright (c) 1980, 1987, 1988, 1991, 1993, 1994\
<  The Regents of the University of California.  All rights reserved."");
< #endif /* not lint */
<
< #ifndef lint
< #if 0
< static char sccsid[] = ""@(#)login.c   8.4 (Berkeley) 4/2/94"";
< #endif
< __RCSID(""$NetBSD: login.c,v 1.105 2014/11/12 22:23:38 aymeric Exp $"");
< #endif /* not lint */
262c265
<       for (cnt = getdtablesize(); cnt > 2; cnt--)
---
>       for (cnt = sysconf(_SC_OPEN_MAX); cnt > 2; cnt--)
32,33d31
< __RCSID(""$NetBSD: common.c,v 1.8 2015/10/28 07:27:24 shm Exp $"");
<

common.c:
49a50
> #include <signal.h>
101a107
>     fflush(stdout);
124a131
150c159
< void __dead
---
> void
158c167
< void __dead
---
> void
165a175
376c390
< void __dead
---
> void

common.h:
35d34
< void   update_db(int, int, int);
40,41c39,40
< void   __dead sigint(int);
< void   __dead sleepexit(int);
---
> void   sigint(int);
> void   sleepexit(int);
43c42,43
< void   __dead timedout(int);
---
> void   timedout(int);
> #ifdef NOT_IMPLEMENTED
44a45,49
> void   update_db(int, int, int);
> #else
> #define decode_ss(...)
> #define update_db(...)
> #endif",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,946,2021-01-21T11:43:58Z,2021-01-28T13:50:00Z,2021-02-28T11:59:45Z,MERGED,True,22,5,4,https://github.com/franciscozdo,Sticky bit,16,['accepted'],https://github.com/cahirwpz/mimiker/pull/946,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/946,"This PR will add sticky bit feature to Mimiker.
When sticky bit is set on directory, removing files (and directories) in it is restricted to root, directory owner and file owner.
Also marked /tmp with this bit, as it is in other systems.","This PR will add sticky bit feature to Mimiker.
When sticky bit is set on directory, removing files (and directories) in it is restricted to root, directory owner and file owner.
Also marked /tmp with this bit, as it is in other systems.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,947,2021-01-21T13:27:45Z,2021-01-22T11:33:13Z,2021-01-22T11:33:13Z,MERGED,True,20,21,2,https://github.com/MichalBlk,Fix PCI configuration space reading/writing.,2,['accepted'],https://github.com/cahirwpz/mimiker/pull/947,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/947,Make definitions in include/sys/pci.h compliant with the PCI specification.,Make definitions in include/sys/pci.h compliant with the PCI specification.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,948,2021-01-21T13:47:12Z,2021-02-01T13:18:44Z,2021-02-01T13:18:45Z,MERGED,True,1,4,3,https://github.com/MichalBlk,PCI isn't a PCI attached device.,3,['accepted'],https://github.com/cahirwpz/mimiker/pull/948,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/948,Remove the DEV_PCI_BUS marker form the PCI bus device.,Remove the DEV_PCI_BUS marker form the PCI bus device.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,948,2021-01-21T13:47:12Z,2021-02-01T13:18:44Z,2021-02-01T13:18:45Z,MERGED,True,1,4,3,https://github.com/MichalBlk,PCI isn't a PCI attached device.,3,['accepted'],https://github.com/cahirwpz/mimiker/pull/948,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/948#issuecomment-770621647,Remove the DEV_PCI_BUS marker form the PCI bus device.,@MichalBlk I'm somewhat confused – can you explain why this change is needed?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,948,2021-01-21T13:47:12Z,2021-02-01T13:18:44Z,2021-02-01T13:18:45Z,MERGED,True,1,4,3,https://github.com/MichalBlk,PCI isn't a PCI attached device.,3,['accepted'],https://github.com/cahirwpz/mimiker/pull/948,https://github.com/MichalBlk,3,https://github.com/cahirwpz/mimiker/pull/948#issuecomment-770772164,Remove the DEV_PCI_BUS marker form the PCI bus device.,"In the definition of device_t we can see
device_bus_t bus; /* (for children) type of bus we're attached to */
But in our scenario, PCI bus is not attached to a PCI bus.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,949,2021-01-22T12:41:16Z,2021-01-22T19:33:30Z,2021-01-25T16:40:02Z,MERGED,True,211,4,8,https://github.com/franciscozdo,Login: changes in libc and headers,2,['accepted'],https://github.com/cahirwpz/mimiker/pull/949,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/949,"I added sysexits.h and execlp() functions.
I had to add macro _KERNEL in file.h to allow using it in userspace. (e.g sys/mutex.h cannot be included in userspace programs)
This changes are required by #945","I added sysexits.h and execlp() functions.
I had to add macro _KERNEL in file.h to allow using it in userspace. (e.g sys/mutex.h cannot be included in userspace programs)
This changes are required by #945",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,950,2021-01-22T12:46:02Z,2021-02-27T11:43:26Z,2021-02-27T11:43:26Z,MERGED,True,96,54,5,https://github.com/j-piecuch,Allow callouts to be rescheduled from the callback,17,['accepted'],https://github.com/cahirwpz/mimiker/pull/950,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/950,"The major change is the addition of the callout_reschedule() function, which is used to reschedule a callout from its callback. It can be used to implement interval timers.","The major change is the addition of the callout_reschedule() function, which is used to reschedule a callout from its callback. It can be used to implement interval timers.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,951,2021-01-22T12:56:02Z,2021-02-01T06:57:31Z,2021-02-01T06:57:31Z,MERGED,True,1449,2,9,https://github.com/j-piecuch,Add various library routines required to port libterminfo,12,['accepted'],https://github.com/cahirwpz/mimiker/pull/951,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/951,"Add mi_vector_hash() from NetBSD into libc
Add endianness encoding/decoding functions from NetBSD to sys/endian.h
Add sys/bitops.h from NetBSD
Add cdbr.c and cdbw.c from NetBSD
They implement a simple persistent key-value database that libterminfo uses to store terminal capabilities","Add mi_vector_hash() from NetBSD into libc
Add endianness encoding/decoding functions from NetBSD to sys/endian.h
Add sys/bitops.h from NetBSD
Add cdbr.c and cdbw.c from NetBSD
They implement a simple persistent key-value database that libterminfo uses to store terminal capabilities",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,951,2021-01-22T12:56:02Z,2021-02-01T06:57:31Z,2021-02-01T06:57:31Z,MERGED,True,1449,2,9,https://github.com/j-piecuch,Add various library routines required to port libterminfo,12,['accepted'],https://github.com/cahirwpz/mimiker/pull/951,https://github.com/j-piecuch,2,https://github.com/cahirwpz/mimiker/pull/951#issuecomment-770274327,"Add mi_vector_hash() from NetBSD into libc
Add endianness encoding/decoding functions from NetBSD to sys/endian.h
Add sys/bitops.h from NetBSD
Add cdbr.c and cdbw.c from NetBSD
They implement a simple persistent key-value database that libterminfo uses to store terminal capabilities","Have you done any big changes to files imported from BSD?

I can't recall making any big changes, but I replaced a use of arc4random() (which we don't have) with random() in cdbw.c by adding cdbw_random_seeder().",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,952,2021-01-22T13:21:43Z,2021-01-22T16:14:40Z,2021-01-22T19:35:33Z,MERGED,True,5,2,1,https://github.com/j-piecuch,test_sleepq_timed(): fix race on shared variable.,2,['accepted'],https://github.com/cahirwpz/mimiker/pull/952,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/952,"The variable timed_received is concurrently incremented by multiple threads, so we need to use atomics in order to avoid a race.","The variable timed_received is concurrently incremented by multiple threads, so we need to use atomics in order to avoid a race.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,953,2021-01-22T14:29:26Z,2021-01-22T16:13:54Z,2021-01-22T16:13:57Z,MERGED,True,21,21,4,https://github.com/cahirwpz,Start kernel malloc earlier.,2,[],https://github.com/cahirwpz/mimiker/pull/953,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/953,"Manage vmem_t and pool_t memory with kmalloc.
Create first kernel malloc arena statically.","Manage vmem_t and pool_t memory with kmalloc.
Create first kernel malloc arena statically.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,954,2021-01-23T02:09:38Z,2021-02-09T12:31:57Z,2021-02-09T12:31:57Z,CLOSED,False,80,34,8,https://github.com/pj1031999,pmap: emulate bits,7,[],https://github.com/cahirwpz/mimiker/pull/954,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/954,"Hide emulation of referenced & modified bits into pmap module.


pmap global interface

pmap_emulate_bits - do emulation for given type of access



MIPS

introduce PTE_SW_MANAGED flag - page is managed
introduce PTE_SW_WRITE flag - page is writable
rename PTE_NO_EXEC - PTE_SW_NO_EXEC
implement pmap_emulate_bits
use pmap_emulate_bits in tlb_exception_handler



user-space test","Hide emulation of referenced & modified bits into pmap module.


pmap global interface

pmap_emulate_bits - do emulation for given type of access



MIPS

introduce PTE_SW_MANAGED flag - page is managed
introduce PTE_SW_WRITE flag - page is writable
rename PTE_NO_EXEC - PTE_SW_NO_EXEC
implement pmap_emulate_bits
use pmap_emulate_bits in tlb_exception_handler



user-space test",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,954,2021-01-23T02:09:38Z,2021-02-09T12:31:57Z,2021-02-09T12:31:57Z,CLOSED,False,80,34,8,https://github.com/pj1031999,pmap: emulate bits,7,[],https://github.com/cahirwpz/mimiker/pull/954,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/954#issuecomment-775903809,"Hide emulation of referenced & modified bits into pmap module.


pmap global interface

pmap_emulate_bits - do emulation for given type of access



MIPS

introduce PTE_SW_MANAGED flag - page is managed
introduce PTE_SW_WRITE flag - page is writable
rename PTE_NO_EXEC - PTE_SW_NO_EXEC
implement pmap_emulate_bits
use pmap_emulate_bits in tlb_exception_handler



user-space test",Subsumed by #934,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,955,2021-01-23T12:39:14Z,2021-02-12T14:39:10Z,2021-02-12T14:39:12Z,MERGED,True,71,35,4,https://github.com/pj1031999,AArch64: pmap emulate bits,6,['AArch64'],https://github.com/cahirwpz/mimiker/pull/955,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/955,Port #954 for AArch64.,Port #954 for AArch64.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,955,2021-01-23T12:39:14Z,2021-02-12T14:39:10Z,2021-02-12T14:39:12Z,MERGED,True,71,35,4,https://github.com/pj1031999,AArch64: pmap emulate bits,6,['AArch64'],https://github.com/cahirwpz/mimiker/pull/955,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/955#issuecomment-775932604,Port #954 for AArch64.,Please align your implementation with MIPS counterpart.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,956,2021-01-23T16:25:59Z,2021-02-08T11:59:01Z,2021-02-16T06:08:25Z,MERGED,True,55,44,2,https://github.com/bkjg,Fix lock order in pmap,8,['accepted'],https://github.com/cahirwpz/mimiker/pull/956,https://github.com/bkjg,1,https://github.com/cahirwpz/mimiker/pull/956,Different order of acquiring the pv_list_lock and pmap_t::mtx can lead to deadlock. This PR choose one particular order and fix the order in all functions.,Different order of acquiring the pv_list_lock and pmap_t::mtx can lead to deadlock. This PR choose one particular order and fix the order in all functions.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,957,2021-01-23T17:49:21Z,2021-01-26T07:12:53Z,2021-01-26T07:12:53Z,MERGED,True,3,9,2,https://github.com/xThaid,klog: fix race,1,"['accepted', 'KCSAN']",https://github.com/cahirwpz/mimiker/pull/957,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/957,"There is a harmless race on the variable klog.mask. Although it is set under a spin lock, there is no synchronization when reading it.
Found by KCSAN.","There is a harmless race on the variable klog.mask. Although it is set under a spin lock, there is no synchronization when reading it.
Found by KCSAN.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,957,2021-01-23T17:49:21Z,2021-01-26T07:12:53Z,2021-01-26T07:12:53Z,MERGED,True,3,9,2,https://github.com/xThaid,klog: fix race,1,"['accepted', 'KCSAN']",https://github.com/cahirwpz/mimiker/pull/957,https://github.com/xThaid,2,https://github.com/cahirwpz/mimiker/pull/957#issuecomment-766373704,"There is a harmless race on the variable klog.mask. Although it is set under a spin lock, there is no synchronization when reading it.
Found by KCSAN.",I force pushed the branch to re-trigger the CI.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,958,2021-01-24T18:08:50Z,2021-01-26T07:11:46Z,2021-01-26T07:11:46Z,MERGED,True,1,1,1,https://github.com/xThaid,proc: zero session structs before use,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/958,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/958,"Sessions struct weren't zeroed on creation, so the field tty_t *s_tty could contain a garbage and thus every check like this or this wasn't working as expected.","Sessions struct weren't zeroed on creation, so the field tty_t *s_tty could contain a garbage and thus every check like this or this wasn't working as expected.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,959,2021-01-24T20:08:25Z,2021-01-28T08:12:13Z,2021-01-28T08:12:13Z,MERGED,True,1,1,1,https://github.com/j-piecuch,Increase KTEST_NAME_MAX to 50.,3,['accepted'],https://github.com/cahirwpz/mimiker/pull/959,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/959,"We have a test whose name (including the null terminator) is longer than 40: user_sharing_memory_child_and_grandchild.
>>> len(""user_sharing_memory_child_and_grandchild"")
40","We have a test whose name (including the null terminator) is longer than 40: user_sharing_memory_child_and_grandchild.
>>> len(""user_sharing_memory_child_and_grandchild"")
40",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,960,2021-01-25T10:33:21Z,2021-01-26T07:10:44Z,2021-02-01T11:43:08Z,MERGED,True,10,2,1,https://github.com/franciscozdo,Handle errors generated by VOP_GETATTR,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/960,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/960,I forgot to handle possible errors generated by call to VOP_GETATTR.,I forgot to handle possible errors generated by call to VOP_GETATTR.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,961,2021-01-25T11:43:10Z,2021-01-28T07:44:12Z,2021-01-28T07:44:12Z,MERGED,True,6,5,1,https://github.com/MichalBlk,gt64120: fix PCI interrupt routing.,2,['accepted'],https://github.com/cahirwpz/mimiker/pull/961,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/961,Move an interrupt assignment outside the bar detection loop.,Move an interrupt assignment outside the bar detection loop.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,962,2021-01-25T12:01:37Z,2021-01-26T07:08:51Z,2021-02-01T11:43:25Z,MERGED,True,1,1,1,https://github.com/franciscozdo,Allow fstat() on file descriptors without read access,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/962,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/962,"do_fstat was using fdtab_get_fd with flag FF_RED for no reason.
needed by #945","do_fstat was using fdtab_get_fd with flag FF_RED for no reason.
needed by #945",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,962,2021-01-25T12:01:37Z,2021-01-26T07:08:51Z,2021-02-01T11:43:25Z,MERGED,True,1,1,1,https://github.com/franciscozdo,Allow fstat() on file descriptors without read access,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/962,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/962#issuecomment-766771614,"do_fstat was using fdtab_get_fd with flag FF_RED for no reason.
needed by #945",Umm... can you actually provide a test that shows the change is necessary?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,962,2021-01-25T12:01:37Z,2021-01-26T07:08:51Z,2021-02-01T11:43:25Z,MERGED,True,1,1,1,https://github.com/franciscozdo,Allow fstat() on file descriptors without read access,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/962,https://github.com/pj1031999,3,https://github.com/cahirwpz/mimiker/pull/962#issuecomment-766773952,"do_fstat was using fdtab_get_fd with flag FF_RED for no reason.
needed by #945",@cahirwpz you need that for stdout flush in login. See __smakebuf function in libc.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,963,2021-01-25T12:30:00Z,2021-01-25T13:30:08Z,2021-02-02T17:13:10Z,CLOSED,False,1,1,1,https://github.com/j-piecuch,Allow fstat() on file descriptors without read access.,1,[],https://github.com/cahirwpz/mimiker/pull/963,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/963,"Since we don't have read access to stdout, fstat() on STDOUT_FILENO would fail.
As a consequence, __swhatbuf() concludes that stdout isn't a tty, and we set full buffering instead of line buffering on stdout.
The intended behavior is that stdout is line buffered by default if it's a tty.","Since we don't have read access to stdout, fstat() on STDOUT_FILENO would fail.
As a consequence, __swhatbuf() concludes that stdout isn't a tty, and we set full buffering instead of line buffering on stdout.
The intended behavior is that stdout is line buffered by default if it's a tty.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,963,2021-01-25T12:30:00Z,2021-01-25T13:30:08Z,2021-02-02T17:13:10Z,CLOSED,False,1,1,1,https://github.com/j-piecuch,Allow fstat() on file descriptors without read access.,1,[],https://github.com/cahirwpz/mimiker/pull/963,https://github.com/pj1031999,2,https://github.com/cahirwpz/mimiker/pull/963#issuecomment-766784594,"Since we don't have read access to stdout, fstat() on STDOUT_FILENO would fail.
As a consequence, __swhatbuf() concludes that stdout isn't a tty, and we set full buffering instead of line buffering on stdout.
The intended behavior is that stdout is line buffered by default if it's a tty.",Please see #962.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,963,2021-01-25T12:30:00Z,2021-01-25T13:30:08Z,2021-02-02T17:13:10Z,CLOSED,False,1,1,1,https://github.com/j-piecuch,Allow fstat() on file descriptors without read access.,1,[],https://github.com/cahirwpz/mimiker/pull/963,https://github.com/j-piecuch,3,https://github.com/cahirwpz/mimiker/pull/963#issuecomment-766817064,"Since we don't have read access to stdout, fstat() on STDOUT_FILENO would fail.
As a consequence, __swhatbuf() concludes that stdout isn't a tty, and we set full buffering instead of line buffering on stdout.
The intended behavior is that stdout is line buffered by default if it's a tty.","Please see #962.

Oops, my bad 😄",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,964,2021-01-25T14:44:31Z,2021-02-01T15:29:38Z,2021-02-01T15:29:38Z,CLOSED,False,9,0,1,https://github.com/bkjg,vm_segment_destroy_range: fix offsets in pages,3,['review'],https://github.com/cahirwpz/mimiker/pull/964,https://github.com/bkjg,1,https://github.com/cahirwpz/mimiker/pull/964,In vm_segment_destroy_range we change the start of the segment given as an argument. Unfortunately we don't change the offsets in pages in vm_segment_t::object. This PR fix it.,In vm_segment_destroy_range we change the start of the segment given as an argument. Unfortunately we don't change the offsets in pages in vm_segment_t::object. This PR fix it.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,964,2021-01-25T14:44:31Z,2021-02-01T15:29:38Z,2021-02-01T15:29:38Z,CLOSED,False,9,0,1,https://github.com/bkjg,vm_segment_destroy_range: fix offsets in pages,3,['review'],https://github.com/cahirwpz/mimiker/pull/964,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/964#issuecomment-769670753,In vm_segment_destroy_range we change the start of the segment given as an argument. Unfortunately we don't change the offsets in pages in vm_segment_t::object. This PR fix it.,"IIUC pg->offset means an offset from start of mapped object. In case of a memory-mapped file decreasing pointer would mean that we truncated some prefix of the file. Let's use analogy of a window. VM segment is a window through which we see some memory. If P pointer (located within a segment) references to M before truncation and P is still within the segment after segment, it must still point to M.
Am I missing something? Please note that vm_map_entry has offset field.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,965,2021-01-26T11:59:26Z,,2021-02-01T15:57:24Z,OPEN,False,62,28,3,https://github.com/j-piecuch,Add per-test timeouts using callouts.,4,['blocked'],https://github.com/cahirwpz/mimiker/pull/965,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/965,"This PR adds a per-test timeout that makes sure that no single test takes more than a specified time. This will allow us to detect deadlocks faster, and increase the timeout for the whole test run, as we have recently been hitting the time limit even without apparent deadlocks, probably due to CircleCI throttling the CPU.

Add a per test-timeout using callouts
Increase the whole test run timeout to 60 seconds","This PR adds a per-test timeout that makes sure that no single test takes more than a specified time. This will allow us to detect deadlocks faster, and increase the timeout for the whole test run, as we have recently been hitting the time limit even without apparent deadlocks, probably due to CircleCI throttling the CPU.

Add a per test-timeout using callouts
Increase the whole test run timeout to 60 seconds",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,966,2021-01-26T12:24:02Z,2021-01-28T08:07:00Z,2021-02-02T17:12:38Z,MERGED,True,12,3,2,https://github.com/pj1031999,AArch64: set user-space return address in setcontext,5,"['accepted', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/966,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/966,"Copy correct data in longjmp.
Set return address for user-space in do_setcontext.
Fix most tests from #932.","Copy correct data in longjmp.
Set return address for user-space in do_setcontext.
Fix most tests from #932.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,967,2021-01-26T17:41:42Z,2021-01-27T14:47:48Z,2021-02-09T06:54:15Z,MERGED,True,135,141,6,https://github.com/cahirwpz,Migrate from CircleCI to GitHub Actions!,19,['accepted'],https://github.com/cahirwpz/mimiker/pull/967,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/967,Since we're regularly running out of time on CircleCI it's high time to move to GH Actions but provide our own runner.,Since we're regularly running out of time on CircleCI it's high time to move to GH Actions but provide our own runner.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,969,2021-01-27T21:56:33Z,2021-01-28T15:41:08Z,2021-02-02T17:12:28Z,MERGED,True,2,1,1,https://github.com/xThaid,fchdir: release old cwd vnode,4,['accepted'],https://github.com/cahirwpz/mimiker/pull/969,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/969,"We should drop the reference to the old cwd and acquire the reference to the new one while changing directory.
There was a bug causing that the new cwd was released twice.","We should drop the reference to the old cwd and acquire the reference to the new one while changing directory.
There was a bug causing that the new cwd was released twice.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,969,2021-01-27T21:56:33Z,2021-01-28T15:41:08Z,2021-02-02T17:12:28Z,MERGED,True,2,1,1,https://github.com/xThaid,fchdir: release old cwd vnode,4,['accepted'],https://github.com/cahirwpz/mimiker/pull/969,https://github.com/xThaid,2,https://github.com/cahirwpz/mimiker/pull/969#issuecomment-769168386,"We should drop the reference to the old cwd and acquire the reference to the new one while changing directory.
There was a bug causing that the new cwd was released twice.",That's right. It wasn't correct.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,970,2021-01-28T15:19:33Z,2021-02-02T16:44:13Z,2021-02-02T16:44:30Z,MERGED,True,128,18,8,https://github.com/xThaid,"tmpfs: Add file access, modify and change times",9,['accepted'],https://github.com/cahirwpz/mimiker/pull/970,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/970,"Since we have a reliable source of time, we can add support for access, modify, change times.","Since we have a reliable source of time, we can add support for access, modify, change times.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,971,2021-01-29T14:58:53Z,2021-02-01T14:37:06Z,2021-02-02T17:12:23Z,MERGED,True,91,154,8,https://github.com/cahirwpz,Fully control test-run using gdb.,9,['accepted'],https://github.com/cahirwpz/mimiker/pull/971,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/971,It's high time for test run not to depend on output from kernel console but rather on gdb behaviour.,It's high time for test run not to depend on output from kernel console but rather on gdb behaviour.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,972,2021-01-30T18:14:44Z,2021-01-31T09:33:24Z,2021-01-31T09:33:24Z,MERGED,True,6,1,2,https://github.com/xThaid,syscalls: add lchown syscall,1,[],https://github.com/cahirwpz/mimiker/pull/972,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/972,"I saw it was waiting in the missing.S file, so I decided to implement it, since it is just a wrapper of the existing system call.","I saw it was waiting in the missing.S file, so I decided to implement it, since it is just a wrapper of the existing system call.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,973,2021-01-31T11:44:10Z,2021-02-14T12:51:06Z,2021-02-14T12:51:06Z,MERGED,True,495,1,5,https://github.com/j-piecuch,Port `script` program from NetBSD,110,['accepted'],https://github.com/cahirwpz/mimiker/pull/973,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/973,"The script program records the output of a shell session to a file for later viewing.
Summary of all changes to the original program I recall having made:

Replaced _PATH_BSHELL with _PATH_KSHELL in doshell()","The script program records the output of a shell session to a file for later viewing.
Summary of all changes to the original program I recall having made:

Replaced _PATH_BSHELL with _PATH_KSHELL in doshell()",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,974,2021-01-31T15:09:41Z,2021-03-08T17:58:31Z,2021-03-08T17:58:31Z,MERGED,True,236,4,9,https://github.com/franciscozdo,Dev procstat,25,['accepted'],https://github.com/cahirwpz/mimiker/pull/974,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/974,Simple utility to list running processes,Simple utility to list running processes,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,974,2021-01-31T15:09:41Z,2021-03-08T17:58:31Z,2021-03-08T17:58:31Z,MERGED,True,236,4,9,https://github.com/franciscozdo,Dev procstat,25,['accepted'],https://github.com/cahirwpz/mimiker/pull/974,https://github.com/pj1031999,2,https://github.com/cahirwpz/mimiker/pull/974#issuecomment-788690894,Simple utility to list running processes,@cahirwpz kstrndup was added after my approval ;),True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,974,2021-01-31T15:09:41Z,2021-03-08T17:58:31Z,2021-03-08T17:58:31Z,MERGED,True,236,4,9,https://github.com/franciscozdo,Dev procstat,25,['accepted'],https://github.com/cahirwpz/mimiker/pull/974,https://github.com/pj1031999,3,https://github.com/cahirwpz/mimiker/pull/974#issuecomment-788935055,Simple utility to list running processes,"Running ps multiple times causes kernel panic.
backtrace from KASAN build:
#0  halt () at /home/pjas/mimiker-procstat/sys/kern/klog.c:154
#1  0xc0146768 in klog_panic (origin=origin@entry=KL_VM, file=file@entry=0xc01693a0 ""/home/pjas/mimiker-procstat/sys/mips/trap.c"", line=line@entry=0x7b, format=format@entry=0xc01695e0 ""KERNEL PANIC!!!"", arg1=arg1@
entry=0x0, arg2=arg2@entry=0x0, arg3=arg3@entry=0x0, arg4=arg4@entry=0x0, arg5=arg5@entry=0x0, arg6=arg6@entry=0x0) at /home/pjas/mimiker-procstat/sys/kern/klog.c:166
#2  0xc010281c in kernel_oops (ctx=ctx@entry=0xc0035b7c) at /home/pjas/mimiker-procstat/sys/mips/trap.c:123
#3  0xc0102bcc in kern_trap_handler (ctx=ctx@entry=0xc0035b7c) at /home/pjas/mimiker-procstat/sys/mips/trap.c:251
#4  0xc0103174 in mips_exc_handler (ctx=0xc0035b7c) at /home/pjas/mimiker-procstat/sys/mips/trap.c:274
#5  0x801008e4 in kern_exc_enter () at /home/pjas/mimiker-procstat/sys/mips/ebase.S:429
#6  0xc01072ec in pmap_delete (pmap=0xc0019178) at /home/pjas/mimiker-procstat/sys/mips/pmap.c:534
#7  0xc0117284 in vm_map_delete (map=0xc0018140) at /home/pjas/mimiker-procstat/sys/kern/vm_map.c:194
#8  0xc013dda8 in proc_exit (exitstatus=exitstatus@entry=0x0) at /home/pjas/mimiker-procstat/sys/kern/proc.c:582
#9  0xc0132364 in sys_exit (p=0xc001b4f0, args=<optimized out>, res=<optimized out>) at /home/pjas/mimiker-procstat/sys/kern/syscalls.c:46
#10 0xc0102d2c in syscall_handler (ctx=ctx@entry=0xc0035ed8, result=result@entry=0xc0035e60) at /home/pjas/mimiker-procstat/sys/mips/trap.c:59
#11 0xc0102fa4 in user_trap_handler (ctx=ctx@entry=0xc0035ed8) at /home/pjas/mimiker-procstat/sys/mips/trap.c:202
#12 0xc01030ec in mips_exc_handler (ctx=0xc0035ed8) at /home/pjas/mimiker-procstat/sys/mips/trap.c:272
#13 <signal handler called>
#14 0x004331f0 in _exit () at /home/pjas/mimiker-procstat/lib/libc/sys/syscalls.S:3
#15 0x00437a00 in exit (status=0x0) at /home/pjas/mimiker-procstat/lib/libc/stdlib/exit.c:44
#16 0x0041e804 in quitenv () at /home/pjas/mimiker-procstat/bin/ksh/main.c:747
#17 0x0041e92c in unwind (i=i@entry=0x4) at /home/pjas/mimiker-procstat/bin/ksh/main.c:681
#18 0x0041eb00 in shell (s=s@entry=0x8001088, toplevel=toplevel@entry=0x1) at /home/pjas/mimiker-procstat/bin/ksh/main.c:586
#19 0x0041f824 in main (argc=<optimized out>, argc@entry=0x2, argv=argv@entry=0x7f7fffb4) at /home/pjas/mimiker-procstat/bin/ksh/main.c:447
#20 0x004331e0 in ___start (argc=0x2, argv=0x7f7fffb4, envp=<optimized out>) at /home/pjas/mimiker-procstat/lib/csu/crt0-common.c:18
#21 0x00000000 in ?? ()

kthread:
+-------+--------------------+--------------+----------+-------------------+
|  Id   |        Name        |    State     | Priority |   Waiting Point   |
+=======+====================+==============+==========+===================+
|     0 |        idle-thread |    TDS_READY |      255 | null              |
|     1 |            callout | TDS_SLEEPING |       32 | kern/callout.c:57 |
|     2 |               init | TDS_SLEEPING |      255 | 0xc0174dc0        |
|     3 | ns16550-tty-worker | TDS_SLEEPING |        3 | drv/ns16550.c:167 |
|     4 |               init | TDS_SLEEPING |      255 | 0xc0174dc0        |
| (*) 5 |               init |  TDS_RUNNING |      255 | null              |
|     6 |               init | TDS_SLEEPING |      255 | 0xc0174dc0        |
|     7 |               init | TDS_SLEEPING |      255 | 0xc0174dc0        |
|     8 |               init | TDS_SLEEPING |      255 | 0xc0174dc0        |
|     9 |               init | TDS_SLEEPING |      255 | 0xc0174dc0        |
|    10 |               init |    TDS_READY |      255 | null              |
|    11 |               init |    TDS_READY |      255 | null              |
|    12 |               init |    TDS_READY |      255 | null              |
|    13 |               init |    TDS_READY |      255 | null              |
|    14 |               init |    TDS_READY |      255 | null              |
|    15 |               init |     TDS_DEAD |      255 | null              |
|    16 |               init |    TDS_READY |      255 | null              |
|    17 |               init |    TDS_READY |      255 | null              |
|    18 |               init |    TDS_READY |      255 | null              |
|    19 |               init |    TDS_READY |      255 | null              |
|    20 |               init |    TDS_READY |      255 | null              |
+-------+--------------------+--------------+----------+-------------------+

kproc:
+-----+----------------------------------------+-----------+
| Pid |                  Tid                   |   State   |
+=====+========================================+===========+
|   0 | thread{idle-thread/0}                  | PS_NORMAL |
|   1 | thread{init/2}                         | PS_NORMAL |
|   2 | thread{init/4}                         | PS_NORMAL |
|   3 | thread{[bad-ptr 0x38]/[bad-ptr: 0x3c]} | PS_DYING  |
|   4 | thread{init/6}                         | PS_NORMAL |
|   5 | thread{init/7}                         | PS_NORMAL |
|   6 | thread{init/8}                         | PS_NORMAL |
|   7 | thread{init/9}                         | PS_NORMAL |
|   8 | thread{init/10}                        | PS_NORMAL |
|   9 | thread{init/11}                        | PS_NORMAL |
|  10 | thread{init/12}                        | PS_NORMAL |
|  11 | thread{init/13}                        | PS_NORMAL |
|  12 | thread{init/14}                        | PS_NORMAL |
|  14 | thread{init/16}                        | PS_NORMAL |
|  15 | thread{init/17}                        | PS_NORMAL |
|  16 | thread{init/18}                        | PS_NORMAL |
|  17 | thread{init/19}                        | PS_NORMAL |
|  18 | thread{init/20}                        | PS_NORMAL |
+-----+----------------------------------------+-----------+",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,974,2021-01-31T15:09:41Z,2021-03-08T17:58:31Z,2021-03-08T17:58:31Z,MERGED,True,236,4,9,https://github.com/franciscozdo,Dev procstat,25,['accepted'],https://github.com/cahirwpz/mimiker/pull/974,https://github.com/franciscozdo,4,https://github.com/cahirwpz/mimiker/pull/974#issuecomment-789008936,Simple utility to list running processes,@pj1031999 I got almost identical backtrace in master for command ls & ls & ...,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,974,2021-01-31T15:09:41Z,2021-03-08T17:58:31Z,2021-03-08T17:58:31Z,MERGED,True,236,4,9,https://github.com/franciscozdo,Dev procstat,25,['accepted'],https://github.com/cahirwpz/mimiker/pull/974,https://github.com/j-piecuch,5,https://github.com/cahirwpz/mimiker/pull/974#issuecomment-789065072,Simple utility to list running processes,The crashes are most likely caused by a kernel stack overflow. I cannot reproduce these on a KASAN build with kernel stack size = 2*PAGESIZE.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,975,2021-01-31T22:52:47Z,2021-03-14T08:11:43Z,2021-03-14T08:11:43Z,MERGED,True,457,0,6,https://github.com/MichalBlk,Introduce basic USB related header files.,3,['accepted'],https://github.com/cahirwpz/mimiker/pull/975,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/975,"The presented header files are required by #935.
Presented changes (regarding original files):

scsi.h:

length and addr fields aren't expressed in byte units (i.e. instead of uint8_t addr[4] we have uint32_t addr). This simplifies little endian <-> big endian conversions.
I've added the SID_FORMAT() macro (used in drive identification).


uhci.h: this is simply a subset of the original file (with a few stylistic changes).
uhcireg.h:

I've added PCI_USB_CLASSCODE and PCI_USB_SUBCLASSCODE.
I've added  UHCI_PORTSC() instead of UHCI_PORTSC{1,2} (The UHCI specification allows more than two root hub ports).
I've added UHCI_PORTSC_ONE which is used in root hub port detection (I don't assume any specific number of root hub ports).


umass.h: this file doesn't have a strict counterpart in the FreeBSD source tree. Contained definitions were extracted form the FreeBSD's sys/dev/usb/storage/umass.c file. This is in order to make the umass.c driver thinner and to contain some definitions required by the USB module (UR_BBB_RESET and UR_BBB_GET_MAX_LUN).
usbhid.h: this is simply a subset of the original file (without the HID descriptor parsing definitions (we assume the boot protocol is supported)).
usb.h:

I've added the UV_MAKE() macro (they use some counterpart defined elsewhere).
I've added the US_DATASIZE constant (they use a magic number).
I've added the US_ENG_LID and US_ENG_STR constants.
I've added the US_TRANSFER_TYPE() macro.","The presented header files are required by #935.
Presented changes (regarding original files):

scsi.h:

length and addr fields aren't expressed in byte units (i.e. instead of uint8_t addr[4] we have uint32_t addr). This simplifies little endian <-> big endian conversions.
I've added the SID_FORMAT() macro (used in drive identification).


uhci.h: this is simply a subset of the original file (with a few stylistic changes).
uhcireg.h:

I've added PCI_USB_CLASSCODE and PCI_USB_SUBCLASSCODE.
I've added  UHCI_PORTSC() instead of UHCI_PORTSC{1,2} (The UHCI specification allows more than two root hub ports).
I've added UHCI_PORTSC_ONE which is used in root hub port detection (I don't assume any specific number of root hub ports).


umass.h: this file doesn't have a strict counterpart in the FreeBSD source tree. Contained definitions were extracted form the FreeBSD's sys/dev/usb/storage/umass.c file. This is in order to make the umass.c driver thinner and to contain some definitions required by the USB module (UR_BBB_RESET and UR_BBB_GET_MAX_LUN).
usbhid.h: this is simply a subset of the original file (without the HID descriptor parsing definitions (we assume the boot protocol is supported)).
usb.h:

I've added the UV_MAKE() macro (they use some counterpart defined elsewhere).
I've added the US_DATASIZE constant (they use a magic number).
I've added the US_ENG_LID and US_ENG_STR constants.
I've added the US_TRANSFER_TYPE() macro.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,975,2021-01-31T22:52:47Z,2021-03-14T08:11:43Z,2021-03-14T08:11:43Z,MERGED,True,457,0,6,https://github.com/MichalBlk,Introduce basic USB related header files.,3,['accepted'],https://github.com/cahirwpz/mimiker/pull/975,https://github.com/MichalBlk,2,https://github.com/cahirwpz/mimiker/pull/975#issuecomment-781999017,"The presented header files are required by #935.
Presented changes (regarding original files):

scsi.h:

length and addr fields aren't expressed in byte units (i.e. instead of uint8_t addr[4] we have uint32_t addr). This simplifies little endian <-> big endian conversions.
I've added the SID_FORMAT() macro (used in drive identification).


uhci.h: this is simply a subset of the original file (with a few stylistic changes).
uhcireg.h:

I've added PCI_USB_CLASSCODE and PCI_USB_SUBCLASSCODE.
I've added  UHCI_PORTSC() instead of UHCI_PORTSC{1,2} (The UHCI specification allows more than two root hub ports).
I've added UHCI_PORTSC_ONE which is used in root hub port detection (I don't assume any specific number of root hub ports).


umass.h: this file doesn't have a strict counterpart in the FreeBSD source tree. Contained definitions were extracted form the FreeBSD's sys/dev/usb/storage/umass.c file. This is in order to make the umass.c driver thinner and to contain some definitions required by the USB module (UR_BBB_RESET and UR_BBB_GET_MAX_LUN).
usbhid.h: this is simply a subset of the original file (without the HID descriptor parsing definitions (we assume the boot protocol is supported)).
usb.h:

I've added the UV_MAKE() macro (they use some counterpart defined elsewhere).
I've added the US_DATASIZE constant (they use a magic number).
I've added the US_ENG_LID and US_ENG_STR constants.
I've added the US_TRANSFER_TYPE() macro.",I've described the presented changes to the original files (see the PR's description).,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,976,2021-01-31T23:06:12Z,2021-02-02T17:11:53Z,2021-02-02T17:11:53Z,MERGED,True,7,1,2,https://github.com/MichalBlk,Read subclass code and programming interface fields from PCI configuration space.,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/976,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/976,Introduce subclass_code and progif in pci_device.,Introduce subclass_code and progif in pci_device.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,977,2021-01-31T23:11:16Z,2021-02-01T13:52:39Z,2021-02-01T13:52:39Z,MERGED,True,10,0,2,https://github.com/MichalBlk,Introduce ringbuf_getnb.,2,['accepted'],https://github.com/cahirwpz/mimiker/pull/977,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/977,This function is required by #935.,This function is required by #935.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,978,2021-02-01T01:40:40Z,2021-02-01T13:16:56Z,2021-02-01T13:16:56Z,MERGED,True,11,0,3,https://github.com/wiklam,Get program counter from context,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/978,https://github.com/wiklam,1,https://github.com/cahirwpz/mimiker/pull/978,For #863 and  #979,For #863 and  #979,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,979,2021-02-01T02:19:14Z,2021-03-26T14:56:32Z,2021-08-15T01:03:52Z,MERGED,True,267,2,11,https://github.com/wiklam,Statclock and kgprof structures initialization,76,['accepted'],https://github.com/cahirwpz/mimiker/pull/979,https://github.com/wiklam,1,https://github.com/cahirwpz/mimiker/pull/979,"For #863
Kgmon and KGPROF is just for mips at the moment.
gmon.h is entirely copied from NetBSD with adjustments for our needs,","For #863
Kgmon and KGPROF is just for mips at the moment.
gmon.h is entirely copied from NetBSD with adjustments for our needs,",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,979,2021-02-01T02:19:14Z,2021-03-26T14:56:32Z,2021-08-15T01:03:52Z,MERGED,True,267,2,11,https://github.com/wiklam,Statclock and kgprof structures initialization,76,['accepted'],https://github.com/cahirwpz/mimiker/pull/979,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/979#issuecomment-771643838,"For #863
Kgmon and KGPROF is just for mips at the moment.
gmon.h is entirely copied from NetBSD with adjustments for our needs,",Please investigate interaction between kgmon and behavior of MIPS (Clang) test run.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,979,2021-02-01T02:19:14Z,2021-03-26T14:56:32Z,2021-08-15T01:03:52Z,MERGED,True,267,2,11,https://github.com/wiklam,Statclock and kgprof structures initialization,76,['accepted'],https://github.com/cahirwpz/mimiker/pull/979,https://github.com/j-piecuch,3,https://github.com/cahirwpz/mimiker/pull/979#issuecomment-799795790,"For #863
Kgmon and KGPROF is just for mips at the moment.
gmon.h is entirely copied from NetBSD with adjustments for our needs,","I found that if I don't gather profiling data from the idle thread (i.e. return immediately from statclock() if td == PCPU_GET(idle_thread)), the data is a bit less skewed towards cpu_intr_enable():
index % time    self  children    called     name
                                                 <spontaneous>
[1]     22.6    1.38    0.00                 cpu_intr_enable [1]
-----------------------------------------------
                                                 <spontaneous>
[2]     21.3    1.30    0.00                 bzero [2]
-----------------------------------------------
                                                 <spontaneous>
[3]      7.8    0.48    0.00                 bcopy [3]
-----------------------------------------------
                                                 <spontaneous>
[4]      4.9    0.30    0.00                 test_kmem [4]
-----------------------------------------------
                                                 <spontaneous>
[5]      4.0    0.25    0.00                 mtx_owned [5]
-----------------------------------------------
                                                 <spontaneous>
[6]      3.4    0.21    0.00                 mtx_unlock [6]
-----------------------------------------------
                                                 <spontaneous>
[7]      3.4    0.21    0.00                 _mtx_lock [7]
-----------------------------------------------
                                                 <spontaneous>
[8]      3.3    0.20    0.00                 memcpy [8]
-----------------------------------------------",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,980,2021-02-01T10:00:28Z,2021-03-14T09:44:31Z,2021-03-14T09:44:31Z,MERGED,True,6584,1,18,https://github.com/j-piecuch,Port libterminfo from NetBSD,29,['accepted'],https://github.com/cahirwpz/mimiker/pull/980,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/980,"Summary of changes made to the original NetBSD sources:

In setupterm.c, replace #include <curses.h> with #include <termios.h>
In termcap.c, remove unnecessary casts of the first argument in calls to _t_{flag,num,str}hash()
The genhash and genthash scripts now use gperf instead of nbperf. Since gperf and nbperf differ quite a bit in terms of options and output, the scripts had to be changed significantly.","Summary of changes made to the original NetBSD sources:

In setupterm.c, replace #include <curses.h> with #include <termios.h>
In termcap.c, remove unnecessary casts of the first argument in calls to _t_{flag,num,str}hash()
The genhash and genthash scripts now use gperf instead of nbperf. Since gperf and nbperf differ quite a bit in terms of options and output, the scripts had to be changed significantly.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,981,2021-02-01T12:11:27Z,2021-02-05T13:17:59Z,2021-02-05T13:17:59Z,CLOSED,False,108,42,4,https://github.com/cahirwpz,Make sure PIT timer give sane results.,24,['WiP'],https://github.com/cahirwpz/mimiker/pull/981,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/981,"Since QEMU does not execute constant number of instructions per second, we can't use record/replay function in normal kernel runs.
Make sure PIT gettime does not use any expensive operations.","Since QEMU does not execute constant number of instructions per second, we can't use record/replay function in normal kernel runs.
Make sure PIT gettime does not use any expensive operations.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,982,2021-02-01T15:01:14Z,2021-02-16T20:43:38Z,2021-02-16T20:43:43Z,MERGED,True,24,0,2,https://github.com/pj1031999,AArch64: run tests in CI.,5,"['accepted', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/982,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/982,Enable tests for AArch64.,Enable tests for AArch64.,True,"{'HOORAY': ['https://github.com/xThaid', 'https://github.com/jpszczolowski', 'https://github.com/cahirwpz', 'https://github.com/wiklam']}"
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,982,2021-02-01T15:01:14Z,2021-02-16T20:43:38Z,2021-02-16T20:43:43Z,MERGED,True,24,0,2,https://github.com/pj1031999,AArch64: run tests in CI.,5,"['accepted', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/982,https://github.com/jpszczolowski,2,https://github.com/cahirwpz/mimiker/pull/982#issuecomment-771117149,Enable tests for AArch64.,Wow!,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,983,2021-02-01T17:49:19Z,2021-02-01T21:25:37Z,2021-02-01T21:25:46Z,MERGED,True,20,3,1,https://github.com/cahirwpz,Fix unwanted interrupt recursion.,2,['accepted'],https://github.com/cahirwpz/mimiker/pull/983,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/983,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,984,2021-02-01T22:07:27Z,2021-02-06T06:00:05Z,2021-02-06T06:00:05Z,MERGED,True,125,3,11,https://github.com/xThaid,Add utimens-like syscalls,11,['accepted'],https://github.com/cahirwpz/mimiker/pull/984,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/984,"This PR adds utimens(2) system call and its variations.
Blocked by #970","This PR adds utimens(2) system call and its variations.
Blocked by #970",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,984,2021-02-01T22:07:27Z,2021-02-06T06:00:05Z,2021-02-06T06:00:05Z,MERGED,True,125,3,11,https://github.com/xThaid,Add utimens-like syscalls,11,['accepted'],https://github.com/cahirwpz/mimiker/pull/984,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/984#issuecomment-771778053,"This PR adds utimens(2) system call and its variations.
Blocked by #970",Please resolve conflicts.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,985,2021-02-02T08:00:53Z,2021-02-02T16:29:18Z,2021-02-02T16:29:23Z,MERGED,True,64,44,9,https://github.com/cahirwpz,Improve kernel crash post-mortem debugging experience.,21,[],https://github.com/cahirwpz/mimiker/pull/985,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/985,"fix missing sleepq_lookup
 dump backtraces from all threads
 fix klog table width issues
 report failed test name
 make sure klog output is sane
 backtrace through userspace binaries as well
 maybe use record/replay function and dump replay log into artifacts ?","fix missing sleepq_lookup
 dump backtraces from all threads
 fix klog table width issues
 report failed test name
 make sure klog output is sane
 backtrace through userspace binaries as well
 maybe use record/replay function and dump replay log into artifacts ?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,986,2021-02-03T16:50:41Z,2021-02-03T20:49:21Z,2021-02-03T20:49:25Z,MERGED,True,300,355,4,https://github.com/cahirwpz,Fix run_tests.py on test run timeout.,3,[],https://github.com/cahirwpz/mimiker/pull/986,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/986,"launch takes care of running single test-run to the end. It returns 0 if a run was successful, 1 if it failed, 2 if timeout was reached, and 3 if SIGINT was received. When test-run fails or timeouts a post-mortem from gdb is printed.
run_tests.py simply runs launch with different random seed values and observes exit codes from successive test runs.","launch takes care of running single test-run to the end. It returns 0 if a run was successful, 1 if it failed, 2 if timeout was reached, and 3 if SIGINT was received. When test-run fails or timeouts a post-mortem from gdb is printed.
run_tests.py simply runs launch with different random seed values and observes exit codes from successive test runs.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,987,2021-02-04T18:03:42Z,2021-03-22T06:23:53Z,2021-03-22T06:23:53Z,MERGED,True,63,35,1,https://github.com/wiklam,Removing modulo operation from PIT.,27,['accepted'],https://github.com/cahirwpz/mimiker/pull/987,https://github.com/wiklam,1,https://github.com/cahirwpz/mimiker/pull/987,"Modulo operation is too expensive, this is why we want to get rid of it.
I also renamed some variables to make them more descriptive.","Modulo operation is too expensive, this is why we want to get rid of it.
I also renamed some variables to make them more descriptive.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,987,2021-02-04T18:03:42Z,2021-03-22T06:23:53Z,2021-03-22T06:23:53Z,MERGED,True,63,35,1,https://github.com/wiklam,Removing modulo operation from PIT.,27,['accepted'],https://github.com/cahirwpz/mimiker/pull/987,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/987#issuecomment-775056631,"Modulo operation is too expensive, this is why we want to get rid of it.
I also renamed some variables to make them more descriptive.","Since we cannot read status of PIT interrupt (i.e. is it pending) we cannot reliably detect timer overflow when interrupts are disabled.
Please refer to FreeBSD's i8254_get_timecount.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,987,2021-02-04T18:03:42Z,2021-03-22T06:23:53Z,2021-03-22T06:23:53Z,MERGED,True,63,35,1,https://github.com/wiklam,Removing modulo operation from PIT.,27,['accepted'],https://github.com/cahirwpz/mimiker/pull/987,https://github.com/wiklam,3,https://github.com/cahirwpz/mimiker/pull/987#issuecomment-799888372,"Modulo operation is too expensive, this is why we want to get rid of it.
I also renamed some variables to make them more descriptive.","I think you messed up pit::overflow semantics. See my comments.
Also why you handle overflow out of pit_update_time (and not always after calling this function)? I think the code will be easier and cleaner (you can completely remove overflowed flag from pit_state). If I am wrong please show me some example which explains why you do it in that way.

Maybe it will explain something, the main problem with PIT is that its counter count from N to 0 and cause an interrupt, N is the number of ticks of an interrupt period, which we set at the beginning for the timer. Sometimes we turn off interrupts and we can miss almost the whole period and this is why we introduce the overflowed flag, which helps us to keep track of such situations (sometimes using gettime allow us to catch that situation).
Ok, maybe you are asking yourself why we just don't check if the value read by the counter is smaller than the previous one to detect overflow, it is ok but we can have a situation when we access the timer in different periods but with ascending value and we will not detect it with such way.
Maybe it is not obvious, but it is probably the best option at the moment. Please ask me if you still have some doubts, cause understanding it took me a while.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,988,2021-02-04T20:50:41Z,2021-02-05T13:24:56Z,2021-02-05T13:24:56Z,MERGED,True,15,1,2,https://github.com/komik0,rtl8139 qemu config,12,['accepted'],https://github.com/cahirwpz/mimiker/pull/988,https://github.com/komik0,1,https://github.com/cahirwpz/mimiker/pull/988,this PR is clone of #889 destroyed by #986 and others,this PR is clone of #889 destroyed by #986 and others,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,989,2021-02-04T21:45:49Z,2021-02-05T13:14:32Z,2021-02-05T13:14:35Z,MERGED,True,191,407,58,https://github.com/cahirwpz,Log all diagnostic messages through klog().,13,[],https://github.com/cahirwpz/mimiker/pull/989,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/989,"Replace all kprintf() uses with klog().
Rewrite panic().","Replace all kprintf() uses with klog().
Rewrite panic().",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,990,2021-02-10T08:29:39Z,,2021-05-21T12:22:34Z,OPEN,False,17526,3,79,https://github.com/cahirwpz,Import programs from NetBSD,83,"['WiP', 'proposal']",https://github.com/cahirwpz/mimiker/pull/990,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/990,"This is a staging area for importing various tools & utilities from NetBSD.
New candidates for merge with master should first land in netbsd-programs branch.","This is a staging area for importing various tools & utilities from NetBSD.
New candidates for merge with master should first land in netbsd-programs branch.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,991,2021-02-10T16:17:09Z,2021-02-10T17:29:14Z,2021-02-10T17:29:18Z,MERGED,True,93,34,3,https://github.com/cahirwpz,Allocate list of physical pages.,3,[],https://github.com/cahirwpz/mimiker/pull/991,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/991,This is a step towards contiguous physical page allocation.,This is a step towards contiguous physical page allocation.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,992,2021-02-12T09:46:45Z,2021-02-12T11:21:44Z,2021-02-12T11:21:47Z,MERGED,True,72,21,6,https://github.com/cahirwpz,kmem: allocate contiguous physical memory,4,[],https://github.com/cahirwpz/mimiker/pull/992,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/992,kmem_alloc_contig is mainly geared toward device driver programmers. It's main use case is to allocate memory for DMA transfers.,kmem_alloc_contig is mainly geared toward device driver programmers. It's main use case is to allocate memory for DMA transfers.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,993,2021-02-12T18:08:12Z,2021-02-14T08:34:59Z,2021-02-14T12:52:02Z,MERGED,True,22,15,9,https://github.com/pj1031999,AArch64: disable interrupts in user_exc_leave.,4,"['accepted', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/993,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/993,Disable interrupts in user_exc_leave.,Disable interrupts in user_exc_leave.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,994,2021-02-12T21:07:49Z,2021-02-16T11:09:58Z,2021-02-16T11:10:01Z,MERGED,True,54,37,3,https://github.com/pj1031999,AArch64: map kernel pages with VM_PROT_NONE without read permissions.,10,"['accepted', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/994,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/994,"Map kernel pages with VM_PROT_NONE without read permissions.
It fixes pmap_kenter and rmbits from #932.","Map kernel pages with VM_PROT_NONE without read permissions.
It fixes pmap_kenter and rmbits from #932.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,995,2021-02-12T21:08:55Z,2021-02-15T16:21:01Z,2021-02-15T16:21:04Z,MERGED,True,18,2,5,https://github.com/pj1031999,AArch64: validate status register in setcontext syscall.,4,"['accepted', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/995,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/995,"Validate status register in setcontext syscall.
It fixes sigaction_with_setjmp, mmap_prot_none, mmap_prot_read from #932.","Validate status register in setcontext syscall.
It fixes sigaction_with_setjmp, mmap_prot_none, mmap_prot_read from #932.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,996,2021-02-13T19:50:49Z,2021-03-16T09:54:54Z,2021-03-16T09:54:54Z,MERGED,True,391,5,9,https://github.com/xThaid,Lock dependency validator,29,['accepted'],https://github.com/cahirwpz/mimiker/pull/996,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/996,"This is my attempt to find and fight with deadlocks.
The basic object the validator operates upon is a 'class' of locks.
A class of locks is a group of locks that are logically the same with respect to locking rules, even if the locks may have multiple instantiations. For example a lock in the vnode struct is one class, while each vnode has its own instantiation of that lock class. Every statically allocated lock has its own class.
Every thread has a list of classes of currently held locks, so when another lock is about to be locked, in the graph of lock dependency I add an edge from the last held lock to the current one.
And all the validator does right now is tracking dependencies between different lock-classes. The dependency graph can be easily read at any moment using gdb and call lockdep_print_graph().
There are a few things that could be done:

Take into account the rest of locks (right now I only care about mutexes)
Search for cycles in runtime - done
Better reporting when a potential deadlock occurs","This is my attempt to find and fight with deadlocks.
The basic object the validator operates upon is a 'class' of locks.
A class of locks is a group of locks that are logically the same with respect to locking rules, even if the locks may have multiple instantiations. For example a lock in the vnode struct is one class, while each vnode has its own instantiation of that lock class. Every statically allocated lock has its own class.
Every thread has a list of classes of currently held locks, so when another lock is about to be locked, in the graph of lock dependency I add an edge from the last held lock to the current one.
And all the validator does right now is tracking dependencies between different lock-classes. The dependency graph can be easily read at any moment using gdb and call lockdep_print_graph().
There are a few things that could be done:

Take into account the rest of locks (right now I only care about mutexes)
Search for cycles in runtime - done
Better reporting when a potential deadlock occurs",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,996,2021-02-13T19:50:49Z,2021-03-16T09:54:54Z,2021-03-16T09:54:54Z,MERGED,True,391,5,9,https://github.com/xThaid,Lock dependency validator,29,['accepted'],https://github.com/cahirwpz/mimiker/pull/996,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/996#issuecomment-778750140,"This is my attempt to find and fight with deadlocks.
The basic object the validator operates upon is a 'class' of locks.
A class of locks is a group of locks that are logically the same with respect to locking rules, even if the locks may have multiple instantiations. For example a lock in the vnode struct is one class, while each vnode has its own instantiation of that lock class. Every statically allocated lock has its own class.
Every thread has a list of classes of currently held locks, so when another lock is about to be locked, in the graph of lock dependency I add an edge from the last held lock to the current one.
And all the validator does right now is tracking dependencies between different lock-classes. The dependency graph can be easily read at any moment using gdb and call lockdep_print_graph().
There are a few things that could be done:

Take into account the rest of locks (right now I only care about mutexes)
Search for cycles in runtime - done
Better reporting when a potential deadlock occurs",Please fix compilation errors under GCC.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,996,2021-02-13T19:50:49Z,2021-03-16T09:54:54Z,2021-03-16T09:54:54Z,MERGED,True,391,5,9,https://github.com/xThaid,Lock dependency validator,29,['accepted'],https://github.com/cahirwpz/mimiker/pull/996,https://github.com/xThaid,3,https://github.com/cahirwpz/mimiker/pull/996#issuecomment-798800036,"This is my attempt to find and fight with deadlocks.
The basic object the validator operates upon is a 'class' of locks.
A class of locks is a group of locks that are logically the same with respect to locking rules, even if the locks may have multiple instantiations. For example a lock in the vnode struct is one class, while each vnode has its own instantiation of that lock class. Every statically allocated lock has its own class.
Every thread has a list of classes of currently held locks, so when another lock is about to be locked, in the graph of lock dependency I add an edge from the last held lock to the current one.
And all the validator does right now is tracking dependencies between different lock-classes. The dependency graph can be easily read at any moment using gdb and call lockdep_print_graph().
There are a few things that could be done:

Take into account the rest of locks (right now I only care about mutexes)
Search for cycles in runtime - done
Better reporting when a potential deadlock occurs","Yeah, the description of the PR is outdated. I've added short comment about usage in the code.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,997,2021-02-13T19:52:21Z,2021-02-14T12:44:24Z,2021-02-14T12:51:57Z,MERGED,True,225,4,12,https://github.com/j-piecuch,Implement readv() and writev() syscalls,9,['accepted'],https://github.com/cahirwpz/mimiker/pull/997,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/997,"Since do_read() and do_write() already accept uio_t * as parameters, implementing these syscalls isn't very difficult. Half of the PR is userspace test code.","Since do_read() and do_write() already accept uio_t * as parameters, implementing these syscalls isn't very difficult. Half of the PR is userspace test code.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,998,2021-02-14T13:34:40Z,2021-03-22T15:27:52Z,2021-03-22T15:27:52Z,CLOSED,False,51,8,4,https://github.com/j-piecuch,Make it possible to roll back uiomove() operations,12,['accepted'],https://github.com/cahirwpz/mimiker/pull/998,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/998,"This PR adds the uio_rollback(uio_t *uio, size_t nbytes) function, which rolls back the state of uio by the specified number of bytes. Right now, the only place where we need it is in pty_write(), which can fail to write a character after reading from the caller-supplied uio structure via uiomove().
It required adding two new fields to the uio_t structure: the total number of bytes (done + remaining) and the sum of the lengths of processed segments. Now uiomove() doesn't need to modify elements of the uio_iov array.
uio_rollback() return EINVAL if the requested number of bytes to roll back is larger than the number of bytes processed.","This PR adds the uio_rollback(uio_t *uio, size_t nbytes) function, which rolls back the state of uio by the specified number of bytes. Right now, the only place where we need it is in pty_write(), which can fail to write a character after reading from the caller-supplied uio structure via uiomove().
It required adding two new fields to the uio_t structure: the total number of bytes (done + remaining) and the sum of the lengths of processed segments. Now uiomove() doesn't need to modify elements of the uio_iov array.
uio_rollback() return EINVAL if the requested number of bytes to roll back is larger than the number of bytes processed.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,998,2021-02-14T13:34:40Z,2021-03-22T15:27:52Z,2021-03-22T15:27:52Z,CLOSED,False,51,8,4,https://github.com/j-piecuch,Make it possible to roll back uiomove() operations,12,['accepted'],https://github.com/cahirwpz/mimiker/pull/998,https://github.com/j-piecuch,2,https://github.com/cahirwpz/mimiker/pull/998#issuecomment-787907853,"This PR adds the uio_rollback(uio_t *uio, size_t nbytes) function, which rolls back the state of uio by the specified number of bytes. Right now, the only place where we need it is in pty_write(), which can fail to write a character after reading from the caller-supplied uio structure via uiomove().
It required adding two new fields to the uio_t structure: the total number of bytes (done + remaining) and the sum of the lengths of processed segments. Now uiomove() doesn't need to modify elements of the uio_iov array.
uio_rollback() return EINVAL if the requested number of bytes to roll back is larger than the number of bytes processed.","I am not sure but I am assuming that the sum of all iov_len for an iov is smaller than the capacity of size_t; instead of holding the offset of the current segment, it would be better to hold the sum of the previous segments and calculate the segment offset from uio_offset? This approach allows us to add some checks for free.

@wiklam uio_offset isn't an offset into the uio (i.e. it doesn't tell us how many bytes have been written). It is an offset into the target object, so it can have a non-zero value at the beginning.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,998,2021-02-14T13:34:40Z,2021-03-22T15:27:52Z,2021-03-22T15:27:52Z,CLOSED,False,51,8,4,https://github.com/j-piecuch,Make it possible to roll back uiomove() operations,12,['accepted'],https://github.com/cahirwpz/mimiker/pull/998,https://github.com/j-piecuch,3,https://github.com/cahirwpz/mimiker/pull/998#issuecomment-804152075,"This PR adds the uio_rollback(uio_t *uio, size_t nbytes) function, which rolls back the state of uio by the specified number of bytes. Right now, the only place where we need it is in pty_write(), which can fail to write a character after reading from the caller-supplied uio structure via uiomove().
It required adding two new fields to the uio_t structure: the total number of bytes (done + remaining) and the sum of the lengths of processed segments. Now uiomove() doesn't need to modify elements of the uio_iov array.
uio_rollback() return EINVAL if the requested number of bytes to roll back is larger than the number of bytes processed.","Closing, as #1053 has been chosen as the best solution",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,999,2021-02-14T15:33:24Z,2021-03-22T06:25:40Z,2021-03-22T06:25:40Z,MERGED,True,9,9,5,https://github.com/xThaid,Make Mimiker compile under GCC11,3,['accepted'],https://github.com/cahirwpz/mimiker/pull/999,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/999,"Apparently GCC11 shows new warnings when compiling the kernel:

Function declarations are inconsistent with definitions (e.g. int pipe(int *); vs int pipe(int fildes[2]))
__progname in getprogname.c must be explicitly set as a weak symbol (strong symbol is defined in crt0-common.c)","Apparently GCC11 shows new warnings when compiling the kernel:

Function declarations are inconsistent with definitions (e.g. int pipe(int *); vs int pipe(int fildes[2]))
__progname in getprogname.c must be explicitly set as a weak symbol (strong symbol is defined in crt0-common.c)",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,999,2021-02-14T15:33:24Z,2021-03-22T06:25:40Z,2021-03-22T06:25:40Z,MERGED,True,9,9,5,https://github.com/xThaid,Make Mimiker compile under GCC11,3,['accepted'],https://github.com/cahirwpz/mimiker/pull/999,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/999#issuecomment-779638674,"Apparently GCC11 shows new warnings when compiling the kernel:

Function declarations are inconsistent with definitions (e.g. int pipe(int *); vs int pipe(int fildes[2]))
__progname in getprogname.c must be explicitly set as a weak symbol (strong symbol is defined in crt0-common.c)",Please first introduce GCC 11 into our build system.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,999,2021-02-14T15:33:24Z,2021-03-22T06:25:40Z,2021-03-22T06:25:40Z,MERGED,True,9,9,5,https://github.com/xThaid,Make Mimiker compile under GCC11,3,['accepted'],https://github.com/cahirwpz/mimiker/pull/999,https://github.com/jpszczolowski,3,https://github.com/cahirwpz/mimiker/pull/999#issuecomment-787456052,"Apparently GCC11 shows new warnings when compiling the kernel:

Function declarations are inconsistent with definitions (e.g. int pipe(int *); vs int pipe(int fildes[2]))
__progname in getprogname.c must be explicitly set as a weak symbol (strong symbol is defined in crt0-common.c)",@xThaid have you tried compiling Mimiker with the GCC's Static Analyzer? It's -fanalyzer flag available from GCC10 onwards.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,999,2021-02-14T15:33:24Z,2021-03-22T06:25:40Z,2021-03-22T06:25:40Z,MERGED,True,9,9,5,https://github.com/xThaid,Make Mimiker compile under GCC11,3,['accepted'],https://github.com/cahirwpz/mimiker/pull/999,https://github.com/xThaid,4,https://github.com/cahirwpz/mimiker/pull/999#issuecomment-787484650,"Apparently GCC11 shows new warnings when compiling the kernel:

Function declarations are inconsistent with definitions (e.g. int pipe(int *); vs int pipe(int fildes[2]))
__progname in getprogname.c must be explicitly set as a weak symbol (strong symbol is defined in crt0-common.c)","I wasn't even aware of that feature. Thanks @jpszczolowski !
So I have compiled the code with that flag and there were of plenty of warnings. Sadly, none of them was useful at all. Some were false positives, because GCC doesn't understand meaning of macros. For example this was detected as potential NULL deference of data:
  unsigned dir = cmd & IOC_DIRMASK;
  void *data = NULL;
  if (dir)
    data = kmalloc(M_TEMP, len, 0);
  if ((dir & IOC_IN) && (error = copyin(u_data, data, len)))
    goto fail;

but dir & IOC_IN != 0 implies cmd & IOC_DIRMASK != 0, so copyin won't be never called with data == NULL.
What is even worse, the static analyzer is bugged (I have a non-official version, so it might be the cause). Here's an excerpt from GCC output:
                         |  276 |   if (pgrp) {
                         |      |   ^~ ~
                         |      |   |  |
                         |      |   |  (29) following 'true' branch (when 'pgrp' is non-NULL)...
                         |      |   (28) ...to here
                         |  277 |     tty_t *tty = pgrp->pg_session->s_tty;
                         |      |     ~~~~~        ~~~~~~~~~~~~~~~~
                         |      |     |                |
                         |      |     |                (31) dereference of NULL 'pgrp'
                         |      |     (30) ...to here
                         |


It firstly assumes that pgrp is not NULL and then states there will be NULL deference on pgrp. It looks like a contradiction.",True,{'THUMBS_UP': ['https://github.com/jpszczolowski']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1000,2021-02-16T10:49:39Z,2021-02-17T16:48:22Z,2021-02-17T19:05:54Z,MERGED,True,70,56,7,https://github.com/cahirwpz,Fix deadlock caused by call to pmap_page_remove in pm_free_from_seg,15,['critical'],https://github.com/cahirwpz/mimiker/pull/1000,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/1000,It should fix #968 issue. I investigated every call to vm_page_free and made sure there's corresponding call to pmap_remove or pmap_kremove.,It should fix #968 issue. I investigated every call to vm_page_free and made sure there's corresponding call to pmap_remove or pmap_kremove.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1000,2021-02-16T10:49:39Z,2021-02-17T16:48:22Z,2021-02-17T19:05:54Z,MERGED,True,70,56,7,https://github.com/cahirwpz,Fix deadlock caused by call to pmap_page_remove in pm_free_from_seg,15,['critical'],https://github.com/cahirwpz/mimiker/pull/1000,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/1000#issuecomment-780084813,It should fix #968 issue. I investigated every call to vm_page_free and made sure there's corresponding call to pmap_remove or pmap_kremove.,"I need to fix a bug spotted by assert, add vm_pagelist_free and fix kva_unmap.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1000,2021-02-16T10:49:39Z,2021-02-17T16:48:22Z,2021-02-17T19:05:54Z,MERGED,True,70,56,7,https://github.com/cahirwpz,Fix deadlock caused by call to pmap_page_remove in pm_free_from_seg,15,['critical'],https://github.com/cahirwpz/mimiker/pull/1000,https://github.com/j-piecuch,3,https://github.com/cahirwpz/mimiker/pull/1000#issuecomment-780087248,It should fix #968 issue. I investigated every call to vm_page_free and made sure there's corresponding call to pmap_remove or pmap_kremove.,"I need to fix a bug spotted by assert, add vm_pagelist_free and fix kva_unmap.

I don't know if this is the bug you had in mind, but we need to move the pmap_delete() to the beginning of vm_map_delete().",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1000,2021-02-16T10:49:39Z,2021-02-17T16:48:22Z,2021-02-17T19:05:54Z,MERGED,True,70,56,7,https://github.com/cahirwpz,Fix deadlock caused by call to pmap_page_remove in pm_free_from_seg,15,['critical'],https://github.com/cahirwpz/mimiker/pull/1000,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/1000#issuecomment-780093406,It should fix #968 issue. I investigated every call to vm_page_free and made sure there's corresponding call to pmap_remove or pmap_kremove.,"@j-piecuch If you have time to fix it right now, please do commit directly to this branch.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1001,2021-02-16T15:58:29Z,2021-02-27T11:45:09Z,2021-02-27T11:45:09Z,MERGED,True,103,85,4,https://github.com/j-piecuch,Simplify control flow in sig_kill(),11,['review'],https://github.com/cahirwpz/mimiker/pull/1001,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/1001,"Add ksiginfo_unqueue() and sigpend_delete_set()
Make SA_CONT a signal flag, as opposed to a signal action
Make all members of sigprop_t have a value with one set bit
Add convenience macros for signal testing signal actions and properties
Simplify control flow in sig_kill()","Add ksiginfo_unqueue() and sigpend_delete_set()
Make SA_CONT a signal flag, as opposed to a signal action
Make all members of sigprop_t have a value with one set bit
Add convenience macros for signal testing signal actions and properties
Simplify control flow in sig_kill()",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1002,2021-02-17T20:52:44Z,2021-03-08T14:56:50Z,2021-03-08T14:56:53Z,MERGED,True,76,5,7,https://github.com/pj1031999,AArch64: exc tests.,6,"['accepted', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/1002,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1002,"Add tests for user-space exception handler.
Enable alignment checking - see SCTLR_EL1 register.","Add tests for user-space exception handler.
Enable alignment checking - see SCTLR_EL1 register.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1003,2021-02-17T22:24:59Z,2021-03-08T10:53:23Z,2021-03-08T10:53:23Z,MERGED,True,42,0,3,https://github.com/komik0,ringbuf_move[n]b to move data between two ringbuffers,3,['accepted'],https://github.com/cahirwpz/mimiker/pull/1003,https://github.com/komik0,1,https://github.com/cahirwpz/mimiker/pull/1003,this function is needed to be used in coming rtl8139's PR,this function is needed to be used in coming rtl8139's PR,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1003,2021-02-17T22:24:59Z,2021-03-08T10:53:23Z,2021-03-08T10:53:23Z,MERGED,True,42,0,3,https://github.com/komik0,ringbuf_move[n]b to move data between two ringbuffers,3,['accepted'],https://github.com/cahirwpz/mimiker/pull/1003,https://github.com/komik0,2,https://github.com/cahirwpz/mimiker/pull/1003#issuecomment-786190781,this function is needed to be used in coming rtl8139's PR,"Could you add tests for that?

@pj1031999 - done",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1004,2021-02-18T00:57:06Z,,2021-05-04T22:14:23Z,OPEN,False,21,13,2,https://github.com/komik0,adjust ringbuf_produce and consume for dma requirements,16,"['review', 'orphaned']",https://github.com/cahirwpz/mimiker/pull/1004,https://github.com/komik0,1,https://github.com/cahirwpz/mimiker/pull/1004,rtl8139 needs produce and consume to manage buffer updated by dma,rtl8139 needs produce and consume to manage buffer updated by dma,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1005,2021-02-18T01:00:55Z,,2021-05-03T10:21:02Z,OPEN,False,181,13,7,https://github.com/komik0,RTL8139 Rx path,5,['orphaned'],https://github.com/cahirwpz/mimiker/pull/1005,https://github.com/komik0,1,https://github.com/cahirwpz/mimiker/pull/1005,"this is moved and improved #900
additionally: added netdump - userspace program to dump received packets (packet by packet)
this pr depends on #1003 and #1004","this is moved and improved #900
additionally: added netdump - userspace program to dump received packets (packet by packet)
this pr depends on #1003 and #1004",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1006,2021-02-18T12:08:12Z,2021-03-19T11:36:25Z,2021-03-19T11:36:25Z,CLOSED,False,10,4,1,https://github.com/j-piecuch,Make vm_segment_destroy() and vm_segment_destroy_range() more consistent,4,['review'],https://github.com/cahirwpz/mimiker/pull/1006,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/1006,"vm_segment_destroy() currently doesn't unmap its address range, while vm_segment_destroy_range() does.
To fix this, we introduce vm_segment_destroy_unmapped(), which does exactly what vm_segment_destroy() used to do, and make vm_segment_destroy() unmap its address range before calling vm_segment_destroy_unmapped(). No one is actually using vm_segment_destroy() now, but I decided to include it in case it's needed in the future.","vm_segment_destroy() currently doesn't unmap its address range, while vm_segment_destroy_range() does.
To fix this, we introduce vm_segment_destroy_unmapped(), which does exactly what vm_segment_destroy() used to do, and make vm_segment_destroy() unmap its address range before calling vm_segment_destroy_unmapped(). No one is actually using vm_segment_destroy() now, but I decided to include it in case it's needed in the future.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1006,2021-02-18T12:08:12Z,2021-03-19T11:36:25Z,2021-03-19T11:36:25Z,CLOSED,False,10,4,1,https://github.com/j-piecuch,Make vm_segment_destroy() and vm_segment_destroy_range() more consistent,4,['review'],https://github.com/cahirwpz/mimiker/pull/1006,https://github.com/j-piecuch,2,https://github.com/cahirwpz/mimiker/pull/1006#issuecomment-802770217,"vm_segment_destroy() currently doesn't unmap its address range, while vm_segment_destroy_range() does.
To fix this, we introduce vm_segment_destroy_unmapped(), which does exactly what vm_segment_destroy() used to do, and make vm_segment_destroy() unmap its address range before calling vm_segment_destroy_unmapped(). No one is actually using vm_segment_destroy() now, but I decided to include it in case it's needed in the future.","Closing, as the VM code in question will likely be replaced in the near future.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1008,2021-02-18T15:56:38Z,2021-03-08T14:55:17Z,2021-03-08T14:55:17Z,MERGED,True,30,12,1,https://github.com/wiklam,Remove modulo operation (MIPS timer) & prefer MIPS timer over PIT,21,['accepted'],https://github.com/cahirwpz/mimiker/pull/1008,https://github.com/wiklam,1,https://github.com/cahirwpz/mimiker/pull/1008,Modulo operation is too expensive in this place.,Modulo operation is too expensive in this place.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1010,2021-02-19T11:12:40Z,2021-02-20T07:58:22Z,2021-02-20T07:58:25Z,MERGED,True,28,10,1,https://github.com/pj1031999,AArch64/dbg: adjust ctx.py to AArch64.,2,"['accepted', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/1010,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1010,Adjust ctx.py to AArch64.,Adjust ctx.py to AArch64.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1011,2021-02-19T11:47:12Z,2021-02-22T20:51:47Z,2021-02-22T20:51:47Z,MERGED,True,9,5,3,https://github.com/j-piecuch,"Enable icount with shift=auto, increase timeout for KASAN tests",9,['accepted'],https://github.com/cahirwpz/mimiker/pull/1011,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/1011,"This prevents unpredictable jumps in guest time, while keeping guest and host time flowing at more or less the same rate.","This prevents unpredictable jumps in guest time, while keeping guest and host time flowing at more or less the same rate.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1012,2021-02-19T16:19:36Z,2021-02-19T17:07:11Z,2021-02-19T17:09:28Z,MERGED,True,40,3,9,https://github.com/j-piecuch,"Implement sigpend() syscall, make test_signal_mask() more resilient",2,['accepted'],https://github.com/cahirwpz/mimiker/pull/1012,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/1012,"Semantics: https://pubs.opengroup.org/onlinepubs/9699919799/functions/sigpending.html
This syscall allows us to make the test_signal_mask() test more resilient to frequency changes resulting from -icount shift=auto.","Semantics: https://pubs.opengroup.org/onlinepubs/9699919799/functions/sigpending.html
This syscall allows us to make the test_signal_mask() test more resilient to frequency changes resulting from -icount shift=auto.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1013,2021-02-19T16:35:32Z,2021-02-19T19:24:42Z,2021-02-19T19:24:42Z,CLOSED,False,8,5,3,https://github.com/j-piecuch,[test] Merge changes from #1011 and #1012,7,['WiP'],https://github.com/cahirwpz/mimiker/pull/1013,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/1013,This PR includes changes from #1011 and #1012 to see if they fix CI tests.,This PR includes changes from #1011 and #1012 to see if they fix CI tests.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1013,2021-02-19T16:35:32Z,2021-02-19T19:24:42Z,2021-02-19T19:24:42Z,CLOSED,False,8,5,3,https://github.com/j-piecuch,[test] Merge changes from #1011 and #1012,7,['WiP'],https://github.com/cahirwpz/mimiker/pull/1013,https://github.com/j-piecuch,2,https://github.com/cahirwpz/mimiker/pull/1013#issuecomment-782289946,This PR includes changes from #1011 and #1012 to see if they fix CI tests.,"#1012 has been merged, closing.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1014,2021-02-20T12:34:03Z,2021-02-26T11:32:15Z,2021-02-27T11:24:27Z,MERGED,True,138,82,2,https://github.com/pj1031999,tty/pl011: basic TTY implementation for pl011.,3,['accepted'],https://github.com/cahirwpz/mimiker/pull/1014,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1014,Basic TTY implementation for pl011.,Basic TTY implementation for pl011.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1015,2021-02-21T07:14:15Z,2021-02-22T20:49:01Z,2021-02-22T20:49:04Z,CLOSED,False,3,3,3,https://github.com/cahirwpz,Identify which tests do not tolerate time jumps.,4,[],https://github.com/cahirwpz/mimiker/pull/1015,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/1015,Maybe we should rethink those tests instead of returning to icount option for QEmu. Linux seems to tolerate time jumps well.,Maybe we should rethink those tests instead of returning to icount option for QEmu. Linux seems to tolerate time jumps well.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1015,2021-02-21T07:14:15Z,2021-02-22T20:49:01Z,2021-02-22T20:49:04Z,CLOSED,False,3,3,3,https://github.com/cahirwpz,Identify which tests do not tolerate time jumps.,4,[],https://github.com/cahirwpz/mimiker/pull/1015,https://github.com/j-piecuch,2,https://github.com/cahirwpz/mimiker/pull/1015#issuecomment-782833746,Maybe we should rethink those tests instead of returning to icount option for QEmu. Linux seems to tolerate time jumps well.,"Linux seems to tolerate time jumps well.

What do you mean by that? Have you run Linux kernel tests in the same environment (QEMU, inside a virtual machine, with other processes competing with QEMU for CPU time)?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1015,2021-02-21T07:14:15Z,2021-02-22T20:49:01Z,2021-02-22T20:49:04Z,CLOSED,False,3,3,3,https://github.com/cahirwpz,Identify which tests do not tolerate time jumps.,4,[],https://github.com/cahirwpz/mimiker/pull/1015,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/1015#issuecomment-783665287,Maybe we should rethink those tests instead of returning to icount option for QEmu. Linux seems to tolerate time jumps well.,"I've run Debian Wheezy and at first glance it did behave well. However I have not run LTP tests on it.
Since I believe #1011 delivers correct solution for the problem I'm closing this PR.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1016,2021-02-22T20:37:06Z,2021-02-22T21:38:06Z,2021-02-22T21:38:09Z,MERGED,True,33,31,5,https://github.com/cahirwpz,Revert to QEmu 4.2.1,2,[],https://github.com/cahirwpz/mimiker/pull/1016,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/1016,Seems like 5.2.0 suffers from deadlocks.,Seems like 5.2.0 suffers from deadlocks.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1017,2021-02-23T07:45:30Z,,2021-02-23T10:15:12Z,OPEN,False,6,5,5,https://github.com/cahirwpz,Speed up Kernel Address Sanitizer runtime,3,['WiP'],https://github.com/cahirwpz/mimiker/pull/1017,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/1017,This PR's goal is to rewrite commonly used routines from libkern.h in similar fashion to kasan_memcpy an kasan_strlen. This should impact kernel performance in KASAN testruns and hopefully it will prevent timeouts.,This PR's goal is to rewrite commonly used routines from libkern.h in similar fashion to kasan_memcpy an kasan_strlen. This should impact kernel performance in KASAN testruns and hopefully it will prevent timeouts.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1018,2021-02-23T13:00:53Z,2021-02-23T14:38:51Z,2021-02-23T14:38:51Z,CLOSED,False,4,2,1,https://github.com/j-piecuch,Assert that the thread is stopped or stopping in thread_continue(),1,[],https://github.com/cahirwpz/mimiker/pull/1018,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/1018,"thread_continue() is meant to continue stopped threads, but currently we allow it to be called on all kinds of threads. This PR checks that the thread is in the expected state (i.e. either stopping or stopped).","thread_continue() is meant to continue stopped threads, but currently we allow it to be called on all kinds of threads. This PR checks that the thread is in the expected state (i.e. either stopping or stopped).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1018,2021-02-23T13:00:53Z,2021-02-23T14:38:51Z,2021-02-23T14:38:51Z,CLOSED,False,4,2,1,https://github.com/j-piecuch,Assert that the thread is stopped or stopping in thread_continue(),1,[],https://github.com/cahirwpz/mimiker/pull/1018,https://github.com/j-piecuch,2,https://github.com/cahirwpz/mimiker/pull/1018#issuecomment-784248172,"thread_continue() is meant to continue stopped threads, but currently we allow it to be called on all kinds of threads. This PR checks that the thread is in the expected state (i.e. either stopping or stopped).","This depends on #1001, so I will just include this change in that PR.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1019,2021-02-23T17:45:05Z,2021-03-19T14:29:44Z,2021-03-19T14:29:48Z,MERGED,True,368,335,9,https://github.com/pj1031999,uart: introduce generic uart interface to interact with tty.,13,['accepted'],https://github.com/cahirwpz/mimiker/pull/1019,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1019,Introduce generic uart interface to interact with tty.,Introduce generic uart interface to interact with tty.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1020,2021-02-23T20:58:57Z,2021-03-15T22:05:22Z,2021-03-15T22:05:22Z,MERGED,True,478,751,19,https://github.com/xThaid,New toolchain building method,15,['review'],https://github.com/cahirwpz/mimiker/pull/1020,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/1020,"This isn't complete, but I would like to get some feedback. There are a few things left to do:

packaging
short documentation
add an ability to use custom gcc (by cloning repo or something)","This isn't complete, but I would like to get some feedback. There are a few things left to do:

packaging
short documentation
add an ability to use custom gcc (by cloning repo or something)",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1020,2021-02-23T20:58:57Z,2021-03-15T22:05:22Z,2021-03-15T22:05:22Z,MERGED,True,478,751,19,https://github.com/xThaid,New toolchain building method,15,['review'],https://github.com/cahirwpz/mimiker/pull/1020,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/1020#issuecomment-791647893,"This isn't complete, but I would like to get some feedback. There are a few things left to do:

packaging
short documentation
add an ability to use custom gcc (by cloning repo or something)","Some remarks:

I'd expect host libraries (gmp, isl, cloog, mpfr, mpc) to be built once for both targets.
All sources should be unpacked exactly once.
Each target should have separate build directories for gcc, binutils and gdb.
We need to integrate Debian package build into corresponding Makefiles.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1020,2021-02-23T20:58:57Z,2021-03-15T22:05:22Z,2021-03-15T22:05:22Z,MERGED,True,478,751,19,https://github.com/xThaid,New toolchain building method,15,['review'],https://github.com/cahirwpz/mimiker/pull/1020,https://github.com/xThaid,3,https://github.com/cahirwpz/mimiker/pull/1020#issuecomment-792102042,"This isn't complete, but I would like to get some feedback. There are a few things left to do:

packaging
short documentation
add an ability to use custom gcc (by cloning repo or something)",Each remark has been addressed.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1021,2021-02-24T14:30:40Z,2021-03-22T07:28:22Z,2021-03-22T07:28:22Z,MERGED,True,59,20,4,https://github.com/j-piecuch,"Timeout tests based on CPU time, not wall clock time",16,['accepted'],https://github.com/cahirwpz/mimiker/pull/1021,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/1021,"util/cpulimit.py is a script that executes a given command and sends a SIGUSR1 signal to the specified process once the CPU time limit is reached. We use it to run QEMU with a CPU time limit.
The script needs the python-ptrace package, so the CI environment needs to be updated to include it.","util/cpulimit.py is a script that executes a given command and sends a SIGUSR1 signal to the specified process once the CPU time limit is reached. We use it to run QEMU with a CPU time limit.
The script needs the python-ptrace package, so the CI environment needs to be updated to include it.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1021,2021-02-24T14:30:40Z,2021-03-22T07:28:22Z,2021-03-22T07:28:22Z,MERGED,True,59,20,4,https://github.com/j-piecuch,"Timeout tests based on CPU time, not wall clock time",16,['accepted'],https://github.com/cahirwpz/mimiker/pull/1021,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/1021#issuecomment-787410536,"util/cpulimit.py is a script that executes a given command and sends a SIGUSR1 signal to the specified process once the CPU time limit is reached. We use it to run QEMU with a CPU time limit.
The script needs the python-ptrace package, so the CI environment needs to be updated to include it.","This solution seems to be quite convoluted. I wonder if QEmu patch wouldn't be well justified in here. I.e. add timeout to options, call setrlimit, handle SIGXCPU. If gdbserver is active then stop emulation, otherwise quit. What do you think?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1021,2021-02-24T14:30:40Z,2021-03-22T07:28:22Z,2021-03-22T07:28:22Z,MERGED,True,59,20,4,https://github.com/j-piecuch,"Timeout tests based on CPU time, not wall clock time",16,['accepted'],https://github.com/cahirwpz/mimiker/pull/1021,https://github.com/j-piecuch,3,https://github.com/cahirwpz/mimiker/pull/1021#issuecomment-787455645,"util/cpulimit.py is a script that executes a given command and sends a SIGUSR1 signal to the specified process once the CPU time limit is reached. We use it to run QEMU with a CPU time limit.
The script needs the python-ptrace package, so the CI environment needs to be updated to include it.","@cahirwpz I gave it a shot today, and I wasn't able to get it working.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1022,2021-02-25T16:13:30Z,2021-02-27T09:48:36Z,2021-02-27T11:24:20Z,MERGED,True,9,3,1,https://github.com/j-piecuch,pgrp_maybe_orphan(): send SIGHUP + SIGCONT to all members of pgrp if any member is stopped,2,['accepted'],https://github.com/cahirwpz/mimiker/pull/1022,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/1022,"From the specification of _Exit() in POSIX (https://pubs.opengroup.org/onlinepubs/9699919799/functions/_Exit.html):

If the exit of the process causes a process group to become orphaned, and if any member of the newly-orphaned process group is stopped, then a SIGHUP signal followed by a SIGCONT signal shall be sent to each process in the newly-orphaned process group.","From the specification of _Exit() in POSIX (https://pubs.opengroup.org/onlinepubs/9699919799/functions/_Exit.html):

If the exit of the process causes a process group to become orphaned, and if any member of the newly-orphaned process group is stopped, then a SIGHUP signal followed by a SIGCONT signal shall be sent to each process in the newly-orphaned process group.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1023,2021-02-27T14:08:13Z,2021-03-08T16:36:35Z,2021-03-08T16:37:29Z,MERGED,True,271,7,8,https://github.com/j-piecuch,Implement interval timers (setitimer() and getitimer() syscalls),17,['accepted'],https://github.com/cahirwpz/mimiker/pull/1023,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/1023,setitimer() can be used to send SIGALRM to the calling process at regular intervals. getitimer() is used to get the current timer state.,setitimer() can be used to send SIGALRM to the calling process at regular intervals. getitimer() is used to get the current timer state.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1023,2021-02-27T14:08:13Z,2021-03-08T16:36:35Z,2021-03-08T16:37:29Z,MERGED,True,271,7,8,https://github.com/j-piecuch,Implement interval timers (setitimer() and getitimer() syscalls),17,['accepted'],https://github.com/cahirwpz/mimiker/pull/1023,https://github.com/j-piecuch,2,https://github.com/cahirwpz/mimiker/pull/1023#issuecomment-787457038,setitimer() can be used to send SIGALRM to the calling process at regular intervals. getitimer() is used to get the current timer state.,"Children created via fork() do not inherit the parent's timer. Timers are preserved across execve() calls. See https://man7.org/linux/man-pages/man2/setitimer.2.html
I will try and add some tests that don't take too long to run.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1023,2021-02-27T14:08:13Z,2021-03-08T16:36:35Z,2021-03-08T16:37:29Z,MERGED,True,271,7,8,https://github.com/j-piecuch,Implement interval timers (setitimer() and getitimer() syscalls),17,['accepted'],https://github.com/cahirwpz/mimiker/pull/1023,https://github.com/j-piecuch,3,https://github.com/cahirwpz/mimiker/pull/1023#issuecomment-787462964,setitimer() can be used to send SIGALRM to the calling process at regular intervals. getitimer() is used to get the current timer state.,"I'd like to review changes to proc.c, proc.h and time.c separately from the rest

So I should make a PR that ""prepares"" for this PR? I think it would be really small, and wouldn't make much difference in the size of this PR, since it proc.c and syscalls.c contain most of the changes, and it doesn't make sense to include one without the other.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1023,2021-02-27T14:08:13Z,2021-03-08T16:36:35Z,2021-03-08T16:37:29Z,MERGED,True,271,7,8,https://github.com/j-piecuch,Implement interval timers (setitimer() and getitimer() syscalls),17,['accepted'],https://github.com/cahirwpz/mimiker/pull/1023,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/1023#issuecomment-788790880,setitimer() can be used to send SIGALRM to the calling process at regular intervals. getitimer() is used to get the current timer state.,"So I should make a PR that ""prepares"" for this PR?

Please do so. Leave all interesting changes for the second PR.
I suggest replacing do_getitimer & do_setitimer with stubs
that return ENOTSUP in the first PR. I guess you need to move
the tests to the second PR.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1024,2021-02-27T15:34:02Z,2021-03-25T08:14:09Z,2021-03-25T08:14:09Z,MERGED,True,2536,2,13,https://github.com/j-piecuch,Port tetris from NetBSD,98,['accepted'],https://github.com/cahirwpz/mimiker/pull/1024,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/1024,tetris/input.c needed to be modified so that it doesn't use poll().,tetris/input.c needed to be modified so that it doesn't use poll().,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1025,2021-03-01T03:20:49Z,2021-03-08T02:47:25Z,2021-03-08T02:47:25Z,CLOSED,False,0,0,0,https://github.com/wiklam,Fix for counter overflow - arm timer,0,['WiP'],https://github.com/cahirwpz/mimiker/pull/1025,https://github.com/wiklam,1,https://github.com/cahirwpz/mimiker/pull/1025,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1026,2021-03-02T12:34:23Z,2021-03-02T14:08:33Z,2021-03-02T14:08:54Z,MERGED,True,88,10,13,https://github.com/j-piecuch,Prepare for implementing setitimer() and getitimer(),1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1026,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/1026,"Change the meaning of the return value of callout_stop()
Clear stopped flag in callout_schedule{,_abs}()
Add SIGALRM signal
Add stub implementations of setitimer() and getitimer()","Change the meaning of the return value of callout_stop()
Clear stopped flag in callout_schedule{,_abs}()
Add SIGALRM signal
Add stub implementations of setitimer() and getitimer()",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1028,2021-03-03T16:45:11Z,,2021-03-06T10:04:09Z,OPEN,False,57,12,8,https://github.com/j-piecuch,[PoC] Detect kernel stack overflows using guard pages,5,['proposal'],https://github.com/cahirwpz/mimiker/pull/1028,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/1028,"This is a proof-of-concept implementation of kernel stack overflow detection using guard pages.
Every kernel stack (except thread0's stack) has a guard page that will trap any accesses. In kern_exc_enter, we check for accesses to the guard page and switch to a panic stack if an illegal access is detected. This has to be done before we save the context on the stack (otherwise we would trigger the same exception again), so unfortunately we have to do it in assembly.","This is a proof-of-concept implementation of kernel stack overflow detection using guard pages.
Every kernel stack (except thread0's stack) has a guard page that will trap any accesses. In kern_exc_enter, we check for accesses to the guard page and switch to a panic stack if an illegal access is detected. This has to be done before we save the context on the stack (otherwise we would trigger the same exception again), so unfortunately we have to do it in assembly.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1029,2021-03-04T16:08:12Z,2021-03-05T16:08:09Z,2021-03-05T16:08:09Z,MERGED,True,3,3,1,https://github.com/j-piecuch,proc_exit: don't call fdtab_drop() while holding p->p_lock,2,['accepted'],https://github.com/cahirwpz/mimiker/pull/1029,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/1029,"fdtab_drop() can acquire tty_t::t_lock further down the call chain, but we depend on being able to acquire proc_t::p_lock while holding tty_t::t_lock, so we can't acquire tty_t::t_lock while holding proc_t::p_lock, which is exactly what might happen if we call fdtab_drop() while holding proc_t::p_lock.
I have also moved the call to vm_map_delete(), since we don't need p_lock for that either.
Fixes #1027","fdtab_drop() can acquire tty_t::t_lock further down the call chain, but we depend on being able to acquire proc_t::p_lock while holding tty_t::t_lock, so we can't acquire tty_t::t_lock while holding proc_t::p_lock, which is exactly what might happen if we call fdtab_drop() while holding proc_t::p_lock.
I have also moved the call to vm_map_delete(), since we don't need p_lock for that either.
Fixes #1027",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1030,2021-03-07T13:16:23Z,2021-03-08T10:23:33Z,2021-03-08T10:26:24Z,MERGED,True,13,40,4,https://github.com/j-piecuch,Simplify locking rules around pgrp_t::pg_lock,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1030,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/1030,"Right now there's only one place where we're acquiring multiple pg_locks, and we already happen to hold all_proc_mtx there, so we can simplify the locking rules by requiring that all_proc_mtx be held in order to acquire multiple pg_locks.","Right now there's only one place where we're acquiring multiple pg_locks, and we already happen to hold all_proc_mtx there, so we can simplify the locking rules by requiring that all_proc_mtx be held in order to acquire multiple pg_locks.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1031,2021-03-08T01:17:54Z,2021-03-08T10:56:35Z,2021-03-08T10:56:35Z,MERGED,True,2,4,2,https://github.com/wiklam,Assert for vm_segment_destroy_range and simplyfing do_munmap,6,['accepted'],https://github.com/cahirwpz/mimiker/pull/1031,https://github.com/wiklam,1,https://github.com/cahirwpz/mimiker/pull/1031,"Asserting that we are destroying the range between a segment can prevent us from some future bugs.
The max for do_munmap is unnecessary, cause vm_map_find_segment already guarantee that addr >= start.","Asserting that we are destroying the range between a segment can prevent us from some future bugs.
The max for do_munmap is unnecessary, cause vm_map_find_segment already guarantee that addr >= start.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1032,2021-03-08T02:50:12Z,2021-03-14T08:09:52Z,2021-03-14T08:09:52Z,MERGED,True,5,1,1,https://github.com/wiklam,Fix for counter overflow - arm timer,8,['accepted'],https://github.com/cahirwpz/mimiker/pull/1032,https://github.com/wiklam,1,https://github.com/cahirwpz/mimiker/pull/1032,bintime_mul accepts only 32-bit values this is why we divide the multiplication of a 64-bit number into two steps - multiplying the lowe and upper 32 bits of the counter.,bintime_mul accepts only 32-bit values this is why we divide the multiplication of a 64-bit number into two steps - multiplying the lowe and upper 32 bits of the counter.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1033,2021-03-08T03:15:28Z,2021-03-08T09:42:55Z,2021-03-08T16:36:50Z,MERGED,True,2,2,1,https://github.com/wiklam,Removing the expensive HZ2BT operation in pit gettime,2,['accepted'],https://github.com/cahirwpz/mimiker/pull/1033,https://github.com/wiklam,1,https://github.com/cahirwpz/mimiker/pull/1033,"The HZ2BT operation use a 64-bit division, which can be expensive, use the already calculated value for HZ2BT(freq).","The HZ2BT operation use a 64-bit division, which can be expensive, use the already calculated value for HZ2BT(freq).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1034,2021-03-10T12:45:38Z,2021-03-12T13:18:08Z,2021-03-12T13:18:11Z,MERGED,True,14,9,6,https://github.com/pj1031999,Remove MIN and MAX from kernel.,3,['accepted'],https://github.com/cahirwpz/mimiker/pull/1034,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1034,"Remove MIN and MAX from kernel.
We have already defined safe version of min and max for kernel.","Remove MIN and MAX from kernel.
We have already defined safe version of min and max for kernel.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1035,2021-03-10T12:47:49Z,2021-03-12T13:58:20Z,2021-03-12T13:58:23Z,MERGED,True,21,18,4,https://github.com/pj1031999,drivers: Convert PCI_BUS_METHODS and BUS_METHODS into functions.,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1035,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1035,Convert PCI_BUS_METHODS and BUS_METHODS into functions.,Convert PCI_BUS_METHODS and BUS_METHODS into functions.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1036,2021-03-12T12:49:36Z,2021-03-26T07:41:13Z,2021-03-26T07:41:13Z,CLOSED,False,1,0,1,https://github.com/hadarai,Added example change on the beginning of script.,1,['WiP'],https://github.com/cahirwpz/mimiker/pull/1036,https://github.com/hadarai,1,https://github.com/cahirwpz/mimiker/pull/1036,bc i like,bc i like,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1036,2021-03-12T12:49:36Z,2021-03-26T07:41:13Z,2021-03-26T07:41:13Z,CLOSED,False,1,0,1,https://github.com/hadarai,Added example change on the beginning of script.,1,['WiP'],https://github.com/cahirwpz/mimiker/pull/1036,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/1036#issuecomment-806467150,bc i like,I guess we can close this PR?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1036,2021-03-12T12:49:36Z,2021-03-26T07:41:13Z,2021-03-26T07:41:13Z,CLOSED,False,1,0,1,https://github.com/hadarai,Added example change on the beginning of script.,1,['WiP'],https://github.com/cahirwpz/mimiker/pull/1036,https://github.com/hadarai,3,https://github.com/cahirwpz/mimiker/pull/1036#issuecomment-806547461,bc i like,"That's right, can be closed.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1037,2021-03-12T13:48:43Z,2021-03-13T18:13:56Z,2021-03-13T18:13:56Z,CLOSED,False,12,28,7,https://github.com/j-piecuch,Remove td_kframe field from thread_t,3,['review'],https://github.com/cahirwpz/mimiker/pull/1037,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/1037,"We don't use it anywhere.
Also, fix buggy FPU context save logic in ctx_switch on MIPS.","We don't use it anywhere.
Also, fix buggy FPU context save logic in ctx_switch on MIPS.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1037,2021-03-12T13:48:43Z,2021-03-13T18:13:56Z,2021-03-13T18:13:56Z,CLOSED,False,12,28,7,https://github.com/j-piecuch,Remove td_kframe field from thread_t,3,['review'],https://github.com/cahirwpz/mimiker/pull/1037,https://github.com/j-piecuch,2,https://github.com/cahirwpz/mimiker/pull/1037#issuecomment-798727790,"We don't use it anywhere.
Also, fix buggy FPU context save logic in ctx_switch on MIPS.","Kernel profiling (#979) makes use of td_kframe, so closing.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1038,2021-03-12T18:56:04Z,2021-03-29T15:53:30Z,2021-03-29T15:53:31Z,MERGED,True,18,17,1,https://github.com/j-piecuch,Preserve value of x18 register across kernel interrupts.,7,['accepted'],https://github.com/cahirwpz/mimiker/pull/1038,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/1038,"Currently, the value of the x18 register can be changed if an interrupt occurs in kernel mode. We fix this by not touching it in ctx_load.
Also, we simplify things by assuming in user_exc_leave that the user exception frame is at the top of the stack. Previously this was not always the case because kern_execve() directly called user_exc_leave(). Now, kern_execve() calls switch_to_userspace(), which sets the stack pointer to the user exception frame.","Currently, the value of the x18 register can be changed if an interrupt occurs in kernel mode. We fix this by not touching it in ctx_load.
Also, we simplify things by assuming in user_exc_leave that the user exception frame is at the top of the stack. Previously this was not always the case because kern_execve() directly called user_exc_leave(). Now, kern_execve() calls switch_to_userspace(), which sets the stack pointer to the user exception frame.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1039,2021-03-12T19:06:57Z,2021-03-14T07:08:55Z,2021-03-14T07:08:55Z,MERGED,True,10,11,7,https://github.com/j-piecuch,Fix build & test run with -O2 optimization flag,5,['accepted'],https://github.com/cahirwpz/mimiker/pull/1039,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/1039,This PR fixes a couple of issues I encountered while trying to compile and run the kernel with -O2.,This PR fixes a couple of issues I encountered while trying to compile and run the kernel with -O2.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1039,2021-03-12T19:06:57Z,2021-03-14T07:08:55Z,2021-03-14T07:08:55Z,MERGED,True,10,11,7,https://github.com/j-piecuch,Fix build & test run with -O2 optimization flag,5,['accepted'],https://github.com/cahirwpz/mimiker/pull/1039,https://github.com/pj1031999,2,https://github.com/cahirwpz/mimiker/pull/1039#issuecomment-798074073,This PR fixes a couple of issues I encountered while trying to compile and run the kernel with -O2.,@j-piecuch could you add O2 build and tests into CI in another PR?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1039,2021-03-12T19:06:57Z,2021-03-14T07:08:55Z,2021-03-14T07:08:55Z,MERGED,True,10,11,7,https://github.com/j-piecuch,Fix build & test run with -O2 optimization flag,5,['accepted'],https://github.com/cahirwpz/mimiker/pull/1039,https://github.com/j-piecuch,3,https://github.com/cahirwpz/mimiker/pull/1039#issuecomment-798128765,This PR fixes a couple of issues I encountered while trying to compile and run the kernel with -O2.,"@j-piecuch could you add O2 build and tests into CI in another PR?

I could, but that's going to put more load on the server. I will do it if @cahirwpz approves.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1039,2021-03-12T19:06:57Z,2021-03-14T07:08:55Z,2021-03-14T07:08:55Z,MERGED,True,10,11,7,https://github.com/j-piecuch,Fix build & test run with -O2 optimization flag,5,['accepted'],https://github.com/cahirwpz/mimiker/pull/1039,https://github.com/pj1031999,4,https://github.com/cahirwpz/mimiker/pull/1039#issuecomment-798164858,This PR fixes a couple of issues I encountered while trying to compile and run the kernel with -O2.,"I could, but that's going to put more load on the server. I will do it if @cahirwpz approves.

Build phase is relatively cheap. For tests we can limit --times parameter to something like 10.
I don't want your effort to be wasted by future changes.",True,{'THUMBS_UP': ['https://github.com/wiklam']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1040,2021-03-13T14:36:06Z,2021-03-19T17:17:38Z,2021-03-19T17:18:01Z,MERGED,True,56,6,5,https://github.com/pj1031999,KASAN: Dynamic shadow map size.,56,['accepted'],https://github.com/cahirwpz/mimiker/pull/1040,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1040,"Increase shadow map size in runtime.
Depends on #764.","Increase shadow map size in runtime.
Depends on #764.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1041,2021-03-13T15:13:14Z,,2022-03-25T18:30:23Z,OPEN,False,61,2,3,https://github.com/j-piecuch,Run optimized build & tests in CI,11,['proposal'],https://github.com/cahirwpz/mimiker/pull/1041,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/1041,Running tests with -O2 can help catch more bugs.,Running tests with -O2 can help catch more bugs.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1042,2021-03-13T20:11:20Z,2021-03-15T07:07:34Z,2021-03-15T07:07:34Z,MERGED,True,113,107,30,https://github.com/xThaid,Introduce MTX_DEFINE & SPIN_DEFINE macro,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1042,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/1042,"This is rather cosmetic change, but required by the lock dependency validator.","This is rather cosmetic change, but required by the lock dependency validator.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1043,2021-03-15T07:43:18Z,2021-03-28T07:30:31Z,2021-03-28T07:30:31Z,MERGED,True,113,10,11,https://github.com/franciscozdo,Construct commandline during exec,21,['accepted'],https://github.com/cahirwpz/mimiker/pull/1043,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/1043,"During exec we construct commandline which next can be got from process (e.g. by procstat).
Also updated /dev/procstat to use this feature.","During exec we construct commandline which next can be got from process (e.g. by procstat).
Also updated /dev/procstat to use this feature.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1044,2021-03-15T10:42:06Z,2021-03-15T22:03:00Z,2021-03-15T22:03:00Z,MERGED,True,3,2,1,https://github.com/j-piecuch,kstrndup(): always return null-terminated string.,1,"['bug', 'accepted']",https://github.com/cahirwpz/mimiker/pull/1044,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/1044,"Currently, if strlen(s) > maxlen, the copy will not be null-terminated.","Currently, if strlen(s) > maxlen, the copy will not be null-terminated.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1045,2021-03-17T12:40:54Z,2021-03-22T06:36:59Z,2021-03-22T06:36:59Z,MERGED,True,0,4,1,https://github.com/j-piecuch,Remove redundant check in session_enter(),1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1045,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/1045,"If pg == p->p_pgrp, then pg must be non-NULL (since p->p_pgrp is always non-NULL), so the second check will make us return EPERM, making the first one unnecessary.","If pg == p->p_pgrp, then pg must be non-NULL (since p->p_pgrp is always non-NULL), so the second check will make us return EPERM, making the first one unnecessary.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1046,2021-03-18T16:18:40Z,2021-03-26T17:46:15Z,2021-03-26T17:46:15Z,MERGED,True,61,0,3,https://github.com/j-piecuch,signal(): restart interrupted system calls by default,5,['accepted'],https://github.com/cahirwpz/mimiker/pull/1046,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/1046,"On Linux, FreeBSD and NetBSD (I haven't checked others) signal handlers set up using signal() do not interrupt system calls (i.e. make them return with EINTR). Instead, the system call is restarted after the signal handler runs (unless the system call has some data to return, in that case it just returns that data). The behavior can be changed using the siginterrupt() function.","On Linux, FreeBSD and NetBSD (I haven't checked others) signal handlers set up using signal() do not interrupt system calls (i.e. make them return with EINTR). Instead, the system call is restarted after the signal handler runs (unless the system call has some data to return, in that case it just returns that data). The behavior can be changed using the siginterrupt() function.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1047,2021-03-18T21:01:01Z,2021-03-29T14:46:37Z,2021-03-29T14:46:45Z,MERGED,True,130,22,11,https://github.com/pj1031999,KASAN: Implementation for AArch64,72,"['accepted', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/1047,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1047,"KASAN implementation based on mips version.
Depends on #1040.","KASAN implementation based on mips version.
Depends on #1040.",True,{'HOORAY': ['https://github.com/jpszczolowski']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1047,2021-03-18T21:01:01Z,2021-03-29T14:46:37Z,2021-03-29T14:46:45Z,MERGED,True,130,22,11,https://github.com/pj1031999,KASAN: Implementation for AArch64,72,"['accepted', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/1047,https://github.com/pj1031999,2,https://github.com/cahirwpz/mimiker/pull/1047#issuecomment-809195193,"KASAN implementation based on mips version.
Depends on #1040.",After merge with master something is broken with _pcpu_data.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1047,2021-03-18T21:01:01Z,2021-03-29T14:46:37Z,2021-03-29T14:46:45Z,MERGED,True,130,22,11,https://github.com/pj1031999,KASAN: Implementation for AArch64,72,"['accepted', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/1047,https://github.com/pj1031999,3,https://github.com/cahirwpz/mimiker/pull/1047#issuecomment-809247235,"KASAN implementation based on mips version.
Depends on #1040.","After merge with master something is broken with _pcpu_data.

It's related to kernel stack overflow and vmem code.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1048,2021-03-18T21:12:06Z,2021-03-26T09:08:34Z,2021-03-26T09:08:34Z,CLOSED,False,1,3,1,https://github.com/pj1031999,malloc: fix pointers arithmetic,1,"['bug', 'review']",https://github.com/cahirwpz/mimiker/pull/1048,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1048,"Fix pointers arithmetic.
Bug found by KASAN.","Fix pointers arithmetic.
Bug found by KASAN.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1049,2021-03-19T09:08:10Z,2021-03-26T17:47:50Z,2021-03-26T17:47:51Z,MERGED,True,194,39,19,https://github.com/MichalBlk,Refine the build system.,20,['accepted'],https://github.com/cahirwpz/mimiker/pull/1049,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1049,"The main goals:

describe each build system makefile including its API.
fix some encountered errors.
supply a README.md file for the build system.","The main goals:

describe each build system makefile including its API.
fix some encountered errors.
supply a README.md file for the build system.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1050,2021-03-19T20:25:06Z,2021-03-22T07:35:05Z,2021-03-22T07:35:05Z,MERGED,True,10,8,2,https://github.com/xThaid,Bump gcc version to 11,2,['accepted'],https://github.com/cahirwpz/mimiker/pull/1050,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/1050,"Debian packages are ready to use in my home directory on the server (/home/jurb/).
#999 is required to compile Mimiker under the new GCC version.","Debian packages are ready to use in my home directory on the server (/home/jurb/).
#999 is required to compile Mimiker under the new GCC version.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1050,2021-03-19T20:25:06Z,2021-03-22T07:35:05Z,2021-03-22T07:35:05Z,MERGED,True,10,8,2,https://github.com/xThaid,Bump gcc version to 11,2,['accepted'],https://github.com/cahirwpz/mimiker/pull/1050,https://github.com/MichalBlk,2,https://github.com/cahirwpz/mimiker/pull/1050#issuecomment-803431143,"Debian packages are ready to use in my home directory on the server (/home/jurb/).
#999 is required to compile Mimiker under the new GCC version.",One more thing - shouldn't we change  /mimiker/toolchain/gnu/debian/changelog?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1050,2021-03-19T20:25:06Z,2021-03-22T07:35:05Z,2021-03-22T07:35:05Z,MERGED,True,10,8,2,https://github.com/xThaid,Bump gcc version to 11,2,['accepted'],https://github.com/cahirwpz/mimiker/pull/1050,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/1050#issuecomment-803836157,"Debian packages are ready to use in my home directory on the server (/home/jurb/).
#999 is required to compile Mimiker under the new GCC version.","@MichalBlk Yes, changelog file should be updated as well. I'll do it in another PR, since I have to update Docker image as well.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1051,2021-03-20T12:17:07Z,2021-04-16T09:35:06Z,2021-04-16T09:35:06Z,MERGED,True,112,0,5,https://github.com/hadarai,Wiki deployment script with new wiki folder,23,['accepted'],https://github.com/cahirwpz/mimiker/pull/1051,https://github.com/hadarai,1,https://github.com/cahirwpz/mimiker/pull/1051,"I've added script that deploys documents from folder /wiki to our GitHub Wiki.
And a first version of that wiki with copies of README.
To start working script needs addition of correct secret value in repo's settings.
Script uses this plugin: https://github.com/marketplace/actions/github-wiki-action
About secrets you can read here: https://docs.github.com/en/actions/reference/encrypted-secrets
Working example of wiki deployment: https://github.com/hadarai/RPIS_zad_dodatowe","I've added script that deploys documents from folder /wiki to our GitHub Wiki.
And a first version of that wiki with copies of README.
To start working script needs addition of correct secret value in repo's settings.
Script uses this plugin: https://github.com/marketplace/actions/github-wiki-action
About secrets you can read here: https://docs.github.com/en/actions/reference/encrypted-secrets
Working example of wiki deployment: https://github.com/hadarai/RPIS_zad_dodatowe",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1051,2021-03-20T12:17:07Z,2021-04-16T09:35:06Z,2021-04-16T09:35:06Z,MERGED,True,112,0,5,https://github.com/hadarai,Wiki deployment script with new wiki folder,23,['accepted'],https://github.com/cahirwpz/mimiker/pull/1051,https://github.com/hadarai,2,https://github.com/cahirwpz/mimiker/pull/1051#issuecomment-808436676,"I've added script that deploys documents from folder /wiki to our GitHub Wiki.
And a first version of that wiki with copies of README.
To start working script needs addition of correct secret value in repo's settings.
Script uses this plugin: https://github.com/marketplace/actions/github-wiki-action
About secrets you can read here: https://docs.github.com/en/actions/reference/encrypted-secrets
Working example of wiki deployment: https://github.com/hadarai/RPIS_zad_dodatowe","The decision was made that in this commit there will be only Home.md page of wiki. Rest will soon follow, in diffrent PR, when updated.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1051,2021-03-20T12:17:07Z,2021-04-16T09:35:06Z,2021-04-16T09:35:06Z,MERGED,True,112,0,5,https://github.com/hadarai,Wiki deployment script with new wiki folder,23,['accepted'],https://github.com/cahirwpz/mimiker/pull/1051,https://github.com/pwit81,3,https://github.com/cahirwpz/mimiker/pull/1051#issuecomment-821042577,"I've added script that deploys documents from folder /wiki to our GitHub Wiki.
And a first version of that wiki with copies of README.
To start working script needs addition of correct secret value in repo's settings.
Script uses this plugin: https://github.com/marketplace/actions/github-wiki-action
About secrets you can read here: https://docs.github.com/en/actions/reference/encrypted-secrets
Working example of wiki deployment: https://github.com/hadarai/RPIS_zad_dodatowe",LGTM,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1052,2021-03-20T21:04:59Z,2021-03-22T15:27:29Z,2021-03-22T15:27:29Z,CLOSED,False,63,31,3,https://github.com/j-piecuch,Introduce uio_peek() and uio_advance(),3,['WiP'],https://github.com/cahirwpz/mimiker/pull/1052,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/1052,"This PR attempts to solve the same issue that #998 attempts to solve, but in a different way.
The issue is that we might read some data from an uio in order to do some processing on it, and then find out that we can't actually do the processing, so we need to return an error and make it appear as though no data was transferred from the uio.
With uio_peek(), we can read data without modifying the uio structure, so if we encounter an error later, we can just return the error without having to do anything. If we don't encounter an error, we need to ""commit"" the read we did earlier using uio_advance().","This PR attempts to solve the same issue that #998 attempts to solve, but in a different way.
The issue is that we might read some data from an uio in order to do some processing on it, and then find out that we can't actually do the processing, so we need to return an error and make it appear as though no data was transferred from the uio.
With uio_peek(), we can read data without modifying the uio structure, so if we encounter an error later, we can just return the error without having to do anything. If we don't encounter an error, we need to ""commit"" the read we did earlier using uio_advance().",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1052,2021-03-20T21:04:59Z,2021-03-22T15:27:29Z,2021-03-22T15:27:29Z,CLOSED,False,63,31,3,https://github.com/j-piecuch,Introduce uio_peek() and uio_advance(),3,['WiP'],https://github.com/cahirwpz/mimiker/pull/1052,https://github.com/j-piecuch,2,https://github.com/cahirwpz/mimiker/pull/1052#issuecomment-804151807,"This PR attempts to solve the same issue that #998 attempts to solve, but in a different way.
The issue is that we might read some data from an uio in order to do some processing on it, and then find out that we can't actually do the processing, so we need to return an error and make it appear as though no data was transferred from the uio.
With uio_peek(), we can read data without modifying the uio structure, so if we encounter an error later, we can just return the error without having to do anything. If we don't encounter an error, we need to ""commit"" the read we did earlier using uio_advance().","Closing, as #1053 has been chosen as the best solution",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1053,2021-03-20T22:19:52Z,2021-03-28T07:29:11Z,2021-03-28T07:29:11Z,MERGED,True,53,11,4,https://github.com/j-piecuch,Implement saving & restoring uio state,10,['accepted'],https://github.com/cahirwpz/mimiker/pull/1053,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/1053,"Yet another attempt to solve the issue of rolling back after an uiomove().
It introduces a single extra field to uio_t (compared to 0 for #1052 and 2 for #998).
The uio state must be saved using uio_save() before calling uiomove().","Yet another attempt to solve the issue of rolling back after an uiomove().
It introduces a single extra field to uio_t (compared to 0 for #1052 and 2 for #998).
The uio state must be saved using uio_save() before calling uiomove().",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1054,2021-03-21T22:13:46Z,2021-03-29T15:51:49Z,2021-03-29T15:51:50Z,MERGED,True,31,12,10,https://github.com/MichalBlk,Extend the toolchain of the AMD64 release.,12,"['accepted', 'AMD64']",https://github.com/cahirwpz/mimiker/pull/1054,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1054,Introduce AMD64 to mimiker's toolchain.,Introduce AMD64 to mimiker's toolchain.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1054,2021-03-21T22:13:46Z,2021-03-29T15:51:49Z,2021-03-29T15:51:50Z,MERGED,True,31,12,10,https://github.com/MichalBlk,Extend the toolchain of the AMD64 release.,12,"['accepted', 'AMD64']",https://github.com/cahirwpz/mimiker/pull/1054,https://github.com/MichalBlk,2,https://github.com/cahirwpz/mimiker/pull/1054#issuecomment-805883493,Introduce AMD64 to mimiker's toolchain.,"Unfortunately debian packages mustn't contain the '_' character, which imposes some problems because ""x86_64"" is the required target-triplet prefix in case of AMD64. Therefore, a distinction between appropriate package fields and target name is needed. The presented solution introduces a new variable ARCH to solve this problem.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1055,2021-03-22T18:12:20Z,2021-03-28T07:33:16Z,2021-03-28T07:33:16Z,MERGED,True,76,3,6,https://github.com/j-piecuch,Set window size on startup,6,['accepted'],https://github.com/cahirwpz/mimiker/pull/1055,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/1055,"The setwinsize program moves the cursor to the bottom-right corner of the screen, reads the position of the cursor, and sets the terminal window size based on that.
The program is run only on startup, so if the actual window size changes at runtime, it won't be detected, but the user can update the screen size by invoking the setwinsize command manually.","The setwinsize program moves the cursor to the bottom-right corner of the screen, reads the position of the cursor, and sets the terminal window size based on that.
The program is run only on startup, so if the actual window size changes at runtime, it won't be detected, but the user can update the screen size by invoking the setwinsize command manually.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1056,2021-03-22T20:32:35Z,2021-03-28T08:06:17Z,2021-03-28T08:06:17Z,MERGED,True,15,1,3,https://github.com/j-piecuch,vm_boot_alloc(): don't let vm_kernel_end go past _kasan_sanitized_end,5,['accepted'],https://github.com/cahirwpz/mimiker/pull/1056,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/1056,"If we're not going to expand the shadow map in vm_boot_alloc(), at least let's add a check to prevent nasty bugs in the future.","If we're not going to expand the shadow map in vm_boot_alloc(), at least let's add a check to prevent nasty bugs in the future.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1057,2021-03-22T22:51:37Z,2021-04-19T08:51:32Z,2021-05-18T09:54:38Z,MERGED,True,356,1,3,https://github.com/mohrcore,e.MMC interface,15,['accepted'],https://github.com/cahirwpz/mimiker/pull/1057,https://github.com/mohrcore,1,https://github.com/cahirwpz/mimiker/pull/1057,"An interface for an e.MMC controller, designed to support e.MMC and e.MMC-derived buses.
This interface allows for

sending standard commands
sending application-specific commands (yes, we need this)
receiving various responses
reading datastreams from the controller
writing datastream to the controller
reading some control values
writing some control values

This interface does not support:

sending general commands
boot operation mode
legacy multi-card systems
probably a lot of other stuff","An interface for an e.MMC controller, designed to support e.MMC and e.MMC-derived buses.
This interface allows for

sending standard commands
sending application-specific commands (yes, we need this)
receiving various responses
reading datastreams from the controller
writing datastream to the controller
reading some control values
writing some control values

This interface does not support:

sending general commands
boot operation mode
legacy multi-card systems
probably a lot of other stuff",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1057,2021-03-22T22:51:37Z,2021-04-19T08:51:32Z,2021-05-18T09:54:38Z,MERGED,True,356,1,3,https://github.com/mohrcore,e.MMC interface,15,['accepted'],https://github.com/cahirwpz/mimiker/pull/1057,https://github.com/mohrcore,2,https://github.com/cahirwpz/mimiker/pull/1057#issuecomment-815811896,"An interface for an e.MMC controller, designed to support e.MMC and e.MMC-derived buses.
This interface allows for

sending standard commands
sending application-specific commands (yes, we need this)
receiving various responses
reading datastreams from the controller
writing datastream to the controller
reading some control values
writing some control values

This interface does not support:

sending general commands
boot operation mode
legacy multi-card systems
probably a lot of other stuff",Further changes are needed. The current interface is not sufficient for proper SD card support. Specificatiobns such as SDA Physical Layer Specification can overload some of the default eMMC commands which is not taken into the account here. Fortunately this seems to be something that can be easily fixed by expanding the interface for sending application-specific commands to also support default command overloads.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1058,2021-03-24T17:37:34Z,2021-03-26T10:14:17Z,2021-03-26T10:14:19Z,MERGED,True,0,303,5,https://github.com/pj1031999,Remove rwlock.,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1058,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1058,We don't use rwlock in code.,We don't use rwlock in code.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1059,2021-03-25T22:52:18Z,2021-03-29T15:48:25Z,2021-03-29T15:48:25Z,MERGED,True,12,5,2,https://github.com/MichalBlk,Add the AMD64 QEMU target.,6,"['accepted', 'AMD64']",https://github.com/cahirwpz/mimiker/pull/1059,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1059,Supply qemu-mimiker-x86_64.,Supply qemu-mimiker-x86_64.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1060,2021-03-27T16:24:45Z,2021-03-29T06:10:20Z,2021-03-29T06:10:20Z,MERGED,True,14,3,1,https://github.com/j-piecuch,Add background checks to tty ioctls that modify tty settings,3,['accepted'],https://github.com/cahirwpz/mimiker/pull/1060,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/1060,"Processes in background process groups are restricted from modifying the settings of their controlling terminal.
See e.g. tcsetpgrp().","Processes in background process groups are restricted from modifying the settings of their controlling terminal.
See e.g. tcsetpgrp().",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1061,2021-03-28T19:32:55Z,2021-04-19T13:52:27Z,2021-04-19T13:52:27Z,MERGED,True,188,0,3,https://github.com/MichalBlk,USB host controller interface.,14,['accepted'],https://github.com/cahirwpz/mimiker/pull/1061,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1061,"Introduce a USB host controller interface.
The supplied approach provides the following services:

obtain the number of the controlled root hub ports
check whether any device is attached to the specified root hub port
reset an attached device
transfer to or from an attached USB device","Introduce a USB host controller interface.
The supplied approach provides the following services:

obtain the number of the controlled root hub ports
check whether any device is attached to the specified root hub port
reset an attached device
transfer to or from an attached USB device",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1061,2021-03-28T19:32:55Z,2021-04-19T13:52:27Z,2021-04-19T13:52:27Z,MERGED,True,188,0,3,https://github.com/MichalBlk,USB host controller interface.,14,['accepted'],https://github.com/cahirwpz/mimiker/pull/1061,https://github.com/MichalBlk,2,https://github.com/cahirwpz/mimiker/pull/1061#issuecomment-822072990,"Introduce a USB host controller interface.
The supplied approach provides the following services:

obtain the number of the controlled root hub ports
check whether any device is attached to the specified root hub port
reset an attached device
transfer to or from an attached USB device",These changes have been merged into #935 (and it still works).,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1062,2021-03-29T05:17:46Z,2021-05-17T15:25:48Z,2021-05-17T15:25:48Z,MERGED,True,300,43,24,https://github.com/wiklam,Function instrumentation for kgprof - MIPS,53,['accepted'],https://github.com/cahirwpz/mimiker/pull/1062,https://github.com/wiklam,1,https://github.com/cahirwpz/mimiker/pull/1062,"Introducing instrumentation, which allows us to create a call graph of functions.
Functions like intr_disable or files spinlock.c are not instrumented cause they are used for instrumentation.
Function logic in mcount.c didn't change - just simplified.","Introducing instrumentation, which allows us to create a call graph of functions.
Functions like intr_disable or files spinlock.c are not instrumented cause they are used for instrumentation.
Function logic in mcount.c didn't change - just simplified.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1062,2021-03-29T05:17:46Z,2021-05-17T15:25:48Z,2021-05-17T15:25:48Z,MERGED,True,300,43,24,https://github.com/wiklam,Function instrumentation for kgprof - MIPS,53,['accepted'],https://github.com/cahirwpz/mimiker/pull/1062,https://github.com/wiklam,2,https://github.com/cahirwpz/mimiker/pull/1062#issuecomment-826738599,"Introducing instrumentation, which allows us to create a call graph of functions.
Functions like intr_disable or files spinlock.c are not instrumented cause they are used for instrumentation.
Function logic in mcount.c didn't change - just simplified.","Could you share results of instrumentation?

Sure!",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1062,2021-03-29T05:17:46Z,2021-05-17T15:25:48Z,2021-05-17T15:25:48Z,MERGED,True,300,43,24,https://github.com/wiklam,Function instrumentation for kgprof - MIPS,53,['accepted'],https://github.com/cahirwpz/mimiker/pull/1062,https://github.com/pj1031999,3,https://github.com/cahirwpz/mimiker/pull/1062#issuecomment-830850197,"Introducing instrumentation, which allows us to create a call graph of functions.
Functions like intr_disable or files spinlock.c are not instrumented cause they are used for instrumentation.
Function logic in mcount.c didn't change - just simplified.","It is a stderr of gprof:
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: found dwarf version '7441', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: found dwarf version '13569', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '1792', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '512', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: found dwarf version '256', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: found dwarf version '1538', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '1044', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: found dwarf version '41217', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '1280', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '44289', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '512', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '1280', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '50433', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '1280', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '53505', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '1280', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '56577', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '512', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '512', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: found dwarf version '1280', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '257', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '1280', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '3329', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '512', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '256', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: found dwarf version '6147', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: found dwarf version '10242', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '19457', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '512', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '256', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: found dwarf version '7171', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '4098', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '39937', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '512', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '256', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '8707', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '20226', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '57345', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '512', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: found dwarf version '256', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '9731', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '60162', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '9217', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '512', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: found dwarf version '256', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '11779', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '27394', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '26625', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: found dwarf version '512', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '512', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '512', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '3072', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '2304', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '2060', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '6401', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '1792', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '1792', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: found dwarf version '1792', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '1792', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '5632', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '47371', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '37120', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: found dwarf version '773', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: found dwarf version '1092', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: found dwarf version '24323', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '60420', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '25856', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '5054', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: found dwarf version '54272', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '45064', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '768', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '5087', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '33792', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: found dwarf version '5192', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '5254', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: found dwarf version '46336', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: found dwarf version '1529', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: found dwarf version '24323', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: found dwarf version '24323', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '1024', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '57600', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: found dwarf version '1653', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: found dwarf version '24323', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: found dwarf version '24323', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: found dwarf version '1024', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '3072', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '1024', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '25856', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: found dwarf version '1790', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '26883', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '32000', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '5522', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '43012', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '23552', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '63492', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '31744', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '45084', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '62730', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '2560', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '4184', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '39937', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '61952', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '768', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '38429', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '1536', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '1283', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '1034', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '46851', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '26886', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '11520', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '2051', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '1795', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '2058', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '4867', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '7430', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '768', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '1536', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '6404', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '50435', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '24838', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '2560', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '29190', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '768', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '1536', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '7428', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '27139', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '45318', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '768', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '1536', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '8964', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '515', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '62726', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '768', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '1536', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '9988', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '16643', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '14598', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '768', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '1536', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '12036', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '45315', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '49667', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '39432', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '39430', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '5376', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '60420', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '7176', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '520', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '37906', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '25353', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '8450', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '516', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '26633', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '548', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '27913', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '572', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '29193', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '588', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '20480', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '30473', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '604', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '24576', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '31753', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '628', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '32777', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '668', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '34057', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '680', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '35337', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '736', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '61440', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '36617', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '816', this reader only handles version 2, 3, 4 and 5 information

@wiklam @xThaid @cahirwpz  - is it related to toolchain?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1062,2021-03-29T05:17:46Z,2021-05-17T15:25:48Z,2021-05-17T15:25:48Z,MERGED,True,300,43,24,https://github.com/wiklam,Function instrumentation for kgprof - MIPS,53,['accepted'],https://github.com/cahirwpz/mimiker/pull/1062,https://github.com/wiklam,4,https://github.com/cahirwpz/mimiker/pull/1062#issuecomment-831165244,"Introducing instrumentation, which allows us to create a call graph of functions.
Functions like intr_disable or files spinlock.c are not instrumented cause they are used for instrumentation.
Function logic in mcount.c didn't change - just simplified.","It is a stderr of gprof:
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: found dwarf version '7441', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: found dwarf version '13569', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '1792', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '512', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: found dwarf version '256', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: can't find .debug_ranges section.
BFD: DWARF error: found dwarf version '1538', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: found dwarf version '1044', this reader only handles version 2, 3, 4 and 5 information
BFD: DWARF error: can't find .debug_ranges section.
...

@wiklam @xThaid @cahirwpz - is it related to toolchain?

It started to occur since the GCC update.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1062,2021-03-29T05:17:46Z,2021-05-17T15:25:48Z,2021-05-17T15:25:48Z,MERGED,True,300,43,24,https://github.com/wiklam,Function instrumentation for kgprof - MIPS,53,['accepted'],https://github.com/cahirwpz/mimiker/pull/1062,https://github.com/cahirwpz,5,https://github.com/cahirwpz/mimiker/pull/1062#issuecomment-842047663,"Introducing instrumentation, which allows us to create a call graph of functions.
Functions like intr_disable or files spinlock.c are not instrumented cause they are used for instrumentation.
Function logic in mcount.c didn't change - just simplified.",Please update the PR according to remarks you've got during our last meeting.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1063,2021-03-29T05:26:21Z,2021-12-19T04:15:46Z,2021-12-19T04:15:46Z,CLOSED,False,34,0,2,https://github.com/wiklam,Build and run test for KGPROF flag - MIPS,4,"['WiP', 'proposal']",https://github.com/cahirwpz/mimiker/pull/1063,https://github.com/wiklam,1,https://github.com/cahirwpz/mimiker/pull/1063,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1064,2021-03-29T10:12:52Z,2021-03-29T14:47:19Z,2021-03-29T14:47:21Z,MERGED,True,10,4,3,https://github.com/pj1031999,thread: increase stack size for 64 bit architectures,2,"['accepted', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/1064,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1064,Increase stack size for AArch64.,Increase stack size for AArch64.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1065,2021-03-29T12:55:19Z,2021-03-29T14:57:38Z,2021-05-18T09:54:33Z,MERGED,True,8,18,3,https://github.com/pj1031999,CI: enable KASAN tests for AArch64,77,"['accepted', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/1065,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1065,"Enable KASAN tests for AArch64.
Additional changes:

increase P_BT_BOOTPAGE size for 64 bit architectures
increase initial kasan_sanitized_size by one SUPERPAGE

depends on #1047, #1064","Enable KASAN tests for AArch64.
Additional changes:

increase P_BT_BOOTPAGE size for 64 bit architectures
increase initial kasan_sanitized_size by one SUPERPAGE

depends on #1047, #1064",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1066,2021-03-29T13:33:03Z,2021-03-30T19:38:13Z,2021-03-30T19:38:13Z,CLOSED,False,171,31,14,https://github.com/pj1031999,Make AArch64 a first-class citizen,77,"['AArch64', 'review']",https://github.com/cahirwpz/mimiker/pull/1066,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1066,"Finally we have almost full port of Mimiker for AArch64.
We have working all system calls (except gettimeofday), KASAN, TTY and a lot of other things.
We can boot on physical board with success.
All tests are passing in CI.
It's a good time to make AArch64 a first-class citizen.
This PR improve debug experience for clang build and add more tests to CI.
#1065 is required.","Finally we have almost full port of Mimiker for AArch64.
We have working all system calls (except gettimeofday), KASAN, TTY and a lot of other things.
We can boot on physical board with success.
All tests are passing in CI.
It's a good time to make AArch64 a first-class citizen.
This PR improve debug experience for clang build and add more tests to CI.
#1065 is required.",True,{'HOORAY': ['https://github.com/xThaid']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1066,2021-03-29T13:33:03Z,2021-03-30T19:38:13Z,2021-03-30T19:38:13Z,CLOSED,False,171,31,14,https://github.com/pj1031999,Make AArch64 a first-class citizen,77,"['AArch64', 'review']",https://github.com/cahirwpz/mimiker/pull/1066,https://github.com/pj1031999,2,https://github.com/cahirwpz/mimiker/pull/1066#issuecomment-810526479,"Finally we have almost full port of Mimiker for AArch64.
We have working all system calls (except gettimeofday), KASAN, TTY and a lot of other things.
We can boot on physical board with success.
All tests are passing in CI.
It's a good time to make AArch64 a first-class citizen.
This PR improve debug experience for clang build and add more tests to CI.
#1065 is required.",Clang build is deprecated now.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1067,2021-03-29T15:39:02Z,2021-03-29T21:22:57Z,2021-03-29T21:22:57Z,MERGED,True,2,0,1,https://github.com/j-piecuch,ksh/history.c: silence warning during compilation with -O2,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1067,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/1067,"/mimiker/bin/ksh/history.c: In function 'hist_execute':
/mimiker/bin/ksh/history.c:317:31: error: writing 1 byte into a region of size 0 [-Werror=stringop-overflow=]
  317 |                         q[-1] = '\n';
      |                         ~~~~~~^~~~~~
/mimiker/bin/ksh/history.c:303:26: note: destination object of size [0, 9223372036854775807] allocated by 'strchr'
  303 |                 if ((q = strchr(p, '\n'))) {
      |                          ^~~~~~~~~~~~~~~","/mimiker/bin/ksh/history.c: In function 'hist_execute':
/mimiker/bin/ksh/history.c:317:31: error: writing 1 byte into a region of size 0 [-Werror=stringop-overflow=]
  317 |                         q[-1] = '\n';
      |                         ~~~~~~^~~~~~
/mimiker/bin/ksh/history.c:303:26: note: destination object of size [0, 9223372036854775807] allocated by 'strchr'
  303 |                 if ((q = strchr(p, '\n'))) {
      |                          ^~~~~~~~~~~~~~~",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1068,2021-04-01T07:10:42Z,2021-04-26T08:44:57Z,2021-04-26T08:44:57Z,CLOSED,False,117,67,8,https://github.com/pj1031999,[PoC] AArch64: use dtb instead of atags,1,"['proposal', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/1068,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1068,Use dtb instead of atags for AArch64 bootstrap.,Use dtb instead of atags for AArch64 bootstrap.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1068,2021-04-01T07:10:42Z,2021-04-26T08:44:57Z,2021-04-26T08:44:57Z,CLOSED,False,117,67,8,https://github.com/pj1031999,[PoC] AArch64: use dtb instead of atags,1,"['proposal', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/1068,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/1068#issuecomment-826638307,Use dtb instead of atags for AArch64 bootstrap.,I'm closing this PR since #1094 has been opened.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1069,2021-04-02T16:50:26Z,2021-04-16T12:06:59Z,2021-04-16T12:06:59Z,MERGED,True,20,17,4,https://github.com/franciscozdo,Clean vm_object interface,4,['accepted'],https://github.com/cahirwpz/mimiker/pull/1069,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/1069,"Added vm_object_hold function to hide reference counter and renamed vm_object_free to ..._drop.
Renamed (and removed anonymous struct) entry on vm_object's page list in vm_page.","Added vm_object_hold function to hide reference counter and renamed vm_object_free to ..._drop.
Renamed (and removed anonymous struct) entry on vm_object's page list in vm_page.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1071,2021-04-03T20:51:46Z,2022-03-18T15:36:16Z,2022-03-18T15:36:17Z,CLOSED,False,1075,4,50,https://github.com/MichalBlk,It's alive! - Compile and run the kernel on AMD64.,31,"['proposal', 'AMD64']",https://github.com/cahirwpz/mimiker/pull/1071,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1071,"The main goals:

Compile Mimiker kernel under AMD64 (gcc, clang).
Run the kernel and break at the entry point.

(After adding break _start in .gdbinit,) launching ./launch -d --board=pc successfully handles control to the user at the entry point of the kernel.
Prerequisites:

QEMU for x86-64
toolchain for x86-64.","The main goals:

Compile Mimiker kernel under AMD64 (gcc, clang).
Run the kernel and break at the entry point.

(After adding break _start in .gdbinit,) launching ./launch -d --board=pc successfully handles control to the user at the entry point of the kernel.
Prerequisites:

QEMU for x86-64
toolchain for x86-64.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1071,2021-04-03T20:51:46Z,2022-03-18T15:36:16Z,2022-03-18T15:36:17Z,CLOSED,False,1075,4,50,https://github.com/MichalBlk,It's alive! - Compile and run the kernel on AMD64.,31,"['proposal', 'AMD64']",https://github.com/cahirwpz/mimiker/pull/1071,https://github.com/MichalBlk,2,https://github.com/cahirwpz/mimiker/pull/1071#issuecomment-813694542,"The main goals:

Compile Mimiker kernel under AMD64 (gcc, clang).
Run the kernel and break at the entry point.

(After adding break _start in .gdbinit,) launching ./launch -d --board=pc successfully handles control to the user at the entry point of the kernel.
Prerequisites:

QEMU for x86-64
toolchain for x86-64.","Major changes have been introduced. First of all, UEFI is gone. It's problematic to bring it together with the rest of the project and running was quite slow and inconvenient. Along with UEFI, disk image creation has been removed. However, I still stick to Multiboot2. The problem with Multiboot1 used by QEMU (when -kernel is applied) is that it can't load a 64 bit ELF files. The suggested workaround is to have two binaries: 32 bit loader (set long mode and jump to 64 bit kernel elf loaded form the disk), and 64 bit kernel elf. The solution seems to be very problematic and ugly, so I have decided to employ much easier approach. I take the compiled ELF, initrd and grub.cfg and put them in a single directory (no more playing with disk images, just mkdir and cp) and then use grub-mkrescue to make an bootable iso image (the default grub is used, no more grub building). It's 1464 kB in size and the creation process is quick. Then instead -kern and -initrd I do -cdrom and it works. To properly create the image the grub-pc-bin package is needed.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1071,2021-04-03T20:51:46Z,2022-03-18T15:36:16Z,2022-03-18T15:36:17Z,CLOSED,False,1075,4,50,https://github.com/MichalBlk,It's alive! - Compile and run the kernel on AMD64.,31,"['proposal', 'AMD64']",https://github.com/cahirwpz/mimiker/pull/1071,https://github.com/MichalBlk,3,https://github.com/cahirwpz/mimiker/pull/1071#issuecomment-814230491,"The main goals:

Compile Mimiker kernel under AMD64 (gcc, clang).
Run the kernel and break at the entry point.

(After adding break _start in .gdbinit,) launching ./launch -d --board=pc successfully handles control to the user at the entry point of the kernel.
Prerequisites:

QEMU for x86-64
toolchain for x86-64.","In the new solution GRUB is gone for good. I've decided to use the '-kernel' and '-initrd' commands to run the kernel image (and supply an initial ram disk). A shift form multiboot2 to multiboot1 has been made (QEMU seeks for a multiboot1 header). The suggested approach compiles a 64 bit image and then converts it to a 32 bit one passed to QEMU (gdb gets the 64 bit one, but QEMU requires a 32 bit image in case of multiboot). The multiboot_info structure provides a kernel command line field and those arguments doesn't have to be passed in the grub.cfg (as is the case when using GRUB), thus a convenient (and compliant with the other ports) scheme to obtain kernel arguments is supplied.
When it comes to my plan for the port, for now I am trying to establish a known environment to work in (FTTB protected mode). I'd like to apply an incremental approach, i.e. implement thing by thing when encountering any lacks. I don't have much experience in this field and I suppose that some of the things I'm doing now, will need some revision in the future.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1071,2021-04-03T20:51:46Z,2022-03-18T15:36:16Z,2022-03-18T15:36:17Z,CLOSED,False,1075,4,50,https://github.com/MichalBlk,It's alive! - Compile and run the kernel on AMD64.,31,"['proposal', 'AMD64']",https://github.com/cahirwpz/mimiker/pull/1071,https://github.com/MichalBlk,4,https://github.com/cahirwpz/mimiker/pull/1071#issuecomment-814250577,"The main goals:

Compile Mimiker kernel under AMD64 (gcc, clang).
Run the kernel and break at the entry point.

(After adding break _start in .gdbinit,) launching ./launch -d --board=pc successfully handles control to the user at the entry point of the kernel.
Prerequisites:

QEMU for x86-64
toolchain for x86-64.","In order to test the solution you will need:

QEMU for x86-64
toolchain for x86-64
add break _start to .gdbinit
add above tools to the PATH
run make BOARD=pc
run ./launch -d --board=pc",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1071,2021-04-03T20:51:46Z,2022-03-18T15:36:16Z,2022-03-18T15:36:17Z,CLOSED,False,1075,4,50,https://github.com/MichalBlk,It's alive! - Compile and run the kernel on AMD64.,31,"['proposal', 'AMD64']",https://github.com/cahirwpz/mimiker/pull/1071,https://github.com/cahirwpz,5,https://github.com/cahirwpz/mimiker/pull/1071#issuecomment-1072528110,"The main goals:

Compile Mimiker kernel under AMD64 (gcc, clang).
Run the kernel and break at the entry point.

(After adding break _start in .gdbinit,) launching ./launch -d --board=pc successfully handles control to the user at the entry point of the kernel.
Prerequisites:

QEMU for x86-64
toolchain for x86-64.",Since we decided to continue development on more recent architectures like RISC-V all advances towards AMD64 are not going to be merged.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1072,2021-04-03T23:18:07Z,,2021-04-26T11:10:55Z,OPEN,False,285,0,7,https://github.com/pj1031999,UVM: basic implementation of amap,8,['proposal'],https://github.com/cahirwpz/mimiker/pull/1072,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1072,"It's a first step for new virtual memory subsystem [1] in Mimiker.
amap describes an area of anonymous memory. It 's a upper layer of UVM’s two-layer mapping scheme.

Add missing PAGE_SHIFT definition in vm_param for AArch64 & mips.
Add definition of uvm_amap.
Add interface for uvm_amap.
Add definition of uvm_aref.
Add simple test for uvm_amap.

It's based on NetBSD implementation [2] described by Cranor [3].
[1] #1073
[2] https://nxr.netbsd.org/xref/src/sys/uvm/uvm_amap.c
[3] https://chuck.cranor.org/p/diss.pdf","It's a first step for new virtual memory subsystem [1] in Mimiker.
amap describes an area of anonymous memory. It 's a upper layer of UVM’s two-layer mapping scheme.

Add missing PAGE_SHIFT definition in vm_param for AArch64 & mips.
Add definition of uvm_amap.
Add interface for uvm_amap.
Add definition of uvm_aref.
Add simple test for uvm_amap.

It's based on NetBSD implementation [2] described by Cranor [3].
[1] #1073
[2] https://nxr.netbsd.org/xref/src/sys/uvm/uvm_amap.c
[3] https://chuck.cranor.org/p/diss.pdf",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1072,2021-04-03T23:18:07Z,,2021-04-26T11:10:55Z,OPEN,False,285,0,7,https://github.com/pj1031999,UVM: basic implementation of amap,8,['proposal'],https://github.com/cahirwpz/mimiker/pull/1072,https://github.com/franciscozdo,2,https://github.com/cahirwpz/mimiker/pull/1072#issuecomment-813847762,"It's a first step for new virtual memory subsystem [1] in Mimiker.
amap describes an area of anonymous memory. It 's a upper layer of UVM’s two-layer mapping scheme.

Add missing PAGE_SHIFT definition in vm_param for AArch64 & mips.
Add definition of uvm_amap.
Add interface for uvm_amap.
Add definition of uvm_aref.
Add simple test for uvm_amap.

It's based on NetBSD implementation [2] described by Cranor [3].
[1] #1073
[2] https://nxr.netbsd.org/xref/src/sys/uvm/uvm_amap.c
[3] https://chuck.cranor.org/p/diss.pdf",What do you think about moving tests into sys/tests/uvm.c. Then we will have all tests in one place.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1072,2021-04-03T23:18:07Z,,2021-04-26T11:10:55Z,OPEN,False,285,0,7,https://github.com/pj1031999,UVM: basic implementation of amap,8,['proposal'],https://github.com/cahirwpz/mimiker/pull/1072,https://github.com/pj1031999,3,https://github.com/cahirwpz/mimiker/pull/1072#issuecomment-814024978,"It's a first step for new virtual memory subsystem [1] in Mimiker.
amap describes an area of anonymous memory. It 's a upper layer of UVM’s two-layer mapping scheme.

Add missing PAGE_SHIFT definition in vm_param for AArch64 & mips.
Add definition of uvm_amap.
Add interface for uvm_amap.
Add definition of uvm_aref.
Add simple test for uvm_amap.

It's based on NetBSD implementation [2] described by Cranor [3].
[1] #1073
[2] https://nxr.netbsd.org/xref/src/sys/uvm/uvm_amap.c
[3] https://chuck.cranor.org/p/diss.pdf","What do you think about moving tests into sys/tests/uvm.c. Then we will have all tests in one place.

I'm not sure. From my point of view amap is a separate structure that can live without rest of UVM. But if you thing that one place for all tests is a better idea you can push that directly here. It's not a a big thing for me.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1072,2021-04-03T23:18:07Z,,2021-04-26T11:10:55Z,OPEN,False,285,0,7,https://github.com/pj1031999,UVM: basic implementation of amap,8,['proposal'],https://github.com/cahirwpz/mimiker/pull/1072,https://github.com/pj1031999,4,https://github.com/cahirwpz/mimiker/pull/1072#issuecomment-814036732,"It's a first step for new virtual memory subsystem [1] in Mimiker.
amap describes an area of anonymous memory. It 's a upper layer of UVM’s two-layer mapping scheme.

Add missing PAGE_SHIFT definition in vm_param for AArch64 & mips.
Add definition of uvm_amap.
Add interface for uvm_amap.
Add definition of uvm_aref.
Add simple test for uvm_amap.

It's based on NetBSD implementation [2] described by Cranor [3].
[1] #1073
[2] https://nxr.netbsd.org/xref/src/sys/uvm/uvm_amap.c
[3] https://chuck.cranor.org/p/diss.pdf","I would be happy to see assertions about held lock in functions that require it (at least in functions *_nolock). It could help in future.

Hm... I'm not sure if it's necessary. That functions are private for amap and called only from their locked brothers now.
I've checked that and we have 5 _nolock functions in our code and only one has that assertion.
I can add them but I don't see a reason for that now.",True,{'THUMBS_UP': ['https://github.com/franciscozdo']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1074,2021-04-04T13:44:02Z,2021-04-26T08:50:04Z,2021-04-26T08:50:09Z,CLOSED,False,14,6,3,https://github.com/pj1031999,build: fix KASAN build,1,"['bug', 'proposal']",https://github.com/cahirwpz/mimiker/pull/1074,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1074,"Fix #1070
sys/kern/Makefile do operations on KASAN variable before it is defined. As a result following ifeq is always false:
ifeq ($(KASAN), 1)
SOURCES += kasan.c kasan_quar.c
# KASAN's run-time library mustn't be sanitized!
kasan.o : CFLAGS_KASAN =
else
# Clean dependencies without having to pass `KASAN=1` to `make clean`.
CLEAN-FILES += .kasan.D .kasan_quar.D
endif
The only solution for make KASAN build is passing KASAN=1 directly from cmdline.
We can avoid that by removing ifeq from Makefile and compiling kasan*.c always.
To do that we need to modify these .c files because they require to have
KASAN=1.
It's not the best solution but works with minimal effort.","Fix #1070
sys/kern/Makefile do operations on KASAN variable before it is defined. As a result following ifeq is always false:
ifeq ($(KASAN), 1)
SOURCES += kasan.c kasan_quar.c
# KASAN's run-time library mustn't be sanitized!
kasan.o : CFLAGS_KASAN =
else
# Clean dependencies without having to pass `KASAN=1` to `make clean`.
CLEAN-FILES += .kasan.D .kasan_quar.D
endif
The only solution for make KASAN build is passing KASAN=1 directly from cmdline.
We can avoid that by removing ifeq from Makefile and compiling kasan*.c always.
To do that we need to modify these .c files because they require to have
KASAN=1.
It's not the best solution but works with minimal effort.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1074,2021-04-04T13:44:02Z,2021-04-26T08:50:04Z,2021-04-26T08:50:09Z,CLOSED,False,14,6,3,https://github.com/pj1031999,build: fix KASAN build,1,"['bug', 'proposal']",https://github.com/cahirwpz/mimiker/pull/1074,https://github.com/hadarai,2,https://github.com/cahirwpz/mimiker/pull/1074#issuecomment-816624135,"Fix #1070
sys/kern/Makefile do operations on KASAN variable before it is defined. As a result following ifeq is always false:
ifeq ($(KASAN), 1)
SOURCES += kasan.c kasan_quar.c
# KASAN's run-time library mustn't be sanitized!
kasan.o : CFLAGS_KASAN =
else
# Clean dependencies without having to pass `KASAN=1` to `make clean`.
CLEAN-FILES += .kasan.D .kasan_quar.D
endif
The only solution for make KASAN build is passing KASAN=1 directly from cmdline.
We can avoid that by removing ifeq from Makefile and compiling kasan*.c always.
To do that we need to modify these .c files because they require to have
KASAN=1.
It's not the best solution but works with minimal effort.","Do we have to have that variable KASAN?
I mean, can't we just behave like value of that variable is 1 without setting and/or declaring it?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1074,2021-04-04T13:44:02Z,2021-04-26T08:50:04Z,2021-04-26T08:50:09Z,CLOSED,False,14,6,3,https://github.com/pj1031999,build: fix KASAN build,1,"['bug', 'proposal']",https://github.com/cahirwpz/mimiker/pull/1074,https://github.com/pj1031999,3,https://github.com/cahirwpz/mimiker/pull/1074#issuecomment-816660045,"Fix #1070
sys/kern/Makefile do operations on KASAN variable before it is defined. As a result following ifeq is always false:
ifeq ($(KASAN), 1)
SOURCES += kasan.c kasan_quar.c
# KASAN's run-time library mustn't be sanitized!
kasan.o : CFLAGS_KASAN =
else
# Clean dependencies without having to pass `KASAN=1` to `make clean`.
CLEAN-FILES += .kasan.D .kasan_quar.D
endif
The only solution for make KASAN build is passing KASAN=1 directly from cmdline.
We can avoid that by removing ifeq from Makefile and compiling kasan*.c always.
To do that we need to modify these .c files because they require to have
KASAN=1.
It's not the best solution but works with minimal effort.","Do we have to have that variable KASAN?
I mean, can't we just behave like value of that variable is 1 without setting and/or declaring it?

You can't always set KASAN to 1 because we have builds without sanitizer.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1074,2021-04-04T13:44:02Z,2021-04-26T08:50:04Z,2021-04-26T08:50:09Z,CLOSED,False,14,6,3,https://github.com/pj1031999,build: fix KASAN build,1,"['bug', 'proposal']",https://github.com/cahirwpz/mimiker/pull/1074,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/1074#issuecomment-826642396,"Fix #1070
sys/kern/Makefile do operations on KASAN variable before it is defined. As a result following ifeq is always false:
ifeq ($(KASAN), 1)
SOURCES += kasan.c kasan_quar.c
# KASAN's run-time library mustn't be sanitized!
kasan.o : CFLAGS_KASAN =
else
# Clean dependencies without having to pass `KASAN=1` to `make clean`.
CLEAN-FILES += .kasan.D .kasan_quar.D
endif
The only solution for make KASAN build is passing KASAN=1 directly from cmdline.
We can avoid that by removing ifeq from Makefile and compiling kasan*.c always.
To do that we need to modify these .c files because they require to have
KASAN=1.
It's not the best solution but works with minimal effort.",We don't need this hack anymore since #1090 was introduced.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1075,2021-04-04T22:56:08Z,2021-04-16T12:14:39Z,2021-04-16T12:14:46Z,MERGED,True,6,3,5,https://github.com/pj1031999,cred: fix prototype of cred_can_access,2,['accepted'],https://github.com/cahirwpz/mimiker/pull/1075,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1075,"This function is defined in sys/kern/cred_checks.c with the following signature:
int cred_can_access(vattr_t *va, cred_t *cred, accmode_t mode)
The only place where it is called is vnode_access_generic where mode is accmode_t.
This change requires small modification of includes because accmode_t is defined in sys/vnode.h which also includes sys/cred.h.","This function is defined in sys/kern/cred_checks.c with the following signature:
int cred_can_access(vattr_t *va, cred_t *cred, accmode_t mode)
The only place where it is called is vnode_access_generic where mode is accmode_t.
This change requires small modification of includes because accmode_t is defined in sys/vnode.h which also includes sys/cred.h.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1076,2021-04-06T06:41:35Z,,2021-04-22T15:57:22Z,OPEN,False,111,0,5,https://github.com/franciscozdo,UVM: basic anon implementation,4,['proposal'],https://github.com/cahirwpz/mimiker/pull/1076,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/1076,"Anons are used by amap and will hold anonymous memory pages.

Add definitions and implemetation of anons
Simple test for anons

Based on NetBSD implementation described by Cranor [1].
It's a part of new virtual memory subsystem [2].
[1] https://chuck.cranor.org/p/diss.pdf
[2] #1073","Anons are used by amap and will hold anonymous memory pages.

Add definitions and implemetation of anons
Simple test for anons

Based on NetBSD implementation described by Cranor [1].
It's a part of new virtual memory subsystem [2].
[1] https://chuck.cranor.org/p/diss.pdf
[2] #1073",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1077,2021-04-06T09:34:06Z,2021-04-19T10:00:54Z,2021-04-19T10:00:54Z,MERGED,True,36,53,13,https://github.com/MichalBlk,Extract MI signatures form MD interrupt.h.,3,['accepted'],https://github.com/cahirwpz/mimiker/pull/1077,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1077,All the cpu_* function signatures form $(ARCH)/interrupt.h are machine independent thus can be presented once in a MI header file located in include/sys.,All the cpu_* function signatures form $(ARCH)/interrupt.h are machine independent thus can be presented once in a MI header file located in include/sys.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1078,2021-04-06T09:54:33Z,2021-04-12T09:19:51Z,2021-04-12T09:19:51Z,MERGED,True,1,1,1,https://github.com/MichalBlk,Run mimiker without the debug option.,1,"['bug', 'accepted']",https://github.com/cahirwpz/mimiker/pull/1078,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1078,"'-S' option shouldn't be supplied regardless of the command line options as is done now in qemu: { options: {.... Instead, it should only be included if the debug option ('-d') is supplied (as is done in if getvar('config.debug'): self.options += ['-S']. For now, '-S' is always present and thus launch doesn't work without '-d' (because the gdb window doesn't appear).","'-S' option shouldn't be supplied regardless of the command line options as is done now in qemu: { options: {.... Instead, it should only be included if the debug option ('-d') is supplied (as is done in if getvar('config.debug'): self.options += ['-S']. For now, '-S' is always present and thus launch doesn't work without '-d' (because the gdb window doesn't appear).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1079,2021-04-06T10:10:46Z,2021-04-12T09:21:09Z,2021-04-12T09:21:09Z,MERGED,True,5,7,5,https://github.com/MichalBlk,Remove MD bus definitions.,3,['accepted'],https://github.com/cahirwpz/mimiker/pull/1079,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1079,"include/$(ARCH)/bus_defs.h only includes include/sys/common_bus_defs.h regardless of the value of $(ARCH), therefore I've deleted these files and rename include/sys/common_bus_defs.h to include/sys/bus_defs.h. This solution is less ambiguous.","include/$(ARCH)/bus_defs.h only includes include/sys/common_bus_defs.h regardless of the value of $(ARCH), therefore I've deleted these files and rename include/sys/common_bus_defs.h to include/sys/bus_defs.h. This solution is less ambiguous.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1080,2021-04-06T13:17:52Z,2021-04-26T08:52:40Z,2021-04-26T08:52:43Z,CLOSED,False,11,6,6,https://github.com/pj1031999,build: yet another attempt to fix make format,3,['proposal'],https://github.com/cahirwpz/mimiker/pull/1080,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1080,Adapt make format for multiple architectures.,Adapt make format for multiple architectures.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1080,2021-04-06T13:17:52Z,2021-04-26T08:52:40Z,2021-04-26T08:52:43Z,CLOSED,False,11,6,6,https://github.com/pj1031999,build: yet another attempt to fix make format,3,['proposal'],https://github.com/cahirwpz/mimiker/pull/1080,https://github.com/pj1031999,2,https://github.com/cahirwpz/mimiker/pull/1080#issuecomment-814129897,Adapt make format for multiple architectures.,Note: CI has different clang version than build server and as a result delay function is formatted in wrong way.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1080,2021-04-06T13:17:52Z,2021-04-26T08:52:40Z,2021-04-26T08:52:43Z,CLOSED,False,11,6,6,https://github.com/pj1031999,build: yet another attempt to fix make format,3,['proposal'],https://github.com/cahirwpz/mimiker/pull/1080,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/1080#issuecomment-826644431,Adapt make format for multiple architectures.,Since handling source code formatting is handled by #1090 this PR is not needed anymore.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1081,2021-04-11T09:36:31Z,2021-04-26T08:26:38Z,2021-04-26T08:26:38Z,MERGED,True,212,209,12,https://github.com/franciscozdo,Rename some structures and fields in VM subsystem,20,['accepted'],https://github.com/cahirwpz/mimiker/pull/1081,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/1081,"I think it is time to clean names in our VM subsystem. It will be also easier to compare our system with BSD because structures will have similar names.
Changes:

renamed fields of vm_object
vm_segment -> vm_map_entry","I think it is time to clean names in our VM subsystem. It will be also easier to compare our system with BSD because structures will have similar names.
Changes:

renamed fields of vm_object
vm_segment -> vm_map_entry",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1082,2021-04-11T11:51:38Z,,2021-06-06T09:59:40Z,OPEN,False,1853,76,31,https://github.com/franciscozdo,UVM: WIP,63,['WiP'],https://github.com/cahirwpz/mimiker/pull/1082,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/1082,Here are all changes to make uvm working in mimiker stacked together.,Here are all changes to make uvm working in mimiker stacked together.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1083,2021-04-11T19:50:33Z,2021-04-15T21:20:12Z,2021-05-18T09:54:24Z,CLOSED,False,38,37,11,https://github.com/MichalBlk,MInor fixes and maintenance around VM.,2,"['bug', 'accepted']",https://github.com/cahirwpz/mimiker/pull/1083,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1083,"Changes:

delete unnecessary header inclusions.
fix some typos.
change the vm_pgr_type_t flags prefix form VM_* to VM_PGR_* (VM_* is already used by vm_flags_t).
make vm_segment_destroy static as it's only called within the vm_map module and it's tricky to use due to the absence of any pmap calls inside the function.
fix the vm_map_insert_after invocation in vm_segment_destroy_range.
pass 0 instead of VM_SEG_SHARED in the call to  vm_segment_alloc inside  vm_map_alloc_segment (note that the following call to vm_map_insert will reset the segment's flags based on the flags argument anyway).
rename vm_map_object_dump to vm_object_dump as it's part of the vm_object namespace.
add counter in vm_pgr_type_t to control references to pagers.
add and fix assertions.
fill the pgr_type fields in pagres.
use vm_offset_t instead of off_t.","Changes:

delete unnecessary header inclusions.
fix some typos.
change the vm_pgr_type_t flags prefix form VM_* to VM_PGR_* (VM_* is already used by vm_flags_t).
make vm_segment_destroy static as it's only called within the vm_map module and it's tricky to use due to the absence of any pmap calls inside the function.
fix the vm_map_insert_after invocation in vm_segment_destroy_range.
pass 0 instead of VM_SEG_SHARED in the call to  vm_segment_alloc inside  vm_map_alloc_segment (note that the following call to vm_map_insert will reset the segment's flags based on the flags argument anyway).
rename vm_map_object_dump to vm_object_dump as it's part of the vm_object namespace.
add counter in vm_pgr_type_t to control references to pagers.
add and fix assertions.
fill the pgr_type fields in pagres.
use vm_offset_t instead of off_t.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1083,2021-04-11T19:50:33Z,2021-04-15T21:20:12Z,2021-05-18T09:54:24Z,CLOSED,False,38,37,11,https://github.com/MichalBlk,MInor fixes and maintenance around VM.,2,"['bug', 'accepted']",https://github.com/cahirwpz/mimiker/pull/1083,https://github.com/pj1031999,2,https://github.com/cahirwpz/mimiker/pull/1083#issuecomment-817375557,"Changes:

delete unnecessary header inclusions.
fix some typos.
change the vm_pgr_type_t flags prefix form VM_* to VM_PGR_* (VM_* is already used by vm_flags_t).
make vm_segment_destroy static as it's only called within the vm_map module and it's tricky to use due to the absence of any pmap calls inside the function.
fix the vm_map_insert_after invocation in vm_segment_destroy_range.
pass 0 instead of VM_SEG_SHARED in the call to  vm_segment_alloc inside  vm_map_alloc_segment (note that the following call to vm_map_insert will reset the segment's flags based on the flags argument anyway).
rename vm_map_object_dump to vm_object_dump as it's part of the vm_object namespace.
add counter in vm_pgr_type_t to control references to pagers.
add and fix assertions.
fill the pgr_type fields in pagres.
use vm_offset_t instead of off_t.","I don't see any reason for that change.
You have fixed random typos, added random comas, renamed random constants/enums/functions. Maybe now it's more readable but it's not a real change.
I see only one minor change to something that was introduced in #831.
It's even worse from my perspective. We are already during rewriting of VM subsystem and your change makes it harder because now we need to merge that changes into something complicated. @franciscozdo has already started renaming of structures in VM subsystem in #1081 and it's a good place for that changes.
I believe that everything that you have introduced here will be removed in #1082.
@franciscozdo do you agree? Do you have something to add?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1083,2021-04-11T19:50:33Z,2021-04-15T21:20:12Z,2021-05-18T09:54:24Z,CLOSED,False,38,37,11,https://github.com/MichalBlk,MInor fixes and maintenance around VM.,2,"['bug', 'accepted']",https://github.com/cahirwpz/mimiker/pull/1083,https://github.com/franciscozdo,3,https://github.com/cahirwpz/mimiker/pull/1083#issuecomment-817532488,"Changes:

delete unnecessary header inclusions.
fix some typos.
change the vm_pgr_type_t flags prefix form VM_* to VM_PGR_* (VM_* is already used by vm_flags_t).
make vm_segment_destroy static as it's only called within the vm_map module and it's tricky to use due to the absence of any pmap calls inside the function.
fix the vm_map_insert_after invocation in vm_segment_destroy_range.
pass 0 instead of VM_SEG_SHARED in the call to  vm_segment_alloc inside  vm_map_alloc_segment (note that the following call to vm_map_insert will reset the segment's flags based on the flags argument anyway).
rename vm_map_object_dump to vm_object_dump as it's part of the vm_object namespace.
add counter in vm_pgr_type_t to control references to pagers.
add and fix assertions.
fill the pgr_type fields in pagres.
use vm_offset_t instead of off_t.","I think you can push changes that rename functions and pagers to my PR #1081 (but please follow convention used in that pr).
IMO bug fixes like this in vm_segment_destroy_range should be separated into small PR that is easy to review. And I am not sure if this function will exist after our changes to VM system.
Other changes are not crucial so I suggest you to wait with them until we finish implementing UVM.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1083,2021-04-11T19:50:33Z,2021-04-15T21:20:12Z,2021-05-18T09:54:24Z,CLOSED,False,38,37,11,https://github.com/MichalBlk,MInor fixes and maintenance around VM.,2,"['bug', 'accepted']",https://github.com/cahirwpz/mimiker/pull/1083,https://github.com/MichalBlk,4,https://github.com/cahirwpz/mimiker/pull/1083#issuecomment-820738732,"Changes:

delete unnecessary header inclusions.
fix some typos.
change the vm_pgr_type_t flags prefix form VM_* to VM_PGR_* (VM_* is already used by vm_flags_t).
make vm_segment_destroy static as it's only called within the vm_map module and it's tricky to use due to the absence of any pmap calls inside the function.
fix the vm_map_insert_after invocation in vm_segment_destroy_range.
pass 0 instead of VM_SEG_SHARED in the call to  vm_segment_alloc inside  vm_map_alloc_segment (note that the following call to vm_map_insert will reset the segment's flags based on the flags argument anyway).
rename vm_map_object_dump to vm_object_dump as it's part of the vm_object namespace.
add counter in vm_pgr_type_t to control references to pagers.
add and fix assertions.
fill the pgr_type fields in pagres.
use vm_offset_t instead of off_t.","Since the introduced changes are not crucial and they interfere with work done by @franciscozdo and @pj1031999, I've decided to close this PR.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1084,2021-04-12T08:20:08Z,,2021-09-20T18:24:46Z,OPEN,False,38,5,5,https://github.com/wiklam,Kgprof profclock,77,['review'],https://github.com/cahirwpz/mimiker/pull/1084,https://github.com/wiklam,1,https://github.com/cahirwpz/mimiker/pull/1084,"Introducing choosing a different clock for profiling that will not be synchronized with the main (hardclock) clock.
Depends on #1062","Introducing choosing a different clock for profiling that will not be synchronized with the main (hardclock) clock.
Depends on #1062",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1084,2021-04-12T08:20:08Z,,2021-09-20T18:24:46Z,OPEN,False,38,5,5,https://github.com/wiklam,Kgprof profclock,77,['review'],https://github.com/cahirwpz/mimiker/pull/1084,https://github.com/pj1031999,2,https://github.com/cahirwpz/mimiker/pull/1084#issuecomment-831159581,"Introducing choosing a different clock for profiling that will not be synchronized with the main (hardclock) clock.
Depends on #1062",@wiklam please sync with #1062.,True,{'THUMBS_UP': ['https://github.com/wiklam']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1084,2021-04-12T08:20:08Z,,2021-09-20T18:24:46Z,OPEN,False,38,5,5,https://github.com/wiklam,Kgprof profclock,77,['review'],https://github.com/cahirwpz/mimiker/pull/1084,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/1084#issuecomment-842417853,"Introducing choosing a different clock for profiling that will not be synchronized with the main (hardclock) clock.
Depends on #1062",Please resolve conflicts!,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1084,2021-04-12T08:20:08Z,,2021-09-20T18:24:46Z,OPEN,False,38,5,5,https://github.com/wiklam,Kgprof profclock,77,['review'],https://github.com/cahirwpz/mimiker/pull/1084,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/1084#issuecomment-922837592,"Introducing choosing a different clock for profiling that will not be synchronized with the main (hardclock) clock.
Depends on #1062",@wiklam What's the status of this PR ?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1084,2021-04-12T08:20:08Z,,2021-09-20T18:24:46Z,OPEN,False,38,5,5,https://github.com/wiklam,Kgprof profclock,77,['review'],https://github.com/cahirwpz/mimiker/pull/1084,https://github.com/wiklam,5,https://github.com/cahirwpz/mimiker/pull/1084#issuecomment-923171229,"Introducing choosing a different clock for profiling that will not be synchronized with the main (hardclock) clock.
Depends on #1062","@wiklam What's the status of this PR ?

Please take a look",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1085,2021-04-14T21:46:03Z,,2021-06-26T16:00:38Z,OPEN,False,43,20,3,https://github.com/MichalBlk,Fixes around physmem.,6,"['bug', 'review']",https://github.com/cahirwpz/mimiker/pull/1085,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1085,"Introduced changes:

remove the threat of mapping the same VA multiple times by vm_boot_alloc.
describe (and simplify) page size computation.
change buddy localization method.
fix typos.
add few assertions.","Introduced changes:

remove the threat of mapping the same VA multiple times by vm_boot_alloc.
describe (and simplify) page size computation.
change buddy localization method.
fix typos.
add few assertions.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1085,2021-04-14T21:46:03Z,,2021-06-26T16:00:38Z,OPEN,False,43,20,3,https://github.com/MichalBlk,Fixes around physmem.,6,"['bug', 'review']",https://github.com/cahirwpz/mimiker/pull/1085,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/1085#issuecomment-826639560,"Introduced changes:

remove the threat of mapping the same VA multiple times by vm_boot_alloc.
describe (and simplify) page size computation.
change buddy localization method.
fix typos.
add few assertions.",Is bug label still valid for this PR? Please resolve conflicts.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1085,2021-04-14T21:46:03Z,,2021-06-26T16:00:38Z,OPEN,False,43,20,3,https://github.com/MichalBlk,Fixes around physmem.,6,"['bug', 'review']",https://github.com/cahirwpz/mimiker/pull/1085,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/1085#issuecomment-841613454,"Introduced changes:

remove the threat of mapping the same VA multiple times by vm_boot_alloc.
describe (and simplify) page size computation.
change buddy localization method.
fix typos.
add few assertions.",Please resolve conflicts.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1085,2021-04-14T21:46:03Z,,2021-06-26T16:00:38Z,OPEN,False,43,20,3,https://github.com/MichalBlk,Fixes around physmem.,6,"['bug', 'review']",https://github.com/cahirwpz/mimiker/pull/1085,https://github.com/MichalBlk,4,https://github.com/cahirwpz/mimiker/pull/1085#issuecomment-841734940,"Introduced changes:

remove the threat of mapping the same VA multiple times by vm_boot_alloc.
describe (and simplify) page size computation.
change buddy localization method.
fix typos.
add few assertions.",Conflicts have been resolved.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1086,2021-04-16T10:14:22Z,2021-05-17T15:17:50Z,2021-05-17T15:17:50Z,MERGED,True,117,38,8,https://github.com/franciscozdo,Rewrite munmap,39,['accepted'],https://github.com/cahirwpz/mimiker/pull/1086,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/1086,"Current procedure of unmaping is a bit complicated.

Implement destroying range of vm_map_entry with splitting entry into parts.
Simplify do_munmap
Add test (and adjust one old) to check map entry splitting","Current procedure of unmaping is a bit complicated.

Implement destroying range of vm_map_entry with splitting entry into parts.
Simplify do_munmap
Add test (and adjust one old) to check map entry splitting",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1087,2021-04-17T20:05:16Z,2021-04-26T08:37:22Z,2021-04-26T08:37:27Z,MERGED,True,5,11,1,https://github.com/MichalBlk,"Ensure page alignment in KVM mapping routine and make ""contig"" functions more compact.",4,['accepted'],https://github.com/cahirwpz/mimiker/pull/1087,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1087,"Ensure that input VA in kva_map is page aligned (as kva_unmap does).
Make kmem_alloc_contig more compact by using kmem_map_contig.
Make kmem_map_contig more compact by using kva_map_page.","Ensure that input VA in kva_map is page aligned (as kva_unmap does).
Make kmem_alloc_contig more compact by using kmem_map_contig.
Make kmem_map_contig more compact by using kva_map_page.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1088,2021-04-17T20:13:27Z,2021-04-19T08:43:46Z,2021-05-18T09:54:19Z,MERGED,True,2,2,1,https://github.com/MichalBlk,Change adjacency assertions in vmem_free.,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1088,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1088,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1089,2021-04-18T16:39:49Z,2021-05-02T19:34:36Z,2021-05-02T19:34:36Z,CLOSED,False,2577,20,16,https://github.com/xThaid,Add evdev,5,['WiP'],https://github.com/cahirwpz/mimiker/pull/1089,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/1089,"evdev is the generic input event interface. Here's the documentation. Header files with definitions were imported without modifications. The code was based on the implementation from the FreeBSD.
I've also imported evtest - an utility tool for evdev. It required some functions from libc, so I've imported them from NetBSD and musl (a C standard library with MIT license).","evdev is the generic input event interface. Here's the documentation. Header files with definitions were imported without modifications. The code was based on the implementation from the FreeBSD.
I've also imported evtest - an utility tool for evdev. It required some functions from libc, so I've imported them from NetBSD and musl (a C standard library with MIT license).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1090,2021-04-19T10:15:08Z,2021-04-26T08:21:28Z,2021-04-26T08:21:31Z,MERGED,True,125,119,47,https://github.com/pj1031999,build: adjust build system for multiple config options,11,['accepted'],https://github.com/cahirwpz/mimiker/pull/1090,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1090,"Create separate SOURCES-$(OPTION) for each $(OPTION) listed in config.mk

if $(OPTION) is set to 1 then SOURCES-$(OPTION) will be built and linked into
kernel
if $(OPTION) is set to 0 then SOURCES-$(OPTION) will be excluded from
building
values other than 0 and 1 are undefined

SOURCES_ALL contains all SOURCES-$(OPTION) even if $(OPTION) is set to 0.
SOURCES_ALL will be always formatted.","Create separate SOURCES-$(OPTION) for each $(OPTION) listed in config.mk

if $(OPTION) is set to 1 then SOURCES-$(OPTION) will be built and linked into
kernel
if $(OPTION) is set to 0 then SOURCES-$(OPTION) will be excluded from
building
values other than 0 and 1 are undefined

SOURCES_ALL contains all SOURCES-$(OPTION) even if $(OPTION) is set to 0.
SOURCES_ALL will be always formatted.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1091,2021-04-20T16:24:55Z,,2021-06-23T05:59:08Z,OPEN,False,288,37,25,https://github.com/wiklam,Adding kgprof instrumentation for AArch64,26,[],https://github.com/cahirwpz/mimiker/pull/1091,https://github.com/wiklam,1,https://github.com/cahirwpz/mimiker/pull/1091,Depends on #1062,Depends on #1062,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1091,2021-04-20T16:24:55Z,,2021-06-23T05:59:08Z,OPEN,False,288,37,25,https://github.com/wiklam,Adding kgprof instrumentation for AArch64,26,[],https://github.com/cahirwpz/mimiker/pull/1091,https://github.com/pj1031999,2,https://github.com/cahirwpz/mimiker/pull/1091#issuecomment-826106614,Depends on #1062,@wiklam mark me for review when #1062 will be merged.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1091,2021-04-20T16:24:55Z,,2021-06-23T05:59:08Z,OPEN,False,288,37,25,https://github.com/wiklam,Adding kgprof instrumentation for AArch64,26,[],https://github.com/cahirwpz/mimiker/pull/1091,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/1091#issuecomment-866552024,Depends on #1062,Please resolve conflicts.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1092,2021-04-21T11:59:22Z,2021-04-26T08:42:51Z,2021-04-26T08:42:51Z,MERGED,True,22,34,1,https://github.com/MichalBlk,Fix pool allocator.,1,"['bug', 'accepted']",https://github.com/cahirwpz/mimiker/pull/1092,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1092,"Remove pool item constructors/destructors (they are never used).
In pool_alloc when we allocate a new slab, we have to remove it from the empty list (thus the else statement has been removed).
Fix pool_alloc signature.
Fix destory_slabs, i.e. set pg->slab to NULL before releasing slab's pages in kmem_free, and update pool's statistics.","Remove pool item constructors/destructors (they are never used).
In pool_alloc when we allocate a new slab, we have to remove it from the empty list (thus the else statement has been removed).
Fix pool_alloc signature.
Fix destory_slabs, i.e. set pg->slab to NULL before releasing slab's pages in kmem_free, and update pool's statistics.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1093,2021-04-23T21:47:21Z,2021-04-26T08:22:35Z,2021-04-26T08:22:35Z,MERGED,True,1415,0,4,https://github.com/xThaid,[evdev 1/3] Add prerequisites for evdev,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1093,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/1093,This PR adds header files and one libc function required by the evdev (#1089). Everything was copied from NetBSD & FreeBSD and left unmodified.,This PR adds header files and one libc function required by the evdev (#1089). Everything was copied from NetBSD & FreeBSD and left unmodified.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1094,2021-04-24T17:18:07Z,2021-05-24T12:00:28Z,2021-05-24T12:00:31Z,MERGED,True,225,213,16,https://github.com/pj1031999,AArch64/boot: use dtb instead of atags,17,"['accepted', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/1094,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1094,"Use dtb instead of atags for AArch64 bootstrap.
It's a more readable version of #1068.","Use dtb instead of atags for AArch64 bootstrap.
It's a more readable version of #1068.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1095,2021-04-24T22:57:50Z,2021-05-02T10:15:34Z,2021-05-02T10:15:34Z,MERGED,True,989,22,6,https://github.com/xThaid,[evdev 2/3] Introduce evdev - generic input event interface,8,['accepted'],https://github.com/cahirwpz/mimiker/pull/1095,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/1095,The part of the #1089 PR containing only the implementation of evdev. Should be merged after #1093.,The part of the #1089 PR containing only the implementation of evdev. Should be merged after #1093.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1095,2021-04-24T22:57:50Z,2021-05-02T10:15:34Z,2021-05-02T10:15:34Z,MERGED,True,989,22,6,https://github.com/xThaid,[evdev 2/3] Introduce evdev - generic input event interface,8,['accepted'],https://github.com/cahirwpz/mimiker/pull/1095,https://github.com/hadarai,2,https://github.com/cahirwpz/mimiker/pull/1095#issuecomment-826797733,The part of the #1089 PR containing only the implementation of evdev. Should be merged after #1093.,"Please write all comments in Doxygen convection
(the one with \brief, \summary etc.)

According to decisions from latest meeting that request is outdated.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1096,2021-04-24T23:02:57Z,,2022-03-25T11:24:09Z,OPEN,False,126,1,5,https://github.com/xThaid,[evdev 3/3] Import evtest program,2,['blocked'],https://github.com/cahirwpz/mimiker/pull/1096,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/1096,"The last part of the #1089 PR. This one imports the utility tool used for evdev - evtest.
versionsort.c isn't in the libc, because we don't want code there other than imported from BSDs.
Blocked by: #1124
To test the program, you need to compile evtest separately (my running make in evtest directory). Then launch Mimiker in graphical mode, run evtest and press some keys with the window focused.","The last part of the #1089 PR. This one imports the utility tool used for evdev - evtest.
versionsort.c isn't in the libc, because we don't want code there other than imported from BSDs.
Blocked by: #1124
To test the program, you need to compile evtest separately (my running make in evtest directory). Then launch Mimiker in graphical mode, run evtest and press some keys with the window focused.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1098,2021-04-26T11:27:04Z,2021-06-12T10:02:13Z,2021-06-12T10:02:14Z,MERGED,True,103,1,2,https://github.com/hadarai,Onboarding note,23,['review'],https://github.com/cahirwpz/mimiker/pull/1098,https://github.com/hadarai,1,https://github.com/cahirwpz/mimiker/pull/1098,"It's onboarding for any new in the project.
It's supposed to contain:

project general overview
description of file hierarchy
Licence description
General tips for work in project?","It's onboarding for any new in the project.
It's supposed to contain:

project general overview
description of file hierarchy
Licence description
General tips for work in project?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1098,2021-04-26T11:27:04Z,2021-06-12T10:02:13Z,2021-06-12T10:02:14Z,MERGED,True,103,1,2,https://github.com/hadarai,Onboarding note,23,['review'],https://github.com/cahirwpz/mimiker/pull/1098,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/1098#issuecomment-843034933,"It's onboarding for any new in the project.
It's supposed to contain:

project general overview
description of file hierarchy
Licence description
General tips for work in project?",@hadarai Have you looked into how the file is actually rendered by GitHub interface? I think that ^1 stuff doesn't work as intended. Please have a look at markdown cheatsheet. The construct you used is not listed there.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1098,2021-04-26T11:27:04Z,2021-06-12T10:02:13Z,2021-06-12T10:02:14Z,MERGED,True,103,1,2,https://github.com/hadarai,Onboarding note,23,['review'],https://github.com/cahirwpz/mimiker/pull/1098,https://github.com/hadarai,3,https://github.com/cahirwpz/mimiker/pull/1098#issuecomment-843040285,"It's onboarding for any new in the project.
It's supposed to contain:

project general overview
description of file hierarchy
Licence description
General tips for work in project?","@hadarai Have you looked into how the file is actually rendered by GitHub interface? I think that ^1 stuff doesn't work as intended. Please have a look at markdown cheatsheet. The construct you used is not listed there.

Done.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1099,2021-04-26T11:41:44Z,2021-04-26T12:53:44Z,2021-04-26T12:53:53Z,MERGED,True,2,2,1,https://github.com/pj1031999,aarch64/pmap: fix pmap_kremove,1,"['bug', 'accepted', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/1099,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1099,Unmap all pages in range.,Unmap all pages in range.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1100,2021-04-28T20:19:53Z,2021-05-17T06:41:52Z,2021-05-17T06:41:52Z,MERGED,True,2,0,1,https://github.com/franciscozdo,Add assertion in kgprof.c,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1100,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/1100,This one assertion will help understanding entry conditions in kgprof_tick. We make here access to _gmonparam without taking a lock and it was confusing without knowing that this function is called under interrupts disabled.,This one assertion will help understanding entry conditions in kgprof_tick. We make here access to _gmonparam without taking a lock and it was confusing without knowing that this function is called under interrupts disabled.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1101,2021-04-29T14:32:19Z,2022-06-06T11:57:25Z,2022-06-06T11:57:25Z,MERGED,True,813,38,10,https://github.com/mohrcore,e.MMC controller driver for BCM2835,103,"['accepted', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/1101,https://github.com/mohrcore,1,https://github.com/cahirwpz/mimiker/pull/1101,"This PR introduces an e.MMC controller driver for the driver on BCM2835 board and its derivatives. There are also minor e.MMC interface tweaks, mostly a couple of new flags, and some edits to comments.
This code is a part of the work done within #859.
The code is technically dead, as it's not compiled. That's because the driver references an emmc device class, but there's not a single device driver withing this class yet, which results in a linker error. I made this code into a new PR to make the code review process easier.","This PR introduces an e.MMC controller driver for the driver on BCM2835 board and its derivatives. There are also minor e.MMC interface tweaks, mostly a couple of new flags, and some edits to comments.
This code is a part of the work done within #859.
The code is technically dead, as it's not compiled. That's because the driver references an emmc device class, but there's not a single device driver withing this class yet, which results in a linker error. I made this code into a new PR to make the code review process easier.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1102,2021-04-29T15:58:10Z,2021-05-02T13:55:30Z,2021-05-02T13:55:30Z,MERGED,True,223,268,8,https://github.com/xThaid,graphics: change the interface of VGA,8,['accepted'],https://github.com/cahirwpz/mimiker/pull/1102,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/1102,"As we discusses at the meetings, the interface of VGA needs to be changed. So here it is. Now instead of 3 files, we have only one, which can be configured using ioctl's.
I also modified two user-space programs to make it compatible with the new interface: mandelbrot (which in fact didn't worked before) and doom (it displays something reasonable, but I have no idea what it supposed to show).","As we discusses at the meetings, the interface of VGA needs to be changed. So here it is. Now instead of 3 files, we have only one, which can be configured using ioctl's.
I also modified two user-space programs to make it compatible with the new interface: mandelbrot (which in fact didn't worked before) and doom (it displays something reasonable, but I have no idea what it supposed to show).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1102,2021-04-29T15:58:10Z,2021-05-02T13:55:30Z,2021-05-02T13:55:30Z,MERGED,True,223,268,8,https://github.com/xThaid,graphics: change the interface of VGA,8,['accepted'],https://github.com/cahirwpz/mimiker/pull/1102,https://github.com/xThaid,2,https://github.com/cahirwpz/mimiker/pull/1102#issuecomment-830673607,"As we discusses at the meetings, the interface of VGA needs to be changed. So here it is. Now instead of 3 files, we have only one, which can be configured using ioctl's.
I also modified two user-space programs to make it compatible with the new interface: mandelbrot (which in fact didn't worked before) and doom (it displays something reasonable, but I have no idea what it supposed to show).","Doom works as a charm now. The problem was with a file offset, is in fact it was broken some time ago.",True,{'HOORAY': ['https://github.com/wiklam']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1102,2021-04-29T15:58:10Z,2021-05-02T13:55:30Z,2021-05-02T13:55:30Z,MERGED,True,223,268,8,https://github.com/xThaid,graphics: change the interface of VGA,8,['accepted'],https://github.com/cahirwpz/mimiker/pull/1102,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/1102#issuecomment-830813134,"As we discusses at the meetings, the interface of VGA needs to be changed. So here it is. Now instead of 3 files, we have only one, which can be configured using ioctl's.
I also modified two user-space programs to make it compatible with the new interface: mandelbrot (which in fact didn't worked before) and doom (it displays something reasonable, but I have no idea what it supposed to show).",Tested with mandelbrot and doom. Works ok :),True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1103,2021-04-29T18:06:51Z,2021-05-18T08:47:18Z,2021-05-18T09:54:14Z,MERGED,True,524,159,7,https://github.com/MichalBlk,Introduce device file nodes.,37,['accepted'],https://github.com/cahirwpz/mimiker/pull/1103,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1103,"Enhance the devfs implementation to support device switch tables.
Rewrite the rtc driver (I left PS/2 keyboard unchanged due to the new evdev layer).","Enhance the devfs implementation to support device switch tables.
Rewrite the rtc driver (I left PS/2 keyboard unchanged due to the new evdev layer).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1103,2021-04-29T18:06:51Z,2021-05-18T08:47:18Z,2021-05-18T09:54:14Z,MERGED,True,524,159,7,https://github.com/MichalBlk,Introduce device file nodes.,37,['accepted'],https://github.com/cahirwpz/mimiker/pull/1103,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/1103#issuecomment-830841410,"Enhance the devfs implementation to support device switch tables.
Rewrite the rtc driver (I left PS/2 keyboard unchanged due to the new evdev layer).",Please merge with master and resolve conflicts.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1103,2021-04-29T18:06:51Z,2021-05-18T08:47:18Z,2021-05-18T09:54:14Z,MERGED,True,524,159,7,https://github.com/MichalBlk,Introduce device file nodes.,37,['accepted'],https://github.com/cahirwpz/mimiker/pull/1103,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/1103#issuecomment-831796316,"Enhance the devfs implementation to support device switch tables.
Rewrite the rtc driver (I left PS/2 keyboard unchanged due to the new evdev layer).",Ok. There's one major drawback of this solution. As we know we can create multiple instances of opened file that refers to the same device file. If so then the access to the device is not synchronized. ATM I see no other solutions that to lower devfs provided fileops to vnodeops layer and use vnode lock.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1103,2021-04-29T18:06:51Z,2021-05-18T08:47:18Z,2021-05-18T09:54:14Z,MERGED,True,524,159,7,https://github.com/MichalBlk,Introduce device file nodes.,37,['accepted'],https://github.com/cahirwpz/mimiker/pull/1103,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/1103#issuecomment-831933137,"Enhance the devfs implementation to support device switch tables.
Rewrite the rtc driver (I left PS/2 keyboard unchanged due to the new evdev layer).",Ok. Fixed that. Right now an access to device node is synchronized by vnode that refers to the node.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1103,2021-04-29T18:06:51Z,2021-05-18T08:47:18Z,2021-05-18T09:54:14Z,MERGED,True,524,159,7,https://github.com/MichalBlk,Introduce device file nodes.,37,['accepted'],https://github.com/cahirwpz/mimiker/pull/1103,https://github.com/cahirwpz,5,https://github.com/cahirwpz/mimiker/pull/1103#issuecomment-835771512,"Enhance the devfs implementation to support device switch tables.
Rewrite the rtc driver (I left PS/2 keyboard unchanged due to the new evdev layer).","Since some devices (e.g. evdev) need to keep state for each instance of opened device, we need to use fileops interface.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1104,2021-05-02T14:21:25Z,2021-06-12T10:00:02Z,2021-06-12T10:00:02Z,MERGED,True,27,11,6,https://github.com/franciscozdo,Fix authorization during change of file timestamps,6,['accepted'],https://github.com/cahirwpz/mimiker/pull/1104,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/1104,"This check was too simple. According to manual semantics of utimesat is a bit different [1].
Times can be change to any value only by owner or root. Any other user can set times only to current time.
Also changed return type of cred_can_utime to match other functions used to set file attributes.
[1] utimensat(2)","This check was too simple. According to manual semantics of utimesat is a bit different [1].
Times can be change to any value only by owner or root. Any other user can set times only to current time.
Also changed return type of cred_can_utime to match other functions used to set file attributes.
[1] utimensat(2)",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1104,2021-05-02T14:21:25Z,2021-06-12T10:00:02Z,2021-06-12T10:00:02Z,MERGED,True,27,11,6,https://github.com/franciscozdo,Fix authorization during change of file timestamps,6,['accepted'],https://github.com/cahirwpz/mimiker/pull/1104,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/1104#issuecomment-858433295,"This check was too simple. According to manual semantics of utimesat is a bit different [1].
Times can be change to any value only by owner or root. Any other user can set times only to current time.
Also changed return type of cred_can_utime to match other functions used to set file attributes.
[1] utimensat(2)","For the record:

Linux futimens says:

Permissions requirements
       To  set  both file timestamps to the current time (i.e., times is NULL,
       or both tv_nsec fields specify UTIME_NOW), either:

       1. the caller must have write access to the file;
       2. the caller's effective user ID must match the owner of the file; or
       3. the caller must have appropriate privileges.

       To make any change other than setting both timestamps  to  the  current
       time  (i.e.,  times is not NULL, and neither tv_nsec field is UTIME_NOW
       and neither tv_nsec field is UTIME_OMIT), either condition 2 or 3 above
       must apply.

       If both tv_nsec fields are specified as UTIME_OMIT, then no file owner‐
       ship or permission checks are performed, and the  file  timestamps  are
       not modified, but other error conditions may still be detected.


FreeBSD futimens says:

     If both tv_nsec fields are UTIME_OMIT, the timestamps remain unchanged
     and no permissions are needed for the file itself, although search per‐
     missions may be required for the path prefix.  The call may or may not
     succeed if the named file does not exist.

     If both tv_nsec fields are UTIME_NOW, the caller must be the owner of the
     file, have permission to write the file, or be the super-user.

     For all other values of the timestamps, the caller must be the owner of
     the file or be the super-user.


POSIX standard futimens says:

Only a process with the effective user ID equal to the user ID of the file,
or with write access to the file, or with appropriate privileges may use futimens()
or utimensat() with a null pointer as the times argument or with both tv_nsec fields
set to the special value UTIME_NOW. Only a process with the effective user ID equal
to the user ID of the file or with appropriate privileges may use futimens() or utimensat()
with a non-null times argument that does not have both tv_nsec fields set to UTIME_NOW
and does not have both tv_nsec fields set to UTIME_OMIT. If both tv_nsec fields are set
to UTIME_OMIT, no ownership or permissions check shall be performed for the file,
 but other error conditions may still be detected (including [EACCES] errors related to the path prefix).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1104,2021-05-02T14:21:25Z,2021-06-12T10:00:02Z,2021-06-12T10:00:02Z,MERGED,True,27,11,6,https://github.com/franciscozdo,Fix authorization during change of file timestamps,6,['accepted'],https://github.com/cahirwpz/mimiker/pull/1104,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/1104#issuecomment-858436949,"This check was too simple. According to manual semantics of utimesat is a bit different [1].
Times can be change to any value only by owner or root. Any other user can set times only to current time.
Also changed return type of cred_can_utime to match other functions used to set file attributes.
[1] utimensat(2)",Since you have not provided any tests for futimens I'm not sure which cases described by the manual pages are covered. For sure you don't handle UTIME_NOW. Please re-read manual pages I posted above.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1104,2021-05-02T14:21:25Z,2021-06-12T10:00:02Z,2021-06-12T10:00:02Z,MERGED,True,27,11,6,https://github.com/franciscozdo,Fix authorization during change of file timestamps,6,['accepted'],https://github.com/cahirwpz/mimiker/pull/1104,https://github.com/cahirwpz,4,https://github.com/cahirwpz/mimiker/pull/1104#issuecomment-860030935,"This check was too simple. According to manual semantics of utimesat is a bit different [1].
Times can be change to any value only by owner or root. Any other user can set times only to current time.
Also changed return type of cred_can_utime to match other functions used to set file attributes.
[1] utimensat(2)","Let's do several things in separate PRs:

handle UTIME_* values correctly
implement tests
evaluate if permission checks can be move up into VFS layer",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1105,2021-05-02T15:25:19Z,2021-05-02T20:22:27Z,2021-05-02T20:22:30Z,MERGED,True,96,71,19,https://github.com/cahirwpz,Move ioflags from VOP_READ/WRITE arguments into uio::uio_ioflags,2,['accepted'],https://github.com/cahirwpz/mimiker/pull/1105,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/1105,"Clean up file flags: they express allowed operations and I/O operation flags (nonblocking, append, ...)

Changes extracted from #1103.","Clean up file flags: they express allowed operations and I/O operation flags (nonblocking, append, ...)

Changes extracted from #1103.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1106,2021-05-03T10:59:03Z,2022-06-06T20:08:01Z,2022-06-06T20:08:01Z,CLOSED,False,3097,2,18,https://github.com/pj1031999,bin/dd: import dd from NetBSD,5,['WiP'],https://github.com/cahirwpz/mimiker/pull/1106,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1106,"alt_io and nosigpipe were commented from ioflags in dd
sccsid and __RCSID were commented
raise_default_signal was added to libutil
strsuftoll and strsuftollx were added to libc
posix_memalign was exposed","alt_io and nosigpipe were commented from ioflags in dd
sccsid and __RCSID were commented
raise_default_signal was added to libutil
strsuftoll and strsuftollx were added to libc
posix_memalign was exposed",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1106,2021-05-03T10:59:03Z,2022-06-06T20:08:01Z,2022-06-06T20:08:01Z,CLOSED,False,3097,2,18,https://github.com/pj1031999,bin/dd: import dd from NetBSD,5,['WiP'],https://github.com/cahirwpz/mimiker/pull/1106,https://github.com/pj1031999,2,https://github.com/cahirwpz/mimiker/pull/1106#issuecomment-864891932,"alt_io and nosigpipe were commented from ioflags in dd
sccsid and __RCSID were commented
raise_default_signal was added to libutil
strsuftoll and strsuftollx were added to libc
posix_memalign was exposed",@mohrcore any update?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1106,2021-05-03T10:59:03Z,2022-06-06T20:08:01Z,2022-06-06T20:08:01Z,CLOSED,False,3097,2,18,https://github.com/pj1031999,bin/dd: import dd from NetBSD,5,['WiP'],https://github.com/cahirwpz/mimiker/pull/1106,https://github.com/mohrcore,3,https://github.com/cahirwpz/mimiker/pull/1106#issuecomment-874892170,"alt_io and nosigpipe were commented from ioflags in dd
sccsid and __RCSID were commented
raise_default_signal was added to libutil
strsuftoll and strsuftollx were added to libc
posix_memalign was exposed","@pj1031999 I'll make an update this week. Sorry for keeping you all waiting. I need to organize time in some decent way now that I have an internship, thesis, mimiker and a non-cs side-project to take care of at the same time. I admit that since my focus shifted towards vcache, when it comes to mimiker, bin/dd ended up being rather low on my priority list.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1106,2021-05-03T10:59:03Z,2022-06-06T20:08:01Z,2022-06-06T20:08:01Z,CLOSED,False,3097,2,18,https://github.com/pj1031999,bin/dd: import dd from NetBSD,5,['WiP'],https://github.com/cahirwpz/mimiker/pull/1106,https://github.com/mohrcore,4,https://github.com/cahirwpz/mimiker/pull/1106#issuecomment-874897117,"alt_io and nosigpipe were commented from ioflags in dd
sccsid and __RCSID were commented
raise_default_signal was added to libutil
strsuftoll and strsuftollx were added to libc
posix_memalign was exposed","There's also the question whether we should close this PR and merge a simpler implementation, like the one from OpenBSD instead. I agree with @franciscozdo, we probably don't need such complex implementation of dd anyway. @cahirwpz what do you think? Last time we spoke, you or @pj1031999 told me that the reason for using NetBSD's implementation is that taking the userspace from NetBSD is a sort of a convention in Mimiker. Is it still the case or should I not bother with that?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1106,2021-05-03T10:59:03Z,2022-06-06T20:08:01Z,2022-06-06T20:08:01Z,CLOSED,False,3097,2,18,https://github.com/pj1031999,bin/dd: import dd from NetBSD,5,['WiP'],https://github.com/cahirwpz/mimiker/pull/1106,https://github.com/cahirwpz,5,https://github.com/cahirwpz/mimiker/pull/1106#issuecomment-1147866352,"alt_io and nosigpipe were commented from ioflags in dd
sccsid and __RCSID were commented
raise_default_signal was added to libutil
strsuftoll and strsuftollx were added to libc
posix_memalign was exposed",I've looked into suckless dd implementation which is only 233 lines of code. I cannot understand why NetBSD's counterpart require 10 times more lines to do basically the same. I'm strongly leaning towards removing all NetBSD tools and replace them with suckless tools. Mimiker doesn't need to be so bloated.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1107,2021-05-04T20:25:07Z,2021-05-14T14:04:55Z,2021-05-14T14:04:55Z,MERGED,True,1,1,1,https://github.com/MichalBlk,Fix kmem_map_contig invocation.,1,"['bug', 'accepted']",https://github.com/cahirwpz/mimiker/pull/1107,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1107,"kmem_map_contig doesn't receive size in PAGESIZE units but rather in bytes, thereby the invocation within kmem_alloc_contig has to be changed.","kmem_map_contig doesn't receive size in PAGESIZE units but rather in bytes, thereby the invocation within kmem_alloc_contig has to be changed.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1108,2021-05-06T18:03:26Z,2021-05-14T14:07:45Z,2021-05-14T14:07:46Z,MERGED,True,0,1,1,https://github.com/MichalBlk,Remove an assert in add_slab.,1,"['bug', 'accepted']",https://github.com/cahirwpz/mimiker/pull/1108,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1108,"The slab member of the vm_page_t structure is a member of an anonymous union, thus we can't assume it has a known value when we start using this field.","The slab member of the vm_page_t structure is a member of an anonymous union, thus we can't assume it has a known value when we start using this field.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1109,2021-05-06T19:12:14Z,2021-05-31T09:23:11Z,2021-05-31T09:23:11Z,MERGED,True,903,1,5,https://github.com/MichalBlk,UHCI host controller driver.,31,['accepted'],https://github.com/cahirwpz/mimiker/pull/1109,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1109,"Extracts a major number of changes from #935. Contains changes presented in #1107, #1108, #1112, and #1117.","Extracts a major number of changes from #935. Contains changes presented in #1107, #1108, #1112, and #1117.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1110,2021-05-07T08:06:24Z,2022-03-25T10:56:53Z,2022-03-25T10:56:53Z,CLOSED,False,627,6,14,https://github.com/xThaid,add kevent - kernel event notification mechanism,2,['WiP'],https://github.com/cahirwpz/mimiker/pull/1110,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/1110,"This is the implementation of kevent.
Currently work in progress.","This is the implementation of kevent.
Currently work in progress.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1111,2021-05-08T09:46:48Z,2021-05-18T10:28:16Z,2021-05-18T10:28:16Z,MERGED,True,28,0,1,https://github.com/hadarai,Tags standard wiki page,8,['accepted'],https://github.com/cahirwpz/mimiker/pull/1111,https://github.com/hadarai,1,https://github.com/cahirwpz/mimiker/pull/1111,"It's a page with the proposition of new standard for tags, that are used to mark more important comments. The goal is to ease up finding specific comments
Information:

new convection with description for new ones
(proposition) paragraph explaining what is being changed","It's a page with the proposition of new standard for tags, that are used to mark more important comments. The goal is to ease up finding specific comments
Information:

new convection with description for new ones
(proposition) paragraph explaining what is being changed",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1111,2021-05-08T09:46:48Z,2021-05-18T10:28:16Z,2021-05-18T10:28:16Z,MERGED,True,28,0,1,https://github.com/hadarai,Tags standard wiki page,8,['accepted'],https://github.com/cahirwpz/mimiker/pull/1111,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/1111#issuecomment-835774258,"It's a page with the proposition of new standard for tags, that are used to mark more important comments. The goal is to ease up finding specific comments
Information:

new convection with description for new ones
(proposition) paragraph explaining what is being changed",Please provide a description for the PR.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1111,2021-05-08T09:46:48Z,2021-05-18T10:28:16Z,2021-05-18T10:28:16Z,MERGED,True,28,0,1,https://github.com/hadarai,Tags standard wiki page,8,['accepted'],https://github.com/cahirwpz/mimiker/pull/1111,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/1111#issuecomment-841613835,"It's a page with the proposition of new standard for tags, that are used to mark more important comments. The goal is to ease up finding specific comments
Information:

new convection with description for new ones
(proposition) paragraph explaining what is being changed",Please rewrite this document so that it tells a reader what tags are used for and when to use them.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1112,2021-05-10T08:17:09Z,2021-05-14T14:16:54Z,2021-05-14T14:16:55Z,MERGED,True,167,116,4,https://github.com/MichalBlk,Update USB headers.,4,['accepted'],https://github.com/cahirwpz/mimiker/pull/1112,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1112,Present some changes which has arisen during work around #935.,Present some changes which has arisen during work around #935.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1113,2021-05-10T08:23:59Z,2021-05-17T15:19:15Z,2021-05-18T09:53:44Z,MERGED,True,184,0,2,https://github.com/MichalBlk,Introduce USB interfaces.,9,['accepted'],https://github.com/cahirwpz/mimiker/pull/1113,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1113,"Introduce USB interfaces to implement by a USB bus driver.
The interfaces include:

USB standard interface (i.e. standard transfer typed),
USB standard requests interface,
USB HID specific standard requests interface,
USB Bulk-Only specific standard requests interface.

This PR contains changes introduced in #1112.","Introduce USB interfaces to implement by a USB bus driver.
The interfaces include:

USB standard interface (i.e. standard transfer typed),
USB standard requests interface,
USB HID specific standard requests interface,
USB Bulk-Only specific standard requests interface.

This PR contains changes introduced in #1112.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1114,2021-05-10T08:25:33Z,2021-06-11T14:53:45Z,2021-06-11T14:53:45Z,MERGED,True,847,9,1,https://github.com/MichalBlk,USB bus driver.,21,['accepted'],https://github.com/cahirwpz/mimiker/pull/1114,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1114,"Introduce a USB bus driver.
This PR contains changes presented in #1112, #1113, and #1115.","Introduce a USB bus driver.
This PR contains changes presented in #1112, #1113, and #1115.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1115,2021-05-10T08:50:16Z,2021-06-11T14:19:58Z,2021-06-11T14:19:58Z,MERGED,True,6,0,2,https://github.com/MichalBlk,Introduce device_remove_child.,4,['accepted'],https://github.com/cahirwpz/mimiker/pull/1115,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1115,This function is required by #1114.,This function is required by #1114.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1116,2021-05-10T08:57:28Z,2021-05-13T18:04:06Z,2021-05-13T18:04:07Z,CLOSED,False,4,0,1,https://github.com/MichalBlk,Introduce ringbuf_contains.,1,['review'],https://github.com/cahirwpz/mimiker/pull/1116,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1116,This function is required by #1114.,This function is required by #1114.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1116,2021-05-10T08:57:28Z,2021-05-13T18:04:06Z,2021-05-13T18:04:07Z,CLOSED,False,4,0,1,https://github.com/MichalBlk,Introduce ringbuf_contains.,1,['review'],https://github.com/cahirwpz/mimiker/pull/1116,https://github.com/MichalBlk,2,https://github.com/cahirwpz/mimiker/pull/1116#issuecomment-840732798,This function is required by #1114.,"FTTB, this change is no longer needed.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1117,2021-05-13T10:55:12Z,2021-05-31T08:50:14Z,2021-06-01T06:09:35Z,MERGED,True,33,15,4,https://github.com/MichalBlk,Add the alignment feature to the pool allocator.,11,['accepted'],https://github.com/cahirwpz/mimiker/pull/1117,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1117,"We should be able to tell a pool what alignment should be ensured.
This PR contains changes presented in #1141.","We should be able to tell a pool what alignment should be ensured.
This PR contains changes presented in #1141.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1118,2021-05-15T17:07:19Z,,2021-05-28T09:36:28Z,OPEN,False,571,1,5,https://github.com/MichalBlk,USB mass storage device driver.,5,['review'],https://github.com/cahirwpz/mimiker/pull/1118,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1118,"Introduce a USB mass storage device driver.
This PR contains changes presented in #1113.","Introduce a USB mass storage device driver.
This PR contains changes presented in #1113.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1119,2021-05-16T15:34:24Z,2021-06-07T10:08:27Z,2021-06-07T10:08:27Z,MERGED,True,123,1,7,https://github.com/hadarai,`SIGPIPE` tests,37,['accepted'],https://github.com/cahirwpz/mimiker/pull/1119,https://github.com/hadarai,1,https://github.com/cahirwpz/mimiker/pull/1119,"Introduction of int pipe2(int pipefd[2], int flags) tests. This PR tests delivery of SIGPIPE and return of EPIPE. Because these things happen simultaneously, I check them both at once.
There are two test cases:

Parent writing to child who closed reading end, resulting in SIGPIPE delivery and return of EPIPE for parent.
Child writing to parent who closed reading end, resulting in SIGPIPE delivery and return of EPIPE for child.

On the same time it's a test of symmetry pipe implementation.
By the way there is a fix for a test fail cause and some additions to ""Test infrastructure"" readme.","Introduction of int pipe2(int pipefd[2], int flags) tests. This PR tests delivery of SIGPIPE and return of EPIPE. Because these things happen simultaneously, I check them both at once.
There are two test cases:

Parent writing to child who closed reading end, resulting in SIGPIPE delivery and return of EPIPE for parent.
Child writing to parent who closed reading end, resulting in SIGPIPE delivery and return of EPIPE for child.

On the same time it's a test of symmetry pipe implementation.
By the way there is a fix for a test fail cause and some additions to ""Test infrastructure"" readme.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1119,2021-05-16T15:34:24Z,2021-06-07T10:08:27Z,2021-06-07T10:08:27Z,MERGED,True,123,1,7,https://github.com/hadarai,`SIGPIPE` tests,37,['accepted'],https://github.com/cahirwpz/mimiker/pull/1119,https://github.com/hadarai,2,https://github.com/cahirwpz/mimiker/pull/1119#issuecomment-850368781,"Introduction of int pipe2(int pipefd[2], int flags) tests. This PR tests delivery of SIGPIPE and return of EPIPE. Because these things happen simultaneously, I check them both at once.
There are two test cases:

Parent writing to child who closed reading end, resulting in SIGPIPE delivery and return of EPIPE for parent.
Child writing to parent who closed reading end, resulting in SIGPIPE delivery and return of EPIPE for child.

On the same time it's a test of symmetry pipe implementation.
By the way there is a fix for a test fail cause and some additions to ""Test infrastructure"" readme.","Tests showed that we were:

not sending SIGPIPE to process which tries to write to pipe where no one reads.
returning wrong error. When no one reads then ""pipe's broken""(EPIPE) and not ""Illegal seek"" (ESPIPE) (why is it even called like that?)

Of course, I fixed both of these oversights.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1120,2021-05-16T19:46:52Z,2021-05-18T08:48:20Z,2021-05-18T08:48:20Z,MERGED,True,138,3,2,https://github.com/xThaid,[kevent 1/5] Add header file for kevent,2,['accepted'],https://github.com/cahirwpz/mimiker/pull/1120,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/1120,Add a header file for incoming feature.,Add a header file for incoming feature.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1121,2021-05-16T19:48:55Z,2021-05-18T13:15:17Z,2021-05-18T13:15:17Z,MERGED,True,118,2,14,https://github.com/xThaid,[kevent 2/5] Add prerequisites for kevent,2,['accepted'],https://github.com/cahirwpz/mimiker/pull/1121,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/1121,"This PR adds some misc stuff required for kevents:

Implementation of new syscalls
kqueues are closed on fork
Make one time related function public","This PR adds some misc stuff required for kevents:

Implementation of new syscalls
kqueues are closed on fork
Make one time related function public",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1122,2021-05-16T19:50:21Z,,2022-04-04T17:29:17Z,OPEN,False,443,2,2,https://github.com/xThaid,[kevent 3/5] kevent implementation,6,['accepted'],https://github.com/cahirwpz/mimiker/pull/1122,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/1122,"This PR is the main part of the kevent subsystem. It implements the base functionalities of kqueues, knotes and kevents.
WIP: I need to add some comments. Ready for a review.","This PR is the main part of the kevent subsystem. It implements the base functionalities of kqueues, knotes and kevents.
WIP: I need to add some comments. Ready for a review.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1122,2021-05-16T19:50:21Z,,2022-04-04T17:29:17Z,OPEN,False,443,2,2,https://github.com/xThaid,[kevent 3/5] kevent implementation,6,['accepted'],https://github.com/cahirwpz/mimiker/pull/1122,https://github.com/xThaid,2,https://github.com/cahirwpz/mimiker/pull/1122#issuecomment-1086051067,"This PR is the main part of the kevent subsystem. It implements the base functionalities of kqueues, knotes and kevents.
WIP: I need to add some comments. Ready for a review.",We decided not to write tests for this feature.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1123,2021-05-16T19:51:54Z,2021-05-17T05:55:29Z,2021-05-17T05:55:36Z,MERGED,True,25,3,7,https://github.com/mohrcore,Implement sync and fsync syscalls as NOPs,5,['accepted'],https://github.com/cahirwpz/mimiker/pull/1123,https://github.com/mohrcore,1,https://github.com/cahirwpz/mimiker/pull/1123,"The rationale is that we don't have a buffering system yet, so doing nothing inside these syscalls satisfies all of their exit conditions for a successfull execution.
This allows programs such as dd (#1106) to operate without exiting early with error messages resulting from missing syscalls.","The rationale is that we don't have a buffering system yet, so doing nothing inside these syscalls satisfies all of their exit conditions for a successfull execution.
This allows programs such as dd (#1106) to operate without exiting early with error messages resulting from missing syscalls.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1123,2021-05-16T19:51:54Z,2021-05-17T05:55:29Z,2021-05-17T05:55:36Z,MERGED,True,25,3,7,https://github.com/mohrcore,Implement sync and fsync syscalls as NOPs,5,['accepted'],https://github.com/cahirwpz/mimiker/pull/1123,https://github.com/mohrcore,2,https://github.com/cahirwpz/mimiker/pull/1123#issuecomment-841870826,"The rationale is that we don't have a buffering system yet, so doing nothing inside these syscalls satisfies all of their exit conditions for a successfull execution.
This allows programs such as dd (#1106) to operate without exiting early with error messages resulting from missing syscalls.","The code builds fine in my local workspace, yet it fails to build in CI. Looks like the required code generation doesn't happen here in some cases. Should I include the re-generated files to the PR as well?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1123,2021-05-16T19:51:54Z,2021-05-17T05:55:29Z,2021-05-17T05:55:36Z,MERGED,True,25,3,7,https://github.com/mohrcore,Implement sync and fsync syscalls as NOPs,5,['accepted'],https://github.com/cahirwpz/mimiker/pull/1123,https://github.com/xThaid,3,https://github.com/cahirwpz/mimiker/pull/1123#issuecomment-841882241,"The rationale is that we don't have a buffering system yet, so doing nothing inside these syscalls satisfies all of their exit conditions for a successfull execution.
This allows programs such as dd (#1106) to operate without exiting early with error messages resulting from missing syscalls.",Try running make -C sys/kern sysent.h in the main directory. It should rebuild syscalls table and so on.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1124,2021-05-16T19:52:05Z,,2022-03-25T11:00:10Z,OPEN,False,193,0,3,https://github.com/xThaid,[kevent 4/5] Implement select syscall as a wrapper of kevent,3,['review'],https://github.com/cahirwpz/mimiker/pull/1124,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/1124,"As it turned out, select system call can be implemented as a libc wrapper for kevent. Maybe it isn't the most efficient solution, but will do.","As it turned out, select system call can be implemented as a libc wrapper for kevent. Maybe it isn't the most efficient solution, but will do.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1125,2021-05-16T19:53:23Z,,2022-03-25T10:50:17Z,OPEN,False,64,9,1,https://github.com/xThaid,[kevent 5/5] Add support for kevent in evdev,3,['review'],https://github.com/cahirwpz/mimiker/pull/1125,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/1125,"With this change, it will be possible to use select with evdev device.","With this change, it will be possible to use select with evdev device.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1126,2021-05-19T11:09:43Z,,2021-05-28T08:17:03Z,OPEN,False,30,30,1,https://github.com/xThaid,Port evdev to devnode interface,1,['review'],https://github.com/cahirwpz/mimiker/pull/1126,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/1126,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1127,2021-05-19T11:32:01Z,,2021-05-28T08:13:18Z,OPEN,False,20,27,2,https://github.com/xThaid,Port stdvga to devnode interface,1,['review'],https://github.com/cahirwpz/mimiker/pull/1127,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/1127,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1128,2021-05-19T21:59:46Z,,2021-05-28T08:05:49Z,OPEN,False,28,45,4,https://github.com/xThaid,Port dev cons & null & zero to devnode interface,2,['review'],https://github.com/cahirwpz/mimiker/pull/1128,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/1128,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1130,2021-05-21T09:09:12Z,2021-05-24T13:05:08Z,2021-05-24T13:05:08Z,MERGED,True,3,1,1,https://github.com/j-piecuch,Set window size on shell startup only if it isn't already set,1,['review'],https://github.com/cahirwpz/mimiker/pull/1130,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/1130,"This prevent setwinsize from running when recording a terminal session with script.
We don't want it to run because if we do, then when playing the session back, the terminal will send us an escape sequence containing the cursor position, but since setwinsize isn't actually running (only the recording of its output), the escape sequence gets echoed by the shell after playback is finished, which looks ugly.","This prevent setwinsize from running when recording a terminal session with script.
We don't want it to run because if we do, then when playing the session back, the terminal will send us an escape sequence containing the cursor position, but since setwinsize isn't actually running (only the recording of its output), the escape sequence gets echoed by the shell after playback is finished, which looks ugly.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1131,2021-05-22T19:18:37Z,,2021-05-24T10:47:11Z,OPEN,False,109,25,5,https://github.com/franciscozdo,Improve gdb functions to access VM structures,3,['WiP'],https://github.com/cahirwpz/mimiker/pull/1131,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/1131,"Here I provide more tools to debug virtual memory in Mimiker.

dumping vm map of given process
dumping all information about given virtual address
(additional) get address of process by pid","Here I provide more tools to debug virtual memory in Mimiker.

dumping vm map of given process
dumping all information about given virtual address
(additional) get address of process by pid",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1132,2021-05-23T20:32:49Z,,2021-05-28T09:19:56Z,OPEN,False,31,9,1,https://github.com/MichalBlk,Rewrite the keyboard test using evdev.,3,['proposal'],https://github.com/cahirwpz/mimiker/pull/1132,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1132,Adjust the keyboard test to use the evdev mechanism.,Adjust the keyboard test to use the evdev mechanism.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1133,2021-05-24T08:40:30Z,2021-07-05T15:44:24Z,2021-07-05T15:44:26Z,MERGED,True,105,10,1,https://github.com/hadarai,Comment tags guidelines,5,['accepted'],https://github.com/cahirwpz/mimiker/pull/1133,https://github.com/hadarai,1,https://github.com/cahirwpz/mimiker/pull/1133,This PR adds a document to our wiki explaining tags we use in our code with usage examples,This PR adds a document to our wiki explaining tags we use in our code with usage examples,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1133,2021-05-24T08:40:30Z,2021-07-05T15:44:24Z,2021-07-05T15:44:26Z,MERGED,True,105,10,1,https://github.com/hadarai,Comment tags guidelines,5,['accepted'],https://github.com/cahirwpz/mimiker/pull/1133,https://github.com/pj1031999,2,https://github.com/cahirwpz/mimiker/pull/1133#issuecomment-864891136,This PR adds a document to our wiki explaining tags we use in our code with usage examples,@wiklam links should be ok - they contain revision number.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1134,2021-05-24T09:53:41Z,,2021-07-11T09:54:44Z,OPEN,False,247,11,8,https://github.com/MichalBlk,USB HID keyboard driver.,11,['WiP'],https://github.com/cahirwpz/mimiker/pull/1134,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1134,Partially contains changes presented in #1137.,Partially contains changes presented in #1137.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1135,2021-05-24T10:18:40Z,,2022-01-07T16:16:19Z,OPEN,False,424,26,3,https://github.com/mohrcore,Machine-independent SD card driver,10,"['blocked', 'review']",https://github.com/cahirwpz/mimiker/pull/1135,https://github.com/mohrcore,1,https://github.com/cahirwpz/mimiker/pull/1135,"Please, note that the changes in the emmc interface are also a part of #1101. Once merged they should be not visible here.","Please, note that the changes in the emmc interface are also a part of #1101. Once merged they should be not visible here.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1136,2021-05-27T16:05:15Z,,2022-06-06T17:14:32Z,OPEN,False,40,26,12,https://github.com/mohrcore,Add filesystem source support for mount,4,['review'],https://github.com/cahirwpz/mimiker/pull/1136,https://github.com/mohrcore,1,https://github.com/cahirwpz/mimiker/pull/1136,"Up until now, mounting filestetms required only a filesystem type and a destination path. However, given the incoming block device  support, it will be also necessary to be able to specify the source of filesystem's underlying data in order to be able to mount filesystems that reside on external storage units.","Up until now, mounting filestetms required only a filesystem type and a destination path. However, given the incoming block device  support, it will be also necessary to be able to specify the source of filesystem's underlying data in order to be able to mount filesystems that reside on external storage units.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1136,2021-05-27T16:05:15Z,,2022-06-06T17:14:32Z,OPEN,False,40,26,12,https://github.com/mohrcore,Add filesystem source support for mount,4,['review'],https://github.com/cahirwpz/mimiker/pull/1136,https://github.com/pj1031999,2,https://github.com/cahirwpz/mimiker/pull/1136#issuecomment-850227343,"Up until now, mounting filestetms required only a filesystem type and a destination path. However, given the incoming block device  support, it will be also necessary to be able to specify the source of filesystem's underlying data in order to be able to mount filesystems that reside on external storage units.",@mohrcore I'm not familiar with vfs subsystem. Please find somebody with more experience for review.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1137,2021-05-27T21:29:55Z,,2021-06-18T10:47:48Z,OPEN,False,61,3,6,https://github.com/MichalBlk,Expand evdev.,2,['review'],https://github.com/cahirwpz/mimiker/pull/1137,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1137,Prepare evdev for a mouse driver and add some USB HID keyboard functions.,Prepare evdev for a mouse driver and add some USB HID keyboard functions.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1138,2021-05-27T21:39:33Z,,2021-05-28T09:19:32Z,OPEN,False,83,1,3,https://github.com/MichalBlk,Add a user space mouse test.,1,['proposal'],https://github.com/cahirwpz/mimiker/pull/1138,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1138,Add a simple mouse test.,Add a simple mouse test.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1139,2021-05-27T21:50:02Z,,2021-07-03T10:49:06Z,OPEN,False,242,4,7,https://github.com/MichalBlk,USB HID mouse driver.,4,['review'],https://github.com/cahirwpz/mimiker/pull/1139,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1139,Partially contains changes presented in #1137.,Partially contains changes presented in #1137.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1140,2021-05-28T08:22:18Z,2021-05-31T05:58:04Z,2021-05-31T05:58:16Z,MERGED,True,8,6,1,https://github.com/franciscozdo,Fix setreuid,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1140,https://github.com/franciscozdo,1,https://github.com/cahirwpz/mimiker/pull/1140,"Saved uid should be set to new effective uid not to old. [1]
[1] NetBSD Manual","Saved uid should be set to new effective uid not to old. [1]
[1] NetBSD Manual",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1141,2021-05-30T10:36:14Z,,2021-06-08T14:13:23Z,OPEN,False,0,0,0,https://github.com/MichalBlk,Describe slab memory layout,3,['WiP'],https://github.com/cahirwpz/mimiker/pull/1141,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1141,"First of all, there is no such a thing as pool_item_t (that's a dead comment). Besides, there is an error in the equations.","First of all, there is no such a thing as pool_item_t (that's a dead comment). Besides, there is an error in the equations.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1141,2021-05-30T10:36:14Z,,2021-06-08T14:13:23Z,OPEN,False,0,0,0,https://github.com/MichalBlk,Describe slab memory layout,3,['WiP'],https://github.com/cahirwpz/mimiker/pull/1141,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/1141#issuecomment-851337466,"First of all, there is no such a thing as pool_item_t (that's a dead comment). Besides, there is an error in the equations.",Since I've already merged those changes as a part of another PR... could you actually draw a diagram that depicts single slab contents?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1141,2021-05-30T10:36:14Z,,2021-06-08T14:13:23Z,OPEN,False,0,0,0,https://github.com/MichalBlk,Describe slab memory layout,3,['WiP'],https://github.com/cahirwpz/mimiker/pull/1141,https://github.com/MichalBlk,3,https://github.com/cahirwpz/mimiker/pull/1141#issuecomment-851419536,"First of all, there is no such a thing as pool_item_t (that's a dead comment). Besides, there is an error in the equations.",Fine.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1142,2021-05-31T07:55:19Z,2021-05-31T07:55:43Z,2021-05-31T08:41:54Z,CLOSED,False,120,1,7,https://github.com/hadarai,Test infrastructure readme,31,[],https://github.com/cahirwpz/mimiker/pull/1142,https://github.com/hadarai,1,https://github.com/cahirwpz/mimiker/pull/1142,Update of the Test infrastructure README file with knowledge I gained during development of Pipe tests.,Update of the Test infrastructure README file with knowledge I gained during development of Pipe tests.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1143,2021-05-31T07:59:40Z,2021-07-06T14:51:20Z,2021-07-06T14:51:20Z,MERGED,True,77,13,2,https://github.com/hadarai,Test infrastructure readme update,9,['accepted'],https://github.com/cahirwpz/mimiker/pull/1143,https://github.com/hadarai,1,https://github.com/cahirwpz/mimiker/pull/1143,This PR updates our test infrastructure readme with my knowledge I gained during development of pipe tests,This PR updates our test infrastructure readme with my knowledge I gained during development of pipe tests,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1144,2021-05-31T08:59:56Z,2021-06-01T06:08:02Z,2021-06-01T06:09:04Z,MERGED,True,12,4,1,https://github.com/pj1031999,dtb: fix absolutely shitty behavior of bootloaders,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1144,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1144,"Bootloader can decide to load dtb into middle of random physical page and we need to deal with that inside kernel. For that purpose we can store offset of dtb for first phys page.

store offset of dtb
calculate mapping size for dtb including gap at the first page","Bootloader can decide to load dtb into middle of random physical page and we need to deal with that inside kernel. For that purpose we can store offset of dtb for first phys page.

store offset of dtb
calculate mapping size for dtb including gap at the first page",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1145,2021-05-31T09:10:56Z,2021-05-31T09:48:16Z,2021-05-31T09:48:18Z,MERGED,True,3,3,2,https://github.com/pj1031999,build: keep kernel image after compression,1,"['accepted', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/1145,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1145,r.pi3 doesn't play well with compressed image - let's keep uncompressed version.,r.pi3 doesn't play well with compressed image - let's keep uncompressed version.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1146,2021-05-31T09:57:34Z,2021-06-07T16:04:06Z,2021-06-07T16:04:06Z,MERGED,True,7,0,1,https://github.com/pj1031999,aarch64/bcopy: remove not aligned access to memory,3,"['accepted', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/1146,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1146,"bcopy: remove not alignment access to memory for AArch64.
Fixes #1097.","bcopy: remove not alignment access to memory for AArch64.
Fixes #1097.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1147,2021-05-31T10:21:02Z,2022-06-06T17:15:38Z,2022-06-06T17:15:38Z,CLOSED,False,781,26,13,https://github.com/mohrcore,Add support for ext2 filesystem,7,"['WiP', 'blocked']",https://github.com/cahirwpz/mimiker/pull/1147,https://github.com/mohrcore,1,https://github.com/cahirwpz/mimiker/pull/1147,"The goal is to allow ext2 filesystems (rev. 1) to be mounted from external mass media storage devices.
Depends on #1136.","The goal is to allow ext2 filesystems (rev. 1) to be mounted from external mass media storage devices.
Depends on #1136.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1147,2021-05-31T10:21:02Z,2022-06-06T17:15:38Z,2022-06-06T17:15:38Z,CLOSED,False,781,26,13,https://github.com/mohrcore,Add support for ext2 filesystem,7,"['WiP', 'blocked']",https://github.com/cahirwpz/mimiker/pull/1147,https://github.com/mohrcore,2,https://github.com/cahirwpz/mimiker/pull/1147#issuecomment-917708275,"The goal is to allow ext2 filesystems (rev. 1) to be mounted from external mass media storage devices.
Depends on #1136.","@pj1031999 It's not ready yet and in case you are wondering - yes, I was granted permission to use that code and put it into this PR.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1147,2021-05-31T10:21:02Z,2022-06-06T17:15:38Z,2022-06-06T17:15:38Z,CLOSED,False,781,26,13,https://github.com/mohrcore,Add support for ext2 filesystem,7,"['WiP', 'blocked']",https://github.com/cahirwpz/mimiker/pull/1147,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/1147#issuecomment-1147685802,"The goal is to allow ext2 filesystems (rev. 1) to be mounted from external mass media storage devices.
Depends on #1136.",We're not planning to integrate this code with Mimiker. Hence I close this PR.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1148,2021-05-31T13:49:35Z,,2022-06-06T17:23:56Z,OPEN,False,268,8,7,https://github.com/hadarai,Pipe non-block tests,92,['review'],https://github.com/cahirwpz/mimiker/pull/1148,https://github.com/hadarai,1,https://github.com/cahirwpz/mimiker/pull/1148,"This PR tests usage of pipe2 with flag O_NONBLOCK. Test cases:

Open pipe with O_NONBLOCK flag, test with fnctl if it's set, unset it, check if it's unset
parent doesn't read, child fills pipe, tries again to write - sleep interrupted by SIGALRM (returns EINTR )
parent doesn't read, child has non-blocking writing end, fills pipe, tries again write - gets EAGAIN
parent closes it's writing end, child read - returns 0
parent doesn't write, keeps that end open, child reads - sleep interrupted by SIGALRM(returns EINTR)
parent doesn't write, child keeps non-blocking end open and does read - gets EAGAIN","This PR tests usage of pipe2 with flag O_NONBLOCK. Test cases:

Open pipe with O_NONBLOCK flag, test with fnctl if it's set, unset it, check if it's unset
parent doesn't read, child fills pipe, tries again to write - sleep interrupted by SIGALRM (returns EINTR )
parent doesn't read, child has non-blocking writing end, fills pipe, tries again write - gets EAGAIN
parent closes it's writing end, child read - returns 0
parent doesn't write, keeps that end open, child reads - sleep interrupted by SIGALRM(returns EINTR)
parent doesn't write, child keeps non-blocking end open and does read - gets EAGAIN",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1148,2021-05-31T13:49:35Z,,2022-06-06T17:23:56Z,OPEN,False,268,8,7,https://github.com/hadarai,Pipe non-block tests,92,['review'],https://github.com/cahirwpz/mimiker/pull/1148,https://github.com/hadarai,2,https://github.com/cahirwpz/mimiker/pull/1148#issuecomment-865165102,"This PR tests usage of pipe2 with flag O_NONBLOCK. Test cases:

Open pipe with O_NONBLOCK flag, test with fnctl if it's set, unset it, check if it's unset
parent doesn't read, child fills pipe, tries again to write - sleep interrupted by SIGALRM (returns EINTR )
parent doesn't read, child has non-blocking writing end, fills pipe, tries again write - gets EAGAIN
parent closes it's writing end, child read - returns 0
parent doesn't write, keeps that end open, child reads - sleep interrupted by SIGALRM(returns EINTR)
parent doesn't write, child keeps non-blocking end open and does read - gets EAGAIN","Changes made to syscall handling:

any pipe now revokes do_pipe2, eventually with empty flags.
both flags (O_NONBLOCK and O_CLOEXEC) in pipe2 are now supported, so when present are set for both pipe ends
in non-blocking mode, read from empty and write to full return immediately with errno equal to EAGAIN
in blocking mode, read from empty and write to full sleep with interruptible (by properly installed signal) sleep",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1148,2021-05-31T13:49:35Z,,2022-06-06T17:23:56Z,OPEN,False,268,8,7,https://github.com/hadarai,Pipe non-block tests,92,['review'],https://github.com/cahirwpz/mimiker/pull/1148,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/1148#issuecomment-912620404,"This PR tests usage of pipe2 with flag O_NONBLOCK. Test cases:

Open pipe with O_NONBLOCK flag, test with fnctl if it's set, unset it, check if it's unset
parent doesn't read, child fills pipe, tries again to write - sleep interrupted by SIGALRM (returns EINTR )
parent doesn't read, child has non-blocking writing end, fills pipe, tries again write - gets EAGAIN
parent closes it's writing end, child read - returns 0
parent doesn't write, keeps that end open, child reads - sleep interrupted by SIGALRM(returns EINTR)
parent doesn't write, child keeps non-blocking end open and does read - gets EAGAIN","Tests fail with:
| 5.802805 | 68 | kern/pipe.c:139      | KL_FILE    | Assertion ""!pipe->writer_closed"" failed!                                     |
| 5.802835 | 68 | kern/ktest.c:30      | KL_TEST    | Test ""user_pipe_blocking_flag_manipulation"" failed!",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1149,2021-05-31T17:27:23Z,2021-07-06T14:52:04Z,2021-07-06T14:52:07Z,MERGED,True,46,42,5,https://github.com/cahirwpz,Update QEMU to 6.0.0,3,['accepted'],https://github.com/cahirwpz/mimiker/pull/1149,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/1149,Since we need USB support for Raspberry Pi emulation.,Since we need USB support for Raspberry Pi emulation.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1149,2021-05-31T17:27:23Z,2021-07-06T14:52:04Z,2021-07-06T14:52:07Z,MERGED,True,46,42,5,https://github.com/cahirwpz,Update QEMU to 6.0.0,3,['accepted'],https://github.com/cahirwpz/mimiker/pull/1149,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/1149#issuecomment-855758213,Since we need USB support for Raspberry Pi emulation.,Please test it locally. Debian package is available at https://mimiker.ii.uni.wroc.pl/download/qemu-mimiker_6.0.0+mimiker1_amd64.deb,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1150,2021-06-01T20:10:53Z,2021-06-08T13:05:23Z,2021-06-08T13:05:23Z,MERGED,True,2,2,1,https://github.com/xThaid,Enable lockdep in CI builds,2,['accepted'],https://github.com/cahirwpz/mimiker/pull/1150,https://github.com/xThaid,1,https://github.com/cahirwpz/mimiker/pull/1150,,,True,{'HOORAY': ['https://github.com/pj1031999']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1151,2021-06-07T11:08:57Z,2021-06-07T16:02:10Z,2021-06-07T16:02:13Z,MERGED,True,0,3,1,https://github.com/pj1031999,elf: remove unnecessary bzero,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1151,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1151,Remove unnecessary bzero call in load_elf_segment.,Remove unnecessary bzero call in load_elf_segment.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1152,2021-06-10T21:22:24Z,2021-06-11T14:47:55Z,2021-06-11T14:47:55Z,MERGED,True,26,14,3,https://github.com/MichalBlk,USB headers update.,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1152,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1152,This PR is an outcome of work done around #935 (and #1114).,This PR is an outcome of work done around #935 (and #1114).,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1153,2021-06-11T19:28:27Z,,2022-05-01T19:29:33Z,OPEN,False,266,61,9,https://github.com/mohrcore,vcache,19,['review'],https://github.com/cahirwpz/mimiker/pull/1153,https://github.com/mohrcore,1,https://github.com/cahirwpz/mimiker/pull/1153,We need basic vcache functionality to support any external filesystem.,We need basic vcache functionality to support any external filesystem.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1153,2021-06-11T19:28:27Z,,2022-05-01T19:29:33Z,OPEN,False,266,61,9,https://github.com/mohrcore,vcache,19,['review'],https://github.com/cahirwpz/mimiker/pull/1153,https://github.com/mohrcore,2,https://github.com/cahirwpz/mimiker/pull/1153#issuecomment-1004944206,We need basic vcache functionality to support any external filesystem.,"No idea on why the vmem test fails. It strikes me as very bizarre. Is the pool allocator broken, or am I just doing something wrong?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1153,2021-06-11T19:28:27Z,,2022-05-01T19:29:33Z,OPEN,False,266,61,9,https://github.com/mohrcore,vcache,19,['review'],https://github.com/cahirwpz/mimiker/pull/1153,https://github.com/pj1031999,3,https://github.com/cahirwpz/mimiker/pull/1153#issuecomment-1008115581,We need basic vcache functionality to support any external filesystem.,@mohrcore value of VF_CACHED in your code is 0. The only place where you are using this flag calls pool allocator (and is always called).  When you change VF_CACHED to 1 then your code will be working better.,True,{'THUMBS_UP': ['https://github.com/mohrcore']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1153,2021-06-11T19:28:27Z,,2022-05-01T19:29:33Z,OPEN,False,266,61,9,https://github.com/mohrcore,vcache,19,['review'],https://github.com/cahirwpz/mimiker/pull/1153,https://github.com/mohrcore,4,https://github.com/cahirwpz/mimiker/pull/1153#issuecomment-1010316885,We need basic vcache functionality to support any external filesystem.,@pj1031999 thank you for you comment. That was certainly causing some issues. I've fixed that now.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1153,2021-06-11T19:28:27Z,,2022-05-01T19:29:33Z,OPEN,False,266,61,9,https://github.com/mohrcore,vcache,19,['review'],https://github.com/cahirwpz/mimiker/pull/1153,https://github.com/mohrcore,5,https://github.com/cahirwpz/mimiker/pull/1153#issuecomment-1010327006,We need basic vcache functionality to support any external filesystem.,"Allow me to explain my reasoning behind adding a new VOP:
A vnode use count as I get it represents the number of entities that need direct access to data held by a vnode. A use count greater than zero, therefore implies that the vnode is not recycleable at the moment (ie. can't be on vcache freelist). When the use count drops to zero, the vnode should be moved to a vcache freelist and thus become recycleable. This will be done through a vfs_vcache_return procedure called when a vnode with VF_CACHED flag set gets its use counter dropped to zero. Right before that happens it's be crucial for a filesytem code to take action if a vnode is no longer valid, ie. it's corresponding inode is to be removed from a filesystem (eg. user has deleted a file). The filesystem code should detach any of its data from a vnode to prevent vcache from returning an outdated vnode on request that uses a new inode with the same number as the old one. This action can be done using vfs_vcache_detach procedure, which will mark the node ""detached"" and will prevent it from being put into any bucket within vcache in vfs_vcache_return. Such action could've been performed inside VOP_RECLAIM that used to be called when vnode usecount dropped to zero.
The problem is that it was the last point at which a filesystem code could do anything in regards to a vnode, before it gets recycled. That meant that any inodes that were allocated by a filesystem needed to be freed in that moment, which in regards to filesystems present on block devices makes the vcache impractical. (I guess alternatively they could be cached internally by a filesystem) A filesystem would need to flush an inode to a block device every time the use count drops to zero and load it back the moment the vnode goes back into use. Thus VOP_RECLAIM is now called only when the vcache system needs to recycle the vnode for use with another filesystem, or when the filesystem chooses to detach its data from a vnode. A vnode is expected to have its usecnt equal to 0 at this point. In VOP_RECLAIM a filesystem is required to ensure that all the resources it has associated to the vnode will be in correct state once the vnode is gone, so they could be attached later to another vnode if needed. For tmpfs it just means a little cleanup work (removing an inode if a file is expected to be removed). For something like ext2 it could mean flushing the inode to its block device (and given that block buffering will most likely require a vnode in order to identify a block, this could also mean flushing and de-buffering the entire data associated with that vnode).
Because it's still necessary to take action the moment vnode use count drops to zero, as described eariler (detaching filesystem data from invalid vnode), the old VOP_RECLAIMbecame VOP_INACTIVE.
According to NetBSD manual:
""VOP_INACTIVE() is called when the kernel is no longer using the vnode.""
""VOP_RECLAIM() is called when a vnode is being reused for a different file system.""
@cahirwpz what are your thoughts on this?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1153,2021-06-11T19:28:27Z,,2022-05-01T19:29:33Z,OPEN,False,266,61,9,https://github.com/mohrcore,vcache,19,['review'],https://github.com/cahirwpz/mimiker/pull/1153,https://github.com/mohrcore,6,https://github.com/cahirwpz/mimiker/pull/1153#issuecomment-1020569688,We need basic vcache functionality to support any external filesystem.,"vmem test still fails, but I'm unable to reproduce this failure locally. It seems to be some rare heizenbug. I'm unfamiliar with vmem at this point, so I have no clue what is a potential cause (other than a race condidtion I might be overlooking).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1153,2021-06-11T19:28:27Z,,2022-05-01T19:29:33Z,OPEN,False,266,61,9,https://github.com/mohrcore,vcache,19,['review'],https://github.com/cahirwpz/mimiker/pull/1153,https://github.com/mohrcore,7,https://github.com/cahirwpz/mimiker/pull/1153#issuecomment-1021504728,We need basic vcache functionality to support any external filesystem.,"Changing the pool_alloc to kmalloc seems to solve the issue. I re-ran the entire testing pipeline three times with no failures after that small change.
My take is that the pool allocator is broken, or there's some limitation to its use that I'm not aware of. Or the vmem test is broken (I don't get what it does tho). Feel free to call it bs, but I don't see another explanation atm.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1154,2021-06-14T03:22:04Z,,2021-09-20T18:33:50Z,OPEN,False,25,27,6,https://github.com/wiklam,Timer stop & start functions fix,7,['review'],https://github.com/cahirwpz/mimiker/pull/1154,https://github.com/wiklam,1,https://github.com/cahirwpz/mimiker/pull/1154,"We want to set up the interrupts while attaching a timer and eventually stop it from invoking interrupts.
Removing unnecessary function tm_select (choosing time source is done while setting up timers in clock.c).
Typo in rtc.c.","We want to set up the interrupts while attaching a timer and eventually stop it from invoking interrupts.
Removing unnecessary function tm_select (choosing time source is done while setting up timers in clock.c).
Typo in rtc.c.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1154,2021-06-14T03:22:04Z,,2021-09-20T18:33:50Z,OPEN,False,25,27,6,https://github.com/wiklam,Timer stop & start functions fix,7,['review'],https://github.com/cahirwpz/mimiker/pull/1154,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/1154#issuecomment-912609819,"We want to set up the interrupts while attaching a timer and eventually stop it from invoking interrupts.
Removing unnecessary function tm_select (choosing time source is done while setting up timers in clock.c).
Typo in rtc.c.",IIRC The intent of this PR is to change timer drivers so that resource allocation (including interrupt handler registration) is  performed only when the driver is attached. This involves masking and unmasking an interrupt in *_start and *_stop timer routines. There's no infrastructure that allows for a single intr_handler_t to be temporarily disabled without tearing it down. Hence we resort to configuring timers in such a way they're effectively disabled. Is that correct?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1155,2021-06-14T08:42:16Z,2021-06-14T09:25:23Z,2021-06-14T09:25:41Z,MERGED,True,2,2,1,https://github.com/wiklam,Kgmon fix,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1155,https://github.com/wiklam,1,https://github.com/cahirwpz/mimiker/pull/1155,"Fixing omitting incrementing index while the from_val value is 0.
Fromindex is a hash for a function (the caller) it invoked other functions (callee) stored in to_struct.
Not incrementing the fromindex for functions, which didn't call a function (from_val == 0) will assign the called functions to the previous hashes - the call graph is not reliable.","Fixing omitting incrementing index while the from_val value is 0.
Fromindex is a hash for a function (the caller) it invoked other functions (callee) stored in to_struct.
Not incrementing the fromindex for functions, which didn't call a function (from_val == 0) will assign the called functions to the previous hashes - the call graph is not reliable.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1155,2021-06-14T08:42:16Z,2021-06-14T09:25:23Z,2021-06-14T09:25:41Z,MERGED,True,2,2,1,https://github.com/wiklam,Kgmon fix,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1155,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/1155#issuecomment-860529126,"Fixing omitting incrementing index while the from_val value is 0.
Fromindex is a hash for a function (the caller) it invoked other functions (callee) stored in to_struct.
Not incrementing the fromindex for functions, which didn't call a function (from_val == 0) will assign the called functions to the previous hashes - the call graph is not reliable.",Could you provide a description for the bug this PR fixes? How does this bug manifest itself?,True,{'THUMBS_UP': ['https://github.com/wiklam']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1155,2021-06-14T08:42:16Z,2021-06-14T09:25:23Z,2021-06-14T09:25:41Z,MERGED,True,2,2,1,https://github.com/wiklam,Kgmon fix,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1155,https://github.com/wiklam,3,https://github.com/cahirwpz/mimiker/pull/1155#issuecomment-860537148,"Fixing omitting incrementing index while the from_val value is 0.
Fromindex is a hash for a function (the caller) it invoked other functions (callee) stored in to_struct.
Not incrementing the fromindex for functions, which didn't call a function (from_val == 0) will assign the called functions to the previous hashes - the call graph is not reliable.","Could you provide a description for the bug this PR fixes? How does this bug manifest itself?

Done",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1157,2021-06-18T08:29:53Z,,2021-06-18T08:29:53Z,OPEN,False,1463,6,7,https://github.com/MichalBlk,RPi3 USB (DWC OTG HC).,2,['WiP'],https://github.com/cahirwpz/mimiker/pull/1157,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1157,Implementation of USB host controller for RPi3.,Implementation of USB host controller for RPi3.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1158,2021-06-21T10:11:40Z,2021-06-22T17:08:09Z,2021-06-23T05:58:28Z,MERGED,True,9,3,1,https://github.com/j-piecuch,Store temporary userspace vm_map in process in paging_on_demand_and_memory_protection_demo(),1,"['bug', 'accepted']",https://github.com/cahirwpz/mimiker/pull/1158,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/1158,"The correctness of the test depended on not switching to another process, which can't be guaranteed even if we disable preemption, since a thread in another process might be holding a mutex that we want to acquire. Therefore, it is necessary to store the temporary userspace vm_map in the current process, so that it is restored when we switch back.","The correctness of the test depended on not switching to another process, which can't be guaranteed even if we disable preemption, since a thread in another process might be holding a mutex that we want to acquire. Therefore, it is necessary to store the temporary userspace vm_map in the current process, so that it is restored when we switch back.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1159,2021-06-21T14:20:20Z,2021-07-05T16:03:34Z,2021-07-05T16:03:34Z,MERGED,True,91,0,2,https://github.com/hadarai,Documentation structure description,4,['accepted'],https://github.com/cahirwpz/mimiker/pull/1159,https://github.com/hadarai,1,https://github.com/cahirwpz/mimiker/pull/1159,This PR creates a document that explains our idea of whole project documentation,This PR creates a document that explains our idea of whole project documentation,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1160,2021-06-22T16:14:25Z,2021-06-23T08:27:57Z,2021-06-23T08:35:54Z,MERGED,True,20,7,1,https://github.com/j-piecuch,Make pipe I/O operations interruptible by signals.,2,['accepted'],https://github.com/cahirwpz/mimiker/pull/1160,https://github.com/j-piecuch,1,https://github.com/cahirwpz/mimiker/pull/1160,"Without this, processes sleeping on pipe I/O won't be interrupted by signals, which means e.g. that when a process in a background pipeline tries to read from the controlling terminal, processes in the pipeline that are sleeping on pipe I/O won't be stopped.","Without this, processes sleeping on pipe I/O won't be interrupted by signals, which means e.g. that when a process in a background pipeline tries to read from the controlling terminal, processes in the pipeline that are sleeping on pipe I/O won't be stopped.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1161,2021-06-23T11:02:07Z,2021-07-06T14:49:31Z,2021-07-06T14:49:31Z,MERGED,True,112,104,4,https://github.com/hadarai,`pipe`s simplified reimplementation ,6,['accepted'],https://github.com/cahirwpz/mimiker/pull/1161,https://github.com/hadarai,1,https://github.com/cahirwpz/mimiker/pull/1161,"With suggestions from @j-piecuch we've changed the current implementation of pipes, mostly fixes and simplifications.
Currently, our pipes are bidirectional, which is a feature implemented only by FreeBSD. On other BSDs and Linux, pipes are unidirectional. Making our pipes unidirectional will simplify the code at a small cost, since bidirectional pipes are not widely used.
Now there is only one structure with less fields shared by producers and consumers, and support for O_CLOEXEC has been added.","With suggestions from @j-piecuch we've changed the current implementation of pipes, mostly fixes and simplifications.
Currently, our pipes are bidirectional, which is a feature implemented only by FreeBSD. On other BSDs and Linux, pipes are unidirectional. Making our pipes unidirectional will simplify the code at a small cost, since bidirectional pipes are not widely used.
Now there is only one structure with less fields shared by producers and consumers, and support for O_CLOEXEC has been added.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1161,2021-06-23T11:02:07Z,2021-07-06T14:49:31Z,2021-07-06T14:49:31Z,MERGED,True,112,104,4,https://github.com/hadarai,`pipe`s simplified reimplementation ,6,['accepted'],https://github.com/cahirwpz/mimiker/pull/1161,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/1161#issuecomment-874214850,"With suggestions from @j-piecuch we've changed the current implementation of pipes, mostly fixes and simplifications.
Currently, our pipes are bidirectional, which is a feature implemented only by FreeBSD. On other BSDs and Linux, pipes are unidirectional. Making our pipes unidirectional will simplify the code at a small cost, since bidirectional pipes are not widely used.
Now there is only one structure with less fields shared by producers and consumers, and support for O_CLOEXEC has been added.",I bet almost all software for Unix-like system depends on POSIX semantics for pipes. Hence it's a good idea to simplify our implementation and make a move against BSD semantics.,True,{'HEART': ['https://github.com/hadarai']}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1162,2021-06-28T22:00:37Z,2021-09-03T14:43:55Z,2021-09-03T14:43:58Z,MERGED,True,8,1,1,https://github.com/pj1031999,Update CONTRIBUTORS.md,2,['accepted'],https://github.com/cahirwpz/mimiker/pull/1162,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1162,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1163,2021-09-03T14:21:10Z,2021-09-13T13:00:12Z,2021-10-22T14:40:00Z,MERGED,True,18,14,2,https://github.com/wiklam,Clean up and fixes for timers,7,['accepted'],https://github.com/cahirwpz/mimiker/pull/1163,https://github.com/wiklam,1,https://github.com/cahirwpz/mimiker/pull/1163,"Moving the name of the timer at the beginning of the function name (timer_pit_start -> pit_timer_start, to stay by the convention.
Adding assumption that the sum of timer counters ticks modulo frequency should be less than a second.
Changing the integer size, which holds the number of seconds (32->64).","Moving the name of the timer at the beginning of the function name (timer_pit_start -> pit_timer_start, to stay by the convention.
Adding assumption that the sum of timer counters ticks modulo frequency should be less than a second.
Changing the integer size, which holds the number of seconds (32->64).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1163,2021-09-03T14:21:10Z,2021-09-13T13:00:12Z,2021-10-22T14:40:00Z,MERGED,True,18,14,2,https://github.com/wiklam,Clean up and fixes for timers,7,['accepted'],https://github.com/cahirwpz/mimiker/pull/1163,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/1163#issuecomment-912618762,"Moving the name of the timer at the beginning of the function name (timer_pit_start -> pit_timer_start, to stay by the convention.
Adding assumption that the sum of timer counters ticks modulo frequency should be less than a second.
Changing the integer size, which holds the number of seconds (32->64).",PR description is missing...,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1164,2021-09-06T02:31:22Z,2021-09-28T15:16:26Z,2021-10-22T14:39:52Z,MERGED,True,36,31,3,https://github.com/wiklam,Clean up for time infrastructure,10,['accepted'],https://github.com/cahirwpz/mimiker/pull/1164,https://github.com/wiklam,1,https://github.com/cahirwpz/mimiker/pull/1164,"Correct the size in tm2sec.
First use of kgprof -- noticed that tm2sec have been called 3 times, even if it should be called once - corrected it by calculating the macro argument before.
Renaming ticks to cntr in PIT to stay by the convention and distinguish the difference between a counter tick and a timer tick.","Correct the size in tm2sec.
First use of kgprof -- noticed that tm2sec have been called 3 times, even if it should be called once - corrected it by calculating the macro argument before.
Renaming ticks to cntr in PIT to stay by the convention and distinguish the difference between a counter tick and a timer tick.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1164,2021-09-06T02:31:22Z,2021-09-28T15:16:26Z,2021-10-22T14:39:52Z,MERGED,True,36,31,3,https://github.com/wiklam,Clean up for time infrastructure,10,['accepted'],https://github.com/cahirwpz/mimiker/pull/1164,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/1164#issuecomment-922747547,"Correct the size in tm2sec.
First use of kgprof -- noticed that tm2sec have been called 3 times, even if it should be called once - corrected it by calculating the macro argument before.
Renaming ticks to cntr in PIT to stay by the convention and distinguish the difference between a counter tick and a timer tick.",@wiklam Please resolve conflicts!,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1165,2021-09-12T18:09:15Z,2021-09-13T12:26:22Z,2021-09-13T12:28:04Z,MERGED,True,0,1,1,https://github.com/pj1031999,README: remove -D from launch script,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1165,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1165,"That flag doesn't exist anymore.
Signed-off-by: Paweł Jasiak pawel@jasiak.dev","That flag doesn't exist anymore.
Signed-off-by: Paweł Jasiak pawel@jasiak.dev",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1166,2021-09-12T18:10:04Z,2021-09-13T12:29:56Z,2021-09-13T12:29:58Z,MERGED,True,6,7,2,https://github.com/pj1031999,"Toolchain: bump binutils & gcc, remove x86",1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1166,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1166,"New toolchain version - 1.5.2
Update gcc to 11.2.0
Update binutils to 2.37
Remove support to x86

x86 toolchain is not used by Mimiker since we don't support that architecture - let's remove support for that toolchain and reduce complexity and build time of tools.
Signed-off-by: Paweł Jasiak pawel@jasiak.dev","New toolchain version - 1.5.2
Update gcc to 11.2.0
Update binutils to 2.37
Remove support to x86

x86 toolchain is not used by Mimiker since we don't support that architecture - let's remove support for that toolchain and reduce complexity and build time of tools.
Signed-off-by: Paweł Jasiak pawel@jasiak.dev",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1167,2021-09-12T18:11:18Z,,2021-10-10T14:40:13Z,OPEN,False,82,26,5,https://github.com/pj1031999,Containers: update environment ,10,['review'],https://github.com/cahirwpz/mimiker/pull/1167,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1167,"build toolchain in container
bump Debian version
add ability to build & run Mimiker in local environment

Example how to build local env:

git clone git@github.com:cahirwpz/mimiker.git
cd mimiker
podman build -t mimiker .
podman container run -it --rm --hostname mimiker -v /home/user/mimiker:/root/mimiker mimiker /bin/bash

after last command you are in bash shell inside container, you can install your favourite set of packages or just build Mimiker. All changes are synchronized between local directory /home/user/mimiker and /root/mimiker inside container, so you can use your favourite editor and distro.
podman is not required but it's recommended (in non-priv mode). It's possible to still run podman as root or use docker for that purpose but then you are on your own with permissions inside mimiker directory.
Note: building container is SLOW and IO INTENSIVE process.
Requires #1166","build toolchain in container
bump Debian version
add ability to build & run Mimiker in local environment

Example how to build local env:

git clone git@github.com:cahirwpz/mimiker.git
cd mimiker
podman build -t mimiker .
podman container run -it --rm --hostname mimiker -v /home/user/mimiker:/root/mimiker mimiker /bin/bash

after last command you are in bash shell inside container, you can install your favourite set of packages or just build Mimiker. All changes are synchronized between local directory /home/user/mimiker and /root/mimiker inside container, so you can use your favourite editor and distro.
podman is not required but it's recommended (in non-priv mode). It's possible to still run podman as root or use docker for that purpose but then you are on your own with permissions inside mimiker directory.
Note: building container is SLOW and IO INTENSIVE process.
Requires #1166",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1167,2021-09-12T18:11:18Z,,2021-10-10T14:40:13Z,OPEN,False,82,26,5,https://github.com/pj1031999,Containers: update environment ,10,['review'],https://github.com/cahirwpz/mimiker/pull/1167,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/1167#issuecomment-922842343,"build toolchain in container
bump Debian version
add ability to build & run Mimiker in local environment

Example how to build local env:

git clone git@github.com:cahirwpz/mimiker.git
cd mimiker
podman build -t mimiker .
podman container run -it --rm --hostname mimiker -v /home/user/mimiker:/root/mimiker mimiker /bin/bash

after last command you are in bash shell inside container, you can install your favourite set of packages or just build Mimiker. All changes are synchronized between local directory /home/user/mimiker and /root/mimiker inside container, so you can use your favourite editor and distro.
podman is not required but it's recommended (in non-priv mode). It's possible to still run podman as root or use docker for that purpose but then you are on your own with permissions inside mimiker directory.
Note: building container is SLOW and IO INTENSIVE process.
Requires #1166","This looks ok. Please move PR's description into a separate document on our wiki entitled ""toolchain"" and modify it appropriately.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1167,2021-09-12T18:11:18Z,,2021-10-10T14:40:13Z,OPEN,False,82,26,5,https://github.com/pj1031999,Containers: update environment ,10,['review'],https://github.com/cahirwpz/mimiker/pull/1167,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/1167#issuecomment-929337373,"build toolchain in container
bump Debian version
add ability to build & run Mimiker in local environment

Example how to build local env:

git clone git@github.com:cahirwpz/mimiker.git
cd mimiker
podman build -t mimiker .
podman container run -it --rm --hostname mimiker -v /home/user/mimiker:/root/mimiker mimiker /bin/bash

after last command you are in bash shell inside container, you can install your favourite set of packages or just build Mimiker. All changes are synchronized between local directory /home/user/mimiker and /root/mimiker inside container, so you can use your favourite editor and distro.
podman is not required but it's recommended (in non-priv mode). It's possible to still run podman as root or use docker for that purpose but then you are on your own with permissions inside mimiker directory.
Note: building container is SLOW and IO INTENSIVE process.
Requires #1166",Since podman is available as a package for Debian 11 (but apparently not for Debian 10) I'll have to bump up Debian on our infrastructure before I merge this PR.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1168,2021-09-15T09:21:21Z,,2022-06-06T19:58:16Z,OPEN,False,3,3,3,https://github.com/pj1031999,Make rpi3 as default board.,2,"['proposal', 'AArch64', 'review']",https://github.com/cahirwpz/mimiker/pull/1168,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1168,"MIPS architecture is dead. It still will be supported by Mimiker but it's time for changes for something modern like 64-bit ARM.
That commit changes default settings in build system and launcher to use rpi3 as default board.","MIPS architecture is dead. It still will be supported by Mimiker but it's time for changes for something modern like 64-bit ARM.
That commit changes default settings in build system and launcher to use rpi3 as default board.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1168,2021-09-15T09:21:21Z,,2022-06-06T19:58:16Z,OPEN,False,3,3,3,https://github.com/pj1031999,Make rpi3 as default board.,2,"['proposal', 'AArch64', 'review']",https://github.com/cahirwpz/mimiker/pull/1168,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/1168#issuecomment-922843838,"MIPS architecture is dead. It still will be supported by Mimiker but it's time for changes for something modern like 64-bit ARM.
That commit changes default settings in build system and launcher to use rpi3 as default board.",I could accept it if all major features are in sync between MIPS and AArch64. ATM I'm not sure if profiling works on AArch64.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1168,2021-09-15T09:21:21Z,,2022-06-06T19:58:16Z,OPEN,False,3,3,3,https://github.com/pj1031999,Make rpi3 as default board.,2,"['proposal', 'AArch64', 'review']",https://github.com/cahirwpz/mimiker/pull/1168,https://github.com/pj1031999,3,https://github.com/cahirwpz/mimiker/pull/1168#issuecomment-922900441,"MIPS architecture is dead. It still will be supported by Mimiker but it's time for changes for something modern like 64-bit ARM.
That commit changes default settings in build system and launcher to use rpi3 as default board.","I could accept it if all major features are in sync between MIPS and AArch64. ATM I'm not sure if profiling works on AArch64.

@wiklam ?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1169,2021-10-02T21:24:36Z,2021-10-22T14:41:39Z,2021-10-22T14:41:39Z,MERGED,True,1,1,1,https://github.com/MichalBlk,Install etc/shells in sysroot.,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1169,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1169,mimiker/etc/shells should be copied to sysroot/etc along with the other files from this directory.,mimiker/etc/shells should be copied to sysroot/etc along with the other files from this directory.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1170,2021-10-02T21:24:46Z,2021-10-22T14:41:52Z,2021-10-22T14:41:52Z,MERGED,True,10,21,4,https://github.com/MichalBlk,Delete PMAP_* boundaries and use defines from vm_params instead.,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1170,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1170,pmap.h files define PMAP_* boundaries for user and kernel address spaces but these values are already defined (and used by the vm_map module) in vm_params.h.,pmap.h files define PMAP_* boundaries for user and kernel address spaces but these values are already defined (and used by the vm_map module) in vm_params.h.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1171,2021-10-02T21:24:51Z,2022-05-13T15:10:20Z,2022-05-13T15:10:21Z,CLOSED,False,7,8,1,https://github.com/MichalBlk,[MIPS] Do not invalidate tlb entry for a kseg0 page table address.,1,[],https://github.com/cahirwpz/mimiker/pull/1171,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1171,"In pmap_add_pde we invalidate a kseg0 page table address but kseg0 is an unmapped VM segment.
Besides, a klog invocation has been fixed.","In pmap_add_pde we invalidate a kseg0 page table address but kseg0 is an unmapped VM segment.
Besides, a klog invocation has been fixed.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1171,2021-10-02T21:24:51Z,2022-05-13T15:10:20Z,2022-05-13T15:10:21Z,CLOSED,False,7,8,1,https://github.com/MichalBlk,[MIPS] Do not invalidate tlb entry for a kseg0 page table address.,1,[],https://github.com/cahirwpz/mimiker/pull/1171,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/1171#issuecomment-1126161366,"In pmap_add_pde we invalidate a kseg0 page table address but kseg0 is an unmapped VM segment.
Besides, a klog invocation has been fixed.",This PR will become a part of #1243,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1172,2021-10-02T21:24:56Z,2021-10-25T11:41:24Z,2021-10-25T11:41:25Z,MERGED,True,1,1,1,https://github.com/MichalBlk,Do not use kernel translation tables to resolve user VM addresses.,2,['accepted'],https://github.com/cahirwpz/mimiker/pull/1172,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1172,"If we invoke vm_map_activate for kernel VM map, we will effectively start translating user VM accesses using kernel translation tables. vm_map_activate should be only invoked for user VM maps (during ctx switch). (Nevertheless, it is feasible to use kernel translation tables for user virtual memory at the very first steps of the kernel (when switching form physical memory to virtual memory (see e.g. AArch64 boot.c) by directly manipulating MSRs. But vm_map_activate is meant to be invoked much later.)","If we invoke vm_map_activate for kernel VM map, we will effectively start translating user VM accesses using kernel translation tables. vm_map_activate should be only invoked for user VM maps (during ctx switch). (Nevertheless, it is feasible to use kernel translation tables for user virtual memory at the very first steps of the kernel (when switching form physical memory to virtual memory (see e.g. AArch64 boot.c) by directly manipulating MSRs. But vm_map_activate is meant to be invoked much later.)",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1173,2021-10-02T21:25:01Z,2021-10-22T14:42:32Z,2021-10-22T14:42:32Z,MERGED,True,1,3,1,https://github.com/MichalBlk,Do not double timers on the timers list.,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1173,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1173,"In tm_release, there's no need to insert a timer to timers as the timer hasn't been removed yet.
A timer is removed from timers only upon deregistration.","In tm_release, there's no need to insert a timer to timers as the timer hasn't been removed yet.
A timer is removed from timers only upon deregistration.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1174,2021-10-02T21:25:06Z,2022-05-20T14:37:06Z,2022-05-20T14:37:06Z,MERGED,True,1,1,1,https://github.com/MichalBlk,[MIPS] fix FPU ctx saving,5,['review'],https://github.com/cahirwpz/mimiker/pull/1174,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1174,Fix FPU context saving on MIPS.,Fix FPU context saving on MIPS.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1174,2021-10-02T21:25:06Z,2022-05-20T14:37:06Z,2022-05-20T14:37:06Z,MERGED,True,1,1,1,https://github.com/MichalBlk,[MIPS] fix FPU ctx saving,5,['review'],https://github.com/cahirwpz/mimiker/pull/1174,https://github.com/MichalBlk,2,https://github.com/cahirwpz/mimiker/pull/1174#issuecomment-932822680,Fix FPU context saving on MIPS.,"FTTB, there's a problem in saving FP registers on AArch64. This the only flaw hence on WIP (MIPS version works fine).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1174,2021-10-02T21:25:06Z,2022-05-20T14:37:06Z,2022-05-20T14:37:06Z,MERGED,True,1,1,1,https://github.com/MichalBlk,[MIPS] fix FPU ctx saving,5,['review'],https://github.com/cahirwpz/mimiker/pull/1174,https://github.com/MichalBlk,3,https://github.com/cahirwpz/mimiker/pull/1174#issuecomment-1132848536,Fix FPU context saving on MIPS.,This PR will only contain the FPU ctx saving fix. FPU ctx saving tests will be introduced in a separate PR.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1175,2021-10-02T21:25:11Z,2022-03-25T18:30:54Z,2022-03-25T18:30:54Z,MERGED,True,30,11,6,https://github.com/MichalBlk,Save and restore the kframe pointer.,8,['accepted'],https://github.com/cahirwpz/mimiker/pull/1175,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1175,"Currently, kframe is poorly handled on MIPS and not handled at all on AArch64. This PR properly saves the previous value of the kernel exception frame pointer upon entrance to a nested exception and restores it afterwards.","Currently, kframe is poorly handled on MIPS and not handled at all on AArch64. This PR properly saves the previous value of the kernel exception frame pointer upon entrance to a nested exception and restores it afterwards.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1175,2021-10-02T21:25:11Z,2022-03-25T18:30:54Z,2022-03-25T18:30:54Z,MERGED,True,30,11,6,https://github.com/MichalBlk,Save and restore the kframe pointer.,8,['accepted'],https://github.com/cahirwpz/mimiker/pull/1175,https://github.com/MichalBlk,2,https://github.com/cahirwpz/mimiker/pull/1175#issuecomment-1004710209,"Currently, kframe is poorly handled on MIPS and not handled at all on AArch64. This PR properly saves the previous value of the kernel exception frame pointer upon entrance to a nested exception and restores it afterwards.",There is one flaw in this solution I need to fix (regarding MIPS).,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1176,2021-10-15T11:00:24Z,2022-01-21T13:23:38Z,2022-01-21T13:23:38Z,MERGED,True,1030,7,42,https://github.com/MichalBlk,[RISCV] RISC-V Mimiker setup,51,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1176,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1176,Introduce an initial setup of the RISC-V Mimiker port.,Introduce an initial setup of the RISC-V Mimiker port.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1176,2021-10-15T11:00:24Z,2022-01-21T13:23:38Z,2022-01-21T13:23:38Z,MERGED,True,1030,7,42,https://github.com/MichalBlk,[RISCV] RISC-V Mimiker setup,51,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1176,https://github.com/MichalBlk,2,https://github.com/cahirwpz/mimiker/pull/1176#issuecomment-962006887,Introduce an initial setup of the RISC-V Mimiker port.,I will divide the PR into a few sub PRs as @pj1031999 has suggested.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1176,2021-10-15T11:00:24Z,2022-01-21T13:23:38Z,2022-01-21T13:23:38Z,MERGED,True,1030,7,42,https://github.com/MichalBlk,[RISCV] RISC-V Mimiker setup,51,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1176,https://github.com/MichalBlk,3,https://github.com/cahirwpz/mimiker/pull/1176#issuecomment-962131105,Introduce an initial setup of the RISC-V Mimiker port.,"This PR has been moved to ""blocked"" and waits for PRs #1183, #1184, #1185, #1186.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1178,2021-10-15T16:36:39Z,2021-10-18T13:24:24Z,2021-10-18T13:24:36Z,MERGED,True,25,31,6,https://github.com/pj1031999,"Revert ""Bump up QEmu to 6.1.0 and Debian Bullseye.""",1,"['accepted', 'AArch64', 'critical']",https://github.com/cahirwpz/mimiker/pull/1178,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1178,"This reverts commit 3e29e4f.
Fix #1177","This reverts commit 3e29e4f.
Fix #1177",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1179,2021-10-15T17:10:12Z,2021-10-22T14:37:51Z,2021-10-22T14:41:11Z,MERGED,True,16,5,3,https://github.com/MichalBlk,[RISC-V] Toolchain.,3,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1179,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1179,"Introduce rv32 to the Mimiker's toolchain.
Please note that the specified extensions used might change in the future (we're not sure for now).","Introduce rv32 to the Mimiker's toolchain.
Please note that the specified extensions used might change in the future (we're not sure for now).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1179,2021-10-15T17:10:12Z,2021-10-22T14:37:51Z,2021-10-22T14:41:11Z,MERGED,True,16,5,3,https://github.com/MichalBlk,[RISC-V] Toolchain.,3,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1179,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/1179#issuecomment-949690402,"Introduce rv32 to the Mimiker's toolchain.
Please note that the specified extensions used might change in the future (we're not sure for now).",@MichalBlk You have not performed a clean build and you missed a fact that some rules depended on archive type. I fixed it.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1180,2021-10-22T20:11:21Z,2021-10-25T10:56:42Z,2021-10-25T10:56:45Z,MERGED,True,0,13,1,https://github.com/pj1031999,syscalls/getgroups: remove stub,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1180,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1180,"removes getgroups stub
fixes duplicate symbols","removes getgroups stub
fixes duplicate symbols",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1181,2021-10-22T20:14:00Z,,2021-10-25T18:31:21Z,OPEN,False,44,25,6,https://github.com/pj1031999,build/clang: use llvm instead of binutils,1,['proposal'],https://github.com/cahirwpz/mimiker/pull/1181,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1181,"use llvm toolchain with clang build
fix incompatible target for CLANG_ABIFLAGS
explicitly use $(CPP) for c preprocessor
rename CLANG to LLVM

Tested on AArch64 build.
As far as I know mips target is not fully compatible with llvm toolchain.","use llvm toolchain with clang build
fix incompatible target for CLANG_ABIFLAGS
explicitly use $(CPP) for c preprocessor
rename CLANG to LLVM

Tested on AArch64 build.
As far as I know mips target is not fully compatible with llvm toolchain.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1181,2021-10-22T20:14:00Z,,2021-10-25T18:31:21Z,OPEN,False,44,25,6,https://github.com/pj1031999,build/clang: use llvm instead of binutils,1,['proposal'],https://github.com/cahirwpz/mimiker/pull/1181,https://github.com/pj1031999,2,https://github.com/cahirwpz/mimiker/pull/1181#issuecomment-949932529,"use llvm toolchain with clang build
fix incompatible target for CLANG_ABIFLAGS
explicitly use $(CPP) for c preprocessor
rename CLANG to LLVM

Tested on AArch64 build.
As far as I know mips target is not fully compatible with llvm toolchain.",For tests use #1167 with llvm and lld packages.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1181,2021-10-22T20:14:00Z,,2021-10-25T18:31:21Z,OPEN,False,44,25,6,https://github.com/pj1031999,build/clang: use llvm instead of binutils,1,['proposal'],https://github.com/cahirwpz/mimiker/pull/1181,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/1181#issuecomment-950840495,"use llvm toolchain with clang build
fix incompatible target for CLANG_ABIFLAGS
explicitly use $(CPP) for c preprocessor
rename CLANG to LLVM

Tested on AArch64 build.
As far as I know mips target is not fully compatible with llvm toolchain.","Please minimize the changes, esp. in tools.mk.
Also do not rename CLANG variable to LLVM. Clang is not LLVM and vice versa - the same applies to GCC which is not BINUTILS.
Have you verified that after linking with LLVM debugging info is preserved, so that GDB works without hiccups?",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1181,2021-10-22T20:14:00Z,,2021-10-25T18:31:21Z,OPEN,False,44,25,6,https://github.com/pj1031999,build/clang: use llvm instead of binutils,1,['proposal'],https://github.com/cahirwpz/mimiker/pull/1181,https://github.com/pj1031999,4,https://github.com/cahirwpz/mimiker/pull/1181#issuecomment-951193109,"use llvm toolchain with clang build
fix incompatible target for CLANG_ABIFLAGS
explicitly use $(CPP) for c preprocessor
rename CLANG to LLVM

Tested on AArch64 build.
As far as I know mips target is not fully compatible with llvm toolchain.","Please minimize the changes, esp. in tools.mk.


What do you mean? Changes in arch.*.mk are required because target argument for clang was wrong. Changes in compile.mk are cosmetic but you always stop after preprocessor phase for these targets. toolks.mk is just if statement and retab which fixes wrong formatting.


Also do not rename CLANG variable to LLVM. Clang is not LLVM and vice versa - the same applies to GCC which is not BINUTILS.


I don't agree with you. First of all - the source of that naming scheme is Linux kernel - grep 'LLVM' Makefile. I can agree that gcc is not binutils. They are different projects that coexists. But I think that you are wrong about clang relation to llvm. clang lives in llvm source code [1] and it requires libllvm. From my point of view leaving CLANG variable as it is with s/$(TARGET)/llvm/g changes gives wrong assumption that clang requires llvm toolchain which is not true. I believe that in ideal world we should use CC=... to set compiler and LLVM for use whole llvm project. But it is a subject of future changes.


Have you verified that after linking with LLVM debugging info is preserved, so that GDB works without hiccups?


For me it works on AArch64 build as good as before.
Anyway, it's only proof of concept that we can live (almost [2]) without binutils and gcc compiler. I don't know how looks llvm support for risc-v and other build-time features that we are using with gcc (kgprof?) so it's not my intention to merge it. We can just leave it and come back in the future if we will want to explore alternatives to gcc and binutils or we can close this pull request.
[1] https://github.com/llvm/llvm-project/
[2] we still link with libgcc, we can try to use compiler-rt which is a part of llvm project, but I didn't have enough time for tests",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1182,2021-11-05T11:59:35Z,2022-04-25T10:35:34Z,2022-04-25T10:35:35Z,MERGED,True,680,31,15,https://github.com/MichalBlk,[RISCV] Bootstrap,94,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1182,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1182,"Implement the bootstrap process (i.e. _start -> kernel_init).
This PR contains changes from #1228, #1216,  #1212, #1211, #1210, #1203, #1200, and #1194.","Implement the bootstrap process (i.e. _start -> kernel_init).
This PR contains changes from #1228, #1216,  #1212, #1211, #1210, #1203, #1200, and #1194.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1183,2021-11-05T16:22:10Z,2021-11-15T11:29:59Z,2021-11-15T11:29:59Z,MERGED,True,8,2,3,https://github.com/MichalBlk,Process kernel linker scripts using CPP.,7,[],https://github.com/cahirwpz/mimiker/pull/1183,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1183,"Required by #1176.
We would like to support several (RISC-V, platform) setups having a single linker script for the kernel. To achieve this goal we can parametrize linker scripts whit constants exposed by genassym (see http://bxr.su/NetBSD/sys/arch/riscv/conf/kern.ldscript).","Required by #1176.
We would like to support several (RISC-V, platform) setups having a single linker script for the kernel. To achieve this goal we can parametrize linker scripts whit constants exposed by genassym (see http://bxr.su/NetBSD/sys/arch/riscv/conf/kern.ldscript).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1183,2021-11-05T16:22:10Z,2021-11-15T11:29:59Z,2021-11-15T11:29:59Z,MERGED,True,8,2,3,https://github.com/MichalBlk,Process kernel linker scripts using CPP.,7,[],https://github.com/cahirwpz/mimiker/pull/1183,https://github.com/pj1031999,2,https://github.com/cahirwpz/mimiker/pull/1183#issuecomment-968119964,"Required by #1176.
We would like to support several (RISC-V, platform) setups having a single linker script for the kernel. To achieve this goal we can parametrize linker scripts whit constants exposed by genassym (see http://bxr.su/NetBSD/sys/arch/riscv/conf/kern.ldscript).",One more thing (not related to your changes) - we should fix all makefiles. In headers we define how we should format makefiles and we don't follow these rules.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1183,2021-11-05T16:22:10Z,2021-11-15T11:29:59Z,2021-11-15T11:29:59Z,MERGED,True,8,2,3,https://github.com/MichalBlk,Process kernel linker scripts using CPP.,7,[],https://github.com/cahirwpz/mimiker/pull/1183,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/1183#issuecomment-968816804,"Required by #1176.
We would like to support several (RISC-V, platform) setups having a single linker script for the kernel. To achieve this goal we can parametrize linker scripts whit constants exposed by genassym (see http://bxr.su/NetBSD/sys/arch/riscv/conf/kern.ldscript).",@pj1031999 It'd be great if we could easily employ tools like https://github.com/mrtazz/checkmake for checking Makefile corectness!,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1184,2021-11-05T16:36:23Z,2021-11-08T09:40:58Z,2021-11-08T09:40:58Z,MERGED,True,0,15,2,https://github.com/MichalBlk,Remove needless UC defines.,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1184,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1184,There is a handful of UC defines which are unused (in both architectures).,There is a handful of UC defines which are unused (in both architectures).,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1185,2021-11-05T17:40:23Z,2021-11-12T13:27:47Z,2021-11-12T13:27:47Z,MERGED,True,4,4,1,https://github.com/MichalBlk,Launch tty renumbering and fix.,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1185,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1185,"Number ttys from 0 (as hardware numerates uarts from 0).
Rename rip3 console to tty since DevelRun uses this name as the default tmux window if running without debugger.","Number ttys from 0 (as hardware numerates uarts from 0).
Rename rip3 console to tty since DevelRun uses this name as the default tmux window if running without debugger.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1186,2021-11-05T18:26:26Z,2021-11-26T18:50:21Z,2021-11-26T18:50:21Z,MERGED,True,55,15,1,https://github.com/MichalBlk,Add Renode to launch.,8,['accepted'],https://github.com/cahirwpz/mimiker/pull/1186,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1186,"Required by #1176.
Renode has built-in support for SOCs generated using LiteX. We need it to simulate the VexRiscv platform.
Includes changes from #1185.","Required by #1176.
Renode has built-in support for SOCs generated using LiteX. We need it to simulate the VexRiscv platform.
Includes changes from #1185.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1186,2021-11-05T18:26:26Z,2021-11-26T18:50:21Z,2021-11-26T18:50:21Z,MERGED,True,55,15,1,https://github.com/MichalBlk,Add Renode to launch.,8,['accepted'],https://github.com/cahirwpz/mimiker/pull/1186,https://github.com/pj1031999,2,https://github.com/cahirwpz/mimiker/pull/1186#issuecomment-968309389,"Required by #1176.
Renode has built-in support for SOCs generated using LiteX. We need it to simulate the VexRiscv platform.
Includes changes from #1185.",@MichalBlk renode is not part of my area in Mimiker (and I don't want to change that). I guess that @cahirwpz is much better choice for being a reviewer.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1187,2021-11-05T18:35:01Z,2021-11-08T09:41:58Z,2021-11-08T09:41:58Z,MERGED,True,3,3,1,https://github.com/MichalBlk,[USB] Build bus driver unconditionally.,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1187,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1187,USB bus driver should be build unconditionally as we assume all boards to support it.,USB bus driver should be build unconditionally as we assume all boards to support it.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1188,2021-11-19T12:01:13Z,,2022-06-03T21:11:26Z,OPEN,False,447,167,30,https://github.com/MichalBlk,[RISCV] Kernel init,202,"['WiP', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1188,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1188,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1189,2021-11-25T17:24:09Z,2021-11-26T13:11:04Z,2021-11-26T13:11:04Z,MERGED,True,8,10,4,https://github.com/MichalBlk,[DEV] Remove redundant argument from root interrupt handler.,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1189,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1189,intr_root_filter routine contains a redundant argument arg. It's completely needless (and not used) as a rootdev driver can pass any needed data through its state (accessed through driver_t structure).,intr_root_filter routine contains a redundant argument arg. It's completely needless (and not used) as a rootdev driver can pass any needed data through its state (accessed through driver_t structure).,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1190,2021-11-25T17:30:35Z,2021-11-26T13:08:16Z,2021-11-26T13:08:16Z,MERGED,True,2,14,1,https://github.com/MichalBlk,[DEV] Remove interrupt handler priority.,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1190,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1190,"FTTB, all interrupt handlers associated with a given interrupt event are equally important (we always set the priority to 0).","FTTB, all interrupt handlers associated with a given interrupt event are equally important (we always set the priority to 0).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1191,2021-11-25T17:47:31Z,2022-03-24T21:29:34Z,2022-03-24T21:29:34Z,CLOSED,False,20,4,4,https://github.com/MichalBlk,[dev] Inhibit releasing resources that device owns.,2,['review'],https://github.com/cahirwpz/mimiker/pull/1191,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1191,"Each device has statically assigned resources handed to it by the parent bus. Those resources can't be released using bus_release_resource, they can only be deactivated. bus_release_resource should only be called on resources allocated dynamically (i.e. by direct calls to bus_alloc_resource).","Each device has statically assigned resources handed to it by the parent bus. Those resources can't be released using bus_release_resource, they can only be deactivated. bus_release_resource should only be called on resources allocated dynamically (i.e. by direct calls to bus_alloc_resource).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1191,2021-11-25T17:47:31Z,2022-03-24T21:29:34Z,2022-03-24T21:29:34Z,CLOSED,False,20,4,4,https://github.com/MichalBlk,[dev] Inhibit releasing resources that device owns.,2,['review'],https://github.com/cahirwpz/mimiker/pull/1191,https://github.com/MichalBlk,2,https://github.com/cahirwpz/mimiker/pull/1191#issuecomment-1078402248,"Each device has statically assigned resources handed to it by the parent bus. Those resources can't be released using bus_release_resource, they can only be deactivated. bus_release_resource should only be called on resources allocated dynamically (i.e. by direct calls to bus_alloc_resource).","Although the described problem still occurs, it's probably not the best idea to deal with this now. The issue should be solved when adding a function to release a resource in the resource list interface. The resource list implementation may call the corresponding bus interface function (as is done for device_{add,take}_resource). Depending on the actual implementation some convention will have to be established. FTTB, the PR will be closed as the bus release function is not used.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1192,2022-01-08T11:22:39Z,2022-01-14T13:44:43Z,2022-01-14T13:44:43Z,MERGED,True,9,15,4,https://github.com/MichalBlk,[TESTS] Check pointer size instead of architecture in memory related tests,2,['accepted'],https://github.com/cahirwpz/mimiker/pull/1192,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1192,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1193,2022-01-09T09:52:37Z,2022-01-14T12:03:13Z,2022-01-14T12:03:13Z,MERGED,True,9,2,1,https://github.com/MichalBlk,[DTB] Establish DTB target based on BOARD variable.,2,['accepted'],https://github.com/cahirwpz/mimiker/pull/1193,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1193,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1194,2022-01-09T10:32:09Z,2022-03-11T16:02:59Z,2022-03-18T09:51:00Z,MERGED,True,188,33,10,https://github.com/MichalBlk,"[libc] Introduce generic implementation of bcopy, memcpy, memmove and strlen",5,['accepted'],https://github.com/cahirwpz/mimiker/pull/1194,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1194,"Some architectures don't supply specialized implementation of aforementioned functions in NetBSD's libc.
These architectures rely on generic implementation written in C. RISC-V is among them. With generic implementation in gen
and presented changes in common.mk, one can simply make a symlink named $(ARCH) to gen.","Some architectures don't supply specialized implementation of aforementioned functions in NetBSD's libc.
These architectures rely on generic implementation written in C. RISC-V is among them. With generic implementation in gen
and presented changes in common.mk, one can simply make a symlink named $(ARCH) to gen.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1194,2022-01-09T10:32:09Z,2022-03-11T16:02:59Z,2022-03-18T09:51:00Z,MERGED,True,188,33,10,https://github.com/MichalBlk,"[libc] Introduce generic implementation of bcopy, memcpy, memmove and strlen",5,['accepted'],https://github.com/cahirwpz/mimiker/pull/1194,https://github.com/MichalBlk,2,https://github.com/cahirwpz/mimiker/pull/1194#issuecomment-1012973895,"Some architectures don't supply specialized implementation of aforementioned functions in NetBSD's libc.
These architectures rely on generic implementation written in C. RISC-V is among them. With generic implementation in gen
and presented changes in common.mk, one can simply make a symlink named $(ARCH) to gen.","The code has been cleaned. FTTB, I left the size optimized implementations and I will consult @cahirwpz if I should remove them.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1195,2022-01-10T21:31:21Z,2022-01-14T12:02:20Z,2022-03-18T09:51:06Z,MERGED,True,3,2,1,https://github.com/pj1031999,[tools] update ackrc,4,['accepted'],https://github.com/cahirwpz/mimiker/pull/1195,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1195,update .ackrc,update .ackrc,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1196,2022-01-10T21:44:45Z,2022-01-14T13:33:49Z,2022-01-14T13:34:00Z,MERGED,True,0,129,1,https://github.com/pj1031999,[arch/mips/malta] remove malta.dts,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1196,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1196,Port for Malta board doesn't use device tree - remove unused file.,Port for Malta board doesn't use device tree - remove unused file.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1197,2022-01-12T19:37:26Z,2022-06-06T19:56:46Z,2022-06-06T19:56:49Z,MERGED,True,0,11,1,https://github.com/pj1031999,[toolchain] remove unused Dockerfile from toolchain directory,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1197,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1197,Remove unused Dockerfile from toolchain directory.,Remove unused Dockerfile from toolchain directory.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1198,2022-01-12T21:08:40Z,,2022-01-17T07:54:09Z,OPEN,False,0,36,5,https://github.com/pj1031999,[bus] remove bus_methods::release_resource,1,['proposal'],https://github.com/cahirwpz/mimiker/pull/1198,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1198,Let's remove dead code.,Let's remove dead code.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1199,2022-01-12T21:09:42Z,,2022-01-17T07:55:14Z,OPEN,False,0,76,6,https://github.com/pj1031999,[bus] remove bus_methods::deactivate_resource ,2,['proposal'],https://github.com/cahirwpz/mimiker/pull/1199,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1199,"Remove dead code.
Contains #1198","Remove dead code.
Contains #1198",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1200,2022-01-13T21:39:27Z,2022-03-26T08:44:08Z,2022-03-26T08:44:08Z,MERGED,True,604,128,9,https://github.com/MichalBlk,[dtb] Introduce FDT module based on FreeBSD's FDT and OF modules.,44,['accepted'],https://github.com/cahirwpz/mimiker/pull/1200,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1200,The current DTB module doesn't implement some crucial functions independent of the target architecture. Missing functionalities include memory description parsing and boot arguments extraction. The presented change introduces an FDT module based on the FDT and OF modules from FreeBSD.,The current DTB module doesn't implement some crucial functions independent of the target architecture. Missing functionalities include memory description parsing and boot arguments extraction. The presented change introduces an FDT module based on the FDT and OF modules from FreeBSD.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1200,2022-01-13T21:39:27Z,2022-03-26T08:44:08Z,2022-03-26T08:44:08Z,MERGED,True,604,128,9,https://github.com/MichalBlk,[dtb] Introduce FDT module based on FreeBSD's FDT and OF modules.,44,['accepted'],https://github.com/cahirwpz/mimiker/pull/1200,https://github.com/MichalBlk,2,https://github.com/cahirwpz/mimiker/pull/1200#issuecomment-1013768778,The current DTB module doesn't implement some crucial functions independent of the target architecture. Missing functionalities include memory description parsing and boot arguments extraction. The presented change introduces an FDT module based on the FDT and OF modules from FreeBSD.,A lot has changed. In the previous solution I didn't consider the size-cells property and assumed it to be equal to address-cells property which is incorrect. Currently the PR is moving to blocked as in contains changes from #1203.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1200,2022-01-13T21:39:27Z,2022-03-26T08:44:08Z,2022-03-26T08:44:08Z,MERGED,True,604,128,9,https://github.com/MichalBlk,[dtb] Introduce FDT module based on FreeBSD's FDT and OF modules.,44,['accepted'],https://github.com/cahirwpz/mimiker/pull/1200,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/1200#issuecomment-1079297471,The current DTB module doesn't implement some crucial functions independent of the target architecture. Missing functionalities include memory description parsing and boot arguments extraction. The presented change introduces an FDT module based on the FDT and OF modules from FreeBSD.,@MichalBlk Please update PR description / title to match its' current state.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1201,2022-01-14T13:50:26Z,2022-01-14T14:06:57Z,2022-01-14T14:06:58Z,MERGED,True,1,19,7,https://github.com/MichalBlk,[includes] Remove md cdefs.,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1201,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1201,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1202,2022-01-14T22:14:17Z,2022-03-18T09:50:31Z,2022-03-18T09:51:11Z,MERGED,True,13,31,10,https://github.com/pj1031999,[sched] remove unused code,3,['accepted'],https://github.com/cahirwpz/mimiker/pull/1202,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1202,"remove reason argument from sched_wakeup (always 0)
delete ctx_set_retval
change return value of sched_switch to void
change return value of ctx_switch to void","remove reason argument from sched_wakeup (always 0)
delete ctx_set_retval
change return value of sched_switch to void
change return value of ctx_switch to void",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1202,2022-01-14T22:14:17Z,2022-03-18T09:50:31Z,2022-03-18T09:51:11Z,MERGED,True,13,31,10,https://github.com/pj1031999,[sched] remove unused code,3,['accepted'],https://github.com/cahirwpz/mimiker/pull/1202,https://github.com/pj1031999,2,https://github.com/cahirwpz/mimiker/pull/1202#issuecomment-1013740264,"remove reason argument from sched_wakeup (always 0)
delete ctx_set_retval
change return value of sched_switch to void
change return value of ctx_switch to void","Please remove the initial setting of the return value of ctx_switch in sys/mips/switch.S:
SAVE_CTX(_sr)
...
        SAVE_REG(zero, V0, sp);
...
And restoring of V0.

as you wish",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1203,2022-01-15T11:00:13Z,2022-03-11T15:31:54Z,2022-03-18T09:51:16Z,MERGED,True,5,5,1,https://github.com/MichalBlk,[boot] Initialize klog before building kernel environment.,13,['accepted'],https://github.com/cahirwpz/mimiker/pull/1203,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1203,"We want to use dtb module inside board_stack (i.e. while building kernel environment), but to do so we need to initialize ksan and klog before moving to board_stack. This PR introduces a new function to accommodate the needed calls.","We want to use dtb module inside board_stack (i.e. while building kernel environment), but to do so we need to initialize ksan and klog before moving to board_stack. This PR introduces a new function to accommodate the needed calls.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1203,2022-01-15T11:00:13Z,2022-03-11T15:31:54Z,2022-03-18T09:51:16Z,MERGED,True,5,5,1,https://github.com/MichalBlk,[boot] Initialize klog before building kernel environment.,13,['accepted'],https://github.com/cahirwpz/mimiker/pull/1203,https://github.com/MichalBlk,2,https://github.com/cahirwpz/mimiker/pull/1203#issuecomment-1013704599,"We want to use dtb module inside board_stack (i.e. while building kernel environment), but to do so we need to initialize ksan and klog before moving to board_stack. This PR introduces a new function to accommodate the needed calls.","You're right. All I want to do is to initialize klog before calling board_stack as dtb module will use it (#1200). I don't want to introduce MD panic for usage before initializing klog as dtb module will also be called form drivers code. What would you say about that:

I will move init_klog call to _start (after aarch64_init), init_kasan will stay in board_init.
I will introduce klog_update_mask and call it in board_init after initializing ksan.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1203,2022-01-15T11:00:13Z,2022-03-11T15:31:54Z,2022-03-18T09:51:16Z,MERGED,True,5,5,1,https://github.com/MichalBlk,[boot] Initialize klog before building kernel environment.,13,['accepted'],https://github.com/cahirwpz/mimiker/pull/1203,https://github.com/pj1031999,3,https://github.com/cahirwpz/mimiker/pull/1203#issuecomment-1013716382,"We want to use dtb module inside board_stack (i.e. while building kernel environment), but to do so we need to initialize ksan and klog before moving to board_stack. This PR introduces a new function to accommodate the needed calls.","Oh, I see, I missed that now you are using generic code for dtb. In that case it sounds good. Ping me after update and I will be happy to see code.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1204,2022-01-15T20:20:59Z,,2022-03-22T10:07:53Z,OPEN,False,0,10,1,https://github.com/pj1031999,[lock] remove LK_TYPE_SLEEP,1,['proposal'],https://github.com/cahirwpz/mimiker/pull/1204,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1204,LK_TYPE_SLEEP is not used in our codebase.,LK_TYPE_SLEEP is not used in our codebase.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1205,2022-01-16T20:05:15Z,2022-01-17T12:37:42Z,2022-03-18T09:51:22Z,MERGED,True,9,9,4,https://github.com/pj1031999,[klog] fix klog format for tid_t,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1205,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1205,tid_t is uint32_t aka unsigned int which uses %u as specifier for printf-like functions.,tid_t is uint32_t aka unsigned int which uses %u as specifier for printf-like functions.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1206,2022-01-17T22:11:52Z,,2022-01-17T22:11:52Z,OPEN,False,82,48,10,https://github.com/pj1031999,[thread] introduce dedicated functions for locks,1,['review'],https://github.com/cahirwpz/mimiker/pull/1206,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1206,"thread_lock(td) - acquire td::td_lock
thread_unlock(td) - release td::td_lock
thread_owned(td) - return spin_owned(td->td_lock)","thread_lock(td) - acquire td::td_lock
thread_unlock(td) - release td::td_lock
thread_owned(td) - return spin_owned(td->td_lock)",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1207,2022-01-20T22:33:20Z,,2022-03-11T13:51:28Z,OPEN,False,22,3,3,https://github.com/pj1031999,[sched] introduce sched_remove,1,"['review', 'SMP']",https://github.com/cahirwpz/mimiker/pull/1207,https://github.com/pj1031999,1,https://github.com/cahirwpz/mimiker/pull/1207,Add ability to remove thread from scheduler.,Add ability to remove thread from scheduler.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1209,2022-03-10T21:33:14Z,2022-03-11T13:33:15Z,2022-03-18T09:51:26Z,MERGED,True,1,2,1,https://github.com/MichalBlk,[RISCV] Fix kernel LD script.,1,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1209,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1209,"There is a duplication of the small rodata sections, and .sdata output section has no program header assigned to it.","There is a duplication of the small rodata sections, and .sdata output section has no program header assigned to it.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1210,2022-03-11T12:58:33Z,2022-03-11T13:31:53Z,2022-03-18T09:51:31Z,MERGED,True,11,10,3,https://github.com/MichalBlk,[RISCV] Fix FP defines.,1,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1210,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1210,Current RISC-V headers don't respect the fact that if double FP extension is supported then both __riscv_f and __riscv_d are defined.,Current RISC-V headers don't respect the fact that if double FP extension is supported then both __riscv_f and __riscv_d are defined.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1211,2022-03-11T13:04:45Z,2022-03-11T13:34:07Z,2022-03-18T09:51:36Z,MERGED,True,2,2,2,https://github.com/MichalBlk,[RISCV] Fix guards in headers.,1,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1211,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1211,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1212,2022-03-11T13:13:11Z,2022-03-11T15:23:20Z,2022-03-18T09:51:42Z,CLOSED,False,188,33,10,https://github.com/MichalBlk,[RISCV][libc] Employ the generic libc string functions.,5,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1212,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1212,Contains changes introduced in #1194.,Contains changes introduced in #1194.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1212,2022-03-11T13:13:11Z,2022-03-11T15:23:20Z,2022-03-18T09:51:42Z,CLOSED,False,188,33,10,https://github.com/MichalBlk,[RISCV][libc] Employ the generic libc string functions.,5,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1212,https://github.com/MichalBlk,2,https://github.com/cahirwpz/mimiker/pull/1212#issuecomment-1065213848,Contains changes introduced in #1194.,This will be contained in #1194.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1213,2022-03-18T10:30:52Z,2022-03-21T16:48:35Z,2022-03-21T16:48:35Z,MERGED,True,5449,1127,23,https://github.com/MichalBlk,[lib] Introduce libfdt from FreeBSD.,5,"['accepted', 'proposal']",https://github.com/cahirwpz/mimiker/pull/1213,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1213,The current libfdt library lacks some useful functions introduced by the corresponding library from FreeBSD (https://mimiker.ii.uni.wroc.pl/source/xref/FreeBSD/sys/contrib/libfdt/) e.g. fdt_get_mem_rsv and fdt_parent_offset. The additional functions are useful and will be used to implement the system fdt parsing module.,The current libfdt library lacks some useful functions introduced by the corresponding library from FreeBSD (https://mimiker.ii.uni.wroc.pl/source/xref/FreeBSD/sys/contrib/libfdt/) e.g. fdt_get_mem_rsv and fdt_parent_offset. The additional functions are useful and will be used to implement the system fdt parsing module.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1214,2022-03-21T15:48:54Z,2022-03-21T16:10:07Z,2022-03-21T16:10:07Z,MERGED,True,2,0,2,https://github.com/MichalBlk,[lib] Add memmove to libkern.,1,[],https://github.com/cahirwpz/mimiker/pull/1214,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1214,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1215,2022-03-25T10:01:27Z,2022-03-25T16:20:57Z,2022-03-25T16:20:58Z,CLOSED,False,1,1,1,https://github.com/MichalBlk,[RISCV] Fix ctx_switch signature.,1,"['review', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1215,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1215,"The signature of the context switching routine has changed. Unfortunately, the RISC-V implementation hasn't been adapted yet.","The signature of the context switching routine has changed. Unfortunately, the RISC-V implementation hasn't been adapted yet.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1215,2022-03-25T10:01:27Z,2022-03-25T16:20:57Z,2022-03-25T16:20:58Z,CLOSED,False,1,1,1,https://github.com/MichalBlk,[RISCV] Fix ctx_switch signature.,1,"['review', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1215,https://github.com/MichalBlk,2,https://github.com/cahirwpz/mimiker/pull/1215#issuecomment-1079187851,"The signature of the context switching routine has changed. Unfortunately, the RISC-V implementation hasn't been adapted yet.",This will be merged with #1216.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1216,2022-03-25T10:02:31Z,2022-03-25T18:33:21Z,2022-03-25T18:33:22Z,MERGED,True,292,1,3,https://github.com/MichalBlk,[RISCV] Introduce BSD RISC-V headers.,3,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1216,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1216,"Our RISC-V port relies on the headers taken from FreeBSD with modifications based on the corresponding NetBSD headers.
This PR contains changes from #1215.","Our RISC-V port relies on the headers taken from FreeBSD with modifications based on the corresponding NetBSD headers.
This PR contains changes from #1215.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1217,2022-03-25T10:17:55Z,2022-04-25T10:26:55Z,2022-04-25T10:27:04Z,CLOSED,False,1,1,1,https://github.com/MichalBlk,[RISCV] The simulated LiteX VexRiscv platform doesn't use the floating-point extension.,1,['RISC-V'],https://github.com/cahirwpz/mimiker/pull/1217,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1217,The simulated LiteX VexRiscv hardware platform doesn't support any floating-point extension.,The simulated LiteX VexRiscv hardware platform doesn't support any floating-point extension.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1217,2022-03-25T10:17:55Z,2022-04-25T10:26:55Z,2022-04-25T10:27:04Z,CLOSED,False,1,1,1,https://github.com/MichalBlk,[RISCV] The simulated LiteX VexRiscv platform doesn't use the floating-point extension.,1,['RISC-V'],https://github.com/cahirwpz/mimiker/pull/1217,https://github.com/MichalBlk,2,https://github.com/cahirwpz/mimiker/pull/1217#issuecomment-1108385658,The simulated LiteX VexRiscv hardware platform doesn't support any floating-point extension.,This change will be merged as part of #1182.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1218,2022-04-01T05:41:43Z,2022-04-22T14:40:11Z,2022-04-22T14:40:12Z,MERGED,True,487,0,3,https://github.com/MichalBlk,[RISCV] Introduce kernel SBI library.,5,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1218,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1218,A supervisor mode RISC-V kernel communicates with its execution environment via Supervisor Binary Interface (SBI). The presented change introduces a kernel library for issuing services defined by the SBI specification.,A supervisor mode RISC-V kernel communicates with its execution environment via Supervisor Binary Interface (SBI). The presented change introduces a kernel library for issuing services defined by the SBI specification.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1219,2022-04-01T06:20:09Z,2022-04-08T10:27:54Z,2022-04-08T11:57:48Z,MERGED,True,313,10,5,https://github.com/MichalBlk,[RISC-V][libc] Nonlocal goto.,4,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1219,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1219,Implementation of nonlocal goto functions for the RISC-V target architecture.,Implementation of nonlocal goto functions for the RISC-V target architecture.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1220,2022-04-01T06:37:53Z,2022-04-08T11:57:09Z,2022-04-08T11:57:33Z,MERGED,True,48,6,3,https://github.com/MichalBlk,[RISCV][libc] Syscalls.,2,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1220,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1220,libc syscall implementation for the RISC-V target architecture.,libc syscall implementation for the RISC-V target architecture.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1221,2022-04-01T06:50:49Z,2022-04-08T11:58:42Z,2022-04-08T11:58:42Z,MERGED,True,32,2,1,https://github.com/MichalBlk,[RISC-V][csu] Entry point for ELF images.,2,"['review', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1221,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1221,This PR provides an entry point for user ELF images.,This PR provides an entry point for user ELF images.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1222,2022-04-01T07:00:35Z,2022-04-08T10:14:46Z,2022-04-08T10:14:46Z,MERGED,True,3,3,1,https://github.com/MichalBlk,[Aarch64][libc] Fix missing syscall handling.,3,"['accepted', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/1222,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1222,__sc_error should behave as if the syscall returned ENOSYS.,__sc_error should behave as if the syscall returned ENOSYS.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1222,2022-04-01T07:00:35Z,2022-04-08T10:14:46Z,2022-04-08T10:14:46Z,MERGED,True,3,3,1,https://github.com/MichalBlk,[Aarch64][libc] Fix missing syscall handling.,3,"['accepted', 'AArch64']",https://github.com/cahirwpz/mimiker/pull/1222,https://github.com/MichalBlk,2,https://github.com/cahirwpz/mimiker/pull/1222#issuecomment-1092638232,__sc_error should behave as if the syscall returned ENOSYS.,Done.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1223,2022-04-01T07:08:38Z,2022-04-01T10:20:45Z,2022-04-01T10:20:45Z,MERGED,True,2,2,2,https://github.com/MichalBlk,[csu] Fix ELF entry point description.,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1223,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1223,Both MIPS and Aarch64 refer to the nonexistent prepare_program_stack procedure as a reference to setting the program's environment.,Both MIPS and Aarch64 refer to the nonexistent prepare_program_stack procedure as a reference to setting the program's environment.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1224,2022-04-04T14:35:47Z,2022-04-22T14:17:19Z,2022-04-22T14:17:19Z,MERGED,True,235,127,20,https://github.com/MichalBlk,[dev] Interrupt controller interface.,4,['accepted'],https://github.com/cahirwpz/mimiker/pull/1224,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1224,"With the arrival of RISC-V we finally have interrupt controllers that cannot be perceived as buses. Therefore, the current bus interface must be split into two separate interfaces:

bus interface,
interrupt controller interface.","With the arrival of RISC-V we finally have interrupt controllers that cannot be perceived as buses. Therefore, the current bus interface must be split into two separate interfaces:

bus interface,
interrupt controller interface.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1224,2022-04-04T14:35:47Z,2022-04-22T14:17:19Z,2022-04-22T14:17:19Z,MERGED,True,235,127,20,https://github.com/MichalBlk,[dev] Interrupt controller interface.,4,['accepted'],https://github.com/cahirwpz/mimiker/pull/1224,https://github.com/pj1031999,2,https://github.com/cahirwpz/mimiker/pull/1224#issuecomment-1105762042,"With the arrival of RISC-V we finally have interrupt controllers that cannot be perceived as buses. Therefore, the current bus interface must be split into two separate interfaces:

bus interface,
interrupt controller interface.",@MichalBlk what is the reason for renaming?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1224,2022-04-04T14:35:47Z,2022-04-22T14:17:19Z,2022-04-22T14:17:19Z,MERGED,True,235,127,20,https://github.com/MichalBlk,[dev] Interrupt controller interface.,4,['accepted'],https://github.com/cahirwpz/mimiker/pull/1224,https://github.com/MichalBlk,3,https://github.com/cahirwpz/mimiker/pull/1224#issuecomment-1106103479,"With the arrival of RISC-V we finally have interrupt controllers that cannot be perceived as buses. Therefore, the current bus interface must be split into two separate interfaces:

bus interface,
interrupt controller interface.","@pj1031999 @cahirwpz doesn't like the ""ic"" abbreviation. I suggested ICU (Interrupt Control Unit) whereas @cahirwpz suggested PIC (Programmable Interrupt Controller). It seems that the latter term is used more often so I used PIC. The reason why the functions start with the pic_ prefix is to be consistent with the remaining interfaces (e.g. bus_*, uart_*).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1225,2022-04-20T11:33:22Z,2022-04-20T14:48:35Z,2022-04-20T14:48:36Z,MERGED,True,9,3,3,https://github.com/MichalBlk,[RISCV] QEmu: add 64-bit system emulator.,2,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1225,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1225,"Mimiker will support both 32- and 64-bit RISC-V CPUs. For the 64-bit variant, the QEum system emulator will be used.","Mimiker will support both 32- and 64-bit RISC-V CPUs. For the 64-bit variant, the QEum system emulator will be used.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1226,2022-04-20T11:52:14Z,,2022-06-03T13:26:13Z,OPEN,False,926,182,38,https://github.com/MichalBlk,[RISCV] HiFive Unleashed,225,"['WiP', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1226,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1226,This PR contains all changes needed to run Mimiker on the HiFive Unleashed QEmu emulated board.,This PR contains all changes needed to run Mimiker on the HiFive Unleashed QEmu emulated board.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1227,2022-04-20T13:16:26Z,2022-04-20T14:49:26Z,2022-04-20T14:49:31Z,MERGED,True,8,8,1,https://github.com/MichalBlk,[RISCV] Fix generic assembly macros.,1,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1227,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1227,"Apparently, NetBSD has wrong definitions of the 64-bit ops that operate on 32-bit values.","Apparently, NetBSD has wrong definitions of the 64-bit ops that operate on 32-bit values.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1228,2022-04-22T11:39:20Z,2022-04-22T14:39:15Z,2022-04-22T14:39:15Z,MERGED,True,32,18,3,https://github.com/MichalBlk,[dtb] Access FDT blob using dmap.,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1228,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1228,"We don't have to map the FDT blob to kva as it can be accessed through the direct map. The FDT_change_root and FDT_get_physaddr functions are used (currently only by RISC-V, see #1182) to provide the FDT module with a dmap address after building the direct map. (Note that the same will be done for Aarch64 when the code is changed to first read the memory boundaries and build dmap afterward.)
Besides, the PR removes a warning caused by aliasing violation.","We don't have to map the FDT blob to kva as it can be accessed through the direct map. The FDT_change_root and FDT_get_physaddr functions are used (currently only by RISC-V, see #1182) to provide the FDT module with a dmap address after building the direct map. (Note that the same will be done for Aarch64 when the code is changed to first read the memory boundaries and build dmap afterward.)
Besides, the PR removes a warning caused by aliasing violation.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1229,2022-04-25T11:45:12Z,2022-04-25T15:36:49Z,2022-04-25T15:36:49Z,MERGED,True,74,13,1,https://github.com/MichalBlk,[RISCV] Machine context management module.,1,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1229,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1229,Machine-dependent CPU context management module for RISC-V.,Machine-dependent CPU context management module for RISC-V.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1230,2022-04-25T12:07:28Z,2022-05-13T15:01:36Z,2022-05-13T15:01:36Z,CLOSED,False,648,75,4,https://github.com/MichalBlk,[RISCV] Physical map management.,1,"['blocked', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1230,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1230,Physical address map management for the RISC-V target architecture. The pmap module relies on the provided tlb flushing module.,Physical address map management for the RISC-V target architecture. The pmap module relies on the provided tlb flushing module.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1230,2022-04-25T12:07:28Z,2022-05-13T15:01:36Z,2022-05-13T15:01:36Z,CLOSED,False,648,75,4,https://github.com/MichalBlk,[RISCV] Physical map management.,1,"['blocked', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1230,https://github.com/MichalBlk,2,https://github.com/cahirwpz/mimiker/pull/1230#issuecomment-1119661081,Physical address map management for the RISC-V target architecture. The pmap module relies on the provided tlb flushing module.,"We decided to make an attempt to provide a generic implementation of the pmap module (#1243). Thereby, this PR becomes blocked until the aforementioned change is merged (or an alternative approach is established). I introduced most of the fixes suggested by @pj1031999 into #1243.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1230,2022-04-25T12:07:28Z,2022-05-13T15:01:36Z,2022-05-13T15:01:36Z,CLOSED,False,648,75,4,https://github.com/MichalBlk,[RISCV] Physical map management.,1,"['blocked', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1230,https://github.com/cahirwpz,3,https://github.com/cahirwpz/mimiker/pull/1230#issuecomment-1126153170,Physical address map management for the RISC-V target architecture. The pmap module relies on the provided tlb flushing module.,Since we decided to base our implementation of pmap for RISC-V on #1243 we'll continue work on it in another PR.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1231,2022-04-25T12:53:00Z,2022-04-25T15:20:19Z,2022-04-25T15:20:19Z,MERGED,True,2,2,2,https://github.com/MichalBlk,[sig] Copy siginfo instead of ksiginfo when sending signals.,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1231,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1231,ksiginfo_t is a kernel-internal structure. The user should only be able to access the corresponding siginfo_t structure.,ksiginfo_t is a kernel-internal structure. The user should only be able to access the corresponding siginfo_t structure.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1232,2022-04-25T13:03:18Z,2022-04-25T15:27:24Z,2022-04-25T15:27:24Z,MERGED,True,68,2,3,https://github.com/MichalBlk,[RISCV] Signal delivery implementation.,3,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1232,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1232,Implementation of the low-level signal delivery routine.,Implementation of the low-level signal delivery routine.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1233,2022-04-29T12:56:50Z,2022-05-13T15:07:04Z,2022-05-13T15:07:05Z,CLOSED,False,476,14,6,https://github.com/MichalBlk,[dev] Simplebus,3,['WiP'],https://github.com/cahirwpz/mimiker/pull/1233,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1233,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1233,2022-04-29T12:56:50Z,2022-05-13T15:07:04Z,2022-05-13T15:07:05Z,CLOSED,False,476,14,6,https://github.com/MichalBlk,[dev] Simplebus,3,['WiP'],https://github.com/cahirwpz/mimiker/pull/1233,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/1233#issuecomment-1126158332,,"Since we've merged #1235 we don't need to invest more time into simplebus, however we'll tackle the topic in near future.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1234,2022-05-01T20:14:03Z,2022-05-06T09:28:52Z,2022-05-06T09:28:52Z,MERGED,True,17,2,1,https://github.com/mohrcore,Add drive images through CLI,5,['accepted'],https://github.com/cahirwpz/mimiker/pull/1234,https://github.com/mohrcore,1,https://github.com/cahirwpz/mimiker/pull/1234,"Allows to specify drive image(s) to Qemu when launching mimiker through launch script.
Usage:
launch -s sd:image.img
launch --storage sd:image.img

The argument for --storage consists of two parts splitted by : delimiter. On the left of : there's a name of a drive bus associated with a board, on the right there's a path to an image file. The format of the file is decided as a part of drive bus config, see qemu.boards.<board_name>.drives config in launch.","Allows to specify drive image(s) to Qemu when launching mimiker through launch script.
Usage:
launch -s sd:image.img
launch --storage sd:image.img

The argument for --storage consists of two parts splitted by : delimiter. On the left of : there's a name of a drive bus associated with a board, on the right there's a path to an image file. The format of the file is decided as a part of drive bus config, see qemu.boards.<board_name>.drives config in launch.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1234,2022-05-01T20:14:03Z,2022-05-06T09:28:52Z,2022-05-06T09:28:52Z,MERGED,True,17,2,1,https://github.com/mohrcore,Add drive images through CLI,5,['accepted'],https://github.com/cahirwpz/mimiker/pull/1234,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/1234#issuecomment-1119427015,"Allows to specify drive image(s) to Qemu when launching mimiker through launch script.
Usage:
launch -s sd:image.img
launch --storage sd:image.img

The argument for --storage consists of two parts splitted by : delimiter. On the left of : there's a name of a drive bus associated with a board, on the right there's a path to an image file. The format of the file is decided as a part of drive bus config, see qemu.boards.<board_name>.drives config in launch.",@pj1031999 I simplified the code under assumption that we have at most one storage device for each platform.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1235,2022-05-02T10:33:34Z,2022-05-08T07:33:57Z,2022-05-08T07:33:57Z,MERGED,True,415,11,10,https://github.com/MichalBlk,[dev] Basic simplebus feature.,11,['accepted'],https://github.com/cahirwpz/mimiker/pull/1235,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1235,This is an initial approach to implement the simplebus bus. The first step is to stop assigning resources explicitly and parse the FDT instead. We still need to implement the simplebus enumeration but that will be introduced in a separate PR after the RISC-V port is finally merged into the master branch.,This is an initial approach to implement the simplebus bus. The first step is to stop assigning resources explicitly and parse the FDT instead. We still need to implement the simplebus enumeration but that will be introduced in a separate PR after the RISC-V port is finally merged into the master branch.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1235,2022-05-02T10:33:34Z,2022-05-08T07:33:57Z,2022-05-08T07:33:57Z,MERGED,True,415,11,10,https://github.com/MichalBlk,[dev] Basic simplebus feature.,11,['accepted'],https://github.com/cahirwpz/mimiker/pull/1235,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/1235#issuecomment-1119675134,This is an initial approach to implement the simplebus bus. The first step is to stop assigning resources explicitly and parse the FDT instead. We still need to implement the simplebus enumeration but that will be introduced in a separate PR after the RISC-V port is finally merged into the master branch.,"@pj1031999 If you started working on the review of this PR, please do not continue your work. We need you to give feedback on more important PRs like #1230",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1236,2022-05-02T10:54:18Z,2022-05-09T18:52:22Z,2022-05-09T18:52:22Z,MERGED,True,251,3,1,https://github.com/MichalBlk,[RISCV][dev] LiteX RISC-V root bus device driver.,27,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1236,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1236,"This change introduces a root bus device driver for the LiteX RISC-V hardware platform.
This PR contains changes from #1235.","This change introduces a root bus device driver for the LiteX RISC-V hardware platform.
This PR contains changes from #1235.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1237,2022-05-02T11:03:39Z,2022-05-13T14:23:48Z,2022-05-13T14:23:48Z,MERGED,True,196,1,2,https://github.com/MichalBlk,[RISCV][dev] Platform-Level Interrupt Controller (PLIC) driver.,27,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1237,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1237,"This change introduces a device driver for the Platform-Level Interrupt Controller device.
This PR contains changes from #1235, #1251.","This change introduces a device driver for the Platform-Level Interrupt Controller device.
This PR contains changes from #1235, #1251.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1238,2022-05-02T11:11:52Z,2022-05-10T09:10:33Z,2022-05-10T09:10:33Z,MERGED,True,133,0,2,https://github.com/MichalBlk,[RISCV][dev] SiFive Core-Local Interruptor (CLINT) driver.,15,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1238,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1238,"This change introduces a driver the the SiFive Core-Local Interruptor (CLINT) device.
This PR contains changes from #1235.","This change introduces a driver the the SiFive Core-Local Interruptor (CLINT) device.
This PR contains changes from #1235.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1239,2022-05-02T11:46:41Z,2022-05-13T14:27:23Z,2022-05-13T14:27:23Z,MERGED,True,147,0,2,https://github.com/MichalBlk,[dev] LiteUART driver.,10,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1239,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1239,This PR contains changes from #1235.,This PR contains changes from #1235.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1239,2022-05-02T11:46:41Z,2022-05-13T14:27:23Z,2022-05-13T14:27:23Z,MERGED,True,147,0,2,https://github.com/MichalBlk,[dev] LiteUART driver.,10,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1239,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/1239#issuecomment-1120367154,This PR contains changes from #1235.,@MichalBlk Please resolve conflicts.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1239,2022-05-02T11:46:41Z,2022-05-13T14:27:23Z,2022-05-13T14:27:23Z,MERGED,True,147,0,2,https://github.com/MichalBlk,[dev] LiteUART driver.,10,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1239,https://github.com/MichalBlk,3,https://github.com/cahirwpz/mimiker/pull/1239#issuecomment-1125823145,This PR contains changes from #1235.,Conflicts have been resolved.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1240,2022-05-02T12:44:02Z,2022-05-13T14:39:53Z,2022-05-13T14:40:00Z,MERGED,True,309,1,2,https://github.com/MichalBlk,[RISCV] Trap handling module.,8,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1240,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1240,"This code implements trap handling for the RISC-V target architecture.
NOTE: it requires the trap entry module to function properly.","This code implements trap handling for the RISC-V target architecture.
NOTE: it requires the trap entry module to function properly.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1241,2022-05-02T12:52:01Z,2022-05-06T14:54:16Z,2022-05-06T14:54:27Z,MERGED,True,12,44,8,https://github.com/MichalBlk,[td] Generic thread entry setup.,3,['accepted'],https://github.com/cahirwpz/mimiker/pull/1241,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1241,"FTTB, thread_entry_setup implementation is identical on each target architecture. Therefore, this PR extracts the generic implementation into a separate module.","FTTB, thread_entry_setup implementation is identical on each target architecture. Therefore, this PR extracts the generic implementation into a separate module.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1241,2022-05-02T12:52:01Z,2022-05-06T14:54:16Z,2022-05-06T14:54:27Z,MERGED,True,12,44,8,https://github.com/MichalBlk,[td] Generic thread entry setup.,3,['accepted'],https://github.com/cahirwpz/mimiker/pull/1241,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/1241#issuecomment-1119709147,"FTTB, thread_entry_setup implementation is identical on each target architecture. Therefore, this PR extracts the generic implementation into a separate module.",I like this change. There're some parts in machine dependant code that looks the same for each architecture. I think that extracting the code into gen directory is a good move. Let's apply DRY (don't repeat yourself) principle whenever there's a possibility to do so.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1242,2022-05-02T12:57:12Z,2022-05-02T13:59:18Z,2022-05-02T13:59:18Z,MERGED,True,32,0,2,https://github.com/MichalBlk,[RISCV] Support for MI tests.,1,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1242,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1242,Add support for machine-independent tests.,Add support for machine-independent tests.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1243,2022-05-06T11:21:55Z,2022-06-03T05:33:53Z,2022-06-03T05:34:04Z,MERGED,True,1020,1260,25,https://github.com/MichalBlk,[pmap] Extract common machdep code to single file,21,['accepted'],https://github.com/cahirwpz/mimiker/pull/1243,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1243,"As @pj1031999 has noticed, most of the code composing the pmap module for each target architecture is common. Therefore, this PR introduces a generic implementation of the module. The generic pmap relies on an API implemented by each target architecture and described in include/sys/_pmap.h.","As @pj1031999 has noticed, most of the code composing the pmap module for each target architecture is common. Therefore, this PR introduces a generic implementation of the module. The generic pmap relies on an API implemented by each target architecture and described in include/sys/_pmap.h.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1243,2022-05-06T11:21:55Z,2022-06-03T05:33:53Z,2022-06-03T05:34:04Z,MERGED,True,1020,1260,25,https://github.com/MichalBlk,[pmap] Extract common machdep code to single file,21,['accepted'],https://github.com/cahirwpz/mimiker/pull/1243,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/1243#issuecomment-1119705734,"As @pj1031999 has noticed, most of the code composing the pmap module for each target architecture is common. Therefore, this PR introduces a generic implementation of the module. The generic pmap relies on an API implemented by each target architecture and described in include/sys/_pmap.h.","I think that this PR follows a good direction. However we need to address some deficiencies. Namely I'd strive to rewrite pmap_ensure_pte and pmap_lookup_pte with loops that depend on number of page table levels. I'd rewrite lX_level into generic function pt_index(level, va). Let's also move one-liners from arch/pmap.c into arch/pmap.h. Then let's revisit this PR and ask @pj1031999 to review it.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1243,2022-05-06T11:21:55Z,2022-06-03T05:33:53Z,2022-06-03T05:34:04Z,MERGED,True,1020,1260,25,https://github.com/MichalBlk,[pmap] Extract common machdep code to single file,21,['accepted'],https://github.com/cahirwpz/mimiker/pull/1243,https://github.com/MichalBlk,3,https://github.com/cahirwpz/mimiker/pull/1243#issuecomment-1132630266,"As @pj1031999 has noticed, most of the code composing the pmap module for each target architecture is common. Therefore, this PR introduces a generic implementation of the module. The generic pmap relies on an API implemented by each target architecture and described in include/sys/_pmap.h.","After a discussion with @cahirwpz, we decided to remove support for kernel pageable memory. From now on, kernel only uses wired mappings.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1244,2022-05-06T15:59:13Z,2022-05-06T16:09:57Z,2022-05-06T16:10:00Z,MERGED,True,8,7,1,https://github.com/cahirwpz,launch: don't attempt to handle storage if it's not defined,1,[],https://github.com/cahirwpz/mimiker/pull/1244,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/1244,,,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1245,2022-05-09T12:02:36Z,,2022-05-09T12:02:36Z,OPEN,False,253,0,1,https://github.com/mohrcore,GPIO interface,1,['WiP'],https://github.com/cahirwpz/mimiker/pull/1245,https://github.com/mohrcore,1,https://github.com/cahirwpz/mimiker/pull/1245,"Interface for GPIO drivers to use.
The motivation is to allow different drivers to share GPIO resources.","Interface for GPIO drivers to use.
The motivation is to allow different drivers to share GPIO resources.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1246,2022-05-12T10:53:36Z,2022-05-20T14:19:10Z,2022-05-20T14:19:10Z,MERGED,True,252,12,2,https://github.com/MichalBlk,[RISCV] Exception entry.,8,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1246,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1246,This PR provides exception entry points for the RISC-V target architecture.,This PR provides exception entry points for the RISC-V target architecture.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1246,2022-05-12T10:53:36Z,2022-05-20T14:19:10Z,2022-05-20T14:19:10Z,MERGED,True,252,12,2,https://github.com/MichalBlk,[RISCV] Exception entry.,8,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1246,https://github.com/MichalBlk,2,https://github.com/cahirwpz/mimiker/pull/1246#issuecomment-1131419330,This PR provides exception entry points for the RISC-V target architecture.,The unnecessary FPU conditional compilation is gone.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1246,2022-05-12T10:53:36Z,2022-05-20T14:19:10Z,2022-05-20T14:19:10Z,MERGED,True,252,12,2,https://github.com/MichalBlk,[RISCV] Exception entry.,8,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1246,https://github.com/MichalBlk,3,https://github.com/cahirwpz/mimiker/pull/1246#issuecomment-1132813371,This PR provides exception entry points for the RISC-V target architecture.,"I know that this is irrelevant, but I don't want to open a separate PR for this. I removed rootdev driver from the root devclass (that was a workaround to enable kernel compilation, however with the arrival of RISC-V drivers this is no longer needed and must be removed).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1247,2022-05-12T11:01:14Z,2022-05-20T14:10:14Z,2022-05-20T14:10:15Z,MERGED,True,292,4,5,https://github.com/MichalBlk,[RISCV] Context switch.,6,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1247,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1247,Context switch implementation.,Context switch implementation.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1247,2022-05-12T11:01:14Z,2022-05-20T14:10:14Z,2022-05-20T14:10:15Z,MERGED,True,292,4,5,https://github.com/MichalBlk,[RISCV] Context switch.,6,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1247,https://github.com/pj1031999,2,https://github.com/cahirwpz/mimiker/pull/1247#issuecomment-1126719379,Context switch implementation.,@cahirwpz @MichalBlk you should add risc-v build to CI to prevent future build regressions.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1247,2022-05-12T11:01:14Z,2022-05-20T14:10:14Z,2022-05-20T14:10:15Z,MERGED,True,292,4,5,https://github.com/MichalBlk,[RISCV] Context switch.,6,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1247,https://github.com/MichalBlk,3,https://github.com/cahirwpz/mimiker/pull/1247#issuecomment-1131421953,Context switch implementation.,The unnecessary FPU conditional compilation is gone.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1248,2022-05-12T14:09:32Z,2022-05-20T14:17:01Z,2022-05-20T14:17:01Z,MERGED,True,201,16,1,https://github.com/MichalBlk,[RISCV] Data copying.,11,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1248,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1248,"Copyin copyout implementation.
This PR contains changes introduced in #1252.","Copyin copyout implementation.
This PR contains changes introduced in #1252.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1248,2022-05-12T14:09:32Z,2022-05-20T14:17:01Z,2022-05-20T14:17:01Z,MERGED,True,201,16,1,https://github.com/MichalBlk,[RISCV] Data copying.,11,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1248,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/1248#issuecomment-1127849342,"Copyin copyout implementation.
This PR contains changes introduced in #1252.",Please rename SUM to TRAP_USER_ACCESS.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1248,2022-05-12T14:09:32Z,2022-05-20T14:17:01Z,2022-05-20T14:17:01Z,MERGED,True,201,16,1,https://github.com/MichalBlk,[RISCV] Data copying.,11,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1248,https://github.com/MichalBlk,3,https://github.com/cahirwpz/mimiker/pull/1248#issuecomment-1131453793,"Copyin copyout implementation.
This PR contains changes introduced in #1252.",#1252 contains requested changes.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1249,2022-05-13T08:41:55Z,2022-05-20T14:23:57Z,2022-05-20T14:23:57Z,CLOSED,False,3,3,2,https://github.com/MichalBlk,[RISCV] Change ISA to IMA.,2,"['review', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1249,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1249,"FTTB, the only supported hardware platform for the RISC-V 32 target architecture is LiteX VexRiscv. Our configuration of the VexRiscv core doesn't support any floating-point extension which makes it impossible to compile the system using the current toolchain as we rely on libgcc which expects hard floats.
Besides, more recent releases of the gnu tools distinguish zicsr and zifence extensions from the i extension.","FTTB, the only supported hardware platform for the RISC-V 32 target architecture is LiteX VexRiscv. Our configuration of the VexRiscv core doesn't support any floating-point extension which makes it impossible to compile the system using the current toolchain as we rely on libgcc which expects hard floats.
Besides, more recent releases of the gnu tools distinguish zicsr and zifence extensions from the i extension.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1249,2022-05-13T08:41:55Z,2022-05-20T14:23:57Z,2022-05-20T14:23:57Z,CLOSED,False,3,3,2,https://github.com/MichalBlk,[RISCV] Change ISA to IMA.,2,"['review', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1249,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/1249#issuecomment-1132958219,"FTTB, the only supported hardware platform for the RISC-V 32 target architecture is LiteX VexRiscv. Our configuration of the VexRiscv core doesn't support any floating-point extension which makes it impossible to compile the system using the current toolchain as we rely on libgcc which expects hard floats.
Besides, more recent releases of the gnu tools distinguish zicsr and zifence extensions from the i extension.",This change will be merged into #1257,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1250,2022-05-13T08:45:16Z,,2022-05-13T08:45:16Z,OPEN,False,19,0,2,https://github.com/MichalBlk,[RISCV] RV32 CI clang compilation.,1,"['review', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1250,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1250,Add RISC-V 32 clang compilation job to github action workflow.,Add RISC-V 32 clang compilation job to github action workflow.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1251,2022-05-13T09:54:17Z,2022-05-13T14:04:01Z,2022-05-13T14:04:01Z,MERGED,True,23,0,2,https://github.com/MichalBlk,[libkern] Implement kasprintf.,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1251,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1251,kasprintf is a prinf-like function commonly used by device drivers e.q. in Linux. We came to the conclusion that it would be beneficial to have this function implemented in Mimiker. We already have a usage example in #1237 (in plic_intr_name).,kasprintf is a prinf-like function commonly used by device drivers e.q. in Linux. We came to the conclusion that it would be beneficial to have this function implemented in Mimiker. We already have a usage example in #1237 (in plic_intr_name).,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1252,2022-05-13T18:13:23Z,2022-05-20T14:14:01Z,2022-05-20T14:14:09Z,MERGED,True,16,10,5,https://github.com/MichalBlk,[cfg] Introduce TRAP_USER_ACCESS configuration flag.,2,['accepted'],https://github.com/cahirwpz/mimiker/pull/1252,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1252,"Some architectures provide means to trap whenever kernel mode software attempts to access user virtual address space. Although the feature is useful, when enabled, it makes it impossible for GDB to produce the full backtrace for exceptions encountered in userspace. Thereby, its usage should be conditional and controlled by a configuration switch.
An example of such architecture is RISC-V which provides the SUM bit (enable Supervisor User Memory access).","Some architectures provide means to trap whenever kernel mode software attempts to access user virtual address space. Although the feature is useful, when enabled, it makes it impossible for GDB to produce the full backtrace for exceptions encountered in userspace. Thereby, its usage should be conditional and controlled by a configuration switch.
An example of such architecture is RISC-V which provides the SUM bit (enable Supervisor User Memory access).",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1252,2022-05-13T18:13:23Z,2022-05-20T14:14:01Z,2022-05-20T14:14:09Z,MERGED,True,16,10,5,https://github.com/MichalBlk,[cfg] Introduce TRAP_USER_ACCESS configuration flag.,2,['accepted'],https://github.com/cahirwpz/mimiker/pull/1252,https://github.com/MichalBlk,2,https://github.com/cahirwpz/mimiker/pull/1252#issuecomment-1131446121,"Some architectures provide means to trap whenever kernel mode software attempts to access user virtual address space. Although the feature is useful, when enabled, it makes it impossible for GDB to produce the full backtrace for exceptions encountered in userspace. Thereby, its usage should be conditional and controlled by a configuration switch.
An example of such architecture is RISC-V which provides the SUM bit (enable Supervisor User Memory access).",The RISC-V-specific SUM flag has been changed to a system-wide TRAP_USER_ACCESS flag.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1253,2022-05-16T08:17:43Z,,2022-05-19T10:32:01Z,OPEN,False,13,14,8,https://github.com/MichalBlk,[intr] Interrupt event should use an internal array to store the description string.,4,['review'],https://github.com/cahirwpz/mimiker/pull/1253,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1253,"Using a string pointer instead of an array inside intr_event_t forces the user to ensure that the description string passed during interrupt event creation is valid as long as the event itself is valid. The lifetime of the passed description string should be managed by the interrupt event struct.
Contains changes from #1255.","Using a string pointer instead of an array inside intr_event_t forces the user to ensure that the description string passed during interrupt event creation is valid as long as the event itself is valid. The lifetime of the passed description string should be managed by the interrupt event struct.
Contains changes from #1255.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1254,2022-05-16T08:28:38Z,2022-05-20T14:33:48Z,2022-05-20T14:33:48Z,MERGED,True,9,5,1,https://github.com/MichalBlk,[drv] Move device's state allocation and release to attach,2,['accepted'],https://github.com/cahirwpz/mimiker/pull/1254,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1254,"First, we need to start releasing the state allocated for a device if the attach is unsuccessful. Additionally, I moved allocation from probe to attach.","First, we need to start releasing the state allocated for a device if the attach is unsuccessful. Additionally, I moved allocation from probe to attach.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1255,2022-05-19T09:47:19Z,,2022-05-19T09:47:19Z,OPEN,False,3,6,5,https://github.com/MichalBlk,[lib] Remove strncpy from kernel and use strlcpy instead,1,['review'],https://github.com/cahirwpz/mimiker/pull/1255,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1255,"We sometimes use strncpy along with manual null termination. However, strlcpy does it for us and provides a consistent way of achieving this goal. Moreover, we sometimes forget to null terminate the string when using strncpy. This won't happen if we remove this function from kernel.","We sometimes use strncpy along with manual null termination. However, strlcpy does it for us and provides a consistent way of achieving this goal. Moreover, we sometimes forget to null terminate the string when using strncpy. This won't happen if we remove this function from kernel.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1256,2022-05-20T11:37:35Z,,2022-06-06T15:56:01Z,OPEN,False,123,28,3,https://github.com/MichalBlk,[RISC-V] Physical address map implementation,208,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1256,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1256,Architecture-dependent implementation of the pmap module.,Architecture-dependent implementation of the pmap module.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1257,2022-05-20T11:50:06Z,2022-05-27T14:52:00Z,2022-05-27T14:52:00Z,MERGED,True,8,8,4,https://github.com/MichalBlk,[toolchain] Upgrade,3,['accepted'],https://github.com/cahirwpz/mimiker/pull/1257,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1257,"Use the following versions of the GNU tools:

Binutils 2.38
GCC 12.1.0
GDB 12.1
Besides, this PR contains changes presented in #1249.","Use the following versions of the GNU tools:

Binutils 2.38
GCC 12.1.0
GDB 12.1
Besides, this PR contains changes presented in #1249.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1258,2022-05-20T12:06:01Z,,2022-05-20T12:06:01Z,OPEN,False,22,2,1,https://github.com/MichalBlk,[launch] Pass bootargs via dts,1,['WiP'],https://github.com/cahirwpz/mimiker/pull/1258,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1258,We should set the bootargs property of the dts based on cmd line passed to launch.,We should set the bootargs property of the dts based on cmd line passed to launch.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1259,2022-05-20T12:16:22Z,,2022-06-06T15:47:37Z,OPEN,False,141,4,3,https://github.com/MichalBlk,[dts] LiteX VexRiscv,5,"['blocked', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1259,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1259,Device tree source for our LiteX VexRiscv hardware platform.,Device tree source for our LiteX VexRiscv hardware platform.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1260,2022-05-23T12:23:53Z,2022-05-27T15:10:56Z,2022-05-27T15:10:57Z,MERGED,True,151,1,2,https://github.com/MichalBlk,[RISCV][drv] SiFive UART driver.,2,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1260,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1260,"The HiFive Unleashed board is equipped with a SiFive UART device, hence a driver is needed.","The HiFive Unleashed board is equipped with a SiFive UART device, hence a driver is needed.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1261,2022-05-23T12:33:03Z,2022-06-06T15:50:21Z,2022-06-06T15:50:21Z,MERGED,True,15,8,2,https://github.com/MichalBlk,[drv] Fix simplebus.,2,['accepted'],https://github.com/cahirwpz/mimiker/pull/1261,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1261,"It turns out that it's not that rare for a device to generate more 8 interrupts (e.g. plic and clint in HiFive Unleashed)
Fix tuples allocation for interrupt cells
Fix validation logic
Fix tuple copying","It turns out that it's not that rare for a device to generate more 8 interrupts (e.g. plic and clint in HiFive Unleashed)
Fix tuples allocation for interrupt cells
Fix validation logic
Fix tuple copying",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1262,2022-05-23T12:37:43Z,2022-05-23T15:47:56Z,2022-05-23T15:47:57Z,MERGED,True,3,3,1,https://github.com/MichalBlk,[RISCV][lib] Fix argc setting.,1,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1262,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1262,"argc is an int, not a long. Such confusion causes troubles in a 64-bit system.","argc is an int, not a long. Such confusion causes troubles in a 64-bit system.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1263,2022-05-23T13:01:11Z,2022-05-23T15:46:58Z,2022-05-23T15:46:58Z,MERGED,True,68,19,8,https://github.com/MichalBlk,[RISCV] 64-bit headers.,1,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1263,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1263,Introduce header files for 64-bit RISC-V.,Introduce header files for 64-bit RISC-V.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1264,2022-05-26T21:54:30Z,2022-06-03T14:17:00Z,2022-06-03T14:17:00Z,MERGED,True,51,98,8,https://github.com/MichalBlk,[KASAN] Extract common MD code.,2,['accepted'],https://github.com/cahirwpz/mimiker/pull/1264,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1264,"It turns out that architecture-dependent code consists of only two defines: start of the shadow memory and size of the sanitized address. The remaining values are computed using the aforementioned macros.
Besides, this PR cleans up the code. This includes removing the redundant kasan_va_to_shadow function that has exactly the same goal as addr_to_shad (previously kasan_md_addr_to_shad), i.e. compute the address of the shadow byte describing the provided sanitized memory area.","It turns out that architecture-dependent code consists of only two defines: start of the shadow memory and size of the sanitized address. The remaining values are computed using the aforementioned macros.
Besides, this PR cleans up the code. This includes removing the redundant kasan_va_to_shadow function that has exactly the same goal as addr_to_shad (previously kasan_md_addr_to_shad), i.e. compute the address of the shadow byte describing the provided sanitized memory area.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1265,2022-05-27T12:43:41Z,,2022-06-06T15:46:47Z,OPEN,False,68,28,7,https://github.com/MichalBlk,[RISCV] KASAN implementation.,7,"['review', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1265,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1265,"Implementation of machine-dependent KASAN components.
This PR contains changes introduced in #1269.","Implementation of machine-dependent KASAN components.
This PR contains changes introduced in #1269.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1265,2022-05-27T12:43:41Z,,2022-06-06T15:46:47Z,OPEN,False,68,28,7,https://github.com/MichalBlk,[RISCV] KASAN implementation.,7,"['review', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1265,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/1265#issuecomment-1147599246,"Implementation of machine-dependent KASAN components.
This PR contains changes introduced in #1269.",@jpszczolowski Is there any chance you'll have time this week to have a look at this PR?,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1266,2022-05-28T18:56:18Z,,2022-06-06T17:09:40Z,OPEN,False,13,11,4,https://github.com/MichalBlk,[RISCV] Update toolchain,4,"['WiP', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1266,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1266,"The current setup uses ""zifence"" instead of ""zifencei"".","The current setup uses ""zifence"" instead of ""zifencei"".",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1267,2022-06-03T09:24:28Z,,2022-06-06T15:45:32Z,OPEN,False,127,184,9,https://github.com/MichalBlk,[trap]  Extract common page fault handler,2,['review'],https://github.com/cahirwpz/mimiker/pull/1267,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1267,"Every supported architecture uses exactly the same page fault handler logic, thereby the code should be extracted to a generic machine-dependent module.","Every supported architecture uses exactly the same page fault handler logic, thereby the code should be extracted to a generic machine-dependent module.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1267,2022-06-03T09:24:28Z,,2022-06-06T15:45:32Z,OPEN,False,127,184,9,https://github.com/MichalBlk,[trap]  Extract common page fault handler,2,['review'],https://github.com/cahirwpz/mimiker/pull/1267,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/1267#issuecomment-1147597990,"Every supported architecture uses exactly the same page fault handler logic, thereby the code should be extracted to a generic machine-dependent module.",@pj1031999 We're waiting for you review ;-),True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1268,2022-06-03T11:02:30Z,,2022-06-04T18:50:41Z,OPEN,False,32,83,12,https://github.com/MichalBlk,[vm] Remove kernel vm_map since all kernel mappings are wired,2,['review'],https://github.com/cahirwpz/mimiker/pull/1268,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1268,"With the arrival of #1243, the kernel can only use wired memory mappings. This makes maintaining  kspace needles and the generic vm_map logic can be simplified to consider only user virtual memory maps.","With the arrival of #1243, the kernel can only use wired memory mappings. This makes maintaining  kspace needles and the generic vm_map logic can be simplified to consider only user virtual memory maps.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1269,2022-06-03T20:59:05Z,2022-06-06T15:37:51Z,2022-06-06T15:37:51Z,MERGED,True,14,20,3,https://github.com/MichalBlk,[RISCV] Make the size of the boot memory allocator area dynamic.,1,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1269,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1269,The assumption of a constant size boot memory allocator area should be dropped as with KASAN is becomes tedious to maintain four different configurations (32/64 + KASAN on / KASAN off) that must be adjusted whenever the area size has to change.,The assumption of a constant size boot memory allocator area should be dropped as with KASAN is becomes tedious to maintain four different configurations (32/64 + KASAN on / KASAN off) that must be adjusted whenever the area size has to change.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1270,2022-06-05T11:22:09Z,,2022-06-06T06:39:23Z,OPEN,False,128,109,6,https://github.com/cahirwpz,Make README contain more useful information about the project,2,['WiP'],https://github.com/cahirwpz/mimiker/pull/1270,https://github.com/cahirwpz,1,https://github.com/cahirwpz/mimiker/pull/1270,"Make the main page readme file contain high-level overview of the project, in order to encourage the reader to learn more about Mimiker project.","Make the main page readme file contain high-level overview of the project, in order to encourage the reader to learn more about Mimiker project.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1271,2022-06-05T18:16:23Z,2022-06-06T15:09:54Z,2022-06-06T15:09:54Z,MERGED,True,55,0,1,https://github.com/MichalBlk,[dev] Support for the SOC ranges fdt property,1,['accepted'],https://github.com/cahirwpz/mimiker/pull/1271,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1271,Some buses utilize the ranges property to express mappings between bus-relative addresses and parent-relative addresses. This change adds support for the ranges property within the soc device node.,Some buses utilize the ranges property to express mappings between bus-relative addresses and parent-relative addresses. This change adds support for the ranges property within the soc device node.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1272,2022-06-05T18:16:34Z,,2022-06-06T21:36:53Z,OPEN,False,441,186,9,https://github.com/MichalBlk,[aarch64][dev] Simplebus support,2,"['AArch64', 'review']",https://github.com/cahirwpz/mimiker/pull/1272,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1272,"The BCM2835 driver should employ the simplebus add child feature instead of using obsolete manual resource assignment.
This PR contains changes introduced in #1261 and #1271.","The BCM2835 driver should employ the simplebus add child feature instead of using obsolete manual resource assignment.
This PR contains changes introduced in #1261 and #1271.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1273,2022-06-05T18:41:04Z,2022-06-06T15:39:25Z,2022-06-06T15:39:31Z,MERGED,True,4,1,1,https://github.com/MichalBlk,[RISCV][dev] Fix LiteX VexRiscv rootdev device node assignemnt,1,"['accepted', 'RISC-V']",https://github.com/cahirwpz/mimiker/pull/1273,https://github.com/MichalBlk,1,https://github.com/cahirwpz/mimiker/pull/1273,The current convention assumed by simplebus is that the device node of the rootdev device points at the local interrupt controller.,The current convention assumed by simplebus is that the device node of the rootdev device points at the local interrupt controller.,True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1274,2022-06-06T11:59:09Z,2022-06-06T15:10:36Z,2022-06-06T15:10:36Z,CLOSED,False,28,8,3,https://github.com/mohrcore,Use simplebus to attach PL011 driver,3,[],https://github.com/cahirwpz/mimiker/pull/1274,https://github.com/mohrcore,1,https://github.com/cahirwpz/mimiker/pull/1274,"Use simplebus to attach PL011 UART driver.

Use simplebus_add_child to create device and add memory resource.
Due to complexity of IRQs, those are still added manually
Due to BCM2835_PERIPHERALS_BUS_TO_PHYS weirdness the address in FDT is slightly different than the one in specs.
pl011_probe uses ""compatible"" field to check if a driver should be attached.","Use simplebus to attach PL011 UART driver.

Use simplebus_add_child to create device and add memory resource.
Due to complexity of IRQs, those are still added manually
Due to BCM2835_PERIPHERALS_BUS_TO_PHYS weirdness the address in FDT is slightly different than the one in specs.
pl011_probe uses ""compatible"" field to check if a driver should be attached.",True,{}
cahirwpz/mimiker,https://github.com/cahirwpz/mimiker,1274,2022-06-06T11:59:09Z,2022-06-06T15:10:36Z,2022-06-06T15:10:36Z,CLOSED,False,28,8,3,https://github.com/mohrcore,Use simplebus to attach PL011 driver,3,[],https://github.com/cahirwpz/mimiker/pull/1274,https://github.com/cahirwpz,2,https://github.com/cahirwpz/mimiker/pull/1274#issuecomment-1147557239,"Use simplebus to attach PL011 UART driver.

Use simplebus_add_child to create device and add memory resource.
Due to complexity of IRQs, those are still added manually
Due to BCM2835_PERIPHERALS_BUS_TO_PHYS weirdness the address in FDT is slightly different than the one in specs.
pl011_probe uses ""compatible"" field to check if a driver should be attached.",Proposed change is already a part of #1272,True,{}
