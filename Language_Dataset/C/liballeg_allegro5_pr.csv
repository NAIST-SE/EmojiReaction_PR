liballeg/allegro5,https://github.com/liballeg/allegro5,577,2016-02-29T01:24:44Z,2016-03-04T06:39:07Z,2016-03-04T06:39:08Z,MERGED,True,86,0,3,https://github.com/SiegeLord,DPI awareness on Windows,4,[],https://github.com/liballeg/allegro5/pull/577,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/577,"This marks Allegro apps DPI aware by default (implementing a workabout for issue #574) and adds handling for the DPI change events.
Fixes Issue #576","This marks Allegro apps DPI aware by default (implementing a workabout for issue #574) and adds handling for the DPI change events.
Fixes Issue #576",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,586,2016-03-11T05:21:46Z,2016-03-11T05:45:08Z,2016-03-11T05:45:08Z,MERGED,True,3,2,1,https://github.com/SiegeLord,Add WINVER definition for cpu detection,2,[],https://github.com/liballeg/allegro5/pull/586,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/586,,,True,"{'THUMBS_DOWN': ['https://github.com/SiegeLord'], 'HOORAY': ['https://github.com/elias-pschernig']}"
liballeg/allegro5,https://github.com/liballeg/allegro5,589,2016-03-13T04:22:19Z,2016-03-18T05:32:15Z,2016-03-18T05:32:33Z,CLOSED,False,0,0,0,https://github.com/SiegeLord,"Make toggling ALLEGRO_FRAMELESS work on OSX, with a few caveats.",0,[],https://github.com/liballeg/allegro5/pull/589,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/589,"The reason it didn't work before was because toggling NSBorderlessWindowMask
does nothing, as it is defined to be 0 (i.e. nothing that uses it as a flag
works, so I fixed code that did). Using the correct flag however has some
issues, as described in the code. Still, this is better than not working at
all.
Fixes #582.","The reason it didn't work before was because toggling NSBorderlessWindowMask
does nothing, as it is defined to be 0 (i.e. nothing that uses it as a flag
works, so I fixed code that did). Using the correct flag however has some
issues, as described in the code. Still, this is better than not working at
all.
Fixes #582.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,589,2016-03-13T04:22:19Z,2016-03-18T05:32:15Z,2016-03-18T05:32:33Z,CLOSED,False,0,0,0,https://github.com/SiegeLord,"Make toggling ALLEGRO_FRAMELESS work on OSX, with a few caveats.",0,[],https://github.com/liballeg/allegro5/pull/589,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/589#issuecomment-195868215,"The reason it didn't work before was because toggling NSBorderlessWindowMask
does nothing, as it is defined to be 0 (i.e. nothing that uses it as a flag
works, so I fixed code that did). Using the correct flag however has some
issues, as described in the code. Still, this is better than not working at
all.
Fixes #582.","Hey, @peterhull90, could you check this over a bit? In particular, is the setStyleSelector trick I did the best that can be done?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,589,2016-03-13T04:22:19Z,2016-03-18T05:32:15Z,2016-03-18T05:32:33Z,CLOSED,False,0,0,0,https://github.com/SiegeLord,"Make toggling ALLEGRO_FRAMELESS work on OSX, with a few caveats.",0,[],https://github.com/liballeg/allegro5/pull/589,None,3,https://github.com/liballeg/allegro5/pull/589#issuecomment-195925731,"The reason it didn't work before was because toggling NSBorderlessWindowMask
does nothing, as it is defined to be 0 (i.e. nothing that uses it as a flag
works, so I fixed code that did). Using the correct flag however has some
issues, as described in the code. Still, this is better than not working at
all.
Fixes #582.","As far as I know there is no better way than what you did for setStyleSelector - it's a pity Obj-C can't do some sort of autoboxing to make these trivial methods unnecessary.
I also noted:

In line 2201 you don't need to release because +numberWithInt creates an autorelease object - however, I'm not sure if we have a working autorelease pool on that thread. Might be better to stick to manual memory management (use alloc/initWithInt instead )
I know it's not in this patch but the case for ALLEGRO_RESIZABLE doesn't call out to the main thread like the other ones do. As you know some flags seem to need it and some just work anyway, and that list can change between OS releases. Might be as well to make it consistent.
Also not in this patch but the code never (AFAICS) actually updates the platform-independent display->flags. This means in ex_noframe, the code intended to toggle the frameless state doesn't work properly - the frame appears but can't be hidden again.

Hope that helps,
Pete",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,589,2016-03-13T04:22:19Z,2016-03-18T05:32:15Z,2016-03-18T05:32:33Z,CLOSED,False,0,0,0,https://github.com/SiegeLord,"Make toggling ALLEGRO_FRAMELESS work on OSX, with a few caveats.",0,[],https://github.com/liballeg/allegro5/pull/589,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/589#issuecomment-198215427,"The reason it didn't work before was because toggling NSBorderlessWindowMask
does nothing, as it is defined to be 0 (i.e. nothing that uses it as a flag
works, so I fixed code that did). Using the correct flag however has some
issues, as described in the code. Still, this is better than not working at
all.
Fixes #582.","Thanks Peter! That was very helpful, I appreciate it.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,590,2016-03-14T03:41:11Z,2016-04-17T22:33:53Z,2016-04-17T22:33:53Z,CLOSED,False,1046,99,20,https://github.com/elias-pschernig,add al_get/set_depth/samples functions,7,[],https://github.com/liballeg/allegro5/pull/590,https://github.com/elias-pschernig,1,https://github.com/liballeg/allegro5/pull/590,"This allows using a depth buffer as well as multi-sampling when drawing
into bitmaps with al_set_target_bitmap.","This allows using a depth buffer as well as multi-sampling when drawing
into bitmaps with al_set_target_bitmap.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,590,2016-03-14T03:41:11Z,2016-04-17T22:33:53Z,2016-04-17T22:33:53Z,CLOSED,False,1046,99,20,https://github.com/elias-pschernig,add al_get/set_depth/samples functions,7,[],https://github.com/liballeg/allegro5/pull/590,https://github.com/elias-pschernig,2,https://github.com/liballeg/allegro5/pull/590#issuecomment-196125641,"This allows using a depth buffer as well as multi-sampling when drawing
into bitmaps with al_set_target_bitmap.","This should do nothing as long as you don't use the 4 functions it adds. Those however definitely need testing. They will work with OpenGL 1.5 as long as the extensions used are available.
And it should be possible to make it work with OpenGL ES 2.0 (probably even 1.1, but I doubt anything still uses that). Maybe even with DirectX. I might attempt to add OpenGL ES support at some point as my game actually has use for drawing to an intermediate bitmap and in that case will need a depth buffer for it.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,590,2016-03-14T03:41:11Z,2016-04-17T22:33:53Z,2016-04-17T22:33:53Z,CLOSED,False,1046,99,20,https://github.com/elias-pschernig,add al_get/set_depth/samples functions,7,[],https://github.com/liballeg/allegro5/pull/590,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/590#issuecomment-196600897,"This allows using a depth buffer as well as multi-sampling when drawing
into bitmaps with al_set_target_bitmap.","This is pretty sweet, although the al_set_depth/samples API make no sense:

It takes effect at non-deterministic times (apparently only when you set up the FBO)
Calling al_get_depth/samples returns basically bogus values if you call al_set_depth/samples after the settings take effect

I think those really should be in TLS (and be something like al_set_new_bitmap_depth/samples).
FBO finalization doesn't seem like it will work for bitmap locking: it seems to take effect when you switch target bitmaps, but that won't work if you lock the target bitmap after drawing to it. It seems that at the very least, you should finalize the FBO then as well.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,590,2016-03-14T03:41:11Z,2016-04-17T22:33:53Z,2016-04-17T22:33:53Z,CLOSED,False,1046,99,20,https://github.com/elias-pschernig,add al_get/set_depth/samples functions,7,[],https://github.com/liballeg/allegro5/pull/590,https://github.com/elias-pschernig,4,https://github.com/liballeg/allegro5/pull/590#issuecomment-196618120,"This allows using a depth buffer as well as multi-sampling when drawing
into bitmaps with al_set_target_bitmap.","I don't like to use TLS, it doesn't really make sense to create more than one or two bitmaps with these special properties, but if you forget the setting on TLS you might not immediately notice and accidentally create all your game sprites with a depth buffer attached. I was thinking about a function al_create_bitmap_ex(w, h, depth, samples, flags) - but I don't like having _ex _ex2 _ex3 functions, it just feels messy. Operating on a bitmap seemed like the best bet.
The get variants will return 0 or whatever was set by a previous set call - they should never return bogus values.
We probably can make it so that you can change the values at runtime, destroying the depth-buffer/multisample-buffer. In fact it probably breaks right now when the FBO gets assigned to a different bitmap, so this has to be fixed anyway.
We could also have a more transparent API with separate ALLEGRO_DEPTH_BUFFER and ALLEGRO_MULTISAMPLE_BUFFER objects which you have to create and destroy and attach to an ALLEGRO_BITMAP to be used when drawing into it:
bitmap = al_create_bitmap(100, 100)
depth_buffer = al_create_depth_buffer(100, 100)
multisample_buffer = al_create_multisample_buffer(100, 100)
al_attach_bitmap_depth_buffer(bitmap, depth_buffer)
al_attach_bitmap_multisample_buffer(bitmap, multisample_buffer)
This way it would be clear through the API itself that those are heavy objects. And we would leave it to the user to manage their lifetime.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,590,2016-03-14T03:41:11Z,2016-04-17T22:33:53Z,2016-04-17T22:33:53Z,CLOSED,False,1046,99,20,https://github.com/elias-pschernig,add al_get/set_depth/samples functions,7,[],https://github.com/liballeg/allegro5/pull/590,https://github.com/SiegeLord,5,https://github.com/liballeg/allegro5/pull/590#issuecomment-196629072,"This allows using a depth buffer as well as multi-sampling when drawing
into bitmaps with al_set_target_bitmap.","create all your game sprites with a depth buffer attached

It'll only get attached if you draw into them, no? Anyway, I think that's not particularly worse in this case than accidentally forgetting to revert al_set_new_bitmap_flags(ALLEGRO_MEMORY_BITMAP). It might be nice to have a al_create_bitmap_with_options which is somehow future-proof, but that might be overkill. I still think TLS would be the most consistent option.

The get variants will return 0 or whatever was set by a previous set call - they should never return bogus values.

What is set by the previous can get arbitrarily out of sync with what number of samples the bitmap actually has, since that's set in stone once you attach these things to it.

We could also have a more transparent API

That seems a bit... excessive.
Anyway, it's probably fine for now, as we'd need to look at what the implementation looks like for Direct3D.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,590,2016-03-14T03:41:11Z,2016-04-17T22:33:53Z,2016-04-17T22:33:53Z,CLOSED,False,1046,99,20,https://github.com/elias-pschernig,add al_get/set_depth/samples functions,7,[],https://github.com/liballeg/allegro5/pull/590,https://github.com/elias-pschernig,6,https://github.com/liballeg/allegro5/pull/590#issuecomment-198164998,"This allows using a depth buffer as well as multi-sampling when drawing
into bitmaps with al_set_target_bitmap.","Ok, I fixed a few issues and made it use TLS instead of bitmap setters. I couldn't figure out how to make the multisample buffers get realized on locking.
Incidentally, OpenGL ES has a different multisample extension which can directly draw to a texture so locking works there. Basically we have:
ARB_texture_multisample - locking works but requires OpenGL 3+, not used in my patch
GL_EXT_multisampled_render_to_texture - OES version of the same, used with OES in the patch
GL_EXT_framebuffer_multisample - no locking, but works all the way down to OpenGL 1.5, used in the patch
I updated the documentation to mention that you can't lock a multi-sample target while it is still the target. I think that is a very minor restriction. I don't mind if someone wants to make the changes necessary to allow locking the current target of course - it doesn't look that difficult, my brain just can't understand all the different paths for desktop GL and OES and iOS and raspberry... :P",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,590,2016-03-14T03:41:11Z,2016-04-17T22:33:53Z,2016-04-17T22:33:53Z,CLOSED,False,1046,99,20,https://github.com/elias-pschernig,add al_get/set_depth/samples functions,7,[],https://github.com/liballeg/allegro5/pull/590,https://github.com/SiegeLord,7,https://github.com/liballeg/allegro5/pull/590#issuecomment-198760077,"This allows using a depth buffer as well as multi-sampling when drawing
into bitmaps with al_set_target_bitmap.",This is awesome!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,590,2016-03-14T03:41:11Z,2016-04-17T22:33:53Z,2016-04-17T22:33:53Z,CLOSED,False,1046,99,20,https://github.com/elias-pschernig,add al_get/set_depth/samples functions,7,[],https://github.com/liballeg/allegro5/pull/590,https://github.com/MarkOates,8,https://github.com/liballeg/allegro5/pull/590#issuecomment-198867438,"This allows using a depth buffer as well as multi-sampling when drawing
into bitmaps with al_set_target_bitmap.",I'm really excited about this PR!  I pulled a fresh copy just to try this out.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,590,2016-03-14T03:41:11Z,2016-04-17T22:33:53Z,2016-04-17T22:33:53Z,CLOSED,False,1046,99,20,https://github.com/elias-pschernig,add al_get/set_depth/samples functions,7,[],https://github.com/liballeg/allegro5/pull/590,https://github.com/SiegeLord,9,https://github.com/liballeg/allegro5/pull/590#issuecomment-211124779,"This allows using a depth buffer as well as multi-sampling when drawing
into bitmaps with al_set_target_bitmap.",Merged as b8672bd (I squashed everything). Woohoo!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,592,2016-03-18T04:49:51Z,2016-03-19T04:42:27Z,2016-03-19T04:42:27Z,MERGED,True,7,0,1,https://github.com/SiegeLord,Workaround the fullscreen window issue in OSX,1,[],https://github.com/liballeg/allegro5/pull/592,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/592,Fixes #583.,Fixes #583.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,594,2016-03-19T05:49:45Z,2016-03-19T13:58:06Z,2016-03-19T14:02:18Z,MERGED,True,29,5,1,https://github.com/wirecat,Added documentation to ex_bitmap example.,1,[],https://github.com/liballeg/allegro5/pull/594,https://github.com/wirecat,1,https://github.com/liballeg/allegro5/pull/594,While going through this example I thought it would be nice to have some documentation to help the next newbie with understanding the intent of the code.,While going through this example I thought it would be nice to have some documentation to help the next newbie with understanding the intent of the code.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,594,2016-03-19T05:49:45Z,2016-03-19T13:58:06Z,2016-03-19T14:02:18Z,MERGED,True,29,5,1,https://github.com/wirecat,Added documentation to ex_bitmap example.,1,[],https://github.com/liballeg/allegro5/pull/594,https://github.com/elias-pschernig,2,https://github.com/liballeg/allegro5/pull/594#issuecomment-198708614,While going through this example I thought it would be nice to have some documentation to help the next newbie with understanding the intent of the code.,"Thanks! One example down, 99 to go :) Eventually we should find a way to add the examples to the documentation like with Allegro 4.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,597,2016-03-20T07:14:19Z,2016-03-20T17:10:41Z,2016-03-20T17:10:57Z,MERGED,True,11,1,1,https://github.com/MarkOates,Add backspace input to ex_logo,1,[],https://github.com/liballeg/allegro5/pull/597,https://github.com/MarkOates,1,https://github.com/liballeg/allegro5/pull/597,"Problem
When editing the text fields in examples/ex_logo program, you can't use the backspace to delete characters.

Solution
Handle backspace when in the text fields.","Problem
When editing the text fields in examples/ex_logo program, you can't use the backspace to delete characters.

Solution
Handle backspace when in the text fields.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,597,2016-03-20T07:14:19Z,2016-03-20T17:10:41Z,2016-03-20T17:10:57Z,MERGED,True,11,1,1,https://github.com/MarkOates,Add backspace input to ex_logo,1,[],https://github.com/liballeg/allegro5/pull/597,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/597#issuecomment-198966622,"Problem
When editing the text fields in examples/ex_logo program, you can't use the backspace to delete characters.

Solution
Handle backspace when in the text fields.",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,598,2016-03-20T07:44:20Z,2016-03-20T17:11:24Z,2016-03-20T17:11:24Z,CLOSED,False,1,1,2,https://github.com/MarkOates,Rename ex_warp_mouse to ex_mouse_warp,1,[],https://github.com/liballeg/allegro5/pull/598,https://github.com/MarkOates,1,https://github.com/liballeg/allegro5/pull/598,"Problem
All of the mouse example programs follow the naming convention ex_mouse_* except for ex_warp_mouse.
Solution
For consistency, rename the file to ex_mouse_warp.c and move it up with the rest of the mouse examples in CMakeLists.txt.  Also, I think the new name is logically similar enough to ex_mouse_focus (as opposed to ex_focus_mouse) to be justifiable.","Problem
All of the mouse example programs follow the naming convention ex_mouse_* except for ex_warp_mouse.
Solution
For consistency, rename the file to ex_mouse_warp.c and move it up with the rest of the mouse examples in CMakeLists.txt.  Also, I think the new name is logically similar enough to ex_mouse_focus (as opposed to ex_focus_mouse) to be justifiable.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,598,2016-03-20T07:44:20Z,2016-03-20T17:11:24Z,2016-03-20T17:11:24Z,CLOSED,False,1,1,2,https://github.com/MarkOates,Rename ex_warp_mouse to ex_mouse_warp,1,[],https://github.com/liballeg/allegro5/pull/598,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/598#issuecomment-198966652,"Problem
All of the mouse example programs follow the naming convention ex_mouse_* except for ex_warp_mouse.
Solution
For consistency, rename the file to ex_mouse_warp.c and move it up with the rest of the mouse examples in CMakeLists.txt.  Also, I think the new name is logically similar enough to ex_mouse_focus (as opposed to ex_focus_mouse) to be justifiable.",Merged as 6eff764. Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,599,2016-03-20T19:48:24Z,2016-03-25T06:01:47Z,2016-03-25T06:16:27Z,CLOSED,False,20,12,2,https://github.com/allefant,README.md!,4,[],https://github.com/liballeg/allegro5/pull/599,https://github.com/allefant,1,https://github.com/liballeg/allegro5/pull/599,,,True,"{'THUMBS_UP': ['https://github.com/fatcerberus'], 'HOORAY': ['https://github.com/SiegeLord', 'https://github.com/MarkOates']}"
liballeg/allegro5,https://github.com/liballeg/allegro5,599,2016-03-20T19:48:24Z,2016-03-25T06:01:47Z,2016-03-25T06:16:27Z,CLOSED,False,20,12,2,https://github.com/allefant,README.md!,4,[],https://github.com/liballeg/allegro5/pull/599,https://github.com/allefant,2,https://github.com/liballeg/allegro5/pull/599#issuecomment-199017074,,Found it!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,599,2016-03-20T19:48:24Z,2016-03-25T06:01:47Z,2016-03-25T06:16:27Z,CLOSED,False,20,12,2,https://github.com/allefant,README.md!,4,[],https://github.com/liballeg/allegro5/pull/599,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/599#issuecomment-201156265,,Merged as bb6d0aa.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,599,2016-03-20T19:48:24Z,2016-03-25T06:01:47Z,2016-03-25T06:16:27Z,CLOSED,False,20,12,2,https://github.com/allefant,README.md!,4,[],https://github.com/liballeg/allegro5/pull/599,https://github.com/MarkOates,4,https://github.com/liballeg/allegro5/pull/599#issuecomment-201159109,,Niiiiiiice 😎,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,600,2016-03-21T02:07:20Z,2016-05-07T23:16:48Z,2016-05-07T23:16:48Z,CLOSED,False,24,2,1,https://github.com/wirecat,Added more inline documentation to ex_bitmap_flip,2,[],https://github.com/liballeg/allegro5/pull/600,https://github.com/wirecat,1,https://github.com/liballeg/allegro5/pull/600,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,600,2016-03-21T02:07:20Z,2016-05-07T23:16:48Z,2016-05-07T23:16:48Z,CLOSED,False,24,2,1,https://github.com/wirecat,Added more inline documentation to ex_bitmap_flip,2,[],https://github.com/liballeg/allegro5/pull/600,https://github.com/goob256,2,https://github.com/liballeg/allegro5/pull/600#issuecomment-199085971,,"My 2c is rather than repeat the same documentation for each example, one of the demos should be documented.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,600,2016-03-21T02:07:20Z,2016-05-07T23:16:48Z,2016-05-07T23:16:48Z,CLOSED,False,24,2,1,https://github.com/wirecat,Added more inline documentation to ex_bitmap_flip,2,[],https://github.com/liballeg/allegro5/pull/600,https://github.com/goob256,3,https://github.com/liballeg/allegro5/pull/600#issuecomment-199086537,,Not that this is bad... I appreciate the effort.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,600,2016-03-21T02:07:20Z,2016-05-07T23:16:48Z,2016-05-07T23:16:48Z,CLOSED,False,24,2,1,https://github.com/wirecat,Added more inline documentation to ex_bitmap_flip,2,[],https://github.com/liballeg/allegro5/pull/600,https://github.com/MarkOates,4,https://github.com/liballeg/allegro5/pull/600#issuecomment-199107576,,"Even on single line comments we should always use C-style comments like so:
/* single line comment */
Historically, Allegro has used these C-style comments throughout and we should continue that to be consistent with the rest of the code base.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,600,2016-03-21T02:07:20Z,2016-05-07T23:16:48Z,2016-05-07T23:16:48Z,CLOSED,False,24,2,1,https://github.com/wirecat,Added more inline documentation to ex_bitmap_flip,2,[],https://github.com/liballeg/allegro5/pull/600,https://github.com/wirecat,5,https://github.com/liballeg/allegro5/pull/600#issuecomment-199113734,,@trentg I think that is a good idea. Would be much easier to keep up to date with any library changes.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,600,2016-03-21T02:07:20Z,2016-05-07T23:16:48Z,2016-05-07T23:16:48Z,CLOSED,False,24,2,1,https://github.com/wirecat,Added more inline documentation to ex_bitmap_flip,2,[],https://github.com/liballeg/allegro5/pull/600,https://github.com/wirecat,6,https://github.com/liballeg/allegro5/pull/600#issuecomment-199114046,,@MarkOates Thanks! I'll keep a closer eye on that from now on.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,600,2016-03-21T02:07:20Z,2016-05-07T23:16:48Z,2016-05-07T23:16:48Z,CLOSED,False,24,2,1,https://github.com/wirecat,Added more inline documentation to ex_bitmap_flip,2,[],https://github.com/liballeg/allegro5/pull/600,https://github.com/goob256,7,https://github.com/liballeg/allegro5/pull/600#issuecomment-199117229,,@wirecat that's my motivation. The examples get updated sometimes and I can see a lot of comments getting out of sync with the code if a lot of care isn't taken.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,600,2016-03-21T02:07:20Z,2016-05-07T23:16:48Z,2016-05-07T23:16:48Z,CLOSED,False,24,2,1,https://github.com/wirecat,Added more inline documentation to ex_bitmap_flip,2,[],https://github.com/liballeg/allegro5/pull/600,https://github.com/allefant,8,https://github.com/liballeg/allegro5/pull/600#issuecomment-199524029,,"Maybe we should group our current examples and move them into sub-folders like ""tutorials"", ""feature-demos"", ""feature-tests""... then only comment the tutorial ones. Another idea I keep thinking about would be an example runner app - something with a simple guy which allows running all the other examples. That could be especially useful on platforms like iOS and Android where it's cumbersome installing and trying all the examples. But I'm getting off topic here...",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,600,2016-03-21T02:07:20Z,2016-05-07T23:16:48Z,2016-05-07T23:16:48Z,CLOSED,False,24,2,1,https://github.com/wirecat,Added more inline documentation to ex_bitmap_flip,2,[],https://github.com/liballeg/allegro5/pull/600,https://github.com/wirecat,9,https://github.com/liballeg/allegro5/pull/600#issuecomment-199574133,,@allefant I like the idea of having a tutorials section. Then it would be clear what their purpose is and it would make sense to have the documentation target a newbie.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,600,2016-03-21T02:07:20Z,2016-05-07T23:16:48Z,2016-05-07T23:16:48Z,CLOSED,False,24,2,1,https://github.com/wirecat,Added more inline documentation to ex_bitmap_flip,2,[],https://github.com/liballeg/allegro5/pull/600,https://github.com/SiegeLord,10,https://github.com/liballeg/allegro5/pull/600#issuecomment-217675881,,"Merged as 978e71f.
I decided that this change was a very small net improvement. I'd rather not document every example, as per the points made above, but documenting a few of the common ones seems harmless.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,601,2016-03-21T05:09:05Z,2016-05-07T23:22:36Z,2016-05-07T23:29:38Z,CLOSED,False,5,2,2,https://github.com/MarkOates,Add .gitignore and ignore build/ dir,1,[],https://github.com/liballeg/allegro5/pull/601,https://github.com/MarkOates,1,https://github.com/liballeg/allegro5/pull/601,"Welcome our Git overlords with a nice .gitignore file.
In the file, we'll ignore the build/ directory and all its contents that are created during the recommended build process. (Incidentally, the uppercase Build/ is written in README_make.txt though I can't seem to find it anywhere else, docs, wiki or otherwise. So I fixed that here too.)","Welcome our Git overlords with a nice .gitignore file.
In the file, we'll ignore the build/ directory and all its contents that are created during the recommended build process. (Incidentally, the uppercase Build/ is written in README_make.txt though I can't seem to find it anywhere else, docs, wiki or otherwise. So I fixed that here too.)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,601,2016-03-21T05:09:05Z,2016-05-07T23:22:36Z,2016-05-07T23:29:38Z,CLOSED,False,5,2,2,https://github.com/MarkOates,Add .gitignore and ignore build/ dir,1,[],https://github.com/liballeg/allegro5/pull/601,https://github.com/allefant,2,https://github.com/liballeg/allegro5/pull/601#issuecomment-199522178,"Welcome our Git overlords with a nice .gitignore file.
In the file, we'll ignore the build/ directory and all its contents that are created during the recommended build process. (Incidentally, the uppercase Build/ is written in README_make.txt though I can't seem to find it anywhere else, docs, wiki or otherwise. So I fixed that here too.)","I think we should update README_make.txt to tell users to not create the build folder inside the git folder. And we should not add build to .gitignore - if you personally like to have a folder called ""build"" in your git directory, just add it to your local gitignore.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,601,2016-03-21T05:09:05Z,2016-05-07T23:22:36Z,2016-05-07T23:29:38Z,CLOSED,False,5,2,2,https://github.com/MarkOates,Add .gitignore and ignore build/ dir,1,[],https://github.com/liballeg/allegro5/pull/601,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/601#issuecomment-199572426,"Welcome our Git overlords with a nice .gitignore file.
In the file, we'll ignore the build/ directory and all its contents that are created during the recommended build process. (Incidentally, the uppercase Build/ is written in README_make.txt though I can't seem to find it anywhere else, docs, wiki or otherwise. So I fixed that here too.)","It's easier to change the one tutorial that tells you to build outside the git directory, than to change the rest to say the opposite :P.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,601,2016-03-21T05:09:05Z,2016-05-07T23:22:36Z,2016-05-07T23:29:38Z,CLOSED,False,5,2,2,https://github.com/MarkOates,Add .gitignore and ignore build/ dir,1,[],https://github.com/liballeg/allegro5/pull/601,https://github.com/allefant,4,https://github.com/liballeg/allegro5/pull/601#issuecomment-199574230,"Welcome our Git overlords with a nice .gitignore file.
In the file, we'll ignore the build/ directory and all its contents that are created during the recommended build process. (Incidentally, the uppercase Build/ is written in README_make.txt though I can't seem to find it anywhere else, docs, wiki or otherwise. So I fixed that here too.)","Well, I just think it defeats the purpose of using cmake if we then silently start ""hardcoding"" a build folder again. Not hardcoding (or even preferring) ""./build"" is the one good feature cmake has :P",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,601,2016-03-21T05:09:05Z,2016-05-07T23:22:36Z,2016-05-07T23:29:38Z,CLOSED,False,5,2,2,https://github.com/MarkOates,Add .gitignore and ignore build/ dir,1,[],https://github.com/liballeg/allegro5/pull/601,https://github.com/MarkOates,5,https://github.com/liballeg/allegro5/pull/601#issuecomment-199609759,"Welcome our Git overlords with a nice .gitignore file.
In the file, we'll ignore the build/ directory and all its contents that are created during the recommended build process. (Incidentally, the uppercase Build/ is written in README_make.txt though I can't seem to find it anywhere else, docs, wiki or otherwise. So I fixed that here too.)","The build/ directory is pretty universal in Allegro.
One thing that's good about Allegro is that it provides a lot of flexibility, but nowhere is that mentioned because I think it isn't really that important unless you're doing something unique.
The great thing about adding build/ to .gitignore is that any developer can clone Allegro, follow the build instructions, and have a clean repo ready for contributing out-of-the-box. And, I think that's really what's important about this PR. 😊
Also, isn't CMAKE also good at configuring all the different platforms as well?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,601,2016-03-21T05:09:05Z,2016-05-07T23:22:36Z,2016-05-07T23:29:38Z,CLOSED,False,5,2,2,https://github.com/MarkOates,Add .gitignore and ignore build/ dir,1,[],https://github.com/liballeg/allegro5/pull/601,https://github.com/MarkOates,6,https://github.com/liballeg/allegro5/pull/601#issuecomment-199612639,"Welcome our Git overlords with a nice .gitignore file.
In the file, we'll ignore the build/ directory and all its contents that are created during the recommended build process. (Incidentally, the uppercase Build/ is written in README_make.txt though I can't seem to find it anywhere else, docs, wiki or otherwise. So I fixed that here too.)","Also, it’s not just the readme.  We have a lot of tutorials out there that instruct to mkdir build.
For dramatic effect, I have assembled a few examples:
Readme
https://github.com/liballeg/allegro5/blob/5.1/README_make.txt
https://github.com/liballeg/allegro5/blob/5.1/README_raspberrypi.txt
https://github.com/liballeg/allegro5/blob/5.1/.travis.yml
Wiki
https://wiki.allegro.cc/index.php?title=Install_Allegro5_From_GIT/OSX <- the one I used
https://wiki.allegro.cc/index.php?title=Install_Allegro5_From_SVN/Windows
https://wiki.allegro.cc/index.php?title=Install_Allegro5_From_SVN/Linux/Debian#Getting_Allegro
https://wiki.allegro.cc/index.php?title=OSX,_Xcode_4,_Framework
https://wiki.allegro.cc/index.php?title=OSX,_Xcode_5,_dylib
https://wiki.allegro.cc/index.php?title=Install_Allegro5_From_Git#Building_Allegro_from_the_Terminal
https://wiki.allegro.cc/index.php?title=Install_Allegro5_From_Git/Linux/Centos
https://wiki.allegro.cc/index.php?title=Ubuntu_and_Allegro_5
A.cc
https://www.allegro.cc/forums/thread/614997/1009351#target
Other stuff
http://curtis.schlak.com/2014/05/22/creating-and-using-allegro-5-static-libraries-with-xcode-5.html",True,{'LAUGH': ['https://github.com/SiegeLord']}
liballeg/allegro5,https://github.com/liballeg/allegro5,601,2016-03-21T05:09:05Z,2016-05-07T23:22:36Z,2016-05-07T23:29:38Z,CLOSED,False,5,2,2,https://github.com/MarkOates,Add .gitignore and ignore build/ dir,1,[],https://github.com/liballeg/allegro5/pull/601,https://github.com/rcorre,7,https://github.com/liballeg/allegro5/pull/601#issuecomment-203710980,"Welcome our Git overlords with a nice .gitignore file.
In the file, we'll ignore the build/ directory and all its contents that are created during the recommended build process. (Incidentally, the uppercase Build/ is written in README_make.txt though I can't seem to find it anywhere else, docs, wiki or otherwise. So I fixed that here too.)","On one hand, it seems weird to ignore a dir that isn't necessarily consistent across environments, and we could just add a note to echo build/ >> .git/info/exclude.
On the other hand, its probably pretty common to have a build dir you want to ignore (I do) and it isn't without precedent in other projects.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,601,2016-03-21T05:09:05Z,2016-05-07T23:22:36Z,2016-05-07T23:29:38Z,CLOSED,False,5,2,2,https://github.com/MarkOates,Add .gitignore and ignore build/ dir,1,[],https://github.com/liballeg/allegro5/pull/601,https://github.com/SiegeLord,8,https://github.com/liballeg/allegro5/pull/601#issuecomment-217676255,"Welcome our Git overlords with a nice .gitignore file.
In the file, we'll ignore the build/ directory and all its contents that are created during the recommended build process. (Incidentally, the uppercase Build/ is written in README_make.txt though I can't seem to find it anywhere else, docs, wiki or otherwise. So I fixed that here too.)","Merged as 02ad2c3.
Merging this for consistency with the readme, we can always change the readme and back out of this if it's a big deal. It seems mostly harmless and will make the contribution experience a little bit nicer.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,601,2016-03-21T05:09:05Z,2016-05-07T23:22:36Z,2016-05-07T23:29:38Z,CLOSED,False,5,2,2,https://github.com/MarkOates,Add .gitignore and ignore build/ dir,1,[],https://github.com/liballeg/allegro5/pull/601,https://github.com/fatcerberus,9,https://github.com/liballeg/allegro5/pull/601#issuecomment-217676421,"Welcome our Git overlords with a nice .gitignore file.
In the file, we'll ignore the build/ directory and all its contents that are created during the recommended build process. (Incidentally, the uppercase Build/ is written in README_make.txt though I can't seem to find it anywhere else, docs, wiki or otherwise. So I fixed that here too.)","Oh sure, but when I wanted to add a .gitignore it was rejected out of hand.  Real nice guys... :o) (Joking)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,601,2016-03-21T05:09:05Z,2016-05-07T23:22:36Z,2016-05-07T23:29:38Z,CLOSED,False,5,2,2,https://github.com/MarkOates,Add .gitignore and ignore build/ dir,1,[],https://github.com/liballeg/allegro5/pull/601,https://github.com/SiegeLord,10,https://github.com/liballeg/allegro5/pull/601#issuecomment-217676645,"Welcome our Git overlords with a nice .gitignore file.
In the file, we'll ignore the build/ directory and all its contents that are created during the recommended build process. (Incidentally, the uppercase Build/ is written in README_make.txt though I can't seem to find it anywhere else, docs, wiki or otherwise. So I fixed that here too.)","It's because Mark's avatar is a cat, and yours is a dog. I am a cat person 🐈.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,603,2016-03-26T21:37:21Z,2016-03-27T21:07:47Z,2016-03-27T21:07:47Z,MERGED,True,4,1282,6,https://github.com/SiegeLord,Remove the ffmpeg backend for now.,1,[],https://github.com/liballeg/allegro5/pull/603,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/603,"It is currently very broken but will be re-added once some refactoring of the
video addon is done.","It is currently very broken but will be re-added once some refactoring of the
video addon is done.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,607,2016-03-31T02:07:14Z,2016-04-02T03:44:24Z,2016-04-02T11:44:44Z,CLOSED,False,22,3,2,https://github.com/rcorre,Sample instance length,2,[],https://github.com/liballeg/allegro5/pull/607,https://github.com/rcorre,1,https://github.com/liballeg/allegro5/pull/607,"This addresses part of #602. It makes looping respect the length, but you have to restart the stream (adjusting the length while it is playing does nothing).","This addresses part of #602. It makes looping respect the length, but you have to restart the stream (adjusting the length while it is playing does nothing).",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,607,2016-03-31T02:07:14Z,2016-04-02T03:44:24Z,2016-04-02T11:44:44Z,CLOSED,False,22,3,2,https://github.com/rcorre,Sample instance length,2,[],https://github.com/liballeg/allegro5/pull/607,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/607#issuecomment-204639304,"This addresses part of #602. It makes looping respect the length, but you have to restart the stream (adjusting the length while it is playing does nothing).",Merged as 4f71e69. Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,608,2016-04-03T02:06:02Z,2016-04-03T20:46:16Z,2016-04-03T20:48:10Z,MERGED,True,20,0,9,https://github.com/woehr,Add necessary includes for top level headers to be used in isolation.,2,[],https://github.com/liballeg/allegro5/pull/608,https://github.com/woehr,1,https://github.com/liballeg/allegro5/pull/608,"I've been playing around with a tool to automatically create bindings for allegro. The tool runs the C preprocessor on each of the top-level headers. However, in some headers this fails because they don't include the necessary dependencies. This pull request makes those dependencies explicit for the headers that I found had problems.","I've been playing around with a tool to automatically create bindings for allegro. The tool runs the C preprocessor on each of the top-level headers. However, in some headers this fails because they don't include the necessary dependencies. This pull request makes those dependencies explicit for the headers that I found had problems.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,608,2016-04-03T02:06:02Z,2016-04-03T20:46:16Z,2016-04-03T20:48:10Z,MERGED,True,20,0,9,https://github.com/woehr,Add necessary includes for top level headers to be used in isolation.,2,[],https://github.com/liballeg/allegro5/pull/608,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/608#issuecomment-205051778,"I've been playing around with a tool to automatically create bindings for allegro. The tool runs the C preprocessor on each of the top-level headers. However, in some headers this fails because they don't include the necessary dependencies. This pull request makes those dependencies explicit for the headers that I found had problems.",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,609,2016-04-06T01:45:58Z,2016-04-10T16:10:01Z,2016-04-10T16:11:31Z,MERGED,True,2,3,2,https://github.com/elias-pschernig,fix compilation on iOS,1,[],https://github.com/liballeg/allegro5/pull/609,https://github.com/elias-pschernig,1,https://github.com/liballeg/allegro5/pull/609,I updated to OSX 10.11.4 and XCode 7.3 but needed these changes to compile.,I updated to OSX 10.11.4 and XCode 7.3 but needed these changes to compile.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,609,2016-04-06T01:45:58Z,2016-04-10T16:10:01Z,2016-04-10T16:11:31Z,MERGED,True,2,3,2,https://github.com/elias-pschernig,fix compilation on iOS,1,[],https://github.com/liballeg/allegro5/pull/609,https://github.com/elias-pschernig,2,https://github.com/liballeg/allegro5/pull/609#issuecomment-208007546,I updated to OSX 10.11.4 and XCode 7.3 but needed these changes to compile.,"It seems @import only works when modules are enabled - but our CMake currently does not. So the other way to fix this would be to add a flag to CMake. Because I don't know where in CMake to add that flag, I think this commit is the better option for now. Also, if we are to switch to modules, we should use them for all frameworks, not just for a single one.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,613,2016-04-10T20:50:03Z,2016-05-07T23:27:05Z,2016-05-07T23:27:05Z,CLOSED,False,13,9,2,https://github.com/elias-pschernig,make it work with clang 3.1,1,[],https://github.com/liballeg/allegro5/pull/613,https://github.com/elias-pschernig,1,https://github.com/liballeg/allegro5/pull/613,Replaces #541 which was against the 5.1 branch.,Replaces #541 which was against the 5.1 branch.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,613,2016-04-10T20:50:03Z,2016-05-07T23:27:05Z,2016-05-07T23:27:05Z,CLOSED,False,13,9,2,https://github.com/elias-pschernig,make it work with clang 3.1,1,[],https://github.com/liballeg/allegro5/pull/613,None,2,https://github.com/liballeg/allegro5/pull/613#issuecomment-208305624,Replaces #541 which was against the 5.1 branch.,"I've been looking at which version of clang goes with which version of XCode. From this
https://en.wikipedia.org/wiki/Xcode
AFAICS Apple Clang 3.1 goes with XCode 4.3, Clang 4.0 goes with XCode 4.4 and the latter drops support for OS X Snow Leopard (2009). (However both 3.1 and 4.0 were based on LLVM 3.1).
But I'm not sure how these compiler changes affect the target runtime version - i.e. does this patch allow people with relatively old versions of XCode to continue compiling Allegro or does it affect the end user (people writing games with Allegro and people playing games written with Allegro)
All in all, I'm confused 😕",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,613,2016-04-10T20:50:03Z,2016-05-07T23:27:05Z,2016-05-07T23:27:05Z,CLOSED,False,13,9,2,https://github.com/elias-pschernig,make it work with clang 3.1,1,[],https://github.com/liballeg/allegro5/pull/613,https://github.com/goob256,3,https://github.com/liballeg/allegro5/pull/613#issuecomment-208307085,Replaces #541 which was against the 5.1 branch.,Does this compile with newer clang as well? I'm not sure but I recall some of the lines you've changed were just changed recently... not sure if it matters but perhaps someone remembers what those changes were about and if these modifications don't undo them.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,613,2016-04-10T20:50:03Z,2016-05-07T23:27:05Z,2016-05-07T23:27:05Z,CLOSED,False,13,9,2,https://github.com/elias-pschernig,make it work with clang 3.1,1,[],https://github.com/liballeg/allegro5/pull/613,None,4,https://github.com/liballeg/allegro5/pull/613#issuecomment-208307746,Replaces #541 which was against the 5.1 branch.,"Yes I am confident it will work on newer versions. The changes are just
removing uses of the shortcut methods for object literals which were added
in more recent Clangs.
On Mon, 11 Apr 2016 at 12:53 Trent Gamblin notifications@github.com wrote:

Does this compile with newer clang as well? I'm not sure but I recall some
of the lines you've changed were just changed recently... not sure if it
matters but perhaps someone remembers what those changes were about and if
these modifications don't undo them.
—
You are receiving this because you commented.
Reply to this email directly or view it on GitHub
#613 (comment)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,613,2016-04-10T20:50:03Z,2016-05-07T23:27:05Z,2016-05-07T23:27:05Z,CLOSED,False,13,9,2,https://github.com/elias-pschernig,make it work with clang 3.1,1,[],https://github.com/liballeg/allegro5/pull/613,https://github.com/elias-pschernig,5,https://github.com/liballeg/allegro5/pull/613#issuecomment-208356867,Replaces #541 which was against the 5.1 branch.,"Basically @{ is a shortcut for creating an NSDictionary, @autoreleasepool is a shortcut for [NSAutoreleasePool] alloc/init/release, and ""instancetype"" is similar to C++ ""auto"" but you can still use ""id"" (which is similar to C++ ""void *"").",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,613,2016-04-10T20:50:03Z,2016-05-07T23:27:05Z,2016-05-07T23:27:05Z,CLOSED,False,13,9,2,https://github.com/elias-pschernig,make it work with clang 3.1,1,[],https://github.com/liballeg/allegro5/pull/613,https://github.com/SiegeLord,6,https://github.com/liballeg/allegro5/pull/613#issuecomment-217676536,Replaces #541 which was against the 5.1 branch.,"Merged as 74855c8 for consistency. That said, my preference would be to drop support for older clang versions and modernize the code wholesale at some point.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,616,2016-04-11T13:13:02Z,2016-04-16T18:20:41Z,2016-06-01T14:35:57Z,MERGED,True,40,40,11,None,Use PROJECT_*_DIR instead of CMAKE_*_DIR,1,[],https://github.com/liballeg/allegro5/pull/616,None,1,https://github.com/liballeg/allegro5/pull/616,"This change was just made by using sed. It passes Travis without any issues. Is this all that is required, @adtennant?
Fixes #612","This change was just made by using sed. It passes Travis without any issues. Is this all that is required, @adtennant?
Fixes #612",True,{'THUMBS_UP': ['https://github.com/adtennant']}
liballeg/allegro5,https://github.com/liballeg/allegro5,616,2016-04-11T13:13:02Z,2016-04-16T18:20:41Z,2016-06-01T14:35:57Z,MERGED,True,40,40,11,None,Use PROJECT_*_DIR instead of CMAKE_*_DIR,1,[],https://github.com/liballeg/allegro5/pull/616,https://github.com/adtennant,2,https://github.com/liballeg/allegro5/pull/616#issuecomment-208443289,"This change was just made by using sed. It passes Travis without any issues. Is this all that is required, @adtennant?
Fixes #612",That seems to work perfectly.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,616,2016-04-11T13:13:02Z,2016-04-16T18:20:41Z,2016-06-01T14:35:57Z,MERGED,True,40,40,11,None,Use PROJECT_*_DIR instead of CMAKE_*_DIR,1,[],https://github.com/liballeg/allegro5/pull/616,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/616#issuecomment-210868279,"This change was just made by using sed. It passes Travis without any issues. Is this all that is required, @adtennant?
Fixes #612",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,616,2016-04-11T13:13:02Z,2016-04-16T18:20:41Z,2016-06-01T14:35:57Z,MERGED,True,40,40,11,None,Use PROJECT_*_DIR instead of CMAKE_*_DIR,1,[],https://github.com/liballeg/allegro5/pull/616,https://github.com/goob256,4,https://github.com/liballeg/allegro5/pull/616#issuecomment-222516831,"This change was just made by using sed. It passes Travis without any issues. Is this all that is required, @adtennant?
Fixes #612",For me this breaks the build. PROJECT_SOURCE_DIR is empty (not sure about PROJECT_BINARY_DIR). I'm on Windows under MSYS using a recent version of CMake.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,616,2016-04-11T13:13:02Z,2016-04-16T18:20:41Z,2016-06-01T14:35:57Z,MERGED,True,40,40,11,None,Use PROJECT_*_DIR instead of CMAKE_*_DIR,1,[],https://github.com/liballeg/allegro5/pull/616,https://github.com/SiegeLord,5,https://github.com/liballeg/allegro5/pull/616#issuecomment-222527041,"This change was just made by using sed. It passes Travis without any issues. Is this all that is required, @adtennant?
Fixes #612",Is this an old build directory or a freshly made one?,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,616,2016-04-11T13:13:02Z,2016-04-16T18:20:41Z,2016-06-01T14:35:57Z,MERGED,True,40,40,11,None,Use PROJECT_*_DIR instead of CMAKE_*_DIR,1,[],https://github.com/liballeg/allegro5/pull/616,https://github.com/elias-pschernig,6,https://github.com/liballeg/allegro5/pull/616#issuecomment-222534517,"This change was just made by using sed. It passes Travis without any issues. Is this all that is required, @adtennant?
Fixes #612","It's not really clear to me from the cmake documentation, but a short test looks like it should still work:
I put this in CMakeLists.txt:
message(STATUS ""PROJECT_SOURCE_DIR=${PROJECT_SOURCE_DIR}"")
message(STATUS ""CMAKE_SOURCE_DIR=${CMAKE_SOURCE_DIR}"")
message(STATUS ""PROJECT_BINARY_DIR=${PROJECT_BINARY_DIR}"")
message(STATUS ""CMAKE_BINARY_DIR=${CMAKE_BINARY_DIR}"")

Then running ""cmake ."" says (with cmake 3.5):
-- PROJECT_SOURCE_DIR=/tmp/blah
-- CMAKE_SOURCE_DIR=/tmp/blah
-- PROJECT_BINARY_DIR=/tmp/blah
-- CMAKE_BINARY_DIR=/tmp/blah

So it does not look like it is intended to ever be empty.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,616,2016-04-11T13:13:02Z,2016-04-16T18:20:41Z,2016-06-01T14:35:57Z,MERGED,True,40,40,11,None,Use PROJECT_*_DIR instead of CMAKE_*_DIR,1,[],https://github.com/liballeg/allegro5/pull/616,https://github.com/elias-pschernig,7,https://github.com/liballeg/allegro5/pull/616#issuecomment-222535987,"This change was just made by using sed. It passes Travis without any issues. Is this all that is required, @adtennant?
Fixes #612","Ah, found the problem, look at this example:
message(STATUS ""PROJECT_SOURCE_DIR=${PROJECT_SOURCE_DIR}"")
project(ALLEGRO C)
message(STATUS ""PROJECT_SOURCE_DIR=${PROJECT_SOURCE_DIR}"")

which produces:
-- PROJECT_SOURCE_DIR=
-- PROJECT_SOURCE_DIR=/tmp/blah

Oh the joy of CMake where nothing is fully documented and everything has uncalled for exceptions.
The solution for the Allegro CMakeLists.txt is to try and put the project() call before any references to PROJECT_*_DIR, if that is possible. Note though that some things in CMake have to be done before that - so I can't really say it's possible. I'd tend to revert the patch for now.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,616,2016-04-11T13:13:02Z,2016-04-16T18:20:41Z,2016-06-01T14:35:57Z,MERGED,True,40,40,11,None,Use PROJECT_*_DIR instead of CMAKE_*_DIR,1,[],https://github.com/liballeg/allegro5/pull/616,https://github.com/goob256,8,https://github.com/liballeg/allegro5/pull/616#issuecomment-222537128,"This change was just made by using sed. It passes Travis without any issues. Is this all that is required, @adtennant?
Fixes #612","Yes, that's it, in fact I was building for Android which uses the variable before the project statement. Don't see any reason that cannot be moved above the options.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,616,2016-04-11T13:13:02Z,2016-04-16T18:20:41Z,2016-06-01T14:35:57Z,MERGED,True,40,40,11,None,Use PROJECT_*_DIR instead of CMAKE_*_DIR,1,[],https://github.com/liballeg/allegro5/pull/616,https://github.com/SiegeLord,9,https://github.com/liballeg/allegro5/pull/616#issuecomment-222538563,"This change was just made by using sed. It passes Travis without any issues. Is this all that is required, @adtennant?
Fixes #612","What if we do something like this:
# Set the project name.
# We use C++ in a few cases.
project(ALLEGRO NONE)

if(WANT_ANDROID)
    include(${PROJECT_SOURCE_DIR}/cmake/Toolchain-android.cmake)
    set(ANDROID_TARGET ""android-12"" CACHE STRING ""What Android target to compile for."")
endif(WANT_ANDROID)

enable_language(C)
enable_language(CXX)
Would that work?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,616,2016-04-11T13:13:02Z,2016-04-16T18:20:41Z,2016-06-01T14:35:57Z,MERGED,True,40,40,11,None,Use PROJECT_*_DIR instead of CMAKE_*_DIR,1,[],https://github.com/liballeg/allegro5/pull/616,https://github.com/goob256,10,https://github.com/liballeg/allegro5/pull/616#issuecomment-222539725,"This change was just made by using sed. It passes Travis without any issues. Is this all that is required, @adtennant?
Fixes #612","-- Selected Android toolchain: C:/Users/trent/code/android-ndk-arm
-- The C compiler identification is GNU 4.9.0
-- Check for working C compiler: C:/Users/trent/code/android-ndk-arm/bin/arm-linux-androideabi-gcc.exe
CMake Error at C:/Program Files (x86)/CMake/share/cmake-3.5/Modules/CMakeTestCCompiler.cmake:47 (try_compile):
The test project needs language RC which is not enabled.
Call Stack (most recent call first):
CMakeLists.txt:45 (enable_language)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,616,2016-04-11T13:13:02Z,2016-04-16T18:20:41Z,2016-06-01T14:35:57Z,MERGED,True,40,40,11,None,Use PROJECT_*_DIR instead of CMAKE_*_DIR,1,[],https://github.com/liballeg/allegro5/pull/616,https://github.com/SiegeLord,11,https://github.com/liballeg/allegro5/pull/616#issuecomment-222540290,"This change was just made by using sed. It passes Travis without any issues. Is this all that is required, @adtennant?
Fixes #612",Wow... looks like RC is a hidden default language. Need to add enable_language(RC) too.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,616,2016-04-11T13:13:02Z,2016-04-16T18:20:41Z,2016-06-01T14:35:57Z,MERGED,True,40,40,11,None,Use PROJECT_*_DIR instead of CMAKE_*_DIR,1,[],https://github.com/liballeg/allegro5/pull/616,https://github.com/goob256,12,https://github.com/liballeg/allegro5/pull/616#issuecomment-222541767,"This change was just made by using sed. It passes Travis without any issues. Is this all that is required, @adtennant?
Fixes #612","That fixes that problem, but now CMake is trying to compile a (Windows) dll in the C compiler test... for some reason, even though the Android toolchain is loaded first.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,616,2016-04-11T13:13:02Z,2016-04-16T18:20:41Z,2016-06-01T14:35:57Z,MERGED,True,40,40,11,None,Use PROJECT_*_DIR instead of CMAKE_*_DIR,1,[],https://github.com/liballeg/allegro5/pull/616,https://github.com/SiegeLord,13,https://github.com/liballeg/allegro5/pull/616#issuecomment-222542641,"This change was just made by using sed. It passes Travis without any issues. Is this all that is required, @adtennant?
Fixes #612","Hmm, alright, nevermind. Let's just stick the CMAKE_SOURCE_DIR in that one spot as clearly working around it will take a bit of effort.
All that said, perhaps we shouldn't even be including the toolchain from within CMakeLists.txt at all but rather require people to pass it via the cmake command (as we appear to do for iOS and RaspberryPi). Any opinions on this?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,616,2016-04-11T13:13:02Z,2016-04-16T18:20:41Z,2016-06-01T14:35:57Z,MERGED,True,40,40,11,None,Use PROJECT_*_DIR instead of CMAKE_*_DIR,1,[],https://github.com/liballeg/allegro5/pull/616,https://github.com/goob256,14,https://github.com/liballeg/allegro5/pull/616#issuecomment-222544135,"This change was just made by using sed. It passes Travis without any issues. Is this all that is required, @adtennant?
Fixes #612",That's fair. It appears to be a bit hacky to load the toolchain from CMake. If nobody objects I can make the change and change the README.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,616,2016-04-11T13:13:02Z,2016-04-16T18:20:41Z,2016-06-01T14:35:57Z,MERGED,True,40,40,11,None,Use PROJECT_*_DIR instead of CMAKE_*_DIR,1,[],https://github.com/liballeg/allegro5/pull/616,https://github.com/goob256,15,https://github.com/liballeg/allegro5/pull/616#issuecomment-222545872,"This change was just made by using sed. It passes Travis without any issues. Is this all that is required, @adtennant?
Fixes #612","So I guess if you specify a toolchain file, it doesn't get anything you specify with -D so -DANDROID_NDK_TOOLCHAIN_ROOT won't work. It has to be an environment variable. I guess Toolchain-android.cmake does say that it's an environment variable in its error message though, so maybe it was at some point.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,616,2016-04-11T13:13:02Z,2016-04-16T18:20:41Z,2016-06-01T14:35:57Z,MERGED,True,40,40,11,None,Use PROJECT_*_DIR instead of CMAKE_*_DIR,1,[],https://github.com/liballeg/allegro5/pull/616,https://github.com/goob256,16,https://github.com/liballeg/allegro5/pull/616#issuecomment-222979450,"This change was just made by using sed. It passes Travis without any issues. Is this all that is required, @adtennant?
Fixes #612","I've got a patch that moves the toolchain to the command line. Not sure if that's ultimately what we want. Pick your poison, but here it is: https://github.com/goobliata/allegro5/commit/06bda91d40c0c60fc1d1a4007398e5f437588868
The only issue is you have to specify ANDROID_NDK_TOOLCHAIN_ROOT as an environment variable.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,616,2016-04-11T13:13:02Z,2016-04-16T18:20:41Z,2016-06-01T14:35:57Z,MERGED,True,40,40,11,None,Use PROJECT_*_DIR instead of CMAKE_*_DIR,1,[],https://github.com/liballeg/allegro5/pull/616,https://github.com/elias-pschernig,17,https://github.com/liballeg/allegro5/pull/616#issuecomment-223012362,"This change was just made by using sed. It passes Travis without any issues. Is this all that is required, @adtennant?
Fixes #612","I suppose this is the intended use of toolchain files. Makes building even more of a pain, but I think it is what we should do.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,618,2016-04-12T06:23:37Z,2016-04-16T18:45:29Z,2016-04-16T23:49:44Z,CLOSED,False,4,1,2,https://github.com/fatcerberus,Optimize bitmap hold blend mode,1,[],https://github.com/liballeg/allegro5/pull/618,https://github.com/fatcerberus,1,https://github.com/liballeg/allegro5/pull/618,"During a bitmap hold, this changes Allegro to defer the blend mode change until a vertex flush.  On some graphics chipsets (Intel, e.g.), glBlend*() calls are very expensive.  This defers them during al_hold_bitmap_drawing until the hold is released.  The change should be safe since it's already undefined behavior to change blend modes during al_hold_bitmap_drawing.","During a bitmap hold, this changes Allegro to defer the blend mode change until a vertex flush.  On some graphics chipsets (Intel, e.g.), glBlend*() calls are very expensive.  This defers them during al_hold_bitmap_drawing until the hold is released.  The change should be safe since it's already undefined behavior to change blend modes during al_hold_bitmap_drawing.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,618,2016-04-12T06:23:37Z,2016-04-16T18:45:29Z,2016-04-16T23:49:44Z,CLOSED,False,4,1,2,https://github.com/fatcerberus,Optimize bitmap hold blend mode,1,[],https://github.com/liballeg/allegro5/pull/618,https://github.com/fatcerberus,2,https://github.com/liballeg/allegro5/pull/618#issuecomment-208983991,"During a bitmap hold, this changes Allegro to defer the blend mode change until a vertex flush.  On some graphics chipsets (Intel, e.g.), glBlend*() calls are very expensive.  This defers them during al_hold_bitmap_drawing until the hold is released.  The change should be safe since it's already undefined behavior to change blend modes during al_hold_bitmap_drawing.","Hm, GitHub says Travis failed but it actually didn't.  One of the clang jobs errored due to a package manager glitch.  The rest of the builds passed.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,618,2016-04-12T06:23:37Z,2016-04-16T18:45:29Z,2016-04-16T23:49:44Z,CLOSED,False,4,1,2,https://github.com/fatcerberus,Optimize bitmap hold blend mode,1,[],https://github.com/liballeg/allegro5/pull/618,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/618#issuecomment-210872635,"During a bitmap hold, this changes Allegro to defer the blend mode change until a vertex flush.  On some graphics chipsets (Intel, e.g.), glBlend*() calls are very expensive.  This defers them during al_hold_bitmap_drawing until the hold is released.  The change should be safe since it's already undefined behavior to change blend modes during al_hold_bitmap_drawing.","Merged as e7cbc43. I added a commit after it to completely remove the call to _al_opengl_set_blender outside of the flush cache, so that it's called only once per draw call if bitmap drawing is not held.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,619,2016-04-12T16:01:15Z,2016-04-16T23:43:09Z,2016-04-16T23:49:44Z,CLOSED,False,25,1,1,https://github.com/fatcerberus,Fix GDI+ finding when using cmake-gui,1,[],https://github.com/liballeg/allegro5/pull/619,https://github.com/fatcerberus,1,https://github.com/liballeg/allegro5/pull/619,"CMake seems to be unable to find the Windows 8.1 SDK on Win10 automatically unless it's in the PATH.  As a result GDI+ usually doesn't get found unless cmake is run from the command line in an MSVC command prompt.
This PR updates FindGDIPLUS.cmake to use the same search method as for the DirectX libraries so GDI+ can be found regardless of the PATH, which allows it to work properly in cmake-gui.","CMake seems to be unable to find the Windows 8.1 SDK on Win10 automatically unless it's in the PATH.  As a result GDI+ usually doesn't get found unless cmake is run from the command line in an MSVC command prompt.
This PR updates FindGDIPLUS.cmake to use the same search method as for the DirectX libraries so GDI+ can be found regardless of the PATH, which allows it to work properly in cmake-gui.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,619,2016-04-12T16:01:15Z,2016-04-16T23:43:09Z,2016-04-16T23:49:44Z,CLOSED,False,25,1,1,https://github.com/fatcerberus,Fix GDI+ finding when using cmake-gui,1,[],https://github.com/liballeg/allegro5/pull/619,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/619#issuecomment-210924926,"CMake seems to be unable to find the Windows 8.1 SDK on Win10 automatically unless it's in the PATH.  As a result GDI+ usually doesn't get found unless cmake is run from the command line in an MSVC command prompt.
This PR updates FindGDIPLUS.cmake to use the same search method as for the DirectX libraries so GDI+ can be found regardless of the PATH, which allows it to work properly in cmake-gui.","Merged in ae16e2f. This actually fixes it for command line too, in my testing.
Thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,621,2016-04-17T04:02:58Z,2016-04-26T03:11:39Z,2016-04-26T03:11:39Z,CLOSED,False,592,2,9,https://github.com/BorisCarvajal,Opus codec support.,3,[],https://github.com/liballeg/allegro5/pull/621,https://github.com/BorisCarvajal,1,https://github.com/liballeg/allegro5/pull/621,Based on Ogg Vorbis reader so expect the same functionality.,Based on Ogg Vorbis reader so expect the same functionality.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,621,2016-04-17T04:02:58Z,2016-04-26T03:11:39Z,2016-04-26T03:11:39Z,CLOSED,False,592,2,9,https://github.com/BorisCarvajal,Opus codec support.,3,[],https://github.com/liballeg/allegro5/pull/621,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/621#issuecomment-214594338,Based on Ogg Vorbis reader so expect the same functionality.,"Awesome! There were just a few double-free errors that I had to fix, but otherwise this is pretty great. Merged as 9534c9d. Thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,624,2016-04-20T04:09:41Z,2016-04-26T02:32:27Z,2016-04-27T01:08:46Z,CLOSED,False,569,0,5,https://github.com/rcorre,Add an example of using Enet with Allegro.,2,[],https://github.com/liballeg/allegro5/pull/624,https://github.com/rcorre,1,https://github.com/liballeg/allegro5/pull/624,"This should help address questions about why Allegro does not include
its own networking code. The example comes in two parts: ex_enet_client
and ex_enet_server.
The example coordinates movement between circles each controlled by a
separate client. The clients send changes in movement direction to the
server and rely on the server as an authoritative source of their
positions.
Resolves #554
Resolves #496","This should help address questions about why Allegro does not include
its own networking code. The example comes in two parts: ex_enet_client
and ex_enet_server.
The example coordinates movement between circles each controlled by a
separate client. The clients send changes in movement direction to the
server and rely on the server as an authoritative source of their
positions.
Resolves #554
Resolves #496",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,624,2016-04-20T04:09:41Z,2016-04-26T02:32:27Z,2016-04-27T01:08:46Z,CLOSED,False,569,0,5,https://github.com/rcorre,Add an example of using Enet with Allegro.,2,[],https://github.com/liballeg/allegro5/pull/624,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/624#issuecomment-214588957,"This should help address questions about why Allegro does not include
its own networking code. The example comes in two parts: ex_enet_client
and ex_enet_server.
The example coordinates movement between circles each controlled by a
separate client. The clients send changes in movement direction to the
server and rely on the server as an authoritative source of their
positions.
Resolves #554
Resolves #496",Merged as 9b45404. These examples are pretty sweet! Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,624,2016-04-20T04:09:41Z,2016-04-26T02:32:27Z,2016-04-27T01:08:46Z,CLOSED,False,569,0,5,https://github.com/rcorre,Add an example of using Enet with Allegro.,2,[],https://github.com/liballeg/allegro5/pull/624,https://github.com/rcorre,3,https://github.com/liballeg/allegro5/pull/624#issuecomment-214935523,"This should help address questions about why Allegro does not include
its own networking code. The example comes in two parts: ex_enet_client
and ex_enet_server.
The example coordinates movement between circles each controlled by a
separate client. The clients send changes in movement direction to the
server and rely on the server as an authoritative source of their
positions.
Resolves #554
Resolves #496","Thank you! I'd been meaning to learn enet anyways, and those issues were a good excuse.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,625,2016-04-20T08:08:21Z,2016-05-29T03:00:42Z,2016-06-10T13:25:10Z,CLOSED,False,183,39,1,None,make enumerating connected joysticks more robust,1,[],https://github.com/liballeg/allegro5/pull/625,None,1,https://github.com/liballeg/allegro5/pull/625,Developed by @NewCreature. As discussed on a.cc,Developed by @NewCreature. As discussed on a.cc,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,625,2016-04-20T08:08:21Z,2016-05-29T03:00:42Z,2016-06-10T13:25:10Z,CLOSED,False,183,39,1,None,make enumerating connected joysticks more robust,1,[],https://github.com/liballeg/allegro5/pull/625,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/625#issuecomment-217671239,Developed by @NewCreature. As discussed on a.cc,"Finally got around to looking at this, sorry for the delay.
One issue I found is that it somehow detects 1 extra button than the old code for my Logitech F310 controller. It detects 13 buttons, while the old code only detects 12 (and try as I might, I don't see where the 13th button is). I looked at the code, but it's not obvious to me where the issue is (or if it's a bug in the OSX itself).",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,625,2016-04-20T08:08:21Z,2016-05-29T03:00:42Z,2016-06-10T13:25:10Z,CLOSED,False,183,39,1,None,make enumerating connected joysticks more robust,1,[],https://github.com/liballeg/allegro5/pull/625,https://github.com/NewCreature,3,https://github.com/liballeg/allegro5/pull/625#issuecomment-217672185,Developed by @NewCreature. As discussed on a.cc,"Do the analog sticks click down as buttons? My Wii U Pro controllers had 2 extra buttons I couldn't locate, but it turns out it was those.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,625,2016-04-20T08:08:21Z,2016-05-29T03:00:42Z,2016-06-10T13:25:10Z,CLOSED,False,183,39,1,None,make enumerating connected joysticks more robust,1,[],https://github.com/liballeg/allegro5/pull/625,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/625#issuecomment-217673491,Developed by @NewCreature. As discussed on a.cc,"Yeah, it detected the analog stick buttons fine.
I managed to find the 13th button, but I don't seem to get events from it (I do get events from it on Linux). The input callback doesn't even get called for it, so it's not like we're filtering it out somehow.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,625,2016-04-20T08:08:21Z,2016-05-29T03:00:42Z,2016-06-10T13:25:10Z,CLOSED,False,183,39,1,None,make enumerating connected joysticks more robust,1,[],https://github.com/liballeg/allegro5/pull/625,https://github.com/fatcerberus,5,https://github.com/liballeg/allegro5/pull/625#issuecomment-217675833,Developed by @NewCreature. As discussed on a.cc,"I used to have an F310 myself, I remember a lot of software (including Windows control panel) used to detect a seemingly phantom button on it.  It's the Analog button, isn't it?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,625,2016-04-20T08:08:21Z,2016-05-29T03:00:42Z,2016-06-10T13:25:10Z,CLOSED,False,183,39,1,None,make enumerating connected joysticks more robust,1,[],https://github.com/liballeg/allegro5/pull/625,https://github.com/SiegeLord,6,https://github.com/liballeg/allegro5/pull/625#issuecomment-217675960,Developed by @NewCreature. As discussed on a.cc,It's the button between back and start buttons in the middle. The one with the logitech logo.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,625,2016-04-20T08:08:21Z,2016-05-29T03:00:42Z,2016-06-10T13:25:10Z,CLOSED,False,183,39,1,None,make enumerating connected joysticks more robust,1,[],https://github.com/liballeg/allegro5/pull/625,https://github.com/NewCreature,7,https://github.com/liballeg/allegro5/pull/625#issuecomment-219904373,Developed by @NewCreature. As discussed on a.cc,Maybe try it with Enjoyable to see if it detects the 13th button and allows it to map to something.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,625,2016-04-20T08:08:21Z,2016-05-29T03:00:42Z,2016-06-10T13:25:10Z,CLOSED,False,183,39,1,None,make enumerating connected joysticks more robust,1,[],https://github.com/liballeg/allegro5/pull/625,https://github.com/SiegeLord,8,https://github.com/liballeg/allegro5/pull/625#issuecomment-222340009,Developed by @NewCreature. As discussed on a.cc,"Merged as 0828211. Thanks to you both!
I decided not to worry about the 13th button, this patch is still a strict improvement over the current situation.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,628,2016-05-01T18:37:04Z,2016-07-17T04:05:34Z,2016-07-17T04:10:04Z,CLOSED,False,19,19,5,https://github.com/fatcerberus,Make set_shader_uniform const-correct,1,[],https://github.com/liballeg/allegro5/pull/628,https://github.com/fatcerberus,1,https://github.com/liballeg/allegro5/pull/628,"al_set_shader_matrix() and al_set_shader_*_vector() don't modify the arrays passed to them, so they should be const.","al_set_shader_matrix() and al_set_shader_*_vector() don't modify the arrays passed to them, so they should be const.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,628,2016-05-01T18:37:04Z,2016-07-17T04:05:34Z,2016-07-17T04:10:04Z,CLOSED,False,19,19,5,https://github.com/fatcerberus,Make set_shader_uniform const-correct,1,[],https://github.com/liballeg/allegro5/pull/628,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/628#issuecomment-217674205,"al_set_shader_matrix() and al_set_shader_*_vector() don't modify the arrays passed to them, so they should be const.","This is an interesting change from the point of view of API stability. This doesn't affect the ABI, since the argument types are not encoded for C functions. However, it may cause code that previously compiled no longer compile, e.g.:
bool (*ptr)(const char*, ALLEGRO_TRANSFORM*) = al_set_shader_matrix;
Historically, Allegro has never provided that kind of level of source compatibility though, so it's not like it'd be unprecedented.
Any opinions on this, @elias-pschernig?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,628,2016-05-01T18:37:04Z,2016-07-17T04:05:34Z,2016-07-17T04:10:04Z,CLOSED,False,19,19,5,https://github.com/fatcerberus,Make set_shader_uniform const-correct,1,[],https://github.com/liballeg/allegro5/pull/628,https://github.com/elias-pschernig,3,https://github.com/liballeg/allegro5/pull/628#issuecomment-217674593,"al_set_shader_matrix() and al_set_shader_*_vector() don't modify the arrays passed to them, so they should be const.","Well, I never was one who felt strong about ABI/API compatibility to begin with - so I'd say it's fine :)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,628,2016-05-01T18:37:04Z,2016-07-17T04:05:34Z,2016-07-17T04:10:04Z,CLOSED,False,19,19,5,https://github.com/fatcerberus,Make set_shader_uniform const-correct,1,[],https://github.com/liballeg/allegro5/pull/628,https://github.com/fatcerberus,4,https://github.com/liballeg/allegro5/pull/628#issuecomment-217674743,"al_set_shader_matrix() and al_set_shader_*_vector() don't modify the arrays passed to them, so they should be const.","Hm, that's true.  I just get frustrated in cases like this because my own code is const correct (to the best of my ability) and I don't like casting away the const as many compilers issue warnings for doing so.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,628,2016-05-01T18:37:04Z,2016-07-17T04:05:34Z,2016-07-17T04:10:04Z,CLOSED,False,19,19,5,https://github.com/fatcerberus,Make set_shader_uniform const-correct,1,[],https://github.com/liballeg/allegro5/pull/628,https://github.com/elias-pschernig,5,https://github.com/liballeg/allegro5/pull/628#issuecomment-217675879,"al_set_shader_matrix() and al_set_shader_*_vector() don't modify the arrays passed to them, so they should be const.","This reminds me, there is other places which technically could be made const-correct, for example it should be al_draw_bitmap(ALLEGRO_BITMAP const *bitmap, ...) since the bitmap is not modified. At the same time some drivers may require synchronizing a texture or other things inside of the ALLEGRO_BITMAP, or the texture may even get locked to the current thread and so on - so in reality it definitely may not be const at all. In any case, for parameters like the one in your patch I definitely think we should add the const as you did.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,628,2016-05-01T18:37:04Z,2016-07-17T04:05:34Z,2016-07-17T04:10:04Z,CLOSED,False,19,19,5,https://github.com/fatcerberus,Make set_shader_uniform const-correct,1,[],https://github.com/liballeg/allegro5/pull/628,https://github.com/fatcerberus,6,https://github.com/liballeg/allegro5/pull/628#issuecomment-217675992,"al_set_shader_matrix() and al_set_shader_*_vector() don't modify the arrays passed to them, so they should be const.",I tend to err on the side of caution for highly mutable objects like textures and such even in my own code so I know what you mean there.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,628,2016-05-01T18:37:04Z,2016-07-17T04:05:34Z,2016-07-17T04:10:04Z,CLOSED,False,19,19,5,https://github.com/fatcerberus,Make set_shader_uniform const-correct,1,[],https://github.com/liballeg/allegro5/pull/628,https://github.com/SiegeLord,7,https://github.com/liballeg/allegro5/pull/628#issuecomment-233164003,"al_set_shader_matrix() and al_set_shader_*_vector() don't modify the arrays passed to them, so they should be const.","Merged as 15a3f42.
I decided that we shouldn't provide this level of API stability, it's just too restrictive on our end, and doesn't enable any sort of useful code on the user's end.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,632,2016-06-01T11:13:33Z,2016-06-04T03:52:52Z,2016-06-04T03:52:52Z,CLOSED,False,4,0,1,https://github.com/goob256,Fix Android app woken up during sleep,2,[],https://github.com/liballeg/allegro5/pull/632,https://github.com/goob256,1,https://github.com/liballeg/allegro5/pull/632,"I spent 40 hours trying to figure out how to fix my music from starting when my Android TV system goes to sleep and I have backgrounded my game. Here's what I learned:

Allegro generates a DISPLAY_RESUME event in surfaceChanged. It seems like it would be better placed in onResume, however threading issues make it (near?) impossible... I couldn't get it to work anyway, not without rewriting everything.
surfaceChanged can be called at any time, it doesn't depend on the Android lifecycle... so onResume isn't always called afterwards. This leads to screenblank activating which for some stupid reason generates a surfaceChanged that wakes up the game, but the system doesn't wake up.
surfaceCreated always gets called during a resume, so with this patch, the surface is always recreated and in my testing on phone and TV systems, this doesn't lead to a zombie state like c3493b4.
Unlike the linked patch, this destroys the surface on the way into a pause, so there's no double free. And it gets recreated when the app resumes.

So all this effectively changes is one erroneous RESUME_DRAWING is avoided... but I welcome further testing. I guess where there is no surface, that surfaceChanged event is avoided...
The issue with putting the DISPLAY_RESUME in onResume is that onResume would have to wait for al_acknowledge_drawing_resume. However al_acknowledge_drawing_resume depends on surfaceChanged being finished... but they can happen in any order so the only potential way to work it out is a bunch of while (!flag); stuff (conditions don't work three way branches.)","I spent 40 hours trying to figure out how to fix my music from starting when my Android TV system goes to sleep and I have backgrounded my game. Here's what I learned:

Allegro generates a DISPLAY_RESUME event in surfaceChanged. It seems like it would be better placed in onResume, however threading issues make it (near?) impossible... I couldn't get it to work anyway, not without rewriting everything.
surfaceChanged can be called at any time, it doesn't depend on the Android lifecycle... so onResume isn't always called afterwards. This leads to screenblank activating which for some stupid reason generates a surfaceChanged that wakes up the game, but the system doesn't wake up.
surfaceCreated always gets called during a resume, so with this patch, the surface is always recreated and in my testing on phone and TV systems, this doesn't lead to a zombie state like c3493b4.
Unlike the linked patch, this destroys the surface on the way into a pause, so there's no double free. And it gets recreated when the app resumes.

So all this effectively changes is one erroneous RESUME_DRAWING is avoided... but I welcome further testing. I guess where there is no surface, that surfaceChanged event is avoided...
The issue with putting the DISPLAY_RESUME in onResume is that onResume would have to wait for al_acknowledge_drawing_resume. However al_acknowledge_drawing_resume depends on surfaceChanged being finished... but they can happen in any order so the only potential way to work it out is a bunch of while (!flag); stuff (conditions don't work three way branches.)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,632,2016-06-01T11:13:33Z,2016-06-04T03:52:52Z,2016-06-04T03:52:52Z,CLOSED,False,4,0,1,https://github.com/goob256,Fix Android app woken up during sleep,2,[],https://github.com/liballeg/allegro5/pull/632,https://github.com/elias-pschernig,2,https://github.com/liballeg/allegro5/pull/632#issuecomment-222973285,"I spent 40 hours trying to figure out how to fix my music from starting when my Android TV system goes to sleep and I have backgrounded my game. Here's what I learned:

Allegro generates a DISPLAY_RESUME event in surfaceChanged. It seems like it would be better placed in onResume, however threading issues make it (near?) impossible... I couldn't get it to work anyway, not without rewriting everything.
surfaceChanged can be called at any time, it doesn't depend on the Android lifecycle... so onResume isn't always called afterwards. This leads to screenblank activating which for some stupid reason generates a surfaceChanged that wakes up the game, but the system doesn't wake up.
surfaceCreated always gets called during a resume, so with this patch, the surface is always recreated and in my testing on phone and TV systems, this doesn't lead to a zombie state like c3493b4.
Unlike the linked patch, this destroys the surface on the way into a pause, so there's no double free. And it gets recreated when the app resumes.

So all this effectively changes is one erroneous RESUME_DRAWING is avoided... but I welcome further testing. I guess where there is no surface, that surfaceChanged event is avoided...
The issue with putting the DISPLAY_RESUME in onResume is that onResume would have to wait for al_acknowledge_drawing_resume. However al_acknowledge_drawing_resume depends on surfaceChanged being finished... but they can happen in any order so the only potential way to work it out is a bunch of while (!flag); stuff (conditions don't work three way branches.)","So basically with that patch we destroy the android surface in onPause and re-create it in onResume. That sounds like it should work in theory. However I'm a bit worried that if you slide down the settings from the top or slide in a side bar, the Allegro game will not work correctly anymore (as onPause will be called in those cases even though the game is still visible). Need to confirm that still works - I can try and test maybe during this week.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,632,2016-06-01T11:13:33Z,2016-06-04T03:52:52Z,2016-06-04T03:52:52Z,CLOSED,False,4,0,1,https://github.com/goob256,Fix Android app woken up during sleep,2,[],https://github.com/liballeg/allegro5/pull/632,https://github.com/goob256,3,https://github.com/liballeg/allegro5/pull/632#issuecomment-222977029,"I spent 40 hours trying to figure out how to fix my music from starting when my Android TV system goes to sleep and I have backgrounded my game. Here's what I learned:

Allegro generates a DISPLAY_RESUME event in surfaceChanged. It seems like it would be better placed in onResume, however threading issues make it (near?) impossible... I couldn't get it to work anyway, not without rewriting everything.
surfaceChanged can be called at any time, it doesn't depend on the Android lifecycle... so onResume isn't always called afterwards. This leads to screenblank activating which for some stupid reason generates a surfaceChanged that wakes up the game, but the system doesn't wake up.
surfaceCreated always gets called during a resume, so with this patch, the surface is always recreated and in my testing on phone and TV systems, this doesn't lead to a zombie state like c3493b4.
Unlike the linked patch, this destroys the surface on the way into a pause, so there's no double free. And it gets recreated when the app resumes.

So all this effectively changes is one erroneous RESUME_DRAWING is avoided... but I welcome further testing. I guess where there is no surface, that surfaceChanged event is avoided...
The issue with putting the DISPLAY_RESUME in onResume is that onResume would have to wait for al_acknowledge_drawing_resume. However al_acknowledge_drawing_resume depends on surfaceChanged being finished... but they can happen in any order so the only potential way to work it out is a bunch of while (!flag); stuff (conditions don't work three way branches.)","I've been implementing Google Play achievements over the past day or two and those work fine. They popup little banners and even some text input things.
(I had to patch AllegroActivity to extend FragmentActivity to base my code on Google's examples... but that requires an extra support library so I would not commit that to the master repo... however it's here: https://github.com/goobliata/allegro5/tree/android_fragment_activity, you just need the support-v4 library which was a pain to make usable with Ant projects :P)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,632,2016-06-01T11:13:33Z,2016-06-04T03:52:52Z,2016-06-04T03:52:52Z,CLOSED,False,4,0,1,https://github.com/goob256,Fix Android app woken up during sleep,2,[],https://github.com/liballeg/allegro5/pull/632,https://github.com/elias-pschernig,4,https://github.com/liballeg/allegro5/pull/632#issuecomment-222992377,"I spent 40 hours trying to figure out how to fix my music from starting when my Android TV system goes to sleep and I have backgrounded my game. Here's what I learned:

Allegro generates a DISPLAY_RESUME event in surfaceChanged. It seems like it would be better placed in onResume, however threading issues make it (near?) impossible... I couldn't get it to work anyway, not without rewriting everything.
surfaceChanged can be called at any time, it doesn't depend on the Android lifecycle... so onResume isn't always called afterwards. This leads to screenblank activating which for some stupid reason generates a surfaceChanged that wakes up the game, but the system doesn't wake up.
surfaceCreated always gets called during a resume, so with this patch, the surface is always recreated and in my testing on phone and TV systems, this doesn't lead to a zombie state like c3493b4.
Unlike the linked patch, this destroys the surface on the way into a pause, so there's no double free. And it gets recreated when the app resumes.

So all this effectively changes is one erroneous RESUME_DRAWING is avoided... but I welcome further testing. I guess where there is no surface, that surfaceChanged event is avoided...
The issue with putting the DISPLAY_RESUME in onResume is that onResume would have to wait for al_acknowledge_drawing_resume. However al_acknowledge_drawing_resume depends on surfaceChanged being finished... but they can happen in any order so the only potential way to work it out is a bunch of while (!flag); stuff (conditions don't work three way branches.)","Do you have an .apk with the patch applied? I was more thinking about things like sliding in another app (from a different activity) on top of your game - I might be able to try it out during lunch break at work. I also want to test it on my game before applying. I once before applied a similar patch by someone (it destroyed the surface in onStop), then forgot about it and spent two entire weeks figuring out why my game sometimes would end up in a zombie state without a surface.
As I know now, the Android activity lifecycle is actually extremely simple:
      onStart     onResume
stopped <-> paused <-> running
      onStop      onPause

It's a bit unfortunate that we made it such a mess of it in Allegro :P",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,632,2016-06-01T11:13:33Z,2016-06-04T03:52:52Z,2016-06-04T03:52:52Z,CLOSED,False,4,0,1,https://github.com/goob256,Fix Android app woken up during sleep,2,[],https://github.com/liballeg/allegro5/pull/632,https://github.com/goob256,5,https://github.com/liballeg/allegro5/pull/632#issuecomment-223174980,"I spent 40 hours trying to figure out how to fix my music from starting when my Android TV system goes to sleep and I have backgrounded my game. Here's what I learned:

Allegro generates a DISPLAY_RESUME event in surfaceChanged. It seems like it would be better placed in onResume, however threading issues make it (near?) impossible... I couldn't get it to work anyway, not without rewriting everything.
surfaceChanged can be called at any time, it doesn't depend on the Android lifecycle... so onResume isn't always called afterwards. This leads to screenblank activating which for some stupid reason generates a surfaceChanged that wakes up the game, but the system doesn't wake up.
surfaceCreated always gets called during a resume, so with this patch, the surface is always recreated and in my testing on phone and TV systems, this doesn't lead to a zombie state like c3493b4.
Unlike the linked patch, this destroys the surface on the way into a pause, so there's no double free. And it gets recreated when the app resumes.

So all this effectively changes is one erroneous RESUME_DRAWING is avoided... but I welcome further testing. I guess where there is no surface, that surfaceChanged event is avoided...
The issue with putting the DISPLAY_RESUME in onResume is that onResume would have to wait for al_acknowledge_drawing_resume. However al_acknowledge_drawing_resume depends on surfaceChanged being finished... but they can happen in any order so the only potential way to work it out is a bunch of while (!flag); stuff (conditions don't work three way branches.)",I emailed you a link to an APK.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,632,2016-06-01T11:13:33Z,2016-06-04T03:52:52Z,2016-06-04T03:52:52Z,CLOSED,False,4,0,1,https://github.com/goob256,Fix Android app woken up during sleep,2,[],https://github.com/liballeg/allegro5/pull/632,https://github.com/elias-pschernig,6,https://github.com/liballeg/allegro5/pull/632#issuecomment-223731274,"I spent 40 hours trying to figure out how to fix my music from starting when my Android TV system goes to sleep and I have backgrounded my game. Here's what I learned:

Allegro generates a DISPLAY_RESUME event in surfaceChanged. It seems like it would be better placed in onResume, however threading issues make it (near?) impossible... I couldn't get it to work anyway, not without rewriting everything.
surfaceChanged can be called at any time, it doesn't depend on the Android lifecycle... so onResume isn't always called afterwards. This leads to screenblank activating which for some stupid reason generates a surfaceChanged that wakes up the game, but the system doesn't wake up.
surfaceCreated always gets called during a resume, so with this patch, the surface is always recreated and in my testing on phone and TV systems, this doesn't lead to a zombie state like c3493b4.
Unlike the linked patch, this destroys the surface on the way into a pause, so there's no double free. And it gets recreated when the app resumes.

So all this effectively changes is one erroneous RESUME_DRAWING is avoided... but I welcome further testing. I guess where there is no surface, that surfaceChanged event is avoided...
The issue with putting the DISPLAY_RESUME in onResume is that onResume would have to wait for al_acknowledge_drawing_resume. However al_acknowledge_drawing_resume depends on surfaceChanged being finished... but they can happen in any order so the only potential way to work it out is a bunch of while (!flag); stuff (conditions don't work three way branches.)","It seems to work fine with my game, except once I got the below crash. I suppose we could simply check if the surface is already Null then guard against it. I unfortunately don't have more complete logs anymore and haven't been able to reproduce anymore - but it happened within a moment of starting the game, before anything was visible even.
I don't fully follow our display creation code on Android, but I see that in nativeOnResume we only re-create the surface if the ""created"" flag of our display is set. So there is the possibility of receiving onPause and onResume events where with the patch onPause will destroy the surface and onResume will not create it - and then the next onPause will lead to the crash? Just guessing.
Do you think it would make sense to only destroy the surface in onPause if the ""created"" flag is set?
I remember from hunting that last zombie-patch that on some devices Android will send many rapid onPause and onResume events to the app within the first milliseconds of starting (Samsung S6 and S7 especially) - which is exactly the time a game usually creates its display. (I used the free 200 Amazon test cloud or whatever minutes to try on all those devices... unfortunately I fully used those up back then so now I only have my personal phone to test on :P)
06-03 22:07:31.240 21797-21797/? D/AllegroActivity: destroySurface
06-03 22:07:31.241 21797-21797/? W/System.err: java.lang.NullPointerException: Attempt to invoke virtual method 'android.view.ViewParent org.liballeg.android.AllegroSurface.getParent()' on a null object reference
06-03 22:07:31.242 21797-21797/? W/System.err:     at org.liballeg.android.AllegroActivity.destroySurface(AllegroActivity.java:168)
06-03 22:07:31.243 21797-21797/? W/System.err:     at org.liballeg.android.AllegroActivity.nativeOnPause(Native Method)
06-03 22:07:31.244 21797-21797/? W/System.err:     at org.liballeg.android.AllegroActivity.onPause(AllegroActivity.java:374)
06-03 22:07:31.244 21797-21797/? W/System.err:     at android.app.Activity.performPause(Activity.java:6363)
06-03 22:07:31.245 21797-21797/? W/System.err:     at android.app.Instrumentation.callActivityOnPause(Instrumentation.java:1311)
06-03 22:07:31.246 21797-21797/? W/System.err:     at android.app.ActivityThread.performPauseActivity(ActivityThread.java:3367)
06-03 22:07:31.246 21797-21797/? W/System.err:     at android.app.ActivityThread.performPauseActivity(ActivityThread.java:3340)
06-03 22:07:31.247 21797-21797/? W/System.err:     at android.app.ActivityThread.handlePauseActivity(ActivityThread.java:3315)
06-03 22:07:31.247 21797-21797/? W/System.err:     at android.app.ActivityThread.-wrap13(ActivityThread.java)
06-03 22:07:31.248 21797-21797/? W/System.err:     at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1355)
06-03 22:07:31.248 21797-21797/? W/System.err:     at android.os.Handler.dispatchMessage(Handler.java:102)
06-03 22:07:31.249 21797-21797/? W/System.err:     at android.os.Looper.loop(Looper.java:148)
06-03 22:07:31.249 21797-21797/? W/System.err:     at android.app.ActivityThread.main(ActivityThread.java:5422)
06-03 22:07:31.250 21797-21797/? W/System.err:     at java.lang.reflect.Method.invoke(Native Method)
06-03 22:07:31.251 21797-21797/? W/System.err:     at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:726)
06-03 22:07:31.251 21797-21797/? W/System.err:     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:616)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,632,2016-06-01T11:13:33Z,2016-06-04T03:52:52Z,2016-06-04T03:52:52Z,CLOSED,False,4,0,1,https://github.com/goob256,Fix Android app woken up during sleep,2,[],https://github.com/liballeg/allegro5/pull/632,https://github.com/goob256,7,https://github.com/liballeg/allegro5/pull/632#issuecomment-223734202,"I spent 40 hours trying to figure out how to fix my music from starting when my Android TV system goes to sleep and I have backgrounded my game. Here's what I learned:

Allegro generates a DISPLAY_RESUME event in surfaceChanged. It seems like it would be better placed in onResume, however threading issues make it (near?) impossible... I couldn't get it to work anyway, not without rewriting everything.
surfaceChanged can be called at any time, it doesn't depend on the Android lifecycle... so onResume isn't always called afterwards. This leads to screenblank activating which for some stupid reason generates a surfaceChanged that wakes up the game, but the system doesn't wake up.
surfaceCreated always gets called during a resume, so with this patch, the surface is always recreated and in my testing on phone and TV systems, this doesn't lead to a zombie state like c3493b4.
Unlike the linked patch, this destroys the surface on the way into a pause, so there's no double free. And it gets recreated when the app resumes.

So all this effectively changes is one erroneous RESUME_DRAWING is avoided... but I welcome further testing. I guess where there is no surface, that surfaceChanged event is avoided...
The issue with putting the DISPLAY_RESUME in onResume is that onResume would have to wait for al_acknowledge_drawing_resume. However al_acknowledge_drawing_resume depends on surfaceChanged being finished... but they can happen in any order so the only potential way to work it out is a bunch of while (!flag); stuff (conditions don't work three way branches.)","I added a if (d->created) before destroying the surface as you suggested. Doesn't seem to harm anything (created is set false in surfaceDestroyed and is initially false so should work.) Seems odd that Android doesn't adhere to it's supposed lifecycle sometimes, but what can you do. I will commit the current branch after squashing it.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,634,2016-06-04T03:56:28Z,2016-06-12T05:15:15Z,2016-06-12T05:15:15Z,CLOSED,False,17,22,3,https://github.com/goob256,Android toolchain,3,[],https://github.com/liballeg/allegro5/pull/634,https://github.com/goob256,1,https://github.com/liballeg/allegro5/pull/634,"Specify the Android toolchain file on the command line, as seems to be the intended use of toolchain files. This has the side effect of requiring ANDROID_NDK_TOOLCHAIN_ROOT to have to be specified as an environment variable because CMake seems to process the toolchain before -D arguments.","Specify the Android toolchain file on the command line, as seems to be the intended use of toolchain files. This has the side effect of requiring ANDROID_NDK_TOOLCHAIN_ROOT to have to be specified as an environment variable because CMake seems to process the toolchain before -D arguments.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,636,2016-06-10T20:34:54Z,2016-06-12T04:36:29Z,2016-06-13T02:08:56Z,MERGED,True,16,7,1,https://github.com/koro-xx,Fix al_get_text_dimensions to get exact bounding box,2,[],https://github.com/liballeg/allegro5/pull/636,https://github.com/koro-xx,1,https://github.com/liballeg/allegro5/pull/636,"al_get_text_dimensions is supposed to return the text bounding box, but currently only the width is correct (for the height it returns the font line height instead of a tight bounding box).
This fixes it so that bbh is the exact height of the bounding box and bby is the offset from the top.","al_get_text_dimensions is supposed to return the text bounding box, but currently only the width is correct (for the height it returns the font line height instead of a tight bounding box).
This fixes it so that bbh is the exact height of the bounding box and bby is the offset from the top.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,636,2016-06-10T20:34:54Z,2016-06-12T04:36:29Z,2016-06-13T02:08:56Z,MERGED,True,16,7,1,https://github.com/koro-xx,Fix al_get_text_dimensions to get exact bounding box,2,[],https://github.com/liballeg/allegro5/pull/636,https://github.com/koro-xx,2,https://github.com/liballeg/allegro5/pull/636#issuecomment-225310333,"al_get_text_dimensions is supposed to return the text bounding box, but currently only the width is correct (for the height it returns the font line height instead of a tight bounding box).
This fixes it so that bbh is the exact height of the bounding box and bby is the offset from the top.","After doing this I noticed this is not an exact bounding box, since it adds an extra ""margin"" pixel (because al_get_glyph_dimensions does). By now I understood that glyph->region adds a margin pixel to glyphs; that's fine.
But al_get_glyph_dimensions seems to return the exact width of the pixel in bbw while it keeps the extra margin pixel in bbh (see here).
Is there a reason for this inconsistency?
(I noticed that al_get_text_dimensions even adds 2 to bbw to account for the missing margin pixels from the width in al_get_glyph_dimensions...)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,636,2016-06-10T20:34:54Z,2016-06-12T04:36:29Z,2016-06-13T02:08:56Z,MERGED,True,16,7,1,https://github.com/koro-xx,Fix al_get_text_dimensions to get exact bounding box,2,[],https://github.com/liballeg/allegro5/pull/636,https://github.com/goob256,3,https://github.com/liballeg/allegro5/pull/636#issuecomment-225359030,"al_get_text_dimensions is supposed to return the text bounding box, but currently only the width is correct (for the height it returns the font line height instead of a tight bounding box).
This fixes it so that bbh is the exact height of the bounding box and bby is the offset from the top.","I'm not sure this is your issue, but fonts all define the heights differently. One font could look the same size as another but Freetype will return a taller height for it.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,636,2016-06-10T20:34:54Z,2016-06-12T04:36:29Z,2016-06-13T02:08:56Z,MERGED,True,16,7,1,https://github.com/koro-xx,Fix al_get_text_dimensions to get exact bounding box,2,[],https://github.com/liballeg/allegro5/pull/636,https://github.com/koro-xx,4,https://github.com/liballeg/allegro5/pull/636#issuecomment-225398400,"al_get_text_dimensions is supposed to return the text bounding box, but currently only the width is correct (for the height it returns the font line height instead of a tight bounding box).
This fixes it so that bbh is the exact height of the bounding box and bby is the offset from the top.",I've also corrected al_get_glyph_dimensions so that it returns the exact bounding box now.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,636,2016-06-10T20:34:54Z,2016-06-12T04:36:29Z,2016-06-13T02:08:56Z,MERGED,True,16,7,1,https://github.com/koro-xx,Fix al_get_text_dimensions to get exact bounding box,2,[],https://github.com/liballeg/allegro5/pull/636,https://github.com/goob256,5,https://github.com/liballeg/allegro5/pull/636#issuecomment-225407172,"al_get_text_dimensions is supposed to return the text bounding box, but currently only the width is correct (for the height it returns the font line height instead of a tight bounding box).
This fixes it so that bbh is the exact height of the bounding box and bby is the offset from the top.",The first patch looks reasonable. How does the second patch affect text drawing? I imagine it is more condensed? I'd have to check it out...,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,636,2016-06-10T20:34:54Z,2016-06-12T04:36:29Z,2016-06-13T02:08:56Z,MERGED,True,16,7,1,https://github.com/koro-xx,Fix al_get_text_dimensions to get exact bounding box,2,[],https://github.com/liballeg/allegro5/pull/636,https://github.com/goob256,6,https://github.com/liballeg/allegro5/pull/636#issuecomment-225409748,"al_get_text_dimensions is supposed to return the text bounding box, but currently only the width is correct (for the height it returns the font line height instead of a tight bounding box).
This fixes it so that bbh is the exact height of the bounding box and bby is the offset from the top.","I had a look and it looks good. ex_ttf has an error in it that it draws ""Tulip""'s boxes 1 pixel too far to the right and bottom (it should be x + w - 1) but besides that it looks perfect.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,636,2016-06-10T20:34:54Z,2016-06-12T04:36:29Z,2016-06-13T02:08:56Z,MERGED,True,16,7,1,https://github.com/koro-xx,Fix al_get_text_dimensions to get exact bounding box,2,[],https://github.com/liballeg/allegro5/pull/636,https://github.com/elias-pschernig,7,https://github.com/liballeg/allegro5/pull/636#issuecomment-225464591,"al_get_text_dimensions is supposed to return the text bounding box, but currently only the width is correct (for the height it returns the font line height instead of a tight bounding box).
This fixes it so that bbh is the exact height of the bounding box and bby is the offset from the top.","Actually, if you have a bounding box from a/b ""inclusive"" to c/d ""inclusive"", the proper way to do it with Allegro is: al_draw_rectangle(a + 0.5, b + 0.5, c + 0.5, d + 0.5, 1). Remember, our default projection assumes pixel centers are at 0.5/0.5 and a line-width of 1 means a rectangle at the center spans the entire pixel. E.g. al_draw_rectangle(0.5, 0.5, 1.5, 1.5) will modify exactly these 4 pixels: 0/0, 1/0, 0/1, 1/1. If you want to instead clear a rectangle at x/y with size w/h it would be: al_draw_filled_rectangle(x, y, w, h) - so that case makes a bit more sense at least.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,636,2016-06-10T20:34:54Z,2016-06-12T04:36:29Z,2016-06-13T02:08:56Z,MERGED,True,16,7,1,https://github.com/koro-xx,Fix al_get_text_dimensions to get exact bounding box,2,[],https://github.com/liballeg/allegro5/pull/636,https://github.com/goob256,8,https://github.com/liballeg/allegro5/pull/636#issuecomment-225464726,"al_get_text_dimensions is supposed to return the text bounding box, but currently only the width is correct (for the height it returns the font line height instead of a tight bounding box).
This fixes it so that bbh is the exact height of the bounding box and bby is the offset from the top.","With 0.5 pixel offsets it should be x + 0.5, x + w - 0.5. Think about this: you have a box that is 2 pixels wide that starts at 0. It should be drawn on pixels 0 and 1 not 0 and 2 because 0 to 2 is 3 pixels.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,636,2016-06-10T20:34:54Z,2016-06-12T04:36:29Z,2016-06-13T02:08:56Z,MERGED,True,16,7,1,https://github.com/koro-xx,Fix al_get_text_dimensions to get exact bounding box,2,[],https://github.com/liballeg/allegro5/pull/636,https://github.com/goob256,9,https://github.com/liballeg/allegro5/pull/636#issuecomment-225465785,"al_get_text_dimensions is supposed to return the text bounding box, but currently only the width is correct (for the height it returns the font line height instead of a tight bounding box).
This fixes it so that bbh is the exact height of the bounding box and bby is the offset from the top.",OK I think you're right koro-xx. I removed the + 1's. I also changed ex_ttf to use 0.5 offsets. Please check it out. However for me in ex_ttf to top blue line of the u is visible but it shouldn't be.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,636,2016-06-10T20:34:54Z,2016-06-12T04:36:29Z,2016-06-13T02:08:56Z,MERGED,True,16,7,1,https://github.com/koro-xx,Fix al_get_text_dimensions to get exact bounding box,2,[],https://github.com/liballeg/allegro5/pull/636,https://github.com/fatcerberus,10,https://github.com/liballeg/allegro5/pull/636#issuecomment-225466738,"al_get_text_dimensions is supposed to return the text bounding box, but currently only the width is correct (for the height it returns the font line height instead of a tight bounding box).
This fixes it so that bbh is the exact height of the bounding box and bby is the offset from the top.","Regarding box drawing: A solid rectangle drawn at (0,0)-(2,2) is 2x2.  This is because with hardware rendering integer coordinates are at intersections of pixels, not their centers, unlike in pure raster drawing.
The only reason you need to add 0.5 for line drawing is because you want the lines to go through the center of pixels, otherwise they won't be visible.  If you just want to calculate a bounding box, (x,y)-(x+w,y+h) is indeed correct for GPU rendering.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,636,2016-06-10T20:34:54Z,2016-06-12T04:36:29Z,2016-06-13T02:08:56Z,MERGED,True,16,7,1,https://github.com/koro-xx,Fix al_get_text_dimensions to get exact bounding box,2,[],https://github.com/liballeg/allegro5/pull/636,https://github.com/goob256,11,https://github.com/liballeg/allegro5/pull/636#issuecomment-225467352,"al_get_text_dimensions is supposed to return the text bounding box, but currently only the width is correct (for the height it returns the font line height instead of a tight bounding box).
This fixes it so that bbh is the exact height of the bounding box and bby is the offset from the top.","x+w is never correct, it's more or less a fluke that it works WITH OPENGL. The only reason it works with D3D is Allegro adds a 0.5, 0.5 matrix to the transformation.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,636,2016-06-10T20:34:54Z,2016-06-12T04:36:29Z,2016-06-13T02:08:56Z,MERGED,True,16,7,1,https://github.com/koro-xx,Fix al_get_text_dimensions to get exact bounding box,2,[],https://github.com/liballeg/allegro5/pull/636,https://github.com/goob256,12,https://github.com/liballeg/allegro5/pull/636#issuecomment-225467876,"al_get_text_dimensions is supposed to return the text bounding box, but currently only the width is correct (for the height it returns the font line height instead of a tight bounding box).
This fixes it so that bbh is the exact height of the bounding box and bby is the offset from the top.","Just to expand on that, turn on multi-sampling and you'll see why x+w is never correct.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,636,2016-06-10T20:34:54Z,2016-06-12T04:36:29Z,2016-06-13T02:08:56Z,MERGED,True,16,7,1,https://github.com/koro-xx,Fix al_get_text_dimensions to get exact bounding box,2,[],https://github.com/liballeg/allegro5/pull/636,https://github.com/goob256,13,https://github.com/liballeg/allegro5/pull/636#issuecomment-225468125,"al_get_text_dimensions is supposed to return the text bounding box, but currently only the width is correct (for the height it returns the font line height instead of a tight bounding box).
This fixes it so that bbh is the exact height of the bounding box and bby is the offset from the top.","Sheesh, even without multisampling it doesn't draw a bounding box...",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,636,2016-06-10T20:34:54Z,2016-06-12T04:36:29Z,2016-06-13T02:08:56Z,MERGED,True,16,7,1,https://github.com/koro-xx,Fix al_get_text_dimensions to get exact bounding box,2,[],https://github.com/liballeg/allegro5/pull/636,https://github.com/fatcerberus,14,https://github.com/liballeg/allegro5/pull/636#issuecomment-225468136,"al_get_text_dimensions is supposed to return the text bounding box, but currently only the width is correct (for the height it returns the font line height instead of a tight bounding box).
This fixes it so that bbh is the exact height of the bounding box and bby is the offset from the top.","Right, D3D9 aligns (0,0) with the center of the first pixel when using an identity transform.  I gather they did that to make pixel-perfect drawing easier.  From what I've gleaned D3D10+ behaves like OpenGL, where (0,0) is the top left of the first pixel.
To clarify, I agree that x+w is not correct for rendering--if you're drawing an outlined rectangle.  If you're drawing a solid rectangle (or blitting), then the geometric definition holds.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,636,2016-06-10T20:34:54Z,2016-06-12T04:36:29Z,2016-06-13T02:08:56Z,MERGED,True,16,7,1,https://github.com/koro-xx,Fix al_get_text_dimensions to get exact bounding box,2,[],https://github.com/liballeg/allegro5/pull/636,https://github.com/goob256,15,https://github.com/liballeg/allegro5/pull/636#issuecomment-225468185,"al_get_text_dimensions is supposed to return the text bounding box, but currently only the width is correct (for the height it returns the font line height instead of a tight bounding box).
This fixes it so that bbh is the exact height of the bounding box and bby is the offset from the top.","Yes, but we weren't talking about drawing solid boxes, so that's just random. You want a box to go to the edge of the pixel.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,636,2016-06-10T20:34:54Z,2016-06-12T04:36:29Z,2016-06-13T02:08:56Z,MERGED,True,16,7,1,https://github.com/koro-xx,Fix al_get_text_dimensions to get exact bounding box,2,[],https://github.com/liballeg/allegro5/pull/636,https://github.com/fatcerberus,16,https://github.com/liballeg/allegro5/pull/636#issuecomment-225468307,"al_get_text_dimensions is supposed to return the text bounding box, but currently only the width is correct (for the height it returns the font line height instead of a tight bounding box).
This fixes it so that bbh is the exact height of the bounding box and bby is the offset from the top.","Ah, then yes, you're right.  Sorry, I thought the discussion was about calculating the bounding box (I.e. The mathematical definition), not drawing it.
For drawing the bounding box, assuming thickness 1, the correct coordinates to use are (x+0.5,y+0.5)-(x+w-1,y+h-1).  Spoken from experience. :)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,636,2016-06-10T20:34:54Z,2016-06-12T04:36:29Z,2016-06-13T02:08:56Z,MERGED,True,16,7,1,https://github.com/koro-xx,Fix al_get_text_dimensions to get exact bounding box,2,[],https://github.com/liballeg/allegro5/pull/636,https://github.com/goob256,17,https://github.com/liballeg/allegro5/pull/636#issuecomment-225468345,"al_get_text_dimensions is supposed to return the text bounding box, but currently only the width is correct (for the height it returns the font line height instead of a tight bounding box).
This fixes it so that bbh is the exact height of the bounding box and bby is the offset from the top.","No, you're still wrong. It's x + 0.5, x + w - 0.5;",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,636,2016-06-10T20:34:54Z,2016-06-12T04:36:29Z,2016-06-13T02:08:56Z,MERGED,True,16,7,1,https://github.com/koro-xx,Fix al_get_text_dimensions to get exact bounding box,2,[],https://github.com/liballeg/allegro5/pull/636,https://github.com/goob256,18,https://github.com/liballeg/allegro5/pull/636#issuecomment-225468560,"al_get_text_dimensions is supposed to return the text bounding box, but currently only the width is correct (for the height it returns the font line height instead of a tight bounding box).
This fixes it so that bbh is the exact height of the bounding box and bby is the offset from the top.","What you said about ""D3D9 aligns (0,0) with the center of the first pixel"" is wrong too. 0,0 is the top left edge of the first pixel.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,636,2016-06-10T20:34:54Z,2016-06-12T04:36:29Z,2016-06-13T02:08:56Z,MERGED,True,16,7,1,https://github.com/koro-xx,Fix al_get_text_dimensions to get exact bounding box,2,[],https://github.com/liballeg/allegro5/pull/636,https://github.com/elias-pschernig,19,https://github.com/liballeg/allegro5/pull/636#issuecomment-225468561,"al_get_text_dimensions is supposed to return the text bounding box, but currently only the width is correct (for the height it returns the font line height instead of a tight bounding box).
This fixes it so that bbh is the exact height of the bounding box and bby is the offset from the top.","What goobliata says. I think we need to make http://liballeg.org/a5docs/trunk/primitives.html#pixel-precise-output more prominent, and probably strew some more examples into the documentation. E.g. al_draw_rectangble probably should have an example:
al_draw_rectangle(0.5, 0.5, 2.5, 2.5, 1)
With a picture how it draws a 3x3 square. Because obviously this is very confusing to people :)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,636,2016-06-10T20:34:54Z,2016-06-12T04:36:29Z,2016-06-13T02:08:56Z,MERGED,True,16,7,1,https://github.com/koro-xx,Fix al_get_text_dimensions to get exact bounding box,2,[],https://github.com/liballeg/allegro5/pull/636,https://github.com/fatcerberus,20,https://github.com/liballeg/allegro5/pull/636#issuecomment-225468917,"al_get_text_dimensions is supposed to return the text bounding box, but currently only the width is correct (for the height it returns the font line height instead of a tight bounding box).
This fixes it so that bbh is the exact height of the bounding box and bby is the offset from the top.","Haha, sheesh, I can't even read my own code right.  I was basing my post above on this bit in minisphere:
https://github.com/fatcerberus/minisphere/blob/master/src/engine/screen.c#L686-L689
I subtract 1 there, but only because I've already added the 0.5 to x1.  I do understand how this works, I swear! :P
As for D3D, I had run across this before:
http://drilian.com/2008/11/25/understanding-half-pixel-and-half-texel-offsets/
That seems to imply D3D puts (0,0) at the center of the pixel (unless I read it wrong, which is a distinct possibility today).  I assumed that's why Allegro needed to add the 0.5 translation matrix.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,636,2016-06-10T20:34:54Z,2016-06-12T04:36:29Z,2016-06-13T02:08:56Z,MERGED,True,16,7,1,https://github.com/koro-xx,Fix al_get_text_dimensions to get exact bounding box,2,[],https://github.com/liballeg/allegro5/pull/636,https://github.com/goob256,21,https://github.com/liballeg/allegro5/pull/636#issuecomment-225469030,"al_get_text_dimensions is supposed to return the text bounding box, but currently only the width is correct (for the height it returns the font line height instead of a tight bounding box).
This fixes it so that bbh is the exact height of the bounding box and bby is the offset from the top.","Yeah you read that wrong too, read again. Allegro add's 0.5 transformation because OPENGL pixels are 0, 0 at the center, and we need to be consistent.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,636,2016-06-10T20:34:54Z,2016-06-12T04:36:29Z,2016-06-13T02:08:56Z,MERGED,True,16,7,1,https://github.com/koro-xx,Fix al_get_text_dimensions to get exact bounding box,2,[],https://github.com/liballeg/allegro5/pull/636,https://github.com/fatcerberus,22,https://github.com/liballeg/allegro5/pull/636#issuecomment-225469164,"al_get_text_dimensions is supposed to return the text bounding box, but currently only the width is correct (for the height it returns the font line height instead of a tight bounding box).
This fixes it so that bbh is the exact height of the bounding box and bby is the offset from the top.","Getting back to drawing bounding boxes, I sidestepped the whole +/- 0.5 mess in minisphere's standard library by tweaking the algorithm for thickness compared to Allegro, see here:
https://github.com/fatcerberus/minisphere/blob/sphere-2/assets/system/modules/prim.js#L127-L131",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,636,2016-06-10T20:34:54Z,2016-06-12T04:36:29Z,2016-06-13T02:08:56Z,MERGED,True,16,7,1,https://github.com/koro-xx,Fix al_get_text_dimensions to get exact bounding box,2,[],https://github.com/liballeg/allegro5/pull/636,https://github.com/goob256,23,https://github.com/liballeg/allegro5/pull/636#issuecomment-225475734,"al_get_text_dimensions is supposed to return the text bounding box, but currently only the width is correct (for the height it returns the font line height instead of a tight bounding box).
This fixes it so that bbh is the exact height of the bounding box and bby is the offset from the top.",That's right but I find that to be written confusingly. No wonder why you were confused. I would use x2 = x + w - t; but that's just me.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,636,2016-06-10T20:34:54Z,2016-06-12T04:36:29Z,2016-06-13T02:08:56Z,MERGED,True,16,7,1,https://github.com/koro-xx,Fix al_get_text_dimensions to get exact bounding box,2,[],https://github.com/liballeg/allegro5/pull/636,https://github.com/fatcerberus,24,https://github.com/liballeg/allegro5/pull/636#issuecomment-225475950,"al_get_text_dimensions is supposed to return the text bounding box, but currently only the width is correct (for the height it returns the font line height instead of a tight bounding box).
This fixes it so that bbh is the exact height of the bounding box and bby is the offset from the top.","I'll probably do that, yeah.  The way it's written now is an artifact of me originally truncating x and y to integers, so I just wrote the end points in terms of the already-normalized x1/y1.  I can change it now that I support floats.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,639,2016-06-12T05:17:08Z,2016-06-27T02:59:47Z,2016-07-20T02:14:08Z,CLOSED,False,17,22,3,https://github.com/goob256,Specify the Android toolchain file on the command line now.,1,[],https://github.com/liballeg/allegro5/pull/639,https://github.com/goob256,1,https://github.com/liballeg/allegro5/pull/639,"ANDROID_NDK_TOOLCHAIN_ROOT now has to be specified in an
environment variable. README_ANDROID.txt has been updated.
(same pull request as before on a new branch)","ANDROID_NDK_TOOLCHAIN_ROOT now has to be specified in an
environment variable. README_ANDROID.txt has been updated.
(same pull request as before on a new branch)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,639,2016-06-12T05:17:08Z,2016-06-27T02:59:47Z,2016-07-20T02:14:08Z,CLOSED,False,17,22,3,https://github.com/goob256,Specify the Android toolchain file on the command line now.,1,[],https://github.com/liballeg/allegro5/pull/639,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/639#issuecomment-228644623,"ANDROID_NDK_TOOLCHAIN_ROOT now has to be specified in an
environment variable. README_ANDROID.txt has been updated.
(same pull request as before on a new branch)",Tried it on my system and everything built fine. Merged as 6074080.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,641,2016-06-26T06:49:43Z,2016-07-04T20:51:24Z,2016-07-04T20:51:24Z,MERGED,True,100,67,23,https://github.com/SiegeLord,Switch destructors to using a linked list with backreferences.,2,[],https://github.com/liballeg/allegro5/pull/641,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/641,"This changes the complexity of _al_unregister_destructor from O(N) to O(1).
The backreferences will increase the memory used, but hopefully not
significantly so.
Fixes #640","This changes the complexity of _al_unregister_destructor from O(N) to O(1).
The backreferences will increase the memory used, but hopefully not
significantly so.
Fixes #640",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,641,2016-06-26T06:49:43Z,2016-07-04T20:51:24Z,2016-07-04T20:51:24Z,MERGED,True,100,67,23,https://github.com/SiegeLord,Switch destructors to using a linked list with backreferences.,2,[],https://github.com/liballeg/allegro5/pull/641,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/641#issuecomment-228623443,"This changes the complexity of _al_unregister_destructor from O(N) to O(1).
The backreferences will increase the memory used, but hopefully not
significantly so.
Fixes #640","Timing a program that creates and destroys 100000 sub-bitmaps yields 13.7 seconds before this change and 0.06 seconds after. I tried this with a few examples, and everything seems to be in order. Also ran it through valgrind, and it doesn't appear to leak.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,642,2016-07-04T20:57:46Z,2016-07-04T22:17:59Z,2016-07-04T22:17:59Z,MERGED,True,1,1,1,https://github.com/SiegeLord,Build the debug version of Allegro on travis for extra assertions.,1,[],https://github.com/liballeg/allegro5/pull/642,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/642,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,643,2016-07-05T12:21:29Z,2016-07-17T04:03:16Z,2016-07-20T02:13:48Z,CLOSED,False,2,1,1,https://github.com/goob256,Make al_set_new_window_title work on OS X.,1,[],https://github.com/liballeg/allegro5/pull/643,https://github.com/goob256,1,https://github.com/liballeg/allegro5/pull/643,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,643,2016-07-05T12:21:29Z,2016-07-17T04:03:16Z,2016-07-20T02:13:48Z,CLOSED,False,2,1,1,https://github.com/goob256,Make al_set_new_window_title work on OS X.,1,[],https://github.com/liballeg/allegro5/pull/643,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/643#issuecomment-233163938,,Merged as 52bd7db.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,644,2016-07-05T12:22:27Z,2016-07-17T04:02:40Z,2016-07-20T02:13:48Z,CLOSED,False,9,6,3,https://github.com/goob256,Linux new window title,2,[],https://github.com/liballeg/allegro5/pull/644,https://github.com/goob256,1,https://github.com/liballeg/allegro5/pull/644,The extra system locking that is now done on GTK that wasn't done before is unfortunate but I don't think it's a big deal.,The extra system locking that is now done on GTK that wasn't done before is unfortunate but I don't think it's a big deal.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,644,2016-07-05T12:22:27Z,2016-07-17T04:02:40Z,2016-07-20T02:13:48Z,CLOSED,False,9,6,3,https://github.com/goob256,Linux new window title,2,[],https://github.com/liballeg/allegro5/pull/644,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/644#issuecomment-231549281,The extra system locking that is now done on GTK that wasn't done before is unfortunate but I don't think it's a big deal.,"This works great, thanks! We can merge this after the OSX half of this is fixed.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,644,2016-07-05T12:22:27Z,2016-07-17T04:02:40Z,2016-07-20T02:13:48Z,CLOSED,False,9,6,3,https://github.com/goob256,Linux new window title,2,[],https://github.com/liballeg/allegro5/pull/644,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/644#issuecomment-233163922,The extra system locking that is now done on GTK that wasn't done before is unfortunate but I don't think it's a big deal.,Merged as f12d7aa.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,645,2016-07-09T12:55:58Z,2016-07-09T19:07:14Z,2016-07-20T02:13:41Z,MERGED,True,1,1,1,https://github.com/goob256,lowp fragment shader improves performance a lot on mobile and,1,[],https://github.com/liballeg/allegro5/pull/645,https://github.com/goob256,1,https://github.com/liballeg/allegro5/pull/645,doesn't seem to affect anything.,doesn't seem to affect anything.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,645,2016-07-09T12:55:58Z,2016-07-09T19:07:14Z,2016-07-20T02:13:41Z,MERGED,True,1,1,1,https://github.com/goob256,lowp fragment shader improves performance a lot on mobile and,1,[],https://github.com/liballeg/allegro5/pull/645,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/645#issuecomment-231550434,doesn't seem to affect anything.,"Seems to work fine on my devices, and the internet seems to agree that using lowp for fragment shaders is standard practice.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,648,2016-07-14T12:46:56Z,2016-07-16T16:53:49Z,2016-07-16T22:10:56Z,CLOSED,False,18,17,6,https://github.com/billyquith,Rename LONG_LONG to AL_LONG_LONG,3,[],https://github.com/liballeg/allegro5/pull/648,https://github.com/billyquith,1,https://github.com/liballeg/allegro5/pull/648,"LONG_LONG clashes with other 3rd party library.
Please prefix Allegro types with AL_.

Fix install

This also fixes install as a header is missing from internal.","LONG_LONG clashes with other 3rd party library.
Please prefix Allegro types with AL_.

Fix install

This also fixes install as a header is missing from internal.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,648,2016-07-14T12:46:56Z,2016-07-16T16:53:49Z,2016-07-16T22:10:56Z,CLOSED,False,18,17,6,https://github.com/billyquith,Rename LONG_LONG to AL_LONG_LONG,3,[],https://github.com/liballeg/allegro5/pull/648,https://github.com/elias-pschernig,2,https://github.com/liballeg/allegro5/pull/648#issuecomment-233131333,"LONG_LONG clashes with other 3rd party library.
Please prefix Allegro types with AL_.

Fix install

This also fixes install as a header is missing from internal.",Maybe we can just use int64_t instead?,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,648,2016-07-14T12:46:56Z,2016-07-16T16:53:49Z,2016-07-16T22:10:56Z,CLOSED,False,18,17,6,https://github.com/billyquith,Rename LONG_LONG to AL_LONG_LONG,3,[],https://github.com/liballeg/allegro5/pull/648,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/648#issuecomment-233138766,"LONG_LONG clashes with other 3rd party library.
Please prefix Allegro types with AL_.

Fix install

This also fixes install as a header is missing from internal.","Yeah, let's just use int64_t.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,648,2016-07-14T12:46:56Z,2016-07-16T16:53:49Z,2016-07-16T22:10:56Z,CLOSED,False,18,17,6,https://github.com/billyquith,Rename LONG_LONG to AL_LONG_LONG,3,[],https://github.com/liballeg/allegro5/pull/648,https://github.com/billyquith,4,https://github.com/liballeg/allegro5/pull/648#issuecomment-233138775,"LONG_LONG clashes with other 3rd party library.
Please prefix Allegro types with AL_.

Fix install

This also fixes install as a header is missing from internal.","I don't know the history of this type name. This change fixes my issue. I think standardising types to stdint is a different problem, although one I agree with. Perhaps you could accept this and raise that as a different issue?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,648,2016-07-14T12:46:56Z,2016-07-16T16:53:49Z,2016-07-16T22:10:56Z,CLOSED,False,18,17,6,https://github.com/billyquith,Rename LONG_LONG to AL_LONG_LONG,3,[],https://github.com/liballeg/allegro5/pull/648,https://github.com/SiegeLord,5,https://github.com/liballeg/allegro5/pull/648#issuecomment-233139700,"LONG_LONG clashes with other 3rd party library.
Please prefix Allegro types with AL_.

Fix install

This also fixes install as a header is missing from internal.","Yeah, that's fair. Merged as a779890. Thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,648,2016-07-14T12:46:56Z,2016-07-16T16:53:49Z,2016-07-16T22:10:56Z,CLOSED,False,18,17,6,https://github.com/billyquith,Rename LONG_LONG to AL_LONG_LONG,3,[],https://github.com/liballeg/allegro5/pull/648,https://github.com/billyquith,6,https://github.com/liballeg/allegro5/pull/648#issuecomment-233140080,"LONG_LONG clashes with other 3rd party library.
Please prefix Allegro types with AL_.

Fix install

This also fixes install as a header is missing from internal.","Taking a quick look at the code, I think this define is a compiler patch for missing types, e.g. BCC. Changing it might break other things.
There also seem to be other defines which could clash with user code (e.g. INLINE). Perhaps a review of the API wrt defines and types would be advantageous. Allegro 5.2 is becoming a very nice API, although some bits seem a little over engineered/confusing, some simplification (stdint, define tidy/reduction) would help clarity and avoid these clashes in the future.
Thanks for your efforts.  👍",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,648,2016-07-14T12:46:56Z,2016-07-16T16:53:49Z,2016-07-16T22:10:56Z,CLOSED,False,18,17,6,https://github.com/billyquith,Rename LONG_LONG to AL_LONG_LONG,3,[],https://github.com/liballeg/allegro5/pull/648,https://github.com/beoran,7,https://github.com/liballeg/allegro5/pull/648#issuecomment-233145786,"LONG_LONG clashes with other 3rd party library.
Please prefix Allegro types with AL_.

Fix install

This also fixes install as a header is missing from internal.","Some older compilers don't support stdint. Are we sure we want to drop
support for those?
On 16 Jul 2016 6:36 pm, ""SiegeLord"" notifications@github.com wrote:
Yeah, let's just use int64_t.
—
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub
#648 (comment), or mute
the thread
https://github.com/notifications/unsubscribe-auth/AAEWeeo9cKyfWDGJasFsYmgJb3iii0uMks5qWQiIgaJpZM4JMZai
.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,648,2016-07-14T12:46:56Z,2016-07-16T16:53:49Z,2016-07-16T22:10:56Z,CLOSED,False,18,17,6,https://github.com/billyquith,Rename LONG_LONG to AL_LONG_LONG,3,[],https://github.com/liballeg/allegro5/pull/648,https://github.com/billyquith,8,https://github.com/liballeg/allegro5/pull/648#issuecomment-233146402,"LONG_LONG clashes with other 3rd party library.
Please prefix Allegro types with AL_.

Fix install

This also fixes install as a header is missing from internal.",Don't you already have a wrapper for that? Couldn't you just add stdint types where they are missing? You used to have to do this for MSVC because it was missing. At least it gives a standard for the type names. Once you have this it might simplify other parts of the header configuration.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,648,2016-07-14T12:46:56Z,2016-07-16T16:53:49Z,2016-07-16T22:10:56Z,CLOSED,False,18,17,6,https://github.com/billyquith,Rename LONG_LONG to AL_LONG_LONG,3,[],https://github.com/liballeg/allegro5/pull/648,https://github.com/beoran,9,https://github.com/liballeg/allegro5/pull/648#issuecomment-233146538,"LONG_LONG clashes with other 3rd party library.
Please prefix Allegro types with AL_.

Fix install

This also fixes install as a header is missing from internal.","True, we could supply our own stdint header if unavailable. Although this
might again bring other complications. But yes, I guess it's nicer to be
able to use stdint than Allegro specific integer types.
On 16 Jul 2016 9:19 pm, ""Bill Quith"" notifications@github.com wrote:

Don't you already have a wrapper for that? Couldn't you just add stdint
types where they are missing? You used to have to do this for MSVC because
it was missing. At least it gives a standard for the type names. Once you
have this it might simplify other parts of the header configuration.
—
You are receiving this because you commented.
Reply to this email directly, view it on GitHub
#648 (comment),
or mute the thread
https://github.com/notifications/unsubscribe-auth/AAEWeZ9WgPqFoGqy1Jkxc9HtHZgq6O0xks5qWS6mgaJpZM4JMZai
.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,648,2016-07-14T12:46:56Z,2016-07-16T16:53:49Z,2016-07-16T22:10:56Z,CLOSED,False,18,17,6,https://github.com/billyquith,Rename LONG_LONG to AL_LONG_LONG,3,[],https://github.com/liballeg/allegro5/pull/648,https://github.com/fatcerberus,10,https://github.com/liballeg/allegro5/pull/648#issuecomment-233153627,"LONG_LONG clashes with other 3rd party library.
Please prefix Allegro types with AL_.

Fix install

This also fixes install as a header is missing from internal.","For what it's worth, we already do something similar for stdbool, using the standard header when available and providing a custom one if needed.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,649,2016-07-16T20:56:34Z,2016-07-17T23:59:01Z,2016-07-17T23:59:01Z,MERGED,True,9,16,5,https://github.com/SiegeLord,Replace AL_LONG_LONG with int64_t.,1,[],https://github.com/liballeg/allegro5/pull/649,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/649,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,650,2016-07-16T22:07:41Z,2016-07-17T04:02:15Z,2016-07-17T04:02:15Z,MERGED,True,29,26,1,https://github.com/SiegeLord,Make al_set_new_window_title work on OSX,2,[],https://github.com/liballeg/allegro5/pull/650,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/650,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,650,2016-07-16T22:07:41Z,2016-07-17T04:02:15Z,2016-07-17T04:02:15Z,MERGED,True,29,26,1,https://github.com/SiegeLord,Make al_set_new_window_title work on OSX,2,[],https://github.com/liballeg/allegro5/pull/650,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/650#issuecomment-233153534,,This is a fixed version of #643.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,652,2016-07-17T03:54:10Z,2016-07-17T23:59:01Z,2016-07-17T23:59:01Z,MERGED,True,27,29,7,https://github.com/SiegeLord,OSX mouse movement and warp fixes.,4,[],https://github.com/liballeg/allegro5/pull/652,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/652,"@goobliata, could you test this on your OSX machine? In particular, ex_mouse_warp should work and ex_mouse_events should still register the mouse leaving the display.","@goobliata, could you test this on your OSX machine? In particular, ex_mouse_warp should work and ex_mouse_events should still register the mouse leaving the display.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,652,2016-07-17T03:54:10Z,2016-07-17T23:59:01Z,2016-07-17T23:59:01Z,MERGED,True,27,29,7,https://github.com/SiegeLord,OSX mouse movement and warp fixes.,4,[],https://github.com/liballeg/allegro5/pull/652,https://github.com/goob256,2,https://github.com/liballeg/allegro5/pull/652#issuecomment-233165387,"@goobliata, could you test this on your OSX machine? In particular, ex_mouse_warp should work and ex_mouse_events should still register the mouse leaving the display.","It mostly works, but there is one problem. In ex_mouse_warp, when right clicking normally the red line will go where your mouse would be. On OS X, it initially goes to about the opposite of where your mouse would be (e.g., if your mouse is top left, right clicking puts the line bottom right) and then the line never moves.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,652,2016-07-17T03:54:10Z,2016-07-17T23:59:01Z,2016-07-17T23:59:01Z,MERGED,True,27,29,7,https://github.com/SiegeLord,OSX mouse movement and warp fixes.,4,[],https://github.com/liballeg/allegro5/pull/652,https://github.com/goob256,3,https://github.com/liballeg/allegro5/pull/652#issuecomment-233165421,"@goobliata, could you test this on your OSX machine? In particular, ex_mouse_warp should work and ex_mouse_events should still register the mouse leaving the display.","Actually I never actually checked it out, let me try it again...",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,652,2016-07-17T03:54:10Z,2016-07-17T23:59:01Z,2016-07-17T23:59:01Z,MERGED,True,27,29,7,https://github.com/SiegeLord,OSX mouse movement and warp fixes.,4,[],https://github.com/liballeg/allegro5/pull/652,https://github.com/goob256,4,https://github.com/liballeg/allegro5/pull/652#issuecomment-233165623,"@goobliata, could you test this on your OSX machine? In particular, ex_mouse_warp should work and ex_mouse_events should still register the mouse leaving the display.","It works now that I'm using the right code. I don't see any problems.
On 2016-07-16, at 9:54 PM, SiegeLord notifications@github.com wrote:

@goobliata, could you test this on your OSX machine? In particular, ex_mouse_warp should work and ex_mouse_events should still register the mouse leaving the display.
You can view, comment on, or merge this pull request online at:
#652
Commit Summary
Don't send double mouse move events under OSX.
Fix mouse warp event behavior again.
Fix some formatting.
File Changes
M src/macosx/osxgl.m (24)
M src/macosx/qzmouse.m (8)
Patch Links:
https://github.com/liballeg/allegro5/pull/652.patch
https://github.com/liballeg/allegro5/pull/652.diff
—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,652,2016-07-17T03:54:10Z,2016-07-17T23:59:01Z,2016-07-17T23:59:01Z,MERGED,True,27,29,7,https://github.com/SiegeLord,OSX mouse movement and warp fixes.,4,[],https://github.com/liballeg/allegro5/pull/652,https://github.com/SiegeLord,5,https://github.com/liballeg/allegro5/pull/652#issuecomment-233211791,"@goobliata, could you test this on your OSX machine? In particular, ex_mouse_warp should work and ex_mouse_events should still register the mouse leaving the display.",Thanks for testing this.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,653,2016-07-17T04:15:59Z,2016-07-20T04:36:07Z,2016-07-20T04:37:07Z,MERGED,True,124,80,13,https://github.com/goob256,Add al_backup_dirty_bitmap and al_backup_dirty_bitmaps to give,3,[],https://github.com/liballeg/allegro5/pull/653,https://github.com/goob256,1,https://github.com/liballeg/allegro5/pull/653,"the user some control over when their bitmaps get backed up
to system memory.","the user some control over when their bitmaps get backed up
to system memory.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,653,2016-07-17T04:15:59Z,2016-07-20T04:36:07Z,2016-07-20T04:37:07Z,MERGED,True,124,80,13,https://github.com/goob256,Add al_backup_dirty_bitmap and al_backup_dirty_bitmaps to give,3,[],https://github.com/liballeg/allegro5/pull/653,https://github.com/fatcerberus,2,https://github.com/liballeg/allegro5/pull/653#issuecomment-233164337,"the user some control over when their bitmaps get backed up
to system memory.","Since: 5.2.2

Should that be 5.2.1, or have the binaries for 5.2.1 been built (but not released) already?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,653,2016-07-17T04:15:59Z,2016-07-20T04:36:07Z,2016-07-20T04:37:07Z,MERGED,True,124,80,13,https://github.com/goob256,Add al_backup_dirty_bitmap and al_backup_dirty_bitmaps to give,3,[],https://github.com/liballeg/allegro5/pull/653,https://github.com/goob256,3,https://github.com/liballeg/allegro5/pull/653#issuecomment-233165056,"the user some control over when their bitmaps get backed up
to system memory.","You're right, I've changed it to 5.2.1.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,653,2016-07-17T04:15:59Z,2016-07-20T04:36:07Z,2016-07-20T04:37:07Z,MERGED,True,124,80,13,https://github.com/goob256,Add al_backup_dirty_bitmap and al_backup_dirty_bitmaps to give,3,[],https://github.com/liballeg/allegro5/pull/653,https://github.com/goob256,4,https://github.com/liballeg/allegro5/pull/653#issuecomment-233819944,"the user some control over when their bitmaps get backed up
to system memory.",Anybody have any problem with the API here? I've tested this on Windows/Android and it works same as before.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,653,2016-07-17T04:15:59Z,2016-07-20T04:36:07Z,2016-07-20T04:37:07Z,MERGED,True,124,80,13,https://github.com/goob256,Add al_backup_dirty_bitmap and al_backup_dirty_bitmaps to give,3,[],https://github.com/liballeg/allegro5/pull/653,https://github.com/SiegeLord,5,https://github.com/liballeg/allegro5/pull/653#issuecomment-233832300,"the user some control over when their bitmaps get backed up
to system memory.","No complaints from me, although I'll probably want to make this API unstable for a bit. I can do this myself afterward though.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,654,2016-07-17T04:46:09Z,2016-07-20T04:34:29Z,2016-07-20T04:37:05Z,MERGED,True,21,19,1,https://github.com/goob256,Don't stop and join the timer thread when stopping the last timer.,1,[],https://github.com/liballeg/allegro5/pull/654,https://github.com/goob256,1,https://github.com/liballeg/allegro5/pull/654,"On Windows were al_rest is very inaccurate, al_stop_timer could
cause a long unwanted delay when joining the thread before this.","On Windows were al_rest is very inaccurate, al_stop_timer could
cause a long unwanted delay when joining the thread before this.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,654,2016-07-17T04:46:09Z,2016-07-20T04:34:29Z,2016-07-20T04:37:05Z,MERGED,True,21,19,1,https://github.com/goob256,Don't stop and join the timer thread when stopping the last timer.,1,[],https://github.com/liballeg/allegro5/pull/654,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/654#issuecomment-233541749,"On Windows were al_rest is very inaccurate, al_stop_timer could
cause a long unwanted delay when joining the thread before this.",We should probably add a condition variable inside that thread that waits until _al_vector_size goes above 0 so that we can suspend that thread entirely.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,654,2016-07-17T04:46:09Z,2016-07-20T04:34:29Z,2016-07-20T04:37:05Z,MERGED,True,21,19,1,https://github.com/goob256,Don't stop and join the timer thread when stopping the last timer.,1,[],https://github.com/liballeg/allegro5/pull/654,https://github.com/goob256,3,https://github.com/liballeg/allegro5/pull/654#issuecomment-233725702,"On Windows were al_rest is very inaccurate, al_stop_timer could
cause a long unwanted delay when joining the thread before this.","I did that, just have to test it when I get back to my Windows machine.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,654,2016-07-17T04:46:09Z,2016-07-20T04:34:29Z,2016-07-20T04:37:05Z,MERGED,True,21,19,1,https://github.com/goob256,Don't stop and join the timer thread when stopping the last timer.,1,[],https://github.com/liballeg/allegro5/pull/654,https://github.com/goob256,4,https://github.com/liballeg/allegro5/pull/654#issuecomment-233819740,"On Windows were al_rest is very inaccurate, al_stop_timer could
cause a long unwanted delay when joining the thread before this.","Didn't find any problems on Windows, Mac or Linux in my games.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,654,2016-07-17T04:46:09Z,2016-07-20T04:34:29Z,2016-07-20T04:37:05Z,MERGED,True,21,19,1,https://github.com/goob256,Don't stop and join the timer thread when stopping the last timer.,1,[],https://github.com/liballeg/allegro5/pull/654,https://github.com/SiegeLord,5,https://github.com/liballeg/allegro5/pull/654#issuecomment-233832092,"On Windows were al_rest is very inaccurate, al_stop_timer could
cause a long unwanted delay when joining the thread before this.","This looks great, I'm glad we could fix this without adding more API.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,655,2016-07-18T12:49:01Z,2016-07-18T13:02:47Z,2016-07-18T13:10:29Z,CLOSED,False,32,46,2,https://github.com/billyquith,Move macro READ3BYTES/WRITE3BYTES into memdraw.c as only used there,6,[],https://github.com/liballeg/allegro5/pull/655,https://github.com/billyquith,1,https://github.com/liballeg/allegro5/pull/655,This change moves a few macros into an implementation file which the only place they are used. This avoids use API pollution with macros.,This change moves a few macros into an implementation file which the only place they are used. This avoids use API pollution with macros.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,655,2016-07-18T12:49:01Z,2016-07-18T13:02:47Z,2016-07-18T13:10:29Z,CLOSED,False,32,46,2,https://github.com/billyquith,Move macro READ3BYTES/WRITE3BYTES into memdraw.c as only used there,6,[],https://github.com/liballeg/allegro5/pull/655,https://github.com/billyquith,2,https://github.com/liballeg/allegro5/pull/655#issuecomment-233321837,This change moves a few macros into an implementation file which the only place they are used. This avoids use API pollution with macros.,They are used in internal header on a platform other than mine.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,656,2016-07-18T13:20:44Z,2016-07-30T05:14:31Z,2016-07-30T05:14:31Z,CLOSED,False,27,32,4,https://github.com/billyquith,Move macros to implementation file & namespace other macros.,10,[],https://github.com/liballeg/allegro5/pull/656,https://github.com/billyquith,1,https://github.com/liballeg/allegro5/pull/656,"READ3BYTES macro prefixed with AL_
bmp_* macros moves to only file they are used.","READ3BYTES macro prefixed with AL_
bmp_* macros moves to only file they are used.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,656,2016-07-18T13:20:44Z,2016-07-30T05:14:31Z,2016-07-30T05:14:31Z,CLOSED,False,27,32,4,https://github.com/billyquith,Move macros to implementation file & namespace other macros.,10,[],https://github.com/liballeg/allegro5/pull/656,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/656#issuecomment-233832474,"READ3BYTES macro prefixed with AL_
bmp_* macros moves to only file they are used.","This looks great, thanks. Could you change the prefix for those macros to _AL instead, as they're in principle private.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,656,2016-07-18T13:20:44Z,2016-07-30T05:14:31Z,2016-07-30T05:14:31Z,CLOSED,False,27,32,4,https://github.com/billyquith,Move macros to implementation file & namespace other macros.,10,[],https://github.com/liballeg/allegro5/pull/656,https://github.com/billyquith,3,https://github.com/liballeg/allegro5/pull/656#issuecomment-235891478,"READ3BYTES macro prefixed with AL_
bmp_* macros moves to only file they are used.",There we go. Apologies for the mess. I will use the branch workflow next time!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,656,2016-07-18T13:20:44Z,2016-07-30T05:14:31Z,2016-07-30T05:14:31Z,CLOSED,False,27,32,4,https://github.com/billyquith,Move macros to implementation file & namespace other macros.,10,[],https://github.com/liballeg/allegro5/pull/656,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/656#issuecomment-236343658,"READ3BYTES macro prefixed with AL_
bmp_* macros moves to only file they are used.","No worries, thanks for these changes! Merged as  349cedc.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,657,2016-07-22T10:51:56Z,2016-07-28T01:25:41Z,2016-10-16T07:01:06Z,MERGED,True,176,34,6,https://github.com/goob256,Add ALLEGRO_GLYPH structure and al_get_glyph.,6,[],https://github.com/liballeg/allegro5/pull/657,https://github.com/goob256,1,https://github.com/liballeg/allegro5/pull/657,"The structure contains all the info needed (including the bitmap)
to draw text. The ttf addon's render_glyph was used to make the
vtable function for the ttf addon.
This should allow the user the draw their own text. This hasn't
been tested much, I'm just looking for feedback on the API
right now.","The structure contains all the info needed (including the bitmap)
to draw text. The ttf addon's render_glyph was used to make the
vtable function for the ttf addon.
This should allow the user the draw their own text. This hasn't
been tested much, I'm just looking for feedback on the API
right now.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,657,2016-07-22T10:51:56Z,2016-07-28T01:25:41Z,2016-10-16T07:01:06Z,MERGED,True,176,34,6,https://github.com/goob256,Add ALLEGRO_GLYPH structure and al_get_glyph.,6,[],https://github.com/liballeg/allegro5/pull/657,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/657#issuecomment-234750306,"The structure contains all the info needed (including the bitmap)
to draw text. The ttf addon's render_glyph was used to make the
vtable function for the ttf addon.
This should allow the user the draw their own text. This hasn't
been tested much, I'm just looking for feedback on the API
right now.","I think it'd be cleaner to stick the advance into the glyph structure itself. Additionally, that'd let you return a bool to say if glyph has been found or not.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,657,2016-07-22T10:51:56Z,2016-07-28T01:25:41Z,2016-10-16T07:01:06Z,MERGED,True,176,34,6,https://github.com/goob256,Add ALLEGRO_GLYPH structure and al_get_glyph.,6,[],https://github.com/liballeg/allegro5/pull/657,https://github.com/goob256,3,https://github.com/liballeg/allegro5/pull/657#issuecomment-234752455,"The structure contains all the info needed (including the bitmap)
to draw text. The ttf addon's render_glyph was used to make the
vtable function for the ttf addon.
This should allow the user the draw their own text. This hasn't
been tested much, I'm just looking for feedback on the API
right now.","I moved advance into the structure, documented things and used it in ex_ttf.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,657,2016-07-22T10:51:56Z,2016-07-28T01:25:41Z,2016-10-16T07:01:06Z,MERGED,True,176,34,6,https://github.com/goob256,Add ALLEGRO_GLYPH structure and al_get_glyph.,6,[],https://github.com/liballeg/allegro5/pull/657,https://github.com/goob256,4,https://github.com/liballeg/allegro5/pull/657#issuecomment-235234121,"The structure contains all the info needed (including the bitmap)
to draw text. The ttf addon's render_glyph was used to make the
vtable function for the ttf addon.
This should allow the user the draw their own text. This hasn't
been tested much, I'm just looking for feedback on the API
right now.","So besides those changes which I've made, how does it look? It passes all font tests. I'm open to suggestions on making it just right before committing.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,657,2016-07-22T10:51:56Z,2016-07-28T01:25:41Z,2016-10-16T07:01:06Z,MERGED,True,176,34,6,https://github.com/goob256,Add ALLEGRO_GLYPH structure and al_get_glyph.,6,[],https://github.com/liballeg/allegro5/pull/657,https://github.com/SiegeLord,5,https://github.com/liballeg/allegro5/pull/657#issuecomment-235306128,"The structure contains all the info needed (including the bitmap)
to draw text. The ttf addon's render_glyph was used to make the
vtable function for the ttf addon.
This should allow the user the draw their own text. This hasn't
been tested much, I'm just looking for feedback on the API
right now.","I think it looks fine. I think the only concern I have is that by using a by-value struct, we'll be making it very tricky to ever add fields to it if we for some reason decide to return more information.
But I don't think that concern is big enough to fix now, we can just add it as unstable and think about it some more at a later point.
Maybe one change that should be made is that we should require that the struct is zeroed out before being sent to the function? This'll help us upgrade the API in the future.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,658,2016-07-31T03:59:53Z,2016-07-31T18:12:08Z,2016-07-31T18:12:08Z,MERGED,True,67,36,12,https://github.com/SiegeLord,Mark the backup and the glyph API as unstable.,1,[],https://github.com/liballeg/allegro5/pull/658,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/658,"Also, split out some internals from allegro_font.h into an internal header, so we don't have to install aintern_list.h.","Also, split out some internals from allegro_font.h into an internal header, so we don't have to install aintern_list.h.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,659,2016-07-31T19:11:41Z,2016-07-31T19:51:39Z,2016-07-31T19:51:39Z,MERGED,True,56,1,2,https://github.com/SiegeLord,Add an install test to catch us breaking the installation code.,1,[],https://github.com/liballeg/allegro5/pull/659,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/659,Fixes #503.,Fixes #503.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,661,2016-08-06T12:39:14Z,,2016-09-10T13:54:00Z,OPEN,False,303,21,6,https://github.com/vkensou,embed qt and allegro in d3d,17,[],https://github.com/liballeg/allegro5/pull/661,https://github.com/vkensou,1,https://github.com/liballeg/allegro5/pull/661,"I post a topic on allegro forum https://www.allegro.cc/forums/thread/616419.
It only work in d3d. I don't know how to resize the display in opengl.
It works like this:","I post a topic on allegro forum https://www.allegro.cc/forums/thread/616419.
It only work in d3d. I don't know how to resize the display in opengl.
It works like this:",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,661,2016-08-06T12:39:14Z,,2016-09-10T13:54:00Z,OPEN,False,303,21,6,https://github.com/vkensou,embed qt and allegro in d3d,17,[],https://github.com/liballeg/allegro5/pull/661,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/661#issuecomment-238034529,"I post a topic on allegro forum https://www.allegro.cc/forums/thread/616419.
It only work in d3d. I don't know how to resize the display in opengl.
It works like this:","This is interesting, have you tested how this handles display resets? E.g. start your program, press ctrl-alt-delete, cancel out of that and then see if your program still works?",True,{'THUMBS_UP': ['https://github.com/vkensou']}
liballeg/allegro5,https://github.com/liballeg/allegro5,661,2016-08-06T12:39:14Z,,2016-09-10T13:54:00Z,OPEN,False,303,21,6,https://github.com/vkensou,embed qt and allegro in d3d,17,[],https://github.com/liballeg/allegro5/pull/661,https://github.com/vkensou,3,https://github.com/liballeg/allegro5/pull/661#issuecomment-238061461,"I post a topic on allegro forum https://www.allegro.cc/forums/thread/616419.
It only work in d3d. I don't know how to resize the display in opengl.
It works like this:",Oh... I didn't handle this. let me fix it.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,661,2016-08-06T12:39:14Z,,2016-09-10T13:54:00Z,OPEN,False,303,21,6,https://github.com/vkensou,embed qt and allegro in d3d,17,[],https://github.com/liballeg/allegro5/pull/661,https://github.com/vkensou,4,https://github.com/liballeg/allegro5/pull/661#issuecomment-238070231,"I post a topic on allegro forum https://www.allegro.cc/forums/thread/616419.
It only work in d3d. I don't know how to resize the display in opengl.
It works like this:","I made a new commit. Now it could handle device lost. But there are some limits. If let allegro use existing  window, you must handle device lost and resize window by yourself. So people must create their own qt or mfc widget. I made a qt widget to help others, so where can i upload it?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,661,2016-08-06T12:39:14Z,,2016-09-10T13:54:00Z,OPEN,False,303,21,6,https://github.com/vkensou,embed qt and allegro in d3d,17,[],https://github.com/liballeg/allegro5/pull/661,https://github.com/SiegeLord,5,https://github.com/liballeg/allegro5/pull/661#issuecomment-238446399,"I post a topic on allegro forum https://www.allegro.cc/forums/thread/616419.
It only work in d3d. I don't know how to resize the display in opengl.
It works like this:","How big is this widget? If it's small enough, we could make a ex_qt example that uses this.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,661,2016-08-06T12:39:14Z,,2016-09-10T13:54:00Z,OPEN,False,303,21,6,https://github.com/vkensou,embed qt and allegro in d3d,17,[],https://github.com/liballeg/allegro5/pull/661,https://github.com/vkensou,6,https://github.com/liballeg/allegro5/pull/661#issuecomment-238462301,"I post a topic on allegro forum https://www.allegro.cc/forums/thread/616419.
It only work in d3d. I don't know how to resize the display in opengl.
It works like this:",The widget is not big. Just 2 files and less than 200 lines. But it dependence qt.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,661,2016-08-06T12:39:14Z,,2016-09-10T13:54:00Z,OPEN,False,303,21,6,https://github.com/vkensou,embed qt and allegro in d3d,17,[],https://github.com/liballeg/allegro5/pull/661,https://github.com/SiegeLord,7,https://github.com/liballeg/allegro5/pull/661#issuecomment-238462536,"I post a topic on allegro forum https://www.allegro.cc/forums/thread/616419.
It only work in d3d. I don't know how to resize the display in opengl.
It works like this:","That's fine, we have an ex_ogre that depends on Ogre3D. It'll be an optional dependency.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,661,2016-08-06T12:39:14Z,,2016-09-10T13:54:00Z,OPEN,False,303,21,6,https://github.com/vkensou,embed qt and allegro in d3d,17,[],https://github.com/liballeg/allegro5/pull/661,https://github.com/vkensou,8,https://github.com/liballeg/allegro5/pull/661#issuecomment-238519901,"I post a topic on allegro forum https://www.allegro.cc/forums/thread/616419.
It only work in d3d. I don't know how to resize the display in opengl.
It works like this:","So, should I upload a ex_qt.cpp? But I don't know how to use cmake.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,661,2016-08-06T12:39:14Z,,2016-09-10T13:54:00Z,OPEN,False,303,21,6,https://github.com/vkensou,embed qt and allegro in d3d,17,[],https://github.com/liballeg/allegro5/pull/661,https://github.com/vkensou,9,https://github.com/liballeg/allegro5/pull/661#issuecomment-238885347,"I post a topic on allegro forum https://www.allegro.cc/forums/thread/616419.
It only work in d3d. I don't know how to resize the display in opengl.
It works like this:",I upload 3 new files. Compile and run succeed in qt 5.5.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,661,2016-08-06T12:39:14Z,,2016-09-10T13:54:00Z,OPEN,False,303,21,6,https://github.com/vkensou,embed qt and allegro in d3d,17,[],https://github.com/liballeg/allegro5/pull/661,https://github.com/vkensou,10,https://github.com/liballeg/allegro5/pull/661#issuecomment-239619379,"I post a topic on allegro forum https://www.allegro.cc/forums/thread/616419.
It only work in d3d. I don't know how to resize the display in opengl.
It works like this:",There is another problem. My widget can't render bitmap unless use ALLEGRO_MEMORY_BITMAP. I am fixing it....,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,661,2016-08-06T12:39:14Z,,2016-09-10T13:54:00Z,OPEN,False,303,21,6,https://github.com/vkensou,embed qt and allegro in d3d,17,[],https://github.com/liballeg/allegro5/pull/661,https://github.com/vkensou,11,https://github.com/liballeg/allegro5/pull/661#issuecomment-239654115,"I post a topic on allegro forum https://www.allegro.cc/forums/thread/616419.
It only work in d3d. I don't know how to resize the display in opengl.
It works like this:","lol
I have fixed that problem. Now my widget could render bitmap normally.
I added a init() method in QAllegroCanvas.    So we can load bitmap or something in this method.
Don't load bitmap in QAllegroCanvas' Constructor. I call init() in showEvent(), and it worked.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,661,2016-08-06T12:39:14Z,,2016-09-10T13:54:00Z,OPEN,False,303,21,6,https://github.com/vkensou,embed qt and allegro in d3d,17,[],https://github.com/liballeg/allegro5/pull/661,https://github.com/goob256,12,https://github.com/liballeg/allegro5/pull/661#issuecomment-242582955,"I post a topic on allegro forum https://www.allegro.cc/forums/thread/616419.
It only work in d3d. I don't know how to resize the display in opengl.
It works like this:",This could get the window size from the HWND and use it rather than the values passed to al_create_display. Those would be ignored kind of like they are for FULLSCREEN_WINDOW.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,661,2016-08-06T12:39:14Z,,2016-09-10T13:54:00Z,OPEN,False,303,21,6,https://github.com/vkensou,embed qt and allegro in d3d,17,[],https://github.com/liballeg/allegro5/pull/661,https://github.com/vkensou,13,https://github.com/liballeg/allegro5/pull/661#issuecomment-242606336,"I post a topic on allegro forum https://www.allegro.cc/forums/thread/616419.
It only work in d3d. I don't know how to resize the display in opengl.
It works like this:",You mean ignore FULLSCREEN_WINDOW when use exist window?,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,661,2016-08-06T12:39:14Z,,2016-09-10T13:54:00Z,OPEN,False,303,21,6,https://github.com/vkensou,embed qt and allegro in d3d,17,[],https://github.com/liballeg/allegro5/pull/661,https://github.com/goob256,14,https://github.com/liballeg/allegro5/pull/661#issuecomment-242606650,"I post a topic on allegro forum https://www.allegro.cc/forums/thread/616419.
It only work in d3d. I don't know how to resize the display in opengl.
It works like this:",No I meant do you think it would be better if the patch determined the size of the ALLEGRO_DISPLAY based on the HWND the user uses?,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,661,2016-08-06T12:39:14Z,,2016-09-10T13:54:00Z,OPEN,False,303,21,6,https://github.com/vkensou,embed qt and allegro in d3d,17,[],https://github.com/liballeg/allegro5/pull/661,https://github.com/goob256,15,https://github.com/liballeg/allegro5/pull/661#issuecomment-242606744,"I post a topic on allegro forum https://www.allegro.cc/forums/thread/616419.
It only work in d3d. I don't know how to resize the display in opengl.
It works like this:",There are functions like GetWindowRect that can get the size from an HWND.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,661,2016-08-06T12:39:14Z,,2016-09-10T13:54:00Z,OPEN,False,303,21,6,https://github.com/vkensou,embed qt and allegro in d3d,17,[],https://github.com/liballeg/allegro5/pull/661,https://github.com/vkensou,16,https://github.com/liballeg/allegro5/pull/661#issuecomment-245280760,"I post a topic on allegro forum https://www.allegro.cc/forums/thread/616419.
It only work in d3d. I don't know how to resize the display in opengl.
It works like this:","I have make a new commit. It worked.
m_display = al_create_display(0, 0);
int w = al_get_display_width(m_display);
int h = al_get_display_height(m_display);

The code will get right width and height.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,661,2016-08-06T12:39:14Z,,2016-09-10T13:54:00Z,OPEN,False,303,21,6,https://github.com/vkensou,embed qt and allegro in d3d,17,[],https://github.com/liballeg/allegro5/pull/661,https://github.com/goob256,17,https://github.com/liballeg/allegro5/pull/661#issuecomment-245494790,"I post a topic on allegro forum https://www.allegro.cc/forums/thread/616419.
It only work in d3d. I don't know how to resize the display in opengl.
It works like this:",Thanks for changing that!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,661,2016-08-06T12:39:14Z,,2016-09-10T13:54:00Z,OPEN,False,303,21,6,https://github.com/vkensou,embed qt and allegro in d3d,17,[],https://github.com/liballeg/allegro5/pull/661,https://github.com/vkensou,18,https://github.com/liballeg/allegro5/pull/661#issuecomment-246112959,"I post a topic on allegro forum https://www.allegro.cc/forums/thread/616419.
It only work in d3d. I don't know how to resize the display in opengl.
It works like this:","A new commit!
Fix QAllegroCanvas can't init al_display's size correctly.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,662,2016-08-14T04:00:06Z,,2019-10-10T23:08:35Z,OPEN,False,183,39,1,https://github.com/SiegeLord,OSX joystick enumeration changes,1,[],https://github.com/liballeg/allegro5/pull/662,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/662,"This is a revival of the currently reverted OSX changes, so we don't forget about them. There's some issue with the XBox controllers.
(cherry picked from commit 0828211)","This is a revival of the currently reverted OSX changes, so we don't forget about them. There's some issue with the XBox controllers.
(cherry picked from commit 0828211)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,662,2016-08-14T04:00:06Z,,2019-10-10T23:08:35Z,OPEN,False,183,39,1,https://github.com/SiegeLord,OSX joystick enumeration changes,1,[],https://github.com/liballeg/allegro5/pull/662,https://github.com/fatcerberus,2,https://github.com/liballeg/allegro5/pull/662#issuecomment-243914335,"This is a revival of the currently reverted OSX changes, so we don't forget about them. There's some issue with the XBox controllers.
(cherry picked from commit 0828211)",Does the bug only affect OS X/macOS?  I'm using an Xbox One controller on Windows with Allegro 5.2.1 and it seems to work fine.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,662,2016-08-14T04:00:06Z,,2019-10-10T23:08:35Z,OPEN,False,183,39,1,https://github.com/SiegeLord,OSX joystick enumeration changes,1,[],https://github.com/liballeg/allegro5/pull/662,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/662#issuecomment-243962051,"This is a revival of the currently reverted OSX changes, so we don't forget about them. There's some issue with the XBox controllers.
(cherry picked from commit 0828211)","This is a re-introduction of the change that got reverted, so there's no bug per se. But either way, yes, it only affected OSX.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,662,2016-08-14T04:00:06Z,,2019-10-10T23:08:35Z,OPEN,False,183,39,1,https://github.com/SiegeLord,OSX joystick enumeration changes,1,[],https://github.com/liballeg/allegro5/pull/662,https://github.com/goob256,4,https://github.com/liballeg/allegro5/pull/662#issuecomment-289585310,"This is a revival of the currently reverted OSX changes, so we don't forget about them. There's some issue with the XBox controllers.
(cherry picked from commit 0828211)",What needs to be done here? I recall some joysticks worked better with this code than the reverted code... what was it that did/didn't work then/now? I might have a joystick somewhere that exhibits the problems.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,662,2016-08-14T04:00:06Z,,2019-10-10T23:08:35Z,OPEN,False,183,39,1,https://github.com/SiegeLord,OSX joystick enumeration changes,1,[],https://github.com/liballeg/allegro5/pull/662,https://github.com/SiegeLord,5,https://github.com/liballeg/allegro5/pull/662#issuecomment-303010832,"This is a revival of the currently reverted OSX changes, so we don't forget about them. There's some issue with the XBox controllers.
(cherry picked from commit 0828211)",Here's the conversation that caused the reversion: 0828211 It appeared that XBox controller didn't work for you with this patch :).,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,662,2016-08-14T04:00:06Z,,2019-10-10T23:08:35Z,OPEN,False,183,39,1,https://github.com/SiegeLord,OSX joystick enumeration changes,1,[],https://github.com/liballeg/allegro5/pull/662,https://github.com/goob256,6,https://github.com/liballeg/allegro5/pull/662#issuecomment-303177712,"This is a revival of the currently reverted OSX changes, so we don't forget about them. There's some issue with the XBox controllers.
(cherry picked from commit 0828211)",I've since noticed that even Windows messes up my joysticks. I'll have a trigger where an axis is supposed to be etc. Right now all I have is Xbox and a Logitech F710 (which is like an Xbox but has a directinput mode too) and a couple bluetooth controllers. I'll take a look how they work across platforms but it'll probably be next week.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,662,2016-08-14T04:00:06Z,,2019-10-10T23:08:35Z,OPEN,False,183,39,1,https://github.com/SiegeLord,OSX joystick enumeration changes,1,[],https://github.com/liballeg/allegro5/pull/662,https://github.com/fatcerberus,7,https://github.com/liballeg/allegro5/pull/662#issuecomment-303186837,"This is a revival of the currently reverted OSX changes, so we don't forget about them. There's some issue with the XBox controllers.
(cherry picked from commit 0828211)","Don't know if this is your issue, but I vaguely recall that Windows normally treats the L and R triggers on an Xbox controller as a single axis.  Each trigger cancels out the other so that it's impossible to tell if both are pressed simultaneously.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,662,2016-08-14T04:00:06Z,,2019-10-10T23:08:35Z,OPEN,False,183,39,1,https://github.com/SiegeLord,OSX joystick enumeration changes,1,[],https://github.com/liballeg/allegro5/pull/662,https://github.com/goob256,8,https://github.com/liballeg/allegro5/pull/662#issuecomment-303200678,"This is a revival of the currently reverted OSX changes, so we don't forget about them. There's some issue with the XBox controllers.
(cherry picked from commit 0828211)",The issue I had was the right stick showed up as a trigger plus one axis of a stick.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,662,2016-08-14T04:00:06Z,,2019-10-10T23:08:35Z,OPEN,False,183,39,1,https://github.com/SiegeLord,OSX joystick enumeration changes,1,[],https://github.com/liballeg/allegro5/pull/662,https://github.com/goob256,9,https://github.com/liballeg/allegro5/pull/662#issuecomment-304547447,"This is a revival of the currently reverted OSX changes, so we don't forget about them. There's some issue with the XBox controllers.
(cherry picked from commit 0828211)","I had a look at this. I can't do a whole lot because I don't have any of the type of joysticks that Todd Cope was using (with multiple joysticks on one device.) I dunno if it's correct but I have a hunch we need to check the Collection type when enumerating elements and not use all collections. I made some changes to this pull request here: https://github.com/goobliata/allegro5/tree/osx_joysticks. I found if I check for Application collections (Logical collections works as well) it'll work with my gamepads. The buttons are ordered oddly though, so I also sort them by usage which gives the same layout as before Todd's patch.
Anyway, not sure this is much use unless someone can test/fix it with one of those Wii U controllers or something similar.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,662,2016-08-14T04:00:06Z,,2019-10-10T23:08:35Z,OPEN,False,183,39,1,https://github.com/SiegeLord,OSX joystick enumeration changes,1,[],https://github.com/liballeg/allegro5/pull/662,https://github.com/NewCreature,10,https://github.com/liballeg/allegro5/pull/662#issuecomment-540834704,"This is a revival of the currently reverted OSX changes, so we don't forget about them. There's some issue with the XBox controllers.
(cherry picked from commit 0828211)","I tested the version of the patch located here: https://github.com/goobliata/allegro5/tree/osx_joysticks.
It is working perfectly with my Mayflash Wii U Pro Controller adapter. Each controller is detected as a separate joystick in Allegro as expected.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,665,2016-08-15T17:27:44Z,2016-08-21T02:26:23Z,2016-10-16T07:00:42Z,MERGED,True,40,3,2,https://github.com/goob256,Android clipboard,2,[],https://github.com/liballeg/allegro5/pull/665,https://github.com/goob256,1,https://github.com/liballeg/allegro5/pull/665,Fixes bugs with clipboard on Android.,Fixes bugs with clipboard on Android.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,665,2016-08-15T17:27:44Z,2016-08-21T02:26:23Z,2016-10-16T07:00:42Z,MERGED,True,40,3,2,https://github.com/goob256,Android clipboard,2,[],https://github.com/liballeg/allegro5/pull/665,https://github.com/goob256,2,https://github.com/liballeg/allegro5/pull/665#issuecomment-240765417,Fixes bugs with clipboard on Android.,"Travis errors seem unrelated to the change, not sure what's wrong there but Linux tests are failing.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,665,2016-08-15T17:27:44Z,2016-08-21T02:26:23Z,2016-10-16T07:00:42Z,MERGED,True,40,3,2,https://github.com/goob256,Android clipboard,2,[],https://github.com/liballeg/allegro5/pull/665,https://github.com/fatcerberus,3,https://github.com/liballeg/allegro5/pull/665#issuecomment-240773219,Fixes bugs with clipboard on Android.,"It looks like the Linux builds are locking up for some reason.  The last few lines of every Linux build are:

  inflating: bmpsuite-2.4/readme.txt  
X Error of failed request:  GLXBadRenderRequest
  Major opcode of failed request:  147 (GLX)
  Minor opcode of failed request:  1 (X_GLXRender)
  Serial number of failed request:  31
  Current serial number in output stream:  32


No output has been received in the last 10m0s, this potentially indicates a stalled build or something wrong with the build itself.

The build has been terminated",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,667,2016-08-18T15:39:31Z,2016-08-25T23:19:46Z,2016-09-08T04:51:45Z,MERGED,True,19,4,3,https://github.com/goob256,Add WANT_GLES3 CMake option,4,[],https://github.com/liballeg/allegro5/pull/667,https://github.com/goob256,1,https://github.com/liballeg/allegro5/pull/667,This hides multisampled render surfaces behind WANT_GLES3 on Android.,This hides multisampled render surfaces behind WANT_GLES3 on Android.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,667,2016-08-18T15:39:31Z,2016-08-25T23:19:46Z,2016-09-08T04:51:45Z,MERGED,True,19,4,3,https://github.com/goob256,Add WANT_GLES3 CMake option,4,[],https://github.com/liballeg/allegro5/pull/667,https://github.com/goob256,2,https://github.com/liballeg/allegro5/pull/667#issuecomment-241235193,This hides multisampled render surfaces behind WANT_GLES3 on Android.,"Any objections to this? It fixes the problems I mentioned on Kindle Fire tablets and probably others, and shouldn't be too difficult to use -DWANT_GLES3=on.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,667,2016-08-18T15:39:31Z,2016-08-25T23:19:46Z,2016-09-08T04:51:45Z,MERGED,True,19,4,3,https://github.com/goob256,Add WANT_GLES3 CMake option,4,[],https://github.com/liballeg/allegro5/pull/667,https://github.com/elias-pschernig,3,https://github.com/liballeg/allegro5/pull/667#issuecomment-241236167,This hides multisampled render surfaces behind WANT_GLES3 on Android.,"Right now if multi-sampling is not supported (because the OpenGL extension is missing, which is quite common) it fails silently - I don't think we need a debug message in the GLES3 case either. I'm just always a bit afraid of those messages we print every frame.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,667,2016-08-18T15:39:31Z,2016-08-25T23:19:46Z,2016-09-08T04:51:45Z,MERGED,True,19,4,3,https://github.com/goob256,Add WANT_GLES3 CMake option,4,[],https://github.com/liballeg/allegro5/pull/667,https://github.com/goob256,4,https://github.com/liballeg/allegro5/pull/667#issuecomment-241237181,This hides multisampled render surfaces behind WANT_GLES3 on Android.,OK I did error checking in case of missing support for multisampling.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,667,2016-08-18T15:39:31Z,2016-08-25T23:19:46Z,2016-09-08T04:51:45Z,MERGED,True,19,4,3,https://github.com/goob256,Add WANT_GLES3 CMake option,4,[],https://github.com/liballeg/allegro5/pull/667,https://github.com/elias-pschernig,5,https://github.com/liballeg/allegro5/pull/667#issuecomment-241268453,This hides multisampled render surfaces behind WANT_GLES3 on Android.,"Thanks! But I meant, the failing silently is good, so just remove the debug messages. Multi-sampling in my game is not a critical feature, I just want it on when it is available as the game looks much better. With your change now if I turn on multi-sampling and compile without GLES3 it just breaks, right? Or maybe I misunderstand what you did with that bool return value.
I figure what I have to do eventually is actually this:
https://developer.android.com/guide/topics/graphics/opengl.html#version-check
I.e. check the version at run-time. Because I can't really disable GLES3 at compile-time, but I need the game to work on GLES2 only devices, the only way is a runtime check.
Anyway, I'll implement that once I get to it, so I'm fine with applying your commit, but please clarify what the new error check is for.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,667,2016-08-18T15:39:31Z,2016-08-25T23:19:46Z,2016-09-08T04:51:45Z,MERGED,True,19,4,3,https://github.com/goob256,Add WANT_GLES3 CMake option,4,[],https://github.com/liballeg/allegro5/pull/667,https://github.com/goob256,6,https://github.com/liballeg/allegro5/pull/667#issuecomment-241281563,This hides multisampled render surfaces behind WANT_GLES3 on Android.,"Yeah that makes sense. I reverted those changes, kept the debug prints out and kept the warnings fixed.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,669,2016-08-25T13:13:22Z,2016-08-25T23:18:19Z,2016-08-26T10:07:47Z,MERGED,True,2,1,2,https://github.com/1Hyena,Disable DEPTH_TEST Render State Before Drawing HUD,2,[],https://github.com/liballeg/allegro5/pull/669,https://github.com/1Hyena,1,https://github.com/liballeg/allegro5/pull/669,When playing around with the ex_camera example I ran into a weird bug that made the checkerboard to be drawn on top of the debug texts in the upper left corner of the screen. This happened when the control style was switched to the spaceship or airplane mode and I moved the camera halfway inside the checkerboard. Since I debugged the situation for quite some time I figured that I should better commit a fix so that others would not waste their time on debugging the same exact issue in the future.,When playing around with the ex_camera example I ran into a weird bug that made the checkerboard to be drawn on top of the debug texts in the upper left corner of the screen. This happened when the control style was switched to the spaceship or airplane mode and I moved the camera halfway inside the checkerboard. Since I debugged the situation for quite some time I figured that I should better commit a fix so that others would not waste their time on debugging the same exact issue in the future.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,669,2016-08-25T13:13:22Z,2016-08-25T23:18:19Z,2016-08-26T10:07:47Z,MERGED,True,2,1,2,https://github.com/1Hyena,Disable DEPTH_TEST Render State Before Drawing HUD,2,[],https://github.com/liballeg/allegro5/pull/669,https://github.com/goob256,2,https://github.com/liballeg/allegro5/pull/669#issuecomment-242576487,When playing around with the ex_camera example I ran into a weird bug that made the checkerboard to be drawn on top of the debug texts in the upper left corner of the screen. This happened when the control style was switched to the spaceship or airplane mode and I moved the camera halfway inside the checkerboard. Since I debugged the situation for quite some time I figured that I should better commit a fix so that others would not waste their time on debugging the same exact issue in the future.,Thanks for the fix!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,672,2016-09-03T04:42:36Z,2016-09-03T05:12:57Z,2016-09-08T04:51:21Z,MERGED,True,1,0,1,https://github.com/goob256,Don't let timer accumulate while stopped,1,[],https://github.com/liballeg/allegro5/pull/672,https://github.com/goob256,1,https://github.com/liballeg/allegro5/pull/672,Fixes issues with recent timer changes.,Fixes issues with recent timer changes.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,673,2016-09-07T06:26:56Z,2016-09-07T06:43:15Z,2016-09-08T04:51:55Z,MERGED,True,93,74,2,https://github.com/goob256,Fix Android versions below 3.1.,1,[],https://github.com/liballeg/allegro5/pull/673,https://github.com/goob256,1,https://github.com/liballeg/allegro5/pull/673,"Joystick code that was added (OnGenericMotionListener) requires
Android 3.1. Joystick won't work below 3.1 but everything else
will now work.","Joystick code that was added (OnGenericMotionListener) requires
Android 3.1. Joystick won't work below 3.1 but everything else
will now work.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,674,2016-09-08T04:52:06Z,2016-09-23T01:24:14Z,2016-10-16T07:08:46Z,MERGED,True,15,16,2,https://github.com/goob256,Fix a crash when activity is destroy on Android.,2,[],https://github.com/liballeg/allegro5/pull/674,https://github.com/goob256,1,https://github.com/liballeg/allegro5/pull/674,"The crash occurred when onDestroy was called before main exited.
This can happen when memory is low and possibly other instances.
The only way I could reproduce it was setting ""Don't keep activities""
in developer options. Previously, games would crash as soon as
you closed them with this option on. Presumably the activity isn't
in a complete state when onDestroy is called like this: the crash
occurred in android_cleanup at the calls to finish_activity and
DetachThread. The exit(0) is needed or else resuming (restarting)
the game will not work.
Some ALLEGRO_DEBUGs were also removed for good measure: anything
after Allegro has been shut down or the activity is dying has
been removed.","The crash occurred when onDestroy was called before main exited.
This can happen when memory is low and possibly other instances.
The only way I could reproduce it was setting ""Don't keep activities""
in developer options. Previously, games would crash as soon as
you closed them with this option on. Presumably the activity isn't
in a complete state when onDestroy is called like this: the crash
occurred in android_cleanup at the calls to finish_activity and
DetachThread. The exit(0) is needed or else resuming (restarting)
the game will not work.
Some ALLEGRO_DEBUGs were also removed for good measure: anything
after Allegro has been shut down or the activity is dying has
been removed.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,674,2016-09-08T04:52:06Z,2016-09-23T01:24:14Z,2016-10-16T07:08:46Z,MERGED,True,15,16,2,https://github.com/goob256,Fix a crash when activity is destroy on Android.,2,[],https://github.com/liballeg/allegro5/pull/674,https://github.com/goob256,2,https://github.com/liballeg/allegro5/pull/674#issuecomment-245493183,"The crash occurred when onDestroy was called before main exited.
This can happen when memory is low and possibly other instances.
The only way I could reproduce it was setting ""Don't keep activities""
in developer options. Previously, games would crash as soon as
you closed them with this option on. Presumably the activity isn't
in a complete state when onDestroy is called like this: the crash
occurred in android_cleanup at the calls to finish_activity and
DetachThread. The exit(0) is needed or else resuming (restarting)
the game will not work.
Some ALLEGRO_DEBUGs were also removed for good measure: anything
after Allegro has been shut down or the activity is dying has
been removed.","@elias-pschernig, perhaps you could test this with your Android game?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,674,2016-09-08T04:52:06Z,2016-09-23T01:24:14Z,2016-10-16T07:08:46Z,MERGED,True,15,16,2,https://github.com/goob256,Fix a crash when activity is destroy on Android.,2,[],https://github.com/liballeg/allegro5/pull/674,https://github.com/goob256,3,https://github.com/liballeg/allegro5/pull/674#issuecomment-245493352,"The crash occurred when onDestroy was called before main exited.
This can happen when memory is low and possibly other instances.
The only way I could reproduce it was setting ""Don't keep activities""
in developer options. Previously, games would crash as soon as
you closed them with this option on. Presumably the activity isn't
in a complete state when onDestroy is called like this: the crash
occurred in android_cleanup at the calls to finish_activity and
DetachThread. The exit(0) is needed or else resuming (restarting)
the game will not work.
Some ALLEGRO_DEBUGs were also removed for good measure: anything
after Allegro has been shut down or the activity is dying has
been removed.",I also removed the call to atexit on Android in this patch. al_uninstall_system is called manually on Android.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,674,2016-09-08T04:52:06Z,2016-09-23T01:24:14Z,2016-10-16T07:08:46Z,MERGED,True,15,16,2,https://github.com/goob256,Fix a crash when activity is destroy on Android.,2,[],https://github.com/liballeg/allegro5/pull/674,https://github.com/goob256,4,https://github.com/liballeg/allegro5/pull/674#issuecomment-246522792,"The crash occurred when onDestroy was called before main exited.
This can happen when memory is low and possibly other instances.
The only way I could reproduce it was setting ""Don't keep activities""
in developer options. Previously, games would crash as soon as
you closed them with this option on. Presumably the activity isn't
in a complete state when onDestroy is called like this: the crash
occurred in android_cleanup at the calls to finish_activity and
DetachThread. The exit(0) is needed or else resuming (restarting)
the game will not work.
Some ALLEGRO_DEBUGs were also removed for good measure: anything
after Allegro has been shut down or the activity is dying has
been removed.",I've found this only fixes half the problem. I'm working on the other half...,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,674,2016-09-08T04:52:06Z,2016-09-23T01:24:14Z,2016-10-16T07:08:46Z,MERGED,True,15,16,2,https://github.com/goob256,Fix a crash when activity is destroy on Android.,2,[],https://github.com/liballeg/allegro5/pull/674,https://github.com/MaxSavenkov,5,https://github.com/liballeg/allegro5/pull/674#issuecomment-248318972,"The crash occurred when onDestroy was called before main exited.
This can happen when memory is low and possibly other instances.
The only way I could reproduce it was setting ""Don't keep activities""
in developer options. Previously, games would crash as soon as
you closed them with this option on. Presumably the activity isn't
in a complete state when onDestroy is called like this: the crash
occurred in android_cleanup at the calls to finish_activity and
DetachThread. The exit(0) is needed or else resuming (restarting)
the game will not work.
Some ALLEGRO_DEBUGs were also removed for good measure: anything
after Allegro has been shut down or the activity is dying has
been removed.","Got the same crash on Xiaomi Redmi 3S (but not on any other phone we have). With my landscape-only game, it happens every time the app goes into background and comes back, but only if I hold the phone in landscape mode. If I hold it in portrait mode (despite the game being in landscape), it DOES NOT crash...
The crucial difference: in portrait mode, I get:
09-20 17:35:34.751 18398 18398 D AllegroActivity: onPause
09-20 17:35:34.758 18398 18398 D AllegroActivity: destroySurface
09-20 17:35:34.788 18398 18398 D AllegroActivity: onPause end
09-20 17:35:35.009 18398 18398 D AllegroActivity: onSaveInstanceState
09-20 17:35:35.009 18398 18398 D AllegroActivity: onStop.
09-20 17:35:37.464 18398 18398 D AllegroActivity: onRestart. <---- after returning from background
09-20 17:35:37.470 18398 18398 D AllegroActivity: onStart.
etc.

but when the phone is held sideways, instead of onRestart, I get straight onDestroy:
09-20 17:36:59.826 18721 18721 D AllegroActivity: onPause
09-20 17:36:59.830 18721 18721 D AllegroActivity: destroySurface
09-20 17:36:59.861 18721 18721 D AllegroActivity: onPause end
09-20 17:37:00.062 18721 18721 D AllegroActivity: onSaveInstanceState
09-20 17:37:00.062 18721 18721 D AllegroActivity: onStop.
09-20 17:37:02.682 18721 18721 D AllegroActivity: onDestroy <----- after returning from background

EDIT: Oh, OK, I just wasn't specifying screenSize in configChanges :(",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,674,2016-09-08T04:52:06Z,2016-09-23T01:24:14Z,2016-10-16T07:08:46Z,MERGED,True,15,16,2,https://github.com/goob256,Fix a crash when activity is destroy on Android.,2,[],https://github.com/liballeg/allegro5/pull/674,https://github.com/goob256,6,https://github.com/liballeg/allegro5/pull/674#issuecomment-248444256,"The crash occurred when onDestroy was called before main exited.
This can happen when memory is low and possibly other instances.
The only way I could reproduce it was setting ""Don't keep activities""
in developer options. Previously, games would crash as soon as
you closed them with this option on. Presumably the activity isn't
in a complete state when onDestroy is called like this: the crash
occurred in android_cleanup at the calls to finish_activity and
DetachThread. The exit(0) is needed or else resuming (restarting)
the game will not work.
Some ALLEGRO_DEBUGs were also removed for good measure: anything
after Allegro has been shut down or the activity is dying has
been removed.","Hello Max. I've found the previous patch a while ago to destroy the surface in onPause causes crashes sometimes, especially when you enable ""Don't keep activities"" mode in developer options. You had previously suggested a similar patch so please check this pull request as it has changed if you have a chance as it undoes that patch.
When I applied the patch in question, it was because music would start as the game would go through onChange and get a RESUME_DRAWING. Well I had to change my games and the way they resumed music to fix this with this patch removed.
I'm still having a problem of a crash on exit on SHIELD TV but without the device I haven't been able to fix it...",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,674,2016-09-08T04:52:06Z,2016-09-23T01:24:14Z,2016-10-16T07:08:46Z,MERGED,True,15,16,2,https://github.com/goob256,Fix a crash when activity is destroy on Android.,2,[],https://github.com/liballeg/allegro5/pull/674,https://github.com/elias-pschernig,7,https://github.com/liballeg/allegro5/pull/674#issuecomment-249075559,"The crash occurred when onDestroy was called before main exited.
This can happen when memory is low and possibly other instances.
The only way I could reproduce it was setting ""Don't keep activities""
in developer options. Previously, games would crash as soon as
you closed them with this option on. Presumably the activity isn't
in a complete state when onDestroy is called like this: the crash
occurred in android_cleanup at the calls to finish_activity and
DetachThread. The exit(0) is needed or else resuming (restarting)
the game will not work.
Some ALLEGRO_DEBUGs were also removed for good measure: anything
after Allegro has been shut down or the activity is dying has
been removed.","I applied the pull request as it is right now and I think it improves behavior, so please apply :) Without the patches I don't get crashes, but sometimes when switching in and out of my game it would end up in a messed up state. My guess is because the surface was destroyed in onPause and failed to properly recreate in onResume (sometimes you get 10 pause/resume pairs within a few milliseconds on Android - so never should do something time consuming like re-creating the surface anyway).
With the patch it haven't been able to recreate the issue anymore. Unfortunately I'm very low on test devices at home so that doesn't mean too much...",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,674,2016-09-08T04:52:06Z,2016-09-23T01:24:14Z,2016-10-16T07:08:46Z,MERGED,True,15,16,2,https://github.com/goob256,Fix a crash when activity is destroy on Android.,2,[],https://github.com/liballeg/allegro5/pull/674,https://github.com/goob256,8,https://github.com/liballeg/allegro5/pull/674#issuecomment-249076653,"The crash occurred when onDestroy was called before main exited.
This can happen when memory is low and possibly other instances.
The only way I could reproduce it was setting ""Don't keep activities""
in developer options. Previously, games would crash as soon as
you closed them with this option on. Presumably the activity isn't
in a complete state when onDestroy is called like this: the crash
occurred in android_cleanup at the calls to finish_activity and
DetachThread. The exit(0) is needed or else resuming (restarting)
the game will not work.
Some ALLEGRO_DEBUGs were also removed for good measure: anything
after Allegro has been shut down or the activity is dying has
been removed.",Thanks for testing!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,674,2016-09-08T04:52:06Z,2016-09-23T01:24:14Z,2016-10-16T07:08:46Z,MERGED,True,15,16,2,https://github.com/goob256,Fix a crash when activity is destroy on Android.,2,[],https://github.com/liballeg/allegro5/pull/674,https://github.com/elias-pschernig,9,https://github.com/liballeg/allegro5/pull/674#issuecomment-249076861,"The crash occurred when onDestroy was called before main exited.
This can happen when memory is low and possibly other instances.
The only way I could reproduce it was setting ""Don't keep activities""
in developer options. Previously, games would crash as soon as
you closed them with this option on. Presumably the activity isn't
in a complete state when onDestroy is called like this: the crash
occurred in android_cleanup at the calls to finish_activity and
DetachThread. The exit(0) is needed or else resuming (restarting)
the game will not work.
Some ALLEGRO_DEBUGs were also removed for good measure: anything
after Allegro has been shut down or the activity is dying has
been removed.",Thanks for fixing things! :D,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,674,2016-09-08T04:52:06Z,2016-09-23T01:24:14Z,2016-10-16T07:08:46Z,MERGED,True,15,16,2,https://github.com/goob256,Fix a crash when activity is destroy on Android.,2,[],https://github.com/liballeg/allegro5/pull/674,https://github.com/goob256,10,https://github.com/liballeg/allegro5/pull/674#issuecomment-254031477,"The crash occurred when onDestroy was called before main exited.
This can happen when memory is low and possibly other instances.
The only way I could reproduce it was setting ""Don't keep activities""
in developer options. Previously, games would crash as soon as
you closed them with this option on. Presumably the activity isn't
in a complete state when onDestroy is called like this: the crash
occurred in android_cleanup at the calls to finish_activity and
DetachThread. The exit(0) is needed or else resuming (restarting)
the game will not work.
Some ALLEGRO_DEBUGs were also removed for good measure: anything
after Allegro has been shut down or the activity is dying has
been removed.",For reference NVIDIA closed the bug with SHIELD TV crashing so everything appears fine now.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,675,2016-09-08T14:24:59Z,2016-09-23T02:29:23Z,2016-10-02T16:21:01Z,MERGED,True,31,17,1,https://github.com/1Hyena,Fix to ex_camera: camera's axes are now properly normalized,4,[],https://github.com/liballeg/allegro5/pull/675,https://github.com/1Hyena,1,https://github.com/liballeg/allegro5/pull/675,This fixes a bug that used to freeze the camera when the user rotated it at a very rapid pace. Attached are screenshots of the bug.,This fixes a bug that used to freeze the camera when the user rotated it at a very rapid pace. Attached are screenshots of the bug.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,675,2016-09-08T14:24:59Z,2016-09-23T02:29:23Z,2016-10-02T16:21:01Z,MERGED,True,31,17,1,https://github.com/1Hyena,Fix to ex_camera: camera's axes are now properly normalized,4,[],https://github.com/liballeg/allegro5/pull/675,https://github.com/elias-pschernig,2,https://github.com/liballeg/allegro5/pull/675#issuecomment-245620425,This fixes a bug that used to freeze the camera when the user rotated it at a very rapid pace. Attached are screenshots of the bug.,"Instead of normalizing the third vector, would it be better to set it as the cross product of the first two?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,675,2016-09-08T14:24:59Z,2016-09-23T02:29:23Z,2016-10-02T16:21:01Z,MERGED,True,31,17,1,https://github.com/1Hyena,Fix to ex_camera: camera's axes are now properly normalized,4,[],https://github.com/liballeg/allegro5/pull/675,https://github.com/1Hyena,3,https://github.com/liballeg/allegro5/pull/675#issuecomment-245842128,This fixes a bug that used to freeze the camera when the user rotated it at a very rapid pace. Attached are screenshots of the bug.,@elias-pschernig you are right. By using cross product here it becomes trivial to also maintain perpendicularity of the axes. I have made the respective changes to this branch.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,675,2016-09-08T14:24:59Z,2016-09-23T02:29:23Z,2016-10-02T16:21:01Z,MERGED,True,31,17,1,https://github.com/1Hyena,Fix to ex_camera: camera's axes are now properly normalized,4,[],https://github.com/liballeg/allegro5/pull/675,https://github.com/1Hyena,4,https://github.com/liballeg/allegro5/pull/675#issuecomment-245979231,This fixes a bug that used to freeze the camera when the user rotated it at a very rapid pace. Attached are screenshots of the bug.,"@elias-pschernig
Actually this can be optimized even more like this:
al_transform_coordinates_3d(&t, &c->zaxis.x, &c->zaxis.y, &c->zaxis.z);
al_transform_coordinates_3d(&t, &c->yaxis.x, &c->yaxis.y, &c->yaxis.z);

c->zaxis = vector_normalize(c->zaxis);
c->xaxis = vector_cross_product(c->yaxis, c->zaxis);
c->xaxis = vector_normalize(c->xaxis);
c->yaxis = vector_cross_product(c->zaxis, c->xaxis);

Unfortunately I can test this code and make a new commit on Monday the earliest. I'd suggest waiting until then before merging.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,675,2016-09-08T14:24:59Z,2016-09-23T02:29:23Z,2016-10-02T16:21:01Z,MERGED,True,31,17,1,https://github.com/1Hyena,Fix to ex_camera: camera's axes are now properly normalized,4,[],https://github.com/liballeg/allegro5/pull/675,https://github.com/1Hyena,5,https://github.com/liballeg/allegro5/pull/675#issuecomment-246277497,This fixes a bug that used to freeze the camera when the user rotated it at a very rapid pace. Attached are screenshots of the bug.,I also made the skybox move with the camera's y-position because in airplane or spaceship mode it was possible to fly through the skybox. @elias-pschernig let me know if there is anything else you think needs modification here before merging.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,675,2016-09-08T14:24:59Z,2016-09-23T02:29:23Z,2016-10-02T16:21:01Z,MERGED,True,31,17,1,https://github.com/1Hyena,Fix to ex_camera: camera's axes are now properly normalized,4,[],https://github.com/liballeg/allegro5/pull/675,https://github.com/elias-pschernig,6,https://github.com/liballeg/allegro5/pull/675#issuecomment-249086517,This fixes a bug that used to freeze the camera when the user rotated it at a very rapid pace. Attached are screenshots of the bug.,"I always found it funny that I could reach the top of the skybox, but I agree that for the sake of being an example it should be a real skybox where this is not possible. Applied it all, thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,682,2016-09-25T01:52:20Z,2016-09-25T03:29:39Z,2016-09-25T03:29:39Z,MERGED,True,6,4,4,https://github.com/SiegeLord,OSX fixes,4,[],https://github.com/liballeg/allegro5/pull/682,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/682,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,683,2016-09-25T23:41:13Z,2016-09-26T00:47:58Z,2016-09-26T00:47:58Z,MERGED,True,35,0,2,https://github.com/SiegeLord,Hack around system includes being fragile with GCC 6.x,2,[],https://github.com/liballeg/allegro5/pull/683,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/683,"Solution stolen from Webkit folks with a few minor changes by me.
Fixes #678","Solution stolen from Webkit folks with a few minor changes by me.
Fixes #678",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,684,2016-09-26T01:23:48Z,2016-09-27T23:23:57Z,2016-09-27T23:23:57Z,MERGED,True,27,36,1,https://github.com/elias-pschernig,"allow building for android mips, arm64 and mips64",1,[],https://github.com/liballeg/allegro5/pull/684,https://github.com/elias-pschernig,1,https://github.com/liballeg/allegro5/pull/684,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,686,2016-09-27T04:32:23Z,2016-09-27T23:24:49Z,2016-09-27T23:24:49Z,MERGED,True,47,0,3,https://github.com/elias-pschernig,add two Android convienience functions,1,[],https://github.com/liballeg/allegro5/pull/686,https://github.com/elias-pschernig,1,https://github.com/liballeg/allegro5/pull/686,"al_android_get_jni_env: returns Allegro's JNI environment
al_android_get_activity: returns Allegro's Activity","al_android_get_jni_env: returns Allegro's JNI environment
al_android_get_activity: returns Allegro's Activity",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,686,2016-09-27T04:32:23Z,2016-09-27T23:24:49Z,2016-09-27T23:24:49Z,MERGED,True,47,0,3,https://github.com/elias-pschernig,add two Android convienience functions,1,[],https://github.com/liballeg/allegro5/pull/686,https://github.com/elias-pschernig,2,https://github.com/liballeg/allegro5/pull/686#issuecomment-249764344,"al_android_get_jni_env: returns Allegro's JNI environment
al_android_get_activity: returns Allegro's Activity","@goobliata Is this a good idea? In my game I need to call into Java for some Google API integration stuff, and exposing these two functions saves me from duplicating some code Allegro already has. I suppose in your games you also call into Java somehow?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,686,2016-09-27T04:32:23Z,2016-09-27T23:24:49Z,2016-09-27T23:24:49Z,MERGED,True,47,0,3,https://github.com/elias-pschernig,add two Android convienience functions,1,[],https://github.com/liballeg/allegro5/pull/686,https://github.com/goob256,3,https://github.com/liballeg/allegro5/pull/686#issuecomment-249765341,"al_android_get_jni_env: returns Allegro's JNI environment
al_android_get_activity: returns Allegro's Activity","Yes, this was once on my todo but I forgot about it. ATM I'm using the internal functions. :)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,687,2016-09-28T00:55:23Z,2016-09-29T00:09:08Z,2016-09-29T00:09:08Z,MERGED,True,19,5,2,https://github.com/elias-pschernig,cmake build should never litter in the git folder,1,[],https://github.com/liballeg/allegro5/pull/687,https://github.com/elias-pschernig,1,https://github.com/liballeg/allegro5/pull/687,"This calls ant inside the build folder instead for the Android example.
Also added my android build folders to .gitignore.","This calls ant inside the build folder instead for the Android example.
Also added my android build folders to .gitignore.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,687,2016-09-28T00:55:23Z,2016-09-29T00:09:08Z,2016-09-29T00:09:08Z,MERGED,True,19,5,2,https://github.com/elias-pschernig,cmake build should never litter in the git folder,1,[],https://github.com/liballeg/allegro5/pull/687,https://github.com/elias-pschernig,2,https://github.com/liballeg/allegro5/pull/687#issuecomment-250043137,"This calls ant inside the build folder instead for the Android example.
Also added my android build folders to .gitignore.","Btw. Google says on https://developer.android.com/studio/tools/help/android.html that:

This tool is no longer supported. You should instead use Android Studio to create AVDs and create projects.

Android Studio projects are extremely simply and use the Gradle build system. So I think we probably want to change our make_android_project.py script to create an android gradle project instead of an unsupported ant project, and do the same with the example.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,687,2016-09-28T00:55:23Z,2016-09-29T00:09:08Z,2016-09-29T00:09:08Z,MERGED,True,19,5,2,https://github.com/elias-pschernig,cmake build should never litter in the git folder,1,[],https://github.com/liballeg/allegro5/pull/687,https://github.com/goob256,3,https://github.com/liballeg/allegro5/pull/687#issuecomment-250047267,"This calls ant inside the build folder instead for the Android example.
Also added my android build folders to .gitignore.",I'm OK with this as long as gradle supports aar libraries (I think they're actually MEANT for gradle so shouldn't be a problem) as well as the old ant type of libraries (a directory with lib src res etc) or at least an easy way to make those ant libraries into aar. Reason is for things like Google SDKs and Amazon SDKs you need to use different types of libraries.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,688,2016-10-30T15:32:03Z,2016-10-30T18:16:45Z,2016-10-30T22:55:10Z,MERGED,True,2,2,1,https://github.com/rcorre,Fix transform docs typo.,1,[],https://github.com/liballeg/allegro5/pull/688,https://github.com/rcorre,1,https://github.com/liballeg/allegro5/pull/688,"al_use_transform takes a pointer, just like the other transform
functions. Depict this correctly in the docs.","al_use_transform takes a pointer, just like the other transform
functions. Depict this correctly in the docs.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,688,2016-10-30T15:32:03Z,2016-10-30T18:16:45Z,2016-10-30T22:55:10Z,MERGED,True,2,2,1,https://github.com/rcorre,Fix transform docs typo.,1,[],https://github.com/liballeg/allegro5/pull/688,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/688#issuecomment-257168129,"al_use_transform takes a pointer, just like the other transform
functions. Depict this correctly in the docs.",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,690,2016-11-06T03:38:49Z,2016-11-06T05:40:44Z,2016-11-06T05:40:44Z,MERGED,True,1,1,1,https://github.com/MarcusCalhoun-Lopez,Allow 32-bit build on OSX,2,[],https://github.com/liballeg/allegro5/pull/690,https://github.com/MarcusCalhoun-Lopez,1,https://github.com/liballeg/allegro5/pull/690,"On 64-bit systems, NSPoint is an alias of CGPoint.
NSPoint is an alias of CGPoint if any of the following are true:
LP64, TARGET_OS_EMBEDDED, TARGET_OS_IPHONE, TARGET_OS_WIN32, or
NS_BUILD_32_LIKE_64.
See
/System/Library/Frameworks/Foundation.framework/Headers/NSGeometry.h.
If NSPoint and CGPoint are different data types, convert between them.","On 64-bit systems, NSPoint is an alias of CGPoint.
NSPoint is an alias of CGPoint if any of the following are true:
LP64, TARGET_OS_EMBEDDED, TARGET_OS_IPHONE, TARGET_OS_WIN32, or
NS_BUILD_32_LIKE_64.
See
/System/Library/Frameworks/Foundation.framework/Headers/NSGeometry.h.
If NSPoint and CGPoint are different data types, convert between them.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,690,2016-11-06T03:38:49Z,2016-11-06T05:40:44Z,2016-11-06T05:40:44Z,MERGED,True,1,1,1,https://github.com/MarcusCalhoun-Lopez,Allow 32-bit build on OSX,2,[],https://github.com/liballeg/allegro5/pull/690,https://github.com/goob256,2,https://github.com/liballeg/allegro5/pull/690#issuecomment-258658587,"On 64-bit systems, NSPoint is an alias of CGPoint.
NSPoint is an alias of CGPoint if any of the following are true:
LP64, TARGET_OS_EMBEDDED, TARGET_OS_IPHONE, TARGET_OS_WIN32, or
NS_BUILD_32_LIKE_64.
See
/System/Library/Frameworks/Foundation.framework/Headers/NSGeometry.h.
If NSPoint and CGPoint are different data types, convert between them.","Can you simply add
typedef CGPoint NSPoint;
Somewhere? C allows a duplicate typedef.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,690,2016-11-06T03:38:49Z,2016-11-06T05:40:44Z,2016-11-06T05:40:44Z,MERGED,True,1,1,1,https://github.com/MarcusCalhoun-Lopez,Allow 32-bit build on OSX,2,[],https://github.com/liballeg/allegro5/pull/690,https://github.com/goob256,3,https://github.com/liballeg/allegro5/pull/690#issuecomment-258658629,"On 64-bit systems, NSPoint is an alias of CGPoint.
NSPoint is an alias of CGPoint if any of the following are true:
LP64, TARGET_OS_EMBEDDED, TARGET_OS_IPHONE, TARGET_OS_WIN32, or
NS_BUILD_32_LIKE_64.
See
/System/Library/Frameworks/Foundation.framework/Headers/NSGeometry.h.
If NSPoint and CGPoint are different data types, convert between them.",If not I'd still prefer not having that pile of #ifdefs there. Perhaps just use the second block always.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,690,2016-11-06T03:38:49Z,2016-11-06T05:40:44Z,2016-11-06T05:40:44Z,MERGED,True,1,1,1,https://github.com/MarcusCalhoun-Lopez,Allow 32-bit build on OSX,2,[],https://github.com/liballeg/allegro5/pull/690,https://github.com/MarcusCalhoun-Lopez,4,https://github.com/liballeg/allegro5/pull/690#issuecomment-258659041,"On 64-bit systems, NSPoint is an alias of CGPoint.
NSPoint is an alias of CGPoint if any of the following are true:
LP64, TARGET_OS_EMBEDDED, TARGET_OS_IPHONE, TARGET_OS_WIN32, or
NS_BUILD_32_LIKE_64.
See
/System/Library/Frameworks/Foundation.framework/Headers/NSGeometry.h.
If NSPoint and CGPoint are different data types, convert between them.","NSPoint is declared in a System header file (/System/Library/Frameworks/Foundation.framework/Headers/NSGeometry.h)
On 64-bit systems,
typedef CGPoint NSPoint;
On 32-bit systems,
typedef struct _NSPoint { CGFloat x; CGFloat y; } NSPoint;
So on 32-bit systems, I would think attempting a duplicate typedef would cause a conflict.
Always using the second block seems fine.
I am very new to GitHub, so please forgive me while I attempt to modify the pull request.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,690,2016-11-06T03:38:49Z,2016-11-06T05:40:44Z,2016-11-06T05:40:44Z,MERGED,True,1,1,1,https://github.com/MarcusCalhoun-Lopez,Allow 32-bit build on OSX,2,[],https://github.com/liballeg/allegro5/pull/690,https://github.com/goob256,5,https://github.com/liballeg/allegro5/pull/690#issuecomment-258661977,"On 64-bit systems, NSPoint is an alias of CGPoint.
NSPoint is an alias of CGPoint if any of the following are true:
LP64, TARGET_OS_EMBEDDED, TARGET_OS_IPHONE, TARGET_OS_WIN32, or
NS_BUILD_32_LIKE_64.
See
/System/Library/Frameworks/Foundation.framework/Headers/NSGeometry.h.
If NSPoint and CGPoint are different data types, convert between them.",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,692,2016-11-18T03:08:04Z,2016-11-26T03:29:07Z,2016-11-26T03:29:07Z,MERGED,True,29,15,3,https://github.com/allefant,use dynamic OpenGL ES version for checks,1,[],https://github.com/liballeg/allegro5/pull/692,https://github.com/allefant,1,https://github.com/liballeg/allegro5/pull/692,"That way we can compile the OpenGL ES 2 version and still allow programs
to work with OpenGL ES 1.","That way we can compile the OpenGL ES 2 version and still allow programs
to work with OpenGL ES 1.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,694,2016-11-27T21:25:45Z,2016-11-29T05:01:21Z,2016-11-29T05:01:26Z,MERGED,True,5,4,2,https://github.com/gjvnq,Python 3 bindings #691,3,[],https://github.com/liballeg/allegro5/pull/694,https://github.com/gjvnq,1,https://github.com/liballeg/allegro5/pull/694,Solves issue #691 by making the code compatible with both python2 and python3.,Solves issue #691 by making the code compatible with both python2 and python3.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,694,2016-11-27T21:25:45Z,2016-11-29T05:01:21Z,2016-11-29T05:01:26Z,MERGED,True,5,4,2,https://github.com/gjvnq,Python 3 bindings #691,3,[],https://github.com/liballeg/allegro5/pull/694,https://github.com/elias-pschernig,2,https://github.com/liballeg/allegro5/pull/694#issuecomment-263148893,Solves issue #691 by making the code compatible with both python2 and python3.,What happens if someone has no Python installed? And what is the minimum version of Python 2 that is required now?,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,694,2016-11-27T21:25:45Z,2016-11-29T05:01:21Z,2016-11-29T05:01:26Z,MERGED,True,5,4,2,https://github.com/gjvnq,Python 3 bindings #691,3,[],https://github.com/liballeg/allegro5/pull/694,https://github.com/gjvnq,3,https://github.com/liballeg/allegro5/pull/694#issuecomment-263149392,Solves issue #691 by making the code compatible with both python2 and python3.,"I've used Python 2.7.12 and Python 3.5.2 for testing. So, I imagine that Python 2.7 is the minimum version.
However, I simply forgot the possibility of no python being available. The simplest fix is to keep the line 150 of the file CMakeLists.txt as it is (i.e. not building python bindings by default)
The best solution, in my opinion, would be to automatically install the python bindings only if python is available and simply ignore/not build the bindings if it python is not available.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,694,2016-11-27T21:25:45Z,2016-11-29T05:01:21Z,2016-11-29T05:01:26Z,MERGED,True,5,4,2,https://github.com/gjvnq,Python 3 bindings #691,3,[],https://github.com/liballeg/allegro5/pull/694,https://github.com/beoran,4,https://github.com/liballeg/allegro5/pull/694#issuecomment-263151959,Solves issue #691 by making the code compatible with both python2 and python3.,"I would prefer if the Python bindings stay not built by default as they are
now. Even though Python is installed on my system, I have no use for the
bindings. So I don't want to have wait for them to compile.

Kind Regards, B.

On 27 Nov 2016 10:37 pm, ""Gabriel Queiroz"" <notifications@github.com> wrote:

I've used Python 2.7.12 and Python 3.5.2 for testing. So, I imagine that
Python 2.7 is the minimum version.

However, I simply forgot the possibility of no python being available. The
simplest fix is to keep the line 150 of the file CMakeLists.txt as it is
(i.e. not building python bindings by default)

The best solution, in my opinion, would be to automatically install the
python bindings only if python is available and simply ignore/not build the
bindings if it python is not available.

—
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub
<#694 (comment)>, or mute
the thread
<https://github.com/notifications/unsubscribe-auth/AAEWeQW7ayciMZT6VPwx-zqI_es2EDwlks5rCfgPgaJpZM4K9Qvq>
.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,694,2016-11-27T21:25:45Z,2016-11-29T05:01:21Z,2016-11-29T05:01:26Z,MERGED,True,5,4,2,https://github.com/gjvnq,Python 3 bindings #691,3,[],https://github.com/liballeg/allegro5/pull/694,https://github.com/gjvnq,5,https://github.com/liballeg/allegro5/pull/694#issuecomment-263152626,Solves issue #691 by making the code compatible with both python2 and python3.,"@Eoran, I reverted WANT_PYTHON_WRAPPER to the previous state (i.e. off).",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,694,2016-11-27T21:25:45Z,2016-11-29T05:01:21Z,2016-11-29T05:01:26Z,MERGED,True,5,4,2,https://github.com/gjvnq,Python 3 bindings #691,3,[],https://github.com/liballeg/allegro5/pull/694,https://github.com/beoran,6,https://github.com/liballeg/allegro5/pull/694#issuecomment-263155216,Solves issue #691 by making the code compatible with both python2 and python3.,"Thanks. I will leave it to someone else to merge this, though...
…
On 27 Nov 2016 11:32 pm, ""Gabriel Queiroz"" ***@***.***> wrote:
 @Eoran <https://github.com/eoran>, I reverted WANT_PYTHON_WRAPPER to the
 previous state (i.e. off).

 —
 You are receiving this because you commented.
 Reply to this email directly, view it on GitHub
 <#694 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/AAEWefPT9thO5kcOE3-jFrA9rV_f8tDFks5rCgThgaJpZM4K9Qvq>
 .",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,694,2016-11-27T21:25:45Z,2016-11-29T05:01:21Z,2016-11-29T05:01:26Z,MERGED,True,5,4,2,https://github.com/gjvnq,Python 3 bindings #691,3,[],https://github.com/liballeg/allegro5/pull/694,https://github.com/SiegeLord,7,https://github.com/liballeg/allegro5/pull/694#issuecomment-263476920,Solves issue #691 by making the code compatible with both python2 and python3.,Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,698,2016-12-18T20:46:25Z,2016-12-19T00:12:14Z,2016-12-19T00:22:30Z,MERGED,True,4,2,1,https://github.com/MarkOates,"In docs, clarify al_clone_bitmap and bitmap flags",1,[],https://github.com/liballeg/allegro5/pull/698,https://github.com/MarkOates,1,https://github.com/liballeg/allegro5/pull/698,"Problem
It wasn't clear if al_clone_bitmap would preserve the bitmap flags used when creating the source bitmap, or if it would use the current new bitmap flags.  I had to go to the source, and then also test it in production to see what happened to the flags.
Solution
Update the docs to add a bit of clarity. 😊","Problem
It wasn't clear if al_clone_bitmap would preserve the bitmap flags used when creating the source bitmap, or if it would use the current new bitmap flags.  I had to go to the source, and then also test it in production to see what happened to the flags.
Solution
Update the docs to add a bit of clarity. 😊",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,698,2016-12-18T20:46:25Z,2016-12-19T00:12:14Z,2016-12-19T00:22:30Z,MERGED,True,4,2,1,https://github.com/MarkOates,"In docs, clarify al_clone_bitmap and bitmap flags",1,[],https://github.com/liballeg/allegro5/pull/698,https://github.com/goob256,2,https://github.com/liballeg/allegro5/pull/698#issuecomment-267857613,"Problem
It wasn't clear if al_clone_bitmap would preserve the bitmap flags used when creating the source bitmap, or if it would use the current new bitmap flags.  I had to go to the source, and then also test it in production to see what happened to the flags.
Solution
Update the docs to add a bit of clarity. 😊",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,699,2016-12-21T20:52:44Z,2016-12-28T04:37:04Z,2016-12-28T04:37:04Z,CLOSED,False,214,198,7,https://github.com/kolexfati,5.2.1,8,[],https://github.com/liballeg/allegro5/pull/699,https://github.com/kolexfati,1,https://github.com/liballeg/allegro5/pull/699,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,701,2016-12-28T16:17:05Z,2017-01-13T02:28:54Z,2017-01-13T02:28:54Z,MERGED,True,12,4,1,https://github.com/elias-pschernig,build the android example in the build folder,1,[],https://github.com/liballeg/allegro5/pull/701,https://github.com/elias-pschernig,1,https://github.com/liballeg/allegro5/pull/701,The build should never modify the git source directory!,The build should never modify the git source directory!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,704,2017-01-10T01:41:43Z,2017-01-10T17:00:55Z,2017-01-10T17:00:55Z,CLOSED,False,21,2,1,https://github.com/oitofelix,Improvements to save dialogs on systems using Gtk,2,[],https://github.com/liballeg/allegro5/pull/704,https://github.com/oitofelix,1,https://github.com/liballeg/allegro5/pull/704,These are some improvements to file save dialogs on systems using Gtk.  Developing MININIM and getting feedback from users led me to them.,These are some improvements to file save dialogs on systems using Gtk.  Developing MININIM and getting feedback from users led me to them.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,704,2017-01-10T01:41:43Z,2017-01-10T17:00:55Z,2017-01-10T17:00:55Z,CLOSED,False,21,2,1,https://github.com/oitofelix,Improvements to save dialogs on systems using Gtk,2,[],https://github.com/liballeg/allegro5/pull/704,https://github.com/oitofelix,2,https://github.com/liballeg/allegro5/pull/704#issuecomment-271632759,These are some improvements to file save dialogs on systems using Gtk.  Developing MININIM and getting feedback from users led me to them.,Rebranched head fork to pull request #705.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,705,2017-01-10T16:59:12Z,2017-01-14T15:16:02Z,2017-01-14T15:25:47Z,MERGED,True,23,2,1,https://github.com/oitofelix,Improvements to save dialogs on systems using Gtk,4,[],https://github.com/liballeg/allegro5/pull/705,https://github.com/oitofelix,1,https://github.com/liballeg/allegro5/pull/705,"These are some improvements to file save dialogs on systems using Gtk.  Developing MININIM and getting feedback from users led me to them.
(rebranched head fork from previous pull request #704)","These are some improvements to file save dialogs on systems using Gtk.  Developing MININIM and getting feedback from users led me to them.
(rebranched head fork from previous pull request #704)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,705,2017-01-10T16:59:12Z,2017-01-14T15:16:02Z,2017-01-14T15:25:47Z,MERGED,True,23,2,1,https://github.com/oitofelix,Improvements to save dialogs on systems using Gtk,4,[],https://github.com/liballeg/allegro5/pull/705,https://github.com/elias-pschernig,2,https://github.com/liballeg/allegro5/pull/705#issuecomment-272347833,"These are some improvements to file save dialogs on systems using Gtk.  Developing MININIM and getting feedback from users led me to them.
(rebranched head fork from previous pull request #704)","What Beoran said. In your patch the indentation was messed up and with statements spanning several lines it just was very hard to see where the if block ended - no big deal either way, it's something the person applying the patch can easily fix. However there is a more serious issue I get when trying ex_native_filechooser with the patch applied:
(ex_native_filechooser): Gtk-CRITICAL **: gtk_file_chooser_default_set_current_name: assertion 'impl->action == GTK_FILE_CHOOSER_ACTION_SAVE || impl->action == GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER' failed
Any idea how to fix that?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,705,2017-01-10T16:59:12Z,2017-01-14T15:16:02Z,2017-01-14T15:25:47Z,MERGED,True,23,2,1,https://github.com/oitofelix,Improvements to save dialogs on systems using Gtk,4,[],https://github.com/liballeg/allegro5/pull/705,https://github.com/oitofelix,3,https://github.com/liballeg/allegro5/pull/705#issuecomment-272630879,"These are some improvements to file save dialogs on systems using Gtk.  Developing MININIM and getting feedback from users led me to them.
(rebranched head fork from previous pull request #704)",Thank you.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,709,2017-01-12T19:22:59Z,2017-01-13T02:28:09Z,2017-01-13T02:49:47Z,MERGED,True,29,2,3,https://github.com/fatcerberus,Implement al_path_ustr(),2,[],https://github.com/liballeg/allegro5/pull/709,https://github.com/fatcerberus,1,https://github.com/liballeg/allegro5/pull/709,"Adds a new al_path_ustr() function which returns the full path as an ALLEGRO_USTR* instead of a null-terminated string.  This is sometimes useful since many Allegro APIs use ALLEGRO_USTR in lieu of plain C strings.
Fixes #708.","Adds a new al_path_ustr() function which returns the full path as an ALLEGRO_USTR* instead of a null-terminated string.  This is sometimes useful since many Allegro APIs use ALLEGRO_USTR in lieu of plain C strings.
Fixes #708.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,712,2017-01-14T18:43:44Z,2017-01-14T23:58:02Z,2017-01-14T23:58:02Z,MERGED,True,56,7,5,https://github.com/SiegeLord,Place a copy of allegro5.cfg into the docs.,1,[],https://github.com/liballeg/allegro5/pull/712,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/712,"Fixes #702.
What do you think of this, @elias-pschernig?","Fixes #702.
What do you think of this, @elias-pschernig?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,712,2017-01-14T18:43:44Z,2017-01-14T23:58:02Z,2017-01-14T23:58:02Z,MERGED,True,56,7,5,https://github.com/SiegeLord,Place a copy of allegro5.cfg into the docs.,1,[],https://github.com/liballeg/allegro5/pull/712,https://github.com/elias-pschernig,2,https://github.com/liballeg/allegro5/pull/712#issuecomment-272646732,"Fixes #702.
What do you think of this, @elias-pschernig?","Does not seem to work for me... I applied it and rebuilt the docs, but no mention of allegro.cfg still.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,712,2017-01-14T18:43:44Z,2017-01-14T23:58:02Z,2017-01-14T23:58:02Z,MERGED,True,56,7,5,https://github.com/SiegeLord,Place a copy of allegro5.cfg into the docs.,1,[],https://github.com/liballeg/allegro5/pull/712,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/712#issuecomment-272648757,"Fixes #702.
What do you think of this, @elias-pschernig?",I stuck it into al_get_system_config documentation. There's a listing of the default allegro5.cfg at the end (unless it didn't work :P).,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,712,2017-01-14T18:43:44Z,2017-01-14T23:58:02Z,2017-01-14T23:58:02Z,MERGED,True,56,7,5,https://github.com/SiegeLord,Place a copy of allegro5.cfg into the docs.,1,[],https://github.com/liballeg/allegro5/pull/712,https://github.com/elias-pschernig,4,https://github.com/liballeg/allegro5/pull/712#issuecomment-272658595,"Fixes #702.
What do you think of this, @elias-pschernig?","Oh, indeed, perfect!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,716,2017-01-17T03:45:16Z,2017-02-10T03:19:54Z,2017-02-10T03:19:54Z,MERGED,True,1223,5,9,https://github.com/allefant,"[color addon] Add XYZ, xyY, Lab and LCH color spaces.",6,[],https://github.com/liballeg/allegro5/pull/716,https://github.com/allefant,1,https://github.com/liballeg/allegro5/pull/716,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,717,2017-01-19T17:19:58Z,2017-01-21T05:31:25Z,2017-01-21T16:05:48Z,CLOSED,False,15,2,2,https://github.com/oitofelix,Mac OS X 10.6 fixes,2,[],https://github.com/liballeg/allegro5/pull/717,https://github.com/oitofelix,1,https://github.com/liballeg/allegro5/pull/717,"Fix build in Mac OS X 10.6. The default compiler provided by XCode 4.2 is llvm-gcc-4.2 which fails to compile modules for which gl_ext.h redefines type ALLEGRO_OGL_EXT_LIST. This isn't an issue for later versions of GCC which allow for such redefinitions. This fix is important, though, because that's the latest GCC officially released by Apple for such system, and I couldn't build an working Allegro using compilers provided by MacPorts, since although builds were successfully completed, Allegro systematically segfaulted at misaligned_stack_error system function for any program.


Fix warnings ""__NSAutoreleaseNoPool(): Object ? of class ? autoreleased with no pool in place - just leaking"" when building or modifying menus under Mac OS X 10.6.","Fix build in Mac OS X 10.6. The default compiler provided by XCode 4.2 is llvm-gcc-4.2 which fails to compile modules for which gl_ext.h redefines type ALLEGRO_OGL_EXT_LIST. This isn't an issue for later versions of GCC which allow for such redefinitions. This fix is important, though, because that's the latest GCC officially released by Apple for such system, and I couldn't build an working Allegro using compilers provided by MacPorts, since although builds were successfully completed, Allegro systematically segfaulted at misaligned_stack_error system function for any program.


Fix warnings ""__NSAutoreleaseNoPool(): Object ? of class ? autoreleased with no pool in place - just leaking"" when building or modifying menus under Mac OS X 10.6.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,717,2017-01-19T17:19:58Z,2017-01-21T05:31:25Z,2017-01-21T16:05:48Z,CLOSED,False,15,2,2,https://github.com/oitofelix,Mac OS X 10.6 fixes,2,[],https://github.com/liballeg/allegro5/pull/717,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/717#issuecomment-274237999,"Fix build in Mac OS X 10.6. The default compiler provided by XCode 4.2 is llvm-gcc-4.2 which fails to compile modules for which gl_ext.h redefines type ALLEGRO_OGL_EXT_LIST. This isn't an issue for later versions of GCC which allow for such redefinitions. This fix is important, though, because that's the latest GCC officially released by Apple for such system, and I couldn't build an working Allegro using compilers provided by MacPorts, since although builds were successfully completed, Allegro systematically segfaulted at misaligned_stack_error system function for any program.


Fix warnings ""__NSAutoreleaseNoPool(): Object ? of class ? autoreleased with no pool in place - just leaking"" when building or modifying menus under Mac OS X 10.6.","Merged as 53a775e, thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,722,2017-01-22T01:53:27Z,2017-02-05T05:11:16Z,2017-02-05T05:13:29Z,CLOSED,False,167,37,12,https://github.com/oitofelix,Implement al_clear_keyboard_state function in order to remedy issue #721,4,[],https://github.com/liballeg/allegro5/pull/722,https://github.com/oitofelix,1,https://github.com/liballeg/allegro5/pull/722,"See issue #721.
PS: I didn't mark al_clear_keyboard_state with ""Since: 5.2.3""","See issue #721.
PS: I didn't mark al_clear_keyboard_state with ""Since: 5.2.3""",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,722,2017-01-22T01:53:27Z,2017-02-05T05:11:16Z,2017-02-05T05:13:29Z,CLOSED,False,167,37,12,https://github.com/oitofelix,Implement al_clear_keyboard_state function in order to remedy issue #721,4,[],https://github.com/liballeg/allegro5/pull/722,https://github.com/fatcerberus,2,https://github.com/liballeg/allegro5/pull/722#issuecomment-274302923,"See issue #721.
PS: I didn't mark al_clear_keyboard_state with ""Since: 5.2.3""","I suggested implementing something like this on the forums about a year ago and got all kinds of flak for it. :(
https://www.allegro.cc/forums/thread/615411
Oh well, good to see it finally got implemented anyway.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,722,2017-01-22T01:53:27Z,2017-02-05T05:11:16Z,2017-02-05T05:13:29Z,CLOSED,False,167,37,12,https://github.com/oitofelix,Implement al_clear_keyboard_state function in order to remedy issue #721,4,[],https://github.com/liballeg/allegro5/pull/722,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/722#issuecomment-274303913,"See issue #721.
PS: I didn't mark al_clear_keyboard_state with ""Since: 5.2.3""","Nah, we discussed it on the mailing list (https://mail.gna.org/public/allegro-developers/2015-05/msg00006.html) in response to that thread and decided that it's probably fine, just needs to be implemented.
As for this PR, it's a fine start but I'll very likely add a boolean parameter to that function whether to send the KEY_UP events or not when it is called, for people that maintain their own state and would like to just receive the virtual key events instead of tracking the internal Allegro keyboard state, or doing manual reset logic. To be clear, you don't need to implement this, but if you start using the function right away be aware that it'll be modified a bit soon after this is merged.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,722,2017-01-22T01:53:27Z,2017-02-05T05:11:16Z,2017-02-05T05:13:29Z,CLOSED,False,167,37,12,https://github.com/oitofelix,Implement al_clear_keyboard_state function in order to remedy issue #721,4,[],https://github.com/liballeg/allegro5/pull/722,https://github.com/oitofelix,4,https://github.com/liballeg/allegro5/pull/722#issuecomment-274309846,"See issue #721.
PS: I didn't mark al_clear_keyboard_state with ""Since: 5.2.3""","Optional key up batch event dispatch has been implemented, as suggested by @SiegeLord, with a minor modification: it has an ALLEGRO_DISPLAY * parameter (instead of a simple boolean) for a more general and consistent behavior, given that al_clear_keyboard_state is mainly intended to be used in response to ALLEGRO_EVENT_DISPLAY_SWITCH_OUT events, that carry a display source.  Furthermore, ALLEGRO_EVENT_KEY_UP events must provide a display anyway.

al_clear_keyboard_state (ALLEGRO_DISPLAY *display)
Clear the state of the keyboard, emitting ALLEGRO_EVENT_KEY_UP for each currently pressed key.  The given display is regarded as the one which had the keyboard focus when the event occurred.  In case display is NULL no event is emitted.  For most keyboard drivers Allegro maintains its own state of the keyboard, which might get out of sync with the real one.  This function is intended to remedy such situation by resetting Allegro's keyboard state to a known default (no key pressed).  This is particularly useful in response to ALLEGRO_EVENT_DISPLAY_SWITCH_OUT events.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,722,2017-01-22T01:53:27Z,2017-02-05T05:11:16Z,2017-02-05T05:13:29Z,CLOSED,False,167,37,12,https://github.com/oitofelix,Implement al_clear_keyboard_state function in order to remedy issue #721,4,[],https://github.com/liballeg/allegro5/pull/722,https://github.com/oitofelix,5,https://github.com/liballeg/allegro5/pull/722#issuecomment-274351805,"See issue #721.
PS: I didn't mark al_clear_keyboard_state with ""Since: 5.2.3""","While reimplementing MININIM's keyboard handling code, I came across a bug in my implementation of al_clear_keyboard_state for the X11 driver.  It has been fixed in the commit ceecfde.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,722,2017-01-22T01:53:27Z,2017-02-05T05:11:16Z,2017-02-05T05:13:29Z,CLOSED,False,167,37,12,https://github.com/oitofelix,Implement al_clear_keyboard_state function in order to remedy issue #721,4,[],https://github.com/liballeg/allegro5/pull/722,https://github.com/oitofelix,6,https://github.com/liballeg/allegro5/pull/722#issuecomment-274550141,"See issue #721.
PS: I didn't mark al_clear_keyboard_state with ""Since: 5.2.3""","While testing MININIM on Mac OS X, I realized that I had forgotten to implement al_clear_keyboard_state backend for that system.  It has been implemented in commit 51247b7.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,722,2017-01-22T01:53:27Z,2017-02-05T05:11:16Z,2017-02-05T05:13:29Z,CLOSED,False,167,37,12,https://github.com/oitofelix,Implement al_clear_keyboard_state function in order to remedy issue #721,4,[],https://github.com/liballeg/allegro5/pull/722,https://github.com/oitofelix,7,https://github.com/liballeg/allegro5/pull/722#issuecomment-274551677,"See issue #721.
PS: I didn't mark al_clear_keyboard_state with ""Since: 5.2.3""","Just for the record, I've tested MININIM's new keyboard handling code which makes use of al_clear_keyboard_state on GNU/Linux (Debian 8 and Ubuntu 16.04), Windows XP and Mac OS X 10.6, and it works as expected.
Is there anything else I can help with regarding al_clear_keyboard_state implementation before merging this PR?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,722,2017-01-22T01:53:27Z,2017-02-05T05:11:16Z,2017-02-05T05:13:29Z,CLOSED,False,167,37,12,https://github.com/oitofelix,Implement al_clear_keyboard_state function in order to remedy issue #721,4,[],https://github.com/liballeg/allegro5/pull/722,https://github.com/gh0stwizard,8,https://github.com/liballeg/allegro5/pull/722#issuecomment-275850349,"See issue #721.
PS: I didn't mark al_clear_keyboard_state with ""Since: 5.2.3""","As I see there are left some issues with platform-specific code. For instance, static variable modifiers in file src\win\wkeyboard.c was not updated to 0 by clear_keyboard_state(void).
The second notice is that unichar element of the struct ALLEGRO_KEYBOARD_EVENT was not updated by al_clear_keyboard_state(ALLEGRO_DISPLAY *display). As I see unichar is filled by platform-specific code too. This is minor issue but anyway, just to note.
Everything else is cool, except some minor optimization of al_clear_keyboard_state(ALLEGRO_DISPLAY *display):
         /* because of _al_event_source_emit_event() makes a copy of event's struct
          * we fill-in elements only once and modify only valuable of them 
          * in the loop below. */
         ALLEGRO_EVENT event;
         event.keyboard.type = ALLEGRO_EVENT_KEY_UP;
         event.keyboard.timestamp = al_get_time();
         event.keyboard.display = display;
         event.keyboard.modifiers = 0;
         for (keycode = ALLEGRO_KEY_A; keycode < ALLEGRO_KEY_MAX; keycode++) {
            if (al_key_down(&ks, keycode)) {
               event.keyboard.keycode = keycode;
               event.keyboard.unichar = 0; /* TODO: platform-specific code */
               _al_event_source_emit_event(es, &event);
            }
         }
But may be I am wrong, just my thoughts.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,722,2017-01-22T01:53:27Z,2017-02-05T05:11:16Z,2017-02-05T05:13:29Z,CLOSED,False,167,37,12,https://github.com/oitofelix,Implement al_clear_keyboard_state function in order to remedy issue #721,4,[],https://github.com/liballeg/allegro5/pull/722,https://github.com/SiegeLord,9,https://github.com/liballeg/allegro5/pull/722#issuecomment-275866670,"See issue #721.
PS: I didn't mark al_clear_keyboard_state with ""Since: 5.2.3""","The unichar field is only filled in ALLEGRO_KEY_CHAR events which are emitted contemporaneously to the ALLEGRO_KEY_DOWN events, so I think the omission is fine here. I'm pretty happy with the code as it is, I'll just do more tests this weekend (and check out that modifiers issue) and then it's good to go.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,722,2017-01-22T01:53:27Z,2017-02-05T05:11:16Z,2017-02-05T05:13:29Z,CLOSED,False,167,37,12,https://github.com/oitofelix,Implement al_clear_keyboard_state function in order to remedy issue #721,4,[],https://github.com/liballeg/allegro5/pull/722,https://github.com/SiegeLord,10,https://github.com/liballeg/allegro5/pull/722#issuecomment-277498089,"See issue #721.
PS: I didn't mark al_clear_keyboard_state with ""Since: 5.2.3""","So I tested this on Windows, Linux and OSX and found the following oddities:
On OSX, the if you keep holding a key while switching in and out of the window, the first char event will be a repeat, while on Linux and Windows it will correctly be a non-repeat char event.
On Windows, if you keep holding shift + letter and then switch in and out, the modifiers will not be set correctly after a switch in (this isn't the same thing pointed out above). OSX and Linux handle this correctly.
In all places, you get unpaired KEY_UP events if you switch in with a held key... surely we can use the cleared state to detect them and not send them.
But either way, those are not blocking issues... I'll file a bug about them and we'll fix them as time goes on, while merging this meanwhile. Thanks for your hard work making this! Merged as aba9e6a.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,722,2017-01-22T01:53:27Z,2017-02-05T05:11:16Z,2017-02-05T05:13:29Z,CLOSED,False,167,37,12,https://github.com/oitofelix,Implement al_clear_keyboard_state function in order to remedy issue #721,4,[],https://github.com/liballeg/allegro5/pull/722,https://github.com/SiegeLord,11,https://github.com/liballeg/allegro5/pull/722#issuecomment-277498157,"See issue #721.
PS: I didn't mark al_clear_keyboard_state with ""Since: 5.2.3""",And here's the issue with the above observations: #728,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,724,2017-01-25T09:22:19Z,2017-01-27T03:17:07Z,2017-01-27T15:04:38Z,MERGED,True,20,10,1,https://github.com/oitofelix,Fix al_remove_config_section and al_remove_config_key ASSERT crash,1,[],https://github.com/liballeg/allegro5/pull/724,https://github.com/oitofelix,1,https://github.com/liballeg/allegro5/pull/724,"Fix al_remove_config_section and al_remove_config_key ASSERT crash in al_ref_cstr, when invoked with a NULL section (which conventionally represents the global section).","Fix al_remove_config_section and al_remove_config_key ASSERT crash in al_ref_cstr, when invoked with a NULL section (which conventionally represents the global section).",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,724,2017-01-25T09:22:19Z,2017-01-27T03:17:07Z,2017-01-27T15:04:38Z,MERGED,True,20,10,1,https://github.com/oitofelix,Fix al_remove_config_section and al_remove_config_key ASSERT crash,1,[],https://github.com/liballeg/allegro5/pull/724,https://github.com/elias-pschernig,2,https://github.com/liballeg/allegro5/pull/724#issuecomment-275580283,"Fix al_remove_config_section and al_remove_config_key ASSERT crash in al_ref_cstr, when invoked with a NULL section (which conventionally represents the global section).","Thanks! I didn't know you can use NULL instead of """", but it does make sense to allow it.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/gh0stwizard,1,https://github.com/liballeg/allegro5/pull/725,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/gh0stwizard,2,https://github.com/liballeg/allegro5/pull/725#issuecomment-275876023,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","Additional notes:

Better to say if a display was created like that: ALLEGRO_WINDOWED | ALLEGRO_RESIZABLE | ALLEGRO_MAXIMIZED and not just ALLEGRO_MAXIMIZED.
Added the example to reproduce the bug. It may be wrong because I don't know yet how to find out the default adapter id for all platforms, I just hardcoded 0. Just to clarify the moment.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/elias-pschernig,3,https://github.com/liballeg/allegro5/pull/725#issuecomment-275887286,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!",Should I not be allowed to constrain a window to a certain size while it is maximized? For example if I want my window to never be smaller than 100x100 but it is currently maximized. There may be a mismatch between the function name (al_set_window_constraints) and what it does (do a one-time resize if the size is outside the passed range)?,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/gh0stwizard,4,https://github.com/liballeg/allegro5/pull/725#issuecomment-275908497,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","Indeed. I have changed the code and now the new window is maximized and restricted to be never less than minimum values specified by al_set_window_constraints().
Changes related only to Win32. See information about other platforms below:

raspberrypi_set_window_constraints() is not implemented
xgtk_set_window_constraints() is not implemented
xdpy_set_window_constraints_default() probably is need a patch and testing. As I see, it contains a code to choose the appropriate width & height of the window, but this code does incorrect decision:

   int w = glx->display.w;
   int h = glx->display.h;

   if (min_w > 0 && w < min_w) {
      w = min_w;
   }
   if (min_h > 0 && h < min_h) {
      h = min_h;
   }
   if (max_w > 0 && w > max_w) {  /* <-- how is this possible? resize ""down""? */
      w = max_w;
   }
   if (max_h > 0 && h > max_h) {
      h = max_h;
   }

   /* Resize the display to its current size so constraints take effect. */
   al_resize_display(display, w, h);
Anyway, I have to build Allegro under GNU/Linux to see how is really working. This will take a time.
I had not found out anything about other platforms. May be I had missed something.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/elias-pschernig,5,https://github.com/liballeg/allegro5/pull/725#issuecomment-275914353,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","I think if your window is already 1000x1000, then you do al_set_window_constraints(500, 500), it will resize the window down. Anyway, I have never used this function and I'm not clear what the purpose is. There is two general ideas:
A. Do what the name says and just set constraints which would restrict a future resize. This should then work even while maximized as the current size would not matter.
B. Only do an adjustment of the current size but don't restrict future resizes. This would of course make no sense while the window is maximized.
And I suppose both of those could be combined into one function which always does both. The documentation right now is not clear on which it is (but the name hints at just A) - so before changing any code we have to decide what the function should do. Then document it and fix it if it is not working as it should.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/gh0stwizard,6,https://github.com/liballeg/allegro5/pull/725#issuecomment-275924372,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","I think if your window is already 1000x1000, then you do al_set_window_constraints(500, 500), it will resize the window down.

The al_set_window_constraints() contains four parameters: min_w, min_h, max_w, max_h. So, if I have a window 1000x1000 and then call al_set_window_constraints(500, 500, 1000, 1000), what do we have to expect?

A) should the window to be resized to 500x500
B) or should it be left as is with 1000x1000

The current version of Allegro is choosing the variant A. Meanwhile, a human (i.e. me) must decide when I wish it or do not. I may call al_resize_display() if I need this. In case of maximized window I wish that Allegro has choose the variant B: either resize the window again to 1000x1000 or left it untouched.
But. There is one more issue. Under Win32 after un-maximizing such a window, the previously set upper limits starts working as intended (i.e. limiting and creating ""broken"" maximized windows).
Also I see that for X11 there is special code exists to handle a maximized window in the file src\x\xwindow.c, function void _al_xwin_maximize(ALLEGRO_DISPLAY *display, bool maximized), which sets correct maximum values for window bypassing constraints. In comparison with Win32, where constraints are workine: there is possibility to create ""broken"" maximized windows after their re-maximizing. It is ok, because I can pass to al_set_window_constraints() correct values, but it should not touch the already maximized window (patch above does).
All of this leads to the point that currently the function al_set_window_constraints() resizing the window when it is needed and not needed. So, my point is that al_set_window_constraints() must set constraints only and never touch the size of the current display, no unexpected resizes. If somebody needs to resize a window it can handle it by themselves.
In other words, the current implementation of the function al_set_window_constraints() is working only with lower limits (mins) and does not take into account the upper limits (maxs). Either more complicated logic must be created (and described) or keep it as simple as possible. We can resize the current window only and only when the current sizes are out of the specified constraints.
My case is simple:
al_set_new_display_flags(ALLEGRO_WINDOWED | ALLEGRO_RESIZABLE | ALLEGRO_MAXIMIZED);
display = al_create_display(DISPLAY_W, DISPLAY_H);

/* I set constraints to lower limits only, but.... */

/* Quote from docs: */
/* A value of 0 for any of the parameters indicates no constraint for that parameter. */
al_set_window_constraints(display, DISPLAY_W/2, DISPLAY_H/2, 0, 0);
/* does not work */

/* OK: computer listen to my command! */
al_set_window_constraints(display, DISPLAY_W/2, DISPLAY_H/2, DISPLAY_W, DISPLAY_H);
/* does not work */
IMHO.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/goob256,7,https://github.com/liballeg/allegro5/pull/725#issuecomment-275925231,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","I think @gh0stwizard's summary looks good. If it's maximized then apply the constraints once it has been un-maximized. Otherwise apply to future resizes but do not resize right away. This could be an issue though. If you have a 1200x1200 window and set a max 1000x1000 size and then drag the window border, what happens? Perhaps the function should resize the window to fit in the max dimensions (ie, if it's 1200x800, size it to 1000x800.)) Would then also make sense to bump sizes up to the minimum if they're below.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/goob256,8,https://github.com/liballeg/allegro5/pull/725#issuecomment-275934137,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","We should either resize the window to fit in the constraints (eg if it's too small, make it bigger, if it's too big, make it smaller) or add a note in the documentation that you should make sure to resize the window before applying constraints if it's currently not within the constraints to avoid an inconsistent state. IMO the latter would be better because it's more consistent with maximized window behaviour and also fully backwards compatible.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/gh0stwizard,9,https://github.com/liballeg/allegro5/pull/725#issuecomment-275936826,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","New patch applied. I have made it in the same manner as it does by xdpy_set_window_constraints_default() from src/x/xdisplay.c now:

find out current window size via GetClientRect()
compare values from GetClientRect with that user has defined, i.e min_w, min_h, max_w, max_w
call al_resize_display() with w & h appropriate to their own ranges:

min_w < w <max_w (min_w > 0, max_w > 0)
min_h < h < max_h (min_h > 0, max_h > 0)



Results are:

when called al_set_window_constraints(display, min_w, min_h, 0, 0) for a window with ALLEGRO_MAXIMIZED: the window left untouched, but min_w, min_h will be applied as constraints after window's restoring.
when called al_set_window_constraints(display, 0, 0, max_w, max_h) for a window with ALLEGRO_MAXIMIZED: the window will be resized to max_w, max_h as intended.

And the rule from docs is working too: ""A value of 0 for any of the parameters indicates no constraint for that parameter.""
P.S. Stupid MSVS ""fixed"" tabs/spaces where it is not needed. Sorry, my mistake.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/elias-pschernig,10,https://github.com/liballeg/allegro5/pull/725#issuecomment-275955462,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","I agree with goobliata, the latter option sounds better to me (mainly because of how the function is named so in my mind it should only set the constraints but not apply them). That is, al_set_window_constraints should never do a resize (even if the current size is smaller/larger). It would just prevent the window from ever getting resized to a size smaller than the minimum or larger than the maximum constraint in future resizes.
If you maximize a window I think that should just ignore the constraint altogether. Same with toggling fullscreen. If you don't want the window to be maximized or fullscreened - just don't enable the buttons for it. The constraints would only apply to the user resizing a user-resizable window by dragging its borders/corners.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/goob256,11,https://github.com/liballeg/allegro5/pull/725#issuecomment-275972441,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","I was trying to articulate this potential issue with what you said @elias-pschernig. It depends on how the windowing system works though which I don't know. And that is: say you have a window that's 1000x1000 and you then constrain it to 500x500. If the window isn't resized automatically, what's going to happen when you drag the border? Will it jump to 500x500? That's the tricky bit.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/elias-pschernig,12,https://github.com/liballeg/allegro5/pull/725#issuecomment-275973959,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","If possible I'd like to leave that up to the underlying windowing system (assuming Windows, OSX and X11 all have a concept of size constraints). But I don't know either - would have to experiment. Basically if Allegro has to do a ton of work to ""fight"" the underlying window manager I think we are doing it wrong. Otherwise I'm really fine with any solution as long as it is documented.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/gh0stwizard,13,https://github.com/liballeg/allegro5/pull/725#issuecomment-276756824,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","I assume that we may introduce a new flag to enable or disable automatic calls to al_resize_display() inside of al_set_window_constraints(). First, it will not break already existed code. The second, it give us a flexibility. But may be this is not good idea?
At the moment of writing this I see that there is still open an issue with how we must control upper limits for constraints. Let's assume the next case:

we have a maximized window.
we call al_set_window_constraints(min_w, min_h, max_w, max_h); where max_w & max_h are lower than sizes of the maximized window.
under Win32 this leads to creating ""ugly"" maximized window with update width/height (see picture in the first post). And later maximizations & de-maximizations keeps such state.
under GNU/Linux this does nothing: maximized window stays maximized as before (if de-maximize such a window then constraints are working properly; and the next maximization will maximize the window bypassing constraints to the first/original maximized state).
under Mac OS: I don't know what's happening. I have to install Darwin, not sure if my PC is able to emulate it under vmware...

I am asking this because this is responsibility of al_set_window_constraints(). I am not sure what is best. Probably we have to provide a flexible way to control the behavior above too.
Anyway, I may code everything, just tell me what to do.
Current state of changes in the pull request:

It is fixing the original issue under Win32
Added the example to testing.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/goob256,14,https://github.com/liballeg/allegro5/pull/725#issuecomment-276818677,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","I think to get consistent behaviour is going to require a lot of code that taps when the window gets maximized/unmaximized and applies constraints at that time. If we were to do that then the current Linux behaviour is obviously better to go with.
So basically if a window has constraints and it gets maximized, clear the constraints (but save the info) and then if/when it's unmaximized apply the saved info.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/goob256,15,https://github.com/liballeg/allegro5/pull/725#issuecomment-289584704,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","I forget what was happening with this, what's the status right now?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/gh0stwizard,16,https://github.com/liballeg/allegro5/pull/725#issuecomment-289597486,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","@goobliata

Well, the plan was that we will have the same behavior for major three: Win32, *nix (X11) and MacOS.
Currently, this patch is for Win32 only. And it repeats the behavior of X11 (*nix).
I could not found a time to see what is situation under Mac OS. So, the ticket is stalled at the moment.

It would be great if someone with Mac OS will perform tests and will answer to this topic how constraints are working with trunk or stable. The patch also includes a simple test program (it uses only one key ""spacebar"", also this is mentioned in comments of the program) for those who are lazy to write its own.
The behavior under X11 was described here: #725 (comment)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/goob256,17,https://github.com/liballeg/allegro5/pull/725#issuecomment-295325434,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","I think I agree with Elias that al_set_window_constraints shouldn't ever resize the window. It sounds from what I'm reading that with this patch it will resize the window if it's maximized and you then set a max_w/max_h constraint? I think it should probably just ignore constraints when maximized (again like Elias said). To do this it might have to clear the constraints before maximizing and re-apply them afterwards.
If this is already the way it is, let me know, I may have misread. Once this is done I can check it on macOS.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/gh0stwizard,18,https://github.com/liballeg/allegro5/pull/725#issuecomment-295364586,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","@goobliata

I think I agree with Elias that al_set_window_constraints shouldn't ever resize the window.

That's OK, because I am happy with both behaviors.

It sounds from what I'm reading that with this patch it will resize the window if it's maximized and you then set a max_w/max_h constraint?

Yes, indeed.

If this is already the way it is, let me know,

No, it does not. I will do my best ASAP.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/goob256,19,https://github.com/liballeg/allegro5/pull/725#issuecomment-296197071,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","I've tested this as-is on macOS. The current results are:
If I use 320x240 as min size, I can maximize/unmaximize and the constraint has no effects (makes sense.) If I set the min_w, min_h bigger than my screen, when I un-maximize it resizes to min_w, min_h (I used 5000x5000 and un-maximizing creates this huge window.) Also I can properly maximize the window with these large constraints, it takes the size of the screen.
With max_w, max_h set I cannot really maximize the window, clicking maximize expands the window to 640x480.
So case 1 (min_w, min_h) seems correct. Case 2 (max_w, max_h) needs to clear the constraints when you click maximize then re-apply them after un-maximizing.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/goob256,20,https://github.com/liballeg/allegro5/pull/725#issuecomment-297597504,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!",I thought we were going to remove the al_resize_display and let the window manager handle it? You could still do it manually if you wanted the constraints applied right away. Seems like the most flexible way to do it.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/gh0stwizard,21,https://github.com/liballeg/allegro5/pull/725#issuecomment-297601382,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","@goobliata

I thought we were going to remove the al_resize_display and let the window manager handle it?

This is not an issue. I assume we have to play with it when everything will work as expected. I don't very like remove al_resize_display(), because it may be a cause of strange behaviors, especially if one forgot to call al_resize_display() right after al_set_window_constraints(). You may try it already on win32.
There is another reason why I did not removed it. Meantime constraints on win32 may work without al_resize_display() due its architecture (I have tested it already), the X11 system will still use al_resize_display() due some hacks (until someone resolve them).
And thanks about the report on MacOS. As I see the problem is the same as it was on win32.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/goob256,22,https://github.com/liballeg/allegro5/pull/725#issuecomment-298201061,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","I'm not completely against having an al_resize_display in there.
I had a look at it on Windows with this patch. It doesn't look like the window is maximized properly in ex_window_maximized? Here's a screenshot:

There is a border around the window that wouldn't be there if it was properly maximized.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/gh0stwizard,23,https://github.com/liballeg/allegro5/pull/725#issuecomment-298215988,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","I'm not completely against having an al_resize_display in there.

As I said, this is not an issue. At the moment I am trying to install MacOS because it's need a fix.

I had a look at it on Windows with this patch. It doesn't look like the window is maximized properly in ex_window_maximized?

Thanks for report. It is not a bug of the patch. As I see, the bug exists in Allegro 5.2.2 also. This is caused by WS_EX_OVERLAPPEDWINDOW when ALLEGRO_RESIZABLE is set in the file src/win/wwindow.c:
static void display_flags_to_window_styles(int flags,
   DWORD *style, DWORD *ex_style)
{
   if (flags & ALLEGRO_FULLSCREEN) {
      *style = WS_POPUP;
      *ex_style = WS_EX_APPWINDOW;
   }
   else if (flags & ALLEGRO_RESIZABLE) {
      *style = WS_OVERLAPPEDWINDOW;
      *ex_style = WS_EX_APPWINDOW | WS_EX_OVERLAPPEDWINDOW;
   }
   else {
      *style = WS_CAPTION | WS_SYSMENU | WS_MINIMIZEBOX;
      *ex_style = WS_EX_APPWINDOW;
   }
}
I suppose it is better to create another patch for this, IMHO.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/goob256,24,https://github.com/liballeg/allegro5/pull/725#issuecomment-298216618,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","OK. If you can do the same for macOS great. I'd like for that to be done before I accept this, as the documentation changes would suggest differently than the current OS X behaviour. Thanks.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/gh0stwizard,25,https://github.com/liballeg/allegro5/pull/725#issuecomment-298332955,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","Just want to tell that I have managed to install MacOS & all stuff needed for the development. Until today I was thought that it would be an easy cake, but now I see there are multiple issues related to windows sizing & placing under MacOS. And fixing them will consume some amount of time. Can't say how good and fast I would be, I hope I will done till the next weekend.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/goob256,26,https://github.com/liballeg/allegro5/pull/725#issuecomment-298333305,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","It's not a rush, I've got all the time in the world.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/gh0stwizard,27,https://github.com/liballeg/allegro5/pull/725#issuecomment-301263130,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","I have fixed all issues related to window constraints & ALLEGRO_MAXIMIZED flag under MacOS. Sorry, that it took so long. I have got a new job and just did not have a time to complete this task.
Can you test it?
We can get rid off al_resize_display() as planned. All three platforms are ready to this step. So, if you will like the patch, then I will remove al_resize_display() and fix the docs too.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/goob256,28,https://github.com/liballeg/allegro5/pull/725#issuecomment-301575936,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!",Looks good. Works fine for me on OS X. So if you remove the al_resize_display I'll merge it. Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/goob256,29,https://github.com/liballeg/allegro5/pull/725#issuecomment-301576368,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!",I think it would be good to have a function that would resize a window to the constraints but as a separate function. So you could set the constraints and then if you want it applied right away call al_respect_constraints(display); (example function name).,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/gh0stwizard,30,https://github.com/liballeg/allegro5/pull/725#issuecomment-301677591,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","@goobliata

Looks good. Works fine for me on OS X. So if you remove the al_resize_display I'll merge it. Thanks!

Yes, I will do it. There is a need to change docs still.

I think it would be good to have a function that would resize a window to the constraints but as a separate function. So you could set the constraints and then if you want it applied right away call al_respect_constraints(display); (example function name).

Good. Am I correct that the new function will do the same as does al_set_window_constraints() now? I mean, it will set new constraints and apply them right away by calling al_resize_display().",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/goob256,31,https://github.com/liballeg/allegro5/pull/725#issuecomment-301815797,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","Good. Am I correct that the new function will do the same as does al_set_window_constraints() now? I mean, it will set new constraints and apply them right away by calling al_resize_display().

The idea was that it would just resize the window to the constraints, it wouldn't set any constraints. It would just use the existing ones.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/gh0stwizard,32,https://github.com/liballeg/allegro5/pull/725#issuecomment-301845066,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","The idea was that it would just resize the window to the constraints, it wouldn't set any constraints. It would just use the existing ones.

To resize a window to previously set constraints it would be enough to call:
al_resize_display(display, al_get_display_width(display), al_get_display_height(display));
That is, if the current w & h of a window do not in a range of the constraints, then the window will be resized. I am not sure that such a simple thing should be implemented. At least it can be a macro. What do you think? Are we really need it?
Actually, I thought about this (without brackets to simplicity):
#define al_respect_constraints(display, min_w, min_h, max_w, max_h) \
    if (al_set_window_constraints(display, min_w, min_h, max_w, max_h))
        al_resize_display(display, al_get_display_width(display), al_get_display_height(display));
Almost the same, just for another use case.
I think that if we clarify the new behavior of al_set_window_constraints(). then developers will do it as they wish themselves.
P.S. I understood what you want. The current implementation of al_set_window_constraints() actually pass constraints to underlying OS level (depending on does a window maximized/FS_WINDOW or does not). To just remember constraints inside of internals of allegro the code must be rewritten a bit. I did not mention about this before. But it is possible to be done.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/gh0stwizard,33,https://github.com/liballeg/allegro5/pull/725#issuecomment-301850820,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","To summarize and that we all be agree, next goals are:

al_set_window_constraints() just remembers user's constraints;
a new function al_apply_window_constraints(DISPLAY *display) will apply new constraints (that is, pass them to OS level) and if there is a need resize a window;
update documentation and tell about such changes;
update examples (otherwise, they stop working).

Is ""apply"" better then ""respect"" in this case? I mean about a new function: al_apply_window_constraints() or al_respect_window_constraints(). I am not a native English speaker and it is hard to distinguish which is best to me.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/goob256,34,https://github.com/liballeg/allegro5/pull/725#issuecomment-301858592,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!",Actually just forget about al_apply_window_constraints. If al_resize_display() with the window size will work then there is no need for it. I think all that needs to be done is to remove the resize and update the documentation.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/goob256,35,https://github.com/liballeg/allegro5/pull/725#issuecomment-302915883,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!",After reading this over again maybe you're right and there should indeed be an al_apply_window constraints. apply would be a better word.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/gh0stwizard,36,https://github.com/liballeg/allegro5/pull/725#issuecomment-302928855,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","@goobliata
Alright, I am ready to finish this task today. I am willing to ask about one thing:
If we will implement the al_apply_window constraints function I see no other way except adding a new field to struct ALLEGRO_DISPLAY, for instance, bool use_constraints. Also, possibly (I am not sure yet), a new virtual function should be added to struct ALLEGRO_DISPLAY_INTERFACE, for instance, apply_window_constraints.
The use_constraints field will be used so if it is set to true, then OS specific code will use constraint's values. This is required because Win32 and OS X set constraints by asking application about current sizes of the window via asynchronous ""messages"". Also, this field might be used by the al_resize_display function.
The virtual function apply_window_constraints will call platform specific code to set or remove constraints from OS level. I am not sure about is it really necessary to implement it, but it might be useful to simplify implementation.
Such changes will break ABI compatibility as I know. It is ok to do so?
If yes, I will start to change the code. If no, then I simply remove the al_resize_display from the al_set_window_constraints function, but min. constraints will be automatically applied to a window if set (I have explained why early).
Implementation notes:
/* al_apply_window_constraints: enable or disable using window constraints.
 * If enabled then previously set window constraints will be used by a window.
 * If disabled, then a window will not use constraints.
 */
void al_apply_window_constraints(DISPLAY *display, bool onoff)
{
   display->use_constraints = onoff;

   /* Platform specific code to set or remove constraints.
    * This is required at least on OS X, for instance, by calling 
    * [window setContentMaxSize: max_size] and [window setContentMinSize: min_size].
    */
   if (display && display->vt && display->vt->apply_window_constraints)
      display->vt->apply_window_constraints(display, onoff);
}",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/gh0stwizard,37,https://github.com/liballeg/allegro5/pull/725#issuecomment-304438079,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","I have finished implementation of al_apply_window_constraints(). Here is the report about overall changes:

Added documentation about changes: updated al_set_window_constraints, added information for al_apply_window_constraints;
Updated examples: ex_projection2.c, ex_window_constraints.c: added call to al_apply_window_constraints();
Added a new example: ex_window_maximized.c: shows how works a maximized window w/wo constraints;
Behavior of al_set_window_constraints() function has been changed: it just sets values of constraints only and does not try to resize a window;
A new function al_apply_window_constraints() has been added: it applies previously set constraints to a window, and if current sizes of the window do not fit in ranges of constraints, then the window may be resized (see documentation for more information);
Fixed bug under Win32: if a window is maximized it has no border;
Fixed bug under OS X: al_create_display() with ALLEGRO_MAXIMIZED creates maximized (zoomed) window now;
Changes was made and tested under Windows 7 64-bit (MSVS 2015), GNU/Linux (GNOME 3, gcc-6.2), OS X Mavericks (XCode 6.2).

New issues & bugs:

OS X: fail to apply constraints  when a window restores its state from the fullscreen mode to windowed one. I was unable to found out how to fix it in a short period of time; there is a events (messages) hell. Tested under Mavericks (10.9.5). I will try to fix it again in this weekend.

A basic example how constraints are working with new changes:
/* set constraints to a display:  minimum 300x200, maximum 800x600 */
if (!al_set_window_constraints(display, 300, 200, 800, 600)) {
   fprintf(stderr, ""failed to set constraints to display\n"");
   exit(1);
}

/* apply constraints so they take effect right now */
al_apply_window_constraints(display, true);

/* your code [...] */

/* completely disable constraints */
al_apply_window_constraints(display, false);
Is anything else I have to do (change)? May be I had missed something. And if you don't like it I can revert changes and create another implementation or change existing one.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/goob256,38,https://github.com/liballeg/allegro5/pull/725#issuecomment-304465085,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!",The only change I'd like to see is to move the new vtable methods and variables to the end of the DISPLAY structures to maintain ABI compatibility.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/gh0stwizard,39,https://github.com/liballeg/allegro5/pull/725#issuecomment-304507991,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","@goobliata

The only change I'd like to see is to move the new vtable methods and variables to the end of the DISPLAY structures to maintain ABI compatibility.

Done.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/goob256,40,https://github.com/liballeg/allegro5/pull/725#issuecomment-304531820,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","Have a couple issues now. On Windows resizing the window in ex_window_maximized is not extremely laggy, the window gets filled with garbage and takes a good 30 seconds to resize. Also ex_resize2 when maximised the window has a border like before.
I'm wondering for the first issue if there's a missing acknowledge_resize or something. Not sure why this particular window has a border when maximised either.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/gh0stwizard,41,https://github.com/liballeg/allegro5/pull/725#issuecomment-304535514,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","@goobliata
If you are testing ABI compatibility, then such issues do not surprise me :) Are you sure that you are running examples with the correct version of *.dll's? Please, check out the PATH environment variable.
P.S. I just did test the ex_resize2 example and it does have such an issue.
Update
New bugs:

Win32: A border width does not taken into account when a window changes its state from maximized window to restored state. This leads to that constraints values are miscalculated for the WM_GETMINMAXINFO message. This happen due the fact that GWL_EXSTYLE may be with/without WS_EX_OVERLAPPEDWINDOW flag set, depending on the state of the window (maximized or normal).
Win32: If a normal window have max constraints set and a user clicks LMB & hold it on the title of the window and later try to move the window to upper corner of the screen, then Windows ""thinks"" that such a window can be maximized up to sizes of constraints values only. This leads to creating so called broken maximized window.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/goob256,42,https://github.com/liballeg/allegro5/pull/725#issuecomment-304550219,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!",I wasn't testing ABI compatibility. That is with a regular build of this pull request. Whether the window is orange or green it messes up when I drag the corner to expand it.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/goob256,43,https://github.com/liballeg/allegro5/pull/725#issuecomment-304550478,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","One other thing I was thinking of was to make the apply_constraints state a display option, but I can do that separately after this gets sorted out.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/gh0stwizard,44,https://github.com/liballeg/allegro5/pull/725#issuecomment-304575938,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","@goobliata

Whether the window is orange or green it messes up when I drag the corner to expand it.

The cause of it was that exposure events were not handled. I have fixed it recently. I confirm that there are some issues with resizing a window under Win32, but they are not related to this patch. Probably I have coded the example in a wrong way.
Back to your issues.

On Windows resizing the window in ex_window_maximized is not extremely laggy, the window gets filled with garbage and takes a good 30 seconds to resize.

I confirm that there was a garbage when resizing the window. But I did not understood about lags and 30 seconds. Can you explain this case better?

Also ex_resize2 when maximised the window has a border like before.

Do you still have this bug? If ex_window_maximized does not have this bug and ex_resize2 does, then this is extremely strange. I assume in this case that ex_resize2 uses old allegro *.dll files.
In case if the both examples have this bug, then it is possible that I had missed something. Did you test under Windows 10? Or compiled with MSVS 2017? Perhaps there is some WINAPI changes, and I don't know about them.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,725,2017-01-28T20:51:11Z,2017-05-30T18:25:58Z,2017-05-30T18:25:59Z,MERGED,True,459,107,15,https://github.com/gh0stwizard,patch al_set_window_constraints() when the flag ALLEGRO_MAXIMIZED is set,21,[],https://github.com/liballeg/allegro5/pull/725,https://github.com/goob256,45,https://github.com/liballeg/allegro5/pull/725#issuecomment-304965253,"If a window (display) was created with the ALLEGRO_MAXIMIZED flag then call to al_set_window_constraints() will be a cause of strange behavior as depicted below:

The patch is fixing such problem.
Tested only under Windows 7, 64-bit.
Thanks!","Sorry, I was on the wrong branch.
Thanks for your hard work on this update. I'll merge it now!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,726,2017-02-02T10:30:33Z,2017-02-25T20:55:04Z,2017-02-25T20:55:04Z,CLOSED,False,2,2,1,https://github.com/oitofelix,Fix newlines being added ad-infinitum to config files,1,[],https://github.com/liballeg/allegro5/pull/726,https://github.com/oitofelix,1,https://github.com/liballeg/allegro5/pull/726,"Prevent config_write_section from adding superfluous newlines for empty comments, which spontaneously arise when using al_remove_config_* functions.
When saving settings to its main configuration file, MININIM (my Allegro-based game) uses al_get_first_*, al_get_next_* and al_remove_config_* functions to remove any duplicate keys (irregardless of case) to ensure each entry is unique.  Oddly enough, this results in new lines being added before reinserted entries for each removal.  Over time the configuration file gets bigger, sparse and thus confuse to human readers.","Prevent config_write_section from adding superfluous newlines for empty comments, which spontaneously arise when using al_remove_config_* functions.
When saving settings to its main configuration file, MININIM (my Allegro-based game) uses al_get_first_*, al_get_next_* and al_remove_config_* functions to remove any duplicate keys (irregardless of case) to ensure each entry is unique.  Oddly enough, this results in new lines being added before reinserted entries for each removal.  Over time the configuration file gets bigger, sparse and thus confuse to human readers.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,726,2017-02-02T10:30:33Z,2017-02-25T20:55:04Z,2017-02-25T20:55:04Z,CLOSED,False,2,2,1,https://github.com/oitofelix,Fix newlines being added ad-infinitum to config files,1,[],https://github.com/liballeg/allegro5/pull/726,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/726#issuecomment-277498696,"Prevent config_write_section from adding superfluous newlines for empty comments, which spontaneously arise when using al_remove_config_* functions.
When saving settings to its main configuration file, MININIM (my Allegro-based game) uses al_get_first_*, al_get_next_* and al_remove_config_* functions to remove any duplicate keys (irregardless of case) to ensure each entry is unique.  Oddly enough, this results in new lines being added before reinserted entries for each removal.  Over time the configuration file gets bigger, sparse and thus confuse to human readers.","So the reason the code is written this way is because the config system is meant to preserve blank lines in the configuration files when loading and re-saving them. Blank lines are inserted as empty comments into the internal data-structure and that's why the code unconditionally adds a newline for each one of them.
Could you describe your problem a bit more? Do you load a config file and then just save it? Do you generate multiple config entries, then prune the duplicates and then save it?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,726,2017-02-02T10:30:33Z,2017-02-25T20:55:04Z,2017-02-25T20:55:04Z,CLOSED,False,2,2,1,https://github.com/oitofelix,Fix newlines being added ad-infinitum to config files,1,[],https://github.com/liballeg/allegro5/pull/726,https://github.com/oitofelix,3,https://github.com/liballeg/allegro5/pull/726#issuecomment-277710983,"Prevent config_write_section from adding superfluous newlines for empty comments, which spontaneously arise when using al_remove_config_* functions.
When saving settings to its main configuration file, MININIM (my Allegro-based game) uses al_get_first_*, al_get_next_* and al_remove_config_* functions to remove any duplicate keys (irregardless of case) to ensure each entry is unique.  Oddly enough, this results in new lines being added before reinserted entries for each removal.  Over time the configuration file gets bigger, sparse and thus confuse to human readers.","So the reason the code is written this way is because the config system is meant to preserve blank lines in the configuration files when loading and re-saving them. Blank lines are inserted as empty comments into the internal data-structure and that's why the code unconditionally adds a newline for each one of them.

I see.  I didn't know that.

Could you describe your problem a bit more?

Sure.  I think the best way to describe it is providing you the offending code.
For instance, every time a menu item that changes a setting of MININIM is clicked on, the function ui_save_setting is invoked to ensure MININIM's main configuration file reflects such change (as to preserve it for future invocations of the game) by adding a corresponding key/value pair.  The ui_save_setting function makes sure each key pair is unique by removing any previous entries (possibly multiple, disregarding case --- this is done by remove_config_entry function) and then adding it again with the correct value pair.  Both functions are listed below:
ui_save_setting
bool
ui_save_setting (char *section, char *key, char *value)
{
  ALLEGRO_CONFIG *config = NULL;

  if (al_filename_exists (config_filename)) {
    config = al_load_config_file (config_filename);
    if (! config) goto error;
    const char *file_type_str =
      al_get_config_value (config, NULL, ""FILE TYPE"");
    if (! file_type_str
        || strcasecmp (file_type_str, ""MININIM CONFIGURATION"")) {
      al_destroy_config (config);
      config = al_create_config ();
    }
  } else if (value) {
    if (! al_make_directory (user_settings_dir)) goto error;
    config = al_create_config ();
  } else return false;

  if (! config) goto error;

  remove_config_entry (config, NULL, ""FILE TYPE"");
  al_set_config_value (config, NULL, ""FILE TYPE"", ""MININIM CONFIGURATION"");

  bool existing;
  if (key) {
    existing = remove_config_entry (config, section, key);
    if (value) al_set_config_value (config, section, key, value);
  } else existing = remove_config_section (config, section);

  if (! al_save_config_file (config_filename, config)) goto error;

  al_destroy_config (config);

  return existing;

 error:
  if (config) al_destroy_config (config);
  error (0, al_get_errno (), ""can't save setting '[%s] %s=%s' to '%s'"",
         section, key, value, config_filename);
  return false;
}
remove_config_entry
bool
remove_config_entry (ALLEGRO_CONFIG *config, char *section, char *key)
{
  ALLEGRO_CONFIG_ENTRY *iterator;
  char const *entry = al_get_first_config_entry (config, section, &iterator);

  bool removed = false;
  while (entry) {
    if (! strcasecmp (entry, key)) {
      removed = al_remove_config_key (config, section, entry);
      entry = al_get_first_config_entry (config, section, &iterator);
    } else entry = al_get_next_config_entry (&iterator);
  }

  return removed;
}
This procedure, based solely on the two aforementioned functions and their Allegro primitives, triggers the odd behavior that originated this pull request.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,726,2017-02-02T10:30:33Z,2017-02-25T20:55:04Z,2017-02-25T20:55:04Z,CLOSED,False,2,2,1,https://github.com/oitofelix,Fix newlines being added ad-infinitum to config files,1,[],https://github.com/liballeg/allegro5/pull/726,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/726#issuecomment-279250213,"Prevent config_write_section from adding superfluous newlines for empty comments, which spontaneously arise when using al_remove_config_* functions.
When saving settings to its main configuration file, MININIM (my Allegro-based game) uses al_get_first_*, al_get_next_* and al_remove_config_* functions to remove any duplicate keys (irregardless of case) to ensure each entry is unique.  Oddly enough, this results in new lines being added before reinserted entries for each removal.  Over time the configuration file gets bigger, sparse and thus confuse to human readers.",Could you try out #731?,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,726,2017-02-02T10:30:33Z,2017-02-25T20:55:04Z,2017-02-25T20:55:04Z,CLOSED,False,2,2,1,https://github.com/oitofelix,Fix newlines being added ad-infinitum to config files,1,[],https://github.com/liballeg/allegro5/pull/726,https://github.com/SiegeLord,5,https://github.com/liballeg/allegro5/pull/726#issuecomment-282511754,"Prevent config_write_section from adding superfluous newlines for empty comments, which spontaneously arise when using al_remove_config_* functions.
When saving settings to its main configuration file, MININIM (my Allegro-based game) uses al_get_first_*, al_get_next_* and al_remove_config_* functions to remove any duplicate keys (irregardless of case) to ensure each entry is unique.  Oddly enough, this results in new lines being added before reinserted entries for each removal.  Over time the configuration file gets bigger, sparse and thus confuse to human readers.",Closed in favor of #731.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,729,2017-02-11T17:43:42Z,2017-02-12T00:17:32Z,2017-02-26T14:24:41Z,MERGED,True,34,11,2,https://github.com/ivan-mogilko,4.4: implement load_midi_pf,1,[],https://github.com/liballeg/allegro5/pull/729,https://github.com/ivan-mogilko,1,https://github.com/liballeg/allegro5/pull/729,"This adds load_midi_pf function as a part of Allegro 4.4 API.
Resource loading functions in Allegro 4 usually come in pairs, one takes filename as parameter, another takes PACKFILE, which may be convenient if program uses custom resource storage. But midi does not provide PACKFILE variant.
I tried to keep code changes at minimum, basically splitting existing load_midi into two functions, using existing function pairs (such as load_wav & load_wav_pf) as an example.
This request is related to an old issue created several years ago: #460  I found that the root of the issue was that some objects could not be created using program's own PACKFILEs at that time. MIDI seem to be the only object left that still missing this possibility. If this pull request is accepted, I believe #460 could be closed.","This adds load_midi_pf function as a part of Allegro 4.4 API.
Resource loading functions in Allegro 4 usually come in pairs, one takes filename as parameter, another takes PACKFILE, which may be convenient if program uses custom resource storage. But midi does not provide PACKFILE variant.
I tried to keep code changes at minimum, basically splitting existing load_midi into two functions, using existing function pairs (such as load_wav & load_wav_pf) as an example.
This request is related to an old issue created several years ago: #460  I found that the root of the issue was that some objects could not be created using program's own PACKFILEs at that time. MIDI seem to be the only object left that still missing this possibility. If this pull request is accepted, I believe #460 could be closed.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,729,2017-02-11T17:43:42Z,2017-02-12T00:17:32Z,2017-02-26T14:24:41Z,MERGED,True,34,11,2,https://github.com/ivan-mogilko,4.4: implement load_midi_pf,1,[],https://github.com/liballeg/allegro5/pull/729,https://github.com/goob256,2,https://github.com/liballeg/allegro5/pull/729#issuecomment-279186112,"This adds load_midi_pf function as a part of Allegro 4.4 API.
Resource loading functions in Allegro 4 usually come in pairs, one takes filename as parameter, another takes PACKFILE, which may be convenient if program uses custom resource storage. But midi does not provide PACKFILE variant.
I tried to keep code changes at minimum, basically splitting existing load_midi into two functions, using existing function pairs (such as load_wav & load_wav_pf) as an example.
This request is related to an old issue created several years ago: #460  I found that the root of the issue was that some objects could not be created using program's own PACKFILEs at that time. MIDI seem to be the only object left that still missing this possibility. If this pull request is accepted, I believe #460 could be closed.","Great, thanks for thiis!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,731,2017-02-12T21:21:14Z,2017-02-25T20:54:24Z,2017-02-25T20:54:24Z,MERGED,True,3,10,1,https://github.com/SiegeLord,Don't add blank lines before config sections when writing them out.,1,[],https://github.com/liballeg/allegro5/pull/731,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/731,"This interacts badly when the entries have been moved around after file loading.
E.g. consider this config file:
[section1]
key=val
<BLANK_LINE>
[section2]
If, after loading, a 'key' is removed and a new key is added, the configuration will look like this (in memory):
[section1]
<BLANK_LINE>
key=val
[section2]
When saving, the old code would add an additional blank line before [section2].
It's bad enough that the blank line got moved to a strange location, but it's
even worse that it got duplicated. This change keeps the odd line
rearrangement, but removes the code to add a blank line before a section.
Ultimately the current code is only adequate when no entries are added or
removed, otherwise the comments will be misplaced. The philosophy of this
change is that Allegro only writes out what it has read from the file, and what
the user added via al_add_config_comment etc. The fact that the amount of
control using those operations is still kind of low remains, but at least
everything is semantically consistent.
If a blank line is required, it's easy to call al_add_config_comment.","This interacts badly when the entries have been moved around after file loading.
E.g. consider this config file:
[section1]
key=val
<BLANK_LINE>
[section2]
If, after loading, a 'key' is removed and a new key is added, the configuration will look like this (in memory):
[section1]
<BLANK_LINE>
key=val
[section2]
When saving, the old code would add an additional blank line before [section2].
It's bad enough that the blank line got moved to a strange location, but it's
even worse that it got duplicated. This change keeps the odd line
rearrangement, but removes the code to add a blank line before a section.
Ultimately the current code is only adequate when no entries are added or
removed, otherwise the comments will be misplaced. The philosophy of this
change is that Allegro only writes out what it has read from the file, and what
the user added via al_add_config_comment etc. The fact that the amount of
control using those operations is still kind of low remains, but at least
everything is semantically consistent.
If a blank line is required, it's easy to call al_add_config_comment.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,733,2017-02-17T13:20:56Z,2017-12-24T04:48:29Z,2017-12-26T11:29:37Z,CLOSED,False,246,0,1,https://github.com/billyquith,Generate LuaJIT API for Allegro 5,15,[],https://github.com/liballeg/allegro5/pull/733,https://github.com/billyquith,1,https://github.com/liballeg/allegro5/pull/733,This Python script generates a Lua file containing a C declaration of Allegro 5 API suitable for use by LuaJIT.,This Python script generates a Lua file containing a C declaration of Allegro 5 API suitable for use by LuaJIT.,True,{'HEART': ['https://github.com/LukeMS']}
liballeg/allegro5,https://github.com/liballeg/allegro5,733,2017-02-17T13:20:56Z,2017-12-24T04:48:29Z,2017-12-26T11:29:37Z,CLOSED,False,246,0,1,https://github.com/billyquith,Generate LuaJIT API for Allegro 5,15,[],https://github.com/liballeg/allegro5/pull/733,https://github.com/billyquith,2,https://github.com/liballeg/allegro5/pull/733#issuecomment-280647551,This Python script generates a Lua file containing a C declaration of Allegro 5 API suitable for use by LuaJIT.,"Whoops. Should have branched. Seems to have incorporated other changes for some reason.
See: 42c4f72",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,733,2017-02-17T13:20:56Z,2017-12-24T04:48:29Z,2017-12-26T11:29:37Z,CLOSED,False,246,0,1,https://github.com/billyquith,Generate LuaJIT API for Allegro 5,15,[],https://github.com/liballeg/allegro5/pull/733,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/733#issuecomment-282511926,This Python script generates a Lua file containing a C declaration of Allegro 5 API suitable for use by LuaJIT.,"Could you rebase on top of master? It should remove all these extra commits.
Also, could you move this to a contrib directory (so it looks like contrib/luajit) and maybe add a small readme to it? Lastly, it should be relatively simple for you to just copy the CMakeLists.txt from the python directory and make Allegro generate these things semi-automatically. That's optional though if you think it's too difficult.",True,{'THUMBS_UP': ['https://github.com/LukeMS']}
liballeg/allegro5,https://github.com/liballeg/allegro5,733,2017-02-17T13:20:56Z,2017-12-24T04:48:29Z,2017-12-26T11:29:37Z,CLOSED,False,246,0,1,https://github.com/billyquith,Generate LuaJIT API for Allegro 5,15,[],https://github.com/liballeg/allegro5/pull/733,https://github.com/LukeMS,4,https://github.com/liballeg/allegro5/pull/733#issuecomment-349676261,This Python script generates a Lua file containing a C declaration of Allegro 5 API suitable for use by LuaJIT.,"I've just downloaded billyquith's script, generated the prototype and the FFI wrapper, used it, and everything works flawlessly (at least as far as installing the system and creating the display goes).  👍
Also I've created a small sample repo showing how to use the luajit FFI for allegro5 here.
Is this going to be merged into the master branch?
Only thing neeeded is to properly put it into a contrib/luajit folder?
If billy is not around/available I could do that and a basic readme...
Note: I'm a make guy, no clue about cmake, so integrating an automatic generation is kinda beyond my grasp. But if I end up forking/pulling I could still spend some travis test builds until it works.",True,"{'CONFUSED': ['https://github.com/LukeMS'], 'THUMBS_UP': ['https://github.com/billyquith']}"
liballeg/allegro5,https://github.com/liballeg/allegro5,733,2017-02-17T13:20:56Z,2017-12-24T04:48:29Z,2017-12-26T11:29:37Z,CLOSED,False,246,0,1,https://github.com/billyquith,Generate LuaJIT API for Allegro 5,15,[],https://github.com/liballeg/allegro5/pull/733,https://github.com/billyquith,5,https://github.com/liballeg/allegro5/pull/733#issuecomment-349691797,This Python script generates a Lua file containing a C declaration of Allegro 5 API suitable for use by LuaJIT.,"Oops, sorry, forgot about this (changed job, moved house, ya know...). As @SiegeLord points out I cocked up the git workflow, so it needs a rebase.
cmake isn't so hard, especially if you understand autoconfig etc! 😃",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,733,2017-02-17T13:20:56Z,2017-12-24T04:48:29Z,2017-12-26T11:29:37Z,CLOSED,False,246,0,1,https://github.com/billyquith,Generate LuaJIT API for Allegro 5,15,[],https://github.com/liballeg/allegro5/pull/733,https://github.com/LukeMS,6,https://github.com/liballeg/allegro5/pull/733#issuecomment-349745135,This Python script generates a Lua file containing a C declaration of Allegro 5 API suitable for use by LuaJIT.,"Just noticed that ALLEGRO_VERSION_INT requires a hack (as in generate_python_ctypes.py):
f.write('-- CONSTANTS\n')
deferred = []
deferred_dict = {}  #here
for name, val in sorted(al.constants.items()):
    deferred_dict[name] = val  #here
    try:
        if isinstance(val, str):
            val = int(eval(val, globals(), al.constants))
        f.write('allegro.%s = %s\n' % (name, str(val)))
    except:
        deferred.append((name, val))

# and this block
allegro_version_int = (
    deferred_dict[""ALLEGRO_VERSION""] << 24 |
    deferred_dict[""ALLEGRO_SUB_VERSION""] << 16 |
    deferred_dict[""ALLEGRO_WIP_VERSION""] << 8 |
    deferred_dict[""ALLEGRO_RELEASE_NUMBER""]
)
f.write('allegro.%s = %s\n' % (""ALLEGRO_VERSION_INT"",
                               str(allegro_version_int)))

reconst = re.compile('([A-Za-z_]\w+)')
for name, val in deferred:
    val = reconst.sub(r'allegro.\1', val)
    f.write('allegro.%s = %s\n' % (name, str(val)))",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,733,2017-02-17T13:20:56Z,2017-12-24T04:48:29Z,2017-12-26T11:29:37Z,CLOSED,False,246,0,1,https://github.com/billyquith,Generate LuaJIT API for Allegro 5,15,[],https://github.com/liballeg/allegro5/pull/733,https://github.com/billyquith,7,https://github.com/liballeg/allegro5/pull/733#issuecomment-352494022,This Python script generates a Lua file containing a C declaration of Allegro 5 API suitable for use by LuaJIT.,"I made the other changes you suggested.
I tried rebasing this (a technique I'm not overly familiar with) and it doesnt seem to have worked. It may be better to apply a patch.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,733,2017-02-17T13:20:56Z,2017-12-24T04:48:29Z,2017-12-26T11:29:37Z,CLOSED,False,246,0,1,https://github.com/billyquith,Generate LuaJIT API for Allegro 5,15,[],https://github.com/liballeg/allegro5/pull/733,https://github.com/SiegeLord,8,https://github.com/liballeg/allegro5/pull/733#issuecomment-353765290,This Python script generates a Lua file containing a C declaration of Allegro 5 API suitable for use by LuaJIT.,"Wow, this was really messed up gitting there, hah! Still, I figured it out and it is now merged (with some of my fixes) here eaa77d0.
@billyquith If possible, would you be able to add a very simple lua file illustrating how to use it? I unfortunately don't know LUA at all.",True,{'HOORAY': ['https://github.com/LukeMS']}
liballeg/allegro5,https://github.com/liballeg/allegro5,733,2017-02-17T13:20:56Z,2017-12-24T04:48:29Z,2017-12-26T11:29:37Z,CLOSED,False,246,0,1,https://github.com/billyquith,Generate LuaJIT API for Allegro 5,15,[],https://github.com/liballeg/allegro5/pull/733,https://github.com/billyquith,9,https://github.com/liballeg/allegro5/pull/733#issuecomment-353958082,This Python script generates a Lua file containing a C declaration of Allegro 5 API suitable for use by LuaJIT.,"Sorry about that! I've no idea what I did, it certainly didn't turn out as expected!
Yep, can add an example. I'll try and use git workflow this time!
BTW, it is Lua (not an acronym). It means moon in Portuguese.
Merry Xmas! 🎁 🎄 🎅",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,738,2017-03-11T18:51:28Z,2017-03-13T01:01:41Z,2017-04-16T22:00:04Z,MERGED,True,7,0,1,https://github.com/goob256,Work around crashes on some Androids when an FBO is bound during egl_…,1,[],https://github.com/liballeg/allegro5/pull/738,https://github.com/goob256,1,https://github.com/liballeg/allegro5/pull/738,…SwapBuffers,…SwapBuffers,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,738,2017-03-11T18:51:28Z,2017-03-13T01:01:41Z,2017-04-16T22:00:04Z,MERGED,True,7,0,1,https://github.com/goob256,Work around crashes on some Androids when an FBO is bound during egl_…,1,[],https://github.com/liballeg/allegro5/pull/738,https://github.com/goob256,2,https://github.com/liballeg/allegro5/pull/738#issuecomment-285892182,…SwapBuffers,For future note the device is a 1st gen Kindle Fire with Android 2.3.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,738,2017-03-11T18:51:28Z,2017-03-13T01:01:41Z,2017-04-16T22:00:04Z,MERGED,True,7,0,1,https://github.com/goob256,Work around crashes on some Androids when an FBO is bound during egl_…,1,[],https://github.com/liballeg/allegro5/pull/738,https://github.com/elias-pschernig,3,https://github.com/liballeg/allegro5/pull/738#issuecomment-285992059,…SwapBuffers,"I don't understand what this does... does al_set_target_bitmap clear FBO bindings? If that's the case, could clearing FBOs have any possible side effects?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,738,2017-03-11T18:51:28Z,2017-03-13T01:01:41Z,2017-04-16T22:00:04Z,MERGED,True,7,0,1,https://github.com/goob256,Work around crashes on some Androids when an FBO is bound during egl_…,1,[],https://github.com/liballeg/allegro5/pull/738,https://github.com/goob256,4,https://github.com/liballeg/allegro5/pull/738#issuecomment-285992786,…SwapBuffers,"FBO is bound when you set the target to a bitmap. So on some devices if the target is a bitmap (and not the display), it will crash on flip. This has no side effects because it's set back right after the flip.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,738,2017-03-11T18:51:28Z,2017-03-13T01:01:41Z,2017-04-16T22:00:04Z,MERGED,True,7,0,1,https://github.com/goob256,Work around crashes on some Androids when an FBO is bound during egl_…,1,[],https://github.com/liballeg/allegro5/pull/738,https://github.com/elias-pschernig,5,https://github.com/liballeg/allegro5/pull/738#issuecomment-285993087,…SwapBuffers,Sounds good to me then!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,738,2017-03-11T18:51:28Z,2017-03-13T01:01:41Z,2017-04-16T22:00:04Z,MERGED,True,7,0,1,https://github.com/goob256,Work around crashes on some Androids when an FBO is bound during egl_…,1,[],https://github.com/liballeg/allegro5/pull/738,https://github.com/goob256,6,https://github.com/liballeg/allegro5/pull/738#issuecomment-285993250,…SwapBuffers,Just Yet Another Stupid Workaround for Android! :),True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,739,2017-03-17T12:07:39Z,2017-03-28T08:35:44Z,2017-04-16T21:59:40Z,MERGED,True,214,6,8,https://github.com/goob256,Add al_x_set_initial_icon.,3,[],https://github.com/liballeg/allegro5/pull/739,https://github.com/goob256,1,https://github.com/liballeg/allegro5/pull/739,"This requires libxpm but is optional. This patch also sets the default
icon to Alex (if you have xpm.) This patch is required to set an icon
on Ubuntu Unity (and possibly others) without using .desktop files.","This requires libxpm but is optional. This patch also sets the default
icon to Alex (if you have xpm.) This patch is required to set an icon
on Ubuntu Unity (and possibly others) without using .desktop files.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,739,2017-03-17T12:07:39Z,2017-03-28T08:35:44Z,2017-04-16T21:59:40Z,MERGED,True,214,6,8,https://github.com/goob256,Add al_x_set_initial_icon.,3,[],https://github.com/liballeg/allegro5/pull/739,https://github.com/elias-pschernig,2,https://github.com/liballeg/allegro5/pull/739#issuecomment-287361473,"This requires libxpm but is optional. This patch also sets the default
icon to Alex (if you have xpm.) This patch is required to set an icon
on Ubuntu Unity (and possibly others) without using .desktop files.","Oh, that sounds really useful! Travis CI has a compile error though about a missing XpmCreatePixmapFromData, not sure if that's false positive or something needs to be fixed. I'll try it out tonight.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,739,2017-03-17T12:07:39Z,2017-03-28T08:35:44Z,2017-04-16T21:59:40Z,MERGED,True,214,6,8,https://github.com/goob256,Add al_x_set_initial_icon.,3,[],https://github.com/liballeg/allegro5/pull/739,https://github.com/goob256,3,https://github.com/liballeg/allegro5/pull/739#issuecomment-287365648,"This requires libxpm but is optional. This patch also sets the default
icon to Alex (if you have xpm.) This patch is required to set an icon
on Ubuntu Unity (and possibly others) without using .desktop files.","Oops, forgot to test it with libxpm-dev not installed. Should work now.
PS: there may be an easier way to create a pixmap from an ALLEGRO_BITMAP than use libxpm, but I didn't feel like searching through X11 references etc. The method used is slow for large icons with lots of colours... I tested with a 256x256 icon with lots of colors and it takes a couple seconds, while the same image reduced to 256 colors (looks the same) loads instantly.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,739,2017-03-17T12:07:39Z,2017-03-28T08:35:44Z,2017-04-16T21:59:40Z,MERGED,True,214,6,8,https://github.com/goob256,Add al_x_set_initial_icon.,3,[],https://github.com/liballeg/allegro5/pull/739,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/739#issuecomment-287569419,"This requires libxpm but is optional. This patch also sets the default
icon to Alex (if you have xpm.) This patch is required to set an icon
on Ubuntu Unity (and possibly others) without using .desktop files.","Is this something that could be useful cross-platform for the same reasons that al_set_new_window_title was made? Not something that needs to be done now, obviously, but perhaps sometime soon after.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,739,2017-03-17T12:07:39Z,2017-03-28T08:35:44Z,2017-04-16T21:59:40Z,MERGED,True,214,6,8,https://github.com/goob256,Add al_x_set_initial_icon.,3,[],https://github.com/liballeg/allegro5/pull/739,https://github.com/goob256,5,https://github.com/liballeg/allegro5/pull/739#issuecomment-287576950,"This requires libxpm but is optional. This patch also sets the default
icon to Alex (if you have xpm.) This patch is required to set an icon
on Ubuntu Unity (and possibly others) without using .desktop files.","The purpose of the patch initially was just to get an icon on Unity, as when you're distributing a game it's annoying to have to ask people to set up a .Desktop file (or use an installer.)
Initially I didn't think it was possible but I ran a a4 program and it had an Alex icon. So after trying that code and it not working, I eventually figured out that it had to be done before mapping the window.
So that's the main reason it's like that. On other platforms I suppose there may be a millisecond flash of default icon so it could be useful there too, though I never noticed it.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,739,2017-03-17T12:07:39Z,2017-03-28T08:35:44Z,2017-04-16T21:59:40Z,MERGED,True,214,6,8,https://github.com/goob256,Add al_x_set_initial_icon.,3,[],https://github.com/liballeg/allegro5/pull/739,https://github.com/fatcerberus,6,https://github.com/liballeg/allegro5/pull/739#issuecomment-287577497,"This requires libxpm but is optional. This patch also sets the default
icon to Alex (if you have xpm.) This patch is required to set an icon
on Ubuntu Unity (and possibly others) without using .desktop files.",Does this work even if there is a .desktop file?  That'd be useful for miniSphere since I change the window icon based on the game that's running.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,739,2017-03-17T12:07:39Z,2017-03-28T08:35:44Z,2017-04-16T21:59:40Z,MERGED,True,214,6,8,https://github.com/goob256,Add al_x_set_initial_icon.,3,[],https://github.com/liballeg/allegro5/pull/739,https://github.com/goob256,7,https://github.com/liballeg/allegro5/pull/739#issuecomment-289581335,"This requires libxpm but is optional. This patch also sets the default
icon to Alex (if you have xpm.) This patch is required to set an icon
on Ubuntu Unity (and possibly others) without using .desktop files.","No it doesn't work when there is a .desktop file.
Any consensus on this? Is it good to apply or needs changes?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,739,2017-03-17T12:07:39Z,2017-03-28T08:35:44Z,2017-04-16T21:59:40Z,MERGED,True,214,6,8,https://github.com/goob256,Add al_x_set_initial_icon.,3,[],https://github.com/liballeg/allegro5/pull/739,https://github.com/elias-pschernig,8,https://github.com/liballeg/allegro5/pull/739#issuecomment-289602369,"This requires libxpm but is optional. This patch also sets the default
icon to Alex (if you have xpm.) This patch is required to set an icon
on Ubuntu Unity (and possibly others) without using .desktop files.","I'm sorry, I was travelling both last and this weekend and never found any time for Allegro :( I agree with SiegeLord that it probably could be made to work on all platforms eventually. But I really would like to have a go at speeding up the xpm conversion, there is no reason even a 1024x1024 one should take more than a few ms. I can still do that later though so I'm ok with applying it.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,739,2017-03-17T12:07:39Z,2017-03-28T08:35:44Z,2017-04-16T21:59:40Z,MERGED,True,214,6,8,https://github.com/goob256,Add al_x_set_initial_icon.,3,[],https://github.com/liballeg/allegro5/pull/739,https://github.com/goob256,9,https://github.com/liballeg/allegro5/pull/739#issuecomment-289605499,"This requires libxpm but is optional. This patch also sets the default
icon to Alex (if you have xpm.) This patch is required to set an icon
on Ubuntu Unity (and possibly others) without using .desktop files.","Yeah, the xpm conversion is kind of a hack, it stores every unique colour in a vector so it'd work with any number of colours... it's searching the vector for matching colours that takes so long. You could speed it up just by duplicating colours which I'm sure xpm format wouldn't care about.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,739,2017-03-17T12:07:39Z,2017-03-28T08:35:44Z,2017-04-16T21:59:40Z,MERGED,True,214,6,8,https://github.com/goob256,Add al_x_set_initial_icon.,3,[],https://github.com/liballeg/allegro5/pull/739,https://github.com/SiegeLord,10,https://github.com/liballeg/allegro5/pull/739#issuecomment-289677462,"This requires libxpm but is optional. This patch also sets the default
icon to Alex (if you have xpm.) This patch is required to set an icon
on Ubuntu Unity (and possibly others) without using .desktop files.",I'm fine with merging this as is.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,741,2017-03-19T16:40:52Z,2017-03-27T20:59:14Z,2017-03-27T20:59:25Z,MERGED,True,1,1,1,https://github.com/gh0stwizard,[PATCH] clearance of the ALLEGRO_MAXIMIZED flag from display->flags under X11,1,[],https://github.com/liballeg/allegro5/pull/741,https://github.com/gh0stwizard,1,https://github.com/liballeg/allegro5/pull/741,"Hi,
I'd already said about this bug on the allegro's mail list. I'd expanded details a bit.
Short version:
Due the asynchronous nature of X11 allegro clears the ALLEGRO_MAXIMIZED flag from display->flags before check against existence of ALLEGRO_MAXIMIZED and later do request to X11 to maximize the window.
Long version:

Creation of a window starts from the xdpy_create_display() function (src/x/display.c).
It calls xdpy_create_display_locked() (srx/x/xdisplay.c).
xdpy_create_display_locked() copies display flags passed to it: display->flags = flags;.
Then the function creates the window for us. At this moment we sent some requests to X11 and it answers to us.
Allegro, in another thread, is processing X11 events for us.
When X11 sends to us the ConfigureNotify event (see function process_x11_event() in src/x/xevents.c) it calls _al_xglx_display_configure_event() from src/x/xdisplay.c.
The _al_xglx_display_configure_event() function calls _al_xglx_display_configure() (src/x/xdisplay.c).
The last one calls _al_xwin_check_maximized() from src/x/xwindow.c and it clears the ALLEGRO_MAXIMIZED flag.
We are still inside of the function xdpy_create_display_locked() at this moment...
The check and the request to maximize the window fails: if (display->flags & ALLEGRO_MAXIMIZED) {...}
As result we even do NOT call the appropriate function _al_xwin_maximize() (src/x/xwindow.c).

Honestly, I am not sure why we need to modify display->flags for this task. Anyway, seems to be the patch not affects the internal logic of Allegro. Advices are welcome!
Thanks!
References:

Information about ConfigureNotify Events","Hi,
I'd already said about this bug on the allegro's mail list. I'd expanded details a bit.
Short version:
Due the asynchronous nature of X11 allegro clears the ALLEGRO_MAXIMIZED flag from display->flags before check against existence of ALLEGRO_MAXIMIZED and later do request to X11 to maximize the window.
Long version:

Creation of a window starts from the xdpy_create_display() function (src/x/display.c).
It calls xdpy_create_display_locked() (srx/x/xdisplay.c).
xdpy_create_display_locked() copies display flags passed to it: display->flags = flags;.
Then the function creates the window for us. At this moment we sent some requests to X11 and it answers to us.
Allegro, in another thread, is processing X11 events for us.
When X11 sends to us the ConfigureNotify event (see function process_x11_event() in src/x/xevents.c) it calls _al_xglx_display_configure_event() from src/x/xdisplay.c.
The _al_xglx_display_configure_event() function calls _al_xglx_display_configure() (src/x/xdisplay.c).
The last one calls _al_xwin_check_maximized() from src/x/xwindow.c and it clears the ALLEGRO_MAXIMIZED flag.
We are still inside of the function xdpy_create_display_locked() at this moment...
The check and the request to maximize the window fails: if (display->flags & ALLEGRO_MAXIMIZED) {...}
As result we even do NOT call the appropriate function _al_xwin_maximize() (src/x/xwindow.c).

Honestly, I am not sure why we need to modify display->flags for this task. Anyway, seems to be the patch not affects the internal logic of Allegro. Advices are welcome!
Thanks!
References:

Information about ConfigureNotify Events",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,741,2017-03-19T16:40:52Z,2017-03-27T20:59:14Z,2017-03-27T20:59:25Z,MERGED,True,1,1,1,https://github.com/gh0stwizard,[PATCH] clearance of the ALLEGRO_MAXIMIZED flag from display->flags under X11,1,[],https://github.com/liballeg/allegro5/pull/741,https://github.com/goob256,2,https://github.com/liballeg/allegro5/pull/741#issuecomment-289584370,"Hi,
I'd already said about this bug on the allegro's mail list. I'd expanded details a bit.
Short version:
Due the asynchronous nature of X11 allegro clears the ALLEGRO_MAXIMIZED flag from display->flags before check against existence of ALLEGRO_MAXIMIZED and later do request to X11 to maximize the window.
Long version:

Creation of a window starts from the xdpy_create_display() function (src/x/display.c).
It calls xdpy_create_display_locked() (srx/x/xdisplay.c).
xdpy_create_display_locked() copies display flags passed to it: display->flags = flags;.
Then the function creates the window for us. At this moment we sent some requests to X11 and it answers to us.
Allegro, in another thread, is processing X11 events for us.
When X11 sends to us the ConfigureNotify event (see function process_x11_event() in src/x/xevents.c) it calls _al_xglx_display_configure_event() from src/x/xdisplay.c.
The _al_xglx_display_configure_event() function calls _al_xglx_display_configure() (src/x/xdisplay.c).
The last one calls _al_xwin_check_maximized() from src/x/xwindow.c and it clears the ALLEGRO_MAXIMIZED flag.
We are still inside of the function xdpy_create_display_locked() at this moment...
The check and the request to maximize the window fails: if (display->flags & ALLEGRO_MAXIMIZED) {...}
As result we even do NOT call the appropriate function _al_xwin_maximize() (src/x/xwindow.c).

Honestly, I am not sure why we need to modify display->flags for this task. Anyway, seems to be the patch not affects the internal logic of Allegro. Advices are welcome!
Thanks!
References:

Information about ConfigureNotify Events",Thanks for debugging this.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,742,2017-03-21T00:46:45Z,2017-03-27T20:53:03Z,2017-03-27T20:53:13Z,MERGED,True,13,3,1,https://github.com/gh0stwizard,[PATCH] fs_stdio_read_directory appends an extra slash,1,[],https://github.com/liballeg/allegro5/pull/742,https://github.com/gh0stwizard,1,https://github.com/liballeg/allegro5/pull/742,"Description:
fs_stdio_read_directory() appends an extra slash even if it already exists.
This is a patch for #714
The bug affects *nixes too. I have tested it under GNU/Linux & Windows 7, but seems to be it affects all systems with stdio.
Contents of al_bug_fs_stdio_read_directory.c (*nix version):
#include ""allegro5/allegro.h""
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define PATH1 			""/""
#define PATH1_TEST		""/etc""

#define PATH2			""/home/""
#define PATH2_TEST		""/home/my_user""


static int
fs_entry_cb(ALLEGRO_FS_ENTRY *e, void *extra)
{
	static uint32_t emode;
	static const char *ename;
	(void) extra;

	ename = al_get_fs_entry_name(e);
	emode = al_get_fs_entry_mode(e);

	if (emode & ALLEGRO_FILEMODE_ISDIR) {
		if (strcmp(ename, PATH1_TEST) == 0)
			fprintf(stderr, ""OK path1: %s\n"", ename);
		else if (strcmp(ename, PATH2_TEST) == 0)
			fprintf(stderr, ""OK path2: %s\n"", ename);
		else
			fprintf(stderr, ""FAIL: %s\n"", ename);
	}

	return ALLEGRO_FOR_EACH_FS_ENTRY_SKIP;
}


static void
list_directory(const char *path)
{
	ALLEGRO_FS_ENTRY *entry = al_create_fs_entry(path);

	if (! al_open_directory(entry)) {
		fprintf(stderr, ""open directory: %s\n"",
			strerror(al_get_errno()));
		return;
	}

	fprintf(stderr, ""dir %s\n"", path);

	switch (al_for_each_fs_entry(entry, fs_entry_cb, NULL)) {
	case ALLEGRO_FOR_EACH_FS_ENTRY_OK:
		fprintf(stderr, ""al_for_each_fs_entry: %s\n\n"", ""OK"");
		break;
	case ALLEGRO_FOR_EACH_FS_ENTRY_ERROR:	/* with    al_set_errno() */
		fprintf(stderr, ""al_for_each_fs_entry: %s\n\n"",
			strerror(al_get_errno()));
		break;
	case ALLEGRO_FOR_EACH_FS_ENTRY_STOP:	/* without al_set_errno() */
		fprintf(stderr, ""al_for_each_fs_entry: %s\n\n"", ""STOP"");
		break;
	default:
		fprintf(stderr, ""al_for_each_fs_entry: UNKNOWN\n"");
		break;
	}

	if (! al_close_directory(entry))
		fprintf(stderr, ""close directory\n"");
}

int main()
{	
	const char pathA[] = PATH1;
	const char pathB[] = PATH2;


	if (al_init()) {
		list_directory(pathA);
		list_directory(pathB);
	}
	else {
		fprintf(stderr, ""failed to initialize Allegro\n"");
	}

	return 0;
}
Contents of Makefile:
ALLEGRO_SUFFIX = -debug
ALLEGRO_MODS = allegro$(ALLEGRO_SUFFIX)-5 allegro_main$(ALLEGRO_SUFFIX)-5
ALLEGRO_LIBS = $(shell pkg-config --libs $(ALLEGRO_MODS))
ALLEGRO_CFLAGS = $(shell pkg-config --cflags $(ALLEGRO_MODS))

CFLAGS ?= -Wall -Wextra -std=c99 $(ALLEGRO_CFLAGS)
LDFLAGS ?=
LIBS ?= $(ALLEGRO_LIBS)

TARGET = t1
SOURCES = $(wildcard *.c)
OBJECTS = $(patsubst %.c,%.o,$(SOURCES))

all: $(TARGET)

devel: CFLAGS += -D_DEBUG -g
devel: all

$(TARGET): $(OBJECTS)
	$(CC) $(LDFLAGS) -o $@ $(OBJECTS) $(LIBS)

%.o: %.c
	$(CC) -c $(CFLAGS) -o $@ $<

clean:
	$(RM) $(TARGET) $(OBJECTS)

.PHONY: all clean","Description:
fs_stdio_read_directory() appends an extra slash even if it already exists.
This is a patch for #714
The bug affects *nixes too. I have tested it under GNU/Linux & Windows 7, but seems to be it affects all systems with stdio.
Contents of al_bug_fs_stdio_read_directory.c (*nix version):
#include ""allegro5/allegro.h""
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define PATH1 			""/""
#define PATH1_TEST		""/etc""

#define PATH2			""/home/""
#define PATH2_TEST		""/home/my_user""


static int
fs_entry_cb(ALLEGRO_FS_ENTRY *e, void *extra)
{
	static uint32_t emode;
	static const char *ename;
	(void) extra;

	ename = al_get_fs_entry_name(e);
	emode = al_get_fs_entry_mode(e);

	if (emode & ALLEGRO_FILEMODE_ISDIR) {
		if (strcmp(ename, PATH1_TEST) == 0)
			fprintf(stderr, ""OK path1: %s\n"", ename);
		else if (strcmp(ename, PATH2_TEST) == 0)
			fprintf(stderr, ""OK path2: %s\n"", ename);
		else
			fprintf(stderr, ""FAIL: %s\n"", ename);
	}

	return ALLEGRO_FOR_EACH_FS_ENTRY_SKIP;
}


static void
list_directory(const char *path)
{
	ALLEGRO_FS_ENTRY *entry = al_create_fs_entry(path);

	if (! al_open_directory(entry)) {
		fprintf(stderr, ""open directory: %s\n"",
			strerror(al_get_errno()));
		return;
	}

	fprintf(stderr, ""dir %s\n"", path);

	switch (al_for_each_fs_entry(entry, fs_entry_cb, NULL)) {
	case ALLEGRO_FOR_EACH_FS_ENTRY_OK:
		fprintf(stderr, ""al_for_each_fs_entry: %s\n\n"", ""OK"");
		break;
	case ALLEGRO_FOR_EACH_FS_ENTRY_ERROR:	/* with    al_set_errno() */
		fprintf(stderr, ""al_for_each_fs_entry: %s\n\n"",
			strerror(al_get_errno()));
		break;
	case ALLEGRO_FOR_EACH_FS_ENTRY_STOP:	/* without al_set_errno() */
		fprintf(stderr, ""al_for_each_fs_entry: %s\n\n"", ""STOP"");
		break;
	default:
		fprintf(stderr, ""al_for_each_fs_entry: UNKNOWN\n"");
		break;
	}

	if (! al_close_directory(entry))
		fprintf(stderr, ""close directory\n"");
}

int main()
{	
	const char pathA[] = PATH1;
	const char pathB[] = PATH2;


	if (al_init()) {
		list_directory(pathA);
		list_directory(pathB);
	}
	else {
		fprintf(stderr, ""failed to initialize Allegro\n"");
	}

	return 0;
}
Contents of Makefile:
ALLEGRO_SUFFIX = -debug
ALLEGRO_MODS = allegro$(ALLEGRO_SUFFIX)-5 allegro_main$(ALLEGRO_SUFFIX)-5
ALLEGRO_LIBS = $(shell pkg-config --libs $(ALLEGRO_MODS))
ALLEGRO_CFLAGS = $(shell pkg-config --cflags $(ALLEGRO_MODS))

CFLAGS ?= -Wall -Wextra -std=c99 $(ALLEGRO_CFLAGS)
LDFLAGS ?=
LIBS ?= $(ALLEGRO_LIBS)

TARGET = t1
SOURCES = $(wildcard *.c)
OBJECTS = $(patsubst %.c,%.o,$(SOURCES))

all: $(TARGET)

devel: CFLAGS += -D_DEBUG -g
devel: all

$(TARGET): $(OBJECTS)
	$(CC) $(LDFLAGS) -o $@ $(OBJECTS) $(LIBS)

%.o: %.c
	$(CC) -c $(CFLAGS) -o $@ $<

clean:
	$(RM) $(TARGET) $(OBJECTS)

.PHONY: all clean",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,742,2017-03-21T00:46:45Z,2017-03-27T20:53:03Z,2017-03-27T20:53:13Z,MERGED,True,13,3,1,https://github.com/gh0stwizard,[PATCH] fs_stdio_read_directory appends an extra slash,1,[],https://github.com/liballeg/allegro5/pull/742,https://github.com/goob256,2,https://github.com/liballeg/allegro5/pull/742#issuecomment-289582688,"Description:
fs_stdio_read_directory() appends an extra slash even if it already exists.
This is a patch for #714
The bug affects *nixes too. I have tested it under GNU/Linux & Windows 7, but seems to be it affects all systems with stdio.
Contents of al_bug_fs_stdio_read_directory.c (*nix version):
#include ""allegro5/allegro.h""
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define PATH1 			""/""
#define PATH1_TEST		""/etc""

#define PATH2			""/home/""
#define PATH2_TEST		""/home/my_user""


static int
fs_entry_cb(ALLEGRO_FS_ENTRY *e, void *extra)
{
	static uint32_t emode;
	static const char *ename;
	(void) extra;

	ename = al_get_fs_entry_name(e);
	emode = al_get_fs_entry_mode(e);

	if (emode & ALLEGRO_FILEMODE_ISDIR) {
		if (strcmp(ename, PATH1_TEST) == 0)
			fprintf(stderr, ""OK path1: %s\n"", ename);
		else if (strcmp(ename, PATH2_TEST) == 0)
			fprintf(stderr, ""OK path2: %s\n"", ename);
		else
			fprintf(stderr, ""FAIL: %s\n"", ename);
	}

	return ALLEGRO_FOR_EACH_FS_ENTRY_SKIP;
}


static void
list_directory(const char *path)
{
	ALLEGRO_FS_ENTRY *entry = al_create_fs_entry(path);

	if (! al_open_directory(entry)) {
		fprintf(stderr, ""open directory: %s\n"",
			strerror(al_get_errno()));
		return;
	}

	fprintf(stderr, ""dir %s\n"", path);

	switch (al_for_each_fs_entry(entry, fs_entry_cb, NULL)) {
	case ALLEGRO_FOR_EACH_FS_ENTRY_OK:
		fprintf(stderr, ""al_for_each_fs_entry: %s\n\n"", ""OK"");
		break;
	case ALLEGRO_FOR_EACH_FS_ENTRY_ERROR:	/* with    al_set_errno() */
		fprintf(stderr, ""al_for_each_fs_entry: %s\n\n"",
			strerror(al_get_errno()));
		break;
	case ALLEGRO_FOR_EACH_FS_ENTRY_STOP:	/* without al_set_errno() */
		fprintf(stderr, ""al_for_each_fs_entry: %s\n\n"", ""STOP"");
		break;
	default:
		fprintf(stderr, ""al_for_each_fs_entry: UNKNOWN\n"");
		break;
	}

	if (! al_close_directory(entry))
		fprintf(stderr, ""close directory\n"");
}

int main()
{	
	const char pathA[] = PATH1;
	const char pathB[] = PATH2;


	if (al_init()) {
		list_directory(pathA);
		list_directory(pathB);
	}
	else {
		fprintf(stderr, ""failed to initialize Allegro\n"");
	}

	return 0;
}
Contents of Makefile:
ALLEGRO_SUFFIX = -debug
ALLEGRO_MODS = allegro$(ALLEGRO_SUFFIX)-5 allegro_main$(ALLEGRO_SUFFIX)-5
ALLEGRO_LIBS = $(shell pkg-config --libs $(ALLEGRO_MODS))
ALLEGRO_CFLAGS = $(shell pkg-config --cflags $(ALLEGRO_MODS))

CFLAGS ?= -Wall -Wextra -std=c99 $(ALLEGRO_CFLAGS)
LDFLAGS ?=
LIBS ?= $(ALLEGRO_LIBS)

TARGET = t1
SOURCES = $(wildcard *.c)
OBJECTS = $(patsubst %.c,%.o,$(SOURCES))

all: $(TARGET)

devel: CFLAGS += -D_DEBUG -g
devel: all

$(TARGET): $(OBJECTS)
	$(CC) $(LDFLAGS) -o $@ $(OBJECTS) $(LIBS)

%.o: %.c
	$(CC) -c $(CFLAGS) -o $@ $<

clean:
	$(RM) $(TARGET) $(OBJECTS)

.PHONY: all clean","Thanks, this looks good.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,744,2017-04-05T04:52:43Z,2017-04-05T05:25:34Z,2017-04-16T21:59:16Z,MERGED,True,6,3,2,https://github.com/goob256,Small fixes to Android README and build,1,[],https://github.com/liballeg/allegro5/pull/744,https://github.com/goob256,1,https://github.com/liballeg/allegro5/pull/744,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,748,2017-04-16T21:57:44Z,2017-04-19T15:52:02Z,2017-04-19T15:52:02Z,MERGED,True,27,11,1,https://github.com/goob256,Fix (some or all?) Bluetooth mice on OS X (patch by Tom Bass),1,[],https://github.com/liballeg/allegro5/pull/748,https://github.com/goob256,1,https://github.com/liballeg/allegro5/pull/748,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,750,2017-04-20T08:05:24Z,2017-04-22T09:35:01Z,2017-04-22T11:42:00Z,MERGED,True,5,11,1,https://github.com/HerrBvomSee,Fixed deprecation warning when starting OSX console app,3,[],https://github.com/liballeg/allegro5/pull/750,https://github.com/HerrBvomSee,1,https://github.com/liballeg/allegro5/pull/750,"This is the pull request for issue #749
Chnaged the deprecated way to the new TransformProcessType","This is the pull request for issue #749
Chnaged the deprecated way to the new TransformProcessType",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,750,2017-04-20T08:05:24Z,2017-04-22T09:35:01Z,2017-04-22T11:42:00Z,MERGED,True,5,11,1,https://github.com/HerrBvomSee,Fixed deprecation warning when starting OSX console app,3,[],https://github.com/liballeg/allegro5/pull/750,https://github.com/goob256,2,https://github.com/liballeg/allegro5/pull/750#issuecomment-296166232,"This is the pull request for issue #749
Chnaged the deprecated way to the new TransformProcessType",Could you fix the indentation? We indent with 3 spaces per stop. Thanks.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,750,2017-04-20T08:05:24Z,2017-04-22T09:35:01Z,2017-04-22T11:42:00Z,MERGED,True,5,11,1,https://github.com/HerrBvomSee,Fixed deprecation warning when starting OSX console app,3,[],https://github.com/liballeg/allegro5/pull/750,https://github.com/goob256,3,https://github.com/liballeg/allegro5/pull/750#issuecomment-296166422,"This is the pull request for issue #749
Chnaged the deprecated way to the new TransformProcessType",Also does this actually fix any deprecation or just hide them? Do you get console output from the relevant examples?,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,750,2017-04-20T08:05:24Z,2017-04-22T09:35:01Z,2017-04-22T11:42:00Z,MERGED,True,5,11,1,https://github.com/HerrBvomSee,Fixed deprecation warning when starting OSX console app,3,[],https://github.com/liballeg/allegro5/pull/750,https://github.com/HerrBvomSee,4,https://github.com/liballeg/allegro5/pull/750#issuecomment-296170154,"This is the pull request for issue #749
Chnaged the deprecated way to the new TransformProcessType","Fixed the indention
It really fixes the deprecation warning when starting a console application and uses the proposed Apple way using TransformProcessType introduced in OSX 10.3.
Relevant output is in issue #749",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,750,2017-04-20T08:05:24Z,2017-04-22T09:35:01Z,2017-04-22T11:42:00Z,MERGED,True,5,11,1,https://github.com/HerrBvomSee,Fixed deprecation warning when starting OSX console app,3,[],https://github.com/liballeg/allegro5/pull/750,https://github.com/goob256,5,https://github.com/liballeg/allegro5/pull/750#issuecomment-296172888,"This is the pull request for issue #749
Chnaged the deprecated way to the new TransformProcessType",And are you still getting console output?,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,750,2017-04-20T08:05:24Z,2017-04-22T09:35:01Z,2017-04-22T11:42:00Z,MERGED,True,5,11,1,https://github.com/HerrBvomSee,Fixed deprecation warning when starting OSX console app,3,[],https://github.com/liballeg/allegro5/pull/750,https://github.com/goob256,6,https://github.com/liballeg/allegro5/pull/750#issuecomment-296178481,"This is the pull request for issue #749
Chnaged the deprecated way to the new TransformProcessType","I tried it myself. Indeed it fixes the deprecations warnings, but for me windows now pop up behind everything else. Not for you?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,750,2017-04-20T08:05:24Z,2017-04-22T09:35:01Z,2017-04-22T11:42:00Z,MERGED,True,5,11,1,https://github.com/HerrBvomSee,Fixed deprecation warning when starting OSX console app,3,[],https://github.com/liballeg/allegro5/pull/750,https://github.com/goob256,7,https://github.com/liballeg/allegro5/pull/750#issuecomment-296192838,"This is the pull request for issue #749
Chnaged the deprecated way to the new TransformProcessType","diff --git a/src/macosx/system.m b/src/macosx/system.m
index b441571..b8282f9 100644
--- a/src/macosx/system.m
+++ b/src/macosx/system.m
@@ -66,7 +66,7 @@ static void osx_tell_dock(void)
 {
    ProcessSerialNumber psn = { 0, kCurrentProcess };
    TransformProcessType(&psn, kProcessTransformToForegroundApplication);
-   [NSApplication sharedApplication];
+   [[NSApplication sharedApplication] activateIgnoringOtherApps:YES];
 }

With this patch on top of yours the windows come to the front. Can you confirm?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,750,2017-04-20T08:05:24Z,2017-04-22T09:35:01Z,2017-04-22T11:42:00Z,MERGED,True,5,11,1,https://github.com/HerrBvomSee,Fixed deprecation warning when starting OSX console app,3,[],https://github.com/liballeg/allegro5/pull/750,https://github.com/HerrBvomSee,8,https://github.com/liballeg/allegro5/pull/750#issuecomment-296270783,"This is the pull request for issue #749
Chnaged the deprecated way to the new TransformProcessType","Nope, I can not confirm. The ex_* examples I use still come up in the same manner both ways (with or without your addition). Also my own little test game pops up in front.
I think it won't hurt to add the activateIgnoringOtherApps:YES as it explicitly activates the app, even though, Apple does not recommend to use it (ref: http://apple.co/2ocKTbB)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,750,2017-04-20T08:05:24Z,2017-04-22T09:35:01Z,2017-04-22T11:42:00Z,MERGED,True,5,11,1,https://github.com/HerrBvomSee,Fixed deprecation warning when starting OSX console app,3,[],https://github.com/liballeg/allegro5/pull/750,https://github.com/fatcerberus,9,https://github.com/liballeg/allegro5/pull/750#issuecomment-296291535,"This is the pull request for issue #749
Chnaged the deprecated way to the new TransformProcessType","For a game (the usual Allegro use case), I personally don't mind the potential focus-stealing.  I vote for keeping the flag.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,750,2017-04-20T08:05:24Z,2017-04-22T09:35:01Z,2017-04-22T11:42:00Z,MERGED,True,5,11,1,https://github.com/HerrBvomSee,Fixed deprecation warning when starting OSX console app,3,[],https://github.com/liballeg/allegro5/pull/750,https://github.com/goob256,10,https://github.com/liballeg/allegro5/pull/750#issuecomment-296329924,"This is the pull request for issue #749
Chnaged the deprecated way to the new TransformProcessType","If you could add my patch to the PR I will merge this, thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,750,2017-04-20T08:05:24Z,2017-04-22T09:35:01Z,2017-04-22T11:42:00Z,MERGED,True,5,11,1,https://github.com/HerrBvomSee,Fixed deprecation warning when starting OSX console app,3,[],https://github.com/liballeg/allegro5/pull/750,https://github.com/HerrBvomSee,11,https://github.com/liballeg/allegro5/pull/750#issuecomment-296349571,"This is the pull request for issue #749
Chnaged the deprecated way to the new TransformProcessType",added your patch,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,753,2017-04-22T09:12:09Z,2017-04-22T09:38:06Z,2017-04-22T19:03:54Z,CLOSED,False,57,110,7,https://github.com/HerrBvomSee,Replaced the custom _al_set_error method ,1,[],https://github.com/liballeg/allegro5/pull/753,https://github.com/HerrBvomSee,1,https://github.com/liballeg/allegro5/pull/753,"with the default ALLEGRO_ERROR call as it does not do anything else
Removed all traces of the _al_set_error functionality
refers to issue #194","with the default ALLEGRO_ERROR call as it does not do anything else
Removed all traces of the _al_set_error functionality
refers to issue #194",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,753,2017-04-22T09:12:09Z,2017-04-22T09:38:06Z,2017-04-22T19:03:54Z,CLOSED,False,57,110,7,https://github.com/HerrBvomSee,Replaced the custom _al_set_error method ,1,[],https://github.com/liballeg/allegro5/pull/753,https://github.com/goob256,2,https://github.com/liballeg/allegro5/pull/753#issuecomment-296361301,"with the default ALLEGRO_ERROR call as it does not do anything else
Removed all traces of the _al_set_error functionality
refers to issue #194","This could be used at some point to add error codes, so I will not accept this. Also the error codes are not shown anymore which might be helpfull.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,753,2017-04-22T09:12:09Z,2017-04-22T09:38:06Z,2017-04-22T19:03:54Z,CLOSED,False,57,110,7,https://github.com/HerrBvomSee,Replaced the custom _al_set_error method ,1,[],https://github.com/liballeg/allegro5/pull/753,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/753#issuecomment-296381729,"with the default ALLEGRO_ERROR call as it does not do anything else
Removed all traces of the _al_set_error functionality
refers to issue #194","I think the intended way to solve that was perhaps to do:
al_set_errno(ALLEGRO_GENERIC_ERROR);
ALLEGRO_ERROR(""A driver already running"");

Granted, al_set_errno isn't often used anyway. Alternatively maybe the right way would be to move that custom _al_set_error into the main library and rename it?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,753,2017-04-22T09:12:09Z,2017-04-22T09:38:06Z,2017-04-22T19:03:54Z,CLOSED,False,57,110,7,https://github.com/HerrBvomSee,Replaced the custom _al_set_error method ,1,[],https://github.com/liballeg/allegro5/pull/753,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/753#issuecomment-296382042,"with the default ALLEGRO_ERROR call as it does not do anything else
Removed all traces of the _al_set_error functionality
refers to issue #194","In terms of the first suggestion it could be as simple as sticking the al_set_errno inside _al_set_errno, hah.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,753,2017-04-22T09:12:09Z,2017-04-22T09:38:06Z,2017-04-22T19:03:54Z,CLOSED,False,57,110,7,https://github.com/HerrBvomSee,Replaced the custom _al_set_error method ,1,[],https://github.com/liballeg/allegro5/pull/753,https://github.com/goob256,5,https://github.com/liballeg/allegro5/pull/753#issuecomment-296382397,"with the default ALLEGRO_ERROR call as it does not do anything else
Removed all traces of the _al_set_error functionality
refers to issue #194","yes it would make sense to use al_set_errno, just make sure the codes don't collide with existing ones.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,756,2017-04-25T21:14:47Z,2017-04-26T18:01:50Z,2017-04-26T18:01:50Z,MERGED,True,9,0,1,https://github.com/goob256,Fix memory leak in ex_audio_simple (Patch by Rm Beer),2,[],https://github.com/liballeg/allegro5/pull/756,https://github.com/goob256,1,https://github.com/liballeg/allegro5/pull/756,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,759,2017-05-14T04:22:21Z,2017-05-14T04:22:37Z,2017-05-14T04:22:37Z,CLOSED,False,0,0,0,https://github.com/vkensou,Merge,4,[],https://github.com/liballeg/allegro5/pull/759,https://github.com/vkensou,1,https://github.com/liballeg/allegro5/pull/759,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,760,2017-05-16T03:18:44Z,2017-05-22T04:32:03Z,2017-05-22T04:32:20Z,CLOSED,False,1,1,1,https://github.com/SiegeLord,Fix OSX magic main with the LTO switch.,1,[],https://github.com/liballeg/allegro5/pull/760,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/760,"Using -flto with clang 8.1 strips out _al_mangled_main() because it things the
function is not used. Removing -flto as a linker flag fixes this, but the
following change fixes the issue properly.
Fixes #758","Using -flto with clang 8.1 strips out _al_mangled_main() because it things the
function is not used. Removing -flto as a linker flag fixes this, but the
following change fixes the issue properly.
Fixes #758",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,760,2017-05-16T03:18:44Z,2017-05-22T04:32:03Z,2017-05-22T04:32:20Z,CLOSED,False,1,1,1,https://github.com/SiegeLord,Fix OSX magic main with the LTO switch.,1,[],https://github.com/liballeg/allegro5/pull/760,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/760#issuecomment-302996987,"Using -flto with clang 8.1 strips out _al_mangled_main() because it things the
function is not used. Removing -flto as a linker flag fixes this, but the
following change fixes the issue properly.
Fixes #758",Merged as ae14e7b.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,761,2017-05-16T14:53:49Z,2017-05-22T04:24:06Z,2018-04-08T19:22:15Z,MERGED,True,56,1,2,https://github.com/ivan-mogilko,4.4: implement play_fli_pf and open_fli_pf,1,[],https://github.com/liballeg/allegro5/pull/761,https://github.com/ivan-mogilko,1,https://github.com/liballeg/allegro5/pull/761,"This adds play_fli_pf and open_fli_pf functions as a part of Allegro 4.4 API.
This pull request has similar reasoning behind it as my previous one (#729). I was trying to remove various hacks from our olde engine and properly use latest version of Allegro 4, but Allegro 4's API does not provide method to play FLIC from provided PACKFILE, which is very inconvenient if these videos are stored in a custom data package. There are indeed methods play_memory_fli/open_memory_fli, but they demand video be loaded fully into memory before playing it, hence I was reluctant to switch to these.
TBH, I could not find an easy way to keep looping playback working with user's PACKFILE stream. With play_fli/open_fli Allegro simply reopens the file, since it knows its name. With play_memory_fli/open_memory_fli it reverts to the beginning of data array. But PACKFILE does not support seeking back. So I made a restriction that if video is played of custom stream, looping is not supported (users will have to restart video themselves).
If someone knows better solution, I would be happy to fix mine (unless it requires big overhaul, because sadly I cannot spare much time to this).","This adds play_fli_pf and open_fli_pf functions as a part of Allegro 4.4 API.
This pull request has similar reasoning behind it as my previous one (#729). I was trying to remove various hacks from our olde engine and properly use latest version of Allegro 4, but Allegro 4's API does not provide method to play FLIC from provided PACKFILE, which is very inconvenient if these videos are stored in a custom data package. There are indeed methods play_memory_fli/open_memory_fli, but they demand video be loaded fully into memory before playing it, hence I was reluctant to switch to these.
TBH, I could not find an easy way to keep looping playback working with user's PACKFILE stream. With play_fli/open_fli Allegro simply reopens the file, since it knows its name. With play_memory_fli/open_memory_fli it reverts to the beginning of data array. But PACKFILE does not support seeking back. So I made a restriction that if video is played of custom stream, looping is not supported (users will have to restart video themselves).
If someone knows better solution, I would be happy to fix mine (unless it requires big overhaul, because sadly I cannot spare much time to this).",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,761,2017-05-16T14:53:49Z,2017-05-22T04:24:06Z,2018-04-08T19:22:15Z,MERGED,True,56,1,2,https://github.com/ivan-mogilko,4.4: implement play_fli_pf and open_fli_pf,1,[],https://github.com/liballeg/allegro5/pull/761,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/761#issuecomment-302996233,"This adds play_fli_pf and open_fli_pf functions as a part of Allegro 4.4 API.
This pull request has similar reasoning behind it as my previous one (#729). I was trying to remove various hacks from our olde engine and properly use latest version of Allegro 4, but Allegro 4's API does not provide method to play FLIC from provided PACKFILE, which is very inconvenient if these videos are stored in a custom data package. There are indeed methods play_memory_fli/open_memory_fli, but they demand video be loaded fully into memory before playing it, hence I was reluctant to switch to these.
TBH, I could not find an easy way to keep looping playback working with user's PACKFILE stream. With play_fli/open_fli Allegro simply reopens the file, since it knows its name. With play_memory_fli/open_memory_fli it reverts to the beginning of data array. But PACKFILE does not support seeking back. So I made a restriction that if video is played of custom stream, looping is not supported (users will have to restart video themselves).
If someone knows better solution, I would be happy to fix mine (unless it requires big overhaul, because sadly I cannot spare much time to this).","Thanks a lot! Your implementation is fine, I think.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,762,2017-05-17T21:07:37Z,2017-05-22T04:28:10Z,2018-05-09T14:39:40Z,CLOSED,False,6,2,1,https://github.com/ivan-mogilko,4.4: Make use of <stdint.h> in MSVS 2010 and higher,1,[],https://github.com/liballeg/allegro5/pull/762,https://github.com/ivan-mogilko,1,https://github.com/liballeg/allegro5/pull/762,"This is a small fix that lets compile Allegro-based programs in MSVS 2010 and higher (tested VS 2010, *15 and *17).
MSVS introduced stdint.h starting with VS2010, but if it is included in Allegro 4 program, this will cause conflicts with Allegro's astdint.h. Provided fix seem to deal with the issue.","This is a small fix that lets compile Allegro-based programs in MSVS 2010 and higher (tested VS 2010, *15 and *17).
MSVS introduced stdint.h starting with VS2010, but if it is included in Allegro 4 program, this will cause conflicts with Allegro's astdint.h. Provided fix seem to deal with the issue.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,762,2017-05-17T21:07:37Z,2017-05-22T04:28:10Z,2018-05-09T14:39:40Z,CLOSED,False,6,2,1,https://github.com/ivan-mogilko,4.4: Make use of <stdint.h> in MSVS 2010 and higher,1,[],https://github.com/liballeg/allegro5/pull/762,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/762#issuecomment-302996607,"This is a small fix that lets compile Allegro-based programs in MSVS 2010 and higher (tested VS 2010, *15 and *17).
MSVS introduced stdint.h starting with VS2010, but if it is included in Allegro 4 program, this will cause conflicts with Allegro's astdint.h. Provided fix seem to deal with the issue.",Merged as 71a3815. Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,763,2017-05-22T05:46:24Z,2017-05-22T06:14:53Z,2017-05-22T06:14:53Z,MERGED,True,12,2,3,https://github.com/SiegeLord,Add large file support for MSVC.,1,[],https://github.com/liballeg/allegro5/pull/763,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/763,Fixes #715.,Fixes #715.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,767,2017-05-28T19:18:31Z,2017-06-01T02:46:42Z,2017-06-01T02:46:42Z,MERGED,True,181,49,4,https://github.com/SiegeLord,Add al_lock_sample_id and al_unlock_sample_id; various doc improvements.,5,[],https://github.com/liballeg/allegro5/pull/767,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/767,Fixes #766.,Fixes #766.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,774,2017-06-18T04:13:22Z,2017-07-16T19:05:09Z,2017-07-16T19:05:10Z,MERGED,True,42,39,3,https://github.com/SiegeLord,Only test cooperative lavel if device is known to be lost.,3,[],https://github.com/liballeg/allegro5/pull/774,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/774,@goobliata We reverted a version of this patch a few years ago as it broke some of your games. Could you test this one on them?,@goobliata We reverted a version of this patch a few years ago as it broke some of your games. Could you test this one on them?,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,774,2017-06-18T04:13:22Z,2017-07-16T19:05:09Z,2017-07-16T19:05:10Z,MERGED,True,42,39,3,https://github.com/SiegeLord,Only test cooperative lavel if device is known to be lost.,3,[],https://github.com/liballeg/allegro5/pull/774,https://github.com/goob256,2,https://github.com/liballeg/allegro5/pull/774#issuecomment-309257395,@goobliata We reverted a version of this patch a few years ago as it broke some of your games. Could you test this one on them?,"One of my games crashes on reset with this, I'll have to investigate it.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,774,2017-06-18T04:13:22Z,2017-07-16T19:05:09Z,2017-07-16T19:05:10Z,MERGED,True,42,39,3,https://github.com/SiegeLord,Only test cooperative lavel if device is known to be lost.,3,[],https://github.com/liballeg/allegro5/pull/774,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/774#issuecomment-309258569,@goobliata We reverted a version of this patch a few years ago as it broke some of your games. Could you test this one on them?,"Perfect, let me know if I can be of help.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,774,2017-06-18T04:13:22Z,2017-07-16T19:05:09Z,2017-07-16T19:05:10Z,MERGED,True,42,39,3,https://github.com/SiegeLord,Only test cooperative lavel if device is known to be lost.,3,[],https://github.com/liballeg/allegro5/pull/774,https://github.com/goob256,4,https://github.com/liballeg/allegro5/pull/774#issuecomment-309261706,@goobliata We reverted a version of this patch a few years ago as it broke some of your games. Could you test this one on them?,"I can reproduce the crash in ex_fs_window by adding ALLEGRO_PROGRAMMABLE_PIPELINE to the flags (at first I was trying to fix my game but after being unable to fix it, I tried to reproduce it in the example because it's also crashing in toggling fullscreen window in my game.)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,774,2017-06-18T04:13:22Z,2017-07-16T19:05:09Z,2017-07-16T19:05:10Z,MERGED,True,42,39,3,https://github.com/SiegeLord,Only test cooperative lavel if device is known to be lost.,3,[],https://github.com/liballeg/allegro5/pull/774,https://github.com/goob256,5,https://github.com/liballeg/allegro5/pull/774#issuecomment-309261948,@goobliata We reverted a version of this patch a few years ago as it broke some of your games. Could you test this one on them?,"Possible hint: it was crashing in al_draw_prim in my game, ex_fs_window also draws primitives, perhaps it's the primitive shaders.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,774,2017-06-18T04:13:22Z,2017-07-16T19:05:09Z,2017-07-16T19:05:10Z,MERGED,True,42,39,3,https://github.com/SiegeLord,Only test cooperative lavel if device is known to be lost.,3,[],https://github.com/liballeg/allegro5/pull/774,https://github.com/goob256,6,https://github.com/liballeg/allegro5/pull/774#issuecomment-310284923,@goobliata We reverted a version of this patch a few years ago as it broke some of your games. Could you test this one on them?,I haven't looked into the cause of the crash yet. It might just be that we're not releasing everything when we toggle fullscreen window.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,774,2017-06-18T04:13:22Z,2017-07-16T19:05:09Z,2017-07-16T19:05:10Z,MERGED,True,42,39,3,https://github.com/SiegeLord,Only test cooperative lavel if device is known to be lost.,3,[],https://github.com/liballeg/allegro5/pull/774,https://github.com/SiegeLord,7,https://github.com/liballeg/allegro5/pull/774#issuecomment-310285785,@goobliata We reverted a version of this patch a few years ago as it broke some of your games. Could you test this one on them?,"I got it crashing with ex_fs_window too, like you said; haven't had time to look at it.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,774,2017-06-18T04:13:22Z,2017-07-16T19:05:09Z,2017-07-16T19:05:10Z,MERGED,True,42,39,3,https://github.com/SiegeLord,Only test cooperative lavel if device is known to be lost.,3,[],https://github.com/liballeg/allegro5/pull/774,https://github.com/SiegeLord,8,https://github.com/liballeg/allegro5/pull/774#issuecomment-314669852,@goobliata We reverted a version of this patch a few years ago as it broke some of your games. Could you test this one on them?,Turns out we were leaking D3D shaders if we attached both pixel and vertex shader sources. The commit here fixes the crash with ex_fs_window. Could you test this again? Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,774,2017-06-18T04:13:22Z,2017-07-16T19:05:09Z,2017-07-16T19:05:10Z,MERGED,True,42,39,3,https://github.com/SiegeLord,Only test cooperative lavel if device is known to be lost.,3,[],https://github.com/liballeg/allegro5/pull/774,https://github.com/goob256,9,https://github.com/liballeg/allegro5/pull/774#issuecomment-314825033,@goobliata We reverted a version of this patch a few years ago as it broke some of your games. Could you test this one on them?,Works in my game now as well.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,775,2017-06-20T10:44:41Z,2017-06-22T06:04:55Z,2017-06-22T06:06:11Z,MERGED,True,2,10,1,https://github.com/bkdoormaus,Improved path behavior in GTK native file dialog.,1,[],https://github.com/liballeg/allegro5/pull/775,https://github.com/bkdoormaus,1,https://github.com/liballeg/allegro5/pull/775,"Before, the path ""/a/b/c/"" would open with the directory at ""/a/b/"", instead of
the desired path.
I believe the new logic corrects this.","Before, the path ""/a/b/c/"" would open with the directory at ""/a/b/"", instead of
the desired path.
I believe the new logic corrects this.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,775,2017-06-20T10:44:41Z,2017-06-22T06:04:55Z,2017-06-22T06:06:11Z,MERGED,True,2,10,1,https://github.com/bkdoormaus,Improved path behavior in GTK native file dialog.,1,[],https://github.com/liballeg/allegro5/pull/775,https://github.com/goob256,2,https://github.com/liballeg/allegro5/pull/775#issuecomment-309910573,"Before, the path ""/a/b/c/"" would open with the directory at ""/a/b/"", instead of
the desired path.
I believe the new logic corrects this.",Looks better to me.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,775,2017-06-20T10:44:41Z,2017-06-22T06:04:55Z,2017-06-22T06:06:11Z,MERGED,True,2,10,1,https://github.com/bkdoormaus,Improved path behavior in GTK native file dialog.,1,[],https://github.com/liballeg/allegro5/pull/775,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/775#issuecomment-309957633,"Before, the path ""/a/b/c/"" would open with the directory at ""/a/b/"", instead of
the desired path.
I believe the new logic corrects this.","This feels like more of a bug with our file routines than the GTK dialog per-se. No objections from me though, the new behavior makes as much sense as the old one.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,775,2017-06-20T10:44:41Z,2017-06-22T06:04:55Z,2017-06-22T06:06:11Z,MERGED,True,2,10,1,https://github.com/bkdoormaus,Improved path behavior in GTK native file dialog.,1,[],https://github.com/liballeg/allegro5/pull/775,https://github.com/oitofelix,4,https://github.com/liballeg/allegro5/pull/775#issuecomment-310212350,"Before, the path ""/a/b/c/"" would open with the directory at ""/a/b/"", instead of
the desired path.
I believe the new logic corrects this.",Is this consistent with other platforms' native file dialogs?,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,775,2017-06-20T10:44:41Z,2017-06-22T06:04:55Z,2017-06-22T06:06:11Z,MERGED,True,2,10,1,https://github.com/bkdoormaus,Improved path behavior in GTK native file dialog.,1,[],https://github.com/liballeg/allegro5/pull/775,https://github.com/bkdoormaus,5,https://github.com/liballeg/allegro5/pull/775#issuecomment-310230102,"Before, the path ""/a/b/c/"" would open with the directory at ""/a/b/"", instead of
the desired path.
I believe the new logic corrects this.","I don't know. I don't have access to a Windows machine to test at the moment and for the foreseeable future.
From a cursory look, the Windows file dialog box should have similar behavior. It has an extra check to see if the provided path is a directory, and if not, clears the filename portion of the path. I'm not sure if that's ideal. I also don't see where the Windows file dialog box assigns the filename portion, if provided.
Again, I don't have a Windows machine so I can't test it.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,775,2017-06-20T10:44:41Z,2017-06-22T06:04:55Z,2017-06-22T06:06:11Z,MERGED,True,2,10,1,https://github.com/bkdoormaus,Improved path behavior in GTK native file dialog.,1,[],https://github.com/liballeg/allegro5/pull/775,https://github.com/goob256,6,https://github.com/liballeg/allegro5/pull/775#issuecomment-310282238,"Before, the path ""/a/b/c/"" would open with the directory at ""/a/b/"", instead of
the desired path.
I believe the new logic corrects this.",It works the same on Windows. A note should be added to the docs to add a trailing slash (Windows doesn't need it but macOS/Linux do) if you want a directory. macOS behaves almost the same except it doesn't allow setting the inital path to a file (it will then just show the directory the file is in.),True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,775,2017-06-20T10:44:41Z,2017-06-22T06:04:55Z,2017-06-22T06:06:11Z,MERGED,True,2,10,1,https://github.com/bkdoormaus,Improved path behavior in GTK native file dialog.,1,[],https://github.com/liballeg/allegro5/pull/775,https://github.com/goob256,7,https://github.com/liballeg/allegro5/pull/775#issuecomment-310284655,"Before, the path ""/a/b/c/"" would open with the directory at ""/a/b/"", instead of
the desired path.
I believe the new logic corrects this.",Thanks for the fix!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,776,2017-06-23T17:23:38Z,2017-06-23T18:09:56Z,2017-06-23T18:09:56Z,MERGED,True,2,2,1,https://github.com/verderten,Fixed corrupted regexps while generating python bindings,1,[],https://github.com/liballeg/allegro5/pull/776,https://github.com/verderten,1,https://github.com/liballeg/allegro5/pull/776,Got errors while building,Got errors while building,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,776,2017-06-23T17:23:38Z,2017-06-23T18:09:56Z,2017-06-23T18:09:56Z,MERGED,True,2,2,1,https://github.com/verderten,Fixed corrupted regexps while generating python bindings,1,[],https://github.com/liballeg/allegro5/pull/776,https://github.com/verderten,2,https://github.com/liballeg/allegro5/pull/776#issuecomment-310728136,Got errors while building,"Strangely, after re-checking unchanged version it seemed to work as expected
Previously it was failing because of unknown '\e'",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,776,2017-06-23T17:23:38Z,2017-06-23T18:09:56Z,2017-06-23T18:09:56Z,MERGED,True,2,2,1,https://github.com/verderten,Fixed corrupted regexps while generating python bindings,1,[],https://github.com/liballeg/allegro5/pull/776,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/776#issuecomment-310731699,Got errors while building,"Hmm, even if it works, it seems that the intention was to have '\b' there.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,777,2017-06-26T01:27:15Z,2017-06-26T02:49:31Z,2017-06-26T02:49:36Z,MERGED,True,1,1,1,https://github.com/dos1,"Fix ""Since"" field for al_x_set_initial_icon in docs",1,[],https://github.com/liballeg/allegro5/pull/777,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/777,"5.2.2 has been already released and doesn't contain al_x_set_initial_icon function.
It's now 5.2.3 in git, so let's set it as that.","5.2.2 has been already released and doesn't contain al_x_set_initial_icon function.
It's now 5.2.3 in git, so let's set it as that.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,777,2017-06-26T01:27:15Z,2017-06-26T02:49:31Z,2017-06-26T02:49:36Z,MERGED,True,1,1,1,https://github.com/dos1,"Fix ""Since"" field for al_x_set_initial_icon in docs",1,[],https://github.com/liballeg/allegro5/pull/777,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/777#issuecomment-310951543,"5.2.2 has been already released and doesn't contain al_x_set_initial_icon function.
It's now 5.2.3 in git, so let's set it as that.",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,778,2017-06-26T11:32:56Z,2017-06-26T16:15:13Z,2017-06-26T16:15:19Z,MERGED,True,4,4,1,https://github.com/dos1,Android: fix LocalRef leak when opening files using APK interface,1,[],https://github.com/liballeg/allegro5/pull/778,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/778,"LocalRef pool is limited in size to 512 elements, so code like
for (int i=0; i<512; i++) {
  ALLEGRO_FILE *file = al_fopen(filename, ""r"");
  if (file) {
    al_fclose(file);
  }
}
was crashing the application. This also applied to functions like al_filename_exists, making it even easier to trigger.","LocalRef pool is limited in size to 512 elements, so code like
for (int i=0; i<512; i++) {
  ALLEGRO_FILE *file = al_fopen(filename, ""r"");
  if (file) {
    al_fclose(file);
  }
}
was crashing the application. This also applied to functions like al_filename_exists, making it even easier to trigger.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,778,2017-06-26T11:32:56Z,2017-06-26T16:15:13Z,2017-06-26T16:15:19Z,MERGED,True,4,4,1,https://github.com/dos1,Android: fix LocalRef leak when opening files using APK interface,1,[],https://github.com/liballeg/allegro5/pull/778,https://github.com/goob256,2,https://github.com/liballeg/allegro5/pull/778#issuecomment-311107593,"LocalRef pool is limited in size to 512 elements, so code like
for (int i=0; i<512; i++) {
  ALLEGRO_FILE *file = al_fopen(filename, ""r"");
  if (file) {
    al_fclose(file);
  }
}
was crashing the application. This also applied to functions like al_filename_exists, making it even easier to trigger.",Thank you for this!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,784,2017-07-11T09:12:53Z,2017-07-16T19:05:10Z,2017-07-16T19:05:10Z,MERGED,True,1,1,1,https://github.com/2bt,Fix a typo,1,[],https://github.com/liballeg/allegro5/pull/784,https://github.com/2bt,1,https://github.com/liballeg/allegro5/pull/784,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,784,2017-07-11T09:12:53Z,2017-07-16T19:05:10Z,2017-07-16T19:05:10Z,MERGED,True,1,1,1,https://github.com/2bt,Fix a typo,1,[],https://github.com/liballeg/allegro5/pull/784,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/784#issuecomment-315629894,,Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,787,2017-07-20T15:10:22Z,2017-07-21T15:13:40Z,2017-07-21T15:13:40Z,MERGED,True,6,0,1,https://github.com/fatcerberus,Fix al_set_clipping_rectangle() when out-of-bounds,1,[],https://github.com/liballeg/allegro5/pull/787,https://github.com/fatcerberus,1,https://github.com/liballeg/allegro5/pull/787,"When using OpenGL and calling al_set_clipping_rectangle() specifying a rectangle that resides completely off-surface, the width and height of the scissor box are currently calculated as negative, causing glScissor() to post a GL_INVALID_VALUE error.  That error gets picked up later when an unrelated function checks glGetError(), causing mysterious failures.
This fixes the bug by explicitly clamping the scissor box to width/height 0.
Fixes #786.","When using OpenGL and calling al_set_clipping_rectangle() specifying a rectangle that resides completely off-surface, the width and height of the scissor box are currently calculated as negative, causing glScissor() to post a GL_INVALID_VALUE error.  That error gets picked up later when an unrelated function checks glGetError(), causing mysterious failures.
This fixes the bug by explicitly clamping the scissor box to width/height 0.
Fixes #786.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,787,2017-07-20T15:10:22Z,2017-07-21T15:13:40Z,2017-07-21T15:13:40Z,MERGED,True,6,0,1,https://github.com/fatcerberus,Fix al_set_clipping_rectangle() when out-of-bounds,1,[],https://github.com/liballeg/allegro5/pull/787,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/787#issuecomment-317028033,"When using OpenGL and calling al_set_clipping_rectangle() specifying a rectangle that resides completely off-surface, the width and height of the scissor box are currently calculated as negative, causing glScissor() to post a GL_INVALID_VALUE error.  That error gets picked up later when an unrelated function checks glGetError(), causing mysterious failures.
This fixes the bug by explicitly clamping the scissor box to width/height 0.
Fixes #786.",Nicely done! Thanks for debugging this and the fix!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,789,2017-07-23T16:51:26Z,2017-07-29T16:24:04Z,2017-08-11T06:13:20Z,MERGED,True,22,4,2,https://github.com/evouga,Several fixes to DirectDraw Windows backend,1,[],https://github.com/liballeg/allegro5/pull/789,https://github.com/evouga,1,https://github.com/liballeg/allegro5/pull/789,"the switch-in and switch-out handlers need mutexes to prevent race conditions with drawing when alt-tabbing into or out of fullscreen.
added message handlers to restore the palette if the system palette changed while the program was tabbed out
critical section needs to be initialized before installing the user window hook","the switch-in and switch-out handlers need mutexes to prevent race conditions with drawing when alt-tabbing into or out of fullscreen.
added message handlers to restore the palette if the system palette changed while the program was tabbed out
critical section needs to be initialized before installing the user window hook",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,789,2017-07-23T16:51:26Z,2017-07-29T16:24:04Z,2017-08-11T06:13:20Z,MERGED,True,22,4,2,https://github.com/evouga,Several fixes to DirectDraw Windows backend,1,[],https://github.com/liballeg/allegro5/pull/789,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/789#issuecomment-318841750,"the switch-in and switch-out handlers need mutexes to prevent race conditions with drawing when alt-tabbing into or out of fullscreen.
added message handlers to restore the palette if the system palette changed while the program was tabbed out
critical section needs to be initialized before installing the user window hook",Seems reasonable. Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,789,2017-07-23T16:51:26Z,2017-07-29T16:24:04Z,2017-08-11T06:13:20Z,MERGED,True,22,4,2,https://github.com/evouga,Several fixes to DirectDraw Windows backend,1,[],https://github.com/liballeg/allegro5/pull/789,https://github.com/evouga,3,https://github.com/liballeg/allegro5/pull/789#issuecomment-321738328,"the switch-in and switch-out handlers need mutexes to prevent race conditions with drawing when alt-tabbing into or out of fullscreen.
added message handlers to restore the palette if the system palette changed while the program was tabbed out
critical section needs to be initialized before installing the user window hook","You are absolutely right, I missed applying a patch that adds
#include ""wddraw.h""
which contains the missing definitions.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,791,2017-07-25T19:20:52Z,2017-07-29T17:02:22Z,2017-07-29T17:02:22Z,CLOSED,False,34,4,1,https://github.com/bkdoormaus,Gracefully handle all cases in GTK file dialog.,1,[],https://github.com/liballeg/allegro5/pull/791,https://github.com/bkdoormaus,1,https://github.com/liballeg/allegro5/pull/791,"I tried the following cases. I don't think there's any other permutations possible.
For save dialogs:

Path is directory: Shows directory
Path is non-existing file: Sets the filename portion to the filename portion of the path, shows directory
Path is an existing file: Selects file, shows directory

For open dialogs:

Path is a directory: Shows last existing directory
Path is a non-existing file: Shows directory, no filename set
Path is an existing file: Shows directory, filename set

(Directory being the directory the file is in, or whatever portion of the path actually exists on the filesystem.)
There is one small thing: if you do something like ""/usr/foo/bar/baz"" for the save dialog, the directory will be ""/usr"" and the filename portion will be ""baz"". (Assuming directory ""foo"" doesn't exist). Is that behavior that acceptable?","I tried the following cases. I don't think there's any other permutations possible.
For save dialogs:

Path is directory: Shows directory
Path is non-existing file: Sets the filename portion to the filename portion of the path, shows directory
Path is an existing file: Selects file, shows directory

For open dialogs:

Path is a directory: Shows last existing directory
Path is a non-existing file: Shows directory, no filename set
Path is an existing file: Shows directory, filename set

(Directory being the directory the file is in, or whatever portion of the path actually exists on the filesystem.)
There is one small thing: if you do something like ""/usr/foo/bar/baz"" for the save dialog, the directory will be ""/usr"" and the filename portion will be ""baz"". (Assuming directory ""foo"" doesn't exist). Is that behavior that acceptable?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,791,2017-07-25T19:20:52Z,2017-07-29T17:02:22Z,2017-07-29T17:02:22Z,CLOSED,False,34,4,1,https://github.com/bkdoormaus,Gracefully handle all cases in GTK file dialog.,1,[],https://github.com/liballeg/allegro5/pull/791,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/791#issuecomment-318842812,"I tried the following cases. I don't think there's any other permutations possible.
For save dialogs:

Path is directory: Shows directory
Path is non-existing file: Sets the filename portion to the filename portion of the path, shows directory
Path is an existing file: Selects file, shows directory

For open dialogs:

Path is a directory: Shows last existing directory
Path is a non-existing file: Shows directory, no filename set
Path is an existing file: Shows directory, filename set

(Directory being the directory the file is in, or whatever portion of the path actually exists on the filesystem.)
There is one small thing: if you do something like ""/usr/foo/bar/baz"" for the save dialog, the directory will be ""/usr"" and the filename portion will be ""baz"". (Assuming directory ""foo"" doesn't exist). Is that behavior that acceptable?","That looks nice. The only permutation that I have a little bit of an issue with is the ""Path is a non-existing file: Shows directory, no filename set"" one. It seems like it'd be convenient to show the filename there as well, as a hint to the user what is expected.
I note however that maybe GTK doesn't even support that, as the current code doesn't check for the file existing, yet the behavior I want doesn't seem to happen.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,791,2017-07-25T19:20:52Z,2017-07-29T17:02:22Z,2017-07-29T17:02:22Z,CLOSED,False,34,4,1,https://github.com/bkdoormaus,Gracefully handle all cases in GTK file dialog.,1,[],https://github.com/liballeg/allegro5/pull/791,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/791#issuecomment-318844181,"I tried the following cases. I don't think there's any other permutations possible.
For save dialogs:

Path is directory: Shows directory
Path is non-existing file: Sets the filename portion to the filename portion of the path, shows directory
Path is an existing file: Selects file, shows directory

For open dialogs:

Path is a directory: Shows last existing directory
Path is a non-existing file: Shows directory, no filename set
Path is an existing file: Shows directory, filename set

(Directory being the directory the file is in, or whatever portion of the path actually exists on the filesystem.)
There is one small thing: if you do something like ""/usr/foo/bar/baz"" for the save dialog, the directory will be ""/usr"" and the filename portion will be ""baz"". (Assuming directory ""foo"" doesn't exist). Is that behavior that acceptable?","Ok, looks like that's impossible. Merged as f52d73a as is. thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,793,2017-07-29T04:57:11Z,2017-07-29T16:46:26Z,2017-07-29T16:46:27Z,MERGED,True,61,5,1,https://github.com/SiegeLord,Detect and link optional FreeType dependencies.,1,[],https://github.com/liballeg/allegro5/pull/793,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/793,Fixes #773.,Fixes #773.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,794,2017-07-31T05:43:02Z,2017-08-10T03:38:47Z,2017-08-10T03:38:47Z,CLOSED,False,98,70,2,https://github.com/SiegeLord,Try again to get CMake to automatically detect what FreeType needs.,1,[],https://github.com/liballeg/allegro5/pull/794,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/794,"This time we're doing it via compile tests directly.
Fixes #773","This time we're doing it via compile tests directly.
Fixes #773",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,797,2017-08-11T06:15:03Z,2017-08-11T15:14:27Z,2017-08-11T15:14:27Z,CLOSED,False,1,0,1,https://github.com/evouga,Missing #include,1,[],https://github.com/liballeg/allegro5/pull/797,https://github.com/evouga,1,https://github.com/liballeg/allegro5/pull/797,Pull request #789 missed a patch that #includes a required header file. Very sorry about that.,Pull request #789 missed a patch that #includes a required header file. Very sorry about that.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,797,2017-08-11T06:15:03Z,2017-08-11T15:14:27Z,2017-08-11T15:14:27Z,CLOSED,False,1,0,1,https://github.com/evouga,Missing #include,1,[],https://github.com/liballeg/allegro5/pull/797,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/797#issuecomment-321840798,Pull request #789 missed a patch that #includes a required header file. Very sorry about that.,"We actually already have a commit to fix this: c12b6be
Thanks anyway!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,801,2017-08-13T21:37:23Z,2017-08-18T03:55:59Z,2017-08-18T03:55:59Z,CLOSED,False,1,1,1,https://github.com/dos1,cosmic-protector: fix Android build on default toolchain by not providing STL,1,[],https://github.com/liballeg/allegro5/pull/801,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/801,"Fix Android build on default toolchain by not providing STL
Hardcoding STL only breaks things instead of fixing them.
Closes #799","Fix Android build on default toolchain by not providing STL
Hardcoding STL only breaks things instead of fixing them.
Closes #799",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,801,2017-08-13T21:37:23Z,2017-08-18T03:55:59Z,2017-08-18T03:55:59Z,CLOSED,False,1,1,1,https://github.com/dos1,cosmic-protector: fix Android build on default toolchain by not providing STL,1,[],https://github.com/liballeg/allegro5/pull/801,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/801#issuecomment-323252932,"Fix Android build on default toolchain by not providing STL
Hardcoding STL only breaks things instead of fixing them.
Closes #799","Merged as 4a658a7, thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,802,2017-08-13T21:38:51Z,2017-09-10T04:03:01Z,2017-09-10T04:03:01Z,CLOSED,False,7,7,2,https://github.com/dos1,Android: use clang instead of gcc,2,[],https://github.com/liballeg/allegro5/pull/802,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/802,"GCC in NDK is unfortunately deprecated since r11 and won't be updated beyond 4.9 (and is eventually going to be removed).
Clang has been introduced in r8c. The last NDK version that allows to target the lowest API level supported by Allegro (android-9) is r14b, so the compiler can be safely switched to Clang.","GCC in NDK is unfortunately deprecated since r11 and won't be updated beyond 4.9 (and is eventually going to be removed).
Clang has been introduced in r8c. The last NDK version that allows to target the lowest API level supported by Allegro (android-9) is r14b, so the compiler can be safely switched to Clang.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,802,2017-08-13T21:38:51Z,2017-09-10T04:03:01Z,2017-09-10T04:03:01Z,CLOSED,False,7,7,2,https://github.com/dos1,Android: use clang instead of gcc,2,[],https://github.com/liballeg/allegro5/pull/802,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/802#issuecomment-328318259,"GCC in NDK is unfortunately deprecated since r11 and won't be updated beyond 4.9 (and is eventually going to be removed).
Clang has been introduced in r8c. The last NDK version that allows to target the lowest API level supported by Allegro (android-9) is r14b, so the compiler can be safely switched to Clang.",Merged as 15c1650. Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,805,2017-08-15T05:31:26Z,2018-09-03T19:21:06Z,2018-09-03T19:38:07Z,CLOSED,False,209,6,6,https://github.com/fatcerberus,Implement per-bitmap blenders,2,[],https://github.com/liballeg/allegro5/pull/805,https://github.com/fatcerberus,1,https://github.com/liballeg/allegro5/pull/805,"This adds the APIs listed below, plus accompanying documentation.

al_get_bitmap_blender(*op, *src, *dst)
al_get_separate_bitmap_blender(*op, *src, *dst, *alpha_op, *alpha_src, *alpha_dst)
al_get_bitmap_blend_color()
al_set_bitmap_blender(op, src, dst)
al_set_separate_bitmap_blender(op, src, dst, alpha_op, alpha_src, alpha_dst)
al_set_bitmap_blend_color(color)
al_reset_bitmap_blender()

All functions operate on the current target bitmap.
Before al_set_bitmap_blender() is called for a given bitmap, its ""use bitmap blender"" flag is false and the thread-local blender is used instead.  al_reset_bitmap_blender() clears any blender set for the bitmap and returns it to using the thread-local blender.
Let me know if there are any issues with the implementation.
Fixes #783.","This adds the APIs listed below, plus accompanying documentation.

al_get_bitmap_blender(*op, *src, *dst)
al_get_separate_bitmap_blender(*op, *src, *dst, *alpha_op, *alpha_src, *alpha_dst)
al_get_bitmap_blend_color()
al_set_bitmap_blender(op, src, dst)
al_set_separate_bitmap_blender(op, src, dst, alpha_op, alpha_src, alpha_dst)
al_set_bitmap_blend_color(color)
al_reset_bitmap_blender()

All functions operate on the current target bitmap.
Before al_set_bitmap_blender() is called for a given bitmap, its ""use bitmap blender"" flag is false and the thread-local blender is used instead.  al_reset_bitmap_blender() clears any blender set for the bitmap and returns it to using the thread-local blender.
Let me know if there are any issues with the implementation.
Fixes #783.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,805,2017-08-15T05:31:26Z,2018-09-03T19:21:06Z,2018-09-03T19:38:07Z,CLOSED,False,209,6,6,https://github.com/fatcerberus,Implement per-bitmap blenders,2,[],https://github.com/liballeg/allegro5/pull/805,https://github.com/beoran,2,https://github.com/liballeg/allegro5/pull/805#issuecomment-322386992,"This adds the APIs listed below, plus accompanying documentation.

al_get_bitmap_blender(*op, *src, *dst)
al_get_separate_bitmap_blender(*op, *src, *dst, *alpha_op, *alpha_src, *alpha_dst)
al_get_bitmap_blend_color()
al_set_bitmap_blender(op, src, dst)
al_set_separate_bitmap_blender(op, src, dst, alpha_op, alpha_src, alpha_dst)
al_set_bitmap_blend_color(color)
al_reset_bitmap_blender()

All functions operate on the current target bitmap.
Before al_set_bitmap_blender() is called for a given bitmap, its ""use bitmap blender"" flag is false and the thread-local blender is used instead.  al_reset_bitmap_blender() clears any blender set for the bitmap and returns it to using the thread-local blender.
Let me know if there are any issues with the implementation.
Fixes #783.","Nice, but I think you should also add an example program for these
functions, and implement tests using the test harness.
…
On 15 Aug 2017 7:31 a.m., ""Bruce Pascoe"" ***@***.***> wrote:
 This adds the APIs listed below, plus accompanying documentation.

    - al_get_bitmap_blender(*op, *src, *dst)
    - al_get_separate_bitmap_blender(*op, *src, *dst, *alpha_op,
    *alpha_src, *alpha_dst)
    - al_get_bitmap_blend_color()
    - al_set_bitmap_blender(op, src, dst)
    - al_set_separate_bitmap_blender(op, src, dst, alpha_op, alpha_src,
    alpha_dst)
    - al_set_bitmap_blend_color(color)
    - al_reset_bitmap_blender()

 All functions operate on the current target bitmap.

 Before al_set_bitmap_blender() is called for a given bitmap, its ""use
 bitmap blender"" flag is false and the thread-local blender is used instead.
 al_reset_bitmap_blender() clears any blender set for the bitmap and
 returns it to using the thread-local blender.

 Let me know if there are any issues with the implementation.

 Fixes #783 <#783>.
 ------------------------------
 You can view, comment on, or merge this pull request online at:

   #805
 Commit Summary

    - Implement bitmap blenders
    - Document bitmap blender API

 File Changes

    - *M* docs/src/refman/graphics.txt
    <https://github.com/liballeg/allegro5/pull/805/files#diff-0> (72)
    - *M* include/allegro5/bitmap.h
    <https://github.com/liballeg/allegro5/pull/805/files#diff-1> (9)
    - *M* include/allegro5/internal/aintern_bitmap.h
    <https://github.com/liballeg/allegro5/pull/805/files#diff-2> (5)
    - *M* src/bitmap.c
    <https://github.com/liballeg/allegro5/pull/805/files#diff-3> (121)
    - *M* src/opengl/ogl_draw.c
    <https://github.com/liballeg/allegro5/pull/805/files#diff-4> (4)
    - *M* src/win/d3d_disp.cpp
    <https://github.com/liballeg/allegro5/pull/805/files#diff-5> (4)

 Patch Links:

    - https://github.com/liballeg/allegro5/pull/805.patch
    - https://github.com/liballeg/allegro5/pull/805.diff

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#805>, or mute the thread
 <https://github.com/notifications/unsubscribe-auth/AAEWeUShl6TQW-ZTvrt1o7E26LjZIW8Iks5sYS0vgaJpZM4O3NCj>
 .",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,805,2017-08-15T05:31:26Z,2018-09-03T19:21:06Z,2018-09-03T19:38:07Z,CLOSED,False,209,6,6,https://github.com/fatcerberus,Implement per-bitmap blenders,2,[],https://github.com/liballeg/allegro5/pull/805,https://github.com/elias-pschernig,3,https://github.com/liballeg/allegro5/pull/805#issuecomment-322444384,"This adds the APIs listed below, plus accompanying documentation.

al_get_bitmap_blender(*op, *src, *dst)
al_get_separate_bitmap_blender(*op, *src, *dst, *alpha_op, *alpha_src, *alpha_dst)
al_get_bitmap_blend_color()
al_set_bitmap_blender(op, src, dst)
al_set_separate_bitmap_blender(op, src, dst, alpha_op, alpha_src, alpha_dst)
al_set_bitmap_blend_color(color)
al_reset_bitmap_blender()

All functions operate on the current target bitmap.
Before al_set_bitmap_blender() is called for a given bitmap, its ""use bitmap blender"" flag is false and the thread-local blender is used instead.  al_reset_bitmap_blender() clears any blender set for the bitmap and returns it to using the thread-local blender.
Let me know if there are any issues with the implementation.
Fixes #783.","To me names like al_get_bitmap_blender are a bit confusing. Currently all al_get_bitmap_* functions like al_get_bitmap_width operate on an ALLEGRO_BITMAP you pass in as first argument, not on the currently active target bitmap. A less confusing but more awkward name would be al_get_current_target_bitmap_blender. Maybe we can shorten that to al_get_current_blender or al_get_target_blender?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,805,2017-08-15T05:31:26Z,2018-09-03T19:21:06Z,2018-09-03T19:38:07Z,CLOSED,False,209,6,6,https://github.com/fatcerberus,Implement per-bitmap blenders,2,[],https://github.com/liballeg/allegro5/pull/805,https://github.com/fatcerberus,4,https://github.com/liballeg/allegro5/pull/805#issuecomment-322497724,"This adds the APIs listed below, plus accompanying documentation.

al_get_bitmap_blender(*op, *src, *dst)
al_get_separate_bitmap_blender(*op, *src, *dst, *alpha_op, *alpha_src, *alpha_dst)
al_get_bitmap_blend_color()
al_set_bitmap_blender(op, src, dst)
al_set_separate_bitmap_blender(op, src, dst, alpha_op, alpha_src, alpha_dst)
al_set_bitmap_blend_color(color)
al_reset_bitmap_blender()

All functions operate on the current target bitmap.
Before al_set_bitmap_blender() is called for a given bitmap, its ""use bitmap blender"" flag is false and the thread-local blender is used instead.  al_reset_bitmap_blender() clears any blender set for the bitmap and returns it to using the thread-local blender.
Let me know if there are any issues with the implementation.
Fixes #783.","I actually debated having them take an ALLEGRO_BITMAP as first argument (there's no reason they can't, it's just setting a few ints under the hood), but decided to have them operate on the current target bitmap by analogy with al_set_clipping_rectangle().  I'd be willing to change it if you think that'd be less confusing.  I don't want to make the names any more verbose than they already are if it can be avoided, names like al_set_separate_bitmap_blender() are already bordering on being too long.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,805,2017-08-15T05:31:26Z,2018-09-03T19:21:06Z,2018-09-03T19:38:07Z,CLOSED,False,209,6,6,https://github.com/fatcerberus,Implement per-bitmap blenders,2,[],https://github.com/liballeg/allegro5/pull/805,https://github.com/SiegeLord,5,https://github.com/liballeg/allegro5/pull/805#issuecomment-322500222,"This adds the APIs listed below, plus accompanying documentation.

al_get_bitmap_blender(*op, *src, *dst)
al_get_separate_bitmap_blender(*op, *src, *dst, *alpha_op, *alpha_src, *alpha_dst)
al_get_bitmap_blend_color()
al_set_bitmap_blender(op, src, dst)
al_set_separate_bitmap_blender(op, src, dst, alpha_op, alpha_src, alpha_dst)
al_set_bitmap_blend_color(color)
al_reset_bitmap_blender()

All functions operate on the current target bitmap.
Before al_set_bitmap_blender() is called for a given bitmap, its ""use bitmap blender"" flag is false and the thread-local blender is used instead.  al_reset_bitmap_blender() clears any blender set for the bitmap and returns it to using the thread-local blender.
Let me know if there are any issues with the implementation.
Fixes #783.","I don't mind the bitmap terminology too much. Yes, it's definitely inconsistent, but I think it's the clearest option available to us.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,805,2017-08-15T05:31:26Z,2018-09-03T19:21:06Z,2018-09-03T19:38:07Z,CLOSED,False,209,6,6,https://github.com/fatcerberus,Implement per-bitmap blenders,2,[],https://github.com/liballeg/allegro5/pull/805,https://github.com/fatcerberus,6,https://github.com/liballeg/allegro5/pull/805#issuecomment-322500697,"This adds the APIs listed below, plus accompanying documentation.

al_get_bitmap_blender(*op, *src, *dst)
al_get_separate_bitmap_blender(*op, *src, *dst, *alpha_op, *alpha_src, *alpha_dst)
al_get_bitmap_blend_color()
al_set_bitmap_blender(op, src, dst)
al_set_separate_bitmap_blender(op, src, dst, alpha_op, alpha_src, alpha_dst)
al_set_bitmap_blend_color(color)
al_reset_bitmap_blender()

All functions operate on the current target bitmap.
Before al_set_bitmap_blender() is called for a given bitmap, its ""use bitmap blender"" flag is false and the thread-local blender is used instead.  al_reset_bitmap_blender() clears any blender set for the bitmap and returns it to using the thread-local blender.
Let me know if there are any issues with the implementation.
Fixes #783.","@SiegeLord Are you okay with the current behavior of operating on the current target bitmap, or should I change it to take an explicit bitmap pointer?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,805,2017-08-15T05:31:26Z,2018-09-03T19:21:06Z,2018-09-03T19:38:07Z,CLOSED,False,209,6,6,https://github.com/fatcerberus,Implement per-bitmap blenders,2,[],https://github.com/liballeg/allegro5/pull/805,https://github.com/SiegeLord,7,https://github.com/liballeg/allegro5/pull/805#issuecomment-322502187,"This adds the APIs listed below, plus accompanying documentation.

al_get_bitmap_blender(*op, *src, *dst)
al_get_separate_bitmap_blender(*op, *src, *dst, *alpha_op, *alpha_src, *alpha_dst)
al_get_bitmap_blend_color()
al_set_bitmap_blender(op, src, dst)
al_set_separate_bitmap_blender(op, src, dst, alpha_op, alpha_src, alpha_dst)
al_set_bitmap_blend_color(color)
al_reset_bitmap_blender()

All functions operate on the current target bitmap.
Before al_set_bitmap_blender() is called for a given bitmap, its ""use bitmap blender"" flag is false and the thread-local blender is used instead.  al_reset_bitmap_blender() clears any blender set for the bitmap and returns it to using the thread-local blender.
Let me know if there are any issues with the implementation.
Fixes #783.","I definitely prefer the current target bitmap, that's consistent with every other API we have. I think this aspect is the one we should definitely keep. I wouldn't worry about the names too strongly, I feel they're in some sense temporary until the far future when we can replace the current blender functions with these, so I'm mostly focused on clarity where possible.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,805,2017-08-15T05:31:26Z,2018-09-03T19:21:06Z,2018-09-03T19:38:07Z,CLOSED,False,209,6,6,https://github.com/fatcerberus,Implement per-bitmap blenders,2,[],https://github.com/liballeg/allegro5/pull/805,https://github.com/fatcerberus,8,https://github.com/liballeg/allegro5/pull/805#issuecomment-322560752,"This adds the APIs listed below, plus accompanying documentation.

al_get_bitmap_blender(*op, *src, *dst)
al_get_separate_bitmap_blender(*op, *src, *dst, *alpha_op, *alpha_src, *alpha_dst)
al_get_bitmap_blend_color()
al_set_bitmap_blender(op, src, dst)
al_set_separate_bitmap_blender(op, src, dst, alpha_op, alpha_src, alpha_dst)
al_set_bitmap_blend_color(color)
al_reset_bitmap_blender()

All functions operate on the current target bitmap.
Before al_set_bitmap_blender() is called for a given bitmap, its ""use bitmap blender"" flag is false and the thread-local blender is used instead.  al_reset_bitmap_blender() clears any blender set for the bitmap and returns it to using the thread-local blender.
Let me know if there are any issues with the implementation.
Fixes #783.","I couldn't think of what to do for an example program that isn't already covered by the ones already present.  It's the same blender mechanism we've always had, just that its per-bitmap now.
I'll try to come up with some tests but the test harness confused me--there were hashes and stuff and the templates kind of baffled me too.  I'll study it in more detail later and try to decipher it all. :)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,805,2017-08-15T05:31:26Z,2018-09-03T19:21:06Z,2018-09-03T19:38:07Z,CLOSED,False,209,6,6,https://github.com/fatcerberus,Implement per-bitmap blenders,2,[],https://github.com/liballeg/allegro5/pull/805,https://github.com/SiegeLord,9,https://github.com/liballeg/allegro5/pull/805#issuecomment-323107922,"This adds the APIs listed below, plus accompanying documentation.

al_get_bitmap_blender(*op, *src, *dst)
al_get_separate_bitmap_blender(*op, *src, *dst, *alpha_op, *alpha_src, *alpha_dst)
al_get_bitmap_blend_color()
al_set_bitmap_blender(op, src, dst)
al_set_separate_bitmap_blender(op, src, dst, alpha_op, alpha_src, alpha_dst)
al_set_bitmap_blend_color(color)
al_reset_bitmap_blender()

All functions operate on the current target bitmap.
Before al_set_bitmap_blender() is called for a given bitmap, its ""use bitmap blender"" flag is false and the thread-local blender is used instead.  al_reset_bitmap_blender() clears any blender set for the bitmap and returns it to using the thread-local blender.
Let me know if there are any issues with the implementation.
Fixes #783.","If the test system is giving you too much trouble, then I wouldn't worry about it... it's a little too obtuse for its own good, someone should replace it.
For an example, the typical way these things are demonstrated is that you have multiple bitmaps, set their blenders before the main loop and then switch between them during the main loop with the resultant differences in the blending mode happening automatically.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,805,2017-08-15T05:31:26Z,2018-09-03T19:21:06Z,2018-09-03T19:38:07Z,CLOSED,False,209,6,6,https://github.com/fatcerberus,Implement per-bitmap blenders,2,[],https://github.com/liballeg/allegro5/pull/805,https://github.com/fatcerberus,10,https://github.com/liballeg/allegro5/pull/805#issuecomment-328884963,"This adds the APIs listed below, plus accompanying documentation.

al_get_bitmap_blender(*op, *src, *dst)
al_get_separate_bitmap_blender(*op, *src, *dst, *alpha_op, *alpha_src, *alpha_dst)
al_get_bitmap_blend_color()
al_set_bitmap_blender(op, src, dst)
al_set_separate_bitmap_blender(op, src, dst, alpha_op, alpha_src, alpha_dst)
al_set_bitmap_blend_color(color)
al_reset_bitmap_blender()

All functions operate on the current target bitmap.
Before al_set_bitmap_blender() is called for a given bitmap, its ""use bitmap blender"" flag is false and the thread-local blender is used instead.  al_reset_bitmap_blender() clears any blender set for the bitmap and returns it to using the thread-local blender.
Let me know if there are any issues with the implementation.
Fixes #783.","Alright, I've been busy with miniSphere the past month but I'll see if I can get this PR cleaned up in the next day or so so it can be merged.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,805,2017-08-15T05:31:26Z,2018-09-03T19:21:06Z,2018-09-03T19:38:07Z,CLOSED,False,209,6,6,https://github.com/fatcerberus,Implement per-bitmap blenders,2,[],https://github.com/liballeg/allegro5/pull/805,https://github.com/fatcerberus,11,https://github.com/liballeg/allegro5/pull/805#issuecomment-363164373,"This adds the APIs listed below, plus accompanying documentation.

al_get_bitmap_blender(*op, *src, *dst)
al_get_separate_bitmap_blender(*op, *src, *dst, *alpha_op, *alpha_src, *alpha_dst)
al_get_bitmap_blend_color()
al_set_bitmap_blender(op, src, dst)
al_set_separate_bitmap_blender(op, src, dst, alpha_op, alpha_src, alpha_dst)
al_set_bitmap_blend_color(color)
al_reset_bitmap_blender()

All functions operate on the current target bitmap.
Before al_set_bitmap_blender() is called for a given bitmap, its ""use bitmap blender"" flag is false and the thread-local blender is used instead.  al_reset_bitmap_blender() clears any blender set for the bitmap and returns it to using the thread-local blender.
Let me know if there are any issues with the implementation.
Fixes #783.","The tricky part of making an example for this is that setting the bitmap blender only affects bitmaps used as render targets, i.e. the blend mode is used for things drawn to the bitmap and not for drawing the bitmap itself.  So it's not enough just to load a few bitmaps and draw them, I'll need to have it do some compositing or something.
It doesn't help either that I have no experience writing Allegro examples from scratch.  I have some free time now though, so I'll see what I can do.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,805,2017-08-15T05:31:26Z,2018-09-03T19:21:06Z,2018-09-03T19:38:07Z,CLOSED,False,209,6,6,https://github.com/fatcerberus,Implement per-bitmap blenders,2,[],https://github.com/liballeg/allegro5/pull/805,https://github.com/SiegeLord,12,https://github.com/liballeg/allegro5/pull/805#issuecomment-418180526,"This adds the APIs listed below, plus accompanying documentation.

al_get_bitmap_blender(*op, *src, *dst)
al_get_separate_bitmap_blender(*op, *src, *dst, *alpha_op, *alpha_src, *alpha_dst)
al_get_bitmap_blend_color()
al_set_bitmap_blender(op, src, dst)
al_set_separate_bitmap_blender(op, src, dst, alpha_op, alpha_src, alpha_dst)
al_set_bitmap_blend_color(color)
al_reset_bitmap_blender()

All functions operate on the current target bitmap.
Before al_set_bitmap_blender() is called for a given bitmap, its ""use bitmap blender"" flag is false and the thread-local blender is used instead.  al_reset_bitmap_blender() clears any blender set for the bitmap and returns it to using the thread-local blender.
Let me know if there are any issues with the implementation.
Fixes #783.","I'm picking this up in #925, having added the example and tests (the tests actually did pick up a few implementation issues). Thanks Bruce for the initial work!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,805,2017-08-15T05:31:26Z,2018-09-03T19:21:06Z,2018-09-03T19:38:07Z,CLOSED,False,209,6,6,https://github.com/fatcerberus,Implement per-bitmap blenders,2,[],https://github.com/liballeg/allegro5/pull/805,https://github.com/fatcerberus,13,https://github.com/liballeg/allegro5/pull/805#issuecomment-418182689,"This adds the APIs listed below, plus accompanying documentation.

al_get_bitmap_blender(*op, *src, *dst)
al_get_separate_bitmap_blender(*op, *src, *dst, *alpha_op, *alpha_src, *alpha_dst)
al_get_bitmap_blend_color()
al_set_bitmap_blender(op, src, dst)
al_set_separate_bitmap_blender(op, src, dst, alpha_op, alpha_src, alpha_dst)
al_set_bitmap_blend_color(color)
al_reset_bitmap_blender()

All functions operate on the current target bitmap.
Before al_set_bitmap_blender() is called for a given bitmap, its ""use bitmap blender"" flag is false and the thread-local blender is used instead.  al_reset_bitmap_blender() clears any blender set for the bitmap and returns it to using the thread-local blender.
Let me know if there are any issues with the implementation.
Fixes #783.","No, problem, sorry I never got around to finishing this, other stuff got in the way. 😦",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,807,2017-08-17T17:08:36Z,2017-08-18T04:00:18Z,2017-08-18T04:00:18Z,CLOSED,False,2,0,2,https://github.com/dos1,Fix memleaks found with LeakSanitizer,2,[],https://github.com/liballeg/allegro5/pull/807,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/807,TIL: -fsanitize=leak :),TIL: -fsanitize=leak :),True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,807,2017-08-17T17:08:36Z,2017-08-18T04:00:18Z,2017-08-18T04:00:18Z,CLOSED,False,2,0,2,https://github.com/dos1,Fix memleaks found with LeakSanitizer,2,[],https://github.com/liballeg/allegro5/pull/807,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/807#issuecomment-323253367,TIL: -fsanitize=leak :),"Merged as 98a7808, thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,810,2017-08-18T04:48:38Z,2017-09-03T01:45:02Z,2017-09-03T01:45:02Z,MERGED,True,73,70,2,https://github.com/SiegeLord,Another attempt to get newer FreeType's linking.,1,[],https://github.com/liballeg/allegro5/pull/810,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/810,"This time we force the user to specify which optional FreeType dependencies we
should link in. This is supported by a build check that will fail if the user
screws up. Unfortunately it doesn't appear to be possible to reliably to detect
these things automatically.
Fixes #773","This time we force the user to specify which optional FreeType dependencies we
should link in. This is supported by a build check that will fail if the user
screws up. Unfortunately it doesn't appear to be possible to reliably to detect
these things automatically.
Fixes #773",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,810,2017-08-18T04:48:38Z,2017-09-03T01:45:02Z,2017-09-03T01:45:02Z,MERGED,True,73,70,2,https://github.com/SiegeLord,Another attempt to get newer FreeType's linking.,1,[],https://github.com/liballeg/allegro5/pull/810,https://github.com/fatcerberus,2,https://github.com/liballeg/allegro5/pull/810#issuecomment-323258720,"This time we force the user to specify which optional FreeType dependencies we
should link in. This is supported by a build check that will fail if the user
screws up. Unfortunately it doesn't appear to be possible to reliably to detect
these things automatically.
Fixes #773","Since it's supported by a compile check, would it be possible to do multiple compile checks to determine which dependencies are needed?  That would probably slow down the configuration step a lot though.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,810,2017-08-18T04:48:38Z,2017-09-03T01:45:02Z,2017-09-03T01:45:02Z,MERGED,True,73,70,2,https://github.com/SiegeLord,Another attempt to get newer FreeType's linking.,1,[],https://github.com/liballeg/allegro5/pull/810,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/810#issuecomment-323259598,"This time we force the user to specify which optional FreeType dependencies we
should link in. This is supported by a build check that will fail if the user
screws up. Unfortunately it doesn't appear to be possible to reliably to detect
these things automatically.
Fixes #773","This is what #794 did. It tried to compile without one of the dependencies each time. If it failed to compile, then we considered that dependency mandatory. The issue is that PNG and Zlib provided overlapping symbols (because PNG comes alongsize Zlib), so I couldn't get that system to disambiguate between PNG and Zlib requirement (i.e. it would erroneously conclude that PNG was required to link the TTF addon).",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,810,2017-08-18T04:48:38Z,2017-09-03T01:45:02Z,2017-09-03T01:45:02Z,MERGED,True,73,70,2,https://github.com/SiegeLord,Another attempt to get newer FreeType's linking.,1,[],https://github.com/liballeg/allegro5/pull/810,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/810#issuecomment-326778906,"This time we force the user to specify which optional FreeType dependencies we
should link in. This is supported by a build check that will fail if the user
screws up. Unfortunately it doesn't appear to be possible to reliably to detect
these things automatically.
Fixes #773","Tested this, and it seems to work okay everywhere in conjunction with #820, so meging it. It's not ideal, but it's better than it was before I think.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,811,2017-08-18T23:09:33Z,2019-08-12T00:03:24Z,2019-08-12T00:03:25Z,CLOSED,False,6,2,2,https://github.com/dos1,android: use immersive mode for fullscreen to hide navigation buttons,1,[],https://github.com/liballeg/allegro5/pull/811,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/811,"This bumps the build dependency to SDK 19.
Closes #800","This bumps the build dependency to SDK 19.
Closes #800",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,811,2017-08-18T23:09:33Z,2019-08-12T00:03:24Z,2019-08-12T00:03:25Z,CLOSED,False,6,2,2,https://github.com/dos1,android: use immersive mode for fullscreen to hide navigation buttons,1,[],https://github.com/liballeg/allegro5/pull/811,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/811#issuecomment-328319051,"This bumps the build dependency to SDK 19.
Closes #800","Alright, I finally got to testing this (I had a lot of trouble compiling Allegro for Android). This definitely looks super nice, but I'm not sure I like how this is unconditionally on. Do you think we could reuse, e.g. ALLEGRO_FRAMELESS flag to control this? I tried to implement something like this myself, but I'm not super familiar with how things are done on Android so I mostly just got ""ex_draw_bitmap has stopped..."".",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,811,2017-08-18T23:09:33Z,2019-08-12T00:03:24Z,2019-08-12T00:03:25Z,CLOSED,False,6,2,2,https://github.com/dos1,android: use immersive mode for fullscreen to hide navigation buttons,1,[],https://github.com/liballeg/allegro5/pull/811,https://github.com/dos1,3,https://github.com/liballeg/allegro5/pull/811#issuecomment-328339749,"This bumps the build dependency to SDK 19.
Closes #800","Sure, I can implement it. ALLEGRO_FULLSCREEN and ALLEGRO_FULLSCREEN_WINDOW are ignored on Android anyway, so maybe setting one/any of them to enable immersive mode would be fine? (with ALLEGRO_FRAMELESS I'd have to add an #ifdef to my code :D)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,811,2017-08-18T23:09:33Z,2019-08-12T00:03:24Z,2019-08-12T00:03:25Z,CLOSED,False,6,2,2,https://github.com/dos1,android: use immersive mode for fullscreen to hide navigation buttons,1,[],https://github.com/liballeg/allegro5/pull/811,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/811#issuecomment-328699092,"This bumps the build dependency to SDK 19.
Closes #800","I'd rather not use FULLSCREEN vs FULLSCREEN_WINDOW distinction, as FULLSCREEN implies being able to set resolution (ideally, it should fail on mobile). Could also add a new flag for this purpose, since FRAMELESS isn't quite right anyway.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,811,2017-08-18T23:09:33Z,2019-08-12T00:03:24Z,2019-08-12T00:03:25Z,CLOSED,False,6,2,2,https://github.com/dos1,android: use immersive mode for fullscreen to hide navigation buttons,1,[],https://github.com/liballeg/allegro5/pull/811,https://github.com/fatcerberus,5,https://github.com/liballeg/allegro5/pull/811#issuecomment-328700549,"This bumps the build dependency to SDK 19.
Closes #800","Could also add a new flag for this purpose, since FRAMELESS isn't quite right anyway.

I don't know, I feel like FRAMELESS is exactly right here; on desktop platforms ALLEGRO_FRAMELESS creates a window without any OS-provided chrome; Android ""immersive mode"" hides the navigation buttons, i.e. OS-provided chrome.  So it seems like the right tool for the job to me.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,811,2017-08-18T23:09:33Z,2019-08-12T00:03:24Z,2019-08-12T00:03:25Z,CLOSED,False,6,2,2,https://github.com/dos1,android: use immersive mode for fullscreen to hide navigation buttons,1,[],https://github.com/liballeg/allegro5/pull/811,https://github.com/SiegeLord,6,https://github.com/liballeg/allegro5/pull/811#issuecomment-328708424,"This bumps the build dependency to SDK 19.
Closes #800",That's an interesting way to think about it. I'd be happy with FRAMELESS being it then.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,811,2017-08-18T23:09:33Z,2019-08-12T00:03:24Z,2019-08-12T00:03:25Z,CLOSED,False,6,2,2,https://github.com/dos1,android: use immersive mode for fullscreen to hide navigation buttons,1,[],https://github.com/liballeg/allegro5/pull/811,https://github.com/dos1,7,https://github.com/liballeg/allegro5/pull/811#issuecomment-328712571,"This bumps the build dependency to SDK 19.
Closes #800","OK, ALLEGRO_FRAMELESS it is then, I'll try to provide a patch soon.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,811,2017-08-18T23:09:33Z,2019-08-12T00:03:24Z,2019-08-12T00:03:25Z,CLOSED,False,6,2,2,https://github.com/dos1,android: use immersive mode for fullscreen to hide navigation buttons,1,[],https://github.com/liballeg/allegro5/pull/811,https://github.com/SiegeLord,8,https://github.com/liballeg/allegro5/pull/811#issuecomment-520272082,"This bumps the build dependency to SDK 19.
Closes #800",Superseded by #1071.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,812,2017-08-18T23:34:37Z,2017-08-29T03:13:55Z,2017-08-29T03:13:55Z,CLOSED,False,3,0,1,https://github.com/dos1,raspberrypi: set default file interface when attempting to read /boot/config.txt,1,[],https://github.com/liballeg/allegro5/pull/812,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/812,"Reading #781 helped me to realize why config file handling wasn't working in my games on Android, so as a tribute, I decided to fix it :D","Reading #781 helped me to realize why config file handling wasn't working in my games on Android, so as a tribute, I decided to fix it :D",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,812,2017-08-18T23:34:37Z,2017-08-29T03:13:55Z,2017-08-29T03:13:55Z,CLOSED,False,3,0,1,https://github.com/dos1,raspberrypi: set default file interface when attempting to read /boot/config.txt,1,[],https://github.com/liballeg/allegro5/pull/812,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/812#issuecomment-325542828,"Reading #781 helped me to realize why config file handling wasn't working in my games on Android, so as a tribute, I decided to fix it :D","Finally got around to booting my RPI, works like a charm! Thanks! Merged as 258c5bb.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,813,2017-08-19T14:43:35Z,2017-08-21T04:48:46Z,2017-08-21T04:48:59Z,MERGED,True,11,2,1,https://github.com/juvinious,Ensure detach from buffers before deleting.,1,[],https://github.com/liballeg/allegro5/pull/813,https://github.com/juvinious,1,https://github.com/liballeg/allegro5/pull/813,"Need to detach from buffers before deleting otherwise openal will complain:
AL lib: (WW) FreeDevice: (0x227d7f0) Deleting 4 Buffer(s)
Sources should be deleted before buffer is deleted line 447
Test code:
#include <stdio.h>
#include <allegro5/allegro.h>
#include <allegro5/allegro_audio.h>
#include <allegro5/allegro_acodec.h>

int main(int argc, char ** argv){
    al_init();
    al_install_audio();
    al_init_acodec_addon();
    al_reserve_samples(8);
    return 0;
}","Need to detach from buffers before deleting otherwise openal will complain:
AL lib: (WW) FreeDevice: (0x227d7f0) Deleting 4 Buffer(s)
Sources should be deleted before buffer is deleted line 447
Test code:
#include <stdio.h>
#include <allegro5/allegro.h>
#include <allegro5/allegro_audio.h>
#include <allegro5/allegro_acodec.h>

int main(int argc, char ** argv){
    al_init();
    al_install_audio();
    al_init_acodec_addon();
    al_reserve_samples(8);
    return 0;
}",True,{'THUMBS_UP': ['https://github.com/kazzmir']}
liballeg/allegro5,https://github.com/liballeg/allegro5,813,2017-08-19T14:43:35Z,2017-08-21T04:48:46Z,2017-08-21T04:48:59Z,MERGED,True,11,2,1,https://github.com/juvinious,Ensure detach from buffers before deleting.,1,[],https://github.com/liballeg/allegro5/pull/813,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/813#issuecomment-323645637,"Need to detach from buffers before deleting otherwise openal will complain:
AL lib: (WW) FreeDevice: (0x227d7f0) Deleting 4 Buffer(s)
Sources should be deleted before buffer is deleted line 447
Test code:
#include <stdio.h>
#include <allegro5/allegro.h>
#include <allegro5/allegro_audio.h>
#include <allegro5/allegro_acodec.h>

int main(int argc, char ** argv){
    al_init();
    al_install_audio();
    al_init_acodec_addon();
    al_reserve_samples(8);
    return 0;
}",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,817,2017-08-28T04:49:55Z,2017-09-03T01:37:50Z,2017-09-03T01:37:50Z,MERGED,True,66,42,5,https://github.com/SiegeLord,Use unique ids to identify menu items internally.,1,[],https://github.com/liballeg/allegro5/pull/817,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/817,Fixes #816.,Fixes #816.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,817,2017-08-28T04:49:55Z,2017-09-03T01:37:50Z,2017-09-03T01:37:50Z,MERGED,True,66,42,5,https://github.com/SiegeLord,Use unique ids to identify menu items internally.,1,[],https://github.com/liballeg/allegro5/pull/817,https://github.com/oitofelix,2,https://github.com/liballeg/allegro5/pull/817#issuecomment-325341520,Fixes #816.,"Do you think this change might somehow break code relying on the previous non-unique behavior, or is it safe as a drop-in replacement?  I have a huge menu module for my game on which I've spent quite some time and I don't want to revisit it for now.
Ps: By the way, thank you for working on improving Allegro's menu interface!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,817,2017-08-28T04:49:55Z,2017-09-03T01:37:50Z,2017-09-03T01:37:50Z,MERGED,True,66,42,5,https://github.com/SiegeLord,Use unique ids to identify menu items internally.,1,[],https://github.com/liballeg/allegro5/pull/817,https://github.com/fatcerberus,3,https://github.com/liballeg/allegro5/pull/817#issuecomment-325363102,Fixes #816.,"@oitofelix I suspect most people would consider the previous behavior a bug, like you did.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,817,2017-08-28T04:49:55Z,2017-09-03T01:37:50Z,2017-09-03T01:37:50Z,MERGED,True,66,42,5,https://github.com/SiegeLord,Use unique ids to identify menu items internally.,1,[],https://github.com/liballeg/allegro5/pull/817,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/817#issuecomment-325524022,Fixes #816.,"This patch has two effects, making the al_enable_menu_event_source work for multiple menus, and also making the events' menu pointer point correctly to the menu that emitted the event. The only way I can imagine this breaking code is if people somehow depended on that menu pointer not changing. It seems unlikely enough to me. I figure most people just compare the returned ids and not realize something's funky is going on under the hood.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,817,2017-08-28T04:49:55Z,2017-09-03T01:37:50Z,2017-09-03T01:37:50Z,MERGED,True,66,42,5,https://github.com/SiegeLord,Use unique ids to identify menu items internally.,1,[],https://github.com/liballeg/allegro5/pull/817,https://github.com/SiegeLord,5,https://github.com/liballeg/allegro5/pull/817#issuecomment-326778792,Fixes #816.,"Tested it on OSX, Windows and Linux... everything seems to work fine. Merging!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,819,2017-08-31T00:48:32Z,2017-10-08T23:04:08Z,2017-10-08T23:04:08Z,MERGED,True,687,983,61,https://github.com/elias-pschernig,add a gradle based Android build,13,[],https://github.com/liballeg/allegro5/pull/819,https://github.com/elias-pschernig,1,https://github.com/liballeg/allegro5/pull/819,"This allows building Allegro with newer SDKs where ant is not available any longer.
The way to add gradle to a project is to add their so called ""gradle wrapper"" into version control, which then on the first run will download the right version of itself. It's made by Google...","This allows building Allegro with newer SDKs where ant is not available any longer.
The way to add gradle to a project is to add their so called ""gradle wrapper"" into version control, which then on the first run will download the right version of itself. It's made by Google...",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,819,2017-08-31T00:48:32Z,2017-10-08T23:04:08Z,2017-10-08T23:04:08Z,MERGED,True,687,983,61,https://github.com/elias-pschernig,add a gradle based Android build,13,[],https://github.com/liballeg/allegro5/pull/819,https://github.com/beoran,2,https://github.com/liballeg/allegro5/pull/819#issuecomment-332737792,"This allows building Allegro with newer SDKs where ant is not available any longer.
The way to add gradle to a project is to add their so called ""gradle wrapper"" into version control, which then on the first run will download the right version of itself. It's made by Google...","I see you dropped the python script that could be used to generate an android project. Does CMake do all of that now? The README_android.txt is helpful but I think that ideally all of that should be automated, one way or another, perhaps with CMake since you already need CMake to build Allegro anyway.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,819,2017-08-31T00:48:32Z,2017-10-08T23:04:08Z,2017-10-08T23:04:08Z,MERGED,True,687,983,61,https://github.com/elias-pschernig,add a gradle based Android build,13,[],https://github.com/liballeg/allegro5/pull/819,https://github.com/elias-pschernig,3,https://github.com/liballeg/allegro5/pull/819#issuecomment-332850272,"This allows building Allegro with newer SDKs where ant is not available any longer.
The way to add gradle to a project is to add their so called ""gradle wrapper"" into version control, which then on the first run will download the right version of itself. It's made by Google...","Yes, it's all done by cmake now. That Python script was used internally by the old cmake configuration to compile the examples for Android (it was never used by users and the old readme does not even mention it).
Which part of README_android.txt do you think should be more automated? Many of the steps tell you to install the SDK and NDK and setup your cross-compiler toolchain and compile dependencies. That is not easy things to do. But also not something cmake can do for you. Compiling allegro itself is just ""mkdir build; cd build; cmake; make; make install"" like on most other platforms.
The section about using Allegro in Android Studio is completely optional, you can just copy any of the examples or demos as a template and replace with your own game's source code. Maybe I should make a more prominent note about that?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,819,2017-08-31T00:48:32Z,2017-10-08T23:04:08Z,2017-10-08T23:04:08Z,MERGED,True,687,983,61,https://github.com/elias-pschernig,add a gradle based Android build,13,[],https://github.com/liballeg/allegro5/pull/819,https://github.com/elias-pschernig,4,https://github.com/liballeg/allegro5/pull/819#issuecomment-332867102,"This allows building Allegro with newer SDKs where ant is not available any longer.
The way to add gradle to a project is to add their so called ""gradle wrapper"" into version control, which then on the first run will download the right version of itself. It's made by Google...","I just swapped the last two sections, so now right after running ""make"" to compile Allegro you will be at the section telling you that you can just copy the template. And then if you like pain you can skip ahead and try and set up a new project from scratch instead :)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,819,2017-08-31T00:48:32Z,2017-10-08T23:04:08Z,2017-10-08T23:04:08Z,MERGED,True,687,983,61,https://github.com/elias-pschernig,add a gradle based Android build,13,[],https://github.com/liballeg/allegro5/pull/819,https://github.com/SiegeLord,5,https://github.com/liballeg/allegro5/pull/819#issuecomment-333352205,"This allows building Allegro with newer SDKs where ant is not available any longer.
The way to add gradle to a project is to add their so called ""gradle wrapper"" into version control, which then on the first run will download the right version of itself. It's made by Google...","I tried this, and it was definitely easier to get it running. Unfortunately, all the examples I tried crashed for me. I did make run_ex_prim. Here's a potentially relevant bit of logs:
09-30 21:05:21.676 28989 28989 E AndroidRuntime: FATAL EXCEPTION: main
09-30 21:05:21.676 28989 28989 E AndroidRuntime: Process: org.liballeg.app, PID: 28989
09-30 21:05:21.676 28989 28989 E AndroidRuntime: java.lang.UnsatisfiedLinkError: dalvik.system.PathClassLoader[DexPathList[[zip file ""/data/app/org.liballeg.app-2/base.apk""],nativeLibraryDirectories=[/data/app/org.liballeg.app-2/lib/arm, /data/app/org.liballeg.app-2/base.apk!/lib/armeabi, /vendor/lib, /system/lib]]] couldn't find ""liballegro_ttf-debug.so""
09-30 21:05:21.676 28989 28989 E AndroidRuntime: 	at java.lang.Runtime.loadLibrary(Runtime.java:367)
09-30 21:05:21.676 28989 28989 E AndroidRuntime: 	at java.lang.System.loadLibrary(System.java:1076)
09-30 21:05:21.676 28989 28989 E AndroidRuntime: 	at org.liballeg.app.MainActivity.<clinit>(MainActivity.java:9)
09-30 21:05:21.676 28989 28989 E AndroidRuntime: 	at java.lang.Class.newInstance(Native Method)
09-30 21:05:21.676 28989 28989 E AndroidRuntime: 	at android.app.Instrumentation.newActivity(Instrumentation.java:1090)
09-30 21:05:21.676 28989 28989 E AndroidRuntime: 	at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2327)
09-30 21:05:21.676 28989 28989 E AndroidRuntime: 	at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2490)
09-30 21:05:21.676 28989 28989 E AndroidRuntime: 	at android.app.ActivityThread.-wrap11(ActivityThread.java)
09-30 21:05:21.676 28989 28989 E AndroidRuntime: 	at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1354)
09-30 21:05:21.676 28989 28989 E AndroidRuntime: 	at android.os.Handler.dispatchMessage(Handler.java:102)
09-30 21:05:21.676 28989 28989 E AndroidRuntime: 	at android.os.Looper.loop(Looper.java:148)
09-30 21:05:21.676 28989 28989 E AndroidRuntime: 	at android.app.ActivityThread.main(ActivityThread.java:5443)
09-30 21:05:21.676 28989 28989 E AndroidRuntime: 	at java.lang.reflect.Method.invoke(Native Method)
09-30 21:05:21.676 28989 28989 E AndroidRuntime: 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:728)
09-30 21:05:21.676 28989 28989 E AndroidRuntime: 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:618)
09-30 21:05:21.693 21925 23205 W ActivityManager:   Force finishing activity org.liballeg.app/.MainActivity

Seems like it's looking for the ttf addon, but ex_prim doesn't depend on that (I don't have it, as I didn't bother with the freetype dependency yet).",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,819,2017-08-31T00:48:32Z,2017-10-08T23:04:08Z,2017-10-08T23:04:08Z,MERGED,True,687,983,61,https://github.com/elias-pschernig,add a gradle based Android build,13,[],https://github.com/liballeg/allegro5/pull/819,https://github.com/elias-pschernig,6,https://github.com/liballeg/allegro5/pull/819#issuecomment-333374885,"This allows building Allegro with newer SDKs where ant is not available any longer.
The way to add gradle to a project is to add their so called ""gradle wrapper"" into version control, which then on the first run will download the right version of itself. It's made by Google...","Oh, indeed - splitting the set of libraries according to what the example needs would be nice. Unfortunately requires a lot of cmake trickery, but I'll try and add it back.
This also makes me realize I have yet to add back that special Android example (but I'll convert it to a normal example).",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,819,2017-08-31T00:48:32Z,2017-10-08T23:04:08Z,2017-10-08T23:04:08Z,MERGED,True,687,983,61,https://github.com/elias-pschernig,add a gradle based Android build,13,[],https://github.com/liballeg/allegro5/pull/819,https://github.com/elias-pschernig,7,https://github.com/liballeg/allegro5/pull/819#issuecomment-333392105,"This allows building Allegro with newer SDKs where ant is not available any longer.
The way to add gradle to a project is to add their so called ""gradle wrapper"" into version control, which then on the first run will download the right version of itself. It's made by Google...","I fixed the missing liballegro_ttf.so in a different way (I believe). I still make the above call in all examples to load the .so file, but just ignore when it is missing - that was much simpler than trying to have cmake output a different .java file.
Also, since we now build with gradle the location of assets changed, so had to fix the path where to place the data/ folder as well. After that ex_prim and the skater demo both work. (Well, to the extent they can, given they do not handle things like screen orientation or touch input or backgrounding.)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,820,2017-09-03T01:34:55Z,2017-09-10T04:29:12Z,2017-09-10T04:29:12Z,MERGED,True,8,0,1,https://github.com/SiegeLord,Add a CMake option to prefer static dependencies,1,[],https://github.com/liballeg/allegro5/pull/820,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/820,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,823,2017-09-13T05:19:34Z,2017-09-29T02:00:37Z,2017-09-29T05:46:03Z,MERGED,True,226,60,5,https://github.com/SimonN,DUMB 2.0 and 0.9.3 support,2,[],https://github.com/liballeg/allegro5/pull/823,https://github.com/SimonN,1,https://github.com/liballeg/allegro5/pull/823,"Specifying -lm on Arch Linux is necessary for DUMB support: Otherwise, cmake concludes that DUMB is not available. I used the DUMB 1.0-1 binary package from the Arch repo. This Arch package points to kode54's fork of DUMB with version 1.0 as suggested by the DUMB homepage, not to version 0.9.3 that A5 officially supports.
I didn't test whether this is required on other systems, or whether it breaks the build on other systems.
Still no successful playback: I've merely fixed A5's build for me. I can load a module with Allegro 5, but then my application will immediately crash within DUMB. Crashlog follows. I haven't debugged this crash yet! The fault could be in DUMB, in the DUMB Arch package, in A5, in my code, in a faulty module, ...
I'll understand if you won't merge this PR before we have seen successful playback with DUMB 1.0 and A5. According to @SiegeLord, DUMB 1.0 made breaking changes. Still, I'm opening this PR to share my findings, allowing others to shed more light on this.
#0  0x0000000000000000 in ?? ()
#1  0x00007ffff3dd1962 in ?? () from /usr/lib/libdumb.so
#2  0x00007ffff3dd2d15 in dumb_read_it_quick () from /usr/lib/libdumb.so
#3  0x00007ffff3dd0996 in dumb_read_it () from /usr/lib/libdumb.so
#4  0x00007ffff78d5d74 in mod_stream_init (f=0x555556284600, buffer_count=3,
    samples=2048, loader=0x7ffff3dd0990 <dumb_read_it>)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:213
#5  0x00007ffff78d625c in _al_load_it_audio_stream (filename=<optimized out>,
    buffer_count=3, samples=2048)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:391

For reference, here's an excerpt from cmake's error log when DUMB's libraries don't specify -lm:
Run Build Command:""/usr/bin/make"" ""cmTC_5d751/fast""
/usr/bin/make -f CMakeFiles/cmTC_5d751.dir/build.make CMakeFiles/cmTC_5d751.dir/build
make[1]: Entering directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_5d751.dir/src.c.o
/usr/bin/cc   -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES   -o CMakeFiles/cmTC_5d751.dir/src.c.o   -c /home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTC_5d751
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_5d751.dir/link.txt --verbose=1
/usr/bin/cc  -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES    -rdynamic CMakeFiles/cmTC_5d751.dir/src.c.o  -o cmTC_5d751 /usr/lib/libdumb.so 
/usr/lib/libdumb.so: undefined reference to `__pow_finite'
/usr/lib/libdumb.so: undefined reference to `__log_finite'
/usr/lib/libdumb.so: undefined reference to `__exp_finite'
/usr/lib/libdumb.so: undefined reference to `sin'
/usr/lib/libdumb.so: undefined reference to `__log2_finite'
/usr/lib/libdumb.so: undefined reference to `cos'
collect2: error: ld returned 1 exit status
make[1]: *** [CMakeFiles/cmTC_5d751.dir/build.make:99: cmTC_5d751] Error 1
make[1]: Leaving directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
make: *** [Makefile:126: cmTC_5d751/fast] Error 2

Source file was:

            #include <dumb.h>
            int main(void)
            {
                dumb_register_stdfiles();
                return 0;
            }","Specifying -lm on Arch Linux is necessary for DUMB support: Otherwise, cmake concludes that DUMB is not available. I used the DUMB 1.0-1 binary package from the Arch repo. This Arch package points to kode54's fork of DUMB with version 1.0 as suggested by the DUMB homepage, not to version 0.9.3 that A5 officially supports.
I didn't test whether this is required on other systems, or whether it breaks the build on other systems.
Still no successful playback: I've merely fixed A5's build for me. I can load a module with Allegro 5, but then my application will immediately crash within DUMB. Crashlog follows. I haven't debugged this crash yet! The fault could be in DUMB, in the DUMB Arch package, in A5, in my code, in a faulty module, ...
I'll understand if you won't merge this PR before we have seen successful playback with DUMB 1.0 and A5. According to @SiegeLord, DUMB 1.0 made breaking changes. Still, I'm opening this PR to share my findings, allowing others to shed more light on this.
#0  0x0000000000000000 in ?? ()
#1  0x00007ffff3dd1962 in ?? () from /usr/lib/libdumb.so
#2  0x00007ffff3dd2d15 in dumb_read_it_quick () from /usr/lib/libdumb.so
#3  0x00007ffff3dd0996 in dumb_read_it () from /usr/lib/libdumb.so
#4  0x00007ffff78d5d74 in mod_stream_init (f=0x555556284600, buffer_count=3,
    samples=2048, loader=0x7ffff3dd0990 <dumb_read_it>)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:213
#5  0x00007ffff78d625c in _al_load_it_audio_stream (filename=<optimized out>,
    buffer_count=3, samples=2048)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:391

For reference, here's an excerpt from cmake's error log when DUMB's libraries don't specify -lm:
Run Build Command:""/usr/bin/make"" ""cmTC_5d751/fast""
/usr/bin/make -f CMakeFiles/cmTC_5d751.dir/build.make CMakeFiles/cmTC_5d751.dir/build
make[1]: Entering directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_5d751.dir/src.c.o
/usr/bin/cc   -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES   -o CMakeFiles/cmTC_5d751.dir/src.c.o   -c /home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTC_5d751
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_5d751.dir/link.txt --verbose=1
/usr/bin/cc  -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES    -rdynamic CMakeFiles/cmTC_5d751.dir/src.c.o  -o cmTC_5d751 /usr/lib/libdumb.so 
/usr/lib/libdumb.so: undefined reference to `__pow_finite'
/usr/lib/libdumb.so: undefined reference to `__log_finite'
/usr/lib/libdumb.so: undefined reference to `__exp_finite'
/usr/lib/libdumb.so: undefined reference to `sin'
/usr/lib/libdumb.so: undefined reference to `__log2_finite'
/usr/lib/libdumb.so: undefined reference to `cos'
collect2: error: ld returned 1 exit status
make[1]: *** [CMakeFiles/cmTC_5d751.dir/build.make:99: cmTC_5d751] Error 1
make[1]: Leaving directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
make: *** [Makefile:126: cmTC_5d751/fast] Error 2

Source file was:

            #include <dumb.h>
            int main(void)
            {
                dumb_register_stdfiles();
                return 0;
            }",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,823,2017-09-13T05:19:34Z,2017-09-29T02:00:37Z,2017-09-29T05:46:03Z,MERGED,True,226,60,5,https://github.com/SimonN,DUMB 2.0 and 0.9.3 support,2,[],https://github.com/liballeg/allegro5/pull/823,https://github.com/SimonN,2,https://github.com/liballeg/allegro5/pull/823#issuecomment-329956679,"Specifying -lm on Arch Linux is necessary for DUMB support: Otherwise, cmake concludes that DUMB is not available. I used the DUMB 1.0-1 binary package from the Arch repo. This Arch package points to kode54's fork of DUMB with version 1.0 as suggested by the DUMB homepage, not to version 0.9.3 that A5 officially supports.
I didn't test whether this is required on other systems, or whether it breaks the build on other systems.
Still no successful playback: I've merely fixed A5's build for me. I can load a module with Allegro 5, but then my application will immediately crash within DUMB. Crashlog follows. I haven't debugged this crash yet! The fault could be in DUMB, in the DUMB Arch package, in A5, in my code, in a faulty module, ...
I'll understand if you won't merge this PR before we have seen successful playback with DUMB 1.0 and A5. According to @SiegeLord, DUMB 1.0 made breaking changes. Still, I'm opening this PR to share my findings, allowing others to shed more light on this.
#0  0x0000000000000000 in ?? ()
#1  0x00007ffff3dd1962 in ?? () from /usr/lib/libdumb.so
#2  0x00007ffff3dd2d15 in dumb_read_it_quick () from /usr/lib/libdumb.so
#3  0x00007ffff3dd0996 in dumb_read_it () from /usr/lib/libdumb.so
#4  0x00007ffff78d5d74 in mod_stream_init (f=0x555556284600, buffer_count=3,
    samples=2048, loader=0x7ffff3dd0990 <dumb_read_it>)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:213
#5  0x00007ffff78d625c in _al_load_it_audio_stream (filename=<optimized out>,
    buffer_count=3, samples=2048)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:391

For reference, here's an excerpt from cmake's error log when DUMB's libraries don't specify -lm:
Run Build Command:""/usr/bin/make"" ""cmTC_5d751/fast""
/usr/bin/make -f CMakeFiles/cmTC_5d751.dir/build.make CMakeFiles/cmTC_5d751.dir/build
make[1]: Entering directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_5d751.dir/src.c.o
/usr/bin/cc   -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES   -o CMakeFiles/cmTC_5d751.dir/src.c.o   -c /home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTC_5d751
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_5d751.dir/link.txt --verbose=1
/usr/bin/cc  -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES    -rdynamic CMakeFiles/cmTC_5d751.dir/src.c.o  -o cmTC_5d751 /usr/lib/libdumb.so 
/usr/lib/libdumb.so: undefined reference to `__pow_finite'
/usr/lib/libdumb.so: undefined reference to `__log_finite'
/usr/lib/libdumb.so: undefined reference to `__exp_finite'
/usr/lib/libdumb.so: undefined reference to `sin'
/usr/lib/libdumb.so: undefined reference to `__log2_finite'
/usr/lib/libdumb.so: undefined reference to `cos'
collect2: error: ld returned 1 exit status
make[1]: *** [CMakeFiles/cmTC_5d751.dir/build.make:99: cmTC_5d751] Error 1
make[1]: Leaving directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
make: *** [Makefile:126: cmTC_5d751/fast] Error 2

Source file was:

            #include <dumb.h>
            int main(void)
            {
                dumb_register_stdfiles();
                return 0;
            }","More light on the crash inside DUMB 1.0 A5 runtime! I've built DUMB 1.0 with debugging flags, let A5 use that debugging build, and get a much more informative stacktrace, along with:
 /home/simon/c/notown/dumb/src/core/dumbfile.c:36:
register_dumbfile_system: Assertion `dfs->seek' failed.

All XM files work. All IT, MOD, and S3M files crash.
Explanation: siege.c is SiegeLord's example A5 program from issue #670 that loads a music file given on the command line, then immediately plays it.
#0  0x00007ffff73318a0 in raise () from /usr/lib/libc.so.6
#1  0x00007ffff7332f09 in abort () from /usr/lib/libc.so.6
#2  0x00007ffff732a0dc in __assert_fail_base () from /usr/lib/libc.so.6
#3  0x00007ffff732a153 in __assert_fail () from /usr/lib/libc.so.6
#4  0x00007ffff43afc93 in register_dumbfile_system (dfs=0x7ffff78be2c0 <dfs>)
    at /home/simon/c/notown/dumb/src/core/dumbfile.c:36
#5  0x00007ffff76ba0b7 in init_libdumb ()
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:346
#6  0x00007ffff76ba14f in init_libdumb ()
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:451
#7  _al_load_mod_audio_stream_f (f=f@entry=0x5555557c51e0, 
    buffer_count=buffer_count@entry=4, samples=samples@entry=2048)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:452
#8  0x00007ffff76ba19c in _al_load_mod_audio_stream (filename=<optimized out>, 
    buffer_count=4, samples=2048)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:368
#9  0x0000555555554acb in main (argc=2, argv=0x7fffffffe798) at siege.c:15

I suppose:

The interface, or at least the calling conventions, between DUMB 0.9.3 and DUMB 1.0 differ.
A5 calls the 1.0 interface in such a way that the DUMB assert fails.
Either A5 or DUMB has an issue, provided A5 would like to offer support for DUMB 1.0.

Now it's time to dig deep into A5 source and the DUMB API...",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,823,2017-09-13T05:19:34Z,2017-09-29T02:00:37Z,2017-09-29T05:46:03Z,MERGED,True,226,60,5,https://github.com/SimonN,DUMB 2.0 and 0.9.3 support,2,[],https://github.com/liballeg/allegro5/pull/823,https://github.com/SimonN,3,https://github.com/liballeg/allegro5/pull/823#issuecomment-330005088,"Specifying -lm on Arch Linux is necessary for DUMB support: Otherwise, cmake concludes that DUMB is not available. I used the DUMB 1.0-1 binary package from the Arch repo. This Arch package points to kode54's fork of DUMB with version 1.0 as suggested by the DUMB homepage, not to version 0.9.3 that A5 officially supports.
I didn't test whether this is required on other systems, or whether it breaks the build on other systems.
Still no successful playback: I've merely fixed A5's build for me. I can load a module with Allegro 5, but then my application will immediately crash within DUMB. Crashlog follows. I haven't debugged this crash yet! The fault could be in DUMB, in the DUMB Arch package, in A5, in my code, in a faulty module, ...
I'll understand if you won't merge this PR before we have seen successful playback with DUMB 1.0 and A5. According to @SiegeLord, DUMB 1.0 made breaking changes. Still, I'm opening this PR to share my findings, allowing others to shed more light on this.
#0  0x0000000000000000 in ?? ()
#1  0x00007ffff3dd1962 in ?? () from /usr/lib/libdumb.so
#2  0x00007ffff3dd2d15 in dumb_read_it_quick () from /usr/lib/libdumb.so
#3  0x00007ffff3dd0996 in dumb_read_it () from /usr/lib/libdumb.so
#4  0x00007ffff78d5d74 in mod_stream_init (f=0x555556284600, buffer_count=3,
    samples=2048, loader=0x7ffff3dd0990 <dumb_read_it>)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:213
#5  0x00007ffff78d625c in _al_load_it_audio_stream (filename=<optimized out>,
    buffer_count=3, samples=2048)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:391

For reference, here's an excerpt from cmake's error log when DUMB's libraries don't specify -lm:
Run Build Command:""/usr/bin/make"" ""cmTC_5d751/fast""
/usr/bin/make -f CMakeFiles/cmTC_5d751.dir/build.make CMakeFiles/cmTC_5d751.dir/build
make[1]: Entering directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_5d751.dir/src.c.o
/usr/bin/cc   -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES   -o CMakeFiles/cmTC_5d751.dir/src.c.o   -c /home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTC_5d751
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_5d751.dir/link.txt --verbose=1
/usr/bin/cc  -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES    -rdynamic CMakeFiles/cmTC_5d751.dir/src.c.o  -o cmTC_5d751 /usr/lib/libdumb.so 
/usr/lib/libdumb.so: undefined reference to `__pow_finite'
/usr/lib/libdumb.so: undefined reference to `__log_finite'
/usr/lib/libdumb.so: undefined reference to `__exp_finite'
/usr/lib/libdumb.so: undefined reference to `sin'
/usr/lib/libdumb.so: undefined reference to `__log2_finite'
/usr/lib/libdumb.so: undefined reference to `cos'
collect2: error: ld returned 1 exit status
make[1]: *** [CMakeFiles/cmTC_5d751.dir/build.make:99: cmTC_5d751] Error 1
make[1]: Leaving directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
make: *** [Makefile:126: cmTC_5d751/fast] Error 2

Source file was:

            #include <dumb.h>
            int main(void)
            {
                dumb_register_stdfiles();
                return 0;
            }","I've fixed the API mismatches to the best of my knowledge. I've submitted new documentation about DUMBFILE_SYSTEM to DUMB, this got merged today.
Ive changed A5's modaudio.c to call DUMB 1.0, but I'm not yet submitting my modaudio.c to this A5 pull request: A5 returns null streams even on XM files that it played with DUMB 1.0 before I started hacking. I want to more work on this first. (If you want to see my changes, they're in my public github fork of allegro5, but I rebase public branches heavily until I finally make PRs from them.)
I'll continue to investigate. For any questions, I'll sit in irc.freenode.net #allegro or irc.quakenet.org #lix, or reply here.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,823,2017-09-13T05:19:34Z,2017-09-29T02:00:37Z,2017-09-29T05:46:03Z,MERGED,True,226,60,5,https://github.com/SimonN,DUMB 2.0 and 0.9.3 support,2,[],https://github.com/liballeg/allegro5/pull/823,https://github.com/SimonN,4,https://github.com/liballeg/allegro5/pull/823#issuecomment-330029659,"Specifying -lm on Arch Linux is necessary for DUMB support: Otherwise, cmake concludes that DUMB is not available. I used the DUMB 1.0-1 binary package from the Arch repo. This Arch package points to kode54's fork of DUMB with version 1.0 as suggested by the DUMB homepage, not to version 0.9.3 that A5 officially supports.
I didn't test whether this is required on other systems, or whether it breaks the build on other systems.
Still no successful playback: I've merely fixed A5's build for me. I can load a module with Allegro 5, but then my application will immediately crash within DUMB. Crashlog follows. I haven't debugged this crash yet! The fault could be in DUMB, in the DUMB Arch package, in A5, in my code, in a faulty module, ...
I'll understand if you won't merge this PR before we have seen successful playback with DUMB 1.0 and A5. According to @SiegeLord, DUMB 1.0 made breaking changes. Still, I'm opening this PR to share my findings, allowing others to shed more light on this.
#0  0x0000000000000000 in ?? ()
#1  0x00007ffff3dd1962 in ?? () from /usr/lib/libdumb.so
#2  0x00007ffff3dd2d15 in dumb_read_it_quick () from /usr/lib/libdumb.so
#3  0x00007ffff3dd0996 in dumb_read_it () from /usr/lib/libdumb.so
#4  0x00007ffff78d5d74 in mod_stream_init (f=0x555556284600, buffer_count=3,
    samples=2048, loader=0x7ffff3dd0990 <dumb_read_it>)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:213
#5  0x00007ffff78d625c in _al_load_it_audio_stream (filename=<optimized out>,
    buffer_count=3, samples=2048)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:391

For reference, here's an excerpt from cmake's error log when DUMB's libraries don't specify -lm:
Run Build Command:""/usr/bin/make"" ""cmTC_5d751/fast""
/usr/bin/make -f CMakeFiles/cmTC_5d751.dir/build.make CMakeFiles/cmTC_5d751.dir/build
make[1]: Entering directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_5d751.dir/src.c.o
/usr/bin/cc   -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES   -o CMakeFiles/cmTC_5d751.dir/src.c.o   -c /home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTC_5d751
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_5d751.dir/link.txt --verbose=1
/usr/bin/cc  -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES    -rdynamic CMakeFiles/cmTC_5d751.dir/src.c.o  -o cmTC_5d751 /usr/lib/libdumb.so 
/usr/lib/libdumb.so: undefined reference to `__pow_finite'
/usr/lib/libdumb.so: undefined reference to `__log_finite'
/usr/lib/libdumb.so: undefined reference to `__exp_finite'
/usr/lib/libdumb.so: undefined reference to `sin'
/usr/lib/libdumb.so: undefined reference to `__log2_finite'
/usr/lib/libdumb.so: undefined reference to `cos'
collect2: error: ld returned 1 exit status
make[1]: *** [CMakeFiles/cmTC_5d751.dir/build.make:99: cmTC_5d751] Error 1
make[1]: Leaving directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
make: *** [Makefile:126: cmTC_5d751/fast] Error 2

Source file was:

            #include <dumb.h>
            int main(void)
            {
                dumb_register_stdfiles();
                return 0;
            }","I've got it working! XM, IT, MOD, S3M all play well with the DUMB git HEAD.
DUMB supports even more tracked formats in 1.0, but Allegro doesn't register loaders for them yet. We can look into that soon.
My code relies on dumb.h reporting the correct version. Since the DUMB commit tagged 1.0 reports 0.9.3 internally, I've proposed upstream to release another tagged 1.y.z > 1.0.0: kode54/dumb#48",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,823,2017-09-13T05:19:34Z,2017-09-29T02:00:37Z,2017-09-29T05:46:03Z,MERGED,True,226,60,5,https://github.com/SimonN,DUMB 2.0 and 0.9.3 support,2,[],https://github.com/liballeg/allegro5/pull/823,https://github.com/beoran,5,https://github.com/liballeg/allegro5/pull/823#issuecomment-330029989,"Specifying -lm on Arch Linux is necessary for DUMB support: Otherwise, cmake concludes that DUMB is not available. I used the DUMB 1.0-1 binary package from the Arch repo. This Arch package points to kode54's fork of DUMB with version 1.0 as suggested by the DUMB homepage, not to version 0.9.3 that A5 officially supports.
I didn't test whether this is required on other systems, or whether it breaks the build on other systems.
Still no successful playback: I've merely fixed A5's build for me. I can load a module with Allegro 5, but then my application will immediately crash within DUMB. Crashlog follows. I haven't debugged this crash yet! The fault could be in DUMB, in the DUMB Arch package, in A5, in my code, in a faulty module, ...
I'll understand if you won't merge this PR before we have seen successful playback with DUMB 1.0 and A5. According to @SiegeLord, DUMB 1.0 made breaking changes. Still, I'm opening this PR to share my findings, allowing others to shed more light on this.
#0  0x0000000000000000 in ?? ()
#1  0x00007ffff3dd1962 in ?? () from /usr/lib/libdumb.so
#2  0x00007ffff3dd2d15 in dumb_read_it_quick () from /usr/lib/libdumb.so
#3  0x00007ffff3dd0996 in dumb_read_it () from /usr/lib/libdumb.so
#4  0x00007ffff78d5d74 in mod_stream_init (f=0x555556284600, buffer_count=3,
    samples=2048, loader=0x7ffff3dd0990 <dumb_read_it>)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:213
#5  0x00007ffff78d625c in _al_load_it_audio_stream (filename=<optimized out>,
    buffer_count=3, samples=2048)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:391

For reference, here's an excerpt from cmake's error log when DUMB's libraries don't specify -lm:
Run Build Command:""/usr/bin/make"" ""cmTC_5d751/fast""
/usr/bin/make -f CMakeFiles/cmTC_5d751.dir/build.make CMakeFiles/cmTC_5d751.dir/build
make[1]: Entering directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_5d751.dir/src.c.o
/usr/bin/cc   -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES   -o CMakeFiles/cmTC_5d751.dir/src.c.o   -c /home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTC_5d751
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_5d751.dir/link.txt --verbose=1
/usr/bin/cc  -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES    -rdynamic CMakeFiles/cmTC_5d751.dir/src.c.o  -o cmTC_5d751 /usr/lib/libdumb.so 
/usr/lib/libdumb.so: undefined reference to `__pow_finite'
/usr/lib/libdumb.so: undefined reference to `__log_finite'
/usr/lib/libdumb.so: undefined reference to `__exp_finite'
/usr/lib/libdumb.so: undefined reference to `sin'
/usr/lib/libdumb.so: undefined reference to `__log2_finite'
/usr/lib/libdumb.so: undefined reference to `cos'
collect2: error: ld returned 1 exit status
make[1]: *** [CMakeFiles/cmTC_5d751.dir/build.make:99: cmTC_5d751] Error 1
make[1]: Leaving directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
make: *** [Makefile:126: cmTC_5d751/fast] Error 2

Source file was:

            #include <dumb.h>
            int main(void)
            {
                dumb_register_stdfiles();
                return 0;
            }","As an aside, I am glad this is coming together! Thank you very much, Simon,
for your relentless efforts.
…
On 17 Sep 2017 10:37, ""Simon Na."" ***@***.***> wrote:
 I've got it working! XM, IT, MOD, S3M all play well with the DUMB git HEAD.

 DUMB supports even more tracked formats in 1.0, but Allegro doesn't
 register loaders for them yet. We can look into that soon.

 My code relies on dumb.h reporting the correct version. Since the DUMB
 commit tagged 1.0 reports 0.9.3 internally, I've proposed upstream to
 release another tagged 1.y.z > 1.0.0: kode54/dumb#48
 <kode54/dumb#48>

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#823 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/AAEWeazhmdM_FSV3mxlghReLJjLLvUNmks5sjNpMgaJpZM4PVl9N>
 .",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,823,2017-09-13T05:19:34Z,2017-09-29T02:00:37Z,2017-09-29T05:46:03Z,MERGED,True,226,60,5,https://github.com/SimonN,DUMB 2.0 and 0.9.3 support,2,[],https://github.com/liballeg/allegro5/pull/823,https://github.com/SimonN,6,https://github.com/liballeg/allegro5/pull/823#issuecomment-330030159,"Specifying -lm on Arch Linux is necessary for DUMB support: Otherwise, cmake concludes that DUMB is not available. I used the DUMB 1.0-1 binary package from the Arch repo. This Arch package points to kode54's fork of DUMB with version 1.0 as suggested by the DUMB homepage, not to version 0.9.3 that A5 officially supports.
I didn't test whether this is required on other systems, or whether it breaks the build on other systems.
Still no successful playback: I've merely fixed A5's build for me. I can load a module with Allegro 5, but then my application will immediately crash within DUMB. Crashlog follows. I haven't debugged this crash yet! The fault could be in DUMB, in the DUMB Arch package, in A5, in my code, in a faulty module, ...
I'll understand if you won't merge this PR before we have seen successful playback with DUMB 1.0 and A5. According to @SiegeLord, DUMB 1.0 made breaking changes. Still, I'm opening this PR to share my findings, allowing others to shed more light on this.
#0  0x0000000000000000 in ?? ()
#1  0x00007ffff3dd1962 in ?? () from /usr/lib/libdumb.so
#2  0x00007ffff3dd2d15 in dumb_read_it_quick () from /usr/lib/libdumb.so
#3  0x00007ffff3dd0996 in dumb_read_it () from /usr/lib/libdumb.so
#4  0x00007ffff78d5d74 in mod_stream_init (f=0x555556284600, buffer_count=3,
    samples=2048, loader=0x7ffff3dd0990 <dumb_read_it>)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:213
#5  0x00007ffff78d625c in _al_load_it_audio_stream (filename=<optimized out>,
    buffer_count=3, samples=2048)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:391

For reference, here's an excerpt from cmake's error log when DUMB's libraries don't specify -lm:
Run Build Command:""/usr/bin/make"" ""cmTC_5d751/fast""
/usr/bin/make -f CMakeFiles/cmTC_5d751.dir/build.make CMakeFiles/cmTC_5d751.dir/build
make[1]: Entering directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_5d751.dir/src.c.o
/usr/bin/cc   -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES   -o CMakeFiles/cmTC_5d751.dir/src.c.o   -c /home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTC_5d751
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_5d751.dir/link.txt --verbose=1
/usr/bin/cc  -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES    -rdynamic CMakeFiles/cmTC_5d751.dir/src.c.o  -o cmTC_5d751 /usr/lib/libdumb.so 
/usr/lib/libdumb.so: undefined reference to `__pow_finite'
/usr/lib/libdumb.so: undefined reference to `__log_finite'
/usr/lib/libdumb.so: undefined reference to `__exp_finite'
/usr/lib/libdumb.so: undefined reference to `sin'
/usr/lib/libdumb.so: undefined reference to `__log2_finite'
/usr/lib/libdumb.so: undefined reference to `cos'
collect2: error: ld returned 1 exit status
make[1]: *** [CMakeFiles/cmTC_5d751.dir/build.make:99: cmTC_5d751] Error 1
make[1]: Leaving directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
make: *** [Makefile:126: cmTC_5d751/fast] Error 2

Source file was:

            #include <dumb.h>
            int main(void)
            {
                dumb_register_stdfiles();
                return 0;
            }","You're welcome!
Feels so good when research and work pay off. I haven't contributed to either library before and dug through internals in both.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,823,2017-09-13T05:19:34Z,2017-09-29T02:00:37Z,2017-09-29T05:46:03Z,MERGED,True,226,60,5,https://github.com/SimonN,DUMB 2.0 and 0.9.3 support,2,[],https://github.com/liballeg/allegro5/pull/823,https://github.com/SimonN,7,https://github.com/liballeg/allegro5/pull/823#issuecomment-330396306,"Specifying -lm on Arch Linux is necessary for DUMB support: Otherwise, cmake concludes that DUMB is not available. I used the DUMB 1.0-1 binary package from the Arch repo. This Arch package points to kode54's fork of DUMB with version 1.0 as suggested by the DUMB homepage, not to version 0.9.3 that A5 officially supports.
I didn't test whether this is required on other systems, or whether it breaks the build on other systems.
Still no successful playback: I've merely fixed A5's build for me. I can load a module with Allegro 5, but then my application will immediately crash within DUMB. Crashlog follows. I haven't debugged this crash yet! The fault could be in DUMB, in the DUMB Arch package, in A5, in my code, in a faulty module, ...
I'll understand if you won't merge this PR before we have seen successful playback with DUMB 1.0 and A5. According to @SiegeLord, DUMB 1.0 made breaking changes. Still, I'm opening this PR to share my findings, allowing others to shed more light on this.
#0  0x0000000000000000 in ?? ()
#1  0x00007ffff3dd1962 in ?? () from /usr/lib/libdumb.so
#2  0x00007ffff3dd2d15 in dumb_read_it_quick () from /usr/lib/libdumb.so
#3  0x00007ffff3dd0996 in dumb_read_it () from /usr/lib/libdumb.so
#4  0x00007ffff78d5d74 in mod_stream_init (f=0x555556284600, buffer_count=3,
    samples=2048, loader=0x7ffff3dd0990 <dumb_read_it>)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:213
#5  0x00007ffff78d625c in _al_load_it_audio_stream (filename=<optimized out>,
    buffer_count=3, samples=2048)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:391

For reference, here's an excerpt from cmake's error log when DUMB's libraries don't specify -lm:
Run Build Command:""/usr/bin/make"" ""cmTC_5d751/fast""
/usr/bin/make -f CMakeFiles/cmTC_5d751.dir/build.make CMakeFiles/cmTC_5d751.dir/build
make[1]: Entering directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_5d751.dir/src.c.o
/usr/bin/cc   -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES   -o CMakeFiles/cmTC_5d751.dir/src.c.o   -c /home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTC_5d751
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_5d751.dir/link.txt --verbose=1
/usr/bin/cc  -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES    -rdynamic CMakeFiles/cmTC_5d751.dir/src.c.o  -o cmTC_5d751 /usr/lib/libdumb.so 
/usr/lib/libdumb.so: undefined reference to `__pow_finite'
/usr/lib/libdumb.so: undefined reference to `__log_finite'
/usr/lib/libdumb.so: undefined reference to `__exp_finite'
/usr/lib/libdumb.so: undefined reference to `sin'
/usr/lib/libdumb.so: undefined reference to `__log2_finite'
/usr/lib/libdumb.so: undefined reference to `cos'
collect2: error: ld returned 1 exit status
make[1]: *** [CMakeFiles/cmTC_5d751.dir/build.make:99: cmTC_5d751] Error 1
make[1]: Leaving directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
make: *** [Makefile:126: cmTC_5d751/fast] Error 2

Source file was:

            #include <dumb.h>
            int main(void)
            {
                dumb_register_stdfiles();
                return 0;
            }","News from DUMB upstream: We're working on stabilizing the API for DUMB 2.0. kode54, the maintainer, hasn't planned any breaking changes, only bugfixes. The DUMB header needs small clean-up in the public API, and I'm helping upstream getting all the ducks in a row.
This means A5 should wait until DUMB 2.0 before merging this PR. I estimate we'll have DUMB 2.0 in 2 weeks. Then, I'll push another commit to this PR's target branch to make A5 check for DUMB 2.0 instead of 1.0.
DUMB 2.0 has a catch-all loader to guess file format from an open file. Looks like I can simplify the A5 code and allow all the 10+ tracker formats in one go.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,823,2017-09-13T05:19:34Z,2017-09-29T02:00:37Z,2017-09-29T05:46:03Z,MERGED,True,226,60,5,https://github.com/SimonN,DUMB 2.0 and 0.9.3 support,2,[],https://github.com/liballeg/allegro5/pull/823,https://github.com/SimonN,8,https://github.com/liballeg/allegro5/pull/823#issuecomment-331097407,"Specifying -lm on Arch Linux is necessary for DUMB support: Otherwise, cmake concludes that DUMB is not available. I used the DUMB 1.0-1 binary package from the Arch repo. This Arch package points to kode54's fork of DUMB with version 1.0 as suggested by the DUMB homepage, not to version 0.9.3 that A5 officially supports.
I didn't test whether this is required on other systems, or whether it breaks the build on other systems.
Still no successful playback: I've merely fixed A5's build for me. I can load a module with Allegro 5, but then my application will immediately crash within DUMB. Crashlog follows. I haven't debugged this crash yet! The fault could be in DUMB, in the DUMB Arch package, in A5, in my code, in a faulty module, ...
I'll understand if you won't merge this PR before we have seen successful playback with DUMB 1.0 and A5. According to @SiegeLord, DUMB 1.0 made breaking changes. Still, I'm opening this PR to share my findings, allowing others to shed more light on this.
#0  0x0000000000000000 in ?? ()
#1  0x00007ffff3dd1962 in ?? () from /usr/lib/libdumb.so
#2  0x00007ffff3dd2d15 in dumb_read_it_quick () from /usr/lib/libdumb.so
#3  0x00007ffff3dd0996 in dumb_read_it () from /usr/lib/libdumb.so
#4  0x00007ffff78d5d74 in mod_stream_init (f=0x555556284600, buffer_count=3,
    samples=2048, loader=0x7ffff3dd0990 <dumb_read_it>)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:213
#5  0x00007ffff78d625c in _al_load_it_audio_stream (filename=<optimized out>,
    buffer_count=3, samples=2048)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:391

For reference, here's an excerpt from cmake's error log when DUMB's libraries don't specify -lm:
Run Build Command:""/usr/bin/make"" ""cmTC_5d751/fast""
/usr/bin/make -f CMakeFiles/cmTC_5d751.dir/build.make CMakeFiles/cmTC_5d751.dir/build
make[1]: Entering directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_5d751.dir/src.c.o
/usr/bin/cc   -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES   -o CMakeFiles/cmTC_5d751.dir/src.c.o   -c /home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTC_5d751
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_5d751.dir/link.txt --verbose=1
/usr/bin/cc  -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES    -rdynamic CMakeFiles/cmTC_5d751.dir/src.c.o  -o cmTC_5d751 /usr/lib/libdumb.so 
/usr/lib/libdumb.so: undefined reference to `__pow_finite'
/usr/lib/libdumb.so: undefined reference to `__log_finite'
/usr/lib/libdumb.so: undefined reference to `__exp_finite'
/usr/lib/libdumb.so: undefined reference to `sin'
/usr/lib/libdumb.so: undefined reference to `__log2_finite'
/usr/lib/libdumb.so: undefined reference to `cos'
collect2: error: ld returned 1 exit status
make[1]: *** [CMakeFiles/cmTC_5d751.dir/build.make:99: cmTC_5d751] Error 1
make[1]: Leaving directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
make: *** [Makefile:126: cmTC_5d751/fast] Error 2

Source file was:

            #include <dumb.h>
            int main(void)
            {
                dumb_register_stdfiles();
                return 0;
            }","I expect the DUMB 2.0 API to stabilize in a week. I have pushed a commit to this PR (A5-DUMB-2.0-interop) that uses the most likely DUMB 2.0 API, and still should build with DUMB 0.9.3.
Once DUMB 2.0 is tagged upstream, I'll adapt to the then-stable API, and rebase this PR onto A5 master, squashing commits as appropriate.
I'd love to make it onto the A5 October release before the ship sails!

In modaudio.c, Allegro's MOD_FILE has a field double length; to which we've assigned from l / 65546.0 before where l is long, but in 2.0, we might assign from l / 65536.0 where l is an integer 64+ bits wide. Should I change the field's declaration? Would that have any effect on A5 outside of modaudio.c? (The largest integer result could be stored, but maybe not all the intermediade fractional values.)
Upstream planning for this 64-bit type",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,823,2017-09-13T05:19:34Z,2017-09-29T02:00:37Z,2017-09-29T05:46:03Z,MERGED,True,226,60,5,https://github.com/SimonN,DUMB 2.0 and 0.9.3 support,2,[],https://github.com/liballeg/allegro5/pull/823,https://github.com/beoran,9,https://github.com/liballeg/allegro5/pull/823#issuecomment-331270042,"Specifying -lm on Arch Linux is necessary for DUMB support: Otherwise, cmake concludes that DUMB is not available. I used the DUMB 1.0-1 binary package from the Arch repo. This Arch package points to kode54's fork of DUMB with version 1.0 as suggested by the DUMB homepage, not to version 0.9.3 that A5 officially supports.
I didn't test whether this is required on other systems, or whether it breaks the build on other systems.
Still no successful playback: I've merely fixed A5's build for me. I can load a module with Allegro 5, but then my application will immediately crash within DUMB. Crashlog follows. I haven't debugged this crash yet! The fault could be in DUMB, in the DUMB Arch package, in A5, in my code, in a faulty module, ...
I'll understand if you won't merge this PR before we have seen successful playback with DUMB 1.0 and A5. According to @SiegeLord, DUMB 1.0 made breaking changes. Still, I'm opening this PR to share my findings, allowing others to shed more light on this.
#0  0x0000000000000000 in ?? ()
#1  0x00007ffff3dd1962 in ?? () from /usr/lib/libdumb.so
#2  0x00007ffff3dd2d15 in dumb_read_it_quick () from /usr/lib/libdumb.so
#3  0x00007ffff3dd0996 in dumb_read_it () from /usr/lib/libdumb.so
#4  0x00007ffff78d5d74 in mod_stream_init (f=0x555556284600, buffer_count=3,
    samples=2048, loader=0x7ffff3dd0990 <dumb_read_it>)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:213
#5  0x00007ffff78d625c in _al_load_it_audio_stream (filename=<optimized out>,
    buffer_count=3, samples=2048)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:391

For reference, here's an excerpt from cmake's error log when DUMB's libraries don't specify -lm:
Run Build Command:""/usr/bin/make"" ""cmTC_5d751/fast""
/usr/bin/make -f CMakeFiles/cmTC_5d751.dir/build.make CMakeFiles/cmTC_5d751.dir/build
make[1]: Entering directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_5d751.dir/src.c.o
/usr/bin/cc   -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES   -o CMakeFiles/cmTC_5d751.dir/src.c.o   -c /home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTC_5d751
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_5d751.dir/link.txt --verbose=1
/usr/bin/cc  -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES    -rdynamic CMakeFiles/cmTC_5d751.dir/src.c.o  -o cmTC_5d751 /usr/lib/libdumb.so 
/usr/lib/libdumb.so: undefined reference to `__pow_finite'
/usr/lib/libdumb.so: undefined reference to `__log_finite'
/usr/lib/libdumb.so: undefined reference to `__exp_finite'
/usr/lib/libdumb.so: undefined reference to `sin'
/usr/lib/libdumb.so: undefined reference to `__log2_finite'
/usr/lib/libdumb.so: undefined reference to `cos'
collect2: error: ld returned 1 exit status
make[1]: *** [CMakeFiles/cmTC_5d751.dir/build.make:99: cmTC_5d751] Error 1
make[1]: Leaving directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
make: *** [Makefile:126: cmTC_5d751/fast] Error 2

Source file was:

            #include <dumb.h>
            int main(void)
            {
                dumb_register_stdfiles();
                return 0;
            }","I am not the one to decide but I consider this feature important enough to
delay the next Allegro 5 release for. The DUMB dependency was getting
stale, upgrading to 2.0 seems a great idea.
…
On 21 Sep 2017 11:04 a.m., ""Simon Naarmann"" ***@***.***> wrote:
 I expect the DUMB 2.0 API to stabilize within a week. I have pushed a
 commit to this PR (A5-DUMB-2.0-interop) that uses the most likely DUMB 2.0
 API, and still should build with DUMB 0.9.3.

 Once DUMB 2.0 is tagged upstream, I'll rebase this PR onto A5 master and
 squash commits as appropriate.

 I'd love to make it onto the A5 October release before the ship sails!

 —
 You are receiving this because you commented.
 Reply to this email directly, view it on GitHub
 <#823 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/AAEWeQNIvONau1RRy6-1RagSJC1yfVTMks5skiaegaJpZM4PVl9N>
 .",True,{'HEART': ['https://github.com/SimonN']}
liballeg/allegro5,https://github.com/liballeg/allegro5,823,2017-09-13T05:19:34Z,2017-09-29T02:00:37Z,2017-09-29T05:46:03Z,MERGED,True,226,60,5,https://github.com/SimonN,DUMB 2.0 and 0.9.3 support,2,[],https://github.com/liballeg/allegro5/pull/823,https://github.com/SiegeLord,10,https://github.com/liballeg/allegro5/pull/823#issuecomment-331751936,"Specifying -lm on Arch Linux is necessary for DUMB support: Otherwise, cmake concludes that DUMB is not available. I used the DUMB 1.0-1 binary package from the Arch repo. This Arch package points to kode54's fork of DUMB with version 1.0 as suggested by the DUMB homepage, not to version 0.9.3 that A5 officially supports.
I didn't test whether this is required on other systems, or whether it breaks the build on other systems.
Still no successful playback: I've merely fixed A5's build for me. I can load a module with Allegro 5, but then my application will immediately crash within DUMB. Crashlog follows. I haven't debugged this crash yet! The fault could be in DUMB, in the DUMB Arch package, in A5, in my code, in a faulty module, ...
I'll understand if you won't merge this PR before we have seen successful playback with DUMB 1.0 and A5. According to @SiegeLord, DUMB 1.0 made breaking changes. Still, I'm opening this PR to share my findings, allowing others to shed more light on this.
#0  0x0000000000000000 in ?? ()
#1  0x00007ffff3dd1962 in ?? () from /usr/lib/libdumb.so
#2  0x00007ffff3dd2d15 in dumb_read_it_quick () from /usr/lib/libdumb.so
#3  0x00007ffff3dd0996 in dumb_read_it () from /usr/lib/libdumb.so
#4  0x00007ffff78d5d74 in mod_stream_init (f=0x555556284600, buffer_count=3,
    samples=2048, loader=0x7ffff3dd0990 <dumb_read_it>)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:213
#5  0x00007ffff78d625c in _al_load_it_audio_stream (filename=<optimized out>,
    buffer_count=3, samples=2048)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:391

For reference, here's an excerpt from cmake's error log when DUMB's libraries don't specify -lm:
Run Build Command:""/usr/bin/make"" ""cmTC_5d751/fast""
/usr/bin/make -f CMakeFiles/cmTC_5d751.dir/build.make CMakeFiles/cmTC_5d751.dir/build
make[1]: Entering directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_5d751.dir/src.c.o
/usr/bin/cc   -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES   -o CMakeFiles/cmTC_5d751.dir/src.c.o   -c /home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTC_5d751
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_5d751.dir/link.txt --verbose=1
/usr/bin/cc  -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES    -rdynamic CMakeFiles/cmTC_5d751.dir/src.c.o  -o cmTC_5d751 /usr/lib/libdumb.so 
/usr/lib/libdumb.so: undefined reference to `__pow_finite'
/usr/lib/libdumb.so: undefined reference to `__log_finite'
/usr/lib/libdumb.so: undefined reference to `__exp_finite'
/usr/lib/libdumb.so: undefined reference to `sin'
/usr/lib/libdumb.so: undefined reference to `__log2_finite'
/usr/lib/libdumb.so: undefined reference to `cos'
collect2: error: ld returned 1 exit status
make[1]: *** [CMakeFiles/cmTC_5d751.dir/build.make:99: cmTC_5d751] Error 1
make[1]: Leaving directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
make: *** [Makefile:126: cmTC_5d751/fast] Error 2

Source file was:

            #include <dumb.h>
            int main(void)
            {
                dumb_register_stdfiles();
                return 0;
            }","It's fine to change MOD_FILE's declaration to whatever you need it to be, it's purely an internal implementation detail with no user-visible API or ABI effects.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,823,2017-09-13T05:19:34Z,2017-09-29T02:00:37Z,2017-09-29T05:46:03Z,MERGED,True,226,60,5,https://github.com/SimonN,DUMB 2.0 and 0.9.3 support,2,[],https://github.com/liballeg/allegro5/pull/823,https://github.com/SimonN,11,https://github.com/liballeg/allegro5/pull/823#issuecomment-331787510,"Specifying -lm on Arch Linux is necessary for DUMB support: Otherwise, cmake concludes that DUMB is not available. I used the DUMB 1.0-1 binary package from the Arch repo. This Arch package points to kode54's fork of DUMB with version 1.0 as suggested by the DUMB homepage, not to version 0.9.3 that A5 officially supports.
I didn't test whether this is required on other systems, or whether it breaks the build on other systems.
Still no successful playback: I've merely fixed A5's build for me. I can load a module with Allegro 5, but then my application will immediately crash within DUMB. Crashlog follows. I haven't debugged this crash yet! The fault could be in DUMB, in the DUMB Arch package, in A5, in my code, in a faulty module, ...
I'll understand if you won't merge this PR before we have seen successful playback with DUMB 1.0 and A5. According to @SiegeLord, DUMB 1.0 made breaking changes. Still, I'm opening this PR to share my findings, allowing others to shed more light on this.
#0  0x0000000000000000 in ?? ()
#1  0x00007ffff3dd1962 in ?? () from /usr/lib/libdumb.so
#2  0x00007ffff3dd2d15 in dumb_read_it_quick () from /usr/lib/libdumb.so
#3  0x00007ffff3dd0996 in dumb_read_it () from /usr/lib/libdumb.so
#4  0x00007ffff78d5d74 in mod_stream_init (f=0x555556284600, buffer_count=3,
    samples=2048, loader=0x7ffff3dd0990 <dumb_read_it>)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:213
#5  0x00007ffff78d625c in _al_load_it_audio_stream (filename=<optimized out>,
    buffer_count=3, samples=2048)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:391

For reference, here's an excerpt from cmake's error log when DUMB's libraries don't specify -lm:
Run Build Command:""/usr/bin/make"" ""cmTC_5d751/fast""
/usr/bin/make -f CMakeFiles/cmTC_5d751.dir/build.make CMakeFiles/cmTC_5d751.dir/build
make[1]: Entering directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_5d751.dir/src.c.o
/usr/bin/cc   -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES   -o CMakeFiles/cmTC_5d751.dir/src.c.o   -c /home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTC_5d751
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_5d751.dir/link.txt --verbose=1
/usr/bin/cc  -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES    -rdynamic CMakeFiles/cmTC_5d751.dir/src.c.o  -o cmTC_5d751 /usr/lib/libdumb.so 
/usr/lib/libdumb.so: undefined reference to `__pow_finite'
/usr/lib/libdumb.so: undefined reference to `__log_finite'
/usr/lib/libdumb.so: undefined reference to `__exp_finite'
/usr/lib/libdumb.so: undefined reference to `sin'
/usr/lib/libdumb.so: undefined reference to `__log2_finite'
/usr/lib/libdumb.so: undefined reference to `cos'
collect2: error: ld returned 1 exit status
make[1]: *** [CMakeFiles/cmTC_5d751.dir/build.make:99: cmTC_5d751] Error 1
make[1]: Leaving directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
make: *** [Makefile:126: cmTC_5d751/fast] Error 2

Source file was:

            #include <dumb.h>
            int main(void)
            {
                dumb_register_stdfiles();
                return 0;
            }","Hmm, even if it's purely internal, I think I'll keep MOD_FILE as-is, even if it might fail subtly for gigantic module files of several hundred GB.
We have gold-plated the DUMB API for 64-bit file offsets (module files > 2 GB), but that's only because we want the API future-proof. Maybe that was unnecessary already.

Upstream, I have an open PR with small changes to the 2.0 API release candidate. Maybe everybody will already agree with that API, maybe there'll be 1 (unlikely: 2 or more) PR after that one. That means: Early 2017-10 tag of DUMB 2.0 is still likely.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,823,2017-09-13T05:19:34Z,2017-09-29T02:00:37Z,2017-09-29T05:46:03Z,MERGED,True,226,60,5,https://github.com/SimonN,DUMB 2.0 and 0.9.3 support,2,[],https://github.com/liballeg/allegro5/pull/823,https://github.com/SimonN,12,https://github.com/liballeg/allegro5/pull/823#issuecomment-332086368,"Specifying -lm on Arch Linux is necessary for DUMB support: Otherwise, cmake concludes that DUMB is not available. I used the DUMB 1.0-1 binary package from the Arch repo. This Arch package points to kode54's fork of DUMB with version 1.0 as suggested by the DUMB homepage, not to version 0.9.3 that A5 officially supports.
I didn't test whether this is required on other systems, or whether it breaks the build on other systems.
Still no successful playback: I've merely fixed A5's build for me. I can load a module with Allegro 5, but then my application will immediately crash within DUMB. Crashlog follows. I haven't debugged this crash yet! The fault could be in DUMB, in the DUMB Arch package, in A5, in my code, in a faulty module, ...
I'll understand if you won't merge this PR before we have seen successful playback with DUMB 1.0 and A5. According to @SiegeLord, DUMB 1.0 made breaking changes. Still, I'm opening this PR to share my findings, allowing others to shed more light on this.
#0  0x0000000000000000 in ?? ()
#1  0x00007ffff3dd1962 in ?? () from /usr/lib/libdumb.so
#2  0x00007ffff3dd2d15 in dumb_read_it_quick () from /usr/lib/libdumb.so
#3  0x00007ffff3dd0996 in dumb_read_it () from /usr/lib/libdumb.so
#4  0x00007ffff78d5d74 in mod_stream_init (f=0x555556284600, buffer_count=3,
    samples=2048, loader=0x7ffff3dd0990 <dumb_read_it>)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:213
#5  0x00007ffff78d625c in _al_load_it_audio_stream (filename=<optimized out>,
    buffer_count=3, samples=2048)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:391

For reference, here's an excerpt from cmake's error log when DUMB's libraries don't specify -lm:
Run Build Command:""/usr/bin/make"" ""cmTC_5d751/fast""
/usr/bin/make -f CMakeFiles/cmTC_5d751.dir/build.make CMakeFiles/cmTC_5d751.dir/build
make[1]: Entering directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_5d751.dir/src.c.o
/usr/bin/cc   -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES   -o CMakeFiles/cmTC_5d751.dir/src.c.o   -c /home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTC_5d751
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_5d751.dir/link.txt --verbose=1
/usr/bin/cc  -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES    -rdynamic CMakeFiles/cmTC_5d751.dir/src.c.o  -o cmTC_5d751 /usr/lib/libdumb.so 
/usr/lib/libdumb.so: undefined reference to `__pow_finite'
/usr/lib/libdumb.so: undefined reference to `__log_finite'
/usr/lib/libdumb.so: undefined reference to `__exp_finite'
/usr/lib/libdumb.so: undefined reference to `sin'
/usr/lib/libdumb.so: undefined reference to `__log2_finite'
/usr/lib/libdumb.so: undefined reference to `cos'
collect2: error: ld returned 1 exit status
make[1]: *** [CMakeFiles/cmTC_5d751.dir/build.make:99: cmTC_5d751] Error 1
make[1]: Leaving directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
make: *** [Makefile:126: cmTC_5d751/fast] Error 2

Source file was:

            #include <dumb.h>
            int main(void)
            {
                dumb_register_stdfiles();
                return 0;
            }","DUMB 2.0.0 is tagged upstream! @SiegeLord will look over this PR one more time tomorrow, afterwards I'll rebase and squash.
I've run a quick module-playing test with this PR (including yesterday's commit) against tagged 2.0.0, nothing broke here.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,823,2017-09-13T05:19:34Z,2017-09-29T02:00:37Z,2017-09-29T05:46:03Z,MERGED,True,226,60,5,https://github.com/SimonN,DUMB 2.0 and 0.9.3 support,2,[],https://github.com/liballeg/allegro5/pull/823,https://github.com/SiegeLord,13,https://github.com/liballeg/allegro5/pull/823#issuecomment-332398750,"Specifying -lm on Arch Linux is necessary for DUMB support: Otherwise, cmake concludes that DUMB is not available. I used the DUMB 1.0-1 binary package from the Arch repo. This Arch package points to kode54's fork of DUMB with version 1.0 as suggested by the DUMB homepage, not to version 0.9.3 that A5 officially supports.
I didn't test whether this is required on other systems, or whether it breaks the build on other systems.
Still no successful playback: I've merely fixed A5's build for me. I can load a module with Allegro 5, but then my application will immediately crash within DUMB. Crashlog follows. I haven't debugged this crash yet! The fault could be in DUMB, in the DUMB Arch package, in A5, in my code, in a faulty module, ...
I'll understand if you won't merge this PR before we have seen successful playback with DUMB 1.0 and A5. According to @SiegeLord, DUMB 1.0 made breaking changes. Still, I'm opening this PR to share my findings, allowing others to shed more light on this.
#0  0x0000000000000000 in ?? ()
#1  0x00007ffff3dd1962 in ?? () from /usr/lib/libdumb.so
#2  0x00007ffff3dd2d15 in dumb_read_it_quick () from /usr/lib/libdumb.so
#3  0x00007ffff3dd0996 in dumb_read_it () from /usr/lib/libdumb.so
#4  0x00007ffff78d5d74 in mod_stream_init (f=0x555556284600, buffer_count=3,
    samples=2048, loader=0x7ffff3dd0990 <dumb_read_it>)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:213
#5  0x00007ffff78d625c in _al_load_it_audio_stream (filename=<optimized out>,
    buffer_count=3, samples=2048)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:391

For reference, here's an excerpt from cmake's error log when DUMB's libraries don't specify -lm:
Run Build Command:""/usr/bin/make"" ""cmTC_5d751/fast""
/usr/bin/make -f CMakeFiles/cmTC_5d751.dir/build.make CMakeFiles/cmTC_5d751.dir/build
make[1]: Entering directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_5d751.dir/src.c.o
/usr/bin/cc   -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES   -o CMakeFiles/cmTC_5d751.dir/src.c.o   -c /home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTC_5d751
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_5d751.dir/link.txt --verbose=1
/usr/bin/cc  -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES    -rdynamic CMakeFiles/cmTC_5d751.dir/src.c.o  -o cmTC_5d751 /usr/lib/libdumb.so 
/usr/lib/libdumb.so: undefined reference to `__pow_finite'
/usr/lib/libdumb.so: undefined reference to `__log_finite'
/usr/lib/libdumb.so: undefined reference to `__exp_finite'
/usr/lib/libdumb.so: undefined reference to `sin'
/usr/lib/libdumb.so: undefined reference to `__log2_finite'
/usr/lib/libdumb.so: undefined reference to `cos'
collect2: error: ld returned 1 exit status
make[1]: *** [CMakeFiles/cmTC_5d751.dir/build.make:99: cmTC_5d751] Error 1
make[1]: Leaving directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
make: *** [Makefile:126: cmTC_5d751/fast] Error 2

Source file was:

            #include <dumb.h>
            int main(void)
            {
                dumb_register_stdfiles();
                return 0;
            }","I tried this with dumb2, and found one issue. It appears that the stream length is not reported correctly (e.g. I used ex_stream_seek, and it did not display the length). This seems to work fine with dumb1 (with this code). Maybe it's a dumb2 issue though.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,823,2017-09-13T05:19:34Z,2017-09-29T02:00:37Z,2017-09-29T05:46:03Z,MERGED,True,226,60,5,https://github.com/SimonN,DUMB 2.0 and 0.9.3 support,2,[],https://github.com/liballeg/allegro5/pull/823,https://github.com/SimonN,14,https://github.com/liballeg/allegro5/pull/823#issuecomment-332407420,"Specifying -lm on Arch Linux is necessary for DUMB support: Otherwise, cmake concludes that DUMB is not available. I used the DUMB 1.0-1 binary package from the Arch repo. This Arch package points to kode54's fork of DUMB with version 1.0 as suggested by the DUMB homepage, not to version 0.9.3 that A5 officially supports.
I didn't test whether this is required on other systems, or whether it breaks the build on other systems.
Still no successful playback: I've merely fixed A5's build for me. I can load a module with Allegro 5, but then my application will immediately crash within DUMB. Crashlog follows. I haven't debugged this crash yet! The fault could be in DUMB, in the DUMB Arch package, in A5, in my code, in a faulty module, ...
I'll understand if you won't merge this PR before we have seen successful playback with DUMB 1.0 and A5. According to @SiegeLord, DUMB 1.0 made breaking changes. Still, I'm opening this PR to share my findings, allowing others to shed more light on this.
#0  0x0000000000000000 in ?? ()
#1  0x00007ffff3dd1962 in ?? () from /usr/lib/libdumb.so
#2  0x00007ffff3dd2d15 in dumb_read_it_quick () from /usr/lib/libdumb.so
#3  0x00007ffff3dd0996 in dumb_read_it () from /usr/lib/libdumb.so
#4  0x00007ffff78d5d74 in mod_stream_init (f=0x555556284600, buffer_count=3,
    samples=2048, loader=0x7ffff3dd0990 <dumb_read_it>)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:213
#5  0x00007ffff78d625c in _al_load_it_audio_stream (filename=<optimized out>,
    buffer_count=3, samples=2048)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:391

For reference, here's an excerpt from cmake's error log when DUMB's libraries don't specify -lm:
Run Build Command:""/usr/bin/make"" ""cmTC_5d751/fast""
/usr/bin/make -f CMakeFiles/cmTC_5d751.dir/build.make CMakeFiles/cmTC_5d751.dir/build
make[1]: Entering directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_5d751.dir/src.c.o
/usr/bin/cc   -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES   -o CMakeFiles/cmTC_5d751.dir/src.c.o   -c /home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTC_5d751
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_5d751.dir/link.txt --verbose=1
/usr/bin/cc  -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES    -rdynamic CMakeFiles/cmTC_5d751.dir/src.c.o  -o cmTC_5d751 /usr/lib/libdumb.so 
/usr/lib/libdumb.so: undefined reference to `__pow_finite'
/usr/lib/libdumb.so: undefined reference to `__log_finite'
/usr/lib/libdumb.so: undefined reference to `__exp_finite'
/usr/lib/libdumb.so: undefined reference to `sin'
/usr/lib/libdumb.so: undefined reference to `__log2_finite'
/usr/lib/libdumb.so: undefined reference to `cos'
collect2: error: ld returned 1 exit status
make[1]: *** [CMakeFiles/cmTC_5d751.dir/build.make:99: cmTC_5d751] Error 1
make[1]: Leaving directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
make: *** [Makefile:126: cmTC_5d751/fast] Error 2

Source file was:

            #include <dumb.h>
            int main(void)
            {
                dumb_register_stdfiles();
                return 0;
            }","stream length is not reported correctly (e.g. I used ex_stream_seek, and it did not display the length). This seems to work fine with dumb1 (with this code).

Excellent catch. Can reproduce exactly as you told me: With my latest A5 PR and ex_stream_seek hybridsong220.xm, I can seek in the earlier dumb cbbaa56733f7 from 2 weeks ago, but not in dumb 2.0.0. Will examine!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,823,2017-09-13T05:19:34Z,2017-09-29T02:00:37Z,2017-09-29T05:46:03Z,MERGED,True,226,60,5,https://github.com/SimonN,DUMB 2.0 and 0.9.3 support,2,[],https://github.com/liballeg/allegro5/pull/823,https://github.com/SimonN,15,https://github.com/liballeg/allegro5/pull/823#issuecomment-332421198,"Specifying -lm on Arch Linux is necessary for DUMB support: Otherwise, cmake concludes that DUMB is not available. I used the DUMB 1.0-1 binary package from the Arch repo. This Arch package points to kode54's fork of DUMB with version 1.0 as suggested by the DUMB homepage, not to version 0.9.3 that A5 officially supports.
I didn't test whether this is required on other systems, or whether it breaks the build on other systems.
Still no successful playback: I've merely fixed A5's build for me. I can load a module with Allegro 5, but then my application will immediately crash within DUMB. Crashlog follows. I haven't debugged this crash yet! The fault could be in DUMB, in the DUMB Arch package, in A5, in my code, in a faulty module, ...
I'll understand if you won't merge this PR before we have seen successful playback with DUMB 1.0 and A5. According to @SiegeLord, DUMB 1.0 made breaking changes. Still, I'm opening this PR to share my findings, allowing others to shed more light on this.
#0  0x0000000000000000 in ?? ()
#1  0x00007ffff3dd1962 in ?? () from /usr/lib/libdumb.so
#2  0x00007ffff3dd2d15 in dumb_read_it_quick () from /usr/lib/libdumb.so
#3  0x00007ffff3dd0996 in dumb_read_it () from /usr/lib/libdumb.so
#4  0x00007ffff78d5d74 in mod_stream_init (f=0x555556284600, buffer_count=3,
    samples=2048, loader=0x7ffff3dd0990 <dumb_read_it>)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:213
#5  0x00007ffff78d625c in _al_load_it_audio_stream (filename=<optimized out>,
    buffer_count=3, samples=2048)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:391

For reference, here's an excerpt from cmake's error log when DUMB's libraries don't specify -lm:
Run Build Command:""/usr/bin/make"" ""cmTC_5d751/fast""
/usr/bin/make -f CMakeFiles/cmTC_5d751.dir/build.make CMakeFiles/cmTC_5d751.dir/build
make[1]: Entering directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_5d751.dir/src.c.o
/usr/bin/cc   -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES   -o CMakeFiles/cmTC_5d751.dir/src.c.o   -c /home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTC_5d751
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_5d751.dir/link.txt --verbose=1
/usr/bin/cc  -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES    -rdynamic CMakeFiles/cmTC_5d751.dir/src.c.o  -o cmTC_5d751 /usr/lib/libdumb.so 
/usr/lib/libdumb.so: undefined reference to `__pow_finite'
/usr/lib/libdumb.so: undefined reference to `__log_finite'
/usr/lib/libdumb.so: undefined reference to `__exp_finite'
/usr/lib/libdumb.so: undefined reference to `sin'
/usr/lib/libdumb.so: undefined reference to `__log2_finite'
/usr/lib/libdumb.so: undefined reference to `cos'
collect2: error: ld returned 1 exit status
make[1]: *** [CMakeFiles/cmTC_5d751.dir/build.make:99: cmTC_5d751] Error 1
make[1]: Leaving directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
make: *** [Makefile:126: cmTC_5d751/fast] Error 2

Source file was:

            #include <dumb.h>
            int main(void)
            {
                dumb_register_stdfiles();
                return 0;
            }","Fixed both issues (.nst registration and failure to seek). Rebased onto master, but not yet squashed.
I fixed the seek failure with dumb_read_any (DUMB runs eagerly through the file once on load and remembers positions for faster seeking) instead of dumb_read_any_quick (don't run through on file load).
Strangely, dumb_read_any_quick worked 20 commits ago. I'm confused and will investigate, maybe our non-perfect DUMB API 2.0 64-bit conversion is at fault. But even if I find the real cause, using dumb_read_any_quick would be a minor performance gain -- very nice to have, but not as important as offering seeking and length for now.
See next post!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,823,2017-09-13T05:19:34Z,2017-09-29T02:00:37Z,2017-09-29T05:46:03Z,MERGED,True,226,60,5,https://github.com/SimonN,DUMB 2.0 and 0.9.3 support,2,[],https://github.com/liballeg/allegro5/pull/823,https://github.com/SimonN,16,https://github.com/liballeg/allegro5/pull/823#issuecomment-332426446,"Specifying -lm on Arch Linux is necessary for DUMB support: Otherwise, cmake concludes that DUMB is not available. I used the DUMB 1.0-1 binary package from the Arch repo. This Arch package points to kode54's fork of DUMB with version 1.0 as suggested by the DUMB homepage, not to version 0.9.3 that A5 officially supports.
I didn't test whether this is required on other systems, or whether it breaks the build on other systems.
Still no successful playback: I've merely fixed A5's build for me. I can load a module with Allegro 5, but then my application will immediately crash within DUMB. Crashlog follows. I haven't debugged this crash yet! The fault could be in DUMB, in the DUMB Arch package, in A5, in my code, in a faulty module, ...
I'll understand if you won't merge this PR before we have seen successful playback with DUMB 1.0 and A5. According to @SiegeLord, DUMB 1.0 made breaking changes. Still, I'm opening this PR to share my findings, allowing others to shed more light on this.
#0  0x0000000000000000 in ?? ()
#1  0x00007ffff3dd1962 in ?? () from /usr/lib/libdumb.so
#2  0x00007ffff3dd2d15 in dumb_read_it_quick () from /usr/lib/libdumb.so
#3  0x00007ffff3dd0996 in dumb_read_it () from /usr/lib/libdumb.so
#4  0x00007ffff78d5d74 in mod_stream_init (f=0x555556284600, buffer_count=3,
    samples=2048, loader=0x7ffff3dd0990 <dumb_read_it>)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:213
#5  0x00007ffff78d625c in _al_load_it_audio_stream (filename=<optimized out>,
    buffer_count=3, samples=2048)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:391

For reference, here's an excerpt from cmake's error log when DUMB's libraries don't specify -lm:
Run Build Command:""/usr/bin/make"" ""cmTC_5d751/fast""
/usr/bin/make -f CMakeFiles/cmTC_5d751.dir/build.make CMakeFiles/cmTC_5d751.dir/build
make[1]: Entering directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_5d751.dir/src.c.o
/usr/bin/cc   -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES   -o CMakeFiles/cmTC_5d751.dir/src.c.o   -c /home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTC_5d751
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_5d751.dir/link.txt --verbose=1
/usr/bin/cc  -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES    -rdynamic CMakeFiles/cmTC_5d751.dir/src.c.o  -o cmTC_5d751 /usr/lib/libdumb.so 
/usr/lib/libdumb.so: undefined reference to `__pow_finite'
/usr/lib/libdumb.so: undefined reference to `__log_finite'
/usr/lib/libdumb.so: undefined reference to `__exp_finite'
/usr/lib/libdumb.so: undefined reference to `sin'
/usr/lib/libdumb.so: undefined reference to `__log2_finite'
/usr/lib/libdumb.so: undefined reference to `cos'
collect2: error: ld returned 1 exit status
make[1]: *** [CMakeFiles/cmTC_5d751.dir/build.make:99: cmTC_5d751] Error 1
make[1]: Leaving directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
make: *** [Makefile:126: cmTC_5d751/fast] Error 2

Source file was:

            #include <dumb.h>
            int main(void)
            {
                dumb_register_stdfiles();
                return 0;
            }","It's all fixed and good!
I've bisected the DUMB codebase, and now I feel dumb: In this A5 PR, I #if the DUMB header version. For >= 2.0, I used dumb_read_any_quick; for smaller DUMB, I used the old dumb readers. That's why my PR behaves so differently with DUMB 2.0 and 1.0.
I should always use dumb_read_any to allow seeking, never dumb_read_any_quick. It's already fixed in the above a947cb2.
The 64-bit DUMB API has nothing to do with this, sorry for tying @SiegeLord into an hour of rambling!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,823,2017-09-13T05:19:34Z,2017-09-29T02:00:37Z,2017-09-29T05:46:03Z,MERGED,True,226,60,5,https://github.com/SimonN,DUMB 2.0 and 0.9.3 support,2,[],https://github.com/liballeg/allegro5/pull/823,https://github.com/SiegeLord,17,https://github.com/liballeg/allegro5/pull/823#issuecomment-332729378,"Specifying -lm on Arch Linux is necessary for DUMB support: Otherwise, cmake concludes that DUMB is not available. I used the DUMB 1.0-1 binary package from the Arch repo. This Arch package points to kode54's fork of DUMB with version 1.0 as suggested by the DUMB homepage, not to version 0.9.3 that A5 officially supports.
I didn't test whether this is required on other systems, or whether it breaks the build on other systems.
Still no successful playback: I've merely fixed A5's build for me. I can load a module with Allegro 5, but then my application will immediately crash within DUMB. Crashlog follows. I haven't debugged this crash yet! The fault could be in DUMB, in the DUMB Arch package, in A5, in my code, in a faulty module, ...
I'll understand if you won't merge this PR before we have seen successful playback with DUMB 1.0 and A5. According to @SiegeLord, DUMB 1.0 made breaking changes. Still, I'm opening this PR to share my findings, allowing others to shed more light on this.
#0  0x0000000000000000 in ?? ()
#1  0x00007ffff3dd1962 in ?? () from /usr/lib/libdumb.so
#2  0x00007ffff3dd2d15 in dumb_read_it_quick () from /usr/lib/libdumb.so
#3  0x00007ffff3dd0996 in dumb_read_it () from /usr/lib/libdumb.so
#4  0x00007ffff78d5d74 in mod_stream_init (f=0x555556284600, buffer_count=3,
    samples=2048, loader=0x7ffff3dd0990 <dumb_read_it>)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:213
#5  0x00007ffff78d625c in _al_load_it_audio_stream (filename=<optimized out>,
    buffer_count=3, samples=2048)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:391

For reference, here's an excerpt from cmake's error log when DUMB's libraries don't specify -lm:
Run Build Command:""/usr/bin/make"" ""cmTC_5d751/fast""
/usr/bin/make -f CMakeFiles/cmTC_5d751.dir/build.make CMakeFiles/cmTC_5d751.dir/build
make[1]: Entering directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_5d751.dir/src.c.o
/usr/bin/cc   -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES   -o CMakeFiles/cmTC_5d751.dir/src.c.o   -c /home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTC_5d751
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_5d751.dir/link.txt --verbose=1
/usr/bin/cc  -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES    -rdynamic CMakeFiles/cmTC_5d751.dir/src.c.o  -o cmTC_5d751 /usr/lib/libdumb.so 
/usr/lib/libdumb.so: undefined reference to `__pow_finite'
/usr/lib/libdumb.so: undefined reference to `__log_finite'
/usr/lib/libdumb.so: undefined reference to `__exp_finite'
/usr/lib/libdumb.so: undefined reference to `sin'
/usr/lib/libdumb.so: undefined reference to `__log2_finite'
/usr/lib/libdumb.so: undefined reference to `cos'
collect2: error: ld returned 1 exit status
make[1]: *** [CMakeFiles/cmTC_5d751.dir/build.make:99: cmTC_5d751] Error 1
make[1]: Leaving directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
make: *** [Makefile:126: cmTC_5d751/fast] Error 2

Source file was:

            #include <dumb.h>
            int main(void)
            {
                dumb_register_stdfiles();
                return 0;
            }","Ok, tested this again and it seemed to work fine. Feel free to squash it when convenient.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,823,2017-09-13T05:19:34Z,2017-09-29T02:00:37Z,2017-09-29T05:46:03Z,MERGED,True,226,60,5,https://github.com/SimonN,DUMB 2.0 and 0.9.3 support,2,[],https://github.com/liballeg/allegro5/pull/823,https://github.com/beoran,18,https://github.com/liballeg/allegro5/pull/823#issuecomment-332735984,"Specifying -lm on Arch Linux is necessary for DUMB support: Otherwise, cmake concludes that DUMB is not available. I used the DUMB 1.0-1 binary package from the Arch repo. This Arch package points to kode54's fork of DUMB with version 1.0 as suggested by the DUMB homepage, not to version 0.9.3 that A5 officially supports.
I didn't test whether this is required on other systems, or whether it breaks the build on other systems.
Still no successful playback: I've merely fixed A5's build for me. I can load a module with Allegro 5, but then my application will immediately crash within DUMB. Crashlog follows. I haven't debugged this crash yet! The fault could be in DUMB, in the DUMB Arch package, in A5, in my code, in a faulty module, ...
I'll understand if you won't merge this PR before we have seen successful playback with DUMB 1.0 and A5. According to @SiegeLord, DUMB 1.0 made breaking changes. Still, I'm opening this PR to share my findings, allowing others to shed more light on this.
#0  0x0000000000000000 in ?? ()
#1  0x00007ffff3dd1962 in ?? () from /usr/lib/libdumb.so
#2  0x00007ffff3dd2d15 in dumb_read_it_quick () from /usr/lib/libdumb.so
#3  0x00007ffff3dd0996 in dumb_read_it () from /usr/lib/libdumb.so
#4  0x00007ffff78d5d74 in mod_stream_init (f=0x555556284600, buffer_count=3,
    samples=2048, loader=0x7ffff3dd0990 <dumb_read_it>)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:213
#5  0x00007ffff78d625c in _al_load_it_audio_stream (filename=<optimized out>,
    buffer_count=3, samples=2048)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:391

For reference, here's an excerpt from cmake's error log when DUMB's libraries don't specify -lm:
Run Build Command:""/usr/bin/make"" ""cmTC_5d751/fast""
/usr/bin/make -f CMakeFiles/cmTC_5d751.dir/build.make CMakeFiles/cmTC_5d751.dir/build
make[1]: Entering directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_5d751.dir/src.c.o
/usr/bin/cc   -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES   -o CMakeFiles/cmTC_5d751.dir/src.c.o   -c /home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTC_5d751
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_5d751.dir/link.txt --verbose=1
/usr/bin/cc  -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES    -rdynamic CMakeFiles/cmTC_5d751.dir/src.c.o  -o cmTC_5d751 /usr/lib/libdumb.so 
/usr/lib/libdumb.so: undefined reference to `__pow_finite'
/usr/lib/libdumb.so: undefined reference to `__log_finite'
/usr/lib/libdumb.so: undefined reference to `__exp_finite'
/usr/lib/libdumb.so: undefined reference to `sin'
/usr/lib/libdumb.so: undefined reference to `__log2_finite'
/usr/lib/libdumb.so: undefined reference to `cos'
collect2: error: ld returned 1 exit status
make[1]: *** [CMakeFiles/cmTC_5d751.dir/build.make:99: cmTC_5d751] Error 1
make[1]: Leaving directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
make: *** [Makefile:126: cmTC_5d751/fast] Error 2

Source file was:

            #include <dumb.h>
            int main(void)
            {
                dumb_register_stdfiles();
                return 0;
            }","@SiegeLord On the subject of squashing, I see that now Github has a convenient looking ""squash and merge"" button for Allegro developers with sufficient privileges to the repo. Do you think it is OK to actually use this button once all reviews and tests are OK? It saves the contributor the effort of having to do a manual squash.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,823,2017-09-13T05:19:34Z,2017-09-29T02:00:37Z,2017-09-29T05:46:03Z,MERGED,True,226,60,5,https://github.com/SimonN,DUMB 2.0 and 0.9.3 support,2,[],https://github.com/liballeg/allegro5/pull/823,https://github.com/SimonN,19,https://github.com/liballeg/allegro5/pull/823#issuecomment-332737484,"Specifying -lm on Arch Linux is necessary for DUMB support: Otherwise, cmake concludes that DUMB is not available. I used the DUMB 1.0-1 binary package from the Arch repo. This Arch package points to kode54's fork of DUMB with version 1.0 as suggested by the DUMB homepage, not to version 0.9.3 that A5 officially supports.
I didn't test whether this is required on other systems, or whether it breaks the build on other systems.
Still no successful playback: I've merely fixed A5's build for me. I can load a module with Allegro 5, but then my application will immediately crash within DUMB. Crashlog follows. I haven't debugged this crash yet! The fault could be in DUMB, in the DUMB Arch package, in A5, in my code, in a faulty module, ...
I'll understand if you won't merge this PR before we have seen successful playback with DUMB 1.0 and A5. According to @SiegeLord, DUMB 1.0 made breaking changes. Still, I'm opening this PR to share my findings, allowing others to shed more light on this.
#0  0x0000000000000000 in ?? ()
#1  0x00007ffff3dd1962 in ?? () from /usr/lib/libdumb.so
#2  0x00007ffff3dd2d15 in dumb_read_it_quick () from /usr/lib/libdumb.so
#3  0x00007ffff3dd0996 in dumb_read_it () from /usr/lib/libdumb.so
#4  0x00007ffff78d5d74 in mod_stream_init (f=0x555556284600, buffer_count=3,
    samples=2048, loader=0x7ffff3dd0990 <dumb_read_it>)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:213
#5  0x00007ffff78d625c in _al_load_it_audio_stream (filename=<optimized out>,
    buffer_count=3, samples=2048)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:391

For reference, here's an excerpt from cmake's error log when DUMB's libraries don't specify -lm:
Run Build Command:""/usr/bin/make"" ""cmTC_5d751/fast""
/usr/bin/make -f CMakeFiles/cmTC_5d751.dir/build.make CMakeFiles/cmTC_5d751.dir/build
make[1]: Entering directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_5d751.dir/src.c.o
/usr/bin/cc   -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES   -o CMakeFiles/cmTC_5d751.dir/src.c.o   -c /home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTC_5d751
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_5d751.dir/link.txt --verbose=1
/usr/bin/cc  -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES    -rdynamic CMakeFiles/cmTC_5d751.dir/src.c.o  -o cmTC_5d751 /usr/lib/libdumb.so 
/usr/lib/libdumb.so: undefined reference to `__pow_finite'
/usr/lib/libdumb.so: undefined reference to `__log_finite'
/usr/lib/libdumb.so: undefined reference to `__exp_finite'
/usr/lib/libdumb.so: undefined reference to `sin'
/usr/lib/libdumb.so: undefined reference to `__log2_finite'
/usr/lib/libdumb.so: undefined reference to `cos'
collect2: error: ld returned 1 exit status
make[1]: *** [CMakeFiles/cmTC_5d751.dir/build.make:99: cmTC_5d751] Error 1
make[1]: Leaving directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
make: *** [Makefile:126: cmTC_5d751/fast] Error 2

Source file was:

            #include <dumb.h>
            int main(void)
            {
                dumb_register_stdfiles();
                return 0;
            }","Squashed into 2 commits: Fixing whitespace, then a clean diff of the feature.
@beoran: As contributor, I like the manual squash and take my time to get it perfect, because it defines the patch's final presentation. I care about it.
But maybe others are fine however their patch turn out? Github's squash-and-merge might certainly be handy when somebody wouldn't want to squash their commits themselves. :-)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,823,2017-09-13T05:19:34Z,2017-09-29T02:00:37Z,2017-09-29T05:46:03Z,MERGED,True,226,60,5,https://github.com/SimonN,DUMB 2.0 and 0.9.3 support,2,[],https://github.com/liballeg/allegro5/pull/823,https://github.com/SiegeLord,20,https://github.com/liballeg/allegro5/pull/823#issuecomment-332868513,"Specifying -lm on Arch Linux is necessary for DUMB support: Otherwise, cmake concludes that DUMB is not available. I used the DUMB 1.0-1 binary package from the Arch repo. This Arch package points to kode54's fork of DUMB with version 1.0 as suggested by the DUMB homepage, not to version 0.9.3 that A5 officially supports.
I didn't test whether this is required on other systems, or whether it breaks the build on other systems.
Still no successful playback: I've merely fixed A5's build for me. I can load a module with Allegro 5, but then my application will immediately crash within DUMB. Crashlog follows. I haven't debugged this crash yet! The fault could be in DUMB, in the DUMB Arch package, in A5, in my code, in a faulty module, ...
I'll understand if you won't merge this PR before we have seen successful playback with DUMB 1.0 and A5. According to @SiegeLord, DUMB 1.0 made breaking changes. Still, I'm opening this PR to share my findings, allowing others to shed more light on this.
#0  0x0000000000000000 in ?? ()
#1  0x00007ffff3dd1962 in ?? () from /usr/lib/libdumb.so
#2  0x00007ffff3dd2d15 in dumb_read_it_quick () from /usr/lib/libdumb.so
#3  0x00007ffff3dd0996 in dumb_read_it () from /usr/lib/libdumb.so
#4  0x00007ffff78d5d74 in mod_stream_init (f=0x555556284600, buffer_count=3,
    samples=2048, loader=0x7ffff3dd0990 <dumb_read_it>)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:213
#5  0x00007ffff78d625c in _al_load_it_audio_stream (filename=<optimized out>,
    buffer_count=3, samples=2048)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:391

For reference, here's an excerpt from cmake's error log when DUMB's libraries don't specify -lm:
Run Build Command:""/usr/bin/make"" ""cmTC_5d751/fast""
/usr/bin/make -f CMakeFiles/cmTC_5d751.dir/build.make CMakeFiles/cmTC_5d751.dir/build
make[1]: Entering directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_5d751.dir/src.c.o
/usr/bin/cc   -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES   -o CMakeFiles/cmTC_5d751.dir/src.c.o   -c /home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTC_5d751
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_5d751.dir/link.txt --verbose=1
/usr/bin/cc  -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES    -rdynamic CMakeFiles/cmTC_5d751.dir/src.c.o  -o cmTC_5d751 /usr/lib/libdumb.so 
/usr/lib/libdumb.so: undefined reference to `__pow_finite'
/usr/lib/libdumb.so: undefined reference to `__log_finite'
/usr/lib/libdumb.so: undefined reference to `__exp_finite'
/usr/lib/libdumb.so: undefined reference to `sin'
/usr/lib/libdumb.so: undefined reference to `__log2_finite'
/usr/lib/libdumb.so: undefined reference to `cos'
collect2: error: ld returned 1 exit status
make[1]: *** [CMakeFiles/cmTC_5d751.dir/build.make:99: cmTC_5d751] Error 1
make[1]: Leaving directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
make: *** [Makefile:126: cmTC_5d751/fast] Error 2

Source file was:

            #include <dumb.h>
            int main(void)
            {
                dumb_register_stdfiles();
                return 0;
            }","@beoran, it doesn't do the rebase, as far as I can tell. I really don't like having merges in the history. We very rarely ask people to squash and rebase (I always rebase myself before merging), Simon is just being super nice :D.",True,{'HEART': ['https://github.com/SimonN']}
liballeg/allegro5,https://github.com/liballeg/allegro5,823,2017-09-13T05:19:34Z,2017-09-29T02:00:37Z,2017-09-29T05:46:03Z,MERGED,True,226,60,5,https://github.com/SimonN,DUMB 2.0 and 0.9.3 support,2,[],https://github.com/liballeg/allegro5/pull/823,https://github.com/elias-pschernig,21,https://github.com/liballeg/allegro5/pull/823#issuecomment-332920043,"Specifying -lm on Arch Linux is necessary for DUMB support: Otherwise, cmake concludes that DUMB is not available. I used the DUMB 1.0-1 binary package from the Arch repo. This Arch package points to kode54's fork of DUMB with version 1.0 as suggested by the DUMB homepage, not to version 0.9.3 that A5 officially supports.
I didn't test whether this is required on other systems, or whether it breaks the build on other systems.
Still no successful playback: I've merely fixed A5's build for me. I can load a module with Allegro 5, but then my application will immediately crash within DUMB. Crashlog follows. I haven't debugged this crash yet! The fault could be in DUMB, in the DUMB Arch package, in A5, in my code, in a faulty module, ...
I'll understand if you won't merge this PR before we have seen successful playback with DUMB 1.0 and A5. According to @SiegeLord, DUMB 1.0 made breaking changes. Still, I'm opening this PR to share my findings, allowing others to shed more light on this.
#0  0x0000000000000000 in ?? ()
#1  0x00007ffff3dd1962 in ?? () from /usr/lib/libdumb.so
#2  0x00007ffff3dd2d15 in dumb_read_it_quick () from /usr/lib/libdumb.so
#3  0x00007ffff3dd0996 in dumb_read_it () from /usr/lib/libdumb.so
#4  0x00007ffff78d5d74 in mod_stream_init (f=0x555556284600, buffer_count=3,
    samples=2048, loader=0x7ffff3dd0990 <dumb_read_it>)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:213
#5  0x00007ffff78d625c in _al_load_it_audio_stream (filename=<optimized out>,
    buffer_count=3, samples=2048)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:391

For reference, here's an excerpt from cmake's error log when DUMB's libraries don't specify -lm:
Run Build Command:""/usr/bin/make"" ""cmTC_5d751/fast""
/usr/bin/make -f CMakeFiles/cmTC_5d751.dir/build.make CMakeFiles/cmTC_5d751.dir/build
make[1]: Entering directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_5d751.dir/src.c.o
/usr/bin/cc   -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES   -o CMakeFiles/cmTC_5d751.dir/src.c.o   -c /home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTC_5d751
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_5d751.dir/link.txt --verbose=1
/usr/bin/cc  -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES    -rdynamic CMakeFiles/cmTC_5d751.dir/src.c.o  -o cmTC_5d751 /usr/lib/libdumb.so 
/usr/lib/libdumb.so: undefined reference to `__pow_finite'
/usr/lib/libdumb.so: undefined reference to `__log_finite'
/usr/lib/libdumb.so: undefined reference to `__exp_finite'
/usr/lib/libdumb.so: undefined reference to `sin'
/usr/lib/libdumb.so: undefined reference to `__log2_finite'
/usr/lib/libdumb.so: undefined reference to `cos'
collect2: error: ld returned 1 exit status
make[1]: *** [CMakeFiles/cmTC_5d751.dir/build.make:99: cmTC_5d751] Error 1
make[1]: Leaving directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
make: *** [Makefile:126: cmTC_5d751/fast] Error 2

Source file was:

            #include <dumb.h>
            int main(void)
            {
                dumb_register_stdfiles();
                return 0;
            }","I hate repositories who have 1000ds of useless merge commits - so I'm really glad we avoid them in Allegro (except for actual branch merges, which are rare now that we switched to a single development branch).",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,823,2017-09-13T05:19:34Z,2017-09-29T02:00:37Z,2017-09-29T05:46:03Z,MERGED,True,226,60,5,https://github.com/SimonN,DUMB 2.0 and 0.9.3 support,2,[],https://github.com/liballeg/allegro5/pull/823,https://github.com/beoran,22,https://github.com/liballeg/allegro5/pull/823#issuecomment-332983574,"Specifying -lm on Arch Linux is necessary for DUMB support: Otherwise, cmake concludes that DUMB is not available. I used the DUMB 1.0-1 binary package from the Arch repo. This Arch package points to kode54's fork of DUMB with version 1.0 as suggested by the DUMB homepage, not to version 0.9.3 that A5 officially supports.
I didn't test whether this is required on other systems, or whether it breaks the build on other systems.
Still no successful playback: I've merely fixed A5's build for me. I can load a module with Allegro 5, but then my application will immediately crash within DUMB. Crashlog follows. I haven't debugged this crash yet! The fault could be in DUMB, in the DUMB Arch package, in A5, in my code, in a faulty module, ...
I'll understand if you won't merge this PR before we have seen successful playback with DUMB 1.0 and A5. According to @SiegeLord, DUMB 1.0 made breaking changes. Still, I'm opening this PR to share my findings, allowing others to shed more light on this.
#0  0x0000000000000000 in ?? ()
#1  0x00007ffff3dd1962 in ?? () from /usr/lib/libdumb.so
#2  0x00007ffff3dd2d15 in dumb_read_it_quick () from /usr/lib/libdumb.so
#3  0x00007ffff3dd0996 in dumb_read_it () from /usr/lib/libdumb.so
#4  0x00007ffff78d5d74 in mod_stream_init (f=0x555556284600, buffer_count=3,
    samples=2048, loader=0x7ffff3dd0990 <dumb_read_it>)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:213
#5  0x00007ffff78d625c in _al_load_it_audio_stream (filename=<optimized out>,
    buffer_count=3, samples=2048)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:391

For reference, here's an excerpt from cmake's error log when DUMB's libraries don't specify -lm:
Run Build Command:""/usr/bin/make"" ""cmTC_5d751/fast""
/usr/bin/make -f CMakeFiles/cmTC_5d751.dir/build.make CMakeFiles/cmTC_5d751.dir/build
make[1]: Entering directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_5d751.dir/src.c.o
/usr/bin/cc   -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES   -o CMakeFiles/cmTC_5d751.dir/src.c.o   -c /home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTC_5d751
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_5d751.dir/link.txt --verbose=1
/usr/bin/cc  -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES    -rdynamic CMakeFiles/cmTC_5d751.dir/src.c.o  -o cmTC_5d751 /usr/lib/libdumb.so 
/usr/lib/libdumb.so: undefined reference to `__pow_finite'
/usr/lib/libdumb.so: undefined reference to `__log_finite'
/usr/lib/libdumb.so: undefined reference to `__exp_finite'
/usr/lib/libdumb.so: undefined reference to `sin'
/usr/lib/libdumb.so: undefined reference to `__log2_finite'
/usr/lib/libdumb.so: undefined reference to `cos'
collect2: error: ld returned 1 exit status
make[1]: *** [CMakeFiles/cmTC_5d751.dir/build.make:99: cmTC_5d751] Error 1
make[1]: Leaving directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
make: *** [Makefile:126: cmTC_5d751/fast] Error 2

Source file was:

            #include <dumb.h>
            int main(void)
            {
                dumb_register_stdfiles();
                return 0;
            }","I see, I can agree with that. I will refrain from using the button, then.
…
On 28 Sep 2017 20:14, ""elias-pschernig"" ***@***.***> wrote:
 I hate repositories who have 1000ds of useless merge commits - so I'm
 really glad we avoid them in Allegro (except for actual branch merges,
 which are rare now that we switched to a single development branch).

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#823 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/AAEWeY-rAGzpHOiE6xJsVy_XtQjBQTYpks5sm-H0gaJpZM4PVl9N>
 .",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,823,2017-09-13T05:19:34Z,2017-09-29T02:00:37Z,2017-09-29T05:46:03Z,MERGED,True,226,60,5,https://github.com/SimonN,DUMB 2.0 and 0.9.3 support,2,[],https://github.com/liballeg/allegro5/pull/823,https://github.com/SiegeLord,23,https://github.com/liballeg/allegro5/pull/823#issuecomment-333011027,"Specifying -lm on Arch Linux is necessary for DUMB support: Otherwise, cmake concludes that DUMB is not available. I used the DUMB 1.0-1 binary package from the Arch repo. This Arch package points to kode54's fork of DUMB with version 1.0 as suggested by the DUMB homepage, not to version 0.9.3 that A5 officially supports.
I didn't test whether this is required on other systems, or whether it breaks the build on other systems.
Still no successful playback: I've merely fixed A5's build for me. I can load a module with Allegro 5, but then my application will immediately crash within DUMB. Crashlog follows. I haven't debugged this crash yet! The fault could be in DUMB, in the DUMB Arch package, in A5, in my code, in a faulty module, ...
I'll understand if you won't merge this PR before we have seen successful playback with DUMB 1.0 and A5. According to @SiegeLord, DUMB 1.0 made breaking changes. Still, I'm opening this PR to share my findings, allowing others to shed more light on this.
#0  0x0000000000000000 in ?? ()
#1  0x00007ffff3dd1962 in ?? () from /usr/lib/libdumb.so
#2  0x00007ffff3dd2d15 in dumb_read_it_quick () from /usr/lib/libdumb.so
#3  0x00007ffff3dd0996 in dumb_read_it () from /usr/lib/libdumb.so
#4  0x00007ffff78d5d74 in mod_stream_init (f=0x555556284600, buffer_count=3,
    samples=2048, loader=0x7ffff3dd0990 <dumb_read_it>)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:213
#5  0x00007ffff78d625c in _al_load_it_audio_stream (filename=<optimized out>,
    buffer_count=3, samples=2048)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:391

For reference, here's an excerpt from cmake's error log when DUMB's libraries don't specify -lm:
Run Build Command:""/usr/bin/make"" ""cmTC_5d751/fast""
/usr/bin/make -f CMakeFiles/cmTC_5d751.dir/build.make CMakeFiles/cmTC_5d751.dir/build
make[1]: Entering directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_5d751.dir/src.c.o
/usr/bin/cc   -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES   -o CMakeFiles/cmTC_5d751.dir/src.c.o   -c /home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTC_5d751
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_5d751.dir/link.txt --verbose=1
/usr/bin/cc  -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES    -rdynamic CMakeFiles/cmTC_5d751.dir/src.c.o  -o cmTC_5d751 /usr/lib/libdumb.so 
/usr/lib/libdumb.so: undefined reference to `__pow_finite'
/usr/lib/libdumb.so: undefined reference to `__log_finite'
/usr/lib/libdumb.so: undefined reference to `__exp_finite'
/usr/lib/libdumb.so: undefined reference to `sin'
/usr/lib/libdumb.so: undefined reference to `__log2_finite'
/usr/lib/libdumb.so: undefined reference to `cos'
collect2: error: ld returned 1 exit status
make[1]: *** [CMakeFiles/cmTC_5d751.dir/build.make:99: cmTC_5d751] Error 1
make[1]: Leaving directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
make: *** [Makefile:126: cmTC_5d751/fast] Error 2

Source file was:

            #include <dumb.h>
            int main(void)
            {
                dumb_register_stdfiles();
                return 0;
            }","Alright, merged! Thanks a lot Simon, you're the best!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,823,2017-09-13T05:19:34Z,2017-09-29T02:00:37Z,2017-09-29T05:46:03Z,MERGED,True,226,60,5,https://github.com/SimonN,DUMB 2.0 and 0.9.3 support,2,[],https://github.com/liballeg/allegro5/pull/823,https://github.com/SimonN,24,https://github.com/liballeg/allegro5/pull/823#issuecomment-333036516,"Specifying -lm on Arch Linux is necessary for DUMB support: Otherwise, cmake concludes that DUMB is not available. I used the DUMB 1.0-1 binary package from the Arch repo. This Arch package points to kode54's fork of DUMB with version 1.0 as suggested by the DUMB homepage, not to version 0.9.3 that A5 officially supports.
I didn't test whether this is required on other systems, or whether it breaks the build on other systems.
Still no successful playback: I've merely fixed A5's build for me. I can load a module with Allegro 5, but then my application will immediately crash within DUMB. Crashlog follows. I haven't debugged this crash yet! The fault could be in DUMB, in the DUMB Arch package, in A5, in my code, in a faulty module, ...
I'll understand if you won't merge this PR before we have seen successful playback with DUMB 1.0 and A5. According to @SiegeLord, DUMB 1.0 made breaking changes. Still, I'm opening this PR to share my findings, allowing others to shed more light on this.
#0  0x0000000000000000 in ?? ()
#1  0x00007ffff3dd1962 in ?? () from /usr/lib/libdumb.so
#2  0x00007ffff3dd2d15 in dumb_read_it_quick () from /usr/lib/libdumb.so
#3  0x00007ffff3dd0996 in dumb_read_it () from /usr/lib/libdumb.so
#4  0x00007ffff78d5d74 in mod_stream_init (f=0x555556284600, buffer_count=3,
    samples=2048, loader=0x7ffff3dd0990 <dumb_read_it>)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:213
#5  0x00007ffff78d625c in _al_load_it_audio_stream (filename=<optimized out>,
    buffer_count=3, samples=2048)
    at /home/simon/c/notown/allegro5/addons/acodec/modaudio.c:391

For reference, here's an excerpt from cmake's error log when DUMB's libraries don't specify -lm:
Run Build Command:""/usr/bin/make"" ""cmTC_5d751/fast""
/usr/bin/make -f CMakeFiles/cmTC_5d751.dir/build.make CMakeFiles/cmTC_5d751.dir/build
make[1]: Entering directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_5d751.dir/src.c.o
/usr/bin/cc   -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES   -o CMakeFiles/cmTC_5d751.dir/src.c.o   -c /home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTC_5d751
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_5d751.dir/link.txt --verbose=1
/usr/bin/cc  -msse -W -Wall -Wpointer-arith -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -DDUMB_COMPILES    -rdynamic CMakeFiles/cmTC_5d751.dir/src.c.o  -o cmTC_5d751 /usr/lib/libdumb.so 
/usr/lib/libdumb.so: undefined reference to `__pow_finite'
/usr/lib/libdumb.so: undefined reference to `__log_finite'
/usr/lib/libdumb.so: undefined reference to `__exp_finite'
/usr/lib/libdumb.so: undefined reference to `sin'
/usr/lib/libdumb.so: undefined reference to `__log2_finite'
/usr/lib/libdumb.so: undefined reference to `cos'
collect2: error: ld returned 1 exit status
make[1]: *** [CMakeFiles/cmTC_5d751.dir/build.make:99: cmTC_5d751] Error 1
make[1]: Leaving directory '/home/simon/c/notown/allegro5/simon/CMakeFiles/CMakeTmp'
make: *** [Makefile:126: cmTC_5d751/fast] Error 2

Source file was:

            #include <dumb.h>
            int main(void)
            {
                dumb_register_stdfiles();
                return 0;
            }","You're welcome! Thanks to SiegeLord for the frequent reviews, and to everyone for feedback and encouragement.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,824,2017-09-21T21:35:38Z,2017-09-27T03:37:39Z,2017-09-27T03:41:41Z,MERGED,True,57,35,5,https://github.com/dos1,image: make compression/quality levels and gamma handling configurable,5,[],https://github.com/liballeg/allegro5/pull/824,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/824,"With my 3200x1800 screen, Z_BEST_COMPRESSION meant that saving fullscreen
bitmap into PNG file took 15-20 seconds on my i5-4200U CPU.
With Z_DEFAULT_COMPRESSION it takes 3-5 seconds now and the resulting files
aren't much bigger (4.6M and 8.3M with DEFAULT vs. 4.5M and 8.2M with BEST
on the same test images).
Z_DEFAULT_COMPRESSION, per zlib's documentation, is a good compromise
between speed and size, while Z_BEST_COMPRESSION is extremely slow and
desirable only when trying to squeeze every bit out of the compressed file.
Seems like Z_DEFAULT_COMPRESSION would be a good default option to use by Allegro.","With my 3200x1800 screen, Z_BEST_COMPRESSION meant that saving fullscreen
bitmap into PNG file took 15-20 seconds on my i5-4200U CPU.
With Z_DEFAULT_COMPRESSION it takes 3-5 seconds now and the resulting files
aren't much bigger (4.6M and 8.3M with DEFAULT vs. 4.5M and 8.2M with BEST
on the same test images).
Z_DEFAULT_COMPRESSION, per zlib's documentation, is a good compromise
between speed and size, while Z_BEST_COMPRESSION is extremely slow and
desirable only when trying to squeeze every bit out of the compressed file.
Seems like Z_DEFAULT_COMPRESSION would be a good default option to use by Allegro.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,824,2017-09-21T21:35:38Z,2017-09-27T03:37:39Z,2017-09-27T03:41:41Z,MERGED,True,57,35,5,https://github.com/dos1,image: make compression/quality levels and gamma handling configurable,5,[],https://github.com/liballeg/allegro5/pull/824,https://github.com/elias-pschernig,2,https://github.com/liballeg/allegro5/pull/824#issuecomment-331289726,"With my 3200x1800 screen, Z_BEST_COMPRESSION meant that saving fullscreen
bitmap into PNG file took 15-20 seconds on my i5-4200U CPU.
With Z_DEFAULT_COMPRESSION it takes 3-5 seconds now and the resulting files
aren't much bigger (4.6M and 8.3M with DEFAULT vs. 4.5M and 8.2M with BEST
on the same test images).
Z_DEFAULT_COMPRESSION, per zlib's documentation, is a good compromise
between speed and size, while Z_BEST_COMPRESSION is extremely slow and
desirable only when trying to squeeze every bit out of the compressed file.
Seems like Z_DEFAULT_COMPRESSION would be a good default option to use by Allegro.","Default by default makes sense to me. But can we get a config option? Something like:
[image_addon]
png_compression_level=best",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,824,2017-09-21T21:35:38Z,2017-09-27T03:37:39Z,2017-09-27T03:41:41Z,MERGED,True,57,35,5,https://github.com/dos1,image: make compression/quality levels and gamma handling configurable,5,[],https://github.com/liballeg/allegro5/pull/824,https://github.com/dos1,3,https://github.com/liballeg/allegro5/pull/824#issuecomment-331295783,"With my 3200x1800 screen, Z_BEST_COMPRESSION meant that saving fullscreen
bitmap into PNG file took 15-20 seconds on my i5-4200U CPU.
With Z_DEFAULT_COMPRESSION it takes 3-5 seconds now and the resulting files
aren't much bigger (4.6M and 8.3M with DEFAULT vs. 4.5M and 8.2M with BEST
on the same test images).
Z_DEFAULT_COMPRESSION, per zlib's documentation, is a good compromise
between speed and size, while Z_BEST_COMPRESSION is extremely slow and
desirable only when trying to squeeze every bit out of the compressed file.
Seems like Z_DEFAULT_COMPRESSION would be a good default option to use by Allegro.","Yes, we can!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,824,2017-09-21T21:35:38Z,2017-09-27T03:37:39Z,2017-09-27T03:41:41Z,MERGED,True,57,35,5,https://github.com/dos1,image: make compression/quality levels and gamma handling configurable,5,[],https://github.com/liballeg/allegro5/pull/824,https://github.com/elias-pschernig,4,https://github.com/liballeg/allegro5/pull/824#issuecomment-331296509,"With my 3200x1800 screen, Z_BEST_COMPRESSION meant that saving fullscreen
bitmap into PNG file took 15-20 seconds on my i5-4200U CPU.
With Z_DEFAULT_COMPRESSION it takes 3-5 seconds now and the resulting files
aren't much bigger (4.6M and 8.3M with DEFAULT vs. 4.5M and 8.2M with BEST
on the same test images).
Z_DEFAULT_COMPRESSION, per zlib's documentation, is a good compromise
between speed and size, while Z_BEST_COMPRESSION is extremely slow and
desirable only when trying to squeeze every bit out of the compressed file.
Seems like Z_DEFAULT_COMPRESSION would be a good default option to use by Allegro.",Awesome,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,824,2017-09-21T21:35:38Z,2017-09-27T03:37:39Z,2017-09-27T03:41:41Z,MERGED,True,57,35,5,https://github.com/dos1,image: make compression/quality levels and gamma handling configurable,5,[],https://github.com/liballeg/allegro5/pull/824,https://github.com/dos1,5,https://github.com/liballeg/allegro5/pull/824#issuecomment-331537299,"With my 3200x1800 screen, Z_BEST_COMPRESSION meant that saving fullscreen
bitmap into PNG file took 15-20 seconds on my i5-4200U CPU.
With Z_DEFAULT_COMPRESSION it takes 3-5 seconds now and the resulting files
aren't much bigger (4.6M and 8.3M with DEFAULT vs. 4.5M and 8.2M with BEST
on the same test images).
Z_DEFAULT_COMPRESSION, per zlib's documentation, is a good compromise
between speed and size, while Z_BEST_COMPRESSION is extremely slow and
desirable only when trying to squeeze every bit out of the compressed file.
Seems like Z_DEFAULT_COMPRESSION would be a good default option to use by Allegro.",I went ahead and implemented similar config file entries for PNG gamma handling and JPEG quality setting :),True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,824,2017-09-21T21:35:38Z,2017-09-27T03:37:39Z,2017-09-27T03:41:41Z,MERGED,True,57,35,5,https://github.com/dos1,image: make compression/quality levels and gamma handling configurable,5,[],https://github.com/liballeg/allegro5/pull/824,https://github.com/dos1,6,https://github.com/liballeg/allegro5/pull/824#issuecomment-331538998,"With my 3200x1800 screen, Z_BEST_COMPRESSION meant that saving fullscreen
bitmap into PNG file took 15-20 seconds on my i5-4200U CPU.
With Z_DEFAULT_COMPRESSION it takes 3-5 seconds now and the resulting files
aren't much bigger (4.6M and 8.3M with DEFAULT vs. 4.5M and 8.2M with BEST
on the same test images).
Z_DEFAULT_COMPRESSION, per zlib's documentation, is a good compromise
between speed and size, while Z_BEST_COMPRESSION is extremely slow and
desirable only when trying to squeeze every bit out of the compressed file.
Seems like Z_DEFAULT_COMPRESSION would be a good default option to use by Allegro.",Is there a documentation for allegro5.cfg entries anywhere outside of allegro5.cfg file itself?,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,824,2017-09-21T21:35:38Z,2017-09-27T03:37:39Z,2017-09-27T03:41:41Z,MERGED,True,57,35,5,https://github.com/dos1,image: make compression/quality levels and gamma handling configurable,5,[],https://github.com/liballeg/allegro5/pull/824,https://github.com/beoran,7,https://github.com/liballeg/allegro5/pull/824#issuecomment-331540155,"With my 3200x1800 screen, Z_BEST_COMPRESSION meant that saving fullscreen
bitmap into PNG file took 15-20 seconds on my i5-4200U CPU.
With Z_DEFAULT_COMPRESSION it takes 3-5 seconds now and the resulting files
aren't much bigger (4.6M and 8.3M with DEFAULT vs. 4.5M and 8.2M with BEST
on the same test images).
Z_DEFAULT_COMPRESSION, per zlib's documentation, is a good compromise
between speed and size, while Z_BEST_COMPRESSION is extremely slow and
desirable only when trying to squeeze every bit out of the compressed file.
Seems like Z_DEFAULT_COMPRESSION would be a good default option to use by Allegro.","It hasn't been done consistently, but I feel this should be documented in https://github.com/liballeg/allegro5/blob/master/docs/src/refman/image.txt. Same for your webp pull request by the way.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,824,2017-09-21T21:35:38Z,2017-09-27T03:37:39Z,2017-09-27T03:41:41Z,MERGED,True,57,35,5,https://github.com/dos1,image: make compression/quality levels and gamma handling configurable,5,[],https://github.com/liballeg/allegro5/pull/824,https://github.com/SiegeLord,8,https://github.com/liballeg/allegro5/pull/824#issuecomment-331752137,"With my 3200x1800 screen, Z_BEST_COMPRESSION meant that saving fullscreen
bitmap into PNG file took 15-20 seconds on my i5-4200U CPU.
With Z_DEFAULT_COMPRESSION it takes 3-5 seconds now and the resulting files
aren't much bigger (4.6M and 8.3M with DEFAULT vs. 4.5M and 8.2M with BEST
on the same test images).
Z_DEFAULT_COMPRESSION, per zlib's documentation, is a good compromise
between speed and size, while Z_BEST_COMPRESSION is extremely slow and
desirable only when trying to squeeze every bit out of the compressed file.
Seems like Z_DEFAULT_COMPRESSION would be a good default option to use by Allegro.","The file is documented in http://liballeg.org/a5docs/trunk/system.html#al_get_system_config, but that's not very discoverable. It seems okay to mention this inside the image addon's documentation, as beoran suggests.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,824,2017-09-21T21:35:38Z,2017-09-27T03:37:39Z,2017-09-27T03:41:41Z,MERGED,True,57,35,5,https://github.com/dos1,image: make compression/quality levels and gamma handling configurable,5,[],https://github.com/liballeg/allegro5/pull/824,https://github.com/dos1,9,https://github.com/liballeg/allegro5/pull/824#issuecomment-331828786,"With my 3200x1800 screen, Z_BEST_COMPRESSION meant that saving fullscreen
bitmap into PNG file took 15-20 seconds on my i5-4200U CPU.
With Z_DEFAULT_COMPRESSION it takes 3-5 seconds now and the resulting files
aren't much bigger (4.6M and 8.3M with DEFAULT vs. 4.5M and 8.2M with BEST
on the same test images).
Z_DEFAULT_COMPRESSION, per zlib's documentation, is a good compromise
between speed and size, while Z_BEST_COMPRESSION is extremely slow and
desirable only when trying to squeeze every bit out of the compressed file.
Seems like Z_DEFAULT_COMPRESSION would be a good default option to use by Allegro.",Updated!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,824,2017-09-21T21:35:38Z,2017-09-27T03:37:39Z,2017-09-27T03:41:41Z,MERGED,True,57,35,5,https://github.com/dos1,image: make compression/quality levels and gamma handling configurable,5,[],https://github.com/liballeg/allegro5/pull/824,https://github.com/SiegeLord,10,https://github.com/liballeg/allegro5/pull/824#issuecomment-332399714,"With my 3200x1800 screen, Z_BEST_COMPRESSION meant that saving fullscreen
bitmap into PNG file took 15-20 seconds on my i5-4200U CPU.
With Z_DEFAULT_COMPRESSION it takes 3-5 seconds now and the resulting files
aren't much bigger (4.6M and 8.3M with DEFAULT vs. 4.5M and 8.2M with BEST
on the same test images).
Z_DEFAULT_COMPRESSION, per zlib's documentation, is a good compromise
between speed and size, while Z_BEST_COMPRESSION is extremely slow and
desirable only when trying to squeeze every bit out of the compressed file.
Seems like Z_DEFAULT_COMPRESSION would be a good default option to use by Allegro.","Merged, thanks for this!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,824,2017-09-21T21:35:38Z,2017-09-27T03:37:39Z,2017-09-27T03:41:41Z,MERGED,True,57,35,5,https://github.com/dos1,image: make compression/quality levels and gamma handling configurable,5,[],https://github.com/liballeg/allegro5/pull/824,https://github.com/fatcerberus,11,https://github.com/liballeg/allegro5/pull/824#issuecomment-332400103,"With my 3200x1800 screen, Z_BEST_COMPRESSION meant that saving fullscreen
bitmap into PNG file took 15-20 seconds on my i5-4200U CPU.
With Z_DEFAULT_COMPRESSION it takes 3-5 seconds now and the resulting files
aren't much bigger (4.6M and 8.3M with DEFAULT vs. 4.5M and 8.2M with BEST
on the same test images).
Z_DEFAULT_COMPRESSION, per zlib's documentation, is a good compromise
between speed and size, while Z_BEST_COMPRESSION is extremely slow and
desirable only when trying to squeeze every bit out of the compressed file.
Seems like Z_DEFAULT_COMPRESSION would be a good default option to use by Allegro.","This is nice, it will make my screenshot saving faster :)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,825,2017-09-21T23:14:42Z,2017-09-27T03:39:41Z,2017-09-27T03:39:41Z,CLOSED,False,184,2,3,https://github.com/dos1,fix SDL platform build,1,[],https://github.com/liballeg/allegro5/pull/825,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/825,"It's useful for testing GLES stuff on PC or checking the feasibility of porting Allegro into platforms without GLX. Although it's visibly experimental, it enabled me to experiment (hehe) a lot, so I thought that making it working out of box might be a good thing.","It's useful for testing GLES stuff on PC or checking the feasibility of porting Allegro into platforms without GLX. Although it's visibly experimental, it enabled me to experiment (hehe) a lot, so I thought that making it working out of box might be a good thing.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,825,2017-09-21T23:14:42Z,2017-09-27T03:39:41Z,2017-09-27T03:39:41Z,CLOSED,False,184,2,3,https://github.com/dos1,fix SDL platform build,1,[],https://github.com/liballeg/allegro5/pull/825,https://github.com/beoran,2,https://github.com/liballeg/allegro5/pull/825#issuecomment-331539078,"It's useful for testing GLES stuff on PC or checking the feasibility of porting Allegro into platforms without GLX. Although it's visibly experimental, it enabled me to experiment (hehe) a lot, so I thought that making it working out of box might be a good thing.","Well, a better FindSdl2 seems really useful. Thanks for your efforts.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,825,2017-09-21T23:14:42Z,2017-09-27T03:39:41Z,2017-09-27T03:39:41Z,CLOSED,False,184,2,3,https://github.com/dos1,fix SDL platform build,1,[],https://github.com/liballeg/allegro5/pull/825,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/825#issuecomment-331752303,"It's useful for testing GLES stuff on PC or checking the feasibility of porting Allegro into platforms without GLX. Although it's visibly experimental, it enabled me to experiment (hehe) a lot, so I thought that making it working out of box might be a good thing.",What's the source of that FindSDL2.cmake file? Are we allowed to just copy it in?,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,825,2017-09-21T23:14:42Z,2017-09-27T03:39:41Z,2017-09-27T03:39:41Z,CLOSED,False,184,2,3,https://github.com/dos1,fix SDL platform build,1,[],https://github.com/liballeg/allegro5/pull/825,https://github.com/dos1,4,https://github.com/liballeg/allegro5/pull/825#issuecomment-331816160,"It's useful for testing GLES stuff on PC or checking the feasibility of porting Allegro into platforms without GLX. Although it's visibly experimental, it enabled me to experiment (hehe) a lot, so I thought that making it working out of box might be a good thing.","I have tracked it down to https://github.com/Kitware/VTK/blob/master/CMake/FindSDL2.cmake , which asked to substitute the short license info with full license text when distributing outside of cmake or other Kitware projects, which I did.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,825,2017-09-21T23:14:42Z,2017-09-27T03:39:41Z,2017-09-27T03:39:41Z,CLOSED,False,184,2,3,https://github.com/dos1,fix SDL platform build,1,[],https://github.com/liballeg/allegro5/pull/825,https://github.com/SiegeLord,5,https://github.com/liballeg/allegro5/pull/825#issuecomment-332399892,"It's useful for testing GLES stuff on PC or checking the feasibility of porting Allegro into platforms without GLX. Although it's visibly experimental, it enabled me to experiment (hehe) a lot, so I thought that making it working out of box might be a good thing.","Merged as 044a918, thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/826,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.","Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/beoran,2,https://github.com/liballeg/allegro5/pull/826#issuecomment-331537361,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.","I am glad to hear you are taking on this cleanup, because we will need opengl es for Wayland support on Linux. Still, keep in mind that most platform specific hacks are probably there for a reason...",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/dos1,3,https://github.com/liballeg/allegro5/pull/826#issuecomment-331626691,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.","Yeah, I tried not to touch platform specific hacks and just replace the ifdefs only if they looked GLES specific instead of device specific. After all, I made it by trying to compile Allegro on regular Linux with GLES and no GL. Still, I might have made some mistakes, especially with iPhone support, so any help is appreciated.
However, it shouldn't really be needed for Wayland support. With Wayland you need to use EGL to get the context, but you can obtain regular GL context that way too. In the future I'd love to see Allegro supporting X11/EGL with GLES (and Wayland with both GL and GLES), especially as there are more and more GNU/Linux-based GLES capable platforms without X11, GLX or both, but that's a different story :)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/beoran,4,https://github.com/liballeg/allegro5/pull/826#issuecomment-332430488,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.","Now, on Linux /Raspberry, the graphics driver is statically compiled in. I think in the long run we should  move to dynamic graphic drivers, like on Windows, where you can use configuration settings or display flags to select the driver.
But for this PR, I think it seems OK the way it is for now.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/dos1,5,https://github.com/liballeg/allegro5/pull/826#issuecomment-332947337,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.","Yeah, that would be the best, especially for Android, where now you need to compile with GLES3 support to get multisampled render buffers support and by doing that you're making the build incompatible with devices with just GLES2.
Anyway, this patch is definitely incomplete, as I've just tried to build it on Raspberry Pi with new, open drivers (so without ALLEGRO_RASPBERRYPI) and while it works with OpenGL, it doesn't with GLES2 - first it fails on lack of GLES1 support in open drivers, then it errors out on some symbol redefinitions from GL headers included by GLX headers. So basically, it's still a huge mess :P",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/dos1,6,https://github.com/liballeg/allegro5/pull/826#issuecomment-336636596,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.","Rebased and reworked even more. Still WIP though.
I think I'm kinda happy with the build system now. GL_BUILD_TYPE cmake variable defines which kind of OpenGL API we target - it can be ""auto"", ""gl"", ""gles1"" or ""gles2+"". Rationale: until Allegro switches to 100% dynamic dispatch for GL libs, it cannot link to multiple GL APIs at the same time, because of overlapping symbols. We were lucky that Allegro worked on most Android phones so far, as what it was doing was pretty much undefined behavior (and it actually breaks some GLES platforms, like Nokia N900).
""auto"" tries to automatically determine what APIs are available, tries and fallbacks them in this order: ""gl"", ""gles2+"", ""gles1"" (on Android, iOS and Raspberry Pi with Broadcom drivers it skips ""gl"").
If the user specifies API manually, no fallback is made.
Default value of GL_BUILD_TYPE is ""auto"".
I have left WANT_GLES3 variable, which works now only when GL_BUILD_TYPE is set to ""gles2+"". GLES3 is backwards compatible with GLES2, and GLES3 is only used to provide multisampling on Android. There is no reason for making the Allegro build non-backwards compatible, so the static dispatch of GLES3 function should be replaced with dynamic dispatch and runtime feature testing - so there will be no need for GLES3 specific build at all. I haven't worked on it yet though.
Thanks to this second commit I've finally managed to run Allegro with GLES 2.0 context on PC! \o/
Status as for right now (""works"" means just ""I've successfully launched some game with it"" :P):

X11/GL: works, tests pass
X11/GLES1: does not build[1]
X11/GLES2+: works, test_driver segfaults (will check it later)
SDL/GL: works, tests pass
SDL/GLES1: does not build[1]
SDL/GLES2+: does not build[2]
Android: untested yet, will do later
Raspberry Pi: untested yet, will do later
iOS: untested, won't do later, please help :(

macOS and Windows: don't care for now. I won't work on GLES support for those platforms (is there any need for it there anyway?), so ""nothing broke"" is the only metric I'll check at the end :D
TODO:

use libOpenGL+libGLX instead of libGL when possible
fail configuring when libGLX is not found on X11/GLES builds
X11/EGL support (as opposed to X11/GLX)

[1] Allegro uses static dispatch for some extension functions, that Mesa has stopped exporting in 2014: https://cgit.freedesktop.org/mesa/mesa/commit/?id=1a59f9a131318e1239b47b9ea4fe7c84f461cf37 It might still work on some mobile proprietary implementations, but it should be switched to dynamic dispatch anyway.
[2] Some header mumbo-jumbo, will look at it later.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/dos1,7,https://github.com/liballeg/allegro5/pull/826#issuecomment-336676363,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.","test_driver segfaults with GLES because it tries to lock the bitmap with ALLEGRO_PIXEL_FORMAT_RGBA_8888 format, which is apparently not supported? (glReadPixels for format RGBA_8888 failed (GL_INVALID_OPERATION)). Changing the al_lock_bitmap call to use ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE fixes it, but I guess it needs to be actually fixed in Allegro's locking/converting code, as GLES's glReadPixels does not support converting to variety of formats like its GL counterpart does.
All tests pass \o/ except most of the S3TC ones and ""test texture rw f32 ABGR_F32"". Could somebody confirm that it's actually related to GLES capabilities and not some bug? (seems like it needs OES_texture_float extension and it doesn't actually guarantee any support for rendering into such texture with FBOs)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/beoran,8,https://github.com/liballeg/allegro5/pull/826#issuecomment-336677104,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.","Normally all tests should pass if your hardware supports them. The texture
compression isn't widely supported on Linux so it's reasonable for that to
fail.
…
On 15 Oct 2017 02:10, ""Sebastian Krzyszkowiak"" ***@***.***> wrote:
 test_driver segfaults with GLES because it tries to lock the bitmap with
 ALLEGRO_PIXEL_FORMAT_RGBA_8888 format, which is not supported. Changing the
 al_lock_bitmap call to use ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE fixes it,
 but I guess it needs to be actually fixed in Allegro's locking code.

 All tests pass \o/ except S3TC ones and ""test texture rw f32 ABGR_F32"".
 Could somebody confirm that it's actually related to GLES capabilities and
 not some bug?

 —
 You are receiving this because you commented.
 Reply to this email directly, view it on GitHub
 <#826 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/AAEWeaChPWTvKDZ2kJSkuX1Cy1fLMBdxks5ssU2NgaJpZM4PgD30>
 .",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/dos1,9,https://github.com/liballeg/allegro5/pull/826#issuecomment-336677437,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.","I mean, in GLES. It might be reasonable for them to fail, but definitely not for the reason you citied, as they all pass with desktop GL on the same PC :)
But it seems like floating point textures are not available in GLES, and OES_texture_float extension provides only some partial support, so it is possible that this test is simply meant to fail on GLES. Haven't checked S3TC yet, but it might be similar.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/dos1,10,https://github.com/liballeg/allegro5/pull/826#issuecomment-337083584,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.","Did some fixes and more tests, current status:

X11/GL: works, tests pass
X11/GLES1: does not build
X11/GLES2+[1]: works, test_driver needs format change
SDL/GL: works, tests pass
SDL/GLES1: does not build
SDL/GLES2+: builds, but does not work yet
Raspberry Pi/GLES2: works, now on Raspbian Stretch as well (master doesn't :D)
Android: untested yet, will do later
iOS: untested, won't do later, please help :(

[1] Requires CMake 3.10's FindOpenGL to correctly pick up GLVND libraries; can be passed manually as well though.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/ptitSeb,11,https://github.com/liballeg/allegro5/pull/826#issuecomment-337125881,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.","GLES Hardware usually doesn't support S3TC texture compression, nor Float Texture. So it seems normal the test fails.",True,{'THUMBS_UP': ['https://github.com/dos1']}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/beoran,12,https://github.com/liballeg/allegro5/pull/826#issuecomment-337234997,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.","I also don't have an iOS device, but please keep up the good work.
Also, I read this:
https://stackoverflow.com/questions/3326641/opengl-without-x-org-in-linux
I'd love to see this work with EGL, also on the Linux desktop. This would simplify a future Wayland port.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/SiegeLord,13,https://github.com/liballeg/allegro5/pull/826#issuecomment-337261949,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.","This is shaping up to be super impressive work! Don't worry about iOS/OSX, I can help with that (once I find time :D).",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/dos1,14,https://github.com/liballeg/allegro5/pull/826#issuecomment-337432949,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.","Thanks :D I've just tested Android (with GLES2) and seems to work fine \o/
So what's left:

misbehaving SDL/GLES2 build to investigate
fixing GLES1 builds (and potentially refactoring GLES3 at the same time)
fixing test_driver's locking format incompatibility

And that actually would be it for this PR. Then it will be time for a new one with X11/EGL :)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/dos1,15,https://github.com/liballeg/allegro5/pull/826#issuecomment-337766954,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.",Fixed both SDL/GLES2 build (turned out to be mismatch of SDL's renderer and used GL context) and the issue with test_driver (some GLES locking functions lacked format conversion). So only GLES1 is missing now \o/,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/dos1,16,https://github.com/liballeg/allegro5/pull/826#issuecomment-359062492,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.","I'm not sure what to do with this PR now. Seems like the only thing missing is fixing extension calls in GLES 1.1 - they need to be dynamically dispatched at runtime, because conforming implementations should not export symbols for extension to link-time lookup (and Mesa's does not). However, I've tried looking at Allegro's GL extension handling and... I'm not exactly sure how to utilize it properly when it comes to GLES without making a huge mess, and TBH, I don't have so much time to get myself deep into this code, and I suspect it would need to be significantly reworked anyway (or replaced by existing solution, like libepoxy) for dynamic dispatch support for OpenGL on Linux in general (so GL and GLES could be supported by the same build).
Anyway, GLES 1.1 was already broken before this PR. Now it's very close to get unbroken, so if anyone familiar with all this GL dispatch code in Allegro want to jump in and fix it, that would be nice :) Otherwise, GLES 1.1 stays broken for now and I would consider this PR done (sans review/testing, of course).",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/SiegeLord,17,https://github.com/liballeg/allegro5/pull/826#issuecomment-360382800,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.",The plan is to prioritize this after 5.2.4. Sorry for not following up on this yet!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/beoran,18,https://github.com/liballeg/allegro5/pull/826#issuecomment-360384302,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.","I would like to repeat here that refactoring GLES will be essential for
supporting Wayland. Wayland has become the default display server on
Ubuntu, but we still don't support it. I tried to write a driver before but
I had problems with the current way GLES is used in Allegro5. Once this
patch is accepted I would like to revisit Wayland again.
…
On 25 Jan 2018 8:24 a.m., ""SiegeLord"" ***@***.***> wrote:
 The plan is to prioritize this after 5.2.4. Sorry for not following up on
 this yet!

 —
 You are receiving this because you commented.
 Reply to this email directly, view it on GitHub
 <#826 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/AAEWeaTmXNjvwyykg3SvBmNkaMAXvBr6ks5tOCwfgaJpZM4PgD30>
 .",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/SiegeLord,19,https://github.com/liballeg/allegro5/pull/826#issuecomment-390519666,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.","Hey @dos1, are you still interested in pursuing this? I've got time to invest into getting this working. I've read through it and it looks pretty good. One thing that would make it better on the surface would be to intruduce a ALLEGRO_OPENGL_FIXED_FUNCTION or something, to be used whenever you have ifndef GLES2.
I am not sure what to do with GLES1, is that something we need to support? That's beyond the scope of this change, however, as you say.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/dos1,20,https://github.com/liballeg/allegro5/pull/826#issuecomment-392288983,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.","Yup! As the amount of spare time allows, of course, but I'd still want to have this finished up.
Personally I'm not really interested in any fixed function support, so I wouldn't mind seeing it go away, let alone just GLES1 - I just wanted to not break anything with this refactor and potentially maybe even fix some stuff. GLES1, at least on Mesa, turned out to need some more changes to unbreak, so I simply gave up for now :)
IMO there are two sensible options for long term regarding GLES1:

remove all fixed function codepaths, cleaning up a lot of obsolete code; will probably break some games though, so I'm not sure if this would be acceptable at all
rework GL linking to be dynamic, adding ability to support both GL and GLES with one binary just like SDL does, which, as an added bonus, should also fix GLES1 for free

...or both :D
Second option will bring other advantages as well, so if we keep fixed function stuff around, we might keep GLES1 as well, because why not. I'm interested in running Allegro on Nokia N900, it's not hard for me to imagine there's someone out there who would like it to run on something pre-GLES2 ¯\(ツ)/¯",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/dos1,21,https://github.com/liballeg/allegro5/pull/826#issuecomment-395125859,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.","Just a note: Newer versions of cmake have improved GLVND detection in OpenGL packages. Something potentially worth looking into here.
CMake Warning (dev) at /usr/share/cmake-3.11/Modules/FindOpenGL.cmake:270 (message):
  Policy CMP0072 is not set: FindOpenGL prefers GLVND by default when
  available.  Run ""cmake --help-policy CMP0072"" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  FindOpenGL found both a legacy GL library:

    OPENGL_gl_LIBRARY: /usr/lib/libGL.so

  and GLVND libraries for OpenGL and GLX:

    OPENGL_opengl_LIBRARY: /usr/lib/libOpenGL.so
    OPENGL_glx_LIBRARY: /usr/lib/libGLX.so

  OpenGL_GL_PREFERENCE has not been set to ""GLVND"" or ""LEGACY"", so for
  compatibility with CMake 3.10 and below the legacy GL library will be used.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/dos1,22,https://github.com/liballeg/allegro5/pull/826#issuecomment-433264310,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.","I'm successfully using this branch now with SDL2 backend on X11/EGL-only Nokia N900 \o/ Now I'm likely going to use it for the Librem 5, so I'd like to try to push this thing a bit forward.
So, there's a ALLEGRO_OPENGL_FIXED_FUNCTION suggestion and the GLVND thing in CMake to look at. Anything else?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/SiegeLord,23,https://github.com/liballeg/allegro5/pull/826#issuecomment-433565706,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.","Yep, just those two things on your end. On our end, we'll test things out on iOS and at least some Android devices.",True,{'THUMBS_UP': ['https://github.com/dos1']}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/dos1,24,https://github.com/liballeg/allegro5/pull/826#issuecomment-433581823,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.",Note to self: make sure the CMake configuration process properly bails off when the GL deps aren't found.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/dos1,25,https://github.com/liballeg/allegro5/pull/826#issuecomment-434450733,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.","There's one more thing - the GLES2/X11 build doesn't compile under 32-bit platforms, as it includes both GL and GLES2 headers, which doesn't work on on 32-bit x86 nor arm (interestingly, it works fine on both amd64 and aarch64). GL headers get included via GLX ones. I'll have to look around if this can actually be fixed without using EGL instead of GLX there :x
Regular GL build should be unaffected though.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/dos1,26,https://github.com/liballeg/allegro5/pull/826#issuecomment-440447481,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.","OK, I've updated and rebased the branch. I looked around and it seems there's no way to support GLES via GLX on Mesa with 32-bit platforms, so I think it's all done :)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/SiegeLord,27,https://github.com/liballeg/allegro5/pull/826#issuecomment-445501332,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.","I'm now focusing on getting this merged. I've started by testing this on Android, and noticed that many examples ceased to output anything. The examples that ceased to work were those that were not using the programmable pipeline (e.g. ex_draw_bitmap). Is it understandable how that works? Were we using some weird poorly supported drawing path, and this change fixes it by disabling it (now requiring the examples to use the programmable pipeline to work?). I'm probably fine with that, but just want to make sure I understand what happened.
Also, along the same lines, I notice in xdisplay.c you're setting the programmable pipeline flag when ALLEGRO_CFG_OPENGLES2 is defined. How does that work? Is this what you meant when you said at some point that Allegro needs make the GL vs GLES choice at compile time? I.e. we can't compile with GL and GLES at the same time?
If that's the case, should we be setting the PROGRAMMABLE_PIPELINE on Android/iOS too?
Meanwhile, I'll test things on OSX/iOS as well.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/dos1,28,https://github.com/liballeg/allegro5/pull/826#issuecomment-445561503,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.","Ah, right. My engine always sets PROGRAMMABLE_PIPELINE, so it worked for me on Android :)
Basically, desktop GL still contains backwards compatibility with old fixed function pipeline, while GLES2+ does not. Furthermore, with most drivers out there, we cannot link to GLES1 (fixed only) and GLES2 (pipeline only) at the same time, so the only way to get both supported by a single binary would be to use dlopen & dlsym, which Allegro doesn't do right now (I've seen some old code under an always false ifdefs for it though, but probably not for Android anyway). Therefore, a GLES2+ build (which is what you always get on Android as GLES1 is broken right now) has to always use the programmable pipeline, so yes, it should be set on Android just like what I've added to xdisplay as well. Let me fix that.
BTW. There's no GLES on Windows and macOS without jumping through some hops, am I right?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/SiegeLord,29,https://github.com/liballeg/allegro5/pull/826#issuecomment-445563511,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.","So you're saying that before this chance, we're using GLES1 for Android somehow? I'm just confused how the examples currently work on Android without using programmable pipeline.
And sure, I wouldn't worry about GLES for Windows and macOS.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/dos1,30,https://github.com/liballeg/allegro5/pull/826#issuecomment-445564938,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.","Nah, I've just generalized some code in this rework and now it expects this flag to be correctly set on GLES, which wasn't the case before.
Pushed a fix.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/SiegeLord,31,https://github.com/liballeg/allegro5/pull/826#issuecomment-447601445,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.","I tried it out on iOS (on a simulator), and had to make a few changes to get things to compile:
SiegeLord@8987c80
First, it appeared that some of the OES APIs are actually present without the suffix in GLES2, I suppose that makes sense. Then, glFramebufferTexture2DMultisampleEXT doesn't appear to exist on iOS at all. The old code explicitly excluded iOS there, so I restore that condition.
For CMake, for iOS GLES is inside a framework, so there's no include dir to be set, a minor change. I also disabled even looking for GLES, so as to remove the confusing GLES2 not found messages. I tested things a little bit, and it appeared to work.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/SiegeLord,32,https://github.com/liballeg/allegro5/pull/826#issuecomment-447747543,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.","Worked a little more on the Android issue: it turns out we were just setting the ALLEGRO_PROGRAMMABLE_PIPELINE too late, if we set it earlier then programs that don't set ALLEGRO_PROGRAMMABLE_PIPELINE will work okay on Android (but will set that flag correctly under the hood).
I'll want to check over other instances of this, in case it matters there as well.
I'm collecting these changes in this branch: https://github.com/SiegeLord/allegro5/tree/fixes_for_dos1",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/SiegeLord,33,https://github.com/liballeg/allegro5/pull/826#issuecomment-452189633,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.","Alright, I tested this some more on Raspberry Pi, and while I couldn't get gles2+ working, you said you did so it's likely some misconfiguration on my part. The toolchain.cmake approach still compiles fine, and that's all that I've ever seen, so it sounds good to me.
Elias tested his game against this and it appeared to work as well, so I think I'm happy to merge this and we'll work out the bugs as they come. Thanks a lot @dos1, sorry it took such a long time but I truly appreciate your hard work on this.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,826,2017-09-21T23:54:51Z,2019-01-08T06:26:55Z,2019-01-08T16:36:29Z,MERGED,True,403,153,27,https://github.com/dos1,Rework GLES support for portability,15,[],https://github.com/liballeg/allegro5/pull/826,https://github.com/dos1,34,https://github.com/liballeg/allegro5/pull/826#issuecomment-452364760,"Note: This pull request is mostly for review purposes, probably shouldn't be merged in just yet.
Recently I've started looking into the possibilities of porting Allegro (and, in turn, my game engine) to various platforms. I've found @ptitSeb fork with OpenPandora and ODroid support, @allefant's patches for Emscripten and also started playing with Nokia N900 support by myself. SDL backend allowed me to experiment with X11/EGL without actually implementing it in Allegro itself just yet, so I could focus on the GLES stuff alone.
What I found was a huge mess of #ifdefs. If I wanted to consolidate all the patches I found into one codebase, I would end up with lines like:
#if defined ALLEGRO_IPHONE || defined ALLEGRO_ANDROID || defined ALLEGRO_RASPBERRYPI || defined ALLEGRO_PANDORA || defined __EMSCRIPTEN__
so before I went further, I decided to clean it all up and make parts that are actually GLES specific (as opposed to device specific) check for GLES instead of any particular device.
In turn I've found out some other issues. For instance, on some platforms linking both libGLESv1_CM and libGLESv2 into the same binary breaks GLES2. Also, it wasn't actually easily possible to request a GLES build on a device that wasn't Android-based, iOS-based or Raspberry Pi. In turn, I've reworked the build system a bit.
When it comes to the code, I've tested it so far on GNU/Linux on X11/GLX/GL, SDL/GLX/GL, SDL/EGL/GLES and Android. It still needs to be tested on other platforms - I should be able to do it for macOS and Raspberry Pi, but I can't for iOS, so that would need some external testing. I think it should be fairly solid, aside of iOS-case, where I have no idea, so I might have broken something there.
Compiling with GLES3 is broken right now with this patch, I'll look into it later. Compiling with GLES1 was already broken (and impossible without modifying CMakeFiles.txt), but I've seen some patches floating somethere that should fix it, just haven't looked into them yet.
When it comes to the build system, I'm not sure whether the way I've taken is the best one. Especially I don't like that WANT_GLES2 requires WANT_GLES, which alone means GLES 1.1, and together means GLES 2.0, which are completely different builds (GLES3 could stay that way though). I'd be thankful for any comments on how to tackle it.","Yay! :)
I'm going to play with Raspberry Pi in the next few days, so I'll recheck everything. Keep in mind that regular GLES2+ on Raspberry Pi needs enabling Mesa drivers - you can't make a build for Pi that works on both drivers yet... I'd eventually want to see Allegro using dynamic linking and having multiple system backends in one binary for other reasons as well (like Wayland), so it's definitely worth looking into in the future.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,827,2017-09-22T18:42:27Z,2017-10-01T02:14:04Z,2017-10-01T02:14:19Z,MERGED,True,316,2,13,https://github.com/dos1,image: add WebP support with libwebp,1,[],https://github.com/liballeg/allegro5/pull/827,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/827,"WebP is a VP8-based image format by Google. It supports both lossy and lossless encoding schemes and allows for alpha channel with both of them.
Also, lossless compression usually gives much smaller file sizes when compared to PNG.
I think supporting a image codec that can work as ""JPEG with alpha"" can be pretty useful for game development :)","WebP is a VP8-based image format by Google. It supports both lossy and lossless encoding schemes and allows for alpha channel with both of them.
Also, lossless compression usually gives much smaller file sizes when compared to PNG.
I think supporting a image codec that can work as ""JPEG with alpha"" can be pretty useful for game development :)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,827,2017-09-22T18:42:27Z,2017-10-01T02:14:04Z,2017-10-01T02:14:19Z,MERGED,True,316,2,13,https://github.com/dos1,image: add WebP support with libwebp,1,[],https://github.com/liballeg/allegro5/pull/827,https://github.com/dos1,2,https://github.com/liballeg/allegro5/pull/827#issuecomment-331828948,"WebP is a VP8-based image format by Google. It supports both lossy and lossless encoding schemes and allows for alpha channel with both of them.
Also, lossless compression usually gives much smaller file sizes when compared to PNG.
I think supporting a image codec that can work as ""JPEG with alpha"" can be pretty useful for game development :)","Updated!
Docs are handled by #824 already.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,827,2017-09-22T18:42:27Z,2017-10-01T02:14:04Z,2017-10-01T02:14:19Z,MERGED,True,316,2,13,https://github.com/dos1,image: add WebP support with libwebp,1,[],https://github.com/liballeg/allegro5/pull/827,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/827#issuecomment-333012857,"WebP is a VP8-based image format by Google. It supports both lossy and lossless encoding schemes and allows for alpha channel with both of them.
Also, lossless compression usually gives much smaller file sizes when compared to PNG.
I think supporting a image codec that can work as ""JPEG with alpha"" can be pretty useful for game development :)","This doesn't link for me on Ubuntu:
../lib/liballegro_image.so.5.2.3: undefined reference to `WebPFree'

This is using Ubuntu's libwebp, version 0.4.4 (as far as I can tell). Could you also add a line to install this for our CI script? It's on line 16, in the .travis.yml file. Add a libwebp-dev there.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,827,2017-09-22T18:42:27Z,2017-10-01T02:14:04Z,2017-10-01T02:14:19Z,MERGED,True,316,2,13,https://github.com/dos1,image: add WebP support with libwebp,1,[],https://github.com/liballeg/allegro5/pull/827,https://github.com/dos1,4,https://github.com/liballeg/allegro5/pull/827#issuecomment-333102441,"WebP is a VP8-based image format by Google. It supports both lossy and lossless encoding schemes and allows for alpha channel with both of them.
Also, lossless compression usually gives much smaller file sizes when compared to PNG.
I think supporting a image codec that can work as ""JPEG with alpha"" can be pretty useful for game development :)","Looks like WebPFree has been added in 0.5.0 - webmproject/libwebp@822f113 - to simplify bindings to managed languages.
However, it does nothing aside of calling free(), so I've replaced it with free call.
Travis config updated. Also, added tests :)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,827,2017-09-22T18:42:27Z,2017-10-01T02:14:04Z,2017-10-01T02:14:19Z,MERGED,True,316,2,13,https://github.com/dos1,image: add WebP support with libwebp,1,[],https://github.com/liballeg/allegro5/pull/827,https://github.com/fatcerberus,5,https://github.com/liballeg/allegro5/pull/827#issuecomment-333121459,"WebP is a VP8-based image format by Google. It supports both lossy and lossless encoding schemes and allows for alpha channel with both of them.
Also, lossless compression usually gives much smaller file sizes when compared to PNG.
I think supporting a image codec that can work as ""JPEG with alpha"" can be pretty useful for game development :)","Hmm... in the future the function could end up doing more than just calling free(), so it would probably be better to do a version check using the preprocessor and always call WebPFree() in versions where it’s available.  Assuming that’s possible at least...",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,827,2017-09-22T18:42:27Z,2017-10-01T02:14:04Z,2017-10-01T02:14:19Z,MERGED,True,316,2,13,https://github.com/dos1,image: add WebP support with libwebp,1,[],https://github.com/liballeg/allegro5/pull/827,https://github.com/dos1,6,https://github.com/liballeg/allegro5/pull/827#issuecomment-333122871,"WebP is a VP8-based image format by Google. It supports both lossy and lossless encoding schemes and allows for alpha channel with both of them.
Also, lossless compression usually gives much smaller file sizes when compared to PNG.
I think supporting a image codec that can work as ""JPEG with alpha"" can be pretty useful for game development :)","That's what I wanted to do at the beginning, but then I found out that the reason why they introduced it was just for .NET bindings to be simpler.
Anyway, for the peace of mind, I've added the check :)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,827,2017-09-22T18:42:27Z,2017-10-01T02:14:04Z,2017-10-01T02:14:19Z,MERGED,True,316,2,13,https://github.com/dos1,image: add WebP support with libwebp,1,[],https://github.com/liballeg/allegro5/pull/827,https://github.com/SiegeLord,7,https://github.com/liballeg/allegro5/pull/827#issuecomment-333348442,"WebP is a VP8-based image format by Google. It supports both lossy and lossless encoding schemes and allows for alpha channel with both of them.
Also, lossless compression usually gives much smaller file sizes when compared to PNG.
I think supporting a image codec that can work as ""JPEG with alpha"" can be pretty useful for game development :)","Alright, merged! Thanks a lot!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,828,2017-09-25T08:55:30Z,2017-09-27T03:45:03Z,2017-09-27T03:45:03Z,CLOSED,False,8,0,2,https://github.com/dos1,allegro5.cfg: fix incorrect config file name referenced in the comments,1,[],https://github.com/liballeg/allegro5/pull/828,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/828,I've got burned by this once or twice already :P,I've got burned by this once or twice already :P,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,828,2017-09-25T08:55:30Z,2017-09-27T03:45:03Z,2017-09-27T03:45:03Z,CLOSED,False,8,0,2,https://github.com/dos1,allegro5.cfg: fix incorrect config file name referenced in the comments,1,[],https://github.com/liballeg/allegro5/pull/828,https://github.com/elias-pschernig,2,https://github.com/liballeg/allegro5/pull/828#issuecomment-332081589,I've got burned by this once or twice already :P,"Ha! How did you find that out? Anyway, problem with your ""fix"" is that the documentation is actually correct, but there is a typo in the code. I.e. the file was named ~/.allegrorc in Allegro 4 and was meant to keep the leading dot with Allegro 5: ~/.allegro5rc (just like for example ~/.bashrc or ~/.vimrc or any ancient unix programs).",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,828,2017-09-25T08:55:30Z,2017-09-27T03:45:03Z,2017-09-27T03:45:03Z,CLOSED,False,8,0,2,https://github.com/dos1,allegro5.cfg: fix incorrect config file name referenced in the comments,1,[],https://github.com/liballeg/allegro5/pull/828,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/828#issuecomment-332081715,I've got burned by this once or twice already :P,"Let's just support both, since maybe there's some person relying on this.",True,"{'THUMBS_UP': ['https://github.com/elias-pschernig', 'https://github.com/dos1']}"
liballeg/allegro5,https://github.com/liballeg/allegro5,828,2017-09-25T08:55:30Z,2017-09-27T03:45:03Z,2017-09-27T03:45:03Z,CLOSED,False,8,0,2,https://github.com/dos1,allegro5.cfg: fix incorrect config file name referenced in the comments,1,[],https://github.com/liballeg/allegro5/pull/828,https://github.com/dos1,4,https://github.com/liballeg/allegro5/pull/828#issuecomment-332134212,I've got burned by this once or twice already :P,"Haha. I found it out by wondering why my .allegro5rc file wasn't taken into effect. I've checked and turned out both documentation and the code says ""allegro5rc"" while the comments in the config file itself say "".allegro5rc"". Yes, the version with dot is what I'd expect, I'll modify this PR :)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,828,2017-09-25T08:55:30Z,2017-09-27T03:45:03Z,2017-09-27T03:45:03Z,CLOSED,False,8,0,2,https://github.com/dos1,allegro5.cfg: fix incorrect config file name referenced in the comments,1,[],https://github.com/liballeg/allegro5/pull/828,https://github.com/dos1,5,https://github.com/liballeg/allegro5/pull/828#issuecomment-332350326,I've got burned by this once or twice already :P,Updated!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,828,2017-09-25T08:55:30Z,2017-09-27T03:45:03Z,2017-09-27T03:45:03Z,CLOSED,False,8,0,2,https://github.com/dos1,allegro5.cfg: fix incorrect config file name referenced in the comments,1,[],https://github.com/liballeg/allegro5/pull/828,https://github.com/SiegeLord,6,https://github.com/liballeg/allegro5/pull/828#issuecomment-332400499,I've got burned by this once or twice already :P,"Merged as dd285c8, thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,829,2017-09-25T11:06:46Z,2017-09-27T03:41:58Z,2017-09-27T03:41:58Z,CLOSED,False,2,0,1,https://github.com/dos1,docs: audio: note that callback set by al_set_mixer_postprocess_callback runs in separate thread,1,[],https://github.com/liballeg/allegro5/pull/829,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/829,Another thing that has already bitten me in the past :D,Another thing that has already bitten me in the past :D,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,829,2017-09-25T11:06:46Z,2017-09-27T03:41:58Z,2017-09-27T03:41:58Z,CLOSED,False,2,0,1,https://github.com/dos1,docs: audio: note that callback set by al_set_mixer_postprocess_callback runs in separate thread,1,[],https://github.com/liballeg/allegro5/pull/829,https://github.com/elias-pschernig,2,https://github.com/liballeg/allegro5/pull/829#issuecomment-332080766,Another thing that has already bitten me in the past :D,"I would prefer to use only the first sentence.
Maybe replace the second sentence with something like ""Unless you set a target display or bitmap this means you cannot use any drawing functions."" But I think that should go without saying.
And the last part, mentioning to ""properly synchronize"" data is kinda pointless - either they know how threads work and will do so already, or they will not understand what ""properly synchronize"" even means :)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,829,2017-09-25T11:06:46Z,2017-09-27T03:41:58Z,2017-09-27T03:41:58Z,CLOSED,False,2,0,1,https://github.com/dos1,docs: audio: note that callback set by al_set_mixer_postprocess_callback runs in separate thread,1,[],https://github.com/liballeg/allegro5/pull/829,https://github.com/dos1,3,https://github.com/liballeg/allegro5/pull/829#issuecomment-332134607,Another thing that has already bitten me in the past :D,Updated!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,829,2017-09-25T11:06:46Z,2017-09-27T03:41:58Z,2017-09-27T03:41:58Z,CLOSED,False,2,0,1,https://github.com/dos1,docs: audio: note that callback set by al_set_mixer_postprocess_callback runs in separate thread,1,[],https://github.com/liballeg/allegro5/pull/829,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/829#issuecomment-332400146,Another thing that has already bitten me in the past :D,"Merged as dc95e93, thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,830,2017-09-27T09:51:14Z,2017-09-28T05:14:29Z,2017-09-28T05:14:36Z,MERGED,True,1,0,1,https://github.com/dos1,"docs: add missing video addon dependencies to the ""getting started"" page",1,[],https://github.com/liballeg/allegro5/pull/830,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/830,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,830,2017-09-27T09:51:14Z,2017-09-28T05:14:29Z,2017-09-28T05:14:36Z,MERGED,True,1,0,1,https://github.com/dos1,"docs: add missing video addon dependencies to the ""getting started"" page",1,[],https://github.com/liballeg/allegro5/pull/830,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/830#issuecomment-332729746,,Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,833,2017-09-29T12:26:32Z,2017-10-01T02:20:10Z,2017-10-01T02:20:10Z,CLOSED,False,2,2,1,https://github.com/dos1,update dependences in .travis.yml,1,[],https://github.com/liballeg/allegro5/pull/833,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/833,"When checking whether I did my WebP patch correctly, I've found some other missing dependencies in Travis config (DUMB, Theora and Enet on macOS; Opus, ALSA and OpenAL on GNU/Linux); this PR adds them.","When checking whether I did my WebP patch correctly, I've found some other missing dependencies in Travis config (DUMB, Theora and Enet on macOS; Opus, ALSA and OpenAL on GNU/Linux); this PR adds them.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,833,2017-09-29T12:26:32Z,2017-10-01T02:20:10Z,2017-10-01T02:20:10Z,CLOSED,False,2,2,1,https://github.com/dos1,update dependences in .travis.yml,1,[],https://github.com/liballeg/allegro5/pull/833,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/833#issuecomment-333348606,"When checking whether I did my WebP patch correctly, I've found some other missing dependencies in Travis config (DUMB, Theora and Enet on macOS; Opus, ALSA and OpenAL on GNU/Linux); this PR adds them.","Merged as d470d6b, thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,836,2017-10-02T04:28:54Z,2017-10-04T05:33:28Z,2017-10-04T05:33:28Z,CLOSED,False,1,1,2,https://github.com/beoran,Attempt to fix issue #832 by renaming the file.,1,[],https://github.com/liballeg/allegro5/pull/836,https://github.com/beoran,1,https://github.com/liballeg/allegro5/pull/836,"Attempted ix for #832. Please test on Windows, I currently  have access to Linux based systems only.","Attempted ix for #832. Please test on Windows, I currently  have access to Linux based systems only.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,836,2017-10-02T04:28:54Z,2017-10-04T05:33:28Z,2017-10-04T05:33:28Z,CLOSED,False,1,1,2,https://github.com/beoran,Attempt to fix issue #832 by renaming the file.,1,[],https://github.com/liballeg/allegro5/pull/836,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/836#issuecomment-334054202,"Attempted ix for #832. Please test on Windows, I currently  have access to Linux based systems only.",Nice. Merged as ca5dfea.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,837,2017-10-02T13:18:11Z,2017-10-03T15:07:43Z,2017-10-03T15:08:05Z,MERGED,True,0,13,3,https://github.com/dos1,Enable blocked locking of S3TC formats by default.,1,[],https://github.com/liballeg/allegro5/pull/837,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/837,The patent has expired today! \o/,The patent has expired today! \o/,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,837,2017-10-02T13:18:11Z,2017-10-03T15:07:43Z,2017-10-03T15:08:05Z,MERGED,True,0,13,3,https://github.com/dos1,Enable blocked locking of S3TC formats by default.,1,[],https://github.com/liballeg/allegro5/pull/837,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/837#issuecomment-333706827,The patent has expired today! \o/,"Nice. I was planning to remove this setting entirely, would you like to do that as well? It's just a few defines in the OpenGL code somewhere.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,837,2017-10-02T13:18:11Z,2017-10-03T15:07:43Z,2017-10-03T15:08:05Z,MERGED,True,0,13,3,https://github.com/dos1,Enable blocked locking of S3TC formats by default.,1,[],https://github.com/liballeg/allegro5/pull/837,https://github.com/dos1,3,https://github.com/liballeg/allegro5/pull/837#issuecomment-333826297,The patent has expired today! \o/,"Ah, couldn't be too easy, eh? :D
There it goes :)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,837,2017-10-02T13:18:11Z,2017-10-03T15:07:43Z,2017-10-03T15:08:05Z,MERGED,True,0,13,3,https://github.com/dos1,Enable blocked locking of S3TC formats by default.,1,[],https://github.com/liballeg/allegro5/pull/837,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/837#issuecomment-333872784,The patent has expired today! \o/,Woohoo!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,839,2017-10-05T09:37:44Z,2017-10-06T02:42:16Z,2017-10-06T07:22:48Z,MERGED,True,3,5,1,https://github.com/SimonN,fix dumb_off_t recognition,1,[],https://github.com/liballeg/allegro5/pull/839,https://github.com/SimonN,1,https://github.com/liballeg/allegro5/pull/839,"dumb_off_t is not a macro, it is a typedef. The preprocessor can't
see dumb_off_t even in DUMB 2.0.0, but I assumed it could.
And let's use a typedef to get proper errors.","dumb_off_t is not a macro, it is a typedef. The preprocessor can't
see dumb_off_t even in DUMB 2.0.0, but I assumed it could.
And let's use a typedef to get proper errors.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,839,2017-10-05T09:37:44Z,2017-10-06T02:42:16Z,2017-10-06T07:22:48Z,MERGED,True,3,5,1,https://github.com/SimonN,fix dumb_off_t recognition,1,[],https://github.com/liballeg/allegro5/pull/839,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/839#issuecomment-334644003,"dumb_off_t is not a macro, it is a typedef. The preprocessor can't
see dumb_off_t even in DUMB 2.0.0, but I assumed it could.
And let's use a typedef to get proper errors.",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,840,2017-10-06T04:15:18Z,2017-10-07T02:11:00Z,2017-10-07T02:11:00Z,MERGED,True,117,126,4,https://github.com/SiegeLord,Make the DUMB code compile with 32 bit DUMB.,1,[],https://github.com/liballeg/allegro5/pull/840,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/840,This involved some shuffling around to decouple things a little bit.,This involved some shuffling around to decouple things a little bit.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,841,2017-10-07T13:07:44Z,2017-10-07T19:25:56Z,2017-10-07T19:25:56Z,CLOSED,False,1,1,1,https://github.com/elias-pschernig,fix warning,1,[],https://github.com/liballeg/allegro5/pull/841,https://github.com/elias-pschernig,1,https://github.com/liballeg/allegro5/pull/841,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,841,2017-10-07T13:07:44Z,2017-10-07T19:25:56Z,2017-10-07T19:25:56Z,CLOSED,False,1,1,1,https://github.com/elias-pschernig,fix warning,1,[],https://github.com/liballeg/allegro5/pull/841,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/841#issuecomment-334960015,,That's pretty funny. I like how the code actually computed the correct value in a roundabout way.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,841,2017-10-07T13:07:44Z,2017-10-07T19:25:56Z,2017-10-07T19:25:56Z,CLOSED,False,1,1,1,https://github.com/elias-pschernig,fix warning,1,[],https://github.com/liballeg/allegro5/pull/841,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/841#issuecomment-334960089,,Merged as 020f3fa.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,843,2017-10-12T03:46:36Z,2017-11-21T14:38:08Z,2017-11-21T14:38:08Z,MERGED,True,9,9,7,https://github.com/elias-pschernig,fix some warnings for the Android port (should also fix issue #838),1,[],https://github.com/liballeg/allegro5/pull/843,https://github.com/elias-pschernig,1,https://github.com/liballeg/allegro5/pull/843,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,844,2017-10-12T04:07:22Z,2017-11-21T14:39:37Z,2017-11-21T14:39:37Z,MERGED,True,15,16,1,https://github.com/elias-pschernig,fix warning in the Android apk FS,1,[],https://github.com/liballeg/allegro5/pull/844,https://github.com/elias-pschernig,1,https://github.com/liballeg/allegro5/pull/844,and get rid of a way too small arbitrary file-limit,and get rid of a way too small arbitrary file-limit,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,848,2017-10-19T10:49:01Z,2017-10-28T18:52:27Z,2017-10-28T18:52:27Z,MERGED,True,2560,2942,6,https://github.com/dos1,run Python 2 scripts in misc/ with python2 and regenerate,1,[],https://github.com/liballeg/allegro5/pull/848,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/848,"On more and more systems ""python"" actually means python3, which
doesn't work with those scripts yet.","On more and more systems ""python"" actually means python3, which
doesn't work with those scripts yet.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,848,2017-10-19T10:49:01Z,2017-10-28T18:52:27Z,2017-10-28T18:52:27Z,MERGED,True,2560,2942,6,https://github.com/dos1,run Python 2 scripts in misc/ with python2 and regenerate,1,[],https://github.com/liballeg/allegro5/pull/848,https://github.com/dos1,2,https://github.com/liballeg/allegro5/pull/848#issuecomment-337872157,"On more and more systems ""python"" actually means python3, which
doesn't work with those scripts yet.","If somebody doesn't know it yet, you can append ?w=1 to github's diff URL and skip simple whitespace changes. Handy to look at that scanline_drawers.inc diff here :)
https://github.com/liballeg/allegro5/pull/848/files?w=1",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,848,2017-10-19T10:49:01Z,2017-10-28T18:52:27Z,2017-10-28T18:52:27Z,MERGED,True,2560,2942,6,https://github.com/dos1,run Python 2 scripts in misc/ with python2 and regenerate,1,[],https://github.com/liballeg/allegro5/pull/848,https://github.com/fatcerberus,3,https://github.com/liballeg/allegro5/pull/848#issuecomment-338256775,"On more and more systems ""python"" actually means python3, which
doesn't work with those scripts yet.",scanline_drawers.inc is autogenerated is it not?,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,848,2017-10-19T10:49:01Z,2017-10-28T18:52:27Z,2017-10-28T18:52:27Z,MERGED,True,2560,2942,6,https://github.com/dos1,run Python 2 scripts in misc/ with python2 and regenerate,1,[],https://github.com/liballeg/allegro5/pull/848,https://github.com/elias-pschernig,4,https://github.com/liballeg/allegro5/pull/848#issuecomment-338275487,"On more and more systems ""python"" actually means python3, which
doesn't work with those scripts yet.",Python2 is really outdated at this point - I'd just convert those scripts to Python3.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,848,2017-10-19T10:49:01Z,2017-10-28T18:52:27Z,2017-10-28T18:52:27Z,MERGED,True,2560,2942,6,https://github.com/dos1,run Python 2 scripts in misc/ with python2 and regenerate,1,[],https://github.com/liballeg/allegro5/pull/848,https://github.com/dos1,5,https://github.com/liballeg/allegro5/pull/848#issuecomment-338371482,"On more and more systems ""python"" actually means python3, which
doesn't work with those scripts yet.","@fatcerberus: Yes, it is; not on build though.
@elias-pschernig: I tried it by fixing print invocations, but running them with python3 produced different output than with python2, so I opted for a quick fix for now instead.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,848,2017-10-19T10:49:01Z,2017-10-28T18:52:27Z,2017-10-28T18:52:27Z,MERGED,True,2560,2942,6,https://github.com/dos1,run Python 2 scripts in misc/ with python2 and regenerate,1,[],https://github.com/liballeg/allegro5/pull/848,https://github.com/SiegeLord,6,https://github.com/liballeg/allegro5/pull/848#issuecomment-340212114,"On more and more systems ""python"" actually means python3, which
doesn't work with those scripts yet.",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,853,2017-10-22T16:28:15Z,2017-10-28T18:50:53Z,2017-10-28T18:50:53Z,MERGED,True,16,16,10,https://github.com/gusnan,Fix spelling errors,1,[],https://github.com/liballeg/allegro5/pull/853,https://github.com/gusnan,1,https://github.com/liballeg/allegro5/pull/853,Spelling errors discovered when working on packaging in Debian.,Spelling errors discovered when working on packaging in Debian.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,853,2017-10-22T16:28:15Z,2017-10-28T18:50:53Z,2017-10-28T18:50:53Z,MERGED,True,16,16,10,https://github.com/gusnan,Fix spelling errors,1,[],https://github.com/liballeg/allegro5/pull/853,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/853#issuecomment-340212022,Spelling errors discovered when working on packaging in Debian.,Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,854,2017-10-28T00:58:04Z,2017-10-28T18:49:48Z,2017-10-28T19:18:54Z,MERGED,True,2,2,1,https://github.com/fatcerberus,Fix `ptr` assert in file.c,1,[],https://github.com/liballeg/allegro5/pull/854,https://github.com/fatcerberus,1,https://github.com/liballeg/allegro5/pull/854,"According to the C specification malloc(0) can return a null pointer.  It turns out that this actually happens in practice, notably on Ubuntu.  Therefore NULL is actually a valid buffer pointer, if and only if size == 0.  This adjusts the assertions in al_fread() and al_fwrite() to align.","According to the C specification malloc(0) can return a null pointer.  It turns out that this actually happens in practice, notably on Ubuntu.  Therefore NULL is actually a valid buffer pointer, if and only if size == 0.  This adjusts the assertions in al_fread() and al_fwrite() to align.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,854,2017-10-28T00:58:04Z,2017-10-28T18:49:48Z,2017-10-28T19:18:54Z,MERGED,True,2,2,1,https://github.com/fatcerberus,Fix `ptr` assert in file.c,1,[],https://github.com/liballeg/allegro5/pull/854,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/854#issuecomment-340211999,"According to the C specification malloc(0) can return a null pointer.  It turns out that this actually happens in practice, notably on Ubuntu.  Therefore NULL is actually a valid buffer pointer, if and only if size == 0.  This adjusts the assertions in al_fread() and al_fwrite() to align.",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,855,2017-10-28T18:49:07Z,2017-10-28T19:51:10Z,2017-10-28T19:51:10Z,MERGED,True,1,1,1,https://github.com/SiegeLord,Try fixing Travis on OSX.,1,[],https://github.com/liballeg/allegro5/pull/855,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/855,See travis-ci/travis-ci#8552.,See travis-ci/travis-ci#8552.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,858,2017-11-19T20:12:07Z,2017-12-27T06:41:38Z,2017-12-27T06:41:38Z,CLOSED,False,996,1,8,https://github.com/elias-pschernig,[font addon] add support for bmfont format,7,[],https://github.com/liballeg/allegro5/pull/858,https://github.com/elias-pschernig,1,https://github.com/liballeg/allegro5/pull/858,"A lot of libraries like libgdx  or Phaser use a bitmap font format (bmfont) slightly different and more feature-rich than Allegro's (multiple ranges per bitmap, kerning pairs). This is achieved by having an .xml file with some meta data in addition to the bitmaps.
For some reason I needed to load a bmfont font in Allegro and so this patch adds support for bmfont fonts.
(If this PR gets applied we could probably simplify font.c by just calling functions from bmfont.c because Allegro's bitmap fonts are just a subset of bmfont fonts.)","A lot of libraries like libgdx  or Phaser use a bitmap font format (bmfont) slightly different and more feature-rich than Allegro's (multiple ranges per bitmap, kerning pairs). This is achieved by having an .xml file with some meta data in addition to the bitmaps.
For some reason I needed to load a bmfont font in Allegro and so this patch adds support for bmfont fonts.
(If this PR gets applied we could probably simplify font.c by just calling functions from bmfont.c because Allegro's bitmap fonts are just a subset of bmfont fonts.)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,858,2017-11-19T20:12:07Z,2017-12-27T06:41:38Z,2017-12-27T06:41:38Z,CLOSED,False,996,1,8,https://github.com/elias-pschernig,[font addon] add support for bmfont format,7,[],https://github.com/liballeg/allegro5/pull/858,https://github.com/fatcerberus,2,https://github.com/liballeg/allegro5/pull/858#issuecomment-345553308,"A lot of libraries like libgdx  or Phaser use a bitmap font format (bmfont) slightly different and more feature-rich than Allegro's (multiple ranges per bitmap, kerning pairs). This is achieved by having an .xml file with some meta data in addition to the bitmaps.
For some reason I needed to load a bmfont font in Allegro and so this patch adds support for bmfont fonts.
(If this PR gets applied we could probably simplify font.c by just calling functions from bmfont.c because Allegro's bitmap fonts are just a subset of bmfont fonts.)","Never heard of this format, kerning and such is nice to have.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,858,2017-11-19T20:12:07Z,2017-12-27T06:41:38Z,2017-12-27T06:41:38Z,CLOSED,False,996,1,8,https://github.com/elias-pschernig,[font addon] add support for bmfont format,7,[],https://github.com/liballeg/allegro5/pull/858,https://github.com/elias-pschernig,3,https://github.com/liballeg/allegro5/pull/858#issuecomment-350513946,"A lot of libraries like libgdx  or Phaser use a bitmap font format (bmfont) slightly different and more feature-rich than Allegro's (multiple ranges per bitmap, kerning pairs). This is achieved by having an .xml file with some meta data in addition to the bitmaps.
For some reason I needed to load a bmfont font in Allegro and so this patch adds support for bmfont fonts.
(If this PR gets applied we could probably simplify font.c by just calling functions from bmfont.c because Allegro's bitmap fonts are just a subset of bmfont fonts.)","I've never seen one that is not XML, and it's the only format I required myself. It also should be easy converting from the other formats to XML. If someone needs one of the other formats it probably would not hurt adding support in that case.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,858,2017-11-19T20:12:07Z,2017-12-27T06:41:38Z,2017-12-27T06:41:38Z,CLOSED,False,996,1,8,https://github.com/elias-pschernig,[font addon] add support for bmfont format,7,[],https://github.com/liballeg/allegro5/pull/858,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/858#issuecomment-352167244,"A lot of libraries like libgdx  or Phaser use a bitmap font format (bmfont) slightly different and more feature-rich than Allegro's (multiple ranges per bitmap, kerning pairs). This is achieved by having an .xml file with some meta data in addition to the bitmaps.
For some reason I needed to load a bmfont font in Allegro and so this patch adds support for bmfont fonts.
(If this PR gets applied we could probably simplify font.c by just calling functions from bmfont.c because Allegro's bitmap fonts are just a subset of bmfont fonts.)",Do you have a bmfont handy that we can add to the data folder? Something small... I wonder if we can wrap one of the existing bitmap fonts?,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,858,2017-11-19T20:12:07Z,2017-12-27T06:41:38Z,2017-12-27T06:41:38Z,CLOSED,False,996,1,8,https://github.com/elias-pschernig,[font addon] add support for bmfont format,7,[],https://github.com/liballeg/allegro5/pull/858,https://github.com/elias-pschernig,5,https://github.com/liballeg/allegro5/pull/858#issuecomment-352638020,"A lot of libraries like libgdx  or Phaser use a bitmap font format (bmfont) slightly different and more feature-rich than Allegro's (multiple ranges per bitmap, kerning pairs). This is achieved by having an .xml file with some meta data in addition to the bitmaps.
For some reason I needed to load a bmfont font in Allegro and so this patch adds support for bmfont fonts.
(If this PR gets applied we could probably simplify font.c by just calling functions from bmfont.c because Allegro's bitmap fonts are just a subset of bmfont fonts.)","I wrapped a4_font.tga with an a4_font.fnt. To see it in action can do:
./ex_ttf data/a4_font.fnt
We could probably add a dedicated example or modify one of the examples already using a4_font.tga to instead load it as .fnt. In fact I think ex_vsync loads it wrong (characters after 127 will be mapped incorrectly to unicode 128+).",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,858,2017-11-19T20:12:07Z,2017-12-27T06:41:38Z,2017-12-27T06:41:38Z,CLOSED,False,996,1,8,https://github.com/elias-pschernig,[font addon] add support for bmfont format,7,[],https://github.com/liballeg/allegro5/pull/858,https://github.com/SiegeLord,6,https://github.com/liballeg/allegro5/pull/858#issuecomment-354062046,"A lot of libraries like libgdx  or Phaser use a bitmap font format (bmfont) slightly different and more feature-rich than Allegro's (multiple ranges per bitmap, kerning pairs). This is achieved by having an .xml file with some meta data in addition to the bitmaps.
For some reason I needed to load a bmfont font in Allegro and so this patch adds support for bmfont fonts.
(If this PR gets applied we could probably simplify font.c by just calling functions from bmfont.c because Allegro's bitmap fonts are just a subset of bmfont fonts.)","Alright, merged as 677b8a9. I had to fix the ids in the example font, as they were wrong past ASCII. Also, the get_glyph_advance wasn't correct, so I fixed that as well.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,861,2017-11-26T00:40:36Z,2017-12-16T07:12:00Z,2017-12-16T07:12:01Z,MERGED,True,108,21,10,https://github.com/SiegeLord,Resize the display on Windows when hiding/showing the menu.,3,[],https://github.com/liballeg/allegro5/pull/861,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/861,"Prior to this, when the menu was shown this would shrink the drawable
area while keeping the window size the same. Now, the window size will
change while keeping the drawable area the same. The value returned by
al_get_display_height is unnaffected by this change.
Tested this with window constraints and things appear to work fine. A
remaining issue is the user changing the windows theme (thus changing
the menu height), which might cause issues. This should be a rare
occurence.
ex_menu had a workaround for this issue, and my testing has shown that
even if kept around, it still appears to work fine with this change in
place, suggesting that this change is backwards compatible.
Fixes #860.","Prior to this, when the menu was shown this would shrink the drawable
area while keeping the window size the same. Now, the window size will
change while keeping the drawable area the same. The value returned by
al_get_display_height is unnaffected by this change.
Tested this with window constraints and things appear to work fine. A
remaining issue is the user changing the windows theme (thus changing
the menu height), which might cause issues. This should be a rare
occurence.
ex_menu had a workaround for this issue, and my testing has shown that
even if kept around, it still appears to work fine with this change in
place, suggesting that this change is backwards compatible.
Fixes #860.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,864,2017-12-06T15:23:56Z,2017-12-16T07:32:29Z,2017-12-16T07:32:29Z,MERGED,True,118,42,3,https://github.com/elias-pschernig,add al_transform_coordinates_4d,2,[],https://github.com/liballeg/allegro5/pull/864,https://github.com/elias-pschernig,1,https://github.com/liballeg/allegro5/pull/864,Fixes #863,Fixes #863,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,868,2017-12-12T06:51:28Z,2017-12-16T21:14:50Z,2017-12-16T21:14:50Z,MERGED,True,22,8,2,https://github.com/SiegeLord,Fix a few OSX retina scaling issues.,3,[],https://github.com/liballeg/allegro5/pull/868,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/868,"The window size was wrong in most cases
The maximum constraints were not correct

Fixes #851","The window size was wrong in most cases
The maximum constraints were not correct

Fixes #851",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,869,2017-12-12T10:48:29Z,2017-12-12T10:48:59Z,2017-12-12T10:48:59Z,CLOSED,False,298,0,4,https://github.com/billyquith,Luajit,16,[],https://github.com/liballeg/allegro5/pull/869,https://github.com/billyquith,1,https://github.com/liballeg/allegro5/pull/869,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,870,2017-12-16T21:21:14Z,2017-12-16T22:51:09Z,2017-12-16T22:51:09Z,MERGED,True,4,1,1,https://github.com/SiegeLord,Don't link in libm on MSVC for DUMB.,1,[],https://github.com/liballeg/allegro5/pull/870,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/870,Fixes #847,Fixes #847,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,871,2017-12-17T20:50:57Z,2018-01-25T07:10:04Z,2018-01-25T07:10:05Z,MERGED,True,13,9,3,https://github.com/dos1,Fix 3D (non-projection) transforms with al_hold_bitmap_drawing,1,[],https://github.com/liballeg/allegro5/pull/871,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/871,"The z coordinate set by current transform was dropped when calculating
the vertex coords, so it couldn't reach the projective transform residing
at the GPU.
This isn't an issue when not held, since there is no other way in Allegro
to set the z coordinate than using transforms, and without holding,
both transforms are applied already on the GPU using all four coordinates.
Note that projection transforms are still unsupported.","The z coordinate set by current transform was dropped when calculating
the vertex coords, so it couldn't reach the projective transform residing
at the GPU.
This isn't an issue when not held, since there is no other way in Allegro
to set the z coordinate than using transforms, and without holding,
both transforms are applied already on the GPU using all four coordinates.
Note that projection transforms are still unsupported.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,871,2017-12-17T20:50:57Z,2018-01-25T07:10:04Z,2018-01-25T07:10:05Z,MERGED,True,13,9,3,https://github.com/dos1,Fix 3D (non-projection) transforms with al_hold_bitmap_drawing,1,[],https://github.com/liballeg/allegro5/pull/871,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/871#issuecomment-352333037,"The z coordinate set by current transform was dropped when calculating
the vertex coords, so it couldn't reach the projective transform residing
at the GPU.
This isn't an issue when not held, since there is no other way in Allegro
to set the z coordinate than using transforms, and without holding,
both transforms are applied already on the GPU using all four coordinates.
Note that projection transforms are still unsupported.","Before merging this, I'll want some benchmarks done to measure the effect of this. Not saying that you have to do this, but just something that will need to be done. I'll get to it eventually, naturally.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,871,2017-12-17T20:50:57Z,2018-01-25T07:10:04Z,2018-01-25T07:10:05Z,MERGED,True,13,9,3,https://github.com/dos1,Fix 3D (non-projection) transforms with al_hold_bitmap_drawing,1,[],https://github.com/liballeg/allegro5/pull/871,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/871#issuecomment-360380465,"The z coordinate set by current transform was dropped when calculating
the vertex coords, so it couldn't reach the projective transform residing
at the GPU.
This isn't an issue when not held, since there is no other way in Allegro
to set the z coordinate than using transforms, and without holding,
both transforms are applied already on the GPU using all four coordinates.
Note that projection transforms are still unsupported.","I tried benchmarking this, but observed no difference. Sounds like this is good to merge.
Note that an equivalent change needs to be made for Direct3D, but I can do that.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,872,2017-12-17T21:34:34Z,2017-12-18T05:32:35Z,2017-12-18T05:32:35Z,MERGED,True,42,5,4,https://github.com/SiegeLord,Various fixes for GTK menus.,2,[],https://github.com/liballeg/allegro5/pull/872,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/872,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,878,2018-01-20T00:26:39Z,2018-01-24T03:54:55Z,2018-01-24T03:55:00Z,MERGED,True,0,68,2,https://github.com/dos1,Remove glClear hack for Android 2.1,1,[],https://github.com/liballeg/allegro5/pull/878,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/878,"AFAIK, Allegro doesn't run on Android 2.1 anymore :)","AFAIK, Allegro doesn't run on Android 2.1 anymore :)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,878,2018-01-20T00:26:39Z,2018-01-24T03:54:55Z,2018-01-24T03:55:00Z,MERGED,True,0,68,2,https://github.com/dos1,Remove glClear hack for Android 2.1,1,[],https://github.com/liballeg/allegro5/pull/878,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/878#issuecomment-360013316,"AFAIK, Allegro doesn't run on Android 2.1 anymore :)",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,879,2018-01-20T00:34:46Z,2018-01-24T03:51:37Z,2018-01-24T03:52:08Z,MERGED,True,8,0,1,https://github.com/dos1,ljoynu: fix build with older Android NDKs,1,[],https://github.com/liballeg/allegro5/pull/879,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/879,"Commit 76f076e removed those defines
to fix some warnings - probably about symbol redefinition. However,
on my setup with NDK r14b and build tools 26.0.1, those defines were
in fact needed and that commit made the build fail. Let's reintroduce
them, but this time guarded by ifndefs, so they don't fail builds on
older NDKs and don't generate warnings on newer ones.","Commit 76f076e removed those defines
to fix some warnings - probably about symbol redefinition. However,
on my setup with NDK r14b and build tools 26.0.1, those defines were
in fact needed and that commit made the build fail. Let's reintroduce
them, but this time guarded by ifndefs, so they don't fail builds on
older NDKs and don't generate warnings on newer ones.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,879,2018-01-20T00:34:46Z,2018-01-24T03:51:37Z,2018-01-24T03:52:08Z,MERGED,True,8,0,1,https://github.com/dos1,ljoynu: fix build with older Android NDKs,1,[],https://github.com/liballeg/allegro5/pull/879,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/879#issuecomment-360012940,"Commit 76f076e removed those defines
to fix some warnings - probably about symbol redefinition. However,
on my setup with NDK r14b and build tools 26.0.1, those defines were
in fact needed and that commit made the build fail. Let's reintroduce
them, but this time guarded by ifndefs, so they don't fail builds on
older NDKs and don't generate warnings on newer ones.",Works for me. Thanks for following up on this!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,880,2018-01-20T03:36:49Z,2018-01-24T03:52:35Z,2018-01-24T03:52:35Z,MERGED,True,15,2,1,https://github.com/elias-pschernig,Update transformations.txt,1,[],https://github.com/liballeg/allegro5/pull/880,https://github.com/elias-pschernig,1,https://github.com/liballeg/allegro5/pull/880,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,883,2018-01-30T02:54:15Z,2018-02-06T03:50:45Z,2018-02-06T03:50:45Z,MERGED,True,77,31,2,https://github.com/elias-pschernig,add a texture to the skybox in ex_camera,1,[],https://github.com/liballeg/allegro5/pull/883,https://github.com/elias-pschernig,1,https://github.com/liballeg/allegro5/pull/883,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,883,2018-01-30T02:54:15Z,2018-02-06T03:50:45Z,2018-02-06T03:50:45Z,MERGED,True,77,31,2,https://github.com/elias-pschernig,add a texture to the skybox in ex_camera,1,[],https://github.com/liballeg/allegro5/pull/883,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/883#issuecomment-363302681,,🐘,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,884,2018-02-06T03:38:54Z,2018-02-09T04:59:34Z,2018-02-09T04:59:34Z,MERGED,True,23,5,2,https://github.com/SiegeLord,Add an option to use the desktop window when initializing DSound.,1,[],https://github.com/liballeg/allegro5/pull/884,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/884,"Default to it, as it appears to work a little more reliably.
Fixes #877","Default to it, as it appears to work a little more reliably.
Fixes #877",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,885,2018-02-06T19:47:26Z,2018-02-09T05:12:04Z,2018-02-09T05:12:04Z,MERGED,True,35,9,2,https://github.com/dos1,"X11: make compositor bypass configurable, and bypass only when fullscreen by default",1,[],https://github.com/liballeg/allegro5/pull/885,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/885,Closes #818,Closes #818,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,885,2018-02-06T19:47:26Z,2018-02-09T05:12:04Z,2018-02-09T05:12:04Z,MERGED,True,35,9,2,https://github.com/dos1,"X11: make compositor bypass configurable, and bypass only when fullscreen by default",1,[],https://github.com/liballeg/allegro5/pull/885,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/885#issuecomment-364337000,Closes #818,"Nice, thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,886,2018-02-08T12:46:22Z,2018-02-10T19:54:30Z,2018-02-10T19:54:30Z,MERGED,True,9,0,1,https://github.com/dos1,docs: take note that al_invert_transform and friends work only with 2D transforms,1,[],https://github.com/liballeg/allegro5/pull/886,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/886,"It might be useful to add al_invert_transform_3d and al_invert_transform_4d sometime, but for now just document that al_invert_transform doesn't work with 3- and 4- dimensional transforms.","It might be useful to add al_invert_transform_3d and al_invert_transform_4d sometime, but for now just document that al_invert_transform doesn't work with 3- and 4- dimensional transforms.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,886,2018-02-08T12:46:22Z,2018-02-10T19:54:30Z,2018-02-10T19:54:30Z,MERGED,True,9,0,1,https://github.com/dos1,docs: take note that al_invert_transform and friends work only with 2D transforms,1,[],https://github.com/liballeg/allegro5/pull/886,https://github.com/dos1,2,https://github.com/liballeg/allegro5/pull/886#issuecomment-364429015,"It might be useful to add al_invert_transform_3d and al_invert_transform_4d sometime, but for now just document that al_invert_transform doesn't work with 3- and 4- dimensional transforms.","Oh, right! Changed.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,886,2018-02-08T12:46:22Z,2018-02-10T19:54:30Z,2018-02-10T19:54:30Z,MERGED,True,9,0,1,https://github.com/dos1,docs: take note that al_invert_transform and friends work only with 2D transforms,1,[],https://github.com/liballeg/allegro5/pull/886,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/886#issuecomment-364685190,"It might be useful to add al_invert_transform_3d and al_invert_transform_4d sometime, but for now just document that al_invert_transform doesn't work with 3- and 4- dimensional transforms.",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,890,2018-02-26T19:53:39Z,2018-03-01T05:23:35Z,2018-03-01T05:39:18Z,MERGED,True,3,0,1,https://github.com/fatcerberus,Add deps/ to .gitignore,1,[],https://github.com/liballeg/allegro5/pull/890,https://github.com/fatcerberus,1,https://github.com/liballeg/allegro5/pull/890,"The CMake build is set up to pull dependencies from deps/.  Because of that git diff gets polluted with all the includes there making it basically useless.  Since we never want to commit these anyway, I figured we might want to add the whole directory to .gitignore.","The CMake build is set up to pull dependencies from deps/.  Because of that git diff gets polluted with all the includes there making it basically useless.  Since we never want to commit these anyway, I figured we might want to add the whole directory to .gitignore.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,890,2018-02-26T19:53:39Z,2018-03-01T05:23:35Z,2018-03-01T05:39:18Z,MERGED,True,3,0,1,https://github.com/fatcerberus,Add deps/ to .gitignore,1,[],https://github.com/liballeg/allegro5/pull/890,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/890#issuecomment-369477510,"The CMake build is set up to pull dependencies from deps/.  Because of that git diff gets polluted with all the includes there making it basically useless.  Since we never want to commit these anyway, I figured we might want to add the whole directory to .gitignore.",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,893,2018-03-04T21:56:19Z,2018-03-08T00:47:43Z,2018-03-08T00:47:43Z,MERGED,True,94,26,11,https://github.com/SiegeLord,Add error logging to every failure path in the image addon.,1,[],https://github.com/liballeg/allegro5/pull/893,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/893,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,894,2018-03-05T07:59:44Z,2018-03-08T00:58:40Z,2018-03-08T00:58:40Z,MERGED,True,26,6,4,https://github.com/SiegeLord,Add error logs for every failure path in the font addons.,1,[],https://github.com/liballeg/allegro5/pull/894,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/894,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,895,2018-03-08T01:43:36Z,2018-03-20T02:53:45Z,2018-03-20T02:53:45Z,MERGED,True,126,52,7,https://github.com/SiegeLord,Add error logging to every failure path in the acodec addon.,1,[],https://github.com/liballeg/allegro5/pull/895,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/895,Also fiddle with the log levels in some places.,Also fiddle with the log levels in some places.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,897,2018-03-24T20:58:25Z,2018-07-22T00:58:48Z,2018-07-22T00:58:49Z,CLOSED,False,2,2,1,https://github.com/byteblob,fix allegro_opengl.h comment,1,[],https://github.com/liballeg/allegro5/pull/897,https://github.com/byteblob,1,https://github.com/liballeg/allegro5/pull/897,"I know it's just the comment, but that codepath is not the macos one. I've tried in windows and it's taken there, so I've changed the comment :p","I know it's just the comment, but that codepath is not the macos one. I've tried in windows and it's taken there, so I've changed the comment :p",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,897,2018-03-24T20:58:25Z,2018-07-22T00:58:48Z,2018-07-22T00:58:49Z,CLOSED,False,2,2,1,https://github.com/byteblob,fix allegro_opengl.h comment,1,[],https://github.com/liballeg/allegro5/pull/897,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/897#issuecomment-406833384,"I know it's just the comment, but that codepath is not the macos one. I've tried in windows and it's taken there, so I've changed the comment :p","Thanks! We won't be merging this as #826 will restructure that header a little bit anyway, and do a somewhat alternate change for these comments.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,901,2018-04-13T03:50:16Z,2018-08-29T05:04:16Z,2018-08-29T05:04:16Z,CLOSED,False,99,63,1,https://github.com/elias-pschernig,"improve linux joystick detection, thanks to imp",2,[],https://github.com/liballeg/allegro5/pull/901,https://github.com/elias-pschernig,1,https://github.com/liballeg/allegro5/pull/901,"Before only devices named /dev/input/event0 through /dev/input/event31
were detected. But a device can also have a name like
/dev/input/even260 and Allegro would not see it in that case (unless
with an entry in allegro.cfg or with hotplugging if the user
disconnected and reconnected it).","Before only devices named /dev/input/event0 through /dev/input/event31
were detected. But a device can also have a name like
/dev/input/even260 and Allegro would not see it in that case (unless
with an entry in allegro.cfg or with hotplugging if the user
disconnected and reconnected it).",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,901,2018-04-13T03:50:16Z,2018-08-29T05:04:16Z,2018-08-29T05:04:16Z,CLOSED,False,99,63,1,https://github.com/elias-pschernig,"improve linux joystick detection, thanks to imp",2,[],https://github.com/liballeg/allegro5/pull/901,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/901#issuecomment-416825299,"Before only devices named /dev/input/event0 through /dev/input/event31
were detected. But a device can also have a name like
/dev/input/even260 and Allegro would not see it in that case (unless
with an entry in allegro.cfg or with hotplugging if the user
disconnected and reconnected it).","Merged as 56f087a. I never released that this was different from that other pull request! I tested this, and it appeared to keep working.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,902,2018-04-14T03:01:10Z,,2018-04-28T17:54:23Z,OPEN,False,118,20,2,https://github.com/allefant,improve linux joystick detection,1,[],https://github.com/liballeg/allegro5/pull/902,https://github.com/allefant,1,https://github.com/liballeg/allegro5/pull/902,"This correctly identifies X/Y/Z axes as well as common button types.
More work needs to be done but this also adds enough log information
that someone could just send us an allegro.log and we could improve from
that.
My old xbox 360 controller has 100% of axes and buttons correctly
identified with his.
Before the patch all the buttons were just named B and the axes were
mapped completely wrong, mapping triggers as axes and swapping X and Y
axes of the sticks.","This correctly identifies X/Y/Z axes as well as common button types.
More work needs to be done but this also adds enough log information
that someone could just send us an allegro.log and we could improve from
that.
My old xbox 360 controller has 100% of axes and buttons correctly
identified with his.
Before the patch all the buttons were just named B and the axes were
mapped completely wrong, mapping triggers as axes and swapping X and Y
axes of the sticks.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,902,2018-04-14T03:01:10Z,,2018-04-28T17:54:23Z,OPEN,False,118,20,2,https://github.com/allefant,improve linux joystick detection,1,[],https://github.com/liballeg/allegro5/pull/902,https://github.com/fatcerberus,2,https://github.com/liballeg/allegro5/pull/902#issuecomment-381301529,"This correctly identifies X/Y/Z axes as well as common button types.
More work needs to be done but this also adds enough log information
that someone could just send us an allegro.log and we could improve from
that.
My old xbox 360 controller has 100% of axes and buttons correctly
identified with his.
Before the patch all the buttons were just named B and the axes were
mapped completely wrong, mapping triggers as axes and swapping X and Y
axes of the sticks.",Does this work properly with non-Xbox gamepads?  I know we've had issues with Xbox controllers in the past where attempting to fix them breaks things with other devices.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,902,2018-04-14T03:01:10Z,,2018-04-28T17:54:23Z,OPEN,False,118,20,2,https://github.com/allefant,improve linux joystick detection,1,[],https://github.com/liballeg/allegro5/pull/902,https://github.com/allefant,3,https://github.com/liballeg/allegro5/pull/902#issuecomment-381302089,"This correctly identifies X/Y/Z axes as well as common button types.
More work needs to be done but this also adds enough log information
that someone could just send us an allegro.log and we could improve from
that.
My old xbox 360 controller has 100% of axes and buttons correctly
identified with his.
Before the patch all the buttons were just named B and the axes were
mapped completely wrong, mapping triggers as axes and swapping X and Y
axes of the sticks.","I don't know. But if you look at the changes the old code just was wrong - e.g. it simply ignored whether axes are X/Y/Z and just alternated between X and Y. And it completely ignored the button type. So I would say the chance that the new code is any worse than the old is close to zero :)
Still - do you have any more information about those issues you had in the past?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,902,2018-04-14T03:01:10Z,,2018-04-28T17:54:23Z,OPEN,False,118,20,2,https://github.com/allefant,improve linux joystick detection,1,[],https://github.com/liballeg/allegro5/pull/902,https://github.com/igormorgado,4,https://github.com/liballeg/allegro5/pull/902#issuecomment-381306013,"This correctly identifies X/Y/Z axes as well as common button types.
More work needs to be done but this also adds enough log information
that someone could just send us an allegro.log and we could improve from
that.
My old xbox 360 controller has 100% of axes and buttons correctly
identified with his.
Before the patch all the buttons were just named B and the axes were
mapped completely wrong, mapping triggers as axes and swapping X and Y
axes of the sticks.","about the axis auto discovery, I think (cannot test all joysticks in the world) that will probably break something, SDL went to the path to manual configuration instead auto discovery. They probably had a good reason for that.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,902,2018-04-14T03:01:10Z,,2018-04-28T17:54:23Z,OPEN,False,118,20,2,https://github.com/allefant,improve linux joystick detection,1,[],https://github.com/liballeg/allegro5/pull/902,https://github.com/fatcerberus,5,https://github.com/liballeg/allegro5/pull/902#issuecomment-381308002,"This correctly identifies X/Y/Z axes as well as common button types.
More work needs to be done but this also adds enough log information
that someone could just send us an allegro.log and we could improve from
that.
My old xbox 360 controller has 100% of axes and buttons correctly
identified with his.
Before the patch all the buttons were just named B and the axes were
mapped completely wrong, mapping triggers as axes and swapping X and Y
axes of the sticks.","Still - do you have any more information about those issues you had in the past?

They weren't my issues--I just remember there being a good amount of discussion in the past w.r.t. incorrect behavior for Xbox controllers; I'm also pretty sure I remember a fix being reverted because it turned out to break other things.
edit: This was the reverted change I was thinking of: #662
It seems that was a change specifically for macOS, so might not be relevant to this PR after all.  Feel free to pretend I didn't say anything 😄",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,902,2018-04-14T03:01:10Z,,2018-04-28T17:54:23Z,OPEN,False,118,20,2,https://github.com/allefant,improve linux joystick detection,1,[],https://github.com/liballeg/allegro5/pull/902,https://github.com/allefant,6,https://github.com/liballeg/allegro5/pull/902#issuecomment-381326591,"This correctly identifies X/Y/Z axes as well as common button types.
More work needs to be done but this also adds enough log information
that someone could just send us an allegro.log and we could improve from
that.
My old xbox 360 controller has 100% of axes and buttons correctly
identified with his.
Before the patch all the buttons were just named B and the axes were
mapped completely wrong, mapping triggers as axes and swapping X and Y
axes of the sticks.","Let's see if someone can test it with one or two other joysticks. If something currently has 4 axes and designates them all as X axis, it would still show up as 2 sticks with X/Y axis each right now, since the current code completely ignores the designation. My change would make it show up as 4 sticks with a single X axis each. So yes, I can see cases where something would end up worse than before if evdev returns wrong information to begin with. (With my only test device evdev returns correct information.)
I looked at the SDL axis/button database and it is very easy to use: https://github.com/gabomdq/SDL_GameControllerDB/blob/master/gamecontrollerdb.txt
And it also means the mapping would be identical under Windows and OSX so it would be a big advantage. However it seems SDL is actually using this only in their GameController API - their Joystick API works the same as ours and does not use that database at all, just a direct mapping. So we probably would have to investigate this a bit more and maybe also use an additional API for it.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,902,2018-04-14T03:01:10Z,,2018-04-28T17:54:23Z,OPEN,False,118,20,2,https://github.com/allefant,improve linux joystick detection,1,[],https://github.com/liballeg/allegro5/pull/902,https://github.com/SiegeLord,7,https://github.com/liballeg/allegro5/pull/902#issuecomment-383326777,"This correctly identifies X/Y/Z axes as well as common button types.
More work needs to be done but this also adds enough log information
that someone could just send us an allegro.log and we could improve from
that.
My old xbox 360 controller has 100% of axes and buttons correctly
identified with his.
Before the patch all the buttons were just named B and the axes were
mapped completely wrong, mapping triggers as axes and swapping X and Y
axes of the sticks.","Alright, I tested this with 2 of my joysticks, 3 configurations (F310 has a physical switch between DInput and XInput).
Current code
F310, XInput

11 buttons (sees the center button)
4 2D sticks, triggers and right thumb mixed up between 2 sticks

F310, DInput

12 buttons, (triggers as buttons, no center button)
3 2D sticks

PSX controller in adapter

12 buttons (triggers as buttons, but this is fine as PSX controller has no pressure sensitivity for triggers)
3 2D sticks

New code
F310 XInput

11 buttons (have names, center button detected), side bumpers incorrectly called triggers
2 3D sticks (triggers + thumbs combined)

F310 DInput

12 buttons (triggers as buttons)
1 3D stick, combining left thumb + one axis of right thumb
1 1D stick, other axis of right thumb
1 2D stick, D-pad

PSX controller in adapter

Same as F310 DInput above, screwed up sticks

So... hit and miss. The only concrete improvement are the button names for one of the controllers (although still not usable as is, as it calls side bumpers triggers).",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,902,2018-04-14T03:01:10Z,,2018-04-28T17:54:23Z,OPEN,False,118,20,2,https://github.com/allefant,improve linux joystick detection,1,[],https://github.com/liballeg/allegro5/pull/902,https://github.com/beoran,8,https://github.com/liballeg/allegro5/pull/902#issuecomment-383359489,"This correctly identifies X/Y/Z axes as well as common button types.
More work needs to be done but this also adds enough log information
that someone could just send us an allegro.log and we could improve from
that.
My old xbox 360 controller has 100% of axes and buttons correctly
identified with his.
Before the patch all the buttons were just named B and the axes were
mapped completely wrong, mapping triggers as axes and swapping X and Y
axes of the sticks.","I found this Linux kernel doc on joypads that may be helpful. The problem
is that what the linux driver reports and what the button, trigger or axis
really is may not always be easy to map. Nevertheless this doc suggests a
way of doing it which we don't implement. Perhaps we should try what the
doc suggests.

https://www.kernel.org/doc/html/latest/input/gamepad.html

…
On Sat, 21 Apr 2018, 22:17 SiegeLord, ***@***.***> wrote:
 Alright, I tested this with 2 of my joysticks, 3 configurations (F310 has
 a physical switch between DInput and XInput).
 Current code FX310, XInput

    - 11 buttons (sees the center button)
    - 4 2D sticks, triggers and right thumb mixed up between 2 sticks

 FX310, DInput

    - 12 buttons, (triggers as buttons, no center button)
    - 3 2D sticks

 PSX controller in adapter

    - 12 buttons (triggers as buttons, but this is fine as PSX controller
    has no pressure sensitivity for triggers)
    - 3 2D sticks

 New code F310 XInput

    - 11 buttons (have names, center button detected), side bumpers
    incorrectly called triggers
    - 2 3D sticks (triggers + thumbs combined)

 F310 DInput

    - 12 buttons (triggers as buttons)
    - 1 3D stick, combining left thumb + one axis of right thumb
    - 1 1D stick, other axis of right thumb
    - 1 2D stick, D-pad

 PSX + adapter

    - Same as F310 DInput above, screwed up sticks

 So... hit and miss. The only concrete improvement are the button names for
 one of the controllers (although still not usable as is, as it calls side
 buttons triggers).

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#902 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/AAEWecn_bEN6TwLa_g2-Or1uUD10BZR5ks5tq5PfgaJpZM4TU5p5>
 .",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,902,2018-04-14T03:01:10Z,,2018-04-28T17:54:23Z,OPEN,False,118,20,2,https://github.com/allefant,improve linux joystick detection,1,[],https://github.com/liballeg/allegro5/pull/902,https://github.com/allefant,9,https://github.com/liballeg/allegro5/pull/902#issuecomment-383378450,"This correctly identifies X/Y/Z axes as well as common button types.
More work needs to be done but this also adds enough log information
that someone could just send us an allegro.log and we could improve from
that.
My old xbox 360 controller has 100% of axes and buttons correctly
identified with his.
Before the patch all the buttons were just named B and the axes were
mapped completely wrong, mapping triggers as axes and swapping X and Y
axes of the sticks.",Are we still not doing this with the PR? (except for the part about legacy drivers which is in fact keeping a custom database for those yourself),True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,902,2018-04-14T03:01:10Z,,2018-04-28T17:54:23Z,OPEN,False,118,20,2,https://github.com/allefant,improve linux joystick detection,1,[],https://github.com/liballeg/allegro5/pull/902,https://github.com/beoran,10,https://github.com/liballeg/allegro5/pull/902#issuecomment-383446947,"This correctly identifies X/Y/Z axes as well as common button types.
More work needs to be done but this also adds enough log information
that someone could just send us an allegro.log and we could improve from
that.
My old xbox 360 controller has 100% of axes and buttons correctly
identified with his.
Before the patch all the buttons were just named B and the axes were
mapped completely wrong, mapping triggers as axes and swapping X and Y
axes of the sticks.","No, not quite. For game pads there seems to be a definite mapping for the
axes of the sticks and the triggers that neither the old code nor this pr
implements.
…
On Sun, 22 Apr 2018, 14:36 allefant, ***@***.***> wrote:
 Are we still not doing this with the PR? (except for the part about legacy
 drivers which is in fact keeping a custom database for those yourself)

 —
 You are receiving this because you commented.
 Reply to this email directly, view it on GitHub
 <#902 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/AAEWeUBV4soxLDa84aTHQJlHbdKK6hiOks5trHlDgaJpZM4TU5p5>
 .",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,902,2018-04-14T03:01:10Z,,2018-04-28T17:54:23Z,OPEN,False,118,20,2,https://github.com/allefant,improve linux joystick detection,1,[],https://github.com/liballeg/allegro5/pull/902,https://github.com/elias-pschernig,11,https://github.com/liballeg/allegro5/pull/902#issuecomment-383642816,"This correctly identifies X/Y/Z axes as well as common button types.
More work needs to be done but this also adds enough log information
that someone could just send us an allegro.log and we could improve from
that.
My old xbox 360 controller has 100% of axes and buttons correctly
identified with his.
Before the patch all the buttons were just named B and the axes were
mapped completely wrong, mapping triggers as axes and swapping X and Y
axes of the sticks.","I re-read it, I feel that's exactly what the PR does, maybe minus some smaller things. But the main problem is it seems two of SiegeLord's joystick simply do not follow the new Linux kernel guidelines at all, likely using some kind of legacy driver from before those gamepad specifications were written. The only way to make those work seems to be (as that document admits) to keep a database of device uuids and hardcode a mapping for them.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,902,2018-04-14T03:01:10Z,,2018-04-28T17:54:23Z,OPEN,False,118,20,2,https://github.com/allefant,improve linux joystick detection,1,[],https://github.com/liballeg/allegro5/pull/902,https://github.com/beoran,12,https://github.com/liballeg/allegro5/pull/902#issuecomment-383677351,"This correctly identifies X/Y/Z axes as well as common button types.
More work needs to be done but this also adds enough log information
that someone could just send us an allegro.log and we could improve from
that.
My old xbox 360 controller has 100% of axes and buttons correctly
identified with his.
Before the patch all the buttons were just named B and the axes were
mapped completely wrong, mapping triggers as axes and swapping X and Y
axes of the sticks.","Well, Allegro already used Allegro.cfg for configuring and dealing with all
sorts of hardware problems. I guess introducing some more settings for
Linux Joysticks is pretty much inevitable if we want all devices to work
well.
…
On Mon, 23 Apr 2018, 18:43 elias-pschernig, ***@***.***> wrote:
 I re-read it, I feel that's exactly what the PR does, maybe minus some
 smaller things. But the main problem is it seems two of SiegeLord's
 joystick simply do not follow the new Linux kernel guidelines at all,
 likely using some kind of legacy driver from before those gamepad
 specifications were written. The only way to make those work seems to be
 (as that document admits) to keep a database of device uuids and hardcode a
 mapping for them.

 —
 You are receiving this because you commented.
 Reply to this email directly, view it on GitHub
 <#902 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/AAEWeVUq5M7KNhbhgfPMXlepN38GFQWsks5trgTEgaJpZM4TU5p5>
 .",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,902,2018-04-14T03:01:10Z,,2018-04-28T17:54:23Z,OPEN,False,118,20,2,https://github.com/allefant,improve linux joystick detection,1,[],https://github.com/liballeg/allegro5/pull/902,https://github.com/SiegeLord,13,https://github.com/liballeg/allegro5/pull/902#issuecomment-385189991,"This correctly identifies X/Y/Z axes as well as common button types.
More work needs to be done but this also adds enough log information
that someone could just send us an allegro.log and we could improve from
that.
My old xbox 360 controller has 100% of axes and buttons correctly
identified with his.
Before the patch all the buttons were just named B and the axes were
mapped completely wrong, mapping triggers as axes and swapping X and Y
axes of the sticks.","I'd argue that none of my controllers are mapped correctly. The correct mapping for F310 (and the XBox controller it is emulating) is 11 butons, 2 1D axes for the triggers and 2 2D axes for the analog sticks. I think we should hold off on merging this code until we got a remapping setup in place.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,902,2018-04-14T03:01:10Z,,2018-04-28T17:54:23Z,OPEN,False,118,20,2,https://github.com/allefant,improve linux joystick detection,1,[],https://github.com/liballeg/allegro5/pull/902,https://github.com/fatcerberus,14,https://github.com/liballeg/allegro5/pull/902#issuecomment-385190242,"This correctly identifies X/Y/Z axes as well as common button types.
More work needs to be done but this also adds enough log information
that someone could just send us an allegro.log and we could improve from
that.
My old xbox 360 controller has 100% of axes and buttons correctly
identified with his.
Before the patch all the buttons were just named B and the axes were
mapped completely wrong, mapping triggers as axes and swapping X and Y
axes of the sticks.","2 1D axes for the triggers

I note for the record that Windows itself seems to treat Xbox controllers as having a single 1D axis which is the sum of both triggers.  Kind of weird.  No idea if this is the same for other platforms.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,902,2018-04-14T03:01:10Z,,2018-04-28T17:54:23Z,OPEN,False,118,20,2,https://github.com/allefant,improve linux joystick detection,1,[],https://github.com/liballeg/allegro5/pull/902,https://github.com/SiegeLord,15,https://github.com/liballeg/allegro5/pull/902#issuecomment-385194235,"This correctly identifies X/Y/Z axes as well as common button types.
More work needs to be done but this also adds enough log information
that someone could just send us an allegro.log and we could improve from
that.
My old xbox 360 controller has 100% of axes and buttons correctly
identified with his.
Before the patch all the buttons were just named B and the axes were
mapped completely wrong, mapping triggers as axes and swapping X and Y
axes of the sticks.","Hmm... well, for me on Windows Allegro does treat F310's triggers as 2 1D sticks (interestingly, it treats the D-pad as separate 4 buttons, and doesn't detect the center button). Notable, F310 in DInput mode is not detected at all!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,906,2018-05-04T20:52:05Z,2018-05-05T18:29:28Z,2018-05-05T18:29:28Z,MERGED,True,103,5,1,https://github.com/allefant,Add some explanation and examples for projective transformations,1,[],https://github.com/liballeg/allegro5/pull/906,https://github.com/allefant,1,https://github.com/liballeg/allegro5/pull/906,,,True,{'HEART': ['https://github.com/dos1']}
liballeg/allegro5,https://github.com/liballeg/allegro5,906,2018-05-04T20:52:05Z,2018-05-05T18:29:28Z,2018-05-05T18:29:28Z,MERGED,True,103,5,1,https://github.com/allefant,Add some explanation and examples for projective transformations,1,[],https://github.com/liballeg/allegro5/pull/906,https://github.com/allefant,2,https://github.com/liballeg/allegro5/pull/906#issuecomment-386731671,,related to issue #905,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,906,2018-05-04T20:52:05Z,2018-05-05T18:29:28Z,2018-05-05T18:29:28Z,MERGED,True,103,5,1,https://github.com/allefant,Add some explanation and examples for projective transformations,1,[],https://github.com/liballeg/allegro5/pull/906,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/906#issuecomment-386825672,,Looks good to me! Thanks Elias.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,908,2018-05-23T10:30:39Z,2018-05-30T03:48:05Z,2018-05-30T03:48:12Z,MERGED,True,2,2,1,https://github.com/snoopdouglas,update ex_physfs to use PHYSFS_mount,1,[],https://github.com/liballeg/allegro5/pull/908,https://github.com/snoopdouglas,1,https://github.com/liballeg/allegro5/pull/908,"was using PHYSFS_addToSearchPath (deprecated in v3)
#907","was using PHYSFS_addToSearchPath (deprecated in v3)
#907",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,908,2018-05-23T10:30:39Z,2018-05-30T03:48:05Z,2018-05-30T03:48:12Z,MERGED,True,2,2,1,https://github.com/snoopdouglas,update ex_physfs to use PHYSFS_mount,1,[],https://github.com/liballeg/allegro5/pull/908,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/908#issuecomment-393021411,"was using PHYSFS_addToSearchPath (deprecated in v3)
#907",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,910,2018-06-06T22:53:55Z,2019-01-21T19:49:26Z,2019-01-21T19:49:26Z,MERGED,True,1,2,1,https://github.com/dos1,opengl: don't force POT bitmaps on GLES,1,[],https://github.com/liballeg/allegro5/pull/910,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/910,"Android devices that don't like NPOT FBOs are probably long gone and incompatible
with current versions of Allegro anyway.
If you need it, POT bitmaps can be always forced using Allegro configuration by
masking GL_ARB_texture_non_power_of_two and GL_OES_texture_npot extensions.","Android devices that don't like NPOT FBOs are probably long gone and incompatible
with current versions of Allegro anyway.
If you need it, POT bitmaps can be always forced using Allegro configuration by
masking GL_ARB_texture_non_power_of_two and GL_OES_texture_npot extensions.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,910,2018-06-06T22:53:55Z,2019-01-21T19:49:26Z,2019-01-21T19:49:26Z,MERGED,True,1,2,1,https://github.com/dos1,opengl: don't force POT bitmaps on GLES,1,[],https://github.com/liballeg/allegro5/pull/910,https://github.com/fatcerberus,2,https://github.com/liballeg/allegro5/pull/910#issuecomment-395248219,"Android devices that don't like NPOT FBOs are probably long gone and incompatible
with current versions of Allegro anyway.
If you need it, POT bitmaps can be always forced using Allegro configuration by
masking GL_ARB_texture_non_power_of_two and GL_OES_texture_npot extensions.","I hadn’t realized NPOT texture support was this pervasive, good to know.  I wonder if the same can be said for non-square textures...",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,910,2018-06-06T22:53:55Z,2019-01-21T19:49:26Z,2019-01-21T19:49:26Z,MERGED,True,1,2,1,https://github.com/dos1,opengl: don't force POT bitmaps on GLES,1,[],https://github.com/liballeg/allegro5/pull/910,https://github.com/dos1,3,https://github.com/liballeg/allegro5/pull/910#issuecomment-395249160,"Android devices that don't like NPOT FBOs are probably long gone and incompatible
with current versions of Allegro anyway.
If you need it, POT bitmaps can be always forced using Allegro configuration by
masking GL_ARB_texture_non_power_of_two and GL_OES_texture_npot extensions.","Well, even if they weren't so common, it's still only about the devices that don't like NPOT FBOs even though they export GL_OES_texture_npot extension, as otherwise Allegro will still make them POT :)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,910,2018-06-06T22:53:55Z,2019-01-21T19:49:26Z,2019-01-21T19:49:26Z,MERGED,True,1,2,1,https://github.com/dos1,opengl: don't force POT bitmaps on GLES,1,[],https://github.com/liballeg/allegro5/pull/910,https://github.com/dos1,4,https://github.com/liballeg/allegro5/pull/910#issuecomment-402900179,"Android devices that don't like NPOT FBOs are probably long gone and incompatible
with current versions of Allegro anyway.
If you need it, POT bitmaps can be always forced using Allegro configuration by
masking GL_ARB_texture_non_power_of_two and GL_OES_texture_npot extensions.","I've got some issues on WebGL 1 with this patch: Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE.
Looks like there are some places where Allegro fails to set it, needs to be checked.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,910,2018-06-06T22:53:55Z,2019-01-21T19:49:26Z,2019-01-21T19:49:26Z,MERGED,True,1,2,1,https://github.com/dos1,opengl: don't force POT bitmaps on GLES,1,[],https://github.com/liballeg/allegro5/pull/910,https://github.com/dos1,5,https://github.com/liballeg/allegro5/pull/910#issuecomment-418953027,"Android devices that don't like NPOT FBOs are probably long gone and incompatible
with current versions of Allegro anyway.
If you need it, POT bitmaps can be always forced using Allegro configuration by
masking GL_ARB_texture_non_power_of_two and GL_OES_texture_npot extensions.","I've looked into it. Actually, there's a bug in a completely different place: when using GLES, Allegro constructs extension list by using desktop GL data and determines support by comparing GLES context version to GL versions specified as ones that included particular extensions, which is obviously wrong.
This causes issues with Allegro thinking that NPOT textures are supported when they in fact are not (these days it's probably happening only under WebGL 1 though :P). I guess this was also the actual reason for putting that IS_OPENGLES check in the first place.
So, a GLES version of allegro5/opengl/GLext/gl_ext_list.h needs to be prepared and used in GLES builds. I think I'll put that into #826 and merge those two PRs.",True,{'THUMBS_UP': ['https://github.com/beoran']}
liballeg/allegro5,https://github.com/liballeg/allegro5,910,2018-06-06T22:53:55Z,2019-01-21T19:49:26Z,2019-01-21T19:49:26Z,MERGED,True,1,2,1,https://github.com/dos1,opengl: don't force POT bitmaps on GLES,1,[],https://github.com/liballeg/allegro5/pull/910,https://github.com/SiegeLord,6,https://github.com/liballeg/allegro5/pull/910#issuecomment-456166221,"Android devices that don't like NPOT FBOs are probably long gone and incompatible
with current versions of Allegro anyway.
If you need it, POT bitmaps can be always forced using Allegro configuration by
masking GL_ARB_texture_non_power_of_two and GL_OES_texture_npot extensions.",What's the status of this with respect the WebGL comment you made?,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,910,2018-06-06T22:53:55Z,2019-01-21T19:49:26Z,2019-01-21T19:49:26Z,MERGED,True,1,2,1,https://github.com/dos1,opengl: don't force POT bitmaps on GLES,1,[],https://github.com/liballeg/allegro5/pull/910,https://github.com/dos1,7,https://github.com/liballeg/allegro5/pull/910#issuecomment-456168639,"Android devices that don't like NPOT FBOs are probably long gone and incompatible
with current versions of Allegro anyway.
If you need it, POT bitmaps can be always forced using Allegro configuration by
masking GL_ARB_texture_non_power_of_two and GL_OES_texture_npot extensions.","I haven't worked on that yet. However, I'd probably merge this anyway, as fixing false-positives when detecting NPOT support seems way less valuable these days than fixing big amounts of VRAM being wasted on any other GLES device (and on WebGL 2 it works just fine); but Allegro's extension handling still needs to be fixed some day, as it may subtly break some other things in similar way.
I certainly won't mind if this particular thing (providing a GLES version of include/allegro5/opengl/GLext/gl_ext_list.h file) will be done by anyone else though ;)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,910,2018-06-06T22:53:55Z,2019-01-21T19:49:26Z,2019-01-21T19:49:26Z,MERGED,True,1,2,1,https://github.com/dos1,opengl: don't force POT bitmaps on GLES,1,[],https://github.com/liballeg/allegro5/pull/910,https://github.com/SiegeLord,8,https://github.com/liballeg/allegro5/pull/910#issuecomment-456182385,"Android devices that don't like NPOT FBOs are probably long gone and incompatible
with current versions of Allegro anyway.
If you need it, POT bitmaps can be always forced using Allegro configuration by
masking GL_ARB_texture_non_power_of_two and GL_OES_texture_npot extensions.","Makes sense, I filed a separate issue for the extension detection being broken and we can merge this in the interim.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,913,2018-06-22T18:36:36Z,2018-08-06T02:03:25Z,2018-08-06T02:03:50Z,MERGED,True,151,4,9,https://github.com/neuro-sys,Add ability to query DPI of an attached screen,8,[],https://github.com/liballeg/allegro5/pull/913,https://github.com/neuro-sys,1,https://github.com/liballeg/allegro5/pull/913,"I needed to query DPI for at least Windows, Linux and MacOS platforms for my own stuff, here's the one for Linux, and MacOS and Windows. Although I'm not all too familiar with Allegro codebase, so I'm happy to improve this branch if you provide directions.","I needed to query DPI for at least Windows, Linux and MacOS platforms for my own stuff, here's the one for Linux, and MacOS and Windows. Although I'm not all too familiar with Allegro codebase, so I'm happy to improve this branch if you provide directions.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,913,2018-06-22T18:36:36Z,2018-08-06T02:03:25Z,2018-08-06T02:03:50Z,MERGED,True,151,4,9,https://github.com/neuro-sys,Add ability to query DPI of an attached screen,8,[],https://github.com/liballeg/allegro5/pull/913,https://github.com/fatcerberus,2,https://github.com/liballeg/allegro5/pull/913#issuecomment-399547608,"I needed to query DPI for at least Windows, Linux and MacOS platforms for my own stuff, here's the one for Linux, and MacOS and Windows. Although I'm not all too familiar with Allegro codebase, so I'm happy to improve this branch if you provide directions.","I’m happy to see this PR, I need this functionality too as I dynamically scale my display window based on desktop resolution but then it ends up too large on, e.g. 4K displays.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,913,2018-06-22T18:36:36Z,2018-08-06T02:03:25Z,2018-08-06T02:03:50Z,MERGED,True,151,4,9,https://github.com/neuro-sys,Add ability to query DPI of an attached screen,8,[],https://github.com/liballeg/allegro5/pull/913,https://github.com/neuro-sys,3,https://github.com/liballeg/allegro5/pull/913#issuecomment-399567758,"I needed to query DPI for at least Windows, Linux and MacOS platforms for my own stuff, here's the one for Linux, and MacOS and Windows. Although I'm not all too familiar with Allegro codebase, so I'm happy to improve this branch if you provide directions.",I have added MacOS one too.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,913,2018-06-22T18:36:36Z,2018-08-06T02:03:25Z,2018-08-06T02:03:50Z,MERGED,True,151,4,9,https://github.com/neuro-sys,Add ability to query DPI of an attached screen,8,[],https://github.com/liballeg/allegro5/pull/913,https://github.com/neuro-sys,4,https://github.com/liballeg/allegro5/pull/913#issuecomment-399585844,"I needed to query DPI for at least Windows, Linux and MacOS platforms for my own stuff, here's the one for Linux, and MacOS and Windows. Although I'm not all too familiar with Allegro codebase, so I'm happy to improve this branch if you provide directions.","I added Windows one too here: https://github.com/neuro-sys/allegro5/pull/1/files
However as said in the description it couples the windows build with at least Windows 8.1 as it's using GetDpiForMonitor available only on:

Windows 8.1 [desktop apps only]

So I'm excluding that from this branch for now.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,913,2018-06-22T18:36:36Z,2018-08-06T02:03:25Z,2018-08-06T02:03:50Z,MERGED,True,151,4,9,https://github.com/neuro-sys,Add ability to query DPI of an attached screen,8,[],https://github.com/liballeg/allegro5/pull/913,https://github.com/neuro-sys,5,https://github.com/liballeg/allegro5/pull/913#issuecomment-399672124,"I needed to query DPI for at least Windows, Linux and MacOS platforms for my own stuff, here's the one for Linux, and MacOS and Windows. Although I'm not all too familiar with Allegro codebase, so I'm happy to improve this branch if you provide directions.","@SiegeLord Thanks a lot for the input! I did the changes you requested which makes a whole lot sense now that I've got a little better understanding of the codebase. Just one thing that seemed more appropriate is to put the API in monitor subsystem instead of display. The reason for that is DPI seems to be relevant in the context of a physical monitor. Another reason is, similar to al_get_monitor_info, it seems more appropriate to query the DPI per video adapter.
In that case, one would first query al_get_num_video_adapters, and per video adapter, call al_get_monitor_dpi to query the DPI of a monitor attached to the given adapter.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,913,2018-06-22T18:36:36Z,2018-08-06T02:03:25Z,2018-08-06T02:03:50Z,MERGED,True,151,4,9,https://github.com/neuro-sys,Add ability to query DPI of an attached screen,8,[],https://github.com/liballeg/allegro5/pull/913,https://github.com/neuro-sys,6,https://github.com/liballeg/allegro5/pull/913#issuecomment-401485085,"I needed to query DPI for at least Windows, Linux and MacOS platforms for my own stuff, here's the one for Linux, and MacOS and Windows. Although I'm not all too familiar with Allegro codebase, so I'm happy to improve this branch if you provide directions.","I have another unfinished branch in my local that tries to use display API (instead of monitor.h) and infer adapter from the display instance, so that the library user wouldn't have to pick the adapter themselves. Although, I am a little busy lately, if it works out well I could replace this branch with that one.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,913,2018-06-22T18:36:36Z,2018-08-06T02:03:25Z,2018-08-06T02:03:50Z,MERGED,True,151,4,9,https://github.com/neuro-sys,Add ability to query DPI of an attached screen,8,[],https://github.com/liballeg/allegro5/pull/913,https://github.com/SiegeLord,7,https://github.com/liballeg/allegro5/pull/913#issuecomment-401553484,"I needed to query DPI for at least Windows, Linux and MacOS platforms for my own stuff, here's the one for Linux, and MacOS and Windows. Although I'm not all too familiar with Allegro codebase, so I'm happy to improve this branch if you provide directions.","No, I like this one more, it's a little more composable (e.g. if we added al_get_display_adapter, then we'd be able to mimic what you're writing now). I've almost finished testing this change, so it should be merged soon.",True,{'THUMBS_UP': ['https://github.com/neuro-sys']}
liballeg/allegro5,https://github.com/liballeg/allegro5,913,2018-06-22T18:36:36Z,2018-08-06T02:03:25Z,2018-08-06T02:03:50Z,MERGED,True,151,4,9,https://github.com/neuro-sys,Add ability to query DPI of an attached screen,8,[],https://github.com/liballeg/allegro5/pull/913,https://github.com/SiegeLord,8,https://github.com/liballeg/allegro5/pull/913#issuecomment-402850874,"I needed to query DPI for at least Windows, Linux and MacOS platforms for my own stuff, here's the one for Linux, and MacOS and Windows. Although I'm not all too familiar with Allegro codebase, so I'm happy to improve this branch if you provide directions.","Alright, I tested this on the big 3 systems. Everything seems to work okay, except in one respect. On OSX, it is possible to force the retina display mode on a regular display. The effect of this is that we pretend the display is physically smaller than it is, so everything gets scaled up. Now the DPI returned by this method actually goes down, as if it's computed from points, and not pixels.
Notably, this works correctly on Win10, where I can also scale up everything and this yields a proportional increase in DPI you'd expect.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,913,2018-06-22T18:36:36Z,2018-08-06T02:03:25Z,2018-08-06T02:03:50Z,MERGED,True,151,4,9,https://github.com/neuro-sys,Add ability to query DPI of an attached screen,8,[],https://github.com/liballeg/allegro5/pull/913,https://github.com/neuro-sys,9,https://github.com/liballeg/allegro5/pull/913#issuecomment-403215969,"I needed to query DPI for at least Windows, Linux and MacOS platforms for my own stuff, here's the one for Linux, and MacOS and Windows. Although I'm not all too familiar with Allegro codebase, so I'm happy to improve this branch if you provide directions.","Thanks for testing it out. I don't have a MacBook with me at the moment, but I'll check it out as soon as I get it. What I am curious is the value of DPI on Mac before and after the so scalled retina mode is enabled. From the readings I have had on the web, it sounds similar to Windows' DPI unawareness, which simply bitmap-stretches every pixel by 2 or 4. Just like we enable DPI awareness on Windows in Allegro (so that no bitmap-stretching occurs), I will look into if something similar is available on Macs when retina mode is enabled, and how other DPI aware apps handle it with and without retina mode is enabled.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,913,2018-06-22T18:36:36Z,2018-08-06T02:03:25Z,2018-08-06T02:03:50Z,MERGED,True,151,4,9,https://github.com/neuro-sys,Add ability to query DPI of an attached screen,8,[],https://github.com/liballeg/allegro5/pull/913,https://github.com/neuro-sys,10,https://github.com/liballeg/allegro5/pull/913#issuecomment-406279843,"I needed to query DPI for at least Windows, Linux and MacOS platforms for my own stuff, here's the one for Linux, and MacOS and Windows. Although I'm not all too familiar with Allegro codebase, so I'm happy to improve this branch if you provide directions.","I got my macbook, and now with a test application I can see what you mean.
However, it actually works correctly. The issue is in the concept of scaling in MacOS and Windows differs inversely.
Windows
In Windows, when you set scaling, the resolution does not change, and Windows applies a scaling factor to the DPI which is then reported back to the application. The effect of this is that the native resolution does not change, and the DPI is increased or decreased depending on the user's scaling setting, and DPI aware applications scale themselves accordingly (non DPI aware applications are scaled by Windows via bitmap stretching which we disable).
OSX
Whereas in OSX, when you set scaling, unlike in Windows, the resolution gets changed, and the screen dimensions in millimeters remains the same. This results in DPI to change as expected based on the new reported screen resolution. Note that since the ""scaling"" is done through changing the display resolution in OSX, effective DPI value becomes smaller as the resolution is decreased. One other background detail about OSX scaling is that the resolutions (or ""display modes"" as it's called) can be virtual, in which case bitmap stretching is applied to simulate a native resolution, as far as I have understood. Also native cocoa widgets and fonts are still rendered at the physical resolution regardless of the virtual resolution so that no blurring occurs, but this too is based on empirical observation since I couldn't find clear documentation on this.
Property NSHighResolutionCapable
Setting NSHighResolutionCapable to true or false, I have observed no difference on a bitmap application ex_bitmap. My impression is that this property is enabled by default and cannot be disabled anymore, since based on the documentation it is used for disabling ""Open in Low Resolution"" property of an application, which simply activates bitmap stretching (as in non-DPI aware on Windows) which we don't want anyways. So applications are always DPI aware (i.e. HighResolutionCapable).
All in all, It's a conceptual confusion around the definitions of resolution and scaling with regards to Windows and MacOS.
Conclusion
I would say leaving it as it is would have the correct behaviour from a technical standpoint, but might confuse MacOS users when they change their OS scaling (which simply changes the resolution, whether physically or virtually), however the app would scale correctly based on their selected resolution and DPI value of their screen. Alas, OSX uses the phrase ""Looks like widthxheight"", and CGDisplayPixelsHigh/CGDisplayPixelsWide and CGDisplayBounds both returns the said widthxheight. So it does not ""look like"" but it ""is"" the said resolution (regardless of the cocoa tricks to render crispy fonts and widgets using native resolutions). The ideal solution, if it's possible on OSX, to get the ""physical"" pixel units a display mode has instead of the currently reported logical pixel units.
I compared the behaviour of both Windows and MacOS by changing the resolution in both systems (and not changing scaling since MacOS doesn't have the same concept) in an allegro DPI scaled test application, and the application scales correctly in both systems.
Any suggestions are still welcome.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,913,2018-06-22T18:36:36Z,2018-08-06T02:03:25Z,2018-08-06T02:03:50Z,MERGED,True,151,4,9,https://github.com/neuro-sys,Add ability to query DPI of an attached screen,8,[],https://github.com/liballeg/allegro5/pull/913,https://github.com/SiegeLord,11,https://github.com/liballeg/allegro5/pull/913#issuecomment-406771744,"I needed to query DPI for at least Windows, Linux and MacOS platforms for my own stuff, here's the one for Linux, and MacOS and Windows. Although I'm not all too familiar with Allegro codebase, so I'm happy to improve this branch if you provide directions.","Thanks for looking into it. Let me first explain what Allegro does today with respect to hi-DPI displays on OSX. Since Allegro has a pixel-level API, I tried to make it that it keeps working that way on OSX as well. I.e. if you request a 800x600 display, then you'll get an 800x600 pixel display. The way this is accomplished is that we grab the scaling factor (e.g. see here: https://github.com/liballeg/allegro5/blob/master/src/macosx/osxgl.m#L1023-L1030). So, I wonder if we can do the same technique here.
In terms of NSHighResolutionCapable, I wonder how you're setting it for ex_bitmap. In my experience NSHighResolutionCapable only works in bundles, while apps outside the bundle (like Allegro examples) are always treated as if NSHighResolutionCapable was set to true.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,913,2018-06-22T18:36:36Z,2018-08-06T02:03:25Z,2018-08-06T02:03:50Z,MERGED,True,151,4,9,https://github.com/neuro-sys,Add ability to query DPI of an attached screen,8,[],https://github.com/liballeg/allegro5/pull/913,https://github.com/SiegeLord,12,https://github.com/liballeg/allegro5/pull/913#issuecomment-406833188,"I needed to query DPI for at least Windows, Linux and MacOS platforms for my own stuff, here's the one for Linux, and MacOS and Windows. Although I'm not all too familiar with Allegro codebase, so I'm happy to improve this branch if you provide directions.","Ok,. I tried to implement what I had in mind in my branch here: https://github.com/SiegeLord/allegro5/tree/osx_dpi_fix. Could you try this out on your macbook and see if it works properly? The intention is for the DPI to return the 'true' pixels-per-inch on real retina displays, and 'simulated' pixels-per-inch for scaled displays.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,913,2018-06-22T18:36:36Z,2018-08-06T02:03:25Z,2018-08-06T02:03:50Z,MERGED,True,151,4,9,https://github.com/neuro-sys,Add ability to query DPI of an attached screen,8,[],https://github.com/liballeg/allegro5/pull/913,https://github.com/neuro-sys,13,https://github.com/liballeg/allegro5/pull/913#issuecomment-406860592,"I needed to query DPI for at least Windows, Linux and MacOS platforms for my own stuff, here's the one for Linux, and MacOS and Windows. Although I'm not all too familiar with Allegro codebase, so I'm happy to improve this branch if you provide directions.","@SiegeLord Yes, I tested it on a MacBook Pro (Retina, 13-inch, Early 2015), and scaling everything with DPI as a factor, the allegro application remains the same size in all different display modes (Larger Text and More Space, etc). Although, the newly returned DPI values seemed rather large, but could be due to the Retina display. I wonder if the same DPI scaling logic in an application would cause things to scale in different amounts depending on the platform (i.e. on OSX versus say, Linux).
Here is a screenshot comparing two different display modes:

Here is what I have added to the ex_bitmap.c example:
    int dpi = al_get_monitor_dpi(0);

    zoom = dpi / 96.0f;
and elsewhere for window dimensions
    int w = 320 * zoom;
    int h = 240 * zoom;

    display = al_create_display(w, h);
Assuming a default of 96 of DPI for development (such as my other non HiDPI desktop screen).",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,913,2018-06-22T18:36:36Z,2018-08-06T02:03:25Z,2018-08-06T02:03:50Z,MERGED,True,151,4,9,https://github.com/neuro-sys,Add ability to query DPI of an attached screen,8,[],https://github.com/liballeg/allegro5/pull/913,https://github.com/neuro-sys,14,https://github.com/liballeg/allegro5/pull/913#issuecomment-406862217,"I needed to query DPI for at least Windows, Linux and MacOS platforms for my own stuff, here's the one for Linux, and MacOS and Windows. Although I'm not all too familiar with Allegro codebase, so I'm happy to improve this branch if you provide directions.","In terms of NSHighResolutionCapable, I wonder how you're setting it for ex_bitmap. In my experience NSHighResolutionCapable only works in bundles, while apps outside the bundle (like Allegro examples) are always treated as if NSHighResolutionCapable was set to true.

I have tested it by bundling ex_bitmap by following the instructions here.
I made sure that bundle's Info.plist is taken into account by changing, say, window title through the parameters in plist file. Here is the structure:
$ tree ex_bitmap.app/
ex_bitmap.app/
└── Contents
    ├── Info.plist
    ├── MacOS
    │   └── ex_bitmap
    └── Resources
        └── data
            └── mysha.pcx

Where Info.plist contains:
<?xml version=""1.0"" encoding=""UTF-8""?>
<!DOCTYPE plist PUBLIC ""-//Apple Computer//DTD PLIST 1.0//EN"" ""http://www.apple.com/DTDs/PropertyList-1.0.dtd"">
<plist version=""1.0"">
<dict>
	<key>CFBundleDevelopmentRegion</key>
	<string>English</string>
	<key>CFBundleExecutable</key>
	<string>ex_bitmap</string>
	<key>CFBundleGetInfoString</key>
	<string>5.1, Copyright 2010 Allegro Developers</string>
	<key>CFBundleIconFile</key>
	<string></string>
	<key>CFBundleIdentifier</key>
	<string>org.liballeg.ex_bitmap</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleLongVersionString</key>
	<string>Allegro Ex Bitmap</string>
	<key>CFBundleName</key>
	<string></string>
	<key>CFBundlePackageType</key>
	<string>APPL</string>
	<key>CFBundleShortVersionString</key>
	<string>5.1</string>
	<key>CFBundleSignature</key>
	<string>????</string>
	<key>CFBundleVersion</key>
	<string></string>
	<key>CSResourcesFileMapped</key>
	<true/>
	<key>NSHumanReadableCopyright</key>
	<string>Copyright 2010 Allegro Developers</string>
        <key>NSHighResolutionCapable</key>
        <true/>
</dict>
</plist>",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,913,2018-06-22T18:36:36Z,2018-08-06T02:03:25Z,2018-08-06T02:03:50Z,MERGED,True,151,4,9,https://github.com/neuro-sys,Add ability to query DPI of an attached screen,8,[],https://github.com/liballeg/allegro5/pull/913,https://github.com/SiegeLord,15,https://github.com/liballeg/allegro5/pull/913#issuecomment-406886918,"I needed to query DPI for at least Windows, Linux and MacOS platforms for my own stuff, here's the one for Linux, and MacOS and Windows. Although I'm not all too familiar with Allegro codebase, so I'm happy to improve this branch if you provide directions.","Thanks for testing this, that's very interesting and puzzling. I was actually reasonably sure that my change wouldn't work you since I apply the scaling factor twice (this explains the large DPIs, although they should be somewhat large for retina displays, somewhere in the 200 range). You make an excellent point about us wanting DPI values to be similar across platforms for the same hardware, I don't think my change is getting us that.
Could you try removing the multiplication here and trying again? SiegeLord@349392e#diff-fa95f3e76664b8255cc4c98127a91f9eR424
Also, I'll be super curious if you could log the scaling factor that is used in that function.
And interesting news about the bundle settings... I guess you're right, the setting is ignored then.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,913,2018-06-22T18:36:36Z,2018-08-06T02:03:25Z,2018-08-06T02:03:50Z,MERGED,True,151,4,9,https://github.com/neuro-sys,Add ability to query DPI of an attached screen,8,[],https://github.com/liballeg/allegro5/pull/913,https://github.com/neuro-sys,16,https://github.com/liballeg/allegro5/pull/913#issuecomment-406887908,"I needed to query DPI for at least Windows, Linux and MacOS platforms for my own stuff, here's the one for Linux, and MacOS and Windows. Although I'm not all too familiar with Allegro codebase, so I'm happy to improve this branch if you provide directions.","Could you try removing the multiplication here and trying again? SiegeLord/allegro5@349392e#diff-fa95f3e76664b8255cc4c98127a91f9eR424

I removed the scaling factor and printed the value to stdout, and took a screenshot for comparison. It prints 2.0f for both display modes.


DPI values to be similar across platforms for the same hardware

With the tests I've done on all platforms, it seemed ""reasonable"" so far, now that after removing the scaling factor from the function you pointed. To get it exactly the same on all platforms will require some more thinking on my part for the time being.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,913,2018-06-22T18:36:36Z,2018-08-06T02:03:25Z,2018-08-06T02:03:50Z,MERGED,True,151,4,9,https://github.com/neuro-sys,Add ability to query DPI of an attached screen,8,[],https://github.com/liballeg/allegro5/pull/913,https://github.com/SiegeLord,17,https://github.com/liballeg/allegro5/pull/913#issuecomment-410568835,"I needed to query DPI for at least Windows, Linux and MacOS platforms for my own stuff, here's the one for Linux, and MacOS and Windows. Although I'm not all too familiar with Allegro codebase, so I'm happy to improve this branch if you provide directions.","Ok, that's good enough for now. Thanks a lot for your contribution!",True,"{'THUMBS_UP': ['https://github.com/neuro-sys', 'https://github.com/beoran']}"
liballeg/allegro5,https://github.com/liballeg/allegro5,915,2018-06-28T21:28:41Z,,2018-06-29T14:52:41Z,OPEN,False,76,51,11,https://github.com/arves100,Fixed compilation for older C,5,[],https://github.com/liballeg/allegro5/pull/915,https://github.com/arves100,1,https://github.com/liballeg/allegro5/pull/915,"This commit fixes compilation of Allegro5 library for compilers that dosen't support C99 for Windows builds without any dependency.
Tested with Visual Sutdio 2008.","This commit fixes compilation of Allegro5 library for compilers that dosen't support C99 for Windows builds without any dependency.
Tested with Visual Sutdio 2008.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,915,2018-06-28T21:28:41Z,,2018-06-29T14:52:41Z,OPEN,False,76,51,11,https://github.com/arves100,Fixed compilation for older C,5,[],https://github.com/liballeg/allegro5/pull/915,https://github.com/arves100,2,https://github.com/liballeg/allegro5/pull/915#issuecomment-401346844,"This commit fixes compilation of Allegro5 library for compilers that dosen't support C99 for Windows builds without any dependency.
Tested with Visual Sutdio 2008.","By now, allegro, color, dialog, font, image, memfile, primitives and ttf should compile.
Image without libwebp support.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,915,2018-06-28T21:28:41Z,,2018-06-29T14:52:41Z,OPEN,False,76,51,11,https://github.com/arves100,Fixed compilation for older C,5,[],https://github.com/liballeg/allegro5/pull/915,https://github.com/elias-pschernig,3,https://github.com/liballeg/allegro5/pull/915#issuecomment-401368659,"This commit fixes compilation of Allegro5 library for compilers that dosen't support C99 for Windows builds without any dependency.
Tested with Visual Sutdio 2008.","Just out of curiosity, why are using such an ancient compiler? In a way it would be nice to move forward and remove support for outdated compilers from Allegro over time (for example require stdint support) - so I'm a bit conflicted about all the changes now to support something so old.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,915,2018-06-28T21:28:41Z,,2018-06-29T14:52:41Z,OPEN,False,76,51,11,https://github.com/arves100,Fixed compilation for older C,5,[],https://github.com/liballeg/allegro5/pull/915,https://github.com/fatcerberus,4,https://github.com/liballeg/allegro5/pull/915#issuecomment-401369376,"This commit fixes compilation of Allegro5 library for compilers that dosen't support C99 for Windows builds without any dependency.
Tested with Visual Sutdio 2008.","I agree with Elias, VS2008 is 10 years old at this point.  I thought our documentation already stated we required C99 support anyway?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,915,2018-06-28T21:28:41Z,,2018-06-29T14:52:41Z,OPEN,False,76,51,11,https://github.com/arves100,Fixed compilation for older C,5,[],https://github.com/liballeg/allegro5/pull/915,https://github.com/dos1,5,https://github.com/liballeg/allegro5/pull/915#issuecomment-401369590,"This commit fixes compilation of Allegro5 library for compilers that dosen't support C99 for Windows builds without any dependency.
Tested with Visual Sutdio 2008.","I think it may be because older Visual Studio use stdlib that's included in Windows, while newer ones need redistributables (I think). However, I'm also conflicted about such stuff, as it definitely doesn't make the code more legible. It may be nice to have such branch floating around somewhere for such strange use cases, but I'm not sure if it should be merged in after all.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,915,2018-06-28T21:28:41Z,,2018-06-29T14:52:41Z,OPEN,False,76,51,11,https://github.com/arves100,Fixed compilation for older C,5,[],https://github.com/liballeg/allegro5/pull/915,https://github.com/arves100,6,https://github.com/liballeg/allegro5/pull/915#issuecomment-401377565,"This commit fixes compilation of Allegro5 library for compilers that dosen't support C99 for Windows builds without any dependency.
Tested with Visual Sutdio 2008.","I haven't checked the documentation if it requires C99.
If so, I could keep this changes into my account in case someone needs it.
Unfortunaly it dosen't help the code begin more redible.
I still use vs2008 because it's the fastest in compilation and IDE usage (my pentium cpu doesn't like newer vs) in Windows.
While there are alternatives like CodeBlocks, I don't like none of the open ide, while Vscode it's slow and it's missing several features for C/C++ development.
Regarding stdint, Allegro already have astdint that defined the missing types (uint16_t,...), so I guess there's no problem.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,916,2018-06-29T13:01:44Z,2018-07-22T00:56:43Z,2018-08-02T23:44:14Z,MERGED,True,12,0,1,https://github.com/arves100,Added macro definitions for compilers that dosen't have stdint,1,[],https://github.com/liballeg/allegro5/pull/916,https://github.com/arves100,1,https://github.com/liballeg/allegro5/pull/916,"Compiler: Visual Studio 2008
I received an error about UINT16_MAX not defined, this compiler dosen't support stdint.h.
This commit should add the all the macros used by this custom types.
I haven't tested it with other compilers than VS2008, I think it could, at least, warn about some macro redefinitions.","Compiler: Visual Studio 2008
I received an error about UINT16_MAX not defined, this compiler dosen't support stdint.h.
This commit should add the all the macros used by this custom types.
I haven't tested it with other compilers than VS2008, I think it could, at least, warn about some macro redefinitions.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,916,2018-06-29T13:01:44Z,2018-07-22T00:56:43Z,2018-08-02T23:44:14Z,MERGED,True,12,0,1,https://github.com/arves100,Added macro definitions for compilers that dosen't have stdint,1,[],https://github.com/liballeg/allegro5/pull/916,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/916#issuecomment-406833297,"Compiler: Visual Studio 2008
I received an error about UINT16_MAX not defined, this compiler dosen't support stdint.h.
This commit should add the all the macros used by this custom types.
I haven't tested it with other compilers than VS2008, I think it could, at least, warn about some macro redefinitions.",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,916,2018-06-29T13:01:44Z,2018-07-22T00:56:43Z,2018-08-02T23:44:14Z,MERGED,True,12,0,1,https://github.com/arves100,Added macro definitions for compilers that dosen't have stdint,1,[],https://github.com/liballeg/allegro5/pull/916,https://github.com/dos1,3,https://github.com/liballeg/allegro5/pull/916#issuecomment-410091098,"Compiler: Visual Studio 2008
I received an error about UINT16_MAX not defined, this compiler dosen't support stdint.h.
This commit should add the all the macros used by this custom types.
I haven't tested it with other compilers than VS2008, I think it could, at least, warn about some macro redefinitions.",I believe it should be guarded with some #ifdefs.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,916,2018-06-29T13:01:44Z,2018-07-22T00:56:43Z,2018-08-02T23:44:14Z,MERGED,True,12,0,1,https://github.com/arves100,Added macro definitions for compilers that dosen't have stdint,1,[],https://github.com/liballeg/allegro5/pull/916,https://github.com/arves100,4,https://github.com/liballeg/allegro5/pull/916#issuecomment-410098456,"Compiler: Visual Studio 2008
I received an error about UINT16_MAX not defined, this compiler dosen't support stdint.h.
This commit should add the all the macros used by this custom types.
I haven't tested it with other compilers than VS2008, I think it could, at least, warn about some macro redefinitions.","I belive that compilers that does not have stdint support should not have
that headers, at least with vs2008. However that should be tested with
other compilers.

Il ven 3 ago 2018, 00:45 Sebastian Krzyszkowiak <notifications@github.com>
ha scritto:
…
 I believe it should be guarded with some #ifdefs.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#916 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/AEn4E2IZp0yUyD_OrTLS-CSdPwBpLHQ7ks5uM4EWgaJpZM4U8_CR>
 .",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,916,2018-06-29T13:01:44Z,2018-07-22T00:56:43Z,2018-08-02T23:44:14Z,MERGED,True,12,0,1,https://github.com/arves100,Added macro definitions for compilers that dosen't have stdint,1,[],https://github.com/liballeg/allegro5/pull/916,https://github.com/dos1,5,https://github.com/liballeg/allegro5/pull/916#issuecomment-410101205,"Compiler: Visual Studio 2008
I received an error about UINT16_MAX not defined, this compiler dosen't support stdint.h.
This commit should add the all the macros used by this custom types.
I haven't tested it with other compilers than VS2008, I think it could, at least, warn about some macro redefinitions.","On second thought, yeah, it should be fine as it is, sorry :)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,917,2018-06-29T13:04:56Z,2018-07-22T01:12:53Z,2018-07-22T11:13:24Z,MERGED,True,103,1,2,https://github.com/arves100,Added support of HarfBuzz in FreeType,1,[],https://github.com/liballeg/allegro5/pull/917,https://github.com/arves100,1,https://github.com/liballeg/allegro5/pull/917,"I've added HarfBuzz compilation support for FreeType, since the current CMakeLists dosen't support it, it pops up some linking error.
HarfBuzz MUST be compiled with HB_HAVE_FREETYPE otherwise the linking won't succed.","I've added HarfBuzz compilation support for FreeType, since the current CMakeLists dosen't support it, it pops up some linking error.
HarfBuzz MUST be compiled with HB_HAVE_FREETYPE otherwise the linking won't succed.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,917,2018-06-29T13:04:56Z,2018-07-22T01:12:53Z,2018-07-22T11:13:24Z,MERGED,True,103,1,2,https://github.com/arves100,Added support of HarfBuzz in FreeType,1,[],https://github.com/liballeg/allegro5/pull/917,https://github.com/elias-pschernig,2,https://github.com/liballeg/allegro5/pull/917#issuecomment-401368042,"I've added HarfBuzz compilation support for FreeType, since the current CMakeLists dosen't support it, it pops up some linking error.
HarfBuzz MUST be compiled with HB_HAVE_FREETYPE otherwise the linking won't succed.",I somehow think cmake's Freetype detection should include all the libraries required to link against freetype. I can see you only did what was already done for other similar dependencies so if we can't come up with a better solution that looks reasonable - but I have this feeling there should be a better way.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,917,2018-06-29T13:04:56Z,2018-07-22T01:12:53Z,2018-07-22T11:13:24Z,MERGED,True,103,1,2,https://github.com/arves100,Added support of HarfBuzz in FreeType,1,[],https://github.com/liballeg/allegro5/pull/917,https://github.com/fatcerberus,3,https://github.com/liballeg/allegro5/pull/917#issuecomment-401368652,"I've added HarfBuzz compilation support for FreeType, since the current CMakeLists dosen't support it, it pops up some linking error.
HarfBuzz MUST be compiled with HB_HAVE_FREETYPE otherwise the linking won't succed.",I recall there were attempts in the past to improve FreeType dependency detection; what we have now was deemed the best we could do.  /cc @SiegeLord,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,917,2018-06-29T13:04:56Z,2018-07-22T01:12:53Z,2018-07-22T11:13:24Z,MERGED,True,103,1,2,https://github.com/arves100,Added support of HarfBuzz in FreeType,1,[],https://github.com/liballeg/allegro5/pull/917,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/917#issuecomment-401557993,"I've added HarfBuzz compilation support for FreeType, since the current CMakeLists dosen't support it, it pops up some linking error.
HarfBuzz MUST be compiled with HB_HAVE_FREETYPE otherwise the linking won't succed.","I'm open to suggestions of how to make it better. Recent FreeTypes correctly adjust their include files to reflect what options they support, so we could do the automatic detection there.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,917,2018-06-29T13:04:56Z,2018-07-22T01:12:53Z,2018-07-22T11:13:24Z,MERGED,True,103,1,2,https://github.com/arves100,Added support of HarfBuzz in FreeType,1,[],https://github.com/liballeg/allegro5/pull/917,https://github.com/SiegeLord,5,https://github.com/liballeg/allegro5/pull/917#issuecomment-406833987,"I've added HarfBuzz compilation support for FreeType, since the current CMakeLists dosen't support it, it pops up some linking error.
HarfBuzz MUST be compiled with HB_HAVE_FREETYPE otherwise the linking won't succed.","Ok, merging this as is. I'll try to get HarfBuzz included into the Windows binaries for the next release. Thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,918,2018-06-29T13:06:18Z,2018-07-22T00:57:13Z,2018-07-22T11:13:38Z,MERGED,True,0,1,1,https://github.com/arves100,Removed stdint.h in allegro/image/bmp.c,1,[],https://github.com/liballeg/allegro5/pull/918,https://github.com/arves100,1,https://github.com/liballeg/allegro5/pull/918,"My compiler (Visual studio 2008) dosen't contain stdint.h, so i remove the inclusion.
Didn't allegro already include astdint.h, making the inclusion pointless?","My compiler (Visual studio 2008) dosen't contain stdint.h, so i remove the inclusion.
Didn't allegro already include astdint.h, making the inclusion pointless?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,918,2018-06-29T13:06:18Z,2018-07-22T00:57:13Z,2018-07-22T11:13:38Z,MERGED,True,0,1,1,https://github.com/arves100,Removed stdint.h in allegro/image/bmp.c,1,[],https://github.com/liballeg/allegro5/pull/918,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/918#issuecomment-406833312,"My compiler (Visual studio 2008) dosen't contain stdint.h, so i remove the inclusion.
Didn't allegro already include astdint.h, making the inclusion pointless?",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,925,2018-09-03T19:19:57Z,2018-09-08T18:07:42Z,2018-09-08T18:08:50Z,MERGED,True,396,17,15,https://github.com/SiegeLord,Bitmap blenders 2.0,7,[],https://github.com/liballeg/allegro5/pull/925,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/925,Completion of #805,Completion of #805,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,925,2018-09-03T19:19:57Z,2018-09-08T18:07:42Z,2018-09-08T18:08:50Z,MERGED,True,396,17,15,https://github.com/SiegeLord,Bitmap blenders 2.0,7,[],https://github.com/liballeg/allegro5/pull/925,https://github.com/fatcerberus,2,https://github.com/liballeg/allegro5/pull/925#issuecomment-419662175,Completion of #805,"Thanks for finishing this up for me @SiegeLord, I’ll look forward to using these in 5.2.5. 😄",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,926,2018-09-04T23:25:58Z,2018-09-08T18:09:26Z,2018-09-08T18:09:37Z,MERGED,True,3,1,1,https://github.com/dos1,SDL: don't send repeated KEY_DOWNs,1,[],https://github.com/liballeg/allegro5/pull/926,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/926,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,926,2018-09-04T23:25:58Z,2018-09-08T18:09:26Z,2018-09-08T18:09:37Z,MERGED,True,3,1,1,https://github.com/dos1,SDL: don't send repeated KEY_DOWNs,1,[],https://github.com/liballeg/allegro5/pull/926,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/926#issuecomment-419662219,,Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,928,2018-09-09T02:27:15Z,2018-10-13T21:04:45Z,2018-10-13T21:04:50Z,MERGED,True,2,2,1,https://github.com/dos1,SDL: add some missing keycodes,1,[],https://github.com/liballeg/allegro5/pull/928,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/928,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,928,2018-09-09T02:27:15Z,2018-10-13T21:04:45Z,2018-10-13T21:04:50Z,MERGED,True,2,2,1,https://github.com/dos1,SDL: add some missing keycodes,1,[],https://github.com/liballeg/allegro5/pull/928,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/928#issuecomment-429575190,,Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,929,2018-09-10T02:49:39Z,2018-10-13T21:06:18Z,2018-10-13T21:06:37Z,MERGED,True,1,20,2,https://github.com/dos1,SDL: fix segfaults in mutex handling,1,[],https://github.com/liballeg/allegro5/pull/929,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/929,"This is fixed by just removing the code as SDL mutexes are already recursive.
The removed code segfaulted when locking the mutex from another thread than the one that created it (SDL_TLSGet returned NULL, because nothing set it for that thread before).","This is fixed by just removing the code as SDL mutexes are already recursive.
The removed code segfaulted when locking the mutex from another thread than the one that created it (SDL_TLSGet returned NULL, because nothing set it for that thread before).",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,929,2018-09-10T02:49:39Z,2018-10-13T21:06:18Z,2018-10-13T21:06:37Z,MERGED,True,1,20,2,https://github.com/dos1,SDL: fix segfaults in mutex handling,1,[],https://github.com/liballeg/allegro5/pull/929,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/929#issuecomment-429575312,"This is fixed by just removing the code as SDL mutexes are already recursive.
The removed code segfaulted when locking the mutex from another thread than the one that created it (SDL_TLSGet returned NULL, because nothing set it for that thread before).","Thanks, didn't test this but your reasoning makes sense.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,931,2018-10-03T16:15:50Z,2018-10-13T21:10:04Z,2018-10-13T22:08:32Z,MERGED,True,1,0,1,https://github.com/dos1,Fix memory leak in al_install_joystick under Linux,1,[],https://github.com/liballeg/allegro5/pull/931,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/931,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,931,2018-10-03T16:15:50Z,2018-10-13T21:10:04Z,2018-10-13T22:08:32Z,MERGED,True,1,0,1,https://github.com/dos1,Fix memory leak in al_install_joystick under Linux,1,[],https://github.com/liballeg/allegro5/pull/931,https://github.com/fatcerberus,2,https://github.com/liballeg/allegro5/pull/931#issuecomment-426702199,,This is part of why I’m in the process of switching to tinydir for directory listing in miniSphere; not only is the fs_entry API kind of heavy for most purposes but it seems too easy to create memory leaks like the one being fixed here.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,931,2018-10-03T16:15:50Z,2018-10-13T21:10:04Z,2018-10-13T22:08:32Z,MERGED,True,1,0,1,https://github.com/dos1,Fix memory leak in al_install_joystick under Linux,1,[],https://github.com/liballeg/allegro5/pull/931,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/931#issuecomment-429575525,,"Thanks!
@fatcerberus Do you have anything in particular we could improve? Or should we just look at tinydir for inspiration?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,931,2018-10-03T16:15:50Z,2018-10-13T21:10:04Z,2018-10-13T22:08:32Z,MERGED,True,1,0,1,https://github.com/dos1,Fix memory leak in al_install_joystick under Linux,1,[],https://github.com/liballeg/allegro5/pull/931,https://github.com/fatcerberus,4,https://github.com/liballeg/allegro5/pull/931#issuecomment-429577561,,"Ideally I would prefer not to have to call al_destroy_fs_entry() for each entry - but I don't think this is possible to change without breaking downstream code, sadly. 😢   Often I want to skip entries using continue (when filtering by wildcard, e.g.) and it's easy to create leaks that way by forgetting to free the fs_entry structure.  In fact that's the exact cause of the leak fixed here.
A smaller complaint I have is the need to create an ALLEGRO_FS_ENTRY for the directory being traversed seems like an unnecessary extra step--would be great just to be able to pass in a directory name directly to al_open_directory",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,931,2018-10-03T16:15:50Z,2018-10-13T21:10:04Z,2018-10-13T22:08:32Z,MERGED,True,1,0,1,https://github.com/dos1,Fix memory leak in al_install_joystick under Linux,1,[],https://github.com/liballeg/allegro5/pull/931,https://github.com/fatcerberus,5,https://github.com/liballeg/allegro5/pull/931#issuecomment-429578272,,I note additionally that dynamically allocating a structure for each file or directory listed may also be a performance concern when traversing large directories.  malloc can be surprisingly expensive--see for example cxong/tinydir#6,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,931,2018-10-03T16:15:50Z,2018-10-13T21:10:04Z,2018-10-13T22:08:32Z,MERGED,True,1,0,1,https://github.com/dos1,Fix memory leak in al_install_joystick under Linux,1,[],https://github.com/liballeg/allegro5/pull/931,https://github.com/SiegeLord,6,https://github.com/liballeg/allegro5/pull/931#issuecomment-429579281,,Could just add a new function instead of al_read_directory that doesn't allocate a new entry every time. I think it's possible.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,932,2018-10-06T14:43:34Z,2018-10-13T21:16:23Z,2018-10-13T21:16:23Z,MERGED,True,4,0,1,https://github.com/elias-pschernig,fix python3 string return bug,1,[],https://github.com/liballeg/allegro5/pull/932,https://github.com/elias-pschernig,1,https://github.com/liballeg/allegro5/pull/932,It seems the python wrapper never allowed using functions returning a string under Python3. This patch will fix calling any functions returning a string from Python3 and will have them return a normal Python string.,It seems the python wrapper never allowed using functions returning a string under Python3. This patch will fix calling any functions returning a string from Python3 and will have them return a normal Python string.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,932,2018-10-06T14:43:34Z,2018-10-13T21:16:23Z,2018-10-13T21:16:23Z,MERGED,True,4,0,1,https://github.com/elias-pschernig,fix python3 string return bug,1,[],https://github.com/liballeg/allegro5/pull/932,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/932#issuecomment-429575926,It seems the python wrapper never allowed using functions returning a string under Python3. This patch will fix calling any functions returning a string from Python3 and will have them return a normal Python string.,Friends don't let friends use python 3 🐍,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,933,2018-10-06T15:56:09Z,2018-10-13T21:20:39Z,2018-10-13T21:20:40Z,MERGED,True,33,3,2,https://github.com/elias-pschernig,fix and clarify shader docs,1,[],https://github.com/liballeg/allegro5/pull/933,https://github.com/elias-pschernig,1,https://github.com/liballeg/allegro5/pull/933,"The user attributes are named al_user_attr_# and not user_attr_# as
claimed in the documentation. Also clarify how you can use those
attributes.","The user attributes are named al_user_attr_# and not user_attr_# as
claimed in the documentation. Also clarify how you can use those
attributes.",True,{'THUMBS_UP': ['https://github.com/dos1']}
liballeg/allegro5,https://github.com/liballeg/allegro5,933,2018-10-06T15:56:09Z,2018-10-13T21:20:39Z,2018-10-13T21:20:40Z,MERGED,True,33,3,2,https://github.com/elias-pschernig,fix and clarify shader docs,1,[],https://github.com/liballeg/allegro5/pull/933,https://github.com/dos1,2,https://github.com/liballeg/allegro5/pull/933#issuecomment-427693630,"The user attributes are named al_user_attr_# and not user_attr_# as
claimed in the documentation. Also clarify how you can use those
attributes.","Oh, good one. I remember figuring it out by myself, wasn't particularly easy :)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,933,2018-10-06T15:56:09Z,2018-10-13T21:20:39Z,2018-10-13T21:20:40Z,MERGED,True,33,3,2,https://github.com/elias-pschernig,fix and clarify shader docs,1,[],https://github.com/liballeg/allegro5/pull/933,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/933#issuecomment-429576212,"The user attributes are named al_user_attr_# and not user_attr_# as
claimed in the documentation. Also clarify how you can use those
attributes.","Nice, thanks Elias!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,938,2018-10-12T21:02:54Z,2018-11-15T07:15:04Z,2018-11-15T07:15:04Z,MERGED,True,9,10,1,https://github.com/NewCreature,Allow modules to loop properly when the user hasn't specified loop po…,1,[],https://github.com/liballeg/allegro5/pull/938,https://github.com/NewCreature,1,https://github.com/liballeg/allegro5/pull/938,"…ints. I think this might have been broken in commit 3919ac2. Previously, if you loaded a module audio stream and played it back with ALLEGRO_PLAYMODE_LOOP and hadn't specified a loop yourself, the module would loop properly to the loop points set within the module itself. I think this is the behavior that anyone using modular music would expect within their applications. Also, since the looping is now handled by the audio add-on instead of individual codec handlers, I have removed the looping code and fixed the rewind code to rewind to the user-specified loop point instead of the beginning.","…ints. I think this might have been broken in commit 3919ac2. Previously, if you loaded a module audio stream and played it back with ALLEGRO_PLAYMODE_LOOP and hadn't specified a loop yourself, the module would loop properly to the loop points set within the module itself. I think this is the behavior that anyone using modular music would expect within their applications. Also, since the looping is now handled by the audio add-on instead of individual codec handlers, I have removed the looping code and fixed the rewind code to rewind to the user-specified loop point instead of the beginning.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,938,2018-10-12T21:02:54Z,2018-11-15T07:15:04Z,2018-11-15T07:15:04Z,MERGED,True,9,10,1,https://github.com/NewCreature,Allow modules to loop properly when the user hasn't specified loop po…,1,[],https://github.com/liballeg/allegro5/pull/938,https://github.com/fatcerberus,2,https://github.com/liballeg/allegro5/pull/938#issuecomment-429464146,"…ints. I think this might have been broken in commit 3919ac2. Previously, if you loaded a module audio stream and played it back with ALLEGRO_PLAYMODE_LOOP and hadn't specified a loop yourself, the module would loop properly to the loop points set within the module itself. I think this is the behavior that anyone using modular music would expect within their applications. Also, since the looping is now handled by the audio add-on instead of individual codec handlers, I have removed the looping code and fixed the rewind code to rewind to the user-specified loop point instead of the beginning.",It hasn’t been my observation that module playback is broken—the loop info in the module file itself was still honored last I checked.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,938,2018-10-12T21:02:54Z,2018-11-15T07:15:04Z,2018-11-15T07:15:04Z,MERGED,True,9,10,1,https://github.com/NewCreature,Allow modules to loop properly when the user hasn't specified loop po…,1,[],https://github.com/liballeg/allegro5/pull/938,https://github.com/NewCreature,3,https://github.com/liballeg/allegro5/pull/938#issuecomment-429504645,"…ints. I think this might have been broken in commit 3919ac2. Previously, if you loaded a module audio stream and played it back with ALLEGRO_PLAYMODE_LOOP and hadn't specified a loop yourself, the module would loop properly to the loop points set within the module itself. I think this is the behavior that anyone using modular music would expect within their applications. Also, since the looping is now handled by the audio add-on instead of individual codec handlers, I have removed the looping code and fixed the rewind code to rewind to the user-specified loop point instead of the beginning.","I just noticed it recently while updating a project of mine. I think it might possibly only manifest if you use DUMB 2.0.x. That's what I'm using. I haven't looked into it thoroughly. I found that when the module reaches the loop point, it doesn't fill the buffer all the way, causing the streaming code to rewind the stream, thus ignoring the module's own loop data.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,938,2018-10-12T21:02:54Z,2018-11-15T07:15:04Z,2018-11-15T07:15:04Z,MERGED,True,9,10,1,https://github.com/NewCreature,Allow modules to loop properly when the user hasn't specified loop po…,1,[],https://github.com/liballeg/allegro5/pull/938,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/938#issuecomment-429580788,"…ints. I think this might have been broken in commit 3919ac2. Previously, if you loaded a module audio stream and played it back with ALLEGRO_PLAYMODE_LOOP and hadn't specified a loop yourself, the module would loop properly to the loop points set within the module itself. I think this is the behavior that anyone using modular music would expect within their applications. Also, since the looping is now handled by the audio add-on instead of individual codec handlers, I have removed the looping code and fixed the rewind code to rewind to the user-specified loop point instead of the beginning.","@NewCreature You don't happen to have a module that has internal looping? I used to have one when I was testing this last (pre-DUMB 2.0), but I can't find it now.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,938,2018-10-12T21:02:54Z,2018-11-15T07:15:04Z,2018-11-15T07:15:04Z,MERGED,True,9,10,1,https://github.com/NewCreature,Allow modules to loop properly when the user hasn't specified loop po…,1,[],https://github.com/liballeg/allegro5/pull/938,https://github.com/NewCreature,5,https://github.com/liballeg/allegro5/pull/938#issuecomment-429586776,"…ints. I think this might have been broken in commit 3919ac2. Previously, if you loaded a module audio stream and played it back with ALLEGRO_PLAYMODE_LOOP and hadn't specified a loop yourself, the module would loop properly to the loop points set within the module itself. I think this is the behavior that anyone using modular music would expect within their applications. Also, since the looping is now handled by the audio add-on instead of individual codec handlers, I have removed the looping code and fixed the rewind code to rewind to the user-specified loop point instead of the beginning.","neon.xm.zip
This is the song I first noticed it on. After noticing it here, I tested some other songs and they all fail to loop properly. In this particular song, when it reaches the end it is supposed to loop back to order 1, but instead goes back to the beginning (order 0). All the other looping songs I tested gave the same results.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,938,2018-10-12T21:02:54Z,2018-11-15T07:15:04Z,2018-11-15T07:15:04Z,MERGED,True,9,10,1,https://github.com/NewCreature,Allow modules to loop properly when the user hasn't specified loop po…,1,[],https://github.com/liballeg/allegro5/pull/938,https://github.com/SiegeLord,6,https://github.com/liballeg/allegro5/pull/938#issuecomment-438941217,"…ints. I think this might have been broken in commit 3919ac2. Previously, if you loaded a module audio stream and played it back with ALLEGRO_PLAYMODE_LOOP and hadn't specified a loop yourself, the module would loop properly to the loop points set within the module itself. I think this is the behavior that anyone using modular music would expect within their applications. Also, since the looping is now handled by the audio add-on instead of individual codec handlers, I have removed the looping code and fixed the rewind code to rewind to the user-specified loop point instead of the beginning.","Ok, I tested this and indeed it's a DUMB 2.0-only issue (didn't investigate why). I checked that with this patch DUMB 0.93 and 2.0 work the same way and properly loop, so it all looks good to me.
Thanks a lot!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,939,2018-10-13T04:43:05Z,2018-10-19T06:18:13Z,2018-10-19T06:18:13Z,MERGED,True,12,9,2,https://github.com/dougmencken,acodec/wav: fix swapping for big endian,2,[],https://github.com/liballeg/allegro5/pull/939,https://github.com/dougmencken,1,https://github.com/liballeg/allegro5/pull/939,"Current code just moves one byte left without swapping http://coliru.stacked-crooked.com/a/87be408dc4c14d6b because it doesn’t increment by two inside while (p < end) { uint8_t *const q = p + 1; const uint8_t tmp = *p; *p = *q; *q = tmp; p = q; }, it swaps 0th byte with 1st then instead of swapping 2nd and 3rd it swaps 1st and 2nd
This is how does fixed code work http://coliru.stacked-crooked.com/a/196d759192422012
Plus, aqueue driver needs to be fixed to play samples on big endian without multiplying gain by 0.089(9) https://developer.apple.com/documentation/coreaudio/klinearpcmformatflagisbigendian","Current code just moves one byte left without swapping http://coliru.stacked-crooked.com/a/87be408dc4c14d6b because it doesn’t increment by two inside while (p < end) { uint8_t *const q = p + 1; const uint8_t tmp = *p; *p = *q; *q = tmp; p = q; }, it swaps 0th byte with 1st then instead of swapping 2nd and 3rd it swaps 1st and 2nd
This is how does fixed code work http://coliru.stacked-crooked.com/a/196d759192422012
Plus, aqueue driver needs to be fixed to play samples on big endian without multiplying gain by 0.089(9) https://developer.apple.com/documentation/coreaudio/klinearpcmformatflagisbigendian",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,939,2018-10-13T04:43:05Z,2018-10-19T06:18:13Z,2018-10-19T06:18:13Z,MERGED,True,12,9,2,https://github.com/dougmencken,acodec/wav: fix swapping for big endian,2,[],https://github.com/liballeg/allegro5/pull/939,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/939#issuecomment-431256695,"Current code just moves one byte left without swapping http://coliru.stacked-crooked.com/a/87be408dc4c14d6b because it doesn’t increment by two inside while (p < end) { uint8_t *const q = p + 1; const uint8_t tmp = *p; *p = *q; *q = tmp; p = q; }, it swaps 0th byte with 1st then instead of swapping 2nd and 3rd it swaps 1st and 2nd
This is how does fixed code work http://coliru.stacked-crooked.com/a/196d759192422012
Plus, aqueue driver needs to be fixed to play samples on big endian without multiplying gain by 0.089(9) https://developer.apple.com/documentation/coreaudio/klinearpcmformatflagisbigendian","Don't really have a way to test the OSX changes, but everything seems reasonable. Thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,943,2018-10-16T01:36:00Z,2018-11-12T02:51:14Z,2018-11-12T05:13:38Z,MERGED,True,30,0,3,https://github.com/elias-pschernig,add al_transpose_transform,1,[],https://github.com/liballeg/allegro5/pull/943,https://github.com/elias-pschernig,1,https://github.com/liballeg/allegro5/pull/943,I just needed this functionality and was thinking it almost would be useful to have in Allegro itself - even if it is a bit hard to explain...,I just needed this functionality and was thinking it almost would be useful to have in Allegro itself - even if it is a bit hard to explain...,True,{'THUMBS_UP': ['https://github.com/beoran']}
liballeg/allegro5,https://github.com/liballeg/allegro5,943,2018-10-16T01:36:00Z,2018-11-12T02:51:14Z,2018-11-12T05:13:38Z,MERGED,True,30,0,3,https://github.com/elias-pschernig,add al_transpose_transform,1,[],https://github.com/liballeg/allegro5/pull/943,https://github.com/fatcerberus,2,https://github.com/liballeg/allegro5/pull/943#issuecomment-430071149,I just needed this functionality and was thinking it almost would be useful to have in Allegro itself - even if it is a bit hard to explain...,"Interestingly glUniformMatrix*fv() takes a transpose parameter, so this is maybe not as out-of-place as it seems.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,943,2018-10-16T01:36:00Z,2018-11-12T02:51:14Z,2018-11-12T05:13:38Z,MERGED,True,30,0,3,https://github.com/elias-pschernig,add al_transpose_transform,1,[],https://github.com/liballeg/allegro5/pull/943,https://github.com/elias-pschernig,3,https://github.com/liballeg/allegro5/pull/943#issuecomment-430075773,I just needed this functionality and was thinking it almost would be useful to have in Allegro itself - even if it is a bit hard to explain...,"Something like:
temp = trans->m[i][j]; trans->m[i][j] = trans->m[j][i]; trans->m[j][i] = temp;
But that still would do 16 assignments to temp and 16 from temp, just instead of allocating 16 floats on the stack would just re-use a single one. I really can't tell if that's a win performance-wise or would just not matter at all. And it makes for very ugly code :P",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,943,2018-10-16T01:36:00Z,2018-11-12T02:51:14Z,2018-11-12T05:13:38Z,MERGED,True,30,0,3,https://github.com/elias-pschernig,add al_transpose_transform,1,[],https://github.com/liballeg/allegro5/pull/943,https://github.com/fatcerberus,4,https://github.com/liballeg/allegro5/pull/943#issuecomment-430102488,I just needed this functionality and was thinking it almost would be useful to have in Allegro itself - even if it is a bit hard to explain...,"Yeah, you're probably right - you'd just end up doing a bunch of individual swaps and probably end up thrashing the CPU cache in the process... making a temp copy of 16 floats upfront is hardly an issue.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,943,2018-10-16T01:36:00Z,2018-11-12T02:51:14Z,2018-11-12T05:13:38Z,MERGED,True,30,0,3,https://github.com/elias-pschernig,add al_transpose_transform,1,[],https://github.com/liballeg/allegro5/pull/943,https://github.com/SiegeLord,5,https://github.com/liballeg/allegro5/pull/943#issuecomment-437736100,I just needed this functionality and was thinking it almost would be useful to have in Allegro itself - even if it is a bit hard to explain...,Looks good to me.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,943,2018-10-16T01:36:00Z,2018-11-12T02:51:14Z,2018-11-12T05:13:38Z,MERGED,True,30,0,3,https://github.com/elias-pschernig,add al_transpose_transform,1,[],https://github.com/liballeg/allegro5/pull/943,https://github.com/fatcerberus,6,https://github.com/liballeg/allegro5/pull/943#issuecomment-437741354,I just needed this functionality and was thinking it almost would be useful to have in Allegro itself - even if it is a bit hard to explain...,"I’m kind of intrigued how it works out mathematically that transposing the rows and columns of the matrix reverses the direction of a rotation.  Intuitively, I wouldn’t have expected it to do anything useful.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,943,2018-10-16T01:36:00Z,2018-11-12T02:51:14Z,2018-11-12T05:13:38Z,MERGED,True,30,0,3,https://github.com/elias-pschernig,add al_transpose_transform,1,[],https://github.com/liballeg/allegro5/pull/943,https://github.com/allefant,7,https://github.com/liballeg/allegro5/pull/943#issuecomment-437752323,I just needed this functionality and was thinking it almost would be useful to have in Allegro itself - even if it is a bit hard to explain...,"I don't really know what transposing a general matrix would do (with translation and scaling and so on...), but if a matrix is just a rotation matrix it just so happens that this trick works.
For example here's a matrix which rotates around the z axis by angle a:



cos a
-sin a
0
0




sin a
cos a
0
0


0
0
1
0


0
0
0
1



Now transpose the entire matrix:



cos a
sin a
0
0




-sin a
cos a
0
0


0
0
1
0


0
0
0
1



And realize how cos(-a) = cos(a) and sin(-a) = -sin(a) and therefore this is identical to:



cos -a
-sin -a
0
0




sin -a
cos -a
0
0


0
0
1
0


0
0
0
1



Which is exactly the rotation to undo the original rotation. And it also works for rotations around arbitrary axes.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,943,2018-10-16T01:36:00Z,2018-11-12T02:51:14Z,2018-11-12T05:13:38Z,MERGED,True,30,0,3,https://github.com/elias-pschernig,add al_transpose_transform,1,[],https://github.com/liballeg/allegro5/pull/943,https://github.com/SiegeLord,8,https://github.com/liballeg/allegro5/pull/943#issuecomment-437756039,I just needed this functionality and was thinking it almost would be useful to have in Allegro itself - even if it is a bit hard to explain...,"On a deeper level, this works out because rotation matrices are orthogonal, which means that their transposes are their inverses. Other orthogonal matrices like that are reflections. Translation and scaling are right out.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,943,2018-10-16T01:36:00Z,2018-11-12T02:51:14Z,2018-11-12T05:13:38Z,MERGED,True,30,0,3,https://github.com/elias-pschernig,add al_transpose_transform,1,[],https://github.com/liballeg/allegro5/pull/943,https://github.com/fatcerberus,9,https://github.com/liballeg/allegro5/pull/943#issuecomment-437758809,I just needed this functionality and was thinking it almost would be useful to have in Allegro itself - even if it is a bit hard to explain...,"Ah, that makes sense, thanks.  On an interesting side note (interesting to me at least), technically reflections are rotations too, you just have to rotate through (not about) the next higher dimensional axis.  A 2D object rotated 180 degrees through Z-space obtains its mirror image across its axis of rotation, same deal in 3D if you rotate through W-space.  You could turn a left shoe into a right shoe if you could only turn it around in the fourth dimension!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,945,2018-10-20T09:00:01Z,2018-11-12T03:17:31Z,2018-11-12T03:17:31Z,MERGED,True,12,3,2,https://github.com/tehsausage,ALSA/PulseAudio crash and memory leak fixes,3,[],https://github.com/liballeg/allegro5/pull/945,https://github.com/tehsausage,1,https://github.com/liballeg/allegro5/pull/945,"Fixes a large memory leak in al_install_audio() if PulseAudio is compiled in but not available, and a smaller memory leak in ALSA after uninstalling audio.
Also comes with a small fix for what appears to be an obvious use-after-free / double-free bug for the ""pa_mainloop_iterate failed"" case in PulseAudio initialization.
I'm not sure if the ALSA fix (issue #944) is the best it could be -- it just waits and re-tries as the existing under-run handler does -- but it should be a pretty rare case anyway.","Fixes a large memory leak in al_install_audio() if PulseAudio is compiled in but not available, and a smaller memory leak in ALSA after uninstalling audio.
Also comes with a small fix for what appears to be an obvious use-after-free / double-free bug for the ""pa_mainloop_iterate failed"" case in PulseAudio initialization.
I'm not sure if the ALSA fix (issue #944) is the best it could be -- it just waits and re-tries as the existing under-run handler does -- but it should be a pretty rare case anyway.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,945,2018-10-20T09:00:01Z,2018-11-12T03:17:31Z,2018-11-12T03:17:31Z,MERGED,True,12,3,2,https://github.com/tehsausage,ALSA/PulseAudio crash and memory leak fixes,3,[],https://github.com/liballeg/allegro5/pull/945,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/945#issuecomment-437739909,"Fixes a large memory leak in al_install_audio() if PulseAudio is compiled in but not available, and a smaller memory leak in ALSA after uninstalling audio.
Also comes with a small fix for what appears to be an obvious use-after-free / double-free bug for the ""pa_mainloop_iterate failed"" case in PulseAudio initialization.
I'm not sure if the ALSA fix (issue #944) is the best it could be -- it just waits and re-tries as the existing under-run handler does -- but it should be a pretty rare case anyway.","Wow, that's a lot of nastiness right there. Thanks a lot for your debugging and fixes!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,950,2018-10-27T04:28:10Z,2018-11-12T03:18:18Z,2018-11-12T03:18:18Z,MERGED,True,25,2,1,https://github.com/dos1,SDL: implement set_display_flag,1,[],https://github.com/liballeg/allegro5/pull/950,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/950,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,950,2018-10-27T04:28:10Z,2018-11-12T03:18:18Z,2018-11-12T03:18:18Z,MERGED,True,25,2,1,https://github.com/dos1,SDL: implement set_display_flag,1,[],https://github.com/liballeg/allegro5/pull/950,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/950#issuecomment-437740013,,Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,952,2018-10-28T03:59:02Z,2019-01-08T16:39:27Z,2019-01-08T16:39:27Z,CLOSED,False,10,3,1,https://github.com/dos1,SDL: hidpi support,1,[],https://github.com/liballeg/allegro5/pull/952,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/952,"This is actually untested, as only after doing that I found out that HIGHDPI support in SDL2 is implemented only for macOS, iOS and Emscripten :D Nevertheless, it's there and should make it match the hidpi behavior of native Allegro on macOS.","This is actually untested, as only after doing that I found out that HIGHDPI support in SDL2 is implemented only for macOS, iOS and Emscripten :D Nevertheless, it's there and should make it match the hidpi behavior of native Allegro on macOS.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,952,2018-10-28T03:59:02Z,2019-01-08T16:39:27Z,2019-01-08T16:39:27Z,CLOSED,False,10,3,1,https://github.com/dos1,SDL: hidpi support,1,[],https://github.com/liballeg/allegro5/pull/952,https://github.com/dos1,2,https://github.com/liballeg/allegro5/pull/952#issuecomment-435303019,"This is actually untested, as only after doing that I found out that HIGHDPI support in SDL2 is implemented only for macOS, iOS and Emscripten :D Nevertheless, it's there and should make it match the hidpi behavior of native Allegro on macOS.","Started to try implementing it in SDL and I think this patch may actually need something more to it, so maybe don't merge it yet :D",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,953,2018-10-28T03:59:26Z,2019-01-21T18:37:17Z,2019-01-21T18:37:17Z,MERGED,True,268,1,4,https://github.com/dos1,SDL: implement touch subsystem,1,[],https://github.com/liballeg/allegro5/pull/953,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/953,"SDL2 only returns absolute positions of touches on the input device. This means we have to fake them in order to make them related to the display, which is what Allegro returns in its API. This is likely to break in lots of cases, but should work well with non-rotated fullscreen or Wayland windows.","SDL2 only returns absolute positions of touches on the input device. This means we have to fake them in order to make them related to the display, which is what Allegro returns in its API. This is likely to break in lots of cases, but should work well with non-rotated fullscreen or Wayland windows.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,953,2018-10-28T03:59:26Z,2019-01-21T18:37:17Z,2019-01-21T18:37:17Z,MERGED,True,268,1,4,https://github.com/dos1,SDL: implement touch subsystem,1,[],https://github.com/liballeg/allegro5/pull/953,https://github.com/dos1,2,https://github.com/liballeg/allegro5/pull/953#issuecomment-455361309,"SDL2 only returns absolute positions of touches on the input device. This means we have to fake them in order to make them related to the display, which is what Allegro returns in its API. This is likely to break in lots of cases, but should work well with non-rotated fullscreen or Wayland windows.",Updated!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,953,2018-10-28T03:59:26Z,2019-01-21T18:37:17Z,2019-01-21T18:37:17Z,MERGED,True,268,1,4,https://github.com/dos1,SDL: implement touch subsystem,1,[],https://github.com/liballeg/allegro5/pull/953,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/953#issuecomment-456165547,"SDL2 only returns absolute positions of touches on the input device. This means we have to fake them in order to make them related to the display, which is what Allegro returns in its API. This is likely to break in lots of cases, but should work well with non-rotated fullscreen or Wayland windows.",Looks good to me! Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,955,2018-11-01T18:15:27Z,2018-11-12T03:19:35Z,2018-11-12T03:19:37Z,MERGED,True,1,1,1,https://github.com/dos1,SDL: use the context created by renderer instead of creating a new one,1,[],https://github.com/liballeg/allegro5/pull/955,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/955,"This fixes issues with fullscreen toggling, as SDL was making its own
context current again behind our back.
Creating this commit took waaaaay more time than it seems from the diff :D","This fixes issues with fullscreen toggling, as SDL was making its own
context current again behind our back.
Creating this commit took waaaaay more time than it seems from the diff :D",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,955,2018-11-01T18:15:27Z,2018-11-12T03:19:35Z,2018-11-12T03:19:37Z,MERGED,True,1,1,1,https://github.com/dos1,SDL: use the context created by renderer instead of creating a new one,1,[],https://github.com/liballeg/allegro5/pull/955,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/955#issuecomment-437740183,"This fixes issues with fullscreen toggling, as SDL was making its own
context current again behind our back.
Creating this commit took waaaaay more time than it seems from the diff :D","Nice, thanks.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,956,2018-11-02T08:17:54Z,2018-12-02T06:10:08Z,2018-12-02T06:10:30Z,MERGED,True,137,5,3,https://github.com/dos1,Bunch of SDL stuff,5,[],https://github.com/liballeg/allegro5/pull/956,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/956,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,956,2018-11-02T08:17:54Z,2018-12-02T06:10:08Z,2018-12-02T06:10:30Z,MERGED,True,137,5,3,https://github.com/dos1,Bunch of SDL stuff,5,[],https://github.com/liballeg/allegro5/pull/956,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/956#issuecomment-443484493,,"Everything looks fine, thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,962,2018-11-28T15:49:00Z,2018-12-09T03:08:11Z,2018-12-13T15:44:23Z,MERGED,True,5,1,1,https://github.com/ivan-mogilko,"4.4: Windows: fix TAB key getting stuck in ""key"" array when held before ALT",1,[],https://github.com/liballeg/allegro5/pull/962,https://github.com/ivan-mogilko,1,https://github.com/liballeg/allegro5/pull/962,"This fixes an issue of certain key codes getting stuck in the ""key"" array after Alt+Tab, Ctrl+Esc and similar combinations until these keys are pressed again. I am not aware if this was reported properly here, but it seems to be a very old bug because it was reported by AGS engine users on numerous occasions in the past years.
Demonstration
I've made a simple test program which demonstrates the issue, the source may be downloaded here (Dropbox):
https://www.dropbox.com/s/xlwrsmd9a6w0cde/winalleg-keystucktest-src.zip?dl=0
This program draws red rectangle whenever TAB key is found in the ""key"" array, and green rectangle otherwise (exit by ESC).
Steps to reproduce:

Hold TAB.
Hold ALT (dont let TAB yet).
Now release TAB first (this is essential).
Now release ALT.
Examine rectangle stays red until you press TAB again.

On the problem
From my understanding of what Allegro is doing in key_dinput_handle_scancode():
it receives key push and release events, and passes them further into handle_key_press() / handle_key_release(). It may skip these calls under certain conditions, including ALT + F4, ALT + TAB and some other combinations.
Skipping Alt+Tab instead of passing it further into program makes sense, but the ambivalent meaning of this function caused it to fail. Because when TAB key is released, if ALT key is still registered as pressed at that moment, the TAB release event will also be ignored:

you hold TAB; since ALT is not pressed yet, the press event is registered.
you hold ALT and then release TAB or ALT & TAB simultaneously, then release event is skipped, making program think that TAB is still pressed.

My knowledge of Allegro internals is limited, so quickest solution I found is to force release event for the scancode that is accompanied by Alt and Ctrl (TAB, space or Escape in this case). TBH I am not fully certain if that's optimal, therefore may try to find better way if necessary.","This fixes an issue of certain key codes getting stuck in the ""key"" array after Alt+Tab, Ctrl+Esc and similar combinations until these keys are pressed again. I am not aware if this was reported properly here, but it seems to be a very old bug because it was reported by AGS engine users on numerous occasions in the past years.
Demonstration
I've made a simple test program which demonstrates the issue, the source may be downloaded here (Dropbox):
https://www.dropbox.com/s/xlwrsmd9a6w0cde/winalleg-keystucktest-src.zip?dl=0
This program draws red rectangle whenever TAB key is found in the ""key"" array, and green rectangle otherwise (exit by ESC).
Steps to reproduce:

Hold TAB.
Hold ALT (dont let TAB yet).
Now release TAB first (this is essential).
Now release ALT.
Examine rectangle stays red until you press TAB again.

On the problem
From my understanding of what Allegro is doing in key_dinput_handle_scancode():
it receives key push and release events, and passes them further into handle_key_press() / handle_key_release(). It may skip these calls under certain conditions, including ALT + F4, ALT + TAB and some other combinations.
Skipping Alt+Tab instead of passing it further into program makes sense, but the ambivalent meaning of this function caused it to fail. Because when TAB key is released, if ALT key is still registered as pressed at that moment, the TAB release event will also be ignored:

you hold TAB; since ALT is not pressed yet, the press event is registered.
you hold ALT and then release TAB or ALT & TAB simultaneously, then release event is skipped, making program think that TAB is still pressed.

My knowledge of Allegro internals is limited, so quickest solution I found is to force release event for the scancode that is accompanied by Alt and Ctrl (TAB, space or Escape in this case). TBH I am not fully certain if that's optimal, therefore may try to find better way if necessary.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,962,2018-11-28T15:49:00Z,2018-12-09T03:08:11Z,2018-12-13T15:44:23Z,MERGED,True,5,1,1,https://github.com/ivan-mogilko,"4.4: Windows: fix TAB key getting stuck in ""key"" array when held before ALT",1,[],https://github.com/liballeg/allegro5/pull/962,None,2,https://github.com/liballeg/allegro5/pull/962#issuecomment-442795028,"This fixes an issue of certain key codes getting stuck in the ""key"" array after Alt+Tab, Ctrl+Esc and similar combinations until these keys are pressed again. I am not aware if this was reported properly here, but it seems to be a very old bug because it was reported by AGS engine users on numerous occasions in the past years.
Demonstration
I've made a simple test program which demonstrates the issue, the source may be downloaded here (Dropbox):
https://www.dropbox.com/s/xlwrsmd9a6w0cde/winalleg-keystucktest-src.zip?dl=0
This program draws red rectangle whenever TAB key is found in the ""key"" array, and green rectangle otherwise (exit by ESC).
Steps to reproduce:

Hold TAB.
Hold ALT (dont let TAB yet).
Now release TAB first (this is essential).
Now release ALT.
Examine rectangle stays red until you press TAB again.

On the problem
From my understanding of what Allegro is doing in key_dinput_handle_scancode():
it receives key push and release events, and passes them further into handle_key_press() / handle_key_release(). It may skip these calls under certain conditions, including ALT + F4, ALT + TAB and some other combinations.
Skipping Alt+Tab instead of passing it further into program makes sense, but the ambivalent meaning of this function caused it to fail. Because when TAB key is released, if ALT key is still registered as pressed at that moment, the TAB release event will also be ignored:

you hold TAB; since ALT is not pressed yet, the press event is registered.
you hold ALT and then release TAB or ALT & TAB simultaneously, then release event is skipped, making program think that TAB is still pressed.

My knowledge of Allegro internals is limited, so quickest solution I found is to force release event for the scancode that is accompanied by Alt and Ctrl (TAB, space or Escape in this case). TBH I am not fully certain if that's optimal, therefore may try to find better way if necessary.","Sorry, this fix may be a little too hasty, I realized it may not be a good idea to call release event regardless of whether scankey was already registered in the keys array, because Allegro also calls keyboard_lowlevel_callback, and that may produce unexpected release events in library user's program.
I guess better solution would be to only proceed after checking if the scancode was previously registered. Question is how and where to do this check. Allegro first converts scancode using hw_to_mycode inside handle_key_release to get independent keycode first, then stores that in ""key"" array. Is it enough to test that array? I found there is also ""_key"" array meant for delayed key processing (during polling).",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,962,2018-11-28T15:49:00Z,2018-12-09T03:08:11Z,2018-12-13T15:44:23Z,MERGED,True,5,1,1,https://github.com/ivan-mogilko,"4.4: Windows: fix TAB key getting stuck in ""key"" array when held before ALT",1,[],https://github.com/liballeg/allegro5/pull/962,None,3,https://github.com/liballeg/allegro5/pull/962#issuecomment-443715236,"This fixes an issue of certain key codes getting stuck in the ""key"" array after Alt+Tab, Ctrl+Esc and similar combinations until these keys are pressed again. I am not aware if this was reported properly here, but it seems to be a very old bug because it was reported by AGS engine users on numerous occasions in the past years.
Demonstration
I've made a simple test program which demonstrates the issue, the source may be downloaded here (Dropbox):
https://www.dropbox.com/s/xlwrsmd9a6w0cde/winalleg-keystucktest-src.zip?dl=0
This program draws red rectangle whenever TAB key is found in the ""key"" array, and green rectangle otherwise (exit by ESC).
Steps to reproduce:

Hold TAB.
Hold ALT (dont let TAB yet).
Now release TAB first (this is essential).
Now release ALT.
Examine rectangle stays red until you press TAB again.

On the problem
From my understanding of what Allegro is doing in key_dinput_handle_scancode():
it receives key push and release events, and passes them further into handle_key_press() / handle_key_release(). It may skip these calls under certain conditions, including ALT + F4, ALT + TAB and some other combinations.
Skipping Alt+Tab instead of passing it further into program makes sense, but the ambivalent meaning of this function caused it to fail. Because when TAB key is released, if ALT key is still registered as pressed at that moment, the TAB release event will also be ignored:

you hold TAB; since ALT is not pressed yet, the press event is registered.
you hold ALT and then release TAB or ALT & TAB simultaneously, then release event is skipped, making program think that TAB is still pressed.

My knowledge of Allegro internals is limited, so quickest solution I found is to force release event for the scancode that is accompanied by Alt and Ctrl (TAB, space or Escape in this case). TBH I am not fully certain if that's optimal, therefore may try to find better way if necessary.","I have updated commit with a test to only call handle_key_release if the scancode was registered as held down. I was not sure whether it's allright to only check ""key"" array, so I check both ""key"" and ""_key"" in case keyboard is in polling mode.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,962,2018-11-28T15:49:00Z,2018-12-09T03:08:11Z,2018-12-13T15:44:23Z,MERGED,True,5,1,1,https://github.com/ivan-mogilko,"4.4: Windows: fix TAB key getting stuck in ""key"" array when held before ALT",1,[],https://github.com/liballeg/allegro5/pull/962,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/962#issuecomment-445507095,"This fixes an issue of certain key codes getting stuck in the ""key"" array after Alt+Tab, Ctrl+Esc and similar combinations until these keys are pressed again. I am not aware if this was reported properly here, but it seems to be a very old bug because it was reported by AGS engine users on numerous occasions in the past years.
Demonstration
I've made a simple test program which demonstrates the issue, the source may be downloaded here (Dropbox):
https://www.dropbox.com/s/xlwrsmd9a6w0cde/winalleg-keystucktest-src.zip?dl=0
This program draws red rectangle whenever TAB key is found in the ""key"" array, and green rectangle otherwise (exit by ESC).
Steps to reproduce:

Hold TAB.
Hold ALT (dont let TAB yet).
Now release TAB first (this is essential).
Now release ALT.
Examine rectangle stays red until you press TAB again.

On the problem
From my understanding of what Allegro is doing in key_dinput_handle_scancode():
it receives key push and release events, and passes them further into handle_key_press() / handle_key_release(). It may skip these calls under certain conditions, including ALT + F4, ALT + TAB and some other combinations.
Skipping Alt+Tab instead of passing it further into program makes sense, but the ambivalent meaning of this function caused it to fail. Because when TAB key is released, if ALT key is still registered as pressed at that moment, the TAB release event will also be ignored:

you hold TAB; since ALT is not pressed yet, the press event is registered.
you hold ALT and then release TAB or ALT & TAB simultaneously, then release event is skipped, making program think that TAB is still pressed.

My knowledge of Allegro internals is limited, so quickest solution I found is to force release event for the scancode that is accompanied by Alt and Ctrl (TAB, space or Escape in this case). TBH I am not fully certain if that's optimal, therefore may try to find better way if necessary.","This seems reasonable. I'm not convinced this still won't fail at times in the opposite direction, but perhaps this is fine. In Allegro 5 we just gave up on always tracking the key state correctly, and added a function to clear they key state manually.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,962,2018-11-28T15:49:00Z,2018-12-09T03:08:11Z,2018-12-13T15:44:23Z,MERGED,True,5,1,1,https://github.com/ivan-mogilko,"4.4: Windows: fix TAB key getting stuck in ""key"" array when held before ALT",1,[],https://github.com/liballeg/allegro5/pull/962,None,5,https://github.com/liballeg/allegro5/pull/962#issuecomment-445508496,"This fixes an issue of certain key codes getting stuck in the ""key"" array after Alt+Tab, Ctrl+Esc and similar combinations until these keys are pressed again. I am not aware if this was reported properly here, but it seems to be a very old bug because it was reported by AGS engine users on numerous occasions in the past years.
Demonstration
I've made a simple test program which demonstrates the issue, the source may be downloaded here (Dropbox):
https://www.dropbox.com/s/xlwrsmd9a6w0cde/winalleg-keystucktest-src.zip?dl=0
This program draws red rectangle whenever TAB key is found in the ""key"" array, and green rectangle otherwise (exit by ESC).
Steps to reproduce:

Hold TAB.
Hold ALT (dont let TAB yet).
Now release TAB first (this is essential).
Now release ALT.
Examine rectangle stays red until you press TAB again.

On the problem
From my understanding of what Allegro is doing in key_dinput_handle_scancode():
it receives key push and release events, and passes them further into handle_key_press() / handle_key_release(). It may skip these calls under certain conditions, including ALT + F4, ALT + TAB and some other combinations.
Skipping Alt+Tab instead of passing it further into program makes sense, but the ambivalent meaning of this function caused it to fail. Because when TAB key is released, if ALT key is still registered as pressed at that moment, the TAB release event will also be ignored:

you hold TAB; since ALT is not pressed yet, the press event is registered.
you hold ALT and then release TAB or ALT & TAB simultaneously, then release event is skipped, making program think that TAB is still pressed.

My knowledge of Allegro internals is limited, so quickest solution I found is to force release event for the scancode that is accompanied by Alt and Ctrl (TAB, space or Escape in this case). TBH I am not fully certain if that's optimal, therefore may try to find better way if necessary.","@SiegeLord

I'm not convinced this still won't fail at times in the opposite direction

could you give an example? To be honest, I myself was not convinced that this patch of mine covers all possible cases. The biggest problem was that it was not clear whether my way of reproducing a problem was matching every user reports.
On a side note, if this is okay to ask here, were there any plans of making a new official 4.4.* release containing all the patches made in recent years? I realize Allegro 4 is no longer developed, but we sort of stuck with it in our software (no one could find enough spare time to upgrade to modern library), and while we may make MS Windows builds from any branch we like Linux users seem to prefer to use official distributives.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,962,2018-11-28T15:49:00Z,2018-12-09T03:08:11Z,2018-12-13T15:44:23Z,MERGED,True,5,1,1,https://github.com/ivan-mogilko,"4.4: Windows: fix TAB key getting stuck in ""key"" array when held before ALT",1,[],https://github.com/liballeg/allegro5/pull/962,https://github.com/SiegeLord,6,https://github.com/liballeg/allegro5/pull/962#issuecomment-445512802,"This fixes an issue of certain key codes getting stuck in the ""key"" array after Alt+Tab, Ctrl+Esc and similar combinations until these keys are pressed again. I am not aware if this was reported properly here, but it seems to be a very old bug because it was reported by AGS engine users on numerous occasions in the past years.
Demonstration
I've made a simple test program which demonstrates the issue, the source may be downloaded here (Dropbox):
https://www.dropbox.com/s/xlwrsmd9a6w0cde/winalleg-keystucktest-src.zip?dl=0
This program draws red rectangle whenever TAB key is found in the ""key"" array, and green rectangle otherwise (exit by ESC).
Steps to reproduce:

Hold TAB.
Hold ALT (dont let TAB yet).
Now release TAB first (this is essential).
Now release ALT.
Examine rectangle stays red until you press TAB again.

On the problem
From my understanding of what Allegro is doing in key_dinput_handle_scancode():
it receives key push and release events, and passes them further into handle_key_press() / handle_key_release(). It may skip these calls under certain conditions, including ALT + F4, ALT + TAB and some other combinations.
Skipping Alt+Tab instead of passing it further into program makes sense, but the ambivalent meaning of this function caused it to fail. Because when TAB key is released, if ALT key is still registered as pressed at that moment, the TAB release event will also be ignored:

you hold TAB; since ALT is not pressed yet, the press event is registered.
you hold ALT and then release TAB or ALT & TAB simultaneously, then release event is skipped, making program think that TAB is still pressed.

My knowledge of Allegro internals is limited, so quickest solution I found is to force release event for the scancode that is accompanied by Alt and Ctrl (TAB, space or Escape in this case). TBH I am not fully certain if that's optimal, therefore may try to find better way if necessary.","I don't mind making a new release, but unfortunately the knowledge of how to make a release has been lost... we could probably reconstruct it (it's probably based around ./misc/zipup.sh script, but I just tried it and the output isn't quite what the previous release was...)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,962,2018-11-28T15:49:00Z,2018-12-09T03:08:11Z,2018-12-13T15:44:23Z,MERGED,True,5,1,1,https://github.com/ivan-mogilko,"4.4: Windows: fix TAB key getting stuck in ""key"" array when held before ALT",1,[],https://github.com/liballeg/allegro5/pull/962,https://github.com/rofl0r,7,https://github.com/liballeg/allegro5/pull/962#issuecomment-447015236,"This fixes an issue of certain key codes getting stuck in the ""key"" array after Alt+Tab, Ctrl+Esc and similar combinations until these keys are pressed again. I am not aware if this was reported properly here, but it seems to be a very old bug because it was reported by AGS engine users on numerous occasions in the past years.
Demonstration
I've made a simple test program which demonstrates the issue, the source may be downloaded here (Dropbox):
https://www.dropbox.com/s/xlwrsmd9a6w0cde/winalleg-keystucktest-src.zip?dl=0
This program draws red rectangle whenever TAB key is found in the ""key"" array, and green rectangle otherwise (exit by ESC).
Steps to reproduce:

Hold TAB.
Hold ALT (dont let TAB yet).
Now release TAB first (this is essential).
Now release ALT.
Examine rectangle stays red until you press TAB again.

On the problem
From my understanding of what Allegro is doing in key_dinput_handle_scancode():
it receives key push and release events, and passes them further into handle_key_press() / handle_key_release(). It may skip these calls under certain conditions, including ALT + F4, ALT + TAB and some other combinations.
Skipping Alt+Tab instead of passing it further into program makes sense, but the ambivalent meaning of this function caused it to fail. Because when TAB key is released, if ALT key is still registered as pressed at that moment, the TAB release event will also be ignored:

you hold TAB; since ALT is not pressed yet, the press event is registered.
you hold ALT and then release TAB or ALT & TAB simultaneously, then release event is skipped, making program think that TAB is still pressed.

My knowledge of Allegro internals is limited, so quickest solution I found is to force release event for the scancode that is accompanied by Alt and Ctrl (TAB, space or Escape in this case). TBH I am not fully certain if that's optimal, therefore may try to find better way if necessary.",i created a PR #972 regarding the script to create a release tarball.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,964,2018-12-01T05:48:54Z,2018-12-02T06:18:02Z,2018-12-02T06:18:02Z,MERGED,True,4,0,1,https://github.com/SiegeLord,Fix a leak when destroying a mixer with attacked streams.,1,[],https://github.com/liballeg/allegro5/pull/964,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/964,Fixes #963.,Fixes #963.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,967,2018-12-07T02:27:25Z,2018-12-09T03:02:22Z,2018-12-09T03:02:27Z,MERGED,True,6,0,2,https://github.com/dos1,opengl: fix compilation with Mesa 18.2.5 and later,1,[],https://github.com/liballeg/allegro5/pull/967,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/967,"Mesa headers have been updated and changed some defines that Allegro
is hackily relying on.
https://gitlab.freedesktop.org/mesa/mesa/commit/f7d42ee7d319256608ad60778f6787c140badada","Mesa headers have been updated and changed some defines that Allegro
is hackily relying on.
https://gitlab.freedesktop.org/mesa/mesa/commit/f7d42ee7d319256608ad60778f6787c140badada",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,967,2018-12-07T02:27:25Z,2018-12-09T03:02:22Z,2018-12-09T03:02:27Z,MERGED,True,6,0,2,https://github.com/dos1,opengl: fix compilation with Mesa 18.2.5 and later,1,[],https://github.com/liballeg/allegro5/pull/967,https://github.com/rvega,2,https://github.com/liballeg/allegro5/pull/967#issuecomment-445506535,"Mesa headers have been updated and changed some defines that Allegro
is hackily relying on.
https://gitlab.freedesktop.org/mesa/mesa/commit/f7d42ee7d319256608ad60778f6787c140badada",Confirmed this patch fixes compilation issues with latest mesa in Arch Linux.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,967,2018-12-07T02:27:25Z,2018-12-09T03:02:22Z,2018-12-09T03:02:27Z,MERGED,True,6,0,2,https://github.com/dos1,opengl: fix compilation with Mesa 18.2.5 and later,1,[],https://github.com/liballeg/allegro5/pull/967,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/967#issuecomment-445506830,"Mesa headers have been updated and changed some defines that Allegro
is hackily relying on.
https://gitlab.freedesktop.org/mesa/mesa/commit/f7d42ee7d319256608ad60778f6787c140badada",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,969,2018-12-09T06:12:54Z,2019-02-23T05:58:52Z,2019-02-23T05:58:52Z,CLOSED,False,33,25,5,https://github.com/EdgarReynaldo,Fix for OpenGL version selection on Windows,3,[],https://github.com/liballeg/allegro5/pull/969,https://github.com/EdgarReynaldo,1,https://github.com/liballeg/allegro5/pull/969,"There are some patches to remove old code, comment out and fix old code, and code to use al_get_new_display_option instead of al_get_suggested_display_option, which was broken. Please see the patch for details. Sorry I'm stupid and made the pull request on my own repository.","There are some patches to remove old code, comment out and fix old code, and code to use al_get_new_display_option instead of al_get_suggested_display_option, which was broken. Please see the patch for details. Sorry I'm stupid and made the pull request on my own repository.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,969,2018-12-09T06:12:54Z,2019-02-23T05:58:52Z,2019-02-23T05:58:52Z,CLOSED,False,33,25,5,https://github.com/EdgarReynaldo,Fix for OpenGL version selection on Windows,3,[],https://github.com/liballeg/allegro5/pull/969,https://github.com/fatcerberus,2,https://github.com/liballeg/allegro5/pull/969#issuecomment-445514170,"There are some patches to remove old code, comment out and fix old code, and code to use al_get_new_display_option instead of al_get_suggested_display_option, which was broken. Please see the patch for details. Sorry I'm stupid and made the pull request on my own repository.","Sorry I'm stupid and made the pull request on my own repository.

That's why I asked about that in the other issue.  All good, it's in the right place now so that's all that matters 😸
Any possibility you could squash out that merge commit?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,969,2018-12-09T06:12:54Z,2019-02-23T05:58:52Z,2019-02-23T05:58:52Z,CLOSED,False,33,25,5,https://github.com/EdgarReynaldo,Fix for OpenGL version selection on Windows,3,[],https://github.com/liballeg/allegro5/pull/969,https://github.com/EdgarReynaldo,3,https://github.com/liballeg/allegro5/pull/969#issuecomment-445516116,"There are some patches to remove old code, comment out and fix old code, and code to use al_get_new_display_option instead of al_get_suggested_display_option, which was broken. Please see the patch for details. Sorry I'm stupid and made the pull request on my own repository.",There I should have removed the extraneous commits,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,969,2018-12-09T06:12:54Z,2019-02-23T05:58:52Z,2019-02-23T05:58:52Z,CLOSED,False,33,25,5,https://github.com/EdgarReynaldo,Fix for OpenGL version selection on Windows,3,[],https://github.com/liballeg/allegro5/pull/969,https://github.com/EdgarReynaldo,4,https://github.com/liballeg/allegro5/pull/969#issuecomment-466620290,"There are some patches to remove old code, comment out and fix old code, and code to use al_get_new_display_option instead of al_get_suggested_display_option, which was broken. Please see the patch for details. Sorry I'm stupid and made the pull request on my own repository.","This pull request is superceded by #1021
Closing request.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,970,2018-12-12T15:30:57Z,2018-12-14T05:55:44Z,2018-12-14T05:55:49Z,MERGED,True,6,0,2,https://github.com/gusnan,[4.4] Fix building with Mesa 18.2.5 and later,1,[],https://github.com/liballeg/allegro5/pull/970,https://github.com/gusnan,1,https://github.com/liballeg/allegro5/pull/970,"Based on the patch on Allegro5,
a40d30e","Based on the patch on Allegro5,
a40d30e",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,970,2018-12-12T15:30:57Z,2018-12-14T05:55:44Z,2018-12-14T05:55:49Z,MERGED,True,6,0,2,https://github.com/gusnan,[4.4] Fix building with Mesa 18.2.5 and later,1,[],https://github.com/liballeg/allegro5/pull/970,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/970#issuecomment-447222250,"Based on the patch on Allegro5,
a40d30e",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,971,2018-12-12T15:45:53Z,2018-12-14T05:56:22Z,2018-12-14T05:56:37Z,MERGED,True,0,18,1,https://github.com/gusnan,[4.4] Remove f* variants of fixed math functions,1,[],https://github.com/liballeg/allegro5/pull/971,https://github.com/gusnan,1,https://github.com/liballeg/allegro5/pull/971,"Removing functions that conflicts with later glibc implementations,
people should use fix* variants instead.
(Simply use fixadd instead of fadd).","Removing functions that conflicts with later glibc implementations,
people should use fix* variants instead.
(Simply use fixadd instead of fadd).",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,971,2018-12-12T15:45:53Z,2018-12-14T05:56:22Z,2018-12-14T05:56:37Z,MERGED,True,0,18,1,https://github.com/gusnan,[4.4] Remove f* variants of fixed math functions,1,[],https://github.com/liballeg/allegro5/pull/971,https://github.com/gusnan,2,https://github.com/liballeg/allegro5/pull/971#issuecomment-446659502,"Removing functions that conflicts with later glibc implementations,
people should use fix* variants instead.
(Simply use fixadd instead of fadd).","For clarity, without this patch, this:
https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=915196
happens.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,971,2018-12-12T15:45:53Z,2018-12-14T05:56:22Z,2018-12-14T05:56:37Z,MERGED,True,0,18,1,https://github.com/gusnan,[4.4] Remove f* variants of fixed math functions,1,[],https://github.com/liballeg/allegro5/pull/971,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/971#issuecomment-447222383,"Removing functions that conflicts with later glibc implementations,
people should use fix* variants instead.
(Simply use fixadd instead of fadd).",Works for me. Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,972,2018-12-13T15:42:51Z,2019-01-10T03:21:45Z,2019-02-03T23:01:36Z,MERGED,True,68,129,2,https://github.com/rofl0r,4.4 release fix,3,[],https://github.com/liballeg/allegro5/pull/972,https://github.com/rofl0r,1,https://github.com/liballeg/allegro5/pull/972,"continuing from #962
this PR fixes and modernizes the script to create release tarballs
here is the allegro-4.4.3.tar.xz tarball generated using it: https://0x0.st/sDCp.xz
it seems to be correct afaict. i admit that i didnt check the generated HTML documentation in a browser though.
a minor issue i found is that the extracted sources contain this:
+++ allegro-4.4.3/include/allegro/base.h        2018-12-13 15:04:02.000000000 +0000
-#define ALLEGRO_WIP_VERSION      2
-#define ALLEGRO_VERSION_STR      ""4.4.2""
+#define ALLEGRO_WIP_VERSION      3
+#define ALLEGRO_VERSION_STR      ""4.4.3 (SVN)""
this would need to be fixed pre release (removal of  (SVN) from the string.
the script compiles and utilizes a program to create dat files, which in turn require an installed liballegro4.
therefore i think it's a good idea to use a dedicated VM/container to build the release, so it's not getting mistakenly mixed up with an eventually installed allegro5.","continuing from #962
this PR fixes and modernizes the script to create release tarballs
here is the allegro-4.4.3.tar.xz tarball generated using it: https://0x0.st/sDCp.xz
it seems to be correct afaict. i admit that i didnt check the generated HTML documentation in a browser though.
a minor issue i found is that the extracted sources contain this:
+++ allegro-4.4.3/include/allegro/base.h        2018-12-13 15:04:02.000000000 +0000
-#define ALLEGRO_WIP_VERSION      2
-#define ALLEGRO_VERSION_STR      ""4.4.2""
+#define ALLEGRO_WIP_VERSION      3
+#define ALLEGRO_VERSION_STR      ""4.4.3 (SVN)""
this would need to be fixed pre release (removal of  (SVN) from the string.
the script compiles and utilizes a program to create dat files, which in turn require an installed liballegro4.
therefore i think it's a good idea to use a dedicated VM/container to build the release, so it's not getting mistakenly mixed up with an eventually installed allegro5.",True,{'THUMBS_UP': ['https://github.com/ericoporto']}
liballeg/allegro5,https://github.com/liballeg/allegro5,972,2018-12-13T15:42:51Z,2019-01-10T03:21:45Z,2019-02-03T23:01:36Z,MERGED,True,68,129,2,https://github.com/rofl0r,4.4 release fix,3,[],https://github.com/liballeg/allegro5/pull/972,https://github.com/rofl0r,2,https://github.com/liballeg/allegro5/pull/972#issuecomment-449891675,"continuing from #962
this PR fixes and modernizes the script to create release tarballs
here is the allegro-4.4.3.tar.xz tarball generated using it: https://0x0.st/sDCp.xz
it seems to be correct afaict. i admit that i didnt check the generated HTML documentation in a browser though.
a minor issue i found is that the extracted sources contain this:
+++ allegro-4.4.3/include/allegro/base.h        2018-12-13 15:04:02.000000000 +0000
-#define ALLEGRO_WIP_VERSION      2
-#define ALLEGRO_VERSION_STR      ""4.4.2""
+#define ALLEGRO_WIP_VERSION      3
+#define ALLEGRO_VERSION_STR      ""4.4.3 (SVN)""
this would need to be fixed pre release (removal of  (SVN) from the string.
the script compiles and utilizes a program to create dat files, which in turn require an installed liballegro4.
therefore i think it's a good idea to use a dedicated VM/container to build the release, so it's not getting mistakenly mixed up with an eventually installed allegro5.",@SiegeLord any comments ?,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,972,2018-12-13T15:42:51Z,2019-01-10T03:21:45Z,2019-02-03T23:01:36Z,MERGED,True,68,129,2,https://github.com/rofl0r,4.4 release fix,3,[],https://github.com/liballeg/allegro5/pull/972,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/972#issuecomment-450089246,"continuing from #962
this PR fixes and modernizes the script to create release tarballs
here is the allegro-4.4.3.tar.xz tarball generated using it: https://0x0.st/sDCp.xz
it seems to be correct afaict. i admit that i didnt check the generated HTML documentation in a browser though.
a minor issue i found is that the extracted sources contain this:
+++ allegro-4.4.3/include/allegro/base.h        2018-12-13 15:04:02.000000000 +0000
-#define ALLEGRO_WIP_VERSION      2
-#define ALLEGRO_VERSION_STR      ""4.4.2""
+#define ALLEGRO_WIP_VERSION      3
+#define ALLEGRO_VERSION_STR      ""4.4.3 (SVN)""
this would need to be fixed pre release (removal of  (SVN) from the string.
the script compiles and utilizes a program to create dat files, which in turn require an installed liballegro4.
therefore i think it's a good idea to use a dedicated VM/container to build the release, so it's not getting mistakenly mixed up with an eventually installed allegro5.","Apologies, I haven't had the time to look at it. One thing that'll help me with this is a little note why you did what you did: it seems you had to move a bunch of lines around? What about the existing script didn't work for you (when I tried it, it seemed to produce approximately correct output, and your script is also approximately correct in some different way?). I'll do my best to get to this sometime next week.",True,{'HOORAY': ['https://github.com/ericoporto']}
liballeg/allegro5,https://github.com/liballeg/allegro5,972,2018-12-13T15:42:51Z,2019-01-10T03:21:45Z,2019-02-03T23:01:36Z,MERGED,True,68,129,2,https://github.com/rofl0r,4.4 release fix,3,[],https://github.com/liballeg/allegro5/pull/972,https://github.com/rofl0r,4,https://github.com/liballeg/allegro5/pull/972#issuecomment-450173004,"continuing from #962
this PR fixes and modernizes the script to create release tarballs
here is the allegro-4.4.3.tar.xz tarball generated using it: https://0x0.st/sDCp.xz
it seems to be correct afaict. i admit that i didnt check the generated HTML documentation in a browser though.
a minor issue i found is that the extracted sources contain this:
+++ allegro-4.4.3/include/allegro/base.h        2018-12-13 15:04:02.000000000 +0000
-#define ALLEGRO_WIP_VERSION      2
-#define ALLEGRO_VERSION_STR      ""4.4.2""
+#define ALLEGRO_WIP_VERSION      3
+#define ALLEGRO_VERSION_STR      ""4.4.3 (SVN)""
this would need to be fixed pre release (removal of  (SVN) from the string.
the script compiles and utilizes a program to create dat files, which in turn require an installed liballegro4.
therefore i think it's a good idea to use a dedicated VM/container to build the release, so it's not getting mistakenly mixed up with an eventually installed allegro5.","Well basically i just read the script to figure out what it's supposed to do, and where potential issues could happen, then rearranged the code-blocks in a way those issues couldn't happen anymore and added some sanity checks while removing the blocks that are basically just error-prone cruft.
I figured that would be way more productive than trying to guess/debug what goes wrong while running the original script. and indeed, it just took me like 5 iterations to get it right.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,972,2018-12-13T15:42:51Z,2019-01-10T03:21:45Z,2019-02-03T23:01:36Z,MERGED,True,68,129,2,https://github.com/rofl0r,4.4 release fix,3,[],https://github.com/liballeg/allegro5/pull/972,https://github.com/SiegeLord,5,https://github.com/liballeg/allegro5/pull/972#issuecomment-451699421,"continuing from #962
this PR fixes and modernizes the script to create release tarballs
here is the allegro-4.4.3.tar.xz tarball generated using it: https://0x0.st/sDCp.xz
it seems to be correct afaict. i admit that i didnt check the generated HTML documentation in a browser though.
a minor issue i found is that the extracted sources contain this:
+++ allegro-4.4.3/include/allegro/base.h        2018-12-13 15:04:02.000000000 +0000
-#define ALLEGRO_WIP_VERSION      2
-#define ALLEGRO_VERSION_STR      ""4.4.2""
+#define ALLEGRO_WIP_VERSION      3
+#define ALLEGRO_VERSION_STR      ""4.4.3 (SVN)""
this would need to be fixed pre release (removal of  (SVN) from the string.
the script compiles and utilizes a program to create dat files, which in turn require an installed liballegro4.
therefore i think it's a good idea to use a dedicated VM/container to build the release, so it's not getting mistakenly mixed up with an eventually installed allegro5.","Alright, I got around to testing this. I think the output looks pretty good, save for the .dist directory ending up in the archive for me.
There's also something broken with the HTML documentation generation, but I don't think it's related to your changes.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,972,2018-12-13T15:42:51Z,2019-01-10T03:21:45Z,2019-02-03T23:01:36Z,MERGED,True,68,129,2,https://github.com/rofl0r,4.4 release fix,3,[],https://github.com/liballeg/allegro5/pull/972,https://github.com/rofl0r,6,https://github.com/liballeg/allegro5/pull/972#issuecomment-451745761,"continuing from #962
this PR fixes and modernizes the script to create release tarballs
here is the allegro-4.4.3.tar.xz tarball generated using it: https://0x0.st/sDCp.xz
it seems to be correct afaict. i admit that i didnt check the generated HTML documentation in a browser though.
a minor issue i found is that the extracted sources contain this:
+++ allegro-4.4.3/include/allegro/base.h        2018-12-13 15:04:02.000000000 +0000
-#define ALLEGRO_WIP_VERSION      2
-#define ALLEGRO_VERSION_STR      ""4.4.2""
+#define ALLEGRO_WIP_VERSION      3
+#define ALLEGRO_VERSION_STR      ""4.4.3 (SVN)""
this would need to be fixed pre release (removal of  (SVN) from the string.
the script compiles and utilizes a program to create dat files, which in turn require an installed liballegro4.
therefore i think it's a good idea to use a dedicated VM/container to build the release, so it's not getting mistakenly mixed up with an eventually installed allegro5.","thanks for taking a look!

save for the .dist directory ending up in the archive for me.

oops - do you want me to address that ?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,972,2018-12-13T15:42:51Z,2019-01-10T03:21:45Z,2019-02-03T23:01:36Z,MERGED,True,68,129,2,https://github.com/rofl0r,4.4 release fix,3,[],https://github.com/liballeg/allegro5/pull/972,https://github.com/SiegeLord,7,https://github.com/liballeg/allegro5/pull/972#issuecomment-451755838,"continuing from #962
this PR fixes and modernizes the script to create release tarballs
here is the allegro-4.4.3.tar.xz tarball generated using it: https://0x0.st/sDCp.xz
it seems to be correct afaict. i admit that i didnt check the generated HTML documentation in a browser though.
a minor issue i found is that the extracted sources contain this:
+++ allegro-4.4.3/include/allegro/base.h        2018-12-13 15:04:02.000000000 +0000
-#define ALLEGRO_WIP_VERSION      2
-#define ALLEGRO_VERSION_STR      ""4.4.2""
+#define ALLEGRO_WIP_VERSION      3
+#define ALLEGRO_VERSION_STR      ""4.4.3 (SVN)""
this would need to be fixed pre release (removal of  (SVN) from the string.
the script compiles and utilizes a program to create dat files, which in turn require an installed liballegro4.
therefore i think it's a good idea to use a dedicated VM/container to build the release, so it's not getting mistakenly mixed up with an eventually installed allegro5.","Yeah, please. I probably can figure it out eventually, but it'll probably be faster if you do it.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,972,2018-12-13T15:42:51Z,2019-01-10T03:21:45Z,2019-02-03T23:01:36Z,MERGED,True,68,129,2,https://github.com/rofl0r,4.4 release fix,3,[],https://github.com/liballeg/allegro5/pull/972,https://github.com/rofl0r,8,https://github.com/liballeg/allegro5/pull/972#issuecomment-452011287,"continuing from #962
this PR fixes and modernizes the script to create release tarballs
here is the allegro-4.4.3.tar.xz tarball generated using it: https://0x0.st/sDCp.xz
it seems to be correct afaict. i admit that i didnt check the generated HTML documentation in a browser though.
a minor issue i found is that the extracted sources contain this:
+++ allegro-4.4.3/include/allegro/base.h        2018-12-13 15:04:02.000000000 +0000
-#define ALLEGRO_WIP_VERSION      2
-#define ALLEGRO_VERSION_STR      ""4.4.2""
+#define ALLEGRO_WIP_VERSION      3
+#define ALLEGRO_VERSION_STR      ""4.4.3 (SVN)""
this would need to be fixed pre release (removal of  (SVN) from the string.
the script compiles and utilizes a program to create dat files, which in turn require an installed liballegro4.
therefore i think it's a good idea to use a dedicated VM/container to build the release, so it's not getting mistakenly mixed up with an eventually installed allegro5.",fixed ^,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,972,2018-12-13T15:42:51Z,2019-01-10T03:21:45Z,2019-02-03T23:01:36Z,MERGED,True,68,129,2,https://github.com/rofl0r,4.4 release fix,3,[],https://github.com/liballeg/allegro5/pull/972,https://github.com/SiegeLord,9,https://github.com/liballeg/allegro5/pull/972#issuecomment-452956636,"continuing from #962
this PR fixes and modernizes the script to create release tarballs
here is the allegro-4.4.3.tar.xz tarball generated using it: https://0x0.st/sDCp.xz
it seems to be correct afaict. i admit that i didnt check the generated HTML documentation in a browser though.
a minor issue i found is that the extracted sources contain this:
+++ allegro-4.4.3/include/allegro/base.h        2018-12-13 15:04:02.000000000 +0000
-#define ALLEGRO_WIP_VERSION      2
-#define ALLEGRO_VERSION_STR      ""4.4.2""
+#define ALLEGRO_WIP_VERSION      3
+#define ALLEGRO_VERSION_STR      ""4.4.3 (SVN)""
this would need to be fixed pre release (removal of  (SVN) from the string.
the script compiles and utilizes a program to create dat files, which in turn require an installed liballegro4.
therefore i think it's a good idea to use a dedicated VM/container to build the release, so it's not getting mistakenly mixed up with an eventually installed allegro5.","Alright, this looks good to me now. Thanks!",True,"{'HOORAY': ['https://github.com/rofl0r', 'https://github.com/ericoporto']}"
liballeg/allegro5,https://github.com/liballeg/allegro5,972,2018-12-13T15:42:51Z,2019-01-10T03:21:45Z,2019-02-03T23:01:36Z,MERGED,True,68,129,2,https://github.com/rofl0r,4.4 release fix,3,[],https://github.com/liballeg/allegro5/pull/972,https://github.com/rofl0r,10,https://github.com/liballeg/allegro5/pull/972#issuecomment-453269168,"continuing from #962
this PR fixes and modernizes the script to create release tarballs
here is the allegro-4.4.3.tar.xz tarball generated using it: https://0x0.st/sDCp.xz
it seems to be correct afaict. i admit that i didnt check the generated HTML documentation in a browser though.
a minor issue i found is that the extracted sources contain this:
+++ allegro-4.4.3/include/allegro/base.h        2018-12-13 15:04:02.000000000 +0000
-#define ALLEGRO_WIP_VERSION      2
-#define ALLEGRO_VERSION_STR      ""4.4.2""
+#define ALLEGRO_WIP_VERSION      3
+#define ALLEGRO_VERSION_STR      ""4.4.3 (SVN)""
this would need to be fixed pre release (removal of  (SVN) from the string.
the script compiles and utilizes a program to create dat files, which in turn require an installed liballegro4.
therefore i think it's a good idea to use a dedicated VM/container to build the release, so it's not getting mistakenly mixed up with an eventually installed allegro5.",many thanks! please keep us posted when you got around to make a release.,True,"{'THUMBS_UP': ['https://github.com/gusnan', 'https://github.com/ericoporto']}"
liballeg/allegro5,https://github.com/liballeg/allegro5,972,2018-12-13T15:42:51Z,2019-01-10T03:21:45Z,2019-02-03T23:01:36Z,MERGED,True,68,129,2,https://github.com/rofl0r,4.4 release fix,3,[],https://github.com/liballeg/allegro5/pull/972,https://github.com/rofl0r,11,https://github.com/liballeg/allegro5/pull/972#issuecomment-459978041,"continuing from #962
this PR fixes and modernizes the script to create release tarballs
here is the allegro-4.4.3.tar.xz tarball generated using it: https://0x0.st/sDCp.xz
it seems to be correct afaict. i admit that i didnt check the generated HTML documentation in a browser though.
a minor issue i found is that the extracted sources contain this:
+++ allegro-4.4.3/include/allegro/base.h        2018-12-13 15:04:02.000000000 +0000
-#define ALLEGRO_WIP_VERSION      2
-#define ALLEGRO_VERSION_STR      ""4.4.2""
+#define ALLEGRO_WIP_VERSION      3
+#define ALLEGRO_VERSION_STR      ""4.4.3 (SVN)""
this would need to be fixed pre release (removal of  (SVN) from the string.
the script compiles and utilizes a program to create dat files, which in turn require an installed liballegro4.
therefore i think it's a good idea to use a dedicated VM/container to build the release, so it's not getting mistakenly mixed up with an eventually installed allegro5.","@SiegeLord: would you mind running the script on the current branch, add a tag like 4.4.2-prerelease-1 and attach the tarball to it ? that would help us a lot, and it would take the burden of doing a ""proper"" release and double-checking everything from your shoulders.
(also users of that prerelease tarball would probably provide feedback in case there are any issues left)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,972,2018-12-13T15:42:51Z,2019-01-10T03:21:45Z,2019-02-03T23:01:36Z,MERGED,True,68,129,2,https://github.com/rofl0r,4.4 release fix,3,[],https://github.com/liballeg/allegro5/pull/972,https://github.com/SiegeLord,12,https://github.com/liballeg/allegro5/pull/972#issuecomment-460097398,"continuing from #962
this PR fixes and modernizes the script to create release tarballs
here is the allegro-4.4.3.tar.xz tarball generated using it: https://0x0.st/sDCp.xz
it seems to be correct afaict. i admit that i didnt check the generated HTML documentation in a browser though.
a minor issue i found is that the extracted sources contain this:
+++ allegro-4.4.3/include/allegro/base.h        2018-12-13 15:04:02.000000000 +0000
-#define ALLEGRO_WIP_VERSION      2
-#define ALLEGRO_VERSION_STR      ""4.4.2""
+#define ALLEGRO_WIP_VERSION      3
+#define ALLEGRO_VERSION_STR      ""4.4.3 (SVN)""
this would need to be fixed pre release (removal of  (SVN) from the string.
the script compiles and utilizes a program to create dat files, which in turn require an installed liballegro4.
therefore i think it's a good idea to use a dedicated VM/container to build the release, so it's not getting mistakenly mixed up with an eventually installed allegro5.","4.4.3 is now released, https://www.allegro.cc/forums/thread/617731/1041144.",True,"{'HOORAY': ['https://github.com/rofl0r'], 'THUMBS_UP': ['https://github.com/gusnan']}"
liballeg/allegro5,https://github.com/liballeg/allegro5,973,2018-12-17T18:39:15Z,2018-12-28T00:42:58Z,2018-12-28T00:42:58Z,MERGED,True,7,1,1,https://github.com/dos1,audio: fix a memory leak in audio recorder,1,[],https://github.com/liballeg/allegro5/pull/973,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/973,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,973,2018-12-17T18:39:15Z,2018-12-28T00:42:58Z,2018-12-28T00:42:58Z,MERGED,True,7,1,1,https://github.com/dos1,audio: fix a memory leak in audio recorder,1,[],https://github.com/liballeg/allegro5/pull/973,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/973#issuecomment-450263478,,Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,975,2018-12-20T22:15:14Z,2019-01-05T22:16:59Z,2019-01-05T22:16:59Z,MERGED,True,5,6,3,https://github.com/ufoot,[android] updated Gradle to more recent versions,2,[],https://github.com/liballeg/allegro5/pull/975,https://github.com/ufoot,1,https://github.com/liballeg/allegro5/pull/975,"I was trying to build Allegro for android and kept bumping into that error :
> Configure project :allegro
The CompileOptions.bootClasspath property has been deprecated and is scheduled to be removed in Gradle 5.0. Please use the CompileOptions.bootstrapClasspath property instead.


FAILURE: Build failed with an exception.

* What went wrong:
A problem occurred configuring project ':allegro'.
> No toolchains found in the NDK toolchains folder for ABI with prefix: mips64el-linux-android

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.

* Get more help at https://help.gradle.org

BUILD FAILED in 0s
make[2]: *** [lib/allegro-debug.aar] Error 1
make[1]: *** [android/CMakeFiles/aar.dir/all] Error 2
make: *** [all] Error 2

Apparently it's due to the fact this platform has been deprecated in latest versions of Android NDK.
I'm not the only user experiencing this, and it's not strictly Allegro related, eg: -> flutter/flutter#22031
I'm using:
export ANDROID_NDK_ROOT=$HOME/Home/android/android-ndk-r17c
export ANDROID_NDK_TOOLCHAIN_ROOT=$HOME/Home/android/allegro-android-toolchain
export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
export PATH=$ANDROID_NDK_TOOLCHAIN_ROOT/bin:$JAVA_HOME/bin:$PATH

I think I could just use even older versions of the NDK but I get a sense, at some point, it makes sense to upgrade to newer versions.
Note that this enabled me to compile Allegro, but I'm still not to the point I have something running on my phone. That being said, without this patch, it would not even compile...","I was trying to build Allegro for android and kept bumping into that error :
> Configure project :allegro
The CompileOptions.bootClasspath property has been deprecated and is scheduled to be removed in Gradle 5.0. Please use the CompileOptions.bootstrapClasspath property instead.


FAILURE: Build failed with an exception.

* What went wrong:
A problem occurred configuring project ':allegro'.
> No toolchains found in the NDK toolchains folder for ABI with prefix: mips64el-linux-android

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.

* Get more help at https://help.gradle.org

BUILD FAILED in 0s
make[2]: *** [lib/allegro-debug.aar] Error 1
make[1]: *** [android/CMakeFiles/aar.dir/all] Error 2
make: *** [all] Error 2

Apparently it's due to the fact this platform has been deprecated in latest versions of Android NDK.
I'm not the only user experiencing this, and it's not strictly Allegro related, eg: -> flutter/flutter#22031
I'm using:
export ANDROID_NDK_ROOT=$HOME/Home/android/android-ndk-r17c
export ANDROID_NDK_TOOLCHAIN_ROOT=$HOME/Home/android/allegro-android-toolchain
export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
export PATH=$ANDROID_NDK_TOOLCHAIN_ROOT/bin:$JAVA_HOME/bin:$PATH

I think I could just use even older versions of the NDK but I get a sense, at some point, it makes sense to upgrade to newer versions.
Note that this enabled me to compile Allegro, but I'm still not to the point I have something running on my phone. That being said, without this patch, it would not even compile...",True,{'THUMBS_UP': ['https://github.com/dos1']}
liballeg/allegro5,https://github.com/liballeg/allegro5,975,2018-12-20T22:15:14Z,2019-01-05T22:16:59Z,2019-01-05T22:16:59Z,MERGED,True,5,6,3,https://github.com/ufoot,[android] updated Gradle to more recent versions,2,[],https://github.com/liballeg/allegro5/pull/975,https://github.com/fatcerberus,2,https://github.com/liballeg/allegro5/pull/975#issuecomment-449181218,"I was trying to build Allegro for android and kept bumping into that error :
> Configure project :allegro
The CompileOptions.bootClasspath property has been deprecated and is scheduled to be removed in Gradle 5.0. Please use the CompileOptions.bootstrapClasspath property instead.


FAILURE: Build failed with an exception.

* What went wrong:
A problem occurred configuring project ':allegro'.
> No toolchains found in the NDK toolchains folder for ABI with prefix: mips64el-linux-android

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.

* Get more help at https://help.gradle.org

BUILD FAILED in 0s
make[2]: *** [lib/allegro-debug.aar] Error 1
make[1]: *** [android/CMakeFiles/aar.dir/all] Error 2
make: *** [all] Error 2

Apparently it's due to the fact this platform has been deprecated in latest versions of Android NDK.
I'm not the only user experiencing this, and it's not strictly Allegro related, eg: -> flutter/flutter#22031
I'm using:
export ANDROID_NDK_ROOT=$HOME/Home/android/android-ndk-r17c
export ANDROID_NDK_TOOLCHAIN_ROOT=$HOME/Home/android/allegro-android-toolchain
export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
export PATH=$ANDROID_NDK_TOOLCHAIN_ROOT/bin:$JAVA_HOME/bin:$PATH

I think I could just use even older versions of the NDK but I get a sense, at some point, it makes sense to upgrade to newer versions.
Note that this enabled me to compile Allegro, but I'm still not to the point I have something running on my phone. That being said, without this patch, it would not even compile...","Note that Allegro officially supports Android versions back to Honeycomb: https://github.com/liballeg/allegro5/blob/master/README_android.txt#L4
Does this patch change that?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,975,2018-12-20T22:15:14Z,2019-01-05T22:16:59Z,2019-01-05T22:16:59Z,MERGED,True,5,6,3,https://github.com/ufoot,[android] updated Gradle to more recent versions,2,[],https://github.com/liballeg/allegro5/pull/975,https://github.com/ufoot,3,https://github.com/liballeg/allegro5/pull/975#issuecomment-449270322,"I was trying to build Allegro for android and kept bumping into that error :
> Configure project :allegro
The CompileOptions.bootClasspath property has been deprecated and is scheduled to be removed in Gradle 5.0. Please use the CompileOptions.bootstrapClasspath property instead.


FAILURE: Build failed with an exception.

* What went wrong:
A problem occurred configuring project ':allegro'.
> No toolchains found in the NDK toolchains folder for ABI with prefix: mips64el-linux-android

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.

* Get more help at https://help.gradle.org

BUILD FAILED in 0s
make[2]: *** [lib/allegro-debug.aar] Error 1
make[1]: *** [android/CMakeFiles/aar.dir/all] Error 2
make: *** [all] Error 2

Apparently it's due to the fact this platform has been deprecated in latest versions of Android NDK.
I'm not the only user experiencing this, and it's not strictly Allegro related, eg: -> flutter/flutter#22031
I'm using:
export ANDROID_NDK_ROOT=$HOME/Home/android/android-ndk-r17c
export ANDROID_NDK_TOOLCHAIN_ROOT=$HOME/Home/android/allegro-android-toolchain
export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
export PATH=$ANDROID_NDK_TOOLCHAIN_ROOT/bin:$JAVA_HOME/bin:$PATH

I think I could just use even older versions of the NDK but I get a sense, at some point, it makes sense to upgrade to newer versions.
Note that this enabled me to compile Allegro, but I'm still not to the point I have something running on my phone. That being said, without this patch, it would not even compile...","Good question. To be precise: I tried with android-ndk-r18b and it did not allow me to build anything below API16. Initially I thought that was the culprit so I backed down to android-ndk-r17c. This one allowed me to build with API15, which is the version I found in the docs reading 
  
    
      allegro5/README_android.txt
    
    
         Line 65
      in
      55184ae
    
  
  
    

        
          
           --api=15 --install-dir=$ANDROID_NDK_TOOLCHAIN_ROOT --arch=arm 
        
    
  


Given your remark about API13 (I had overlooked that detail, jumping to commands, sorry about this) I gave a try with android-ndk-r17c and that one allowed me to launch:
cmake .. -DCMAKE_TOOLCHAIN_FILE=../cmake/Toolchain-android.cmake -DCMAKE_BUILD_TYPE=Debug -DANDROID_TARGET=android-13 -DARM_TARGETS=armeabi-v7a
make

and this did produce examples & everything. So I get a sense it does not alter compatibility. However, TBH I'm not yet to the point I have actually built a full-featured program running on my phone. Getting init problems on the phone I think, but that is another problem, unrelated to this build issue.
One thing I did not check is how old an NDK one can use with this recent version of Gradle. I can try it if you think it's worth it.
TLDR: the game changer for compatibility seem to be the NDK you're using, not the Gradle version, which is the only thing this patches change.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,975,2018-12-20T22:15:14Z,2019-01-05T22:16:59Z,2019-01-05T22:16:59Z,MERGED,True,5,6,3,https://github.com/ufoot,[android] updated Gradle to more recent versions,2,[],https://github.com/liballeg/allegro5/pull/975,https://github.com/ufoot,4,https://github.com/liballeg/allegro5/pull/975#issuecomment-449589314,"I was trying to build Allegro for android and kept bumping into that error :
> Configure project :allegro
The CompileOptions.bootClasspath property has been deprecated and is scheduled to be removed in Gradle 5.0. Please use the CompileOptions.bootstrapClasspath property instead.


FAILURE: Build failed with an exception.

* What went wrong:
A problem occurred configuring project ':allegro'.
> No toolchains found in the NDK toolchains folder for ABI with prefix: mips64el-linux-android

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.

* Get more help at https://help.gradle.org

BUILD FAILED in 0s
make[2]: *** [lib/allegro-debug.aar] Error 1
make[1]: *** [android/CMakeFiles/aar.dir/all] Error 2
make: *** [all] Error 2

Apparently it's due to the fact this platform has been deprecated in latest versions of Android NDK.
I'm not the only user experiencing this, and it's not strictly Allegro related, eg: -> flutter/flutter#22031
I'm using:
export ANDROID_NDK_ROOT=$HOME/Home/android/android-ndk-r17c
export ANDROID_NDK_TOOLCHAIN_ROOT=$HOME/Home/android/allegro-android-toolchain
export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
export PATH=$ANDROID_NDK_TOOLCHAIN_ROOT/bin:$JAVA_HOME/bin:$PATH

I think I could just use even older versions of the NDK but I get a sense, at some point, it makes sense to upgrade to newer versions.
Note that this enabled me to compile Allegro, but I'm still not to the point I have something running on my phone. That being said, without this patch, it would not even compile...","OK, so I downgraded from a patch proposing Gradle 4.10.X to only 4.6. Which, is enough. FYI I was able, with that setup and using android-ndk-r16b/, to build & run Allegro examples on my phone (arm64-v8a target)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,975,2018-12-20T22:15:14Z,2019-01-05T22:16:59Z,2019-01-05T22:16:59Z,MERGED,True,5,6,3,https://github.com/ufoot,[android] updated Gradle to more recent versions,2,[],https://github.com/liballeg/allegro5/pull/975,https://github.com/SiegeLord,5,https://github.com/liballeg/allegro5/pull/975#issuecomment-451695922,"I was trying to build Allegro for android and kept bumping into that error :
> Configure project :allegro
The CompileOptions.bootClasspath property has been deprecated and is scheduled to be removed in Gradle 5.0. Please use the CompileOptions.bootstrapClasspath property instead.


FAILURE: Build failed with an exception.

* What went wrong:
A problem occurred configuring project ':allegro'.
> No toolchains found in the NDK toolchains folder for ABI with prefix: mips64el-linux-android

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.

* Get more help at https://help.gradle.org

BUILD FAILED in 0s
make[2]: *** [lib/allegro-debug.aar] Error 1
make[1]: *** [android/CMakeFiles/aar.dir/all] Error 2
make: *** [all] Error 2

Apparently it's due to the fact this platform has been deprecated in latest versions of Android NDK.
I'm not the only user experiencing this, and it's not strictly Allegro related, eg: -> flutter/flutter#22031
I'm using:
export ANDROID_NDK_ROOT=$HOME/Home/android/android-ndk-r17c
export ANDROID_NDK_TOOLCHAIN_ROOT=$HOME/Home/android/allegro-android-toolchain
export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
export PATH=$ANDROID_NDK_TOOLCHAIN_ROOT/bin:$JAVA_HOME/bin:$PATH

I think I could just use even older versions of the NDK but I get a sense, at some point, it makes sense to upgrade to newer versions.
Note that this enabled me to compile Allegro, but I'm still not to the point I have something running on my phone. That being said, without this patch, it would not even compile...","Works for me, I had to re-accept the licenses for some reason but then things still built fine. Thanks a lot!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,976,2018-12-23T08:19:20Z,2019-01-05T22:07:45Z,2019-01-05T22:07:45Z,MERGED,True,5,1,1,https://github.com/ufoot,Added ifdef to prevent hard ref to glXCreateContextAttribsARB,1,[],https://github.com/liballeg/allegro5/pull/976,https://github.com/ufoot,1,https://github.com/liballeg/allegro5/pull/976,"Master branch would not compile on my box, had to use this #ifdef trick.
This stack overflow ling suggests it's not a bad practice to use glXGetProcAddress, generally speaking. I think it would work in all cases, and that hard-linking on  glXCreateContextAttribsARB is, to some extent, an unneeded optimization. But I'm not the expert here.
What I know is that with this patch, on my box having following properties:
$ uname -a
Linux pat 4.18.0-3-amd64 #1 SMP Debian 4.18.20-2 (2018-11-23) x86_64 GNU/Linux
$ dpkg --list | grep -i glx
ii  libgl1-mesa-dev:amd64                                            18.2.6-1                               amd64        free implementation of the OpenGL API -- GLX development files
ii  libgl1-mesa-glx:amd64                                            18.2.6-1                               amd64        transitional dummy package
ii  libgl1-mesa-glx:i386                                             18.2.6-1                               i386         transitional dummy package
ii  libglx-mesa0:amd64                                               18.2.6-1                               amd64        free implementation of the OpenGL API -- GLX vendor library
ii  libglx-mesa0:i386                                                18.2.6-1                               i386         free implementation of the OpenGL API -- GLX vendor library
ii  libglx0:amd64                                                    1.1.0-1                                amd64        Vendor neutral GL dispatch library -- GLX support
ii  libglx0:i386                                                     1.1.0-1                                i386         Vendor neutral GL dispatch library -- GLX support
ii  libswt-glx-gtk-3-jni                                             3.8.2-5                                amd64        Standard Widget Toolkit for GTK+ GLX JNI library
ii  libva-glx1:amd64                                                 1.7.3-2                                amd64        Video Acceleration (VA) API for Linux -- GLX runtime
ii  libva-glx2:amd64                                                 2.3.0-2                                amd64        Video Acceleration (VA) API for Linux -- GLX runtime
ii  libxcb-glx0:amd64                                                1.13.1-2                               amd64        X C Binding, glx extension
ii  libxcb-glx0:i386                                                 1.13.1-2                               i386         X C Binding, glx extension
ii  libxcb-glx0-dev:amd64                                            1.13.1-2                               amd64        X C Binding, glx extension, development files

I  was able to build Allegro and run the ex_opengl_pixel_shader example successfully. For some reason ex_opengl crashes but I think it's unrelated, really. Again, without that patch, I can't even compile, so hard to compare.","Master branch would not compile on my box, had to use this #ifdef trick.
This stack overflow ling suggests it's not a bad practice to use glXGetProcAddress, generally speaking. I think it would work in all cases, and that hard-linking on  glXCreateContextAttribsARB is, to some extent, an unneeded optimization. But I'm not the expert here.
What I know is that with this patch, on my box having following properties:
$ uname -a
Linux pat 4.18.0-3-amd64 #1 SMP Debian 4.18.20-2 (2018-11-23) x86_64 GNU/Linux
$ dpkg --list | grep -i glx
ii  libgl1-mesa-dev:amd64                                            18.2.6-1                               amd64        free implementation of the OpenGL API -- GLX development files
ii  libgl1-mesa-glx:amd64                                            18.2.6-1                               amd64        transitional dummy package
ii  libgl1-mesa-glx:i386                                             18.2.6-1                               i386         transitional dummy package
ii  libglx-mesa0:amd64                                               18.2.6-1                               amd64        free implementation of the OpenGL API -- GLX vendor library
ii  libglx-mesa0:i386                                                18.2.6-1                               i386         free implementation of the OpenGL API -- GLX vendor library
ii  libglx0:amd64                                                    1.1.0-1                                amd64        Vendor neutral GL dispatch library -- GLX support
ii  libglx0:i386                                                     1.1.0-1                                i386         Vendor neutral GL dispatch library -- GLX support
ii  libswt-glx-gtk-3-jni                                             3.8.2-5                                amd64        Standard Widget Toolkit for GTK+ GLX JNI library
ii  libva-glx1:amd64                                                 1.7.3-2                                amd64        Video Acceleration (VA) API for Linux -- GLX runtime
ii  libva-glx2:amd64                                                 2.3.0-2                                amd64        Video Acceleration (VA) API for Linux -- GLX runtime
ii  libxcb-glx0:amd64                                                1.13.1-2                               amd64        X C Binding, glx extension
ii  libxcb-glx0:i386                                                 1.13.1-2                               i386         X C Binding, glx extension
ii  libxcb-glx0-dev:amd64                                            1.13.1-2                               amd64        X C Binding, glx extension, development files

I  was able to build Allegro and run the ex_opengl_pixel_shader example successfully. For some reason ex_opengl crashes but I think it's unrelated, really. Again, without that patch, I can't even compile, so hard to compare.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,976,2018-12-23T08:19:20Z,2019-01-05T22:07:45Z,2019-01-05T22:07:45Z,MERGED,True,5,1,1,https://github.com/ufoot,Added ifdef to prevent hard ref to glXCreateContextAttribsARB,1,[],https://github.com/liballeg/allegro5/pull/976,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/976#issuecomment-451695114,"Master branch would not compile on my box, had to use this #ifdef trick.
This stack overflow ling suggests it's not a bad practice to use glXGetProcAddress, generally speaking. I think it would work in all cases, and that hard-linking on  glXCreateContextAttribsARB is, to some extent, an unneeded optimization. But I'm not the expert here.
What I know is that with this patch, on my box having following properties:
$ uname -a
Linux pat 4.18.0-3-amd64 #1 SMP Debian 4.18.20-2 (2018-11-23) x86_64 GNU/Linux
$ dpkg --list | grep -i glx
ii  libgl1-mesa-dev:amd64                                            18.2.6-1                               amd64        free implementation of the OpenGL API -- GLX development files
ii  libgl1-mesa-glx:amd64                                            18.2.6-1                               amd64        transitional dummy package
ii  libgl1-mesa-glx:i386                                             18.2.6-1                               i386         transitional dummy package
ii  libglx-mesa0:amd64                                               18.2.6-1                               amd64        free implementation of the OpenGL API -- GLX vendor library
ii  libglx-mesa0:i386                                                18.2.6-1                               i386         free implementation of the OpenGL API -- GLX vendor library
ii  libglx0:amd64                                                    1.1.0-1                                amd64        Vendor neutral GL dispatch library -- GLX support
ii  libglx0:i386                                                     1.1.0-1                                i386         Vendor neutral GL dispatch library -- GLX support
ii  libswt-glx-gtk-3-jni                                             3.8.2-5                                amd64        Standard Widget Toolkit for GTK+ GLX JNI library
ii  libva-glx1:amd64                                                 1.7.3-2                                amd64        Video Acceleration (VA) API for Linux -- GLX runtime
ii  libva-glx2:amd64                                                 2.3.0-2                                amd64        Video Acceleration (VA) API for Linux -- GLX runtime
ii  libxcb-glx0:amd64                                                1.13.1-2                               amd64        X C Binding, glx extension
ii  libxcb-glx0:i386                                                 1.13.1-2                               i386         X C Binding, glx extension
ii  libxcb-glx0-dev:amd64                                            1.13.1-2                               amd64        X C Binding, glx extension, development files

I  was able to build Allegro and run the ex_opengl_pixel_shader example successfully. For some reason ex_opengl crashes but I think it's unrelated, really. Again, without that patch, I can't even compile, so hard to compare.",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,977,2018-12-23T11:07:26Z,2018-12-28T00:41:08Z,2018-12-28T14:52:39Z,MERGED,True,1,2,1,https://github.com/pedro-w,Fix lost precision warning,1,[],https://github.com/liballeg/allegro5/pull/977,https://github.com/pedro-w,1,https://github.com/liballeg/allegro5/pull/977,"This wasn't causing errors but has been bugging me for a while.
In file included from /usr/local/include/allegro5/allegro.h:45:
In file included from /usr/local/include/allegro5/fmaths.h:42:
/usr/local/include/allegro5/inline/fmaths.inl:134:25: warning: implicit conversion loses integer precision: 'int64_t' (aka 'long long') to 'int' [-Wshorten-64-to-32]
         int res = lres >> 16;
             ~~~   ~~~~~^~~~~

Also, it's not guaranteed that int and al_fixed (a.k.a int32_t) are the same type.","This wasn't causing errors but has been bugging me for a while.
In file included from /usr/local/include/allegro5/allegro.h:45:
In file included from /usr/local/include/allegro5/fmaths.h:42:
/usr/local/include/allegro5/inline/fmaths.inl:134:25: warning: implicit conversion loses integer precision: 'int64_t' (aka 'long long') to 'int' [-Wshorten-64-to-32]
         int res = lres >> 16;
             ~~~   ~~~~~^~~~~

Also, it's not guaranteed that int and al_fixed (a.k.a int32_t) are the same type.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,977,2018-12-23T11:07:26Z,2018-12-28T00:41:08Z,2018-12-28T14:52:39Z,MERGED,True,1,2,1,https://github.com/pedro-w,Fix lost precision warning,1,[],https://github.com/liballeg/allegro5/pull/977,https://github.com/fatcerberus,2,https://github.com/liballeg/allegro5/pull/977#issuecomment-449670561,"This wasn't causing errors but has been bugging me for a while.
In file included from /usr/local/include/allegro5/allegro.h:45:
In file included from /usr/local/include/allegro5/fmaths.h:42:
/usr/local/include/allegro5/inline/fmaths.inl:134:25: warning: implicit conversion loses integer precision: 'int64_t' (aka 'long long') to 'int' [-Wshorten-64-to-32]
         int res = lres >> 16;
             ~~~   ~~~~~^~~~~

Also, it's not guaranteed that int and al_fixed (a.k.a int32_t) are the same type.","I actually wasn’t aware there were any platforms where int was 64-bit; I had thought it was 32-bit everywhere.  Apparently I was mistaken...
edit - nevermind, I see lres is explicitly declare as int64_t, I’m an idiot.  I got confused by the deleted int res = ... in the diff...",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,977,2018-12-23T11:07:26Z,2018-12-28T00:41:08Z,2018-12-28T14:52:39Z,MERGED,True,1,2,1,https://github.com/pedro-w,Fix lost precision warning,1,[],https://github.com/liballeg/allegro5/pull/977,https://github.com/pedro-w,3,https://github.com/liballeg/allegro5/pull/977#issuecomment-449698049,"This wasn't causing errors but has been bugging me for a while.
In file included from /usr/local/include/allegro5/allegro.h:45:
In file included from /usr/local/include/allegro5/fmaths.h:42:
/usr/local/include/allegro5/inline/fmaths.inl:134:25: warning: implicit conversion loses integer precision: 'int64_t' (aka 'long long') to 'int' [-Wshorten-64-to-32]
         int res = lres >> 16;
             ~~~   ~~~~~^~~~~

Also, it's not guaranteed that int and al_fixed (a.k.a int32_t) are the same type.","I'll try and explain better. If I take out the ERANGE checks there is:
  int64_t lres = (lx*ly);
  int res = lres >> 16;
  return res;

And writing in the casts explicitly
  int64_t lres = (lx*ly);
  int res = (int) (lres >> 16); // This is the one the compiler complains about
  return (al_fixed) res; // Also this is unnecessary (no-op)

You're absolutely right, (AFAIK) there are no platforms that Allegro supports where int is not 32-bits. So the cast to int and then to al_fixed doesn't do anything and could be omitted. (but that's not the point of this PR)
Is that now OK? Thanks for reviewing.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,977,2018-12-23T11:07:26Z,2018-12-28T00:41:08Z,2018-12-28T14:52:39Z,MERGED,True,1,2,1,https://github.com/pedro-w,Fix lost precision warning,1,[],https://github.com/liballeg/allegro5/pull/977,https://github.com/fatcerberus,4,https://github.com/liballeg/allegro5/pull/977#issuecomment-449737756,"This wasn't causing errors but has been bugging me for a while.
In file included from /usr/local/include/allegro5/allegro.h:45:
In file included from /usr/local/include/allegro5/fmaths.h:42:
/usr/local/include/allegro5/inline/fmaths.inl:134:25: warning: implicit conversion loses integer precision: 'int64_t' (aka 'long long') to 'int' [-Wshorten-64-to-32]
         int res = lres >> 16;
             ~~~   ~~~~~^~~~~

Also, it's not guaranteed that int and al_fixed (a.k.a int32_t) are the same type.","Yeah, I understand the purpose of the change.  I got confused because I noticed the int res bit in the diff and assumed int was 64-bit in your case and that’s what triggered the warning.  I should have viewed the whole file to realize lres was explicitly declared as int64.  Once I saw that, the warning made perfect sense.",True,{'THUMBS_UP': ['https://github.com/pedro-w']}
liballeg/allegro5,https://github.com/liballeg/allegro5,977,2018-12-23T11:07:26Z,2018-12-28T00:41:08Z,2018-12-28T14:52:39Z,MERGED,True,1,2,1,https://github.com/pedro-w,Fix lost precision warning,1,[],https://github.com/liballeg/allegro5/pull/977,https://github.com/SiegeLord,5,https://github.com/liballeg/allegro5/pull/977#issuecomment-450263251,"This wasn't causing errors but has been bugging me for a while.
In file included from /usr/local/include/allegro5/allegro.h:45:
In file included from /usr/local/include/allegro5/fmaths.h:42:
/usr/local/include/allegro5/inline/fmaths.inl:134:25: warning: implicit conversion loses integer precision: 'int64_t' (aka 'long long') to 'int' [-Wshorten-64-to-32]
         int res = lres >> 16;
             ~~~   ~~~~~^~~~~

Also, it's not guaranteed that int and al_fixed (a.k.a int32_t) are the same type.",Looks reasonable. Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,980,2018-12-28T00:14:09Z,2018-12-28T00:39:33Z,2018-12-28T00:39:34Z,MERGED,True,0,6,1,https://github.com/dos1,cmake: fix HarfBuzz detection script and clean up,1,[],https://github.com/liballeg/allegro5/pull/980,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/980,"For starters,
include(${CMAKE_CURRENT_LIST_DIR}/SelectLibraryConfigurations.cmake)
is wrong and should be changed to
include(SelectLibraryConfigurations)
However, judging from both the docs and the actual output, this function
shouldn't be used at all if earlier detection doesn't set _RELEASE and
_DEBUG variants of its variables. Otherwise, a path already found gets
replaced with ""HARFBUZZ_LIBRARY-NOTFOUND"".
Fixes #979","For starters,
include(${CMAKE_CURRENT_LIST_DIR}/SelectLibraryConfigurations.cmake)
is wrong and should be changed to
include(SelectLibraryConfigurations)
However, judging from both the docs and the actual output, this function
shouldn't be used at all if earlier detection doesn't set _RELEASE and
_DEBUG variants of its variables. Otherwise, a path already found gets
replaced with ""HARFBUZZ_LIBRARY-NOTFOUND"".
Fixes #979",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,980,2018-12-28T00:14:09Z,2018-12-28T00:39:33Z,2018-12-28T00:39:34Z,MERGED,True,0,6,1,https://github.com/dos1,cmake: fix HarfBuzz detection script and clean up,1,[],https://github.com/liballeg/allegro5/pull/980,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/980#issuecomment-450262998,"For starters,
include(${CMAKE_CURRENT_LIST_DIR}/SelectLibraryConfigurations.cmake)
is wrong and should be changed to
include(SelectLibraryConfigurations)
However, judging from both the docs and the actual output, this function
shouldn't be used at all if earlier detection doesn't set _RELEASE and
_DEBUG variants of its variables. Otherwise, a path already found gets
replaced with ""HARFBUZZ_LIBRARY-NOTFOUND"".
Fixes #979","I guess I was leaving properly testing this for when I made the windows package >.>... and I'll still do so, hah.
Thanks a lot, this looks a lot more reasonable. Not sure what select_library_configurations is all about, but if it works without it for you, then I'm satisfied.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,982,2019-01-10T04:50:36Z,2019-01-10T05:13:47Z,2019-01-10T05:30:25Z,MERGED,True,2,2,1,https://github.com/dos1,SDL: implement al_(show|hide)_mouse_cursor,1,[],https://github.com/liballeg/allegro5/pull/982,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/982,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,982,2019-01-10T04:50:36Z,2019-01-10T05:13:47Z,2019-01-10T05:30:25Z,MERGED,True,2,2,1,https://github.com/dos1,SDL: implement al_(show|hide)_mouse_cursor,1,[],https://github.com/liballeg/allegro5/pull/982,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/982#issuecomment-452973311,,Wth is that API >_<. Almost as bad as ALLEGRO_ONE... Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,982,2019-01-10T04:50:36Z,2019-01-10T05:13:47Z,2019-01-10T05:30:25Z,MERGED,True,2,2,1,https://github.com/dos1,SDL: implement al_(show|hide)_mouse_cursor,1,[],https://github.com/liballeg/allegro5/pull/982,https://github.com/dos1,3,https://github.com/liballeg/allegro5/pull/982#issuecomment-452974536,,"It's even non-multidisplay aware, had to double check that I'm not in SDL1 docs! :D",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,982,2019-01-10T04:50:36Z,2019-01-10T05:13:47Z,2019-01-10T05:30:25Z,MERGED,True,2,2,1,https://github.com/dos1,SDL: implement al_(show|hide)_mouse_cursor,1,[],https://github.com/liballeg/allegro5/pull/982,https://github.com/fatcerberus,4,https://github.com/liballeg/allegro5/pull/982#issuecomment-452975680,,"ALLEGRO_ONE

The thing about these is, for whatever reason they seem to be a necessary evil.  When I designed the BlendOp API for miniSphere I ultimately ended up with a blending API that looks very similar to Allegro/OpenGL/etc.
It would at least be nice if there were a second CONST_COLOR slot but even modern OpenGL appears to only support one...",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,983,2019-01-13T02:30:43Z,2019-01-21T18:38:43Z,2019-01-21T18:38:43Z,MERGED,True,6,9,1,https://github.com/dos1,bitmap_io: try to identify bitmap format for unknown extensions,1,[],https://github.com/liballeg/allegro5/pull/983,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/983,Allows to load identifiable bitmaps stored with custom extension.,Allows to load identifiable bitmaps stored with custom extension.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,983,2019-01-13T02:30:43Z,2019-01-21T18:38:43Z,2019-01-21T18:38:43Z,MERGED,True,6,9,1,https://github.com/dos1,bitmap_io: try to identify bitmap format for unknown extensions,1,[],https://github.com/liballeg/allegro5/pull/983,https://github.com/fatcerberus,2,https://github.com/liballeg/allegro5/pull/983#issuecomment-453796807,Allows to load identifiable bitmaps stored with custom extension.,"Does this allow you to pass NULL for ext to get the auto-detection?  If not, perhaps it should.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,983,2019-01-13T02:30:43Z,2019-01-21T18:38:43Z,2019-01-21T18:38:43Z,MERGED,True,6,9,1,https://github.com/dos1,bitmap_io: try to identify bitmap format for unknown extensions,1,[],https://github.com/liballeg/allegro5/pull/983,https://github.com/dos1,3,https://github.com/liballeg/allegro5/pull/983#issuecomment-453796847,Allows to load identifiable bitmaps stored with custom extension.,"Hmm, thinking about it now, I'd actually prefer to always try to identify and only rely on the extension when the bitmap can't be identified.
What do you think?",True,"{'THUMBS_UP': ['https://github.com/fatcerberus', 'https://github.com/allefant']}"
liballeg/allegro5,https://github.com/liballeg/allegro5,983,2019-01-13T02:30:43Z,2019-01-21T18:38:43Z,2019-01-21T18:38:43Z,MERGED,True,6,9,1,https://github.com/dos1,bitmap_io: try to identify bitmap format for unknown extensions,1,[],https://github.com/liballeg/allegro5/pull/983,https://github.com/fatcerberus,4,https://github.com/liballeg/allegro5/pull/983#issuecomment-453796931,Allows to load identifiable bitmaps stored with custom extension.,"I’d be behind that change 100%.  Currently in miniSphere I have to do the filetype detection myself, to support files saved with the wrong extension.  It would be great to just let Allegro do the detection for me.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,983,2019-01-13T02:30:43Z,2019-01-21T18:38:43Z,2019-01-21T18:38:43Z,MERGED,True,6,9,1,https://github.com/dos1,bitmap_io: try to identify bitmap format for unknown extensions,1,[],https://github.com/liballeg/allegro5/pull/983,https://github.com/fatcerberus,5,https://github.com/liballeg/allegro5/pull/983#issuecomment-453805491,Allows to load identifiable bitmaps stored with custom extension.,"As you can see, I'm basically reimplementing what Allegro could in theory already do for me, but unfortunately when loading from memfiles (al_load_bitmap_f) I apparently have to supply the extension:
https://github.com/fatcerberus/minisphere/blob/master/src/minisphere/image.c#L165-L176
Changing to use autodetection first and the supplied extension only as a fallback like you suggest would allow me to get rid of the above code altogether. 😃
(edit: and now I re-check the documentation and see I could just pass NULL for the extension... I don't think that was the case when I wrote the above code though... in any case would be great to be able to provide the extension as a hint but still get the benefit of auto-detection)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,983,2019-01-13T02:30:43Z,2019-01-21T18:38:43Z,2019-01-21T18:38:43Z,MERGED,True,6,9,1,https://github.com/dos1,bitmap_io: try to identify bitmap format for unknown extensions,1,[],https://github.com/liballeg/allegro5/pull/983,https://github.com/SiegeLord,6,https://github.com/liballeg/allegro5/pull/983#issuecomment-453806826,Allows to load identifiable bitmaps stored with custom extension.,"I'm all for identifying first. It's not clear to me when you'd ever want to fall back to the extension, honestly, unless somehow the identification code is incomplete. I suppose it's better be safe than sorry, however.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,983,2019-01-13T02:30:43Z,2019-01-21T18:38:43Z,2019-01-21T18:38:43Z,MERGED,True,6,9,1,https://github.com/dos1,bitmap_io: try to identify bitmap format for unknown extensions,1,[],https://github.com/liballeg/allegro5/pull/983,https://github.com/fatcerberus,7,https://github.com/liballeg/allegro5/pull/983#issuecomment-453807142,Allows to load identifiable bitmaps stored with custom extension.,"It's not clear to me when you'd ever want to fall back to the extension, honestly

Yeah, I agree, if a file type is supported then the autodetection logic should be able to identify it.  The fallback would basically just be if the code was buggy or if a format was extended in a way that the detection failed (but the file is otherwise compatible).  Also the ident parameter can’t be removed without breaking source compatibility, so the caller may as well provide it. 😉
In theory there might also be an unseekable file so you don’t have the luxury of reading ahead, but that’s just a hypothetical and unlikely to happen in any real-world scenario.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,983,2019-01-13T02:30:43Z,2019-01-21T18:38:43Z,2019-01-21T18:38:43Z,MERGED,True,6,9,1,https://github.com/dos1,bitmap_io: try to identify bitmap format for unknown extensions,1,[],https://github.com/liballeg/allegro5/pull/983,https://github.com/dos1,8,https://github.com/liballeg/allegro5/pull/983#issuecomment-453828449,Allows to load identifiable bitmaps stored with custom extension.,"Some native loaders currently define extensions without providing identification function, but otherwise yeah, identification alone should be enough.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,983,2019-01-13T02:30:43Z,2019-01-21T18:38:43Z,2019-01-21T18:38:43Z,MERGED,True,6,9,1,https://github.com/dos1,bitmap_io: try to identify bitmap format for unknown extensions,1,[],https://github.com/liballeg/allegro5/pull/983,https://github.com/dos1,9,https://github.com/liballeg/allegro5/pull/983#issuecomment-453828743,Allows to load identifiable bitmaps stored with custom extension.,"(ideally the native loader should probably be invoked as a fallback for every extension, since it might support something that's not defined in Allegro, but that's a different story)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,983,2019-01-13T02:30:43Z,2019-01-21T18:38:43Z,2019-01-21T18:38:43Z,MERGED,True,6,9,1,https://github.com/dos1,bitmap_io: try to identify bitmap format for unknown extensions,1,[],https://github.com/liballeg/allegro5/pull/983,https://github.com/SiegeLord,10,https://github.com/liballeg/allegro5/pull/983#issuecomment-456165913,Allows to load identifiable bitmaps stored with custom extension.,Excellent. Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,984,2019-01-13T14:43:59Z,2019-01-13T18:15:53Z,2019-01-13T18:15:58Z,MERGED,True,1,1,1,https://github.com/rofl0r,xwin.c: increase X_MAX_EVENTS to 50,1,[],https://github.com/liballeg/allegro5/pull/984,https://github.com/rofl0r,1,https://github.com/liballeg/allegro5/pull/984,"this should fix mouse lag on Linux with hi-res devices.
( see aseprite/aseprite#283 )","this should fix mouse lag on Linux with hi-res devices.
( see aseprite/aseprite#283 )",True,{'THUMBS_UP': ['https://github.com/ericoporto']}
liballeg/allegro5,https://github.com/liballeg/allegro5,984,2019-01-13T14:43:59Z,2019-01-13T18:15:53Z,2019-01-13T18:15:58Z,MERGED,True,1,1,1,https://github.com/rofl0r,xwin.c: increase X_MAX_EVENTS to 50,1,[],https://github.com/liballeg/allegro5/pull/984,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/984#issuecomment-453852784,"this should fix mouse lag on Linux with hi-res devices.
( see aseprite/aseprite#283 )",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,986,2019-01-20T18:09:42Z,2019-01-21T19:47:08Z,2019-01-21T20:48:47Z,MERGED,True,3,1,1,https://github.com/dos1,cmake: fix static linking ttf addon dependencies when there's circular dependency between freetype and harfbuzz,1,[],https://github.com/liballeg/allegro5/pull/986,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/986,Otherwise it ends up with unresolved symbols.,Otherwise it ends up with unresolved symbols.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,986,2019-01-20T18:09:42Z,2019-01-21T19:47:08Z,2019-01-21T20:48:47Z,MERGED,True,3,1,1,https://github.com/dos1,cmake: fix static linking ttf addon dependencies when there's circular dependency between freetype and harfbuzz,1,[],https://github.com/liballeg/allegro5/pull/986,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/986#issuecomment-456181921,Otherwise it ends up with unresolved symbols.,Weird... but I guess that's harmless even if sometimes unnecessary. Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,986,2019-01-20T18:09:42Z,2019-01-21T19:47:08Z,2019-01-21T20:48:47Z,MERGED,True,3,1,1,https://github.com/dos1,cmake: fix static linking ttf addon dependencies when there's circular dependency between freetype and harfbuzz,1,[],https://github.com/liballeg/allegro5/pull/986,https://github.com/fatcerberus,3,https://github.com/liballeg/allegro5/pull/986#issuecomment-456188647,Otherwise it ends up with unresolved symbols.,"Yeah, the linker only uses the libraries on the command line to resolve currently unresolved symbols; if there’s a circular dependency then linking in the second library will add new unresolved symbols (i.e. the linker won’t look at things earlier in the command line), and you have to name the earlier library again.
In my experience MSVC is the only compiler that doesn’t exhibit this behavior.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,986,2019-01-20T18:09:42Z,2019-01-21T19:47:08Z,2019-01-21T20:48:47Z,MERGED,True,3,1,1,https://github.com/dos1,cmake: fix static linking ttf addon dependencies when there's circular dependency between freetype and harfbuzz,1,[],https://github.com/liballeg/allegro5/pull/986,https://github.com/dos1,4,https://github.com/liballeg/allegro5/pull/986#issuecomment-456195082,Otherwise it ends up with unresolved symbols.,"I think linker parameters can be also surrounded with -( and -) in order to specify a group of libraries to deal with that, but I have no idea how to get CMake to do that. Specifying the library second time seems to be a commonly practiced solution too, so I just went with that :)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,988,2019-01-21T19:44:30Z,2019-01-25T02:26:18Z,2019-01-25T02:26:19Z,MERGED,True,47,49,2,https://github.com/SiegeLord,Restore FBO/GLContext after we're done with the current context.,1,[],https://github.com/liballeg/allegro5/pull/988,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/988,"Previously, we would restore it before we were done with the current
context, causing issues as described in #981.
Fixes #981.","Previously, we would restore it before we were done with the current
context, causing issues as described in #981.
Fixes #981.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,988,2019-01-21T19:44:30Z,2019-01-25T02:26:18Z,2019-01-25T02:26:19Z,MERGED,True,47,49,2,https://github.com/SiegeLord,Restore FBO/GLContext after we're done with the current context.,1,[],https://github.com/liballeg/allegro5/pull/988,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/988#issuecomment-456181385,"Previously, we would restore it before we were done with the current
context, causing issues as described in #981.
Fixes #981.",@elias-pschernig What do you think of this fix?,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,988,2019-01-21T19:44:30Z,2019-01-25T02:26:18Z,2019-01-25T02:26:19Z,MERGED,True,47,49,2,https://github.com/SiegeLord,Restore FBO/GLContext after we're done with the current context.,1,[],https://github.com/liballeg/allegro5/pull/988,https://github.com/allefant,3,https://github.com/liballeg/allegro5/pull/988#issuecomment-456208306,"Previously, we would restore it before we were done with the current
context, causing issues as described in #981.
Fixes #981.","@elias-pschernig What do you think of this fix?

Looks good to me, and it does fix my test case. My game also still works with the PR applied (but I changed it since to also set the target bitmap before locking I think). I did not test the OpenGL ES version (and my original bug was not possible there because the ES version does not restore the client attributes, unlike the desktop GL version).",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,990,2019-01-22T02:11:11Z,2019-01-25T02:29:45Z,2019-01-25T02:29:45Z,MERGED,True,10,0,1,https://github.com/dos1,opensl: destroy player and output mixer when deallocating voice,1,[],https://github.com/liballeg/allegro5/pull/990,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/990,Fixes #957,Fixes #957,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,990,2019-01-22T02:11:11Z,2019-01-25T02:29:45Z,2019-01-25T02:29:45Z,MERGED,True,10,0,1,https://github.com/dos1,opensl: destroy player and output mixer when deallocating voice,1,[],https://github.com/liballeg/allegro5/pull/990,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/990#issuecomment-457433220,Fixes #957,"Looks good, thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,991,2019-01-24T16:41:20Z,2019-02-03T05:04:58Z,2019-02-03T05:04:58Z,MERGED,True,407,7,3,https://github.com/allefant,Add missing OpenGL 4.3 functions.,1,[],https://github.com/liballeg/allegro5/pull/991,https://github.com/allefant,1,https://github.com/liballeg/allegro5/pull/991,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,991,2019-01-24T16:41:20Z,2019-02-03T05:04:58Z,2019-02-03T05:04:58Z,MERGED,True,407,7,3,https://github.com/allefant,Add missing OpenGL 4.3 functions.,1,[],https://github.com/liballeg/allegro5/pull/991,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/991#issuecomment-457433041,,"Looks good, I think!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,992,2019-01-31T13:42:27Z,2019-02-05T02:30:34Z,2019-02-07T13:13:48Z,MERGED,True,92,2,7,https://github.com/aldrikboy,Ability to define stacksize when creating a new thread,6,[],https://github.com/liballeg/allegro5/pull/992,https://github.com/aldrikboy,1,https://github.com/liballeg/allegro5/pull/992,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,992,2019-01-31T13:42:27Z,2019-02-05T02:30:34Z,2019-02-07T13:13:48Z,MERGED,True,92,2,7,https://github.com/aldrikboy,Ability to define stacksize when creating a new thread,6,[],https://github.com/liballeg/allegro5/pull/992,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/992#issuecomment-459995870,,"This looks mostly good, thanks. One thing that needs to be fixed is formatting: in Allegro we use 3 space indentation, while you have a mix of spaces and a few tabs. Would you mind fixing that? After that, I think it's good to go.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,992,2019-01-31T13:42:27Z,2019-02-05T02:30:34Z,2019-02-07T13:13:48Z,MERGED,True,92,2,7,https://github.com/aldrikboy,Ability to define stacksize when creating a new thread,6,[],https://github.com/liballeg/allegro5/pull/992,https://github.com/dos1,3,https://github.com/liballeg/allegro5/pull/992#issuecomment-460013152,,"This breaks the build with SDL2 backend. I won't even mind if it's just a dummy function there, but it should at least compile and link properly :P",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,992,2019-01-31T13:42:27Z,2019-02-05T02:30:34Z,2019-02-07T13:13:48Z,MERGED,True,92,2,7,https://github.com/aldrikboy,Ability to define stacksize when creating a new thread,6,[],https://github.com/liballeg/allegro5/pull/992,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/992#issuecomment-460022512,,"We should start writing these things using ALLEGRO_SYSTEM_INTERFACE (and convert existing ones as well), so that we don't need to implement it for every single system simultaneously...",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,992,2019-01-31T13:42:27Z,2019-02-05T02:30:34Z,2019-02-07T13:13:48Z,MERGED,True,92,2,7,https://github.com/aldrikboy,Ability to define stacksize when creating a new thread,6,[],https://github.com/liballeg/allegro5/pull/992,https://github.com/SiegeLord,5,https://github.com/liballeg/allegro5/pull/992#issuecomment-460119929,,"This looks great, @aldrikboy, thanks for doing a proper implementation for SDL backend. Would you mind renaming the internal _al_thread_with_stacksize_create to _al_thread_create_with_stacksize? Other than that it looks great.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,992,2019-01-31T13:42:27Z,2019-02-05T02:30:34Z,2019-02-07T13:13:48Z,MERGED,True,92,2,7,https://github.com/aldrikboy,Ability to define stacksize when creating a new thread,6,[],https://github.com/liballeg/allegro5/pull/992,https://github.com/SiegeLord,6,https://github.com/liballeg/allegro5/pull/992#issuecomment-460491357,,Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,993,2019-02-03T04:39:43Z,2019-02-03T05:04:39Z,2019-02-03T05:04:43Z,MERGED,True,12,2,1,https://github.com/dos1,SDL: implement al_inhibit_screensaver,1,[],https://github.com/liballeg/allegro5/pull/993,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/993,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,993,2019-02-03T04:39:43Z,2019-02-03T05:04:39Z,2019-02-03T05:04:43Z,MERGED,True,12,2,1,https://github.com/dos1,SDL: implement al_inhibit_screensaver,1,[],https://github.com/liballeg/allegro5/pull/993,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/993#issuecomment-460023575,,Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,994,2019-02-03T04:39:53Z,2019-02-04T03:01:20Z,2019-02-04T03:01:25Z,MERGED,True,1,2,2,https://github.com/dos1,SDL: set window title via al_get_new_window_title(),1,[],https://github.com/liballeg/allegro5/pull/994,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/994,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,994,2019-02-03T04:39:53Z,2019-02-04T03:01:20Z,2019-02-04T03:01:25Z,MERGED,True,1,2,2,https://github.com/dos1,SDL: set window title via al_get_new_window_title(),1,[],https://github.com/liballeg/allegro5/pull/994,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/994#issuecomment-460023715,,Is that title field used for anything? It doesn't appear to be written to (or now read) anywhere...,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,994,2019-02-03T04:39:53Z,2019-02-04T03:01:20Z,2019-02-04T03:01:25Z,MERGED,True,1,2,2,https://github.com/dos1,SDL: set window title via al_get_new_window_title(),1,[],https://github.com/liballeg/allegro5/pull/994,https://github.com/dos1,3,https://github.com/liballeg/allegro5/pull/994#issuecomment-460060221,,"Right, updated :)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,994,2019-02-03T04:39:53Z,2019-02-04T03:01:20Z,2019-02-04T03:01:25Z,MERGED,True,1,2,2,https://github.com/dos1,SDL: set window title via al_get_new_window_title(),1,[],https://github.com/liballeg/allegro5/pull/994,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/994#issuecomment-460118655,,Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,997,2019-02-04T06:14:49Z,2019-03-09T19:10:27Z,2019-03-09T19:10:27Z,CLOSED,False,44,12,2,https://github.com/ZoriaRPG,Fix: Race Condition & Add Static Runtime Option,4,[],https://github.com/liballeg/allegro5/pull/997,https://github.com/ZoriaRPG,1,https://github.com/liballeg/allegro5/pull/997,"Changelog:
Fix: The keyboard handler has a race condition that can cause Allegro programs to stop accepting any keyboard input (usually manifests itself after the program has been running a considerable length of time). Replaced the old attempt at protecting the critical section with a mutex.
( evouga, 12th August, 2017 )
Feat: Added option to compile Allegro with a static runtime library.  (ZC needs this.)
( evouga, 19th August, 2017 )
FixL Added a missing #include directive.
( evouga, 10th August, 2017 )","Changelog:
Fix: The keyboard handler has a race condition that can cause Allegro programs to stop accepting any keyboard input (usually manifests itself after the program has been running a considerable length of time). Replaced the old attempt at protecting the critical section with a mutex.
( evouga, 12th August, 2017 )
Feat: Added option to compile Allegro with a static runtime library.  (ZC needs this.)
( evouga, 19th August, 2017 )
FixL Added a missing #include directive.
( evouga, 10th August, 2017 )",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,997,2019-02-04T06:14:49Z,2019-03-09T19:10:27Z,2019-03-09T19:10:27Z,CLOSED,False,44,12,2,https://github.com/ZoriaRPG,Fix: Race Condition & Add Static Runtime Option,4,[],https://github.com/liballeg/allegro5/pull/997,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/997#issuecomment-471212732,"Changelog:
Fix: The keyboard handler has a race condition that can cause Allegro programs to stop accepting any keyboard input (usually manifests itself after the program has been running a considerable length of time). Replaced the old attempt at protecting the critical section with a mutex.
( evouga, 12th August, 2017 )
Feat: Added option to compile Allegro with a static runtime library.  (ZC needs this.)
( evouga, 19th August, 2017 )
FixL Added a missing #include directive.
( evouga, 10th August, 2017 )","Thanks, this looks good! The only thing I've changed after merging this is to toggle the STATIC_RUNTIME option to off by default, you can always turn it back on as necessary on the command line.
Merged as 51d822d.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,998,2019-02-04T22:59:06Z,2019-02-05T02:28:56Z,2019-02-05T02:29:00Z,MERGED,True,0,5,1,https://github.com/dos1,SDL: remove an unused function causing compiler warnings,1,[],https://github.com/liballeg/allegro5/pull/998,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/998,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,998,2019-02-04T22:59:06Z,2019-02-05T02:28:56Z,2019-02-05T02:29:00Z,MERGED,True,0,5,1,https://github.com/dos1,SDL: remove an unused function causing compiler warnings,1,[],https://github.com/liballeg/allegro5/pull/998,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/998#issuecomment-460491052,,Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,999,2019-02-05T02:29:28Z,2019-02-12T01:44:28Z,2019-02-12T01:44:33Z,MERGED,True,62,21,3,https://github.com/dos1,SDL: hidpi support,1,[],https://github.com/liballeg/allegro5/pull/999,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/999,"This time done right :D
I'm not yet sure if the case of pixel ratio changing at runtime will be handled properly (it should be, but you never know until you see it :P ), but considering that at this time SDL supports hidpi only on macOS, iOS and Emscripten, it can be tackled in a later PR.","This time done right :D
I'm not yet sure if the case of pixel ratio changing at runtime will be handled properly (it should be, but you never know until you see it :P ), but considering that at this time SDL supports hidpi only on macOS, iOS and Emscripten, it can be tackled in a later PR.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,999,2019-02-05T02:29:28Z,2019-02-12T01:44:28Z,2019-02-12T01:44:33Z,MERGED,True,62,21,3,https://github.com/dos1,SDL: hidpi support,1,[],https://github.com/liballeg/allegro5/pull/999,https://github.com/dos1,2,https://github.com/liballeg/allegro5/pull/999#issuecomment-462012184,"This time done right :D
I'm not yet sure if the case of pixel ratio changing at runtime will be handled properly (it should be, but you never know until you see it :P ), but considering that at this time SDL supports hidpi only on macOS, iOS and Emscripten, it can be tackled in a later PR.",Updated!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,999,2019-02-05T02:29:28Z,2019-02-12T01:44:28Z,2019-02-12T01:44:33Z,MERGED,True,62,21,3,https://github.com/dos1,SDL: hidpi support,1,[],https://github.com/liballeg/allegro5/pull/999,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/999#issuecomment-462577750,"This time done right :D
I'm not yet sure if the case of pixel ratio changing at runtime will be handled properly (it should be, but you never know until you see it :P ), but considering that at this time SDL supports hidpi only on macOS, iOS and Emscripten, it can be tackled in a later PR.",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1000,2019-02-05T03:05:13Z,2019-02-14T02:36:55Z,2019-02-14T02:37:00Z,MERGED,True,29,5,5,https://github.com/dos1,Experimental emscripten support with SDL platform,1,[],https://github.com/liballeg/allegro5/pull/1000,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/1000,"Just a bare-bones stuff to get the thing running with the SDL backend. Roughly based on some old @elias-pschernig's patch, but greatly simplified thanks to the GLES rework.
I compile it with:
-DWANT_ALLOW_SSE=OFF -DVORBIS_COMPILES=yes -DTTF_COMPILES=yes -DWANT_EXAMPLES=no -DWANT_DEMO=no -DWANT_TESTS=no -DWANT_MONOLITH=yes -DWANT_OPENAL=no -DSHARED=no -DEMSCRIPTEN_GENERATE_BITCODE_STATIC_LIBRARIES=yes
then manually link (so I don't have to do it on the game side) with:
emcc liballegro_monolith-static.bc libSDL2main.a libSDL2.a libvorbisfile.a libvorbis.a libopusfile.a libopus.a libphysfs.a libtheoradec.a libFLAC.a libogg.a libdumb.a libfreetype.a libharfbuzz.a libfreetype.a libjpeg.a libwebp.a libpng.a libz.a libbz2.a -o allegro5.so
and it seems to work :)
(I compiled all dependencies manually, without using emscripten's port system)
Note: There's no support for audio and video streams for now, as those depend on threading.","Just a bare-bones stuff to get the thing running with the SDL backend. Roughly based on some old @elias-pschernig's patch, but greatly simplified thanks to the GLES rework.
I compile it with:
-DWANT_ALLOW_SSE=OFF -DVORBIS_COMPILES=yes -DTTF_COMPILES=yes -DWANT_EXAMPLES=no -DWANT_DEMO=no -DWANT_TESTS=no -DWANT_MONOLITH=yes -DWANT_OPENAL=no -DSHARED=no -DEMSCRIPTEN_GENERATE_BITCODE_STATIC_LIBRARIES=yes
then manually link (so I don't have to do it on the game side) with:
emcc liballegro_monolith-static.bc libSDL2main.a libSDL2.a libvorbisfile.a libvorbis.a libopusfile.a libopus.a libphysfs.a libtheoradec.a libFLAC.a libogg.a libdumb.a libfreetype.a libharfbuzz.a libfreetype.a libjpeg.a libwebp.a libpng.a libz.a libbz2.a -o allegro5.so
and it seems to work :)
(I compiled all dependencies manually, without using emscripten's port system)
Note: There's no support for audio and video streams for now, as those depend on threading.",True,{'HEART': ['https://github.com/cancerberoSgx']}
liballeg/allegro5,https://github.com/liballeg/allegro5,1000,2019-02-05T03:05:13Z,2019-02-14T02:36:55Z,2019-02-14T02:37:00Z,MERGED,True,29,5,5,https://github.com/dos1,Experimental emscripten support with SDL platform,1,[],https://github.com/liballeg/allegro5/pull/1000,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1000#issuecomment-461670610,"Just a bare-bones stuff to get the thing running with the SDL backend. Roughly based on some old @elias-pschernig's patch, but greatly simplified thanks to the GLES rework.
I compile it with:
-DWANT_ALLOW_SSE=OFF -DVORBIS_COMPILES=yes -DTTF_COMPILES=yes -DWANT_EXAMPLES=no -DWANT_DEMO=no -DWANT_TESTS=no -DWANT_MONOLITH=yes -DWANT_OPENAL=no -DSHARED=no -DEMSCRIPTEN_GENERATE_BITCODE_STATIC_LIBRARIES=yes
then manually link (so I don't have to do it on the game side) with:
emcc liballegro_monolith-static.bc libSDL2main.a libSDL2.a libvorbisfile.a libvorbis.a libopusfile.a libopus.a libphysfs.a libtheoradec.a libFLAC.a libogg.a libdumb.a libfreetype.a libharfbuzz.a libfreetype.a libjpeg.a libwebp.a libpng.a libz.a libbz2.a -o allegro5.so
and it seems to work :)
(I compiled all dependencies manually, without using emscripten's port system)
Note: There's no support for audio and video streams for now, as those depend on threading.","I'm confused a little bit. I don't see anything about disabling threads in this patch, which to me means that SDL implements them somehow on emscripten. Is that not true?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1000,2019-02-05T03:05:13Z,2019-02-14T02:36:55Z,2019-02-14T02:37:00Z,MERGED,True,29,5,5,https://github.com/dos1,Experimental emscripten support with SDL platform,1,[],https://github.com/liballeg/allegro5/pull/1000,https://github.com/dos1,3,https://github.com/liballeg/allegro5/pull/1000#issuecomment-461671044,"Just a bare-bones stuff to get the thing running with the SDL backend. Roughly based on some old @elias-pschernig's patch, but greatly simplified thanks to the GLES rework.
I compile it with:
-DWANT_ALLOW_SSE=OFF -DVORBIS_COMPILES=yes -DTTF_COMPILES=yes -DWANT_EXAMPLES=no -DWANT_DEMO=no -DWANT_TESTS=no -DWANT_MONOLITH=yes -DWANT_OPENAL=no -DSHARED=no -DEMSCRIPTEN_GENERATE_BITCODE_STATIC_LIBRARIES=yes
then manually link (so I don't have to do it on the game side) with:
emcc liballegro_monolith-static.bc libSDL2main.a libSDL2.a libvorbisfile.a libvorbis.a libopusfile.a libopus.a libphysfs.a libtheoradec.a libFLAC.a libogg.a libdumb.a libfreetype.a libharfbuzz.a libfreetype.a libjpeg.a libwebp.a libpng.a libz.a libbz2.a -o allegro5.so
and it seems to work :)
(I compiled all dependencies manually, without using emscripten's port system)
Note: There's no support for audio and video streams for now, as those depend on threading.","Emscripten implements the pthreads API, but it doesn't actually do anything unless experimental pthreads support via webworkers is enabled (which doesn't actually work in current browsers thanks to Meltdown/Spectre mitigations).",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1000,2019-02-05T03:05:13Z,2019-02-14T02:36:55Z,2019-02-14T02:37:00Z,MERGED,True,29,5,5,https://github.com/dos1,Experimental emscripten support with SDL platform,1,[],https://github.com/liballeg/allegro5/pull/1000,https://github.com/dos1,4,https://github.com/liballeg/allegro5/pull/1000#issuecomment-461671229,"Just a bare-bones stuff to get the thing running with the SDL backend. Roughly based on some old @elias-pschernig's patch, but greatly simplified thanks to the GLES rework.
I compile it with:
-DWANT_ALLOW_SSE=OFF -DVORBIS_COMPILES=yes -DTTF_COMPILES=yes -DWANT_EXAMPLES=no -DWANT_DEMO=no -DWANT_TESTS=no -DWANT_MONOLITH=yes -DWANT_OPENAL=no -DSHARED=no -DEMSCRIPTEN_GENERATE_BITCODE_STATIC_LIBRARIES=yes
then manually link (so I don't have to do it on the game side) with:
emcc liballegro_monolith-static.bc libSDL2main.a libSDL2.a libvorbisfile.a libvorbis.a libopusfile.a libopus.a libphysfs.a libtheoradec.a libFLAC.a libogg.a libdumb.a libfreetype.a libharfbuzz.a libfreetype.a libjpeg.a libwebp.a libpng.a libz.a libbz2.a -o allegro5.so
and it seems to work :)
(I compiled all dependencies manually, without using emscripten's port system)
Note: There's no support for audio and video streams for now, as those depend on threading.","(also, there's no way to not be confused with emscripten, you just have to accept it ;))",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1000,2019-02-05T03:05:13Z,2019-02-14T02:36:55Z,2019-02-14T02:37:00Z,MERGED,True,29,5,5,https://github.com/dos1,Experimental emscripten support with SDL platform,1,[],https://github.com/liballeg/allegro5/pull/1000,https://github.com/fatcerberus,5,https://github.com/liballeg/allegro5/pull/1000#issuecomment-461671564,"Just a bare-bones stuff to get the thing running with the SDL backend. Roughly based on some old @elias-pschernig's patch, but greatly simplified thanks to the GLES rework.
I compile it with:
-DWANT_ALLOW_SSE=OFF -DVORBIS_COMPILES=yes -DTTF_COMPILES=yes -DWANT_EXAMPLES=no -DWANT_DEMO=no -DWANT_TESTS=no -DWANT_MONOLITH=yes -DWANT_OPENAL=no -DSHARED=no -DEMSCRIPTEN_GENERATE_BITCODE_STATIC_LIBRARIES=yes
then manually link (so I don't have to do it on the game side) with:
emcc liballegro_monolith-static.bc libSDL2main.a libSDL2.a libvorbisfile.a libvorbis.a libopusfile.a libopus.a libphysfs.a libtheoradec.a libFLAC.a libogg.a libdumb.a libfreetype.a libharfbuzz.a libfreetype.a libjpeg.a libwebp.a libpng.a libz.a libbz2.a -o allegro5.so
and it seems to work :)
(I compiled all dependencies manually, without using emscripten's port system)
Note: There's no support for audio and video streams for now, as those depend on threading.","I thought web workers themselves weren’t disabled, it was just the SharedArrayBuffer that allows workers to communicate directly (instead of the weird postMessage API).",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1000,2019-02-05T03:05:13Z,2019-02-14T02:36:55Z,2019-02-14T02:37:00Z,MERGED,True,29,5,5,https://github.com/dos1,Experimental emscripten support with SDL platform,1,[],https://github.com/liballeg/allegro5/pull/1000,https://github.com/SiegeLord,6,https://github.com/liballeg/allegro5/pull/1000#issuecomment-461671726,"Just a bare-bones stuff to get the thing running with the SDL backend. Roughly based on some old @elias-pschernig's patch, but greatly simplified thanks to the GLES rework.
I compile it with:
-DWANT_ALLOW_SSE=OFF -DVORBIS_COMPILES=yes -DTTF_COMPILES=yes -DWANT_EXAMPLES=no -DWANT_DEMO=no -DWANT_TESTS=no -DWANT_MONOLITH=yes -DWANT_OPENAL=no -DSHARED=no -DEMSCRIPTEN_GENERATE_BITCODE_STATIC_LIBRARIES=yes
then manually link (so I don't have to do it on the game side) with:
emcc liballegro_monolith-static.bc libSDL2main.a libSDL2.a libvorbisfile.a libvorbis.a libopusfile.a libopus.a libphysfs.a libtheoradec.a libFLAC.a libogg.a libdumb.a libfreetype.a libharfbuzz.a libfreetype.a libjpeg.a libwebp.a libpng.a libz.a libbz2.a -o allegro5.so
and it seems to work :)
(I compiled all dependencies manually, without using emscripten's port system)
Note: There's no support for audio and video streams for now, as those depend on threading.","I noticed (for the first time) the heartbeat system, I wonder if we can implement threads in general with it. This'll will probably need an interface system that SDL/other backends can fallback on emscriopten. Then, we won't have to do the timer callback thing manually like you did.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1000,2019-02-05T03:05:13Z,2019-02-14T02:36:55Z,2019-02-14T02:37:00Z,MERGED,True,29,5,5,https://github.com/dos1,Experimental emscripten support with SDL platform,1,[],https://github.com/liballeg/allegro5/pull/1000,https://github.com/dos1,7,https://github.com/liballeg/allegro5/pull/1000#issuecomment-461672798,"Just a bare-bones stuff to get the thing running with the SDL backend. Roughly based on some old @elias-pschernig's patch, but greatly simplified thanks to the GLES rework.
I compile it with:
-DWANT_ALLOW_SSE=OFF -DVORBIS_COMPILES=yes -DTTF_COMPILES=yes -DWANT_EXAMPLES=no -DWANT_DEMO=no -DWANT_TESTS=no -DWANT_MONOLITH=yes -DWANT_OPENAL=no -DSHARED=no -DEMSCRIPTEN_GENERATE_BITCODE_STATIC_LIBRARIES=yes
then manually link (so I don't have to do it on the game side) with:
emcc liballegro_monolith-static.bc libSDL2main.a libSDL2.a libvorbisfile.a libvorbis.a libopusfile.a libopus.a libphysfs.a libtheoradec.a libFLAC.a libogg.a libdumb.a libfreetype.a libharfbuzz.a libfreetype.a libjpeg.a libwebp.a libpng.a libz.a libbz2.a -o allegro5.so
and it seems to work :)
(I compiled all dependencies manually, without using emscripten's port system)
Note: There's no support for audio and video streams for now, as those depend on threading.","@fatcerberus Yup, I was referring to emscripten's pthreads support, which requires SharedArrayBuffer.
@SiegeLord I don't think you can really generalize it this way (an infinite loop inside a thread is going to break everything; any long running loop is going to give you troubles in the browser too), but for short-lived, repeating callbacks it should be good enough. That's how I think audio and video streams can be eventually tackled.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1000,2019-02-05T03:05:13Z,2019-02-14T02:36:55Z,2019-02-14T02:37:00Z,MERGED,True,29,5,5,https://github.com/dos1,Experimental emscripten support with SDL platform,1,[],https://github.com/liballeg/allegro5/pull/1000,https://github.com/dos1,8,https://github.com/liballeg/allegro5/pull/1000#issuecomment-461673475,"Just a bare-bones stuff to get the thing running with the SDL backend. Roughly based on some old @elias-pschernig's patch, but greatly simplified thanks to the GLES rework.
I compile it with:
-DWANT_ALLOW_SSE=OFF -DVORBIS_COMPILES=yes -DTTF_COMPILES=yes -DWANT_EXAMPLES=no -DWANT_DEMO=no -DWANT_TESTS=no -DWANT_MONOLITH=yes -DWANT_OPENAL=no -DSHARED=no -DEMSCRIPTEN_GENERATE_BITCODE_STATIC_LIBRARIES=yes
then manually link (so I don't have to do it on the game side) with:
emcc liballegro_monolith-static.bc libSDL2main.a libSDL2.a libvorbisfile.a libvorbis.a libopusfile.a libopus.a libphysfs.a libtheoradec.a libFLAC.a libogg.a libdumb.a libfreetype.a libharfbuzz.a libfreetype.a libjpeg.a libwebp.a libpng.a libz.a libbz2.a -o allegro5.so
and it seems to work :)
(I compiled all dependencies manually, without using emscripten's port system)
Note: There's no support for audio and video streams for now, as those depend on threading.","(oh, after rereading that, you probably meant reimplementing existing threads that Allegro uses for its stuff with this new interface... yeah, should work :) )",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1000,2019-02-05T03:05:13Z,2019-02-14T02:36:55Z,2019-02-14T02:37:00Z,MERGED,True,29,5,5,https://github.com/dos1,Experimental emscripten support with SDL platform,1,[],https://github.com/liballeg/allegro5/pull/1000,https://github.com/SiegeLord,9,https://github.com/liballeg/allegro5/pull/1000#issuecomment-461676369,"Just a bare-bones stuff to get the thing running with the SDL backend. Roughly based on some old @elias-pschernig's patch, but greatly simplified thanks to the GLES rework.
I compile it with:
-DWANT_ALLOW_SSE=OFF -DVORBIS_COMPILES=yes -DTTF_COMPILES=yes -DWANT_EXAMPLES=no -DWANT_DEMO=no -DWANT_TESTS=no -DWANT_MONOLITH=yes -DWANT_OPENAL=no -DSHARED=no -DEMSCRIPTEN_GENERATE_BITCODE_STATIC_LIBRARIES=yes
then manually link (so I don't have to do it on the game side) with:
emcc liballegro_monolith-static.bc libSDL2main.a libSDL2.a libvorbisfile.a libvorbis.a libopusfile.a libopus.a libphysfs.a libtheoradec.a libFLAC.a libogg.a libdumb.a libfreetype.a libharfbuzz.a libfreetype.a libjpeg.a libwebp.a libpng.a libz.a libbz2.a -o allegro5.so
and it seems to work :)
(I compiled all dependencies manually, without using emscripten's port system)
Note: There's no support for audio and video streams for now, as those depend on threading.",Or al_create_periodic_callback_thread for the public-facing version of it.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1000,2019-02-05T03:05:13Z,2019-02-14T02:36:55Z,2019-02-14T02:37:00Z,MERGED,True,29,5,5,https://github.com/dos1,Experimental emscripten support with SDL platform,1,[],https://github.com/liballeg/allegro5/pull/1000,https://github.com/dos1,10,https://github.com/liballeg/allegro5/pull/1000#issuecomment-461677621,"Just a bare-bones stuff to get the thing running with the SDL backend. Roughly based on some old @elias-pschernig's patch, but greatly simplified thanks to the GLES rework.
I compile it with:
-DWANT_ALLOW_SSE=OFF -DVORBIS_COMPILES=yes -DTTF_COMPILES=yes -DWANT_EXAMPLES=no -DWANT_DEMO=no -DWANT_TESTS=no -DWANT_MONOLITH=yes -DWANT_OPENAL=no -DSHARED=no -DEMSCRIPTEN_GENERATE_BITCODE_STATIC_LIBRARIES=yes
then manually link (so I don't have to do it on the game side) with:
emcc liballegro_monolith-static.bc libSDL2main.a libSDL2.a libvorbisfile.a libvorbis.a libopusfile.a libopus.a libphysfs.a libtheoradec.a libFLAC.a libogg.a libdumb.a libfreetype.a libharfbuzz.a libfreetype.a libjpeg.a libwebp.a libpng.a libz.a libbz2.a -o allegro5.so
and it seems to work :)
(I compiled all dependencies manually, without using emscripten's port system)
Note: There's no support for audio and video streams for now, as those depend on threading.","Makes sense, but I'd avoid the word ""thread"" there. Maybe ""task""?
GObject seems to call such callbacks idle functions: https://developer.gnome.org/glib/stable/glib-The-Main-Event-Loop.html#g-idle-add",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1000,2019-02-05T03:05:13Z,2019-02-14T02:36:55Z,2019-02-14T02:37:00Z,MERGED,True,29,5,5,https://github.com/dos1,Experimental emscripten support with SDL platform,1,[],https://github.com/liballeg/allegro5/pull/1000,https://github.com/dos1,11,https://github.com/liballeg/allegro5/pull/1000#issuecomment-462602178,"Just a bare-bones stuff to get the thing running with the SDL backend. Roughly based on some old @elias-pschernig's patch, but greatly simplified thanks to the GLES rework.
I compile it with:
-DWANT_ALLOW_SSE=OFF -DVORBIS_COMPILES=yes -DTTF_COMPILES=yes -DWANT_EXAMPLES=no -DWANT_DEMO=no -DWANT_TESTS=no -DWANT_MONOLITH=yes -DWANT_OPENAL=no -DSHARED=no -DEMSCRIPTEN_GENERATE_BITCODE_STATIC_LIBRARIES=yes
then manually link (so I don't have to do it on the game side) with:
emcc liballegro_monolith-static.bc libSDL2main.a libSDL2.a libvorbisfile.a libvorbis.a libopusfile.a libopus.a libphysfs.a libtheoradec.a libFLAC.a libogg.a libdumb.a libfreetype.a libharfbuzz.a libfreetype.a libjpeg.a libwebp.a libpng.a libz.a libbz2.a -o allegro5.so
and it seems to work :)
(I compiled all dependencies manually, without using emscripten's port system)
Note: There's no support for audio and video streams for now, as those depend on threading.",Updated!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1000,2019-02-05T03:05:13Z,2019-02-14T02:36:55Z,2019-02-14T02:37:00Z,MERGED,True,29,5,5,https://github.com/dos1,Experimental emscripten support with SDL platform,1,[],https://github.com/liballeg/allegro5/pull/1000,https://github.com/SiegeLord,12,https://github.com/liballeg/allegro5/pull/1000#issuecomment-463462904,"Just a bare-bones stuff to get the thing running with the SDL backend. Roughly based on some old @elias-pschernig's patch, but greatly simplified thanks to the GLES rework.
I compile it with:
-DWANT_ALLOW_SSE=OFF -DVORBIS_COMPILES=yes -DTTF_COMPILES=yes -DWANT_EXAMPLES=no -DWANT_DEMO=no -DWANT_TESTS=no -DWANT_MONOLITH=yes -DWANT_OPENAL=no -DSHARED=no -DEMSCRIPTEN_GENERATE_BITCODE_STATIC_LIBRARIES=yes
then manually link (so I don't have to do it on the game side) with:
emcc liballegro_monolith-static.bc libSDL2main.a libSDL2.a libvorbisfile.a libvorbis.a libopusfile.a libopus.a libphysfs.a libtheoradec.a libFLAC.a libogg.a libdumb.a libfreetype.a libharfbuzz.a libfreetype.a libjpeg.a libwebp.a libpng.a libz.a libbz2.a -o allegro5.so
and it seems to work :)
(I compiled all dependencies manually, without using emscripten's port system)
Note: There's no support for audio and video streams for now, as those depend on threading.",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1001,2019-02-05T03:17:30Z,2019-02-07T02:46:23Z,2019-02-07T02:46:23Z,MERGED,True,4,0,1,https://github.com/dos1,SDL: fix compilation with SDL older than 2.0.9,1,[],https://github.com/liballeg/allegro5/pull/1001,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/1001,SDL_CreateThreadWithStackSize is a very new API addition.,SDL_CreateThreadWithStackSize is a very new API addition.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1001,2019-02-05T03:17:30Z,2019-02-07T02:46:23Z,2019-02-07T02:46:23Z,MERGED,True,4,0,1,https://github.com/dos1,SDL: fix compilation with SDL older than 2.0.9,1,[],https://github.com/liballeg/allegro5/pull/1001,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1001#issuecomment-461269629,SDL_CreateThreadWithStackSize is a very new API addition.,"...we need to add SDL to Travis :P.
Thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1002,2019-02-07T03:13:38Z,,2019-02-09T05:32:21Z,OPEN,False,17,14,1,https://github.com/SiegeLord,Add SDL to the travis script.,3,[],https://github.com/liballeg/allegro5/pull/1002,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1002,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1002,2019-02-07T03:13:38Z,,2019-02-09T05:32:21Z,OPEN,False,17,14,1,https://github.com/SiegeLord,Add SDL to the travis script.,3,[],https://github.com/liballeg/allegro5/pull/1002,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1002#issuecomment-461674464,,"Current issues:

No dialog addon, so can't do the install test on Linux
Doesn't build on OSX",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1002,2019-02-07T03:13:38Z,,2019-02-09T05:32:21Z,OPEN,False,17,14,1,https://github.com/SiegeLord,Add SDL to the travis script.,3,[],https://github.com/liballeg/allegro5/pull/1002,https://github.com/dos1,3,https://github.com/liballeg/allegro5/pull/1002#issuecomment-462012862,,"I've looked into SDL on macOS.

the first issue is that the build system sets ALLEGRO_MACOSX and appends macOS files to the build
after fixing that, build fails on including GL headers, because the correct ones are behind ALLEGRO_MACOSX ifdef...
after fixing that too, it conflicts with the dialog addon
after disabling native dialogs, it builds :P",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1002,2019-02-07T03:13:38Z,,2019-02-09T05:32:21Z,OPEN,False,17,14,1,https://github.com/SiegeLord,Add SDL to the travis script.,3,[],https://github.com/liballeg/allegro5/pull/1002,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/1002#issuecomment-462015188,,"Ah, going above and beyond I see. Don't worry about it too much, I just wanted to note down what issues I hit so I remembered what was up if I returned to it. Thanks for investigating things regardless!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1002,2019-02-07T03:13:38Z,,2019-02-09T05:32:21Z,OPEN,False,17,14,1,https://github.com/SiegeLord,Add SDL to the travis script.,3,[],https://github.com/liballeg/allegro5/pull/1002,https://github.com/dos1,5,https://github.com/liballeg/allegro5/pull/1002#issuecomment-462015616,,"Well, it just made me curious. I have a pretty convenient cross-compilation environment already setup, wouldn't bother otherwise :D",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1004,2019-02-10T03:03:32Z,2019-02-18T05:37:24Z,2019-02-18T05:37:25Z,MERGED,True,80,3,2,https://github.com/SiegeLord,Fix vsync on OSX 10.14+.,1,[],https://github.com/liballeg/allegro5/pull/1004,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1004,"This follows the changeset from SDL and GLFW:
https://hg.libsdl.org/SDL/rev/73f3ca85ac0e
glfw/glfw#1337
But with a few modifications based on my observations:

I think I do a better job at always waiting for a refresh
I keep the old way around because in my testing the new way (while limiting
frames) did not prevent screen tearing.

Fixes #978","This follows the changeset from SDL and GLFW:
https://hg.libsdl.org/SDL/rev/73f3ca85ac0e
glfw/glfw#1337
But with a few modifications based on my observations:

I think I do a better job at always waiting for a refresh
I keep the old way around because in my testing the new way (while limiting
frames) did not prevent screen tearing.

Fixes #978",True,{'HOORAY': ['https://github.com/dos1']}
liballeg/allegro5,https://github.com/liballeg/allegro5,1004,2019-02-10T03:03:32Z,2019-02-18T05:37:24Z,2019-02-18T05:37:25Z,MERGED,True,80,3,2,https://github.com/SiegeLord,Fix vsync on OSX 10.14+.,1,[],https://github.com/liballeg/allegro5/pull/1004,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1004#issuecomment-462099371,"This follows the changeset from SDL and GLFW:
https://hg.libsdl.org/SDL/rev/73f3ca85ac0e
glfw/glfw#1337
But with a few modifications based on my observations:

I think I do a better job at always waiting for a refresh
I keep the old way around because in my testing the new way (while limiting
frames) did not prevent screen tearing.

Fixes #978","@fatcerberus I'm reasonably sure that this is correct, but is this something you could test?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1004,2019-02-10T03:03:32Z,2019-02-18T05:37:24Z,2019-02-18T05:37:25Z,MERGED,True,80,3,2,https://github.com/SiegeLord,Fix vsync on OSX 10.14+.,1,[],https://github.com/liballeg/allegro5/pull/1004,https://github.com/fatcerberus,3,https://github.com/liballeg/allegro5/pull/1004#issuecomment-462156768,"This follows the changeset from SDL and GLFW:
https://hg.libsdl.org/SDL/rev/73f3ca85ac0e
glfw/glfw#1337
But with a few modifications based on my observations:

I think I do a better job at always waiting for a refresh
I keep the old way around because in my testing the new way (while limiting
frames) did not prevent screen tearing.

Fixes #978","I had a MacBook Air for all of about a week before returning it so I can’t personally test this, but I’ll ring in @rhuanjl who maintains the macOS release of miniSphere and reported the original problem.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1006,2019-02-12T17:40:39Z,2019-02-14T02:37:42Z,2019-02-14T02:37:47Z,MERGED,True,9,19,2,https://github.com/dos1,SDL: don't create SDL_Renderer,1,[],https://github.com/liballeg/allegro5/pull/1006,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/1006,"As we do all GL drawing by ourselves, SDL_Renderer is completely unnecessary.
It actually even triggers a bug with current SDL master :D","As we do all GL drawing by ourselves, SDL_Renderer is completely unnecessary.
It actually even triggers a bug with current SDL master :D",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1006,2019-02-12T17:40:39Z,2019-02-14T02:37:42Z,2019-02-14T02:37:47Z,MERGED,True,9,19,2,https://github.com/dos1,SDL: don't create SDL_Renderer,1,[],https://github.com/liballeg/allegro5/pull/1006,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1006#issuecomment-463463076,"As we do all GL drawing by ourselves, SDL_Renderer is completely unnecessary.
It actually even triggers a bug with current SDL master :D",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1007,2019-02-12T18:06:33Z,2019-02-14T02:39:03Z,2019-02-14T02:39:04Z,MERGED,True,12,0,1,https://github.com/dos1,SDL: mouse: ignore simulated touch events,1,[],https://github.com/liballeg/allegro5/pull/1007,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/1007,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1007,2019-02-12T18:06:33Z,2019-02-14T02:39:03Z,2019-02-14T02:39:04Z,MERGED,True,12,0,1,https://github.com/dos1,SDL: mouse: ignore simulated touch events,1,[],https://github.com/liballeg/allegro5/pull/1007,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1007#issuecomment-463463350,,Interesting... thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1008,2019-02-12T18:49:03Z,2019-02-14T02:40:43Z,2019-02-14T02:40:47Z,MERGED,True,4,3,1,https://github.com/dos1,SDL: fix window resize with hidpi,1,[],https://github.com/liballeg/allegro5/pull/1008,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/1008,"To fully work in all cases it will need a fix on SDL side as well, since SDL on Emscripten doesn't report window resize event when only the pixel ratio scale has changed and the logical window size remained the same (which is the case when moving the window to another screen or changing the zoom ratio in browser).","To fully work in all cases it will need a fix on SDL side as well, since SDL on Emscripten doesn't report window resize event when only the pixel ratio scale has changed and the logical window size remained the same (which is the case when moving the window to another screen or changing the zoom ratio in browser).",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1008,2019-02-12T18:49:03Z,2019-02-14T02:40:43Z,2019-02-14T02:40:47Z,MERGED,True,4,3,1,https://github.com/dos1,SDL: fix window resize with hidpi,1,[],https://github.com/liballeg/allegro5/pull/1008,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1008#issuecomment-463463708,"To fully work in all cases it will need a fix on SDL side as well, since SDL on Emscripten doesn't report window resize event when only the pixel ratio scale has changed and the logical window size remained the same (which is the case when moving the window to another screen or changing the zoom ratio in browser).",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1009,2019-02-13T01:05:27Z,2019-02-14T02:41:56Z,2019-02-16T18:55:09Z,MERGED,True,2,2,1,https://github.com/dos1,SDL: don't assume that mouse events always come with associated window,1,[],https://github.com/liballeg/allegro5/pull/1009,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/1009,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1009,2019-02-13T01:05:27Z,2019-02-14T02:41:56Z,2019-02-16T18:55:09Z,MERGED,True,2,2,1,https://github.com/dos1,SDL: don't assume that mouse events always come with associated window,1,[],https://github.com/liballeg/allegro5/pull/1009,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1009#issuecomment-463463921,,That's... interesting as well. I guess it's the best you can do. Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1009,2019-02-13T01:05:27Z,2019-02-14T02:41:56Z,2019-02-16T18:55:09Z,MERGED,True,2,2,1,https://github.com/dos1,SDL: don't assume that mouse events always come with associated window,1,[],https://github.com/liballeg/allegro5/pull/1009,https://github.com/dos1,3,https://github.com/liballeg/allegro5/pull/1009#issuecomment-463470194,,"FYI, I got crashes on mouse up events when you moved the cursor outside of the window while you hold the button.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1009,2019-02-13T01:05:27Z,2019-02-14T02:41:56Z,2019-02-16T18:55:09Z,MERGED,True,2,2,1,https://github.com/dos1,SDL: don't assume that mouse events always come with associated window,1,[],https://github.com/liballeg/allegro5/pull/1009,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/1009#issuecomment-463510571,,"Yeah, I understood the gist of it. My concern was that once you do that, it'll start giving you nonsensical values since the scale is wrong.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1009,2019-02-13T01:05:27Z,2019-02-14T02:41:56Z,2019-02-16T18:55:09Z,MERGED,True,2,2,1,https://github.com/dos1,SDL: don't assume that mouse events always come with associated window,1,[],https://github.com/liballeg/allegro5/pull/1009,https://github.com/dos1,5,https://github.com/liballeg/allegro5/pull/1009#issuecomment-463891729,,"Ah, that's right. I guess we just have to live with the fact that some details like that will be lost in the translation due to differences in how those APIs are built. We could track state and employ some heuristic, but I'm not sure it's worth it. Can always be added later when it turns out there's a real need for that ¯_(ツ)_/¯ With this patch I simply wanted to avoid a hard crash.
(similar situation happens with multiple displays - without tracking state, you have no idea which display does such event refer to, so any reported coordinates are non-sense)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1009,2019-02-13T01:05:27Z,2019-02-14T02:41:56Z,2019-02-16T18:55:09Z,MERGED,True,2,2,1,https://github.com/dos1,SDL: don't assume that mouse events always come with associated window,1,[],https://github.com/liballeg/allegro5/pull/1009,https://github.com/dos1,6,https://github.com/liballeg/allegro5/pull/1009#issuecomment-464371949,,"You know what? The single-display case is actually trivial, so I just implemented it :D
#1011",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1010,2019-02-15T04:12:37Z,2019-02-18T05:41:46Z,2019-02-18T05:41:54Z,MERGED,True,45,2,12,https://github.com/dos1,Add al_get_system_id function,1,[],https://github.com/liballeg/allegro5/pull/1010,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/1010,"Some systems, like SDL or Raspberry Pi, can be employed on a platform where a more generic system can also work.
In such case there's no way to differentiate between systems, as the usual way to handle things like that, preprocessor macros, by definition can't work at runtime.
BTW. I'll be more than happy to change those names if you come up with better ideas :D If you prefer strings to enum, that's fine too. I have added ALLEGRO_SYSTEM_ID_UNKNOWN as I see some support for custom systems in the code.","Some systems, like SDL or Raspberry Pi, can be employed on a platform where a more generic system can also work.
In such case there's no way to differentiate between systems, as the usual way to handle things like that, preprocessor macros, by definition can't work at runtime.
BTW. I'll be more than happy to change those names if you come up with better ideas :D If you prefer strings to enum, that's fine too. I have added ALLEGRO_SYSTEM_ID_UNKNOWN as I see some support for custom systems in the code.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1010,2019-02-15T04:12:37Z,2019-02-18T05:41:46Z,2019-02-18T05:41:54Z,MERGED,True,45,2,12,https://github.com/dos1,Add al_get_system_id function,1,[],https://github.com/liballeg/allegro5/pull/1010,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1010#issuecomment-464310541,"Some systems, like SDL or Raspberry Pi, can be employed on a platform where a more generic system can also work.
In such case there's no way to differentiate between systems, as the usual way to handle things like that, preprocessor macros, by definition can't work at runtime.
BTW. I'll be more than happy to change those names if you come up with better ideas :D If you prefer strings to enum, that's fine too. I have added ALLEGRO_SYSTEM_ID_UNKNOWN as I see some support for custom systems in the code.",I think I like this. If you can finish in a day or two it can make it into 5.2.5!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1010,2019-02-15T04:12:37Z,2019-02-18T05:41:46Z,2019-02-18T05:41:54Z,MERGED,True,45,2,12,https://github.com/dos1,Add al_get_system_id function,1,[],https://github.com/liballeg/allegro5/pull/1010,https://github.com/dos1,3,https://github.com/liballeg/allegro5/pull/1010#issuecomment-464371989,"Some systems, like SDL or Raspberry Pi, can be employed on a platform where a more generic system can also work.
In such case there's no way to differentiate between systems, as the usual way to handle things like that, preprocessor macros, by definition can't work at runtime.
BTW. I'll be more than happy to change those names if you come up with better ideas :D If you prefer strings to enum, that's fine too. I have added ALLEGRO_SYSTEM_ID_UNKNOWN as I see some support for custom systems in the code.",Updated!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1010,2019-02-15T04:12:37Z,2019-02-18T05:41:46Z,2019-02-18T05:41:54Z,MERGED,True,45,2,12,https://github.com/dos1,Add al_get_system_id function,1,[],https://github.com/liballeg/allegro5/pull/1010,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/1010#issuecomment-464592861,"Some systems, like SDL or Raspberry Pi, can be employed on a platform where a more generic system can also work.
In such case there's no way to differentiate between systems, as the usual way to handle things like that, preprocessor macros, by definition can't work at runtime.
BTW. I'll be more than happy to change those names if you come up with better ideas :D If you prefer strings to enum, that's fine too. I have added ALLEGRO_SYSTEM_ID_UNKNOWN as I see some support for custom systems in the code.","Thanks, this is great!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1011,2019-02-16T18:54:13Z,2019-02-18T05:38:55Z,2019-02-18T05:38:56Z,MERGED,True,22,4,1,https://github.com/dos1,SDL: match window-less mouse events to a display if there's only one,1,[],https://github.com/liballeg/allegro5/pull/1011,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/1011,"When SDL returns an event with no associated window (like a mouse button
release outside of the window), we assume 1 as a scaling factor, which
might be wrong.
When there's only one display, figuring out which display the event
coordinates refer to is trivial, so this implements it. Given that
multidisplay usage is rare, and multidisplay usage with SDL backend
probably non-existent, this should cover vast majority of cases.","When SDL returns an event with no associated window (like a mouse button
release outside of the window), we assume 1 as a scaling factor, which
might be wrong.
When there's only one display, figuring out which display the event
coordinates refer to is trivial, so this implements it. Given that
multidisplay usage is rare, and multidisplay usage with SDL backend
probably non-existent, this should cover vast majority of cases.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1011,2019-02-16T18:54:13Z,2019-02-18T05:38:55Z,2019-02-18T05:38:56Z,MERGED,True,22,4,1,https://github.com/dos1,SDL: match window-less mouse events to a display if there's only one,1,[],https://github.com/liballeg/allegro5/pull/1011,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1011#issuecomment-464592281,"When SDL returns an event with no associated window (like a mouse button
release outside of the window), we assume 1 as a scaling factor, which
might be wrong.
When there's only one display, figuring out which display the event
coordinates refer to is trivial, so this implements it. Given that
multidisplay usage is rare, and multidisplay usage with SDL backend
probably non-existent, this should cover vast majority of cases.","Nice, thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1012,2019-02-17T08:26:51Z,2019-02-18T04:29:53Z,2019-02-18T04:29:53Z,MERGED,True,4,1,2,https://github.com/SiegeLord,Win cmake fixes,2,[],https://github.com/liballeg/allegro5/pull/1012,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1012,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1013,2019-02-19T00:39:09Z,2019-02-19T01:29:18Z,2019-02-19T01:29:18Z,MERGED,True,3,0,1,https://github.com/allefant,fix python wrapper generation after the al_get_system_id patch,1,[],https://github.com/liballeg/allegro5/pull/1013,https://github.com/allefant,1,https://github.com/liballeg/allegro5/pull/1013,"It would fail on things like ALLEGRO_SYSTEM_ID_XGLX otherwise which is AL_ID('X', 'G', 'L', 'X').","It would fail on things like ALLEGRO_SYSTEM_ID_XGLX otherwise which is AL_ID('X', 'G', 'L', 'X').",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1013,2019-02-19T00:39:09Z,2019-02-19T01:29:18Z,2019-02-19T01:29:18Z,MERGED,True,3,0,1,https://github.com/allefant,fix python wrapper generation after the al_get_system_id patch,1,[],https://github.com/liballeg/allegro5/pull/1013,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1013#issuecomment-464942337,"It would fail on things like ALLEGRO_SYSTEM_ID_XGLX otherwise which is AL_ID('X', 'G', 'L', 'X').","Wow, what a catch! Another thing to add to our travis build...",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1014,2019-02-19T03:24:34Z,2019-02-19T04:07:55Z,2019-02-19T04:07:55Z,MERGED,True,9,7,1,https://github.com/dos1,docs: fix some bad formatting,1,[],https://github.com/liballeg/allegro5/pull/1014,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/1014,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1014,2019-02-19T03:24:34Z,2019-02-19T04:07:55Z,2019-02-19T04:07:55Z,MERGED,True,9,7,1,https://github.com/dos1,docs: fix some bad formatting,1,[],https://github.com/liballeg/allegro5/pull/1014,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1014#issuecomment-464974076,,Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1015,2019-02-21T10:32:39Z,2019-02-23T19:44:57Z,2019-02-23T23:24:06Z,CLOSED,False,1,1,1,https://github.com/pedro-w,Fix C4334 warning on VS2017,1,[],https://github.com/liballeg/allegro5/pull/1015,https://github.com/pedro-w,1,https://github.com/liballeg/allegro5/pull/1015,This is just a minor change to fix a warning for the windows code only. It comes from casting 32-bit shift to 64 bit.,This is just a minor change to fix a warning for the windows code only. It comes from casting 32-bit shift to 64 bit.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1015,2019-02-21T10:32:39Z,2019-02-23T19:44:57Z,2019-02-23T23:24:06Z,CLOSED,False,1,1,1,https://github.com/pedro-w,Fix C4334 warning on VS2017,1,[],https://github.com/liballeg/allegro5/pull/1015,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1015#issuecomment-466684904,This is just a minor change to fix a warning for the windows code only. It comes from casting 32-bit shift to 64 bit.,"I liked the solution used by #1019 more (it didn't use a macro), but thanks anyway!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1015,2019-02-21T10:32:39Z,2019-02-23T19:44:57Z,2019-02-23T23:24:06Z,CLOSED,False,1,1,1,https://github.com/pedro-w,Fix C4334 warning on VS2017,1,[],https://github.com/liballeg/allegro5/pull/1015,https://github.com/pedro-w,3,https://github.com/liballeg/allegro5/pull/1015#issuecomment-466710994,This is just a minor change to fix a warning for the windows code only. It comes from casting 32-bit shift to 64 bit.,Coincidence! I suppose.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1016,2019-02-21T10:35:08Z,2019-03-13T05:42:11Z,2019-03-13T05:42:11Z,MERGED,True,16,4,1,https://github.com/pedro-w,Use non-deprecated function to get Windows version,1,[],https://github.com/liballeg/allegro5/pull/1016,https://github.com/pedro-w,1,https://github.com/liballeg/allegro5/pull/1016,"A minor fix to the code to avoid a deprecated function. Helper functions are given in VersionHelpers.h but this header is not available in SDKs before Windows 8. If the header is not present, the CMake configuration supplies an alternative (basically copied equivalent code from VersionHelpers.h)","A minor fix to the code to avoid a deprecated function. Helper functions are given in VersionHelpers.h but this header is not available in SDKs before Windows 8. If the header is not present, the CMake configuration supplies an alternative (basically copied equivalent code from VersionHelpers.h)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1016,2019-02-21T10:35:08Z,2019-03-13T05:42:11Z,2019-03-13T05:42:11Z,MERGED,True,16,4,1,https://github.com/pedro-w,Use non-deprecated function to get Windows version,1,[],https://github.com/liballeg/allegro5/pull/1016,https://github.com/fatcerberus,2,https://github.com/liballeg/allegro5/pull/1016#issuecomment-465951946,"A minor fix to the code to avoid a deprecated function. Helper functions are given in VersionHelpers.h but this header is not available in SDKs before Windows 8. If the header is not present, the CMake configuration supplies an alternative (basically copied equivalent code from VersionHelpers.h)","My understanding of this is that all facilities to get the OS version are de facto deprecated; you’re just not supposed to do it.  Even the Win8+ functions won’t report any version past 8.0 (even on 8.1 or 10) unless the executable is compiled with the correct GUID in its manifest.
That said, it looks like the check here only needs to ask “Vista or later?” so that should still work fine.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1016,2019-02-21T10:35:08Z,2019-03-13T05:42:11Z,2019-03-13T05:42:11Z,MERGED,True,16,4,1,https://github.com/pedro-w,Use non-deprecated function to get Windows version,1,[],https://github.com/liballeg/allegro5/pull/1016,https://github.com/pedro-w,3,https://github.com/liballeg/allegro5/pull/1016#issuecomment-465959256,"A minor fix to the code to avoid a deprecated function. Helper functions are given in VersionHelpers.h but this header is not available in SDKs before Windows 8. If the header is not present, the CMake configuration supplies an alternative (basically copied equivalent code from VersionHelpers.h)","Agreed. I've fixed a compiler warning by replacing a deprecated function with a non-deprecated one. The advice from Microsoft is to test for features, not OS version. Unfortunately it's not clear to me what purpose these tests were originally implemented for, and I don't have any pre-Vista system to check.
Do we still support XP or earlier anyway?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1016,2019-02-21T10:35:08Z,2019-03-13T05:42:11Z,2019-03-13T05:42:11Z,MERGED,True,16,4,1,https://github.com/pedro-w,Use non-deprecated function to get Windows version,1,[],https://github.com/liballeg/allegro5/pull/1016,https://github.com/fatcerberus,4,https://github.com/liballeg/allegro5/pull/1016#issuecomment-466046935,"A minor fix to the code to avoid a deprecated function. Helper functions are given in VersionHelpers.h but this header is not available in SDKs before Windows 8. If the header is not present, the CMake configuration supplies an alternative (basically copied equivalent code from VersionHelpers.h)","I’m going to say yes, since the official binaries are compiled with the “WinXP” MSVC toolchain.",True,{'THUMBS_UP': ['https://github.com/pedro-w']}
liballeg/allegro5,https://github.com/liballeg/allegro5,1016,2019-02-21T10:35:08Z,2019-03-13T05:42:11Z,2019-03-13T05:42:11Z,MERGED,True,16,4,1,https://github.com/pedro-w,Use non-deprecated function to get Windows version,1,[],https://github.com/liballeg/allegro5/pull/1016,https://github.com/SiegeLord,5,https://github.com/liballeg/allegro5/pull/1016#issuecomment-472287613,"A minor fix to the code to avoid a deprecated function. Helper functions are given in VersionHelpers.h but this header is not available in SDKs before Windows 8. If the header is not present, the CMake configuration supplies an alternative (basically copied equivalent code from VersionHelpers.h)","Alright, this looks good. Thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1017,2019-02-21T10:53:25Z,2019-04-15T04:24:15Z,2019-04-15T07:13:43Z,CLOSED,False,482,311,16,https://github.com/pedro-w,Windows - use UNICODE mechanism throughout,7,[],https://github.com/liballeg/allegro5/pull/1017,https://github.com/pedro-w,1,https://github.com/liballeg/allegro5/pull/1017,"This is quite an extensive change to the Windows code only. It allows Allegro to be compiled in wide-char (i.e. UTF-16) mode by defining UNICODE and _UNICODE in the config, or in Ansi mode if they are not defined. This affects mostly the Joystick and Native Dialog code.
In several places there was an implicit assumption that Ansi strings could be freely interchanged with char* in Allegro. This is not the case because Allegro assumes a char* to be UTF-8 (or the 7-bit ASCII subset) and Ansi strings can contain characters in the range 0x80-0xFF which are decoded according to the system code page.
This lead to https://www.allegro.cc/forums/thread/617652 and https://www.allegro.cc/forums/thread/617697
There is also code in fshooks which uses  the wide-char functions exclusively and this has not been changed.
Co-incidentally it fixes a bug in the native 'text log' where line breaks did not show up (LF -> CRLF conversion)
Fixes #397","This is quite an extensive change to the Windows code only. It allows Allegro to be compiled in wide-char (i.e. UTF-16) mode by defining UNICODE and _UNICODE in the config, or in Ansi mode if they are not defined. This affects mostly the Joystick and Native Dialog code.
In several places there was an implicit assumption that Ansi strings could be freely interchanged with char* in Allegro. This is not the case because Allegro assumes a char* to be UTF-8 (or the 7-bit ASCII subset) and Ansi strings can contain characters in the range 0x80-0xFF which are decoded according to the system code page.
This lead to https://www.allegro.cc/forums/thread/617652 and https://www.allegro.cc/forums/thread/617697
There is also code in fshooks which uses  the wide-char functions exclusively and this has not been changed.
Co-incidentally it fixes a bug in the native 'text log' where line breaks did not show up (LF -> CRLF conversion)
Fixes #397",True,{'THUMBS_UP': ['https://github.com/dos1']}
liballeg/allegro5,https://github.com/liballeg/allegro5,1017,2019-02-21T10:53:25Z,2019-04-15T04:24:15Z,2019-04-15T07:13:43Z,CLOSED,False,482,311,16,https://github.com/pedro-w,Windows - use UNICODE mechanism throughout,7,[],https://github.com/liballeg/allegro5/pull/1017,https://github.com/pedro-w,2,https://github.com/liballeg/allegro5/pull/1017#issuecomment-465954964,"This is quite an extensive change to the Windows code only. It allows Allegro to be compiled in wide-char (i.e. UTF-16) mode by defining UNICODE and _UNICODE in the config, or in Ansi mode if they are not defined. This affects mostly the Joystick and Native Dialog code.
In several places there was an implicit assumption that Ansi strings could be freely interchanged with char* in Allegro. This is not the case because Allegro assumes a char* to be UTF-8 (or the 7-bit ASCII subset) and Ansi strings can contain characters in the range 0x80-0xFF which are decoded according to the system code page.
This lead to https://www.allegro.cc/forums/thread/617652 and https://www.allegro.cc/forums/thread/617697
There is also code in fshooks which uses  the wide-char functions exclusively and this has not been changed.
Co-incidentally it fixes a bug in the native 'text log' where line breaks did not show up (LF -> CRLF conversion)
Fixes #397","If this looks OK, a subsequent change can just drop Ansi and use wide-char functions exclusively.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1017,2019-02-21T10:53:25Z,2019-04-15T04:24:15Z,2019-04-15T07:13:43Z,CLOSED,False,482,311,16,https://github.com/pedro-w,Windows - use UNICODE mechanism throughout,7,[],https://github.com/liballeg/allegro5/pull/1017,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/1017#issuecomment-472288721,"This is quite an extensive change to the Windows code only. It allows Allegro to be compiled in wide-char (i.e. UTF-16) mode by defining UNICODE and _UNICODE in the config, or in Ansi mode if they are not defined. This affects mostly the Joystick and Native Dialog code.
In several places there was an implicit assumption that Ansi strings could be freely interchanged with char* in Allegro. This is not the case because Allegro assumes a char* to be UTF-8 (or the 7-bit ASCII subset) and Ansi strings can contain characters in the range 0x80-0xFF which are decoded according to the system code page.
This lead to https://www.allegro.cc/forums/thread/617652 and https://www.allegro.cc/forums/thread/617697
There is also code in fshooks which uses  the wide-char functions exclusively and this has not been changed.
Co-incidentally it fixes a bug in the native 'text log' where line breaks did not show up (LF -> CRLF conversion)
Fixes #397","This looks pretty extensive! Could you explain what the advantage of making this support both ANSI and UNICODE rather than just UNICODE? Also, how do you select between ANSI and UNICODE with this change? Which one is the default?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1017,2019-02-21T10:53:25Z,2019-04-15T04:24:15Z,2019-04-15T07:13:43Z,CLOSED,False,482,311,16,https://github.com/pedro-w,Windows - use UNICODE mechanism throughout,7,[],https://github.com/liballeg/allegro5/pull/1017,https://github.com/pedro-w,4,https://github.com/liballeg/allegro5/pull/1017#issuecomment-472303269,"This is quite an extensive change to the Windows code only. It allows Allegro to be compiled in wide-char (i.e. UTF-16) mode by defining UNICODE and _UNICODE in the config, or in Ansi mode if they are not defined. This affects mostly the Joystick and Native Dialog code.
In several places there was an implicit assumption that Ansi strings could be freely interchanged with char* in Allegro. This is not the case because Allegro assumes a char* to be UTF-8 (or the 7-bit ASCII subset) and Ansi strings can contain characters in the range 0x80-0xFF which are decoded according to the system code page.
This lead to https://www.allegro.cc/forums/thread/617652 and https://www.allegro.cc/forums/thread/617697
There is also code in fshooks which uses  the wide-char functions exclusively and this has not been changed.
Co-incidentally it fixes a bug in the native 'text log' where line breaks did not show up (LF -> CRLF conversion)
Fixes #397","The dual UNICODE/ANSI concept is spread through a lot of the Windows system headers. Generally this just means a conditional #define, e.g. CreateWindow is either CreateWindowA or CreateWindowW but there are some convenience macros in the DirectX code which are more complicated.
I tried initially to use explicit Unicode functions everywhere but it made things a bit messy and I wasn't 100% sure I had accounted for all functions (usually the compiler warns but sometimes we have an explicit cast and there is no warning)
Overall I didn't feel it was adding much code to do the ANSI too.
As it stands ANSI will be the default and Unicode is an opt-in but I would recommend using CMake to always have Unicode selected by setting a compiler flag (/DUNICODE /D_UNICODE)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1017,2019-02-21T10:53:25Z,2019-04-15T04:24:15Z,2019-04-15T07:13:43Z,CLOSED,False,482,311,16,https://github.com/pedro-w,Windows - use UNICODE mechanism throughout,7,[],https://github.com/liballeg/allegro5/pull/1017,https://github.com/pedro-w,5,https://github.com/liballeg/allegro5/pull/1017#issuecomment-472303574,"This is quite an extensive change to the Windows code only. It allows Allegro to be compiled in wide-char (i.e. UTF-16) mode by defining UNICODE and _UNICODE in the config, or in Ansi mode if they are not defined. This affects mostly the Joystick and Native Dialog code.
In several places there was an implicit assumption that Ansi strings could be freely interchanged with char* in Allegro. This is not the case because Allegro assumes a char* to be UTF-8 (or the 7-bit ASCII subset) and Ansi strings can contain characters in the range 0x80-0xFF which are decoded according to the system code page.
This lead to https://www.allegro.cc/forums/thread/617652 and https://www.allegro.cc/forums/thread/617697
There is also code in fshooks which uses  the wide-char functions exclusively and this has not been changed.
Co-incidentally it fixes a bug in the native 'text log' where line breaks did not show up (LF -> CRLF conversion)
Fixes #397",I haven't time just now but maybe at the weekend I can try unicode-only again and see how it looks.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1017,2019-02-21T10:53:25Z,2019-04-15T04:24:15Z,2019-04-15T07:13:43Z,CLOSED,False,482,311,16,https://github.com/pedro-w,Windows - use UNICODE mechanism throughout,7,[],https://github.com/liballeg/allegro5/pull/1017,https://github.com/fatcerberus,6,https://github.com/liballeg/allegro5/pull/1017#issuecomment-472414307,"This is quite an extensive change to the Windows code only. It allows Allegro to be compiled in wide-char (i.e. UTF-16) mode by defining UNICODE and _UNICODE in the config, or in Ansi mode if they are not defined. This affects mostly the Joystick and Native Dialog code.
In several places there was an implicit assumption that Ansi strings could be freely interchanged with char* in Allegro. This is not the case because Allegro assumes a char* to be UTF-8 (or the 7-bit ASCII subset) and Ansi strings can contain characters in the range 0x80-0xFF which are decoded according to the system code page.
This lead to https://www.allegro.cc/forums/thread/617652 and https://www.allegro.cc/forums/thread/617697
There is also code in fshooks which uses  the wide-char functions exclusively and this has not been changed.
Co-incidentally it fixes a bug in the native 'text log' where line breaks did not show up (LF -> CRLF conversion)
Fixes #397","I believe recent MSVC versions (since 2015 at least, possibly earlier than that) will define UNICODE by default in new projects.  There’s really no reason to support the ANSI functions anymore unless we need to support stuff like Windows 98/Me...",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1017,2019-02-21T10:53:25Z,2019-04-15T04:24:15Z,2019-04-15T07:13:43Z,CLOSED,False,482,311,16,https://github.com/pedro-w,Windows - use UNICODE mechanism throughout,7,[],https://github.com/liballeg/allegro5/pull/1017,https://github.com/pedro-w,7,https://github.com/liballeg/allegro5/pull/1017#issuecomment-472427317,"This is quite an extensive change to the Windows code only. It allows Allegro to be compiled in wide-char (i.e. UTF-16) mode by defining UNICODE and _UNICODE in the config, or in Ansi mode if they are not defined. This affects mostly the Joystick and Native Dialog code.
In several places there was an implicit assumption that Ansi strings could be freely interchanged with char* in Allegro. This is not the case because Allegro assumes a char* to be UTF-8 (or the 7-bit ASCII subset) and Ansi strings can contain characters in the range 0x80-0xFF which are decoded according to the system code page.
This lead to https://www.allegro.cc/forums/thread/617652 and https://www.allegro.cc/forums/thread/617697
There is also code in fshooks which uses  the wide-char functions exclusively and this has not been changed.
Co-incidentally it fixes a bug in the native 'text log' where line breaks did not show up (LF -> CRLF conversion)
Fixes #397","I don't think the compiler itself defines UNICODE (source) but I think Visual Studio does set that option in the MSBuild file for new projects. But if that MSBuild file comes from CMake I suspect it doesn't.
My experience was that it seemed more straightforward to use the mechanisms that the Windows headers provide (TCHAR and so on) than to use the wide char functions explicitly.
I agree there's no need for ANSI  - I can't believe there are any Allegro users building for WinME out there? - and I do recommend we build Allegro in Unicode mode going forward (currently it's mixed, some parts are ANSI, some not). In any case the mode used to build Allegro itself shouldn't affect the Allegro API. (that statement probably needs checking!)
It may be the most pragmatic option is to set UNICODE via the CMake file, remove the ANSI functions and have something like
#ifndef UNICODE
#error Allegro must be compiled in UNICODE mode
#endif

in the windows internal code somewhere.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1017,2019-02-21T10:53:25Z,2019-04-15T04:24:15Z,2019-04-15T07:13:43Z,CLOSED,False,482,311,16,https://github.com/pedro-w,Windows - use UNICODE mechanism throughout,7,[],https://github.com/liballeg/allegro5/pull/1017,https://github.com/fatcerberus,8,https://github.com/liballeg/allegro5/pull/1017#issuecomment-472432477,"This is quite an extensive change to the Windows code only. It allows Allegro to be compiled in wide-char (i.e. UTF-16) mode by defining UNICODE and _UNICODE in the config, or in Ansi mode if they are not defined. This affects mostly the Joystick and Native Dialog code.
In several places there was an implicit assumption that Ansi strings could be freely interchanged with char* in Allegro. This is not the case because Allegro assumes a char* to be UTF-8 (or the 7-bit ASCII subset) and Ansi strings can contain characters in the range 0x80-0xFF which are decoded according to the system code page.
This lead to https://www.allegro.cc/forums/thread/617652 and https://www.allegro.cc/forums/thread/617697
There is also code in fshooks which uses  the wide-char functions exclusively and this has not been changed.
Co-incidentally it fixes a bug in the native 'text log' where line breaks did not show up (LF -> CRLF conversion)
Fixes #397","I don't think the compiler itself defines UNICODE (source) but I think Visual Studio does set that option in the MSBuild file for new projects.

Yeah, that's what I meant by ""by default in new projects"" - I meant ""MSVC"" as in the IDE, not the compiler 😄
FWIW Microsoft themselves seem to consider TCHAR to be basically deprecated and recommend just using the Unicode stuff (WCHAR, W APIs, etc.) nowadays (emphasis mine):

The TEXT and TCHAR macros are less useful today, because all applications should use Unicode.
However, you might see them in older code and in some of the MSDN code examples.
https://docs.microsoft.com/en-us/windows/desktop/learnwin32/working-with-strings#tchars",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1017,2019-02-21T10:53:25Z,2019-04-15T04:24:15Z,2019-04-15T07:13:43Z,CLOSED,False,482,311,16,https://github.com/pedro-w,Windows - use UNICODE mechanism throughout,7,[],https://github.com/liballeg/allegro5/pull/1017,https://github.com/pedro-w,9,https://github.com/liballeg/allegro5/pull/1017#issuecomment-472473051,"This is quite an extensive change to the Windows code only. It allows Allegro to be compiled in wide-char (i.e. UTF-16) mode by defining UNICODE and _UNICODE in the config, or in Ansi mode if they are not defined. This affects mostly the Joystick and Native Dialog code.
In several places there was an implicit assumption that Ansi strings could be freely interchanged with char* in Allegro. This is not the case because Allegro assumes a char* to be UTF-8 (or the 7-bit ASCII subset) and Ansi strings can contain characters in the range 0x80-0xFF which are decoded according to the system code page.
This lead to https://www.allegro.cc/forums/thread/617652 and https://www.allegro.cc/forums/thread/617697
There is also code in fshooks which uses  the wide-char functions exclusively and this has not been changed.
Co-incidentally it fixes a bug in the native 'text log' where line breaks did not show up (LF -> CRLF conversion)
Fixes #397","That's a useful link.
I am not at a PC with the Windows SDK installed so I can't find the exact bit that was painful in the DirectX. We are using their type macros (say for sake of argument it was LPCDXTHING to mean a constant pointer to a DxThing) which is standard practice for Windows. But DxThing doesn't exist, only DxThingA and DxThingW so I was having to change LPCDXTHING to const DxThingW* and LPLPDXTHING to DxThingW** etc. etc. and it seemed error prone, because in COM it's quite common to cast to/from a void pointer so the compiler couldn't help. Does that make sense?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1017,2019-02-21T10:53:25Z,2019-04-15T04:24:15Z,2019-04-15T07:13:43Z,CLOSED,False,482,311,16,https://github.com/pedro-w,Windows - use UNICODE mechanism throughout,7,[],https://github.com/liballeg/allegro5/pull/1017,https://github.com/pedro-w,10,https://github.com/liballeg/allegro5/pull/1017#issuecomment-478045051,"This is quite an extensive change to the Windows code only. It allows Allegro to be compiled in wide-char (i.e. UTF-16) mode by defining UNICODE and _UNICODE in the config, or in Ansi mode if they are not defined. This affects mostly the Joystick and Native Dialog code.
In several places there was an implicit assumption that Ansi strings could be freely interchanged with char* in Allegro. This is not the case because Allegro assumes a char* to be UTF-8 (or the 7-bit ASCII subset) and Ansi strings can contain characters in the range 0x80-0xFF which are decoded according to the system code page.
This lead to https://www.allegro.cc/forums/thread/617652 and https://www.allegro.cc/forums/thread/617697
There is also code in fshooks which uses  the wide-char functions exclusively and this has not been changed.
Co-incidentally it fixes a bug in the native 'text log' where line breaks did not show up (LF -> CRLF conversion)
Fixes #397","Thanks for reviewing, @SiegeLord, I will address these issues but it might be a couple of days.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1017,2019-02-21T10:53:25Z,2019-04-15T04:24:15Z,2019-04-15T07:13:43Z,CLOSED,False,482,311,16,https://github.com/pedro-w,Windows - use UNICODE mechanism throughout,7,[],https://github.com/liballeg/allegro5/pull/1017,https://github.com/pedro-w,11,https://github.com/liballeg/allegro5/pull/1017#issuecomment-479922207,"This is quite an extensive change to the Windows code only. It allows Allegro to be compiled in wide-char (i.e. UTF-16) mode by defining UNICODE and _UNICODE in the config, or in Ansi mode if they are not defined. This affects mostly the Joystick and Native Dialog code.
In several places there was an implicit assumption that Ansi strings could be freely interchanged with char* in Allegro. This is not the case because Allegro assumes a char* to be UTF-8 (or the 7-bit ASCII subset) and Ansi strings can contain characters in the range 0x80-0xFF which are decoded according to the system code page.
This lead to https://www.allegro.cc/forums/thread/617652 and https://www.allegro.cc/forums/thread/617697
There is also code in fshooks which uses  the wide-char functions exclusively and this has not been changed.
Co-incidentally it fixes a bug in the native 'text log' where line breaks did not show up (LF -> CRLF conversion)
Fixes #397","it should be fine to mix and match a UNICODE Allegro + ANSI user app, right?

Yes, it should all go via UTF-8.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1017,2019-02-21T10:53:25Z,2019-04-15T04:24:15Z,2019-04-15T07:13:43Z,CLOSED,False,482,311,16,https://github.com/pedro-w,Windows - use UNICODE mechanism throughout,7,[],https://github.com/liballeg/allegro5/pull/1017,https://github.com/SiegeLord,12,https://github.com/liballeg/allegro5/pull/1017#issuecomment-483102960,"This is quite an extensive change to the Windows code only. It allows Allegro to be compiled in wide-char (i.e. UTF-16) mode by defining UNICODE and _UNICODE in the config, or in Ansi mode if they are not defined. This affects mostly the Joystick and Native Dialog code.
In several places there was an implicit assumption that Ansi strings could be freely interchanged with char* in Allegro. This is not the case because Allegro assumes a char* to be UTF-8 (or the 7-bit ASCII subset) and Ansi strings can contain characters in the range 0x80-0xFF which are decoded according to the system code page.
This lead to https://www.allegro.cc/forums/thread/617652 and https://www.allegro.cc/forums/thread/617697
There is also code in fshooks which uses  the wide-char functions exclusively and this has not been changed.
Co-incidentally it fixes a bug in the native 'text log' where line breaks did not show up (LF -> CRLF conversion)
Fixes #397","Merged as 597bcf8 with some minor changes.  Notably, I added a definition of UNICODE/_UNICODE in CMakeLists.txt.
Thanks a lot, @pedro-w , this was amazing work. The code was of very high quality and it was quite tricky in a few places.  I appreciate it a lot, this was great.
In the future we should probably spend some time to delete the ANSI code, but that should be easy given how you structured your code.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1018,2019-02-21T15:30:32Z,2019-02-23T05:56:55Z,2019-02-23T05:56:56Z,CLOSED,False,14,8,2,https://github.com/EdgarReynaldo,Fix for OpenGL version selection on Windows,3,[],https://github.com/liballeg/allegro5/pull/1018,https://github.com/EdgarReynaldo,1,https://github.com/liballeg/allegro5/pull/1018,"This patch does a few things :

Respect ALLEGRO_OPENGL_MAJOR and MINOR_VERSION on Windows
Fix for extension reporting based on inaccurate flag
Store the opengl version in the display options for retrieval by the user","This patch does a few things :

Respect ALLEGRO_OPENGL_MAJOR and MINOR_VERSION on Windows
Fix for extension reporting based on inaccurate flag
Store the opengl version in the display options for retrieval by the user",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1018,2019-02-21T15:30:32Z,2019-02-23T05:56:55Z,2019-02-23T05:56:56Z,CLOSED,False,14,8,2,https://github.com/EdgarReynaldo,Fix for OpenGL version selection on Windows,3,[],https://github.com/liballeg/allegro5/pull/1018,https://github.com/EdgarReynaldo,2,https://github.com/liballeg/allegro5/pull/1018#issuecomment-466620193,"This patch does a few things :

Respect ALLEGRO_OPENGL_MAJOR and MINOR_VERSION on Windows
Fix for extension reporting based on inaccurate flag
Store the opengl version in the display options for retrieval by the user",This pull request is superceded by #1021,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1019,2019-02-21T20:10:01Z,2019-02-23T19:44:00Z,2019-02-23T19:44:05Z,MERGED,True,1,1,1,https://github.com/EdgarReynaldo,Fixed bit shift,1,[],https://github.com/liballeg/allegro5/pull/1019,https://github.com/EdgarReynaldo,1,https://github.com/liballeg/allegro5/pull/1019,Fixed broken bit shift to respect values greater than 31,Fixed broken bit shift to respect values greater than 31,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1019,2019-02-21T20:10:01Z,2019-02-23T19:44:00Z,2019-02-23T19:44:05Z,MERGED,True,1,1,1,https://github.com/EdgarReynaldo,Fixed bit shift,1,[],https://github.com/liballeg/allegro5/pull/1019,https://github.com/fatcerberus,2,https://github.com/liballeg/allegro5/pull/1019#issuecomment-466160250,Fixed broken bit shift to respect values greater than 31,Isn’t this the same fix as #1015?,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1019,2019-02-21T20:10:01Z,2019-02-23T19:44:00Z,2019-02-23T19:44:05Z,MERGED,True,1,1,1,https://github.com/EdgarReynaldo,Fixed bit shift,1,[],https://github.com/liballeg/allegro5/pull/1019,https://github.com/allefant,3,https://github.com/liballeg/allegro5/pull/1019#issuecomment-466162209,Fixed broken bit shift to respect values greater than 31,"(uint64_t) is more consistent with how the rest of the file does it, so this one should probably be applied. It already was fixed in 6973035 but then someone came in c1fee97 and broke it again <_<",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1019,2019-02-21T20:10:01Z,2019-02-23T19:44:00Z,2019-02-23T19:44:05Z,MERGED,True,1,1,1,https://github.com/EdgarReynaldo,Fixed bit shift,1,[],https://github.com/liballeg/allegro5/pull/1019,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/1019#issuecomment-466684792,Fixed broken bit shift to respect values greater than 31,Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1020,2019-02-23T01:18:13Z,2019-03-09T18:53:37Z,2019-03-09T18:53:37Z,MERGED,True,79,4,1,https://github.com/dos1,SDL: add audio recorder implementation,1,[],https://github.com/liballeg/allegro5/pull/1020,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/1020,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1020,2019-02-23T01:18:13Z,2019-03-09T18:53:37Z,2019-03-09T18:53:37Z,MERGED,True,79,4,1,https://github.com/dos1,SDL: add audio recorder implementation,1,[],https://github.com/liballeg/allegro5/pull/1020,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1020#issuecomment-471211393,,"Looks good, thanks a lot!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1021,2019-02-23T05:55:42Z,2019-02-24T18:56:04Z,2019-02-24T18:56:14Z,MERGED,True,21,14,5,https://github.com/EdgarReynaldo,Fix for OpenGL version selection and reporting on Windows and X,11,[],https://github.com/liballeg/allegro5/pull/1021,https://github.com/EdgarReynaldo,1,https://github.com/liballeg/allegro5/pull/1021,I expanded my patches to include fixes for X.,I expanded my patches to include fixes for X.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1021,2019-02-23T05:55:42Z,2019-02-24T18:56:04Z,2019-02-24T18:56:14Z,MERGED,True,21,14,5,https://github.com/EdgarReynaldo,Fix for OpenGL version selection and reporting on Windows and X,11,[],https://github.com/liballeg/allegro5/pull/1021,https://github.com/dos1,2,https://github.com/liballeg/allegro5/pull/1021#issuecomment-466644371,I expanded my patches to include fixes for X.,"I've just sent a similar patch for version reporting on SDL backend, but as far as I can see, it's not handled by any other platform anyway...",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1021,2019-02-23T05:55:42Z,2019-02-24T18:56:04Z,2019-02-24T18:56:14Z,MERGED,True,21,14,5,https://github.com/EdgarReynaldo,Fix for OpenGL version selection and reporting on Windows and X,11,[],https://github.com/liballeg/allegro5/pull/1021,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/1021#issuecomment-466805044,I expanded my patches to include fixes for X.,"That looks good, thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1022,2019-02-23T12:22:49Z,2019-02-23T20:07:27Z,2019-02-23T20:13:25Z,MERGED,True,5,0,1,https://github.com/dos1,SDL: report ALLEGRO_OPENGL_MAJOR/MINOR_VERSION in display options,1,[],https://github.com/liballeg/allegro5/pull/1022,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/1022,This makes it consistent with #1021,This makes it consistent with #1021,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1022,2019-02-23T12:22:49Z,2019-02-23T20:07:27Z,2019-02-23T20:13:25Z,MERGED,True,5,0,1,https://github.com/dos1,SDL: report ALLEGRO_OPENGL_MAJOR/MINOR_VERSION in display options,1,[],https://github.com/liballeg/allegro5/pull/1022,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1022#issuecomment-466687764,This makes it consistent with #1021,"I'll take it, but like my comments in #1021 suggest, I think this is just papering over the core issue in #892.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1022,2019-02-23T12:22:49Z,2019-02-23T20:07:27Z,2019-02-23T20:13:25Z,MERGED,True,5,0,1,https://github.com/dos1,SDL: report ALLEGRO_OPENGL_MAJOR/MINOR_VERSION in display options,1,[],https://github.com/liballeg/allegro5/pull/1022,https://github.com/dos1,3,https://github.com/liballeg/allegro5/pull/1022#issuecomment-466688461,This makes it consistent with #1021,"Yup, as I said in #1021 - nothing else seems to set it right now :/",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1023,2019-02-23T12:41:42Z,2019-02-23T19:46:10Z,2019-02-23T19:46:15Z,MERGED,True,6,6,1,https://github.com/dos1,SDL: fix requesting GLES profile on GL Allegro,1,[],https://github.com/liballeg/allegro5/pull/1023,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/1023,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1023,2019-02-23T12:41:42Z,2019-02-23T19:46:10Z,2019-02-23T19:46:15Z,MERGED,True,6,6,1,https://github.com/dos1,SDL: fix requesting GLES profile on GL Allegro,1,[],https://github.com/liballeg/allegro5/pull/1023,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1023#issuecomment-466685064,,Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1025,2019-02-23T21:35:36Z,2019-02-24T18:56:54Z,2019-02-24T18:56:58Z,MERGED,True,15,0,3,https://github.com/dos1,"Report OpenGL version in display options on Android, iOS and Raspberry Pi",1,[],https://github.com/liballeg/allegro5/pull/1025,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/1025,"The only ones left now are macosx (I got lost in all its various context initializations) and gp2xwiz, with this lovely piece of code inside:
   // FIXME
   // We don't have this extra_settings stuff set up right
   //if (display->extra_settings.settings[ALLEGRO_COMPATIBLE_DISPLAY])
      setup_gl(display);

:D","The only ones left now are macosx (I got lost in all its various context initializations) and gp2xwiz, with this lovely piece of code inside:
   // FIXME
   // We don't have this extra_settings stuff set up right
   //if (display->extra_settings.settings[ALLEGRO_COMPATIBLE_DISPLAY])
      setup_gl(display);

:D",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1025,2019-02-23T21:35:36Z,2019-02-24T18:56:54Z,2019-02-24T18:56:58Z,MERGED,True,15,0,3,https://github.com/dos1,"Report OpenGL version in display options on Android, iOS and Raspberry Pi",1,[],https://github.com/liballeg/allegro5/pull/1025,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1025#issuecomment-466805132,"The only ones left now are macosx (I got lost in all its various context initializations) and gp2xwiz, with this lovely piece of code inside:
   // FIXME
   // We don't have this extra_settings stuff set up right
   //if (display->extra_settings.settings[ALLEGRO_COMPATIBLE_DISPLAY])
      setup_gl(display);

:D",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1028,2019-02-26T03:35:27Z,2019-03-09T18:48:48Z,2019-03-09T18:48:48Z,MERGED,True,7,14,2,https://github.com/dos1,Fix timestamps on touch events (X11 and SDL),2,[],https://github.com/liballeg/allegro5/pull/1028,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/1028,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1028,2019-02-26T03:35:27Z,2019-03-09T18:48:48Z,2019-03-09T18:48:48Z,MERGED,True,7,14,2,https://github.com/dos1,Fix timestamps on touch events (X11 and SDL),2,[],https://github.com/liballeg/allegro5/pull/1028,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1028#issuecomment-471211027,,Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1031,2019-03-28T21:26:25Z,2019-05-27T06:41:00Z,2019-05-27T06:41:00Z,MERGED,True,15,0,1,https://github.com/dos1,Add a .editorconfig file,1,[],https://github.com/liballeg/allegro5/pull/1031,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/1031,"Lots of editors and IDEs support the EditorConfig format, so adding it to the repository allows automatic format configuration regardless of used editor.","Lots of editors and IDEs support the EditorConfig format, so adding it to the repository allows automatic format configuration regardless of used editor.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1032,2019-04-03T04:08:21Z,2019-04-06T20:52:31Z,2019-04-22T07:08:40Z,CLOSED,False,0,0,0,https://github.com/guilt,[Closed] Add FreeImage support in image addon.,0,[],https://github.com/liballeg/allegro5/pull/1032,https://github.com/guilt,1,https://github.com/liballeg/allegro5/pull/1032,"I realized that there are many image formats that offer plentiful advantages over the ones we support, hence it may be a good idea to start adding support for loading them into Allegro.
Currently, we load as 8-8-8-8 bitmaps but we should be able to use this library to load higher bits per channel images, such as the ones with HDR, if we support it.
I did not add save image support because for me, loading some images was the initial goal of writing this.
I added an example which is a semi-copy-pasta of ex_bitmap.c which uses ALLEGRO_FILE * routines to test the _bitmap_f loaders.","I realized that there are many image formats that offer plentiful advantages over the ones we support, hence it may be a good idea to start adding support for loading them into Allegro.
Currently, we load as 8-8-8-8 bitmaps but we should be able to use this library to load higher bits per channel images, such as the ones with HDR, if we support it.
I did not add save image support because for me, loading some images was the initial goal of writing this.
I added an example which is a semi-copy-pasta of ex_bitmap.c which uses ALLEGRO_FILE * routines to test the _bitmap_f loaders.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1036,2019-04-06T19:04:19Z,2019-04-22T06:47:35Z,2019-04-22T06:47:35Z,MERGED,True,10,5,1,https://github.com/guilt,Enable debug window for DEBUGMODE on Windows (XP and Higher).,2,[],https://github.com/liballeg/allegro5/pull/1036,https://github.com/guilt,1,https://github.com/liballeg/allegro5/pull/1036,"This patch enables easier debugging. It is easpecially useful for -mwindows / -SUBSYSTEM:windows applications.
We do not need to resort to allegro.log in Windows, so this patch does exactly that.","This patch enables easier debugging. It is easpecially useful for -mwindows / -SUBSYSTEM:windows applications.
We do not need to resort to allegro.log in Windows, so this patch does exactly that.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1036,2019-04-06T19:04:19Z,2019-04-22T06:47:35Z,2019-04-22T06:47:35Z,MERGED,True,10,5,1,https://github.com/guilt,Enable debug window for DEBUGMODE on Windows (XP and Higher).,2,[],https://github.com/liballeg/allegro5/pull/1036,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1036#issuecomment-485342510,"This patch enables easier debugging. It is easpecially useful for -mwindows / -SUBSYSTEM:windows applications.
We do not need to resort to allegro.log in Windows, so this patch does exactly that.","This seems good, thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1037,2019-04-06T20:22:10Z,2019-05-02T03:48:34Z,2019-05-02T03:48:34Z,CLOSED,False,162,0,6,https://github.com/pmprog,MiniMP3 support (Sample mode only for now),3,[],https://github.com/liballeg/allegro5/pull/1037,https://github.com/pmprog,1,https://github.com/liballeg/allegro5/pull/1037,"Referencing MiniMP3 (https://github.com/lieff/minimp3), currently only plays MP3s as ""samples""","Referencing MiniMP3 (https://github.com/lieff/minimp3), currently only plays MP3s as ""samples""",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1037,2019-04-06T20:22:10Z,2019-05-02T03:48:34Z,2019-05-02T03:48:34Z,CLOSED,False,162,0,6,https://github.com/pmprog,MiniMP3 support (Sample mode only for now),3,[],https://github.com/liballeg/allegro5/pull/1037,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1037#issuecomment-487819078,"Referencing MiniMP3 (https://github.com/lieff/minimp3), currently only plays MP3s as ""samples""","Merged as 05009f7, with a few fixes. Thanks a lot, it works great!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1038,2019-04-06T20:45:29Z,2019-04-07T22:32:34Z,2019-04-07T22:32:42Z,MERGED,True,4,1,1,https://github.com/guilt,Do not build Android examples outside of Android.,1,[],https://github.com/liballeg/allegro5/pull/1038,https://github.com/guilt,1,https://github.com/liballeg/allegro5/pull/1038,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1038,2019-04-06T20:45:29Z,2019-04-07T22:32:34Z,2019-04-07T22:32:42Z,MERGED,True,4,1,1,https://github.com/guilt,Do not build Android examples outside of Android.,1,[],https://github.com/liballeg/allegro5/pull/1038,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1038#issuecomment-480635637,,Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1039,2019-04-06T20:53:55Z,2019-04-30T04:14:00Z,2019-04-30T21:16:49Z,CLOSED,False,452,0,9,https://github.com/guilt,Add FreeImage support in image addon.,2,[],https://github.com/liballeg/allegro5/pull/1039,https://github.com/guilt,1,https://github.com/liballeg/allegro5/pull/1039,"I realized that there are many image formats that offer plentiful advantages over the ones we support, hence it may be a good idea to start adding support for loading them into Allegro.
Currently, we load as 8-8-8-8 bitmaps but we should be able to use this library to load higher bits per channel images, such as the ones with HDR, if we support it.
I did not add save image support because for me, loading some images was the initial goal of writing this.
I added an example which is a semi-copy-pasta of ex_bitmap.c which uses ALLEGRO_FILE * routines to test the _bitmap_f loaders.","I realized that there are many image formats that offer plentiful advantages over the ones we support, hence it may be a good idea to start adding support for loading them into Allegro.
Currently, we load as 8-8-8-8 bitmaps but we should be able to use this library to load higher bits per channel images, such as the ones with HDR, if we support it.
I did not add save image support because for me, loading some images was the initial goal of writing this.
I added an example which is a semi-copy-pasta of ex_bitmap.c which uses ALLEGRO_FILE * routines to test the _bitmap_f loaders.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1039,2019-04-06T20:53:55Z,2019-04-30T04:14:00Z,2019-04-30T21:16:49Z,CLOSED,False,452,0,9,https://github.com/guilt,Add FreeImage support in image addon.,2,[],https://github.com/liballeg/allegro5/pull/1039,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1039#issuecomment-485332283,"I realized that there are many image formats that offer plentiful advantages over the ones we support, hence it may be a good idea to start adding support for loading them into Allegro.
Currently, we load as 8-8-8-8 bitmaps but we should be able to use this library to load higher bits per channel images, such as the ones with HDR, if we support it.
I did not add save image support because for me, loading some images was the initial goal of writing this.
I added an example which is a semi-copy-pasta of ex_bitmap.c which uses ALLEGRO_FILE * routines to test the _bitmap_f loaders.","Nice, this looks great. Let me just try running it locally as a sanity check, but I think it's basically all set.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1039,2019-04-06T20:53:55Z,2019-04-30T04:14:00Z,2019-04-30T21:16:49Z,CLOSED,False,452,0,9,https://github.com/guilt,Add FreeImage support in image addon.,2,[],https://github.com/liballeg/allegro5/pull/1039,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/1039#issuecomment-487816498,"I realized that there are many image formats that offer plentiful advantages over the ones we support, hence it may be a good idea to start adding support for loading them into Allegro.
Currently, we load as 8-8-8-8 bitmaps but we should be able to use this library to load higher bits per channel images, such as the ones with HDR, if we support it.
I did not add save image support because for me, loading some images was the initial goal of writing this.
I added an example which is a semi-copy-pasta of ex_bitmap.c which uses ALLEGRO_FILE * routines to test the _bitmap_f loaders.","Merged as 0638d7c, thanks! Just needed to fix one little thing in the CMakeLists.txt.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1043,2019-05-01T09:34:01Z,2019-05-02T03:47:45Z,2019-05-02T03:47:50Z,MERGED,True,7,1,1,https://github.com/guilt,Fix Unicode/Non-Unicode path appearing on Output Console.,1,[],https://github.com/liballeg/allegro5/pull/1043,https://github.com/guilt,1,https://github.com/liballeg/allegro5/pull/1043,"When debugging with Windows today, I noticed that sometimes the Output messages are unreadable, at least for me :(

I didn't understand why Windows messes this up, but long story short, I decided to make it output through the Non-UNICODE version of a function.","When debugging with Windows today, I noticed that sometimes the Output messages are unreadable, at least for me :(

I didn't understand why Windows messes this up, but long story short, I decided to make it output through the Non-UNICODE version of a function.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1043,2019-05-01T09:34:01Z,2019-05-02T03:47:45Z,2019-05-02T03:47:50Z,MERGED,True,7,1,1,https://github.com/guilt,Fix Unicode/Non-Unicode path appearing on Output Console.,1,[],https://github.com/liballeg/allegro5/pull/1043,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1043#issuecomment-488372812,"When debugging with Windows today, I noticed that sometimes the Output messages are unreadable, at least for me :(

I didn't understand why Windows messes this up, but long story short, I decided to make it output through the Non-UNICODE version of a function.","Err, isn't the correct thing is to do what #1017 did? I guess you want to use _twin_utf8_to_tchar?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1043,2019-05-01T09:34:01Z,2019-05-02T03:47:45Z,2019-05-02T03:47:50Z,MERGED,True,7,1,1,https://github.com/guilt,Fix Unicode/Non-Unicode path appearing on Output Console.,1,[],https://github.com/liballeg/allegro5/pull/1043,https://github.com/dos1,3,https://github.com/liballeg/allegro5/pull/1043#issuecomment-488505011,"When debugging with Windows today, I noticed that sometimes the Output messages are unreadable, at least for me :(

I didn't understand why Windows messes this up, but long story short, I decided to make it output through the Non-UNICODE version of a function.","Yeah, you should convert the string to UTF-16 Windows expects, instead of switching to codepage-dependent ANSI mode. Passing UTF-8 won't work.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1043,2019-05-01T09:34:01Z,2019-05-02T03:47:45Z,2019-05-02T03:47:50Z,MERGED,True,7,1,1,https://github.com/guilt,Fix Unicode/Non-Unicode path appearing on Output Console.,1,[],https://github.com/liballeg/allegro5/pull/1043,https://github.com/guilt,4,https://github.com/liballeg/allegro5/pull/1043#issuecomment-488541616,"When debugging with Windows today, I noticed that sometimes the Output messages are unreadable, at least for me :(

I didn't understand why Windows messes this up, but long story short, I decided to make it output through the Non-UNICODE version of a function.","Yeah, you should convert the string to UTF-16 Windows expects, instead of switching to codepage-dependent ANSI mode. Passing UTF-8 won't work.

Well, getting UTF-8 to print to a log with %s isn't going to fly :) But okay, I've fixx0red it",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1043,2019-05-01T09:34:01Z,2019-05-02T03:47:45Z,2019-05-02T03:47:50Z,MERGED,True,7,1,1,https://github.com/guilt,Fix Unicode/Non-Unicode path appearing on Output Console.,1,[],https://github.com/liballeg/allegro5/pull/1043,https://github.com/SiegeLord,5,https://github.com/liballeg/allegro5/pull/1043#issuecomment-488544878,"When debugging with Windows today, I noticed that sometimes the Output messages are unreadable, at least for me :(

I didn't understand why Windows messes this up, but long story short, I decided to make it output through the Non-UNICODE version of a function.",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1044,2019-05-01T15:34:24Z,2019-05-02T03:48:11Z,2019-05-02T03:48:11Z,CLOSED,False,206,45,14,https://github.com/rmbeer,5.2.5,11,[],https://github.com/liballeg/allegro5/pull/1044,https://github.com/rmbeer,1,https://github.com/liballeg/allegro5/pull/1044,thrdhdfhdfh,thrdhdfhdfh,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1044,2019-05-01T15:34:24Z,2019-05-02T03:48:11Z,2019-05-02T03:48:11Z,CLOSED,False,206,45,14,https://github.com/rmbeer,5.2.5,11,[],https://github.com/liballeg/allegro5/pull/1044,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1044#issuecomment-488544922,thrdhdfhdfh,???,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1045,2019-05-01T16:04:02Z,2019-09-02T18:23:50Z,2019-09-02T18:23:50Z,CLOSED,False,187,0,8,https://github.com/rmbeer,Fix (complete) al_inhibit_screensaver function,4,[],https://github.com/liballeg/allegro5/pull/1045,https://github.com/rmbeer,1,https://github.com/liballeg/allegro5/pull/1045,"For the moment, this is the most optimal solution. X11 has a strange bug that seems to ignore the internal clock of the screensaver. The code must be maintained in this way until X11 is corrected. (Maybe I have to go fix it)","For the moment, this is the most optimal solution. X11 has a strange bug that seems to ignore the internal clock of the screensaver. The code must be maintained in this way until X11 is corrected. (Maybe I have to go fix it)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1045,2019-05-01T16:04:02Z,2019-09-02T18:23:50Z,2019-09-02T18:23:50Z,CLOSED,False,187,0,8,https://github.com/rmbeer,Fix (complete) al_inhibit_screensaver function,4,[],https://github.com/liballeg/allegro5/pull/1045,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1045#issuecomment-527219166,"For the moment, this is the most optimal solution. X11 has a strange bug that seems to ignore the internal clock of the screensaver. The code must be maintained in this way until X11 is corrected. (Maybe I have to go fix it)",Subsumed by #1078.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1047,2019-05-03T00:17:20Z,,2019-05-12T16:09:13Z,OPEN,False,3,2,1,https://github.com/dos1,al_run_detached_thread: fix segfault on detaching when the thread is already gone,1,[],https://github.com/liballeg/allegro5/pull/1047,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/1047,"detached_thread_func_trampoline freed the outer thread at its end. If outer->proc
was really fast to finish, _al_thread_detach could get called with &outer->thread
as its argument after outer was already freed.
Usually it would be fast enough to not ever be overwritten after freeing, but tools
like asan explicitly overwrite freed memory, leading to reproducible crash.","detached_thread_func_trampoline freed the outer thread at its end. If outer->proc
was really fast to finish, _al_thread_detach could get called with &outer->thread
as its argument after outer was already freed.
Usually it would be fast enough to not ever be overwritten after freeing, but tools
like asan explicitly overwrite freed memory, leading to reproducible crash.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1047,2019-05-03T00:17:20Z,,2019-05-12T16:09:13Z,OPEN,False,3,2,1,https://github.com/dos1,al_run_detached_thread: fix segfault on detaching when the thread is already gone,1,[],https://github.com/liballeg/allegro5/pull/1047,https://github.com/dos1,2,https://github.com/liballeg/allegro5/pull/1047#issuecomment-491608345,"detached_thread_func_trampoline freed the outer thread at its end. If outer->proc
was really fast to finish, _al_thread_detach could get called with &outer->thread
as its argument after outer was already freed.
Usually it would be fast enough to not ever be overwritten after freeing, but tools
like asan explicitly overwrite freed memory, leading to reproducible crash.","I'm getting some segfaults with this patch now, let's hold with it.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1049,2019-05-04T19:26:43Z,2019-05-27T06:37:19Z,2019-05-27T06:37:19Z,CLOSED,False,70,224,5,https://github.com/elias-pschernig,fix android built to find opengl es,2,[],https://github.com/liballeg/allegro5/pull/1049,https://github.com/elias-pschernig,1,https://github.com/liballeg/allegro5/pull/1049,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1049,2019-05-04T19:26:43Z,2019-05-27T06:37:19Z,2019-05-27T06:37:19Z,CLOSED,False,70,224,5,https://github.com/elias-pschernig,fix android built to find opengl es,2,[],https://github.com/liballeg/allegro5/pull/1049,https://github.com/elias-pschernig,2,https://github.com/liballeg/allegro5/pull/1049#issuecomment-489827686,,"Actually, there is a better way - the NDK ships with a cmake toolchain which we should be able to use. I'll try and do that instead.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1049,2019-05-04T19:26:43Z,2019-05-27T06:37:19Z,2019-05-27T06:37:19Z,CLOSED,False,70,224,5,https://github.com/elias-pschernig,fix android built to find opengl es,2,[],https://github.com/liballeg/allegro5/pull/1049,https://github.com/elias-pschernig,3,https://github.com/liballeg/allegro5/pull/1049#issuecomment-489866707,,"This allows us to completely remove our custom Android toolchain (yay, less cmake code!) and also makes the Android build much easier in general because no more standalone toolchain has to be created.
I have not updated the section about building dependencies yet - I don't know how many of those would build with the Android-provided cmake like Allegro now does. But I intend to find out soon when I next update my Android binaries. This should not really matter for this PR.",True,{'THUMBS_UP': ['https://github.com/dos1']}
liballeg/allegro5,https://github.com/liballeg/allegro5,1049,2019-05-04T19:26:43Z,2019-05-27T06:37:19Z,2019-05-27T06:37:19Z,CLOSED,False,70,224,5,https://github.com/elias-pschernig,fix android built to find opengl es,2,[],https://github.com/liballeg/allegro5/pull/1049,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/1049#issuecomment-496096548,,"Looks good to me, merged as 5ef154b. One caveat is that the Android CMake files require a relatively high cmake version... I had to install one from Kitware's PPA.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1050,2019-05-04T21:41:32Z,2019-05-28T05:22:59Z,2019-05-28T05:23:04Z,MERGED,True,19,14,2,https://github.com/dos1,android: use FLAG_KEEP_SCREEN_ON instead of a wakelock for screensaver inhibition,1,[],https://github.com/liballeg/allegro5/pull/1050,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/1050,"Wakelocks are deprecated for this purpose and don't work without aquiring proper permissions, while window flag works without them and integrates properly with app switching.","Wakelocks are deprecated for this purpose and don't work without aquiring proper permissions, while window flag works without them and integrates properly with app switching.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1050,2019-05-04T21:41:32Z,2019-05-28T05:22:59Z,2019-05-28T05:23:04Z,MERGED,True,19,14,2,https://github.com/dos1,android: use FLAG_KEEP_SCREEN_ON instead of a wakelock for screensaver inhibition,1,[],https://github.com/liballeg/allegro5/pull/1050,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1050#issuecomment-496369308,"Wakelocks are deprecated for this purpose and don't work without aquiring proper permissions, while window flag works without them and integrates properly with app switching.",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1052,2019-05-12T16:00:33Z,2019-05-28T05:26:08Z,2019-05-28T05:26:12Z,MERGED,True,29,4,1,https://github.com/dos1,android: use DisplayListener to listen to orientation changes,1,[],https://github.com/liballeg/allegro5/pull/1052,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/1052,Fixes #1048,Fixes #1048,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1052,2019-05-12T16:00:33Z,2019-05-28T05:26:08Z,2019-05-28T05:26:12Z,MERGED,True,29,4,1,https://github.com/dos1,android: use DisplayListener to listen to orientation changes,1,[],https://github.com/liballeg/allegro5/pull/1052,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1052#issuecomment-496369844,Fixes #1048,Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1053,2019-05-12T16:18:04Z,2019-05-12T21:07:19Z,2019-05-12T21:07:19Z,CLOSED,False,1,1,1,https://github.com/dos1,audio: use memmove instead of memcpy in _al_kcm_refill_stream,1,[],https://github.com/liballeg/allegro5/pull/1053,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/1053,"The ranges can overlap there, which memcpy can't handle.
Closes #1051","The ranges can overlap there, which memcpy can't handle.
Closes #1051",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1053,2019-05-12T16:18:04Z,2019-05-12T21:07:19Z,2019-05-12T21:07:19Z,CLOSED,False,1,1,1,https://github.com/dos1,audio: use memmove instead of memcpy in _al_kcm_refill_stream,1,[],https://github.com/liballeg/allegro5/pull/1053,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1053#issuecomment-491625790,"The ranges can overlap there, which memcpy can't handle.
Closes #1051","I don't think this fix is correct. The overlapping copy, as I understand it, is a symptom of an underlying bug: we should never have any overlap unless we're copying outside the buffer. I instrumented the code, and indeed it was doing that. So, instead, I fixed the copying logic to do the correct thing (I think), see #1056.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1054,2019-05-12T17:11:54Z,2019-05-12T19:01:18Z,2019-05-12T19:01:18Z,MERGED,True,8,1,1,https://github.com/dos1,Fix implicit fallthrough compiler warnings,1,[],https://github.com/liballeg/allegro5/pull/1054,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/1054,Compilers scan for comment markers that let you explicitly state that you really want a fall through.,Compilers scan for comment markers that let you explicitly state that you really want a fall through.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1054,2019-05-12T17:11:54Z,2019-05-12T19:01:18Z,2019-05-12T19:01:18Z,MERGED,True,8,1,1,https://github.com/dos1,Fix implicit fallthrough compiler warnings,1,[],https://github.com/liballeg/allegro5/pull/1054,https://github.com/fatcerberus,2,https://github.com/liballeg/allegro5/pull/1054#issuecomment-491613458,Compilers scan for comment markers that let you explicitly state that you really want a fall through.,"I didn’t know there were compilers that actually detected the fallthrough comments; I usually put them in as an aid to people reading the code anyway, but the compiler being able to parse them is even better.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1054,2019-05-12T17:11:54Z,2019-05-12T19:01:18Z,2019-05-12T19:01:18Z,MERGED,True,8,1,1,https://github.com/dos1,Fix implicit fallthrough compiler warnings,1,[],https://github.com/liballeg/allegro5/pull/1054,https://github.com/dos1,3,https://github.com/liballeg/allegro5/pull/1054#issuecomment-491613842,Compilers scan for comment markers that let you explicitly state that you really want a fall through.,"Yeah, it was a news for me as well :D
https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wimplicit-fallthrough",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1054,2019-05-12T17:11:54Z,2019-05-12T19:01:18Z,2019-05-12T19:01:18Z,MERGED,True,8,1,1,https://github.com/dos1,Fix implicit fallthrough compiler warnings,1,[],https://github.com/liballeg/allegro5/pull/1054,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/1054#issuecomment-491620344,Compilers scan for comment markers that let you explicitly state that you really want a fall through.,That regex is pretty nuts. Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1055,2019-05-12T17:20:10Z,2019-05-12T18:58:42Z,2019-05-12T18:58:42Z,MERGED,True,7,6,1,https://github.com/dos1,Fix reported bitshifts for ARGB_4444 and RGBA_4444 pixel formats,1,[],https://github.com/liballeg/allegro5/pull/1055,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/1055,"Something went really wrong there (and the compiler was warning about fallthrough, but nobody cared :P )","Something went really wrong there (and the compiler was warning about fallthrough, but nobody cared :P )",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1055,2019-05-12T17:20:10Z,2019-05-12T18:58:42Z,2019-05-12T18:58:42Z,MERGED,True,7,6,1,https://github.com/dos1,Fix reported bitshifts for ARGB_4444 and RGBA_4444 pixel formats,1,[],https://github.com/liballeg/allegro5/pull/1055,https://github.com/dos1,2,https://github.com/liballeg/allegro5/pull/1055#issuecomment-491613445,"Something went really wrong there (and the compiler was warning about fallthrough, but nobody cared :P )",I wonder whether the conversion is correctly done as well.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1055,2019-05-12T17:20:10Z,2019-05-12T18:58:42Z,2019-05-12T18:58:42Z,MERGED,True,7,6,1,https://github.com/dos1,Fix reported bitshifts for ARGB_4444 and RGBA_4444 pixel formats,1,[],https://github.com/liballeg/allegro5/pull/1055,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/1055#issuecomment-491620139,"Something went really wrong there (and the compiler was warning about fallthrough, but nobody cared :P )","Nice, thanks! The conversions are correct, as they are generated using a different mechanism (literally by parsing the RGBA_4444 string). Maybe these line should have been generated by that script too...",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1056,2019-05-12T20:14:38Z,2019-05-28T05:44:28Z,2019-05-28T05:44:29Z,MERGED,True,18,13,3,https://github.com/SiegeLord,Fix _al_kcm_refill_stream in cases where stream speed caused spl->pos to overshoot.,1,[],https://github.com/liballeg/allegro5/pull/1056,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1056,"Previously, this would result in us copying some garbage to the
beginning of the new buffer, since the logic was sourcing samples
relative to the overshot spl->pos, rather than the real end of the
buffer.
While I was at it, I fixed a super-rare situation where the speed is so
high that multiple buffers need to be updated. I only fixes it in the
mixer code, not the voice code. The latter is essentially deprecated
anyway, one should always use a mixer before a voice.
Fix #1051.","Previously, this would result in us copying some garbage to the
beginning of the new buffer, since the logic was sourcing samples
relative to the overshot spl->pos, rather than the real end of the
buffer.
While I was at it, I fixed a super-rare situation where the speed is so
high that multiple buffers need to be updated. I only fixes it in the
mixer code, not the voice code. The latter is essentially deprecated
anyway, one should always use a mixer before a voice.
Fix #1051.",True,{'THUMBS_UP': ['https://github.com/dos1']}
liballeg/allegro5,https://github.com/liballeg/allegro5,1056,2019-05-12T20:14:38Z,2019-05-28T05:44:28Z,2019-05-28T05:44:29Z,MERGED,True,18,13,3,https://github.com/SiegeLord,Fix _al_kcm_refill_stream in cases where stream speed caused spl->pos to overshoot.,1,[],https://github.com/liballeg/allegro5/pull/1056,https://github.com/fatcerberus,2,https://github.com/liballeg/allegro5/pull/1056#issuecomment-491626149,"Previously, this would result in us copying some garbage to the
beginning of the new buffer, since the logic was sourcing samples
relative to the overshot spl->pos, rather than the real end of the
buffer.
While I was at it, I fixed a super-rare situation where the speed is so
high that multiple buffers need to be updated. I only fixes it in the
mixer code, not the voice code. The latter is essentially deprecated
anyway, one should always use a mixer before a voice.
Fix #1051.","where the speed is so high that multiple buffers need to be updated

Can this happen under normal conditions, for example if there's a lot of contention for CPU time?  i.e. the stream feeds a ton of data before the mixer code realizes it needs to update or something",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1056,2019-05-12T20:14:38Z,2019-05-28T05:44:28Z,2019-05-28T05:44:29Z,MERGED,True,18,13,3,https://github.com/SiegeLord,Fix _al_kcm_refill_stream in cases where stream speed caused spl->pos to overshoot.,1,[],https://github.com/liballeg/allegro5/pull/1056,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/1056#issuecomment-491628909,"Previously, this would result in us copying some garbage to the
beginning of the new buffer, since the logic was sourcing samples
relative to the overshot spl->pos, rather than the real end of the
buffer.
While I was at it, I fixed a super-rare situation where the speed is so
high that multiple buffers need to be updated. I only fixes it in the
mixer code, not the voice code. The latter is essentially deprecated
anyway, one should always use a mixer before a voice.
Fix #1051.","No, this code runs on the same thread as the audio sink/consumer. I.e. no matter the speed of the CPU, the phenomenon that I'm talking about only has to do with the fact that the increment to the buffer position could be larger than its length.
If there's a lot of contention it might happen that this thread somehow gets ahead of the feeding thread, but that's a different issue (I believe what happens then is that the stream ceases to output sound until it gets more buffers to play).",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1058,2019-05-16T17:13:00Z,2019-05-27T06:39:55Z,2019-05-27T06:40:00Z,MERGED,True,7,6,1,https://github.com/dos1,cmake: make condition that excludes test_big_endian test more generic,1,[],https://github.com/liballeg/allegro5/pull/1058,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/1058,"When cross-compiling to some platforms, the test doesn't work. Checking for variables set earlier instead of hardcoded set of platforms allows one to skip the test by appending proper variable to cmake command line or platform toolchain file.","When cross-compiling to some platforms, the test doesn't work. Checking for variables set earlier instead of hardcoded set of platforms allows one to skip the test by appending proper variable to cmake command line or platform toolchain file.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1058,2019-05-16T17:13:00Z,2019-05-27T06:39:55Z,2019-05-27T06:40:00Z,MERGED,True,7,6,1,https://github.com/dos1,cmake: make condition that excludes test_big_endian test more generic,1,[],https://github.com/liballeg/allegro5/pull/1058,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1058#issuecomment-496097189,"When cross-compiling to some platforms, the test doesn't work. Checking for variables set earlier instead of hardcoded set of platforms allows one to skip the test by appending proper variable to cmake command line or platform toolchain file.",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1059,2019-05-16T17:47:17Z,2019-05-27T06:39:15Z,2019-05-27T06:39:19Z,MERGED,True,1,1,1,https://github.com/dos1,cmake: don't link with dl on SDL platform,1,[],https://github.com/liballeg/allegro5/pull/1059,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/1059,It's unnecessary (Allegro doesn't use it directly) and breaks the build on platforms with no dynamic linking.,It's unnecessary (Allegro doesn't use it directly) and breaks the build on platforms with no dynamic linking.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1059,2019-05-16T17:47:17Z,2019-05-27T06:39:15Z,2019-05-27T06:39:19Z,MERGED,True,1,1,1,https://github.com/dos1,cmake: don't link with dl on SDL platform,1,[],https://github.com/liballeg/allegro5/pull/1059,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1059#issuecomment-496097049,It's unnecessary (Allegro doesn't use it directly) and breaks the build on platforms with no dynamic linking.,Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1062,2019-05-30T07:11:57Z,2019-06-11T03:20:13Z,2019-06-11T03:20:19Z,MERGED,True,10,4,1,https://github.com/pedro-w,Make sure a display doesn't keep a reference to a destroyed bitmap,2,[],https://github.com/liballeg/allegro5/pull/1062,https://github.com/pedro-w,1,https://github.com/liballeg/allegro5/pull/1062,Proposed change to fix #1061 - review needed!,Proposed change to fix #1061 - review needed!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1062,2019-05-30T07:11:57Z,2019-06-11T03:20:13Z,2019-06-11T03:20:19Z,MERGED,True,10,4,1,https://github.com/pedro-w,Make sure a display doesn't keep a reference to a destroyed bitmap,2,[],https://github.com/liballeg/allegro5/pull/1062,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1062#issuecomment-500181221,Proposed change to fix #1061 - review needed!,"This change looks great, but seems too simple given the discussion in the bug, is this really all that's needed? One thing I'd like to verify for myself is that the bitmap reference is only stored in the display that owns it (in which case this change is sufficient).",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1062,2019-05-30T07:11:57Z,2019-06-11T03:20:13Z,2019-06-11T03:20:19Z,MERGED,True,10,4,1,https://github.com/pedro-w,Make sure a display doesn't keep a reference to a destroyed bitmap,2,[],https://github.com/liballeg/allegro5/pull/1062,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/1062#issuecomment-500184686,Proposed change to fix #1061 - review needed!,"I've spent more time looking at the code, and I'm more convinced that this change is probably correct, the opengl_target can only be set by the display that owns the bitmap.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1062,2019-05-30T07:11:57Z,2019-06-11T03:20:13Z,2019-06-11T03:20:19Z,MERGED,True,10,4,1,https://github.com/pedro-w,Make sure a display doesn't keep a reference to a destroyed bitmap,2,[],https://github.com/liballeg/allegro5/pull/1062,https://github.com/pedro-w,4,https://github.com/liballeg/allegro5/pull/1062#issuecomment-500188993,Proposed change to fix #1061 - review needed!,"This change looks great, but seems too simple given the discussion in the bug, is this really all that's needed?
It does seem simple - I tried to justify it by comparing the analogous code in the directx driver but they don't really line up enough to make that approach useful.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1062,2019-05-30T07:11:57Z,2019-06-11T03:20:13Z,2019-06-11T03:20:19Z,MERGED,True,10,4,1,https://github.com/pedro-w,Make sure a display doesn't keep a reference to a destroyed bitmap,2,[],https://github.com/liballeg/allegro5/pull/1062,https://github.com/SiegeLord,5,https://github.com/liballeg/allegro5/pull/1062#issuecomment-500671654,Proposed change to fix #1061 - review needed!,Thanks a lot!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1063,2019-06-01T20:43:48Z,2019-06-24T03:03:11Z,2019-06-24T03:03:11Z,CLOSED,False,501,580,6,https://github.com/pedro-w,MacOS: make sure all relevant code runs on the main thread.,4,[],https://github.com/liballeg/allegro5/pull/1063,https://github.com/pedro-w,1,https://github.com/liballeg/allegro5/pull/1063,"Recent versions of MacOS are stricter about always running certain functions on the main thread (particularly, functions to create Cocoa objects.) Xcode includes a method to detect calls made on the 'wrong' thread. This patch fixes all reported instances.
Note that it uses dispatch_sync, as recommended by Apple, instead of performSelectorOnMainThread:withObject:waitUntilDone: on a helper object. This simplified the code. I kept uses of the latter when it was just calling a single method on a Cocoa object.
There is also a small modification to ex_native_dialog to demonstrate the Save dialog as well as the Open dialog.
Closes #876","Recent versions of MacOS are stricter about always running certain functions on the main thread (particularly, functions to create Cocoa objects.) Xcode includes a method to detect calls made on the 'wrong' thread. This patch fixes all reported instances.
Note that it uses dispatch_sync, as recommended by Apple, instead of performSelectorOnMainThread:withObject:waitUntilDone: on a helper object. This simplified the code. I kept uses of the latter when it was just calling a single method on a Cocoa object.
There is also a small modification to ex_native_dialog to demonstrate the Save dialog as well as the Open dialog.
Closes #876",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1063,2019-06-01T20:43:48Z,2019-06-24T03:03:11Z,2019-06-24T03:03:11Z,CLOSED,False,501,580,6,https://github.com/pedro-w,MacOS: make sure all relevant code runs on the main thread.,4,[],https://github.com/liballeg/allegro5/pull/1063,https://github.com/pedro-w,2,https://github.com/liballeg/allegro5/pull/1063#issuecomment-497976237,"Recent versions of MacOS are stricter about always running certain functions on the main thread (particularly, functions to create Cocoa objects.) Xcode includes a method to detect calls made on the 'wrong' thread. This patch fixes all reported instances.
Note that it uses dispatch_sync, as recommended by Apple, instead of performSelectorOnMainThread:withObject:waitUntilDone: on a helper object. This simplified the code. I kept uses of the latter when it was just calling a single method on a Cocoa object.
There is also a small modification to ex_native_dialog to demonstrate the Save dialog as well as the Open dialog.
Closes #876","As an aside, ex_fs_resize doesn't seem to work for me.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1063,2019-06-01T20:43:48Z,2019-06-24T03:03:11Z,2019-06-24T03:03:11Z,CLOSED,False,501,580,6,https://github.com/pedro-w,MacOS: make sure all relevant code runs on the main thread.,4,[],https://github.com/liballeg/allegro5/pull/1063,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/1063#issuecomment-504839630,"Recent versions of MacOS are stricter about always running certain functions on the main thread (particularly, functions to create Cocoa objects.) Xcode includes a method to detect calls made on the 'wrong' thread. This patch fixes all reported instances.
Note that it uses dispatch_sync, as recommended by Apple, instead of performSelectorOnMainThread:withObject:waitUntilDone: on a helper object. This simplified the code. I kept uses of the latter when it was just calling a single method on a Cocoa object.
There is also a small modification to ex_native_dialog to demonstrate the Save dialog as well as the Open dialog.
Closes #876","Amazing work as always, thanks a ton! I love the simplified code. Merged as 40d04ef.

As an aside, ex_fs_resize doesn't seem to work for me.

Yeah, real fullscreen is hopelessly broken unfortunately.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1064,2019-06-27T22:59:09Z,2019-06-29T17:07:50Z,2019-06-29T17:07:58Z,MERGED,True,1,1,1,https://github.com/dos1,utf8: fix al_utf8_width argument type mismatch on platforms where sizeof(int) != 4,1,[],https://github.com/liballeg/allegro5/pull/1064,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/1064,"The function prototype already specified int32_t, it just doesn't produce any warnings, cause usually int == int32_t.","The function prototype already specified int32_t, it just doesn't produce any warnings, cause usually int == int32_t.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1064,2019-06-27T22:59:09Z,2019-06-29T17:07:50Z,2019-06-29T17:07:58Z,MERGED,True,1,1,1,https://github.com/dos1,utf8: fix al_utf8_width argument type mismatch on platforms where sizeof(int) != 4,1,[],https://github.com/liballeg/allegro5/pull/1064,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1064#issuecomment-506972538,"The function prototype already specified int32_t, it just doesn't produce any warnings, cause usually int == int32_t.",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1065,2019-06-29T18:06:43Z,2019-07-06T21:34:26Z,2019-12-02T23:42:25Z,MERGED,True,247,23,1,https://github.com/SiegeLord,Add simple MP3 streaming.,3,[],https://github.com/liballeg/allegro5/pull/1065,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1065,"This partially implements #1041.
This works by completely reading the encoded file, and then decoding it
on demand. Some things don't work:

Can't get the length
Can't set loop points
Can't seek

All 3 can be solved by creating a lookup table at load time. At some
future point we shouldn't load the whole file in either, but it was
simpler to do that to start.","This partially implements #1041.
This works by completely reading the encoded file, and then decoding it
on demand. Some things don't work:

Can't get the length
Can't set loop points
Can't seek

All 3 can be solved by creating a lookup table at load time. At some
future point we shouldn't load the whole file in either, but it was
simpler to do that to start.",True,{'THUMBS_UP': ['https://github.com/pmprog']}
liballeg/allegro5,https://github.com/liballeg/allegro5,1065,2019-06-29T18:06:43Z,2019-07-06T21:34:26Z,2019-12-02T23:42:25Z,MERGED,True,247,23,1,https://github.com/SiegeLord,Add simple MP3 streaming.,3,[],https://github.com/liballeg/allegro5/pull/1065,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1065#issuecomment-508897377,"This partially implements #1041.
This works by completely reading the encoded file, and then decoding it
on demand. Some things don't work:

Can't get the length
Can't set loop points
Can't seek

All 3 can be solved by creating a lookup table at load time. At some
future point we shouldn't load the whole file in either, but it was
simpler to do that to start.","Ended up adding streaming, it wasn't that hard once I RTFM'd.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1065,2019-06-29T18:06:43Z,2019-07-06T21:34:26Z,2019-12-02T23:42:25Z,MERGED,True,247,23,1,https://github.com/SiegeLord,Add simple MP3 streaming.,3,[],https://github.com/liballeg/allegro5/pull/1065,https://github.com/fatcerberus,3,https://github.com/liballeg/allegro5/pull/1065#issuecomment-560492492,"This partially implements #1041.
This works by completely reading the encoded file, and then decoding it
on demand. Some things don't work:

Can't get the length
Can't set loop points
Can't seek

All 3 can be solved by creating a lookup table at load time. At some
future point we shouldn't load the whole file in either, but it was
simpler to do that to start.","@SiegeLord Any idea when this will make it into a release?  Really looking forward to mp3 support! 😃
Also to be clear: The OP says this doesn't support length, loop points, or seeking, but the actual diff suggests these things are supported so... I'm confused.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1065,2019-06-29T18:06:43Z,2019-07-06T21:34:26Z,2019-12-02T23:42:25Z,MERGED,True,247,23,1,https://github.com/SiegeLord,Add simple MP3 streaming.,3,[],https://github.com/liballeg/allegro5/pull/1065,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/1065#issuecomment-560921672,"This partially implements #1041.
This works by completely reading the encoded file, and then decoding it
on demand. Some things don't work:

Can't get the length
Can't set loop points
Can't seek

All 3 can be solved by creating a lookup table at load time. At some
future point we shouldn't load the whole file in either, but it was
simpler to do that to start.","I think the PR description was just the first commits message, which indeed was accurate, but when I implemented those bullet points I forgot to update it. I'll try making a release sometime this year.",True,"{'THUMBS_UP': ['https://github.com/fatcerberus', 'https://github.com/beoran']}"
liballeg/allegro5,https://github.com/liballeg/allegro5,1068,2019-07-22T03:46:07Z,2019-08-05T04:38:35Z,2019-08-05T04:38:35Z,MERGED,True,40,59,1,https://github.com/SiegeLord,Clean up and simplify the logging logic.,2,[],https://github.com/liballeg/allegro5/pull/1068,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1068,"Now we always go via the static buffer, and only have platform-specific
output when opening the file and doing the final string output.
Fixes #1040.","Now we always go via the static buffer, and only have platform-specific
output when opening the file and doing the final string output.
Fixes #1040.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1070,2019-08-04T00:47:31Z,2019-08-10T18:07:02Z,2019-08-10T18:07:14Z,MERGED,True,74,7,8,https://github.com/allefant,Fix alpha test with the GLSL version.,5,[],https://github.com/liballeg/allegro5/pull/1070,https://github.com/allefant,1,https://github.com/liballeg/allegro5/pull/1070,"I added a commandline argument to ex_depth_mask to use the programmable pipeline. In the version using the GLSL shader it is broken. This patch fixes it so ex_depth_mask will work the same with and without the new argument:
./ex_depth_mask
./ex_depth_mask shader
The HLSL version is likely broken as well (but alpha testing may happen
outside of the shader there). I have no way to verify it.","I added a commandline argument to ex_depth_mask to use the programmable pipeline. In the version using the GLSL shader it is broken. This patch fixes it so ex_depth_mask will work the same with and without the new argument:
./ex_depth_mask
./ex_depth_mask shader
The HLSL version is likely broken as well (but alpha testing may happen
outside of the shader there). I have no way to verify it.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1070,2019-08-04T00:47:31Z,2019-08-10T18:07:02Z,2019-08-10T18:07:14Z,MERGED,True,74,7,8,https://github.com/allefant,Fix alpha test with the GLSL version.,5,[],https://github.com/liballeg/allegro5/pull/1070,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1070#issuecomment-518509753,"I added a commandline argument to ex_depth_mask to use the programmable pipeline. In the version using the GLSL shader it is broken. This patch fixes it so ex_depth_mask will work the same with and without the new argument:
./ex_depth_mask
./ex_depth_mask shader
The HLSL version is likely broken as well (but alpha testing may happen
outside of the shader there). I have no way to verify it.","Nice!!! I tested HLSL, and it works without this change, so I guess there's a different mechanism at play there. I think we'll want to add some 'else's in the shader, maybe to make the shader compiler's easier. Also, we need to document the new uniform.
Want me to do that, or do you want to handle it?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1070,2019-08-04T00:47:31Z,2019-08-10T18:07:02Z,2019-08-10T18:07:14Z,MERGED,True,74,7,8,https://github.com/allefant,Fix alpha test with the GLSL version.,5,[],https://github.com/liballeg/allegro5/pull/1070,https://github.com/allefant,3,https://github.com/liballeg/allegro5/pull/1070#issuecomment-518702442,"I added a commandline argument to ex_depth_mask to use the programmable pipeline. In the version using the GLSL shader it is broken. This patch fixes it so ex_depth_mask will work the same with and without the new argument:
./ex_depth_mask
./ex_depth_mask shader
The HLSL version is likely broken as well (but alpha testing may happen
outside of the shader there). I have no way to verify it.","Yeah, DirectX has a different approach to mixing ""fixed pipeline"" and shaders. Some Google results suggest alpha testing behaves differently between DirectX 9 and 10 as well - so if we ever rewrite for a newer DX the issue could return. Anyway, it's a useful feature for me so I'm glad Allegro has it :)
I can take a pass at adding those else statements, not sure they would really add any extra info to the compiler in addition to the return though. I.e.:
if (A) return;
if (B) return;
if (C) return;
vs
if (A) return;
else if (B) return;
else if (C) return;
In my mind can be optimized in the same way already.
Originally I wrote it with a switch() which should be the best hint to the optimizer - but I got a shader compiler error about there being no such statement in GLSL. Maybe I should also split the comparisons off into a separate function for readability.
And I may be able to use some recursive macro magic to get the proper enum values into the shader string - but it's a while I've played with the C pre-processor so not 100% sure I will succeed.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1070,2019-08-04T00:47:31Z,2019-08-10T18:07:02Z,2019-08-10T18:07:14Z,MERGED,True,74,7,8,https://github.com/allefant,Fix alpha test with the GLSL version.,5,[],https://github.com/liballeg/allegro5/pull/1070,https://github.com/allefant,4,https://github.com/liballeg/allegro5/pull/1070#issuecomment-518807457,"I added a commandline argument to ex_depth_mask to use the programmable pipeline. In the version using the GLSL shader it is broken. This patch fixes it so ex_depth_mask will work the same with and without the new argument:
./ex_depth_mask
./ex_depth_mask shader
The HLSL version is likely broken as well (but alpha testing may happen
outside of the shader there). I have no way to verify it.",Added the else statements in a separate function. I saw no way to use macro magic for the enums but I think it's more readable now.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1070,2019-08-04T00:47:31Z,2019-08-10T18:07:02Z,2019-08-10T18:07:14Z,MERGED,True,74,7,8,https://github.com/allefant,Fix alpha test with the GLSL version.,5,[],https://github.com/liballeg/allegro5/pull/1070,https://github.com/elias-pschernig,5,https://github.com/liballeg/allegro5/pull/1070#issuecomment-519184109,"I added a commandline argument to ex_depth_mask to use the programmable pipeline. In the version using the GLSL shader it is broken. This patch fixes it so ex_depth_mask will work the same with and without the new argument:
./ex_depth_mask
./ex_depth_mask shader
The HLSL version is likely broken as well (but alpha testing may happen
outside of the shader there). I have no way to verify it.",I guess we could always simulate a switch with an array of function pointers and have one function per comparison mode. Maybe I'll attempt that... but benchmarking glsl is hard.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1070,2019-08-04T00:47:31Z,2019-08-10T18:07:02Z,2019-08-10T18:07:14Z,MERGED,True,74,7,8,https://github.com/allefant,Fix alpha test with the GLSL version.,5,[],https://github.com/liballeg/allegro5/pull/1070,https://github.com/allefant,6,https://github.com/liballeg/allegro5/pull/1070#issuecomment-519215442,"I added a commandline argument to ex_depth_mask to use the programmable pipeline. In the version using the GLSL shader it is broken. This patch fixes it so ex_depth_mask will work the same with and without the new argument:
./ex_depth_mask
./ex_depth_mask shader
The HLSL version is likely broken as well (but alpha testing may happen
outside of the shader there). I have no way to verify it.","Hm, nope, no function pointers in GLSL. I found some references to implementing this with switch() - but it's not available in all GLSL versions. The real solution would be to re-create the shader on each al_set_render_state() call. It would be slow if someone calls it 1000ds of times per frame of course - but assuming the alpha function is only changed once or a handful of times it clearly would be best.
It means we'd need a new subsystem in Allegro to dynamically create shaders and probably also some sort of shader cache so we don't recompile from the string each time a specific version is needed.
So, for now I think the patch is fine. Hardware is good with branching if the condition doesn't change so I'm quite sure the extra if for the default case won't matter (and there already is another branch like that in the shader for texturing on/off which has the same problem).",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1070,2019-08-04T00:47:31Z,2019-08-10T18:07:02Z,2019-08-10T18:07:14Z,MERGED,True,74,7,8,https://github.com/allefant,Fix alpha test with the GLSL version.,5,[],https://github.com/liballeg/allegro5/pull/1070,https://github.com/SiegeLord,7,https://github.com/liballeg/allegro5/pull/1070#issuecomment-519318979,"I added a commandline argument to ex_depth_mask to use the programmable pipeline. In the version using the GLSL shader it is broken. This patch fixes it so ex_depth_mask will work the same with and without the new argument:
./ex_depth_mask
./ex_depth_mask shader
The HLSL version is likely broken as well (but alpha testing may happen
outside of the shader there). I have no way to verify it.","Yeah, for sure. I am certain the chain of if/else's will get compiled to efficient code. In modern games back in the day (maybe still today?) they'd make mega shaders with all sorts of control flow like this, so I'm sure the driver writers optimized for this kind of code.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1070,2019-08-04T00:47:31Z,2019-08-10T18:07:02Z,2019-08-10T18:07:14Z,MERGED,True,74,7,8,https://github.com/allefant,Fix alpha test with the GLSL version.,5,[],https://github.com/liballeg/allegro5/pull/1070,https://github.com/SiegeLord,8,https://github.com/liballeg/allegro5/pull/1070#issuecomment-520168869,"I added a commandline argument to ex_depth_mask to use the programmable pipeline. In the version using the GLSL shader it is broken. This patch fixes it so ex_depth_mask will work the same with and without the new argument:
./ex_depth_mask
./ex_depth_mask shader
The HLSL version is likely broken as well (but alpha testing may happen
outside of the shader there). I have no way to verify it.",Thanks Elias!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1071,2019-08-06T01:50:52Z,2019-08-10T18:15:45Z,2019-08-10T18:15:45Z,MERGED,True,32,6,2,https://github.com/allefant,implement ALLEGRO_FRAMELESS on Android,1,[],https://github.com/liballeg/allegro5/pull/1071,https://github.com/allefant,1,https://github.com/liballeg/allegro5/pull/1071,This should be used for #811 - same idea but this version uses the ALLEGRO_FRAMELESS flag and also will work dynamically with al_set_display_flag.,This should be used for #811 - same idea but this version uses the ALLEGRO_FRAMELESS flag and also will work dynamically with al_set_display_flag.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1071,2019-08-06T01:50:52Z,2019-08-10T18:15:45Z,2019-08-10T18:15:45Z,MERGED,True,32,6,2,https://github.com/allefant,implement ALLEGRO_FRAMELESS on Android,1,[],https://github.com/liballeg/allegro5/pull/1071,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1071#issuecomment-520169415,This should be used for #811 - same idea but this version uses the ALLEGRO_FRAMELESS flag and also will work dynamically with al_set_display_flag.,"Nice, this works great! Thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1072,2019-08-07T06:01:44Z,2019-08-07T06:16:16Z,2019-08-07T06:17:13Z,MERGED,True,4,3,1,https://github.com/SiegeLord,Fix Travis,2,[],https://github.com/liballeg/allegro5/pull/1072,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1072,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1073,2019-08-09T18:39:31Z,2019-08-10T18:09:35Z,2019-08-10T18:09:40Z,MERGED,True,2,3,1,https://github.com/allefant,fix FREEIMAGE_FOUND variable,1,[],https://github.com/liballeg/allegro5/pull/1073,https://github.com/allefant,1,https://github.com/liballeg/allegro5/pull/1073,somehow it was an advanced user setting instead of config variable,somehow it was an advanced user setting instead of config variable,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1073,2019-08-09T18:39:31Z,2019-08-10T18:09:35Z,2019-08-10T18:09:40Z,MERGED,True,2,3,1,https://github.com/allefant,fix FREEIMAGE_FOUND variable,1,[],https://github.com/liballeg/allegro5/pull/1073,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1073#issuecomment-520169013,somehow it was an advanced user setting instead of config variable,Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1074,2019-08-22T15:13:28Z,2019-08-23T03:02:39Z,2019-08-24T21:44:48Z,MERGED,True,1,0,1,https://github.com/gusnan,Include limits.h for PTHREAD_STACK_MIN,1,[],https://github.com/liballeg/allegro5/pull/1074,https://github.com/gusnan,1,https://github.com/liballeg/allegro5/pull/1074,"We get a build error on hurd in Debian, see
https://buildd.debian.org/status/fetch.php?pkg=allegro5&arch=hurd-i386&ver=2%3A5.2.5.0-1&stamp=1566474705&raw=0
for full build log.","We get a build error on hurd in Debian, see
https://buildd.debian.org/status/fetch.php?pkg=allegro5&arch=hurd-i386&ver=2%3A5.2.5.0-1&stamp=1566474705&raw=0
for full build log.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1074,2019-08-22T15:13:28Z,2019-08-23T03:02:39Z,2019-08-24T21:44:48Z,MERGED,True,1,0,1,https://github.com/gusnan,Include limits.h for PTHREAD_STACK_MIN,1,[],https://github.com/liballeg/allegro5/pull/1074,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1074#issuecomment-524154354,"We get a build error on hurd in Debian, see
https://buildd.debian.org/status/fetch.php?pkg=allegro5&arch=hurd-i386&ver=2%3A5.2.5.0-1&stamp=1566474705&raw=0
for full build log.",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1075,2019-08-26T12:57:27Z,2019-08-27T15:09:05Z,2019-08-27T15:09:23Z,MERGED,True,2,1,2,https://github.com/gusnan,No PTHREAD_STACK_MIN on Hurd,1,[],https://github.com/liballeg/allegro5/pull/1075,https://github.com/gusnan,1,https://github.com/liballeg/allegro5/pull/1075,"This patch also removes the #include <limits.h> which didn't
work - The proper fix is to simply not check for PTHREAD_STACK_MIN
on Hurd, since it's not defined, and the real minimum on Hurd
is much smaller than on Linux.
See https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=823049
for the same fix that was applied on xscreensaver.","This patch also removes the #include <limits.h> which didn't
work - The proper fix is to simply not check for PTHREAD_STACK_MIN
on Hurd, since it's not defined, and the real minimum on Hurd
is much smaller than on Linux.
See https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=823049
for the same fix that was applied on xscreensaver.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1075,2019-08-26T12:57:27Z,2019-08-27T15:09:05Z,2019-08-27T15:09:23Z,MERGED,True,2,1,2,https://github.com/gusnan,No PTHREAD_STACK_MIN on Hurd,1,[],https://github.com/liballeg/allegro5/pull/1075,https://github.com/gusnan,2,https://github.com/liballeg/allegro5/pull/1075#issuecomment-525282968,"This patch also removes the #include <limits.h> which didn't
work - The proper fix is to simply not check for PTHREAD_STACK_MIN
on Hurd, since it's not defined, and the real minimum on Hurd
is much smaller than on Linux.
See https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=823049
for the same fix that was applied on xscreensaver.","And here's the buildlog with the patch applied:
https://buildd.debian.org/status/fetch.php?pkg=allegro5&arch=hurd-i386&ver=2%3A5.2.5.0-2&stamp=1566908133&raw=0",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1075,2019-08-26T12:57:27Z,2019-08-27T15:09:05Z,2019-08-27T15:09:23Z,MERGED,True,2,1,2,https://github.com/gusnan,No PTHREAD_STACK_MIN on Hurd,1,[],https://github.com/liballeg/allegro5/pull/1075,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/1075#issuecomment-525345805,"This patch also removes the #include <limits.h> which didn't
work - The proper fix is to simply not check for PTHREAD_STACK_MIN
on Hurd, since it's not defined, and the real minimum on Hurd
is much smaller than on Linux.
See https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=823049
for the same fix that was applied on xscreensaver.","Hurd, eh? Thanks again!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1078,2019-08-28T09:58:22Z,2019-09-02T18:23:32Z,2019-09-17T19:42:56Z,MERGED,True,56,10,5,https://github.com/snoopdouglas,"Requested changes for ""Fix (complete) al_inhibit_screensaver function""",13,[],https://github.com/liballeg/allegro5/pull/1078,https://github.com/snoopdouglas,1,https://github.com/liballeg/allegro5/pull/1078,"Forked from @rmbeer's fork, have attempted to action the requested changes in #1045.
Apologies for yet another PR. Can't see a way to stack my changes onto the original; thought these changes might get merged quicker if I just opened a new one.","Forked from @rmbeer's fork, have attempted to action the requested changes in #1045.
Apologies for yet another PR. Can't see a way to stack my changes onto the original; thought these changes might get merged quicker if I just opened a new one.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1078,2019-08-28T09:58:22Z,2019-09-02T18:23:32Z,2019-09-17T19:42:56Z,MERGED,True,56,10,5,https://github.com/snoopdouglas,"Requested changes for ""Fix (complete) al_inhibit_screensaver function""",13,[],https://github.com/liballeg/allegro5/pull/1078,https://github.com/snoopdouglas,2,https://github.com/liballeg/allegro5/pull/1078#issuecomment-526136266,"Forked from @rmbeer's fork, have attempted to action the requested changes in #1045.
Apologies for yet another PR. Can't see a way to stack my changes onto the original; thought these changes might get merged quicker if I just opened a new one.","Builds are failing on Travis, but for some reason GitHub isn't warning on this: https://travis-ci.org/liballeg/allegro5/jobs/578292580
Seems we've got a function prototype that needs moving - fixing this now.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1078,2019-08-28T09:58:22Z,2019-09-02T18:23:32Z,2019-09-17T19:42:56Z,MERGED,True,56,10,5,https://github.com/snoopdouglas,"Requested changes for ""Fix (complete) al_inhibit_screensaver function""",13,[],https://github.com/liballeg/allegro5/pull/1078,https://github.com/snoopdouglas,3,https://github.com/liballeg/allegro5/pull/1078#issuecomment-526137948,"Forked from @rmbeer's fork, have attempted to action the requested changes in #1045.
Apologies for yet another PR. Can't see a way to stack my changes onto the original; thought these changes might get merged quicker if I just opened a new one.","Done. Let me know if you'd like the prototype (xglx_inhibit_screensaver) moved closer to the dependent method  (xglx_shutdown_system). Other than that, things look good from my end.
Build: https://travis-ci.org/liballeg/allegro5/builds/578296403",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1078,2019-08-28T09:58:22Z,2019-09-02T18:23:32Z,2019-09-17T19:42:56Z,MERGED,True,56,10,5,https://github.com/snoopdouglas,"Requested changes for ""Fix (complete) al_inhibit_screensaver function""",13,[],https://github.com/liballeg/allegro5/pull/1078,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/1078#issuecomment-527219051,"Forked from @rmbeer's fork, have attempted to action the requested changes in #1045.
Apologies for yet another PR. Can't see a way to stack my changes onto the original; thought these changes might get merged quicker if I just opened a new one.",Looks great! Thanks a lot for picking this up and making it good.,True,{'HOORAY': ['https://github.com/snoopdouglas']}
liballeg/allegro5,https://github.com/liballeg/allegro5,1078,2019-08-28T09:58:22Z,2019-09-02T18:23:32Z,2019-09-17T19:42:56Z,MERGED,True,56,10,5,https://github.com/snoopdouglas,"Requested changes for ""Fix (complete) al_inhibit_screensaver function""",13,[],https://github.com/liballeg/allegro5/pull/1078,https://github.com/rmbeer,5,https://github.com/liballeg/allegro5/pull/1078#issuecomment-532371617,"Forked from @rmbeer's fork, have attempted to action the requested changes in #1045.
Apologies for yet another PR. Can't see a way to stack my changes onto the original; thought these changes might get merged quicker if I just opened a new one.","At some point this has been totally unused, nothing seems to work for X11 and the time has come to play dbus for sure. This problem a few months ago that I realized, but I was thinking about how to raise or solve the problem. It seems to work when the time is specified between 0 < X <= 600 seconds, for the rest no matter what you do it returns to 600 seconds.
It is too inconvenient to add libdbus or libdl, it only seems to induce garbage codes. Perhaps a better option is to include functions that work with static/dynamic libraries as a new feature and the rest to use based on these functions. Although at this point I can only work with linux.
And be careful what you say, the great Microsoft looks at you.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1080,2019-09-02T20:35:43Z,2019-09-03T05:14:30Z,2019-09-03T05:14:30Z,MERGED,True,185,425,13,https://github.com/SiegeLord,Python3,3,[],https://github.com/liballeg/allegro5/pull/1080,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1080,"This mostly involved switching 'prints' to the function syntax, but in make_converters.py this process revealed a bug where the generated code depended on the iteration order of a dictionary. While debugging that I refactored the code a tiny bit; either way, right now it generates the same code as the Python2 version.
Along the way I noticed some old + unused Python files, which I just deleted.
Fixes #1079.","This mostly involved switching 'prints' to the function syntax, but in make_converters.py this process revealed a bug where the generated code depended on the iteration order of a dictionary. While debugging that I refactored the code a tiny bit; either way, right now it generates the same code as the Python2 version.
Along the way I noticed some old + unused Python files, which I just deleted.
Fixes #1079.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1081,2019-09-07T01:03:56Z,2019-09-21T17:38:36Z,2019-09-21T17:38:41Z,MERGED,True,5,0,2,https://github.com/dos1,Fix building for GNU/Linux without GNU extensions enabled,1,[],https://github.com/liballeg/allegro5/pull/1081,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/1081,"GCC doesn't define alloca, and timerclear isn't defined when compiling in standards mode that disables GNU extensions.","GCC doesn't define alloca, and timerclear isn't defined when compiling in standards mode that disables GNU extensions.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1081,2019-09-07T01:03:56Z,2019-09-21T17:38:36Z,2019-09-21T17:38:41Z,MERGED,True,5,0,2,https://github.com/dos1,Fix building for GNU/Linux without GNU extensions enabled,1,[],https://github.com/liballeg/allegro5/pull/1081,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1081#issuecomment-533816438,"GCC doesn't define alloca, and timerclear isn't defined when compiling in standards mode that disables GNU extensions.",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1082,2019-09-07T23:26:26Z,2019-09-21T17:44:21Z,2019-09-21T17:44:21Z,MERGED,True,15,4,5,https://github.com/allefant,"the alpha test commit broke GLES, this fixes it",3,[],https://github.com/liballeg/allegro5/pull/1082,https://github.com/allefant,1,https://github.com/liballeg/allegro5/pull/1082,There is a bit of a chicken and egg problem - we need to call al_set_target_bitmap first because setting the shader requires the display. But we need to do the setup after setting the shader.,There is a bit of a chicken and egg problem - we need to call al_set_target_bitmap first because setting the shader requires the display. But we need to do the setup after setting the shader.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1082,2019-09-07T23:26:26Z,2019-09-21T17:44:21Z,2019-09-21T17:44:21Z,MERGED,True,15,4,5,https://github.com/allefant,"the alpha test commit broke GLES, this fixes it",3,[],https://github.com/liballeg/allegro5/pull/1082,https://github.com/allefant,2,https://github.com/liballeg/allegro5/pull/1082#issuecomment-529161354,There is a bit of a chicken and egg problem - we need to call al_set_target_bitmap first because setting the shader requires the display. But we need to do the setup after setting the shader.,"Maybe a better solution would be to simply initialize the uniform to have alpha testing disabled - however uniforms can only be initialized in GLES >= 1.2. Not that it should be a problem.
I basically decided to skip adding a separate uniform for turning alpha testing on/off since setting the alpha test function to ALWAYS has the same effect as turning it off - but since the value 0 means NEVER by default this new shader will not render anything at all. So with normal OpenGL, the problem only appears if PROGRAMMABLE_PIPELINE is used and no calls to al_set_render_state are made. The default is not to use the programmable pipeline so it managed to escape my (much too limited) testing :/",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1082,2019-09-07T23:26:26Z,2019-09-21T17:44:21Z,2019-09-21T17:44:21Z,MERGED,True,15,4,5,https://github.com/allefant,"the alpha test commit broke GLES, this fixes it",3,[],https://github.com/liballeg/allegro5/pull/1082,https://github.com/allefant,3,https://github.com/liballeg/allegro5/pull/1082#issuecomment-529164336,There is a bit of a chicken and egg problem - we need to call al_set_target_bitmap first because setting the shader requires the display. But we need to do the setup after setting the shader.,"I fixed it in a different way now, adding another uniform. This more directly mirrors the alpha test API and is probably how I should have done it to begin with. This way the uniform is initialized to false and the shader will work as expected.
The original fix had the problems that any call to al_use_shader() would reset the behavior to not drawing anything.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1082,2019-09-07T23:26:26Z,2019-09-21T17:44:21Z,2019-09-21T17:44:21Z,MERGED,True,15,4,5,https://github.com/allefant,"the alpha test commit broke GLES, this fixes it",3,[],https://github.com/liballeg/allegro5/pull/1082,https://github.com/allefant,4,https://github.com/liballeg/allegro5/pull/1082#issuecomment-529204156,There is a bit of a chicken and egg problem - we need to call al_set_target_bitmap first because setting the shader requires the display. But we need to do the setup after setting the shader.,"And one last commit to make sure cases like these work:
al_set_render_state(ALLEGRO_ALPHA_TEST, true);
al_use_shader(NULL);

Passing NULL to al_use_shader will load the default shader when using programmable pipeline, and so the alpha testing uniforms have to be re-synchronized afterwards.
There is an existing TODO in _al_ogl_update_render_state about only making all the OpenGL calls when needed - I may work on that soon. As part of that will also only update the uniforms if the state is different from the default so then no extra OpenGL calls would be made.",True,{'THUMBS_UP': ['https://github.com/dos1']}
liballeg/allegro5,https://github.com/liballeg/allegro5,1082,2019-09-07T23:26:26Z,2019-09-21T17:44:21Z,2019-09-21T17:44:21Z,MERGED,True,15,4,5,https://github.com/allefant,"the alpha test commit broke GLES, this fixes it",3,[],https://github.com/liballeg/allegro5/pull/1082,https://github.com/SiegeLord,5,https://github.com/liballeg/allegro5/pull/1082#issuecomment-533816844,There is a bit of a chicken and egg problem - we need to call al_set_target_bitmap first because setting the shader requires the display. But we need to do the setup after setting the shader.,"Looks good to me, thanks Elias!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1083,2019-09-07T23:35:59Z,2019-09-21T17:47:32Z,2019-09-21T18:12:31Z,MERGED,True,36,36,1,https://github.com/dos1,iio: refine the order of image loaders,1,[],https://github.com/liballeg/allegro5/pull/1083,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/1083,"We don't want to use freeimage or android loaders in cases where we
already have some specialized ones available.","We don't want to use freeimage or android loaders in cases where we
already have some specialized ones available.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1083,2019-09-07T23:35:59Z,2019-09-21T17:47:32Z,2019-09-21T18:12:31Z,MERGED,True,36,36,1,https://github.com/dos1,iio: refine the order of image loaders,1,[],https://github.com/liballeg/allegro5/pull/1083,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1083#issuecomment-533817063,"We don't want to use freeimage or android loaders in cases where we
already have some specialized ones available.","Ok, let's merge this and see if anybody complains in which case we'll add a configuration option to control this order. Thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1083,2019-09-07T23:35:59Z,2019-09-21T17:47:32Z,2019-09-21T18:12:31Z,MERGED,True,36,36,1,https://github.com/dos1,iio: refine the order of image loaders,1,[],https://github.com/liballeg/allegro5/pull/1083,https://github.com/dos1,3,https://github.com/liballeg/allegro5/pull/1083#issuecomment-533818965,"We don't want to use freeimage or android loaders in cases where we
already have some specialized ones available.","Just for the reference: freeimage taking over the loading of webp assets was breaking my game, as it wasn't properly supporting the kind of lossless files I've been using :P",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1084,2019-09-10T19:08:11Z,2020-10-27T06:12:55Z,2020-10-27T06:12:55Z,CLOSED,False,10,0,1,https://github.com/vicroms,Add instructions to install Allegro using vcpkg,1,[],https://github.com/liballeg/allegro5/pull/1084,https://github.com/vicroms,1,https://github.com/liballeg/allegro5/pull/1084,"Vcpkg is a C++ library manager that is able to build and install Allegro and its dependencies using a single line command:
vcpkg install allegro5
This PR adds instructions on how to acquire Allegro using vcpkg with the purpose of making it easier for users to install and use Allegro.","Vcpkg is a C++ library manager that is able to build and install Allegro and its dependencies using a single line command:
vcpkg install allegro5
This PR adds instructions on how to acquire Allegro using vcpkg with the purpose of making it easier for users to install and use Allegro.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1084,2019-09-10T19:08:11Z,2020-10-27T06:12:55Z,2020-10-27T06:12:55Z,CLOSED,False,10,0,1,https://github.com/vicroms,Add instructions to install Allegro using vcpkg,1,[],https://github.com/liballeg/allegro5/pull/1084,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1084#issuecomment-533817204,"Vcpkg is a C++ library manager that is able to build and install Allegro and its dependencies using a single line command:
vcpkg install allegro5
This PR adds instructions on how to acquire Allegro using vcpkg with the purpose of making it easier for users to install and use Allegro.",Thanks! I don't know if the readme is the right location for this; could I convince you to add this to the wiki instead? https://github.com/liballeg/allegro_wiki/wiki/Quickstart,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1084,2019-09-10T19:08:11Z,2020-10-27T06:12:55Z,2020-10-27T06:12:55Z,CLOSED,False,10,0,1,https://github.com/vicroms,Add instructions to install Allegro using vcpkg,1,[],https://github.com/liballeg/allegro5/pull/1084,https://github.com/guilt,3,https://github.com/liballeg/allegro5/pull/1084#issuecomment-544218760,"Vcpkg is a C++ library manager that is able to build and install Allegro and its dependencies using a single line command:
vcpkg install allegro5
This PR adds instructions on how to acquire Allegro using vcpkg with the purpose of making it easier for users to install and use Allegro.","I think it's handy for a new dev to see that file there, as opposed to look for it in other places. The README also points people to precompiled binaries and what not :)
That README reflected the wisdom back in the day, where package managers were scarce. But the new flow seems to be quite productive, IMHO.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1085,2019-09-17T21:39:28Z,2019-09-17T21:39:53Z,2019-09-17T21:40:07Z,CLOSED,False,61,23,1,https://github.com/EdgarReynaldo,update,7,[],https://github.com/liballeg/allegro5/pull/1085,https://github.com/EdgarReynaldo,1,https://github.com/liballeg/allegro5/pull/1085,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1085,2019-09-17T21:39:28Z,2019-09-17T21:39:53Z,2019-09-17T21:40:07Z,CLOSED,False,61,23,1,https://github.com/EdgarReynaldo,update,7,[],https://github.com/liballeg/allegro5/pull/1085,https://github.com/EdgarReynaldo,2,https://github.com/liballeg/allegro5/pull/1085#issuecomment-532413035,,Can't GIT my head straight,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1086,2019-10-01T11:45:25Z,2019-10-01T11:45:39Z,2019-10-01T11:45:39Z,CLOSED,False,4635,2055,156,https://github.com/kwellwood,Pull from origin,166,[],https://github.com/liballeg/allegro5/pull/1086,https://github.com/kwellwood,1,https://github.com/liballeg/allegro5/pull/1086,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1089,2019-10-14T05:15:31Z,2019-10-20T04:06:15Z,2019-10-20T04:06:15Z,MERGED,True,105,45,15,https://github.com/SiegeLord,Move the time routines into the system driver.,1,[],https://github.com/liballeg/allegro5/pull/1089,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1089,"This simplifies the implementation of new drivers, and fixes the
oddities with doc generation.
First steps towards fixing #996.","This simplifies the implementation of new drivers, and fixes the
oddities with doc generation.
First steps towards fixing #996.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1092,2019-10-20T19:10:16Z,2019-10-23T01:49:09Z,2019-10-23T01:49:19Z,MERGED,True,1,1,1,https://github.com/zachs18,Fix regex on line 65 of generate_python_ctypes.py,1,[],https://github.com/liballeg/allegro5/pull/1092,https://github.com/zachs18,1,https://github.com/liballeg/allegro5/pull/1092,"The previous regex on line 65 r""\bstruct|union\b"" matches ""struct"" at the beginning of a word or ""union"" at the end of a word (e.g. it matches twice on ""structured reunion"" and re.sub will give ""ured re"").
The proposed regex r""\b(struct|union)\b"" matches ""struct"" or ""union"" as a whole word only.","The previous regex on line 65 r""\bstruct|union\b"" matches ""struct"" at the beginning of a word or ""union"" at the end of a word (e.g. it matches twice on ""structured reunion"" and re.sub will give ""ured re"").
The proposed regex r""\b(struct|union)\b"" matches ""struct"" or ""union"" as a whole word only.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1092,2019-10-20T19:10:16Z,2019-10-23T01:49:09Z,2019-10-23T01:49:19Z,MERGED,True,1,1,1,https://github.com/zachs18,Fix regex on line 65 of generate_python_ctypes.py,1,[],https://github.com/liballeg/allegro5/pull/1092,https://github.com/elias-pschernig,2,https://github.com/liballeg/allegro5/pull/1092#issuecomment-544323124,"The previous regex on line 65 r""\bstruct|union\b"" matches ""struct"" at the beginning of a word or ""union"" at the end of a word (e.g. it matches twice on ""structured reunion"" and re.sub will give ""ured re"").
The proposed regex r""\b(struct|union)\b"" matches ""struct"" or ""union"" as a whole word only.","Good catch! I tried with and without this applied and the generated allegro.py is identical, so I assume this never actually encountered one of the cases where it would fail?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1092,2019-10-20T19:10:16Z,2019-10-23T01:49:09Z,2019-10-23T01:49:19Z,MERGED,True,1,1,1,https://github.com/zachs18,Fix regex on line 65 of generate_python_ctypes.py,1,[],https://github.com/liballeg/allegro5/pull/1092,https://github.com/zachs18,3,https://github.com/liballeg/allegro5/pull/1092#issuecomment-544763911,"The previous regex on line 65 r""\bstruct|union\b"" matches ""struct"" at the beginning of a word or ""union"" at the end of a word (e.g. it matches twice on ""structured reunion"" and re.sub will give ""ured re"").
The proposed regex r""\b(struct|union)\b"" matches ""struct"" or ""union"" as a whole word only.","Yeah, I think the original regex would only fail if it encountered a struct or union with a name starting with ""struct"" and/or ending with ""union"". There aren't any currently (and it's unlikely there will be), so the output is the same.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1092,2019-10-20T19:10:16Z,2019-10-23T01:49:09Z,2019-10-23T01:49:19Z,MERGED,True,1,1,1,https://github.com/zachs18,Fix regex on line 65 of generate_python_ctypes.py,1,[],https://github.com/liballeg/allegro5/pull/1092,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/1092#issuecomment-545227291,"The previous regex on line 65 r""\bstruct|union\b"" matches ""struct"" at the beginning of a word or ""union"" at the end of a word (e.g. it matches twice on ""structured reunion"" and re.sub will give ""ured re"").
The proposed regex r""\b(struct|union)\b"" matches ""struct"" or ""union"" as a whole word only.",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1093,2019-10-20T23:43:17Z,2019-10-22T05:18:10Z,2019-10-22T05:18:11Z,MERGED,True,1,1,1,https://github.com/elias-pschernig,fix mp3 files with multiple channels,1,[],https://github.com/liballeg/allegro5/pull/1093,https://github.com/elias-pschernig,1,https://github.com/liballeg/allegro5/pull/1093,"I tested adding some sounds from this pack to my game, and since we now support mp3 just used the mp3 files as is: https://opengameart.org/content/monster-and-creatures-sound-effects-pack-001
The files play fine, however once Allegro is done playing any of them it crashes. Turns out there is some kind of miscalculation for the sample length. This PR fixes it for me but someone who knows MiniMp3 should double check.","I tested adding some sounds from this pack to my game, and since we now support mp3 just used the mp3 files as is: https://opengameart.org/content/monster-and-creatures-sound-effects-pack-001
The files play fine, however once Allegro is done playing any of them it crashes. Turns out there is some kind of miscalculation for the sample length. This PR fixes it for me but someone who knows MiniMp3 should double check.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1093,2019-10-20T23:43:17Z,2019-10-22T05:18:10Z,2019-10-22T05:18:11Z,MERGED,True,1,1,1,https://github.com/elias-pschernig,fix mp3 files with multiple channels,1,[],https://github.com/liballeg/allegro5/pull/1093,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1093#issuecomment-544808284,"I tested adding some sounds from this pack to my game, and since we now support mp3 just used the mp3 files as is: https://opengameart.org/content/monster-and-creatures-sound-effects-pack-001
The files play fine, however once Allegro is done playing any of them it crashes. Turns out there is some kind of miscalculation for the sample length. This PR fixes it for me but someone who knows MiniMp3 should double check.","That looks right, judging by the minimp3 source: https://github.com/lieff/minimp3/blob/master/minimp3_ex.h#L115,L120
Thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1094,2019-10-24T21:00:59Z,2019-11-02T18:34:40Z,2019-11-02T18:34:40Z,MERGED,True,4,2,2,https://github.com/allefant,fix osx catalina,2,[],https://github.com/liballeg/allegro5/pull/1094,https://github.com/allefant,1,https://github.com/liballeg/allegro5/pull/1094,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1094,2019-10-24T21:00:59Z,2019-11-02T18:34:40Z,2019-11-02T18:34:40Z,MERGED,True,4,2,2,https://github.com/allefant,fix osx catalina,2,[],https://github.com/liballeg/allegro5/pull/1094,https://github.com/allefant,2,https://github.com/liballeg/allegro5/pull/1094#issuecomment-546101840,,"Unfortunately could not find any documentation on what the update() call is supposed to do exactly, but the skater demo works again with this on OSX Catalina, including window resizing.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1094,2019-10-24T21:00:59Z,2019-11-02T18:34:40Z,2019-11-02T18:34:40Z,MERGED,True,4,2,2,https://github.com/allefant,fix osx catalina,2,[],https://github.com/liballeg/allegro5/pull/1094,https://github.com/elias-pschernig,3,https://github.com/liballeg/allegro5/pull/1094#issuecomment-546134897,,"Oh, and I forgot to mention, this also places the activateIgnoringOtherApps call on the main thread - which turned out to be just a harmless warning, but is still the right thing to do.
Anyway, issue #1091 seems to be fixed with this, unless we discover the original purpose of the update() call.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1094,2019-10-24T21:00:59Z,2019-11-02T18:34:40Z,2019-11-02T18:34:40Z,MERGED,True,4,2,2,https://github.com/allefant,fix osx catalina,2,[],https://github.com/liballeg/allegro5/pull/1094,https://github.com/elias-pschernig,4,https://github.com/liballeg/allegro5/pull/1094#issuecomment-546380961,,"Well, after figuring out the difference in objective C between @selector(update) and @selector(update:) it now does call update again, from the main thread. Should be 100% identical to before now, just works in Catalina.",True,{'HOORAY': ['https://github.com/jozanza']}
liballeg/allegro5,https://github.com/liballeg/allegro5,1094,2019-10-24T21:00:59Z,2019-11-02T18:34:40Z,2019-11-02T18:34:40Z,MERGED,True,4,2,2,https://github.com/allefant,fix osx catalina,2,[],https://github.com/liballeg/allegro5/pull/1094,https://github.com/djn658,5,https://github.com/liballeg/allegro5/pull/1094#issuecomment-547608879,,"Thank you very much! It works now. However, the display window cannot be selected. Do you happen to know how to fix it? @allefant",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1094,2019-10-24T21:00:59Z,2019-11-02T18:34:40Z,2019-11-02T18:34:40Z,MERGED,True,4,2,2,https://github.com/allefant,fix osx catalina,2,[],https://github.com/liballeg/allegro5/pull/1094,https://github.com/mbkorecki,6,https://github.com/liballeg/allegro5/pull/1094#issuecomment-549047386,,Thanks a lot. It works for me as well.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1094,2019-10-24T21:00:59Z,2019-11-02T18:34:40Z,2019-11-02T18:34:40Z,MERGED,True,4,2,2,https://github.com/allefant,fix osx catalina,2,[],https://github.com/liballeg/allegro5/pull/1094,https://github.com/SiegeLord,7,https://github.com/liballeg/allegro5/pull/1094#issuecomment-549069612,,"Thanks for all the testing everyone, and Elias for writing this!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1095,2019-10-25T19:01:37Z,2019-11-12T03:21:43Z,2019-11-12T03:21:43Z,MERGED,True,8,1,1,https://github.com/elias-pschernig,Xcode in osx,2,[],https://github.com/liballeg/allegro5/pull/1095,https://github.com/elias-pschernig,1,https://github.com/liballeg/allegro5/pull/1095,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1095,2019-10-25T19:01:37Z,2019-11-12T03:21:43Z,2019-11-12T03:21:43Z,MERGED,True,8,1,1,https://github.com/elias-pschernig,Xcode in osx,2,[],https://github.com/liballeg/allegro5/pull/1095,https://github.com/mbkorecki,2,https://github.com/liballeg/allegro5/pull/1095#issuecomment-549073951,,It works for me as described.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1095,2019-10-25T19:01:37Z,2019-11-12T03:21:43Z,2019-11-12T03:21:43Z,MERGED,True,8,1,1,https://github.com/elias-pschernig,Xcode in osx,2,[],https://github.com/liballeg/allegro5/pull/1095,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/1095#issuecomment-552716793,,"Lol, that's how I always built it... didn't know other ways worked. Thanks Elias.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1096,2019-11-11T17:58:49Z,2019-11-12T03:20:49Z,2019-11-12T03:20:49Z,MERGED,True,9,14,7,https://github.com/dos1,Fix some compiler warnings,5,[],https://github.com/liballeg/allegro5/pull/1096,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/1096,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1096,2019-11-11T17:58:49Z,2019-11-12T03:20:49Z,2019-11-12T03:20:49Z,MERGED,True,9,14,7,https://github.com/dos1,Fix some compiler warnings,5,[],https://github.com/liballeg/allegro5/pull/1096,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1096#issuecomment-552716641,,"Nice, thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1101,2019-12-06T13:20:31Z,2019-12-07T08:49:20Z,2019-12-15T03:05:44Z,MERGED,True,118,0,20,https://github.com/MarkOates,"Add ""al_is_*_addon_initialized()"" for acodec, image, font, and ttf addons",10,[],https://github.com/liballeg/allegro5/pull/1101,https://github.com/MarkOates,1,https://github.com/liballeg/allegro5/pull/1101,"Problem
Hello Allegro :)
I have some program components that require addons to be initialized, but there's no indication if initialization has been overlooked other than a segfault during runtime when calling the addon functions.
One possible solution is to trigger initialization inside my components themselves, but this is not a good idea and in some cases is dependent on allegro initialization as well.  Initialization as a side-effect is not great here, and should be handled outside the component regardless.
A better solution is to check for initialization of the dependent addon within the component, and output an error message or raise an exception, but Allegro currently doesn't have initialization checks for some addons.  One does exist for audio ""install"", however.
Solution
Add functions al_is_*_addon_initialized for checking initialization.
I've also added doc listings.  I originally set out to only add it to the image addon, but just went ahead and added checks for all of them.  Acodec required the addition of a global static bool, while the others already had them.
The following addons require initialization and do not currently have checks in master:

acodec
font
ttf
image i/o
native dialog
primitives
video streaming

Tests
I'm not sure if there are any test, are there places for tests for these?","Problem
Hello Allegro :)
I have some program components that require addons to be initialized, but there's no indication if initialization has been overlooked other than a segfault during runtime when calling the addon functions.
One possible solution is to trigger initialization inside my components themselves, but this is not a good idea and in some cases is dependent on allegro initialization as well.  Initialization as a side-effect is not great here, and should be handled outside the component regardless.
A better solution is to check for initialization of the dependent addon within the component, and output an error message or raise an exception, but Allegro currently doesn't have initialization checks for some addons.  One does exist for audio ""install"", however.
Solution
Add functions al_is_*_addon_initialized for checking initialization.
I've also added doc listings.  I originally set out to only add it to the image addon, but just went ahead and added checks for all of them.  Acodec required the addition of a global static bool, while the others already had them.
The following addons require initialization and do not currently have checks in master:

acodec
font
ttf
image i/o
native dialog
primitives
video streaming

Tests
I'm not sure if there are any test, are there places for tests for these?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1101,2019-12-06T13:20:31Z,2019-12-07T08:49:20Z,2019-12-15T03:05:44Z,MERGED,True,118,0,20,https://github.com/MarkOates,"Add ""al_is_*_addon_initialized()"" for acodec, image, font, and ttf addons",10,[],https://github.com/liballeg/allegro5/pull/1101,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1101#issuecomment-562738301,"Problem
Hello Allegro :)
I have some program components that require addons to be initialized, but there's no indication if initialization has been overlooked other than a segfault during runtime when calling the addon functions.
One possible solution is to trigger initialization inside my components themselves, but this is not a good idea and in some cases is dependent on allegro initialization as well.  Initialization as a side-effect is not great here, and should be handled outside the component regardless.
A better solution is to check for initialization of the dependent addon within the component, and output an error message or raise an exception, but Allegro currently doesn't have initialization checks for some addons.  One does exist for audio ""install"", however.
Solution
Add functions al_is_*_addon_initialized for checking initialization.
I've also added doc listings.  I originally set out to only add it to the image addon, but just went ahead and added checks for all of them.  Acodec required the addition of a global static bool, while the others already had them.
The following addons require initialization and do not currently have checks in master:

acodec
font
ttf
image i/o
native dialog
primitives
video streaming

Tests
I'm not sure if there are any test, are there places for tests for these?","This looks excellent, thanks Mark! Sadly, we don't have a setup to set changes like these, but the Travis tests show that this at least doesn't crash our rendering tests.
One small thing I'll ask you to modify is to add some 'Since: 5.2.6' lines in the documentation for these new functions. See here, for an example: 
  
    
      allegro5/docs/src/refman/graphics.txt
    
    
         Line 57
      in
      50460b7
    
  
  
    

        
          
           Since: 5.1.12",True,{'THUMBS_UP': ['https://github.com/MarkOates']}
liballeg/allegro5,https://github.com/liballeg/allegro5,1101,2019-12-06T13:20:31Z,2019-12-07T08:49:20Z,2019-12-15T03:05:44Z,MERGED,True,118,0,20,https://github.com/MarkOates,"Add ""al_is_*_addon_initialized()"" for acodec, image, font, and ttf addons",10,[],https://github.com/liballeg/allegro5/pull/1101,https://github.com/MarkOates,3,https://github.com/liballeg/allegro5/pull/1101#issuecomment-562743956,"Problem
Hello Allegro :)
I have some program components that require addons to be initialized, but there's no indication if initialization has been overlooked other than a segfault during runtime when calling the addon functions.
One possible solution is to trigger initialization inside my components themselves, but this is not a good idea and in some cases is dependent on allegro initialization as well.  Initialization as a side-effect is not great here, and should be handled outside the component regardless.
A better solution is to check for initialization of the dependent addon within the component, and output an error message or raise an exception, but Allegro currently doesn't have initialization checks for some addons.  One does exist for audio ""install"", however.
Solution
Add functions al_is_*_addon_initialized for checking initialization.
I've also added doc listings.  I originally set out to only add it to the image addon, but just went ahead and added checks for all of them.  Acodec required the addition of a global static bool, while the others already had them.
The following addons require initialization and do not currently have checks in master:

acodec
font
ttf
image i/o
native dialog
primitives
video streaming

Tests
I'm not sure if there are any test, are there places for tests for these?",Awesome!  I've added Since: 5.2.6 to all of the new doc entries. ✅,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1101,2019-12-06T13:20:31Z,2019-12-07T08:49:20Z,2019-12-15T03:05:44Z,MERGED,True,118,0,20,https://github.com/MarkOates,"Add ""al_is_*_addon_initialized()"" for acodec, image, font, and ttf addons",10,[],https://github.com/liballeg/allegro5/pull/1101,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/1101#issuecomment-562830016,"Problem
Hello Allegro :)
I have some program components that require addons to be initialized, but there's no indication if initialization has been overlooked other than a segfault during runtime when calling the addon functions.
One possible solution is to trigger initialization inside my components themselves, but this is not a good idea and in some cases is dependent on allegro initialization as well.  Initialization as a side-effect is not great here, and should be handled outside the component regardless.
A better solution is to check for initialization of the dependent addon within the component, and output an error message or raise an exception, but Allegro currently doesn't have initialization checks for some addons.  One does exist for audio ""install"", however.
Solution
Add functions al_is_*_addon_initialized for checking initialization.
I've also added doc listings.  I originally set out to only add it to the image addon, but just went ahead and added checks for all of them.  Acodec required the addition of a global static bool, while the others already had them.
The following addons require initialization and do not currently have checks in master:

acodec
font
ttf
image i/o
native dialog
primitives
video streaming

Tests
I'm not sure if there are any test, are there places for tests for these?",Thanks a lot!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1101,2019-12-06T13:20:31Z,2019-12-07T08:49:20Z,2019-12-15T03:05:44Z,MERGED,True,118,0,20,https://github.com/MarkOates,"Add ""al_is_*_addon_initialized()"" for acodec, image, font, and ttf addons",10,[],https://github.com/liballeg/allegro5/pull/1101,https://github.com/MarkOates,5,https://github.com/liballeg/allegro5/pull/1101#issuecomment-563452707,"Problem
Hello Allegro :)
I have some program components that require addons to be initialized, but there's no indication if initialization has been overlooked other than a segfault during runtime when calling the addon functions.
One possible solution is to trigger initialization inside my components themselves, but this is not a good idea and in some cases is dependent on allegro initialization as well.  Initialization as a side-effect is not great here, and should be handled outside the component regardless.
A better solution is to check for initialization of the dependent addon within the component, and output an error message or raise an exception, but Allegro currently doesn't have initialization checks for some addons.  One does exist for audio ""install"", however.
Solution
Add functions al_is_*_addon_initialized for checking initialization.
I've also added doc listings.  I originally set out to only add it to the image addon, but just went ahead and added checks for all of them.  Acodec required the addition of a global static bool, while the others already had them.
The following addons require initialization and do not currently have checks in master:

acodec
font
ttf
image i/o
native dialog
primitives
video streaming

Tests
I'm not sure if there are any test, are there places for tests for these?","Fantastic.  Thanks for merging. 🙂
What's the process at this point to creating a release?  Specifically, I'm curious how the builds get published to homebrew.  Does the version need to be explicitly published or is there an automated process?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1101,2019-12-06T13:20:31Z,2019-12-07T08:49:20Z,2019-12-15T03:05:44Z,MERGED,True,118,0,20,https://github.com/MarkOates,"Add ""al_is_*_addon_initialized()"" for acodec, image, font, and ttf addons",10,[],https://github.com/liballeg/allegro5/pull/1101,https://github.com/SiegeLord,6,https://github.com/liballeg/allegro5/pull/1101#issuecomment-563902579,"Problem
Hello Allegro :)
I have some program components that require addons to be initialized, but there's no indication if initialization has been overlooked other than a segfault during runtime when calling the addon functions.
One possible solution is to trigger initialization inside my components themselves, but this is not a good idea and in some cases is dependent on allegro initialization as well.  Initialization as a side-effect is not great here, and should be handled outside the component regardless.
A better solution is to check for initialization of the dependent addon within the component, and output an error message or raise an exception, but Allegro currently doesn't have initialization checks for some addons.  One does exist for audio ""install"", however.
Solution
Add functions al_is_*_addon_initialized for checking initialization.
I've also added doc listings.  I originally set out to only add it to the image addon, but just went ahead and added checks for all of them.  Acodec required the addition of a global static bool, while the others already had them.
The following addons require initialization and do not currently have checks in master:

acodec
font
ttf
image i/o
native dialog
primitives
video streaming

Tests
I'm not sure if there are any test, are there places for tests for these?","For homebrew, after the main release is done I make a pull request like Homebrew/homebrew-core#38216 and that's all. It's completely manual.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1102,2019-12-11T13:19:50Z,2019-12-12T05:07:38Z,2019-12-12T05:07:38Z,MERGED,True,3,3,3,https://github.com/kwellwood,Fix for window resizing on Windows when a menubar is visible,1,[],https://github.com/liballeg/allegro5/pull/1102,https://github.com/kwellwood,1,https://github.com/liballeg/allegro5/pull/1102,This fix enables AdjustWindowRectEx to correctly calculate the window's client area. I have tested this fix since 5.2.2 without any issues.,This fix enables AdjustWindowRectEx to correctly calculate the window's client area. I have tested this fix since 5.2.2 without any issues.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1102,2019-12-11T13:19:50Z,2019-12-12T05:07:38Z,2019-12-12T05:07:38Z,MERGED,True,3,3,3,https://github.com/kwellwood,Fix for window resizing on Windows when a menubar is visible,1,[],https://github.com/liballeg/allegro5/pull/1102,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1102#issuecomment-564851679,This fix enables AdjustWindowRectEx to correctly calculate the window's client area. I have tested this fix since 5.2.2 without any issues.,"Looks good to me, thanks a lot!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1103,2019-12-15T04:44:55Z,2021-05-15T06:44:45Z,2021-05-15T06:44:45Z,CLOSED,False,5,2,3,https://github.com/SiegeLord,al_is_image_addon_initialized + Travis woes,4,[],https://github.com/liballeg/allegro5/pull/1103,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1103,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1106,2020-01-02T07:55:54Z,,2020-01-03T00:11:08Z,OPEN,False,89,4,2,https://github.com/saisilcastro,Change allegro graphic to full screen in execution time,2,[],https://github.com/liballeg/allegro5/pull/1106,https://github.com/saisilcastro,1,https://github.com/liballeg/allegro5/pull/1106,"I am updating my engine while developing my game menu. I use two libraries to manipulate the engine. One of them is allegro 5.2.5. I am trying to change the graphic mode in execution time but until now I could not. I've tried to use al_toggle_display_flag, al_set_display_flag and other functions, but none of them is able to change from window screen to fullscreen and vice-versa.
It could be really good to have a function like al_set_window_fullscreen which could be able to change the window mode in execution time.
Thanks for the attention.
Lísias de Castro Martins","I am updating my engine while developing my game menu. I use two libraries to manipulate the engine. One of them is allegro 5.2.5. I am trying to change the graphic mode in execution time but until now I could not. I've tried to use al_toggle_display_flag, al_set_display_flag and other functions, but none of them is able to change from window screen to fullscreen and vice-versa.
It could be really good to have a function like al_set_window_fullscreen which could be able to change the window mode in execution time.
Thanks for the attention.
Lísias de Castro Martins",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1106,2020-01-02T07:55:54Z,,2020-01-03T00:11:08Z,OPEN,False,89,4,2,https://github.com/saisilcastro,Change allegro graphic to full screen in execution time,2,[],https://github.com/liballeg/allegro5/pull/1106,https://github.com/elias-pschernig,2,https://github.com/liballeg/allegro5/pull/1106#issuecomment-570212321,"I am updating my engine while developing my game menu. I use two libraries to manipulate the engine. One of them is allegro 5.2.5. I am trying to change the graphic mode in execution time but until now I could not. I've tried to use al_toggle_display_flag, al_set_display_flag and other functions, but none of them is able to change from window screen to fullscreen and vice-versa.
It could be really good to have a function like al_set_window_fullscreen which could be able to change the window mode in execution time.
Thanks for the attention.
Lísias de Castro Martins","You can already use this:
al_set_display_flag(display, ALLEGRO_FULLSCREEN_WINDOW, true)
However it will not change the monitor resolution, just set your window to be fullscreen. I agree that a way to modify the monitor resolution without recreating the window would also be useful (even if internally it will have to re-create the window anyway).",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1106,2020-01-02T07:55:54Z,,2020-01-03T00:11:08Z,OPEN,False,89,4,2,https://github.com/saisilcastro,Change allegro graphic to full screen in execution time,2,[],https://github.com/liballeg/allegro5/pull/1106,https://github.com/saisilcastro,3,https://github.com/liballeg/allegro5/pull/1106#issuecomment-570409310,"I am updating my engine while developing my game menu. I use two libraries to manipulate the engine. One of them is allegro 5.2.5. I am trying to change the graphic mode in execution time but until now I could not. I've tried to use al_toggle_display_flag, al_set_display_flag and other functions, but none of them is able to change from window screen to fullscreen and vice-versa.
It could be really good to have a function like al_set_window_fullscreen which could be able to change the window mode in execution time.
Thanks for the attention.
Lísias de Castro Martins","I have tried this one. But the screen does not keep centered compared to the ""real"" fullscreen mode neither stretch the screen in order to show the whole image ""closer"" than the higher resolution. It makes the application appearance weird. Is there some way in order to make this with this function?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1106,2020-01-02T07:55:54Z,,2020-01-03T00:11:08Z,OPEN,False,89,4,2,https://github.com/saisilcastro,Change allegro graphic to full screen in execution time,2,[],https://github.com/liballeg/allegro5/pull/1106,https://github.com/saisilcastro,4,https://github.com/liballeg/allegro5/pull/1106#issuecomment-570409832,"I am updating my engine while developing my game menu. I use two libraries to manipulate the engine. One of them is allegro 5.2.5. I am trying to change the graphic mode in execution time but until now I could not. I've tried to use al_toggle_display_flag, al_set_display_flag and other functions, but none of them is able to change from window screen to fullscreen and vice-versa.
It could be really good to have a function like al_set_window_fullscreen which could be able to change the window mode in execution time.
Thanks for the attention.
Lísias de Castro Martins","Ah, about the version, that was my mistake. I am using the 5.2.5 version, not the 5.2.4.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1107,2020-01-03T07:27:10Z,2020-01-18T18:59:17Z,2020-01-20T06:26:38Z,CLOSED,False,505,432,20,https://github.com/SiegeLord,Adds floating point coordinate mouse events.,1,[],https://github.com/liballeg/allegro5/pull/1107,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1107,"Now you can catch _FLOAT variants of mouse events which have floating
point coordinates. The regular mouse events are still emitted alongside
the new events.
I haven't added the corresponding floating point API for mouse state and
mouse warping, as it doesn't seem as urgent. We can add it later if
requested.
Fixes #1105","Now you can catch _FLOAT variants of mouse events which have floating
point coordinates. The regular mouse events are still emitted alongside
the new events.
I haven't added the corresponding floating point API for mouse state and
mouse warping, as it doesn't seem as urgent. We can add it later if
requested.
Fixes #1105",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1107,2020-01-03T07:27:10Z,2020-01-18T18:59:17Z,2020-01-20T06:26:38Z,CLOSED,False,505,432,20,https://github.com/SiegeLord,Adds floating point coordinate mouse events.,1,[],https://github.com/liballeg/allegro5/pull/1107,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1107#issuecomment-575928772,"Now you can catch _FLOAT variants of mouse events which have floating
point coordinates. The regular mouse events are still emitted alongside
the new events.
I haven't added the corresponding floating point API for mouse state and
mouse warping, as it doesn't seem as urgent. We can add it later if
requested.
Fixes #1105","Thanks Elias. I'm going to abandon this change, as it's unimplementable as is (namely, we can't reasonably produce floating point absolute coordinates). Instead, we'll add a raw-input mouse events which only send the deltas, like SDL and GLFW do.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1107,2020-01-03T07:27:10Z,2020-01-18T18:59:17Z,2020-01-20T06:26:38Z,CLOSED,False,505,432,20,https://github.com/SiegeLord,Adds floating point coordinate mouse events.,1,[],https://github.com/liballeg/allegro5/pull/1107,https://github.com/SergioMayo,3,https://github.com/liballeg/allegro5/pull/1107#issuecomment-576123163,"Now you can catch _FLOAT variants of mouse events which have floating
point coordinates. The regular mouse events are still emitted alongside
the new events.
I haven't added the corresponding floating point API for mouse state and
mouse warping, as it doesn't seem as urgent. We can add it later if
requested.
Fixes #1105","sorry for my bad english
I didn't understand what was done:
will the mouse continue to return only integers (int)?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1107,2020-01-03T07:27:10Z,2020-01-18T18:59:17Z,2020-01-20T06:26:38Z,CLOSED,False,505,432,20,https://github.com/SiegeLord,Adds floating point coordinate mouse events.,1,[],https://github.com/liballeg/allegro5/pull/1107,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/1107#issuecomment-576125846,"Now you can catch _FLOAT variants of mouse events which have floating
point coordinates. The regular mouse events are still emitted alongside
the new events.
I haven't added the corresponding floating point API for mouse state and
mouse warping, as it doesn't seem as urgent. We can add it later if
requested.
Fixes #1105","There's no code for this at the moment, but what we'll do is add a new event, called ALLEGRO_EVENT_RAW_MOUSE_AXES, which will still have int dx and dy like the regular ALLEGRO_EVENT_MOUSE_AXES, but they'll be higher resolution, so you can detect smaller mouse movements. You'll still do float_dx = scaling_factor * event.raw_mouse.dx, but it'll be more precise.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1108,2020-01-19T00:06:07Z,2020-01-19T00:06:59Z,2020-01-19T00:06:59Z,MERGED,True,101,30,5,https://github.com/SiegeLord,Add GitHub actions,2,[],https://github.com/liballeg/allegro5/pull/1108,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1108,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1109,2020-01-19T00:11:40Z,2020-01-19T00:29:11Z,2020-01-19T00:29:11Z,MERGED,True,5,1,1,https://github.com/SiegeLord,Test the Python wrapper.,2,[],https://github.com/liballeg/allegro5/pull/1109,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1109,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1110,2020-01-19T00:39:30Z,,2020-01-22T05:20:28Z,OPEN,False,28,1,1,https://github.com/SiegeLord,Setup Windows Github CI.,5,[],https://github.com/liballeg/allegro5/pull/1110,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1110,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1110,2020-01-19T00:39:30Z,,2020-01-22T05:20:28Z,OPEN,False,28,1,1,https://github.com/SiegeLord,Setup Windows Github CI.,5,[],https://github.com/liballeg/allegro5/pull/1110,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1110#issuecomment-577004466,,"The issue in this PR is that we need a DX9 SDK installed. Honestly, I'd rather make Allegro not need DX9 SDK rather than figure out how to get DX9 SDK to install on the CI servers.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1112,2020-01-20T02:39:13Z,2020-01-20T02:53:41Z,2020-01-20T02:53:41Z,CLOSED,False,3,24,1,https://github.com/SiegeLord,Fix OSX Travis tests.,1,[],https://github.com/liballeg/allegro5/pull/1112,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1112,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1113,2020-01-20T02:44:52Z,2020-01-20T02:53:06Z,2020-01-20T02:53:06Z,MERGED,True,21,1,1,https://github.com/SiegeLord,Setup OSX CI.,1,[],https://github.com/liballeg/allegro5/pull/1113,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1113,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1114,2020-01-22T04:23:41Z,2020-02-02T05:13:41Z,2020-02-02T05:13:42Z,MERGED,True,159,58,3,https://github.com/SiegeLord,Fix conversion of ALLEGRO_USTR to wchar.,5,[],https://github.com/liballeg/allegro5/pull/1114,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1114,"This fixes file patterns in the native dialog addon, which had embedded
NULs.","This fixes file patterns in the native dialog addon, which had embedded
NULs.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1114,2020-01-22T04:23:41Z,2020-02-02T05:13:41Z,2020-02-02T05:13:42Z,MERGED,True,159,58,3,https://github.com/SiegeLord,Fix conversion of ALLEGRO_USTR to wchar.,5,[],https://github.com/liballeg/allegro5/pull/1114,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1114#issuecomment-581070734,"This fixes file patterns in the native dialog addon, which had embedded
NULs.","Good catch on the zero length strings, I fixed the code. Also added the fix for the clipboard.",True,{'THUMBS_UP': ['https://github.com/pedro-w']}
liballeg/allegro5,https://github.com/liballeg/allegro5,1115,2020-02-02T20:45:00Z,2020-02-08T03:07:42Z,2020-02-08T08:44:29Z,MERGED,True,6,4,2,https://github.com/pedro-w,Move another method to the main thread,3,[],https://github.com/liballeg/allegro5/pull/1115,https://github.com/pedro-w,1,https://github.com/liballeg/allegro5/pull/1115,"setApplicationIconImage: needs to be run from the main thread (seen when running ex_icon under the debugger)
Also fixed calling activateIgnoringOtherApps: - if a method takes an argument that is not an NSObject it needs to be wrapped in an NSObject before using the performSelectorOnMainThread: mechanism.
(MacOS Mojave 10.14.6)","setApplicationIconImage: needs to be run from the main thread (seen when running ex_icon under the debugger)
Also fixed calling activateIgnoringOtherApps: - if a method takes an argument that is not an NSObject it needs to be wrapped in an NSObject before using the performSelectorOnMainThread: mechanism.
(MacOS Mojave 10.14.6)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1115,2020-02-02T20:45:00Z,2020-02-08T03:07:42Z,2020-02-08T08:44:29Z,MERGED,True,6,4,2,https://github.com/pedro-w,Move another method to the main thread,3,[],https://github.com/liballeg/allegro5/pull/1115,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1115#issuecomment-583696402,"setApplicationIconImage: needs to be run from the main thread (seen when running ex_icon under the debugger)
Also fixed calling activateIgnoringOtherApps: - if a method takes an argument that is not an NSObject it needs to be wrapped in an NSObject before using the performSelectorOnMainThread: mechanism.
(MacOS Mojave 10.14.6)",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1117,2020-02-17T18:18:58Z,2020-02-17T18:22:16Z,2020-02-17T18:22:22Z,MERGED,True,2,2,2,https://github.com/ivan-mogilko,4.4: fixed DirectInput not working under Wine,1,[],https://github.com/liballeg/allegro5/pull/1117,https://github.com/ivan-mogilko,1,https://github.com/liballeg/allegro5/pull/1117,"Problem details are here: #1116
This reverts couple of changes from 234ac0a which were not relevant to original commit, but broke DirectInput driver on Wine, because Em2 keyboard and mouse COM classes are not implemented.","Problem details are here: #1116
This reverts couple of changes from 234ac0a which were not relevant to original commit, but broke DirectInput driver on Wine, because Em2 keyboard and mouse COM classes are not implemented.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1117,2020-02-17T18:18:58Z,2020-02-17T18:22:16Z,2020-02-17T18:22:22Z,MERGED,True,2,2,2,https://github.com/ivan-mogilko,4.4: fixed DirectInput not working under Wine,1,[],https://github.com/liballeg/allegro5/pull/1117,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1117#issuecomment-587111379,"Problem details are here: #1116
This reverts couple of changes from 234ac0a which were not relevant to original commit, but broke DirectInput driver on Wine, because Em2 keyboard and mouse COM classes are not implemented.",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1118,2020-03-03T03:31:01Z,2020-03-16T01:14:28Z,2020-03-16T01:14:29Z,MERGED,True,15,15,3,https://github.com/SiegeLord,Fix PHYFS path separators.,1,[],https://github.com/liballeg/allegro5/pull/1118,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1118,"PHYSFS always uses forward slashes, which causes problems for people
that use ALLEGRO_NATIVE_PATH_SEP to handle paths while PHYFS file
interface is active. Now we fix up the separators to get that to work.","PHYSFS always uses forward slashes, which causes problems for people
that use ALLEGRO_NATIVE_PATH_SEP to handle paths while PHYFS file
interface is active. Now we fix up the separators to get that to work.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1127,2020-04-06T22:18:11Z,2020-04-27T02:38:26Z,2020-04-27T21:56:01Z,MERGED,True,1,0,1,https://github.com/morganwillcock,Specify document encoding for allegro._tx,1,[],https://github.com/liballeg/allegro5/pull/1127,https://github.com/morganwillcock,1,https://github.com/liballeg/allegro5/pull/1127,"The default encoding that texinfo uses is now UTF-8, so the document encoding needs to be specified to avoid build errors.
Encoding:
$ file docs/src/allegro._tx 
docs/src/allegro._tx: C source, ISO-8859 text

Build error:
[ 35%] Built target makedoc
[ 36%] Generating info/allegro.info
utf8 ""\xB0"" does not map to Unicode at /home/mwillcock/pkg/share/texinfo/Texinfo/ParserNonXS.pm line 1796,  line 18520.
Malformed UTF-8 character: \xb0 (unexpected continuation byte 0xb0, with no preceding start byte) in pattern match (m//) at /home/mwillcock/pkg/share/texinfo/Texinfo/ParserNonXS.pm line 3364.
Malformed UTF-8 character (fatal) at /home/mwillcock/pkg/share/texinfo/Texinfo/ParserNonXS.pm line 3364.
*** Error code 25","The default encoding that texinfo uses is now UTF-8, so the document encoding needs to be specified to avoid build errors.
Encoding:
$ file docs/src/allegro._tx 
docs/src/allegro._tx: C source, ISO-8859 text

Build error:
[ 35%] Built target makedoc
[ 36%] Generating info/allegro.info
utf8 ""\xB0"" does not map to Unicode at /home/mwillcock/pkg/share/texinfo/Texinfo/ParserNonXS.pm line 1796,  line 18520.
Malformed UTF-8 character: \xb0 (unexpected continuation byte 0xb0, with no preceding start byte) in pattern match (m//) at /home/mwillcock/pkg/share/texinfo/Texinfo/ParserNonXS.pm line 3364.
Malformed UTF-8 character (fatal) at /home/mwillcock/pkg/share/texinfo/Texinfo/ParserNonXS.pm line 3364.
*** Error code 25",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1127,2020-04-06T22:18:11Z,2020-04-27T02:38:26Z,2020-04-27T21:56:01Z,MERGED,True,1,0,1,https://github.com/morganwillcock,Specify document encoding for allegro._tx,1,[],https://github.com/liballeg/allegro5/pull/1127,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1127#issuecomment-619676807,"The default encoding that texinfo uses is now UTF-8, so the document encoding needs to be specified to avoid build errors.
Encoding:
$ file docs/src/allegro._tx 
docs/src/allegro._tx: C source, ISO-8859 text

Build error:
[ 35%] Built target makedoc
[ 36%] Generating info/allegro.info
utf8 ""\xB0"" does not map to Unicode at /home/mwillcock/pkg/share/texinfo/Texinfo/ParserNonXS.pm line 1796,  line 18520.
Malformed UTF-8 character: \xb0 (unexpected continuation byte 0xb0, with no preceding start byte) in pattern match (m//) at /home/mwillcock/pkg/share/texinfo/Texinfo/ParserNonXS.pm line 3364.
Malformed UTF-8 character (fatal) at /home/mwillcock/pkg/share/texinfo/Texinfo/ParserNonXS.pm line 3364.
*** Error code 25",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1129,2020-04-19T11:25:59Z,2020-04-27T02:52:23Z,2020-04-27T02:52:23Z,MERGED,True,58,2,4,https://github.com/pedro-w,"Improve loading of indexed, uncompressed Windows bitmaps",2,[],https://github.com/liballeg/allegro5/pull/1129,https://github.com/pedro-w,1,https://github.com/liballeg/allegro5/pull/1129,"Make sure index data is copied into the new bitmap when loading with ALLEGRO_KEEP_INDEX.
(test included)
Fixes #1128","Make sure index data is copied into the new bitmap when loading with ALLEGRO_KEEP_INDEX.
(test included)
Fixes #1128",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1129,2020-04-19T11:25:59Z,2020-04-27T02:52:23Z,2020-04-27T02:52:23Z,MERGED,True,58,2,4,https://github.com/pedro-w,"Improve loading of indexed, uncompressed Windows bitmaps",2,[],https://github.com/liballeg/allegro5/pull/1129,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1129#issuecomment-619681153,"Make sure index data is copied into the new bitmap when loading with ALLEGRO_KEEP_INDEX.
(test included)
Fixes #1128","This looks great, thanks a ton!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1143,2020-06-10T16:22:34Z,2020-06-13T18:56:40Z,2020-06-13T18:56:40Z,MERGED,True,4,1,1,https://github.com/codylico,audio: Fix edge-case looping in Ogg Vorbis stream,1,[],https://github.com/liballeg/allegro5/pull/1143,https://github.com/codylico,1,https://github.com/liballeg/allegro5/pull/1143,"When playing an Ogg Vorbis stream, the loop case is handled partially
incorrectly. The number of channels in the stream was not taken into
account when advancing the next read length to a multiple of the frame
size. This problem manifests with carefully crafted (or accidentally
input) loop points.
Enhances commit 20ed5af.","When playing an Ogg Vorbis stream, the loop case is handled partially
incorrectly. The number of channels in the stream was not taken into
account when advancing the next read length to a multiple of the frame
size. This problem manifests with carefully crafted (or accidentally
input) loop points.
Enhances commit 20ed5af.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1143,2020-06-10T16:22:34Z,2020-06-13T18:56:40Z,2020-06-13T18:56:40Z,MERGED,True,4,1,1,https://github.com/codylico,audio: Fix edge-case looping in Ogg Vorbis stream,1,[],https://github.com/liballeg/allegro5/pull/1143,https://github.com/beoran,2,https://github.com/liballeg/allegro5/pull/1143#issuecomment-643124472,"When playing an Ogg Vorbis stream, the loop case is handled partially
incorrectly. The number of channels in the stream was not taken into
account when advancing the next read length to a multiple of the frame
size. This problem manifests with carefully crafted (or accidentally
input) loop points.
Enhances commit 20ed5af.",I didn't get the chance to test this but the change is small and looks plausible.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1143,2020-06-10T16:22:34Z,2020-06-13T18:56:40Z,2020-06-13T18:56:40Z,MERGED,True,4,1,1,https://github.com/codylico,audio: Fix edge-case looping in Ogg Vorbis stream,1,[],https://github.com/liballeg/allegro5/pull/1143,https://github.com/codylico,3,https://github.com/liballeg/allegro5/pull/1143#issuecomment-643293738,"When playing an Ogg Vorbis stream, the loop case is handled partially
incorrectly. The number of channels in the stream was not taken into
account when advancing the next read length to a multiple of the frame
size. This problem manifests with carefully crafted (or accidentally
input) loop points.
Enhances commit 20ed5af.","Take as much time as you need to test it. I tested it a little myself, but there may be more cases I don't know about that the code needs to handle.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1143,2020-06-10T16:22:34Z,2020-06-13T18:56:40Z,2020-06-13T18:56:40Z,MERGED,True,4,1,1,https://github.com/codylico,audio: Fix edge-case looping in Ogg Vorbis stream,1,[],https://github.com/liballeg/allegro5/pull/1143,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/1143#issuecomment-643663590,"When playing an Ogg Vorbis stream, the loop case is handled partially
incorrectly. The number of channels in the stream was not taken into
account when advancing the next read length to a multiple of the frame
size. This problem manifests with carefully crafted (or accidentally
input) loop points.
Enhances commit 20ed5af.","This is great, the old code was horribly broken (the way you said it, and the rounding up to what it thought the frame size was wrong too), and it was easy to reproduce the clicking (which your change fixed). Thanks for fixing this!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1144,2020-06-15T07:20:28Z,2020-06-21T04:18:19Z,2020-06-21T04:18:19Z,MERGED,True,38,13,10,https://github.com/SiegeLord,Various warnings,5,[],https://github.com/liballeg/allegro5/pull/1144,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1144,Fixes #1097,Fixes #1097,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1147,2020-06-20T13:42:37Z,2020-06-20T20:00:41Z,2020-06-20T20:00:41Z,MERGED,True,1,1,1,https://github.com/ericoporto,fix wrong LC_ALL: x/xkeyboard.c Changes setlocale to  LC_CTYPE ,1,[],https://github.com/liballeg/allegro5/pull/1147,https://github.com/ericoporto,1,https://github.com/liballeg/allegro5/pull/1147,"This fixes allegro changing the locale for LC_NUMERIC and more when installing keyboard in the x platform. This is for allegro 4.
Mention in the forums: https://www.allegro.cc/forums/thread/609919
Fixed in newer allegro: 
  
    
      allegro5/src/x/xkeyboard.c
    
    
         Line 743
      in
      ce68911
    
  
  
    

        
          
           old_locale = setlocale(LC_CTYPE, NULL);","This fixes allegro changing the locale for LC_NUMERIC and more when installing keyboard in the x platform. This is for allegro 4.
Mention in the forums: https://www.allegro.cc/forums/thread/609919
Fixed in newer allegro: 
  
    
      allegro5/src/x/xkeyboard.c
    
    
         Line 743
      in
      ce68911
    
  
  
    

        
          
           old_locale = setlocale(LC_CTYPE, NULL);",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1147,2020-06-20T13:42:37Z,2020-06-20T20:00:41Z,2020-06-20T20:00:41Z,MERGED,True,1,1,1,https://github.com/ericoporto,fix wrong LC_ALL: x/xkeyboard.c Changes setlocale to  LC_CTYPE ,1,[],https://github.com/liballeg/allegro5/pull/1147,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1147#issuecomment-647039520,"This fixes allegro changing the locale for LC_NUMERIC and more when installing keyboard in the x platform. This is for allegro 4.
Mention in the forums: https://www.allegro.cc/forums/thread/609919
Fixed in newer allegro: 
  
    
      allegro5/src/x/xkeyboard.c
    
    
         Line 743
      in
      ce68911
    
  
  
    

        
          
           old_locale = setlocale(LC_CTYPE, NULL);","Seems reasonable, thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1148,2020-06-21T18:18:29Z,2020-06-22T03:13:28Z,2020-06-22T03:13:29Z,MERGED,True,1,1,1,https://github.com/ericoporto,allegro 4.4: fixes wrong assert in mouse.c in set_mouse_range,1,[],https://github.com/liballeg/allegro5/pull/1148,https://github.com/ericoporto,1,https://github.com/liballeg/allegro5/pull/1148,"minor fix for a wrong assert in the mouse.c code when setting the mouse range in set_mouse_range.
It used to do this:
ASSERT(y2 >= y2);
which doesn't make sense. To make sure the mouse boundaries are right the assert should be:
ASSERT(y2 >= y1);
for a rectangle from (x1,y1) to (x2,y2).","minor fix for a wrong assert in the mouse.c code when setting the mouse range in set_mouse_range.
It used to do this:
ASSERT(y2 >= y2);
which doesn't make sense. To make sure the mouse boundaries are right the assert should be:
ASSERT(y2 >= y1);
for a rectangle from (x1,y1) to (x2,y2).",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1148,2020-06-21T18:18:29Z,2020-06-22T03:13:28Z,2020-06-22T03:13:29Z,MERGED,True,1,1,1,https://github.com/ericoporto,allegro 4.4: fixes wrong assert in mouse.c in set_mouse_range,1,[],https://github.com/liballeg/allegro5/pull/1148,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1148#issuecomment-647245716,"minor fix for a wrong assert in the mouse.c code when setting the mouse range in set_mouse_range.
It used to do this:
ASSERT(y2 >= y2);
which doesn't make sense. To make sure the mouse boundaries are right the assert should be:
ASSERT(y2 >= y1);
for a rectangle from (x1,y1) to (x2,y2).","Nice, thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1155,2020-08-11T17:23:03Z,2020-08-23T18:44:50Z,2020-08-23T18:45:00Z,MERGED,True,38,75,7,https://github.com/gusnan,Migrate to GTK3,13,[],https://github.com/liballeg/allegro5/pull/1155,https://github.com/gusnan,1,https://github.com/liballeg/allegro5/pull/1155,"Debian is working to reduce the dependencies on GTK2, and has posted a bug on the Allegro5-package:
https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=967247
I have done some work on this migrating to GTK3, and got some ways through - see the diffs here in this pull request.
The problems I have ran in to:
First - and the biggest problem: I am not sure at all about how the function really_make_transient should work. What I have in this pull request works for me, but chances are great that there's some other simpler method using internal Allegro calls. A my diff is now, works on my system, but it surely can be nicer.
Number two is regarding icons in GTK menus. GTK_STOCK_* icons has been deprecated, so in my work I have simply removed the icons here.
Number three: Fonts in GTK uses GTK_STYLEs and css styling. In my case it affects the log window, which doesn't get a monospace font. Really minor problem to me.
Other than this, on my system this builds, and works alright in the testing I have made.
Please review and test my changes and help out with the really_make_transient function.","Debian is working to reduce the dependencies on GTK2, and has posted a bug on the Allegro5-package:
https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=967247
I have done some work on this migrating to GTK3, and got some ways through - see the diffs here in this pull request.
The problems I have ran in to:
First - and the biggest problem: I am not sure at all about how the function really_make_transient should work. What I have in this pull request works for me, but chances are great that there's some other simpler method using internal Allegro calls. A my diff is now, works on my system, but it surely can be nicer.
Number two is regarding icons in GTK menus. GTK_STOCK_* icons has been deprecated, so in my work I have simply removed the icons here.
Number three: Fonts in GTK uses GTK_STYLEs and css styling. In my case it affects the log window, which doesn't get a monospace font. Really minor problem to me.
Other than this, on my system this builds, and works alright in the testing I have made.
Please review and test my changes and help out with the really_make_transient function.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1155,2020-08-11T17:23:03Z,2020-08-23T18:44:50Z,2020-08-23T18:45:00Z,MERGED,True,38,75,7,https://github.com/gusnan,Migrate to GTK3,13,[],https://github.com/liballeg/allegro5/pull/1155,https://github.com/gusnan,2,https://github.com/liballeg/allegro5/pull/1155#issuecomment-673543996,"Debian is working to reduce the dependencies on GTK2, and has posted a bug on the Allegro5-package:
https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=967247
I have done some work on this migrating to GTK3, and got some ways through - see the diffs here in this pull request.
The problems I have ran in to:
First - and the biggest problem: I am not sure at all about how the function really_make_transient should work. What I have in this pull request works for me, but chances are great that there's some other simpler method using internal Allegro calls. A my diff is now, works on my system, but it surely can be nicer.
Number two is regarding icons in GTK menus. GTK_STOCK_* icons has been deprecated, so in my work I have simply removed the icons here.
Number three: Fonts in GTK uses GTK_STYLEs and css styling. In my case it affects the log window, which doesn't get a monospace font. Really minor problem to me.
Other than this, on my system this builds, and works alright in the testing I have made.
Please review and test my changes and help out with the really_make_transient function.",I am looking into the monospace bit - It might not be as hard as I thought.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1155,2020-08-11T17:23:03Z,2020-08-23T18:44:50Z,2020-08-23T18:45:00Z,MERGED,True,38,75,7,https://github.com/gusnan,Migrate to GTK3,13,[],https://github.com/liballeg/allegro5/pull/1155,https://github.com/gusnan,3,https://github.com/liballeg/allegro5/pull/1155#issuecomment-674391277,"Debian is working to reduce the dependencies on GTK2, and has posted a bug on the Allegro5-package:
https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=967247
I have done some work on this migrating to GTK3, and got some ways through - see the diffs here in this pull request.
The problems I have ran in to:
First - and the biggest problem: I am not sure at all about how the function really_make_transient should work. What I have in this pull request works for me, but chances are great that there's some other simpler method using internal Allegro calls. A my diff is now, works on my system, but it surely can be nicer.
Number two is regarding icons in GTK menus. GTK_STOCK_* icons has been deprecated, so in my work I have simply removed the icons here.
Number three: Fonts in GTK uses GTK_STYLEs and css styling. In my case it affects the log window, which doesn't get a monospace font. Really minor problem to me.
Other than this, on my system this builds, and works alright in the testing I have made.
Please review and test my changes and help out with the really_make_transient function.","I have added a fix so that it (as the commitmessage) don't change font size, only set monospace font if monospace is requested.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1155,2020-08-11T17:23:03Z,2020-08-23T18:44:50Z,2020-08-23T18:45:00Z,MERGED,True,38,75,7,https://github.com/gusnan,Migrate to GTK3,13,[],https://github.com/liballeg/allegro5/pull/1155,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/1155#issuecomment-678727780,"Debian is working to reduce the dependencies on GTK2, and has posted a bug on the Allegro5-package:
https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=967247
I have done some work on this migrating to GTK3, and got some ways through - see the diffs here in this pull request.
The problems I have ran in to:
First - and the biggest problem: I am not sure at all about how the function really_make_transient should work. What I have in this pull request works for me, but chances are great that there's some other simpler method using internal Allegro calls. A my diff is now, works on my system, but it surely can be nicer.
Number two is regarding icons in GTK menus. GTK_STOCK_* icons has been deprecated, so in my work I have simply removed the icons here.
Number three: Fonts in GTK uses GTK_STYLEs and css styling. In my case it affects the log window, which doesn't get a monospace font. Really minor problem to me.
Other than this, on my system this builds, and works alright in the testing I have made.
Please review and test my changes and help out with the really_make_transient function.","Also, would you mind changing our CI install script to instal the GTK3 deps? It's here:
https://github.com/liballeg/allegro5/blob/master/.github/workflows/continuous-integration.yml#L36
Change libgtk2.0-dev to libgtk-3-dev.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1155,2020-08-11T17:23:03Z,2020-08-23T18:44:50Z,2020-08-23T18:45:00Z,MERGED,True,38,75,7,https://github.com/gusnan,Migrate to GTK3,13,[],https://github.com/liballeg/allegro5/pull/1155,https://github.com/SiegeLord,5,https://github.com/liballeg/allegro5/pull/1155#issuecomment-678809896,"Debian is working to reduce the dependencies on GTK2, and has posted a bug on the Allegro5-package:
https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=967247
I have done some work on this migrating to GTK3, and got some ways through - see the diffs here in this pull request.
The problems I have ran in to:
First - and the biggest problem: I am not sure at all about how the function really_make_transient should work. What I have in this pull request works for me, but chances are great that there's some other simpler method using internal Allegro calls. A my diff is now, works on my system, but it surely can be nicer.
Number two is regarding icons in GTK menus. GTK_STOCK_* icons has been deprecated, so in my work I have simply removed the icons here.
Number three: Fonts in GTK uses GTK_STYLEs and css styling. In my case it affects the log window, which doesn't get a monospace font. Really minor problem to me.
Other than this, on my system this builds, and works alright in the testing I have made.
Please review and test my changes and help out with the really_make_transient function.",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1158,2020-08-16T14:57:07Z,2020-08-19T01:34:50Z,2020-08-19T01:34:53Z,MERGED,True,8,0,1,https://github.com/bart9h,Fix segfault in al_draw_ribbon() when num_segments>128,4,[],https://github.com/liballeg/allegro5/pull/1158,https://github.com/bart9h,1,https://github.com/liballeg/allegro5/pull/1158,Fixes #1157,Fixes #1157,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1158,2020-08-16T14:57:07Z,2020-08-19T01:34:50Z,2020-08-19T01:34:53Z,MERGED,True,8,0,1,https://github.com/bart9h,Fix segfault in al_draw_ribbon() when num_segments>128,4,[],https://github.com/liballeg/allegro5/pull/1158,https://github.com/pedro-w,2,https://github.com/liballeg/allegro5/pull/1158#issuecomment-674548374,Fixes #1157,"I don't think this is right because, if thickness is zero, you can draw up
to ALLEGRO_VERTEX_CACHE_SIZE segments (agreed it's only
ALLEGRO_VERTEX_CACHE_SIZE/2 if thickness > 0)
…
On Sun, 16 Aug 2020 at 15:57, Rodolfo Borges ***@***.***> wrote:
 Fixes #1157 <#1157>
 ------------------------------
 You can view, comment on, or merge this pull request online at:

   #1158
 Commit Summary

    - Fix segfault in al_draw_ribbon() when num_segments>128

 File Changes

    - *M* addons/primitives/high_primitives.c
    <https://github.com/liballeg/allegro5/pull/1158/files#diff-be207aa01d7e405ae221b7d1cbc91c4a>
    (5)

 Patch Links:

    - https://github.com/liballeg/allegro5/pull/1158.patch
    - https://github.com/liballeg/allegro5/pull/1158.diff

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#1158>, or unsubscribe
 <https://github.com/notifications/unsubscribe-auth/AFJFGZ5XZOM2EVNLNS66CZLSA7XVFANCNFSM4QA3W5VA>
 .",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1158,2020-08-16T14:57:07Z,2020-08-19T01:34:50Z,2020-08-19T01:34:53Z,MERGED,True,8,0,1,https://github.com/bart9h,Fix segfault in al_draw_ribbon() when num_segments>128,4,[],https://github.com/liballeg/allegro5/pull/1158,https://github.com/bart9h,3,https://github.com/liballeg/allegro5/pull/1158#issuecomment-674559584,Fixes #1157,Now I don't know if I should have left that \n or not..,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1158,2020-08-16T14:57:07Z,2020-08-19T01:34:50Z,2020-08-19T01:34:53Z,MERGED,True,8,0,1,https://github.com/bart9h,Fix segfault in al_draw_ribbon() when num_segments>128,4,[],https://github.com/liballeg/allegro5/pull/1158,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/1158#issuecomment-675800918,Fixes #1157,Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1159,2020-08-23T19:45:15Z,2020-08-23T20:13:20Z,2020-08-23T20:13:20Z,MERGED,True,24,1,1,https://github.com/SiegeLord,Windows actions msys,1,[],https://github.com/liballeg/allegro5/pull/1159,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1159,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1160,2020-08-23T20:34:05Z,2020-08-24T14:21:42Z,2020-08-30T11:15:39Z,CLOSED,False,42,19,5,https://github.com/aldrikboy,key modifiers for ALLEGRO_EVENT_KEY_UP and ALLEGRO_EVENT_KEY_DOWN,3,[],https://github.com/liballeg/allegro5/pull/1160,https://github.com/aldrikboy,1,https://github.com/liballeg/allegro5/pull/1160,"Fix issue #1151
Only tested on windows platform.","Fix issue #1151
Only tested on windows platform.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1160,2020-08-23T20:34:05Z,2020-08-24T14:21:42Z,2020-08-30T11:15:39Z,CLOSED,False,42,19,5,https://github.com/aldrikboy,key modifiers for ALLEGRO_EVENT_KEY_UP and ALLEGRO_EVENT_KEY_DOWN,3,[],https://github.com/liballeg/allegro5/pull/1160,https://github.com/pedro-w,2,https://github.com/liballeg/allegro5/pull/1160#issuecomment-679162603,"Fix issue #1151
Only tested on windows platform.",Am I right - this has been closed without merging it?,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1160,2020-08-23T20:34:05Z,2020-08-24T14:21:42Z,2020-08-30T11:15:39Z,CLOSED,False,42,19,5,https://github.com/aldrikboy,key modifiers for ALLEGRO_EVENT_KEY_UP and ALLEGRO_EVENT_KEY_DOWN,3,[],https://github.com/liballeg/allegro5/pull/1160,https://github.com/aldrikboy,3,https://github.com/liballeg/allegro5/pull/1160#issuecomment-683407788,"Fix issue #1151
Only tested on windows platform.","Am I right - this has been closed without merging it?

see #1162",True,{'ROCKET': ['https://github.com/pedro-w']}
liballeg/allegro5,https://github.com/liballeg/allegro5,1161,2020-08-23T22:34:09Z,2020-08-24T00:00:25Z,2020-08-24T00:00:25Z,CLOSED,False,1,0,1,https://github.com/NewCreature,Added missing include that was preventing build from completing on MacOS.,4,[],https://github.com/liballeg/allegro5/pull/1161,https://github.com/NewCreature,1,https://github.com/liballeg/allegro5/pull/1161,"Commit 0b92565 added an _al_add_exit_func() call, but did not #include the file with the function declaration. This was causing the build to fail for me under MacOS with an implicit declaration error.","Commit 0b92565 added an _al_add_exit_func() call, but did not #include the file with the function declaration. This was causing the build to fail for me under MacOS with an implicit declaration error.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1161,2020-08-23T22:34:09Z,2020-08-24T00:00:25Z,2020-08-24T00:00:25Z,CLOSED,False,1,0,1,https://github.com/NewCreature,Added missing include that was preventing build from completing on MacOS.,4,[],https://github.com/liballeg/allegro5/pull/1161,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1161#issuecomment-678842705,"Commit 0b92565 added an _al_add_exit_func() call, but did not #include the file with the function declaration. This was causing the build to fail for me under MacOS with an implicit declaration error.","Merged via f1eacca.
Thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1162,2020-08-24T14:36:37Z,2020-08-29T20:03:45Z,2020-08-29T20:03:45Z,MERGED,True,42,18,5,https://github.com/aldrikboy,Modifier keys for ALLEGRO_EVENT_KEY_DOWN and ALLEGRO_EVENT_KEY_UP,3,[],https://github.com/liballeg/allegro5/pull/1162,https://github.com/aldrikboy,1,https://github.com/liballeg/allegro5/pull/1162,Fix for issue #1151,Fix for issue #1151,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1162,2020-08-24T14:36:37Z,2020-08-29T20:03:45Z,2020-08-29T20:03:45Z,MERGED,True,42,18,5,https://github.com/aldrikboy,Modifier keys for ALLEGRO_EVENT_KEY_DOWN and ALLEGRO_EVENT_KEY_UP,3,[],https://github.com/liballeg/allegro5/pull/1162,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1162#issuecomment-683336210,Fix for issue #1151,"Looks good, I only tried in on Linux, but it looks right everywhere else so seems okay to merge this.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1163,2020-08-24T14:49:49Z,2020-08-30T07:09:54Z,2020-08-30T07:09:54Z,MERGED,True,4,0,1,https://github.com/aldrikboy,Set display refresh_rate in d3d,1,[],https://github.com/liballeg/allegro5/pull/1163,https://github.com/aldrikboy,1,https://github.com/liballeg/allegro5/pull/1163,Fix issue #1100,Fix issue #1100,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1163,2020-08-24T14:49:49Z,2020-08-30T07:09:54Z,2020-08-30T07:09:54Z,MERGED,True,4,0,1,https://github.com/aldrikboy,Set display refresh_rate in d3d,1,[],https://github.com/liballeg/allegro5/pull/1163,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1163#issuecomment-683385451,Fix issue #1100,"This seems to work, but the original bug was incorrect: OpenGL doesn't fill out this field on Windows either so. I'll merge this and open another but about OpenGL.
Thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1164,2020-08-29T14:46:45Z,2020-09-30T12:32:57Z,2020-09-30T12:32:57Z,CLOSED,False,47,13,10,https://github.com/aldrikboy,Reverse audio playmode,4,[],https://github.com/liballeg/allegro5/pull/1164,https://github.com/aldrikboy,1,https://github.com/liballeg/allegro5/pull/1164,"Implementation of ALLEGRO_PLAYMODE_REVERSED to play samples backwards,
this should work on all audio drivers that support ALLEGRO_PLAYMODE_BIDIR.
This also includes an implementation for al_get_audio_driver_specifier(void) to get the name of the active audio driver.
I have only tested this on DirectSound.","Implementation of ALLEGRO_PLAYMODE_REVERSED to play samples backwards,
this should work on all audio drivers that support ALLEGRO_PLAYMODE_BIDIR.
This also includes an implementation for al_get_audio_driver_specifier(void) to get the name of the active audio driver.
I have only tested this on DirectSound.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1164,2020-08-29T14:46:45Z,2020-09-30T12:32:57Z,2020-09-30T12:32:57Z,CLOSED,False,47,13,10,https://github.com/aldrikboy,Reverse audio playmode,4,[],https://github.com/liballeg/allegro5/pull/1164,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1164#issuecomment-687552705,"Implementation of ALLEGRO_PLAYMODE_REVERSED to play samples backwards,
this should work on all audio drivers that support ALLEGRO_PLAYMODE_BIDIR.
This also includes an implementation for al_get_audio_driver_specifier(void) to get the name of the active audio driver.
I have only tested this on DirectSound.","This is an interesting idea, but I don't think a new playmode is necessary. Conceptually, backwards playing is just playing with speed = -1 (which is poorly supported at the moment, but we could fix it). We could also make the al_play_sample start at the end of the sample if the speed is negative. Something like this:
diff --git a/addons/audio/kcm_mixer.c b/addons/audio/kcm_mixer.c
index d042fdf95..6fcf74f02 100644
--- a/addons/audio/kcm_mixer.c
+++ b/addons/audio/kcm_mixer.c
@@ -215,7 +215,7 @@ static bool fix_looped_position(ALLEGRO_SAMPLE_INSTANCE *spl)
          return true;
 
       case ALLEGRO_PLAYMODE_ONCE:
-         if (spl->pos < spl->spl_data.len) {
+         if (spl->pos < spl->spl_data.len && spl->pos > 0) {
             return true;
          }
          spl->pos = 0;
diff --git a/addons/audio/kcm_sample.c b/addons/audio/kcm_sample.c
index 96576fd4b..bb73fe5ea 100644
--- a/addons/audio/kcm_sample.c
+++ b/addons/audio/kcm_sample.c
@@ -375,14 +375,20 @@ bool al_play_sample(ALLEGRO_SAMPLE *spl, float gain, float pan, float speed,
 static bool do_play_sample(ALLEGRO_SAMPLE_INSTANCE *splinst,
    ALLEGRO_SAMPLE *spl, float gain, float pan, float speed, ALLEGRO_PLAYMODE loop)
 {
+   unsigned int start_pos = 0;
    if (!al_set_sample(splinst, spl)) {
       ALLEGRO_ERROR(""al_set_sample failed\n"");
       return false;
    }
 
+   if (speed < 0.) {
+      if (al_get_sample_instance_length(splinst) > 1)
+         start_pos = al_get_sample_instance_length(splinst) - 1;
+   }
    if (!al_set_sample_instance_gain(splinst, gain) ||
          !al_set_sample_instance_pan(splinst, pan) ||
          !al_set_sample_instance_speed(splinst, speed) ||
+         !al_set_sample_instance_position(splinst, start_pos) ||
          !al_set_sample_instance_playmode(splinst, loop)) {
       return false;
    }",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1166,2020-08-30T16:16:54Z,2021-01-31T22:18:39Z,2021-01-31T22:23:12Z,MERGED,True,46,0,4,https://github.com/aldrikboy,al_get_display_refresh_rate fix under wgl,2,[],https://github.com/liballeg/allegro5/pull/1166,https://github.com/aldrikboy,1,https://github.com/liballeg/allegro5/pull/1166,"set refresh_rate for ALLEGRO_FULLSCREEN, ALLEGRO_FULLSCREEN_WINDOW and windowed mode under wgl
fix issue #1165","set refresh_rate for ALLEGRO_FULLSCREEN, ALLEGRO_FULLSCREEN_WINDOW and windowed mode under wgl
fix issue #1165",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1166,2020-08-30T16:16:54Z,2021-01-31T22:18:39Z,2021-01-31T22:23:12Z,MERGED,True,46,0,4,https://github.com/aldrikboy,al_get_display_refresh_rate fix under wgl,2,[],https://github.com/liballeg/allegro5/pull/1166,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1166#issuecomment-734499278,"set refresh_rate for ALLEGRO_FULLSCREEN, ALLEGRO_FULLSCREEN_WINDOW and windowed mode under wgl
fix issue #1165","(just FYI, I'm just waiting on getting the time to figure out how well this can be implemented on Linux/OSX etc)",True,{'THUMBS_UP': ['https://github.com/aldrikboy']}
liballeg/allegro5,https://github.com/liballeg/allegro5,1166,2020-08-30T16:16:54Z,2021-01-31T22:18:39Z,2021-01-31T22:23:12Z,MERGED,True,46,0,4,https://github.com/aldrikboy,al_get_display_refresh_rate fix under wgl,2,[],https://github.com/liballeg/allegro5/pull/1166,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/1166#issuecomment-770461635,"set refresh_rate for ALLEGRO_FULLSCREEN, ALLEGRO_FULLSCREEN_WINDOW and windowed mode under wgl
fix issue #1165","Whoops, I got confused, I didn't mean to merge this quite yet.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1170,2020-09-16T19:53:45Z,2020-09-27T19:23:06Z,2020-09-27T19:23:06Z,MERGED,True,173,168,2,https://github.com/pedro-w,Move more Cocoa operations onto main thread.,3,[],https://github.com/liballeg/allegro5/pull/1170,https://github.com/pedro-w,1,https://github.com/liballeg/allegro5/pull/1170,"Also replaced some performSelectorOnMainThread calls with
dispatch_sync calls. This simplifies the implementation.
Fixes #1168","Also replaced some performSelectorOnMainThread calls with
dispatch_sync calls. This simplifies the implementation.
Fixes #1168",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1170,2020-09-16T19:53:45Z,2020-09-27T19:23:06Z,2020-09-27T19:23:06Z,MERGED,True,173,168,2,https://github.com/pedro-w,Move more Cocoa operations onto main thread.,3,[],https://github.com/liballeg/allegro5/pull/1170,https://github.com/pedro-w,2,https://github.com/liballeg/allegro5/pull/1170#issuecomment-698163914,"Also replaced some performSelectorOnMainThread calls with
dispatch_sync calls. This simplifies the implementation.
Fixes #1168",@SiegeLord please can you have a look at this when you've got time? Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1170,2020-09-16T19:53:45Z,2020-09-27T19:23:06Z,2020-09-27T19:23:06Z,MERGED,True,173,168,2,https://github.com/pedro-w,Move more Cocoa operations onto main thread.,3,[],https://github.com/liballeg/allegro5/pull/1170,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/1170#issuecomment-699676987,"Also replaced some performSelectorOnMainThread calls with
dispatch_sync calls. This simplifies the implementation.
Fixes #1168",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1173,2020-09-20T20:40:36Z,2020-10-13T09:17:02Z,2020-10-13T09:17:02Z,CLOSED,False,41,1,3,https://github.com/NewCreature,Fixes DirectInput Joystick Lag Issue,1,[],https://github.com/liballeg/allegro5/pull/1173,https://github.com/NewCreature,1,https://github.com/liballeg/allegro5/pull/1173,"As discussed in issue #1026, this fixes the joystick lag issue caused by frequently calling IDirectInput8_EnumDevices(). Instead, we register to receive notifications when devices are connected/disconnected. If we are notified of a device change, we notify the joystick thread to re-enumerate the devices.","As discussed in issue #1026, this fixes the joystick lag issue caused by frequently calling IDirectInput8_EnumDevices(). Instead, we register to receive notifications when devices are connected/disconnected. If we are notified of a device change, we notify the joystick thread to re-enumerate the devices.",True,{'THUMBS_UP': ['https://github.com/beoran']}
liballeg/allegro5,https://github.com/liballeg/allegro5,1173,2020-09-20T20:40:36Z,2020-10-13T09:17:02Z,2020-10-13T09:17:02Z,CLOSED,False,41,1,3,https://github.com/NewCreature,Fixes DirectInput Joystick Lag Issue,1,[],https://github.com/liballeg/allegro5/pull/1173,https://github.com/beoran,2,https://github.com/liballeg/allegro5/pull/1173#issuecomment-695836655,"As discussed in issue #1026, this fixes the joystick lag issue caused by frequently calling IDirectInput8_EnumDevices(). Instead, we register to receive notifications when devices are connected/disconnected. If we are notified of a device change, we notify the joystick thread to re-enumerate the devices.","LGTM. I assume you tested this well with several different joysticks.
One extra thing we could do is see if the connected device is an XInput one, in which case no rescan is needed.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1173,2020-09-20T20:40:36Z,2020-10-13T09:17:02Z,2020-10-13T09:17:02Z,CLOSED,False,41,1,3,https://github.com/NewCreature,Fixes DirectInput Joystick Lag Issue,1,[],https://github.com/liballeg/allegro5/pull/1173,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/1173#issuecomment-707610016,"As discussed in issue #1026, this fixes the joystick lag issue caused by frequently calling IDirectInput8_EnumDevices(). Instead, we register to receive notifications when devices are connected/disconnected. If we are notified of a device change, we notify the joystick thread to re-enumerate the devices.",Merged as 07a7ce7. Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1174,2020-09-21T02:08:31Z,2020-09-27T04:20:29Z,2020-09-27T04:20:29Z,MERGED,True,4,1,1,https://github.com/lorry-lee,Add support to generate projects with suffix,1,[],https://github.com/liballeg/allegro5/pull/1174,https://github.com/lorry-lee,1,https://github.com/liballeg/allegro5/pull/1174,"So to create visual studio solutions like: ALLEGRO_PCCLIENT.sln, ALLEGRO_PCSERVER.sln.
Example:
cmake -B /build/pcserver -G ""Visual Studio 15 2017"" -DIS_SERVER=True -DALLEGRO_PROJECT_SUFFIX:STRING=""_PCSERVER""","So to create visual studio solutions like: ALLEGRO_PCCLIENT.sln, ALLEGRO_PCSERVER.sln.
Example:
cmake -B /build/pcserver -G ""Visual Studio 15 2017"" -DIS_SERVER=True -DALLEGRO_PROJECT_SUFFIX:STRING=""_PCSERVER""",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1174,2020-09-21T02:08:31Z,2020-09-27T04:20:29Z,2020-09-27T04:20:29Z,MERGED,True,4,1,1,https://github.com/lorry-lee,Add support to generate projects with suffix,1,[],https://github.com/liballeg/allegro5/pull/1174,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1174#issuecomment-699583161,"So to create visual studio solutions like: ALLEGRO_PCCLIENT.sln, ALLEGRO_PCSERVER.sln.
Example:
cmake -B /build/pcserver -G ""Visual Studio 15 2017"" -DIS_SERVER=True -DALLEGRO_PROJECT_SUFFIX:STRING=""_PCSERVER""",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1175,2020-09-21T07:33:43Z,2020-09-21T07:34:02Z,2020-09-21T07:34:02Z,CLOSED,False,14,5,1,https://github.com/pedro-w,Request unicode interface where appropriate,1,[],https://github.com/liballeg/allegro5/pull/1175,https://github.com/pedro-w,1,https://github.com/liballeg/allegro5/pull/1175,Fixes #1156,Fixes #1156,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1176,2020-09-21T07:38:00Z,2020-09-27T04:21:35Z,2020-09-27T04:21:35Z,MERGED,True,14,5,1,https://github.com/pedro-w,Windows Joystick - use the correct ANSI/Unicode interface for Direct Input,1,[],https://github.com/liballeg/allegro5/pull/1176,https://github.com/pedro-w,1,https://github.com/liballeg/allegro5/pull/1176,"This will use ANSI or Unicode, depending on how Allegro itself is configured. (Unicode by default these days)
#Fixes #1156","This will use ANSI or Unicode, depending on how Allegro itself is configured. (Unicode by default these days)
#Fixes #1156",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1176,2020-09-21T07:38:00Z,2020-09-27T04:21:35Z,2020-09-27T04:21:35Z,MERGED,True,14,5,1,https://github.com/pedro-w,Windows Joystick - use the correct ANSI/Unicode interface for Direct Input,1,[],https://github.com/liballeg/allegro5/pull/1176,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1176#issuecomment-699583228,"This will use ANSI or Unicode, depending on how Allegro itself is configured. (Unicode by default these days)
#Fixes #1156","Looks great, thanks (and thanks Beoran for another pair of eyes on this).",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1177,2020-10-01T02:06:02Z,2020-10-01T02:50:48Z,2020-10-01T14:53:04Z,MERGED,True,1,1,1,None,Improved docs,1,[],https://github.com/liballeg/allegro5/pull/1177,None,1,https://github.com/liballeg/allegro5/pull/1177,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1177,2020-10-01T02:06:02Z,2020-10-01T02:50:48Z,2020-10-01T14:53:04Z,MERGED,True,1,1,1,None,Improved docs,1,[],https://github.com/liballeg/allegro5/pull/1177,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1177#issuecomment-701790262,,Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1177,2020-10-01T02:06:02Z,2020-10-01T02:50:48Z,2020-10-01T14:53:04Z,MERGED,True,1,1,1,None,Improved docs,1,[],https://github.com/liballeg/allegro5/pull/1177,https://github.com/pedro-w,3,https://github.com/liballeg/allegro5/pull/1177#issuecomment-701985352,,Spam?,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1177,2020-10-01T02:06:02Z,2020-10-01T02:50:48Z,2020-10-01T14:53:04Z,MERGED,True,1,1,1,None,Improved docs,1,[],https://github.com/liballeg/allegro5/pull/1177,https://github.com/beoran,4,https://github.com/liballeg/allegro5/pull/1177#issuecomment-702126969,,"Probably Hacktober, yes,, but fixing spelling or grammar is also a contribution. Arguably, this 1 word commit is correct and of some minor value, so I can't get myself to call this spam.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1177,2020-10-01T02:06:02Z,2020-10-01T02:50:48Z,2020-10-01T14:53:04Z,MERGED,True,1,1,1,None,Improved docs,1,[],https://github.com/liballeg/allegro5/pull/1177,None,5,https://github.com/liballeg/allegro5/pull/1177#issuecomment-702190771,,"👍
…
On Thu, Oct 1, 2020, 8:20 AM SiegeLord ***@***.***> wrote:
 Thanks!

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#1177 (comment)>,
 or unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ARGVBRCY5HPDFNCXMEG6EVDSIPVBBANCNFSM4R7ZZ2OQ>
 .",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1179,2020-10-01T04:18:30Z,2020-10-01T13:11:44Z,2020-10-01T13:13:26Z,CLOSED,False,275008,276969,1910,https://github.com/Tamonash-glitch,Accept it,7848,"['invalid', 'spam']",https://github.com/liballeg/allegro5/pull/1179,https://github.com/Tamonash-glitch,1,https://github.com/liballeg/allegro5/pull/1179,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1179,2020-10-01T04:18:30Z,2020-10-01T13:11:44Z,2020-10-01T13:13:26Z,CLOSED,False,275008,276969,1910,https://github.com/Tamonash-glitch,Accept it,7848,"['invalid', 'spam']",https://github.com/liballeg/allegro5/pull/1179,https://github.com/beoran,2,https://github.com/liballeg/allegro5/pull/1179#issuecomment-701881419,,"First of all, thanks for all your hard work. However, it is not very clear what you are trying to accomplish, could you please explain?
Secondly, the PR has a merge conflict and targets the 4.2 branch. That branch is obsolete now, I assume you wanted to target the 5.x branch?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1179,2020-10-01T04:18:30Z,2020-10-01T13:11:44Z,2020-10-01T13:13:26Z,CLOSED,False,275008,276969,1910,https://github.com/Tamonash-glitch,Accept it,7848,"['invalid', 'spam']",https://github.com/liballeg/allegro5/pull/1179,https://github.com/pedro-w,3,https://github.com/liballeg/allegro5/pull/1179#issuecomment-701912441,,"@beoran another project I contribute to has received spammy pull requests like this and someone there said that it is related to the 'hacktoberfest' promotion, where Digital Ocean offer free t-shirts to people contributing to open source. So I would ignore this for now and see if Tamonash-glitch gets back with anything more sensible.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1179,2020-10-01T04:18:30Z,2020-10-01T13:11:44Z,2020-10-01T13:13:26Z,CLOSED,False,275008,276969,1910,https://github.com/Tamonash-glitch,Accept it,7848,"['invalid', 'spam']",https://github.com/liballeg/allegro5/pull/1179,https://github.com/beoran,4,https://github.com/liballeg/allegro5/pull/1179#issuecomment-701917032,,"I hope that is not the case, but if this PR is just spam, then we will lock it. I suggest we leave the OP one week to respond.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1179,2020-10-01T04:18:30Z,2020-10-01T13:11:44Z,2020-10-01T13:13:26Z,CLOSED,False,275008,276969,1910,https://github.com/Tamonash-glitch,Accept it,7848,"['invalid', 'spam']",https://github.com/liballeg/allegro5/pull/1179,https://github.com/pedro-w,5,https://github.com/liballeg/allegro5/pull/1179#issuecomment-701963482,,"If it is due to hacktoberfest, DigitalOcean's FAQ says to label them 'invalid' and close. I can't do this myself, it would have to be SL or Elias I suppose.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1179,2020-10-01T04:18:30Z,2020-10-01T13:11:44Z,2020-10-01T13:13:26Z,CLOSED,False,275008,276969,1910,https://github.com/Tamonash-glitch,Accept it,7848,"['invalid', 'spam']",https://github.com/liballeg/allegro5/pull/1179,https://github.com/beoran,6,https://github.com/liballeg/allegro5/pull/1179#issuecomment-702124387,,"Closing due to supspected Hacktober SPAM. OP, if this was intended a serious contribution, please clean it up and resubmit it. Thanks for your understanding.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1179,2020-10-01T04:18:30Z,2020-10-01T13:11:44Z,2020-10-01T13:13:26Z,CLOSED,False,275008,276969,1910,https://github.com/Tamonash-glitch,Accept it,7848,"['invalid', 'spam']",https://github.com/liballeg/allegro5/pull/1179,https://github.com/beoran,7,https://github.com/liballeg/allegro5/pull/1179#issuecomment-702125418,,"@pedro-w I am not very active on Allegro5 as of lately, but I still keep track of it and I still have the commit bit. Thanks for the Hacktober tip.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1183,2020-10-21T01:26:27Z,2020-10-21T01:43:07Z,2020-10-21T01:43:07Z,MERGED,True,1,1,1,https://github.com/abdnh,Update al_draw_multiline_text's `See also` section,1,[],https://github.com/liballeg/allegro5/pull/1183,https://github.com/abdnh,1,https://github.com/liballeg/allegro5/pull/1183,"Just a trivial change:
The “See also“ section of the al_draw_multiline_text function was referencing the same function.","Just a trivial change:
The “See also“ section of the al_draw_multiline_text function was referencing the same function.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1183,2020-10-21T01:26:27Z,2020-10-21T01:43:07Z,2020-10-21T01:43:07Z,MERGED,True,1,1,1,https://github.com/abdnh,Update al_draw_multiline_text's `See also` section,1,[],https://github.com/liballeg/allegro5/pull/1183,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1183#issuecomment-713237918,"Just a trivial change:
The “See also“ section of the al_draw_multiline_text function was referencing the same function.",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1184,2020-10-23T14:11:46Z,2020-10-25T20:39:56Z,2020-10-25T20:40:02Z,MERGED,True,1,1,1,https://github.com/tehsausage,Restore Windows XP compatibility,1,[],https://github.com/liballeg/allegro5/pull/1184,https://github.com/tehsausage,1,https://github.com/liballeg/allegro5/pull/1184,"Replaces a single function call to a C11 function (_tcsncpy_s, which is an alias for wcsncpy_s) in wsystem.c with its C99 equivalent, and resolves the following error on Windows XP:

The procedure entry point wcsncpy_s could not be located in the dynamic link library msvcrt.dll.","Replaces a single function call to a C11 function (_tcsncpy_s, which is an alias for wcsncpy_s) in wsystem.c with its C99 equivalent, and resolves the following error on Windows XP:

The procedure entry point wcsncpy_s could not be located in the dynamic link library msvcrt.dll.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1184,2020-10-23T14:11:46Z,2020-10-25T20:39:56Z,2020-10-25T20:40:02Z,MERGED,True,1,1,1,https://github.com/tehsausage,Restore Windows XP compatibility,1,[],https://github.com/liballeg/allegro5/pull/1184,https://github.com/beoran,2,https://github.com/liballeg/allegro5/pull/1184#issuecomment-716170391,"Replaces a single function call to a C11 function (_tcsncpy_s, which is an alias for wcsncpy_s) in wsystem.c with its C99 equivalent, and resolves the following error on Windows XP:

The procedure entry point wcsncpy_s could not be located in the dynamic link library msvcrt.dll.",Will this not cause any regressions on later Windows systems? Have you tested it both on Windows XP and later versions?,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1184,2020-10-23T14:11:46Z,2020-10-25T20:39:56Z,2020-10-25T20:40:02Z,MERGED,True,1,1,1,https://github.com/tehsausage,Restore Windows XP compatibility,1,[],https://github.com/liballeg/allegro5/pull/1184,https://github.com/tehsausage,3,https://github.com/liballeg/allegro5/pull/1184#issuecomment-716172399,"Replaces a single function call to a C11 function (_tcsncpy_s, which is an alias for wcsncpy_s) in wsystem.c with its C99 equivalent, and resolves the following error on Windows XP:

The procedure entry point wcsncpy_s could not be located in the dynamic link library msvcrt.dll.",I tested to make sure that it didn't break Allegro on Windows 10. _tscncpy is equivalent in behavior to _tscncpy_s except that it fills the destination with zero bytes to the end of the buffer.,True,{'THUMBS_UP': ['https://github.com/beoran']}
liballeg/allegro5,https://github.com/liballeg/allegro5,1184,2020-10-23T14:11:46Z,2020-10-25T20:39:56Z,2020-10-25T20:40:02Z,MERGED,True,1,1,1,https://github.com/tehsausage,Restore Windows XP compatibility,1,[],https://github.com/liballeg/allegro5/pull/1184,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/1184#issuecomment-716208553,"Replaces a single function call to a C11 function (_tcsncpy_s, which is an alias for wcsncpy_s) in wsystem.c with its C99 equivalent, and resolves the following error on Windows XP:

The procedure entry point wcsncpy_s could not be located in the dynamic link library msvcrt.dll.",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1185,2020-10-23T14:47:01Z,2020-10-25T20:41:39Z,2020-11-08T04:27:03Z,MERGED,True,3,3,2,https://github.com/tehsausage,Fix building with HLSL disabled,1,[],https://github.com/liballeg/allegro5/pull/1185,https://github.com/tehsausage,1,https://github.com/liballeg/allegro5/pull/1185,Fixes d3dx9-related build failure when building with WANT_SHADERS_D3D de-selected.,Fixes d3dx9-related build failure when building with WANT_SHADERS_D3D de-selected.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1185,2020-10-23T14:47:01Z,2020-10-25T20:41:39Z,2020-11-08T04:27:03Z,MERGED,True,3,3,2,https://github.com/tehsausage,Fix building with HLSL disabled,1,[],https://github.com/liballeg/allegro5/pull/1185,https://github.com/beoran,2,https://github.com/liballeg/allegro5/pull/1185#issuecomment-716170841,Fixes d3dx9-related build failure when building with WANT_SHADERS_D3D de-selected.,Is the combination of using d3dx9 without HLSL even useful? The dynamic pipeline is likely not to work in this case.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1185,2020-10-23T14:47:01Z,2020-10-25T20:41:39Z,2020-11-08T04:27:03Z,MERGED,True,3,3,2,https://github.com/tehsausage,Fix building with HLSL disabled,1,[],https://github.com/liballeg/allegro5/pull/1185,https://github.com/tehsausage,3,https://github.com/liballeg/allegro5/pull/1185#issuecomment-716172095,Fixes d3dx9-related build failure when building with WANT_SHADERS_D3D de-selected.,"ALLEGRO_CFG_D3DX9 is enabled automatically as long as d3dx9 is present on the system. It is required, independent of HLSL support, for DDS textures / DXT compression, I believe.
Having WANT_DDS or WANT_D3DX9 to disable it entirely would be good too, but this is just the minimum to make a WANT_SHADERS_D3D=OFF configuration build consistently.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1185,2020-10-23T14:47:01Z,2020-10-25T20:41:39Z,2020-11-08T04:27:03Z,MERGED,True,3,3,2,https://github.com/tehsausage,Fix building with HLSL disabled,1,[],https://github.com/liballeg/allegro5/pull/1185,https://github.com/beoran,4,https://github.com/liballeg/allegro5/pull/1185#issuecomment-716182565,Fixes d3dx9-related build failure when building with WANT_SHADERS_D3D de-selected.,"I like your last suggestion, if you have time to work on it, then that would be preferrable. Otherwise, if you only can contribute a minimal patch, then I have no further objections. @SiegeLord will likely review this later as well.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1185,2020-10-23T14:47:01Z,2020-10-25T20:41:39Z,2020-11-08T04:27:03Z,MERGED,True,3,3,2,https://github.com/tehsausage,Fix building with HLSL disabled,1,[],https://github.com/liballeg/allegro5/pull/1185,https://github.com/SiegeLord,5,https://github.com/liballeg/allegro5/pull/1185#issuecomment-716208743,Fixes d3dx9-related build failure when building with WANT_SHADERS_D3D de-selected.,"Looks good to me, it matches the intent of the macro with the code it actually guards.
Thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1186,2020-10-24T17:57:02Z,2020-10-25T20:34:17Z,2020-10-25T20:34:17Z,MERGED,True,5,5,1,https://github.com/greg-kennedy,allegro 4.2: Sound Blaster 8-bit volume patch by Ron Novy,1,[],https://github.com/liballeg/allegro5/pull/1186,https://github.com/greg-kennedy,1,https://github.com/liballeg/allegro5/pull/1186,"Fixes issue reported in Allegro.cc forums at this link: https://www.allegro.cc/forums/thread/596505 (Distorted playback of sound samples on Sound Blaster PRO cards in MS-DOS)
This was apparently supposed to be in the 4.2.3 release but was somehow never included.
Details:

The SB driver is using the function _mix_some_samples from mixer.c and the function looks ok to me... So I think the problem is that the SB driver isn't setting the 'issigned' flag correctly when calling the function... From what I remember the 8-bit sample format for the sound blaster is unsigned... In the SB driver 'issigned' is being set to 'TRUE' for 8 bit sound and 16 bit sound. So if this truly is the problem there are two ways to fix it... You can program the SB to send unsigned data in 16-bit mode and set all the 'issigned' flags to 'FALSE' in SB.c or set the flag appropriately according to the number of bits being used... I think either way should work ok...","Fixes issue reported in Allegro.cc forums at this link: https://www.allegro.cc/forums/thread/596505 (Distorted playback of sound samples on Sound Blaster PRO cards in MS-DOS)
This was apparently supposed to be in the 4.2.3 release but was somehow never included.
Details:

The SB driver is using the function _mix_some_samples from mixer.c and the function looks ok to me... So I think the problem is that the SB driver isn't setting the 'issigned' flag correctly when calling the function... From what I remember the 8-bit sample format for the sound blaster is unsigned... In the SB driver 'issigned' is being set to 'TRUE' for 8 bit sound and 16 bit sound. So if this truly is the problem there are two ways to fix it... You can program the SB to send unsigned data in 16-bit mode and set all the 'issigned' flags to 'FALSE' in SB.c or set the flag appropriately according to the number of bits being used... I think either way should work ok...",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1186,2020-10-24T17:57:02Z,2020-10-25T20:34:17Z,2020-10-25T20:34:17Z,MERGED,True,5,5,1,https://github.com/greg-kennedy,allegro 4.2: Sound Blaster 8-bit volume patch by Ron Novy,1,[],https://github.com/liballeg/allegro5/pull/1186,https://github.com/beoran,2,https://github.com/liballeg/allegro5/pull/1186#issuecomment-716171175,"Fixes issue reported in Allegro.cc forums at this link: https://www.allegro.cc/forums/thread/596505 (Distorted playback of sound samples on Sound Blaster PRO cards in MS-DOS)
This was apparently supposed to be in the 4.2.3 release but was somehow never included.
Details:

The SB driver is using the function _mix_some_samples from mixer.c and the function looks ok to me... So I think the problem is that the SB driver isn't setting the 'issigned' flag correctly when calling the function... From what I remember the 8-bit sample format for the sound blaster is unsigned... In the SB driver 'issigned' is being set to 'TRUE' for 8 bit sound and 16 bit sound. So if this truly is the problem there are two ways to fix it... You can program the SB to send unsigned data in 16-bit mode and set all the 'issigned' flags to 'FALSE' in SB.c or set the flag appropriately according to the number of bits being used... I think either way should work ok...","Thank you for your effort. However, there are too many white space diffs. Please remove all white space only diffs and resubmit the PR. Thanks.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1186,2020-10-24T17:57:02Z,2020-10-25T20:34:17Z,2020-10-25T20:34:17Z,MERGED,True,5,5,1,https://github.com/greg-kennedy,allegro 4.2: Sound Blaster 8-bit volume patch by Ron Novy,1,[],https://github.com/liballeg/allegro5/pull/1186,https://github.com/greg-kennedy,3,https://github.com/liballeg/allegro5/pull/1186#issuecomment-716183847,"Fixes issue reported in Allegro.cc forums at this link: https://www.allegro.cc/forums/thread/596505 (Distorted playback of sound samples on Sound Blaster PRO cards in MS-DOS)
This was apparently supposed to be in the 4.2.3 release but was somehow never included.
Details:

The SB driver is using the function _mix_some_samples from mixer.c and the function looks ok to me... So I think the problem is that the SB driver isn't setting the 'issigned' flag correctly when calling the function... From what I remember the 8-bit sample format for the sound blaster is unsigned... In the SB driver 'issigned' is being set to 'TRUE' for 8 bit sound and 16 bit sound. So if this truly is the problem there are two ways to fix it... You can program the SB to send unsigned data in 16-bit mode and set all the 'issigned' flags to 'FALSE' in SB.c or set the flag appropriately according to the number of bits being used... I think either way should work ok...",Done.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1186,2020-10-24T17:57:02Z,2020-10-25T20:34:17Z,2020-10-25T20:34:17Z,MERGED,True,5,5,1,https://github.com/greg-kennedy,allegro 4.2: Sound Blaster 8-bit volume patch by Ron Novy,1,[],https://github.com/liballeg/allegro5/pull/1186,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/1186#issuecomment-716207746,"Fixes issue reported in Allegro.cc forums at this link: https://www.allegro.cc/forums/thread/596505 (Distorted playback of sound samples on Sound Blaster PRO cards in MS-DOS)
This was apparently supposed to be in the 4.2.3 release but was somehow never included.
Details:

The SB driver is using the function _mix_some_samples from mixer.c and the function looks ok to me... So I think the problem is that the SB driver isn't setting the 'issigned' flag correctly when calling the function... From what I remember the 8-bit sample format for the sound blaster is unsigned... In the SB driver 'issigned' is being set to 'TRUE' for 8 bit sound and 16 bit sound. So if this truly is the problem there are two ways to fix it... You can program the SB to send unsigned data in 16-bit mode and set all the 'issigned' flags to 'FALSE' in SB.c or set the flag appropriately according to the number of bits being used... I think either way should work ok...","I don't quite have the capability to test this, but the change seems reasonable. Thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1187,2020-10-28T08:23:17Z,2020-11-26T22:40:58Z,2020-11-28T21:00:33Z,CLOSED,False,366,6,6,https://github.com/pedro-w,Generate links to example source code in the reference manual,3,[],https://github.com/liballeg/allegro5/pull/1187,https://github.com/pedro-w,1,https://github.com/liballeg/allegro5/pull/1187,"Please can you have a look at this? It

Uses the already generated protos file to get the API entries
Scans for each entry in all the examples and picks the best 3 examples for each one
Inserts these into the generated reference manual markdown pages, which are later converted to HTML

The first two items needed a new executable scan_examples and the last was by modifying the existing make_doc.
Tested on Debian and MacOS (not Windows) - in particular I'm not sure I got the CMake dependencies right so that it rebuilds when necessary, and never otherwise.
Fix for #1178","Please can you have a look at this? It

Uses the already generated protos file to get the API entries
Scans for each entry in all the examples and picks the best 3 examples for each one
Inserts these into the generated reference manual markdown pages, which are later converted to HTML

The first two items needed a new executable scan_examples and the last was by modifying the existing make_doc.
Tested on Debian and MacOS (not Windows) - in particular I'm not sure I got the CMake dependencies right so that it rebuilds when necessary, and never otherwise.
Fix for #1178",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1187,2020-10-28T08:23:17Z,2020-11-26T22:40:58Z,2020-11-28T21:00:33Z,CLOSED,False,366,6,6,https://github.com/pedro-w,Generate links to example source code in the reference manual,3,[],https://github.com/liballeg/allegro5/pull/1187,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1187#issuecomment-718239784,"Please can you have a look at this? It

Uses the already generated protos file to get the API entries
Scans for each entry in all the examples and picks the best 3 examples for each one
Inserts these into the generated reference manual markdown pages, which are later converted to HTML

The first two items needed a new executable scan_examples and the last was by modifying the existing make_doc.
Tested on Debian and MacOS (not Windows) - in particular I'm not sure I got the CMake dependencies right so that it rebuilds when necessary, and never otherwise.
Fix for #1178","I only tried building this so far, but the output looks amazing, thanks! Indeed, something's wonky with the cmake dependencies, as I had to build twice to get it to work. Also, we'll probably need to tweak the algorithm for choosing examples, as some of choices are a little weird.
I'll take a closer look later.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1187,2020-10-28T08:23:17Z,2020-11-26T22:40:58Z,2020-11-28T21:00:33Z,CLOSED,False,366,6,6,https://github.com/pedro-w,Generate links to example source code in the reference manual,3,[],https://github.com/liballeg/allegro5/pull/1187,https://github.com/pedro-w,3,https://github.com/liballeg/allegro5/pull/1187#issuecomment-718243538,"Please can you have a look at this? It

Uses the already generated protos file to get the API entries
Scans for each entry in all the examples and picks the best 3 examples for each one
Inserts these into the generated reference manual markdown pages, which are later converted to HTML

The first two items needed a new executable scan_examples and the last was by modifying the existing make_doc.
Tested on Debian and MacOS (not Windows) - in particular I'm not sure I got the CMake dependencies right so that it rebuilds when necessary, and never otherwise.
Fix for #1178","It chooses the examples that have got the fewest other APIs in them, my theory was they would be most 'focussed' on the API in question.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1187,2020-10-28T08:23:17Z,2020-11-26T22:40:58Z,2020-11-28T21:00:33Z,CLOSED,False,366,6,6,https://github.com/pedro-w,Generate links to example source code in the reference manual,3,[],https://github.com/liballeg/allegro5/pull/1187,https://github.com/pedro-w,4,https://github.com/liballeg/allegro5/pull/1187#issuecomment-718435441,"Please can you have a look at this? It

Uses the already generated protos file to get the API entries
Scans for each entry in all the examples and picks the best 3 examples for each one
Inserts these into the generated reference manual markdown pages, which are later converted to HTML

The first two items needed a new executable scan_examples and the last was by modifying the existing make_doc.
Tested on Debian and MacOS (not Windows) - in particular I'm not sure I got the CMake dependencies right so that it rebuilds when necessary, and never otherwise.
Fix for #1178","I tried with a fresh git clone and AFAICs it built everything first time - this was on MacOS, using the makefile generator.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1187,2020-10-28T08:23:17Z,2020-11-26T22:40:58Z,2020-11-28T21:00:33Z,CLOSED,False,366,6,6,https://github.com/pedro-w,Generate links to example source code in the reference manual,3,[],https://github.com/liballeg/allegro5/pull/1187,https://github.com/SiegeLord,5,https://github.com/liballeg/allegro5/pull/1187#issuecomment-734499028,"Please can you have a look at this? It

Uses the already generated protos file to get the API entries
Scans for each entry in all the examples and picks the best 3 examples for each one
Inserts these into the generated reference manual markdown pages, which are later converted to HTML

The first two items needed a new executable scan_examples and the last was by modifying the existing make_doc.
Tested on Debian and MacOS (not Windows) - in particular I'm not sure I got the CMake dependencies right so that it rebuilds when necessary, and never otherwise.
Fix for #1178","Ok, I'm still not 100% happy with the algorithm, but it's a fine start and the overall code structure looks great! Thanks!
Merged as c722eba.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1187,2020-10-28T08:23:17Z,2020-11-26T22:40:58Z,2020-11-28T21:00:33Z,CLOSED,False,366,6,6,https://github.com/pedro-w,Generate links to example source code in the reference manual,3,[],https://github.com/liballeg/allegro5/pull/1187,https://github.com/pedro-w,6,https://github.com/liballeg/allegro5/pull/1187#issuecomment-734842999,"Please can you have a look at this? It

Uses the already generated protos file to get the API entries
Scans for each entry in all the examples and picks the best 3 examples for each one
Inserts these into the generated reference manual markdown pages, which are later converted to HTML

The first two items needed a new executable scan_examples and the last was by modifying the existing make_doc.
Tested on Debian and MacOS (not Windows) - in particular I'm not sure I got the CMake dependencies right so that it rebuilds when necessary, and never otherwise.
Fix for #1178","Have you any idea of what the algorithm could be (just informally)? As an alternative I looked at picking examples that had the most occurrences of that particular function. Below is a diff between the 'original' algo and the 'most occurences' one. Do you think the lines with '+' are more sensible examples than the ones with '-'?
- al_create_bitmap: examples/ex_icon2.c:57 examples/ex_nodisplay.c:30 examples/ex_opengl_pixel_shader.c:66
+ al_create_bitmap: examples/ex_blend.c:80 examples/ex_blit.c:31 examples/ex_multisample_target.c:36

- al_destroy_bitmap: examples/ex_blend_bench.c:121 examples/ex_convert.c:48 examples/ex_nodisplay.c:64
+ al_destroy_bitmap: examples/ex_blend2.cpp:376 examples/ex_logo.c:157 examples/ex_subbitmap.c:130

- al_get_bitmap_width: examples/ex_font_justify.cpp:74 examples/ex_multiwin.c:103 examples/ex_resize.c:15
+ al_get_bitmap_width: examples/ex_mixer_pp.c:47 examples/ex_multiwin.c:103 examples/ex_subbitmap.c:102

- al_get_bitmap_height: examples/ex_membmp.c:52 examples/ex_multiwin.c:104 examples/ex_resize.c:16
+ al_get_bitmap_height: examples/ex_mixer_pp.c:48 examples/ex_multiwin.c:104 examples/ex_subbitmap.c:103

- al_set_clipping_rectangle: examples/ex_lines.c:45 examples/ex_rotate.c:139 examples/ex_scale.c:145
+ al_set_clipping_rectangle: examples/ex_clip.c:2 examples/ex_rotate.c:139 examples/ex_scale.c:145

- al_create_sub_bitmap: examples/ex_blend_target.c:65 examples/ex_shader_target.c:43 examples/ex_subbitmap.c:145
+ al_create_sub_bitmap: examples/ex_blend_target.c:65 examples/ex_clip.c:1 examples/ex_subbitmap.c:145

- al_clone_bitmap: examples/ex_font.c:20 examples/ex_premulalpha.c:64 examples/ex_subbitmap.c:266
+ al_clone_bitmap: examples/ex_blend2.cpp:365 examples/ex_compressed.c:80 examples/ex_multisample.c:143

- al_draw_tinted_bitmap: examples/ex_bitmap_flip.c:147 examples/ex_expose.c:79 examples/ex_nodisplay.c:43
+ al_draw_tinted_bitmap: examples/ex_logo.c:375 examples/ex_nodisplay.c:43 examples/ex_transform.c:153

- al_draw_bitmap: examples/ex_blend_bench.c:42 examples/ex_nodisplay.c:42 examples/ex_opengl_pixel_shader.c:116
+ al_draw_bitmap: examples/ex_blit.c:117 examples/ex_clip.c:1 examples/ex_compressed.c:172

- al_draw_bitmap_region: examples/ex_blit.c:120 examples/ex_clip.c:1 examples/ex_font.c:36
+ al_draw_bitmap_region: examples/ex_blend.c:157 examples/ex_blit.c:120 examples/ex_clip.c:1

- al_draw_scaled_bitmap: examples/ex_blend_bench.c:45 examples/ex_dualies.c:50 examples/ex_multiwin.c:107
+ al_draw_scaled_bitmap: examples/ex_depth_mask.c:43 examples/ex_dualies.c:50 examples/ex_multiwin.c:107

- al_draw_rotated_bitmap: examples/ex_blend2.cpp:262 examples/ex_multisample.c:103 examples/ex_palette.c:207
+ al_draw_rotated_bitmap: examples/ex_blend2.cpp:262 examples/ex_multisample.c:103 examples/ex_multisample_target.c:111

- al_draw_scaled_rotated_bitmap: examples/ex_bitmap.c:151 examples/ex_bitmap_file.c:160 examples/ex_blend_bench.c:48
+ al_draw_scaled_rotated_bitmap: examples/ex_loading_thread.c:212 examples/ex_multisample_target.c:147 examples/ex_premulalpha.c:105

- al_load_bitmap: examples/ex_convert.c:34 examples/ex_file_slice.c:65 examples/ex_nodisplay.c:25
+ al_load_bitmap: examples/ex_bitmap_flip.c:105 examples/ex_haiku.c:152 examples/ex_loading_thread.c:41

- al_load_bitmap_f: examples/ex_bitmap_file.c:83 examples/ex_convert.c:34 examples/ex_file_slice.c:65
+ al_load_bitmap_f: examples/ex_bitmap_file.c:83 examples/ex_bitmap_flip.c:105 examples/ex_convert.c:34

- al_lock_bitmap_region: examples/ex_compressed.c:114 examples/ex_lockbitmap.c:32 examples/ex_threads2.c:120
+ al_lock_bitmap_region: examples/ex_blit.c:169 examples/ex_compressed.c:114 examples/ex_threads2.c:120

- al_lock_bitmap: examples/ex_drawpixels.c:80 examples/ex_lockbitmap.c:32 examples/ex_membmp.c:61
+ al_lock_bitmap: examples/ex_blit.c:34 examples/ex_logo.c:125 examples/ex_threads2.c:120

- al_unlock_bitmap: examples/ex_drawpixels.c:98 examples/ex_lockbitmap.c:79 examples/ex_premulalpha.c:61
+ al_unlock_bitmap: examples/ex_blend.c:98 examples/ex_blit.c:46 examples/ex_logo.c:151

- al_get_pixel: examples/ex_blend_test.c:54 examples/ex_compressed.c:110 examples/ex_vertex_buffer.c:65
+ al_get_pixel: examples/ex_blend_test.c:54 examples/ex_compressed.c:110 examples/ex_logo.c:135

- al_put_pixel: examples/ex_drawpixels.c:86 examples/ex_icon.c:45 examples/ex_icon2.c:61
+ al_put_pixel: examples/ex_blit.c:42 examples/ex_clip.c:50 examples/ex_drawpixels.c:86

- al_set_config_value: examples/ex_config.c:54 examples/ex_draw.c:307 examples/ex_vsync.c:22
+ al_set_config_value: examples/ex_config.c:54 examples/ex_draw.c:307 examples/ex_logo.c:529

- al_get_config_value: examples/ex_config.c:44 examples/ex_stream_seek.c:248 examples/ex_vsync.c:18
+ al_get_config_value: examples/ex_config.c:44 examples/ex_draw.c:303 examples/ex_stream_seek.c:248

- al_load_config_file: examples/ex_config.c:39 examples/ex_stream_seek.c:246 examples/ex_vsync.c:102
+ al_load_config_file: examples/ex_config.c:39 examples/ex_draw.c:300 examples/ex_logo.c:423

- al_save_config_file: examples/ex_config.c:108 examples/ex_draw.c:308 examples/ex_vsync.c:120
+ al_save_config_file: examples/ex_config.c:108 examples/ex_draw.c:308 examples/ex_logo.c:532

- al_destroy_config: examples/ex_config.c:112 examples/ex_stream_seek.c:262 examples/ex_vsync.c:122
+ al_destroy_config: examples/ex_config.c:112 examples/ex_draw.c:309 examples/ex_logo.c:533

- al_create_display: examples/ex_d3d.cpp:37 examples/ex_keyboard_focus.c:43 examples/ex_mouse_focus.c:48
+ al_create_display: examples/ex_display_options.c:218 examples/ex_dualies.c:17 examples/ex_haptic.c:97

- al_destroy_display: examples/ex_d3d.cpp:115 examples/ex_mouse_focus.c:51 examples/ex_opengl.c:173
+ al_destroy_display: examples/ex_dualies.c:62 examples/ex_loading_thread.c:135 examples/ex_multiwin.c:87

- al_get_backbuffer: examples/ex_blend_target.c:64 examples/ex_drawpixels.c:80 examples/ex_multiwin.c:102
+ al_get_backbuffer: examples/ex_drawpixels.c:80 examples/ex_projection2.c:92 examples/ex_transform.c:51

- al_flip_display: examples/ex_d3d.cpp:105 examples/ex_keyboard_focus.c:19 examples/ex_mouse_focus.c:20
+ al_flip_display: examples/ex_display_options.c:234 examples/ex_dualies.c:51 examples/ex_expose.c:40

- al_acknowledge_resize: examples/ex_display_events.c:100 examples/ex_multiwin.c:73 examples/ex_touch_input.c:115
+ al_acknowledge_resize: examples/ex_android.c:213 examples/ex_camera.c:532 examples/ex_depth_mask.c:240

- al_resize_display: examples/ex_fs_resize.c:97 examples/ex_fs_window.c:67 examples/ex_resize.c:69
+ al_resize_display: examples/ex_fs_resize.c:97 examples/ex_fs_window.c:67 examples/ex_menu.c:237

- al_get_display_width: examples/ex_bitmap.c:135 examples/ex_font_justify.cpp:42 examples/ex_ogre3d.cpp:107
+ al_get_display_width: examples/ex_draw_bitmap.c:87 examples/ex_ogre3d.cpp:107 examples/ex_video.c:39

- al_get_display_height: examples/ex_fs_resize.c:102 examples/ex_ogre3d.cpp:108 examples/ex_window_maximized.c:101
+ al_get_display_height: examples/ex_android.c:224 examples/ex_draw_bitmap.c:88 examples/ex_ogre3d.cpp:108

- al_get_display_flags: examples/ex_fs_window.c:42 examples/ex_noframe.c:61 examples/ex_resize2.c:69
+ al_get_display_flags: examples/ex_display_options.c:273 examples/ex_fs_window.c:42 examples/ex_menu.c:240

- al_set_display_flag: examples/ex_fs_window.c:61 examples/ex_noframe.c:60 examples/ex_resize2.c:90
+ al_set_display_flag: examples/ex_fs_window.c:61 examples/ex_menu.c:242 examples/ex_resize2.c:90

- al_set_window_title: examples/ex_bitmap.c:72 examples/ex_icon.c:49 examples/ex_window_title.c:104
+ al_set_window_title: examples/ex_menu.c:100 examples/ex_multisample.c:139 examples/ex_subbitmap.c:75

- al_get_display_event_source: examples/ex_keyboard_events.c:141 examples/ex_opengl.c:146 examples/ex_touch_input.c:67
+ al_get_display_event_source: examples/ex_display_options.c:239 examples/ex_menu.c:131 examples/ex_mouse_cursor.c:167

- al_acknowledge_drawing_halt: examples/ex_android.c:199 examples/ex_depth_mask.c:231 examples/ex_touch_input.c:108
+ al_acknowledge_drawing_halt: examples/ex_android.c:199 examples/ex_depth_mask.c:231 examples/ex_draw_bitmap.c:397

- al_acknowledge_drawing_resume: examples/ex_android.c:205 examples/ex_draw_bitmap.c:403 examples/ex_touch_input.c:112
+ al_acknowledge_drawing_resume: examples/ex_android.c:205 examples/ex_draw_bitmap.c:403 examples/ex_projection2.c:157

- al_set_render_state: examples/ex_depth_mask.c:32 examples/ex_depth_target.c:44 examples/ex_draw_bitmap.c:208
+ al_set_render_state: examples/ex_depth_mask.c:32 examples/ex_draw_bitmap.c:208 examples/ex_projection2.c:164

- al_set_new_display_option: examples/ex_d3d.cpp:36 examples/ex_expose.c:29 examples/ex_glext.c:216
+ al_set_new_display_option: examples/ex_camera.c:492 examples/ex_depth_mask.c:152 examples/ex_multisample.c:133

- al_get_display_option: examples/ex_gldepth.c:162 examples/ex_glext.c:223 examples/ex_multisample.c:160
+ al_get_display_option: examples/ex_display_options.c:161 examples/ex_draw.c:209 examples/ex_glext.c:223

- al_clear_to_color: examples/ex_keyboard_focus.c:18 examples/ex_mouse_focus.c:19 examples/ex_nodisplay.c:41
+ al_clear_to_color: examples/ex_blend.c:116 examples/ex_blit.c:106 examples/ex_lockbitmap.c:89

- al_clear_depth_buffer: examples/ex_camera.c:337 examples/ex_depth_mask.c:40 examples/ex_depth_target.c:34
+ al_clear_depth_buffer: examples/ex_camera.c:337 examples/ex_depth_mask.c:40 examples/ex_projection2.c:166

- al_draw_pixel: examples/ex_blend_test.c:47 examples/ex_drawpixels.c:78 examples/ex_resample_test.c:119
+ al_draw_pixel: examples/ex_blend_test.c:47 examples/ex_color2.c:124 examples/ex_drawpixels.c:78

- al_create_event_queue: examples/ex_enet_server.c:213 examples/ex_inject_events.c:33 examples/ex_timer_pause.c:36
+ al_create_event_queue: examples/ex_joystick_events.c:241 examples/ex_keyboard_events.c:135 examples/ex_prim.c:694

- al_destroy_event_queue: examples/common.c:70 examples/ex_inject_events.c:66 examples/ex_timer_pause.c:68
+ al_destroy_event_queue: examples/common.c:70 examples/ex_blend.c:332 examples/ex_blit.c:276

- al_register_event_source: examples/ex_enet_server.c:215 examples/ex_inject_events.c:34 examples/ex_timer_pause.c:39
+ al_register_event_source: examples/ex_haiku.c:968 examples/ex_menu.c:131 examples/ex_native_filechooser.c:228

- al_is_event_queue_empty: examples/ex_inject_events.c:49 examples/ex_opengl.c:151 examples/ex_touch_input.c:70
+ al_is_event_queue_empty: examples/ex_audio_chain.cpp:826 examples/ex_audio_timer.c:155 examples/ex_bitmap.c:144

- al_get_next_event: examples/ex_dualies.c:41 examples/ex_opengl.c:152 examples/ex_winfull.c:44
+ al_get_next_event: examples/ex_dualies.c:41 examples/ex_fs_window.c:53 examples/ex_glext.c:309

- al_wait_for_event: examples/ex_enet_server.c:224 examples/ex_inject_events.c:50 examples/ex_timer_pause.c:58
+ al_wait_for_event: examples/common.c:69 examples/ex_timedwait.c:4 examples/ex_timer_pause.c:58

- al_fopen: examples/ex_bitmap_file.c:80 examples/ex_file.c:27 examples/ex_file_slice.c:29
+ al_fopen: examples/ex_android.c:99 examples/ex_bitmap_file.c:80 examples/ex_record.c:284

- al_fclose: examples/ex_file.c:130 examples/ex_file_slice.c:77 examples/ex_memfile.c:104
+ al_fclose: examples/ex_android.c:109 examples/ex_file_slice.c:77 examples/ex_record.c:255

- al_fread: examples/ex_file.c:47 examples/ex_file_slice.c:28 examples/ex_memfile.c:54
+ al_fread: examples/ex_android.c:106 examples/ex_file.c:47 examples/ex_file_slice.c:28

- al_fwrite: examples/ex_file_slice.c:20 examples/ex_memfile.c:44 examples/ex_synth.cpp:169
+ al_fwrite: examples/ex_android.c:107 examples/ex_file_slice.c:20 examples/ex_memfile.c:44

- al_feof: examples/ex_file.c:95 examples/ex_file_slice.c:29 examples/ex_memfile.c:55
+ al_feof: examples/ex_file.c:95 examples/ex_memfile.c:55 examples/ex_record.c:242

- al_install_joystick: examples/ex_haptic.c:101 examples/ex_joystick_events.c:239 examples/ex_joystick_hotplugging.c:77
+ al_install_joystick: examples/ex_haptic.c:101 examples/ex_haptic2.cpp:844 examples/ex_joystick_events.c:239

- al_get_joystick_name: examples/ex_haptic.c:121 examples/ex_joystick_events.c:137 examples/ex_joystick_hotplugging.c:14
+ al_get_joystick_name: examples/ex_haptic.c:121 examples/ex_haptic2.cpp:63 examples/ex_joystick_events.c:137

- al_install_keyboard: examples/ex_d3d.cpp:34 examples/ex_keyboard_focus.c:39 examples/ex_mouse_focus.c:44
+ al_install_keyboard: examples/ex_android.c:76 examples/ex_audio_chain.cpp:700 examples/ex_keyboard_events.c:131

- al_get_keyboard_state: examples/ex_d3d.cpp:107 examples/ex_keyboard_focus.c:53 examples/ex_mouse_focus.c:94
+ al_get_keyboard_state: examples/ex_d3d.cpp:107 examples/ex_drawpixels.c:120 examples/ex_keyboard_focus.c:53

- al_key_down: examples/ex_d3d.cpp:111 examples/ex_keyboard_focus.c:54 examples/ex_mouse_focus.c:95
+ al_key_down: examples/ex_d3d.cpp:111 examples/ex_drawpixels.c:121 examples/ex_lines.c:154

- al_get_keyboard_event_source: examples/ex_keyboard_events.c:140 examples/ex_opengl.c:145 examples/ex_timedwait.c:37
+ al_get_keyboard_event_source: examples/ex_android.c:130 examples/ex_audio_chain.cpp:719 examples/ex_joystick_events.c:246

- al_get_num_video_adapters: examples/ex_dualies.c:79 examples/ex_monitorinfo.c:21 examples/ex_winfull.c:20
+ al_get_num_video_adapters: examples/ex_depth_mask.c:138 examples/ex_draw_bitmap.c:284 examples/ex_dualies.c:79

- al_get_monitor_info: examples/ex_depth_mask.c:140 examples/ex_monitorinfo.c:26 examples/ex_windows.c:46
+ al_get_monitor_info: examples/ex_depth_mask.c:140 examples/ex_draw_bitmap.c:286 examples/ex_monitorinfo.c:26

- al_hide_mouse_cursor: examples/ex_mouse.c:56 examples/ex_mouse_events.c:78 examples/ex_ogre3d.cpp:336
+ al_hide_mouse_cursor: examples/ex_mouse.c:56 examples/ex_mouse_cursor.c:191 examples/ex_mouse_events.c:78

- al_install_mouse: examples/ex_font_justify.cpp:101 examples/ex_mouse.c:46 examples/ex_mouse_focus.c:41
+ al_install_mouse: examples/ex_audio_chain.cpp:703 examples/ex_audio_props.cpp:156 examples/ex_bitmap.c:55

- al_get_mouse_event_source: examples/ex_display_events.c:58 examples/ex_mouse_warp.c:46 examples/ex_noframe.c:44
+ al_get_mouse_event_source: examples/ex_audio_chain.cpp:718 examples/ex_blend.c:321 examples/ex_blit.c:269

- al_path_cstr: examples/ex_file_slice.c:82 examples/ex_get_path.c:12 examples/ex_path.c:47
+ al_path_cstr: examples/ex_android.c:21 examples/ex_path.c:47 examples/ex_path_test.c:138

- al_destroy_path: examples/ex_get_path.c:14 examples/ex_path.c:21 examples/ex_path_test.c:36
+ al_destroy_path: examples/ex_audio_chain.cpp:732 examples/ex_path.c:21 examples/ex_path_test.c:36

- al_map_rgba: examples/ex_drawpixels.c:47 examples/ex_nodisplay.c:41 examples/ex_timedwait.c:70
+ al_map_rgba: examples/ex_logo.c:70 examples/ex_prim.c:85 examples/ex_ttf.c:52

- al_map_rgb: examples/ex_enet_server.c:33 examples/ex_keyboard_focus.c:49 examples/ex_nodisplay.c:37
+ al_map_rgb: examples/ex_display_options.c:95 examples/ex_logo.c:70 examples/ex_prim.c:85

- al_map_rgba_f: examples/ex_resize.c:11 examples/ex_rotate.c:127 examples/ex_timedwait.c:70
+ al_map_rgba_f: examples/ex_logo.c:70 examples/ex_prim.c:85 examples/ex_ttf.c:52

- al_map_rgb_f: examples/ex_drawpixels.c:93 examples/ex_enet_server.c:33 examples/ex_keyboard_events.c:128
+ al_map_rgb_f: examples/ex_audio_simple.c:188 examples/ex_display_options.c:95 examples/ex_prim.c:348

- al_unmap_rgb: examples/ex_blend_test.c:16 examples/ex_draw.c:56 examples/ex_haiku.c:399
+ al_unmap_rgb: examples/ex_blend_test.c:16 examples/ex_draw.c:56 examples/ex_logo.c:138

- al_create_shader: examples/ex_prim_shader.c:117 examples/ex_shader.cpp:87 examples/ex_shader_target.c:86
+ al_create_shader: examples/ex_palette.c:118 examples/ex_prim_shader.c:117 examples/ex_shader.cpp:87

- al_attach_shader_source: examples/ex_prim_shader.c:132 examples/ex_shader.cpp:97 examples/ex_shader_target.c:94
+ al_attach_shader_source: examples/ex_prim_shader.c:132 examples/ex_shader.cpp:97 examples/ex_shader_multitex.c:72

- al_build_shader: examples/ex_prim_shader.c:141 examples/ex_shader.cpp:106 examples/ex_shader_target.c:102
+ al_build_shader: examples/ex_prim_shader.c:141 examples/ex_shader.cpp:106 examples/ex_shader_multitex.c:78

- al_get_shader_log: examples/ex_prim_shader.c:134 examples/ex_shader.cpp:99 examples/ex_shader_target.c:96
+ al_get_shader_log: examples/ex_prim_shader.c:134 examples/ex_shader.cpp:99 examples/ex_shader_multitex.c:74

- al_get_shader_platform: examples/ex_prim_shader.c:123 examples/ex_shader.cpp:42 examples/ex_shader_target.c:90
+ al_get_shader_platform: examples/ex_prim_shader.c:123 examples/ex_shader.cpp:42 examples/ex_shader_multitex.c:58

- al_use_shader: examples/ex_prim_shader.c:145 examples/ex_shader.cpp:110 examples/ex_shader_target.c:46
+ al_use_shader: examples/ex_palette.c:157 examples/ex_prim_shader.c:145 examples/ex_shader.cpp:110

- al_destroy_shader: examples/ex_prim_shader.c:195 examples/ex_shader.cpp:152 examples/ex_shader_target.c:148
+ al_destroy_shader: examples/ex_palette.c:228 examples/ex_prim_shader.c:195 examples/ex_shader.cpp:152

- al_set_shader_float: examples/ex_prim_shader.c:146 examples/ex_shader.cpp:127 examples/ex_shader_target.c:135
+ al_set_shader_float: examples/ex_palette.c:198 examples/ex_prim_shader.c:146 examples/ex_shader.cpp:127

- al_set_shader_float_vector: examples/ex_prim_shader.c:146 examples/ex_shader.cpp:127 examples/ex_shader_target.c:135
+ al_set_shader_float_vector: examples/ex_palette.c:198 examples/ex_prim_shader.c:146 examples/ex_shader.cpp:127

- al_uninstall_system: examples/ex_icon.c:74 examples/ex_icon2.c:85 examples/ex_opengl_pixel_shader.c:128
+ al_uninstall_system: examples/ex_icon.c:74 examples/ex_icon2.c:85 examples/ex_ogre3d.cpp:463

- al_get_standard_path: examples/ex_android.c:20 examples/ex_get_path.c:11 examples/ex_physfs.c:87
+ al_get_standard_path: examples/ex_android.c:20 examples/ex_audio_chain.cpp:172 examples/ex_get_path.c:11

- al_get_time: examples/ex_convert.c:40 examples/ex_d3d.cpp:81 examples/ex_enet_server.c:215
+ al_get_time: examples/ex_compressed.c:69 examples/ex_prim.c:273 examples/ex_timer_pause.c:39

- al_rest: examples/ex_keyboard_focus.c:68 examples/ex_mouse_focus.c:92 examples/ex_timer_pause.c:45
+ al_rest: examples/ex_acodec.c:104 examples/ex_haptic.c:55 examples/ex_logo.c:181

- al_create_thread: examples/ex_loading_thread.c:158 examples/ex_threads.c:233 examples/ex_threads2.c:313
+ al_create_thread: examples/ex_loading_thread.c:158 examples/ex_native_filechooser.c:106 examples/ex_threads.c:233

- al_start_thread: examples/ex_loading_thread.c:159 examples/ex_threads.c:237 examples/ex_threads2.c:329
+ al_start_thread: examples/ex_loading_thread.c:159 examples/ex_native_filechooser.c:108 examples/ex_threads.c:237

- al_create_timer: examples/ex_enet_server.c:212 examples/ex_timer_pause.c:37 examples/ex_user_events.c:59
+ al_create_timer: examples/ex_android.c:132 examples/ex_haiku.c:964 examples/ex_timer_pause.c:37

- al_destroy_timer: examples/ex_noframe.c:90 examples/ex_timer_pause.c:69 examples/ex_user_events.c:112
+ al_destroy_timer: examples/ex_font_multiline.cpp:224 examples/ex_haptic2.cpp:888 examples/ex_timer_pause.c:69

- al_start_timer: examples/ex_enet_server.c:216 examples/ex_timer_pause.c:5 examples/ex_user_events.c:72
+ al_start_timer: examples/ex_android.c:134 examples/ex_haiku.c:978 examples/ex_timer_pause.c:5

- al_get_timer_event_source: examples/ex_enet_server.c:215 examples/ex_timer_pause.c:39 examples/ex_user_events.c:70
+ al_get_timer_event_source: examples/ex_android.c:133 examples/ex_haiku.c:971 examples/ex_timer_pause.c:39

- al_set_new_display_flags: examples/ex_d3d.cpp:35 examples/ex_opengl.c:138 examples/ex_opengl_pixel_shader.c:55
+ al_set_new_display_flags: examples/ex_display_options.c:308 examples/ex_menu.c:92 examples/ex_winfull.c:25

- al_set_new_display_adapter: examples/ex_dualies.c:16 examples/ex_monitorinfo.c:30 examples/ex_winfull.c:24
+ al_set_new_display_adapter: examples/ex_bitmap.c:49 examples/ex_dualies.c:16 examples/ex_winfull.c:24

- al_get_current_display: examples/common.c:40 examples/ex_color2.c:146 examples/ex_vsync.c:29
+ al_get_current_display: examples/common.c:40 examples/ex_camera.c:194 examples/ex_color2.c:146

- al_set_target_bitmap: examples/ex_blend_bench.c:86 examples/ex_nodisplay.c:35 examples/ex_opengl_pixel_shader.c:105
+ al_set_target_bitmap: examples/ex_blend_target.c:66 examples/ex_blit.c:33 examples/ex_transform.c:84

- al_set_target_backbuffer: examples/ex_keyboard_focus.c:17 examples/ex_mouse_focus.c:18 examples/ex_opengl_pixel_shader.c:119
+ al_set_target_backbuffer: examples/ex_mouse_cursor.c:170 examples/ex_subbitmap.c:157 examples/ex_transform.c:135

- al_get_target_bitmap: examples/ex_font_justify.cpp:73 examples/ex_membmp.c:54 examples/ex_resize.c:15
+ al_get_target_bitmap: examples/ex_draw.c:116 examples/ex_joystick_events.c:101 examples/ex_logo.c:79

- al_set_blender: examples/ex_blend_bench.c:87 examples/ex_membmp.c:43 examples/ex_rotate.c:126
+ al_set_blender: examples/ex_draw_bitmap.c:128 examples/ex_premulalpha.c:101 examples/ex_prim.c:92

- al_set_new_bitmap_format: examples/ex_blend_test.c:28 examples/ex_convert.c:31 examples/ex_pixelformat.cpp:156
+ al_set_new_bitmap_format: examples/ex_blend_test.c:28 examples/ex_compressed.c:66 examples/ex_pixelformat.cpp:156

- al_set_new_bitmap_flags: examples/ex_blend_bench.c:72 examples/ex_convert.c:32 examples/ex_icon2.c:56
+ al_set_new_bitmap_flags: examples/ex_blit.c:148 examples/ex_multisample.c:129 examples/ex_multisample_target.c:55

- al_store_state: examples/ex_blend2.cpp:299 examples/ex_blend_bench.c:91 examples/nihgui.cpp:29
+ al_store_state: examples/ex_blend2.cpp:299 examples/ex_blend_bench.c:91 examples/ex_logo.c:88

- al_restore_state: examples/ex_blend2.cpp:316 examples/ex_blend_bench.c:96 examples/nihgui.cpp:33
+ al_restore_state: examples/ex_blend2.cpp:316 examples/ex_blend_bench.c:96 examples/ex_logo.c:181

- al_is_touch_input_installed: examples/ex_haiku.c:973 examples/ex_lockbitmap.c:178 examples/ex_prim_shader.c:154
+ al_is_touch_input_installed: examples/ex_blend.c:324 examples/ex_haiku.c:973 examples/ex_lockbitmap.c:178

- al_install_touch_input: examples/common.c:18 examples/ex_lockbitmap.c:165 examples/ex_touch_input.c:56
+ al_install_touch_input: examples/common.c:18 examples/ex_android.c:73 examples/ex_draw_bitmap.c:306

- al_get_touch_input_event_source: examples/ex_android.c:129 examples/ex_polygon.c:387 examples/ex_touch_input.c:66
+ al_get_touch_input_event_source: examples/ex_android.c:129 examples/ex_draw_bitmap.c:334 examples/ex_native_filechooser.c:231

- al_get_touch_input_mouse_emulation_event_source: examples/ex_haiku.c:975 examples/ex_lockbitmap.c:180 examples/ex_prim_shader.c:156
+ al_get_touch_input_mouse_emulation_event_source: examples/ex_blend.c:326 examples/ex_haiku.c:975 examples/ex_lockbitmap.c:180

- al_use_transform: examples/ex_audio_timer.c:123 examples/ex_shader.cpp:142 examples/ex_shader_target.c:120
+ al_use_transform: examples/ex_depth_target.c:54 examples/ex_prim.c:96 examples/ex_transform.c:87

- al_identity_transform: examples/ex_audio_timer.c:121 examples/ex_shader.cpp:139 examples/ex_shader_target.c:117
+ al_identity_transform: examples/ex_camera.c:108 examples/ex_depth_target.c:36 examples/ex_projection.c:98

- al_translate_transform: examples/ex_polygon.c:232 examples/ex_shader.cpp:140 examples/ex_shader_target.c:119
+ al_translate_transform: examples/ex_depth_target.c:37 examples/ex_projection.c:99 examples/ex_transform.c:145

- al_rotate_transform: examples/ex_depth_mask.c:60 examples/ex_depth_target.c:51 examples/ex_projection.c:127
+ al_rotate_transform: examples/ex_camera.c:109 examples/ex_depth_target.c:51 examples/ex_transform.c:86

- al_ustr_new: examples/ex_loading_thread.c:65 examples/ex_utf8.c:54 examples/nihgui.cpp:756
+ al_ustr_new: examples/ex_logo.c:484 examples/ex_ttf.c:63 examples/ex_utf8.c:54

- al_ustr_free: examples/ex_loading_thread.c:77 examples/ex_utf8.c:61 examples/nihgui.cpp:761
+ al_ustr_free: examples/ex_loading_thread.c:77 examples/ex_logo.c:490 examples/ex_utf8.c:61

- al_cstr: examples/ex_loading_thread.c:76 examples/ex_utf8.c:57 examples/nihgui.cpp:895
+ al_cstr: examples/ex_loading_thread.c:76 examples/ex_logo.c:487 examples/ex_utf8.c:57

- al_ref_ustr: examples/ex_blend.c:62 examples/ex_utf8.c:102 examples/nihgui.cpp:47
+ al_ref_ustr: examples/ex_blend.c:62 examples/ex_ttf.c:116 examples/ex_utf8.c:102

- ALLEGRO_PI: examples/ex_blend_bench.c:49 examples/ex_convert.c:31 examples/ex_opengl.c:89
+ ALLEGRO_PI: examples/ex_color.cpp:89 examples/ex_pixelformat.cpp:23 examples/ex_prim.c:80

- ALLEGRO_BITMAP: examples/ex_convert.c:12 examples/ex_nodisplay.c:11 examples/ex_opengl_pixel_shader.c:18
+ ALLEGRO_BITMAP: examples/ex_blend2.cpp:17 examples/ex_multisample.c:39 examples/ex_multisample_target.c:15

- ALLEGRO_LOCKED_REGION: examples/ex_lockbitmap.c:21 examples/ex_multisample.c:52 examples/ex_premulalpha.c:16
+ ALLEGRO_LOCKED_REGION: examples/ex_blend.c:77 examples/ex_blit.c:100 examples/ex_color2.c:38

- ALLEGRO_COLOR: examples/ex_keyboard_focus.c:15 examples/ex_mouse_focus.c:16 examples/ex_nodisplay.c:13
+ ALLEGRO_COLOR: examples/ex_blend_test.c:13 examples/ex_logo.c:28 examples/ex_prim.c:39

- ALLEGRO_PIXEL_FORMAT: examples/ex_convert.c:31 examples/ex_drawpixels.c:80 examples/ex_lockbitmap.c:33
+ ALLEGRO_PIXEL_FORMAT: examples/ex_blend_test.c:121 examples/ex_compressed.c:14 examples/ex_pixelformat.cpp:23

- ALLEGRO_CONFIG: examples/ex_config.c:26 examples/ex_stream_seek.c:231 examples/ex_vsync.c:14
+ ALLEGRO_CONFIG: examples/ex_config.c:26 examples/ex_draw.c:280 examples/ex_vsync.c:14

- ALLEGRO_DISPLAY: examples/ex_d3d.cpp:24 examples/ex_keyboard_focus.c:12 examples/ex_monitorinfo.c:33
+ ALLEGRO_DISPLAY: examples/ex_bitmap.c:15 examples/ex_bitmap_file.c:17 examples/ex_ogre3d.cpp:49

- ALLEGRO_EVENT_SOURCE: examples/ex_inject_events.c:17 examples/ex_user_events.c:47 examples/nihgui.cpp:364
+ ALLEGRO_EVENT_SOURCE: examples/ex_inject_events.c:17 examples/ex_native_filechooser.c:28 examples/ex_user_events.c:47

- ALLEGRO_EVENT: examples/ex_enet_server.c:189 examples/ex_inject_events.c:17 examples/ex_timer_pause.c:24
+ ALLEGRO_EVENT: examples/ex_android.c:52 examples/ex_display_events.c:24 examples/ex_joystick_events.c:19

- ALLEGRO_EVENT_QUEUE: examples/ex_enet_server.c:189 examples/ex_inject_events.c:18 examples/ex_timer_pause.c:24
+ ALLEGRO_EVENT_QUEUE: examples/ex_haiku.c:878 examples/ex_prim.c:638 examples/ex_timedwait.c:12

- ALLEGRO_FILE: examples/ex_dir.c:18 examples/ex_file.c:23 examples/ex_memfile.c:19
+ ALLEGRO_FILE: examples/ex_curl.c:65 examples/ex_dir.c:18 examples/ex_physfs.c:49

- ALLEGRO_SEEK: examples/ex_file.c:60 examples/ex_file_slice.c:59 examples/ex_memfile.c:50
+ ALLEGRO_SEEK: examples/ex_curl.c:273 examples/ex_file.c:60 examples/ex_memfile.c:50

- ALLEGRO_KEYBOARD_STATE: examples/ex_d3d.cpp:42 examples/ex_keyboard_focus.c:4 examples/ex_mouse_focus.c:33
+ ALLEGRO_KEYBOARD_STATE: examples/ex_d3d.cpp:42 examples/ex_drawpixels.c:21 examples/ex_keyboard_focus.c:4

- al_free: examples/ex_clipboard.c:67 examples/ex_record_name.c:254 examples/ex_vertex_buffer.c:214
+ al_free: examples/ex_clipboard.c:67 examples/ex_record_name.c:254 examples/ex_utf8.c:859

- ALLEGRO_MONITOR_INFO: examples/ex_depth_mask.c:113 examples/ex_monitorinfo.c:8 examples/ex_windows.c:16
+ ALLEGRO_MONITOR_INFO: examples/ex_depth_mask.c:113 examples/ex_draw_bitmap.c:257 examples/ex_windows.c:16

- ALLEGRO_SHADER: examples/ex_prim_shader.c:60 examples/ex_shader.cpp:39 examples/ex_shader_target.c:22
+ ALLEGRO_SHADER: examples/ex_shader.cpp:39 examples/ex_shader_multitex.c:25 examples/ex_shader_target.c:22

- al_init: examples/ex_get_path.c:30 examples/ex_monitorinfo.c:15 examples/ex_path.c:12
+ al_init: examples/ex_audio_chain.cpp:680 examples/ex_font_justify.cpp:96 examples/ex_native_filechooser.c:104

- ALLEGRO_THREAD: examples/ex_loading_thread.c:16 examples/ex_threads.c:97 examples/ex_threads2.c:150
+ ALLEGRO_THREAD: examples/ex_loading_thread.c:16 examples/ex_native_filechooser.c:29 examples/ex_threads.c:97

- ALLEGRO_TIMER: examples/ex_enet_server.c:188 examples/ex_timer_pause.c:22 examples/ex_user_events.c:46
+ ALLEGRO_TIMER: examples/ex_haiku.c:112 examples/ex_timer.c:97 examples/ex_timer_pause.c:22

- ALLEGRO_STATE: examples/ex_blend2.cpp:298 examples/ex_blend_bench.c:65 examples/nihgui.cpp:24
+ ALLEGRO_STATE: examples/ex_blend2.cpp:298 examples/ex_depth_target.c:25 examples/ex_logo.c:74

- ALLEGRO_TRANSFORM: examples/ex_audio_timer.c:74 examples/ex_shader.cpp:137 examples/ex_shader_target.c:61
+ ALLEGRO_TRANSFORM: examples/ex_camera.c:1 examples/ex_depth_target.c:26 examples/ex_projection.c:72

- ALLEGRO_USTR: examples/ex_blend.c:57 examples/ex_font_multiline.cpp:248 examples/nihgui.cpp:39
+ ALLEGRO_USTR: examples/ex_ttf.c:45 examples/ex_utf8.c:54 examples/nihgui.cpp:39

- ALLEGRO_USTR_INFO: examples/ex_blend.c:57 examples/ex_font_multiline.cpp:248 examples/nihgui.cpp:39
+ ALLEGRO_USTR_INFO: examples/ex_blend.c:57 examples/ex_font_multiline.cpp:248 examples/ex_utf8.c:75

- al_init_acodec_addon: examples/ex_acodec_multi.c:34 examples/ex_kcm_direct.c:27 examples/ex_stream_file.c:48
+ al_init_acodec_addon: examples/ex_acodec.c:44 examples/ex_acodec_multi.c:34 examples/ex_audio_chain.cpp:693

- ALLEGRO_AUDIO_DEPTH: examples/ex_acodec_multi.c:51 examples/ex_saw.c:100 examples/ex_stream_file.c:54
+ ALLEGRO_AUDIO_DEPTH: examples/ex_acodec.c:50 examples/ex_acodec_multi.c:51 examples/ex_mixer_chain.c:42

- ALLEGRO_CHANNEL_CONF: examples/ex_acodec_multi.c:52 examples/ex_saw.c:100 examples/ex_stream_file.c:55
+ ALLEGRO_CHANNEL_CONF: examples/ex_acodec.c:51 examples/ex_mixer_chain.c:43 examples/ex_synth.cpp:157

- ALLEGRO_PLAYMODE: examples/ex_kcm_direct.c:76 examples/ex_mixer_chain.c:85 examples/ex_stream_file.c:90
+ ALLEGRO_PLAYMODE: examples/ex_audio_props.cpp:127 examples/ex_audio_simple.c:113 examples/ex_stream_seek.c:236

- ALLEGRO_SAMPLE: examples/ex_acodec_multi.c:17 examples/ex_glext.c:216 examples/ex_kcm_direct.c:13
+ ALLEGRO_SAMPLE: examples/ex_audio_chain.cpp:119 examples/ex_audio_simple.c:22 examples/ex_multisample.c:133

- ALLEGRO_SAMPLE_INSTANCE: examples/ex_acodec_multi.c:18 examples/ex_kcm_direct.c:13 examples/ex_mixer_chain.c:19
+ ALLEGRO_SAMPLE_INSTANCE: examples/ex_acodec.c:20 examples/ex_audio_chain.cpp:119 examples/ex_audio_simple.c:130

- ALLEGRO_AUDIO_STREAM: examples/ex_resample_test.c:17 examples/ex_saw.c:14 examples/ex_stream_file.c:76
+ ALLEGRO_AUDIO_STREAM: examples/ex_audio_chain.cpp:150 examples/ex_saw.c:14 examples/ex_synth.cpp:51

- ALLEGRO_MIXER: examples/ex_acodec_multi.c:19 examples/ex_mixer_chain.c:17 examples/ex_stream_file.c:27
+ ALLEGRO_MIXER: examples/ex_audio_chain.cpp:100 examples/ex_mixer_chain.c:17 examples/ex_stream_file.c:27

- ALLEGRO_VOICE: examples/ex_acodec_multi.c:20 examples/ex_kcm_direct.c:12 examples/ex_stream_file.c:26
+ ALLEGRO_VOICE: examples/ex_acodec.c:18 examples/ex_acodec_multi.c:20 examples/ex_kcm_direct.c:12

- al_install_audio: examples/ex_acodec_multi.c:36 examples/ex_saw.c:94 examples/ex_stream_file.c:50
+ al_install_audio: examples/ex_acodec.c:46 examples/ex_acodec_multi.c:36 examples/ex_audio_chain.cpp:690

- al_uninstall_audio: examples/ex_acodec_multi.c:129 examples/ex_saw.c:116 examples/ex_stream_file.c:124
+ al_uninstall_audio: examples/ex_acodec.c:138 examples/ex_acodec_multi.c:129 examples/ex_audio_simple.c:171

- al_load_sample: examples/ex_acodec_multi.c:73 examples/ex_kcm_direct.c:42 examples/ex_mixer_chain.c:64
+ al_load_sample: examples/ex_acodec.c:79 examples/ex_acodec_multi.c:73 examples/ex_haiku.c:180

- al_load_audio_stream: examples/ex_mixer_pp.c:182 examples/ex_stream_file.c:82 examples/ex_stream_seek.c:271
+ al_load_audio_stream: examples/ex_audio_chain.cpp:588 examples/ex_mixer_pp.c:182 examples/ex_stream_file.c:82

- al_create_sample_instance: examples/ex_acodec_multi.c:78 examples/ex_kcm_direct.c:49 examples/ex_mixer_chain.c:68
+ al_create_sample_instance: examples/ex_acodec.c:66 examples/ex_acodec_multi.c:78 examples/ex_audio_chain.cpp:497

- al_destroy_sample_instance: examples/ex_acodec_multi.c:119 examples/ex_kcm_direct.c:91 examples/ex_mixer_chain.c:112
+ al_destroy_sample_instance: examples/ex_acodec.c:134 examples/ex_acodec_multi.c:119 examples/ex_audio_chain.cpp:502

- al_play_sample_instance: examples/ex_acodec_multi.c:102 examples/ex_kcm_direct.c:77 examples/ex_mixer_chain.c:86
+ al_play_sample_instance: examples/ex_acodec.c:98 examples/ex_acodec_multi.c:102 examples/ex_audio_props.cpp:191

- al_stop_sample_instance: examples/ex_acodec_multi.c:118 examples/ex_kcm_direct.c:85 examples/ex_mixer_chain.c:104
+ al_stop_sample_instance: examples/ex_acodec.c:126 examples/ex_acodec_multi.c:118 examples/ex_mixer_chain.c:104

- al_get_sample_instance_time: examples/ex_acodec_multi.c:104 examples/ex_kcm_direct.c:79 examples/ex_mixer_chain.c:89
+ al_get_sample_instance_time: examples/ex_acodec.c:100 examples/ex_acodec_multi.c:104 examples/ex_mixer_chain.c:89

- al_set_sample_instance_gain: examples/ex_acodec.c:114 examples/ex_audio_props.cpp:134 examples/ex_mixer_chain.c:98
+ al_set_sample_instance_gain: examples/ex_acodec.c:114 examples/ex_audio_chain.cpp:534 examples/ex_mixer_chain.c:98

- al_set_sample_instance_playmode: examples/ex_acodec.c:97 examples/ex_kcm_direct.c:76 examples/ex_mixer_chain.c:85
+ al_set_sample_instance_playmode: examples/ex_acodec.c:97 examples/ex_audio_chain.cpp:543 examples/ex_audio_props.cpp:127

- al_set_sample: examples/ex_acodec.c:86 examples/ex_kcm_direct.c:54 examples/ex_mixer_chain.c:72
+ al_set_sample: examples/ex_acodec.c:86 examples/ex_audio_chain.cpp:521 examples/ex_audio_props.cpp:118

- al_get_sample: examples/ex_acodec_multi.c:104 examples/ex_kcm_direct.c:59 examples/ex_mixer_chain.c:89
+ al_get_sample: examples/ex_acodec.c:100 examples/ex_audio_chain.cpp:512 examples/ex_kcm_direct.c:59

- al_create_mixer: examples/ex_acodec_multi.c:57 examples/ex_mixer_chain.c:48 examples/ex_stream_file.c:62
+ al_create_mixer: examples/ex_acodec.c:56 examples/ex_acodec_multi.c:57 examples/ex_mixer_chain.c:48

- al_destroy_mixer: examples/ex_acodec_multi.c:123 examples/ex_mixer_chain.c:113 examples/ex_stream_file.c:120
+ al_destroy_mixer: examples/ex_acodec.c:135 examples/ex_acodec_multi.c:123 examples/ex_mixer_chain.c:113

- al_attach_audio_stream_to_mixer: examples/ex_resample_test.c:40 examples/ex_saw.c:105 examples/ex_stream_file.c:96
+ al_attach_audio_stream_to_mixer: examples/ex_audio_chain.cpp:455 examples/ex_stream_file.c:96 examples/ex_synth.cpp:491

- al_create_sample: examples/ex_acodec_multi.c:78 examples/ex_kcm_direct.c:49 examples/ex_mixer_chain.c:68
+ al_create_sample: examples/ex_acodec.c:66 examples/ex_kcm_direct.c:49 examples/ex_mixer_chain.c:68

- al_destroy_sample: examples/ex_acodec_multi.c:81 examples/ex_kcm_direct.c:90 examples/ex_mixer_chain.c:111
+ al_destroy_sample: examples/ex_acodec.c:131 examples/ex_acodec_multi.c:81 examples/ex_audio_chain.cpp:502

- al_reserve_samples: examples/ex_audio_props.cpp:167 examples/ex_resample_test.c:182 examples/ex_saw.c:97
+ al_reserve_samples: examples/ex_audio_props.cpp:167 examples/ex_audio_simple.c:72 examples/ex_audio_timer.c:105

- al_get_default_mixer: examples/ex_audio_props.cpp:137 examples/ex_resample_test.c:40 examples/ex_saw.c:105
+ al_get_default_mixer: examples/ex_audio_props.cpp:137 examples/ex_record.c:131 examples/ex_resample_test.c:40

- al_play_sample: examples/ex_acodec_multi.c:102 examples/ex_kcm_direct.c:77 examples/ex_mixer_chain.c:86
+ al_play_sample: examples/ex_acodec.c:98 examples/ex_audio_simple.c:127 examples/ex_haiku.c:672

- al_stop_sample: examples/ex_acodec_multi.c:118 examples/ex_kcm_direct.c:85 examples/ex_mixer_chain.c:104
+ al_stop_sample: examples/ex_acodec.c:126 examples/ex_acodec_multi.c:118 examples/ex_mixer_chain.c:104

- al_create_audio_stream: examples/ex_resample_test.c:34 examples/ex_saw.c:99 examples/ex_synth.cpp:480
+ al_create_audio_stream: examples/ex_record.c:122 examples/ex_resample_test.c:34 examples/ex_synth.cpp:480

- al_destroy_audio_stream: examples/ex_resample_test.c:191 examples/ex_saw.c:115 examples/ex_stream_file.c:115
+ al_destroy_audio_stream: examples/ex_audio_chain.cpp:596 examples/ex_mixer_pp.c:198 examples/ex_synth.cpp:509

- al_get_audio_stream_fragment: examples/ex_resample_test.c:73 examples/ex_saw.c:39 examples/ex_synth.cpp:396
+ al_get_audio_stream_fragment: examples/ex_record.c:229 examples/ex_resample_test.c:73 examples/ex_saw.c:39

- al_set_audio_stream_playmode: examples/ex_mixer_pp.c:191 examples/ex_stream_file.c:90 examples/ex_stream_seek.c:281
+ al_set_audio_stream_playmode: examples/ex_audio_chain.cpp:590 examples/ex_mixer_pp.c:191 examples/ex_stream_file.c:90

- al_set_audio_stream_fragment: examples/ex_resample_test.c:83 examples/ex_saw.c:57 examples/ex_synth.cpp:427
+ al_set_audio_stream_fragment: examples/ex_record.c:251 examples/ex_resample_test.c:83 examples/ex_saw.c:57

- al_get_audio_stream_event_source: examples/ex_resample_test.c:49 examples/ex_saw.c:24 examples/ex_stream_file.c:93
+ al_get_audio_stream_event_source: examples/ex_record.c:148 examples/ex_resample_test.c:49 examples/ex_synth.cpp:361

- al_create_voice: examples/ex_acodec_multi.c:51 examples/ex_kcm_direct.c:65 examples/ex_stream_file.c:54
+ al_create_voice: examples/ex_acodec.c:50 examples/ex_acodec_multi.c:51 examples/ex_audio_chain.cpp:368

- al_destroy_voice: examples/ex_acodec_multi.c:124 examples/ex_kcm_direct.c:92 examples/ex_stream_file.c:122
+ al_destroy_voice: examples/ex_acodec.c:136 examples/ex_acodec_multi.c:124 examples/ex_audio_chain.cpp:374

- al_attach_mixer_to_voice: examples/ex_acodec_multi.c:63 examples/ex_mixer_chain.c:58 examples/ex_stream_file.c:69
+ al_attach_mixer_to_voice: examples/ex_acodec.c:62 examples/ex_acodec_multi.c:63 examples/ex_mixer_chain.c:58

- al_color_name: examples/ex_blit.c:234 examples/ex_clip.c:198 examples/ex_multisample_target.c:97
+ al_color_name: examples/ex_camera.c:244 examples/ex_depth_target.c:42 examples/ex_draw.c:266

- al_color_hsv: examples/ex_color.cpp:92 examples/ex_font_multiline.cpp:250 examples/ex_multisample.c:95
+ al_color_hsv: examples/ex_blit.c:42 examples/ex_color.cpp:92 examples/ex_font_multiline.cpp:250

- ALLEGRO_FONT: examples/ex_disable_screensaver.c:10 examples/ex_display_events.c:26 examples/ex_font_justify.cpp:17
+ ALLEGRO_FONT: examples/ex_font_multiline.cpp:23 examples/ex_membmp.c:9 examples/ex_polygon.c:42

- al_init_font_addon: examples/ex_disable_screensaver.c:28 examples/ex_display_events.c:40 examples/ex_font_justify.cpp:104
+ al_init_font_addon: examples/ex_audio_chain.cpp:686 examples/ex_audio_props.cpp:158 examples/ex_audio_simple.c:36

- al_load_font: examples/ex_font_justify.cpp:116 examples/ex_membmp.c:104 examples/ex_window_title.c:60
+ al_load_font: examples/ex_font_justify.cpp:116 examples/ex_font_multiline.cpp:191 examples/ex_ttf.c:261

- al_create_builtin_font: examples/ex_cpu.c:42 examples/ex_disable_screensaver.c:38 examples/ex_display_events.c:48
+ al_create_builtin_font: examples/ex_audio_props.cpp:182 examples/ex_multisample.c:147 examples/ex_polygon.c:370

- al_draw_ustr: examples/ex_blend.c:61 examples/ex_font_multiline.cpp:254 examples/nihgui.cpp:861
+ al_draw_ustr: examples/ex_blend.c:61 examples/ex_ttf.c:118 examples/nihgui.cpp:861

- al_draw_text: examples/ex_disable_screensaver.c:50 examples/ex_display_events.c:67 examples/ex_membmp.c:11
+ al_draw_text: examples/ex_display_options.c:96 examples/ex_polygon.c:202 examples/ex_ttf.c:73

- al_draw_textf: examples/ex_cpu.c:60 examples/ex_disable_screensaver.c:50 examples/ex_display_events.c:67
+ al_draw_textf: examples/ex_polygon.c:202 examples/ex_premulalpha.c:102 examples/ex_ttf.c:73

- al_get_font_line_height: examples/ex_font_justify.cpp:78 examples/ex_membmp.c:66 examples/ex_mouse_warp.c:54
+ al_get_font_line_height: examples/ex_audio_chain.cpp:307 examples/ex_projection.c:64 examples/nihgui.cpp:474

- al_destroy_font: examples/ex_cpu.c:86 examples/ex_disable_screensaver.c:67 examples/ex_font_justify.cpp:139
+ al_destroy_font: examples/ex_font.c:144 examples/ex_font_multiline.cpp:220 examples/ex_ttf.c:335

- al_init_image_addon: examples/ex_convert.c:29 examples/ex_nodisplay.c:22 examples/ex_opengl_pixel_shader.c:53
+ al_init_image_addon: examples/ex_android.c:70 examples/ex_bitmap.c:61 examples/ex_bitmap_file.c:65

- al_init_native_dialog_addon: examples/common.c:39 examples/ex_menu.c:81 examples/ex_window_maximized.c:58
+ al_init_native_dialog_addon: examples/common.c:39 examples/ex_menu.c:81 examples/ex_native_filechooser.c:180

- al_show_native_message_box: examples/common.c:41 examples/ex_menu.c:223 examples/ex_nodisplay.c:54
+ al_show_native_message_box: examples/common.c:41 examples/ex_menu.c:223 examples/ex_native_filechooser.c:76

- al_get_native_text_log_event_source: examples/common.c:67 examples/ex_resample_test.c:53 examples/ex_saw.c:27
+ al_get_native_text_log_event_source: examples/common.c:67 examples/ex_native_filechooser.c:237 examples/ex_resample_test.c:53

- ALLEGRO_VERTEX: examples/ex_prim_shader.c:61 examples/ex_shader.cpp:97 examples/ex_shader_target.c:94
+ ALLEGRO_VERTEX: examples/ex_prim.c:67 examples/ex_prim_shader.c:61 examples/ex_vertex_buffer.c:22

- al_draw_line: examples/ex_font_justify.cpp:85 examples/ex_mouse_warp.c:59 examples/ex_resize.c:17
+ al_draw_line: examples/ex_audio_chain.cpp:324 examples/ex_color2.c:152 examples/ex_depth_target.c:69

- al_draw_rectangle: examples/ex_font_justify.cpp:83 examples/ex_mouse.c:24 examples/ex_subbitmap.c:206
+ al_draw_rectangle: examples/ex_joystick_events.c:77 examples/ex_subbitmap.c:206 examples/ex_ttf.c:82

- al_draw_filled_rectangle: examples/ex_mouse.c:23 examples/ex_timer.c:91 examples/ex_window_maximized.c:103
+ al_draw_filled_rectangle: examples/ex_blend2.cpp:189 examples/ex_joystick_events.c:76 examples/nihgui.cpp:465

- al_draw_filled_circle: examples/ex_blend2.cpp:255 examples/ex_enet_client.c:247 examples/ex_joystick_hotplugging.c:46
+ al_draw_filled_circle: examples/ex_blend2.cpp:255 examples/ex_color2.c:163 examples/ex_joystick_hotplugging.c:46

- al_draw_filled_rounded_rectangle: examples/ex_prim.c:351 examples/ex_threads.c:90 examples/ex_video.c:57
+ al_draw_filled_rounded_rectangle: examples/ex_audio_chain.cpp:304 examples/ex_prim.c:351 examples/ex_threads.c:90

- al_init_primitives_addon: examples/ex_blend_bench.c:154 examples/ex_enet_client.c:157 examples/ex_touch_input.c:55
+ al_init_primitives_addon: examples/ex_android.c:67 examples/ex_audio_chain.cpp:683 examples/ex_audio_props.cpp:159

- al_draw_prim: examples/ex_camera.c:357 examples/ex_prim_shader.c:187 examples/ex_vertex_buffer.c:61
+ al_draw_prim: examples/ex_camera.c:357 examples/ex_prim.c:98 examples/ex_prim_shader.c:187

- al_init_ttf_addon: examples/ex_color.cpp:198 examples/ex_font_justify.cpp:105 examples/ex_font_multiline.cpp:181
+ al_init_ttf_addon: examples/ex_audio_chain.cpp:687 examples/ex_color.cpp:198 examples/ex_depth_mask.c:132",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1187,2020-10-28T08:23:17Z,2020-11-26T22:40:58Z,2020-11-28T21:00:33Z,CLOSED,False,366,6,6,https://github.com/pedro-w,Generate links to example source code in the reference manual,3,[],https://github.com/liballeg/allegro5/pull/1187,https://github.com/SiegeLord,7,https://github.com/liballeg/allegro5/pull/1187#issuecomment-735289908,"Please can you have a look at this? It

Uses the already generated protos file to get the API entries
Scans for each entry in all the examples and picks the best 3 examples for each one
Inserts these into the generated reference manual markdown pages, which are later converted to HTML

The first two items needed a new executable scan_examples and the last was by modifying the existing make_doc.
Tested on Debian and MacOS (not Windows) - in particular I'm not sure I got the CMake dependencies right so that it rebuilds when necessary, and never otherwise.
Fix for #1178","Honestly, I think it does. ex_d3d isn't recommended anymore, ALLEGRO_VERTEX gets ex_prim, ALLEGRO_TRANSFORM gets pretty good examples too.
In general, a meta algorithm would be to maximize the usage examples per some sort of cost measure. In the current algorithm, we don't even account of the number of examples of the API per current file, and the cost measure is how many other APIs are shown. I think the algorithm should incorporate the number of times the API is used in the file, and as for the cost function, I think it's basically constant as you'll probably won't be reading the rest of the example all that closely anyway. If anything, I'd maybe take the cost to be line count.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1188,2020-10-30T01:33:19Z,2020-11-26T22:07:13Z,2020-11-26T22:07:21Z,MERGED,True,190,182,8,https://github.com/greg-kennedy,allegro 4.2: Several fixes to compilation using newer DJGPP releases,4,[],https://github.com/liballeg/allegro5/pull/1188,https://github.com/greg-kennedy,1,https://github.com/liballeg/allegro5/pull/1188,"Allegro 4.2 series has several issues that prevent it from building with DJGPP (MS-DOS) using GCC versions 5.0.0+.  This PR has some commits to resolve them.  More details available in the message for each commit.
Build tested using DJGPP w/ GCC 9.2, latest binutils, Make 3.79.1 in a Windows XP VM.

Re-add missing obj/djgpp and docs/build folders
Revert fix.bat to MS-DOS (CRLF) format
Explicitly set -std=gnu89 and -std=gnu++98 for DJGPP compilation
Remove static qualifier from saved_ds","Allegro 4.2 series has several issues that prevent it from building with DJGPP (MS-DOS) using GCC versions 5.0.0+.  This PR has some commits to resolve them.  More details available in the message for each commit.
Build tested using DJGPP w/ GCC 9.2, latest binutils, Make 3.79.1 in a Windows XP VM.

Re-add missing obj/djgpp and docs/build folders
Revert fix.bat to MS-DOS (CRLF) format
Explicitly set -std=gnu89 and -std=gnu++98 for DJGPP compilation
Remove static qualifier from saved_ds",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1188,2020-10-30T01:33:19Z,2020-11-26T22:07:13Z,2020-11-26T22:07:21Z,MERGED,True,190,182,8,https://github.com/greg-kennedy,allegro 4.2: Several fixes to compilation using newer DJGPP releases,4,[],https://github.com/liballeg/allegro5/pull/1188,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1188#issuecomment-734492448,"Allegro 4.2 series has several issues that prevent it from building with DJGPP (MS-DOS) using GCC versions 5.0.0+.  This PR has some commits to resolve them.  More details available in the message for each commit.
Build tested using DJGPP w/ GCC 9.2, latest binutils, Make 3.79.1 in a Windows XP VM.

Re-add missing obj/djgpp and docs/build folders
Revert fix.bat to MS-DOS (CRLF) format
Explicitly set -std=gnu89 and -std=gnu++98 for DJGPP compilation
Remove static qualifier from saved_ds",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1193,2020-11-17T14:57:25Z,2020-11-18T01:05:45Z,2020-11-18T01:05:50Z,MERGED,True,3,3,1,https://github.com/arganoid,Raise DirectInput MAX_JOYSTICKS to 32 and DEVICE_BUFFER_SIZE to 128,2,[],https://github.com/liballeg/allegro5/pull/1193,https://github.com/arganoid,1,https://github.com/liballeg/allegro5/pull/1193,As discussed at https://www.allegro.cc/forums/thread/618263/1047660,As discussed at https://www.allegro.cc/forums/thread/618263/1047660,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1193,2020-11-17T14:57:25Z,2020-11-18T01:05:45Z,2020-11-18T01:05:50Z,MERGED,True,3,3,1,https://github.com/arganoid,Raise DirectInput MAX_JOYSTICKS to 32 and DEVICE_BUFFER_SIZE to 128,2,[],https://github.com/liballeg/allegro5/pull/1193,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1193#issuecomment-729309492,As discussed at https://www.allegro.cc/forums/thread/618263/1047660,Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1197,2020-11-24T18:48:34Z,2020-11-24T19:02:27Z,2020-11-24T19:02:27Z,CLOSED,False,0,1,1,https://github.com/SiegeLordEx,Test,1,[],https://github.com/liballeg/allegro5/pull/1197,https://github.com/SiegeLordEx,1,https://github.com/liballeg/allegro5/pull/1197,,,True,{'ROCKET': ['https://github.com/pedro-w']}
liballeg/allegro5,https://github.com/liballeg/allegro5,1201,2020-12-07T01:20:23Z,2021-01-09T06:58:40Z,2021-01-09T06:58:40Z,MERGED,True,60,33,5,https://github.com/allefant,add a new display flag ALLEGRO_OPENGL_CORE_PROFILE,1,[],https://github.com/liballeg/allegro5/pull/1201,https://github.com/allefant,1,https://github.com/liballeg/allegro5/pull/1201,"This adds a new display flag, just like the existing ALLEGRO_OPENGL_ES_PROFILE but instead of ""ES"" requests the ""core"" profile. I do not have a specific use for this feature at the moment but it's something also supported by SDL and I believe is required on MacOS to use any OpenGL past version 2.x. Currently only implemented for X11.
This PR also fixes Allegro to work with an OpenGL core profile (on all platforms). Most of the work was already done when it was made to work with the ES profile in the past - there just was 4 uses of a ""glPushClientAttrib"" function which does not exist in the core profile - I replaced its use with an explicit query and restore instead.
With this all examples and tests still work like normal, and all the examples I tried now even work when requesting OpenGL 3.2 with core profile. (To test it's enough to add ALLEGRO_OPENGL | ALLEGRO_OPENGL_3_0 | ALLEGRO_OPENGL_ES_PROFILE to the display flags, that will automatically also set the minimum version to 3.2.)","This adds a new display flag, just like the existing ALLEGRO_OPENGL_ES_PROFILE but instead of ""ES"" requests the ""core"" profile. I do not have a specific use for this feature at the moment but it's something also supported by SDL and I believe is required on MacOS to use any OpenGL past version 2.x. Currently only implemented for X11.
This PR also fixes Allegro to work with an OpenGL core profile (on all platforms). Most of the work was already done when it was made to work with the ES profile in the past - there just was 4 uses of a ""glPushClientAttrib"" function which does not exist in the core profile - I replaced its use with an explicit query and restore instead.
With this all examples and tests still work like normal, and all the examples I tried now even work when requesting OpenGL 3.2 with core profile. (To test it's enough to add ALLEGRO_OPENGL | ALLEGRO_OPENGL_3_0 | ALLEGRO_OPENGL_ES_PROFILE to the display flags, that will automatically also set the minimum version to 3.2.)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1201,2020-12-07T01:20:23Z,2021-01-09T06:58:40Z,2021-01-09T06:58:40Z,MERGED,True,60,33,5,https://github.com/allefant,add a new display flag ALLEGRO_OPENGL_CORE_PROFILE,1,[],https://github.com/liballeg/allegro5/pull/1201,https://github.com/dos1,2,https://github.com/liballeg/allegro5/pull/1201#issuecomment-739646324,"This adds a new display flag, just like the existing ALLEGRO_OPENGL_ES_PROFILE but instead of ""ES"" requests the ""core"" profile. I do not have a specific use for this feature at the moment but it's something also supported by SDL and I believe is required on MacOS to use any OpenGL past version 2.x. Currently only implemented for X11.
This PR also fixes Allegro to work with an OpenGL core profile (on all platforms). Most of the work was already done when it was made to work with the ES profile in the past - there just was 4 uses of a ""glPushClientAttrib"" function which does not exist in the core profile - I replaced its use with an explicit query and restore instead.
With this all examples and tests still work like normal, and all the examples I tried now even work when requesting OpenGL 3.2 with core profile. (To test it's enough to add ALLEGRO_OPENGL | ALLEGRO_OPENGL_3_0 | ALLEGRO_OPENGL_ES_PROFILE to the display flags, that will automatically also set the minimum version to 3.2.)",Seems like the primitives addon gets broken with it.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1201,2020-12-07T01:20:23Z,2021-01-09T06:58:40Z,2021-01-09T06:58:40Z,MERGED,True,60,33,5,https://github.com/allefant,add a new display flag ALLEGRO_OPENGL_CORE_PROFILE,1,[],https://github.com/liballeg/allegro5/pull/1201,https://github.com/allefant,3,https://github.com/liballeg/allegro5/pull/1201#issuecomment-739649792,"This adds a new display flag, just like the existing ALLEGRO_OPENGL_ES_PROFILE but instead of ""ES"" requests the ""core"" profile. I do not have a specific use for this feature at the moment but it's something also supported by SDL and I believe is required on MacOS to use any OpenGL past version 2.x. Currently only implemented for X11.
This PR also fixes Allegro to work with an OpenGL core profile (on all platforms). Most of the work was already done when it was made to work with the ES profile in the past - there just was 4 uses of a ""glPushClientAttrib"" function which does not exist in the core profile - I replaced its use with an explicit query and restore instead.
With this all examples and tests still work like normal, and all the examples I tried now even work when requesting OpenGL 3.2 with core profile. (To test it's enough to add ALLEGRO_OPENGL | ALLEGRO_OPENGL_3_0 | ALLEGRO_OPENGL_ES_PROFILE to the display flags, that will automatically also set the minimum version to 3.2.)","True, and in ex_prim in a slightly different way depending on if the --shader flag is used or not. I wonder if like with the locking code there already is a working code path which is only being used for OpenGL ES right now. Maybe I'll be able to look at it next weekend.
Anyway, means ALLEGRO_OPENGL_CORE_PROFILE just like the existing ALLEGRO_OPENGL_FORWARD_COMPATIBLE will not support the primitives addon (and possibly other things). I'll clarify the documentation about that. I think it's still useful to remove the glPushClientAttrib calls, that seems to at least make basic bitmap loading and drawing work with a non-backward-compatible GL profile.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1201,2020-12-07T01:20:23Z,2021-01-09T06:58:40Z,2021-01-09T06:58:40Z,MERGED,True,60,33,5,https://github.com/allefant,add a new display flag ALLEGRO_OPENGL_CORE_PROFILE,1,[],https://github.com/liballeg/allegro5/pull/1201,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/1201#issuecomment-757107656,"This adds a new display flag, just like the existing ALLEGRO_OPENGL_ES_PROFILE but instead of ""ES"" requests the ""core"" profile. I do not have a specific use for this feature at the moment but it's something also supported by SDL and I believe is required on MacOS to use any OpenGL past version 2.x. Currently only implemented for X11.
This PR also fixes Allegro to work with an OpenGL core profile (on all platforms). Most of the work was already done when it was made to work with the ES profile in the past - there just was 4 uses of a ""glPushClientAttrib"" function which does not exist in the core profile - I replaced its use with an explicit query and restore instead.
With this all examples and tests still work like normal, and all the examples I tried now even work when requesting OpenGL 3.2 with core profile. (To test it's enough to add ALLEGRO_OPENGL | ALLEGRO_OPENGL_3_0 | ALLEGRO_OPENGL_ES_PROFILE to the display flags, that will automatically also set the minimum version to 3.2.)",Looks good to me. I'll take a look at the primitives when I can. I hit the same issue on OSX.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1204,2020-12-12T09:07:07Z,2020-12-12T09:19:49Z,2020-12-12T09:33:44Z,MERGED,True,2,0,1,https://github.com/pedro-w,Explicitly link CoreVideo on MacOS,1,[],https://github.com/liballeg/allegro5/pull/1204,https://github.com/pedro-w,1,https://github.com/liballeg/allegro5/pull/1204,"Without this, the static build will fail.
Thanks to @tehsausage for the bug report/patch
Fixes #1192","Without this, the static build will fail.
Thanks to @tehsausage for the bug report/patch
Fixes #1192",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1204,2020-12-12T09:07:07Z,2020-12-12T09:19:49Z,2020-12-12T09:33:44Z,MERGED,True,2,0,1,https://github.com/pedro-w,Explicitly link CoreVideo on MacOS,1,[],https://github.com/liballeg/allegro5/pull/1204,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1204#issuecomment-743728713,"Without this, the static build will fail.
Thanks to @tehsausage for the bug report/patch
Fixes #1192",Thanks to you both!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1205,2020-12-12T11:47:35Z,,2021-01-09T06:47:08Z,OPEN,False,3,3,1,https://github.com/rmbeer,Update documentation of utf8,1,[],https://github.com/liballeg/allegro5/pull/1205,https://github.com/rmbeer,1,https://github.com/liballeg/allegro5/pull/1205,"Correction of the 3 lines in the utf8.txt documentation, which better explains what happens when the original string is released.","Correction of the 3 lines in the utf8.txt documentation, which better explains what happens when the original string is released.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1205,2020-12-12T11:47:35Z,,2021-01-09T06:47:08Z,OPEN,False,3,3,1,https://github.com/rmbeer,Update documentation of utf8,1,[],https://github.com/liballeg/allegro5/pull/1205,https://github.com/rmbeer,2,https://github.com/liballeg/allegro5/pull/1205#issuecomment-743745785,"Correction of the 3 lines in the utf8.txt documentation, which better explains what happens when the original string is released.",Fallo manejando github.,True,{'ROCKET': ['https://github.com/pedro-w']}
liballeg/allegro5,https://github.com/liballeg/allegro5,1205,2020-12-12T11:47:35Z,,2021-01-09T06:47:08Z,OPEN,False,3,3,1,https://github.com/rmbeer,Update documentation of utf8,1,[],https://github.com/liballeg/allegro5/pull/1205,https://github.com/pedro-w,3,https://github.com/liballeg/allegro5/pull/1205#issuecomment-743776072,"Correction of the 3 lines in the utf8.txt documentation, which better explains what happens when the original string is released.",You can link a PR to the issue it's going to fix - see GitHub docs,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1205,2020-12-12T11:47:35Z,,2021-01-09T06:47:08Z,OPEN,False,3,3,1,https://github.com/rmbeer,Update documentation of utf8,1,[],https://github.com/liballeg/allegro5/pull/1205,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/1205#issuecomment-757106570,"Correction of the 3 lines in the utf8.txt documentation, which better explains what happens when the original string is released.","That's not quite the issue with the documentation. The issue is that the returned string is also tied to the info struct, not the other way around. The sentence should be ""The returned string is valid while the underlying memory buffer and the info struct are valid.""",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1207,2020-12-14T17:00:51Z,2020-12-14T20:55:00Z,2020-12-14T20:55:08Z,MERGED,True,1,1,1,https://github.com/greg-kennedy,Fix compile warning in al_findfirst (src/dos/dfile.c),1,[],https://github.com/liballeg/allegro5/pull/1207,https://github.com/greg-kennedy,1,https://github.com/liballeg/allegro5/pull/1207,"This function is returning NULL when hitting an out-of-memory error, but it is supposed to return int.  The correct ""error"" return code for this function is -1.","This function is returning NULL when hitting an out-of-memory error, but it is supposed to return int.  The correct ""error"" return code for this function is -1.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1207,2020-12-14T17:00:51Z,2020-12-14T20:55:00Z,2020-12-14T20:55:08Z,MERGED,True,1,1,1,https://github.com/greg-kennedy,Fix compile warning in al_findfirst (src/dos/dfile.c),1,[],https://github.com/liballeg/allegro5/pull/1207,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1207#issuecomment-744704830,"This function is returning NULL when hitting an out-of-memory error, but it is supposed to return int.  The correct ""error"" return code for this function is -1.",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1208,2020-12-15T20:33:58Z,2021-01-03T06:46:55Z,2021-01-03T06:46:55Z,MERGED,True,3,4,1,https://github.com/pedro-w,Correct initialisation for WaitableTimer,1,[],https://github.com/liballeg/allegro5/pull/1208,https://github.com/pedro-w,1,https://github.com/liballeg/allegro5/pull/1208,fixes #1202,fixes #1202,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1208,2020-12-15T20:33:58Z,2021-01-03T06:46:55Z,2021-01-03T06:46:55Z,MERGED,True,3,4,1,https://github.com/pedro-w,Correct initialisation for WaitableTimer,1,[],https://github.com/liballeg/allegro5/pull/1208,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1208#issuecomment-753576635,fixes #1202,Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1209,2020-12-15T20:35:24Z,2021-01-03T06:45:31Z,2021-01-03T06:45:31Z,MERGED,True,15,8,2,https://github.com/pedro-w,Use strtok and strchr instead of strsep,1,[],https://github.com/liballeg/allegro5/pull/1209,https://github.com/pedro-w,1,https://github.com/liballeg/allegro5/pull/1209,"These functions are more portable.
fixes #1203","These functions are more portable.
fixes #1203",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1209,2020-12-15T20:35:24Z,2021-01-03T06:45:31Z,2021-01-03T06:45:31Z,MERGED,True,15,8,2,https://github.com/pedro-w,Use strtok and strchr instead of strsep,1,[],https://github.com/liballeg/allegro5/pull/1209,https://github.com/pedro-w,2,https://github.com/liballeg/allegro5/pull/1209#issuecomment-748313011,"These functions are more portable.
fixes #1203",@EdgarReynaldo reported that this does fix #1203,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1209,2020-12-15T20:35:24Z,2021-01-03T06:45:31Z,2021-01-03T06:45:31Z,MERGED,True,15,8,2,https://github.com/pedro-w,Use strtok and strchr instead of strsep,1,[],https://github.com/liballeg/allegro5/pull/1209,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/1209#issuecomment-753576534,"These functions are more portable.
fixes #1203",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1214,2021-01-08T08:19:16Z,2021-01-09T06:40:16Z,2021-01-09T07:27:24Z,MERGED,True,2,2,1,https://github.com/fleger,allegro4: xwin.c: fix broken xwin_set_window_name,1,[],https://github.com/liballeg/allegro5/pull/1214,https://github.com/fleger,1,https://github.com/liballeg/allegro5/pull/1214,"Commit f052708 that introduced the use of three windows
broke xwin_set_window_name.
Adopt the same approach as commit 2e64350
and fix this by setting the Class Hints for the managed window instead of
the real window.","Commit f052708 that introduced the use of three windows
broke xwin_set_window_name.
Adopt the same approach as commit 2e64350
and fix this by setting the Class Hints for the managed window instead of
the real window.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1214,2021-01-08T08:19:16Z,2021-01-09T06:40:16Z,2021-01-09T07:27:24Z,MERGED,True,2,2,1,https://github.com/fleger,allegro4: xwin.c: fix broken xwin_set_window_name,1,[],https://github.com/liballeg/allegro5/pull/1214,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1214#issuecomment-757106038,"Commit f052708 that introduced the use of three windows
broke xwin_set_window_name.
Adopt the same approach as commit 2e64350
and fix this by setting the Class Hints for the managed window instead of
the real window.",Seems reasonable. Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1214,2021-01-08T08:19:16Z,2021-01-09T06:40:16Z,2021-01-09T07:27:24Z,MERGED,True,2,2,1,https://github.com/fleger,allegro4: xwin.c: fix broken xwin_set_window_name,1,[],https://github.com/liballeg/allegro5/pull/1214,https://github.com/fleger,3,https://github.com/liballeg/allegro5/pull/1214#issuecomment-757110441,"Commit f052708 that introduced the use of three windows
broke xwin_set_window_name.
Adopt the same approach as commit 2e64350
and fix this by setting the Class Hints for the managed window instead of
the real window.",Thank you!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1216,2021-01-11T05:53:48Z,2021-01-12T04:20:48Z,2021-01-12T04:20:51Z,MERGED,True,21,5,6,https://github.com/SiegeLord,Allow minimum bitmap size to be something other than 16 on non-Android platforms,1,[],https://github.com/liballeg/allegro5/pull/1216,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1216,Fixes #1210,Fixes #1210,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1217,2021-01-11T06:41:54Z,2021-01-12T04:16:43Z,2021-01-12T04:16:43Z,MERGED,True,453,28,6,https://github.com/SiegeLord,Allow calling al_map_* color functions before Allegro is initialized.,1,[],https://github.com/liballeg/allegro5/pull/1217,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1217,,,True,"{'THUMBS_UP': ['https://github.com/pedro-w', 'https://github.com/rlam1']}"
liballeg/allegro5,https://github.com/liballeg/allegro5,1218,2021-01-13T06:28:50Z,,2021-01-24T08:22:06Z,OPEN,False,27,27,13,https://github.com/EdgarReynaldo,Marek Ratajczak's 64-bit patch,1,[],https://github.com/liballeg/allegro5/pull/1218,https://github.com/EdgarReynaldo,1,https://github.com/liballeg/allegro5/pull/1218,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1218,2021-01-13T06:28:50Z,,2021-01-24T08:22:06Z,OPEN,False,27,27,13,https://github.com/EdgarReynaldo,Marek Ratajczak's 64-bit patch,1,[],https://github.com/liballeg/allegro5/pull/1218,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1218#issuecomment-759731459,,"I wouldn't even begin to know how to compile A4 on windows, could someone try this?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1218,2021-01-13T06:28:50Z,,2021-01-24T08:22:06Z,OPEN,False,27,27,13,https://github.com/EdgarReynaldo,Marek Ratajczak's 64-bit patch,1,[],https://github.com/liballeg/allegro5/pull/1218,https://github.com/pedro-w,3,https://github.com/liballeg/allegro5/pull/1218#issuecomment-760027141,,"This may be a bit late but I wish we could use the stdint.h support and say int64_t, int32_t etc instead of relying on long long or long or whatever.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1218,2021-01-13T06:28:50Z,,2021-01-24T08:22:06Z,OPEN,False,27,27,13,https://github.com/EdgarReynaldo,Marek Ratajczak's 64-bit patch,1,[],https://github.com/liballeg/allegro5/pull/1218,https://github.com/EdgarReynaldo,4,https://github.com/liballeg/allegro5/pull/1218#issuecomment-766234785,,I will try to build in next day or so - @pedro-w why can't we use stdint.h? don't we use it else where?,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1218,2021-01-13T06:28:50Z,,2021-01-24T08:22:06Z,OPEN,False,27,27,13,https://github.com/EdgarReynaldo,Marek Ratajczak's 64-bit patch,1,[],https://github.com/liballeg/allegro5/pull/1218,https://github.com/pedro-w,5,https://github.com/liballeg/allegro5/pull/1218#issuecomment-766310318,,"@EdgarReynaldo I didn't mean we can't, just that we haven't in this patch. It is used quite extensively in the rest of the code. I think it would be better but it's not my place to insist on anything and I don't have the time to propose the changes myself.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1219,2021-01-20T03:45:11Z,2021-01-24T10:13:13Z,2021-01-24T10:13:13Z,MERGED,True,44,3,3,https://github.com/SiegeLord,Allow pressing 'S' to focus the search bar in the docs.,1,[],https://github.com/liballeg/allegro5/pull/1219,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1219,"Also fix some display issues.
Fixes liballeg/liballeg.github.io#4","Also fix some display issues.
Fixes liballeg/liballeg.github.io#4",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1220,2021-01-26T22:37:52Z,2021-01-27T03:07:57Z,2021-01-27T03:08:11Z,MERGED,True,12,12,1,https://github.com/goliath-tornado,high level primitives don't tessellate correctly when scale is very small ,1,[],https://github.com/liballeg/allegro5/pull/1220,https://github.com/goliath-tornado,1,https://github.com/liballeg/allegro5/pull/1220,This should fully resolve issue #1215,This should fully resolve issue #1215,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1220,2021-01-26T22:37:52Z,2021-01-27T03:07:57Z,2021-01-27T03:08:11Z,MERGED,True,12,12,1,https://github.com/goliath-tornado,high level primitives don't tessellate correctly when scale is very small ,1,[],https://github.com/liballeg/allegro5/pull/1220,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1220#issuecomment-767984594,This should fully resolve issue #1215,Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1221,2021-01-31T11:05:08Z,2021-03-07T20:37:49Z,2021-03-21T07:56:38Z,CLOSED,False,17,0,1,https://github.com/CarlosAndresRamirez,Create SECURITY.md,1,[],https://github.com/liballeg/allegro5/pull/1221,https://github.com/CarlosAndresRamirez,1,https://github.com/liballeg/allegro5/pull/1221,"The Allegro library is being used in academic environments and production environments for games (commercial and free) and other tools. A policy to assure some degree of security and quality must be put in place.
I am a security engineer (and Allegro user for 17+ years). I am willing to contribute in this process.","The Allegro library is being used in academic environments and production environments for games (commercial and free) and other tools. A policy to assure some degree of security and quality must be put in place.
I am a security engineer (and Allegro user for 17+ years). I am willing to contribute in this process.",True,{'THUMBS_UP': ['https://github.com/rlam1']}
liballeg/allegro5,https://github.com/liballeg/allegro5,1221,2021-01-31T11:05:08Z,2021-03-07T20:37:49Z,2021-03-21T07:56:38Z,CLOSED,False,17,0,1,https://github.com/CarlosAndresRamirez,Create SECURITY.md,1,[],https://github.com/liballeg/allegro5/pull/1221,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1221#issuecomment-770457719,"The Allegro library is being used in academic environments and production environments for games (commercial and free) and other tools. A policy to assure some degree of security and quality must be put in place.
I am a security engineer (and Allegro user for 17+ years). I am willing to contribute in this process.",This seems to be alright. What email is typically used? A developer's email? Some sort of private mail list?,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1221,2021-01-31T11:05:08Z,2021-03-07T20:37:49Z,2021-03-21T07:56:38Z,CLOSED,False,17,0,1,https://github.com/CarlosAndresRamirez,Create SECURITY.md,1,[],https://github.com/liballeg/allegro5/pull/1221,https://github.com/pedro-w,3,https://github.com/liballeg/allegro5/pull/1221#issuecomment-770463137,"The Allegro library is being used in academic environments and production environments for games (commercial and free) and other tools. A policy to assure some degree of security and quality must be put in place.
I am a security engineer (and Allegro user for 17+ years). I am willing to contribute in this process.","Relevant info is here:
https://docs.github.com/en/github/managing-security-vulnerabilities/managing-security-vulnerabilities-in-your-project
I haven't read it fully yet but AFAICS someone with admin access would create a (private) security advisory and then invite the person reporting the issue to collaborate on it. Then when it's fixed the advisory can be made public. So we need some way of the person who has found the vulnerability to make initial contact. This could be someone's email or a special address set up for that purpose. I don't think github helps with this.
@CarlosAndresRamirez  is that the way it works in your experience?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1221,2021-01-31T11:05:08Z,2021-03-07T20:37:49Z,2021-03-21T07:56:38Z,CLOSED,False,17,0,1,https://github.com/CarlosAndresRamirez,Create SECURITY.md,1,[],https://github.com/liballeg/allegro5/pull/1221,https://github.com/CarlosAndresRamirez,4,https://github.com/liballeg/allegro5/pull/1221#issuecomment-770474910,"The Allegro library is being used in academic environments and production environments for games (commercial and free) and other tools. A policy to assure some degree of security and quality must be put in place.
I am a security engineer (and Allegro user for 17+ years). I am willing to contribute in this process.","Yes,  @pedro-w is right. Usually a private mailing list is used (devs only).
The security policy has to be realistic, what I provided is just an initial template - feel free to adjust to what you think is doable. While most of the the projects that integrate Allegro are small projects, from time to time some popular/commercial games (Liquid War and Factorio come to my mind) do use the library. It is important to provide some visibility on what can be expected, or at least provide the assurance that security reports get looked into.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1221,2021-01-31T11:05:08Z,2021-03-07T20:37:49Z,2021-03-21T07:56:38Z,CLOSED,False,17,0,1,https://github.com/CarlosAndresRamirez,Create SECURITY.md,1,[],https://github.com/liballeg/allegro5/pull/1221,https://github.com/beoran,5,https://github.com/liballeg/allegro5/pull/1221#issuecomment-770792688,"The Allegro library is being used in academic environments and production environments for games (commercial and free) and other tools. A policy to assure some degree of security and quality must be put in place.
I am a security engineer (and Allegro user for 17+ years). I am willing to contribute in this process.","Too bad GitHub doesn't support private issues like GitLab does, we could have used those. But yes, a simple security policy would be helpful.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1221,2021-01-31T11:05:08Z,2021-03-07T20:37:49Z,2021-03-21T07:56:38Z,CLOSED,False,17,0,1,https://github.com/CarlosAndresRamirez,Create SECURITY.md,1,[],https://github.com/liballeg/allegro5/pull/1221,https://github.com/SiegeLord,6,https://github.com/liballeg/allegro5/pull/1221#issuecomment-792348215,"The Allegro library is being used in academic environments and production environments for games (commercial and free) and other tools. A policy to assure some degree of security and quality must be put in place.
I am a security engineer (and Allegro user for 17+ years). I am willing to contribute in this process.","Ok, we added something like this in b8076fe. I ended up creating a private mailing list. I just added myself and Elias to it as members, but feel free to ping me and request membership. I fully expect this to never receive a single non-spam email though, hah!",True,"{'THUMBS_UP': ['https://github.com/pedro-w', 'https://github.com/beoran', 'https://github.com/CarlosAndresRamirez']}"
liballeg/allegro5,https://github.com/liballeg/allegro5,1221,2021-01-31T11:05:08Z,2021-03-07T20:37:49Z,2021-03-21T07:56:38Z,CLOSED,False,17,0,1,https://github.com/CarlosAndresRamirez,Create SECURITY.md,1,[],https://github.com/liballeg/allegro5/pull/1221,https://github.com/CarlosAndresRamirez,7,https://github.com/liballeg/allegro5/pull/1221#issuecomment-792846404,"The Allegro library is being used in academic environments and production environments for games (commercial and free) and other tools. A policy to assure some degree of security and quality must be put in place.
I am a security engineer (and Allegro user for 17+ years). I am willing to contribute in this process.","Thanks @SiegeLord
This will give some assurance regarding quality and best practices of the project. Hopefully there will not be many reports in the future.
I'll be happy to support any security reviews/reports/fixes.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1221,2021-01-31T11:05:08Z,2021-03-07T20:37:49Z,2021-03-21T07:56:38Z,CLOSED,False,17,0,1,https://github.com/CarlosAndresRamirez,Create SECURITY.md,1,[],https://github.com/liballeg/allegro5/pull/1221,https://github.com/pedro-w,8,https://github.com/liballeg/allegro5/pull/1221#issuecomment-799248884,"The Allegro library is being used in academic environments and production environments for games (commercial and free) and other tools. A policy to assure some degree of security and quality must be put in place.
I am a security engineer (and Allegro user for 17+ years). I am willing to contribute in this process.",@CarlosAndresRamirez what do you think of https://securitytxt.org/ ?,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1221,2021-01-31T11:05:08Z,2021-03-07T20:37:49Z,2021-03-21T07:56:38Z,CLOSED,False,17,0,1,https://github.com/CarlosAndresRamirez,Create SECURITY.md,1,[],https://github.com/liballeg/allegro5/pull/1221,https://github.com/CarlosAndresRamirez,9,https://github.com/liballeg/allegro5/pull/1221#issuecomment-799890946,"The Allegro library is being used in academic environments and production environments for games (commercial and free) and other tools. A policy to assure some degree of security and quality must be put in place.
I am a security engineer (and Allegro user for 17+ years). I am willing to contribute in this process.","@pedro-w
Yes, the security.txt file from https://securitytxt.org/ is a good approach.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1221,2021-01-31T11:05:08Z,2021-03-07T20:37:49Z,2021-03-21T07:56:38Z,CLOSED,False,17,0,1,https://github.com/CarlosAndresRamirez,Create SECURITY.md,1,[],https://github.com/liballeg/allegro5/pull/1221,https://github.com/pedro-w,10,https://github.com/liballeg/allegro5/pull/1221#issuecomment-802690318,"The Allegro library is being used in academic environments and production environments for games (commercial and free) and other tools. A policy to assure some degree of security and quality must be put in place.
I am a security engineer (and Allegro user for 17+ years). I am willing to contribute in this process.","I suppose the question was really : do you think we should create a /.well-known/security.txt on github and/or liballeg.org? It's additional to what's already been done on SECURITY.md, so more work to maintain. Is there one approach that's becoming the accepted standard?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1221,2021-01-31T11:05:08Z,2021-03-07T20:37:49Z,2021-03-21T07:56:38Z,CLOSED,False,17,0,1,https://github.com/CarlosAndresRamirez,Create SECURITY.md,1,[],https://github.com/liballeg/allegro5/pull/1221,https://github.com/CarlosAndresRamirez,11,https://github.com/liballeg/allegro5/pull/1221#issuecomment-803528118,"The Allegro library is being used in academic environments and production environments for games (commercial and free) and other tools. A policy to assure some degree of security and quality must be put in place.
I am a security engineer (and Allegro user for 17+ years). I am willing to contribute in this process.","Having the SECURITY.md included in the sources should be enough; it is what most projects do. Adding it to /.well-known/security.txt and following the https://securitytxt.org/ standards would be a plus, but yes, as you said, it would be an additional file to maintain.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1223,2021-02-07T22:00:01Z,2021-03-01T08:16:03Z,2021-03-01T08:16:03Z,CLOSED,False,118,2,5,https://github.com/elias-pschernig,enable logs and fix al_get_next_event for emscripten,8,[],https://github.com/liballeg/allegro5/pull/1223,https://github.com/elias-pschernig,1,https://github.com/liballeg/allegro5/pull/1223,"For getting logs, with emscripten stdout appears in the logs so I simply made Allegro's logging functions write to stdout instead of a file when compiling with emcc.
With emscripten you normally cannot directly use the main() function once converted to javascript because it never returns, so the website would just hang. Instead you create a function which handles one frame and then call it repeatedly from a javascript timer. That's how we previously got some Allegro programs to work by compiling against the SDL2 port and then modifying code so it would not use main().
However there is an alternative way called ASYNCIFY: https://emscripten.org/docs/porting/asyncify.html
It transforms the C code into javascript code which can pause and resume any function, and specifically does so whenever a call to emscripten_sleep() is made. I added a small hack to al_wait_next_event to instead of waiting forever (which would immediately deadlock all of the Allegro examples) repeatedly call emscripten_sleep(1). That way most of the unmodified Allegro examples seem to work.
The existing heartbeat() used for SDL2 does not work for this because al_wait_next_event() with the SDL driver relies on some timer to wake up the unconditional wait (our SDL2 port when not using a timer is currently broken as we cannot receive any SDL events until a timer is triggered).
So, basically this adds another hack on top of the SDL2 hack, but it works rather well: I got 2/3 demos working and after compiling freetype, ttf and ogg/vorbis to javascript I believe over 100/137 examples: http://allegro5.org/examples
The speed demo uses some of the more unusual event functions instead of al_get_next_event() and should be easy to fix but like with the normal SDL2 driver I don't know if there's a good method that will work in all possible cases.
Audio is all messed up, haven't investigated that yet.
If someone wants to reproduce, this is the script I used to configure Allegro to compile the examples:
# we need to call emsdk_env.sh to set up all the emscripten paths
. /home/elias/stuff/emscripten/emsdk/emsdk_env.sh
mkdir build_emscripten
cd build_emscripten

USE_FLAGS=(
    -s USE_FREETYPE=1
    -s USE_VORBIS=1
    -s USE_OGG=1
    -s USE_LIBJPEG=1
    -s USE_SDL=2
    -s USE_LIBPNG=1
    -s FULL_ES2=1
    -s ASYNCIFY
    -s TOTAL_MEMORY=2147418112
    -O3
    )

emscripten=(
    emcmake cmake ../../allegro/git
    -D CMAKE_BUILD_TYPE=Debug
    -D ALLEGRO_SDL=ON
    -D SHARED=OFF
    -D WANT_MONOLITH=ON
    -D WANT_ALLOW_SSE=OFF
    -D WANT_DOCS=OFF
    -D WANT_TESTS=OFF
    -D WANT_OPENAL=OFF
     # not sure why these are not found automatically with emcmake, so
     # we use a  hack - we manually specify the cache path, so cmake
     # will fail on first run in the compile test but populate the cache
     # (from the -s options) and on second run it all works
    -D SDL2_INCLUDE_DIR=$EM_CACHE/include
    -D PNG_PNG_INCLUDE_DIR=$EM_CACHE/include
    -D PNG_LIBRARY=$EM_CACHE/wasm/libpng.a
    -D JPEG_INCLUDE_DIR=$EM_CACHE/include
    -D JPEG_LIBRARY=$EM_CACHE/wasm/libjpeg.a
    -D FREETYPE_INCLUDE_DIRS=$EM_CACHE/include
    -D FREETYPE_LIBRARY=$EM_CACHE/wasm/libfreetype.a
    -D VORBIS_INCLUDE_DIR=$EM_CACHE/include/vorbis
    -D VORBIS_LIBRARY=$EM_CACHE/wasm/libvorbis.a
    -D VORBISFILE_LIBRARY=$EM_CACHE/wasm/libvorbis.a
    -D OGG_INCLUDE_DIR=$EM_CACHE/include
    -D OGG_LIBRARY=$EM_CACHE/wasm/libogg.a
    -D CMAKE_C_FLAGS=""${USE_FLAGS[@]}""
    -D CMAKE_CXX_FLAGS=""${USE_FLAGS[@]}""
    -D CMAKE_EXE_LINKER_FLAGS=""${USE_FLAGS[@]} --preload-file data""
     # does not actually work (but can edit the toolchain file)
    -D CMAKE_EXECUTABLE_SUFFIX="".html""
   )

""${emscripten[@]}"" # will fail if ports are not downloaded yet
""${emscripten[@]}"" # second time it should succeed

# set a link to the data dir, that way emcc can pack it up for each example
( cd examples; ln -s ../../../allegro/git/examples/data )
# create empty data dir in case of the speed demo
mkdir demos/speed/data
touch demos/speed/data/nothing.txt

emmake make","For getting logs, with emscripten stdout appears in the logs so I simply made Allegro's logging functions write to stdout instead of a file when compiling with emcc.
With emscripten you normally cannot directly use the main() function once converted to javascript because it never returns, so the website would just hang. Instead you create a function which handles one frame and then call it repeatedly from a javascript timer. That's how we previously got some Allegro programs to work by compiling against the SDL2 port and then modifying code so it would not use main().
However there is an alternative way called ASYNCIFY: https://emscripten.org/docs/porting/asyncify.html
It transforms the C code into javascript code which can pause and resume any function, and specifically does so whenever a call to emscripten_sleep() is made. I added a small hack to al_wait_next_event to instead of waiting forever (which would immediately deadlock all of the Allegro examples) repeatedly call emscripten_sleep(1). That way most of the unmodified Allegro examples seem to work.
The existing heartbeat() used for SDL2 does not work for this because al_wait_next_event() with the SDL driver relies on some timer to wake up the unconditional wait (our SDL2 port when not using a timer is currently broken as we cannot receive any SDL events until a timer is triggered).
So, basically this adds another hack on top of the SDL2 hack, but it works rather well: I got 2/3 demos working and after compiling freetype, ttf and ogg/vorbis to javascript I believe over 100/137 examples: http://allegro5.org/examples
The speed demo uses some of the more unusual event functions instead of al_get_next_event() and should be easy to fix but like with the normal SDL2 driver I don't know if there's a good method that will work in all possible cases.
Audio is all messed up, haven't investigated that yet.
If someone wants to reproduce, this is the script I used to configure Allegro to compile the examples:
# we need to call emsdk_env.sh to set up all the emscripten paths
. /home/elias/stuff/emscripten/emsdk/emsdk_env.sh
mkdir build_emscripten
cd build_emscripten

USE_FLAGS=(
    -s USE_FREETYPE=1
    -s USE_VORBIS=1
    -s USE_OGG=1
    -s USE_LIBJPEG=1
    -s USE_SDL=2
    -s USE_LIBPNG=1
    -s FULL_ES2=1
    -s ASYNCIFY
    -s TOTAL_MEMORY=2147418112
    -O3
    )

emscripten=(
    emcmake cmake ../../allegro/git
    -D CMAKE_BUILD_TYPE=Debug
    -D ALLEGRO_SDL=ON
    -D SHARED=OFF
    -D WANT_MONOLITH=ON
    -D WANT_ALLOW_SSE=OFF
    -D WANT_DOCS=OFF
    -D WANT_TESTS=OFF
    -D WANT_OPENAL=OFF
     # not sure why these are not found automatically with emcmake, so
     # we use a  hack - we manually specify the cache path, so cmake
     # will fail on first run in the compile test but populate the cache
     # (from the -s options) and on second run it all works
    -D SDL2_INCLUDE_DIR=$EM_CACHE/include
    -D PNG_PNG_INCLUDE_DIR=$EM_CACHE/include
    -D PNG_LIBRARY=$EM_CACHE/wasm/libpng.a
    -D JPEG_INCLUDE_DIR=$EM_CACHE/include
    -D JPEG_LIBRARY=$EM_CACHE/wasm/libjpeg.a
    -D FREETYPE_INCLUDE_DIRS=$EM_CACHE/include
    -D FREETYPE_LIBRARY=$EM_CACHE/wasm/libfreetype.a
    -D VORBIS_INCLUDE_DIR=$EM_CACHE/include/vorbis
    -D VORBIS_LIBRARY=$EM_CACHE/wasm/libvorbis.a
    -D VORBISFILE_LIBRARY=$EM_CACHE/wasm/libvorbis.a
    -D OGG_INCLUDE_DIR=$EM_CACHE/include
    -D OGG_LIBRARY=$EM_CACHE/wasm/libogg.a
    -D CMAKE_C_FLAGS=""${USE_FLAGS[@]}""
    -D CMAKE_CXX_FLAGS=""${USE_FLAGS[@]}""
    -D CMAKE_EXE_LINKER_FLAGS=""${USE_FLAGS[@]} --preload-file data""
     # does not actually work (but can edit the toolchain file)
    -D CMAKE_EXECUTABLE_SUFFIX="".html""
   )

""${emscripten[@]}"" # will fail if ports are not downloaded yet
""${emscripten[@]}"" # second time it should succeed

# set a link to the data dir, that way emcc can pack it up for each example
( cd examples; ln -s ../../../allegro/git/examples/data )
# create empty data dir in case of the speed demo
mkdir demos/speed/data
touch demos/speed/data/nothing.txt

emmake make",True,{'THUMBS_UP': ['https://github.com/beoran']}
liballeg/allegro5,https://github.com/liballeg/allegro5,1223,2021-02-07T22:00:01Z,2021-03-01T08:16:03Z,2021-03-01T08:16:03Z,CLOSED,False,118,2,5,https://github.com/elias-pschernig,enable logs and fix al_get_next_event for emscripten,8,[],https://github.com/liballeg/allegro5/pull/1223,https://github.com/elias-pschernig,2,https://github.com/liballeg/allegro5/pull/1223#issuecomment-778835911,"For getting logs, with emscripten stdout appears in the logs so I simply made Allegro's logging functions write to stdout instead of a file when compiling with emcc.
With emscripten you normally cannot directly use the main() function once converted to javascript because it never returns, so the website would just hang. Instead you create a function which handles one frame and then call it repeatedly from a javascript timer. That's how we previously got some Allegro programs to work by compiling against the SDL2 port and then modifying code so it would not use main().
However there is an alternative way called ASYNCIFY: https://emscripten.org/docs/porting/asyncify.html
It transforms the C code into javascript code which can pause and resume any function, and specifically does so whenever a call to emscripten_sleep() is made. I added a small hack to al_wait_next_event to instead of waiting forever (which would immediately deadlock all of the Allegro examples) repeatedly call emscripten_sleep(1). That way most of the unmodified Allegro examples seem to work.
The existing heartbeat() used for SDL2 does not work for this because al_wait_next_event() with the SDL driver relies on some timer to wake up the unconditional wait (our SDL2 port when not using a timer is currently broken as we cannot receive any SDL events until a timer is triggered).
So, basically this adds another hack on top of the SDL2 hack, but it works rather well: I got 2/3 demos working and after compiling freetype, ttf and ogg/vorbis to javascript I believe over 100/137 examples: http://allegro5.org/examples
The speed demo uses some of the more unusual event functions instead of al_get_next_event() and should be easy to fix but like with the normal SDL2 driver I don't know if there's a good method that will work in all possible cases.
Audio is all messed up, haven't investigated that yet.
If someone wants to reproduce, this is the script I used to configure Allegro to compile the examples:
# we need to call emsdk_env.sh to set up all the emscripten paths
. /home/elias/stuff/emscripten/emsdk/emsdk_env.sh
mkdir build_emscripten
cd build_emscripten

USE_FLAGS=(
    -s USE_FREETYPE=1
    -s USE_VORBIS=1
    -s USE_OGG=1
    -s USE_LIBJPEG=1
    -s USE_SDL=2
    -s USE_LIBPNG=1
    -s FULL_ES2=1
    -s ASYNCIFY
    -s TOTAL_MEMORY=2147418112
    -O3
    )

emscripten=(
    emcmake cmake ../../allegro/git
    -D CMAKE_BUILD_TYPE=Debug
    -D ALLEGRO_SDL=ON
    -D SHARED=OFF
    -D WANT_MONOLITH=ON
    -D WANT_ALLOW_SSE=OFF
    -D WANT_DOCS=OFF
    -D WANT_TESTS=OFF
    -D WANT_OPENAL=OFF
     # not sure why these are not found automatically with emcmake, so
     # we use a  hack - we manually specify the cache path, so cmake
     # will fail on first run in the compile test but populate the cache
     # (from the -s options) and on second run it all works
    -D SDL2_INCLUDE_DIR=$EM_CACHE/include
    -D PNG_PNG_INCLUDE_DIR=$EM_CACHE/include
    -D PNG_LIBRARY=$EM_CACHE/wasm/libpng.a
    -D JPEG_INCLUDE_DIR=$EM_CACHE/include
    -D JPEG_LIBRARY=$EM_CACHE/wasm/libjpeg.a
    -D FREETYPE_INCLUDE_DIRS=$EM_CACHE/include
    -D FREETYPE_LIBRARY=$EM_CACHE/wasm/libfreetype.a
    -D VORBIS_INCLUDE_DIR=$EM_CACHE/include/vorbis
    -D VORBIS_LIBRARY=$EM_CACHE/wasm/libvorbis.a
    -D VORBISFILE_LIBRARY=$EM_CACHE/wasm/libvorbis.a
    -D OGG_INCLUDE_DIR=$EM_CACHE/include
    -D OGG_LIBRARY=$EM_CACHE/wasm/libogg.a
    -D CMAKE_C_FLAGS=""${USE_FLAGS[@]}""
    -D CMAKE_CXX_FLAGS=""${USE_FLAGS[@]}""
    -D CMAKE_EXE_LINKER_FLAGS=""${USE_FLAGS[@]} --preload-file data""
     # does not actually work (but can edit the toolchain file)
    -D CMAKE_EXECUTABLE_SUFFIX="".html""
   )

""${emscripten[@]}"" # will fail if ports are not downloaded yet
""${emscripten[@]}"" # second time it should succeed

# set a link to the data dir, that way emcc can pack it up for each example
( cd examples; ln -s ../../../allegro/git/examples/data )
# create empty data dir in case of the speed demo
mkdir demos/speed/data
touch demos/speed/data/nothing.txt

emmake make","The audio issues were caused by a bug in the SDL driver and are all fixed, here's e.g. ex_haiku in a web browser: http://allegro5.org/examples/examples/ex_haiku.html
I don't really have a better idea at this moment for the lack of threads - once -pthread is supported in emscripten-SDL2 we can get rid of the loop-with-sleep method introduced by this PR but for now it's a hack that seems to work.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1223,2021-02-07T22:00:01Z,2021-03-01T08:16:03Z,2021-03-01T08:16:03Z,CLOSED,False,118,2,5,https://github.com/elias-pschernig,enable logs and fix al_get_next_event for emscripten,8,[],https://github.com/liballeg/allegro5/pull/1223,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/1223#issuecomment-778849170,"For getting logs, with emscripten stdout appears in the logs so I simply made Allegro's logging functions write to stdout instead of a file when compiling with emcc.
With emscripten you normally cannot directly use the main() function once converted to javascript because it never returns, so the website would just hang. Instead you create a function which handles one frame and then call it repeatedly from a javascript timer. That's how we previously got some Allegro programs to work by compiling against the SDL2 port and then modifying code so it would not use main().
However there is an alternative way called ASYNCIFY: https://emscripten.org/docs/porting/asyncify.html
It transforms the C code into javascript code which can pause and resume any function, and specifically does so whenever a call to emscripten_sleep() is made. I added a small hack to al_wait_next_event to instead of waiting forever (which would immediately deadlock all of the Allegro examples) repeatedly call emscripten_sleep(1). That way most of the unmodified Allegro examples seem to work.
The existing heartbeat() used for SDL2 does not work for this because al_wait_next_event() with the SDL driver relies on some timer to wake up the unconditional wait (our SDL2 port when not using a timer is currently broken as we cannot receive any SDL events until a timer is triggered).
So, basically this adds another hack on top of the SDL2 hack, but it works rather well: I got 2/3 demos working and after compiling freetype, ttf and ogg/vorbis to javascript I believe over 100/137 examples: http://allegro5.org/examples
The speed demo uses some of the more unusual event functions instead of al_get_next_event() and should be easy to fix but like with the normal SDL2 driver I don't know if there's a good method that will work in all possible cases.
Audio is all messed up, haven't investigated that yet.
If someone wants to reproduce, this is the script I used to configure Allegro to compile the examples:
# we need to call emsdk_env.sh to set up all the emscripten paths
. /home/elias/stuff/emscripten/emsdk/emsdk_env.sh
mkdir build_emscripten
cd build_emscripten

USE_FLAGS=(
    -s USE_FREETYPE=1
    -s USE_VORBIS=1
    -s USE_OGG=1
    -s USE_LIBJPEG=1
    -s USE_SDL=2
    -s USE_LIBPNG=1
    -s FULL_ES2=1
    -s ASYNCIFY
    -s TOTAL_MEMORY=2147418112
    -O3
    )

emscripten=(
    emcmake cmake ../../allegro/git
    -D CMAKE_BUILD_TYPE=Debug
    -D ALLEGRO_SDL=ON
    -D SHARED=OFF
    -D WANT_MONOLITH=ON
    -D WANT_ALLOW_SSE=OFF
    -D WANT_DOCS=OFF
    -D WANT_TESTS=OFF
    -D WANT_OPENAL=OFF
     # not sure why these are not found automatically with emcmake, so
     # we use a  hack - we manually specify the cache path, so cmake
     # will fail on first run in the compile test but populate the cache
     # (from the -s options) and on second run it all works
    -D SDL2_INCLUDE_DIR=$EM_CACHE/include
    -D PNG_PNG_INCLUDE_DIR=$EM_CACHE/include
    -D PNG_LIBRARY=$EM_CACHE/wasm/libpng.a
    -D JPEG_INCLUDE_DIR=$EM_CACHE/include
    -D JPEG_LIBRARY=$EM_CACHE/wasm/libjpeg.a
    -D FREETYPE_INCLUDE_DIRS=$EM_CACHE/include
    -D FREETYPE_LIBRARY=$EM_CACHE/wasm/libfreetype.a
    -D VORBIS_INCLUDE_DIR=$EM_CACHE/include/vorbis
    -D VORBIS_LIBRARY=$EM_CACHE/wasm/libvorbis.a
    -D VORBISFILE_LIBRARY=$EM_CACHE/wasm/libvorbis.a
    -D OGG_INCLUDE_DIR=$EM_CACHE/include
    -D OGG_LIBRARY=$EM_CACHE/wasm/libogg.a
    -D CMAKE_C_FLAGS=""${USE_FLAGS[@]}""
    -D CMAKE_CXX_FLAGS=""${USE_FLAGS[@]}""
    -D CMAKE_EXE_LINKER_FLAGS=""${USE_FLAGS[@]} --preload-file data""
     # does not actually work (but can edit the toolchain file)
    -D CMAKE_EXECUTABLE_SUFFIX="".html""
   )

""${emscripten[@]}"" # will fail if ports are not downloaded yet
""${emscripten[@]}"" # second time it should succeed

# set a link to the data dir, that way emcc can pack it up for each example
( cd examples; ln -s ../../../allegro/git/examples/data )
# create empty data dir in case of the speed demo
mkdir demos/speed/data
touch demos/speed/data/nothing.txt

emmake make","Ok, so lets ignore threads. Does al_rest work instead of a direct call to emscripten_sleep? I checked SDL's source, and it seems SDL_Delay will call it, and al_rest uses SDL_Delay.
Overall, I'm just trying to get at some generic solution here. What seems to be possible here is a compilation switch to go from condvar-based wait to al_rest-based wait.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1223,2021-02-07T22:00:01Z,2021-03-01T08:16:03Z,2021-03-01T08:16:03Z,CLOSED,False,118,2,5,https://github.com/elias-pschernig,enable logs and fix al_get_next_event for emscripten,8,[],https://github.com/liballeg/allegro5/pull/1223,https://github.com/elias-pschernig,4,https://github.com/liballeg/allegro5/pull/1223#issuecomment-778851726,"For getting logs, with emscripten stdout appears in the logs so I simply made Allegro's logging functions write to stdout instead of a file when compiling with emcc.
With emscripten you normally cannot directly use the main() function once converted to javascript because it never returns, so the website would just hang. Instead you create a function which handles one frame and then call it repeatedly from a javascript timer. That's how we previously got some Allegro programs to work by compiling against the SDL2 port and then modifying code so it would not use main().
However there is an alternative way called ASYNCIFY: https://emscripten.org/docs/porting/asyncify.html
It transforms the C code into javascript code which can pause and resume any function, and specifically does so whenever a call to emscripten_sleep() is made. I added a small hack to al_wait_next_event to instead of waiting forever (which would immediately deadlock all of the Allegro examples) repeatedly call emscripten_sleep(1). That way most of the unmodified Allegro examples seem to work.
The existing heartbeat() used for SDL2 does not work for this because al_wait_next_event() with the SDL driver relies on some timer to wake up the unconditional wait (our SDL2 port when not using a timer is currently broken as we cannot receive any SDL events until a timer is triggered).
So, basically this adds another hack on top of the SDL2 hack, but it works rather well: I got 2/3 demos working and after compiling freetype, ttf and ogg/vorbis to javascript I believe over 100/137 examples: http://allegro5.org/examples
The speed demo uses some of the more unusual event functions instead of al_get_next_event() and should be easy to fix but like with the normal SDL2 driver I don't know if there's a good method that will work in all possible cases.
Audio is all messed up, haven't investigated that yet.
If someone wants to reproduce, this is the script I used to configure Allegro to compile the examples:
# we need to call emsdk_env.sh to set up all the emscripten paths
. /home/elias/stuff/emscripten/emsdk/emsdk_env.sh
mkdir build_emscripten
cd build_emscripten

USE_FLAGS=(
    -s USE_FREETYPE=1
    -s USE_VORBIS=1
    -s USE_OGG=1
    -s USE_LIBJPEG=1
    -s USE_SDL=2
    -s USE_LIBPNG=1
    -s FULL_ES2=1
    -s ASYNCIFY
    -s TOTAL_MEMORY=2147418112
    -O3
    )

emscripten=(
    emcmake cmake ../../allegro/git
    -D CMAKE_BUILD_TYPE=Debug
    -D ALLEGRO_SDL=ON
    -D SHARED=OFF
    -D WANT_MONOLITH=ON
    -D WANT_ALLOW_SSE=OFF
    -D WANT_DOCS=OFF
    -D WANT_TESTS=OFF
    -D WANT_OPENAL=OFF
     # not sure why these are not found automatically with emcmake, so
     # we use a  hack - we manually specify the cache path, so cmake
     # will fail on first run in the compile test but populate the cache
     # (from the -s options) and on second run it all works
    -D SDL2_INCLUDE_DIR=$EM_CACHE/include
    -D PNG_PNG_INCLUDE_DIR=$EM_CACHE/include
    -D PNG_LIBRARY=$EM_CACHE/wasm/libpng.a
    -D JPEG_INCLUDE_DIR=$EM_CACHE/include
    -D JPEG_LIBRARY=$EM_CACHE/wasm/libjpeg.a
    -D FREETYPE_INCLUDE_DIRS=$EM_CACHE/include
    -D FREETYPE_LIBRARY=$EM_CACHE/wasm/libfreetype.a
    -D VORBIS_INCLUDE_DIR=$EM_CACHE/include/vorbis
    -D VORBIS_LIBRARY=$EM_CACHE/wasm/libvorbis.a
    -D VORBISFILE_LIBRARY=$EM_CACHE/wasm/libvorbis.a
    -D OGG_INCLUDE_DIR=$EM_CACHE/include
    -D OGG_LIBRARY=$EM_CACHE/wasm/libogg.a
    -D CMAKE_C_FLAGS=""${USE_FLAGS[@]}""
    -D CMAKE_CXX_FLAGS=""${USE_FLAGS[@]}""
    -D CMAKE_EXE_LINKER_FLAGS=""${USE_FLAGS[@]} --preload-file data""
     # does not actually work (but can edit the toolchain file)
    -D CMAKE_EXECUTABLE_SUFFIX="".html""
   )

""${emscripten[@]}"" # will fail if ports are not downloaded yet
""${emscripten[@]}"" # second time it should succeed

# set a link to the data dir, that way emcc can pack it up for each example
( cd examples; ln -s ../../../allegro/git/examples/data )
# create empty data dir in case of the speed demo
mkdir demos/speed/data
touch demos/speed/data/nothing.txt

emmake make","Yes, it can be enabled programmatically in SDL2: https://wiki.libsdl.org/SDL_HINT_EMSCRIPTEN_ASYNCIFY
I think it means we'd need another switch to enable that hint, something like EMSCRIPTEN_ASYNCIFY. Not sure there is much use of the rest based loop outside of emscripten so that flag could enable both, or else a separate flag to enable that.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1223,2021-02-07T22:00:01Z,2021-03-01T08:16:03Z,2021-03-01T08:16:03Z,CLOSED,False,118,2,5,https://github.com/elias-pschernig,enable logs and fix al_get_next_event for emscripten,8,[],https://github.com/liballeg/allegro5/pull/1223,https://github.com/elias-pschernig,5,https://github.com/liballeg/allegro5/pull/1223#issuecomment-778924872,"For getting logs, with emscripten stdout appears in the logs so I simply made Allegro's logging functions write to stdout instead of a file when compiling with emcc.
With emscripten you normally cannot directly use the main() function once converted to javascript because it never returns, so the website would just hang. Instead you create a function which handles one frame and then call it repeatedly from a javascript timer. That's how we previously got some Allegro programs to work by compiling against the SDL2 port and then modifying code so it would not use main().
However there is an alternative way called ASYNCIFY: https://emscripten.org/docs/porting/asyncify.html
It transforms the C code into javascript code which can pause and resume any function, and specifically does so whenever a call to emscripten_sleep() is made. I added a small hack to al_wait_next_event to instead of waiting forever (which would immediately deadlock all of the Allegro examples) repeatedly call emscripten_sleep(1). That way most of the unmodified Allegro examples seem to work.
The existing heartbeat() used for SDL2 does not work for this because al_wait_next_event() with the SDL driver relies on some timer to wake up the unconditional wait (our SDL2 port when not using a timer is currently broken as we cannot receive any SDL events until a timer is triggered).
So, basically this adds another hack on top of the SDL2 hack, but it works rather well: I got 2/3 demos working and after compiling freetype, ttf and ogg/vorbis to javascript I believe over 100/137 examples: http://allegro5.org/examples
The speed demo uses some of the more unusual event functions instead of al_get_next_event() and should be easy to fix but like with the normal SDL2 driver I don't know if there's a good method that will work in all possible cases.
Audio is all messed up, haven't investigated that yet.
If someone wants to reproduce, this is the script I used to configure Allegro to compile the examples:
# we need to call emsdk_env.sh to set up all the emscripten paths
. /home/elias/stuff/emscripten/emsdk/emsdk_env.sh
mkdir build_emscripten
cd build_emscripten

USE_FLAGS=(
    -s USE_FREETYPE=1
    -s USE_VORBIS=1
    -s USE_OGG=1
    -s USE_LIBJPEG=1
    -s USE_SDL=2
    -s USE_LIBPNG=1
    -s FULL_ES2=1
    -s ASYNCIFY
    -s TOTAL_MEMORY=2147418112
    -O3
    )

emscripten=(
    emcmake cmake ../../allegro/git
    -D CMAKE_BUILD_TYPE=Debug
    -D ALLEGRO_SDL=ON
    -D SHARED=OFF
    -D WANT_MONOLITH=ON
    -D WANT_ALLOW_SSE=OFF
    -D WANT_DOCS=OFF
    -D WANT_TESTS=OFF
    -D WANT_OPENAL=OFF
     # not sure why these are not found automatically with emcmake, so
     # we use a  hack - we manually specify the cache path, so cmake
     # will fail on first run in the compile test but populate the cache
     # (from the -s options) and on second run it all works
    -D SDL2_INCLUDE_DIR=$EM_CACHE/include
    -D PNG_PNG_INCLUDE_DIR=$EM_CACHE/include
    -D PNG_LIBRARY=$EM_CACHE/wasm/libpng.a
    -D JPEG_INCLUDE_DIR=$EM_CACHE/include
    -D JPEG_LIBRARY=$EM_CACHE/wasm/libjpeg.a
    -D FREETYPE_INCLUDE_DIRS=$EM_CACHE/include
    -D FREETYPE_LIBRARY=$EM_CACHE/wasm/libfreetype.a
    -D VORBIS_INCLUDE_DIR=$EM_CACHE/include/vorbis
    -D VORBIS_LIBRARY=$EM_CACHE/wasm/libvorbis.a
    -D VORBISFILE_LIBRARY=$EM_CACHE/wasm/libvorbis.a
    -D OGG_INCLUDE_DIR=$EM_CACHE/include
    -D OGG_LIBRARY=$EM_CACHE/wasm/libogg.a
    -D CMAKE_C_FLAGS=""${USE_FLAGS[@]}""
    -D CMAKE_CXX_FLAGS=""${USE_FLAGS[@]}""
    -D CMAKE_EXE_LINKER_FLAGS=""${USE_FLAGS[@]} --preload-file data""
     # does not actually work (but can edit the toolchain file)
    -D CMAKE_EXECUTABLE_SUFFIX="".html""
   )

""${emscripten[@]}"" # will fail if ports are not downloaded yet
""${emscripten[@]}"" # second time it should succeed

# set a link to the data dir, that way emcc can pack it up for each example
( cd examples; ln -s ../../../allegro/git/examples/data )
# create empty data dir in case of the speed demo
mkdir demos/speed/data
touch demos/speed/data/nothing.txt

emmake make","Didn't look closely enough - EMSCRIPTEN_ASYNCIFY is on by default when compiling with async emscripten so only one option is needed to use the sleep loop. I named it ALLEGRO_NO_THREADS for now, but maybe that's a bit too general and something like ALLEGRO_WAIT_EVENT_SLEEP is a better name.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1223,2021-02-07T22:00:01Z,2021-03-01T08:16:03Z,2021-03-01T08:16:03Z,CLOSED,False,118,2,5,https://github.com/elias-pschernig,enable logs and fix al_get_next_event for emscripten,8,[],https://github.com/liballeg/allegro5/pull/1223,https://github.com/beoran,6,https://github.com/liballeg/allegro5/pull/1223#issuecomment-778966910,"For getting logs, with emscripten stdout appears in the logs so I simply made Allegro's logging functions write to stdout instead of a file when compiling with emcc.
With emscripten you normally cannot directly use the main() function once converted to javascript because it never returns, so the website would just hang. Instead you create a function which handles one frame and then call it repeatedly from a javascript timer. That's how we previously got some Allegro programs to work by compiling against the SDL2 port and then modifying code so it would not use main().
However there is an alternative way called ASYNCIFY: https://emscripten.org/docs/porting/asyncify.html
It transforms the C code into javascript code which can pause and resume any function, and specifically does so whenever a call to emscripten_sleep() is made. I added a small hack to al_wait_next_event to instead of waiting forever (which would immediately deadlock all of the Allegro examples) repeatedly call emscripten_sleep(1). That way most of the unmodified Allegro examples seem to work.
The existing heartbeat() used for SDL2 does not work for this because al_wait_next_event() with the SDL driver relies on some timer to wake up the unconditional wait (our SDL2 port when not using a timer is currently broken as we cannot receive any SDL events until a timer is triggered).
So, basically this adds another hack on top of the SDL2 hack, but it works rather well: I got 2/3 demos working and after compiling freetype, ttf and ogg/vorbis to javascript I believe over 100/137 examples: http://allegro5.org/examples
The speed demo uses some of the more unusual event functions instead of al_get_next_event() and should be easy to fix but like with the normal SDL2 driver I don't know if there's a good method that will work in all possible cases.
Audio is all messed up, haven't investigated that yet.
If someone wants to reproduce, this is the script I used to configure Allegro to compile the examples:
# we need to call emsdk_env.sh to set up all the emscripten paths
. /home/elias/stuff/emscripten/emsdk/emsdk_env.sh
mkdir build_emscripten
cd build_emscripten

USE_FLAGS=(
    -s USE_FREETYPE=1
    -s USE_VORBIS=1
    -s USE_OGG=1
    -s USE_LIBJPEG=1
    -s USE_SDL=2
    -s USE_LIBPNG=1
    -s FULL_ES2=1
    -s ASYNCIFY
    -s TOTAL_MEMORY=2147418112
    -O3
    )

emscripten=(
    emcmake cmake ../../allegro/git
    -D CMAKE_BUILD_TYPE=Debug
    -D ALLEGRO_SDL=ON
    -D SHARED=OFF
    -D WANT_MONOLITH=ON
    -D WANT_ALLOW_SSE=OFF
    -D WANT_DOCS=OFF
    -D WANT_TESTS=OFF
    -D WANT_OPENAL=OFF
     # not sure why these are not found automatically with emcmake, so
     # we use a  hack - we manually specify the cache path, so cmake
     # will fail on first run in the compile test but populate the cache
     # (from the -s options) and on second run it all works
    -D SDL2_INCLUDE_DIR=$EM_CACHE/include
    -D PNG_PNG_INCLUDE_DIR=$EM_CACHE/include
    -D PNG_LIBRARY=$EM_CACHE/wasm/libpng.a
    -D JPEG_INCLUDE_DIR=$EM_CACHE/include
    -D JPEG_LIBRARY=$EM_CACHE/wasm/libjpeg.a
    -D FREETYPE_INCLUDE_DIRS=$EM_CACHE/include
    -D FREETYPE_LIBRARY=$EM_CACHE/wasm/libfreetype.a
    -D VORBIS_INCLUDE_DIR=$EM_CACHE/include/vorbis
    -D VORBIS_LIBRARY=$EM_CACHE/wasm/libvorbis.a
    -D VORBISFILE_LIBRARY=$EM_CACHE/wasm/libvorbis.a
    -D OGG_INCLUDE_DIR=$EM_CACHE/include
    -D OGG_LIBRARY=$EM_CACHE/wasm/libogg.a
    -D CMAKE_C_FLAGS=""${USE_FLAGS[@]}""
    -D CMAKE_CXX_FLAGS=""${USE_FLAGS[@]}""
    -D CMAKE_EXE_LINKER_FLAGS=""${USE_FLAGS[@]} --preload-file data""
     # does not actually work (but can edit the toolchain file)
    -D CMAKE_EXECUTABLE_SUFFIX="".html""
   )

""${emscripten[@]}"" # will fail if ports are not downloaded yet
""${emscripten[@]}"" # second time it should succeed

# set a link to the data dir, that way emcc can pack it up for each example
( cd examples; ln -s ../../../allegro/git/examples/data )
# create empty data dir in case of the speed demo
mkdir demos/speed/data
touch demos/speed/data/nothing.txt

emmake make","ALLEGRO_WAIT_EVENT_SLEEP sound better, yes. Doesn't the sleep cause some sluggishness in event handling, though?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1223,2021-02-07T22:00:01Z,2021-03-01T08:16:03Z,2021-03-01T08:16:03Z,CLOSED,False,118,2,5,https://github.com/elias-pschernig,enable logs and fix al_get_next_event for emscripten,8,[],https://github.com/liballeg/allegro5/pull/1223,https://github.com/elias-pschernig,7,https://github.com/liballeg/allegro5/pull/1223#issuecomment-779227386,"For getting logs, with emscripten stdout appears in the logs so I simply made Allegro's logging functions write to stdout instead of a file when compiling with emcc.
With emscripten you normally cannot directly use the main() function once converted to javascript because it never returns, so the website would just hang. Instead you create a function which handles one frame and then call it repeatedly from a javascript timer. That's how we previously got some Allegro programs to work by compiling against the SDL2 port and then modifying code so it would not use main().
However there is an alternative way called ASYNCIFY: https://emscripten.org/docs/porting/asyncify.html
It transforms the C code into javascript code which can pause and resume any function, and specifically does so whenever a call to emscripten_sleep() is made. I added a small hack to al_wait_next_event to instead of waiting forever (which would immediately deadlock all of the Allegro examples) repeatedly call emscripten_sleep(1). That way most of the unmodified Allegro examples seem to work.
The existing heartbeat() used for SDL2 does not work for this because al_wait_next_event() with the SDL driver relies on some timer to wake up the unconditional wait (our SDL2 port when not using a timer is currently broken as we cannot receive any SDL events until a timer is triggered).
So, basically this adds another hack on top of the SDL2 hack, but it works rather well: I got 2/3 demos working and after compiling freetype, ttf and ogg/vorbis to javascript I believe over 100/137 examples: http://allegro5.org/examples
The speed demo uses some of the more unusual event functions instead of al_get_next_event() and should be easy to fix but like with the normal SDL2 driver I don't know if there's a good method that will work in all possible cases.
Audio is all messed up, haven't investigated that yet.
If someone wants to reproduce, this is the script I used to configure Allegro to compile the examples:
# we need to call emsdk_env.sh to set up all the emscripten paths
. /home/elias/stuff/emscripten/emsdk/emsdk_env.sh
mkdir build_emscripten
cd build_emscripten

USE_FLAGS=(
    -s USE_FREETYPE=1
    -s USE_VORBIS=1
    -s USE_OGG=1
    -s USE_LIBJPEG=1
    -s USE_SDL=2
    -s USE_LIBPNG=1
    -s FULL_ES2=1
    -s ASYNCIFY
    -s TOTAL_MEMORY=2147418112
    -O3
    )

emscripten=(
    emcmake cmake ../../allegro/git
    -D CMAKE_BUILD_TYPE=Debug
    -D ALLEGRO_SDL=ON
    -D SHARED=OFF
    -D WANT_MONOLITH=ON
    -D WANT_ALLOW_SSE=OFF
    -D WANT_DOCS=OFF
    -D WANT_TESTS=OFF
    -D WANT_OPENAL=OFF
     # not sure why these are not found automatically with emcmake, so
     # we use a  hack - we manually specify the cache path, so cmake
     # will fail on first run in the compile test but populate the cache
     # (from the -s options) and on second run it all works
    -D SDL2_INCLUDE_DIR=$EM_CACHE/include
    -D PNG_PNG_INCLUDE_DIR=$EM_CACHE/include
    -D PNG_LIBRARY=$EM_CACHE/wasm/libpng.a
    -D JPEG_INCLUDE_DIR=$EM_CACHE/include
    -D JPEG_LIBRARY=$EM_CACHE/wasm/libjpeg.a
    -D FREETYPE_INCLUDE_DIRS=$EM_CACHE/include
    -D FREETYPE_LIBRARY=$EM_CACHE/wasm/libfreetype.a
    -D VORBIS_INCLUDE_DIR=$EM_CACHE/include/vorbis
    -D VORBIS_LIBRARY=$EM_CACHE/wasm/libvorbis.a
    -D VORBISFILE_LIBRARY=$EM_CACHE/wasm/libvorbis.a
    -D OGG_INCLUDE_DIR=$EM_CACHE/include
    -D OGG_LIBRARY=$EM_CACHE/wasm/libogg.a
    -D CMAKE_C_FLAGS=""${USE_FLAGS[@]}""
    -D CMAKE_CXX_FLAGS=""${USE_FLAGS[@]}""
    -D CMAKE_EXE_LINKER_FLAGS=""${USE_FLAGS[@]} --preload-file data""
     # does not actually work (but can edit the toolchain file)
    -D CMAKE_EXECUTABLE_SUFFIX="".html""
   )

""${emscripten[@]}"" # will fail if ports are not downloaded yet
""${emscripten[@]}"" # second time it should succeed

# set a link to the data dir, that way emcc can pack it up for each example
( cd examples; ln -s ../../../allegro/git/examples/data )
# create empty data dir in case of the speed demo
mkdir demos/speed/data
touch demos/speed/data/nothing.txt

emmake make","ALLEGRO_WAIT_EVENT_SLEEP sound better, yes. Doesn't the sleep cause some sluggishness in event handling, though?

It shouldn't, once there is an event we break out of the loop and the game can handle all the queued events. With javascript the web browser already calls the game code as often as required (60 times per second probably). The game is not supposed to use any blocking calls at all. EMSCRIPTEN_ASYNCIFY is just a bit of a hack provided by the emscripten developers to make programs like the Allegro examples work who do use waits regardless. The better way to port a game to emscripten would be to just not use al_wait_for_event() at all but it would add a bit of porting work (and we could not run any of our examples).",True,{'THUMBS_UP': ['https://github.com/beoran']}
liballeg/allegro5,https://github.com/liballeg/allegro5,1223,2021-02-07T22:00:01Z,2021-03-01T08:16:03Z,2021-03-01T08:16:03Z,CLOSED,False,118,2,5,https://github.com/elias-pschernig,enable logs and fix al_get_next_event for emscripten,8,[],https://github.com/liballeg/allegro5/pull/1223,https://github.com/elias-pschernig,8,https://github.com/liballeg/allegro5/pull/1223#issuecomment-782728194,"For getting logs, with emscripten stdout appears in the logs so I simply made Allegro's logging functions write to stdout instead of a file when compiling with emcc.
With emscripten you normally cannot directly use the main() function once converted to javascript because it never returns, so the website would just hang. Instead you create a function which handles one frame and then call it repeatedly from a javascript timer. That's how we previously got some Allegro programs to work by compiling against the SDL2 port and then modifying code so it would not use main().
However there is an alternative way called ASYNCIFY: https://emscripten.org/docs/porting/asyncify.html
It transforms the C code into javascript code which can pause and resume any function, and specifically does so whenever a call to emscripten_sleep() is made. I added a small hack to al_wait_next_event to instead of waiting forever (which would immediately deadlock all of the Allegro examples) repeatedly call emscripten_sleep(1). That way most of the unmodified Allegro examples seem to work.
The existing heartbeat() used for SDL2 does not work for this because al_wait_next_event() with the SDL driver relies on some timer to wake up the unconditional wait (our SDL2 port when not using a timer is currently broken as we cannot receive any SDL events until a timer is triggered).
So, basically this adds another hack on top of the SDL2 hack, but it works rather well: I got 2/3 demos working and after compiling freetype, ttf and ogg/vorbis to javascript I believe over 100/137 examples: http://allegro5.org/examples
The speed demo uses some of the more unusual event functions instead of al_get_next_event() and should be easy to fix but like with the normal SDL2 driver I don't know if there's a good method that will work in all possible cases.
Audio is all messed up, haven't investigated that yet.
If someone wants to reproduce, this is the script I used to configure Allegro to compile the examples:
# we need to call emsdk_env.sh to set up all the emscripten paths
. /home/elias/stuff/emscripten/emsdk/emsdk_env.sh
mkdir build_emscripten
cd build_emscripten

USE_FLAGS=(
    -s USE_FREETYPE=1
    -s USE_VORBIS=1
    -s USE_OGG=1
    -s USE_LIBJPEG=1
    -s USE_SDL=2
    -s USE_LIBPNG=1
    -s FULL_ES2=1
    -s ASYNCIFY
    -s TOTAL_MEMORY=2147418112
    -O3
    )

emscripten=(
    emcmake cmake ../../allegro/git
    -D CMAKE_BUILD_TYPE=Debug
    -D ALLEGRO_SDL=ON
    -D SHARED=OFF
    -D WANT_MONOLITH=ON
    -D WANT_ALLOW_SSE=OFF
    -D WANT_DOCS=OFF
    -D WANT_TESTS=OFF
    -D WANT_OPENAL=OFF
     # not sure why these are not found automatically with emcmake, so
     # we use a  hack - we manually specify the cache path, so cmake
     # will fail on first run in the compile test but populate the cache
     # (from the -s options) and on second run it all works
    -D SDL2_INCLUDE_DIR=$EM_CACHE/include
    -D PNG_PNG_INCLUDE_DIR=$EM_CACHE/include
    -D PNG_LIBRARY=$EM_CACHE/wasm/libpng.a
    -D JPEG_INCLUDE_DIR=$EM_CACHE/include
    -D JPEG_LIBRARY=$EM_CACHE/wasm/libjpeg.a
    -D FREETYPE_INCLUDE_DIRS=$EM_CACHE/include
    -D FREETYPE_LIBRARY=$EM_CACHE/wasm/libfreetype.a
    -D VORBIS_INCLUDE_DIR=$EM_CACHE/include/vorbis
    -D VORBIS_LIBRARY=$EM_CACHE/wasm/libvorbis.a
    -D VORBISFILE_LIBRARY=$EM_CACHE/wasm/libvorbis.a
    -D OGG_INCLUDE_DIR=$EM_CACHE/include
    -D OGG_LIBRARY=$EM_CACHE/wasm/libogg.a
    -D CMAKE_C_FLAGS=""${USE_FLAGS[@]}""
    -D CMAKE_CXX_FLAGS=""${USE_FLAGS[@]}""
    -D CMAKE_EXE_LINKER_FLAGS=""${USE_FLAGS[@]} --preload-file data""
     # does not actually work (but can edit the toolchain file)
    -D CMAKE_EXECUTABLE_SUFFIX="".html""
   )

""${emscripten[@]}"" # will fail if ports are not downloaded yet
""${emscripten[@]}"" # second time it should succeed

# set a link to the data dir, that way emcc can pack it up for each example
( cd examples; ln -s ../../../allegro/git/examples/data )
# create empty data dir in case of the speed demo
mkdir demos/speed/data
touch demos/speed/data/nothing.txt

emmake make","Renamed the #define now. Not sure about documentation, I could add a README_emscripten with explanations. Or a README_SDL with a section on how to make it work with emscripten. But then I feel SDL/emscripten is not really a fully supported port so maybe just provide the above bash script in misc/. Or else just have it in the wiki.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1223,2021-02-07T22:00:01Z,2021-03-01T08:16:03Z,2021-03-01T08:16:03Z,CLOSED,False,118,2,5,https://github.com/elias-pschernig,enable logs and fix al_get_next_event for emscripten,8,[],https://github.com/liballeg/allegro5/pull/1223,https://github.com/SiegeLord,9,https://github.com/liballeg/allegro5/pull/1223#issuecomment-782816558,"For getting logs, with emscripten stdout appears in the logs so I simply made Allegro's logging functions write to stdout instead of a file when compiling with emcc.
With emscripten you normally cannot directly use the main() function once converted to javascript because it never returns, so the website would just hang. Instead you create a function which handles one frame and then call it repeatedly from a javascript timer. That's how we previously got some Allegro programs to work by compiling against the SDL2 port and then modifying code so it would not use main().
However there is an alternative way called ASYNCIFY: https://emscripten.org/docs/porting/asyncify.html
It transforms the C code into javascript code which can pause and resume any function, and specifically does so whenever a call to emscripten_sleep() is made. I added a small hack to al_wait_next_event to instead of waiting forever (which would immediately deadlock all of the Allegro examples) repeatedly call emscripten_sleep(1). That way most of the unmodified Allegro examples seem to work.
The existing heartbeat() used for SDL2 does not work for this because al_wait_next_event() with the SDL driver relies on some timer to wake up the unconditional wait (our SDL2 port when not using a timer is currently broken as we cannot receive any SDL events until a timer is triggered).
So, basically this adds another hack on top of the SDL2 hack, but it works rather well: I got 2/3 demos working and after compiling freetype, ttf and ogg/vorbis to javascript I believe over 100/137 examples: http://allegro5.org/examples
The speed demo uses some of the more unusual event functions instead of al_get_next_event() and should be easy to fix but like with the normal SDL2 driver I don't know if there's a good method that will work in all possible cases.
Audio is all messed up, haven't investigated that yet.
If someone wants to reproduce, this is the script I used to configure Allegro to compile the examples:
# we need to call emsdk_env.sh to set up all the emscripten paths
. /home/elias/stuff/emscripten/emsdk/emsdk_env.sh
mkdir build_emscripten
cd build_emscripten

USE_FLAGS=(
    -s USE_FREETYPE=1
    -s USE_VORBIS=1
    -s USE_OGG=1
    -s USE_LIBJPEG=1
    -s USE_SDL=2
    -s USE_LIBPNG=1
    -s FULL_ES2=1
    -s ASYNCIFY
    -s TOTAL_MEMORY=2147418112
    -O3
    )

emscripten=(
    emcmake cmake ../../allegro/git
    -D CMAKE_BUILD_TYPE=Debug
    -D ALLEGRO_SDL=ON
    -D SHARED=OFF
    -D WANT_MONOLITH=ON
    -D WANT_ALLOW_SSE=OFF
    -D WANT_DOCS=OFF
    -D WANT_TESTS=OFF
    -D WANT_OPENAL=OFF
     # not sure why these are not found automatically with emcmake, so
     # we use a  hack - we manually specify the cache path, so cmake
     # will fail on first run in the compile test but populate the cache
     # (from the -s options) and on second run it all works
    -D SDL2_INCLUDE_DIR=$EM_CACHE/include
    -D PNG_PNG_INCLUDE_DIR=$EM_CACHE/include
    -D PNG_LIBRARY=$EM_CACHE/wasm/libpng.a
    -D JPEG_INCLUDE_DIR=$EM_CACHE/include
    -D JPEG_LIBRARY=$EM_CACHE/wasm/libjpeg.a
    -D FREETYPE_INCLUDE_DIRS=$EM_CACHE/include
    -D FREETYPE_LIBRARY=$EM_CACHE/wasm/libfreetype.a
    -D VORBIS_INCLUDE_DIR=$EM_CACHE/include/vorbis
    -D VORBIS_LIBRARY=$EM_CACHE/wasm/libvorbis.a
    -D VORBISFILE_LIBRARY=$EM_CACHE/wasm/libvorbis.a
    -D OGG_INCLUDE_DIR=$EM_CACHE/include
    -D OGG_LIBRARY=$EM_CACHE/wasm/libogg.a
    -D CMAKE_C_FLAGS=""${USE_FLAGS[@]}""
    -D CMAKE_CXX_FLAGS=""${USE_FLAGS[@]}""
    -D CMAKE_EXE_LINKER_FLAGS=""${USE_FLAGS[@]} --preload-file data""
     # does not actually work (but can edit the toolchain file)
    -D CMAKE_EXECUTABLE_SUFFIX="".html""
   )

""${emscripten[@]}"" # will fail if ports are not downloaded yet
""${emscripten[@]}"" # second time it should succeed

# set a link to the data dir, that way emcc can pack it up for each example
( cd examples; ln -s ../../../allegro/git/examples/data )
# create empty data dir in case of the speed demo
mkdir demos/speed/data
touch demos/speed/data/nothing.txt

emmake make","I guess we don't have a README_sdl, do we, haha. We should certainly document it somewhere, but it doesn't matter to me where (it's certainly the case that README_xxx is the most durable location though).",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1223,2021-02-07T22:00:01Z,2021-03-01T08:16:03Z,2021-03-01T08:16:03Z,CLOSED,False,118,2,5,https://github.com/elias-pschernig,enable logs and fix al_get_next_event for emscripten,8,[],https://github.com/liballeg/allegro5/pull/1223,https://github.com/elias-pschernig,10,https://github.com/liballeg/allegro5/pull/1223#issuecomment-787076161,"For getting logs, with emscripten stdout appears in the logs so I simply made Allegro's logging functions write to stdout instead of a file when compiling with emcc.
With emscripten you normally cannot directly use the main() function once converted to javascript because it never returns, so the website would just hang. Instead you create a function which handles one frame and then call it repeatedly from a javascript timer. That's how we previously got some Allegro programs to work by compiling against the SDL2 port and then modifying code so it would not use main().
However there is an alternative way called ASYNCIFY: https://emscripten.org/docs/porting/asyncify.html
It transforms the C code into javascript code which can pause and resume any function, and specifically does so whenever a call to emscripten_sleep() is made. I added a small hack to al_wait_next_event to instead of waiting forever (which would immediately deadlock all of the Allegro examples) repeatedly call emscripten_sleep(1). That way most of the unmodified Allegro examples seem to work.
The existing heartbeat() used for SDL2 does not work for this because al_wait_next_event() with the SDL driver relies on some timer to wake up the unconditional wait (our SDL2 port when not using a timer is currently broken as we cannot receive any SDL events until a timer is triggered).
So, basically this adds another hack on top of the SDL2 hack, but it works rather well: I got 2/3 demos working and after compiling freetype, ttf and ogg/vorbis to javascript I believe over 100/137 examples: http://allegro5.org/examples
The speed demo uses some of the more unusual event functions instead of al_get_next_event() and should be easy to fix but like with the normal SDL2 driver I don't know if there's a good method that will work in all possible cases.
Audio is all messed up, haven't investigated that yet.
If someone wants to reproduce, this is the script I used to configure Allegro to compile the examples:
# we need to call emsdk_env.sh to set up all the emscripten paths
. /home/elias/stuff/emscripten/emsdk/emsdk_env.sh
mkdir build_emscripten
cd build_emscripten

USE_FLAGS=(
    -s USE_FREETYPE=1
    -s USE_VORBIS=1
    -s USE_OGG=1
    -s USE_LIBJPEG=1
    -s USE_SDL=2
    -s USE_LIBPNG=1
    -s FULL_ES2=1
    -s ASYNCIFY
    -s TOTAL_MEMORY=2147418112
    -O3
    )

emscripten=(
    emcmake cmake ../../allegro/git
    -D CMAKE_BUILD_TYPE=Debug
    -D ALLEGRO_SDL=ON
    -D SHARED=OFF
    -D WANT_MONOLITH=ON
    -D WANT_ALLOW_SSE=OFF
    -D WANT_DOCS=OFF
    -D WANT_TESTS=OFF
    -D WANT_OPENAL=OFF
     # not sure why these are not found automatically with emcmake, so
     # we use a  hack - we manually specify the cache path, so cmake
     # will fail on first run in the compile test but populate the cache
     # (from the -s options) and on second run it all works
    -D SDL2_INCLUDE_DIR=$EM_CACHE/include
    -D PNG_PNG_INCLUDE_DIR=$EM_CACHE/include
    -D PNG_LIBRARY=$EM_CACHE/wasm/libpng.a
    -D JPEG_INCLUDE_DIR=$EM_CACHE/include
    -D JPEG_LIBRARY=$EM_CACHE/wasm/libjpeg.a
    -D FREETYPE_INCLUDE_DIRS=$EM_CACHE/include
    -D FREETYPE_LIBRARY=$EM_CACHE/wasm/libfreetype.a
    -D VORBIS_INCLUDE_DIR=$EM_CACHE/include/vorbis
    -D VORBIS_LIBRARY=$EM_CACHE/wasm/libvorbis.a
    -D VORBISFILE_LIBRARY=$EM_CACHE/wasm/libvorbis.a
    -D OGG_INCLUDE_DIR=$EM_CACHE/include
    -D OGG_LIBRARY=$EM_CACHE/wasm/libogg.a
    -D CMAKE_C_FLAGS=""${USE_FLAGS[@]}""
    -D CMAKE_CXX_FLAGS=""${USE_FLAGS[@]}""
    -D CMAKE_EXE_LINKER_FLAGS=""${USE_FLAGS[@]} --preload-file data""
     # does not actually work (but can edit the toolchain file)
    -D CMAKE_EXECUTABLE_SUFFIX="".html""
   )

""${emscripten[@]}"" # will fail if ports are not downloaded yet
""${emscripten[@]}"" # second time it should succeed

# set a link to the data dir, that way emcc can pack it up for each example
( cd examples; ln -s ../../../allegro/git/examples/data )
# create empty data dir in case of the speed demo
mkdir demos/speed/data
touch demos/speed/data/nothing.txt

emmake make",I added a README_sdl.txt (btw. should we convert all those README*.txt to .md and include as a chapter in the online documentation?). And I put a section on emscripten in there.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1223,2021-02-07T22:00:01Z,2021-03-01T08:16:03Z,2021-03-01T08:16:03Z,CLOSED,False,118,2,5,https://github.com/elias-pschernig,enable logs and fix al_get_next_event for emscripten,8,[],https://github.com/liballeg/allegro5/pull/1223,https://github.com/SiegeLord,11,https://github.com/liballeg/allegro5/pull/1223#issuecomment-787750231,"For getting logs, with emscripten stdout appears in the logs so I simply made Allegro's logging functions write to stdout instead of a file when compiling with emcc.
With emscripten you normally cannot directly use the main() function once converted to javascript because it never returns, so the website would just hang. Instead you create a function which handles one frame and then call it repeatedly from a javascript timer. That's how we previously got some Allegro programs to work by compiling against the SDL2 port and then modifying code so it would not use main().
However there is an alternative way called ASYNCIFY: https://emscripten.org/docs/porting/asyncify.html
It transforms the C code into javascript code which can pause and resume any function, and specifically does so whenever a call to emscripten_sleep() is made. I added a small hack to al_wait_next_event to instead of waiting forever (which would immediately deadlock all of the Allegro examples) repeatedly call emscripten_sleep(1). That way most of the unmodified Allegro examples seem to work.
The existing heartbeat() used for SDL2 does not work for this because al_wait_next_event() with the SDL driver relies on some timer to wake up the unconditional wait (our SDL2 port when not using a timer is currently broken as we cannot receive any SDL events until a timer is triggered).
So, basically this adds another hack on top of the SDL2 hack, but it works rather well: I got 2/3 demos working and after compiling freetype, ttf and ogg/vorbis to javascript I believe over 100/137 examples: http://allegro5.org/examples
The speed demo uses some of the more unusual event functions instead of al_get_next_event() and should be easy to fix but like with the normal SDL2 driver I don't know if there's a good method that will work in all possible cases.
Audio is all messed up, haven't investigated that yet.
If someone wants to reproduce, this is the script I used to configure Allegro to compile the examples:
# we need to call emsdk_env.sh to set up all the emscripten paths
. /home/elias/stuff/emscripten/emsdk/emsdk_env.sh
mkdir build_emscripten
cd build_emscripten

USE_FLAGS=(
    -s USE_FREETYPE=1
    -s USE_VORBIS=1
    -s USE_OGG=1
    -s USE_LIBJPEG=1
    -s USE_SDL=2
    -s USE_LIBPNG=1
    -s FULL_ES2=1
    -s ASYNCIFY
    -s TOTAL_MEMORY=2147418112
    -O3
    )

emscripten=(
    emcmake cmake ../../allegro/git
    -D CMAKE_BUILD_TYPE=Debug
    -D ALLEGRO_SDL=ON
    -D SHARED=OFF
    -D WANT_MONOLITH=ON
    -D WANT_ALLOW_SSE=OFF
    -D WANT_DOCS=OFF
    -D WANT_TESTS=OFF
    -D WANT_OPENAL=OFF
     # not sure why these are not found automatically with emcmake, so
     # we use a  hack - we manually specify the cache path, so cmake
     # will fail on first run in the compile test but populate the cache
     # (from the -s options) and on second run it all works
    -D SDL2_INCLUDE_DIR=$EM_CACHE/include
    -D PNG_PNG_INCLUDE_DIR=$EM_CACHE/include
    -D PNG_LIBRARY=$EM_CACHE/wasm/libpng.a
    -D JPEG_INCLUDE_DIR=$EM_CACHE/include
    -D JPEG_LIBRARY=$EM_CACHE/wasm/libjpeg.a
    -D FREETYPE_INCLUDE_DIRS=$EM_CACHE/include
    -D FREETYPE_LIBRARY=$EM_CACHE/wasm/libfreetype.a
    -D VORBIS_INCLUDE_DIR=$EM_CACHE/include/vorbis
    -D VORBIS_LIBRARY=$EM_CACHE/wasm/libvorbis.a
    -D VORBISFILE_LIBRARY=$EM_CACHE/wasm/libvorbis.a
    -D OGG_INCLUDE_DIR=$EM_CACHE/include
    -D OGG_LIBRARY=$EM_CACHE/wasm/libogg.a
    -D CMAKE_C_FLAGS=""${USE_FLAGS[@]}""
    -D CMAKE_CXX_FLAGS=""${USE_FLAGS[@]}""
    -D CMAKE_EXE_LINKER_FLAGS=""${USE_FLAGS[@]} --preload-file data""
     # does not actually work (but can edit the toolchain file)
    -D CMAKE_EXECUTABLE_SUFFIX="".html""
   )

""${emscripten[@]}"" # will fail if ports are not downloaded yet
""${emscripten[@]}"" # second time it should succeed

# set a link to the data dir, that way emcc can pack it up for each example
( cd examples; ln -s ../../../allegro/git/examples/data )
# create empty data dir in case of the speed demo
mkdir demos/speed/data
touch demos/speed/data/nothing.txt

emmake make","Very awesome, I merged it as 089b9ac with some changes to the readme based on our discussion on IRC.",True,{'THUMBS_UP': ['https://github.com/beoran']}
liballeg/allegro5,https://github.com/liballeg/allegro5,1224,2021-02-14T16:21:15Z,2021-02-14T20:06:40Z,2021-02-14T20:06:54Z,MERGED,True,11,0,1,https://github.com/elias-pschernig,fix bug in SDL voice driver,1,[],https://github.com/liballeg/allegro5/pull/1224,https://github.com/elias-pschernig,1,https://github.com/liballeg/allegro5/pull/1224,"We pass SDL_AUDIO_ALLOW_FORMAT_CHANGE to SDL_OpenAudioDevice (which is a good idea as only one specific format may be available on the target device) but then completely ignore format changes leading to broken audio. This PR fixes the issue.
(This was the issue that caused audio in emscripten to be broken which uses the SDL driver.)","We pass SDL_AUDIO_ALLOW_FORMAT_CHANGE to SDL_OpenAudioDevice (which is a good idea as only one specific format may be available on the target device) but then completely ignore format changes leading to broken audio. This PR fixes the issue.
(This was the issue that caused audio in emscripten to be broken which uses the SDL driver.)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1224,2021-02-14T16:21:15Z,2021-02-14T20:06:40Z,2021-02-14T20:06:54Z,MERGED,True,11,0,1,https://github.com/elias-pschernig,fix bug in SDL voice driver,1,[],https://github.com/liballeg/allegro5/pull/1224,https://github.com/beoran,2,https://github.com/liballeg/allegro5/pull/1224#issuecomment-778824997,"We pass SDL_AUDIO_ALLOW_FORMAT_CHANGE to SDL_OpenAudioDevice (which is a good idea as only one specific format may be available on the target device) but then completely ignore format changes leading to broken audio. This PR fixes the issue.
(This was the issue that caused audio in emscripten to be broken which uses the SDL driver.)",LGTM 👍,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1225,2021-02-23T03:46:04Z,2021-02-23T05:49:56Z,2021-02-23T05:49:56Z,MERGED,True,39,15,5,https://github.com/elias-pschernig,add default files to some audio examples,2,[],https://github.com/liballeg/allegro5/pull/1225,https://github.com/elias-pschernig,1,https://github.com/liballeg/allegro5/pull/1225,"This is a very minor PR. Some of our audio examples won't work without providing a file on the command line, even though most of them use a default file in that case. I added default files to 5 more:

ex_acodec_multi
ex_audio_simple
ex_kcm_direct
ex_mixer_chain
ex_stream_file","This is a very minor PR. Some of our audio examples won't work without providing a file on the command line, even though most of them use a default file in that case. I added default files to 5 more:

ex_acodec_multi
ex_audio_simple
ex_kcm_direct
ex_mixer_chain
ex_stream_file",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1225,2021-02-23T03:46:04Z,2021-02-23T05:49:56Z,2021-02-23T05:49:56Z,MERGED,True,39,15,5,https://github.com/elias-pschernig,add default files to some audio examples,2,[],https://github.com/liballeg/allegro5/pull/1225,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1225#issuecomment-783927741,"This is a very minor PR. Some of our audio examples won't work without providing a file on the command line, even though most of them use a default file in that case. I added default files to 5 more:

ex_acodec_multi
ex_audio_simple
ex_kcm_direct
ex_mixer_chain
ex_stream_file",Nice! Seems good on the consistency and the usability front.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1226,2021-02-28T23:44:05Z,2021-04-12T07:52:57Z,2021-04-12T07:52:57Z,CLOSED,False,3829,12,49,https://github.com/elias-pschernig,Shooter,2,[],https://github.com/liballeg/allegro5/pull/1226,https://github.com/elias-pschernig,1,https://github.com/liballeg/allegro5/pull/1226,This adds the old A4 demo to A5. The first commit simply copies the A4 folder. The second commit makes it compile as A5 (using the same a4_aux.c from the skater demo) and adds it to the build system.,This adds the old A4 demo to A5. The first commit simply copies the A4 folder. The second commit makes it compile as A5 (using the same a4_aux.c from the skater demo) and adds it to the build system.,True,{'THUMBS_UP': ['https://github.com/beoran']}
liballeg/allegro5,https://github.com/liballeg/allegro5,1226,2021-02-28T23:44:05Z,2021-04-12T07:52:57Z,2021-04-12T07:52:57Z,CLOSED,False,3829,12,49,https://github.com/elias-pschernig,Shooter,2,[],https://github.com/liballeg/allegro5/pull/1226,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1226#issuecomment-817576707,This adds the old A4 demo to A5. The first commit simply copies the A4 folder. The second commit makes it compile as A5 (using the same a4_aux.c from the skater demo) and adds it to the build system.,This needed a few small fixes (0524849). We should probably fix up the text etc to make it more up to date. And maybe update the API to be more A5-idiomatic.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1228,2021-03-12T20:35:47Z,2021-05-15T06:40:05Z,2021-05-15T06:40:05Z,CLOSED,False,74,24,1,https://github.com/EdgarReynaldo,DirectX MSAA fix for flicker on startup in windowed and fullscreen mode,5,[],https://github.com/liballeg/allegro5/pull/1228,https://github.com/EdgarReynaldo,1,https://github.com/liballeg/allegro5/pull/1228,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1228,2021-03-12T20:35:47Z,2021-05-15T06:40:05Z,2021-05-15T06:40:05Z,CLOSED,False,74,24,1,https://github.com/EdgarReynaldo,DirectX MSAA fix for flicker on startup in windowed and fullscreen mode,5,[],https://github.com/liballeg/allegro5/pull/1228,https://github.com/EdgarReynaldo,2,https://github.com/liballeg/allegro5/pull/1228#issuecomment-797773695,,"NOTE : This works with my NVIDIA GPU and DirectX MSAA in windowed mode, but fullscreen doesn't enable MSAA, and the onboard intel fails in both windowed and fullscreen modes. So basically it's not ready yet.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1228,2021-03-12T20:35:47Z,2021-05-15T06:40:05Z,2021-05-15T06:40:05Z,CLOSED,False,74,24,1,https://github.com/EdgarReynaldo,DirectX MSAA fix for flicker on startup in windowed and fullscreen mode,5,[],https://github.com/liballeg/allegro5/pull/1228,https://github.com/EdgarReynaldo,3,https://github.com/liballeg/allegro5/pull/1228#issuecomment-797777133,,"ALLEGRO_FULLSCREEN_WINDOW works to enable MSAA but again, only on my NVIDIA GPU",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1228,2021-03-12T20:35:47Z,2021-05-15T06:40:05Z,2021-05-15T06:40:05Z,CLOSED,False,74,24,1,https://github.com/EdgarReynaldo,DirectX MSAA fix for flicker on startup in windowed and fullscreen mode,5,[],https://github.com/liballeg/allegro5/pull/1228,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/1228#issuecomment-826285289,,"I looked into this a bit. First, I've no idea what this PR is trying to accomplish, and it doesn't work for me:

For FULLSCREEN_WINDOWED, it removes the flickering but it doesn't actually create a multisampled display
For FULLSCREEN it increases flickering like 10x

Then, I looked at what was happening, and noticed a bug in _al_d3d_generate_display_format_list, in that it was enumerating the multisampling quality levels, but populating a bogus quality in the display options (which was then passed to D3D, and causing it to fail). Here's the fix which appears to help in my case (could you test it?):
diff --git a/src/win/d3d_display_formats.cpp b/src/win/d3d_display_formats.cpp
index 14f749a3c..9081a8b7a 100644
--- a/src/win/d3d_display_formats.cpp
+++ b/src/win/d3d_display_formats.cpp
@@ -134,7 +134,7 @@ void _al_d3d_generate_display_format_list(void)
                if (k > 1) {
                   eds->settings[ALLEGRO_SAMPLE_BUFFERS] = 1;
                   // TODO: Is it ok to use the quality level here?
-                  eds->settings[ALLEGRO_SAMPLES] = k;
+                  eds->settings[ALLEGRO_SAMPLES] = k - 1;
                }
             }
          }
But stepping back a bit... D3D9 quality levels do not map to number of samples of taken, so the entire API is completely broken from Allegro's point of view. Allegro user requests a certain number of samples, but the code selects the quality close to that number of samples; this won't work in general, however, as quality has no fixed relation to the number of samples. E.g. here's a table I found for some old AMD card:



Quality
Mode




0
2x MSAA


1
2f4x EQAA


2
4x MSAA


3
2f8x EQAA


4
4f8x EQAA


5
4f16x EQAA


6
8x MSAA


7
8f16x EQAA



So... yeah. Assuming the fix above works, we can fix the flickering, but the selected multi-sample quality will be quite random. We'd need to create a new API for MSAA, to fully support this.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1228,2021-03-12T20:35:47Z,2021-05-15T06:40:05Z,2021-05-15T06:40:05Z,CLOSED,False,74,24,1,https://github.com/EdgarReynaldo,DirectX MSAA fix for flicker on startup in windowed and fullscreen mode,5,[],https://github.com/liballeg/allegro5/pull/1228,https://github.com/SiegeLord,5,https://github.com/liballeg/allegro5/pull/1228#issuecomment-841610297,,I committed a version of my change in b1f96f7. I don't think this PR is necessary anymore.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1230,2021-03-20T19:32:07Z,2021-03-20T20:07:10Z,2021-03-20T20:07:10Z,MERGED,True,4,0,1,https://github.com/BillKek,Regular exit added,1,[],https://github.com/liballeg/allegro5/pull/1230,https://github.com/BillKek,1,https://github.com/liballeg/allegro5/pull/1230,"Regular exit added. ( Cannot exit from App without magic keystroke ""Esc"" )
Tested OK on Windows with MSYS2/Mingw64.","Regular exit added. ( Cannot exit from App without magic keystroke ""Esc"" )
Tested OK on Windows with MSYS2/Mingw64.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1230,2021-03-20T19:32:07Z,2021-03-20T20:07:10Z,2021-03-20T20:07:10Z,MERGED,True,4,0,1,https://github.com/BillKek,Regular exit added,1,[],https://github.com/liballeg/allegro5/pull/1230,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1230#issuecomment-803456334,"Regular exit added. ( Cannot exit from App without magic keystroke ""Esc"" )
Tested OK on Windows with MSYS2/Mingw64.",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1234,2021-03-31T19:14:21Z,2021-04-12T04:20:43Z,2021-04-12T04:20:43Z,MERGED,True,18,11,1,https://github.com/pedro-w,Use the compatibility aliases for accessing struct input_event,1,[],https://github.com/liballeg/allegro5/pull/1234,https://github.com/pedro-w,1,https://github.com/liballeg/allegro5/pull/1234,"The current code assumes that struct input_event has a member time of type struct timeval. This is not true on every platform, one such being 32-bit ARM. The Linux header input.h defines two macros input_event_sec and input_event_usec which are correct on every platform. This patch uses these aliases instead for improved compatibility.
Fixes #1233","The current code assumes that struct input_event has a member time of type struct timeval. This is not true on every platform, one such being 32-bit ARM. The Linux header input.h defines two macros input_event_sec and input_event_usec which are correct on every platform. This patch uses these aliases instead for improved compatibility.
Fixes #1233",True,{'THUMBS_UP': ['https://github.com/beoran']}
liballeg/allegro5,https://github.com/liballeg/allegro5,1234,2021-03-31T19:14:21Z,2021-04-12T04:20:43Z,2021-04-12T04:20:43Z,MERGED,True,18,11,1,https://github.com/pedro-w,Use the compatibility aliases for accessing struct input_event,1,[],https://github.com/liballeg/allegro5/pull/1234,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1234#issuecomment-817467168,"The current code assumes that struct input_event has a member time of type struct timeval. This is not true on every platform, one such being 32-bit ARM. The Linux header input.h defines two macros input_event_sec and input_event_usec which are correct on every platform. This patch uses these aliases instead for improved compatibility.
Fixes #1233","Looks good, thanks.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1238,2021-04-10T13:08:20Z,2021-07-12T01:00:42Z,2021-07-12T01:00:42Z,CLOSED,False,315,6,13,https://github.com/aldrikboy,List audio devices,14,[],https://github.com/liballeg/allegro5/pull/1238,https://github.com/aldrikboy,1,https://github.com/liballeg/allegro5/pull/1238,"Add audio device enumeration to the dsound, sdl, alsa and pulseaudio backends (not implemented: openal, kcm, aqueue, oss).
Example usage:
int count = al_get_audio_device_count(); // returns -1 for unsupported backends
printf(""audio device count: %d\n"", count);

for (int i = 0; i < count; i++)
{
	ALLEGRO_AUDIO_DEVICE* device = al_get_audio_device(i);
	
	printf(""audio device: %s\n"", al_get_audio_device_name(device));
}

the device identifier is also stored so audio device selection could easily be implemented.","Add audio device enumeration to the dsound, sdl, alsa and pulseaudio backends (not implemented: openal, kcm, aqueue, oss).
Example usage:
int count = al_get_audio_device_count(); // returns -1 for unsupported backends
printf(""audio device count: %d\n"", count);

for (int i = 0; i < count; i++)
{
	ALLEGRO_AUDIO_DEVICE* device = al_get_audio_device(i);
	
	printf(""audio device: %s\n"", al_get_audio_device_name(device));
}

the device identifier is also stored so audio device selection could easily be implemented.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1238,2021-04-10T13:08:20Z,2021-07-12T01:00:42Z,2021-07-12T01:00:42Z,CLOSED,False,315,6,13,https://github.com/aldrikboy,List audio devices,14,[],https://github.com/liballeg/allegro5/pull/1238,https://github.com/pedro-w,2,https://github.com/liballeg/allegro5/pull/1238#issuecomment-817283566,"Add audio device enumeration to the dsound, sdl, alsa and pulseaudio backends (not implemented: openal, kcm, aqueue, oss).
Example usage:
int count = al_get_audio_device_count(); // returns -1 for unsupported backends
printf(""audio device count: %d\n"", count);

for (int i = 0; i < count; i++)
{
	ALLEGRO_AUDIO_DEVICE* device = al_get_audio_device(i);
	
	printf(""audio device: %s\n"", al_get_audio_device_name(device));
}

the device identifier is also stored so audio device selection could easily be implemented.","This is great and when it's merged I will (try to) implement it for MacOS.
Please could you also update the documentation?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1238,2021-04-10T13:08:20Z,2021-07-12T01:00:42Z,2021-07-12T01:00:42Z,CLOSED,False,315,6,13,https://github.com/aldrikboy,List audio devices,14,[],https://github.com/liballeg/allegro5/pull/1238,https://github.com/aldrikboy,3,https://github.com/liballeg/allegro5/pull/1238#issuecomment-817297320,"Add audio device enumeration to the dsound, sdl, alsa and pulseaudio backends (not implemented: openal, kcm, aqueue, oss).
Example usage:
int count = al_get_audio_device_count(); // returns -1 for unsupported backends
printf(""audio device count: %d\n"", count);

for (int i = 0; i < count; i++)
{
	ALLEGRO_AUDIO_DEVICE* device = al_get_audio_device(i);
	
	printf(""audio device: %s\n"", al_get_audio_device_name(device));
}

the device identifier is also stored so audio device selection could easily be implemented.","I am unable to get the docs building on my machine, could you please check if my changes are displaying correctly in the docs?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1238,2021-04-10T13:08:20Z,2021-07-12T01:00:42Z,2021-07-12T01:00:42Z,CLOSED,False,315,6,13,https://github.com/aldrikboy,List audio devices,14,[],https://github.com/liballeg/allegro5/pull/1238,https://github.com/pedro-w,4,https://github.com/liballeg/allegro5/pull/1238#issuecomment-817303445,"Add audio device enumeration to the dsound, sdl, alsa and pulseaudio backends (not implemented: openal, kcm, aqueue, oss).
Example usage:
int count = al_get_audio_device_count(); // returns -1 for unsupported backends
printf(""audio device count: %d\n"", count);

for (int i = 0; i < count; i++)
{
	ALLEGRO_AUDIO_DEVICE* device = al_get_audio_device(i);
	
	printf(""audio device: %s\n"", al_get_audio_device_name(device));
}

the device identifier is also stored so audio device selection could easily be implemented.","Almost! The make_doc utility needs a special format comment in the source code so it can extract the parameters and link to source. For a function it just needs to be Function:  followed by the name of the function. See for example

  
    
      allegro5/addons/audio/audio.c
    
    
        Lines 125 to 129
      in
      e1a0e7b
    
  
  
    

        
          
           /* Function: al_fill_silence 
        

        
          
            */ 
        

        
          
           void al_fill_silence(void *buf, unsigned int samples, 
        

        
          
              ALLEGRO_AUDIO_DEPTH depth, ALLEGRO_CHANNEL_CONF chan_conf) 
        

        
          
           { 
        
    
  


Without that you just get

and the source link goes to the top of the docs page, not the source.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1238,2021-04-10T13:08:20Z,2021-07-12T01:00:42Z,2021-07-12T01:00:42Z,CLOSED,False,315,6,13,https://github.com/aldrikboy,List audio devices,14,[],https://github.com/liballeg/allegro5/pull/1238,https://github.com/pedro-w,5,https://github.com/liballeg/allegro5/pull/1238#issuecomment-817331742,"Add audio device enumeration to the dsound, sdl, alsa and pulseaudio backends (not implemented: openal, kcm, aqueue, oss).
Example usage:
int count = al_get_audio_device_count(); // returns -1 for unsupported backends
printf(""audio device count: %d\n"", count);

for (int i = 0; i < count; i++)
{
	ALLEGRO_AUDIO_DEVICE* device = al_get_audio_device(i);
	
	printf(""audio device: %s\n"", al_get_audio_device_name(device));
}

the device identifier is also stored so audio device selection could easily be implemented.","Nailed it!
@SiegeLord  it would be great if this could be merged",True,"{'HOORAY': ['https://github.com/aldrikboy', 'https://github.com/beoran']}"
liballeg/allegro5,https://github.com/liballeg/allegro5,1238,2021-04-10T13:08:20Z,2021-07-12T01:00:42Z,2021-07-12T01:00:42Z,CLOSED,False,315,6,13,https://github.com/aldrikboy,List audio devices,14,[],https://github.com/liballeg/allegro5/pull/1238,https://github.com/SiegeLord,6,https://github.com/liballeg/allegro5/pull/1238#issuecomment-877896826,"Add audio device enumeration to the dsound, sdl, alsa and pulseaudio backends (not implemented: openal, kcm, aqueue, oss).
Example usage:
int count = al_get_audio_device_count(); // returns -1 for unsupported backends
printf(""audio device count: %d\n"", count);

for (int i = 0; i < count; i++)
{
	ALLEGRO_AUDIO_DEVICE* device = al_get_audio_device(i);
	
	printf(""audio device: %s\n"", al_get_audio_device_name(device));
}

the device identifier is also stored so audio device selection could easily be implemented.",This got merged via #1263.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1245,2021-05-15T04:26:52Z,2021-05-15T19:33:48Z,2021-05-15T19:33:48Z,MERGED,True,8,8,1,https://github.com/SiegeLord,Fix Vorbis/Opus support under MSVC + Clang.,1,[],https://github.com/liballeg/allegro5/pull/1245,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1245,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1250,2021-05-23T04:54:49Z,2021-05-25T16:59:04Z,2021-05-25T16:59:04Z,MERGED,True,149,4,5,https://github.com/SiegeLord,Add a configuration summary. Currently this mostly reports the addon features.,4,[],https://github.com/liballeg/allegro5/pull/1250,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1250,"Example output:
===========================
Configuration summary
===========================
- OpenGL: Desktop
- Primitives addon: yes
- Image addon: yes
 - GDI+: NO
 - FreeImage: NO
 - libpng: NO
 - libjpeg: NO
 - libwebp: NO
- Font addon: yes
- Audio addon: yes
- Acodec addon: yes
 - FLAC: NO
 - DUMB: NO
 - Ogg/Vorbis: NO
 - Opus: NO
 - MP3: NO
- TTF addon: yes
- Color addon: yes
- Memfile addon: yes
- PhysFS addon: NO
- Native Dialog addon: yes
- Video addon: NO
===========================","Example output:
===========================
Configuration summary
===========================
- OpenGL: Desktop
- Primitives addon: yes
- Image addon: yes
 - GDI+: NO
 - FreeImage: NO
 - libpng: NO
 - libjpeg: NO
 - libwebp: NO
- Font addon: yes
- Audio addon: yes
- Acodec addon: yes
 - FLAC: NO
 - DUMB: NO
 - Ogg/Vorbis: NO
 - Opus: NO
 - MP3: NO
- TTF addon: yes
- Color addon: yes
- Memfile addon: yes
- PhysFS addon: NO
- Native Dialog addon: yes
- Video addon: NO
===========================",True,{'THUMBS_UP': ['https://github.com/beoran']}
liballeg/allegro5,https://github.com/liballeg/allegro5,1253,2021-06-08T19:44:26Z,2021-06-27T23:52:43Z,2021-06-27T23:52:43Z,MERGED,True,266,133,4,https://github.com/pedro-w,Prevent RLE data in corrupt .tga from overflowing the buffer,4,[],https://github.com/liballeg/allegro5/pull/1253,https://github.com/pedro-w,1,https://github.com/liballeg/allegro5/pull/1253,"Also masked out the 1-bit A value from a 15-bit image; this could
cause the bounds of _al_rgb_scale_5[] to be exceeded.
PLEASE REVIEW as the TGA loader is complicated (may be possible to simplify with a more extensive re-write)
Fixes #1251","Also masked out the 1-bit A value from a 15-bit image; this could
cause the bounds of _al_rgb_scale_5[] to be exceeded.
PLEASE REVIEW as the TGA loader is complicated (may be possible to simplify with a more extensive re-write)
Fixes #1251",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1253,2021-06-08T19:44:26Z,2021-06-27T23:52:43Z,2021-06-27T23:52:43Z,MERGED,True,266,133,4,https://github.com/pedro-w,Prevent RLE data in corrupt .tga from overflowing the buffer,4,[],https://github.com/liballeg/allegro5/pull/1253,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1253#issuecomment-869243470,"Also masked out the 1-bit A value from a 15-bit image; this could
cause the bounds of _al_rgb_scale_5[] to be exceeded.
PLEASE REVIEW as the TGA loader is complicated (may be possible to simplify with a more extensive re-write)
Fixes #1251","This looks awesome. I looked over it, and it looks good; all the tests pass, sounds like it's all good. We should add the testcases that motivated this, but we can do that later.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1254,2021-06-16T16:23:28Z,2021-06-21T05:40:25Z,2021-06-21T07:40:24Z,MERGED,True,2,2,1,https://github.com/pedro-w,Allow space for string null terminator in sscanf,1,[],https://github.com/liballeg/allegro5/pull/1254,https://github.com/pedro-w,1,https://github.com/liballeg/allegro5/pull/1254,Causes an error if using ASan,Causes an error if using ASan,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1254,2021-06-16T16:23:28Z,2021-06-21T05:40:25Z,2021-06-21T07:40:24Z,MERGED,True,2,2,1,https://github.com/pedro-w,Allow space for string null terminator in sscanf,1,[],https://github.com/liballeg/allegro5/pull/1254,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1254#issuecomment-864743731,Causes an error if using ASan,"Bugs in the test driver itself? Astonishing.
Thanks for the fix!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1254,2021-06-16T16:23:28Z,2021-06-21T05:40:25Z,2021-06-21T07:40:24Z,MERGED,True,2,2,1,https://github.com/pedro-w,Allow space for string null terminator in sscanf,1,[],https://github.com/liballeg/allegro5/pull/1254,https://github.com/pedro-w,3,https://github.com/liballeg/allegro5/pull/1254#issuecomment-864802409,Causes an error if using ASan,It doesn't get triggered by the existing test scripts AFAICS. I just came across it because I was building/running Allegro with -fsanitize=address (to sort out that bitmap-loading stuff) and it came up with a few hits.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1255,2021-06-16T16:24:47Z,2021-06-21T05:41:50Z,2021-06-21T07:43:07Z,MERGED,True,1,1,1,https://github.com/pedro-w,Fix size calculation for memmove,1,[],https://github.com/liballeg/allegro5/pull/1255,https://github.com/pedro-w,1,https://github.com/liballeg/allegro5/pull/1255,Previously was moving one element too many. Found using the address sanitizer on scan_examples.c,Previously was moving one element too many. Found using the address sanitizer on scan_examples.c,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1255,2021-06-16T16:24:47Z,2021-06-21T05:41:50Z,2021-06-21T07:43:07Z,MERGED,True,1,1,1,https://github.com/pedro-w,Fix size calculation for memmove,1,[],https://github.com/liballeg/allegro5/pull/1255,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1255#issuecomment-864744238,Previously was moving one element too many. Found using the address sanitizer on scan_examples.c,Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1256,2021-06-16T16:25:29Z,2021-06-22T05:32:25Z,2021-06-22T07:06:33Z,MERGED,True,1,11,1,https://github.com/pedro-w,Fix memory leak,1,[],https://github.com/liballeg/allegro5/pull/1256,https://github.com/pedro-w,1,https://github.com/liballeg/allegro5/pull/1256,Don't need to call xstrdup as aatree already does it.,Don't need to call xstrdup as aatree already does it.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1256,2021-06-16T16:25:29Z,2021-06-22T05:32:25Z,2021-06-22T07:06:33Z,MERGED,True,1,11,1,https://github.com/pedro-w,Fix memory leak,1,[],https://github.com/liballeg/allegro5/pull/1256,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1256#issuecomment-864746635,Don't need to call xstrdup as aatree already does it.,"I don't quite follow the logic of this change. I don't see where in aatree.c we're duplicating the key/value. If aatree is owning pointers, I'd expect us to write a _al_aa_free w/ a custom key/value destructor.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1256,2021-06-16T16:25:29Z,2021-06-22T05:32:25Z,2021-06-22T07:06:33Z,MERGED,True,1,11,1,https://github.com/pedro-w,Fix memory leak,1,[],https://github.com/liballeg/allegro5/pull/1256,https://github.com/pedro-w,3,https://github.com/liballeg/allegro5/pull/1256#issuecomment-864799805,Don't need to call xstrdup as aatree already does it.,"When calling aa_insert it recurses but will eventually either call xstrdup here if the key exists, or call aa_singleton here if it doesn't.
So, it always makes a copy of the value and either copies the key or uses the existing key. Therefore calling aa_insert with a key and value does not transfer ownership of that key and value to the Aatree.
This means that when we call aa_insert from make_index.c we don't need to duplicate the key/value just before:

  
    
      allegro5/docs/scripts/make_index.c
    
    
        Lines 54 to 56
      in
      5595375
    
  
  
    

        
          
           const char *ref = d_submatch(1); 
        

        
          
           char *s = xstrdup(ref); 
        

        
          
           root = aa_insert(root, s, s); 
        
    
  


Does that make sense?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1256,2021-06-16T16:25:29Z,2021-06-22T05:32:25Z,2021-06-22T07:06:33Z,MERGED,True,1,11,1,https://github.com/pedro-w,Fix memory leak,1,[],https://github.com/liballeg/allegro5/pull/1256,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/1256#issuecomment-865609885,Don't need to call xstrdup as aatree already does it.,"Ok, that makes sense. Thanks for the explanation and the fix!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1261,2021-07-07T13:23:24Z,2021-07-08T02:46:59Z,2021-07-08T02:47:10Z,MERGED,True,0,21,1,https://github.com/allefant,fix osx crash,1,[],https://github.com/liballeg/allegro5/pull/1261,https://github.com/allefant,1,https://github.com/liballeg/allegro5/pull/1261,"This fixes #1260 - I have no idea what _osx_threads was meant to be used for but it is not currently being used and obviously had no guards against concurrent writes, causing the crash.","This fixes #1260 - I have no idea what _osx_threads was meant to be used for but it is not currently being used and obviously had no guards against concurrent writes, causing the crash.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1261,2021-07-07T13:23:24Z,2021-07-08T02:46:59Z,2021-07-08T02:47:10Z,MERGED,True,0,21,1,https://github.com/allefant,fix osx crash,1,[],https://github.com/liballeg/allegro5/pull/1261,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1261#issuecomment-876078122,"This fixes #1260 - I have no idea what _osx_threads was meant to be used for but it is not currently being used and obviously had no guards against concurrent writes, causing the crash.",Looks fine to me!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1263,2021-07-11T23:26:45Z,2021-07-12T01:00:15Z,2021-07-12T01:00:15Z,MERGED,True,387,7,15,https://github.com/SiegeLord,List audio devices,20,[],https://github.com/liballeg/allegro5/pull/1263,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1263,Copy of #1238 with my changes.,Copy of #1238 with my changes.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1265,2021-07-18T05:01:04Z,2021-12-09T03:41:40Z,2021-12-09T03:41:40Z,CLOSED,False,1,1,1,https://github.com/lorry-lee,"Fix the issue in _al_list_at function, when index is greater or equal…",1,[],https://github.com/liballeg/allegro5/pull/1265,https://github.com/lorry-lee,1,https://github.com/liballeg/allegro5/pull/1265,"… list->size / 2, it passed 1 extra element.","… list->size / 2, it passed 1 extra element.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1265,2021-07-18T05:01:04Z,2021-12-09T03:41:40Z,2021-12-09T03:41:40Z,CLOSED,False,1,1,1,https://github.com/lorry-lee,"Fix the issue in _al_list_at function, when index is greater or equal…",1,[],https://github.com/liballeg/allegro5/pull/1265,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1265#issuecomment-882023382,"… list->size / 2, it passed 1 extra element.","I just added some actual tests for list.c, but they appear to pass without this change. When I add in this change, I get an infinite loop. Are you sure this is right? To try the tests yourself, pull the latest master branch and run: make run_standalone_tests.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1265,2021-07-18T05:01:04Z,2021-12-09T03:41:40Z,2021-12-09T03:41:40Z,CLOSED,False,1,1,1,https://github.com/lorry-lee,"Fix the issue in _al_list_at function, when index is greater or equal…",1,[],https://github.com/liballeg/allegro5/pull/1265,https://github.com/lorry-lee,3,https://github.com/liballeg/allegro5/pull/1265#issuecomment-882073125,"… list->size / 2, it passed 1 extra element.","@SiegeLord I've tried it, well on windows with visual studio, the test failed without my change:
      // Here it already got the wrong item returned when i == 0 because of the issue I'm fixing
      item = _al_list_at(list, i);
      // This throw exception for me because of accessing invalid memory
      assert(*(int*)_al_list_item_data(item) == xs[i]);

With my change, there is no problem of running the test.
Also with a simple test I did on my side, without my change it doesn't work, and it worked after I apply my change:
   int xs[11] = {0,1,2,3,4,5,6,7,8,9,10};

   _AL_LIST* list = _al_list_create();

   for (int i = 0; i < 11; ++i)
      _al_list_push_back(list, &xs[i]);

   _AL_LIST_ITEM* item = _al_list_at(list, 7);
   int value = (*(int*)_al_list_item_data(item));
   assert(7 == value);

   _al_list_destroy(list);",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1265,2021-07-18T05:01:04Z,2021-12-09T03:41:40Z,2021-12-09T03:41:40Z,CLOSED,False,1,1,1,https://github.com/lorry-lee,"Fix the issue in _al_list_at function, when index is greater or equal…",1,[],https://github.com/liballeg/allegro5/pull/1265,https://github.com/pedro-w,4,https://github.com/liballeg/allegro5/pull/1265#issuecomment-882075834,"… list->size / 2, it passed 1 extra element.","Didn't some of this code get changed recently, maybe with the audio driver
listing? Sorry haven't got any access at the moment so can't check.
…
On Sun, 18 Jul 2021 at 16:20, lorry ***@***.***> wrote:
 @SiegeLord <https://github.com/SiegeLord> I've tried it, well on windows
 with visual studio, the test failed without my change:

   // Here it already got the wrong item returned when i == 0 because of the issue I'm fixing
   item = _al_list_at(list, i);
   // This throw exception for me because of accessing invalid memory
   assert(*(int*)_al_list_item_data(item) == xs[i]);

 With my change, there is no problem of running the test.

 Also with a simple test I did on my side, without my change it doesn't
 work, and it worked after I apply my change:

 int xs[11] = {0,1,2,3,4,5,6,7,8,9,10};

 _AL_LIST* list = _al_list_create();

 for (int i = 0; i < 11; ++i)
 _al_list_push_back(list, &xs[i]);

 _AL_LIST_ITEM* item = _al_list_at(list, 7);
 int value = (*(int*)_al_list_item_data(item));
 assert(7 == value);

 _al_list_destroy(list);

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#1265 (comment)>,
 or unsubscribe
 <https://github.com/notifications/unsubscribe-auth/AFJFGZ4GYAPWOMHLOOFYDMTTYLWKJANCNFSM5ARYIS2Q>
 .",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1265,2021-07-18T05:01:04Z,2021-12-09T03:41:40Z,2021-12-09T03:41:40Z,CLOSED,False,1,1,1,https://github.com/lorry-lee,"Fix the issue in _al_list_at function, when index is greater or equal…",1,[],https://github.com/liballeg/allegro5/pull/1265,https://github.com/pedro-w,5,https://github.com/liballeg/allegro5/pull/1265#issuecomment-902490558,"… list->size / 2, it passed 1 extra element.","I think it was already fixed by c2c9c8b in a different way. Do you agree?
[edit] Also, how come ""All checks have passed"" - shouldn't the new tests in c5e1631 cause it to fail?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1265,2021-07-18T05:01:04Z,2021-12-09T03:41:40Z,2021-12-09T03:41:40Z,CLOSED,False,1,1,1,https://github.com/lorry-lee,"Fix the issue in _al_list_at function, when index is greater or equal…",1,[],https://github.com/liballeg/allegro5/pull/1265,https://github.com/lorry-lee,6,https://github.com/liballeg/allegro5/pull/1265#issuecomment-902726071,"… list->size / 2, it passed 1 extra element.","I agree it's the same fix.
Maybe I misunderstood something, but with my fix, I think it should pass, which is the same result as my local test.
I'm not sure what is/should be the status without my fix.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1265,2021-07-18T05:01:04Z,2021-12-09T03:41:40Z,2021-12-09T03:41:40Z,CLOSED,False,1,1,1,https://github.com/lorry-lee,"Fix the issue in _al_list_at function, when index is greater or equal…",1,[],https://github.com/liballeg/allegro5/pull/1265,https://github.com/SiegeLord,7,https://github.com/liballeg/allegro5/pull/1265#issuecomment-989480690,"… list->size / 2, it passed 1 extra element.","I checked again, and I think the code is correct as is (with the previous fix). Thanks either way!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1266,2021-07-18T08:41:32Z,2021-07-18T08:50:13Z,2021-07-18T08:50:13Z,MERGED,True,163,19,3,https://github.com/SiegeLord,Add tests for list.c,2,[],https://github.com/liballeg/allegro5/pull/1266,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1266,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1267,2021-07-18T22:27:19Z,2021-08-14T21:00:27Z,2021-08-14T21:00:27Z,MERGED,True,43,32,3,https://github.com/dos1,android: Update Gradle to 5.0,1,[],https://github.com/liballeg/allegro5/pull/1267,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/1267,"This brings OpenJDK 11 support in.
I had troubles with Gradle versions newer than that, so decided to not jump higher as OpenJDK 11 is a version that's still supported - as opposed to OpenJDK 8 that was required with Gradle 4.6 which is end-of-life and unavailable in several distros already.","This brings OpenJDK 11 support in.
I had troubles with Gradle versions newer than that, so decided to not jump higher as OpenJDK 11 is a version that's still supported - as opposed to OpenJDK 8 that was required with Gradle 4.6 which is end-of-life and unavailable in several distros already.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1267,2021-07-18T22:27:19Z,2021-08-14T21:00:27Z,2021-08-14T21:00:27Z,MERGED,True,43,32,3,https://github.com/dos1,android: Update Gradle to 5.0,1,[],https://github.com/liballeg/allegro5/pull/1267,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1267#issuecomment-898958198,"This brings OpenJDK 11 support in.
I had troubles with Gradle versions newer than that, so decided to not jump higher as OpenJDK 11 is a version that's still supported - as opposed to OpenJDK 8 that was required with Gradle 4.6 which is end-of-life and unavailable in several distros already.","Everything appears to work well, thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1268,2021-07-23T17:49:44Z,2021-08-14T21:01:20Z,2021-08-14T21:01:21Z,MERGED,True,6,4,1,https://github.com/dos1,SDL: touch: Ignore touch events from indirect touch devices,1,[],https://github.com/liballeg/allegro5/pull/1268,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/1268,There's no equivalent API in Allegro for them yet.,There's no equivalent API in Allegro for them yet.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1268,2021-07-23T17:49:44Z,2021-08-14T21:01:20Z,2021-08-14T21:01:21Z,MERGED,True,6,4,1,https://github.com/dos1,SDL: touch: Ignore touch events from indirect touch devices,1,[],https://github.com/liballeg/allegro5/pull/1268,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1268#issuecomment-898958328,There's no equivalent API in Allegro for them yet.,Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1269,2021-07-23T18:36:33Z,2021-08-18T02:07:44Z,2021-08-18T02:07:44Z,MERGED,True,52,46,1,https://github.com/dos1,SDL: Use SDL_PeepEvents for event handling,1,[],https://github.com/liballeg/allegro5/pull/1269,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/1269,"This should improve performance on platforms where SDL_PumpEvents
is expensive, like Emscripten.","This should improve performance on platforms where SDL_PumpEvents
is expensive, like Emscripten.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1269,2021-07-23T18:36:33Z,2021-08-18T02:07:44Z,2021-08-18T02:07:44Z,MERGED,True,52,46,1,https://github.com/dos1,SDL: Use SDL_PeepEvents for event handling,1,[],https://github.com/liballeg/allegro5/pull/1269,https://github.com/dos1,2,https://github.com/liballeg/allegro5/pull/1269#issuecomment-886361435,"This should improve performance on platforms where SDL_PumpEvents
is expensive, like Emscripten.",Updated to get rid of C99ism.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1269,2021-07-23T18:36:33Z,2021-08-18T02:07:44Z,2021-08-18T02:07:44Z,MERGED,True,52,46,1,https://github.com/dos1,SDL: Use SDL_PeepEvents for event handling,1,[],https://github.com/liballeg/allegro5/pull/1269,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/1269#issuecomment-900756504,"This should improve performance on platforms where SDL_PumpEvents
is expensive, like Emscripten.",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1270,2021-07-24T12:58:27Z,2021-08-14T21:20:25Z,2021-08-14T21:20:25Z,MERGED,True,2,1,1,https://github.com/tehsausage,Fix build failure with sanitizers enabled,1,[],https://github.com/liballeg/allegro5/pull/1270,https://github.com/tehsausage,1,https://github.com/liballeg/allegro5/pull/1270,"Without this change the build fails with GCC's sanitizers enabled (probably ubsan) due to calling strncpy with a NULL source parameter:
[...]/allegro5/docs/scripts/dawk.c:247:10: runtime error: null pointer passed as argument 2, which is declared to never be null
    #0 0x558d2fc7fda0 in d_match [...]/allegro5/docs/scripts/dawk.c:247
    #1 0x558d2fc7d698 in main [...]/allegro5/docs/scripts/make_html_refs.c:34
    #2 0x7f97781ec7ec in __libc_start_main ../csu/libc-start.c:332
    #3 0x558d2fc7d389 in _start ([...]/allegro5-native-Debug/docs/make_html_refs+0x1c389)

Reproduction: build with gcc flag -fsanitize=undefined, and environment variable UBSAN_OPTIONS=print_stacktrace=1,halt_on_error=1,abort_on_error=1 set.","Without this change the build fails with GCC's sanitizers enabled (probably ubsan) due to calling strncpy with a NULL source parameter:
[...]/allegro5/docs/scripts/dawk.c:247:10: runtime error: null pointer passed as argument 2, which is declared to never be null
    #0 0x558d2fc7fda0 in d_match [...]/allegro5/docs/scripts/dawk.c:247
    #1 0x558d2fc7d698 in main [...]/allegro5/docs/scripts/make_html_refs.c:34
    #2 0x7f97781ec7ec in __libc_start_main ../csu/libc-start.c:332
    #3 0x558d2fc7d389 in _start ([...]/allegro5-native-Debug/docs/make_html_refs+0x1c389)

Reproduction: build with gcc flag -fsanitize=undefined, and environment variable UBSAN_OPTIONS=print_stacktrace=1,halt_on_error=1,abort_on_error=1 set.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1270,2021-07-24T12:58:27Z,2021-08-14T21:20:25Z,2021-08-14T21:20:25Z,MERGED,True,2,1,1,https://github.com/tehsausage,Fix build failure with sanitizers enabled,1,[],https://github.com/liballeg/allegro5/pull/1270,https://github.com/tehsausage,2,https://github.com/liballeg/allegro5/pull/1270#issuecomment-886071781,"Without this change the build fails with GCC's sanitizers enabled (probably ubsan) due to calling strncpy with a NULL source parameter:
[...]/allegro5/docs/scripts/dawk.c:247:10: runtime error: null pointer passed as argument 2, which is declared to never be null
    #0 0x558d2fc7fda0 in d_match [...]/allegro5/docs/scripts/dawk.c:247
    #1 0x558d2fc7d698 in main [...]/allegro5/docs/scripts/make_html_refs.c:34
    #2 0x7f97781ec7ec in __libc_start_main ../csu/libc-start.c:332
    #3 0x558d2fc7d389 in _start ([...]/allegro5-native-Debug/docs/make_html_refs+0x1c389)

Reproduction: build with gcc flag -fsanitize=undefined, and environment variable UBSAN_OPTIONS=print_stacktrace=1,halt_on_error=1,abort_on_error=1 set.","Considering that asan isn't giving me grief about buffer overflows, its fair to say that isn't an issue right now. I think someone would have to drop a 3000 character line in to one of the documentation files in order to make anything break.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1270,2021-07-24T12:58:27Z,2021-08-14T21:20:25Z,2021-08-14T21:20:25Z,MERGED,True,2,1,1,https://github.com/tehsausage,Fix build failure with sanitizers enabled,1,[],https://github.com/liballeg/allegro5/pull/1270,https://github.com/dos1,3,https://github.com/liballeg/allegro5/pull/1270#issuecomment-886116447,"Without this change the build fails with GCC's sanitizers enabled (probably ubsan) due to calling strncpy with a NULL source parameter:
[...]/allegro5/docs/scripts/dawk.c:247:10: runtime error: null pointer passed as argument 2, which is declared to never be null
    #0 0x558d2fc7fda0 in d_match [...]/allegro5/docs/scripts/dawk.c:247
    #1 0x558d2fc7d698 in main [...]/allegro5/docs/scripts/make_html_refs.c:34
    #2 0x7f97781ec7ec in __libc_start_main ../csu/libc-start.c:332
    #3 0x558d2fc7d389 in _start ([...]/allegro5-native-Debug/docs/make_html_refs+0x1c389)

Reproduction: build with gcc flag -fsanitize=undefined, and environment variable UBSAN_OPTIONS=print_stacktrace=1,halt_on_error=1,abort_on_error=1 set.","@pedro-w Looking at that code it seems to me like it's using strncpy correctly:
The strncpy() function is similar [to strcpy], except that at most n bytes of src are copied.

When using MAX_MATCH instead of match.len it would copy everything till the end of the string, not just the matching substring. Seems like match.len should always be less than MAX_MATCH (or could it be equal? needs checking). You could use memcpy instead indeed, but from quick glance at the current code it appears to me to be correct nevertheless.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1270,2021-07-24T12:58:27Z,2021-08-14T21:20:25Z,2021-08-14T21:20:25Z,MERGED,True,2,1,1,https://github.com/tehsausage,Fix build failure with sanitizers enabled,1,[],https://github.com/liballeg/allegro5/pull/1270,https://github.com/pedro-w,4,https://github.com/liballeg/allegro5/pull/1270#issuecomment-886181985,"Without this change the build fails with GCC's sanitizers enabled (probably ubsan) due to calling strncpy with a NULL source parameter:
[...]/allegro5/docs/scripts/dawk.c:247:10: runtime error: null pointer passed as argument 2, which is declared to never be null
    #0 0x558d2fc7fda0 in d_match [...]/allegro5/docs/scripts/dawk.c:247
    #1 0x558d2fc7d698 in main [...]/allegro5/docs/scripts/make_html_refs.c:34
    #2 0x7f97781ec7ec in __libc_start_main ../csu/libc-start.c:332
    #3 0x558d2fc7d389 in _start ([...]/allegro5-native-Debug/docs/make_html_refs+0x1c389)

Reproduction: build with gcc flag -fsanitize=undefined, and environment variable UBSAN_OPTIONS=print_stacktrace=1,halt_on_error=1,abort_on_error=1 set.","I do agree entirely. I should have said more clearly, I didn't mean that the code (with @tehsausage patch) is buggy, just that strncpy isn't the simplest function that would do the job here (and I like simple!) As long as we're sure that this can't overflow the destination, I'm OK with it.
I did hope that memcpy(..., NULL, 0) would be valid (albeit a no-op) and then we could skip the test. But it seems that Posix says that's undefined behaviour, according to this
By the way, is it the case that match.begin is only NULL, when match.len is zero, i.e. it's an empty capture? We're not just ignoring some error condition elsewhere are we?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1270,2021-07-24T12:58:27Z,2021-08-14T21:20:25Z,2021-08-14T21:20:25Z,MERGED,True,2,1,1,https://github.com/tehsausage,Fix build failure with sanitizers enabled,1,[],https://github.com/liballeg/allegro5/pull/1270,https://github.com/SiegeLord,5,https://github.com/liballeg/allegro5/pull/1270#issuecomment-898960063,"Without this change the build fails with GCC's sanitizers enabled (probably ubsan) due to calling strncpy with a NULL source parameter:
[...]/allegro5/docs/scripts/dawk.c:247:10: runtime error: null pointer passed as argument 2, which is declared to never be null
    #0 0x558d2fc7fda0 in d_match [...]/allegro5/docs/scripts/dawk.c:247
    #1 0x558d2fc7d698 in main [...]/allegro5/docs/scripts/make_html_refs.c:34
    #2 0x7f97781ec7ec in __libc_start_main ../csu/libc-start.c:332
    #3 0x558d2fc7d389 in _start ([...]/allegro5-native-Debug/docs/make_html_refs+0x1c389)

Reproduction: build with gcc flag -fsanitize=undefined, and environment variable UBSAN_OPTIONS=print_stacktrace=1,halt_on_error=1,abort_on_error=1 set.","By the way, is it the case that match.begin is only NULL, when match.len is zero, i.e. it's an empty capture? We're not just ignoring some error condition elsewhere are we?

I glanced at the code, I think it is the case.
Let's merge this. Thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1275,2021-08-07T15:54:38Z,2021-08-14T21:25:59Z,2021-08-15T20:30:44Z,MERGED,True,0,2183,10,https://github.com/dos1,linux: Drop old and unused files,1,[],https://github.com/liballeg/allegro5/pull/1275,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/1275,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1275,2021-08-07T15:54:38Z,2021-08-14T21:25:59Z,2021-08-15T20:30:44Z,MERGED,True,0,2183,10,https://github.com/dos1,linux: Drop old and unused files,1,[],https://github.com/liballeg/allegro5/pull/1275,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1275#issuecomment-898960525,,"Weird! Well, they're truly unused, no mention of them at all in FileList.cmake. Seems harmless to get rid of these.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1275,2021-08-07T15:54:38Z,2021-08-14T21:25:59Z,2021-08-15T20:30:44Z,MERGED,True,0,2183,10,https://github.com/dos1,linux: Drop old and unused files,1,[],https://github.com/liballeg/allegro5/pull/1275,https://github.com/beoran,3,https://github.com/liballeg/allegro5/pull/1275#issuecomment-899023753,,These were for running directly on the kernel without X11 nor Wayland. But i guess that plan never panned out.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1275,2021-08-07T15:54:38Z,2021-08-14T21:25:59Z,2021-08-15T20:30:44Z,MERGED,True,0,2183,10,https://github.com/dos1,linux: Drop old and unused files,1,[],https://github.com/liballeg/allegro5/pull/1275,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/1275#issuecomment-899105938,,"The WIP KMS driver doesn't use these, so I'm not sure what use these have. We can always re-add them if they end up being necessary.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1277,2021-08-13T10:09:04Z,2021-08-29T22:20:10Z,2021-08-30T06:14:28Z,MERGED,True,659,58,19,https://github.com/tehsausage,Add audio identification / al_identify_sample(),5,[],https://github.com/liballeg/allegro5/pull/1277,https://github.com/tehsausage,1,https://github.com/liballeg/allegro5/pull/1277,"This adds the function al_identify_sample() and related function al_register_sample_identifier(), which adjusts the behavior of al_load_sample() and al_load_audio_stream() to function the same way as al_load_bitmap() and al_load_video(), by attempting to detect the file format before considering the file extension.
Some of the identifier functions, specifically for some DUMB formats and the heuristic MP3 detection, have real potential to break code that may currently be using custom audio formats registered with al_register_sample_loader() and al_register_audio_stream_loader(), due to the potential for false-positives. Particularly uncompressed mod/tracker formats are very prone to being mis-detected as MP3 due to repetitive byte patterns.
The MP3 identifier function uses an algorithm that is similar to minimp3's mp3dec_detect family of functions, but has the advantage of only loading a fixed portion of the file contents (8KB), and typically runs about 100x faster than calling mp3dec_detect().
This contains some code copy-pasted verbatim from minimp3, to avoid dependencies on non-public interface parts of minimp3, however it is CC0 licensed (https://github.com/lieff/minimp3/blob/master/LICENSE) and I invoke my right to copy this code and re-release it under Allegro's license.
A new pair of functions, al_identify_video() and al_identify_video_f(), are also added to the video addon for interface parity with image and audio. They function as expected and only support detecting the file format "".ogv"".
Outdated al_load_bitmap() documentation is also fixed to correctly describe how format detection actually works.
Test program with results: https://gist.github.com/tehsausage/1d1f17344ed474e8c8fe0005a0c277d6","This adds the function al_identify_sample() and related function al_register_sample_identifier(), which adjusts the behavior of al_load_sample() and al_load_audio_stream() to function the same way as al_load_bitmap() and al_load_video(), by attempting to detect the file format before considering the file extension.
Some of the identifier functions, specifically for some DUMB formats and the heuristic MP3 detection, have real potential to break code that may currently be using custom audio formats registered with al_register_sample_loader() and al_register_audio_stream_loader(), due to the potential for false-positives. Particularly uncompressed mod/tracker formats are very prone to being mis-detected as MP3 due to repetitive byte patterns.
The MP3 identifier function uses an algorithm that is similar to minimp3's mp3dec_detect family of functions, but has the advantage of only loading a fixed portion of the file contents (8KB), and typically runs about 100x faster than calling mp3dec_detect().
This contains some code copy-pasted verbatim from minimp3, to avoid dependencies on non-public interface parts of minimp3, however it is CC0 licensed (https://github.com/lieff/minimp3/blob/master/LICENSE) and I invoke my right to copy this code and re-release it under Allegro's license.
A new pair of functions, al_identify_video() and al_identify_video_f(), are also added to the video addon for interface parity with image and audio. They function as expected and only support detecting the file format "".ogv"".
Outdated al_load_bitmap() documentation is also fixed to correctly describe how format detection actually works.
Test program with results: https://gist.github.com/tehsausage/1d1f17344ed474e8c8fe0005a0c277d6",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1277,2021-08-13T10:09:04Z,2021-08-29T22:20:10Z,2021-08-30T06:14:28Z,MERGED,True,659,58,19,https://github.com/tehsausage,Add audio identification / al_identify_sample(),5,[],https://github.com/liballeg/allegro5/pull/1277,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1277#issuecomment-907885351,"This adds the function al_identify_sample() and related function al_register_sample_identifier(), which adjusts the behavior of al_load_sample() and al_load_audio_stream() to function the same way as al_load_bitmap() and al_load_video(), by attempting to detect the file format before considering the file extension.
Some of the identifier functions, specifically for some DUMB formats and the heuristic MP3 detection, have real potential to break code that may currently be using custom audio formats registered with al_register_sample_loader() and al_register_audio_stream_loader(), due to the potential for false-positives. Particularly uncompressed mod/tracker formats are very prone to being mis-detected as MP3 due to repetitive byte patterns.
The MP3 identifier function uses an algorithm that is similar to minimp3's mp3dec_detect family of functions, but has the advantage of only loading a fixed portion of the file contents (8KB), and typically runs about 100x faster than calling mp3dec_detect().
This contains some code copy-pasted verbatim from minimp3, to avoid dependencies on non-public interface parts of minimp3, however it is CC0 licensed (https://github.com/lieff/minimp3/blob/master/LICENSE) and I invoke my right to copy this code and re-release it under Allegro's license.
A new pair of functions, al_identify_video() and al_identify_video_f(), are also added to the video addon for interface parity with image and audio. They function as expected and only support detecting the file format "".ogv"".
Outdated al_load_bitmap() documentation is also fixed to correctly describe how format detection actually works.
Test program with results: https://gist.github.com/tehsausage/1d1f17344ed474e8c8fe0005a0c277d6","This is awesome, thanks! The code looks great; my only question is whether you think the copyright status of your test files is convenient enough to be able to use it in Allegro's automated tests? If so, I'd prefer to add tests for this at some later point.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1277,2021-08-13T10:09:04Z,2021-08-29T22:20:10Z,2021-08-30T06:14:28Z,MERGED,True,659,58,19,https://github.com/tehsausage,Add audio identification / al_identify_sample(),5,[],https://github.com/liballeg/allegro5/pull/1277,https://github.com/tehsausage,3,https://github.com/liballeg/allegro5/pull/1277#issuecomment-908061180,"This adds the function al_identify_sample() and related function al_register_sample_identifier(), which adjusts the behavior of al_load_sample() and al_load_audio_stream() to function the same way as al_load_bitmap() and al_load_video(), by attempting to detect the file format before considering the file extension.
Some of the identifier functions, specifically for some DUMB formats and the heuristic MP3 detection, have real potential to break code that may currently be using custom audio formats registered with al_register_sample_loader() and al_register_audio_stream_loader(), due to the potential for false-positives. Particularly uncompressed mod/tracker formats are very prone to being mis-detected as MP3 due to repetitive byte patterns.
The MP3 identifier function uses an algorithm that is similar to minimp3's mp3dec_detect family of functions, but has the advantage of only loading a fixed portion of the file contents (8KB), and typically runs about 100x faster than calling mp3dec_detect().
This contains some code copy-pasted verbatim from minimp3, to avoid dependencies on non-public interface parts of minimp3, however it is CC0 licensed (https://github.com/lieff/minimp3/blob/master/LICENSE) and I invoke my right to copy this code and re-release it under Allegro's license.
A new pair of functions, al_identify_video() and al_identify_video_f(), are also added to the video addon for interface parity with image and audio. They function as expected and only support detecting the file format "".ogv"".
Outdated al_load_bitmap() documentation is also fixed to correctly describe how format detection actually works.
Test program with results: https://gist.github.com/tehsausage/1d1f17344ed474e8c8fe0005a0c277d6","Mostly very copyrighted and not easily acquirable. It probably wouldn't be too hard to put together a set of small test files using ffmpeg, for the non-DUMB formats; but finding and exporting something from a dozen different tracker programs would be a lot of work, and I think some of the formats are even proprietary ones used in old game engines.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1279,2021-08-19T14:40:42Z,2021-08-28T18:45:57Z,2021-08-28T18:45:57Z,MERGED,True,5,0,1,https://github.com/lockie,Fix native dialogs addon compatibility with older GTK+ versions,2,[],https://github.com/liballeg/allegro5/pull/1279,https://github.com/lockie,1,https://github.com/liballeg/allegro5/pull/1279,"This is part of the fix for #1276 . Having this commit cherry-picked on top of 5.2.7 branch, I was able to build liballegro_dialog and ex_menu, the latter working as expected.","This is part of the fix for #1276 . Having this commit cherry-picked on top of 5.2.7 branch, I was able to build liballegro_dialog and ex_menu, the latter working as expected.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1279,2021-08-19T14:40:42Z,2021-08-28T18:45:57Z,2021-08-28T18:45:57Z,MERGED,True,5,0,1,https://github.com/lockie,Fix native dialogs addon compatibility with older GTK+ versions,2,[],https://github.com/liballeg/allegro5/pull/1279,https://github.com/lockie,2,https://github.com/liballeg/allegro5/pull/1279#issuecomment-907412182,"This is part of the fix for #1276 . Having this commit cherry-picked on top of 5.2.7 branch, I was able to build liballegro_dialog and ex_menu, the latter working as expected.",Is there anything else I can do to get this merged (and added to ubuntu package patches)?,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1279,2021-08-19T14:40:42Z,2021-08-28T18:45:57Z,2021-08-28T18:45:57Z,MERGED,True,5,0,1,https://github.com/lockie,Fix native dialogs addon compatibility with older GTK+ versions,2,[],https://github.com/liballeg/allegro5/pull/1279,https://github.com/beoran,3,https://github.com/liballeg/allegro5/pull/1279#issuecomment-907488137,"This is part of the fix for #1276 . Having this commit cherry-picked on top of 5.2.7 branch, I was able to build liballegro_dialog and ex_menu, the latter working as expected.","May I ask you to be patient, please, we are severely understaffed. I'm sure SiegeLord will get back at you when he is available.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1279,2021-08-19T14:40:42Z,2021-08-28T18:45:57Z,2021-08-28T18:45:57Z,MERGED,True,5,0,1,https://github.com/lockie,Fix native dialogs addon compatibility with older GTK+ versions,2,[],https://github.com/liballeg/allegro5/pull/1279,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/1279#issuecomment-907504417,"This is part of the fix for #1276 . Having this commit cherry-picked on top of 5.2.7 branch, I was able to build liballegro_dialog and ex_menu, the latter working as expected.","The best thing to do is to do just that, just keep pinging me so I don't forget :). I'll take care of this soon.",True,"{'THUMBS_UP': ['https://github.com/beoran', 'https://github.com/lockie']}"
liballeg/allegro5,https://github.com/liballeg/allegro5,1281,2021-08-22T19:39:15Z,2021-08-28T20:28:03Z,2021-08-28T20:28:09Z,MERGED,True,0,16,1,https://github.com/dos1,timernu: Remove dead QNX code,1,[],https://github.com/liballeg/allegro5/pull/1281,https://github.com/dos1,1,https://github.com/liballeg/allegro5/pull/1281,QNX backend got removed in 2006.,QNX backend got removed in 2006.,True,{'THUMBS_UP': ['https://github.com/beoran']}
liballeg/allegro5,https://github.com/liballeg/allegro5,1281,2021-08-22T19:39:15Z,2021-08-28T20:28:03Z,2021-08-28T20:28:09Z,MERGED,True,0,16,1,https://github.com/dos1,timernu: Remove dead QNX code,1,[],https://github.com/liballeg/allegro5/pull/1281,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1281#issuecomment-907685451,QNX backend got removed in 2006.,Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1286,2021-10-23T05:03:52Z,2022-06-04T08:13:23Z,2022-06-04T08:13:23Z,MERGED,True,196,58,6,https://github.com/SiegeLord,Make al_get/set_window_position work on Retina displays for OSX.,2,[],https://github.com/liballeg/allegro5/pull/1286,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1286,Fixes #923,Fixes #923,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1286,2021-10-23T05:03:52Z,2022-06-04T08:13:23Z,2022-06-04T08:13:23Z,MERGED,True,196,58,6,https://github.com/SiegeLord,Make al_get/set_window_position work on Retina displays for OSX.,2,[],https://github.com/liballeg/allegro5/pull/1286,https://github.com/connorjclark,2,https://github.com/liballeg/allegro5/pull/1286#issuecomment-1081128698,Fixes #923,"I have the new Mac M1 which has a retina display, would it help to have a second pair of eyes test this PR?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1286,2021-10-23T05:03:52Z,2022-06-04T08:13:23Z,2022-06-04T08:13:23Z,MERGED,True,196,58,6,https://github.com/SiegeLord,Make al_get/set_window_position work on Retina displays for OSX.,2,[],https://github.com/liballeg/allegro5/pull/1286,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/1286#issuecomment-1081130507,Fixes #923,"Thanks, but not right now. Maybe when it's closer to being done, right now it's not doing a correct thing, so no point in discovering what's wrong :).",True,{'THUMBS_UP': ['https://github.com/connorjclark']}
liballeg/allegro5,https://github.com/liballeg/allegro5,1286,2021-10-23T05:03:52Z,2022-06-04T08:13:23Z,2022-06-04T08:13:23Z,MERGED,True,196,58,6,https://github.com/SiegeLord,Make al_get/set_window_position work on Retina displays for OSX.,2,[],https://github.com/liballeg/allegro5/pull/1286,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/1286#issuecomment-1141573450,Fixes #923,"@pedro-w I think I got a workable solution to the monitor info/window position issues. Here's the idea:

Find the largest scale factor amongst the connected monitors, use this as a ""global scale factor""
Arrange all the monitors on a single plane, scaling their origins using the global scale factor.
Transform to/from this plane when calling get/set window position.

It looks something like this:

The encoding I choose is very simplistic in that adds dead zones between monitors if there's heterogeneity in scales. In the simple example above, it can be avoided, but for more complex multi-monitor setups I don't think it can be. I prefer the simple route here.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1286,2021-10-23T05:03:52Z,2022-06-04T08:13:23Z,2022-06-04T08:13:23Z,MERGED,True,196,58,6,https://github.com/SiegeLord,Make al_get/set_window_position work on Retina displays for OSX.,2,[],https://github.com/liballeg/allegro5/pull/1286,https://github.com/pedro-w,5,https://github.com/liballeg/allegro5/pull/1286#issuecomment-1143983417,Fixes #923,"So you've got a uniform space on which to position the windows? I like the idea, it is appealingly simple. Unfortunately I still have no hardware to test it myself 😞
What happens if you position a window in the dead zone?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1286,2021-10-23T05:03:52Z,2022-06-04T08:13:23Z,2022-06-04T08:13:23Z,MERGED,True,196,58,6,https://github.com/SiegeLord,Make al_get/set_window_position work on Retina displays for OSX.,2,[],https://github.com/liballeg/allegro5/pull/1286,https://github.com/SiegeLord,6,https://github.com/liballeg/allegro5/pull/1286#issuecomment-1146563392,Fixes #923,"What happens if you position a window in the dead zone?

It silently fails.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1287,2021-10-25T23:51:05Z,2021-10-30T05:26:04Z,2021-10-30T05:26:04Z,MERGED,True,1,1,1,https://github.com/Jaysonjson,Update video.c,1,[],https://github.com/liballeg/allegro5/pull/1287,https://github.com/Jaysonjson,1,https://github.com/liballeg/allegro5/pull/1287,"al_init_video_addon() did not update the bool ""video_inited"", therefore making it always stay on the default given value (false) which gives al_is_video_addon_initialized() a wrong result
Found it when al_init_video_addon gave me a 1 at debuggin and al_is_video_addon_initalized a 0,
Tested on Win11 and Arch Linux (If somehow, for some unknown reason, video_inited changes using magic powder)","al_init_video_addon() did not update the bool ""video_inited"", therefore making it always stay on the default given value (false) which gives al_is_video_addon_initialized() a wrong result
Found it when al_init_video_addon gave me a 1 at debuggin and al_is_video_addon_initalized a 0,
Tested on Win11 and Arch Linux (If somehow, for some unknown reason, video_inited changes using magic powder)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1287,2021-10-25T23:51:05Z,2021-10-30T05:26:04Z,2021-10-30T05:26:04Z,MERGED,True,1,1,1,https://github.com/Jaysonjson,Update video.c,1,[],https://github.com/liballeg/allegro5/pull/1287,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1287#issuecomment-955151392,"al_init_video_addon() did not update the bool ""video_inited"", therefore making it always stay on the default given value (false) which gives al_is_video_addon_initialized() a wrong result
Found it when al_init_video_addon gave me a 1 at debuggin and al_is_video_addon_initalized a 0,
Tested on Win11 and Arch Linux (If somehow, for some unknown reason, video_inited changes using magic powder)",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1289,2021-11-11T17:38:57Z,2022-01-09T23:47:02Z,2022-01-10T20:38:02Z,MERGED,True,15,12,1,https://github.com/check-switch-26,Fix _al_unix_get_time(),1,[],https://github.com/liballeg/allegro5/pull/1289,https://github.com/check-switch-26,1,https://github.com/liballeg/allegro5/pull/1289,"Fix _al_unix_get_time()
Changing the system clock would cause discontinuities in the return value.
Use clock_gettime() with CLOCK_MONOTONIC instead of gettimeofday() to solve the problem.
(Bonus: no longer using gettimeofday(), which has been deprecated)
Tested on Ubuntu 18.04.5 LTS","Fix _al_unix_get_time()
Changing the system clock would cause discontinuities in the return value.
Use clock_gettime() with CLOCK_MONOTONIC instead of gettimeofday() to solve the problem.
(Bonus: no longer using gettimeofday(), which has been deprecated)
Tested on Ubuntu 18.04.5 LTS",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1289,2021-11-11T17:38:57Z,2022-01-09T23:47:02Z,2022-01-10T20:38:02Z,MERGED,True,15,12,1,https://github.com/check-switch-26,Fix _al_unix_get_time(),1,[],https://github.com/liballeg/allegro5/pull/1289,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1289#issuecomment-1008448697,"Fix _al_unix_get_time()
Changing the system clock would cause discontinuities in the return value.
Use clock_gettime() with CLOCK_MONOTONIC instead of gettimeofday() to solve the problem.
(Bonus: no longer using gettimeofday(), which has been deprecated)
Tested on Ubuntu 18.04.5 LTS",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1290,2021-11-11T18:23:17Z,2021-11-12T03:55:44Z,2022-01-10T20:36:22Z,MERGED,True,1,1,1,https://github.com/check-switch-26,Update allegro_font.h,1,[],https://github.com/liballeg/allegro5/pull/1290,https://github.com/check-switch-26,1,https://github.com/liballeg/allegro5/pull/1290,"Fix declaration of al_draw_multiline_textf() as a PRINTFUNC
Tested with gcc 7.5.0","Fix declaration of al_draw_multiline_textf() as a PRINTFUNC
Tested with gcc 7.5.0",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1290,2021-11-11T18:23:17Z,2021-11-12T03:55:44Z,2022-01-10T20:36:22Z,MERGED,True,1,1,1,https://github.com/check-switch-26,Update allegro_font.h,1,[],https://github.com/liballeg/allegro5/pull/1290,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1290#issuecomment-966799924,"Fix declaration of al_draw_multiline_textf() as a PRINTFUNC
Tested with gcc 7.5.0",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1291,2021-11-11T22:02:37Z,2022-01-17T20:47:25Z,2022-01-17T20:47:25Z,MERGED,True,2,2,1,https://github.com/check-switch-26,Fix DDS compressed image loading,1,[],https://github.com/liballeg/allegro5/pull/1291,https://github.com/check-switch-26,1,https://github.com/liballeg/allegro5/pull/1291,"Compressed images with dimensions that are not a multiple of the block size were not loaded correctly.  This is fixed by rounding up the pitch and line count.
Tested on Windows 10 with OpenGL display.","Compressed images with dimensions that are not a multiple of the block size were not loaded correctly.  This is fixed by rounding up the pitch and line count.
Tested on Windows 10 with OpenGL display.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1291,2021-11-11T22:02:37Z,2022-01-17T20:47:25Z,2022-01-17T20:47:25Z,MERGED,True,2,2,1,https://github.com/check-switch-26,Fix DDS compressed image loading,1,[],https://github.com/liballeg/allegro5/pull/1291,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1291#issuecomment-966771094,"Compressed images with dimensions that are not a multiple of the block size were not loaded correctly.  This is fixed by rounding up the pitch and line count.
Tested on Windows 10 with OpenGL display.","Are such bitmaps valid? I was under the impression that DDS bitmaps must have width/height be a multiple of 4. Where did you get such a bitmap?
I'm primarily concerned that Allegro is probably making assumptions about the bitmap size being an exact multiple of block size in many more locations than this.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1291,2021-11-11T22:02:37Z,2022-01-17T20:47:25Z,2022-01-17T20:47:25Z,MERGED,True,2,2,1,https://github.com/check-switch-26,Fix DDS compressed image loading,1,[],https://github.com/liballeg/allegro5/pull/1291,https://github.com/check-switch-26,3,https://github.com/liballeg/allegro5/pull/1291#issuecomment-967331295,"Compressed images with dimensions that are not a multiple of the block size were not loaded correctly.  This is fixed by rounding up the pitch and line count.
Tested on Windows 10 with OpenGL display.","Are such bitmaps valid? I was under the impression that DDS bitmaps must have width/height be a multiple of 4. Where did you get such a bitmap?

I compressed images with Compressonator
I am certain that width/height are not required to be a multiple of 4.  Consider:

""For non-power-of-two images that aren't a multiple of 4 in size, the other colors of the 4x4 block are taken to be black."" (https://www.khronos.org/opengl/wiki/S3_Texture_Compression)
MS DirectXTex code does the same rounding up of block ""blocks wide"" and ""blocks high"" (https://github.com/microsoft/DirectXTex/blob/e9d6e9c79796d5a4f07876359d67ef898bdea203/DDSTextureLoader/DDSTextureLoader9.cpp#L449)
I can open my oddly-sized DDS files in a number of image viewers without problem.


I'm primarily concerned that Allegro is probably making assumptions about the bitmap size being an exact multiple of block size in many more locations than this.

Based on my review of _al_ogl_create_bitmap(), plus my experience with using oddly-sized DDS images with the proposed commit, I'm pretty confident this is all handled correctly for OpenGL.
d3d_create_bitmap() appears to be doing the right thing.  I don't have an environment for building Allegro for D3D support, so I don't have a way to test.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1291,2021-11-11T22:02:37Z,2022-01-17T20:47:25Z,2022-01-17T20:47:25Z,MERGED,True,2,2,1,https://github.com/check-switch-26,Fix DDS compressed image loading,1,[],https://github.com/liballeg/allegro5/pull/1291,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/1291#issuecomment-1014875967,"Compressed images with dimensions that are not a multiple of the block size were not loaded correctly.  This is fixed by rounding up the pitch and line count.
Tested on Windows 10 with OpenGL display.","I tested this a bit, and am convinced that this is correct. Thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1292,2021-11-11T22:11:20Z,2022-01-10T00:10:49Z,2022-01-10T20:36:12Z,MERGED,True,40,10,1,https://github.com/check-switch-26,Improve TT font rendering when using rotation transforms,1,[],https://github.com/liballeg/allegro5/pull/1292,https://github.com/check-switch-26,1,https://github.com/liballeg/allegro5/pull/1292,"TrueType rendering with a rotation transform results in ""jaggies"" on the outside portions of glyphs.
Glyph bitmap rendering now includes the 1-pixel border around the glyph.  Also, border changed to ""transparent white"" for ALLEGRO_NO_PREMULTIPLIED_ALPHA.
See attached files for ""before"" and ""after"" examples using DejaVuSans.ttf and a rotation transform of ALLEGRO_PI / 32.0
Before Fix - no premultiplied alpha

Before Fix - premultiplied alpha

After Fix - no premultiplied alpha

After Fix - premultiplied alpha

Tested on Windows 10 and on Ubuntu 18.04.5 LTS, both using an OpenGL 3.0 display.","TrueType rendering with a rotation transform results in ""jaggies"" on the outside portions of glyphs.
Glyph bitmap rendering now includes the 1-pixel border around the glyph.  Also, border changed to ""transparent white"" for ALLEGRO_NO_PREMULTIPLIED_ALPHA.
See attached files for ""before"" and ""after"" examples using DejaVuSans.ttf and a rotation transform of ALLEGRO_PI / 32.0
Before Fix - no premultiplied alpha

Before Fix - premultiplied alpha

After Fix - no premultiplied alpha

After Fix - premultiplied alpha

Tested on Windows 10 and on Ubuntu 18.04.5 LTS, both using an OpenGL 3.0 display.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1294,2021-11-16T02:10:59Z,2021-12-09T03:21:22Z,2021-12-09T03:21:30Z,MERGED,True,470,0,5,https://github.com/allefant,add linear and oklab color spaces to the color addon,4,[],https://github.com/liballeg/allegro5/pull/1294,https://github.com/allefant,1,https://github.com/liballeg/allegro5/pull/1294,"This addresses issues #1211 and #1212.
I'm also working on an ex_color3 example which will use the new functions, but that will be a separate PR.","This addresses issues #1211 and #1212.
I'm also working on an ex_color3 example which will use the new functions, but that will be a separate PR.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1294,2021-11-16T02:10:59Z,2021-12-09T03:21:22Z,2021-12-09T03:21:30Z,MERGED,True,470,0,5,https://github.com/allefant,add linear and oklab color spaces to the color addon,4,[],https://github.com/liballeg/allegro5/pull/1294,https://github.com/allefant,2,https://github.com/liballeg/allegro5/pull/1294#issuecomment-972274369,"This addresses issues #1211 and #1212.
I'm also working on an ex_color3 example which will use the new functions, but that will be a separate PR.","Actually might as well have it in the same PR!
It's quite interesting, the blue->white gradient from the original description of course looks best with Oklab. As does the blue->yellow one. The red->green is identical to CIE Lab. But then for the black->pink Oklab completely fails and the left half is just black, with both plain RGB and CIE Lab looking better. Guess we have to wait for Oklab2 to really create a uniform color space, heh :)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1294,2021-11-16T02:10:59Z,2021-12-09T03:21:22Z,2021-12-09T03:21:30Z,MERGED,True,470,0,5,https://github.com/allefant,add linear and oklab color spaces to the color addon,4,[],https://github.com/liballeg/allegro5/pull/1294,https://github.com/allefant,3,https://github.com/liballeg/allegro5/pull/1294#issuecomment-981100978,"This addresses issues #1211 and #1212.
I'm also working on an ex_color3 example which will use the new functions, but that will be a separate PR.",Found a nice review of oklab and it may explain the darkness in ex_gradient: https://raphlinus.github.io/color/2021/01/18/oklab-critique.html,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1294,2021-11-16T02:10:59Z,2021-12-09T03:21:22Z,2021-12-09T03:21:30Z,MERGED,True,470,0,5,https://github.com/allefant,add linear and oklab color spaces to the color addon,4,[],https://github.com/liballeg/allegro5/pull/1294,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/1294#issuecomment-989472433,"This addresses issues #1211 and #1212.
I'm also working on an ex_color3 example which will use the new functions, but that will be a separate PR.",Nice!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1296,2021-11-30T21:11:04Z,2022-01-17T22:22:51Z,2022-01-17T22:22:52Z,CLOSED,False,36,33,1,https://github.com/HerrNamenlos123,Bug in Windows OpenGL display creation,3,[],https://github.com/liballeg/allegro5/pull/1296,https://github.com/HerrNamenlos123,1,https://github.com/liballeg/allegro5/pull/1296,"There's an infinite loop which ensures to focus the window when being created, which is apparently only strictly needed in fullscreen mode.
Sometimes the window simply cannot be focused, in which case the window creation fails after 10 seconds. This happens sporadically and is not reproducable, but for me it happens every time when launching the executable with a WiX installer after installation has finished. (Seems to lock the foreground?)
The interval of failure also seems to be dependent on the speed of the computer. It fails more often in the virtual machine which is very slow, but it has also failed on my main dev pc at some point. By starting an allegro application at the same time from 150 threads i was able to reproduce it sometimes.
Since focusing isn't strictly necessary when not in fullscreen mode, this simple fix makes it work for me, no more crashes (window is still being focused tho).","There's an infinite loop which ensures to focus the window when being created, which is apparently only strictly needed in fullscreen mode.
Sometimes the window simply cannot be focused, in which case the window creation fails after 10 seconds. This happens sporadically and is not reproducable, but for me it happens every time when launching the executable with a WiX installer after installation has finished. (Seems to lock the foreground?)
The interval of failure also seems to be dependent on the speed of the computer. It fails more often in the virtual machine which is very slow, but it has also failed on my main dev pc at some point. By starting an allegro application at the same time from 150 threads i was able to reproduce it sometimes.
Since focusing isn't strictly necessary when not in fullscreen mode, this simple fix makes it work for me, no more crashes (window is still being focused tho).",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1296,2021-11-30T21:11:04Z,2022-01-17T22:22:51Z,2022-01-17T22:22:52Z,CLOSED,False,36,33,1,https://github.com/HerrNamenlos123,Bug in Windows OpenGL display creation,3,[],https://github.com/liballeg/allegro5/pull/1296,https://github.com/pedro-w,2,https://github.com/liballeg/allegro5/pull/1296#issuecomment-983436617,"There's an infinite loop which ensures to focus the window when being created, which is apparently only strictly needed in fullscreen mode.
Sometimes the window simply cannot be focused, in which case the window creation fails after 10 seconds. This happens sporadically and is not reproducable, but for me it happens every time when launching the executable with a WiX installer after installation has finished. (Seems to lock the foreground?)
The interval of failure also seems to be dependent on the speed of the computer. It fails more often in the virtual machine which is very slow, but it has also failed on my main dev pc at some point. By starting an allegro application at the same time from 150 threads i was able to reproduce it sometimes.
Since focusing isn't strictly necessary when not in fullscreen mode, this simple fix makes it work for me, no more crashes (window is still being focused tho).","I was surprised to see how complicated 'setting the foreground window' is on Windows!  A lot of the complication seems to come from Windows trying to prevent the annoyance of apps jumping to the front while the user is working on another window. What you've done looks good, since it's only really necessary to avoid the unresponsive fullscreen situation.
However, I wonder if it would be better to re-arrange the surrounding code to split it into two clear blocks for fullscreen and windowed; at the moment it checks 3 separate times for window status in that section.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1296,2021-11-30T21:11:04Z,2022-01-17T22:22:51Z,2022-01-17T22:22:52Z,CLOSED,False,36,33,1,https://github.com/HerrNamenlos123,Bug in Windows OpenGL display creation,3,[],https://github.com/liballeg/allegro5/pull/1296,https://github.com/HerrNamenlos123,3,https://github.com/liballeg/allegro5/pull/1296#issuecomment-1000197286,"There's an infinite loop which ensures to focus the window when being created, which is apparently only strictly needed in fullscreen mode.
Sometimes the window simply cannot be focused, in which case the window creation fails after 10 seconds. This happens sporadically and is not reproducable, but for me it happens every time when launching the executable with a WiX installer after installation has finished. (Seems to lock the foreground?)
The interval of failure also seems to be dependent on the speed of the computer. It fails more often in the virtual machine which is very slow, but it has also failed on my main dev pc at some point. By starting an allegro application at the same time from 150 threads i was able to reproduce it sometimes.
Since focusing isn't strictly necessary when not in fullscreen mode, this simple fix makes it work for me, no more crashes (window is still being focused tho).","I have cleaned up the conditions in the function now, i have not tested it extensively, but it seems to work.
I am testing it with non-fullscreen windows and everything works, someone should still test it with fullscreen windows.
I don't have any project for fullscreen at the time.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1296,2021-11-30T21:11:04Z,2022-01-17T22:22:51Z,2022-01-17T22:22:52Z,CLOSED,False,36,33,1,https://github.com/HerrNamenlos123,Bug in Windows OpenGL display creation,3,[],https://github.com/liballeg/allegro5/pull/1296,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/1296#issuecomment-1014924228,"There's an infinite loop which ensures to focus the window when being created, which is apparently only strictly needed in fullscreen mode.
Sometimes the window simply cannot be focused, in which case the window creation fails after 10 seconds. This happens sporadically and is not reproducable, but for me it happens every time when launching the executable with a WiX installer after installation has finished. (Seems to lock the foreground?)
The interval of failure also seems to be dependent on the speed of the computer. It fails more often in the virtual machine which is very slow, but it has also failed on my main dev pc at some point. By starting an allegro application at the same time from 150 threads i was able to reproduce it sometimes.
Since focusing isn't strictly necessary when not in fullscreen mode, this simple fix makes it work for me, no more crashes (window is still being focused tho).","Thanks! There are actually two different fullscreen modes, one is the ""fullscreen window"", commonly known as ""borderless window"" these days, and true fullscreen. This patch broke the borderless variant, but the fix was simple. Otherwise, it seems to work fine.
I merged this as 2a8b456.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1298,2021-12-13T18:59:02Z,2022-01-09T23:47:54Z,2022-01-10T20:36:19Z,MERGED,True,2,3,1,https://github.com/check-switch-26,al_draw_textf() optimization - avoid unnecessary cstr/ustr conversions,1,[],https://github.com/liballeg/allegro5/pull/1298,https://github.com/check-switch-26,1,https://github.com/liballeg/allegro5/pull/1298,"Original code: al_draw_textf()

create ustr
convert ustr to cstr
al_draw_text()

convert cstr to ustr
al_draw_ustr()



Modified: al_draw_textf()

create ustr
al_draw_ustr()

al_draw_justified_textf() is modified similarly.
Tested on Windows 10 and Linux.","Original code: al_draw_textf()

create ustr
convert ustr to cstr
al_draw_text()

convert cstr to ustr
al_draw_ustr()



Modified: al_draw_textf()

create ustr
al_draw_ustr()

al_draw_justified_textf() is modified similarly.
Tested on Windows 10 and Linux.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1298,2021-12-13T18:59:02Z,2022-01-09T23:47:54Z,2022-01-10T20:36:19Z,MERGED,True,2,3,1,https://github.com/check-switch-26,al_draw_textf() optimization - avoid unnecessary cstr/ustr conversions,1,[],https://github.com/liballeg/allegro5/pull/1298,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1298#issuecomment-1008448808,"Original code: al_draw_textf()

create ustr
convert ustr to cstr
al_draw_text()

convert cstr to ustr
al_draw_ustr()



Modified: al_draw_textf()

create ustr
al_draw_ustr()

al_draw_justified_textf() is modified similarly.
Tested on Windows 10 and Linux.",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1307,2022-02-20T15:22:48Z,2022-02-20T17:29:30Z,2022-02-20T17:29:40Z,CLOSED,False,4,4,1,https://github.com/HerrNamenlos123,Fixed addons cmake to not overwrite dependencies,1,[],https://github.com/liballeg/allegro5/pull/1307,https://github.com/HerrNamenlos123,1,https://github.com/liballeg/allegro5/pull/1307,"There was an issue when loading external dependencies. find_package(PKG) is used, it tries to find the library and then sets PKG_FOUND to TRUE.
I called cmake manually and set all dependencies, for example -DFREETYPE_INCLUDE_DIRS=... -DZLIB_LIBRARIES=....
In the addons/CMakeLists however, find_package(ZLIB) was called no matter what, which for whatever reason found a .dll in the VMware Workstation directory and overwrote my correct ZLIB_LIBRARIES=.../zlib.lib with some weird ZLIB_LIBRARIES=.../VMware/Workstation/zlib1.dll.lib, which caused freetype compilation to fail.
With this small fix find_package() is not called if PKG_FOUND is already set to true. Now you can add -DZLIB_FOUND=true to the command line if the library is specified manually.
Please review and merge this at the next opportunity, thanks in advance!","There was an issue when loading external dependencies. find_package(PKG) is used, it tries to find the library and then sets PKG_FOUND to TRUE.
I called cmake manually and set all dependencies, for example -DFREETYPE_INCLUDE_DIRS=... -DZLIB_LIBRARIES=....
In the addons/CMakeLists however, find_package(ZLIB) was called no matter what, which for whatever reason found a .dll in the VMware Workstation directory and overwrote my correct ZLIB_LIBRARIES=.../zlib.lib with some weird ZLIB_LIBRARIES=.../VMware/Workstation/zlib1.dll.lib, which caused freetype compilation to fail.
With this small fix find_package() is not called if PKG_FOUND is already set to true. Now you can add -DZLIB_FOUND=true to the command line if the library is specified manually.
Please review and merge this at the next opportunity, thanks in advance!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1308,2022-02-23T14:19:19Z,2022-02-23T17:24:50Z,2022-02-23T17:24:50Z,MERGED,True,1,1,1,https://github.com/j-w-c-b,Incorrect error handling in PHYSFS_close,1,[],https://github.com/liballeg/allegro5/pull/1308,https://github.com/j-w-c-b,1,https://github.com/liballeg/allegro5/pull/1308,"Per https://www.icculus.org/physfs/docs/html/physfs_8h.html#a6822f8ff10073e855a1c3a6485b882f2 the return value from PHYSFS_close() is nonzero on success, zero on error","Per https://www.icculus.org/physfs/docs/html/physfs_8h.html#a6822f8ff10073e855a1c3a6485b882f2 the return value from PHYSFS_close() is nonzero on success, zero on error",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1308,2022-02-23T14:19:19Z,2022-02-23T17:24:50Z,2022-02-23T17:24:50Z,MERGED,True,1,1,1,https://github.com/j-w-c-b,Incorrect error handling in PHYSFS_close,1,[],https://github.com/liballeg/allegro5/pull/1308,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1308#issuecomment-1049020369,"Per https://www.icculus.org/physfs/docs/html/physfs_8h.html#a6822f8ff10073e855a1c3a6485b882f2 the return value from PHYSFS_close() is nonzero on success, zero on error","Wow, that's unfortunate! This isn't the only one too, the PHYSFS_flush and PHYSFS_seek appear to be broken too.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1308,2022-02-23T14:19:19Z,2022-02-23T17:24:50Z,2022-02-23T17:24:50Z,MERGED,True,1,1,1,https://github.com/j-w-c-b,Incorrect error handling in PHYSFS_close,1,[],https://github.com/liballeg/allegro5/pull/1308,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/1308#issuecomment-1049022919,"Per https://www.icculus.org/physfs/docs/html/physfs_8h.html#a6822f8ff10073e855a1c3a6485b882f2 the return value from PHYSFS_close() is nonzero on success, zero on error","Actually, nevermind... those are fine. Thanks for the change!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1311,2022-02-25T02:20:04Z,2022-02-26T22:56:24Z,2022-02-26T22:56:29Z,MERGED,True,26,13,1,https://github.com/WickedSmoke,file_slice.c: Add al_fopen_slice() mode to prevent seek on close.,1,[],https://github.com/liballeg/allegro5/pull/1311,https://github.com/WickedSmoke,1,https://github.com/liballeg/allegro5/pull/1311,"This implements issue  #1283
Add 'n' (No seek) mode and 's' (Seek on close).
Ideally, only 's' should exist to enable the extra action, but for
compatibility with the Allegro 5.2 behavior the 'n' mode is needed to
disable it.

Removed used of strstr() to optimize handling of mode string.","This implements issue  #1283
Add 'n' (No seek) mode and 's' (Seek on close).
Ideally, only 's' should exist to enable the extra action, but for
compatibility with the Allegro 5.2 behavior the 'n' mode is needed to
disable it.

Removed used of strstr() to optimize handling of mode string.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1311,2022-02-25T02:20:04Z,2022-02-26T22:56:24Z,2022-02-26T22:56:29Z,MERGED,True,26,13,1,https://github.com/WickedSmoke,file_slice.c: Add al_fopen_slice() mode to prevent seek on close.,1,[],https://github.com/liballeg/allegro5/pull/1311,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1311#issuecomment-1052747719,"This implements issue  #1283
Add 'n' (No seek) mode and 's' (Seek on close).
Ideally, only 's' should exist to enable the extra action, but for
compatibility with the Allegro 5.2 behavior the 'n' mode is needed to
disable it.

Removed used of strstr() to optimize handling of mode string.",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1313,2022-03-05T04:11:50Z,2022-03-06T23:59:56Z,2022-03-06T23:59:56Z,MERGED,True,3539,318,28,https://github.com/SiegeLord,Allow configuring bitmap wrapping.,1,[],https://github.com/liballeg/allegro5/pull/1313,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1313,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1313,2022-03-05T04:11:50Z,2022-03-06T23:59:56Z,2022-03-06T23:59:56Z,MERGED,True,3539,318,28,https://github.com/SiegeLord,Allow configuring bitmap wrapping.,1,[],https://github.com/liballeg/allegro5/pull/1313,https://github.com/beoran,2,https://github.com/liballeg/allegro5/pull/1313#issuecomment-1059704091,,Let me take a look...,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1313,2022-03-05T04:11:50Z,2022-03-06T23:59:56Z,2022-03-06T23:59:56Z,MERGED,True,3539,318,28,https://github.com/SiegeLord,Allow configuring bitmap wrapping.,1,[],https://github.com/liballeg/allegro5/pull/1313,https://github.com/beoran,3,https://github.com/liballeg/allegro5/pull/1313#issuecomment-1060061190,,Lgtm!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1313,2022-03-05T04:11:50Z,2022-03-06T23:59:56Z,2022-03-06T23:59:56Z,MERGED,True,3539,318,28,https://github.com/SiegeLord,Allow configuring bitmap wrapping.,1,[],https://github.com/liballeg/allegro5/pull/1313,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/1313#issuecomment-1060068622,,Thanks for looking this over.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1314,2022-03-06T06:26:34Z,2022-03-08T03:27:08Z,2022-03-08T04:10:44Z,MERGED,True,27,36,1,https://github.com/connorjclark,Improve emscripten instructions for building demos,2,[],https://github.com/liballeg/allegro5/pull/1314,https://github.com/connorjclark,1,https://github.com/liballeg/allegro5/pull/1314,"Formatted command to be copy/paste-friendly
Turns out you don't need to set all those flags for the ports emscripten manages. However, SDL2_INCLUDE_DIR was necessary
added note about $EM_CACHE (I just setup emsdk and this variable was never set for me...)
added command for copying the data folder used by demos","Formatted command to be copy/paste-friendly
Turns out you don't need to set all those flags for the ports emscripten manages. However, SDL2_INCLUDE_DIR was necessary
added note about $EM_CACHE (I just setup emsdk and this variable was never set for me...)
added command for copying the data folder used by demos",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1314,2022-03-06T06:26:34Z,2022-03-08T03:27:08Z,2022-03-08T04:10:44Z,MERGED,True,27,36,1,https://github.com/connorjclark,Improve emscripten instructions for building demos,2,[],https://github.com/liballeg/allegro5/pull/1314,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1314#issuecomment-1060055643,"Formatted command to be copy/paste-friendly
Turns out you don't need to set all those flags for the ports emscripten manages. However, SDL2_INCLUDE_DIR was necessary
added note about $EM_CACHE (I just setup emsdk and this variable was never set for me...)
added command for copying the data folder used by demos","I tried your version, but it wouldn't find png and other dependencies without those extra flags. My SDK version is 2.0.14, FWIW.
It's weird that we need to copy the bitmap data manually, it should be enough to do make copy_example_data ex_draw_bitmap, but it looks like there's a dependency missing in CMake to make sure that happens automatically/it's correctly synced.
Overall, though, this looks great, thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1314,2022-03-06T06:26:34Z,2022-03-08T03:27:08Z,2022-03-08T04:10:44Z,MERGED,True,27,36,1,https://github.com/connorjclark,Improve emscripten instructions for building demos,2,[],https://github.com/liballeg/allegro5/pull/1314,https://github.com/connorjclark,3,https://github.com/liballeg/allegro5/pull/1314#issuecomment-1060063867,"Formatted command to be copy/paste-friendly
Turns out you don't need to set all those flags for the ports emscripten manages. However, SDL2_INCLUDE_DIR was necessary
added note about $EM_CACHE (I just setup emsdk and this variable was never set for me...)
added command for copying the data folder used by demos","I also got an error about no libpng being found (with the original command and the one in the PR). It went away once I did this (in the emsdk folder):
python3 upstream/emscripten/embuilder.py build sdl2_image_png

I left it out of the PR because I cleared the emsdk cache folder and tried everything again from zero, and that time it just worked 🤷 If this command fixes it for you I'll add to the PR.

My SDK version is 2.0.14, FWIW.

I just downloaded the SDK so I have the newest, 3.1.6.

It's weird that we need to copy the bitmap data manually, it should be enough to do make copy_example_data ex_draw_bitmap, but it looks like there's a dependency missing in CMake to make sure that happens automatically/it's correctly synced.

https://github.com/connorjclark/allegro5/blob/f41f49d65c89fdb214b4dd49172b5adfbf16c4ec/examples/CMakeLists.txt#L271-L271
I see that some targets specify copy_example_data as a dependency (the demos), but for the examples there is just this function call. I don't know CMAKE that well but I assume that the examples build targets need to specify this dependency explicitly?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1314,2022-03-06T06:26:34Z,2022-03-08T03:27:08Z,2022-03-08T04:10:44Z,MERGED,True,27,36,1,https://github.com/connorjclark,Improve emscripten instructions for building demos,2,[],https://github.com/liballeg/allegro5/pull/1314,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/1314#issuecomment-1060078615,"Formatted command to be copy/paste-friendly
Turns out you don't need to set all those flags for the ports emscripten manages. However, SDL2_INCLUDE_DIR was necessary
added note about $EM_CACHE (I just setup emsdk and this variable was never set for me...)
added command for copying the data folder used by demos","Ok, I re-downloaded my SDK, and your instructions appeared to work fine. I didn't need to set EM_CACHE, but probably doesn't hurt to leave that in. Let me suggest two changes and then this is good to go.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1314,2022-03-06T06:26:34Z,2022-03-08T03:27:08Z,2022-03-08T04:10:44Z,MERGED,True,27,36,1,https://github.com/connorjclark,Improve emscripten instructions for building demos,2,[],https://github.com/liballeg/allegro5/pull/1314,https://github.com/SiegeLord,5,https://github.com/liballeg/allegro5/pull/1314#issuecomment-1060083357,"Formatted command to be copy/paste-friendly
Turns out you don't need to set all those flags for the ports emscripten manages. However, SDL2_INCLUDE_DIR was necessary
added note about $EM_CACHE (I just setup emsdk and this variable was never set for me...)
added command for copying the data folder used by demos",Maybe with #1317 we won't need to explicit make copy_example_data.,True,{'HOORAY': ['https://github.com/connorjclark']}
liballeg/allegro5,https://github.com/liballeg/allegro5,1314,2022-03-06T06:26:34Z,2022-03-08T03:27:08Z,2022-03-08T04:10:44Z,MERGED,True,27,36,1,https://github.com/connorjclark,Improve emscripten instructions for building demos,2,[],https://github.com/liballeg/allegro5/pull/1314,https://github.com/connorjclark,6,https://github.com/liballeg/allegro5/pull/1314#issuecomment-1061346533,"Formatted command to be copy/paste-friendly
Turns out you don't need to set all those flags for the ports emscripten manages. However, SDL2_INCLUDE_DIR was necessary
added note about $EM_CACHE (I just setup emsdk and this variable was never set for me...)
added command for copying the data folder used by demos","Maybe with #1317 we won't need to explicit make copy_example_data.

Yup, this works!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1314,2022-03-06T06:26:34Z,2022-03-08T03:27:08Z,2022-03-08T04:10:44Z,MERGED,True,27,36,1,https://github.com/connorjclark,Improve emscripten instructions for building demos,2,[],https://github.com/liballeg/allegro5/pull/1314,https://github.com/connorjclark,7,https://github.com/liballeg/allegro5/pull/1314#issuecomment-1061376054,"Formatted command to be copy/paste-friendly
Turns out you don't need to set all those flags for the ports emscripten manages. However, SDL2_INCLUDE_DIR was necessary
added note about $EM_CACHE (I just setup emsdk and this variable was never set for me...)
added command for copying the data folder used by demos","FYI for future reference, in the GH UI the merge button has an option to ""squash"" all the commits and just take the PR title as the commit message. There should be an option in the repo settings to make this the default behavior. I think this is a pretty useful setting (no idea why it isn't made the default...) as it separates the developing commit history of a PR from the main branch.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1317,2022-03-07T00:50:04Z,2022-03-07T01:50:27Z,2022-03-07T01:50:27Z,MERGED,True,2,1,2,https://github.com/SiegeLord,Make the example targets depend on the data copying target.,1,[],https://github.com/liballeg/allegro5/pull/1317,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1317,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1318,2022-03-07T06:55:37Z,2022-03-15T04:29:19Z,2022-03-15T04:29:19Z,MERGED,True,80,75,3,https://github.com/connorjclark,Update ex_palette to build with emscripten,5,[],https://github.com/liballeg/allegro5/pull/1318,https://github.com/connorjclark,1,https://github.com/liballeg/allegro5/pull/1318,"Fixes #1315
Demo: https://tedious-porter.surge.sh/ex_palette.html

WebGL only supports non-const array index access in shaders, which makes the approach to palette swapping done by ex_palette not portable via emscripten. Instead of using a uniform to store the palette, and updating/interpolating it on the CPU every cycle, I changed the program to instead pre-generate a texture with all the colors and added uniforms to do the interpolation on the GPU.
A (smaller) necessary change was to specify the precision for the fragment shader–webgl requires this
Added a neat feature–press P and the palette texture will be rendered (scaled up)
Extracted the fragment shader source to a data file, and replaced the vertex shader with the provided allegro default

Please note I cannot build natively on my Mac (Unrelated to these changes, I can't get the build to work, first error being: error: use of undeclared identifier 'ALLEGRO_TIMEOUT_SDL'). I can attempt to build it on my Windows machine tomorrow (unless a reviewer shares that it worked for them).","Fixes #1315
Demo: https://tedious-porter.surge.sh/ex_palette.html

WebGL only supports non-const array index access in shaders, which makes the approach to palette swapping done by ex_palette not portable via emscripten. Instead of using a uniform to store the palette, and updating/interpolating it on the CPU every cycle, I changed the program to instead pre-generate a texture with all the colors and added uniforms to do the interpolation on the GPU.
A (smaller) necessary change was to specify the precision for the fragment shader–webgl requires this
Added a neat feature–press P and the palette texture will be rendered (scaled up)
Extracted the fragment shader source to a data file, and replaced the vertex shader with the provided allegro default

Please note I cannot build natively on my Mac (Unrelated to these changes, I can't get the build to work, first error being: error: use of undeclared identifier 'ALLEGRO_TIMEOUT_SDL'). I can attempt to build it on my Windows machine tomorrow (unless a reviewer shares that it worked for them).",True,"{'THUMBS_UP': ['https://github.com/beoran', 'https://github.com/zmughal']}"
liballeg/allegro5,https://github.com/liballeg/allegro5,1318,2022-03-07T06:55:37Z,2022-03-15T04:29:19Z,2022-03-15T04:29:19Z,MERGED,True,80,75,3,https://github.com/connorjclark,Update ex_palette to build with emscripten,5,[],https://github.com/liballeg/allegro5/pull/1318,https://github.com/connorjclark,2,https://github.com/liballeg/allegro5/pull/1318#issuecomment-1061449154,"Fixes #1315
Demo: https://tedious-porter.surge.sh/ex_palette.html

WebGL only supports non-const array index access in shaders, which makes the approach to palette swapping done by ex_palette not portable via emscripten. Instead of using a uniform to store the palette, and updating/interpolating it on the CPU every cycle, I changed the program to instead pre-generate a texture with all the colors and added uniforms to do the interpolation on the GPU.
A (smaller) necessary change was to specify the precision for the fragment shader–webgl requires this
Added a neat feature–press P and the palette texture will be rendered (scaled up)
Extracted the fragment shader source to a data file, and replaced the vertex shader with the provided allegro default

Please note I cannot build natively on my Mac (Unrelated to these changes, I can't get the build to work, first error being: error: use of undeclared identifier 'ALLEGRO_TIMEOUT_SDL'). I can attempt to build it on my Windows machine tomorrow (unless a reviewer shares that it worked for them).","I was able compile allegro on my mac, and verified this works on OSX too.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1318,2022-03-07T06:55:37Z,2022-03-15T04:29:19Z,2022-03-15T04:29:19Z,MERGED,True,80,75,3,https://github.com/connorjclark,Update ex_palette to build with emscripten,5,[],https://github.com/liballeg/allegro5/pull/1318,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/1318#issuecomment-1067552114,"Fixes #1315
Demo: https://tedious-porter.surge.sh/ex_palette.html

WebGL only supports non-const array index access in shaders, which makes the approach to palette swapping done by ex_palette not portable via emscripten. Instead of using a uniform to store the palette, and updating/interpolating it on the CPU every cycle, I changed the program to instead pre-generate a texture with all the colors and added uniforms to do the interpolation on the GPU.
A (smaller) necessary change was to specify the precision for the fragment shader–webgl requires this
Added a neat feature–press P and the palette texture will be rendered (scaled up)
Extracted the fragment shader source to a data file, and replaced the vertex shader with the provided allegro default

Please note I cannot build natively on my Mac (Unrelated to these changes, I can't get the build to work, first error being: error: use of undeclared identifier 'ALLEGRO_TIMEOUT_SDL'). I can attempt to build it on my Windows machine tomorrow (unless a reviewer shares that it worked for them).","This is great, thanks!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1319,2022-03-10T02:54:28Z,2022-03-10T03:46:53Z,2022-03-10T03:46:53Z,MERGED,True,3,3,1,https://github.com/connorjclark,Fix emscripten build example for bash,1,[],https://github.com/liballeg/allegro5/pull/1319,https://github.com/connorjclark,1,https://github.com/liballeg/allegro5/pull/1319,"expanding an array in zsh (echo ""${USE_FLAGS}"" ) is different than in bash. zsh will expand the values as you expect, bash only the first item.
When I verified this command initially I was in my zsh terminal, and only later when trying to write a bash script using the same commands did I realize (but it took a long time) the commands weren't portable.
luckily both zsh and bash do the same sensible thing for ""${USE_FLAGS[*]}""","expanding an array in zsh (echo ""${USE_FLAGS}"" ) is different than in bash. zsh will expand the values as you expect, bash only the first item.
When I verified this command initially I was in my zsh terminal, and only later when trying to write a bash script using the same commands did I realize (but it took a long time) the commands weren't portable.
luckily both zsh and bash do the same sensible thing for ""${USE_FLAGS[*]}""",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1319,2022-03-10T02:54:28Z,2022-03-10T03:46:53Z,2022-03-10T03:46:53Z,MERGED,True,3,3,1,https://github.com/connorjclark,Fix emscripten build example for bash,1,[],https://github.com/liballeg/allegro5/pull/1319,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1319#issuecomment-1063630606,"expanding an array in zsh (echo ""${USE_FLAGS}"" ) is different than in bash. zsh will expand the values as you expect, bash only the first item.
When I verified this command initially I was in my zsh terminal, and only later when trying to write a bash script using the same commands did I realize (but it took a long time) the commands weren't portable.
luckily both zsh and bash do the same sensible thing for ""${USE_FLAGS[*]}""",Thanks!,True,{'THUMBS_UP': ['https://github.com/connorjclark']}
liballeg/allegro5,https://github.com/liballeg/allegro5,1322,2022-03-26T22:21:37Z,2022-03-30T02:18:18Z,2022-03-30T02:18:18Z,MERGED,True,10,1,1,https://github.com/connorjclark,Fix usage of SDL_Init for emscripten,2,[],https://github.com/liballeg/allegro5/pull/1322,https://github.com/connorjclark,1,https://github.com/liballeg/allegro5/pull/1322,"This patch fixes audio for emscripten.
I printed errors as SDL_GetError was called, and saw this:

Debugging told me the audio system was being initialized, but then shut down. Turns out that if any subsytem requested by SDL_Init cannot start, SDL will shutdown everything. So the haptic subsystem failing was problematic.
It fails because SDL configured the haptic subsytem to not build for emscripten (guess it's not supported).
This behavior in SDL_Init is a recent change. About 6 months ago SDL changed the init function to shutdown things when any requested subsystem failed to start: libsdl-org/SDL@0e294e9 . Previously, it would just return -1, but allegro ignores the return code, so it didn't matter (not fully understanding why everything still worked even though every subsystem after the haptic would have not been initialized...shrug)
I confirmed that the audio demos now play sound in the browser when built locally, using the instructions found in the SDL readme.
Fixes #1321","This patch fixes audio for emscripten.
I printed errors as SDL_GetError was called, and saw this:

Debugging told me the audio system was being initialized, but then shut down. Turns out that if any subsytem requested by SDL_Init cannot start, SDL will shutdown everything. So the haptic subsystem failing was problematic.
It fails because SDL configured the haptic subsytem to not build for emscripten (guess it's not supported).
This behavior in SDL_Init is a recent change. About 6 months ago SDL changed the init function to shutdown things when any requested subsystem failed to start: libsdl-org/SDL@0e294e9 . Previously, it would just return -1, but allegro ignores the return code, so it didn't matter (not fully understanding why everything still worked even though every subsystem after the haptic would have not been initialized...shrug)
I confirmed that the audio demos now play sound in the browser when built locally, using the instructions found in the SDL readme.
Fixes #1321",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1322,2022-03-26T22:21:37Z,2022-03-30T02:18:18Z,2022-03-30T02:18:18Z,MERGED,True,10,1,1,https://github.com/connorjclark,Fix usage of SDL_Init for emscripten,2,[],https://github.com/liballeg/allegro5/pull/1322,https://github.com/connorjclark,2,https://github.com/liballeg/allegro5/pull/1322#issuecomment-1079786083,"This patch fixes audio for emscripten.
I printed errors as SDL_GetError was called, and saw this:

Debugging told me the audio system was being initialized, but then shut down. Turns out that if any subsytem requested by SDL_Init cannot start, SDL will shutdown everything. So the haptic subsystem failing was problematic.
It fails because SDL configured the haptic subsytem to not build for emscripten (guess it's not supported).
This behavior in SDL_Init is a recent change. About 6 months ago SDL changed the init function to shutdown things when any requested subsystem failed to start: libsdl-org/SDL@0e294e9 . Previously, it would just return -1, but allegro ignores the return code, so it didn't matter (not fully understanding why everything still worked even though every subsystem after the haptic would have not been initialized...shrug)
I confirmed that the audio demos now play sound in the browser when built locally, using the instructions found in the SDL readme.
Fixes #1321","Aside: I was only able to start debugging when I added logging to SDL_SetError in my local emscripten ports build cache. I noticed that allegro doesn't provide a logging interface in its System driver, and only in one place does it ever call SDL_GetError (when making a window). Would it make sense to extend the system driver interface to include logging, and somehow wire SDL's logging infrastructure into allegro? Or is there already a way to get SDL logging from allegro that I'm overlooking?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1322,2022-03-26T22:21:37Z,2022-03-30T02:18:18Z,2022-03-30T02:18:18Z,MERGED,True,10,1,1,https://github.com/connorjclark,Fix usage of SDL_Init for emscripten,2,[],https://github.com/liballeg/allegro5/pull/1322,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/1322#issuecomment-1080293601,"This patch fixes audio for emscripten.
I printed errors as SDL_GetError was called, and saw this:

Debugging told me the audio system was being initialized, but then shut down. Turns out that if any subsytem requested by SDL_Init cannot start, SDL will shutdown everything. So the haptic subsystem failing was problematic.
It fails because SDL configured the haptic subsytem to not build for emscripten (guess it's not supported).
This behavior in SDL_Init is a recent change. About 6 months ago SDL changed the init function to shutdown things when any requested subsystem failed to start: libsdl-org/SDL@0e294e9 . Previously, it would just return -1, but allegro ignores the return code, so it didn't matter (not fully understanding why everything still worked even though every subsystem after the haptic would have not been initialized...shrug)
I confirmed that the audio demos now play sound in the browser when built locally, using the instructions found in the SDL readme.
Fixes #1321","Thanks for investigating this.
What do you mean by a logging interface? You want an Allegro function that one can call to add to a log? If SDL has something like https://liballeg.org/a5docs/trunk/system.html#al_register_trace_handler, then we could pass it a function that appends to logs (via ALLEGRO_INFO etc macros).",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1322,2022-03-26T22:21:37Z,2022-03-30T02:18:18Z,2022-03-30T02:18:18Z,MERGED,True,10,1,1,https://github.com/connorjclark,Fix usage of SDL_Init for emscripten,2,[],https://github.com/liballeg/allegro5/pull/1322,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/1322#issuecomment-1080302072,"This patch fixes audio for emscripten.
I printed errors as SDL_GetError was called, and saw this:

Debugging told me the audio system was being initialized, but then shut down. Turns out that if any subsytem requested by SDL_Init cannot start, SDL will shutdown everything. So the haptic subsystem failing was problematic.
It fails because SDL configured the haptic subsytem to not build for emscripten (guess it's not supported).
This behavior in SDL_Init is a recent change. About 6 months ago SDL changed the init function to shutdown things when any requested subsystem failed to start: libsdl-org/SDL@0e294e9 . Previously, it would just return -1, but allegro ignores the return code, so it didn't matter (not fully understanding why everything still worked even though every subsystem after the haptic would have not been initialized...shrug)
I confirmed that the audio demos now play sound in the browser when built locally, using the instructions found in the SDL readme.
Fixes #1321","Something like:
void log_to_allegro(void *userdata, int category, SDL_LogPriority priority, const char *message) {
  (void)userdata;
  const char* category_string;
  switch (category_string) {
    case SDL_LOG_CATEGORY_APPLICATION:
      category_string: ""SDL_LOG_CATEGORY_APPLICATION"",
      break;
    ...
  }
  switch (priority) {
    case SDL_LOG_PRIORITY_INFO:
      ALLEGRO_INFO(""%s: %s\n"", category_string, message);
      break;
    ...
  }
}

SDL_LogSetOutputFunction(log_to_allegro, NULL)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1322,2022-03-26T22:21:37Z,2022-03-30T02:18:18Z,2022-03-30T02:18:18Z,MERGED,True,10,1,1,https://github.com/connorjclark,Fix usage of SDL_Init for emscripten,2,[],https://github.com/liballeg/allegro5/pull/1322,https://github.com/connorjclark,5,https://github.com/liballeg/allegro5/pull/1322#issuecomment-1081124986,"This patch fixes audio for emscripten.
I printed errors as SDL_GetError was called, and saw this:

Debugging told me the audio system was being initialized, but then shut down. Turns out that if any subsytem requested by SDL_Init cannot start, SDL will shutdown everything. So the haptic subsystem failing was problematic.
It fails because SDL configured the haptic subsytem to not build for emscripten (guess it's not supported).
This behavior in SDL_Init is a recent change. About 6 months ago SDL changed the init function to shutdown things when any requested subsystem failed to start: libsdl-org/SDL@0e294e9 . Previously, it would just return -1, but allegro ignores the return code, so it didn't matter (not fully understanding why everything still worked even though every subsystem after the haptic would have not been initialized...shrug)
I confirmed that the audio demos now play sound in the browser when built locally, using the instructions found in the SDL readme.
Fixes #1321","What do you mean by a logging interface?

I don't have any particular ideas re: implementation, mainly just voicing an annoyance that whatever logging SDL is doing is not accessible to allegro / configurable. Sorry, I'm not being very constructive here :)
There does seem to be a way to set a callback function for logging in SDL: https://github.com/EddieRingle/SDL/blob/master/src/SDL_log.c#L361
EDIT: ah, based on your example code you've found the same.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1323,2022-04-02T03:47:01Z,2022-04-04T03:34:11Z,2022-04-04T03:34:11Z,MERGED,True,107,48,12,https://github.com/SiegeLord,Audio improvements,5,[],https://github.com/liballeg/allegro5/pull/1323,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1323,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1326,2022-04-09T22:42:30Z,2022-04-10T20:44:35Z,2022-04-10T23:20:54Z,MERGED,True,2,4,1,https://github.com/connorjclark,Allow SDL joysticks to be reconfigured after init,1,[],https://github.com/liballeg/allegro5/pull/1326,https://github.com/connorjclark,1,https://github.com/liballeg/allegro5/pull/1326,"Currently joysticks do not work with programs built with emscripten+SDL backend. You can verify this by trying to use a gamepad with the joystick events example here.
The SDL joystick code reads the number of joysticks connected on init, keeping track of the number found in a count variable. If a new controller connects, SDL emits an event, but currently the event handling code ignores all events if on init it found zero controllers.
On the web, the gamepadconnected event only fires after the first input on the controller. This means that on the web, SDL will have zero controllers on setup... unless you happen to be twiddling the controller inputs on setup. The example above initializes too quickly to see this behavior, but it was the first thing I noticed while debugging this issue in my (more setup-intensive) application: controllers only worked if I was twiddling the controller during setup.
The fix is:

Don't ignore events if allegro doesn't yet know about any controllers. After all, one of those events is ""new controller connected""!
Call sdl_reconfigure_joysticks when a controller connects or disconnects

I confirmed this patch works for my application and for the above example:","Currently joysticks do not work with programs built with emscripten+SDL backend. You can verify this by trying to use a gamepad with the joystick events example here.
The SDL joystick code reads the number of joysticks connected on init, keeping track of the number found in a count variable. If a new controller connects, SDL emits an event, but currently the event handling code ignores all events if on init it found zero controllers.
On the web, the gamepadconnected event only fires after the first input on the controller. This means that on the web, SDL will have zero controllers on setup... unless you happen to be twiddling the controller inputs on setup. The example above initializes too quickly to see this behavior, but it was the first thing I noticed while debugging this issue in my (more setup-intensive) application: controllers only worked if I was twiddling the controller during setup.
The fix is:

Don't ignore events if allegro doesn't yet know about any controllers. After all, one of those events is ""new controller connected""!
Call sdl_reconfigure_joysticks when a controller connects or disconnects

I confirmed this patch works for my application and for the above example:",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1326,2022-04-09T22:42:30Z,2022-04-10T20:44:35Z,2022-04-10T23:20:54Z,MERGED,True,2,4,1,https://github.com/connorjclark,Allow SDL joysticks to be reconfigured after init,1,[],https://github.com/liballeg/allegro5/pull/1326,https://github.com/beoran,2,https://github.com/liballeg/allegro5/pull/1326#issuecomment-1094142300,"Currently joysticks do not work with programs built with emscripten+SDL backend. You can verify this by trying to use a gamepad with the joystick events example here.
The SDL joystick code reads the number of joysticks connected on init, keeping track of the number found in a count variable. If a new controller connects, SDL emits an event, but currently the event handling code ignores all events if on init it found zero controllers.
On the web, the gamepadconnected event only fires after the first input on the controller. This means that on the web, SDL will have zero controllers on setup... unless you happen to be twiddling the controller inputs on setup. The example above initializes too quickly to see this behavior, but it was the first thing I noticed while debugging this issue in my (more setup-intensive) application: controllers only worked if I was twiddling the controller during setup.
The fix is:

Don't ignore events if allegro doesn't yet know about any controllers. After all, one of those events is ""new controller connected""!
Call sdl_reconfigure_joysticks when a controller connects or disconnects

I confirmed this patch works for my application and for the above example:",Thanks for this patch. I wonder what that count variable was supposed to do. Could you please confirm there are no unintended side effects of removing this count check?,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1326,2022-04-09T22:42:30Z,2022-04-10T20:44:35Z,2022-04-10T23:20:54Z,MERGED,True,2,4,1,https://github.com/connorjclark,Allow SDL joysticks to be reconfigured after init,1,[],https://github.com/liballeg/allegro5/pull/1326,https://github.com/connorjclark,3,https://github.com/liballeg/allegro5/pull/1326#issuecomment-1094148964,"Currently joysticks do not work with programs built with emscripten+SDL backend. You can verify this by trying to use a gamepad with the joystick events example here.
The SDL joystick code reads the number of joysticks connected on init, keeping track of the number found in a count variable. If a new controller connects, SDL emits an event, but currently the event handling code ignores all events if on init it found zero controllers.
On the web, the gamepadconnected event only fires after the first input on the controller. This means that on the web, SDL will have zero controllers on setup... unless you happen to be twiddling the controller inputs on setup. The example above initializes too quickly to see this behavior, but it was the first thing I noticed while debugging this issue in my (more setup-intensive) application: controllers only worked if I was twiddling the controller during setup.
The fix is:

Don't ignore events if allegro doesn't yet know about any controllers. After all, one of those events is ""new controller connected""!
Call sdl_reconfigure_joysticks when a controller connects or disconnects

I confirmed this patch works for my application and for the above example:","Nothing seems to have broken for me, with 0 joysticks or 1 connected. However, I only own a single gamepad so I can't test the more complex cases of multiple gamepads and them being reconfigured in an expected manner on connect/disconnects.
I'll test more thoroughly that disconnecting and reconnecting the one joystick works.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1326,2022-04-09T22:42:30Z,2022-04-10T20:44:35Z,2022-04-10T23:20:54Z,MERGED,True,2,4,1,https://github.com/connorjclark,Allow SDL joysticks to be reconfigured after init,1,[],https://github.com/liballeg/allegro5/pull/1326,https://github.com/beoran,4,https://github.com/liballeg/allegro5/pull/1326#issuecomment-1094149257,"Currently joysticks do not work with programs built with emscripten+SDL backend. You can verify this by trying to use a gamepad with the joystick events example here.
The SDL joystick code reads the number of joysticks connected on init, keeping track of the number found in a count variable. If a new controller connects, SDL emits an event, but currently the event handling code ignores all events if on init it found zero controllers.
On the web, the gamepadconnected event only fires after the first input on the controller. This means that on the web, SDL will have zero controllers on setup... unless you happen to be twiddling the controller inputs on setup. The example above initializes too quickly to see this behavior, but it was the first thing I noticed while debugging this issue in my (more setup-intensive) application: controllers only worked if I was twiddling the controller during setup.
The fix is:

Don't ignore events if allegro doesn't yet know about any controllers. After all, one of those events is ""new controller connected""!
Call sdl_reconfigure_joysticks when a controller connects or disconnects

I confirmed this patch works for my application and for the above example:","That would be great, thanks. If you could buy or borrow a second joypad or joystick, that would even be better. They are relatively cheap these days.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1326,2022-04-09T22:42:30Z,2022-04-10T20:44:35Z,2022-04-10T23:20:54Z,MERGED,True,2,4,1,https://github.com/connorjclark,Allow SDL joysticks to be reconfigured after init,1,[],https://github.com/liballeg/allegro5/pull/1326,https://github.com/SiegeLord,5,https://github.com/liballeg/allegro5/pull/1326#issuecomment-1094227400,"Currently joysticks do not work with programs built with emscripten+SDL backend. You can verify this by trying to use a gamepad with the joystick events example here.
The SDL joystick code reads the number of joysticks connected on init, keeping track of the number found in a count variable. If a new controller connects, SDL emits an event, but currently the event handling code ignores all events if on init it found zero controllers.
On the web, the gamepadconnected event only fires after the first input on the controller. This means that on the web, SDL will have zero controllers on setup... unless you happen to be twiddling the controller inputs on setup. The example above initializes too quickly to see this behavior, but it was the first thing I noticed while debugging this issue in my (more setup-intensive) application: controllers only worked if I was twiddling the controller during setup.
The fix is:

Don't ignore events if allegro doesn't yet know about any controllers. After all, one of those events is ""new controller connected""!
Call sdl_reconfigure_joysticks when a controller connects or disconnects

I confirmed this patch works for my application and for the above example:",I should be able to test with multiple controllers.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1326,2022-04-09T22:42:30Z,2022-04-10T20:44:35Z,2022-04-10T23:20:54Z,MERGED,True,2,4,1,https://github.com/connorjclark,Allow SDL joysticks to be reconfigured after init,1,[],https://github.com/liballeg/allegro5/pull/1326,https://github.com/connorjclark,6,https://github.com/liballeg/allegro5/pull/1326#issuecomment-1094346672,"Currently joysticks do not work with programs built with emscripten+SDL backend. You can verify this by trying to use a gamepad with the joystick events example here.
The SDL joystick code reads the number of joysticks connected on init, keeping track of the number found in a count variable. If a new controller connects, SDL emits an event, but currently the event handling code ignores all events if on init it found zero controllers.
On the web, the gamepadconnected event only fires after the first input on the controller. This means that on the web, SDL will have zero controllers on setup... unless you happen to be twiddling the controller inputs on setup. The example above initializes too quickly to see this behavior, but it was the first thing I noticed while debugging this issue in my (more setup-intensive) application: controllers only worked if I was twiddling the controller during setup.
The fix is:

Don't ignore events if allegro doesn't yet know about any controllers. After all, one of those events is ""new controller connected""!
Call sdl_reconfigure_joysticks when a controller connects or disconnects

I confirmed this patch works for my application and for the above example:","I confirmed that going from 0->1 and 1->0 controllers works as expected in the demos. @SiegeLord I've uploaded emscripten builds for your convenience:
https://comfortable-badge.surge.sh/ex_joystick_events.html
https://comfortable-badge.surge.sh/ex_joystick_hotplugging.html",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1326,2022-04-09T22:42:30Z,2022-04-10T20:44:35Z,2022-04-10T23:20:54Z,MERGED,True,2,4,1,https://github.com/connorjclark,Allow SDL joysticks to be reconfigured after init,1,[],https://github.com/liballeg/allegro5/pull/1326,https://github.com/SiegeLord,7,https://github.com/liballeg/allegro5/pull/1326#issuecomment-1094365418,"Currently joysticks do not work with programs built with emscripten+SDL backend. You can verify this by trying to use a gamepad with the joystick events example here.
The SDL joystick code reads the number of joysticks connected on init, keeping track of the number found in a count variable. If a new controller connects, SDL emits an event, but currently the event handling code ignores all events if on init it found zero controllers.
On the web, the gamepadconnected event only fires after the first input on the controller. This means that on the web, SDL will have zero controllers on setup... unless you happen to be twiddling the controller inputs on setup. The example above initializes too quickly to see this behavior, but it was the first thing I noticed while debugging this issue in my (more setup-intensive) application: controllers only worked if I was twiddling the controller during setup.
The fix is:

Don't ignore events if allegro doesn't yet know about any controllers. After all, one of those events is ""new controller connected""!
Call sdl_reconfigure_joysticks when a controller connects or disconnects

I confirmed this patch works for my application and for the above example:",Seems to work fine with two controller as well. Thanks for the change!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1326,2022-04-09T22:42:30Z,2022-04-10T20:44:35Z,2022-04-10T23:20:54Z,MERGED,True,2,4,1,https://github.com/connorjclark,Allow SDL joysticks to be reconfigured after init,1,[],https://github.com/liballeg/allegro5/pull/1326,https://github.com/beoran,8,https://github.com/liballeg/allegro5/pull/1326#issuecomment-1094407590,"Currently joysticks do not work with programs built with emscripten+SDL backend. You can verify this by trying to use a gamepad with the joystick events example here.
The SDL joystick code reads the number of joysticks connected on init, keeping track of the number found in a count variable. If a new controller connects, SDL emits an event, but currently the event handling code ignores all events if on init it found zero controllers.
On the web, the gamepadconnected event only fires after the first input on the controller. This means that on the web, SDL will have zero controllers on setup... unless you happen to be twiddling the controller inputs on setup. The example above initializes too quickly to see this behavior, but it was the first thing I noticed while debugging this issue in my (more setup-intensive) application: controllers only worked if I was twiddling the controller during setup.
The fix is:

Don't ignore events if allegro doesn't yet know about any controllers. After all, one of those events is ""new controller connected""!
Call sdl_reconfigure_joysticks when a controller connects or disconnects

I confirmed this patch works for my application and for the above example:","Indeed, thank you very much for your extra tests and for
contributing!",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1327,2022-04-10T04:31:56Z,2022-04-10T20:11:12Z,2022-04-10T20:11:12Z,MERGED,True,2,1,1,https://github.com/connorjclark,Set joystick button name for SDL game controllers,1,[],https://github.com/liballeg/allegro5/pull/1327,https://github.com/connorjclark,1,https://github.com/liballeg/allegro5/pull/1327,"SDL provides a function to map a button to a name, but only for SDL game controllers (not SDL joysticks). Allegro doesn't have a distinction between controllers/joysticks, which is fine. But when possible allegro can query SDL for the name of a button if supported.","SDL provides a function to map a button to a name, but only for SDL game controllers (not SDL joysticks). Allegro doesn't have a distinction between controllers/joysticks, which is fine. But when possible allegro can query SDL for the name of a button if supported.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1327,2022-04-10T04:31:56Z,2022-04-10T20:11:12Z,2022-04-10T20:11:12Z,MERGED,True,2,1,1,https://github.com/connorjclark,Set joystick button name for SDL game controllers,1,[],https://github.com/liballeg/allegro5/pull/1327,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1327#issuecomment-1094360287,"SDL provides a function to map a button to a name, but only for SDL game controllers (not SDL joysticks). Allegro doesn't have a distinction between controllers/joysticks, which is fine. But when possible allegro can query SDL for the name of a button if supported.",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1329,2022-04-18T00:26:22Z,2022-04-25T02:23:07Z,2022-04-25T02:23:07Z,MERGED,True,155,54,10,https://github.com/SiegeLord,Shader platform improvements.,2,[],https://github.com/liballeg/allegro5/pull/1329,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1329,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1330,2022-04-20T05:40:31Z,2022-04-20T05:47:53Z,2022-04-20T05:47:53Z,MERGED,True,3,4,1,https://github.com/connorjclark,Fix SDL mouse axis setter,1,[],https://github.com/liballeg/allegro5/pull/1330,https://github.com/connorjclark,1,https://github.com/liballeg/allegro5/pull/1330,"The correct indices for the z and w mouse values are 2 and 3, but the sdl mouse implementation uses 1 and 2. This results in buggy (""sticky"") mouse wheel behavior when using SDL (a call to al_set_mouse_z(0) would never really clear the z value, so mouse events always kept their previous value given no new wheel input even though the user cleared it)","The correct indices for the z and w mouse values are 2 and 3, but the sdl mouse implementation uses 1 and 2. This results in buggy (""sticky"") mouse wheel behavior when using SDL (a call to al_set_mouse_z(0) would never really clear the z value, so mouse events always kept their previous value given no new wheel input even though the user cleared it)",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1330,2022-04-20T05:40:31Z,2022-04-20T05:47:53Z,2022-04-20T05:47:53Z,MERGED,True,3,4,1,https://github.com/connorjclark,Fix SDL mouse axis setter,1,[],https://github.com/liballeg/allegro5/pull/1330,https://github.com/SiegeLord,2,https://github.com/liballeg/allegro5/pull/1330#issuecomment-1103494583,"The correct indices for the z and w mouse values are 2 and 3, but the sdl mouse implementation uses 1 and 2. This results in buggy (""sticky"") mouse wheel behavior when using SDL (a call to al_set_mouse_z(0) would never really clear the z value, so mouse events always kept their previous value given no new wheel input even though the user cleared it)",Thanks!,True,{'THUMBS_UP': ['https://github.com/connorjclark']}
liballeg/allegro5,https://github.com/liballeg/allegro5,1331,2022-04-29T03:09:28Z,2022-04-30T22:24:35Z,2022-04-30T22:24:35Z,MERGED,True,7,0,1,https://github.com/SiegeLord,Add compatibility for older kernels in lhaptic.c,1,[],https://github.com/liballeg/allegro5/pull/1331,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1331,Fixes #1305,Fixes #1305,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1332,2022-04-29T03:09:41Z,2022-05-15T21:16:33Z,2022-05-15T21:16:33Z,MERGED,True,1220,1119,4,https://github.com/SiegeLord,Add al_play_audio_stream{_f}. Refactor the Audio docs.,1,[],https://github.com/liballeg/allegro5/pull/1332,https://github.com/SiegeLord,1,https://github.com/liballeg/allegro5/pull/1332,,,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1333,2022-05-10T20:40:53Z,2022-05-15T20:38:35Z,2022-05-15T20:38:35Z,MERGED,True,12,12,1,https://github.com/check-switch-26,Fix random garbage at edges of glyph rendering,1,[],https://github.com/liballeg/allegro5/pull/1333,https://github.com/check-switch-26,1,https://github.com/liballeg/allegro5/pull/1333,"Bugfix - regression bug caused by commit 61b7310
In some cases, glyphs render with thin garbage lines at edges.  This is caused by uninitialized adjacent regions in the glyph cache bitmap.
Fixed by doubling glyph border to two pixels, while using a one-pixel border for rendering.","Bugfix - regression bug caused by commit 61b7310
In some cases, glyphs render with thin garbage lines at edges.  This is caused by uninitialized adjacent regions in the glyph cache bitmap.
Fixed by doubling glyph border to two pixels, while using a one-pixel border for rendering.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1333,2022-05-10T20:40:53Z,2022-05-15T20:38:35Z,2022-05-15T20:38:35Z,MERGED,True,12,12,1,https://github.com/check-switch-26,Fix random garbage at edges of glyph rendering,1,[],https://github.com/liballeg/allegro5/pull/1333,https://github.com/beoran,2,https://github.com/liballeg/allegro5/pull/1333#issuecomment-1123200150,"Bugfix - regression bug caused by commit 61b7310
In some cases, glyphs render with thin garbage lines at edges.  This is caused by uninitialized adjacent regions in the glyph cache bitmap.
Fixed by doubling glyph border to two pixels, while using a one-pixel border for rendering.",Would it not be better to let alloc_glyph_region clear the bitmap in stead?,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1333,2022-05-10T20:40:53Z,2022-05-15T20:38:35Z,2022-05-15T20:38:35Z,MERGED,True,12,12,1,https://github.com/check-switch-26,Fix random garbage at edges of glyph rendering,1,[],https://github.com/liballeg/allegro5/pull/1333,https://github.com/check-switch-26,3,https://github.com/liballeg/allegro5/pull/1333#issuecomment-1124281073,"Bugfix - regression bug caused by commit 61b7310
In some cases, glyphs render with thin garbage lines at edges.  This is caused by uninitialized adjacent regions in the glyph cache bitmap.
Fixed by doubling glyph border to two pixels, while using a one-pixel border for rendering.","Would it not be better to let alloc_glyph_region clear the bitmap in stead?

alloc_glyph_region() as originally written locks (and clears) only the region of the bitmap that will be used to save the new glyph.  I have tried to keep my changes as minimal as possible so as to keep the intent clear and to not disrupt any original design decisions.
There likely are some opportunities for optimization in the ttf.c module, but I'm not sure how aggressively that should be pursued.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1333,2022-05-10T20:40:53Z,2022-05-15T20:38:35Z,2022-05-15T20:38:35Z,MERGED,True,12,12,1,https://github.com/check-switch-26,Fix random garbage at edges of glyph rendering,1,[],https://github.com/liballeg/allegro5/pull/1333,https://github.com/SiegeLord,4,https://github.com/liballeg/allegro5/pull/1333#issuecomment-1127023762,"Bugfix - regression bug caused by commit 61b7310
In some cases, glyphs render with thin garbage lines at edges.  This is caused by uninitialized adjacent regions in the glyph cache bitmap.
Fixed by doubling glyph border to two pixels, while using a one-pixel border for rendering.",Thanks!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1334,2022-05-11T03:06:15Z,2022-05-15T20:31:45Z,2022-05-15T20:31:45Z,MERGED,True,1,1,1,https://github.com/danielnachun,Don't use -flat_namespace in LINK_FLAGS on macOS,1,[],https://github.com/liballeg/allegro5/pull/1334,https://github.com/danielnachun,1,https://github.com/liballeg/allegro5/pull/1334,"In Homebrew we have started auditing for the usage of flat namespaces in shared libraries, and have found that they are being used in the libraries built by Allegro 5.  The usage of flat namespaces is considered deprecated in modern versions of macOS (https://developer.apple.com/forums//thread/689991), and it can lead to symbol conflicts if a dynamically linked binary ends up linking to Allegro and another library with identically named symbols.
These flags were added in 2008 in 646aa94 and have probably remained as a historical artifact.  On modern macOS systems the proper flag should be -undefined dynamic_lookup instead, and Allegro builds successfully with these changes in Homebrew CI: Homebrew/homebrew-core#101176.","In Homebrew we have started auditing for the usage of flat namespaces in shared libraries, and have found that they are being used in the libraries built by Allegro 5.  The usage of flat namespaces is considered deprecated in modern versions of macOS (https://developer.apple.com/forums//thread/689991), and it can lead to symbol conflicts if a dynamically linked binary ends up linking to Allegro and another library with identically named symbols.
These flags were added in 2008 in 646aa94 and have probably remained as a historical artifact.  On modern macOS systems the proper flag should be -undefined dynamic_lookup instead, and Allegro builds successfully with these changes in Homebrew CI: Homebrew/homebrew-core#101176.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1334,2022-05-11T03:06:15Z,2022-05-15T20:31:45Z,2022-05-15T20:31:45Z,MERGED,True,1,1,1,https://github.com/danielnachun,Don't use -flat_namespace in LINK_FLAGS on macOS,1,[],https://github.com/liballeg/allegro5/pull/1334,https://github.com/beoran,2,https://github.com/liballeg/allegro5/pull/1334#issuecomment-1123201733,"In Homebrew we have started auditing for the usage of flat namespaces in shared libraries, and have found that they are being used in the libraries built by Allegro 5.  The usage of flat namespaces is considered deprecated in modern versions of macOS (https://developer.apple.com/forums//thread/689991), and it can lead to symbol conflicts if a dynamically linked binary ends up linking to Allegro and another library with identically named symbols.
These flags were added in 2008 in 646aa94 and have probably remained as a historical artifact.  On modern macOS systems the proper flag should be -undefined dynamic_lookup instead, and Allegro builds successfully with these changes in Homebrew CI: Homebrew/homebrew-core#101176.","Thanks for the contribution. This seems to be ok, but does it also work for the monolith build?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1334,2022-05-11T03:06:15Z,2022-05-15T20:31:45Z,2022-05-15T20:31:45Z,MERGED,True,1,1,1,https://github.com/danielnachun,Don't use -flat_namespace in LINK_FLAGS on macOS,1,[],https://github.com/liballeg/allegro5/pull/1334,https://github.com/danielnachun,3,https://github.com/liballeg/allegro5/pull/1334#issuecomment-1124575623,"In Homebrew we have started auditing for the usage of flat namespaces in shared libraries, and have found that they are being used in the libraries built by Allegro 5.  The usage of flat namespaces is considered deprecated in modern versions of macOS (https://developer.apple.com/forums//thread/689991), and it can lead to symbol conflicts if a dynamically linked binary ends up linking to Allegro and another library with identically named symbols.
These flags were added in 2008 in 646aa94 and have probably remained as a historical artifact.  On modern macOS systems the proper flag should be -undefined dynamic_lookup instead, and Allegro builds successfully with these changes in Homebrew CI: Homebrew/homebrew-core#101176.",I tested the build with -DWANT_MONOLITH=ON added and it successfully builds the monolith library.  I also confirmed that the small test program we use links to the monolith library and executes successfully.  So I think the monolith build is good to go.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1334,2022-05-11T03:06:15Z,2022-05-15T20:31:45Z,2022-05-15T20:31:45Z,MERGED,True,1,1,1,https://github.com/danielnachun,Don't use -flat_namespace in LINK_FLAGS on macOS,1,[],https://github.com/liballeg/allegro5/pull/1334,https://github.com/pedro-w,4,https://github.com/liballeg/allegro5/pull/1334#issuecomment-1124654117,"In Homebrew we have started auditing for the usage of flat namespaces in shared libraries, and have found that they are being used in the libraries built by Allegro 5.  The usage of flat namespaces is considered deprecated in modern versions of macOS (https://developer.apple.com/forums//thread/689991), and it can lead to symbol conflicts if a dynamically linked binary ends up linking to Allegro and another library with identically named symbols.
These flags were added in 2008 in 646aa94 and have probably remained as a historical artifact.  On modern macOS systems the proper flag should be -undefined dynamic_lookup instead, and Allegro builds successfully with these changes in Homebrew CI: Homebrew/homebrew-core#101176.",I'd be happy to see this merged - assuming #555 is no longer a problem,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1334,2022-05-11T03:06:15Z,2022-05-15T20:31:45Z,2022-05-15T20:31:45Z,MERGED,True,1,1,1,https://github.com/danielnachun,Don't use -flat_namespace in LINK_FLAGS on macOS,1,[],https://github.com/liballeg/allegro5/pull/1334,https://github.com/danielnachun,5,https://github.com/liballeg/allegro5/pull/1334#issuecomment-1124705019,"In Homebrew we have started auditing for the usage of flat namespaces in shared libraries, and have found that they are being used in the libraries built by Allegro 5.  The usage of flat namespaces is considered deprecated in modern versions of macOS (https://developer.apple.com/forums//thread/689991), and it can lead to symbol conflicts if a dynamically linked binary ends up linking to Allegro and another library with identically named symbols.
These flags were added in 2008 in 646aa94 and have probably remained as a historical artifact.  On modern macOS systems the proper flag should be -undefined dynamic_lookup instead, and Allegro builds successfully with these changes in Homebrew CI: Homebrew/homebrew-core#101176.","I believe this PR may also fix #555, as I encountered that exact error when I tried to just delete the extra LINK_FLAGS entirely instead of replacing -flat_namespace -undefined suppress with -undefined dynamic_lookup.  If you look at the error posted there further down:
dlopen(libs/lib1-opengl/libOpenGL.so, 8): Symbol not found: __al_mangled_main
Referenced from: /nfs/zfs-student-6/users/tmack/.brew/opt/allegro/lib/liballegro_main.5.2.dylib
Expected in: flat namespace
in /nfs/zfs-student-6/users/tmack/.brew/opt/allegro/lib/liballegro_main.5.2.dylib

it appears to be a result of incorrectly using the flat namespace rather than the two-level namespace and telling the linker to ignore missing symbols rather than searching for them dynamically.",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1334,2022-05-11T03:06:15Z,2022-05-15T20:31:45Z,2022-05-15T20:31:45Z,MERGED,True,1,1,1,https://github.com/danielnachun,Don't use -flat_namespace in LINK_FLAGS on macOS,1,[],https://github.com/liballeg/allegro5/pull/1334,https://github.com/beoran,6,https://github.com/liballeg/allegro5/pull/1334#issuecomment-1124767850,"In Homebrew we have started auditing for the usage of flat namespaces in shared libraries, and have found that they are being used in the libraries built by Allegro 5.  The usage of flat namespaces is considered deprecated in modern versions of macOS (https://developer.apple.com/forums//thread/689991), and it can lead to symbol conflicts if a dynamically linked binary ends up linking to Allegro and another library with identically named symbols.
These flags were added in 2008 in 646aa94 and have probably remained as a historical artifact.  On modern macOS systems the proper flag should be -undefined dynamic_lookup instead, and Allegro builds successfully with these changes in Homebrew CI: Homebrew/homebrew-core#101176.",If the monolith is also ok then we can probably merge this.,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1334,2022-05-11T03:06:15Z,2022-05-15T20:31:45Z,2022-05-15T20:31:45Z,MERGED,True,1,1,1,https://github.com/danielnachun,Don't use -flat_namespace in LINK_FLAGS on macOS,1,[],https://github.com/liballeg/allegro5/pull/1334,https://github.com/SiegeLord,7,https://github.com/liballeg/allegro5/pull/1334#issuecomment-1127022494,"In Homebrew we have started auditing for the usage of flat namespaces in shared libraries, and have found that they are being used in the libraries built by Allegro 5.  The usage of flat namespaces is considered deprecated in modern versions of macOS (https://developer.apple.com/forums//thread/689991), and it can lead to symbol conflicts if a dynamically linked binary ends up linking to Allegro and another library with identically named symbols.
These flags were added in 2008 in 646aa94 and have probably remained as a historical artifact.  On modern macOS systems the proper flag should be -undefined dynamic_lookup instead, and Allegro builds successfully with these changes in Homebrew CI: Homebrew/homebrew-core#101176.",Looks good. Thanks for the change!,True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1336,2022-05-15T18:24:13Z,2022-05-15T20:29:25Z,2022-05-15T20:29:25Z,MERGED,True,9,8,5,https://github.com/connorjclark,Get SDL backend working on OSX,1,[],https://github.com/liballeg/allegro5/pull/1336,https://github.com/connorjclark,1,https://github.com/liballeg/allegro5/pull/1336,"ref #1335
This patch unsets ALLEGRO_MACOSX if the SDL backend is requested. Some conditions controlling GL header inclusion had to be changed to a direct platform __APPLE__ check, and a few MACOSX cmake checks had to change to ALLEGRO_MACOSX.
I'm able to build and run the ex_draw example with this change, with and without the SDL backend. Although with SDL you must disable the native dialog addon manually (-DWANT_NATIVE_DIALOG=off). Should that be done in the build by default iff ALLEGRO_SDL?","ref #1335
This patch unsets ALLEGRO_MACOSX if the SDL backend is requested. Some conditions controlling GL header inclusion had to be changed to a direct platform __APPLE__ check, and a few MACOSX cmake checks had to change to ALLEGRO_MACOSX.
I'm able to build and run the ex_draw example with this change, with and without the SDL backend. Although with SDL you must disable the native dialog addon manually (-DWANT_NATIVE_DIALOG=off). Should that be done in the build by default iff ALLEGRO_SDL?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1336,2022-05-15T18:24:13Z,2022-05-15T20:29:25Z,2022-05-15T20:29:25Z,MERGED,True,9,8,5,https://github.com/connorjclark,Get SDL backend working on OSX,1,[],https://github.com/liballeg/allegro5/pull/1336,https://github.com/connorjclark,2,https://github.com/liballeg/allegro5/pull/1336#issuecomment-1126991849,"ref #1335
This patch unsets ALLEGRO_MACOSX if the SDL backend is requested. Some conditions controlling GL header inclusion had to be changed to a direct platform __APPLE__ check, and a few MACOSX cmake checks had to change to ALLEGRO_MACOSX.
I'm able to build and run the ex_draw example with this change, with and without the SDL backend. Although with SDL you must disable the native dialog addon manually (-DWANT_NATIVE_DIALOG=off). Should that be done in the build by default iff ALLEGRO_SDL?","Should I also try to get travis building SDL on osx in this PR, or a new one?",True,{}
liballeg/allegro5,https://github.com/liballeg/allegro5,1336,2022-05-15T18:24:13Z,2022-05-15T20:29:25Z,2022-05-15T20:29:25Z,MERGED,True,9,8,5,https://github.com/connorjclark,Get SDL backend working on OSX,1,[],https://github.com/liballeg/allegro5/pull/1336,https://github.com/SiegeLord,3,https://github.com/liballeg/allegro5/pull/1336#issuecomment-1127021667,"ref #1335
This patch unsets ALLEGRO_MACOSX if the SDL backend is requested. Some conditions controlling GL header inclusion had to be changed to a direct platform __APPLE__ check, and a few MACOSX cmake checks had to change to ALLEGRO_MACOSX.
I'm able to build and run the ex_draw example with this change, with and without the SDL backend. Although with SDL you must disable the native dialog addon manually (-DWANT_NATIVE_DIALOG=off). Should that be done in the build by default iff ALLEGRO_SDL?",Thanks. We need CI for SDL on every system at some point.,True,{}
