SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1087,2016-03-02T10:05:43Z,2017-05-22T19:13:27Z,2017-05-22T19:13:27Z,CLOSED,False,5,2,1,https://github.com/dstelter,Avoid redundant operator invokation in multimatch rules,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1087,https://github.com/dstelter,1,https://github.com/SpiderLabs/ModSecurity/pull/1087,Fixes #1086,Fixes #1086,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1087,2016-03-02T10:05:43Z,2017-05-22T19:13:27Z,2017-05-22T19:13:27Z,CLOSED,False,5,2,1,https://github.com/dstelter,Avoid redundant operator invokation in multimatch rules,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1087,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1087#issuecomment-191334197,Fixes #1086,The original discussion on that matter is being held at #1086,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1087,2016-03-02T10:05:43Z,2017-05-22T19:13:27Z,2017-05-22T19:13:27Z,CLOSED,False,5,2,1,https://github.com/dstelter,Avoid redundant operator invokation in multimatch rules,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1087,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1087#issuecomment-303193311,Fixes #1086,"As explained at #1086, this is now closed.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1098,2016-03-17T21:53:06Z,2016-04-04T19:27:14Z,2016-04-04T19:27:14Z,CLOSED,False,22,8,1,https://github.com/bjh7242,added remove_comments_char transformation to address issue #971,2,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1098,https://github.com/bjh7242,1,https://github.com/SpiderLabs/ModSecurity/pull/1098,"Implemented remove_comments_char transformation for libmodsecurity.
Removes the following characters

/*
*/","Implemented remove_comments_char transformation for libmodsecurity.
Removes the following characters

/*
*/",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1098,2016-03-17T21:53:06Z,2016-04-04T19:27:14Z,2016-04-04T19:27:14Z,CLOSED,False,22,8,1,https://github.com/bjh7242,added remove_comments_char transformation to address issue #971,2,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1098,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1098#issuecomment-205386183,"Implemented remove_comments_char transformation for libmodsecurity.
Removes the following characters

/*
*/","Hi @bjh7242,
Thanks for the patch. I will try to have a look on it today.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1098,2016-03-17T21:53:06Z,2016-04-04T19:27:14Z,2016-04-04T19:27:14Z,CLOSED,False,22,8,1,https://github.com/bjh7242,added remove_comments_char transformation to address issue #971,2,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1098,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1098#issuecomment-205458577,"Implemented remove_comments_char transformation for libmodsecurity.
Removes the following characters

/*
*/","Hi @bjh7242,
Your pull request is now merged. Thanks again for patch.
Few comments:
Usually, before add a functionality to version 3 we expect to have regression tests that covers its basic usage, plus a few corner cases. Those unit tests are very important, among of other things, those tests are executed by our buildbots, so we can make sure that the functionality is really working in all supported platforms.
Other detail that you may want to consider is the fact that we try to not use lines bigger than 80 characters.
Changes that I have made:

Unit tests:
SpiderLabs/secrules-language-tests@ee477d1
Coding style:
0a60924
Fix in the parser to make the functionality really available to the end user:
6f93563",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1108,2016-03-30T13:04:16Z,2017-05-16T20:32:32Z,2017-05-16T20:32:40Z,CLOSED,False,10,0,1,https://github.com/culyerr,Added PATCH support,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1108,https://github.com/culyerr,1,https://github.com/SpiderLabs/ModSecurity/pull/1108,Adds PATCH support for IIS - relates to #1107,Adds PATCH support for IIS - relates to #1107,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1108,2016-03-30T13:04:16Z,2017-05-16T20:32:32Z,2017-05-16T20:32:40Z,CLOSED,False,10,0,1,https://github.com/culyerr,Added PATCH support,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1108,https://github.com/csanders-git,2,https://github.com/SpiderLabs/ModSecurity/pull/1108#issuecomment-203439159,Adds PATCH support for IIS - relates to #1107,This is very interesting - for my own edification - where is the PATCH method used?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1108,2016-03-30T13:04:16Z,2017-05-16T20:32:32Z,2017-05-16T20:32:40Z,CLOSED,False,10,0,1,https://github.com/culyerr,Added PATCH support,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1108,https://github.com/culyerr,3,https://github.com/SpiderLabs/ModSecurity/pull/1108#issuecomment-203443444,Adds PATCH support for IIS - relates to #1107,"From RFC5789
""The existing HTTP PUT method only allows a complete replacement of a document.This proposal adds a new HTTP method, PATCH, to modify an existing HTTP resource.""",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1108,2016-03-30T13:04:16Z,2017-05-16T20:32:32Z,2017-05-16T20:32:40Z,CLOSED,False,10,0,1,https://github.com/culyerr,Added PATCH support,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1108,https://github.com/csanders-git,4,https://github.com/SpiderLabs/ModSecurity/pull/1108#issuecomment-203444095,Adds PATCH support for IIS - relates to #1107,This is interesting - i've seen the RFC - does anything use this? Just so we can test it :-P,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1108,2016-03-30T13:04:16Z,2017-05-16T20:32:32Z,2017-05-16T20:32:40Z,CLOSED,False,10,0,1,https://github.com/culyerr,Added PATCH support,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1108,https://github.com/culyerr,5,https://github.com/SpiderLabs/ModSecurity/pull/1108#issuecomment-203452541,Adds PATCH support for IIS - relates to #1107,"We have tested this with part of our payments solution but the PATCH methods are not publicly accessible for 3rd party testing.
I guess you could test against any resource on an IIS server - without the fix if you have ""detection mode = on"" it will record ""Guid_0.00"" errors if it does not work.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1108,2016-03-30T13:04:16Z,2017-05-16T20:32:32Z,2017-05-16T20:32:40Z,CLOSED,False,10,0,1,https://github.com/culyerr,Added PATCH support,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1108,https://github.com/zimmerle,6,https://github.com/SpiderLabs/ModSecurity/pull/1108#issuecomment-205908793,Adds PATCH support for IIS - relates to #1107,"Relevant documentation:

HTTP_REQUEST - https://msdn.microsoft.com/en-us/library/windows/desktop/aa364545(v=vs.85).aspx
HTTP_REQUEST_V1 - https://technet.microsoft.com/pt-br/aa364612(v=vs.71)
HTTP_REQUEST_V2 - https://msdn.microsoft.com/en-us/library/windows/desktop/aa364613(v=vs.85).aspx",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1108,2016-03-30T13:04:16Z,2017-05-16T20:32:32Z,2017-05-16T20:32:40Z,CLOSED,False,10,0,1,https://github.com/culyerr,Added PATCH support,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1108,https://github.com/Almamu,7,https://github.com/SpiderLabs/ModSecurity/pull/1108#issuecomment-224246366,Adds PATCH support for IIS - relates to #1107,"@csanders-git The standard methods (GET, POST, PUT, PATCH, DELETE) are widely used in REST API interfaces, so having support to inspect those would be really helpful.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1108,2016-03-30T13:04:16Z,2017-05-16T20:32:32Z,2017-05-16T20:32:40Z,CLOSED,False,10,0,1,https://github.com/culyerr,Added PATCH support,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1108,https://github.com/csanders-git,8,https://github.com/SpiderLabs/ModSecurity/pull/1108#issuecomment-224967145,Adds PATCH support for IIS - relates to #1107,@Almamu - any idea of some examples that might be around?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1108,2016-03-30T13:04:16Z,2017-05-16T20:32:32Z,2017-05-16T20:32:40Z,CLOSED,False,10,0,1,https://github.com/culyerr,Added PATCH support,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1108,https://github.com/Almamu,9,https://github.com/SpiderLabs/ModSecurity/pull/1108#issuecomment-225008443,Adds PATCH support for IIS - relates to #1107,"@csanders-git I don't have any publicly accesible example as I've always worked on REST API for private systems, but searching about API REST in google gives a handful of results of how it should be implemented and documentation that specifies how the standar HTTP verbs are used in it and what they mean, although there is no RFC for REST API (as long as I recall).
EDIT: NVM, the github API does use PATCH requests: https://developer.github.com/v3/#http-verbs",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1108,2016-03-30T13:04:16Z,2017-05-16T20:32:32Z,2017-05-16T20:32:40Z,CLOSED,False,10,0,1,https://github.com/culyerr,Added PATCH support,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1108,https://github.com/victorhora,10,https://github.com/SpiderLabs/ModSecurity/pull/1108#issuecomment-296326041,Adds PATCH support for IIS - relates to #1107,"So it looks like there's still not that many apps using PATCH these days. I could only find a few APIs to test (which were easy to deploy on Apache/Nginx, but a pain to get it working under IIS). Maybe someone could give us a hand in that direction... :)
That said, by doing some trickery with IIS WebDAV module I could run a few tests with CRS and some custom rules. As PATCH is not explicitly added to the main code base of ModSecurity looks like you can't use REQUEST_METHOD or REQUEST_LINE variables straightforward to match with PATCH requests. But It looks like you can still match stuff with ARGS, REQUEST_LINE or FULL_REQUEST variables.
On all my testes I couldn't spot any error related to ""Guid_0.00"" as mentioned but I'm really not familiar with this error message. It looks like that this issue could be related with PCRE limits parsing large bodies and / or XML but this is only a guess at this point.
@culyerr @Almamu maybe if you could share the rules you have loaded, some debug logs and ideally a HTTP PATCH request which triggers this issue would be great.
What I'm trying to understand is if this pull request is actually to fix a bug specific for ModSecurity on IIS or to add a functionality (PATCH verb support) =)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1108,2016-03-30T13:04:16Z,2017-05-16T20:32:32Z,2017-05-16T20:32:40Z,CLOSED,False,10,0,1,https://github.com/culyerr,Added PATCH support,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1108,https://github.com/zimmerle,11,https://github.com/SpiderLabs/ModSecurity/pull/1108#issuecomment-301906801,Adds PATCH support for IIS - relates to #1107,"Closing this pull request, I will merge it once I find myself the manners to test it.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1110,2016-03-30T13:14:40Z,2016-04-05T17:07:13Z,2016-09-27T15:34:30Z,CLOSED,False,9,2,1,https://github.com/culyerr,Fixed IPv4 address parsing when port is present at end of address,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1110,https://github.com/culyerr,1,https://github.com/SpiderLabs/ModSecurity/pull/1110,Relates to #1109,Relates to #1109,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1110,2016-03-30T13:14:40Z,2016-04-05T17:07:13Z,2016-09-27T15:34:30Z,CLOSED,False,9,2,1,https://github.com/culyerr,Fixed IPv4 address parsing when port is present at end of address,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1110,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1110#issuecomment-205892211,Relates to #1109,"Hi @culyerr,
Thanks for you patch. It is currently being tested by our buildbots.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1110,2016-03-30T13:14:40Z,2016-04-05T17:07:13Z,2016-09-27T15:34:30Z,CLOSED,False,9,2,1,https://github.com/culyerr,Fixed IPv4 address parsing when port is present at end of address,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1110,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1110#issuecomment-205899156,Relates to #1109,"Hi @culyerr,
This function ""tree_contains_ip"" is not only used by IIS. It is used by our different ports: for Apache, NGINX, and others. We may also expect to receive an IPv6 as input of that function.
I believe that this bug that you want to address, may related to the fact that the IP address should never ever come with the port at that stage. Most likely the update needs to be made in the IIS specific code. So that we can get rid of the port in the earlier stages of ModSecurity processing.
Testing the patch I got 2582 unit tests failing. Please, have a look at:
http://www.modsecurity.org/developers/buildbot/builders/Linux32%20-%20Nginx%20%28Stable%29/builds/255/steps/unit%20test_1/logs/stdio
Thanks for the patch!",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1110,2016-03-30T13:14:40Z,2016-04-05T17:07:13Z,2016-09-27T15:34:30Z,CLOSED,False,9,2,1,https://github.com/culyerr,Fixed IPv4 address parsing when port is present at end of address,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1110,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1110#issuecomment-205901314,Relates to #1109,"@culyerr if you want to discuss it, please reach me (zimmerle) or csanders on #modsecurity at FreeNode.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1110,2016-03-30T13:14:40Z,2016-04-05T17:07:13Z,2016-09-27T15:34:30Z,CLOSED,False,9,2,1,https://github.com/culyerr,Fixed IPv4 address parsing when port is present at end of address,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1110,https://github.com/culyerr,5,https://github.com/SpiderLabs/ModSecurity/pull/1110#issuecomment-249898929,Relates to #1109,Thanks. I am picking this up again now and will look to implement the check in the IIS specific code.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1110,2016-03-30T13:14:40Z,2016-04-05T17:07:13Z,2016-09-27T15:34:30Z,CLOSED,False,9,2,1,https://github.com/culyerr,Fixed IPv4 address parsing when port is present at end of address,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1110,https://github.com/zimmerle,6,https://github.com/SpiderLabs/ModSecurity/pull/1110#issuecomment-249902385,Relates to #1109,@culyerr Nice ;) if you need something we are at: https://modsecurity.slack.com/,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1115,2016-04-05T00:59:32Z,2016-04-05T13:12:14Z,2016-04-05T13:12:14Z,CLOSED,False,19,9,2,https://github.com/bjh7242,Implemented removeWhitespace transformation - Issue #972,5,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1115,https://github.com/bjh7242,1,https://github.com/SpiderLabs/ModSecurity/pull/1115,"Implemented removeWhitespace transformation to address #972
Removes the following characters:

space (' ')
form feed ('\f')
line feed ('\n')
carriage return ('\r')
horizontal tab ('\t')
vertical tab ('\v')
non breaking space character

This patch passes the existing unit tests from https://github.com/SpiderLabs/secrules-language-tests/blob/master/transformations/removeWhitespace.json","Implemented removeWhitespace transformation to address #972
Removes the following characters:

space (' ')
form feed ('\f')
line feed ('\n')
carriage return ('\r')
horizontal tab ('\t')
vertical tab ('\v')
non breaking space character

This patch passes the existing unit tests from https://github.com/SpiderLabs/secrules-language-tests/blob/master/transformations/removeWhitespace.json",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1115,2016-04-05T00:59:32Z,2016-04-05T13:12:14Z,2016-04-05T13:12:14Z,CLOSED,False,19,9,2,https://github.com/bjh7242,Implemented removeWhitespace transformation - Issue #972,5,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1115,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1115#issuecomment-205796315,"Implemented removeWhitespace transformation to address #972
Removes the following characters:

space (' ')
form feed ('\f')
line feed ('\n')
carriage return ('\r')
horizontal tab ('\t')
vertical tab ('\v')
non breaking space character

This patch passes the existing unit tests from https://github.com/SpiderLabs/secrules-language-tests/blob/master/transformations/removeWhitespace.json","Hi @bjh7242,
Thanks for the patch!!
Few comments:

You may want to put your name on the git configuration

https://help.github.com/articles/setting-your-username-in-git/


You may want to create a new branch for each pull request, so that you always get a fresh tree. For instance:

$ git checkout libmodsecurity
$ git checkout -b libmodsecurity_remove_whitespace


There was some coding style warnings:

warning: ./ModSecurity/src/actions/transformations/remove_whitespace.cc:42:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]
warning: ./ModSecurity/src/actions/transformations/remove_whitespace.cc:45:  Missing space before ( in while(  [whitespace/parens] [5]
warning: ./ModSecurity/src/actions/transformations/remove_whitespace.cc:47:  Missing spaces around ||  [whitespace/operators] [3]
warning: ./ModSecurity/src/actions/transformations/remove_whitespace.cc:48:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]
warning: ./ModSecurity/src/actions/transformations/remove_whitespace.cc:50:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]
warning: ./ModSecurity/src/actions/transformations/remove_whitespace.cc:50:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]

Modification that I did are available here: 1539a8c
Buildbots output after mine modifications:
http://www.modsecurity.org/developers/buildbot/libmodsecurity/builders/Linux64%20-%20Linux/builds/167/steps/coding%20style/logs/warnings%20%2833%29
Patch was merged! Thank you.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1123,2016-04-18T16:19:28Z,2016-05-30T13:01:23Z,2016-05-30T13:48:27Z,CLOSED,False,4703,770,23,https://github.com/csanders-git,Added mbed functionality,5,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1123,https://github.com/csanders-git,1,https://github.com/SpiderLabs/ModSecurity/pull/1123,"added mbed open source framework
supports md5, sha1 and base64
also added hexify funcitons","added mbed open source framework
supports md5, sha1 and base64
also added hexify funcitons",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1123,2016-04-18T16:19:28Z,2016-05-30T13:01:23Z,2016-05-30T13:48:27Z,CLOSED,False,4703,770,23,https://github.com/csanders-git,Added mbed functionality,5,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1123,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1123#issuecomment-222487944,"added mbed open source framework
supports md5, sha1 and base64
also added hexify funcitons","Merged with little modifications. The core feature is on the ""libmodsecurity""  already.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1143,2016-05-05T17:09:18Z,2016-05-05T18:54:35Z,2016-05-13T18:02:41Z,CLOSED,False,3,2,1,https://github.com/manishmalik,Declaring variable outside the for loop,1,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1143,https://github.com/manishmalik,1,https://github.com/SpiderLabs/ModSecurity/pull/1143,"This patch, fixes the following error while building modsecurity:
make[2]: Entering directory `/opt/ModSecurity/examples/multithread_c'
gcc -DHAVE_CONFIG_H -I. -I../../src    -I../../headers -I../..  -g -O2 -MT multi-multi.o -MD -MP -MF .deps/multi-multi.Tpo -c -o multi-multi.o `test -f 'multi.c' || echo './'`multi.c
multi.c: In function 'main':
multi.c:113:5: error: 'for' loop initial declarations are only allowed in C99 mode
     for (int h = 0; h < FORKS; h++) {
     ^
multi.c:113:5: note: use option -std=c99 or -std=gnu99 to compile your code
make[2]: *** [multi-multi.o] Error 1
make[2]: Leaving directory `/opt/ModSecurity/examples/multithread_c'
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory `/opt/ModSecurity/examples'
make: *** [all-recursive] Error 1","This patch, fixes the following error while building modsecurity:
make[2]: Entering directory `/opt/ModSecurity/examples/multithread_c'
gcc -DHAVE_CONFIG_H -I. -I../../src    -I../../headers -I../..  -g -O2 -MT multi-multi.o -MD -MP -MF .deps/multi-multi.Tpo -c -o multi-multi.o `test -f 'multi.c' || echo './'`multi.c
multi.c: In function 'main':
multi.c:113:5: error: 'for' loop initial declarations are only allowed in C99 mode
     for (int h = 0; h < FORKS; h++) {
     ^
multi.c:113:5: note: use option -std=c99 or -std=gnu99 to compile your code
make[2]: *** [multi-multi.o] Error 1
make[2]: Leaving directory `/opt/ModSecurity/examples/multithread_c'
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory `/opt/ModSecurity/examples'
make: *** [all-recursive] Error 1",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1143,2016-05-05T17:09:18Z,2016-05-05T18:54:35Z,2016-05-13T18:02:41Z,CLOSED,False,3,2,1,https://github.com/manishmalik,Declaring variable outside the for loop,1,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1143,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1143#issuecomment-217242317,"This patch, fixes the following error while building modsecurity:
make[2]: Entering directory `/opt/ModSecurity/examples/multithread_c'
gcc -DHAVE_CONFIG_H -I. -I../../src    -I../../headers -I../..  -g -O2 -MT multi-multi.o -MD -MP -MF .deps/multi-multi.Tpo -c -o multi-multi.o `test -f 'multi.c' || echo './'`multi.c
multi.c: In function 'main':
multi.c:113:5: error: 'for' loop initial declarations are only allowed in C99 mode
     for (int h = 0; h < FORKS; h++) {
     ^
multi.c:113:5: note: use option -std=c99 or -std=gnu99 to compile your code
make[2]: *** [multi-multi.o] Error 1
make[2]: Leaving directory `/opt/ModSecurity/examples/multithread_c'
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory `/opt/ModSecurity/examples'
make: *** [all-recursive] Error 1","Hi @manishmalik,
Thank you for the pull request! Patch merged!",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1150,2016-05-17T15:03:19Z,2016-11-21T16:29:20Z,2016-11-22T07:59:10Z,CLOSED,False,20,2,3,https://github.com/marcstern,Allow non-unique rule ids and no id,9,[],https://github.com/SpiderLabs/ModSecurity/pull/1150,https://github.com/marcstern,1,https://github.com/SpiderLabs/ModSecurity/pull/1150,Added --enable-not_unique_id (-DALLOW_ID_NOT_UNIQUE compile flag) to allow duplicate rule ids and no id,Added --enable-not_unique_id (-DALLOW_ID_NOT_UNIQUE compile flag) to allow duplicate rule ids and no id,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1150,2016-05-17T15:03:19Z,2016-11-21T16:29:20Z,2016-11-22T07:59:10Z,CLOSED,False,20,2,3,https://github.com/marcstern,Allow non-unique rule ids and no id,9,[],https://github.com/SpiderLabs/ModSecurity/pull/1150,https://github.com/marcstern,2,https://github.com/SpiderLabs/ModSecurity/pull/1150#issuecomment-225563258,Added --enable-not_unique_id (-DALLOW_ID_NOT_UNIQUE compile flag) to allow duplicate rule ids and no id,"Done, waiting for merge",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1150,2016-05-17T15:03:19Z,2016-11-21T16:29:20Z,2016-11-22T07:59:10Z,CLOSED,False,20,2,3,https://github.com/marcstern,Allow non-unique rule ids and no id,9,[],https://github.com/SpiderLabs/ModSecurity/pull/1150,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1150#issuecomment-231783341,Added --enable-not_unique_id (-DALLOW_ID_NOT_UNIQUE compile flag) to allow duplicate rule ids and no id,"Marc, did you saw my last comments?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1150,2016-05-17T15:03:19Z,2016-11-21T16:29:20Z,2016-11-22T07:59:10Z,CLOSED,False,20,2,3,https://github.com/marcstern,Allow non-unique rule ids and no id,9,[],https://github.com/SpiderLabs/ModSecurity/pull/1150,https://github.com/marcstern,4,https://github.com/SpiderLabs/ModSecurity/pull/1150#issuecomment-231950311,Added --enable-not_unique_id (-DALLOW_ID_NOT_UNIQUE compile flag) to allow duplicate rule ids and no id,"Indeed, I missed it :-(
I updated the text",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1150,2016-05-17T15:03:19Z,2016-11-21T16:29:20Z,2016-11-22T07:59:10Z,CLOSED,False,20,2,3,https://github.com/marcstern,Allow non-unique rule ids and no id,9,[],https://github.com/SpiderLabs/ModSecurity/pull/1150,https://github.com/marcstern,5,https://github.com/SpiderLabs/ModSecurity/pull/1150#issuecomment-233304501,Added --enable-not_unique_id (-DALLOW_ID_NOT_UNIQUE compile flag) to allow duplicate rule ids and no id,Is everything OK now?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1150,2016-05-17T15:03:19Z,2016-11-21T16:29:20Z,2016-11-22T07:59:10Z,CLOSED,False,20,2,3,https://github.com/marcstern,Allow non-unique rule ids and no id,9,[],https://github.com/SpiderLabs/ModSecurity/pull/1150,https://github.com/zimmerle,6,https://github.com/SpiderLabs/ModSecurity/pull/1150#issuecomment-252011491,Added --enable-not_unique_id (-DALLOW_ID_NOT_UNIQUE compile flag) to allow duplicate rule ids and no id,"Hi @marcstern,
Sorry for the delay. I am following the manual here and it is not working. As you can see below:
(...)
config.status: creating tests/regression/server_root/conf/httpd.conf
config.status: creating tools/rules-updater.pl
config.status: creating mlogc/Makefile
config.status: creating tests/Makefile
config.status: creating apache2/modsecurity_config_auto.h
config.status: apache2/modsecurity_config_auto.h is unchanged
config.status: executing depfiles commands
config.status: executing libtool commands
configure: WARNING: unrecognized options: --enable-rule-id-validation

The very same for disable:
(...)
config.status: creating tests/regression/server_root/conf/httpd.conf
config.status: creating tools/rules-updater.pl
config.status: creating mlogc/Makefile
config.status: creating tests/Makefile
config.status: creating apache2/modsecurity_config_auto.h
config.status: apache2/modsecurity_config_auto.h is unchanged
config.status: executing depfiles commands
config.status: executing libtool commands
configure: WARNING: unrecognized options: --disable-rule-id-validation

The output of the ./configure --help scripts says:
(...)
  --enable-request-early  Place phase1 into post_read_request hook. default is
                          hook_request_early
  --enable-rule-id-validation
                          Forbid duplicate rule ids and missing ones. This is
                          the default
  --disable-errors        Disable errors during configure.
(...)

Is it working for you?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1150,2016-05-17T15:03:19Z,2016-11-21T16:29:20Z,2016-11-22T07:59:10Z,CLOSED,False,20,2,3,https://github.com/marcstern,Allow non-unique rule ids and no id,9,[],https://github.com/SpiderLabs/ModSecurity/pull/1150,https://github.com/zimmerle,7,https://github.com/SpiderLabs/ModSecurity/pull/1150#issuecomment-252012839,Added --enable-not_unique_id (-DALLOW_ID_NOT_UNIQUE compile flag) to allow duplicate rule ids and no id,"If you need help to fix it, I am on Slack -- https://modsecurity.slack.com/",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1150,2016-05-17T15:03:19Z,2016-11-21T16:29:20Z,2016-11-22T07:59:10Z,CLOSED,False,20,2,3,https://github.com/marcstern,Allow non-unique rule ids and no id,9,[],https://github.com/SpiderLabs/ModSecurity/pull/1150,https://github.com/zimmerle,8,https://github.com/SpiderLabs/ModSecurity/pull/1150#issuecomment-261948667,Added --enable-not_unique_id (-DALLOW_ID_NOT_UNIQUE compile flag) to allow duplicate rule ids and no id,"Hi @marcstern,
For the next patch it will be good if you comment here explaining what you have done. It seems like you have fixed the rule-id-validation, but you also have changed the help message. Here is what we used to have:
(...)
  --enable-rule-id-validation
                          Forbid duplicate rule ids and missing ones. This is
                          the default
(...)

Here is what we have:
(...)
  --enable-rule-id-validation
                          Allow duplicate rule ids and no id. default is to
                          disable that
(...)

So, --enable-rule-id-validation will allow duplicate rules or it will prevent it to happen?
[ I think we discuss that already: https://github.com//pull/1150#discussion-diff-67006937 ]
Independent of the help message, I still not about to make your patch to work. Placing or not placing the option does not take any affect. Did you tested the patch before submit it?
It seems like it is missing $unique_id here: https://github.com/SpiderLabs/ModSecurity/blob/master/configure.ac#L664 ?
I have made the changes that I think is what you wanted to achieve and published it here:
https://github.com/SpiderLabs/ModSecurity/tree/dev/pull_1150
That is currently going over our buildbots. As soon as it is done I will merge it.
If you want to send any other contribution on that same subject, use the tree: dev/pull_1150 as base; Otherwise your tree will be hosting a lot of things unrelated to the patch itself. Try to send a unique commit for each patch, you can use git --amend for that matter, avoiding to send patches of patches.
Thank you for the patch.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1150,2016-05-17T15:03:19Z,2016-11-21T16:29:20Z,2016-11-22T07:59:10Z,CLOSED,False,20,2,3,https://github.com/marcstern,Allow non-unique rule ids and no id,9,[],https://github.com/SpiderLabs/ModSecurity/pull/1150,https://github.com/zimmerle,9,https://github.com/SpiderLabs/ModSecurity/pull/1150#issuecomment-261989072,Added --enable-not_unique_id (-DALLOW_ID_NOT_UNIQUE compile flag) to allow duplicate rule ids and no id,Merged!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1150,2016-05-17T15:03:19Z,2016-11-21T16:29:20Z,2016-11-22T07:59:10Z,CLOSED,False,20,2,3,https://github.com/marcstern,Allow non-unique rule ids and no id,9,[],https://github.com/SpiderLabs/ModSecurity/pull/1150,https://github.com/marcstern,10,https://github.com/SpiderLabs/ModSecurity/pull/1150#issuecomment-262172096,Added --enable-not_unique_id (-DALLOW_ID_NOT_UNIQUE compile flag) to allow duplicate rule ids and no id,Thanks for the fix,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1151,2016-05-17T19:44:56Z,2016-05-18T12:54:05Z,2016-05-18T12:54:06Z,CLOSED,False,1,1,1,https://github.com/manishmalik,"Replacing include subdirectory name, transaction --> collection",1,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1151,https://github.com/manishmalik,1,https://github.com/SpiderLabs/ModSecurity/pull/1151,"Hi!
From what I understood from this commit 5643d2f, its seems like it require some minor change in /src/Makefile.am namely replacing transaction with collection.","Hi!
From what I understood from this commit 5643d2f, its seems like it require some minor change in /src/Makefile.am namely replacing transaction with collection.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1151,2016-05-17T19:44:56Z,2016-05-18T12:54:05Z,2016-05-18T12:54:06Z,CLOSED,False,1,1,1,https://github.com/manishmalik,"Replacing include subdirectory name, transaction --> collection",1,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1151,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1151#issuecomment-220016809,"Hi!
From what I understood from this commit 5643d2f, its seems like it require some minor change in /src/Makefile.am namely replacing transaction with collection.","Hi @manishmalik,
Thank you for the patch! merged!",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1158,2016-06-11T14:57:25Z,2016-06-14T18:20:55Z,2017-08-12T15:13:29Z,CLOSED,False,19,15,2,https://github.com/Whissi,Two small configure fixes,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1158,https://github.com/Whissi,1,https://github.com/SpiderLabs/ModSecurity/pull/1158,Please see the following two small fixes for the configure script. For details please the particular commit message.,Please see the following two small fixes for the configure script. For details please the particular commit message.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1158,2016-06-11T14:57:25Z,2016-06-14T18:20:55Z,2017-08-12T15:13:29Z,CLOSED,False,19,15,2,https://github.com/Whissi,Two small configure fixes,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1158,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1158#issuecomment-225944305,Please see the following two small fixes for the configure script. For details please the particular commit message.,"Hi @Whissi,
Thank you for the patch! I will be looking at it.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1158,2016-06-11T14:57:25Z,2016-06-14T18:20:55Z,2017-08-12T15:13:29Z,CLOSED,False,19,15,2,https://github.com/Whissi,Two small configure fixes,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1158,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1158#issuecomment-225970511,Please see the following two small fixes for the configure script. For details please the particular commit message.,"Hi @Whissi,
Your patch has being merged to our master branch, it will be part of our next release.
Thank you.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1163,2016-06-15T16:17:18Z,2016-06-16T02:13:39Z,2016-06-16T02:13:39Z,CLOSED,False,74,3,5,https://github.com/phantom-az,Add missing 'retrun's for functions declared return value.,4,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1163,https://github.com/phantom-az,1,https://github.com/SpiderLabs/ModSecurity/pull/1163,"This change fixes SIGILLs on executables built with clang 3.4.
Tested against FreeBSD 10.3.","This change fixes SIGILLs on executables built with clang 3.4.
Tested against FreeBSD 10.3.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1163,2016-06-15T16:17:18Z,2016-06-16T02:13:39Z,2016-06-16T02:13:39Z,CLOSED,False,74,3,5,https://github.com/phantom-az,Add missing 'retrun's for functions declared return value.,4,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1163,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1163#issuecomment-226243394,"This change fixes SIGILLs on executables built with clang 3.4.
Tested against FreeBSD 10.3.","Hi @phantom-az,
Thank you for the patches.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1163,2016-06-15T16:17:18Z,2016-06-16T02:13:39Z,2016-06-16T02:13:39Z,CLOSED,False,74,3,5,https://github.com/phantom-az,Add missing 'retrun's for functions declared return value.,4,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1163,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1163#issuecomment-226370930,"This change fixes SIGILLs on executables built with clang 3.4.
Tested against FreeBSD 10.3.","I've merged the commits:

57ad70b
32f22d1
cb91af5

Thanks!",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1164,2016-06-16T13:55:45Z,2016-06-16T17:44:29Z,2016-06-16T17:44:39Z,CLOSED,False,14,9,7,https://github.com/phantom-az,Use internal PCRE based implementation of regular expressions instead of std C++ regex library.,7,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1164,https://github.com/phantom-az,1,https://github.com/SpiderLabs/ModSecurity/pull/1164,With that change d83987c we move from std c++ implementation of regex to custom (pcre driven) version of regex.  Unbreaking unit_test runtime for gcc 4.8 based OSes,With that change d83987c we move from std c++ implementation of regex to custom (pcre driven) version of regex.  Unbreaking unit_test runtime for gcc 4.8 based OSes,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1164,2016-06-16T13:55:45Z,2016-06-16T17:44:29Z,2016-06-16T17:44:39Z,CLOSED,False,14,9,7,https://github.com/phantom-az,Use internal PCRE based implementation of regular expressions instead of std C++ regex library.,7,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1164,https://github.com/phantom-az,2,https://github.com/SpiderLabs/ModSecurity/pull/1164#issuecomment-226531796,With that change d83987c we move from std c++ implementation of regex to custom (pcre driven) version of regex.  Unbreaking unit_test runtime for gcc 4.8 based OSes,"Here's a compilation fix missed on previous merge.  Required to compile multithread_c example on FreeBSD 10 and CentOS 7
aa88fd6",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1164,2016-06-16T13:55:45Z,2016-06-16T17:44:29Z,2016-06-16T17:44:39Z,CLOSED,False,14,9,7,https://github.com/phantom-az,Use internal PCRE based implementation of regular expressions instead of std C++ regex library.,7,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1164,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1164#issuecomment-226559838,With that change d83987c we move from std c++ implementation of regex to custom (pcre driven) version of regex.  Unbreaking unit_test runtime for gcc 4.8 based OSes,Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1171,2016-06-22T23:39:53Z,2016-07-11T16:47:03Z,2016-07-11T16:47:03Z,CLOSED,False,1,1,1,https://github.com/csanders-git,Adapted patch from #977 to fix status failing to report in Nginx auditlogs,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1171,https://github.com/csanders-git,1,https://github.com/SpiderLabs/ModSecurity/pull/1171,Seems to work on both Nginx and Apache. It appears that somewhere along the way msr->status_line became a null terminated string instead of null. Patch from #977  should be merged into master branch :),Seems to work on both Nginx and Apache. It appears that somewhere along the way msr->status_line became a null terminated string instead of null. Patch from #977  should be merged into master branch :),True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1171,2016-06-22T23:39:53Z,2016-07-11T16:47:03Z,2016-07-11T16:47:03Z,CLOSED,False,1,1,1,https://github.com/csanders-git,Adapted patch from #977 to fix status failing to report in Nginx auditlogs,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1171,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1171#issuecomment-231793016,Seems to work on both Nginx and Apache. It appears that somewhere along the way msr->status_line became a null terminated string instead of null. Patch from #977  should be merged into master branch :),"Hi @csanders-git,
Thanks for the patch! It is now merged into our mainline.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1175,2016-06-30T12:10:23Z,2016-06-30T12:48:29Z,2016-06-30T12:48:29Z,CLOSED,False,15,10,8,https://github.com/phantom-az,Unbreak build with custom location of libyajl.so,8,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1175,https://github.com/phantom-az,1,https://github.com/SpiderLabs/ModSecurity/pull/1175,... with that patch c929399,... with that patch c929399,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1175,2016-06-30T12:10:23Z,2016-06-30T12:48:29Z,2016-06-30T12:48:29Z,CLOSED,False,15,10,8,https://github.com/phantom-az,Unbreak build with custom location of libyajl.so,8,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1175,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1175#issuecomment-229648046,... with that patch c929399,merged ;) thanks.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1178,2016-07-04T13:30:03Z,2016-07-05T01:43:16Z,2016-07-05T01:43:16Z,CLOSED,False,6,4,2,https://github.com/phantom-az,couple fixes,11,[],https://github.com/SpiderLabs/ModSecurity/pull/1178,https://github.com/phantom-az,1,https://github.com/SpiderLabs/ModSecurity/pull/1178,"Felipe,
Here's 2 small fixes for libmodsec.
98a12ed
251d1d4","Felipe,
Here's 2 small fixes for libmodsec.
98a12ed
251d1d4",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1178,2016-07-04T13:30:03Z,2016-07-05T01:43:16Z,2016-07-05T01:43:16Z,CLOSED,False,6,4,2,https://github.com/phantom-az,couple fixes,11,[],https://github.com/SpiderLabs/ModSecurity/pull/1178,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1178#issuecomment-230371557,"Felipe,
Here's 2 small fixes for libmodsec.
98a12ed
251d1d4",Thanks ;) Merged!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1179,2016-07-05T09:36:59Z,2016-07-05T14:49:50Z,2016-07-05T14:49:50Z,CLOSED,False,19,6,3,https://github.com/phantom-az,fix verify_cc.cc init() operator,12,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1179,https://github.com/phantom-az,1,https://github.com/SpiderLabs/ModSecurity/pull/1179,phantom-az@2e42015,phantom-az@2e42015,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1179,2016-07-05T09:36:59Z,2016-07-05T14:49:50Z,2016-07-05T14:49:50Z,CLOSED,False,19,6,3,https://github.com/phantom-az,fix verify_cc.cc init() operator,12,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1179,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1179#issuecomment-230500738,phantom-az@2e42015,Merged. thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1180,2016-07-06T05:01:54Z,2016-07-11T14:55:28Z,2016-07-26T11:40:58Z,CLOSED,False,35,3,4,https://github.com/defanator,"preliminary support for ""make dist"" target",5,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1180,https://github.com/defanator,1,https://github.com/SpiderLabs/ModSecurity/pull/1180,"The commits in this request make able to use ""make dist"" target in order to create archive with libmodsecurity sources that can be used later without ""./build.sh"" step.
There are still some unresolved things like the ""BUILT_SOURCES"" defined in the src/Makefile.am which doesn't work: the seclang-parser.cc and seclang-scanner.cc files are coming to the final distdir regardless of the ""BUILT_SOURCES"" value (I have also tried things like ""nodist_*"" for those files, but had no luck). I.e., in the source tree extracted from the archive generated by ""make dist"" command, you have to run ""make clean"" before ""make"" in order to get all the things done.","The commits in this request make able to use ""make dist"" target in order to create archive with libmodsecurity sources that can be used later without ""./build.sh"" step.
There are still some unresolved things like the ""BUILT_SOURCES"" defined in the src/Makefile.am which doesn't work: the seclang-parser.cc and seclang-scanner.cc files are coming to the final distdir regardless of the ""BUILT_SOURCES"" value (I have also tried things like ""nodist_*"" for those files, but had no luck). I.e., in the source tree extracted from the archive generated by ""make dist"" command, you have to run ""make clean"" before ""make"" in order to get all the things done.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1180,2016-07-06T05:01:54Z,2016-07-11T14:55:28Z,2016-07-26T11:40:58Z,CLOSED,False,35,3,4,https://github.com/defanator,"preliminary support for ""make dist"" target",5,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1180,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1180#issuecomment-231759328,"The commits in this request make able to use ""make dist"" target in order to create archive with libmodsecurity sources that can be used later without ""./build.sh"" step.
There are still some unresolved things like the ""BUILT_SOURCES"" defined in the src/Makefile.am which doesn't work: the seclang-parser.cc and seclang-scanner.cc files are coming to the final distdir regardless of the ""BUILT_SOURCES"" value (I have also tried things like ""nodist_*"" for those files, but had no luck). I.e., in the source tree extracted from the archive generated by ""make dist"" command, you have to run ""make clean"" before ""make"" in order to get all the things done.","Hi @defanator,
Thank you for the patch! :)
We may want to run flex and bison before create the .tar.gz but that is a good starting point!
Thank you. It is merged already.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1181,2016-07-06T18:40:29Z,2016-07-11T16:08:54Z,2016-07-11T16:08:54Z,CLOSED,False,2,0,1,https://github.com/p0pr0ck5,Fix file upload JSON audit log entry,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1181,https://github.com/p0pr0ck5,1,https://github.com/SpiderLabs/ModSecurity/pull/1181,"Each uploaded file is a separate yajl array, but we forgot to open
the a map for the proper k/v pairs.
This fixes issue #1173.","Each uploaded file is a separate yajl array, but we forgot to open
the a map for the proper k/v pairs.
This fixes issue #1173.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1181,2016-07-06T18:40:29Z,2016-07-11T16:08:54Z,2016-07-11T16:08:54Z,CLOSED,False,2,0,1,https://github.com/p0pr0ck5,Fix file upload JSON audit log entry,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1181,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1181#issuecomment-231782208,"Each uploaded file is a separate yajl array, but we forgot to open
the a map for the proper k/v pairs.
This fixes issue #1173.",Thanks @p0pr0ck5  and @dune73. Merged!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1186,2016-07-12T17:03:22Z,2016-07-13T01:07:29Z,2016-07-13T01:07:29Z,CLOSED,False,3,1,1,https://github.com/manishmalik,Declaring variable outside the for loop,1,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1186,https://github.com/manishmalik,1,https://github.com/SpiderLabs/ModSecurity/pull/1186,"Hi,
This PR fixes the minor compile errors that I was getting while building libmodsecurity. I was getting the following error:
make[2]: Entering directory `/opt/ModSecurity/examples/multiprocess_c'
gcc -DHAVE_CONFIG_H -I. -I../../src    -I../../headers -I../..  -g -O2 -MT multi-multi.o -MD -MP -MF .deps/multi-multi.Tpo -c -o multi-multi.o `test -f 'multi.c' || echo './'`multi.c
multi.c: In function ‘process_request’:
multi.c:53:5: error: ‘for’ loop initial declarations are only allowed in C99 mode
     for (int i = 0; i < REQUESTS_PER_PROCESS; i++) {
     ^
multi.c:53:5: note: use option -std=c99 or -std=gnu99 to compile your code
make[2]: *** [multi-multi.o] Error 1
make[2]: Leaving directory `/opt/ModSecurity/examples/multiprocess_c'
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory `/opt/ModSecurity/examples'
make: *** [all-recursive] Error 1","Hi,
This PR fixes the minor compile errors that I was getting while building libmodsecurity. I was getting the following error:
make[2]: Entering directory `/opt/ModSecurity/examples/multiprocess_c'
gcc -DHAVE_CONFIG_H -I. -I../../src    -I../../headers -I../..  -g -O2 -MT multi-multi.o -MD -MP -MF .deps/multi-multi.Tpo -c -o multi-multi.o `test -f 'multi.c' || echo './'`multi.c
multi.c: In function ‘process_request’:
multi.c:53:5: error: ‘for’ loop initial declarations are only allowed in C99 mode
     for (int i = 0; i < REQUESTS_PER_PROCESS; i++) {
     ^
multi.c:53:5: note: use option -std=c99 or -std=gnu99 to compile your code
make[2]: *** [multi-multi.o] Error 1
make[2]: Leaving directory `/opt/ModSecurity/examples/multiprocess_c'
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory `/opt/ModSecurity/examples'
make: *** [all-recursive] Error 1",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1186,2016-07-12T17:03:22Z,2016-07-13T01:07:29Z,2016-07-13T01:07:29Z,CLOSED,False,3,1,1,https://github.com/manishmalik,Declaring variable outside the for loop,1,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1186,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1186#issuecomment-232227151,"Hi,
This PR fixes the minor compile errors that I was getting while building libmodsecurity. I was getting the following error:
make[2]: Entering directory `/opt/ModSecurity/examples/multiprocess_c'
gcc -DHAVE_CONFIG_H -I. -I../../src    -I../../headers -I../..  -g -O2 -MT multi-multi.o -MD -MP -MF .deps/multi-multi.Tpo -c -o multi-multi.o `test -f 'multi.c' || echo './'`multi.c
multi.c: In function ‘process_request’:
multi.c:53:5: error: ‘for’ loop initial declarations are only allowed in C99 mode
     for (int i = 0; i < REQUESTS_PER_PROCESS; i++) {
     ^
multi.c:53:5: note: use option -std=c99 or -std=gnu99 to compile your code
make[2]: *** [multi-multi.o] Error 1
make[2]: Leaving directory `/opt/ModSecurity/examples/multiprocess_c'
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory `/opt/ModSecurity/examples'
make: *** [all-recursive] Error 1","Hi @manishmalik,
Thank you for the patch! Merged!",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1187,2016-07-13T17:01:03Z,2016-07-14T00:24:35Z,2016-07-14T00:24:35Z,CLOSED,False,2,1,1,https://github.com/p0pr0ck5,Fix multi-process example,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1187,https://github.com/p0pr0ck5,1,https://github.com/SpiderLabs/ModSecurity/pull/1187,for loop initial declarations are only allowed in C99 mode,for loop initial declarations are only allowed in C99 mode,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1187,2016-07-13T17:01:03Z,2016-07-14T00:24:35Z,2016-07-14T00:24:35Z,CLOSED,False,2,1,1,https://github.com/p0pr0ck5,Fix multi-process example,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1187,https://github.com/manishmalik,2,https://github.com/SpiderLabs/ModSecurity/pull/1187#issuecomment-232421017,for loop initial declarations are only allowed in C99 mode,I think this patch is already merged isn't it ?  @zimmerle ? #1186,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1187,2016-07-13T17:01:03Z,2016-07-14T00:24:35Z,2016-07-14T00:24:35Z,CLOSED,False,2,1,1,https://github.com/p0pr0ck5,Fix multi-process example,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1187,https://github.com/p0pr0ck5,3,https://github.com/SpiderLabs/ModSecurity/pull/1187#issuecomment-232427980,for loop initial declarations are only allowed in C99 mode,Maybe he forgot to hit 'merge'? ;) It's still broken on https://github.com/SpiderLabs/ModSecurity/blob/libmodsecurity/examples/multiprocess_c/multi.c,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1187,2016-07-13T17:01:03Z,2016-07-14T00:24:35Z,2016-07-14T00:24:35Z,CLOSED,False,2,1,1,https://github.com/p0pr0ck5,Fix multi-process example,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1187,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1187#issuecomment-232524473,for loop initial declarations are only allowed in C99 mode,Sorry guys I made the merge locally and did not pushed to the main repository. It is now published.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1190,2016-07-19T16:09:46Z,2016-10-04T16:22:04Z,2016-10-04T16:22:04Z,CLOSED,False,0,27,1,https://github.com/p0pr0ck5,Remove logdata and msg fields from JSON audit log rule elements,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1190,https://github.com/p0pr0ck5,1,https://github.com/SpiderLabs/ModSecurity/pull/1190,"Writing macro-expanded strings to JSON elements during the post-logging
phase can be misleading, because it's possible that variable contents
(such as MATCHED_VAR) could have changed after the rule match, altering
their expected contents. Writing macro-epanded audit data really only
makes sense when the macros are expanded immediately following the
rule match. See issue #1174 for more details.","Writing macro-expanded strings to JSON elements during the post-logging
phase can be misleading, because it's possible that variable contents
(such as MATCHED_VAR) could have changed after the rule match, altering
their expected contents. Writing macro-epanded audit data really only
makes sense when the macros are expanded immediately following the
rule match. See issue #1174 for more details.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1190,2016-07-19T16:09:46Z,2016-10-04T16:22:04Z,2016-10-04T16:22:04Z,CLOSED,False,0,27,1,https://github.com/p0pr0ck5,Remove logdata and msg fields from JSON audit log rule elements,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1190,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1190#issuecomment-251438085,"Writing macro-expanded strings to JSON elements during the post-logging
phase can be misleading, because it's possible that variable contents
(such as MATCHED_VAR) could have changed after the rule match, altering
their expected contents. Writing macro-epanded audit data really only
makes sense when the macros are expanded immediately following the
rule match. See issue #1174 for more details.",Merged.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1200,2016-08-08T12:22:12Z,2016-08-16T23:03:30Z,2016-11-01T08:54:27Z,CLOSED,False,1,0,1,https://github.com/defanator,Include pre-generated parser sources into the distribution,1,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1200,https://github.com/defanator,1,https://github.com/SpiderLabs/ModSecurity/pull/1200,"This patch addresses an issue that has not been resolved here:
#1180
It allows to produce fully prepared source archive using the ""make dist"" target.","This patch addresses an issue that has not been resolved here:
#1180
It allows to produce fully prepared source archive using the ""make dist"" target.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1200,2016-08-08T12:22:12Z,2016-08-16T23:03:30Z,2016-11-01T08:54:27Z,CLOSED,False,1,0,1,https://github.com/defanator,Include pre-generated parser sources into the distribution,1,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1200,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1200#issuecomment-240266233,"This patch addresses an issue that has not been resolved here:
#1180
It allows to produce fully prepared source archive using the ""make dist"" target.","Hi @defanator
thank you for the patch. Merged.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1204,2016-08-28T15:11:32Z,2016-09-21T04:34:13Z,2016-09-21T04:34:13Z,CLOSED,False,5,1,1,https://github.com/eff7,json parser handle cleanup,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1204,https://github.com/eff7,1,https://github.com/SpiderLabs/ModSecurity/pull/1204,"free the json parser handle that was allocated using yajl_alloc
fixes #1201","free the json parser handle that was allocated using yajl_alloc
fixes #1201",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1204,2016-08-28T15:11:32Z,2016-09-21T04:34:13Z,2016-09-21T04:34:13Z,CLOSED,False,5,1,1,https://github.com/eff7,json parser handle cleanup,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1204,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1204#issuecomment-243423479,"free the json parser handle that was allocated using yajl_alloc
fixes #1201","Hi @eff7,
Thanks for the patch!
What is your name? (To be used in the credits: https://github.com/SpiderLabs/ModSecurity/blob/master/CHANGES#L4-L5)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1204,2016-08-28T15:11:32Z,2016-09-21T04:34:13Z,2016-09-21T04:34:13Z,CLOSED,False,5,1,1,https://github.com/eff7,json parser handle cleanup,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1204,https://github.com/eff7,3,https://github.com/SpiderLabs/ModSecurity/pull/1204#issuecomment-243484721,"free the json parser handle that was allocated using yajl_alloc
fixes #1201",@zimmerle  My name is Ephraim Vider,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1204,2016-08-28T15:11:32Z,2016-09-21T04:34:13Z,2016-09-21T04:34:13Z,CLOSED,False,5,1,1,https://github.com/eff7,json parser handle cleanup,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1204,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1204#issuecomment-248509208,"free the json parser handle that was allocated using yajl_alloc
fixes #1201",Merged into our master branch!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1213,2016-09-20T13:05:11Z,2016-09-26T17:51:16Z,2016-11-01T08:54:24Z,CLOSED,False,47,2,3,https://github.com/defanator,Optional JIT support in PCRE,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1213,https://github.com/defanator,1,https://github.com/SpiderLabs/ModSecurity/pull/1213,May be useful for everyone who's attempting to build libmodsecurity on systems with pcre < 8.20 (such as RHEL/CentOS/OEL 6.x).,May be useful for everyone who's attempting to build libmodsecurity on systems with pcre < 8.20 (such as RHEL/CentOS/OEL 6.x).,True,{'HEART': ['https://github.com/emphazer']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1213,2016-09-20T13:05:11Z,2016-09-26T17:51:16Z,2016-11-01T08:54:24Z,CLOSED,False,47,2,3,https://github.com/defanator,Optional JIT support in PCRE,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1213,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1213#issuecomment-249644546,May be useful for everyone who's attempting to build libmodsecurity on systems with pcre < 8.20 (such as RHEL/CentOS/OEL 6.x).,Merged! thank you.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1216,2016-09-26T10:06:22Z,2016-10-10T12:53:40Z,2016-10-10T18:40:58Z,CLOSED,False,1,1,1,https://github.com/arminabf,fix error message,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1216,https://github.com/arminabf,1,https://github.com/SpiderLabs/ModSecurity/pull/1216,info->format contains the error message format but not the actual formatted error message,info->format contains the error message format but not the actual formatted error message,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1216,2016-09-26T10:06:22Z,2016-10-10T12:53:40Z,2016-10-10T18:40:58Z,CLOSED,False,1,1,1,https://github.com/arminabf,fix error message,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1216,https://github.com/arminabf,2,https://github.com/SpiderLabs/ModSecurity/pull/1216#issuecomment-249530798,info->format contains the error message format but not the actual formatted error message,see reported issue #1073,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1216,2016-09-26T10:06:22Z,2016-10-10T12:53:40Z,2016-10-10T18:40:58Z,CLOSED,False,1,1,1,https://github.com/arminabf,fix error message,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1216,https://github.com/dune73,3,https://github.com/SpiderLabs/ModSecurity/pull/1216#issuecomment-249776355,info->format contains the error message format but not the actual formatted error message,"Tried out the patch, but the error is still around. Apache 2.4.23, ModSec 2.9.1,
$> cat apache2/mod_security2.c | grep ""= apr_pstrdup(msr->mp, errstr""
    em->message = apr_pstrdup(msr->mp, errstr);

then configured, built and installed as a new module. Loaded correctly and tested with ""curl localhost -d ""p=/etc/passwd"" results in this audit-log:
Message: Warning. Matched phrase ""/etc/passwd"" at ARGS:test. [file ""/apache/conf/owasp-modsecurity-crs-3.0.0-rc1/rules/REQUEST-930-APPLICATION-ATTACK-LFI.conf""] [line ""108""] [id ""930120""] [rev ""4""] [msg ""OS File Access Attempt""] [data ""Matched Data: /etc/passwd found within ARGS:test: /etc/passwd""] [severity ""CRITICAL""] [ver ""OWASP_CRS/3.0.0""] [maturity ""9""] [accuracy ""9""] [tag ""application-multi""] [tag ""language-multi""] [tag ""platform-multi""] [tag ""attack-lfi""] [tag ""OWASP_CRS/WEB_ATTACK/FILE_INJECTION""] [tag ""WASCTC/WASC-33""] [tag ""OWASP_TOP_10/A4""] [tag ""PCI/6.5.4""]
Message: Warning. Matched phrase ""/etc/passwd"" at ARGS:test. [file ""/apache/conf/owasp-modsecurity-crs-3.0.0-rc1/rules/REQUEST-932-APPLICATION-ATTACK-RCE.conf""] [line ""366""] [id ""932160""] [rev ""1""] [msg ""Remote Command Execution: Unix Shell Code Found""] [data ""Matched Data: /etc/passwd found within ARGS:test: /etc/passwd""] [severity ""CRITICAL""] [ver ""OWASP_CRS/3.0.0""] [maturity ""1""] [accuracy ""8""] [tag ""application-multi""] [tag ""language-shell""] [tag ""platform-unix""] [tag ""attack-rce""] [tag ""OWASP_CRS/WEB_ATTACK/COMMAND_INJECTION""] [tag ""WASCTC/WASC-31""] [tag ""OWASP_TOP_10/A1""] [tag ""PCI/6.5.2""]
Apache-Error: [file ""mod_authz_core.c""] [line 809] [level 7] AH01626: authorization result of %s: %s
Apache-Error: [file ""mod_authz_core.c""] [line 809] [level 7] AH01626: authorization result of %s: %s
Apache-Error: [file ""mod_authz_core.c""] [line 809] [level 7] AH01626: authorization result of %s: %s
Apache-Error: [file ""apache2_util.c""] [line 271] [level 3] [client %s] ModSecurity: %s%s [uri ""%s""]%s
Apache-Error: [file ""apache2_util.c""] [line 271] [level 3] [client %s] ModSecurity: %s%s [uri ""%s""]%s

The error log says:
[2016-09-27 08:18:51.858628] [authz_core:debug] 127.0.0.1:50188 V@oPS38AAQEAAGnc5v4AAAAA AH01626: authorization result of Require all granted: granted
[2016-09-27 08:18:51.858667] [authz_core:debug] 127.0.0.1:50188 V@oPS38AAQEAAGnc5v4AAAAA AH01626: authorization result of <RequireAll>: granted
[2016-09-27 08:18:51.858693] [authz_core:debug] 127.0.0.1:50188 V@oPS38AAQEAAGnc5v4AAAAA AH01626: authorization result of <RequireAny>: granted
[2016-09-27 08:18:51.881568] [-:error] 127.0.0.1:50188 V@oPS38AAQEAAGnc5v4AAAAA [client 127.0.0.1] ModSecurity: Warning. Matched phrase ""/etc/passwd"" at ARGS:test. [file ""/apache/conf/owasp-modsecurity-crs-3.0.0-rc1/rules/REQUEST-930-APPLICATION-ATTACK-LFI.conf""] [line ""108""] [id ""930120""] [rev ""4""] [msg ""OS File Access Attempt""] [data ""Matched Data: /etc/passwd found within ARGS:test: /etc/passwd""] [severity ""CRITICAL""] [ver ""OWASP_CRS/3.0.0""] [maturity ""9""] [accuracy ""9""] [tag ""application-multi""] [tag ""language-multi""] [tag ""platform-multi""] [tag ""attack-lfi""] [tag ""OWASP_CRS/WEB_ATTACK/FILE_INJECTION""] [tag ""WASCTC/WASC-33""] [tag ""OWASP_TOP_10/A4""] [tag ""PCI/6.5.4""] [hostname ""localhost""] [uri ""/index.html""] [unique_id ""V@oPS38AAQEAAGnc5v4AAAAA""]
[2016-09-27 08:18:51.886975] [-:error] 127.0.0.1:50188 V@oPS38AAQEAAGnc5v4AAAAA [client 127.0.0.1] ModSecurity: Warning. Matched phrase ""/etc/passwd"" at ARGS:test. [file ""/apache/conf/owasp-modsecurity-crs-3.0.0-rc1/rules/REQUEST-932-APPLICATION-ATTACK-RCE.conf""] [line ""366""] [id ""932160""] [rev ""1""] [msg ""Remote Command Execution: Unix Shell Code Found""] [data ""Matched Data: /etc/passwd found within ARGS:test: /etc/passwd""] [severity ""CRITICAL""] [ver ""OWASP_CRS/3.0.0""] [maturity ""1""] [accuracy ""8""] [tag ""application-multi""] [tag ""language-shell""] [tag ""platform-unix""] [tag ""attack-rce""] [tag ""OWASP_CRS/WEB_ATTACK/COMMAND_INJECTION""] [tag ""WASCTC/WASC-31""] [tag ""OWASP_TOP_10/A1""] [tag ""PCI/6.5.2""] [hostname ""localhost""] [uri ""/index.html""] [unique_id ""V@oPS38AAQEAAGnc5v4AAAAA""]


What am I doing wrong?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1216,2016-09-26T10:06:22Z,2016-10-10T12:53:40Z,2016-10-10T18:40:58Z,CLOSED,False,1,1,1,https://github.com/arminabf,fix error message,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1216,https://github.com/arminabf,4,https://github.com/SpiderLabs/ModSecurity/pull/1216#issuecomment-250160856,info->format contains the error message format but not the actual formatted error message,"@dune73: I've tried to reproduce your setup and testing
Without patch I see following errors in the audit log
Apache-Error: [file ""apache2_util.c""] [line 271] [level 3] [client %s] ModSecurity: %s%s [uri ""%s""]%s
Apache-Error: [file ""apache2_util.c""] [line 271] [level 3] [client %s] ModSecurity: %s%s [uri ""%s""]%s
Apache-Error: [file ""apache2_util.c""] [line 271] [level 3] [client %s] ModSecurity: %s%s [uri ""%s""]%s
Apache-Error: [file ""apache2_util.c""] [line 271] [level 3] [client %s] ModSecurity: %s%s [uri ""%s""]%s
Apache-Error: [file ""apache2_util.c""] [line 271] [level 3] [client %s] ModSecurity: %s%s [uri ""%s""]%s

When I apply the patch I get following
Apache-Error: [file ""apache2_util.c""] [line 271] [level 3] [client 127.0.13.37] ModSecurity: Warning. Operator EQ matched 0 at TX. [file ""/home/arminabf/modsecurity-rules/owasp-crs/3.0.0/REQUEST-901-INITIALIZATION.conf""] [line ""56""] [id ""901001""] [msg ""ModSecurity Core Rules setup file has not been detected. Threat detection and blocking may be nonfunctional. Please ensure to make a copy of the setup template crs-setup.conf.example, and include your crs-setup.conf file in your webserver configuration before including the CRS rules.""] [severity ""WARNING""] [hostname ""host""] [uri ""/owasp""] [unique_id ""V@u@5QoAAwYAAEOwTukAAAAA""]
Apache-Error: [file ""apache2_util.c""] [line 271] [level 3] [client 127.0.13.37] ModSecurity: Warning. Matched phrase ""/etc/passwd"" at ARGS:p. [file ""/home/arminabf/modsecurity-rules/owasp-crs/3.0.0/REQUEST-930-APPLICATION-ATTACK-LFI.conf""] [line ""108""] [id ""930120""] [rev ""4""] [msg ""OS File Access Attempt""] [data ""Matched Data: /etc/passwd found within ARGS:p: /etc/passwd""] [severity ""CRITICAL""] [ver ""OWASP_CRS/3.0.0""] [maturity ""9""] [accuracy ""9""] [tag ""application-multi""] [tag ""language-multi""] [tag ""platform-multi""] [tag ""attack-lfi""] [tag ""OWASP_CRS/WEB_ATTACK/FILE_INJECTION""] [tag ""WASCTC/WASC-33""] [tag ""OWASP_TOP_10/A4""] [tag ""PCI/6.5.4""] [hostname ""host""] [uri ""/owasp""] [unique_id ""V@u@5QoAAwYAAEOwTukAAAAA""]
Apache-Error: [file ""apache2_util.c""] [line 271] [level 3] [client 127.0.13.37] ModSecurity: Warning. Matched phrase ""/etc/passwd"" at ARGS:p. [file ""/home/arminabf/modsecurity-rules/owasp-crs/3.0.0/REQUEST-932-APPLICATION-ATTACK-RCE.conf""] [line ""366""] [id ""932160""] [rev ""1""] [msg ""Remote Command Execution: Unix Shell Code Found""] [data ""Matched Data: /etc/passwd found within ARGS:p: /etc/passwd""] [severity ""CRITICAL""] [ver ""OWASP_CRS/3.0.0""] [maturity ""1""] [accuracy ""8""] [tag ""application-multi""] [tag ""language-shell""] [tag ""platform-unix""] [tag ""attack-rce""] [tag ""OWASP_CRS/WEB_ATTACK/COMMAND_INJECTION""] [tag ""WASCTC/WASC-31""] [tag ""OWASP_TOP_10/A1""] [tag ""PCI/6.5.2""] [hostname ""host""] [uri ""/owasp""] [unique_id ""V@u@5QoAAwYAAEOwTukAAAAA""]
Apache-Error: [file ""apache2_util.c""] [line 271] [level 3] [client 127.0.13.37] ModSecurity: Access denied with code 403 (phase 2). Operator GE matched 5 at TX:anomaly_score. [file ""/home/arminabf/modsecurity-rules/owasp-crs/3.0.0/REQUEST-949-BLOCKING-EVALUATION.conf""] [line ""53""] [id ""949110""] [msg ""Inbound Anomaly Score Exceeded (Total Score: 10)""] [severity ""CRITICAL""] [tag ""application-multi""] [tag ""language-multi""] [tag ""platform-multi""] [tag ""attack-generic""] [hostname ""host""] [uri ""/owasp""] [unique_id ""V@u@5QoAAwYAAEOwTukAAAAA""]
Apache-Error: [file ""apache2_util.c""] [line 271] [level 3] [client 127.0.13.37] ModSecurity: Warning. Operator GE matched 5 at TX:inbound_anomaly_score. [file ""/home/arminabf/modsecurity-rules/owasp-crs/3.0.0/RESPONSE-980-CORRELATION.conf""] [line ""73""] [id ""980130""] [msg ""Inbound Anomaly Score Exceeded (Total Inbound Score: 10 - SQLI=0,XSS=0,RFI=0,LFI=5,RCE=5,PHPI=0,HTTP=0,SESS=0): Remote Command Execution: Unix Shell Code Found""] [tag ""event-correlation""] [hostname ""host""] [uri ""/owasp""] [unique_id ""V@u@5QoAAwYAAEOwTukAAAAA""]
Action: Intercepted (phase 2)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1216,2016-09-26T10:06:22Z,2016-10-10T12:53:40Z,2016-10-10T18:40:58Z,CLOSED,False,1,1,1,https://github.com/arminabf,fix error message,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1216,https://github.com/marcstern,5,https://github.com/SpiderLabs/ModSecurity/pull/1216#issuecomment-250462181,info->format contains the error message format but not the actual formatted error message,works for me also on httpd 2.4.23,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1216,2016-09-26T10:06:22Z,2016-10-10T12:53:40Z,2016-10-10T18:40:58Z,CLOSED,False,1,1,1,https://github.com/arminabf,fix error message,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1216,https://github.com/dune73,6,https://github.com/SpiderLabs/ModSecurity/pull/1216#issuecomment-250463664,info->format contains the error message format but not the actual formatted error message,Hmm. I need to start over from scratch. Thank you guys.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1216,2016-09-26T10:06:22Z,2016-10-10T12:53:40Z,2016-10-10T18:40:58Z,CLOSED,False,1,1,1,https://github.com/arminabf,fix error message,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1216,https://github.com/arminabf,7,https://github.com/SpiderLabs/ModSecurity/pull/1216#issuecomment-251671231,info->format contains the error message format but not the actual formatted error message,many thanks for testing @marcstern,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1216,2016-09-26T10:06:22Z,2016-10-10T12:53:40Z,2016-10-10T18:40:58Z,CLOSED,False,1,1,1,https://github.com/arminabf,fix error message,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1216,https://github.com/dune73,8,https://github.com/SpiderLabs/ModSecurity/pull/1216#issuecomment-252148991,info->format contains the error message format but not the actual formatted error message,"I still do not know what shit I did when I first tested this, but I have now started over from scratch (hat tip to @zimmerle for the ping) and I can confirm: patch works as advertised. Thank you @arminabf.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1216,2016-09-26T10:06:22Z,2016-10-10T12:53:40Z,2016-10-10T18:40:58Z,CLOSED,False,1,1,1,https://github.com/arminabf,fix error message,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1216,https://github.com/zimmerle,9,https://github.com/SpiderLabs/ModSecurity/pull/1216#issuecomment-252610176,info->format contains the error message format but not the actual formatted error message,"Thank you @dune73, @marcstern and @arminabf ! Patch is merged.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1220,2016-09-30T11:01:02Z,2016-10-05T17:14:25Z,2017-07-24T18:41:51Z,CLOSED,False,11,1,1,https://github.com/culyerr,Remove port from IPV4 address when running under IIS,4,['RIP - release-2.9.2'],https://github.com/SpiderLabs/ModSecurity/pull/1220,https://github.com/culyerr,1,https://github.com/SpiderLabs/ModSecurity/pull/1220,"Relates to #1109 - IPV4+Port evaluated as malformed IPv6 address.
Rework of previous PR - code moved into IIS Module.","Relates to #1109 - IPV4+Port evaluated as malformed IPv6 address.
Rework of previous PR - code moved into IIS Module.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1220,2016-09-30T11:01:02Z,2016-10-05T17:14:25Z,2017-07-24T18:41:51Z,CLOSED,False,11,1,1,https://github.com/culyerr,Remove port from IPV4 address when running under IIS,4,['RIP - release-2.9.2'],https://github.com/SpiderLabs/ModSecurity/pull/1220,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1220#issuecomment-251108709,"Relates to #1109 - IPV4+Port evaluated as malformed IPv6 address.
Rework of previous PR - code moved into IIS Module.","Hi @culyerr,
Thank you for the patch! Just to confirm, the only piece to be merged is the commit: 20dec1c, is that right?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1220,2016-09-30T11:01:02Z,2016-10-05T17:14:25Z,2017-07-24T18:41:51Z,CLOSED,False,11,1,1,https://github.com/culyerr,Remove port from IPV4 address when running under IIS,4,['RIP - release-2.9.2'],https://github.com/SpiderLabs/ModSecurity/pull/1220,https://github.com/culyerr,3,https://github.com/SpiderLabs/ModSecurity/pull/1220#issuecomment-251110030,"Relates to #1109 - IPV4+Port evaluated as malformed IPv6 address.
Rework of previous PR - code moved into IIS Module.","Hi Felipe,
Yes that is correct.
Cheers,
Robert
On Mon, Oct 3, 2016 at 2:43 PM, Felipe Zimmerle notifications@github.com
wrote:

Hi @culyerr https://github.com/culyerr,
Thank you for the patch! Just to confirm, the only piece to be merged is
the commit: 20dec1c
20dec1c,
is that right?
—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub
#1220 (comment),
or mute the thread
https://github.com/notifications/unsubscribe-auth/AKTqSyiIrNZgfkukytmx6L5h-TFydlW_ks5qwQZ3gaJpZM4KK-HV
.


Robert Culyer
Actus Mobile
Sentinel House, Harvest Crescent, Fleet, Hampshire, GU51 2UZ, UK
44 (0) 7834 192906",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1220,2016-09-30T11:01:02Z,2016-10-05T17:14:25Z,2017-07-24T18:41:51Z,CLOSED,False,11,1,1,https://github.com/culyerr,Remove port from IPV4 address when running under IIS,4,['RIP - release-2.9.2'],https://github.com/SpiderLabs/ModSecurity/pull/1220,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1220#issuecomment-251738423,"Relates to #1109 - IPV4+Port evaluated as malformed IPv6 address.
Rework of previous PR - code moved into IIS Module.",Thank you @culyerr. Your patch was merged.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1220,2016-09-30T11:01:02Z,2016-10-05T17:14:25Z,2017-07-24T18:41:51Z,CLOSED,False,11,1,1,https://github.com/culyerr,Remove port from IPV4 address when running under IIS,4,['RIP - release-2.9.2'],https://github.com/SpiderLabs/ModSecurity/pull/1220,https://github.com/itrade-it,5,https://github.com/SpiderLabs/ModSecurity/pull/1220#issuecomment-296432267,"Relates to #1109 - IPV4+Port evaluated as malformed IPv6 address.
Rework of previous PR - code moved into IIS Module.","Hi @zimmerle,
can you explain how can I edit my IIS modsecurity release-2.9.1 installation with this patch?
Or can you give me some idea about IIS modsecurity release-2.9.2 will be available?
Thank you all very much for your effort.
Regards.
Francesco",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1220,2016-09-30T11:01:02Z,2016-10-05T17:14:25Z,2017-07-24T18:41:51Z,CLOSED,False,11,1,1,https://github.com/culyerr,Remove port from IPV4 address when running under IIS,4,['RIP - release-2.9.2'],https://github.com/SpiderLabs/ModSecurity/pull/1220,https://github.com/davidjrh,6,https://github.com/SpiderLabs/ModSecurity/pull/1220#issuecomment-308261842,"Relates to #1109 - IPV4+Port evaluated as malformed IPv6 address.
Rework of previous PR - code moved into IIS Module.","Yeah, just having the same issue. Seems we will need to build our own patched version until the 2.9.2 release
EDIT: after spending several hours following the howtos, trying to have the same setup, etc. I surrender...I will give another try tomorrow :(
EDIT 2:
Ok, with the help of @cesarab we got the build working using the VS 2017 runtime. The fix seems to work.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1220,2016-09-30T11:01:02Z,2016-10-05T17:14:25Z,2017-07-24T18:41:51Z,CLOSED,False,11,1,1,https://github.com/culyerr,Remove port from IPV4 address when running under IIS,4,['RIP - release-2.9.2'],https://github.com/SpiderLabs/ModSecurity/pull/1220,https://github.com/zimmerle,7,https://github.com/SpiderLabs/ModSecurity/pull/1220#issuecomment-317516606,"Relates to #1109 - IPV4+Port evaluated as malformed IPv6 address.
Rework of previous PR - code moved into IIS Module.",2.9.2 is out there :) it already includes this patch.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1223,2016-10-04T22:52:03Z,2016-10-10T15:34:57Z,2016-10-10T15:34:57Z,CLOSED,False,12,0,2,https://github.com/p0pr0ck5,Don't unnecessarily rename request body parts in cleanup,3,[],https://github.com/SpiderLabs/ModSecurity/pull/1223,https://github.com/p0pr0ck5,1,https://github.com/SpiderLabs/ModSecurity/pull/1223,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1223,2016-10-04T22:52:03Z,2016-10-10T15:34:57Z,2016-10-10T15:34:57Z,CLOSED,False,12,0,2,https://github.com/p0pr0ck5,Don't unnecessarily rename request body parts in cleanup,3,[],https://github.com/SpiderLabs/ModSecurity/pull/1223,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1223#issuecomment-252658178,,"Merged at v2/master ;)
Thanks!",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1224,2016-10-06T11:18:41Z,2017-05-21T14:06:19Z,2017-05-21T14:06:19Z,CLOSED,False,69,22,3,https://github.com/mturk,Use global mutex instead file lock to fix issues with threaded mpm's,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1224,https://github.com/mturk,1,https://github.com/SpiderLabs/ModSecurity/pull/1224,"Patch fixes persistent storage data corruption issues with threaded mpm's for Apache Httpd. Reason for that is because the persistent storage locking is based on SDBM file locking mechanism which works only across process boundaries thus making threaded mpm's like worker or event unsafe.
Instead file lock, the patch uses global mutex which is both process and thread safe.
We have observed this issue with
https://issues.jboss.org/browse/JWS-489","Patch fixes persistent storage data corruption issues with threaded mpm's for Apache Httpd. Reason for that is because the persistent storage locking is based on SDBM file locking mechanism which works only across process boundaries thus making threaded mpm's like worker or event unsafe.
Instead file lock, the patch uses global mutex which is both process and thread safe.
We have observed this issue with
https://issues.jboss.org/browse/JWS-489",True,"{'THUMBS_UP': ['https://github.com/Karm', 'https://github.com/bostrt', 'https://github.com/sebi-hgdata', 'https://github.com/csutherl']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1224,2016-10-06T11:18:41Z,2017-05-21T14:06:19Z,2017-05-21T14:06:19Z,CLOSED,False,69,22,3,https://github.com/mturk,Use global mutex instead file lock to fix issues with threaded mpm's,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1224,https://github.com/dkopecek,2,https://github.com/SpiderLabs/ModSecurity/pull/1224#issuecomment-295615009,"Patch fixes persistent storage data corruption issues with threaded mpm's for Apache Httpd. Reason for that is because the persistent storage locking is based on SDBM file locking mechanism which works only across process boundaries thus making threaded mpm's like worker or event unsafe.
Instead file lock, the patch uses global mutex which is both process and thread safe.
We have observed this issue with
https://issues.jboss.org/browse/JWS-489",Any plans to merge or close this PR?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1224,2016-10-06T11:18:41Z,2017-05-21T14:06:19Z,2017-05-21T14:06:19Z,CLOSED,False,69,22,3,https://github.com/mturk,Use global mutex instead file lock to fix issues with threaded mpm's,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1224,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1224#issuecomment-295698292,"Patch fixes persistent storage data corruption issues with threaded mpm's for Apache Httpd. Reason for that is because the persistent storage locking is based on SDBM file locking mechanism which works only across process boundaries thus making threaded mpm's like worker or event unsafe.
Instead file lock, the patch uses global mutex which is both process and thread safe.
We have observed this issue with
https://issues.jboss.org/browse/JWS-489","Hi @dkopecek,
Are you using this pull request? did you notice any performance impact in terms of throughput and latency?
@mturk: I am afraid that this global mutex will reduce a lot the performance, what is your thinking about it?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1224,2016-10-06T11:18:41Z,2017-05-21T14:06:19Z,2017-05-21T14:06:19Z,CLOSED,False,69,22,3,https://github.com/mturk,Use global mutex instead file lock to fix issues with threaded mpm's,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1224,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1224#issuecomment-302829935,"Patch fixes persistent storage data corruption issues with threaded mpm's for Apache Httpd. Reason for that is because the persistent storage locking is based on SDBM file locking mechanism which works only across process boundaries thus making threaded mpm's like worker or event unsafe.
Instead file lock, the patch uses global mutex which is both process and thread safe.
We have observed this issue with
https://issues.jboss.org/browse/JWS-489","Just to confirm my suspicions, I have made a set of tests with and without this patch and the results are demonstrated bellow.
Results with the patch

Results without the patch

My suspicions is that the apr lock is way slower than the file lock used by the sdbm, therefore we have slower numbers in terms of request per second. The huge difference between the two locks is conceptual: SDBM lock fails while storing value in a locked collection while the apr's one [this patch] hold until the critical section is free of use to perform its operations.
In fact, this patch mitigate the problem, however at a cost of performance reduction.


Documentation for SDBM:

https://ci.apache.org/projects/httpd/trunk/doxygen/group__APR__Util__DBM__SDBM.html#ga08c6121b4159ae86cec6e915e1e5d758



SDBM open with shared lock:

https://github.com/SpiderLabs/ModSecurity/blob/v2/master/apache2/persist_dbm.c#L122
https://github.com/SpiderLabs/ModSecurity/blob/v2/master/apache2/persist_dbm.c#L205
https://github.com/SpiderLabs/ModSecurity/blob/v2/master/apache2/persist_dbm.c#L420
https://github.com/SpiderLabs/ModSecurity/blob/v2/master/apache2/persist_dbm.c#L611



I would suggest the creation of a compilation flag to define whenever a global lock should be used or not. Having this option will let the user to choose between collection-correctness or performance. In the end of the day the correctness could be handling by a 3rd party process.",True,"{'HEART': ['https://github.com/victorhora'], 'THUMBS_UP': ['https://github.com/willyamcts']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1224,2016-10-06T11:18:41Z,2017-05-21T14:06:19Z,2017-05-21T14:06:19Z,CLOSED,False,69,22,3,https://github.com/mturk,Use global mutex instead file lock to fix issues with threaded mpm's,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1224,https://github.com/zimmerle,5,https://github.com/SpiderLabs/ModSecurity/pull/1224#issuecomment-302938891,"Patch fixes persistent storage data corruption issues with threaded mpm's for Apache Httpd. Reason for that is because the persistent storage locking is based on SDBM file locking mechanism which works only across process boundaries thus making threaded mpm's like worker or event unsafe.
Instead file lock, the patch uses global mutex which is both process and thread safe.
We have observed this issue with
https://issues.jboss.org/browse/JWS-489","This pull request was merged and the betterment provided by it will be available upon the utilization of the flag --enable-collection-global-lock during the ./configure.
Thank you @mturk.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1225,2016-10-07T20:43:35Z,2016-10-07T22:07:53Z,2016-10-07T22:07:53Z,CLOSED,False,1,0,1,https://github.com/p0pr0ck5,Fix compilation error,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1225,https://github.com/p0pr0ck5,1,https://github.com/SpiderLabs/ModSecurity/pull/1225,lmdb.cc fails to compile following commit c680ddf.,lmdb.cc fails to compile following commit c680ddf.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1225,2016-10-07T20:43:35Z,2016-10-07T22:07:53Z,2016-10-07T22:07:53Z,CLOSED,False,1,0,1,https://github.com/p0pr0ck5,Fix compilation error,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1225,https://github.com/p0pr0ck5,2,https://github.com/SpiderLabs/ModSecurity/pull/1225#issuecomment-252356542,lmdb.cc fails to compile following commit c680ddf.,Compilation error on Ubuntu Trusty: https://gist.github.com/p0pr0ck5/3651aeb95815e1da9187dd6159f11e33,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1225,2016-10-07T20:43:35Z,2016-10-07T22:07:53Z,2016-10-07T22:07:53Z,CLOSED,False,1,0,1,https://github.com/p0pr0ck5,Fix compilation error,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1225,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1225#issuecomment-252356799,lmdb.cc fails to compile following commit c680ddf.,Thank you @p0pr0ck5. I will merge it in a bit.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1225,2016-10-07T20:43:35Z,2016-10-07T22:07:53Z,2016-10-07T22:07:53Z,CLOSED,False,1,0,1,https://github.com/p0pr0ck5,Fix compilation error,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1225,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1225#issuecomment-252372742,lmdb.cc fails to compile following commit c680ddf.,"Merged into v3/master.
Thanks.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1231,2016-10-18T22:24:22Z,2016-10-19T00:34:32Z,2016-10-19T00:34:32Z,CLOSED,False,5,5,2,https://github.com/abhijoglekar,"SecLang uses RESPONSE_STATUS as variable, not STATUS",1,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1231,https://github.com/abhijoglekar,1,https://github.com/SpiderLabs/ModSecurity/pull/1231,"Seclang uses RESPONSE_STATUS as variable to encode the status code for the
request.
https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#RESPONSE_STATUS
The CRS v3.0.0-dev rules, for instance, uses the RESPONSE_STATUS variable.
https://github.com/SpiderLabs/owasp-modsecurity-crs/blob/v3.0.0-dev/rules/RESPONSE-50-DATA-LEAKAGES-IIS.conf
When processing response headers, the variable was named STATUS when creating/storing
it in the collection. Fix it, and update regression testcases.","Seclang uses RESPONSE_STATUS as variable to encode the status code for the
request.
https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#RESPONSE_STATUS
The CRS v3.0.0-dev rules, for instance, uses the RESPONSE_STATUS variable.
https://github.com/SpiderLabs/owasp-modsecurity-crs/blob/v3.0.0-dev/rules/RESPONSE-50-DATA-LEAKAGES-IIS.conf
When processing response headers, the variable was named STATUS when creating/storing
it in the collection. Fix it, and update regression testcases.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1231,2016-10-18T22:24:22Z,2016-10-19T00:34:32Z,2016-10-19T00:34:32Z,CLOSED,False,5,5,2,https://github.com/abhijoglekar,"SecLang uses RESPONSE_STATUS as variable, not STATUS",1,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1231,https://github.com/abhijoglekar,2,https://github.com/SpiderLabs/ModSecurity/pull/1231#issuecomment-254657911,"Seclang uses RESPONSE_STATUS as variable to encode the status code for the
request.
https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#RESPONSE_STATUS
The CRS v3.0.0-dev rules, for instance, uses the RESPONSE_STATUS variable.
https://github.com/SpiderLabs/owasp-modsecurity-crs/blob/v3.0.0-dev/rules/RESPONSE-50-DATA-LEAKAGES-IIS.conf
When processing response headers, the variable was named STATUS when creating/storing
it in the collection. Fix it, and update regression testcases.","@zimmerle , created a fork of the repo and sent a PR for a fix in libmodsec. Please take a look and let me know if this method works for contributions. Thanks.",True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1231,2016-10-18T22:24:22Z,2016-10-19T00:34:32Z,2016-10-19T00:34:32Z,CLOSED,False,5,5,2,https://github.com/abhijoglekar,"SecLang uses RESPONSE_STATUS as variable, not STATUS",1,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1231,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1231#issuecomment-254678420,"Seclang uses RESPONSE_STATUS as variable to encode the status code for the
request.
https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#RESPONSE_STATUS
The CRS v3.0.0-dev rules, for instance, uses the RESPONSE_STATUS variable.
https://github.com/SpiderLabs/owasp-modsecurity-crs/blob/v3.0.0-dev/rules/RESPONSE-50-DATA-LEAKAGES-IIS.conf
When processing response headers, the variable was named STATUS when creating/storing
it in the collection. Fix it, and update regression testcases.","Hi @abhijoglekar,
Thank you for your patch! It is already merged.
That is a perfect way to send us contribution!",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1233,2016-10-19T21:59:01Z,2016-10-20T14:16:52Z,2016-10-20T14:16:52Z,CLOSED,False,2,1,1,https://github.com/p0pr0ck5,Append a newline to concurrent JSON audit logs,5,[],https://github.com/SpiderLabs/ModSecurity/pull/1233,https://github.com/p0pr0ck5,1,https://github.com/SpiderLabs/ModSecurity/pull/1233,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1233,2016-10-19T21:59:01Z,2016-10-20T14:16:52Z,2016-10-20T14:16:52Z,CLOSED,False,2,1,1,https://github.com/p0pr0ck5,Append a newline to concurrent JSON audit logs,5,[],https://github.com/SpiderLabs/ModSecurity/pull/1233,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1233#issuecomment-255118645,,"Hi @p0pr0ck5, thanks!",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1249,2016-11-05T15:23:32Z,2016-11-10T04:01:27Z,2016-11-10T04:01:27Z,CLOSED,False,4,0,1,https://github.com/dkamen,~Rule will delete chainedRule,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1249,https://github.com/dkamen,1,https://github.com/SpiderLabs/ModSecurity/pull/1249,Came across this memory leak when reloading nginx with hundreds of rule chains,Came across this memory leak when reloading nginx with hundreds of rule chains,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1249,2016-11-05T15:23:32Z,2016-11-10T04:01:27Z,2016-11-10T04:01:27Z,CLOSED,False,4,0,1,https://github.com/dkamen,~Rule will delete chainedRule,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1249,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1249#issuecomment-258833911,Came across this memory leak when reloading nginx with hundreds of rule chains,"Hi @dkamen,
Thank you for the patch.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1249,2016-11-05T15:23:32Z,2016-11-10T04:01:27Z,2016-11-10T04:01:27Z,CLOSED,False,4,0,1,https://github.com/dkamen,~Rule will delete chainedRule,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1249,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1249#issuecomment-259596525,Came across this memory leak when reloading nginx with hundreds of rule chains,Merged.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1256,2016-11-09T06:19:31Z,2016-11-09T12:40:09Z,2016-12-07T09:50:31Z,CLOSED,False,7,2,1,https://github.com/defanator,Fixed install and dist targets to include actions/action.h,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1256,https://github.com/defanator,1,https://github.com/SpiderLabs/ModSecurity/pull/1256,This is needed due to movement of actions/action.h in 3ee7b24.,This is needed due to movement of actions/action.h in 3ee7b24.,True,"{'THUMBS_UP': ['https://github.com/Menahem1', 'https://github.com/zimmerle']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1256,2016-11-09T06:19:31Z,2016-11-09T12:40:09Z,2016-12-07T09:50:31Z,CLOSED,False,7,2,1,https://github.com/defanator,Fixed install and dist targets to include actions/action.h,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1256,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1256#issuecomment-259405613,This is needed due to movement of actions/action.h in 3ee7b24.,Thanks @defanator. Merged.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1257,2016-11-10T15:33:10Z,2016-11-14T13:30:14Z,2016-11-22T17:25:13Z,CLOSED,False,6,8,2,https://github.com/soonum, Fix return value of msc_rules_merge()  and fix typos,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1257,https://github.com/soonum,1,https://github.com/SpiderLabs/ModSecurity/pull/1257,"Hi all,
Regarding to the documentation msc_rules_merge() should
return the number of merged rules instead of 0 in all cases.
Fix typos in documentation.","Hi all,
Regarding to the documentation msc_rules_merge() should
return the number of merged rules instead of 0 in all cases.
Fix typos in documentation.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1257,2016-11-10T15:33:10Z,2016-11-14T13:30:14Z,2016-11-22T17:25:13Z,CLOSED,False,6,8,2,https://github.com/soonum, Fix return value of msc_rules_merge()  and fix typos,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1257,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1257#issuecomment-260323973,"Hi all,
Regarding to the documentation msc_rules_merge() should
return the number of merged rules instead of 0 in all cases.
Fix typos in documentation.","Hi @soonum,
Thank you for the patch ;)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1257,2016-11-10T15:33:10Z,2016-11-14T13:30:14Z,2016-11-22T17:25:13Z,CLOSED,False,6,8,2,https://github.com/soonum, Fix return value of msc_rules_merge()  and fix typos,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1257,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1257#issuecomment-260334497,"Hi all,
Regarding to the documentation msc_rules_merge() should
return the number of merged rules instead of 0 in all cases.
Fix typos in documentation.",Merged!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1258,2016-11-11T12:12:06Z,2016-12-01T18:16:18Z,2016-12-01T18:16:21Z,CLOSED,False,12,14,1,https://github.com/theforcedk,Czechia replaces Czech Republic,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1258,https://github.com/theforcedk,1,https://github.com/SpiderLabs/ModSecurity/pull/1258,"As of 17 May 2016, Czech Republic is now named Czechia.","As of 17 May 2016, Czech Republic is now named Czechia.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1258,2016-11-11T12:12:06Z,2016-12-01T18:16:18Z,2016-12-01T18:16:21Z,CLOSED,False,12,14,1,https://github.com/theforcedk,Czechia replaces Czech Republic,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1258,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1258#issuecomment-264249925,"As of 17 May 2016, Czech Republic is now named Czechia.",Hi @theforcedk thanks for the patch! merged.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1259,2016-11-16T11:35:08Z,2016-11-16T12:58:42Z,2016-12-08T05:24:06Z,CLOSED,False,58551,126798,840,https://github.com/aarvee11,V3/master,659,[],https://github.com/SpiderLabs/ModSecurity/pull/1259,https://github.com/aarvee11,1,https://github.com/SpiderLabs/ModSecurity/pull/1259,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1259,2016-11-16T11:35:08Z,2016-11-16T12:58:42Z,2016-12-08T05:24:06Z,CLOSED,False,58551,126798,840,https://github.com/aarvee11,V3/master,659,[],https://github.com/SpiderLabs/ModSecurity/pull/1259,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1259#issuecomment-260940103,,"Hi @aarvee11,
You have asked to perform a merge, I am closing this issues because I think you don't really meant to ask for a code merge into the project mainline. Please correct me if I am wrong.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1259,2016-11-16T11:35:08Z,2016-11-16T12:58:42Z,2016-12-08T05:24:06Z,CLOSED,False,58551,126798,840,https://github.com/aarvee11,V3/master,659,[],https://github.com/SpiderLabs/ModSecurity/pull/1259,https://github.com/aarvee11,3,https://github.com/SpiderLabs/ModSecurity/pull/1259#issuecomment-265655912,,"hi @zimmerle, Yes that was a mistake from my end. Please ignore the merge request. Thank you",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1261,2016-11-16T16:12:22Z,2017-05-16T20:59:12Z,2017-05-16T20:59:12Z,CLOSED,False,1,2,1,https://github.com/sdamodharan,Process request body for HTTP PUT method - fixes #939,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1261,https://github.com/sdamodharan,1,https://github.com/SpiderLabs/ModSecurity/pull/1261,For processing HTTP PUT body fixes #939,For processing HTTP PUT body fixes #939,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1261,2016-11-16T16:12:22Z,2017-05-16T20:59:12Z,2017-05-16T20:59:12Z,CLOSED,False,1,2,1,https://github.com/sdamodharan,Process request body for HTTP PUT method - fixes #939,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1261,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1261#issuecomment-264250675,For processing HTTP PUT body fixes #939,"Hi @sdamodharan,
Sorry for the delay. I believe that this sanity validation to ignore the PUT method was placed there on purpose as the PUT method was not being handled well, did you had a chance to test it?
Btw, did you saw the ModSecurity-nginx connector already?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1261,2016-11-16T16:12:22Z,2017-05-16T20:59:12Z,2017-05-16T20:59:12Z,CLOSED,False,1,2,1,https://github.com/sdamodharan,Process request body for HTTP PUT method - fixes #939,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1261,https://github.com/sdamodharan,3,https://github.com/SpiderLabs/ModSecurity/pull/1261#issuecomment-264390588,For processing HTTP PUT body fixes #939,"@zimmerle the PUT method works fine in nginx+modsecurity and we have been using it in production for nearly one month.
I haven't focused much into the nginx connector. But, with the 2.x version of ModSecurity being widely adopted in production, I thought this might help people to get started easily with it, without the need to hold back due to the lack of PUT support in ModSecurity 2.x mainstream",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1261,2016-11-16T16:12:22Z,2017-05-16T20:59:12Z,2017-05-16T20:59:12Z,CLOSED,False,1,2,1,https://github.com/sdamodharan,Process request body for HTTP PUT method - fixes #939,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1261,https://github.com/GayathriMAKK,4,https://github.com/SpiderLabs/ModSecurity/pull/1261#issuecomment-275563169,For processing HTTP PUT body fixes #939,"Hi @zimmerle,
We have modsecurity 2.9.1 on Nginx which fails to parse the body of PUT requests. Is there a sanity validation to ignore PUT method and if yes, can you point us to the rule?
thanks,
Gayathri",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1261,2016-11-16T16:12:22Z,2017-05-16T20:59:12Z,2017-05-16T20:59:12Z,CLOSED,False,1,2,1,https://github.com/sdamodharan,Process request body for HTTP PUT method - fixes #939,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1261,https://github.com/sdamodharan,5,https://github.com/SpiderLabs/ModSecurity/pull/1261#issuecomment-275586289,For processing HTTP PUT body fixes #939,"Hi Gayathri,

If you want to bypass ModSecurity for the PUT method, you can do that via
Nginx conf.

But, if thats not the case, if you want to sanitise the incoming PUT
requests, you can apply the above proposed patch to ModSecurity 2.9.1 and
recompile it against Nginx.

Also you can give ModSec3 nginx connector a try.
…
Sent from my iPhone

On 27-Jan-2017, at 06:38, GayathriMAKK <notifications@github.com> wrote:

Hi @zimmerle <https://github.com/zimmerle>,

We have modsecurity 2.9.1 on Nginx which fails to parse the body of PUT
requests. Is there a sanity validation to ignore PUT method and if yes, can
you point us to the rule?

thanks,
Gayathri

—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub
<#1261 (comment)>,
or mute the thread
<https://github.com/notifications/unsubscribe-auth/AWZ_95azSq0aTwmDpQcSJ7nhNCUBd740ks5rWUObgaJpZM4K0EUX>
.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1261,2016-11-16T16:12:22Z,2017-05-16T20:59:12Z,2017-05-16T20:59:12Z,CLOSED,False,1,2,1,https://github.com/sdamodharan,Process request body for HTTP PUT method - fixes #939,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1261,https://github.com/GayathriMAKK,6,https://github.com/SpiderLabs/ModSecurity/pull/1261#issuecomment-276234223,For processing HTTP PUT body fixes #939,"Hi @sdamodharan,
If we need to bypass ModSecurity for the PUT method, does it mean we ignore PUT method altogether from modsec rules?
I think the allowed HTTP verbs are specified in ""crs-setup.conf"" and if we exclude PUT from this list,  it will not allow Nginx to accept any PUT requests.
Based on https://github.com/SpiderLabs/ModSecurity-nginx, Nginx connector is still not stable and we need a fix for our production environment hence may resort to the patch on our existing version.
Thanks,
Gayathri",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1261,2016-11-16T16:12:22Z,2017-05-16T20:59:12Z,2017-05-16T20:59:12Z,CLOSED,False,1,2,1,https://github.com/sdamodharan,Process request body for HTTP PUT method - fixes #939,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1261,https://github.com/victorhora,7,https://github.com/SpiderLabs/ModSecurity/pull/1261#issuecomment-282464520,For processing HTTP PUT body fixes #939,"But, if thats not the case, if you want to sanitise the incoming PUT
requests, you can apply the above proposed patch to ModSecurity 2.9.1 and
recompile it against Nginx.

Hi @sdamodharan I've tested your proposed patch against Nginx 1.11.10 and ModSecurity 2.9.1 and I couldn't confirm the behavior you've mentioned above.
Even though I have http_dav_module enabled on Nginx and correctly processing PUT requests, I can confirm I can match on the request line (e.g. the filename or parameters) but the body doesn't seem to be inspected.
Could you please share your configuration and if possible your matching SecRule so I can double check on my side?
Thanks.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1261,2016-11-16T16:12:22Z,2017-05-16T20:59:12Z,2017-05-16T20:59:12Z,CLOSED,False,1,2,1,https://github.com/sdamodharan,Process request body for HTTP PUT method - fixes #939,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1261,https://github.com/zimmerle,8,https://github.com/SpiderLabs/ModSecurity/pull/1261#issuecomment-301913734,For processing HTTP PUT body fixes #939,"Hi @sdamodharan,
I am closing this pull request as now we have the libModSecurity and the workable ModSecurity for nginx. Available here:
https://github.com/SpiderLabs/ModSecurity-nginx",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1263,2016-11-20T17:37:13Z,2016-12-01T18:38:29Z,2016-12-01T18:38:29Z,CLOSED,False,5,4,1,https://github.com/eff7,Add debug information for mod_security on windows,3,[],https://github.com/SpiderLabs/ModSecurity/pull/1263,https://github.com/eff7,1,https://github.com/SpiderLabs/ModSecurity/pull/1263,"This commit modifies Makefile.win:

Create and install pdb files (debug information)
Change the name of Lua lib to match the name created by httpd build.","This commit modifies Makefile.win:

Create and install pdb files (debug information)
Change the name of Lua lib to match the name created by httpd build.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1263,2016-11-20T17:37:13Z,2016-12-01T18:38:29Z,2016-12-01T18:38:29Z,CLOSED,False,5,4,1,https://github.com/eff7,Add debug information for mod_security on windows,3,[],https://github.com/SpiderLabs/ModSecurity/pull/1263,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1263#issuecomment-264255564,"This commit modifies Makefile.win:

Create and install pdb files (debug information)
Change the name of Lua lib to match the name created by httpd build.","Hi @eff7, thanks for the patch. Merged.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1266,2016-11-22T01:13:45Z,2016-12-16T14:14:35Z,2016-12-16T14:17:34Z,CLOSED,False,313,31,18,https://github.com/phantom-az,audit_log improvements,7,[],https://github.com/SpiderLabs/ModSecurity/pull/1266,https://github.com/phantom-az,1,https://github.com/SpiderLabs/ModSecurity/pull/1266,"Felipe,
There's an implementation of missing AuditLog support parts -E-, -H- & -K-.  As per our discussion it's conditionally compiled.
0453176
aa7e499","Felipe,
There's an implementation of missing AuditLog support parts -E-, -H- & -K-.  As per our discussion it's conditionally compiled.
0453176
aa7e499",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1266,2016-11-22T01:13:45Z,2016-12-16T14:14:35Z,2016-12-16T14:17:34Z,CLOSED,False,313,31,18,https://github.com/phantom-az,audit_log improvements,7,[],https://github.com/SpiderLabs/ModSecurity/pull/1266,https://github.com/defanator,2,https://github.com/SpiderLabs/ModSecurity/pull/1266#issuecomment-263546860,"Felipe,
There's an implementation of missing AuditLog support parts -E-, -H- & -K-.  As per our discussion it's conditionally compiled.
0453176
aa7e499","First, I'd like to advise you to create a separate branch for each PR to avoid mess with unrelated commits. :)
Second, I have tested 0453176 and aa7e499, and the observed behavior doesn't seem right: I see that every consequent non-blocked request contains ""H"" section contents from previous blocked request.
See this gist for details:
https://gist.github.com/defanator/5ef589e842dd2bd1b6278552ee1e6f2a",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1266,2016-11-22T01:13:45Z,2016-12-16T14:14:35Z,2016-12-16T14:17:34Z,CLOSED,False,313,31,18,https://github.com/phantom-az,audit_log improvements,7,[],https://github.com/SpiderLabs/ModSecurity/pull/1266,https://github.com/defanator,3,https://github.com/SpiderLabs/ModSecurity/pull/1266#issuecomment-263547837,"Felipe,
There's an implementation of missing AuditLog support parts -E-, -H- & -K-.  As per our discussion it's conditionally compiled.
0453176
aa7e499","I have also added ""K"" section to the audit log configuration, and it doesn't appear:
https://gist.github.com/defanator/5ef589e842dd2bd1b6278552ee1e6f2a#file-02modsec_audit_k-log",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1266,2016-11-22T01:13:45Z,2016-12-16T14:14:35Z,2016-12-16T14:17:34Z,CLOSED,False,313,31,18,https://github.com/phantom-az,audit_log improvements,7,[],https://github.com/SpiderLabs/ModSecurity/pull/1266,https://github.com/defanator,4,https://github.com/SpiderLabs/ModSecurity/pull/1266#issuecomment-263549121,"Felipe,
There's an implementation of missing AuditLog support parts -E-, -H- & -K-.  As per our discussion it's conditionally compiled.
0453176
aa7e499","Same for ""E"" section (request body), it also doesn't appear:
https://gist.github.com/defanator/5ef589e842dd2bd1b6278552ee1e6f2a#file-03modsec_audit_e-log
(""SecRequestBodyAccess"" is enabled, modsecurity.conf is the default one)
UPDATE: sorry about this one, I mixed up request body with response body.
Just checked actual request body (""C"" section), it also doesn't work:
https://gist.github.com/defanator/5ef589e842dd2bd1b6278552ee1e6f2a#file-04modsec_audit_c-log",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1266,2016-11-22T01:13:45Z,2016-12-16T14:14:35Z,2016-12-16T14:17:34Z,CLOSED,False,313,31,18,https://github.com/phantom-az,audit_log improvements,7,[],https://github.com/SpiderLabs/ModSecurity/pull/1266,https://github.com/zimmerle,5,https://github.com/SpiderLabs/ModSecurity/pull/1266#issuecomment-264280068,"Felipe,
There's an implementation of missing AuditLog support parts -E-, -H- & -K-.  As per our discussion it's conditionally compiled.
0453176
aa7e499","To whom it may concern, we are discussing this via Slack: http://modsecurity.slack.com",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1266,2016-11-22T01:13:45Z,2016-12-16T14:14:35Z,2016-12-16T14:17:34Z,CLOSED,False,313,31,18,https://github.com/phantom-az,audit_log improvements,7,[],https://github.com/SpiderLabs/ModSecurity/pull/1266,https://github.com/zimmerle,6,https://github.com/SpiderLabs/ModSecurity/pull/1266#issuecomment-267602554,"Felipe,
There's an implementation of missing AuditLog support parts -E-, -H- & -K-.  As per our discussion it's conditionally compiled.
0453176
aa7e499","Closing this merge request due to a refactoring, as discussed on Slack. We currently have everything implemented except for the ""K"" section.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1270,2016-11-22T17:23:42Z,2016-12-01T18:34:07Z,2016-12-01T18:34:07Z,CLOSED,False,4,8,2,https://github.com/soonum,Add (void) argument to be ANSI C compliant,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1270,https://github.com/soonum,1,https://github.com/SpiderLabs/ModSecurity/pull/1270,"Add void argument has to avoid warning messages when compiling Python bindings with CFFI since it uses -Wstrict-prototypes option by default.
Modifymsc_create_rules_set and msc_init internals, now it returns directly an instance like msc_new_transaction in transaction.cc.","Add void argument has to avoid warning messages when compiling Python bindings with CFFI since it uses -Wstrict-prototypes option by default.
Modifymsc_create_rules_set and msc_init internals, now it returns directly an instance like msc_new_transaction in transaction.cc.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1270,2016-11-22T17:23:42Z,2016-12-01T18:34:07Z,2016-12-01T18:34:07Z,CLOSED,False,4,8,2,https://github.com/soonum,Add (void) argument to be ANSI C compliant,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1270,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1270#issuecomment-264254425,"Add void argument has to avoid warning messages when compiling Python bindings with CFFI since it uses -Wstrict-prototypes option by default.
Modifymsc_create_rules_set and msc_init internals, now it returns directly an instance like msc_new_transaction in transaction.cc.","Hi @soonum,
Thanks for the patch, merged!",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1271,2016-11-23T09:10:44Z,2016-12-01T18:36:50Z,2016-12-07T09:50:28Z,CLOSED,False,1,1,1,https://github.com/defanator,Use correct debugging CFLAGS in readme,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1271,https://github.com/defanator,1,https://github.com/SpiderLabs/ModSecurity/pull/1271,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1271,2016-11-23T09:10:44Z,2016-12-01T18:36:50Z,2016-12-07T09:50:28Z,CLOSED,False,1,1,1,https://github.com/defanator,Use correct debugging CFLAGS in readme,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1271,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1271#issuecomment-264255159,,"Hi @defanator, thanks for the patch! merged.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1274,2016-11-24T22:09:17Z,2017-05-19T20:06:08Z,2017-05-19T20:06:09Z,CLOSED,False,10,4,3,https://github.com/csutherl,Hack to show that there is an issue with the session collection's logic,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1274,https://github.com/csutherl,1,https://github.com/SpiderLabs/ModSecurity/pull/1274,"This PR is a hack to show that there is an issue somewhere with the collection storage/retrieval logic for session collections (I also think this affects user and resource collections, but haven't verified this yet) which is causing #1273. After applying this change the test in #1273 always adds up to the total number of requests. I arrived at this conclusion because I noticed some inconsistencies in the logging, like:
Added collection ""default_SESSION"" to the list as ""SESSION"".
....
collection_retrieve_ex: collection_retrieve_ex: Retrieving collection (name ""default_SESSION"", filename ""/var/lib/mod_security/default_SESSION"")

and that the SESSION collection never receives delta updates like the global one does:
collection_store: Delta applied for global.counter 1->2 (1): 1 + (1) = 2 [2,1]

because orig_col in re_actions.c always returns NULL for the session collection:
458     orig_col = (const apr_table_t *)apr_table_get(msr->collections_original, var_name->value);

The only difference that I see in the way that the global and session collections are handled is in the real_col_name and col_name passed into init_collection.
Obviously I don't want this to be accepted, but I wanted to get a conversation started with someone that understands mod_security better than I do and post the results of my testing thus far. I was told that a PR is the best way to do that :)","This PR is a hack to show that there is an issue somewhere with the collection storage/retrieval logic for session collections (I also think this affects user and resource collections, but haven't verified this yet) which is causing #1273. After applying this change the test in #1273 always adds up to the total number of requests. I arrived at this conclusion because I noticed some inconsistencies in the logging, like:
Added collection ""default_SESSION"" to the list as ""SESSION"".
....
collection_retrieve_ex: collection_retrieve_ex: Retrieving collection (name ""default_SESSION"", filename ""/var/lib/mod_security/default_SESSION"")

and that the SESSION collection never receives delta updates like the global one does:
collection_store: Delta applied for global.counter 1->2 (1): 1 + (1) = 2 [2,1]

because orig_col in re_actions.c always returns NULL for the session collection:
458     orig_col = (const apr_table_t *)apr_table_get(msr->collections_original, var_name->value);

The only difference that I see in the way that the global and session collections are handled is in the real_col_name and col_name passed into init_collection.
Obviously I don't want this to be accepted, but I wanted to get a conversation started with someone that understands mod_security better than I do and post the results of my testing thus far. I was told that a PR is the best way to do that :)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1274,2016-11-24T22:09:17Z,2017-05-19T20:06:08Z,2017-05-19T20:06:09Z,CLOSED,False,10,4,3,https://github.com/csutherl,Hack to show that there is an issue with the session collection's logic,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1274,https://github.com/csutherl,2,https://github.com/SpiderLabs/ModSecurity/pull/1274#issuecomment-262850155,"This PR is a hack to show that there is an issue somewhere with the collection storage/retrieval logic for session collections (I also think this affects user and resource collections, but haven't verified this yet) which is causing #1273. After applying this change the test in #1273 always adds up to the total number of requests. I arrived at this conclusion because I noticed some inconsistencies in the logging, like:
Added collection ""default_SESSION"" to the list as ""SESSION"".
....
collection_retrieve_ex: collection_retrieve_ex: Retrieving collection (name ""default_SESSION"", filename ""/var/lib/mod_security/default_SESSION"")

and that the SESSION collection never receives delta updates like the global one does:
collection_store: Delta applied for global.counter 1->2 (1): 1 + (1) = 2 [2,1]

because orig_col in re_actions.c always returns NULL for the session collection:
458     orig_col = (const apr_table_t *)apr_table_get(msr->collections_original, var_name->value);

The only difference that I see in the way that the global and session collections are handled is in the real_col_name and col_name passed into init_collection.
Obviously I don't want this to be accepted, but I wanted to get a conversation started with someone that understands mod_security better than I do and post the results of my testing thus far. I was told that a PR is the best way to do that :)",@bostrt,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1274,2016-11-24T22:09:17Z,2017-05-19T20:06:08Z,2017-05-19T20:06:09Z,CLOSED,False,10,4,3,https://github.com/csutherl,Hack to show that there is an issue with the session collection's logic,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1274,https://github.com/csutherl,3,https://github.com/SpiderLabs/ModSecurity/pull/1274#issuecomment-262851155,"This PR is a hack to show that there is an issue somewhere with the collection storage/retrieval logic for session collections (I also think this affects user and resource collections, but haven't verified this yet) which is causing #1273. After applying this change the test in #1273 always adds up to the total number of requests. I arrived at this conclusion because I noticed some inconsistencies in the logging, like:
Added collection ""default_SESSION"" to the list as ""SESSION"".
....
collection_retrieve_ex: collection_retrieve_ex: Retrieving collection (name ""default_SESSION"", filename ""/var/lib/mod_security/default_SESSION"")

and that the SESSION collection never receives delta updates like the global one does:
collection_store: Delta applied for global.counter 1->2 (1): 1 + (1) = 2 [2,1]

because orig_col in re_actions.c always returns NULL for the session collection:
458     orig_col = (const apr_table_t *)apr_table_get(msr->collections_original, var_name->value);

The only difference that I see in the way that the global and session collections are handled is in the real_col_name and col_name passed into init_collection.
Obviously I don't want this to be accepted, but I wanted to get a conversation started with someone that understands mod_security better than I do and post the results of my testing thus far. I was told that a PR is the best way to do that :)","Oh yeah, after this change is applied you have to update the configuration to use 'default_SESSION' instead of 'SESSION' (which is why I said this is a hack) because it tries to lookup the exact name you give it there.
SecAction phase:5,id:119,nolog,pass,setvar:default_SESSION.my_counter=+1",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1274,2016-11-24T22:09:17Z,2017-05-19T20:06:08Z,2017-05-19T20:06:09Z,CLOSED,False,10,4,3,https://github.com/csutherl,Hack to show that there is an issue with the session collection's logic,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1274,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1274#issuecomment-301912874,"This PR is a hack to show that there is an issue somewhere with the collection storage/retrieval logic for session collections (I also think this affects user and resource collections, but haven't verified this yet) which is causing #1273. After applying this change the test in #1273 always adds up to the total number of requests. I arrived at this conclusion because I noticed some inconsistencies in the logging, like:
Added collection ""default_SESSION"" to the list as ""SESSION"".
....
collection_retrieve_ex: collection_retrieve_ex: Retrieving collection (name ""default_SESSION"", filename ""/var/lib/mod_security/default_SESSION"")

and that the SESSION collection never receives delta updates like the global one does:
collection_store: Delta applied for global.counter 1->2 (1): 1 + (1) = 2 [2,1]

because orig_col in re_actions.c always returns NULL for the session collection:
458     orig_col = (const apr_table_t *)apr_table_get(msr->collections_original, var_name->value);

The only difference that I see in the way that the global and session collections are handled is in the real_col_name and col_name passed into init_collection.
Obviously I don't want this to be accepted, but I wanted to get a conversation started with someone that understands mod_security better than I do and post the results of my testing thus far. I was told that a PR is the best way to do that :)","Just to add more details...
Not sure if you have noticed but the deafult_ that you are referring to, is in fact the name of the WEBAPPID. The idea behind the WebAppID is to create a namespace for the collection. There are further information about the SecWebAppId here:

https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#SecWebAppId
https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#WEBAPPID

As I've commented before, regardless of the computation of the delta, it is expected to have a conter  on the top of a collection with values that are not the exactly same amount of requests. That may differ upon to the limitations of the server vs the amount of requests.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1274,2016-11-24T22:09:17Z,2017-05-19T20:06:08Z,2017-05-19T20:06:09Z,CLOSED,False,10,4,3,https://github.com/csutherl,Hack to show that there is an issue with the session collection's logic,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1274,https://github.com/zimmerle,5,https://github.com/SpiderLabs/ModSecurity/pull/1274#issuecomment-302798984,"This PR is a hack to show that there is an issue somewhere with the collection storage/retrieval logic for session collections (I also think this affects user and resource collections, but haven't verified this yet) which is causing #1273. After applying this change the test in #1273 always adds up to the total number of requests. I arrived at this conclusion because I noticed some inconsistencies in the logging, like:
Added collection ""default_SESSION"" to the list as ""SESSION"".
....
collection_retrieve_ex: collection_retrieve_ex: Retrieving collection (name ""default_SESSION"", filename ""/var/lib/mod_security/default_SESSION"")

and that the SESSION collection never receives delta updates like the global one does:
collection_store: Delta applied for global.counter 1->2 (1): 1 + (1) = 2 [2,1]

because orig_col in re_actions.c always returns NULL for the session collection:
458     orig_col = (const apr_table_t *)apr_table_get(msr->collections_original, var_name->value);

The only difference that I see in the way that the global and session collections are handled is in the real_col_name and col_name passed into init_collection.
Obviously I don't want this to be accepted, but I wanted to get a conversation started with someone that understands mod_security better than I do and post the results of my testing thus far. I was told that a PR is the best way to do that :)","As described at #1273, this issue has being fixed therefore we no longer need this hack to expose the problem. Thank you for the report @csutherl  :)",True,{'THUMBS_UP': ['https://github.com/csutherl']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1279,2016-12-02T20:23:54Z,2017-05-09T00:13:08Z,2017-05-09T00:13:08Z,CLOSED,False,2,0,1,https://github.com/csutherl,Adding comments around odd looking code to prevent future scrutiny,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1279,https://github.com/csutherl,1,https://github.com/SpiderLabs/ModSecurity/pull/1279,This comment is a result of #1278 :) Adding a comment will make it a bit easier to identify the difference because the duplicated block looks like an error.,This comment is a result of #1278 :) Adding a comment will make it a bit easier to identify the difference because the duplicated block looks like an error.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1279,2016-12-02T20:23:54Z,2017-05-09T00:13:08Z,2017-05-09T00:13:08Z,CLOSED,False,2,0,1,https://github.com/csutherl,Adding comments around odd looking code to prevent future scrutiny,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1279,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1279#issuecomment-300025467,This comment is a result of #1278 :) Adding a comment will make it a bit easier to identify the difference because the duplicated block looks like an error.,"Hi @csutherl,
Thank you for the patch. Sorry for the delay.",True,{'THUMBS_UP': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1281,2016-12-07T09:47:19Z,2016-12-07T13:32:29Z,2016-12-09T10:18:19Z,CLOSED,False,11,3,2,https://github.com/defanator,"Fix install and dist targets after 768cc74f, 9733cacd, bfc30dad",1,[],https://github.com/SpiderLabs/ModSecurity/pull/1281,https://github.com/defanator,1,https://github.com/SpiderLabs/ModSecurity/pull/1281,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1281,2016-12-07T09:47:19Z,2016-12-07T13:32:29Z,2016-12-09T10:18:19Z,CLOSED,False,11,3,2,https://github.com/defanator,"Fix install and dist targets after 768cc74f, 9733cacd, bfc30dad",1,[],https://github.com/SpiderLabs/ModSecurity/pull/1281,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1281#issuecomment-265447719,,Merged! thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1282,2016-12-09T09:31:16Z,2017-04-07T15:53:26Z,2017-04-10T09:04:01Z,CLOSED,False,22,1,4,https://github.com/marcstern,Option to disable logging of filename in audit log,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1282,https://github.com/marcstern,1,https://github.com/SpiderLabs/ModSecurity/pull/1282,[Issue #1065 - Marc Stern],[Issue #1065 - Marc Stern],True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1282,2016-12-09T09:31:16Z,2017-04-07T15:53:26Z,2017-04-10T09:04:01Z,CLOSED,False,22,1,4,https://github.com/marcstern,Option to disable logging of filename in audit log,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1282,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1282#issuecomment-292575300,[Issue #1065 - Marc Stern],"Hi @marcstern,
Merged. Thanks ;)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1283,2016-12-09T10:07:25Z,2016-12-09T12:21:48Z,2016-12-12T10:40:09Z,CLOSED,False,8,8,2,https://github.com/defanator,"Fix building with -Wl,--as-needed linker option with older ld versions",1,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1283,https://github.com/defanator,1,https://github.com/SpiderLabs/ModSecurity/pull/1283,"In particular, this allows to build libmodsecurity on Debian 7 ""wheezy"" (it has ld version 2.22 out of the box).
Before this change, the following errors appeared during the linking:
/usr/bin/ld: ../../src/.libs/libmodsecurity.a(libmodsecurity_la-system.o): undefined reference to symbol 'clock_gettime@@GLIBC_2.2.5'
/usr/bin/ld: note: 'clock_gettime@@GLIBC_2.2.5' is defined in DSO /usr/lib/x86_64-linux-gnu/librt.so so try adding it to the linker command line
/usr/lib/x86_64-linux-gnu/librt.so: could not read symbols: Invalid operation
collect2: error: ld returned 1 exit status","In particular, this allows to build libmodsecurity on Debian 7 ""wheezy"" (it has ld version 2.22 out of the box).
Before this change, the following errors appeared during the linking:
/usr/bin/ld: ../../src/.libs/libmodsecurity.a(libmodsecurity_la-system.o): undefined reference to symbol 'clock_gettime@@GLIBC_2.2.5'
/usr/bin/ld: note: 'clock_gettime@@GLIBC_2.2.5' is defined in DSO /usr/lib/x86_64-linux-gnu/librt.so so try adding it to the linker command line
/usr/lib/x86_64-linux-gnu/librt.so: could not read symbols: Invalid operation
collect2: error: ld returned 1 exit status",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1283,2016-12-09T10:07:25Z,2016-12-09T12:21:48Z,2016-12-12T10:40:09Z,CLOSED,False,8,8,2,https://github.com/defanator,"Fix building with -Wl,--as-needed linker option with older ld versions",1,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1283,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1283#issuecomment-266001648,"In particular, this allows to build libmodsecurity on Debian 7 ""wheezy"" (it has ld version 2.22 out of the box).
Before this change, the following errors appeared during the linking:
/usr/bin/ld: ../../src/.libs/libmodsecurity.a(libmodsecurity_la-system.o): undefined reference to symbol 'clock_gettime@@GLIBC_2.2.5'
/usr/bin/ld: note: 'clock_gettime@@GLIBC_2.2.5' is defined in DSO /usr/lib/x86_64-linux-gnu/librt.so so try adding it to the linker command line
/usr/lib/x86_64-linux-gnu/librt.so: could not read symbols: Invalid operation
collect2: error: ld returned 1 exit status",Merged! thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1289,2016-12-20T22:56:25Z,2017-05-11T13:22:35Z,2017-05-11T13:22:35Z,CLOSED,False,1,1,1,https://github.com/bostrt,Change from using rand() to thread-safe ap_random_pick.,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1289,https://github.com/bostrt,1,https://github.com/SpiderLabs/ModSecurity/pull/1289,"Use of rand() led to possibility of multiple threads performing GC all at once. I temporarily added some debug logging to show this (this pull request does not include logging):
@@ -212,6 +212,7 @@ static void modsecurity_persist_data(modsec_rec *msr) {
     apr_table_entry_t *te;
     apr_time_t time_before, time_after;
     int i;
+    int rvalue;
 
     time_before = apr_time_now();
 
@@ -237,7 +238,9 @@ static void modsecurity_persist_data(modsec_rec *msr) {
     }
 
     /* Remove stale collections. */
-    if (rand() < RAND_MAX/100) {
+    rvalue = rand();
+    if (rvalue < RAND_MAX/100) {
+        msr_log(msr, 9, ""Garbage collection initiated with rvalue: %d < %d/100"", rvalue, RAND_MAX);
         arr = apr_table_elts(msr->collections);
         te = (apr_table_entry_t *)arr->elts;
         for (i = 0; i < arr->nelts; i++) {

[18/Dec/2016:13:29:29 --0500] [localhost/sid#5621386b7400][rid#5621389e8660][/index.html][9] Garbage collection initiated with rvalue: 15337631 < 2147483647/100
[18/Dec/2016:13:29:29 --0500] [localhost/sid#5621386b7400][rid#5621389e8660][/index.html][4] Garbage collection took 42 microseconds.
[18/Dec/2016:13:29:29 --0500] [localhost/sid#5621386b7400][rid#5621389ea670][/index.html][9] Garbage collection initiated with rvalue: 15337631 < 2147483647/100
[18/Dec/2016:13:29:29 --0500] [localhost/sid#5621386b7400][rid#5621389ea670][/index.html][4] Garbage collection took 122 microseconds.
[18/Dec/2016:13:29:29 --0500] [localhost/sid#5621386b7400][rid#5621389e8660][/index.html][9] Garbage collection initiated with rvalue: 15337631 < 2147483647/100
[18/Dec/2016:13:29:29 --0500] [localhost/sid#5621386b7400][rid#5621389e8660][/index.html][4] Garbage collection took 74 microseconds.
[18/Dec/2016:13:29:29 --0500] [localhost/sid#5621386b7400][rid#5621389e8660][/index.html][9] Garbage collection initiated with rvalue: 15337631 < 2147483647/100
[18/Dec/2016:13:29:29 --0500] [localhost/sid#5621386b7400][rid#5621389e8660][/index.html][4] Garbage collection took 123 microseconds.
[18/Dec/2016:13:29:29 --0500] [localhost/sid#5621386b7400][rid#5621389e8660][/index.html][9] Garbage collection initiated with rvalue: 15337631 < 2147483647/100
[18/Dec/2016:13:29:29 --0500] [localhost/sid#5621386b7400][rid#5621389e8660][/index.html][4] Garbage collection took 160 microseconds.
[18/Dec/2016:13:29:36 --0500] [localhost/sid#5621386b7400][rid#5621389e8660][/index.html][9] Garbage collection initiated with rvalue: 15337631 < 2147483647/100
[18/Dec/2016:13:29:36 --0500] [localhost/sid#5621386b7400][rid#5621389e8660][/index.html][4] Garbage collection took 53 microseconds.
[18/Dec/2016:13:29:37 --0500] [localhost/sid#5621386b7400][rid#5621389d04d0][/index.html][9] Garbage collection initiated with rvalue: 6841472 < 2147483647/100
[18/Dec/2016:13:29:37 --0500] [localhost/sid#5621386b7400][rid#5621389d04d0][/index.html][4] Garbage collection took 63 microseconds.
[18/Dec/2016:13:29:37 --0500] [localhost/sid#5621386b7400][rid#5621389d24e0][/index.html][9] Garbage collection initiated with rvalue: 6841472 < 2147483647/100
[18/Dec/2016:13:29:37 --0500] [localhost/sid#5621386b7400][rid#5621389d24e0][/index.html][4] Garbage collection took 68 microseconds.
[18/Dec/2016:13:29:37 --0500] [localhost/sid#5621386b7400][rid#5621389d04d0][/index.html][9] Garbage collection initiated with rvalue: 6841472 < 2147483647/100
[18/Dec/2016:13:29:37 --0500] [localhost/sid#5621386b7400][rid#5621389d04d0][/index.html][4] Garbage collection took 43 microseconds.
[18/Dec/2016:13:29:37 --0500] [localhost/sid#5621386b7400][rid#5621389d04d0][/index.html][9] Garbage collection initiated with rvalue: 6841472 < 2147483647/100
[18/Dec/2016:13:29:37 --0500] [localhost/sid#5621386b7400][rid#5621389d04d0][/index.html][4] Garbage collection took 114 microseconds.
[18/Dec/2016:13:29:37 --0500] [localhost/sid#5621386b7400][rid#5621389d04d0][/index.html][9] Garbage collection initiated with rvalue: 6841472 < 2147483647/100
[18/Dec/2016:13:29:37 --0500] [localhost/sid#5621386b7400][rid#5621389d04d0][/index.html][4] Garbage collection took 46 microseconds.

Notice multiple threads having same rand() result.
Finally, changing to ap_random_pick, as mentioned in #1286, resulted in no duplicate runs of GC:
[18/Dec/2016:13:33:08 --0500] [localhost/sid#56385f3c6400][rid#56385f6ed5d0][/index.html][9] Garbage collection initiated with rvalue: 8426056 < 2147483647/100
[18/Dec/2016:13:33:08 --0500] [localhost/sid#56385f3c6400][rid#56385f6ed5d0][/index.html][4] Garbage collection took 58 microseconds.
[18/Dec/2016:13:33:10 --0500] [localhost/sid#56385f3c6400][rid#56385f6e14a0][/index.html][9] Garbage collection initiated with rvalue: 12418543 < 2147483647/100
[18/Dec/2016:13:33:10 --0500] [localhost/sid#56385f3c6400][rid#56385f6e14a0][/index.html][4] Garbage collection took 87 microseconds.
[18/Dec/2016:13:33:11 --0500] [localhost/sid#56385f3c6400][rid#56385f6ef5e0][/index.html][9] Garbage collection initiated with rvalue: 7706903 < 2147483647/100
[18/Dec/2016:13:33:11 --0500] [localhost/sid#56385f3c6400][rid#56385f6ef5e0][/index.html][4] Garbage collection took 87 microseconds.
[18/Dec/2016:13:33:12 --0500] [localhost/sid#56385f3c6400][rid#56385f6f7620][/index.html][9] Garbage collection initiated with rvalue: 15493977 < 2147483647/100
[18/Dec/2016:13:33:12 --0500] [localhost/sid#56385f3c6400][rid#56385f6f7620][/index.html][4] Garbage collection took 53 microseconds.","Use of rand() led to possibility of multiple threads performing GC all at once. I temporarily added some debug logging to show this (this pull request does not include logging):
@@ -212,6 +212,7 @@ static void modsecurity_persist_data(modsec_rec *msr) {
     apr_table_entry_t *te;
     apr_time_t time_before, time_after;
     int i;
+    int rvalue;
 
     time_before = apr_time_now();
 
@@ -237,7 +238,9 @@ static void modsecurity_persist_data(modsec_rec *msr) {
     }
 
     /* Remove stale collections. */
-    if (rand() < RAND_MAX/100) {
+    rvalue = rand();
+    if (rvalue < RAND_MAX/100) {
+        msr_log(msr, 9, ""Garbage collection initiated with rvalue: %d < %d/100"", rvalue, RAND_MAX);
         arr = apr_table_elts(msr->collections);
         te = (apr_table_entry_t *)arr->elts;
         for (i = 0; i < arr->nelts; i++) {

[18/Dec/2016:13:29:29 --0500] [localhost/sid#5621386b7400][rid#5621389e8660][/index.html][9] Garbage collection initiated with rvalue: 15337631 < 2147483647/100
[18/Dec/2016:13:29:29 --0500] [localhost/sid#5621386b7400][rid#5621389e8660][/index.html][4] Garbage collection took 42 microseconds.
[18/Dec/2016:13:29:29 --0500] [localhost/sid#5621386b7400][rid#5621389ea670][/index.html][9] Garbage collection initiated with rvalue: 15337631 < 2147483647/100
[18/Dec/2016:13:29:29 --0500] [localhost/sid#5621386b7400][rid#5621389ea670][/index.html][4] Garbage collection took 122 microseconds.
[18/Dec/2016:13:29:29 --0500] [localhost/sid#5621386b7400][rid#5621389e8660][/index.html][9] Garbage collection initiated with rvalue: 15337631 < 2147483647/100
[18/Dec/2016:13:29:29 --0500] [localhost/sid#5621386b7400][rid#5621389e8660][/index.html][4] Garbage collection took 74 microseconds.
[18/Dec/2016:13:29:29 --0500] [localhost/sid#5621386b7400][rid#5621389e8660][/index.html][9] Garbage collection initiated with rvalue: 15337631 < 2147483647/100
[18/Dec/2016:13:29:29 --0500] [localhost/sid#5621386b7400][rid#5621389e8660][/index.html][4] Garbage collection took 123 microseconds.
[18/Dec/2016:13:29:29 --0500] [localhost/sid#5621386b7400][rid#5621389e8660][/index.html][9] Garbage collection initiated with rvalue: 15337631 < 2147483647/100
[18/Dec/2016:13:29:29 --0500] [localhost/sid#5621386b7400][rid#5621389e8660][/index.html][4] Garbage collection took 160 microseconds.
[18/Dec/2016:13:29:36 --0500] [localhost/sid#5621386b7400][rid#5621389e8660][/index.html][9] Garbage collection initiated with rvalue: 15337631 < 2147483647/100
[18/Dec/2016:13:29:36 --0500] [localhost/sid#5621386b7400][rid#5621389e8660][/index.html][4] Garbage collection took 53 microseconds.
[18/Dec/2016:13:29:37 --0500] [localhost/sid#5621386b7400][rid#5621389d04d0][/index.html][9] Garbage collection initiated with rvalue: 6841472 < 2147483647/100
[18/Dec/2016:13:29:37 --0500] [localhost/sid#5621386b7400][rid#5621389d04d0][/index.html][4] Garbage collection took 63 microseconds.
[18/Dec/2016:13:29:37 --0500] [localhost/sid#5621386b7400][rid#5621389d24e0][/index.html][9] Garbage collection initiated with rvalue: 6841472 < 2147483647/100
[18/Dec/2016:13:29:37 --0500] [localhost/sid#5621386b7400][rid#5621389d24e0][/index.html][4] Garbage collection took 68 microseconds.
[18/Dec/2016:13:29:37 --0500] [localhost/sid#5621386b7400][rid#5621389d04d0][/index.html][9] Garbage collection initiated with rvalue: 6841472 < 2147483647/100
[18/Dec/2016:13:29:37 --0500] [localhost/sid#5621386b7400][rid#5621389d04d0][/index.html][4] Garbage collection took 43 microseconds.
[18/Dec/2016:13:29:37 --0500] [localhost/sid#5621386b7400][rid#5621389d04d0][/index.html][9] Garbage collection initiated with rvalue: 6841472 < 2147483647/100
[18/Dec/2016:13:29:37 --0500] [localhost/sid#5621386b7400][rid#5621389d04d0][/index.html][4] Garbage collection took 114 microseconds.
[18/Dec/2016:13:29:37 --0500] [localhost/sid#5621386b7400][rid#5621389d04d0][/index.html][9] Garbage collection initiated with rvalue: 6841472 < 2147483647/100
[18/Dec/2016:13:29:37 --0500] [localhost/sid#5621386b7400][rid#5621389d04d0][/index.html][4] Garbage collection took 46 microseconds.

Notice multiple threads having same rand() result.
Finally, changing to ap_random_pick, as mentioned in #1286, resulted in no duplicate runs of GC:
[18/Dec/2016:13:33:08 --0500] [localhost/sid#56385f3c6400][rid#56385f6ed5d0][/index.html][9] Garbage collection initiated with rvalue: 8426056 < 2147483647/100
[18/Dec/2016:13:33:08 --0500] [localhost/sid#56385f3c6400][rid#56385f6ed5d0][/index.html][4] Garbage collection took 58 microseconds.
[18/Dec/2016:13:33:10 --0500] [localhost/sid#56385f3c6400][rid#56385f6e14a0][/index.html][9] Garbage collection initiated with rvalue: 12418543 < 2147483647/100
[18/Dec/2016:13:33:10 --0500] [localhost/sid#56385f3c6400][rid#56385f6e14a0][/index.html][4] Garbage collection took 87 microseconds.
[18/Dec/2016:13:33:11 --0500] [localhost/sid#56385f3c6400][rid#56385f6ef5e0][/index.html][9] Garbage collection initiated with rvalue: 7706903 < 2147483647/100
[18/Dec/2016:13:33:11 --0500] [localhost/sid#56385f3c6400][rid#56385f6ef5e0][/index.html][4] Garbage collection took 87 microseconds.
[18/Dec/2016:13:33:12 --0500] [localhost/sid#56385f3c6400][rid#56385f6f7620][/index.html][9] Garbage collection initiated with rvalue: 15493977 < 2147483647/100
[18/Dec/2016:13:33:12 --0500] [localhost/sid#56385f3c6400][rid#56385f6f7620][/index.html][4] Garbage collection took 53 microseconds.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1289,2016-12-20T22:56:25Z,2017-05-11T13:22:35Z,2017-05-11T13:22:35Z,CLOSED,False,1,1,1,https://github.com/bostrt,Change from using rand() to thread-safe ap_random_pick.,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1289,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1289#issuecomment-300787538,"Use of rand() led to possibility of multiple threads performing GC all at once. I temporarily added some debug logging to show this (this pull request does not include logging):
@@ -212,6 +212,7 @@ static void modsecurity_persist_data(modsec_rec *msr) {
     apr_table_entry_t *te;
     apr_time_t time_before, time_after;
     int i;
+    int rvalue;
 
     time_before = apr_time_now();
 
@@ -237,7 +238,9 @@ static void modsecurity_persist_data(modsec_rec *msr) {
     }
 
     /* Remove stale collections. */
-    if (rand() < RAND_MAX/100) {
+    rvalue = rand();
+    if (rvalue < RAND_MAX/100) {
+        msr_log(msr, 9, ""Garbage collection initiated with rvalue: %d < %d/100"", rvalue, RAND_MAX);
         arr = apr_table_elts(msr->collections);
         te = (apr_table_entry_t *)arr->elts;
         for (i = 0; i < arr->nelts; i++) {

[18/Dec/2016:13:29:29 --0500] [localhost/sid#5621386b7400][rid#5621389e8660][/index.html][9] Garbage collection initiated with rvalue: 15337631 < 2147483647/100
[18/Dec/2016:13:29:29 --0500] [localhost/sid#5621386b7400][rid#5621389e8660][/index.html][4] Garbage collection took 42 microseconds.
[18/Dec/2016:13:29:29 --0500] [localhost/sid#5621386b7400][rid#5621389ea670][/index.html][9] Garbage collection initiated with rvalue: 15337631 < 2147483647/100
[18/Dec/2016:13:29:29 --0500] [localhost/sid#5621386b7400][rid#5621389ea670][/index.html][4] Garbage collection took 122 microseconds.
[18/Dec/2016:13:29:29 --0500] [localhost/sid#5621386b7400][rid#5621389e8660][/index.html][9] Garbage collection initiated with rvalue: 15337631 < 2147483647/100
[18/Dec/2016:13:29:29 --0500] [localhost/sid#5621386b7400][rid#5621389e8660][/index.html][4] Garbage collection took 74 microseconds.
[18/Dec/2016:13:29:29 --0500] [localhost/sid#5621386b7400][rid#5621389e8660][/index.html][9] Garbage collection initiated with rvalue: 15337631 < 2147483647/100
[18/Dec/2016:13:29:29 --0500] [localhost/sid#5621386b7400][rid#5621389e8660][/index.html][4] Garbage collection took 123 microseconds.
[18/Dec/2016:13:29:29 --0500] [localhost/sid#5621386b7400][rid#5621389e8660][/index.html][9] Garbage collection initiated with rvalue: 15337631 < 2147483647/100
[18/Dec/2016:13:29:29 --0500] [localhost/sid#5621386b7400][rid#5621389e8660][/index.html][4] Garbage collection took 160 microseconds.
[18/Dec/2016:13:29:36 --0500] [localhost/sid#5621386b7400][rid#5621389e8660][/index.html][9] Garbage collection initiated with rvalue: 15337631 < 2147483647/100
[18/Dec/2016:13:29:36 --0500] [localhost/sid#5621386b7400][rid#5621389e8660][/index.html][4] Garbage collection took 53 microseconds.
[18/Dec/2016:13:29:37 --0500] [localhost/sid#5621386b7400][rid#5621389d04d0][/index.html][9] Garbage collection initiated with rvalue: 6841472 < 2147483647/100
[18/Dec/2016:13:29:37 --0500] [localhost/sid#5621386b7400][rid#5621389d04d0][/index.html][4] Garbage collection took 63 microseconds.
[18/Dec/2016:13:29:37 --0500] [localhost/sid#5621386b7400][rid#5621389d24e0][/index.html][9] Garbage collection initiated with rvalue: 6841472 < 2147483647/100
[18/Dec/2016:13:29:37 --0500] [localhost/sid#5621386b7400][rid#5621389d24e0][/index.html][4] Garbage collection took 68 microseconds.
[18/Dec/2016:13:29:37 --0500] [localhost/sid#5621386b7400][rid#5621389d04d0][/index.html][9] Garbage collection initiated with rvalue: 6841472 < 2147483647/100
[18/Dec/2016:13:29:37 --0500] [localhost/sid#5621386b7400][rid#5621389d04d0][/index.html][4] Garbage collection took 43 microseconds.
[18/Dec/2016:13:29:37 --0500] [localhost/sid#5621386b7400][rid#5621389d04d0][/index.html][9] Garbage collection initiated with rvalue: 6841472 < 2147483647/100
[18/Dec/2016:13:29:37 --0500] [localhost/sid#5621386b7400][rid#5621389d04d0][/index.html][4] Garbage collection took 114 microseconds.
[18/Dec/2016:13:29:37 --0500] [localhost/sid#5621386b7400][rid#5621389d04d0][/index.html][9] Garbage collection initiated with rvalue: 6841472 < 2147483647/100
[18/Dec/2016:13:29:37 --0500] [localhost/sid#5621386b7400][rid#5621389d04d0][/index.html][4] Garbage collection took 46 microseconds.

Notice multiple threads having same rand() result.
Finally, changing to ap_random_pick, as mentioned in #1286, resulted in no duplicate runs of GC:
[18/Dec/2016:13:33:08 --0500] [localhost/sid#56385f3c6400][rid#56385f6ed5d0][/index.html][9] Garbage collection initiated with rvalue: 8426056 < 2147483647/100
[18/Dec/2016:13:33:08 --0500] [localhost/sid#56385f3c6400][rid#56385f6ed5d0][/index.html][4] Garbage collection took 58 microseconds.
[18/Dec/2016:13:33:10 --0500] [localhost/sid#56385f3c6400][rid#56385f6e14a0][/index.html][9] Garbage collection initiated with rvalue: 12418543 < 2147483647/100
[18/Dec/2016:13:33:10 --0500] [localhost/sid#56385f3c6400][rid#56385f6e14a0][/index.html][4] Garbage collection took 87 microseconds.
[18/Dec/2016:13:33:11 --0500] [localhost/sid#56385f3c6400][rid#56385f6ef5e0][/index.html][9] Garbage collection initiated with rvalue: 7706903 < 2147483647/100
[18/Dec/2016:13:33:11 --0500] [localhost/sid#56385f3c6400][rid#56385f6ef5e0][/index.html][4] Garbage collection took 87 microseconds.
[18/Dec/2016:13:33:12 --0500] [localhost/sid#56385f3c6400][rid#56385f6f7620][/index.html][9] Garbage collection initiated with rvalue: 15493977 < 2147483647/100
[18/Dec/2016:13:33:12 --0500] [localhost/sid#56385f3c6400][rid#56385f6f7620][/index.html][4] Garbage collection took 53 microseconds.","Hi @bostrt,
Thank you for the patch! Sorry for the long delay. I've made some adjustments to have the code compiling  for our standalone version. Standalone will be using rand().
Patch is merged ;)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1298,2017-01-06T16:08:31Z,2017-05-21T20:58:13Z,2017-05-21T20:58:13Z,CLOSED,False,43,3,3,https://github.com/bostrt,GC frequency option ,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1298,https://github.com/bostrt,1,https://github.com/SpiderLabs/ModSecurity/pull/1298,This pull request adds a new directive for configuring how often garbage collections run. Running less/more often can drastically improve performance based on request load.,This pull request adds a new directive for configuring how often garbage collections run. Running less/more often can drastically improve performance based on request load.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1298,2017-01-06T16:08:31Z,2017-05-21T20:58:13Z,2017-05-21T20:58:13Z,CLOSED,False,43,3,3,https://github.com/bostrt,GC frequency option ,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1298,https://github.com/marcstern,2,https://github.com/SpiderLabs/ModSecurity/pull/1298#issuecomment-271506257,This pull request adds a new directive for configuring how often garbage collections run. Running less/more often can drastically improve performance based on request load.,"Any hint about the impact of SecCollectionGCFrequency?
How different is it from running an external process (sbdm-util)? Advantages/disadvantages?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1298,2017-01-06T16:08:31Z,2017-05-21T20:58:13Z,2017-05-21T20:58:13Z,CLOSED,False,43,3,3,https://github.com/bostrt,GC frequency option ,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1298,https://github.com/bostrt,3,https://github.com/SpiderLabs/ModSecurity/pull/1298#issuecomment-278393203,This pull request adds a new directive for configuring how often garbage collections run. Running less/more often can drastically improve performance based on request load.,"@marcstern sorry for the delayed response. The impact of running a less frequent GC significantly improves performance by reducing the number of times ModSecurity has to scan an entire database file to perform GC.
SecCollectionGCFrequency was added to prevent the need for running an external process. Also, note the main reason for addition of SecCollectionGCFrequency was to prevent high frequency scans of the database.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1298,2017-01-06T16:08:31Z,2017-05-21T20:58:13Z,2017-05-21T20:58:13Z,CLOSED,False,43,3,3,https://github.com/bostrt,GC frequency option ,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1298,https://github.com/marcstern,4,https://github.com/SpiderLabs/ModSecurity/pull/1298#issuecomment-278566945,This pull request adds a new directive for configuring how often garbage collections run. Running less/more often can drastically improve performance based on request load.,"Do I understand correctly: if I decrease the frequency, it enhances the performance but the size & fragmentation increase, thus leading to more acces problems to the keys (""Failed deleting collection"", ""Permission denied on collection"")",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1298,2017-01-06T16:08:31Z,2017-05-21T20:58:13Z,2017-05-21T20:58:13Z,CLOSED,False,43,3,3,https://github.com/bostrt,GC frequency option ,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1298,https://github.com/bostrt,5,https://github.com/SpiderLabs/ModSecurity/pull/1298#issuecomment-279182959,This pull request adds a new directive for configuring how often garbage collections run. Running less/more often can drastically improve performance based on request load.,"@marcstern Correct, just like in other garbage collection implementations, decreasing the frequency of collections will cause the database size to increase. As for fragmentation, I think that strictly depends on the collection timeout configurations.
I know I keep saying this in different ways, but I think it is the most important fact to keep in mind for this patch: ModSecurity's garbage collection scans must scan the entire database (expired and live elements). If I have a good understanding of how users/applications interact with my website and how much expired vs. live data I have in a persistent collection over time, then I should be able to tweak the garbage collection frequency to match; especially since each garbage collection scan is expensive.
I think the access problems need to be resolved independently of this performance issue. I imagine some of the other recent pull requests will help with these: #1224, #1274",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1298,2017-01-06T16:08:31Z,2017-05-21T20:58:13Z,2017-05-21T20:58:13Z,CLOSED,False,43,3,3,https://github.com/bostrt,GC frequency option ,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1298,https://github.com/bostrt,6,https://github.com/SpiderLabs/ModSecurity/pull/1298#issuecomment-279183607,This pull request adds a new directive for configuring how often garbage collections run. Running less/more often can drastically improve performance based on request load.,"@marcstern

then I should be able to tweak the garbage collection frequency to match; especially since each garbage collection scan is expensive.

Extending on this statement...
Assume I have a high traffic server receiving 100 requests per second. Also, assume I have a collection timeout of 60 seconds.
ModSecurity currently performs a garbage collection scan with probability of 1 every 100 requests. For my scenario above, that would be a scan every second. Also, this means that 59 of those scans would be useless since no collections will have timed out until the 60 second mark.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1298,2017-01-06T16:08:31Z,2017-05-21T20:58:13Z,2017-05-21T20:58:13Z,CLOSED,False,43,3,3,https://github.com/bostrt,GC frequency option ,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1298,https://github.com/bostrt,7,https://github.com/SpiderLabs/ModSecurity/pull/1298#issuecomment-279909712,This pull request adds a new directive for configuring how often garbage collections run. Running less/more often can drastically improve performance based on request load.,"@marcstern I think any concerns about ""Failed deleting collection"" in regards to this pull request can be dismissed based on #576 (comment)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1298,2017-01-06T16:08:31Z,2017-05-21T20:58:13Z,2017-05-21T20:58:13Z,CLOSED,False,43,3,3,https://github.com/bostrt,GC frequency option ,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1298,https://github.com/zimmerle,8,https://github.com/SpiderLabs/ModSecurity/pull/1298#issuecomment-302962785,This pull request adds a new directive for configuring how often garbage collections run. Running less/more often can drastically improve performance based on request load.,"The GC frequency option seems to be cool. It was already merged on the top of v2/exp/collection_garbage_freq. Won't be merged to mainline as it may be on hold/test till 2.10 as it is a significant feature.
Thanks @bostrt  :)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1301,2017-01-09T05:53:50Z,2017-04-06T16:31:41Z,2017-04-06T16:31:41Z,CLOSED,False,92,1,11,https://github.com/phantom-az, Add -K- parts support.,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1301,https://github.com/phantom-az,1,https://github.com/SpiderLabs/ModSecurity/pull/1301,Here's last year's latest part of audit_log updates.  -K- parts support.,Here's last year's latest part of audit_log updates.  -K- parts support.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1301,2017-01-09T05:53:50Z,2017-04-06T16:31:41Z,2017-04-06T16:31:41Z,CLOSED,False,92,1,11,https://github.com/phantom-az, Add -K- parts support.,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1301,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1301#issuecomment-292230450,Here's last year's latest part of audit_log updates.  -K- parts support.,"Thank @phantom-az!
Saving a request on auditlog does not depends only in the auditlog action. Currently this pull request contains conflicts, i am closing this and it is going to be used as a base for the implementation on the -K- entry in the auditlogs.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1306,2017-01-19T12:48:13Z,2017-02-24T03:36:04Z,2017-02-24T03:36:04Z,CLOSED,False,61,14,4,https://github.com/phantom-az,shared memory crash fixes,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1306,https://github.com/phantom-az,1,https://github.com/SpiderLabs/ModSecurity/pull/1306,"Fix cases when shared memory allocated by first instance of applicaion being
overwritten by another instance attaching same shared memory segments.  It happens
in case when 'nginx' server is running, but configuration is updated and 'nginx -t'
is called in order to update configuration.  Shared memory segment gets overriten by
second instance of nginx, and any call to LogFile/SharedFile::find_handler() will
cause crash.
With this fix, every initialized block is being marked with feature specific signature
assuming that block in use already, and can't be re-used yet.  For second and later
application instances yet another ftok() code is adviced to use (via recursive call to
add_new_handler()).","Fix cases when shared memory allocated by first instance of applicaion being
overwritten by another instance attaching same shared memory segments.  It happens
in case when 'nginx' server is running, but configuration is updated and 'nginx -t'
is called in order to update configuration.  Shared memory segment gets overriten by
second instance of nginx, and any call to LogFile/SharedFile::find_handler() will
cause crash.
With this fix, every initialized block is being marked with feature specific signature
assuming that block in use already, and can't be re-used yet.  For second and later
application instances yet another ftok() code is adviced to use (via recursive call to
add_new_handler()).",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1306,2017-01-19T12:48:13Z,2017-02-24T03:36:04Z,2017-02-24T03:36:04Z,CLOSED,False,61,14,4,https://github.com/phantom-az,shared memory crash fixes,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1306,https://github.com/defanator,2,https://github.com/SpiderLabs/ModSecurity/pull/1306#issuecomment-276372092,"Fix cases when shared memory allocated by first instance of applicaion being
overwritten by another instance attaching same shared memory segments.  It happens
in case when 'nginx' server is running, but configuration is updated and 'nginx -t'
is called in order to update configuration.  Shared memory segment gets overriten by
second instance of nginx, and any call to LogFile/SharedFile::find_handler() will
cause crash.
With this fix, every initialized block is being marked with feature specific signature
assuming that block in use already, and can't be re-used yet.  For second and later
application instances yet another ftok() code is adviced to use (via recursive call to
add_new_handler()).","Spent some time in attempts to make it working, but everything I have so far is the following message:
# nginx
nginx: [emerg] ""proxy_pass"" directive Failed to allocate shared memory (1): Invalid argument in /etc/nginx/nginx.conf:80

Configuration is pretty straightforward (3 server blocks with 6 locations in total, modsecurity is enabled in 3 locations with generic OWASP CRS v3.0.0).",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1306,2017-01-19T12:48:13Z,2017-02-24T03:36:04Z,2017-02-24T03:36:04Z,CLOSED,False,61,14,4,https://github.com/phantom-az,shared memory crash fixes,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1306,https://github.com/defanator,3,https://github.com/SpiderLabs/ModSecurity/pull/1306#issuecomment-276373998,"Fix cases when shared memory allocated by first instance of applicaion being
overwritten by another instance attaching same shared memory segments.  It happens
in case when 'nginx' server is running, but configuration is updated and 'nginx -t'
is called in order to update configuration.  Shared memory segment gets overriten by
second instance of nginx, and any call to LogFile/SharedFile::find_handler() will
cause crash.
With this fix, every initialized block is being marked with feature specific signature
assuming that block in use already, and can't be re-used yet.  For second and later
application instances yet another ftok() code is adviced to use (via recursive call to
add_new_handler()).","strace(1) tail:
open(""/var/log/modsec_audit.log"", O_WRONLY|O_CREAT|O_APPEND, 0666) = 6
lseek(6, 0, SEEK_END)                   = 9612542
stat(""/var/log/modsec_audit.log"", {st_mode=S_IFREG|0644, st_size=9612542, ...}) = 0
stat(""/var/log/modsec_audit.log"", {st_mode=S_IFREG|0644, st_size=9612542, ...}) = 0
shmget(0x1001aa1, 96, IPC_CREAT|0666)   = -1 EINVAL (Invalid argument)
shmdt(0x56013b4b1ba0)                   = -1 EINVAL (Invalid argument)
close(6)                                = 0
gettid()                                = 5309
write(3, ""2017/01/31 14:12:58 [emerg] 5309""..., 145) = 145
write(2, ""nginx: [emerg] \""proxy_pass\"" dire""..., 121nginx: [emerg] ""proxy_pass"" directive Failed to allocate shared memory (1): Invalid argument in /etc/nginx/nginx.conf:80) = 121",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1306,2017-01-19T12:48:13Z,2017-02-24T03:36:04Z,2017-02-24T03:36:04Z,CLOSED,False,61,14,4,https://github.com/phantom-az,shared memory crash fixes,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1306,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1306#issuecomment-282195137,"Fix cases when shared memory allocated by first instance of applicaion being
overwritten by another instance attaching same shared memory segments.  It happens
in case when 'nginx' server is running, but configuration is updated and 'nginx -t'
is called in order to update configuration.  Shared memory segment gets overriten by
second instance of nginx, and any call to LogFile/SharedFile::find_handler() will
cause crash.
With this fix, every initialized block is being marked with feature specific signature
assuming that block in use already, and can't be re-used yet.  For second and later
application instances yet another ftok() code is adviced to use (via recursive call to
add_new_handler()).","Hi @phantom-az,
Thank you for the patch!
The main reason why we have this shared memory was to avoid the logs be over-written by different process. In the fork perspective it was convenient to also share the file descriptor and other data that may be useful while writing the logs. But, the real crucial information that most be shared among the different process (and threads) is the critical section locking. It means that in practice we can remove all the other data which is not about the file name and/or the locking structure.
I made this patch, that may solve the issue:
https://github.com/SpiderLabs/ModSecurity/blob/v3/dev/parser/src/utils/shared_files.cc
Tell me if you have any concern about it.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1308,2017-01-21T17:59:41Z,2017-05-05T03:23:48Z,2017-05-05T03:23:48Z,CLOSED,False,12,2,1,https://github.com/tunetheweb,This is a fix for #992 to allow drop to work with mod_http2,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1308,https://github.com/tunetheweb,1,https://github.com/SpiderLabs/ModSecurity/pull/1308,As discussed here: #992 and here: icing/mod_h2#127.,As discussed here: #992 and here: icing/mod_h2#127.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1308,2017-01-21T17:59:41Z,2017-05-05T03:23:48Z,2017-05-05T03:23:48Z,CLOSED,False,12,2,1,https://github.com/tunetheweb,This is a fix for #992 to allow drop to work with mod_http2,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1308,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1308#issuecomment-299361646,As discussed here: #992 and here: icing/mod_h2#127.,"Hi @bazzadp,
Thank you for the patch. It was merged into v2/master.
Notice that I've made this fix here:  9b3c32b
It was necessary as master was added on version 2.4.18",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1324,2017-02-15T14:47:18Z,2017-02-16T15:38:42Z,2017-02-16T15:38:42Z,CLOSED,False,84,84,2,https://github.com/soonum,Fix some minor copy/paste typos,2,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1324,https://github.com/soonum,1,https://github.com/SpiderLabs/ModSecurity/pull/1324,"Hi @zimmerle,
While I was going trough the code in order to understand rules evaluation, I found some typos.","Hi @zimmerle,
While I was going trough the code in order to understand rules evaluation, I found some typos.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1324,2017-02-15T14:47:18Z,2017-02-16T15:38:42Z,2017-02-16T15:38:42Z,CLOSED,False,84,84,2,https://github.com/soonum,Fix some minor copy/paste typos,2,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1324,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1324#issuecomment-280365320,"Hi @zimmerle,
While I was going trough the code in order to understand rules evaluation, I found some typos.","Hi @soonum,
Thank you for the patch! I did minor modifications to make it fit on the top of the branch: /v3/dev/parser . It is merged already!",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1332,2017-02-22T21:56:14Z,2017-04-06T16:23:35Z,2017-04-06T16:23:35Z,CLOSED,False,5,3,1,https://github.com/p0pr0ck5,Don't leak an fd on fuzzy hash initialization,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1332,https://github.com/p0pr0ck5,1,https://github.com/SpiderLabs/ModSecurity/pull/1332,"Since we're re-opening this file with every invocation, let's
close our sanity check fd.","Since we're re-opening this file with every invocation, let's
close our sanity check fd.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1332,2017-02-22T21:56:14Z,2017-04-06T16:23:35Z,2017-04-06T16:23:35Z,CLOSED,False,5,3,1,https://github.com/p0pr0ck5,Don't leak an fd on fuzzy hash initialization,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1332,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1332#issuecomment-292228245,"Since we're re-opening this file with every invocation, let's
close our sanity check fd.",Closing this issue as I am reviewing it together with #1339.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1339,2017-03-03T00:14:47Z,2017-04-06T21:18:09Z,2017-04-06T21:18:09Z,CLOSED,False,44,21,2,https://github.com/p0pr0ck5,Read fuzzy hash db on init,2,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1339,https://github.com/p0pr0ck5,1,https://github.com/SpiderLabs/ModSecurity/pull/1339,"Instead of reading the fuzzy db on every invocation, read and store
the db contents during initialization and store the contents in memory.
The only significant behavior change here is that a change in db contents
now (obviously) requires a daemon restart, as no API is provided to
flush the list of ssdeep chunks.","Instead of reading the fuzzy db on every invocation, read and store
the db contents during initialization and store the contents in memory.
The only significant behavior change here is that a change in db contents
now (obviously) requires a daemon restart, as no API is provided to
flush the list of ssdeep chunks.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1339,2017-03-03T00:14:47Z,2017-04-06T21:18:09Z,2017-04-06T21:18:09Z,CLOSED,False,44,21,2,https://github.com/p0pr0ck5,Read fuzzy hash db on init,2,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1339,https://github.com/p0pr0ck5,2,https://github.com/SpiderLabs/ModSecurity/pull/1339#issuecomment-283839667,"Instead of reading the fuzzy db on every invocation, read and store
the db contents during initialization and store the contents in memory.
The only significant behavior change here is that a change in db contents
now (obviously) requires a daemon restart, as no API is provided to
flush the list of ssdeep chunks.","This also obviates #1332, so we can nix that one if this is worthwhile.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1339,2017-03-03T00:14:47Z,2017-04-06T21:18:09Z,2017-04-06T21:18:09Z,CLOSED,False,44,21,2,https://github.com/p0pr0ck5,Read fuzzy hash db on init,2,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1339,https://github.com/p0pr0ck5,3,https://github.com/SpiderLabs/ModSecurity/pull/1339#issuecomment-284873866,"Instead of reading the fuzzy db on every invocation, read and store
the db contents during initialization and store the contents in memory.
The only significant behavior change here is that a change in db contents
now (obviously) requires a daemon restart, as no API is provided to
flush the list of ssdeep chunks.","(re-did this to insert elements to the tail of the list upon initialization, so that the file contents are processed top-down during execution, matching the existing behavior).",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1339,2017-03-03T00:14:47Z,2017-04-06T21:18:09Z,2017-04-06T21:18:09Z,CLOSED,False,44,21,2,https://github.com/p0pr0ck5,Read fuzzy hash db on init,2,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1339,https://github.com/meatlayer,4,https://github.com/SpiderLabs/ModSecurity/pull/1339#issuecomment-288431187,"Instead of reading the fuzzy db on every invocation, read and store
the db contents during initialization and store the contents in memory.
The only significant behavior change here is that a change in db contents
now (obviously) requires a daemon restart, as no API is provided to
flush the list of ssdeep chunks.","@p0pr0ck5 Hello.
I also encountered memory leaks when using fuzzy hash.
Issue #1288 
Interested. You think your changes really can help to get rid of the leaks?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1339,2017-03-03T00:14:47Z,2017-04-06T21:18:09Z,2017-04-06T21:18:09Z,CLOSED,False,44,21,2,https://github.com/p0pr0ck5,Read fuzzy hash db on init,2,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1339,https://github.com/p0pr0ck5,5,https://github.com/SpiderLabs/ModSecurity/pull/1339#issuecomment-288450108,"Instead of reading the fuzzy db on every invocation, read and store
the db contents during initialization and store the contents in memory.
The only significant behavior change here is that a change in db contents
now (obviously) requires a daemon restart, as no API is provided to
flush the list of ssdeep chunks.","No, this PR is not about a memory leak. This just removes the need to re-read the fuzzy hash db from disk on every invocation. Your noted issue is unrelated to this PR.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1339,2017-03-03T00:14:47Z,2017-04-06T21:18:09Z,2017-04-06T21:18:09Z,CLOSED,False,44,21,2,https://github.com/p0pr0ck5,Read fuzzy hash db on init,2,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1339,https://github.com/zimmerle,6,https://github.com/SpiderLabs/ModSecurity/pull/1339#issuecomment-292228849,"Instead of reading the fuzzy db on every invocation, read and store
the db contents during initialization and store the contents in memory.
The only significant behavior change here is that a change in db contents
now (obviously) requires a daemon restart, as no API is provided to
flush the list of ssdeep chunks.",Pull request is currently under our buildbots - http://www.modsecurity.org/developers/buildbot/waterfall,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1339,2017-03-03T00:14:47Z,2017-04-06T21:18:09Z,2017-04-06T21:18:09Z,CLOSED,False,44,21,2,https://github.com/p0pr0ck5,Read fuzzy hash db on init,2,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1339,https://github.com/zimmerle,7,https://github.com/SpiderLabs/ModSecurity/pull/1339#issuecomment-292324836,"Instead of reading the fuzzy db on every invocation, read and store
the db contents during initialization and store the contents in memory.
The only significant behavior change here is that a change in db contents
now (obviously) requires a daemon restart, as no API is provided to
flush the list of ssdeep chunks.",Thanks @p0pr0ck5  -- merged ;),True,{'THUMBS_UP': ['https://github.com/meatlayer']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1340,2017-03-03T08:57:00Z,2017-05-05T01:08:55Z,2017-05-05T01:08:55Z,CLOSED,False,48,30,1,https://github.com/tjikkun,Fix SecConn(Read|Write)StateLimit on Apache 2.4,5,[],https://github.com/SpiderLabs/ModSecurity/pull/1340,https://github.com/tjikkun,1,https://github.com/SpiderLabs/ModSecurity/pull/1340,Fixes #1337 and #786,Fixes #1337 and #786,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1340,2017-03-03T08:57:00Z,2017-05-05T01:08:55Z,2017-05-05T01:08:55Z,CLOSED,False,48,30,1,https://github.com/tjikkun,Fix SecConn(Read|Write)StateLimit on Apache 2.4,5,[],https://github.com/SpiderLabs/ModSecurity/pull/1340,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1340#issuecomment-299348963,Fixes #1337 and #786,"Hi @tjikkun
Thank you for the patch! It is now merged and part of your master branch.
b629398 was needed in order to make it work with the standalone version.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1343,2017-03-07T13:22:37Z,2017-03-09T21:19:34Z,2017-03-09T22:23:52Z,CLOSED,False,15,1,2,https://github.com/defanator,"Fix ""make dist"" after recent changes to parser",1,[],https://github.com/SpiderLabs/ModSecurity/pull/1343,https://github.com/defanator,1,https://github.com/SpiderLabs/ModSecurity/pull/1343,"In particular, it is now possible to either build ModSecurity with pre-generated parser, or use --enable-parser-generation configure option to rebuild parser from sources.","In particular, it is now possible to either build ModSecurity with pre-generated parser, or use --enable-parser-generation configure option to rebuild parser from sources.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1343,2017-03-07T13:22:37Z,2017-03-09T21:19:34Z,2017-03-09T22:23:52Z,CLOSED,False,15,1,2,https://github.com/defanator,"Fix ""make dist"" after recent changes to parser",1,[],https://github.com/SpiderLabs/ModSecurity/pull/1343,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1343#issuecomment-285486290,"In particular, it is now possible to either build ModSecurity with pre-generated parser, or use --enable-parser-generation configure option to rebuild parser from sources.","Merged! thanks ;)
Just to notice: the Travis failure has nothing to do with the commit, it was an internal error.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1371,2017-03-31T02:37:10Z,2017-05-08T21:32:30Z,2018-09-25T04:06:52Z,CLOSED,False,1,0,1,https://github.com/nickmarden,Allow mod_session to populate environment before rule execution,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1371,https://github.com/nickmarden,1,https://github.com/SpiderLabs/ModSecurity/pull/1371,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1371,2017-03-31T02:37:10Z,2017-05-08T21:32:30Z,2018-09-25T04:06:52Z,CLOSED,False,1,0,1,https://github.com/nickmarden,Allow mod_session to populate environment before rule execution,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1371,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1371#issuecomment-297706360,,"Hi @nickmarden,
Thank you for the patch!
The normal way to change this execution order is by having the modules loaded into a different order at the Apache configuration file. However, this is not the case for this particular hook as ModSecurity is marked to be an earlier hook.
The negative side of this patch is its benefit. Let me explain: We may not be able to block a request before it hit the mod_session. Tracking session inside ModSecurity is something doable via SESSION schema. According to mod_session.c documentation , I am assuming that you are willing to read the session values via ENV vars, is that correct? Can you described a little bit more about your use case scenario?
Just for the record: this patch affect phase 2 in ModSecurity, the normal order is to have ModSecurity inspecting the content prior to mod_session.c this patch revert this order. Other phases are not affected. Phase 3 has access to the ENV vars [populated with mod_session.c] regardless of this patch.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1371,2017-03-31T02:37:10Z,2017-05-08T21:32:30Z,2018-09-25T04:06:52Z,CLOSED,False,1,0,1,https://github.com/nickmarden,Allow mod_session to populate environment before rule execution,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1371,https://github.com/csanders-git,3,https://github.com/SpiderLabs/ModSecurity/pull/1371#issuecomment-297709941,,"how does this affect processing at phase 2, i'm unclear.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1371,2017-03-31T02:37:10Z,2017-05-08T21:32:30Z,2018-09-25T04:06:52Z,CLOSED,False,1,0,1,https://github.com/nickmarden,Allow mod_session to populate environment before rule execution,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1371,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1371#issuecomment-297711310,,"Hi @csanders-git,
Before the patch:
ModSecurity -> mod_session.cc

After the patch:
mod_session.cc -> ModSecurity

It means that ModSecurity will inspect a request after it be processed by mod_session.c. That would be during the phase 2.
@csanders-git is that clear?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1371,2017-03-31T02:37:10Z,2017-05-08T21:32:30Z,2018-09-25T04:06:52Z,CLOSED,False,1,0,1,https://github.com/nickmarden,Allow mod_session to populate environment before rule execution,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1371,https://github.com/csanders-git,5,https://github.com/SpiderLabs/ModSecurity/pull/1371#issuecomment-297714857,,"Interesting, I think this generally makes sense, we want to receive a processed request -- However, this can make rules incompatible with different servers.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1371,2017-03-31T02:37:10Z,2017-05-08T21:32:30Z,2018-09-25T04:06:52Z,CLOSED,False,1,0,1,https://github.com/nickmarden,Allow mod_session to populate environment before rule execution,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1371,https://github.com/nickmarden,6,https://github.com/SpiderLabs/ModSecurity/pull/1371#issuecomment-297746009,,"Hi @zimmerle @csanders-git thanks for the feedback. I'm going to review the information on SESSION and see if it can be used to implement our use case. If so, I'll simply withdraw this PR. If not, I'll provide a clearer explanation of where the shortcoming is.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1371,2017-03-31T02:37:10Z,2017-05-08T21:32:30Z,2018-09-25T04:06:52Z,CLOSED,False,1,0,1,https://github.com/nickmarden,Allow mod_session to populate environment before rule execution,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1371,https://github.com/zimmerle,7,https://github.com/SpiderLabs/ModSecurity/pull/1371#issuecomment-298642870,,Thank you @nickmarden!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1371,2017-03-31T02:37:10Z,2017-05-08T21:32:30Z,2018-09-25T04:06:52Z,CLOSED,False,1,0,1,https://github.com/nickmarden,Allow mod_session to populate environment before rule execution,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1371,https://github.com/nickmarden,8,https://github.com/SpiderLabs/ModSecurity/pull/1371#issuecomment-298799677,,"@zimmerle @csanders-git The reason we wanted this change was that we were trying to implement the following:

A user exceeds some leaky-bucket request limit implemented in ModSecurity and is redirected to a CAPTCHA challenge page.
The backend server indicates that a user has successfully completed a CAPTCHA challenge by setting a response header.
We use mod_session's SessionHeader directive in order to intercept the backend server's response header, storing the fact that the user is not a bot in the user's (encrypted) mod_session-managed session.
During subsequent requests, this change allows us to examine the already-decrypted mod_session session contents to see if the user should be exempted from any more rate-limiting/CAPTCHA challenges.

Can you think of a way to accomplish something like this without the change we propose?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1371,2017-03-31T02:37:10Z,2017-05-08T21:32:30Z,2018-09-25T04:06:52Z,CLOSED,False,1,0,1,https://github.com/nickmarden,Allow mod_session to populate environment before rule execution,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1371,https://github.com/csanders-git,9,https://github.com/SpiderLabs/ModSecurity/pull/1371#issuecomment-298962312,,I can think of ways but not that are as efficient as this. It'd make a good writeup once it's working. Currently ModSec's persistence is very expensive to use so isn't well suited for this.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1371,2017-03-31T02:37:10Z,2017-05-08T21:32:30Z,2018-09-25T04:06:52Z,CLOSED,False,1,0,1,https://github.com/nickmarden,Allow mod_session to populate environment before rule execution,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1371,https://github.com/zimmerle,10,https://github.com/SpiderLabs/ModSecurity/pull/1371#issuecomment-299997197,,"Hi @nickmarden,
Let me close this pull request and lets have our discussion over #1372.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1371,2017-03-31T02:37:10Z,2017-05-08T21:32:30Z,2018-09-25T04:06:52Z,CLOSED,False,1,0,1,https://github.com/nickmarden,Allow mod_session to populate environment before rule execution,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1371,https://github.com/victorhora,11,https://github.com/SpiderLabs/ModSecurity/pull/1371#issuecomment-424200802,,@zimmerle I'm wondering if this is deemed important for some users we might think about adding a compile time option disabled by default? Might be simple enough (ifdef?) assuming it doesn't break other stuff I'm not predicting at this time :),True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1373,2017-04-03T09:54:53Z,2017-04-03T19:40:47Z,2017-04-07T10:25:11Z,CLOSED,False,6,0,1,https://github.com/defanator,Fix building with nginx >= 1.11.11,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1373,https://github.com/defanator,1,https://github.com/SpiderLabs/ModSecurity/pull/1373,"Closes #1359
See also:
http://hg.nginx.org/nginx/rev/e662cbf1b932","Closes #1359
See also:
http://hg.nginx.org/nginx/rev/e662cbf1b932",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1373,2017-04-03T09:54:53Z,2017-04-03T19:40:47Z,2017-04-07T10:25:11Z,CLOSED,False,6,0,1,https://github.com/defanator,Fix building with nginx >= 1.11.11,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1373,https://github.com/defanator,2,https://github.com/SpiderLabs/ModSecurity/pull/1373#issuecomment-292501625,"Closes #1359
See also:
http://hg.nginx.org/nginx/rev/e662cbf1b932","This one may be incomplete.
See the corresponding PR here:
openresty/lua-nginx-module#1017",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1374,2017-04-03T23:52:40Z,2017-04-06T12:57:09Z,2017-04-06T16:17:50Z,CLOSED,False,1,1,1,https://github.com/csanders-git,add support for soap+xml,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1374,https://github.com/csanders-git,1,https://github.com/SpiderLabs/ModSecurity/pull/1374,"As was talked about by @emphazer in SpiderLabs/owasp-modsecurity-crs#721, RFC 3902 adds support for the application/soap+xml header used by SOAP 1.2.","As was talked about by @emphazer in SpiderLabs/owasp-modsecurity-crs#721, RFC 3902 adds support for the application/soap+xml header used by SOAP 1.2.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1374,2017-04-03T23:52:40Z,2017-04-06T12:57:09Z,2017-04-06T16:17:50Z,CLOSED,False,1,1,1,https://github.com/csanders-git,add support for soap+xml,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1374,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1374#issuecomment-292165977,"As was talked about by @emphazer in SpiderLabs/owasp-modsecurity-crs#721, RFC 3902 adds support for the application/soap+xml header used by SOAP 1.2.","It was also merge into v3/master.
Thank you.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1379,2017-04-10T10:02:03Z,2017-04-11T14:12:58Z,2017-04-27T14:29:38Z,CLOSED,False,2,2,1,https://github.com/marcstern,Fix missing rule id in log,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1379,https://github.com/marcstern,1,https://github.com/SpiderLabs/ModSecurity/pull/1379,See #391,See #391,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1379,2017-04-10T10:02:03Z,2017-04-11T14:12:58Z,2017-04-27T14:29:38Z,CLOSED,False,2,2,1,https://github.com/marcstern,Fix missing rule id in log,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1379,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1379#issuecomment-293276149,See #391,Merged thanks ;),True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1380,2017-04-10T10:28:35Z,2017-04-26T18:28:46Z,2017-04-27T14:29:36Z,CLOSED,False,29,5,3,https://github.com/marcstern,Option to disable logging of collection delete problem,5,[],https://github.com/SpiderLabs/ModSecurity/pull/1380,https://github.com/marcstern,1,https://github.com/SpiderLabs/ModSecurity/pull/1380,"in audit log when log level < 9
[Issue #576 - Marc Stern]","in audit log when log level < 9
[Issue #576 - Marc Stern]",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1380,2017-04-10T10:28:35Z,2017-04-26T18:28:46Z,2017-04-27T14:29:36Z,CLOSED,False,29,5,3,https://github.com/marcstern,Option to disable logging of collection delete problem,5,[],https://github.com/SpiderLabs/ModSecurity/pull/1380,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1380#issuecomment-292980390,"in audit log when log level < 9
[Issue #576 - Marc Stern]","Hi @marcstern,
After used --enable-collection-delete-problem-logging=no i've got this:
cc1: warning: unrecognized gcc debugging option: e
cc1: warning: unrecognized gcc debugging option: l
cc1: warning: unrecognized gcc debugging option: e
cc1: warning: unrecognized gcc debugging option: t
cc1: warning: unrecognized gcc debugging option: e
cc1: warning: unrecognized gcc debugging option: -
cc1: warning: unrecognized gcc debugging option: r
cc1: warning: unrecognized gcc debugging option: o
cc1: warning: unrecognized gcc debugging option: b
cc1: warning: unrecognized gcc debugging option: l
cc1: warning: unrecognized gcc debugging option: e
cc1: warning: unrecognized gcc debugging option: m",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1380,2017-04-10T10:28:35Z,2017-04-26T18:28:46Z,2017-04-27T14:29:36Z,CLOSED,False,29,5,3,https://github.com/marcstern,Option to disable logging of collection delete problem,5,[],https://github.com/SpiderLabs/ModSecurity/pull/1380,https://github.com/marcstern,3,https://github.com/SpiderLabs/ModSecurity/pull/1380#issuecomment-293180196,"in audit log when log level < 9
[Issue #576 - Marc Stern]",done,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1380,2017-04-10T10:28:35Z,2017-04-26T18:28:46Z,2017-04-27T14:29:36Z,CLOSED,False,29,5,3,https://github.com/marcstern,Option to disable logging of collection delete problem,5,[],https://github.com/SpiderLabs/ModSecurity/pull/1380,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1380#issuecomment-297500749,"in audit log when log level < 9
[Issue #576 - Marc Stern]",Thanks. Patch was accepted after a few changes.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1381,2017-04-10T10:57:34Z,2017-04-26T21:14:14Z,2017-04-27T14:29:29Z,CLOSED,False,2304,2280,3,https://github.com/marcstern,Option to disable logging of Apache handler in audit log,4,[],https://github.com/SpiderLabs/ModSecurity/pull/1381,https://github.com/marcstern,1,https://github.com/SpiderLabs/ModSecurity/pull/1381,"when log level < 9
[Issue #1070 - Marc Stern]","when log level < 9
[Issue #1070 - Marc Stern]",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1381,2017-04-10T10:57:34Z,2017-04-26T21:14:14Z,2017-04-27T14:29:29Z,CLOSED,False,2304,2280,3,https://github.com/marcstern,Option to disable logging of Apache handler in audit log,4,[],https://github.com/SpiderLabs/ModSecurity/pull/1381,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1381#issuecomment-292984008,"when log level < 9
[Issue #1070 - Marc Stern]",Please make sure that the JSON audit log is also covered.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1381,2017-04-10T10:57:34Z,2017-04-26T21:14:14Z,2017-04-27T14:29:29Z,CLOSED,False,2304,2280,3,https://github.com/marcstern,Option to disable logging of Apache handler in audit log,4,[],https://github.com/SpiderLabs/ModSecurity/pull/1381,https://github.com/marcstern,3,https://github.com/SpiderLabs/ModSecurity/pull/1381#issuecomment-293180176,"when log level < 9
[Issue #1070 - Marc Stern]",done,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1381,2017-04-10T10:57:34Z,2017-04-26T21:14:14Z,2017-04-27T14:29:29Z,CLOSED,False,2304,2280,3,https://github.com/marcstern,Option to disable logging of Apache handler in audit log,4,[],https://github.com/SpiderLabs/ModSecurity/pull/1381,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1381#issuecomment-297543211,"when log level < 9
[Issue #1070 - Marc Stern]",Thanks. Merged after some modifications.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1382,2017-04-10T11:19:06Z,2017-04-26T21:23:24Z,2017-04-27T11:14:05Z,CLOSED,False,25,1,3,https://github.com/marcstern,Option to disable logging of log producer in audit log,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1382,https://github.com/marcstern,1,https://github.com/SpiderLabs/ModSecurity/pull/1382,"when log level < 9.
[Issue #1069 - Marc Stern]","when log level < 9.
[Issue #1069 - Marc Stern]",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1382,2017-04-10T11:19:06Z,2017-04-26T21:23:24Z,2017-04-27T11:14:05Z,CLOSED,False,25,1,3,https://github.com/marcstern,Option to disable logging of log producer in audit log,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1382,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1382#issuecomment-292984034,"when log level < 9.
[Issue #1069 - Marc Stern]",Please make sure that the JSON audit log is also covered.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1382,2017-04-10T11:19:06Z,2017-04-26T21:23:24Z,2017-04-27T11:14:05Z,CLOSED,False,25,1,3,https://github.com/marcstern,Option to disable logging of log producer in audit log,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1382,https://github.com/marcstern,3,https://github.com/SpiderLabs/ModSecurity/pull/1382#issuecomment-293180162,"when log level < 9.
[Issue #1069 - Marc Stern]",done,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1382,2017-04-10T11:19:06Z,2017-04-26T21:23:24Z,2017-04-27T11:14:05Z,CLOSED,False,25,1,3,https://github.com/marcstern,Option to disable logging of log producer in audit log,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1382,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1382#issuecomment-297545267,"when log level < 9.
[Issue #1069 - Marc Stern]","Hi @marcstern,
Made a comment in your patch, please verify. Before send me any updates make sure to do it in a clean tree. Please also avoid to long commit to replaced the \r with \r\n. Thanks.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1382,2017-04-10T11:19:06Z,2017-04-26T21:23:24Z,2017-04-27T11:14:05Z,CLOSED,False,25,1,3,https://github.com/marcstern,Option to disable logging of log producer in audit log,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1382,https://github.com/marcstern,5,https://github.com/SpiderLabs/ModSecurity/pull/1382#issuecomment-297645785,"when log level < 9.
[Issue #1069 - Marc Stern]","I can't see, in ""Files changed"", in which files \r were replaced by \r\n.
I can't find this on my local copy either.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1383,2017-04-10T12:37:40Z,2017-04-26T21:29:30Z,2017-04-26T21:29:30Z,CLOSED,False,2304,2280,3,https://github.com/marcstern,Option to disable logging of dechunking in audit log,5,[],https://github.com/SpiderLabs/ModSecurity/pull/1383,https://github.com/marcstern,1,https://github.com/SpiderLabs/ModSecurity/pull/1383,"when log level < 9.
[Issue #1068 - Marc Stern]","when log level < 9.
[Issue #1068 - Marc Stern]",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1383,2017-04-10T12:37:40Z,2017-04-26T21:29:30Z,2017-04-26T21:29:30Z,CLOSED,False,2304,2280,3,https://github.com/marcstern,Option to disable logging of dechunking in audit log,5,[],https://github.com/SpiderLabs/ModSecurity/pull/1383,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1383#issuecomment-292984057,"when log level < 9.
[Issue #1068 - Marc Stern]",Please make sure that the JSON audit log is also covered.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1383,2017-04-10T12:37:40Z,2017-04-26T21:29:30Z,2017-04-26T21:29:30Z,CLOSED,False,2304,2280,3,https://github.com/marcstern,Option to disable logging of dechunking in audit log,5,[],https://github.com/SpiderLabs/ModSecurity/pull/1383,https://github.com/marcstern,3,https://github.com/SpiderLabs/ModSecurity/pull/1383#issuecomment-293180145,"when log level < 9.
[Issue #1068 - Marc Stern]",done,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1383,2017-04-10T12:37:40Z,2017-04-26T21:29:30Z,2017-04-26T21:29:30Z,CLOSED,False,2304,2280,3,https://github.com/marcstern,Option to disable logging of dechunking in audit log,5,[],https://github.com/SpiderLabs/ModSecurity/pull/1383,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1383#issuecomment-297546742,"when log level < 9.
[Issue #1068 - Marc Stern]",I am closing this pull request. There are comments on the patches.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1384,2017-04-10T12:48:54Z,2017-04-26T21:32:32Z,2017-04-27T08:55:49Z,CLOSED,False,2307,2280,3,https://github.com/marcstern,Option to disable logging of stopwatches in audit log.,3,[],https://github.com/SpiderLabs/ModSecurity/pull/1384,https://github.com/marcstern,1,https://github.com/SpiderLabs/ModSecurity/pull/1384,[Issue #1067 - Marc Stern],[Issue #1067 - Marc Stern],True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1384,2017-04-10T12:48:54Z,2017-04-26T21:32:32Z,2017-04-27T08:55:49Z,CLOSED,False,2307,2280,3,https://github.com/marcstern,Option to disable logging of stopwatches in audit log.,3,[],https://github.com/SpiderLabs/ModSecurity/pull/1384,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1384#issuecomment-292984076,[Issue #1067 - Marc Stern],Please make sure that the JSON audit log is also covered.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1384,2017-04-10T12:48:54Z,2017-04-26T21:32:32Z,2017-04-27T08:55:49Z,CLOSED,False,2307,2280,3,https://github.com/marcstern,Option to disable logging of stopwatches in audit log.,3,[],https://github.com/SpiderLabs/ModSecurity/pull/1384,https://github.com/marcstern,3,https://github.com/SpiderLabs/ModSecurity/pull/1384#issuecomment-293180129,[Issue #1067 - Marc Stern],done,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1384,2017-04-10T12:48:54Z,2017-04-26T21:32:32Z,2017-04-27T08:55:49Z,CLOSED,False,2307,2280,3,https://github.com/marcstern,Option to disable logging of stopwatches in audit log.,3,[],https://github.com/SpiderLabs/ModSecurity/pull/1384,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1384#issuecomment-297547474,[Issue #1067 - Marc Stern],Closing as explained in the comments.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1385,2017-04-10T13:03:32Z,2017-04-10T15:21:54Z,2017-04-10T15:21:54Z,CLOSED,False,22,1,3,https://github.com/marcstern,"Option to disable logging of ""Server"" in audit log",1,[],https://github.com/SpiderLabs/ModSecurity/pull/1385,https://github.com/marcstern,1,https://github.com/SpiderLabs/ModSecurity/pull/1385,"when log level < 9.
[Issue #1070 - Marc Stern]","when log level < 9.
[Issue #1070 - Marc Stern]",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1385,2017-04-10T13:03:32Z,2017-04-10T15:21:54Z,2017-04-10T15:21:54Z,CLOSED,False,22,1,3,https://github.com/marcstern,"Option to disable logging of ""Server"" in audit log",1,[],https://github.com/SpiderLabs/ModSecurity/pull/1385,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1385#issuecomment-292983077,"when log level < 9.
[Issue #1070 - Marc Stern]",Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1393,2017-04-20T03:43:23Z,2017-04-24T19:38:19Z,2017-04-24T19:38:19Z,CLOSED,False,2,2,1,https://github.com/metalspawn,Fix parsing error message for JSON format,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1393,https://github.com/metalspawn,1,https://github.com/SpiderLabs/ModSecurity/pull/1393,"This is a very small change to bring the request body parsing error message in line with the format being checked.
It was discovered during an investigation into the causes of #1392.","This is a very small change to bring the request body parsing error message in line with the format being checked.
It was discovered during an investigation into the causes of #1392.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1393,2017-04-20T03:43:23Z,2017-04-24T19:38:19Z,2017-04-24T19:38:19Z,CLOSED,False,2,2,1,https://github.com/metalspawn,Fix parsing error message for JSON format,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1393,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1393#issuecomment-296799884,"This is a very small change to bring the request body parsing error message in line with the format being checked.
It was discovered during an investigation into the causes of #1392.",Merged thanks ;),True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1400,2017-04-27T15:39:58Z,2017-05-08T22:11:43Z,2017-05-10T11:00:17Z,CLOSED,False,30,2,3,https://github.com/marcstern,Option to disable logging of log producer (2nd try),4,[],https://github.com/SpiderLabs/ModSecurity/pull/1400,https://github.com/marcstern,1,https://github.com/SpiderLabs/ModSecurity/pull/1400,[Issue #1069 - Marc Stern],[Issue #1069 - Marc Stern],True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1400,2017-04-27T15:39:58Z,2017-05-08T22:11:43Z,2017-05-10T11:00:17Z,CLOSED,False,30,2,3,https://github.com/marcstern,Option to disable logging of log producer (2nd try),4,[],https://github.com/SpiderLabs/ModSecurity/pull/1400,https://github.com/marcstern,2,https://github.com/SpiderLabs/ModSecurity/pull/1400#issuecomment-298910698,[Issue #1069 - Marc Stern],Fixed,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1400,2017-04-27T15:39:58Z,2017-05-08T22:11:43Z,2017-05-10T11:00:17Z,CLOSED,False,30,2,3,https://github.com/marcstern,Option to disable logging of log producer (2nd try),4,[],https://github.com/SpiderLabs/ModSecurity/pull/1400,https://github.com/marcstern,3,https://github.com/SpiderLabs/ModSecurity/pull/1400#issuecomment-299155173,[Issue #1069 - Marc Stern],"The goal was to remove all the ""contextual"" environment, which is indeed more than the producer. Would it be OK with an explicit name (also in configure) like ""LOG_NO_SERVER_CONTEXT""?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1400,2017-04-27T15:39:58Z,2017-05-08T22:11:43Z,2017-05-10T11:00:17Z,CLOSED,False,30,2,3,https://github.com/marcstern,Option to disable logging of log producer (2nd try),4,[],https://github.com/SpiderLabs/ModSecurity/pull/1400,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1400#issuecomment-299177854,[Issue #1069 - Marc Stern],"If that is the goal, it should be clear to whom may read the code and to the user who may enabling it during the configure. So we have to change the help message and the if/defs.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1400,2017-04-27T15:39:58Z,2017-05-08T22:11:43Z,2017-05-10T11:00:17Z,CLOSED,False,30,2,3,https://github.com/marcstern,Option to disable logging of log producer (2nd try),4,[],https://github.com/SpiderLabs/ModSecurity/pull/1400,https://github.com/marcstern,5,https://github.com/SpiderLabs/ModSecurity/pull/1400#issuecomment-299395674,[Issue #1069 - Marc Stern],Done: {dis|en}able-server-context-logging,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1401,2017-04-27T15:42:01Z,2017-05-03T00:47:54Z,2017-05-10T11:00:23Z,CLOSED,False,1,1,1,https://github.com/marcstern,Fix in configure.ac: missing $log_handler in MODSEC_EXTRA_CFLAGS,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1401,https://github.com/marcstern,1,https://github.com/SpiderLabs/ModSecurity/pull/1401,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1401,2017-04-27T15:42:01Z,2017-05-03T00:47:54Z,2017-05-10T11:00:23Z,CLOSED,False,1,1,1,https://github.com/marcstern,Fix in configure.ac: missing $log_handler in MODSEC_EXTRA_CFLAGS,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1401,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1401#issuecomment-298800097,,Merged thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1402,2017-04-27T15:42:19Z,2017-05-02T21:30:04Z,2017-05-10T11:00:21Z,CLOSED,False,28,1,3,https://github.com/marcstern,Option to disable logging of stopwatches (2nd try),1,[],https://github.com/SpiderLabs/ModSecurity/pull/1402,https://github.com/marcstern,1,https://github.com/SpiderLabs/ModSecurity/pull/1402,[Issue #1067 - Marc Stern],[Issue #1067 - Marc Stern],True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1402,2017-04-27T15:42:19Z,2017-05-02T21:30:04Z,2017-05-10T11:00:21Z,CLOSED,False,28,1,3,https://github.com/marcstern,Option to disable logging of stopwatches (2nd try),1,[],https://github.com/SpiderLabs/ModSecurity/pull/1402,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1402#issuecomment-298748314,[Issue #1067 - Marc Stern],Same concerns of #1403. Working on it.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1402,2017-04-27T15:42:19Z,2017-05-02T21:30:04Z,2017-05-10T11:00:21Z,CLOSED,False,28,1,3,https://github.com/marcstern,Option to disable logging of stopwatches (2nd try),1,[],https://github.com/SpiderLabs/ModSecurity/pull/1402,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1402#issuecomment-298767177,[Issue #1067 - Marc Stern],Merged. thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1403,2017-04-27T15:42:27Z,2017-05-02T20:03:10Z,2017-05-10T11:00:19Z,CLOSED,False,25,1,3,https://github.com/marcstern,Option to disable logging of dechunking  (2nd try),1,[],https://github.com/SpiderLabs/ModSecurity/pull/1403,https://github.com/marcstern,1,https://github.com/SpiderLabs/ModSecurity/pull/1403,[Issue #1068 - Marc Stern],[Issue #1068 - Marc Stern],True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1403,2017-04-27T15:42:27Z,2017-05-02T20:03:10Z,2017-05-10T11:00:19Z,CLOSED,False,25,1,3,https://github.com/marcstern,Option to disable logging of dechunking  (2nd try),1,[],https://github.com/SpiderLabs/ModSecurity/pull/1403,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1403#issuecomment-298648345,[Issue #1068 - Marc Stern],Under the buildbots - https://github.com/SpiderLabs/ModSecurity/tree/v2/dev/pull_1403,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1403,2017-04-27T15:42:27Z,2017-05-02T20:03:10Z,2017-05-10T11:00:19Z,CLOSED,False,25,1,3,https://github.com/marcstern,Option to disable logging of dechunking  (2nd try),1,[],https://github.com/SpiderLabs/ModSecurity/pull/1403,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1403#issuecomment-298745076,[Issue #1068 - Marc Stern],I've patched the code to address my own concerns. This is now merged.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1404,2017-04-27T15:58:58Z,2017-05-03T18:25:43Z,2017-05-10T11:00:18Z,CLOSED,False,12,10,1,https://github.com/marcstern,rule id is not logged in case rule has no msg,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1404,https://github.com/marcstern,1,https://github.com/SpiderLabs/ModSecurity/pull/1404,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1404,2017-04-27T15:58:58Z,2017-05-03T18:25:43Z,2017-05-10T11:00:18Z,CLOSED,False,12,10,1,https://github.com/marcstern,rule id is not logged in case rule has no msg,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1404,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1404#issuecomment-298995291,,Merged thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1410,2017-05-10T12:17:40Z,2017-05-10T15:31:50Z,2017-05-10T15:31:50Z,CLOSED,False,2,1,2,https://github.com/marcstern,"Allow $1, $2 ... $9 in @rsub replacement string",2,[],https://github.com/SpiderLabs/ModSecurity/pull/1410,https://github.com/marcstern,1,https://github.com/SpiderLabs/ModSecurity/pull/1410,"PCRE allows both \1 and $1 in the replacement string for the captured group.
ModSecurity only supports \1. This change adds support for the $1 notation.
Although the \1 may look sufficient, it's incompatible with mod_macro as mod_macro strips backslashes on each macro iteration. In order to use \1 as a macro parameter, you need to use \1. It's even worse: in case the macro calls another macro, you would need to use \\1 - as far as you know how deeply the macros are nested, which is usually not the case.
The $1 syntax solves that problem.","PCRE allows both \1 and $1 in the replacement string for the captured group.
ModSecurity only supports \1. This change adds support for the $1 notation.
Although the \1 may look sufficient, it's incompatible with mod_macro as mod_macro strips backslashes on each macro iteration. In order to use \1 as a macro parameter, you need to use \1. It's even worse: in case the macro calls another macro, you would need to use \\1 - as far as you know how deeply the macros are nested, which is usually not the case.
The $1 syntax solves that problem.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1413,2017-05-10T16:00:15Z,2017-05-16T20:35:27Z,2017-07-24T12:38:06Z,CLOSED,False,20,1,3,https://github.com/marcstern,"Option to disable logging of notice info at start (versions, ...) in error log.",2,[],https://github.com/SpiderLabs/ModSecurity/pull/1413,https://github.com/marcstern,1,https://github.com/SpiderLabs/ModSecurity/pull/1413,Also fixed typo in configure.ac in $log_server_context,Also fixed typo in configure.ac in $log_server_context,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1413,2017-05-10T16:00:15Z,2017-05-16T20:35:27Z,2017-07-24T12:38:06Z,CLOSED,False,20,1,3,https://github.com/marcstern,"Option to disable logging of notice info at start (versions, ...) in error log.",2,[],https://github.com/SpiderLabs/ModSecurity/pull/1413,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1413#issuecomment-300568002,Also fixed typo in configure.ac in $log_server_context,"Hi @marcstern,
I am not able to foresee where this specific option can cause a benefit. Can you enlighten me ?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1413,2017-05-10T16:00:15Z,2017-05-16T20:35:27Z,2017-07-24T12:38:06Z,CLOSED,False,20,1,3,https://github.com/marcstern,"Option to disable logging of notice info at start (versions, ...) in error log.",2,[],https://github.com/SpiderLabs/ModSecurity/pull/1413,https://github.com/marcstern,3,https://github.com/SpiderLabs/ModSecurity/pull/1413#issuecomment-300692194,Also fixed typo in configure.ac in $log_server_context,This information is useless when you have a good change control in place and takes a lot of space in the log when you restart the server several times a day,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1413,2017-05-10T16:00:15Z,2017-05-16T20:35:27Z,2017-07-24T12:38:06Z,CLOSED,False,20,1,3,https://github.com/marcstern,"Option to disable logging of notice info at start (versions, ...) in error log.",2,[],https://github.com/SpiderLabs/ModSecurity/pull/1413,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1413#issuecomment-301907547,Also fixed typo in configure.ac in $log_server_context,"Hi @marcstern,
Maintain a lot of options in the configuration file is tricker. I would recommend you to pass the log over a pipeline where you can filter the log to save what is interesting to you. It seems to me that this request is particular interesting to your environment. Please explain why a filter via pipe is not interesting to you.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1413,2017-05-10T16:00:15Z,2017-05-16T20:35:27Z,2017-07-24T12:38:06Z,CLOSED,False,20,1,3,https://github.com/marcstern,"Option to disable logging of notice info at start (versions, ...) in error log.",2,[],https://github.com/SpiderLabs/ModSecurity/pull/1413,https://github.com/marcstern,5,https://github.com/SpiderLabs/ModSecurity/pull/1413#issuecomment-301995050,Also fixed typo in configure.ac in $log_server_context,performance on high load,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1413,2017-05-10T16:00:15Z,2017-05-16T20:35:27Z,2017-07-24T12:38:06Z,CLOSED,False,20,1,3,https://github.com/marcstern,"Option to disable logging of notice info at start (versions, ...) in error log.",2,[],https://github.com/SpiderLabs/ModSecurity/pull/1413,https://github.com/zimmerle,6,https://github.com/SpiderLabs/ModSecurity/pull/1413#issuecomment-302091908,Also fixed typo in configure.ac in $log_server_context,We do have very high load servers running logs into pipes and they work like a charm. The expensive computation is actually save the data to the disk (or SSD). The filter is negligible. What are you using as a the pipe application?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1414,2017-05-10T16:06:17Z,2017-05-16T20:43:46Z,2017-05-16T20:44:25Z,CLOSED,False,2,1,2,https://github.com/marcstern,"Allow $1, $2 ... $9 in @rsub replacement string",2,[],https://github.com/SpiderLabs/ModSecurity/pull/1414,https://github.com/marcstern,1,https://github.com/SpiderLabs/ModSecurity/pull/1414,"PCRE supports \1 and $1 for capture groups in replacement string.
ModSecurity only supports \1.
Although the \1 syntax works most of the time, it is incompatible with mod_macro, as \ are stripped from parameters. To use \1 in a parameter, you need to use \\1. It's even worse: if you don't know how many macros are nested (it's the case most of the time), you don't know how many \ to use.
This adds the support for the $1 syntax, that works nicely with mod_macro (or without it).","PCRE supports \1 and $1 for capture groups in replacement string.
ModSecurity only supports \1.
Although the \1 syntax works most of the time, it is incompatible with mod_macro, as \ are stripped from parameters. To use \1 in a parameter, you need to use \\1. It's even worse: if you don't know how many macros are nested (it's the case most of the time), you don't know how many \ to use.
This adds the support for the $1 syntax, that works nicely with mod_macro (or without it).",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1414,2017-05-10T16:06:17Z,2017-05-16T20:43:46Z,2017-05-16T20:44:25Z,CLOSED,False,2,1,2,https://github.com/marcstern,"Allow $1, $2 ... $9 in @rsub replacement string",2,[],https://github.com/SpiderLabs/ModSecurity/pull/1414,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1414#issuecomment-301909749,"PCRE supports \1 and $1 for capture groups in replacement string.
ModSecurity only supports \1.
Although the \1 syntax works most of the time, it is incompatible with mod_macro, as \ are stripped from parameters. To use \1 in a parameter, you need to use \\1. It's even worse: if you don't know how many macros are nested (it's the case most of the time), you don't know how many \ to use.
This adds the support for the $1 syntax, that works nicely with mod_macro (or without it).","Hi @marcstern,
I understand the value of this possibility, but maintain those multiple options may be trickier. There are some things that we are willing to test, one of those test includes the option to try other regular expression engines, therefore we want to limit the options to make easy the integration with other tools, that may or may not have those different options. So the confort to not to deal with the multiple slashes may be a problem to integrate other engines, or even to keep the compatibility between version 3 and version 2.x. Therefore I am closing this pull request.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1415,2017-05-11T04:07:45Z,2017-05-16T20:27:33Z,2017-05-16T20:27:33Z,CLOSED,False,1359,849,7,https://github.com/victorhora,Fix --enable-docs,1,"['2.x', 'RIP - release-2.9.2']",https://github.com/SpiderLabs/ModSecurity/pull/1415,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1415,"modified:   CHANGES


Added checks for Doxygen and enabled build options to create docs when --enable-docs is set:
modified:   configure.ac
Created Makefile:
new file:   doc/Makefile.am
Files renamed and adjusted to be correctly handled by Make and Doxygen
renamed:    doc/doxygen-apache.conf -> doc/doxygen-apache.in
renamed:    doc/doxygen-iis.conf -> doc/doxygen-iis.in
renamed:    doc/doxygen-nginx.conf -> doc/doxygen-nginx.in
renamed:    doc/doxygen-standalone.conf -> doc/doxygen-standalone.in","modified:   CHANGES


Added checks for Doxygen and enabled build options to create docs when --enable-docs is set:
modified:   configure.ac
Created Makefile:
new file:   doc/Makefile.am
Files renamed and adjusted to be correctly handled by Make and Doxygen
renamed:    doc/doxygen-apache.conf -> doc/doxygen-apache.in
renamed:    doc/doxygen-iis.conf -> doc/doxygen-iis.in
renamed:    doc/doxygen-nginx.conf -> doc/doxygen-nginx.in
renamed:    doc/doxygen-standalone.conf -> doc/doxygen-standalone.in",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1415,2017-05-11T04:07:45Z,2017-05-16T20:27:33Z,2017-05-16T20:27:33Z,CLOSED,False,1359,849,7,https://github.com/victorhora,Fix --enable-docs,1,"['2.x', 'RIP - release-2.9.2']",https://github.com/SpiderLabs/ModSecurity/pull/1415,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1415#issuecomment-301905357,"modified:   CHANGES


Added checks for Doxygen and enabled build options to create docs when --enable-docs is set:
modified:   configure.ac
Created Makefile:
new file:   doc/Makefile.am
Files renamed and adjusted to be correctly handled by Make and Doxygen
renamed:    doc/doxygen-apache.conf -> doc/doxygen-apache.in
renamed:    doc/doxygen-iis.conf -> doc/doxygen-iis.in
renamed:    doc/doxygen-nginx.conf -> doc/doxygen-nginx.in
renamed:    doc/doxygen-standalone.conf -> doc/doxygen-standalone.in","Merged, thanks!",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1429,2017-05-24T15:15:09Z,2017-05-31T13:12:14Z,2017-05-31T13:12:14Z,CLOSED,False,6,1,2,https://github.com/florian-eichelberger,Json Body Sanitizing,4,[],https://github.com/SpiderLabs/ModSecurity/pull/1429,https://github.com/florian-eichelberger,1,https://github.com/SpiderLabs/ModSecurity/pull/1429,The change should allow sanitizing the JSON Body requests for the apache module by using native logging (as this was requested earlier and is used locally here).,The change should allow sanitizing the JSON Body requests for the apache module by using native logging (as this was requested earlier and is used locally here).,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1429,2017-05-24T15:15:09Z,2017-05-31T13:12:14Z,2017-05-31T13:12:14Z,CLOSED,False,6,1,2,https://github.com/florian-eichelberger,Json Body Sanitizing,4,[],https://github.com/SpiderLabs/ModSecurity/pull/1429,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1429#issuecomment-304862830,The change should allow sanitizing the JSON Body requests for the apache module by using native logging (as this was requested earlier and is used locally here).,"Hi @florian-eichelberger,
Thank you for the patch! That is indeed a good feature [or feature improvement] to have.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1429,2017-05-24T15:15:09Z,2017-05-31T13:12:14Z,2017-05-31T13:12:14Z,CLOSED,False,6,1,2,https://github.com/florian-eichelberger,Json Body Sanitizing,4,[],https://github.com/SpiderLabs/ModSecurity/pull/1429,https://github.com/florian-eichelberger,3,https://github.com/SpiderLabs/ModSecurity/pull/1429#issuecomment-304866201,The change should allow sanitizing the JSON Body requests for the apache module by using native logging (as this was requested earlier and is used locally here).,Please be so kind and tell me how to fix the Travis CI build error :),True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1429,2017-05-24T15:15:09Z,2017-05-31T13:12:14Z,2017-05-31T13:12:14Z,CLOSED,False,6,1,2,https://github.com/florian-eichelberger,Json Body Sanitizing,4,[],https://github.com/SpiderLabs/ModSecurity/pull/1429,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1429#issuecomment-304867732,The change should allow sanitizing the JSON Body requests for the apache module by using native logging (as this was requested earlier and is used locally here).,"@florian-eichelberger we have two different continuous integration in place:
1 - Buildbots
2 - Travis
The Buildbots are meant to run for v2 builds while the Travis is only used by v3. That is why it is failing for your branch. The Buildbots are testing your code now:
http://www.modsecurity.org/developers/buildbot/waterfall",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1429,2017-05-24T15:15:09Z,2017-05-31T13:12:14Z,2017-05-31T13:12:14Z,CLOSED,False,6,1,2,https://github.com/florian-eichelberger,Json Body Sanitizing,4,[],https://github.com/SpiderLabs/ModSecurity/pull/1429,https://github.com/zimmerle,5,https://github.com/SpiderLabs/ModSecurity/pull/1429#issuecomment-305182082,The change should allow sanitizing the JSON Body requests for the apache module by using native logging (as this was requested earlier and is used locally here).,"Hi @florian-eichelberger,
Buildbots went ok ;) I am moving your patch to the branch:  v2/exp/json_sanitizer. It will be on hold till out next release.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1433,2017-05-26T23:36:40Z,2017-05-30T02:00:15Z,2017-05-30T02:00:15Z,CLOSED,False,5619,5590,5,https://github.com/victorhora,Add missing hexDecode transformation to seclang parser,1,"['RIP - libmodsecurity', 'RIP - libmodsec - missing transformation']",https://github.com/SpiderLabs/ModSecurity/pull/1433,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1433,"This solves solves the Invalid action: t:hexDecode error if one tries to use the hexDecode transformation with libModSecurity.
The transformation itself was already implemented at hexdecode.cc but it was missing some references in the parser.","This solves solves the Invalid action: t:hexDecode error if one tries to use the hexDecode transformation with libModSecurity.
The transformation itself was already implemented at hexdecode.cc but it was missing some references in the parser.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1433,2017-05-26T23:36:40Z,2017-05-30T02:00:15Z,2017-05-30T02:00:15Z,CLOSED,False,5619,5590,5,https://github.com/victorhora,Add missing hexDecode transformation to seclang parser,1,"['RIP - libmodsecurity', 'RIP - libmodsec - missing transformation']",https://github.com/SpiderLabs/ModSecurity/pull/1433,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1433#issuecomment-304756639,"This solves solves the Invalid action: t:hexDecode error if one tries to use the hexDecode transformation with libModSecurity.
The transformation itself was already implemented at hexdecode.cc but it was missing some references in the parser.",Merged ;) thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1436,2017-05-29T21:09:31Z,2017-05-30T12:25:08Z,2017-05-30T12:25:08Z,CLOSED,False,2,2,1,https://github.com/victorhora,Fixes issue #1432 by not logging normal behaviour to error.log and using APLOG_DEBUG instead,1,"['2.x', 'RIP - release-2.9.2']",https://github.com/SpiderLabs/ModSecurity/pull/1436,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1436,Apparently APLOG_TRACE3 is not supported on older versions of Apache/APR (2.2.x) so AP_LOG_WARNING was used on #1340 but caused logs to flood. This patch suggests using APLOG_DEBUG which should be safe for all supported versions of Apache/APR.,Apparently APLOG_TRACE3 is not supported on older versions of Apache/APR (2.2.x) so AP_LOG_WARNING was used on #1340 but caused logs to flood. This patch suggests using APLOG_DEBUG which should be safe for all supported versions of Apache/APR.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1436,2017-05-29T21:09:31Z,2017-05-30T12:25:08Z,2017-05-30T12:25:08Z,CLOSED,False,2,2,1,https://github.com/victorhora,Fixes issue #1432 by not logging normal behaviour to error.log and using APLOG_DEBUG instead,1,"['2.x', 'RIP - release-2.9.2']",https://github.com/SpiderLabs/ModSecurity/pull/1436,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1436#issuecomment-304862009,Apparently APLOG_TRACE3 is not supported on older versions of Apache/APR (2.2.x) so AP_LOG_WARNING was used on #1340 but caused logs to flood. This patch suggests using APLOG_DEBUG which should be safe for all supported versions of Apache/APR.,Merged. Thanks ;),True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1439,2017-06-02T06:12:27Z,2017-06-03T00:48:40Z,2017-06-03T00:48:40Z,CLOSED,False,5929,5771,9,https://github.com/victorhora,Add missing feature: t:uppercase transformation,1,"['RIP - Type - Feature', 'RIP - libmodsecurity', 'libmodsec - missing features', 'RIP - release-3.0']",https://github.com/SpiderLabs/ModSecurity/pull/1439,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1439,Pull request to add t:uppercase transformation using portable std::toupper. #1370,Pull request to add t:uppercase transformation using portable std::toupper. #1370,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1439,2017-06-02T06:12:27Z,2017-06-03T00:48:40Z,2017-06-03T00:48:40Z,CLOSED,False,5929,5771,9,https://github.com/victorhora,Add missing feature: t:uppercase transformation,1,"['RIP - Type - Feature', 'RIP - libmodsecurity', 'libmodsec - missing features', 'RIP - release-3.0']",https://github.com/SpiderLabs/ModSecurity/pull/1439,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1439#issuecomment-305938752,Pull request to add t:uppercase transformation using portable std::toupper. #1370,Merged ;) thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1446,2017-06-06T14:43:22Z,2017-10-05T14:29:59Z,2017-10-05T14:29:59Z,CLOSED,False,25,23,1,https://github.com/gravagli,"added ""empy chunk"" check",1,[],https://github.com/SpiderLabs/ModSecurity/pull/1446,https://github.com/gravagli,1,https://github.com/SpiderLabs/ModSecurity/pull/1446,"Environment:

Apache 2.2.15 on CentOS 6,
Mod_security 2.9.1
SecRequestBodyAccess On
ProxyPass

Scope:
Apache receives SOAP requests and then proxies them to a target server. In the meantime Mod_security logs the entire request and response sequentially, thanks to SecRequestBodyAccess.
Issue:
If the client sends a chunked request big enough to force Mod_security to store the chunks on disk (more than 128 kB by default), the webserver generates two final chunk with zero instead of one.
The destination server behave like it received two requests, but the second one is sintactically uncorrected because it contains only an empty chunk.
This issue happens only when flag SecRequestBodyAccess is on, but I would like keep it enabled.
I tried to upgrade Apache to version 2.4, CentOS to version 7 but nothing changed.
Possible fix:
I checked out the code and I found the way to fix the problem:
In apache2_io.c at line 88 one more ""if"" is needed to prevent Mod_security to add an empty chunk in excess
if (chunk->length > 0){
      if (chunk && (!msr->txcfg->stream_inbody_inspection || (msr->txcfg->stream_inbody_inspection && msr->if_stream_changed == 0))) {
          /* Copy the data we received in the chunk */
          .....
      } else if (msr->stream_input_data != NULL) {
         .....
      }
}

I applied this fix in master, v2.9.1 tag and v2/master and it always worked out.
I ran all tests after my fix, and none failed.","Environment:

Apache 2.2.15 on CentOS 6,
Mod_security 2.9.1
SecRequestBodyAccess On
ProxyPass

Scope:
Apache receives SOAP requests and then proxies them to a target server. In the meantime Mod_security logs the entire request and response sequentially, thanks to SecRequestBodyAccess.
Issue:
If the client sends a chunked request big enough to force Mod_security to store the chunks on disk (more than 128 kB by default), the webserver generates two final chunk with zero instead of one.
The destination server behave like it received two requests, but the second one is sintactically uncorrected because it contains only an empty chunk.
This issue happens only when flag SecRequestBodyAccess is on, but I would like keep it enabled.
I tried to upgrade Apache to version 2.4, CentOS to version 7 but nothing changed.
Possible fix:
I checked out the code and I found the way to fix the problem:
In apache2_io.c at line 88 one more ""if"" is needed to prevent Mod_security to add an empty chunk in excess
if (chunk->length > 0){
      if (chunk && (!msr->txcfg->stream_inbody_inspection || (msr->txcfg->stream_inbody_inspection && msr->if_stream_changed == 0))) {
          /* Copy the data we received in the chunk */
          .....
      } else if (msr->stream_input_data != NULL) {
         .....
      }
}

I applied this fix in master, v2.9.1 tag and v2/master and it always worked out.
I ran all tests after my fix, and none failed.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1446,2017-06-06T14:43:22Z,2017-10-05T14:29:59Z,2017-10-05T14:29:59Z,CLOSED,False,25,23,1,https://github.com/gravagli,"added ""empy chunk"" check",1,[],https://github.com/SpiderLabs/ModSecurity/pull/1446,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1446#issuecomment-334482582,"Environment:

Apache 2.2.15 on CentOS 6,
Mod_security 2.9.1
SecRequestBodyAccess On
ProxyPass

Scope:
Apache receives SOAP requests and then proxies them to a target server. In the meantime Mod_security logs the entire request and response sequentially, thanks to SecRequestBodyAccess.
Issue:
If the client sends a chunked request big enough to force Mod_security to store the chunks on disk (more than 128 kB by default), the webserver generates two final chunk with zero instead of one.
The destination server behave like it received two requests, but the second one is sintactically uncorrected because it contains only an empty chunk.
This issue happens only when flag SecRequestBodyAccess is on, but I would like keep it enabled.
I tried to upgrade Apache to version 2.4, CentOS to version 7 but nothing changed.
Possible fix:
I checked out the code and I found the way to fix the problem:
In apache2_io.c at line 88 one more ""if"" is needed to prevent Mod_security to add an empty chunk in excess
if (chunk->length > 0){
      if (chunk && (!msr->txcfg->stream_inbody_inspection || (msr->txcfg->stream_inbody_inspection && msr->if_stream_changed == 0))) {
          /* Copy the data we received in the chunk */
          .....
      } else if (msr->stream_input_data != NULL) {
         .....
      }
}

I applied this fix in master, v2.9.1 tag and v2/master and it always worked out.
I ran all tests after my fix, and none failed.",Merged! Thanks ;),True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1454,2017-06-12T10:57:20Z,2017-09-29T15:06:35Z,2017-09-29T15:06:35Z,CLOSED,False,12,2,5,https://github.com/devnexen,"Few missing headers, in the <arpa/inet.h> inclusions ones",1,[],https://github.com/SpiderLabs/ModSecurity/pull/1454,https://github.com/devnexen,1,https://github.com/SpiderLabs/ModSecurity/pull/1454,"mainly due to the fact APR_HAVE* constants are simply into apr.h
in addition a small memory leak fix.","mainly due to the fact APR_HAVE* constants are simply into apr.h
in addition a small memory leak fix.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1454,2017-06-12T10:57:20Z,2017-09-29T15:06:35Z,2017-09-29T15:06:35Z,CLOSED,False,12,2,5,https://github.com/devnexen,"Few missing headers, in the <arpa/inet.h> inclusions ones",1,[],https://github.com/SpiderLabs/ModSecurity/pull/1454,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1454#issuecomment-333152292,"mainly due to the fact APR_HAVE* constants are simply into apr.h
in addition a small memory leak fix.",Merged! Thanks ;),True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1467,2017-06-19T18:29:45Z,2017-07-07T19:14:23Z,2017-07-25T12:56:07Z,CLOSED,False,45,0,1,https://github.com/csanders-git,Add Docker Support for ModSecurity,3,[],https://github.com/SpiderLabs/ModSecurity/pull/1467,https://github.com/csanders-git,1,https://github.com/SpiderLabs/ModSecurity/pull/1467,,,True,{'THUMBS_UP': ['https://github.com/manishmalik']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1467,2017-06-19T18:29:45Z,2017-07-07T19:14:23Z,2017-07-25T12:56:07Z,CLOSED,False,45,0,1,https://github.com/csanders-git,Add Docker Support for ModSecurity,3,[],https://github.com/SpiderLabs/ModSecurity/pull/1467,https://github.com/bostrt,2,https://github.com/SpiderLabs/ModSecurity/pull/1467#issuecomment-309583725,,"I'm not sure of your intentions here but an option to copy in a custom mod_security.conf would be helpful for reproducers. Also, an option to install OWASP ModSecurity CRS would be handy too.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1467,2017-06-19T18:29:45Z,2017-07-07T19:14:23Z,2017-07-25T12:56:07Z,CLOSED,False,45,0,1,https://github.com/csanders-git,Add Docker Support for ModSecurity,3,[],https://github.com/SpiderLabs/ModSecurity/pull/1467,https://github.com/csanders-git,3,https://github.com/SpiderLabs/ModSecurity/pull/1467#issuecomment-309585127,,"@bostrt CRS will be releasing (and hosting for that matter) this docker image and their own docker image that builds on top of this and adds CRS. This is just a base so that you may use whichever ruleset you want :).  It would be helpful to allow a separate mod_security.conf file, that is true though. This is only a base.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1467,2017-06-19T18:29:45Z,2017-07-07T19:14:23Z,2017-07-25T12:56:07Z,CLOSED,False,45,0,1,https://github.com/csanders-git,Add Docker Support for ModSecurity,3,[],https://github.com/SpiderLabs/ModSecurity/pull/1467,https://github.com/bostrt,4,https://github.com/SpiderLabs/ModSecurity/pull/1467#issuecomment-309590130,,"Understood, I think my needs would be better served by extending this base image into my own. Thanks for the work you've put into it!",True,{'THUMBS_UP': ['https://github.com/csanders-git']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1467,2017-06-19T18:29:45Z,2017-07-07T19:14:23Z,2017-07-25T12:56:07Z,CLOSED,False,45,0,1,https://github.com/csanders-git,Add Docker Support for ModSecurity,3,[],https://github.com/SpiderLabs/ModSecurity/pull/1467,https://github.com/zimmerle,5,https://github.com/SpiderLabs/ModSecurity/pull/1467#issuecomment-313403993,,"I am not sure if that is the right place to have this docker file. For the very same reason that we don't host scripts (or configuration) to build packages. They are complete independent from our release cycle, and every user may want to make custom modifications. Why not to have an independent repo and/or gists to host this docker content? Or even an entry on our wiki to describe it for the docker users?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1467,2017-06-19T18:29:45Z,2017-07-07T19:14:23Z,2017-07-25T12:56:07Z,CLOSED,False,45,0,1,https://github.com/csanders-git,Add Docker Support for ModSecurity,3,[],https://github.com/SpiderLabs/ModSecurity/pull/1467,https://github.com/csanders-git,6,https://github.com/SpiderLabs/ModSecurity/pull/1467#issuecomment-313769178,,"Closing this branch as a separate Repository has been added for this.
ModSecurity can now be found on dockerhub https://hub.docker.com/r/owasp/modsecurity/",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1467,2017-06-19T18:29:45Z,2017-07-07T19:14:23Z,2017-07-25T12:56:07Z,CLOSED,False,45,0,1,https://github.com/csanders-git,Add Docker Support for ModSecurity,3,[],https://github.com/SpiderLabs/ModSecurity/pull/1467,https://github.com/zimmerle,7,https://github.com/SpiderLabs/ModSecurity/pull/1467#issuecomment-317728518,,"Hi @csanders-git,
Great :) I think that is the best place for it to be. I would also recommend it to be renamed to ModSecurity insetead of OWASP/modsecurity.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1473,2017-06-27T07:59:43Z,2017-06-27T11:56:33Z,2017-06-27T11:56:33Z,CLOSED,False,5,4,2,https://github.com/met3or,issues #1472 ,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1473,https://github.com/met3or,1,https://github.com/SpiderLabs/ModSecurity/pull/1473,"Hi Felipe,
These are the proposed changes in the issue:
#1472
Please review and accept pull request should all be in order. :)
Thanks,
David","Hi Felipe,
These are the proposed changes in the issue:
#1472
Please review and accept pull request should all be in order. :)
Thanks,
David",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1473,2017-06-27T07:59:43Z,2017-06-27T11:56:33Z,2017-06-27T11:56:33Z,CLOSED,False,5,4,2,https://github.com/met3or,issues #1472 ,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1473,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1473#issuecomment-311331088,"Hi Felipe,
These are the proposed changes in the issue:
#1472
Please review and accept pull request should all be in order. :)
Thanks,
David","Hi @met3or,
I've made some cosmetics modifications on your commit, here goes the new version: 142053c",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1473,2017-06-27T07:59:43Z,2017-06-27T11:56:33Z,2017-06-27T11:56:33Z,CLOSED,False,5,4,2,https://github.com/met3or,issues #1472 ,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1473,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1473#issuecomment-311336233,"Hi Felipe,
These are the proposed changes in the issue:
#1472
Please review and accept pull request should all be in order. :)
Thanks,
David",Merged ;),True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1479,2017-06-29T06:03:12Z,2017-07-04T20:21:37Z,2017-07-04T20:21:38Z,CLOSED,False,222,95,9,https://github.com/victorhora,IIS build refactoring + proposed fix for wildcard op when loading conf files on Nginx / IIS,2,"['enhancement', 'Platform - IIS', 'Platform - Nginx', 'Platform - Standalone', 'RIP - release-2.9.2']",https://github.com/SpiderLabs/ModSecurity/pull/1479,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1479,"Proposed fix for #1285 by @thierry-f-78.
Did a quick review of the patch and confirmed working as intended on Nginx and IIS. My version of Apache/APR seems ok with it as well. Let's see what the buildbots and @zimmerle have to say :)","Proposed fix for #1285 by @thierry-f-78.
Did a quick review of the patch and confirmed working as intended on Nginx and IIS. My version of Apache/APR seems ok with it as well. Let's see what the buildbots and @zimmerle have to say :)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1479,2017-06-29T06:03:12Z,2017-07-04T20:21:37Z,2017-07-04T20:21:38Z,CLOSED,False,222,95,9,https://github.com/victorhora,IIS build refactoring + proposed fix for wildcard op when loading conf files on Nginx / IIS,2,"['enhancement', 'Platform - IIS', 'Platform - Nginx', 'Platform - Standalone', 'RIP - release-2.9.2']",https://github.com/SpiderLabs/ModSecurity/pull/1479,https://github.com/victorhora,2,https://github.com/SpiderLabs/ModSecurity/pull/1479#issuecomment-312947918,"Proposed fix for #1285 by @thierry-f-78.
Did a quick review of the patch and confirmed working as intended on Nginx and IIS. My version of Apache/APR seems ok with it as well. Let's see what the buildbots and @zimmerle have to say :)",Closing in favor of #1486 and #1487,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1485,2017-07-04T16:45:24Z,2017-07-04T20:22:28Z,2017-07-04T20:22:28Z,CLOSED,False,225,96,10,https://github.com/victorhora,Add capture action to @detectXSS operator,3,"['RIP - Type - Feature', 'enhancement', '2.x', 'RIP - release-2.9.2']",https://github.com/SpiderLabs/ModSecurity/pull/1485,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1485,"Proposed fix for #1482.
Do notice that the API for @detectXSS in libInjection is still in Alpha stage so there's some missing features when compared with @detectSQLi.
In this case, there's no ""fingerprint"" returned from libInjection API to be fed into a ""capture"" action to tell us exactly what triggered the match like it's done with libinjection_sqli
So this proposed ""capture"" action would fill TX.0 with the full analyzed parameter value (var->value) when libinjection_xss returns true.","Proposed fix for #1482.
Do notice that the API for @detectXSS in libInjection is still in Alpha stage so there's some missing features when compared with @detectSQLi.
In this case, there's no ""fingerprint"" returned from libInjection API to be fed into a ""capture"" action to tell us exactly what triggered the match like it's done with libinjection_sqli
So this proposed ""capture"" action would fill TX.0 with the full analyzed parameter value (var->value) when libinjection_xss returns true.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1485,2017-07-04T16:45:24Z,2017-07-04T20:22:28Z,2017-07-04T20:22:28Z,CLOSED,False,225,96,10,https://github.com/victorhora,Add capture action to @detectXSS operator,3,"['RIP - Type - Feature', 'enhancement', '2.x', 'RIP - release-2.9.2']",https://github.com/SpiderLabs/ModSecurity/pull/1485,https://github.com/victorhora,2,https://github.com/SpiderLabs/ModSecurity/pull/1485#issuecomment-312948021,"Proposed fix for #1482.
Do notice that the API for @detectXSS in libInjection is still in Alpha stage so there's some missing features when compared with @detectSQLi.
In this case, there's no ""fingerprint"" returned from libInjection API to be fed into a ""capture"" action to tell us exactly what triggered the match like it's done with libinjection_sqli
So this proposed ""capture"" action would fill TX.0 with the full analyzed parameter value (var->value) when libinjection_xss returns true.",Closing in favor of #1488,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1486,2017-07-04T20:11:06Z,2017-10-05T03:21:30Z,2017-10-05T03:21:30Z,CLOSED,False,5,4,1,https://github.com/victorhora,Proposed fix for wildcard operator when loading conf files on Nginx / IIS,1,"['enhancement', 'Platform - IIS', 'Platform - Nginx', 'Platform - Standalone', 'RIP - release-2.9.2']",https://github.com/SpiderLabs/ModSecurity/pull/1486,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1486,Proposed fix for #1285 by @thierry-f-78.,Proposed fix for #1285 by @thierry-f-78.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1486,2017-07-04T20:11:06Z,2017-10-05T03:21:30Z,2017-10-05T03:21:30Z,CLOSED,False,5,4,1,https://github.com/victorhora,Proposed fix for wildcard operator when loading conf files on Nginx / IIS,1,"['enhancement', 'Platform - IIS', 'Platform - Nginx', 'Platform - Standalone', 'RIP - release-2.9.2']",https://github.com/SpiderLabs/ModSecurity/pull/1486,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1486#issuecomment-334348121,Proposed fix for #1285 by @thierry-f-78.,Merged. thanks.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1487,2017-07-04T20:15:17Z,2017-07-25T12:32:03Z,2017-07-25T12:32:03Z,CLOSED,False,217,91,8,https://github.com/victorhora,Refactoring of IIS build scripts,1,"['RIP - Type - Config Improvement', 'Platform - IIS', 'Platform - Standalone', 'RIP - release-2.9.2']",https://github.com/SpiderLabs/ModSecurity/pull/1487,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1487,"Fixes some hardcoded stuff, updates all dependencies, allows more customization and downloads required dependencies etc. It should make the IIS build a breeze. Hopefully will not break @zimmerle 's buildbots :P","Fixes some hardcoded stuff, updates all dependencies, allows more customization and downloads required dependencies etc. It should make the IIS build a breeze. Hopefully will not break @zimmerle 's buildbots :P",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1487,2017-07-04T20:15:17Z,2017-07-25T12:32:03Z,2017-07-25T12:32:03Z,CLOSED,False,217,91,8,https://github.com/victorhora,Refactoring of IIS build scripts,1,"['RIP - Type - Config Improvement', 'Platform - IIS', 'Platform - Standalone', 'RIP - release-2.9.2']",https://github.com/SpiderLabs/ModSecurity/pull/1487,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1487#issuecomment-317722817,"Fixes some hardcoded stuff, updates all dependencies, allows more customization and downloads required dependencies etc. It should make the IIS build a breeze. Hopefully will not break @zimmerle 's buildbots :P",Merged already as part of v2.9.2 release.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1488,2017-07-04T20:16:37Z,2017-10-05T12:37:18Z,2017-10-05T12:37:18Z,CLOSED,False,3,1,1,https://github.com/victorhora,Add capture action to @detectXSS operator,1,"['RIP - Type - Feature', 'enhancement', '2.x', 'RIP - release-2.9.2']",https://github.com/SpiderLabs/ModSecurity/pull/1488,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1488,"Proposed fix for #1482.
Do notice that the API for @detectXSS in libInjection is still in Alpha stage so there's some missing features when compared with @detectSQLi.
In this case, there's no ""fingerprint"" returned from libInjection API to be fed into a ""capture"" action to tell us exactly what triggered the match like it's done with libinjection_sqli
So this proposed ""capture"" action would fill TX.0 with the full analyzed parameter value (var->value) when libinjection_xss returns true.","Proposed fix for #1482.
Do notice that the API for @detectXSS in libInjection is still in Alpha stage so there's some missing features when compared with @detectSQLi.
In this case, there's no ""fingerprint"" returned from libInjection API to be fed into a ""capture"" action to tell us exactly what triggered the match like it's done with libinjection_sqli
So this proposed ""capture"" action would fill TX.0 with the full analyzed parameter value (var->value) when libinjection_xss returns true.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1488,2017-07-04T20:16:37Z,2017-10-05T12:37:18Z,2017-10-05T12:37:18Z,CLOSED,False,3,1,1,https://github.com/victorhora,Add capture action to @detectXSS operator,1,"['RIP - Type - Feature', 'enhancement', '2.x', 'RIP - release-2.9.2']",https://github.com/SpiderLabs/ModSecurity/pull/1488,https://github.com/fgsch,2,https://github.com/SpiderLabs/ModSecurity/pull/1488#issuecomment-312959887,"Proposed fix for #1482.
Do notice that the API for @detectXSS in libInjection is still in Alpha stage so there's some missing features when compared with @detectSQLi.
In this case, there's no ""fingerprint"" returned from libInjection API to be fed into a ""capture"" action to tell us exactly what triggered the match like it's done with libinjection_sqli
So this proposed ""capture"" action would fill TX.0 with the full analyzed parameter value (var->value) when libinjection_xss returns true.",Is this any different to using MATCHED_VAR?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1488,2017-07-04T20:16:37Z,2017-10-05T12:37:18Z,2017-10-05T12:37:18Z,CLOSED,False,3,1,1,https://github.com/victorhora,Add capture action to @detectXSS operator,1,"['RIP - Type - Feature', 'enhancement', '2.x', 'RIP - release-2.9.2']",https://github.com/SpiderLabs/ModSecurity/pull/1488,https://github.com/victorhora,3,https://github.com/SpiderLabs/ModSecurity/pull/1488#issuecomment-313152979,"Proposed fix for #1482.
Do notice that the API for @detectXSS in libInjection is still in Alpha stage so there's some missing features when compared with @detectSQLi.
In this case, there's no ""fingerprint"" returned from libInjection API to be fed into a ""capture"" action to tell us exactly what triggered the match like it's done with libinjection_sqli
So this proposed ""capture"" action would fill TX.0 with the full analyzed parameter value (var->value) when libinjection_xss returns true.","In this context, no @fgsch. But I'm not sure if there's much more we can do as the ""API"" looks limited in this aspect as of now.
But there's a chance I'm missing something, so let's see what others have to say :)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1488,2017-07-04T20:16:37Z,2017-10-05T12:37:18Z,2017-10-05T12:37:18Z,CLOSED,False,3,1,1,https://github.com/victorhora,Add capture action to @detectXSS operator,1,"['RIP - Type - Feature', 'enhancement', '2.x', 'RIP - release-2.9.2']",https://github.com/SpiderLabs/ModSecurity/pull/1488,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1488#issuecomment-334451668,"Proposed fix for #1482.
Do notice that the API for @detectXSS in libInjection is still in Alpha stage so there's some missing features when compared with @detectSQLi.
In this case, there's no ""fingerprint"" returned from libInjection API to be fed into a ""capture"" action to tell us exactly what triggered the match like it's done with libinjection_sqli
So this proposed ""capture"" action would fill TX.0 with the full analyzed parameter value (var->value) when libinjection_xss returns true.",Merged. Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1500,2017-07-13T09:51:53Z,2017-07-29T00:50:01Z,2017-07-29T00:50:01Z,CLOSED,False,11,4,1,https://github.com/lkarsten,Ignore built files.,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1500,https://github.com/lkarsten,1,https://github.com/SpiderLabs/ModSecurity/pull/1500,Clean up git status output so the important parts are visible.,Clean up git status output so the important parts are visible.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1500,2017-07-13T09:51:53Z,2017-07-29T00:50:01Z,2017-07-29T00:50:01Z,CLOSED,False,11,4,1,https://github.com/lkarsten,Ignore built files.,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1500,https://github.com/lkarsten,2,https://github.com/SpiderLabs/ModSecurity/pull/1500#issuecomment-318298510,Clean up git status output so the important parts are visible.,Hi. Is there anything I can do to move this forward?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1500,2017-07-13T09:51:53Z,2017-07-29T00:50:01Z,2017-07-29T00:50:01Z,CLOSED,False,11,4,1,https://github.com/lkarsten,Ignore built files.,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1500,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1500#issuecomment-318791701,Clean up git status output so the important parts are visible.,Merged thanks ;),True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1501,2017-07-13T10:18:17Z,2017-07-29T01:50:25Z,2017-07-29T01:50:25Z,CLOSED,False,5,5,3,https://github.com/lkarsten,Rename FromNowOneAllowType to FromNowOnAllowType.,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1501,https://github.com/lkarsten,1,https://github.com/SpiderLabs/ModSecurity/pull/1501,"This misspelling is confusing (is it allow one more rule, or all of
them?) and since v3 isn't released yet, use the major version bump
opportunity to rectify it.","This misspelling is confusing (is it allow one more rule, or all of
them?) and since v3 isn't released yet, use the major version bump
opportunity to rectify it.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1501,2017-07-13T10:18:17Z,2017-07-29T01:50:25Z,2017-07-29T01:50:25Z,CLOSED,False,5,5,3,https://github.com/lkarsten,Rename FromNowOneAllowType to FromNowOnAllowType.,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1501,https://github.com/lkarsten,2,https://github.com/SpiderLabs/ModSecurity/pull/1501#issuecomment-318298650,"This misspelling is confusing (is it allow one more rule, or all of
them?) and since v3 isn't released yet, use the major version bump
opportunity to rectify it.","Hi.
Is there anything I can do to move this forward? Wanted, not wanted, not now?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1501,2017-07-13T10:18:17Z,2017-07-29T01:50:25Z,2017-07-29T01:50:25Z,CLOSED,False,5,5,3,https://github.com/lkarsten,Rename FromNowOneAllowType to FromNowOnAllowType.,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1501,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1501#issuecomment-318795412,"This misspelling is confusing (is it allow one more rule, or all of
them?) and since v3 isn't released yet, use the major version bump
opportunity to rectify it.",Merged thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1502,2017-07-13T10:47:50Z,2017-09-29T18:57:44Z,2017-09-29T18:58:41Z,CLOSED,False,646,647,130,https://github.com/lkarsten,Use documentation class IP-addresses in tests.,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1502,https://github.com/lkarsten,1,https://github.com/SpiderLabs/ModSecurity/pull/1502,"This commit changes the client and server IP adresses used in test cases
from 200.249.12.31 (Brazil, unknown origin) to the documentation scope
established in RFC5737.
Related: https://tools.ietf.org/html/rfc5737","This commit changes the client and server IP adresses used in test cases
from 200.249.12.31 (Brazil, unknown origin) to the documentation scope
established in RFC5737.
Related: https://tools.ietf.org/html/rfc5737",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1502,2017-07-13T10:47:50Z,2017-09-29T18:57:44Z,2017-09-29T18:58:41Z,CLOSED,False,646,647,130,https://github.com/lkarsten,Use documentation class IP-addresses in tests.,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1502,https://github.com/lkarsten,2,https://github.com/SpiderLabs/ModSecurity/pull/1502#issuecomment-318303690,"This commit changes the client and server IP adresses used in test cases
from 200.249.12.31 (Brazil, unknown origin) to the documentation scope
established in RFC5737.
Related: https://tools.ietf.org/html/rfc5737",Hi. I've force pushed a new commit to my local branch that removes a test case change that snook into the original PR. Tests all pass on my end.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1502,2017-07-13T10:47:50Z,2017-09-29T18:57:44Z,2017-09-29T18:58:41Z,CLOSED,False,646,647,130,https://github.com/lkarsten,Use documentation class IP-addresses in tests.,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1502,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1502#issuecomment-318794693,"This commit changes the client and server IP adresses used in test cases
from 200.249.12.31 (Brazil, unknown origin) to the documentation scope
established in RFC5737.
Related: https://tools.ietf.org/html/rfc5737","Hi @lkarsten,
The propose of those test is to actually work with real (or somewhat similar to real) data. Is that any specific reason why to change the IP address to this one reserved for documentation?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1502,2017-07-13T10:47:50Z,2017-09-29T18:57:44Z,2017-09-29T18:58:41Z,CLOSED,False,646,647,130,https://github.com/lkarsten,Use documentation class IP-addresses in tests.,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1502,https://github.com/lkarsten,4,https://github.com/SpiderLabs/ModSecurity/pull/1502#issuecomment-318813026,"This commit changes the client and server IP adresses used in test cases
from 200.249.12.31 (Brazil, unknown origin) to the documentation scope
established in RFC5737.
Related: https://tools.ietf.org/html/rfc5737","Hi. Thanks for replying.
Traffic tend always end up leaking to these live adresses in the end.  If not now, then in a couple of years when someone extends the test system to be more complete, and nobody thinks of this.
IPs get reassigned, and suddenly some third party get the unintended traffic. When this is realised 6-12 months after the change (when they start complaining), getting new code out there takes probably a year. Lots of wasted effort by the involved.
Another issue is that it (potentially) opens up to the Brazilian IP tracking who is building/testing libmodsecurity. I'd be surprised if not something already does a reverse DNS lookup of the IP.
Anyway, it is a cosmetic change. It shouldn't matter as I understand the tests, but it looks better and is a safer long term choice. It is a suggestion, feel free to use it if you want. :)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1502,2017-07-13T10:47:50Z,2017-09-29T18:57:44Z,2017-09-29T18:58:41Z,CLOSED,False,646,647,130,https://github.com/lkarsten,Use documentation class IP-addresses in tests.,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1502,https://github.com/lkarsten,5,https://github.com/SpiderLabs/ModSecurity/pull/1502#issuecomment-323676222,"This commit changes the client and server IP adresses used in test cases
from 200.249.12.31 (Brazil, unknown origin) to the documentation scope
established in RFC5737.
Related: https://tools.ietf.org/html/rfc5737","Hi. We should try to wrap this up.
Who owns the 200.249.12.31 IPv4 address? Do they know it is being used for this?
I can close and forget about this PR if you think it is a bad idea and don't want to proceed. My view is that these IPv4 addresses are set aside for such use, and we should trust the internet elders on this.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1502,2017-07-13T10:47:50Z,2017-09-29T18:57:44Z,2017-09-29T18:58:41Z,CLOSED,False,646,647,130,https://github.com/lkarsten,Use documentation class IP-addresses in tests.,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1502,https://github.com/zimmerle,6,https://github.com/SpiderLabs/ModSecurity/pull/1502#issuecomment-333210233,"This commit changes the client and server IP adresses used in test cases
from 200.249.12.31 (Brazil, unknown origin) to the documentation scope
established in RFC5737.
Related: https://tools.ietf.org/html/rfc5737","Hi @lkarsten,
The use cases contains real IPs as they meant to mimic a real request. I cannot foresee any problem of using a real IP. There is no content to be leaked as the information on the test cases are all public. With that said, I am going to close this pull request.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1510,2017-07-24T13:11:43Z,2017-09-29T18:36:13Z,2017-09-29T18:36:13Z,CLOSED,False,4,4,2,https://github.com/marcstern,Fixed typos in conditional compile,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1510,https://github.com/marcstern,1,https://github.com/SpiderLabs/ModSecurity/pull/1510,"LOG_NO_STOPWATCH instead of DLOG_NO_STOPWATCH
$log_server_context instead of $log_server_contex","LOG_NO_STOPWATCH instead of DLOG_NO_STOPWATCH
$log_server_context instead of $log_server_contex",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1510,2017-07-24T13:11:43Z,2017-09-29T18:36:13Z,2017-09-29T18:36:13Z,CLOSED,False,4,4,2,https://github.com/marcstern,Fixed typos in conditional compile,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1510,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1510#issuecomment-333204871,"LOG_NO_STOPWATCH instead of DLOG_NO_STOPWATCH
$log_server_context instead of $log_server_contex",Merged. Thanks ;),True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1511,2017-07-24T15:42:16Z,2017-08-05T02:46:54Z,2017-08-05T02:46:54Z,CLOSED,False,1,1,1,https://github.com/AlfredoRamos,Reverse LUA check order,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1511,https://github.com/AlfredoRamos,1,https://github.com/SpiderLabs/ModSecurity/pull/1511,"find_lua.m4 should check for newer version of LUA first, this patch only reverses the string that is used to check this library.","find_lua.m4 should check for newer version of LUA first, this patch only reverses the string that is used to check this library.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1511,2017-07-24T15:42:16Z,2017-08-05T02:46:54Z,2017-08-05T02:46:54Z,CLOSED,False,1,1,1,https://github.com/AlfredoRamos,Reverse LUA check order,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1511,https://github.com/AlfredoRamos,2,https://github.com/SpiderLabs/ModSecurity/pull/1511#issuecomment-317465466,"find_lua.m4 should check for newer version of LUA first, this patch only reverses the string that is used to check this library.","Test failed, however it's not related to this patch.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1513,2017-07-27T11:26:12Z,2017-08-20T22:35:43Z,2017-08-21T08:01:20Z,CLOSED,False,32,14,2,https://github.com/lkarsten,Add support for disabling test cases.,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1513,https://github.com/lkarsten,1,https://github.com/SpiderLabs/ModSecurity/pull/1513,"The JSON test case format has an ""enabled"" key that is not
currently being honored. This trivial patch adds support for skipping
test cases that has enabled set to 0.","The JSON test case format has an ""enabled"" key that is not
currently being honored. This trivial patch adds support for skipping
test cases that has enabled set to 0.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1513,2017-07-27T11:26:12Z,2017-08-20T22:35:43Z,2017-08-21T08:01:20Z,CLOSED,False,32,14,2,https://github.com/lkarsten,Add support for disabling test cases.,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1513,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1513#issuecomment-318792348,"The JSON test case format has an ""enabled"" key that is not
currently being honored. This trivial patch adds support for skipping
test cases that has enabled set to 0.","Hi @lkarsten,
By the end of each test execution we have this summary where we show the amount of tests, and the respective results: skipped, passed, failed. Currently we just count the skipped ones if they are disabled due to a missing dependency. It would be great to have the ones disabled via JSON, to also appear in the skip summary. What do you think?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1513,2017-07-27T11:26:12Z,2017-08-20T22:35:43Z,2017-08-21T08:01:20Z,CLOSED,False,32,14,2,https://github.com/lkarsten,Add support for disabling test cases.,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1513,https://github.com/lkarsten,3,https://github.com/SpiderLabs/ModSecurity/pull/1513#issuecomment-318812401,"The JSON test case format has an ""enabled"" key that is not
currently being honored. This trivial patch adds support for skipping
test cases that has enabled set to 0.","Hi. I think that makes sense.
I'll look into it next week and (if successful) propose a new patch here.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1513,2017-07-27T11:26:12Z,2017-08-20T22:35:43Z,2017-08-21T08:01:20Z,CLOSED,False,32,14,2,https://github.com/lkarsten,Add support for disabling test cases.,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1513,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1513#issuecomment-319066278,"The JSON test case format has an ""enabled"" key that is not
currently being honored. This trivial patch adds support for skipping
test cases that has enabled set to 0.",@lkarsten thank you :),True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1513,2017-07-27T11:26:12Z,2017-08-20T22:35:43Z,2017-08-21T08:01:20Z,CLOSED,False,32,14,2,https://github.com/lkarsten,Add support for disabling test cases.,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1513,https://github.com/lkarsten,5,https://github.com/SpiderLabs/ModSecurity/pull/1513#issuecomment-319330230,"The JSON test case format has an ""enabled"" key that is not
currently being honored. This trivial patch adds support for skipping
test cases that has enabled set to 0.","Hello again.
I've force-pushed a new patch now. It implements skipping the disabled ones as well as a count in the end.
Please consider this for merging into v3/master.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1513,2017-07-27T11:26:12Z,2017-08-20T22:35:43Z,2017-08-21T08:01:20Z,CLOSED,False,32,14,2,https://github.com/lkarsten,Add support for disabling test cases.,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1513,https://github.com/lkarsten,6,https://github.com/SpiderLabs/ModSecurity/pull/1513#issuecomment-321742188,"The JSON test case format has an ""enabled"" key that is not
currently being honored. This trivial patch adds support for skipping
test cases that has enabled set to 0.",Hello. Have you had the chance to look at this?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1513,2017-07-27T11:26:12Z,2017-08-20T22:35:43Z,2017-08-21T08:01:20Z,CLOSED,False,32,14,2,https://github.com/lkarsten,Add support for disabling test cases.,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1513,https://github.com/zimmerle,7,https://github.com/SpiderLabs/ModSecurity/pull/1513#issuecomment-323616463,"The JSON test case format has an ""enabled"" key that is not
currently being honored. This trivial patch adds support for skipping
test cases that has enabled set to 0.","Merged tahnks ;)
Just did a small fix to count the disabled test as `skip' in the test summary.
9d4ed52",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1513,2017-07-27T11:26:12Z,2017-08-20T22:35:43Z,2017-08-21T08:01:20Z,CLOSED,False,32,14,2,https://github.com/lkarsten,Add support for disabling test cases.,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1513,https://github.com/lkarsten,8,https://github.com/SpiderLabs/ModSecurity/pull/1513#issuecomment-323674157,"The JSON test case format has an ""enabled"" key that is not
currently being honored. This trivial patch adds support for skipping
test cases that has enabled set to 0.",Thanks :-),True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1514,2017-07-27T12:15:41Z,2017-07-29T01:28:38Z,2017-07-29T08:37:29Z,CLOSED,False,19,24,3,https://github.com/lkarsten,Cleaner logging,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1514,https://github.com/lkarsten,1,https://github.com/SpiderLabs/ModSecurity/pull/1514,Attempt at reducing clutter in the debug log to make it easier to read.,Attempt at reducing clutter in the debug log to make it easier to read.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1514,2017-07-27T12:15:41Z,2017-07-29T01:28:38Z,2017-07-29T08:37:29Z,CLOSED,False,19,24,3,https://github.com/lkarsten,Cleaner logging,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1514,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1514#issuecomment-318794362,Attempt at reducing clutter in the debug log to make it easier to read.,"Hi @lkarsten,
Thank you for the patch. As a consequence of this changes, one of our test cases was failing. The 3rd test of the action-disruptive.json. The test was based on debug log match, which was changed by your patch.
I've merged your patch and fixed the test case. Thank you ;)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1514,2017-07-27T12:15:41Z,2017-07-29T01:28:38Z,2017-07-29T08:37:29Z,CLOSED,False,19,24,3,https://github.com/lkarsten,Cleaner logging,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1514,https://github.com/lkarsten,3,https://github.com/SpiderLabs/ModSecurity/pull/1514#issuecomment-318814063,Attempt at reducing clutter in the debug log to make it easier to read.,Thanks for merging!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1515,2017-07-28T09:00:58Z,2017-07-29T01:31:46Z,2017-07-29T01:31:46Z,CLOSED,False,4,4,2,https://github.com/lkarsten,Add the missing g in Transaction::GetReponseBodyLenth(),1,[],https://github.com/SpiderLabs/ModSecurity/pull/1515,https://github.com/lkarsten,1,https://github.com/SpiderLabs/ModSecurity/pull/1515,"This commit fixes a typo in the method name for retrieving
the body length.","This commit fixes a typo in the method name for retrieving
the body length.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1515,2017-07-28T09:00:58Z,2017-07-29T01:31:46Z,2017-07-29T01:31:46Z,CLOSED,False,4,4,2,https://github.com/lkarsten,Add the missing g in Transaction::GetReponseBodyLenth(),1,[],https://github.com/SpiderLabs/ModSecurity/pull/1515,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1515#issuecomment-318794516,"This commit fixes a typo in the method name for retrieving
the body length.","Ops :P
Merged, thanks! :)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1523,2017-08-02T18:39:03Z,2017-08-20T23:09:01Z,2017-08-20T23:09:01Z,CLOSED,False,42,1,3,https://github.com/asterite3,Fix operator @validateByteRange working with bytes > 127,3,[],https://github.com/SpiderLabs/ModSecurity/pull/1523,https://github.com/asterite3,1,https://github.com/SpiderLabs/ModSecurity/pull/1523,"ValidateByteRange::evaluate() acquires bytes it validates by indexing std::string:
bool ValidateByteRange::evaluate(Transaction *transaction, Rule *rule,
    const std::string &input, std::shared_ptr<RuleMessage> ruleMessage) {
    bool ret = true;

    size_t count = 0;
    for (int i = 0; i < input.length(); i++) {
        int x = input.at(i);
        if (!(table[x >> 3] & (1 << (x & 0x7)))) {
            ...
            count++;
        }
    }

    ret = (count != 0);
    // ...
    return ret;
}
The problem is that indexing a string gives a char, which is signed, so bytes with codes > 127 will appear as negative integers, resulting in incorrect validation. This can be illustrated by this minimal example:
#include ""modsecurity/modsecurity.h""
#include ""modsecurity/rules.h""

static void logCb(void *data, const void *ruleMessagev) {
    std::cout << (char *) ruleMessagev << std::endl;
}

const char * req_uri = ""/test?param=%D0%A2%D0%B0%D1%80%D0%B0%D0%B1%D0%B0%D0%BD"";

int main() {
    modsecurity::ModSecurity *modsec = new modsecurity::ModSecurity();
    modsecurity::Rules *rules = new modsecurity::Rules();
    modsecurity::Transaction * modsecTransaction;

    modsec->setServerLogCb(logCb, modsecurity::TextLogProperty);

    rules->loadFromUri(""test.conf"");

    modsecTransaction = new modsecurity::Transaction(modsec, rules, NULL);
    modsecTransaction->processURI(req_uri, ""GET"", ""1.1"");
    modsecTransaction->processRequestHeaders();
    modsecTransaction->processRequestBody();

    delete modsecTransaction;
    delete rules;
    delete modsec;
    return 0;
}
And this test config:
SecRule REQUEST_URI ""@validateByteRange 1-255"" \
  id:920270

Even though this config allows any byte except NULL byte, URI in test will fail the check resulting in alert, because bytes \xd0, \xa2 etc are considered negative, hence < 1 and out of range. This breaks rules 920270 , 920271 etc from OWASP CRS (in fact, config including those rules with tx.paranoia_level=2 can be used as test.conf in the above example, the rules will be mistakenly triggered).
The proposed solution is to cast a byte from input string to unsigned char before further processing - bytes will then fall in range [0;255] and be validated as expected. In fact, the same thing is done in v2 (https://github.com/SpiderLabs/ModSecurity/blob/v2/master/apache2/re_operators.c#L4168):
int x = ((unsigned char *)var->value)[i];","ValidateByteRange::evaluate() acquires bytes it validates by indexing std::string:
bool ValidateByteRange::evaluate(Transaction *transaction, Rule *rule,
    const std::string &input, std::shared_ptr<RuleMessage> ruleMessage) {
    bool ret = true;

    size_t count = 0;
    for (int i = 0; i < input.length(); i++) {
        int x = input.at(i);
        if (!(table[x >> 3] & (1 << (x & 0x7)))) {
            ...
            count++;
        }
    }

    ret = (count != 0);
    // ...
    return ret;
}
The problem is that indexing a string gives a char, which is signed, so bytes with codes > 127 will appear as negative integers, resulting in incorrect validation. This can be illustrated by this minimal example:
#include ""modsecurity/modsecurity.h""
#include ""modsecurity/rules.h""

static void logCb(void *data, const void *ruleMessagev) {
    std::cout << (char *) ruleMessagev << std::endl;
}

const char * req_uri = ""/test?param=%D0%A2%D0%B0%D1%80%D0%B0%D0%B1%D0%B0%D0%BD"";

int main() {
    modsecurity::ModSecurity *modsec = new modsecurity::ModSecurity();
    modsecurity::Rules *rules = new modsecurity::Rules();
    modsecurity::Transaction * modsecTransaction;

    modsec->setServerLogCb(logCb, modsecurity::TextLogProperty);

    rules->loadFromUri(""test.conf"");

    modsecTransaction = new modsecurity::Transaction(modsec, rules, NULL);
    modsecTransaction->processURI(req_uri, ""GET"", ""1.1"");
    modsecTransaction->processRequestHeaders();
    modsecTransaction->processRequestBody();

    delete modsecTransaction;
    delete rules;
    delete modsec;
    return 0;
}
And this test config:
SecRule REQUEST_URI ""@validateByteRange 1-255"" \
  id:920270

Even though this config allows any byte except NULL byte, URI in test will fail the check resulting in alert, because bytes \xd0, \xa2 etc are considered negative, hence < 1 and out of range. This breaks rules 920270 , 920271 etc from OWASP CRS (in fact, config including those rules with tx.paranoia_level=2 can be used as test.conf in the above example, the rules will be mistakenly triggered).
The proposed solution is to cast a byte from input string to unsigned char before further processing - bytes will then fall in range [0;255] and be validated as expected. In fact, the same thing is done in v2 (https://github.com/SpiderLabs/ModSecurity/blob/v2/master/apache2/re_operators.c#L4168):
int x = ((unsigned char *)var->value)[i];",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1523,2017-08-02T18:39:03Z,2017-08-20T23:09:01Z,2017-08-20T23:09:01Z,CLOSED,False,42,1,3,https://github.com/asterite3,Fix operator @validateByteRange working with bytes > 127,3,[],https://github.com/SpiderLabs/ModSecurity/pull/1523,https://github.com/asterite3,2,https://github.com/SpiderLabs/ModSecurity/pull/1523#issuecomment-319765866,"ValidateByteRange::evaluate() acquires bytes it validates by indexing std::string:
bool ValidateByteRange::evaluate(Transaction *transaction, Rule *rule,
    const std::string &input, std::shared_ptr<RuleMessage> ruleMessage) {
    bool ret = true;

    size_t count = 0;
    for (int i = 0; i < input.length(); i++) {
        int x = input.at(i);
        if (!(table[x >> 3] & (1 << (x & 0x7)))) {
            ...
            count++;
        }
    }

    ret = (count != 0);
    // ...
    return ret;
}
The problem is that indexing a string gives a char, which is signed, so bytes with codes > 127 will appear as negative integers, resulting in incorrect validation. This can be illustrated by this minimal example:
#include ""modsecurity/modsecurity.h""
#include ""modsecurity/rules.h""

static void logCb(void *data, const void *ruleMessagev) {
    std::cout << (char *) ruleMessagev << std::endl;
}

const char * req_uri = ""/test?param=%D0%A2%D0%B0%D1%80%D0%B0%D0%B1%D0%B0%D0%BD"";

int main() {
    modsecurity::ModSecurity *modsec = new modsecurity::ModSecurity();
    modsecurity::Rules *rules = new modsecurity::Rules();
    modsecurity::Transaction * modsecTransaction;

    modsec->setServerLogCb(logCb, modsecurity::TextLogProperty);

    rules->loadFromUri(""test.conf"");

    modsecTransaction = new modsecurity::Transaction(modsec, rules, NULL);
    modsecTransaction->processURI(req_uri, ""GET"", ""1.1"");
    modsecTransaction->processRequestHeaders();
    modsecTransaction->processRequestBody();

    delete modsecTransaction;
    delete rules;
    delete modsec;
    return 0;
}
And this test config:
SecRule REQUEST_URI ""@validateByteRange 1-255"" \
  id:920270

Even though this config allows any byte except NULL byte, URI in test will fail the check resulting in alert, because bytes \xd0, \xa2 etc are considered negative, hence < 1 and out of range. This breaks rules 920270 , 920271 etc from OWASP CRS (in fact, config including those rules with tx.paranoia_level=2 can be used as test.conf in the above example, the rules will be mistakenly triggered).
The proposed solution is to cast a byte from input string to unsigned char before further processing - bytes will then fall in range [0;255] and be validated as expected. In fact, the same thing is done in v2 (https://github.com/SpiderLabs/ModSecurity/blob/v2/master/apache2/re_operators.c#L4168):
int x = ((unsigned char *)var->value)[i];",Also added a unit-test for this case: SpiderLabs/secrules-language-tests#3,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1523,2017-08-02T18:39:03Z,2017-08-20T23:09:01Z,2017-08-20T23:09:01Z,CLOSED,False,42,1,3,https://github.com/asterite3,Fix operator @validateByteRange working with bytes > 127,3,[],https://github.com/SpiderLabs/ModSecurity/pull/1523,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1523#issuecomment-323618005,"ValidateByteRange::evaluate() acquires bytes it validates by indexing std::string:
bool ValidateByteRange::evaluate(Transaction *transaction, Rule *rule,
    const std::string &input, std::shared_ptr<RuleMessage> ruleMessage) {
    bool ret = true;

    size_t count = 0;
    for (int i = 0; i < input.length(); i++) {
        int x = input.at(i);
        if (!(table[x >> 3] & (1 << (x & 0x7)))) {
            ...
            count++;
        }
    }

    ret = (count != 0);
    // ...
    return ret;
}
The problem is that indexing a string gives a char, which is signed, so bytes with codes > 127 will appear as negative integers, resulting in incorrect validation. This can be illustrated by this minimal example:
#include ""modsecurity/modsecurity.h""
#include ""modsecurity/rules.h""

static void logCb(void *data, const void *ruleMessagev) {
    std::cout << (char *) ruleMessagev << std::endl;
}

const char * req_uri = ""/test?param=%D0%A2%D0%B0%D1%80%D0%B0%D0%B1%D0%B0%D0%BD"";

int main() {
    modsecurity::ModSecurity *modsec = new modsecurity::ModSecurity();
    modsecurity::Rules *rules = new modsecurity::Rules();
    modsecurity::Transaction * modsecTransaction;

    modsec->setServerLogCb(logCb, modsecurity::TextLogProperty);

    rules->loadFromUri(""test.conf"");

    modsecTransaction = new modsecurity::Transaction(modsec, rules, NULL);
    modsecTransaction->processURI(req_uri, ""GET"", ""1.1"");
    modsecTransaction->processRequestHeaders();
    modsecTransaction->processRequestBody();

    delete modsecTransaction;
    delete rules;
    delete modsec;
    return 0;
}
And this test config:
SecRule REQUEST_URI ""@validateByteRange 1-255"" \
  id:920270

Even though this config allows any byte except NULL byte, URI in test will fail the check resulting in alert, because bytes \xd0, \xa2 etc are considered negative, hence < 1 and out of range. This breaks rules 920270 , 920271 etc from OWASP CRS (in fact, config including those rules with tx.paranoia_level=2 can be used as test.conf in the above example, the rules will be mistakenly triggered).
The proposed solution is to cast a byte from input string to unsigned char before further processing - bytes will then fall in range [0;255] and be validated as expected. In fact, the same thing is done in v2 (https://github.com/SpiderLabs/ModSecurity/blob/v2/master/apache2/re_operators.c#L4168):
int x = ((unsigned char *)var->value)[i];","Hi @asterite3,
Well noticed ;) Thanks! Patch is now merged. Sorry for the delay.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1524,2017-08-03T04:19:47Z,2017-08-20T22:37:06Z,2017-08-20T22:37:06Z,CLOSED,False,6,6,1,https://github.com/victorhora,Fix @rbl operator to correctly recognize known supported RBL providers,1,"['bug', 'RIP - libmodsecurity', 'RIP - libmodsec - missing operators', 'RIP - release-3.0']",https://github.com/SpiderLabs/ModSecurity/pull/1524,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1524,"The @rbl operator was found to not be working for some known providers including HttpBL as the current URL (dnsbl.httpbl.org) was not matching to be able to set the HttpBlKey or set the additional furtheInfo() data.
The previous string comparison was replaced with string::find to match with URLs under ""httpbl.org""  (and other predefined providers) domain as opposed to replacing the provider URL with the one in the API.
Matching the implementation of @rbl for ModSecurity v2 which uses std:strstr to scan the *string for the predefined RBL providers: https://github.com/SpiderLabs/ModSecurity/blob/v2/master/apache2/re_operators.c#L3670","The @rbl operator was found to not be working for some known providers including HttpBL as the current URL (dnsbl.httpbl.org) was not matching to be able to set the HttpBlKey or set the additional furtheInfo() data.
The previous string comparison was replaced with string::find to match with URLs under ""httpbl.org""  (and other predefined providers) domain as opposed to replacing the provider URL with the one in the API.
Matching the implementation of @rbl for ModSecurity v2 which uses std:strstr to scan the *string for the predefined RBL providers: https://github.com/SpiderLabs/ModSecurity/blob/v2/master/apache2/re_operators.c#L3670",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1524,2017-08-03T04:19:47Z,2017-08-20T22:37:06Z,2017-08-20T22:37:06Z,CLOSED,False,6,6,1,https://github.com/victorhora,Fix @rbl operator to correctly recognize known supported RBL providers,1,"['bug', 'RIP - libmodsecurity', 'RIP - libmodsec - missing operators', 'RIP - release-3.0']",https://github.com/SpiderLabs/ModSecurity/pull/1524,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1524#issuecomment-323616537,"The @rbl operator was found to not be working for some known providers including HttpBL as the current URL (dnsbl.httpbl.org) was not matching to be able to set the HttpBlKey or set the additional furtheInfo() data.
The previous string comparison was replaced with string::find to match with URLs under ""httpbl.org""  (and other predefined providers) domain as opposed to replacing the provider URL with the one in the API.
Matching the implementation of @rbl for ModSecurity v2 which uses std:strstr to scan the *string for the predefined RBL providers: https://github.com/SpiderLabs/ModSecurity/blob/v2/master/apache2/re_operators.c#L3670",Merged ;) thanks.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1525,2017-08-03T07:56:48Z,2017-08-20T22:40:27Z,2017-08-20T22:40:27Z,CLOSED,False,45,2,3,https://github.com/asterite3,"Correctly handle the case when implicit @rx starts with ""!"" (negation).",2,[],https://github.com/SpiderLabs/ModSecurity/pull/1525,https://github.com/asterite3,1,https://github.com/SpiderLabs/ModSecurity/pull/1525,"When a parser saw a token NOT followed by OPERATOR_RX_CONTENT_ONLY (implicit @rx), it used the following rules (https://github.com/SpiderLabs/ModSecurity/blob/0508395/src/parser/seclang-parser.yy#L848):
| NOT OPERATOR_RX_CONTENT_ONLY
      {
        OPERATOR_CONTAINER($$, new operators::Rx(""!"" + utils::string::removeBracketsIfNeeded($2)));
This code creates an operator Rx with regular expression starting with !, while it should create a negated Rx with regex not containing the initial !. The following code can be used to demonstrate it:
#include ""modsecurity/modsecurity.h""
#include ""modsecurity/rules.h""

static void logCb(void *data, const void *ruleMessagev) {
    std::cout << (char *) ruleMessagev << std::endl;
}

const char * req_uri = ""/test?param=invalid"";

int main() {
    modsecurity::ModSecurity *modsec = new modsecurity::ModSecurity();
    modsecurity::Rules *rules = new modsecurity::Rules();
    modsecurity::Transaction * modsecTransaction;

    modsec->setServerLogCb(logCb, modsecurity::TextLogProperty);

    rules->loadFromUri(""test.conf"");

    modsecTransaction = new modsecurity::Transaction(modsec, rules, NULL);
    modsecTransaction->processURI(req_uri, ""GET"", ""1.1"");
    modsecTransaction->processRequestHeaders();
    modsecTransaction->processRequestBody();

    delete modsecTransaction;
    delete rules;
    delete modsec;
    return 0;
}
With test.conf:
SecRule ARGS:param ""!^valid$"" id:1

This code should produce an alert because the rule only allows param to have value valid. Instead, it will print nothing, because the rule checks param against regex !^valid$.
This breaks OWASP CRS rules that use negation of implicit @rx, for example rule 920170 (which contains SecRule REQUEST_HEADERS:Content-Length ""!^0?$""), that ensures that value of Content-Length header can't be other than zero when request method is GET or POST. In fact this rule will never fire because no header value can satisfy regex ""!^0?$"" (exclamation mark before beginning of the line).
The proposed fix is to let parser use the Rx constructor that accepts 3 arguments ( Rx(std::string op, std::string param, bool negation)) and pass true as negation value:
 | NOT OPERATOR_RX_CONTENT_ONLY
      {
        OPERATOR_CONTAINER($$, new operators::Rx(""Rx"", utils::string::removeBracketsIfNeeded($2), true));","When a parser saw a token NOT followed by OPERATOR_RX_CONTENT_ONLY (implicit @rx), it used the following rules (https://github.com/SpiderLabs/ModSecurity/blob/0508395/src/parser/seclang-parser.yy#L848):
| NOT OPERATOR_RX_CONTENT_ONLY
      {
        OPERATOR_CONTAINER($$, new operators::Rx(""!"" + utils::string::removeBracketsIfNeeded($2)));
This code creates an operator Rx with regular expression starting with !, while it should create a negated Rx with regex not containing the initial !. The following code can be used to demonstrate it:
#include ""modsecurity/modsecurity.h""
#include ""modsecurity/rules.h""

static void logCb(void *data, const void *ruleMessagev) {
    std::cout << (char *) ruleMessagev << std::endl;
}

const char * req_uri = ""/test?param=invalid"";

int main() {
    modsecurity::ModSecurity *modsec = new modsecurity::ModSecurity();
    modsecurity::Rules *rules = new modsecurity::Rules();
    modsecurity::Transaction * modsecTransaction;

    modsec->setServerLogCb(logCb, modsecurity::TextLogProperty);

    rules->loadFromUri(""test.conf"");

    modsecTransaction = new modsecurity::Transaction(modsec, rules, NULL);
    modsecTransaction->processURI(req_uri, ""GET"", ""1.1"");
    modsecTransaction->processRequestHeaders();
    modsecTransaction->processRequestBody();

    delete modsecTransaction;
    delete rules;
    delete modsec;
    return 0;
}
With test.conf:
SecRule ARGS:param ""!^valid$"" id:1

This code should produce an alert because the rule only allows param to have value valid. Instead, it will print nothing, because the rule checks param against regex !^valid$.
This breaks OWASP CRS rules that use negation of implicit @rx, for example rule 920170 (which contains SecRule REQUEST_HEADERS:Content-Length ""!^0?$""), that ensures that value of Content-Length header can't be other than zero when request method is GET or POST. In fact this rule will never fire because no header value can satisfy regex ""!^0?$"" (exclamation mark before beginning of the line).
The proposed fix is to let parser use the Rx constructor that accepts 3 arguments ( Rx(std::string op, std::string param, bool negation)) and pass true as negation value:
 | NOT OPERATOR_RX_CONTENT_ONLY
      {
        OPERATOR_CONTAINER($$, new operators::Rx(""Rx"", utils::string::removeBracketsIfNeeded($2), true));",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1525,2017-08-03T07:56:48Z,2017-08-20T22:40:27Z,2017-08-20T22:40:27Z,CLOSED,False,45,2,3,https://github.com/asterite3,"Correctly handle the case when implicit @rx starts with ""!"" (negation).",2,[],https://github.com/SpiderLabs/ModSecurity/pull/1525,https://github.com/asterite3,2,https://github.com/SpiderLabs/ModSecurity/pull/1525#issuecomment-319955486,"When a parser saw a token NOT followed by OPERATOR_RX_CONTENT_ONLY (implicit @rx), it used the following rules (https://github.com/SpiderLabs/ModSecurity/blob/0508395/src/parser/seclang-parser.yy#L848):
| NOT OPERATOR_RX_CONTENT_ONLY
      {
        OPERATOR_CONTAINER($$, new operators::Rx(""!"" + utils::string::removeBracketsIfNeeded($2)));
This code creates an operator Rx with regular expression starting with !, while it should create a negated Rx with regex not containing the initial !. The following code can be used to demonstrate it:
#include ""modsecurity/modsecurity.h""
#include ""modsecurity/rules.h""

static void logCb(void *data, const void *ruleMessagev) {
    std::cout << (char *) ruleMessagev << std::endl;
}

const char * req_uri = ""/test?param=invalid"";

int main() {
    modsecurity::ModSecurity *modsec = new modsecurity::ModSecurity();
    modsecurity::Rules *rules = new modsecurity::Rules();
    modsecurity::Transaction * modsecTransaction;

    modsec->setServerLogCb(logCb, modsecurity::TextLogProperty);

    rules->loadFromUri(""test.conf"");

    modsecTransaction = new modsecurity::Transaction(modsec, rules, NULL);
    modsecTransaction->processURI(req_uri, ""GET"", ""1.1"");
    modsecTransaction->processRequestHeaders();
    modsecTransaction->processRequestBody();

    delete modsecTransaction;
    delete rules;
    delete modsec;
    return 0;
}
With test.conf:
SecRule ARGS:param ""!^valid$"" id:1

This code should produce an alert because the rule only allows param to have value valid. Instead, it will print nothing, because the rule checks param against regex !^valid$.
This breaks OWASP CRS rules that use negation of implicit @rx, for example rule 920170 (which contains SecRule REQUEST_HEADERS:Content-Length ""!^0?$""), that ensures that value of Content-Length header can't be other than zero when request method is GET or POST. In fact this rule will never fire because no header value can satisfy regex ""!^0?$"" (exclamation mark before beginning of the line).
The proposed fix is to let parser use the Rx constructor that accepts 3 arguments ( Rx(std::string op, std::string param, bool negation)) and pass true as negation value:
 | NOT OPERATOR_RX_CONTENT_ONLY
      {
        OPERATOR_CONTAINER($$, new operators::Rx(""Rx"", utils::string::removeBracketsIfNeeded($2), true));",Closing and reopening to trigger travis-ci re-build (previous build failed due to apt-get timeout: https://travis-ci.org/SpiderLabs/ModSecurity/builds/260504613?utm_source=github_status&utm_medium=notification).,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1525,2017-08-03T07:56:48Z,2017-08-20T22:40:27Z,2017-08-20T22:40:27Z,CLOSED,False,45,2,3,https://github.com/asterite3,"Correctly handle the case when implicit @rx starts with ""!"" (negation).",2,[],https://github.com/SpiderLabs/ModSecurity/pull/1525,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1525#issuecomment-323616677,"When a parser saw a token NOT followed by OPERATOR_RX_CONTENT_ONLY (implicit @rx), it used the following rules (https://github.com/SpiderLabs/ModSecurity/blob/0508395/src/parser/seclang-parser.yy#L848):
| NOT OPERATOR_RX_CONTENT_ONLY
      {
        OPERATOR_CONTAINER($$, new operators::Rx(""!"" + utils::string::removeBracketsIfNeeded($2)));
This code creates an operator Rx with regular expression starting with !, while it should create a negated Rx with regex not containing the initial !. The following code can be used to demonstrate it:
#include ""modsecurity/modsecurity.h""
#include ""modsecurity/rules.h""

static void logCb(void *data, const void *ruleMessagev) {
    std::cout << (char *) ruleMessagev << std::endl;
}

const char * req_uri = ""/test?param=invalid"";

int main() {
    modsecurity::ModSecurity *modsec = new modsecurity::ModSecurity();
    modsecurity::Rules *rules = new modsecurity::Rules();
    modsecurity::Transaction * modsecTransaction;

    modsec->setServerLogCb(logCb, modsecurity::TextLogProperty);

    rules->loadFromUri(""test.conf"");

    modsecTransaction = new modsecurity::Transaction(modsec, rules, NULL);
    modsecTransaction->processURI(req_uri, ""GET"", ""1.1"");
    modsecTransaction->processRequestHeaders();
    modsecTransaction->processRequestBody();

    delete modsecTransaction;
    delete rules;
    delete modsec;
    return 0;
}
With test.conf:
SecRule ARGS:param ""!^valid$"" id:1

This code should produce an alert because the rule only allows param to have value valid. Instead, it will print nothing, because the rule checks param against regex !^valid$.
This breaks OWASP CRS rules that use negation of implicit @rx, for example rule 920170 (which contains SecRule REQUEST_HEADERS:Content-Length ""!^0?$""), that ensures that value of Content-Length header can't be other than zero when request method is GET or POST. In fact this rule will never fire because no header value can satisfy regex ""!^0?$"" (exclamation mark before beginning of the line).
The proposed fix is to let parser use the Rx constructor that accepts 3 arguments ( Rx(std::string op, std::string param, bool negation)) and pass true as negation value:
 | NOT OPERATOR_RX_CONTENT_ONLY
      {
        OPERATOR_CONTAINER($$, new operators::Rx(""Rx"", utils::string::removeBracketsIfNeeded($2), true));","Hi @asterite3,
Good catch. Sorry for the delay. Patch merged! thanks.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1526,2017-08-03T10:05:55Z,2017-08-20T23:32:01Z,2017-08-20T23:32:08Z,CLOSED,False,970,601,14,https://github.com/hieuttse03538,Nginx refactoring,32,[],https://github.com/SpiderLabs/ModSecurity/pull/1526,https://github.com/hieuttse03538,1,https://github.com/SpiderLabs/ModSecurity/pull/1526,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1526,2017-08-03T10:05:55Z,2017-08-20T23:32:01Z,2017-08-20T23:32:08Z,CLOSED,False,970,601,14,https://github.com/hieuttse03538,Nginx refactoring,32,[],https://github.com/SpiderLabs/ModSecurity/pull/1526,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1526#issuecomment-323618969,,"Hi @hieuttse03538,
Not sure what you want to do. Assuming that you asked for this merge inadvertently.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1527,2017-08-03T11:31:10Z,2017-08-20T23:00:52Z,2017-08-21T07:59:27Z,CLOSED,False,20,29,2,https://github.com/lkarsten,Minor test case fixups,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1527,https://github.com/lkarsten,1,https://github.com/SpiderLabs/ModSecurity/pull/1527,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1527,2017-08-03T11:31:10Z,2017-08-20T23:00:52Z,2017-08-21T07:59:27Z,CLOSED,False,20,29,2,https://github.com/lkarsten,Minor test case fixups,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1527,https://github.com/lkarsten,2,https://github.com/SpiderLabs/ModSecurity/pull/1527#issuecomment-321742118,,"Hi. Does this look ok for a merge, or should I rework it somehow?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1527,2017-08-03T11:31:10Z,2017-08-20T23:00:52Z,2017-08-21T07:59:27Z,CLOSED,False,20,29,2,https://github.com/lkarsten,Minor test case fixups,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1527,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1527#issuecomment-323617620,,"Hi @lkarsten,
Thank you for the patch ;) Merged.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1527,2017-08-03T11:31:10Z,2017-08-20T23:00:52Z,2017-08-21T07:59:27Z,CLOSED,False,20,29,2,https://github.com/lkarsten,Minor test case fixups,2,[],https://github.com/SpiderLabs/ModSecurity/pull/1527,https://github.com/lkarsten,4,https://github.com/SpiderLabs/ModSecurity/pull/1527#issuecomment-323673771,,Thanks for merging!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1530,2017-08-03T12:35:24Z,2017-08-20T12:39:00Z,2017-08-20T12:39:00Z,CLOSED,False,4,0,1,https://github.com/lkarsten,Handle zero byte rule files correctly.,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1530,https://github.com/lkarsten,1,https://github.com/SpiderLabs/ModSecurity/pull/1530,"This corrects the stalling behaviour seen when trying to parse an empty
rule file.
Fixes: #1521","This corrects the stalling behaviour seen when trying to parse an empty
rule file.
Fixes: #1521",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1530,2017-08-03T12:35:24Z,2017-08-20T12:39:00Z,2017-08-20T12:39:00Z,CLOSED,False,4,0,1,https://github.com/lkarsten,Handle zero byte rule files correctly.,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1530,https://github.com/lkarsten,2,https://github.com/SpiderLabs/ModSecurity/pull/1530#issuecomment-319957492,"This corrects the stalling behaviour seen when trying to parse an empty
rule file.
Fixes: #1521","The edge case here is 0 bytes. A 1 byte file loads just fine. The 0 byte length means that the look-ahead in the parser blocks indefinitely on getc(). We don't have that kind of time.
I don't see an empty file as an error, just return and move on.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1530,2017-08-03T12:35:24Z,2017-08-20T12:39:00Z,2017-08-20T12:39:00Z,CLOSED,False,4,0,1,https://github.com/lkarsten,Handle zero byte rule files correctly.,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1530,https://github.com/lkarsten,3,https://github.com/SpiderLabs/ModSecurity/pull/1530#issuecomment-321742022,"This corrects the stalling behaviour seen when trying to parse an empty
rule file.
Fixes: #1521",Hello. Anything I can do to move this along? Different approach needed?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1530,2017-08-03T12:35:24Z,2017-08-20T12:39:00Z,2017-08-20T12:39:00Z,CLOSED,False,4,0,1,https://github.com/lkarsten,Handle zero byte rule files correctly.,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1530,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1530#issuecomment-323582486,"This corrects the stalling behaviour seen when trying to parse an empty
rule file.
Fixes: #1521",Sorry for the delay. Merged. thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1536,2017-08-19T07:39:17Z,2017-10-06T21:43:48Z,2017-10-06T21:43:55Z,CLOSED,False,74,1,4,https://github.com/asterite3,Fix #1528: add macro expansion for @rx operator,4,[],https://github.com/SpiderLabs/ModSecurity/pull/1536,https://github.com/asterite3,1,https://github.com/SpiderLabs/ModSecurity/pull/1536,"There is a problem that macro expansion in regex of @rx operator does not work (see #1528).
This pull request adds a code that tries macro expansion on regex before matching, and, if regex text changed after expansion, create new Regex object from it and use that for matching.
Also, add an optimization: in Rx constructor, check if macro expansion is possible at all for regex (%{...} present in it), cache the result of this check (save it in a boolean field of Rx object) and try macro expansion before matching only if check was positive. This should avoid macro expansion attempts + string compares for most regexes (at least, for most regexes in OWASP CRS).
Also, add a regression test.
Fixes #1528","There is a problem that macro expansion in regex of @rx operator does not work (see #1528).
This pull request adds a code that tries macro expansion on regex before matching, and, if regex text changed after expansion, create new Regex object from it and use that for matching.
Also, add an optimization: in Rx constructor, check if macro expansion is possible at all for regex (%{...} present in it), cache the result of this check (save it in a boolean field of Rx object) and try macro expansion before matching only if check was positive. This should avoid macro expansion attempts + string compares for most regexes (at least, for most regexes in OWASP CRS).
Also, add a regression test.
Fixes #1528",True,"{'HOORAY': ['https://github.com/victorhora', 'https://github.com/mattmoyer']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1536,2017-08-19T07:39:17Z,2017-10-06T21:43:48Z,2017-10-06T21:43:55Z,CLOSED,False,74,1,4,https://github.com/asterite3,Fix #1528: add macro expansion for @rx operator,4,[],https://github.com/SpiderLabs/ModSecurity/pull/1536,https://github.com/victorhora,2,https://github.com/SpiderLabs/ModSecurity/pull/1536#issuecomment-328020799,"There is a problem that macro expansion in regex of @rx operator does not work (see #1528).
This pull request adds a code that tries macro expansion on regex before matching, and, if regex text changed after expansion, create new Regex object from it and use that for matching.
Also, add an optimization: in Rx constructor, check if macro expansion is possible at all for regex (%{...} present in it), cache the result of this check (save it in a boolean field of Rx object) and try macro expansion before matching only if check was positive. This should avoid macro expansion attempts + string compares for most regexes (at least, for most regexes in OWASP CRS).
Also, add a regression test.
Fixes #1528","PR looks great. Will also fix #1552.
Ready to merge once @zimmerle confirms it's all good with his buildbots :)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1536,2017-08-19T07:39:17Z,2017-10-06T21:43:48Z,2017-10-06T21:43:55Z,CLOSED,False,74,1,4,https://github.com/asterite3,Fix #1528: add macro expansion for @rx operator,4,[],https://github.com/SpiderLabs/ModSecurity/pull/1536,https://github.com/defanator,3,https://github.com/SpiderLabs/ModSecurity/pull/1536#issuecomment-334097951,"There is a problem that macro expansion in regex of @rx operator does not work (see #1528).
This pull request adds a code that tries macro expansion on regex before matching, and, if regex text changed after expansion, create new Regex object from it and use that for matching.
Also, add an optimization: in Rx constructor, check if macro expansion is possible at all for regex (%{...} present in it), cache the result of this check (save it in a boolean field of Rx object) and try macro expansion before matching only if check was positive. This should avoid macro expansion attempts + string compares for most regexes (at least, for most regexes in OWASP CRS).
Also, add a regression test.
Fixes #1528","Hey @zimmerle @victorhora - any reasons this PR is still not merged?
Just wondering due to related issue reported here:
#1552
Thanks!",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1536,2017-08-19T07:39:17Z,2017-10-06T21:43:48Z,2017-10-06T21:43:55Z,CLOSED,False,74,1,4,https://github.com/asterite3,Fix #1528: add macro expansion for @rx operator,4,[],https://github.com/SpiderLabs/ModSecurity/pull/1536,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1536#issuecomment-334145148,"There is a problem that macro expansion in regex of @rx operator does not work (see #1528).
This pull request adds a code that tries macro expansion on regex before matching, and, if regex text changed after expansion, create new Regex object from it and use that for matching.
Also, add an optimization: in Rx constructor, check if macro expansion is possible at all for regex (%{...} present in it), cache the result of this check (save it in a boolean field of Rx object) and try macro expansion before matching only if check was positive. This should avoid macro expansion attempts + string compares for most regexes (at least, for most regexes in OWASP CRS).
Also, add a regression test.
Fixes #1528","Hi @defanator,
It is in my queue to review. In particular I am interested to understand if there is memory corruption in
a thread environment. It seems to be safe to use in multi-process.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1536,2017-08-19T07:39:17Z,2017-10-06T21:43:48Z,2017-10-06T21:43:55Z,CLOSED,False,74,1,4,https://github.com/asterite3,Fix #1528: add macro expansion for @rx operator,4,[],https://github.com/SpiderLabs/ModSecurity/pull/1536,https://github.com/zimmerle,5,https://github.com/SpiderLabs/ModSecurity/pull/1536#issuecomment-334877519,"There is a problem that macro expansion in regex of @rx operator does not work (see #1528).
This pull request adds a code that tries macro expansion on regex before matching, and, if regex text changed after expansion, create new Regex object from it and use that for matching.
Also, add an optimization: in Rx constructor, check if macro expansion is possible at all for regex (%{...} present in it), cache the result of this check (save it in a boolean field of Rx object) and try macro expansion before matching only if check was positive. This should avoid macro expansion attempts + string compares for most regexes (at least, for most regexes in OWASP CRS).
Also, add a regression test.
Fixes #1528","Hi @asterite3,
Thank you for the patch! It is already merge. Notice however that I have removed the optimization, as it demands further investigation.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1538,2017-08-23T00:44:21Z,2017-10-06T16:45:35Z,2017-10-06T16:45:36Z,CLOSED,False,57,42,5,https://github.com/allanbomsft,Preallocate memory when SecStreamInBodyInspection is on,6,[],https://github.com/SpiderLabs/ModSecurity/pull/1538,https://github.com/allanbomsft,1,https://github.com/SpiderLabs/ModSecurity/pull/1538,"This is an improved fix for #1366 .

Preallocate memory when SecStreamInBodyInspection is on. On my dev box this gave 20x speed improvement for 10mb upload (and even more for larger files).
Simplified the structure of modsecurity_request_body_to_stream
Removed null termination for the stream_input_data buffer, as I did not see a reason for having this. The buffer is not a string. A request body can contain binary data.
Fixed a typo in build_yajl.bat
Added a check of the return value of modsecurity_request_body_to_stream

Thanks!","This is an improved fix for #1366 .

Preallocate memory when SecStreamInBodyInspection is on. On my dev box this gave 20x speed improvement for 10mb upload (and even more for larger files).
Simplified the structure of modsecurity_request_body_to_stream
Removed null termination for the stream_input_data buffer, as I did not see a reason for having this. The buffer is not a string. A request body can contain binary data.
Fixed a typo in build_yajl.bat
Added a check of the return value of modsecurity_request_body_to_stream

Thanks!",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1538,2017-08-23T00:44:21Z,2017-10-06T16:45:35Z,2017-10-06T16:45:36Z,CLOSED,False,57,42,5,https://github.com/allanbomsft,Preallocate memory when SecStreamInBodyInspection is on,6,[],https://github.com/SpiderLabs/ModSecurity/pull/1538,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1538#issuecomment-334532520,"This is an improved fix for #1366 .

Preallocate memory when SecStreamInBodyInspection is on. On my dev box this gave 20x speed improvement for 10mb upload (and even more for larger files).
Simplified the structure of modsecurity_request_body_to_stream
Removed null termination for the stream_input_data buffer, as I did not see a reason for having this. The buffer is not a string. A request body can contain binary data.
Fixed a typo in build_yajl.bat
Added a check of the return value of modsecurity_request_body_to_stream

Thanks!","Fixed a typo in build_yajl.bat -> merged! thanks!
Looking the other stuff.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1538,2017-08-23T00:44:21Z,2017-10-06T16:45:35Z,2017-10-06T16:45:36Z,CLOSED,False,57,42,5,https://github.com/allanbomsft,Preallocate memory when SecStreamInBodyInspection is on,6,[],https://github.com/SpiderLabs/ModSecurity/pull/1538,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1538#issuecomment-334808877,"This is an improved fix for #1366 .

Preallocate memory when SecStreamInBodyInspection is on. On my dev box this gave 20x speed improvement for 10mb upload (and even more for larger files).
Simplified the structure of modsecurity_request_body_to_stream
Removed null termination for the stream_input_data buffer, as I did not see a reason for having this. The buffer is not a string. A request body can contain binary data.
Fixed a typo in build_yajl.bat
Added a check of the return value of modsecurity_request_body_to_stream

Thanks!","Indeed, that seems to be a good optimization. However, it may not be an optimization for certain users where the uploads are very small, therefore making it an optional compilation flag.
Thanks @allanbomsft",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1539,2017-08-23T01:27:18Z,2017-08-24T03:40:52Z,2017-08-24T03:41:00Z,CLOSED,False,4002,3278,19,https://github.com/abhijoglekar,Treat _NAMES variables as collections (#5),1,[],https://github.com/SpiderLabs/ModSecurity/pull/1539,https://github.com/abhijoglekar,1,https://github.com/SpiderLabs/ModSecurity/pull/1539,"Treat _NAMES variables as collections


Fix an issue with the offset of ARGS_NAMES.


Fix regression tests for the new behaviour.


Add generated seclang files.","Treat _NAMES variables as collections


Fix an issue with the offset of ARGS_NAMES.


Fix regression tests for the new behaviour.


Add generated seclang files.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1539,2017-08-23T01:27:18Z,2017-08-24T03:40:52Z,2017-08-24T03:41:00Z,CLOSED,False,4002,3278,19,https://github.com/abhijoglekar,Treat _NAMES variables as collections (#5),1,[],https://github.com/SpiderLabs/ModSecurity/pull/1539,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1539#issuecomment-324524362,"Treat _NAMES variables as collections


Fix an issue with the offset of ARGS_NAMES.


Fix regression tests for the new behaviour.


Add generated seclang files.",Merged! :) thanks,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1540,2017-08-23T01:33:38Z,2017-08-24T02:54:16Z,2017-08-24T02:54:17Z,CLOSED,False,3,3,1,https://github.com/abhijoglekar,Fixes a bug with an unitialized variable.,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1540,https://github.com/abhijoglekar,1,https://github.com/SpiderLabs/ModSecurity/pull/1540,"new_debug_log was unitialized during an error code path.
Fixed this by explicit initializing it to NULL and fixing the order of
the error labels. They now present the correct (reverse) order of the
goto statements.","new_debug_log was unitialized during an error code path.
Fixed this by explicit initializing it to NULL and fixing the order of
the error labels. They now present the correct (reverse) order of the
goto statements.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1540,2017-08-23T01:33:38Z,2017-08-24T02:54:16Z,2017-08-24T02:54:17Z,CLOSED,False,3,3,1,https://github.com/abhijoglekar,Fixes a bug with an unitialized variable.,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1540,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1540#issuecomment-324518586,"new_debug_log was unitialized during an error code path.
Fixed this by explicit initializing it to NULL and fixing the order of
the error labels. They now present the correct (reverse) order of the
goto statements.","Hi @abhijoglekar,
Merged! thanks ;)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1541,2017-08-23T01:34:43Z,2017-08-24T02:53:23Z,2017-08-24T02:53:23Z,CLOSED,False,305,4,22,https://github.com/abhijoglekar,Support --enable-debug-logs=no option of configure script (#2),1,[],https://github.com/SpiderLabs/ModSecurity/pull/1541,https://github.com/abhijoglekar,1,https://github.com/SpiderLabs/ModSecurity/pull/1541,"Support --enable-debug-logs=no option of configure script


Undo unintended white space changes


Undo more unintended white space changes


Address review comments - thanks Mirko


Address more review comments - thanks Mirko","Support --enable-debug-logs=no option of configure script


Undo unintended white space changes


Undo more unintended white space changes


Address review comments - thanks Mirko


Address more review comments - thanks Mirko",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1541,2017-08-23T01:34:43Z,2017-08-24T02:53:23Z,2017-08-24T02:53:23Z,CLOSED,False,305,4,22,https://github.com/abhijoglekar,Support --enable-debug-logs=no option of configure script (#2),1,[],https://github.com/SpiderLabs/ModSecurity/pull/1541,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1541#issuecomment-324518472,"Support --enable-debug-logs=no option of configure script


Undo unintended white space changes


Undo more unintended white space changes


Address review comments - thanks Mirko


Address more review comments - thanks Mirko","Hi @abhijoglekar,
Thanks for the patch! merged!",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1543,2017-08-23T08:45:38Z,2017-08-24T17:52:22Z,2017-08-28T08:22:22Z,MERGED,True,0,6,1,https://github.com/defanator,Remove SecRequestBodyInMemoryLimit from configuration template,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1543,https://github.com/defanator,1,https://github.com/SpiderLabs/ModSecurity/pull/1543,"It is no longer supported since 81879cd, so it would be better to remove any mentions from configuration as well to avoid possible confusions.","It is no longer supported since 81879cd, so it would be better to remove any mentions from configuration as well to avoid possible confusions.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1543,2017-08-23T08:45:38Z,2017-08-24T17:52:22Z,2017-08-28T08:22:22Z,MERGED,True,0,6,1,https://github.com/defanator,Remove SecRequestBodyInMemoryLimit from configuration template,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1543,https://github.com/victorhora,2,https://github.com/SpiderLabs/ModSecurity/pull/1543#issuecomment-324709013,"It is no longer supported since 81879cd, so it would be better to remove any mentions from configuration as well to avoid possible confusions.",Makes sense! Merged. Thanks :),True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1545,2017-08-23T23:35:46Z,2017-10-05T16:12:52Z,2018-12-08T02:45:56Z,CLOSED,False,1,1,1,https://github.com/nicjansma,Fixes SecConnWriteStateLimit,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1545,https://github.com/nicjansma,1,https://github.com/SpiderLabs/ModSecurity/pull/1545,"Since a15f881, I don't believe SecConnWriteStateLimit has been working properly, which means that ""slow read"" attacks are not protected against.
With ModSecurity 2.9.2 on Apache 2.4.27, I was seeing ModSecurity properly blocking a Slowloris attack (slow writing headers) via slowhttptest -H:
slowhttptest -u http://127.0.0.1/a -H -c 1000

Apache error_log with SecConnReadStateLimit 50:
[Wed Aug 23 19:20:38.902507 2017] [:warn] [pid 2712] [client 127.0.0.1:21192] ModSecurity:
Access denied with code 400. Too many threads [51] of 50 allowed in READ state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

We see above that the 51st and all subsequent connections are properly dropped.
However, ""slow read"" attacks (slowhttptest with -X or -B) aren't currently protected.  With SecConnWriteStateLimit 50, ModSecurity currently logs warnings but doesn't drop connections.
slowhttptest -u http://127.0.0.1/a -X -c 1000

[Wed Aug 23 17:09:50.294791 2017] [:warn] [pid 11072] [client 127.0.0.1:44254] ModSecurity:
Access denied with code 400. Too many threads [226] of 50 allowed in WRITE state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

(note 226 out of 50 allowed)
It looks like the line I've changed in this PR had inversed logic (should have been the same as the SecConnReadStateLimit logic), but a15f881 swapped it on accident.
With this one-character fix, I now see slow read attacks being blocked.
CC @zimmerle","Since a15f881, I don't believe SecConnWriteStateLimit has been working properly, which means that ""slow read"" attacks are not protected against.
With ModSecurity 2.9.2 on Apache 2.4.27, I was seeing ModSecurity properly blocking a Slowloris attack (slow writing headers) via slowhttptest -H:
slowhttptest -u http://127.0.0.1/a -H -c 1000

Apache error_log with SecConnReadStateLimit 50:
[Wed Aug 23 19:20:38.902507 2017] [:warn] [pid 2712] [client 127.0.0.1:21192] ModSecurity:
Access denied with code 400. Too many threads [51] of 50 allowed in READ state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

We see above that the 51st and all subsequent connections are properly dropped.
However, ""slow read"" attacks (slowhttptest with -X or -B) aren't currently protected.  With SecConnWriteStateLimit 50, ModSecurity currently logs warnings but doesn't drop connections.
slowhttptest -u http://127.0.0.1/a -X -c 1000

[Wed Aug 23 17:09:50.294791 2017] [:warn] [pid 11072] [client 127.0.0.1:44254] ModSecurity:
Access denied with code 400. Too many threads [226] of 50 allowed in WRITE state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

(note 226 out of 50 allowed)
It looks like the line I've changed in this PR had inversed logic (should have been the same as the SecConnReadStateLimit logic), but a15f881 swapped it on accident.
With this one-character fix, I now see slow read attacks being blocked.
CC @zimmerle",True,{'THUMBS_UP': ['https://github.com/tomsommer']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1545,2017-08-23T23:35:46Z,2017-10-05T16:12:52Z,2018-12-08T02:45:56Z,CLOSED,False,1,1,1,https://github.com/nicjansma,Fixes SecConnWriteStateLimit,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1545,https://github.com/nicjansma,2,https://github.com/SpiderLabs/ModSecurity/pull/1545#issuecomment-328595086,"Since a15f881, I don't believe SecConnWriteStateLimit has been working properly, which means that ""slow read"" attacks are not protected against.
With ModSecurity 2.9.2 on Apache 2.4.27, I was seeing ModSecurity properly blocking a Slowloris attack (slow writing headers) via slowhttptest -H:
slowhttptest -u http://127.0.0.1/a -H -c 1000

Apache error_log with SecConnReadStateLimit 50:
[Wed Aug 23 19:20:38.902507 2017] [:warn] [pid 2712] [client 127.0.0.1:21192] ModSecurity:
Access denied with code 400. Too many threads [51] of 50 allowed in READ state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

We see above that the 51st and all subsequent connections are properly dropped.
However, ""slow read"" attacks (slowhttptest with -X or -B) aren't currently protected.  With SecConnWriteStateLimit 50, ModSecurity currently logs warnings but doesn't drop connections.
slowhttptest -u http://127.0.0.1/a -X -c 1000

[Wed Aug 23 17:09:50.294791 2017] [:warn] [pid 11072] [client 127.0.0.1:44254] ModSecurity:
Access denied with code 400. Too many threads [226] of 50 allowed in WRITE state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

(note 226 out of 50 allowed)
It looks like the line I've changed in this PR had inversed logic (should have been the same as the SecConnReadStateLimit logic), but a15f881 swapped it on accident.
With this one-character fix, I now see slow read attacks being blocked.
CC @zimmerle","(not sure why the Travis check failed?  can I kick it off again?)
Any feedback?  Hoping this is a straightforward fix to get in.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1545,2017-08-23T23:35:46Z,2017-10-05T16:12:52Z,2018-12-08T02:45:56Z,CLOSED,False,1,1,1,https://github.com/nicjansma,Fixes SecConnWriteStateLimit,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1545,https://github.com/marcstern,3,https://github.com/SpiderLabs/ModSecurity/pull/1545#issuecomment-330492483,"Since a15f881, I don't believe SecConnWriteStateLimit has been working properly, which means that ""slow read"" attacks are not protected against.
With ModSecurity 2.9.2 on Apache 2.4.27, I was seeing ModSecurity properly blocking a Slowloris attack (slow writing headers) via slowhttptest -H:
slowhttptest -u http://127.0.0.1/a -H -c 1000

Apache error_log with SecConnReadStateLimit 50:
[Wed Aug 23 19:20:38.902507 2017] [:warn] [pid 2712] [client 127.0.0.1:21192] ModSecurity:
Access denied with code 400. Too many threads [51] of 50 allowed in READ state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

We see above that the 51st and all subsequent connections are properly dropped.
However, ""slow read"" attacks (slowhttptest with -X or -B) aren't currently protected.  With SecConnWriteStateLimit 50, ModSecurity currently logs warnings but doesn't drop connections.
slowhttptest -u http://127.0.0.1/a -X -c 1000

[Wed Aug 23 17:09:50.294791 2017] [:warn] [pid 11072] [client 127.0.0.1:44254] ModSecurity:
Access denied with code 400. Too many threads [226] of 50 allowed in WRITE state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

(note 226 out of 50 allowed)
It looks like the line I've changed in this PR had inversed logic (should have been the same as the SecConnReadStateLimit logic), but a15f881 swapped it on accident.
With this one-character fix, I now see slow read attacks being blocked.
CC @zimmerle","nicjansma is correct, this is an important bug",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1545,2017-08-23T23:35:46Z,2017-10-05T16:12:52Z,2018-12-08T02:45:56Z,CLOSED,False,1,1,1,https://github.com/nicjansma,Fixes SecConnWriteStateLimit,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1545,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1545#issuecomment-334484686,"Since a15f881, I don't believe SecConnWriteStateLimit has been working properly, which means that ""slow read"" attacks are not protected against.
With ModSecurity 2.9.2 on Apache 2.4.27, I was seeing ModSecurity properly blocking a Slowloris attack (slow writing headers) via slowhttptest -H:
slowhttptest -u http://127.0.0.1/a -H -c 1000

Apache error_log with SecConnReadStateLimit 50:
[Wed Aug 23 19:20:38.902507 2017] [:warn] [pid 2712] [client 127.0.0.1:21192] ModSecurity:
Access denied with code 400. Too many threads [51] of 50 allowed in READ state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

We see above that the 51st and all subsequent connections are properly dropped.
However, ""slow read"" attacks (slowhttptest with -X or -B) aren't currently protected.  With SecConnWriteStateLimit 50, ModSecurity currently logs warnings but doesn't drop connections.
slowhttptest -u http://127.0.0.1/a -X -c 1000

[Wed Aug 23 17:09:50.294791 2017] [:warn] [pid 11072] [client 127.0.0.1:44254] ModSecurity:
Access denied with code 400. Too many threads [226] of 50 allowed in WRITE state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

(note 226 out of 50 allowed)
It looks like the line I've changed in this PR had inversed logic (should have been the same as the SecConnReadStateLimit logic), but a15f881 swapped it on accident.
With this one-character fix, I now see slow read attacks being blocked.
CC @zimmerle","Hi @nicjansma,
Thanks for the patch. We currently support two different ModSecurity versions on this very same repository. The v2 and the v3 family. Those different versions are using different buildbots, for some reason the v3 was shot to verify your commit and it failed as expected. I am running the v2 family buildbot manually to check your fix.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1545,2017-08-23T23:35:46Z,2017-10-05T16:12:52Z,2018-12-08T02:45:56Z,CLOSED,False,1,1,1,https://github.com/nicjansma,Fixes SecConnWriteStateLimit,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1545,https://github.com/zimmerle,5,https://github.com/SpiderLabs/ModSecurity/pull/1545#issuecomment-334514990,"Since a15f881, I don't believe SecConnWriteStateLimit has been working properly, which means that ""slow read"" attacks are not protected against.
With ModSecurity 2.9.2 on Apache 2.4.27, I was seeing ModSecurity properly blocking a Slowloris attack (slow writing headers) via slowhttptest -H:
slowhttptest -u http://127.0.0.1/a -H -c 1000

Apache error_log with SecConnReadStateLimit 50:
[Wed Aug 23 19:20:38.902507 2017] [:warn] [pid 2712] [client 127.0.0.1:21192] ModSecurity:
Access denied with code 400. Too many threads [51] of 50 allowed in READ state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

We see above that the 51st and all subsequent connections are properly dropped.
However, ""slow read"" attacks (slowhttptest with -X or -B) aren't currently protected.  With SecConnWriteStateLimit 50, ModSecurity currently logs warnings but doesn't drop connections.
slowhttptest -u http://127.0.0.1/a -X -c 1000

[Wed Aug 23 17:09:50.294791 2017] [:warn] [pid 11072] [client 127.0.0.1:44254] ModSecurity:
Access denied with code 400. Too many threads [226] of 50 allowed in WRITE state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

(note 226 out of 50 allowed)
It looks like the line I've changed in this PR had inversed logic (should have been the same as the SecConnReadStateLimit logic), but a15f881 swapped it on accident.
With this one-character fix, I now see slow read attacks being blocked.
CC @zimmerle",Merged ;) thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1545,2017-08-23T23:35:46Z,2017-10-05T16:12:52Z,2018-12-08T02:45:56Z,CLOSED,False,1,1,1,https://github.com/nicjansma,Fixes SecConnWriteStateLimit,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1545,https://github.com/drmuey,6,https://github.com/SpiderLabs/ModSecurity/pull/1545#issuecomment-341200533,"Since a15f881, I don't believe SecConnWriteStateLimit has been working properly, which means that ""slow read"" attacks are not protected against.
With ModSecurity 2.9.2 on Apache 2.4.27, I was seeing ModSecurity properly blocking a Slowloris attack (slow writing headers) via slowhttptest -H:
slowhttptest -u http://127.0.0.1/a -H -c 1000

Apache error_log with SecConnReadStateLimit 50:
[Wed Aug 23 19:20:38.902507 2017] [:warn] [pid 2712] [client 127.0.0.1:21192] ModSecurity:
Access denied with code 400. Too many threads [51] of 50 allowed in READ state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

We see above that the 51st and all subsequent connections are properly dropped.
However, ""slow read"" attacks (slowhttptest with -X or -B) aren't currently protected.  With SecConnWriteStateLimit 50, ModSecurity currently logs warnings but doesn't drop connections.
slowhttptest -u http://127.0.0.1/a -X -c 1000

[Wed Aug 23 17:09:50.294791 2017] [:warn] [pid 11072] [client 127.0.0.1:44254] ModSecurity:
Access denied with code 400. Too many threads [226] of 50 allowed in WRITE state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

(note 226 out of 50 allowed)
It looks like the line I've changed in this PR had inversed logic (should have been the same as the SecConnReadStateLimit logic), but a15f881 swapped it on accident.
With this one-character fix, I now see slow read attacks being blocked.
CC @zimmerle","Greetings!

Will this fix go out in 2.9.3?
Is there an ETA for when that will version will be available?",True,{'THUMBS_UP': ['https://github.com/HoustonDad']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1545,2017-08-23T23:35:46Z,2017-10-05T16:12:52Z,2018-12-08T02:45:56Z,CLOSED,False,1,1,1,https://github.com/nicjansma,Fixes SecConnWriteStateLimit,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1545,https://github.com/victorhora,7,https://github.com/SpiderLabs/ModSecurity/pull/1545#issuecomment-341436617,"Since a15f881, I don't believe SecConnWriteStateLimit has been working properly, which means that ""slow read"" attacks are not protected against.
With ModSecurity 2.9.2 on Apache 2.4.27, I was seeing ModSecurity properly blocking a Slowloris attack (slow writing headers) via slowhttptest -H:
slowhttptest -u http://127.0.0.1/a -H -c 1000

Apache error_log with SecConnReadStateLimit 50:
[Wed Aug 23 19:20:38.902507 2017] [:warn] [pid 2712] [client 127.0.0.1:21192] ModSecurity:
Access denied with code 400. Too many threads [51] of 50 allowed in READ state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

We see above that the 51st and all subsequent connections are properly dropped.
However, ""slow read"" attacks (slowhttptest with -X or -B) aren't currently protected.  With SecConnWriteStateLimit 50, ModSecurity currently logs warnings but doesn't drop connections.
slowhttptest -u http://127.0.0.1/a -X -c 1000

[Wed Aug 23 17:09:50.294791 2017] [:warn] [pid 11072] [client 127.0.0.1:44254] ModSecurity:
Access denied with code 400. Too many threads [226] of 50 allowed in WRITE state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

(note 226 out of 50 allowed)
It looks like the line I've changed in this PR had inversed logic (should have been the same as the SecConnReadStateLimit logic), but a15f881 swapped it on accident.
With this one-character fix, I now see slow read attacks being blocked.
CC @zimmerle","@drmuey


Yes, the fix is already in the mainline and will go to 2.9.3. See commit d50f840


There's still no ETA for 2.9.3. I don't think it will happen before year end as current focus is on ModSecurity 3.0.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1545,2017-08-23T23:35:46Z,2017-10-05T16:12:52Z,2018-12-08T02:45:56Z,CLOSED,False,1,1,1,https://github.com/nicjansma,Fixes SecConnWriteStateLimit,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1545,https://github.com/drmuey,8,https://github.com/SpiderLabs/ModSecurity/pull/1545#issuecomment-341445675,"Since a15f881, I don't believe SecConnWriteStateLimit has been working properly, which means that ""slow read"" attacks are not protected against.
With ModSecurity 2.9.2 on Apache 2.4.27, I was seeing ModSecurity properly blocking a Slowloris attack (slow writing headers) via slowhttptest -H:
slowhttptest -u http://127.0.0.1/a -H -c 1000

Apache error_log with SecConnReadStateLimit 50:
[Wed Aug 23 19:20:38.902507 2017] [:warn] [pid 2712] [client 127.0.0.1:21192] ModSecurity:
Access denied with code 400. Too many threads [51] of 50 allowed in READ state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

We see above that the 51st and all subsequent connections are properly dropped.
However, ""slow read"" attacks (slowhttptest with -X or -B) aren't currently protected.  With SecConnWriteStateLimit 50, ModSecurity currently logs warnings but doesn't drop connections.
slowhttptest -u http://127.0.0.1/a -X -c 1000

[Wed Aug 23 17:09:50.294791 2017] [:warn] [pid 11072] [client 127.0.0.1:44254] ModSecurity:
Access denied with code 400. Too many threads [226] of 50 allowed in WRITE state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

(note 226 out of 50 allowed)
It looks like the line I've changed in this PR had inversed logic (should have been the same as the SecConnReadStateLimit logic), but a15f881 swapped it on accident.
With this one-character fix, I now see slow read attacks being blocked.
CC @zimmerle","thanks @victorhora , much appreciated 👍",True,{'THUMBS_UP': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1545,2017-08-23T23:35:46Z,2017-10-05T16:12:52Z,2018-12-08T02:45:56Z,CLOSED,False,1,1,1,https://github.com/nicjansma,Fixes SecConnWriteStateLimit,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1545,https://github.com/nicjansma,9,https://github.com/SpiderLabs/ModSecurity/pull/1545#issuecomment-406350547,"Since a15f881, I don't believe SecConnWriteStateLimit has been working properly, which means that ""slow read"" attacks are not protected against.
With ModSecurity 2.9.2 on Apache 2.4.27, I was seeing ModSecurity properly blocking a Slowloris attack (slow writing headers) via slowhttptest -H:
slowhttptest -u http://127.0.0.1/a -H -c 1000

Apache error_log with SecConnReadStateLimit 50:
[Wed Aug 23 19:20:38.902507 2017] [:warn] [pid 2712] [client 127.0.0.1:21192] ModSecurity:
Access denied with code 400. Too many threads [51] of 50 allowed in READ state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

We see above that the 51st and all subsequent connections are properly dropped.
However, ""slow read"" attacks (slowhttptest with -X or -B) aren't currently protected.  With SecConnWriteStateLimit 50, ModSecurity currently logs warnings but doesn't drop connections.
slowhttptest -u http://127.0.0.1/a -X -c 1000

[Wed Aug 23 17:09:50.294791 2017] [:warn] [pid 11072] [client 127.0.0.1:44254] ModSecurity:
Access denied with code 400. Too many threads [226] of 50 allowed in WRITE state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

(note 226 out of 50 allowed)
It looks like the line I've changed in this PR had inversed logic (should have been the same as the SecConnReadStateLimit logic), but a15f881 swapped it on accident.
With this one-character fix, I now see slow read attacks being blocked.
CC @zimmerle",@victorhora @zimmerle Would we be able to move forward with a 2.9.3 release soon?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1545,2017-08-23T23:35:46Z,2017-10-05T16:12:52Z,2018-12-08T02:45:56Z,CLOSED,False,1,1,1,https://github.com/nicjansma,Fixes SecConnWriteStateLimit,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1545,https://github.com/nicjansma,10,https://github.com/SpiderLabs/ModSecurity/pull/1545#issuecomment-424905187,"Since a15f881, I don't believe SecConnWriteStateLimit has been working properly, which means that ""slow read"" attacks are not protected against.
With ModSecurity 2.9.2 on Apache 2.4.27, I was seeing ModSecurity properly blocking a Slowloris attack (slow writing headers) via slowhttptest -H:
slowhttptest -u http://127.0.0.1/a -H -c 1000

Apache error_log with SecConnReadStateLimit 50:
[Wed Aug 23 19:20:38.902507 2017] [:warn] [pid 2712] [client 127.0.0.1:21192] ModSecurity:
Access denied with code 400. Too many threads [51] of 50 allowed in READ state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

We see above that the 51st and all subsequent connections are properly dropped.
However, ""slow read"" attacks (slowhttptest with -X or -B) aren't currently protected.  With SecConnWriteStateLimit 50, ModSecurity currently logs warnings but doesn't drop connections.
slowhttptest -u http://127.0.0.1/a -X -c 1000

[Wed Aug 23 17:09:50.294791 2017] [:warn] [pid 11072] [client 127.0.0.1:44254] ModSecurity:
Access denied with code 400. Too many threads [226] of 50 allowed in WRITE state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

(note 226 out of 50 allowed)
It looks like the line I've changed in this PR had inversed logic (should have been the same as the SecConnReadStateLimit logic), but a15f881 swapped it on accident.
With this one-character fix, I now see slow read attacks being blocked.
CC @zimmerle",@victorhora @zimmerle do you have an estimate for when a 2.9.3 release will be available?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1545,2017-08-23T23:35:46Z,2017-10-05T16:12:52Z,2018-12-08T02:45:56Z,CLOSED,False,1,1,1,https://github.com/nicjansma,Fixes SecConnWriteStateLimit,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1545,https://github.com/victorhora,11,https://github.com/SpiderLabs/ModSecurity/pull/1545#issuecomment-425688281,"Since a15f881, I don't believe SecConnWriteStateLimit has been working properly, which means that ""slow read"" attacks are not protected against.
With ModSecurity 2.9.2 on Apache 2.4.27, I was seeing ModSecurity properly blocking a Slowloris attack (slow writing headers) via slowhttptest -H:
slowhttptest -u http://127.0.0.1/a -H -c 1000

Apache error_log with SecConnReadStateLimit 50:
[Wed Aug 23 19:20:38.902507 2017] [:warn] [pid 2712] [client 127.0.0.1:21192] ModSecurity:
Access denied with code 400. Too many threads [51] of 50 allowed in READ state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

We see above that the 51st and all subsequent connections are properly dropped.
However, ""slow read"" attacks (slowhttptest with -X or -B) aren't currently protected.  With SecConnWriteStateLimit 50, ModSecurity currently logs warnings but doesn't drop connections.
slowhttptest -u http://127.0.0.1/a -X -c 1000

[Wed Aug 23 17:09:50.294791 2017] [:warn] [pid 11072] [client 127.0.0.1:44254] ModSecurity:
Access denied with code 400. Too many threads [226] of 50 allowed in WRITE state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

(note 226 out of 50 allowed)
It looks like the line I've changed in this PR had inversed logic (should have been the same as the SecConnReadStateLimit logic), but a15f881 swapped it on accident.
With this one-character fix, I now see slow read attacks being blocked.
CC @zimmerle","Hi @nicjansma
We would like to have finished both 3.0.3 and 2.9.3 releases by end of September, but unfortunately some of the issues took more time and effort than we anticipated.
There's milestones set for both releases here:
2.9.3: https://github.com/SpiderLabs/ModSecurity/milestone/10
3.0.3 https://github.com/SpiderLabs/ModSecurity/milestone/12
And we also have a number of pull requests to be fully reviewed/tested and merged prior to the next release: https://github.com/SpiderLabs/ModSecurity/pulls
Ideally we would like to fix/close most (or all) of those issues before the next release. Hopefully soon, but I don't have a date yet, but certainly before end of October.
In the meantime, any help in the sense of pull requests, reviews, results of tests and comments on the aforementioned issues/PRs are appreciated :)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1545,2017-08-23T23:35:46Z,2017-10-05T16:12:52Z,2018-12-08T02:45:56Z,CLOSED,False,1,1,1,https://github.com/nicjansma,Fixes SecConnWriteStateLimit,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1545,https://github.com/nicjansma,12,https://github.com/SpiderLabs/ModSecurity/pull/1545#issuecomment-425716469,"Since a15f881, I don't believe SecConnWriteStateLimit has been working properly, which means that ""slow read"" attacks are not protected against.
With ModSecurity 2.9.2 on Apache 2.4.27, I was seeing ModSecurity properly blocking a Slowloris attack (slow writing headers) via slowhttptest -H:
slowhttptest -u http://127.0.0.1/a -H -c 1000

Apache error_log with SecConnReadStateLimit 50:
[Wed Aug 23 19:20:38.902507 2017] [:warn] [pid 2712] [client 127.0.0.1:21192] ModSecurity:
Access denied with code 400. Too many threads [51] of 50 allowed in READ state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

We see above that the 51st and all subsequent connections are properly dropped.
However, ""slow read"" attacks (slowhttptest with -X or -B) aren't currently protected.  With SecConnWriteStateLimit 50, ModSecurity currently logs warnings but doesn't drop connections.
slowhttptest -u http://127.0.0.1/a -X -c 1000

[Wed Aug 23 17:09:50.294791 2017] [:warn] [pid 11072] [client 127.0.0.1:44254] ModSecurity:
Access denied with code 400. Too many threads [226] of 50 allowed in WRITE state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

(note 226 out of 50 allowed)
It looks like the line I've changed in this PR had inversed logic (should have been the same as the SecConnReadStateLimit logic), but a15f881 swapped it on accident.
With this one-character fix, I now see slow read attacks being blocked.
CC @zimmerle","That's great @victorhora, thank you for the update!
That seems to be quite a few issues being addressed in 2.9.3.  Would you consider moving forward with a few smaller 2.9.x releases?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1545,2017-08-23T23:35:46Z,2017-10-05T16:12:52Z,2018-12-08T02:45:56Z,CLOSED,False,1,1,1,https://github.com/nicjansma,Fixes SecConnWriteStateLimit,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1545,https://github.com/victorhora,13,https://github.com/SpiderLabs/ModSecurity/pull/1545#issuecomment-426020913,"Since a15f881, I don't believe SecConnWriteStateLimit has been working properly, which means that ""slow read"" attacks are not protected against.
With ModSecurity 2.9.2 on Apache 2.4.27, I was seeing ModSecurity properly blocking a Slowloris attack (slow writing headers) via slowhttptest -H:
slowhttptest -u http://127.0.0.1/a -H -c 1000

Apache error_log with SecConnReadStateLimit 50:
[Wed Aug 23 19:20:38.902507 2017] [:warn] [pid 2712] [client 127.0.0.1:21192] ModSecurity:
Access denied with code 400. Too many threads [51] of 50 allowed in READ state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

We see above that the 51st and all subsequent connections are properly dropped.
However, ""slow read"" attacks (slowhttptest with -X or -B) aren't currently protected.  With SecConnWriteStateLimit 50, ModSecurity currently logs warnings but doesn't drop connections.
slowhttptest -u http://127.0.0.1/a -X -c 1000

[Wed Aug 23 17:09:50.294791 2017] [:warn] [pid 11072] [client 127.0.0.1:44254] ModSecurity:
Access denied with code 400. Too many threads [226] of 50 allowed in WRITE state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

(note 226 out of 50 allowed)
It looks like the line I've changed in this PR had inversed logic (should have been the same as the SecConnReadStateLimit logic), but a15f881 swapped it on accident.
With this one-character fix, I now see slow read attacks being blocked.
CC @zimmerle","Hi @nicjansma, you're welcome :)
Well, the thing is, as you may have heard development is focused on the v3 branch. And we are planning to do releases for this branch on a shorter period of time. Ideally every 3 months or so.
For 2.x releases we don't have a fixed release schedule set at the moment. 2.x should be at maintenance level. Meaning that new releases should be based on addressing either security issues or critical bugs.
But we also believe that a reasonable amount of changes also warrants for a release. For instance, we have >20 fixes between 2.9.2 and current master (pre-2.9.3). Hence why we are working on releasing 2.9.3 as soon as possible :)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1545,2017-08-23T23:35:46Z,2017-10-05T16:12:52Z,2018-12-08T02:45:56Z,CLOSED,False,1,1,1,https://github.com/nicjansma,Fixes SecConnWriteStateLimit,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1545,https://github.com/nicjansma,14,https://github.com/SpiderLabs/ModSecurity/pull/1545#issuecomment-440253877,"Since a15f881, I don't believe SecConnWriteStateLimit has been working properly, which means that ""slow read"" attacks are not protected against.
With ModSecurity 2.9.2 on Apache 2.4.27, I was seeing ModSecurity properly blocking a Slowloris attack (slow writing headers) via slowhttptest -H:
slowhttptest -u http://127.0.0.1/a -H -c 1000

Apache error_log with SecConnReadStateLimit 50:
[Wed Aug 23 19:20:38.902507 2017] [:warn] [pid 2712] [client 127.0.0.1:21192] ModSecurity:
Access denied with code 400. Too many threads [51] of 50 allowed in READ state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

We see above that the 51st and all subsequent connections are properly dropped.
However, ""slow read"" attacks (slowhttptest with -X or -B) aren't currently protected.  With SecConnWriteStateLimit 50, ModSecurity currently logs warnings but doesn't drop connections.
slowhttptest -u http://127.0.0.1/a -X -c 1000

[Wed Aug 23 17:09:50.294791 2017] [:warn] [pid 11072] [client 127.0.0.1:44254] ModSecurity:
Access denied with code 400. Too many threads [226] of 50 allowed in WRITE state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

(note 226 out of 50 allowed)
It looks like the line I've changed in this PR had inversed logic (should have been the same as the SecConnReadStateLimit logic), but a15f881 swapped it on accident.
With this one-character fix, I now see slow read attacks being blocked.
CC @zimmerle",Glad to see 3.0.3 has been released!  Are you planning a 2.9.3 release soon?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1545,2017-08-23T23:35:46Z,2017-10-05T16:12:52Z,2018-12-08T02:45:56Z,CLOSED,False,1,1,1,https://github.com/nicjansma,Fixes SecConnWriteStateLimit,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1545,https://github.com/victorhora,15,https://github.com/SpiderLabs/ModSecurity/pull/1545#issuecomment-441869773,"Since a15f881, I don't believe SecConnWriteStateLimit has been working properly, which means that ""slow read"" attacks are not protected against.
With ModSecurity 2.9.2 on Apache 2.4.27, I was seeing ModSecurity properly blocking a Slowloris attack (slow writing headers) via slowhttptest -H:
slowhttptest -u http://127.0.0.1/a -H -c 1000

Apache error_log with SecConnReadStateLimit 50:
[Wed Aug 23 19:20:38.902507 2017] [:warn] [pid 2712] [client 127.0.0.1:21192] ModSecurity:
Access denied with code 400. Too many threads [51] of 50 allowed in READ state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

We see above that the 51st and all subsequent connections are properly dropped.
However, ""slow read"" attacks (slowhttptest with -X or -B) aren't currently protected.  With SecConnWriteStateLimit 50, ModSecurity currently logs warnings but doesn't drop connections.
slowhttptest -u http://127.0.0.1/a -X -c 1000

[Wed Aug 23 17:09:50.294791 2017] [:warn] [pid 11072] [client 127.0.0.1:44254] ModSecurity:
Access denied with code 400. Too many threads [226] of 50 allowed in WRITE state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

(note 226 out of 50 allowed)
It looks like the line I've changed in this PR had inversed logic (should have been the same as the SecConnReadStateLimit logic), but a15f881 swapped it on accident.
With this one-character fix, I now see slow read attacks being blocked.
CC @zimmerle","Hi @nicjansma
Yes, we want to release 2.9.3 as soon as possible. You can track the progress of the milestone for 2.9.3 here: https://github.com/SpiderLabs/ModSecurity/milestone/10
As soon as that last issue is solved we will start cooking the 2.x release. Thanks.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1545,2017-08-23T23:35:46Z,2017-10-05T16:12:52Z,2018-12-08T02:45:56Z,CLOSED,False,1,1,1,https://github.com/nicjansma,Fixes SecConnWriteStateLimit,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1545,https://github.com/victorhora,16,https://github.com/SpiderLabs/ModSecurity/pull/1545#issuecomment-445393333,"Since a15f881, I don't believe SecConnWriteStateLimit has been working properly, which means that ""slow read"" attacks are not protected against.
With ModSecurity 2.9.2 on Apache 2.4.27, I was seeing ModSecurity properly blocking a Slowloris attack (slow writing headers) via slowhttptest -H:
slowhttptest -u http://127.0.0.1/a -H -c 1000

Apache error_log with SecConnReadStateLimit 50:
[Wed Aug 23 19:20:38.902507 2017] [:warn] [pid 2712] [client 127.0.0.1:21192] ModSecurity:
Access denied with code 400. Too many threads [51] of 50 allowed in READ state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

We see above that the 51st and all subsequent connections are properly dropped.
However, ""slow read"" attacks (slowhttptest with -X or -B) aren't currently protected.  With SecConnWriteStateLimit 50, ModSecurity currently logs warnings but doesn't drop connections.
slowhttptest -u http://127.0.0.1/a -X -c 1000

[Wed Aug 23 17:09:50.294791 2017] [:warn] [pid 11072] [client 127.0.0.1:44254] ModSecurity:
Access denied with code 400. Too many threads [226] of 50 allowed in WRITE state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

(note 226 out of 50 allowed)
It looks like the line I've changed in this PR had inversed logic (should have been the same as the SecConnReadStateLimit logic), but a15f881 swapped it on accident.
With this one-character fix, I now see slow read attacks being blocked.
CC @zimmerle","@nicjansma
I believe that by now you probably notice that 2.9.3 is out? :)
https://github.com/SpiderLabs/ModSecurity/releases/tag/v2.9.3
Thanks for your contribution on this one! :)
Cheers",True,{'THUMBS_UP': ['https://github.com/nicjansma']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1545,2017-08-23T23:35:46Z,2017-10-05T16:12:52Z,2018-12-08T02:45:56Z,CLOSED,False,1,1,1,https://github.com/nicjansma,Fixes SecConnWriteStateLimit,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1545,https://github.com/nicjansma,17,https://github.com/SpiderLabs/ModSecurity/pull/1545#issuecomment-445423961,"Since a15f881, I don't believe SecConnWriteStateLimit has been working properly, which means that ""slow read"" attacks are not protected against.
With ModSecurity 2.9.2 on Apache 2.4.27, I was seeing ModSecurity properly blocking a Slowloris attack (slow writing headers) via slowhttptest -H:
slowhttptest -u http://127.0.0.1/a -H -c 1000

Apache error_log with SecConnReadStateLimit 50:
[Wed Aug 23 19:20:38.902507 2017] [:warn] [pid 2712] [client 127.0.0.1:21192] ModSecurity:
Access denied with code 400. Too many threads [51] of 50 allowed in READ state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

We see above that the 51st and all subsequent connections are properly dropped.
However, ""slow read"" attacks (slowhttptest with -X or -B) aren't currently protected.  With SecConnWriteStateLimit 50, ModSecurity currently logs warnings but doesn't drop connections.
slowhttptest -u http://127.0.0.1/a -X -c 1000

[Wed Aug 23 17:09:50.294791 2017] [:warn] [pid 11072] [client 127.0.0.1:44254] ModSecurity:
Access denied with code 400. Too many threads [226] of 50 allowed in WRITE state from
127.0.0.1 - Possible DoS Consumption Attack [Rejected]

(note 226 out of 50 allowed)
It looks like the line I've changed in this PR had inversed logic (should have been the same as the SecConnReadStateLimit logic), but a15f881 swapped it on accident.
With this one-character fix, I now see slow read attacks being blocked.
CC @zimmerle",Much obliged!,True,"{'THUMBS_UP': ['https://github.com/victorhora', 'https://github.com/zimmerle']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1571,2017-09-21T16:08:20Z,2017-09-29T16:31:25Z,2021-03-14T18:22:23Z,CLOSED,False,15,19,2,https://github.com/majordaw,Store the connection and url parameters in std::string,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1571,https://github.com/majordaw,1,https://github.com/SpiderLabs/ModSecurity/pull/1571,"Passing stack allocated strings to the Transaction object could lead to memory corruption when the Transaction object outlive the stack. In this case the m_clientIpAddress, m_serverIpAddress, m_httpVersion and the m_uri pointers will point to invalid addresses.
I bumped into this when I made a transaction cache and one of my thread initialized the transactions (did the request phases) and a other finalized them (response phases, logging, free).","Passing stack allocated strings to the Transaction object could lead to memory corruption when the Transaction object outlive the stack. In this case the m_clientIpAddress, m_serverIpAddress, m_httpVersion and the m_uri pointers will point to invalid addresses.
I bumped into this when I made a transaction cache and one of my thread initialized the transactions (did the request phases) and a other finalized them (response phases, logging, free).",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1571,2017-09-21T16:08:20Z,2017-09-29T16:31:25Z,2021-03-14T18:22:23Z,CLOSED,False,15,19,2,https://github.com/majordaw,Store the connection and url parameters in std::string,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1571,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1571#issuecomment-333174558,"Passing stack allocated strings to the Transaction object could lead to memory corruption when the Transaction object outlive the stack. In this case the m_clientIpAddress, m_serverIpAddress, m_httpVersion and the m_uri pointers will point to invalid addresses.
I bumped into this when I made a transaction cache and one of my thread initialized the transactions (did the request phases) and a other finalized them (response phases, logging, free).",Merged! thanks ;),True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1572,2017-09-21T16:14:42Z,2017-09-29T16:28:27Z,2017-09-29T16:29:02Z,CLOSED,False,29,29,4,https://github.com/majordaw,Eliminate some reorder and sign warnings,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1572,https://github.com/majordaw,1,https://github.com/SpiderLabs/ModSecurity/pull/1572,During linking with libmodsecurity there are many -Wreorder warnings. This patch try to fix them.,During linking with libmodsecurity there are many -Wreorder warnings. This patch try to fix them.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1572,2017-09-21T16:14:42Z,2017-09-29T16:28:27Z,2017-09-29T16:29:02Z,CLOSED,False,29,29,4,https://github.com/majordaw,Eliminate some reorder and sign warnings,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1572,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1572#issuecomment-333173825,During linking with libmodsecurity there are many -Wreorder warnings. This patch try to fix them.,Merged. thanks ;),True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1577,2017-09-28T06:31:42Z,2018-11-26T13:52:52Z,2019-01-25T08:45:57Z,CLOSED,False,3,2,2,https://github.com/marcstern,Include unanmed JSON values in unnamed ARGS,1,"['2.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1577,https://github.com/marcstern,1,https://github.com/SpiderLabs/ModSecurity/pull/1577,"Issue #1576: unanmed JSON values are not parsed because not included in ARGS.
Include these JSON values in unnamed ARGS to include in parsing","Issue #1576: unanmed JSON values are not parsed because not included in ARGS.
Include these JSON values in unnamed ARGS to include in parsing",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1577,2017-09-28T06:31:42Z,2018-11-26T13:52:52Z,2019-01-25T08:45:57Z,CLOSED,False,3,2,2,https://github.com/marcstern,Include unanmed JSON values in unnamed ARGS,1,"['2.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1577,https://github.com/marcstern,2,https://github.com/SpiderLabs/ModSecurity/pull/1577#issuecomment-343906190,"Issue #1576: unanmed JSON values are not parsed because not included in ARGS.
Include these JSON values in unnamed ARGS to include in parsing",Remark: running in prod for more than a month on several (big) servers,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1577,2017-09-28T06:31:42Z,2018-11-26T13:52:52Z,2019-01-25T08:45:57Z,CLOSED,False,3,2,2,https://github.com/marcstern,Include unanmed JSON values in unnamed ARGS,1,"['2.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1577,https://github.com/marcstern,3,https://github.com/SpiderLabs/ModSecurity/pull/1577#issuecomment-364446364,"Issue #1576: unanmed JSON values are not parsed because not included in ARGS.
Include these JSON values in unnamed ARGS to include in parsing",Any chance to accept this PR?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1577,2017-09-28T06:31:42Z,2018-11-26T13:52:52Z,2019-01-25T08:45:57Z,CLOSED,False,3,2,2,https://github.com/marcstern,Include unanmed JSON values in unnamed ARGS,1,"['2.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1577,https://github.com/marcstern,4,https://github.com/SpiderLabs/ModSecurity/pull/1577#issuecomment-408010623,"Issue #1576: unanmed JSON values are not parsed because not included in ARGS.
Include these JSON values in unnamed ARGS to include in parsing","JSON standrd (rfc8259) explicitely states that a JSON body can contain a stand-alone value.
Actually, a lot of libraries and widely used applications are using that on some places.
It's a major issue to not support this.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1577,2017-09-28T06:31:42Z,2018-11-26T13:52:52Z,2019-01-25T08:45:57Z,CLOSED,False,3,2,2,https://github.com/marcstern,Include unanmed JSON values in unnamed ARGS,1,"['2.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1577,https://github.com/zimmerle,5,https://github.com/SpiderLabs/ModSecurity/pull/1577#issuecomment-419078387,"Issue #1576: unanmed JSON values are not parsed because not included in ARGS.
Include these JSON values in unnamed ARGS to include in parsing","This issue was already addressed in v3. To avoid different behaviors in between the version 2 and 3, we need the version 2 to work in the exactly same fashion as v3. There was a comment explain how it works on v3: #1576 (comment)
It important to keep v2 and v3 to working in the same fashion. Let me know your considerations on how it was implemented on v3.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1577,2017-09-28T06:31:42Z,2018-11-26T13:52:52Z,2019-01-25T08:45:57Z,CLOSED,False,3,2,2,https://github.com/marcstern,Include unanmed JSON values in unnamed ARGS,1,"['2.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1577,https://github.com/marcstern,6,https://github.com/SpiderLabs/ModSecurity/pull/1577#issuecomment-419341177,"Issue #1576: unanmed JSON values are not parsed because not included in ARGS.
Include these JSON values in unnamed ARGS to include in parsing","From a functional point of view, it should be closer than the actual situation, no?
Why not implementing it until a complete rewrite is peformed?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1577,2017-09-28T06:31:42Z,2018-11-26T13:52:52Z,2019-01-25T08:45:57Z,CLOSED,False,3,2,2,https://github.com/marcstern,Include unanmed JSON values in unnamed ARGS,1,"['2.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1577,https://github.com/zimmerle,7,https://github.com/SpiderLabs/ModSecurity/pull/1577#issuecomment-441338867,"Issue #1576: unanmed JSON values are not parsed because not included in ARGS.
Include these JSON values in unnamed ARGS to include in parsing","In branch the v2/dev/issue_1576 there is an alternative where the data structure is somewhat navigable, for instance, the JSON:
{  
   ""foo"":""bar"",
   ""mod"":""sec"",
   ""ops"":[  
      [  
         ""um"",
         ""um e meio""
      ],
      ""dois"",
      ""tres"",
      {  
         ""eins"":[  
            ""zwei"",
            ""drei""
         ]
      }
   ],
   ""whee"":""lhebs""
}
Will be mapped to:
ARGS:foo -> bar
ARGS:mod -> sec
ARGS:ops.ops.ops -> um
ARGS:ops.ops.ops -> um e meio
ARGS:ops.ops -> dois
ARGS:ops.ops -> tres
ARGS:ops.ops.eins.eins -> zwei
ARGS:ops.ops.eins.eins -> drei
ARGS:whee -> lhebs

This is not comprehensive as the v3 solution, but gives the user an opportunity to navigate in the JSON structure.
Just for the reference, that would be the mapping with the patch suggested here.
ARGS:foo -> bar
ARGS:mod -> sec
ARGS:ops -> um
ARGS:ops -> um e meio
ARGS:ops -> dois
ARGS:ops -> tres
ARGS:ops.eins -> zwei
ARGS:ops.eins -> drei
ARGS:whee -> lhebs",True,"{'THUMBS_UP': ['https://github.com/marcstern'], 'HEART': ['https://github.com/victorhora']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1577,2017-09-28T06:31:42Z,2018-11-26T13:52:52Z,2019-01-25T08:45:57Z,CLOSED,False,3,2,2,https://github.com/marcstern,Include unanmed JSON values in unnamed ARGS,1,"['2.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1577,https://github.com/zimmerle,8,https://github.com/SpiderLabs/ModSecurity/pull/1577#issuecomment-441645931,"Issue #1576: unanmed JSON values are not parsed because not included in ARGS.
Include these JSON values in unnamed ARGS to include in parsing","Thanks @marcstern.
Merged as part of: 9b6d4b2 and 25e5543.",True,{'THUMBS_UP': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1577,2017-09-28T06:31:42Z,2018-11-26T13:52:52Z,2019-01-25T08:45:57Z,CLOSED,False,3,2,2,https://github.com/marcstern,Include unanmed JSON values in unnamed ARGS,1,"['2.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1577,https://github.com/marcstern,9,https://github.com/SpiderLabs/ModSecurity/pull/1577#issuecomment-447292036,"Issue #1576: unanmed JSON values are not parsed because not included in ARGS.
Include these JSON values in unnamed ARGS to include in parsing","The implemented solution fixes most cases but not all.
Still missed, JSON body with only an int (e.g. 25) or only a string (e.g. ""abc"").
My pull request solves this.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1577,2017-09-28T06:31:42Z,2018-11-26T13:52:52Z,2019-01-25T08:45:57Z,CLOSED,False,3,2,2,https://github.com/marcstern,Include unanmed JSON values in unnamed ARGS,1,"['2.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1577,https://github.com/zimmerle,10,https://github.com/SpiderLabs/ModSecurity/pull/1577#issuecomment-448577390,"Issue #1576: unanmed JSON values are not parsed because not included in ARGS.
Include these JSON values in unnamed ARGS to include in parsing","Hi @marcstern,
Do you mind to create a new issue with an example to illustrate the scenario?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1577,2017-09-28T06:31:42Z,2018-11-26T13:52:52Z,2019-01-25T08:45:57Z,CLOSED,False,3,2,2,https://github.com/marcstern,Include unanmed JSON values in unnamed ARGS,1,"['2.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1577,https://github.com/marcstern,11,https://github.com/SpiderLabs/ModSecurity/pull/1577#issuecomment-448594740,"Issue #1576: unanmed JSON values are not parsed because not included in ARGS.
Include these JSON values in unnamed ARGS to include in parsing","A JSON request with only a number or a string, nothing else.
Example:
--29000000-B--
POST /test/json/test.html HTTP/1.1
content-type: application/json
Host: test
Content-Length: 2
User-Agent: Mozilla 4.0
Accept: text/html, image/gif, image/jpeg, *; q=.2, /; q=.2
--29000000-C--
25
--29000000-F--",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1577,2017-09-28T06:31:42Z,2018-11-26T13:52:52Z,2019-01-25T08:45:57Z,CLOSED,False,3,2,2,https://github.com/marcstern,Include unanmed JSON values in unnamed ARGS,1,"['2.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1577,https://github.com/marcstern,12,https://github.com/SpiderLabs/ModSecurity/pull/1577#issuecomment-457102532,"Issue #1576: unanmed JSON values are not parsed because not included in ARGS.
Include these JSON values in unnamed ARGS to include in parsing",Any feedback?,True,{'CONFUSED': ['https://github.com/marcstern']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1577,2017-09-28T06:31:42Z,2018-11-26T13:52:52Z,2019-01-25T08:45:57Z,CLOSED,False,3,2,2,https://github.com/marcstern,Include unanmed JSON values in unnamed ARGS,1,"['2.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1577,https://github.com/marcstern,13,https://github.com/SpiderLabs/ModSecurity/pull/1577#issuecomment-457498867,"Issue #1576: unanmed JSON values are not parsed because not included in ARGS.
Include these JSON values in unnamed ARGS to include in parsing",Any feedback?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1583,2017-10-06T21:59:36Z,2017-10-10T12:33:11Z,2018-04-02T13:21:29Z,CLOSED,False,7444,7274,16,https://github.com/victorhora,Enable support for AuditLogFormat (JSON/Native),2,"['RIP - libmodsecurity', 'libmodsec - missing features']",https://github.com/SpiderLabs/ModSecurity/pull/1583,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1583,"Should solve issues: #1493 and #1453.
Also should help at #1559, #1551, #1547, #1484, #1483 and #1395.","Should solve issues: #1493 and #1453.
Also should help at #1559, #1551, #1547, #1484, #1483 and #1395.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1583,2017-10-06T21:59:36Z,2017-10-10T12:33:11Z,2018-04-02T13:21:29Z,CLOSED,False,7444,7274,16,https://github.com/victorhora,Enable support for AuditLogFormat (JSON/Native),2,"['RIP - libmodsecurity', 'libmodsec - missing features']",https://github.com/SpiderLabs/ModSecurity/pull/1583,https://github.com/intelbg,2,https://github.com/SpiderLabs/ModSecurity/pull/1583#issuecomment-335011983,"Should solve issues: #1493 and #1453.
Also should help at #1559, #1551, #1547, #1484, #1483 and #1395.","With this branch audit logging doesn't work to me too, neither with serial logging type, neither with concurrent/parallel.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1583,2017-10-06T21:59:36Z,2017-10-10T12:33:11Z,2018-04-02T13:21:29Z,CLOSED,False,7444,7274,16,https://github.com/victorhora,Enable support for AuditLogFormat (JSON/Native),2,"['RIP - libmodsecurity', 'libmodsec - missing features']",https://github.com/SpiderLabs/ModSecurity/pull/1583,https://github.com/intelbg,3,https://github.com/SpiderLabs/ModSecurity/pull/1583#issuecomment-335434594,"Should solve issues: #1493 and #1453.
Also should help at #1559, #1551, #1547, #1484, #1483 and #1395.","I also added SecAuditLogFormat JSON and logging doesn't work too. I used branch v3/dev/json_auditlog. Can you please tell me how can I trace the problem? I tried to see something with strace, but found nothing.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1583,2017-10-06T21:59:36Z,2017-10-10T12:33:11Z,2018-04-02T13:21:29Z,CLOSED,False,7444,7274,16,https://github.com/victorhora,Enable support for AuditLogFormat (JSON/Native),2,"['RIP - libmodsecurity', 'libmodsec - missing features']",https://github.com/SpiderLabs/ModSecurity/pull/1583,https://github.com/intelbg,4,https://github.com/SpiderLabs/ModSecurity/pull/1583#issuecomment-335448838,"Should solve issues: #1493 and #1453.
Also should help at #1559, #1551, #1547, #1484, #1483 and #1395.","Sorry for my 3 post, but I found the reason. It's the bug in nginx connector for custom 403 page. SpiderLabs/ModSecurity-nginx#55. If I comment the custom 403 page block in nginx logging works perfectly, but only in Serial mode, not in concurrent mode. Will it be fixed as I see that there isn't solution.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1583,2017-10-06T21:59:36Z,2017-10-10T12:33:11Z,2018-04-02T13:21:29Z,CLOSED,False,7444,7274,16,https://github.com/victorhora,Enable support for AuditLogFormat (JSON/Native),2,"['RIP - libmodsecurity', 'libmodsec - missing features']",https://github.com/SpiderLabs/ModSecurity/pull/1583,https://github.com/zimmerle,5,https://github.com/SpiderLabs/ModSecurity/pull/1583#issuecomment-335457296,"Should solve issues: #1493 and #1453.
Also should help at #1559, #1551, #1547, #1484, #1483 and #1395.",Merged! Thanks ;),True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1583,2017-10-06T21:59:36Z,2017-10-10T12:33:11Z,2018-04-02T13:21:29Z,CLOSED,False,7444,7274,16,https://github.com/victorhora,Enable support for AuditLogFormat (JSON/Native),2,"['RIP - libmodsecurity', 'libmodsec - missing features']",https://github.com/SpiderLabs/ModSecurity/pull/1583,https://github.com/intelbg,6,https://github.com/SpiderLabs/ModSecurity/pull/1583#issuecomment-335460723,"Should solve issues: #1493 and #1453.
Also should help at #1559, #1551, #1547, #1484, #1483 and #1395.",@zimmerle so should I recompile now again with the master branch to solve the issue or I didn't understand you?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1583,2017-10-06T21:59:36Z,2017-10-10T12:33:11Z,2018-04-02T13:21:29Z,CLOSED,False,7444,7274,16,https://github.com/victorhora,Enable support for AuditLogFormat (JSON/Native),2,"['RIP - libmodsecurity', 'libmodsec - missing features']",https://github.com/SpiderLabs/ModSecurity/pull/1583,https://github.com/zimmerle,7,https://github.com/SpiderLabs/ModSecurity/pull/1583#issuecomment-335466099,"Should solve issues: #1493 and #1453.
Also should help at #1559, #1551, #1547, #1484, #1483 and #1395.","Hi @intelbg,
@victorhora's pull request was about adding the support for SecAuditLogFormat. With this patch it is possible for the user to choose between JSON and Regular/Old format.  Independent of SecAuditLogType.
Before @victorhora's patch, the format was set according to the type.
Notice that this patch may not be related to the issue that you are facing, therefore I am merging this as it adds a new functionality on top of ModSecurity v3. I've tested the patch and it seems to be working as expected.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1583,2017-10-06T21:59:36Z,2017-10-10T12:33:11Z,2018-04-02T13:21:29Z,CLOSED,False,7444,7274,16,https://github.com/victorhora,Enable support for AuditLogFormat (JSON/Native),2,"['RIP - libmodsecurity', 'libmodsec - missing features']",https://github.com/SpiderLabs/ModSecurity/pull/1583,https://github.com/intelbg,8,https://github.com/SpiderLabs/ModSecurity/pull/1583#issuecomment-335466758,"Should solve issues: #1493 and #1453.
Also should help at #1559, #1551, #1547, #1484, #1483 and #1395.","@zimmerle thank you about your reply! I understand. Did you tested it with concurrent type of logging because with it didn't work for me. I hope that the other problem I reported will be solved too, because they are dependent.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1583,2017-10-06T21:59:36Z,2017-10-10T12:33:11Z,2018-04-02T13:21:29Z,CLOSED,False,7444,7274,16,https://github.com/victorhora,Enable support for AuditLogFormat (JSON/Native),2,"['RIP - libmodsecurity', 'libmodsec - missing features']",https://github.com/SpiderLabs/ModSecurity/pull/1583,https://github.com/intelbg,9,https://github.com/SpiderLabs/ModSecurity/pull/1583#issuecomment-335502010,"Should solve issues: #1493 and #1453.
Also should help at #1559, #1551, #1547, #1484, #1483 and #1395.","In addition, the problem with concurrent logging was my mistake. It works. Remains the problem with custom 403 page only.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1598,2017-10-22T14:05:26Z,2017-10-25T19:52:45Z,2017-10-25T19:52:46Z,CLOSED,False,16,16,1,https://github.com/omadjoudj,Fix build on non x86 arch,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1598,https://github.com/omadjoudj,1,https://github.com/SpiderLabs/ModSecurity/pull/1598,"Hi,
Build failed on ppc64/ppc64le/arch64/armv7hl/s390x [1] due to how chars are represented there.
This PR cast int to char to avoid such issue, test in link [2]
[1] https://koji.fedoraproject.org/koji/taskinfo?taskID=22616331
[2] https://koji.fedoraproject.org/koji/taskinfo?taskID=22616953","Hi,
Build failed on ppc64/ppc64le/arch64/armv7hl/s390x [1] due to how chars are represented there.
This PR cast int to char to avoid such issue, test in link [2]
[1] https://koji.fedoraproject.org/koji/taskinfo?taskID=22616331
[2] https://koji.fedoraproject.org/koji/taskinfo?taskID=22616953",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1609,2017-11-03T08:52:35Z,2018-11-26T19:35:37Z,2018-11-27T21:21:38Z,CLOSED,False,29,19,2,https://github.com/allanbomsft,Fix fallback for non-mapped Unicode char,2,"['enhancement', 'RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1609,https://github.com/allanbomsft,1,https://github.com/SpiderLabs/ModSecurity/pull/1609,"For example see this request:
POST / HTTP/1.1
Host: somehost:8080
Accept: */*
User-Agent: someagent
Content-Length: 30
Content-Type: application/json;charset=utf-8

{
    ""a"": ""娧    ""
}

t:utf8toUnicode turns this Unicode char into %u5a27 , and so the lowest byte is 0x27, which is a single quote in ASCII. This triggers false positives.
This happens with any unicode character that doesn't have a mapping in the SecUnicodeMapFile, and whose last byte in its code point happens to be 0x27. Likewise for characters that end in 0x22 would be treated as a double quote, etc.

The same problem exists with t:jsDecode given a request with the unicode character full width G (code point FF27).
Said differently: the last byte in the Unicode code point does not have any meaningful relation to whatever ASCII char happens to be represented by the same byte, and so we shouldn't treat it so.
I suggest replacing with an x. I also considered question marks or space, but that could also trigger false positives (too many non-alphanum in a row). Also considered just omitting the char, but that could also trigger a false positive where for example ""-娧-"" would have been OK but ""--"" is not.","For example see this request:
POST / HTTP/1.1
Host: somehost:8080
Accept: */*
User-Agent: someagent
Content-Length: 30
Content-Type: application/json;charset=utf-8

{
    ""a"": ""娧    ""
}

t:utf8toUnicode turns this Unicode char into %u5a27 , and so the lowest byte is 0x27, which is a single quote in ASCII. This triggers false positives.
This happens with any unicode character that doesn't have a mapping in the SecUnicodeMapFile, and whose last byte in its code point happens to be 0x27. Likewise for characters that end in 0x22 would be treated as a double quote, etc.

The same problem exists with t:jsDecode given a request with the unicode character full width G (code point FF27).
Said differently: the last byte in the Unicode code point does not have any meaningful relation to whatever ASCII char happens to be represented by the same byte, and so we shouldn't treat it so.
I suggest replacing with an x. I also considered question marks or space, but that could also trigger false positives (too many non-alphanum in a row). Also considered just omitting the char, but that could also trigger a false positive where for example ""-娧-"" would have been OK but ""--"" is not.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1609,2017-11-03T08:52:35Z,2018-11-26T19:35:37Z,2018-11-27T21:21:38Z,CLOSED,False,29,19,2,https://github.com/allanbomsft,Fix fallback for non-mapped Unicode char,2,"['enhancement', 'RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1609,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1609#issuecomment-441768780,"For example see this request:
POST / HTTP/1.1
Host: somehost:8080
Accept: */*
User-Agent: someagent
Content-Length: 30
Content-Type: application/json;charset=utf-8

{
    ""a"": ""娧    ""
}

t:utf8toUnicode turns this Unicode char into %u5a27 , and so the lowest byte is 0x27, which is a single quote in ASCII. This triggers false positives.
This happens with any unicode character that doesn't have a mapping in the SecUnicodeMapFile, and whose last byte in its code point happens to be 0x27. Likewise for characters that end in 0x22 would be treated as a double quote, etc.

The same problem exists with t:jsDecode given a request with the unicode character full width G (code point FF27).
Said differently: the last byte in the Unicode code point does not have any meaningful relation to whatever ASCII char happens to be represented by the same byte, and so we shouldn't treat it so.
I suggest replacing with an x. I also considered question marks or space, but that could also trigger false positives (too many non-alphanum in a row). Also considered just omitting the char, but that could also trigger a false positive where for example ""-娧-"" would have been OK but ""--"" is not.","Hi @allanbomsft,
Thank you for the patch. The transformation in ModSecurity are basically used as a way to prevent evasion. That is the case of t:utf8toUnicode. The convertion takes into consideration SecUnicodeMapFile. The convertion here may not need a fallback, as it is working in the exactly manner that it was designed to: matching wathever happens on the backend app.
Python
>>> hex(ord(""娧""))
'0x5a27'

php
$ /tmp  cat a.php
<?php
echo json_encode(""娧"");
?>

$ /tmp  php a.php
""\u5a27""


JavaScript
> encodeURIComponent(escape(""娧""))
< ""%25u5A27""

The rule that are making usage of t:utf8toUnicode needs to be ware that the result will be a an unicode, as well as it is high recommended to have the SecUnicodeMapFile configured correctly. Therefore I am closing this without a merge. If you point us to the specific rule that is leading to the false positive, we may be able to assist you better. Thank you.",True,{'THUMBS_UP': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1609,2017-11-03T08:52:35Z,2018-11-26T19:35:37Z,2018-11-27T21:21:38Z,CLOSED,False,29,19,2,https://github.com/allanbomsft,Fix fallback for non-mapped Unicode char,2,"['enhancement', 'RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1609,https://github.com/allanbomsft,3,https://github.com/SpiderLabs/ModSecurity/pull/1609#issuecomment-442220197,"For example see this request:
POST / HTTP/1.1
Host: somehost:8080
Accept: */*
User-Agent: someagent
Content-Length: 30
Content-Type: application/json;charset=utf-8

{
    ""a"": ""娧    ""
}

t:utf8toUnicode turns this Unicode char into %u5a27 , and so the lowest byte is 0x27, which is a single quote in ASCII. This triggers false positives.
This happens with any unicode character that doesn't have a mapping in the SecUnicodeMapFile, and whose last byte in its code point happens to be 0x27. Likewise for characters that end in 0x22 would be treated as a double quote, etc.

The same problem exists with t:jsDecode given a request with the unicode character full width G (code point FF27).
Said differently: the last byte in the Unicode code point does not have any meaningful relation to whatever ASCII char happens to be represented by the same byte, and so we shouldn't treat it so.
I suggest replacing with an x. I also considered question marks or space, but that could also trigger false positives (too many non-alphanum in a row). Also considered just omitting the char, but that could also trigger a false positive where for example ""-娧-"" would have been OK but ""--"" is not.","It's been more than a year since I sent this, so my memory on this issue is a bit hazy :-) I've dug through my notes and reproed the scenario again on the SpiderLabs branch (we are running with my patch in production on the Microsoft branch, so no repro there).
I understand that the conversion takes SecUnicodeMapFile into consideration, but this fix relates only to characters that there exist no mapping for in the SecUnicodeMapFile.
For example if there is no mapping for 娧 in the file, then the following request false positives CRS 942110.
POST / HTTP/1.1
Host: somehost:8080
Accept: */*
User-Agent: someagent
Content-Length: 37
Content-Type: application/json;charset=utf-8

{
    ""a"": ""娧"",
    ""b"": ""娧""
}

This is because ModSecurity misunderstands this request as if it was
{
    ""a"": ""'"",
    ""b"": ""'""
}

because, as mentioned in the original post, the last octet of codepoint 5A27 is 27. It is this fallback mapping from codepoint 5A27 to 27 that is incorrect. It is not what the backend receives. The UTF-8 encoded representation of 娧 is E5A8A7.
This is true for any char whose codepoint ends in 27, such as
5727  圧
5627  唧
5427  吧",True,{'CONFUSED': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1611,2017-11-06T21:39:04Z,2018-11-26T19:36:20Z,2018-11-26T19:36:20Z,CLOSED,False,24,12,1,https://github.com/allanbomsft,Fix fallback for non-mapped Unicode char on v2,1,"['RIP - Type - Feature', 'enhancement', '2.x']",https://github.com/SpiderLabs/ModSecurity/pull/1611,https://github.com/allanbomsft,1,https://github.com/SpiderLabs/ModSecurity/pull/1611,Same as #1609 but for ModSec version 2.,Same as #1609 but for ModSec version 2.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1611,2017-11-06T21:39:04Z,2018-11-26T19:36:20Z,2018-11-26T19:36:20Z,CLOSED,False,24,12,1,https://github.com/allanbomsft,Fix fallback for non-mapped Unicode char on v2,1,"['RIP - Type - Feature', 'enhancement', '2.x']",https://github.com/SpiderLabs/ModSecurity/pull/1611,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1611#issuecomment-441769076,Same as #1609 but for ModSec version 2.,Closing this. Further details at: #1609.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1612,2017-11-06T21:57:48Z,2018-11-04T18:08:38Z,2018-11-04T18:08:38Z,CLOSED,False,3,3,1,https://github.com/allanbomsft,"Windows build, fixed duplicate YAJL dir in script",1,"['enhancement', 'RIP - Type - Config Improvement', '2.x']",https://github.com/SpiderLabs/ModSecurity/pull/1612,https://github.com/allanbomsft,1,https://github.com/SpiderLabs/ModSecurity/pull/1612,"Hi Felipe. I see you recently did this change c917df0 , but I think there might be a problem with the YAJL path. When building via build_modsecurity.bat directly, all is fine, because the path becomes ....\yajl\build\yajl-2.1.0 . But when building via build_release.bat , build_yajl.bat gets invoked, which sets the YAJL_DIR env variable, and so the path becomes ....\yajl\build\yajl-2.1.0\yajl-2.1.0 and the build fails.
Changing build_modsecurity.bat to let YAJL align with the other dependencies, where only the %DEPENDENCIES_DIR% env variable is used, and the rest is hardcoded.","Hi Felipe. I see you recently did this change c917df0 , but I think there might be a problem with the YAJL path. When building via build_modsecurity.bat directly, all is fine, because the path becomes ....\yajl\build\yajl-2.1.0 . But when building via build_release.bat , build_yajl.bat gets invoked, which sets the YAJL_DIR env variable, and so the path becomes ....\yajl\build\yajl-2.1.0\yajl-2.1.0 and the build fails.
Changing build_modsecurity.bat to let YAJL align with the other dependencies, where only the %DEPENDENCIES_DIR% env variable is used, and the rest is hardcoded.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1612,2017-11-06T21:57:48Z,2018-11-04T18:08:38Z,2018-11-04T18:08:38Z,CLOSED,False,3,3,1,https://github.com/allanbomsft,"Windows build, fixed duplicate YAJL dir in script",1,"['enhancement', 'RIP - Type - Config Improvement', '2.x']",https://github.com/SpiderLabs/ModSecurity/pull/1612,https://github.com/victorhora,2,https://github.com/SpiderLabs/ModSecurity/pull/1612#issuecomment-435692115,"Hi Felipe. I see you recently did this change c917df0 , but I think there might be a problem with the YAJL path. When building via build_modsecurity.bat directly, all is fine, because the path becomes ....\yajl\build\yajl-2.1.0 . But when building via build_release.bat , build_yajl.bat gets invoked, which sets the YAJL_DIR env variable, and so the path becomes ....\yajl\build\yajl-2.1.0\yajl-2.1.0 and the build fails.
Changing build_modsecurity.bat to let YAJL align with the other dependencies, where only the %DEPENDENCIES_DIR% env variable is used, and the rest is hardcoded.","Confirm it fixes the issue with the automated build script.
We might need to adjust the Windows buildbot builds scripts to take this into consideration.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1612,2017-11-06T21:57:48Z,2018-11-04T18:08:38Z,2018-11-04T18:08:38Z,CLOSED,False,3,3,1,https://github.com/allanbomsft,"Windows build, fixed duplicate YAJL dir in script",1,"['enhancement', 'RIP - Type - Config Improvement', '2.x']",https://github.com/SpiderLabs/ModSecurity/pull/1612,https://github.com/victorhora,3,https://github.com/SpiderLabs/ModSecurity/pull/1612#issuecomment-435692139,"Hi Felipe. I see you recently did this change c917df0 , but I think there might be a problem with the YAJL path. When building via build_modsecurity.bat directly, all is fine, because the path becomes ....\yajl\build\yajl-2.1.0 . But when building via build_release.bat , build_yajl.bat gets invoked, which sets the YAJL_DIR env variable, and so the path becomes ....\yajl\build\yajl-2.1.0\yajl-2.1.0 and the build fails.
Changing build_modsecurity.bat to let YAJL align with the other dependencies, where only the %DEPENDENCIES_DIR% env variable is used, and the rest is hardcoded.","Merged at e97799c
Thanks! :)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1613,2017-11-06T22:06:39Z,2018-09-05T19:30:20Z,2018-09-05T19:30:47Z,CLOSED,False,18,6,3,https://github.com/allanbomsft,Let body parsers observe SecRequestBodyNoFilesLimit,2,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1613,https://github.com/allanbomsft,1,https://github.com/SpiderLabs/ModSecurity/pull/1613,"Previously, modsecurity_request_body_store would keep feeding the body parsers (JSON/XML/Multipart) even after the SecRequestBodyNoFilesLimit limit was met. This change prevents this. Also, modsecurity_request_body_end now returns an error code when the limit is met, so that a message can be logged for this event.","Previously, modsecurity_request_body_store would keep feeding the body parsers (JSON/XML/Multipart) even after the SecRequestBodyNoFilesLimit limit was met. This change prevents this. Also, modsecurity_request_body_end now returns an error code when the limit is met, so that a message can be logged for this event.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1613,2017-11-06T22:06:39Z,2018-09-05T19:30:20Z,2018-09-05T19:30:47Z,CLOSED,False,18,6,3,https://github.com/allanbomsft,Let body parsers observe SecRequestBodyNoFilesLimit,2,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1613,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1613#issuecomment-418853341,"Previously, modsecurity_request_body_store would keep feeding the body parsers (JSON/XML/Multipart) even after the SecRequestBodyNoFilesLimit limit was met. This change prevents this. Also, modsecurity_request_body_end now returns an error code when the limit is met, so that a message can be logged for this event.",Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1614,2017-11-07T15:01:52Z,2018-02-28T15:13:33Z,2018-02-28T15:13:54Z,CLOSED,False,679,635,3,https://github.com/michaelgranzow-avi,Disallow 'block' as a default action,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1614,https://github.com/michaelgranzow-avi,1,https://github.com/SpiderLabs/ModSecurity/pull/1614,"Currently, it is possible to specify 'block' as the default disruptive
action for any phase. If there is a rule for a phase with default
action 'block' which in turn uses 'block' as its disruptive action,
i.e., wants to use the default disruptive action, and the rule gets
triggered, libmodsecurity enters an infinite recursion with subsequent
segmentation violation.
Include a regression test for this scenario.","Currently, it is possible to specify 'block' as the default disruptive
action for any phase. If there is a rule for a phase with default
action 'block' which in turn uses 'block' as its disruptive action,
i.e., wants to use the default disruptive action, and the rule gets
triggered, libmodsecurity enters an infinite recursion with subsequent
segmentation violation.
Include a regression test for this scenario.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1614,2017-11-07T15:01:52Z,2018-02-28T15:13:33Z,2018-02-28T15:13:54Z,CLOSED,False,679,635,3,https://github.com/michaelgranzow-avi,Disallow 'block' as a default action,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1614,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1614#issuecomment-369270330,"Currently, it is possible to specify 'block' as the default disruptive
action for any phase. If there is a rule for a phase with default
action 'block' which in turn uses 'block' as its disruptive action,
i.e., wants to use the default disruptive action, and the rule gets
triggered, libmodsecurity enters an infinite recursion with subsequent
segmentation violation.
Include a regression test for this scenario.","Hi @michaelgranzow-avi,
Thank you for the patch. Indeed the segfault is not welcomed. However, we still need to have the block working in the same fashion that we had on v2. Therefore, I have proposed a different fix. Available here: 6842d4b",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1615,2017-11-07T17:44:15Z,2017-11-17T17:15:33Z,2017-11-17T17:16:25Z,CLOSED,False,31,7,2,https://github.com/michaelgranzow-avi,Improve benchmark tool,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1615,https://github.com/michaelgranzow-avi,1,https://github.com/SpiderLabs/ModSecurity/pull/1615,"Benchmark tool: proper initialization of intervention,
get number of iterations from command-line, add help message.","Benchmark tool: proper initialization of intervention,
get number of iterations from command-line, add help message.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1615,2017-11-07T17:44:15Z,2017-11-17T17:15:33Z,2017-11-17T17:16:25Z,CLOSED,False,31,7,2,https://github.com/michaelgranzow-avi,Improve benchmark tool,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1615,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1615#issuecomment-345305794,"Benchmark tool: proper initialization of intervention,
get number of iterations from command-line, add help message.",Merged ;) thanks ;),True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1619,2017-11-15T06:30:24Z,2018-02-28T14:21:02Z,2018-02-28T14:21:02Z,CLOSED,False,437,145,28,https://github.com/alaa-ahmed-a,editing arabic charset in unicode_mapping file,36,[],https://github.com/SpiderLabs/ModSecurity/pull/1619,https://github.com/alaa-ahmed-a,1,https://github.com/SpiderLabs/ModSecurity/pull/1619,"1256 (ANSI - Arabic)
0620:41 0621:41 0622:43 0623:45 0624:45 0625:45 0626:45 0627:49 0628:49 0629:4f 062a:55 062b:55 062c:55 062d:46 062e:43 062f:44 0630:45 0631:46 0632:47 0633:48 0634:49 0635:4a 0636:4b 0637:4c 0638:4d 0639:4e 063a:4f 0641:41 0642:42 0643:43 0644:44 0645:45 0646:46 0647:47 0648:48 0649:49 064a:4a 064b:4b 064c:4c 064d:4d 064e:4e 064f:4f 0650:50 0651:51 0652:52","1256 (ANSI - Arabic)
0620:41 0621:41 0622:43 0623:45 0624:45 0625:45 0626:45 0627:49 0628:49 0629:4f 062a:55 062b:55 062c:55 062d:46 062e:43 062f:44 0630:45 0631:46 0632:47 0633:48 0634:49 0635:4a 0636:4b 0637:4c 0638:4d 0639:4e 063a:4f 0641:41 0642:42 0643:43 0644:44 0645:45 0646:46 0647:47 0648:48 0649:49 064a:4a 064b:4b 064c:4c 064d:4d 064e:4e 064f:4f 0650:50 0651:51 0652:52",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1619,2017-11-15T06:30:24Z,2018-02-28T14:21:02Z,2018-02-28T14:21:02Z,CLOSED,False,437,145,28,https://github.com/alaa-ahmed-a,editing arabic charset in unicode_mapping file,36,[],https://github.com/SpiderLabs/ModSecurity/pull/1619,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1619#issuecomment-346869428,"1256 (ANSI - Arabic)
0620:41 0621:41 0622:43 0623:45 0624:45 0625:45 0626:45 0627:49 0628:49 0629:4f 062a:55 062b:55 062c:55 062d:46 062e:43 062f:44 0630:45 0631:46 0632:47 0633:48 0634:49 0635:4a 0636:4b 0637:4c 0638:4d 0639:4e 063a:4f 0641:41 0642:42 0643:43 0644:44 0645:45 0646:46 0647:47 0648:48 0649:49 064a:4a 064b:4b 064c:4c 064d:4d 064e:4e 064f:4f 0650:50 0651:51 0652:52","Hi @alaa-ahmed-a,
Can you confirm what exactly commit do you think that is suitable for merge?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1619,2017-11-15T06:30:24Z,2018-02-28T14:21:02Z,2018-02-28T14:21:02Z,CLOSED,False,437,145,28,https://github.com/alaa-ahmed-a,editing arabic charset in unicode_mapping file,36,[],https://github.com/SpiderLabs/ModSecurity/pull/1619,https://github.com/alaa-ahmed-a,3,https://github.com/SpiderLabs/ModSecurity/pull/1619#issuecomment-346991048,"1256 (ANSI - Arabic)
0620:41 0621:41 0622:43 0623:45 0624:45 0625:45 0626:45 0627:49 0628:49 0629:4f 062a:55 062b:55 062c:55 062d:46 062e:43 062f:44 0630:45 0631:46 0632:47 0633:48 0634:49 0635:4a 0636:4b 0637:4c 0638:4d 0639:4e 063a:4f 0641:41 0642:42 0643:43 0644:44 0645:45 0646:46 0647:47 0648:48 0649:49 064a:4a 064b:4b 064c:4c 064d:4d 064e:4e 064f:4f 0650:50 0651:51 0652:52","hi @zimmerle
this pull request is related to issue #1601
but i don't really know how to make a pull request, its seems like my local repository was not in sync with the master in Github( i dont really have one).
what i'm asking to be changed is the lines 24 and 25 in unicode_mapping file (1256 (ANSI - Arabic) part) because the characters in these part isn't Arabic (its Latin).
I did this change in my production servers and the problem solved.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1619,2017-11-15T06:30:24Z,2018-02-28T14:21:02Z,2018-02-28T14:21:02Z,CLOSED,False,437,145,28,https://github.com/alaa-ahmed-a,editing arabic charset in unicode_mapping file,36,[],https://github.com/SpiderLabs/ModSecurity/pull/1619,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1619#issuecomment-369253793,"1256 (ANSI - Arabic)
0620:41 0621:41 0622:43 0623:45 0624:45 0625:45 0626:45 0627:49 0628:49 0629:4f 062a:55 062b:55 062c:55 062d:46 062e:43 062f:44 0630:45 0631:46 0632:47 0633:48 0634:49 0635:4a 0636:4b 0637:4c 0638:4d 0639:4e 063a:4f 0641:41 0642:42 0643:43 0644:44 0645:45 0646:46 0647:47 0648:48 0649:49 064a:4a 064b:4b 064c:4c 064d:4d 064e:4e 064f:4f 0650:50 0651:51 0652:52",Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1621,2017-11-17T08:56:57Z,2017-11-17T12:55:46Z,2017-11-17T12:55:46Z,CLOSED,False,3,3,1,https://github.com/Minasu,Correction lua header,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1621,https://github.com/Minasu,1,https://github.com/SpiderLabs/ModSecurity/pull/1621,"Hello,
build/lua.m4 contains ssdeep information.
Replace fuzzy.h by lua.h
Best regards,
Minasu","Hello,
build/lua.m4 contains ssdeep information.
Replace fuzzy.h by lua.h
Best regards,
Minasu",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1621,2017-11-17T08:56:57Z,2017-11-17T12:55:46Z,2017-11-17T12:55:46Z,CLOSED,False,3,3,1,https://github.com/Minasu,Correction lua header,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1621,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1621#issuecomment-345236733,"Hello,
build/lua.m4 contains ssdeep information.
Replace fuzzy.h by lua.h
Best regards,
Minasu",Merged! thanks ;),True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1623,2017-11-23T17:52:32Z,2018-02-23T21:15:25Z,2018-04-02T13:23:23Z,CLOSED,False,108,15,3,https://github.com/victorhora,Improvements on LUA build scripts and support for LUA 5.2,1,"['enhancement', 'RIP - Type - Config Improvement', 'RIP - libmodsecurity', 'RIP - release-3.0']",https://github.com/SpiderLabs/ModSecurity/pull/1623,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1623,"Improvements on the build scripts to detect the version and warn (or stop) when an unsupported version of LUA (e.g. 5.1.x) is being used. (#1622 #1617)


LUA 5.2 should now be supported with -DWITH_LUA_5.2 flag and changes to lua_dump()","Improvements on the build scripts to detect the version and warn (or stop) when an unsupported version of LUA (e.g. 5.1.x) is being used. (#1622 #1617)


LUA 5.2 should now be supported with -DWITH_LUA_5.2 flag and changes to lua_dump()",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1624,2017-11-28T12:05:40Z,,2018-12-15T02:48:20Z,OPEN,False,241,34,6,None,Few types change can be safely,2,"['RIP - Type - Config Improvement', '2.x', 'pending feedback']",https://github.com/SpiderLabs/ModSecurity/pull/1624,None,1,https://github.com/SpiderLabs/ModSecurity/pull/1624,"used afterwards (for apr_sleep for example it is an uint64_t-ish type as
parameter).","used afterwards (for apr_sleep for example it is an uint64_t-ish type as
parameter).",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1624,2017-11-28T12:05:40Z,,2018-12-15T02:48:20Z,OPEN,False,241,34,6,None,Few types change can be safely,2,"['RIP - Type - Config Improvement', '2.x', 'pending feedback']",https://github.com/SpiderLabs/ModSecurity/pull/1624,https://github.com/victorhora,2,https://github.com/SpiderLabs/ModSecurity/pull/1624#issuecomment-438080380,"used afterwards (for apr_sleep for example it is an uint64_t-ish type as
parameter).","Hi @dcarlier-afilias
Thanks for your contribution!
Did you got compiler warnings about these ones? :)
I'm also thoughtful about changing the type of rule_id. I'm thinking there would be other places in the code where rule_id is used and would also need to change the type from int to long.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1624,2017-11-28T12:05:40Z,,2018-12-15T02:48:20Z,OPEN,False,241,34,6,None,Few types change can be safely,2,"['RIP - Type - Config Improvement', '2.x', 'pending feedback']",https://github.com/SpiderLabs/ModSecurity/pull/1624,None,3,https://github.com/SpiderLabs/ModSecurity/pull/1624#issuecomment-438153037,"used afterwards (for apr_sleep for example it is an uint64_t-ish type as
parameter).",I did get compiler warnings indeed for those lines.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1624,2017-11-28T12:05:40Z,,2018-12-15T02:48:20Z,OPEN,False,241,34,6,None,Few types change can be safely,2,"['RIP - Type - Config Improvement', '2.x', 'pending feedback']",https://github.com/SpiderLabs/ModSecurity/pull/1624,None,4,https://github.com/SpiderLabs/ModSecurity/pull/1624#issuecomment-440669047,"used afterwards (for apr_sleep for example it is an uint64_t-ish type as
parameter).",@victorhora What do you think of these now ?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1636,2017-12-20T14:13:02Z,2018-02-28T14:05:32Z,2018-02-28T14:05:32Z,CLOSED,False,13,2,1,https://github.com/Minasu,Correction remove_by_tag and remove_by_msg,1,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1636,https://github.com/Minasu,1,https://github.com/SpiderLabs/ModSecurity/pull/1636,"Hello,
When I use remove_by_tag, when the condition is true, return 1 causes all other rules to stop processing.
I have a patch that in my case seems to answer my problem.
Hope it can be useful to you too.
Minasu","Hello,
When I use remove_by_tag, when the condition is true, return 1 causes all other rules to stop processing.
I have a patch that in my case seems to answer my problem.
Hope it can be useful to you too.
Minasu",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1636,2017-12-20T14:13:02Z,2018-02-28T14:05:32Z,2018-02-28T14:05:32Z,CLOSED,False,13,2,1,https://github.com/Minasu,Correction remove_by_tag and remove_by_msg,1,['RIP - libmodsecurity'],https://github.com/SpiderLabs/ModSecurity/pull/1636,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1636#issuecomment-369248982,"Hello,
When I use remove_by_tag, when the condition is true, return 1 causes all other rules to stop processing.
I have a patch that in my case seems to answer my problem.
Hope it can be useful to you too.
Minasu",Merged! thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1639,2017-12-26T13:13:52Z,2018-02-14T15:09:20Z,2018-03-21T11:23:28Z,MERGED,True,4,0,1,https://github.com/defanator,Configure: actually disable Lua on systems with liblua5.1,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1639,https://github.com/defanator,1,https://github.com/SpiderLabs/ModSecurity/pull/1639,"In particular, on CentOS 7.3.1611 building libmodsecurity with default configure options ends up with failure while compiling src/engine/lua.cc, while config.log states that Lua was disabled:
$ ./configure
[..]
configure: LUA library found at: /usr/lib64//liblua.so
configure: LUA headers found at: /usr/include
configure: LUA version from includes: 501
configure: using LUA -llua
configure: LUA 5.1 was found and it is not currently supported on libModSecurity. LUA_VERSION: 501. LUA build disabled.
[..]
   + LUA                                           ....disabled
[..]

$ grep ""^LUA_"" Makefile
LUA_CFLAGS = -DWITH_LUA -DWITH_LUA_5_1 -I/usr/include
LUA_DISPLAY = -llua -L/usr/lib64/, -DWITH_LUA -DWITH_LUA_5_1 -I/usr/include
LUA_FOUND = 2
LUA_LDADD = -llua
LUA_LDFLAGS = -L/usr/lib64/","In particular, on CentOS 7.3.1611 building libmodsecurity with default configure options ends up with failure while compiling src/engine/lua.cc, while config.log states that Lua was disabled:
$ ./configure
[..]
configure: LUA library found at: /usr/lib64//liblua.so
configure: LUA headers found at: /usr/include
configure: LUA version from includes: 501
configure: using LUA -llua
configure: LUA 5.1 was found and it is not currently supported on libModSecurity. LUA_VERSION: 501. LUA build disabled.
[..]
   + LUA                                           ....disabled
[..]

$ grep ""^LUA_"" Makefile
LUA_CFLAGS = -DWITH_LUA -DWITH_LUA_5_1 -I/usr/include
LUA_DISPLAY = -llua -L/usr/lib64/, -DWITH_LUA -DWITH_LUA_5_1 -I/usr/include
LUA_FOUND = 2
LUA_LDADD = -llua
LUA_LDFLAGS = -L/usr/lib64/",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1639,2017-12-26T13:13:52Z,2018-02-14T15:09:20Z,2018-03-21T11:23:28Z,MERGED,True,4,0,1,https://github.com/defanator,Configure: actually disable Lua on systems with liblua5.1,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1639,https://github.com/victorhora,2,https://github.com/SpiderLabs/ModSecurity/pull/1639#issuecomment-365636588,"In particular, on CentOS 7.3.1611 building libmodsecurity with default configure options ends up with failure while compiling src/engine/lua.cc, while config.log states that Lua was disabled:
$ ./configure
[..]
configure: LUA library found at: /usr/lib64//liblua.so
configure: LUA headers found at: /usr/include
configure: LUA version from includes: 501
configure: using LUA -llua
configure: LUA 5.1 was found and it is not currently supported on libModSecurity. LUA_VERSION: 501. LUA build disabled.
[..]
   + LUA                                           ....disabled
[..]

$ grep ""^LUA_"" Makefile
LUA_CFLAGS = -DWITH_LUA -DWITH_LUA_5_1 -I/usr/include
LUA_DISPLAY = -llua -L/usr/lib64/, -DWITH_LUA -DWITH_LUA_5_1 -I/usr/include
LUA_FOUND = 2
LUA_LDADD = -llua
LUA_LDFLAGS = -L/usr/lib64/",Merged! Thank you =),True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1640,2017-12-26T19:18:52Z,2018-02-23T21:58:40Z,2018-03-21T11:22:19Z,CLOSED,False,9,4,2,https://github.com/defanator,Fix msc_who_am_i() to return pointer to a valid C string,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1640,https://github.com/defanator,1,https://github.com/SpiderLabs/ModSecurity/pull/1640,Previously this function was unusable as it returned pointer to some garbage data.,Previously this function was unusable as it returned pointer to some garbage data.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1640,2017-12-26T19:18:52Z,2018-02-23T21:58:40Z,2018-03-21T11:22:19Z,CLOSED,False,9,4,2,https://github.com/defanator,Fix msc_who_am_i() to return pointer to a valid C string,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1640,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1640#issuecomment-368150460,Previously this function was unusable as it returned pointer to some garbage data.,Merged! Thanks.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1651,2018-01-11T20:34:29Z,2018-09-06T13:04:39Z,2018-09-06T13:04:39Z,CLOSED,False,94,27,1,https://github.com/allanbomsft,"IIS, buffer request body before taking lock",1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1651,https://github.com/allanbomsft,1,https://github.com/SpiderLabs/ModSecurity/pull/1651,"This is specific to IIS.
Buffer request body before taking lock, in order to prevent slow clients from keeping the lock, preventing all other traffic from flowing.","This is specific to IIS.
Buffer request body before taking lock, in order to prevent slow clients from keeping the lock, preventing all other traffic from flowing.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1651,2018-01-11T20:34:29Z,2018-09-06T13:04:39Z,2018-09-06T13:04:39Z,CLOSED,False,94,27,1,https://github.com/allanbomsft,"IIS, buffer request body before taking lock",1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1651,https://github.com/allanbomsft,2,https://github.com/SpiderLabs/ModSecurity/pull/1651#issuecomment-400851280,"This is specific to IIS.
Buffer request body before taking lock, in order to prevent slow clients from keeping the lock, preventing all other traffic from flowing.",This one is serious. You should consider it.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1651,2018-01-11T20:34:29Z,2018-09-06T13:04:39Z,2018-09-06T13:04:39Z,CLOSED,False,94,27,1,https://github.com/allanbomsft,"IIS, buffer request body before taking lock",1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1651,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1651#issuecomment-419085352,"This is specific to IIS.
Buffer request body before taking lock, in order to prevent slow clients from keeping the lock, preventing all other traffic from flowing.",Thanks! Merged!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1652,2018-01-13T19:18:11Z,2018-02-23T21:39:33Z,2018-04-24T11:43:54Z,CLOSED,False,13,11,4,https://github.com/airween,Added some cosmetics to autoconf related code,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1652,https://github.com/airween,1,https://github.com/SpiderLabs/ModSecurity/pull/1652,"Started to build the v3/master, and found some configure errors - fixed them.","Started to build the v3/master, and found some configure errors - fixed them.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1652,2018-01-13T19:18:11Z,2018-02-23T21:39:33Z,2018-04-24T11:43:54Z,CLOSED,False,13,11,4,https://github.com/airween,Added some cosmetics to autoconf related code,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1652,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1652#issuecomment-368146109,"Started to build the v3/master, and found some configure errors - fixed them.",Merged. Thanks ;),True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1667,2018-01-26T12:42:30Z,2018-02-23T21:35:34Z,2018-04-09T20:43:31Z,CLOSED,False,13,13,1,https://github.com/vaLski,headers/modsecurity/rules_properties.h - temporary prevent (O)n issue…,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1667,https://github.com/vaLski,1,https://github.com/SpiderLabs/ModSecurity/pull/1667,… while parsing modsec rules - this should fix #1663,… while parsing modsec rules - this should fix #1663,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1667,2018-01-26T12:42:30Z,2018-02-23T21:35:34Z,2018-04-09T20:43:31Z,CLOSED,False,13,13,1,https://github.com/vaLski,headers/modsecurity/rules_properties.h - temporary prevent (O)n issue…,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1667,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1667#issuecomment-368145176,… while parsing modsec rules - this should fix #1663,"Hi @vaLski,
Thank you for the patch.
Disable the rule id duplication may not be the right approach here as it is necessary due to other reasons. Also, the integer comparison inside the loop should not be the responsible for the numbers on #1663. It may trigger a problem in a race condition, but the problem is likely to be elsewhere. Therefore, I am closing this issue without merge.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1667,2018-01-26T12:42:30Z,2018-02-23T21:35:34Z,2018-04-09T20:43:31Z,CLOSED,False,13,13,1,https://github.com/vaLski,headers/modsecurity/rules_properties.h - temporary prevent (O)n issue…,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1667,https://github.com/vaLski,3,https://github.com/SpiderLabs/ModSecurity/pull/1667#issuecomment-368417970,… while parsing modsec rules - this should fix #1663,"@zimmerle I totally agree that disabling this code is not the best approach to solve this issue. Hence my C skills are limited this was the easiest approach for me to try.
Despite that fact, I am sure that this is the code that is triggering the issue I described in #1663 and more specifically the problem with the slow syntax check (nginx -t) and slow nginx start/reload.
Since I applied this patch (code comment) I am not experiencing this issue. Try this with 3k mod security rules and 1000+ vhosts and you will see that too. I bet a beer this is the code that is causing the slowdown during start/restart/reload/configtest.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1667,2018-01-26T12:42:30Z,2018-02-23T21:35:34Z,2018-04-09T20:43:31Z,CLOSED,False,13,13,1,https://github.com/vaLski,headers/modsecurity/rules_properties.h - temporary prevent (O)n issue…,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1667,https://github.com/p0pr0ck5,4,https://github.com/SpiderLabs/ModSecurity/pull/1667#issuecomment-379887808,… while parsing modsec rules - this should fix #1663,x-ref: #1735.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1675,2018-02-12T05:40:21Z,2018-02-23T13:48:57Z,2018-02-23T13:48:58Z,CLOSED,False,7458,7107,6,https://github.com/victorhora,Add missing Base64 transformation statements to parser,1,"['RIP - libmodsecurity', 'RIP - libmodsec - missing transformation']",https://github.com/SpiderLabs/ModSecurity/pull/1675,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1675,"This solves solves the Invalid action: t:Base64Decode error if one tries to use the the Base64  transformations with libModSecurity. Should fix #1632 and #1649
The transformation itself was already implemented but it was missing the references in the parser.","This solves solves the Invalid action: t:Base64Decode error if one tries to use the the Base64  transformations with libModSecurity. Should fix #1632 and #1649
The transformation itself was already implemented but it was missing the references in the parser.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1675,2018-02-12T05:40:21Z,2018-02-23T13:48:57Z,2018-02-23T13:48:58Z,CLOSED,False,7458,7107,6,https://github.com/victorhora,Add missing Base64 transformation statements to parser,1,"['RIP - libmodsecurity', 'RIP - libmodsec - missing transformation']",https://github.com/SpiderLabs/ModSecurity/pull/1675,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1675#issuecomment-368013508,"This solves solves the Invalid action: t:Base64Decode error if one tries to use the the Base64  transformations with libModSecurity. Should fix #1632 and #1649
The transformation itself was already implemented but it was missing the references in the parser.",Merged tnks,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1677,2018-02-16T08:55:39Z,2018-02-23T17:07:23Z,2018-03-21T11:22:38Z,CLOSED,False,2,2,1,https://github.com/defanator,"Fix ""include /foo/*.conf"" for single matched object in directory",1,[],https://github.com/SpiderLabs/ModSecurity/pull/1677,https://github.com/defanator,1,https://github.com/SpiderLabs/ModSecurity/pull/1677,"This allows to use configurations like the following:
include /etc/nginx/modsec/custom-rules/*.conf

when there's just one .conf file in /etc/nginx/modsec/custom-rules/.
Currently it fails with the following error message:
root@vagrant:/etc/nginx/modsec# nginx -t
nginx: [emerg] ""modsecurity_rules_file"" directive Rules error. File: /etc/nginx/modsec/main.conf. Line: 1. Column: 45. /etc/nginx/modsec/custom-rules/*.conf: Not able to open file. Looking at: '/etc/nginx/modsec/custom-rules/*.conf', '/etc/nginx/modsec/custom-rules/*.conf', '/etc/nginx/modsec//etc/nginx/modsec/custom-rules/*.conf', '/etc/nginx/modsec//etc/nginx/modsec/custom-rules/*.conf'. in /etc/nginx/nginx.conf:75
nginx: configuration file /etc/nginx/nginx.conf test failed
root@vagrant:/etc/nginx/modsec# find custom-rules/ -type f
custom-rules/foo.conf

And works fine when there're more than 1 matched files:
root@vagrant:/etc/nginx/modsec# touch custom-rules/bar.conf
root@vagrant:/etc/nginx/modsec# nginx -t
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful
root@vagrant:/etc/nginx/modsec# find custom-rules/ -type f
custom-rules/foo.conf
custom-rules/bar.conf","This allows to use configurations like the following:
include /etc/nginx/modsec/custom-rules/*.conf

when there's just one .conf file in /etc/nginx/modsec/custom-rules/.
Currently it fails with the following error message:
root@vagrant:/etc/nginx/modsec# nginx -t
nginx: [emerg] ""modsecurity_rules_file"" directive Rules error. File: /etc/nginx/modsec/main.conf. Line: 1. Column: 45. /etc/nginx/modsec/custom-rules/*.conf: Not able to open file. Looking at: '/etc/nginx/modsec/custom-rules/*.conf', '/etc/nginx/modsec/custom-rules/*.conf', '/etc/nginx/modsec//etc/nginx/modsec/custom-rules/*.conf', '/etc/nginx/modsec//etc/nginx/modsec/custom-rules/*.conf'. in /etc/nginx/nginx.conf:75
nginx: configuration file /etc/nginx/nginx.conf test failed
root@vagrant:/etc/nginx/modsec# find custom-rules/ -type f
custom-rules/foo.conf

And works fine when there're more than 1 matched files:
root@vagrant:/etc/nginx/modsec# touch custom-rules/bar.conf
root@vagrant:/etc/nginx/modsec# nginx -t
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful
root@vagrant:/etc/nginx/modsec# find custom-rules/ -type f
custom-rules/foo.conf
custom-rules/bar.conf",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1677,2018-02-16T08:55:39Z,2018-02-23T17:07:23Z,2018-03-21T11:22:38Z,CLOSED,False,2,2,1,https://github.com/defanator,"Fix ""include /foo/*.conf"" for single matched object in directory",1,[],https://github.com/SpiderLabs/ModSecurity/pull/1677,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1677#issuecomment-368072638,"This allows to use configurations like the following:
include /etc/nginx/modsec/custom-rules/*.conf

when there's just one .conf file in /etc/nginx/modsec/custom-rules/.
Currently it fails with the following error message:
root@vagrant:/etc/nginx/modsec# nginx -t
nginx: [emerg] ""modsecurity_rules_file"" directive Rules error. File: /etc/nginx/modsec/main.conf. Line: 1. Column: 45. /etc/nginx/modsec/custom-rules/*.conf: Not able to open file. Looking at: '/etc/nginx/modsec/custom-rules/*.conf', '/etc/nginx/modsec/custom-rules/*.conf', '/etc/nginx/modsec//etc/nginx/modsec/custom-rules/*.conf', '/etc/nginx/modsec//etc/nginx/modsec/custom-rules/*.conf'. in /etc/nginx/nginx.conf:75
nginx: configuration file /etc/nginx/nginx.conf test failed
root@vagrant:/etc/nginx/modsec# find custom-rules/ -type f
custom-rules/foo.conf

And works fine when there're more than 1 matched files:
root@vagrant:/etc/nginx/modsec# touch custom-rules/bar.conf
root@vagrant:/etc/nginx/modsec# nginx -t
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful
root@vagrant:/etc/nginx/modsec# find custom-rules/ -type f
custom-rules/foo.conf
custom-rules/bar.conf",merged! thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1678,2018-02-21T10:10:58Z,2018-02-23T17:12:31Z,2018-03-21T11:22:57Z,CLOSED,False,1,0,1,https://github.com/defanator,"Fix ""make dist"" target to include necessary headers for Lua",1,[],https://github.com/SpiderLabs/ModSecurity/pull/1678,https://github.com/defanator,1,https://github.com/SpiderLabs/ModSecurity/pull/1678,"Currently the src/engines/lua.h header is not being packed into archive made by make dist, and building fails with the following:
make[3]: Entering directory '/tmp/modsecurity-3.0/src'
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I.  -std=c++11 -I.. -g -I../others -fPIC -O3 -I../headers -DWITH_GEOIP -I/usr/include/    -DWITH_YAJL -I/usr/include/yajl  -DPCRE_HAVE_JIT   -I/usr/include/libxml2 -DWITH_LIBXML2   -g -O2 -MT parser/libmodsecurity_la-seclang-parser.lo -MD -MP -MF parser/.deps/libmodsecurity_la-seclang-parser.Tpo -c -o parser/libmodsecurity_la-seclang-parser.lo `test -f 'parser/seclang-parser.cc' || echo './'`parser/seclang-parser.cc
libtool: compile:  g++ -DHAVE_CONFIG_H -I. -std=c++11 -I.. -g -I../others -fPIC -O3 -I../headers -DWITH_GEOIP -I/usr/include/ -DWITH_YAJL -I/usr/include/yajl -DPCRE_HAVE_JIT -I/usr/include/libxml2 -DWITH_LIBXML2 -g -O2 -MT parser/libmodsecurity_la-seclang-parser.lo -MD -MP -MF parser/.deps/libmodsecurity_la-seclang-parser.Tpo -c parser/seclang-parser.cc  -fPIC -DPIC -o parser/.libs/libmodsecurity_la-seclang-parser.o
In file included from seclang-parser.yy:20:0,
                 from seclang-parser.cc:46:
../src/rule_script.h:22:28: fatal error: src/engine/lua.h: No such file or directory
compilation terminated.
Makefile:1795: recipe for target 'parser/libmodsecurity_la-seclang-parser.lo' failed
make[3]: *** [parser/libmodsecurity_la-seclang-parser.lo] Error 1
make[3]: Leaving directory '/tmp/modsecurity-3.0/src'
Makefile:3118: recipe for target 'all-recursive' failed","Currently the src/engines/lua.h header is not being packed into archive made by make dist, and building fails with the following:
make[3]: Entering directory '/tmp/modsecurity-3.0/src'
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I.  -std=c++11 -I.. -g -I../others -fPIC -O3 -I../headers -DWITH_GEOIP -I/usr/include/    -DWITH_YAJL -I/usr/include/yajl  -DPCRE_HAVE_JIT   -I/usr/include/libxml2 -DWITH_LIBXML2   -g -O2 -MT parser/libmodsecurity_la-seclang-parser.lo -MD -MP -MF parser/.deps/libmodsecurity_la-seclang-parser.Tpo -c -o parser/libmodsecurity_la-seclang-parser.lo `test -f 'parser/seclang-parser.cc' || echo './'`parser/seclang-parser.cc
libtool: compile:  g++ -DHAVE_CONFIG_H -I. -std=c++11 -I.. -g -I../others -fPIC -O3 -I../headers -DWITH_GEOIP -I/usr/include/ -DWITH_YAJL -I/usr/include/yajl -DPCRE_HAVE_JIT -I/usr/include/libxml2 -DWITH_LIBXML2 -g -O2 -MT parser/libmodsecurity_la-seclang-parser.lo -MD -MP -MF parser/.deps/libmodsecurity_la-seclang-parser.Tpo -c parser/seclang-parser.cc  -fPIC -DPIC -o parser/.libs/libmodsecurity_la-seclang-parser.o
In file included from seclang-parser.yy:20:0,
                 from seclang-parser.cc:46:
../src/rule_script.h:22:28: fatal error: src/engine/lua.h: No such file or directory
compilation terminated.
Makefile:1795: recipe for target 'parser/libmodsecurity_la-seclang-parser.lo' failed
make[3]: *** [parser/libmodsecurity_la-seclang-parser.lo] Error 1
make[3]: Leaving directory '/tmp/modsecurity-3.0/src'
Makefile:3118: recipe for target 'all-recursive' failed",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1678,2018-02-21T10:10:58Z,2018-02-23T17:12:31Z,2018-03-21T11:22:57Z,CLOSED,False,1,0,1,https://github.com/defanator,"Fix ""make dist"" target to include necessary headers for Lua",1,[],https://github.com/SpiderLabs/ModSecurity/pull/1678,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1678#issuecomment-368074296,"Currently the src/engines/lua.h header is not being packed into archive made by make dist, and building fails with the following:
make[3]: Entering directory '/tmp/modsecurity-3.0/src'
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I.  -std=c++11 -I.. -g -I../others -fPIC -O3 -I../headers -DWITH_GEOIP -I/usr/include/    -DWITH_YAJL -I/usr/include/yajl  -DPCRE_HAVE_JIT   -I/usr/include/libxml2 -DWITH_LIBXML2   -g -O2 -MT parser/libmodsecurity_la-seclang-parser.lo -MD -MP -MF parser/.deps/libmodsecurity_la-seclang-parser.Tpo -c -o parser/libmodsecurity_la-seclang-parser.lo `test -f 'parser/seclang-parser.cc' || echo './'`parser/seclang-parser.cc
libtool: compile:  g++ -DHAVE_CONFIG_H -I. -std=c++11 -I.. -g -I../others -fPIC -O3 -I../headers -DWITH_GEOIP -I/usr/include/ -DWITH_YAJL -I/usr/include/yajl -DPCRE_HAVE_JIT -I/usr/include/libxml2 -DWITH_LIBXML2 -g -O2 -MT parser/libmodsecurity_la-seclang-parser.lo -MD -MP -MF parser/.deps/libmodsecurity_la-seclang-parser.Tpo -c parser/seclang-parser.cc  -fPIC -DPIC -o parser/.libs/libmodsecurity_la-seclang-parser.o
In file included from seclang-parser.yy:20:0,
                 from seclang-parser.cc:46:
../src/rule_script.h:22:28: fatal error: src/engine/lua.h: No such file or directory
compilation terminated.
Makefile:1795: recipe for target 'parser/libmodsecurity_la-seclang-parser.lo' failed
make[3]: *** [parser/libmodsecurity_la-seclang-parser.lo] Error 1
make[3]: Leaving directory '/tmp/modsecurity-3.0/src'
Makefile:3118: recipe for target 'all-recursive' failed",merged. thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1683,2018-02-23T21:37:23Z,,2020-03-12T17:29:44Z,OPEN,False,25,5,1,https://github.com/vvidic,Allow regular expressions in ctl:ruleRemoveTargetByX variable names #911,1,"['2.x', 'waiting for v3']",https://github.com/SpiderLabs/ModSecurity/pull/1683,https://github.com/vvidic,1,https://github.com/SpiderLabs/ModSecurity/pull/1683,"SecRule REQUEST_URI ""@beginswith /index.php"" 
""id:1001,phase:1,pass,nolog, 
ctl:ruleRemoveTargetById=942100;ARGS:/^password[\d+]$/""","SecRule REQUEST_URI ""@beginswith /index.php"" 
""id:1001,phase:1,pass,nolog, 
ctl:ruleRemoveTargetById=942100;ARGS:/^password[\d+]$/""",True,"{'HEART': ['https://github.com/emphazer', 'https://github.com/azurit']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1683,2018-02-23T21:37:23Z,,2020-03-12T17:29:44Z,OPEN,False,25,5,1,https://github.com/vvidic,Allow regular expressions in ctl:ruleRemoveTargetByX variable names #911,1,"['2.x', 'waiting for v3']",https://github.com/SpiderLabs/ModSecurity/pull/1683,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1683#issuecomment-369235412,"SecRule REQUEST_URI ""@beginswith /index.php"" 
""id:1001,phase:1,pass,nolog, 
ctl:ruleRemoveTargetById=942100;ARGS:/^password[\d+]$/""","Hi @vvidic,
Thank you for the patch. As of the release of version 3 we are only merging new features if they are also available for v3.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1683,2018-02-23T21:37:23Z,,2020-03-12T17:29:44Z,OPEN,False,25,5,1,https://github.com/vvidic,Allow regular expressions in ctl:ruleRemoveTargetByX variable names #911,1,"['2.x', 'waiting for v3']",https://github.com/SpiderLabs/ModSecurity/pull/1683,https://github.com/vvidic,3,https://github.com/SpiderLabs/ModSecurity/pull/1683#issuecomment-369241058,"SecRule REQUEST_URI ""@beginswith /index.php"" 
""id:1001,phase:1,pass,nolog, 
ctl:ruleRemoveTargetById=942100;ARGS:/^password[\d+]$/""",So you mean I should send a patch for v3 branch than?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1683,2018-02-23T21:37:23Z,,2020-03-12T17:29:44Z,OPEN,False,25,5,1,https://github.com/vvidic,Allow regular expressions in ctl:ruleRemoveTargetByX variable names #911,1,"['2.x', 'waiting for v3']",https://github.com/SpiderLabs/ModSecurity/pull/1683,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1683#issuecomment-369309047,"SecRule REQUEST_URI ""@beginswith /index.php"" 
""id:1001,phase:1,pass,nolog, 
ctl:ruleRemoveTargetById=942100;ARGS:/^password[\d+]$/""","Hi @vvidic,
It means that it won't be released until we have the same functionality in v3.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1683,2018-02-23T21:37:23Z,,2020-03-12T17:29:44Z,OPEN,False,25,5,1,https://github.com/vvidic,Allow regular expressions in ctl:ruleRemoveTargetByX variable names #911,1,"['2.x', 'waiting for v3']",https://github.com/SpiderLabs/ModSecurity/pull/1683,https://github.com/emphazer,5,https://github.com/SpiderLabs/ModSecurity/pull/1683#issuecomment-451476786,"SecRule REQUEST_URI ""@beginswith /index.php"" 
""id:1001,phase:1,pass,nolog, 
ctl:ruleRemoveTargetById=942100;ARGS:/^password[\d+]$/""","@vvidic thx a lot for this wonderful patch.
this makes modsec v2 much better and easier to handle on multi home servers",True,"{'HOORAY': ['https://github.com/dune73', 'https://github.com/fzipi']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1683,2018-02-23T21:37:23Z,,2020-03-12T17:29:44Z,OPEN,False,25,5,1,https://github.com/vvidic,Allow regular expressions in ctl:ruleRemoveTargetByX variable names #911,1,"['2.x', 'waiting for v3']",https://github.com/SpiderLabs/ModSecurity/pull/1683,https://github.com/fzipi,6,https://github.com/SpiderLabs/ModSecurity/pull/1683#issuecomment-512465519,"SecRule REQUEST_URI ""@beginswith /index.php"" 
""id:1001,phase:1,pass,nolog, 
ctl:ruleRemoveTargetById=942100;ARGS:/^password[\d+]$/""",@vvidic Do you have the functionality available for v3?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1683,2018-02-23T21:37:23Z,,2020-03-12T17:29:44Z,OPEN,False,25,5,1,https://github.com/vvidic,Allow regular expressions in ctl:ruleRemoveTargetByX variable names #911,1,"['2.x', 'waiting for v3']",https://github.com/SpiderLabs/ModSecurity/pull/1683,https://github.com/vvidic,7,https://github.com/SpiderLabs/ModSecurity/pull/1683#issuecomment-512515093,"SecRule REQUEST_URI ""@beginswith /index.php"" 
""id:1001,phase:1,pass,nolog, 
ctl:ruleRemoveTargetById=942100;ARGS:/^password[\d+]$/""","On Wed, Jul 17, 2019 at 10:38:29AM -0700, Felipe Zipitría wrote:
 @vvidic Do you have the functionality available for v3?
Nope, don't think I found the place where it should go. Let me know if
you have any suggestions.
…
-- 
Valentin",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1683,2018-02-23T21:37:23Z,,2020-03-12T17:29:44Z,OPEN,False,25,5,1,https://github.com/vvidic,Allow regular expressions in ctl:ruleRemoveTargetByX variable names #911,1,"['2.x', 'waiting for v3']",https://github.com/SpiderLabs/ModSecurity/pull/1683,https://github.com/fzipi,8,https://github.com/SpiderLabs/ModSecurity/pull/1683#issuecomment-513553972,"SecRule REQUEST_URI ""@beginswith /index.php"" 
""id:1001,phase:1,pass,nolog, 
ctl:ruleRemoveTargetById=942100;ARGS:/^password[\d+]$/""",Looking for it....,True,{'HOORAY': ['https://github.com/emphazer']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1683,2018-02-23T21:37:23Z,,2020-03-12T17:29:44Z,OPEN,False,25,5,1,https://github.com/vvidic,Allow regular expressions in ctl:ruleRemoveTargetByX variable names #911,1,"['2.x', 'waiting for v3']",https://github.com/SpiderLabs/ModSecurity/pull/1683,https://github.com/azurit,9,https://github.com/SpiderLabs/ModSecurity/pull/1683#issuecomment-525332240,"SecRule REQUEST_URI ""@beginswith /index.php"" 
""id:1001,phase:1,pass,nolog, 
ctl:ruleRemoveTargetById=942100;ARGS:/^password[\d+]$/""","Should be merged even if there's no v3 version, some rules cannot be written without this feature.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1683,2018-02-23T21:37:23Z,,2020-03-12T17:29:44Z,OPEN,False,25,5,1,https://github.com/vvidic,Allow regular expressions in ctl:ruleRemoveTargetByX variable names #911,1,"['2.x', 'waiting for v3']",https://github.com/SpiderLabs/ModSecurity/pull/1683,https://github.com/vvidic,10,https://github.com/SpiderLabs/ModSecurity/pull/1683#issuecomment-525401018,"SecRule REQUEST_URI ""@beginswith /index.php"" 
""id:1001,phase:1,pass,nolog, 
ctl:ruleRemoveTargetById=942100;ARGS:/^password[\d+]$/""","On Tue, Aug 27, 2019 at 07:40:03AM -0700, azurit wrote:
 Should be merged even if there's no v3 version, some rules cannot be written
 without this feature.
Right, but I think this was a request from the upstream authors.
…
-- 
Valentin",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1683,2018-02-23T21:37:23Z,,2020-03-12T17:29:44Z,OPEN,False,25,5,1,https://github.com/vvidic,Allow regular expressions in ctl:ruleRemoveTargetByX variable names #911,1,"['2.x', 'waiting for v3']",https://github.com/SpiderLabs/ModSecurity/pull/1683,https://github.com/azurit,11,https://github.com/SpiderLabs/ModSecurity/pull/1683#issuecomment-525409185,"SecRule REQUEST_URI ""@beginswith /index.php"" 
""id:1001,phase:1,pass,nolog, 
ctl:ruleRemoveTargetById=942100;ARGS:/^password[\d+]$/""","I was talking to them off source :) btw, thnx for the patch.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1683,2018-02-23T21:37:23Z,,2020-03-12T17:29:44Z,OPEN,False,25,5,1,https://github.com/vvidic,Allow regular expressions in ctl:ruleRemoveTargetByX variable names #911,1,"['2.x', 'waiting for v3']",https://github.com/SpiderLabs/ModSecurity/pull/1683,https://github.com/vvidic,12,https://github.com/SpiderLabs/ModSecurity/pull/1683#issuecomment-525422551,"SecRule REQUEST_URI ""@beginswith /index.php"" 
""id:1001,phase:1,pass,nolog, 
ctl:ruleRemoveTargetById=942100;ARGS:/^password[\d+]$/""","On Tue, Aug 27, 2019 at 10:44:47AM -0700, azurit wrote:
 I was talking to them off source :) btw, thnx for the patch.
Great :)  In the meanwhile I checked the v3 code and found 2 places
in src/rule.cc where RemoveTargetById/Tag is being used so this is
probably where the changes should go...
…
-- 
Valentin",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1683,2018-02-23T21:37:23Z,,2020-03-12T17:29:44Z,OPEN,False,25,5,1,https://github.com/vvidic,Allow regular expressions in ctl:ruleRemoveTargetByX variable names #911,1,"['2.x', 'waiting for v3']",https://github.com/SpiderLabs/ModSecurity/pull/1683,https://github.com/azurit,13,https://github.com/SpiderLabs/ModSecurity/pull/1683#issuecomment-526137495,"SecRule REQUEST_URI ""@beginswith /index.php"" 
""id:1001,phase:1,pass,nolog, 
ctl:ruleRemoveTargetById=942100;ARGS:/^password[\d+]$/""","Example of exclusive rule which cannot be written without this feature (Typo3, probably a CSRF security token which is part of input name):
""Warning. Pattern match \""(?:;|\\\\{|\\\\||\\\\|\\\\||&|&&|\\\\n|\\\\r|\\\\$\\\\(|\\\\$\\\\(\\\\(|`|\\\\${|<\\\\(|>\\\\(|\\\\(\\\\s*\\\\))\\\\s*(?:{|\\\\s*\\\\(\\\\s*|\\\\w+=(?:[^\\\\s]*|\\\\$.*|\\\\$.*|<.*|>.*|\\\\'.*\\\\'|\\\"".*\\\"")\\\\s+|!\\\\s*|\\\\$)*\\\\s*(?:'|\\\"")*(?:[\\\\?\\\\*\\\\[\\\\]\\\\(\\\\)\\\\-\\\\|+\\\\w'\\\""\\\\./\\\\\\\\]+/)?[\\\\\\\\'\\\""]*(?:l[\\\\\\\\'\\\""]* ...\"" at ARGS:data[tt_content][NEW5d67a8343a775100352544][bodytext]. [file \""/usr/share/modsecurity-crs/rules/REQUEST-932-APPLICATION-ATTACK-RCE.conf\""] [line \""81\""] [id \""932100\""] [rev \""4\""] [msg \""Remote Command Execution: Unix Command Injection\""] [data \""Matched Data: ;\\x0d\\x0a(function found within ARGS:data[tt_content][NEW5d67a8343a775100352544][bodytext]: <style>\\x0d\\x0a #_form_52_ { font-size:14px; line-height:1.6; font-family:arial, helvetica, sans-serif; margin:0; }\\x0d\\x0a #_form_52_ * { outline:0; }\\x0d\\x0a ._form_hide { display:none; visibility:hidden; }\\x0d\\x0a ._form_show { display:block; visibility:visible; }\\x0d\\x0a #_form_52_._form-top { top:0; }\\x0d\\x0a #_form_52_._form-bottom { bottom:0; }\\x0d\\x0a #_form_52_._form-left { left""",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1683,2018-02-23T21:37:23Z,,2020-03-12T17:29:44Z,OPEN,False,25,5,1,https://github.com/vvidic,Allow regular expressions in ctl:ruleRemoveTargetByX variable names #911,1,"['2.x', 'waiting for v3']",https://github.com/SpiderLabs/ModSecurity/pull/1683,https://github.com/vvidic,14,https://github.com/SpiderLabs/ModSecurity/pull/1683#issuecomment-526155935,"SecRule REQUEST_URI ""@beginswith /index.php"" 
""id:1001,phase:1,pass,nolog, 
ctl:ruleRemoveTargetById=942100;ARGS:/^password[\d+]$/""","Another obstacle in the v3 implementation seems to be the parser,
as it does not except the regex in the variable name:

SecRule REQUEST_FILENAME ""@ENDSWITH /wp-login.php"" ""id:9002100,phase:2,t:none,nolog,pass,ctl:ruleRemoveTargetById=123;ARGS:/^pwd$/""

Rules error. File: action-ctl_rule_remove_target_by_id.json. Line: 1. Column: 132. Expecting an action, got:  ^pwd$/""

Not sure how to work around this?
…
-- 
Valentin",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1683,2018-02-23T21:37:23Z,,2020-03-12T17:29:44Z,OPEN,False,25,5,1,https://github.com/vvidic,Allow regular expressions in ctl:ruleRemoveTargetByX variable names #911,1,"['2.x', 'waiting for v3']",https://github.com/SpiderLabs/ModSecurity/pull/1683,https://github.com/azurit,15,https://github.com/SpiderLabs/ModSecurity/pull/1683#issuecomment-598316009,"SecRule REQUEST_URI ""@beginswith /index.php"" 
""id:1001,phase:1,pass,nolog, 
ctl:ruleRemoveTargetById=942100;ARGS:/^password[\d+]$/""","@vvidic Today i came accross a bug in this feature: It's not possible to match a pipe symbol ( | ), even when escaped. Apache will print this error:
Error parsing actions: Unknown action: _]+\\]$/
Example rule (Prestashop web translation feature):
SecRule REQUEST_FILENAME ""@rx /admin[0-9a-zA-Z]+/index\.php$"" \
    ""id:9990317,\
    phase:2,\
    pass,\
    t:none,\
    nolog,\
    chain""
    SecRule ARGS_GET:controller ""@streq AdminTranslations"" \
        ""t:none,\
        chain""
        SecRule &ARGS_GET:controller ""@eq 1"" \
            ""t:none,\
            ctl:ruleRemoveTargetById=932100;ARGS:/^core_mail\[txt\]\[[a-z_]+\]$/,\
            ctl:ruleRemoveTargetById=932105;ARGS:/^core_mail\[txt\]\[[a-z_]+\]$/,\
            ctl:ruleRemoveTargetById=932105;ARGS:/^core_mail\[html\]\[[a-z_]+\]$/,\
            ctl:ruleRemoveTargetById=932100;ARGS:/^core_mail\[html\]\[[a-z_]+\]$/,\
            ctl:ruleRemoveTargetById=921130;ARGS:/^core_mail\[html\]\[[a-z_]+\]$/,\
            ctl:ruleRemoveTargetById=941180;ARGS:/^core_mail\[html\]\[[a-z_]+\]$/,\
            ctl:ruleRemoveTargetById=932110;ARGS:/^core_mail\[html\]\[[a-z_]+\]$/,\
            ctl:ruleRemoveTargetById=941100;ARGS:/^core_mail\[html\]\[[a-z_]+\]$/,\
            ctl:ruleRemoveTargetById=941140;ARGS:/^core_mail\[html\]\[[a-z_]+\]$/,\
            ctl:ruleRemoveTargetById=941260;ARGS:/^core_mail\[html\]\[[a-z_]+\]$/,\
            ctl:ruleRemoveTargetById=941250;ARGS:/^core_mail\[html\]\[[a-z_]+\]$/,\
            ctl:ruleRemoveTargetById=941190;ARGS:/^core_mail\[html\]\[[a-z_]+\]$/,\
            ctl:ruleRemoveTargetById=932100;ARGS:/^module_mail\[html\]\[[a-z0-9\-\|_]+\]$/,\
            ctl:ruleRemoveTargetById=921130;ARGS:/^module_mail\[html\]\[[a-z0-9\-\|_]+\]$/,\
            ctl:ruleRemoveTargetById=941180;ARGS:/^module_mail\[html\]\[[a-z0-9\-\|_]+\]$/,\
            ctl:ruleRemoveTargetById=932110;ARGS:/^module_mail\[html\]\[[a-z0-9\-\|_]+\]$/,\
            ctl:ruleRemoveTargetById=941100;ARGS:/^module_mail\[html\]\[[a-z0-9\-\|_]+\]$/,\
            ctl:ruleRemoveTargetById=941140;ARGS:/^module_mail\[html\]\[[a-z0-9\-\|_]+\]$/,\
            ctl:ruleRemoveTargetById=941190;ARGS:/^module_mail\[html\]\[[a-z0-9\-\|_]+\]$/,\
            ctl:ruleRemoveTargetById=941250;ARGS:/^module_mail\[html\]\[[a-z0-9\-\|_]+\]$/,\
            ctl:ruleRemoveTargetById=941260;ARGS:/^module_mail\[html\]\[[a-z0-9\-\|_]+\]$/,\
            ctl:ruleRemoveTargetById=930120;ARGS:/^[0-9a-z]+$/,\
            ctl:ruleRemoveTargetById=933180;ARGS:/^[0-9a-z]+$/""


The interesting is that escaped pipe symbol can be used in parts where regex is officially supported (e.g. in REQUEST_FILENAME matching in the beginning of the rule).",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1690,2018-02-27T19:17:56Z,2018-09-20T23:27:24Z,2018-09-20T23:27:24Z,CLOSED,False,9,2,2,https://github.com/drmuey,Issue #1671: Only set SecHashKey et al. when SecHashEngine is On,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1690,https://github.com/drmuey,1,https://github.com/SpiderLabs/ModSecurity/pull/1690,As requested in issue #1671 by @victorhora,As requested in issue #1671 by @victorhora,True,{'THUMBS_UP': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1690,2018-02-27T19:17:56Z,2018-09-20T23:27:24Z,2018-09-20T23:27:24Z,CLOSED,False,9,2,2,https://github.com/drmuey,Issue #1671: Only set SecHashKey et al. when SecHashEngine is On,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1690,https://github.com/victorhora,2,https://github.com/SpiderLabs/ModSecurity/pull/1690#issuecomment-423365428,As requested in issue #1671 by @victorhora,"This looks good to me. Tests are passing and SecHash is working as expected.
SecHashEngine On
SecHashKey ""abc"" KeyOnly
SecHashParam ""hmac""
SecHashMethodRx HashHref ""/""
SecStreamOutBodyInspection On
SecContentInjection On
SecDisableBackendCompression On",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1690,2018-02-27T19:17:56Z,2018-09-20T23:27:24Z,2018-09-20T23:27:24Z,CLOSED,False,9,2,2,https://github.com/drmuey,Issue #1671: Only set SecHashKey et al. when SecHashEngine is On,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1690,https://github.com/victorhora,3,https://github.com/SpiderLabs/ModSecurity/pull/1690#issuecomment-423366051,As requested in issue #1671 by @victorhora,"Merged as of a677456
Thanks! :)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1691,2018-02-27T21:28:51Z,2018-02-28T11:57:09Z,2018-02-28T13:14:06Z,CLOSED,False,10,13,2,https://github.com/airween,Fix LMDB compile error,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1691,https://github.com/airween,1,https://github.com/SpiderLabs/ModSecurity/pull/1691,"I run this problem: #1586.
This patch fixed it.","I run this problem: #1586.
This patch fixed it.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1691,2018-02-27T21:28:51Z,2018-02-28T11:57:09Z,2018-02-28T13:14:06Z,CLOSED,False,10,13,2,https://github.com/airween,Fix LMDB compile error,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1691,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1691#issuecomment-369217620,"I run this problem: #1586.
This patch fixed it.",Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1694,2018-03-04T22:20:54Z,2018-03-05T20:55:02Z,2018-03-05T20:55:03Z,CLOSED,False,892,944,4,https://github.com/victorhora,Add missing verify*** operator statements to parser,1,"['bug', 'RIP - libmodsec - missing variables', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1694,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1694,"Add missing references in the parser.
Solves the Operator: verifyCPF is not yet supported. and Operator: verifySSN is not yet supported. errors if one tries to use verifyCPF or verifySSN with libModSecurity.","Add missing references in the parser.
Solves the Operator: verifyCPF is not yet supported. and Operator: verifySSN is not yet supported. errors if one tries to use verifyCPF or verifySSN with libModSecurity.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1694,2018-03-04T22:20:54Z,2018-03-05T20:55:02Z,2018-03-05T20:55:03Z,CLOSED,False,892,944,4,https://github.com/victorhora,Add missing verify*** operator statements to parser,1,"['bug', 'RIP - libmodsec - missing variables', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1694,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1694#issuecomment-370561866,"Add missing references in the parser.
Solves the Operator: verifyCPF is not yet supported. and Operator: verifySSN is not yet supported. errors if one tries to use verifyCPF or verifySSN with libModSecurity.",Merged. thanks ;),True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1696,2018-03-06T19:28:49Z,2018-03-08T11:28:12Z,2018-03-08T11:28:12Z,CLOSED,False,9405,8044,6,https://github.com/victorhora,Prettier error messages for unsupported configurations (UX),1,"['enhancement', 'RIP - libmodsecurity', 'RIP - libmodsec - missing documentation', '3.x', 'RIP - Type - Usage']",https://github.com/SpiderLabs/ModSecurity/pull/1696,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1696,"Rationale is being explicit on which configurations are currently supported and allowing a smoother transition between v2 to v3, mainly for older or highly modified setups that uses unusual configuration directives.
Also, some unsupported directives that uses CONFIG_VALUE (e.g. SecConnEngine) now allows the user to keep the configuration directive as long as its set to 'Off'.","Rationale is being explicit on which configurations are currently supported and allowing a smoother transition between v2 to v3, mainly for older or highly modified setups that uses unusual configuration directives.
Also, some unsupported directives that uses CONFIG_VALUE (e.g. SecConnEngine) now allows the user to keep the configuration directive as long as its set to 'Off'.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1696,2018-03-06T19:28:49Z,2018-03-08T11:28:12Z,2018-03-08T11:28:12Z,CLOSED,False,9405,8044,6,https://github.com/victorhora,Prettier error messages for unsupported configurations (UX),1,"['enhancement', 'RIP - libmodsecurity', 'RIP - libmodsec - missing documentation', '3.x', 'RIP - Type - Usage']",https://github.com/SpiderLabs/ModSecurity/pull/1696,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1696#issuecomment-371460774,"Rationale is being explicit on which configurations are currently supported and allowing a smoother transition between v2 to v3, mainly for older or highly modified setups that uses unusual configuration directives.
Also, some unsupported directives that uses CONFIG_VALUE (e.g. SecConnEngine) now allows the user to keep the configuration directive as long as its set to 'Off'.",merged. thanks.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1701,2018-03-09T18:01:46Z,2018-03-12T23:22:53Z,2018-03-12T23:22:53Z,CLOSED,False,7109,7090,5,https://github.com/victorhora,Temporarily accept invalid MULTIPART_SEMICOLON_MISSING operator,1,"['RIP - libmodsecurity', '3.x', 'RIP - Type - Usage']",https://github.com/SpiderLabs/ModSecurity/pull/1701,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1701,"MULTIPART_SEMICOLON_MISSING is now accepted by the parser and referred to  MultipartMissingSemicolon. Ex: SecRule MULTIPART_SEMICOLON_MISSING ""!@eq 0"" ""id:'200011',phase:2,msg:'MULTIPART_SEMICOLON_MISSING'"" results in:
Matched ""Operator `Eq' with parameter `0' against variable `MULTIPART_MISSING_SEMICOLON' (Value: `1' ) [id ""200011""] [rev """"] [msg ""MULTIPART_SEMICOLON_MISSING""]
Suggested temporary addition to the parser related with SpiderLabs/owasp-modsecurity-crs#995, SpiderLabs/owasp-modsecurity-crs#1023 and to avoid issues like SpiderLabs/owasp-modsecurity-crs#1032 and SpiderLabs/owasp-modsecurity-crs#1021.","MULTIPART_SEMICOLON_MISSING is now accepted by the parser and referred to  MultipartMissingSemicolon. Ex: SecRule MULTIPART_SEMICOLON_MISSING ""!@eq 0"" ""id:'200011',phase:2,msg:'MULTIPART_SEMICOLON_MISSING'"" results in:
Matched ""Operator `Eq' with parameter `0' against variable `MULTIPART_MISSING_SEMICOLON' (Value: `1' ) [id ""200011""] [rev """"] [msg ""MULTIPART_SEMICOLON_MISSING""]
Suggested temporary addition to the parser related with SpiderLabs/owasp-modsecurity-crs#995, SpiderLabs/owasp-modsecurity-crs#1023 and to avoid issues like SpiderLabs/owasp-modsecurity-crs#1032 and SpiderLabs/owasp-modsecurity-crs#1021.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1701,2018-03-09T18:01:46Z,2018-03-12T23:22:53Z,2018-03-12T23:22:53Z,CLOSED,False,7109,7090,5,https://github.com/victorhora,Temporarily accept invalid MULTIPART_SEMICOLON_MISSING operator,1,"['RIP - libmodsecurity', '3.x', 'RIP - Type - Usage']",https://github.com/SpiderLabs/ModSecurity/pull/1701,https://github.com/defanator,2,https://github.com/SpiderLabs/ModSecurity/pull/1701#issuecomment-372322310,"MULTIPART_SEMICOLON_MISSING is now accepted by the parser and referred to  MultipartMissingSemicolon. Ex: SecRule MULTIPART_SEMICOLON_MISSING ""!@eq 0"" ""id:'200011',phase:2,msg:'MULTIPART_SEMICOLON_MISSING'"" results in:
Matched ""Operator `Eq' with parameter `0' against variable `MULTIPART_MISSING_SEMICOLON' (Value: `1' ) [id ""200011""] [rev """"] [msg ""MULTIPART_SEMICOLON_MISSING""]
Suggested temporary addition to the parser related with SpiderLabs/owasp-modsecurity-crs#995, SpiderLabs/owasp-modsecurity-crs#1023 and to avoid issues like SpiderLabs/owasp-modsecurity-crs#1032 and SpiderLabs/owasp-modsecurity-crs#1021.","@victorhora @zimmerle wow. Are you guys going to merge this one before next libmodsecurity release?
On a related note (not sure if you have seen this in slack) - currently libmodsecurity fails to load default crs-setup.conf with the following error:
test@vagrant:~/ModSecurity$ sudo nginx -t
nginx: [emerg] ""modsecurity_rules_file"" directive Rules error. File: /etc/nginx/modsec/owasp-crs/crs-setup.conf. Line: 96. Column: 43. SecCollectionTimeout is not yet supported.  in /etc/nginx/nginx.conf:75
nginx: configuration file /etc/nginx/nginx.conf test failed

This error started to appear after this changeset: 64ce412
Appreciate any ideas on how to fix this one as well.",True,"{'THUMBS_UP': ['https://github.com/victorhora', 'https://github.com/zimmerle']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1701,2018-03-09T18:01:46Z,2018-03-12T23:22:53Z,2018-03-12T23:22:53Z,CLOSED,False,7109,7090,5,https://github.com/victorhora,Temporarily accept invalid MULTIPART_SEMICOLON_MISSING operator,1,"['RIP - libmodsecurity', '3.x', 'RIP - Type - Usage']",https://github.com/SpiderLabs/ModSecurity/pull/1701,https://github.com/victorhora,3,https://github.com/SpiderLabs/ModSecurity/pull/1701#issuecomment-372467939,"MULTIPART_SEMICOLON_MISSING is now accepted by the parser and referred to  MultipartMissingSemicolon. Ex: SecRule MULTIPART_SEMICOLON_MISSING ""!@eq 0"" ""id:'200011',phase:2,msg:'MULTIPART_SEMICOLON_MISSING'"" results in:
Matched ""Operator `Eq' with parameter `0' against variable `MULTIPART_MISSING_SEMICOLON' (Value: `1' ) [id ""200011""] [rev """"] [msg ""MULTIPART_SEMICOLON_MISSING""]
Suggested temporary addition to the parser related with SpiderLabs/owasp-modsecurity-crs#995, SpiderLabs/owasp-modsecurity-crs#1023 and to avoid issues like SpiderLabs/owasp-modsecurity-crs#1032 and SpiderLabs/owasp-modsecurity-crs#1021.","hey @defanator, merging this one is my idea to avoid those issues happening too often. I'm not sure if @zimmerle likes this idea too much as it's a dumb/fake variable that gets pointed to the right one in the end... but I don't see an alternative as of now as it might not be backported on CRS 3.0.x
About the issue with the unsupported directive, I've suggested a change at v3/dev/fix-seccol_timeout_err_crs branch. It will make the error go away until the feature is addressed.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1701,2018-03-09T18:01:46Z,2018-03-12T23:22:53Z,2018-03-12T23:22:53Z,CLOSED,False,7109,7090,5,https://github.com/victorhora,Temporarily accept invalid MULTIPART_SEMICOLON_MISSING operator,1,"['RIP - libmodsecurity', '3.x', 'RIP - Type - Usage']",https://github.com/SpiderLabs/ModSecurity/pull/1701,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1701#issuecomment-372495236,"MULTIPART_SEMICOLON_MISSING is now accepted by the parser and referred to  MultipartMissingSemicolon. Ex: SecRule MULTIPART_SEMICOLON_MISSING ""!@eq 0"" ""id:'200011',phase:2,msg:'MULTIPART_SEMICOLON_MISSING'"" results in:
Matched ""Operator `Eq' with parameter `0' against variable `MULTIPART_MISSING_SEMICOLON' (Value: `1' ) [id ""200011""] [rev """"] [msg ""MULTIPART_SEMICOLON_MISSING""]
Suggested temporary addition to the parser related with SpiderLabs/owasp-modsecurity-crs#995, SpiderLabs/owasp-modsecurity-crs#1023 and to avoid issues like SpiderLabs/owasp-modsecurity-crs#1032 and SpiderLabs/owasp-modsecurity-crs#1021.","Well. I would fix it on OWASP CRS. ModSec v3 points to the error, while v2 silent fails. IMHO the fact that no one is noticing is not a reason to not fix. Ultimately it is a missing check.
Anyhow, this pull request seems to bring a benefit to the less experienced user which is always good. It was indeed a good idea. Merged. Thank you @victorhora.
Yes @defanator, this will be part of our next release.",True,{'HEART': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1702,2018-03-09T22:04:15Z,2018-03-13T01:20:25Z,2018-03-13T01:20:26Z,CLOSED,False,70,9,4,https://github.com/victorhora,Adds capture action to detectXSS,1,"['RIP - Type - Feature', 'enhancement', 'RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1702,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1702,Adds capture action in the same basis of #1488 to mimic the same behaviour as v2,Adds capture action in the same basis of #1488 to mimic the same behaviour as v2,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1702,2018-03-09T22:04:15Z,2018-03-13T01:20:25Z,2018-03-13T01:20:26Z,CLOSED,False,70,9,4,https://github.com/victorhora,Adds capture action to detectXSS,1,"['RIP - Type - Feature', 'enhancement', 'RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1702,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1702#issuecomment-372514325,Adds capture action in the same basis of #1488 to mimic the same behaviour as v2,Merged. Thanks :),True,{'HEART': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1713,2018-03-20T17:58:19Z,2018-04-03T18:55:38Z,2018-04-03T18:55:38Z,CLOSED,False,1,1,1,https://github.com/p0pr0ck5,Fix compiler warning in JSON parser,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1713,https://github.com/p0pr0ck5,1,https://github.com/SpiderLabs/ModSecurity/pull/1713,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1713,2018-03-20T17:58:19Z,2018-04-03T18:55:38Z,2018-04-03T18:55:38Z,CLOSED,False,1,1,1,https://github.com/p0pr0ck5,Fix compiler warning in JSON parser,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1713,https://github.com/p0pr0ck5,2,https://github.com/SpiderLabs/ModSecurity/pull/1713#issuecomment-374710715,,Removing in favor of #1714,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1714,2018-03-20T18:37:33Z,2018-11-13T00:45:39Z,2018-11-13T00:56:53Z,MERGED,True,2,2,2,https://github.com/p0pr0ck5,Fix sanitizing JSON request bodies in native audit log format,2,"['RIP - Type - Feature', 'enhancement', '2.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1714,https://github.com/p0pr0ck5,1,https://github.com/SpiderLabs/ModSecurity/pull/1714,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1714,2018-03-20T18:37:33Z,2018-11-13T00:45:39Z,2018-11-13T00:56:53Z,MERGED,True,2,2,2,https://github.com/p0pr0ck5,Fix sanitizing JSON request bodies in native audit log format,2,"['RIP - Type - Feature', 'enhancement', '2.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1714,https://github.com/p0pr0ck5,2,https://github.com/SpiderLabs/ModSecurity/pull/1714#issuecomment-381791097,,Hey @zimmerle any thought of aligning this with the 2.9.3 milestone?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1714,2018-03-20T18:37:33Z,2018-11-13T00:45:39Z,2018-11-13T00:56:53Z,MERGED,True,2,2,2,https://github.com/p0pr0ck5,Fix sanitizing JSON request bodies in native audit log format,2,"['RIP - Type - Feature', 'enhancement', '2.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1714,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1714#issuecomment-382388271,,Sure. done.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1714,2018-03-20T18:37:33Z,2018-11-13T00:45:39Z,2018-11-13T00:56:53Z,MERGED,True,2,2,2,https://github.com/p0pr0ck5,Fix sanitizing JSON request bodies in native audit log format,2,"['RIP - Type - Feature', 'enhancement', '2.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1714,https://github.com/p0pr0ck5,4,https://github.com/SpiderLabs/ModSecurity/pull/1714#issuecomment-424960844,,Ping @zimmerle. Any thoughts on merging this in and tagging a new 2.9.x release?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1714,2018-03-20T18:37:33Z,2018-11-13T00:45:39Z,2018-11-13T00:56:53Z,MERGED,True,2,2,2,https://github.com/p0pr0ck5,Fix sanitizing JSON request bodies in native audit log format,2,"['RIP - Type - Feature', 'enhancement', '2.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1714,https://github.com/victorhora,5,https://github.com/SpiderLabs/ModSecurity/pull/1714#issuecomment-438087336,,Merged. Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1715,2018-03-21T12:03:33Z,2018-03-23T02:08:43Z,2018-03-23T02:08:43Z,CLOSED,False,6,5,2,https://github.com/defanator,Reverse logic of checking output in @inspectFile,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1715,https://github.com/defanator,1,https://github.com/SpiderLabs/ModSecurity/pull/1715,"This change makes @inspectFile in ModSecurity 3.x to operate in exact the same way as it operates in ModSecurity 2.x, so existing helper scripts like runav.pl [1] will work without any changes.
See the difference in the corresponding logic of existing code:
ModSecurity 2.x: https://github.com/SpiderLabs/ModSecurity/blob/v2/master/apache2/re_operators.c#L4069-L4074
libmodsecurity (ModSecurity 3.x): https://github.com/SpiderLabs/ModSecurity/blob/v3/master/src/operators/inspect_file.cc#L76-L78
(I would say that it could be better rather to check exit code than output, but for the sake of compatibility of existing setups the proposed solution will also work.)
[1] https://github.com/SpiderLabs/owasp-modsecurity-crs/blob/v3.0/master/util/av-scanning/runav.pl","This change makes @inspectFile in ModSecurity 3.x to operate in exact the same way as it operates in ModSecurity 2.x, so existing helper scripts like runav.pl [1] will work without any changes.
See the difference in the corresponding logic of existing code:
ModSecurity 2.x: https://github.com/SpiderLabs/ModSecurity/blob/v2/master/apache2/re_operators.c#L4069-L4074
libmodsecurity (ModSecurity 3.x): https://github.com/SpiderLabs/ModSecurity/blob/v3/master/src/operators/inspect_file.cc#L76-L78
(I would say that it could be better rather to check exit code than output, but for the sake of compatibility of existing setups the proposed solution will also work.)
[1] https://github.com/SpiderLabs/owasp-modsecurity-crs/blob/v3.0/master/util/av-scanning/runav.pl",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1715,2018-03-21T12:03:33Z,2018-03-23T02:08:43Z,2018-03-23T02:08:43Z,CLOSED,False,6,5,2,https://github.com/defanator,Reverse logic of checking output in @inspectFile,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1715,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1715#issuecomment-375516913,"This change makes @inspectFile in ModSecurity 3.x to operate in exact the same way as it operates in ModSecurity 2.x, so existing helper scripts like runav.pl [1] will work without any changes.
See the difference in the corresponding logic of existing code:
ModSecurity 2.x: https://github.com/SpiderLabs/ModSecurity/blob/v2/master/apache2/re_operators.c#L4069-L4074
libmodsecurity (ModSecurity 3.x): https://github.com/SpiderLabs/ModSecurity/blob/v3/master/src/operators/inspect_file.cc#L76-L78
(I would say that it could be better rather to check exit code than output, but for the sake of compatibility of existing setups the proposed solution will also work.)
[1] https://github.com/SpiderLabs/owasp-modsecurity-crs/blob/v3.0/master/util/av-scanning/runav.pl",Merged! thanks. 9505ca7,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1716,2018-03-21T15:18:53Z,2018-03-23T02:11:56Z,2018-03-23T02:11:57Z,CLOSED,False,3,1,1,https://github.com/defanator,"Include all prerequisites for ""make check"" into dist archive",1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1716,https://github.com/defanator,1,https://github.com/SpiderLabs/ModSecurity/pull/1716,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1716,2018-03-21T15:18:53Z,2018-03-23T02:11:56Z,2018-03-23T02:11:57Z,CLOSED,False,3,1,1,https://github.com/defanator,"Include all prerequisites for ""make check"" into dist archive",1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1716,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1716#issuecomment-375517493,,Merged! Thanks. ab3afb2,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1721,2018-03-25T16:39:00Z,2018-05-10T21:46:03Z,2018-05-10T21:56:08Z,CLOSED,False,1,1,1,https://github.com/padraigdoran,Fix spelling,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1721,https://github.com/padraigdoran,1,https://github.com/SpiderLabs/ModSecurity/pull/1721,"""reachers"" should be ""reaches""","""reachers"" should be ""reaches""",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1721,2018-03-25T16:39:00Z,2018-05-10T21:46:03Z,2018-05-10T21:56:08Z,CLOSED,False,1,1,1,https://github.com/padraigdoran,Fix spelling,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1721,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1721#issuecomment-388196055,"""reachers"" should be ""reaches""",Merged! Thanks.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1730,2018-04-04T13:57:25Z,2018-04-05T12:54:40Z,2018-04-05T12:54:50Z,CLOSED,False,3,1,1,https://github.com/defanator,Fix memory leak in Collections,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1730,https://github.com/defanator,1,https://github.com/SpiderLabs/ModSecurity/pull/1730,This closes #1729.,This closes #1729.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1730,2018-04-04T13:57:25Z,2018-04-05T12:54:40Z,2018-04-05T12:54:50Z,CLOSED,False,3,1,1,https://github.com/defanator,Fix memory leak in Collections,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1730,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1730#issuecomment-378925822,This closes #1729.,Merged! closed. Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1735,2018-04-09T20:38:39Z,2018-06-25T21:45:00Z,2018-06-26T16:25:37Z,CLOSED,False,20,10,1,https://github.com/p0pr0ck5,Optimize duplicate rule ID check,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1735,https://github.com/p0pr0ck5,1,https://github.com/SpiderLabs/ModSecurity/pull/1735,Replace an expotential search function with a stl set search.,Replace an expotential search function with a stl set search.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1735,2018-04-09T20:38:39Z,2018-06-25T21:45:00Z,2018-06-26T16:25:37Z,CLOSED,False,20,10,1,https://github.com/p0pr0ck5,Optimize duplicate rule ID check,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1735,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1735#issuecomment-384037255,Replace an expotential search function with a stl set search.,"As already commented on #1667, disable the check or make it faster does not fix the issue #1663, instead put it under the carpet. IMHO, the problem is a race condition related to the nginx worker life cycle.
This patch fix a symptom not the real problem. In a different setup (amount of rules, memory, vhosts, etc...) the problem is likely to appear again.
As this is the current most notice symptom for the worker life cycle problem, I am holding on the merge till we fix the main problem.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1735,2018-04-09T20:38:39Z,2018-06-25T21:45:00Z,2018-06-26T16:25:37Z,CLOSED,False,20,10,1,https://github.com/p0pr0ck5,Optimize duplicate rule ID check,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1735,https://github.com/p0pr0ck5,3,https://github.com/SpiderLabs/ModSecurity/pull/1735#issuecomment-384087007,Replace an expotential search function with a stl set search.,Updated the commit message to remove the reference to #1663. This may have tangential impact but we do not consider it a fix for the issue noted at this time.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1735,2018-04-09T20:38:39Z,2018-06-25T21:45:00Z,2018-06-26T16:25:37Z,CLOSED,False,20,10,1,https://github.com/p0pr0ck5,Optimize duplicate rule ID check,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1735,https://github.com/p0pr0ck5,4,https://github.com/SpiderLabs/ModSecurity/pull/1735#issuecomment-398814640,Replace an expotential search function with a stl set search.,"@zimmerle curious as to your thoughts here, is this still being considered for merge at all?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1735,2018-04-09T20:38:39Z,2018-06-25T21:45:00Z,2018-06-26T16:25:37Z,CLOSED,False,20,10,1,https://github.com/p0pr0ck5,Optimize duplicate rule ID check,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1735,https://github.com/zimmerle,5,https://github.com/SpiderLabs/ModSecurity/pull/1735#issuecomment-400102094,Replace an expotential search function with a stl set search.,"Hi @p0pr0ck5,
I am sorry for the delay with this review. I am afraid we won't be able to merge the patch as is. It took a while because I think you deserve to know in details why I am not accepting it, and I just had the chance to write about it today.
In a simple paragraph: The description of the patch doesn't seem strictly accurate, I'm failing to see an exponential problem (not in this case). Your patch effectively improved the speed  by creating a cache structure to easily find duplicate IDs, at the cost of memory usage which
is also computationally expensive, especially in the use case that we are aiming to target. Just to be clear, the usage of memory here will be allocated till the ModSecurity process finish.
One thing that we do agree with you is that there is space for improvements in this articular piece of code. But first let me go over the gory technical details to widen our audience.
The Problem Description
In the commit message there's a mention about the search function being exponential. Just so we're all on the same page, In Big-O notation something is exponential when the time to process increases exponentially by the amount of inputs. For instance, the Selection Sort which is O(n^2) in best, average and worst case. This is not the case of this ModSecurity function as it have a ""for"" inside a ""for"" with two different sets.
Exponential Search is also the name of a very popular search algorithm for infinity sets, which is actually O(log i) in average time complexity. I guess you are not referring to that either.
That is the theoretical part of the review, as in practice, it may lead to a exponential problem, Let's test that in the field. Fortunately, that is not the case either. I will explain: At this point I would like to introduce the test app called load.cc, it is meant to help us testing the numbers in practice. It could be used by anyone that also wants to help us during this process.
The load.cc app
The load.cc app stress the mechanism in question with (almost) zero interferences of other components, in order to give us better comparative results and how much improvement was really made.
The app is available here:
https://gist.github.com/zimmerle/e90054b7630099e7aceceb8f0431f754
It does mimic a use case when a giant rule set is loaded and folders and/or vhosts are merged with their rules with the intention of tuning the main rule set. All stressed with an abnormal amount of rules.
Checking if there is any exponential problem at all
Using the load.cc tool we can confirm that the merge/loading time is not actually
exponential, but linear. The image below highlight what is happening in our implementation.

Figure 1. Using load.cc to grab the timing to load the rule set.
The conclusion is very clear: there is no exponential problem. Not theoretical,
not practical. Yet let's continue to analyze the patch to understand what are the benefits of it and how it can be further improved.
Understanding the patch
There is a change in the function signature: instead of receiving the original
object it does receive the child one:
08f9a7f#diff-06c9e7fe9d6fb2c786762bf46bccad96L429
And here some variable renaming:
08f9a7f#diff-06c9e7fe9d6fb2c786762bf46bccad96L434
I believe the goal on both aforementioned changes is not improving the performance. Moving on... Here we have some an important logical change:
08f9a7f#diff-06c9e7fe9d6fb2c786762bf46bccad96L438
There is the replacement of one for loop with a std::find that loops on this new structure called m_ruleIds. The structure itself was declared here:
08f9a7f#diff-06c9e7fe9d6fb2c786762bf46bccad96R501
So, the patch effectively creates a caching structure that holds the data for a
faster look-up.
Is there a benefit to apply that patch?
There is a real benefit to apply this patch. It will speed up the rules loading process a little. Depending on the scenario, it could be as fast as 2x. However it does use memory in a non ideal shape, as it stores something in memory that is already in memory: the rule id.
So, let's read the patch again to understand the real need for this caching.
The problem is definitely this for on line 438:
08f9a7f#diff-06c9e7fe9d6fb2c786762bf46bccad96L438.
So, we thought that instead of creating a caching to persist for the existence of the process, why not to create a stack cache disposed by the end of this validation?
That was exactly what was done here:

  
    
      ModSecurity/headers/modsecurity/rules_properties.h
    
    
        Lines 433 to 464
      in
      65aa7ae
    
  
  
    

        
          
               for (int i = 0; i < modsecurity::Phases::NUMBER_OF_PHASES; i++) { 
        

        
          
                   std::vector<modsecurity::Rule *> *rules_to = to+i; 
        

        
          
                   std::vector<modsecurity::Rule *> *rules_from = from+i; 
        

        
          
                   // TODO: std::vector could be replaced with something more efficient. 
        

        
          
                   std::vector<int64_t> v; 
        

        
          
                   v.reserve(rules_to->size()); 
        

        
          
                   for (size_t z = 0; z < rules_to->size(); z++) { 
        

        
          
                       Rule *rule_ckc = rules_to->at(z); 
        

        
          
                       if (rule_ckc->m_secMarker == false) { 
        

        
          
                           continue; 
        

        
          
                       } 
        

        
          
                       v.push_back(rule_ckc->m_ruleId); 
        

        
          
                   } 
        

        
          
                   std::sort (v.begin(), v.end()); 
        

        
          
            
        

        
          
                   for (size_t j = 0; j < rules_from->size(); j++) { 
        

        
          
                       Rule *rule = rules_from->at(j); 
        

        
          
                       if (std::binary_search (v.begin(), v.end(), rule->m_ruleId)) { 
        

        
          
                           if (err != NULL) { 
        

        
          
                               *err << ""Rule id: "" \ 
        

        
          
                                   << std::to_string(rule->m_ruleId) \ 
        

        
          
                                   << "" is duplicated"" << std::endl; 
        

        
          
                           } 
        

        
          
                           return -1; 
        

        
          
                       } 
        

        
          
                       amount_of_rules++; 
        

        
          
                       rules_to->push_back(rule); 
        

        
          
                       rule->refCountIncrease(); 
        

        
          
                   } 
        

        
          
               } 
        

        
          
               return amount_of_rules; 
        

        
          
           } 
        
    
  


Notice that it is not optimal, it is using std::binary_search in a std::vector, in reality we just need to have a simple array and store the integers for a fast check, but i guess it is safe to live with it now. The charts below illustrates in details all the concerns that were raised during this study.

Figure 2. Loading time, first 100 merges.

Figure 3. Memory usage.
Having said all that, we hereby thanks @p0pr0ck5 for the work invested in this patch, for bringing this issue to light allowing us to invest more time improving it. Therefore we are proceeding to close it without accepting fully for the reasons pointed out above. Instead, we've added the modifications linked here to the master branch. We're open to any question or concerns that anyone may have.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1735,2018-04-09T20:38:39Z,2018-06-25T21:45:00Z,2018-06-26T16:25:37Z,CLOSED,False,20,10,1,https://github.com/p0pr0ck5,Optimize duplicate rule ID check,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1735,https://github.com/p0pr0ck5,6,https://github.com/SpiderLabs/ModSecurity/pull/1735#issuecomment-400376165,Replace an expotential search function with a stl set search.,"Hey @zimmerle,
Thanks for the detailed write up. However I wanted to highlight something from your findings that does not correctly demonstrate the originally reported behavior (within the C API, and thus the Nginx connector). I found significantly different results when using a C harness instead of a C++ program to load many rulesets as laid out here: https://gist.github.com/p0pr0ck5/c5045eb3b6107917db771be3ef1df08b. The C harness shows behavior that is indeed exponential (please bear the very basic mock/graph):
$ for i in 100 200 300 400 500 600 700 800 900 1000; do ./load-c $i; done
took 670.073975
took 2194.941895
took 5914.875000
took 15941.778320
took 31686.080078
took 54498.371094
took 84973.710938
took 125235.476562
took 178898.796875


I believe the reason for this is that your mock creates a new Rules object, and appends to an existing Rules:
        modsecurity::Rules *a = new modsecurity::Rules();
         if (a->loadFromUri(fn(i).c_str()) < 0) {
            std::cout << ""Problems loading the rules..."" << std::endl;
            std::cout << a->m_parserError.str() << std::endl;
            return -1;
        }
        rules.push_back(a);

This is not the same behavior as leveraged by the C API, which implements a single Rules ptr: https://github.com/SpiderLabs/ModSecurity/blob/v3/master/src/rules.cc#L340-L347
Thus your benchmark doesn't demonstrate an exponential time because that behavior in question is not exponential. :) What is exponential (or was, prior to 65aa7ae5e2686caf7c530c1cae08bcfcfb1f15c8) was load many rules over an over into a single Rules.
What's more, your example could not correctly detect a duplicate ID between two different rulesets, only duplicate IDs loaded within the same call to loadFromUri. :)
This is all a moot point now that the behavior has been modified, but I did want to bring to light the disparity between the behavior seen within Nginx (originally reported in #1663), and the test harness you wrote. Thanks!",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1737,2018-04-10T16:03:47Z,2018-04-24T18:27:02Z,2018-04-24T19:23:59Z,CLOSED,False,2,2,2,https://github.com/p0pr0ck5,Define m_secmarker_skipped as an integer type,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1737,https://github.com/p0pr0ck5,1,https://github.com/SpiderLabs/ModSecurity/pull/1737,"There's no reason to treat this this as a double, since it represents a human-readable data value that is only meaningful as an integer. In doing so we write cleaner audit logs and save a small amount of space.","There's no reason to treat this this as a double, since it represents a human-readable data value that is only meaningful as an integer. In doing so we write cleaner audit logs and save a small amount of space.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1737,2018-04-10T16:03:47Z,2018-04-24T18:27:02Z,2018-04-24T19:23:59Z,CLOSED,False,2,2,2,https://github.com/p0pr0ck5,Define m_secmarker_skipped as an integer type,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1737,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1737#issuecomment-384033361,"There's no reason to treat this this as a double, since it represents a human-readable data value that is only meaningful as an integer. In doing so we write cleaner audit logs and save a small amount of space.","Hi @p0pr0ck5,
Thanks for the patch. Indeed no need do show the decimal part to the user. However, I am afraid this patch will not write a cleaner audit logs or save any considerable amount of space as this specific variable is only used in the debug logs.
As a matter of fact, as of 6f92c89 this variable is complete disable if ModSecurity is compiled without the debug logs.
m_secmarker_skipped Life Cycle


declared here:

  
    
      ModSecurity/headers/modsecurity/rules.h
    
    
         Line 83
      in
      a1b6cce
    
  
  
    

        
          
           uint8_t m_secmarker_skipped; 
        
    
  




initialized here:

  
    
      ModSecurity/headers/modsecurity/rules.h
    
    
         Line 51
      in
      a1b6cce
    
  
  
    

        
          
           m_secmarker_skipped(0) { } 
        
    
  



  
    
      ModSecurity/headers/modsecurity/rules.h
    
    
         Line 57
      in
      a1b6cce
    
  
  
    

        
          
           m_secmarker_skipped(0) { } 
        
    
  




incremented here:

  
    
      ModSecurity/src/rules.cc
    
    
         Line 185
      in
      a1b6cce
    
  
  
    

        
          
           m_secmarker_skipped++; 
        
    
  




displayed here:

  
    
      ModSecurity/src/rules.cc
    
    
        Lines 188 to 189
      in
      a1b6cce
    
  
  
    

        
          
           debug(4, ""Out of a SecMarker after skip "" \ 
        

        
          
               + std::to_string(m_secmarker_skipped) + "" rules.""); 
        
    
  




reset here:

  
    
      ModSecurity/src/rules.cc
    
    
         Line 191
      in
      a1b6cce
    
  
  
    

        
          
           m_secmarker_skipped = 0; 
        
    
  




As you can see, all those references are related to the debug logs. Let me know if you have any further question.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1737,2018-04-10T16:03:47Z,2018-04-24T18:27:02Z,2018-04-24T19:23:59Z,CLOSED,False,2,2,2,https://github.com/p0pr0ck5,Define m_secmarker_skipped as an integer type,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1737,https://github.com/p0pr0ck5,3,https://github.com/SpiderLabs/ModSecurity/pull/1737#issuecomment-384050272,"There's no reason to treat this this as a double, since it represents a human-readable data value that is only meaningful as an integer. In doing so we write cleaner audit logs and save a small amount of space.","Whups, I had meant to say debug logs, not audit logs. My apologies.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1738,2018-04-11T00:12:31Z,2018-04-24T12:19:43Z,2018-04-24T12:19:43Z,CLOSED,False,7410,7478,5,https://github.com/victorhora,Fix STATUS var parsing and accept STATUS_LINE var for v2 backward compatibility,1,"['enhancement', 'RIP - libmodsecurity', 'RIP - libmodsec - missing variables', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1738,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1738,"STATUS variable seemed to expecting an invalid parameter.
STATUS_LINE is now accepted by the parser to allow backwards compatibility with users migrating from v2 to v3.
The variable is referring to the implementation of ::Status (m_variableResponseStatus) to avoid having the same data in memory.","STATUS variable seemed to expecting an invalid parameter.
STATUS_LINE is now accepted by the parser to allow backwards compatibility with users migrating from v2 to v3.
The variable is referring to the implementation of ::Status (m_variableResponseStatus) to avoid having the same data in memory.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1738,2018-04-11T00:12:31Z,2018-04-24T12:19:43Z,2018-04-24T12:19:43Z,CLOSED,False,7410,7478,5,https://github.com/victorhora,Fix STATUS var parsing and accept STATUS_LINE var for v2 backward compatibility,1,"['enhancement', 'RIP - libmodsecurity', 'RIP - libmodsec - missing variables', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1738,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1738#issuecomment-383909640,"STATUS variable seemed to expecting an invalid parameter.
STATUS_LINE is now accepted by the parser to allow backwards compatibility with users migrating from v2 to v3.
The variable is referring to the implementation of ::Status (m_variableResponseStatus) to avoid having the same data in memory.",Merged! thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1739,2018-04-11T22:40:56Z,2018-04-24T01:41:46Z,2018-04-24T01:41:46Z,CLOSED,False,2,1,2,https://github.com/p0pr0ck5,Fix broken @detectxss operator regression test,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1739,https://github.com/p0pr0ck5,1,https://github.com/SpiderLabs/ModSecurity/pull/1739,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1739,2018-04-11T22:40:56Z,2018-04-24T01:41:46Z,2018-04-24T01:41:46Z,CLOSED,False,2,1,2,https://github.com/p0pr0ck5,Fix broken @detectxss operator regression test,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1739,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1739#issuecomment-383775683,,Merged. Thanks.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1740,2018-04-12T19:28:38Z,2018-06-12T16:57:35Z,2018-06-12T17:25:42Z,CLOSED,False,8,220,3,https://github.com/p0pr0ck5,Execute all tests with 'make check',1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1740,https://github.com/p0pr0ck5,1,https://github.com/SpiderLabs/ModSecurity/pull/1740,Replace a hard-written list of test files in Makefile.am (that is missing a number of tests) with a list generated via bootstrap build.sh.,Replace a hard-written list of test files in Makefile.am (that is missing a number of tests) with a list generated via bootstrap build.sh.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1740,2018-04-12T19:28:38Z,2018-06-12T16:57:35Z,2018-06-12T17:25:42Z,CLOSED,False,8,220,3,https://github.com/p0pr0ck5,Execute all tests with 'make check',1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1740,https://github.com/p0pr0ck5,2,https://github.com/SpiderLabs/ModSecurity/pull/1740#issuecomment-380918571,Replace a hard-written list of test files in Makefile.am (that is missing a number of tests) with a list generated via bootstrap build.sh.,"Travis will fail until #1739 is merged (because of the broken test), so these two PRs likely need to be manually merged together.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1740,2018-04-12T19:28:38Z,2018-06-12T16:57:35Z,2018-06-12T17:25:42Z,CLOSED,False,8,220,3,https://github.com/p0pr0ck5,Execute all tests with 'make check',1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1740,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1740#issuecomment-383984868,Replace a hard-written list of test files in Makefile.am (that is missing a number of tests) with a list generated via bootstrap build.sh.,General comment: this is under review waiting for the input of @p0pr0ck5.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1740,2018-04-12T19:28:38Z,2018-06-12T16:57:35Z,2018-06-12T17:25:42Z,CLOSED,False,8,220,3,https://github.com/p0pr0ck5,Execute all tests with 'make check',1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1740,https://github.com/p0pr0ck5,4,https://github.com/SpiderLabs/ModSecurity/pull/1740#issuecomment-383985512,Replace a hard-written list of test files in Makefile.am (that is missing a number of tests) with a list generated via bootstrap build.sh.,"Thanks @zimmerle, let me clean this up following the merge of #1739.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1740,2018-04-12T19:28:38Z,2018-06-12T16:57:35Z,2018-06-12T17:25:42Z,CLOSED,False,8,220,3,https://github.com/p0pr0ck5,Execute all tests with 'make check',1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1740,https://github.com/p0pr0ck5,5,https://github.com/SpiderLabs/ModSecurity/pull/1740#issuecomment-383996532,Replace a hard-written list of test files in Makefile.am (that is missing a number of tests) with a list generated via bootstrap build.sh.,@zimmerle this is rebased and ready for review.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1740,2018-04-12T19:28:38Z,2018-06-12T16:57:35Z,2018-06-12T17:25:42Z,CLOSED,False,8,220,3,https://github.com/p0pr0ck5,Execute all tests with 'make check',1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1740,https://github.com/zimmerle,6,https://github.com/SpiderLabs/ModSecurity/pull/1740#issuecomment-386391788,Replace a hard-written list of test files in Makefile.am (that is missing a number of tests) with a list generated via bootstrap build.sh.,Did you addressed my comment in the review session ?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1740,2018-04-12T19:28:38Z,2018-06-12T16:57:35Z,2018-06-12T17:25:42Z,CLOSED,False,8,220,3,https://github.com/p0pr0ck5,Execute all tests with 'make check',1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1740,https://github.com/p0pr0ck5,7,https://github.com/SpiderLabs/ModSecurity/pull/1740#issuecomment-386398093,Replace a hard-written list of test files in Makefile.am (that is missing a number of tests) with a list generated via bootstrap build.sh.,"@zimmerle I don't understand the question? We didn't review this together, AFAIK?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1740,2018-04-12T19:28:38Z,2018-06-12T16:57:35Z,2018-06-12T17:25:42Z,CLOSED,False,8,220,3,https://github.com/p0pr0ck5,Execute all tests with 'make check',1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1740,https://github.com/zimmerle,8,https://github.com/SpiderLabs/ModSecurity/pull/1740#issuecomment-388653320,Replace a hard-written list of test files in Makefile.am (that is missing a number of tests) with a list generated via bootstrap build.sh.,@p0pr0ck5 It seems like the review was on draft. Updated now.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1740,2018-04-12T19:28:38Z,2018-06-12T16:57:35Z,2018-06-12T17:25:42Z,CLOSED,False,8,220,3,https://github.com/p0pr0ck5,Execute all tests with 'make check',1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1740,https://github.com/p0pr0ck5,9,https://github.com/SpiderLabs/ModSecurity/pull/1740#issuecomment-391834020,Replace a hard-written list of test files in Makefile.am (that is missing a number of tests) with a list generated via bootstrap build.sh.,@zimmerle what can we do to help push this along? It would be great to have consistent test coverage as part of the Makefile and Travis CI integrations.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1740,2018-04-12T19:28:38Z,2018-06-12T16:57:35Z,2018-06-12T17:25:42Z,CLOSED,False,8,220,3,https://github.com/p0pr0ck5,Execute all tests with 'make check',1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1740,https://github.com/zimmerle,10,https://github.com/SpiderLabs/ModSecurity/pull/1740#issuecomment-396659437,Replace a hard-written list of test files in Makefile.am (that is missing a number of tests) with a list generated via bootstrap build.sh.,"Hi @p0pr0ck5,
I am failing to find the changes in your pull request. Did you published that somewhere else? Are you still interested to help on that?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1740,2018-04-12T19:28:38Z,2018-06-12T16:57:35Z,2018-06-12T17:25:42Z,CLOSED,False,8,220,3,https://github.com/p0pr0ck5,Execute all tests with 'make check',1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1740,https://github.com/p0pr0ck5,11,https://github.com/SpiderLabs/ModSecurity/pull/1740#issuecomment-396660161,Replace a hard-written list of test files in Makefile.am (that is missing a number of tests) with a list generated via bootstrap build.sh.,"@zimmerle I'm still confused about what specifically you want to see in this PR/you object to. As I noted, Putting the Bash into the Makefile.am, as it is in https://github.com/SpiderLabs/ModSecurity/blob/v3/master/Makefile.am#L87, doesn't work because it generates an invalid Makefile. Hence the reason for my approach.
What changes do you want to see in this PR? I will make them so we can merge this in and have consistent test coverage. Thanks :)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1740,2018-04-12T19:28:38Z,2018-06-12T16:57:35Z,2018-06-12T17:25:42Z,CLOSED,False,8,220,3,https://github.com/p0pr0ck5,Execute all tests with 'make check',1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1740,https://github.com/zimmerle,12,https://github.com/SpiderLabs/ModSecurity/pull/1740#issuecomment-396660417,Replace a hard-written list of test files in Makefile.am (that is missing a number of tests) with a list generated via bootstrap build.sh.,As of 1527f4e I can confirm that 100% of the tests are running. If you see any inconsistency please point us towards it.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1740,2018-04-12T19:28:38Z,2018-06-12T16:57:35Z,2018-06-12T17:25:42Z,CLOSED,False,8,220,3,https://github.com/p0pr0ck5,Execute all tests with 'make check',1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1740,https://github.com/p0pr0ck5,13,https://github.com/SpiderLabs/ModSecurity/pull/1740#issuecomment-396661119,Replace a hard-written list of test files in Makefile.am (that is missing a number of tests) with a list generated via bootstrap build.sh.,"That doesn't help when adding new test suites, as the author might forget to add them (as has clearly been done many times resulting in the need for 1527f4e).
The idea is to avoid forcing the author to remember to do a manual step when it could be handled automatically for them. It seems like you're averse to this though, so I won't push on this farther. Thanks.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1740,2018-04-12T19:28:38Z,2018-06-12T16:57:35Z,2018-06-12T17:25:42Z,CLOSED,False,8,220,3,https://github.com/p0pr0ck5,Execute all tests with 'make check',1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1740,https://github.com/zimmerle,14,https://github.com/SpiderLabs/ModSecurity/pull/1740#issuecomment-396669491,Replace a hard-written list of test files in Makefile.am (that is missing a number of tests) with a list generated via bootstrap build.sh.,"I see the value of this as a feature. But, part of my responsibility reviewing those pull requests is to make sure that your contribution fits to 100% of the users in the best way that we can. No point to have a feature that is not helping. Your patch is putting 220 files in a single line (about 14276 characters) making it very hard to be read. A file that is likely to be manipulated manually during the development, also probably to be manipulated by packagers.
I think this feature is important, I just think that there is a better way to implement it by putting a file per line. Apparently you agreed. I've just asked for the code, which I failed to find.
Just to give an example of why it is bad to have all those files in a single line, the file test/test-cases/data/GeoIP2-City-Test-source.json is listed as a test case and it is not. Not easy to tell that it is there.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1744,2018-04-18T08:34:58Z,2018-04-24T01:10:04Z,2018-04-24T01:10:04Z,CLOSED,False,82,2,4,https://github.com/defanator,Fix utils::string::ssplit() to handle delimiter in the end of string,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1744,https://github.com/defanator,1,https://github.com/SpiderLabs/ModSecurity/pull/1744,"This closes #1743.
Also, just for the record: the action-tnf-base64.json test includes both encoding and decoding tests. Decoding part was modified in this PR to match valid string without leading \n. Encoding part still works due to the fact that regression_test.cc adds extra \n to every constructed body:
https://github.com/SpiderLabs/ModSecurity/blob/v3/master/test/regression/regression_test.cc#L51
I suppose changing this behavior will require adjustments in other tests as well, and it is not directly related to this PR and linked issue, so I'd leave it as is for now.","This closes #1743.
Also, just for the record: the action-tnf-base64.json test includes both encoding and decoding tests. Decoding part was modified in this PR to match valid string without leading \n. Encoding part still works due to the fact that regression_test.cc adds extra \n to every constructed body:
https://github.com/SpiderLabs/ModSecurity/blob/v3/master/test/regression/regression_test.cc#L51
I suppose changing this behavior will require adjustments in other tests as well, and it is not directly related to this PR and linked issue, so I'd leave it as is for now.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1744,2018-04-18T08:34:58Z,2018-04-24T01:10:04Z,2018-04-24T01:10:04Z,CLOSED,False,82,2,4,https://github.com/defanator,Fix utils::string::ssplit() to handle delimiter in the end of string,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1744,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1744#issuecomment-383770577,"This closes #1743.
Also, just for the record: the action-tnf-base64.json test includes both encoding and decoding tests. Decoding part was modified in this PR to match valid string without leading \n. Encoding part still works due to the fact that regression_test.cc adds extra \n to every constructed body:
https://github.com/SpiderLabs/ModSecurity/blob/v3/master/test/regression/regression_test.cc#L51
I suppose changing this behavior will require adjustments in other tests as well, and it is not directly related to this PR and linked issue, so I'd leave it as is for now.",Merged! Thanks.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1747,2018-04-19T20:03:02Z,2018-06-12T04:38:27Z,2018-06-13T08:59:48Z,CLOSED,False,802,1,2,https://github.com/airween,Fixed false positive MULTIPART_UNMATCHED_BOUNDARY errors,3,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1747,https://github.com/airween,1,https://github.com/SpiderLabs/ModSecurity/pull/1747,"Couple of months ago I've posted a report to Owasp-modsecurity-core-rule-set list, where I signed that the file upload does not works:
http://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/2017-August/002458.html
The problem came with a PEM encoded file, that's why I called my branch uploadpem.
Now I could focused to the problem, and looks like the multipart handler contains a bug: if the body of multipart data contains a line at the begin with ""--"", libmodsecurity interprets it as boundary - it doesn't matter what's that: a PEM format file, eg. X509 CERT (-----BEGIN CERTIFICATE-----), traditional signature (--\n), or any other.
I've made a JSON test for the regression-test, which contains some ""real"" example:
https://gist.githubusercontent.com/airween/522eaebf38510c025961f4810614949b/raw/2021642dcdcede9a2a572633868a65b8ecd4b522/request-body-parser-multipart-with-hypen.json
Before you merge (if you will :)), then you can check it: the current libmodsecurity (v3/master branch) has failed with most of that.
This patch is very simple: I just modified the source, that if there is a matched boundary least which declared in header, and there is a final (matched) boundary, then it doesn't matter, what is the content. I've checked the RFC (1341), looks like this is the right way.
I've found some mailing list message related to this topic, and some Gihub issue, but there wasn't any solution. Hope that you'll merge accept and merge this, and now all problems will go away...","Couple of months ago I've posted a report to Owasp-modsecurity-core-rule-set list, where I signed that the file upload does not works:
http://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/2017-August/002458.html
The problem came with a PEM encoded file, that's why I called my branch uploadpem.
Now I could focused to the problem, and looks like the multipart handler contains a bug: if the body of multipart data contains a line at the begin with ""--"", libmodsecurity interprets it as boundary - it doesn't matter what's that: a PEM format file, eg. X509 CERT (-----BEGIN CERTIFICATE-----), traditional signature (--\n), or any other.
I've made a JSON test for the regression-test, which contains some ""real"" example:
https://gist.githubusercontent.com/airween/522eaebf38510c025961f4810614949b/raw/2021642dcdcede9a2a572633868a65b8ecd4b522/request-body-parser-multipart-with-hypen.json
Before you merge (if you will :)), then you can check it: the current libmodsecurity (v3/master branch) has failed with most of that.
This patch is very simple: I just modified the source, that if there is a matched boundary least which declared in header, and there is a final (matched) boundary, then it doesn't matter, what is the content. I've checked the RFC (1341), looks like this is the right way.
I've found some mailing list message related to this topic, and some Gihub issue, but there wasn't any solution. Hope that you'll merge accept and merge this, and now all problems will go away...",True,"{'HOORAY': ['https://github.com/dune73', 'https://github.com/zimmerle', 'https://github.com/victorhora'], 'THUMBS_UP': ['https://github.com/micha137', 'https://github.com/lifeforms', 'https://github.com/zimmerle', 'https://github.com/kawikao', 'https://github.com/blastart']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1747,2018-04-19T20:03:02Z,2018-06-12T04:38:27Z,2018-06-13T08:59:48Z,CLOSED,False,802,1,2,https://github.com/airween,Fixed false positive MULTIPART_UNMATCHED_BOUNDARY errors,3,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1747,https://github.com/lifeforms,2,https://github.com/SpiderLabs/ModSecurity/pull/1747#issuecomment-383074396,"Couple of months ago I've posted a report to Owasp-modsecurity-core-rule-set list, where I signed that the file upload does not works:
http://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/2017-August/002458.html
The problem came with a PEM encoded file, that's why I called my branch uploadpem.
Now I could focused to the problem, and looks like the multipart handler contains a bug: if the body of multipart data contains a line at the begin with ""--"", libmodsecurity interprets it as boundary - it doesn't matter what's that: a PEM format file, eg. X509 CERT (-----BEGIN CERTIFICATE-----), traditional signature (--\n), or any other.
I've made a JSON test for the regression-test, which contains some ""real"" example:
https://gist.githubusercontent.com/airween/522eaebf38510c025961f4810614949b/raw/2021642dcdcede9a2a572633868a65b8ecd4b522/request-body-parser-multipart-with-hypen.json
Before you merge (if you will :)), then you can check it: the current libmodsecurity (v3/master branch) has failed with most of that.
This patch is very simple: I just modified the source, that if there is a matched boundary least which declared in header, and there is a final (matched) boundary, then it doesn't matter, what is the content. I've checked the RFC (1341), looks like this is the right way.
I've found some mailing list message related to this topic, and some Gihub issue, but there wasn't any solution. Hope that you'll merge accept and merge this, and now all problems will go away...","Very cool. This validation can be a little trigger happy, I'm sure many users will appreciate this!",True,"{'THUMBS_UP': ['https://github.com/airween', 'https://github.com/zimmerle', 'https://github.com/kawikao', 'https://github.com/anush-cr', 'https://github.com/victorhora']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1747,2018-04-19T20:03:02Z,2018-06-12T04:38:27Z,2018-06-13T08:59:48Z,CLOSED,False,802,1,2,https://github.com/airween,Fixed false positive MULTIPART_UNMATCHED_BOUNDARY errors,3,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1747,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1747#issuecomment-392590617,"Couple of months ago I've posted a report to Owasp-modsecurity-core-rule-set list, where I signed that the file upload does not works:
http://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/2017-August/002458.html
The problem came with a PEM encoded file, that's why I called my branch uploadpem.
Now I could focused to the problem, and looks like the multipart handler contains a bug: if the body of multipart data contains a line at the begin with ""--"", libmodsecurity interprets it as boundary - it doesn't matter what's that: a PEM format file, eg. X509 CERT (-----BEGIN CERTIFICATE-----), traditional signature (--\n), or any other.
I've made a JSON test for the regression-test, which contains some ""real"" example:
https://gist.githubusercontent.com/airween/522eaebf38510c025961f4810614949b/raw/2021642dcdcede9a2a572633868a65b8ecd4b522/request-body-parser-multipart-with-hypen.json
Before you merge (if you will :)), then you can check it: the current libmodsecurity (v3/master branch) has failed with most of that.
This patch is very simple: I just modified the source, that if there is a matched boundary least which declared in header, and there is a final (matched) boundary, then it doesn't matter, what is the content. I've checked the RFC (1341), looks like this is the right way.
I've found some mailing list message related to this topic, and some Gihub issue, but there wasn't any solution. Hope that you'll merge accept and merge this, and now all problems will go away...","Hi,
That is indeed a very interesting discussion. This specific variable is documented here:

https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual-%28v2.x%29#multipart_unmatched_boundary

The idea of the variable was to flag the existence of something that looks like a boundary. That was made to avoid the scenario that a forgiven parser may interpret the data differently from the specifications leading the data to bypass without ModSecurity inspection. Therefore leading to an evasion. I am not sure if the proposed fix lead to the same level of detection that we have today. Although I complete agree that the variable is currently being set without good discretion.
I had something else in mind that may avoid the unnecessary raise of the flag, yet, give same level of protection. The idea is to check if a given data - which looks like a boundary - was found twice in a block. If so, it sets to ""1"" the MULTIPART_UNMATCHED_BOUNDARY otherwise it won't bother. This will solve the PEM encoded upload an all the cases proposed in the original patch test case.
For the reference:
https://github.com/SpiderLabs/ModSecurity/tree/v3/dev/suggestion_1747
What do you thing about it?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1747,2018-04-19T20:03:02Z,2018-06-12T04:38:27Z,2018-06-13T08:59:48Z,CLOSED,False,802,1,2,https://github.com/airween,Fixed false positive MULTIPART_UNMATCHED_BOUNDARY errors,3,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1747,https://github.com/airween,4,https://github.com/SpiderLabs/ModSecurity/pull/1747#issuecomment-392595794,"Couple of months ago I've posted a report to Owasp-modsecurity-core-rule-set list, where I signed that the file upload does not works:
http://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/2017-August/002458.html
The problem came with a PEM encoded file, that's why I called my branch uploadpem.
Now I could focused to the problem, and looks like the multipart handler contains a bug: if the body of multipart data contains a line at the begin with ""--"", libmodsecurity interprets it as boundary - it doesn't matter what's that: a PEM format file, eg. X509 CERT (-----BEGIN CERTIFICATE-----), traditional signature (--\n), or any other.
I've made a JSON test for the regression-test, which contains some ""real"" example:
https://gist.githubusercontent.com/airween/522eaebf38510c025961f4810614949b/raw/2021642dcdcede9a2a572633868a65b8ecd4b522/request-body-parser-multipart-with-hypen.json
Before you merge (if you will :)), then you can check it: the current libmodsecurity (v3/master branch) has failed with most of that.
This patch is very simple: I just modified the source, that if there is a matched boundary least which declared in header, and there is a final (matched) boundary, then it doesn't matter, what is the content. I've checked the RFC (1341), looks like this is the right way.
I've found some mailing list message related to this topic, and some Gihub issue, but there wasn't any solution. Hope that you'll merge accept and merge this, and now all problems will go away...","Hi Felipe,
thanks for the feedback - I've planned to ask you, what's your opinion about this fix. After the long delay, I thought that will not acceptable in 100% - but it's no problem :).
Note, that the specification of this variable is clear, and I think that's very useful - but only if it works as well. As I signed in the lead of this fix, I've run this problem at my webmail instance - I could't upload any PEM format text, but also couldn't any plain text, which contains a simple ""--"" started line(s) (eg. copy a mail text with the signature).
Now I don't see, how breaks this fix the detection level - I think the logic of parser didn't changed. If there is any unmatched boundary, the variable will be set. And - as you can see at the regression test case - the reference boundary value comes from the multipart header. This means, that there must be three equal boundary in a multipart part: first in the header, second in the open boundary tag, and finally the close boundary tag. If any component missing, the variable will set.
Anyway, I was also prepared with Plan B :). I can modify this fix like this:

if there isn't any multipart, or all boundary is right, variable set to 0
if there are any unmatched, then value set to 1
BUT if the unmatched is a PEM header/footer, AND all there components exists, variable set to 2

With this logic, only need to modify the config from ""!@eq 0"" to ""@eq 1"", or ""@eq 2"" and user can check more state.
I'll see your suggestion as soon, but I need some time to make the checks.
Thanks again,
a.",True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1747,2018-04-19T20:03:02Z,2018-06-12T04:38:27Z,2018-06-13T08:59:48Z,CLOSED,False,802,1,2,https://github.com/airween,Fixed false positive MULTIPART_UNMATCHED_BOUNDARY errors,3,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1747,https://github.com/zimmerle,5,https://github.com/SpiderLabs/ModSecurity/pull/1747#issuecomment-392598771,"Couple of months ago I've posted a report to Owasp-modsecurity-core-rule-set list, where I signed that the file upload does not works:
http://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/2017-August/002458.html
The problem came with a PEM encoded file, that's why I called my branch uploadpem.
Now I could focused to the problem, and looks like the multipart handler contains a bug: if the body of multipart data contains a line at the begin with ""--"", libmodsecurity interprets it as boundary - it doesn't matter what's that: a PEM format file, eg. X509 CERT (-----BEGIN CERTIFICATE-----), traditional signature (--\n), or any other.
I've made a JSON test for the regression-test, which contains some ""real"" example:
https://gist.githubusercontent.com/airween/522eaebf38510c025961f4810614949b/raw/2021642dcdcede9a2a572633868a65b8ecd4b522/request-body-parser-multipart-with-hypen.json
Before you merge (if you will :)), then you can check it: the current libmodsecurity (v3/master branch) has failed with most of that.
This patch is very simple: I just modified the source, that if there is a matched boundary least which declared in header, and there is a final (matched) boundary, then it doesn't matter, what is the content. I've checked the RFC (1341), looks like this is the right way.
I've found some mailing list message related to this topic, and some Gihub issue, but there wasn't any solution. Hope that you'll merge accept and merge this, and now all problems will go away...",@airween  Just opening the subject for discussion :) Good ideas came out from discussions like this :),True,{'THUMBS_UP': ['https://github.com/airween']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1747,2018-04-19T20:03:02Z,2018-06-12T04:38:27Z,2018-06-13T08:59:48Z,CLOSED,False,802,1,2,https://github.com/airween,Fixed false positive MULTIPART_UNMATCHED_BOUNDARY errors,3,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1747,https://github.com/airween,6,https://github.com/SpiderLabs/ModSecurity/pull/1747#issuecomment-392604250,"Couple of months ago I've posted a report to Owasp-modsecurity-core-rule-set list, where I signed that the file upload does not works:
http://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/2017-August/002458.html
The problem came with a PEM encoded file, that's why I called my branch uploadpem.
Now I could focused to the problem, and looks like the multipart handler contains a bug: if the body of multipart data contains a line at the begin with ""--"", libmodsecurity interprets it as boundary - it doesn't matter what's that: a PEM format file, eg. X509 CERT (-----BEGIN CERTIFICATE-----), traditional signature (--\n), or any other.
I've made a JSON test for the regression-test, which contains some ""real"" example:
https://gist.githubusercontent.com/airween/522eaebf38510c025961f4810614949b/raw/2021642dcdcede9a2a572633868a65b8ecd4b522/request-body-parser-multipart-with-hypen.json
Before you merge (if you will :)), then you can check it: the current libmodsecurity (v3/master branch) has failed with most of that.
This patch is very simple: I just modified the source, that if there is a matched boundary least which declared in header, and there is a final (matched) boundary, then it doesn't matter, what is the content. I've checked the RFC (1341), looks like this is the right way.
I've found some mailing list message related to this topic, and some Gihub issue, but there wasn't any solution. Hope that you'll merge accept and merge this, and now all problems will go away...","Sorry to ask, but what do you think about it: ""just opening the subject for discussion""?
I'm not a practical Github user :)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1747,2018-04-19T20:03:02Z,2018-06-12T04:38:27Z,2018-06-13T08:59:48Z,CLOSED,False,802,1,2,https://github.com/airween,Fixed false positive MULTIPART_UNMATCHED_BOUNDARY errors,3,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1747,https://github.com/airween,7,https://github.com/SpiderLabs/ModSecurity/pull/1747#issuecomment-394339786,"Couple of months ago I've posted a report to Owasp-modsecurity-core-rule-set list, where I signed that the file upload does not works:
http://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/2017-August/002458.html
The problem came with a PEM encoded file, that's why I called my branch uploadpem.
Now I could focused to the problem, and looks like the multipart handler contains a bug: if the body of multipart data contains a line at the begin with ""--"", libmodsecurity interprets it as boundary - it doesn't matter what's that: a PEM format file, eg. X509 CERT (-----BEGIN CERTIFICATE-----), traditional signature (--\n), or any other.
I've made a JSON test for the regression-test, which contains some ""real"" example:
https://gist.githubusercontent.com/airween/522eaebf38510c025961f4810614949b/raw/2021642dcdcede9a2a572633868a65b8ecd4b522/request-body-parser-multipart-with-hypen.json
Before you merge (if you will :)), then you can check it: the current libmodsecurity (v3/master branch) has failed with most of that.
This patch is very simple: I just modified the source, that if there is a matched boundary least which declared in header, and there is a final (matched) boundary, then it doesn't matter, what is the content. I've checked the RFC (1341), looks like this is the right way.
I've found some mailing list message related to this topic, and some Gihub issue, but there wasn't any solution. Hope that you'll merge accept and merge this, and now all problems will go away...","Hi Felipe,
sorry to tell you, but I'm afraid the v3/dev/suggestion_1747 solution isn't a good choice. I've added the new tests to that branch (see PR #1792), please take a look that.
Especially these two test cases:
https://github.com/airween/ModSecurity/blob/92ab96d9618ab034e650535cb5f9353ac377a1de/test/test-cases/regression/request-body-parser-multipart.json#L2898
https://github.com/airween/ModSecurity/blob/92ab96d9618ab034e650535cb5f9353ac377a1de/test/test-cases/regression/request-body-parser-multipart.json#L2776
In first case, you can see a fully valid HTTP multipart request. Your solution is still blocking this request, because - as you wrote - if a boundary occurs twice or more at least, then it interprets as attack. I think that's not a solution to prevent the false positive MULTIPART_UNMATCHED_BOUNDARY errors :).
The second test is a bigger problem - there is a fully invalid request, but the ModSecurity now allows it. As you can see, the lead boundary of multipart differs from the reference. That would be interprets as ""Ignoring data before first boundary"", but there isn't first boundary... I think that's a very critical issue.
So, I've modified my patch - now if there is one boundary at least (which equals with the reference), AND there is the finaly boundary (which also equals with reference boundary), the flag will changed to ""2"", instead of ""0"".
I named this two modes as ""strict mode"" (which is the ""classic"" mode, and anybody can use it without any modification), and ""permissive mode"", which helps to prevent the fail UNMATCHED_BOUNDARY issues.
Please review the test cases and the new modification - where the multipart request is correct, but contains any boundary-like line(s), the ""!@eq 0"" rule will catch it, and you'll get HTTP/403. If the rule contains ""@eq 1"", in these cases the result will HTTP/200.
If you have any idea/question, just let me know :).
a.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1747,2018-04-19T20:03:02Z,2018-06-12T04:38:27Z,2018-06-13T08:59:48Z,CLOSED,False,802,1,2,https://github.com/airween,Fixed false positive MULTIPART_UNMATCHED_BOUNDARY errors,3,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1747,https://github.com/zimmerle,8,https://github.com/SpiderLabs/ModSecurity/pull/1747#issuecomment-396463392,"Couple of months ago I've posted a report to Owasp-modsecurity-core-rule-set list, where I signed that the file upload does not works:
http://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/2017-August/002458.html
The problem came with a PEM encoded file, that's why I called my branch uploadpem.
Now I could focused to the problem, and looks like the multipart handler contains a bug: if the body of multipart data contains a line at the begin with ""--"", libmodsecurity interprets it as boundary - it doesn't matter what's that: a PEM format file, eg. X509 CERT (-----BEGIN CERTIFICATE-----), traditional signature (--\n), or any other.
I've made a JSON test for the regression-test, which contains some ""real"" example:
https://gist.githubusercontent.com/airween/522eaebf38510c025961f4810614949b/raw/2021642dcdcede9a2a572633868a65b8ecd4b522/request-body-parser-multipart-with-hypen.json
Before you merge (if you will :)), then you can check it: the current libmodsecurity (v3/master branch) has failed with most of that.
This patch is very simple: I just modified the source, that if there is a matched boundary least which declared in header, and there is a final (matched) boundary, then it doesn't matter, what is the content. I've checked the RFC (1341), looks like this is the right way.
I've found some mailing list message related to this topic, and some Gihub issue, but there wasn't any solution. Hope that you'll merge accept and merge this, and now all problems will go away...","Hi @airween,
I like your second plan best. It will allow an easy adoption for those who have the !eq 0.

  
    
      ModSecurity/modsecurity.conf-recommended
    
    
        Lines 79 to 80
      in
      95048d5
    
  
  
    

        
          
           SecRule MULTIPART_UNMATCHED_BOUNDARY ""!@eq 0"" \ 
        

        
          
           ""id:'200004',phase:2,t:none,log,deny,msg:'Multipart parser detected a possible unmatched boundary.'"" 
        
    
  


Even considering a new semantic to the variable, it should not affect the users that are using it now.
Thank you for patch!",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1748,2018-04-19T23:39:49Z,2018-04-22T14:27:07Z,2018-04-22T14:27:08Z,CLOSED,False,4,2,2,https://github.com/victorhora,Fix variable FILES_TMPNAMES,1,"['bug', 'RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1748,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1748,"Small fix to allow FILES_TMPNAMES variable to point to the actual temporary path (m->m_tmp_file_name) set by SecUploadDir
[data ""FILES_TMPNAMES:/usr/local/nginx/logs//20180411-144842-152347252299.633367-file-0s6vqI""]  
[data ""FILES_NAMES:test.txt""] 

Should solve #1646 and #1610.","Small fix to allow FILES_TMPNAMES variable to point to the actual temporary path (m->m_tmp_file_name) set by SecUploadDir
[data ""FILES_TMPNAMES:/usr/local/nginx/logs//20180411-144842-152347252299.633367-file-0s6vqI""]  
[data ""FILES_NAMES:test.txt""] 

Should solve #1646 and #1610.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1748,2018-04-19T23:39:49Z,2018-04-22T14:27:07Z,2018-04-22T14:27:08Z,CLOSED,False,4,2,2,https://github.com/victorhora,Fix variable FILES_TMPNAMES,1,"['bug', 'RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1748,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1748#issuecomment-383385399,"Small fix to allow FILES_TMPNAMES variable to point to the actual temporary path (m->m_tmp_file_name) set by SecUploadDir
[data ""FILES_TMPNAMES:/usr/local/nginx/logs//20180411-144842-152347252299.633367-file-0s6vqI""]  
[data ""FILES_NAMES:test.txt""] 

Should solve #1646 and #1610.",Thanks!,True,{'HEART': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1749,2018-04-20T14:32:32Z,2018-04-25T22:08:19Z,2018-04-25T22:08:41Z,CLOSED,False,1,1,1,https://github.com/1Jesper1,Update modsecurity.conf-recommended,1,"['2.x', 'RIP - Type - Usage']",https://github.com/SpiderLabs/ModSecurity/pull/1749,https://github.com/1Jesper1,1,https://github.com/SpiderLabs/ModSecurity/pull/1749,Add application/json as default to SecResponseBodyMimeType config for enabling JSON response parsing as default.,Add application/json as default to SecResponseBodyMimeType config for enabling JSON response parsing as default.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1749,2018-04-20T14:32:32Z,2018-04-25T22:08:19Z,2018-04-25T22:08:41Z,CLOSED,False,1,1,1,https://github.com/1Jesper1,Update modsecurity.conf-recommended,1,"['2.x', 'RIP - Type - Usage']",https://github.com/SpiderLabs/ModSecurity/pull/1749,https://github.com/1Jesper1,2,https://github.com/SpiderLabs/ModSecurity/pull/1749#issuecomment-384223888,Add application/json as default to SecResponseBodyMimeType config for enabling JSON response parsing as default.,"Thanks for the reply, I understand your point. A note in the reference manual about this would be useful.",True,{'THUMBS_UP': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1749,2018-04-20T14:32:32Z,2018-04-25T22:08:19Z,2018-04-25T22:08:41Z,CLOSED,False,1,1,1,https://github.com/1Jesper1,Update modsecurity.conf-recommended,1,"['2.x', 'RIP - Type - Usage']",https://github.com/SpiderLabs/ModSecurity/pull/1749,https://github.com/victorhora,3,https://github.com/SpiderLabs/ModSecurity/pull/1749#issuecomment-384449672,Add application/json as default to SecResponseBodyMimeType config for enabling JSON response parsing as default.,"Hi @1Jesper1,
The note has been added to the reference manual. Your contribution has been referenced on the revision history here: https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual-(v2.x)/_history
Thanks!",True,"{'THUMBS_UP': ['https://github.com/1Jesper1', 'https://github.com/zimmerle']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1750,2018-04-23T07:39:21Z,2018-04-24T01:57:06Z,2018-04-24T01:57:06Z,CLOSED,False,1,1,1,https://github.com/defanator,Fix memory leak in modsecurity::utils::expandEnv(),1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1750,https://github.com/defanator,1,https://github.com/SpiderLabs/ModSecurity/pull/1750,Found by ASAN.,Found by ASAN.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1750,2018-04-23T07:39:21Z,2018-04-24T01:57:06Z,2018-04-24T01:57:06Z,CLOSED,False,1,1,1,https://github.com/defanator,Fix memory leak in modsecurity::utils::expandEnv(),1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1750,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1750#issuecomment-383778163,Found by ASAN.,Merged. Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1751,2018-04-23T09:31:45Z,2018-04-24T01:47:13Z,2018-04-24T11:43:51Z,CLOSED,False,1,1,1,https://github.com/airween,Initialize m_dtd member in ValidateDTD class as NULL,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1751,https://github.com/airween,1,https://github.com/SpiderLabs/ModSecurity/pull/1751,"In case of using GCC (and also libxml2 is used), the m_dtd  just declared, but not initialized - GCC initialized it as NON NULL pointer. When destructor called, it checks the m_dtd, and if it's not NULL, calls xmlFreeDtd. The result is a segfault:
airween@vm:~/src/ModSecurity$ test/regression_tests test/test-cases/regression/config-xml_external_entity.json 
ModSecurity 3.0.2 - tests
(options are not available -- missing GetOpt)

  # File Name                                         Test Name                                                             Passed?   
--- ---------                                         ---------                                                             -------   
Segmentation fault

The expected behavior would be:
airween@vm:~/src/ModSecurity$ test/regression_tests test/test-cases/regression/config-xml_external_entity.json 
ModSecurity 3.0.2 - tests
(options are not available -- missing GetOpt)

  # File Name                                         Test Name                                                             Passed?   
--- ---------                                         ---------                                                             -------   
  1 config-xml_external_entity.json                   Testing SecXMLExternalEntity/XXE 1                                    passed!
  2 config-xml_external_entity.json                   Testing SecXMLExternalEntity/XXE 2                                    failed!
  3 config-xml_external_entity.json                   Testing SecXMLExternalEntity/XXE 3                                    failed!

Test failed. From: test/test-cases/regression/config-xml_external_entity.json.
Test name: Testing SecXMLExternalEntity/XXE 2.
Reason: 
parse failed.
Rules error. File: config-xml_external_entity.json. Line: 6. Column: 11. XML: File not found: test-cases/data/SoapEnvelope.dtd. Looking at: 'test-cases/data/SoapEnvelope.dtd', 'test-cases/data/SoapEnvelope.dtd', 'config-xml_external_entity.json/test-cases/data/SoapEnvelope.dtd', 'config-xml_external_entity.json/test-cases/data/SoapEnvelope.dtd'. 

Test failed. From: test/test-cases/regression/config-xml_external_entity.json.
Test name: Testing SecXMLExternalEntity/XXE 3.
Reason: 
parse failed.
Rules error. File: config-xml_external_entity.json. Line: 6. Column: 11. XML: File not found: test-cases/data/SoapEnvelope.dtd. Looking at: 'test-cases/data/SoapEnvelope.dtd', 'test-cases/data/SoapEnvelope.dtd', 'config-xml_external_entity.json/test-cases/data/SoapEnvelope.dtd', 'config-xml_external_entity.json/test-cases/data/SoapEnvelope.dtd'. 

Ran a total of: 3 regression tests - 2 failed. 0 skipped test(s). 0 disabled test(s).

This patch prevents the segfault when the DTD is not found.
Note, that I've started the regression_test from the ROOT of ModSecurity source tree, then this check reproducable. If you go to src/ModSecurity/test, and the command is just ""./regression_test test-cases/regression/config-xml_external_entity.json"", then the test exits normally with passes of all tests.
Even so, it would be better to avoid the segfault...
Also note, that in case of using CLANG, the problem is not reproducible - perhaps CLANG initializes the member as NULL automatically.","In case of using GCC (and also libxml2 is used), the m_dtd  just declared, but not initialized - GCC initialized it as NON NULL pointer. When destructor called, it checks the m_dtd, and if it's not NULL, calls xmlFreeDtd. The result is a segfault:
airween@vm:~/src/ModSecurity$ test/regression_tests test/test-cases/regression/config-xml_external_entity.json 
ModSecurity 3.0.2 - tests
(options are not available -- missing GetOpt)

  # File Name                                         Test Name                                                             Passed?   
--- ---------                                         ---------                                                             -------   
Segmentation fault

The expected behavior would be:
airween@vm:~/src/ModSecurity$ test/regression_tests test/test-cases/regression/config-xml_external_entity.json 
ModSecurity 3.0.2 - tests
(options are not available -- missing GetOpt)

  # File Name                                         Test Name                                                             Passed?   
--- ---------                                         ---------                                                             -------   
  1 config-xml_external_entity.json                   Testing SecXMLExternalEntity/XXE 1                                    passed!
  2 config-xml_external_entity.json                   Testing SecXMLExternalEntity/XXE 2                                    failed!
  3 config-xml_external_entity.json                   Testing SecXMLExternalEntity/XXE 3                                    failed!

Test failed. From: test/test-cases/regression/config-xml_external_entity.json.
Test name: Testing SecXMLExternalEntity/XXE 2.
Reason: 
parse failed.
Rules error. File: config-xml_external_entity.json. Line: 6. Column: 11. XML: File not found: test-cases/data/SoapEnvelope.dtd. Looking at: 'test-cases/data/SoapEnvelope.dtd', 'test-cases/data/SoapEnvelope.dtd', 'config-xml_external_entity.json/test-cases/data/SoapEnvelope.dtd', 'config-xml_external_entity.json/test-cases/data/SoapEnvelope.dtd'. 

Test failed. From: test/test-cases/regression/config-xml_external_entity.json.
Test name: Testing SecXMLExternalEntity/XXE 3.
Reason: 
parse failed.
Rules error. File: config-xml_external_entity.json. Line: 6. Column: 11. XML: File not found: test-cases/data/SoapEnvelope.dtd. Looking at: 'test-cases/data/SoapEnvelope.dtd', 'test-cases/data/SoapEnvelope.dtd', 'config-xml_external_entity.json/test-cases/data/SoapEnvelope.dtd', 'config-xml_external_entity.json/test-cases/data/SoapEnvelope.dtd'. 

Ran a total of: 3 regression tests - 2 failed. 0 skipped test(s). 0 disabled test(s).

This patch prevents the segfault when the DTD is not found.
Note, that I've started the regression_test from the ROOT of ModSecurity source tree, then this check reproducable. If you go to src/ModSecurity/test, and the command is just ""./regression_test test-cases/regression/config-xml_external_entity.json"", then the test exits normally with passes of all tests.
Even so, it would be better to avoid the segfault...
Also note, that in case of using CLANG, the problem is not reproducible - perhaps CLANG initializes the member as NULL automatically.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1751,2018-04-23T09:31:45Z,2018-04-24T01:47:13Z,2018-04-24T11:43:51Z,CLOSED,False,1,1,1,https://github.com/airween,Initialize m_dtd member in ValidateDTD class as NULL,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1751,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1751#issuecomment-383776524,"In case of using GCC (and also libxml2 is used), the m_dtd  just declared, but not initialized - GCC initialized it as NON NULL pointer. When destructor called, it checks the m_dtd, and if it's not NULL, calls xmlFreeDtd. The result is a segfault:
airween@vm:~/src/ModSecurity$ test/regression_tests test/test-cases/regression/config-xml_external_entity.json 
ModSecurity 3.0.2 - tests
(options are not available -- missing GetOpt)

  # File Name                                         Test Name                                                             Passed?   
--- ---------                                         ---------                                                             -------   
Segmentation fault

The expected behavior would be:
airween@vm:~/src/ModSecurity$ test/regression_tests test/test-cases/regression/config-xml_external_entity.json 
ModSecurity 3.0.2 - tests
(options are not available -- missing GetOpt)

  # File Name                                         Test Name                                                             Passed?   
--- ---------                                         ---------                                                             -------   
  1 config-xml_external_entity.json                   Testing SecXMLExternalEntity/XXE 1                                    passed!
  2 config-xml_external_entity.json                   Testing SecXMLExternalEntity/XXE 2                                    failed!
  3 config-xml_external_entity.json                   Testing SecXMLExternalEntity/XXE 3                                    failed!

Test failed. From: test/test-cases/regression/config-xml_external_entity.json.
Test name: Testing SecXMLExternalEntity/XXE 2.
Reason: 
parse failed.
Rules error. File: config-xml_external_entity.json. Line: 6. Column: 11. XML: File not found: test-cases/data/SoapEnvelope.dtd. Looking at: 'test-cases/data/SoapEnvelope.dtd', 'test-cases/data/SoapEnvelope.dtd', 'config-xml_external_entity.json/test-cases/data/SoapEnvelope.dtd', 'config-xml_external_entity.json/test-cases/data/SoapEnvelope.dtd'. 

Test failed. From: test/test-cases/regression/config-xml_external_entity.json.
Test name: Testing SecXMLExternalEntity/XXE 3.
Reason: 
parse failed.
Rules error. File: config-xml_external_entity.json. Line: 6. Column: 11. XML: File not found: test-cases/data/SoapEnvelope.dtd. Looking at: 'test-cases/data/SoapEnvelope.dtd', 'test-cases/data/SoapEnvelope.dtd', 'config-xml_external_entity.json/test-cases/data/SoapEnvelope.dtd', 'config-xml_external_entity.json/test-cases/data/SoapEnvelope.dtd'. 

Ran a total of: 3 regression tests - 2 failed. 0 skipped test(s). 0 disabled test(s).

This patch prevents the segfault when the DTD is not found.
Note, that I've started the regression_test from the ROOT of ModSecurity source tree, then this check reproducable. If you go to src/ModSecurity/test, and the command is just ""./regression_test test-cases/regression/config-xml_external_entity.json"", then the test exits normally with passes of all tests.
Even so, it would be better to avoid the segfault...
Also note, that in case of using CLANG, the problem is not reproducible - perhaps CLANG initializes the member as NULL automatically.","Hi @airween, good catch! merged. Thanks.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1752,2018-04-23T20:24:37Z,2018-04-24T12:28:39Z,2018-04-24T12:28:39Z,CLOSED,False,2830,2731,5,https://github.com/victorhora,"Add missing escapeSeqDecode, urlEncode and trimLeft/Right tfns to parser",1,"['RIP - libmodsecurity', 'RIP - libmodsec - missing transformation', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1752,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1752,"Transformations were implemented and confirmed working but were missing statements in the parser. Should avoid errors messages like this one if one tries to use urlEncode, trimLeft, trimRight or escapeSeqDecode
nginx: [emerg] ""modsecurity_rules_file"" directive Rules error. File: modsecurity.conf. Line: 615. Column: 107. Expecting an action, got:  t:escapeSeqDecode"" in nginx.conf:26","Transformations were implemented and confirmed working but were missing statements in the parser. Should avoid errors messages like this one if one tries to use urlEncode, trimLeft, trimRight or escapeSeqDecode
nginx: [emerg] ""modsecurity_rules_file"" directive Rules error. File: modsecurity.conf. Line: 615. Column: 107. Expecting an action, got:  t:escapeSeqDecode"" in nginx.conf:26",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1752,2018-04-23T20:24:37Z,2018-04-24T12:28:39Z,2018-04-24T12:28:39Z,CLOSED,False,2830,2731,5,https://github.com/victorhora,"Add missing escapeSeqDecode, urlEncode and trimLeft/Right tfns to parser",1,"['RIP - libmodsecurity', 'RIP - libmodsec - missing transformation', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1752,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1752#issuecomment-383912141,"Transformations were implemented and confirmed working but were missing statements in the parser. Should avoid errors messages like this one if one tries to use urlEncode, trimLeft, trimRight or escapeSeqDecode
nginx: [emerg] ""modsecurity_rules_file"" directive Rules error. File: modsecurity.conf. Line: 615. Column: 107. Expecting an action, got:  t:escapeSeqDecode"" in nginx.conf:26",Merged! thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1755,2018-04-30T22:31:39Z,2018-05-13T20:15:20Z,2018-05-13T20:15:20Z,CLOSED,False,1,1,1,https://github.com/p0pr0ck5,Initialize invalid_count in UrlDecode::evaluate,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1755,https://github.com/p0pr0ck5,1,https://github.com/SpiderLabs/ModSecurity/pull/1755,"The other caller of urldecode_nonstrict_inplace initialized the third param, but UrlDecode::evaluate did not.","The other caller of urldecode_nonstrict_inplace initialized the third param, but UrlDecode::evaluate did not.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1755,2018-04-30T22:31:39Z,2018-05-13T20:15:20Z,2018-05-13T20:15:20Z,CLOSED,False,1,1,1,https://github.com/p0pr0ck5,Initialize invalid_count in UrlDecode::evaluate,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1755,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1755#issuecomment-386390794,"The other caller of urldecode_nonstrict_inplace initialized the third param, but UrlDecode::evaluate did not.",Do you mind to describe what is the point to initialize it?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1755,2018-04-30T22:31:39Z,2018-05-13T20:15:20Z,2018-05-13T20:15:20Z,CLOSED,False,1,1,1,https://github.com/p0pr0ck5,Initialize invalid_count in UrlDecode::evaluate,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1755,https://github.com/p0pr0ck5,3,https://github.com/SpiderLabs/ModSecurity/pull/1755#issuecomment-386398402,"The other caller of urldecode_nonstrict_inplace initialized the third param, but UrlDecode::evaluate did not.","Good practice, since the value is unused in this context it doesn't have an impact on control flow. It's largely a quality issue (and keeping its usage in line with the other caller is good for code review purposes IMO).",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1755,2018-04-30T22:31:39Z,2018-05-13T20:15:20Z,2018-05-13T20:15:20Z,CLOSED,False,1,1,1,https://github.com/p0pr0ck5,Initialize invalid_count in UrlDecode::evaluate,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1755,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1755#issuecomment-388652956,"The other caller of urldecode_nonstrict_inplace initialized the third param, but UrlDecode::evaluate did not.",Same as #1756,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1756,2018-04-30T22:31:54Z,2018-05-13T20:14:35Z,2018-05-13T20:14:36Z,CLOSED,False,7,1,1,https://github.com/p0pr0ck5,Fix memory leak when an allocation fails,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1756,https://github.com/p0pr0ck5,1,https://github.com/SpiderLabs/ModSecurity/pull/1756,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1756,2018-04-30T22:31:54Z,2018-05-13T20:14:35Z,2018-05-13T20:14:36Z,CLOSED,False,7,1,1,https://github.com/p0pr0ck5,Fix memory leak when an allocation fails,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1756,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1756#issuecomment-386388740,,"Given the utilization context of this function, do you mind to describe the leak that you mentioned that was fixed?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1756,2018-04-30T22:31:54Z,2018-05-13T20:14:35Z,2018-05-13T20:14:36Z,CLOSED,False,7,1,1,https://github.com/p0pr0ck5,Fix memory leak when an allocation fails,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1756,https://github.com/p0pr0ck5,3,https://github.com/SpiderLabs/ModSecurity/pull/1756#issuecomment-386398992,,"This is largely a code quality PR. Static analysis tools will find this easily; I was studying the msc_tree functionality when I noticed this and thought it worth a patch. It's not a high priority issue IMO, just a code cleanup.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1756,2018-04-30T22:31:54Z,2018-05-13T20:14:35Z,2018-05-13T20:14:36Z,CLOSED,False,7,1,1,https://github.com/p0pr0ck5,Fix memory leak when an allocation fails,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1756,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1756#issuecomment-388652908,,"Thank you for the clarification. It is very important to have an accurate description for the pull request. A not so expert user may believe that this is going to solve an issue, but, in a real world scenario, this is not an issue. From the user perspective it wont change anything.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1757,2018-04-30T22:56:02Z,2018-05-03T18:12:41Z,2018-05-03T18:12:41Z,CLOSED,False,2,1,1,https://github.com/p0pr0ck5,processContentOffset Cleanup,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1757,https://github.com/p0pr0ck5,1,https://github.com/SpiderLabs/ModSecurity/pull/1757,"Remove an unused variable, and fix a memory leak.","Remove an unused variable, and fix a memory leak.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1757,2018-04-30T22:56:02Z,2018-05-03T18:12:41Z,2018-05-03T18:12:41Z,CLOSED,False,2,1,1,https://github.com/p0pr0ck5,processContentOffset Cleanup,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1757,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1757#issuecomment-386387532,"Remove an unused variable, and fix a memory leak.",Merged! thanks,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1758,2018-04-30T23:50:40Z,2018-05-03T16:47:07Z,2018-05-03T16:47:07Z,CLOSED,False,1,1,1,https://github.com/smlx,Fix LDFLAGS for unit tests.,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1758,https://github.com/smlx,1,https://github.com/SpiderLabs/ModSecurity/pull/1758,Fix a typo that was breaking the unit test build.,Fix a typo that was breaking the unit test build.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1758,2018-04-30T23:50:40Z,2018-05-03T16:47:07Z,2018-05-03T16:47:07Z,CLOSED,False,1,1,1,https://github.com/smlx,Fix LDFLAGS for unit tests.,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1758,https://github.com/smlx,2,https://github.com/SpiderLabs/ModSecurity/pull/1758#issuecomment-385640959,Fix a typo that was breaking the unit test build.,Specifically: it was breaking the build in Alpine Linux.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1758,2018-04-30T23:50:40Z,2018-05-03T16:47:07Z,2018-05-03T16:47:07Z,CLOSED,False,1,1,1,https://github.com/smlx,Fix LDFLAGS for unit tests.,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1758,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1758#issuecomment-386360663,Fix a typo that was breaking the unit test build.,Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1759,2018-04-30T23:56:41Z,2018-05-03T17:45:28Z,2018-05-03T17:45:28Z,CLOSED,False,1757,1780,5,https://github.com/victorhora,Fix setvar parsing of quoted data,2,"['enhancement', 'RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1759,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1759,"Proposed fix for an issue with the setvar action that although was accepting quoted data, it didn't seemed to be properly handling it.
Hopefully it should solve #1733 :)","Proposed fix for an issue with the setvar action that although was accepting quoted data, it didn't seemed to be properly handling it.
Hopefully it should solve #1733 :)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1759,2018-04-30T23:56:41Z,2018-05-03T17:45:28Z,2018-05-03T17:45:28Z,CLOSED,False,1757,1780,5,https://github.com/victorhora,Fix setvar parsing of quoted data,2,"['enhancement', 'RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1759,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1759#issuecomment-386378819,"Proposed fix for an issue with the setvar action that although was accepting quoted data, it didn't seemed to be properly handling it.
Hopefully it should solve #1733 :)",Merged! Thanks!,True,{'HEART': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1760,2018-05-01T03:07:09Z,2018-05-12T01:51:00Z,2018-05-12T01:51:00Z,CLOSED,False,1,1,1,https://github.com/smlx,Build in parallel.,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1760,https://github.com/smlx,1,https://github.com/SpiderLabs/ModSecurity/pull/1760,This getconf parameter is supported on both Linux and OSX.,This getconf parameter is supported on both Linux and OSX.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1760,2018-05-01T03:07:09Z,2018-05-12T01:51:00Z,2018-05-12T01:51:00Z,CLOSED,False,1,1,1,https://github.com/smlx,Build in parallel.,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1760,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1760#issuecomment-386367542,This getconf parameter is supported on both Linux and OSX.,"Hi @smlx,
Thanks for the patch! It seems like it is causing a random compilation issue when the parser generation is enabled. See here: https://travis-ci.org/SpiderLabs/ModSecurity/jobs/373323135 (line 1180).
Most likely a problem is within the build scripts. Holding the merged till we find what is causing the issue.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1760,2018-05-01T03:07:09Z,2018-05-12T01:51:00Z,2018-05-12T01:51:00Z,CLOSED,False,1,1,1,https://github.com/smlx,Build in parallel.,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1760,https://github.com/victorhora,3,https://github.com/SpiderLabs/ModSecurity/pull/1760#issuecomment-386437463,This getconf parameter is supported on both Linux and OSX.,Indeed. I've triggered another build from Travis to see if we get different results :),True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1760,2018-05-01T03:07:09Z,2018-05-12T01:51:00Z,2018-05-12T01:51:00Z,CLOSED,False,1,1,1,https://github.com/smlx,Build in parallel.,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1760,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1760#issuecomment-388522080,This getconf parameter is supported on both Linux and OSX.,"Forced the parser generation to happens prior to general make seems to temporary fix it. Not able to reproduced it outside Travis.

  
    
      ModSecurity/.travis.yml
    
    
         Line 47
      in
      a278bb6
    
  
  
    

        
          
           - make parser 
        
    
  


Thanks @smlx!",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1761,2018-05-01T21:17:20Z,2018-05-03T16:43:31Z,2018-05-03T16:43:36Z,CLOSED,False,3,3,1,https://github.com/p0pr0ck5,Clean up MD5 hexdigest,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1761,https://github.com/p0pr0ck5,1,https://github.com/SpiderLabs/ModSecurity/pull/1761,"The null terminator is not necessary when using this form of the std::string constructor, and its use was confusing given the extra indent.","The null terminator is not necessary when using this form of the std::string constructor, and its use was confusing given the extra indent.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1761,2018-05-01T21:17:20Z,2018-05-03T16:43:31Z,2018-05-03T16:43:36Z,CLOSED,False,3,3,1,https://github.com/p0pr0ck5,Clean up MD5 hexdigest,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1761,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1761#issuecomment-386359561,"The null terminator is not necessary when using this form of the std::string constructor, and its use was confusing given the extra indent.",Merged. Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1765,2018-05-03T15:38:39Z,2018-05-24T16:57:55Z,2018-05-31T12:45:21Z,CLOSED,False,4,4,1,https://github.com/weliu,Fix memory leak in msc_rules_* C APIs,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1765,https://github.com/weliu,1,https://github.com/SpiderLabs/ModSecurity/pull/1765,"When msc_rules_* APIs fail, the error string will return to indicate the reason. It was a duplicate of an internal string. However, it will be duplicated again after those calls in Nginx connector. For example:
In ngx_http_modsecurity_merge_loc_conf():
rules = msc_rules_merge(c->rules_set, p->rules_set, &error);
if (rules < 0) {
return strdup(error);
}
Since the type of error is 'const char **', I believe that we should not duplicate it inside those APIs and let the caller decide how to handle it.","When msc_rules_* APIs fail, the error string will return to indicate the reason. It was a duplicate of an internal string. However, it will be duplicated again after those calls in Nginx connector. For example:
In ngx_http_modsecurity_merge_loc_conf():
rules = msc_rules_merge(c->rules_set, p->rules_set, &error);
if (rules < 0) {
return strdup(error);
}
Since the type of error is 'const char **', I believe that we should not duplicate it inside those APIs and let the caller decide how to handle it.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1765,2018-05-03T15:38:39Z,2018-05-24T16:57:55Z,2018-05-31T12:45:21Z,CLOSED,False,4,4,1,https://github.com/weliu,Fix memory leak in msc_rules_* C APIs,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1765,https://github.com/p0pr0ck5,2,https://github.com/SpiderLabs/ModSecurity/pull/1765#issuecomment-386403481,"When msc_rules_* APIs fail, the error string will return to indicate the reason. It was a duplicate of an internal string. However, it will be duplicated again after those calls in Nginx connector. For example:
In ngx_http_modsecurity_merge_loc_conf():
rules = msc_rules_merge(c->rules_set, p->rules_set, &error);
if (rules < 0) {
return strdup(error);
}
Since the type of error is 'const char **', I believe that we should not duplicate it inside those APIs and let the caller decide how to handle it.",Perhaps we should remove the duplicate strdup from the Nginx connector instead? The Apache connector does not call such a duplicate: https://github.com/SpiderLabs/ModSecurity-apache/blob/4e8854c46bd3c216d7834ab94605f45114794791/src/msc_config.c#L169-L183.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1765,2018-05-03T15:38:39Z,2018-05-24T16:57:55Z,2018-05-31T12:45:21Z,CLOSED,False,4,4,1,https://github.com/weliu,Fix memory leak in msc_rules_* C APIs,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1765,https://github.com/weliu,3,https://github.com/SpiderLabs/ModSecurity/pull/1765#issuecomment-386454627,"When msc_rules_* APIs fail, the error string will return to indicate the reason. It was a duplicate of an internal string. However, it will be duplicated again after those calls in Nginx connector. For example:
In ngx_http_modsecurity_merge_loc_conf():
rules = msc_rules_merge(c->rules_set, p->rules_set, &error);
if (rules < 0) {
return strdup(error);
}
Since the type of error is 'const char **', I believe that we should not duplicate it inside those APIs and let the caller decide how to handle it.","@p0pr0ck5 Since the Apache connector does not free the returned error string, there still exists memory leak if we only remove duplicate strdup from the Nginx connector.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1765,2018-05-03T15:38:39Z,2018-05-24T16:57:55Z,2018-05-31T12:45:21Z,CLOSED,False,4,4,1,https://github.com/weliu,Fix memory leak in msc_rules_* C APIs,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1765,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1765#issuecomment-391786800,"When msc_rules_* APIs fail, the error string will return to indicate the reason. It was a duplicate of an internal string. However, it will be duplicated again after those calls in Nginx connector. For example:
In ngx_http_modsecurity_merge_loc_conf():
rules = msc_rules_merge(c->rules_set, p->rules_set, &error);
if (rules < 0) {
return strdup(error);
}
Since the type of error is 'const char **', I believe that we should not duplicate it inside those APIs and let the caller decide how to handle it.",Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1765,2018-05-03T15:38:39Z,2018-05-24T16:57:55Z,2018-05-31T12:45:21Z,CLOSED,False,4,4,1,https://github.com/weliu,Fix memory leak in msc_rules_* C APIs,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1765,https://github.com/weliu,5,https://github.com/SpiderLabs/ModSecurity/pull/1765#issuecomment-393410377,"When msc_rules_* APIs fail, the error string will return to indicate the reason. It was a duplicate of an internal string. However, it will be duplicated again after those calls in Nginx connector. For example:
In ngx_http_modsecurity_merge_loc_conf():
rules = msc_rules_merge(c->rules_set, p->rules_set, &error);
if (rules < 0) {
return strdup(error);
}
Since the type of error is 'const char **', I believe that we should not duplicate it inside those APIs and let the caller decide how to handle it.","@zimmerle Yes, I made a mistake, since the getParserError() return a temporary string, it is not safe for us to return its c_str. Sorry for the trouble I have made.",True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1765,2018-05-03T15:38:39Z,2018-05-24T16:57:55Z,2018-05-31T12:45:21Z,CLOSED,False,4,4,1,https://github.com/weliu,Fix memory leak in msc_rules_* C APIs,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1765,https://github.com/zimmerle,6,https://github.com/SpiderLabs/ModSecurity/pull/1765#issuecomment-393518152,"When msc_rules_* APIs fail, the error string will return to indicate the reason. It was a duplicate of an internal string. However, it will be duplicated again after those calls in Nginx connector. For example:
In ngx_http_modsecurity_merge_loc_conf():
rules = msc_rules_merge(c->rules_set, p->rules_set, &error);
if (rules < 0) {
return strdup(error);
}
Since the type of error is 'const char **', I believe that we should not duplicate it inside those APIs and let the caller decide how to handle it.",No problem. I dint notice at first sight as well.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1769,2018-05-08T01:04:18Z,2018-05-24T03:20:37Z,2018-05-27T02:09:57Z,CLOSED,False,2,3,1,https://github.com/weliu,Use rvalue reference in ModSecurity::serverLog to avoid string copy,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1769,https://github.com/weliu,1,https://github.com/SpiderLabs/ModSecurity/pull/1769,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1769,2018-05-08T01:04:18Z,2018-05-24T03:20:37Z,2018-05-27T02:09:57Z,CLOSED,False,2,3,1,https://github.com/weliu,Use rvalue reference in ModSecurity::serverLog to avoid string copy,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1769,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1769#issuecomment-391575366,,"Hi @weliu,
Thank you for the patch. Merged!",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1771,2018-05-08T17:40:46Z,2018-05-10T20:45:42Z,2018-05-15T20:03:53Z,CLOSED,False,1,1,1,https://github.com/Artistan,fix when multiple lines for curl version,1,"['2.x', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1771,https://github.com/Artistan,1,https://github.com/SpiderLabs/ModSecurity/pull/1771,"example....
before fix
# /usr/bin/curl  --version | sed 's/^[^0-9][^[:space:]][^[:space:]]*[[:space:]]*//'
7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.27.1 zlib/1.2.3 libidn/1.18 libssh2/1.4.2
tftp ftp telnet dict ldap ldaps http file https ftps scp sftp
GSS-Negotiate IDN IPv6 Largefile NTLM SSL libz
after fix
 # /usr/bin/curl  --version | sed 's/^[^0-9][^[:space:]][^[:space:]]*[[:space:]]*//' | tr '\r\n' ' '
7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.27.1 zlib/1.2.3 libidn/1.18 libssh2/1.4.2 tftp ftp telnet dict ldap ldaps http file https ftps scp sftp  GSS-Negotiate IDN IPv6 Largefile NTLM SSL libz","example....
before fix
# /usr/bin/curl  --version | sed 's/^[^0-9][^[:space:]][^[:space:]]*[[:space:]]*//'
7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.27.1 zlib/1.2.3 libidn/1.18 libssh2/1.4.2
tftp ftp telnet dict ldap ldaps http file https ftps scp sftp
GSS-Negotiate IDN IPv6 Largefile NTLM SSL libz
after fix
 # /usr/bin/curl  --version | sed 's/^[^0-9][^[:space:]][^[:space:]]*[[:space:]]*//' | tr '\r\n' ' '
7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.27.1 zlib/1.2.3 libidn/1.18 libssh2/1.4.2 tftp ftp telnet dict ldap ldaps http file https ftps scp sftp  GSS-Negotiate IDN IPv6 Largefile NTLM SSL libz",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1771,2018-05-08T17:40:46Z,2018-05-10T20:45:42Z,2018-05-15T20:03:53Z,CLOSED,False,1,1,1,https://github.com/Artistan,fix when multiple lines for curl version,1,"['2.x', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1771,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1771#issuecomment-388180266,"example....
before fix
# /usr/bin/curl  --version | sed 's/^[^0-9][^[:space:]][^[:space:]]*[[:space:]]*//'
7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.27.1 zlib/1.2.3 libidn/1.18 libssh2/1.4.2
tftp ftp telnet dict ldap ldaps http file https ftps scp sftp
GSS-Negotiate IDN IPv6 Largefile NTLM SSL libz
after fix
 # /usr/bin/curl  --version | sed 's/^[^0-9][^[:space:]][^[:space:]]*[[:space:]]*//' | tr '\r\n' ' '
7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.27.1 zlib/1.2.3 libidn/1.18 libssh2/1.4.2 tftp ftp telnet dict ldap ldaps http file https ftps scp sftp  GSS-Negotiate IDN IPv6 Largefile NTLM SSL libz",Merged! Thanks!,True,{'THUMBS_UP': ['https://github.com/Artistan']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1775,2018-05-17T04:04:48Z,2018-05-18T13:03:54Z,2018-05-18T13:03:55Z,CLOSED,False,3482,3456,3,https://github.com/victorhora,Actually fix setvar parsing of quoted data,1,"['enhancement', 'RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1775,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1775,Proper fix for #1733 on top of #1759,Proper fix for #1733 on top of #1759,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1775,2018-05-17T04:04:48Z,2018-05-18T13:03:54Z,2018-05-18T13:03:55Z,CLOSED,False,3482,3456,3,https://github.com/victorhora,Actually fix setvar parsing of quoted data,1,"['enhancement', 'RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1775,https://github.com/defanator,2,https://github.com/SpiderLabs/ModSecurity/pull/1775#issuecomment-389783712,Proper fix for #1733 on top of #1759,@victorhora @zimmerle going to check this one in a few. Will provide an update here.,True,"{'THUMBS_UP': ['https://github.com/victorhora', 'https://github.com/zimmerle']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1775,2018-05-17T04:04:48Z,2018-05-18T13:03:54Z,2018-05-18T13:03:55Z,CLOSED,False,3482,3456,3,https://github.com/victorhora,Actually fix setvar parsing of quoted data,1,"['enhancement', 'RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1775,https://github.com/defanator,3,https://github.com/SpiderLabs/ModSecurity/pull/1775#issuecomment-389805603,Proper fix for #1733 on top of #1759,@victorhora @zimmerle this PR fixes the issue (I've been building libmodsecurity with --enable-parser-generation to ensure everything is ok though). Will check again without regenerating the parser shortly.,True,"{'THUMBS_UP': ['https://github.com/victorhora', 'https://github.com/zimmerle']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1775,2018-05-17T04:04:48Z,2018-05-18T13:03:54Z,2018-05-18T13:03:55Z,CLOSED,False,3482,3456,3,https://github.com/victorhora,Actually fix setvar parsing of quoted data,1,"['enhancement', 'RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1775,https://github.com/defanator,4,https://github.com/SpiderLabs/ModSecurity/pull/1775#issuecomment-389808046,Proper fix for #1733 on top of #1759,"@victorhora @zimmerle it works fine without rebuilding parser, so I think we're good here. Thanks guys!",True,"{'HEART': ['https://github.com/victorhora', 'https://github.com/zimmerle']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1775,2018-05-17T04:04:48Z,2018-05-18T13:03:54Z,2018-05-18T13:03:55Z,CLOSED,False,3482,3456,3,https://github.com/victorhora,Actually fix setvar parsing of quoted data,1,"['enhancement', 'RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1775,https://github.com/zimmerle,5,https://github.com/SpiderLabs/ModSecurity/pull/1775#issuecomment-389932776,Proper fix for #1733 on top of #1759,normalized bison version and re-submitted to tests. at: v3/dev/pull_1775,True,{'HOORAY': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1775,2018-05-17T04:04:48Z,2018-05-18T13:03:54Z,2018-05-18T13:03:55Z,CLOSED,False,3482,3456,3,https://github.com/victorhora,Actually fix setvar parsing of quoted data,1,"['enhancement', 'RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1775,https://github.com/zimmerle,6,https://github.com/SpiderLabs/ModSecurity/pull/1775#issuecomment-390200289,Proper fix for #1733 on top of #1759,Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1781,2018-05-23T22:04:06Z,2018-05-28T20:57:12Z,2018-05-28T20:57:12Z,CLOSED,False,1,1,1,https://github.com/default-kramer,set overrideModeDefault to Allow,1,"['RIP - Type - Config Improvement', 'Platform - IIS', '2.x']",https://github.com/SpiderLabs/ModSecurity/pull/1781,https://github.com/default-kramer,1,https://github.com/SpiderLabs/ModSecurity/pull/1781,So that individual websites can add <ModSecurity ...> to their web.config file. Fixes #787,So that individual websites can add <ModSecurity ...> to their web.config file. Fixes #787,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1781,2018-05-23T22:04:06Z,2018-05-28T20:57:12Z,2018-05-28T20:57:12Z,CLOSED,False,1,1,1,https://github.com/default-kramer,set overrideModeDefault to Allow,1,"['RIP - Type - Config Improvement', 'Platform - IIS', '2.x']",https://github.com/SpiderLabs/ModSecurity/pull/1781,https://github.com/default-kramer,2,https://github.com/SpiderLabs/ModSecurity/pull/1781#issuecomment-391511796,So that individual websites can add <ModSecurity ...> to their web.config file. Fixes #787,"I did manage to test this locally, and it works as expected.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1781,2018-05-23T22:04:06Z,2018-05-28T20:57:12Z,2018-05-28T20:57:12Z,CLOSED,False,1,1,1,https://github.com/default-kramer,set overrideModeDefault to Allow,1,"['RIP - Type - Config Improvement', 'Platform - IIS', '2.x']",https://github.com/SpiderLabs/ModSecurity/pull/1781,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1781#issuecomment-392602315,So that individual websites can add <ModSecurity ...> to their web.config file. Fixes #787,Merged! Thanks!,True,{'THUMBS_UP': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1783,2018-05-24T01:16:45Z,2018-05-24T13:32:27Z,2018-05-27T02:07:54Z,CLOSED,False,4,1,1,https://github.com/weliu,Return false in SharedFiles::open() when an error happens,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1783,https://github.com/weliu,1,https://github.com/SpiderLabs/ModSecurity/pull/1783,,,True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1783,2018-05-24T01:16:45Z,2018-05-24T13:32:27Z,2018-05-27T02:07:54Z,CLOSED,False,4,1,1,https://github.com/weliu,Return false in SharedFiles::open() when an error happens,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1783,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1783#issuecomment-391715891,,Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1786,2018-05-25T09:29:17Z,2018-05-28T22:07:20Z,2018-05-29T01:08:31Z,CLOSED,False,7,2,2,https://github.com/weliu,Fix race condition in UniqueId::uniqueId(),1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1786,https://github.com/weliu,1,https://github.com/SpiderLabs/ModSecurity/pull/1786,"There exists a race condition in UniqueId::uniqueId(). I called msc_init() simultaneously in many threads, so they can have their own instance of ModSecurity. However, the process get core dumped every once in a while. The stack looks like this:

This PR uses std::once_flag to make sure UniqueId::getInstance().fillUniqueId() only called once.","There exists a race condition in UniqueId::uniqueId(). I called msc_init() simultaneously in many threads, so they can have their own instance of ModSecurity. However, the process get core dumped every once in a while. The stack looks like this:

This PR uses std::once_flag to make sure UniqueId::getInstance().fillUniqueId() only called once.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1786,2018-05-25T09:29:17Z,2018-05-28T22:07:20Z,2018-05-29T01:08:31Z,CLOSED,False,7,2,2,https://github.com/weliu,Fix race condition in UniqueId::uniqueId(),1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1786,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1786#issuecomment-392610025,"There exists a race condition in UniqueId::uniqueId(). I called msc_init() simultaneously in many threads, so they can have their own instance of ModSecurity. However, the process get core dumped every once in a while. The stack looks like this:

This PR uses std::once_flag to make sure UniqueId::getInstance().fillUniqueId() only called once.",Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1787,2018-05-28T21:10:39Z,2018-06-12T22:31:07Z,2018-06-13T08:59:55Z,CLOSED,False,38,21,3,https://github.com/airween,Fixed LMDB collection errors,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1787,https://github.com/airween,1,https://github.com/SpiderLabs/ModSecurity/pull/1787,"When I compiled ModSecurity with LMDB support, the related regression tests had failed, eg:
72 collection-resource-simple.json        Testing collection :: RESOURCE (2/2)           failed!
73 collection-resource.json               Testing collection :: RESOURCE (1/2)           failed!
74 collection-resource.json               Testing collection :: RESOURCE (2/2)           failed!

Looks like the LMDB backend isn't complete, but may be I'm wrong :).
Before you merge it, please review the comments here:
https://github.com/airween/ModSecurity/blob/908782a06af9d26962e244745bfa46d659d91828/src/collection/backend/lmdb.cc#L496
https://github.com/airween/ModSecurity/blob/908782a06af9d26962e244745bfa46d659d91828/src/collection/backend/lmdb.cc#L509
https://github.com/airween/ModSecurity/blob/908782a06af9d26962e244745bfa46d659d91828/src/collection/backend/lmdb.cc#L518
I don't understand some things, please help me to clarify them.
The patch fixed the regression tests without touched them.","When I compiled ModSecurity with LMDB support, the related regression tests had failed, eg:
72 collection-resource-simple.json        Testing collection :: RESOURCE (2/2)           failed!
73 collection-resource.json               Testing collection :: RESOURCE (1/2)           failed!
74 collection-resource.json               Testing collection :: RESOURCE (2/2)           failed!

Looks like the LMDB backend isn't complete, but may be I'm wrong :).
Before you merge it, please review the comments here:
https://github.com/airween/ModSecurity/blob/908782a06af9d26962e244745bfa46d659d91828/src/collection/backend/lmdb.cc#L496
https://github.com/airween/ModSecurity/blob/908782a06af9d26962e244745bfa46d659d91828/src/collection/backend/lmdb.cc#L509
https://github.com/airween/ModSecurity/blob/908782a06af9d26962e244745bfa46d659d91828/src/collection/backend/lmdb.cc#L518
I don't understand some things, please help me to clarify them.
The patch fixed the regression tests without touched them.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1787,2018-05-28T21:10:39Z,2018-06-12T22:31:07Z,2018-06-13T08:59:55Z,CLOSED,False,38,21,3,https://github.com/airween,Fixed LMDB collection errors,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1787,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1787#issuecomment-396697992,"When I compiled ModSecurity with LMDB support, the related regression tests had failed, eg:
72 collection-resource-simple.json        Testing collection :: RESOURCE (2/2)           failed!
73 collection-resource.json               Testing collection :: RESOURCE (1/2)           failed!
74 collection-resource.json               Testing collection :: RESOURCE (2/2)           failed!

Looks like the LMDB backend isn't complete, but may be I'm wrong :).
Before you merge it, please review the comments here:
https://github.com/airween/ModSecurity/blob/908782a06af9d26962e244745bfa46d659d91828/src/collection/backend/lmdb.cc#L496
https://github.com/airween/ModSecurity/blob/908782a06af9d26962e244745bfa46d659d91828/src/collection/backend/lmdb.cc#L509
https://github.com/airween/ModSecurity/blob/908782a06af9d26962e244745bfa46d659d91828/src/collection/backend/lmdb.cc#L518
I don't understand some things, please help me to clarify them.
The patch fixed the regression tests without touched them.","Hi @airween,
Indeed those are good questions. I've changed the implementation a little bit to address some of your concerns:

https://github.com/SpiderLabs/ModSecurity/tree/v3/dev/pull_1787

Most of the checks that you have highlighted was there due to historical reasons. In the past the collection key was named after a concatenation of the collection name and key (+ others factors such as the web app id, not so relevant for the explanation).
The fact is that naming police was changed for performance improvements and the changes were not back ported to the LMDB back-end.
I've changed yours implementation to reflect the changes on InMemoryPerProcess collection. The modifications are available here: e51297b.
If you are OK with the patch above, I will proceed with the merge. Thank you.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1787,2018-05-28T21:10:39Z,2018-06-12T22:31:07Z,2018-06-13T08:59:55Z,CLOSED,False,38,21,3,https://github.com/airween,Fixed LMDB collection errors,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1787,https://github.com/airween,3,https://github.com/SpiderLabs/ModSecurity/pull/1787#issuecomment-396719368,"When I compiled ModSecurity with LMDB support, the related regression tests had failed, eg:
72 collection-resource-simple.json        Testing collection :: RESOURCE (2/2)           failed!
73 collection-resource.json               Testing collection :: RESOURCE (1/2)           failed!
74 collection-resource.json               Testing collection :: RESOURCE (2/2)           failed!

Looks like the LMDB backend isn't complete, but may be I'm wrong :).
Before you merge it, please review the comments here:
https://github.com/airween/ModSecurity/blob/908782a06af9d26962e244745bfa46d659d91828/src/collection/backend/lmdb.cc#L496
https://github.com/airween/ModSecurity/blob/908782a06af9d26962e244745bfa46d659d91828/src/collection/backend/lmdb.cc#L509
https://github.com/airween/ModSecurity/blob/908782a06af9d26962e244745bfa46d659d91828/src/collection/backend/lmdb.cc#L518
I don't understand some things, please help me to clarify them.
The patch fixed the regression tests without touched them.","Hi Felipe,
I've grabbed the pull_1787 branch, merged to my lmdbfix, reviewed the modifications and tests. All tests had passed. The modifications looks like right:
https://github.com/SpiderLabs/ModSecurity/compare/v3/master...airween:v3/lmdbfix_1787?expand=1
I think you can merge it to v3/master. Thanks.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1787,2018-05-28T21:10:39Z,2018-06-12T22:31:07Z,2018-06-13T08:59:55Z,CLOSED,False,38,21,3,https://github.com/airween,Fixed LMDB collection errors,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1787,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1787#issuecomment-396755365,"When I compiled ModSecurity with LMDB support, the related regression tests had failed, eg:
72 collection-resource-simple.json        Testing collection :: RESOURCE (2/2)           failed!
73 collection-resource.json               Testing collection :: RESOURCE (1/2)           failed!
74 collection-resource.json               Testing collection :: RESOURCE (2/2)           failed!

Looks like the LMDB backend isn't complete, but may be I'm wrong :).
Before you merge it, please review the comments here:
https://github.com/airween/ModSecurity/blob/908782a06af9d26962e244745bfa46d659d91828/src/collection/backend/lmdb.cc#L496
https://github.com/airween/ModSecurity/blob/908782a06af9d26962e244745bfa46d659d91828/src/collection/backend/lmdb.cc#L509
https://github.com/airween/ModSecurity/blob/908782a06af9d26962e244745bfa46d659d91828/src/collection/backend/lmdb.cc#L518
I don't understand some things, please help me to clarify them.
The patch fixed the regression tests without touched them.",Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1788,2018-05-29T06:05:33Z,2018-06-19T01:17:32Z,2018-06-19T01:17:32Z,CLOSED,False,8,6,1,https://github.com/victorhora,Allow empty strings to be evaluated by regex::searchAll,1,"['bug', 'RIP - libmodsecurity', 'RIP - release-3.0', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1788,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1788,"Proposed fix for issue described at #1785. Confirmed working on my set of tests, and now empty strings seems to be evaluated properly by regex::searchAll when using the caret and dollar operators (^$)
ModSecurity: Warning. Matched ""Operator `Rx' with parameter `^$' against variable `REQUEST_HEADERS:User-Agent' (Value: `' ) [file ""/usr/local/nginx/conf/modsecur$ty.conf""] [line ""287""] [id ""123456""] [rev """"] [msg """"] [data ""Matched data: ""] [severity ""0""] [ver """"] [maturity ""0""] [accuracy ""0""] [hostname ""192.168.37.1""] [u$i ""/""] [unique_id ""152663695450.272548""] [ref ""o0,0v56,0""] ModSecurity: Warning. Matched ""Operator `Rx' with parameter `^$' against variable `REQUEST_HEADERS:Accept' (Value: `' ) [file ""/usr/local/nginx/conf/modsecurity.$onf""] [line ""721""] [id ""12345""] [rev """"] [msg """"] [data ""Matched data: ""] [severity ""0""] [ver """"] [maturity ""0""] [accuracy ""0""] [hostname ""192.168.37.1""] [uri ""/$] [unique_id ""152663695450.272548""] [ref ""o0,0v81,0""] ModSecurity: Warning. Matched ""Operator `Rx' with parameter `^apache$' against variable `ARGS:param1' (Value: `apache' ) [file ""/usr/local/nginx/conf/modsecurity$conf""] [line ""722""] [id ""1234""] [rev """"] [msg """"] [data ""Matched data: apache""] [severity ""0""] [ver """"] [maturity ""0""] [accuracy ""0""] [hostname ""192.168.37.1""] [$ri ""/""] [unique_id ""152663695450.272548""] [ref ""o0,6v21,6""]
Testsuites seems happy as well :)","Proposed fix for issue described at #1785. Confirmed working on my set of tests, and now empty strings seems to be evaluated properly by regex::searchAll when using the caret and dollar operators (^$)
ModSecurity: Warning. Matched ""Operator `Rx' with parameter `^$' against variable `REQUEST_HEADERS:User-Agent' (Value: `' ) [file ""/usr/local/nginx/conf/modsecur$ty.conf""] [line ""287""] [id ""123456""] [rev """"] [msg """"] [data ""Matched data: ""] [severity ""0""] [ver """"] [maturity ""0""] [accuracy ""0""] [hostname ""192.168.37.1""] [u$i ""/""] [unique_id ""152663695450.272548""] [ref ""o0,0v56,0""] ModSecurity: Warning. Matched ""Operator `Rx' with parameter `^$' against variable `REQUEST_HEADERS:Accept' (Value: `' ) [file ""/usr/local/nginx/conf/modsecurity.$onf""] [line ""721""] [id ""12345""] [rev """"] [msg """"] [data ""Matched data: ""] [severity ""0""] [ver """"] [maturity ""0""] [accuracy ""0""] [hostname ""192.168.37.1""] [uri ""/$] [unique_id ""152663695450.272548""] [ref ""o0,0v81,0""] ModSecurity: Warning. Matched ""Operator `Rx' with parameter `^apache$' against variable `ARGS:param1' (Value: `apache' ) [file ""/usr/local/nginx/conf/modsecurity$conf""] [line ""722""] [id ""1234""] [rev """"] [msg """"] [data ""Matched data: apache""] [severity ""0""] [ver """"] [maturity ""0""] [accuracy ""0""] [hostname ""192.168.37.1""] [$ri ""/""] [unique_id ""152663695450.272548""] [ref ""o0,6v21,6""]
Testsuites seems happy as well :)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1788,2018-05-29T06:05:33Z,2018-06-19T01:17:32Z,2018-06-19T01:17:32Z,CLOSED,False,8,6,1,https://github.com/victorhora,Allow empty strings to be evaluated by regex::searchAll,1,"['bug', 'RIP - libmodsecurity', 'RIP - release-3.0', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1788,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1788#issuecomment-398243724,"Proposed fix for issue described at #1785. Confirmed working on my set of tests, and now empty strings seems to be evaluated properly by regex::searchAll when using the caret and dollar operators (^$)
ModSecurity: Warning. Matched ""Operator `Rx' with parameter `^$' against variable `REQUEST_HEADERS:User-Agent' (Value: `' ) [file ""/usr/local/nginx/conf/modsecur$ty.conf""] [line ""287""] [id ""123456""] [rev """"] [msg """"] [data ""Matched data: ""] [severity ""0""] [ver """"] [maturity ""0""] [accuracy ""0""] [hostname ""192.168.37.1""] [u$i ""/""] [unique_id ""152663695450.272548""] [ref ""o0,0v56,0""] ModSecurity: Warning. Matched ""Operator `Rx' with parameter `^$' against variable `REQUEST_HEADERS:Accept' (Value: `' ) [file ""/usr/local/nginx/conf/modsecurity.$onf""] [line ""721""] [id ""12345""] [rev """"] [msg """"] [data ""Matched data: ""] [severity ""0""] [ver """"] [maturity ""0""] [accuracy ""0""] [hostname ""192.168.37.1""] [uri ""/$] [unique_id ""152663695450.272548""] [ref ""o0,0v81,0""] ModSecurity: Warning. Matched ""Operator `Rx' with parameter `^apache$' against variable `ARGS:param1' (Value: `apache' ) [file ""/usr/local/nginx/conf/modsecurity$conf""] [line ""722""] [id ""1234""] [rev """"] [msg """"] [data ""Matched data: apache""] [severity ""0""] [ver """"] [maturity ""0""] [accuracy ""0""] [hostname ""192.168.37.1""] [$ri ""/""] [unique_id ""152663695450.272548""] [ref ""o0,6v21,6""]
Testsuites seems happy as well :)",Merged! thanks!,True,{'HEART': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1790,2018-06-01T16:11:42Z,2018-06-13T01:04:16Z,2018-07-22T17:16:07Z,CLOSED,False,15,0,3,https://github.com/gquintard,Add basic pkg-config info,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1790,https://github.com/gquintard,1,https://github.com/SpiderLabs/ModSecurity/pull/1790,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1790,2018-06-01T16:11:42Z,2018-06-13T01:04:16Z,2018-07-22T17:16:07Z,CLOSED,False,15,0,3,https://github.com/gquintard,Add basic pkg-config info,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1790,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1790#issuecomment-396781134,,"Hi @gquintard,
Thank you for the patch! I was missing the patch level information on the version. I've made a little modification to display it. Everything is now merged!
Here:

  
    
      ModSecurity/modsecurity.pc.in
    
    
         Line 8
      in
      a3980bb
    
  
  
    

        
          
           Version: @MSC_VERSION_WITH_PATCHLEVEL@ 
        
    
  


And here:

  
    
      ModSecurity/configure.ac
    
    
        Lines 25 to 26
      in
      a3980bb
    
  
  
    

        
          
           m4_define([msc_version_with_patchlevel], 
        

        
          
               [msc_version_major.msc_version_minor.msc_version_patchlevel]) 
        
    
  



  
    
      ModSecurity/configure.ac
    
    
        Lines 207 to 208
      in
      a3980bb
    
  
  
    

        
          
           MSC_VERSION_WITH_PATCHLEVEL=msc_version_with_patchlevel 
        

        
          
           AC_SUBST([MSC_VERSION_WITH_PATCHLEVEL])",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1790,2018-06-01T16:11:42Z,2018-06-13T01:04:16Z,2018-07-22T17:16:07Z,CLOSED,False,15,0,3,https://github.com/gquintard,Add basic pkg-config info,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1790,https://github.com/gquintard,3,https://github.com/SpiderLabs/ModSecurity/pull/1790#issuecomment-396808823,,Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1790,2018-06-01T16:11:42Z,2018-06-13T01:04:16Z,2018-07-22T17:16:07Z,CLOSED,False,15,0,3,https://github.com/gquintard,Add basic pkg-config info,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1790,https://github.com/gquintard,4,https://github.com/SpiderLabs/ModSecurity/pull/1790#issuecomment-406882385,,"Revisiting that one, shouldn't
Cflags: -I@includedir@/@PACKAGE@

just be
Cflags: -I@includedir@/

?
in the first case you include modsecurity/modsecurity.h, in the second one modsecurity.h. The former seems more right to me.
EDIT: it needs to be Cflags: -I@includedir@/ because MS headers include  modsecurity/XXX.h. I'll open a PR",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1792,2018-06-04T12:16:27Z,2018-06-12T19:55:47Z,2018-06-12T19:55:57Z,CLOSED,False,521,1,1,https://github.com/airween,Added test cases to multipart parser regression tests,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1792,https://github.com/airween,1,https://github.com/SpiderLabs/ModSecurity/pull/1792,Added more regression test cases to multipart parser.,Added more regression test cases to multipart parser.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1792,2018-06-04T12:16:27Z,2018-06-12T19:55:47Z,2018-06-12T19:55:57Z,CLOSED,False,521,1,1,https://github.com/airween,Added test cases to multipart parser regression tests,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1792,https://github.com/airween,2,https://github.com/SpiderLabs/ModSecurity/pull/1792#issuecomment-394598256,Added more regression test cases to multipart parser.,"Note, that the Travis CI has failed, because the ModSecurity processes wrongly the new request-body test cases.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1801,2018-06-13T08:58:48Z,2018-06-18T21:55:53Z,2018-06-18T21:55:54Z,CLOSED,False,41,0,1,https://github.com/airween,Added some documentation for multipart boundary check,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1801,https://github.com/airween,1,https://github.com/SpiderLabs/ModSecurity/pull/1801,,,True,{'HEART': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1801,2018-06-13T08:58:48Z,2018-06-18T21:55:53Z,2018-06-18T21:55:54Z,CLOSED,False,41,0,1,https://github.com/airween,Added some documentation for multipart boundary check,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1801,https://github.com/p0pr0ck5,2,https://github.com/SpiderLabs/ModSecurity/pull/1801#issuecomment-397472093,,"It might be helpful to also document this somewhere a bit more consumable, like the wiki? But, this is awesome to have in here either way :D",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1801,2018-06-13T08:58:48Z,2018-06-18T21:55:53Z,2018-06-18T21:55:54Z,CLOSED,False,41,0,1,https://github.com/airween,Added some documentation for multipart boundary check,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1801,https://github.com/airween,3,https://github.com/SpiderLabs/ModSecurity/pull/1801#issuecomment-397533255,,"Well, this patch affects only the 3.x tree, but looks like the complete 3.x documentation is missing. :)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1801,2018-06-13T08:58:48Z,2018-06-18T21:55:53Z,2018-06-18T21:55:54Z,CLOSED,False,41,0,1,https://github.com/airween,Added some documentation for multipart boundary check,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1801,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1801#issuecomment-398208324,,Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1806,2018-06-18T23:10:12Z,2018-06-19T01:30:28Z,2018-06-19T01:30:28Z,CLOSED,False,0,6,1,https://github.com/Richardds,Remove unsupported configuration parameter,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1806,https://github.com/Richardds,1,https://github.com/SpiderLabs/ModSecurity/pull/1806,"nginx: [emerg] ""modsecurity_rules_file"" directive Rules error. File: /etc/nginx/modsec/modsecurity.conf. Line: 37. Column: 33. As of ModSecurity version 3.0, SecRequestBodyInMemoryLimit is no longer supported. Instead, you can use your web server configurations to control those values. ModSecurity will follow the web server decision. in /etc/nginx/sites-enabled/default.conf:3","nginx: [emerg] ""modsecurity_rules_file"" directive Rules error. File: /etc/nginx/modsec/modsecurity.conf. Line: 37. Column: 33. As of ModSecurity version 3.0, SecRequestBodyInMemoryLimit is no longer supported. Instead, you can use your web server configurations to control those values. ModSecurity will follow the web server decision. in /etc/nginx/sites-enabled/default.conf:3",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1806,2018-06-18T23:10:12Z,2018-06-19T01:30:28Z,2018-06-19T01:30:28Z,CLOSED,False,0,6,1,https://github.com/Richardds,Remove unsupported configuration parameter,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1806,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1806#issuecomment-398245680,"nginx: [emerg] ""modsecurity_rules_file"" directive Rules error. File: /etc/nginx/modsec/modsecurity.conf. Line: 37. Column: 33. As of ModSecurity version 3.0, SecRequestBodyInMemoryLimit is no longer supported. Instead, you can use your web server configurations to control those values. ModSecurity will follow the web server decision. in /etc/nginx/sites-enabled/default.conf:3","Hi @Richardds,
Thank you for your patch. The configuration in question is no longer valid for version 3, which is hosted here:

  
    
      ModSecurity/modsecurity.conf-recommended
    
    
         Line 1
      in
      4e3a1f7
    
  
  
    

        
          
           # -- Rule engine initialization ---------------------------------------------- 
        
    
  


The one that you have patched is the configuration for version 2 in which this entry still valid. Therefore, I am closing this pull request.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1807,2018-06-19T00:35:34Z,2018-08-23T16:14:15Z,2018-08-23T16:14:15Z,CLOSED,False,6678,6472,11,https://github.com/victorhora,Adds support for ctl:requestBodyProcessor=URLENCODED,2,"['RIP - libmodsecurity', 'libmodsec - missing features', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1807,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1807,Adds support for URLENCODED body processor as defined at WWWFormUrlEncoded. Should fix #1797,Adds support for URLENCODED body processor as defined at WWWFormUrlEncoded. Should fix #1797,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1807,2018-06-19T00:35:34Z,2018-08-23T16:14:15Z,2018-08-23T16:14:15Z,CLOSED,False,6678,6472,11,https://github.com/victorhora,Adds support for ctl:requestBodyProcessor=URLENCODED,2,"['RIP - libmodsecurity', 'libmodsec - missing features', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1807,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1807#issuecomment-401144519,Adds support for URLENCODED body processor as defined at WWWFormUrlEncoded. Should fix #1797,https://gist.github.com/zimmerle/2e047fb9f60bce10a5596d1d2995bac4,True,{'HEART': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1807,2018-06-19T00:35:34Z,2018-08-23T16:14:15Z,2018-08-23T16:14:15Z,CLOSED,False,6678,6472,11,https://github.com/victorhora,Adds support for ctl:requestBodyProcessor=URLENCODED,2,"['RIP - libmodsecurity', 'libmodsec - missing features', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1807,https://github.com/victorhora,3,https://github.com/SpiderLabs/ModSecurity/pull/1807#issuecomment-415475797,Adds support for URLENCODED body processor as defined at WWWFormUrlEncoded. Should fix #1797,Merged as of f999f54 and aa158ce,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1810,2018-06-20T22:49:57Z,2018-06-26T17:19:26Z,2018-06-26T17:19:26Z,CLOSED,False,4,2,2,https://github.com/victorhora,Fix variables case sensitiveness,1,"['RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1810,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1810,Changes the behaviour of the collection backend to fix an issue where variables were case sensitive in some scenarios. Should fix #1808.,Changes the behaviour of the collection backend to fix an issue where variables were case sensitive in some scenarios. Should fix #1808.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1810,2018-06-20T22:49:57Z,2018-06-26T17:19:26Z,2018-06-26T17:19:26Z,CLOSED,False,4,2,2,https://github.com/victorhora,Fix variables case sensitiveness,1,"['RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1810,https://github.com/theMiddleBlue,2,https://github.com/SpiderLabs/ModSecurity/pull/1810#issuecomment-399057872,Changes the behaviour of the collection backend to fix an issue where variables were case sensitive in some scenarios. Should fix #1808.,"Tested with setvar:tx.paranoia_level=1, it works! Thanks @victorhora !",True,{'HOORAY': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1810,2018-06-20T22:49:57Z,2018-06-26T17:19:26Z,2018-06-26T17:19:26Z,CLOSED,False,4,2,2,https://github.com/victorhora,Fix variables case sensitiveness,1,"['RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1810,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1810#issuecomment-400395155,Changes the behaviour of the collection backend to fix an issue where variables were case sensitive in some scenarios. Should fix #1808.,fixed by: d810de9,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1814,2018-06-21T18:19:28Z,2018-07-27T19:50:58Z,2018-07-27T20:47:43Z,CLOSED,False,40,15,3,https://github.com/p0pr0ck5,Implement support for Lua 5.1,1,"['enhancement', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1814,https://github.com/p0pr0ck5,1,https://github.com/SpiderLabs/ModSecurity/pull/1814,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1814,2018-06-21T18:19:28Z,2018-07-27T19:50:58Z,2018-07-27T20:47:43Z,CLOSED,False,40,15,3,https://github.com/p0pr0ck5,Implement support for Lua 5.1,1,"['enhancement', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1814,https://github.com/p0pr0ck5,2,https://github.com/SpiderLabs/ModSecurity/pull/1814#issuecomment-406713801,,@victorhora @zimmerle any movement here?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1814,2018-06-21T18:19:28Z,2018-07-27T19:50:58Z,2018-07-27T20:47:43Z,CLOSED,False,40,15,3,https://github.com/p0pr0ck5,Implement support for Lua 5.1,1,"['enhancement', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1814,https://github.com/victorhora,3,https://github.com/SpiderLabs/ModSecurity/pull/1814#issuecomment-408521993,,"All good, merged at dee9898. Thanks @p0pr0ck5 :)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1820,2018-06-26T12:01:29Z,2018-06-26T17:19:21Z,2018-06-26T17:19:21Z,CLOSED,False,42,4,2,https://github.com/michaelgranzow-avi,"#1818: Variable names must match fully, not partially; also revert to…",1,[],https://github.com/SpiderLabs/ModSecurity/pull/1820,https://github.com/michaelgranzow-avi,1,https://github.com/SpiderLabs/ModSecurity/pull/1820,"… hash table lookup instead of linear search; add test case
Propsed fix for #1818","… hash table lookup instead of linear search; add test case
Propsed fix for #1818",True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1820,2018-06-26T12:01:29Z,2018-06-26T17:19:21Z,2018-06-26T17:19:21Z,CLOSED,False,42,4,2,https://github.com/michaelgranzow-avi,"#1818: Variable names must match fully, not partially; also revert to…",1,[],https://github.com/SpiderLabs/ModSecurity/pull/1820,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1820#issuecomment-400395138,"… hash table lookup instead of linear search; add test case
Propsed fix for #1818",fixed by: d810de9,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1821,2018-06-27T22:16:52Z,2018-11-21T01:22:11Z,2018-11-21T01:22:11Z,CLOSED,False,20,33,1,https://github.com/allanbomsft,Multipart boundary parsing as per RFC,1,"['enhancement', '2.x']",https://github.com/SpiderLabs/ModSecurity/pull/1821,https://github.com/allanbomsft,1,https://github.com/SpiderLabs/ModSecurity/pull/1821,Update the multipart parser to allow characters in boundaries as per RFC2046 page 21.,Update the multipart parser to allow characters in boundaries as per RFC2046 page 21.,True,{'THUMBS_UP': ['https://github.com/splacento-incomm']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1821,2018-06-27T22:16:52Z,2018-11-21T01:22:11Z,2018-11-21T01:22:11Z,CLOSED,False,20,33,1,https://github.com/allanbomsft,Multipart boundary parsing as per RFC,1,"['enhancement', '2.x']",https://github.com/SpiderLabs/ModSecurity/pull/1821,https://github.com/victorhora,2,https://github.com/SpiderLabs/ModSecurity/pull/1821#issuecomment-418898818,Update the multipart parser to allow characters in boundaries as per RFC2046 page 21.,This would fix #653?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1821,2018-06-27T22:16:52Z,2018-11-21T01:22:11Z,2018-11-21T01:22:11Z,CLOSED,False,20,33,1,https://github.com/allanbomsft,Multipart boundary parsing as per RFC,1,"['enhancement', '2.x']",https://github.com/SpiderLabs/ModSecurity/pull/1821,https://github.com/victorhora,3,https://github.com/SpiderLabs/ModSecurity/pull/1821#issuecomment-438821220,Update the multipart parser to allow characters in boundaries as per RFC2046 page 21.,"According to the RFC2046 page 22, indeed the parser seemed to be more strict than it should. I believe this is safe to be merged.
As I'm not a fan of writing test cases for v2 (:P), I've written a test case for v3 and adapted this patch at #1955.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1821,2018-06-27T22:16:52Z,2018-11-21T01:22:11Z,2018-11-21T01:22:11Z,CLOSED,False,20,33,1,https://github.com/allanbomsft,Multipart boundary parsing as per RFC,1,"['enhancement', '2.x']",https://github.com/SpiderLabs/ModSecurity/pull/1821,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1821#issuecomment-440493062,Update the multipart parser to allow characters in boundaries as per RFC2046 page 21.,merged ;) thanks.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1822,2018-06-27T22:25:22Z,2018-11-29T13:49:39Z,2018-11-29T13:49:39Z,CLOSED,False,1,1,1,https://github.com/allanbomsft,Allow 0 length JSON requests,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1822,https://github.com/allanbomsft,1,https://github.com/SpiderLabs/ModSecurity/pull/1822,"Allow 0 length JSON requests.
0 length XML and multipart already allowed.","Allow 0 length JSON requests.
0 length XML and multipart already allowed.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1822,2018-06-27T22:25:22Z,2018-11-29T13:49:39Z,2018-11-29T13:49:39Z,CLOSED,False,1,1,1,https://github.com/allanbomsft,Allow 0 length JSON requests,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1822,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1822#issuecomment-400850757,"Allow 0 length JSON requests.
0 length XML and multipart already allowed.","Hi @allanbomsft,
As discussed here: #1767 and here: #1392. That may not be a good idea as the content type state that a JSON is expected. At very least, I would expected an empty JSON, which will be:
{
}

What is your take on that?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1822,2018-06-27T22:25:22Z,2018-11-29T13:49:39Z,2018-11-29T13:49:39Z,CLOSED,False,1,1,1,https://github.com/allanbomsft,Allow 0 length JSON requests,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1822,https://github.com/allanbomsft,3,https://github.com/SpiderLabs/ModSecurity/pull/1822#issuecomment-401445277,"Allow 0 length JSON requests.
0 length XML and multipart already allowed.","The backstory: we had a customer escalation where their application was posting 0 length requests. Probably it was just zero-parameter RPC calls, and their HTTP client library was probably set up globally to use content type json.
It's kind of like passing null, and seems pretty harmless to me.
We allow 0 length for xml and form/multipart, so I think we should align to this.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1822,2018-06-27T22:25:22Z,2018-11-29T13:49:39Z,2018-11-29T13:49:39Z,CLOSED,False,1,1,1,https://github.com/allanbomsft,Allow 0 length JSON requests,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1822,https://github.com/allanbomsft,4,https://github.com/SpiderLabs/ModSecurity/pull/1822#issuecomment-401445517,"Allow 0 length JSON requests.
0 length XML and multipart already allowed.","Otherwise maybe we should align so xml also requires at least
<something></something>
and form/multipart similar idea.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1822,2018-06-27T22:25:22Z,2018-11-29T13:49:39Z,2018-11-29T13:49:39Z,CLOSED,False,1,1,1,https://github.com/allanbomsft,Allow 0 length JSON requests,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1822,https://github.com/victorhora,5,https://github.com/SpiderLabs/ModSecurity/pull/1822#issuecomment-416365174,"Allow 0 length JSON requests.
0 length XML and multipart already allowed.",#1618 (comment),True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1822,2018-06-27T22:25:22Z,2018-11-29T13:49:39Z,2018-11-29T13:49:39Z,CLOSED,False,1,1,1,https://github.com/allanbomsft,Allow 0 length JSON requests,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1822,https://github.com/victorhora,6,https://github.com/SpiderLabs/ModSecurity/pull/1822#issuecomment-439239640,"Allow 0 length JSON requests.
0 length XML and multipart already allowed.","Adding a bit more to this discussion, It seems like the request body parser for JSON and XML is behaving a bit differently when it comes to overall validation on v2.
For instance using an invalid JSON (or XML) request like so:
POST /token HTTP/1.1
Host: 127.0.0.1
User-Agent: curl/7.61.1
Accept: */*
Cache-Control: no-cache
Content-Type: application/json
origin: https://really.ai
referer: https://really.ai/
x-really-referer: https://really.ai/
Content-Length: 6

123450

Results in the following:
[Using Content-Type: application/json]:
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Initialising transaction (txid W@xLHfhy6OgbU1ioBl7fXQAAAAA).
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Transaction context created (dcfg 5630155a0230).
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Starting phase REQUEST_HEADERS.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][9] This phase consists of 2 rule(s).
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Recipe: Invoking rule 5630155bd498; [file ""/usr/local/nginx/conf/modsecurity.conf""] [line ""23""] [id ""200000""].
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][5] Rule 5630155bd498: SecRule ""REQUEST_HEADERS:Content-Type"" ""@rx (?:application(?:/soap\\+|/)|text/)xml"" ""phase:1,auditlog,id:200000,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=XML""
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][9] T (0) lowercase: ""application/json""
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Transformation completed in 18 usec.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Executing operator ""rx"" with param ""(?:application(?:/soap\\+|/)|text/)xml"" against REQUEST_HEADERS:Content-Type.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][9] Target value: ""application/json""
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Operator completed in 14 usec.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Rule returned 0.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][9] No match, not chained -> mode NEXT_RULE.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Recipe: Invoking rule 5630155c2f40; [file ""/usr/local/nginx/conf/modsecurity.conf""] [line ""30""] [id ""200001""].
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][5] Rule 5630155c2f40: SecRule ""REQUEST_HEADERS:Content-Type"" ""@rx application/json"" ""phase:1,auditlog,id:200001,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=JSON""
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][9] T (0) lowercase: ""application/json""
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Transformation completed in 9 usec.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Executing operator ""rx"" with param ""application/json"" against REQUEST_HEADERS:Content-Type.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][9] Target value: ""application/json""
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Operator completed in 5 usec.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Ctl: Set requestBodyProcessor to JSON.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Warning. Pattern match ""application/json"" at REQUEST_HEADERS:Content-Type. [file ""/usr/local/nginx/conf/modsecurity.conf""] [line ""30""] [id ""200001""]
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Rule returned 1.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][9] Match -> mode NEXT_RULE.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Second phase starting (dcfg 5630155a0230).
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Input filter: Reading request body.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] JSON parser initialization
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][9] yajl JSON parsing callback initialization
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][9] Input filter: Bucket type HEAP contains 6 bytes.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][9] Input filter: Bucket type EOS contains 0 bytes.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][3] Cannot add scalar value without an associated key
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Request body no files length: 6
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Input filter: Completed receiving request body (length 6).
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Starting phase REQUEST_BODY.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][9] This phase consists of 4 rule(s).
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Recipe: Invoking rule 5630155c0a20; [file ""/usr/local/nginx/conf/modsecurity.conf""] [line ""54""] [id ""200002""].
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][5] Rule 5630155c0a20: SecRule ""REQBODY_ERROR"" ""!@eq 0"" ""phase:2,auditlog,id:200002,t:none,log,deny,status:400,msg:'Failed to parse request body.',logdata:%{reqbody_error_msg},severity:2""
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Transformation completed in 1 usec.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Executing operator ""!eq"" with param ""0"" against REQBODY_ERROR.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][9] Target value: ""0""
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Operator completed in 3 usec.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Rule returned 0.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][9] No match, not chained -> mode NEXT_RULE.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Recipe: Invoking rule 5630155c44f8; [file ""/usr/local/nginx/conf/modsecurity.conf""] [line ""75""] [id ""200003""].
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][5] Rule 5630155c44f8: SecRule ""MULTIPART_STRICT_ERROR"" ""!@eq 0"" ""phase:2,auditlog,id:200003,t:none,log,deny,status:400,msg:'Multipart request body failed strict validation: PE %{REQBODY_PROCESSOR_ERROR}, BQ %{MULTIPART_BOUNDARY_QUOTED}, BW %{MULTIPART_BOUNDARY_WHITESPACE}, DB %{MULTIPART_DATA_BEFORE}, DA %{MULTIPART_DATA_AFTER}, HF %{MULTIPART_HEADER_FOLDING}, LF %{MULTIPART_LF_LINE}, SM %{MULTIPART_MISSING_SEMICOLON}, IQ %{MULTIPART_INVALID_QUOTING}, IP %{MULTIPART_INVALID_PART}, IH %{MULTIPART_INVALID_HEADER_FOLDING}, FL %{MULTIPART_FILE_LIMIT_EXCEEDED}'""
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Transformation completed in 1 usec.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Executing operator ""!eq"" with param ""0"" against MULTIPART_STRICT_ERROR.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][9] Target value: ""0""
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Operator completed in 1 usec.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Rule returned 0.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][9] No match, not chained -> mode NEXT_RULE.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Recipe: Invoking rule 5630155c9390; [file ""/usr/local/nginx/conf/modsecurity.conf""] [line ""118""] [id ""200004""].
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][5] Rule 5630155c9390: SecRule ""MULTIPART_UNMATCHED_BOUNDARY"" ""!@eq 0"" ""phase:2,auditlog,id:200004,t:none,log,pass,msg:'Multipart parser detected a possible unmatched boundary.'""
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Transformation completed in 0 usec.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Executing operator ""!eq"" with param ""0"" against MULTIPART_UNMATCHED_BOUNDARY.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][9] Target value: ""0""
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Operator completed in 1 usec.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Rule returned 0.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][9] No match, not chained -> mode NEXT_RULE.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Recipe: Invoking rule 5630155caa60; [file ""/usr/local/nginx/conf/modsecurity.conf""] [line ""120""] [id ""200006""].
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][5] Rule 5630155caa60: SecRule ""MULTIPART_UNMATCHED_BOUNDARY"" ""@eq 1"" ""phase:2,auditlog,id:200006,t:none,log,deny,msg:'Multipart parser detected a unmatched boundary.'""
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Transformation completed in 1 usec.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Executing operator ""eq"" with param ""1"" against MULTIPART_UNMATCHED_BOUNDARY.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][9] Target value: ""0""
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Operator completed in 0 usec.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Rule returned 0.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][9] No match, not chained -> mode NEXT_RULE.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Hook insert_filter: Adding input forwarding filter (r 563015602a80).
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Hook insert_filter: Adding output filter (r 563015602a80).
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Input filter: Forwarding input: mode=0, block=0, nbytes=8192 (f 563015614f80, r 563015602a80).
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Input filter: Forwarded 6 bytes.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Input filter: Sent EOS.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Input filter: Input forwarding complete.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015602a80][/token][4] Initialising logging.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015615028][/missing.html][4] Starting phase LOGGING.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015615028][/missing.html][9] This phase consists of 0 rule(s).
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015615028][/missing.html][4] Recording persistent data took 0 microseconds.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015615028][/missing.html][4] Audit log: Logging this transaction.
[14/Nov/2018:11:19:41 --0500] [127.0.0.1/sid#563015585c50][rid#563015615028][/missing.html][4] JSON: Cleaning up JSON results

[Using Content-Type: application/xml]:
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][4] Initialising transaction (txid W@xK72M30SdD5QMHUTnx5wAAAAY).
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][4] Transaction context created (dcfg 5630155a0230).
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][4] Starting phase REQUEST_HEADERS.
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][9] This phase consists of 2 rule(s).
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][4] Recipe: Invoking rule 5630155bd498; [file ""/usr/local/nginx/conf/modsecurity.conf""] [line ""23""] [id ""200000""].
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][5] Rule 5630155bd498: SecRule ""REQUEST_HEADERS:Content-Type"" ""@rx (?:application(?:/soap\\+|/)|text/)xml"" ""phase:1,auditlog,id:200000,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=XML""
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][9] T (0) lowercase: ""application/xml""
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][4] Transformation completed in 25 usec.
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][4] Executing operator ""rx"" with param ""(?:application(?:/soap\\+|/)|text/)xml"" against REQUEST_HEADERS:Content-Type.
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][9] Target value: ""application/xml""
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][4] Operator completed in 10 usec.
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][4] Ctl: Set requestBodyProcessor to XML.
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][4] Warning. Pattern match ""(?:application(?:/soap\\+|/)|text/)xml"" at REQUEST_HEADERS:Content-Type. [file ""/usr/local/nginx/conf/modsecurity.conf""] [line ""23""] [id ""200000""]
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][4] Rule returned 1.
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][9] Match -> mode NEXT_RULE.
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][4] Recipe: Invoking rule 5630155c2f40; [file ""/usr/local/nginx/conf/modsecurity.conf""] [line ""30""] [id ""200001""].
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][5] Rule 5630155c2f40: SecRule ""REQUEST_HEADERS:Content-Type"" ""@rx application/json"" ""phase:1,auditlog,id:200001,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=JSON""
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][9] T (0) lowercase: ""application/xml""
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][4] Transformation completed in 7 usec.
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][4] Executing operator ""rx"" with param ""application/json"" against REQUEST_HEADERS:Content-Type.
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][9] Target value: ""application/xml""
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][4] Operator completed in 1 usec.
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][4] Rule returned 0.
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][9] No match, not chained -> mode NEXT_RULE.
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][4] Second phase starting (dcfg 5630155a0230).
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][4] Input filter: Reading request body.
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][9] Input filter: Bucket type HEAP contains 6 bytes.
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][4] XML: Initialising parser.
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][9] Input filter: Bucket type EOS contains 0 bytes.
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][4] XML: Parsing complete (well_formed 0).
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][2] XML parser error: XML: Failed parsing document.
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][4] Input filter: Completed receiving request body (length 6).
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][1] XML parser error: XML: Failed parsing document.
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][4] Hook insert_error_filter: Adding output filter (r 563015616ca0).
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][9] Output filter: Receiving output (f 56301560ef40, r 563015616ca0).
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][4] Starting phase RESPONSE_HEADERS.
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][9] This phase consists of 0 rule(s).
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][9] Content Injection: Not enabled.
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][9] Output filter: Bucket type HEAP contains 26 bytes.
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][9] Output filter: Bucket type EOS contains 0 bytes.
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][4] Output filter: Completed receiving response body (buffered full - 26 bytes).
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][4] Starting phase RESPONSE_BODY.
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][9] This phase consists of 0 rule(s).
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][4] Output filter: Output forwarding complete.
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][4] Initialising logging.
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][4] Starting phase LOGGING.
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][9] This phase consists of 0 rule(s).
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][4] Recording persistent data took 0 microseconds.
[14/Nov/2018:11:18:55 --0500] [127.0.0.1/sid#563015585c50][rid#563015616ca0][/token][4] Audit log: Logging this transaction.

This brings up the following on the error log and returns a 500 error from Apache by default:
ModSecurity: XML parser error: XML: Failed parsing document.
body.xml:1: parser error : Document is empty
123450

Notice that even though the parser failed for both, the JSON parser ends up being more forgiving and still allow the REQUEST_BODY phase (2) to start and process the rules on this phase before moving over to the next phase (RESPONSE_HEADERS).
But for the 0 length requests, it's the opposite. For a request like so:
POST /token HTTP/1.1
Host: 127.0.0.1
User-Agent: curl/7.61.1
Accept: */*
Cache-Control: no-cache
Content-Type: application/json
origin: https://really.ai
referer: https://really.ai/
x-really-referer: https://really.ai/
Content-Length: 0

Results in the following:
[Using Content-Type: application/json]:
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][4] Initialising transaction (txid W@xIdC5@fA4XFLcXw7-g0AAAAAQ).
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][4] Transaction context created (dcfg 5630155a0230).
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][4] Starting phase REQUEST_HEADERS.
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][9] This phase consists of 2 rule(s).
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][4] Recipe: Invoking rule 5630155bd498; [file ""/usr/local/nginx/conf/modsecurity.conf""] [line ""23""] [id ""200000""].
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][5] Rule 5630155bd498: SecRule ""REQUEST_HEADERS:Content-Type"" ""@rx (?:application(?:/soap\\+|/)|text/)xml"" ""phase:1,auditlog,id:200000,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=XML""
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][9] T (0) lowercase: ""application/json""
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][4] Transformation completed in 9 usec.
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][4] Executing operator ""rx"" with param ""(?:application(?:/soap\\+|/)|text/)xml"" against REQUEST_HEADERS:Content-Type.
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][9] Target value: ""application/json""
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][4] Operator completed in 10 usec.
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][4] Rule returned 0.
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][9] No match, not chained -> mode NEXT_RULE.
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][4] Recipe: Invoking rule 5630155c2f40; [file ""/usr/local/nginx/conf/modsecurity.conf""] [line ""30""] [id ""200001""].
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][5] Rule 5630155c2f40: SecRule ""REQUEST_HEADERS:Content-Type"" ""@rx application/json"" ""phase:1,auditlog,id:200001,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=JSON""
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][9] T (0) lowercase: ""application/json""
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][4] Transformation completed in 6 usec.
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][4] Executing operator ""rx"" with param ""application/json"" against REQUEST_HEADERS:Content-Type.
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][9] Target value: ""application/json""
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][4] Operator completed in 3 usec.
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][4] Ctl: Set requestBodyProcessor to JSON.
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][4] Warning. Pattern match ""application/json"" at REQUEST_HEADERS:Content-Type. [file ""/usr/local/nginx/conf/modsecurity.conf""] [line ""30""] [id ""200001""]
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][4] Rule returned 1.
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][9] Match -> mode NEXT_RULE.
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][4] Second phase starting (dcfg 5630155a0230).
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][4] Input filter: Reading request body.
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][4] JSON parser initialization
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][9] yajl JSON parsing callback initialization
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][9] Input filter: Bucket type EOS contains 0 bytes.
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][2] JSON parser error: parse error: premature EOF

[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][4] Input filter: Completed receiving request body (length 0).
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][1] JSON parser error: parse error: premature EOF

[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][4] Hook insert_error_filter: Adding output filter (r 563015604aa0).
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][9] Output filter: Receiving output (f 563015602da0, r 563015604aa0).
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][4] Starting phase RESPONSE_HEADERS.
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][9] This phase consists of 0 rule(s).
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][9] Content Injection: Not enabled.
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][9] Output filter: Bucket type HEAP contains 26 bytes.
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][9] Output filter: Bucket type EOS contains 0 bytes.
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][4] Output filter: Completed receiving response body (buffered full - 26 bytes).
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][4] Starting phase RESPONSE_BODY.
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][9] This phase consists of 0 rule(s).
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][4] Output filter: Output forwarding complete.
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][4] Initialising logging.
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][4] Starting phase LOGGING.
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][9] This phase consists of 0 rule(s).
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][4] Recording persistent data took 0 microseconds.
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][4] Audit log: Logging this transaction.
[14/Nov/2018:11:08:20 --0500] [127.0.0.1/sid#563015585c50][rid#563015604aa0][/token][4] JSON: Cleaning up JSON results

This brings up a ModSecurity: JSON parser error: parse error: premature EOF\non the error log and returns a 500 error from Apache by default.
On the case of the JSON parsing, yajl_complete_parse() as is, will not return yajl_status_ok for yajl_status() when the JSON handle is empty.

  
    
      ModSecurity/apache2/msc_json.c
    
    
        Lines 296 to 311
      in
      d8c7112
    
  
  
    

        
          
           int json_complete(modsec_rec *msr, char **error_msg) { 
        

        
          
               char *json_data = (char *) NULL; 
        

        
          
            
        

        
          
               if (error_msg == NULL) return -1; 
        

        
          
               *error_msg = NULL; 
        

        
          
            
        

        
          
               /* Wrap up the parsing process */ 
        

        
          
               msr->json->status = yajl_complete_parse(msr->json->handle); 
        

        
          
               if (msr->json->status != yajl_status_ok) { 
        

        
          
                   /* We need to free the yajl error message later, how to do this? */ 
        

        
          
                   *error_msg = yajl_get_error(msr->json->handle, 0, NULL, 0); 
        

        
          
                   return -1; 
        

        
          
               } 
        

        
          
            
        

        
          
               return 1; 
        

        
          
           } 
        
    
  


(As a reminder, this PR, adds a workaround to change the scenario above checking that the length is large enough for the JSON parser to run successfully and allowing for phase 2 to continue.)
Moving on...
[Using Content-Type: application/xml]:
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Initialising transaction (txid W@xH09kj6Ugdr2svgPdYdwAAAAM).
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Transaction context created (dcfg 5630155a0230).
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Starting phase REQUEST_HEADERS.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][9] This phase consists of 2 rule(s).
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Recipe: Invoking rule 5630155bd498; [file ""/usr/local/nginx/conf/modsecurity.conf""] [line ""23""] [id ""200000""].
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][5] Rule 5630155bd498: SecRule ""REQUEST_HEADERS:Content-Type"" ""@rx (?:application(?:/soap\\+|/)|text/)xml"" ""phase:1,auditlog,id:200000,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=XML""
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][9] T (0) lowercase: ""application/xml""
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Transformation completed in 12 usec.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Executing operator ""rx"" with param ""(?:application(?:/soap\\+|/)|text/)xml"" against REQUEST_HEADERS:Content-Type.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][9] Target value: ""application/xml""
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Operator completed in 18 usec.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Ctl: Set requestBodyProcessor to XML.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Warning. Pattern match ""(?:application(?:/soap\\+|/)|text/)xml"" at REQUEST_HEADERS:Content-Type. [file ""/usr/local/nginx/conf/modsecurity.conf""] [line ""23""] [id ""200000""]
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Rule returned 1.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][9] Match -> mode NEXT_RULE.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Recipe: Invoking rule 5630155c2f40; [file ""/usr/local/nginx/conf/modsecurity.conf""] [line ""30""] [id ""200001""].
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][5] Rule 5630155c2f40: SecRule ""REQUEST_HEADERS:Content-Type"" ""@rx application/json"" ""phase:1,auditlog,id:200001,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=JSON""
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][9] T (0) lowercase: ""application/xml""
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Transformation completed in 5 usec.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Executing operator ""rx"" with param ""application/json"" against REQUEST_HEADERS:Content-Type.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][9] Target value: ""application/xml""
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Operator completed in 1 usec.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Rule returned 0.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][9] No match, not chained -> mode NEXT_RULE.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Second phase starting (dcfg 5630155a0230).
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Input filter: Reading request body.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][9] Input filter: Bucket type EOS contains 0 bytes.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Request body no files length: 0
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Input filter: Completed receiving request body (length 0).
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Starting phase REQUEST_BODY.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][9] This phase consists of 4 rule(s).
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Recipe: Invoking rule 5630155c0a20; [file ""/usr/local/nginx/conf/modsecurity.conf""] [line ""54""] [id ""200002""].
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][5] Rule 5630155c0a20: SecRule ""REQBODY_ERROR"" ""!@eq 0"" ""phase:2,auditlog,id:200002,t:none,log,deny,status:400,msg:'Failed to parse request body.',logdata:%{reqbody_error_msg},severity:2""
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Transformation completed in 2 usec.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Executing operator ""!eq"" with param ""0"" against REQBODY_ERROR.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][9] Target value: ""0""
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Operator completed in 4 usec.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Rule returned 0.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][9] No match, not chained -> mode NEXT_RULE.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Recipe: Invoking rule 5630155c44f8; [file ""/usr/local/nginx/conf/modsecurity.conf""] [line ""75""] [id ""200003""].
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][5] Rule 5630155c44f8: SecRule ""MULTIPART_STRICT_ERROR"" ""!@eq 0"" ""phase:2,auditlog,id:200003,t:none,log,deny,status:400,msg:'Multipart request body failed strict validation: PE %{REQBODY_PROCESSOR_ERROR}, BQ %{MULTIPART_BOUNDARY_QUOTED}, BW %{MULTIPART_BOUNDARY_WHITESPACE}, DB %{MULTIPART_DATA_BEFORE}, DA %{MULTIPART_DATA_AFTER}, HF %{MULTIPART_HEADER_FOLDING}, LF %{MULTIPART_LF_LINE}, SM %{MULTIPART_MISSING_SEMICOLON}, IQ %{MULTIPART_INVALID_QUOTING}, IP %{MULTIPART_INVALID_PART}, IH %{MULTIPART_INVALID_HEADER_FOLDING}, FL %{MULTIPART_FILE_LIMIT_EXCEEDED}'""
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Transformation completed in 2 usec.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Executing operator ""!eq"" with param ""0"" against MULTIPART_STRICT_ERROR.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][9] Target value: ""0""
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Operator completed in 1 usec.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Rule returned 0.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][9] No match, not chained -> mode NEXT_RULE.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Recipe: Invoking rule 5630155c9390; [file ""/usr/local/nginx/conf/modsecurity.conf""] [line ""118""] [id ""200004""].
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][5] Rule 5630155c9390: SecRule ""MULTIPART_UNMATCHED_BOUNDARY"" ""!@eq 0"" ""phase:2,auditlog,id:200004,t:none,log,pass,msg:'Multipart parser detected a possible unmatched boundary.'""
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Transformation completed in 1 usec.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Executing operator ""!eq"" with param ""0"" against MULTIPART_UNMATCHED_BOUNDARY.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][9] Target value: ""0""
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Operator completed in 1 usec.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Rule returned 0.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][9] No match, not chained -> mode NEXT_RULE.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Recipe: Invoking rule 5630155caa60; [file ""/usr/local/nginx/conf/modsecurity.conf""] [line ""120""] [id ""200006""].
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][5] Rule 5630155caa60: SecRule ""MULTIPART_UNMATCHED_BOUNDARY"" ""@eq 1"" ""phase:2,auditlog,id:200006,t:none,log,deny,msg:'Multipart parser detected a unmatched boundary.'""
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Transformation completed in 0 usec.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Executing operator ""eq"" with param ""1"" against MULTIPART_UNMATCHED_BOUNDARY.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][9] Target value: ""0""
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Operator completed in 1 usec.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Rule returned 0.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][9] No match, not chained -> mode NEXT_RULE.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Hook insert_filter: Adding input forwarding filter (r 563015612c60).
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Hook insert_filter: Adding output filter (r 563015612c60).
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Input filter: Forwarding input: mode=0, block=0, nbytes=8192 (f 563015618de0, r 563015612c60).
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Input filter: Sent EOS.
[14/Nov/2018:11:05:39 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Input filter: Input forwarding complete.
[14/Nov/2018:11:05:44 --0500] [127.0.0.1/sid#563015585c50][rid#563015612c60][/token][4] Initialising logging.
[14/Nov/2018:11:05:44 --0500] [127.0.0.1/sid#563015585c50][rid#563015618e88][/missing.html][4] Starting phase LOGGING.
[14/Nov/2018:11:05:44 --0500] [127.0.0.1/sid#563015585c50][rid#563015618e88][/missing.html][9] This phase consists of 0 rule(s).
[14/Nov/2018:11:05:44 --0500] [127.0.0.1/sid#563015585c50][rid#563015618e88][/missing.html][4] Recording persistent data took 0 microseconds.
[14/Nov/2018:11:05:44 --0500] [127.0.0.1/sid#563015585c50][rid#563015618e88][/missing.html][4] Audit log: Logging this transaction.

The scenario above happens due to xml_complete() not satisfying the following condition:

  
    
      ModSecurity/apache2/msc_xml.c
    
    
         Line 114
      in
      d8c7112
    
  
  
    

        
          
           if (msr->xml->parsing_ctx != NULL) { 
        
    
  


Due to the expected XML content being empty, parsing_ctx is not set as normally would and it returns 1 allowing the phase to continue.",True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1822,2018-06-27T22:25:22Z,2018-11-29T13:49:39Z,2018-11-29T13:49:39Z,CLOSED,False,1,1,1,https://github.com/allanbomsft,Allow 0 length JSON requests,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1822,https://github.com/victorhora,7,https://github.com/SpiderLabs/ModSecurity/pull/1822#issuecomment-439241063,"Allow 0 length JSON requests.
0 length XML and multipart already allowed.","All that being said, which behaviour is ""correct"" for both cases (invalid and empty data) and for both XML and JSON parsers?
Should we always allow for the phase to go through regardless and and simply fill REQBODY_ERROR with a non zero value  and only and let the rules to do the job of forbidding an empty or invalid request (e.g. rule 200002) or we should stop processing when such conditions are encountered and return an error to Apache (500 by default)?",True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1822,2018-06-27T22:25:22Z,2018-11-29T13:49:39Z,2018-11-29T13:49:39Z,CLOSED,False,1,1,1,https://github.com/allanbomsft,Allow 0 length JSON requests,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1822,https://github.com/marcstern,8,https://github.com/SpiderLabs/ModSecurity/pull/1822#issuecomment-439320138,"Allow 0 length JSON requests.
0 length XML and multipart already allowed.","If you don't provide a way to accept this, we won't be able to support
some (buggy) applications.
If we know it's the (incorrect but) expected behaviour, we must have a
way to let the request in.
An internal error don't allow you to add an exception, so the
REQBODY_ERROR seems the only possibility for me (unless you add some
rules before the ctl:requestBodyProcessor one).
…
On 16-11-18 01:37, Victor Hora wrote:

 All that being said, which behaviour is ""correct"" for both cases
 (invalid and empty data) and for both XML and JSON parsers?

 Should we always allow for the phase to go through regardless and and
 simply fill REQBODY_ERROR with a non zero value and only and let the
 rules to do the job of forbidding an empty or invalid request (e.g.
 rule 200002) or we should stop processing when such conditions are
 encountered and return an error to Apache (500 by default)?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1822,2018-06-27T22:25:22Z,2018-11-29T13:49:39Z,2018-11-29T13:49:39Z,CLOSED,False,1,1,1,https://github.com/allanbomsft,Allow 0 length JSON requests,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1822,https://github.com/marcstern,9,https://github.com/SpiderLabs/ModSecurity/pull/1822#issuecomment-441545110,"Allow 0 length JSON requests.
0 length XML and multipart already allowed.","Work-around for all people having that problem (and the same with other parsers):
We're using the following generic rule (as the last phase:1 rule):
SecRule REQUEST_HEADERS:Content-Length ""^0$"" ""phase:1,t:none,ctl:requestBodyAccess=off""
This totally solves the problem, is totally generic & perene and should, imo, be the default - unless somebody sees a possible attack using an empty body.",True,"{'THUMBS_UP': ['https://github.com/victorhora', 'https://github.com/zimmerle', 'https://github.com/mamacdon']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1822,2018-06-27T22:25:22Z,2018-11-29T13:49:39Z,2018-11-29T13:49:39Z,CLOSED,False,1,1,1,https://github.com/allanbomsft,Allow 0 length JSON requests,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1822,https://github.com/zimmerle,10,https://github.com/SpiderLabs/ModSecurity/pull/1822#issuecomment-442839832,"Allow 0 length JSON requests.
0 length XML and multipart already allowed.","After long discussions here and out of band, I am convinced that @allanbomsft is the best approach. Among of other reasons:

we are going to maintain the approach adapted by other request body interpreters, as cited by @allanbomsft.
as well point by @victorhora, not good idea to broke the original flow of the phase execution.
as @marcstern said: there should be no harm in an empty body. At least till we hear otherwise :)

This was merged into 2.x family and ported to v3. Here is the v3 commit for the reference: d2b14de
Test cases for v3 are here:

  
    
      ModSecurity/test/test-cases/regression/request-body-parser-json.json
    
    
        Lines 83 to 153
      in
      d2b14de
    
  
  
    

        
          
           { 
        

        
          
             ""enabled"":1, 
        

        
          
             ""version_min"":300000, 
        

        
          
             ""title"":""Testing JSON request body parser - issue #1822 (1/2)"", 
        

        
          
             ""expected"":{ 
        

        
          
               ""debug_log"": ""Target value: \""0\"" .Variable: REQBODY_ERROR."" 
        

        
          
             }, 
        

        
          
             ""client"":{ 
        

        
          
               ""ip"":""200.249.12.31"", 
        

        
          
               ""port"":123 
        

        
          
             }, 
        

        
          
             ""request"":{ 
        

        
          
               ""headers"":{ 
        

        
          
                 ""Host"":""localhost"", 
        

        
          
                 ""User-Agent"":""curl/7.38.0"", 
        

        
          
                 ""Accept"":""*/*"", 
        

        
          
                 ""Cookie"": ""PHPSESSID=rAAAAAAA2t5uvjq435r4q7ib3vtdjq120"", 
        

        
          
                 ""Content-Type"": ""application/json"" 
        

        
          
               }, 
        

        
          
               ""uri"":""/?key=value&key=other_value"", 
        

        
          
               ""method"":""POST"", 
        

        
          
               ""body"": [ 
        

        
          
               ] 
        

        
          
             }, 
        

        
          
             ""server"":{ 
        

        
          
               ""ip"":""200.249.12.31"", 
        

        
          
               ""port"":80 
        

        
          
             }, 
        

        
          
             ""rules"":[ 
        

        
          
                 ""SecRuleEngine On"", 
        

        
          
                 ""SecRequestBodyAccess On"", 
        

        
          
                 ""SecRule REQUEST_HEADERS:Content-Type \""application/json\"" \""id:'200001',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=JSON\"""", 
        

        
          
                 ""SecRule REQBODY_ERROR \""0\"" \""id:'200441',phase:3,log\"""" 
        

        
          
             ] 
        

        
          
           }, 
        

        
          
           { 
        

        
          
             ""enabled"":1, 
        

        
          
             ""version_min"":300000, 
        

        
          
             ""title"":""Testing JSON request body parser - issue #1822 (2/2)"", 
        

        
          
             ""expected"":{ 
        

        
          
               ""debug_log"": ""Target value: \""1\"" .Variable: REQBODY_ERROR."" 
        

        
          
             }, 
        

        
          
             ""client"":{ 
        

        
          
               ""ip"":""200.249.12.31"", 
        

        
          
               ""port"":123 
        

        
          
             }, 
        

        
          
             ""request"":{ 
        

        
          
               ""headers"":{ 
        

        
          
                 ""Host"":""localhost"", 
        

        
          
                 ""User-Agent"":""curl/7.38.0"", 
        

        
          
                 ""Accept"":""*/*"", 
        

        
          
                 ""Cookie"": ""PHPSESSID=rAAAAAAA2t5uvjq435r4q7ib3vtdjq120"", 
        

        
          
                 ""Content-Type"": ""application/json"" 
        

        
          
               }, 
        

        
          
               ""uri"":""/?key=value&key=other_value"", 
        

        
          
               ""method"":""POST"", 
        

        
          
               ""body"": [ 
        

        
          
                 ""a"" 
        

        
          
               ] 
        

        
          
             }, 
        

        
          
             ""server"":{ 
        

        
          
               ""ip"":""200.249.12.31"", 
        

        
          
               ""port"":80 
        

        
          
             }, 
        

        
          
             ""rules"":[ 
        

        
          
                 ""SecRuleEngine On"", 
        

        
          
                 ""SecRequestBodyAccess On"", 
        

        
          
                 ""SecRule REQUEST_HEADERS:Content-Type \""application/json\"" \""id:'200001',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=JSON\"""", 
        

        
          
                 ""SecRule REQBODY_ERROR \""0\"" \""id:'200441',phase:3,log\"""" 
        

        
          
             ] 
        

        
          
           } 
        
    
  


Thank you @allanbomsft, and everybody who participate in the discussion.",True,"{'HEART': ['https://github.com/victorhora'], 'THUMBS_UP': ['https://github.com/allanbomsft', 'https://github.com/dune73']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1823,2018-06-27T22:34:35Z,2018-06-27T22:34:51Z,2018-06-27T22:35:04Z,CLOSED,False,94,27,1,https://github.com/allanbomsft,"IIS, buffer request body before taking lock",1,[],https://github.com/SpiderLabs/ModSecurity/pull/1823,https://github.com/allanbomsft,1,https://github.com/SpiderLabs/ModSecurity/pull/1823,"IIS, buffer request body before taking lock. This is to prevent bad clients from sending requests slowly and thereby holding the lock indefinitely.","IIS, buffer request body before taking lock. This is to prevent bad clients from sending requests slowly and thereby holding the lock indefinitely.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1823,2018-06-27T22:34:35Z,2018-06-27T22:34:51Z,2018-06-27T22:35:04Z,CLOSED,False,94,27,1,https://github.com/allanbomsft,"IIS, buffer request body before taking lock",1,[],https://github.com/SpiderLabs/ModSecurity/pull/1823,https://github.com/allanbomsft,2,https://github.com/SpiderLabs/ModSecurity/pull/1823#issuecomment-400851130,"IIS, buffer request body before taking lock. This is to prevent bad clients from sending requests slowly and thereby holding the lock indefinitely.",duplicate PR...,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1826,2018-06-29T18:30:54Z,2018-09-06T13:10:13Z,2018-09-06T13:10:13Z,CLOSED,False,26,46,3,https://github.com/allanbomsft,IIS: no lock on ProcessRequest. No reload of config. (#24),1,[],https://github.com/SpiderLabs/ModSecurity/pull/1826,https://github.com/allanbomsft,1,https://github.com/SpiderLabs/ModSecurity/pull/1826,"IIS: No lock on ProcessRequest. This allows for concurrent requests to happen on IIS.
Also removed the auto reload of config, as this is dangerous to do now where one thread might be using the config while another thread might be reloading it. It's worth sacrificing auto reload for the huge benefit of concurrent requests.
In this pull request the diff alignment around the if(pConfig->m_Config == NULL) section is hard to read, but what I've basically done is taken away the parts that dealt with checking for timestamps.","IIS: No lock on ProcessRequest. This allows for concurrent requests to happen on IIS.
Also removed the auto reload of config, as this is dangerous to do now where one thread might be using the config while another thread might be reloading it. It's worth sacrificing auto reload for the huge benefit of concurrent requests.
In this pull request the diff alignment around the if(pConfig->m_Config == NULL) section is hard to read, but what I've basically done is taken away the parts that dealt with checking for timestamps.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1826,2018-06-29T18:30:54Z,2018-09-06T13:10:13Z,2018-09-06T13:10:13Z,CLOSED,False,26,46,3,https://github.com/allanbomsft,IIS: no lock on ProcessRequest. No reload of config. (#24),1,[],https://github.com/SpiderLabs/ModSecurity/pull/1826,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1826#issuecomment-419087097,"IIS: No lock on ProcessRequest. This allows for concurrent requests to happen on IIS.
Also removed the auto reload of config, as this is dangerous to do now where one thread might be using the config while another thread might be reloading it. It's worth sacrificing auto reload for the huge benefit of concurrent requests.
In this pull request the diff alignment around the if(pConfig->m_Config == NULL) section is hard to read, but what I've basically done is taken away the parts that dealt with checking for timestamps.",Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1847,2018-07-22T17:25:41Z,2018-09-06T18:40:17Z,2018-09-06T18:40:18Z,CLOSED,False,1,1,1,https://github.com/gquintard,Fix pc file,1,"['enhancement', 'RIP - libmodsecurity', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1847,https://github.com/gquintard,1,https://github.com/SpiderLabs/ModSecurity/pull/1847,"the include path can't have @Package@ at the end as we include headers
with
#include <modsecurity/modsecurity.h>
so it's already in there","the include path can't have @Package@ at the end as we include headers
with
#include <modsecurity/modsecurity.h>
so it's already in there",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1847,2018-07-22T17:25:41Z,2018-09-06T18:40:17Z,2018-09-06T18:40:18Z,CLOSED,False,1,1,1,https://github.com/gquintard,Fix pc file,1,"['enhancement', 'RIP - libmodsecurity', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1847,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1847#issuecomment-419199419,"the include path can't have @Package@ at the end as we include headers
with
#include <modsecurity/modsecurity.h>
so it's already in there",Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1852,2018-07-26T20:44:50Z,2018-09-11T23:46:51Z,2018-09-11T23:46:51Z,CLOSED,False,23,2,5,https://github.com/victorhora,Fix OpenBSD build,3,"['RIP - Type - Feature', 'enhancement', 'RIP - libmodsecurity', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1852,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1852,OpenBSD build was breaking due to the lack of wordexp.h. Patch fixes the build by using glob.h when building on OpenBSD. Should fix #1841.,OpenBSD build was breaking due to the lack of wordexp.h. Patch fixes the build by using glob.h when building on OpenBSD. Should fix #1841.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1852,2018-07-26T20:44:50Z,2018-09-11T23:46:51Z,2018-09-11T23:46:51Z,CLOSED,False,23,2,5,https://github.com/victorhora,Fix OpenBSD build,3,"['RIP - Type - Feature', 'enhancement', 'RIP - libmodsecurity', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1852,https://github.com/victorhora,2,https://github.com/SpiderLabs/ModSecurity/pull/1852#issuecomment-408229492,OpenBSD build was breaking due to the lack of wordexp.h. Patch fixes the build by using glob.h when building on OpenBSD. Should fix #1841.,"Maybe we should consider using glob.h by default on all platforms as a matter of best practice due to security concerns with wordexp. That being said, according to the docs, glob.h has ""No tilde expansion or parameter substitution is done; if you want these, use wordexp(3).""
GLOB_TILDE flag could be used for tilde expansion, but as this would require further changes I refrained from doing this at the moment.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1852,2018-07-26T20:44:50Z,2018-09-11T23:46:51Z,2018-09-11T23:46:51Z,CLOSED,False,23,2,5,https://github.com/victorhora,Fix OpenBSD build,3,"['RIP - Type - Feature', 'enhancement', 'RIP - libmodsecurity', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1852,https://github.com/victorhora,3,https://github.com/SpiderLabs/ModSecurity/pull/1852#issuecomment-408253460,OpenBSD build was breaking due to the lack of wordexp.h. Patch fixes the build by using glob.h when building on OpenBSD. Should fix #1841.,"Wondering if something like:
Include test-cases/data/config_example2*.*

Would be a valid test scenario to prove that expandEnv() is also functionally correct when using glob.
Thoughts?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1852,2018-07-26T20:44:50Z,2018-09-11T23:46:51Z,2018-09-11T23:46:51Z,CLOSED,False,23,2,5,https://github.com/victorhora,Fix OpenBSD build,3,"['RIP - Type - Feature', 'enhancement', 'RIP - libmodsecurity', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1852,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1852#issuecomment-420463619,OpenBSD build was breaking due to the lack of wordexp.h. Patch fixes the build by using glob.h when building on OpenBSD. Should fix #1841.,Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1854,2018-07-27T20:19:29Z,2018-08-22T16:13:23Z,2018-08-22T16:13:23Z,CLOSED,False,7,1,2,https://github.com/victorhora,Allow LuaJIT to be used,1,"['RIP - Type - Feature', 'enhancement', 'RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1854,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1854,"Following the addition of Lua 5.1 compatibility with libModSecurity at dee9898, this PR tries to address support for LuaJIT. The output of the configure script after applying the patch should be something like:

...
configure: LUA library found at: /usr/lib/x86_64-linux-gnu//libluajit-5.1.so
configure: LUA headers found at: /usr/include/luajit-2.0
configure: LUA version from includes: 501
configure: using LUA -lluajit-5.1
...

   + LUA                                           ....found v501
      -lluajit-5.1 -L/usr/lib/x86_64-linux-gnu/, -DWITH_LUA -DWITH_LUA_5_1 -I/usr/include/luajit-2.0

Should finish solving the issue regarding LuaJIT support at #1809","Following the addition of Lua 5.1 compatibility with libModSecurity at dee9898, this PR tries to address support for LuaJIT. The output of the configure script after applying the patch should be something like:

...
configure: LUA library found at: /usr/lib/x86_64-linux-gnu//libluajit-5.1.so
configure: LUA headers found at: /usr/include/luajit-2.0
configure: LUA version from includes: 501
configure: using LUA -lluajit-5.1
...

   + LUA                                           ....found v501
      -lluajit-5.1 -L/usr/lib/x86_64-linux-gnu/, -DWITH_LUA -DWITH_LUA_5_1 -I/usr/include/luajit-2.0

Should finish solving the issue regarding LuaJIT support at #1809",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1854,2018-07-27T20:19:29Z,2018-08-22T16:13:23Z,2018-08-22T16:13:23Z,CLOSED,False,7,1,2,https://github.com/victorhora,Allow LuaJIT to be used,1,"['RIP - Type - Feature', 'enhancement', 'RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1854,https://github.com/theMiddleBlue,2,https://github.com/SpiderLabs/ModSecurity/pull/1854#issuecomment-408795372,"Following the addition of Lua 5.1 compatibility with libModSecurity at dee9898, this PR tries to address support for LuaJIT. The output of the configure script after applying the patch should be something like:

...
configure: LUA library found at: /usr/lib/x86_64-linux-gnu//libluajit-5.1.so
configure: LUA headers found at: /usr/include/luajit-2.0
configure: LUA version from includes: 501
configure: using LUA -lluajit-5.1
...

   + LUA                                           ....found v501
      -lluajit-5.1 -L/usr/lib/x86_64-linux-gnu/, -DWITH_LUA -DWITH_LUA_5_1 -I/usr/include/luajit-2.0

Should finish solving the issue regarding LuaJIT support at #1809","It works like a charm!

thanks a lot @victorhora and @p0pr0ck5 !",True,{'HOORAY': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1854,2018-07-27T20:19:29Z,2018-08-22T16:13:23Z,2018-08-22T16:13:23Z,CLOSED,False,7,1,2,https://github.com/victorhora,Allow LuaJIT to be used,1,"['RIP - Type - Feature', 'enhancement', 'RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1854,https://github.com/victorhora,3,https://github.com/SpiderLabs/ModSecurity/pull/1854#issuecomment-415089427,"Following the addition of Lua 5.1 compatibility with libModSecurity at dee9898, this PR tries to address support for LuaJIT. The output of the configure script after applying the patch should be something like:

...
configure: LUA library found at: /usr/lib/x86_64-linux-gnu//libluajit-5.1.so
configure: LUA headers found at: /usr/include/luajit-2.0
configure: LUA version from includes: 501
configure: using LUA -lluajit-5.1
...

   + LUA                                           ....found v501
      -lluajit-5.1 -L/usr/lib/x86_64-linux-gnu/, -DWITH_LUA -DWITH_LUA_5_1 -I/usr/include/luajit-2.0

Should finish solving the issue regarding LuaJIT support at #1809","Merged as of 857bf9d
Thanks for the feedback @theMiddleBlue ;)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1855,2018-07-27T20:41:10Z,2018-08-22T18:14:59Z,2018-08-22T18:15:00Z,CLOSED,False,3,1,2,https://github.com/victorhora,Add LUA compatibility for CentOS,1,"['RIP - Type - Feature', 'enhancement', 'RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1855,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1855,Very small change to the lua.m4 script to allow LUA support on CentOS as described at #1622 (comment),Very small change to the lua.m4 script to allow LUA support on CentOS as described at #1622 (comment),True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1855,2018-07-27T20:41:10Z,2018-08-22T18:14:59Z,2018-08-22T18:15:00Z,CLOSED,False,3,1,2,https://github.com/victorhora,Add LUA compatibility for CentOS,1,"['RIP - Type - Feature', 'enhancement', 'RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1855,https://github.com/victorhora,2,https://github.com/SpiderLabs/ModSecurity/pull/1855#issuecomment-415128207,Very small change to the lua.m4 script to allow LUA support on CentOS as described at #1622 (comment),Merged as of 0ac23a4,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1856,2018-07-28T14:13:33Z,2018-09-20T21:08:14Z,2018-09-20T21:08:14Z,CLOSED,False,264,302,4,https://github.com/hsluoyz,Reformat the README to Markdown,2,"['RIP - Type - Feature', 'enhancement', '2.x', 'documentation']",https://github.com/SpiderLabs/ModSecurity/pull/1856,https://github.com/hsluoyz,1,https://github.com/SpiderLabs/ModSecurity/pull/1856,Fix: #1857,Fix: #1857,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1856,2018-07-28T14:13:33Z,2018-09-20T21:08:14Z,2018-09-20T21:08:14Z,CLOSED,False,264,302,4,https://github.com/hsluoyz,Reformat the README to Markdown,2,"['RIP - Type - Feature', 'enhancement', '2.x', 'documentation']",https://github.com/SpiderLabs/ModSecurity/pull/1856,https://github.com/hsluoyz,2,https://github.com/SpiderLabs/ModSecurity/pull/1856#issuecomment-412724902,Fix: #1857,@victorhora,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1856,2018-07-28T14:13:33Z,2018-09-20T21:08:14Z,2018-09-20T21:08:14Z,CLOSED,False,264,302,4,https://github.com/hsluoyz,Reformat the README to Markdown,2,"['RIP - Type - Feature', 'enhancement', '2.x', 'documentation']",https://github.com/SpiderLabs/ModSecurity/pull/1856,https://github.com/victorhora,3,https://github.com/SpiderLabs/ModSecurity/pull/1856#issuecomment-415160757,Fix: #1857,"IMHO this PR could be welcome.
But before further evaluation/acceptance, please take into consideration #1848 (comment) and see if you want to add any further changes/commits.
Thanks for your contribution :)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1856,2018-07-28T14:13:33Z,2018-09-20T21:08:14Z,2018-09-20T21:08:14Z,CLOSED,False,264,302,4,https://github.com/hsluoyz,Reformat the README to Markdown,2,"['RIP - Type - Feature', 'enhancement', '2.x', 'documentation']",https://github.com/SpiderLabs/ModSecurity/pull/1856,https://github.com/hsluoyz,4,https://github.com/SpiderLabs/ModSecurity/pull/1856#issuecomment-415255891,Fix: #1857,Thanks for the advice. I have updated the dependencies based on refactory of 2.9.2 release: 7c43a27,True,{'THUMBS_UP': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1856,2018-07-28T14:13:33Z,2018-09-20T21:08:14Z,2018-09-20T21:08:14Z,CLOSED,False,264,302,4,https://github.com/hsluoyz,Reformat the README to Markdown,2,"['RIP - Type - Feature', 'enhancement', '2.x', 'documentation']",https://github.com/SpiderLabs/ModSecurity/pull/1856,https://github.com/victorhora,5,https://github.com/SpiderLabs/ModSecurity/pull/1856#issuecomment-423333847,Fix: #1857,"Merged as of e0a087b
Thanks!",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1859,2018-07-30T16:07:32Z,2018-09-19T23:58:13Z,2018-09-19T23:58:13Z,CLOSED,False,13,7,2,https://github.com/nowaits,fix:  function m.setvar not work in lua script,2,"['bug', 'RIP - libmodsecurity', 'libmodsec - missing features', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1859,https://github.com/nowaits,1,https://github.com/SpiderLabs/ModSecurity/pull/1859,,,True,{'HOORAY': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1859,2018-07-30T16:07:32Z,2018-09-19T23:58:13Z,2018-09-19T23:58:13Z,CLOSED,False,13,7,2,https://github.com/nowaits,fix:  function m.setvar not work in lua script,2,"['bug', 'RIP - libmodsecurity', 'libmodsec - missing features', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1859,https://github.com/victorhora,2,https://github.com/SpiderLabs/ModSecurity/pull/1859#issuecomment-409086211,,"fix: centos compile error (9f9a59d)


There's a PR to address this issue here #1855",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1859,2018-07-30T16:07:32Z,2018-09-19T23:58:13Z,2018-09-19T23:58:13Z,CLOSED,False,13,7,2,https://github.com/nowaits,fix:  function m.setvar not work in lua script,2,"['bug', 'RIP - libmodsecurity', 'libmodsec - missing features', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1859,https://github.com/DenysFrasinich,3,https://github.com/SpiderLabs/ModSecurity/pull/1859#issuecomment-412287054,,"Hello!
I also had problem with ""m.setvar"" in lua  scripts. But after i rebuild v3/master with patch from 86c12c3 commit by @nowaits it works properly.",True,{'THUMBS_UP': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1859,2018-07-30T16:07:32Z,2018-09-19T23:58:13Z,2018-09-19T23:58:13Z,CLOSED,False,13,7,2,https://github.com/nowaits,fix:  function m.setvar not work in lua script,2,"['bug', 'RIP - libmodsecurity', 'libmodsec - missing features', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1859,https://github.com/victorhora,4,https://github.com/SpiderLabs/ModSecurity/pull/1859#issuecomment-422995692,,"Hey @nowaits, thanks for your contribution :)
Your commit has been accepted as of 45cdb0e
I added 6f458b5 to also cover for the USER collection, and test cases for all of them here 5aa79c1
Thanks :)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1861,2018-07-30T18:54:19Z,2018-08-01T11:38:44Z,2018-08-01T22:55:43Z,CLOSED,False,1,1,1,https://github.com/fakhrizulkifli,fixed response buffer length.,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1861,https://github.com/fakhrizulkifli,1,https://github.com/SpiderLabs/ModSecurity/pull/1861,Fix PR for issue#1860,Fix PR for issue#1860,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1861,2018-07-30T18:54:19Z,2018-08-01T11:38:44Z,2018-08-01T22:55:43Z,CLOSED,False,1,1,1,https://github.com/fakhrizulkifli,fixed response buffer length.,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1861,https://github.com/victorhora,2,https://github.com/SpiderLabs/ModSecurity/pull/1861#issuecomment-409751619,Fix PR for issue#1860,"@fakhrizulkifli, please see #1860 (comment)
Thanks.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1881,2018-08-29T07:29:19Z,2018-08-29T07:30:15Z,2018-08-29T23:28:05Z,CLOSED,False,12375,3136,61,https://github.com/cp5555,Wrong PR,92,[],https://github.com/SpiderLabs/ModSecurity/pull/1881,https://github.com/cp5555,1,https://github.com/SpiderLabs/ModSecurity/pull/1881,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1886,2018-08-30T22:05:39Z,2018-09-11T23:59:56Z,2018-09-11T23:59:56Z,CLOSED,False,5,8,3,https://github.com/victorhora,Fix SecResponseBodyAccess and ctl:requestBodyAccess directives,2,"['bug', 'RIP - libmodsecurity', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1886,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1886,Small change to allow for SecResponseBodyAccess and ctl:requestBodyAccess directives to work as intended. Should fix #1531.,Small change to allow for SecResponseBodyAccess and ctl:requestBodyAccess directives to work as intended. Should fix #1531.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1886,2018-08-30T22:05:39Z,2018-09-11T23:59:56Z,2018-09-11T23:59:56Z,CLOSED,False,5,8,3,https://github.com/victorhora,Fix SecResponseBodyAccess and ctl:requestBodyAccess directives,2,"['bug', 'RIP - libmodsecurity', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1886,https://github.com/defanator,2,https://github.com/SpiderLabs/ModSecurity/pull/1886#issuecomment-417584636,Small change to allow for SecResponseBodyAccess and ctl:requestBodyAccess directives to work as intended. Should fix #1531.,"@victorhora this PR is breaking current ModSecurity-nginx connector tests:
Test Summary Report
-------------------
modsecurity-scoring.t        (Wstat: 512 Tests: 7 Failed: 2)
  Failed tests:  2, 5
  Non-zero exit status: 2
modsecurity.t                (Wstat: 1024 Tests: 22 Failed: 4)
  Failed tests:  2, 6, 10, 14
  Non-zero exit status: 4
modsecurity-proxy.t          (Wstat: 1024 Tests: 25 Failed: 4)
  Failed tests:  5, 9, 13, 17
  Non-zero exit status: 4
Files=8, Tests=114,  1 wallclock secs ( 0.08 usr  0.00 sys +  1.08 cusr  0.25 csys =  1.41 CPU)
Result: FAIL
Makefile:145: recipe for target 'test' failed
make: *** [test] Error 1

Looking into details now.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1886,2018-08-30T22:05:39Z,2018-09-11T23:59:56Z,2018-09-11T23:59:56Z,CLOSED,False,5,8,3,https://github.com/victorhora,Fix SecResponseBodyAccess and ctl:requestBodyAccess directives,2,"['bug', 'RIP - libmodsecurity', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1886,https://github.com/defanator,3,https://github.com/SpiderLabs/ModSecurity/pull/1886#issuecomment-417585246,Small change to allow for SecResponseBodyAccess and ctl:requestBodyAccess directives to work as intended. Should fix #1531.,"@victorhora library tests are failing as well:
============================================================================
Testsuite summary for modsecurity 3.0
============================================================================
# TOTAL: 4760
# PASS:  4658
# SKIP:  23
# XFAIL: 0
# FAIL:  79
# XPASS: 0
# ERROR: 0",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1886,2018-08-30T22:05:39Z,2018-09-11T23:59:56Z,2018-09-11T23:59:56Z,CLOSED,False,5,8,3,https://github.com/victorhora,Fix SecResponseBodyAccess and ctl:requestBodyAccess directives,2,"['bug', 'RIP - libmodsecurity', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1886,https://github.com/victorhora,4,https://github.com/SpiderLabs/ModSecurity/pull/1886#issuecomment-417679650,Small change to allow for SecResponseBodyAccess and ctl:requestBodyAccess directives to work as intended. Should fix #1531.,"Funny @defanator, the tests were working for me before. There's a chance I've pushed the wrong code LOL :P. Let me have another a look at it",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1886,2018-08-30T22:05:39Z,2018-09-11T23:59:56Z,2018-09-11T23:59:56Z,CLOSED,False,5,8,3,https://github.com/victorhora,Fix SecResponseBodyAccess and ctl:requestBodyAccess directives,2,"['bug', 'RIP - libmodsecurity', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1886,https://github.com/victorhora,5,https://github.com/SpiderLabs/ModSecurity/pull/1886#issuecomment-417774903,Small change to allow for SecResponseBodyAccess and ctl:requestBodyAccess directives to work as intended. Should fix #1531.,"Ok, I've pushed the wrong code :P Should be good now unless I screwed up again :P. @defanator If the buildbots pass, please let me know the results of ModSecurity-nginx connector tests. (I can see now we really need Travis integration for those :))",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1886,2018-08-30T22:05:39Z,2018-09-11T23:59:56Z,2018-09-11T23:59:56Z,CLOSED,False,5,8,3,https://github.com/victorhora,Fix SecResponseBodyAccess and ctl:requestBodyAccess directives,2,"['bug', 'RIP - libmodsecurity', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1886,https://github.com/defanator,6,https://github.com/SpiderLabs/ModSecurity/pull/1886#issuecomment-418061621,Small change to allow for SecResponseBodyAccess and ctl:requestBodyAccess directives to work as intended. Should fix #1531.,"@victorhora yes, connector tests are now passing. I've just submitted an extension to the request body tests for nginx connector here: SpiderLabs/ModSecurity-nginx#124
(note that it should be merged after #1886 gets in the v3/master to avoid Travis failures)",True,{'THUMBS_UP': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1886,2018-08-30T22:05:39Z,2018-09-11T23:59:56Z,2018-09-11T23:59:56Z,CLOSED,False,5,8,3,https://github.com/victorhora,Fix SecResponseBodyAccess and ctl:requestBodyAccess directives,2,"['bug', 'RIP - libmodsecurity', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1886,https://github.com/zimmerle,7,https://github.com/SpiderLabs/ModSecurity/pull/1886#issuecomment-420465923,Small change to allow for SecResponseBodyAccess and ctl:requestBodyAccess directives to work as intended. Should fix #1531.,Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1890,2018-09-06T03:17:47Z,2019-01-16T16:17:27Z,2019-01-16T16:17:28Z,CLOSED,False,1856,264,13,https://github.com/victorhora,Update mbedTLS to 2.12,1,"['enhancement', 'RIP - Type - Config Improvement', 'RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1890,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1890,"Upgrade mbedTLS to 2.12:
https://github.com/ARMmbed/mbedtls/blob/development/ChangeLog#L74-L1202","Upgrade mbedTLS to 2.12:
https://github.com/ARMmbed/mbedtls/blob/development/ChangeLog#L74-L1202",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1890,2018-09-06T03:17:47Z,2019-01-16T16:17:27Z,2019-01-16T16:17:28Z,CLOSED,False,1856,264,13,https://github.com/victorhora,Update mbedTLS to 2.12,1,"['enhancement', 'RIP - Type - Config Improvement', 'RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1890,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1890#issuecomment-454839888,"Upgrade mbedTLS to 2.12:
https://github.com/ARMmbed/mbedtls/blob/development/ChangeLog#L74-L1202",I am closing this one as @victorhora in working on a new pull request.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1891,2018-09-07T22:27:45Z,2018-09-07T22:33:53Z,2018-09-07T22:35:11Z,CLOSED,False,12420,3136,62,https://github.com/alonzop,V2/dev/appveyor,94,[],https://github.com/SpiderLabs/ModSecurity/pull/1891,https://github.com/alonzop,1,https://github.com/SpiderLabs/ModSecurity/pull/1891,"appveyor related - ps file to pull the needed pkgs, current yml file for appveyor","appveyor related - ps file to pull the needed pkgs, current yml file for appveyor",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1895,2018-09-11T04:28:05Z,2018-09-11T23:44:13Z,2018-09-11T23:44:13Z,CLOSED,False,12,10,4,https://github.com/victorhora,Fix parser to support GeoLookup with MaxMind,2,"['bug', 'enhancement', 'RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1895,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1895,"Should fix issue where SecGeoLookupDb directive and @geoLookup operator was not working as expected when using libMaxMind.
Also a small change to libmaxmind.m4 to allow the script to find the headers on Ubuntu based distros where PkgConfig is not available. Should fix issue #1884","Should fix issue where SecGeoLookupDb directive and @geoLookup operator was not working as expected when using libMaxMind.
Also a small change to libmaxmind.m4 to allow the script to find the headers on Ubuntu based distros where PkgConfig is not available. Should fix issue #1884",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1895,2018-09-11T04:28:05Z,2018-09-11T23:44:13Z,2018-09-11T23:44:13Z,CLOSED,False,12,10,4,https://github.com/victorhora,Fix parser to support GeoLookup with MaxMind,2,"['bug', 'enhancement', 'RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1895,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1895#issuecomment-420463156,"Should fix issue where SecGeoLookupDb directive and @geoLookup operator was not working as expected when using libMaxMind.
Also a small change to libmaxmind.m4 to allow the script to find the headers on Ubuntu based distros where PkgConfig is not available. Should fix issue #1884",Merged! thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1897,2018-09-12T04:04:37Z,2018-10-17T19:14:55Z,2018-10-18T01:18:12Z,CLOSED,False,27,9,1,https://github.com/weliu,Fix memory leak in AuditLog::init(),1,"['3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1897,https://github.com/weliu,1,https://github.com/SpiderLabs/ModSecurity/pull/1897,"This was found by valgrind:
==17964== 576 bytes in 24 blocks are definitely lost in loss record 71 of 79
==17964==    at 0x4C2A243: operator new(unsigned long) (vg_replace_malloc.c:334)
==17964==    by 0x4F3CC86: modsecurity::audit_log::AuditLog::init(std::string*) (audit_log.cc:222)
==17964==    by 0x4F43AF4: modsecurity::RulesProperties::mergeProperties(modsecurity::RulesProperties*, modsecurity::RulesProperties*, std::basic_ostringstream<char, std::char_traits, std::allocator >) (rules_properties.h:395)
==17964==    by 0x4F42B5A: modsecurity::Rules::loadFromUri(char const) (rules.cc:104)
==17964==    by 0x4F42C42: msc_rules_add_file (rules.cc:336)
==17964==    by 0x400E65: main (test.c:114)","This was found by valgrind:
==17964== 576 bytes in 24 blocks are definitely lost in loss record 71 of 79
==17964==    at 0x4C2A243: operator new(unsigned long) (vg_replace_malloc.c:334)
==17964==    by 0x4F3CC86: modsecurity::audit_log::AuditLog::init(std::string*) (audit_log.cc:222)
==17964==    by 0x4F43AF4: modsecurity::RulesProperties::mergeProperties(modsecurity::RulesProperties*, modsecurity::RulesProperties*, std::basic_ostringstream<char, std::char_traits, std::allocator >) (rules_properties.h:395)
==17964==    by 0x4F42B5A: modsecurity::Rules::loadFromUri(char const) (rules.cc:104)
==17964==    by 0x4F42C42: msc_rules_add_file (rules.cc:336)
==17964==    by 0x400E65: main (test.c:114)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1897,2018-09-12T04:04:37Z,2018-10-17T19:14:55Z,2018-10-18T01:18:12Z,CLOSED,False,27,9,1,https://github.com/weliu,Fix memory leak in AuditLog::init(),1,"['3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1897,https://github.com/victorhora,2,https://github.com/SpiderLabs/ModSecurity/pull/1897#issuecomment-430753847,"This was found by valgrind:
==17964== 576 bytes in 24 blocks are definitely lost in loss record 71 of 79
==17964==    at 0x4C2A243: operator new(unsigned long) (vg_replace_malloc.c:334)
==17964==    by 0x4F3CC86: modsecurity::audit_log::AuditLog::init(std::string*) (audit_log.cc:222)
==17964==    by 0x4F43AF4: modsecurity::RulesProperties::mergeProperties(modsecurity::RulesProperties*, modsecurity::RulesProperties*, std::basic_ostringstream<char, std::char_traits, std::allocator >) (rules_properties.h:395)
==17964==    by 0x4F42B5A: modsecurity::Rules::loadFromUri(char const) (rules.cc:104)
==17964==    by 0x4F42C42: msc_rules_add_file (rules.cc:336)
==17964==    by 0x400E65: main (test.c:114)",Merged as of 83d156b. Thanks for your contribution :),True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1901,2018-09-15T21:10:55Z,2018-10-17T19:16:03Z,2019-02-14T18:45:50Z,CLOSED,False,9,6,1,https://github.com/stevendore,Fix RulesProperties::appendRules(),2,['pr available'],https://github.com/SpiderLabs/ModSecurity/pull/1901,https://github.com/stevendore,1,https://github.com/SpiderLabs/ModSecurity/pull/1901,"After a discussion on #1888 I noticed RulesProperties::appendRules() was not checking for duplicate IDs as well as throwing an error if there were secMarkers in more than one file (when calling any combination of rules->load(), rules->loadFromUri() or rules->loadRemote() more than once). To fix the secMarker issue, the if statement on rules_properties.h:441 just needed to be negated.
This function also doesn't accurately check for duplicate IDs. The check can be circumvented by putting the rule in a different phase. To fix this, the ruleId list (v in this function) has to be populated completely before checking it against the other list.
Before the patch is applied the example below will fail to load rules due to multiple files containing secMarkers
test01.conf
SecRule REQUEST_FILENAME ""@endsWith /wp-login.php"" ""id:1,phase:2""
SecRule REQUEST_FILENAME ""@endsWith /private"" ""id:2,phase:1""
SecMarker END-ONE

test02.conf
SecRule UNIQUE_ID ""@rx ^."" ""id:3,phase:3""
SecMarker END-TWO

test03.conf
SecRule REQUEST_FILENAME ""@endsWith /admin"" ""id:4,phase:6""
SecMarker END-THREE

x@x:/code/ModSecurity/tools/rules-check$ ./modsec-rules-check /code/test_conf/*.conf
 : /code/test_conf/test01.conf  --  Loaded 9 rules.
 : /code/test_conf/test02.conf  --  Loaded -1 rules.
    Rule id: 0 is duplicated

 : /code/test_conf/test03.conf  --  Loaded -1 rules.
    Rule id: 0 is duplicated

Test failed.
After removing the SecMarkers from test02 and test03 the test will pass.
x@x:/code/ModSecurity/tools/rules-check$ ./modsec-rules-check /code/test_conf/*.conf
 : /code/test_conf/test01.conf  --  Loaded 9 rules.
 : /code/test_conf/test02.conf  --  Loaded 1 rules.
 : /code/test_conf/test03.conf  --  Loaded 1 rules.
Test ok.

And if you force a duplicate ruleId by changing the Id in test03 to 1, the test will still pass.
After the patch all of these issues are dealt with in the correct manner.
The test will pass with the original conf files above and will fail if you change the ID in test03 to 1.","After a discussion on #1888 I noticed RulesProperties::appendRules() was not checking for duplicate IDs as well as throwing an error if there were secMarkers in more than one file (when calling any combination of rules->load(), rules->loadFromUri() or rules->loadRemote() more than once). To fix the secMarker issue, the if statement on rules_properties.h:441 just needed to be negated.
This function also doesn't accurately check for duplicate IDs. The check can be circumvented by putting the rule in a different phase. To fix this, the ruleId list (v in this function) has to be populated completely before checking it against the other list.
Before the patch is applied the example below will fail to load rules due to multiple files containing secMarkers
test01.conf
SecRule REQUEST_FILENAME ""@endsWith /wp-login.php"" ""id:1,phase:2""
SecRule REQUEST_FILENAME ""@endsWith /private"" ""id:2,phase:1""
SecMarker END-ONE

test02.conf
SecRule UNIQUE_ID ""@rx ^."" ""id:3,phase:3""
SecMarker END-TWO

test03.conf
SecRule REQUEST_FILENAME ""@endsWith /admin"" ""id:4,phase:6""
SecMarker END-THREE

x@x:/code/ModSecurity/tools/rules-check$ ./modsec-rules-check /code/test_conf/*.conf
 : /code/test_conf/test01.conf  --  Loaded 9 rules.
 : /code/test_conf/test02.conf  --  Loaded -1 rules.
    Rule id: 0 is duplicated

 : /code/test_conf/test03.conf  --  Loaded -1 rules.
    Rule id: 0 is duplicated

Test failed.
After removing the SecMarkers from test02 and test03 the test will pass.
x@x:/code/ModSecurity/tools/rules-check$ ./modsec-rules-check /code/test_conf/*.conf
 : /code/test_conf/test01.conf  --  Loaded 9 rules.
 : /code/test_conf/test02.conf  --  Loaded 1 rules.
 : /code/test_conf/test03.conf  --  Loaded 1 rules.
Test ok.

And if you force a duplicate ruleId by changing the Id in test03 to 1, the test will still pass.
After the patch all of these issues are dealt with in the correct manner.
The test will pass with the original conf files above and will fail if you change the ID in test03 to 1.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1901,2018-09-15T21:10:55Z,2018-10-17T19:16:03Z,2019-02-14T18:45:50Z,CLOSED,False,9,6,1,https://github.com/stevendore,Fix RulesProperties::appendRules(),2,['pr available'],https://github.com/SpiderLabs/ModSecurity/pull/1901,https://github.com/djellemah,2,https://github.com/SpiderLabs/ModSecurity/pull/1901#issuecomment-424263513,"After a discussion on #1888 I noticed RulesProperties::appendRules() was not checking for duplicate IDs as well as throwing an error if there were secMarkers in more than one file (when calling any combination of rules->load(), rules->loadFromUri() or rules->loadRemote() more than once). To fix the secMarker issue, the if statement on rules_properties.h:441 just needed to be negated.
This function also doesn't accurately check for duplicate IDs. The check can be circumvented by putting the rule in a different phase. To fix this, the ruleId list (v in this function) has to be populated completely before checking it against the other list.
Before the patch is applied the example below will fail to load rules due to multiple files containing secMarkers
test01.conf
SecRule REQUEST_FILENAME ""@endsWith /wp-login.php"" ""id:1,phase:2""
SecRule REQUEST_FILENAME ""@endsWith /private"" ""id:2,phase:1""
SecMarker END-ONE

test02.conf
SecRule UNIQUE_ID ""@rx ^."" ""id:3,phase:3""
SecMarker END-TWO

test03.conf
SecRule REQUEST_FILENAME ""@endsWith /admin"" ""id:4,phase:6""
SecMarker END-THREE

x@x:/code/ModSecurity/tools/rules-check$ ./modsec-rules-check /code/test_conf/*.conf
 : /code/test_conf/test01.conf  --  Loaded 9 rules.
 : /code/test_conf/test02.conf  --  Loaded -1 rules.
    Rule id: 0 is duplicated

 : /code/test_conf/test03.conf  --  Loaded -1 rules.
    Rule id: 0 is duplicated

Test failed.
After removing the SecMarkers from test02 and test03 the test will pass.
x@x:/code/ModSecurity/tools/rules-check$ ./modsec-rules-check /code/test_conf/*.conf
 : /code/test_conf/test01.conf  --  Loaded 9 rules.
 : /code/test_conf/test02.conf  --  Loaded 1 rules.
 : /code/test_conf/test03.conf  --  Loaded 1 rules.
Test ok.

And if you force a duplicate ruleId by changing the Id in test03 to 1, the test will still pass.
After the patch all of these issues are dealt with in the correct manner.
The test will pass with the original conf files above and will fail if you change the ID in test03 to 1.",+1 on this. I'm running into the same issue (duplicate ID errors when merging Rules instances via the C api) and this pull request fixes that.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1901,2018-09-15T21:10:55Z,2018-10-17T19:16:03Z,2019-02-14T18:45:50Z,CLOSED,False,9,6,1,https://github.com/stevendore,Fix RulesProperties::appendRules(),2,['pr available'],https://github.com/SpiderLabs/ModSecurity/pull/1901,https://github.com/victorhora,3,https://github.com/SpiderLabs/ModSecurity/pull/1901#issuecomment-430754220,"After a discussion on #1888 I noticed RulesProperties::appendRules() was not checking for duplicate IDs as well as throwing an error if there were secMarkers in more than one file (when calling any combination of rules->load(), rules->loadFromUri() or rules->loadRemote() more than once). To fix the secMarker issue, the if statement on rules_properties.h:441 just needed to be negated.
This function also doesn't accurately check for duplicate IDs. The check can be circumvented by putting the rule in a different phase. To fix this, the ruleId list (v in this function) has to be populated completely before checking it against the other list.
Before the patch is applied the example below will fail to load rules due to multiple files containing secMarkers
test01.conf
SecRule REQUEST_FILENAME ""@endsWith /wp-login.php"" ""id:1,phase:2""
SecRule REQUEST_FILENAME ""@endsWith /private"" ""id:2,phase:1""
SecMarker END-ONE

test02.conf
SecRule UNIQUE_ID ""@rx ^."" ""id:3,phase:3""
SecMarker END-TWO

test03.conf
SecRule REQUEST_FILENAME ""@endsWith /admin"" ""id:4,phase:6""
SecMarker END-THREE

x@x:/code/ModSecurity/tools/rules-check$ ./modsec-rules-check /code/test_conf/*.conf
 : /code/test_conf/test01.conf  --  Loaded 9 rules.
 : /code/test_conf/test02.conf  --  Loaded -1 rules.
    Rule id: 0 is duplicated

 : /code/test_conf/test03.conf  --  Loaded -1 rules.
    Rule id: 0 is duplicated

Test failed.
After removing the SecMarkers from test02 and test03 the test will pass.
x@x:/code/ModSecurity/tools/rules-check$ ./modsec-rules-check /code/test_conf/*.conf
 : /code/test_conf/test01.conf  --  Loaded 9 rules.
 : /code/test_conf/test02.conf  --  Loaded 1 rules.
 : /code/test_conf/test03.conf  --  Loaded 1 rules.
Test ok.

And if you force a duplicate ruleId by changing the Id in test03 to 1, the test will still pass.
After the patch all of these issues are dealt with in the correct manner.
The test will pass with the original conf files above and will fail if you change the ID in test03 to 1.","Merged as of 2cebba9.
Thanks for your contribution! :)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1910,2018-09-20T19:51:02Z,2018-10-12T21:37:54Z,2018-10-12T21:37:55Z,CLOSED,False,5,2,3,https://github.com/victorhora,Allow LuaJIT 2.1 to be used,1,"['enhancement', 'RIP - Type - Config Improvement', 'RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1910,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1910,"Simple change to allow for LuaJIT 2.1 to be used with ModSecurity.
The issue happened due to luaL_setfuncs() already being defined in LuaJIT 2.1 (see lauxlib.h#L88).
Commit dee9898#diff-f120b67754e2c3ff8a98d4e3007f12efR111 defines this func as it is being used by the Lua engine inside ModSecurity (lua.cc#L138) but it is lacking in Lua 5.1 to make it compatible.
An extra if defined condition (WITH_LUA_JIT_2_1) was added to cover for LuaJIT 2.1.
Should fix #1909.","Simple change to allow for LuaJIT 2.1 to be used with ModSecurity.
The issue happened due to luaL_setfuncs() already being defined in LuaJIT 2.1 (see lauxlib.h#L88).
Commit dee9898#diff-f120b67754e2c3ff8a98d4e3007f12efR111 defines this func as it is being used by the Lua engine inside ModSecurity (lua.cc#L138) but it is lacking in Lua 5.1 to make it compatible.
An extra if defined condition (WITH_LUA_JIT_2_1) was added to cover for LuaJIT 2.1.
Should fix #1909.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1910,2018-09-20T19:51:02Z,2018-10-12T21:37:54Z,2018-10-12T21:37:55Z,CLOSED,False,5,2,3,https://github.com/victorhora,Allow LuaJIT 2.1 to be used,1,"['enhancement', 'RIP - Type - Config Improvement', 'RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1910,https://github.com/victorhora,2,https://github.com/SpiderLabs/ModSecurity/pull/1910#issuecomment-429469790,"Simple change to allow for LuaJIT 2.1 to be used with ModSecurity.
The issue happened due to luaL_setfuncs() already being defined in LuaJIT 2.1 (see lauxlib.h#L88).
Commit dee9898#diff-f120b67754e2c3ff8a98d4e3007f12efR111 defines this func as it is being used by the Lua engine inside ModSecurity (lua.cc#L138) but it is lacking in Lua 5.1 to make it compatible.
An extra if defined condition (WITH_LUA_JIT_2_1) was added to cover for LuaJIT 2.1.
Should fix #1909.",Merged as of 20ef01d,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1912,2018-09-22T22:45:23Z,2018-10-13T01:20:41Z,2018-10-13T01:20:41Z,MERGED,True,41,5,2,https://github.com/victorhora,@ju5t patch to fix mpm-itk / mod_ruid2 compatibility,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1912,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1912,"This PR contains the patch by @ju5t (with minor adjustments due to change in lines). It's meant to fixing compatibility issues with apache2-itk and mod_ruid2 Apache modules and ModSecurity 2.9.x.
The tests are passing for this patch and according to some users the patch is safe.","This PR contains the patch by @ju5t (with minor adjustments due to change in lines). It's meant to fixing compatibility issues with apache2-itk and mod_ruid2 Apache modules and ModSecurity 2.9.x.
The tests are passing for this patch and according to some users the patch is safe.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1912,2018-09-22T22:45:23Z,2018-10-13T01:20:41Z,2018-10-13T01:20:41Z,MERGED,True,41,5,2,https://github.com/victorhora,@ju5t patch to fix mpm-itk / mod_ruid2 compatibility,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1912,https://github.com/victorhora,2,https://github.com/SpiderLabs/ModSecurity/pull/1912#issuecomment-423778726,"This PR contains the patch by @ju5t (with minor adjustments due to change in lines). It's meant to fixing compatibility issues with apache2-itk and mod_ruid2 Apache modules and ModSecurity 2.9.x.
The tests are passing for this patch and according to some users the patch is safe.",Setting milestone to 2.9.3.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1917,2018-09-27T22:12:42Z,2018-10-19T23:53:07Z,2018-10-19T23:53:30Z,CLOSED,False,21,84,1,https://github.com/allanbomsft,IIS: Remove body prebuffering again. Unneeded due to no lock on modse…,1,"['enhancement', 'Platform - IIS', '2.x']",https://github.com/SpiderLabs/ModSecurity/pull/1917,https://github.com/allanbomsft,1,https://github.com/SpiderLabs/ModSecurity/pull/1917,"IIS: Remove body pre-buffering again, which I had introduced a few months back. This is no longer needed, because now we have also removed the locking around modsecProcessRequest, so when modsecProcessRequest calls ReadBodyCallback which might block if the client is sending slow, it is no longer holding the lock.
The implementation I introduced a few months ago, where we pre-buffer, has a bug. It causes a freeze if SecRequestBodyAccess is set to Off. This is because if the body is read from IIS, IIS also expects the body the be written back, which I had forgotten. Reverting the pre-buffering fixes this.
Tested by running 150 concurrent diverse requests and ensuring the expected return value.
This is the commit we are undoing: 18af259","IIS: Remove body pre-buffering again, which I had introduced a few months back. This is no longer needed, because now we have also removed the locking around modsecProcessRequest, so when modsecProcessRequest calls ReadBodyCallback which might block if the client is sending slow, it is no longer holding the lock.
The implementation I introduced a few months ago, where we pre-buffer, has a bug. It causes a freeze if SecRequestBodyAccess is set to Off. This is because if the body is read from IIS, IIS also expects the body the be written back, which I had forgotten. Reverting the pre-buffering fixes this.
Tested by running 150 concurrent diverse requests and ensuring the expected return value.
This is the commit we are undoing: 18af259",True,{'THUMBS_UP': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1917,2018-09-27T22:12:42Z,2018-10-19T23:53:07Z,2018-10-19T23:53:30Z,CLOSED,False,21,84,1,https://github.com/allanbomsft,IIS: Remove body prebuffering again. Unneeded due to no lock on modse…,1,"['enhancement', 'Platform - IIS', '2.x']",https://github.com/SpiderLabs/ModSecurity/pull/1917,https://github.com/victorhora,2,https://github.com/SpiderLabs/ModSecurity/pull/1917#issuecomment-431529374,"IIS: Remove body pre-buffering again, which I had introduced a few months back. This is no longer needed, because now we have also removed the locking around modsecProcessRequest, so when modsecProcessRequest calls ReadBodyCallback which might block if the client is sending slow, it is no longer holding the lock.
The implementation I introduced a few months ago, where we pre-buffer, has a bug. It causes a freeze if SecRequestBodyAccess is set to Off. This is because if the body is read from IIS, IIS also expects the body the be written back, which I had forgotten. Reverting the pre-buffering fixes this.
Tested by running 150 concurrent diverse requests and ensuring the expected return value.
This is the commit we are undoing: 18af259",http://www.modsecurity.org/developers/buildbot/builders/Win8%20-%20%28VS%202012%2064b%29%20-%20IIS/builds/133,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1917,2018-09-27T22:12:42Z,2018-10-19T23:53:07Z,2018-10-19T23:53:30Z,CLOSED,False,21,84,1,https://github.com/allanbomsft,IIS: Remove body prebuffering again. Unneeded due to no lock on modse…,1,"['enhancement', 'Platform - IIS', '2.x']",https://github.com/SpiderLabs/ModSecurity/pull/1917,https://github.com/victorhora,3,https://github.com/SpiderLabs/ModSecurity/pull/1917#issuecomment-431529438,"IIS: Remove body pre-buffering again, which I had introduced a few months back. This is no longer needed, because now we have also removed the locking around modsecProcessRequest, so when modsecProcessRequest calls ReadBodyCallback which might block if the client is sending slow, it is no longer holding the lock.
The implementation I introduced a few months ago, where we pre-buffer, has a bug. It causes a freeze if SecRequestBodyAccess is set to Off. This is because if the body is read from IIS, IIS also expects the body the be written back, which I had forgotten. Reverting the pre-buffering fixes this.
Tested by running 150 concurrent diverse requests and ensuring the expected return value.
This is the commit we are undoing: 18af259","Merged here: a55a948
Thank :)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1919,2018-09-28T21:13:47Z,2018-11-29T16:36:16Z,2018-11-29T16:36:16Z,CLOSED,False,4,4,3,https://github.com/stevendore,[V3] Allow the callback function to receive and log a http return code,1,"['enhancement', 'RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1919,https://github.com/stevendore,1,https://github.com/SpiderLabs/ModSecurity/pull/1919,"As discussed in #1916, there is an issue where the callback function will not insert the http return code into the message even though the audit log contained the correct message.
ex: callback: ModSecurity: Access denied with code %d (phase 2). Matched ""Operator Rx with parameter a....
auditlog: ModSecurity: Access denied with code 200 (phase 2). Matched ""Operator Rx with parameter a...
After some digging through the code for the process for the callback I found that the callback is only called through Transaction::serverLog() which contains the function ModSecurity::serverLog(m_logCbData, rm). ModSecurity has no access/reference to the Transaction::m_httpCodeReturned so it would have had to been passed by Transaction::serverLog() with this->m_httpCodeReturned to be able to be passed into the RuleMessage::log() to generate the callback message. After this patch I am able to get the http return code into the callback function message parameter.
Though I am unsure how/if props should be set or in ModSecurity::serverLog(). I am also unsure in the case that RuleMessageLogProperty is set, how to best pass the m_httpCodeReturned to the rule message or callback function.
Additionally I noticed in ModSecurity::serverLog() there might be bug due to the repeated code in the if statement.","As discussed in #1916, there is an issue where the callback function will not insert the http return code into the message even though the audit log contained the correct message.
ex: callback: ModSecurity: Access denied with code %d (phase 2). Matched ""Operator Rx with parameter a....
auditlog: ModSecurity: Access denied with code 200 (phase 2). Matched ""Operator Rx with parameter a...
After some digging through the code for the process for the callback I found that the callback is only called through Transaction::serverLog() which contains the function ModSecurity::serverLog(m_logCbData, rm). ModSecurity has no access/reference to the Transaction::m_httpCodeReturned so it would have had to been passed by Transaction::serverLog() with this->m_httpCodeReturned to be able to be passed into the RuleMessage::log() to generate the callback message. After this patch I am able to get the http return code into the callback function message parameter.
Though I am unsure how/if props should be set or in ModSecurity::serverLog(). I am also unsure in the case that RuleMessageLogProperty is set, how to best pass the m_httpCodeReturned to the rule message or callback function.
Additionally I noticed in ModSecurity::serverLog() there might be bug due to the repeated code in the if statement.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1919,2018-09-28T21:13:47Z,2018-11-29T16:36:16Z,2018-11-29T16:36:16Z,CLOSED,False,4,4,3,https://github.com/stevendore,[V3] Allow the callback function to receive and log a http return code,1,"['enhancement', 'RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1919,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1919#issuecomment-442902290,"As discussed in #1916, there is an issue where the callback function will not insert the http return code into the message even though the audit log contained the correct message.
ex: callback: ModSecurity: Access denied with code %d (phase 2). Matched ""Operator Rx with parameter a....
auditlog: ModSecurity: Access denied with code 200 (phase 2). Matched ""Operator Rx with parameter a...
After some digging through the code for the process for the callback I found that the callback is only called through Transaction::serverLog() which contains the function ModSecurity::serverLog(m_logCbData, rm). ModSecurity has no access/reference to the Transaction::m_httpCodeReturned so it would have had to been passed by Transaction::serverLog() with this->m_httpCodeReturned to be able to be passed into the RuleMessage::log() to generate the callback message. After this patch I am able to get the http return code into the callback function message parameter.
Though I am unsure how/if props should be set or in ModSecurity::serverLog(). I am also unsure in the case that RuleMessageLogProperty is set, how to best pass the m_httpCodeReturned to the rule message or callback function.
Additionally I noticed in ModSecurity::serverLog() there might be bug due to the repeated code in the if statement.","Hi @steven-j-wojcik,
As of v3.0.3 the logging schema was restructured, as a consequence this issue was mitigated. I am sorry to close this without a merge. Thanks for the contribution. I am putting your name as a contributor for the previous change.

  
    
      ModSecurity/CHANGES
    
    
        Lines 31 to 32
      in
      af13744
    
  
  
    

        
          
           - Organizes the server logs 
        

        
          
             [0xb7c36 and 0x5ac20 - @zimmerle, @steven-j-wojcik]",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1920,2018-09-30T19:52:29Z,2018-10-01T15:41:45Z,2018-12-05T17:44:56Z,CLOSED,False,110965,130880,1030,https://github.com/shivamk01,The database should be secured,1164,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1920,https://github.com/shivamk01,1,https://github.com/SpiderLabs/ModSecurity/pull/1920,Digital Signature certificates should be generated using elliptic curve digital signature algorithm which is very secure so that the system cannot be copied or manipulated and the integrity is maintained.,Digital Signature certificates should be generated using elliptic curve digital signature algorithm which is very secure so that the system cannot be copied or manipulated and the integrity is maintained.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1920,2018-09-30T19:52:29Z,2018-10-01T15:41:45Z,2018-12-05T17:44:56Z,CLOSED,False,110965,130880,1030,https://github.com/shivamk01,The database should be secured,1164,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/1920,https://github.com/victorhora,2,https://github.com/SpiderLabs/ModSecurity/pull/1920#issuecomment-425955616,Digital Signature certificates should be generated using elliptic curve digital signature algorithm which is very secure so that the system cannot be copied or manipulated and the integrity is maintained.,"@shivamk01 I believe there's something wrong with this Pull request. It seems like you're trying to merge the v3/dev/test branch with the v3/dev/test branch?

Digital Signature certificates should be generated using elliptic curve digital signature algorithm which is very secure so that the system cannot be copied or manipulated and the integrity is maintained.

As far as I know, there's no ""Digital Signature certificates"" being generated by ModSecurity so I will be closing this Pull request as I'm assuming it was created by error/accident.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1922,2018-10-10T19:08:10Z,2018-10-13T23:28:08Z,2018-10-14T01:02:41Z,CLOSED,False,2,2,2,https://github.com/stevendore,Add correct C function prototypes for msc_init and msc_create_rule_set,1,"['enhancement', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1922,https://github.com/stevendore,1,https://github.com/SpiderLabs/ModSecurity/pull/1922,C function prototypes require a void parameter otherwise the error: function declaration isn't a prototype will be thrown in some compilers with -Werror=strict-prototype set.,C function prototypes require a void parameter otherwise the error: function declaration isn't a prototype will be thrown in some compilers with -Werror=strict-prototype set.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1922,2018-10-10T19:08:10Z,2018-10-13T23:28:08Z,2018-10-14T01:02:41Z,CLOSED,False,2,2,2,https://github.com/stevendore,Add correct C function prototypes for msc_init and msc_create_rule_set,1,"['enhancement', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1922,https://github.com/victorhora,2,https://github.com/SpiderLabs/ModSecurity/pull/1922#issuecomment-429583526,C function prototypes require a void parameter otherwise the error: function declaration isn't a prototype will be thrown in some compilers with -Werror=strict-prototype set.,Merged at 004047e.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1924,2018-10-14T01:53:02Z,2018-11-01T21:10:24Z,2018-11-02T08:12:46Z,CLOSED,False,67,7,2,https://github.com/victorhora,Make multipart boundary check a bit less strict by default,2,"['RIP - Type - Feature', 'RIP - libmodsecurity', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1924,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1924,"This pull request is sort of a workaround for multipart/form-data requests that have multiple boundaries such as common Content-Disposition POST requests.
The issue is that the fix proposed at #1747 and merged at 4d0ca94 could lead to cases where Content-Disposition POST requests such as the one below are denied by default after this commit:
POST /test.html HTTP/1.1
Host: example.org
Content-Type: multipart/form-data;boundary=boundary
Content-Length: 174

--boundary
Content-Disposition: form-data; name=""field1""

value1
--boundary
Content-Disposition: form-data; name=""field2""; filename=""example.txt""

value2
--boundary--

Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition
I suggesting making rule 200004 less strict by replacing a ""deny"" with a ""pass"", but still alerting the WAF operator. The operator can choose the disable or change the rule to not log if need be.
In addition, a new rule (200006) would be created in order to actually block cases where an unmatched boundary is actually found in the request.","This pull request is sort of a workaround for multipart/form-data requests that have multiple boundaries such as common Content-Disposition POST requests.
The issue is that the fix proposed at #1747 and merged at 4d0ca94 could lead to cases where Content-Disposition POST requests such as the one below are denied by default after this commit:
POST /test.html HTTP/1.1
Host: example.org
Content-Type: multipart/form-data;boundary=boundary
Content-Length: 174

--boundary
Content-Disposition: form-data; name=""field1""

value1
--boundary
Content-Disposition: form-data; name=""field2""; filename=""example.txt""

value2
--boundary--

Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition
I suggesting making rule 200004 less strict by replacing a ""deny"" with a ""pass"", but still alerting the WAF operator. The operator can choose the disable or change the rule to not log if need be.
In addition, a new rule (200006) would be created in order to actually block cases where an unmatched boundary is actually found in the request.",True,{'THUMBS_UP': ['https://github.com/tian2992']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1924,2018-10-14T01:53:02Z,2018-11-01T21:10:24Z,2018-11-02T08:12:46Z,CLOSED,False,67,7,2,https://github.com/victorhora,Make multipart boundary check a bit less strict by default,2,"['RIP - Type - Feature', 'RIP - libmodsecurity', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1924,https://github.com/victorhora,2,https://github.com/SpiderLabs/ModSecurity/pull/1924#issuecomment-429589687,"This pull request is sort of a workaround for multipart/form-data requests that have multiple boundaries such as common Content-Disposition POST requests.
The issue is that the fix proposed at #1747 and merged at 4d0ca94 could lead to cases where Content-Disposition POST requests such as the one below are denied by default after this commit:
POST /test.html HTTP/1.1
Host: example.org
Content-Type: multipart/form-data;boundary=boundary
Content-Length: 174

--boundary
Content-Disposition: form-data; name=""field1""

value1
--boundary
Content-Disposition: form-data; name=""field2""; filename=""example.txt""

value2
--boundary--

Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition
I suggesting making rule 200004 less strict by replacing a ""deny"" with a ""pass"", but still alerting the WAF operator. The operator can choose the disable or change the rule to not log if need be.
In addition, a new rule (200006) would be created in order to actually block cases where an unmatched boundary is actually found in the request.","@airween, your comments and thoughts here would also be very welcome :)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1924,2018-10-14T01:53:02Z,2018-11-01T21:10:24Z,2018-11-02T08:12:46Z,CLOSED,False,67,7,2,https://github.com/victorhora,Make multipart boundary check a bit less strict by default,2,"['RIP - Type - Feature', 'RIP - libmodsecurity', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1924,https://github.com/airween,3,https://github.com/SpiderLabs/ModSecurity/pull/1924#issuecomment-429604228,"This pull request is sort of a workaround for multipart/form-data requests that have multiple boundaries such as common Content-Disposition POST requests.
The issue is that the fix proposed at #1747 and merged at 4d0ca94 could lead to cases where Content-Disposition POST requests such as the one below are denied by default after this commit:
POST /test.html HTTP/1.1
Host: example.org
Content-Type: multipart/form-data;boundary=boundary
Content-Length: 174

--boundary
Content-Disposition: form-data; name=""field1""

value1
--boundary
Content-Disposition: form-data; name=""field2""; filename=""example.txt""

value2
--boundary--

Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition
I suggesting making rule 200004 less strict by replacing a ""deny"" with a ""pass"", but still alerting the WAF operator. The operator can choose the disable or change the rule to not log if need be.
In addition, a new rule (200006) would be created in order to actually block cases where an unmatched boundary is actually found in the request.","Oh', I am honoured to be invited, thank you :).
After first review, I didn't see the reason, why do you need to create a new rule with less security, but I can imagine that it helps for the administrators in most cases. I think this proposal is closer to the natural use of ModSecurity.
I just reviewed the Owasp-CRS rule set, and didn't see any affected rule. Anyway, it would be good to notify the CRS team about this changes. I guess the ModSec users will know it from CHANGES :).
I'm afraid I can not add more than above, sorry. :)
Thanks again.",True,{'THUMBS_UP': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1924,2018-10-14T01:53:02Z,2018-11-01T21:10:24Z,2018-11-02T08:12:46Z,CLOSED,False,67,7,2,https://github.com/victorhora,Make multipart boundary check a bit less strict by default,2,"['RIP - Type - Feature', 'RIP - libmodsecurity', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1924,https://github.com/victorhora,4,https://github.com/SpiderLabs/ModSecurity/pull/1924#issuecomment-431606123,"This pull request is sort of a workaround for multipart/form-data requests that have multiple boundaries such as common Content-Disposition POST requests.
The issue is that the fix proposed at #1747 and merged at 4d0ca94 could lead to cases where Content-Disposition POST requests such as the one below are denied by default after this commit:
POST /test.html HTTP/1.1
Host: example.org
Content-Type: multipart/form-data;boundary=boundary
Content-Length: 174

--boundary
Content-Disposition: form-data; name=""field1""

value1
--boundary
Content-Disposition: form-data; name=""field2""; filename=""example.txt""

value2
--boundary--

Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition
I suggesting making rule 200004 less strict by replacing a ""deny"" with a ""pass"", but still alerting the WAF operator. The operator can choose the disable or change the rule to not log if need be.
In addition, a new rule (200006) would be created in order to actually block cases where an unmatched boundary is actually found in the request.","The following cURL command can be used to to illustrate the difference further:
curl -i -X POST -H ""Content-Type: multipart/form-data"" -F ""file1=@file1.txt"" -F ""file2=file2.txt"" http://localhost:8080/?a=upload
Debug logs from v2/v3 are presented below. Both run using vanilla modsecurity.conf-recommended
TLDR; Behaviour is different from v2.
v2:
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][4] Second phase starting (dcfg 55ba3cb2e4b0).
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][4] Input filter: Reading request body.
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][9] Multipart: Boundary: ------------------------0fe8d74093002bdc
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][9] Input filter: Bucket type HEAP contains 299 bytes.
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][9] Multipart: Added part header ""Content-Disposition"" ""form-data; name=\""file1\""; filename=\""file1.txt\""""
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][9] Multipart: Added part header ""Content-Type"" ""text/plain""
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][9] Multipart: Content-Disposition name: file1
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][9] Multipart: Content-Disposition filename: file1.txt
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][9] Multipart: Added file part 55ba3cb7ab08 to the list: name ""file1"" file name ""file1.txt"" (offset 140, length 8)
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][9] Multipart: Added part header ""Content-Disposition"" ""form-data; name=\""file2\""""
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][9] Multipart: Content-Disposition name: file2
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][9] Multipart: Added data to variable: file2.txt
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][9] Multipart: Added part 55ba3cb7b1e8 to the list: name ""file2"" (offset 242, length 9)
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][9] Input filter: Bucket type EOS contains 0 bytes.
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][5] Adding request argument (BODY): name ""file2"", value ""file2.txt""
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][4] Request body no files length: 153
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][4] Input filter: Completed receiving request body (length 299).
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][4] Starting phase REQUEST_BODY.
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][9] This phase consists of 4 rule(s).
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][4] Recipe: Invoking rule 55ba3cb02908; [file ""/usr/local/nginx/conf/modsecurity.conf""] [line ""54""] [id ""200002""].
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][5] Rule 55ba3cb02908: SecRule ""REQBODY_ERROR"" ""!@eq 0"" ""phase:2,auditlog,id:200002,t:none,log,deny,status:400,msg:'Failed to parse request body.',logdata:%{reqbody_error_msg},severity:2""
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][4] Transformation completed in 1 usec.
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][4] Executing operator ""!eq"" with param ""0"" against REQBODY_ERROR.
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][9] Target value: ""0""
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][4] Operator completed in 2 usec.
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][4] Rule returned 0.
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][9] No match, not chained -> mode NEXT_RULE.
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][4] Recipe: Invoking rule 55ba3cb0c640; [file ""/usr/local/nginx/conf/modsecurity.conf""] [line ""75""] [id ""200003""].
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][5] Rule 55ba3cb0c640: SecRule ""MULTIPART_STRICT_ERROR"" ""!@eq 0"" ""phase:2,auditlog,id:200003,t:none,log,deny,status:400,msg:'Multipart request body failed strict validation: PE %{REQBODY_PROCESSOR_ERROR}, BQ %{MULTIPART_BOUNDARY_QUOTED}, BW %{MULTIPART_BOUNDARY_WHITESPACE}, DB %{MULTIPART_DATA_BEFORE}, DA %{MULTIPART_DATA_AFTER}, HF %{MULTIPART_HEADER_FOLDING}, LF %{MULTIPART_LF_LINE}, SM %{MULTIPART_MISSING_SEMICOLON}, IQ %{MULTIPART_INVALID_QUOTING}, IP %{MULTIPART_INVALID_PART}, IH %{MULTIPART_INVALID_HEADER_FOLDING}, FL %{MULTIPART_FILE_LIMIT_EXCEEDED}'""
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][4] Transformation completed in 1 usec.
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][4] Executing operator ""!eq"" with param ""0"" against MULTIPART_STRICT_ERROR.
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][9] Target value: ""0""
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][4] Operator completed in 1 usec.
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][4] Rule returned 0.
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][9] No match, not chained -> mode NEXT_RULE.
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][4] Recipe: Invoking rule 55ba3caff1b8; [file ""/usr/local/nginx/conf/modsecurity.conf""] [line ""118""] [id ""200004""].
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][5] Rule 55ba3caff1b8: SecRule ""MULTIPART_UNMATCHED_BOUNDARY"" ""!@eq 0"" ""phase:2,auditlog,id:200004,t:none,log,deny,msg:'Multipart parser detected a possible unmatched boundary.'""
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][4] Transformation completed in 1 usec.
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][4] Executing operator ""!eq"" with param ""0"" against MULTIPART_UNMATCHED_BOUNDARY.
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][9] Target value: ""0""
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][4] Operator completed in 1 usec.
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][4] Rule returned 0.
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][9] No match, not chained -> mode NEXT_RULE.
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][4] Recipe: Invoking rule 55ba3cb2ccc0; [file ""/usr/local/nginx/conf/modsecurity.conf""] [line ""135""] [id ""200005""].
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][5] Rule 55ba3cb2ccc0: SecRule ""TX:/^MSC_/"" ""!@streq 0"" ""phase:2,log,auditlog,id:200005,t:none,deny,msg:'ModSecurity internal error flagged: %{MATCHED_VAR_NAME}'""
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][4] Rule returned 0.
[15/Oct/2018:09:24:53 --0400] [localhost/sid#55ba3caebc50][rid#55ba3cb6aba0][/][9] No match, not chained -> mode NEXT_RULE.

v3:
[153961061652.969219] [/?a=upload] [4] Starting phase REQUEST_BODY. (SecRules 2)
[153961061652.969219] [/?a=upload] [9] Multipart: Boundary: ------------------------ce4467f3b6a2ffc6
[153961061652.969219] [/?a=upload] [9] Multipart: Added part header ""Content-Disposition"" ""form-data; name=""file1""; filename=""file1.txt"""".
[153961061652.969219] [/?a=upload] [9] Multipart: Added part header ""Content-Type"" ""text/plain"".
[153961061652.969219] [/?a=upload] [9] Multipart: Content-Disposition name: file1.
[153961061652.969219] [/?a=upload] [9] Multipart: Content-Disposition filename: file1.txt.
[153961061652.969219] [/?a=upload] [9] Multipart: Added file part to the list: name ""file1"" file name ""file1.txt"" (offset 140, length 8)
[153961061652.969219] [/?a=upload] [9] Multipart: Added part header ""Content-Disposition"" ""form-data; name=""file2"""".
[153961061652.969219] [/?a=upload] [9] Multipart: Content-Disposition name: file2.
[153961061652.969219] [/?a=upload] [9] Multipart: Added data to variable: file2.txt
[153961061652.969219] [/?a=upload] [9] Multipart: Added part to the list: name ""file2"" (offset 242, length 9)
[153961061652.969219] [/?a=upload] [4] Adding request argument (BODY): name ""file2"", value ""file2.txt""
[153961061652.969219] [/?a=upload] [4] Multipart: Cleanup started (remove files Not set)
[153961061652.969219] [/?a=upload] [9] This phase consists of 4 rule(s).
[153961061652.969219] [/?a=upload] [4] (Rule: 200002) Executing operator ""Eq"" with param ""0"" against REQBODY_ERROR.
[153961061652.969219] [/?a=upload] [9] Target value: ""0"" (Variable: REQBODY_ERROR)
[153961061652.969219] [/?a=upload] [4] Rule returned 0.
[153961061652.969219] [/?a=upload] [9] Matched vars cleaned.
[153961061652.969219] [/?a=upload] [4] (Rule: 200003) Executing operator ""Eq"" with param ""0"" against MULTIPART_STRICT_ERROR.
[153961061652.969219] [/?a=upload] [9] Target value: ""0"" (Variable: MULTIPART_STRICT_ERROR)
[153961061652.969219] [/?a=upload] [4] Rule returned 0.
[153961061652.969219] [/?a=upload] [9] Matched vars cleaned.
[153961061652.969219] [/?a=upload] [4] (Rule: 200004) Executing operator ""Eq"" with param ""0"" against MULTIPART_UNMATCHED_BOUNDARY.
[153961061652.969219] [/?a=upload] [9] Target value: ""2"" (Variable: MULTIPART_UNMATCHED_BOUNDARY)
[153961061652.969219] [/?a=upload] [9] Matched vars updated.
[153961061652.969219] [/?a=upload] [9] Saving msg: Multipart parser detected a possible unmatched boundary.
[153961061652.969219] [/?a=upload] [4] Rule returned 1.
[153961061652.969219] [/?a=upload] [9] Running action: log",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1924,2018-10-14T01:53:02Z,2018-11-01T21:10:24Z,2018-11-02T08:12:46Z,CLOSED,False,67,7,2,https://github.com/victorhora,Make multipart boundary check a bit less strict by default,2,"['RIP - Type - Feature', 'RIP - libmodsecurity', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1924,https://github.com/victorhora,5,https://github.com/SpiderLabs/ModSecurity/pull/1924#issuecomment-433565694,"This pull request is sort of a workaround for multipart/form-data requests that have multiple boundaries such as common Content-Disposition POST requests.
The issue is that the fix proposed at #1747 and merged at 4d0ca94 could lead to cases where Content-Disposition POST requests such as the one below are denied by default after this commit:
POST /test.html HTTP/1.1
Host: example.org
Content-Type: multipart/form-data;boundary=boundary
Content-Length: 174

--boundary
Content-Disposition: form-data; name=""field1""

value1
--boundary
Content-Disposition: form-data; name=""field2""; filename=""example.txt""

value2
--boundary--

Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition
I suggesting making rule 200004 less strict by replacing a ""deny"" with a ""pass"", but still alerting the WAF operator. The operator can choose the disable or change the rule to not log if need be.
In addition, a new rule (200006) would be created in order to actually block cases where an unmatched boundary is actually found in the request.","A test case was added at 760e425 that should reproduce the same behaviour as reported above.
The interesting thing is that the result of the test case is different from what I expected. For some reason Nginx and Apache connectors have a different behaviour when it comes to validating the MULTIPART_UNMATCHED_BOUNDARY variable.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1924,2018-10-14T01:53:02Z,2018-11-01T21:10:24Z,2018-11-02T08:12:46Z,CLOSED,False,67,7,2,https://github.com/victorhora,Make multipart boundary check a bit less strict by default,2,"['RIP - Type - Feature', 'RIP - libmodsecurity', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1924,https://github.com/victorhora,6,https://github.com/SpiderLabs/ModSecurity/pull/1924#issuecomment-433566068,"This pull request is sort of a workaround for multipart/form-data requests that have multiple boundaries such as common Content-Disposition POST requests.
The issue is that the fix proposed at #1747 and merged at 4d0ca94 could lead to cases where Content-Disposition POST requests such as the one below are denied by default after this commit:
POST /test.html HTTP/1.1
Host: example.org
Content-Type: multipart/form-data;boundary=boundary
Content-Length: 174

--boundary
Content-Disposition: form-data; name=""field1""

value1
--boundary
Content-Disposition: form-data; name=""field2""; filename=""example.txt""

value2
--boundary--

Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition
I suggesting making rule 200004 less strict by replacing a ""deny"" with a ""pass"", but still alerting the WAF operator. The operator can choose the disable or change the rule to not log if need be.
In addition, a new rule (200006) would be created in order to actually block cases where an unmatched boundary is actually found in the request.","I believe this demands further investigation, and being so I'm moving this to the 3.0.4 milestone  so we can move ahead with the request and revisit this issue when we have more time.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1924,2018-10-14T01:53:02Z,2018-11-01T21:10:24Z,2018-11-02T08:12:46Z,CLOSED,False,67,7,2,https://github.com/victorhora,Make multipart boundary check a bit less strict by default,2,"['RIP - Type - Feature', 'RIP - libmodsecurity', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1924,https://github.com/airween,7,https://github.com/SpiderLabs/ModSecurity/pull/1924#issuecomment-433615104,"This pull request is sort of a workaround for multipart/form-data requests that have multiple boundaries such as common Content-Disposition POST requests.
The issue is that the fix proposed at #1747 and merged at 4d0ca94 could lead to cases where Content-Disposition POST requests such as the one below are denied by default after this commit:
POST /test.html HTTP/1.1
Host: example.org
Content-Type: multipart/form-data;boundary=boundary
Content-Length: 174

--boundary
Content-Disposition: form-data; name=""field1""

value1
--boundary
Content-Disposition: form-data; name=""field2""; filename=""example.txt""

value2
--boundary--

Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition
I suggesting making rule 200004 less strict by replacing a ""deny"" with a ""pass"", but still alerting the WAF operator. The operator can choose the disable or change the rule to not log if need be.
In addition, a new rule (200006) would be created in order to actually block cases where an unmatched boundary is actually found in the request.","I'll check it soon, hope in next few days.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1924,2018-10-14T01:53:02Z,2018-11-01T21:10:24Z,2018-11-02T08:12:46Z,CLOSED,False,67,7,2,https://github.com/victorhora,Make multipart boundary check a bit less strict by default,2,"['RIP - Type - Feature', 'RIP - libmodsecurity', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1924,https://github.com/airween,8,https://github.com/SpiderLabs/ModSecurity/pull/1924#issuecomment-434823680,"This pull request is sort of a workaround for multipart/form-data requests that have multiple boundaries such as common Content-Disposition POST requests.
The issue is that the fix proposed at #1747 and merged at 4d0ca94 could lead to cases where Content-Disposition POST requests such as the one below are denied by default after this commit:
POST /test.html HTTP/1.1
Host: example.org
Content-Type: multipart/form-data;boundary=boundary
Content-Length: 174

--boundary
Content-Disposition: form-data; name=""field1""

value1
--boundary
Content-Disposition: form-data; name=""field2""; filename=""example.txt""

value2
--boundary--

Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition
I suggesting making rule 200004 less strict by replacing a ""deny"" with a ""pass"", but still alerting the WAF operator. The operator can choose the disable or change the rule to not log if need be.
In addition, a new rule (200006) would be created in order to actually block cases where an unmatched boundary is actually found in the request.","So, I just could checked with v3, and I don't know what would be the expected result :), but I got these at first run:
  # File Name                                         Test Name                                                             Passed?   
--- ---------                                         ---------                                                             -------   
  1 variable-MULTIPART_UNMATCHED_BOUNDARY.json        Testing Variables :: MULTIPART_UNMATCHED_BOUNDARY                     passed!
  2 variable-MULTIPART_UNMATCHED_BOUNDARY.json        Testing Variables :: MULTIPART_UNMATCHED_BOUNDARY - DENY              failed!

As you can see, the 2nd test had failed.
As I see the body of request, the boundaries are wrong - here are the patterns:
79:        ""Content-Type"":""multipart/form-data; boundary=--------------------------756b6d74fa1a8ee2"",
85:        ""----------------------------756b6d74fa1a8ee2"",
89:        ""----------------------------756b6d74fa1a8ee2"",
94:        ""A----------------------------756b6d74fa1a8ee2"",
99:        ""----------------------------756b6d74fa1a8ee2--"",

Now let see the boundaries:
79:        ""--------------------------756b6d74fa1a8ee2"",
85:        ""----------------------------756b6d74fa1a8ee2"",
89:        ""----------------------------756b6d74fa1a8ee2"",
94:        ""A----------------------------756b6d74fa1a8ee2"",
99:        ""----------------------------756b6d74fa1a8ee2--"",

Here you can see, the boundary in header doesn't match with any other boundaries (in body).
I think for that reason, the ""@eq 1"" rule rightfully denied the request.
Add plus two ""-"" signs to header in line 79, or remove two signs from boundary in 85 or 89, and 99 (the valid multipart contains two equal boundary (header and leading), and plus one with ""--"" signals at the end (trailer)).
Hope that's help.",True,{'THUMBS_UP': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1924,2018-10-14T01:53:02Z,2018-11-01T21:10:24Z,2018-11-02T08:12:46Z,CLOSED,False,67,7,2,https://github.com/victorhora,Make multipart boundary check a bit less strict by default,2,"['RIP - Type - Feature', 'RIP - libmodsecurity', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1924,https://github.com/victorhora,9,https://github.com/SpiderLabs/ModSecurity/pull/1924#issuecomment-434907257,"This pull request is sort of a workaround for multipart/form-data requests that have multiple boundaries such as common Content-Disposition POST requests.
The issue is that the fix proposed at #1747 and merged at 4d0ca94 could lead to cases where Content-Disposition POST requests such as the one below are denied by default after this commit:
POST /test.html HTTP/1.1
Host: example.org
Content-Type: multipart/form-data;boundary=boundary
Content-Length: 174

--boundary
Content-Disposition: form-data; name=""field1""

value1
--boundary
Content-Disposition: form-data; name=""field2""; filename=""example.txt""

value2
--boundary--

Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition
I suggesting making rule 200004 less strict by replacing a ""deny"" with a ""pass"", but still alerting the WAF operator. The operator can choose the disable or change the rule to not log if need be.
In addition, a new rule (200006) would be created in order to actually block cases where an unmatched boundary is actually found in the request.","Hi @airween
Your comments and results of are very welcome here. Thank you :)
But just to make sure we are on the same page and that I'm not getting the multipart thing incorrectly, do you agree that the boundaries should be specified according to RFC1341:
In our case, the boundary is defined like so:
boundary=--------------------------756b6d74fa1a8ee2
Then, each subsequent Content-Disposition will carry the same boundary, but appending ""--"" to the beginning of the boundary like so:
----------------------------756b6d74fa1a8ee2
And the last boundary should be specified with a ""--""  to the beginning of the boundary and another ""--"" to the end. Like so:
----------------------------756b6d74fa1a8ee2--
Regarding the test case, yes it is failing but should be passing I think. I found it interesting that the regression_test ends up having a different behaviour from the Apache/Nginx when it came to validating the MULTIPART_UNMATCHED_BOUNDARY variable. Unless I did something wrong which is a possibility :P",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1924,2018-10-14T01:53:02Z,2018-11-01T21:10:24Z,2018-11-02T08:12:46Z,CLOSED,False,67,7,2,https://github.com/victorhora,Make multipart boundary check a bit less strict by default,2,"['RIP - Type - Feature', 'RIP - libmodsecurity', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1924,https://github.com/airween,10,https://github.com/SpiderLabs/ModSecurity/pull/1924#issuecomment-434954934,"This pull request is sort of a workaround for multipart/form-data requests that have multiple boundaries such as common Content-Disposition POST requests.
The issue is that the fix proposed at #1747 and merged at 4d0ca94 could lead to cases where Content-Disposition POST requests such as the one below are denied by default after this commit:
POST /test.html HTTP/1.1
Host: example.org
Content-Type: multipart/form-data;boundary=boundary
Content-Length: 174

--boundary
Content-Disposition: form-data; name=""field1""

value1
--boundary
Content-Disposition: form-data; name=""field2""; filename=""example.txt""

value2
--boundary--

Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition
I suggesting making rule 200004 less strict by replacing a ""deny"" with a ""pass"", but still alerting the WAF operator. The operator can choose the disable or change the rule to not log if need be.
In addition, a new rule (200006) would be created in order to actually block cases where an unmatched boundary is actually found in the request.","Well, you're absolutely right - I totally forgot the additionally ""-"" signs :). Sorry.
I'll continue this check.",True,{'THUMBS_UP': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1924,2018-10-14T01:53:02Z,2018-11-01T21:10:24Z,2018-11-02T08:12:46Z,CLOSED,False,67,7,2,https://github.com/victorhora,Make multipart boundary check a bit less strict by default,2,"['RIP - Type - Feature', 'RIP - libmodsecurity', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1924,https://github.com/defanator,11,https://github.com/SpiderLabs/ModSecurity/pull/1924#issuecomment-435096771,"This pull request is sort of a workaround for multipart/form-data requests that have multiple boundaries such as common Content-Disposition POST requests.
The issue is that the fix proposed at #1747 and merged at 4d0ca94 could lead to cases where Content-Disposition POST requests such as the one below are denied by default after this commit:
POST /test.html HTTP/1.1
Host: example.org
Content-Type: multipart/form-data;boundary=boundary
Content-Length: 174

--boundary
Content-Disposition: form-data; name=""field1""

value1
--boundary
Content-Disposition: form-data; name=""field2""; filename=""example.txt""

value2
--boundary--

Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition
I suggesting making rule 200004 less strict by replacing a ""deny"" with a ""pass"", but still alerting the WAF operator. The operator can choose the disable or change the rule to not log if need be.
In addition, a new rule (200006) would be created in order to actually block cases where an unmatched boundary is actually found in the request.","I'll also ask here as it seems to be related one - is it normal that simple request like the following causes 403 triggered by 200004 rule:
# curl -iv -F param1=1 http://localhost/modsec-full/
*   Trying 127.0.0.1...
* Connected to localhost (127.0.0.1) port 80 (#0)
> POST /modsec-full/ HTTP/1.1
> Host: localhost
> User-Agent: curl/7.47.0
> Accept: */*
> Content-Length: 142
> Expect: 100-continue
> Content-Type: multipart/form-data; boundary=------------------------c0e877fcfd24e4f5
> 
< HTTP/1.1 100 Continue
HTTP/1.1 100 Continue


?
Corresponding request caught by listening on separate port:
# nc -l 9999
POST /modsec-full/ HTTP/1.1
Host: localhost:9999
User-Agent: curl/7.47.0
Accept: */*
Content-Length: 142
Expect: 100-continue
Content-Type: multipart/form-data; boundary=------------------------e4a299f10827f929

--------------------------e4a299f10827f929
Content-Disposition: form-data; name=""param1""

1
--------------------------e4a299f10827f929--",True,{'THUMBS_UP': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1924,2018-10-14T01:53:02Z,2018-11-01T21:10:24Z,2018-11-02T08:12:46Z,CLOSED,False,67,7,2,https://github.com/victorhora,Make multipart boundary check a bit less strict by default,2,"['RIP - Type - Feature', 'RIP - libmodsecurity', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1924,https://github.com/zimmerle,12,https://github.com/SpiderLabs/ModSecurity/pull/1924#issuecomment-435188503,"This pull request is sort of a workaround for multipart/form-data requests that have multiple boundaries such as common Content-Disposition POST requests.
The issue is that the fix proposed at #1747 and merged at 4d0ca94 could lead to cases where Content-Disposition POST requests such as the one below are denied by default after this commit:
POST /test.html HTTP/1.1
Host: example.org
Content-Type: multipart/form-data;boundary=boundary
Content-Length: 174

--boundary
Content-Disposition: form-data; name=""field1""

value1
--boundary
Content-Disposition: form-data; name=""field2""; filename=""example.txt""

value2
--boundary--

Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition
I suggesting making rule 200004 less strict by replacing a ""deny"" with a ""pass"", but still alerting the WAF operator. The operator can choose the disable or change the rule to not log if need be.
In addition, a new rule (200006) would be created in order to actually block cases where an unmatched boundary is actually found in the request.","Changed the default behavior on modsecurity-recommended.conf to not flag the unmatched boundary in that specific use case scenario. By that the behavior is exactly the same as v2.

  
    
      ModSecurity/modsecurity.conf-recommended
    
    
        Lines 53 to 54
      in
      9ada0a2
    
  
  
    

        
          
           SecRule REQBODY_ERROR ""!@eq 0"" \ 
        

        
          
           ""id:'200002', phase:2,t:none,log,deny,status:400,msg:'Failed to parse request body.',logdata:'%{reqbody_error_msg}',severity:2""",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1924,2018-10-14T01:53:02Z,2018-11-01T21:10:24Z,2018-11-02T08:12:46Z,CLOSED,False,67,7,2,https://github.com/victorhora,Make multipart boundary check a bit less strict by default,2,"['RIP - Type - Feature', 'RIP - libmodsecurity', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1924,https://github.com/airween,13,https://github.com/SpiderLabs/ModSecurity/pull/1924#issuecomment-435210086,"This pull request is sort of a workaround for multipart/form-data requests that have multiple boundaries such as common Content-Disposition POST requests.
The issue is that the fix proposed at #1747 and merged at 4d0ca94 could lead to cases where Content-Disposition POST requests such as the one below are denied by default after this commit:
POST /test.html HTTP/1.1
Host: example.org
Content-Type: multipart/form-data;boundary=boundary
Content-Length: 174

--boundary
Content-Disposition: form-data; name=""field1""

value1
--boundary
Content-Disposition: form-data; name=""field2""; filename=""example.txt""

value2
--boundary--

Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition
I suggesting making rule 200004 less strict by replacing a ""deny"" with a ""pass"", but still alerting the WAF operator. The operator can choose the disable or change the rule to not log if need be.
In addition, a new rule (200006) would be created in order to actually block cases where an unmatched boundary is actually found in the request.","Hi @victorhora
looks like you've found a bug :).
The details - hope this will be clear:

your request body looks like a well formed, except some small things:

I think the EOL mark is the \r\n, not just the \n - ModSecurity looks up the \r at the end of line, but may be this isn't relevant
the two form-data header is equal; I think that's no problem, and at the server side the last one will used, but the right way should be like this: name=""filedata[]""; filename=""f1.txt"", and filename=""f2.txt"" - anyway, this would be a new feature in multipart check


there is a ""A"" char at the begin of the boundary at line 10 of request - I don't know, it's just a typo or that's the ""invalid boundary"" - I suppose that is the last one, that makes sense with expected 403
that's very important, that the ""A"" char at the beginning of line isn't an error, it's a valid, also well formed part, and the part will be looks something like this (imagine that this is the content of a text file):

This is a very small test file..
A----------------------------756b6d74fa1a8ee2
Content-Disposition: form-data; name=""filedata""; filename=""small_text_file.txt""
Content-Type: text/plain

This is another very small test file..


the expected value in this case after the multipart check is 2 (@eq 2) or non-zero (!@eq 0), if you want to catch it with action 'deny' (but not 1).
you expect the value 1 (@eq 1), and if it equal to 1, then the result code will be 403 (as expected). The result will be 1 only if there isn't a matched leading or a matched trailing boundary at least.

And the bug, what you've found: if you remove the ""A"" char from the beginning of boundary, the result also will be 2. I reviewed the multipart.cc, and looks like the condition of 'm_flag_unmatched_boundary = 2' assignment isn't correct, because if all boundary matches, then it also evaluated, so the totally well formed request will result with value 2, instead of 0.
I've sent a PR to you: https://github.com/victorhora/ModSecurity/pull/1. Please check it, and if you think that's right, approve that.
Hope that this will be clean :).",True,{'THUMBS_UP': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1924,2018-10-14T01:53:02Z,2018-11-01T21:10:24Z,2018-11-02T08:12:46Z,CLOSED,False,67,7,2,https://github.com/victorhora,Make multipart boundary check a bit less strict by default,2,"['RIP - Type - Feature', 'RIP - libmodsecurity', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1924,https://github.com/airween,14,https://github.com/SpiderLabs/ModSecurity/pull/1924#issuecomment-435215903,"This pull request is sort of a workaround for multipart/form-data requests that have multiple boundaries such as common Content-Disposition POST requests.
The issue is that the fix proposed at #1747 and merged at 4d0ca94 could lead to cases where Content-Disposition POST requests such as the one below are denied by default after this commit:
POST /test.html HTTP/1.1
Host: example.org
Content-Type: multipart/form-data;boundary=boundary
Content-Length: 174

--boundary
Content-Disposition: form-data; name=""field1""

value1
--boundary
Content-Disposition: form-data; name=""field2""; filename=""example.txt""

value2
--boundary--

Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition
I suggesting making rule 200004 less strict by replacing a ""deny"" with a ""pass"", but still alerting the WAF operator. The operator can choose the disable or change the rule to not log if need be.
In addition, a new rule (200006) would be created in order to actually block cases where an unmatched boundary is actually found in the request.","Hi @defanator

I'll also ask here as it seems to be related one - is it normal that simple request like the following causes 403 triggered by 200004 rule:
# curl -iv -F param1=1 http://localhost/modsec-full/
*   Trying 127.0.0.1...
* Connected to localhost (127.0.0.1) port 80 (#0)
> POST /modsec-full/ HTTP/1.1
> Host: localhost
> User-Agent: curl/7.47.0
> Accept: */*
> Content-Length: 142
> Expect: 100-continue
> Content-Type: multipart/form-data; boundary=------------------------c0e877fcfd24e4f5
> 
< HTTP/1.1 100 Continue
HTTP/1.1 100 Continue

?
Corresponding request caught by listening on separate port:
# nc -l 9999
POST /modsec-full/ HTTP/1.1
Host: localhost:9999
User-Agent: curl/7.47.0
Accept: */*
Content-Length: 142
Expect: 100-continue
Content-Type: multipart/form-data; boundary=------------------------e4a299f10827f929

--------------------------e4a299f10827f929
Content-Disposition: form-data; name=""param1""

1
--------------------------e4a299f10827f929--


if the rule uses ""!@eq 0"", then the answer is yes :). That's what I fixed few minutes ago: https://github.com/victorhora/ModSecurity/pull/1
Please check it if you can.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1943,2018-10-26T02:11:35Z,2018-11-01T19:18:45Z,2018-11-01T19:18:46Z,CLOSED,False,0,1,1,https://github.com/supplient,Fix double macros bug,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1943,https://github.com/supplient,1,https://github.com/SpiderLabs/ModSecurity/pull/1943,"Macro run strangely if I input double macros like ""%{ARGS_COMBINED_SIZE}%{ARGS_COMBINED_SIZE}"".
Example(id and phase are omitted for convenience):
	SecAction ""setvar:tx.msg=%{ARGS_COMBINED_SIZE}%{ARGS_COMBINED_SIZE}""

The scanner(lexical analyzer)'s status change road:
	0. INITIAL
	1. -[SecAction]-> TRANSACTION_FROM_DIRECTIVE_TO_ACTIONS
	2. -[ ""]-> EXPECTING_ACTIONS_ENDS_WITH_DOUBLE_QUOTE
	3. -[setvar:]-> SETVAR_ACTION_NONQUOTED
	4. -[tx.]-> EXPECTING_VAR_PARAMETER_OR_MACRO_NONQUOTED
	5. -[msg]-> EXPECTING_VAR_PARAMETER_OR_MACRO_NONQUOTED
	6. -[=]-> SETVAR_ACTION_NONQUOTED_WAITING_CONTENT
	7. -[%{]-> EXPECTING_ACTION_PREDICATE_VARIABLE
	8. -[ARGS_COMBINED_SIZE]-> EXPECTING_ACTION_PREDICATE_VARIABLE
	9. -[}%]-> SETVAR_ACTION_NONQUOTED_WAITING_CONTENT
	10. -[{ARGS_COMBINED_SIZE}]-> SETVAR_ACTION_NONQUOTED_WAITING_CONTENT
	11. -[""]-> EXPECTING_ACTIONS_ENDS_WITH_DOUBLE_QUOTE
			-> INITIAL

The ninth step should be paid attention. Since the ninth step take }%, the tenth step doesn't have %. So the tenth step cannot know there is a macro expansion.","Macro run strangely if I input double macros like ""%{ARGS_COMBINED_SIZE}%{ARGS_COMBINED_SIZE}"".
Example(id and phase are omitted for convenience):
	SecAction ""setvar:tx.msg=%{ARGS_COMBINED_SIZE}%{ARGS_COMBINED_SIZE}""

The scanner(lexical analyzer)'s status change road:
	0. INITIAL
	1. -[SecAction]-> TRANSACTION_FROM_DIRECTIVE_TO_ACTIONS
	2. -[ ""]-> EXPECTING_ACTIONS_ENDS_WITH_DOUBLE_QUOTE
	3. -[setvar:]-> SETVAR_ACTION_NONQUOTED
	4. -[tx.]-> EXPECTING_VAR_PARAMETER_OR_MACRO_NONQUOTED
	5. -[msg]-> EXPECTING_VAR_PARAMETER_OR_MACRO_NONQUOTED
	6. -[=]-> SETVAR_ACTION_NONQUOTED_WAITING_CONTENT
	7. -[%{]-> EXPECTING_ACTION_PREDICATE_VARIABLE
	8. -[ARGS_COMBINED_SIZE]-> EXPECTING_ACTION_PREDICATE_VARIABLE
	9. -[}%]-> SETVAR_ACTION_NONQUOTED_WAITING_CONTENT
	10. -[{ARGS_COMBINED_SIZE}]-> SETVAR_ACTION_NONQUOTED_WAITING_CONTENT
	11. -[""]-> EXPECTING_ACTIONS_ENDS_WITH_DOUBLE_QUOTE
			-> INITIAL

The ninth step should be paid attention. Since the ninth step take }%, the tenth step doesn't have %. So the tenth step cannot know there is a macro expansion.",True,"{'HOORAY': ['https://github.com/zimmerle'], 'HEART': ['https://github.com/zimmerle'], 'THUMBS_UP': ['https://github.com/zimmerle']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1943,2018-10-26T02:11:35Z,2018-11-01T19:18:45Z,2018-11-01T19:18:46Z,CLOSED,False,0,1,1,https://github.com/supplient,Fix double macros bug,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1943,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1943#issuecomment-433277621,"Macro run strangely if I input double macros like ""%{ARGS_COMBINED_SIZE}%{ARGS_COMBINED_SIZE}"".
Example(id and phase are omitted for convenience):
	SecAction ""setvar:tx.msg=%{ARGS_COMBINED_SIZE}%{ARGS_COMBINED_SIZE}""

The scanner(lexical analyzer)'s status change road:
	0. INITIAL
	1. -[SecAction]-> TRANSACTION_FROM_DIRECTIVE_TO_ACTIONS
	2. -[ ""]-> EXPECTING_ACTIONS_ENDS_WITH_DOUBLE_QUOTE
	3. -[setvar:]-> SETVAR_ACTION_NONQUOTED
	4. -[tx.]-> EXPECTING_VAR_PARAMETER_OR_MACRO_NONQUOTED
	5. -[msg]-> EXPECTING_VAR_PARAMETER_OR_MACRO_NONQUOTED
	6. -[=]-> SETVAR_ACTION_NONQUOTED_WAITING_CONTENT
	7. -[%{]-> EXPECTING_ACTION_PREDICATE_VARIABLE
	8. -[ARGS_COMBINED_SIZE]-> EXPECTING_ACTION_PREDICATE_VARIABLE
	9. -[}%]-> SETVAR_ACTION_NONQUOTED_WAITING_CONTENT
	10. -[{ARGS_COMBINED_SIZE}]-> SETVAR_ACTION_NONQUOTED_WAITING_CONTENT
	11. -[""]-> EXPECTING_ACTIONS_ENDS_WITH_DOUBLE_QUOTE
			-> INITIAL

The ninth step should be paid attention. Since the ninth step take }%, the tenth step doesn't have %. So the tenth step cannot know there is a macro expansion.","Good work. thank you!
Very hard to get contribution on the parser. Kudos :)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1943,2018-10-26T02:11:35Z,2018-11-01T19:18:45Z,2018-11-01T19:18:46Z,CLOSED,False,0,1,1,https://github.com/supplient,Fix double macros bug,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1943,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1943#issuecomment-435154823,"Macro run strangely if I input double macros like ""%{ARGS_COMBINED_SIZE}%{ARGS_COMBINED_SIZE}"".
Example(id and phase are omitted for convenience):
	SecAction ""setvar:tx.msg=%{ARGS_COMBINED_SIZE}%{ARGS_COMBINED_SIZE}""

The scanner(lexical analyzer)'s status change road:
	0. INITIAL
	1. -[SecAction]-> TRANSACTION_FROM_DIRECTIVE_TO_ACTIONS
	2. -[ ""]-> EXPECTING_ACTIONS_ENDS_WITH_DOUBLE_QUOTE
	3. -[setvar:]-> SETVAR_ACTION_NONQUOTED
	4. -[tx.]-> EXPECTING_VAR_PARAMETER_OR_MACRO_NONQUOTED
	5. -[msg]-> EXPECTING_VAR_PARAMETER_OR_MACRO_NONQUOTED
	6. -[=]-> SETVAR_ACTION_NONQUOTED_WAITING_CONTENT
	7. -[%{]-> EXPECTING_ACTION_PREDICATE_VARIABLE
	8. -[ARGS_COMBINED_SIZE]-> EXPECTING_ACTION_PREDICATE_VARIABLE
	9. -[}%]-> SETVAR_ACTION_NONQUOTED_WAITING_CONTENT
	10. -[{ARGS_COMBINED_SIZE}]-> SETVAR_ACTION_NONQUOTED_WAITING_CONTENT
	11. -[""]-> EXPECTING_ACTIONS_ENDS_WITH_DOUBLE_QUOTE
			-> INITIAL

The ninth step should be paid attention. Since the ninth step take }%, the tenth step doesn't have %. So the tenth step cannot know there is a macro expansion.","Hi @supplient,
Made the modifications that I've suggested and the patch is now merged. Thank you.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1949,2018-11-07T16:03:28Z,2018-11-27T13:45:59Z,2018-11-28T07:06:17Z,CLOSED,False,11,6,2,https://github.com/Cloaked9000,Replaced log locking using mutex with fcntl lock,1,"['RIP - libmodsecurity', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1949,https://github.com/Cloaked9000,1,https://github.com/SpiderLabs/ModSecurity/pull/1949,Switching from mutexes to file locking for logging. Fixes #1927,Switching from mutexes to file locking for logging. Fixes #1927,True,"{'HEART': ['https://github.com/victorhora', 'https://github.com/defanator']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1949,2018-11-07T16:03:28Z,2018-11-27T13:45:59Z,2018-11-28T07:06:17Z,CLOSED,False,11,6,2,https://github.com/Cloaked9000,Replaced log locking using mutex with fcntl lock,1,"['RIP - libmodsecurity', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1949,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1949#issuecomment-442063120,Switching from mutexes to file locking for logging. Fixes #1927,"Hi @Cloaked9000,
Sorry for the delay in looking into this. There is indeed a very clever approach. Thank you. Merged.",True,{'HOORAY': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1949,2018-11-07T16:03:28Z,2018-11-27T13:45:59Z,2018-11-28T07:06:17Z,CLOSED,False,11,6,2,https://github.com/Cloaked9000,Replaced log locking using mutex with fcntl lock,1,"['RIP - libmodsecurity', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1949,https://github.com/defanator,3,https://github.com/SpiderLabs/ModSecurity/pull/1949#issuecomment-442342254,Switching from mutexes to file locking for logging. Fixes #1927,@Cloaked9000 kudos for this one!,True,{'THUMBS_UP': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1955,2018-11-14T21:12:37Z,2018-11-21T17:50:13Z,2018-11-21T17:50:13Z,CLOSED,False,865,829,4,https://github.com/victorhora,Make the boundary check less strict as per RFC2046,2,"['enhancement', 'RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1955,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/1955,"This PR is based on #1821 but directed at the v3 branch and with a test case to validate the changes.
According to the RFC2046 page 22, indeed the parser seemed to be more strict than it should. I believe this is safe to be merged.","This PR is based on #1821 but directed at the v3 branch and with a test case to validate the changes.
According to the RFC2046 page 22, indeed the parser seemed to be more strict than it should. I believe this is safe to be merged.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1955,2018-11-14T21:12:37Z,2018-11-21T17:50:13Z,2018-11-21T17:50:13Z,CLOSED,False,865,829,4,https://github.com/victorhora,Make the boundary check less strict as per RFC2046,2,"['enhancement', 'RIP - libmodsecurity', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1955,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1955#issuecomment-440755398,"This PR is based on #1821 but directed at the v3 branch and with a test case to validate the changes.
According to the RFC2046 page 22, indeed the parser seemed to be more strict than it should. I believe this is safe to be merged.",Merged! thanks,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1957,2018-11-15T11:49:50Z,2018-12-11T12:43:29Z,2018-12-15T00:14:05Z,CLOSED,False,13,5,3,https://github.com/blappm,Fix for apr_global_mutex_create() crashes with mod_security 2.9.2,2,"['enhancement', '2.x']",https://github.com/SpiderLabs/ModSecurity/pull/1957,https://github.com/blappm,1,https://github.com/SpiderLabs/ModSecurity/pull/1957,"Call modsecurity_init() for the first invocation too.
Provide names/files for apr_global_mutex_create() to prevent segfaults in some cases:

[Thu Nov  8 10:58:40 2018] pid 16679 mod_backtrace main() is at 7f949bb6bd30
/usr/lib64/apache2/mod_backtrace.so(+0xddd)[0x7f949bc77ddd]
/usr/sbin/httpd2-prefork(ap_run_fatal_exception+0x4a)[0x7f949bb8b0ba]
/usr/sbin/httpd2-prefork(+0x4f446)[0x7f949bb8b446]
/lib64/libpthread.so.0(+0xf850)[0x7f949a46c850]
/usr/lib64/libapr-1.so.0(apr_global_mutex_lock+0x11)[0x7f949aad6a31]
/usr/lib64/apache2/mod_security2.so(+0x7155e)[0x7f949365655e]
/usr/lib64/apache2/mod_security2.so(+0x72213)[0x7f9493657213]
/usr/lib64/apache2/mod_security2.so(+0x75981)[0x7f949365a981]
/usr/lib64/apache2/mod_security2.so(+0x77ff0)[0x7f949365cff0]
/usr/lib64/apache2/mod_security2.so(+0x7a566)[0x7f949365f566]
/usr/lib64/apache2/mod_security2.so(+0x7bbb7)[0x7f9493660bb7]
/usr/lib64/apache2/mod_security2.so(+0x5be57)[0x7f9493640e57]
/usr/lib64/apache2/mod_security2.so(+0x5b8df)[0x7f94936408df]
/usr/sbin/httpd2-prefork(ap_run_post_read_request+0x4a)[0x7f949bb72cfa]
/usr/sbin/httpd2-prefork(ap_read_request+0xd55)[0x7f949bb75f35]
/usr/sbin/httpd2-prefork(+0x52250)[0x7f949bb8e250]
/usr/sbin/httpd2-prefork(ap_run_process_connection+0x83)[0x7f949bb89d33]
/usr/sbin/httpd2-prefork(+0x5a8de)[0x7f949bb968de]
/usr/sbin/httpd2-prefork(+0x5abca)[0x7f949bb96bca]
/usr/sbin/httpd2-prefork(ap_mpm_run+0x425)[0x7f949bb97055]","Call modsecurity_init() for the first invocation too.
Provide names/files for apr_global_mutex_create() to prevent segfaults in some cases:

[Thu Nov  8 10:58:40 2018] pid 16679 mod_backtrace main() is at 7f949bb6bd30
/usr/lib64/apache2/mod_backtrace.so(+0xddd)[0x7f949bc77ddd]
/usr/sbin/httpd2-prefork(ap_run_fatal_exception+0x4a)[0x7f949bb8b0ba]
/usr/sbin/httpd2-prefork(+0x4f446)[0x7f949bb8b446]
/lib64/libpthread.so.0(+0xf850)[0x7f949a46c850]
/usr/lib64/libapr-1.so.0(apr_global_mutex_lock+0x11)[0x7f949aad6a31]
/usr/lib64/apache2/mod_security2.so(+0x7155e)[0x7f949365655e]
/usr/lib64/apache2/mod_security2.so(+0x72213)[0x7f9493657213]
/usr/lib64/apache2/mod_security2.so(+0x75981)[0x7f949365a981]
/usr/lib64/apache2/mod_security2.so(+0x77ff0)[0x7f949365cff0]
/usr/lib64/apache2/mod_security2.so(+0x7a566)[0x7f949365f566]
/usr/lib64/apache2/mod_security2.so(+0x7bbb7)[0x7f9493660bb7]
/usr/lib64/apache2/mod_security2.so(+0x5be57)[0x7f9493640e57]
/usr/lib64/apache2/mod_security2.so(+0x5b8df)[0x7f94936408df]
/usr/sbin/httpd2-prefork(ap_run_post_read_request+0x4a)[0x7f949bb72cfa]
/usr/sbin/httpd2-prefork(ap_read_request+0xd55)[0x7f949bb75f35]
/usr/sbin/httpd2-prefork(+0x52250)[0x7f949bb8e250]
/usr/sbin/httpd2-prefork(ap_run_process_connection+0x83)[0x7f949bb89d33]
/usr/sbin/httpd2-prefork(+0x5a8de)[0x7f949bb968de]
/usr/sbin/httpd2-prefork(+0x5abca)[0x7f949bb96bca]
/usr/sbin/httpd2-prefork(ap_mpm_run+0x425)[0x7f949bb97055]",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1957,2018-11-15T11:49:50Z,2018-12-11T12:43:29Z,2018-12-15T00:14:05Z,CLOSED,False,13,5,3,https://github.com/blappm,Fix for apr_global_mutex_create() crashes with mod_security 2.9.2,2,"['enhancement', '2.x']",https://github.com/SpiderLabs/ModSecurity/pull/1957,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1957#issuecomment-441771997,"Call modsecurity_init() for the first invocation too.
Provide names/files for apr_global_mutex_create() to prevent segfaults in some cases:

[Thu Nov  8 10:58:40 2018] pid 16679 mod_backtrace main() is at 7f949bb6bd30
/usr/lib64/apache2/mod_backtrace.so(+0xddd)[0x7f949bc77ddd]
/usr/sbin/httpd2-prefork(ap_run_fatal_exception+0x4a)[0x7f949bb8b0ba]
/usr/sbin/httpd2-prefork(+0x4f446)[0x7f949bb8b446]
/lib64/libpthread.so.0(+0xf850)[0x7f949a46c850]
/usr/lib64/libapr-1.so.0(apr_global_mutex_lock+0x11)[0x7f949aad6a31]
/usr/lib64/apache2/mod_security2.so(+0x7155e)[0x7f949365655e]
/usr/lib64/apache2/mod_security2.so(+0x72213)[0x7f9493657213]
/usr/lib64/apache2/mod_security2.so(+0x75981)[0x7f949365a981]
/usr/lib64/apache2/mod_security2.so(+0x77ff0)[0x7f949365cff0]
/usr/lib64/apache2/mod_security2.so(+0x7a566)[0x7f949365f566]
/usr/lib64/apache2/mod_security2.so(+0x7bbb7)[0x7f9493660bb7]
/usr/lib64/apache2/mod_security2.so(+0x5be57)[0x7f9493640e57]
/usr/lib64/apache2/mod_security2.so(+0x5b8df)[0x7f94936408df]
/usr/sbin/httpd2-prefork(ap_run_post_read_request+0x4a)[0x7f949bb72cfa]
/usr/sbin/httpd2-prefork(ap_read_request+0xd55)[0x7f949bb75f35]
/usr/sbin/httpd2-prefork(+0x52250)[0x7f949bb8e250]
/usr/sbin/httpd2-prefork(ap_run_process_connection+0x83)[0x7f949bb89d33]
/usr/sbin/httpd2-prefork(+0x5a8de)[0x7f949bb968de]
/usr/sbin/httpd2-prefork(+0x5abca)[0x7f949bb96bca]
/usr/sbin/httpd2-prefork(ap_mpm_run+0x425)[0x7f949bb97055]","Hi @blappm,
Can you give more details on the crash and on your env?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1957,2018-11-15T11:49:50Z,2018-12-11T12:43:29Z,2018-12-15T00:14:05Z,CLOSED,False,13,5,3,https://github.com/blappm,Fix for apr_global_mutex_create() crashes with mod_security 2.9.2,2,"['enhancement', '2.x']",https://github.com/SpiderLabs/ModSecurity/pull/1957,https://github.com/blappm,3,https://github.com/SpiderLabs/ModSecurity/pull/1957#issuecomment-441810169,"Call modsecurity_init() for the first invocation too.
Provide names/files for apr_global_mutex_create() to prevent segfaults in some cases:

[Thu Nov  8 10:58:40 2018] pid 16679 mod_backtrace main() is at 7f949bb6bd30
/usr/lib64/apache2/mod_backtrace.so(+0xddd)[0x7f949bc77ddd]
/usr/sbin/httpd2-prefork(ap_run_fatal_exception+0x4a)[0x7f949bb8b0ba]
/usr/sbin/httpd2-prefork(+0x4f446)[0x7f949bb8b446]
/lib64/libpthread.so.0(+0xf850)[0x7f949a46c850]
/usr/lib64/libapr-1.so.0(apr_global_mutex_lock+0x11)[0x7f949aad6a31]
/usr/lib64/apache2/mod_security2.so(+0x7155e)[0x7f949365655e]
/usr/lib64/apache2/mod_security2.so(+0x72213)[0x7f9493657213]
/usr/lib64/apache2/mod_security2.so(+0x75981)[0x7f949365a981]
/usr/lib64/apache2/mod_security2.so(+0x77ff0)[0x7f949365cff0]
/usr/lib64/apache2/mod_security2.so(+0x7a566)[0x7f949365f566]
/usr/lib64/apache2/mod_security2.so(+0x7bbb7)[0x7f9493660bb7]
/usr/lib64/apache2/mod_security2.so(+0x5be57)[0x7f9493640e57]
/usr/lib64/apache2/mod_security2.so(+0x5b8df)[0x7f94936408df]
/usr/sbin/httpd2-prefork(ap_run_post_read_request+0x4a)[0x7f949bb72cfa]
/usr/sbin/httpd2-prefork(ap_read_request+0xd55)[0x7f949bb75f35]
/usr/sbin/httpd2-prefork(+0x52250)[0x7f949bb8e250]
/usr/sbin/httpd2-prefork(ap_run_process_connection+0x83)[0x7f949bb89d33]
/usr/sbin/httpd2-prefork(+0x5a8de)[0x7f949bb968de]
/usr/sbin/httpd2-prefork(+0x5abca)[0x7f949bb96bca]
/usr/sbin/httpd2-prefork(ap_mpm_run+0x425)[0x7f949bb97055]","Yes, of course.
The crashes happend on Suse Linux 12, SLES12, SP3 and SP4, but on different Apache versions (2.12 and 2.34). We've seen it on apache installed on ~10 systems, while 20 systems were running fine, maybe because there was less traffic. The special thing here is that apache-prefork from Suse is compiled with libpthread.so, even if it is not running threaded. This may result in the wrong locking mechanism beeing used, since flock/fcntl are not used because the filename in apr_global_mutex_create() is left empty.
There are other people reporting the similar crashes:
#564
From the HA-Proxy Archive I've also found the comment below, but I think the patch
is wrong for apache prefork, it only works for the threaded apache-worker:
https://www.mail-archive.com/haproxy@formilux.org/msg25681.html
`Modsecurity bugs:


When the audit_log is used with the directive ""SecAuditLogType Serial"", in
some systems, the APR mutex initialisation silently fails, this causes a
segmentation fault. For my own usage, I have a patched version of modsec where
I use another mutex than ""APR_LOCK_DEFAULT"" like ""APR_LOCK_PROC_PTHREAD""

rc = apr_global_mutex_create(&msce->auditlog_lock, NULL, APR_LOCK_DEFAULT, mp);


rc = apr_global_mutex_create(&msce->auditlog_lock, NULL, APR_LOCK_PROC_PTHREAD, mp);



`",True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1957,2018-11-15T11:49:50Z,2018-12-11T12:43:29Z,2018-12-15T00:14:05Z,CLOSED,False,13,5,3,https://github.com/blappm,Fix for apr_global_mutex_create() crashes with mod_security 2.9.2,2,"['enhancement', '2.x']",https://github.com/SpiderLabs/ModSecurity/pull/1957,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1957#issuecomment-442828927,"Call modsecurity_init() for the first invocation too.
Provide names/files for apr_global_mutex_create() to prevent segfaults in some cases:

[Thu Nov  8 10:58:40 2018] pid 16679 mod_backtrace main() is at 7f949bb6bd30
/usr/lib64/apache2/mod_backtrace.so(+0xddd)[0x7f949bc77ddd]
/usr/sbin/httpd2-prefork(ap_run_fatal_exception+0x4a)[0x7f949bb8b0ba]
/usr/sbin/httpd2-prefork(+0x4f446)[0x7f949bb8b446]
/lib64/libpthread.so.0(+0xf850)[0x7f949a46c850]
/usr/lib64/libapr-1.so.0(apr_global_mutex_lock+0x11)[0x7f949aad6a31]
/usr/lib64/apache2/mod_security2.so(+0x7155e)[0x7f949365655e]
/usr/lib64/apache2/mod_security2.so(+0x72213)[0x7f9493657213]
/usr/lib64/apache2/mod_security2.so(+0x75981)[0x7f949365a981]
/usr/lib64/apache2/mod_security2.so(+0x77ff0)[0x7f949365cff0]
/usr/lib64/apache2/mod_security2.so(+0x7a566)[0x7f949365f566]
/usr/lib64/apache2/mod_security2.so(+0x7bbb7)[0x7f9493660bb7]
/usr/lib64/apache2/mod_security2.so(+0x5be57)[0x7f9493640e57]
/usr/lib64/apache2/mod_security2.so(+0x5b8df)[0x7f94936408df]
/usr/sbin/httpd2-prefork(ap_run_post_read_request+0x4a)[0x7f949bb72cfa]
/usr/sbin/httpd2-prefork(ap_read_request+0xd55)[0x7f949bb75f35]
/usr/sbin/httpd2-prefork(+0x52250)[0x7f949bb8e250]
/usr/sbin/httpd2-prefork(ap_run_process_connection+0x83)[0x7f949bb89d33]
/usr/sbin/httpd2-prefork(+0x5a8de)[0x7f949bb968de]
/usr/sbin/httpd2-prefork(+0x5abca)[0x7f949bb96bca]
/usr/sbin/httpd2-prefork(ap_mpm_run+0x425)[0x7f949bb97055]","Hi @blappm,
Thank you for the detailed explanation. I've made one more question along the code, about modsecurity_init(modsecurity, mp)  being moved outside an else.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1957,2018-11-15T11:49:50Z,2018-12-11T12:43:29Z,2018-12-15T00:14:05Z,CLOSED,False,13,5,3,https://github.com/blappm,Fix for apr_global_mutex_create() crashes with mod_security 2.9.2,2,"['enhancement', '2.x']",https://github.com/SpiderLabs/ModSecurity/pull/1957,https://github.com/zimmerle,5,https://github.com/SpiderLabs/ModSecurity/pull/1957#issuecomment-446189466,"Call modsecurity_init() for the first invocation too.
Provide names/files for apr_global_mutex_create() to prevent segfaults in some cases:

[Thu Nov  8 10:58:40 2018] pid 16679 mod_backtrace main() is at 7f949bb6bd30
/usr/lib64/apache2/mod_backtrace.so(+0xddd)[0x7f949bc77ddd]
/usr/sbin/httpd2-prefork(ap_run_fatal_exception+0x4a)[0x7f949bb8b0ba]
/usr/sbin/httpd2-prefork(+0x4f446)[0x7f949bb8b446]
/lib64/libpthread.so.0(+0xf850)[0x7f949a46c850]
/usr/lib64/libapr-1.so.0(apr_global_mutex_lock+0x11)[0x7f949aad6a31]
/usr/lib64/apache2/mod_security2.so(+0x7155e)[0x7f949365655e]
/usr/lib64/apache2/mod_security2.so(+0x72213)[0x7f9493657213]
/usr/lib64/apache2/mod_security2.so(+0x75981)[0x7f949365a981]
/usr/lib64/apache2/mod_security2.so(+0x77ff0)[0x7f949365cff0]
/usr/lib64/apache2/mod_security2.so(+0x7a566)[0x7f949365f566]
/usr/lib64/apache2/mod_security2.so(+0x7bbb7)[0x7f9493660bb7]
/usr/lib64/apache2/mod_security2.so(+0x5be57)[0x7f9493640e57]
/usr/lib64/apache2/mod_security2.so(+0x5b8df)[0x7f94936408df]
/usr/sbin/httpd2-prefork(ap_run_post_read_request+0x4a)[0x7f949bb72cfa]
/usr/sbin/httpd2-prefork(ap_read_request+0xd55)[0x7f949bb75f35]
/usr/sbin/httpd2-prefork(+0x52250)[0x7f949bb8e250]
/usr/sbin/httpd2-prefork(ap_run_process_connection+0x83)[0x7f949bb89d33]
/usr/sbin/httpd2-prefork(+0x5a8de)[0x7f949bb968de]
/usr/sbin/httpd2-prefork(+0x5abca)[0x7f949bb96bca]
/usr/sbin/httpd2-prefork(ap_mpm_run+0x425)[0x7f949bb97055]",merged ;),True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1957,2018-11-15T11:49:50Z,2018-12-11T12:43:29Z,2018-12-15T00:14:05Z,CLOSED,False,13,5,3,https://github.com/blappm,Fix for apr_global_mutex_create() crashes with mod_security 2.9.2,2,"['enhancement', '2.x']",https://github.com/SpiderLabs/ModSecurity/pull/1957,https://github.com/emphazer,6,https://github.com/SpiderLabs/ModSecurity/pull/1957#issuecomment-447516131,"Call modsecurity_init() for the first invocation too.
Provide names/files for apr_global_mutex_create() to prevent segfaults in some cases:

[Thu Nov  8 10:58:40 2018] pid 16679 mod_backtrace main() is at 7f949bb6bd30
/usr/lib64/apache2/mod_backtrace.so(+0xddd)[0x7f949bc77ddd]
/usr/sbin/httpd2-prefork(ap_run_fatal_exception+0x4a)[0x7f949bb8b0ba]
/usr/sbin/httpd2-prefork(+0x4f446)[0x7f949bb8b446]
/lib64/libpthread.so.0(+0xf850)[0x7f949a46c850]
/usr/lib64/libapr-1.so.0(apr_global_mutex_lock+0x11)[0x7f949aad6a31]
/usr/lib64/apache2/mod_security2.so(+0x7155e)[0x7f949365655e]
/usr/lib64/apache2/mod_security2.so(+0x72213)[0x7f9493657213]
/usr/lib64/apache2/mod_security2.so(+0x75981)[0x7f949365a981]
/usr/lib64/apache2/mod_security2.so(+0x77ff0)[0x7f949365cff0]
/usr/lib64/apache2/mod_security2.so(+0x7a566)[0x7f949365f566]
/usr/lib64/apache2/mod_security2.so(+0x7bbb7)[0x7f9493660bb7]
/usr/lib64/apache2/mod_security2.so(+0x5be57)[0x7f9493640e57]
/usr/lib64/apache2/mod_security2.so(+0x5b8df)[0x7f94936408df]
/usr/sbin/httpd2-prefork(ap_run_post_read_request+0x4a)[0x7f949bb72cfa]
/usr/sbin/httpd2-prefork(ap_read_request+0xd55)[0x7f949bb75f35]
/usr/sbin/httpd2-prefork(+0x52250)[0x7f949bb8e250]
/usr/sbin/httpd2-prefork(ap_run_process_connection+0x83)[0x7f949bb89d33]
/usr/sbin/httpd2-prefork(+0x5a8de)[0x7f949bb968de]
/usr/sbin/httpd2-prefork(+0x5abca)[0x7f949bb96bca]
/usr/sbin/httpd2-prefork(ap_mpm_run+0x425)[0x7f949bb97055]",finally! thx a lot for this one. we noticed that issue several times the past years.,True,"{'THUMBS_UP': ['https://github.com/blappm', 'https://github.com/zimmerle']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1959,2018-11-20T09:56:32Z,2018-11-27T13:05:29Z,2018-11-28T13:07:57Z,CLOSED,False,10,17,4,https://github.com/weliu,Correct the usage of modsecurity::Phases::NUMBER_OF_PHASES,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1959,https://github.com/weliu,1,https://github.com/SpiderLabs/ModSecurity/pull/1959,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1959,2018-11-20T09:56:32Z,2018-11-27T13:05:29Z,2018-11-28T13:07:57Z,CLOSED,False,10,17,4,https://github.com/weliu,Correct the usage of modsecurity::Phases::NUMBER_OF_PHASES,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1959,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1959#issuecomment-442051119,,Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1966,2018-11-28T09:31:45Z,2018-11-29T13:01:56Z,2018-12-03T11:25:38Z,CLOSED,False,3,1,1,https://github.com/defanator,"Fix ""make dist"" target to include default configuration",1,[],https://github.com/SpiderLabs/ModSecurity/pull/1966,https://github.com/defanator,1,https://github.com/SpiderLabs/ModSecurity/pull/1966,"This change allows to grab fully functional distribution archive from arbitrary future commit, so there will no need to gather modsecurity.conf and its prerequisites (namely unicode.mapping) separately.","This change allows to grab fully functional distribution archive from arbitrary future commit, so there will no need to gather modsecurity.conf and its prerequisites (namely unicode.mapping) separately.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1966,2018-11-28T09:31:45Z,2018-11-29T13:01:56Z,2018-12-03T11:25:38Z,CLOSED,False,3,1,1,https://github.com/defanator,"Fix ""make dist"" target to include default configuration",1,[],https://github.com/SpiderLabs/ModSecurity/pull/1966,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1966#issuecomment-442825482,"This change allows to grab fully functional distribution archive from arbitrary future commit, so there will no need to gather modsecurity.conf and its prerequisites (namely unicode.mapping) separately.",merged! thanks.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1973,2018-12-03T14:26:01Z,2018-12-04T13:51:31Z,2018-12-04T13:51:46Z,CLOSED,False,1,1,1,https://github.com/defanator,Fix tests on FreeBSD,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1973,https://github.com/defanator,1,https://github.com/SpiderLabs/ModSecurity/pull/1973,"FreeBSD has different prefix for bash (which is non-standard shell there), thus make check-TESTS actually was doing nothing:
$ gmake check-TESTS
(   0/  0/   0): test/test-cases/regression/issue-1591.json
(   0/  0/   0): test/test-cases/regression/issue-1785.json
(   0/  0/   0): test/test-cases/regression/issue-1812.json
(   0/  0/   0): test/test-cases/regression/issue-1831.json
(   0/  0/   0): test/test-cases/regression/issue-1844.json
(   0/  0/   0): test/test-cases/regression/issue-1850.json
[..]
Testsuite summary for modsecurity 3.0
# TOTAL: 0
# PASS:  0
# SKIP:  0
# XFAIL: 0
# FAIL:  0
# XPASS: 0
# ERROR: 0

This change allows to run libmodsecurity tests on FreeBSD if bash is installed.","FreeBSD has different prefix for bash (which is non-standard shell there), thus make check-TESTS actually was doing nothing:
$ gmake check-TESTS
(   0/  0/   0): test/test-cases/regression/issue-1591.json
(   0/  0/   0): test/test-cases/regression/issue-1785.json
(   0/  0/   0): test/test-cases/regression/issue-1812.json
(   0/  0/   0): test/test-cases/regression/issue-1831.json
(   0/  0/   0): test/test-cases/regression/issue-1844.json
(   0/  0/   0): test/test-cases/regression/issue-1850.json
[..]
Testsuite summary for modsecurity 3.0
# TOTAL: 0
# PASS:  0
# SKIP:  0
# XFAIL: 0
# FAIL:  0
# XPASS: 0
# ERROR: 0

This change allows to run libmodsecurity tests on FreeBSD if bash is installed.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1973,2018-12-03T14:26:01Z,2018-12-04T13:51:31Z,2018-12-04T13:51:46Z,CLOSED,False,1,1,1,https://github.com/defanator,Fix tests on FreeBSD,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1973,https://github.com/defanator,2,https://github.com/SpiderLabs/ModSecurity/pull/1973#issuecomment-443733918,"FreeBSD has different prefix for bash (which is non-standard shell there), thus make check-TESTS actually was doing nothing:
$ gmake check-TESTS
(   0/  0/   0): test/test-cases/regression/issue-1591.json
(   0/  0/   0): test/test-cases/regression/issue-1785.json
(   0/  0/   0): test/test-cases/regression/issue-1812.json
(   0/  0/   0): test/test-cases/regression/issue-1831.json
(   0/  0/   0): test/test-cases/regression/issue-1844.json
(   0/  0/   0): test/test-cases/regression/issue-1850.json
[..]
Testsuite summary for modsecurity 3.0
# TOTAL: 0
# PASS:  0
# SKIP:  0
# XFAIL: 0
# FAIL:  0
# XPASS: 0
# ERROR: 0

This change allows to run libmodsecurity tests on FreeBSD if bash is installed.",...and of course it does not break anything on Linuxes.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1973,2018-12-03T14:26:01Z,2018-12-04T13:51:31Z,2018-12-04T13:51:46Z,CLOSED,False,1,1,1,https://github.com/defanator,Fix tests on FreeBSD,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1973,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1973#issuecomment-444106204,"FreeBSD has different prefix for bash (which is non-standard shell there), thus make check-TESTS actually was doing nothing:
$ gmake check-TESTS
(   0/  0/   0): test/test-cases/regression/issue-1591.json
(   0/  0/   0): test/test-cases/regression/issue-1785.json
(   0/  0/   0): test/test-cases/regression/issue-1812.json
(   0/  0/   0): test/test-cases/regression/issue-1831.json
(   0/  0/   0): test/test-cases/regression/issue-1844.json
(   0/  0/   0): test/test-cases/regression/issue-1850.json
[..]
Testsuite summary for modsecurity 3.0
# TOTAL: 0
# PASS:  0
# SKIP:  0
# XFAIL: 0
# FAIL:  0
# XPASS: 0
# ERROR: 0

This change allows to run libmodsecurity tests on FreeBSD if bash is installed.",Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1978,2018-12-10T07:56:36Z,2018-12-24T17:03:49Z,2018-12-25T13:45:38Z,CLOSED,False,4,0,1,https://github.com/defanator,Complete merging of particular rule properties,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1978,https://github.com/defanator,1,https://github.com/SpiderLabs/ModSecurity/pull/1978,Closes SpiderLabs/ModSecurity-nginx#142 issue.,Closes SpiderLabs/ModSecurity-nginx#142 issue.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1978,2018-12-10T07:56:36Z,2018-12-24T17:03:49Z,2018-12-25T13:45:38Z,CLOSED,False,4,0,1,https://github.com/defanator,Complete merging of particular rule properties,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1978,https://github.com/defanator,2,https://github.com/SpiderLabs/ModSecurity/pull/1978#issuecomment-445806773,Closes SpiderLabs/ModSecurity-nginx#142 issue.,"The PR may be incomplete, see
SpiderLabs/ModSecurity-nginx#142 (comment) (and below) for details.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1978,2018-12-10T07:56:36Z,2018-12-24T17:03:49Z,2018-12-25T13:45:38Z,CLOSED,False,4,0,1,https://github.com/defanator,Complete merging of particular rule properties,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1978,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1978#issuecomment-445938840,Closes SpiderLabs/ModSecurity-nginx#142 issue.,"Hi @defanator,
Thank you for the report :) that is an interesting subject, because it lead us to a bigger discussion. Back on v2, some configuration items had o global scope even when placed inside a virtual host. That is annoying as hell, as it was counterintuitive. Reading the name of the configuration is/was not possible to tell (or to expect) when/how/if it is going to work.
There are some technical limitations that are important, for instance, very earlier on the request - when the vhost and/or the destination folder is not know -  is the place that we want to threat slow dos. Therefore this particular configuration will no be able to target a single vhost, but the entire server.
That may not be the case of SecRequestBodyLimit. Yet, it is on the same set of the configurations class that will be good to be not-global. IMHO, the only configurations that should be global are the ones that  can't be different due to technical limitations. Working towards it. On v3/dev/reload we are have a differentiation between what is a rule and what is a configuration.
As v3/dev/reload is not yet ready for production, let me see what can i do to circumvent this specific problem.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1978,2018-12-10T07:56:36Z,2018-12-24T17:03:49Z,2018-12-25T13:45:38Z,CLOSED,False,4,0,1,https://github.com/defanator,Complete merging of particular rule properties,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1978,https://github.com/defanator,4,https://github.com/SpiderLabs/ModSecurity/pull/1978#issuecomment-446199017,Closes SpiderLabs/ModSecurity-nginx#142 issue.,"@zimmerle in other words, a configuration like the one described in
SpiderLabs/ModSecurity-nginx#142 (comment) definitely should be considered as valid, right?
Let me know if you have any other concerns that may (or may not) be related to v3/dev/reload in this context (i.e. if that branch is going to be heavily refactored and will unlikely go into 3.0.4, I'd merge this one into v3/master as it fixes the initial issue reported at SpiderLabs/ModSecurity-nginx#142 - it wasn't about redefining values, it's about the fact that the documented behavior of SecRequestBodyLimit does not work entirely if modsecurity_rules_file is specified in top contexts).",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1978,2018-12-10T07:56:36Z,2018-12-24T17:03:49Z,2018-12-25T13:45:38Z,CLOSED,False,4,0,1,https://github.com/defanator,Complete merging of particular rule properties,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1978,https://github.com/zimmerle,5,https://github.com/SpiderLabs/ModSecurity/pull/1978#issuecomment-449755357,Closes SpiderLabs/ModSecurity-nginx#142 issue.,Merged! Thanks :),True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1978,2018-12-10T07:56:36Z,2018-12-24T17:03:49Z,2018-12-25T13:45:38Z,CLOSED,False,4,0,1,https://github.com/defanator,Complete merging of particular rule properties,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/1978,https://github.com/defanator,6,https://github.com/SpiderLabs/ModSecurity/pull/1978#issuecomment-449851678,Closes SpiderLabs/ModSecurity-nginx#142 issue.,"@zimmerle oh, I was going to update the PR to do actual merges like here -
SpiderLabs/ModSecurity-nginx#142 (comment) - so I'll test this once again and submit a new one.
Also, here's the full list of directives which do not get merged:
SecRuleEngine
SecRequestBodyAccess
SecResponseBodyAccess
SecXmlExternalEntity
SecUploadKeepFiles
SecTmpSaveUploadedFiles
SecRequestBodyLimit
SecResponseBodyLimit
SecRequestBodyLimitAction
SecResponseBodyLimitAction
SecUploadFileLimit
SecUploadFileMode",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1984,2018-12-14T21:17:07Z,2018-12-17T13:22:15Z,2018-12-17T13:22:15Z,CLOSED,False,3,2,1,https://github.com/chuckwolber,Use of AC_CHECK_FILE prevents cross compilation.,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1984,https://github.com/chuckwolber,1,https://github.com/SpiderLabs/ModSecurity/pull/1984,"The use of AC_CHECK_FILE causes the following error when cross compiling:
configure: error: cannot check for file existence when cross compiling
The solution is to check for the file directly instead of using a macro.
Resolves: #1983","The use of AC_CHECK_FILE causes the following error when cross compiling:
configure: error: cannot check for file existence when cross compiling
The solution is to check for the file directly instead of using a macro.
Resolves: #1983",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1984,2018-12-14T21:17:07Z,2018-12-17T13:22:15Z,2018-12-17T13:22:15Z,CLOSED,False,3,2,1,https://github.com/chuckwolber,Use of AC_CHECK_FILE prevents cross compilation.,1,[],https://github.com/SpiderLabs/ModSecurity/pull/1984,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1984#issuecomment-447843511,"The use of AC_CHECK_FILE causes the following error when cross compiling:
configure: error: cannot check for file existence when cross compiling
The solution is to check for the file directly instead of using a macro.
Resolves: #1983",Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1990,2018-12-26T06:04:56Z,2019-01-08T13:42:42Z,2019-01-08T13:42:42Z,CLOSED,False,74,67,1,https://github.com/defanator,Improve configuration merge logic for a number of directives,4,"['enhancement', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1990,https://github.com/defanator,1,https://github.com/SpiderLabs/ModSecurity/pull/1990,"Namely,
SecRuleEngine
SecArgumentSeparator
SecHttpBlKey
SecRequestBodyAccess
SecRequestBodyLimit
SecRequestBodyLimitAction
SecResponseBodyAccess
SecResponseBodyLimit
SecResponseBodyLimitAction
SecTmpDir
SecTmpSaveUploadedFiles
SecUploadDir
SecUploadFileLimit
SecUploadFileMode
SecUploadKeepFiles
SecWebAppId
SecXmlExternalEntity

Tests for nginx connector will follow.","Namely,
SecRuleEngine
SecArgumentSeparator
SecHttpBlKey
SecRequestBodyAccess
SecRequestBodyLimit
SecRequestBodyLimitAction
SecResponseBodyAccess
SecResponseBodyLimit
SecResponseBodyLimitAction
SecTmpDir
SecTmpSaveUploadedFiles
SecUploadDir
SecUploadFileLimit
SecUploadFileMode
SecUploadKeepFiles
SecWebAppId
SecXmlExternalEntity

Tests for nginx connector will follow.",True,{'HEART': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1990,2018-12-26T06:04:56Z,2019-01-08T13:42:42Z,2019-01-08T13:42:42Z,CLOSED,False,74,67,1,https://github.com/defanator,Improve configuration merge logic for a number of directives,4,"['enhancement', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1990,https://github.com/defanator,2,https://github.com/SpiderLabs/ModSecurity/pull/1990#issuecomment-450102591,"Namely,
SecRuleEngine
SecArgumentSeparator
SecHttpBlKey
SecRequestBodyAccess
SecRequestBodyLimit
SecRequestBodyLimitAction
SecResponseBodyAccess
SecResponseBodyLimit
SecResponseBodyLimitAction
SecTmpDir
SecTmpSaveUploadedFiles
SecUploadDir
SecUploadFileLimit
SecUploadFileMode
SecUploadKeepFiles
SecWebAppId
SecXmlExternalEntity

Tests for nginx connector will follow.","@zimmerle could you please re-run https://travis-ci.org/SpiderLabs/ModSecurity/builds/472256050 to make Travis happy after
78b7fa4? I don't have ""restart build"" button there due to repository perms. TIA!",True,"{'THUMBS_UP': ['https://github.com/zimmerle', 'https://github.com/victorhora']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1990,2018-12-26T06:04:56Z,2019-01-08T13:42:42Z,2019-01-08T13:42:42Z,CLOSED,False,74,67,1,https://github.com/defanator,Improve configuration merge logic for a number of directives,4,"['enhancement', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1990,https://github.com/victorhora,3,https://github.com/SpiderLabs/ModSecurity/pull/1990#issuecomment-450401376,"Namely,
SecRuleEngine
SecArgumentSeparator
SecHttpBlKey
SecRequestBodyAccess
SecRequestBodyLimit
SecRequestBodyLimitAction
SecResponseBodyAccess
SecResponseBodyLimit
SecResponseBodyLimitAction
SecTmpDir
SecTmpSaveUploadedFiles
SecUploadDir
SecUploadFileLimit
SecUploadFileMode
SecUploadKeepFiles
SecWebAppId
SecXmlExternalEntity

Tests for nginx connector will follow.",Seems like the build has passed @defanator :),True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1990,2018-12-26T06:04:56Z,2019-01-08T13:42:42Z,2019-01-08T13:42:42Z,CLOSED,False,74,67,1,https://github.com/defanator,Improve configuration merge logic for a number of directives,4,"['enhancement', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/1990,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/1990#issuecomment-452302283,"Namely,
SecRuleEngine
SecArgumentSeparator
SecHttpBlKey
SecRequestBodyAccess
SecRequestBodyLimit
SecRequestBodyLimitAction
SecResponseBodyAccess
SecResponseBodyLimit
SecResponseBodyLimitAction
SecTmpDir
SecTmpSaveUploadedFiles
SecUploadDir
SecUploadFileLimit
SecUploadFileMode
SecUploadKeepFiles
SecWebAppId
SecXmlExternalEntity

Tests for nginx connector will follow.",Merged :) Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1992,2018-12-29T08:33:36Z,2019-11-20T21:54:19Z,2019-11-20T21:54:20Z,CLOSED,False,30,3,3,https://github.com/tdoubley,base64 decode,3,"['3.x', 'workaround available']",https://github.com/SpiderLabs/ModSecurity/pull/1992,https://github.com/tdoubley,1,https://github.com/SpiderLabs/ModSecurity/pull/1992,"the base64decode not check the valid of input string，
if input is a invalid base64 string VGVzdENhc2U=VGVzdENhc2U=, we will get a empty string, I think it coulde lead false positive.


the input string len is strlen(data.c_str()), if input is VGVzdENhc2U=\\u0000VGVzdENhc2U=,  the variable len equal to 12, we will loss part of data. I'm not sure if it was a mistake?","the base64decode not check the valid of input string，
if input is a invalid base64 string VGVzdENhc2U=VGVzdENhc2U=, we will get a empty string, I think it coulde lead false positive.


the input string len is strlen(data.c_str()), if input is VGVzdENhc2U=\\u0000VGVzdENhc2U=,  the variable len equal to 12, we will loss part of data. I'm not sure if it was a mistake?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1992,2018-12-29T08:33:36Z,2019-11-20T21:54:19Z,2019-11-20T21:54:20Z,CLOSED,False,30,3,3,https://github.com/tdoubley,base64 decode,3,"['3.x', 'workaround available']",https://github.com/SpiderLabs/ModSecurity/pull/1992,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/1992#issuecomment-452298290,"the base64decode not check the valid of input string，
if input is a invalid base64 string VGVzdENhc2U=VGVzdENhc2U=, we will get a empty string, I think it coulde lead false positive.


the input string len is strlen(data.c_str()), if input is VGVzdENhc2U=\\u0000VGVzdENhc2U=,  the variable len equal to 12, we will loss part of data. I'm not sure if it was a mistake?","Hi @tdoubley,
Thank you for the patches.
Reading your code I notice that the real change is considering the return of mbedtls_base64_decode; if equals to MBEDTLS_ERR_BASE64_INVALID_CHARACTER return the original data instead of an empty string. Not sure if that is the best approach given the fact that it may lead the user to think that the decoded string is the string itself.
The operator modificatior & can be used in order to verify is the output was consistent or not.
I also notice that we return the original data if there is a memory allocation problem. We may want to change that as well.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1992,2018-12-29T08:33:36Z,2019-11-20T21:54:19Z,2019-11-20T21:54:20Z,CLOSED,False,30,3,3,https://github.com/tdoubley,base64 decode,3,"['3.x', 'workaround available']",https://github.com/SpiderLabs/ModSecurity/pull/1992,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/1992#issuecomment-452299585,"the base64decode not check the valid of input string，
if input is a invalid base64 string VGVzdENhc2U=VGVzdENhc2U=, we will get a empty string, I think it coulde lead false positive.


the input string len is strlen(data.c_str()), if input is VGVzdENhc2U=\\u0000VGVzdENhc2U=,  the variable len equal to 12, we will loss part of data. I'm not sure if it was a mistake?",Addressing your concern about the addition to the null byte. That is indeed a known evasion technique. To address that the user can make usage of removeNulls transformation. Together with the multimatch gives the user a huge surface to work with.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1992,2018-12-29T08:33:36Z,2019-11-20T21:54:19Z,2019-11-20T21:54:20Z,CLOSED,False,30,3,3,https://github.com/tdoubley,base64 decode,3,"['3.x', 'workaround available']",https://github.com/SpiderLabs/ModSecurity/pull/1992,https://github.com/victorhora,4,https://github.com/SpiderLabs/ModSecurity/pull/1992#issuecomment-471336882,"the base64decode not check the valid of input string，
if input is a invalid base64 string VGVzdENhc2U=VGVzdENhc2U=, we will get a empty string, I think it coulde lead false positive.


the input string len is strlen(data.c_str()), if input is VGVzdENhc2U=\\u0000VGVzdENhc2U=,  the variable len equal to 12, we will loss part of data. I'm not sure if it was a mistake?","the real change is considering the return of mbedtls_base64_decode; if equals to MBEDTLS_ERR_BASE64_INVALID_CHARACTER return the original data instead of an empty string. Not sure if that is the best approach given the fact that it may lead the user to think that the decoded string is the string itself.
The operator modificatior & can be used in order to verify is the output was consistent or not.
I also notice that we return the original data if there is a memory allocation problem. We may want to change that as well.


Addressing your concern about the addition to the null byte. That is indeed a known evasion technique. To address that the user can make usage of removeNulls transformation. Together with the multimatch gives the user a huge surface to work with.

There's also the fact that we have base64DecodeExt which uses a more forgiving implementations of Base64 decoding which should cover the use case that @tdoubley patch covers?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1992,2018-12-29T08:33:36Z,2019-11-20T21:54:19Z,2019-11-20T21:54:20Z,CLOSED,False,30,3,3,https://github.com/tdoubley,base64 decode,3,"['3.x', 'workaround available']",https://github.com/SpiderLabs/ModSecurity/pull/1992,https://github.com/zimmerle,5,https://github.com/SpiderLabs/ModSecurity/pull/1992#issuecomment-542669031,"the base64decode not check the valid of input string，
if input is a invalid base64 string VGVzdENhc2U=VGVzdENhc2U=, we will get a empty string, I think it coulde lead false positive.


the input string len is strlen(data.c_str()), if input is VGVzdENhc2U=\\u0000VGVzdENhc2U=,  the variable len equal to 12, we will loss part of data. I'm not sure if it was a mistake?","Hi @tdoubley,
Do you still have an interest in work with this pull request?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1992,2018-12-29T08:33:36Z,2019-11-20T21:54:19Z,2019-11-20T21:54:20Z,CLOSED,False,30,3,3,https://github.com/tdoubley,base64 decode,3,"['3.x', 'workaround available']",https://github.com/SpiderLabs/ModSecurity/pull/1992,https://github.com/zimmerle,6,https://github.com/SpiderLabs/ModSecurity/pull/1992#issuecomment-556449057,"the base64decode not check the valid of input string，
if input is a invalid base64 string VGVzdENhc2U=VGVzdENhc2U=, we will get a empty string, I think it coulde lead false positive.


the input string len is strlen(data.c_str()), if input is VGVzdENhc2U=\\u0000VGVzdENhc2U=,  the variable len equal to 12, we will loss part of data. I'm not sure if it was a mistake?",Thank for your interest. Please open if you are still interested in the contribution.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,1997,2019-01-11T15:32:39Z,,2019-03-13T12:06:50Z,OPEN,False,17,13,2,https://github.com/arminabf,fix logging issues,4,"['enhancement', '2.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/1997,https://github.com/arminabf,1,https://github.com/SpiderLabs/ModSecurity/pull/1997,"mod_security does not allow per-module log level configuration nor to log module information into error_log. For example, following does not work
LogLevel security2:info
ErrorLogFormat ""{""\""module\"":\""%m\"", \""level\"":\""%l\"", \""message\"":\""%M\""}""
In the later example no module information is logged. Commit 1f4b951 fixes these issues.
In addition, custom log formats are not applied for messages being logged at startup. Commit b9e8317 fixes some (even though not all) log messages where only the default log format is applied.
Please note that there are more log messages having that problem but that would need far-reaching changes. For example in the function msc_status_engine_call() that is also  used by standalone/api.c where no server_rec is available.","mod_security does not allow per-module log level configuration nor to log module information into error_log. For example, following does not work
LogLevel security2:info
ErrorLogFormat ""{""\""module\"":\""%m\"", \""level\"":\""%l\"", \""message\"":\""%M\""}""
In the later example no module information is logged. Commit 1f4b951 fixes these issues.
In addition, custom log formats are not applied for messages being logged at startup. Commit b9e8317 fixes some (even though not all) log messages where only the default log format is applied.
Please note that there are more log messages having that problem but that would need far-reaching changes. For example in the function msc_status_engine_call() that is also  used by standalone/api.c where no server_rec is available.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2002,2019-01-14T06:08:44Z,2019-01-14T19:31:38Z,2019-01-14T19:31:38Z,CLOSED,False,1,1,1,https://github.com/defanator,Fixed buffer overflow in Utils::Md5::hexdigest(),1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2002,https://github.com/defanator,1,https://github.com/SpiderLabs/ModSecurity/pull/2002,"Found via failed test (auditlog.json) on Alpine Linux 3.8.2:
$ cat test/test-cases/regression/auditlog.json.log
:test-result: PASS auditlog.json:auditlog : basic parser test - Parallel
test/test-suite.sh: line 14: 23740 Segmentation fault      (core dumped) $VALGRIND $PARAM ./regression_tests ../$FILE:$i
:test-result: FAIL segfault: .././test/test-cases/regression/auditlog.json:1
./regression_tests .././test/test-cases/regression/auditlog.json:1
:test-result: PASS auditlog.json:auditlog : basic parser test - Serial

./regression_tests .././test/test-cases/regression/auditlog.json:2


Backtrace:
Core was generated by `./regression_tests .././test/test-cases/regression/auditlog.json:1'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  0x00007f4637b6bb8d in __stack_chk_fail () from /lib/ld-musl-x86_64.so.1
(gdb) bt
#0  0x00007f4637b6bb8d in __stack_chk_fail () from /lib/ld-musl-x86_64.so.1
#1  0x00005620f24b78c0 in modsecurity::Utils::Md5::hexdigest (input=...) at utils/md5.cc:22
#2  0x00005620f249115f in modsecurity::audit_log::writer::Parallel::write (this=0x5620f35fd060, transaction=0x5620f3606b60, parts=<optimized out>, error=0x7ffc0067f378)
    at audit_log/writer/parallel.cc:173
#3  0x00005620f249012d in modsecurity::audit_log::AuditLog::saveIfRelevant (this=0x7f4636c332e0, transaction=transaction@entry=0x5620f3606b60, parts=parts@entry=4430)
    at audit_log/audit_log.cc:326
#4  0x00005620f2482d54 in modsecurity::Transaction::processLogging (this=0x5620f3606b60) at transaction.cc:1302
#5  0x00005620f247e7fa in perform_unit_test (test=0x7ffc0067fc68, tests=<optimized out>, res=0x7ffc0067fc08, count=0x7ffc0067fa4c) at regression/regression.cc:348
#6  0x00005620f247b545 in main (argc=<optimized out>, argv=<optimized out>) at regression/regression.cc:500
(gdb)","Found via failed test (auditlog.json) on Alpine Linux 3.8.2:
$ cat test/test-cases/regression/auditlog.json.log
:test-result: PASS auditlog.json:auditlog : basic parser test - Parallel
test/test-suite.sh: line 14: 23740 Segmentation fault      (core dumped) $VALGRIND $PARAM ./regression_tests ../$FILE:$i
:test-result: FAIL segfault: .././test/test-cases/regression/auditlog.json:1
./regression_tests .././test/test-cases/regression/auditlog.json:1
:test-result: PASS auditlog.json:auditlog : basic parser test - Serial

./regression_tests .././test/test-cases/regression/auditlog.json:2


Backtrace:
Core was generated by `./regression_tests .././test/test-cases/regression/auditlog.json:1'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  0x00007f4637b6bb8d in __stack_chk_fail () from /lib/ld-musl-x86_64.so.1
(gdb) bt
#0  0x00007f4637b6bb8d in __stack_chk_fail () from /lib/ld-musl-x86_64.so.1
#1  0x00005620f24b78c0 in modsecurity::Utils::Md5::hexdigest (input=...) at utils/md5.cc:22
#2  0x00005620f249115f in modsecurity::audit_log::writer::Parallel::write (this=0x5620f35fd060, transaction=0x5620f3606b60, parts=<optimized out>, error=0x7ffc0067f378)
    at audit_log/writer/parallel.cc:173
#3  0x00005620f249012d in modsecurity::audit_log::AuditLog::saveIfRelevant (this=0x7f4636c332e0, transaction=transaction@entry=0x5620f3606b60, parts=parts@entry=4430)
    at audit_log/audit_log.cc:326
#4  0x00005620f2482d54 in modsecurity::Transaction::processLogging (this=0x5620f3606b60) at transaction.cc:1302
#5  0x00005620f247e7fa in perform_unit_test (test=0x7ffc0067fc68, tests=<optimized out>, res=0x7ffc0067fc08, count=0x7ffc0067fa4c) at regression/regression.cc:348
#6  0x00005620f247b545 in main (argc=<optimized out>, argv=<optimized out>) at regression/regression.cc:500
(gdb)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2002,2019-01-14T06:08:44Z,2019-01-14T19:31:38Z,2019-01-14T19:31:38Z,CLOSED,False,1,1,1,https://github.com/defanator,Fixed buffer overflow in Utils::Md5::hexdigest(),1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2002,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2002#issuecomment-454131789,"Found via failed test (auditlog.json) on Alpine Linux 3.8.2:
$ cat test/test-cases/regression/auditlog.json.log
:test-result: PASS auditlog.json:auditlog : basic parser test - Parallel
test/test-suite.sh: line 14: 23740 Segmentation fault      (core dumped) $VALGRIND $PARAM ./regression_tests ../$FILE:$i
:test-result: FAIL segfault: .././test/test-cases/regression/auditlog.json:1
./regression_tests .././test/test-cases/regression/auditlog.json:1
:test-result: PASS auditlog.json:auditlog : basic parser test - Serial

./regression_tests .././test/test-cases/regression/auditlog.json:2


Backtrace:
Core was generated by `./regression_tests .././test/test-cases/regression/auditlog.json:1'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  0x00007f4637b6bb8d in __stack_chk_fail () from /lib/ld-musl-x86_64.so.1
(gdb) bt
#0  0x00007f4637b6bb8d in __stack_chk_fail () from /lib/ld-musl-x86_64.so.1
#1  0x00005620f24b78c0 in modsecurity::Utils::Md5::hexdigest (input=...) at utils/md5.cc:22
#2  0x00005620f249115f in modsecurity::audit_log::writer::Parallel::write (this=0x5620f35fd060, transaction=0x5620f3606b60, parts=<optimized out>, error=0x7ffc0067f378)
    at audit_log/writer/parallel.cc:173
#3  0x00005620f249012d in modsecurity::audit_log::AuditLog::saveIfRelevant (this=0x7f4636c332e0, transaction=transaction@entry=0x5620f3606b60, parts=parts@entry=4430)
    at audit_log/audit_log.cc:326
#4  0x00005620f2482d54 in modsecurity::Transaction::processLogging (this=0x5620f3606b60) at transaction.cc:1302
#5  0x00005620f247e7fa in perform_unit_test (test=0x7ffc0067fc68, tests=<optimized out>, res=0x7ffc0067fc08, count=0x7ffc0067fa4c) at regression/regression.cc:348
#6  0x00005620f247b545 in main (argc=<optimized out>, argv=<optimized out>) at regression/regression.cc:500
(gdb)",Merged. Thanks.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2003,2019-01-16T23:29:21Z,2019-01-18T13:20:13Z,2019-01-25T02:40:40Z,CLOSED,False,69,68,10,https://github.com/WGH-,Refactor regex code,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2003,https://github.com/WGH-,1,https://github.com/SpiderLabs/ModSecurity/pull/2003,"While proceeding with preparation of my RE2 patch (#1996), I found quite a few odd things with regex code, and decided to attempt to fix them first:

Lack of encapsulation.
Non-method functions for matching without retrieving all groups.
Regex class being copyable without proper copy-constructor (potential UAF
and double free due to pointer members m_pc and m_pce).
Redundant SMatch::m_length, which always equals to match.size() anyway.
Weird SMatch::size_ member which is initialized only by one of the three matching
functions, and equals to the return value of that function anyways.
Several places in code having std::string value instead of reference.","While proceeding with preparation of my RE2 patch (#1996), I found quite a few odd things with regex code, and decided to attempt to fix them first:

Lack of encapsulation.
Non-method functions for matching without retrieving all groups.
Regex class being copyable without proper copy-constructor (potential UAF
and double free due to pointer members m_pc and m_pce).
Redundant SMatch::m_length, which always equals to match.size() anyway.
Weird SMatch::size_ member which is initialized only by one of the three matching
functions, and equals to the return value of that function anyways.
Several places in code having std::string value instead of reference.",True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2003,2019-01-16T23:29:21Z,2019-01-18T13:20:13Z,2019-01-25T02:40:40Z,CLOSED,False,69,68,10,https://github.com/WGH-,Refactor regex code,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2003,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2003#issuecomment-455413281,"While proceeding with preparation of my RE2 patch (#1996), I found quite a few odd things with regex code, and decided to attempt to fix them first:

Lack of encapsulation.
Non-method functions for matching without retrieving all groups.
Regex class being copyable without proper copy-constructor (potential UAF
and double free due to pointer members m_pc and m_pce).
Redundant SMatch::m_length, which always equals to match.size() anyway.
Weird SMatch::size_ member which is initialized only by one of the three matching
functions, and equals to the return value of that function anyways.
Several places in code having std::string value instead of reference.","Hi @WGH-,
Thank you for the patch. Having a look at it tomorrow.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2003,2019-01-16T23:29:21Z,2019-01-18T13:20:13Z,2019-01-25T02:40:40Z,CLOSED,False,69,68,10,https://github.com/WGH-,Refactor regex code,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2003,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/2003#issuecomment-455543542,"While proceeding with preparation of my RE2 patch (#1996), I found quite a few odd things with regex code, and decided to attempt to fix them first:

Lack of encapsulation.
Non-method functions for matching without retrieving all groups.
Regex class being copyable without proper copy-constructor (potential UAF
and double free due to pointer members m_pc and m_pce).
Redundant SMatch::m_length, which always equals to match.size() anyway.
Weird SMatch::size_ member which is initialized only by one of the three matching
functions, and equals to the return value of that function anyways.
Several places in code having std::string value instead of reference.","Patch merged! Made minimal cosmetic changes to make the style check script happy again.
$ make check-coding-style | grep regex 
warning: ./src/utils/regex.cc:43:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
warning: ./src/utils/regex.cc:112:  Closing ) should be moved to the previous line  [whitespace/parens] [2]

I do have suggestions for more refactoring surround this particular implementation. I will send it over you via patch.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2003,2019-01-16T23:29:21Z,2019-01-18T13:20:13Z,2019-01-25T02:40:40Z,CLOSED,False,69,68,10,https://github.com/WGH-,Refactor regex code,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2003,https://github.com/mdunc,4,https://github.com/SpiderLabs/ModSecurity/pull/2003#issuecomment-457367809,"While proceeding with preparation of my RE2 patch (#1996), I found quite a few odd things with regex code, and decided to attempt to fix them first:

Lack of encapsulation.
Non-method functions for matching without retrieving all groups.
Regex class being copyable without proper copy-constructor (potential UAF
and double free due to pointer members m_pc and m_pce).
Redundant SMatch::m_length, which always equals to match.size() anyway.
Weird SMatch::size_ member which is initialized only by one of the three matching
functions, and equals to the return value of that function anyways.
Several places in code having std::string value instead of reference.","I think this caused my build to fail when compiling ModSecurity for nginx.  Configured with the --with-lmdb option.
collection/backend/lmdb.cc: In member function ‘virtual void modsecurity::collection::backend::LMDB::resolveRegularExpression(const string&, std::vector<const modsecurity::VariableValue*>*, modsecurity::Variables::KeyExclusions&)’:
collection/backend/lmdb.cc:541:38: error: use of deleted function ‘modsecurity::Utils::Regex::Regex(const modsecurity::Utils::Regex&)’

Edit: Created an issue for this #2008",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2007,2019-01-22T19:56:34Z,2019-01-30T12:30:56Z,2019-01-30T12:30:56Z,CLOSED,False,77,4,3,https://github.com/WGH-,Add support for capturing group test cases,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2007,https://github.com/WGH-,1,https://github.com/SpiderLabs/ModSecurity/pull/2007,"This enables unit tests to compare the matching groups as well, not just binary match-no match.
The format of JSON test case is extended, new ""re_groups"" parameter is added:
{
      ""type"" : ""op"",
      ""name"" : ""rx"",
      ""param"" : ""(abc)(def)"",
      ""input"" : ""abcdef"",
      ""ret"" : 1,
      ""re_groups"": [""abcdef"", ""abc"", ""def""]
},
{
      ""type"" : ""op"",
      ""name"" : ""rx"",
      ""param"" : ""(abc)(def)"",
      ""input"" : ""abcdef   abcdef"",
      ""ret"" : 1,
      ""re_groups"": [""abcdef"", ""abc"", ""def"", ""abcdef"", ""abc"", ""def""]
}
New tests cases will need to be added to https://github.com/SpiderLabs/secrules-language-tests, of course.","This enables unit tests to compare the matching groups as well, not just binary match-no match.
The format of JSON test case is extended, new ""re_groups"" parameter is added:
{
      ""type"" : ""op"",
      ""name"" : ""rx"",
      ""param"" : ""(abc)(def)"",
      ""input"" : ""abcdef"",
      ""ret"" : 1,
      ""re_groups"": [""abcdef"", ""abc"", ""def""]
},
{
      ""type"" : ""op"",
      ""name"" : ""rx"",
      ""param"" : ""(abc)(def)"",
      ""input"" : ""abcdef   abcdef"",
      ""ret"" : 1,
      ""re_groups"": [""abcdef"", ""abc"", ""def"", ""abcdef"", ""abc"", ""def""]
}
New tests cases will need to be added to https://github.com/SpiderLabs/secrules-language-tests, of course.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2007,2019-01-22T19:56:34Z,2019-01-30T12:30:56Z,2019-01-30T12:30:56Z,CLOSED,False,77,4,3,https://github.com/WGH-,Add support for capturing group test cases,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2007,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2007#issuecomment-458270358,"This enables unit tests to compare the matching groups as well, not just binary match-no match.
The format of JSON test case is extended, new ""re_groups"" parameter is added:
{
      ""type"" : ""op"",
      ""name"" : ""rx"",
      ""param"" : ""(abc)(def)"",
      ""input"" : ""abcdef"",
      ""ret"" : 1,
      ""re_groups"": [""abcdef"", ""abc"", ""def""]
},
{
      ""type"" : ""op"",
      ""name"" : ""rx"",
      ""param"" : ""(abc)(def)"",
      ""input"" : ""abcdef   abcdef"",
      ""ret"" : 1,
      ""re_groups"": [""abcdef"", ""abc"", ""def"", ""abcdef"", ""abc"", ""def""]
}
New tests cases will need to be added to https://github.com/SpiderLabs/secrules-language-tests, of course.","Hi @WGH-,
Are you sending the test cases as well?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2007,2019-01-22T19:56:34Z,2019-01-30T12:30:56Z,2019-01-30T12:30:56Z,CLOSED,False,77,4,3,https://github.com/WGH-,Add support for capturing group test cases,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2007,https://github.com/WGH-,3,https://github.com/SpiderLabs/ModSecurity/pull/2007#issuecomment-458271929,"This enables unit tests to compare the matching groups as well, not just binary match-no match.
The format of JSON test case is extended, new ""re_groups"" parameter is added:
{
      ""type"" : ""op"",
      ""name"" : ""rx"",
      ""param"" : ""(abc)(def)"",
      ""input"" : ""abcdef"",
      ""ret"" : 1,
      ""re_groups"": [""abcdef"", ""abc"", ""def""]
},
{
      ""type"" : ""op"",
      ""name"" : ""rx"",
      ""param"" : ""(abc)(def)"",
      ""input"" : ""abcdef   abcdef"",
      ""ret"" : 1,
      ""re_groups"": [""abcdef"", ""abc"", ""def"", ""abcdef"", ""abc"", ""def""]
}
New tests cases will need to be added to https://github.com/SpiderLabs/secrules-language-tests, of course.","Hi! Yes, I have some test-cases as well. I might find more interesting test cases while working on RE2, which I'm currently doing, that's why I haven't sent them yet.
While we're at it, do you know why searchAll have such an awkward interface? I.e. flattened list of all groups of all matches (see second test case).",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2007,2019-01-22T19:56:34Z,2019-01-30T12:30:56Z,2019-01-30T12:30:56Z,CLOSED,False,77,4,3,https://github.com/WGH-,Add support for capturing group test cases,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2007,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/2007#issuecomment-458301370,"This enables unit tests to compare the matching groups as well, not just binary match-no match.
The format of JSON test case is extended, new ""re_groups"" parameter is added:
{
      ""type"" : ""op"",
      ""name"" : ""rx"",
      ""param"" : ""(abc)(def)"",
      ""input"" : ""abcdef"",
      ""ret"" : 1,
      ""re_groups"": [""abcdef"", ""abc"", ""def""]
},
{
      ""type"" : ""op"",
      ""name"" : ""rx"",
      ""param"" : ""(abc)(def)"",
      ""input"" : ""abcdef   abcdef"",
      ""ret"" : 1,
      ""re_groups"": [""abcdef"", ""abc"", ""def"", ""abcdef"", ""abc"", ""def""]
}
New tests cases will need to be added to https://github.com/SpiderLabs/secrules-language-tests, of course.","v3 was basically con

Hi! Yes, I have some test-cases as well. I might find more interesting test cases while working on RE2, which I'm currently doing, that's why I haven't sent them yet.
While we're at it, do you know why searchAll have such an awkward interface? I.e. flattened list of all groups of all matches (see second test case).

We are having a discussion on Slack about it 👍",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2007,2019-01-22T19:56:34Z,2019-01-30T12:30:56Z,2019-01-30T12:30:56Z,CLOSED,False,77,4,3,https://github.com/WGH-,Add support for capturing group test cases,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2007,https://github.com/WGH-,5,https://github.com/SpiderLabs/ModSecurity/pull/2007#issuecomment-458922159,"This enables unit tests to compare the matching groups as well, not just binary match-no match.
The format of JSON test case is extended, new ""re_groups"" parameter is added:
{
      ""type"" : ""op"",
      ""name"" : ""rx"",
      ""param"" : ""(abc)(def)"",
      ""input"" : ""abcdef"",
      ""ret"" : 1,
      ""re_groups"": [""abcdef"", ""abc"", ""def""]
},
{
      ""type"" : ""op"",
      ""name"" : ""rx"",
      ""param"" : ""(abc)(def)"",
      ""input"" : ""abcdef   abcdef"",
      ""ret"" : 1,
      ""re_groups"": [""abcdef"", ""abc"", ""def"", ""abcdef"", ""abc"", ""def""]
}
New tests cases will need to be added to https://github.com/SpiderLabs/secrules-language-tests, of course.","Once SpiderLabs/secrules-language-tests#4 is merged, I'll update this one to point to different submodule commit.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2007,2019-01-22T19:56:34Z,2019-01-30T12:30:56Z,2019-01-30T12:30:56Z,CLOSED,False,77,4,3,https://github.com/WGH-,Add support for capturing group test cases,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2007,https://github.com/WGH-,6,https://github.com/SpiderLabs/ModSecurity/pull/2007#issuecomment-458927031,"This enables unit tests to compare the matching groups as well, not just binary match-no match.
The format of JSON test case is extended, new ""re_groups"" parameter is added:
{
      ""type"" : ""op"",
      ""name"" : ""rx"",
      ""param"" : ""(abc)(def)"",
      ""input"" : ""abcdef"",
      ""ret"" : 1,
      ""re_groups"": [""abcdef"", ""abc"", ""def""]
},
{
      ""type"" : ""op"",
      ""name"" : ""rx"",
      ""param"" : ""(abc)(def)"",
      ""input"" : ""abcdef   abcdef"",
      ""ret"" : 1,
      ""re_groups"": [""abcdef"", ""abc"", ""def"", ""abcdef"", ""abc"", ""def""]
}
New tests cases will need to be added to https://github.com/SpiderLabs/secrules-language-tests, of course.","On second thought, it might be better to just merge this alongside wth re2 branch, once it's completed.",True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2011,2019-01-27T21:19:02Z,2019-01-28T19:30:05Z,2019-01-30T12:14:11Z,CLOSED,False,11,2,3,https://github.com/WGH-,Fix LMDB compilation,3,[],https://github.com/SpiderLabs/ModSecurity/pull/2011,https://github.com/WGH-,1,https://github.com/SpiderLabs/ModSecurity/pull/2011,"See #2008
When I re-enabled LMDB testing in Travis, I also discovered a regression test that fails when LMDB is enabled, and fixed it as well. The fix is ugly, but so is the LMDB backend code that stores data in hardcoded location relative to the current working dir ¯\_(ツ)_/¯.","See #2008
When I re-enabled LMDB testing in Travis, I also discovered a regression test that fails when LMDB is enabled, and fixed it as well. The fix is ugly, but so is the LMDB backend code that stores data in hardcoded location relative to the current working dir ¯\_(ツ)_/¯.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2011,2019-01-27T21:19:02Z,2019-01-28T19:30:05Z,2019-01-30T12:14:11Z,CLOSED,False,11,2,3,https://github.com/WGH-,Fix LMDB compilation,3,[],https://github.com/SpiderLabs/ModSecurity/pull/2011,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2011#issuecomment-458268576,"See #2008
When I re-enabled LMDB testing in Travis, I also discovered a regression test that fails when LMDB is enabled, and fixed it as well. The fix is ugly, but so is the LMDB backend code that stores data in hardcoded location relative to the current working dir ¯\_(ツ)_/¯.",Thank you for your contribution. We don't encourage users to use LMDB. It is there for advanced users.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2012,2019-01-30T14:29:23Z,,2020-11-19T18:55:37Z,OPEN,False,1163,242,47,https://github.com/WGH-,WIP: Add RE2 regexp engine support,12,"['enhancement', '3.x', 'new feature']",https://github.com/SpiderLabs/ModSecurity/pull/2012,https://github.com/WGH-,1,https://github.com/SpiderLabs/ModSecurity/pull/2012,"See #1996.
Every commit has detailed description.
I've implemented the fallback approach so far: if RE2 support is enabled, every regular expression is compiled with RE2, and if that fails, regular expression is compiled with libpcre instead. Please see #1996 for more detailed discussion why this approach is necessary.
There's also lots of refactoring of regexp related code.
Open questions:

 Perhaps, since RE2 support is considered experimental, configure script should not even attempt to build it unless explicit --with-re is supplied?
 There's no easy way to know which regular expression uses which engine. It might feel like  kind of implicit magic, which isn't really good.
 There's no error handling when regular expression is invalid. This isn't a regression introduced by this PR, but now might be the time to do something about it.
 PR needs code review, obviously.
 Changelog entry
 Documentation
 Maybe something else I missed.","See #1996.
Every commit has detailed description.
I've implemented the fallback approach so far: if RE2 support is enabled, every regular expression is compiled with RE2, and if that fails, regular expression is compiled with libpcre instead. Please see #1996 for more detailed discussion why this approach is necessary.
There's also lots of refactoring of regexp related code.
Open questions:

 Perhaps, since RE2 support is considered experimental, configure script should not even attempt to build it unless explicit --with-re is supplied?
 There's no easy way to know which regular expression uses which engine. It might feel like  kind of implicit magic, which isn't really good.
 There's no error handling when regular expression is invalid. This isn't a regression introduced by this PR, but now might be the time to do something about it.
 PR needs code review, obviously.
 Changelog entry
 Documentation
 Maybe something else I missed.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2012,2019-01-30T14:29:23Z,,2020-11-19T18:55:37Z,OPEN,False,1163,242,47,https://github.com/WGH-,WIP: Add RE2 regexp engine support,12,"['enhancement', '3.x', 'new feature']",https://github.com/SpiderLabs/ModSecurity/pull/2012,https://github.com/WGH-,2,https://github.com/SpiderLabs/ModSecurity/pull/2012#issuecomment-460651288,"See #1996.
Every commit has detailed description.
I've implemented the fallback approach so far: if RE2 support is enabled, every regular expression is compiled with RE2, and if that fails, regular expression is compiled with libpcre instead. Please see #1996 for more detailed discussion why this approach is necessary.
There's also lots of refactoring of regexp related code.
Open questions:

 Perhaps, since RE2 support is considered experimental, configure script should not even attempt to build it unless explicit --with-re is supplied?
 There's no easy way to know which regular expression uses which engine. It might feel like  kind of implicit magic, which isn't really good.
 There's no error handling when regular expression is invalid. This isn't a regression introduced by this PR, but now might be the time to do something about it.
 PR needs code review, obviously.
 Changelog entry
 Documentation
 Maybe something else I missed.","I've just force-pushed updated PR.

New commit with fixed error handling for the rx operator.
get_pattern was renamed to getPattern to adhere to naming convention used elsewhere in ModSecurity.
verifyCC conversion to the new classes, which was done very sloppily earlier, has been re-done properly.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2012,2019-01-30T14:29:23Z,,2020-11-19T18:55:37Z,OPEN,False,1163,242,47,https://github.com/WGH-,WIP: Add RE2 regexp engine support,12,"['enhancement', '3.x', 'new feature']",https://github.com/SpiderLabs/ModSecurity/pull/2012,https://github.com/WGH-,3,https://github.com/SpiderLabs/ModSecurity/pull/2012#issuecomment-461150879,"See #1996.
Every commit has detailed description.
I've implemented the fallback approach so far: if RE2 support is enabled, every regular expression is compiled with RE2, and if that fails, regular expression is compiled with libpcre instead. Please see #1996 for more detailed discussion why this approach is necessary.
There's also lots of refactoring of regexp related code.
Open questions:

 Perhaps, since RE2 support is considered experimental, configure script should not even attempt to build it unless explicit --with-re is supplied?
 There's no easy way to know which regular expression uses which engine. It might feel like  kind of implicit magic, which isn't really good.
 There's no error handling when regular expression is invalid. This isn't a regression introduced by this PR, but now might be the time to do something about it.
 PR needs code review, obviously.
 Changelog entry
 Documentation
 Maybe something else I missed.","Since my changes have been essentially merged into v3/dev/re2, I updated the PR to target v3/master branch now.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2012,2019-01-30T14:29:23Z,,2020-11-19T18:55:37Z,OPEN,False,1163,242,47,https://github.com/WGH-,WIP: Add RE2 regexp engine support,12,"['enhancement', '3.x', 'new feature']",https://github.com/SpiderLabs/ModSecurity/pull/2012,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/2012#issuecomment-461161057,"See #1996.
Every commit has detailed description.
I've implemented the fallback approach so far: if RE2 support is enabled, every regular expression is compiled with RE2, and if that fails, regular expression is compiled with libpcre instead. Please see #1996 for more detailed discussion why this approach is necessary.
There's also lots of refactoring of regexp related code.
Open questions:

 Perhaps, since RE2 support is considered experimental, configure script should not even attempt to build it unless explicit --with-re is supplied?
 There's no easy way to know which regular expression uses which engine. It might feel like  kind of implicit magic, which isn't really good.
 There's no error handling when regular expression is invalid. This isn't a regression introduced by this PR, but now might be the time to do something about it.
 PR needs code review, obviously.
 Changelog entry
 Documentation
 Maybe something else I missed.","Overall, the performance for the libpcre users was not impacted by this pull request:

The chart was generated using the code merged into v3/dev/re2.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2012,2019-01-30T14:29:23Z,,2020-11-19T18:55:37Z,OPEN,False,1163,242,47,https://github.com/WGH-,WIP: Add RE2 regexp engine support,12,"['enhancement', '3.x', 'new feature']",https://github.com/SpiderLabs/ModSecurity/pull/2012,https://github.com/WGH-,5,https://github.com/SpiderLabs/ModSecurity/pull/2012#issuecomment-551554662,"See #1996.
Every commit has detailed description.
I've implemented the fallback approach so far: if RE2 support is enabled, every regular expression is compiled with RE2, and if that fails, regular expression is compiled with libpcre instead. Please see #1996 for more detailed discussion why this approach is necessary.
There's also lots of refactoring of regexp related code.
Open questions:

 Perhaps, since RE2 support is considered experimental, configure script should not even attempt to build it unless explicit --with-re is supplied?
 There's no easy way to know which regular expression uses which engine. It might feel like  kind of implicit magic, which isn't really good.
 There's no error handling when regular expression is invalid. This isn't a regression introduced by this PR, but now might be the time to do something about it.
 PR needs code review, obviously.
 Changelog entry
 Documentation
 Maybe something else I missed.",Ping.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2012,2019-01-30T14:29:23Z,,2020-11-19T18:55:37Z,OPEN,False,1163,242,47,https://github.com/WGH-,WIP: Add RE2 regexp engine support,12,"['enhancement', '3.x', 'new feature']",https://github.com/SpiderLabs/ModSecurity/pull/2012,https://github.com/WGH-,6,https://github.com/SpiderLabs/ModSecurity/pull/2012#issuecomment-574382717,"See #1996.
Every commit has detailed description.
I've implemented the fallback approach so far: if RE2 support is enabled, every regular expression is compiled with RE2, and if that fails, regular expression is compiled with libpcre instead. Please see #1996 for more detailed discussion why this approach is necessary.
There's also lots of refactoring of regexp related code.
Open questions:

 Perhaps, since RE2 support is considered experimental, configure script should not even attempt to build it unless explicit --with-re is supplied?
 There's no easy way to know which regular expression uses which engine. It might feel like  kind of implicit magic, which isn't really good.
 There's no error handling when regular expression is invalid. This isn't a regression introduced by this PR, but now might be the time to do something about it.
 PR needs code review, obviously.
 Changelog entry
 Documentation
 Maybe something else I missed.","Just in case, even though it's marked WIP, it's more than ready for the first round of review.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2012,2019-01-30T14:29:23Z,,2020-11-19T18:55:37Z,OPEN,False,1163,242,47,https://github.com/WGH-,WIP: Add RE2 regexp engine support,12,"['enhancement', '3.x', 'new feature']",https://github.com/SpiderLabs/ModSecurity/pull/2012,https://github.com/WGH-,7,https://github.com/SpiderLabs/ModSecurity/pull/2012#issuecomment-687622226,"See #1996.
Every commit has detailed description.
I've implemented the fallback approach so far: if RE2 support is enabled, every regular expression is compiled with RE2, and if that fails, regular expression is compiled with libpcre instead. Please see #1996 for more detailed discussion why this approach is necessary.
There's also lots of refactoring of regexp related code.
Open questions:

 Perhaps, since RE2 support is considered experimental, configure script should not even attempt to build it unless explicit --with-re is supplied?
 There's no easy way to know which regular expression uses which engine. It might feel like  kind of implicit magic, which isn't really good.
 There's no error handling when regular expression is invalid. This isn't a regression introduced by this PR, but now might be the time to do something about it.
 PR needs code review, obviously.
 Changelog entry
 Documentation
 Maybe something else I missed.",Rebased on top of the current master.,True,"{'THUMBS_UP': ['https://github.com/zimmerle'], 'HEART': ['https://github.com/zimmerle']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2012,2019-01-30T14:29:23Z,,2020-11-19T18:55:37Z,OPEN,False,1163,242,47,https://github.com/WGH-,WIP: Add RE2 regexp engine support,12,"['enhancement', '3.x', 'new feature']",https://github.com/SpiderLabs/ModSecurity/pull/2012,https://github.com/eddie4,8,https://github.com/SpiderLabs/ModSecurity/pull/2012#issuecomment-700042120,"See #1996.
Every commit has detailed description.
I've implemented the fallback approach so far: if RE2 support is enabled, every regular expression is compiled with RE2, and if that fails, regular expression is compiled with libpcre instead. Please see #1996 for more detailed discussion why this approach is necessary.
There's also lots of refactoring of regexp related code.
Open questions:

 Perhaps, since RE2 support is considered experimental, configure script should not even attempt to build it unless explicit --with-re is supplied?
 There's no easy way to know which regular expression uses which engine. It might feel like  kind of implicit magic, which isn't really good.
 There's no error handling when regular expression is invalid. This isn't a regression introduced by this PR, but now might be the time to do something about it.
 PR needs code review, obviously.
 Changelog entry
 Documentation
 Maybe something else I missed.",Very interesting commit. We recently ran into performance issues with modsecurity. Any news on how much improvement we might see?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2012,2019-01-30T14:29:23Z,,2020-11-19T18:55:37Z,OPEN,False,1163,242,47,https://github.com/WGH-,WIP: Add RE2 regexp engine support,12,"['enhancement', '3.x', 'new feature']",https://github.com/SpiderLabs/ModSecurity/pull/2012,https://github.com/zimmerle,9,https://github.com/SpiderLabs/ModSecurity/pull/2012#issuecomment-700056127,"See #1996.
Every commit has detailed description.
I've implemented the fallback approach so far: if RE2 support is enabled, every regular expression is compiled with RE2, and if that fails, regular expression is compiled with libpcre instead. Please see #1996 for more detailed discussion why this approach is necessary.
There's also lots of refactoring of regexp related code.
Open questions:

 Perhaps, since RE2 support is considered experimental, configure script should not even attempt to build it unless explicit --with-re is supplied?
 There's no easy way to know which regular expression uses which engine. It might feel like  kind of implicit magic, which isn't really good.
 There's no error handling when regular expression is invalid. This isn't a regression introduced by this PR, but now might be the time to do something about it.
 PR needs code review, obviously.
 Changelog entry
 Documentation
 Maybe something else I missed.","Very interesting commit. We recently ran into performance issues with modsecurity. Any news on how much improvement we might see?

Hi @eddie4,
That is not the single front that we have on the performance side. Check the branch v3/dev/3.1-experimental. We have had great progress there. This is still on the Queue, to be merged once other pieces of v3.1 are complete.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2012,2019-01-30T14:29:23Z,,2020-11-19T18:55:37Z,OPEN,False,1163,242,47,https://github.com/WGH-,WIP: Add RE2 regexp engine support,12,"['enhancement', '3.x', 'new feature']",https://github.com/SpiderLabs/ModSecurity/pull/2012,https://github.com/WGH-,10,https://github.com/SpiderLabs/ModSecurity/pull/2012#issuecomment-700059121,"See #1996.
Every commit has detailed description.
I've implemented the fallback approach so far: if RE2 support is enabled, every regular expression is compiled with RE2, and if that fails, regular expression is compiled with libpcre instead. Please see #1996 for more detailed discussion why this approach is necessary.
There's also lots of refactoring of regexp related code.
Open questions:

 Perhaps, since RE2 support is considered experimental, configure script should not even attempt to build it unless explicit --with-re is supplied?
 There's no easy way to know which regular expression uses which engine. It might feel like  kind of implicit magic, which isn't really good.
 There's no error handling when regular expression is invalid. This isn't a regression introduced by this PR, but now might be the time to do something about it.
 PR needs code review, obviously.
 Changelog entry
 Documentation
 Maybe something else I missed.","Very interesting commit. We recently ran into performance issues with modsecurity. Any news on how much improvement we might see?

@eddie4 in my experience, it doesn't really make it much faster in average, however, it eliminates ReDoS worst cases.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2012,2019-01-30T14:29:23Z,,2020-11-19T18:55:37Z,OPEN,False,1163,242,47,https://github.com/WGH-,WIP: Add RE2 regexp engine support,12,"['enhancement', '3.x', 'new feature']",https://github.com/SpiderLabs/ModSecurity/pull/2012,https://github.com/WGH-,11,https://github.com/SpiderLabs/ModSecurity/pull/2012#issuecomment-718976498,"See #1996.
Every commit has detailed description.
I've implemented the fallback approach so far: if RE2 support is enabled, every regular expression is compiled with RE2, and if that fails, regular expression is compiled with libpcre instead. Please see #1996 for more detailed discussion why this approach is necessary.
There's also lots of refactoring of regexp related code.
Open questions:

 Perhaps, since RE2 support is considered experimental, configure script should not even attempt to build it unless explicit --with-re is supplied?
 There's no easy way to know which regular expression uses which engine. It might feel like  kind of implicit magic, which isn't really good.
 There's no error handling when regular expression is invalid. This isn't a regression introduced by this PR, but now might be the time to do something about it.
 PR needs code review, obviously.
 Changelog entry
 Documentation
 Maybe something else I missed.",@zimmerle please ping me when it's time to rebase this on top v3/dev/3.1-experimental.,True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2012,2019-01-30T14:29:23Z,,2020-11-19T18:55:37Z,OPEN,False,1163,242,47,https://github.com/WGH-,WIP: Add RE2 regexp engine support,12,"['enhancement', '3.x', 'new feature']",https://github.com/SpiderLabs/ModSecurity/pull/2012,https://github.com/zimmerle,12,https://github.com/SpiderLabs/ModSecurity/pull/2012#issuecomment-719066606,"See #1996.
Every commit has detailed description.
I've implemented the fallback approach so far: if RE2 support is enabled, every regular expression is compiled with RE2, and if that fails, regular expression is compiled with libpcre instead. Please see #1996 for more detailed discussion why this approach is necessary.
There's also lots of refactoring of regexp related code.
Open questions:

 Perhaps, since RE2 support is considered experimental, configure script should not even attempt to build it unless explicit --with-re is supplied?
 There's no easy way to know which regular expression uses which engine. It might feel like  kind of implicit magic, which isn't really good.
 There's no error handling when regular expression is invalid. This isn't a regression introduced by this PR, but now might be the time to do something about it.
 PR needs code review, obviously.
 Changelog entry
 Documentation
 Maybe something else I missed.","@zimmerle please ping me when it's time to rebase this on top v3/dev/3.1-experimental.

That is definitively something that I want to see happening. Lets have 3.1-experimental stable first. Working on the new issues that you have reported on #2376",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2014,2019-01-31T03:21:12Z,2019-11-20T18:54:15Z,2019-11-20T18:54:15Z,CLOSED,False,44,157,2,https://github.com/chuckwolber,"Replace xml2-config, pcre-config with pkg-config.",1,"['enhancement', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/2014,https://github.com/chuckwolber,1,https://github.com/SpiderLabs/ModSecurity/pull/2014,"Yocto deprecates xml2-config and pcre-config for pkg-config. As pkg-config is
commonly found (and is used in other parts of the modsecurity v3), this change
should be compatible with existing build environments.
This addresses issue #2013 .","Yocto deprecates xml2-config and pcre-config for pkg-config. As pkg-config is
commonly found (and is used in other parts of the modsecurity v3), this change
should be compatible with existing build environments.
This addresses issue #2013 .",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2014,2019-01-31T03:21:12Z,2019-11-20T18:54:15Z,2019-11-20T18:54:15Z,CLOSED,False,44,157,2,https://github.com/chuckwolber,"Replace xml2-config, pcre-config with pkg-config.",1,"['enhancement', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/2014,https://github.com/chuckwolber,2,https://github.com/SpiderLabs/ModSecurity/pull/2014#issuecomment-459409362,"Yocto deprecates xml2-config and pcre-config for pkg-config. As pkg-config is
commonly found (and is used in other parts of the modsecurity v3), this change
should be compatible with existing build environments.
This addresses issue #2013 .","Looks like there are some test failures. make check seems to go through the motions in my own environment, but does not appear to run any actual tests:
============================================================================
Testsuite summary for modsecurity 3.0
============================================================================
# TOTAL: 0
# PASS:  0
# SKIP:  0
# XFAIL: 0
# FAIL:  0
# XPASS: 0
# ERROR: 0
============================================================================

I suspect I am missing a few environment tools, but I have not dug too deeply into the details. In any case, I am happy to update the patch if I can get some guidance on why the tests are failing. I also do not spend much time working with autotools, so it is definitely possible that I missed something obvious.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2014,2019-01-31T03:21:12Z,2019-11-20T18:54:15Z,2019-11-20T18:54:15Z,CLOSED,False,44,157,2,https://github.com/chuckwolber,"Replace xml2-config, pcre-config with pkg-config.",1,"['enhancement', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/2014,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/2014#issuecomment-462731336,"Yocto deprecates xml2-config and pcre-config for pkg-config. As pkg-config is
commonly found (and is used in other parts of the modsecurity v3), this change
should be compatible with existing build environments.
This addresses issue #2013 .","Hi @chuckwolber,
There is this flag that is manually added called: ""-DWITH_LIBXML2"". This flag tells ModSecurity to use the libxml during the compilation. It seems like you are missing this flag in your patch.
About your tests not being executed, it is likely that you are missing the yajl during your compilation/configuration. Without JSON ModSecurity is not able to run any test.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2014,2019-01-31T03:21:12Z,2019-11-20T18:54:15Z,2019-11-20T18:54:15Z,CLOSED,False,44,157,2,https://github.com/chuckwolber,"Replace xml2-config, pcre-config with pkg-config.",1,"['enhancement', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/2014,https://github.com/chuckwolber,4,https://github.com/SpiderLabs/ModSecurity/pull/2014#issuecomment-472245468,"Yocto deprecates xml2-config and pcre-config for pkg-config. As pkg-config is
commonly found (and is used in other parts of the modsecurity v3), this change
should be compatible with existing build environments.
This addresses issue #2013 .","Updated patch to include ""-DWITH_LIBXML2"" and it is still failing several test cases. Any guidance you have would be appreciated.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2014,2019-01-31T03:21:12Z,2019-11-20T18:54:15Z,2019-11-20T18:54:15Z,CLOSED,False,44,157,2,https://github.com/chuckwolber,"Replace xml2-config, pcre-config with pkg-config.",1,"['enhancement', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/2014,https://github.com/zimmerle,5,https://github.com/SpiderLabs/ModSecurity/pull/2014#issuecomment-509753240,"Yocto deprecates xml2-config and pcre-config for pkg-config. As pkg-config is
commonly found (and is used in other parts of the modsecurity v3), this change
should be compatible with existing build environments.
This addresses issue #2013 .","Hi @chuckwolber,
It seems that -D WITH_LIBXML2 was put in the wrong place. Look at here. Also, all the test that was failing is due to the absence of XML. By fixing that XML, is likely to have all test passing.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2014,2019-01-31T03:21:12Z,2019-11-20T18:54:15Z,2019-11-20T18:54:15Z,CLOSED,False,44,157,2,https://github.com/chuckwolber,"Replace xml2-config, pcre-config with pkg-config.",1,"['enhancement', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/2014,https://github.com/zimmerle,6,https://github.com/SpiderLabs/ModSecurity/pull/2014#issuecomment-556242783,"Yocto deprecates xml2-config and pcre-config for pkg-config. As pkg-config is
commonly found (and is used in other parts of the modsecurity v3), this change
should be compatible with existing build environments.
This addresses issue #2013 .",I am closing this as the review comments are still open for a while now. Feel free to re-open whenever it is possible to work on it again.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2015,2019-02-01T22:44:57Z,2019-02-01T23:03:20Z,2019-02-01T23:06:00Z,CLOSED,False,68,3,2,https://github.com/airween,V3/multipartfix,3,[],https://github.com/SpiderLabs/ModSecurity/pull/2015,https://github.com/airween,1,https://github.com/SpiderLabs/ModSecurity/pull/2015,"the FILES_NAMES collection was empty after the end of multipart parsing, fixed it
added regression test case","the FILES_NAMES collection was empty after the end of multipart parsing, fixed it
added regression test case",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2016,2019-02-01T23:13:17Z,2019-02-12T12:17:16Z,2019-02-12T12:17:16Z,CLOSED,False,71,6,4,https://github.com/airween,Fixed data collecting in multipart parsing,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2016,https://github.com/airween,1,https://github.com/SpiderLabs/ModSecurity/pull/2016,"the FILES_NAMES collection was empty after the end of multipart parsing, fixed it
added regression test case","the FILES_NAMES collection was empty after the end of multipart parsing, fixed it
added regression test case",True,{'HOORAY': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2016,2019-02-01T23:13:17Z,2019-02-12T12:17:16Z,2019-02-12T12:17:16Z,CLOSED,False,71,6,4,https://github.com/airween,Fixed data collecting in multipart parsing,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2016,https://github.com/airween,2,https://github.com/SpiderLabs/ModSecurity/pull/2016#issuecomment-459974184,"the FILES_NAMES collection was empty after the end of multipart parsing, fixed it
added regression test case","Looks like the existing test cases were wrong, checked same variable values. The second commit (7c6c610) fixes them, now all build completed.",True,{'THUMBS_UP': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2016,2019-02-01T23:13:17Z,2019-02-12T12:17:16Z,2019-02-12T12:17:16Z,CLOSED,False,71,6,4,https://github.com/airween,Fixed data collecting in multipart parsing,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2016,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/2016#issuecomment-462737798,"the FILES_NAMES collection was empty after the end of multipart parsing, fixed it
added regression test case",Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2017,2019-02-03T13:36:45Z,2019-02-12T12:14:54Z,2019-03-11T21:23:29Z,CLOSED,False,44,1,2,https://github.com/airween,Fixed validateByteRange parsing method,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2017,https://github.com/airween,1,https://github.com/SpiderLabs/ModSecurity/pull/2017,"There is a bug in @validateByRange operator parsing: if the argument is something like this: ""32,34,38,42-59,61,65-90,95,97-122"" (see https://github.com/SpiderLabs/owasp-modsecurity-crs/blob/ab24a20faf28156f0495b0c07f2ff37860a3defe/rules/REQUEST-920-PROTOCOL-ENFORCEMENT.conf#L1476-L1493 rule), then the 3rd block will evaluated as ""38,42-59"", not ""38"" and ""42-59"".
Also the test file for regression test had been added.","There is a bug in @validateByRange operator parsing: if the argument is something like this: ""32,34,38,42-59,61,65-90,95,97-122"" (see https://github.com/SpiderLabs/owasp-modsecurity-crs/blob/ab24a20faf28156f0495b0c07f2ff37860a3defe/rules/REQUEST-920-PROTOCOL-ENFORCEMENT.conf#L1476-L1493 rule), then the 3rd block will evaluated as ""38,42-59"", not ""38"" and ""42-59"".
Also the test file for regression test had been added.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2017,2019-02-03T13:36:45Z,2019-02-12T12:14:54Z,2019-03-11T21:23:29Z,CLOSED,False,44,1,2,https://github.com/airween,Fixed validateByteRange parsing method,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2017,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2017#issuecomment-462737161,"There is a bug in @validateByRange operator parsing: if the argument is something like this: ""32,34,38,42-59,61,65-90,95,97-122"" (see https://github.com/SpiderLabs/owasp-modsecurity-crs/blob/ab24a20faf28156f0495b0c07f2ff37860a3defe/rules/REQUEST-920-PROTOCOL-ENFORCEMENT.conf#L1476-L1493 rule), then the 3rd block will evaluated as ""38,42-59"", not ""38"" and ""42-59"".
Also the test file for regression test had been added.",Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2018,2019-02-05T23:04:20Z,2019-06-01T10:25:52Z,2019-06-01T10:36:00Z,CLOSED,False,100,7,5,https://github.com/airween,V3/collection re fix,5,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2018,https://github.com/airween,1,https://github.com/SpiderLabs/ModSecurity/pull/2018,"Looks like the Regex::searchAll() method is not case insensitive (InMemoryPerProcess::resolveSingleMatch() needs that). This bug detected with help of CRS regression test 920450.
Also fix (temporary) the 'ovector' limit bug, which triggered when the regex contains too much brackets, eg. in CRS rule 942130.","Looks like the Regex::searchAll() method is not case insensitive (InMemoryPerProcess::resolveSingleMatch() needs that). This bug detected with help of CRS regression test 920450.
Also fix (temporary) the 'ovector' limit bug, which triggered when the regex contains too much brackets, eg. in CRS rule 942130.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2018,2019-02-05T23:04:20Z,2019-06-01T10:25:52Z,2019-06-01T10:36:00Z,CLOSED,False,100,7,5,https://github.com/airween,V3/collection re fix,5,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2018,https://github.com/airween,2,https://github.com/SpiderLabs/ModSecurity/pull/2018#issuecomment-462390210,"Looks like the Regex::searchAll() method is not case insensitive (InMemoryPerProcess::resolveSingleMatch() needs that). This bug detected with help of CRS regression test 920450.
Also fix (temporary) the 'ovector' limit bug, which triggered when the regex contains too much brackets, eg. in CRS rule 942130.","Could somebody re-run the CI build? Looks like it was failed (by Travis):
InstalledDir: /Applications/Xcode-9.4.1.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin
before_script.1
0.06s$ echo $TRAVIS_OS_NAME
osx
$ [ ""$TRAVIS_OS_NAME"" != osx ] || brew update
==> Downloading https://homebrew.bintray.com/bottles-portable-ruby/portable-ruby-2.3.7.mavericks.bottle.tar.gz
######################################################################## 100.0%
==> Pouring portable-ruby-2.3.7.mavericks.bottle.tar.gz
==> Homebrew is run entirely by unpaid volunteers. Please consider donating:
  https://github.com/Homebrew/brew#donations


No output has been received in the last 10m0s

Thanks :)",True,{'THUMBS_UP': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2018,2019-02-05T23:04:20Z,2019-06-01T10:25:52Z,2019-06-01T10:36:00Z,CLOSED,False,100,7,5,https://github.com/airween,V3/collection re fix,5,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2018,https://github.com/victorhora,3,https://github.com/SpiderLabs/ModSecurity/pull/2018#issuecomment-462453860,"Looks like the Regex::searchAll() method is not case insensitive (InMemoryPerProcess::resolveSingleMatch() needs that). This bug detected with help of CRS regression test 920450.
Also fix (temporary) the 'ovector' limit bug, which triggered when the regex contains too much brackets, eg. in CRS rule 942130.","hey @airween, I've triggered a rebuild on the failed build. We should have the results in a moment.
Thanks for your contribution, me or @zimmerle will have a chance to review it soon :)",True,{'HOORAY': ['https://github.com/airween']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2018,2019-02-05T23:04:20Z,2019-06-01T10:25:52Z,2019-06-01T10:36:00Z,CLOSED,False,100,7,5,https://github.com/airween,V3/collection re fix,5,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2018,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/2018#issuecomment-462754678,"Looks like the Regex::searchAll() method is not case insensitive (InMemoryPerProcess::resolveSingleMatch() needs that). This bug detected with help of CRS regression test 920450.
Also fix (temporary) the 'ovector' limit bug, which triggered when the regex contains too much brackets, eg. in CRS rule 942130.","Merged ea937cf and 640daa4. I do have something that I want to discuss about 3334d2a and 4e1b99a.
The regular expression implementation is self-contained in the regex class. It means that this is the only class which effectively depends on libpcre*. Within this patch, the definition PCRE_CASELESS will be spread among other classes making them also dependent on pcre. As of now, it won't be a problem, but, as we aiming to support different regular expression backends, we better avoid this scenario. I would rather prefer to have a new signature to the method -- considering the PCRE_CASELESS flag only inside the regex class or even a modificator on the regular expression string.

VerifyCC it is an exception and considered to be a bug to be fixed.",True,{'EYES': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2018,2019-02-05T23:04:20Z,2019-06-01T10:25:52Z,2019-06-01T10:36:00Z,CLOSED,False,100,7,5,https://github.com/airween,V3/collection re fix,5,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2018,https://github.com/WGH-,5,https://github.com/SpiderLabs/ModSecurity/pull/2018#issuecomment-463580653,"Looks like the Regex::searchAll() method is not case insensitive (InMemoryPerProcess::resolveSingleMatch() needs that). This bug detected with help of CRS regression test 920450.
Also fix (temporary) the 'ovector' limit bug, which triggered when the regex contains too much brackets, eg. in CRS rule 942130.","You can make a regular expression case insensitive by prefixing it with (?i). It seems to be supported almost everywhere (I checked libpcre, Python re, RE2, Hyperscan).",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2018,2019-02-05T23:04:20Z,2019-06-01T10:25:52Z,2019-06-01T10:36:00Z,CLOSED,False,100,7,5,https://github.com/airween,V3/collection re fix,5,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2018,https://github.com/airween,6,https://github.com/SpiderLabs/ModSecurity/pull/2018#issuecomment-463586631,"Looks like the Regex::searchAll() method is not case insensitive (InMemoryPerProcess::resolveSingleMatch() needs that). This bug detected with help of CRS regression test 920450.
Also fix (temporary) the 'ovector' limit bug, which triggered when the regex contains too much brackets, eg. in CRS rule 942130.","Hi @WGH-, thanks, I know it - but the problem is not that.
The problem is, the comparing variables on collections (in-memory and LMDB) must be case insensitive.
This condition is not met.
See this PR, and the documentation.
BTW, the ModSec2 follows this way... so I think we have to align the ModSec3 too.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2018,2019-02-05T23:04:20Z,2019-06-01T10:25:52Z,2019-06-01T10:36:00Z,CLOSED,False,100,7,5,https://github.com/airween,V3/collection re fix,5,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2018,https://github.com/zimmerle,7,https://github.com/SpiderLabs/ModSecurity/pull/2018#issuecomment-471531638,"Looks like the Regex::searchAll() method is not case insensitive (InMemoryPerProcess::resolveSingleMatch() needs that). This bug detected with help of CRS regression test 920450.
Also fix (temporary) the 'ovector' limit bug, which triggered when the regex contains too much brackets, eg. in CRS rule 942130.","@airween as commented by @WGH- the regular expression could be handled this with the ignore case ""modificator"". In any case, your pull request is currently holding four commits:

8040904 - Removed pcre dependency from outside of regex class
3334d2a - Regex search in collection data case insensitive fix
4e1b99a - Fixed regex case insensitive search bug in LMDB
640daa4 - Added test cases

In 8040904 you have fixed a problem added in 3334d2a and  3334d2a. Do you mind to change 3334d2a and 3334d2a to actually incorporate 8040904 ?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2018,2019-02-05T23:04:20Z,2019-06-01T10:25:52Z,2019-06-01T10:36:00Z,CLOSED,False,100,7,5,https://github.com/airween,V3/collection re fix,5,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2018,https://github.com/airween,8,https://github.com/SpiderLabs/ModSecurity/pull/2018#issuecomment-471538691,"Looks like the Regex::searchAll() method is not case insensitive (InMemoryPerProcess::resolveSingleMatch() needs that). This bug detected with help of CRS regression test 920450.
Also fix (temporary) the 'ovector' limit bug, which triggered when the regex contains too much brackets, eg. in CRS rule 942130.","The 8040904 should ignore. Do I revoke it?
I know what @WGH- said and your idea, but the CRS contains regex's without modifications, and modsec2 works with it. I'ld like to follow that way, tha's why I sent this PR.
The other solution would be that all occurrences of necessary regex's need to add the modifier, and works of libmodsec3 should differ from ModSec2.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2018,2019-02-05T23:04:20Z,2019-06-01T10:25:52Z,2019-06-01T10:36:00Z,CLOSED,False,100,7,5,https://github.com/airween,V3/collection re fix,5,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2018,https://github.com/airween,9,https://github.com/SpiderLabs/ModSecurity/pull/2018#issuecomment-497933250,"Looks like the Regex::searchAll() method is not case insensitive (InMemoryPerProcess::resolveSingleMatch() needs that). This bug detected with help of CRS regression test 920450.
Also fix (temporary) the 'ovector' limit bug, which triggered when the regex contains too much brackets, eg. in CRS rule 942130.","Closed this PR, and re-opened a new one here: #2107",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2023,2019-02-11T16:17:43Z,2019-11-13T09:46:19Z,2019-11-13T09:46:19Z,CLOSED,False,78,11,3,https://github.com/airween,Aligned Cookie parsing method to ModSecurity2 style,6,"['enhancement', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2023,https://github.com/airween,1,https://github.com/SpiderLabs/ModSecurity/pull/2023,"May be it's not a bug, but the behavior is differ from ModSec v2. Here is an example, take a look to this header request:
Cookie: foo
This is invalid, because the RFC allows the Cookie as like this:
cookie-header = ""Cookie:"" OWS cookie-string OWS
cookie-string = cookie-pair *( "";"" SP cookie-pair )
...
cookie-pair       = cookie-name ""="" cookie-value
cookie-name       = token
cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )
...
cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E
                       ; US-ASCII characters excluding CTLs,
                       ; whitespace DQUOTE, comma, semicolon,
                       ; and backslash
token             = <token, defined in [RFC2616], Section 2.2>

But ModSec2 interprets this as there is a cookie with name ""foo"" with empty value.
This patch aligns the behavior of ModSec3.","May be it's not a bug, but the behavior is differ from ModSec v2. Here is an example, take a look to this header request:
Cookie: foo
This is invalid, because the RFC allows the Cookie as like this:
cookie-header = ""Cookie:"" OWS cookie-string OWS
cookie-string = cookie-pair *( "";"" SP cookie-pair )
...
cookie-pair       = cookie-name ""="" cookie-value
cookie-name       = token
cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )
...
cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E
                       ; US-ASCII characters excluding CTLs,
                       ; whitespace DQUOTE, comma, semicolon,
                       ; and backslash
token             = <token, defined in [RFC2616], Section 2.2>

But ModSec2 interprets this as there is a cookie with name ""foo"" with empty value.
This patch aligns the behavior of ModSec3.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2023,2019-02-11T16:17:43Z,2019-11-13T09:46:19Z,2019-11-13T09:46:19Z,CLOSED,False,78,11,3,https://github.com/airween,Aligned Cookie parsing method to ModSecurity2 style,6,"['enhancement', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2023,https://github.com/airween,2,https://github.com/SpiderLabs/ModSecurity/pull/2023#issuecomment-462461746,"May be it's not a bug, but the behavior is differ from ModSec v2. Here is an example, take a look to this header request:
Cookie: foo
This is invalid, because the RFC allows the Cookie as like this:
cookie-header = ""Cookie:"" OWS cookie-string OWS
cookie-string = cookie-pair *( "";"" SP cookie-pair )
...
cookie-pair       = cookie-name ""="" cookie-value
cookie-name       = token
cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )
...
cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E
                       ; US-ASCII characters excluding CTLs,
                       ; whitespace DQUOTE, comma, semicolon,
                       ; and backslash
token             = <token, defined in [RFC2616], Section 2.2>

But ModSec2 interprets this as there is a cookie with name ""foo"" with empty value.
This patch aligns the behavior of ModSec3.","Note, that this bug triggered by this CRS test.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2023,2019-02-11T16:17:43Z,2019-11-13T09:46:19Z,2019-11-13T09:46:19Z,CLOSED,False,78,11,3,https://github.com/airween,Aligned Cookie parsing method to ModSecurity2 style,6,"['enhancement', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2023,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/2023#issuecomment-471532407,"May be it's not a bug, but the behavior is differ from ModSec v2. Here is an example, take a look to this header request:
Cookie: foo
This is invalid, because the RFC allows the Cookie as like this:
cookie-header = ""Cookie:"" OWS cookie-string OWS
cookie-string = cookie-pair *( "";"" SP cookie-pair )
...
cookie-pair       = cookie-name ""="" cookie-value
cookie-name       = token
cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )
...
cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E
                       ; US-ASCII characters excluding CTLs,
                       ; whitespace DQUOTE, comma, semicolon,
                       ; and backslash
token             = <token, defined in [RFC2616], Section 2.2>

But ModSec2 interprets this as there is a cookie with name ""foo"" with empty value.
This patch aligns the behavior of ModSec3.","Hi @airween, I remember that we were discussing this issue over hangout a few days ago. Are the changes ready?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2023,2019-02-11T16:17:43Z,2019-11-13T09:46:19Z,2019-11-13T09:46:19Z,CLOSED,False,78,11,3,https://github.com/airween,Aligned Cookie parsing method to ModSecurity2 style,6,"['enhancement', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2023,https://github.com/airween,4,https://github.com/SpiderLabs/ModSecurity/pull/2023#issuecomment-497949226,"May be it's not a bug, but the behavior is differ from ModSec v2. Here is an example, take a look to this header request:
Cookie: foo
This is invalid, because the RFC allows the Cookie as like this:
cookie-header = ""Cookie:"" OWS cookie-string OWS
cookie-string = cookie-pair *( "";"" SP cookie-pair )
...
cookie-pair       = cookie-name ""="" cookie-value
cookie-name       = token
cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )
...
cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E
                       ; US-ASCII characters excluding CTLs,
                       ; whitespace DQUOTE, comma, semicolon,
                       ; and backslash
token             = <token, defined in [RFC2616], Section 2.2>

But ModSec2 interprets this as there is a cookie with name ""foo"" with empty value.
This patch aligns the behavior of ModSec3.","I've merged the newest version from upstream to this branch.
Could we continue the discussion about the patch? First, please review the snippet:
https://gist.github.com/airween/efb8a737193910b5ae893d93e0325902
The C++ code contains the old (current) and the new method of cookie parsing. You can pass the cookie string to the compiled binary as argument (see output.txt).
The first line is the output of current version, the second is the last product. The ^ markers showed, how catches the algorithm the cookie names and its values. You can see, if the cookie string is ""not well-formed"", the parsing is wrong with the current mechanism, for eg. the parsed cookie value is just a substring(!), eg. ange instead of orange, or a cookie has two values (or I don't know, how interprets  it), eg. bar=a and pple instead of bar=apple.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2024,2019-02-11T16:25:54Z,2019-02-12T12:33:24Z,2019-02-12T12:33:24Z,CLOSED,False,48,4,2,https://github.com/airween,Allow empty anchored variable to use,1,"['enhancement', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2024,https://github.com/airween,1,https://github.com/SpiderLabs/ModSecurity/pull/2024,"The problem is that when a SecRule contains an negated operator (eg. ""!@ENDSWITH .pdf""), and the variable is empty (eg. REQUEST_BASENAME, and the query is a simple ""GET /""), then the result of negated evaluate of empty variable will TRUE. Then the rule interpreted as the GET / IS endsWith .pdf, so it will generate a false positive match.
I don't see the reason why didn't allowed the empty variable previously, but this patch fix this bug above, and all other test result keep as PASSED.
See the rule-920200.json regression test file, which inspired the CRS id 920200 and its test.","The problem is that when a SecRule contains an negated operator (eg. ""!@ENDSWITH .pdf""), and the variable is empty (eg. REQUEST_BASENAME, and the query is a simple ""GET /""), then the result of negated evaluate of empty variable will TRUE. Then the rule interpreted as the GET / IS endsWith .pdf, so it will generate a false positive match.
I don't see the reason why didn't allowed the empty variable previously, but this patch fix this bug above, and all other test result keep as PASSED.
See the rule-920200.json regression test file, which inspired the CRS id 920200 and its test.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2024,2019-02-11T16:25:54Z,2019-02-12T12:33:24Z,2019-02-12T12:33:24Z,CLOSED,False,48,4,2,https://github.com/airween,Allow empty anchored variable to use,1,"['enhancement', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2024,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2024#issuecomment-462742272,"The problem is that when a SecRule contains an negated operator (eg. ""!@ENDSWITH .pdf""), and the variable is empty (eg. REQUEST_BASENAME, and the query is a simple ""GET /""), then the result of negated evaluate of empty variable will TRUE. Then the rule interpreted as the GET / IS endsWith .pdf, so it will generate a false positive match.
I don't see the reason why didn't allowed the empty variable previously, but this patch fix this bug above, and all other test result keep as PASSED.
See the rule-920200.json regression test file, which inspired the CRS id 920200 and its test.",Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2031,2019-02-22T20:09:06Z,2019-03-11T13:15:32Z,2019-03-11T13:15:32Z,CLOSED,False,127,2,3,https://github.com/airween,V3/issue 1960,3,"['bug', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2031,https://github.com/airween,1,https://github.com/SpiderLabs/ModSecurity/pull/2031,Fixed #1960.,Fixed #1960.,True,{'HOORAY': ['https://github.com/theMiddleBlue']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2031,2019-02-22T20:09:06Z,2019-03-11T13:15:32Z,2019-03-11T13:15:32Z,CLOSED,False,127,2,3,https://github.com/airween,V3/issue 1960,3,"['bug', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2031,https://github.com/airween,2,https://github.com/SpiderLabs/ModSecurity/pull/2031#issuecomment-466555782,Fixed #1960.,"Alternative solution to ignore the sent modification, and grab the intervention in each affected (disruptive) actions, eg:
    if (transaction->m_it.status == 200) {
        transaction->m_it.status = 403;
    }

replace this to
    if (transaction->getRuleEngineState() != RulesProperties::DetectionOnlyRuleEngine) {
        if (transaction->m_it.status == 200) {
            transaction->m_it.status = 403;
        }
    }

In this case, in the late phases the HTTP server response doesn't lost.
As I see, these actions are affected: deny, drop and may be the redirect.
Any idea?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2031,2019-02-22T20:09:06Z,2019-03-11T13:15:32Z,2019-03-11T13:15:32Z,CLOSED,False,127,2,3,https://github.com/airween,V3/issue 1960,3,"['bug', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2031,https://github.com/airween,3,https://github.com/SpiderLabs/ModSecurity/pull/2031#issuecomment-466632602,Fixed #1960.,"Argh... this error comes again and again...
https://travis-ci.org/SpiderLabs/ModSecurity/jobs/497221130#L98
Anyway, I think the patch works, wait @zimmerle's notices :)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2031,2019-02-22T20:09:06Z,2019-03-11T13:15:32Z,2019-03-11T13:15:32Z,CLOSED,False,127,2,3,https://github.com/airween,V3/issue 1960,3,"['bug', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2031,https://github.com/victorhora,4,https://github.com/SpiderLabs/ModSecurity/pull/2031#issuecomment-467080125,Fixed #1960.,"Hi @airween I've triggered a rebuild on Travis. Hopefully it will be good until we discuss how we should fix this one :)
In a related matter, I'm also curious why Travis is failing somewhat frequently. :/",True,{'THUMBS_UP': ['https://github.com/airween']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2031,2019-02-22T20:09:06Z,2019-03-11T13:15:32Z,2019-03-11T13:15:32Z,CLOSED,False,127,2,3,https://github.com/airween,V3/issue 1960,3,"['bug', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2031,https://github.com/zimmerle,5,https://github.com/SpiderLabs/ModSecurity/pull/2031#issuecomment-471533475,Fixed #1960.,"This subject was under discussion on our Slack channel. @airween have addressed some of the comments and opened a new issue: #2032.
I am closing this in favor of #2031.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2032,2019-02-26T08:30:42Z,2019-06-03T23:49:19Z,2019-06-03T23:49:19Z,CLOSED,False,234,2,3,https://github.com/airween,"Fixed bug described in issue-1960, another solution #1960",2,"['bug', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2032,https://github.com/airween,1,https://github.com/SpiderLabs/ModSecurity/pull/2032,"Fixed #1960.
Another solution.","Fixed #1960.
Another solution.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2032,2019-02-26T08:30:42Z,2019-06-03T23:49:19Z,2019-06-03T23:49:19Z,CLOSED,False,234,2,3,https://github.com/airween,"Fixed bug described in issue-1960, another solution #1960",2,"['bug', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2032,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2032#issuecomment-498466612,"Fixed #1960.
Another solution.",Closing this as stated on the original issue.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2045,2019-03-11T21:36:11Z,,2019-05-24T07:52:42Z,OPEN,False,6900,26,4,https://github.com/airween,V3/reqbodyproc,3,"['enhancement', '3.x', 'pr available', 'workaround available']",https://github.com/SpiderLabs/ModSecurity/pull/2045,https://github.com/airween,1,https://github.com/SpiderLabs/ModSecurity/pull/2045,"In the v2 reference, the REQUEST_BODY variable info contains:

Holds the raw request body. This variable is available only if the URLENCODED request body processor was used, which will occur by default when the application/x-www-form-urlencoded content type is detected, or if the use of the URLENCODED request body parser was forced.

Now the REQUEST_BODY in libmodsec3 always evaluated, no matter what is the content-type. Eg. the CT is application/xml, and the SecRule operator is @rx, then it checked with the regex pattern.
CRS regression tests showed that in case of XML, JSON and Multipart CT's don't allows the REQUEST_BODY variable. See the attached regression test json file.
Note, that this modification needs to disable the REQUEST_BODY check in the offset_variable.json, when the CT is Multipart.","In the v2 reference, the REQUEST_BODY variable info contains:

Holds the raw request body. This variable is available only if the URLENCODED request body processor was used, which will occur by default when the application/x-www-form-urlencoded content type is detected, or if the use of the URLENCODED request body parser was forced.

Now the REQUEST_BODY in libmodsec3 always evaluated, no matter what is the content-type. Eg. the CT is application/xml, and the SecRule operator is @rx, then it checked with the regex pattern.
CRS regression tests showed that in case of XML, JSON and Multipart CT's don't allows the REQUEST_BODY variable. See the attached regression test json file.
Note, that this modification needs to disable the REQUEST_BODY check in the offset_variable.json, when the CT is Multipart.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2046,2019-03-13T12:31:46Z,,2021-04-27T08:35:05Z,OPEN,False,26,13,2,https://github.com/arminabf,segfault with assigned user id on OpenShift,1,"['enhancement', 'Platform - Apache', '2.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2046,https://github.com/arminabf,1,https://github.com/SpiderLabs/ModSecurity/pull/2046,"When running httpd on OpenShift, by default the server instance will run with an assigned user ID not appearing in the UNIX password file.
There are several places in the code of mod_security where the user name is tried to retrieved by use of apr_uid_name_get(). As the function can not find a corresponding user name it returns with an error (and argument pointer being NULL). Due to missing error handling constant segmentation faults are faced on OpenShift.
As a fallback on OpenShift (and probably other container platforms), the user id should be used instead of the user name.","When running httpd on OpenShift, by default the server instance will run with an assigned user ID not appearing in the UNIX password file.
There are several places in the code of mod_security where the user name is tried to retrieved by use of apr_uid_name_get(). As the function can not find a corresponding user name it returns with an error (and argument pointer being NULL). Due to missing error handling constant segmentation faults are faced on OpenShift.
As a fallback on OpenShift (and probably other container platforms), the user id should be used instead of the user name.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2046,2019-03-13T12:31:46Z,,2021-04-27T08:35:05Z,OPEN,False,26,13,2,https://github.com/arminabf,segfault with assigned user id on OpenShift,1,"['enhancement', 'Platform - Apache', '2.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2046,https://github.com/marcstern,2,https://github.com/SpiderLabs/ModSecurity/pull/2046#issuecomment-827423677,"When running httpd on OpenShift, by default the server instance will run with an assigned user ID not appearing in the UNIX password file.
There are several places in the code of mod_security where the user name is tried to retrieved by use of apr_uid_name_get(). As the function can not find a corresponding user name it returns with an error (and argument pointer being NULL). Due to missing error handling constant segmentation faults are faced on OpenShift.
As a fallback on OpenShift (and probably other container platforms), the user id should be used instead of the user name.","Better to have a centralized function for this:
char* get_username(apr_pool_t* mp) {
 char* username;
 apr_uid_t uid;
 apr_gid_t gid;
 int rc = apr_uid_current(&uid, &gid, mp);
 if (rc != APR_SUCCESS) return ""apache"";
 rc = apr_uid_name_get(&username, uid, mp);
 if (rc != APR_SUCCESS) return ""apache"";
 return username;
}",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2048,2019-03-15T22:58:48Z,2019-10-16T13:12:45Z,2019-10-16T13:12:45Z,CLOSED,False,1,1,1,https://github.com/victorhora,Make sure m_rulesMessages is filled after successfull match,1,"['3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2048,https://github.com/victorhora,1,https://github.com/SpiderLabs/ModSecurity/pull/2048,"This fixes issue #2000.
The problem seems to be that the conditions to push ruleMessage below is not met when only deny action is used:

  
    
      ModSecurity/src/rule.cc
    
    
        Lines 815 to 822
      in
      6d5198b
    
  
  
    

        
          
           else if (m_containsStaticBlockAction && !m_containsMultiMatchAction) { 
        

        
          
               /* warn */ 
        

        
          
               trans->m_rulesMessages.push_back(*ruleMessage); 
        

        
          
               /* error */ 
        

        
          
               if (!ruleMessage->m_isDisruptive) { 
        

        
          
                   trans->serverLog(ruleMessage); 
        

        
          
               } 
        

        
          
           } 
        
    
  


Then when the for loop to append m_rulesMessages to the audit_log string stream is called, the content of this std::list seems to be empty:

  
    
      ModSecurity/src/transaction.cc
    
    
        Lines 1486 to 1489
      in
      6d5198b
    
  
  
    

        
          
           if (parts & audit_log::AuditLog::HAuditLogPart) { 
        

        
          
               audit_log << ""--"" << trailer << ""-"" << ""H--"" << std::endl; 
        

        
          
               for (auto a : m_rulesMessages) { 
        

        
          
                   audit_log << a.log(0, m_httpCodeReturned) << std::endl;","This fixes issue #2000.
The problem seems to be that the conditions to push ruleMessage below is not met when only deny action is used:

  
    
      ModSecurity/src/rule.cc
    
    
        Lines 815 to 822
      in
      6d5198b
    
  
  
    

        
          
           else if (m_containsStaticBlockAction && !m_containsMultiMatchAction) { 
        

        
          
               /* warn */ 
        

        
          
               trans->m_rulesMessages.push_back(*ruleMessage); 
        

        
          
               /* error */ 
        

        
          
               if (!ruleMessage->m_isDisruptive) { 
        

        
          
                   trans->serverLog(ruleMessage); 
        

        
          
               } 
        

        
          
           } 
        
    
  


Then when the for loop to append m_rulesMessages to the audit_log string stream is called, the content of this std::list seems to be empty:

  
    
      ModSecurity/src/transaction.cc
    
    
        Lines 1486 to 1489
      in
      6d5198b
    
  
  
    

        
          
           if (parts & audit_log::AuditLog::HAuditLogPart) { 
        

        
          
               audit_log << ""--"" << trailer << ""-"" << ""H--"" << std::endl; 
        

        
          
               for (auto a : m_rulesMessages) { 
        

        
          
                   audit_log << a.log(0, m_httpCodeReturned) << std::endl;",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2048,2019-03-15T22:58:48Z,2019-10-16T13:12:45Z,2019-10-16T13:12:45Z,CLOSED,False,1,1,1,https://github.com/victorhora,Make sure m_rulesMessages is filled after successfull match,1,"['3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2048,https://github.com/defanator,2,https://github.com/SpiderLabs/ModSecurity/pull/2048#issuecomment-475645666,"This fixes issue #2000.
The problem seems to be that the conditions to push ruleMessage below is not met when only deny action is used:

  
    
      ModSecurity/src/rule.cc
    
    
        Lines 815 to 822
      in
      6d5198b
    
  
  
    

        
          
           else if (m_containsStaticBlockAction && !m_containsMultiMatchAction) { 
        

        
          
               /* warn */ 
        

        
          
               trans->m_rulesMessages.push_back(*ruleMessage); 
        

        
          
               /* error */ 
        

        
          
               if (!ruleMessage->m_isDisruptive) { 
        

        
          
                   trans->serverLog(ruleMessage); 
        

        
          
               } 
        

        
          
           } 
        
    
  


Then when the for loop to append m_rulesMessages to the audit_log string stream is called, the content of this std::list seems to be empty:

  
    
      ModSecurity/src/transaction.cc
    
    
        Lines 1486 to 1489
      in
      6d5198b
    
  
  
    

        
          
           if (parts & audit_log::AuditLog::HAuditLogPart) { 
        

        
          
               audit_log << ""--"" << trailer << ""-"" << ""H--"" << std::endl; 
        

        
          
               for (auto a : m_rulesMessages) { 
        

        
          
                   audit_log << a.log(0, m_httpCodeReturned) << std::endl;",@victorhora I can confirm that this one fixes an issue reported in #2000.,True,{'THUMBS_UP': ['https://github.com/victorhora']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2048,2019-03-15T22:58:48Z,2019-10-16T13:12:45Z,2019-10-16T13:12:45Z,CLOSED,False,1,1,1,https://github.com/victorhora,Make sure m_rulesMessages is filled after successfull match,1,"['3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2048,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/2048#issuecomment-542693583,"This fixes issue #2000.
The problem seems to be that the conditions to push ruleMessage below is not met when only deny action is used:

  
    
      ModSecurity/src/rule.cc
    
    
        Lines 815 to 822
      in
      6d5198b
    
  
  
    

        
          
           else if (m_containsStaticBlockAction && !m_containsMultiMatchAction) { 
        

        
          
               /* warn */ 
        

        
          
               trans->m_rulesMessages.push_back(*ruleMessage); 
        

        
          
               /* error */ 
        

        
          
               if (!ruleMessage->m_isDisruptive) { 
        

        
          
                   trans->serverLog(ruleMessage); 
        

        
          
               } 
        

        
          
           } 
        
    
  


Then when the for loop to append m_rulesMessages to the audit_log string stream is called, the content of this std::list seems to be empty:

  
    
      ModSecurity/src/transaction.cc
    
    
        Lines 1486 to 1489
      in
      6d5198b
    
  
  
    

        
          
           if (parts & audit_log::AuditLog::HAuditLogPart) { 
        

        
          
               audit_log << ""--"" << trailer << ""-"" << ""H--"" << std::endl; 
        

        
          
               for (auto a : m_rulesMessages) { 
        

        
          
                   audit_log << a.log(0, m_httpCodeReturned) << std::endl;",merged at: d4dc3db,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2049,2019-03-19T20:53:33Z,2021-01-14T17:27:57Z,2021-01-14T17:27:57Z,CLOSED,False,33,33,1,https://github.com/lightsey,Issue 890 - ModSecurity corrupts the global pool's cleanups linked list with threaded MPMs.,2,"['Platform - Apache', '2.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2049,https://github.com/lightsey,1,https://github.com/SpiderLabs/ModSecurity/pull/2049,"I tested the first commit fixing the re_precomp rules ( msre_op_validateHash_execute and msre_op_rx_execute ) using the example configuration I provided in issue #890.
The second commit fixing the other usage of rule->ruleset->mp in functions that are run during HTTP requests hasn't gone through any real testing. Nothing stands out to me in the code as suggesting that these should be using storage pools that are shared between all the threads in the process, but I'm not that very familiar with ModSecurity's codebase and could be mistaken.","I tested the first commit fixing the re_precomp rules ( msre_op_validateHash_execute and msre_op_rx_execute ) using the example configuration I provided in issue #890.
The second commit fixing the other usage of rule->ruleset->mp in functions that are run during HTTP requests hasn't gone through any real testing. Nothing stands out to me in the code as suggesting that these should be using storage pools that are shared between all the threads in the process, but I'm not that very familiar with ModSecurity's codebase and could be mistaken.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2049,2019-03-19T20:53:33Z,2021-01-14T17:27:57Z,2021-01-14T17:27:57Z,CLOSED,False,33,33,1,https://github.com/lightsey,Issue 890 - ModSecurity corrupts the global pool's cleanups linked list with threaded MPMs.,2,"['Platform - Apache', '2.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2049,https://github.com/markblackman,2,https://github.com/SpiderLabs/ModSecurity/pull/2049#issuecomment-514553571,"I tested the first commit fixing the re_precomp rules ( msre_op_validateHash_execute and msre_op_rx_execute ) using the example configuration I provided in issue #890.
The second commit fixing the other usage of rule->ruleset->mp in functions that are run during HTTP requests hasn't gone through any real testing. Nothing stands out to me in the code as suggesting that these should be using storage pools that are shared between all the threads in the process, but I'm not that very familiar with ModSecurity's codebase and could be mistaken.",This is a perfect fit for CGI problem we are seeing in #2101  and we will test your PR,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2049,2019-03-19T20:53:33Z,2021-01-14T17:27:57Z,2021-01-14T17:27:57Z,CLOSED,False,33,33,1,https://github.com/lightsey,Issue 890 - ModSecurity corrupts the global pool's cleanups linked list with threaded MPMs.,2,"['Platform - Apache', '2.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2049,https://github.com/lightsey,3,https://github.com/SpiderLabs/ModSecurity/pull/2049#issuecomment-514706341,"I tested the first commit fixing the re_precomp rules ( msre_op_validateHash_execute and msre_op_rx_execute ) using the example configuration I provided in issue #890.
The second commit fixing the other usage of rule->ruleset->mp in functions that are run during HTTP requests hasn't gone through any real testing. Nothing stands out to me in the code as suggesting that these should be using storage pools that are shared between all the threads in the process, but I'm not that very familiar with ModSecurity's codebase and could be mistaken.","cPanel has shipped this patch to customers for several months now without any apparent problems.
https://github.com/CpanelInc/mod_security2",True,"{'THUMBS_UP': ['https://github.com/tomsommer', 'https://github.com/zimmerle']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2049,2019-03-19T20:53:33Z,2021-01-14T17:27:57Z,2021-01-14T17:27:57Z,CLOSED,False,33,33,1,https://github.com/lightsey,Issue 890 - ModSecurity corrupts the global pool's cleanups linked list with threaded MPMs.,2,"['Platform - Apache', '2.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2049,https://github.com/marcstern,4,https://github.com/SpiderLabs/ModSecurity/pull/2049#issuecomment-627992089,"I tested the first commit fixing the re_precomp rules ( msre_op_validateHash_execute and msre_op_rx_execute ) using the example configuration I provided in issue #890.
The second commit fixing the other usage of rule->ruleset->mp in functions that are run during HTTP requests hasn't gone through any real testing. Nothing stands out to me in the code as suggesting that these should be using storage pools that are shared between all the threads in the process, but I'm not that very familiar with ModSecurity's codebase and could be mistaken.","cPanel has shipped this patch to customers for several months now without any apparent problems.
https://github.com/CpanelInc/mod_security2

Apparently not. The file in the source doesn't have that patch (https://github.com/CpanelInc/mod_security2/blob/master/SOURCES/modsecurity-2.9.3.tar.gz)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2049,2019-03-19T20:53:33Z,2021-01-14T17:27:57Z,2021-01-14T17:27:57Z,CLOSED,False,33,33,1,https://github.com/lightsey,Issue 890 - ModSecurity corrupts the global pool's cleanups linked list with threaded MPMs.,2,"['Platform - Apache', '2.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2049,https://github.com/markblackman,5,https://github.com/SpiderLabs/ModSecurity/pull/2049#issuecomment-628020151,"I tested the first commit fixing the re_precomp rules ( msre_op_validateHash_execute and msre_op_rx_execute ) using the example configuration I provided in issue #890.
The second commit fixing the other usage of rule->ruleset->mp in functions that are run during HTTP requests hasn't gone through any real testing. Nothing stands out to me in the code as suggesting that these should be using storage pools that are shared between all the threads in the process, but I'm not that very familiar with ModSecurity's codebase and could be mistaken.","Although I updated #2101 at the time, last year, I will also point out here that this patch fixed our thread problem. Mod_security 2.x was not written with thread safety in mind and there was at least too much unsafe sharing of global pools between threads in an apache 2.4 event MPM.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2049,2019-03-19T20:53:33Z,2021-01-14T17:27:57Z,2021-01-14T17:27:57Z,CLOSED,False,33,33,1,https://github.com/lightsey,Issue 890 - ModSecurity corrupts the global pool's cleanups linked list with threaded MPMs.,2,"['Platform - Apache', '2.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2049,https://github.com/lightsey,6,https://github.com/SpiderLabs/ModSecurity/pull/2049#issuecomment-628020795,"I tested the first commit fixing the re_precomp rules ( msre_op_validateHash_execute and msre_op_rx_execute ) using the example configuration I provided in issue #890.
The second commit fixing the other usage of rule->ruleset->mp in functions that are run during HTTP requests hasn't gone through any real testing. Nothing stands out to me in the code as suggesting that these should be using storage pools that are shared between all the threads in the process, but I'm not that very familiar with ModSecurity's codebase and could be mistaken.","cPanel has shipped this patch to customers for several months now without any apparent problems.
https://github.com/CpanelInc/mod_security2

Apparently not. The file in the source doesn't have that patch (https://github.com/CpanelInc/mod_security2/blob/master/SOURCES/modsecurity-2.9.3.tar.gz)

The patch is applied while building the RPM. The tar.gz file in this repo should be a pristine copy of the original modsecurity tarball.
https://github.com/CpanelInc/mod_security2/blob/master/SOURCES/0003-Store-temporaries-in-the-request-pool-for-regexes-co.patch
https://github.com/CpanelInc/mod_security2/blob/ecbb7b9802f628a89610b2dcce23961161c2fc31/SPECS/ea-apache24-mod_security2.spec#L56",True,"{'THUMBS_UP': ['https://github.com/ChrisOrlando', 'https://github.com/marcstern']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2049,2019-03-19T20:53:33Z,2021-01-14T17:27:57Z,2021-01-14T17:27:57Z,CLOSED,False,33,33,1,https://github.com/lightsey,Issue 890 - ModSecurity corrupts the global pool's cleanups linked list with threaded MPMs.,2,"['Platform - Apache', '2.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2049,https://github.com/marcstern,7,https://github.com/SpiderLabs/ModSecurity/pull/2049#issuecomment-628426091,"I tested the first commit fixing the re_precomp rules ( msre_op_validateHash_execute and msre_op_rx_execute ) using the example configuration I provided in issue #890.
The second commit fixing the other usage of rule->ruleset->mp in functions that are run during HTTP requests hasn't gone through any real testing. Nothing stands out to me in the code as suggesting that these should be using storage pools that are shared between all the threads in the process, but I'm not that very familiar with ModSecurity's codebase and could be mistaken.","Indeed.
So, running for 11 months in prod on CPanel should be considered as robust, no?",True,"{'CONFUSED': ['https://github.com/zimmerle'], 'THUMBS_UP': ['https://github.com/fzipi']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2049,2019-03-19T20:53:33Z,2021-01-14T17:27:57Z,2021-01-14T17:27:57Z,CLOSED,False,33,33,1,https://github.com/lightsey,Issue 890 - ModSecurity corrupts the global pool's cleanups linked list with threaded MPMs.,2,"['Platform - Apache', '2.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2049,https://github.com/marcstern,8,https://github.com/SpiderLabs/ModSecurity/pull/2049#issuecomment-726725987,"I tested the first commit fixing the re_precomp rules ( msre_op_validateHash_execute and msre_op_rx_execute ) using the example configuration I provided in issue #890.
The second commit fixing the other usage of rule->ruleset->mp in functions that are run during HTTP requests hasn't gone through any real testing. Nothing stands out to me in the code as suggesting that these should be using storage pools that are shared between all the threads in the process, but I'm not that very familiar with ModSecurity's codebase and could be mistaken.",Any chance to have this merged? Thanks,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2049,2019-03-19T20:53:33Z,2021-01-14T17:27:57Z,2021-01-14T17:27:57Z,CLOSED,False,33,33,1,https://github.com/lightsey,Issue 890 - ModSecurity corrupts the global pool's cleanups linked list with threaded MPMs.,2,"['Platform - Apache', '2.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2049,https://github.com/zimmerle,9,https://github.com/SpiderLabs/ModSecurity/pull/2049#issuecomment-760344443,"I tested the first commit fixing the re_precomp rules ( msre_op_validateHash_execute and msre_op_rx_execute ) using the example configuration I provided in issue #890.
The second commit fixing the other usage of rule->ruleset->mp in functions that are run during HTTP requests hasn't gone through any real testing. Nothing stands out to me in the code as suggesting that these should be using storage pools that are shared between all the threads in the process, but I'm not that very familiar with ModSecurity's codebase and could be mistaken.",Merged! Thanks @lightsey,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2057,2019-04-03T13:49:21Z,2019-05-27T20:44:12Z,2019-05-27T20:44:12Z,CLOSED,False,1,1,1,https://github.com/jleproust,Fix variables output in debug logs,1,"['enhancement', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2057,https://github.com/jleproust,1,https://github.com/SpiderLabs/ModSecurity/pull/2057,"Just a little fix for variable lists in debug logs. Without this, printing a Variables object in the debug log actually only printed one variable of the list, not the whole pipe-separated list.","Just a little fix for variable lists in debug logs. Without this, printing a Variables object in the debug log actually only printed one variable of the list, not the whole pipe-separated list.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2057,2019-04-03T13:49:21Z,2019-05-27T20:44:12Z,2019-05-27T20:44:12Z,CLOSED,False,1,1,1,https://github.com/jleproust,Fix variables output in debug logs,1,"['enhancement', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2057,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2057#issuecomment-496302485,"Just a little fix for variable lists in debug logs. Without this, printing a Variables object in the debug log actually only printed one variable of the list, not the whole pipe-separated list.",Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2058,2019-04-03T14:00:01Z,2021-01-18T18:31:25Z,2021-01-19T12:39:11Z,CLOSED,False,1,1,1,https://github.com/jleproust,Store values extracted from json to ARGS_POST,1,"['enhancement', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2058,https://github.com/jleproust,1,https://github.com/SpiderLabs/ModSecurity/pull/2058,"Variables extracted from the body of requests in multipart or urlencoded contents are stored in both the ARGS/ARGS_NAMES and ARGS_POST/ARGS_POST_NAMES, so we can choose to match or exclude them with ARGS_GET/ARGS_POST.
However, when the body of the request is JSON, its content can be optionally extracted to variables only in the ARGS and ARGS_NAMES collections. The ARGS_POST/ARGS_POST_NAMES collections stay empty.
My change stores them into both like multipart/urlencoded bodies, for consistency and simpler rules.
The only side effect is a change in the debug log line where the source is used, JSON is replaced with POST.","Variables extracted from the body of requests in multipart or urlencoded contents are stored in both the ARGS/ARGS_NAMES and ARGS_POST/ARGS_POST_NAMES, so we can choose to match or exclude them with ARGS_GET/ARGS_POST.
However, when the body of the request is JSON, its content can be optionally extracted to variables only in the ARGS and ARGS_NAMES collections. The ARGS_POST/ARGS_POST_NAMES collections stay empty.
My change stores them into both like multipart/urlencoded bodies, for consistency and simpler rules.
The only side effect is a change in the debug log line where the source is used, JSON is replaced with POST.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2058,2019-04-03T14:00:01Z,2021-01-18T18:31:25Z,2021-01-19T12:39:11Z,CLOSED,False,1,1,1,https://github.com/jleproust,Store values extracted from json to ARGS_POST,1,"['enhancement', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2058,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2058#issuecomment-762411430,"Variables extracted from the body of requests in multipart or urlencoded contents are stored in both the ARGS/ARGS_NAMES and ARGS_POST/ARGS_POST_NAMES, so we can choose to match or exclude them with ARGS_GET/ARGS_POST.
However, when the body of the request is JSON, its content can be optionally extracted to variables only in the ARGS and ARGS_NAMES collections. The ARGS_POST/ARGS_POST_NAMES collections stay empty.
My change stores them into both like multipart/urlencoded bodies, for consistency and simpler rules.
The only side effect is a change in the debug log line where the source is used, JSON is replaced with POST.","@jleproust thank you for the patch.
I understand the rationality purposed; however, it is interesting to consider the particular aspects of a JSON; I would like to highlight the possibility for a JSON to have a catastrophic amount of keys. A rule meant to inspect the ARGS_POST may not take into consideration all those keys. That behavior could lead to an undesired consumption of the server resources.
Considering this use case, a possibility to tell apart what is ARGS_POST and JSON sounds mandatory. Yet a rule that wants to inspect both collections can easily target: ""JSON|ARGS_POST"".
Please re-open if you think that this decision should be revisited.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2058,2019-04-03T14:00:01Z,2021-01-18T18:31:25Z,2021-01-19T12:39:11Z,CLOSED,False,1,1,1,https://github.com/jleproust,Store values extracted from json to ARGS_POST,1,"['enhancement', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2058,https://github.com/jleproust,3,https://github.com/SpiderLabs/ModSecurity/pull/2058#issuecomment-762461222,"Variables extracted from the body of requests in multipart or urlencoded contents are stored in both the ARGS/ARGS_NAMES and ARGS_POST/ARGS_POST_NAMES, so we can choose to match or exclude them with ARGS_GET/ARGS_POST.
However, when the body of the request is JSON, its content can be optionally extracted to variables only in the ARGS and ARGS_NAMES collections. The ARGS_POST/ARGS_POST_NAMES collections stay empty.
My change stores them into both like multipart/urlencoded bodies, for consistency and simpler rules.
The only side effect is a change in the debug log line where the source is used, JSON is replaced with POST.","Hi @zimmerle ! Thanks for the feedback, let me gather my memories from 2 years ago 😅
I was well aware of the JSON extraction performance issue, I even contributed the patch to mitigate them, long before it was even acknowledged as a DoS vuln. However using JSON as a collection instead of ARGS_POST does not help in all the cases, sometimes you want to match json keys content specifically, and I don't think we could this way. The application I wanted to protect had different arguments in query string and request body, and I wanted to process form POST and JSON content the same, while handling query parameters otherwise. This seemed like a good idea, whereas I don't think your proposition would allow it without duplicating rules (which comes with other performance issues). Especially I don't think CRS matches JSON by default, but I'm not sure after such a long time.",True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2058,2019-04-03T14:00:01Z,2021-01-18T18:31:25Z,2021-01-19T12:39:11Z,CLOSED,False,1,1,1,https://github.com/jleproust,Store values extracted from json to ARGS_POST,1,"['enhancement', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2058,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/2058#issuecomment-762815629,"Variables extracted from the body of requests in multipart or urlencoded contents are stored in both the ARGS/ARGS_NAMES and ARGS_POST/ARGS_POST_NAMES, so we can choose to match or exclude them with ARGS_GET/ARGS_POST.
However, when the body of the request is JSON, its content can be optionally extracted to variables only in the ARGS and ARGS_NAMES collections. The ARGS_POST/ARGS_POST_NAMES collections stay empty.
My change stores them into both like multipart/urlencoded bodies, for consistency and simpler rules.
The only side effect is a change in the debug log line where the source is used, JSON is replaced with POST.","Let me exemplify how to inspect both collections without duplicating the rules.
Rule 1 - Inspecting only ARGS_POST
SecRule ARGS_POST ""id:1""

Rule 2 - Inspecting only JSON
SecRule JSON ""id:2""

Rule 3 - Inspecting both: ARGS_POST and JSON
SecRule ARGS_POST|JSON ""id:3""

If we merge the purposed patch, all the use cases above will be concentrated in one: inspect both collections simultaneously. In this fashion, we are going to lose some functionality. Not to mention that targets can be updated by ID; thus, for some vhost or paths, it is possible to add JSON inspection to a previously Rule that was targeting ARGS_POST.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2059,2019-04-03T14:04:49Z,2019-05-27T20:24:05Z,2019-05-29T14:11:18Z,CLOSED,False,1,1,1,https://github.com/nerrehmit,correct typo validade in log output,1,"['enhancement', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2059,https://github.com/nerrehmit,1,https://github.com/SpiderLabs/ModSecurity/pull/2059,Small typo in the output.,Small typo in the output.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2059,2019-04-03T14:04:49Z,2019-05-27T20:24:05Z,2019-05-29T14:11:18Z,CLOSED,False,1,1,1,https://github.com/nerrehmit,correct typo validade in log output,1,"['enhancement', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2059,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2059#issuecomment-496299365,Small typo in the output.,"Hi @nerrehmit,
Thank you for the patch. Sorry for the delay. Merged!",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2060,2019-04-04T15:33:18Z,2020-02-11T13:14:49Z,2020-02-11T13:14:50Z,CLOSED,False,8198,8435,11,https://github.com/jleproust,Mitigate DoS vulnerability by limiting number of extracted arguments,2,"['enhancement', '3.x', 'pr available', 'new feature']",https://github.com/SpiderLabs/ModSecurity/pull/2060,https://github.com/jleproust,1,https://github.com/SpiderLabs/ModSecurity/pull/2060,"A relatively small json payload (<1MB) can generate up to a hundred thousands keys and values, which can then take ages (>30 minutes) to process with OWASP's CRS 3 for example. The parser is not the issue, no particular rule is the issue, it's just the pure quantity of values.
Obviously, with the nginx connector, this completely locks the worker for the whole duration, so it is a DoS vulnerability.
This is the underlying issue behind #2019 and I guess, SpiderLabs/ModSecurity-nginx#89 too.
That's why I implemented a SecArgumentsLimit value, disabled by default, allowing to set a limit to the number of extracted arguments. When the limit is reached, subsequent values are ignored. A limit of 1000 arguments should be enough for most applications, and reduces the maximum processing time to well under a second. Requests with more than 1000 arguments can be matched and rejected if wanted with a rule like SecRule &ARGS ""@gt 1000"".
In addition, I made the JSON processor cancel the parsing when the limit is reached.","A relatively small json payload (<1MB) can generate up to a hundred thousands keys and values, which can then take ages (>30 minutes) to process with OWASP's CRS 3 for example. The parser is not the issue, no particular rule is the issue, it's just the pure quantity of values.
Obviously, with the nginx connector, this completely locks the worker for the whole duration, so it is a DoS vulnerability.
This is the underlying issue behind #2019 and I guess, SpiderLabs/ModSecurity-nginx#89 too.
That's why I implemented a SecArgumentsLimit value, disabled by default, allowing to set a limit to the number of extracted arguments. When the limit is reached, subsequent values are ignored. A limit of 1000 arguments should be enough for most applications, and reduces the maximum processing time to well under a second. Requests with more than 1000 arguments can be matched and rejected if wanted with a rule like SecRule &ARGS ""@gt 1000"".
In addition, I made the JSON processor cancel the parsing when the limit is reached.",True,"{'THUMBS_UP': ['https://github.com/theMiddleBlue', 'https://github.com/AnoopAlias', 'https://github.com/victorhora', 'https://github.com/centminmod', 'https://github.com/goweiwen', 'https://github.com/zimmerle', 'https://github.com/feromax', 'https://github.com/HarithaRamesh', 'https://github.com/dune73', 'https://github.com/adelchev']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2060,2019-04-04T15:33:18Z,2020-02-11T13:14:49Z,2020-02-11T13:14:50Z,CLOSED,False,8198,8435,11,https://github.com/jleproust,Mitigate DoS vulnerability by limiting number of extracted arguments,2,"['enhancement', '3.x', 'pr available', 'new feature']",https://github.com/SpiderLabs/ModSecurity/pull/2060,https://github.com/feromax,2,https://github.com/SpiderLabs/ModSecurity/pull/2060#issuecomment-510169549,"A relatively small json payload (<1MB) can generate up to a hundred thousands keys and values, which can then take ages (>30 minutes) to process with OWASP's CRS 3 for example. The parser is not the issue, no particular rule is the issue, it's just the pure quantity of values.
Obviously, with the nginx connector, this completely locks the worker for the whole duration, so it is a DoS vulnerability.
This is the underlying issue behind #2019 and I guess, SpiderLabs/ModSecurity-nginx#89 too.
That's why I implemented a SecArgumentsLimit value, disabled by default, allowing to set a limit to the number of extracted arguments. When the limit is reached, subsequent values are ignored. A limit of 1000 arguments should be enough for most applications, and reduces the maximum processing time to well under a second. Requests with more than 1000 arguments can be matched and rejected if wanted with a rule like SecRule &ARGS ""@gt 1000"".
In addition, I made the JSON processor cancel the parsing when the limit is reached.",Hi there.  Anyone have an ETA on when this will be merged?  Thank you :),True,"{'THUMBS_UP': ['https://github.com/HarithaRamesh', 'https://github.com/harrymitchinson']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2060,2019-04-04T15:33:18Z,2020-02-11T13:14:49Z,2020-02-11T13:14:50Z,CLOSED,False,8198,8435,11,https://github.com/jleproust,Mitigate DoS vulnerability by limiting number of extracted arguments,2,"['enhancement', '3.x', 'pr available', 'new feature']",https://github.com/SpiderLabs/ModSecurity/pull/2060,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/2060#issuecomment-584628551,"A relatively small json payload (<1MB) can generate up to a hundred thousands keys and values, which can then take ages (>30 minutes) to process with OWASP's CRS 3 for example. The parser is not the issue, no particular rule is the issue, it's just the pure quantity of values.
Obviously, with the nginx connector, this completely locks the worker for the whole duration, so it is a DoS vulnerability.
This is the underlying issue behind #2019 and I guess, SpiderLabs/ModSecurity-nginx#89 too.
That's why I implemented a SecArgumentsLimit value, disabled by default, allowing to set a limit to the number of extracted arguments. When the limit is reached, subsequent values are ignored. A limit of 1000 arguments should be enough for most applications, and reduces the maximum processing time to well under a second. Requests with more than 1000 arguments can be matched and rejected if wanted with a rule like SecRule &ARGS ""@gt 1000"".
In addition, I made the JSON processor cancel the parsing when the limit is reached.",Closing this in favor of #2234.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2063,2019-04-06T15:57:47Z,2019-05-30T01:09:09Z,2019-05-30T01:09:09Z,CLOSED,False,3945,3690,16,https://github.com/Rufus125,New operator verifySVNR that finds Austrian social security numbers,10,"['3.x', 'pr available', 'new feature']",https://github.com/SpiderLabs/ModSecurity/pull/2063,https://github.com/Rufus125,1,https://github.com/SpiderLabs/ModSecurity/pull/2063,"Relates to #2062
I also created some tests and a PR, therefore the travis build will fail: SpiderLabs/secrules-language-tests#5","Relates to #2062
I also created some tests and a PR, therefore the travis build will fail: SpiderLabs/secrules-language-tests#5",True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2063,2019-04-06T15:57:47Z,2019-05-30T01:09:09Z,2019-05-30T01:09:09Z,CLOSED,False,3945,3690,16,https://github.com/Rufus125,New operator verifySVNR that finds Austrian social security numbers,10,"['3.x', 'pr available', 'new feature']",https://github.com/SpiderLabs/ModSecurity/pull/2063,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2063#issuecomment-496942201,"Relates to #2062
I also created some tests and a PR, therefore the travis build will fail: SpiderLabs/secrules-language-tests#5","Hi @Rufus125,
Thank you for your contribution. Instead of merging the requested branch, I am picking commit by commit in order to keep our tree as clean as possible.
For instance, I've just merged bb56288 into the tree, not actually related to the pull request, yet a valid contribution.",True,{'THUMBS_UP': ['https://github.com/Rufus125']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2063,2019-04-06T15:57:47Z,2019-05-30T01:09:09Z,2019-05-30T01:09:09Z,CLOSED,False,3945,3690,16,https://github.com/Rufus125,New operator verifySVNR that finds Austrian social security numbers,10,"['3.x', 'pr available', 'new feature']",https://github.com/SpiderLabs/ModSecurity/pull/2063,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/2063#issuecomment-497162892,"Relates to #2062
I also created some tests and a PR, therefore the travis build will fail: SpiderLabs/secrules-language-tests#5","Hi @Rufus125,
I've made all the changes that I have suggested on the review and merged the patch. Do you mind to double check to see if I am not missing something?
Thank you!",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2068,2019-04-15T06:02:31Z,2019-05-27T20:13:08Z,2019-05-27T20:13:08Z,CLOSED,False,1,1,1,https://github.com/tech-ozon-io,fix/minor: Error encoding hexa decimal,1,"['enhancement', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2068,https://github.com/tech-ozon-io,1,https://github.com/SpiderLabs/ModSecurity/pull/2068,"String is defined as an array of char. The char can be negative. The
cast ""reinterpret_cast"" from char to int keep the negative side, so
the ""unsigned char"" number 0x91 is negative as ""char"". When it is
""reinterpret_cast"" as integer, it becomes 0xffffff91, so the hexadecimal
display is broken:
[155493246391.747672] [/absolute?what=badarg2] [9]  T (0) t:hexEncode: ""ffffff91ffffffecffffffe6334bffffffebffffff87ffffff9affffff824a06ffffffc33b4cffff (14 characters omitted)""
This patch fix this behavior using classic cast without reinterpret_cast:
[155493251286.221115] [/absolute?what=badarg2] [9]  T (0) t:hexEncode: ""91ece6334beb879a824a06c33b4cb4240e4c6f56""","String is defined as an array of char. The char can be negative. The
cast ""reinterpret_cast"" from char to int keep the negative side, so
the ""unsigned char"" number 0x91 is negative as ""char"". When it is
""reinterpret_cast"" as integer, it becomes 0xffffff91, so the hexadecimal
display is broken:
[155493246391.747672] [/absolute?what=badarg2] [9]  T (0) t:hexEncode: ""ffffff91ffffffecffffffe6334bffffffebffffff87ffffff9affffff824a06ffffffc33b4cffff (14 characters omitted)""
This patch fix this behavior using classic cast without reinterpret_cast:
[155493251286.221115] [/absolute?what=badarg2] [9]  T (0) t:hexEncode: ""91ece6334beb879a824a06c33b4cb4240e4c6f56""",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2068,2019-04-15T06:02:31Z,2019-05-27T20:13:08Z,2019-05-27T20:13:08Z,CLOSED,False,1,1,1,https://github.com/tech-ozon-io,fix/minor: Error encoding hexa decimal,1,"['enhancement', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2068,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2068#issuecomment-496297719,"String is defined as an array of char. The char can be negative. The
cast ""reinterpret_cast"" from char to int keep the negative side, so
the ""unsigned char"" number 0x91 is negative as ""char"". When it is
""reinterpret_cast"" as integer, it becomes 0xffffff91, so the hexadecimal
display is broken:
[155493246391.747672] [/absolute?what=badarg2] [9]  T (0) t:hexEncode: ""ffffff91ffffffecffffffe6334bffffffebffffff87ffffff9affffff824a06ffffffc33b4cffff (14 characters omitted)""
This patch fix this behavior using classic cast without reinterpret_cast:
[155493251286.221115] [/absolute?what=badarg2] [9]  T (0) t:hexEncode: ""91ece6334beb879a824a06c33b4cb4240e4c6f56""","Hi @tech-ozon-io,
Thank you for your contribution. Sorry, for the delay. The code is now merged!",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2071,2019-04-16T21:31:36Z,2019-04-17T00:11:11Z,2019-04-21T13:01:37Z,CLOSED,False,6,0,2,https://github.com/airween,Set match_limit and match_limit_recursion values to regex variables,1,"['3.x', 'workaround available']",https://github.com/SpiderLabs/ModSecurity/pull/2071,https://github.com/airween,1,https://github.com/SpiderLabs/ModSecurity/pull/2071,"Today there were some regex related issues under owasp-modsecurity-crs, especially:
SpiderLabs/owasp-modsecurity-crs#1354
SpiderLabs/owasp-modsecurity-crs#1356
SpiderLabs/owasp-modsecurity-crs#1357
SpiderLabs/owasp-modsecurity-crs#1358
SpiderLabs/owasp-modsecurity-crs#1359
These issues affected libmodsecurity3, because some rule can triggers the catastrophic backtrace.
The ""bug"" exists because there aren't set up the match_limit and match_limit_recursion members and flags on the pcre_study object. The result in practice will an overloaded HTTP daemon, which uses libmodsecurity3, eg. Nginx.
As a quick fix, I've set up the default values as 1500 for both values.
ModSecurity2 can avoid the overloaded state with SecPcreMatchLimit and SecPcreMatchLimitRecursion","Today there were some regex related issues under owasp-modsecurity-crs, especially:
SpiderLabs/owasp-modsecurity-crs#1354
SpiderLabs/owasp-modsecurity-crs#1356
SpiderLabs/owasp-modsecurity-crs#1357
SpiderLabs/owasp-modsecurity-crs#1358
SpiderLabs/owasp-modsecurity-crs#1359
These issues affected libmodsecurity3, because some rule can triggers the catastrophic backtrace.
The ""bug"" exists because there aren't set up the match_limit and match_limit_recursion members and flags on the pcre_study object. The result in practice will an overloaded HTTP daemon, which uses libmodsecurity3, eg. Nginx.
As a quick fix, I've set up the default values as 1500 for both values.
ModSecurity2 can avoid the overloaded state with SecPcreMatchLimit and SecPcreMatchLimitRecursion",True,"{'THUMBS_UP': ['https://github.com/lifeforms', 'https://github.com/zimmerle', 'https://github.com/centminmod']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2071,2019-04-16T21:31:36Z,2019-04-17T00:11:11Z,2019-04-21T13:01:37Z,CLOSED,False,6,0,2,https://github.com/airween,Set match_limit and match_limit_recursion values to regex variables,1,"['3.x', 'workaround available']",https://github.com/SpiderLabs/ModSecurity/pull/2071,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2071#issuecomment-483888483,"Today there were some regex related issues under owasp-modsecurity-crs, especially:
SpiderLabs/owasp-modsecurity-crs#1354
SpiderLabs/owasp-modsecurity-crs#1356
SpiderLabs/owasp-modsecurity-crs#1357
SpiderLabs/owasp-modsecurity-crs#1358
SpiderLabs/owasp-modsecurity-crs#1359
These issues affected libmodsecurity3, because some rule can triggers the catastrophic backtrace.
The ""bug"" exists because there aren't set up the match_limit and match_limit_recursion members and flags on the pcre_study object. The result in practice will an overloaded HTTP daemon, which uses libmodsecurity3, eg. Nginx.
As a quick fix, I've set up the default values as 1500 for both values.
ModSecurity2 can avoid the overloaded state with SecPcreMatchLimit and SecPcreMatchLimitRecursion","Hi @airween,
ModSecurity shares memory space within the NGINX, therefore setting this on ModSecurity will impact on NGINX behavior which has its own constraints. That used to be a problem with ModSecurity v2 especially on php was handling its own limits. That was the main reason why this was not taken into consideration on v3. This subject was discussed back on 2013.
To illustrate: #56, #267, #1176, #1481, and #1290
Setting those values is no guarantee that it will solve the problem. Yet can impact very badly in other modules that use PCRE. The PCRE itself already contains hardcoded limits that can be changed in compilation time. Apparently, those are not enough and lead to the recursion problem. We cannot guarantee that any other module or NGINX itself will not change those values. Potentially leading the less experienced user to believe that he/she is protected when in reality they are not.
We try to abstract complexity for those who may write the rules, but I am afraid that we won't be able to help in this one. I understand that you want to protect ModSecurity instance from particular regular expressions that may not be written in an elegant shape. Or am I wrong?
I am wondering if there is another way to solve that without setting a limit that we don't have any control and potentially lead to unexpected behavior. I am closing the pull request for the reasons explained and opening a new issue to discuss that matter.
From pcre manual
""The default value for the limit can be set when PCRE is built; the default default is 10 million, which
handles all but the most extreme cases. You can override the default by suppling pcre_exec() with a 
pcre_extra block in which match_limit is set, and PCRE_EXTRA_MATCH_LIMIT is set in the flags
field. If the limit is exceeded, pcre_exec() returns PCRE_ERROR_MATCHLIMIT.""

Limiting the recursion depth limits the amount of stack that can be used, or, when PCRE has been 
compiled to use memory on the heap instead of the stack, the amount of heap memory that can be
used.

The default value for match_limit_recursion can be set when PCRE is built; the default default is the
same value as the default for match_limit. You can override the default by suppling pcre_exec() with
a pcre_extra block in which match_limit_recursion is set, and PCRE_EXTRA_MATCH_LIMIT_RECURSION is set in the flags field. If the limit is exceeded,
pcre_exec() returns PCRE_ERROR_RECURSIONLIMIT.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2071,2019-04-16T21:31:36Z,2019-04-17T00:11:11Z,2019-04-21T13:01:37Z,CLOSED,False,6,0,2,https://github.com/airween,Set match_limit and match_limit_recursion values to regex variables,1,"['3.x', 'workaround available']",https://github.com/SpiderLabs/ModSecurity/pull/2071,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/2071#issuecomment-483890600,"Today there were some regex related issues under owasp-modsecurity-crs, especially:
SpiderLabs/owasp-modsecurity-crs#1354
SpiderLabs/owasp-modsecurity-crs#1356
SpiderLabs/owasp-modsecurity-crs#1357
SpiderLabs/owasp-modsecurity-crs#1358
SpiderLabs/owasp-modsecurity-crs#1359
These issues affected libmodsecurity3, because some rule can triggers the catastrophic backtrace.
The ""bug"" exists because there aren't set up the match_limit and match_limit_recursion members and flags on the pcre_study object. The result in practice will an overloaded HTTP daemon, which uses libmodsecurity3, eg. Nginx.
As a quick fix, I've set up the default values as 1500 for both values.
ModSecurity2 can avoid the overloaded state with SecPcreMatchLimit and SecPcreMatchLimitRecursion","@s0md3v -- mentioning so you got a notification, as you are the reporter of the issues cited by @airween. Again, thank you for your work. I am sure a lot of people will be benefited from it.",True,{'HEART': ['https://github.com/s0md3v']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2071,2019-04-16T21:31:36Z,2019-04-17T00:11:11Z,2019-04-21T13:01:37Z,CLOSED,False,6,0,2,https://github.com/airween,Set match_limit and match_limit_recursion values to regex variables,1,"['3.x', 'workaround available']",https://github.com/SpiderLabs/ModSecurity/pull/2071,https://github.com/fgsch,4,https://github.com/SpiderLabs/ModSecurity/pull/2071#issuecomment-484291797,"Today there were some regex related issues under owasp-modsecurity-crs, especially:
SpiderLabs/owasp-modsecurity-crs#1354
SpiderLabs/owasp-modsecurity-crs#1356
SpiderLabs/owasp-modsecurity-crs#1357
SpiderLabs/owasp-modsecurity-crs#1358
SpiderLabs/owasp-modsecurity-crs#1359
These issues affected libmodsecurity3, because some rule can triggers the catastrophic backtrace.
The ""bug"" exists because there aren't set up the match_limit and match_limit_recursion members and flags on the pcre_study object. The result in practice will an overloaded HTTP daemon, which uses libmodsecurity3, eg. Nginx.
As a quick fix, I've set up the default values as 1500 for both values.
ModSecurity2 can avoid the overloaded state with SecPcreMatchLimit and SecPcreMatchLimitRecursion","@zimmerle I'm not sure I understand. Those limits are specific to the pcre_exec() call (the extra argument). How changing the limits in modsecurity will affect nginx, or anything else for the matter?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2071,2019-04-16T21:31:36Z,2019-04-17T00:11:11Z,2019-04-21T13:01:37Z,CLOSED,False,6,0,2,https://github.com/airween,Set match_limit and match_limit_recursion values to regex variables,1,"['3.x', 'workaround available']",https://github.com/SpiderLabs/ModSecurity/pull/2071,https://github.com/s0md3v,5,https://github.com/SpiderLabs/ModSecurity/pull/2071#issuecomment-484346673,"Today there were some regex related issues under owasp-modsecurity-crs, especially:
SpiderLabs/owasp-modsecurity-crs#1354
SpiderLabs/owasp-modsecurity-crs#1356
SpiderLabs/owasp-modsecurity-crs#1357
SpiderLabs/owasp-modsecurity-crs#1358
SpiderLabs/owasp-modsecurity-crs#1359
These issues affected libmodsecurity3, because some rule can triggers the catastrophic backtrace.
The ""bug"" exists because there aren't set up the match_limit and match_limit_recursion members and flags on the pcre_study object. The result in practice will an overloaded HTTP daemon, which uses libmodsecurity3, eg. Nginx.
As a quick fix, I've set up the default values as 1500 for both values.
ModSecurity2 can avoid the overloaded state with SecPcreMatchLimit and SecPcreMatchLimitRecursion","I think PCRE limits should be set but if you believe that it breaks other components of a web server (which it shouldn't), you can do the following:

Add (x+)+y as a rule
Add PCRE limits
Make a request with the string `xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxz
Does it cause problems in other components of the web server?

Yes, it breaks stuff. Don't merge this PR.
No, everything works as intended. Merge this PR.



I haven't looked into the code but it's really crucial what you do after the timeout. Ideally, the request should be blocked if the regex matching times out otherwise it can be used to bypass the WAF itself.",True,{'THUMBS_UP': ['https://github.com/centminmod']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2071,2019-04-16T21:31:36Z,2019-04-17T00:11:11Z,2019-04-21T13:01:37Z,CLOSED,False,6,0,2,https://github.com/airween,Set match_limit and match_limit_recursion values to regex variables,1,"['3.x', 'workaround available']",https://github.com/SpiderLabs/ModSecurity/pull/2071,https://github.com/airween,6,https://github.com/SpiderLabs/ModSecurity/pull/2071#issuecomment-484396476,"Today there were some regex related issues under owasp-modsecurity-crs, especially:
SpiderLabs/owasp-modsecurity-crs#1354
SpiderLabs/owasp-modsecurity-crs#1356
SpiderLabs/owasp-modsecurity-crs#1357
SpiderLabs/owasp-modsecurity-crs#1358
SpiderLabs/owasp-modsecurity-crs#1359
These issues affected libmodsecurity3, because some rule can triggers the catastrophic backtrace.
The ""bug"" exists because there aren't set up the match_limit and match_limit_recursion members and flags on the pcre_study object. The result in practice will an overloaded HTTP daemon, which uses libmodsecurity3, eg. Nginx.
As a quick fix, I've set up the default values as 1500 for both values.
ModSecurity2 can avoid the overloaded state with SecPcreMatchLimit and SecPcreMatchLimitRecursion","Hi @zimmerle,
thanks for detailed response.
Sorry to tell you, but I'm not sure that understand you completely.
You've listes some issues, I've reviwed them, but can't compare anyone with this one.
#56:
issue: Nginx eats cpu
solution: PR #67, added response body filter, plus PR #96, which also modified only Nginx
#267
issue: same problem like @s0md3v found
solution: added SecPcreMatchLimit and SecPcreMatchLimitRecursion (didn't found PR)
#1176
issue: the request triggers ""PCRE limit exceeded"" messages
solution: no solution, ""It worth to check."" :)
#1481
issue: ModSecurity: SecPcreMatchLimit not allowed in VirtualHost
solution: SecPcreMatchLimit and SecPcreMatchLimitRecursion are globals, can't use them in VirtualHost. This is a strict rule, I agree.
#1290
issue: SecPcreMatchLimit and SecPcreMatchLimitRecursion not follwed in modsecurity.conf
solution: not sure that there was any solution, @bostrt wrote that needs to build modsec with macros.
Note for #1176: I think that this message in the log is important and relevant. It informs the admin, who runs ModSec. Till we don't know, what casuses this problem, we can't speak about PHP or any other components modify those limits. Till we don't know any other about the cause, we can't imagine the real problem (I mean it would be good to see the other logs, where exceeds the limit...)
I think that from the issues above only one affects same problem like here, and the solution was added SecPcreMatchLimit and SecPcreMatchLimitRecursion options. May be I don't see somthing, or don't understand some important thing... really sorry. If you will have some free time, please help me to explain them.
I understand and agree, that this modification should breaks another modules, we don't know that now. In case of v2 and Apache, I didn't found any issue, which confirms this idea, but can't close out, of course. (And this is a rather weak argument... :))
May be we should try it in v3, discuss with PCRE devs about hardcoded limits, which can cause any effect.
In some cases you as the library's main developer can decide that from this point you will not follow the old hacks - I totally agree. But where should users know that these options aren't supported? From an outdated documentation? :)
I think, we have to solve this issue somehow. My suggestion:

add these two configuration directives to v3, but only if the user enables them in compilation time; the default should ""not supported""
if directives added, I would NOT let user to add default value, eg. in compilation time also
if directives added, but not used in config, then they will not have effect
if directives added, and user set them with explicit value, then they will have effect (including logs the reach of limit recursion...)
start to make the documentation for v3 (and v3.1... :)), add extra highligts to differences between v2 and v3 (and v3 and v3.1)

What do you think? :)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2071,2019-04-16T21:31:36Z,2019-04-17T00:11:11Z,2019-04-21T13:01:37Z,CLOSED,False,6,0,2,https://github.com/airween,Set match_limit and match_limit_recursion values to regex variables,1,"['3.x', 'workaround available']",https://github.com/SpiderLabs/ModSecurity/pull/2071,https://github.com/airween,7,https://github.com/SpiderLabs/ModSecurity/pull/2071#issuecomment-484400876,"Today there were some regex related issues under owasp-modsecurity-crs, especially:
SpiderLabs/owasp-modsecurity-crs#1354
SpiderLabs/owasp-modsecurity-crs#1356
SpiderLabs/owasp-modsecurity-crs#1357
SpiderLabs/owasp-modsecurity-crs#1358
SpiderLabs/owasp-modsecurity-crs#1359
These issues affected libmodsecurity3, because some rule can triggers the catastrophic backtrace.
The ""bug"" exists because there aren't set up the match_limit and match_limit_recursion members and flags on the pcre_study object. The result in practice will an overloaded HTTP daemon, which uses libmodsecurity3, eg. Nginx.
As a quick fix, I've set up the default values as 1500 for both values.
ModSecurity2 can avoid the overloaded state with SecPcreMatchLimit and SecPcreMatchLimitRecursion","@fgsch
here is a very ugly example:
https://gist.github.com/airween/b3a158bb21938a4e1c8a41c1568ed9c7
Consider that the ugly() function is a small part of a library, and it has an argument, what you can use to set up a 'limit'. The main() function calls it few times, passes the argument, and you think that you've set up the necessary value. You can see, that the value will not change if you pass 0.
I think this is a very wrong example, I don't think that there are any similar solution eg. in PHP, or other modules... but you can't exclude the case, when somebody forgot something - we can call it as 'bug' :)
HTH.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2071,2019-04-16T21:31:36Z,2019-04-17T00:11:11Z,2019-04-21T13:01:37Z,CLOSED,False,6,0,2,https://github.com/airween,Set match_limit and match_limit_recursion values to regex variables,1,"['3.x', 'workaround available']",https://github.com/SpiderLabs/ModSecurity/pull/2071,https://github.com/airween,8,https://github.com/SpiderLabs/ModSecurity/pull/2071#issuecomment-484402789,"Today there were some regex related issues under owasp-modsecurity-crs, especially:
SpiderLabs/owasp-modsecurity-crs#1354
SpiderLabs/owasp-modsecurity-crs#1356
SpiderLabs/owasp-modsecurity-crs#1357
SpiderLabs/owasp-modsecurity-crs#1358
SpiderLabs/owasp-modsecurity-crs#1359
These issues affected libmodsecurity3, because some rule can triggers the catastrophic backtrace.
The ""bug"" exists because there aren't set up the match_limit and match_limit_recursion members and flags on the pcre_study object. The result in practice will an overloaded HTTP daemon, which uses libmodsecurity3, eg. Nginx.
As a quick fix, I've set up the default values as 1500 for both values.
ModSecurity2 can avoid the overloaded state with SecPcreMatchLimit and SecPcreMatchLimitRecursion","@s0md3v

   * No, everything works as intended. Merge this PR.


it's not that simple. :)
There should be many other case, what you can't cause with only one test. For example, you don't know all nginx module (what does it mean all module?), and you can't test the combinations of (theoretically all) modules, and all available inputs...",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2071,2019-04-16T21:31:36Z,2019-04-17T00:11:11Z,2019-04-21T13:01:37Z,CLOSED,False,6,0,2,https://github.com/airween,Set match_limit and match_limit_recursion values to regex variables,1,"['3.x', 'workaround available']",https://github.com/SpiderLabs/ModSecurity/pull/2071,https://github.com/zimmerle,9,https://github.com/SpiderLabs/ModSecurity/pull/2071#issuecomment-485212074,"Today there were some regex related issues under owasp-modsecurity-crs, especially:
SpiderLabs/owasp-modsecurity-crs#1354
SpiderLabs/owasp-modsecurity-crs#1356
SpiderLabs/owasp-modsecurity-crs#1357
SpiderLabs/owasp-modsecurity-crs#1358
SpiderLabs/owasp-modsecurity-crs#1359
These issues affected libmodsecurity3, because some rule can triggers the catastrophic backtrace.
The ""bug"" exists because there aren't set up the match_limit and match_limit_recursion members and flags on the pcre_study object. The result in practice will an overloaded HTTP daemon, which uses libmodsecurity3, eg. Nginx.
As a quick fix, I've set up the default values as 1500 for both values.
ModSecurity2 can avoid the overloaded state with SecPcreMatchLimit and SecPcreMatchLimitRecursion","@zimmerle I'm not sure I understand. Those limits are specific to the pcre_exec() call (the extra argument). How changing the limits in modsecurity will affect nginx, or anything else for the matter?

Hi @fgsch
It is wrong to think that there isn’t a limit. There is. The limit is set by the PCRE library itself. Maybe in the case that you have tested these limits were not low enough. Because it depends on the conjunction of two different things: Input and Regex. Occasionally, the value may be too low depending on the factors listed. Of course all that depends on the factor that you have to accept a regex that might not take the ReDoS scenario into account.
In ModSecurity v2, the limits could be set in different manners:

Considers the default values set on pcre;
Considers the values informed by the user during the pcre compilation;
Considers the value informed ModSecurity compilation;
Considers the value informed during the rules load.

In ModSecurity v3 the user can set the limits by:

Considering the values set on pcre;
Considering the values informed by the user during the pcre compilation.

We have all those different options to set the limits, however, even having those options, there aren't ""correct values"" per se. Is more about an educated guess. A value that a inexperienced user may not have a clue about - not to mention that we need to support: ARM, Windows, HPUX, Solaris, etc….. That kind of configuration forces the user to consult an expert, it is not too userfriendly. Depending on the scenario, could lead to a circumstance where the user thinks he is protected but in the reality he is not.
As soon as I have some time next week I'll try to dig the historical reasons behind this rationale but we had users complaining that setting pcre limits on PHP was affecting ModSecurity as well. Generally, those limits raise doubt and questions from users.
IMHO we should take the heavy lifting to ourselves and implement something innovative that will make these settings friendlier to our users. We can look at v2 to find what to do and what not to do and take this opportunity to think how we can make it better :)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2071,2019-04-16T21:31:36Z,2019-04-17T00:11:11Z,2019-04-21T13:01:37Z,CLOSED,False,6,0,2,https://github.com/airween,Set match_limit and match_limit_recursion values to regex variables,1,"['3.x', 'workaround available']",https://github.com/SpiderLabs/ModSecurity/pull/2071,https://github.com/zimmerle,10,https://github.com/SpiderLabs/ModSecurity/pull/2071#issuecomment-485216054,"Today there were some regex related issues under owasp-modsecurity-crs, especially:
SpiderLabs/owasp-modsecurity-crs#1354
SpiderLabs/owasp-modsecurity-crs#1356
SpiderLabs/owasp-modsecurity-crs#1357
SpiderLabs/owasp-modsecurity-crs#1358
SpiderLabs/owasp-modsecurity-crs#1359
These issues affected libmodsecurity3, because some rule can triggers the catastrophic backtrace.
The ""bug"" exists because there aren't set up the match_limit and match_limit_recursion members and flags on the pcre_study object. The result in practice will an overloaded HTTP daemon, which uses libmodsecurity3, eg. Nginx.
As a quick fix, I've set up the default values as 1500 for both values.
ModSecurity2 can avoid the overloaded state with SecPcreMatchLimit and SecPcreMatchLimitRecursion","I think PCRE limits should be set but if you believe that it breaks other components of a web server (which it shouldn't), you can do the following:


Add (x+)+y as a rule


Add PCRE limits


Make a request with the string `xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxz


Does it cause problems in other components of the web server?

Yes, it breaks stuff. Don't merge this PR.
No, everything works as intended. Merge this PR.



I haven't looked into the code but it's really crucial what you do after the timeout. Ideally, the request should be blocked if the regex matching times out otherwise it can be used to bypass the WAF itself.

I am afraid I have to disagree with you. I think we should not accept regex that could lead to ReDoS at all. For varied reasons:

Have a quantization for the limit is an equation that is based on an educated guess that demands skills and previous knowledge. That goes against one of the v3 objectives: to be more user-friendly.
Considering that we have a value to be set, what should be the default value? How to guarantee that this same value is ok regardless of platform? There won’t be a regex and/or input value that will be an exception to this value?
A rules load problem treated on run time: At my perspective, we should avoid loading a rule that contains a potentially dangerous regular expression. Instead, we should inform the user to write the regex in an elegant shape. Having this validation in run time creates an additional step which is to treat the circumstances where the rule was blocked due to reaching the limits of ReDoS.
How HyperScan and RE2 treat it? We are close to adding support to those; the limits are an option on them?
We perform an educated guess on the number based on the amount of time to validate a regex; having said that, for other reasons the workers already contains an execution timeout. Right?

Having said all that, ideally we shouldn't ignore regexes that do not take into consideration REDoS risks.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2071,2019-04-16T21:31:36Z,2019-04-17T00:11:11Z,2019-04-21T13:01:37Z,CLOSED,False,6,0,2,https://github.com/airween,Set match_limit and match_limit_recursion values to regex variables,1,"['3.x', 'workaround available']",https://github.com/SpiderLabs/ModSecurity/pull/2071,https://github.com/zimmerle,11,https://github.com/SpiderLabs/ModSecurity/pull/2071#issuecomment-485217504,"Today there were some regex related issues under owasp-modsecurity-crs, especially:
SpiderLabs/owasp-modsecurity-crs#1354
SpiderLabs/owasp-modsecurity-crs#1356
SpiderLabs/owasp-modsecurity-crs#1357
SpiderLabs/owasp-modsecurity-crs#1358
SpiderLabs/owasp-modsecurity-crs#1359
These issues affected libmodsecurity3, because some rule can triggers the catastrophic backtrace.
The ""bug"" exists because there aren't set up the match_limit and match_limit_recursion members and flags on the pcre_study object. The result in practice will an overloaded HTTP daemon, which uses libmodsecurity3, eg. Nginx.
As a quick fix, I've set up the default values as 1500 for both values.
ModSecurity2 can avoid the overloaded state with SecPcreMatchLimit and SecPcreMatchLimitRecursion","Hi @zimmerle,
thanks for detailed response.
Sorry to tell you, but I'm not sure that understand you completely.
You've listes some issues, I've reviwed them, but can't compare anyone with this one.
#56:
issue: Nginx eats cpu
solution: PR #67, added response body filter, plus PR #96, which also modified only Nginx
#267
issue: same problem like @s0md3v found
solution: added SecPcreMatchLimit and SecPcreMatchLimitRecursion (didn't found PR)
#1176
issue: the request triggers ""PCRE limit exceeded"" messages
solution: no solution, ""It worth to check."" :)
#1481
issue: ModSecurity: SecPcreMatchLimit not allowed in VirtualHost
solution: SecPcreMatchLimit and SecPcreMatchLimitRecursion are globals, can't use them in VirtualHost. This is a strict rule, I agree.
#1290
issue: SecPcreMatchLimit and SecPcreMatchLimitRecursion not follwed in modsecurity.conf
solution: not sure that there was any solution, @bostrt wrote that needs to build modsec with macros.
Note for #1176: I think that this message in the log is important and relevant. It informs the admin, who runs ModSec. Till we don't know, what casuses this problem, we can't speak about PHP or any other components modify those limits. Till we don't know any other about the cause, we can't imagine the real problem (I mean it would be good to see the other logs, where exceeds the limit...)
I think that from the issues above only one affects same problem like here, and the solution was added SecPcreMatchLimit and SecPcreMatchLimitRecursion options. May be I don't see somthing, or don't understand some important thing... really sorry. If you will have some free time, please help me to explain them.
I understand and agree, that this modification should breaks another modules, we don't know that now. In case of v2 and Apache, I didn't found any issue, which confirms this idea, but can't close out, of course. (And this is a rather weak argument... :))
May be we should try it in v3, discuss with PCRE devs about hardcoded limits, which can cause any effect.
In some cases you as the library's main developer can decide that from this point you will not follow the old hacks - I totally agree. But where should users know that these options aren't supported? From an outdated documentation? :)
I think, we have to solve this issue somehow. My suggestion:

add these two configuration directives to v3, but only if the user enables them in compilation time; the default should ""not supported""
if directives added, I would NOT let user to add default value, eg. in compilation time also
if directives added, but not used in config, then they will not have effect
if directives added, and user set them with explicit value, then they will have effect (including logs the reach of limit recursion...)
start to make the documentation for v3 (and v3.1... :)), add extra highligts to differences between v2 and v3 (and v3 and v3.1)

What do you think? :)

As stated in the reply of other users in this thread I think we should spend efforts to have the rules that contain a possible ReDoS to be promptly displayed to the user and refused to be loaded. Meaning: Treat the problem while loading the rules, not at runtime. There are other mechanisms to kill a process for a timeout. Rules that can lead to a problem - and could be promptly identified - should not be loaded in the first place.
You mentioned that the documentation does not state that PCRE limits are not supported. Reading the Reference Manual, it shows as ""To be Implemented"" (TBI). The code also has comments in that regards as well. @airween I am sorry if you are disappointed given the fact that I am not accepting your PR promptly. The reason for that is so everybody has the chance to read and discuss. At the end of the day, we are not advocating on our own but to have the best WAF for our users. Sometimes it is frustrating even to me. The decision is ours after long sessions of brainstorming ideas, which is what I am doing right now.
If you have any further doubt, I will be more than glad to answer and discuss, but let's not be incisive with assumptions.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2071,2019-04-16T21:31:36Z,2019-04-17T00:11:11Z,2019-04-21T13:01:37Z,CLOSED,False,6,0,2,https://github.com/airween,Set match_limit and match_limit_recursion values to regex variables,1,"['3.x', 'workaround available']",https://github.com/SpiderLabs/ModSecurity/pull/2071,https://github.com/zimmerle,12,https://github.com/SpiderLabs/ModSecurity/pull/2071#issuecomment-485218181,"Today there were some regex related issues under owasp-modsecurity-crs, especially:
SpiderLabs/owasp-modsecurity-crs#1354
SpiderLabs/owasp-modsecurity-crs#1356
SpiderLabs/owasp-modsecurity-crs#1357
SpiderLabs/owasp-modsecurity-crs#1358
SpiderLabs/owasp-modsecurity-crs#1359
These issues affected libmodsecurity3, because some rule can triggers the catastrophic backtrace.
The ""bug"" exists because there aren't set up the match_limit and match_limit_recursion members and flags on the pcre_study object. The result in practice will an overloaded HTTP daemon, which uses libmodsecurity3, eg. Nginx.
As a quick fix, I've set up the default values as 1500 for both values.
ModSecurity2 can avoid the overloaded state with SecPcreMatchLimit and SecPcreMatchLimitRecursion","@fgsch @airween @s0md3v
Sorry for being somewhat brief on the explanations here. Away from my keyboards due to Easter holidays Are you guys available to a quick hangout session on Monday? What do you think about promptly identifying the possible ReDoS regex?
Can anybody send me a rule and a cURL command or test case that trigger the issue on v3+nginx? Please do not publish here, send me over email. My key is 0xB11277.
Thank you.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2071,2019-04-16T21:31:36Z,2019-04-17T00:11:11Z,2019-04-21T13:01:37Z,CLOSED,False,6,0,2,https://github.com/airween,Set match_limit and match_limit_recursion values to regex variables,1,"['3.x', 'workaround available']",https://github.com/SpiderLabs/ModSecurity/pull/2071,https://github.com/airween,13,https://github.com/SpiderLabs/ModSecurity/pull/2071#issuecomment-485233463,"Today there were some regex related issues under owasp-modsecurity-crs, especially:
SpiderLabs/owasp-modsecurity-crs#1354
SpiderLabs/owasp-modsecurity-crs#1356
SpiderLabs/owasp-modsecurity-crs#1357
SpiderLabs/owasp-modsecurity-crs#1358
SpiderLabs/owasp-modsecurity-crs#1359
These issues affected libmodsecurity3, because some rule can triggers the catastrophic backtrace.
The ""bug"" exists because there aren't set up the match_limit and match_limit_recursion members and flags on the pcre_study object. The result in practice will an overloaded HTTP daemon, which uses libmodsecurity3, eg. Nginx.
As a quick fix, I've set up the default values as 1500 for both values.
ModSecurity2 can avoid the overloaded state with SecPcreMatchLimit and SecPcreMatchLimitRecursion","Hi @zimmerle,

As stated in the reply of other users in this thread I think we should spend efforts to have the rules that contain a possible ReDoS to be promptly displayed to the user and refused to be loaded. Meaning: Treat the problem while loading the rules, not at runtime. There are other mechanisms to kill a process for a timeout. Rules that can lead to a problem - and could be promptly identified - should not be loaded in the first place.

yes, I think I understood this after your first note under the #2072 - see my comment

You mentioned that the documentation does not state that PCRE limits are not supported. Reading the Reference Manual, it shows as ""To be Implemented"" (TBI). The code also has comments in that regards as well.

yes, you're right - sorry for this mistake.

@airween I am sorry if you are disappointed given the fact that I am not accepting your PR promptly.

I was not disappointed :). I'm not aiming to flood the project with PR's, but rather to rational repair and learning. And didn't sent it that you merge it promptly, my goal was to show a possible solution, and start the discuss.

The reason for that is so everybody has the chance to read and discuss. At the end of the day, we are not advocating on our own but to have the best WAF for our users. Sometimes it is frustrating even to me. The decision is ours after long sessions of brainstorming ideas, which is what I am doing right now.

Agree.

If you have any further doubt, I will be more than glad to answer and discuss, but let's not be incisive with assumptions.

I didn't want to live with assumptions, I'm sorry if this can be interpreted. I've been looking at all the PR's that you referred to avoid the assumes.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2071,2019-04-16T21:31:36Z,2019-04-17T00:11:11Z,2019-04-21T13:01:37Z,CLOSED,False,6,0,2,https://github.com/airween,Set match_limit and match_limit_recursion values to regex variables,1,"['3.x', 'workaround available']",https://github.com/SpiderLabs/ModSecurity/pull/2071,https://github.com/fgsch,14,https://github.com/SpiderLabs/ModSecurity/pull/2071#issuecomment-485245223,"Today there were some regex related issues under owasp-modsecurity-crs, especially:
SpiderLabs/owasp-modsecurity-crs#1354
SpiderLabs/owasp-modsecurity-crs#1356
SpiderLabs/owasp-modsecurity-crs#1357
SpiderLabs/owasp-modsecurity-crs#1358
SpiderLabs/owasp-modsecurity-crs#1359
These issues affected libmodsecurity3, because some rule can triggers the catastrophic backtrace.
The ""bug"" exists because there aren't set up the match_limit and match_limit_recursion members and flags on the pcre_study object. The result in practice will an overloaded HTTP daemon, which uses libmodsecurity3, eg. Nginx.
As a quick fix, I've set up the default values as 1500 for both values.
ModSecurity2 can avoid the overloaded state with SecPcreMatchLimit and SecPcreMatchLimitRecursion","@zimmerle I'm familiar with the PCRE API (both 2 and 3), and I know there are limits at built time, but I think you are conflating several issues here.
Technically there is no reason to not expose these limits. I do agree that they might fall into the advance user category though, but they should not be hidden. Instead they should be documented thoroughly so they are understood.
We should also fix the regexen, no questions here. But to me these two things are orthogonal.
Any improvements on how this is done can be added at a later time, when the code is ready.
Waiting for the perfect solution doesn't really help anyone.",True,{'THUMBS_UP': ['https://github.com/vassilisp']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2071,2019-04-16T21:31:36Z,2019-04-17T00:11:11Z,2019-04-21T13:01:37Z,CLOSED,False,6,0,2,https://github.com/airween,Set match_limit and match_limit_recursion values to regex variables,1,"['3.x', 'workaround available']",https://github.com/SpiderLabs/ModSecurity/pull/2071,https://github.com/s0md3v,15,https://github.com/SpiderLabs/ModSecurity/pull/2071#issuecomment-485247048,"Today there were some regex related issues under owasp-modsecurity-crs, especially:
SpiderLabs/owasp-modsecurity-crs#1354
SpiderLabs/owasp-modsecurity-crs#1356
SpiderLabs/owasp-modsecurity-crs#1357
SpiderLabs/owasp-modsecurity-crs#1358
SpiderLabs/owasp-modsecurity-crs#1359
These issues affected libmodsecurity3, because some rule can triggers the catastrophic backtrace.
The ""bug"" exists because there aren't set up the match_limit and match_limit_recursion members and flags on the pcre_study object. The result in practice will an overloaded HTTP daemon, which uses libmodsecurity3, eg. Nginx.
As a quick fix, I've set up the default values as 1500 for both values.
ModSecurity2 can avoid the overloaded state with SecPcreMatchLimit and SecPcreMatchLimitRecursion","Did you guys looked at this?
I shared a methodology to spot exploitable regular expressions.
Maybe you want to fix the existing patterns and then be careful when a new addition is made.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2071,2019-04-16T21:31:36Z,2019-04-17T00:11:11Z,2019-04-21T13:01:37Z,CLOSED,False,6,0,2,https://github.com/airween,Set match_limit and match_limit_recursion values to regex variables,1,"['3.x', 'workaround available']",https://github.com/SpiderLabs/ModSecurity/pull/2071,https://github.com/fgsch,16,https://github.com/SpiderLabs/ModSecurity/pull/2071#issuecomment-485249794,"Today there were some regex related issues under owasp-modsecurity-crs, especially:
SpiderLabs/owasp-modsecurity-crs#1354
SpiderLabs/owasp-modsecurity-crs#1356
SpiderLabs/owasp-modsecurity-crs#1357
SpiderLabs/owasp-modsecurity-crs#1358
SpiderLabs/owasp-modsecurity-crs#1359
These issues affected libmodsecurity3, because some rule can triggers the catastrophic backtrace.
The ""bug"" exists because there aren't set up the match_limit and match_limit_recursion members and flags on the pcre_study object. The result in practice will an overloaded HTTP daemon, which uses libmodsecurity3, eg. Nginx.
As a quick fix, I've set up the default values as 1500 for both values.
ModSecurity2 can avoid the overloaded state with SecPcreMatchLimit and SecPcreMatchLimitRecursion","Just to expand on my previous comment, and to answer @s0md3v, fixing CRS will only cover the rules we control. Anyone could write custom rules so the scope here is beyond the reported issues.
As such I strongly believe we should provide a mechanism to help all users.",True,"{'THUMBS_UP': ['https://github.com/franbuehler', 'https://github.com/dune73', 'https://github.com/centminmod']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2073,2019-04-18T08:25:17Z,2019-05-27T20:06:15Z,2019-05-27T20:06:15Z,CLOSED,False,4,4,1,https://github.com/jleproust,Limit more log variables to 200 characters,1,"['enhancement', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2073,https://github.com/jleproust,1,https://github.com/SpiderLabs/ModSecurity/pull/2073,"To avoid generating too long log lines which end up truncated (like in nginx's error log), and missing important bits. Most variables are already truncated to 100-200 characters, but logdata and the request can be huge too.","To avoid generating too long log lines which end up truncated (like in nginx's error log), and missing important bits. Most variables are already truncated to 100-200 characters, but logdata and the request can be huge too.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2073,2019-04-18T08:25:17Z,2019-05-27T20:06:15Z,2019-05-27T20:06:15Z,CLOSED,False,4,4,1,https://github.com/jleproust,Limit more log variables to 200 characters,1,"['enhancement', '3.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2073,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2073#issuecomment-496296661,"To avoid generating too long log lines which end up truncated (like in nginx's error log), and missing important bits. Most variables are already truncated to 100-200 characters, but logdata and the request can be huge too.","Hi @jleproust,
Thank you for your contribution. Sorry about the delay to get it merged. The changes are on v3/master now.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2092,2019-05-14T23:35:54Z,2019-05-27T18:02:29Z,2019-05-27T18:03:29Z,CLOSED,False,8,0,1,https://github.com/rainerjung,"When the input filter finishes, check whether we returned data",3,"['enhancement', '2.x']",https://github.com/SpiderLabs/ModSecurity/pull/2092,https://github.com/rainerjung,1,https://github.com/SpiderLabs/ModSecurity/pull/2092,"during the last read and if not, delegate to the remaining filter
chain.
Without that, ProcessPartial for the request body breaks forwarding
of uploaded files using mod_proxy_ajp and mod_wl.
See issue #2091.","during the last read and if not, delegate to the remaining filter
chain.
Without that, ProcessPartial for the request body breaks forwarding
of uploaded files using mod_proxy_ajp and mod_wl.
See issue #2091.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2092,2019-05-14T23:35:54Z,2019-05-27T18:02:29Z,2019-05-27T18:03:29Z,CLOSED,False,8,0,1,https://github.com/rainerjung,"When the input filter finishes, check whether we returned data",3,"['enhancement', '2.x']",https://github.com/SpiderLabs/ModSecurity/pull/2092,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2092#issuecomment-496267033,"during the last read and if not, delegate to the remaining filter
chain.
Without that, ProcessPartial for the request body breaks forwarding
of uploaded files using mod_proxy_ajp and mod_wl.
See issue #2091.","Related to:

#1600 and #1471 - @tomsommer (1)
#1827 - @markblackman (2)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2092,2019-05-14T23:35:54Z,2019-05-27T18:02:29Z,2019-05-27T18:03:29Z,CLOSED,False,8,0,1,https://github.com/rainerjung,"When the input filter finishes, check whether we returned data",3,"['enhancement', '2.x']",https://github.com/SpiderLabs/ModSecurity/pull/2092,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/2092#issuecomment-496277054,"during the last read and if not, delegate to the remaining filter
chain.
Without that, ProcessPartial for the request body breaks forwarding
of uploaded files using mod_proxy_ajp and mod_wl.
See issue #2091.",Merged! Thank you.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2094,2019-05-14T23:47:44Z,,2019-05-31T19:49:52Z,OPEN,False,3,3,1,https://github.com/rainerjung,"Only run completion checks for request bodies, if we have",1,"['enhancement', '2.x']",https://github.com/SpiderLabs/ModSecurity/pull/2094,https://github.com/rainerjung,1,https://github.com/SpiderLabs/ModSecurity/pull/2094,"actually seen all of the body. In case ProcessPartial is configured
and our input filter only processed part of the request, checking
for a complete request body makes no sense.
See issue #2093.","actually seen all of the body. In case ProcessPartial is configured
and our input filter only processed part of the request, checking
for a complete request body makes no sense.
See issue #2093.",True,{'THUMBS_UP': ['https://github.com/tomsommer']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2094,2019-05-14T23:47:44Z,,2019-05-31T19:49:52Z,OPEN,False,3,3,1,https://github.com/rainerjung,"Only run completion checks for request bodies, if we have",1,"['enhancement', '2.x']",https://github.com/SpiderLabs/ModSecurity/pull/2094,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2094#issuecomment-497839060,"actually seen all of the body. In case ProcessPartial is configured
and our input filter only processed part of the request, checking
for a complete request body makes no sense.
See issue #2093.",There is a discussion on issue #2093 about this pull request.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2095,2019-05-14T23:52:03Z,2021-01-15T18:15:54Z,2021-01-15T18:15:55Z,CLOSED,False,5,3,1,https://github.com/rainerjung,Add microsec timestamp resolution to the formatted log timestamp.,1,"['enhancement', '2.x']",https://github.com/SpiderLabs/ModSecurity/pull/2095,https://github.com/rainerjung,1,https://github.com/SpiderLabs/ModSecurity/pull/2095,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2095,2019-05-14T23:52:03Z,2021-01-15T18:15:54Z,2021-01-15T18:15:55Z,CLOSED,False,5,3,1,https://github.com/rainerjung,Add microsec timestamp resolution to the formatted log timestamp.,1,"['enhancement', '2.x']",https://github.com/SpiderLabs/ModSecurity/pull/2095,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2095#issuecomment-496226881,,"Hi @rainerjung,
Sorry for the delay. Can you give us further details about why do you need such a resolution on the logs?
It will increase the processing time and size of the logs. Is that something that you can compute using the timing variables?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2095,2019-05-14T23:52:03Z,2021-01-15T18:15:54Z,2021-01-15T18:15:55Z,CLOSED,False,5,3,1,https://github.com/rainerjung,Add microsec timestamp resolution to the formatted log timestamp.,1,"['enhancement', '2.x']",https://github.com/SpiderLabs/ModSecurity/pull/2095,https://github.com/rainerjung,3,https://github.com/SpiderLabs/ModSecurity/pull/2095#issuecomment-497855013,,"Hi,
concerning processing time change, the patch only adds an integer operation plus integer format string in an existing snprintf(). No system calls, additional clock calls or similar are added. All data needed is already available in the existing code, it just isn't used when the timestamp is formatted.
All of the modern server components I am aware of provide sub second time resolution in their logs. Especially the Apache web server does. Adding the finer time resolution to mod_security logs allows a better understanding of processing sequences of Apache and the module. Yes, it will add 7 bytes per line (the separating dot and 6 digits), but typcally the lines are much longer, so 7 bytes per line is not a big increase.
I wrote the patch to help me doing analysis of some mod_security problems (understanding interaction between Apache und the module). For me it was very helpful. Due to its very little change of resource use and only small increase of log lines, I personally find it a low risk change.
Thanks and Regards,
Rainer",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2095,2019-05-14T23:52:03Z,2021-01-15T18:15:54Z,2021-01-15T18:15:55Z,CLOSED,False,5,3,1,https://github.com/rainerjung,Add microsec timestamp resolution to the formatted log timestamp.,1,"['enhancement', '2.x']",https://github.com/SpiderLabs/ModSecurity/pull/2095,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/2095#issuecomment-761101808,,Sorry for the long delay @rainerjung. This is now merged! Thank you.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2097,2019-05-17T06:28:16Z,2019-05-27T13:41:51Z,2019-05-27T13:41:51Z,CLOSED,False,1,0,1,https://github.com/orisano,fix: care non-null terminated chunk data,1,"['enhancement', 'Platform - Apache', '2.x']",https://github.com/SpiderLabs/ModSecurity/pull/2097,https://github.com/orisano,1,https://github.com/SpiderLabs/ModSecurity/pull/2097,"I encountered a broken JSON audit log when used sanitizeArg on the body.
{""transaction"":{""time"":""17/May/2019:03:58:01 +0000"",""transaction_id"":""AcVcAcAcAcAcAzAcAcWQ4cAc"",""remote_address"":""172.17.0.1"",""remote_port"":37868,""local_address"":""127.0.0.1"",""local_port"":80},""request"":{""request_line"":""POST / HTTP/1.1"",""headers"":{""Host"":""test.modsec.com"",""User-Agent"":""curl/7.54.0"",""Accept"":""*/*"",""Content-Type"":""application/json"",""Content-Length"":""41""},""body"":[""{\""password\"":\""****\"",\""user_id\"":\""../../../\""}f�#IV""]},""response"":{""protocol"":""HTTP/1.1"",""status"":405,""headers"":{""Content-Type"":""text/html"",""Content-Length"":""173"",""Connection"":""keep-alive""},""body"":""<html>\r\n<head><title>405 Not Allowed</title></head>\r\n<body bgcolor=\""white\"">\r\n<center><h1>405 Not Allowed</h1></center>\r\n<hr><center>nginx/1.15.0</center>\r\n</body>\r\n</html>\r\n""},""audit_data"":{""messages"":[""Warning. Unconditional match in SecAction. [file \""/etc/nginx/modsecurity.d/rules/modsecurity.conf\""] [line \""265\""] [id \""101\""]""],""handler"":""IIS"",""stopwatch"":{""p1"":45,""p2"":78,""p3"":1,""p4"":0,""p5"":2,""sr"":0,""sw"":0,""l"":0,""gc"":0},""response_body_dechunked"":true,""producer"":""ModSecurity for nginx (STABLE)/2.9.3 (http://www.modsecurity.org/)"",""server"":""ModSecurity Standalone"",""sanitized"":{""args"":[""password""]},""engine_mode"":""ENABLED""}}
I fixed this problem.","I encountered a broken JSON audit log when used sanitizeArg on the body.
{""transaction"":{""time"":""17/May/2019:03:58:01 +0000"",""transaction_id"":""AcVcAcAcAcAcAzAcAcWQ4cAc"",""remote_address"":""172.17.0.1"",""remote_port"":37868,""local_address"":""127.0.0.1"",""local_port"":80},""request"":{""request_line"":""POST / HTTP/1.1"",""headers"":{""Host"":""test.modsec.com"",""User-Agent"":""curl/7.54.0"",""Accept"":""*/*"",""Content-Type"":""application/json"",""Content-Length"":""41""},""body"":[""{\""password\"":\""****\"",\""user_id\"":\""../../../\""}f�#IV""]},""response"":{""protocol"":""HTTP/1.1"",""status"":405,""headers"":{""Content-Type"":""text/html"",""Content-Length"":""173"",""Connection"":""keep-alive""},""body"":""<html>\r\n<head><title>405 Not Allowed</title></head>\r\n<body bgcolor=\""white\"">\r\n<center><h1>405 Not Allowed</h1></center>\r\n<hr><center>nginx/1.15.0</center>\r\n</body>\r\n</html>\r\n""},""audit_data"":{""messages"":[""Warning. Unconditional match in SecAction. [file \""/etc/nginx/modsecurity.d/rules/modsecurity.conf\""] [line \""265\""] [id \""101\""]""],""handler"":""IIS"",""stopwatch"":{""p1"":45,""p2"":78,""p3"":1,""p4"":0,""p5"":2,""sr"":0,""sw"":0,""l"":0,""gc"":0},""response_body_dechunked"":true,""producer"":""ModSecurity for nginx (STABLE)/2.9.3 (http://www.modsecurity.org/)"",""server"":""ModSecurity Standalone"",""sanitized"":{""args"":[""password""]},""engine_mode"":""ENABLED""}}
I fixed this problem.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2097,2019-05-17T06:28:16Z,2019-05-27T13:41:51Z,2019-05-27T13:41:51Z,CLOSED,False,1,0,1,https://github.com/orisano,fix: care non-null terminated chunk data,1,"['enhancement', 'Platform - Apache', '2.x']",https://github.com/SpiderLabs/ModSecurity/pull/2097,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2097#issuecomment-496217128,"I encountered a broken JSON audit log when used sanitizeArg on the body.
{""transaction"":{""time"":""17/May/2019:03:58:01 +0000"",""transaction_id"":""AcVcAcAcAcAcAzAcAcWQ4cAc"",""remote_address"":""172.17.0.1"",""remote_port"":37868,""local_address"":""127.0.0.1"",""local_port"":80},""request"":{""request_line"":""POST / HTTP/1.1"",""headers"":{""Host"":""test.modsec.com"",""User-Agent"":""curl/7.54.0"",""Accept"":""*/*"",""Content-Type"":""application/json"",""Content-Length"":""41""},""body"":[""{\""password\"":\""****\"",\""user_id\"":\""../../../\""}f�#IV""]},""response"":{""protocol"":""HTTP/1.1"",""status"":405,""headers"":{""Content-Type"":""text/html"",""Content-Length"":""173"",""Connection"":""keep-alive""},""body"":""<html>\r\n<head><title>405 Not Allowed</title></head>\r\n<body bgcolor=\""white\"">\r\n<center><h1>405 Not Allowed</h1></center>\r\n<hr><center>nginx/1.15.0</center>\r\n</body>\r\n</html>\r\n""},""audit_data"":{""messages"":[""Warning. Unconditional match in SecAction. [file \""/etc/nginx/modsecurity.d/rules/modsecurity.conf\""] [line \""265\""] [id \""101\""]""],""handler"":""IIS"",""stopwatch"":{""p1"":45,""p2"":78,""p3"":1,""p4"":0,""p5"":2,""sr"":0,""sw"":0,""l"":0,""gc"":0},""response_body_dechunked"":true,""producer"":""ModSecurity for nginx (STABLE)/2.9.3 (http://www.modsecurity.org/)"",""server"":""ModSecurity Standalone"",""sanitized"":{""args"":[""password""]},""engine_mode"":""ENABLED""}}
I fixed this problem.",Merged! thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2102,2019-05-23T18:47:17Z,2019-05-30T13:29:07Z,2019-05-30T15:03:07Z,CLOSED,False,207,7,2,https://github.com/airween,Adds missing check for runtime ctl:ruleRemoveByTag (Issue #2099),3,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2102,https://github.com/airween,1,https://github.com/SpiderLabs/ModSecurity/pull/2102,"This PR fixed the remained bug from issue #2099:
Added some test cases to prevent the similar problems.","This PR fixed the remained bug from issue #2099:
Added some test cases to prevent the similar problems.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2102,2019-05-23T18:47:17Z,2019-05-30T13:29:07Z,2019-05-30T15:03:07Z,CLOSED,False,207,7,2,https://github.com/airween,Adds missing check for runtime ctl:ruleRemoveByTag (Issue #2099),3,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2102,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2102#issuecomment-496225883,"This PR fixed the remained bug from issue #2099:
Added some test cases to prevent the similar problems.","General comments:

Try to give significative names to pull requests, so it can be searchable by other users.

A good title could be: Adds missing check for runtime SecRuleRemoveByTag (Issue #2099)


Whenever you make a reference to an issue, use the hash marking otherwise Github won't notice the reference.

Instead of 2099 use #2099",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2102,2019-05-23T18:47:17Z,2019-05-30T13:29:07Z,2019-05-30T15:03:07Z,CLOSED,False,207,7,2,https://github.com/airween,Adds missing check for runtime ctl:ruleRemoveByTag (Issue #2099),3,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2102,https://github.com/airween,3,https://github.com/SpiderLabs/ModSecurity/pull/2102#issuecomment-496230341,"This PR fixed the remained bug from issue #2099:
Added some test cases to prevent the similar problems.","General comments:
* Try to give significative names to pull requests, so it can be searchable by other users.

A good title could be: Adds missing check for runtime SecRuleRemoveByTag (Issue #2099)

* Whenever you make a reference to an issue, use the hash marking otherwise Github won't notice the reference.

Instead of 2099 use #2099


Sorry, and thanks for the tips - I'll try to keep it mind :)
Edit: these had been modified too.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2102,2019-05-23T18:47:17Z,2019-05-30T13:29:07Z,2019-05-30T15:03:07Z,CLOSED,False,207,7,2,https://github.com/airween,Adds missing check for runtime ctl:ruleRemoveByTag (Issue #2099),3,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2102,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/2102#issuecomment-496520865,"This PR fixed the remained bug from issue #2099:
Added some test cases to prevent the similar problems.","Hi @airween,
I have started a review in the code.
Question: Why you have sent this patch against that branch? As already explained to you we are working on 3.1. It seems like your patch is compatible only with the master branch.

Where should I sent the patch?
I just read about the 3.1 from blogposts... not remember that we've discussed about the flow of sending of patches for ""old"" version :)
Edit: and one more note: the original issue affects 3.0 - I think it's better to apply to this first.

Sure @airween. I think that reiterates the need to talk over GitHub issues instead of Hangouts/Skype and Slack. So that we don't lose track of what is going on with the project. With that, we are keeping the info not only ourselves but for others who may want to be up to date and participating in the discussions.
No worries I will modify your patch to fit 3.1.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2102,2019-05-23T18:47:17Z,2019-05-30T13:29:07Z,2019-05-30T15:03:07Z,CLOSED,False,207,7,2,https://github.com/airween,Adds missing check for runtime ctl:ruleRemoveByTag (Issue #2099),3,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2102,https://github.com/airween,5,https://github.com/SpiderLabs/ModSecurity/pull/2102#issuecomment-496525336,"This PR fixed the remained bug from issue #2099:
Added some test cases to prevent the similar problems.","Hi @airween,
I have started a review in the code.
Question: Why you have sent this patch against that branch? As already explained to you we are working on 3.1. It seems like your patch is compatible only with the master branch.

Where should I sent the patch?
I just read about the 3.1 from blogposts... not remember that we've discussed about the flow of sending of patches for ""old"" version :)
Edit: and one more note: the original issue affects 3.0 - I think it's better to apply to this first.

Sure @airween. I think that reiterates the need to talk over GitHub issues instead of Hangouts/Skype and Slack. So that we don't lose track of what is going on with the project. With that, we are keeping the info not only ourselves but for others who may want to be up to date and participating in the discussions.
No worries I will modify your patch to fit 3.1.

Hi @zimmerle - thanks for details.
I've double checked on Slack (a long time ago we didn't used Skype and Hangouts :)), and mailing list. On the list, I've found a mention for 3.1 in a mail, nothing more.
Of course, it's important to keep the control over the project.
I've never checked out the 3.1 - sounds interesting. Would you like me to see that too?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2102,2019-05-23T18:47:17Z,2019-05-30T13:29:07Z,2019-05-30T15:03:07Z,CLOSED,False,207,7,2,https://github.com/airween,Adds missing check for runtime ctl:ruleRemoveByTag (Issue #2099),3,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2102,https://github.com/zimmerle,6,https://github.com/SpiderLabs/ModSecurity/pull/2102#issuecomment-497329331,"This PR fixed the remained bug from issue #2099:
Added some test cases to prevent the similar problems.","Hi @airween,
Thank you for your patch. I have made some modifications in your patch in order to:
(a) merging all the commits that you were offering fixies within the very same branch;
(b) baptise the commits with more meaningful description;
(c) Adding the test case to the test case list.
The result is here:

2c136a2
7a93bea
db29869
b5823d4

Since you are a long-term contributor, it is important to highlight (c).  If the test case is not on the make file list, it is not executed by the buildbots. Therefore not automagically tested. List is still manual, little trickier to get it done right.
Here is the list:

  
    
      ModSecurity/Makefile.am
    
    
         Line 152
      in
      b5823d4
    
  
  
    

        
          
           TESTS+=test/test-cases/regression/issue-2099.json 
        
    
  


This patch is now merged!",True,{'HOORAY': ['https://github.com/airween']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2102,2019-05-23T18:47:17Z,2019-05-30T13:29:07Z,2019-05-30T15:03:07Z,CLOSED,False,207,7,2,https://github.com/airween,Adds missing check for runtime ctl:ruleRemoveByTag (Issue #2099),3,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2102,https://github.com/airween,7,https://github.com/SpiderLabs/ModSecurity/pull/2102#issuecomment-497362071,"This PR fixed the remained bug from issue #2099:
Added some test cases to prevent the similar problems.","Hi @zimmerle, thanks for the tips - I'll try to keep them in mind :).
Note, that I've added many test cases (may be for all relevant modifications), but never met whit this issue. Thanks for the notification. :)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2103,2019-05-28T20:55:58Z,2019-05-31T19:45:10Z,2019-05-31T20:06:12Z,CLOSED,False,199,1,2,https://github.com/airween,Added missing check for ctl:ruleRemoveByTag for v3.1 (Issue #2099),1,[],https://github.com/SpiderLabs/ModSecurity/pull/2103,https://github.com/airween,1,https://github.com/SpiderLabs/ModSecurity/pull/2103,"added missing check for ctl:ruleRemoveByTag for v3.1
added regression test file","added missing check for ctl:ruleRemoveByTag for v3.1
added regression test file",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2103,2019-05-28T20:55:58Z,2019-05-31T19:45:10Z,2019-05-31T20:06:12Z,CLOSED,False,199,1,2,https://github.com/airween,Added missing check for ctl:ruleRemoveByTag for v3.1 (Issue #2099),1,[],https://github.com/SpiderLabs/ModSecurity/pull/2103,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2103#issuecomment-497837778,"added missing check for ctl:ruleRemoveByTag for v3.1
added regression test file","Hi @airween,
It is my understanding that you have submitted the same code for the 3.0.3 tree. I am not merging this because since it was merged there, once I rebase the code will be available anyway. Therefore not necessary to merge this one.
Having said that, I am closing this pull request.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2103,2019-05-28T20:55:58Z,2019-05-31T19:45:10Z,2019-05-31T20:06:12Z,CLOSED,False,199,1,2,https://github.com/airween,Added missing check for ctl:ruleRemoveByTag for v3.1 (Issue #2099),1,[],https://github.com/SpiderLabs/ModSecurity/pull/2103,https://github.com/airween,3,https://github.com/SpiderLabs/ModSecurity/pull/2103#issuecomment-497843573,"added missing check for ctl:ruleRemoveByTag for v3.1
added regression test file","Hi @zimmerle,

It is my understanding that you have submitted the same code for the 3.0.3 tree.
may be you misunderstand - maybe I do :).

I've submitted this patch to v3/master branch, but in this PR I submit to v3/dev/3.1-experimental. That's an another branch, not the 3.0.3.

I am not merging this because since it was merged there, once I rebase the code will be available anyway. Therefore not necessary to merge this one.

right, I didn't know how would like to apply this fix to the 3.1 tree. As I see, this fix doesn't exists yet in 3.1:

  
    
      ModSecurity/src/rules_set.cc
    
    
        Lines 259 to 271
      in
      13e073c
    
  
  
    

        
          
            
        

        
          
           if (ruleWithActions) { 
        

        
          
               for (auto &z : t->m_ruleRemoveByTag) { 
        

        
          
                   if (ruleWithActions->containsTag(z, t) == true) { 
        

        
          
                       ms_dbg_a(t, 9, ""Skipped rule id '"" \ 
        

        
          
                           + ruleWithActions->getReference() \ 
        

        
          
                           + ""'. Skipped due to a ruleRemoveByTag action.""); 
        

        
          
                       remove_rule = true; 
        

        
          
                       break; 
        

        
          
                   } 
        

        
          
               } 
        

        
          
           } 
        

        
          
            
        
    
  


The another reason why I sent it here, that you asked me first at #2099, why did I sent the fix to v3/master, because you're working on 3.1 - therefore I'ld like help you with this.

Having said that, I am closing this pull request.

Okay, it's no problem :).",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2107,2019-06-01T10:34:51Z,2020-04-22T19:39:14Z,2020-04-22T19:39:15Z,CLOSED,False,100,6,6,https://github.com/airween,V3/collection re fix,7,"['3.x', 'duplicate']",https://github.com/SpiderLabs/ModSecurity/pull/2107,https://github.com/airween,1,https://github.com/SpiderLabs/ModSecurity/pull/2107,"Looks like the Regex::searchAll() method is not case insensitive (InMemoryPerProcess::resolveSingleMatch() needs that). This bug detected with help of CRS regression test 920450.
The problem is, the comparing variables on collections (in-memory and LMDB) must be case insensitive.
This condition is not met.
See this PR, and the documentation.
BTW, the ModSec2 follows this way... so I think we have to align the ModSec3 too.
I'ld like to apply this patch to v3/master, because I found here, and I think the v3.1 regex module is different.","Looks like the Regex::searchAll() method is not case insensitive (InMemoryPerProcess::resolveSingleMatch() needs that). This bug detected with help of CRS regression test 920450.
The problem is, the comparing variables on collections (in-memory and LMDB) must be case insensitive.
This condition is not met.
See this PR, and the documentation.
BTW, the ModSec2 follows this way... so I think we have to align the ModSec3 too.
I'ld like to apply this patch to v3/master, because I found here, and I think the v3.1 regex module is different.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2107,2019-06-01T10:34:51Z,2020-04-22T19:39:14Z,2020-04-22T19:39:15Z,CLOSED,False,100,6,6,https://github.com/airween,V3/collection re fix,7,"['3.x', 'duplicate']",https://github.com/SpiderLabs/ModSecurity/pull/2107,https://github.com/michaelgranzow-avi,2,https://github.com/SpiderLabs/ModSecurity/pull/2107#issuecomment-616641708,"Looks like the Regex::searchAll() method is not case insensitive (InMemoryPerProcess::resolveSingleMatch() needs that). This bug detected with help of CRS regression test 920450.
The problem is, the comparing variables on collections (in-memory and LMDB) must be case insensitive.
This condition is not met.
See this PR, and the documentation.
BTW, the ModSec2 follows this way... so I think we have to align the ModSec3 too.
I'ld like to apply this patch to v3/master, because I found here, and I think the v3.1 regex module is different.","IMO this bug is not a duplicate as the other bug does not involve regular expression search of variables, but this one does.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2107,2019-06-01T10:34:51Z,2020-04-22T19:39:14Z,2020-04-22T19:39:15Z,CLOSED,False,100,6,6,https://github.com/airween,V3/collection re fix,7,"['3.x', 'duplicate']",https://github.com/SpiderLabs/ModSecurity/pull/2107,https://github.com/airween,3,https://github.com/SpiderLabs/ModSecurity/pull/2107#issuecomment-617992978,"Looks like the Regex::searchAll() method is not case insensitive (InMemoryPerProcess::resolveSingleMatch() needs that). This bug detected with help of CRS regression test 920450.
The problem is, the comparing variables on collections (in-memory and LMDB) must be case insensitive.
This condition is not met.
See this PR, and the documentation.
BTW, the ModSec2 follows this way... so I think we have to align the ModSec3 too.
I'ld like to apply this patch to v3/master, because I found here, and I think the v3.1 regex module is different.","Closing this PR, reopened in #2297.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2113,2019-06-04T10:49:06Z,2019-06-04T14:07:12Z,2019-06-04T14:07:12Z,CLOSED,False,35,1,3,https://github.com/airween,Changed compared variables of range id intervall in ruleRemoveById #2111,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2113,https://github.com/airween,1,https://github.com/SpiderLabs/ModSecurity/pull/2113,"Changed compared variables of range id intervall in ruleRemoveById cl action. #2111

changed the variables in the comparison
added test case (@theMiddleBlue)
fixes #2111","Changed compared variables of range id intervall in ruleRemoveById cl action. #2111

changed the variables in the comparison
added test case (@theMiddleBlue)
fixes #2111",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2113,2019-06-04T10:49:06Z,2019-06-04T14:07:12Z,2019-06-04T14:07:12Z,CLOSED,False,35,1,3,https://github.com/airween,Changed compared variables of range id intervall in ruleRemoveById #2111,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2113,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2113#issuecomment-498687080,"Changed compared variables of range id intervall in ruleRemoveById cl action. #2111

changed the variables in the comparison
added test case (@theMiddleBlue)
fixes #2111",Merged! Thanks.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2114,2019-06-04T14:17:49Z,2020-11-03T22:07:24Z,2020-11-03T22:07:24Z,CLOSED,False,112,14,7,https://github.com/j0k2r,Adds support to multiple ranges in ctl:ruleRemoveTargetById (#2110),2,"['enhancement', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/2114,https://github.com/j0k2r,1,https://github.com/SpiderLabs/ModSecurity/pull/2114,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2114,2019-06-04T14:17:49Z,2020-11-03T22:07:24Z,2020-11-03T22:07:24Z,CLOSED,False,112,14,7,https://github.com/j0k2r,Adds support to multiple ranges in ctl:ruleRemoveTargetById (#2110),2,"['enhancement', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/2114,https://github.com/dune73,2,https://github.com/SpiderLabs/ModSecurity/pull/2114#issuecomment-499896125,,"Is this PR covering the use of multiple comma-separated IDs too? (-> ctl:ruleRemoveTargetById=1000,1999)
If it does, then adding a test case for that use would be helpful.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2114,2019-06-04T14:17:49Z,2020-11-03T22:07:24Z,2020-11-03T22:07:24Z,CLOSED,False,112,14,7,https://github.com/j0k2r,Adds support to multiple ranges in ctl:ruleRemoveTargetById (#2110),2,"['enhancement', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/2114,https://github.com/j0k2r,3,https://github.com/SpiderLabs/ModSecurity/pull/2114#issuecomment-499902324,,"No, it only parse the Id range",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2114,2019-06-04T14:17:49Z,2020-11-03T22:07:24Z,2020-11-03T22:07:24Z,CLOSED,False,112,14,7,https://github.com/j0k2r,Adds support to multiple ranges in ctl:ruleRemoveTargetById (#2110),2,"['enhancement', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/2114,https://github.com/j0k2r,4,https://github.com/SpiderLabs/ModSecurity/pull/2114#issuecomment-499936465,,"@dune73, After doing some tests, it seems that neither ctl:ruleRemoveById nor ctl:ruleRemoveTargetById supports setting multiple IDs.
I'm not a Lexer expert but apparently with the 
  
    
      ModSecurity/src/parser/seclang-scanner.ll
    
    
         Line 447
      in
      cbd15ec
    
  
  
    

        
          
           REMOVE_RULE_BY                          [0-9A-Za-z_\/\.\-\*\:\;\]\[\$]+ 
        
    
  

 ruleRemoveBy does not support (,)
Don't know if I'm right.",True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2114,2019-06-04T14:17:49Z,2020-11-03T22:07:24Z,2020-11-03T22:07:24Z,CLOSED,False,112,14,7,https://github.com/j0k2r,Adds support to multiple ranges in ctl:ruleRemoveTargetById (#2110),2,"['enhancement', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/2114,https://github.com/dune73,5,https://github.com/SpiderLabs/ModSecurity/pull/2114#issuecomment-499946588,,Thank you for checking. Much appreciated. So many subtle shortcomings with v3...,True,"{'THUMBS_UP': ['https://github.com/zimmerle'], 'HOORAY': ['https://github.com/zimmerle']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2114,2019-06-04T14:17:49Z,2020-11-03T22:07:24Z,2020-11-03T22:07:24Z,CLOSED,False,112,14,7,https://github.com/j0k2r,Adds support to multiple ranges in ctl:ruleRemoveTargetById (#2110),2,"['enhancement', '3.x']",https://github.com/SpiderLabs/ModSecurity/pull/2114,https://github.com/zimmerle,6,https://github.com/SpiderLabs/ModSecurity/pull/2114#issuecomment-721399345,,Thank you @j0k2r. Added this as part of #2430. Merged on 3.1-experimental,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2119,2019-06-13T14:35:23Z,,2019-07-04T15:40:26Z,OPEN,False,13559,14951,16,https://github.com/j0k2r,Adds neutralizeSafeEncoding and utf8toChar transformations to fix utf8/base64/hex32 false positives,7,"['3.x', 'pr available', 'workaround available', 'new feature']",https://github.com/SpiderLabs/ModSecurity/pull/2119,https://github.com/j0k2r,1,https://github.com/SpiderLabs/ModSecurity/pull/2119,"Hi guys,
Sometimes, when we protect multiple international websites, we have to accept many UTF8 encoding and we can't have the possibility to set the right UnicodeMapping codepage every time.
With this PR we are proposing to add two transformations to solve and facilitate working with utf8/base64/hex32 entries and limit false positives.


utf8toChar:


Replace all valid UTF8 characters > 0xff by a single ""a"". This transformation doesn't modify ASCII characters.


Replace UTF8 overlong characters, this allows to detect attack escaped by overlong encoding. If the overlong is <= 0xff, it is replaced by the corresponding byte.


If the transformation encounter any invalid UTF8 sequence, it returns the original input.


Example:
Input string (containing a random ""ON"" word, which trigger XSS FP):
""test+%D1%8F%D0%B2%D0%BB%D1%8F%D1%8E%D1%82%D1%81%D1%8F+%D0%BD%D0%B5""
Output string:
""test aaaaaaaa aa""
And no false positive is triggered.




neutralizeSafeEncoding:


Fix false positives due to random string pattern in base64 or hexadecimal strings.


If the full input string represent a known encoding (base64, base64i, hex32, HEX32), all the characters are replaced by a tag describing the escaped encoding, and fill other characters with ""a"".


If none of this known encoding is matched, it returns the original input.


Example:
Input string (containing a random ""SELECT"" word, which trigger SQLi FP):
""Fk2SELECTIUaEGsgww=="" 
Output string:
""b64aaaaaaaaaaaaaaaaa""


And no false positive is triggered.


Related discussions:

#2100
SpiderLabs/owasp-modsecurity-crs#794
SpiderLabs/owasp-modsecurity-crs#1426","Hi guys,
Sometimes, when we protect multiple international websites, we have to accept many UTF8 encoding and we can't have the possibility to set the right UnicodeMapping codepage every time.
With this PR we are proposing to add two transformations to solve and facilitate working with utf8/base64/hex32 entries and limit false positives.


utf8toChar:


Replace all valid UTF8 characters > 0xff by a single ""a"". This transformation doesn't modify ASCII characters.


Replace UTF8 overlong characters, this allows to detect attack escaped by overlong encoding. If the overlong is <= 0xff, it is replaced by the corresponding byte.


If the transformation encounter any invalid UTF8 sequence, it returns the original input.


Example:
Input string (containing a random ""ON"" word, which trigger XSS FP):
""test+%D1%8F%D0%B2%D0%BB%D1%8F%D1%8E%D1%82%D1%81%D1%8F+%D0%BD%D0%B5""
Output string:
""test aaaaaaaa aa""
And no false positive is triggered.




neutralizeSafeEncoding:


Fix false positives due to random string pattern in base64 or hexadecimal strings.


If the full input string represent a known encoding (base64, base64i, hex32, HEX32), all the characters are replaced by a tag describing the escaped encoding, and fill other characters with ""a"".


If none of this known encoding is matched, it returns the original input.


Example:
Input string (containing a random ""SELECT"" word, which trigger SQLi FP):
""Fk2SELECTIUaEGsgww=="" 
Output string:
""b64aaaaaaaaaaaaaaaaa""


And no false positive is triggered.


Related discussions:

#2100
SpiderLabs/owasp-modsecurity-crs#794
SpiderLabs/owasp-modsecurity-crs#1426",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2119,2019-06-13T14:35:23Z,,2019-07-04T15:40:26Z,OPEN,False,13559,14951,16,https://github.com/j0k2r,Adds neutralizeSafeEncoding and utf8toChar transformations to fix utf8/base64/hex32 false positives,7,"['3.x', 'pr available', 'workaround available', 'new feature']",https://github.com/SpiderLabs/ModSecurity/pull/2119,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2119#issuecomment-505959531,"Hi guys,
Sometimes, when we protect multiple international websites, we have to accept many UTF8 encoding and we can't have the possibility to set the right UnicodeMapping codepage every time.
With this PR we are proposing to add two transformations to solve and facilitate working with utf8/base64/hex32 entries and limit false positives.


utf8toChar:


Replace all valid UTF8 characters > 0xff by a single ""a"". This transformation doesn't modify ASCII characters.


Replace UTF8 overlong characters, this allows to detect attack escaped by overlong encoding. If the overlong is <= 0xff, it is replaced by the corresponding byte.


If the transformation encounter any invalid UTF8 sequence, it returns the original input.


Example:
Input string (containing a random ""ON"" word, which trigger XSS FP):
""test+%D1%8F%D0%B2%D0%BB%D1%8F%D1%8E%D1%82%D1%81%D1%8F+%D0%BD%D0%B5""
Output string:
""test aaaaaaaa aa""
And no false positive is triggered.




neutralizeSafeEncoding:


Fix false positives due to random string pattern in base64 or hexadecimal strings.


If the full input string represent a known encoding (base64, base64i, hex32, HEX32), all the characters are replaced by a tag describing the escaped encoding, and fill other characters with ""a"".


If none of this known encoding is matched, it returns the original input.


Example:
Input string (containing a random ""SELECT"" word, which trigger SQLi FP):
""Fk2SELECTIUaEGsgww=="" 
Output string:
""b64aaaaaaaaaaaaaaaaa""


And no false positive is triggered.


Related discussions:

#2100
SpiderLabs/owasp-modsecurity-crs#794
SpiderLabs/owasp-modsecurity-crs#1426","Hi @j0k2r,
Avoid evasion is a tricky job. Having transformation more forgiven may not be a good idea. The rationale about having the Encoding functionality is to have ModSecurity understanding the inputs precisely as they are understood by the end application.
If I analyze the input differently from the web application, it is not exactly meaningful; it could give as two different scenarios: false positives or false negatives. It seems to me that by having the transformations more forgiveness, you are in favor of having more false negatives than false positives. That may be OK in your use case scenario. Not sure, however, if that is what is expected for most of the users.
I prefer to think that the challenge of writing a generic rule set - agnostic to the application, platform or language - is a challenge that should be taken care at the rule set itself; Ideally, we should not reduce the capability of the engine in favor of reducing the false positives. Instead, we could work by improving our rules to cover those specific scenarios better. Does it make sense to you?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2123,2019-06-26T08:44:12Z,2019-06-26T16:05:57Z,2019-06-26T16:05:57Z,CLOSED,False,9,5,2,https://github.com/emphazer,ModSecurity V2 - added missing Geo Countries,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2123,https://github.com/emphazer,1,https://github.com/SpiderLabs/ModSecurity/pull/2123,"Antillas:
Following the reorganization of the political situation on 10 October 2010, Curaçao and Sint Maarten are autonomous countries within the Kingdom of the Netherlands, comparable to Aruba. The islands of Bonaire, Saba and St. Eustatius are special municipalities in the Netherlands, but do not belong to any province. Since then, one generally speaks of the Dutch Caribbean Islands, if one means the six islands together.
BL - BLM - -- Saint Barthélemy
BQ - BES - -- Bonaire, Sint Eustatius and Saba
CW - CUW - -- Curaçao
MF - MAF - -- Saint Martin (French part)
SX - SXM - -- Sint Maarten (Dutch part)

South Sudan:
He gained independence from Sudan on 9 July 2011
SS - SSD - AF South Sudan","Antillas:
Following the reorganization of the political situation on 10 October 2010, Curaçao and Sint Maarten are autonomous countries within the Kingdom of the Netherlands, comparable to Aruba. The islands of Bonaire, Saba and St. Eustatius are special municipalities in the Netherlands, but do not belong to any province. Since then, one generally speaks of the Dutch Caribbean Islands, if one means the six islands together.
BL - BLM - -- Saint Barthélemy
BQ - BES - -- Bonaire, Sint Eustatius and Saba
CW - CUW - -- Curaçao
MF - MAF - -- Saint Martin (French part)
SX - SXM - -- Sint Maarten (Dutch part)

South Sudan:
He gained independence from Sudan on 9 July 2011
SS - SSD - AF South Sudan",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2123,2019-06-26T08:44:12Z,2019-06-26T16:05:57Z,2019-06-26T16:05:57Z,CLOSED,False,9,5,2,https://github.com/emphazer,ModSecurity V2 - added missing Geo Countries,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2123,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2123#issuecomment-505940852,"Antillas:
Following the reorganization of the political situation on 10 October 2010, Curaçao and Sint Maarten are autonomous countries within the Kingdom of the Netherlands, comparable to Aruba. The islands of Bonaire, Saba and St. Eustatius are special municipalities in the Netherlands, but do not belong to any province. Since then, one generally speaks of the Dutch Caribbean Islands, if one means the six islands together.
BL - BLM - -- Saint Barthélemy
BQ - BES - -- Bonaire, Sint Eustatius and Saba
CW - CUW - -- Curaçao
MF - MAF - -- Saint Martin (French part)
SX - SXM - -- Sint Maarten (Dutch part)

South Sudan:
He gained independence from Sudan on 9 July 2011
SS - SSD - AF South Sudan","Hi @emphazer
Thank you for the pull request. Already merged at v2/master.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2130,2019-07-10T15:47:02Z,2019-11-20T18:28:08Z,2019-11-20T18:28:09Z,CLOSED,False,3,3,1,https://github.com/airween,Small fixes in log messages to help debugging the file upload,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2130,https://github.com/airween,1,https://github.com/SpiderLabs/ModSecurity/pull/2130,"This patch contains some small not important but useful fix:

change variable name in Multipart class destructor: the variable holds the m_uploadKeepFiles value, not the opposite
when unlink() (remove temporary files) returns with 0, the message was ""Failed to delete file"", which is wrong
when temporary file was created, not the used create mode showed","This patch contains some small not important but useful fix:

change variable name in Multipart class destructor: the variable holds the m_uploadKeepFiles value, not the opposite
when unlink() (remove temporary files) returns with 0, the message was ""Failed to delete file"", which is wrong
when temporary file was created, not the used create mode showed",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2130,2019-07-10T15:47:02Z,2019-11-20T18:28:08Z,2019-11-20T18:28:09Z,CLOSED,False,3,3,1,https://github.com/airween,Small fixes in log messages to help debugging the file upload,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2130,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2130#issuecomment-555994387,"This patch contains some small not important but useful fix:

change variable name in Multipart class destructor: the variable holds the m_uploadKeepFiles value, not the opposite
when unlink() (remove temporary files) returns with 0, the message was ""Failed to delete file"", which is wrong
when temporary file was created, not the used create mode showed","Hi @airween,
In the comments, you mentioned -

change variable name in Multipart class destructor: the variable holds the m_uploadKeepFiles value, not the opposite

The name of the variable seems to be unchanged. However, there is a message change. That is really what you meant to do?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2130,2019-07-10T15:47:02Z,2019-11-20T18:28:08Z,2019-11-20T18:28:09Z,CLOSED,False,3,3,1,https://github.com/airween,Small fixes in log messages to help debugging the file upload,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2130,https://github.com/airween,3,https://github.com/SpiderLabs/ModSecurity/pull/2130#issuecomment-556054727,"This patch contains some small not important but useful fix:

change variable name in Multipart class destructor: the variable holds the m_uploadKeepFiles value, not the opposite
when unlink() (remove temporary files) returns with 0, the message was ""Failed to delete file"", which is wrong
when temporary file was created, not the used create mode showed","Hi @zimmerle,

The name of the variable seems to be unchanged. However, there is a message change. That is really what you meant to do?

sorry, I wasn't accurate when I wrote the comment. I meant about SecUploadKeepFiles variable, and not for the name but for the meaning of this variable. If this configuration directive is set to On, then the engine will log:
Multipart: Cleanup started (remove files True)
but the IMHO the expected message should:
Multipart: Cleanup started (keep files set to True)
So, the variable name in this context refers to the keep files (see SecUploadKeepFiles), not remove (eg. as SecUploadRemoveFiles).
You're right, I have to change the comment - do you have any idea, what can I write that's more accurate?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2130,2019-07-10T15:47:02Z,2019-11-20T18:28:08Z,2019-11-20T18:28:09Z,CLOSED,False,3,3,1,https://github.com/airween,Small fixes in log messages to help debugging the file upload,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2130,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/2130#issuecomment-556183003,"This patch contains some small not important but useful fix:

change variable name in Multipart class destructor: the variable holds the m_uploadKeepFiles value, not the opposite
when unlink() (remove temporary files) returns with 0, the message was ""Failed to delete file"", which is wrong
when temporary file was created, not the used create mode showed","Thank you @airween. The commit is Ok. The comment that you made here was not accurate, leading the impression that you have forgotten a commit or something similar. Now it is clarified. No need for you to do anything. I will proceed with the merging.",True,{'THUMBS_UP': ['https://github.com/airween']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2130,2019-07-10T15:47:02Z,2019-11-20T18:28:08Z,2019-11-20T18:28:09Z,CLOSED,False,3,3,1,https://github.com/airween,Small fixes in log messages to help debugging the file upload,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2130,https://github.com/zimmerle,5,https://github.com/SpiderLabs/ModSecurity/pull/2130#issuecomment-556212387,"This patch contains some small not important but useful fix:

change variable name in Multipart class destructor: the variable holds the m_uploadKeepFiles value, not the opposite
when unlink() (remove temporary files) returns with 0, the message was ""Failed to delete file"", which is wrong
when temporary file was created, not the used create mode showed",Merged! Thank you!,True,{'HOORAY': ['https://github.com/airween']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2134,2019-07-17T13:50:35Z,,2022-02-28T12:59:52Z,OPEN,False,73,44,3,https://github.com/Nakaner,"Use long long instead of int for comparison, increment, decrement operations and persistent collections",1,"['enhancement', '2.x', 'pr available']",https://github.com/SpiderLabs/ModSecurity/pull/2134,https://github.com/Nakaner,1,https://github.com/SpiderLabs/ModSecurity/pull/2134,"We are using ModSecurity at a download service for large files (hundreds of MB to multiple GB) to manage usage quotas (currently the number of connections per IP address). ModSecurity is able to manage traffic quotas by IP address but this is currently limited to 2^31 bytes because the counters are use the int type only. Using 64 bit integers allows to use ModSecurity to enforce traffic quotas beyond 4 GB.
Support for 64 bit integer is lacking in ModSecurity 3 as well. We run version 2 with Apache and this is basically our patch of the Debian package.","We are using ModSecurity at a download service for large files (hundreds of MB to multiple GB) to manage usage quotas (currently the number of connections per IP address). ModSecurity is able to manage traffic quotas by IP address but this is currently limited to 2^31 bytes because the counters are use the int type only. Using 64 bit integers allows to use ModSecurity to enforce traffic quotas beyond 4 GB.
Support for 64 bit integer is lacking in ModSecurity 3 as well. We run version 2 with Apache and this is basically our patch of the Debian package.",True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2155,2019-08-22T11:29:46Z,2019-10-15T19:30:36Z,2019-10-15T19:30:36Z,MERGED,True,1,1,1,https://github.com/coderpatros,Correct minor README.md typo,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2155,https://github.com/coderpatros,1,https://github.com/SpiderLabs/ModSecurity/pull/2155,together instead of togerher,together instead of togerher,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2155,2019-08-22T11:29:46Z,2019-10-15T19:30:36Z,2019-10-15T19:30:36Z,MERGED,True,1,1,1,https://github.com/coderpatros,Correct minor README.md typo,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2155,https://github.com/csanders-git,2,https://github.com/SpiderLabs/ModSecurity/pull/2155#issuecomment-523962328,together instead of togerher,"Verified, ready to merge senior @zimmerle",True,{'LAUGH': ['https://github.com/airween']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2171,2019-09-26T12:23:24Z,2019-09-30T17:42:04Z,2019-09-30T19:21:10Z,CLOSED,False,1,1,1,https://github.com/airween,Cast the constant to the right type - FIX #2156,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2171,https://github.com/airween,1,https://github.com/SpiderLabs/ModSecurity/pull/2171,A possible solution for #2156.,A possible solution for #2156.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2171,2019-09-26T12:23:24Z,2019-09-30T17:42:04Z,2019-09-30T19:21:10Z,CLOSED,False,1,1,1,https://github.com/airween,Cast the constant to the right type - FIX #2156,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2171,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2171#issuecomment-536670226,A possible solution for #2156.,"Hi @airween, hide the warning is definitely not the solution for the problem.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2171,2019-09-26T12:23:24Z,2019-09-30T17:42:04Z,2019-09-30T19:21:10Z,CLOSED,False,1,1,1,https://github.com/airween,Cast the constant to the right type - FIX #2156,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2171,https://github.com/airween,3,https://github.com/SpiderLabs/ModSecurity/pull/2171#issuecomment-536711918,A possible solution for #2156.,"Hi @zimmerle,
could you explain why is this just hiding of warning?
I made a small test file to demonstrate my idea:
https://gist.github.com/airween/c2f3ff400e4c4a94dcbed9aec6eca48a
Here is my opinion:

the std::string is a sequence with element type char, therefore each item value could be between -127 and 128
consider somehow there is an item with value 160 - see the example line 25.
when the casting comes (line 26-27), then the values converted from unsigned char to signed char, so the 160 will -96
it's same what the static_cast<> does

In the example you can see that's not just the warning hide, it really removes the NBSP from sequence.
May be I'm wrong, but I'm very curious your opinion.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2177,2019-10-02T23:43:17Z,,2022-02-28T13:02:22Z,OPEN,False,19,34,1,https://github.com/argenet,Use local memory pool inside update_rule_target_ex() to reduce memory footprint,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2177,https://github.com/argenet,1,https://github.com/SpiderLabs/ModSecurity/pull/2177,"Description
Previously, calls to msre_generate_target_string() from inside
update_rule_target_ex() would accumulate memory allocations from ruleset
memory pool that is never released. For reasonably large exclusion lists
memory consumption grows exponentially for no good reason.
This fix introduces the use of local memory pool for all intermediate
operations that is destroyed upon completion. This ensures that all
memory reallocations used for building strings are properly released.
Testing
Running Nginx with ModSecurity  no user-defined exclusions:
# ps aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root     32371  0.0  0.2 220044 18408 ?        Ss   09:53   0:00 nginx: master process nginx
www-data 32372  0.6  0.6 542756 51520 ?        Sl   09:53   0:00 nginx: worker process

Running Nginx with ModSecurity in prevention mode, 40 user-defined exclusions of the following type:
SecRuleUpdateTargetById 10001-999999 ""!ARGS:'/^param/',!ARGS_GET:'/^param/',!ARGS_POST:'/^param/'""

before the fix:
# ps aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root     32680  0.3 15.7 1477184 1264004 ?     Ss   09:56   0:00 nginx: master process nginx
www-data 32681  0.3 16.1 1799896 1297096 ?     Sl   09:56   0:00 nginx: worker process

Running Nginx with ModSecurity, 40 user-defined exclusions, after the fix:
# ps aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root      1046  0.0  2.6 425760 212676 ?       Ss   09:58   0:00 nginx: master process nginx
www-data  1047  2.0  3.0 748472 245736 ?       Sl   09:58   0:00 nginx: worker process

Checked that configured exclusions apply, i.e., if an excluded parameter contains a malicious string the request is not blocked.","Description
Previously, calls to msre_generate_target_string() from inside
update_rule_target_ex() would accumulate memory allocations from ruleset
memory pool that is never released. For reasonably large exclusion lists
memory consumption grows exponentially for no good reason.
This fix introduces the use of local memory pool for all intermediate
operations that is destroyed upon completion. This ensures that all
memory reallocations used for building strings are properly released.
Testing
Running Nginx with ModSecurity  no user-defined exclusions:
# ps aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root     32371  0.0  0.2 220044 18408 ?        Ss   09:53   0:00 nginx: master process nginx
www-data 32372  0.6  0.6 542756 51520 ?        Sl   09:53   0:00 nginx: worker process

Running Nginx with ModSecurity in prevention mode, 40 user-defined exclusions of the following type:
SecRuleUpdateTargetById 10001-999999 ""!ARGS:'/^param/',!ARGS_GET:'/^param/',!ARGS_POST:'/^param/'""

before the fix:
# ps aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root     32680  0.3 15.7 1477184 1264004 ?     Ss   09:56   0:00 nginx: master process nginx
www-data 32681  0.3 16.1 1799896 1297096 ?     Sl   09:56   0:00 nginx: worker process

Running Nginx with ModSecurity, 40 user-defined exclusions, after the fix:
# ps aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root      1046  0.0  2.6 425760 212676 ?       Ss   09:58   0:00 nginx: master process nginx
www-data  1047  2.0  3.0 748472 245736 ?       Sl   09:58   0:00 nginx: worker process

Checked that configured exclusions apply, i.e., if an excluded parameter contains a malicious string the request is not blocked.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2179,2019-10-03T17:21:25Z,2019-10-07T11:39:02Z,2019-10-07T11:39:03Z,CLOSED,False,1,1,1,https://github.com/defanator,Avoid using NULL string (match) in Pm::evaluate,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2179,https://github.com/defanator,1,https://github.com/SpiderLabs/ModSecurity/pull/2179,Closes #2178.,Closes #2178.,True,{'THUMBS_UP': ['https://github.com/ei-ke']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2179,2019-10-03T17:21:25Z,2019-10-07T11:39:02Z,2019-10-07T11:39:03Z,CLOSED,False,1,1,1,https://github.com/defanator,Avoid using NULL string (match) in Pm::evaluate,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2179,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2179#issuecomment-538967263,Closes #2178.,Merged! Thank you @defanator.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2189,2019-10-23T13:19:42Z,2019-11-20T12:53:16Z,2020-04-18T08:28:09Z,CLOSED,False,14,3,2,https://github.com/studersi,This commit closes the issue #2033.,1,['2.x - mlogc'],https://github.com/SpiderLabs/ModSecurity/pull/2189,https://github.com/studersi,1,https://github.com/SpiderLabs/ModSecurity/pull/2189,"Added a fix for issue #2033 based on #1353 and 9ac9ff8.
The fix is basically the same as is used for #1353, adding a sanity check after the arguments are parsed. I added the check for ctl:ruleRemoveTargetById as well as ctl:ruleRemoveTargetByMsg.
I'm currently unable to check this in the environment where it first occurred and I currently cannot reproduce the error as it was reported to me.
Note: This change also fixes inconsistent whites pace on the original fix.","Added a fix for issue #2033 based on #1353 and 9ac9ff8.
The fix is basically the same as is used for #1353, adding a sanity check after the arguments are parsed. I added the check for ctl:ruleRemoveTargetById as well as ctl:ruleRemoveTargetByMsg.
I'm currently unable to check this in the environment where it first occurred and I currently cannot reproduce the error as it was reported to me.
Note: This change also fixes inconsistent whites pace on the original fix.",True,{'THUMBS_UP': ['https://github.com/dune73']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2189,2019-10-23T13:19:42Z,2019-11-20T12:53:16Z,2020-04-18T08:28:09Z,CLOSED,False,14,3,2,https://github.com/studersi,This commit closes the issue #2033.,1,['2.x - mlogc'],https://github.com/SpiderLabs/ModSecurity/pull/2189,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2189#issuecomment-555990936,"Added a fix for issue #2033 based on #1353 and 9ac9ff8.
The fix is basically the same as is used for #1353, adding a sanity check after the arguments are parsed. I added the check for ctl:ruleRemoveTargetById as well as ctl:ruleRemoveTargetByMsg.
I'm currently unable to check this in the environment where it first occurred and I currently cannot reproduce the error as it was reported to me.
Note: This change also fixes inconsistent whites pace on the original fix.","Hi @studersi,
Thank you for your contribution. I've changed the commit name to reflect what you have placed on the CHANGELOG.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2189,2019-10-23T13:19:42Z,2019-11-20T12:53:16Z,2020-04-18T08:28:09Z,CLOSED,False,14,3,2,https://github.com/studersi,This commit closes the issue #2033.,1,['2.x - mlogc'],https://github.com/SpiderLabs/ModSecurity/pull/2189,https://github.com/studersi,3,https://github.com/SpiderLabs/ModSecurity/pull/2189#issuecomment-556008559,"Added a fix for issue #2033 based on #1353 and 9ac9ff8.
The fix is basically the same as is used for #1353, adding a sanity check after the arguments are parsed. I added the check for ctl:ruleRemoveTargetById as well as ctl:ruleRemoveTargetByMsg.
I'm currently unable to check this in the environment where it first occurred and I currently cannot reproduce the error as it was reported to me.
Note: This change also fixes inconsistent whites pace on the original fix.","Perfect, thank you!",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2190,2019-10-23T17:52:48Z,2019-10-24T13:06:07Z,2019-10-24T13:06:27Z,CLOSED,False,1,1,1,https://github.com/martinhsv,Fix test issue-1974,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2190,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2190,A small typo that causes the related unit tests to not function correctly.  Note that this change should accompany the related updates to the secrules-language-tests repo.,A small typo that causes the related unit tests to not function correctly.  Note that this change should accompany the related updates to the secrules-language-tests repo.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2190,2019-10-23T17:52:48Z,2019-10-24T13:06:07Z,2019-10-24T13:06:27Z,CLOSED,False,1,1,1,https://github.com/martinhsv,Fix test issue-1974,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2190,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2190#issuecomment-545908569,A small typo that causes the related unit tests to not function correctly.  Note that this change should accompany the related updates to the secrules-language-tests repo.,Merged! thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2191,2019-10-24T21:23:57Z,2019-10-25T12:59:41Z,2019-10-25T13:00:01Z,CLOSED,False,3,1,2,https://github.com/martinhsv,Fix: audit log part for response body for JSON format to be E,5,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2191,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2191,Fix for issue-2066.,Fix for issue-2066.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2191,2019-10-24T21:23:57Z,2019-10-25T12:59:41Z,2019-10-25T13:00:01Z,CLOSED,False,3,1,2,https://github.com/martinhsv,Fix: audit log part for response body for JSON format to be E,5,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2191,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2191#issuecomment-546343662,Fix for issue-2066.,Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2193,2019-10-27T18:40:09Z,2022-01-28T22:15:26Z,2022-01-31T20:57:02Z,CLOSED,False,57,1,3,https://github.com/airween,Fix MULTIPART_UNMATCHED_BOUNDARY FP errors,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2193,https://github.com/airween,1,https://github.com/SpiderLabs/ModSecurity/pull/2193,"There was a bug and a fix (#1747) in libmodsecurity3.
We ran into same problem with v2, so I made this patch, which fixes this bug as same way like in v3.
Hope that you'll allow, and will fix these issues:
#652
#1804
#2021","There was a bug and a fix (#1747) in libmodsecurity3.
We ran into same problem with v2, so I made this patch, which fixes this bug as same way like in v3.
Hope that you'll allow, and will fix these issues:
#652
#1804
#2021",True,"{'THUMBS_UP': ['https://github.com/csanders-git', 'https://github.com/marcstern', 'https://github.com/fzipi']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2193,2019-10-27T18:40:09Z,2022-01-28T22:15:26Z,2022-01-31T20:57:02Z,CLOSED,False,57,1,3,https://github.com/airween,Fix MULTIPART_UNMATCHED_BOUNDARY FP errors,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2193,https://github.com/fzipi,2,https://github.com/SpiderLabs/ModSecurity/pull/2193#issuecomment-633642413,"There was a bug and a fix (#1747) in libmodsecurity3.
We ran into same problem with v2, so I made this patch, which fixes this bug as same way like in v3.
Hope that you'll allow, and will fix these issues:
#652
#1804
#2021","Still having this problem.. and there is a patch available....
Can someone merge this one?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2193,2019-10-27T18:40:09Z,2022-01-28T22:15:26Z,2022-01-31T20:57:02Z,CLOSED,False,57,1,3,https://github.com/airween,Fix MULTIPART_UNMATCHED_BOUNDARY FP errors,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2193,https://github.com/nickcyberpunk,3,https://github.com/SpiderLabs/ModSecurity/pull/2193#issuecomment-870528590,"There was a bug and a fix (#1747) in libmodsecurity3.
We ran into same problem with v2, so I made this patch, which fixes this bug as same way like in v3.
Hope that you'll allow, and will fix these issues:
#652
#1804
#2021","Hi,
is this patch going to be accepted/merged ?
I'm also facing similar issues on modsec.
Thanks",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2193,2019-10-27T18:40:09Z,2022-01-28T22:15:26Z,2022-01-31T20:57:02Z,CLOSED,False,57,1,3,https://github.com/airween,Fix MULTIPART_UNMATCHED_BOUNDARY FP errors,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2193,https://github.com/martinhsv,4,https://github.com/SpiderLabs/ModSecurity/pull/2193#issuecomment-1024692994,"There was a bug and a fix (#1747) in libmodsecurity3.
We ran into same problem with v2, so I made this patch, which fixes this bug as same way like in v3.
Hope that you'll allow, and will fix these issues:
#652
#1804
#2021","I'm going to close this unmerged.
The code here mirrors the v3 implementation where some significant problem have been identified, including:

the functionality removes so many use cases from triggering the flag to equal 1 that it's questionable how useful the check for MULTIPART_UNMATCHED_BOUNDARY still is
while the intention of the implementation was to have a way to avoid signalling that condition when there is legitimate PEM content in one of the parts (i.e. it begins with '--' like a multipart boundary does); this implementation does not do that successfully if the PEM content is in the final of the multipart parts
even if none of the multipart parts has a value beginning with '--', MULTIPART_UNMATCHED_BOUNDARY will incorrectly get set to 2

What really needs to happen with this functionality, is that it should be reviewed again in v3, with either a substantially revised solution implemented, or the '=2' code should be removed entirely. If the former happens, then that solution can be ported to v2.
In the immediate period for v2, likely the best way to handle FPs for PEM data is likely to stop using rule 200004 from modsecurity.conf-recommended for those cases where PEM (or similar) data is expected.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2193,2019-10-27T18:40:09Z,2022-01-28T22:15:26Z,2022-01-31T20:57:02Z,CLOSED,False,57,1,3,https://github.com/airween,Fix MULTIPART_UNMATCHED_BOUNDARY FP errors,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2193,https://github.com/airween,5,https://github.com/SpiderLabs/ModSecurity/pull/2193#issuecomment-1024771367,"There was a bug and a fix (#1747) in libmodsecurity3.
We ran into same problem with v2, so I made this patch, which fixes this bug as same way like in v3.
Hope that you'll allow, and will fix these issues:
#652
#1804
#2021","The code here mirrors the v3 implementation

Yes, because that implementation had allowed after a discussion.

where some significant problem have been identified, including:


* the functionality removes so many use cases from triggering the flag to equal 1 that it's questionable how useful the check for MULTIPART_UNMATCHED_BOUNDARY still is


so many? Can you show me a few ones?

* while the intention of the implementation was to have a way to avoid signalling that condition when there is legitimate PEM content in one of the parts (i.e. it begins with '--' like a multipart boundary does); this implementation does not do that successfully if the PEM content is in the final of the multipart parts


note, that this implementation wasn't created only to avoid the FP of the PEM content. We have ran into several other issues.

* even if **none** of the multipart parts has a value beginning with '--', MULTIPART_UNMATCHED_BOUNDARY will incorrectly get set to 2


Yes, this bug has discovered later - but it is still unmerged.

What really needs to happen with this functionality, is that it should be reviewed again in v3, with either a substantially revised solution implemented, or the '=2' code should be removed entirely. If the former happens, then that solution can be ported to v2.

right. Is there any plan/priority to fix it?

In the immediate period for v2, likely the best way to handle FPs for PEM data is likely to stop using rule 200004 from modsecurity.conf-recommended for those cases where PEM (or similar) data is expected.

as I wrote above, the PEM file was just an example. In many cases we ran into this problem with a regular PDF/JPG...
I'm not sure it's a good idea to remove that rule.
Btw: I think this fix is even better than the current state, and merge would be better than remove the rule 200004.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2193,2019-10-27T18:40:09Z,2022-01-28T22:15:26Z,2022-01-31T20:57:02Z,CLOSED,False,57,1,3,https://github.com/airween,Fix MULTIPART_UNMATCHED_BOUNDARY FP errors,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2193,https://github.com/martinhsv,6,https://github.com/SpiderLabs/ModSecurity/pull/2193#issuecomment-1024924787,"There was a bug and a fix (#1747) in libmodsecurity3.
We ran into same problem with v2, so I made this patch, which fixes this bug as same way like in v3.
Hope that you'll allow, and will fix these issues:
#652
#1804
#2021","Hello @airween ,
Much of this discussion might have been better located in the new issue for 'either a substantially revised solution implemented, or the '=2' code should be removed entirely.', but since I haven't created it yet, I'll respond to your main points here.
[Re: ""...the functionality removes so many use cases from triggering the flag to equal 1...""] ""Can you show me ... ""
Basically, most cases of actual unmatched boundaries no longer result in the flag equal to 1. For example:
-----------------------------423513681827540048931513055996
Content-Disposition: form-data; name=""a""

1
-----------------------------wrong-not-matched
Content-Disposition: form-data; name=""b""

2
-----------------------------423513681827540048931513055996
Content-Disposition: form-data; name=""c""

3
-----------------------------423513681827540048931513055996--

Re: ""... but is still unmerged""
Yes, that's right. And it remains unmerged precisely because it does not address the fundamental design issues with the overall '=2' functionality that I first noted in that item in Oct. 2020.
""Btw: I think this fix is even better than the current state, and merge would be better than remove the rule 200004.""
Even given all of the problems that I have outlined? We could engage further on why you think that's the case but that may be better done in the new issue that I plan to create (as mentioned at the top of this response).
""Is there any plan/priority ... ""
Not yet. Not everything can be a top priority item. Activity on the project can and should be guided by what are deemed by the community to be high priority items. Indeed, such input is part of the reason that #2606 was implemented in an earlier timeframe than otherwise might have been the case. If it is the opinion of the CRS group that coming to some more permanent resolution on this matter is their most important issue, I will, of course, take that into account.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2193,2019-10-27T18:40:09Z,2022-01-28T22:15:26Z,2022-01-31T20:57:02Z,CLOSED,False,57,1,3,https://github.com/airween,Fix MULTIPART_UNMATCHED_BOUNDARY FP errors,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2193,https://github.com/martinhsv,7,https://github.com/SpiderLabs/ModSecurity/pull/2193#issuecomment-1024966996,"There was a bug and a fix (#1747) in libmodsecurity3.
We ran into same problem with v2, so I made this patch, which fixes this bug as same way like in v3.
Hope that you'll allow, and will fix these issues:
#652
#1804
#2021","Btw, in case it is helpful to you, I have created a pull request with additional test cases that demonstrate the failure to set the variable to '1': #2681",True,{'THUMBS_UP': ['https://github.com/airween']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2193,2019-10-27T18:40:09Z,2022-01-28T22:15:26Z,2022-01-31T20:57:02Z,CLOSED,False,57,1,3,https://github.com/airween,Fix MULTIPART_UNMATCHED_BOUNDARY FP errors,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2193,https://github.com/airween,8,https://github.com/SpiderLabs/ModSecurity/pull/2193#issuecomment-1025922879,"There was a bug and a fix (#1747) in libmodsecurity3.
We ran into same problem with v2, so I made this patch, which fixes this bug as same way like in v3.
Hope that you'll allow, and will fix these issues:
#652
#1804
#2021","Hi @martinhsv,
thanks for the answers.

Much of this discussion might have been better located in the new issue for 'either a substantially revised solution implemented, or the '=2' code should be removed entirely.', but since I haven't created it yet, I'll respond to your main points here.

IMHO it's not a good idea to stay back to a wrong state. (Definition of wrong state: see later)


[Re: ""...the functionality removes so many use cases from triggering the flag to equal 1...""] ""Can you show me ... ""

Basically, most cases of actual unmatched boundaries no longer result in the flag equal to 1. For example:

may be we can consider it as philosophical question, but the given example does not contain any unmatched boundaries.

-----------------------------423513681827540048931513055996
Content-Disposition: form-data; name=""a""

1
-----------------------------wrong-not-matched
Content-Disposition: form-data; name=""b""

2
-----------------------------423513681827540048931513055996
Content-Disposition: form-data; name=""c""

3
-----------------------------423513681827540048931513055996--


Consider the request:
-----------------------------423513681827540048931513055996
Content-Disposition: form-data; name=""a""

== My attachment starts here ==
1
-----------------------------wrong-not-matched
Content-Disposition: form-data; name=""b""

2
== My attachment ends here ==
-----------------------------423513681827540048931513055996
Content-Disposition: form-data; name=""c""

3
-----------------------------423513681827540048931513055996--

Do you still consider it as unmatched boundary? (This is why I think the previous state was wrong.)


Re: ""... but is still unmerged""

Yes, that's right. And it remains unmerged precisely because it does not address the fundamental design issues with the overall '=2' functionality that I first noted in that item in Oct. 2020.

Value 2 was a forced solution. I think the definition of unmatched boundaries is still not clear (or wrong). The example above is not that (from my point of view). The correct value in that case should be 0, not 2 (and not 1, of course).


""Btw: I think this fix is even better than the current state, and merge would be better than remove the rule 200004.""

Even given all of the problems that I have outlined? We could engage further on why you think that's the case but that may be better done in the new issue that I plan to create (as mentioned at the top of this response).

I'm afraid our assumptions are different about ""problems"" :).
I can't consider the given example as unmatched boundary. So yes, I think that's a better option.


""Is there any plan/priority ... ""

Not yet. Not everything can be a top priority item.

Okay, it's no problem. But can we postpone the removing of this feature until the new PR is available?

Activity on the project can and should be guided by what are deemed by the community to be high priority items. Indeed, such input is part of the reason that #2606 was implemented in an earlier timeframe than otherwise might have been the case. If it is the opinion of the CRS group that coming to some more permanent resolution on this matter is their most important issue, I will, of course, take that into account.

Thanks for the offer. This means, if somebody send a new PR, you will handle it with priority?
Thanks again.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2193,2019-10-27T18:40:09Z,2022-01-28T22:15:26Z,2022-01-31T20:57:02Z,CLOSED,False,57,1,3,https://github.com/airween,Fix MULTIPART_UNMATCHED_BOUNDARY FP errors,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2193,https://github.com/martinhsv,9,https://github.com/SpiderLabs/ModSecurity/pull/2193#issuecomment-1026159141,"There was a bug and a fix (#1747) in libmodsecurity3.
We ran into same problem with v2, so I made this patch, which fixes this bug as same way like in v3.
Hope that you'll allow, and will fix these issues:
#652
#1804
#2021","Hi @airween ,
In my example, the request body does not violate any RFCs or anything like that. From a standards point of view, everything is legitimate. The line with 'wrong-not-matched' is simply the second line of data for the part with the name 'a'. And the line after that (that begins with 'Content-Disposition') is the third line of the 'a' part, and so on.
However, I say with fairly strong conviction that that pattern is a use cases that was intended to signal MULTIPART_UNMATCHED_BOUNDARY=1 when that functionality was introduced to ModSecurity.
But suppose you're not convinced that I'm correct. Then what cases do you think, should result in MULTIPART_UNMATCHED_BOUNDARY=1 ? I would suggest that knowing an answer to that question would be a requirement before implementing changes.
This relates to your final question. A PR represents an implementation of some functionality. In assessing it one must ask: does it implement the requirements (without breaking anything)? But if we don't know what the requirements are, then it's pretty hard to conclude that a particular code change meets the requirements.
Fundamentally we have this question: Is there any point to anything akin to what MULTIPART_UNMATCHED_BOUNDARY does? Are there any actual web server technologies where boundary-like strings could result in parser inconsistencies, and hence an opportunity for evasion?
It is possible that there were one or more such cases back in 2007 when the MULTIPART_UNMATCHED_BOUNDARY was originally introduced (although even at that time the functionality was noted as being 'Not very reliable'). But perhaps there are no such cases now and perhaps haven't been for more than a decade. If that is indeed the case, we should probably move in the direction of deprecating MULTIPART_UNMATCHED_BOUNDARY. There's no point having functionality that both doesn't do anything useful and requires management to handle FPs.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2193,2019-10-27T18:40:09Z,2022-01-28T22:15:26Z,2022-01-31T20:57:02Z,CLOSED,False,57,1,3,https://github.com/airween,Fix MULTIPART_UNMATCHED_BOUNDARY FP errors,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2193,https://github.com/airween,10,https://github.com/SpiderLabs/ModSecurity/pull/2193#issuecomment-1026201580,"There was a bug and a fix (#1747) in libmodsecurity3.
We ran into same problem with v2, so I made this patch, which fixes this bug as same way like in v3.
Hope that you'll allow, and will fix these issues:
#652
#1804
#2021","hi @martinhsv,

In my example, the request body does not violate any RFCs or anything like that.

I didn't even say the opposite :)

From a standards point of view, everything is legitimate. The line with 'wrong-not-matched' is simply the second line of data for the part with the name 'a'. And the line after that (that begins with 'Content-Disposition') is the third line of the 'a' part, and so on.

yes, that's correct.

But suppose you're not convinced that I'm correct. Then what cases do you think, should result in MULTIPART_UNMATCHED_BOUNDARY=1 ? I would suggest that knowing an answer to that question would be a requirement before implementing changes.

That's a good question, and I have been thinking about this too since your last comment. :)

Fundamentally we have this question: Is there any point to anything akin to what MULTIPART_UNMATCHED_BOUNDARY does?

perhaps no, there isn't.

Are there any actual web server technologies where boundary-like strings could result in parser inconsistencies, and hence an opportunity for evasion?

I'm not sure, but it may need to be researched. I'm afraid it's very dependent on implementation. I mean, there are as many interpretations as there are implementations. ModSecurity has its own - and as we can see, that's not a real good one.

It is possible that there were one or more such cases back in 2007 when the MULTIPART_UNMATCHED_BOUNDARY was originally introduced (although even at that time the functionality was noted as being 'Not very reliable'). But perhaps there are no such cases now and perhaps haven't been for more than a decade. If that is indeed the case, we should probably move in the direction of deprecating MULTIPART_UNMATCHED_BOUNDARY. There's no point having functionality that both doesn't do anything useful and requires management to handle FPs.

Absolutely agree this.
May be the solution will that you have wrote above: make the MULTIPART_UNMATCHED_BOUNDARY variable deprecated. I'm going to make some comparison and research about how webservers handle the MP requests. Let me check that.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2197,2019-11-05T14:26:54Z,2019-11-05T16:08:22Z,2019-11-05T16:08:22Z,CLOSED,False,148,22,6,https://github.com/martinhsv,Fix argument key-value pair parsing cases,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2197,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2197,Corrects the problem identified in issue-1904.,Corrects the problem identified in issue-1904.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2197,2019-11-05T14:26:54Z,2019-11-05T16:08:22Z,2019-11-05T16:08:22Z,CLOSED,False,148,22,6,https://github.com/martinhsv,Fix argument key-value pair parsing cases,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2197,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2197#issuecomment-549890204,Corrects the problem identified in issue-1904.,Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2199,2019-11-07T22:08:25Z,2019-11-20T11:59:59Z,2019-11-20T11:59:59Z,CLOSED,False,3,10,2,https://github.com/martinhsv,Fix nolog rules logging to part H,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2199,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2199,"This change is in a response to issue-2196.  Rules with 'nolog' were incorrectly logging to part H, including for innocent requests.
Note that this change does not address cases where a 1st rule in a chain has nolog but the subsequent rule(s) in the chain do not.  We may follow up with another code change to address that minority situation.","This change is in a response to issue-2196.  Rules with 'nolog' were incorrectly logging to part H, including for innocent requests.
Note that this change does not address cases where a 1st rule in a chain has nolog but the subsequent rule(s) in the chain do not.  We may follow up with another code change to address that minority situation.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2199,2019-11-07T22:08:25Z,2019-11-20T11:59:59Z,2019-11-20T11:59:59Z,CLOSED,False,3,10,2,https://github.com/martinhsv,Fix nolog rules logging to part H,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2199,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2199#issuecomment-555974061,"This change is in a response to issue-2196.  Rules with 'nolog' were incorrectly logging to part H, including for innocent requests.
Note that this change does not address cases where a 1st rule in a chain has nolog but the subsequent rule(s) in the chain do not.  We may follow up with another code change to address that minority situation.",Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2201,2019-11-13T09:45:43Z,2019-11-20T11:47:16Z,2019-11-20T11:47:17Z,CLOSED,False,170,17,3,https://github.com/airween,Replace Cookie parsing method,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2201,https://github.com/airween,1,https://github.com/SpiderLabs/ModSecurity/pull/2201,"This PR fixes three issues in libmodsecurity3:

aligns the cookie parsing for v2: allows the cookie without value, eg Cookie: foo will produces a cookie with name foo; the old method skipped it
processes the whole text after the first =, eg. Cookie: foo=bar=something interesting will produces a cookie with name foo and value bar=something interesting; the old method produced the value only bar
fix the offset calculation for the logfiles","This PR fixes three issues in libmodsecurity3:

aligns the cookie parsing for v2: allows the cookie without value, eg Cookie: foo will produces a cookie with name foo; the old method skipped it
processes the whole text after the first =, eg. Cookie: foo=bar=something interesting will produces a cookie with name foo and value bar=something interesting; the old method produced the value only bar
fix the offset calculation for the logfiles",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2201,2019-11-13T09:45:43Z,2019-11-20T11:47:16Z,2019-11-20T11:47:17Z,CLOSED,False,170,17,3,https://github.com/airween,Replace Cookie parsing method,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2201,https://github.com/airween,2,https://github.com/SpiderLabs/ModSecurity/pull/2201#issuecomment-553324107,"This PR fixes three issues in libmodsecurity3:

aligns the cookie parsing for v2: allows the cookie without value, eg Cookie: foo will produces a cookie with name foo; the old method skipped it
processes the whole text after the first =, eg. Cookie: foo=bar=something interesting will produces a cookie with name foo and value bar=something interesting; the old method produced the value only bar
fix the offset calculation for the logfiles","I made this patch again to fix the cookie parsing issues, and closed the #2023.
Special thanks for the help to @theMiddleBlue and @fgsch.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2201,2019-11-13T09:45:43Z,2019-11-20T11:47:16Z,2019-11-20T11:47:17Z,CLOSED,False,170,17,3,https://github.com/airween,Replace Cookie parsing method,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2201,https://github.com/theMiddleBlue,3,https://github.com/SpiderLabs/ModSecurity/pull/2201#issuecomment-553345349,"This PR fixes three issues in libmodsecurity3:

aligns the cookie parsing for v2: allows the cookie without value, eg Cookie: foo will produces a cookie with name foo; the old method skipped it
processes the whole text after the first =, eg. Cookie: foo=bar=something interesting will produces a cookie with name foo and value bar=something interesting; the old method produced the value only bar
fix the offset calculation for the logfiles","Thanks @airween
Due to the criticality, is it possible to merge this PR as soon as possible and create a new ""v3.0.something"" release?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2201,2019-11-13T09:45:43Z,2019-11-20T11:47:16Z,2019-11-20T11:47:17Z,CLOSED,False,170,17,3,https://github.com/airween,Replace Cookie parsing method,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2201,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/2201#issuecomment-553578809,"This PR fixes three issues in libmodsecurity3:

aligns the cookie parsing for v2: allows the cookie without value, eg Cookie: foo will produces a cookie with name foo; the old method skipped it
processes the whole text after the first =, eg. Cookie: foo=bar=something interesting will produces a cookie with name foo and value bar=something interesting; the old method produced the value only bar
fix the offset calculation for the logfiles","@airween, as you may figure having a commit with the name ""Changed @martinhsv remarks"" in the ModSecurity tree is not elegant. As stated before, please do not pull request changes on your own pull request. Make the fix in your own commit.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2201,2019-11-13T09:45:43Z,2019-11-20T11:47:16Z,2019-11-20T11:47:17Z,CLOSED,False,170,17,3,https://github.com/airween,Replace Cookie parsing method,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2201,https://github.com/zimmerle,5,https://github.com/SpiderLabs/ModSecurity/pull/2201#issuecomment-553581030,"This PR fixes three issues in libmodsecurity3:

aligns the cookie parsing for v2: allows the cookie without value, eg Cookie: foo will produces a cookie with name foo; the old method skipped it
processes the whole text after the first =, eg. Cookie: foo=bar=something interesting will produces a cookie with name foo and value bar=something interesting; the old method produced the value only bar
fix the offset calculation for the logfiles","I understand that this pull request is a continuation of #2023; Since #2023 was on the priority list, I am passing this to the priority list. Wating for the author to continue the review.",True,{'THUMBS_UP': ['https://github.com/dune73']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2201,2019-11-13T09:45:43Z,2019-11-20T11:47:16Z,2019-11-20T11:47:17Z,CLOSED,False,170,17,3,https://github.com/airween,Replace Cookie parsing method,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2201,https://github.com/zimmerle,6,https://github.com/SpiderLabs/ModSecurity/pull/2201#issuecomment-553588016,"This PR fixes three issues in libmodsecurity3:

aligns the cookie parsing for v2: allows the cookie without value, eg Cookie: foo will produces a cookie with name foo; the old method skipped it
processes the whole text after the first =, eg. Cookie: foo=bar=something interesting will produces a cookie with name foo and value bar=something interesting; the old method produced the value only bar
fix the offset calculation for the logfiles",@theMiddleBlue the patch is marked to be part of the effort towards the upcoming release.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2201,2019-11-13T09:45:43Z,2019-11-20T11:47:16Z,2019-11-20T11:47:17Z,CLOSED,False,170,17,3,https://github.com/airween,Replace Cookie parsing method,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2201,https://github.com/theMiddleBlue,7,https://github.com/SpiderLabs/ModSecurity/pull/2201#issuecomment-553597048,"This PR fixes three issues in libmodsecurity3:

aligns the cookie parsing for v2: allows the cookie without value, eg Cookie: foo will produces a cookie with name foo; the old method skipped it
processes the whole text after the first =, eg. Cookie: foo=bar=something interesting will produces a cookie with name foo and value bar=something interesting; the old method produced the value only bar
fix the offset calculation for the logfiles","Thanks @zimmerle, I understand and I really appreciate all efforts. This PR addresses multiple vulnerabilities and one of them really critical. That's why I see the need for a security release, what do you think about? 3.1.0 is going to be released soon? otherwise, I think that all 3.0 users should patch asap.",True,{'THUMBS_UP': ['https://github.com/dune73']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2201,2019-11-13T09:45:43Z,2019-11-20T11:47:16Z,2019-11-20T11:47:17Z,CLOSED,False,170,17,3,https://github.com/airween,Replace Cookie parsing method,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2201,https://github.com/airween,8,https://github.com/SpiderLabs/ModSecurity/pull/2201#issuecomment-553601528,"This PR fixes three issues in libmodsecurity3:

aligns the cookie parsing for v2: allows the cookie without value, eg Cookie: foo will produces a cookie with name foo; the old method skipped it
processes the whole text after the first =, eg. Cookie: foo=bar=something interesting will produces a cookie with name foo and value bar=something interesting; the old method produced the value only bar
fix the offset calculation for the logfiles","hi @zimmerle,

@airween, as you may figure having a commit with the name ""Changed @martinhsv remarks"" in the ModSecurity tree is not elegant.

I'm sorry, I just wanted to keep track of every step what I made. I think it's more clear when I make a separated commit which contains the modification for the suggestions.
Anyway, I revoked the last commit, and added the changes to the previous commit (with amend).
Hope now this will be appropriate.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2201,2019-11-13T09:45:43Z,2019-11-20T11:47:16Z,2019-11-20T11:47:17Z,CLOSED,False,170,17,3,https://github.com/airween,Replace Cookie parsing method,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2201,https://github.com/theMiddleBlue,9,https://github.com/SpiderLabs/ModSecurity/pull/2201#issuecomment-553785000,"This PR fixes three issues in libmodsecurity3:

aligns the cookie parsing for v2: allows the cookie without value, eg Cookie: foo will produces a cookie with name foo; the old method skipped it
processes the whole text after the first =, eg. Cookie: foo=bar=something interesting will produces a cookie with name foo and value bar=something interesting; the old method produced the value only bar
fix the offset calculation for the logfiles","@zimmerle if we can meet in a private slack chat, we can show you why this patch is critical and why we think that a security release should be published. I don't want to share more details in a public PR :)",True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2201,2019-11-13T09:45:43Z,2019-11-20T11:47:16Z,2019-11-20T11:47:17Z,CLOSED,False,170,17,3,https://github.com/airween,Replace Cookie parsing method,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2201,https://github.com/martinhsv,10,https://github.com/SpiderLabs/ModSecurity/pull/2201#issuecomment-554395418,"This PR fixes three issues in libmodsecurity3:

aligns the cookie parsing for v2: allows the cookie without value, eg Cookie: foo will produces a cookie with name foo; the old method skipped it
processes the whole text after the first =, eg. Cookie: foo=bar=something interesting will produces a cookie with name foo and value bar=something interesting; the old method produced the value only bar
fix the offset calculation for the logfiles","Hi @theMiddleBlue,
Just as an FYI, if you have sensitive, security-related concerns, one way to communicate these is to use the method mentioned in https://github.com/SpiderLabs/ModSecurity under the 'Security issue' heading.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2201,2019-11-13T09:45:43Z,2019-11-20T11:47:16Z,2019-11-20T11:47:17Z,CLOSED,False,170,17,3,https://github.com/airween,Replace Cookie parsing method,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2201,https://github.com/theMiddleBlue,11,https://github.com/SpiderLabs/ModSecurity/pull/2201#issuecomment-554432470,"This PR fixes three issues in libmodsecurity3:

aligns the cookie parsing for v2: allows the cookie without value, eg Cookie: foo will produces a cookie with name foo; the old method skipped it
processes the whole text after the first =, eg. Cookie: foo=bar=something interesting will produces a cookie with name foo and value bar=something interesting; the old method produced the value only bar
fix the offset calculation for the logfiles","Hi @martinhsv
I just sent an e-mail with all the details. If you want, and if it helps to accelerate a bit, with @airween we can discuss it on Slack.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2201,2019-11-13T09:45:43Z,2019-11-20T11:47:16Z,2019-11-20T11:47:17Z,CLOSED,False,170,17,3,https://github.com/airween,Replace Cookie parsing method,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2201,https://github.com/zimmerle,12,https://github.com/SpiderLabs/ModSecurity/pull/2201#issuecomment-554994917,"This PR fixes three issues in libmodsecurity3:

aligns the cookie parsing for v2: allows the cookie without value, eg Cookie: foo will produces a cookie with name foo; the old method skipped it
processes the whole text after the first =, eg. Cookie: foo=bar=something interesting will produces a cookie with name foo and value bar=something interesting; the old method produced the value only bar
fix the offset calculation for the logfiles","@zimmerle if we can meet in a private slack chat, we can show you why this patch is critical and why we think that a security release should be published. I don't want to share more details in a public PR :)

Thank you @theMiddleBlue. I saw that you guys are already feeding @martinhsv with information.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2201,2019-11-13T09:45:43Z,2019-11-20T11:47:16Z,2019-11-20T11:47:17Z,CLOSED,False,170,17,3,https://github.com/airween,Replace Cookie parsing method,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2201,https://github.com/zimmerle,13,https://github.com/SpiderLabs/ModSecurity/pull/2201#issuecomment-555969509,"This PR fixes three issues in libmodsecurity3:

aligns the cookie parsing for v2: allows the cookie without value, eg Cookie: foo will produces a cookie with name foo; the old method skipped it
processes the whole text after the first =, eg. Cookie: foo=bar=something interesting will produces a cookie with name foo and value bar=something interesting; the old method produced the value only bar
fix the offset calculation for the logfiles",Closing this on the favor of #2202 --- #2202 includes @airween fixes.,True,{'THUMBS_UP': ['https://github.com/airween']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2202,2019-11-14T16:20:57Z,2019-11-20T12:30:36Z,2020-01-21T19:44:33Z,CLOSED,False,223,17,4,https://github.com/martinhsv,Fix Cookie header parsing issues,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2202,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2202,This pull request includes airween's fixes plus the additional issue identified yesterday,This pull request includes airween's fixes plus the additional issue identified yesterday,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2202,2019-11-14T16:20:57Z,2019-11-20T12:30:36Z,2020-01-21T19:44:33Z,CLOSED,False,223,17,4,https://github.com/martinhsv,Fix Cookie header parsing issues,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2202,https://github.com/airween,2,https://github.com/SpiderLabs/ModSecurity/pull/2202#issuecomment-553988092,This pull request includes airween's fixes plus the additional issue identified yesterday,"Hi @martinhsv, I saw your addition part of transaction.cc, but I don't see the point. I assume you want to remove the trailing spaces, but (may be I'm wrong) I don't understand why do you do that only in case of last cookie?
And I think that method does not have effect if the cookie is like this:
Cookie: foo=bar; baz=foo      ;  
Also note, that the reason why I didn't adopted this feature, that the existing regression tests contains the trim action for the checked variable, so I assume the original intention was to keep the cookie as is, and the rule writer can decide that is it allowed or not.
The leading spaces (in case of all keys) is justifiable from my point, because the modsecurity2 does it, and I tried to align the method like that.
What do you think about it?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2202,2019-11-14T16:20:57Z,2019-11-20T12:30:36Z,2020-01-21T19:44:33Z,CLOSED,False,223,17,4,https://github.com/martinhsv,Fix Cookie header parsing issues,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2202,https://github.com/martinhsv,3,https://github.com/SpiderLabs/ModSecurity/pull/2202#issuecomment-554007618,This pull request includes airween's fixes plus the additional issue identified yesterday,"The reason is this portion of the grammar: 'cookie-header = ""Cookie:"" OWS cookie-string OWS'.
The OWS (optional whitespace) can occur after the last cookie-pair (and not, for example, between 'baz=foo' and ';' as in your example).
You are correct that this extra change is at least somewhat less urgent than a portion of your fix, since a rule writer could manage this by always using t:trim for cookie values.  However, I would argue that that is not the correct approach.  Since the RFC explicitly defines whitespace at the end of the cookie header as not being part of the final value, we should not make it the responsibility of the rule writer to finish the parsing correctly.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2202,2019-11-14T16:20:57Z,2019-11-20T12:30:36Z,2020-01-21T19:44:33Z,CLOSED,False,223,17,4,https://github.com/martinhsv,Fix Cookie header parsing issues,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2202,https://github.com/airween,4,https://github.com/SpiderLabs/ModSecurity/pull/2202#issuecomment-554017224,This pull request includes airween's fixes plus the additional issue identified yesterday,"The reason is this portion of the grammar: 'cookie-header = ""Cookie:"" OWS cookie-string OWS'.

but - in my opinion - then it would be better to place it before the ssplit() method, with argument value. I think it would be more clear for an external viewer.

The OWS (optional whitespace) can occur after the last cookie-pair (and not, for example, between 'baz=foo' and ';' as in your example).

Sure - if you see my previous patch (#2023), then you can see I also reviewed the RFC.
And if you see my example above, you can see the spaces after the last ;. That means if the cookie header looks like that, then the optional whitespaces will remain until the process. But it no matter :).

You are correct that this extra change is at least somewhat less urgent than a portion of your fix, since a rule writer could manage this by always using t:trim for cookie values. However, I would argue that that is not the correct approach. Since the RFC explicitly defines whitespace at the end of the cookie header as not being part of the final value, we should not make it the responsibility of the rule writer to finish the parsing correctly.

Just my 2 cents: I don't want to argue, but would like to discuss. :)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2202,2019-11-14T16:20:57Z,2019-11-20T12:30:36Z,2020-01-21T19:44:33Z,CLOSED,False,223,17,4,https://github.com/martinhsv,Fix Cookie header parsing issues,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2202,https://github.com/martinhsv,5,https://github.com/SpiderLabs/ModSecurity/pull/2202#issuecomment-554022743,This pull request includes airween's fixes plus the additional issue identified yesterday,"Re 'before the ssplit()':  Yes, that was my first impulse.  But, I didn't want to remove the const-ness of value and preferred not to make yet another copy just for this.  (That doesn't mean my choice of implementation is the only correct/reasonable choice, of course.)
And, no worries, such discussion seems entirely reasonable to me.",True,"{'THUMBS_UP': ['https://github.com/airween', 'https://github.com/dune73']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2202,2019-11-14T16:20:57Z,2019-11-20T12:30:36Z,2020-01-21T19:44:33Z,CLOSED,False,223,17,4,https://github.com/martinhsv,Fix Cookie header parsing issues,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2202,https://github.com/dune73,6,https://github.com/SpiderLabs/ModSecurity/pull/2202#issuecomment-554242678,This pull request includes airween's fixes plus the additional issue identified yesterday,"This is a apparently replacing PR #2201 (which looks reasonable to me).
Can you please give us a timeline for the security release fixing these issues in the libModSecurity3 release line?",True,"{'EYES': ['https://github.com/theMiddleBlue', 'https://github.com/airween', 'https://github.com/chaimsanders-okta', 'https://github.com/fzipi', 'https://github.com/zimmerle']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2202,2019-11-14T16:20:57Z,2019-11-20T12:30:36Z,2020-01-21T19:44:33Z,CLOSED,False,223,17,4,https://github.com/martinhsv,Fix Cookie header parsing issues,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2202,https://github.com/zimmerle,7,https://github.com/SpiderLabs/ModSecurity/pull/2202#issuecomment-555983758,This pull request includes airween's fixes plus the additional issue identified yesterday,Merged! Thanks to everybody involved in the issue.,True,{'THUMBS_UP': ['https://github.com/dune73']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2202,2019-11-14T16:20:57Z,2019-11-20T12:30:36Z,2020-01-21T19:44:33Z,CLOSED,False,223,17,4,https://github.com/martinhsv,Fix Cookie header parsing issues,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2202,https://github.com/theMiddleBlue,8,https://github.com/SpiderLabs/ModSecurity/pull/2202#issuecomment-555996614,This pull request includes airween's fixes plus the additional issue identified yesterday,"Thank you all! 🎉 @zimmerle, @martinhsv are you planning to publish a new release version? Just to know if we can inform our users to upgrade.",True,{'EYES': ['https://github.com/dune73']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2202,2019-11-14T16:20:57Z,2019-11-20T12:30:36Z,2020-01-21T19:44:33Z,CLOSED,False,223,17,4,https://github.com/martinhsv,Fix Cookie header parsing issues,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2202,https://github.com/zimmerle,9,https://github.com/SpiderLabs/ModSecurity/pull/2202#issuecomment-556178741,This pull request includes airween's fixes plus the additional issue identified yesterday,"Hi @theMiddleBlue,
You can inform your users to upgrade, the published code on v3/master is passing all the tests. More updates to came. Thank you for your concern.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2202,2019-11-14T16:20:57Z,2019-11-20T12:30:36Z,2020-01-21T19:44:33Z,CLOSED,False,223,17,4,https://github.com/martinhsv,Fix Cookie header parsing issues,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2202,https://github.com/carnil,10,https://github.com/SpiderLabs/ModSecurity/pull/2202#issuecomment-576839200,This pull request includes airween's fixes plus the additional issue identified yesterday,Is CVE-2019-19886 relating to this issue?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2202,2019-11-14T16:20:57Z,2019-11-20T12:30:36Z,2020-01-21T19:44:33Z,CLOSED,False,223,17,4,https://github.com/martinhsv,Fix Cookie header parsing issues,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2202,https://github.com/airween,11,https://github.com/SpiderLabs/ModSecurity/pull/2202#issuecomment-576840856,This pull request includes airween's fixes plus the additional issue identified yesterday,Yes. This is.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2202,2019-11-14T16:20:57Z,2019-11-20T12:30:36Z,2020-01-21T19:44:33Z,CLOSED,False,223,17,4,https://github.com/martinhsv,Fix Cookie header parsing issues,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2202,https://github.com/carnil,12,https://github.com/SpiderLabs/ModSecurity/pull/2202#issuecomment-576848267,This pull request includes airween's fixes plus the additional issue identified yesterday,"@airween, thanks for confirming!",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2203,2019-11-20T21:41:06Z,2019-11-21T19:57:34Z,2019-11-21T19:57:34Z,CLOSED,False,8,4,3,https://github.com/martinhsv,Adjusting rule chain logging; adjusting cookie header parsing,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2203,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2203,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2203,2019-11-20T21:41:06Z,2019-11-21T19:57:34Z,2019-11-21T19:57:34Z,CLOSED,False,8,4,3,https://github.com/martinhsv,Adjusting rule chain logging; adjusting cookie header parsing,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2203,https://github.com/airween,2,https://github.com/SpiderLabs/ModSecurity/pull/2203#issuecomment-556969417,,"Hi @martinhsv,
just my not-so-essential opinion, but the 2fb7eef commit has no effect, because in our last affected commit we remove the unnecessary spaces from begin of all cookie keys.
Instead of this new method, I think it would make more sense to modify the other trim method:
   559              while (!final_cookie_pair.empty() && isspace(final_cookie_pair.back())) {
   560                  final_cookie_pair.pop_back();
   561              }

by this:
   559              while (!final_cookie_pair.empty() && (isspace(final_cookie_pair.back()) || final_cookie_pair.back() == ';')) {
   560                  final_cookie_pair.pop_back();
   561              }

With this we can trim the cookie string like these:
Cookie: foo=bar; baz=foo      // this works now
Cookie: foo=bar; baz=foo     ;     // this would be more useful
Cookie: foo=bar; baz=foo     ; // this could gives back same
Cookie: foo=bar; baz=foo; // same here
What do you think?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2203,2019-11-20T21:41:06Z,2019-11-21T19:57:34Z,2019-11-21T19:57:34Z,CLOSED,False,8,4,3,https://github.com/martinhsv,Adjusting rule chain logging; adjusting cookie header parsing,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2203,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/2203#issuecomment-557042009,,1b4dcdc is now merged and part of v3/master.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2203,2019-11-20T21:41:06Z,2019-11-21T19:57:34Z,2019-11-21T19:57:34Z,CLOSED,False,8,4,3,https://github.com/martinhsv,Adjusting rule chain logging; adjusting cookie header parsing,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2203,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/2203#issuecomment-557247543,,Merged last @martinhsv`s changes. Thank you.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2205,2019-11-23T15:24:08Z,2019-11-26T11:57:40Z,2019-11-26T11:57:41Z,CLOSED,False,12,4,3,https://github.com/kadirerdogan,Fixed inspectFile operator does not pass FILES_TMPNAMES variable to lua engine,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2205,https://github.com/kadirerdogan,1,https://github.com/SpiderLabs/ModSecurity/pull/2205,"Fixes the issues #2204 , #1699, #1700
Tested with inspectFile and exec operators with below rules
SecRule FILES_TMPNAMES ""@inspectFile /usr/local/nginx/scanfile.lua"" ""id:1001,phase:2,t:none,log,auditlog,deny""
  
SecRule REQUEST_METHOD ""@streq POST"" ""id:1002,exec:/usr/local/nginx/luatest.lua""","Fixes the issues #2204 , #1699, #1700
Tested with inspectFile and exec operators with below rules
SecRule FILES_TMPNAMES ""@inspectFile /usr/local/nginx/scanfile.lua"" ""id:1001,phase:2,t:none,log,auditlog,deny""
  
SecRule REQUEST_METHOD ""@streq POST"" ""id:1002,exec:/usr/local/nginx/luatest.lua""",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2205,2019-11-23T15:24:08Z,2019-11-26T11:57:40Z,2019-11-26T11:57:41Z,CLOSED,False,12,4,3,https://github.com/kadirerdogan,Fixed inspectFile operator does not pass FILES_TMPNAMES variable to lua engine,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2205,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2205#issuecomment-558596793,"Fixes the issues #2204 , #1699, #1700
Tested with inspectFile and exec operators with below rules
SecRule FILES_TMPNAMES ""@inspectFile /usr/local/nginx/scanfile.lua"" ""id:1001,phase:2,t:none,log,auditlog,deny""
  
SecRule REQUEST_METHOD ""@streq POST"" ""id:1002,exec:/usr/local/nginx/luatest.lua""",Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2214,2019-12-05T20:58:16Z,2020-02-11T13:42:25Z,2020-10-14T22:03:11Z,CLOSED,False,374,23,3,https://github.com/martinhsv,Multipart Content-Disposition should allow filename* field,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2214,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2214,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2214,2019-12-05T20:58:16Z,2020-02-11T13:42:25Z,2020-10-14T22:03:11Z,CLOSED,False,374,23,3,https://github.com/martinhsv,Multipart Content-Disposition should allow filename* field,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2214,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2214#issuecomment-584639760,,Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2214,2019-12-05T20:58:16Z,2020-02-11T13:42:25Z,2020-10-14T22:03:11Z,CLOSED,False,374,23,3,https://github.com/martinhsv,Multipart Content-Disposition should allow filename* field,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2214,https://github.com/zehric,3,https://github.com/SpiderLabs/ModSecurity/pull/2214#issuecomment-705220798,,@martinhsv Why does filenameStar not get consumed anywhere? As far as I can tell it is only local to the function it is declared in. Should we not populate m_mpp->m_filename with the content of filenameStar at the end? And why is it required that a filename directive be present if the filename* is present?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2214,2019-12-05T20:58:16Z,2020-02-11T13:42:25Z,2020-10-14T22:03:11Z,CLOSED,False,374,23,3,https://github.com/martinhsv,Multipart Content-Disposition should allow filename* field,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2214,https://github.com/martinhsv,4,https://github.com/SpiderLabs/ModSecurity/pull/2214#issuecomment-706238111,,"The primary goal of this change was to address the most immediate problem.  Formerly, the parsing would error-out in a way that was problematic to work around if filename*= were present at all.
The level of support for filename*= can be extended, but even if that is deemed desirable now or in future, the initial implementation was to at least provide meaningful improvement and progress.
Part of the challenge with a more extensive implementation is deciding what to do with a Content-Disposition header that does NOT also have filename= (the RFC that introduced filename*= encourages -- but does not require -- also including filename= in that part's Content-Disposition), e.g.
Content-Disposition: form-data; name=""myname""; filename*=utf-8''03CB16644685216C1E818D1369BB5D4B.png""

In this case, should ModSecurity ideally handle this with the comparable code path as would occur with filename= ?
But it seemed that not all web servers support filename*= (for example nginx would ignore it but not produce an error).
One risk is that:

ModSecurity uses comparable functionality as if it had been filename=
we do not populate collections like ARGS and ARGS_POST with myname
the web server will process the part the same as if neither filename= nor filename*= were present (i.e. as a regular $_POST variable)
an attacker has a way to bypass a rule that is inspecting ARGS or ARGS_POST (because he can add a spurious filename*= knowing that it will be ignored by the web server)

And since both nginx and Apache HTTP Server are the two most common deployments for ModSecurity, and both ignore filename*=, we should be able expect legitimate clients sending to those two web servers to not send filename*= without also sending filename=.
Of course, there are ways to extend the functionality and handle any outstanding concerns.  For example, how to handle the specific use case I outlined above could be supported by a new configuration directive.
However, all things considered, it seemed sensible to proceed with the initial implementation contained in this pull request and then assess future feedback/demand from the community.
I hope that helps.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2214,2019-12-05T20:58:16Z,2020-02-11T13:42:25Z,2020-10-14T22:03:11Z,CLOSED,False,374,23,3,https://github.com/martinhsv,Multipart Content-Disposition should allow filename* field,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2214,https://github.com/zehric,5,https://github.com/SpiderLabs/ModSecurity/pull/2214#issuecomment-708684516,,"Thanks @martinhsv, that does make a lot of sense.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2219,2019-12-12T16:13:56Z,2020-07-17T09:59:45Z,2020-07-17T09:59:45Z,CLOSED,False,3,2,2,https://github.com/marcstern,Accepts JSON without key [Issue #1576],1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2219,https://github.com/marcstern,1,https://github.com/SpiderLabs/ModSecurity/pull/2219,"This accepts a valid JSON request with only a number or a string, nothing else.
Example:
--29000000-B--
POST /test/json/test.html HTTP/1.1
content-type: application/json
Host: test
Content-Length: 2
User-Agent: Mozilla 4.0
Accept: text/html, image/gif, image/jpeg, *; q=.2, /; q=.2
--29000000-C--
25
--29000000-F--","This accepts a valid JSON request with only a number or a string, nothing else.
Example:
--29000000-B--
POST /test/json/test.html HTTP/1.1
content-type: application/json
Host: test
Content-Length: 2
User-Agent: Mozilla 4.0
Accept: text/html, image/gif, image/jpeg, *; q=.2, /; q=.2
--29000000-C--
25
--29000000-F--",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2219,2019-12-12T16:13:56Z,2020-07-17T09:59:45Z,2020-07-17T09:59:45Z,CLOSED,False,3,2,2,https://github.com/marcstern,Accepts JSON without key [Issue #1576],1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2219,https://github.com/marcstern,2,https://github.com/SpiderLabs/ModSecurity/pull/2219#issuecomment-632622842,"This accepts a valid JSON request with only a number or a string, nothing else.
Example:
--29000000-B--
POST /test/json/test.html HTTP/1.1
content-type: application/json
Host: test
Content-Length: 2
User-Agent: Mozilla 4.0
Accept: text/html, image/gif, image/jpeg, *; q=.2, /; q=.2
--29000000-C--
25
--29000000-F--",Anything I can do to have this reviewed/accepted?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2219,2019-12-12T16:13:56Z,2020-07-17T09:59:45Z,2020-07-17T09:59:45Z,CLOSED,False,3,2,2,https://github.com/marcstern,Accepts JSON without key [Issue #1576],1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2219,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/2219#issuecomment-632714419,"This accepts a valid JSON request with only a number or a string, nothing else.
Example:
--29000000-B--
POST /test/json/test.html HTTP/1.1
content-type: application/json
Host: test
Content-Length: 2
User-Agent: Mozilla 4.0
Accept: text/html, image/gif, image/jpeg, *; q=.2, /; q=.2
--29000000-C--
25
--29000000-F--","Sorry for the delay.
That is in the review queue. Other users who fill interest to have this feature could participate on the discussion here. The attention from the community to a certain feature is taken into consideration to prioritize the merge.
Up Front, I can tell that I am missing test cases for this feature. Not mandatory at this point, but, it will help a lot during the review process.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2219,2019-12-12T16:13:56Z,2020-07-17T09:59:45Z,2020-07-17T09:59:45Z,CLOSED,False,3,2,2,https://github.com/marcstern,Accepts JSON without key [Issue #1576],1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2219,https://github.com/marcstern,4,https://github.com/SpiderLabs/ModSecurity/pull/2219#issuecomment-633212359,"This accepts a valid JSON request with only a number or a string, nothing else.
Example:
--29000000-B--
POST /test/json/test.html HTTP/1.1
content-type: application/json
Host: test
Content-Length: 2
User-Agent: Mozilla 4.0
Accept: text/html, image/gif, image/jpeg, *; q=.2, /; q=.2
--29000000-C--
25
--29000000-F--","I cannot find a test for the JSOn parser, as there's for the multipart parser for instance. If there's one, I can add this test case.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2219,2019-12-12T16:13:56Z,2020-07-17T09:59:45Z,2020-07-17T09:59:45Z,CLOSED,False,3,2,2,https://github.com/marcstern,Accepts JSON without key [Issue #1576],1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2219,https://github.com/marcstern,5,https://github.com/SpiderLabs/ModSecurity/pull/2219#issuecomment-660009945,"This accepts a valid JSON request with only a number or a string, nothing else.
Example:
--29000000-B--
POST /test/json/test.html HTTP/1.1
content-type: application/json
Host: test
Content-Length: 2
User-Agent: Mozilla 4.0
Accept: text/html, image/gif, image/jpeg, *; q=.2, /; q=.2
--29000000-C--
25
--29000000-F--","I created a new PR with a test: #2363
I hope it'll be accepted now.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2225,2019-12-19T18:57:47Z,2019-12-26T18:42:49Z,2019-12-26T18:42:49Z,CLOSED,False,8123,4650,375,https://github.com/martinhsv,V3/dev/3.1 experimental,61,[],https://github.com/SpiderLabs/ModSecurity/pull/2225,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2225,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2225,2019-12-19T18:57:47Z,2019-12-26T18:42:49Z,2019-12-26T18:42:49Z,CLOSED,False,8123,4650,375,https://github.com/martinhsv,V3/dev/3.1 experimental,61,[],https://github.com/SpiderLabs/ModSecurity/pull/2225,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2225#issuecomment-569112767,,merged on 3.1-experimental,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2229,2019-12-31T18:33:41Z,2020-01-07T22:24:02Z,2020-01-07T22:24:02Z,CLOSED,False,57,0,4,https://github.com/martinhsv,"Fix: audit log data omitted when nolog,auditlog",1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2229,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2229,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2229,2019-12-31T18:33:41Z,2020-01-07T22:24:02Z,2020-01-07T22:24:02Z,CLOSED,False,57,0,4,https://github.com/martinhsv,"Fix: audit log data omitted when nolog,auditlog",1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2229,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2229#issuecomment-571801113,,Merged thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2234,2020-01-08T23:58:33Z,2020-02-17T12:59:26Z,2020-08-20T13:00:43Z,CLOSED,False,6506,6358,10,https://github.com/martinhsv,Support configurable limit on number of arguments processed,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2234,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2234,"This is basically the same as pull request 2060, but adds automated tests.","This is basically the same as pull request 2060, but adds automated tests.",True,{'THUMBS_UP': ['https://github.com/jleproust']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2234,2020-01-08T23:58:33Z,2020-02-17T12:59:26Z,2020-08-20T13:00:43Z,CLOSED,False,6506,6358,10,https://github.com/martinhsv,Support configurable limit on number of arguments processed,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2234,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2234#issuecomment-584628754,"This is basically the same as pull request 2060, but adds automated tests.",Making reference to #2060,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2234,2020-01-08T23:58:33Z,2020-02-17T12:59:26Z,2020-08-20T13:00:43Z,CLOSED,False,6506,6358,10,https://github.com/martinhsv,Support configurable limit on number of arguments processed,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2234,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/2234#issuecomment-584631666,"This is basically the same as pull request 2060, but adds automated tests.","@jleproust @martinhsv - Since the configuration directive is just arbitrating on the number of JSON parameters, it would be fair to call it SecJSONArgumentsLimit or maybe other name that references the fact that such configuration is related to the JSON implementation?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2234,2020-01-08T23:58:33Z,2020-02-17T12:59:26Z,2020-08-20T13:00:43Z,CLOSED,False,6506,6358,10,https://github.com/martinhsv,Support configurable limit on number of arguments processed,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2234,https://github.com/martinhsv,4,https://github.com/SpiderLabs/ModSecurity/pull/2234#issuecomment-584821383,"This is basically the same as pull request 2060, but adds automated tests.","The code in the pull request will limit the number of Arguments (within m_variableArgs) no matter how the elements are created.  E.g. if you set the configurable value to '5', and send a request like this:
GET /index.html?k1=v1&my_idd=aaa&z=1&y=2&x=3&w=4&aaa=hello HTTP/1.1

... then the argument 'aaa' will get omitted/skipped.
So, SecArgumentsLimit, is the right choice to go with the rest of the code.
(The JSON-specific portion of the pull request is a minor extra bit of functionality to stop json-parsing if the argument limit has been reached.)",True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2234,2020-01-08T23:58:33Z,2020-02-17T12:59:26Z,2020-08-20T13:00:43Z,CLOSED,False,6506,6358,10,https://github.com/martinhsv,Support configurable limit on number of arguments processed,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2234,https://github.com/jleproust,5,https://github.com/SpiderLabs/ModSecurity/pull/2234#issuecomment-585105045,"This is basically the same as pull request 2060, but adds automated tests.",@martinhsv Thanks a lot for adding the test! It would be really great if we could merge this.,True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2234,2020-01-08T23:58:33Z,2020-02-17T12:59:26Z,2020-08-20T13:00:43Z,CLOSED,False,6506,6358,10,https://github.com/martinhsv,Support configurable limit on number of arguments processed,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2234,https://github.com/zimmerle,6,https://github.com/SpiderLabs/ModSecurity/pull/2234#issuecomment-585175422,"This is basically the same as pull request 2060, but adds automated tests.",Thank you guys @martinhsv @jleproust,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2234,2020-01-08T23:58:33Z,2020-02-17T12:59:26Z,2020-08-20T13:00:43Z,CLOSED,False,6506,6358,10,https://github.com/martinhsv,Support configurable limit on number of arguments processed,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2234,https://github.com/zimmerle,7,https://github.com/SpiderLabs/ModSecurity/pull/2234#issuecomment-586303401,"This is basically the same as pull request 2060, but adds automated tests.","Minor update, added: bad5892.
secargumentslimit.json is now part of Makefile.am. Otherwise it won't run on make check.

  
    
      ModSecurity/Makefile.am
    
    
         Line 187
      in
      bad5892
    
  
  
    

        
          
           TESTS+=test/test-cases/regression/secargumentslimit.json 
        
    
  


The new version is on the build bots.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2234,2020-01-08T23:58:33Z,2020-02-17T12:59:26Z,2020-08-20T13:00:43Z,CLOSED,False,6506,6358,10,https://github.com/martinhsv,Support configurable limit on number of arguments processed,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2234,https://github.com/zimmerle,8,https://github.com/SpiderLabs/ModSecurity/pull/2234#issuecomment-586982122,"This is basically the same as pull request 2060, but adds automated tests.",merged!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2234,2020-01-08T23:58:33Z,2020-02-17T12:59:26Z,2020-08-20T13:00:43Z,CLOSED,False,6506,6358,10,https://github.com/martinhsv,Support configurable limit on number of arguments processed,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2234,https://github.com/jleproust,9,https://github.com/SpiderLabs/ModSecurity/pull/2234#issuecomment-588444562,"This is basically the same as pull request 2060, but adds automated tests.",Yay thanks!,True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2234,2020-01-08T23:58:33Z,2020-02-17T12:59:26Z,2020-08-20T13:00:43Z,CLOSED,False,6506,6358,10,https://github.com/martinhsv,Support configurable limit on number of arguments processed,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2234,https://github.com/rdegez,10,https://github.com/SpiderLabs/ModSecurity/pull/2234#issuecomment-645989901,"This is basically the same as pull request 2060, but adds automated tests.","Hi,
I thought this change made it to v3.0.4 like the changelog in https://github.com/SpiderLabs/ModSecurity/blob/v3/master/CHANGES file suggest :
v3.0.4 - 2020-Jan-13
--------------------

 - Support configurable limit on number of arguments processed
   [@jleproust, @martinhsv]
<...>

Except that it didn't :-o
It's in master tree but definitely not in v3.0.4 release :-/
I tried to set SecArgumentsLimit and the directive was unknown.
Then I checked in the code :
~/modsecurity-master$ grep -ri CONFIG_DIR_ARGS_LIMIT * | wc -l
23

~/modsecurity-v3.0.4$ grep -ri CONFIG_DIR_ARGS_LIMIT * | wc -l
0

Am I missing something ?
Regards,",True,{'EYES': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2234,2020-01-08T23:58:33Z,2020-02-17T12:59:26Z,2020-08-20T13:00:43Z,CLOSED,False,6506,6358,10,https://github.com/martinhsv,Support configurable limit on number of arguments processed,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2234,https://github.com/martinhsv,11,https://github.com/SpiderLabs/ModSecurity/pull/2234#issuecomment-646008731,"This is basically the same as pull request 2060, but adds automated tests.","Hi @rdegez ,
You are correct, that code is not in v3.0.4, and the CHANGES file is incorrect.  Thanks for raising that.
I will correct it.",True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2234,2020-01-08T23:58:33Z,2020-02-17T12:59:26Z,2020-08-20T13:00:43Z,CLOSED,False,6506,6358,10,https://github.com/martinhsv,Support configurable limit on number of arguments processed,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2234,https://github.com/martinhsv,12,https://github.com/SpiderLabs/ModSecurity/pull/2234#issuecomment-646056491,"This is basically the same as pull request 2060, but adds automated tests.",The CHANGES file has been corrected.,True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2234,2020-01-08T23:58:33Z,2020-02-17T12:59:26Z,2020-08-20T13:00:43Z,CLOSED,False,6506,6358,10,https://github.com/martinhsv,Support configurable limit on number of arguments processed,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2234,https://github.com/mlosapio,13,https://github.com/SpiderLabs/ModSecurity/pull/2234#issuecomment-676606885,"This is basically the same as pull request 2060, but adds automated tests.","I'm fairly certain this issue is only partially fixed with this patch. I'm happy to reopen an issue or file a new one..
Confirmation the patch works when content-type == json:
time curl -d @test.json https://localhost -k  -H 'Content-Type: application/json'
<html>
<head><title>405 Not Allowed</title></head>
<body>
<center><h1>405 Not Allowed</h1></center>
<hr><center>nginx</center>
</body>
</html>

real    1m31.949s
user    0m0.060s
sys     0m0.074s

Switch the feature on:
sed -i 's/#SecArgumentsLimit 6/SecArgumentsLimit 6/g' /etc/nginx/modsec/modsecurity.conf
systemctl restart nginx
time curl -d @test.json https://localhost -k  -H 'Content-Type: application/json'
<html>
<head><title>400 Bad Request</title></head>
<body>
<center><h1>400 Bad Request</h1></center>
<hr><center>nginx</center>
</body>
</html>

real    0m0.200s
user    0m0.050s
sys     0m0.076s

But if you change the Content-Type to something other than json such as ""application/x-www-form-urlencoded"", the DDoS condition still exists and an nginx thread is consumed.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2234,2020-01-08T23:58:33Z,2020-02-17T12:59:26Z,2020-08-20T13:00:43Z,CLOSED,False,6506,6358,10,https://github.com/martinhsv,Support configurable limit on number of arguments processed,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2234,https://github.com/martinhsv,14,https://github.com/SpiderLabs/ModSecurity/pull/2234#issuecomment-676626136,"This is basically the same as pull request 2060, but adds automated tests.","Hi @mlosapio ,
This configurable limit accomplishes two things:

Overall, it will stop adding key-value pairs to the relevant ModSecurity variables (e.g ARGS) when the configured limit has been reached and
For json content specifically, it will also stop json parsing once the limit has been reached.

The main performance issue being addressed here is the very large number of key-value pairs that might be processed by a large number of regular expressions in any sort of generic rule set (whether OWASP CRS or other).  Change 1 accomplishes that even for non-json content.  See the code changes in transaction.cc.
The second change, that applies only to json content, is a more minor benefit.
I'm fairly sure that Change 1 works correctly for a large set of application/x-www-form-urlencoded args.  And I do recall trying that while reviewing the change back in February.
Nevertheless, if you think the number of arguments added to ARGS (etc.) is not being limited for non-json content, feel free to submit a pull request, or otherwise outline what you think is going wrong.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2235,2020-01-10T13:26:08Z,2020-02-04T14:06:13Z,2020-02-04T14:06:13Z,CLOSED,False,2,2,1,https://github.com/frankvanbever,Configure script issues when packaging for Buildroot,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2235,https://github.com/frankvanbever,1,https://github.com/SpiderLabs/ModSecurity/pull/2235,"I encountered these issues while packaging libmodsecurity for Buildroot.
Buildroot can be compiled for uClinux targetting ARM Cortex-M4 processors. The build for this platform fails due to the configure script not recognizing the platform arm-buildroot-uclinux-uclibcgnueabi.
Another minor issue is that the configure script returns 0 even though no Makefile was generated. Returning a non-zero value causes the build to fail in the configure step instead of the make step.","I encountered these issues while packaging libmodsecurity for Buildroot.
Buildroot can be compiled for uClinux targetting ARM Cortex-M4 processors. The build for this platform fails due to the configure script not recognizing the platform arm-buildroot-uclinux-uclibcgnueabi.
Another minor issue is that the configure script returns 0 even though no Makefile was generated. Returning a non-zero value causes the build to fail in the configure step instead of the make step.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2235,2020-01-10T13:26:08Z,2020-02-04T14:06:13Z,2020-02-04T14:06:13Z,CLOSED,False,2,2,1,https://github.com/frankvanbever,Configure script issues when packaging for Buildroot,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2235,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2235#issuecomment-573043530,"I encountered these issues while packaging libmodsecurity for Buildroot.
Buildroot can be compiled for uClinux targetting ARM Cortex-M4 processors. The build for this platform fails due to the configure script not recognizing the platform arm-buildroot-uclinux-uclibcgnueabi.
Another minor issue is that the configure script returns 0 even though no Makefile was generated. Returning a non-zero value causes the build to fail in the configure step instead of the make step.","Hi @frankvanbever,
Thank you for the pull request. I'll have a look at it.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2235,2020-01-10T13:26:08Z,2020-02-04T14:06:13Z,2020-02-04T14:06:13Z,CLOSED,False,2,2,1,https://github.com/frankvanbever,Configure script issues when packaging for Buildroot,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2235,https://github.com/frankvanbever,3,https://github.com/SpiderLabs/ModSecurity/pull/2235#issuecomment-573048636,"I encountered these issues while packaging libmodsecurity for Buildroot.
Buildroot can be compiled for uClinux targetting ARM Cortex-M4 processors. The build for this platform fails due to the configure script not recognizing the platform arm-buildroot-uclinux-uclibcgnueabi.
Another minor issue is that the configure script returns 0 even though no Makefile was generated. Returning a non-zero value causes the build to fail in the configure step instead of the make step.","Thanks @zimmerle
For reference libmodsecurity and nginx-modsecurity have been submitted to Buildroot here:
http://patchwork.ozlabs.org/patch/1221103/
http://patchwork.ozlabs.org/patch/1221102/",True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2235,2020-01-10T13:26:08Z,2020-02-04T14:06:13Z,2020-02-04T14:06:13Z,CLOSED,False,2,2,1,https://github.com/frankvanbever,Configure script issues when packaging for Buildroot,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2235,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/2235#issuecomment-581924987,"I encountered these issues while packaging libmodsecurity for Buildroot.
Buildroot can be compiled for uClinux targetting ARM Cortex-M4 processors. The build for this platform fails due to the configure script not recognizing the platform arm-buildroot-uclinux-uclibcgnueabi.
Another minor issue is that the configure script returns 0 even though no Makefile was generated. Returning a non-zero value causes the build to fail in the configure step instead of the make step.",Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2236,2020-01-11T04:16:37Z,2021-12-29T15:04:35Z,2021-12-29T15:04:36Z,CLOSED,False,6,4,1,https://github.com/argenet,Fix memory leak that occurs on JSON parsing error,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2236,https://github.com/argenet,1,https://github.com/SpiderLabs/ModSecurity/pull/2236,"ModSecurity uses a dynamically allocated error message when JSON parsing
fails but never releases it properly.
Signed-off-by: Vladimir Krivopalov vlkrivop@microsoft.com","ModSecurity uses a dynamically allocated error message when JSON parsing
fails but never releases it properly.
Signed-off-by: Vladimir Krivopalov vlkrivop@microsoft.com",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2236,2020-01-11T04:16:37Z,2021-12-29T15:04:35Z,2021-12-29T15:04:36Z,CLOSED,False,6,4,1,https://github.com/argenet,Fix memory leak that occurs on JSON parsing error,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2236,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2236#issuecomment-581922849,"ModSecurity uses a dynamically allocated error message when JSON parsing
fails but never releases it properly.
Signed-off-by: Vladimir Krivopalov vlkrivop@microsoft.com",Thank you for the contribution @argenet.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2236,2020-01-11T04:16:37Z,2021-12-29T15:04:35Z,2021-12-29T15:04:36Z,CLOSED,False,6,4,1,https://github.com/argenet,Fix memory leak that occurs on JSON parsing error,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2236,https://github.com/marcstern,3,https://github.com/SpiderLabs/ModSecurity/pull/2236#issuecomment-660014418,"ModSecurity uses a dynamically allocated error message when JSON parsing
fails but never releases it properly.
Signed-off-by: Vladimir Krivopalov vlkrivop@microsoft.com",We're using this in prod from Feb. in dozens of environments,True,"{'THUMBS_UP': ['https://github.com/jeremyjpj0916'], 'EYES': ['https://github.com/jeremyjpj0916']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2236,2020-01-11T04:16:37Z,2021-12-29T15:04:35Z,2021-12-29T15:04:36Z,CLOSED,False,6,4,1,https://github.com/argenet,Fix memory leak that occurs on JSON parsing error,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2236,https://github.com/vloup,4,https://github.com/SpiderLabs/ModSecurity/pull/2236#issuecomment-981653010,"ModSecurity uses a dynamically allocated error message when JSON parsing
fails but never releases it properly.
Signed-off-by: Vladimir Krivopalov vlkrivop@microsoft.com","This PR cannot get merged since release v2.9.5.
This is my suggested rebase:
diff --git a/apache2/msc_json.c b/apache2/msc_json.c
index d69e9eb7..7d76dc05 100644
--- a/apache2/msc_json.c
+++ b/apache2/msc_json.c
@@ -355,7 +355,9 @@ int json_process_chunk(modsec_rec *msr, const char *buf, unsigned int size, char
        if (msr->json->depth_limit_exceeded) {
            *error_msg = ""JSON depth limit exceeded"";
        } else {
-           *error_msg = yajl_get_error(msr->json->handle, 0, NULL, 0);
+           char *yajl_err = yajl_get_error(msr->json->handle, 0, buf, size);
+           *error_msg = apr_pstrdup(msr->mp, yajl_err);
+           yajl_free_error(msr->json->handle, yajl_err);
        }
         return -1;
     }
@@ -379,7 +381,9 @@ int json_complete(modsec_rec *msr, char **error_msg) {
        if (msr->json->depth_limit_exceeded) {
            *error_msg = ""JSON depth limit exceeded"";
        } else {
-           *error_msg = yajl_get_error(msr->json->handle, 0, NULL, 0);
+           char *yajl_err = yajl_get_error(msr->json->handle, 0, NULL, 0);
+           *error_msg = apr_pstrdup(msr->mp, yajl_err);
+           yajl_free_error(msr->json->handle, yajl_err);
        }
 
         return -1;

What do you think @argenet ?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2236,2020-01-11T04:16:37Z,2021-12-29T15:04:35Z,2021-12-29T15:04:36Z,CLOSED,False,6,4,1,https://github.com/argenet,Fix memory leak that occurs on JSON parsing error,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2236,https://github.com/martinhsv,5,https://github.com/SpiderLabs/ModSecurity/pull/2236#issuecomment-1002637964,"ModSecurity uses a dynamically allocated error message when JSON parsing
fails but never releases it properly.
Signed-off-by: Vladimir Krivopalov vlkrivop@microsoft.com","Replaced by equivalent #2663 and merged.
Thanks all.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2239,2020-01-14T19:21:05Z,,2022-02-28T13:04:28Z,OPEN,False,7,0,1,https://github.com/argenet,Properly cleanup XML parser contexts upon completion,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2239,https://github.com/argenet,1,https://github.com/SpiderLabs/ModSecurity/pull/2239,"Description
It is currently possible that the XML parsing context is not properly
cleaned up if a parsed XML document is malformed.
This fix makes sure that the context is taken care of.
Testing

Create a file books_bad.xml with malformed XML:
<?xml version=""1.0""?> <catalog> <book id=""bk101""> <author>Gambardella, Matthew</author> <title>XML Developer's Guide</title> <genre>Computer</genre> <price>44.95</price> <publish_date>2000-10-01</publish_date> <description>An in-depth look at creating applications with XML.</description> </book> <book id=""bk102""> <author>Ralls, Kim</author> <title>Midnight Rain</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2000-12-16</publish_date> <description>A former architect battles corporate zombies, an evil sorceress, and her own childhood to become queen of the world.</description> </book> <book id=""bk103""> <author>Corets, Eva</author> <title>Maeve Ascendant</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2000-11-17</publish_date> <description>After the collapse of a nanotechnology society in England, the young survivors lay the foundation for a new society.</description> </book> <book id=""bk104""> <author>Corets, Eva</author> <title>Oberon's Legacy</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2001-03-10</publish_date> <description>In post-apocalypse England, the mysterious agent known only as Oberon helps to create a new life for the inhabitants of London. Sequel to Maeve Ascendant.</description> </book> <book id=""bk105""> <author>Corets, Eva</author> <title>The Sundered Grail</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2001-09-10</publish_date> <description>The two daughters of Maeve, half-sisters, battle one another for control of England. Sequel to Oberon's Legacy.</description> </book> <book id=""bk106""> <author>Randall, Cynthia</author> <title>Lover Birds</title> <genre>Romance</genre> <price>4.95</price> <publish_date>2000-09-02</publish_date> <description>When Carla meets Paul at an ornithology conference, tempers fly as feathers get ruffled.</description> </book> <book id=""bk107""> <author>Thurman, Paula</author> <title>Splish Splash</title> <genre>Romance</genre> <price>4.95</price> <publish_date>2000-11-02</publish_date> <description>A deep sea diver finds true love twenty thousand leagues beneath the sea.</description> </book> <book id=""bk108""> <author>Knorr, Stefan</author> <title>Creepy Crawlies</title> <genre>Horror</genre> <price>4.95</price> <publish_date>2000-12-06</publish_date> <description>An anthology of horror stories about roaches, centipedes, scorpions and other insects.</description> </book> <book id=""bk109""> <author>Kress, Peter</author> <title>Paradox Lost</title> <genre>Science Fiction</genre> <price>6.95</price> <publish_date>2000-11-02</publish_date> <description>After an inadvertant trip through a Heisenberg Uncertainty Device, James Salway discovers the problems of being quantum.</description> </book> <book id=""bk110""> <author>O'Brien, Tim</author> <title>Microsoft .NET: The Programming Bible</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-09</publish_date> <description>Microsoft's .NET initiative is explored in detail in this deep programmer's reference.</description> </book> <book id=""bk111""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk112""> <author>Galos, Mike</author> <title>Visual Studio 7: A Comprehensive Guide</title> <genre>Computer</genre> <price>49.95</price> <publish_date>2001-04-16</publish_date> <description>Microsoft Visual Studio 7 is explored in depth, looking at how Visual Basic, Visual C++, C#, and ASP+ are integrated into a comprehensive development environment. <book id=""bk113""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk114""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk115""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk116""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk117""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk118""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk119""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk120""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk121""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk122""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk123""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> </catalog>

(The closing tag is missing for the element with id bk112)

Run Nginx with ModSecurity under Valgrind, e.g.:

valgrind --leak-check=full --trace-children=yes --track-origins=yes -v --log-file=/tmp/valg.log nginx


Send request with the file as a body:

curl -X POST --header ""Content-Type: text/xml"" --data-binary @books_bad.xml ""http://localhost/""


Stop Nginx and observe Valgrind log.

Before the fix, it contains the following info on leaked blocks:
10878 ==18047== 91,783 (752 direct, 91,031 indirect) bytes in 1 blocks are definitely lost in loss record 750 of 754                              
10879 ==18047==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
10880 ==18047==    by 0x5DC397E: xmlNewParserCtxt (in /usr/lib/x86_64-linux-gnu/libxml2.so.2.9.3)
10881 ==18047==    by 0x5DD8CF9: xmlCreatePushParserCtxt (in /usr/lib/x86_64-linux-gnu/libxml2.so.2.9.3)
10882 ==18047==    by 0x63F932: xml_process_chunk (msc_xml.c:87)
10883 ==18047==    by 0x63A772: modsecurity_request_body_store (msc_reqbody.c:355)
10884 ==18047==    by 0x665E72: read_request_body (apache2_io.c:298) 
10885 ==18047==    by 0x62E986: hook_request_late (mod_security2.c:1042)
10886 ==18047==    by 0x627570: modsecProcessRequestBody (api.c:470)
10887 ==18047==    by 0x5ED402: ngx_http_modsecurity_prevention_thread_func (ngx_http_modsecurity.c:690)
10888 ==18047==    by 0x51B55A: ngx_thread_pool_cycle (ngx_thread_pool.c:342)
10889 ==18047==    by 0x50456B9: start_thread (pthread_create.c:333)
10890 ==18047==    by 0x782F41C: clone (clone.S:109)

After the fix, this log disappears.","Description
It is currently possible that the XML parsing context is not properly
cleaned up if a parsed XML document is malformed.
This fix makes sure that the context is taken care of.
Testing

Create a file books_bad.xml with malformed XML:
<?xml version=""1.0""?> <catalog> <book id=""bk101""> <author>Gambardella, Matthew</author> <title>XML Developer's Guide</title> <genre>Computer</genre> <price>44.95</price> <publish_date>2000-10-01</publish_date> <description>An in-depth look at creating applications with XML.</description> </book> <book id=""bk102""> <author>Ralls, Kim</author> <title>Midnight Rain</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2000-12-16</publish_date> <description>A former architect battles corporate zombies, an evil sorceress, and her own childhood to become queen of the world.</description> </book> <book id=""bk103""> <author>Corets, Eva</author> <title>Maeve Ascendant</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2000-11-17</publish_date> <description>After the collapse of a nanotechnology society in England, the young survivors lay the foundation for a new society.</description> </book> <book id=""bk104""> <author>Corets, Eva</author> <title>Oberon's Legacy</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2001-03-10</publish_date> <description>In post-apocalypse England, the mysterious agent known only as Oberon helps to create a new life for the inhabitants of London. Sequel to Maeve Ascendant.</description> </book> <book id=""bk105""> <author>Corets, Eva</author> <title>The Sundered Grail</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2001-09-10</publish_date> <description>The two daughters of Maeve, half-sisters, battle one another for control of England. Sequel to Oberon's Legacy.</description> </book> <book id=""bk106""> <author>Randall, Cynthia</author> <title>Lover Birds</title> <genre>Romance</genre> <price>4.95</price> <publish_date>2000-09-02</publish_date> <description>When Carla meets Paul at an ornithology conference, tempers fly as feathers get ruffled.</description> </book> <book id=""bk107""> <author>Thurman, Paula</author> <title>Splish Splash</title> <genre>Romance</genre> <price>4.95</price> <publish_date>2000-11-02</publish_date> <description>A deep sea diver finds true love twenty thousand leagues beneath the sea.</description> </book> <book id=""bk108""> <author>Knorr, Stefan</author> <title>Creepy Crawlies</title> <genre>Horror</genre> <price>4.95</price> <publish_date>2000-12-06</publish_date> <description>An anthology of horror stories about roaches, centipedes, scorpions and other insects.</description> </book> <book id=""bk109""> <author>Kress, Peter</author> <title>Paradox Lost</title> <genre>Science Fiction</genre> <price>6.95</price> <publish_date>2000-11-02</publish_date> <description>After an inadvertant trip through a Heisenberg Uncertainty Device, James Salway discovers the problems of being quantum.</description> </book> <book id=""bk110""> <author>O'Brien, Tim</author> <title>Microsoft .NET: The Programming Bible</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-09</publish_date> <description>Microsoft's .NET initiative is explored in detail in this deep programmer's reference.</description> </book> <book id=""bk111""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk112""> <author>Galos, Mike</author> <title>Visual Studio 7: A Comprehensive Guide</title> <genre>Computer</genre> <price>49.95</price> <publish_date>2001-04-16</publish_date> <description>Microsoft Visual Studio 7 is explored in depth, looking at how Visual Basic, Visual C++, C#, and ASP+ are integrated into a comprehensive development environment. <book id=""bk113""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk114""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk115""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk116""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk117""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk118""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk119""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk120""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk121""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk122""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk123""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> </catalog>

(The closing tag is missing for the element with id bk112)

Run Nginx with ModSecurity under Valgrind, e.g.:

valgrind --leak-check=full --trace-children=yes --track-origins=yes -v --log-file=/tmp/valg.log nginx


Send request with the file as a body:

curl -X POST --header ""Content-Type: text/xml"" --data-binary @books_bad.xml ""http://localhost/""


Stop Nginx and observe Valgrind log.

Before the fix, it contains the following info on leaked blocks:
10878 ==18047== 91,783 (752 direct, 91,031 indirect) bytes in 1 blocks are definitely lost in loss record 750 of 754                              
10879 ==18047==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
10880 ==18047==    by 0x5DC397E: xmlNewParserCtxt (in /usr/lib/x86_64-linux-gnu/libxml2.so.2.9.3)
10881 ==18047==    by 0x5DD8CF9: xmlCreatePushParserCtxt (in /usr/lib/x86_64-linux-gnu/libxml2.so.2.9.3)
10882 ==18047==    by 0x63F932: xml_process_chunk (msc_xml.c:87)
10883 ==18047==    by 0x63A772: modsecurity_request_body_store (msc_reqbody.c:355)
10884 ==18047==    by 0x665E72: read_request_body (apache2_io.c:298) 
10885 ==18047==    by 0x62E986: hook_request_late (mod_security2.c:1042)
10886 ==18047==    by 0x627570: modsecProcessRequestBody (api.c:470)
10887 ==18047==    by 0x5ED402: ngx_http_modsecurity_prevention_thread_func (ngx_http_modsecurity.c:690)
10888 ==18047==    by 0x51B55A: ngx_thread_pool_cycle (ngx_thread_pool.c:342)
10889 ==18047==    by 0x50456B9: start_thread (pthread_create.c:333)
10890 ==18047==    by 0x782F41C: clone (clone.S:109)

After the fix, this log disappears.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2239,2020-01-14T19:21:05Z,,2022-02-28T13:04:28Z,OPEN,False,7,0,1,https://github.com/argenet,Properly cleanup XML parser contexts upon completion,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2239,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2239#issuecomment-581922632,"Description
It is currently possible that the XML parsing context is not properly
cleaned up if a parsed XML document is malformed.
This fix makes sure that the context is taken care of.
Testing

Create a file books_bad.xml with malformed XML:
<?xml version=""1.0""?> <catalog> <book id=""bk101""> <author>Gambardella, Matthew</author> <title>XML Developer's Guide</title> <genre>Computer</genre> <price>44.95</price> <publish_date>2000-10-01</publish_date> <description>An in-depth look at creating applications with XML.</description> </book> <book id=""bk102""> <author>Ralls, Kim</author> <title>Midnight Rain</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2000-12-16</publish_date> <description>A former architect battles corporate zombies, an evil sorceress, and her own childhood to become queen of the world.</description> </book> <book id=""bk103""> <author>Corets, Eva</author> <title>Maeve Ascendant</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2000-11-17</publish_date> <description>After the collapse of a nanotechnology society in England, the young survivors lay the foundation for a new society.</description> </book> <book id=""bk104""> <author>Corets, Eva</author> <title>Oberon's Legacy</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2001-03-10</publish_date> <description>In post-apocalypse England, the mysterious agent known only as Oberon helps to create a new life for the inhabitants of London. Sequel to Maeve Ascendant.</description> </book> <book id=""bk105""> <author>Corets, Eva</author> <title>The Sundered Grail</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2001-09-10</publish_date> <description>The two daughters of Maeve, half-sisters, battle one another for control of England. Sequel to Oberon's Legacy.</description> </book> <book id=""bk106""> <author>Randall, Cynthia</author> <title>Lover Birds</title> <genre>Romance</genre> <price>4.95</price> <publish_date>2000-09-02</publish_date> <description>When Carla meets Paul at an ornithology conference, tempers fly as feathers get ruffled.</description> </book> <book id=""bk107""> <author>Thurman, Paula</author> <title>Splish Splash</title> <genre>Romance</genre> <price>4.95</price> <publish_date>2000-11-02</publish_date> <description>A deep sea diver finds true love twenty thousand leagues beneath the sea.</description> </book> <book id=""bk108""> <author>Knorr, Stefan</author> <title>Creepy Crawlies</title> <genre>Horror</genre> <price>4.95</price> <publish_date>2000-12-06</publish_date> <description>An anthology of horror stories about roaches, centipedes, scorpions and other insects.</description> </book> <book id=""bk109""> <author>Kress, Peter</author> <title>Paradox Lost</title> <genre>Science Fiction</genre> <price>6.95</price> <publish_date>2000-11-02</publish_date> <description>After an inadvertant trip through a Heisenberg Uncertainty Device, James Salway discovers the problems of being quantum.</description> </book> <book id=""bk110""> <author>O'Brien, Tim</author> <title>Microsoft .NET: The Programming Bible</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-09</publish_date> <description>Microsoft's .NET initiative is explored in detail in this deep programmer's reference.</description> </book> <book id=""bk111""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk112""> <author>Galos, Mike</author> <title>Visual Studio 7: A Comprehensive Guide</title> <genre>Computer</genre> <price>49.95</price> <publish_date>2001-04-16</publish_date> <description>Microsoft Visual Studio 7 is explored in depth, looking at how Visual Basic, Visual C++, C#, and ASP+ are integrated into a comprehensive development environment. <book id=""bk113""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk114""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk115""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk116""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk117""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk118""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk119""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk120""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk121""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk122""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk123""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> </catalog>

(The closing tag is missing for the element with id bk112)

Run Nginx with ModSecurity under Valgrind, e.g.:

valgrind --leak-check=full --trace-children=yes --track-origins=yes -v --log-file=/tmp/valg.log nginx


Send request with the file as a body:

curl -X POST --header ""Content-Type: text/xml"" --data-binary @books_bad.xml ""http://localhost/""


Stop Nginx and observe Valgrind log.

Before the fix, it contains the following info on leaked blocks:
10878 ==18047== 91,783 (752 direct, 91,031 indirect) bytes in 1 blocks are definitely lost in loss record 750 of 754                              
10879 ==18047==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
10880 ==18047==    by 0x5DC397E: xmlNewParserCtxt (in /usr/lib/x86_64-linux-gnu/libxml2.so.2.9.3)
10881 ==18047==    by 0x5DD8CF9: xmlCreatePushParserCtxt (in /usr/lib/x86_64-linux-gnu/libxml2.so.2.9.3)
10882 ==18047==    by 0x63F932: xml_process_chunk (msc_xml.c:87)
10883 ==18047==    by 0x63A772: modsecurity_request_body_store (msc_reqbody.c:355)
10884 ==18047==    by 0x665E72: read_request_body (apache2_io.c:298) 
10885 ==18047==    by 0x62E986: hook_request_late (mod_security2.c:1042)
10886 ==18047==    by 0x627570: modsecProcessRequestBody (api.c:470)
10887 ==18047==    by 0x5ED402: ngx_http_modsecurity_prevention_thread_func (ngx_http_modsecurity.c:690)
10888 ==18047==    by 0x51B55A: ngx_thread_pool_cycle (ngx_thread_pool.c:342)
10889 ==18047==    by 0x50456B9: start_thread (pthread_create.c:333)
10890 ==18047==    by 0x782F41C: clone (clone.S:109)

After the fix, this log disappears.",Thank you for the contribution @argenet.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2239,2020-01-14T19:21:05Z,,2022-02-28T13:04:28Z,OPEN,False,7,0,1,https://github.com/argenet,Properly cleanup XML parser contexts upon completion,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2239,https://github.com/marcstern,3,https://github.com/SpiderLabs/ModSecurity/pull/2239#issuecomment-660014060,"Description
It is currently possible that the XML parsing context is not properly
cleaned up if a parsed XML document is malformed.
This fix makes sure that the context is taken care of.
Testing

Create a file books_bad.xml with malformed XML:
<?xml version=""1.0""?> <catalog> <book id=""bk101""> <author>Gambardella, Matthew</author> <title>XML Developer's Guide</title> <genre>Computer</genre> <price>44.95</price> <publish_date>2000-10-01</publish_date> <description>An in-depth look at creating applications with XML.</description> </book> <book id=""bk102""> <author>Ralls, Kim</author> <title>Midnight Rain</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2000-12-16</publish_date> <description>A former architect battles corporate zombies, an evil sorceress, and her own childhood to become queen of the world.</description> </book> <book id=""bk103""> <author>Corets, Eva</author> <title>Maeve Ascendant</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2000-11-17</publish_date> <description>After the collapse of a nanotechnology society in England, the young survivors lay the foundation for a new society.</description> </book> <book id=""bk104""> <author>Corets, Eva</author> <title>Oberon's Legacy</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2001-03-10</publish_date> <description>In post-apocalypse England, the mysterious agent known only as Oberon helps to create a new life for the inhabitants of London. Sequel to Maeve Ascendant.</description> </book> <book id=""bk105""> <author>Corets, Eva</author> <title>The Sundered Grail</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2001-09-10</publish_date> <description>The two daughters of Maeve, half-sisters, battle one another for control of England. Sequel to Oberon's Legacy.</description> </book> <book id=""bk106""> <author>Randall, Cynthia</author> <title>Lover Birds</title> <genre>Romance</genre> <price>4.95</price> <publish_date>2000-09-02</publish_date> <description>When Carla meets Paul at an ornithology conference, tempers fly as feathers get ruffled.</description> </book> <book id=""bk107""> <author>Thurman, Paula</author> <title>Splish Splash</title> <genre>Romance</genre> <price>4.95</price> <publish_date>2000-11-02</publish_date> <description>A deep sea diver finds true love twenty thousand leagues beneath the sea.</description> </book> <book id=""bk108""> <author>Knorr, Stefan</author> <title>Creepy Crawlies</title> <genre>Horror</genre> <price>4.95</price> <publish_date>2000-12-06</publish_date> <description>An anthology of horror stories about roaches, centipedes, scorpions and other insects.</description> </book> <book id=""bk109""> <author>Kress, Peter</author> <title>Paradox Lost</title> <genre>Science Fiction</genre> <price>6.95</price> <publish_date>2000-11-02</publish_date> <description>After an inadvertant trip through a Heisenberg Uncertainty Device, James Salway discovers the problems of being quantum.</description> </book> <book id=""bk110""> <author>O'Brien, Tim</author> <title>Microsoft .NET: The Programming Bible</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-09</publish_date> <description>Microsoft's .NET initiative is explored in detail in this deep programmer's reference.</description> </book> <book id=""bk111""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk112""> <author>Galos, Mike</author> <title>Visual Studio 7: A Comprehensive Guide</title> <genre>Computer</genre> <price>49.95</price> <publish_date>2001-04-16</publish_date> <description>Microsoft Visual Studio 7 is explored in depth, looking at how Visual Basic, Visual C++, C#, and ASP+ are integrated into a comprehensive development environment. <book id=""bk113""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk114""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk115""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk116""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk117""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk118""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk119""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk120""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk121""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk122""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk123""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> </catalog>

(The closing tag is missing for the element with id bk112)

Run Nginx with ModSecurity under Valgrind, e.g.:

valgrind --leak-check=full --trace-children=yes --track-origins=yes -v --log-file=/tmp/valg.log nginx


Send request with the file as a body:

curl -X POST --header ""Content-Type: text/xml"" --data-binary @books_bad.xml ""http://localhost/""


Stop Nginx and observe Valgrind log.

Before the fix, it contains the following info on leaked blocks:
10878 ==18047== 91,783 (752 direct, 91,031 indirect) bytes in 1 blocks are definitely lost in loss record 750 of 754                              
10879 ==18047==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
10880 ==18047==    by 0x5DC397E: xmlNewParserCtxt (in /usr/lib/x86_64-linux-gnu/libxml2.so.2.9.3)
10881 ==18047==    by 0x5DD8CF9: xmlCreatePushParserCtxt (in /usr/lib/x86_64-linux-gnu/libxml2.so.2.9.3)
10882 ==18047==    by 0x63F932: xml_process_chunk (msc_xml.c:87)
10883 ==18047==    by 0x63A772: modsecurity_request_body_store (msc_reqbody.c:355)
10884 ==18047==    by 0x665E72: read_request_body (apache2_io.c:298) 
10885 ==18047==    by 0x62E986: hook_request_late (mod_security2.c:1042)
10886 ==18047==    by 0x627570: modsecProcessRequestBody (api.c:470)
10887 ==18047==    by 0x5ED402: ngx_http_modsecurity_prevention_thread_func (ngx_http_modsecurity.c:690)
10888 ==18047==    by 0x51B55A: ngx_thread_pool_cycle (ngx_thread_pool.c:342)
10889 ==18047==    by 0x50456B9: start_thread (pthread_create.c:333)
10890 ==18047==    by 0x782F41C: clone (clone.S:109)

After the fix, this log disappears.",We're using this in prod from Feb. in dozens of environments,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2239,2020-01-14T19:21:05Z,,2022-02-28T13:04:28Z,OPEN,False,7,0,1,https://github.com/argenet,Properly cleanup XML parser contexts upon completion,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2239,https://github.com/martinhsv,4,https://github.com/SpiderLabs/ModSecurity/pull/2239#issuecomment-1003446308,"Description
It is currently possible that the XML parsing context is not properly
cleaned up if a parsed XML document is malformed.
This fix makes sure that the context is taken care of.
Testing

Create a file books_bad.xml with malformed XML:
<?xml version=""1.0""?> <catalog> <book id=""bk101""> <author>Gambardella, Matthew</author> <title>XML Developer's Guide</title> <genre>Computer</genre> <price>44.95</price> <publish_date>2000-10-01</publish_date> <description>An in-depth look at creating applications with XML.</description> </book> <book id=""bk102""> <author>Ralls, Kim</author> <title>Midnight Rain</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2000-12-16</publish_date> <description>A former architect battles corporate zombies, an evil sorceress, and her own childhood to become queen of the world.</description> </book> <book id=""bk103""> <author>Corets, Eva</author> <title>Maeve Ascendant</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2000-11-17</publish_date> <description>After the collapse of a nanotechnology society in England, the young survivors lay the foundation for a new society.</description> </book> <book id=""bk104""> <author>Corets, Eva</author> <title>Oberon's Legacy</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2001-03-10</publish_date> <description>In post-apocalypse England, the mysterious agent known only as Oberon helps to create a new life for the inhabitants of London. Sequel to Maeve Ascendant.</description> </book> <book id=""bk105""> <author>Corets, Eva</author> <title>The Sundered Grail</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2001-09-10</publish_date> <description>The two daughters of Maeve, half-sisters, battle one another for control of England. Sequel to Oberon's Legacy.</description> </book> <book id=""bk106""> <author>Randall, Cynthia</author> <title>Lover Birds</title> <genre>Romance</genre> <price>4.95</price> <publish_date>2000-09-02</publish_date> <description>When Carla meets Paul at an ornithology conference, tempers fly as feathers get ruffled.</description> </book> <book id=""bk107""> <author>Thurman, Paula</author> <title>Splish Splash</title> <genre>Romance</genre> <price>4.95</price> <publish_date>2000-11-02</publish_date> <description>A deep sea diver finds true love twenty thousand leagues beneath the sea.</description> </book> <book id=""bk108""> <author>Knorr, Stefan</author> <title>Creepy Crawlies</title> <genre>Horror</genre> <price>4.95</price> <publish_date>2000-12-06</publish_date> <description>An anthology of horror stories about roaches, centipedes, scorpions and other insects.</description> </book> <book id=""bk109""> <author>Kress, Peter</author> <title>Paradox Lost</title> <genre>Science Fiction</genre> <price>6.95</price> <publish_date>2000-11-02</publish_date> <description>After an inadvertant trip through a Heisenberg Uncertainty Device, James Salway discovers the problems of being quantum.</description> </book> <book id=""bk110""> <author>O'Brien, Tim</author> <title>Microsoft .NET: The Programming Bible</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-09</publish_date> <description>Microsoft's .NET initiative is explored in detail in this deep programmer's reference.</description> </book> <book id=""bk111""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk112""> <author>Galos, Mike</author> <title>Visual Studio 7: A Comprehensive Guide</title> <genre>Computer</genre> <price>49.95</price> <publish_date>2001-04-16</publish_date> <description>Microsoft Visual Studio 7 is explored in depth, looking at how Visual Basic, Visual C++, C#, and ASP+ are integrated into a comprehensive development environment. <book id=""bk113""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk114""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk115""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk116""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk117""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk118""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk119""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk120""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk121""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk122""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk123""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> </catalog>

(The closing tag is missing for the element with id bk112)

Run Nginx with ModSecurity under Valgrind, e.g.:

valgrind --leak-check=full --trace-children=yes --track-origins=yes -v --log-file=/tmp/valg.log nginx


Send request with the file as a body:

curl -X POST --header ""Content-Type: text/xml"" --data-binary @books_bad.xml ""http://localhost/""


Stop Nginx and observe Valgrind log.

Before the fix, it contains the following info on leaked blocks:
10878 ==18047== 91,783 (752 direct, 91,031 indirect) bytes in 1 blocks are definitely lost in loss record 750 of 754                              
10879 ==18047==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
10880 ==18047==    by 0x5DC397E: xmlNewParserCtxt (in /usr/lib/x86_64-linux-gnu/libxml2.so.2.9.3)
10881 ==18047==    by 0x5DD8CF9: xmlCreatePushParserCtxt (in /usr/lib/x86_64-linux-gnu/libxml2.so.2.9.3)
10882 ==18047==    by 0x63F932: xml_process_chunk (msc_xml.c:87)
10883 ==18047==    by 0x63A772: modsecurity_request_body_store (msc_reqbody.c:355)
10884 ==18047==    by 0x665E72: read_request_body (apache2_io.c:298) 
10885 ==18047==    by 0x62E986: hook_request_late (mod_security2.c:1042)
10886 ==18047==    by 0x627570: modsecProcessRequestBody (api.c:470)
10887 ==18047==    by 0x5ED402: ngx_http_modsecurity_prevention_thread_func (ngx_http_modsecurity.c:690)
10888 ==18047==    by 0x51B55A: ngx_thread_pool_cycle (ngx_thread_pool.c:342)
10889 ==18047==    by 0x50456B9: start_thread (pthread_create.c:333)
10890 ==18047==    by 0x782F41C: clone (clone.S:109)

After the fix, this log disappears.","Hi @argenet,
I don't see any problems with this pull request as it stands.
However, one thing I'm slightly wary of here is that we have two different pointers:

msr->xml->parsing_ctx->myDoc
msr->xml->doc

... that in principal can and will point to the same memory.
This code frees the memory pointed to by the first pointer without NULLing out the second one.
With the current code I don't see any code path where  msr->xml->doc is non-NULL and your new cleanup code gets executed, so no problem I suppose.
I guess I'm just a little worried that with unknown future evolution of the code that this may sow the seed for a problem.
Is it perhaps worth adding a couple of lines of code after your xmlFreeDoc to check if the two pointers are equal, and if so, set msr->xml->doc to NULL?
Thoughts?",True,{'THUMBS_UP': ['https://github.com/marcstern']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2239,2020-01-14T19:21:05Z,,2022-02-28T13:04:28Z,OPEN,False,7,0,1,https://github.com/argenet,Properly cleanup XML parser contexts upon completion,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2239,https://github.com/martinhsv,5,https://github.com/SpiderLabs/ModSecurity/pull/2239#issuecomment-1019297068,"Description
It is currently possible that the XML parsing context is not properly
cleaned up if a parsed XML document is malformed.
This fix makes sure that the context is taken care of.
Testing

Create a file books_bad.xml with malformed XML:
<?xml version=""1.0""?> <catalog> <book id=""bk101""> <author>Gambardella, Matthew</author> <title>XML Developer's Guide</title> <genre>Computer</genre> <price>44.95</price> <publish_date>2000-10-01</publish_date> <description>An in-depth look at creating applications with XML.</description> </book> <book id=""bk102""> <author>Ralls, Kim</author> <title>Midnight Rain</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2000-12-16</publish_date> <description>A former architect battles corporate zombies, an evil sorceress, and her own childhood to become queen of the world.</description> </book> <book id=""bk103""> <author>Corets, Eva</author> <title>Maeve Ascendant</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2000-11-17</publish_date> <description>After the collapse of a nanotechnology society in England, the young survivors lay the foundation for a new society.</description> </book> <book id=""bk104""> <author>Corets, Eva</author> <title>Oberon's Legacy</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2001-03-10</publish_date> <description>In post-apocalypse England, the mysterious agent known only as Oberon helps to create a new life for the inhabitants of London. Sequel to Maeve Ascendant.</description> </book> <book id=""bk105""> <author>Corets, Eva</author> <title>The Sundered Grail</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2001-09-10</publish_date> <description>The two daughters of Maeve, half-sisters, battle one another for control of England. Sequel to Oberon's Legacy.</description> </book> <book id=""bk106""> <author>Randall, Cynthia</author> <title>Lover Birds</title> <genre>Romance</genre> <price>4.95</price> <publish_date>2000-09-02</publish_date> <description>When Carla meets Paul at an ornithology conference, tempers fly as feathers get ruffled.</description> </book> <book id=""bk107""> <author>Thurman, Paula</author> <title>Splish Splash</title> <genre>Romance</genre> <price>4.95</price> <publish_date>2000-11-02</publish_date> <description>A deep sea diver finds true love twenty thousand leagues beneath the sea.</description> </book> <book id=""bk108""> <author>Knorr, Stefan</author> <title>Creepy Crawlies</title> <genre>Horror</genre> <price>4.95</price> <publish_date>2000-12-06</publish_date> <description>An anthology of horror stories about roaches, centipedes, scorpions and other insects.</description> </book> <book id=""bk109""> <author>Kress, Peter</author> <title>Paradox Lost</title> <genre>Science Fiction</genre> <price>6.95</price> <publish_date>2000-11-02</publish_date> <description>After an inadvertant trip through a Heisenberg Uncertainty Device, James Salway discovers the problems of being quantum.</description> </book> <book id=""bk110""> <author>O'Brien, Tim</author> <title>Microsoft .NET: The Programming Bible</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-09</publish_date> <description>Microsoft's .NET initiative is explored in detail in this deep programmer's reference.</description> </book> <book id=""bk111""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk112""> <author>Galos, Mike</author> <title>Visual Studio 7: A Comprehensive Guide</title> <genre>Computer</genre> <price>49.95</price> <publish_date>2001-04-16</publish_date> <description>Microsoft Visual Studio 7 is explored in depth, looking at how Visual Basic, Visual C++, C#, and ASP+ are integrated into a comprehensive development environment. <book id=""bk113""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk114""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk115""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk116""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk117""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk118""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk119""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk120""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk121""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk122""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> <book id=""bk123""> <author>O'Brien, Tim</author> <title>MSXML3: A Comprehensive Guide</title> <genre>Computer</genre> <price>36.95</price> <publish_date>2000-12-01</publish_date> <description>The Microsoft MSXML3 parser is covered in detail, with attention to XML DOM interfaces, XSLT processing, SAX and more.</description> </book> </catalog>

(The closing tag is missing for the element with id bk112)

Run Nginx with ModSecurity under Valgrind, e.g.:

valgrind --leak-check=full --trace-children=yes --track-origins=yes -v --log-file=/tmp/valg.log nginx


Send request with the file as a body:

curl -X POST --header ""Content-Type: text/xml"" --data-binary @books_bad.xml ""http://localhost/""


Stop Nginx and observe Valgrind log.

Before the fix, it contains the following info on leaked blocks:
10878 ==18047== 91,783 (752 direct, 91,031 indirect) bytes in 1 blocks are definitely lost in loss record 750 of 754                              
10879 ==18047==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
10880 ==18047==    by 0x5DC397E: xmlNewParserCtxt (in /usr/lib/x86_64-linux-gnu/libxml2.so.2.9.3)
10881 ==18047==    by 0x5DD8CF9: xmlCreatePushParserCtxt (in /usr/lib/x86_64-linux-gnu/libxml2.so.2.9.3)
10882 ==18047==    by 0x63F932: xml_process_chunk (msc_xml.c:87)
10883 ==18047==    by 0x63A772: modsecurity_request_body_store (msc_reqbody.c:355)
10884 ==18047==    by 0x665E72: read_request_body (apache2_io.c:298) 
10885 ==18047==    by 0x62E986: hook_request_late (mod_security2.c:1042)
10886 ==18047==    by 0x627570: modsecProcessRequestBody (api.c:470)
10887 ==18047==    by 0x5ED402: ngx_http_modsecurity_prevention_thread_func (ngx_http_modsecurity.c:690)
10888 ==18047==    by 0x51B55A: ngx_thread_pool_cycle (ngx_thread_pool.c:342)
10889 ==18047==    by 0x50456B9: start_thread (pthread_create.c:333)
10890 ==18047==    by 0x782F41C: clone (clone.S:109)

After the fix, this log disappears.","I tried this today with v2.9.5 + Apache and was not able to reproduce it.
I see that the steps to reproduce in the description mention running nginx. ModSecurity v2 with nginx is definitely not recommended.
Are there any known cases where there is a problem in ModSecurity v2 with either Apache or IIS?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2253,2020-01-31T21:36:46Z,2020-02-04T13:53:54Z,2020-02-04T13:53:55Z,CLOSED,False,1,0,1,https://github.com/ffontaine,modsecurity.pc.in: add Libs.private,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2253,https://github.com/ffontaine,1,https://github.com/SpiderLabs/ModSecurity/pull/2253,"Add Libs.private to save static dependencies so applications linking
statically with modsecurity will be able to retrieve them through
pkg-config
Fix #1918
Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","Add Libs.private to save static dependencies so applications linking
statically with modsecurity will be able to retrieve them through
pkg-config
Fix #1918
Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2253,2020-01-31T21:36:46Z,2020-02-04T13:53:54Z,2020-02-04T13:53:55Z,CLOSED,False,1,0,1,https://github.com/ffontaine,modsecurity.pc.in: add Libs.private,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2253,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2253#issuecomment-581919751,"Add Libs.private to save static dependencies so applications linking
statically with modsecurity will be able to retrieve them through
pkg-config
Fix #1918
Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com",Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2261,2020-02-05T14:58:40Z,2020-02-11T13:16:54Z,2020-02-11T13:16:54Z,CLOSED,False,92,8,5,https://github.com/martinhsv,Fix rule-update-target exclusions for plain (non-regex) variables,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2261,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2261,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2261,2020-02-05T14:58:40Z,2020-02-11T13:16:54Z,2020-02-11T13:16:54Z,CLOSED,False,92,8,5,https://github.com/martinhsv,Fix rule-update-target exclusions for plain (non-regex) variables,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2261,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2261#issuecomment-584629372,,Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2263,2020-02-06T11:22:14Z,,2022-02-28T13:04:57Z,OPEN,False,4,12,2,https://github.com/asterite3,Fix #610: fix memory leaks caused by unfreed compiled regex data,2,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2263,https://github.com/asterite3,1,https://github.com/SpiderLabs/ModSecurity/pull/2263,"This pull request aims to fix 2 memory leaks in ModSecurity v2:

PCRE JIT data produced by pcre_study not freed by  msc_pcre_cleanup because free()/pcre_free  is used to deallocate pcre_extra structure. The proposed fix is to use  pcre_free_study instead of free/pcre_free in msc_pcre_cleanup. This change was already proposed in #610.
Regex data not freed (msc_pcre_cleanup not called) for @rx rules which regexes contain variable substitutions.  OWASP CRS contains such rules: 920420 and 920480. The proposed  fix is to allocate memory for regexes in msr->mp pool instead of rule->ruleset->mp in msre_op_rx_execute. msre_op_rx_execute is called for each request (unlike msre_op_rx_param_init) and creates volatile regexes used for that one request only (which is done when regex contains variable substitution and therefore can't be compiled once and reused for each request), that regex does not seem to be stored anywhere in ruleset data.

These two fixes are related: without the second one, for rules with regex depending on a variable, function  msc_pcre_cleanup is never called, so the first fix does not help. The other way around, when PCRE JIT is used, the second fix is of little use for such rules, because only the lesser part of memory is freed by msc_pcre_cleanup. As noted in #610, first leak also occurs when apache with mod_security2 is reloaded (and so all the rules are freed and re-allocated again, but PCRE study data from the first config load remains unfreed for all regexes).
It should be noted that first leak is rather hard to trace as it can't be detected by most automated tools including Valgrind because PCRE uses it's own allocator for allocating memory for JIT, this allocator is not based on malloc and allocates memory by directly calling mmap, and it does not have annotations for Valgrind (VALGRIND_MALLOCLIKE_BLOCK/VALGRIND_MEMPOOL_ALLOC).
Reproducing the leaks
This test program  (using ModSecurity 2 built as a standalone module, code is mostly based on standalone/main.cpp) with this minimal config can be used to demonstrate the leaks. (This config with more rules can be used instead, with it memory leaks more). These test configs include rules 920420 and 920480 from OWASP CRS. To test it with PCRE JIT, ModSecurity build was configured with ./configure --with-curl  --with-yajl --enable-standalone-module --disable-mlogc --enable-pcre-jit --without-lua. When run without the proposed fixes, it consumes a lot of RAM. Note that applying only one of the fixes does not solve the problem - using only the first fix does not change the situation at all (as msc_pcre_cleanup is not called), using only the second one reduces memory leak only slightly (as most of the memory allocated belongs to PCRE JIT data).
If PCRE  JIT is disabled (--enable-pcre-jit configure flag is omitted), memory leaks slower, but leak still occurs. In my tests, after 200000 requests test program reached RSS 145M when ModSecurity was compiled without PCRE JIT (with PCRE JIT RSS reached nearly 869M).
The other way to reproduce the leak is to use the same config with ModSecurity 2 running as Apache module and continuously sending requests to it - without the fixes memory usage of Apache workers can be seen to grow constantly, with the fixes memory usage of workers in my tests stayed nead 8 megabytes.
Fixes
The first leak is fixed by calling pcre_free_study on pcre_extra structure pointer instead of free/pcre_free in msc_pcre_cleanup. Function msc_pregcomp_ex that creates msc_regex_t can allocate pcre_extra  ""manually"" with malloc/pcre_malloc instead of with pcre_study. That's why the logic is added that check that pcre_extra indeed came from pcre_study by checking if PCRE_EXTRA_EXECUTABLE_JIT is set in flags of pcre_study (and pcre_free_study is only called in that case). msc_pregcomp_ex does not set that flag itself, and in fact pcre_free_study works the same way: it checks that flag, if it is not set, it calls pcre_free on pcre_extra pointer (pcre_free defaults for free, but can be set to other function by library user).
Please review this solution and tell if it's not the best one. Alternative options are, for example, to call pcre_free_study unconditionally or add an extra field to msc_regex_t that will indicate whether pe field was obtained by pcre_study.
The second leak is fixed by ""attaching"" allocated data to msr->mp instead of to rule->ruleset->mp . This seems safe because msc_regex_t created in msre_op_rx_execute seems to be stored nowhere and for subsequent requests a new msc_regex_t will be created with calls to msc_pregcomp_ex. Anyway, the review here would be appreciated too.
Similar leaks in other operators
It seems the same problem exists with validateHash 
  
    
      ModSecurity/apache2/re_operators.c
    
    
         Line 787
      in
      12cefbd
    
  
  
    

        
          
           regex = msc_pregcomp_ex(rule->ruleset->mp, pattern, PCRE_DOTALL | PCRE_DOLLAR_ENDONLY, &errptr,  
        
    
  

 and similar case is with gsbLookup 
  
    
      ModSecurity/apache2/re_operators.c
    
    
         Line 1687
      in
      12cefbd
    
  
  
    

        
          
           data = apr_pcalloc(rule->ruleset->mp, var->value_len+1); 
        
    
  

 and below.
I was not able to find the examples of usage of these operators in OWASP CRS or figure out how they work enough to make my own examples - to make working examples reproducing the leaks there.
Still, I can provide analogous fixes for them in this or separate pull request.
Fixes #610","This pull request aims to fix 2 memory leaks in ModSecurity v2:

PCRE JIT data produced by pcre_study not freed by  msc_pcre_cleanup because free()/pcre_free  is used to deallocate pcre_extra structure. The proposed fix is to use  pcre_free_study instead of free/pcre_free in msc_pcre_cleanup. This change was already proposed in #610.
Regex data not freed (msc_pcre_cleanup not called) for @rx rules which regexes contain variable substitutions.  OWASP CRS contains such rules: 920420 and 920480. The proposed  fix is to allocate memory for regexes in msr->mp pool instead of rule->ruleset->mp in msre_op_rx_execute. msre_op_rx_execute is called for each request (unlike msre_op_rx_param_init) and creates volatile regexes used for that one request only (which is done when regex contains variable substitution and therefore can't be compiled once and reused for each request), that regex does not seem to be stored anywhere in ruleset data.

These two fixes are related: without the second one, for rules with regex depending on a variable, function  msc_pcre_cleanup is never called, so the first fix does not help. The other way around, when PCRE JIT is used, the second fix is of little use for such rules, because only the lesser part of memory is freed by msc_pcre_cleanup. As noted in #610, first leak also occurs when apache with mod_security2 is reloaded (and so all the rules are freed and re-allocated again, but PCRE study data from the first config load remains unfreed for all regexes).
It should be noted that first leak is rather hard to trace as it can't be detected by most automated tools including Valgrind because PCRE uses it's own allocator for allocating memory for JIT, this allocator is not based on malloc and allocates memory by directly calling mmap, and it does not have annotations for Valgrind (VALGRIND_MALLOCLIKE_BLOCK/VALGRIND_MEMPOOL_ALLOC).
Reproducing the leaks
This test program  (using ModSecurity 2 built as a standalone module, code is mostly based on standalone/main.cpp) with this minimal config can be used to demonstrate the leaks. (This config with more rules can be used instead, with it memory leaks more). These test configs include rules 920420 and 920480 from OWASP CRS. To test it with PCRE JIT, ModSecurity build was configured with ./configure --with-curl  --with-yajl --enable-standalone-module --disable-mlogc --enable-pcre-jit --without-lua. When run without the proposed fixes, it consumes a lot of RAM. Note that applying only one of the fixes does not solve the problem - using only the first fix does not change the situation at all (as msc_pcre_cleanup is not called), using only the second one reduces memory leak only slightly (as most of the memory allocated belongs to PCRE JIT data).
If PCRE  JIT is disabled (--enable-pcre-jit configure flag is omitted), memory leaks slower, but leak still occurs. In my tests, after 200000 requests test program reached RSS 145M when ModSecurity was compiled without PCRE JIT (with PCRE JIT RSS reached nearly 869M).
The other way to reproduce the leak is to use the same config with ModSecurity 2 running as Apache module and continuously sending requests to it - without the fixes memory usage of Apache workers can be seen to grow constantly, with the fixes memory usage of workers in my tests stayed nead 8 megabytes.
Fixes
The first leak is fixed by calling pcre_free_study on pcre_extra structure pointer instead of free/pcre_free in msc_pcre_cleanup. Function msc_pregcomp_ex that creates msc_regex_t can allocate pcre_extra  ""manually"" with malloc/pcre_malloc instead of with pcre_study. That's why the logic is added that check that pcre_extra indeed came from pcre_study by checking if PCRE_EXTRA_EXECUTABLE_JIT is set in flags of pcre_study (and pcre_free_study is only called in that case). msc_pregcomp_ex does not set that flag itself, and in fact pcre_free_study works the same way: it checks that flag, if it is not set, it calls pcre_free on pcre_extra pointer (pcre_free defaults for free, but can be set to other function by library user).
Please review this solution and tell if it's not the best one. Alternative options are, for example, to call pcre_free_study unconditionally or add an extra field to msc_regex_t that will indicate whether pe field was obtained by pcre_study.
The second leak is fixed by ""attaching"" allocated data to msr->mp instead of to rule->ruleset->mp . This seems safe because msc_regex_t created in msre_op_rx_execute seems to be stored nowhere and for subsequent requests a new msc_regex_t will be created with calls to msc_pregcomp_ex. Anyway, the review here would be appreciated too.
Similar leaks in other operators
It seems the same problem exists with validateHash 
  
    
      ModSecurity/apache2/re_operators.c
    
    
         Line 787
      in
      12cefbd
    
  
  
    

        
          
           regex = msc_pregcomp_ex(rule->ruleset->mp, pattern, PCRE_DOTALL | PCRE_DOLLAR_ENDONLY, &errptr,  
        
    
  

 and similar case is with gsbLookup 
  
    
      ModSecurity/apache2/re_operators.c
    
    
         Line 1687
      in
      12cefbd
    
  
  
    

        
          
           data = apr_pcalloc(rule->ruleset->mp, var->value_len+1); 
        
    
  

 and below.
I was not able to find the examples of usage of these operators in OWASP CRS or figure out how they work enough to make my own examples - to make working examples reproducing the leaks there.
Still, I can provide analogous fixes for them in this or separate pull request.
Fixes #610",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2263,2020-02-06T11:22:14Z,,2022-02-28T13:04:57Z,OPEN,False,4,12,2,https://github.com/asterite3,Fix #610: fix memory leaks caused by unfreed compiled regex data,2,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2263,https://github.com/marcstern,2,https://github.com/SpiderLabs/ModSecurity/pull/2263#issuecomment-726725900,"This pull request aims to fix 2 memory leaks in ModSecurity v2:

PCRE JIT data produced by pcre_study not freed by  msc_pcre_cleanup because free()/pcre_free  is used to deallocate pcre_extra structure. The proposed fix is to use  pcre_free_study instead of free/pcre_free in msc_pcre_cleanup. This change was already proposed in #610.
Regex data not freed (msc_pcre_cleanup not called) for @rx rules which regexes contain variable substitutions.  OWASP CRS contains such rules: 920420 and 920480. The proposed  fix is to allocate memory for regexes in msr->mp pool instead of rule->ruleset->mp in msre_op_rx_execute. msre_op_rx_execute is called for each request (unlike msre_op_rx_param_init) and creates volatile regexes used for that one request only (which is done when regex contains variable substitution and therefore can't be compiled once and reused for each request), that regex does not seem to be stored anywhere in ruleset data.

These two fixes are related: without the second one, for rules with regex depending on a variable, function  msc_pcre_cleanup is never called, so the first fix does not help. The other way around, when PCRE JIT is used, the second fix is of little use for such rules, because only the lesser part of memory is freed by msc_pcre_cleanup. As noted in #610, first leak also occurs when apache with mod_security2 is reloaded (and so all the rules are freed and re-allocated again, but PCRE study data from the first config load remains unfreed for all regexes).
It should be noted that first leak is rather hard to trace as it can't be detected by most automated tools including Valgrind because PCRE uses it's own allocator for allocating memory for JIT, this allocator is not based on malloc and allocates memory by directly calling mmap, and it does not have annotations for Valgrind (VALGRIND_MALLOCLIKE_BLOCK/VALGRIND_MEMPOOL_ALLOC).
Reproducing the leaks
This test program  (using ModSecurity 2 built as a standalone module, code is mostly based on standalone/main.cpp) with this minimal config can be used to demonstrate the leaks. (This config with more rules can be used instead, with it memory leaks more). These test configs include rules 920420 and 920480 from OWASP CRS. To test it with PCRE JIT, ModSecurity build was configured with ./configure --with-curl  --with-yajl --enable-standalone-module --disable-mlogc --enable-pcre-jit --without-lua. When run without the proposed fixes, it consumes a lot of RAM. Note that applying only one of the fixes does not solve the problem - using only the first fix does not change the situation at all (as msc_pcre_cleanup is not called), using only the second one reduces memory leak only slightly (as most of the memory allocated belongs to PCRE JIT data).
If PCRE  JIT is disabled (--enable-pcre-jit configure flag is omitted), memory leaks slower, but leak still occurs. In my tests, after 200000 requests test program reached RSS 145M when ModSecurity was compiled without PCRE JIT (with PCRE JIT RSS reached nearly 869M).
The other way to reproduce the leak is to use the same config with ModSecurity 2 running as Apache module and continuously sending requests to it - without the fixes memory usage of Apache workers can be seen to grow constantly, with the fixes memory usage of workers in my tests stayed nead 8 megabytes.
Fixes
The first leak is fixed by calling pcre_free_study on pcre_extra structure pointer instead of free/pcre_free in msc_pcre_cleanup. Function msc_pregcomp_ex that creates msc_regex_t can allocate pcre_extra  ""manually"" with malloc/pcre_malloc instead of with pcre_study. That's why the logic is added that check that pcre_extra indeed came from pcre_study by checking if PCRE_EXTRA_EXECUTABLE_JIT is set in flags of pcre_study (and pcre_free_study is only called in that case). msc_pregcomp_ex does not set that flag itself, and in fact pcre_free_study works the same way: it checks that flag, if it is not set, it calls pcre_free on pcre_extra pointer (pcre_free defaults for free, but can be set to other function by library user).
Please review this solution and tell if it's not the best one. Alternative options are, for example, to call pcre_free_study unconditionally or add an extra field to msc_regex_t that will indicate whether pe field was obtained by pcre_study.
The second leak is fixed by ""attaching"" allocated data to msr->mp instead of to rule->ruleset->mp . This seems safe because msc_regex_t created in msre_op_rx_execute seems to be stored nowhere and for subsequent requests a new msc_regex_t will be created with calls to msc_pregcomp_ex. Anyway, the review here would be appreciated too.
Similar leaks in other operators
It seems the same problem exists with validateHash 
  
    
      ModSecurity/apache2/re_operators.c
    
    
         Line 787
      in
      12cefbd
    
  
  
    

        
          
           regex = msc_pregcomp_ex(rule->ruleset->mp, pattern, PCRE_DOTALL | PCRE_DOLLAR_ENDONLY, &errptr,  
        
    
  

 and similar case is with gsbLookup 
  
    
      ModSecurity/apache2/re_operators.c
    
    
         Line 1687
      in
      12cefbd
    
  
  
    

        
          
           data = apr_pcalloc(rule->ruleset->mp, var->value_len+1); 
        
    
  

 and below.
I was not able to find the examples of usage of these operators in OWASP CRS or figure out how they work enough to make my own examples - to make working examples reproducing the leaks there.
Still, I can provide analogous fixes for them in this or separate pull request.
Fixes #610",Any chance to have this merged? Thanks,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2263,2020-02-06T11:22:14Z,,2022-02-28T13:04:57Z,OPEN,False,4,12,2,https://github.com/asterite3,Fix #610: fix memory leaks caused by unfreed compiled regex data,2,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2263,https://github.com/marcstern,3,https://github.com/SpiderLabs/ModSecurity/pull/2263#issuecomment-1054079491,"This pull request aims to fix 2 memory leaks in ModSecurity v2:

PCRE JIT data produced by pcre_study not freed by  msc_pcre_cleanup because free()/pcre_free  is used to deallocate pcre_extra structure. The proposed fix is to use  pcre_free_study instead of free/pcre_free in msc_pcre_cleanup. This change was already proposed in #610.
Regex data not freed (msc_pcre_cleanup not called) for @rx rules which regexes contain variable substitutions.  OWASP CRS contains such rules: 920420 and 920480. The proposed  fix is to allocate memory for regexes in msr->mp pool instead of rule->ruleset->mp in msre_op_rx_execute. msre_op_rx_execute is called for each request (unlike msre_op_rx_param_init) and creates volatile regexes used for that one request only (which is done when regex contains variable substitution and therefore can't be compiled once and reused for each request), that regex does not seem to be stored anywhere in ruleset data.

These two fixes are related: without the second one, for rules with regex depending on a variable, function  msc_pcre_cleanup is never called, so the first fix does not help. The other way around, when PCRE JIT is used, the second fix is of little use for such rules, because only the lesser part of memory is freed by msc_pcre_cleanup. As noted in #610, first leak also occurs when apache with mod_security2 is reloaded (and so all the rules are freed and re-allocated again, but PCRE study data from the first config load remains unfreed for all regexes).
It should be noted that first leak is rather hard to trace as it can't be detected by most automated tools including Valgrind because PCRE uses it's own allocator for allocating memory for JIT, this allocator is not based on malloc and allocates memory by directly calling mmap, and it does not have annotations for Valgrind (VALGRIND_MALLOCLIKE_BLOCK/VALGRIND_MEMPOOL_ALLOC).
Reproducing the leaks
This test program  (using ModSecurity 2 built as a standalone module, code is mostly based on standalone/main.cpp) with this minimal config can be used to demonstrate the leaks. (This config with more rules can be used instead, with it memory leaks more). These test configs include rules 920420 and 920480 from OWASP CRS. To test it with PCRE JIT, ModSecurity build was configured with ./configure --with-curl  --with-yajl --enable-standalone-module --disable-mlogc --enable-pcre-jit --without-lua. When run without the proposed fixes, it consumes a lot of RAM. Note that applying only one of the fixes does not solve the problem - using only the first fix does not change the situation at all (as msc_pcre_cleanup is not called), using only the second one reduces memory leak only slightly (as most of the memory allocated belongs to PCRE JIT data).
If PCRE  JIT is disabled (--enable-pcre-jit configure flag is omitted), memory leaks slower, but leak still occurs. In my tests, after 200000 requests test program reached RSS 145M when ModSecurity was compiled without PCRE JIT (with PCRE JIT RSS reached nearly 869M).
The other way to reproduce the leak is to use the same config with ModSecurity 2 running as Apache module and continuously sending requests to it - without the fixes memory usage of Apache workers can be seen to grow constantly, with the fixes memory usage of workers in my tests stayed nead 8 megabytes.
Fixes
The first leak is fixed by calling pcre_free_study on pcre_extra structure pointer instead of free/pcre_free in msc_pcre_cleanup. Function msc_pregcomp_ex that creates msc_regex_t can allocate pcre_extra  ""manually"" with malloc/pcre_malloc instead of with pcre_study. That's why the logic is added that check that pcre_extra indeed came from pcre_study by checking if PCRE_EXTRA_EXECUTABLE_JIT is set in flags of pcre_study (and pcre_free_study is only called in that case). msc_pregcomp_ex does not set that flag itself, and in fact pcre_free_study works the same way: it checks that flag, if it is not set, it calls pcre_free on pcre_extra pointer (pcre_free defaults for free, but can be set to other function by library user).
Please review this solution and tell if it's not the best one. Alternative options are, for example, to call pcre_free_study unconditionally or add an extra field to msc_regex_t that will indicate whether pe field was obtained by pcre_study.
The second leak is fixed by ""attaching"" allocated data to msr->mp instead of to rule->ruleset->mp . This seems safe because msc_regex_t created in msre_op_rx_execute seems to be stored nowhere and for subsequent requests a new msc_regex_t will be created with calls to msc_pregcomp_ex. Anyway, the review here would be appreciated too.
Similar leaks in other operators
It seems the same problem exists with validateHash 
  
    
      ModSecurity/apache2/re_operators.c
    
    
         Line 787
      in
      12cefbd
    
  
  
    

        
          
           regex = msc_pregcomp_ex(rule->ruleset->mp, pattern, PCRE_DOTALL | PCRE_DOLLAR_ENDONLY, &errptr,  
        
    
  

 and similar case is with gsbLookup 
  
    
      ModSecurity/apache2/re_operators.c
    
    
         Line 1687
      in
      12cefbd
    
  
  
    

        
          
           data = apr_pcalloc(rule->ruleset->mp, var->value_len+1); 
        
    
  

 and below.
I was not able to find the examples of usage of these operators in OWASP CRS or figure out how they work enough to make my own examples - to make working examples reproducing the leaks there.
Still, I can provide analogous fixes for them in this or separate pull request.
Fixes #610","Running in prod on 60+ servers for more than 1 year.
It definitely solves a technical problem that could be critical in some environments.
Why isn't it accepted?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2265,2020-02-11T21:12:26Z,2020-02-12T14:03:47Z,2021-12-17T20:00:02Z,CLOSED,False,525,0,3,https://github.com/airween,Finish the SecRequestBodyNoFilesLimit configuration parameter,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2265,https://github.com/airween,1,https://github.com/SpiderLabs/ModSecurity/pull/2265,"It looks like the SecRequestBodyNoFilesLimit configuration parameter is only half done, not much was missing.
Is there any reason it's just almost done? I mean any kind of security risk/issue (you just ignored it during the developing...). As you can see, there isn't so much addition code.
May be it's not what you expected (or planned), so if you have any idea, please let me know.
I think this missing feature would be at least as good as #2060 and #2234.","It looks like the SecRequestBodyNoFilesLimit configuration parameter is only half done, not much was missing.
Is there any reason it's just almost done? I mean any kind of security risk/issue (you just ignored it during the developing...). As you can see, there isn't so much addition code.
May be it's not what you expected (or planned), so if you have any idea, please let me know.
I think this missing feature would be at least as good as #2060 and #2234.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2265,2020-02-11T21:12:26Z,2020-02-12T14:03:47Z,2021-12-17T20:00:02Z,CLOSED,False,525,0,3,https://github.com/airween,Finish the SecRequestBodyNoFilesLimit configuration parameter,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2265,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2265#issuecomment-585171103,"It looks like the SecRequestBodyNoFilesLimit configuration parameter is only half done, not much was missing.
Is there any reason it's just almost done? I mean any kind of security risk/issue (you just ignored it during the developing...). As you can see, there isn't so much addition code.
May be it's not what you expected (or planned), so if you have any idea, please let me know.
I think this missing feature would be at least as good as #2060 and #2234.",Thank you for sharing your opinion. Do you mind to share why do you need such a feature?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2265,2020-02-11T21:12:26Z,2020-02-12T14:03:47Z,2021-12-17T20:00:02Z,CLOSED,False,525,0,3,https://github.com/airween,Finish the SecRequestBodyNoFilesLimit configuration parameter,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2265,https://github.com/dune73,3,https://github.com/SpiderLabs/ModSecurity/pull/2265#issuecomment-585205863,"It looks like the SecRequestBodyNoFilesLimit configuration parameter is only half done, not much was missing.
Is there any reason it's just almost done? I mean any kind of security risk/issue (you just ignored it during the developing...). As you can see, there isn't so much addition code.
May be it's not what you expected (or planned), so if you have any idea, please let me know.
I think this missing feature would be at least as good as #2060 and #2234.","It is useful against some forms of DoS attacks, it used to be there in 2.9 and it is documented to be present in 3.0, is not it. It's troubling to learn it is no longer supported.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2265,2020-02-11T21:12:26Z,2020-02-12T14:03:47Z,2021-12-17T20:00:02Z,CLOSED,False,525,0,3,https://github.com/airween,Finish the SecRequestBodyNoFilesLimit configuration parameter,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2265,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/2265#issuecomment-585208023,"It looks like the SecRequestBodyNoFilesLimit configuration parameter is only half done, not much was missing.
Is there any reason it's just almost done? I mean any kind of security risk/issue (you just ignored it during the developing...). As you can see, there isn't so much addition code.
May be it's not what you expected (or planned), so if you have any idea, please let me know.
I think this missing feature would be at least as good as #2060 and #2234.","It is useful against some forms of DoS attacks, it used to be there in 2.9 and it is documented to be present in 3.0, is not it. It's troubling to learn it is no longer supported.

Wiki - Supported on libModSecurity: No",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2265,2020-02-11T21:12:26Z,2020-02-12T14:03:47Z,2021-12-17T20:00:02Z,CLOSED,False,525,0,3,https://github.com/airween,Finish the SecRequestBodyNoFilesLimit configuration parameter,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2265,https://github.com/airween,5,https://github.com/SpiderLabs/ModSecurity/pull/2265#issuecomment-585209318,"It looks like the SecRequestBodyNoFilesLimit configuration parameter is only half done, not much was missing.
Is there any reason it's just almost done? I mean any kind of security risk/issue (you just ignored it during the developing...). As you can see, there isn't so much addition code.
May be it's not what you expected (or planned), so if you have any idea, please let me know.
I think this missing feature would be at least as good as #2060 and #2234.","Thank you for sharing your opinion. Do you mind to share why do you need such a feature?

(Well, I have to tell you that your question was a little surprised me :))
I think the best answer is a quote from the reference:
This directive is useful to reduce susceptibility to DoS attacks when someone is sending request bodies of very large sizes. Web applications that require file uploads must configure SecRequestBodyLimit to a high value, but because large files are streamed to disk, file uploads will not increase memory consumption. However, it’s still possible for someone to take advantage of a large request body limit and send non-upload requests with large body sizes. This directive eliminates that loophole.
But let me ask you something: why did you started to implement it? That's why I asked above, did you see some risk to finish this option?",True,{'CONFUSED': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2265,2020-02-11T21:12:26Z,2020-02-12T14:03:47Z,2021-12-17T20:00:02Z,CLOSED,False,525,0,3,https://github.com/airween,Finish the SecRequestBodyNoFilesLimit configuration parameter,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2265,https://github.com/airween,6,https://github.com/SpiderLabs/ModSecurity/pull/2265#issuecomment-585211073,"It looks like the SecRequestBodyNoFilesLimit configuration parameter is only half done, not much was missing.
Is there any reason it's just almost done? I mean any kind of security risk/issue (you just ignored it during the developing...). As you can see, there isn't so much addition code.
May be it's not what you expected (or planned), so if you have any idea, please let me know.
I think this missing feature would be at least as good as #2060 and #2234.","It is useful against some forms of DoS attacks, it used to be there in 2.9 and it is documented to be present in 3.0, is not it. It's troubling to learn it is no longer supported.

Wiki - Supported on libModSecurity: No

Sorry to say, but this state in reference was modified about 2 weeks ago. Before the supported state of this feature was ""Yes"". And if you see the attached modsecurity.conf.recommended for v3 (which is 16 months old), then you can see also that looks like as the implemented feature:
https://github.com/SpiderLabs/ModSecurity/blob/v3/master/modsecurity.conf-recommended#L39
# Maximum request body size we will accept for buffering. If you support
# file uploads then the value given on the first line has to be as large
# as the largest file you are willing to accept. The second value refers
# to the size of data, with files excluded. You want to keep that value as
# low as practical.
#
SecRequestBodyLimit 13107200
SecRequestBodyNoFilesLimit 131072",True,{'CONFUSED': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2265,2020-02-11T21:12:26Z,2020-02-12T14:03:47Z,2021-12-17T20:00:02Z,CLOSED,False,525,0,3,https://github.com/airween,Finish the SecRequestBodyNoFilesLimit configuration parameter,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2265,https://github.com/zimmerle,7,https://github.com/SpiderLabs/ModSecurity/pull/2265#issuecomment-585213673,"It looks like the SecRequestBodyNoFilesLimit configuration parameter is only half done, not much was missing.
Is there any reason it's just almost done? I mean any kind of security risk/issue (you just ignored it during the developing...). As you can see, there isn't so much addition code.
May be it's not what you expected (or planned), so if you have any idea, please let me know.
I think this missing feature would be at least as good as #2060 and #2234.","(Well, I have to tell you that your question was a little surprised me :))
I think the best answer is a quote from the reference:
This directive is useful to reduce susceptibility to DoS attacks when someone is sending request bodies of very large sizes. Web applications that require file uploads must configure SecRequestBodyLimit to a high value, but because large files are streamed to disk, file uploads will not increase memory consumption. However, it’s still possible for someone to take advantage of a large request body limit and send non-upload requests with large body sizes. This directive eliminates that loophole.
But let me ask you something: why did you started to implement it? That's why I asked above, did you see some risk to finish this option?

The manual (for 2x) state something that was a problem back on 2.5 (575e863). I understand why it was implemented back them. Now that 13 years have passed, why such a feature is important for you?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2265,2020-02-11T21:12:26Z,2020-02-12T14:03:47Z,2021-12-17T20:00:02Z,CLOSED,False,525,0,3,https://github.com/airween,Finish the SecRequestBodyNoFilesLimit configuration parameter,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2265,https://github.com/airween,8,https://github.com/SpiderLabs/ModSecurity/pull/2265#issuecomment-585216940,"It looks like the SecRequestBodyNoFilesLimit configuration parameter is only half done, not much was missing.
Is there any reason it's just almost done? I mean any kind of security risk/issue (you just ignored it during the developing...). As you can see, there isn't so much addition code.
May be it's not what you expected (or planned), so if you have any idea, please let me know.
I think this missing feature would be at least as good as #2060 and #2234.","Because the SecRequestBodyLimit is usually higher, and it contains the whole request body. Usually the users must to keep as ""high"" (for eg. check the uploaded files...), but if there is no file upload, everyone can tune the body limit for the other part of request body (excluded the files).
You wrote that you understand why was that implemented, and 13 years passed - yes, but it's still available in v2... so I don't understand why do you ask this. :(",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2265,2020-02-11T21:12:26Z,2020-02-12T14:03:47Z,2021-12-17T20:00:02Z,CLOSED,False,525,0,3,https://github.com/airween,Finish the SecRequestBodyNoFilesLimit configuration parameter,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2265,https://github.com/zimmerle,9,https://github.com/SpiderLabs/ModSecurity/pull/2265#issuecomment-585219600,"It looks like the SecRequestBodyNoFilesLimit configuration parameter is only half done, not much was missing.
Is there any reason it's just almost done? I mean any kind of security risk/issue (you just ignored it during the developing...). As you can see, there isn't so much addition code.
May be it's not what you expected (or planned), so if you have any idea, please let me know.
I think this missing feature would be at least as good as #2060 and #2234.",Giving your use case scenario I may point you towards the right manner to achieve the level of protection that you want with ModSecurity v3 or even consider to support this. Without understanding what you aiming to do it will be very hard to help you. I am closing this until hear a solid use case for this feature.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2265,2020-02-11T21:12:26Z,2020-02-12T14:03:47Z,2021-12-17T20:00:02Z,CLOSED,False,525,0,3,https://github.com/airween,Finish the SecRequestBodyNoFilesLimit configuration parameter,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2265,https://github.com/airween,10,https://github.com/SpiderLabs/ModSecurity/pull/2265#issuecomment-585223745,"It looks like the SecRequestBodyNoFilesLimit configuration parameter is only half done, not much was missing.
Is there any reason it's just almost done? I mean any kind of security risk/issue (you just ignored it during the developing...). As you can see, there isn't so much addition code.
May be it's not what you expected (or planned), so if you have any idea, please let me know.
I think this missing feature would be at least as good as #2060 and #2234.","Right, thanks.
Just one question (again): could you tell me why did you started (and almost finished) this feature, if you saw that unnecessary?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2265,2020-02-11T21:12:26Z,2020-02-12T14:03:47Z,2021-12-17T20:00:02Z,CLOSED,False,525,0,3,https://github.com/airween,Finish the SecRequestBodyNoFilesLimit configuration parameter,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2265,https://github.com/dune73,11,https://github.com/SpiderLabs/ModSecurity/pull/2265#issuecomment-585800996,"It looks like the SecRequestBodyNoFilesLimit configuration parameter is only half done, not much was missing.
Is there any reason it's just almost done? I mean any kind of security risk/issue (you just ignored it during the developing...). As you can see, there isn't so much addition code.
May be it's not what you expected (or planned), so if you have any idea, please let me know.
I think this missing feature would be at least as good as #2060 and #2234.","@zimmerle : I think the loophole and the reason this was implemented 13 years ago still stands.
You describe the use case as not solid. But I see it as solid and the attack vector as very real: This directive helps to prevent DoS via large urlencoded POSTs while still allowing bigger file uploads. I do not see how you could prevent this with other means. But instead of explaining your reasoning, you declare the use case as unsolid and promptly reject @airween's pull request. I perceive this as unfriendly behavior.
You are free to run the ModSecurity project like this, but it harms future 3rd party contributions. And I think it harms ModSecurity as a whole.",True,"{'THUMBS_UP': ['https://github.com/theMiddleBlue', 'https://github.com/franbuehler', 'https://github.com/fzipi', 'https://github.com/zimmerle', 'https://github.com/gullu44'], 'EYES': ['https://github.com/zimmerle']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2265,2020-02-11T21:12:26Z,2020-02-12T14:03:47Z,2021-12-17T20:00:02Z,CLOSED,False,525,0,3,https://github.com/airween,Finish the SecRequestBodyNoFilesLimit configuration parameter,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2265,https://github.com/martinhsv,12,https://github.com/SpiderLabs/ModSecurity/pull/2265#issuecomment-585831814,"It looks like the SecRequestBodyNoFilesLimit configuration parameter is only half done, not much was missing.
Is there any reason it's just almost done? I mean any kind of security risk/issue (you just ignored it during the developing...). As you can see, there isn't so much addition code.
May be it's not what you expected (or planned), so if you have any idea, please let me know.
I think this missing feature would be at least as good as #2060 and #2234.","Hi @dune73 ,
Just so I better understand the substantive technical concern, is it fair to say that you see the DoS risk as primarily computational (e.g. large volume of input being processed against many rules)?  ... And not so much about things like memory consumption, for example?
If so, would your concern be alleviated if were to merge the pull request for SecArgumentsLimit as described here?:
#2060
#2234",True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2265,2020-02-11T21:12:26Z,2020-02-12T14:03:47Z,2021-12-17T20:00:02Z,CLOSED,False,525,0,3,https://github.com/airween,Finish the SecRequestBodyNoFilesLimit configuration parameter,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2265,https://github.com/dune73,13,https://github.com/SpiderLabs/ModSecurity/pull/2265#issuecomment-585943315,"It looks like the SecRequestBodyNoFilesLimit configuration parameter is only half done, not much was missing.
Is there any reason it's just almost done? I mean any kind of security risk/issue (you just ignored it during the developing...). As you can see, there isn't so much addition code.
May be it's not what you expected (or planned), so if you have any idea, please let me know.
I think this missing feature would be at least as good as #2060 and #2234.","Hey @martinhsv,
Thank you for this interesting alternative. I think SecArgumentsLimit is a welcome addition to the arsenal and I support its merging.
However, it does not address the specific use case SecRequestBodyNoFilesLimit was created for. The risk I see primarily affects bandwidth, probably cpu and possibly also memory, but I am unsure to what extent without examining the behavior of the binary.
Suppose we have a file payload.txt starting with ""x=1234..."" and a size of 10MB. Setting SecArgumentsLimit to 1 will allow the submission of this file if we do it as follows:
$> curl http://localhost -d ""@payload.txt""

If I block the upload via SecRequestBodyLimit, this request has a total duration of 8000+ microseconds on Apache (ModSec 2.9.3 here)
However, if I set SecRequestBodyNoFilesLimit to 1024, then the duration is only 500+ microseconds. And file uploads up to 10MB are still possible, which is a necessity for certain setups.
I can try and block the request in phase 1 via a limit on the Content-Length header. This is even faster (380+ microseconds) since the request is blocked before the body reception even starts.
However, the attacker can circumvent this rule by using Transfer-Encoding as follows:
$> curl http://localhost -d ""@payload.txt"" -H ""Content-Length:"" -H ""Transfer-Encoding: chunked""

With this we are back at 8K microseconds and I can't see how I could reduce this without SecRequestBodyNoFilesLimit.
So the directive saves me 7 milliseconds on an application DoS request. This is quite substantial. That's why I think this directive is useful. The use case is limited, but DoS against ModSec is really hard to fight and this is one of the weapons that we can use. This is aggrevated by the uncomfortable fact that CRS still has a few rules that come with Regular Expression DoS problems. We are weeding them out one after the other, but we are not yet there and using SecRequestBodyNoFilesLimit is a mitigation strategy.
Now there is more to this from a policy viewpoint. ModSec 3 was announced as a feature complete rewrite of ModSec 2. In this particular case ModSec 3 accepts the directive, but ignores it silently. I'm glad @airween discovered this shortcoming. Before this, I was not aware that the advice I was giving to people was in fact futile.
On top, the ModSec Handbook advertises the directive as a useful tool and many, many people use it, completely unaware that an upgrade to ModSec 3 opened their risk vs. App Level DoS - or the risk of an App Level DoS is now an additional reason to not upgrade to ModSec 3.
Now whatever is documented for ModSec 2 is not set in stone. Declaring certain directives and constructs legacy and asking people to move away from them is a necessity from time to time. Maybe SecRequestBodyNoFilesLimit is such a directive and there are good reasons to axe it. But if that is the case, I miss the reasoning and the considerate message that explains this decision to the community.
Kind regards,
Christian",True,"{'THUMBS_UP': ['https://github.com/airween', 'https://github.com/franbuehler', 'https://github.com/jeremyjpj0916']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2265,2020-02-11T21:12:26Z,2020-02-12T14:03:47Z,2021-12-17T20:00:02Z,CLOSED,False,525,0,3,https://github.com/airween,Finish the SecRequestBodyNoFilesLimit configuration parameter,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2265,https://github.com/mmelo-yottaa,14,https://github.com/SpiderLabs/ModSecurity/pull/2265#issuecomment-585981126,"It looks like the SecRequestBodyNoFilesLimit configuration parameter is only half done, not much was missing.
Is there any reason it's just almost done? I mean any kind of security risk/issue (you just ignored it during the developing...). As you can see, there isn't so much addition code.
May be it's not what you expected (or planned), so if you have any idea, please let me know.
I think this missing feature would be at least as good as #2060 and #2234.","Hi Christian -
Just to completely understand MS2 - how does SecRequestBodyNoFilesLimit determine the block in .5 msec vs SecRequestBodyLimit requiring 8 msec (both processing  a 1024byte payload)?    Is this a function of how MS2 implemented each of these?  Does SecRequestBodyNoFilesLimit happen earlier in request processing?  Thanks for any insight!
Mike M.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2265,2020-02-11T21:12:26Z,2020-02-12T14:03:47Z,2021-12-17T20:00:02Z,CLOSED,False,525,0,3,https://github.com/airween,Finish the SecRequestBodyNoFilesLimit configuration parameter,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2265,https://github.com/dune73,15,https://github.com/SpiderLabs/ModSecurity/pull/2265#issuecomment-586001640,"It looks like the SecRequestBodyNoFilesLimit configuration parameter is only half done, not much was missing.
Is there any reason it's just almost done? I mean any kind of security risk/issue (you just ignored it during the developing...). As you can see, there isn't so much addition code.
May be it's not what you expected (or planned), so if you have any idea, please let me know.
I think this missing feature would be at least as good as #2060 and #2234.","Hey @mmelo-yottaa,
No, it's a 10MB payload, but the SecRequestBodyNoFilesLimit stops the processing earlier. I do not really know the implementation - @airween and his PR above would know - but I presume it somehow stops receiving the data when the limit is reached. So accepting 1K vs 10,000K.",True,{'THUMBS_UP': ['https://github.com/airween']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2265,2020-02-11T21:12:26Z,2020-02-12T14:03:47Z,2021-12-17T20:00:02Z,CLOSED,False,525,0,3,https://github.com/airween,Finish the SecRequestBodyNoFilesLimit configuration parameter,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2265,https://github.com/airween,16,https://github.com/SpiderLabs/ModSecurity/pull/2265#issuecomment-586006897,"It looks like the SecRequestBodyNoFilesLimit configuration parameter is only half done, not much was missing.
Is there any reason it's just almost done? I mean any kind of security risk/issue (you just ignored it during the developing...). As you can see, there isn't so much addition code.
May be it's not what you expected (or planned), so if you have any idea, please let me know.
I think this missing feature would be at least as good as #2060 and #2234.","Hí  @mmelo-yottaa, that's the point, what @dune73 described.
Consider you know that your application needs maximum 1-2k of payload (JSON/XML/form-data) BUT sometimes you want to upload a file with size 1M.
If the request without file is greather than this value, then you can drop it, but in case of file upload, you can inspect it.",True,{'THUMBS_UP': ['https://github.com/dune73']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2265,2020-02-11T21:12:26Z,2020-02-12T14:03:47Z,2021-12-17T20:00:02Z,CLOSED,False,525,0,3,https://github.com/airween,Finish the SecRequestBodyNoFilesLimit configuration parameter,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2265,https://github.com/zimmerle,17,https://github.com/SpiderLabs/ModSecurity/pull/2265#issuecomment-586036400,"It looks like the SecRequestBodyNoFilesLimit configuration parameter is only half done, not much was missing.
Is there any reason it's just almost done? I mean any kind of security risk/issue (you just ignored it during the developing...). As you can see, there isn't so much addition code.
May be it's not what you expected (or planned), so if you have any idea, please let me know.
I think this missing feature would be at least as good as #2060 and #2234.","Just so I better understand the substantive technical concern, is it fair to say that you see the DoS risk as primarily computational (e.g. large volume of input being processed against many rules)? ... And not so much about things like memory consumption, for example?
If so, would your concern be alleviated if were to merge the pull request for SecArgumentsLimit as described here?:
#2060
#2234

Well mentioned @martinhsv. I think that seems to be o good alternative. The pull request #2234 is already reviewed and will be merged as soon as possible. Is there any use case that #2234 is not covering?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2265,2020-02-11T21:12:26Z,2020-02-12T14:03:47Z,2021-12-17T20:00:02Z,CLOSED,False,525,0,3,https://github.com/airween,Finish the SecRequestBodyNoFilesLimit configuration parameter,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2265,https://github.com/martinhsv,18,https://github.com/SpiderLabs/ModSecurity/pull/2265#issuecomment-586109630,"It looks like the SecRequestBodyNoFilesLimit configuration parameter is only half done, not much was missing.
Is there any reason it's just almost done? I mean any kind of security risk/issue (you just ignored it during the developing...). As you can see, there isn't so much addition code.
May be it's not what you expected (or planned), so if you have any idea, please let me know.
I think this missing feature would be at least as good as #2060 and #2234.","Hey @zimmerle ,  #2234 addresses the case where there is a large number of arguments (where each one may be a small number of bytes).  He is suggesting the inverse scenario, where the number of arguments is small, but at least one of which is very long (possibly multiple megabytes).  I did a bit of testing with that scenario in v3 and it's a case at least worth thinking about.
@dune73 :  Thanks for the detailed explanation.
I don't believe the code in this pull request will do anything special like short-circuit the loading-into-memory of the body if the limit is exceeded.
What it can do, if the limit is exceeded, is prevent evaluation of any of the phase:2 rules that come after the rule that tests REQBODY_ERROR.  That's not without value, of course, since running CRS phase:2 rules against a very large input can be quite expensive.
However, given that that is all it is doing, I suppose I'd wonder aloud whether other length-limiting options would be workable alternatives for the case you outline.  For example this way to test the length of each argument:
SecRule ARGS ""@gt 1024"" ""id:200007,phase:2,t:length,deny,status:400""

Or perhaps using ARGS_COMBINED_SIZE to test the total.
I guess I just want to make sure we understand what the functional requirement is, and that a particular implementation both satisfies that and is the best tool to do so.
Cheers,
Martin",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2265,2020-02-11T21:12:26Z,2020-02-12T14:03:47Z,2021-12-17T20:00:02Z,CLOSED,False,525,0,3,https://github.com/airween,Finish the SecRequestBodyNoFilesLimit configuration parameter,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2265,https://github.com/dune73,19,https://github.com/SpiderLabs/ModSecurity/pull/2265#issuecomment-586148018,"It looks like the SecRequestBodyNoFilesLimit configuration parameter is only half done, not much was missing.
Is there any reason it's just almost done? I mean any kind of security risk/issue (you just ignored it during the developing...). As you can see, there isn't so much addition code.
May be it's not what you expected (or planned), so if you have any idea, please let me know.
I think this missing feature would be at least as good as #2060 and #2234.","Hi @martinhsv, glad you see some value in the use case.
And unfortunate, the bandwidth is consumed and all that we save is the body processor resources thanks to SecRequestBodyNoFilesLimit. The idea of dropping of the connection while it's being received was probably wishful thinking on my behalf.
But anyways, if the BodyProcessor eats 7 milliseconds and I can save that, then it's useful on my server.
Now your proposals make a lot of sense and running rules working on &ARGS and ARGS_COMBINED_SIZE all have merit; hence the rules 920360-920410 in CRS. And I'm sure there is more that can be done in this regard - those rules have not seen any review since a long time AFAICS.
The problem with all this is of course that it's running in phase 2 and you need to make sure it's running early in phase 2 and deny immediately - not the scoring approach of CRS.
So all things considered, I believe SecRequestBodyNoFilesLimit is still the superior approach and I can't see it having any disadvantage other than adding a directive to the code. What is the reason it no longer being supported.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2265,2020-02-11T21:12:26Z,2020-02-12T14:03:47Z,2021-12-17T20:00:02Z,CLOSED,False,525,0,3,https://github.com/airween,Finish the SecRequestBodyNoFilesLimit configuration parameter,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2265,https://github.com/airween,20,https://github.com/SpiderLabs/ModSecurity/pull/2265#issuecomment-586157810,"It looks like the SecRequestBodyNoFilesLimit configuration parameter is only half done, not much was missing.
Is there any reason it's just almost done? I mean any kind of security risk/issue (you just ignored it during the developing...). As you can see, there isn't so much addition code.
May be it's not what you expected (or planned), so if you have any idea, please let me know.
I think this missing feature would be at least as good as #2060 and #2234.","Hi @martinhsv,

I don't believe the code in this pull request will do anything special like short-circuit the loading-into-memory of the body if the limit is exceeded.

yes, you're right. It's follow the behavior of ModSec2.
I think there are two possible places where we can compare the length of the body with variable NoFilesLimit: when the engine got it (
  
    
      ModSecurity/src/transaction.cc
    
    
         Line 990
      in
      4e9ba44
    
  
  
    

        
          
           int Transaction::appendRequestBody(const unsigned char *buf, size_t len) { 
        
    
  

), and when the engine processes the body.
In first case, we have to check the CT header, I don't like this solution.
In my solution I check it when the body processor finished - may be I can move this comparison before it starts - what do you think about it?
Anyway, the sent code is slower than this proposal, but - if I understand correctly - the problem was that it's unusable. If you see this could be helpful, I can rewrite this feature. In other case, I won't work on this anymore.

For example this way to test the length of each argument:

Thanks - anyway, I think the SecArgumentsLimit also can replaceable by
SecRule &ARGS ""@gt 1"" ""id:200007,phase:2,t:length,deny,status:400""
but of course, this can only be verified, when all arguments processed. Your solution is faster.
Further insight, that the used configuration variables SecRequestBodyNoFilesLimit or SecArgumentsLimit can be used independently of the rule set. Checking these values in rule set is a bit complicated for a user.
And just one more note: none of the &ARGS or SecArgumentsLimit can check the related attribute of XML content.",True,"{'THUMBS_UP': ['https://github.com/dune73', 'https://github.com/martinhsv']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2265,2020-02-11T21:12:26Z,2020-02-12T14:03:47Z,2021-12-17T20:00:02Z,CLOSED,False,525,0,3,https://github.com/airween,Finish the SecRequestBodyNoFilesLimit configuration parameter,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2265,https://github.com/BasLangenberg,21,https://github.com/SpiderLabs/ModSecurity/pull/2265#issuecomment-990703208,"It looks like the SecRequestBodyNoFilesLimit configuration parameter is only half done, not much was missing.
Is there any reason it's just almost done? I mean any kind of security risk/issue (you just ignored it during the developing...). As you can see, there isn't so much addition code.
May be it's not what you expected (or planned), so if you have any idea, please let me know.
I think this missing feature would be at least as good as #2060 and #2234.","We ran into this issue and wrote a custom rule to enforce a lower NoFiles Limit for our API endpoints.
    SecRule REQUEST_URI ""/api/"" \
      ""phase:1,\
      id:400900,\
      log,\
      deny,\
      chain""
    SecRule REQUEST_HEADERS:Content-Length ""@gt 1048576"" ""chain""
    SecRule REQUEST_HEADERS:Content-Type ""!@rx ^(multipart/form-data|application/x-www-form-urlencoded)$""

This might help out others running into the same issue.
@airween  / @martinhsv We still see merit in implementing the SecRequestBodyNoFilesLimit as it would simplify our configuration, and it is less error prone than a custom rule. If you have feedback on our rule, that would be very much appreciated as well!",True,{'THUMBS_UP': ['https://github.com/osamamaruf']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2265,2020-02-11T21:12:26Z,2020-02-12T14:03:47Z,2021-12-17T20:00:02Z,CLOSED,False,525,0,3,https://github.com/airween,Finish the SecRequestBodyNoFilesLimit configuration parameter,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2265,https://github.com/airween,22,https://github.com/SpiderLabs/ModSecurity/pull/2265#issuecomment-991888984,"It looks like the SecRequestBodyNoFilesLimit configuration parameter is only half done, not much was missing.
Is there any reason it's just almost done? I mean any kind of security risk/issue (you just ignored it during the developing...). As you can see, there isn't so much addition code.
May be it's not what you expected (or planned), so if you have any idea, please let me know.
I think this missing feature would be at least as good as #2060 and #2234.","@BasLangenberg after a quick view I think your solution can help to solve the original issue - but it works only if the engine (SecruleEngine) is On.  If it is in DetectionOnly, then the payload can overload the engine.
I'm not professional in HTTP/2, but as I know the Content-Length header is not mandatory in that case, so possible this solution can't work then too. May be the checking of &REQUEST_BODY in phase:2 would be better in that case.
Btw: yes, I still think that the implementation of SecRequestBodyNoFilesLimit would be fine.",True,{'THUMBS_UP': ['https://github.com/osamamaruf']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2265,2020-02-11T21:12:26Z,2020-02-12T14:03:47Z,2021-12-17T20:00:02Z,CLOSED,False,525,0,3,https://github.com/airween,Finish the SecRequestBodyNoFilesLimit configuration parameter,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2265,https://github.com/martinhsv,23,https://github.com/SpiderLabs/ModSecurity/pull/2265#issuecomment-996998316,"It looks like the SecRequestBodyNoFilesLimit configuration parameter is only half done, not much was missing.
Is there any reason it's just almost done? I mean any kind of security risk/issue (you just ignored it during the developing...). As you can see, there isn't so much addition code.
May be it's not what you expected (or planned), so if you have any idea, please let me know.
I think this missing feature would be at least as good as #2060 and #2234.","Hi @BasLangenberg ,
I'm fine with revisiting the possibility of implementing SecRequestBodyNoFilesLimit in ModSecurity v3.
In your deployment, what use case(s) would this be helpful with?  I.e. what are you using the substitute custom rule to protect against?
(It's quite useful to have particular cases in mind.  This is partly to make sure reasonable alternatives don't already exist, but also to ensure that the chosen implementation actual addresses the use case(s) of concern.)",True,{'THUMBS_UP': ['https://github.com/dune73']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2295,2020-04-16T06:21:04Z,2020-05-21T17:34:11Z,2020-05-21T17:34:12Z,MERGED,True,1,1,1,https://github.com/rjshrjndrn,Fixing Typo,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2295,https://github.com/rjshrjndrn,1,https://github.com/SpiderLabs/ModSecurity/pull/2295,,,True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2297,2020-04-22T19:35:15Z,2020-11-30T21:23:13Z,2020-11-30T21:23:14Z,CLOSED,False,100,5,6,https://github.com/airween,V3/collection re fix,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2297,https://github.com/airween,1,https://github.com/SpiderLabs/ModSecurity/pull/2297,"This PR is the cleaned version of #2107.
I've updated my local branch and forked a new one from current v3/master. Contains only one necessary commit, changed the variable name for better readability.
Edit: this PR fixes the #2296.","This PR is the cleaned version of #2107.
I've updated my local branch and forked a new one from current v3/master. Contains only one necessary commit, changed the variable name for better readability.
Edit: this PR fixes the #2296.",True,{'THUMBS_UP': ['https://github.com/jeremyjpj0916']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2297,2020-04-22T19:35:15Z,2020-11-30T21:23:13Z,2020-11-30T21:23:14Z,CLOSED,False,100,5,6,https://github.com/airween,V3/collection re fix,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2297,https://github.com/martinhsv,2,https://github.com/SpiderLabs/ModSecurity/pull/2297#issuecomment-653656012,"This PR is the cleaned version of #2107.
I've updated my local branch and forked a new one from current v3/master. Contains only one necessary commit, changed the variable name for better readability.
Edit: this PR fixes the #2296.","A couple of observations:

What if someone wanted to write a rule where they did indeed want the TX:/[regex-content]/ to be case sensitive?  Wouldn't these code changes make that impossible?
Would your use case be satisfied by instead modifying the regex itself.  For example in your first test use something like 'TX:/^(?i)HEADER_NAME_/ ' ?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2297,2020-04-22T19:35:15Z,2020-11-30T21:23:13Z,2020-11-30T21:23:14Z,CLOSED,False,100,5,6,https://github.com/airween,V3/collection re fix,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2297,https://github.com/airween,3,https://github.com/SpiderLabs/ModSecurity/pull/2297#issuecomment-653665308,"This PR is the cleaned version of #2107.
I've updated my local branch and forked a new one from current v3/master. Contains only one necessary commit, changed the variable name for better readability.
Edit: this PR fixes the #2296.","Hi @martinhsv,

1. What if someone wanted to write a rule where they did indeed want the TX:/[regex-content]/ to be case sensitive?  Wouldn't these code changes make that impossible?


If someone wants to do that, how can he/she does it in case of mod_security2? The expected mode is case insensitive (but the documentation doesn't contain it).
I think if you want to implement this feature, it would be more correct to introduce some new syntax (and make the relevant code).

2. Would your use case be satisfied by instead modifying the regex itself.  For example in your first test use something like 'TX:/^(?i)HEADER_NAME_/ ' ?


Yes, that works as well - but you can see there are two issues about this problem (#2296, #1808) and one PR (#1810), so I think the users accustomed this form.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2297,2020-04-22T19:35:15Z,2020-11-30T21:23:13Z,2020-11-30T21:23:14Z,CLOSED,False,100,5,6,https://github.com/airween,V3/collection re fix,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2297,https://github.com/martinhsv,4,https://github.com/SpiderLabs/ModSecurity/pull/2297#issuecomment-714663418,"This PR is the cleaned version of #2107.
I've updated my local branch and forked a new one from current v3/master. Contains only one necessary commit, changed the variable name for better readability.
Edit: this PR fixes the #2296.","Hi @airween ,
First off, apologies for the delay.
I previously expressed some reservations about the change.  I have put some more thought into this and am persuaded that this is the right thing to do.
A couple of reasons:

Given that exact names in the VARIABLES portion of a rule (e.g. ARGS:myid) are treated as case insensitive, making the regex equivalent (ARGS:/myid/) behave likewise is good for consistency
this change probably doesn't reduce user flexibility as much as I had feared.  For example, in PCRE if a rule writer specifically wants to make the test case sensitive, one can prefix the main portion of the pattern with (?i-).  (Not to mention that the cases where one has a compelling reason to do this are likely rare.)

(We also wanted to check that some futures features, such as supporting PCRE alternatives, would be unlikely to be hampered by this change.)
@zimmerle and I discussed this earlier today, and I don't think we have any further concerns.
This should get merged within a few days.",True,"{'THUMBS_UP': ['https://github.com/zimmerle'], 'HOORAY': ['https://github.com/dune73']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2297,2020-04-22T19:35:15Z,2020-11-30T21:23:13Z,2020-11-30T21:23:14Z,CLOSED,False,100,5,6,https://github.com/airween,V3/collection re fix,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2297,https://github.com/airween,5,https://github.com/SpiderLabs/ModSecurity/pull/2297#issuecomment-714720891,"This PR is the cleaned version of #2107.
I've updated my local branch and forked a new one from current v3/master. Contains only one necessary commit, changed the variable name for better readability.
Edit: this PR fixes the #2296.","Hi @martinhsv,

This should get merged within a few days.

Thanks, it's good to read :).",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2297,2020-04-22T19:35:15Z,2020-11-30T21:23:13Z,2020-11-30T21:23:14Z,CLOSED,False,100,5,6,https://github.com/airween,V3/collection re fix,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2297,https://github.com/airween,6,https://github.com/SpiderLabs/ModSecurity/pull/2297#issuecomment-715587197,"This PR is the cleaned version of #2107.
I've updated my local branch and forked a new one from current v3/master. Contains only one necessary commit, changed the variable name for better readability.
Edit: this PR fixes the #2296.","@airween let me know if you have any doubts or concerns on my comments.

See my answers and the new commit: ceb0e38.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2297,2020-04-22T19:35:15Z,2020-11-30T21:23:13Z,2020-11-30T21:23:14Z,CLOSED,False,100,5,6,https://github.com/airween,V3/collection re fix,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2297,https://github.com/zimmerle,7,https://github.com/SpiderLabs/ModSecurity/pull/2297#issuecomment-736064933,"This PR is the cleaned version of #2107.
I've updated my local branch and forked a new one from current v3/master. Contains only one necessary commit, changed the variable name for better readability.
Edit: this PR fixes the #2296.",Closing this as consequence of 910a187. Thanks everybody involved on this issue resolution.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2304,2020-05-01T03:28:51Z,,2022-04-29T17:38:38Z,OPEN,False,144,1,13,https://github.com/brandonpayton,Support reopening audit logs,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2304,https://github.com/brandonpayton,1,https://github.com/SpiderLabs/ModSecurity/pull/2304,"This PR adds support for reopening log files by:

Exposing an msc_rules_reopen_audit_log(rules, error) function to trigger audit log reopen for a given rules set
Adding a reopen(error) method to AuditLog
Adding a reopen(error) method to the audit log Writer interface
Adding a reopen(filename, error) method to SharedFiles

⚠️ Currently, I do not believe SharedFiles::reopen() to be thread-safe, and thread-safety must be ensured by the caller. Even if the SharedFiles general lock could be used, we may not want to lock for all SharedFile writes. Please let me know if you'd like to resolve the issue as part of this PR or a later PR.
This is based on work to support ModSecurity audit log rotation within Automattic. It is used in a ModSecurity-nginx patch, and the PR for that is here.
resolves #1968","This PR adds support for reopening log files by:

Exposing an msc_rules_reopen_audit_log(rules, error) function to trigger audit log reopen for a given rules set
Adding a reopen(error) method to AuditLog
Adding a reopen(error) method to the audit log Writer interface
Adding a reopen(filename, error) method to SharedFiles

⚠️ Currently, I do not believe SharedFiles::reopen() to be thread-safe, and thread-safety must be ensured by the caller. Even if the SharedFiles general lock could be used, we may not want to lock for all SharedFile writes. Please let me know if you'd like to resolve the issue as part of this PR or a later PR.
This is based on work to support ModSecurity audit log rotation within Automattic. It is used in a ModSecurity-nginx patch, and the PR for that is here.
resolves #1968",True,"{'THUMBS_UP': ['https://github.com/zimmerle', 'https://github.com/nikolas', 'https://github.com/JakubOnderka']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2304,2020-05-01T03:28:51Z,,2022-04-29T17:38:38Z,OPEN,False,144,1,13,https://github.com/brandonpayton,Support reopening audit logs,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2304,https://github.com/brandonpayton,2,https://github.com/SpiderLabs/ModSecurity/pull/2304#issuecomment-622471847,"This PR adds support for reopening log files by:

Exposing an msc_rules_reopen_audit_log(rules, error) function to trigger audit log reopen for a given rules set
Adding a reopen(error) method to AuditLog
Adding a reopen(error) method to the audit log Writer interface
Adding a reopen(filename, error) method to SharedFiles

⚠️ Currently, I do not believe SharedFiles::reopen() to be thread-safe, and thread-safety must be ensured by the caller. Even if the SharedFiles general lock could be used, we may not want to lock for all SharedFile writes. Please let me know if you'd like to resolve the issue as part of this PR or a later PR.
This is based on work to support ModSecurity audit log rotation within Automattic. It is used in a ModSecurity-nginx patch, and the PR for that is here.
resolves #1968",This is failing cppcheck. Will take a look and fix.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2304,2020-05-01T03:28:51Z,,2022-04-29T17:38:38Z,OPEN,False,144,1,13,https://github.com/brandonpayton,Support reopening audit logs,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2304,https://github.com/brandonpayton,3,https://github.com/SpiderLabs/ModSecurity/pull/2304#issuecomment-622490339,"This PR adds support for reopening log files by:

Exposing an msc_rules_reopen_audit_log(rules, error) function to trigger audit log reopen for a given rules set
Adding a reopen(error) method to AuditLog
Adding a reopen(error) method to the audit log Writer interface
Adding a reopen(filename, error) method to SharedFiles

⚠️ Currently, I do not believe SharedFiles::reopen() to be thread-safe, and thread-safety must be ensured by the caller. Even if the SharedFiles general lock could be used, we may not want to lock for all SharedFile writes. Please let me know if you'd like to resolve the issue as part of this PR or a later PR.
This is based on work to support ModSecurity audit log rotation within Automattic. It is used in a ModSecurity-nginx patch, and the PR for that is here.
resolves #1968","Actually, the warning appears to be unrelated to this patch:

warning: src/utils/shared_files.h,88,performance,useInitializationList,When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don't explicitly write them to the initialization list. You could avoid assigning 'm_memKeyStructure' a value by passing the value to the constructor in the initialization list.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2304,2020-05-01T03:28:51Z,,2022-04-29T17:38:38Z,OPEN,False,144,1,13,https://github.com/brandonpayton,Support reopening audit logs,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2304,https://github.com/brandonpayton,4,https://github.com/SpiderLabs/ModSecurity/pull/2304#issuecomment-622492771,"This PR adds support for reopening log files by:

Exposing an msc_rules_reopen_audit_log(rules, error) function to trigger audit log reopen for a given rules set
Adding a reopen(error) method to AuditLog
Adding a reopen(error) method to the audit log Writer interface
Adding a reopen(filename, error) method to SharedFiles

⚠️ Currently, I do not believe SharedFiles::reopen() to be thread-safe, and thread-safety must be ensured by the caller. Even if the SharedFiles general lock could be used, we may not want to lock for all SharedFile writes. Please let me know if you'd like to resolve the issue as part of this PR or a later PR.
This is based on work to support ModSecurity audit log rotation within Automattic. It is used in a ModSecurity-nginx patch, and the PR for that is here.
resolves #1968","Sorry, I was incorrect. The previous warning is the only warning I'm seeing on my dev machine.
There is a relevant warning from TravisCI running make check-static:

warning: src/utils/shared_files.h,60,style,functionConst,The member function 'modsecurity::utils::SharedFiles::reopen' can be made a const function. Making this function 'const' should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2304,2020-05-01T03:28:51Z,,2022-04-29T17:38:38Z,OPEN,False,144,1,13,https://github.com/brandonpayton,Support reopening audit logs,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2304,https://github.com/brandonpayton,5,https://github.com/SpiderLabs/ModSecurity/pull/2304#issuecomment-622497666,"This PR adds support for reopening log files by:

Exposing an msc_rules_reopen_audit_log(rules, error) function to trigger audit log reopen for a given rules set
Adding a reopen(error) method to AuditLog
Adding a reopen(error) method to the audit log Writer interface
Adding a reopen(filename, error) method to SharedFiles

⚠️ Currently, I do not believe SharedFiles::reopen() to be thread-safe, and thread-safety must be ensured by the caller. Even if the SharedFiles general lock could be used, we may not want to lock for all SharedFile writes. Please let me know if you'd like to resolve the issue as part of this PR or a later PR.
This is based on work to support ModSecurity audit log rotation within Automattic. It is used in a ModSecurity-nginx patch, and the PR for that is here.
resolves #1968",I added the above warning to the cppcheck suppressions list because SharedFiles::reopen() does change SharedFiles internal state.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2304,2020-05-01T03:28:51Z,,2022-04-29T17:38:38Z,OPEN,False,144,1,13,https://github.com/brandonpayton,Support reopening audit logs,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2304,https://github.com/brandonpayton,6,https://github.com/SpiderLabs/ModSecurity/pull/2304#issuecomment-633830069,"This PR adds support for reopening log files by:

Exposing an msc_rules_reopen_audit_log(rules, error) function to trigger audit log reopen for a given rules set
Adding a reopen(error) method to AuditLog
Adding a reopen(error) method to the audit log Writer interface
Adding a reopen(filename, error) method to SharedFiles

⚠️ Currently, I do not believe SharedFiles::reopen() to be thread-safe, and thread-safety must be ensured by the caller. Even if the SharedFiles general lock could be used, we may not want to lock for all SharedFile writes. Please let me know if you'd like to resolve the issue as part of this PR or a later PR.
This is based on work to support ModSecurity audit log rotation within Automattic. It is used in a ModSecurity-nginx patch, and the PR for that is here.
resolves #1968","Regarding thread-safety:
I was reading the nginx source this evening and noticed it redirects stderr using a POSIX function, dup2. dup2 takes an old and a new descriptor and atomically retargets the new to refer to the old. As evidence, both glibc docs and POSIX docs (requires login) state that dup2 should be atomic.
This looks like a good way to address the thread-safety issue with the current SharedFiles::reopen() in this PR.
MS also provides an implementation of dup2 for POSIX compliance, and given that the POSIX docs require atomicity, it seems like this should be thread-safe on Windows as well.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2304,2020-05-01T03:28:51Z,,2022-04-29T17:38:38Z,OPEN,False,144,1,13,https://github.com/brandonpayton,Support reopening audit logs,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2304,https://github.com/JokerQyou,7,https://github.com/SpiderLabs/ModSecurity/pull/2304#issuecomment-906040113,"This PR adds support for reopening log files by:

Exposing an msc_rules_reopen_audit_log(rules, error) function to trigger audit log reopen for a given rules set
Adding a reopen(error) method to AuditLog
Adding a reopen(error) method to the audit log Writer interface
Adding a reopen(filename, error) method to SharedFiles

⚠️ Currently, I do not believe SharedFiles::reopen() to be thread-safe, and thread-safety must be ensured by the caller. Even if the SharedFiles general lock could be used, we may not want to lock for all SharedFile writes. Please let me know if you'd like to resolve the issue as part of this PR or a later PR.
This is based on work to support ModSecurity audit log rotation within Automattic. It is used in a ModSecurity-nginx patch, and the PR for that is here.
resolves #1968",What's the current status of this PR?,True,{'THUMBS_UP': ['https://github.com/piotrkardasz']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2304,2020-05-01T03:28:51Z,,2022-04-29T17:38:38Z,OPEN,False,144,1,13,https://github.com/brandonpayton,Support reopening audit logs,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2304,https://github.com/mike-mckenna,8,https://github.com/SpiderLabs/ModSecurity/pull/2304#issuecomment-1113562338,"This PR adds support for reopening log files by:

Exposing an msc_rules_reopen_audit_log(rules, error) function to trigger audit log reopen for a given rules set
Adding a reopen(error) method to AuditLog
Adding a reopen(error) method to the audit log Writer interface
Adding a reopen(filename, error) method to SharedFiles

⚠️ Currently, I do not believe SharedFiles::reopen() to be thread-safe, and thread-safety must be ensured by the caller. Even if the SharedFiles general lock could be used, we may not want to lock for all SharedFile writes. Please let me know if you'd like to resolve the issue as part of this PR or a later PR.
This is based on work to support ModSecurity audit log rotation within Automattic. It is used in a ModSecurity-nginx patch, and the PR for that is here.
resolves #1968","Is this pull request getting attention?  The code in this pull request will support the rotation of the audit log in Nginx.  More specifically, the code in this pull request is required before ModSecurity-nginx pull request SpiderLabs/ModSecurity-nginx#198 can proceed.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2315,2020-05-20T18:43:25Z,2020-05-20T21:46:00Z,2020-05-20T21:46:23Z,MERGED,True,1,1,1,https://github.com/nikolas,fix typo in readme: rearchitechted -> rearchitected,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2315,https://github.com/nikolas,1,https://github.com/SpiderLabs/ModSecurity/pull/2315,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2315,2020-05-20T18:43:25Z,2020-05-20T21:46:00Z,2020-05-20T21:46:23Z,MERGED,True,1,1,1,https://github.com/nikolas,fix typo in readme: rearchitechted -> rearchitected,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2315,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2315#issuecomment-631744509,,Thanks @nikolas,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2316,2020-05-21T00:16:13Z,2020-06-05T16:31:04Z,2020-06-05T17:51:03Z,CLOSED,False,1,1,1,https://github.com/nikolas,Travis: test on Ubuntu 18,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2316,https://github.com/nikolas,1,https://github.com/SpiderLabs/ModSecurity/pull/2316,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2316,2020-05-21T00:16:13Z,2020-06-05T16:31:04Z,2020-06-05T17:51:03Z,CLOSED,False,1,1,1,https://github.com/nikolas,Travis: test on Ubuntu 18,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2316,https://github.com/nikolas,2,https://github.com/SpiderLabs/ModSecurity/pull/2316#issuecomment-639613632,,I'm closing this until I get it passing.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2316,2020-05-21T00:16:13Z,2020-06-05T16:31:04Z,2020-06-05T17:51:03Z,CLOSED,False,1,1,1,https://github.com/nikolas,Travis: test on Ubuntu 18,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2316,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/2316#issuecomment-639665391,,"Hi @nikolas,
Moving to the latest build of Ubuntu changes the version of the dependencies. The cppcheck, in particular, is presenting some new stuff that wasn`t captured before. The fix for those new cppchecks outputs is treated on v3/dev/phases. The branch v3/dev/phases will be soon merged into v3/master. Your pull request was already rebased there at: 3490247
Thank you for your contribution.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2317,2020-05-21T00:51:56Z,2020-05-21T17:30:39Z,2020-05-21T17:30:39Z,MERGED,True,1,1,1,https://github.com/nikolas,Fix typo in readme: GtiHub -> GitHub,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2317,https://github.com/nikolas,1,https://github.com/SpiderLabs/ModSecurity/pull/2317,,,True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2321,2020-05-21T14:02:22Z,2020-05-21T17:29:38Z,2020-05-21T17:29:38Z,MERGED,True,1,1,1,https://github.com/nikolas,readme update: Packing -> Packaging,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2321,https://github.com/nikolas,1,https://github.com/SpiderLabs/ModSecurity/pull/2321,,,True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2322,2020-05-21T18:49:06Z,2020-05-21T18:54:04Z,2020-05-21T18:54:04Z,CLOSED,False,7,7,1,https://github.com/nikolas,README: fix spelling errors,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2322,https://github.com/nikolas,1,https://github.com/SpiderLabs/ModSecurity/pull/2322,,,True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2342,2020-06-18T14:24:19Z,2020-06-18T14:27:53Z,2020-06-18T14:27:53Z,MERGED,True,3,2,1,https://github.com/martinhsv,Correct CHANGES file entry for #2234,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2342,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2342,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2348,2020-06-29T13:18:14Z,2020-07-06T11:54:44Z,2020-07-06T14:11:50Z,MERGED,True,184,16,5,https://github.com/martinhsv,rx:exit after full match; fix TX population after unused group,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2348,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2348,"This pull request includes a functionality change to stop analyzing a string after a first full match.  In other words, additional full matches will no longer be scanned for like the /g flag does.","This pull request includes a functionality change to stop analyzing a string after a first full match.  In other words, additional full matches will no longer be scanned for like the /g flag does.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2353,2020-07-08T08:00:59Z,,2020-12-16T13:40:25Z,OPEN,False,1,1,1,https://github.com/zeridon,Add Cyrilyc charracters to unicode.mapping,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2353,https://github.com/zeridon,1,https://github.com/SpiderLabs/ModSecurity/pull/2353,"When using ModSecurity to protect sites written in non-english language a unicode mapping is required to translate characters to ascii (latin) equivalents. This is used in different places.
Most commonly (at least in my scenario) this falls on it heads when decoding strings and evaluating them for sql injection and similar nastiness.
If the mapping is incomplete (as currently is) the input is decoded to some garbage which triggers sql injection alert
Sample:
name1=%D0%B4%D0%B8%D0%BC%D0%B8%D1%82%D1%80%D0%BE%D0%B2 is decoded as name1: \\\\\\\\x135>@3852\ which strangely enough matches 1ov in libinjection (libinjection is not point of discussion here).
The issue is exactly the same as:

SpiderLabs/owasp-modsecurity-crs#794
#348
#1601

The following pull request adds mapping for some cyrilyc characters (at least for my use case). More speciffically unicode range 0x0410 - 0x44f. Attempt was made to follow as best transliteration rules, but as some glyphs are transliterated to multiple characters (e.g. Щ == SHT) some decissions have been made.
This has been tested and is currently being used in production.
Versions:

ModSecurity: 2.9.2 (ubuntu 18.04 packaged)
CRS: 3.0.2","When using ModSecurity to protect sites written in non-english language a unicode mapping is required to translate characters to ascii (latin) equivalents. This is used in different places.
Most commonly (at least in my scenario) this falls on it heads when decoding strings and evaluating them for sql injection and similar nastiness.
If the mapping is incomplete (as currently is) the input is decoded to some garbage which triggers sql injection alert
Sample:
name1=%D0%B4%D0%B8%D0%BC%D0%B8%D1%82%D1%80%D0%BE%D0%B2 is decoded as name1: \\\\\\\\x135>@3852\ which strangely enough matches 1ov in libinjection (libinjection is not point of discussion here).
The issue is exactly the same as:

SpiderLabs/owasp-modsecurity-crs#794
#348
#1601

The following pull request adds mapping for some cyrilyc characters (at least for my use case). More speciffically unicode range 0x0410 - 0x44f. Attempt was made to follow as best transliteration rules, but as some glyphs are transliterated to multiple characters (e.g. Щ == SHT) some decissions have been made.
This has been tested and is currently being used in production.
Versions:

ModSecurity: 2.9.2 (ubuntu 18.04 packaged)
CRS: 3.0.2",True,{'THUMBS_UP': ['https://github.com/wolfsoft']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2363,2020-07-17T09:58:52Z,2022-05-03T20:00:54Z,2022-05-03T20:00:54Z,CLOSED,False,63,2,3,https://github.com/marcstern,V2/json empty,2,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2363,https://github.com/marcstern,1,https://github.com/SpiderLabs/ModSecurity/pull/2363,"This accepts a valid JSON request with only a number or a string, nothing else.
Example:
--29000000-B--
POST /test/json/test.html HTTP/1.1
content-type: application/json
Host: test
Content-Length: 2
User-Agent: Mozilla 4.0
Accept: text/html, image/gif, image/jpeg, *; q=.2, /; q=.2
--29000000-C--
25
--29000000-F--
I added a test, so I hope it'll be accepted this time.
I had to create the complete (minimal) test for JSON parsing, so I hope it's correct.","This accepts a valid JSON request with only a number or a string, nothing else.
Example:
--29000000-B--
POST /test/json/test.html HTTP/1.1
content-type: application/json
Host: test
Content-Length: 2
User-Agent: Mozilla 4.0
Accept: text/html, image/gif, image/jpeg, *; q=.2, /; q=.2
--29000000-C--
25
--29000000-F--
I added a test, so I hope it'll be accepted this time.
I had to create the complete (minimal) test for JSON parsing, so I hope it's correct.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2363,2020-07-17T09:58:52Z,2022-05-03T20:00:54Z,2022-05-03T20:00:54Z,CLOSED,False,63,2,3,https://github.com/marcstern,V2/json empty,2,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2363,https://github.com/marcstern,2,https://github.com/SpiderLabs/ModSecurity/pull/2363#issuecomment-662922099,"This accepts a valid JSON request with only a number or a string, nothing else.
Example:
--29000000-B--
POST /test/json/test.html HTTP/1.1
content-type: application/json
Host: test
Content-Length: 2
User-Agent: Mozilla 4.0
Accept: text/html, image/gif, image/jpeg, *; q=.2, /; q=.2
--29000000-C--
25
--29000000-F--
I added a test, so I hope it'll be accepted this time.
I had to create the complete (minimal) test for JSON parsing, so I hope it's correct.",Is it sufficient to have it reviewed?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2363,2020-07-17T09:58:52Z,2022-05-03T20:00:54Z,2022-05-03T20:00:54Z,CLOSED,False,63,2,3,https://github.com/marcstern,V2/json empty,2,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2363,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/2363#issuecomment-663057915,"This accepts a valid JSON request with only a number or a string, nothing else.
Example:
--29000000-B--
POST /test/json/test.html HTTP/1.1
content-type: application/json
Host: test
Content-Length: 2
User-Agent: Mozilla 4.0
Accept: text/html, image/gif, image/jpeg, *; q=.2, /; q=.2
--29000000-C--
25
--29000000-F--
I added a test, so I hope it'll be accepted this time.
I had to create the complete (minimal) test for JSON parsing, so I hope it's correct.","The discussion on how to handle the elements of a JSON into collections - ARGS, in this specific case - was placed for version 3 a while ago. There, it was established a pattern to navigate under the elements giving a flat structure (compatible with collection keys).
The flat structure allows one to select the elements of  JSON inside the args; A powerful feature.  Within this patch pinpoint, an element does not sound to be feasible. Am I right? Why not adopt the schema presented in ModSecurity version 3?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2363,2020-07-17T09:58:52Z,2022-05-03T20:00:54Z,2022-05-03T20:00:54Z,CLOSED,False,63,2,3,https://github.com/marcstern,V2/json empty,2,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2363,https://github.com/marcstern,4,https://github.com/SpiderLabs/ModSecurity/pull/2363#issuecomment-668419291,"This accepts a valid JSON request with only a number or a string, nothing else.
Example:
--29000000-B--
POST /test/json/test.html HTTP/1.1
content-type: application/json
Host: test
Content-Length: 2
User-Agent: Mozilla 4.0
Accept: text/html, image/gif, image/jpeg, *; q=.2, /; q=.2
--29000000-C--
25
--29000000-F--
I added a test, so I hope it'll be accepted this time.
I had to create the complete (minimal) test for JSON parsing, so I hope it's correct.","I didn't follow the discussion in v3. I can have a look at it if you can point me to it.
Anyway, I imagine that it's a big change. In the meantime (although I'm not sure that you'll invest a lot of time for major changes in v2), it would worth to fix the current situation, no? I don't see any problem with that fix.
If I understood your question, you're wondering if we can access the empty ARG? Indeed: ARGS:/^$/ or ARGS_NAMES ""@rx ^$"".
So, can we accept this trivial fix?
Thanks",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2363,2020-07-17T09:58:52Z,2022-05-03T20:00:54Z,2022-05-03T20:00:54Z,CLOSED,False,63,2,3,https://github.com/marcstern,V2/json empty,2,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2363,https://github.com/marcstern,5,https://github.com/SpiderLabs/ModSecurity/pull/2363#issuecomment-726725593,"This accepts a valid JSON request with only a number or a string, nothing else.
Example:
--29000000-B--
POST /test/json/test.html HTTP/1.1
content-type: application/json
Host: test
Content-Length: 2
User-Agent: Mozilla 4.0
Accept: text/html, image/gif, image/jpeg, *; q=.2, /; q=.2
--29000000-C--
25
--29000000-F--
I added a test, so I hope it'll be accepted this time.
I had to create the complete (minimal) test for JSON parsing, so I hope it's correct.",Any chance to have this merged? Thanks,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2363,2020-07-17T09:58:52Z,2022-05-03T20:00:54Z,2022-05-03T20:00:54Z,CLOSED,False,63,2,3,https://github.com/marcstern,V2/json empty,2,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2363,https://github.com/marcstern,6,https://github.com/SpiderLabs/ModSecurity/pull/2363#issuecomment-1054236792,"This accepts a valid JSON request with only a number or a string, nothing else.
Example:
--29000000-B--
POST /test/json/test.html HTTP/1.1
content-type: application/json
Host: test
Content-Length: 2
User-Agent: Mozilla 4.0
Accept: text/html, image/gif, image/jpeg, *; q=.2, /; q=.2
--29000000-C--
25
--29000000-F--
I added a test, so I hope it'll be accepted this time.
I had to create the complete (minimal) test for JSON parsing, so I hope it's correct.","Hello guys. Any reason to not review this one-line fix?
I implemented the test, so what's missing?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2363,2020-07-17T09:58:52Z,2022-05-03T20:00:54Z,2022-05-03T20:00:54Z,CLOSED,False,63,2,3,https://github.com/marcstern,V2/json empty,2,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2363,https://github.com/martinhsv,7,https://github.com/SpiderLabs/ModSecurity/pull/2363#issuecomment-1111505589,"This accepts a valid JSON request with only a number or a string, nothing else.
Example:
--29000000-B--
POST /test/json/test.html HTTP/1.1
content-type: application/json
Host: test
Content-Length: 2
User-Agent: Mozilla 4.0
Accept: text/html, image/gif, image/jpeg, *; q=.2, /; q=.2
--29000000-C--
25
--29000000-F--
I added a test, so I hope it'll be accepted this time.
I had to create the complete (minimal) test for JSON parsing, so I hope it's correct.","I don't have any concerns with the 1-line fix; I think we can proceed with that.
The only minor caveat I would draw attention to here is that, with this solution, there's no way to tell apart these request bodies (i.e. to ModSecurity they will be considered equivalent):
1

and
{ """" : 1 }

I don't think that's a serious impediment though.
The test, though, I don't think is quite right. For example, it passes even without the 1-line fix to msc_json.c
I'll either fix it up, or omit the test file for now. ( Anyway we probably want to include any such test in the pre-existing file .../rule/15-json.t )",True,{'THUMBS_UP': ['https://github.com/marcstern']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2363,2020-07-17T09:58:52Z,2022-05-03T20:00:54Z,2022-05-03T20:00:54Z,CLOSED,False,63,2,3,https://github.com/marcstern,V2/json empty,2,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2363,https://github.com/martinhsv,8,https://github.com/SpiderLabs/ModSecurity/pull/2363#issuecomment-1116526593,"This accepts a valid JSON request with only a number or a string, nothing else.
Example:
--29000000-B--
POST /test/json/test.html HTTP/1.1
content-type: application/json
Host: test
Content-Length: 2
User-Agent: Mozilla 4.0
Accept: text/html, image/gif, image/jpeg, *; q=.2, /; q=.2
--29000000-C--
25
--29000000-F--
I added a test, so I hope it'll be accepted this time.
I had to create the complete (minimal) test for JSON parsing, so I hope it's correct.",This change was committed via substitute pull request #2735,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2368,2020-07-24T13:46:53Z,2020-08-10T12:28:59Z,2020-08-10T12:28:59Z,CLOSED,False,43,193,15,https://github.com/WGH-,Remove unnecessary copying in transformations,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2368,https://github.com/WGH-,1,https://github.com/SpiderLabs/ModSecurity/pull/2368,"In C++11, string data is always null-terminated[1], and can be freely modified[2].
[1] https://stackoverflow.com/questions/6077189/will-stdstring-always-be-null-terminated-in-c11
[2] https://stackoverflow.com/questions/38875623/is-it-permitted-to-modify-the-internal-stdstring-buffer-returned-by-operator","In C++11, string data is always null-terminated[1], and can be freely modified[2].
[1] https://stackoverflow.com/questions/6077189/will-stdstring-always-be-null-terminated-in-c11
[2] https://stackoverflow.com/questions/38875623/is-it-permitted-to-modify-the-internal-stdstring-buffer-returned-by-operator",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2368,2020-07-24T13:46:53Z,2020-08-10T12:28:59Z,2020-08-10T12:28:59Z,CLOSED,False,43,193,15,https://github.com/WGH-,Remove unnecessary copying in transformations,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2368,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2368#issuecomment-665065498,"In C++11, string data is always null-terminated[1], and can be freely modified[2].
[1] https://stackoverflow.com/questions/6077189/will-stdstring-always-be-null-terminated-in-c11
[2] https://stackoverflow.com/questions/38875623/is-it-permitted-to-modify-the-internal-stdstring-buffer-returned-by-operator","Thanks @WGH-. Interesting proposal.
Indeed, as mentioned in [2] and as we are using c++11, it is possible to access the string buffer by array idx, and the buffer is stored contiguously.
As of our development branch, we have added the concept of ModSecString. It is not yet 100% ready, but the idea is to have an allocator to use a stack-based memory pool for each request, avoiding memory fragmentation. That stack allocator should be aware that space should be allocated contiguously.
I am going to review it better and get back to you soon.
Example of ModSecString -

  
    
      ModSecurity/src/actions/transformations/css_decode.cc
    
    
        Lines 32 to 35
      in
      5824470
    
  
  
    

        
          
           void CssDecode::execute(const Transaction *t, 
        

        
          
               const ModSecString &in, 
        

        
          
               ModSecString &out) noexcept { 
        

        
          
               size_t s = in.size();",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2368,2020-07-24T13:46:53Z,2020-08-10T12:28:59Z,2020-08-10T12:28:59Z,CLOSED,False,43,193,15,https://github.com/WGH-,Remove unnecessary copying in transformations,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2368,https://github.com/WGH-,3,https://github.com/SpiderLabs/ModSecurity/pull/2368#issuecomment-665072959,"In C++11, string data is always null-terminated[1], and can be freely modified[2].
[1] https://stackoverflow.com/questions/6077189/will-stdstring-always-be-null-terminated-in-c11
[2] https://stackoverflow.com/questions/38875623/is-it-permitted-to-modify-the-internal-stdstring-buffer-returned-by-operator","As of our development branch, we have added the concept of ModSecString. It is not yet 100% ready, but the idea is to have an allocator to use a stack-based memory pool for each request, avoiding memory fragmentation. That stack allocator should be aware that space should be allocated contiguously.

Basically, you want to bring back region-based memory management, which old ModSecurity used with help of apr_pool_t and friends?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2368,2020-07-24T13:46:53Z,2020-08-10T12:28:59Z,2020-08-10T12:28:59Z,CLOSED,False,43,193,15,https://github.com/WGH-,Remove unnecessary copying in transformations,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2368,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/2368#issuecomment-665707738,"In C++11, string data is always null-terminated[1], and can be freely modified[2].
[1] https://stackoverflow.com/questions/6077189/will-stdstring-always-be-null-terminated-in-c11
[2] https://stackoverflow.com/questions/38875623/is-it-permitted-to-modify-the-internal-stdstring-buffer-returned-by-operator","As of our development branch, we have added the concept of ModSecString. It is not yet 100% ready, but the idea is to have an allocator to use a stack-based memory pool for each request, avoiding memory fragmentation. That stack allocator should be aware that space should be allocated contiguously.

Basically, you want to bring back region-based memory management, which old ModSecurity used with help of apr_pool_t and friends?

Not really, the apr_pool was used everywhere. For some pieces of the code where the strings are pre-computed as the request are processed (ARGS and QUERY_STRING), it makes sense to avoid memory fragmentation. The conjunction of std::string_view and stacked (not dynamic) memory usage could be very useful performance-wise. That is different from having dynamically allocated memory pools. It is not about having a generic memory pool but use the resources more wisely.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2368,2020-07-24T13:46:53Z,2020-08-10T12:28:59Z,2020-08-10T12:28:59Z,CLOSED,False,43,193,15,https://github.com/WGH-,Remove unnecessary copying in transformations,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2368,https://github.com/WGH-,5,https://github.com/SpiderLabs/ModSecurity/pull/2368#issuecomment-665754923,"In C++11, string data is always null-terminated[1], and can be freely modified[2].
[1] https://stackoverflow.com/questions/6077189/will-stdstring-always-be-null-terminated-in-c11
[2] https://stackoverflow.com/questions/38875623/is-it-permitted-to-modify-the-internal-stdstring-buffer-returned-by-operator",You're suggesting to use the call stack for variables associated with particular transaction?,True,{'EYES': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2368,2020-07-24T13:46:53Z,2020-08-10T12:28:59Z,2020-08-10T12:28:59Z,CLOSED,False,43,193,15,https://github.com/WGH-,Remove unnecessary copying in transformations,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2368,https://github.com/WGH-,6,https://github.com/SpiderLabs/ModSecurity/pull/2368#issuecomment-665954957,"In C++11, string data is always null-terminated[1], and can be freely modified[2].
[1] https://stackoverflow.com/questions/6077189/will-stdstring-always-be-null-terminated-in-c11
[2] https://stackoverflow.com/questions/38875623/is-it-permitted-to-modify-the-internal-stdstring-buffer-returned-by-operator","This optimization has very small performance improvement: increase from 117-118 requests per second to 121-122 RPS. It might start to matter more once other parts are optimized, but right now it's mostly code cleanup.",True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2368,2020-07-24T13:46:53Z,2020-08-10T12:28:59Z,2020-08-10T12:28:59Z,CLOSED,False,43,193,15,https://github.com/WGH-,Remove unnecessary copying in transformations,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2368,https://github.com/zimmerle,7,https://github.com/SpiderLabs/ModSecurity/pull/2368#issuecomment-666358534,"In C++11, string data is always null-terminated[1], and can be freely modified[2].
[1] https://stackoverflow.com/questions/6077189/will-stdstring-always-be-null-terminated-in-c11
[2] https://stackoverflow.com/questions/38875623/is-it-permitted-to-modify-the-internal-stdstring-buffer-returned-by-operator","You're suggesting to use the call stack for variables associated with particular transaction?

Let me illustrate that with an example -
Lets assume that we have a request at the URI: /modsec-is-cool/?foo=bar&github=fine&a=b
[test case on gits]
By the time that we achieve a given phase (request life cycle) the variables will be populated internally in modsec. To exemplifies, let's pick: ARGS, ARGS_GET, QUERY_STRING, REQUEST_URI, REQUEST_URI_RAW they will be populated as such:
ARGS
ARGS:foo :: bar
ARGS:github :: fine
ARGS:a :: b
ARGS_GET
ARGS:foo :: bar
ARGS:github :: fine
ARGS:a :: b
QUERY_STRING
QUERY_STRING :: foo=bar&github=fine&a=b
REQUEST_URI
REQUEST_URI :: /modsec-is-cool/?foo=bar&github=fine&a=b
REQUEST_URI_RAW
REQUEST_URI_RAW :: /modsec-is-cool/?foo=bar&github=fine&a=b
Notice that the content of variables (and keys), repeats. Using the example of the word fine, it is allocated for each of those variables. In this example, fine could be allocated for QUERY_STRING, and mapped using (string_view) for the other variables. Reducing memory usage and avoid extra malloc calls, consequently reducing memory fragmentation.
In that described use case, the string_view for each variable will be a part of the Transaction class, that could be stacked allocated as - although dynamically - the parameters do not vary on size: offset (void *) and length (uint?).
The above is just an example to illustrate a rationally; there are some corner cases.
There is usage for a memory pool, especially in terms of disposable memory used in serialized operations such as transformations. First, let's see if it is possible to avoid unnecessary allocations, as you are suggesting in this very own patch.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2368,2020-07-24T13:46:53Z,2020-08-10T12:28:59Z,2020-08-10T12:28:59Z,CLOSED,False,43,193,15,https://github.com/WGH-,Remove unnecessary copying in transformations,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2368,https://github.com/zimmerle,8,https://github.com/SpiderLabs/ModSecurity/pull/2368#issuecomment-666360635,"In C++11, string data is always null-terminated[1], and can be freely modified[2].
[1] https://stackoverflow.com/questions/6077189/will-stdstring-always-be-null-terminated-in-c11
[2] https://stackoverflow.com/questions/38875623/is-it-permitted-to-modify-the-internal-stdstring-buffer-returned-by-operator","This optimization has very small performance improvement: increase from 117-118 requests per second to 121-122 RPS. It might start to matter more once other parts are optimized, but right now it's mostly code cleanup.

At a certain point, the improvements sound to be numerically inefficient. However, placing it in scale, they are not bad. The benefit here is in the order of magnitude of 3% ~ 4%. Not bad. In a busy server, I am sure that it does make a difference.
More to come, as the code became cleaner, it easy to spot an improve what needs to be improved :)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2368,2020-07-24T13:46:53Z,2020-08-10T12:28:59Z,2020-08-10T12:28:59Z,CLOSED,False,43,193,15,https://github.com/WGH-,Remove unnecessary copying in transformations,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2368,https://github.com/zimmerle,9,https://github.com/SpiderLabs/ModSecurity/pull/2368#issuecomment-667234169,"In C++11, string data is always null-terminated[1], and can be freely modified[2].
[1] https://stackoverflow.com/questions/6077189/will-stdstring-always-be-null-terminated-in-c11
[2] https://stackoverflow.com/questions/38875623/is-it-permitted-to-modify-the-internal-stdstring-buffer-returned-by-operator",Not worked with that yet as I am fixing the xmlns action on the v3.1 branch. The faulty test case is very annoying.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2368,2020-07-24T13:46:53Z,2020-08-10T12:28:59Z,2020-08-10T12:28:59Z,CLOSED,False,43,193,15,https://github.com/WGH-,Remove unnecessary copying in transformations,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2368,https://github.com/zimmerle,10,https://github.com/SpiderLabs/ModSecurity/pull/2368#issuecomment-668874226,"In C++11, string data is always null-terminated[1], and can be freely modified[2].
[1] https://stackoverflow.com/questions/6077189/will-stdstring-always-be-null-terminated-in-c11
[2] https://stackoverflow.com/questions/38875623/is-it-permitted-to-modify-the-internal-stdstring-buffer-returned-by-operator","Not worked with that yet as I am fixing the xmlns action on the v3.1 branch. The faulty test case is very annoying.

xmlns is now fixed. Going to fix the cppcheck warnings on v3/master. Afterward, I will proceed with the rebase for the v3.1-experimental branch. And finally, merge this.
The issue regarding the xmlns was a missing attribution for the rule variable. Almost all variables work without the knowledge of the rule that it belongs to, except for two variables: RULE, and XML.
The variable RULE needs to access the metadata (id, etc...) about the Rule while the XML demands to enumerates all xmlns actions in order to correct address the XML namespace.
During the Rule instance copy, the variable was being copied correctly. But, the reference to the Rule (inside the variable instance) was remained unchanged, point towards the old instance. In the case of xmlns the old Rule was deleted and the reference was being pointed to an invalid location hence the crash.
Relevant pieces of code
Base class common to XML and RULE

  
    
      ModSecurity/src/variables/rule_variable.h
    
    
        Lines 31 to 54
      in
      2ddb4ab
    
  
  
    

        
          
           class RuleVariable { 
        

        
          
            public: 
        

        
          
               RuleVariable() 
        

        
          
                   : m_rule(nullptr) 
        

        
          
               { }; 
        

        
          
            
        

        
          
               RuleVariable(const RuleVariable &a) 
        

        
          
                   : m_rule(a.m_rule) 
        

        
          
               { }; 
        

        
          
            
        

        
          
            
        

        
          
               void populate(const RuleWithActions *rule) { 
        

        
          
                   m_rule = rule; 
        

        
          
               } 
        

        
          
            
        

        
          
               const RuleWithActions *getRule() const noexcept { 
        

        
          
                   return m_rule; 
        

        
          
               } 
        

        
          
            
        

        
          
               virtual Variable* clone() = 0; 
        

        
          
            
        

        
          
            private: 
        

        
          
               const RuleWithActions *m_rule; 
        

        
          
           }; 
        
    
  


Populating all Variables with base type RuleVariable during a Rule instance copy

  
    
      ModSecurity/src/rule_with_operator.h
    
    
        Lines 51 to 62
      in
      2ddb4ab
    
  
  
    

        
          
           RuleWithOperator(const RuleWithOperator &op) 
        

        
          
               : RuleWithActions(op), 
        

        
          
               m_variables(op.m_variables), 
        

        
          
               m_operator(op.m_operator) 
        

        
          
           { 
        

        
          
               for (auto &a : *m_variables.get()) { 
        

        
          
                   variables::RuleVariable *vrule = dynamic_cast<variables::RuleVariable *>(a); 
        

        
          
                   if (vrule != nullptr) { 
        

        
          
                       vrule->populate(this); 
        

        
          
                   } 
        

        
          
               } 
        

        
          
           }; 
        
    
  


XML Variable

  
    
      ModSecurity/src/variables/xml.h
    
    
        Lines 66 to 84
      in
      2ddb4ab
    
  
  
    

        
          
           class XML_WithNSPath : public RuleVariable, public VariableDictElement { 
        

        
          
            public: 
        

        
          
               explicit XML_WithNSPath(const std::string &nsPath) 
        

        
          
                   : RuleVariable(), 
        

        
          
                   VariableDictElement(""XML"", nsPath) 
        

        
          
               { }; 
        

        
          
            
        

        
          
               XML_WithNSPath(const XML_WithNSPath &r) 
        

        
          
                   : RuleVariable(), 
        

        
          
                   VariableDictElement(r) 
        

        
          
               { }; 
        

        
          
            
        

        
          
               void evaluate(Transaction *transaction, 
        

        
          
                   std::vector<const VariableValue *> *l) override; 
        

        
          
            
        

        
          
               virtual Variable *clone() override { 
        

        
          
                   return new XML_WithNSPath(*this); 
        

        
          
               }; 
        

        
          
           };",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2368,2020-07-24T13:46:53Z,2020-08-10T12:28:59Z,2020-08-10T12:28:59Z,CLOSED,False,43,193,15,https://github.com/WGH-,Remove unnecessary copying in transformations,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2368,https://github.com/WGH-,11,https://github.com/SpiderLabs/ModSecurity/pull/2368#issuecomment-669158484,"In C++11, string data is always null-terminated[1], and can be freely modified[2].
[1] https://stackoverflow.com/questions/6077189/will-stdstring-always-be-null-terminated-in-c11
[2] https://stackoverflow.com/questions/38875623/is-it-permitted-to-modify-the-internal-stdstring-buffer-returned-by-operator","I think most old-school pointers can be safely replaced with std::unique_ptr. It has zero runtime overhead, and it would make it much easier to reason about lifetimes, and would prevent such mistakes.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2368,2020-07-24T13:46:53Z,2020-08-10T12:28:59Z,2020-08-10T12:28:59Z,CLOSED,False,43,193,15,https://github.com/WGH-,Remove unnecessary copying in transformations,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2368,https://github.com/zimmerle,12,https://github.com/SpiderLabs/ModSecurity/pull/2368#issuecomment-670504761,"In C++11, string data is always null-terminated[1], and can be freely modified[2].
[1] https://stackoverflow.com/questions/6077189/will-stdstring-always-be-null-terminated-in-c11
[2] https://stackoverflow.com/questions/38875623/is-it-permitted-to-modify-the-internal-stdstring-buffer-returned-by-operator","I think most old-school pointers can be safely replaced with std::unique_ptr. It has zero runtime overhead, and it would make it much easier to reason about lifetimes, and would prevent such mistakes.

In this particular case, we are using a shared_ptr. The idea is that Rules could belong to different hosts and so its variables. The variables that do not demand specific processing on execution time, are in practice anchors to offsets on the Transaction object. Safe to share among different Rules.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2368,2020-07-24T13:46:53Z,2020-08-10T12:28:59Z,2020-08-10T12:28:59Z,CLOSED,False,43,193,15,https://github.com/WGH-,Remove unnecessary copying in transformations,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2368,https://github.com/zimmerle,13,https://github.com/SpiderLabs/ModSecurity/pull/2368#issuecomment-670532374,"In C++11, string data is always null-terminated[1], and can be freely modified[2].
[1] https://stackoverflow.com/questions/6077189/will-stdstring-always-be-null-terminated-in-c11
[2] https://stackoverflow.com/questions/38875623/is-it-permitted-to-modify-the-internal-stdstring-buffer-returned-by-operator","I have rebased and applied this PR at the top of v3.1-experimental. Commit: 0cc0b929c36374084e2e607673ab88e29c848fb0
Some changes were placed as a consequence of the rebase.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2368,2020-07-24T13:46:53Z,2020-08-10T12:28:59Z,2020-08-10T12:28:59Z,CLOSED,False,43,193,15,https://github.com/WGH-,Remove unnecessary copying in transformations,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2368,https://github.com/zimmerle,14,https://github.com/SpiderLabs/ModSecurity/pull/2368#issuecomment-670610640,"In C++11, string data is always null-terminated[1], and can be freely modified[2].
[1] https://stackoverflow.com/questions/6077189/will-stdstring-always-be-null-terminated-in-c11
[2] https://stackoverflow.com/questions/38875623/is-it-permitted-to-modify-the-internal-stdstring-buffer-returned-by-operator",It is now - 5226c42,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2368,2020-07-24T13:46:53Z,2020-08-10T12:28:59Z,2020-08-10T12:28:59Z,CLOSED,False,43,193,15,https://github.com/WGH-,Remove unnecessary copying in transformations,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2368,https://github.com/zimmerle,15,https://github.com/SpiderLabs/ModSecurity/pull/2368#issuecomment-671325255,"In C++11, string data is always null-terminated[1], and can be freely modified[2].
[1] https://stackoverflow.com/questions/6077189/will-stdstring-always-be-null-terminated-in-c11
[2] https://stackoverflow.com/questions/38875623/is-it-permitted-to-modify-the-internal-stdstring-buffer-returned-by-operator",Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2369,2020-07-24T17:33:14Z,2020-08-07T01:51:22Z,2020-08-07T01:51:22Z,CLOSED,False,72,66,7,https://github.com/WGH-,"Make all ""rule id"" variables of type RuleId",0,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2369,https://github.com/WGH-,1,https://github.com/SpiderLabs/ModSecurity/pull/2369,"Previously, ModSecurity inconsistently used int, int64_t and double for rule id variables in different places.","Previously, ModSecurity inconsistently used int, int64_t and double for rule id variables in different places.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2369,2020-07-24T17:33:14Z,2020-08-07T01:51:22Z,2020-08-07T01:51:22Z,CLOSED,False,72,66,7,https://github.com/WGH-,"Make all ""rule id"" variables of type RuleId",0,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2369,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2369#issuecomment-665053312,"Previously, ModSecurity inconsistently used int, int64_t and double for rule id variables in different places.","Hi, @WGH-
Thank you for the patch. Apparently we have a similar patch on our development branch -

b8aae97

The dev branch is available here:  v3/dev/3.1-experimental",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2369,2020-07-24T17:33:14Z,2020-08-07T01:51:22Z,2020-08-07T01:51:22Z,CLOSED,False,72,66,7,https://github.com/WGH-,"Make all ""rule id"" variables of type RuleId",0,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2369,https://github.com/WGH-,3,https://github.com/SpiderLabs/ModSecurity/pull/2369#issuecomment-665055891,"Previously, ModSecurity inconsistently used int, int64_t and double for rule id variables in different places.","Although similar in scope, that patch merely replaces int64_t with RuleId typedef, and it doesn't address int and double stuff.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2369,2020-07-24T17:33:14Z,2020-08-07T01:51:22Z,2020-08-07T01:51:22Z,CLOSED,False,72,66,7,https://github.com/WGH-,"Make all ""rule id"" variables of type RuleId",0,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2369,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/2369#issuecomment-665059878,"Previously, ModSecurity inconsistently used int, int64_t and double for rule id variables in different places.","I am not saying that one replaces the other. I am saying that both adds a benefit. It would be interesting to have your patch using the RuleId alias. Further, we can adjust the RuleId container size as needed. How do you fill about that?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2369,2020-07-24T17:33:14Z,2020-08-07T01:51:22Z,2020-08-07T01:51:22Z,CLOSED,False,72,66,7,https://github.com/WGH-,"Make all ""rule id"" variables of type RuleId",0,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2369,https://github.com/WGH-,5,https://github.com/SpiderLabs/ModSecurity/pull/2369#issuecomment-665064880,"Previously, ModSecurity inconsistently used int, int64_t and double for rule id variables in different places.","I can rebase the patch on top of v3/dev/3.1-experimental, if that's what you're saying.
By the way, there's a type called RuleId here: https://github.com/SpiderLabs/ModSecurity/blob/v3/dev/3.1-experimental/src/actions/rule_id.h. Wouldn't it create conflict with the newly introduced RuleId type alias?

Further, we can adjust the RuleId container size as needed. How do you fill about that?

I'm not sure which RuleId container you're referring to.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2369,2020-07-24T17:33:14Z,2020-08-07T01:51:22Z,2020-08-07T01:51:22Z,CLOSED,False,72,66,7,https://github.com/WGH-,"Make all ""rule id"" variables of type RuleId",0,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2369,https://github.com/zimmerle,6,https://github.com/SpiderLabs/ModSecurity/pull/2369#issuecomment-665070853,"Previously, ModSecurity inconsistently used int, int64_t and double for rule id variables in different places.","There are:

modsecurity::actions::RuleId
modsecurity::RuleId

Those are defined here:

  
    
      ModSecurity/src/actions/rule_id.h
    
    
        Lines 32 to 35
      in
      5824470
    
  
  
    

        
          
           explicit RuleId(const std::string &action) 
        

        
          
               : Action(action), 
        

        
          
               m_ruleId(0) 
        

        
          
           { } 
        
    
  


and

  
    
      ModSecurity/headers/modsecurity/modsecurity.h
    
    
         Line 98
      in
      5824470
    
  
  
    

        
          
           using RuleId = int64_t; 
        
    
  


Those are two different things, thanks for the namespace
I meant a rebase, making sure that the type RuleId is used to refer to a Rule Id. Not int_64, not double. Only RuleId.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2369,2020-07-24T17:33:14Z,2020-08-07T01:51:22Z,2020-08-07T01:51:22Z,CLOSED,False,72,66,7,https://github.com/WGH-,"Make all ""rule id"" variables of type RuleId",0,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2369,https://github.com/WGH-,7,https://github.com/SpiderLabs/ModSecurity/pull/2369#issuecomment-665074949,"Previously, ModSecurity inconsistently used int, int64_t and double for rule id variables in different places.",Fair. I totally forgot about namespaces. I'll do a rebase on top of v3/dev/3.1-experimental then.,True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2369,2020-07-24T17:33:14Z,2020-08-07T01:51:22Z,2020-08-07T01:51:22Z,CLOSED,False,72,66,7,https://github.com/WGH-,"Make all ""rule id"" variables of type RuleId",0,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2369,https://github.com/zimmerle,8,https://github.com/SpiderLabs/ModSecurity/pull/2369#issuecomment-665075653,"Previously, ModSecurity inconsistently used int, int64_t and double for rule id variables in different places.",@WGH- thank you! That is an important change.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2369,2020-07-24T17:33:14Z,2020-08-07T01:51:22Z,2020-08-07T01:51:22Z,CLOSED,False,72,66,7,https://github.com/WGH-,"Make all ""rule id"" variables of type RuleId",0,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2369,https://github.com/WGH-,9,https://github.com/SpiderLabs/ModSecurity/pull/2369#issuecomment-665106949,"Previously, ModSecurity inconsistently used int, int64_t and double for rule id variables in different places.","Done. Some tests don't pass, but they don't pass in base v3/dev/3.1-experimental either.",True,{'EYES': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2369,2020-07-24T17:33:14Z,2020-08-07T01:51:22Z,2020-08-07T01:51:22Z,CLOSED,False,72,66,7,https://github.com/WGH-,"Make all ""rule id"" variables of type RuleId",0,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2369,https://github.com/zimmerle,10,https://github.com/SpiderLabs/ModSecurity/pull/2369#issuecomment-665708718,"Previously, ModSecurity inconsistently used int, int64_t and double for rule id variables in different places.","Done. Some tests don't pass, but they don't pass in base v3/dev/3.1-experimental either.

Thanks! Yep. You are likely to be referring to the XML tests. Have to fix that and rebase the tree accordingly. It is on my todo list, before making it w3/master.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2369,2020-07-24T17:33:14Z,2020-08-07T01:51:22Z,2020-08-07T01:51:22Z,CLOSED,False,72,66,7,https://github.com/WGH-,"Make all ""rule id"" variables of type RuleId",0,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2369,https://github.com/zimmerle,11,https://github.com/SpiderLabs/ModSecurity/pull/2369#issuecomment-670276843,"Previously, ModSecurity inconsistently used int, int64_t and double for rule id variables in different places.",Thank you @WGH-  this is now merged into 3.1-experimental.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2370,2020-07-24T17:51:03Z,2020-10-21T12:04:35Z,2020-10-21T12:04:36Z,CLOSED,False,19,37,1,https://github.com/WGH-,Use 'equal_range' instead of full scan for rule exceptions,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2370,https://github.com/WGH-,1,https://github.com/SpiderLabs/ModSecurity/pull/2370,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2370,2020-07-24T17:51:03Z,2020-10-21T12:04:35Z,2020-10-21T12:04:36Z,CLOSED,False,19,37,1,https://github.com/WGH-,Use 'equal_range' instead of full scan for rule exceptions,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2370,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2370#issuecomment-671335960,,As of 3.1-experimental the majority of the UpdateActionBy? are pre-computed. Some parts of the change in this PR no longer exist in 3.1-experimental. I have made some modifications taking the approach suggested in the patch. Published here: b321829,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2370,2020-07-24T17:51:03Z,2020-10-21T12:04:35Z,2020-10-21T12:04:36Z,CLOSED,False,19,37,1,https://github.com/WGH-,Use 'equal_range' instead of full scan for rule exceptions,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2370,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/2370#issuecomment-713520246,,Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2374,2020-07-28T18:29:50Z,2020-10-29T22:48:39Z,2020-10-30T13:47:53Z,CLOSED,False,9962,6047,365,https://github.com/WGH-,Use std::shared_ptr for variable resolution,30,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2374,https://github.com/WGH-,1,https://github.com/SpiderLabs/ModSecurity/pull/2374,"AnchoredSetVariable::resolve is called for every rule (see RuleWithOperator::evaluate). The previous implementation allocated a new copy of every variable, which quickly added up. In my tests, AnchoredSetVariable::resolve function consumed 7.8% of run time.
AnchoredSetVariable (which is a multimap) values are never changed, only added. This means it's safe to store them in std::shared_ptr, and make resolve return shared_ptr pointing to the same object.
Other resolve implementation could also use this optimization by not allocating new objects, however, they are not hot spots, so this optimization was not implemented there.
In my benchmark, this raises performance from 117 requests per second to 131 RPS, and overhead is lowered from 7.8% to 2.4%.
As a bonus, replacing plain pointer with smart pointers make code cleaner, since using smart pointers makes manual deletes no longer necessary.
Additionally, VariableOrigin is now stored in plain std::vector, since it's wasteful to store structure containing just two integer values using std::list<std::unique_ptr<T>>.
Before (the thing to the left of executeTransformations labeled ""modsecuri..""):

After:

SVG files for the flamegraphs: flamegraphs.tar.gz","AnchoredSetVariable::resolve is called for every rule (see RuleWithOperator::evaluate). The previous implementation allocated a new copy of every variable, which quickly added up. In my tests, AnchoredSetVariable::resolve function consumed 7.8% of run time.
AnchoredSetVariable (which is a multimap) values are never changed, only added. This means it's safe to store them in std::shared_ptr, and make resolve return shared_ptr pointing to the same object.
Other resolve implementation could also use this optimization by not allocating new objects, however, they are not hot spots, so this optimization was not implemented there.
In my benchmark, this raises performance from 117 requests per second to 131 RPS, and overhead is lowered from 7.8% to 2.4%.
As a bonus, replacing plain pointer with smart pointers make code cleaner, since using smart pointers makes manual deletes no longer necessary.
Additionally, VariableOrigin is now stored in plain std::vector, since it's wasteful to store structure containing just two integer values using std::list<std::unique_ptr<T>>.
Before (the thing to the left of executeTransformations labeled ""modsecuri..""):

After:

SVG files for the flamegraphs: flamegraphs.tar.gz",True,"{'THUMBS_UP': ['https://github.com/zimmerle'], 'HOORAY': ['https://github.com/zimmerle'], 'HEART': ['https://github.com/zimmerle']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2374,2020-07-28T18:29:50Z,2020-10-29T22:48:39Z,2020-10-30T13:47:53Z,CLOSED,False,9962,6047,365,https://github.com/WGH-,Use std::shared_ptr for variable resolution,30,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2374,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2374#issuecomment-665704599,"AnchoredSetVariable::resolve is called for every rule (see RuleWithOperator::evaluate). The previous implementation allocated a new copy of every variable, which quickly added up. In my tests, AnchoredSetVariable::resolve function consumed 7.8% of run time.
AnchoredSetVariable (which is a multimap) values are never changed, only added. This means it's safe to store them in std::shared_ptr, and make resolve return shared_ptr pointing to the same object.
Other resolve implementation could also use this optimization by not allocating new objects, however, they are not hot spots, so this optimization was not implemented there.
In my benchmark, this raises performance from 117 requests per second to 131 RPS, and overhead is lowered from 7.8% to 2.4%.
As a bonus, replacing plain pointer with smart pointers make code cleaner, since using smart pointers makes manual deletes no longer necessary.
Additionally, VariableOrigin is now stored in plain std::vector, since it's wasteful to store structure containing just two integer values using std::list<std::unique_ptr<T>>.
Before (the thing to the left of executeTransformations labeled ""modsecuri..""):

After:

SVG files for the flamegraphs: flamegraphs.tar.gz","Hi, @WGH-
Please consider using std::deque instead of std::vector for the VariableOrigin as explained at: #2375.
That sounds like a good modification, we didn't change so much the Variable class on 3.1 yet, so I think it will be easy to rebase that to 3.1-experimental. Do you mind?
Thank you for your work. Very nice to see the flame charts. Kudos :)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2374,2020-07-28T18:29:50Z,2020-10-29T22:48:39Z,2020-10-30T13:47:53Z,CLOSED,False,9962,6047,365,https://github.com/WGH-,Use std::shared_ptr for variable resolution,30,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2374,https://github.com/martinhsv,3,https://github.com/SpiderLabs/ModSecurity/pull/2374#issuecomment-665840863,"AnchoredSetVariable::resolve is called for every rule (see RuleWithOperator::evaluate). The previous implementation allocated a new copy of every variable, which quickly added up. In my tests, AnchoredSetVariable::resolve function consumed 7.8% of run time.
AnchoredSetVariable (which is a multimap) values are never changed, only added. This means it's safe to store them in std::shared_ptr, and make resolve return shared_ptr pointing to the same object.
Other resolve implementation could also use this optimization by not allocating new objects, however, they are not hot spots, so this optimization was not implemented there.
In my benchmark, this raises performance from 117 requests per second to 131 RPS, and overhead is lowered from 7.8% to 2.4%.
As a bonus, replacing plain pointer with smart pointers make code cleaner, since using smart pointers makes manual deletes no longer necessary.
Additionally, VariableOrigin is now stored in plain std::vector, since it's wasteful to store structure containing just two integer values using std::list<std::unique_ptr<T>>.
Before (the thing to the left of executeTransformations labeled ""modsecuri..""):

After:

SVG files for the flamegraphs: flamegraphs.tar.gz",I'm skeptical that deque would be more performant here.  I would personally leave them as vector.,True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2374,2020-07-28T18:29:50Z,2020-10-29T22:48:39Z,2020-10-30T13:47:53Z,CLOSED,False,9962,6047,365,https://github.com/WGH-,Use std::shared_ptr for variable resolution,30,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2374,https://github.com/WGH-,4,https://github.com/SpiderLabs/ModSecurity/pull/2374#issuecomment-665861940,"AnchoredSetVariable::resolve is called for every rule (see RuleWithOperator::evaluate). The previous implementation allocated a new copy of every variable, which quickly added up. In my tests, AnchoredSetVariable::resolve function consumed 7.8% of run time.
AnchoredSetVariable (which is a multimap) values are never changed, only added. This means it's safe to store them in std::shared_ptr, and make resolve return shared_ptr pointing to the same object.
Other resolve implementation could also use this optimization by not allocating new objects, however, they are not hot spots, so this optimization was not implemented there.
In my benchmark, this raises performance from 117 requests per second to 131 RPS, and overhead is lowered from 7.8% to 2.4%.
As a bonus, replacing plain pointer with smart pointers make code cleaner, since using smart pointers makes manual deletes no longer necessary.
Additionally, VariableOrigin is now stored in plain std::vector, since it's wasteful to store structure containing just two integer values using std::list<std::unique_ptr<T>>.
Before (the thing to the left of executeTransformations labeled ""modsecuri..""):

After:

SVG files for the flamegraphs: flamegraphs.tar.gz","I made a test. std::deque basically gives the same performance (slower within the margin of error: 130 RPS).
std::deque shines when you actually use it as a queue: i.e. append/remove items to/from either end. Sure, it also avoids reallocations when you append elements, but the count and the size of individual elements are too small here to matter.",True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2374,2020-07-28T18:29:50Z,2020-10-29T22:48:39Z,2020-10-30T13:47:53Z,CLOSED,False,9962,6047,365,https://github.com/WGH-,Use std::shared_ptr for variable resolution,30,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2374,https://github.com/WGH-,5,https://github.com/SpiderLabs/ModSecurity/pull/2374#issuecomment-665873965,"AnchoredSetVariable::resolve is called for every rule (see RuleWithOperator::evaluate). The previous implementation allocated a new copy of every variable, which quickly added up. In my tests, AnchoredSetVariable::resolve function consumed 7.8% of run time.
AnchoredSetVariable (which is a multimap) values are never changed, only added. This means it's safe to store them in std::shared_ptr, and make resolve return shared_ptr pointing to the same object.
Other resolve implementation could also use this optimization by not allocating new objects, however, they are not hot spots, so this optimization was not implemented there.
In my benchmark, this raises performance from 117 requests per second to 131 RPS, and overhead is lowered from 7.8% to 2.4%.
As a bonus, replacing plain pointer with smart pointers make code cleaner, since using smart pointers makes manual deletes no longer necessary.
Additionally, VariableOrigin is now stored in plain std::vector, since it's wasteful to store structure containing just two integer values using std::list<std::unique_ptr<T>>.
Before (the thing to the left of executeTransformations labeled ""modsecuri..""):

After:

SVG files for the flamegraphs: flamegraphs.tar.gz","By the way, AnchoredSetVariable has a couple of places where the variable is inserted in front of the vector for no apparent reason. I think replacing it with push_back will have bigger impact.

  
    
      ModSecurity/src/anchored_set_variable.cc
    
    
        Lines 83 to 88
      in
      0eb3c12
    
  
  
    

        
          
           void AnchoredSetVariable::resolve( 
        

        
          
               std::vector<const VariableValue *> *l) { 
        

        
          
               for (const auto& x : *this) { 
        

        
          
                   l->insert(l->begin(), new VariableValue(x.second)); 
        

        
          
               } 
        

        
          
           } 
        
    
  



  
    
      ModSecurity/src/anchored_set_variable.cc
    
    
        Lines 91 to 102
      in
      0eb3c12
    
  
  
    

        
          
           void AnchoredSetVariable::resolve( 
        

        
          
               std::vector<const VariableValue *> *l, 
        

        
          
               variables::KeyExclusions &ke) { 
        

        
          
               for (const auto& x : *this) { 
        

        
          
                   if (!ke.toOmit(x.first)) { 
        

        
          
                       l->insert(l->begin(), new VariableValue(x.second)); 
        

        
          
                   } else { 
        

        
          
                       ms_dbg_a(m_transaction, 7, ""Excluding key: "" + x.first 
        

        
          
                           + "" from target value.""); 
        

        
          
                   } 
        

        
          
               } 
        

        
          
           } 
        
    
  


I don't think the order of the resolved variables supposed to matter,  and even AnchoredSetVariable::resolve inserts new elements by iterating over std::unordered_map, which is, well, unorderdered, but replacing it with push_back still causes some test to fail:
  # File Name                                         Test Name                                                             Passed?
--- ---------                                         ---------                                                             -------
  1 offset-variable.json                              Variable offset - FILES_NAMES                                         failed!

Test failed. From: ../test/test-cases/regression/offset-variable.json.
Test name: Variable offset - FILES_NAMES.
Reason:
Error log was not matching the expected results.
Expecting: o0,8o0,8v491,8t:trimo0,16o0,16v709,16t:trim
<...>
Error log:
ModSecurity: Warning. Matched ""Operator `Rx' with parameter `(fiasdfasdfledata|filedata)' against variable `FILES_NAMES:filedata' (Value: `filedata' ) [file ""offset-variable.json""] [line ""2""] [id ""1""] [rev """"] [msg ""s""] [data """"] [severity ""0""] [ver """"] [maturity ""0""] [accuracy ""0""] [hostname ""200.249.12.31""] [uri ""/wheee/f i l e ""] [unique_id ""1596052147""] [ref ""o0,16o0,16v709,16t:trimo0,8o0,8v491,8t:trim""]",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2374,2020-07-28T18:29:50Z,2020-10-29T22:48:39Z,2020-10-30T13:47:53Z,CLOSED,False,9962,6047,365,https://github.com/WGH-,Use std::shared_ptr for variable resolution,30,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2374,https://github.com/WGH-,6,https://github.com/SpiderLabs/ModSecurity/pull/2374#issuecomment-665990756,"AnchoredSetVariable::resolve is called for every rule (see RuleWithOperator::evaluate). The previous implementation allocated a new copy of every variable, which quickly added up. In my tests, AnchoredSetVariable::resolve function consumed 7.8% of run time.
AnchoredSetVariable (which is a multimap) values are never changed, only added. This means it's safe to store them in std::shared_ptr, and make resolve return shared_ptr pointing to the same object.
Other resolve implementation could also use this optimization by not allocating new objects, however, they are not hot spots, so this optimization was not implemented there.
In my benchmark, this raises performance from 117 requests per second to 131 RPS, and overhead is lowered from 7.8% to 2.4%.
As a bonus, replacing plain pointer with smart pointers make code cleaner, since using smart pointers makes manual deletes no longer necessary.
Additionally, VariableOrigin is now stored in plain std::vector, since it's wasteful to store structure containing just two integer values using std::list<std::unique_ptr<T>>.
Before (the thing to the left of executeTransformations labeled ""modsecuri..""):

After:

SVG files for the flamegraphs: flamegraphs.tar.gz","I have rebased it on top of v3/dev/3.1-experimental branch.
I have been unable to test it with my benchmark, because it crashes. Base v3/dev/3.1-experimental crashes as well, so it's not caused by the shared_ptr changes.
(gdb) bt
#0  0x00007ffff7c0cf16 in __dynamic_cast () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00007ffff7ea7d6f in modsecurity::RuleWithActions::executeTransformations (this=this@entry=0x5555565eeb00, trans=trans@entry=0x555564ca3390, in=""%2F"", Python Exception <class 'AttributeError'> 'NoneType' object has no attribute 'pointer':
results=std::__cxx11::list) at rule_with_actions.cc:336
#2  0x00007ffff7ead9f4 in modsecurity::RuleWithOperator::evaluate (this=0x5555565eeb00, trans=0x555564ca3390) at rule_with_operator.cc:303
#3  0x00007ffff7e9bba4 in modsecurity::RulesSet::evaluate (this=0x5555555bc870, phase=phase@entry=3, t=t@entry=0x555564ca3390) at rules_set.cc:300
#4  0x00007ffff7e88303 in modsecurity::Transaction::processRequestBody (this=<optimized out>) at transaction.cc:985
#5  0x0000555555559a8c in process_transaction (it=0x7fffffffe080, modsecTransaction=0x555564ca3390, j=...) at benchmark.cc:103
#6  main (argc=<optimized out>, argv=<optimized out>) at benchmark.cc:194
(gdb) frame 1
#1  0x00007ffff7ea7d6f in modsecurity::RuleWithActions::executeTransformations (this=this@entry=0x5555565eeb00, trans=trans@entry=0x555564ca3390, in=""%2F"", results=std::__cxx11::list = {...}) at rule_with_actions.cc:336
336             if (dynamic_cast<actions::transformations::None *>(t)) {",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2374,2020-07-28T18:29:50Z,2020-10-29T22:48:39Z,2020-10-30T13:47:53Z,CLOSED,False,9962,6047,365,https://github.com/WGH-,Use std::shared_ptr for variable resolution,30,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2374,https://github.com/zimmerle,7,https://github.com/SpiderLabs/ModSecurity/pull/2374#issuecomment-666357926,"AnchoredSetVariable::resolve is called for every rule (see RuleWithOperator::evaluate). The previous implementation allocated a new copy of every variable, which quickly added up. In my tests, AnchoredSetVariable::resolve function consumed 7.8% of run time.
AnchoredSetVariable (which is a multimap) values are never changed, only added. This means it's safe to store them in std::shared_ptr, and make resolve return shared_ptr pointing to the same object.
Other resolve implementation could also use this optimization by not allocating new objects, however, they are not hot spots, so this optimization was not implemented there.
In my benchmark, this raises performance from 117 requests per second to 131 RPS, and overhead is lowered from 7.8% to 2.4%.
As a bonus, replacing plain pointer with smart pointers make code cleaner, since using smart pointers makes manual deletes no longer necessary.
Additionally, VariableOrigin is now stored in plain std::vector, since it's wasteful to store structure containing just two integer values using std::list<std::unique_ptr<T>>.
Before (the thing to the left of executeTransformations labeled ""modsecuri..""):

After:

SVG files for the flamegraphs: flamegraphs.tar.gz","I made a test. std::deque basically gives the same performance (slower within the margin of error: 130 RPS).
std::deque shines when you actually use it as a queue: i.e. append/remove items to/from either end. Sure, it also avoids reallocations when you append elements, but the count and the size of individual elements are too small here to matter.

Thank you for having a test on it. My concern was about memory handling, but you have a point. @martinhsv also mentioned to me the possibility to use .reserve() to promptly pre-allocated the vector resources whenever we are able to measure (or educated guess its size).
We do use it here:

  
    
      ModSecurity/src/anchored_set_variable.cc
    
    
        Lines 31 to 36
      in
      5824470
    
  
  
    

        
          
           AnchoredSetVariable::AnchoredSetVariable(Transaction *t, 
        

        
          
               const std::string &name) 
        

        
          
               : m_transaction(t), 
        

        
          
               m_name(name) { 
        

        
          
                   reserve(10); 
        

        
          
               }",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2374,2020-07-28T18:29:50Z,2020-10-29T22:48:39Z,2020-10-30T13:47:53Z,CLOSED,False,9962,6047,365,https://github.com/WGH-,Use std::shared_ptr for variable resolution,30,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2374,https://github.com/zimmerle,8,https://github.com/SpiderLabs/ModSecurity/pull/2374#issuecomment-666358407,"AnchoredSetVariable::resolve is called for every rule (see RuleWithOperator::evaluate). The previous implementation allocated a new copy of every variable, which quickly added up. In my tests, AnchoredSetVariable::resolve function consumed 7.8% of run time.
AnchoredSetVariable (which is a multimap) values are never changed, only added. This means it's safe to store them in std::shared_ptr, and make resolve return shared_ptr pointing to the same object.
Other resolve implementation could also use this optimization by not allocating new objects, however, they are not hot spots, so this optimization was not implemented there.
In my benchmark, this raises performance from 117 requests per second to 131 RPS, and overhead is lowered from 7.8% to 2.4%.
As a bonus, replacing plain pointer with smart pointers make code cleaner, since using smart pointers makes manual deletes no longer necessary.
Additionally, VariableOrigin is now stored in plain std::vector, since it's wasteful to store structure containing just two integer values using std::list<std::unique_ptr<T>>.
Before (the thing to the left of executeTransformations labeled ""modsecuri..""):

After:

SVG files for the flamegraphs: flamegraphs.tar.gz","By the way, AnchoredSetVariable has a couple of places where the variable is inserted in front of the vector for no apparent reason. I think replacing it with push_back will have bigger impact.

  
    
      ModSecurity/src/anchored_set_variable.cc
    
    
        Lines 83 to 88
      in
      0eb3c12
    
  
  
    

        
          
           void AnchoredSetVariable::resolve( 
        

        
          
               std::vector<const VariableValue *> *l) { 
        

        
          
               for (const auto& x : *this) { 
        

        
          
                   l->insert(l->begin(), new VariableValue(x.second)); 
        

        
          
               } 
        

        
          
           } 
        
    
  



  
    
      ModSecurity/src/anchored_set_variable.cc
    
    
        Lines 91 to 102
      in
      0eb3c12
    
  
  
    

        
          
           void AnchoredSetVariable::resolve( 
        

        
          
               std::vector<const VariableValue *> *l, 
        

        
          
               variables::KeyExclusions &ke) { 
        

        
          
               for (const auto& x : *this) { 
        

        
          
                   if (!ke.toOmit(x.first)) { 
        

        
          
                       l->insert(l->begin(), new VariableValue(x.second)); 
        

        
          
                   } else { 
        

        
          
                       ms_dbg_a(m_transaction, 7, ""Excluding key: "" + x.first 
        

        
          
                           + "" from target value.""); 
        

        
          
                   } 
        

        
          
               } 
        

        
          
           } 
        
    
  


I don't think the order of the resolved variables supposed to matter, and even AnchoredSetVariable::resolve inserts new elements by iterating over std::unordered_map, which is, well, unorderdered, but replacing it with push_back still causes some test to fail:
  # File Name                                         Test Name                                                             Passed?
--- ---------                                         ---------                                                             -------
  1 offset-variable.json                              Variable offset - FILES_NAMES                                         failed!

Test failed. From: ../test/test-cases/regression/offset-variable.json.
Test name: Variable offset - FILES_NAMES.
Reason:
Error log was not matching the expected results.
Expecting: o0,8o0,8v491,8t:trimo0,16o0,16v709,16t:trim
<...>
Error log:
ModSecurity: Warning. Matched ""Operator `Rx' with parameter `(fiasdfasdfledata|filedata)' against variable `FILES_NAMES:filedata' (Value: `filedata' ) [file ""offset-variable.json""] [line ""2""] [id ""1""] [rev """"] [msg ""s""] [data """"] [severity ""0""] [ver """"] [maturity ""0""] [accuracy ""0""] [hostname ""200.249.12.31""] [uri ""/wheee/f i l e ""] [unique_id ""1596052147""] [ref ""o0,16o0,16v709,16t:trimo0,8o0,8v491,8t:trim""]


Placing that on my TODO list, getting back to you in a few.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2374,2020-07-28T18:29:50Z,2020-10-29T22:48:39Z,2020-10-30T13:47:53Z,CLOSED,False,9962,6047,365,https://github.com/WGH-,Use std::shared_ptr for variable resolution,30,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2374,https://github.com/zimmerle,9,https://github.com/SpiderLabs/ModSecurity/pull/2374#issuecomment-671348276,"AnchoredSetVariable::resolve is called for every rule (see RuleWithOperator::evaluate). The previous implementation allocated a new copy of every variable, which quickly added up. In my tests, AnchoredSetVariable::resolve function consumed 7.8% of run time.
AnchoredSetVariable (which is a multimap) values are never changed, only added. This means it's safe to store them in std::shared_ptr, and make resolve return shared_ptr pointing to the same object.
Other resolve implementation could also use this optimization by not allocating new objects, however, they are not hot spots, so this optimization was not implemented there.
In my benchmark, this raises performance from 117 requests per second to 131 RPS, and overhead is lowered from 7.8% to 2.4%.
As a bonus, replacing plain pointer with smart pointers make code cleaner, since using smart pointers makes manual deletes no longer necessary.
Additionally, VariableOrigin is now stored in plain std::vector, since it's wasteful to store structure containing just two integer values using std::list<std::unique_ptr<T>>.
Before (the thing to the left of executeTransformations labeled ""modsecuri..""):

After:

SVG files for the flamegraphs: flamegraphs.tar.gz","Rebased this patch here: be4cba2a375d22c74866c076d75e4b99eeacf8a1
It seems that it introduces an issue regarding the RunTimeString execution.
The test case: regression/issue-1844.json is falling with a core dump.

  
    
      ModSecurity/test/test-cases/regression/issue-1844.json
    
    
        Lines 241 to 287
      in
      b321829
    
  
  
    

        
          
             ""enabled"":1, 
        

        
          
             ""version_min"":300000, 
        

        
          
             ""title"":""m_lineNumber ... mapping ... correct line number in file (6/n)"", 
        

        
          
             ""client"":{ 
        

        
          
               ""ip"":""200.249.12.31"", 
        

        
          
               ""port"":123 
        

        
          
             }, 
        

        
          
             ""server"":{ 
        

        
          
               ""ip"":""200.249.12.31"", 
        

        
          
               ""port"":80 
        

        
          
             }, 
        

        
          
             ""request"":{ 
        

        
          
               ""headers"":{ 
        

        
          
                 ""Host"":""localhost"", 
        

        
          
                 ""User-Agent"":""curl/7.38.0"", 
        

        
          
                 ""Accept"":""*/*"", 
        

        
          
                 ""Content-Length"": ""27"", 
        

        
          
                 ""Content-Type"": ""application/x-www-form-urlencoded"", 
        

        
          
                 ""Authorization"": ""Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=="" 
        

        
          
               }, 
        

        
          
               ""uri"":""/"", 
        

        
          
               ""method"":""POST"", 
        

        
          
               ""body"": [ 
        

        
          
                 ""param1=test5"" 
        

        
          
               ] 
        

        
          
             }, 
        

        
          
             ""response"":{ 
        

        
          
               ""headers"":{ 
        

        
          
                 ""Date"":""Mon, 13 Jul 2015 20:02:41 GMT"", 
        

        
          
                 ""Last-Modified"":""Sun, 26 Oct 2014 22:33:37 GMT"", 
        

        
          
                 ""Content-Type"":""text/html"" 
        

        
          
               }, 
        

        
          
               ""body"":[ 
        

        
          
                 ""no need."" 
        

        
          
               ] 
        

        
          
             }, 
        

        
          
             ""expected"":{ 
        

        
          
               ""error_log"":""line \""174\"""", 
        

        
          
               ""http_code"":403 
        

        
          
             }, 
        

        
          
             ""rules"":[ 
        

        
          
               ""SecRuleEngine On"", 
        

        
          
               ""SecDefaultAction \""phase:request,deny\"""", 
        

        
          
               ""SecRule WEBAPPID \""@contains test3\"" \""id:1,phase:3,pass,t:trim\"""", 
        

        
          
               ""Include test-cases/data/not-so-big-file.conf"" 
        

        
          
             ] 
        

        
          
           } 
        
    
  


back trace below:
#0  0x00007ffff7e94f5b in std::__uniq_ptr_impl<modsecurity::RunTimeString, std::default_delete<modsecurity::RunTimeString> >::_M_ptr (this=<optimized out>) at rule_with_actions.cc:399
#1  std::unique_ptr<modsecurity::RunTimeString, std::default_delete<modsecurity::RunTimeString> >::get (this=<optimized out>) at /usr/include/c++/10.1.0/bits/unique_ptr.h:421
#2  std::unique_ptr<modsecurity::RunTimeString, std::default_delete<modsecurity::RunTimeString> >::operator bool (this=<optimized out>) at /usr/include/c++/10.1.0/bits/unique_ptr.h:435
#3  std::operator==<modsecurity::RunTimeString, std::default_delete<modsecurity::RunTimeString> >(std::unique_ptr<modsecurity::RunTimeString, std::default_delete<modsecurity::RunTimeString> > const&, decltype(nullptr)) (__x=...) at /usr/include/c++/10.1.0/bits/unique_ptr.h:760
#4  modsecurity::actions::ActionWithRunTimeString::getEvaluatedRunTimeString[abi:cxx11](modsecurity::Transaction*) const (transaction=<optimized out>, this=<optimized out>) at ../src/actions/action_with_run_time_string.h:53
#5  modsecurity::RuleWithActions::getMessage[abi:cxx11](modsecurity::Transaction*) const (this=0x555555646c60, t=0x5555556651a0) at rule_with_actions.cc:399
#6  0x00007ffff7e3ac2f in modsecurity::variables::Rule_DictElement::msg (t=<optimized out>, rule=<optimized out>, l=0x7fffffffafa0) at ../src/variables/rule.h:124
#7  0x00007ffff7e91f10 in modsecurity::RunTimeString::evaluate[abi:cxx11](modsecurity::Transaction*) (this=0x555555645350, transaction=transaction@entry=0x5555556651a0) at run_time_string.cc:58
#8  0x00007ffff7ec62e1 in modsecurity::actions::ActionWithRunTimeString::getEvaluatedRunTimeString[abi:cxx11](modsecurity::Transaction*) const (transaction=0x5555556651a0, this=0x555555682d60) at ../src/actions/action_with_run_time_string.h:53
#9  modsecurity::actions::SetVar::execute (this=0x555555682d60, t=0x5555556651a0) at actions/set_var.cc:50
#10 0x00007ffff7e9609d in modsecurity::RuleWithActions::executeActionsIndependentOfChainedRuleResult (this=0x55555558ffc0, trans=0x5555556651a0) at rule_with_actions.cc:207
#11 0x00007ffff7e9cb0e in modsecurity::RuleWithOperator::evaluate (this=0x55555558ffc0, trans=<optimized out>) at rule_with_operator.cc:338
#12 0x00007ffff7e89724 in modsecurity::RulesSet::evaluate (this=<optimized out>, phase=phase@entry=3, t=t@entry=0x5555556651a0) at /usr/include/c++/10.1.0/bits/shared_ptr_base.h:1324
#13 0x00007ffff7e76d1a in modsecurity::Transaction::processRequestBody (this=0x5555556651a0) at transaction.cc:984
#14 0x000055555555db39 in perform_unit_test (test=<optimized out>, tests=<optimized out>, res=<optimized out>, count=<optimized out>) at regression/regression.cc:344
#15 0x000055555555976f in main (argc=<optimized out>, argv=<optimized out>) at regression/regression.cc:548
>>> bt
#0  0x00007ffff7e94f5b in std::__uniq_ptr_impl<modsecurity::RunTimeString, std::default_delete<modsecurity::RunTimeString> >::_M_ptr (this=<optimized out>) at rule_with_actions.cc:399
#1  std::unique_ptr<modsecurity::RunTimeString, std::default_delete<modsecurity::RunTimeString> >::get (this=<optimized out>) at /usr/include/c++/10.1.0/bits/unique_ptr.h:421
#2  std::unique_ptr<modsecurity::RunTimeString, std::default_delete<modsecurity::RunTimeString> >::operator bool (this=<optimized out>) at /usr/include/c++/10.1.0/bits/unique_ptr.h:435
#3  std::operator==<modsecurity::RunTimeString, std::default_delete<modsecurity::RunTimeString> >(std::unique_ptr<modsecurity::RunTimeString, std::default_delete<modsecurity::RunTimeString> > const&, decltype(nullptr)) (__x=...) at /usr/include/c++/10.1.0/bits/unique_ptr.h:760
#4  modsecurity::actions::ActionWithRunTimeString::getEvaluatedRunTimeString[abi:cxx11](modsecurity::Transaction*) const (transaction=<optimized out>, this=<optimized out>) at ../src/actions/action_with_run_time_string.h:53
#5  modsecurity::RuleWithActions::getMessage[abi:cxx11](modsecurity::Transaction*) const (this=0x555555646c60, t=0x5555556651a0) at rule_with_actions.cc:399
#6  0x00007ffff7e3ac2f in modsecurity::variables::Rule_DictElement::msg (t=<optimized out>, rule=<optimized out>, l=0x7fffffffafa0) at ../src/variables/rule.h:124
#7  0x00007ffff7e91f10 in modsecurity::RunTimeString::evaluate[abi:cxx11](modsecurity::Transaction*) (this=0x555555645350, transaction=transaction@entry=0x5555556651a0) at run_time_string.cc:58
#8  0x00007ffff7ec62e1 in modsecurity::actions::ActionWithRunTimeString::getEvaluatedRunTimeString[abi:cxx11](modsecurity::Transaction*) const (transaction=0x5555556651a0, this=0x555555682d60) at ../src/actions/action_with_run_time_string.h:53
#9  modsecurity::actions::SetVar::execute (this=0x555555682d60, t=0x5555556651a0) at actions/set_var.cc:50
#10 0x00007ffff7e9609d in modsecurity::RuleWithActions::executeActionsIndependentOfChainedRuleResult (this=0x55555558ffc0, trans=0x5555556651a0) at rule_with_actions.cc:207
#11 0x00007ffff7e9cb0e in modsecurity::RuleWithOperator::evaluate (this=0x55555558ffc0, trans=<optimized out>) at rule_with_operator.cc:338
#12 0x00007ffff7e89724 in modsecurity::RulesSet::evaluate (this=<optimized out>, phase=phase@entry=3, t=t@entry=0x5555556651a0) at /usr/include/c++/10.1.0/bits/shared_ptr_base.h:1324
#13 0x00007ffff7e76d1a in modsecurity::Transaction::processRequestBody (this=0x5555556651a0) at transaction.cc:984
#14 0x000055555555db39 in perform_unit_test (test=<optimized out>, tests=<optimized out>, res=<optimized out>, count=<optimized out>) at regression/regression.cc:344
#15 0x000055555555976f in main (argc=<optimized out>, argv=<optimized out>) at regression/regression.cc:548",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2374,2020-07-28T18:29:50Z,2020-10-29T22:48:39Z,2020-10-30T13:47:53Z,CLOSED,False,9962,6047,365,https://github.com/WGH-,Use std::shared_ptr for variable resolution,30,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2374,https://github.com/zimmerle,10,https://github.com/SpiderLabs/ModSecurity/pull/2374#issuecomment-671358258,"AnchoredSetVariable::resolve is called for every rule (see RuleWithOperator::evaluate). The previous implementation allocated a new copy of every variable, which quickly added up. In my tests, AnchoredSetVariable::resolve function consumed 7.8% of run time.
AnchoredSetVariable (which is a multimap) values are never changed, only added. This means it's safe to store them in std::shared_ptr, and make resolve return shared_ptr pointing to the same object.
Other resolve implementation could also use this optimization by not allocating new objects, however, they are not hot spots, so this optimization was not implemented there.
In my benchmark, this raises performance from 117 requests per second to 131 RPS, and overhead is lowered from 7.8% to 2.4%.
As a bonus, replacing plain pointer with smart pointers make code cleaner, since using smart pointers makes manual deletes no longer necessary.
Additionally, VariableOrigin is now stored in plain std::vector, since it's wasteful to store structure containing just two integer values using std::list<std::unique_ptr<T>>.
Before (the thing to the left of executeTransformations labeled ""modsecuri..""):

After:

SVG files for the flamegraphs: flamegraphs.tar.gz",Updated to 47be22e,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2374,2020-07-28T18:29:50Z,2020-10-29T22:48:39Z,2020-10-30T13:47:53Z,CLOSED,False,9962,6047,365,https://github.com/WGH-,Use std::shared_ptr for variable resolution,30,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2374,https://github.com/zimmerle,11,https://github.com/SpiderLabs/ModSecurity/pull/2374#issuecomment-671361398,"AnchoredSetVariable::resolve is called for every rule (see RuleWithOperator::evaluate). The previous implementation allocated a new copy of every variable, which quickly added up. In my tests, AnchoredSetVariable::resolve function consumed 7.8% of run time.
AnchoredSetVariable (which is a multimap) values are never changed, only added. This means it's safe to store them in std::shared_ptr, and make resolve return shared_ptr pointing to the same object.
Other resolve implementation could also use this optimization by not allocating new objects, however, they are not hot spots, so this optimization was not implemented there.
In my benchmark, this raises performance from 117 requests per second to 131 RPS, and overhead is lowered from 7.8% to 2.4%.
As a bonus, replacing plain pointer with smart pointers make code cleaner, since using smart pointers makes manual deletes no longer necessary.
Additionally, VariableOrigin is now stored in plain std::vector, since it's wasteful to store structure containing just two integer values using std::list<std::unique_ptr<T>>.
Before (the thing to the left of executeTransformations labeled ""modsecuri..""):

After:

SVG files for the flamegraphs: flamegraphs.tar.gz","I have rebased it on top of v3/dev/3.1-experimental branch.
I have been unable to test it with my benchmark, because it crashes. Base v3/dev/3.1-experimental crashes as well, so it's not caused by the shared_ptr changes.
(gdb) bt
#0  0x00007ffff7c0cf16 in __dynamic_cast () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00007ffff7ea7d6f in modsecurity::RuleWithActions::executeTransformations (this=this@entry=0x5555565eeb00, trans=trans@entry=0x555564ca3390, in=""%2F"", Python Exception <class 'AttributeError'> 'NoneType' object has no attribute 'pointer':
results=std::__cxx11::list) at rule_with_actions.cc:336
#2  0x00007ffff7ead9f4 in modsecurity::RuleWithOperator::evaluate (this=0x5555565eeb00, trans=0x555564ca3390) at rule_with_operator.cc:303
#3  0x00007ffff7e9bba4 in modsecurity::RulesSet::evaluate (this=0x5555555bc870, phase=phase@entry=3, t=t@entry=0x555564ca3390) at rules_set.cc:300
#4  0x00007ffff7e88303 in modsecurity::Transaction::processRequestBody (this=<optimized out>) at transaction.cc:985
#5  0x0000555555559a8c in process_transaction (it=0x7fffffffe080, modsecTransaction=0x555564ca3390, j=...) at benchmark.cc:103
#6  main (argc=<optimized out>, argv=<optimized out>) at benchmark.cc:194
(gdb) frame 1
#1  0x00007ffff7ea7d6f in modsecurity::RuleWithActions::executeTransformations (this=this@entry=0x5555565eeb00, trans=trans@entry=0x555564ca3390, in=""%2F"", results=std::__cxx11::list = {...}) at rule_with_actions.cc:336
336             if (dynamic_cast<actions::transformations::None *>(t)) {


@WGH- do you mind to test it again against the top of v3.1-experimental. If it still failing, can you share the set of rules that you are using? I am not able to reproduce it here.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2374,2020-07-28T18:29:50Z,2020-10-29T22:48:39Z,2020-10-30T13:47:53Z,CLOSED,False,9962,6047,365,https://github.com/WGH-,Use std::shared_ptr for variable resolution,30,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2374,https://github.com/WGH-,12,https://github.com/SpiderLabs/ModSecurity/pull/2374#issuecomment-671947188,"AnchoredSetVariable::resolve is called for every rule (see RuleWithOperator::evaluate). The previous implementation allocated a new copy of every variable, which quickly added up. In my tests, AnchoredSetVariable::resolve function consumed 7.8% of run time.
AnchoredSetVariable (which is a multimap) values are never changed, only added. This means it's safe to store them in std::shared_ptr, and make resolve return shared_ptr pointing to the same object.
Other resolve implementation could also use this optimization by not allocating new objects, however, they are not hot spots, so this optimization was not implemented there.
In my benchmark, this raises performance from 117 requests per second to 131 RPS, and overhead is lowered from 7.8% to 2.4%.
As a bonus, replacing plain pointer with smart pointers make code cleaner, since using smart pointers makes manual deletes no longer necessary.
Additionally, VariableOrigin is now stored in plain std::vector, since it's wasteful to store structure containing just two integer values using std::list<std::unique_ptr<T>>.
Before (the thing to the left of executeTransformations labeled ""modsecuri..""):

After:

SVG files for the flamegraphs: flamegraphs.tar.gz","It seems that it introduces an issue regarding the RunTimeString execution.

I'm having the same crash in my benchmark in base v3.1-experimental. I suppose this patch is not at fault, it just shuffled something a bit so the underlying problem surfaces in the regression test.
I'll create a minimal reproduction, and report back to #2376",True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2374,2020-07-28T18:29:50Z,2020-10-29T22:48:39Z,2020-10-30T13:47:53Z,CLOSED,False,9962,6047,365,https://github.com/WGH-,Use std::shared_ptr for variable resolution,30,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2374,https://github.com/zimmerle,13,https://github.com/SpiderLabs/ModSecurity/pull/2374#issuecomment-677921934,"AnchoredSetVariable::resolve is called for every rule (see RuleWithOperator::evaluate). The previous implementation allocated a new copy of every variable, which quickly added up. In my tests, AnchoredSetVariable::resolve function consumed 7.8% of run time.
AnchoredSetVariable (which is a multimap) values are never changed, only added. This means it's safe to store them in std::shared_ptr, and make resolve return shared_ptr pointing to the same object.
Other resolve implementation could also use this optimization by not allocating new objects, however, they are not hot spots, so this optimization was not implemented there.
In my benchmark, this raises performance from 117 requests per second to 131 RPS, and overhead is lowered from 7.8% to 2.4%.
As a bonus, replacing plain pointer with smart pointers make code cleaner, since using smart pointers makes manual deletes no longer necessary.
Additionally, VariableOrigin is now stored in plain std::vector, since it's wasteful to store structure containing just two integer values using std::list<std::unique_ptr<T>>.
Before (the thing to the left of executeTransformations labeled ""modsecuri..""):

After:

SVG files for the flamegraphs: flamegraphs.tar.gz","It seems that push_back was used together with std::make_shared on different places, those could be replaced with emplace_back. I am having it tested here.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2374,2020-07-28T18:29:50Z,2020-10-29T22:48:39Z,2020-10-30T13:47:53Z,CLOSED,False,9962,6047,365,https://github.com/WGH-,Use std::shared_ptr for variable resolution,30,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2374,https://github.com/WGH-,14,https://github.com/SpiderLabs/ModSecurity/pull/2374#issuecomment-677923430,"AnchoredSetVariable::resolve is called for every rule (see RuleWithOperator::evaluate). The previous implementation allocated a new copy of every variable, which quickly added up. In my tests, AnchoredSetVariable::resolve function consumed 7.8% of run time.
AnchoredSetVariable (which is a multimap) values are never changed, only added. This means it's safe to store them in std::shared_ptr, and make resolve return shared_ptr pointing to the same object.
Other resolve implementation could also use this optimization by not allocating new objects, however, they are not hot spots, so this optimization was not implemented there.
In my benchmark, this raises performance from 117 requests per second to 131 RPS, and overhead is lowered from 7.8% to 2.4%.
As a bonus, replacing plain pointer with smart pointers make code cleaner, since using smart pointers makes manual deletes no longer necessary.
Additionally, VariableOrigin is now stored in plain std::vector, since it's wasteful to store structure containing just two integer values using std::list<std::unique_ptr<T>>.
Before (the thing to the left of executeTransformations labeled ""modsecuri..""):

After:

SVG files for the flamegraphs: flamegraphs.tar.gz","std::make_shared<T>(...) is more efficient than std::shared_ptr(new T(...)), since the former will do only one heap allocation instead of two, though.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2374,2020-07-28T18:29:50Z,2020-10-29T22:48:39Z,2020-10-30T13:47:53Z,CLOSED,False,9962,6047,365,https://github.com/WGH-,Use std::shared_ptr for variable resolution,30,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2374,https://github.com/WGH-,15,https://github.com/SpiderLabs/ModSecurity/pull/2374#issuecomment-718972823,"AnchoredSetVariable::resolve is called for every rule (see RuleWithOperator::evaluate). The previous implementation allocated a new copy of every variable, which quickly added up. In my tests, AnchoredSetVariable::resolve function consumed 7.8% of run time.
AnchoredSetVariable (which is a multimap) values are never changed, only added. This means it's safe to store them in std::shared_ptr, and make resolve return shared_ptr pointing to the same object.
Other resolve implementation could also use this optimization by not allocating new objects, however, they are not hot spots, so this optimization was not implemented there.
In my benchmark, this raises performance from 117 requests per second to 131 RPS, and overhead is lowered from 7.8% to 2.4%.
As a bonus, replacing plain pointer with smart pointers make code cleaner, since using smart pointers makes manual deletes no longer necessary.
Additionally, VariableOrigin is now stored in plain std::vector, since it's wasteful to store structure containing just two integer values using std::list<std::unique_ptr<T>>.
Before (the thing to the left of executeTransformations labeled ""modsecuri..""):

After:

SVG files for the flamegraphs: flamegraphs.tar.gz",@zimmerle Did you already merge it into v3/dev/3.1-experimental? Or what happened?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2374,2020-07-28T18:29:50Z,2020-10-29T22:48:39Z,2020-10-30T13:47:53Z,CLOSED,False,9962,6047,365,https://github.com/WGH-,Use std::shared_ptr for variable resolution,30,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2374,https://github.com/zimmerle,16,https://github.com/SpiderLabs/ModSecurity/pull/2374#issuecomment-719065413,"AnchoredSetVariable::resolve is called for every rule (see RuleWithOperator::evaluate). The previous implementation allocated a new copy of every variable, which quickly added up. In my tests, AnchoredSetVariable::resolve function consumed 7.8% of run time.
AnchoredSetVariable (which is a multimap) values are never changed, only added. This means it's safe to store them in std::shared_ptr, and make resolve return shared_ptr pointing to the same object.
Other resolve implementation could also use this optimization by not allocating new objects, however, they are not hot spots, so this optimization was not implemented there.
In my benchmark, this raises performance from 117 requests per second to 131 RPS, and overhead is lowered from 7.8% to 2.4%.
As a bonus, replacing plain pointer with smart pointers make code cleaner, since using smart pointers makes manual deletes no longer necessary.
Additionally, VariableOrigin is now stored in plain std::vector, since it's wasteful to store structure containing just two integer values using std::list<std::unique_ptr<T>>.
Before (the thing to the left of executeTransformations labeled ""modsecuri..""):

After:

SVG files for the flamegraphs: flamegraphs.tar.gz","@zimmerle Did you already merge it into v3/dev/3.1-experimental? Or what happened?

Yes. It is merged on v3.1-experimental. As shared pointer I have delayed the variable resolution to the next minute if needed.
Listed here-

  
    
      ModSecurity/headers/modsecurity/variable_value.h
    
    
        Lines 51 to 86
      in
      abf59f4
    
  
  
    

        
          
               * Use cases for VariableValue creation: 
        

        
          
               * 
        

        
          
               * AnchoredSet - Use case A (eg. ARGS).         - Collection + Key 
        

        
          
               * Anchored    - Use case B (eg. REQUEST_URI).  - Key 
        

        
          
               * Custom      - Use case C (eg. WEBAPP_ID).    - Key 
        

        
          
               * CustomSet 
        

        
          
               *     Fixed   - Use case D (eg. TX).           - Collection + Key 
        

        
          
               *     Dynamic - Use case E (eg. ENV).          - Collection + Key 
        

        
          
               * 
        

        
          
               * 
        

        
          
               *     | Key  | Collec. | Key + Collec. | Value | Full Name 
        

        
          
               *   A |  &   |   &     |   *           |   &   |   * 
        

        
          
               *   B |  x   |   &     |   *           |   &   |   & 
        

        
          
               *   C |  x   |   &     |   *           |   &   |   & 
        

        
          
               *   D |  &   |   &     |   *           |   &   |   * 
        

        
          
               *   E |  &   |   &     |   *           |   *   |   * 
        

        
          
               * 
        

        
          
               * 
        

        
          
               * 
        

        
          
               *  Currently big picture of getName and getKey: 
        

        
          
               * 
        

        
          
               *  getName() 
        

        
          
               *    - Lua Engine     - RuleWithOperator                     - Transaction 
        

        
          
               *                       - UpdateMatchedVar                       - logging (audit) 
        

        
          
               *                       - ExecuteOperatorAt 
        

        
          
               *                       - ResolveMatchMsg 
        

        
          
               *                       - RulesExceptions (key and value) 
        

        
          
               * 
        

        
          
               * 
        

        
          
               *  getKey() 
        

        
          
               *    - Transaction       - Variable 
        

        
          
               *      - LogGen            - Contains 
        

        
          
               *                            - Regexp 
        

        
          
               * 
        

        
          
               * 
        

        
          
               * Performance strategy: Delay the name resolution till is really necessary. 
        
    
  


I did not collected the numbers yet, trying to make the branch stable first.
Other change that I did, was this: cc5d3f5",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2374,2020-07-28T18:29:50Z,2020-10-29T22:48:39Z,2020-10-30T13:47:53Z,CLOSED,False,9962,6047,365,https://github.com/WGH-,Use std::shared_ptr for variable resolution,30,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2374,https://github.com/zimmerle,17,https://github.com/SpiderLabs/ModSecurity/pull/2374#issuecomment-719067420,"AnchoredSetVariable::resolve is called for every rule (see RuleWithOperator::evaluate). The previous implementation allocated a new copy of every variable, which quickly added up. In my tests, AnchoredSetVariable::resolve function consumed 7.8% of run time.
AnchoredSetVariable (which is a multimap) values are never changed, only added. This means it's safe to store them in std::shared_ptr, and make resolve return shared_ptr pointing to the same object.
Other resolve implementation could also use this optimization by not allocating new objects, however, they are not hot spots, so this optimization was not implemented there.
In my benchmark, this raises performance from 117 requests per second to 131 RPS, and overhead is lowered from 7.8% to 2.4%.
As a bonus, replacing plain pointer with smart pointers make code cleaner, since using smart pointers makes manual deletes no longer necessary.
Additionally, VariableOrigin is now stored in plain std::vector, since it's wasteful to store structure containing just two integer values using std::list<std::unique_ptr<T>>.
Before (the thing to the left of executeTransformations labeled ""modsecuri..""):

After:

SVG files for the flamegraphs: flamegraphs.tar.gz","I am going to close this. We can track the performance numbers in a separated issue, if needed.
Thank you @WGH- .",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2374,2020-07-28T18:29:50Z,2020-10-29T22:48:39Z,2020-10-30T13:47:53Z,CLOSED,False,9962,6047,365,https://github.com/WGH-,Use std::shared_ptr for variable resolution,30,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2374,https://github.com/WGH-,18,https://github.com/SpiderLabs/ModSecurity/pull/2374#issuecomment-719492726,"AnchoredSetVariable::resolve is called for every rule (see RuleWithOperator::evaluate). The previous implementation allocated a new copy of every variable, which quickly added up. In my tests, AnchoredSetVariable::resolve function consumed 7.8% of run time.
AnchoredSetVariable (which is a multimap) values are never changed, only added. This means it's safe to store them in std::shared_ptr, and make resolve return shared_ptr pointing to the same object.
Other resolve implementation could also use this optimization by not allocating new objects, however, they are not hot spots, so this optimization was not implemented there.
In my benchmark, this raises performance from 117 requests per second to 131 RPS, and overhead is lowered from 7.8% to 2.4%.
As a bonus, replacing plain pointer with smart pointers make code cleaner, since using smart pointers makes manual deletes no longer necessary.
Additionally, VariableOrigin is now stored in plain std::vector, since it's wasteful to store structure containing just two integer values using std::list<std::unique_ptr<T>>.
Before (the thing to the left of executeTransformations labeled ""modsecuri..""):

After:

SVG files for the flamegraphs: flamegraphs.tar.gz","It's just the state of this PR after you force-pushed some diverged branch utterly confused me. It's clear now, thanks,",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2374,2020-07-28T18:29:50Z,2020-10-29T22:48:39Z,2020-10-30T13:47:53Z,CLOSED,False,9962,6047,365,https://github.com/WGH-,Use std::shared_ptr for variable resolution,30,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2374,https://github.com/zimmerle,19,https://github.com/SpiderLabs/ModSecurity/pull/2374#issuecomment-719562494,"AnchoredSetVariable::resolve is called for every rule (see RuleWithOperator::evaluate). The previous implementation allocated a new copy of every variable, which quickly added up. In my tests, AnchoredSetVariable::resolve function consumed 7.8% of run time.
AnchoredSetVariable (which is a multimap) values are never changed, only added. This means it's safe to store them in std::shared_ptr, and make resolve return shared_ptr pointing to the same object.
Other resolve implementation could also use this optimization by not allocating new objects, however, they are not hot spots, so this optimization was not implemented there.
In my benchmark, this raises performance from 117 requests per second to 131 RPS, and overhead is lowered from 7.8% to 2.4%.
As a bonus, replacing plain pointer with smart pointers make code cleaner, since using smart pointers makes manual deletes no longer necessary.
Additionally, VariableOrigin is now stored in plain std::vector, since it's wasteful to store structure containing just two integer values using std::list<std::unique_ptr<T>>.
Before (the thing to the left of executeTransformations labeled ""modsecuri..""):

After:

SVG files for the flamegraphs: flamegraphs.tar.gz","R after you force-pushed some diverged branch utterly confused me. It's clear now, thanks,

v3.1-experimental is being rebased against v3/master from time to time, indeed it is confusing.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2375,2020-07-28T22:28:01Z,2020-07-29T14:31:24Z,2020-07-29T20:42:22Z,CLOSED,False,28,34,5,https://github.com/WGH-,Optimize returning of transformation results,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2375,https://github.com/WGH-,1,https://github.com/SpiderLabs/ModSecurity/pull/2375,"There's no point in using shared_ptrs here, because the strings are never reused (except for the rare case of multiMatch).
Likewise, std::list has considerable overhead which goes wasted, because there's no random insertions or iterators needed to be preserved after modifications.
In my test, this leads to increase from 117 requests per second to 127 RPS.","There's no point in using shared_ptrs here, because the strings are never reused (except for the rare case of multiMatch).
Likewise, std::list has considerable overhead which goes wasted, because there's no random insertions or iterators needed to be preserved after modifications.
In my test, this leads to increase from 117 requests per second to 127 RPS.",True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2375,2020-07-28T22:28:01Z,2020-07-29T14:31:24Z,2020-07-29T20:42:22Z,CLOSED,False,28,34,5,https://github.com/WGH-,Optimize returning of transformation results,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2375,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2375#issuecomment-665700088,"There's no point in using shared_ptrs here, because the strings are never reused (except for the rare case of multiMatch).
Likewise, std::list has considerable overhead which goes wasted, because there's no random insertions or iterators needed to be preserved after modifications.
In my test, this leads to increase from 117 requests per second to 127 RPS.","Hi, @WGH-
That modification was already contemplated on our development branch.
As listed -
The type TransformationResults declared here:

  
    
      ModSecurity/src/rule_with_actions.h
    
    
        Lines 110 to 112
      in
      5824470
    
  
  
    

        
          
            
        

        
          
           using TransformationsResults = std::list<TransformationResult>; 
        

        
          
            
        
    
  


Those are further used here:

  
    
      ModSecurity/src/rule_with_actions.h
    
    
        Lines 242 to 256
      in
      5824470
    
  
  
    

        
          
           static void executeTransformation( 
        

        
          
               Transaction *transaction, 
        

        
          
               TransformationsResults *ret, 
        

        
          
               Transformation *transformation); 
        

        
          
            
        

        
          
           static void executeTransformation( 
        

        
          
               Transaction *transaction, 
        

        
          
               ModSecString &in, 
        

        
          
               TransformationsResults *ret, 
        

        
          
               Transformation *transformation); 
        

        
          
            
        

        
          
           void executeTransformations( 
        

        
          
               Transaction *transaction, 
        

        
          
               const std::string &value, 
        

        
          
               TransformationsResults &results) const; 
        
    
  


For bug fixing is usually ok to use the v3/master. For changes like optimization and internal structure modifications, I would suggest using the v3.1-experimental branch.
I also would like to invite you to discuss structural changes before propose fixes. Sometimes there are Technical debts that we have to live with for a limited time, as more significant changes will fix a given issue as collateral. You can ping @zimmerle (me :P), @martinhsv, @victorhora, @afoxdavidi, we can gather together and discuss how to tackle the issues. We do regular meetings we can have you in.
In that particular example, the class Rule is being splied into sub-classes: RuleWithActions, RuleScript, RuleUnconditional, RuleWithOperator, RuleMarker, in a near further we are going to have Rule split into Rule and ChainedRule. As Rule class became split, the scope of the variable value natuarraly became reduce, therefore the shared_ptr got removed.
The iterator over the results is still needed as used whenever the multimatch action is in place. Therefore, it does need to hold the computed values into a structure. It may not be necessary to save those values as operators could be applied as values got calculated, but that is discussing that we can save for later.
As the second part of your patch, you have proposed to replace std::list by std::vector, that is a fair modification. If I am not mistaken - both are O(1) to insert an element by the end; std::list is also O(1) to insert in the beginning. At arbitrary positions std::list is O(1) in contrast to std::vector that is O(n). As we don't insert elements at random positions, the benefit to use std::vector is regarding memory usage as the std::list is a double linked list; therefore, uses more resources. Although it can make a significant difference for big lists, we are talking about records of less than ten objects x =  (10*sizeof(*void)) [educated guess -- don't know for sure]. Yet, it is a benefit.
Since the objective is to save x why not save twice (2*x) by replacing std::list with std::array?  --  if I am not mistaken std::array does not allocate dynamic memory at all. If the problem in using std::array is the fact that it is not dynamic, std::doque may suit the bill, as it does not allocate memory, yet, it is dynamic and uses fewer resources than std::list or std::vector.
I am going to close this pull request, but you are more than welcomed to discuss the questions that I have raised. Looking forward to receiving anther pull request using std::array. Thanks @WGH-.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2375,2020-07-28T22:28:01Z,2020-07-29T14:31:24Z,2020-07-29T20:42:22Z,CLOSED,False,28,34,5,https://github.com/WGH-,Optimize returning of transformation results,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2375,https://github.com/WGH-,3,https://github.com/SpiderLabs/ModSecurity/pull/2375#issuecomment-665752118,"There's no point in using shared_ptrs here, because the strings are never reused (except for the rare case of multiMatch).
Likewise, std::list has considerable overhead which goes wasted, because there's no random insertions or iterators needed to be preserved after modifications.
In my test, this leads to increase from 117 requests per second to 127 RPS.","The problem with std::list is not just memory overhead. Its storage not contiguous, and it causes extra memory allocations and has poor locality. In fact, for small list sizes, for many workloads it may exhibit poorer performance than std::vector, even though complexity-wise it's better. The problem is O-notation considers only asymptotic complexity, and ignores constant complexity overhead and microarchitectural effects (like memory cache).
As of std::array, how can we use std::array, if the number of transformations is not limited?",True,{'THUMBS_UP': ['https://github.com/martinhsv']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2375,2020-07-28T22:28:01Z,2020-07-29T14:31:24Z,2020-07-29T20:42:22Z,CLOSED,False,28,34,5,https://github.com/WGH-,Optimize returning of transformation results,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2375,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/2375#issuecomment-665755320,"There's no point in using shared_ptrs here, because the strings are never reused (except for the rare case of multiMatch).
Likewise, std::list has considerable overhead which goes wasted, because there's no random insertions or iterators needed to be preserved after modifications.
In my test, this leads to increase from 117 requests per second to 127 RPS.","If pre-compute the transformation during the rules load time is not an option, std::deque may be a better indication. What do you think?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2375,2020-07-28T22:28:01Z,2020-07-29T14:31:24Z,2020-07-29T20:42:22Z,CLOSED,False,28,34,5,https://github.com/WGH-,Optimize returning of transformation results,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2375,https://github.com/WGH-,5,https://github.com/SpiderLabs/ModSecurity/pull/2375#issuecomment-665757869,"There's no point in using shared_ptrs here, because the strings are never reused (except for the rare case of multiMatch).
Likewise, std::list has considerable overhead which goes wasted, because there's no random insertions or iterators needed to be preserved after modifications.
In my test, this leads to increase from 117 requests per second to 127 RPS.",std::array size is a compile-time parameter. You can't allocate an array of arbitrary size on the stack with it.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2375,2020-07-28T22:28:01Z,2020-07-29T14:31:24Z,2020-07-29T20:42:22Z,CLOSED,False,28,34,5,https://github.com/WGH-,Optimize returning of transformation results,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2375,https://github.com/zimmerle,6,https://github.com/SpiderLabs/ModSecurity/pull/2375#issuecomment-665759169,"There's no point in using shared_ptrs here, because the strings are never reused (except for the rare case of multiMatch).
Likewise, std::list has considerable overhead which goes wasted, because there's no random insertions or iterators needed to be preserved after modifications.
In my test, this leads to increase from 117 requests per second to 127 RPS.","std::array size is a compile-time parameter. You can't allocate an array of arbitrary size on the stack with it.

as-is no, need coding. What about the std::deque?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2375,2020-07-28T22:28:01Z,2020-07-29T14:31:24Z,2020-07-29T20:42:22Z,CLOSED,False,28,34,5,https://github.com/WGH-,Optimize returning of transformation results,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2375,https://github.com/WGH-,7,https://github.com/SpiderLabs/ModSecurity/pull/2375#issuecomment-665915946,"There's no point in using shared_ptrs here, because the strings are never reused (except for the rare case of multiMatch).
Likewise, std::list has considerable overhead which goes wasted, because there's no random insertions or iterators needed to be preserved after modifications.
In my test, this leads to increase from 117 requests per second to 127 RPS.",std::deque is slightly slower here as well (126 RPS).,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2378,2020-07-30T15:33:37Z,2020-07-30T16:48:41Z,2020-07-30T16:48:53Z,MERGED,True,1,1,1,https://github.com/defanator,GeoIP: switch to GEOIP_MEMORY_CACHE from GEOIP_INDEX_CACHE,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2378,https://github.com/defanator,1,https://github.com/SpiderLabs/ModSecurity/pull/2378,"Using GEOIP_INDEX_CACHE on some older versions of libGeoIP (e.g. 1.5.0 which is the default version on CentOS 7) leads to ""Error reading file"" error while opening completely valid GeoIP.dat:
# cat test.c
#include <stdio.h>
#include ""GeoIP.h""

int main(void) {
  GeoIP *g;

  g = GeoIP_open(""/tmp/GeoIP.dat"", GEOIP_INDEX_CACHE);

  if (g == NULL) {
    printf(""error!\n"");
  }

  GeoIP_delete(g);

  exit(0);
}
# cc -lGeoIP -o test test.c
# ./test
Error reading file /tmp/GeoIP.dat
error!
# sed -i -e 's,GEOIP_INDEX_CACHE,GEOIP_MEMORY_CACHE,' test.c
# cc -lGeoIP -o test test.c
# ./test
# geoiplookup -f /tmp/GeoIP.dat -v 8.8.8.8
GeoIP Country Edition: GEO-106FREE 20180327 Build 1 Copyright (c) 2018 MaxMind Inc All Rights Reserved

Also tested with recent GeoLite databases converted from new format into legacy format, distributed here:
https://mailfud.org/geoip-legacy/
Closes #2186.","Using GEOIP_INDEX_CACHE on some older versions of libGeoIP (e.g. 1.5.0 which is the default version on CentOS 7) leads to ""Error reading file"" error while opening completely valid GeoIP.dat:
# cat test.c
#include <stdio.h>
#include ""GeoIP.h""

int main(void) {
  GeoIP *g;

  g = GeoIP_open(""/tmp/GeoIP.dat"", GEOIP_INDEX_CACHE);

  if (g == NULL) {
    printf(""error!\n"");
  }

  GeoIP_delete(g);

  exit(0);
}
# cc -lGeoIP -o test test.c
# ./test
Error reading file /tmp/GeoIP.dat
error!
# sed -i -e 's,GEOIP_INDEX_CACHE,GEOIP_MEMORY_CACHE,' test.c
# cc -lGeoIP -o test test.c
# ./test
# geoiplookup -f /tmp/GeoIP.dat -v 8.8.8.8
GeoIP Country Edition: GEO-106FREE 20180327 Build 1 Copyright (c) 2018 MaxMind Inc All Rights Reserved

Also tested with recent GeoLite databases converted from new format into legacy format, distributed here:
https://mailfud.org/geoip-legacy/
Closes #2186.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2378,2020-07-30T15:33:37Z,2020-07-30T16:48:41Z,2020-07-30T16:48:53Z,MERGED,True,1,1,1,https://github.com/defanator,GeoIP: switch to GEOIP_MEMORY_CACHE from GEOIP_INDEX_CACHE,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2378,https://github.com/defanator,2,https://github.com/SpiderLabs/ModSecurity/pull/2378#issuecomment-666465127,"Using GEOIP_INDEX_CACHE on some older versions of libGeoIP (e.g. 1.5.0 which is the default version on CentOS 7) leads to ""Error reading file"" error while opening completely valid GeoIP.dat:
# cat test.c
#include <stdio.h>
#include ""GeoIP.h""

int main(void) {
  GeoIP *g;

  g = GeoIP_open(""/tmp/GeoIP.dat"", GEOIP_INDEX_CACHE);

  if (g == NULL) {
    printf(""error!\n"");
  }

  GeoIP_delete(g);

  exit(0);
}
# cc -lGeoIP -o test test.c
# ./test
Error reading file /tmp/GeoIP.dat
error!
# sed -i -e 's,GEOIP_INDEX_CACHE,GEOIP_MEMORY_CACHE,' test.c
# cc -lGeoIP -o test test.c
# ./test
# geoiplookup -f /tmp/GeoIP.dat -v 8.8.8.8
GeoIP Country Edition: GEO-106FREE 20180327 Build 1 Copyright (c) 2018 MaxMind Inc All Rights Reserved

Also tested with recent GeoLite databases converted from new format into legacy format, distributed here:
https://mailfud.org/geoip-legacy/
Closes #2186.","Also, I've been playing with libmodsecurity built with --without-maxmind configure option here to avoid any possible interferences between two supported ""geoip backends"".",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2378,2020-07-30T15:33:37Z,2020-07-30T16:48:41Z,2020-07-30T16:48:53Z,MERGED,True,1,1,1,https://github.com/defanator,GeoIP: switch to GEOIP_MEMORY_CACHE from GEOIP_INDEX_CACHE,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2378,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/2378#issuecomment-666519557,"Using GEOIP_INDEX_CACHE on some older versions of libGeoIP (e.g. 1.5.0 which is the default version on CentOS 7) leads to ""Error reading file"" error while opening completely valid GeoIP.dat:
# cat test.c
#include <stdio.h>
#include ""GeoIP.h""

int main(void) {
  GeoIP *g;

  g = GeoIP_open(""/tmp/GeoIP.dat"", GEOIP_INDEX_CACHE);

  if (g == NULL) {
    printf(""error!\n"");
  }

  GeoIP_delete(g);

  exit(0);
}
# cc -lGeoIP -o test test.c
# ./test
Error reading file /tmp/GeoIP.dat
error!
# sed -i -e 's,GEOIP_INDEX_CACHE,GEOIP_MEMORY_CACHE,' test.c
# cc -lGeoIP -o test test.c
# ./test
# geoiplookup -f /tmp/GeoIP.dat -v 8.8.8.8
GeoIP Country Edition: GEO-106FREE 20180327 Build 1 Copyright (c) 2018 MaxMind Inc All Rights Reserved

Also tested with recent GeoLite databases converted from new format into legacy format, distributed here:
https://mailfud.org/geoip-legacy/
Closes #2186.",Thank you @defanator,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2379,2020-08-04T21:37:28Z,2020-11-09T17:17:08Z,2020-11-09T17:17:08Z,CLOSED,False,63,2,3,https://github.com/martinhsv,Fix: FILES variable does not use multipart part name for key,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2379,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2379,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2379,2020-08-04T21:37:28Z,2020-11-09T17:17:08Z,2020-11-09T17:17:08Z,CLOSED,False,63,2,3,https://github.com/martinhsv,Fix: FILES variable does not use multipart part name for key,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2379,https://github.com/airween,2,https://github.com/SpiderLabs/ModSecurity/pull/2379#issuecomment-669000463,,"If I'm right, whit this patch the m_variableFiles and m_variableFilesNames transaction variables will have the same value (m->m_name from the body processor). These variables converted to FILES and FILES_NAMES here and here (and in the other function), so the FILES and FILES_NAMES will have the same value.
Or em I wrong?
(Note, there was a similar bug: the m_variableFiles and m_variableFilesNames both had the m_filename value, and fixed in #2016.)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2379,2020-08-04T21:37:28Z,2020-11-09T17:17:08Z,2020-11-09T17:17:08Z,CLOSED,False,63,2,3,https://github.com/martinhsv,Fix: FILES variable does not use multipart part name for key,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2379,https://github.com/martinhsv,3,https://github.com/SpiderLabs/ModSecurity/pull/2379#issuecomment-669225285,,"Hi @airween ,
Thanks for the feedback.  I'll explain in a little more detail and you can let me know if you still have questions or concerns.
The FILES_NAMES collection (i.e. m_variableFilesNames) has key-value pairs where both the key and the value are the same string, which means that with multipart part content including something ilke this ...
Content-Disposition: form-data; name=""abcd""; filename=""x00001.txt""

... you could test for the 'name' in either the key position of a rule or the value position of a rule, or both.  For example:
SecRule FILES_NAMES:'/abc/' ""@contains bcd"" ""id:1240, phase:2, deny,status:403""

This is similar to how other '_NAMES' collections work.  For example, in ARGS_NAMES, the same string is both the key and the value in the key-value pair.
With this pull request, the FILES collection (i.e. m_variableFiles) entries will have a key that is the same as in FILES_NAMES, but the value will be the string from 'filename'.  It enables a rule like this:
SecRule FILES:'/abc/' ""@contains x000"" ""id:1240, phase:2, deny,status:403""

... which would not work in v3 prior to this pull request.
This is analogous to ARGS_NAMES vs. ARGS, where they both have the same key but the latter has a value that is different from the key.
Note also, that this change makes the functionality match that of v2.9.3.
Let me know if that clarifies things or if you still have questions or concerns.  Thanks.",True,{'THUMBS_UP': ['https://github.com/airween']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2379,2020-08-04T21:37:28Z,2020-11-09T17:17:08Z,2020-11-09T17:17:08Z,CLOSED,False,63,2,3,https://github.com/martinhsv,Fix: FILES variable does not use multipart part name for key,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2379,https://github.com/airween,4,https://github.com/SpiderLabs/ModSecurity/pull/2379#issuecomment-669523276,,"Hi @martinhsv,
many thanks for details, now it's clear. I checked your patch with this test file (which - I think - demonstrates the advantage of the feature), it worked as well (without the patch the last case was failed).
Just my 2 cents: it would be good to add this behavior to the documentation.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2379,2020-08-04T21:37:28Z,2020-11-09T17:17:08Z,2020-11-09T17:17:08Z,CLOSED,False,63,2,3,https://github.com/martinhsv,Fix: FILES variable does not use multipart part name for key,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2379,https://github.com/zimmerle,5,https://github.com/SpiderLabs/ModSecurity/pull/2379#issuecomment-723057051,,On QA here - https://travis-ci.org/github/SpiderLabs/ModSecurity/builds/741866960,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2379,2020-08-04T21:37:28Z,2020-11-09T17:17:08Z,2020-11-09T17:17:08Z,CLOSED,False,63,2,3,https://github.com/martinhsv,Fix: FILES variable does not use multipart part name for key,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2379,https://github.com/zimmerle,6,https://github.com/SpiderLabs/ModSecurity/pull/2379#issuecomment-724152317,,Merged! Thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2387,2020-08-25T10:57:27Z,2020-11-16T12:17:16Z,2020-11-16T12:17:16Z,CLOSED,False,215,0,8,https://github.com/marshal09,Add new transformation call phpArgsNames,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2387,https://github.com/marshal09,1,https://github.com/SpiderLabs/ModSecurity/pull/2387,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2387,2020-08-25T10:57:27Z,2020-11-16T12:17:16Z,2020-11-16T12:17:16Z,CLOSED,False,215,0,8,https://github.com/marshal09,Add new transformation call phpArgsNames,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2387,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2387#issuecomment-722373752,,Having this rebased and applied at v3/dev/pull_2387. Under QA.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2393,2020-09-05T14:55:15Z,2020-10-21T11:59:12Z,2020-10-21T11:59:12Z,CLOSED,False,5,4,1,https://github.com/WGH-,Fix Regex::searchAll behaviour wrt empty capturing groups,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2393,https://github.com/WGH-,1,https://github.com/SpiderLabs/ModSecurity/pull/2393,"Previously, searchAll would stop search when it encountered an empty
matching group in any position. This means that, for example,
regular expression ""(a)(b?)(c)"" would match string ""ac"", but the
resulting group list would be [""ac"", ""a""].
After this change, the resulting list for the aforementioned regular
expression becomes [""ac"", ""a"", """", ""c""] like it should've been.
Additionally, this also changes behaviour for multiple matches. For
example, when ""aaa00bbb"" is matched by ""[a-z]*"", previously only ""aaa""
would be returned. Now the matching list is [""aaa"", """", """", ""bbb"", """"].
The old behaviour was confusing and almost certainly a bug. The new
behaviour is the same as in Python's re.findall.
For reference, though, Go does it somewhat differently: empty matches
at the end of non-empty matches are ignored, so in Go above example is
[""aaa"", """", ""bbb""] instead.
This is the root cause of issue #2336 which has been already fixed by
replacing searchAll call there with a new function.
Cherry-picked from #2012","Previously, searchAll would stop search when it encountered an empty
matching group in any position. This means that, for example,
regular expression ""(a)(b?)(c)"" would match string ""ac"", but the
resulting group list would be [""ac"", ""a""].
After this change, the resulting list for the aforementioned regular
expression becomes [""ac"", ""a"", """", ""c""] like it should've been.
Additionally, this also changes behaviour for multiple matches. For
example, when ""aaa00bbb"" is matched by ""[a-z]*"", previously only ""aaa""
would be returned. Now the matching list is [""aaa"", """", """", ""bbb"", """"].
The old behaviour was confusing and almost certainly a bug. The new
behaviour is the same as in Python's re.findall.
For reference, though, Go does it somewhat differently: empty matches
at the end of non-empty matches are ignored, so in Go above example is
[""aaa"", """", ""bbb""] instead.
This is the root cause of issue #2336 which has been already fixed by
replacing searchAll call there with a new function.
Cherry-picked from #2012",True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2393,2020-09-05T14:55:15Z,2020-10-21T11:59:12Z,2020-10-21T11:59:12Z,CLOSED,False,5,4,1,https://github.com/WGH-,Fix Regex::searchAll behaviour wrt empty capturing groups,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2393,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2393#issuecomment-688833766,"Previously, searchAll would stop search when it encountered an empty
matching group in any position. This means that, for example,
regular expression ""(a)(b?)(c)"" would match string ""ac"", but the
resulting group list would be [""ac"", ""a""].
After this change, the resulting list for the aforementioned regular
expression becomes [""ac"", ""a"", """", ""c""] like it should've been.
Additionally, this also changes behaviour for multiple matches. For
example, when ""aaa00bbb"" is matched by ""[a-z]*"", previously only ""aaa""
would be returned. Now the matching list is [""aaa"", """", """", ""bbb"", """"].
The old behaviour was confusing and almost certainly a bug. The new
behaviour is the same as in Python's re.findall.
For reference, though, Go does it somewhat differently: empty matches
at the end of non-empty matches are ignored, so in Go above example is
[""aaa"", """", ""bbb""] instead.
This is the root cause of issue #2336 which has been already fixed by
replacing searchAll call there with a new function.
Cherry-picked from #2012",@martinhsv  you may want to have a look at this one as well.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2393,2020-09-05T14:55:15Z,2020-10-21T11:59:12Z,2020-10-21T11:59:12Z,CLOSED,False,5,4,1,https://github.com/WGH-,Fix Regex::searchAll behaviour wrt empty capturing groups,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2393,https://github.com/martinhsv,3,https://github.com/SpiderLabs/ModSecurity/pull/2393#issuecomment-692936009,"Previously, searchAll would stop search when it encountered an empty
matching group in any position. This means that, for example,
regular expression ""(a)(b?)(c)"" would match string ""ac"", but the
resulting group list would be [""ac"", ""a""].
After this change, the resulting list for the aforementioned regular
expression becomes [""ac"", ""a"", """", ""c""] like it should've been.
Additionally, this also changes behaviour for multiple matches. For
example, when ""aaa00bbb"" is matched by ""[a-z]*"", previously only ""aaa""
would be returned. Now the matching list is [""aaa"", """", """", ""bbb"", """"].
The old behaviour was confusing and almost certainly a bug. The new
behaviour is the same as in Python's re.findall.
For reference, though, Go does it somewhat differently: empty matches
at the end of non-empty matches are ignored, so in Go above example is
[""aaa"", """", ""bbb""] instead.
This is the root cause of issue #2336 which has been already fixed by
replacing searchAll call there with a new function.
Cherry-picked from #2012","You are quite right that the underlying problem with searchAll, that was one of the initial triggers for creating the new function now used by the rx operator, still exists in searchAll for that other functionality (other than the rx operator) that still use it.
However, I believe there is a correctness issue with the particular solution in this pull request.
Consider a scenario where the regex is ""^(|abc|def)"" and the input is ""abc"".
In this case there should be two successful full matches.  The first match should be an empty string.  The second match should be ""abc"".
With the code in this pull request, the first match of an empty string will occur successfully, but then the code will advance the offset, and on the second iteration of the loop, ""abc"" can no longer be produced as a match.
(Note:  There is a new searchGlobal function is another recent pull request (to support a new rxGlobal operator).  I had a notion to implement that and then, after some stabilization time, look to migrate the remaining users of searchAll to the new function.
You may wish to wait for that process to play out.)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2393,2020-09-05T14:55:15Z,2020-10-21T11:59:12Z,2020-10-21T11:59:12Z,CLOSED,False,5,4,1,https://github.com/WGH-,Fix Regex::searchAll behaviour wrt empty capturing groups,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2393,https://github.com/WGH-,4,https://github.com/SpiderLabs/ModSecurity/pull/2393#issuecomment-695123285,"Previously, searchAll would stop search when it encountered an empty
matching group in any position. This means that, for example,
regular expression ""(a)(b?)(c)"" would match string ""ac"", but the
resulting group list would be [""ac"", ""a""].
After this change, the resulting list for the aforementioned regular
expression becomes [""ac"", ""a"", """", ""c""] like it should've been.
Additionally, this also changes behaviour for multiple matches. For
example, when ""aaa00bbb"" is matched by ""[a-z]*"", previously only ""aaa""
would be returned. Now the matching list is [""aaa"", """", """", ""bbb"", """"].
The old behaviour was confusing and almost certainly a bug. The new
behaviour is the same as in Python's re.findall.
For reference, though, Go does it somewhat differently: empty matches
at the end of non-empty matches are ignored, so in Go above example is
[""aaa"", """", ""bbb""] instead.
This is the root cause of issue #2336 which has been already fixed by
replacing searchAll call there with a new function.
Cherry-picked from #2012","Interesting, I never thought about that. It's also interesting to note that Python used to have ""my"" behaviour (re.findall(r""^(|abc|def)"", ""abc"") == [""""]) until Python 3.7, where it was changed to allow non-empty matches right after empty match (re.findall(r""^(|abc|def)"", ""abc"") == ["""", ""abc""]). python/cpython@70d56fb",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2393,2020-09-05T14:55:15Z,2020-10-21T11:59:12Z,2020-10-21T11:59:12Z,CLOSED,False,5,4,1,https://github.com/WGH-,Fix Regex::searchAll behaviour wrt empty capturing groups,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2393,https://github.com/zimmerle,5,https://github.com/SpiderLabs/ModSecurity/pull/2393#issuecomment-713517340,"Previously, searchAll would stop search when it encountered an empty
matching group in any position. This means that, for example,
regular expression ""(a)(b?)(c)"" would match string ""ac"", but the
resulting group list would be [""ac"", ""a""].
After this change, the resulting list for the aforementioned regular
expression becomes [""ac"", ""a"", """", ""c""] like it should've been.
Additionally, this also changes behaviour for multiple matches. For
example, when ""aaa00bbb"" is matched by ""[a-z]*"", previously only ""aaa""
would be returned. Now the matching list is [""aaa"", """", """", ""bbb"", """"].
The old behaviour was confusing and almost certainly a bug. The new
behaviour is the same as in Python's re.findall.
For reference, though, Go does it somewhat differently: empty matches
at the end of non-empty matches are ignored, so in Go above example is
[""aaa"", """", ""bbb""] instead.
This is the root cause of issue #2336 which has been already fixed by
replacing searchAll call there with a new function.
Cherry-picked from #2012",Hi @WGH- I am closing this and #2394 in favor of #2396. Please let me know if I am missing something.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2394,2020-09-05T17:13:11Z,2020-10-21T11:58:57Z,2020-10-21T11:58:57Z,CLOSED,False,87,78,8,https://github.com/WGH-,"Add Regex::searchAllMatches method, remove searchAll",1,[],https://github.com/SpiderLabs/ModSecurity/pull/2394,https://github.com/WGH-,1,https://github.com/SpiderLabs/ModSecurity/pull/2394,"searchAll interface was pretty strange, as it returned a reversed flattened list of all groups of all matches. For example, given the regexp ""([a-z])([0-9])"", and the string ""a1b2"", it would return the list [""2"", ""b"", ""b2"", ""1"", ""a"", ""a1""].
searchAllMatches introduces better interface. In the aforementioned scenario it would return [[""a1"", ""a"", ""1""], [""b2"", ""b"", ""2""]]. Also, unlike searchAll, it doesn't make string copies itself, and returns just offsets, like searchOneMatch does.","searchAll interface was pretty strange, as it returned a reversed flattened list of all groups of all matches. For example, given the regexp ""([a-z])([0-9])"", and the string ""a1b2"", it would return the list [""2"", ""b"", ""b2"", ""1"", ""a"", ""a1""].
searchAllMatches introduces better interface. In the aforementioned scenario it would return [[""a1"", ""a"", ""1""], [""b2"", ""b"", ""2""]]. Also, unlike searchAll, it doesn't make string copies itself, and returns just offsets, like searchOneMatch does.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2394,2020-09-05T17:13:11Z,2020-10-21T11:58:57Z,2020-10-21T11:58:57Z,CLOSED,False,87,78,8,https://github.com/WGH-,"Add Regex::searchAllMatches method, remove searchAll",1,[],https://github.com/SpiderLabs/ModSecurity/pull/2394,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2394#issuecomment-688832779,"searchAll interface was pretty strange, as it returned a reversed flattened list of all groups of all matches. For example, given the regexp ""([a-z])([0-9])"", and the string ""a1b2"", it would return the list [""2"", ""b"", ""b2"", ""1"", ""a"", ""a1""].
searchAllMatches introduces better interface. In the aforementioned scenario it would return [[""a1"", ""a"", ""1""], [""b2"", ""b"", ""2""]]. Also, unlike searchAll, it doesn't make string copies itself, and returns just offsets, like searchOneMatch does.",Thanks @WGH-. @martinhsv : ping. That is somewhat in the same piece of code that you have worked with.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2394,2020-09-05T17:13:11Z,2020-10-21T11:58:57Z,2020-10-21T11:58:57Z,CLOSED,False,87,78,8,https://github.com/WGH-,"Add Regex::searchAllMatches method, remove searchAll",1,[],https://github.com/SpiderLabs/ModSecurity/pull/2394,https://github.com/martinhsv,3,https://github.com/SpiderLabs/ModSecurity/pull/2394#issuecomment-692943052,"searchAll interface was pretty strange, as it returned a reversed flattened list of all groups of all matches. For example, given the regexp ""([a-z])([0-9])"", and the string ""a1b2"", it would return the list [""2"", ""b"", ""b2"", ""1"", ""a"", ""a1""].
searchAllMatches introduces better interface. In the aforementioned scenario it would return [[""a1"", ""a"", ""1""], [""b2"", ""b"", ""2""]]. Also, unlike searchAll, it doesn't make string copies itself, and returns just offsets, like searchOneMatch does.","I haven't reviewed this in detail, but it looks like it at least has the same correctness problem that I outlined in #2393 (that it always immediately advances the offset after finding an empty string as a full match).
Note my other remarks in that pull request as well.  To avoid too much implementation of overlapping functionality, it might be simplest to allow the rxGlobal + searchGlobal to proceed (assuming it passes muster), and then somewhat later look to migrate remaining users of searchAll to use searchGlobal.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2394,2020-09-05T17:13:11Z,2020-10-21T11:58:57Z,2020-10-21T11:58:57Z,CLOSED,False,87,78,8,https://github.com/WGH-,"Add Regex::searchAllMatches method, remove searchAll",1,[],https://github.com/SpiderLabs/ModSecurity/pull/2394,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/2394#issuecomment-713517211,"searchAll interface was pretty strange, as it returned a reversed flattened list of all groups of all matches. For example, given the regexp ""([a-z])([0-9])"", and the string ""a1b2"", it would return the list [""2"", ""b"", ""b2"", ""1"", ""a"", ""a1""].
searchAllMatches introduces better interface. In the aforementioned scenario it would return [[""a1"", ""a"", ""1""], [""b2"", ""b"", ""2""]]. Also, unlike searchAll, it doesn't make string copies itself, and returns just offsets, like searchOneMatch does.",Hi @WGH- I am closing this and #2393 in favor of #2396. Please let me know if I am missing something.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2396,2020-09-09T04:00:12Z,2020-10-26T19:57:42Z,2020-10-26T19:57:42Z,CLOSED,False,329,3,12,https://github.com/martinhsv,Add support for new operator rxGlobal,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2396,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2396,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2396,2020-09-09T04:00:12Z,2020-10-26T19:57:42Z,2020-10-26T19:57:42Z,CLOSED,False,329,3,12,https://github.com/martinhsv,Add support for new operator rxGlobal,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2396,https://github.com/dune73,2,https://github.com/SpiderLabs/ModSecurity/pull/2396#issuecomment-689415126,,"Hey @martinhsv, you did not provide a description. But is this the operator that is going to do global matching after the standard rx operator returns to the previous behavior with the limit to the matches?
The name pretty much speaks for itself, but I just want to confirm what I am deducing.",True,{'THUMBS_UP': ['https://github.com/airween']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2396,2020-09-09T04:00:12Z,2020-10-26T19:57:42Z,2020-10-26T19:57:42Z,CLOSED,False,329,3,12,https://github.com/martinhsv,Add support for new operator rxGlobal,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2396,https://github.com/martinhsv,3,https://github.com/SpiderLabs/ModSecurity/pull/2396#issuecomment-689574342,,"Yes, that is correct.  In June the rx operator was adjusted to do only a single full match, then exit.
This new rxGlobal operator is meant to support the use case where one wishes to do multiple full captures from some content.  Although such use cases are expected to be rare, it was felt that it would be beneficial for rule writers to have a tool available to enable emulation of pcre's '/g' (global) behaviour.",True,{'ROCKET': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2396,2020-09-09T04:00:12Z,2020-10-26T19:57:42Z,2020-10-26T19:57:42Z,CLOSED,False,329,3,12,https://github.com/martinhsv,Add support for new operator rxGlobal,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2396,https://github.com/dune73,4,https://github.com/SpiderLabs/ModSecurity/pull/2396#issuecomment-689581324,,Thank you for the confirmation. I certainly like more options with rule writing.,True,{'CONFUSED': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2396,2020-09-09T04:00:12Z,2020-10-26T19:57:42Z,2020-10-26T19:57:42Z,CLOSED,False,329,3,12,https://github.com/martinhsv,Add support for new operator rxGlobal,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2396,https://github.com/zimmerle,5,https://github.com/SpiderLabs/ModSecurity/pull/2396#issuecomment-690244456,,"Related issues: #2394, #2336, #2393, #2348, and #2012.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2396,2020-09-09T04:00:12Z,2020-10-26T19:57:42Z,2020-10-26T19:57:42Z,CLOSED,False,329,3,12,https://github.com/martinhsv,Add support for new operator rxGlobal,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2396,https://github.com/zimmerle,6,https://github.com/SpiderLabs/ModSecurity/pull/2396#issuecomment-691080292,,"The SecRule language tests cases were update to support this new operator.
SpiderLabs/secrules-language-tests#9",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2396,2020-09-09T04:00:12Z,2020-10-26T19:57:42Z,2020-10-26T19:57:42Z,CLOSED,False,329,3,12,https://github.com/martinhsv,Add support for new operator rxGlobal,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2396,https://github.com/zimmerle,7,https://github.com/SpiderLabs/ModSecurity/pull/2396#issuecomment-691091249,,"Little modifications on the pull request:

removed updates on the TX test case.
updated test sub-module (SpiderLabs/secrules-language-tests#9).
updated the generated parser files.

I have it running on our QA as: v3/dev/pull_2396
Waiting for the QA results to continue the merging.
Merging this may imply in more work on: #2012. The other two patches #2394, and #2336 needs to be visited as well. They all somewhat tackle regex support.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2396,2020-09-09T04:00:12Z,2020-10-26T19:57:42Z,2020-10-26T19:57:42Z,CLOSED,False,329,3,12,https://github.com/martinhsv,Add support for new operator rxGlobal,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2396,https://github.com/mirkodziadzka-avi,8,https://github.com/SpiderLabs/ModSecurity/pull/2396#issuecomment-693370022,,"Some questions / proposal:

I think it would make sense to limit the number of repeated searches here. Maybe to 10 as default and changeable by a control-action -  if the user wants more. An unlimited search will create the same situation as in #2401 again.
Can you please share an example for a use case for this new operator?",True,"{'THUMBS_UP': ['https://github.com/zimmerle', 'https://github.com/ogarrett']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2396,2020-09-09T04:00:12Z,2020-10-26T19:57:42Z,2020-10-26T19:57:42Z,CLOSED,False,329,3,12,https://github.com/martinhsv,Add support for new operator rxGlobal,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2396,https://github.com/martinhsv,9,https://github.com/SpiderLabs/ModSecurity/pull/2396#issuecomment-693430723,,"Hi @mirkodziadzka-avi ,
Having global matching within the standard rx operator had several disadvantages, including:

the rx operator has a great many applications for which single-match-then-exit is sufficient (and global match confers no additional benefit)
the cases where global matching is beneficial are expected to be considerably more rare
there was no alternative whereby one could specify that one wanted single-match-then-exit (albeit one could craft rules to specifically consume the remainder of the string beyond the intended match)
for many rule writers, the global matching functionality would be unexpected, and hence they might not take that implementation detail into account when writing rules

Part of the thinking here is that we will now have a separate operator that does not impact the simpler, and far more common use cases that can be handled with rx.  The guidance will be that rule writers should use rx rather than rxGlobal, unless they actually need the more extensive capture functionality provided by the latter operator.  In other words, a more narrowly used operator, where rule writers have a greater awareness of the consequences that go along with greater power, can make any remaining risk reasonable.
All that said, your suggestion about having a configurable limit on the maximum number of repeated matches done by a 'global' match is still a reasonable thing to think about.  However, since ModSecurity already has quite a few knobs and switches that seem to be little used, some points that I would consider to make sure that a new configuration wouldn't merely add to clutter:

the rxGlobal operator's global matching functionality is particularly useful when the number of matches is non-small.  If one is trying to do an unknown (but small) number of matches within a string, then one could use the ordinary rx operator but with pattern nesting for the possible 2nd and 3rd matches (if up to 3 matches are expected).
in many cases where one has a compelling use case for rxGlobal, it's probable that the rule writer will have a better idea of what is a reasonable maximum size for the variable in question, in which case an accompanying rule can be written to limit length

Again, that's not to say that your suggestion shouldn't be considered -- merely that there are some reasons to give pause.  Input from the community on questions like this is invaluable
In terms of the use cases where rxGlobal might be useful, we recently saw a use case where a particular POST argument had parseable content (parseable by a regex but not by ModSecurity's builtin parsers), where individual parsed items could be detected as SQL injection via detectSQLi -- but the POST argument as a whole could not be so detected.
More broadly, any time you have substrings that you can capture in a regex, but where it's useful for the substrings themselves to be examined by a non-regex operator (for example detectSQLi, detectXSS, ... perhaps pmFromFile, ...), then the rxGlobal operator could be used to capture substrings into TX variables, and then examine those variables against the non-regex operator.
But, as emphasized earlier, these cases are expected to be rare.",True,"{'THUMBS_UP': ['https://github.com/zimmerle', 'https://github.com/dune73']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2396,2020-09-09T04:00:12Z,2020-10-26T19:57:42Z,2020-10-26T19:57:42Z,CLOSED,False,329,3,12,https://github.com/martinhsv,Add support for new operator rxGlobal,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2396,https://github.com/mirkodziadzka-avi,10,https://github.com/SpiderLabs/ModSecurity/pull/2396#issuecomment-693455732,,"Hi @martinhsv
Thanks for the answer


the rxGlobal operator's global matching functionality is particularly useful when the number of matches is non-small.  If one is trying to do an unknown (but small) number of matches within a string, then one could use the ordinary rx operator but with pattern nesting for the possible 2nd and 3rd matches (if up to 3 matches are expected).


I agree that this is possible, but it make the regex even more unreadable. Especially if you need more than 3 possible elements.

In terms of the use cases where rxGlobal might be useful, we recently saw a use case where a particular POST argument had parseable content (parseable by a regex but not by ModSecurity's builtin parsers), where individual parsed items could be detected as SQL injection via detectSQLi -- but the POST argument as a whole could not be so detected.

So, the idea is to use a single regex as a body parser and use TX:/\d+/ instead of ARGS in further rules?
I see the use case for your example, so thanks for pointing it out.
Just curious about your opinion: Wouldn't it be more useful (as a future project) to allow writing body parsers in Lua which then would populate ARGS?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2396,2020-09-09T04:00:12Z,2020-10-26T19:57:42Z,2020-10-26T19:57:42Z,CLOSED,False,329,3,12,https://github.com/martinhsv,Add support for new operator rxGlobal,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2396,https://github.com/zimmerle,11,https://github.com/SpiderLabs/ModSecurity/pull/2396#issuecomment-693515227,,"Just curious about your opinion: Wouldn't it be more useful (as a future project) to allow writing body parsers in Lua which then would populate ARGS?

TX and ENV collections can be populated by Lua. The first will keep the results in memory till the end of request, second will share info among the same process and lasts till deleted.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2396,2020-09-09T04:00:12Z,2020-10-26T19:57:42Z,2020-10-26T19:57:42Z,CLOSED,False,329,3,12,https://github.com/martinhsv,Add support for new operator rxGlobal,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2396,https://github.com/martinhsv,12,https://github.com/SpiderLabs/ModSecurity/pull/2396#issuecomment-693516481,,"So, the idea is to use a single regex as a body parser and use TX:/\d+/ instead of ARGS in further rules?

Yes, that's the basic idea.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2396,2020-09-09T04:00:12Z,2020-10-26T19:57:42Z,2020-10-26T19:57:42Z,CLOSED,False,329,3,12,https://github.com/martinhsv,Add support for new operator rxGlobal,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2396,https://github.com/zimmerle,13,https://github.com/SpiderLabs/ModSecurity/pull/2396#issuecomment-713515827,,v3/dev/pull_2396 branch was rebase on v3/master. Having it on QA one more time.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2396,2020-09-09T04:00:12Z,2020-10-26T19:57:42Z,2020-10-26T19:57:42Z,CLOSED,False,329,3,12,https://github.com/martinhsv,Add support for new operator rxGlobal,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2396,https://github.com/zimmerle,14,https://github.com/SpiderLabs/ModSecurity/pull/2396#issuecomment-715490150,,"Having the test case on the test-cases execution list -

  
    
      ModSecurity/Makefile.am
    
    
        Lines 173 to 175
      in
      acd158f
    
  
  
    

        
          
           TESTS+=test/test-cases/regression/operator-rx.json 
        

        
          
           TESTS+=test/test-cases/regression/operator-rxGlobal.json 
        

        
          
           TESTS+=test/test-cases/regression/operator-UnconditionalMatch.json 
        
    
  


On QA again.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2396,2020-09-09T04:00:12Z,2020-10-26T19:57:42Z,2020-10-26T19:57:42Z,CLOSED,False,329,3,12,https://github.com/martinhsv,Add support for new operator rxGlobal,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2396,https://github.com/zimmerle,15,https://github.com/SpiderLabs/ModSecurity/pull/2396#issuecomment-716788134,,Merged thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2399,2020-09-14T11:35:27Z,2020-12-07T17:45:44Z,2020-12-07T17:45:45Z,CLOSED,False,523,693,65,https://github.com/h0n3,Cleanups and major performance improvements,10,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2399,https://github.com/h0n3,1,https://github.com/SpiderLabs/ModSecurity/pull/2399,"While working with the project last year I found a couple of things and started profiling.
During that process I was able to eliminate some bottlenecks and cleaned up all the files that I touched during that process.
In the first place I did all those changes to an experimental 3.1 branch in expectation of version 3.1 being released at the end 2019. But since that has not happened until today I reapplied the changes to the current version (3.0.4).
I don't have the time at the moment to explain everything in detail, but feel free to ask questions about the changes. In case that the original changes to the 3.1 branch are of interest I can provide those as well.","While working with the project last year I found a couple of things and started profiling.
During that process I was able to eliminate some bottlenecks and cleaned up all the files that I touched during that process.
In the first place I did all those changes to an experimental 3.1 branch in expectation of version 3.1 being released at the end 2019. But since that has not happened until today I reapplied the changes to the current version (3.0.4).
I don't have the time at the moment to explain everything in detail, but feel free to ask questions about the changes. In case that the original changes to the 3.1 branch are of interest I can provide those as well.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2399,2020-09-14T11:35:27Z,2020-12-07T17:45:44Z,2020-12-07T17:45:45Z,CLOSED,False,523,693,65,https://github.com/h0n3,Cleanups and major performance improvements,10,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2399,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2399#issuecomment-692007766,"While working with the project last year I found a couple of things and started profiling.
During that process I was able to eliminate some bottlenecks and cleaned up all the files that I touched during that process.
In the first place I did all those changes to an experimental 3.1 branch in expectation of version 3.1 being released at the end 2019. But since that has not happened until today I reapplied the changes to the current version (3.0.4).
I don't have the time at the moment to explain everything in detail, but feel free to ask questions about the changes. In case that the original changes to the 3.1 branch are of interest I can provide those as well.",Thank you @h0n3!  The work on 3.1 is being held on 3.1-experimental. I am going to have a look in your pach.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2399,2020-09-14T11:35:27Z,2020-12-07T17:45:44Z,2020-12-07T17:45:45Z,CLOSED,False,523,693,65,https://github.com/h0n3,Cleanups and major performance improvements,10,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2399,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/2399#issuecomment-713510453,"While working with the project last year I found a couple of things and started profiling.
During that process I was able to eliminate some bottlenecks and cleaned up all the files that I touched during that process.
In the first place I did all those changes to an experimental 3.1 branch in expectation of version 3.1 being released at the end 2019. But since that has not happened until today I reapplied the changes to the current version (3.0.4).
I don't have the time at the moment to explain everything in detail, but feel free to ask questions about the changes. In case that the original changes to the 3.1 branch are of interest I can provide those as well.",Hi @h0n3 I am not sure how to handle your pull request. Did you had the chance to look at 3.1-experimental did you managed to test it?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2399,2020-09-14T11:35:27Z,2020-12-07T17:45:44Z,2020-12-07T17:45:45Z,CLOSED,False,523,693,65,https://github.com/h0n3,Cleanups and major performance improvements,10,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2399,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/2399#issuecomment-716788513,"While working with the project last year I found a couple of things and started profiling.
During that process I was able to eliminate some bottlenecks and cleaned up all the files that I touched during that process.
In the first place I did all those changes to an experimental 3.1 branch in expectation of version 3.1 being released at the end 2019. But since that has not happened until today I reapplied the changes to the current version (3.0.4).
I don't have the time at the moment to explain everything in detail, but feel free to ask questions about the changes. In case that the original changes to the 3.1 branch are of interest I can provide those as well.",@h0n3: ping,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2399,2020-09-14T11:35:27Z,2020-12-07T17:45:44Z,2020-12-07T17:45:45Z,CLOSED,False,523,693,65,https://github.com/h0n3,Cleanups and major performance improvements,10,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2399,https://github.com/zimmerle,5,https://github.com/SpiderLabs/ModSecurity/pull/2399#issuecomment-719666597,"While working with the project last year I found a couple of things and started profiling.
During that process I was able to eliminate some bottlenecks and cleaned up all the files that I touched during that process.
In the first place I did all those changes to an experimental 3.1 branch in expectation of version 3.1 being released at the end 2019. But since that has not happened until today I reapplied the changes to the current version (3.0.4).
I don't have the time at the moment to explain everything in detail, but feel free to ask questions about the changes. In case that the original changes to the 3.1 branch are of interest I can provide those as well.",@h0n3 after your email a get better understanding for the pull request. I will write some concerns here later.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2399,2020-09-14T11:35:27Z,2020-12-07T17:45:44Z,2020-12-07T17:45:45Z,CLOSED,False,523,693,65,https://github.com/h0n3,Cleanups and major performance improvements,10,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2399,https://github.com/zimmerle,6,https://github.com/SpiderLabs/ModSecurity/pull/2399#issuecomment-740073591,"While working with the project last year I found a couple of things and started profiling.
During that process I was able to eliminate some bottlenecks and cleaned up all the files that I touched during that process.
In the first place I did all those changes to an experimental 3.1 branch in expectation of version 3.1 being released at the end 2019. But since that has not happened until today I reapplied the changes to the current version (3.0.4).
I don't have the time at the moment to explain everything in detail, but feel free to ask questions about the changes. In case that the original changes to the 3.1 branch are of interest I can provide those as well.","@h0n3, as I explained on the email we are looking forward to receive your contributions in the format of feature or benefit -oriented patches or pull requests. With that we will be able to give it a better review.
Thank you.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2412,2020-10-01T15:39:22Z,2020-10-01T15:41:12Z,2020-10-02T12:13:10Z,CLOSED,False,359,3,6,https://github.com/ngoctint1lvc,Merge ModSecurity updates,9,[],https://github.com/SpiderLabs/ModSecurity/pull/2412,https://github.com/ngoctint1lvc,1,https://github.com/SpiderLabs/ModSecurity/pull/2412,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2412,2020-10-01T15:39:22Z,2020-10-01T15:41:12Z,2020-10-02T12:13:10Z,CLOSED,False,359,3,6,https://github.com/ngoctint1lvc,Merge ModSecurity updates,9,[],https://github.com/SpiderLabs/ModSecurity/pull/2412,https://github.com/ngoctint1lvc,2,https://github.com/SpiderLabs/ModSecurity/pull/2412#issuecomment-702221787,,Merge,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2412,2020-10-01T15:39:22Z,2020-10-01T15:41:12Z,2020-10-02T12:13:10Z,CLOSED,False,359,3,6,https://github.com/ngoctint1lvc,Merge ModSecurity updates,9,[],https://github.com/SpiderLabs/ModSecurity/pull/2412,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/2412#issuecomment-702274145,,?,True,{'LAUGH': ['https://github.com/ngoctint1lvc']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2412,2020-10-01T15:39:22Z,2020-10-01T15:41:12Z,2020-10-02T12:13:10Z,CLOSED,False,359,3,6,https://github.com/ngoctint1lvc,Merge ModSecurity updates,9,[],https://github.com/SpiderLabs/ModSecurity/pull/2412,https://github.com/ngoctint1lvc,4,https://github.com/SpiderLabs/ModSecurity/pull/2412#issuecomment-702601947,,"I'm trying to merge ModSecurity updates to my repo, it's just a mistake. Never mind, lol.",True,"{'THUMBS_UP': ['https://github.com/zimmerle'], 'LAUGH': ['https://github.com/zimmerle']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2412,2020-10-01T15:39:22Z,2020-10-01T15:41:12Z,2020-10-02T12:13:10Z,CLOSED,False,359,3,6,https://github.com/ngoctint1lvc,Merge ModSecurity updates,9,[],https://github.com/SpiderLabs/ModSecurity/pull/2412,https://github.com/zimmerle,5,https://github.com/SpiderLabs/ModSecurity/pull/2412#issuecomment-702700117,,no worries ;),True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2417,2020-10-07T21:58:58Z,,2020-10-21T11:44:26Z,OPEN,False,1,1,1,https://github.com/zehric,fix MULTIPART_UNMATCHED_BOUNDARY,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2417,https://github.com/zehric,1,https://github.com/SpiderLabs/ModSecurity/pull/2417,"The MULTIPART_UNMATCHED_BOUNDARY currently is set to 2 any time there is more than one boundary found in the request, even if all the boundaries were matched. This change makes it so that it will only be set to 2 if there was an unmatched boundary already found in the body somewhere.","The MULTIPART_UNMATCHED_BOUNDARY currently is set to 2 any time there is more than one boundary found in the request, even if all the boundaries were matched. This change makes it so that it will only be set to 2 if there was an unmatched boundary already found in the body somewhere.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2417,2020-10-07T21:58:58Z,,2020-10-21T11:44:26Z,OPEN,False,1,1,1,https://github.com/zehric,fix MULTIPART_UNMATCHED_BOUNDARY,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2417,https://github.com/zehric,2,https://github.com/SpiderLabs/ModSecurity/pull/2417#issuecomment-705216228,"The MULTIPART_UNMATCHED_BOUNDARY currently is set to 2 any time there is more than one boundary found in the request, even if all the boundaries were matched. This change makes it so that it will only be set to 2 if there was an unmatched boundary already found in the body somewhere.",@airween We discussed this change over email. Please help me bring this into master.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2417,2020-10-07T21:58:58Z,,2020-10-21T11:44:26Z,OPEN,False,1,1,1,https://github.com/zehric,fix MULTIPART_UNMATCHED_BOUNDARY,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2417,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/2417#issuecomment-705234908,"The MULTIPART_UNMATCHED_BOUNDARY currently is set to 2 any time there is more than one boundary found in the request, even if all the boundaries were matched. This change makes it so that it will only be set to 2 if there was an unmatched boundary already found in the body somewhere.","Hi @zehric,
Thank you for the pull request. The condition to turn that variable to 2 is described on a comment above the code that you have changed. Here -
https://github.com/SpiderLabs/ModSecurity/blob/v3/master/src/request_body_processor/multipart.cc#L1480-L1487
Is that description still valid?
See #1747 for further discussion on this particular issue.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2417,2020-10-07T21:58:58Z,,2020-10-21T11:44:26Z,OPEN,False,1,1,1,https://github.com/zehric,fix MULTIPART_UNMATCHED_BOUNDARY,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2417,https://github.com/zehric,4,https://github.com/SpiderLabs/ModSecurity/pull/2417#issuecomment-705239471,"The MULTIPART_UNMATCHED_BOUNDARY currently is set to 2 any time there is more than one boundary found in the request, even if all the boundaries were matched. This change makes it so that it will only be set to 2 if there was an unmatched boundary already found in the body somewhere.",It is still valid. Erwin and I had a discussion on this and he agrees it should be added.,True,{'CONFUSED': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2417,2020-10-07T21:58:58Z,,2020-10-21T11:44:26Z,OPEN,False,1,1,1,https://github.com/zehric,fix MULTIPART_UNMATCHED_BOUNDARY,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2417,https://github.com/airween,5,https://github.com/SpiderLabs/ModSecurity/pull/2417#issuecomment-705375334,"The MULTIPART_UNMATCHED_BOUNDARY currently is set to 2 any time there is more than one boundary found in the request, even if all the boundaries were matched. This change makes it so that it will only be set to 2 if there was an unmatched boundary already found in the body somewhere.","@zehric,
I'm sorry I can't help to merge any request, I'm just a contributor.
In our mail discussion I've suggested you take regression tests file(s) as well, but I don't see any of that. Please feel free to use this patch, and add to your PR. Also need to change the comment in the code.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2417,2020-10-07T21:58:58Z,,2020-10-21T11:44:26Z,OPEN,False,1,1,1,https://github.com/zehric,fix MULTIPART_UNMATCHED_BOUNDARY,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2417,https://github.com/airween,6,https://github.com/SpiderLabs/ModSecurity/pull/2417#issuecomment-705377136,"The MULTIPART_UNMATCHED_BOUNDARY currently is set to 2 any time there is more than one boundary found in the request, even if all the boundaries were matched. This change makes it so that it will only be set to 2 if there was an unmatched boundary already found in the body somewhere.","It is still valid. Erwin and I had a discussion on this and he agrees it should be added.

No, it's not valid. But in our discussion you wrote that:
Some lines like SecRule MULTIPART_UNMATCHED_BOUNDARY ""!@eq 0"" might be wrong after this change.
That's why you have to add a new correct description.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2417,2020-10-07T21:58:58Z,,2020-10-21T11:44:26Z,OPEN,False,1,1,1,https://github.com/zehric,fix MULTIPART_UNMATCHED_BOUNDARY,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2417,https://github.com/airween,7,https://github.com/SpiderLabs/ModSecurity/pull/2417#issuecomment-705380418,"The MULTIPART_UNMATCHED_BOUNDARY currently is set to 2 any time there is more than one boundary found in the request, even if all the boundaries were matched. This change makes it so that it will only be set to 2 if there was an unmatched boundary already found in the body somewhere.","To everyone who wants to check the behavior, here is a standalone regression test.
You can see that the valid boundary will gives value 2 for MULTIPART_UNMATCHED_BOUNDARY variable. This PR fixes it, and gives 0.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2417,2020-10-07T21:58:58Z,,2020-10-21T11:44:26Z,OPEN,False,1,1,1,https://github.com/zehric,fix MULTIPART_UNMATCHED_BOUNDARY,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2417,https://github.com/zimmerle,8,https://github.com/SpiderLabs/ModSecurity/pull/2417#issuecomment-705527249,"The MULTIPART_UNMATCHED_BOUNDARY currently is set to 2 any time there is more than one boundary found in the request, even if all the boundaries were matched. This change makes it so that it will only be set to 2 if there was an unmatched boundary already found in the body somewhere.","I am intrigued. Since I am not seen any previous discussion about the subject, can any of you clarify the objective of this patch?
I agree on the original comment on the pull request. I also agree with the comment on the code. But, I think the code - after the patch - is doing something else.
So, @zehric can you give me an example (request) of the issue that you want to mitigate.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2417,2020-10-07T21:58:58Z,,2020-10-21T11:44:26Z,OPEN,False,1,1,1,https://github.com/zehric,fix MULTIPART_UNMATCHED_BOUNDARY,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2417,https://github.com/martinhsv,9,https://github.com/SpiderLabs/ModSecurity/pull/2417#issuecomment-705859920,"The MULTIPART_UNMATCHED_BOUNDARY currently is set to 2 any time there is more than one boundary found in the request, even if all the boundaries were matched. This change makes it so that it will only be set to 2 if there was an unmatched boundary already found in the body somewhere.","So, this fix is really only relevant if someone is using
SecRule MULTIPART_UNMATCHED_BOUNDARY ""@gt 0"" ...

instead of
SecRule MULTIPART_UNMATCHED_BOUNDARY ""@eq 1

Right?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2417,2020-10-07T21:58:58Z,,2020-10-21T11:44:26Z,OPEN,False,1,1,1,https://github.com/zehric,fix MULTIPART_UNMATCHED_BOUNDARY,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2417,https://github.com/zehric,10,https://github.com/SpiderLabs/ModSecurity/pull/2417#issuecomment-705956751,"The MULTIPART_UNMATCHED_BOUNDARY currently is set to 2 any time there is more than one boundary found in the request, even if all the boundaries were matched. This change makes it so that it will only be set to 2 if there was an unmatched boundary already found in the body somewhere.","@zimmerle I don't think the comment needs to change, the new behavior is in line with what the comment says.
Take this well-formed request:
Content-Type: multipart/form-data; boundary=0000

--0000
Content-Disposition: form-data; name=""name""

Brian Rectanus
--0000
Content-Disposition: form-data; name=""image""; filename=""image.jpg""

BINARYDATA
--0000--

The current code will result in m_flag_unmatched_boundary == 2 even though there are no unmatched boundaries whatsoever in the entire body, because there is more than one matched boundary. That seems wrong to me as it should be 0 if there are no anomalies found at all.
Also, @martinhsv, unrelatedly I had a question to a closed PR here, could you please check it out? #2214",True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2417,2020-10-07T21:58:58Z,,2020-10-21T11:44:26Z,OPEN,False,1,1,1,https://github.com/zehric,fix MULTIPART_UNMATCHED_BOUNDARY,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2417,https://github.com/zimmerle,11,https://github.com/SpiderLabs/ModSecurity/pull/2417#issuecomment-706149166,"The MULTIPART_UNMATCHED_BOUNDARY currently is set to 2 any time there is more than one boundary found in the request, even if all the boundaries were matched. This change makes it so that it will only be set to 2 if there was an unmatched boundary already found in the body somewhere.","Thank you @zehric -- Indeed the example clarify the issue. I want to make a more detailed review of the functionality, not only your patch. We keep changing the same portion of code back and forward, let me understand it better and them I jump to review your patch. I will post the details here so you can follow up. I will be ready for it on Tuesday.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2417,2020-10-07T21:58:58Z,,2020-10-21T11:44:26Z,OPEN,False,1,1,1,https://github.com/zehric,fix MULTIPART_UNMATCHED_BOUNDARY,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2417,https://github.com/martinhsv,12,https://github.com/SpiderLabs/ModSecurity/pull/2417#issuecomment-712296544,"The MULTIPART_UNMATCHED_BOUNDARY currently is set to 2 any time there is more than one boundary found in the request, even if all the boundaries were matched. This change makes it so that it will only be set to 2 if there was an unmatched boundary already found in the body somewhere.","IMHO, there's nothing wrong with this pull request in isolation.  It does fix use cases where the flag should be 0 but currently has an incorrect value of 2.  And it doesn't make any other use cases worse.
However, I do have some misgivings about this overall solution (#1747 and #1924) for modified MULTIPART_UNMATCHED_BOUNDARY checking.
My first concern is that we have removed so many use cases from resulting in flag=1 that I start to wonder how useful the check still is (partly keeping in mind that rule 200004 (in https://github.com/SpiderLabs/ModSecurity/blob/v3/master/modsecurity.conf-recommended) tests only for the more permissive ""@eq 1, many users will simply use the default without assessing matters further).
Absent an identified impedance mismatch between this permissive ModSecurity behaviour and any web server, it's hard to assess how much of a concern this is.
A couple of options that could be considered if we want to tighten things slightly (i.e. increase the number of cases that trigger rule 200004 even with the permissive ""@eq 1"" setting:
A) Set the flag to 1 if the 'unmatched boundary' appears to be in a boundary position.  For example:
--1BOUNDARY
Content-Disposition: form-data; name=""my_id""

aabb
--2BOUNDARY
Content-Disposition: form-data; name=""my_name""

rrst
--1BOUNDARY
Content-Disposition: form-data; name=""yyy""

wwxx
--1BOUNDARY--

We could potentially test for a case like this by looking for a part header on the line immediately following the unmatched-boundary and then have this case result in flag=1
B) A second way we could narrow the permissiveness slightly is to consider the 'unmatched boundary' to be a part of legitimate data only if the tentatively-identified boundary exceeds the length requirement of <=70 characters.  This should address the known PEM use case, but would admittedly be at risk of false positives in some other cases.
================================
A second concern is that the current solution isn't even a complete solution for the identified false-positive scenario that began these flag modifications.
It is valid to want to be more permissive in cases where the part's data value legitimately begins with '--'.
However, consider this content:
--1BOUNDARY
Content-Disposition: form-data; name=""my_id""

aabb
--1BOUNDARY
Content-Disposition: form-data; name=""my_name""

rrst
--1BOUNDARY
Content-Disposition: form-data; name=""yyy""

--wwxx
--1BOUNDARY--

In this case, the code (both before and after this pull request) will set the flag at 1.  Whereas if the '--' appeared at the beginning of the data in either of the two earlier parts, the flag would only be set to '2'.  There's no particularly good reason to assume that if data beginning with '--' might be legitimate in a multipart part, that it is illegitimate in (only) the final part.
================================
All of that said, perhaps what I have raised here is not that serious and that this pull request can proceed; additional issues could potentially be dealt with separately and later.
But I thought I should mention these, not just for the sake of this pull request, but also for the v2.9 pull request that is still outstanding ( #2193 )",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2417,2020-10-07T21:58:58Z,,2020-10-21T11:44:26Z,OPEN,False,1,1,1,https://github.com/zehric,fix MULTIPART_UNMATCHED_BOUNDARY,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2417,https://github.com/airween,13,https://github.com/SpiderLabs/ModSecurity/pull/2417#issuecomment-712326291,"The MULTIPART_UNMATCHED_BOUNDARY currently is set to 2 any time there is more than one boundary found in the request, even if all the boundaries were matched. This change makes it so that it will only be set to 2 if there was an unmatched boundary already found in the body somewhere.","hi @martinhsv,

But I thought I should mention these, not just for the sake of this pull request, but also for the v2.9 pull request that is still outstanding ( #2193 )

thanks - I remember this PR, and thought I'll align that for this behavior. But first I'd like to see this PR will merged - or dropped.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2417,2020-10-07T21:58:58Z,,2020-10-21T11:44:26Z,OPEN,False,1,1,1,https://github.com/zehric,fix MULTIPART_UNMATCHED_BOUNDARY,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2417,https://github.com/zimmerle,14,https://github.com/SpiderLabs/ModSecurity/pull/2417#issuecomment-713509960,"The MULTIPART_UNMATCHED_BOUNDARY currently is set to 2 any time there is more than one boundary found in the request, even if all the boundaries were matched. This change makes it so that it will only be set to 2 if there was an unmatched boundary already found in the body somewhere.",@zehric sorry for the delay on merging this. As you can see there is a discussion around the functionality that needs to be address prior coding. Marking this as 3.1.1.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2424,2020-10-16T20:17:22Z,2020-10-19T13:09:06Z,2020-10-19T17:28:40Z,MERGED,True,4,2,2,https://github.com/martinhsv,Fix IP address logging in Section A,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2424,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2424,Closes #2300,Closes #2300,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2430,2020-10-21T20:58:23Z,2020-11-04T12:02:22Z,2020-11-04T12:02:22Z,CLOSED,False,9803,5768,369,https://github.com/martinhsv, Implement id ranges for ctl:ruleRemoveTargetById,47,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2430,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2430,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2430,2020-10-21T20:58:23Z,2020-11-04T12:02:22Z,2020-11-04T12:02:22Z,CLOSED,False,9803,5768,369,https://github.com/martinhsv, Implement id ranges for ctl:ruleRemoveTargetById,47,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2430,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2430#issuecomment-718890215,,On branch v3/dev/pull_2430 doing some QA testing.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2433,2020-10-24T13:57:13Z,2020-10-30T16:40:33Z,2020-10-30T16:40:33Z,CLOSED,False,1,0,1,https://github.com/harsha3002,Update AUTHORS,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2433,https://github.com/harsha3002,1,https://github.com/SpiderLabs/ModSecurity/pull/2433,,,True,{'CONFUSED': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2433,2020-10-24T13:57:13Z,2020-10-30T16:40:33Z,2020-10-30T16:40:33Z,CLOSED,False,1,0,1,https://github.com/harsha3002,Update AUTHORS,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2433,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2433#issuecomment-718719194,,"Hi @harsha3002,
Thank you for your input. Can you describe a briefly why such modification is important to you?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2435,2020-10-28T11:24:19Z,2020-10-29T16:50:11Z,2020-10-29T16:50:11Z,CLOSED,False,44,11,2,https://github.com/michaelgranzow-avi,Issue-2423: Meta-actions like 'msg' should be applied at end of chain,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2435,https://github.com/michaelgranzow-avi,1,https://github.com/SpiderLabs/ModSecurity/pull/2435,Proposed fix for issue #2423,Proposed fix for issue #2423,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2435,2020-10-28T11:24:19Z,2020-10-29T16:50:11Z,2020-10-29T16:50:11Z,CLOSED,False,44,11,2,https://github.com/michaelgranzow-avi,Issue-2423: Meta-actions like 'msg' should be applied at end of chain,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2435,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2435#issuecomment-718882868,Proposed fix for issue #2423,"Thanks @michaelgranzow-avi. Made few changes in your patch -
Added more tests cases -

  
    
      ModSecurity/test/test-cases/regression/issue-2423-msg-in-chain.json
    
    
        Lines 1 to 30
      in
      1b7aa42
    
  
  
    

        
          
           [ 
        

        
          
             { 
        

        
          
               ""enabled"":1, 
        

        
          
               ""version_min"":300000, 
        

        
          
               ""title"":""Test match variable (1/n)"", 
        

        
          
               ""github_issue"": 2423, 
        

        
          
               ""expected"":{ 
        

        
          
                   ""http_code"": 437, 
        

        
          
                   ""error_log"": ""against variable `REQUEST_HEADERS:Transfer-Encoding' .Value: `deflate'"" 
        

        
          
               }, 
        

        
          
               ""client"":{ 
        

        
          
                 ""ip"":""200.249.12.31"", 
        

        
          
                 ""port"":123 
        

        
          
               }, 
        

        
          
               ""request"":{ 
        

        
          
                 ""headers"":{ 
        

        
          
                   ""Host"":""localhost"", 
        

        
          
                   ""Transfer-Encoding"": ""deflate"" 
        

        
          
                 }, 
        

        
          
                 ""uri"":""/match-this"", 
        

        
          
                 ""method"":""GET"" 
        

        
          
               }, 
        

        
          
               ""server"":{ 
        

        
          
                 ""ip"":""200.249.12.31"", 
        

        
          
                 ""port"":80 
        

        
          
               }, 
        

        
          
               ""rules"":[ 
        

        
          
                 ""SecRuleEngine On"", 
        

        
          
                 ""SecRule REQUEST_URI \""^.*$\"" \""phase:2,deny,capture,id:1,msg:'MatchedVar On Msg: [%{MATCHED_VAR}]',logdata:'MatchedVar On LogData %{MATCHED_VAR}',chain\"""", 
        

        
          
                 ""SecRule REQUEST_HEADERS \""^.*$\"" \""status:437\"""" 
        
    
  


Added the test cases to the Makefile.am to allow the execution during the make check-

  
    
      ModSecurity/Makefile.am
    
    
        Lines 160 to 162
      in
      1b7aa42
    
  
  
    

        
          
           TESTS+=test/test-cases/regression/issue-2196.json 
        

        
          
           TESTS+=test/test-cases/regression/issue-2423-msg-in-chain.json 
        

        
          
           TESTS+=test/test-cases/regression/issue-394.json 
        
    
  


Added an entry on the CHANGELOGs with your name on it -

  
    
      ModSecurity/CHANGES
    
    
        Lines 4 to 5
      in
      1b7aa42
    
  
  
    

        
          
           - Fixed MatchedVar on chained rules 
        

        
          
             [Issue #2423, #2435, #2436 - @michaelgranzow-avi]",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2436,2020-10-28T12:29:41Z,2020-10-29T16:55:28Z,2020-10-29T16:55:40Z,CLOSED,False,15833,11658,376,https://github.com/michaelgranzow-avi,Issue-2423: Meta-actions like 'msg' should be applied at end of chain,46,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2436,https://github.com/michaelgranzow-avi,1,https://github.com/SpiderLabs/ModSecurity/pull/2436,"Proposed fix for issue #2423. Slightly modified change compared to current v3/master. The 'severity' action doesn't have an 'evaluate' method in this branch, so that part is not needed.","Proposed fix for issue #2423. Slightly modified change compared to current v3/master. The 'severity' action doesn't have an 'evaluate' method in this branch, so that part is not needed.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2436,2020-10-28T12:29:41Z,2020-10-29T16:55:28Z,2020-10-29T16:55:40Z,CLOSED,False,15833,11658,376,https://github.com/michaelgranzow-avi,Issue-2423: Meta-actions like 'msg' should be applied at end of chain,46,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2436,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2436#issuecomment-718886241,"Proposed fix for issue #2423. Slightly modified change compared to current v3/master. The 'severity' action doesn't have an 'evaluate' method in this branch, so that part is not needed.","Did something different here. I have rebased the tree in a fashion that considers your contribution since the day 1 for v3.1. Not easy to do that, but that keeps the git-tree clean. We can keep the history of the changes...
CHANGELOGs -

  
    
      ModSecurity/CHANGES
    
    
        Lines 4 to 35
      in
      abf59f4
    
  
  
    

        
          
           - Removed unnecessary while processing the transformations. 
        

        
          
             [#2368 - @WGH-, @zimmerle]   
        

        
          
           - auditlog: Computes whether or not to save while loading the rules. 
        

        
          
             [@zimmerle] 
        

        
          
           - actions: Computes Rule association while loading the rules given a 
        

        
          
             performance boost on run time. 
        

        
          
             [@zimmerle] 
        

        
          
           - Regression: Mark the test as failed in case of segfault. 
        

        
          
             [@zimmerle] 
        

        
          
           - Replaced t:lowerCase backend for a better performance. 
        

        
          
             [@zimmerle] 
        

        
          
           - More structured rules dump. Better supporting debugging. 
        

        
          
             [@zimmerle] 
        

        
          
           - Added the basics for supporting better error/warning handling while 
        

        
          
             loading configurations. 
        

        
          
             [@zimmerle] 
        

        
          
           - IMPORTANT: SecDefaultAction behaves changing: SecDefaultAction specified 
        

        
          
             on a child configuration will overwrite the ones specified on the parent; 
        

        
          
             Previously it was concatenating. 
        

        
          
             [@zimmerle] 
        

        
          
           - Using std::shared_ptr instead of generates its own references counters 
        

        
          
             for Rules and related. 
        

        
          
             [@zimmerle] 
        

        
          
           - Better handle shared_pointers on messages aiming for better performance. 
        

        
          
             [@zimmerle] 
        

        
          
           - Better handle memory usage on transformations aiming for better 
        

        
          
             performance. 
        

        
          
             [@zimmerle] 
        

        
          
           - Coding refactoring on the Rule class. The Rule class is now refactored 
        

        
          
             into RuleWithOperator, RuleWithActions, and RuleUnconditional. 
        

        
          
           - Fixed MatchedVar on chained rules 
        

        
          
             [Issue #2423, #2435, #2436 - @michaelgranzow-avi] 
        
    
  


Thanks @michaelgranzow-avi",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2440,2020-11-02T23:37:01Z,2020-11-05T01:09:30Z,2020-11-05T01:09:30Z,CLOSED,False,251,89,7,https://github.com/martinhsv,Fix: Only delete Multipart tmp files after rules have run,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2440,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2440,"Closes #2427
A new class encapsulates the fd and filename of a multipart-part file on disk, along with the core open/close/delete functionality.
A reference to this object is held by the transaction, so that the delete of the file on disk (which is contained in the new class's destructor) will not occur until the transaction destructor runs.","Closes #2427
A new class encapsulates the fd and filename of a multipart-part file on disk, along with the core open/close/delete functionality.
A reference to this object is held by the transaction, so that the delete of the file on disk (which is contained in the new class's destructor) will not occur until the transaction destructor runs.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2440,2020-11-02T23:37:01Z,2020-11-05T01:09:30Z,2020-11-05T01:09:30Z,CLOSED,False,251,89,7,https://github.com/martinhsv,Fix: Only delete Multipart tmp files after rules have run,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2440,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2440#issuecomment-721696461,"Closes #2427
A new class encapsulates the fd and filename of a multipart-part file on disk, along with the core open/close/delete functionality.
A reference to this object is held by the transaction, so that the delete of the file on disk (which is contained in the new class's destructor) will not occur until the transaction destructor runs.",Missing a explicit constructor. Set and sent to v3/dev/pull_2440,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2440,2020-11-02T23:37:01Z,2020-11-05T01:09:30Z,2020-11-05T01:09:30Z,CLOSED,False,251,89,7,https://github.com/martinhsv,Fix: Only delete Multipart tmp files after rules have run,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2440,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/2440#issuecomment-722061697,"Closes #2427
A new class encapsulates the fd and filename of a multipart-part file on disk, along with the core open/close/delete functionality.
A reference to this object is held by the transaction, so that the delete of the file on disk (which is contained in the new class's destructor) will not occur until the transaction destructor runs.",merged! thanks,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2441,2020-11-04T18:08:00Z,2020-11-04T18:18:50Z,2020-11-04T18:18:50Z,CLOSED,False,15521,6310,118,https://github.com/karanbazaz,kabazaz/wafLatencyMetrics,384,[],https://github.com/SpiderLabs/ModSecurity/pull/2441,https://github.com/karanbazaz,1,https://github.com/SpiderLabs/ModSecurity/pull/2441,Adding code to calculate waf latency metrics for the nginx access logs,Adding code to calculate waf latency metrics for the nginx access logs,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2443,2020-11-04T22:20:22Z,2020-11-06T12:06:02Z,2020-11-06T12:06:11Z,CLOSED,False,9895,5818,371,https://github.com/martinhsv,Fix: crash caused by use-after-free,47,[],https://github.com/SpiderLabs/ModSecurity/pull/2443,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2443,"This fixes the use-after-free issue identified by @WGH- , where two different unique_ptr objects were the owner of the same resource-managed object.","This fixes the use-after-free issue identified by @WGH- , where two different unique_ptr objects were the owner of the same resource-managed object.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2443,2020-11-04T22:20:22Z,2020-11-06T12:06:02Z,2020-11-06T12:06:11Z,CLOSED,False,9895,5818,371,https://github.com/martinhsv,Fix: crash caused by use-after-free,47,[],https://github.com/SpiderLabs/ModSecurity/pull/2443,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2443#issuecomment-723046149,"This fixes the use-after-free issue identified by @WGH- , where two different unique_ptr objects were the owner of the same resource-managed object.","Incorporated at ""actions: Removes Rule parameter from runtime execute"" to avoid fix-of-a-fix-of-a-fix commit.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2444,2020-11-05T08:28:17Z,2020-11-16T12:20:03Z,2020-11-16T12:21:59Z,CLOSED,False,19,8,1,https://github.com/arminabf,Truncated log entries if body parameters exceed internal log buffer size,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2444,https://github.com/arminabf,1,https://github.com/SpiderLabs/ModSecurity/pull/2444,"Log entries are truncated if request body parameters exceed the internal log buffer size of 1024 bytes.
The behavior can be shown for example for the rule 932110 (from REQUEST-932-APPLICATION-ATTACK-RCE.conf) when sending a POST request with a body parameter like following
<1024-bytes>;cmd.exe=foo
A corresponding log entry looks as follows. It can be seen that the matched-body parameter (ARGS_NAMES) occupies the largest part of the log line and thus prevents other log information (such as rule ID, tags, etc.) from being output.

[Wed Nov 04 10:58:39.989374 2020] [error] [client fc00::cafe] ModSecurity: Warning. Pattern match ""(?i)(?:;|\\{|\\||\\|\\||&|&&|\\n|\\r|`)\\s*[\\(,@\\'\""\\s](?:[\\w'\""\\./]+/|[\\\\'\""\\^]\\w[\\\\'\""\\^]:.\\\\|[\\^\\.\\w '\""/\\\\]\\\\)?[\""\\^](?:m[\""\\^]*(?:y[\""\\^]*s[\""\\^]*q[\""\\^]l(?:[\""\\^](?:d[\""\\^]*u[\""\\^]*m[\""\\^]*p(?:[\""\\^]*s[\""\\^ ..."" at ARGS_NAMES:KVQQELRNDMCDAIAAOJCTJOXQIOKCKDQALHMZKLQOYWQLWBFWRSBUWVRDRKAGHRRXEXSLIAYBWXMZGJFIRSYNAWVFLERCNZMYMIQVQOWRYGOHIYNEYQIGCZHRIOCUMQBJTMVEZXDJWFSMYDWIVJHINJTJSDBPZJJEKAHFDKWUOVLASPUJZMSRQVEMHPFMEOEPIUJCKSJEEQQPIIOQBLGKZJRYAPGOISAUNMQPBESNTTIZYTSWYXYJQFIGQKTFWTCOUSRIISTSLXNJXSCXXRGTNNICJQEMWYPZGMREQASFKMVGZIYFIFILSQUVENCFTDFVVHVQQJUHEPTCBYBELCWAOCWBKCOZJWJDKJXSUZGMJTPHFTNDOEIWZCEMJNVEGKAISZLSOUTWKALRKJYZFWSOVHDPNTOWUDMTZYBOTNVFVGYMXGXENGDVQQODRNCBUVCYQNFVXJDSVPJXRFCXAQKOYJFHNEIGDZCRYYCFZMLTWXOADYNAWKCQVWLWZKYNPOTXTNQPYVPNCINZCJHQHIOYPJEKIHMDFZUQLEFIDTIKILOVQTZPUHBMBPYMGVCQJMVBPTYBRTKCSKKYMXKOVWGRWQSAZUCBIYNXWVVVWWYYTUSRFORBHFXMYEYDFYZBZKFYPEYSICMPWXGJXBNWTQHRXABNLHQXPJLSYFXHZZLHYHHPKCIHWKEJKXHWXXCRJHKUOMSLFHIJYCELXTCZCWXZJRL [hostname ""testhost""] [uri ""/test""] [unique_id ""X6J7T0N8YoXNJE9yqmQJXgAAABk""] [client fc00::cafe:36082] [pid 26977:tid 3070126912] [apache2_util.c(271)]

The fix limits the size of both, the regular expression pattern and the matched parameter, to 256 bytes. Corresponding log entries then look like following:

[Thu Nov 05 09:16:59.999964 2020] [error] [client fc00::cafe] ModSecurity: Warning. Pattern match ""(?i)(?:;|\\{|\\||\\|\\||&|&&|\\n|\\r|`)\\s*[\\(,@\\'\""\\s](?:[\\w'\""\\./]+/|[\\\\'\""\\^]\\w[\\\\'\""\\^]:.\\\\|[\\^\\.\\w '\"" ..."" at ARGS_NAMES:LTIGCVAHSEUPMKWDLVDJQMMBEQJBFUMTSNSDMPQIOCWUFBOMEGOCHBZGAWTKQNQZTPEKPHDPLZNURBNETRBPEBLKTQRYLFSAICGIVGUQPJSWINPMNKHJF ... [file ""/opt/owasp-crs/REQUEST-932-APPLICATION-ATTACK-RCE.conf""] [line ""182""] [id ""932110""] [rev ""4""] [msg ""Remote Command Execution: Windows Command Injection""] [data ""Matched Data: ;cmd.exe found within ARGS_NAMES:LTIGCVAHSEUPMKWDLVDJQMMBEQJBFUMTSNSDMPQIOCWUFBOMEGOCHBZGAWTKQNQZTPEKPHDPLZNURBNETRBPEBLKTQRYLFSAICGIVGUQPJSWINPMNKHJFQUVEQJGBMAEYEUIRZCJUHYPJCEFSUCPOCJQDRUUUOHDGTIBEAUBOPAWWNIBEGMLAKBRXSVUKBXOLAULEQOUKTXAHLBROIFXNDANUGDITVIKPGQXDNHORYDPFSAODMZHBFJKLRVSFESCRHJIOHTQRDCYDJMKTUIHPVMFWFJJXOAZZLSUKQMEKONLRVYNLMWRSLWEOKJUQIQSBGGJEGHJBBWCKANYHQQMKRLZFNEDKVMEZDKFBZPMRBFUYAWEDAGFAKJMVXNOZQAJDHCUZSNNBPEWFZZOIMWWFXVQRHVVDITLRBZPCWTOGMPFAOFMREECOGATYERNEVYNSPEPDOAT [hostname ""testhost""] [uri ""/test""] [unique_id ""X6O0@2f5KuegugBx9L3wTgAAAAY""] [client fc00::cafe:38314] [pid 7240:tid 3230636864] [apache2_util.c(271)]

Please note that the length of the pattern and the parameter can be higher then 256 bytes because of escaping which is done aftewards in the logging phase. In addittion, the trailing string "" ..."" is not included in the limitation of 256 bytes.","Log entries are truncated if request body parameters exceed the internal log buffer size of 1024 bytes.
The behavior can be shown for example for the rule 932110 (from REQUEST-932-APPLICATION-ATTACK-RCE.conf) when sending a POST request with a body parameter like following
<1024-bytes>;cmd.exe=foo
A corresponding log entry looks as follows. It can be seen that the matched-body parameter (ARGS_NAMES) occupies the largest part of the log line and thus prevents other log information (such as rule ID, tags, etc.) from being output.

[Wed Nov 04 10:58:39.989374 2020] [error] [client fc00::cafe] ModSecurity: Warning. Pattern match ""(?i)(?:;|\\{|\\||\\|\\||&|&&|\\n|\\r|`)\\s*[\\(,@\\'\""\\s](?:[\\w'\""\\./]+/|[\\\\'\""\\^]\\w[\\\\'\""\\^]:.\\\\|[\\^\\.\\w '\""/\\\\]\\\\)?[\""\\^](?:m[\""\\^]*(?:y[\""\\^]*s[\""\\^]*q[\""\\^]l(?:[\""\\^](?:d[\""\\^]*u[\""\\^]*m[\""\\^]*p(?:[\""\\^]*s[\""\\^ ..."" at ARGS_NAMES:KVQQELRNDMCDAIAAOJCTJOXQIOKCKDQALHMZKLQOYWQLWBFWRSBUWVRDRKAGHRRXEXSLIAYBWXMZGJFIRSYNAWVFLERCNZMYMIQVQOWRYGOHIYNEYQIGCZHRIOCUMQBJTMVEZXDJWFSMYDWIVJHINJTJSDBPZJJEKAHFDKWUOVLASPUJZMSRQVEMHPFMEOEPIUJCKSJEEQQPIIOQBLGKZJRYAPGOISAUNMQPBESNTTIZYTSWYXYJQFIGQKTFWTCOUSRIISTSLXNJXSCXXRGTNNICJQEMWYPZGMREQASFKMVGZIYFIFILSQUVENCFTDFVVHVQQJUHEPTCBYBELCWAOCWBKCOZJWJDKJXSUZGMJTPHFTNDOEIWZCEMJNVEGKAISZLSOUTWKALRKJYZFWSOVHDPNTOWUDMTZYBOTNVFVGYMXGXENGDVQQODRNCBUVCYQNFVXJDSVPJXRFCXAQKOYJFHNEIGDZCRYYCFZMLTWXOADYNAWKCQVWLWZKYNPOTXTNQPYVPNCINZCJHQHIOYPJEKIHMDFZUQLEFIDTIKILOVQTZPUHBMBPYMGVCQJMVBPTYBRTKCSKKYMXKOVWGRWQSAZUCBIYNXWVVVWWYYTUSRFORBHFXMYEYDFYZBZKFYPEYSICMPWXGJXBNWTQHRXABNLHQXPJLSYFXHZZLHYHHPKCIHWKEJKXHWXXCRJHKUOMSLFHIJYCELXTCZCWXZJRL [hostname ""testhost""] [uri ""/test""] [unique_id ""X6J7T0N8YoXNJE9yqmQJXgAAABk""] [client fc00::cafe:36082] [pid 26977:tid 3070126912] [apache2_util.c(271)]

The fix limits the size of both, the regular expression pattern and the matched parameter, to 256 bytes. Corresponding log entries then look like following:

[Thu Nov 05 09:16:59.999964 2020] [error] [client fc00::cafe] ModSecurity: Warning. Pattern match ""(?i)(?:;|\\{|\\||\\|\\||&|&&|\\n|\\r|`)\\s*[\\(,@\\'\""\\s](?:[\\w'\""\\./]+/|[\\\\'\""\\^]\\w[\\\\'\""\\^]:.\\\\|[\\^\\.\\w '\"" ..."" at ARGS_NAMES:LTIGCVAHSEUPMKWDLVDJQMMBEQJBFUMTSNSDMPQIOCWUFBOMEGOCHBZGAWTKQNQZTPEKPHDPLZNURBNETRBPEBLKTQRYLFSAICGIVGUQPJSWINPMNKHJF ... [file ""/opt/owasp-crs/REQUEST-932-APPLICATION-ATTACK-RCE.conf""] [line ""182""] [id ""932110""] [rev ""4""] [msg ""Remote Command Execution: Windows Command Injection""] [data ""Matched Data: ;cmd.exe found within ARGS_NAMES:LTIGCVAHSEUPMKWDLVDJQMMBEQJBFUMTSNSDMPQIOCWUFBOMEGOCHBZGAWTKQNQZTPEKPHDPLZNURBNETRBPEBLKTQRYLFSAICGIVGUQPJSWINPMNKHJFQUVEQJGBMAEYEUIRZCJUHYPJCEFSUCPOCJQDRUUUOHDGTIBEAUBOPAWWNIBEGMLAKBRXSVUKBXOLAULEQOUKTXAHLBROIFXNDANUGDITVIKPGQXDNHORYDPFSAODMZHBFJKLRVSFESCRHJIOHTQRDCYDJMKTUIHPVMFWFJJXOAZZLSUKQMEKONLRVYNLMWRSLWEOKJUQIQSBGGJEGHJBBWCKANYHQQMKRLZFNEDKVMEZDKFBZPMRBFUYAWEDAGFAKJMVXNOZQAJDHCUZSNNBPEWFZZOIMWWFXVQRHVVDITLRBZPCWTOGMPFAOFMREECOGATYERNEVYNSPEPDOAT [hostname ""testhost""] [uri ""/test""] [unique_id ""X6O0@2f5KuegugBx9L3wTgAAAAY""] [client fc00::cafe:38314] [pid 7240:tid 3230636864] [apache2_util.c(271)]

Please note that the length of the pattern and the parameter can be higher then 256 bytes because of escaping which is done aftewards in the logging phase. In addittion, the trailing string "" ..."" is not included in the limitation of 256 bytes.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2444,2020-11-05T08:28:17Z,2020-11-16T12:20:03Z,2020-11-16T12:21:59Z,CLOSED,False,19,8,1,https://github.com/arminabf,Truncated log entries if body parameters exceed internal log buffer size,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2444,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2444#issuecomment-727944101,"Log entries are truncated if request body parameters exceed the internal log buffer size of 1024 bytes.
The behavior can be shown for example for the rule 932110 (from REQUEST-932-APPLICATION-ATTACK-RCE.conf) when sending a POST request with a body parameter like following
<1024-bytes>;cmd.exe=foo
A corresponding log entry looks as follows. It can be seen that the matched-body parameter (ARGS_NAMES) occupies the largest part of the log line and thus prevents other log information (such as rule ID, tags, etc.) from being output.

[Wed Nov 04 10:58:39.989374 2020] [error] [client fc00::cafe] ModSecurity: Warning. Pattern match ""(?i)(?:;|\\{|\\||\\|\\||&|&&|\\n|\\r|`)\\s*[\\(,@\\'\""\\s](?:[\\w'\""\\./]+/|[\\\\'\""\\^]\\w[\\\\'\""\\^]:.\\\\|[\\^\\.\\w '\""/\\\\]\\\\)?[\""\\^](?:m[\""\\^]*(?:y[\""\\^]*s[\""\\^]*q[\""\\^]l(?:[\""\\^](?:d[\""\\^]*u[\""\\^]*m[\""\\^]*p(?:[\""\\^]*s[\""\\^ ..."" at ARGS_NAMES:KVQQELRNDMCDAIAAOJCTJOXQIOKCKDQALHMZKLQOYWQLWBFWRSBUWVRDRKAGHRRXEXSLIAYBWXMZGJFIRSYNAWVFLERCNZMYMIQVQOWRYGOHIYNEYQIGCZHRIOCUMQBJTMVEZXDJWFSMYDWIVJHINJTJSDBPZJJEKAHFDKWUOVLASPUJZMSRQVEMHPFMEOEPIUJCKSJEEQQPIIOQBLGKZJRYAPGOISAUNMQPBESNTTIZYTSWYXYJQFIGQKTFWTCOUSRIISTSLXNJXSCXXRGTNNICJQEMWYPZGMREQASFKMVGZIYFIFILSQUVENCFTDFVVHVQQJUHEPTCBYBELCWAOCWBKCOZJWJDKJXSUZGMJTPHFTNDOEIWZCEMJNVEGKAISZLSOUTWKALRKJYZFWSOVHDPNTOWUDMTZYBOTNVFVGYMXGXENGDVQQODRNCBUVCYQNFVXJDSVPJXRFCXAQKOYJFHNEIGDZCRYYCFZMLTWXOADYNAWKCQVWLWZKYNPOTXTNQPYVPNCINZCJHQHIOYPJEKIHMDFZUQLEFIDTIKILOVQTZPUHBMBPYMGVCQJMVBPTYBRTKCSKKYMXKOVWGRWQSAZUCBIYNXWVVVWWYYTUSRFORBHFXMYEYDFYZBZKFYPEYSICMPWXGJXBNWTQHRXABNLHQXPJLSYFXHZZLHYHHPKCIHWKEJKXHWXXCRJHKUOMSLFHIJYCELXTCZCWXZJRL [hostname ""testhost""] [uri ""/test""] [unique_id ""X6J7T0N8YoXNJE9yqmQJXgAAABk""] [client fc00::cafe:36082] [pid 26977:tid 3070126912] [apache2_util.c(271)]

The fix limits the size of both, the regular expression pattern and the matched parameter, to 256 bytes. Corresponding log entries then look like following:

[Thu Nov 05 09:16:59.999964 2020] [error] [client fc00::cafe] ModSecurity: Warning. Pattern match ""(?i)(?:;|\\{|\\||\\|\\||&|&&|\\n|\\r|`)\\s*[\\(,@\\'\""\\s](?:[\\w'\""\\./]+/|[\\\\'\""\\^]\\w[\\\\'\""\\^]:.\\\\|[\\^\\.\\w '\"" ..."" at ARGS_NAMES:LTIGCVAHSEUPMKWDLVDJQMMBEQJBFUMTSNSDMPQIOCWUFBOMEGOCHBZGAWTKQNQZTPEKPHDPLZNURBNETRBPEBLKTQRYLFSAICGIVGUQPJSWINPMNKHJF ... [file ""/opt/owasp-crs/REQUEST-932-APPLICATION-ATTACK-RCE.conf""] [line ""182""] [id ""932110""] [rev ""4""] [msg ""Remote Command Execution: Windows Command Injection""] [data ""Matched Data: ;cmd.exe found within ARGS_NAMES:LTIGCVAHSEUPMKWDLVDJQMMBEQJBFUMTSNSDMPQIOCWUFBOMEGOCHBZGAWTKQNQZTPEKPHDPLZNURBNETRBPEBLKTQRYLFSAICGIVGUQPJSWINPMNKHJFQUVEQJGBMAEYEUIRZCJUHYPJCEFSUCPOCJQDRUUUOHDGTIBEAUBOPAWWNIBEGMLAKBRXSVUKBXOLAULEQOUKTXAHLBROIFXNDANUGDITVIKPGQXDNHORYDPFSAODMZHBFJKLRVSFESCRHJIOHTQRDCYDJMKTUIHPVMFWFJJXOAZZLSUKQMEKONLRVYNLMWRSLWEOKJUQIQSBGGJEGHJBBWCKANYHQQMKRLZFNEDKVMEZDKFBZPMRBFUYAWEDAGFAKJMVXNOZQAJDHCUZSNNBPEWFZZOIMWWFXVQRHVVDITLRBZPCWTOGMPFAOFMREECOGATYERNEVYNSPEPDOAT [hostname ""testhost""] [uri ""/test""] [unique_id ""X6O0@2f5KuegugBx9L3wTgAAAAY""] [client fc00::cafe:38314] [pid 7240:tid 3230636864] [apache2_util.c(271)]

Please note that the length of the pattern and the parameter can be higher then 256 bytes because of escaping which is done aftewards in the logging phase. In addittion, the trailing string "" ..."" is not included in the limitation of 256 bytes.","Hi @arminabf,
The full request body is available on the AuditLogs, I am afraid that saving the entire request body in the error log could be challenging. I would recommend you to use the AuditLogs instead. As of the regular expression, I would recommend to modify the rule to have a regex that is more reasonable to that specific use case scenario.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2445,2020-11-05T21:58:56Z,2020-12-07T17:43:33Z,2020-12-07T17:43:33Z,CLOSED,False,5746,4749,345,https://github.com/martinhsv,"Produce not-supported error for ctl:forceRequestBodyVariable, ctl:auditEngine",26,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2445,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2445,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2445,2020-11-05T21:58:56Z,2020-12-07T17:43:33Z,2020-12-07T17:43:33Z,CLOSED,False,5746,4749,345,https://github.com/martinhsv,"Produce not-supported error for ctl:forceRequestBodyVariable, ctl:auditEngine",26,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2445,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2445#issuecomment-723046859,,Under QA at: https://travis-ci.org/github/SpiderLabs/ModSecurity/builds/741862888,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2446,2020-11-08T18:34:04Z,2020-11-09T17:57:29Z,2020-11-09T17:57:29Z,CLOSED,False,9895,5818,371,https://github.com/martinhsv,Fix memory leak of RuleMessages objects,47,[],https://github.com/SpiderLabs/ModSecurity/pull/2446,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2446,This is a fix for the first (of three) memory leaks mentioned in #2376 on Nov. 6.,This is a fix for the first (of three) memory leaks mentioned in #2376 on Nov. 6.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2446,2020-11-08T18:34:04Z,2020-11-09T17:57:29Z,2020-11-09T17:57:29Z,CLOSED,False,9895,5818,371,https://github.com/martinhsv,Fix memory leak of RuleMessages objects,47,[],https://github.com/SpiderLabs/ModSecurity/pull/2446,https://github.com/WGH-,2,https://github.com/SpiderLabs/ModSecurity/pull/2446#issuecomment-723651137,This is a fix for the first (of three) memory leaks mentioned in #2376 on Nov. 6.,"Besides, in this particular code no new shared_ptr references seem to be ever created, so I think it would make sense to either make functions return shared_ptr<T> instead of T*, or just use unique_ptr.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2446,2020-11-08T18:34:04Z,2020-11-09T17:57:29Z,2020-11-09T17:57:29Z,CLOSED,False,9895,5818,371,https://github.com/martinhsv,Fix memory leak of RuleMessages objects,47,[],https://github.com/SpiderLabs/ModSecurity/pull/2446,https://github.com/martinhsv,3,https://github.com/SpiderLabs/ModSecurity/pull/2446#issuecomment-723656462,This is a fix for the first (of three) memory leaks mentioned in #2376 on Nov. 6.,"Regarding your last point, ordinarily I would have used unique_ptr for the container objects.  However, in this case with RuleMessage an incomplete type in transaction.h, that would create a compilation issue.
That could be resolved -- most obviously by including the full definition of RuleMessage in transaction.h.  That seemed undesirable, however, given the structural separation of API items within /headers/modsecurity and those with /src.
I did also take into account that efficiency issues decline significantly with code like this (less frequently run -- only for rule messages, as opposed to every rule evaluate for example).",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2446,2020-11-08T18:34:04Z,2020-11-09T17:57:29Z,2020-11-09T17:57:29Z,CLOSED,False,9895,5818,371,https://github.com/martinhsv,Fix memory leak of RuleMessages objects,47,[],https://github.com/SpiderLabs/ModSecurity/pull/2446,https://github.com/martinhsv,4,https://github.com/SpiderLabs/ModSecurity/pull/2446#issuecomment-724118140,This is a fix for the first (of three) memory leaks mentioned in #2376 on Nov. 6.,"BTW, I agree with you about preferring make_shared.  While I wasn't so concerned about performance in this particular instance, make_shared enhances readability.  (Moreover code does tend to get cut-and-pasted, so having more 'better' examples may help in future cases where performance is more of a concern.)
Thanks for the observation; I'll actually update this pull request to that effect.",True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2446,2020-11-08T18:34:04Z,2020-11-09T17:57:29Z,2020-11-09T17:57:29Z,CLOSED,False,9895,5818,371,https://github.com/martinhsv,Fix memory leak of RuleMessages objects,47,[],https://github.com/SpiderLabs/ModSecurity/pull/2446,https://github.com/zimmerle,5,https://github.com/SpiderLabs/ModSecurity/pull/2446#issuecomment-724175282,This is a fix for the first (of three) memory leaks mentioned in #2376 on Nov. 6.,I was thinking to have the connector doing a cleanup of this resource after the use. But I guess the shared_pointer seems to be a clever way to deal with it. Under the QA. Thanks ;),True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2449,2020-11-11T08:26:16Z,,2020-11-16T12:16:45Z,OPEN,False,34,0,4,https://github.com/uhliarik,Add configure option to parameterize Modsecurity/libcurl timeout for …,2,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2449,https://github.com/uhliarik,1,https://github.com/SpiderLabs/ModSecurity/pull/2449,"…retrieving rules.

There are scenarios where the internet connection is not available for the httpd,
for example during the test of Disaster Recovery or other failures. In these cases,
it would be great to have a possibility to start the httpd in the same (more or less)
timing of when there is an internet connection. Moreover, being the currently timeout
a default, it is not possible to control this value.","…retrieving rules.

There are scenarios where the internet connection is not available for the httpd,
for example during the test of Disaster Recovery or other failures. In these cases,
it would be great to have a possibility to start the httpd in the same (more or less)
timing of when there is an internet connection. Moreover, being the currently timeout
a default, it is not possible to control this value.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2451,2020-11-13T17:39:35Z,2020-11-16T12:15:27Z,2020-11-16T12:15:27Z,MERGED,True,1,1,1,https://github.com/git001,Fix Path to project logo,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2451,https://github.com/git001,1,https://github.com/SpiderLabs/ModSecurity/pull/2451,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2451,2020-11-13T17:39:35Z,2020-11-16T12:15:27Z,2020-11-16T12:15:27Z,MERGED,True,1,1,1,https://github.com/git001,Fix Path to project logo,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2451,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2451#issuecomment-727941885,,Thanks @git001,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2453,2020-11-16T05:07:16Z,2020-11-22T14:08:23Z,2020-11-22T14:08:23Z,CLOSED,False,15950,11541,378,https://github.com/martinhsv,Fix memory leak in updateMatchedVars,50,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2453,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2453,"This is a proposed fix for the 2nd of 3 memory leaks recently raised in issue 2376.
For purposes of this pull request I have left the no-longer used VariableValue constructor in place but commented-out.  It could, of course, alternatively be removed entirely.","This is a proposed fix for the 2nd of 3 memory leaks recently raised in issue 2376.
For purposes of this pull request I have left the no-longer used VariableValue constructor in place but commented-out.  It could, of course, alternatively be removed entirely.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2453,2020-11-16T05:07:16Z,2020-11-22T14:08:23Z,2020-11-22T14:08:23Z,CLOSED,False,15950,11541,378,https://github.com/martinhsv,Fix memory leak in updateMatchedVars,50,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2453,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2453#issuecomment-731753799,"This is a proposed fix for the 2nd of 3 memory leaks recently raised in issue 2376.
For purposes of this pull request I have left the no-longer used VariableValue constructor in place but commented-out.  It could, of course, alternatively be removed entirely.",Closing this in favor of 0096b17 / #2428,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2455,2020-11-17T14:19:00Z,2020-11-23T17:55:35Z,2020-11-23T17:55:35Z,CLOSED,False,15,11,6,https://github.com/martinhsv,Fix memory leak in VariableModificatorCount,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2455,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2455,This addresses the memory leak described in the 3rd of 3 call stacks recently cited within issue #2376,This addresses the memory leak described in the 3rd of 3 call stacks recently cited within issue #2376,True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2455,2020-11-17T14:19:00Z,2020-11-23T17:55:35Z,2020-11-23T17:55:35Z,CLOSED,False,15,11,6,https://github.com/martinhsv,Fix memory leak in VariableModificatorCount,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2455,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2455#issuecomment-732325429,This addresses the memory leak described in the 3rd of 3 call stacks recently cited within issue #2376,"Since this issue was introduced on dev branch [v3/dev/3.1-experimental], I have the issue fixed on the commit that introduced it.
On the new QA ;)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2461,2020-11-24T19:19:09Z,2020-11-30T18:15:50Z,2020-11-30T18:15:50Z,CLOSED,False,16901,11565,388,https://github.com/martinhsv,Fix: audit log output when DetectionOnly; nolog action flag,53,[],https://github.com/SpiderLabs/ModSecurity/pull/2461,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2461,"This pull request:

corrects the use case where messages were not written to the audit log when DetectionOnly (the main issue identified in #2459 )
corrects the RuleWithActionsProperties copy constructor handling of the nolog flag","This pull request:

corrects the use case where messages were not written to the audit log when DetectionOnly (the main issue identified in #2459 )
corrects the RuleWithActionsProperties copy constructor handling of the nolog flag",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2461,2020-11-24T19:19:09Z,2020-11-30T18:15:50Z,2020-11-30T18:15:50Z,CLOSED,False,16901,11565,388,https://github.com/martinhsv,Fix: audit log output when DetectionOnly; nolog action flag,53,[],https://github.com/SpiderLabs/ModSecurity/pull/2461,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2461#issuecomment-735954705,"This pull request:

corrects the use case where messages were not written to the audit log when DetectionOnly (the main issue identified in #2459 )
corrects the RuleWithActionsProperties copy constructor handling of the nolog flag",merged! thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2467,2020-12-04T11:26:26Z,2020-12-10T12:51:04Z,2020-12-10T12:51:21Z,MERGED,True,7,0,2,https://github.com/devnexen,Adding DragonFlyBSD support.,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2467,https://github.com/devnexen,1,https://github.com/SpiderLabs/ModSecurity/pull/2467,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2467,2020-12-04T11:26:26Z,2020-12-10T12:51:04Z,2020-12-10T12:51:21Z,MERGED,True,7,0,2,https://github.com/devnexen,Adding DragonFlyBSD support.,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2467,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2467#issuecomment-740078153,,"Thank you for the patch.
Reference for the reader

DragonFly BSD home - https://www.dragonflybsd.org/.
Further info on DragonFly - https://en.wikipedia.org/wiki/DragonFly_BSD

@devnexen out of curiosity, is that any specific reason to add DragonFly on whoAmI?

  
    
      ModSecurity/src/modsecurity.cc
    
    
        Lines 112 to 152
      in
      afefda5
    
  
  
    

        
          
           /** 
        

        
          
            * @name    whoAmI 
        

        
          
            * @brief   Return information about this ModSecurity version and platform. 
        

        
          
            * 
        

        
          
            * Platform and version are two questions that community will ask prior to 
        

        
          
            * provide support. Making it available internally and to the connector as 
        

        
          
            * well. 
        

        
          
            * 
        

        
          
            * @note This information maybe will be used by a log parser. If you want to 
        

        
          
            *       update it, make it in a fashion that won't break the existent parsers. 
        

        
          
            *       (e.g. adding extra information _only_ to the end of the string) 
        

        
          
            */ 
        

        
          
           const std::string& ModSecurity::whoAmI() { 
        

        
          
               std::string platform(""Unknown platform""); 
        

        
          
            
        

        
          
           #if AIX 
        

        
          
               platform = ""AIX""; 
        

        
          
           #elif LINUX 
        

        
          
               platform = ""Linux""; 
        

        
          
           #elif OPENBSD 
        

        
          
               platform = ""OpenBSD""; 
        

        
          
           #elif SOLARIS 
        

        
          
               platform = ""Solaris""; 
        

        
          
           #elif HPUX 
        

        
          
               platform = ""HPUX""; 
        

        
          
           #elif MACOSX 
        

        
          
               platform = ""MacOSX""; 
        

        
          
           #elif FREEBSD 
        

        
          
               platform = ""FreeBSD""; 
        

        
          
           #elif NETBSD 
        

        
          
               platform = ""NetBSD""; 
        

        
          
           #elif WIN32 
        

        
          
               platform = ""Windows""; 
        

        
          
           #endif 
        

        
          
            
        

        
          
               if (m_whoami.empty()) { 
        

        
          
                   m_whoami = ""ModSecurity v"" MODSECURITY_VERSION "" ("" + platform + "")""; 
        

        
          
               } 
        

        
          
            
        

        
          
               return m_whoami; 
        

        
          
           } 
        
    
  


🐲",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2467,2020-12-04T11:26:26Z,2020-12-10T12:51:04Z,2020-12-10T12:51:21Z,MERGED,True,7,0,2,https://github.com/devnexen,Adding DragonFlyBSD support.,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2467,https://github.com/devnexen,3,https://github.com/SpiderLabs/ModSecurity/pull/2467#issuecomment-740083400,,Well DragonFlyBSD stands on its own thus deserves to be distinct from FreeBSD.,True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2467,2020-12-04T11:26:26Z,2020-12-10T12:51:04Z,2020-12-10T12:51:21Z,MERGED,True,7,0,2,https://github.com/devnexen,Adding DragonFlyBSD support.,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2467,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/2467#issuecomment-742501708,,merged! Thank you @devnexen ;),True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2471,2020-12-07T21:35:47Z,2020-12-15T18:06:56Z,2020-12-15T18:06:57Z,CLOSED,False,6,0,2,https://github.com/martinhsv,Fix memory leak in ValidateDTD m_dtd,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2471,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2471,"This pull request addresses the memory leak listed as 3) in #2469 .
The function call in this line of code allocates heap memory.  The second and subsequent calls to this function resulted in the the m_dtd pointer simply being assigned a new value, which meant that the heap memory previously pointed-to was leaked on a per-transaction basis.
m_dtd = xmlParseDTD(NULL, (const xmlChar *)m_resource.c_str());

With this new code, before the new parse-and-assign, we'll check if m_dtd is not null, and if so do the proper cleanup.
(I have addressed the leak in this pull request, but a larger issue we may want to consider for later implementation:  Do we really want to be calling xmlParseDTD for every transaction?  Granted, if we only want to do this once rather than per-transaction, we would need to consider the use case where the resource content changes over time -- particularly if it is an internet resource.  We could decide we don't care, or perhaps adopt a cacheing-and-periodic-update strategy)","This pull request addresses the memory leak listed as 3) in #2469 .
The function call in this line of code allocates heap memory.  The second and subsequent calls to this function resulted in the the m_dtd pointer simply being assigned a new value, which meant that the heap memory previously pointed-to was leaked on a per-transaction basis.
m_dtd = xmlParseDTD(NULL, (const xmlChar *)m_resource.c_str());

With this new code, before the new parse-and-assign, we'll check if m_dtd is not null, and if so do the proper cleanup.
(I have addressed the leak in this pull request, but a larger issue we may want to consider for later implementation:  Do we really want to be calling xmlParseDTD for every transaction?  Granted, if we only want to do this once rather than per-transaction, we would need to consider the use case where the resource content changes over time -- particularly if it is an internet resource.  We could decide we don't care, or perhaps adopt a cacheing-and-periodic-update strategy)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2471,2020-12-07T21:35:47Z,2020-12-15T18:06:56Z,2020-12-15T18:06:57Z,CLOSED,False,6,0,2,https://github.com/martinhsv,Fix memory leak in ValidateDTD m_dtd,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2471,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2471#issuecomment-742189798,"This pull request addresses the memory leak listed as 3) in #2469 .
The function call in this line of code allocates heap memory.  The second and subsequent calls to this function resulted in the the m_dtd pointer simply being assigned a new value, which meant that the heap memory previously pointed-to was leaked on a per-transaction basis.
m_dtd = xmlParseDTD(NULL, (const xmlChar *)m_resource.c_str());

With this new code, before the new parse-and-assign, we'll check if m_dtd is not null, and if so do the proper cleanup.
(I have addressed the leak in this pull request, but a larger issue we may want to consider for later implementation:  Do we really want to be calling xmlParseDTD for every transaction?  Granted, if we only want to do this once rather than per-transaction, we would need to consider the use case where the resource content changes over time -- particularly if it is an internet resource.  We could decide we don't care, or perhaps adopt a cacheing-and-periodic-update strategy)",As mentioned on #2473 I am afraid that the leak of const utilization on the libxml may be an impediment to actually have those optimized on run-time (evaluate) as oppose to configuration time (init). The plan is to have evaluate as const in the operator context. Lets have a chat on #2473 and we get back to this one.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2471,2020-12-07T21:35:47Z,2020-12-15T18:06:56Z,2020-12-15T18:06:57Z,CLOSED,False,6,0,2,https://github.com/martinhsv,Fix memory leak in ValidateDTD m_dtd,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2471,https://github.com/martinhsv,3,https://github.com/SpiderLabs/ModSecurity/pull/2471#issuecomment-745466951,"This pull request addresses the memory leak listed as 3) in #2469 .
The function call in this line of code allocates heap memory.  The second and subsequent calls to this function resulted in the the m_dtd pointer simply being assigned a new value, which meant that the heap memory previously pointed-to was leaked on a per-transaction basis.
m_dtd = xmlParseDTD(NULL, (const xmlChar *)m_resource.c_str());

With this new code, before the new parse-and-assign, we'll check if m_dtd is not null, and if so do the proper cleanup.
(I have addressed the leak in this pull request, but a larger issue we may want to consider for later implementation:  Do we really want to be calling xmlParseDTD for every transaction?  Granted, if we only want to do this once rather than per-transaction, we would need to consider the use case where the resource content changes over time -- particularly if it is an internet resource.  We could decide we don't care, or perhaps adopt a cacheing-and-periodic-update strategy)",Closing this in favour of #2478,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2473,2020-12-08T20:46:04Z,2020-12-16T19:59:44Z,2020-12-16T19:59:45Z,CLOSED,False,21,0,3,https://github.com/martinhsv,Fix memory leak in ValidateSchema,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2473,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2473,"This pull request addresses the memory leak listed as 3) in #2469 .
This is analogous to #2471 .
Prior to this change, second and subsequent calls to this object's evaluate function would cause a memory leak, when m_validCtx was assigned a new pointer value before the previously-pointed-to memory had been free'd.","This pull request addresses the memory leak listed as 3) in #2469 .
This is analogous to #2471 .
Prior to this change, second and subsequent calls to this object's evaluate function would cause a memory leak, when m_validCtx was assigned a new pointer value before the previously-pointed-to memory had been free'd.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2473,2020-12-08T20:46:04Z,2020-12-16T19:59:44Z,2020-12-16T19:59:45Z,CLOSED,False,21,0,3,https://github.com/martinhsv,Fix memory leak in ValidateSchema,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2473,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2473#issuecomment-742188500,"This pull request addresses the memory leak listed as 3) in #2469 .
This is analogous to #2471 .
Prior to this change, second and subsequent calls to this object's evaluate function would cause a memory leak, when m_validCtx was assigned a new pointer value before the previously-pointed-to memory had been free'd.","This issue is an exciting one. Let me highlight some pieces of code -
Looking at the code
The variable instantiation happens here -

  
    
      ModSecurity/src/operators/validate_schema.cc
    
    
        Lines 85 to 93
      in
      6464b9a
    
  
  
    

        
          
           m_validCtx = xmlSchemaNewValidCtxt(m_schema); 
        

        
          
           if (m_validCtx == NULL) { 
        

        
          
               std::stringstream err(""XML: Failed to create validation context.""); 
        

        
          
               if (m_err.empty() == false) { 
        

        
          
                   err << "" "" << m_err; 
        

        
          
               } 
        

        
          
               ms_dbg_a(transaction, 4, err.str()); 
        

        
          
               return true; 
        

        
          
           } 
        
    
  


In the same function, we have some cleanups -

  
    
      ModSecurity/src/operators/validate_schema.cc
    
    
        Lines 131 to 132
      in
      6464b9a
    
  
  
    

        
          
           xmlSchemaFree(m_schema); 
        

        
          
           xmlSchemaFreeParserCtxt(m_parserCtx); 
        
    
  


The variable m_validCtx is not being held on the cleanups. That is odd; I guess it was forgotten, and it is working like that for a while.
My 2 cents on the fix
I am afraid I would prefer to have a different approach on the fix -

Having xmlSchemaFreeValidCtxt(m_validCtx);  altogether with the rest of the cleanups. About line 131-132.
Changing the scope of the variables listed in (A) to be contiguous in the function. There is no need for those variables to be class members.

As suggested in the patch, the cleanup happens on the subsequent request, not on the current one. I am not saying that the library is thread-safe at this level, but I think it hurts the best practices having this as is. The problem preceding @martinhsv' patch: the scope is too broad.
I understand that who was implementing this operator a while ago - myself? 🤦 - was wondering about having those initializations optimized on the operator initialization. I guess, because m_validCtx is not const in xmlSchemaValidateDoc [1] it is impractical to have it in long term. Eventually, evaluate(...) will become const in the operator context.
I understand the overhead of setting up on the evaluation as oppose to instantiate on the initialization. Nevertheless, not having the parameter as const on the library will demand a cast to 'constify' it. Consequently, not gentle and could lead to a race condition very annoying for debugging 😥 in a not so popular functionality.
Further study can be done to identify whatever those are treated a const or not by libxml. Moreover, the rationale is valid for all parameters.
(A) Variables that I think we should reduce the scope

  
    
      ModSecurity/src/operators/validate_schema.h
    
    
        Lines 136 to 138
      in
      6464b9a
    
  
  
    

        
          
           xmlSchemaParserCtxtPtr m_parserCtx; 
        

        
          
           xmlSchemaValidCtxtPtr m_validCtx; 
        

        
          
           xmlSchemaPtr m_schema; 
        
    
  


Well notice @martinhsv!! Thanks!",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2473,2020-12-08T20:46:04Z,2020-12-16T19:59:44Z,2020-12-16T19:59:45Z,CLOSED,False,21,0,3,https://github.com/martinhsv,Fix memory leak in ValidateSchema,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2473,https://github.com/martinhsv,3,https://github.com/SpiderLabs/ModSecurity/pull/2473#issuecomment-742549726,"This pull request addresses the memory leak listed as 3) in #2469 .
This is analogous to #2471 .
Prior to this change, second and subsequent calls to this object's evaluate function would cause a memory leak, when m_validCtx was assigned a new pointer value before the previously-pointed-to memory had been free'd.","I agree that this pull request is problematic.  Also agree that, if we still want to call xmlSchemaNewValidCtxt() on each call of evaluate(), that it makes sense to get rid of m_validCtx as a member variable and use a stack variable within the evaluate() function instead.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2473,2020-12-08T20:46:04Z,2020-12-16T19:59:44Z,2020-12-16T19:59:45Z,CLOSED,False,21,0,3,https://github.com/martinhsv,Fix memory leak in ValidateSchema,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2473,https://github.com/martinhsv,4,https://github.com/SpiderLabs/ModSecurity/pull/2473#issuecomment-746923409,"This pull request addresses the memory leak listed as 3) in #2469 .
This is analogous to #2471 .
Prior to this change, second and subsequent calls to this object's evaluate function would cause a memory leak, when m_validCtx was assigned a new pointer value before the previously-pointed-to memory had been free'd.",Closing in favour or #2479,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2474,2020-12-09T22:53:25Z,2020-12-10T02:45:10Z,2020-12-10T02:45:10Z,CLOSED,False,5,0,3,https://github.com/martinhsv,Fix AnchoredSetVariableMatchVars(Names) fn with return val may ...,0,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2474,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2474,"…reach end of fn

I cannot prove ill effects just now, but since it is undefined behaviour, we should probably clean this up.","…reach end of fn

I cannot prove ill effects just now, but since it is undefined behaviour, we should probably clean this up.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2474,2020-12-09T22:53:25Z,2020-12-10T02:45:10Z,2020-12-10T02:45:10Z,CLOSED,False,5,0,3,https://github.com/martinhsv,Fix AnchoredSetVariableMatchVars(Names) fn with return val may ...,0,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2474,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2474#issuecomment-742196699,"…reach end of fn

I cannot prove ill effects just now, but since it is undefined behaviour, we should probably clean this up.",Odd. I was expecting to have at least clang complaining about it. There are more than those two issues here 👀. The new workflow should have spotted that very issue.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2474,2020-12-09T22:53:25Z,2020-12-10T02:45:10Z,2020-12-10T02:45:10Z,CLOSED,False,5,0,3,https://github.com/martinhsv,Fix AnchoredSetVariableMatchVars(Names) fn with return val may ...,0,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2474,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/2474#issuecomment-742197511,"…reach end of fn

I cannot prove ill effects just now, but since it is undefined behaviour, we should probably clean this up.","Indeed. Here is the warning on the logs -
...
DWITH_SSDEEP -I/usr/include -DWITH_MAXMIND -I/usr/include/x86_64-linux-gnu/ -DWITH_LUA -DWITH_LUA_5_2 -I/usr/include/lua5.2 -I/usr/include/libxml2 -DWITH_LIBXML2 -g -O2 -MT libmodsecurity_la-anchored_set_variable_match_vars.lo -MD -MP -MF .deps/libmodsecurity_la-anchored_set_variable_match_vars.Tpo -c anchored_set_variable_match_vars.cc  -fPIC -DPIC -o .libs/libmodsecurity_la-anchored_set_variable_match_vars.o
2020-12-07T21:38:21.3336463Z anchored_set_variable_match_vars.cc: In member function ‘std::unique_ptr<std::__cxx11::basic_string<char> > modsecurity::AnchoredVariableMatchVars::resolveFirst(const string&) const’:
2020-12-07T21:38:21.3338565Z anchored_set_variable_match_vars.cc:97:1: warning: control reaches end of non-void function [-Wreturn-type]
2020-12-07T21:38:21.3339505Z    97 | }
2020-12-07T21:38:21.3340073Z       | ^
2020-12-07T21:38:22.2242299Z libtool: compile:  g++ -DHAVE_CONFIG_H -I. -std=c++11 -I.. -g -I../others -fPIC -O3 -I../headers -DWITH_CURL_SSLVERSION_TLSv1_2 -DWITH_CURL -DWITH_GEOIP -I/usr/include/ -DWITH_YAJL -I/usr/include/yajl -DPCRE_HAVE_JIT -DWITH_SSDEEP -I/usr/include -DWITH_MAXMIND -I/usr/include/x86_64-linux-gnu/ -DWITH_LUA -DWITH_LUA_5_2 -I/usr/include/lua5.2 -I/usr/include/libxml2 -DWITH_LIBXML2 -g -O2 -MT libmodsecurity_la-anchored_set_variable_match_vars.lo -MD -MP -MF .deps/libmodsecurity_la-anchored_set_variable_match_vars.Tpo -c anchored_set_variable_match_vars.cc -o libmodsecurity_la-anchored_set_variable_match_vars.o >/dev/null 2>&1
...

Tomorrow I am going to investigate this workflow.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2474,2020-12-09T22:53:25Z,2020-12-10T02:45:10Z,2020-12-10T02:45:10Z,CLOSED,False,5,0,3,https://github.com/martinhsv,Fix AnchoredSetVariableMatchVars(Names) fn with return val may ...,0,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2474,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/2474#issuecomment-742199197,"…reach end of fn

I cannot prove ill effects just now, but since it is undefined behaviour, we should probably clean this up.","The pull request was already absorbed to the original commit that introduced the issue.
https://github.com/SpiderLabs/ModSecurity/blob/b24fadf840c71972edb9e677a8aa1a2db21465fa/src/anchored_set_variable_match_vars.cc#L89-L98
https://github.com/SpiderLabs/ModSecurity/blob/b24fadf840c71972edb9e677a8aa1a2db21465fa/src/anchored_set_variable_match_vars_names.cc#L88-L97
https://github.com/SpiderLabs/ModSecurity/blob/54aea463cbd707cf4acb569a7378eee159722ebb/CHANGES#L6-L7
Here: 991e91cfdd07928123fe499621148ae443cddb4b
Thanks @martinhsv 👍",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2478,2020-12-15T18:04:56Z,2020-12-16T13:37:34Z,2020-12-16T13:37:34Z,CLOSED,False,23,12,3,https://github.com/martinhsv,Fix memory leak of ValidateDTD's dtd object,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2478,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2478,"This pull request addresses the memory leak listed as 3) in #2469 .
With this pull request, xmlParseDTD() continues to be called for each call of evaluate().
However, the dtd pointer is now no longer a member variable of ValidateDTD.  It is held indirectly by a resource-managing object that is itself a stack variable.  The resource-managing object then ensures that xmlFreeDtd() when the stack variable goes out of scope and is destructed.","This pull request addresses the memory leak listed as 3) in #2469 .
With this pull request, xmlParseDTD() continues to be called for each call of evaluate().
However, the dtd pointer is now no longer a member variable of ValidateDTD.  It is held indirectly by a resource-managing object that is itself a stack variable.  The resource-managing object then ensures that xmlFreeDtd() when the stack variable goes out of scope and is destructed.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2479,2020-12-16T19:59:17Z,2020-12-21T13:20:03Z,2020-12-21T13:20:03Z,CLOSED,False,36,64,3,https://github.com/martinhsv,Fix memory leaks in ValidateSchema,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2479,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2479,"This pull request addresses the 4th one raised in #2469 .
The main change here is to move the pointers to the three xml api objects to the evaluate function as function-scope stack variables.  At each stage in the function where a return may occur, all so-far-relevant xmlSchemaFree functions are called to clean up allocated memory.
Some additional memory leak scenarios have been addressed. For examples (transaction->m_xml->m_data.doc == NULL) and (transaction->m_xml->m_data.well_formed != 1).  These two in particular have been dealt with by performing the checks at the beginning of the function.","This pull request addresses the 4th one raised in #2469 .
The main change here is to move the pointers to the three xml api objects to the evaluate function as function-scope stack variables.  At each stage in the function where a return may occur, all so-far-relevant xmlSchemaFree functions are called to clean up allocated memory.
Some additional memory leak scenarios have been addressed. For examples (transaction->m_xml->m_data.doc == NULL) and (transaction->m_xml->m_data.well_formed != 1).  These two in particular have been dealt with by performing the checks at the beginning of the function.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2479,2020-12-16T19:59:17Z,2020-12-21T13:20:03Z,2020-12-21T13:20:03Z,CLOSED,False,36,64,3,https://github.com/martinhsv,Fix memory leaks in ValidateSchema,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2479,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2479#issuecomment-748969626,"This pull request addresses the 4th one raised in #2469 .
The main change here is to move the pointers to the three xml api objects to the evaluate function as function-scope stack variables.  At each stage in the function where a return may occur, all so-far-relevant xmlSchemaFree functions are called to clean up allocated memory.
Some additional memory leak scenarios have been addressed. For examples (transaction->m_xml->m_data.doc == NULL) and (transaction->m_xml->m_data.well_formed != 1).  These two in particular have been dealt with by performing the checks at the beginning of the function.",Merged! thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2485,2020-12-24T20:08:47Z,2021-01-25T16:02:31Z,2021-01-25T16:02:39Z,CLOSED,False,1,1,1,https://github.com/dtoubelis,Make the `configure` step more reliable,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2485,https://github.com/dtoubelis,1,https://github.com/SpiderLabs/ModSecurity/pull/2485,"It appears that in cross-compile environments the location of the
""current"" directory cannot be assumed. This fix makes it explicit.","It appears that in cross-compile environments the location of the
""current"" directory cannot be assumed. This fix makes it explicit.",True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2485,2020-12-24T20:08:47Z,2021-01-25T16:02:31Z,2021-01-25T16:02:39Z,CLOSED,False,1,1,1,https://github.com/dtoubelis,Make the `configure` step more reliable,2,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2485,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2485#issuecomment-766920588,"It appears that in cross-compile environments the location of the
""current"" directory cannot be assumed. This fix makes it explicit.",merged! thanks!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2492,2021-01-06T06:23:42Z,2021-01-06T11:44:43Z,2021-01-06T11:44:52Z,MERGED,True,9,13,1,https://github.com/leibaogit,Fix the typo,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2492,https://github.com/leibaogit,1,https://github.com/SpiderLabs/ModSecurity/pull/2492,"I'm new to the modsecurity, and when reading the readme, found several typos, so create this PR to improve it.","I'm new to the modsecurity, and when reading the readme, found several typos, so create this PR to improve it.",True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2492,2021-01-06T06:23:42Z,2021-01-06T11:44:43Z,2021-01-06T11:44:52Z,MERGED,True,9,13,1,https://github.com/leibaogit,Fix the typo,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2492,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2492#issuecomment-755253380,"I'm new to the modsecurity, and when reading the readme, found several typos, so create this PR to improve it.",Thank you @leibaogit,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2497,2021-01-08T22:48:15Z,2021-01-16T01:22:20Z,2021-01-16T01:22:20Z,CLOSED,False,2199,222,34,None,bro,77,[],https://github.com/SpiderLabs/ModSecurity/pull/2497,None,1,https://github.com/SpiderLabs/ModSecurity/pull/2497,//,//,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2497,2021-01-08T22:48:15Z,2021-01-16T01:22:20Z,2021-01-16T01:22:20Z,CLOSED,False,2199,222,34,None,bro,77,[],https://github.com/SpiderLabs/ModSecurity/pull/2497,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2497#issuecomment-757066767,//,"Hi @krebsyba, how can we help?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2497,2021-01-08T22:48:15Z,2021-01-16T01:22:20Z,2021-01-16T01:22:20Z,CLOSED,False,2199,222,34,None,bro,77,[],https://github.com/SpiderLabs/ModSecurity/pull/2497,None,3,https://github.com/SpiderLabs/ModSecurity/pull/2497#issuecomment-757241087,//,Düzeltilmesini istiyorum,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2497,2021-01-08T22:48:15Z,2021-01-16T01:22:20Z,2021-01-16T01:22:20Z,CLOSED,False,2199,222,34,None,bro,77,[],https://github.com/SpiderLabs/ModSecurity/pull/2497,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/2497#issuecomment-760339999,//,"Düzeltilmesini istiyorum

It is not clear to me what you want to fix or the add with this pull request. Can you give us a brief introductions of the benefits added on those changes?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2497,2021-01-08T22:48:15Z,2021-01-16T01:22:20Z,2021-01-16T01:22:20Z,CLOSED,False,2199,222,34,None,bro,77,[],https://github.com/SpiderLabs/ModSecurity/pull/2497,https://github.com/zimmerle,5,https://github.com/SpiderLabs/ModSecurity/pull/2497#issuecomment-761284056,//,There is no change from bazzadp/ModSecurity.git#b6053df to b6053df. Thefore closing this pull request.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2499,2021-01-09T14:35:47Z,2021-01-14T17:33:07Z,2021-01-14T17:33:07Z,CLOSED,False,21,0,1,None,Security.md,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2499,None,1,https://github.com/SpiderLabs/ModSecurity/pull/2499,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2499,2021-01-09T14:35:47Z,2021-01-14T17:33:07Z,2021-01-14T17:33:07Z,CLOSED,False,21,0,1,None,Security.md,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2499,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2499#issuecomment-760347610,,"Hi @krebsyba, thank you.
We have opted to make a security section as part of our Readme file, as you can check here -
https://github.com/SpiderLabs/ModSecurity#security-issue
We think that it is important to give such a section great visibility, therefore we made it as part of the README.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2505,2021-01-22T00:42:55Z,2021-01-22T20:50:29Z,2021-01-22T20:50:29Z,CLOSED,False,6,4,2,https://github.com/martinhsv,Fix memory leak in rx operator when pattern includes macro,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2505,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2505,This corrects an issue only very recently introduced in v3/master (just a few days ago).,This corrects an issue only very recently introduced in v3/master (just a few days ago).,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2505,2021-01-22T00:42:55Z,2021-01-22T20:50:29Z,2021-01-22T20:50:29Z,CLOSED,False,6,4,2,https://github.com/martinhsv,Fix memory leak in rx operator when pattern includes macro,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2505,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2505#issuecomment-765676828,This corrects an issue only very recently introduced in v3/master (just a few days ago).,"Hi @martinhsv,
This was fixed here - 9b40a04",True,{'THUMBS_UP': ['https://github.com/martinhsv']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2518,2021-02-22T15:06:08Z,,2022-02-28T09:48:09Z,OPEN,False,24,13,2,https://github.com/pgajdos,"fix for #2514, thanks to @ylavic",1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2518,https://github.com/pgajdos,1,https://github.com/SpiderLabs/ModSecurity/pull/2518,See discussion in the issue.,See discussion in the issue.,True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2518,2021-02-22T15:06:08Z,,2022-02-28T09:48:09Z,OPEN,False,24,13,2,https://github.com/pgajdos,"fix for #2514, thanks to @ylavic",1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2518,https://github.com/marcstern,2,https://github.com/SpiderLabs/ModSecurity/pull/2518#issuecomment-817846069,See discussion in the issue.,"For what it worth, we're running this patch from begin March in several (QA) WAF without any problem",True,{'THUMBS_UP': ['https://github.com/airween']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2518,2021-02-22T15:06:08Z,,2022-02-28T09:48:09Z,OPEN,False,24,13,2,https://github.com/pgajdos,"fix for #2514, thanks to @ylavic",1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2518,https://github.com/marcstern,3,https://github.com/SpiderLabs/ModSecurity/pull/2518#issuecomment-1054074524,See discussion in the issue.,Running in 60+ prod servers since June 2021,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2520,2021-02-24T15:49:26Z,,2022-03-06T08:46:06Z,OPEN,False,36,14,2,https://github.com/ziollek,Fix memory leak in lmdb.cc + improve performance while reading collections in resolveMultiMatches,4,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2520,https://github.com/ziollek,1,https://github.com/SpiderLabs/ModSecurity/pull/2520,"What have been done ?

Removed memory leak in lmdb.cc while passing data from MDB_val to VariableValue:


added new VariableValue constructors for rvalue strings
decreased memory footprint (just one data copying between lmdb and VariableValue thanks to above constructors)


Optimized fetching collection in resolveMultiMatches:


at the beginning, the cursor is moved to a key equal to or greater than the input key (MDB_SET_RANGE)
values are fetched via cursor as long as the input key is equal to the key fetched from lmdb","What have been done ?

Removed memory leak in lmdb.cc while passing data from MDB_val to VariableValue:


added new VariableValue constructors for rvalue strings
decreased memory footprint (just one data copying between lmdb and VariableValue thanks to above constructors)


Optimized fetching collection in resolveMultiMatches:


at the beginning, the cursor is moved to a key equal to or greater than the input key (MDB_SET_RANGE)
values are fetched via cursor as long as the input key is equal to the key fetched from lmdb",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2520,2021-02-24T15:49:26Z,,2022-03-06T08:46:06Z,OPEN,False,36,14,2,https://github.com/ziollek,Fix memory leak in lmdb.cc + improve performance while reading collections in resolveMultiMatches,4,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2520,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2520#issuecomment-786696432,"What have been done ?

Removed memory leak in lmdb.cc while passing data from MDB_val to VariableValue:


added new VariableValue constructors for rvalue strings
decreased memory footprint (just one data copying between lmdb and VariableValue thanks to above constructors)


Optimized fetching collection in resolveMultiMatches:


at the beginning, the cursor is moved to a key equal to or greater than the input key (MDB_SET_RANGE)
values are fetched via cursor as long as the input key is equal to the key fetched from lmdb","Hi @ziollek, thanks for the contribution.
I am wondering how to fit the rvalue change on VariableValue of the 3.1-experimental development branch -

  
    
      ModSecurity/headers/modsecurity/variable_value.h
    
    
        Lines 51 to 59
      in
      9f47f14
    
  
  
    

        
          
               * Use cases for VariableValue creation: 
        

        
          
               * 
        

        
          
               * AnchoredSet - Use case A (eg. ARGS).         - Collection + Key 
        

        
          
               * Anchored    - Use case B (eg. REQUEST_URI).  - Key 
        

        
          
               * Custom      - Use case C (eg. WEBAPP_ID).    - Key 
        

        
          
               * CustomSet 
        

        
          
               *     Fixed   - Use case D (eg. TX).           - Collection + Key 
        

        
          
               *     Dynamic - Use case E (eg. ENV).          - Collection + Key 
        

        
          
               * 
        
    
  


Here is the key + value constructor -

  
    
      ModSecurity/headers/modsecurity/variable_value.h
    
    
        Lines 98 to 108
      in
      9f47f14
    
  
  
    

        
          
           explicit VariableValue(const std::string *collection, 
        

        
          
               const std::string *value = nullptr) 
        

        
          
               : m_origin(), 
        

        
          
               m_value(), 
        

        
          
               m_valueHolder(new std::string(value != nullptr?*value:"""")), // FIXME: do we really need a copy here? 
        

        
          
               m_key(nullptr), 
        

        
          
               m_keyHolder(nullptr), 
        

        
          
               m_collection(collection) 
        

        
          
           { 
        

        
          
               m_value = m_valueHolder.get(); 
        

        
          
           }; 
        
    
  


Here is the collection + key + value -

  
    
      ModSecurity/headers/modsecurity/variable_value.h
    
    
        Lines 111 to 184
      in
      9f47f14
    
  
  
    

        
          
           /* Use case D.1. - ARGS */ 
        

        
          
           VariableValue(const std::string *collection, 
        

        
          
               std::unique_ptr<std::string> key, 
        

        
          
               std::unique_ptr<std::string> value) 
        

        
          
               : m_origin(), 
        

        
          
               m_value(nullptr), 
        

        
          
               m_valueHolder(std::move(value)), 
        

        
          
               m_key(nullptr), 
        

        
          
               m_keyHolder(std::move(key)), 
        

        
          
               m_collection(collection) 
        

        
          
           { 
        

        
          
               m_value = m_valueHolder.get(); 
        

        
          
               m_key = m_keyHolder.get(); 
        

        
          
           }; 
        

        
          
            
        

        
          
            
        

        
          
           /* Use case D.2. - RULE */ 
        

        
          
           VariableValue(const std::string *collection, 
        

        
          
               const std::string *key, 
        

        
          
               std::unique_ptr<std::string> value) 
        

        
          
               : m_origin(), 
        

        
          
               m_value(nullptr), 
        

        
          
               m_valueHolder(std::move(value)), 
        

        
          
               m_key(key), 
        

        
          
               m_keyHolder(nullptr), 
        

        
          
               m_collection(collection) 
        

        
          
           { 
        

        
          
               m_value = m_valueHolder.get(); 
        

        
          
           }; 
        

        
          
            
        

        
          
            
        

        
          
           /* Use case D.3. - TX */ 
        

        
          
           VariableValue(const std::string *collection, 
        

        
          
               const std::string *key, 
        

        
          
               const std::string *value) 
        

        
          
               : m_origin(), 
        

        
          
               m_value(value), 
        

        
          
               m_valueHolder(nullptr), 
        

        
          
               m_key(key), 
        

        
          
               m_keyHolder(nullptr), 
        

        
          
               m_collection(collection) 
        

        
          
           { }; 
        

        
          
            
        

        
          
            
        

        
          
           // FIXME: It maybe the case for VariableValue to use string_view for everything. 
        

        
          
           /* Use case D.4. - MATCHED_VARS */ 
        

        
          
           VariableValue(const std::string *collection, 
        

        
          
               const std::string *key, 
        

        
          
               const bpstd::string_view *value) 
        

        
          
               : m_origin(), 
        

        
          
               m_value(), 
        

        
          
               m_valueHolder(std::unique_ptr<std::string>(new std::string(value->c_str()))), 
        

        
          
               m_key(key), 
        

        
          
               m_keyHolder(nullptr), 
        

        
          
               m_collection(collection) 
        

        
          
           { 
        

        
          
               m_value = m_valueHolder.get(); 
        

        
          
           }; 
        

        
          
            
        

        
          
            
        

        
          
           /* Use case E.1. - Env */ 
        

        
          
           VariableValue(std::unique_ptr<std::string> value, 
        

        
          
               std::unique_ptr<std::string> key, 
        

        
          
               std::shared_ptr<std::string> collection) 
        

        
          
               : m_origin(), 
        

        
          
               m_value(nullptr), 
        

        
          
               m_valueHolder(std::move(value)), 
        

        
          
               m_key(nullptr), 
        

        
          
               m_keyHolder(std::move(key)), 
        

        
          
               m_collection(collection.get()) 
        

        
          
           { 
        

        
          
               m_value = m_valueHolder.get(); 
        

        
          
               m_key = m_keyHolder.get(); 
        

        
          
           }; 
        
    
  


Giving that changes on VariableValue, we already have the LMDB in this shape -

  
    
      ModSecurity/src/collection/backend/lmdb.cc
    
    
        Lines 498 to 516
      in
      9f47f14
    
  
  
    

        
          
               while ((rc = mdb_cursor_get(cursor, &key, &data, MDB_NEXT)) == 0) { 
        

        
          
                   l->insert(l->begin(), std::make_shared<VariableValue>( 
        

        
          
                       &m_name, 
        

        
          
                       new std::string(reinterpret_cast<char *>(key.mv_data), 
        

        
          
                       key.mv_size), 
        

        
          
                       new std::string(reinterpret_cast<char *>(data.mv_data), 
        

        
          
                       data.mv_size))); 
        

        
          
               } 
        

        
          
           } else { 
        

        
          
               while ((rc = mdb_cursor_get(cursor, &key, &data, MDB_NEXT)) == 0) { 
        

        
          
                   char *a = reinterpret_cast<char *>(key.mv_data); 
        

        
          
                   if (strncmp(var.c_str(), a, keySize) == 0) { 
        

        
          
                       l->insert(l->begin(), std::make_shared<VariableValue>( 
        

        
          
                           &m_name, 
        

        
          
                           new std::string(reinterpret_cast<char *>(key.mv_data), 
        

        
          
                           key.mv_size), 
        

        
          
                           new std::string(reinterpret_cast<char *>(data.mv_data), 
        

        
          
                           data.mv_size))); 
        

        
          
                   } 
        
    
  


The benefit of MDB_SET_RANGE change is very clear. What do you think about the changes that we have on 3.1-experimental?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2520,2021-02-24T15:49:26Z,,2022-03-06T08:46:06Z,OPEN,False,36,14,2,https://github.com/ziollek,Fix memory leak in lmdb.cc + improve performance while reading collections in resolveMultiMatches,4,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2520,https://github.com/ziollek,3,https://github.com/SpiderLabs/ModSecurity/pull/2520#issuecomment-786749549,"What have been done ?

Removed memory leak in lmdb.cc while passing data from MDB_val to VariableValue:


added new VariableValue constructors for rvalue strings
decreased memory footprint (just one data copying between lmdb and VariableValue thanks to above constructors)


Optimized fetching collection in resolveMultiMatches:


at the beginning, the cursor is moved to a key equal to or greater than the input key (MDB_SET_RANGE)
values are fetched via cursor as long as the input key is equal to the key fetched from lmdb","Hi @zimmerle - thanks for your comments.
I wasn't aware of VariableValue changes in 3.1-experimental. Despite of internal changes in variable_value.h i'm afraid, there is still a memory leak in lmdb.cc - because of using new std::string. In effect, below constructor is called:

  
    
      ModSecurity/headers/modsecurity/variable_value.h
    
    
        Lines 142 to 151
      in
      9f47f14
    
  
  
    

        
          
           /* Use case D.3. - TX */ 
        

        
          
           VariableValue(const std::string *collection, 
        

        
          
               const std::string *key, 
        

        
          
               const std::string *value) 
        

        
          
               : m_origin(), 
        

        
          
               m_value(value), 
        

        
          
               m_valueHolder(nullptr), 
        

        
          
               m_key(key), 
        

        
          
               m_keyHolder(nullptr), 
        

        
          
               m_collection(collection) 
        
    
  


Above constructor (unlike constructors quoted in your comment) don't 'move' allocated in lmdb memory - it just copies it.
Luckily it could be easily fixed by replacing
new std::string(...) to std::make_unique<std::string>(...)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2520,2021-02-24T15:49:26Z,,2022-03-06T08:46:06Z,OPEN,False,36,14,2,https://github.com/ziollek,Fix memory leak in lmdb.cc + improve performance while reading collections in resolveMultiMatches,4,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2520,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/2520#issuecomment-803020358,"What have been done ?

Removed memory leak in lmdb.cc while passing data from MDB_val to VariableValue:


added new VariableValue constructors for rvalue strings
decreased memory footprint (just one data copying between lmdb and VariableValue thanks to above constructors)


Optimized fetching collection in resolveMultiMatches:


at the beginning, the cursor is moved to a key equal to or greater than the input key (MDB_SET_RANGE)
values are fetched via cursor as long as the input key is equal to the key fetched from lmdb","Different methods from lmdb back-end are performing this string copy.
resolveFirst -

  
    
      ModSecurity/src/collection/backend/lmdb.cc
    
    
        Lines 192 to 194
      in
      4127c1b
    
  
  
    

        
          
           ret = std::unique_ptr<std::string>(new std::string( 
        

        
          
               reinterpret_cast<char *>(mdb_value_ret.mv_data), 
        

        
          
               mdb_value_ret.mv_size)); 
        
    
  


resolveSingleMatch -

  
    
      ModSecurity/src/collection/backend/lmdb.cc
    
    
        Lines 290 to 293
      in
      4127c1b
    
  
  
    

        
          
           std::string *a = new std::string( 
        

        
          
               reinterpret_cast<char *>(mdb_value_ret.mv_data), 
        

        
          
               mdb_value_ret.mv_size); 
        

        
          
           VariableValue *v = new VariableValue(&var, a); 
        
    
  


resolveMultiMatches -

  
    
      ModSecurity/src/collection/backend/lmdb.cc
    
    
        Lines 499 to 504
      in
      4127c1b
    
  
  
    

        
          
           l->insert(l->begin(), new VariableValue( 
        

        
          
               &m_name, 
        

        
          
               new std::string(reinterpret_cast<char *>(key.mv_data), 
        

        
          
               key.mv_size), 
        

        
          
               new std::string(reinterpret_cast<char *>(data.mv_data), 
        

        
          
               data.mv_size))); 
        
    
  


and

  
    
      ModSecurity/src/collection/backend/lmdb.cc
    
    
        Lines 510 to 515
      in
      4127c1b
    
  
  
    

        
          
           l->insert(l->begin(), new VariableValue( 
        

        
          
               &m_name, 
        

        
          
               new std::string(reinterpret_cast<char *>(key.mv_data), 
        

        
          
               key.mv_size), 
        

        
          
               new std::string(reinterpret_cast<char *>(data.mv_data), 
        

        
          
               data.mv_size))); 
        
    
  


resolveRegularExpression -

  
    
      ModSecurity/src/collection/backend/lmdb.cc
    
    
        Lines 571 to 575
      in
      4127c1b
    
  
  
    

        
          
           VariableValue *v = new VariableValue( 
        

        
          
               new std::string(reinterpret_cast<char *>(key.mv_data), 
        

        
          
                   key.mv_size), 
        

        
          
               new std::string(reinterpret_cast<char *>(data.mv_data), 
        

        
          
                   data.mv_size)); 
        
    
  


They are using the constructors -



Method
Constructor
Leak on v3/master




resolveFirst

  
    
      ModSecurity/headers/modsecurity/variable_value.h
    
    
        Lines 42 to 48
      in
      4127c1b
    
  
  
    

        
          
           explicit VariableValue(const std::string *key, 
        

        
          
               const std::string *value = nullptr) 
        

        
          
               : m_collection(""""), 
        

        
          
               m_key(*key), 
        

        
          
               m_keyWithCollection(*key), 
        

        
          
               m_value(value != nullptr?*value:"""") 
        

        
          
           { } 
        
    
  


Likely


resolveSingleMatch

  
    
      ModSecurity/headers/modsecurity/variable_value.h
    
    
        Lines 42 to 48
      in
      4127c1b
    
  
  
    

        
          
           explicit VariableValue(const std::string *key, 
        

        
          
               const std::string *value = nullptr) 
        

        
          
               : m_collection(""""), 
        

        
          
               m_key(*key), 
        

        
          
               m_keyWithCollection(*key), 
        

        
          
               m_value(value != nullptr?*value:"""") 
        

        
          
           { } 
        
    
  


Likely


resolveMultiMatches (a)

  
    
      ModSecurity/headers/modsecurity/variable_value.h
    
    
        Lines 50 to 57
      in
      4127c1b
    
  
  
    

        
          
           VariableValue(const std::string *collection, 
        

        
          
               const std::string *key, 
        

        
          
               const std::string *value) 
        

        
          
               : m_collection(*collection), 
        

        
          
               m_key(*key), 
        

        
          
               m_keyWithCollection(*collection + "":"" + *key), 
        

        
          
               m_value(*value) 
        

        
          
           { } 
        
    
  


likely


resolveMultiMatches (b)

  
    
      ModSecurity/headers/modsecurity/variable_value.h
    
    
        Lines 50 to 57
      in
      4127c1b
    
  
  
    

        
          
           VariableValue(const std::string *collection, 
        

        
          
               const std::string *key, 
        

        
          
               const std::string *value) 
        

        
          
               : m_collection(*collection), 
        

        
          
               m_key(*key), 
        

        
          
               m_keyWithCollection(*collection + "":"" + *key), 
        

        
          
               m_value(*value) 
        

        
          
           { } 
        
    
  


Likely


resolveRegularExpression

  
    
      ModSecurity/headers/modsecurity/variable_value.h
    
    
        Lines 42 to 48
      in
      4127c1b
    
  
  
    

        
          
           explicit VariableValue(const std::string *key, 
        

        
          
               const std::string *value = nullptr) 
        

        
          
               : m_collection(""""), 
        

        
          
               m_key(*key), 
        

        
          
               m_keyWithCollection(*key), 
        

        
          
               m_value(value != nullptr?*value:"""") 
        

        
          
           { } 
        
    
  


Likely



The class VariableValue has four std::string members: m_collection, m_key, m_keyWithCollection, and m_value the attribution of their values happens on the constructor for VariableValue. m_value could be also set via setValue. All attributions are based on the std::string copy constructor.
Later the VariableValue is used at -
Transaction

  
    
      ModSecurity/src/transaction.cc
    
    
        Lines 913 to 918
      in
      4127c1b
    
  
  
    

        
          
           std::vector<const VariableValue *> l; 
        

        
          
           m_variableRequestHeaders.resolve(&l); 
        

        
          
           for (auto &h : l) { 
        

        
          
               fullRequest = fullRequest + h->getKey() + "": "" + h->getValue() + ""\n""; 
        

        
          
               delete h; 
        

        
          
           } 
        
    
  



  
    
      ModSecurity/src/transaction.cc
    
    
        Lines 1533 to 1539
      in
      4127c1b
    
  
  
    

        
          
           m_variableRequestHeaders.resolve(&l); 
        

        
          
           for (auto &h : l) { 
        

        
          
               size_t pos = strlen(""REQUEST_HEADERS:""); 
        

        
          
               audit_log << h->getKeyWithCollection().c_str() + pos << "": ""; 
        

        
          
               audit_log << h->getValue().c_str() << std::endl; 
        

        
          
               delete h; 
        

        
          
           } 
        
    
  



  
    
      ModSecurity/src/transaction.cc
    
    
        Lines 1571 to 1576
      in
      4127c1b
    
  
  
    

        
          
           m_variableResponseHeaders.resolve(&l); 
        

        
          
           for (auto &h : l) { 
        

        
          
               audit_log << h->getKey().c_str() << "": ""; 
        

        
          
               audit_log << h->getValue().c_str() << std::endl; 
        

        
          
               delete h; 
        

        
          
           } 
        
    
  



  
    
      ModSecurity/src/transaction.cc
    
    
        Lines 1670 to 1674
      in
      4127c1b
    
  
  
    

        
          
           m_variableRequestHeaders.resolve(&l); 
        

        
          
           for (auto &h : l) { 
        

        
          
               LOGFY_ADD(h->getKey().c_str(), h->getValue().c_str()); 
        

        
          
               delete h; 
        

        
          
           } 
        
    
  



  
    
      ModSecurity/src/transaction.cc
    
    
        Lines 1700 to 1704
      in
      4127c1b
    
  
  
    

        
          
           m_variableResponseHeaders.resolve(&l); 
        

        
          
           for (auto &h : l) { 
        

        
          
               LOGFY_ADD(h->getKey().c_str(), h->getValue().c_str()); 
        

        
          
               delete h; 
        

        
          
           } 
        
    
  


RunTimeString

  
    
      ModSecurity/src/run_time_string.cc
    
    
        Lines 63 to 66
      in
      4127c1b
    
  
  
    

        
          
           z->m_var->evaluate(t, rr, &l); 
        

        
          
           if (l.size() > 0) { 
        

        
          
               s.append(l[0]->getValue()); 
        

        
          
           } 
        
    
  


RuleWithOperator

  
    
      ModSecurity/src/rule_with_operator.cc
    
    
        Lines 278 to 338
      in
      4127c1b
    
  
  
    

        
          
               var->evaluate(trans, this, &e); 
        

        
          
               for (const VariableValue *v : e) { 
        

        
          
                   const std::string &value = v->getValue(); 
        

        
          
                   const std::string &key = v->getKeyWithCollection(); 
        

        
          
            
        

        
          
                   if (exclusion.contains(v) || 
        

        
          
                       std::find_if(trans->m_ruleRemoveTargetById.begin(), 
        

        
          
                           trans->m_ruleRemoveTargetById.end(), 
        

        
          
                           [&, v, this](std::pair<int, std::string> &m) -> bool { 
        

        
          
                               return m.first == m_ruleId && m.second == v->getKeyWithCollection(); 
        

        
          
                           }) != trans->m_ruleRemoveTargetById.end() 
        

        
          
                   ) { 
        

        
          
                       delete v; 
        

        
          
                       v = NULL; 
        

        
          
                       continue; 
        

        
          
                   } 
        

        
          
                   if (exclusion.contains(v) || 
        

        
          
                       std::find_if(trans->m_ruleRemoveTargetByTag.begin(), 
        

        
          
                           trans->m_ruleRemoveTargetByTag.end(), 
        

        
          
                           [&, v, trans, this](std::pair<std::string, std::string> &m) -> bool { 
        

        
          
                               return containsTag(m.first, trans) && m.second == v->getKeyWithCollection(); 
        

        
          
                           }) != trans->m_ruleRemoveTargetByTag.end() 
        

        
          
                   ) { 
        

        
          
                       delete v; 
        

        
          
                       v = NULL; 
        

        
          
                       continue; 
        

        
          
                   } 
        

        
          
            
        

        
          
                   TransformationResults values; 
        

        
          
            
        

        
          
                   executeTransformations(trans, value, values); 
        

        
          
            
        

        
          
                   for (const auto &valueTemp : values) { 
        

        
          
                       bool ret; 
        

        
          
                       std::string valueAfterTrans = std::move(*valueTemp.first); 
        

        
          
            
        

        
          
                       ret = executeOperatorAt(trans, key, valueAfterTrans, ruleMessage); 
        

        
          
            
        

        
          
                       if (ret == true) { 
        

        
          
                           ruleMessage->m_match = m_operator->resolveMatchMessage(trans, 
        

        
          
                               key, value); 
        

        
          
                           for (auto &i : v->getOrigin()) { 
        

        
          
                               ruleMessage->m_reference.append(i->toText()); 
        

        
          
                           } 
        

        
          
            
        

        
          
                           ruleMessage->m_reference.append(*valueTemp.second); 
        

        
          
                           updateMatchedVars(trans, key, valueAfterTrans); 
        

        
          
                           executeActionsIndependentOfChainedRuleResult(trans, 
        

        
          
                               &containsBlock, ruleMessage); 
        

        
          
            
        

        
          
                           performLogging(trans, ruleMessage, false); 
        

        
          
            
        

        
          
                           globalRet = true; 
        

        
          
                       } 
        

        
          
                   } 
        

        
          
                   delete v; 
        

        
          
                   v = NULL; 
        

        
          
               } 
        

        
          
               e.clear(); 
        

        
          
               e.reserve(4); 
        

        
          
           } 
        
    
  


As an alternative the inMemoryBackEnd back-end for collections does not duplicates/copy the strings.
Investigating the best approach to tackle this without too much modification on the v3/master code.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2520,2021-02-24T15:49:26Z,,2022-03-06T08:46:06Z,OPEN,False,36,14,2,https://github.com/ziollek,Fix memory leak in lmdb.cc + improve performance while reading collections in resolveMultiMatches,4,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2520,https://github.com/zimmerle,5,https://github.com/SpiderLabs/ModSecurity/pull/2520#issuecomment-850026792,"What have been done ?

Removed memory leak in lmdb.cc while passing data from MDB_val to VariableValue:


added new VariableValue constructors for rvalue strings
decreased memory footprint (just one data copying between lmdb and VariableValue thanks to above constructors)


Optimized fetching collection in resolveMultiMatches:


at the beginning, the cursor is moved to a key equal to or greater than the input key (MDB_SET_RANGE)
values are fetched via cursor as long as the input key is equal to the key fetched from lmdb","I see a benefit of having less copies around, studying the feasibility to have this pull request partially merged on the upcoming 3.0.5.
On QA - https://github.com/SpiderLabs/ModSecurity/actions/runs/883266568",True,"{'HEART': ['https://github.com/ziollek', 'https://github.com/arrekb', 'https://github.com/jtaczanowski']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2522,2021-02-25T20:01:06Z,2021-02-26T14:30:23Z,2021-02-26T14:30:23Z,CLOSED,False,1,1,1,https://github.com/avinash2632,Update Makefile.am,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2522,https://github.com/avinash2632,1,https://github.com/SpiderLabs/ModSecurity/pull/2522,Just a testing commit,Just a testing commit,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2522,2021-02-25T20:01:06Z,2021-02-26T14:30:23Z,2021-02-26T14:30:23Z,CLOSED,False,1,1,1,https://github.com/avinash2632,Update Makefile.am,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2522,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2522#issuecomment-786681269,Just a testing commit,"Hi @avinash2632  you actually created a pull request to incorporate your change to ModSecurity main repository. Since your commit massage states that you are testing, i am going to close this request.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2535,2021-03-15T14:14:46Z,2021-03-15T20:07:15Z,2021-03-19T20:21:04Z,CLOSED,False,140,3,1,https://github.com/iosetek,Test for proving Loading rule is not thread safe,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2535,https://github.com/iosetek,1,https://github.com/SpiderLabs/ModSecurity/pull/2535,"When multiple threads are trying to load rule at the same
time even when they refer to different rule set a string
representing rule is malformed. It's believed that
this is caused by seclang-parser which contains plenty
of global variables.
To run the test simply enter 'test' directory and run
""./unit_tests""","When multiple threads are trying to load rule at the same
time even when they refer to different rule set a string
representing rule is malformed. It's believed that
this is caused by seclang-parser which contains plenty
of global variables.
To run the test simply enter 'test' directory and run
""./unit_tests""",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2535,2021-03-15T14:14:46Z,2021-03-15T20:07:15Z,2021-03-19T20:21:04Z,CLOSED,False,140,3,1,https://github.com/iosetek,Test for proving Loading rule is not thread safe,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2535,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2535#issuecomment-799716516,"When multiple threads are trying to load rule at the same
time even when they refer to different rule set a string
representing rule is malformed. It's believed that
this is caused by seclang-parser which contains plenty
of global variables.
To run the test simply enter 'test' directory and run
""./unit_tests""",I think this pull request was built to illustrate #2536. Please follow the discussion on #2536.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2542,2021-03-26T11:18:41Z,2021-04-29T22:13:46Z,2021-04-29T22:13:46Z,CLOSED,False,1,1,1,https://github.com/neilstuartcraig,Fix typo in main readme,1,"['3.x', 'documentation']",https://github.com/SpiderLabs/ModSecurity/pull/2542,https://github.com/neilstuartcraig,1,https://github.com/SpiderLabs/ModSecurity/pull/2542,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2542,2021-03-26T11:18:41Z,2021-04-29T22:13:46Z,2021-04-29T22:13:46Z,CLOSED,False,1,1,1,https://github.com/neilstuartcraig,Fix typo in main readme,1,"['3.x', 'documentation']",https://github.com/SpiderLabs/ModSecurity/pull/2542,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2542#issuecomment-829452840,,Merged! Thank you!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2551,2021-04-08T08:33:25Z,,2022-03-28T07:14:49Z,OPEN,False,406,157,8,https://github.com/xiangwang1,Adds hyperscan support to pm operator,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2551,https://github.com/xiangwang1,1,https://github.com/SpiderLabs/ModSecurity/pull/2551,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2551,2021-04-08T08:33:25Z,,2022-03-28T07:14:49Z,OPEN,False,406,157,8,https://github.com/xiangwang1,Adds hyperscan support to pm operator,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2551,https://github.com/xiangwang1,2,https://github.com/SpiderLabs/ModSecurity/pull/2551#issuecomment-825482550,,"@zimmerle, do you have chance to take a look? Thanks.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2551,2021-04-08T08:33:25Z,,2022-03-28T07:14:49Z,OPEN,False,406,157,8,https://github.com/xiangwang1,Adds hyperscan support to pm operator,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2551,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/2551#issuecomment-840744824,,Having this merged at - https://github.com/SpiderLabs/ModSecurity/tree/v3/dev%2Fhyperscan,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2551,2021-04-08T08:33:25Z,,2022-03-28T07:14:49Z,OPEN,False,406,157,8,https://github.com/xiangwang1,Adds hyperscan support to pm operator,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2551,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/2551#issuecomment-877200577,,"Rebased on top of v3/master -
https://github.com/SpiderLabs/ModSecurity/tree/v3/dev%2Fhyperscan",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2551,2021-04-08T08:33:25Z,,2022-03-28T07:14:49Z,OPEN,False,406,157,8,https://github.com/xiangwang1,Adds hyperscan support to pm operator,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2551,https://github.com/poszu,5,https://github.com/SpiderLabs/ModSecurity/pull/2551#issuecomment-1080283012,,"@zimmerle What's holding you back from merging this? I observe memory leaks reported in #2589, that this PR is supposed to fix. Can I somehow help in merging?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2562,2021-04-28T10:30:10Z,2021-05-27T22:55:06Z,2021-05-27T22:55:06Z,CLOSED,False,7,8,1,https://github.com/nullpo-head,Fix pcre's JIT support detection was not working,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2562,https://github.com/nullpo-head,1,https://github.com/SpiderLabs/ModSecurity/pull/2562,"Pcre's JIT support detection introduced by #1213 was not working due to a bug caused by AC_TRY_COMPILE.
This PR fixes it and enables to opt out JIT support correctly.
AC_TRY_COMPILE macro detects whether a given C program compiles, and the original code used it to detect JIT support by pcre_config(PCRE_CONFIG_JIT,. However, pcre_config(PCRE_CONFIG_JIT, is a runtime feature to detect JIT support, and it compiles anyway, regardless of whether JIT support exists or not. A correct fix is to check whether it can be linked with some jit-specific API such as pcre_jit_exec.","Pcre's JIT support detection introduced by #1213 was not working due to a bug caused by AC_TRY_COMPILE.
This PR fixes it and enables to opt out JIT support correctly.
AC_TRY_COMPILE macro detects whether a given C program compiles, and the original code used it to detect JIT support by pcre_config(PCRE_CONFIG_JIT,. However, pcre_config(PCRE_CONFIG_JIT, is a runtime feature to detect JIT support, and it compiles anyway, regardless of whether JIT support exists or not. A correct fix is to check whether it can be linked with some jit-specific API such as pcre_jit_exec.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2562,2021-04-28T10:30:10Z,2021-05-27T22:55:06Z,2021-05-27T22:55:06Z,CLOSED,False,7,8,1,https://github.com/nullpo-head,Fix pcre's JIT support detection was not working,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2562,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2562#issuecomment-842733850,"Pcre's JIT support detection introduced by #1213 was not working due to a bug caused by AC_TRY_COMPILE.
This PR fixes it and enables to opt out JIT support correctly.
AC_TRY_COMPILE macro detects whether a given C program compiles, and the original code used it to detect JIT support by pcre_config(PCRE_CONFIG_JIT,. However, pcre_config(PCRE_CONFIG_JIT, is a runtime feature to detect JIT support, and it compiles anyway, regardless of whether JIT support exists or not. A correct fix is to check whether it can be linked with some jit-specific API such as pcre_jit_exec.",Kudos @nullpo-head 👍 👍 . Thank you for reporting. I am going to analyze it a little bit further tomorrow.,True,{'THUMBS_UP': ['https://github.com/nullpo-head']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2562,2021-04-28T10:30:10Z,2021-05-27T22:55:06Z,2021-05-27T22:55:06Z,CLOSED,False,7,8,1,https://github.com/nullpo-head,Fix pcre's JIT support detection was not working,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2562,https://github.com/zimmerle,3,https://github.com/SpiderLabs/ModSecurity/pull/2562#issuecomment-843047693,"Pcre's JIT support detection introduced by #1213 was not working due to a bug caused by AC_TRY_COMPILE.
This PR fixes it and enables to opt out JIT support correctly.
AC_TRY_COMPILE macro detects whether a given C program compiles, and the original code used it to detect JIT support by pcre_config(PCRE_CONFIG_JIT,. However, pcre_config(PCRE_CONFIG_JIT, is a runtime feature to detect JIT support, and it compiles anyway, regardless of whether JIT support exists or not. A correct fix is to check whether it can be linked with some jit-specific API such as pcre_jit_exec.",Having it on QA here - e23aa2f,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2562,2021-04-28T10:30:10Z,2021-05-27T22:55:06Z,2021-05-27T22:55:06Z,CLOSED,False,7,8,1,https://github.com/nullpo-head,Fix pcre's JIT support detection was not working,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2562,https://github.com/nullpo-head,4,https://github.com/SpiderLabs/ModSecurity/pull/2562#issuecomment-843230121,"Pcre's JIT support detection introduced by #1213 was not working due to a bug caused by AC_TRY_COMPILE.
This PR fixes it and enables to opt out JIT support correctly.
AC_TRY_COMPILE macro detects whether a given C program compiles, and the original code used it to detect JIT support by pcre_config(PCRE_CONFIG_JIT,. However, pcre_config(PCRE_CONFIG_JIT, is a runtime feature to detect JIT support, and it compiles anyway, regardless of whether JIT support exists or not. A correct fix is to check whether it can be linked with some jit-specific API such as pcre_jit_exec.",Thanks so much!,True,"{'THUMBS_UP': ['https://github.com/zimmerle'], 'ROCKET': ['https://github.com/zimmerle']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2562,2021-04-28T10:30:10Z,2021-05-27T22:55:06Z,2021-05-27T22:55:06Z,CLOSED,False,7,8,1,https://github.com/nullpo-head,Fix pcre's JIT support detection was not working,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2562,https://github.com/zimmerle,5,https://github.com/SpiderLabs/ModSecurity/pull/2562#issuecomment-849994046,"Pcre's JIT support detection introduced by #1213 was not working due to a bug caused by AC_TRY_COMPILE.
This PR fixes it and enables to opt out JIT support correctly.
AC_TRY_COMPILE macro detects whether a given C program compiles, and the original code used it to detect JIT support by pcre_config(PCRE_CONFIG_JIT,. However, pcre_config(PCRE_CONFIG_JIT, is a runtime feature to detect JIT support, and it compiles anyway, regardless of whether JIT support exists or not. A correct fix is to check whether it can be linked with some jit-specific API such as pcre_jit_exec.",Merged! on v3/master.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2570,2021-05-21T05:05:18Z,2021-05-24T11:50:10Z,2021-05-24T11:50:22Z,MERGED,True,1,1,1,https://github.com/keducoop,Update README.md,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2570,https://github.com/keducoop,1,https://github.com/SpiderLabs/ModSecurity/pull/2570,Fixed typo in README,Fixed typo in README,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2570,2021-05-21T05:05:18Z,2021-05-24T11:50:10Z,2021-05-24T11:50:22Z,MERGED,True,1,1,1,https://github.com/keducoop,Update README.md,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2570,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2570#issuecomment-846990152,Fixed typo in README,Thank you @keducoop 👍,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2574,2021-05-31T20:35:38Z,2021-06-30T19:05:53Z,2021-06-30T19:05:53Z,CLOSED,False,8,0,2,https://github.com/martinhsv,New recommended rule to enable JSON parser for subtypes with +json su…,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2574,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2574,"This pull request includes one way to address the underlying ask in #2564 .
Without assuming that this change (or anything similar) will necessarily proceed within the ModSecurity project and its modsecurity.conf-recommended file, this pull request is made available at least for assessment and comment.
Rather than adjust the existing rule 200001, I have opted to create a new rule 200006 to cover the additional use cases (the type is 'application' with the subtype not 'json', but has a +json subtype).  This separation of rules might be advantageous if we are at all worried that some ModSecurity users might experience undesired effects from this change.  Having a separate rule for the additional functionality makes it simpler to disable or comment-out the new rule and restore former behaviour.
A second nuance/detail of note may be that I chose to specify the literal '+' plus character within a character class.  This was done to avoid any inconsistencies (especially between v2.9 and v3) with backslash-escaping.
If are hesitant to take even this level of risk with rules that activate the JSON parser, yet another option could be to include the new rule in the file, but leave it commented-out.  This would not be entirely unprecedented; we already have several configuration items in the file present but commented-out.  This would at least save users interested in the functionality from having to think about and compose a new or modified regex themselves.","This pull request includes one way to address the underlying ask in #2564 .
Without assuming that this change (or anything similar) will necessarily proceed within the ModSecurity project and its modsecurity.conf-recommended file, this pull request is made available at least for assessment and comment.
Rather than adjust the existing rule 200001, I have opted to create a new rule 200006 to cover the additional use cases (the type is 'application' with the subtype not 'json', but has a +json subtype).  This separation of rules might be advantageous if we are at all worried that some ModSecurity users might experience undesired effects from this change.  Having a separate rule for the additional functionality makes it simpler to disable or comment-out the new rule and restore former behaviour.
A second nuance/detail of note may be that I chose to specify the literal '+' plus character within a character class.  This was done to avoid any inconsistencies (especially between v2.9 and v3) with backslash-escaping.
If are hesitant to take even this level of risk with rules that activate the JSON parser, yet another option could be to include the new rule in the file, but leave it commented-out.  This would not be entirely unprecedented; we already have several configuration items in the file present but commented-out.  This would at least save users interested in the functionality from having to think about and compose a new or modified regex themselves.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2574,2021-05-31T20:35:38Z,2021-06-30T19:05:53Z,2021-06-30T19:05:53Z,CLOSED,False,8,0,2,https://github.com/martinhsv,New recommended rule to enable JSON parser for subtypes with +json su…,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2574,https://github.com/martinhsv,2,https://github.com/SpiderLabs/ModSecurity/pull/2574#issuecomment-871656039,"This pull request includes one way to address the underlying ask in #2564 .
Without assuming that this change (or anything similar) will necessarily proceed within the ModSecurity project and its modsecurity.conf-recommended file, this pull request is made available at least for assessment and comment.
Rather than adjust the existing rule 200001, I have opted to create a new rule 200006 to cover the additional use cases (the type is 'application' with the subtype not 'json', but has a +json subtype).  This separation of rules might be advantageous if we are at all worried that some ModSecurity users might experience undesired effects from this change.  Having a separate rule for the additional functionality makes it simpler to disable or comment-out the new rule and restore former behaviour.
A second nuance/detail of note may be that I chose to specify the literal '+' plus character within a character class.  This was done to avoid any inconsistencies (especially between v2.9 and v3) with backslash-escaping.
If are hesitant to take even this level of risk with rules that activate the JSON parser, yet another option could be to include the new rule in the file, but leave it commented-out.  This would not be entirely unprecedented; we already have several configuration items in the file present but commented-out.  This would at least save users interested in the functionality from having to think about and compose a new or modified regex themselves.","Closing in favour of #2586 (an equivalent rule structure but, per the last paragraph above, the rule is provided commented-out).",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2578,2021-06-14T13:38:56Z,,2021-12-02T03:41:54Z,OPEN,False,1,0,1,https://github.com/bsulmanas,fix memory leak in the example,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2578,https://github.com/bsulmanas,1,https://github.com/SpiderLabs/ModSecurity/pull/2578,"error string is created via strdup and it must be passed to free() to avoid a memory leak.
Not really important in this particular case, but if would be consistent with msc_rules_cleanup(rules) and msc_cleanup(modsec)","error string is created via strdup and it must be passed to free() to avoid a memory leak.
Not really important in this particular case, but if would be consistent with msc_rules_cleanup(rules) and msc_cleanup(modsec)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2580,2021-06-18T02:44:25Z,,2022-03-29T06:59:31Z,OPEN,False,18,12,8,https://github.com/Abce,fix some memory leaks for parsing & cleaning up rules,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2580,https://github.com/Abce,1,https://github.com/SpiderLabs/ModSecurity/pull/2580,,,True,"{'THUMBS_UP': ['https://github.com/877509395', 'https://github.com/qazhub', 'https://github.com/thelittlefireman', 'https://github.com/oxpa', 'https://github.com/poszu']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2580,2021-06-18T02:44:25Z,,2022-03-29T06:59:31Z,OPEN,False,18,12,8,https://github.com/Abce,fix some memory leaks for parsing & cleaning up rules,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2580,https://github.com/877509395,2,https://github.com/SpiderLabs/ModSecurity/pull/2580#issuecomment-903096799,,"great for ""delete transformations""",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2580,2021-06-18T02:44:25Z,,2022-03-29T06:59:31Z,OPEN,False,18,12,8,https://github.com/Abce,fix some memory leaks for parsing & cleaning up rules,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2580,https://github.com/poszu,3,https://github.com/SpiderLabs/ModSecurity/pull/2580#issuecomment-1080279226,,"@zimmerle What is holding you back from merging this? I also have a problem with these memory leaks, it would be great to merge it. ;)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2580,2021-06-18T02:44:25Z,,2022-03-29T06:59:31Z,OPEN,False,18,12,8,https://github.com/Abce,fix some memory leaks for parsing & cleaning up rules,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2580,https://github.com/liudongmiao,4,https://github.com/SpiderLabs/ModSecurity/pull/2580#issuecomment-1080284626,,"@poszu From my test in #2710, even patched this, there are many memory leak.
Which g++ version do you use?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2580,2021-06-18T02:44:25Z,,2022-03-29T06:59:31Z,OPEN,False,18,12,8,https://github.com/Abce,fix some memory leaks for parsing & cleaning up rules,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2580,https://github.com/poszu,5,https://github.com/SpiderLabs/ModSecurity/pull/2580#issuecomment-1080439800,,"@poszu From my test in #2710, even patched this, there are many memory leak. Which g++ version do you use?

Yes, I am aware of other leaks too. I'm using clang 10. ASAN reports plenty of leaks on the v3.0.6.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2586,2021-06-30T19:04:31Z,2021-07-03T17:15:16Z,2021-07-12T16:35:40Z,MERGED,True,7,0,1,https://github.com/martinhsv,Add commented-out sample rule to engage JSON Processor for more subtypes,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2586,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2586,"This pull request is a replacement for #2574 in addressing #2564
The rule provided here is the same as in the former pull request, but it is provided (like some other configuration items in the file) commented-out.
This is provided as a convenience for users so that they might be able to avoid having to think about how to compose a rule themselves.  Only removing the two comment characters is necessary to activate the new rule.","This pull request is a replacement for #2574 in addressing #2564
The rule provided here is the same as in the former pull request, but it is provided (like some other configuration items in the file) commented-out.
This is provided as a convenience for users so that they might be able to avoid having to think about how to compose a rule themselves.  Only removing the two comment characters is necessary to activate the new rule.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2586,2021-06-30T19:04:31Z,2021-07-03T17:15:16Z,2021-07-12T16:35:40Z,MERGED,True,7,0,1,https://github.com/martinhsv,Add commented-out sample rule to engage JSON Processor for more subtypes,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2586,https://github.com/martinhsv,2,https://github.com/SpiderLabs/ModSecurity/pull/2586#issuecomment-871656636,"This pull request is a replacement for #2574 in addressing #2564
The rule provided here is the same as in the former pull request, but it is provided (like some other configuration items in the file) commented-out.
This is provided as a convenience for users so that they might be able to avoid having to think about how to compose a rule themselves.  Only removing the two comment characters is necessary to activate the new rule.","Unless there are objections, I'll plan to merge this within around a day.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2586,2021-06-30T19:04:31Z,2021-07-03T17:15:16Z,2021-07-12T16:35:40Z,MERGED,True,7,0,1,https://github.com/martinhsv,Add commented-out sample rule to engage JSON Processor for more subtypes,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2586,https://github.com/dune73,3,https://github.com/SpiderLabs/ModSecurity/pull/2586#issuecomment-871966749,"This pull request is a replacement for #2574 in addressing #2564
The rule provided here is the same as in the former pull request, but it is provided (like some other configuration items in the file) commented-out.
This is provided as a convenience for users so that they might be able to avoid having to think about how to compose a rule themselves.  Only removing the two comment characters is necessary to activate the new rule.","I overlooked #2574 and only returned to this topic today.
I second your comments about the + symbol. That makes a lot of sense.
But what is your reasoning for commenting out this update? Or in other words, where is the sense in accepting JSON payloads without handling them with the right body processor. That way they will just be blobs with a lot of curly brackets in REQUEST_BODY - or completely garbled variables with funny names.
Adding it as a complementary JSON rule forces you to add a new rule id, you picked 200006. I do not readily see a way around this, but with 200000 and 200001 and 200006 being very different in nature from 200002, 3, 4 and 5, the set of recommended rules becomes somewhat un-orderly. This is probably not very obvious, but in my classes, people struggle to grasp the function of the various recommended rules.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2586,2021-06-30T19:04:31Z,2021-07-03T17:15:16Z,2021-07-12T16:35:40Z,MERGED,True,7,0,1,https://github.com/martinhsv,Add commented-out sample rule to engage JSON Processor for more subtypes,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2586,https://github.com/zimmerle,4,https://github.com/SpiderLabs/ModSecurity/pull/2586#issuecomment-872217111,"This pull request is a replacement for #2574 in addressing #2564
The rule provided here is the same as in the former pull request, but it is provided (like some other configuration items in the file) commented-out.
This is provided as a convenience for users so that they might be able to avoid having to think about how to compose a rule themselves.  Only removing the two comment characters is necessary to activate the new rule.","As the name suggests modsecurity.conf-recommended is a recommendation to the user;  The recommendations oftentimes can be used as a guide for users to customize ModSecurity to fit their end-application. I understand this pull request's value as it educates the user of the possibilities. Therefore, I think it is safe to proceed with the merge.
I understand there may be a second discussion about whether it will be interested in supporting that as default in our recommendation file (uncommented); keep this pull request open for further discussion.
@martinhsv are you interested in doing this change for v2/master as well? If so, please link this pull request.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2586,2021-06-30T19:04:31Z,2021-07-03T17:15:16Z,2021-07-12T16:35:40Z,MERGED,True,7,0,1,https://github.com/martinhsv,Add commented-out sample rule to engage JSON Processor for more subtypes,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2586,https://github.com/dune73,5,https://github.com/SpiderLabs/ModSecurity/pull/2586#issuecomment-872243986,"This pull request is a replacement for #2574 in addressing #2564
The rule provided here is the same as in the former pull request, but it is provided (like some other configuration items in the file) commented-out.
This is provided as a convenience for users so that they might be able to avoid having to think about how to compose a rule themselves.  Only removing the two comment characters is necessary to activate the new rule.","I see.
I agree having the commented out new rule is better than not having it. But I would argue that the new rule should replace the existing 200001.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2586,2021-06-30T19:04:31Z,2021-07-03T17:15:16Z,2021-07-12T16:35:40Z,MERGED,True,7,0,1,https://github.com/martinhsv,Add commented-out sample rule to engage JSON Processor for more subtypes,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2586,https://github.com/martinhsv,6,https://github.com/SpiderLabs/ModSecurity/pull/2586#issuecomment-873017064,"This pull request is a replacement for #2574 in addressing #2564
The rule provided here is the same as in the former pull request, but it is provided (like some other configuration items in the file) commented-out.
This is provided as a convenience for users so that they might be able to avoid having to think about how to compose a rule themselves.  Only removing the two comment characters is necessary to activate the new rule.","Hi @dune73 ,
Regarding your observation about the rule numbering:  I agree that it is a downside that the sample, commented-out rule is 006 and hence discontinuous with the 'normal' JSON-Processor-enabling rule.  Renumbering rules 002-005, however, seemed like a very bad idea.  I did also locate the new item within the file just after 200001 in an attempt to minimize potential confusion.
To your most recent comment, and to build slightly on what @zimmerle noted ...
The modsecurity.conf-recommended rules are not intended to be comprehensive.  Indeed the comments above rule 200001 already put the onus on the user to modify as required:
# Initiate JSON Processor in case of JSON content-type; change accordingly
# if your application does not use 'application/json'

Given that +json subtype suffixes are sufficiently non-rare, I was nevertheless persuaded that we should consider doing something here to be of at least some minor assistance to users.
Why not simply amend 200001 to cover all cases?
One reason is that there is some non-zero risk that not all of those +json subtypes will actually be json.  As noted previously, there are over a hundred such subtypes and it is impractical to assess them all individually.  While one would think they all would be, based on the name, we already had an example from your original posting in #2564 that defied the initial expectation (application/json-seq).  So what if one or more are json-ish but not a true, valid json object?  I was wary of inadvertently sowing more confusion than we would be alleviating.
Given all of the above, at a recent internal discussion, I wound up suggesting the commented-out, sample rule in this pull requests as something of a compromise (possibly merely as an interim step towards having that functionality enabled in a non-commented-out rule).
Given that you seem to agree that the current pull request represents at least some incremental improvement, I hope you can take it in that spirit.  As this gets noticed by more people over the coming weeks and months, feedback from the community will, as always, be highly valued.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2586,2021-06-30T19:04:31Z,2021-07-03T17:15:16Z,2021-07-12T16:35:40Z,MERGED,True,7,0,1,https://github.com/martinhsv,Add commented-out sample rule to engage JSON Processor for more subtypes,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2586,https://github.com/dune73,7,https://github.com/SpiderLabs/ModSecurity/pull/2586#issuecomment-873093408,"This pull request is a replacement for #2574 in addressing #2564
The rule provided here is the same as in the former pull request, but it is provided (like some other configuration items in the file) commented-out.
This is provided as a convenience for users so that they might be able to avoid having to think about how to compose a rule themselves.  Only removing the two comment characters is necessary to activate the new rule.","Thank you for your extensive explanations, @martinhsv. I like your considerate approach to this problem.
So you have real evidence that somebody submits a payload marked as JSON but it's not really JSON. I see the problem, but without knowing any numbers I'd probably conclude this was block-worthy offense. But I admit that this can have tough effects in the context of the recommended-rules since you block immediately (vs. anomaly scoring).
I've never read the recommended rules as a proposal. I do indeed see them as comprehensive even when there are shortcomings (and I tell my students to remove 200004 since it causes too many FPs in my experience). This difference points to a bigger problem. I think it takes a lot of operational experience to come up with something that can be seen as more comprehensive than the recommended rules. I would definitely not expect the average WAF engineer to create something secure in this regard. So my experience is that people take the recommended rules as is (minus 200004 if they follow my tutorials).
We may have to talk this through, since we need a common ground in this regard. We've had discussions within CRS about replacing the recommended rules with our own set of base configuration rules. I always thought that was an unnecessary complication of the setup, so I would very much prefer to stick to your rules as long as they are comprehensive enough.
So yes, I can live with a commented out rule and it's better than the status quo. But it also tilts the balance somewhat in favor of replacing the recommended rules for CRS.
Asking for more people to chime in here is a good plan. Thank you.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2588,2021-07-05T13:38:37Z,2021-07-09T13:23:15Z,2021-07-09T13:23:19Z,CLOSED,False,1,1,1,https://github.com/filips,docs: correct project name,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2588,https://github.com/filips,1,https://github.com/SpiderLabs/ModSecurity/pull/2588,,,True,{'THUMBS_UP': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2588,2021-07-05T13:38:37Z,2021-07-09T13:23:15Z,2021-07-09T13:23:19Z,CLOSED,False,1,1,1,https://github.com/filips,docs: correct project name,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2588,https://github.com/zimmerle,2,https://github.com/SpiderLabs/ModSecurity/pull/2588#issuecomment-877184513,,Well noticed. Thanks! Merged!,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2591,2021-07-11T22:18:40Z,2021-07-12T00:50:42Z,2021-07-12T00:51:56Z,CLOSED,False,676,158,21,https://github.com/Kalakaarboyz1,V3/dev/hyperscan,3,[],https://github.com/SpiderLabs/ModSecurity/pull/2591,https://github.com/Kalakaarboyz1,1,https://github.com/SpiderLabs/ModSecurity/pull/2591,what's say Developers Friends. I'm i good or not hahaha. and please tell me that i can apply for the some reward.,what's say Developers Friends. I'm i good or not hahaha. and please tell me that i can apply for the some reward.,True,{'CONFUSED': ['https://github.com/zimmerle']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2591,2021-07-11T22:18:40Z,2021-07-12T00:50:42Z,2021-07-12T00:51:56Z,CLOSED,False,676,158,21,https://github.com/Kalakaarboyz1,V3/dev/hyperscan,3,[],https://github.com/SpiderLabs/ModSecurity/pull/2591,https://github.com/Kalakaarboyz1,2,https://github.com/SpiderLabs/ModSecurity/pull/2591#issuecomment-877894187,what's say Developers Friends. I'm i good or not hahaha. and please tell me that i can apply for the some reward.,access,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2592,2021-07-12T00:18:00Z,2021-07-12T00:49:10Z,2021-07-12T00:49:39Z,CLOSED,False,71,0,1,https://github.com/Kalakaarboyz1,Revert 2 revert 1 kalakaarboyz1 patch 1,3,[],https://github.com/SpiderLabs/ModSecurity/pull/2592,https://github.com/Kalakaarboyz1,1,https://github.com/SpiderLabs/ModSecurity/pull/2592,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2592,2021-07-12T00:18:00Z,2021-07-12T00:49:10Z,2021-07-12T00:49:39Z,CLOSED,False,71,0,1,https://github.com/Kalakaarboyz1,Revert 2 revert 1 kalakaarboyz1 patch 1,3,[],https://github.com/SpiderLabs/ModSecurity/pull/2592,https://github.com/Kalakaarboyz1,2,https://github.com/SpiderLabs/ModSecurity/pull/2592#issuecomment-877893722,,access,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2593,2021-07-12T16:34:19Z,2021-07-14T17:15:53Z,2021-07-14T17:15:53Z,MERGED,True,7,0,1,https://github.com/martinhsv,Add commented-out sample rule to engage JSON Processor for more subtypes,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2593,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2593,"This is the same change for the v2 version of the file as was done recently for the v3 version of the file ( #2586 )
If there are no concerns expressed, I will plan to merge this within a day or two.","This is the same change for the v2 version of the file as was done recently for the v3 version of the file ( #2586 )
If there are no concerns expressed, I will plan to merge this within a day or two.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2596,2021-07-25T16:40:45Z,,2022-01-28T23:11:58Z,OPEN,False,4,6,1,https://github.com/ffontaine,build/libmaxmind.m4: fix build with host-pkgconf,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2596,https://github.com/ffontaine,1,https://github.com/SpiderLabs/ModSecurity/pull/2596,"Build with maxminddb is broken since version 3.0.5 and 785958f because libmaxminddb has been removed from MAXMIND_POSSIBLE_LIB_NAMES
So, as suggested by Arnout in #2131, don't use MAXMIND_POSSIBLE_LIB_NAMES for pkg-config, because it was never called
anything other than libmaxminddb
Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","Build with maxminddb is broken since version 3.0.5 and 785958f because libmaxminddb has been removed from MAXMIND_POSSIBLE_LIB_NAMES
So, as suggested by Arnout in #2131, don't use MAXMIND_POSSIBLE_LIB_NAMES for pkg-config, because it was never called
anything other than libmaxminddb
Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2596,2021-07-25T16:40:45Z,,2022-01-28T23:11:58Z,OPEN,False,4,6,1,https://github.com/ffontaine,build/libmaxmind.m4: fix build with host-pkgconf,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2596,https://github.com/ffontaine,2,https://github.com/SpiderLabs/ModSecurity/pull/2596#issuecomment-1024732480,"Build with maxminddb is broken since version 3.0.5 and 785958f because libmaxminddb has been removed from MAXMIND_POSSIBLE_LIB_NAMES
So, as suggested by Arnout in #2131, don't use MAXMIND_POSSIBLE_LIB_NAMES for pkg-config, because it was never called
anything other than libmaxminddb
Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com",Do you have some comments on this PR?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2600,2021-08-08T03:07:53Z,2021-08-14T02:57:44Z,2021-08-14T02:57:44Z,CLOSED,False,15,5,2,https://github.com/877509395,fix include handle,3,[],https://github.com/SpiderLabs/ModSecurity/pull/2600,https://github.com/877509395,1,https://github.com/SpiderLabs/ModSecurity/pull/2600,"""const char *file = strchr(yytext, ' ') + 1""  supposes only one space after Include, but the grammar ""[ \t]+"" mean multiple space and TAB including one space;","""const char *file = strchr(yytext, ' ') + 1""  supposes only one space after Include, but the grammar ""[ \t]+"" mean multiple space and TAB including one space;",True,{'THUMBS_UP': ['https://github.com/airween']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2600,2021-08-08T03:07:53Z,2021-08-14T02:57:44Z,2021-08-14T02:57:44Z,CLOSED,False,15,5,2,https://github.com/877509395,fix include handle,3,[],https://github.com/SpiderLabs/ModSecurity/pull/2600,https://github.com/martinhsv,2,https://github.com/SpiderLabs/ModSecurity/pull/2600#issuecomment-896245015,"""const char *file = strchr(yytext, ' ') + 1""  supposes only one space after Include, but the grammar ""[ \t]+"" mean multiple space and TAB including one space;","Just to flesh out a little background (and correct me if you think I'm mistaken) ...
In v3.0.3, several configuration directives allowed for exactly one space character after the directive name.
v3.0.4 included changes ( #2006  ) to broaden the whitespace that is allowed for many of these directives, including the two referenced in this pull request.
The last two changes in that commit ( dc78c0e ) changed the whitespace definition from '[ ]' to '[ \t]+' ...
... but that that portion of change appears to be incomplete.
That seems to me to be a correct conclusion.  For one thing, using tabs instead of spaces after the 'Include' keyword is a problem use case.
Turning to this proposed fix:
One thing I'm a little wary of, is including regex.h here.  We haven't previously used that within the parser subcomponent, and, given that Flex has its own regular expression engine, it might be confusing in future if we start mixing that in.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2600,2021-08-08T03:07:53Z,2021-08-14T02:57:44Z,2021-08-14T02:57:44Z,CLOSED,False,15,5,2,https://github.com/877509395,fix include handle,3,[],https://github.com/SpiderLabs/ModSecurity/pull/2600,https://github.com/877509395,3,https://github.com/SpiderLabs/ModSecurity/pull/2600#issuecomment-896448225,"""const char *file = strchr(yytext, ' ') + 1""  supposes only one space after Include, but the grammar ""[ \t]+"" mean multiple space and TAB including one space;",I will  remove regex.h;,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2600,2021-08-08T03:07:53Z,2021-08-14T02:57:44Z,2021-08-14T02:57:44Z,CLOSED,False,15,5,2,https://github.com/877509395,fix include handle,3,[],https://github.com/SpiderLabs/ModSecurity/pull/2600,https://github.com/877509395,4,https://github.com/SpiderLabs/ModSecurity/pull/2600#issuecomment-896478032,"""const char *file = strchr(yytext, ' ') + 1""  supposes only one space after Include, but the grammar ""[ \t]+"" mean multiple space and TAB including one space;","Yes, You are right
If no #2006 included, use one space is correct;
but after #2006 included, [ \t]+ should be supported correctly for  {CONFIG_INCLUDE}[ \t]+[""]{CONFIG_VALUE_PATH}["" and {CONFIG_INCLUDE}[ \t]+{CONFIG_VALUE_PATH}.
So after v3.0.4, it should be fixed, using tabs/spaces after the 'Include' keyword should not be a problem of use case, the code and the lex do not match.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2600,2021-08-08T03:07:53Z,2021-08-14T02:57:44Z,2021-08-14T02:57:44Z,CLOSED,False,15,5,2,https://github.com/877509395,fix include handle,3,[],https://github.com/SpiderLabs/ModSecurity/pull/2600,https://github.com/877509395,5,https://github.com/SpiderLabs/ModSecurity/pull/2600#issuecomment-898805150,"""const char *file = strchr(yytext, ' ') + 1""  supposes only one space after Include, but the grammar ""[ \t]+"" mean multiple space and TAB including one space;",ignore this PR.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2602,2021-08-09T13:30:43Z,2022-02-09T15:46:16Z,2022-02-09T15:46:16Z,MERGED,True,26,107,2,https://github.com/hyc,Fix #2601 misuses of LMDB API,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2602,https://github.com/hyc,1,https://github.com/SpiderLabs/ModSecurity/pull/2602,"Only open DBI once, doesn't need closing.
Never reuse a txn handle after commit.
Use MDB_RDONLY for txns that aren't doing any writes","Only open DBI once, doesn't need closing.
Never reuse a txn handle after commit.
Use MDB_RDONLY for txns that aren't doing any writes",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2602,2021-08-09T13:30:43Z,2022-02-09T15:46:16Z,2022-02-09T15:46:16Z,MERGED,True,26,107,2,https://github.com/hyc,Fix #2601 misuses of LMDB API,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2602,https://github.com/martinhsv,2,https://github.com/SpiderLabs/ModSecurity/pull/2602#issuecomment-1023730253,"Only open DBI once, doesn't need closing.
Never reuse a txn handle after commit.
Use MDB_RDONLY for txns that aren't doing any writes","Hello @hyc ,
I finally had a chance to look at this in detail and one thing I wondered about:
There is a new member variable 'MDB_dbi m_dbi;' in the LMDB class -- which makes sense.
MDB_dbi is typedef'd to 'unsigned int', which means m_dbi is undefined initially.
The LMDB constructor will initialize it with a successful call to mdb_dbi_open.
But what if it fails? The return code from mdb_dbi_open isn't checked and we proceed as if it had been successful.
I had a look at both the LMDB documentation and (a brief) skim of the code and it doesn't look like a failure condition within mdb_dbi_open will result in the MDB_dbi out-parameter being updated to a special value or anything (that might have been checked for in subsequent calls to other functions).
Thoughts?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2602,2021-08-09T13:30:43Z,2022-02-09T15:46:16Z,2022-02-09T15:46:16Z,MERGED,True,26,107,2,https://github.com/hyc,Fix #2601 misuses of LMDB API,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2602,https://github.com/hyc,3,https://github.com/SpiderLabs/ModSecurity/pull/2602#issuecomment-1023744667,"Only open DBI once, doesn't need closing.
Never reuse a txn handle after commit.
Use MDB_RDONLY for txns that aren't doing any writes","The default dbi, which is what your code uses, always exists and is always valid, so the mdb_dbi_open call will never fail.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2604,2021-08-14T02:31:20Z,2021-08-27T02:55:17Z,2021-08-31T10:55:51Z,CLOSED,False,15,4,1,https://github.com/877509395,fix include,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2604,https://github.com/877509395,1,https://github.com/SpiderLabs/ModSecurity/pull/2604,"Fix lex ""include [ \t]filename"" handle. To support more spaces/tabs after include key word. Before this change, code supports only one space after include. but lex support more.","Fix lex ""include [ \t]filename"" handle. To support more spaces/tabs after include key word. Before this change, code supports only one space after include. but lex support more.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2604,2021-08-14T02:31:20Z,2021-08-27T02:55:17Z,2021-08-31T10:55:51Z,CLOSED,False,15,4,1,https://github.com/877509395,fix include,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2604,https://github.com/martinhsv,2,https://github.com/SpiderLabs/ModSecurity/pull/2604#issuecomment-905921482,"Fix lex ""include [ \t]filename"" handle. To support more spaces/tabs after include key word. Before this change, code supports only one space after include. but lex support more.","I like the simplification of leaving out regex.h.
But I don't think you need to make a copy.  For example, for the first of the two sections, wouldn't this suffice?:
char *tmpStr = yytext + strlen(""include"");
const char *file = strtok ( tmpStr, "" \t"");",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2604,2021-08-14T02:31:20Z,2021-08-27T02:55:17Z,2021-08-31T10:55:51Z,CLOSED,False,15,4,1,https://github.com/877509395,fix include,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2604,https://github.com/877509395,3,https://github.com/SpiderLabs/ModSecurity/pull/2604#issuecomment-906056681,"Fix lex ""include [ \t]filename"" handle. To support more spaces/tabs after include key word. Before this change, code supports only one space after include. but lex support more.","strtok(str) will set the next byte of last byte of token to '\0' if token found, so it may change the str. If str contains multiple [ \t], and we need enumerate  all possible tokens(call strtok multiple times), multiple bytes would be set to 0. below is a example.
#include <string.h>
int main () {
  char str[80] = ""This is - www.runoob.com - website"";
  const char s[2] = ""-"";
  int i=0;
  char *token;
  int length;
  length = strlen(str);
  token = strtok(str, s);
  while( token != NULL ) {
    i++;
    printf( ""token%d        =%s\n"", i,token );
    printf( ""token%d address=%p\n"", i, token );
    token = strtok(NULL, s);
    printf(""\n"");
  }
  printf( ""str          =%s\n"",str);
  printf( ""str          =%p\n"", str  );
  return(0);
}
the output is:
token1        =This is
token1 address=0x7ffe0e856810
token2        = www.runoob.com
token2 address=0x7ffe0e856819
token3        = website
token3 address=0x7ffe0e85682a
str          =This is
str          =0x7ffe0e856810
~
From the output, str is changed to ""This  is"", the next byte of ""This is""  changed to 0. every token address is between str and str+length;
For our case, strtok only is called only once, and based on the below grammar, it is NOT possible there is a [ \t]+ in ""CONFIG_VALUE_PATH"", so strtok will not change CONFIG_VALUE_PATH LUCKILY;
""CONFIG_VALUE_PATH                       [0-9A-Za-z_/.-*:]+""
{CONFIG_INCLUDE}[ \t]+{CONFIG_VALUE_PATH}
{CONFIG_INCLUDE}[ \t]+[""]{CONFIG_VALUE_PATH}[""]
so below change can suffice.
char *tmpStr = yytext + strlen(""include"");
const char *file = strtok ( tmpStr, "" \t"");
But I think it is a good practice to first strdup and then free for strtok：

strtok may do harm to  input.
In case for some reason in the future, CONFIG_VALUE_PATH can contain space/tab.
hidden logic(can not contain space/tab in CONFIG_VALUE_PATH) of the code need to dig out",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2604,2021-08-14T02:31:20Z,2021-08-27T02:55:17Z,2021-08-31T10:55:51Z,CLOSED,False,15,4,1,https://github.com/877509395,fix include,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2604,https://github.com/martinhsv,4,https://github.com/SpiderLabs/ModSecurity/pull/2604#issuecomment-906398974,"Fix lex ""include [ \t]filename"" handle. To support more spaces/tabs after include key word. Before this change, code supports only one space after include. but lex support more.","Ok, good point.  I agree that it's unwise to use strtok here without a copy.
Is it worth considering using strspn instead?  It's a little more narrowly focussed on what is needed here.
char *tmpStr = yytext + strlen(""include"");
const char file = tmpStr + strspn ( tmpStr, "" \t"");",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2604,2021-08-14T02:31:20Z,2021-08-27T02:55:17Z,2021-08-31T10:55:51Z,CLOSED,False,15,4,1,https://github.com/877509395,fix include,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2604,https://github.com/877509395,5,https://github.com/SpiderLabs/ModSecurity/pull/2604#issuecomment-906875291,"Fix lex ""include [ \t]filename"" handle. To support more spaces/tabs after include key word. Before this change, code supports only one space after include. but lex support more.","Perfect, strspn exactly matches this context. I think I should go through libc.pdf to know every function.

remove tmpStr, merge two lines into  one line:
const char *file = yytext + strlen(""include"")+ strspn ( yytext + strlen(""include""), "" \t"");
Is it OK to remove tmpStr?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2604,2021-08-14T02:31:20Z,2021-08-27T02:55:17Z,2021-08-31T10:55:51Z,CLOSED,False,15,4,1,https://github.com/877509395,fix include,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2604,https://github.com/877509395,6,https://github.com/SpiderLabs/ModSecurity/pull/2604#issuecomment-906879283,"Fix lex ""include [ \t]filename"" handle. To support more spaces/tabs after include key word. Before this change, code supports only one space after include. but lex support more.","#include <stdio.h>
#include <string.h>
int main(int argc, char**argv)
{
  const char *yytext = ""include           lj lj ljsdfj"";
  const char *file = yytext + strlen(""include"")+ strspn ( yytext + strlen(""include""), "" \t"");
  printf(""%s"", file);
}
the output is:
[root@localhost strcspn]# ./a.out
lj lj ljsdfj",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2604,2021-08-14T02:31:20Z,2021-08-27T02:55:17Z,2021-08-31T10:55:51Z,CLOSED,False,15,4,1,https://github.com/877509395,fix include,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2604,https://github.com/877509395,7,https://github.com/SpiderLabs/ModSecurity/pull/2604#issuecomment-906885590,"Fix lex ""include [ \t]filename"" handle. To support more spaces/tabs after include key word. Before this change, code supports only one space after include. but lex support more.","BTW,
Same issue also seems exists in many other line. for example,
{CONFIG_DIR_AUDIT_LOG2}[ \t]+{CONFIG_VALUE_PATH}                        { return p::make_CONFIG_DIR_AUDIT_LOG2(strchr(yytext, ' ') + 1, *driver.loc.back());
I have not check it carefully now.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2604,2021-08-14T02:31:20Z,2021-08-27T02:55:17Z,2021-08-31T10:55:51Z,CLOSED,False,15,4,1,https://github.com/877509395,fix include,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2604,https://github.com/877509395,8,https://github.com/SpiderLabs/ModSecurity/pull/2604#issuecomment-906887549,"Fix lex ""include [ \t]filename"" handle. To support more spaces/tabs after include key word. Before this change, code supports only one space after include. but lex support more.",misoperation close this PR and delete lexhandle,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2604,2021-08-14T02:31:20Z,2021-08-27T02:55:17Z,2021-08-31T10:55:51Z,CLOSED,False,15,4,1,https://github.com/877509395,fix include,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2604,https://github.com/martinhsv,9,https://github.com/SpiderLabs/ModSecurity/pull/2604#issuecomment-907196456,"Fix lex ""include [ \t]filename"" handle. To support more spaces/tabs after include key word. Before this change, code supports only one space after include. but lex support more.","Regarding collapsing the code change to a single line, I might lean towards leaving it as two lines, because:

allocating an extra pointer on the stack doesn't really create extra cost or risk and
it may make the code a little bit easier to read and
it avoids duplicating code strlen(""include"") ... including having a hard-coded string specified twice; it's generally a good coding practice to avoid such duplication

My preference on that isn't particularly strong, however,",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2604,2021-08-14T02:31:20Z,2021-08-27T02:55:17Z,2021-08-31T10:55:51Z,CLOSED,False,15,4,1,https://github.com/877509395,fix include,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2604,https://github.com/877509395,10,https://github.com/SpiderLabs/ModSecurity/pull/2604#issuecomment-907540485,"Fix lex ""include [ \t]filename"" handle. To support more spaces/tabs after include key word. Before this change, code supports only one space after include. but lex support more.",reasonable,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2604,2021-08-14T02:31:20Z,2021-08-27T02:55:17Z,2021-08-31T10:55:51Z,CLOSED,False,15,4,1,https://github.com/877509395,fix include,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2604,https://github.com/877509395,11,https://github.com/SpiderLabs/ModSecurity/pull/2604#issuecomment-909127211,"Fix lex ""include [ \t]filename"" handle. To support more spaces/tabs after include key word. Before this change, code supports only one space after include. but lex support more.",will submit PR tomorrow,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2607,2021-08-27T05:54:13Z,2021-08-30T08:18:44Z,2021-08-30T08:18:44Z,CLOSED,False,4,4,1,https://github.com/877509395,"fix ""include CONFIG_VALUE_PATH""",1,[],https://github.com/SpiderLabs/ModSecurity/pull/2607,https://github.com/877509395,1,https://github.com/SpiderLabs/ModSecurity/pull/2607,remove extra f[strlen(f)-1] = '\0',remove extra f[strlen(f)-1] = '\0',True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2612,2021-09-01T07:21:22Z,,2021-09-01T07:21:22Z,OPEN,False,5,4,1,https://github.com/877509395,fix [ \t]+ processing for include xxxx.conf,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2612,https://github.com/877509395,1,https://github.com/SpiderLabs/ModSecurity/pull/2612,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2616,2021-09-02T18:26:37Z,2021-12-22T19:02:08Z,2021-12-22T19:42:49Z,CLOSED,False,56,4,3,https://github.com/martinhsv,Multipart names may include single quote if double-quote enclosed,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2616,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2616,"The parsing of multipart parts in Apache HTTP Server is quite permissive.  So much so that a serious issue was identified nearly 10 years ago whereby an attacker could use single quotes to bypass many rules by exploiting parsing differences between Apache and ModSecurity.
One reference to this is located here:
https://blog.ivanristic.com/2012/06/modsecurity-and-modsecurity-core-rule-set-multipart-bypasses.html
In response, ModSecurity was updated to always set the 'Invalid Quoting' flag if a single quote appears anywhere in the 'name' or 'filename' value of the Content-Disposition header of a multipart part ( #460 ).
This has been a hindrance for some users, since a single quote character within such a name can be a perfectly legitimate use case.
There has always been a workaround:  to not use the standard check of MULTIPART_STRICT_ERROR that is included with modsecurity.conf-recommended, but instead use an equivalent check that excludes testing of MULTIPART_INVALID_QUOTING.  Not only is the workaround somewhat inconvenient, doing that also means abandoning testing for constructs like: name='abc', which is invalid.
I have carefully examined the Apache HTTP Server code at issue and determined that it is safe to loosen this restriction.  With this pull request, ModSecurity will no longer raise the 'Invalid Quoting' condition on encountering a single quote within the 'name' or 'filename' as long as the entire value is encapsulated in double quotes.
The following will no longer result in 'Invalid Quoting':
name=""ab'cd""

The following will continue to result in 'Invalid Quoting':
name='abcd'
name=ab'cd

The equivalent change for ModSecurity v3 will follow.","The parsing of multipart parts in Apache HTTP Server is quite permissive.  So much so that a serious issue was identified nearly 10 years ago whereby an attacker could use single quotes to bypass many rules by exploiting parsing differences between Apache and ModSecurity.
One reference to this is located here:
https://blog.ivanristic.com/2012/06/modsecurity-and-modsecurity-core-rule-set-multipart-bypasses.html
In response, ModSecurity was updated to always set the 'Invalid Quoting' flag if a single quote appears anywhere in the 'name' or 'filename' value of the Content-Disposition header of a multipart part ( #460 ).
This has been a hindrance for some users, since a single quote character within such a name can be a perfectly legitimate use case.
There has always been a workaround:  to not use the standard check of MULTIPART_STRICT_ERROR that is included with modsecurity.conf-recommended, but instead use an equivalent check that excludes testing of MULTIPART_INVALID_QUOTING.  Not only is the workaround somewhat inconvenient, doing that also means abandoning testing for constructs like: name='abc', which is invalid.
I have carefully examined the Apache HTTP Server code at issue and determined that it is safe to loosen this restriction.  With this pull request, ModSecurity will no longer raise the 'Invalid Quoting' condition on encountering a single quote within the 'name' or 'filename' as long as the entire value is encapsulated in double quotes.
The following will no longer result in 'Invalid Quoting':
name=""ab'cd""

The following will continue to result in 'Invalid Quoting':
name='abcd'
name=ab'cd

The equivalent change for ModSecurity v3 will follow.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2616,2021-09-02T18:26:37Z,2021-12-22T19:02:08Z,2021-12-22T19:42:49Z,CLOSED,False,56,4,3,https://github.com/martinhsv,Multipart names may include single quote if double-quote enclosed,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2616,https://github.com/martinhsv,2,https://github.com/SpiderLabs/ModSecurity/pull/2616#issuecomment-999798248,"The parsing of multipart parts in Apache HTTP Server is quite permissive.  So much so that a serious issue was identified nearly 10 years ago whereby an attacker could use single quotes to bypass many rules by exploiting parsing differences between Apache and ModSecurity.
One reference to this is located here:
https://blog.ivanristic.com/2012/06/modsecurity-and-modsecurity-core-rule-set-multipart-bypasses.html
In response, ModSecurity was updated to always set the 'Invalid Quoting' flag if a single quote appears anywhere in the 'name' or 'filename' value of the Content-Disposition header of a multipart part ( #460 ).
This has been a hindrance for some users, since a single quote character within such a name can be a perfectly legitimate use case.
There has always been a workaround:  to not use the standard check of MULTIPART_STRICT_ERROR that is included with modsecurity.conf-recommended, but instead use an equivalent check that excludes testing of MULTIPART_INVALID_QUOTING.  Not only is the workaround somewhat inconvenient, doing that also means abandoning testing for constructs like: name='abc', which is invalid.
I have carefully examined the Apache HTTP Server code at issue and determined that it is safe to loosen this restriction.  With this pull request, ModSecurity will no longer raise the 'Invalid Quoting' condition on encountering a single quote within the 'name' or 'filename' as long as the entire value is encapsulated in double quotes.
The following will no longer result in 'Invalid Quoting':
name=""ab'cd""

The following will continue to result in 'Invalid Quoting':
name='abcd'
name=ab'cd

The equivalent change for ModSecurity v3 will follow.",Closing since it is no longer directly merge-able. Replaced by #2660,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2619,2021-09-10T05:22:14Z,2021-09-15T14:10:00Z,2021-09-16T13:24:06Z,CLOSED,False,20,0,2,https://github.com/rahulgargmit,Get client public ip address in json audit log,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2619,https://github.com/rahulgargmit,1,https://github.com/SpiderLabs/ModSecurity/pull/2619,"When Modsecurity running behind a proxy that send X-Forwarded-For header(for example load balancer), current remoteip module is broken. it's not able to get client public ip.
To get client public ip in v3, i removed remoteip module and added a new variable ""client_public_ip"" in audit log json, which have value sent by 'X-Forwarded-For' header.
Got the idea to remove remoteip module from here
#756 (comment)
My setup is

Modsecurity in a docker behind load balancer
Removed remoteip module and it's recommended config from apache
JSON logs with HTTPS type
SecAuditLogType HTTPS
SecAuditLog ""http://127.0.0.1:8042/post/waflog""
SecAuditLogFormat JSON","When Modsecurity running behind a proxy that send X-Forwarded-For header(for example load balancer), current remoteip module is broken. it's not able to get client public ip.
To get client public ip in v3, i removed remoteip module and added a new variable ""client_public_ip"" in audit log json, which have value sent by 'X-Forwarded-For' header.
Got the idea to remove remoteip module from here
#756 (comment)
My setup is

Modsecurity in a docker behind load balancer
Removed remoteip module and it's recommended config from apache
JSON logs with HTTPS type
SecAuditLogType HTTPS
SecAuditLog ""http://127.0.0.1:8042/post/waflog""
SecAuditLogFormat JSON",True,{'THUMBS_UP': ['https://github.com/877509395']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2619,2021-09-10T05:22:14Z,2021-09-15T14:10:00Z,2021-09-16T13:24:06Z,CLOSED,False,20,0,2,https://github.com/rahulgargmit,Get client public ip address in json audit log,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2619,https://github.com/877509395,2,https://github.com/SpiderLabs/ModSecurity/pull/2619#issuecomment-919846148,"When Modsecurity running behind a proxy that send X-Forwarded-For header(for example load balancer), current remoteip module is broken. it's not able to get client public ip.
To get client public ip in v3, i removed remoteip module and added a new variable ""client_public_ip"" in audit log json, which have value sent by 'X-Forwarded-For' header.
Got the idea to remove remoteip module from here
#756 (comment)
My setup is

Modsecurity in a docker behind load balancer
Removed remoteip module and it's recommended config from apache
JSON logs with HTTPS type
SecAuditLogType HTTPS
SecAuditLog ""http://127.0.0.1:8042/post/waflog""
SecAuditLogFormat JSON","if modsecurity running behind a proxy, REMOTE_ADDR is invalid, So all remote_addr related rule is invalid",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2619,2021-09-10T05:22:14Z,2021-09-15T14:10:00Z,2021-09-16T13:24:06Z,CLOSED,False,20,0,2,https://github.com/rahulgargmit,Get client public ip address in json audit log,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2619,https://github.com/877509395,3,https://github.com/SpiderLabs/ModSecurity/pull/2619#issuecomment-919847572,"When Modsecurity running behind a proxy that send X-Forwarded-For header(for example load balancer), current remoteip module is broken. it's not able to get client public ip.
To get client public ip in v3, i removed remoteip module and added a new variable ""client_public_ip"" in audit log json, which have value sent by 'X-Forwarded-For' header.
Got the idea to remove remoteip module from here
#756 (comment)
My setup is

Modsecurity in a docker behind load balancer
Removed remoteip module and it's recommended config from apache
JSON logs with HTTPS type
SecAuditLogType HTTPS
SecAuditLog ""http://127.0.0.1:8042/post/waflog""
SecAuditLogFormat JSON",you help me a lot.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2619,2021-09-10T05:22:14Z,2021-09-15T14:10:00Z,2021-09-16T13:24:06Z,CLOSED,False,20,0,2,https://github.com/rahulgargmit,Get client public ip address in json audit log,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2619,https://github.com/martinhsv,4,https://github.com/SpiderLabs/ModSecurity/pull/2619#issuecomment-919960449,"When Modsecurity running behind a proxy that send X-Forwarded-For header(for example load balancer), current remoteip module is broken. it's not able to get client public ip.
To get client public ip in v3, i removed remoteip module and added a new variable ""client_public_ip"" in audit log json, which have value sent by 'X-Forwarded-For' header.
Got the idea to remove remoteip module from here
#756 (comment)
My setup is

Modsecurity in a docker behind load balancer
Removed remoteip module and it's recommended config from apache
JSON logs with HTTPS type
SecAuditLogType HTTPS
SecAuditLog ""http://127.0.0.1:8042/post/waflog""
SecAuditLogFormat JSON","The motivation here is laudable, but I would lean away from adding this sort of logic to the ModSecurity engine.  I'll list some reasons:


'X-Forwarded-For' is only one of the header names that may be used for this type of functionality.  While 'X-Forwarded-For' is the most commonly used in my experience, for a general-purpose tool like ModSecurity to only focus on one of them in populating something called CLIENT_IP has the potential to create confusion.


'X-Forwarded-For' can be spoofed.  Take an ordinary deployment where there is no load balancer or anything else between the untrusted internet and ModSecurity.  A malicious user can simply input anything desired into the 'X-Forwarded-For' header and send the request.  In this case, if ModSecurity reports that maliciously-composed content as something called 'CLIENT_IP', I would regard that as quite misleading.  This would be easy for the ModSecurity user to misunderstand or misinterpret ... and this would be a particularly unfortunate misunderstanding in security software.


'X-Forwarded-For' can have a set of IP addresses.  For example, this is a properly formatted header:


X-Forwarded-For: 192.168.66.67, 192.168.66.68, 192.168.66.69

The pull request here does not attempt to parse these and will simply record the entire header value as 'CLIENT_IP'.  Parsing could be added to the code, of course, but it increases the complications.  See also the next point.

The last of the IP addresses in the string should ordinarily be the original IP address.  However because of the spoofing problem (point 2 above), the load balancer (or whatever is at the edge of trusted network) would need to be configured to first strip off any 'X-Forwarded-For' content that it received before populating the header that it passes on.

All told, I think the ModSecurity engine is not really the right place to add this functionality.
On the other hand, populating a transaction variable based on content extracted from headers can already be done using rules -- and this gives the ModSecurity admin to tailor the functionality to the environment being protected.
I'll leave this open for now to give others opportunity to comment.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2619,2021-09-10T05:22:14Z,2021-09-15T14:10:00Z,2021-09-16T13:24:06Z,CLOSED,False,20,0,2,https://github.com/rahulgargmit,Get client public ip address in json audit log,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2619,https://github.com/rahulgargmit,5,https://github.com/SpiderLabs/ModSecurity/pull/2619#issuecomment-919967286,"When Modsecurity running behind a proxy that send X-Forwarded-For header(for example load balancer), current remoteip module is broken. it's not able to get client public ip.
To get client public ip in v3, i removed remoteip module and added a new variable ""client_public_ip"" in audit log json, which have value sent by 'X-Forwarded-For' header.
Got the idea to remove remoteip module from here
#756 (comment)
My setup is

Modsecurity in a docker behind load balancer
Removed remoteip module and it's recommended config from apache
JSON logs with HTTPS type
SecAuditLogType HTTPS
SecAuditLog ""http://127.0.0.1:8042/post/waflog""
SecAuditLogFormat JSON","@martinhsv Purpose is not to overwrite current CLIENT_IP or REMOTE_IP, it's just to add one more parameter in json, which can provide value of X-Forwarded-For header.
We can change parameter name to ""x-forwarded-for"", instead of ""client_public_ip"".
There is another parameter in json ""cleint_ip"", that'll remain same.
It's up to users then, if they wish to use value provided in ""x-forwarded-for"" or keep using ""client_ip"".
Its needed because currently there is no way to get client's public ip when modsecurity behind proxy. Please let me know if there is one.i already tried apache remoteip module.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2619,2021-09-10T05:22:14Z,2021-09-15T14:10:00Z,2021-09-16T13:24:06Z,CLOSED,False,20,0,2,https://github.com/rahulgargmit,Get client public ip address in json audit log,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2619,https://github.com/877509395,6,https://github.com/SpiderLabs/ModSecurity/pull/2619#issuecomment-919972707,"When Modsecurity running behind a proxy that send X-Forwarded-For header(for example load balancer), current remoteip module is broken. it's not able to get client public ip.
To get client public ip in v3, i removed remoteip module and added a new variable ""client_public_ip"" in audit log json, which have value sent by 'X-Forwarded-For' header.
Got the idea to remove remoteip module from here
#756 (comment)
My setup is

Modsecurity in a docker behind load balancer
Removed remoteip module and it's recommended config from apache
JSON logs with HTTPS type
SecAuditLogType HTTPS
SecAuditLog ""http://127.0.0.1:8042/post/waflog""
SecAuditLogFormat JSON","Just wonder if client public IP is really needed behind load balance, How should I get it ?
…
------------------&nbsp;原始邮件&nbsp;------------------
发件人:                                                                                                                        ""SpiderLabs/ModSecurity""                                                                                    ***@***.***&gt;;
发送时间:&nbsp;2021年9月15日(星期三) 晚上8:17
***@***.***&gt;;
***@***.******@***.***&gt;;
主题:&nbsp;Re: [SpiderLabs/ModSecurity] Get client public ip address in json audit log (#2619)






@martinhsv Purpose is not to overwrite current CLIENT_IP or REMOTE_IP, it's just to add one more parameter in json, which can provide value of X-Forwarded-For header.
 We can change parameter name to ""x-forwarded-for"", instead of ""client_public_ip"".
 There is another parameter in json ""cleint_ip"", that'll remain same.

—
You are receiving this because you commented.
Reply to this email directly, view it on GitHub, or unsubscribe.
Triage notifications on the go with GitHub Mobile for iOS or Android.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2619,2021-09-10T05:22:14Z,2021-09-15T14:10:00Z,2021-09-16T13:24:06Z,CLOSED,False,20,0,2,https://github.com/rahulgargmit,Get client public ip address in json audit log,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2619,https://github.com/rahulgargmit,7,https://github.com/SpiderLabs/ModSecurity/pull/2619#issuecomment-919979935,"When Modsecurity running behind a proxy that send X-Forwarded-For header(for example load balancer), current remoteip module is broken. it's not able to get client public ip.
To get client public ip in v3, i removed remoteip module and added a new variable ""client_public_ip"" in audit log json, which have value sent by 'X-Forwarded-For' header.
Got the idea to remove remoteip module from here
#756 (comment)
My setup is

Modsecurity in a docker behind load balancer
Removed remoteip module and it's recommended config from apache
JSON logs with HTTPS type
SecAuditLogType HTTPS
SecAuditLog ""http://127.0.0.1:8042/post/waflog""
SecAuditLogFormat JSON","Just wonder if client public IP is really needed behind load balance, How should I get it ?
…
------------------ 原始邮件 ------------------ 发件人: ""SpiderLabs/ModSecurity"" @.>; 发送时间: 2021年9月15日(星期三) 晚上8:17 @.>; @.@.>; 主题: Re: [SpiderLabs/ModSecurity] Get client public ip address in json audit log (#2619) @martinhsv Purpose is not to overwrite current CLIENT_IP or REMOTE_IP, it's just to add one more parameter in json, which can provide value of X-Forwarded-For header. We can change parameter name to ""x-forwarded-for"", instead of ""client_public_ip"". There is another parameter in json ""cleint_ip"", that'll remain same. — You are receiving this because you commented. Reply to this email directly, view it on GitHub, or unsubscribe. Triage notifications on the go with GitHub Mobile for iOS or Android.

There can be different reasons why they need clientip, in our scenario, we are sending audit log to another application, which use clientip to get geolocaiton.
I added some code in this PR about how we can get clientip, please see code changes in commit.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2619,2021-09-10T05:22:14Z,2021-09-15T14:10:00Z,2021-09-16T13:24:06Z,CLOSED,False,20,0,2,https://github.com/rahulgargmit,Get client public ip address in json audit log,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2619,https://github.com/macrokernel,8,https://github.com/SpiderLabs/ModSecurity/pull/2619#issuecomment-919983763,"When Modsecurity running behind a proxy that send X-Forwarded-For header(for example load balancer), current remoteip module is broken. it's not able to get client public ip.
To get client public ip in v3, i removed remoteip module and added a new variable ""client_public_ip"" in audit log json, which have value sent by 'X-Forwarded-For' header.
Got the idea to remove remoteip module from here
#756 (comment)
My setup is

Modsecurity in a docker behind load balancer
Removed remoteip module and it's recommended config from apache
JSON logs with HTTPS type
SecAuditLogType HTTPS
SecAuditLog ""http://127.0.0.1:8042/post/waflog""
SecAuditLogFormat JSON","@martinhsv Purpose is not to overwrite current CLIENT_IP or REMOTE_IP, it's just to add one more parameter in json, which can provide value of X-Forwarded-For header.
We can change parameter name to ""x-forwarded-for"", instead of ""client_public_ip"".

Indeed, it looks like a good idea to rename the parameter to ""x_forwarded_for"" to make it more self-descriptive.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2619,2021-09-10T05:22:14Z,2021-09-15T14:10:00Z,2021-09-16T13:24:06Z,CLOSED,False,20,0,2,https://github.com/rahulgargmit,Get client public ip address in json audit log,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2619,https://github.com/rahulgargmit,9,https://github.com/SpiderLabs/ModSecurity/pull/2619#issuecomment-919988243,"When Modsecurity running behind a proxy that send X-Forwarded-For header(for example load balancer), current remoteip module is broken. it's not able to get client public ip.
To get client public ip in v3, i removed remoteip module and added a new variable ""client_public_ip"" in audit log json, which have value sent by 'X-Forwarded-For' header.
Got the idea to remove remoteip module from here
#756 (comment)
My setup is

Modsecurity in a docker behind load balancer
Removed remoteip module and it's recommended config from apache
JSON logs with HTTPS type
SecAuditLogType HTTPS
SecAuditLog ""http://127.0.0.1:8042/post/waflog""
SecAuditLogFormat JSON","@macrokernel
Renamed parameter from ""client_public_ip"" to ""x_forwarded_for""
We can leave parsing of multiple values, it's user responsibility, we are just adding X-Forwarded-For header value to json parameter.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2619,2021-09-10T05:22:14Z,2021-09-15T14:10:00Z,2021-09-16T13:24:06Z,CLOSED,False,20,0,2,https://github.com/rahulgargmit,Get client public ip address in json audit log,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2619,https://github.com/martinhsv,10,https://github.com/SpiderLabs/ModSecurity/pull/2619#issuecomment-920013947,"When Modsecurity running behind a proxy that send X-Forwarded-For header(for example load balancer), current remoteip module is broken. it's not able to get client public ip.
To get client public ip in v3, i removed remoteip module and added a new variable ""client_public_ip"" in audit log json, which have value sent by 'X-Forwarded-For' header.
Got the idea to remove remoteip module from here
#756 (comment)
My setup is

Modsecurity in a docker behind load balancer
Removed remoteip module and it's recommended config from apache
JSON logs with HTTPS type
SecAuditLogType HTTPS
SecAuditLog ""http://127.0.0.1:8042/post/waflog""
SecAuditLogFormat JSON","Perhaps I'm misunderstanding something about the perceived need.  But if all you want is to see the content of the X-Forwarded-For header in the JSON-formatted audit log, it's already present where request headers are shown:
{""transaction"":{...,""request"":{""method"":""GET"",""http_version"":1.1, ... ,""headers"":{""Host"":""localhost"",""X-Forwarded-For"":""192.168.66.66"",""Content-Length"":""0""} ...",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2619,2021-09-10T05:22:14Z,2021-09-15T14:10:00Z,2021-09-16T13:24:06Z,CLOSED,False,20,0,2,https://github.com/rahulgargmit,Get client public ip address in json audit log,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2619,https://github.com/rahulgargmit,11,https://github.com/SpiderLabs/ModSecurity/pull/2619#issuecomment-920052478,"When Modsecurity running behind a proxy that send X-Forwarded-For header(for example load balancer), current remoteip module is broken. it's not able to get client public ip.
To get client public ip in v3, i removed remoteip module and added a new variable ""client_public_ip"" in audit log json, which have value sent by 'X-Forwarded-For' header.
Got the idea to remove remoteip module from here
#756 (comment)
My setup is

Modsecurity in a docker behind load balancer
Removed remoteip module and it's recommended config from apache
JSON logs with HTTPS type
SecAuditLogType HTTPS
SecAuditLog ""http://127.0.0.1:8042/post/waflog""
SecAuditLogFormat JSON","@martinhsv
Yes, you are correct
we never got this header in json because of mod remoteip used
""RemoteIPHeader X-Forwarded-For""
as given here
#756 (comment)
After removing mod remoteip, i can see X-Forwarded-For header in json.
Thanks",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2619,2021-09-10T05:22:14Z,2021-09-15T14:10:00Z,2021-09-16T13:24:06Z,CLOSED,False,20,0,2,https://github.com/rahulgargmit,Get client public ip address in json audit log,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2619,https://github.com/877509395,12,https://github.com/SpiderLabs/ModSecurity/pull/2619#issuecomment-920551853,"When Modsecurity running behind a proxy that send X-Forwarded-For header(for example load balancer), current remoteip module is broken. it's not able to get client public ip.
To get client public ip in v3, i removed remoteip module and added a new variable ""client_public_ip"" in audit log json, which have value sent by 'X-Forwarded-For' header.
Got the idea to remove remoteip module from here
#756 (comment)
My setup is

Modsecurity in a docker behind load balancer
Removed remoteip module and it's recommended config from apache
JSON logs with HTTPS type
SecAuditLogType HTTPS
SecAuditLog ""http://127.0.0.1:8042/post/waflog""
SecAuditLogFormat JSON","Want to configure black/white list behind load balance based on client IP address,

Add  X_FORWARDED_FOR_CLIENT_IP;
Add rule something like
SecRule  X_FORWARDED_FOR_CLIENT_IP ""@ipMatchFromFile blacklist.data"" ""chain,phase:1,deny,log,tag:blacklist,msg:blackmember,status:403,id:2700000""

How about this procedure? any suggestion ?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2620,2021-09-13T18:19:34Z,,2022-03-27T00:41:59Z,OPEN,False,63,0,2,https://github.com/pr4u4t, Transaction pull style API to retrieve variable value,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2620,https://github.com/pr4u4t,1,https://github.com/SpiderLabs/ModSecurity/pull/2620,This function enables pulling variables values from Transaction in bindings fg. Lua (openresty). This is also modern approach for pull style API.,This function enables pulling variables values from Transaction in bindings fg. Lua (openresty). This is also modern approach for pull style API.,True,{'THUMBS_UP': ['https://github.com/fl0ppy-d1sk']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2621,2021-09-17T01:34:54Z,2021-09-17T01:36:33Z,2021-09-17T01:36:33Z,CLOSED,False,16,6,3,https://github.com/877509395,Typofix,4,[],https://github.com/SpiderLabs/ModSecurity/pull/2621,https://github.com/877509395,1,https://github.com/SpiderLabs/ModSecurity/pull/2621,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2622,2021-09-17T01:39:32Z,2022-04-27T01:40:40Z,2022-04-27T01:40:40Z,CLOSED,False,1,1,1,https://github.com/877509395,typo fix,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2622,https://github.com/877509395,1,https://github.com/SpiderLabs/ModSecurity/pull/2622,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2622,2021-09-17T01:39:32Z,2022-04-27T01:40:40Z,2022-04-27T01:40:40Z,CLOSED,False,1,1,1,https://github.com/877509395,typo fix,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2622,https://github.com/877509395,2,https://github.com/SpiderLabs/ModSecurity/pull/2622#issuecomment-1018180684,,"yes, I&nbsp; will update.
…
------------------&nbsp;原始邮件&nbsp;------------------
发件人:                                                                                                                        ""SpiderLabs/ModSecurity""                                                                                    ***@***.***&gt;;
发送时间:&nbsp;2022年1月20日(星期四) 晚上10:46
***@***.***&gt;;
***@***.******@***.***&gt;;
主题:&nbsp;Re: [SpiderLabs/ModSecurity] typo fix (#2622)






@martinhsv commented on this pull request.

It is reasonable to note the absence of resource in the error message. This pull request, however, would need some correction in order for it to be merged.

First, note that quoting a string by using a backtick character (Ascii 0x60) to begin the quotation and the apostrophe character (Ascii 0x27) to end the quotation is a known pattern in software generally, and it happens to be a very common pattern within the ModSecurity code base.

The problems here:

the pull request would result in mixed usage even within the same message; the first and third words use apostrophe for both opening and closing, while the second uses the backtick-apostrophe method

in a list of three there should be a comma after the first item

in general, since backtick-apostrophe is such a common usage within the ModSecurity code base, I don't see a good reason to change that here; all three words should be quoted with backtick to begin and apostrophe to close

@877509395 : would you like to make the appropriate updates?

—
Reply to this email directly, view it on GitHub, or unsubscribe.
Triage notifications on the go with GitHub Mobile for iOS or Android.
You are receiving this because you were mentioned.Message ID: ***@***.***&gt;",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2622,2021-09-17T01:39:32Z,2022-04-27T01:40:40Z,2022-04-27T01:40:40Z,CLOSED,False,1,1,1,https://github.com/877509395,typo fix,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2622,https://github.com/martinhsv,3,https://github.com/SpiderLabs/ModSecurity/pull/2622#issuecomment-1110439376,,Closing this; actual fix merged via #2732,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2633,2021-10-30T07:11:52Z,2021-10-30T07:12:13Z,2021-10-30T07:12:13Z,CLOSED,False,18,6,3,https://github.com/877509395,Multimatch,4,[],https://github.com/SpiderLabs/ModSecurity/pull/2633,https://github.com/877509395,1,https://github.com/SpiderLabs/ModSecurity/pull/2633,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2634,2021-10-30T07:15:23Z,2021-11-01T01:57:55Z,2021-11-01T01:57:55Z,CLOSED,False,3,1,1,https://github.com/877509395,issue.,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2634,https://github.com/877509395,1,https://github.com/SpiderLabs/ModSecurity/pull/2634,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2634,2021-10-30T07:15:23Z,2021-11-01T01:57:55Z,2021-11-01T01:57:55Z,CLOSED,False,3,1,1,https://github.com/877509395,issue.,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2634,https://github.com/877509395,2,https://github.com/SpiderLabs/ModSecurity/pull/2634#issuecomment-955164358,,"So if multimatch is one of actions, correct rule message is not possible.
this is not a pull request. I just want to show issue.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2634,2021-10-30T07:15:23Z,2021-11-01T01:57:55Z,2021-11-01T01:57:55Z,CLOSED,False,3,1,1,https://github.com/877509395,issue.,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2634,https://github.com/877509395,3,https://github.com/SpiderLabs/ModSecurity/pull/2634#issuecomment-955166261,,"https://github.com/coreruleset/coreruleset/blob/v3.4/dev/rules/REQUEST-942-APPLICATION-ATTACK-SQLI.conf
rule 942100
wget www.s.com.cn?a=""a or 1=1""   can trigger audit log with data="""", it should not.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2634,2021-10-30T07:15:23Z,2021-11-01T01:57:55Z,2021-11-01T01:57:55Z,CLOSED,False,3,1,1,https://github.com/877509395,issue.,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2634,https://github.com/martinhsv,4,https://github.com/SpiderLabs/ModSecurity/pull/2634#issuecomment-955573838,,"Hello @877509395 ,
I'm not certain, but it sounds like you are reporting the same thing as this open issue: #2573
Feel free to let me know if I am mistaken.  If so, could you then also describe how your use case is different from that other issue.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2634,2021-10-30T07:15:23Z,2021-11-01T01:57:55Z,2021-11-01T01:57:55Z,CLOSED,False,3,1,1,https://github.com/877509395,issue.,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2634,https://github.com/877509395,5,https://github.com/SpiderLabs/ModSecurity/pull/2634#issuecomment-955856152,,"Yes, they are the same.
…
------------------&nbsp;原始邮件&nbsp;------------------
发件人:                                                                                                                        ""SpiderLabs/ModSecurity""                                                                                    ***@***.***&gt;;
发送时间:&nbsp;2021年10月31日(星期天) 凌晨2:28
***@***.***&gt;;
***@***.******@***.***&gt;;
主题:&nbsp;Re: [SpiderLabs/ModSecurity] issue. (PR #2634)






Hello @877509395 ,

I'm not certain, but it sounds like you are reporting the same thing as this open issue: #2573

Feel free to let me know if I am mistaken.  If so, could you then also describe how your use case is different from that other issue.

—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub, or unsubscribe.
Triage notifications on the go with GitHub Mobile for iOS or Android.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2634,2021-10-30T07:15:23Z,2021-11-01T01:57:55Z,2021-11-01T01:57:55Z,CLOSED,False,3,1,1,https://github.com/877509395,issue.,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2634,https://github.com/877509395,6,https://github.com/SpiderLabs/ModSecurity/pull/2634#issuecomment-955860619,,"not a PR, close.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2635,2021-11-02T07:05:45Z,2021-12-30T16:29:37Z,2021-12-31T15:01:46Z,MERGED,True,3,3,2,https://github.com/Mesar-Ali,Confusing variable name in setRequestBody method,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2635,https://github.com/Mesar-Ali,1,https://github.com/SpiderLabs/ModSecurity/pull/2635,"There are 2 methods, setRequestBody() and setRequestType()
argument variable name is same in both, that is requestType
for better code readability, it should be requestBody for  setRequestBody()","There are 2 methods, setRequestBody() and setRequestType()
argument variable name is same in both, that is requestType
for better code readability, it should be requestBody for  setRequestBody()",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2635,2021-11-02T07:05:45Z,2021-12-30T16:29:37Z,2021-12-31T15:01:46Z,MERGED,True,3,3,2,https://github.com/Mesar-Ali,Confusing variable name in setRequestBody method,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2635,https://github.com/martinhsv,2,https://github.com/SpiderLabs/ModSecurity/pull/2635#issuecomment-1002803152,"There are 2 methods, setRequestBody() and setRequestType()
argument variable name is same in both, that is requestType
for better code readability, it should be requestBody for  setRequestBody()","Hello @Mesar-Ali ,
If we are to make this change, https_client.h should probably also be modified to have the changed name in the function prototype.
Would you like to do that and adjust this pull request?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2635,2021-11-02T07:05:45Z,2021-12-30T16:29:37Z,2021-12-31T15:01:46Z,MERGED,True,3,3,2,https://github.com/Mesar-Ali,Confusing variable name in setRequestBody method,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2635,https://github.com/Mesar-Ali,3,https://github.com/SpiderLabs/ModSecurity/pull/2635#issuecomment-1002857159,"There are 2 methods, setRequestBody() and setRequestType()
argument variable name is same in both, that is requestType
for better code readability, it should be requestBody for  setRequestBody()","Thanks @martinhsv
I added commit for https_client.h file.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2635,2021-11-02T07:05:45Z,2021-12-30T16:29:37Z,2021-12-31T15:01:46Z,MERGED,True,3,3,2,https://github.com/Mesar-Ali,Confusing variable name in setRequestBody method,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2635,https://github.com/martinhsv,4,https://github.com/SpiderLabs/ModSecurity/pull/2635#issuecomment-1003124330,"There are 2 methods, setRequestBody() and setRequestType()
argument variable name is same in both, that is requestType
for better code readability, it should be requestBody for  setRequestBody()",Merged. Thanks @Mesar-Ali,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2635,2021-11-02T07:05:45Z,2021-12-30T16:29:37Z,2021-12-31T15:01:46Z,MERGED,True,3,3,2,https://github.com/Mesar-Ali,Confusing variable name in setRequestBody method,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2635,https://github.com/Mesar-Ali,5,https://github.com/SpiderLabs/ModSecurity/pull/2635#issuecomment-1003249192,"There are 2 methods, setRequestBody() and setRequestType()
argument variable name is same in both, that is requestType
for better code readability, it should be requestBody for  setRequestBody()","@martinhsv Thanks for merging, but info added to release notes looks incorrect here",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2635,2021-11-02T07:05:45Z,2021-12-30T16:29:37Z,2021-12-31T15:01:46Z,MERGED,True,3,3,2,https://github.com/Mesar-Ali,Confusing variable name in setRequestBody method,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2635,https://github.com/martinhsv,6,https://github.com/SpiderLabs/ModSecurity/pull/2635#issuecomment-1003395611,"There are 2 methods, setRequestBody() and setRequestType()
argument variable name is same in both, that is requestType
for better code readability, it should be requestBody for  setRequestBody()","Yes, I realized the error almost immediately and corrected it. Thanks.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2638,2021-11-10T20:43:53Z,2022-01-04T20:23:13Z,2022-01-04T20:23:13Z,CLOSED,False,85,6,5,https://github.com/martinhsv,Fix SecRuleUpdateTargetById for ARGS_*NAMES with regex,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2638,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2638,"This a tentative pull request to close #2627 .
This will not be merged for at least a couple of more weeks (I hope to do some more testing on it), but it is available for anyone who wishes to try it out on an experimental basis.","This a tentative pull request to close #2627 .
This will not be merged for at least a couple of more weeks (I hope to do some more testing on it), but it is available for anyone who wishes to try it out on an experimental basis.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2638,2021-11-10T20:43:53Z,2022-01-04T20:23:13Z,2022-01-04T20:23:13Z,CLOSED,False,85,6,5,https://github.com/martinhsv,Fix SecRuleUpdateTargetById for ARGS_*NAMES with regex,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2638,https://github.com/martinhsv,2,https://github.com/SpiderLabs/ModSecurity/pull/2638#issuecomment-1005143588,"This a tentative pull request to close #2627 .
This will not be merged for at least a couple of more weeks (I hope to do some more testing on it), but it is available for anyone who wishes to try it out on an experimental basis.",Closing in favour of #2667,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2642,2021-11-16T02:54:18Z,2021-11-16T03:28:49Z,2021-11-16T03:28:49Z,MERGED,True,5924,5729,11,https://github.com/martinhsv,Support configurable limit on depth of JSON parsing,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2642,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2642,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2643,2021-11-16T12:45:31Z,2021-12-20T14:07:31Z,2021-12-21T19:07:37Z,CLOSED,False,167,2,3,https://github.com/AirisX,fix using relevant statuses + noauditlog,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2643,https://github.com/AirisX,1,https://github.com/SpiderLabs/ModSecurity/pull/2643,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2643,2021-11-16T12:45:31Z,2021-12-20T14:07:31Z,2021-12-21T19:07:37Z,CLOSED,False,167,2,3,https://github.com/AirisX,fix using relevant statuses + noauditlog,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2643,https://github.com/martinhsv,2,https://github.com/SpiderLabs/ModSecurity/pull/2643#issuecomment-997954992,,Closing for the reasons in the related issue (incuding that this pull request would break DetectionOnly functionality).,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2643,2021-11-16T12:45:31Z,2021-12-20T14:07:31Z,2021-12-21T19:07:37Z,CLOSED,False,167,2,3,https://github.com/AirisX,fix using relevant statuses + noauditlog,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2643,https://github.com/AirisX,3,https://github.com/SpiderLabs/ModSecurity/pull/2643#issuecomment-997980681,,"Hi @martinhsv ,
Why are you sure this PR would break DetectionOnly functionality? In my recent posts here #2637 I have provided example code that preserves this functionality:
if ((m_status == RelevantOnlyAuditLogStatus
        && this->isRelevant(transaction->m_httpCodeReturned) == false
        && transaction->getRuleEngineState() != static_cast<int>(RulesSetProperties::DetectionOnlyRuleEngine)) 
        || saveAnyway == false ) {",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2643,2021-11-16T12:45:31Z,2021-12-20T14:07:31Z,2021-12-21T19:07:37Z,CLOSED,False,167,2,3,https://github.com/AirisX,fix using relevant statuses + noauditlog,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2643,https://github.com/martinhsv,4,https://github.com/SpiderLabs/ModSecurity/pull/2643#issuecomment-998061623,,"But that sample code is not part of this PR.  This PR, as it stands, cannot be merged because it would break functionality.
You are welcome to submit a fresh pull request for consideration along the lines of what I described in #2637.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2643,2021-11-16T12:45:31Z,2021-12-20T14:07:31Z,2021-12-21T19:07:37Z,CLOSED,False,167,2,3,https://github.com/AirisX,fix using relevant statuses + noauditlog,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2643,https://github.com/AirisX,5,https://github.com/SpiderLabs/ModSecurity/pull/2643#issuecomment-998076385,,"I planned to include these lines after the discussion in # 2637.  Ok, I'll open the new PR to include lines above",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2643,2021-11-16T12:45:31Z,2021-12-20T14:07:31Z,2021-12-21T19:07:37Z,CLOSED,False,167,2,3,https://github.com/AirisX,fix using relevant statuses + noauditlog,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2643,https://github.com/877509395,6,https://github.com/SpiderLabs/ModSecurity/pull/2643#issuecomment-998690940,,"hi,


Seems below command not supported by ModSecurity. Even if a small /file/path/file-name&nbsp;


curl -F ""filename=@/file/path/file-name""&nbsp; www.test5.com


modsecurity create two transactions for this request, I think it should not, it should be one request one transaction.&nbsp;


mod version: 3.0.6
mod-nginx-connector: 1.0.2
core-rule-set:&nbsp;3.4.0


Below json will be triggerred.&nbsp; &nbsp;
{
&nbsp;&nbsp;&nbsp;&nbsp;""source"":""modsecurity"",
&nbsp;&nbsp;&nbsp;&nbsp;""type"":""attack"",
&nbsp;&nbsp;&nbsp;&nbsp;""mId"":""104617fcd945_172.18.0.2"",
&nbsp;&nbsp;&nbsp;&nbsp;""client_ip"":""172.18.0.1"",
&nbsp;&nbsp;&nbsp;&nbsp;""time_stamp"":""Tue&nbsp;Dec&nbsp;21&nbsp;10:42:54&nbsp;2021"",
&nbsp;&nbsp;&nbsp;&nbsp;""server_id"":""cc57a40222759adedd87fbb5e0f450fd4d103a60"",
&nbsp;&nbsp;&nbsp;&nbsp;""version"":""commit&nbsp;85b176b5e39d513985e3455f908688e525bfe061"",
&nbsp;&nbsp;&nbsp;&nbsp;""client_port"":58302,
&nbsp;&nbsp;&nbsp;&nbsp;""host_ip"":""172.18.0.2"",
&nbsp;&nbsp;&nbsp;&nbsp;""host_port"":80,
&nbsp;&nbsp;&nbsp;&nbsp;""unique_id"":""1640083374"",
&nbsp;&nbsp;&nbsp;&nbsp;""http_version"":1.1,
&nbsp;&nbsp;&nbsp;&nbsp;""uri"":""/"",
&nbsp;&nbsp;&nbsp;&nbsp;""http_code"":403,
&nbsp;&nbsp;&nbsp;&nbsp;""server_name"":""www.test5.com"",
&nbsp;&nbsp;&nbsp;&nbsp;""method"":""GET"",
&nbsp;&nbsp;&nbsp;&nbsp;""request"":{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;""body"":"""",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;""headers"":{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;""Host"":""www.test5.com"",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;""User-Agent"":""curl/7.80.0"",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;""Accept"":""*/*"",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;""Content-Length"":""348"",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;""Content-Type"":""multipart/form-data;&nbsp;boundary=------------------------34484de1b7a90294""
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;&nbsp;""response"":{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;""body"":"""",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;""http_code"":403,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;""headers"":{

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;&nbsp;""messages"":[
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;""attackName"":""GET&nbsp;or&nbsp;HEAD&nbsp;Request&nbsp;with&nbsp;Body&nbsp;Content"",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;""details"":{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;""match"":""Matched&nbsp;\""Operator&nbsp;`Rx'&nbsp;with&nbsp;parameter&nbsp;`^0?$'&nbsp;against&nbsp;variable&nbsp;`REQUEST_HEADERS:Content-Length'&nbsp;(Value:&nbsp;`348'&nbsp;)"",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;""reference"":""o0,3v0,3v87,3"",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;""ruleId"":""920170"",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;""data"":""348"",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;""severity"":""2"",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;""action"":""block&nbsp;and&nbsp;log"",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;""attackClass"":""PROTOCOL""
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;]
}












huiming









Message ID: ***@***.***&gt;",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2643,2021-11-16T12:45:31Z,2021-12-20T14:07:31Z,2021-12-21T19:07:37Z,CLOSED,False,167,2,3,https://github.com/AirisX,fix using relevant statuses + noauditlog,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2643,https://github.com/martinhsv,7,https://github.com/SpiderLabs/ModSecurity/pull/2643#issuecomment-999024621,,"Hello @877509395 ,
I would encourage you to not post unrelated content into PRs or issues.  Since such issues and PRs persist, it's helpful if each PR or issue only contains postings relevant to it.
Regarding your assertion, if you think you have identified some anomaly certainly feel free to open an issue for it. In this case, however, I would suggest more investigation on your part would be in order. You state that 'modsecurity create two transactions for this request'. That is unlikely. If a second transaction is being processed, it is much more likely that it is being created some other way such as through nginx configuration that includes error redirects. See for example SpiderLabs/ModSecurity-nginx#152 (comment)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2644,2021-11-19T01:48:48Z,2021-11-19T01:49:28Z,2021-11-26T09:57:53Z,MERGED,True,135,2,6,https://github.com/martinhsv,Support configurable limit on depth of JSON parsing,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2644,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2644,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2644,2021-11-19T01:48:48Z,2021-11-19T01:49:28Z,2021-11-26T09:57:53Z,MERGED,True,135,2,6,https://github.com/martinhsv,Support configurable limit on depth of JSON parsing,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2644,https://github.com/877509395,2,https://github.com/SpiderLabs/ModSecurity/pull/2644#issuecomment-975432021,,"Why this limit? does it cause Practical problems?
memory should only be the limit, depth should not. i think",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2644,2021-11-19T01:48:48Z,2021-11-19T01:49:28Z,2021-11-26T09:57:53Z,MERGED,True,135,2,6,https://github.com/martinhsv,Support configurable limit on depth of JSON parsing,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2644,https://github.com/martinhsv,3,https://github.com/SpiderLabs/ModSecurity/pull/2644#issuecomment-975550505,,Additional information will be posted later today.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2644,2021-11-19T01:48:48Z,2021-11-19T01:49:28Z,2021-11-26T09:57:53Z,MERGED,True,135,2,6,https://github.com/martinhsv,Support configurable limit on depth of JSON parsing,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2644,https://github.com/877509395,4,https://github.com/SpiderLabs/ModSecurity/pull/2644#issuecomment-976078715,,"with malicious  input, the yajl parser can be very deep (big depth),  So cause DOS. right?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2644,2021-11-19T01:48:48Z,2021-11-19T01:49:28Z,2021-11-26T09:57:53Z,MERGED,True,135,2,6,https://github.com/martinhsv,Support configurable limit on depth of JSON parsing,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2644,https://github.com/877509395,5,https://github.com/SpiderLabs/ModSecurity/pull/2644#issuecomment-979838838,,Where can i found POC for for this Dos?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2656,2021-12-21T15:27:38Z,2021-12-22T15:54:25Z,2021-12-22T15:54:25Z,MERGED,True,7,0,2,https://github.com/martinhsv,Add SecRequestBodyJsonDepthLimit to modsecurity.conf-recommended,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2656,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2656,,,True,{'THUMBS_UP': ['https://github.com/airween']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2657,2021-12-21T16:10:01Z,2021-12-22T15:16:00Z,2021-12-22T15:16:00Z,MERGED,True,7,0,2,https://github.com/martinhsv,Add SecRequestBodyJsonDepthLimit to modsecurity.conf-recommended,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2657,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2657,,,True,{'THUMBS_UP': ['https://github.com/airween']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2660,2021-12-22T19:06:52Z,2021-12-22T19:23:33Z,2021-12-22T19:23:33Z,MERGED,True,52,4,3,https://github.com/martinhsv,Multipart names may include single quote if double-quote enclosed,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2660,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2660,"The parsing of multipart parts in Apache HTTP Server is quite permissive. So much so that a serious issue was identified nearly 10 years ago whereby an attacker could use single quotes to bypass many rules by exploiting parsing differences between Apache and ModSecurity.
One reference to this is located here:
https://blog.ivanristic.com/2012/06/modsecurity-and-modsecurity-core-rule-set-multipart-bypasses.html
In response, ModSecurity was updated to always set the 'Invalid Quoting' flag if a single quote appears anywhere in the 'name' or 'filename' value of the Content-Disposition header of a multipart part ( #460 ).
This has been a hindrance for some users, since a single quote character within such a name can be a perfectly legitimate use case.
There has always been a workaround: to not use the standard check of MULTIPART_STRICT_ERROR that is included with modsecurity.conf-recommended, but instead use an equivalent check that excludes testing of MULTIPART_INVALID_QUOTING. Not only is the workaround somewhat inconvenient, doing that also means abandoning testing for constructs like: name='abc', which is invalid.
I have carefully examined the Apache HTTP Server code at issue and determined that it is safe to loosen this restriction. With this pull request, ModSecurity will no longer raise the 'Invalid Quoting' condition on encountering a single quote within the 'name' or 'filename' as long as the entire value is encapsulated in double quotes.
The following will no longer result in 'Invalid Quoting':
name=""ab'cd""

The following will continue to result in 'Invalid Quoting':
name='abcd'
name=ab'cd

The equivalent change for ModSecurity v3 will follow.","The parsing of multipart parts in Apache HTTP Server is quite permissive. So much so that a serious issue was identified nearly 10 years ago whereby an attacker could use single quotes to bypass many rules by exploiting parsing differences between Apache and ModSecurity.
One reference to this is located here:
https://blog.ivanristic.com/2012/06/modsecurity-and-modsecurity-core-rule-set-multipart-bypasses.html
In response, ModSecurity was updated to always set the 'Invalid Quoting' flag if a single quote appears anywhere in the 'name' or 'filename' value of the Content-Disposition header of a multipart part ( #460 ).
This has been a hindrance for some users, since a single quote character within such a name can be a perfectly legitimate use case.
There has always been a workaround: to not use the standard check of MULTIPART_STRICT_ERROR that is included with modsecurity.conf-recommended, but instead use an equivalent check that excludes testing of MULTIPART_INVALID_QUOTING. Not only is the workaround somewhat inconvenient, doing that also means abandoning testing for constructs like: name='abc', which is invalid.
I have carefully examined the Apache HTTP Server code at issue and determined that it is safe to loosen this restriction. With this pull request, ModSecurity will no longer raise the 'Invalid Quoting' condition on encountering a single quote within the 'name' or 'filename' as long as the entire value is encapsulated in double quotes.
The following will no longer result in 'Invalid Quoting':
name=""ab'cd""

The following will continue to result in 'Invalid Quoting':
name='abcd'
name=ab'cd

The equivalent change for ModSecurity v3 will follow.",True,"{'THUMBS_UP': ['https://github.com/airween', 'https://github.com/lifeforms']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2661,2021-12-23T16:42:56Z,2021-12-23T17:37:11Z,2022-01-13T13:28:28Z,MERGED,True,134,5,4,https://github.com/martinhsv,Multipart names may include single quote if double-quote enclosed,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2661,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2661,"This pull request reduces the set of use cases that result in 'Invalid Quoting' being flagged during multipart parsing of the Content-Disposition's 'name' or 'filename'.
The following will no longer result in 'Invalid Quoting':
name=""ab'cd""

The following will continue to result in 'Invalid Quoting':
name='abcd'
name=ab'cd

This change matches recent updates done in v2, see that pull request for more detail:
#2660","This pull request reduces the set of use cases that result in 'Invalid Quoting' being flagged during multipart parsing of the Content-Disposition's 'name' or 'filename'.
The following will no longer result in 'Invalid Quoting':
name=""ab'cd""

The following will continue to result in 'Invalid Quoting':
name='abcd'
name=ab'cd

This change matches recent updates done in v2, see that pull request for more detail:
#2660",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2661,2021-12-23T16:42:56Z,2021-12-23T17:37:11Z,2022-01-13T13:28:28Z,MERGED,True,134,5,4,https://github.com/martinhsv,Multipart names may include single quote if double-quote enclosed,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2661,https://github.com/binhjy,2,https://github.com/SpiderLabs/ModSecurity/pull/2661#issuecomment-1007212522,"This pull request reduces the set of use cases that result in 'Invalid Quoting' being flagged during multipart parsing of the Content-Disposition's 'name' or 'filename'.
The following will no longer result in 'Invalid Quoting':
name=""ab'cd""

The following will continue to result in 'Invalid Quoting':
name='abcd'
name=ab'cd

This change matches recent updates done in v2, see that pull request for more detail:
#2660","Hi @martinhsv , this fix will be on which release? Thanks",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2661,2021-12-23T16:42:56Z,2021-12-23T17:37:11Z,2022-01-13T13:28:28Z,MERGED,True,134,5,4,https://github.com/martinhsv,Multipart names may include single quote if double-quote enclosed,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2661,https://github.com/martinhsv,3,https://github.com/SpiderLabs/ModSecurity/pull/2661#issuecomment-1007421735,"This pull request reduces the set of use cases that result in 'Invalid Quoting' being flagged during multipart parsing of the Content-Disposition's 'name' or 'filename'.
The following will no longer result in 'Invalid Quoting':
name=""ab'cd""

The following will continue to result in 'Invalid Quoting':
name='abcd'
name=ab'cd

This change matches recent updates done in v2, see that pull request for more detail:
#2660",It will be included automatically in the next official release in each of v2.9.x and v3.0.x. But it is available immediately for anyone who clones from github and builds ModSecurity themselves.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2661,2021-12-23T16:42:56Z,2021-12-23T17:37:11Z,2022-01-13T13:28:28Z,MERGED,True,134,5,4,https://github.com/martinhsv,Multipart names may include single quote if double-quote enclosed,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2661,https://github.com/binhjy,4,https://github.com/SpiderLabs/ModSecurity/pull/2661#issuecomment-1011774008,"This pull request reduces the set of use cases that result in 'Invalid Quoting' being flagged during multipart parsing of the Content-Disposition's 'name' or 'filename'.
The following will no longer result in 'Invalid Quoting':
name=""ab'cd""

The following will continue to result in 'Invalid Quoting':
name='abcd'
name=ab'cd

This change matches recent updates done in v2, see that pull request for more detail:
#2660","Hi @martinhsv , can you double check also with this rule SecRule FILES_NAMES|FILES: https://github.com/coreruleset/coreruleset/blob/v3.0.2/rules/REQUEST-920-PROTOCOL-ENFORCEMENT.conf#L100 (pls change the branch)? Will the name=""ab'cd"" passes this rule?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2661,2021-12-23T16:42:56Z,2021-12-23T17:37:11Z,2022-01-13T13:28:28Z,MERGED,True,134,5,4,https://github.com/martinhsv,Multipart names may include single quote if double-quote enclosed,1,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2661,https://github.com/martinhsv,5,https://github.com/SpiderLabs/ModSecurity/pull/2661#issuecomment-1012136539,"This pull request reduces the set of use cases that result in 'Invalid Quoting' being flagged during multipart parsing of the Content-Disposition's 'name' or 'filename'.
The following will no longer result in 'Invalid Quoting':
name=""ab'cd""

The following will continue to result in 'Invalid Quoting':
name='abcd'
name=ab'cd

This change matches recent updates done in v2, see that pull request for more detail:
#2660","Hello @binhjy ,
The coreruleset is managed by a separate group. If you have questions about the specific behaviour of individual rules, you should contact them directly.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2663,2021-12-29T15:03:10Z,2021-12-29T15:03:45Z,2022-01-10T17:41:51Z,MERGED,True,8,4,2,https://github.com/martinhsv,Fix memory leak that occurs on JSON parsing error,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2663,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2663,"Replacement for #2236 since that was no longer mergeable.
Thanks @argenet and @vloup.","Replacement for #2236 since that was no longer mergeable.
Thanks @argenet and @vloup.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2667,2022-01-04T19:55:26Z,2022-01-04T20:41:48Z,2022-01-04T20:41:48Z,MERGED,True,127,5,6,https://github.com/martinhsv,Fix some name handling for ARGS_*NAMES: regex SecRuleUpdateTargetById…,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2667,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2667,"This a pull request to close #2627 and #2648 .
This replaces the earlier (unmerged) pull request #2638. This PR is equivalent to the older one but adds an extra automated test.","This a pull request to close #2627 and #2648 .
This replaces the earlier (unmerged) pull request #2638. This PR is equivalent to the older one but adds an extra automated test.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2673,2022-01-14T17:28:32Z,2022-01-24T19:55:41Z,2022-01-24T19:55:41Z,MERGED,True,112,0,3,https://github.com/martinhsv,"Fix multiMatch msg, etc, population in audit log",1,[],https://github.com/SpiderLabs/ModSecurity/pull/2673,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2673,Closes #2573 .,Closes #2573 .,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2677,2022-01-20T13:26:07Z,2022-01-27T01:13:50Z,2022-01-27T03:10:19Z,MERGED,True,1,1,1,https://github.com/gleydsonsoares,tweak loadFromUri: zap duplicate words in comment,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2677,https://github.com/gleydsonsoares,1,https://github.com/SpiderLabs/ModSecurity/pull/2677,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2677,2022-01-20T13:26:07Z,2022-01-27T01:13:50Z,2022-01-27T03:10:19Z,MERGED,True,1,1,1,https://github.com/gleydsonsoares,tweak loadFromUri: zap duplicate words in comment,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2677,https://github.com/martinhsv,2,https://github.com/SpiderLabs/ModSecurity/pull/2677#issuecomment-1022805116,,Merged. Thanks.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2680,2022-01-26T20:00:47Z,2022-01-26T20:53:54Z,2022-01-26T20:53:54Z,MERGED,True,5049,4840,15,https://github.com/martinhsv,Add ctl:auditengine action support,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2680,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2680,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2681,2022-01-29T18:30:26Z,2022-04-21T16:54:32Z,2022-04-21T16:54:32Z,CLOSED,False,201,0,1,https://github.com/martinhsv,MULTIPART_UNMATCHED_BOUNDARY=1 functionality is broken,3,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2681,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2681,"This pull request is not intended for near-term merging, but rather, to illustrate one of the problems with current v3 functionality for MULTIPART_UNMATCHED_BOUNDARY.
(This pull request is not intended to illustrate cases where either a) the value should be set to '2' but is not or b) the value is incorrectly set to '2' when it should be '0'.)
Rule 200004 as provided in modsecurity.conf-recommended tests:
SecRule MULTIPART_UNMATCHED_BOUNDARY ""@eq 1"" ...

In current v3/master, if there are 'n' apparent boundaries (basically lines beginning with '--'), then if any of the 2nd through n-2-th are non-matches, they will fail to result in MULTIPART_UNMATCHED_BOUNDARY=1.
E.g. if there are a total of 10 apparent boundaries, if any of the 2nd, 3rd, 4th, 5h, 6th, 7th or 8th of them should signal as 'unmatched', MULTIPART_UNMATCHED_BOUNDARY will not get set to 1.
This is illustrated in the 3 new tests in this file. They all fail in current v3/master but they all pass in v3/master as at June 7,2018.","This pull request is not intended for near-term merging, but rather, to illustrate one of the problems with current v3 functionality for MULTIPART_UNMATCHED_BOUNDARY.
(This pull request is not intended to illustrate cases where either a) the value should be set to '2' but is not or b) the value is incorrectly set to '2' when it should be '0'.)
Rule 200004 as provided in modsecurity.conf-recommended tests:
SecRule MULTIPART_UNMATCHED_BOUNDARY ""@eq 1"" ...

In current v3/master, if there are 'n' apparent boundaries (basically lines beginning with '--'), then if any of the 2nd through n-2-th are non-matches, they will fail to result in MULTIPART_UNMATCHED_BOUNDARY=1.
E.g. if there are a total of 10 apparent boundaries, if any of the 2nd, 3rd, 4th, 5h, 6th, 7th or 8th of them should signal as 'unmatched', MULTIPART_UNMATCHED_BOUNDARY will not get set to 1.
This is illustrated in the 3 new tests in this file. They all fail in current v3/master but they all pass in v3/master as at June 7,2018.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2681,2022-01-29T18:30:26Z,2022-04-21T16:54:32Z,2022-04-21T16:54:32Z,CLOSED,False,201,0,1,https://github.com/martinhsv,MULTIPART_UNMATCHED_BOUNDARY=1 functionality is broken,3,['3.x'],https://github.com/SpiderLabs/ModSecurity/pull/2681,https://github.com/airween,2,https://github.com/SpiderLabs/ModSecurity/pull/2681#issuecomment-1026010990,"This pull request is not intended for near-term merging, but rather, to illustrate one of the problems with current v3 functionality for MULTIPART_UNMATCHED_BOUNDARY.
(This pull request is not intended to illustrate cases where either a) the value should be set to '2' but is not or b) the value is incorrectly set to '2' when it should be '0'.)
Rule 200004 as provided in modsecurity.conf-recommended tests:
SecRule MULTIPART_UNMATCHED_BOUNDARY ""@eq 1"" ...

In current v3/master, if there are 'n' apparent boundaries (basically lines beginning with '--'), then if any of the 2nd through n-2-th are non-matches, they will fail to result in MULTIPART_UNMATCHED_BOUNDARY=1.
E.g. if there are a total of 10 apparent boundaries, if any of the 2nd, 3rd, 4th, 5h, 6th, 7th or 8th of them should signal as 'unmatched', MULTIPART_UNMATCHED_BOUNDARY will not get set to 1.
This is illustrated in the 3 new tests in this file. They all fail in current v3/master but they all pass in v3/master as at June 7,2018.","Hi @martinhsv,
thanks for the examples.

This pull request is not intended for near-term merging, but rather, to illustrate one of the problems with current v3 functionality for MULTIPART_UNMATCHED_BOUNDARY.

I've made a quick research about term of ""unmatched multipart boundary"". Unfortunately I found this expression only at ModSecurity, so I'm a bit disappointed, because I don't know the exact meaning of this expression.

(This pull request is not intended to illustrate cases where either a) the value should be set to '2' but is not or b) the value is incorrectly set to '2' when it should be '0'.)

May be that would be good to see these cases too. I mean I'm curious when this value has set up to 2 but it wouldn't be, or reverse.

Rule 200004 as provided in modsecurity.conf-recommended tests:
SecRule MULTIPART_UNMATCHED_BOUNDARY ""@eq 1"" ...

In current v3/master, if there are 'n' apparent boundaries (basically lines beginning with '--'), then if any of the 2nd through n-2-th are non-matches, they will fail to result in MULTIPART_UNMATCHED_BOUNDARY=1.

Yes, and I think that's wrong. Consider the line which begins with --, but that's not a boundary, just a signature separator from an e-mail body (eg. you want to protect your webmail with ModSecurity).
Like:
Content-Type: multipart/form-data; boundary=--0000
----0000
Content-Disposition: form-data; name=""_msg_body""

Hi Martin,

this is the test message.

Regards,

--
airween
----0000--

I can't consider the line -- as boundary, but the engine does. This is wrong.

E.g. if there are a total of 10 apparent boundaries, if any of the 2nd, 3rd, 4th, 5h, 6th, 7th or 8th of them should signal as 'unmatched', MULTIPART_UNMATCHED_BOUNDARY will not get set to 1.

I think the keyword here is apparent boundaries - no, they are not boundaries. I think we must consider them as regular lines. Every line which begins with --, but not matched with the boundary string is a regular content.

This is illustrated in the 3 new tests in this file. They all fail in current v3/master but they all pass in v3/master as at June 7,2018.

Yes, that's what I fixed.
Please take a look to my example with ""e-mail signature separator"".
Btw: thanks again your works, I think this is a good chance to re-think the terms - and the expected behavior, of course. As I wrote above, I didn't find any definition of ""unmatched boundary"" outside of ModSecurity. Also as you see my opinion, these lines are not unmatched boundaries.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2685,2022-02-25T13:14:59Z,2022-03-14T14:49:40Z,2022-03-14T14:49:41Z,CLOSED,False,36,0,1,https://github.com/marcstern,V2/redundancy,3,[],https://github.com/SpiderLabs/ModSecurity/pull/2685,https://github.com/marcstern,1,https://github.com/SpiderLabs/ModSecurity/pull/2685,"This adds a little check before adding tags and logdata to the actions, to ensure this is not already present in the table.
In case of redundant (thus exactly identical) tags, it avoids the tag being logged multiple times. Same for logdata.
This redundancy is common when using macros that adds some tags/logdata at different places.
Remark 1: This avoids duplicates in the ruleset table which is allocated in the ruleset pool that stays for the whole process life. This frees thus some memory.
Therefore, I also added other actions that have no mean to be redundant and cannot be ""undone"" by another action. This memory optimization is not so minor as the ruleset is duplicated in each sub-location.
Remark 2: We could also free memory for all the actions that can only have one value, like severity, by applying the opposite rule: removing everything but the last action. This could also be achieved by a cleanup process, instead of ""inline"" like my test. But that's another story ...","This adds a little check before adding tags and logdata to the actions, to ensure this is not already present in the table.
In case of redundant (thus exactly identical) tags, it avoids the tag being logged multiple times. Same for logdata.
This redundancy is common when using macros that adds some tags/logdata at different places.
Remark 1: This avoids duplicates in the ruleset table which is allocated in the ruleset pool that stays for the whole process life. This frees thus some memory.
Therefore, I also added other actions that have no mean to be redundant and cannot be ""undone"" by another action. This memory optimization is not so minor as the ruleset is duplicated in each sub-location.
Remark 2: We could also free memory for all the actions that can only have one value, like severity, by applying the opposite rule: removing everything but the last action. This could also be achieved by a cleanup process, instead of ""inline"" like my test. But that's another story ...",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2685,2022-02-25T13:14:59Z,2022-03-14T14:49:40Z,2022-03-14T14:49:41Z,CLOSED,False,36,0,1,https://github.com/marcstern,V2/redundancy,3,[],https://github.com/SpiderLabs/ModSecurity/pull/2685,https://github.com/martinhsv,2,https://github.com/SpiderLabs/ModSecurity/pull/2685#issuecomment-1054596519,"This adds a little check before adding tags and logdata to the actions, to ensure this is not already present in the table.
In case of redundant (thus exactly identical) tags, it avoids the tag being logged multiple times. Same for logdata.
This redundancy is common when using macros that adds some tags/logdata at different places.
Remark 1: This avoids duplicates in the ruleset table which is allocated in the ruleset pool that stays for the whole process life. This frees thus some memory.
Therefore, I also added other actions that have no mean to be redundant and cannot be ""undone"" by another action. This memory optimization is not so minor as the ruleset is duplicated in each sub-location.
Remark 2: We could also free memory for all the actions that can only have one value, like severity, by applying the opposite rule: removing everything but the last action. This could also be achieved by a cleanup process, instead of ""inline"" like my test. But that's another story ...","I'm not sure I'm convinced that this is a good idea.
The aim is basically to auto-correct an (apparent) error on the part of the rule writer.
As a general principle, I would argue that that's the sort of thing that ModSecurity should steer away from. The power of the tool should be left in the hands of the administrator(s) who are responsible for the rules. Moreover, any tag and logdata duplicate logging is something that is readily apparent from the audit log output; the admin can easily make any needed adjustments themselves when they see that. And we shouldn't assume that it's an error.
Also, I haven't tried it out, but it seems to me that this change would also reduce flexibility available to the admin. For example what if the content is not really duplicate because it involves a macro expansion and the expanded value changes between the first and second occurrences? Granted this is a likely a pretty marginal use case. But what this change is intended to help with is also for a pretty marginal use case.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2685,2022-02-25T13:14:59Z,2022-03-14T14:49:40Z,2022-03-14T14:49:41Z,CLOSED,False,36,0,1,https://github.com/marcstern,V2/redundancy,3,[],https://github.com/SpiderLabs/ModSecurity/pull/2685,https://github.com/marcstern,3,https://github.com/SpiderLabs/ModSecurity/pull/2685#issuecomment-1055129526,"This adds a little check before adding tags and logdata to the actions, to ensure this is not already present in the table.
In case of redundant (thus exactly identical) tags, it avoids the tag being logged multiple times. Same for logdata.
This redundancy is common when using macros that adds some tags/logdata at different places.
Remark 1: This avoids duplicates in the ruleset table which is allocated in the ruleset pool that stays for the whole process life. This frees thus some memory.
Therefore, I also added other actions that have no mean to be redundant and cannot be ""undone"" by another action. This memory optimization is not so minor as the ruleset is duplicated in each sub-location.
Remark 2: We could also free memory for all the actions that can only have one value, like severity, by applying the opposite rule: removing everything but the last action. This could also be achieved by a cleanup process, instead of ""inline"" like my test. But that's another story ...","The only auto-correction is to remove redundant entries like tags (mainly tags), nothing else. No flexibility reduction; if several different tags are added, they will all be present. Only if twice the same is registered, it's removed.
100% bullet-proof.
Marginal case: not when you use macros, it's very common.

the admin can easily make any needed adjustments themselves
When using macros it's often impossible because you create several macros adding, each of them, a tag. When combining them, you end up with 3 times the same tag.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2685,2022-02-25T13:14:59Z,2022-03-14T14:49:40Z,2022-03-14T14:49:41Z,CLOSED,False,36,0,1,https://github.com/marcstern,V2/redundancy,3,[],https://github.com/SpiderLabs/ModSecurity/pull/2685,https://github.com/martinhsv,4,https://github.com/SpiderLabs/ModSecurity/pull/2685#issuecomment-1055723445,"This adds a little check before adding tags and logdata to the actions, to ensure this is not already present in the table.
In case of redundant (thus exactly identical) tags, it avoids the tag being logged multiple times. Same for logdata.
This redundancy is common when using macros that adds some tags/logdata at different places.
Remark 1: This avoids duplicates in the ruleset table which is allocated in the ruleset pool that stays for the whole process life. This frees thus some memory.
Therefore, I also added other actions that have no mean to be redundant and cannot be ""undone"" by another action. This memory optimization is not so minor as the ruleset is duplicated in each sub-location.
Remark 2: We could also free memory for all the actions that can only have one value, like severity, by applying the opposite rule: removing everything but the last action. This could also be achieved by a cleanup process, instead of ""inline"" like my test. But that's another story ...","Hi @marcstern ,
Perhaps it would be helpful if you provided a couple of sample rules that you think would be representative of common use cases?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2685,2022-02-25T13:14:59Z,2022-03-14T14:49:40Z,2022-03-14T14:49:41Z,CLOSED,False,36,0,1,https://github.com/marcstern,V2/redundancy,3,[],https://github.com/SpiderLabs/ModSecurity/pull/2685,https://github.com/marcstern,5,https://github.com/SpiderLabs/ModSecurity/pull/2685#issuecomment-1056608761,"This adds a little check before adding tags and logdata to the actions, to ensure this is not already present in the table.
In case of redundant (thus exactly identical) tags, it avoids the tag being logged multiple times. Same for logdata.
This redundancy is common when using macros that adds some tags/logdata at different places.
Remark 1: This avoids duplicates in the ruleset table which is allocated in the ruleset pool that stays for the whole process life. This frees thus some memory.
Therefore, I also added other actions that have no mean to be redundant and cannot be ""undone"" by another action. This memory optimization is not so minor as the ruleset is duplicated in each sub-location.
Remark 2: We could also free memory for all the actions that can only have one value, like severity, by applying the opposite rule: removing everything but the last action. This could also be achieved by a cleanup process, instead of ""inline"" like my test. But that's another story ...","Example with Define:
Define xss_tags ""tag:security,tag:xss,tag:html""
Define sql_tags ""tag:security,tag:sql""
Define dev_tags ""tag:security,tag:develop""
SecRule ARGS ""@pm /*"" ""msg:'C-like comment used also in JavaScript & SQL',${xss_tags},${sql_tags},${dev_tags}""

The tag 'security' will be added 3 times",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2685,2022-02-25T13:14:59Z,2022-03-14T14:49:40Z,2022-03-14T14:49:41Z,CLOSED,False,36,0,1,https://github.com/marcstern,V2/redundancy,3,[],https://github.com/SpiderLabs/ModSecurity/pull/2685,https://github.com/martinhsv,6,https://github.com/SpiderLabs/ModSecurity/pull/2685#issuecomment-1058518738,"This adds a little check before adding tags and logdata to the actions, to ensure this is not already present in the table.
In case of redundant (thus exactly identical) tags, it avoids the tag being logged multiple times. Same for logdata.
This redundancy is common when using macros that adds some tags/logdata at different places.
Remark 1: This avoids duplicates in the ruleset table which is allocated in the ruleset pool that stays for the whole process life. This frees thus some memory.
Therefore, I also added other actions that have no mean to be redundant and cannot be ""undone"" by another action. This memory optimization is not so minor as the ruleset is duplicated in each sub-location.
Remark 2: We could also free memory for all the actions that can only have one value, like severity, by applying the opposite rule: removing everything but the last action. This could also be achieved by a cleanup process, instead of ""inline"" like my test. But that's another story ...","Hi @marcstern ,
That doesn't seem like that compelling of a case to me, since the admin could just set it up instead to only include the tags that are necessary to avoid the duplication.
Moreover, what if the admin specifically wants duplicates? Perhaps she's even using something similar to what you have, and then does post-processing of the logs to take special action if there are two or more occurrences of the same 'security' tag in the same log line?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2685,2022-02-25T13:14:59Z,2022-03-14T14:49:40Z,2022-03-14T14:49:41Z,CLOSED,False,36,0,1,https://github.com/marcstern,V2/redundancy,3,[],https://github.com/SpiderLabs/ModSecurity/pull/2685,https://github.com/marcstern,7,https://github.com/SpiderLabs/ModSecurity/pull/2685#issuecomment-1059091724,"This adds a little check before adding tags and logdata to the actions, to ensure this is not already present in the table.
In case of redundant (thus exactly identical) tags, it avoids the tag being logged multiple times. Same for logdata.
This redundancy is common when using macros that adds some tags/logdata at different places.
Remark 1: This avoids duplicates in the ruleset table which is allocated in the ruleset pool that stays for the whole process life. This frees thus some memory.
Therefore, I also added other actions that have no mean to be redundant and cannot be ""undone"" by another action. This memory optimization is not so minor as the ruleset is duplicated in each sub-location.
Remark 2: We could also free memory for all the actions that can only have one value, like severity, by applying the opposite rule: removing everything but the last action. This could also be achieved by a cleanup process, instead of ""inline"" like my test. But that's another story ...","the admin could just set it up instead to only include the tags that are necessary to avoid the duplication

The admin that sets up the the Define is not always the same one as the one using it, so ""no""

what if the admin specifically wants duplicates?

You're right (although this use case sounds much weirder than mine 😉), so an option would probably be the best choice",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2685,2022-02-25T13:14:59Z,2022-03-14T14:49:40Z,2022-03-14T14:49:41Z,CLOSED,False,36,0,1,https://github.com/marcstern,V2/redundancy,3,[],https://github.com/SpiderLabs/ModSecurity/pull/2685,https://github.com/martinhsv,8,https://github.com/SpiderLabs/ModSecurity/pull/2685#issuecomment-1066894181,"This adds a little check before adding tags and logdata to the actions, to ensure this is not already present in the table.
In case of redundant (thus exactly identical) tags, it avoids the tag being logged multiple times. Same for logdata.
This redundancy is common when using macros that adds some tags/logdata at different places.
Remark 1: This avoids duplicates in the ruleset table which is allocated in the ruleset pool that stays for the whole process life. This frees thus some memory.
Therefore, I also added other actions that have no mean to be redundant and cannot be ""undone"" by another action. This memory optimization is not so minor as the ruleset is duplicated in each sub-location.
Remark 2: We could also free memory for all the actions that can only have one value, like severity, by applying the opposite rule: removing everything but the last action. This could also be achieved by a cleanup process, instead of ""inline"" like my test. But that's another story ...",""" ... admin that sets up the the Define is not always the same ... ""
Maybe the two admins should talk to each other ;-)
If Admin2, who sets up the rule, cannot convince Admin1, who sets up the Defines, to provide what Admin2 needs, then Admin2 can just write his own text for the rule(s) in question.
In any case, I'm going to go ahead and close this for the reasons discussed.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2686,2022-02-25T14:19:15Z,2022-02-25T15:40:53Z,2022-02-25T15:40:53Z,MERGED,True,463,38,3,https://github.com/martinhsv,Support SecRequestBodyNoFilesLimit,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2686,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2686,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2688,2022-03-06T16:40:57Z,2022-04-29T17:08:39Z,2022-04-29T17:08:40Z,MERGED,True,87,22,2,https://github.com/ziollek,"LMDB - fix integration, restoring ability of use lmdb with nginx-modsecurity",6,[],https://github.com/SpiderLabs/ModSecurity/pull/2688,https://github.com/ziollek,1,https://github.com/SpiderLabs/ModSecurity/pull/2688,"Hi, I would like expand works started in issue: #2601. It turns out that these fixes cause significant problems with the ModSecurity-nginx stack.
Long story short - You cannot use readonly transactions in a child process if the lmdb environment (MDB_env) has been opened in a process which is forked afterwards (Use an MDB_env* in the process which opened it, without fork()ing ).
I prepared changes which improve that behavior by delaying opening the environment until the first use of any collection. Additionally, there should be only one open environment per process - that's why I introduced dedicated singleton wrapper responsible for creating the lmdb environment and providing it to each lmdb collection.","Hi, I would like expand works started in issue: #2601. It turns out that these fixes cause significant problems with the ModSecurity-nginx stack.
Long story short - You cannot use readonly transactions in a child process if the lmdb environment (MDB_env) has been opened in a process which is forked afterwards (Use an MDB_env* in the process which opened it, without fork()ing ).
I prepared changes which improve that behavior by delaying opening the environment until the first use of any collection. Additionally, there should be only one open environment per process - that's why I introduced dedicated singleton wrapper responsible for creating the lmdb environment and providing it to each lmdb collection.",True,"{'HEART': ['https://github.com/sobczak-m', 'https://github.com/tludwiczak', 'https://github.com/smigacz']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2688,2022-03-06T16:40:57Z,2022-04-29T17:08:39Z,2022-04-29T17:08:40Z,MERGED,True,87,22,2,https://github.com/ziollek,"LMDB - fix integration, restoring ability of use lmdb with nginx-modsecurity",6,[],https://github.com/SpiderLabs/ModSecurity/pull/2688,https://github.com/martinhsv,2,https://github.com/SpiderLabs/ModSecurity/pull/2688#issuecomment-1072675940,"Hi, I would like expand works started in issue: #2601. It turns out that these fixes cause significant problems with the ModSecurity-nginx stack.
Long story short - You cannot use readonly transactions in a child process if the lmdb environment (MDB_env) has been opened in a process which is forked afterwards (Use an MDB_env* in the process which opened it, without fork()ing ).
I prepared changes which improve that behavior by delaying opening the environment until the first use of any collection. Additionally, there should be only one open environment per process - that's why I introduced dedicated singleton wrapper responsible for creating the lmdb environment and providing it to each lmdb collection.","Thanks, @ziollek , for the submission (and others who have reviewed it).
I'll add this to v3.0.7 project.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2688,2022-03-06T16:40:57Z,2022-04-29T17:08:39Z,2022-04-29T17:08:40Z,MERGED,True,87,22,2,https://github.com/ziollek,"LMDB - fix integration, restoring ability of use lmdb with nginx-modsecurity",6,[],https://github.com/SpiderLabs/ModSecurity/pull/2688,https://github.com/ziollek,3,https://github.com/SpiderLabs/ModSecurity/pull/2688#issuecomment-1072968366,"Hi, I would like expand works started in issue: #2601. It turns out that these fixes cause significant problems with the ModSecurity-nginx stack.
Long story short - You cannot use readonly transactions in a child process if the lmdb environment (MDB_env) has been opened in a process which is forked afterwards (Use an MDB_env* in the process which opened it, without fork()ing ).
I prepared changes which improve that behavior by delaying opening the environment until the first use of any collection. Additionally, there should be only one open environment per process - that's why I introduced dedicated singleton wrapper responsible for creating the lmdb environment and providing it to each lmdb collection.","Thanks @martinhsv, I saw that static-check fails because of some warning for modsecurity.cc.
It turns out that this warning was suppressed earlier but for a specific line number.
I updated the line number for this suppression in the last commit so rerun ci pls.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2688,2022-03-06T16:40:57Z,2022-04-29T17:08:39Z,2022-04-29T17:08:40Z,MERGED,True,87,22,2,https://github.com/ziollek,"LMDB - fix integration, restoring ability of use lmdb with nginx-modsecurity",6,[],https://github.com/SpiderLabs/ModSecurity/pull/2688,https://github.com/ziollek,4,https://github.com/SpiderLabs/ModSecurity/pull/2688#issuecomment-1112907202,"Hi, I would like expand works started in issue: #2601. It turns out that these fixes cause significant problems with the ModSecurity-nginx stack.
Long story short - You cannot use readonly transactions in a child process if the lmdb environment (MDB_env) has been opened in a process which is forked afterwards (Use an MDB_env* in the process which opened it, without fork()ing ).
I prepared changes which improve that behavior by delaying opening the environment until the first use of any collection. Additionally, there should be only one open environment per process - that's why I introduced dedicated singleton wrapper responsible for creating the lmdb environment and providing it to each lmdb collection.",@martinhsv I've adjusted the code to optimizations that You suggested.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2688,2022-03-06T16:40:57Z,2022-04-29T17:08:39Z,2022-04-29T17:08:40Z,MERGED,True,87,22,2,https://github.com/ziollek,"LMDB - fix integration, restoring ability of use lmdb with nginx-modsecurity",6,[],https://github.com/SpiderLabs/ModSecurity/pull/2688,https://github.com/martinhsv,5,https://github.com/SpiderLabs/ModSecurity/pull/2688#issuecomment-1113487725,"Hi, I would like expand works started in issue: #2601. It turns out that these fixes cause significant problems with the ModSecurity-nginx stack.
Long story short - You cannot use readonly transactions in a child process if the lmdb environment (MDB_env) has been opened in a process which is forked afterwards (Use an MDB_env* in the process which opened it, without fork()ing ).
I prepared changes which improve that behavior by delaying opening the environment until the first use of any collection. Additionally, there should be only one open environment per process - that's why I introduced dedicated singleton wrapper responsible for creating the lmdb environment and providing it to each lmdb collection.","Looks, I think. I'll merge it today. Thanks for the work on this.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2707,2022-03-20T13:27:12Z,,2022-04-13T12:56:24Z,OPEN,False,2,2,2,https://github.com/liudongmiao,fix argv in examples,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2707,https://github.com/liudongmiao,1,https://github.com/SpiderLabs/ModSecurity/pull/2707,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2708,2022-03-20T13:29:18Z,,2022-03-20T13:29:18Z,OPEN,False,64,31,1,https://github.com/liudongmiao,fix simple examle in README,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2708,https://github.com/liudongmiao,1,https://github.com/SpiderLabs/ModSecurity/pull/2708,Examples in README should be changed to work on v3.,Examples in README should be changed to work on v3.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2714,2022-04-12T12:22:16Z,,2022-04-12T12:22:29Z,OPEN,False,18,15,10,https://github.com/hughmcmaster,configure.ac: Use pkg-config to find libxml2,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2714,https://github.com/hughmcmaster,1,https://github.com/SpiderLabs/ModSecurity/pull/2714,"Debian is taking steps to remove xml2-config in the current development cycle. ModSecurity uses xml2-config to find the libxml2 include paths and linker flags.
This patch uses pkg-config to find libxml2 while retaining the 'debug'-type output in the configure script.","Debian is taking steps to remove xml2-config in the current development cycle. ModSecurity uses xml2-config to find the libxml2 include paths and linker flags.
This patch uses pkg-config to find libxml2 while retaining the 'debug'-type output in the configure script.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2715,2022-04-14T14:40:17Z,,2022-05-30T14:16:46Z,OPEN,False,17,0,2,https://github.com/vloup,Fix memory leak in streams,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2715,https://github.com/vloup,1,https://github.com/SpiderLabs/ModSecurity/pull/2715,"As suggested by @JamesColeman-LW, here is a PR that fixes #2208.
All the credits goes to @marcstern for finding the root cause of the memory leak, I just did share my memory graph and added an extra ifdef.","As suggested by @JamesColeman-LW, here is a PR that fixes #2208.
All the credits goes to @marcstern for finding the root cause of the memory leak, I just did share my memory graph and added an extra ifdef.",True,{'THUMBS_UP': ['https://github.com/marcstern']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2715,2022-04-14T14:40:17Z,,2022-05-30T14:16:46Z,OPEN,False,17,0,2,https://github.com/vloup,Fix memory leak in streams,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2715,https://github.com/vloup,2,https://github.com/SpiderLabs/ModSecurity/pull/2715#issuecomment-1129935838,"As suggested by @JamesColeman-LW, here is a PR that fixes #2208.
All the credits goes to @marcstern for finding the root cause of the memory leak, I just did share my memory graph and added an extra ifdef.",Any news on this PR? I did a rebase since CHANGES was in conflict with v2/master. I know that @JamesColeman-LW is interested to get this merged.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2715,2022-04-14T14:40:17Z,,2022-05-30T14:16:46Z,OPEN,False,17,0,2,https://github.com/vloup,Fix memory leak in streams,1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2715,https://github.com/JamesColeman-LW,3,https://github.com/SpiderLabs/ModSecurity/pull/2715#issuecomment-1130421444,"As suggested by @JamesColeman-LW, here is a PR that fixes #2208.
All the credits goes to @marcstern for finding the root cause of the memory leak, I just did share my memory graph and added an extra ifdef.","I pushed this to our fleet and we definitely saw a large drop in memory usage.
Valgrind ms traces before:
[1336][root@esg-test02 valgrind]$ ms_print massif.out.657
--------------------------------------------------------------------------------
Command:            /usr/sbin/httpd -DSSL -DFOREGROUND
Massif arguments:   (none)
ms_print arguments: massif.out.657
--------------------------------------------------------------------------------


    MB
144.9^                                                                       #
     |                                                                 @ @:@:#
     |                                                           @ @:@:@:@:@:#
     |                                                    :@ @:@:@:@:@:@:@:@:#
     |                                              :@:@:@:@:@:@:@:@:@:@:@:@:#
     |                                        :@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:#
     |                                  :@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:#
     |                          :@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:#
     |                    :@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:#
     |                    @@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:#
     |       :@::::::::@::@@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:#
     |       :@::::::::@::@@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:#
     |       :@::::::::@::@@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:#
     |      @:@::::::::@::@@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:#
     |     @@:@::::::::@::@@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:#
     |     @@:@::::::::@::@@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:#
     |    @@@:@::::::::@::@@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:#
     |    @@@:@::::::::@::@@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:#
     |   @@@@:@::::::::@::@@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:#
     |  @@@@@:@::::::::@::@@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:@:#
   0 +----------------------------------------------------------------------->Gi
     0                                                                   6.584

Number of snapshots: 94
 Detailed snapshots: [3, 4, 5, 7, 8, 9, 12, 23, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93 (peak)]

After patch applied:
[1312][root@esg-test02 valgrind]$ ms_print massif.out.13391
--------------------------------------------------------------------------------
Command:            /usr/sbin/httpd -DSSL -DFOREGROUND
Massif arguments:   (none)
ms_print arguments: massif.out.13391
--------------------------------------------------------------------------------


    MB
87.29^                                              :
     |                   @#::::::::::@:::::::::@::::::::::@:::::::::@::::::::@
     |                   @#::::::::::@:::::::::@::::::::::@:::::::::@:::: : :@
     |          :     :::@#::::::::::@:::::::::@::::::::::@:::::::::@:::: : :@
     |       ::::::::::::@#::::::::::@:::::::::@::::::::::@:::::::::@:::: : :@
     |      :: ::: ::::::@#::::::::::@:::::::::@::::::::::@:::::::::@:::: : :@
     |      :: ::: ::::::@#::::::::::@:::::::::@::::::::::@:::::::::@:::: : :@
     |      @: ::: ::::::@#::::::::::@:::::::::@::::::::::@:::::::::@:::: : :@
     |      @: ::: ::::::@#::::::::::@:::::::::@::::::::::@:::::::::@:::: : :@
     |      @: ::: ::::::@#::::::::::@:::::::::@::::::::::@:::::::::@:::: : :@
     |      @: ::: ::::::@#::::::::::@:::::::::@::::::::::@:::::::::@:::: : :@
     |    @@@: ::: ::::::@#::::::::::@:::::::::@::::::::::@:::::::::@:::: : :@
     |    @ @: ::: ::::::@#::::::::::@:::::::::@::::::::::@:::::::::@:::: : :@
     |    @ @: ::: ::::::@#::::::::::@:::::::::@::::::::::@:::::::::@:::: : :@
     |    @ @: ::: ::::::@#::::::::::@:::::::::@::::::::::@:::::::::@:::: : :@
     |   @@ @: ::: ::::::@#::::::::::@:::::::::@::::::::::@:::::::::@:::: : :@
     |   @@ @: ::: ::::::@#::::::::::@:::::::::@::::::::::@:::::::::@:::: : :@
     |   @@ @: ::: ::::::@#::::::::::@:::::::::@::::::::::@:::::::::@:::: : :@
     |   @@ @: ::: ::::::@#::::::::::@:::::::::@::::::::::@:::::::::@:::: : :@
     |  :@@ @: ::: ::::::@#::::::::::@:::::::::@::::::::::@:::::::::@:::: : :@
   0 +----------------------------------------------------------------------->Gi
     0                                                                   6.969

Number of snapshots: 74
 Detailed snapshots: [3, 5, 6, 18, 19 (peak), 31, 41, 53, 63, 73]",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2718,2022-04-19T05:51:56Z,,2022-04-20T21:39:09Z,OPEN,False,35,35,1,https://github.com/stanhu,Fix build errors with multiple Lua libraries,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2718,https://github.com/stanhu,1,https://github.com/SpiderLabs/ModSecurity/pull/2718,"This commit fixes two items:

Previously configure would search for Lua in known paths, but
this could cause the Makefile to use inconsistent header and library
paths. For example, if luajit were installed in /usr/local/include
but lua 5.1 were installed in /usr/lib/liblua-5.1.so, the build
would attempt to use the luajit headers but link against the lua 5.1
library.

To fix this, we switch the order of the search:

First attempt to find an installed LUA library with pkg-config.
If we cannot find a library that way, fall back to the known-path
scan.

This is actually what is already documented in LUA_POSSIBLE_PATHS.
Note that PKG_CONFIG_PATH can be specified in configure to look in the right path:
PKG_CONFIG_PATH=/usr/local/pkgconfig ./configure

Add luajit back into LUA_POSSIBLE_LIB_NAMES. This was added in
0ac23a4 but quietly reverted in fe98ce4. The changes in the first
item also ensure the CFLAGS are set properly for luajit.

This should fix the issues raised in #1909.","This commit fixes two items:

Previously configure would search for Lua in known paths, but
this could cause the Makefile to use inconsistent header and library
paths. For example, if luajit were installed in /usr/local/include
but lua 5.1 were installed in /usr/lib/liblua-5.1.so, the build
would attempt to use the luajit headers but link against the lua 5.1
library.

To fix this, we switch the order of the search:

First attempt to find an installed LUA library with pkg-config.
If we cannot find a library that way, fall back to the known-path
scan.

This is actually what is already documented in LUA_POSSIBLE_PATHS.
Note that PKG_CONFIG_PATH can be specified in configure to look in the right path:
PKG_CONFIG_PATH=/usr/local/pkgconfig ./configure

Add luajit back into LUA_POSSIBLE_LIB_NAMES. This was added in
0ac23a4 but quietly reverted in fe98ce4. The changes in the first
item also ensure the CFLAGS are set properly for luajit.

This should fix the issues raised in #1909.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2718,2022-04-19T05:51:56Z,,2022-04-20T21:39:09Z,OPEN,False,35,35,1,https://github.com/stanhu,Fix build errors with multiple Lua libraries,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2718,https://github.com/stanhu,2,https://github.com/SpiderLabs/ModSecurity/pull/2718#issuecomment-1104477696,"This commit fixes two items:

Previously configure would search for Lua in known paths, but
this could cause the Makefile to use inconsistent header and library
paths. For example, if luajit were installed in /usr/local/include
but lua 5.1 were installed in /usr/lib/liblua-5.1.so, the build
would attempt to use the luajit headers but link against the lua 5.1
library.

To fix this, we switch the order of the search:

First attempt to find an installed LUA library with pkg-config.
If we cannot find a library that way, fall back to the known-path
scan.

This is actually what is already documented in LUA_POSSIBLE_PATHS.
Note that PKG_CONFIG_PATH can be specified in configure to look in the right path:
PKG_CONFIG_PATH=/usr/local/pkgconfig ./configure

Add luajit back into LUA_POSSIBLE_LIB_NAMES. This was added in
0ac23a4 but quietly reverted in fe98ce4. The changes in the first
item also ensure the CFLAGS are set properly for luajit.

This should fix the issues raised in #1909.",@victorhora Could you take a look at this?,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2719,2022-04-20T22:15:56Z,2022-04-21T01:30:18Z,2022-05-31T13:26:18Z,MERGED,True,379,17,9,https://github.com/martinhsv,Support PCRE2,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2719,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2719,"This pull request provides initial support for PCRE2 on an experimental basis. (Closes #2668 )
To use PCRE2 with nginx and ModSecurity you need to:

use a version of nginx that supports it (e.g. nginx v1.25.5 or 1.25.6)
use a version of the connector (ModSecurity-nginx) at or later than SpiderLabs/ModSecurity-nginx@1c32794
include the --with-pcre2 option when running ModSecurity's ./configure","This pull request provides initial support for PCRE2 on an experimental basis. (Closes #2668 )
To use PCRE2 with nginx and ModSecurity you need to:

use a version of nginx that supports it (e.g. nginx v1.25.5 or 1.25.6)
use a version of the connector (ModSecurity-nginx) at or later than SpiderLabs/ModSecurity-nginx@1c32794
include the --with-pcre2 option when running ModSecurity's ./configure",True,"{'THUMBS_UP': ['https://github.com/dune73', 'https://github.com/brandonpayton']}"
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2719,2022-04-20T22:15:56Z,2022-04-21T01:30:18Z,2022-05-31T13:26:18Z,MERGED,True,379,17,9,https://github.com/martinhsv,Support PCRE2,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2719,https://github.com/istiak101,2,https://github.com/SpiderLabs/ModSecurity/pull/2719#issuecomment-1142021075,"This pull request provides initial support for PCRE2 on an experimental basis. (Closes #2668 )
To use PCRE2 with nginx and ModSecurity you need to:

use a version of nginx that supports it (e.g. nginx v1.25.5 or 1.25.6)
use a version of the connector (ModSecurity-nginx) at or later than SpiderLabs/ModSecurity-nginx@1c32794
include the --with-pcre2 option when running ModSecurity's ./configure","Do I need to pass the PCRE2 path too? Explicit --with-pcre2=yes didn't work.
checking for libpcre config script... no
configure: *** pcre library not found.
configure: error: pcre library is required

I don't know it's using build/pcre.m4 instead of build/pcre2.m4
Compiling with PCRE1 works.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2719,2022-04-20T22:15:56Z,2022-04-21T01:30:18Z,2022-05-31T13:26:18Z,MERGED,True,379,17,9,https://github.com/martinhsv,Support PCRE2,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2719,https://github.com/istiak101,3,https://github.com/SpiderLabs/ModSecurity/pull/2719#issuecomment-1142032381,"This pull request provides initial support for PCRE2 on an experimental basis. (Closes #2668 )
To use PCRE2 with nginx and ModSecurity you need to:

use a version of nginx that supports it (e.g. nginx v1.25.5 or 1.25.6)
use a version of the connector (ModSecurity-nginx) at or later than SpiderLabs/ModSecurity-nginx@1c32794
include the --with-pcre2 option when running ModSecurity's ./configure","So PCRE1 config binary location is /usr/bin/pcre-config and PCRE2 config binary /usr/bin/pcre2-config.
In PCRE1 the config script is detected correctly but not with PCRE2.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2719,2022-04-20T22:15:56Z,2022-04-21T01:30:18Z,2022-05-31T13:26:18Z,MERGED,True,379,17,9,https://github.com/martinhsv,Support PCRE2,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2719,https://github.com/dvershinin,4,https://github.com/SpiderLabs/ModSecurity/pull/2719#issuecomment-1142035394,"This pull request provides initial support for PCRE2 on an experimental basis. (Closes #2668 )
To use PCRE2 with nginx and ModSecurity you need to:

use a version of nginx that supports it (e.g. nginx v1.25.5 or 1.25.6)
use a version of the connector (ModSecurity-nginx) at or later than SpiderLabs/ModSecurity-nginx@1c32794
include the --with-pcre2 option when running ModSecurity's ./configure","@istiak101 @martinhsv apparently there's a bug somewhere.
--with-pcre2 only compiles fine if both pcre1 and pcre2 devel libs installed. And the resulting binary links with both, which is incorrect, of course.
If only pcre2 devel is installed on the system, the error message  during configure is always configure: error: pcre library is required.
See filed new bug #2750",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2719,2022-04-20T22:15:56Z,2022-04-21T01:30:18Z,2022-05-31T13:26:18Z,MERGED,True,379,17,9,https://github.com/martinhsv,Support PCRE2,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2719,https://github.com/martinhsv,5,https://github.com/SpiderLabs/ModSecurity/pull/2719#issuecomment-1142112481,"This pull request provides initial support for PCRE2 on an experimental basis. (Closes #2668 )
To use PCRE2 with nginx and ModSecurity you need to:

use a version of nginx that supports it (e.g. nginx v1.25.5 or 1.25.6)
use a version of the connector (ModSecurity-nginx) at or later than SpiderLabs/ModSecurity-nginx@1c32794
include the --with-pcre2 option when running ModSecurity's ./configure","Hello @istiak101 ,
As @dvershinin has noted, the dependency on pcre1 has not been removed even if you specifically want to use pcre2. But beyond that, does it work if you just use (although =yes should work too):
./configure --with-pcre2",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2719,2022-04-20T22:15:56Z,2022-04-21T01:30:18Z,2022-05-31T13:26:18Z,MERGED,True,379,17,9,https://github.com/martinhsv,Support PCRE2,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2719,https://github.com/istiak101,6,https://github.com/SpiderLabs/ModSecurity/pull/2719#issuecomment-1142135011,"This pull request provides initial support for PCRE2 on an experimental basis. (Closes #2668 )
To use PCRE2 with nginx and ModSecurity you need to:

use a version of nginx that supports it (e.g. nginx v1.25.5 or 1.25.6)
use a version of the connector (ModSecurity-nginx) at or later than SpiderLabs/ModSecurity-nginx@1c32794
include the --with-pcre2 option when running ModSecurity's ./configure","Hello @martinhsv,
Yes if install both pcre-devel and pcre2-devel it works.",True,{'THUMBS_UP': ['https://github.com/martinhsv']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2721,2022-04-21T08:46:34Z,,2022-04-22T15:18:17Z,OPEN,False,3,3,1,https://github.com/877509395,Scheme,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2721,https://github.com/877509395,1,https://github.com/SpiderLabs/ModSecurity/pull/2721,"just to show error, not PR.","just to show error, not PR.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2721,2022-04-21T08:46:34Z,,2022-04-22T15:18:17Z,OPEN,False,3,3,1,https://github.com/877509395,Scheme,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2721,https://github.com/martinhsv,2,https://github.com/SpiderLabs/ModSecurity/pull/2721#issuecomment-1106617211,"just to show error, not PR.","Hi @877509395 ,
Thanks for highlighting that.
The logic is indeed not correct for what was intended, and should get fixed.
Note, however, that it doesn't look like there is any circumstance with the currently-supported v3 deployment (with nginx and the ModSecurity-nginx connector), that this code path will execute.
If you think I'm mistaken and the effect is relatively trivial, feel free to post here. If you think I'm mistaken and the effect is more consequential (possible rule bypass, etc.) please outline the use case to us at the address listed at https://github.com/SpiderLabs/ModSecurity#security-issue .
(Note: For future reference, items like this are better created as 'issues' rather than pull requests.)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2723,2022-04-21T18:22:31Z,2022-04-21T19:28:23Z,2022-04-21T19:28:23Z,MERGED,True,54,0,5,https://github.com/martinhsv,Add DebugLog message for bad pattern in rx operator,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2723,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2723,"Prior to this pull request, if an rx operator used a non-compiling pattern (e.g. ""@rx a(b""), ModSecurity would silently accept and process it, but simply producing a 'no match' every time.
This PR adds a message in DebugLog (at level 3) indicating that there was a problem.
TODO: similar processing for the remaining operators that use the Regex class.","Prior to this pull request, if an rx operator used a non-compiling pattern (e.g. ""@rx a(b""), ModSecurity would silently accept and process it, but simply producing a 'no match' every time.
This PR adds a message in DebugLog (at level 3) indicating that there was a problem.
TODO: similar processing for the remaining operators that use the Regex class.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2725,2022-04-24T01:48:46Z,,2022-05-26T14:46:21Z,OPEN,False,932,299,11,https://github.com/daixiang0,Support WASM build,12,[],https://github.com/SpiderLabs/ModSecurity/pull/2725,https://github.com/daixiang0,1,https://github.com/SpiderLabs/ModSecurity/pull/2725,"Fix #2590
https://github.com/intel/modsecurity-wasm-filter uses the Modsecurity WASM based on this PR.
This PR is a total workaround, @leyao-daily and I are from same team and I post here and want to get some responses and help, to make ModSecurity support WASM build.","Fix #2590
https://github.com/intel/modsecurity-wasm-filter uses the Modsecurity WASM based on this PR.
This PR is a total workaround, @leyao-daily and I are from same team and I post here and want to get some responses and help, to make ModSecurity support WASM build.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2725,2022-04-24T01:48:46Z,,2022-05-26T14:46:21Z,OPEN,False,932,299,11,https://github.com/daixiang0,Support WASM build,12,[],https://github.com/SpiderLabs/ModSecurity/pull/2725,https://github.com/daixiang0,2,https://github.com/SpiderLabs/ModSecurity/pull/2725#issuecomment-1118287297,"Fix #2590
https://github.com/intel/modsecurity-wasm-filter uses the Modsecurity WASM based on this PR.
This PR is a total workaround, @leyao-daily and I are from same team and I post here and want to get some responses and help, to make ModSecurity support WASM build.",Wait your feedback @martinhsv,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2725,2022-04-24T01:48:46Z,,2022-05-26T14:46:21Z,OPEN,False,932,299,11,https://github.com/daixiang0,Support WASM build,12,[],https://github.com/SpiderLabs/ModSecurity/pull/2725,https://github.com/martinhsv,3,https://github.com/SpiderLabs/ModSecurity/pull/2725#issuecomment-1133423715,"Fix #2590
https://github.com/intel/modsecurity-wasm-filter uses the Modsecurity WASM based on this PR.
This PR is a total workaround, @leyao-daily and I are from same team and I post here and want to get some responses and help, to make ModSecurity support WASM build.","I'm not sure how keen I am to merge this content to v3/master in the near term.
However, I would be willing to create a new branch ( maybe v3/dev/wasm-experimental ?) where you could submit your content. (I couldn't commit to regularly updating it with changes that occur to v3/master.)
Would that work for you?",True,{'THUMBS_UP': ['https://github.com/M4tteoP']}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2725,2022-04-24T01:48:46Z,,2022-05-26T14:46:21Z,OPEN,False,932,299,11,https://github.com/daixiang0,Support WASM build,12,[],https://github.com/SpiderLabs/ModSecurity/pull/2725,https://github.com/daixiang0,4,https://github.com/SpiderLabs/ModSecurity/pull/2725#issuecomment-1134036842,"Fix #2590
https://github.com/intel/modsecurity-wasm-filter uses the Modsecurity WASM based on this PR.
This PR is a total workaround, @leyao-daily and I are from same team and I post here and want to get some responses and help, to make ModSecurity support WASM build.","Sounds good, then we can advance slowly.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2725,2022-04-24T01:48:46Z,,2022-05-26T14:46:21Z,OPEN,False,932,299,11,https://github.com/daixiang0,Support WASM build,12,[],https://github.com/SpiderLabs/ModSecurity/pull/2725,https://github.com/leyao-daily,5,https://github.com/SpiderLabs/ModSecurity/pull/2725#issuecomment-1134054993,"Fix #2590
https://github.com/intel/modsecurity-wasm-filter uses the Modsecurity WASM based on this PR.
This PR is a total workaround, @leyao-daily and I are from same team and I post here and want to get some responses and help, to make ModSecurity support WASM build.","I'm not sure how keen I am to merge this content to v3/master in the near term.
However, I would be willing to create a new branch ( maybe v3/dev/wasm-experimental ?) where you could submit your content. (I couldn't commit to regularly updating it with changes that occur to v3/master.)
Would that work for you?

It makes sense. Thanks.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2725,2022-04-24T01:48:46Z,,2022-05-26T14:46:21Z,OPEN,False,932,299,11,https://github.com/daixiang0,Support WASM build,12,[],https://github.com/SpiderLabs/ModSecurity/pull/2725,https://github.com/jcchavezs,6,https://github.com/SpiderLabs/ModSecurity/pull/2725#issuecomment-1134532011,"Fix #2590
https://github.com/intel/modsecurity-wasm-filter uses the Modsecurity WASM based on this PR.
This PR is a total workaround, @leyao-daily and I are from same team and I post here and want to get some responses and help, to make ModSecurity support WASM build.","Nice work going on. I just have a question: is this work supposed to make modsecurity buildable for WASM or for proxy-wasm-cpp-sdk? Reason I ask is because supported libraries in proxy-wasm-cpp-sdk is a subset of the supported functions in WASM. If not targeting wasm-cpp-sdk, can we make it explicit?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2725,2022-04-24T01:48:46Z,,2022-05-26T14:46:21Z,OPEN,False,932,299,11,https://github.com/daixiang0,Support WASM build,12,[],https://github.com/SpiderLabs/ModSecurity/pull/2725,https://github.com/bryanwux,7,https://github.com/SpiderLabs/ModSecurity/pull/2725#issuecomment-1135355697,"Fix #2590
https://github.com/intel/modsecurity-wasm-filter uses the Modsecurity WASM based on this PR.
This PR is a total workaround, @leyao-daily and I are from same team and I post here and want to get some responses and help, to make ModSecurity support WASM build.","Nice work going on. I just have a question: is this work supposed to make modsecurity buildable for WASM or for proxy-wasm-cpp-sdk? Reason I ask is because supported libraries in proxy-wasm-cpp-sdk is a subset of the supported functions in WASM. If not targeting wasm-cpp-sdk, can we make it explicit?

This PR is supposed to make modsecurity buildable for WASM, not for proxy-wasm-cpp-sdk. What do you mean by making it explicit?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2725,2022-04-24T01:48:46Z,,2022-05-26T14:46:21Z,OPEN,False,932,299,11,https://github.com/daixiang0,Support WASM build,12,[],https://github.com/SpiderLabs/ModSecurity/pull/2725,https://github.com/jcchavezs,8,https://github.com/SpiderLabs/ModSecurity/pull/2725#issuecomment-1138536625,"Fix #2590
https://github.com/intel/modsecurity-wasm-filter uses the Modsecurity WASM based on this PR.
This PR is a total workaround, @leyao-daily and I are from same team and I post here and want to get some responses and help, to make ModSecurity support WASM build.",I think the only request here would be to document changes. I guess we are in a very early stage but getting context is crucial.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2727,2022-04-24T09:06:42Z,2022-05-05T22:24:03Z,2022-05-05T22:24:03Z,MERGED,True,3,0,1,https://github.com/liudongmiao,fix memory leak when concurrent log includes REMOTE_USER,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2727,https://github.com/liudongmiao,1,https://github.com/SpiderLabs/ModSecurity/pull/2727,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2727,2022-04-24T09:06:42Z,2022-05-05T22:24:03Z,2022-05-05T22:24:03Z,MERGED,True,3,0,1,https://github.com/liudongmiao,fix memory leak when concurrent log includes REMOTE_USER,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2727,https://github.com/martinhsv,2,https://github.com/SpiderLabs/ModSecurity/pull/2727#issuecomment-1119000683,,"A less common configuration + use case, that even then, should only leak at most proportionally to the number of transactions generating an audit log write.
Nevertheless, it is in principle a per-transaction leak, so a good find.
Thanks for the contribution.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2728,2022-04-24T11:56:26Z,,2022-06-04T06:37:35Z,OPEN,False,25,25,7,https://github.com/liudongmiao,"fix memory patch, should close #2710",2,[],https://github.com/SpiderLabs/ModSecurity/pull/2728,https://github.com/liudongmiao,1,https://github.com/SpiderLabs/ModSecurity/pull/2728,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2728,2022-04-24T11:56:26Z,,2022-06-04T06:37:35Z,OPEN,False,25,25,7,https://github.com/liudongmiao,"fix memory patch, should close #2710",2,[],https://github.com/SpiderLabs/ModSecurity/pull/2728,https://github.com/liudongmiao,2,https://github.com/SpiderLabs/ModSecurity/pull/2728#issuecomment-1107827393,,should same as #2580,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2728,2022-04-24T11:56:26Z,,2022-06-04T06:37:35Z,OPEN,False,25,25,7,https://github.com/liudongmiao,"fix memory patch, should close #2710",2,[],https://github.com/SpiderLabs/ModSecurity/pull/2728,https://github.com/liudongmiao,3,https://github.com/SpiderLabs/ModSecurity/pull/2728#issuecomment-1107827464,,#2710,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2728,2022-04-24T11:56:26Z,,2022-06-04T06:37:35Z,OPEN,False,25,25,7,https://github.com/liudongmiao,"fix memory patch, should close #2710",2,[],https://github.com/SpiderLabs/ModSecurity/pull/2728,https://github.com/mmckenna-yottaa,4,https://github.com/SpiderLabs/ModSecurity/pull/2728#issuecomment-1146318674,,"If I may--It would seem that we should also restore the virtual destructor that the Rule class had in Modsec 3.0.4.
Since Modsec 3.0.5, the Rule class has not had an explicit destructor; and the compiler has therefore been defining an implicit nonvirtual destructor for the Rule class.  The problem with the nonvirtual Rule destructor is that a call to that destructor will not exercise the subclass destructors.  Restoring the virtual destructor for the Rule class will ensure that the subclass destructors are also called.
The problem of the nonvirtual Rule destructor will certainly manifest when the Rules container will destroy its internal member named ""m_rules"".  In the Rules class, the m_rules destructor will call the Rule nonvirtual destructor, which will not exercise the Rule objects' subclass destructors.  To ensure that the m_rules destructor exercises each Rule object's subclass destructors, we should restore the virtual destructor that the Rule class had in 3.0.4.  This one-liner in ""rule.h"" should suffice:
virtual ~Rule() {}
In the above one-liner, the destructor requires no explicit logic because the Rule's virtual destructor will implicitly call the subclass destructors; and in the Rule class itself the internal members will do the right thing when they are destroyed.  (As of 3.0.7, the Rule class's internal members are a shared_ptr and two integers.)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2728,2022-04-24T11:56:26Z,,2022-06-04T06:37:35Z,OPEN,False,25,25,7,https://github.com/liudongmiao,"fix memory patch, should close #2710",2,[],https://github.com/SpiderLabs/ModSecurity/pull/2728,https://github.com/mmckenna-yottaa,5,https://github.com/SpiderLabs/ModSecurity/pull/2728#issuecomment-1146337967,,"The pull request at #2580 also suggested the one-liner:
virtual ~Rule() {}",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2728,2022-04-24T11:56:26Z,,2022-06-04T06:37:35Z,OPEN,False,25,25,7,https://github.com/liudongmiao,"fix memory patch, should close #2710",2,[],https://github.com/SpiderLabs/ModSecurity/pull/2728,https://github.com/liudongmiao,6,https://github.com/SpiderLabs/ModSecurity/pull/2728#issuecomment-1146550243,,"@mmckenna-yottaa From my test, either virtual would fix the issue, so I make a small change.
And I cannot understand, from shared_ptr's document, it's unnecessary to use virtual. However, in this case, it must use virtual, I still don't know why.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2731,2022-04-26T18:23:17Z,2022-04-26T20:41:59Z,2022-04-26T20:41:59Z,MERGED,True,68,1,3,https://github.com/martinhsv,Tolerate other parameters after boundary in multipart C-T,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2731,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2731,"This pull request supports permissively handling a Content-Type header for a multipart request, where the header incorrectly has additional parameters after the boundary. A debug log message is produced for this use case, but processing can otherwise continue as if the extra parameter(s) had not been present.","This pull request supports permissively handling a Content-Type header for a multipart request, where the header incorrectly has additional parameters after the boundary. A debug log message is produced for this use case, but processing can otherwise continue as if the extra parameter(s) had not been present.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2732,2022-04-26T23:41:59Z,2022-04-27T01:37:41Z,2022-04-27T01:37:41Z,MERGED,True,3,1,2,https://github.com/martinhsv,Fix initcol error message wording,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2732,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2732,,,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2735,2022-05-03T19:58:15Z,2022-05-03T19:58:43Z,2022-05-03T21:30:59Z,MERGED,True,38,3,4,https://github.com/martinhsv,"Allow no-key, single-value JSON body",1,['2.x'],https://github.com/SpiderLabs/ModSecurity/pull/2735,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2735,This pull request is a functionally-equivalent substitute for #2363,This pull request is a functionally-equivalent substitute for #2363,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2736,2022-05-03T21:14:01Z,,2022-05-09T14:54:30Z,OPEN,False,7513,7121,17,https://github.com/brandonpayton,Add isolated PCRE match limits as a layer of ReDoS defense,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2736,https://github.com/brandonpayton,1,https://github.com/SpiderLabs/ModSecurity/pull/2736,"This PR ...

Adds support for PCRE and PCRE2 match limits as a last line of defense against ReDoS. Match limits are applied per PCRE invocation and do not change the global PCRE match limit default, which means the limits are isolated to ModSecurity and shouldn't affect other uses of PCRE in the same program.
Exposes regex errors as the variables RX_ERROR and RX_ERROR_RULE_ID so that regex engine failures can be handled by dedicated rules, rather than silently ignored. Today, if regex execution returns an error, the rx and rxGlobal operators simply fail to match. This could even be considered a security concern since such a regex error will cause a rule to be quietly bypassed.

NOTE: In the future, ModSecurity may support more proactive measures to identify vulnerable regular expressions before they can be used, but there is no harm in keeping multiple layers of defense. Doing so may even be wise, in the same way we design modern buildings to avoid fires yet still employ fire fighters for emergencies.
Background
A similar PR was rejected in the past, and if I understand correctly, it was rejected for the following reasons:

A belief that setting PCRE match limits would effect other PCRE users in the same memory space #
Users were concerned and confused about how global PCRE match limits, set for things like PHP, also affected ModSecurity #
The maintainers desire to avoid entanglement and user confusion with PCRE limits by finding other ways to avoid ReDoS #

If that is correct, I think it is worth revisiting these reasons:

Can we set match limits without affecting other PCRE users in the same memory space? Yes.Match limits can be applied to individual PCRE pcre_exec() and PCRE2 pcre2_match() invocations without affecting other PCRE uses in the same memory space. Intuitively, if custom settings can be passed to matching functions, those settings should be limited to the function call. But we can also find evidence in the PCRE source code. In the legacy version of PCRE, the pcre_exec() function has a local match_data structure that includes the selected match limit setting. The structure is declared as part of the stack frame here. It is assigned the default match limit value here and, if specified, the custom match limit value here. Since the custom setting is maintained as part of the stack frame, it should have no global effects on other PCRE users or even other subsequent PCRE calls from ModSecurity.
Is ModSecurity affected by changes to the global PCRE default match limit? Today, the answer is yes, but there is a straightforward fix.ModSecurity can isolate itself from PCRE's default by choosing its own default match limit (even just PCRE's normal default of 10,000,000) and always specifying that limit when invoking pcre_exec() or pcre2_match(). If ModSecurity did this for all PCRE limits instead of relying upon PCRE defaults, ModSecurity users could be isolated from the effects of modified PCRE defaults.
Whether to allow regex engine configuration is up to the ModSecurity maintainers, but some ModSecurity users want this level of configurability.Eliminating the possibility of ReDoS prior to invoking PCRE or another regex engine is a noble goal, but such a feature does not exist in ModSecurity today. In the meantime, ModSecurity users have real ReDoS concerns that can be addressed through regular expression engine configuration, and such configuration could co-exist peacefully with more proactive anti-ReDoS measures when they are developed.

Implementation
This PR re-enables the SecPcreMatchLimit config directive, saves the match limit as a transaction property, and applies the limit in the rx and rxGlobal operators. This works with both PCRE and the experimental PCRE2 support.
This PR also adds RX_ERROR and RX_ERROR_RULE_ID variables which are set in the event of a regular expression error. RX_ERROR exposes the reason for error and can be set to either ""MATCH_LIMIT"" or ""OTHER"". RX_ERROR_RULE_ID exposes the rule ID where the regex error happened so error-handling rules can be written to respond differently based on a specific rule ID or range of rule IDs.
Here is a naive example of rules written against the RX error variables:
# Deny requests when rule IDs in the 2xxx range encounter a regex error
SecRule RX_ERROR_RULE_ID ""@beginsWith 2"" ""id:3330,phase:2,auditlog,deny,msg:'Class 2xxx rule %{RX_ERROR_RULE_ID} encountered regex error %{RX_ERROR}',chain""
		SecRule RX_RULE_ERROR_ID ""@eq 4"" ""t:length""

# Log when other rules encounter a regex error
SecRule RX_ERROR ""@gt 0"" ""t:length,id:3331,phase:2,log,auditlog,allow,msg:'Rule %{RX_ERROR_RULE_ID} encountered regex error %{RX_ERROR}'""

Review
Arguably, regex engine configuration and regex error handling could be split into two PRs, but I'm starting with a single PR for the sake of discussion.
What do you think? Is this a reasonable change? Would you be willing to reconsider allowing users to set ModSecurity-specific PCRE match limits?","This PR ...

Adds support for PCRE and PCRE2 match limits as a last line of defense against ReDoS. Match limits are applied per PCRE invocation and do not change the global PCRE match limit default, which means the limits are isolated to ModSecurity and shouldn't affect other uses of PCRE in the same program.
Exposes regex errors as the variables RX_ERROR and RX_ERROR_RULE_ID so that regex engine failures can be handled by dedicated rules, rather than silently ignored. Today, if regex execution returns an error, the rx and rxGlobal operators simply fail to match. This could even be considered a security concern since such a regex error will cause a rule to be quietly bypassed.

NOTE: In the future, ModSecurity may support more proactive measures to identify vulnerable regular expressions before they can be used, but there is no harm in keeping multiple layers of defense. Doing so may even be wise, in the same way we design modern buildings to avoid fires yet still employ fire fighters for emergencies.
Background
A similar PR was rejected in the past, and if I understand correctly, it was rejected for the following reasons:

A belief that setting PCRE match limits would effect other PCRE users in the same memory space #
Users were concerned and confused about how global PCRE match limits, set for things like PHP, also affected ModSecurity #
The maintainers desire to avoid entanglement and user confusion with PCRE limits by finding other ways to avoid ReDoS #

If that is correct, I think it is worth revisiting these reasons:

Can we set match limits without affecting other PCRE users in the same memory space? Yes.Match limits can be applied to individual PCRE pcre_exec() and PCRE2 pcre2_match() invocations without affecting other PCRE uses in the same memory space. Intuitively, if custom settings can be passed to matching functions, those settings should be limited to the function call. But we can also find evidence in the PCRE source code. In the legacy version of PCRE, the pcre_exec() function has a local match_data structure that includes the selected match limit setting. The structure is declared as part of the stack frame here. It is assigned the default match limit value here and, if specified, the custom match limit value here. Since the custom setting is maintained as part of the stack frame, it should have no global effects on other PCRE users or even other subsequent PCRE calls from ModSecurity.
Is ModSecurity affected by changes to the global PCRE default match limit? Today, the answer is yes, but there is a straightforward fix.ModSecurity can isolate itself from PCRE's default by choosing its own default match limit (even just PCRE's normal default of 10,000,000) and always specifying that limit when invoking pcre_exec() or pcre2_match(). If ModSecurity did this for all PCRE limits instead of relying upon PCRE defaults, ModSecurity users could be isolated from the effects of modified PCRE defaults.
Whether to allow regex engine configuration is up to the ModSecurity maintainers, but some ModSecurity users want this level of configurability.Eliminating the possibility of ReDoS prior to invoking PCRE or another regex engine is a noble goal, but such a feature does not exist in ModSecurity today. In the meantime, ModSecurity users have real ReDoS concerns that can be addressed through regular expression engine configuration, and such configuration could co-exist peacefully with more proactive anti-ReDoS measures when they are developed.

Implementation
This PR re-enables the SecPcreMatchLimit config directive, saves the match limit as a transaction property, and applies the limit in the rx and rxGlobal operators. This works with both PCRE and the experimental PCRE2 support.
This PR also adds RX_ERROR and RX_ERROR_RULE_ID variables which are set in the event of a regular expression error. RX_ERROR exposes the reason for error and can be set to either ""MATCH_LIMIT"" or ""OTHER"". RX_ERROR_RULE_ID exposes the rule ID where the regex error happened so error-handling rules can be written to respond differently based on a specific rule ID or range of rule IDs.
Here is a naive example of rules written against the RX error variables:
# Deny requests when rule IDs in the 2xxx range encounter a regex error
SecRule RX_ERROR_RULE_ID ""@beginsWith 2"" ""id:3330,phase:2,auditlog,deny,msg:'Class 2xxx rule %{RX_ERROR_RULE_ID} encountered regex error %{RX_ERROR}',chain""
		SecRule RX_RULE_ERROR_ID ""@eq 4"" ""t:length""

# Log when other rules encounter a regex error
SecRule RX_ERROR ""@gt 0"" ""t:length,id:3331,phase:2,log,auditlog,allow,msg:'Rule %{RX_ERROR_RULE_ID} encountered regex error %{RX_ERROR}'""

Review
Arguably, regex engine configuration and regex error handling could be split into two PRs, but I'm starting with a single PR for the sake of discussion.
What do you think? Is this a reasonable change? Would you be willing to reconsider allowing users to set ModSecurity-specific PCRE match limits?",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2736,2022-05-03T21:14:01Z,,2022-05-09T14:54:30Z,OPEN,False,7513,7121,17,https://github.com/brandonpayton,Add isolated PCRE match limits as a layer of ReDoS defense,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2736,https://github.com/martinhsv,2,https://github.com/SpiderLabs/ModSecurity/pull/2736#issuecomment-1121210013,"This PR ...

Adds support for PCRE and PCRE2 match limits as a last line of defense against ReDoS. Match limits are applied per PCRE invocation and do not change the global PCRE match limit default, which means the limits are isolated to ModSecurity and shouldn't affect other uses of PCRE in the same program.
Exposes regex errors as the variables RX_ERROR and RX_ERROR_RULE_ID so that regex engine failures can be handled by dedicated rules, rather than silently ignored. Today, if regex execution returns an error, the rx and rxGlobal operators simply fail to match. This could even be considered a security concern since such a regex error will cause a rule to be quietly bypassed.

NOTE: In the future, ModSecurity may support more proactive measures to identify vulnerable regular expressions before they can be used, but there is no harm in keeping multiple layers of defense. Doing so may even be wise, in the same way we design modern buildings to avoid fires yet still employ fire fighters for emergencies.
Background
A similar PR was rejected in the past, and if I understand correctly, it was rejected for the following reasons:

A belief that setting PCRE match limits would effect other PCRE users in the same memory space #
Users were concerned and confused about how global PCRE match limits, set for things like PHP, also affected ModSecurity #
The maintainers desire to avoid entanglement and user confusion with PCRE limits by finding other ways to avoid ReDoS #

If that is correct, I think it is worth revisiting these reasons:

Can we set match limits without affecting other PCRE users in the same memory space? Yes.Match limits can be applied to individual PCRE pcre_exec() and PCRE2 pcre2_match() invocations without affecting other PCRE uses in the same memory space. Intuitively, if custom settings can be passed to matching functions, those settings should be limited to the function call. But we can also find evidence in the PCRE source code. In the legacy version of PCRE, the pcre_exec() function has a local match_data structure that includes the selected match limit setting. The structure is declared as part of the stack frame here. It is assigned the default match limit value here and, if specified, the custom match limit value here. Since the custom setting is maintained as part of the stack frame, it should have no global effects on other PCRE users or even other subsequent PCRE calls from ModSecurity.
Is ModSecurity affected by changes to the global PCRE default match limit? Today, the answer is yes, but there is a straightforward fix.ModSecurity can isolate itself from PCRE's default by choosing its own default match limit (even just PCRE's normal default of 10,000,000) and always specifying that limit when invoking pcre_exec() or pcre2_match(). If ModSecurity did this for all PCRE limits instead of relying upon PCRE defaults, ModSecurity users could be isolated from the effects of modified PCRE defaults.
Whether to allow regex engine configuration is up to the ModSecurity maintainers, but some ModSecurity users want this level of configurability.Eliminating the possibility of ReDoS prior to invoking PCRE or another regex engine is a noble goal, but such a feature does not exist in ModSecurity today. In the meantime, ModSecurity users have real ReDoS concerns that can be addressed through regular expression engine configuration, and such configuration could co-exist peacefully with more proactive anti-ReDoS measures when they are developed.

Implementation
This PR re-enables the SecPcreMatchLimit config directive, saves the match limit as a transaction property, and applies the limit in the rx and rxGlobal operators. This works with both PCRE and the experimental PCRE2 support.
This PR also adds RX_ERROR and RX_ERROR_RULE_ID variables which are set in the event of a regular expression error. RX_ERROR exposes the reason for error and can be set to either ""MATCH_LIMIT"" or ""OTHER"". RX_ERROR_RULE_ID exposes the rule ID where the regex error happened so error-handling rules can be written to respond differently based on a specific rule ID or range of rule IDs.
Here is a naive example of rules written against the RX error variables:
# Deny requests when rule IDs in the 2xxx range encounter a regex error
SecRule RX_ERROR_RULE_ID ""@beginsWith 2"" ""id:3330,phase:2,auditlog,deny,msg:'Class 2xxx rule %{RX_ERROR_RULE_ID} encountered regex error %{RX_ERROR}',chain""
		SecRule RX_RULE_ERROR_ID ""@eq 4"" ""t:length""

# Log when other rules encounter a regex error
SecRule RX_ERROR ""@gt 0"" ""t:length,id:3331,phase:2,log,auditlog,allow,msg:'Rule %{RX_ERROR_RULE_ID} encountered regex error %{RX_ERROR}'""

Review
Arguably, regex engine configuration and regex error handling could be split into two PRs, but I'm starting with a single PR for the sake of discussion.
What do you think? Is this a reasonable change? Would you be willing to reconsider allowing users to set ModSecurity-specific PCRE match limits?","Hello @brandonpayton ,
Thanks for the contribution.
While that earlier PR predates my involvement in the project, I do know and agree that concern about limits intended for ModSecurity having effects beyond ModSecurity was indeed a reason to avoid some possible implementations. I don't know that there were any such tangible reasons associated with not considering the per-transaction overrides that you are proposing here.
I have not examined the code in this PR in detail, but I'll make a few observations to start with:

I am open to considering this; as long as the wider side-effects mentioned above can be avoided (which certainly seems to be the case, based on the documentation), this is a reasonable subject to revisit
I think I like your idea of having one or two new error variables available for this condition; without a signal like that available for additional rules to examine, we have a rather uncomfortable scenario where neither 'assume match' nor 'assume no match' can be considered a universally 'safe' option
There is, in principal, an intention to support other regex engines besides pcre/pcre2 (Hyperscan and RE2) and it's always preferable if the same options are supported in the other engines as well. However, even if that is not the case, and those per-transaction limits can only be made to work with pcre/pcre2, I'm not sure that's a good enough reason to reject it",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2738,2022-05-04T20:34:45Z,2022-05-17T18:43:22Z,2022-05-17T18:43:22Z,MERGED,True,10,0,1,https://github.com/martinhsv,Add SecArgumentsLimit to modsecurity.conf-recommended,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2738,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2738,"As of v3.0.5, libModSecurity has included (via #2234) a configuration directive called SecArgumentsLimit that can help protect against certain performance impacts. There is no default value, so if the configuration item is not specified, the limit is not used.
This pull request does not add any new functionality. It only supplies a default value in modsecurity.conf-recommended, along with a new rule to also reject requests that exceed the limit.
The goal here is merely to make it simpler for users (especially new users) to produce a usable and safe configuration.
Community input is welcome, particularly if:

you think including this is a bad idea in general
you think the default value of 1000 is too low for a substantial percentage of deployments

(The current plan is to include this in v3.0.7, which is likely to be published within 2 weeks or less.)","As of v3.0.5, libModSecurity has included (via #2234) a configuration directive called SecArgumentsLimit that can help protect against certain performance impacts. There is no default value, so if the configuration item is not specified, the limit is not used.
This pull request does not add any new functionality. It only supplies a default value in modsecurity.conf-recommended, along with a new rule to also reject requests that exceed the limit.
The goal here is merely to make it simpler for users (especially new users) to produce a usable and safe configuration.
Community input is welcome, particularly if:

you think including this is a bad idea in general
you think the default value of 1000 is too low for a substantial percentage of deployments

(The current plan is to include this in v3.0.7, which is likely to be published within 2 weeks or less.)",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2748,2022-05-27T10:29:32Z,,2022-05-27T10:29:32Z,OPEN,False,20,0,7,https://github.com/FedericoHeichou,Feature request: adding severity in ModSecurityIntervention,2,[],https://github.com/SpiderLabs/ModSecurity/pull/2748,https://github.com/FedericoHeichou,1,https://github.com/SpiderLabs/ModSecurity/pull/2748,"Hi, I think would be very useful adding in ModSecurityIntervention a severity field populated by disruptives evaluate function.
In this way a connector can use the intervention.log based the severity of the log.
For example SpiderLabs/ModSecurity-nginx#274","Hi, I think would be very useful adding in ModSecurityIntervention a severity field populated by disruptives evaluate function.
In this way a connector can use the intervention.log based the severity of the log.
For example SpiderLabs/ModSecurity-nginx#274",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2749,2022-05-27T18:07:32Z,2022-05-27T18:09:41Z,2022-05-27T18:09:41Z,MERGED,True,3,1,2,https://github.com/martinhsv,mlogc log-line parsing fails due to enhanced timestamp,1,['2.x - mlogc'],https://github.com/SpiderLabs/ModSecurity/pull/2749,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2749,Closes #2682,Closes #2682,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2751,2022-05-31T20:46:07Z,2022-06-02T01:53:04Z,2022-06-02T01:53:04Z,CLOSED,False,1,0,1,https://github.com/tylermods123,Create mod,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2751,https://github.com/tylermods123,1,https://github.com/SpiderLabs/ModSecurity/pull/2751,dhdhffffhdudddd,dhdhffffhdudddd,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2751,2022-05-31T20:46:07Z,2022-06-02T01:53:04Z,2022-06-02T01:53:04Z,CLOSED,False,1,0,1,https://github.com/tylermods123,Create mod,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2751,https://github.com/martinhsv,2,https://github.com/SpiderLabs/ModSecurity/pull/2751#issuecomment-1144334158,dhdhffffhdudddd,"This does not appear to be a real pull request for this project.
Closing.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2753,2022-06-01T14:21:48Z,,2022-06-01T14:21:48Z,OPEN,False,3,1,2,https://github.com/martinhsv,Fix: negative usec on log line when data type long is 32b,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2753,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2753,"In environments where the data type 'long' is only 32 bits, the milliseconds portion of the timestamp in a log line may appear as a negative number.","In environments where the data type 'long' is only 32 bits, the milliseconds portion of the timestamp in a log line may appear as a negative number.",True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2757,2022-06-02T22:21:46Z,,2022-06-02T22:21:46Z,OPEN,False,3,4,1,https://github.com/jeremiah,Update README.md with syntax changes,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2757,https://github.com/jeremiah,1,https://github.com/SpiderLabs/ModSecurity/pull/2757,Syntax changes that increase comprehension especially for native English speakers.,Syntax changes that increase comprehension especially for native English speakers.,True,{}
SpiderLabs/ModSecurity,https://github.com/SpiderLabs/ModSecurity,2758,2022-06-03T17:35:37Z,,2022-06-03T17:35:37Z,OPEN,False,3,3,1,https://github.com/martinhsv,Restore Unique_id to include random portion after timestamp,1,[],https://github.com/SpiderLabs/ModSecurity/pull/2758,https://github.com/martinhsv,1,https://github.com/SpiderLabs/ModSecurity/pull/2758,Closes #2752,Closes #2752,True,{}
