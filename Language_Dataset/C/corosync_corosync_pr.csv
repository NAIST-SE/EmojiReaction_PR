corosync/corosync,https://github.com/corosync/corosync,114,2016-02-24T13:21:16Z,2016-02-24T15:08:07Z,2016-02-25T09:14:38Z,CLOSED,False,6,2,1,https://github.com/athira-rajeev,memory not unmapped in cpg_zcb_free,1,[],https://github.com/corosync/corosync/pull/114,https://github.com/athira-rajeev,1,https://github.com/corosync/corosync/pull/114,"This patch is for issue #113
Here after more iterations of cpg_zcb_alloc and cpg_zcb_free, corosync was getting killed with ENOMEM.
Function in cpg_zcb_alloc ( from code lib/cpg.c ) creates /dev/shm/corosync_zerocopy-XXXXX and does mmap
The memory is allocated by corosync service ( Function zcb_alloc in code exec/cpg.c ) also and both shares this memory via mmap ( uses MAP_SHARED in mmap call )
corosync calls unlink which deletes the file from /dev/shm while closing the file descriptor, but unmap is not happening correctly while calling cpg_zcb_free.
So:

still the deleted file holds the memory
As munmap is not happening correctly, the number of mappings per process gets exceeded and corosync dies with ENOMEM

From gdb, the size passed to munmap appears to be zero and address looks wrong.
Also in the code return code of munmap is not checked.
The patch adds check for:

munmap return code and getting correct address for munmap

Signed-off-by: Athira Rajeevatrajeev@linux.vnet.ibm.com","This patch is for issue #113
Here after more iterations of cpg_zcb_alloc and cpg_zcb_free, corosync was getting killed with ENOMEM.
Function in cpg_zcb_alloc ( from code lib/cpg.c ) creates /dev/shm/corosync_zerocopy-XXXXX and does mmap
The memory is allocated by corosync service ( Function zcb_alloc in code exec/cpg.c ) also and both shares this memory via mmap ( uses MAP_SHARED in mmap call )
corosync calls unlink which deletes the file from /dev/shm while closing the file descriptor, but unmap is not happening correctly while calling cpg_zcb_free.
So:

still the deleted file holds the memory
As munmap is not happening correctly, the number of mappings per process gets exceeded and corosync dies with ENOMEM

From gdb, the size passed to munmap appears to be zero and address looks wrong.
Also in the code return code of munmap is not checked.
The patch adds check for:

munmap return code and getting correct address for munmap

Signed-off-by: Athira Rajeevatrajeev@linux.vnet.ibm.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,114,2016-02-24T13:21:16Z,2016-02-24T15:08:07Z,2016-02-25T09:14:38Z,CLOSED,False,6,2,1,https://github.com/athira-rajeev,memory not unmapped in cpg_zcb_free,1,[],https://github.com/corosync/corosync/pull/114,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/114#issuecomment-188296856,"This patch is for issue #113
Here after more iterations of cpg_zcb_alloc and cpg_zcb_free, corosync was getting killed with ENOMEM.
Function in cpg_zcb_alloc ( from code lib/cpg.c ) creates /dev/shm/corosync_zerocopy-XXXXX and does mmap
The memory is allocated by corosync service ( Function zcb_alloc in code exec/cpg.c ) also and both shares this memory via mmap ( uses MAP_SHARED in mmap call )
corosync calls unlink which deletes the file from /dev/shm while closing the file descriptor, but unmap is not happening correctly while calling cpg_zcb_free.
So:

still the deleted file holds the memory
As munmap is not happening correctly, the number of mappings per process gets exceeded and corosync dies with ENOMEM

From gdb, the size passed to munmap appears to be zero and address looks wrong.
Also in the code return code of munmap is not checked.
The patch adds check for:

munmap return code and getting correct address for munmap

Signed-off-by: Athira Rajeevatrajeev@linux.vnet.ibm.com","@athira-rajeev Thanks for patch. Generally idea is correct, but implementation had some small problems (indentation, hdp_handle_put was not called, error was not correctly set). I've fixed these and result is in master as 1130e18 and 3f51b16.
Thanks again for patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,114,2016-02-24T13:21:16Z,2016-02-24T15:08:07Z,2016-02-25T09:14:38Z,CLOSED,False,6,2,1,https://github.com/athira-rajeev,memory not unmapped in cpg_zcb_free,1,[],https://github.com/corosync/corosync/pull/114,https://github.com/athira-rajeev,3,https://github.com/corosync/corosync/pull/114#issuecomment-188622189,"This patch is for issue #113
Here after more iterations of cpg_zcb_alloc and cpg_zcb_free, corosync was getting killed with ENOMEM.
Function in cpg_zcb_alloc ( from code lib/cpg.c ) creates /dev/shm/corosync_zerocopy-XXXXX and does mmap
The memory is allocated by corosync service ( Function zcb_alloc in code exec/cpg.c ) also and both shares this memory via mmap ( uses MAP_SHARED in mmap call )
corosync calls unlink which deletes the file from /dev/shm while closing the file descriptor, but unmap is not happening correctly while calling cpg_zcb_free.
So:

still the deleted file holds the memory
As munmap is not happening correctly, the number of mappings per process gets exceeded and corosync dies with ENOMEM

From gdb, the size passed to munmap appears to be zero and address looks wrong.
Also in the code return code of munmap is not checked.
The patch adds check for:

munmap return code and getting correct address for munmap

Signed-off-by: Athira Rajeevatrajeev@linux.vnet.ibm.com",@jfriesse   Thanks for the review and pulling in the patch,True,{}
corosync/corosync,https://github.com/corosync/corosync,117,2016-03-22T08:25:03Z,2016-03-22T14:02:05Z,2016-03-22T14:02:32Z,CLOSED,False,21,2,1,https://github.com/jfriesse,totemconfig: Properly check transport key,1,[],https://github.com/corosync/corosync/pull/117,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/117,"If transport key had invalid value, udp multicast was used. It make
sense to really check value and display error on unknown value. Also iba
transport is valid only if corosync was compiled with RDMA
support.
Signed-off-by: Jan Friesse jfriesse@redhat.com","If transport key had invalid value, udp multicast was used. It make
sense to really check value and display error on unknown value. Also iba
transport is valid only if corosync was compiled with RDMA
support.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,117,2016-03-22T08:25:03Z,2016-03-22T14:02:05Z,2016-03-22T14:02:32Z,CLOSED,False,21,2,1,https://github.com/jfriesse,totemconfig: Properly check transport key,1,[],https://github.com/corosync/corosync/pull/117,https://github.com/chrissie-c,2,https://github.com/corosync/corosync/pull/117#issuecomment-199727166,"If transport key had invalid value, udp multicast was used. It make
sense to really check value and display error on unknown value. Also iba
transport is valid only if corosync was compiled with RDMA
support.
Signed-off-by: Jan Friesse jfriesse@redhat.com",ACK,True,{}
corosync/corosync,https://github.com/corosync/corosync,117,2016-03-22T08:25:03Z,2016-03-22T14:02:05Z,2016-03-22T14:02:32Z,CLOSED,False,21,2,1,https://github.com/jfriesse,totemconfig: Properly check transport key,1,[],https://github.com/corosync/corosync/pull/117,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/117#issuecomment-199828537,"If transport key had invalid value, udp multicast was used. It make
sense to really check value and display error on unknown value. Also iba
transport is valid only if corosync was compiled with RDMA
support.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c Thanks for quick review. Commit is now in flatiron as 1a594c6.,True,{}
corosync/corosync,https://github.com/corosync/corosync,118,2016-04-06T14:01:05Z,2016-04-07T12:46:01Z,2016-04-07T12:46:11Z,CLOSED,False,6,4,1,https://github.com/jfriesse,totemconfig: Explicitly pass IP version,1,[],https://github.com/corosync/corosync/pull/118,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/118,"If resolver was set to prefer IPv6 (almost always) and interface section
was not defined (almost all config files created by pcs), IP version was
set to mcast_addr.family. Because mcast_addr.family was unset (reset to
zero), IPv6 address was returned causing failure in totemsrp.
Solution is to pass correct IP version stored in
totem_config->ip_version.
Patch also simplifies get_cluster_mcast_addr. It was using mix of
explicitly passed IP version and bindnet IP version.
Also return value of get_cluster_mcast_addr is now properly checked.
Signed-off-by: Jan Friesse jfriesse@redhat.com","If resolver was set to prefer IPv6 (almost always) and interface section
was not defined (almost all config files created by pcs), IP version was
set to mcast_addr.family. Because mcast_addr.family was unset (reset to
zero), IPv6 address was returned causing failure in totemsrp.
Solution is to pass correct IP version stored in
totem_config->ip_version.
Patch also simplifies get_cluster_mcast_addr. It was using mix of
explicitly passed IP version and bindnet IP version.
Also return value of get_cluster_mcast_addr is now properly checked.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,118,2016-04-06T14:01:05Z,2016-04-07T12:46:01Z,2016-04-07T12:46:11Z,CLOSED,False,6,4,1,https://github.com/jfriesse,totemconfig: Explicitly pass IP version,1,[],https://github.com/corosync/corosync/pull/118,https://github.com/chrissie-c,2,https://github.com/corosync/corosync/pull/118#issuecomment-206860274,"If resolver was set to prefer IPv6 (almost always) and interface section
was not defined (almost all config files created by pcs), IP version was
set to mcast_addr.family. Because mcast_addr.family was unset (reset to
zero), IPv6 address was returned causing failure in totemsrp.
Solution is to pass correct IP version stored in
totem_config->ip_version.
Patch also simplifies get_cluster_mcast_addr. It was using mix of
explicitly passed IP version and bindnet IP version.
Also return value of get_cluster_mcast_addr is now properly checked.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Nice patch, ACK.",True,{}
corosync/corosync,https://github.com/corosync/corosync,118,2016-04-06T14:01:05Z,2016-04-07T12:46:01Z,2016-04-07T12:46:11Z,CLOSED,False,6,4,1,https://github.com/jfriesse,totemconfig: Explicitly pass IP version,1,[],https://github.com/corosync/corosync/pull/118,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/118#issuecomment-206874148,"If resolver was set to prefer IPv6 (almost always) and interface section
was not defined (almost all config files created by pcs), IP version was
set to mcast_addr.family. Because mcast_addr.family was unset (reset to
zero), IPv6 address was returned causing failure in totemsrp.
Solution is to pass correct IP version stored in
totem_config->ip_version.
Patch also simplifies get_cluster_mcast_addr. It was using mix of
explicitly passed IP version and bindnet IP version.
Also return value of get_cluster_mcast_addr is now properly checked.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c Thanks for review. Patch is now in master as 60565b7.,True,{}
corosync/corosync,https://github.com/corosync/corosync,119,2016-04-21T12:52:54Z,2016-04-22T11:02:17Z,2016-04-22T11:02:17Z,CLOSED,False,50,63,1,https://github.com/chrissie-c,parser:  Make config file parser more hierarchy aware,2,[],https://github.com/corosync/corosync/pull/119,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/119,"Pass 'state' down the stack so that the state of the
hierarchy doesn't get lost when there are unexpected items
in the config hierarchy. bz#1317573","Pass 'state' down the stack so that the state of the
hierarchy doesn't get lost when there are unexpected items
in the config hierarchy. bz#1317573",True,{}
corosync/corosync,https://github.com/corosync/corosync,119,2016-04-21T12:52:54Z,2016-04-22T11:02:17Z,2016-04-22T11:02:17Z,CLOSED,False,50,63,1,https://github.com/chrissie-c,parser:  Make config file parser more hierarchy aware,2,[],https://github.com/corosync/corosync/pull/119,https://github.com/chrissie-c,2,https://github.com/corosync/corosync/pull/119#issuecomment-213365458,"Pass 'state' down the stack so that the state of the
hierarchy doesn't get lost when there are unexpected items
in the config hierarchy. bz#1317573",Updated patch after some comments from Honza,True,{}
corosync/corosync,https://github.com/corosync/corosync,119,2016-04-21T12:52:54Z,2016-04-22T11:02:17Z,2016-04-22T11:02:17Z,CLOSED,False,50,63,1,https://github.com/chrissie-c,parser:  Make config file parser more hierarchy aware,2,[],https://github.com/corosync/corosync/pull/119,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/119#issuecomment-213380246,"Pass 'state' down the stack so that the state of the
hierarchy doesn't get lost when there are unexpected items
in the config hierarchy. bz#1317573","@chrissie-c Nice work, thanks for the patch. I've squashed two commits into one and pushed into master as aab55a0",True,{}
corosync/corosync,https://github.com/corosync/corosync,120,2016-04-26T08:53:06Z,2016-04-26T10:26:16Z,2016-04-26T10:26:32Z,MERGED,True,1,1,1,https://github.com/chrissie-c,logsys: fix TOTEM logging when corosync built out of tree,1,[],https://github.com/corosync/corosync/pull/120,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/120,"If corosync is built out-of-tree (passing --srcdir to configure) then
TOTEM logging doesn't print anything.
This is caused by the source filenames (from FILE at compilation
time) having the configured path in them - in this example
../corosync/exec/totemudp.c etc. The list of totem source filenames
passed to libqb logging facility only has the basenames so the filenames
never match up as libqb does an exact string match.
I looked into fixing this in libqb but it causes a regression. We can't
simply basename() FILE at the point of calling log_printf as it's i
common also to use FILE to generate the logging source, and
using basename() on both removes the distinction between similarly named
files from different directories which could be a requirement.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","If corosync is built out-of-tree (passing --srcdir to configure) then
TOTEM logging doesn't print anything.
This is caused by the source filenames (from FILE at compilation
time) having the configured path in them - in this example
../corosync/exec/totemudp.c etc. The list of totem source filenames
passed to libqb logging facility only has the basenames so the filenames
never match up as libqb does an exact string match.
I looked into fixing this in libqb but it causes a regression. We can't
simply basename() FILE at the point of calling log_printf as it's i
common also to use FILE to generate the logging source, and
using basename() on both removes the distinction between similarly named
files from different directories which could be a requirement.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,120,2016-04-26T08:53:06Z,2016-04-26T10:26:16Z,2016-04-26T10:26:32Z,MERGED,True,1,1,1,https://github.com/chrissie-c,logsys: fix TOTEM logging when corosync built out of tree,1,[],https://github.com/corosync/corosync/pull/120,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/120#issuecomment-214695775,"If corosync is built out-of-tree (passing --srcdir to configure) then
TOTEM logging doesn't print anything.
This is caused by the source filenames (from FILE at compilation
time) having the configured path in them - in this example
../corosync/exec/totemudp.c etc. The list of totem source filenames
passed to libqb logging facility only has the basenames so the filenames
never match up as libqb does an exact string match.
I looked into fixing this in libqb but it causes a regression. We can't
simply basename() FILE at the point of calling log_printf as it's i
common also to use FILE to generate the logging source, and
using basename() on both removes the distinction between similarly named
files from different directories which could be a requirement.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","ACK + ""merged""",True,{}
corosync/corosync,https://github.com/corosync/corosync,121,2016-04-29T08:13:27Z,2016-04-30T00:07:44Z,2016-04-30T00:07:44Z,CLOSED,False,8573,83,90,https://github.com/jonesmz,Adds doxygen documentation stubs,2,[],https://github.com/corosync/corosync/pull/121,https://github.com/jonesmz,1,https://github.com/corosync/corosync/pull/121,"This pull request adds doxygen documentation stubs to most (but not all) functions, enums, structs, and typedefs.
Most of the stubs have no content. The Corosync codebase is far to complex for me to be able to confidently add documentation to everything at this time.
Instead, this pull request adds blank documentation stubs to everything to allow other developers to add meaningful comments to functions as they're making other changes.
It's my hope that Corosync can some day have 100% documentation coverage.","This pull request adds doxygen documentation stubs to most (but not all) functions, enums, structs, and typedefs.
Most of the stubs have no content. The Corosync codebase is far to complex for me to be able to confidently add documentation to everything at this time.
Instead, this pull request adds blank documentation stubs to everything to allow other developers to add meaningful comments to functions as they're making other changes.
It's my hope that Corosync can some day have 100% documentation coverage.",True,{}
corosync/corosync,https://github.com/corosync/corosync,121,2016-04-29T08:13:27Z,2016-04-30T00:07:44Z,2016-04-30T00:07:44Z,CLOSED,False,8573,83,90,https://github.com/jonesmz,Adds doxygen documentation stubs,2,[],https://github.com/corosync/corosync/pull/121,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/121#issuecomment-215658082,"This pull request adds doxygen documentation stubs to most (but not all) functions, enums, structs, and typedefs.
Most of the stubs have no content. The Corosync codebase is far to complex for me to be able to confidently add documentation to everything at this time.
Instead, this pull request adds blank documentation stubs to everything to allow other developers to add meaningful comments to functions as they're making other changes.
It's my hope that Corosync can some day have 100% documentation coverage.","@jonesmz Idea of more documentation is good but I'm not entirely sure you choose good way.
Doxygen comments in *.c files are simply useless. It is pretty normal that developers don't update documentation when changing function making documentation telling something else than real code does (what's even worse than no doc at all).
Documentation of exported *.h files (basically everything in include directory) make sense.
Can you reduce your patch just to files in include directory?",True,{}
corosync/corosync,https://github.com/corosync/corosync,122,2016-04-29T22:54:58Z,2016-06-12T04:10:38Z,2016-06-12T04:10:39Z,CLOSED,False,13609,19209,116,https://github.com/jonesmz,Adds .clang-format,2,[],https://github.com/corosync/corosync/pull/122,https://github.com/jonesmz,1,https://github.com/corosync/corosync/pull/122,"This .clang-format file is written for clang-format version 3.7.1
I've attempted to set the options for clang-format so that the difference between the current code, and the result of the clang format call is as small as possible.
Unfortunately, clang-format doesn't yet have the ability to handle every single possible formatting option, so it's not perfect yet.
Nevertheless, I think you'll agree that having some consistent, programmatically enforced, style for the corosync codebase would be nice.","This .clang-format file is written for clang-format version 3.7.1
I've attempted to set the options for clang-format so that the difference between the current code, and the result of the clang format call is as small as possible.
Unfortunately, clang-format doesn't yet have the ability to handle every single possible formatting option, so it's not perfect yet.
Nevertheless, I think you'll agree that having some consistent, programmatically enforced, style for the corosync codebase would be nice.",True,{}
corosync/corosync,https://github.com/corosync/corosync,122,2016-04-29T22:54:58Z,2016-06-12T04:10:38Z,2016-06-12T04:10:39Z,CLOSED,False,13609,19209,116,https://github.com/jonesmz,Adds .clang-format,2,[],https://github.com/corosync/corosync/pull/122,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/122#issuecomment-216164193,"This .clang-format file is written for clang-format version 3.7.1
I've attempted to set the options for clang-format so that the difference between the current code, and the result of the clang format call is as small as possible.
Unfortunately, clang-format doesn't yet have the ability to handle every single possible formatting option, so it's not perfect yet.
Nevertheless, I think you'll agree that having some consistent, programmatically enforced, style for the corosync codebase would be nice.","@jonesmz I can agree consistent style would be nice. What I don't agree is to change 4000 lines of code (it's probably better to enforce during git push eventho I'm not sure github allows to configure hook in way needed) and definitively it's bad time to change it now (it's pre 3.0 material).
So I keep this PR open to finally accept/deny it before start of 3.0 developement.",True,{}
corosync/corosync,https://github.com/corosync/corosync,122,2016-04-29T22:54:58Z,2016-06-12T04:10:38Z,2016-06-12T04:10:39Z,CLOSED,False,13609,19209,116,https://github.com/jonesmz,Adds .clang-format,2,[],https://github.com/corosync/corosync/pull/122,https://github.com/jonesmz,3,https://github.com/corosync/corosync/pull/122#issuecomment-216305860,"This .clang-format file is written for clang-format version 3.7.1
I've attempted to set the options for clang-format so that the difference between the current code, and the result of the clang format call is as small as possible.
Unfortunately, clang-format doesn't yet have the ability to handle every single possible formatting option, so it's not perfect yet.
Nevertheless, I think you'll agree that having some consistent, programmatically enforced, style for the corosync codebase would be nice.","@jfriesse
To be honest here, I actually didn't want to include the actual code reformatting. I pushed the second commit to github before remembering that it would automatically update the pull request. After I did that, I thought about closing this PR and making a new one, but figured ""eh, why not, at least they'll see what code changes come out of it""
If I create a new PR with only the .clang-format file, would that be better?
That way people would have it available, but none of the code would change automatically.",True,{}
corosync/corosync,https://github.com/corosync/corosync,122,2016-04-29T22:54:58Z,2016-06-12T04:10:38Z,2016-06-12T04:10:39Z,CLOSED,False,13609,19209,116,https://github.com/jonesmz,Adds .clang-format,2,[],https://github.com/corosync/corosync/pull/122,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/122#issuecomment-216560934,"This .clang-format file is written for clang-format version 3.7.1
I've attempted to set the options for clang-format so that the difference between the current code, and the result of the clang format call is as small as possible.
Unfortunately, clang-format doesn't yet have the ability to handle every single possible formatting option, so it's not perfect yet.
Nevertheless, I think you'll agree that having some consistent, programmatically enforced, style for the corosync codebase would be nice.","@jonesmz Ok, got it. I've merged the  Adds .clang-format  patch as 06058e3.
Thanks for patch.
I'm keeping this PR opened because it may make sense to run clang-format during the 3.0 development.",True,{}
corosync/corosync,https://github.com/corosync/corosync,123,2016-04-30T00:08:06Z,2016-05-12T14:00:56Z,2016-05-12T14:00:56Z,CLOSED,False,1859,185,23,https://github.com/jonesmz,Adds doxygen stubs to include directory,1,[],https://github.com/corosync/corosync/pull/123,https://github.com/jonesmz,1,https://github.com/corosync/corosync/pull/123,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,123,2016-04-30T00:08:06Z,2016-05-12T14:00:56Z,2016-05-12T14:00:56Z,CLOSED,False,1859,185,23,https://github.com/jonesmz,Adds doxygen stubs to include directory,1,[],https://github.com/corosync/corosync/pull/123,https://github.com/jonesmz,2,https://github.com/corosync/corosync/pull/123#issuecomment-216989496,,"Just wanted to check that you saw this PR? It adds the doxygen stubs to the include/ directory, instead of the whole codebase.",True,{}
corosync/corosync,https://github.com/corosync/corosync,123,2016-04-30T00:08:06Z,2016-05-12T14:00:56Z,2016-05-12T14:00:56Z,CLOSED,False,1859,185,23,https://github.com/jonesmz,Adds doxygen stubs to include directory,1,[],https://github.com/corosync/corosync/pull/123,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/123#issuecomment-217109119,,@jonesmz Yep seen that but didn't had time to review it.,True,{}
corosync/corosync,https://github.com/corosync/corosync,123,2016-04-30T00:08:06Z,2016-05-12T14:00:56Z,2016-05-12T14:00:56Z,CLOSED,False,1859,185,23,https://github.com/jonesmz,Adds doxygen stubs to include directory,1,[],https://github.com/corosync/corosync/pull/123,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/123#issuecomment-218766086,,"@jonesmz I've removed changes to totem subdirectory. It is internal and I don't expect it to be used in applications. Other changes are now in master as dfae95c.
Thanks for patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,125,2016-05-03T07:24:44Z,2016-05-03T13:48:32Z,2016-05-03T13:48:32Z,CLOSED,False,19,5,1,https://github.com/vvidic,wd: make watchdog device configurable,1,[],https://github.com/corosync/corosync/pull/125,https://github.com/vvidic,1,https://github.com/corosync/corosync/pull/125,"Add configuration option resources.watchdog_device allowing runtime
selection of watchdog device.  Useful for newer servers having more
than one watchdog available (IPMI and iTCO):
resources {
          watchdog_device: /dev/watchdog1
}

Special value ""off"" disables watchdog in configuration rather than
just using build options.  Useful when watchdog device is needed
elsewhere (SBD cluster stonith service):
resources {
        watchdog_device: off
}","Add configuration option resources.watchdog_device allowing runtime
selection of watchdog device.  Useful for newer servers having more
than one watchdog available (IPMI and iTCO):
resources {
          watchdog_device: /dev/watchdog1
}

Special value ""off"" disables watchdog in configuration rather than
just using build options.  Useful when watchdog device is needed
elsewhere (SBD cluster stonith service):
resources {
        watchdog_device: off
}",True,{}
corosync/corosync,https://github.com/corosync/corosync,125,2016-05-03T07:24:44Z,2016-05-03T13:48:32Z,2016-05-03T13:48:32Z,CLOSED,False,19,5,1,https://github.com/vvidic,wd: make watchdog device configurable,1,[],https://github.com/corosync/corosync/pull/125,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/125#issuecomment-216532675,"Add configuration option resources.watchdog_device allowing runtime
selection of watchdog device.  Useful for newer servers having more
than one watchdog available (IPMI and iTCO):
resources {
          watchdog_device: /dev/watchdog1
}

Special value ""off"" disables watchdog in configuration rather than
just using build options.  Useful when watchdog device is needed
elsewhere (SBD cluster stonith service):
resources {
        watchdog_device: off
}","@vvidic Really nice patch. I've merged it into master as 8d8d4a9.
Thanks for patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,126,2016-05-03T10:31:45Z,2016-05-03T13:31:41Z,2016-05-03T13:31:41Z,CLOSED,False,16,1,1,https://github.com/chrissie-c,logging: Use our own version of basename() for portability,1,[],https://github.com/corosync/corosync/pull/126,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/126,"Per issue  #124 the basename() function has some potentially odd issues on other platforms.
So, to be safe, here's an internal version.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","Per issue  #124 the basename() function has some potentially odd issues on other platforms.
So, to be safe, here's an internal version.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,126,2016-05-03T10:31:45Z,2016-05-03T13:31:41Z,2016-05-03T13:31:41Z,CLOSED,False,16,1,1,https://github.com/chrissie-c,logging: Use our own version of basename() for portability,1,[],https://github.com/corosync/corosync/pull/126,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/126#issuecomment-216528267,"Per issue  #124 the basename() function has some potentially odd issues on other platforms.
So, to be safe, here's an internal version.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",@chrissie-c Nice patch. ACK and merged as 1e2de52.,True,{}
corosync/corosync,https://github.com/corosync/corosync,127,2016-05-05T15:40:38Z,2018-01-30T12:44:30Z,2018-01-30T12:44:31Z,CLOSED,False,102,102,78,https://github.com/df7cb,Move _overview manpages to section 7,1,[],https://github.com/corosync/corosync/pull/127,https://github.com/df7cb,1,https://github.com/corosync/corosync/pull/127,"The _overview manpages are not actually commands and hence belong into
manpage section 7 ""Miscellaneous"".
References: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=576209","The _overview manpages are not actually commands and hence belong into
manpage section 7 ""Miscellaneous"".
References: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=576209",True,{}
corosync/corosync,https://github.com/corosync/corosync,127,2016-05-05T15:40:38Z,2018-01-30T12:44:30Z,2018-01-30T12:44:31Z,CLOSED,False,102,102,78,https://github.com/df7cb,Move _overview manpages to section 7,1,[],https://github.com/corosync/corosync/pull/127,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/127#issuecomment-218768891,"The _overview manpages are not actually commands and hence belong into
manpage section 7 ""Miscellaneous"".
References: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=576209","@ChristophBerg I can (to some extend) agree with corosync_overview going into section 7, but other overview files are kind of ""index"" to other man pages with given API. So if we want to follow stdlib (for example string(3), inet(3), ...) they should probably go to section 3 (almost for sure not 7).
Comments/opinions?",True,{}
corosync/corosync,https://github.com/corosync/corosync,127,2016-05-05T15:40:38Z,2018-01-30T12:44:30Z,2018-01-30T12:44:31Z,CLOSED,False,102,102,78,https://github.com/df7cb,Move _overview manpages to section 7,1,[],https://github.com/corosync/corosync/pull/127,https://github.com/sdake,3,https://github.com/corosync/corosync/pull/127#issuecomment-218792811,"The _overview manpages are not actually commands and hence belong into
manpage section 7 ""Miscellaneous"".
References: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=576209","jfriesse,
Agree.",True,{}
corosync/corosync,https://github.com/corosync/corosync,127,2016-05-05T15:40:38Z,2018-01-30T12:44:30Z,2018-01-30T12:44:31Z,CLOSED,False,102,102,78,https://github.com/df7cb,Move _overview manpages to section 7,1,[],https://github.com/corosync/corosync/pull/127,https://github.com/df7cb,4,https://github.com/corosync/corosync/pull/127#issuecomment-220715643,"The _overview manpages are not actually commands and hence belong into
manpage section 7 ""Miscellaneous"".
References: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=576209","@jfriesse Thanks for the feedback. I'm not sure I fully got you, did you mean to say that corosync_overview should go into section 7, but the other _overview manpages into section 3? When I created the patch I was starting with corosync_overview which is really a ""misc"" aka section 7 thing and then just treated the other the same, but on rereading them, they are indeed quite like string(3). (Though they do have real text in the body, and the various library functions are just in SEE ALSO.)",True,{}
corosync/corosync,https://github.com/corosync/corosync,127,2016-05-05T15:40:38Z,2018-01-30T12:44:30Z,2018-01-30T12:44:31Z,CLOSED,False,102,102,78,https://github.com/df7cb,Move _overview manpages to section 7,1,[],https://github.com/corosync/corosync/pull/127,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/127#issuecomment-220990444,"The _overview manpages are not actually commands and hence belong into
manpage section 7 ""Miscellaneous"".
References: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=576209","@ChristophBerg exactly. corosync_overview to 7, other _overview man pages into 3. Can you please prepare such patch?",True,{}
corosync/corosync,https://github.com/corosync/corosync,127,2016-05-05T15:40:38Z,2018-01-30T12:44:30Z,2018-01-30T12:44:31Z,CLOSED,False,102,102,78,https://github.com/df7cb,Move _overview manpages to section 7,1,[],https://github.com/corosync/corosync/pull/127,https://github.com/df7cb,6,https://github.com/corosync/corosync/pull/127#issuecomment-221095923,"The _overview manpages are not actually commands and hence belong into
manpage section 7 ""Miscellaneous"".
References: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=576209","Sure. I'm currently on a business trip, but I should get to it this week.",True,{}
corosync/corosync,https://github.com/corosync/corosync,127,2016-05-05T15:40:38Z,2018-01-30T12:44:30Z,2018-01-30T12:44:31Z,CLOSED,False,102,102,78,https://github.com/df7cb,Move _overview manpages to section 7,1,[],https://github.com/corosync/corosync/pull/127,https://github.com/jfriesse,7,https://github.com/corosync/corosync/pull/127#issuecomment-361582451,"The _overview manpages are not actually commands and hence belong into
manpage section 7 ""Miscellaneous"".
References: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=576209","@ChristophBerg: I'm really sorry but I've overlooked the new patch version you've made and then completely forgot this PR.
Anyway, nice patch, ACK and merged as 7162e75.
Thank you for the patch and once again sorry for the delay,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,128,2016-05-11T07:39:59Z,2016-10-17T07:49:16Z,2016-10-17T08:45:21Z,CLOSED,False,4,4,2,https://github.com/HideoYamauchi,Change a type of NodeID.,1,[],https://github.com/corosync/corosync/pull/128,https://github.com/HideoYamauchi,1,https://github.com/corosync/corosync/pull/128,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,128,2016-05-11T07:39:59Z,2016-10-17T07:49:16Z,2016-10-17T08:45:21Z,CLOSED,False,4,4,2,https://github.com/HideoYamauchi,Change a type of NodeID.,1,[],https://github.com/corosync/corosync/pull/128,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/128#issuecomment-218769357,,"@HideoYamauchi I can see rationale in patch, but before merging into master, I have one question. How backwards compatible is your change? If somebody is using traps/monitoring tools, is going everything work as before (only with just different type)?",True,{}
corosync/corosync,https://github.com/corosync/corosync,128,2016-05-11T07:39:59Z,2016-10-17T07:49:16Z,2016-10-17T08:45:21Z,CLOSED,False,4,4,2,https://github.com/HideoYamauchi,Change a type of NodeID.,1,[],https://github.com/corosync/corosync/pull/128,https://github.com/HideoYamauchi,3,https://github.com/corosync/corosync/pull/128#issuecomment-218868604,,"Hi Jan,
If your question shows the SNMP server which placed old corosync-notifyd and old COROSYNC.MIB, there is no compatibility.
(probably the trap message of the SNMP is handled with a bad value.)
I contribute this patch in a meaning same as the next correction.

5ab9227
8039cfe

If you make much of compatibility, I think that you should destroy this patch.
Best Regards,
Hideo Yamauchi.",True,{}
corosync/corosync,https://github.com/corosync/corosync,128,2016-05-11T07:39:59Z,2016-10-17T07:49:16Z,2016-10-17T08:45:21Z,CLOSED,False,4,4,2,https://github.com/HideoYamauchi,Change a type of NodeID.,1,[],https://github.com/corosync/corosync/pull/128,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/128#issuecomment-218964932,,"@HideoYamauchi Just to clarify. I like the patch (so definitively nothing like  ""destroy""). On the other hand, it's probably bad idea to break compatibility in 2.x.
So I keep this PR open and include it in (future) 3.x.
Thanks for patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,128,2016-05-11T07:39:59Z,2016-10-17T07:49:16Z,2016-10-17T08:45:21Z,CLOSED,False,4,4,2,https://github.com/HideoYamauchi,Change a type of NodeID.,1,[],https://github.com/corosync/corosync/pull/128,https://github.com/HideoYamauchi,5,https://github.com/corosync/corosync/pull/128#issuecomment-219069029,,"Hi Jan,
Okay!
Manay thanks!
Hideo Yamauchi.",True,{}
corosync/corosync,https://github.com/corosync/corosync,128,2016-05-11T07:39:59Z,2016-10-17T07:49:16Z,2016-10-17T08:45:21Z,CLOSED,False,4,4,2,https://github.com/HideoYamauchi,Change a type of NodeID.,1,[],https://github.com/corosync/corosync/pull/128,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/128#issuecomment-254136130,,@HideoYamauchi Because 3.x development just started I've merged patch as 9833377. Thanks for patch.,True,{}
corosync/corosync,https://github.com/corosync/corosync,128,2016-05-11T07:39:59Z,2016-10-17T07:49:16Z,2016-10-17T08:45:21Z,CLOSED,False,4,4,2,https://github.com/HideoYamauchi,Change a type of NodeID.,1,[],https://github.com/corosync/corosync/pull/128,https://github.com/HideoYamauchi,7,https://github.com/corosync/corosync/pull/128#issuecomment-254148304,,Thanks!,True,{}
corosync/corosync,https://github.com/corosync/corosync,129,2016-05-13T15:26:19Z,2016-05-17T14:29:55Z,2016-05-17T14:29:58Z,CLOSED,False,10,15,1,https://github.com/jfriesse,schedwrk: Cleanup and make it work on PPC BE,1,[],https://github.com/corosync/corosync/pull/129,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/129,"Schedwrk is passing hdb handle (64-bit) to
totempg_callback_token_create as a context. Context is defined to be
pointer, so there is conversion function which stores 64-bit hdb_handle
into pointer. Potentially, pointer can be 32-bit. This means, check
part of hdb is discarded (and have to get special no_check value in
schedwrk_do) later. This works quite well on 32-bit Little-Endian
system. Sadly on Big-Endian system, check partition of hdb is stored
instead of value. Result is error of hdb_handle_get call.
Proposed solution is to pass handle pointer to
totempg_callback_token_create as context. This means full hdb (check +
value) can be used in schedwrk_do (easier detection of memory
corruption).
Main reason for this patch is to remove usage of pointer as integer
value.
Small drawback of given solution is that handle pointer must be memory
allocated on heap or static memory, making API more bug-prone. Current
usage of schedwrk API across corosync always use memory in .text
section (safe), so it's not a problem.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Schedwrk is passing hdb handle (64-bit) to
totempg_callback_token_create as a context. Context is defined to be
pointer, so there is conversion function which stores 64-bit hdb_handle
into pointer. Potentially, pointer can be 32-bit. This means, check
part of hdb is discarded (and have to get special no_check value in
schedwrk_do) later. This works quite well on 32-bit Little-Endian
system. Sadly on Big-Endian system, check partition of hdb is stored
instead of value. Result is error of hdb_handle_get call.
Proposed solution is to pass handle pointer to
totempg_callback_token_create as context. This means full hdb (check +
value) can be used in schedwrk_do (easier detection of memory
corruption).
Main reason for this patch is to remove usage of pointer as integer
value.
Small drawback of given solution is that handle pointer must be memory
allocated on heap or static memory, making API more bug-prone. Current
usage of schedwrk API across corosync always use memory in .text
section (safe), so it's not a problem.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,129,2016-05-13T15:26:19Z,2016-05-17T14:29:55Z,2016-05-17T14:29:58Z,CLOSED,False,10,15,1,https://github.com/jfriesse,schedwrk: Cleanup and make it work on PPC BE,1,[],https://github.com/corosync/corosync/pull/129,https://github.com/chrissie-c,2,https://github.com/corosync/corosync/pull/129#issuecomment-219727827,"Schedwrk is passing hdb handle (64-bit) to
totempg_callback_token_create as a context. Context is defined to be
pointer, so there is conversion function which stores 64-bit hdb_handle
into pointer. Potentially, pointer can be 32-bit. This means, check
part of hdb is discarded (and have to get special no_check value in
schedwrk_do) later. This works quite well on 32-bit Little-Endian
system. Sadly on Big-Endian system, check partition of hdb is stored
instead of value. Result is error of hdb_handle_get call.
Proposed solution is to pass handle pointer to
totempg_callback_token_create as context. This means full hdb (check +
value) can be used in schedwrk_do (easier detection of memory
corruption).
Main reason for this patch is to remove usage of pointer as integer
value.
Small drawback of given solution is that handle pointer must be memory
allocated on heap or static memory, making API more bug-prone. Current
usage of schedwrk API across corosync always use memory in .text
section (safe), so it's not a problem.
Signed-off-by: Jan Friesse jfriesse@redhat.com","To be honest, I think this is actually neater than what's there already, ACK.",True,{}
corosync/corosync,https://github.com/corosync/corosync,129,2016-05-13T15:26:19Z,2016-05-17T14:29:55Z,2016-05-17T14:29:58Z,CLOSED,False,10,15,1,https://github.com/jfriesse,schedwrk: Cleanup and make it work on PPC BE,1,[],https://github.com/corosync/corosync/pull/129,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/129#issuecomment-219735632,"Schedwrk is passing hdb handle (64-bit) to
totempg_callback_token_create as a context. Context is defined to be
pointer, so there is conversion function which stores 64-bit hdb_handle
into pointer. Potentially, pointer can be 32-bit. This means, check
part of hdb is discarded (and have to get special no_check value in
schedwrk_do) later. This works quite well on 32-bit Little-Endian
system. Sadly on Big-Endian system, check partition of hdb is stored
instead of value. Result is error of hdb_handle_get call.
Proposed solution is to pass handle pointer to
totempg_callback_token_create as context. This means full hdb (check +
value) can be used in schedwrk_do (easier detection of memory
corruption).
Main reason for this patch is to remove usage of pointer as integer
value.
Small drawback of given solution is that handle pointer must be memory
allocated on heap or static memory, making API more bug-prone. Current
usage of schedwrk API across corosync always use memory in .text
section (safe), so it's not a problem.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c Thanks for review. Patch is in master as b93d75a,True,{}
corosync/corosync,https://github.com/corosync/corosync,130,2016-05-17T10:12:09Z,2016-05-17T13:05:47Z,2016-05-17T13:05:57Z,CLOSED,False,6,5,1,https://github.com/jfriesse,cmapctl: Handle corosync errors in print_key func,1,[],https://github.com/corosync/corosync/pull/130,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/130,"print_key handles only CS_ERR_TRY_AGAIN error. If different error is
returned, print_key loops forewer.
Solution is to handle all errors.
Signed-off-by: Jan Friesse jfriesse@redhat.com","print_key handles only CS_ERR_TRY_AGAIN error. If different error is
returned, print_key loops forewer.
Solution is to handle all errors.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,130,2016-05-17T10:12:09Z,2016-05-17T13:05:47Z,2016-05-17T13:05:57Z,CLOSED,False,6,5,1,https://github.com/jfriesse,cmapctl: Handle corosync errors in print_key func,1,[],https://github.com/corosync/corosync/pull/130,https://github.com/chrissie-c,2,https://github.com/corosync/corosync/pull/130#issuecomment-219706231,"print_key handles only CS_ERR_TRY_AGAIN error. If different error is
returned, print_key loops forewer.
Solution is to handle all errors.
Signed-off-by: Jan Friesse jfriesse@redhat.com",ACK,True,{}
corosync/corosync,https://github.com/corosync/corosync,130,2016-05-17T10:12:09Z,2016-05-17T13:05:47Z,2016-05-17T13:05:57Z,CLOSED,False,6,5,1,https://github.com/jfriesse,cmapctl: Handle corosync errors in print_key func,1,[],https://github.com/corosync/corosync/pull/130,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/130#issuecomment-219711239,"print_key handles only CS_ERR_TRY_AGAIN error. If different error is
returned, print_key loops forewer.
Solution is to handle all errors.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c Thanks for review. Patch is in master as 8ab7743,True,{}
corosync/corosync,https://github.com/corosync/corosync,131,2016-05-24T10:11:24Z,2016-05-24T10:35:09Z,2016-05-24T10:35:09Z,CLOSED,False,79,4,4,https://github.com/chrissie-c,Fix config options not being reset when deleted on reload,2,[],https://github.com/corosync/corosync/pull/131,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/131,"There were several places where defaults were not restored if the keys were removed from corosync.conf and the file reloaded.
This patch adds those back so that reloading corosync.conf has the expected effect when keys are deleted.
Also add the RO flag to more keys that are immutable","There were several places where defaults were not restored if the keys were removed from corosync.conf and the file reloaded.
This patch adds those back so that reloading corosync.conf has the expected effect when keys are deleted.
Also add the RO flag to more keys that are immutable",True,{}
corosync/corosync,https://github.com/corosync/corosync,131,2016-05-24T10:11:24Z,2016-05-24T10:35:09Z,2016-05-24T10:35:09Z,CLOSED,False,79,4,4,https://github.com/chrissie-c,Fix config options not being reset when deleted on reload,2,[],https://github.com/corosync/corosync/pull/131,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/131#issuecomment-221230600,"There were several places where defaults were not restored if the keys were removed from corosync.conf and the file reloaded.
This patch adds those back so that reloading corosync.conf has the expected effect when keys are deleted.
Also add the RO flag to more keys that are immutable","@chrissie-c Nice patches, ACK. Both are now in master as 125848d and 571b162",True,{}
corosync/corosync,https://github.com/corosync/corosync,133,2016-05-27T10:44:12Z,2016-05-27T15:38:13Z,2016-06-06T11:47:49Z,CLOSED,False,4,3,1,https://github.com/chrissie-c,logconfig: Fix logging reload disabling logfiles,1,[],https://github.com/corosync/corosync/pull/133,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/133,"In my previous logconfig patch, adding a subsys so the
logging stanzas could disable logging to a file, because
the subsys closed the file used by the main logging.
This patch only applies defaults to higher-level logging and
non-deprecated keys.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","In my previous logconfig patch, adding a subsys so the
logging stanzas could disable logging to a file, because
the subsys closed the file used by the main logging.
This patch only applies defaults to higher-level logging and
non-deprecated keys.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,133,2016-05-27T10:44:12Z,2016-05-27T15:38:13Z,2016-06-06T11:47:49Z,CLOSED,False,4,3,1,https://github.com/chrissie-c,logconfig: Fix logging reload disabling logfiles,1,[],https://github.com/corosync/corosync/pull/133,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/133#issuecomment-222179714,"In my previous logconfig patch, adding a subsys so the
logging stanzas could disable logging to a file, because
the subsys closed the file used by the main logging.
This patch only applies defaults to higher-level logging and
non-deprecated keys.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",@chrissie-c Nice patch. ACK and merged as f2a1fcc,True,{}
corosync/corosync,https://github.com/corosync/corosync,134,2016-06-17T08:34:13Z,2016-06-22T12:28:17Z,2016-06-22T19:52:59Z,CLOSED,False,24,24,11,https://github.com/wferi,Typo fixes,8,[],https://github.com/corosync/corosync/pull/134,https://github.com/wferi,1,https://github.com/corosync/corosync/pull/134,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,134,2016-06-17T08:34:13Z,2016-06-22T12:28:17Z,2016-06-22T19:52:59Z,CLOSED,False,24,24,11,https://github.com/wferi,Typo fixes,8,[],https://github.com/corosync/corosync/pull/134,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/134#issuecomment-227727738,,@wferi Thanks for patches. All ACK and all are now merged into master.,True,{}
corosync/corosync,https://github.com/corosync/corosync,136,2016-06-27T09:29:38Z,2016-06-27T10:48:57Z,2016-06-27T10:48:58Z,CLOSED,False,5,5,1,https://github.com/liu4480,low:typo fix in sam.h,1,[],https://github.com/corosync/corosync/pull/136,https://github.com/liu4480,1,https://github.com/corosync/corosync/pull/136,there are some spell errors in sam.h,there are some spell errors in sam.h,True,{}
corosync/corosync,https://github.com/corosync/corosync,136,2016-06-27T09:29:38Z,2016-06-27T10:48:57Z,2016-06-27T10:48:58Z,CLOSED,False,5,5,1,https://github.com/liu4480,low:typo fix in sam.h,1,[],https://github.com/corosync/corosync/pull/136,https://github.com/liu4480,2,https://github.com/corosync/corosync/pull/136#issuecomment-228696785,there are some spell errors in sam.h,"Hi, Honza, Do I need to send mail to developers@clusterlabs.org, or just open a pull request in github for this commit?",True,{}
corosync/corosync,https://github.com/corosync/corosync,136,2016-06-27T09:29:38Z,2016-06-27T10:48:57Z,2016-06-27T10:48:58Z,CLOSED,False,5,5,1,https://github.com/liu4480,low:typo fix in sam.h,1,[],https://github.com/corosync/corosync/pull/136,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/136#issuecomment-228713180,there are some spell errors in sam.h,"@liu4480 Thanks for patch, ACK, good work! Change is now merged as 7e36b89
No, you don't need to send patch to developers@clusterlabs.org. Opening pull request is enough (I get mail notification).",True,{}
corosync/corosync,https://github.com/corosync/corosync,140,2016-07-11T00:04:30Z,2016-08-01T08:14:10Z,2016-08-01T10:36:21Z,CLOSED,False,52,9,1,https://github.com/HideoYamauchi,Low: totemsrp: Addition of the log.,1,[],https://github.com/corosync/corosync/pull/140,https://github.com/HideoYamauchi,1,https://github.com/corosync/corosync/pull/140,"Hi All,
It is addition of the log about next issue.

#139

I add it to master of corosync, but want you to include this correction in 2.3.x if 2.3.x of corosync is still released.
Best Regards,","Hi All,
It is addition of the log about next issue.

#139

I add it to master of corosync, but want you to include this correction in 2.3.x if 2.3.x of corosync is still released.
Best Regards,",True,{}
corosync/corosync,https://github.com/corosync/corosync,140,2016-07-11T00:04:30Z,2016-08-01T08:14:10Z,2016-08-01T10:36:21Z,CLOSED,False,52,9,1,https://github.com/HideoYamauchi,Low: totemsrp: Addition of the log.,1,[],https://github.com/corosync/corosync/pull/140,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/140#issuecomment-236516647,"Hi All,
It is addition of the log about next issue.

#139

I add it to master of corosync, but want you to include this correction in 2.3.x if 2.3.x of corosync is still released.
Best Regards,","@HideoYamauchi Thanks for patch. Even messages are not ""user"" friendly they are ""developer"" friendly and because qb_loop_timer_add should never fail it's better to have ""developer"" friendly messages. So for sure ACK and I've added commit as a 71c9035.
2.3.x is no longer supported so no worries with that branch.
Thanks again for patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,140,2016-07-11T00:04:30Z,2016-08-01T08:14:10Z,2016-08-01T10:36:21Z,CLOSED,False,52,9,1,https://github.com/HideoYamauchi,Low: totemsrp: Addition of the log.,1,[],https://github.com/corosync/corosync/pull/140,https://github.com/HideoYamauchi,3,https://github.com/corosync/corosync/pull/140#issuecomment-236546797,"Hi All,
It is addition of the log about next issue.

#139

I add it to master of corosync, but want you to include this correction in 2.3.x if 2.3.x of corosync is still released.
Best Regards,","Hi Jan,
Thank you for merge
Best Regards,
Hideo Yamauchi.",True,{}
corosync/corosync,https://github.com/corosync/corosync,141,2016-08-01T05:34:55Z,2016-08-04T12:09:15Z,2016-08-04T12:09:15Z,CLOSED,False,32,19,2,https://github.com/liu4480,corosync-testagents is not able to run with pacemaker-1.13 or later,1,[],https://github.com/corosync/corosync/pull/141,https://github.com/liu4480,1,https://github.com/corosync/corosync/pull/141,"There are changes in pacemaker-cts which corosync-testagents denpends
on. With these changes, corosync-testagents can not run. This patch
fixes the issues, and makes corosync-testagents run.","There are changes in pacemaker-cts which corosync-testagents denpends
on. With these changes, corosync-testagents can not run. This patch
fixes the issues, and makes corosync-testagents run.",True,{}
corosync/corosync,https://github.com/corosync/corosync,141,2016-08-01T05:34:55Z,2016-08-04T12:09:15Z,2016-08-04T12:09:15Z,CLOSED,False,32,19,2,https://github.com/liu4480,corosync-testagents is not able to run with pacemaker-1.13 or later,1,[],https://github.com/corosync/corosync/pull/141,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/141#issuecomment-237534468,"There are changes in pacemaker-cts which corosync-testagents denpends
on. With these changes, corosync-testagents can not run. This patch
fixes the issues, and makes corosync-testagents run.","@liu4480 Nice patch, ACK and merged as 3e995cf. Thanks.",True,{}
corosync/corosync,https://github.com/corosync/corosync,142,2016-08-03T15:01:40Z,2016-08-04T14:16:06Z,2016-08-04T14:16:43Z,CLOSED,False,14,5,4,https://github.com/jfriesse,Config: Flag config uidgid entries,1,[],https://github.com/corosync/corosync/pull/142,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/142,"Uidgid entries parsed from configuration files now has prefix
(uidgid.config.) so they are distinguishable from dynamically added
entries. Entries added from config file are pruned on reload if no
longer exists in config file (dynamic one stays unaffected). Also whole
uidgid.config. prefix is made read only.
This make PCMK work again after configuration reload is called.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Uidgid entries parsed from configuration files now has prefix
(uidgid.config.) so they are distinguishable from dynamically added
entries. Entries added from config file are pruned on reload if no
longer exists in config file (dynamic one stays unaffected). Also whole
uidgid.config. prefix is made read only.
This make PCMK work again after configuration reload is called.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,142,2016-08-03T15:01:40Z,2016-08-04T14:16:06Z,2016-08-04T14:16:43Z,CLOSED,False,14,5,4,https://github.com/jfriesse,Config: Flag config uidgid entries,1,[],https://github.com/corosync/corosync/pull/142,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/142#issuecomment-237566209,"Uidgid entries parsed from configuration files now has prefix
(uidgid.config.) so they are distinguishable from dynamically added
entries. Entries added from config file are pruned on reload if no
longer exists in config file (dynamic one stays unaffected). Also whole
uidgid.config. prefix is made read only.
This make PCMK work again after configuration reload is called.
Signed-off-by: Jan Friesse jfriesse@redhat.com",In upstream as f837f95,True,{}
corosync/corosync,https://github.com/corosync/corosync,143,2016-08-04T08:55:05Z,2016-08-05T01:59:28Z,2016-08-05T01:59:28Z,CLOSED,False,1,0,1,https://github.com/liu4480,"When compiling corosync, files in ""doc/corosync/"" are unpackaged",1,[],https://github.com/corosync/corosync/pull/143,https://github.com/liu4480,1,https://github.com/corosync/corosync/pull/143,"When I compile corosync-2.4.0, it reports errors ""Installed
(but unpackaged) file(s) found"", all the files are in directory
""%{_datadir}/doc/corosync/"". This patch fixes the issue.","When I compile corosync-2.4.0, it reports errors ""Installed
(but unpackaged) file(s) found"", all the files are in directory
""%{_datadir}/doc/corosync/"". This patch fixes the issue.",True,{}
corosync/corosync,https://github.com/corosync/corosync,143,2016-08-04T08:55:05Z,2016-08-05T01:59:28Z,2016-08-05T01:59:28Z,CLOSED,False,1,0,1,https://github.com/liu4480,"When compiling corosync, files in ""doc/corosync/"" are unpackaged",1,[],https://github.com/corosync/corosync/pull/143,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/143#issuecomment-237533527,"When I compile corosync-2.4.0, it reports errors ""Installed
(but unpackaged) file(s) found"", all the files are in directory
""%{_datadir}/doc/corosync/"". This patch fixes the issue.","@liu4480 How exactly were you able to achieve that result? Because there is
rm -rf %{buildroot}%{_docdir}/*
fixup which deletes all these files.",True,{}
corosync/corosync,https://github.com/corosync/corosync,143,2016-08-04T08:55:05Z,2016-08-05T01:59:28Z,2016-08-05T01:59:28Z,CLOSED,False,1,0,1,https://github.com/liu4480,"When compiling corosync, files in ""doc/corosync/"" are unpackaged",1,[],https://github.com/corosync/corosync/pull/143,https://github.com/liu4480,3,https://github.com/corosync/corosync/pull/143#issuecomment-237728809,"When I compile corosync-2.4.0, it reports errors ""Installed
(but unpackaged) file(s) found"", all the files are in directory
""%{_datadir}/doc/corosync/"". This patch fixes the issue.","@jfriesse I built corosync on openSUSE Leap 42.1, and it seems that docdir does not include the html files, maybe the macros are different on openSUSE and fedora. I 'll confirm this, and let you know.
Thanks.",True,{}
corosync/corosync,https://github.com/corosync/corosync,143,2016-08-04T08:55:05Z,2016-08-05T01:59:28Z,2016-08-05T01:59:28Z,CLOSED,False,1,0,1,https://github.com/liu4480,"When compiling corosync, files in ""doc/corosync/"" are unpackaged",1,[],https://github.com/corosync/corosync/pull/143,https://github.com/liu4480,4,https://github.com/corosync/corosync/pull/143#issuecomment-237736484,"When I compile corosync-2.4.0, it reports errors ""Installed
(but unpackaged) file(s) found"", all the files are in directory
""%{_datadir}/doc/corosync/"". This patch fixes the issue.","on CentOS7 the macro %{docdir} is /usr/share/doc/ while on openSUSE Leap this macro is /usr/share/doc/packages/, it is quite diffrent, close this pull request.",True,{}
corosync/corosync,https://github.com/corosync/corosync,144,2016-08-13T01:14:51Z,,2021-12-27T05:19:09Z,OPEN,False,34,21,5,https://github.com/dyusupov,ipv6 scope_id fix,1,[],https://github.com/corosync/corosync/pull/144,https://github.com/dyusupov,1,https://github.com/corosync/corosync/pull/144,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,144,2016-08-13T01:14:51Z,,2021-12-27T05:19:09Z,OPEN,False,34,21,5,https://github.com/dyusupov,ipv6 scope_id fix,1,[],https://github.com/corosync/corosync/pull/144,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/144#issuecomment-239794669,,"@dyusupov Thanks for patch main idea is good. I have few questions:

in totemudp_build_sockets you store my_id, mcast_address and multicast_address scope id. In totemudpu nothing like that is happening this is probably wrong.
Is it really needed to pass scope id into totemip_totemip_to_sockaddr_convert if it is already stored in totem_ip_address? Honestly what I would like to see is scope_id ether stored in totem_ip_address struct or passed to totemip_to_sockaddr, both seems invalid.",True,{}
corosync/corosync,https://github.com/corosync/corosync,146,2016-08-29T13:56:50Z,2016-09-02T08:24:08Z,2016-09-02T08:33:33Z,CLOSED,False,1,1,1,https://github.com/wferi,conf: be explicit about the multicast source and destination ports,1,[],https://github.com/corosync/corosync/pull/146,https://github.com/wferi,1,https://github.com/corosync/corosync/pull/146,This brings the comment in the example config file a little bit closer to the man page.,This brings the comment in the example config file a little bit closer to the man page.,True,{}
corosync/corosync,https://github.com/corosync/corosync,146,2016-08-29T13:56:50Z,2016-09-02T08:24:08Z,2016-09-02T08:33:33Z,CLOSED,False,1,1,1,https://github.com/wferi,conf: be explicit about the multicast source and destination ports,1,[],https://github.com/corosync/corosync/pull/146,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/146#issuecomment-244314020,This brings the comment in the example config file a little bit closer to the man page.,Thanks for patch. It's now in upstream as 561b885,True,{}
corosync/corosync,https://github.com/corosync/corosync,147,2016-09-02T08:37:11Z,2016-09-02T09:16:21Z,2016-09-02T09:21:02Z,CLOSED,False,4,4,2,https://github.com/wferi,qdevice init: corosync isn't a system facility,1,[],https://github.com/corosync/corosync/pull/147,https://github.com/wferi,1,https://github.com/corosync/corosync/pull/147,Signed-off-by: Ferenc Wágner wferi@niif.hu,Signed-off-by: Ferenc Wágner wferi@niif.hu,True,{}
corosync/corosync,https://github.com/corosync/corosync,147,2016-09-02T08:37:11Z,2016-09-02T09:16:21Z,2016-09-02T09:21:02Z,CLOSED,False,4,4,2,https://github.com/wferi,qdevice init: corosync isn't a system facility,1,[],https://github.com/corosync/corosync/pull/147,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/147#issuecomment-244318857,Signed-off-by: Ferenc Wágner wferi@niif.hu,@wferi Can you please also fix corosync-notifyd.in ?,True,{}
corosync/corosync,https://github.com/corosync/corosync,147,2016-09-02T08:37:11Z,2016-09-02T09:16:21Z,2016-09-02T09:21:02Z,CLOSED,False,4,4,2,https://github.com/wferi,qdevice init: corosync isn't a system facility,1,[],https://github.com/corosync/corosync/pull/147,https://github.com/wferi,3,https://github.com/corosync/corosync/pull/147#issuecomment-244321735,Signed-off-by: Ferenc Wágner wferi@niif.hu,"Sure, I replaced the commit. And thanks.",True,{}
corosync/corosync,https://github.com/corosync/corosync,147,2016-09-02T08:37:11Z,2016-09-02T09:16:21Z,2016-09-02T09:21:02Z,CLOSED,False,4,4,2,https://github.com/wferi,qdevice init: corosync isn't a system facility,1,[],https://github.com/corosync/corosync/pull/147,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/147#issuecomment-244325232,Signed-off-by: Ferenc Wágner wferi@niif.hu,"@wferi Thanks, ACK and merged as aab8402",True,{}
corosync/corosync,https://github.com/corosync/corosync,148,2016-09-02T09:40:59Z,2016-09-12T07:52:07Z,2016-09-12T08:26:43Z,CLOSED,False,29,29,12,https://github.com/wferi,Typo fixes,6,[],https://github.com/corosync/corosync/pull/148,https://github.com/wferi,1,https://github.com/corosync/corosync/pull/148,"Some of these change actual identifiers in the code, not just strings, but I think internal ones only.","Some of these change actual identifiers in the code, not just strings, but I think internal ones only.",True,{}
corosync/corosync,https://github.com/corosync/corosync,148,2016-09-02T09:40:59Z,2016-09-12T07:52:07Z,2016-09-12T08:26:43Z,CLOSED,False,29,29,12,https://github.com/wferi,Typo fixes,6,[],https://github.com/corosync/corosync/pull/148,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/148#issuecomment-246273638,"Some of these change actual identifiers in the code, not just strings, but I think internal ones only.","@wferi Thanks for patches, nice catch. I've squashed them into one and pushed as cf10a75.",True,{}
corosync/corosync,https://github.com/corosync/corosync,152,2016-10-06T01:57:09Z,2016-10-06T13:49:50Z,2016-10-06T22:38:53Z,CLOSED,False,0,2,1,https://github.com/HideoYamauchi,Mid: coroparse: Set a value of poll_period for watchdog monitoring.,1,[],https://github.com/corosync/corosync/pull/152,https://github.com/HideoYamauchi,1,https://github.com/corosync/corosync/pull/152,"When user set resource.process key newly, poll_period revises the phenomenon that does not become effective.
(snip)
resources {
    process {
        xxx {
            recovery: reboot
            poll_period: 10000
        }
    }
}
(snip)

I revise the resource.system key equally.","When user set resource.process key newly, poll_period revises the phenomenon that does not become effective.
(snip)
resources {
    process {
        xxx {
            recovery: reboot
            poll_period: 10000
        }
    }
}
(snip)

I revise the resource.system key equally.",True,{}
corosync/corosync,https://github.com/corosync/corosync,152,2016-10-06T01:57:09Z,2016-10-06T13:49:50Z,2016-10-06T22:38:53Z,CLOSED,False,0,2,1,https://github.com/HideoYamauchi,Mid: coroparse: Set a value of poll_period for watchdog monitoring.,1,[],https://github.com/corosync/corosync/pull/152,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/152#issuecomment-251966718,"When user set resource.process key newly, poll_period revises the phenomenon that does not become effective.
(snip)
resources {
    process {
        xxx {
            recovery: reboot
            poll_period: 10000
        }
    }
}
(snip)

I revise the resource.system key equally.",@HideoYamauchi Thanks for patch. ACK and committed as f1ffe31.,True,{}
corosync/corosync,https://github.com/corosync/corosync,152,2016-10-06T01:57:09Z,2016-10-06T13:49:50Z,2016-10-06T22:38:53Z,CLOSED,False,0,2,1,https://github.com/HideoYamauchi,Mid: coroparse: Set a value of poll_period for watchdog monitoring.,1,[],https://github.com/corosync/corosync/pull/152,https://github.com/HideoYamauchi,3,https://github.com/corosync/corosync/pull/152#issuecomment-252108372,"When user set resource.process key newly, poll_period revises the phenomenon that does not become effective.
(snip)
resources {
    process {
        xxx {
            recovery: reboot
            poll_period: 10000
        }
    }
}
(snip)

I revise the resource.system key equally.",Thanks!,True,{}
corosync/corosync,https://github.com/corosync/corosync,153,2016-10-07T21:15:39Z,2016-10-10T10:37:43Z,2016-10-10T10:37:43Z,CLOSED,False,2,2,1,https://github.com/fyrchik,fix: udpu corosync fail after network restart,1,[],https://github.com/corosync/corosync/pull/153,https://github.com/fyrchik,1,https://github.com/corosync/corosync/pull/153,"In our 2-node cluster corosync failed after any network failure (and because of dlm failing soon after coro, reboot was required).
After this change we no longer fail.
The funniest thing is that it was failing not after 'ifdown', but after 'ifup'.","In our 2-node cluster corosync failed after any network failure (and because of dlm failing soon after coro, reboot was required).
After this change we no longer fail.
The funniest thing is that it was failing not after 'ifdown', but after 'ifup'.",True,{}
corosync/corosync,https://github.com/corosync/corosync,153,2016-10-07T21:15:39Z,2016-10-10T10:37:43Z,2016-10-10T10:37:43Z,CLOSED,False,2,2,1,https://github.com/fyrchik,fix: udpu corosync fail after network restart,1,[],https://github.com/corosync/corosync/pull/153,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/153#issuecomment-252583308,"In our 2-node cluster corosync failed after any network failure (and because of dlm failing soon after coro, reboot was required).
After this change we no longer fail.
The funniest thing is that it was failing not after 'ifdown', but after 'ifup'.","@fyrchik This changeset is not correct. It maybe solves problem for you but it creates problem after rebind.
Actually, network failure shouldn't cause ifdown. If it is happening it means NetworkManager is used. NetworkManager is fully supported but it needs something like NetworkManager-config-server package (this name is for Fedora/Centos but it's just small config file, adapt it to whatever distro you are using should be easy).
Solving of ifdown problem is going to be handled in 3.x by knet, in 2.x you can use your patch (probably quite risky) and/or don't do ifdown.",True,{}
corosync/corosync,https://github.com/corosync/corosync,154,2016-10-09T23:57:09Z,2018-01-12T02:09:50Z,2018-01-12T02:09:50Z,CLOSED,False,4,2414,33,https://github.com/jonesmz,Replace autotools based buildsystem with cmake,1,[],https://github.com/corosync/corosync/pull/154,https://github.com/jonesmz,1,https://github.com/corosync/corosync/pull/154,"It's not a 100% complete replacement yet, but I wanted to get feedback before I got any farther on this.
Is this a change that the corosync project is willing to adopt?
Personally, I think that cmake is leaps and bounds superior to autotools by any measure, but there are developers who disagree.
Thoughts?","It's not a 100% complete replacement yet, but I wanted to get feedback before I got any farther on this.
Is this a change that the corosync project is willing to adopt?
Personally, I think that cmake is leaps and bounds superior to autotools by any measure, but there are developers who disagree.
Thoughts?",True,{}
corosync/corosync,https://github.com/corosync/corosync,154,2016-10-09T23:57:09Z,2018-01-12T02:09:50Z,2018-01-12T02:09:50Z,CLOSED,False,4,2414,33,https://github.com/jonesmz,Replace autotools based buildsystem with cmake,1,[],https://github.com/corosync/corosync/pull/154,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/154#issuecomment-252555979,"It's not a 100% complete replacement yet, but I wanted to get feedback before I got any farther on this.
Is this a change that the corosync project is willing to adopt?
Personally, I think that cmake is leaps and bounds superior to autotools by any measure, but there are developers who disagree.
Thoughts?","@jonesmz Actually I have only ""end-user"" experiences with cmake so I'm open to new ideas so cmake migration is nothing where I would say no.
But after very brief review, what I dislike most is need to hand defined config.h.in. Would it be possible to make it auto generated?",True,{}
corosync/corosync,https://github.com/corosync/corosync,154,2016-10-09T23:57:09Z,2018-01-12T02:09:50Z,2018-01-12T02:09:50Z,CLOSED,False,4,2414,33,https://github.com/jonesmz,Replace autotools based buildsystem with cmake,1,[],https://github.com/corosync/corosync/pull/154,https://github.com/jonesmz,3,https://github.com/corosync/corosync/pull/154#issuecomment-252664266,"It's not a 100% complete replacement yet, but I wanted to get feedback before I got any farther on this.
Is this a change that the corosync project is willing to adopt?
Personally, I think that cmake is leaps and bounds superior to autotools by any measure, but there are developers who disagree.
Thoughts?","Very likely, yes.
Unfortunately, I really was only able to spend yesterday on corosync related work, so I won't be able to investigate autogenerating a config.h within the next few weeks, but I'll look into it when I have time",True,{}
corosync/corosync,https://github.com/corosync/corosync,154,2016-10-09T23:57:09Z,2018-01-12T02:09:50Z,2018-01-12T02:09:50Z,CLOSED,False,4,2414,33,https://github.com/jonesmz,Replace autotools based buildsystem with cmake,1,[],https://github.com/corosync/corosync/pull/154,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/154#issuecomment-253227719,"It's not a 100% complete replacement yet, but I wanted to get feedback before I got any farther on this.
Is this a change that the corosync project is willing to adopt?
Personally, I think that cmake is leaps and bounds superior to autotools by any measure, but there are developers who disagree.
Thoughts?","@jonesmz Yep, sounds good and no worries. Development of whatever is going to be corosync 3.x just began so no need to rush.",True,{}
corosync/corosync,https://github.com/corosync/corosync,154,2016-10-09T23:57:09Z,2018-01-12T02:09:50Z,2018-01-12T02:09:50Z,CLOSED,False,4,2414,33,https://github.com/jonesmz,Replace autotools based buildsystem with cmake,1,[],https://github.com/corosync/corosync/pull/154,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/154#issuecomment-270067686,"It's not a 100% complete replacement yet, but I wanted to get feedback before I got any farther on this.
Is this a change that the corosync project is willing to adopt?
Personally, I think that cmake is leaps and bounds superior to autotools by any measure, but there are developers who disagree.
Thoughts?","@jonesmz Were you able to find out if it's possible to auto-generate config.h.in? Because without it, it doesn't make too much sense to change build system. With it, it's something to think about.",True,{}
corosync/corosync,https://github.com/corosync/corosync,154,2016-10-09T23:57:09Z,2018-01-12T02:09:50Z,2018-01-12T02:09:50Z,CLOSED,False,4,2414,33,https://github.com/jonesmz,Replace autotools based buildsystem with cmake,1,[],https://github.com/corosync/corosync/pull/154,https://github.com/jonesmz,6,https://github.com/corosync/corosync/pull/154#issuecomment-270069083,"It's not a 100% complete replacement yet, but I wanted to get feedback before I got any farther on this.
Is this a change that the corosync project is willing to adopt?
Personally, I think that cmake is leaps and bounds superior to autotools by any measure, but there are developers who disagree.
Thoughts?","I'm sorry, I was not able to spend time on this yet beyond updating to the latest code from the corosync repository and fixing merge conflicts.
Would you like me to close this, and re-open it if I find a way to generate config.h.in?",True,{}
corosync/corosync,https://github.com/corosync/corosync,154,2016-10-09T23:57:09Z,2018-01-12T02:09:50Z,2018-01-12T02:09:50Z,CLOSED,False,4,2414,33,https://github.com/jonesmz,Replace autotools based buildsystem with cmake,1,[],https://github.com/corosync/corosync/pull/154,https://github.com/jfriesse,7,https://github.com/corosync/corosync/pull/154#issuecomment-270070086,"It's not a 100% complete replacement yet, but I wanted to get feedback before I got any farther on this.
Is this a change that the corosync project is willing to adopt?
Personally, I think that cmake is leaps and bounds superior to autotools by any measure, but there are developers who disagree.
Thoughts?","@jonesmz Nope, not needed. I've just asked because of activity in the branch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,154,2016-10-09T23:57:09Z,2018-01-12T02:09:50Z,2018-01-12T02:09:50Z,CLOSED,False,4,2414,33,https://github.com/jonesmz,Replace autotools based buildsystem with cmake,1,[],https://github.com/corosync/corosync/pull/154,https://github.com/jonesmz,8,https://github.com/corosync/corosync/pull/154#issuecomment-270070513,"It's not a 100% complete replacement yet, but I wanted to get feedback before I got any farther on this.
Is this a change that the corosync project is willing to adopt?
Personally, I think that cmake is leaps and bounds superior to autotools by any measure, but there are developers who disagree.
Thoughts?","Btw, I want to make sure we're both on the same page with regards to the config.h.in file.
The changes in this pull request, as far as I remember, don't hard-code config.h or config.h.in. The cmake system is indeed replacing values in the config.h.in file (and generating a config.h) file out of it.
The major difference is going to be that instead of auto-tools suite of ""Test every single possible thing that anyone has ever run into on any system"", the cmake configuration file author needs to be more discriminating about which tests are run (Either running tests that are part of the cmake package, or add-on packages for cmake, or write tests ourselves as needed).
For example, these are the tests that I (at the time) found it necessary to add to the cmake configuration. On my machine, at the time I first opened this pull request, I didn't need to define anything else in order to compile the parts of corosync that I was working on.
(Not an exhaustive example, I edited the config.h file that I just generated a moment ago with cmake to only include a few lines)
/* corosync config directory */
#define COROSYSCONFDIR ""/usr/local/etc/corosync""
/* Define to 1 if you have the <malloc.h> header file. */
#define HAVE_MALLOC_H
/* localstate directory */
#define LOCALSTATEDIR ""/usr/local/var""
/* corosync built-in features */
#define PACKAGE_FEATURES """"
/* Version number of package */
#define VERSION ""2.4.1.83-0fe7""
So was your question about config.h being generated based on tests that cmake runs, in the general sense?
Or was your question about specific values inside of config.h being derived from values that you perceived as being hardcoded in my pull request somewhere?",True,{}
corosync/corosync,https://github.com/corosync/corosync,154,2016-10-09T23:57:09Z,2018-01-12T02:09:50Z,2018-01-12T02:09:50Z,CLOSED,False,4,2414,33,https://github.com/jonesmz,Replace autotools based buildsystem with cmake,1,[],https://github.com/corosync/corosync/pull/154,https://github.com/jonesmz,9,https://github.com/corosync/corosync/pull/154#issuecomment-270072268,"It's not a 100% complete replacement yet, but I wanted to get feedback before I got any farther on this.
Is this a change that the corosync project is willing to adopt?
Personally, I think that cmake is leaps and bounds superior to autotools by any measure, but there are developers who disagree.
Thoughts?","To further explain, corosync/includes/corosync/CMakeLists.txt has:
INCLUDE (GNUInstallDirs)
INCLUDE (CheckIncludeFiles)
set(LOCALSTATEDIR ${CMAKE_INSTALL_FULL_LOCALSTATEDIR})
set(COROSYSCONFDIR ${CMAKE_INSTALL_FULL_SYSCONFDIR}/corosync)
CHECK_INCLUDE_FILES (malloc.h HAVE_MALLOC_H)
That's how the variables in config.h.in get generated into config.h.
corosync/CMakeLists.txt has additional settings to configure which compile-time features are enabled, and those can be configured to make their way into config.h as well.",True,{}
corosync/corosync,https://github.com/corosync/corosync,154,2016-10-09T23:57:09Z,2018-01-12T02:09:50Z,2018-01-12T02:09:50Z,CLOSED,False,4,2414,33,https://github.com/jonesmz,Replace autotools based buildsystem with cmake,1,[],https://github.com/corosync/corosync/pull/154,https://github.com/jfriesse,10,https://github.com/corosync/corosync/pull/154#issuecomment-273430758,"It's not a 100% complete replacement yet, but I wanted to get feedback before I got any farther on this.
Is this a change that the corosync project is willing to adopt?
Personally, I think that cmake is leaps and bounds superior to autotools by any measure, but there are developers who disagree.
Thoughts?","@jonesmz My question was if config.h.in has to be maintained by hand (what would be happening with current patch) or if it is possible to generate it automatically (as it is now with autotools).
Basically I'm trying to achieve as few manual changes as possible. In that respect, autotools are quite ok. What is not so ok is (for example) auto running (slow) ./configure script after every small change in Makefile.am. It is also the reason why I even consider this PR as possible way to go.
To be honest, if cmake change requires us to manually maintain config.h.in then it's no way to go.",True,{}
corosync/corosync,https://github.com/corosync/corosync,154,2016-10-09T23:57:09Z,2018-01-12T02:09:50Z,2018-01-12T02:09:50Z,CLOSED,False,4,2414,33,https://github.com/jonesmz,Replace autotools based buildsystem with cmake,1,[],https://github.com/corosync/corosync/pull/154,https://github.com/jonesmz,11,https://github.com/corosync/corosync/pull/154#issuecomment-273540407,"It's not a 100% complete replacement yet, but I wanted to get feedback before I got any farther on this.
Is this a change that the corosync project is willing to adopt?
Personally, I think that cmake is leaps and bounds superior to autotools by any measure, but there are developers who disagree.
Thoughts?","Oh. I understand your question now.
I don't know of any way to automatically generate a ""default"" config.h.in using cmake, that is then used to generate a subsequent config.h file with the results of the configuration tests. In fact, at least one person on stackoverflow says that cmake can't generate the .in file for us: http://stackoverflow.com/questions/38419876/cmake-generate-config-h-like-from-autoconf
I believe that the ""true"" CMake way of doing this is that any configuration choice that the project needs to be made would be passed to the compiler as -D defines, instead of including a config.h file. My branch currently continues using the config.h file mostly because I haven't looked into it yet.
What aspects of the config.h / config.h.in file need to be preserved?",True,{}
corosync/corosync,https://github.com/corosync/corosync,154,2016-10-09T23:57:09Z,2018-01-12T02:09:50Z,2018-01-12T02:09:50Z,CLOSED,False,4,2414,33,https://github.com/jonesmz,Replace autotools based buildsystem with cmake,1,[],https://github.com/corosync/corosync/pull/154,https://github.com/jfriesse,12,https://github.com/corosync/corosync/pull/154#issuecomment-273715769,"It's not a 100% complete replacement yet, but I wanted to get feedback before I got any farther on this.
Is this a change that the corosync project is willing to adopt?
Personally, I think that cmake is leaps and bounds superior to autotools by any measure, but there are developers who disagree.
Thoughts?","@jonesmz

What aspects of the config.h / config.h.in file need to be preserved?

This is really million dollar question. Many of the autoconf currently running tests are redundant (already checked by libqb) and/or useless (HAVE_SYS_WAIT_H, ...).
Also with 3.x I would like to reduce number of optional parts. Currently we have at least 12 configurable features, and some of them are ether not relevant any longer (RDMA/upstart/dbus), would be better to include by default (probably turned off - like wd/monitoring - question is )libstatgrab dependency) or maybe autotested more properly (systemd).
These all are quite hard to answer questions, which needs a little more discussion/thinking.",True,{}
corosync/corosync,https://github.com/corosync/corosync,154,2016-10-09T23:57:09Z,2018-01-12T02:09:50Z,2018-01-12T02:09:50Z,CLOSED,False,4,2414,33,https://github.com/jonesmz,Replace autotools based buildsystem with cmake,1,[],https://github.com/corosync/corosync/pull/154,https://github.com/jonesmz,13,https://github.com/corosync/corosync/pull/154#issuecomment-273831181,"It's not a 100% complete replacement yet, but I wanted to get feedback before I got any farther on this.
Is this a change that the corosync project is willing to adopt?
Personally, I think that cmake is leaps and bounds superior to autotools by any measure, but there are developers who disagree.
Thoughts?","Alright. Well, let me know.",True,{}
corosync/corosync,https://github.com/corosync/corosync,154,2016-10-09T23:57:09Z,2018-01-12T02:09:50Z,2018-01-12T02:09:50Z,CLOSED,False,4,2414,33,https://github.com/jonesmz,Replace autotools based buildsystem with cmake,1,[],https://github.com/corosync/corosync/pull/154,https://github.com/jonesmz,14,https://github.com/corosync/corosync/pull/154#issuecomment-357122622,"It's not a 100% complete replacement yet, but I wanted to get feedback before I got any farther on this.
Is this a change that the corosync project is willing to adopt?
Personally, I think that cmake is leaps and bounds superior to autotools by any measure, but there are developers who disagree.
Thoughts?","It's been well over a year since I opened this PR.
If it wasn't clear by my lack of activity, I'm officially no longer interested in or planing to participate in corosync development.
Best of luck.",True,{}
corosync/corosync,https://github.com/corosync/corosync,155,2016-10-10T01:53:34Z,2017-05-23T13:37:07Z,2017-05-23T22:27:33Z,CLOSED,False,4,2,1,https://github.com/jonesmz,Enable C99 language standard.,1,[],https://github.com/corosync/corosync/pull/155,https://github.com/jonesmz,1,https://github.com/corosync/corosync/pull/155,"C99 was ratified by ANSI in May 2000, making it close to 17 years old at the time this pull request was created.
Being able to declare variables at the location of usage is a huge usability improvement, IMHO, and I'd really like to see that option available to the corosync project.","C99 was ratified by ANSI in May 2000, making it close to 17 years old at the time this pull request was created.
Being able to declare variables at the location of usage is a huge usability improvement, IMHO, and I'd really like to see that option available to the corosync project.",True,{}
corosync/corosync,https://github.com/corosync/corosync,155,2016-10-10T01:53:34Z,2017-05-23T13:37:07Z,2017-05-23T22:27:33Z,CLOSED,False,4,2,1,https://github.com/jonesmz,Enable C99 language standard.,1,[],https://github.com/corosync/corosync/pull/155,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/155#issuecomment-252580778,"C99 was ratified by ANSI in May 2000, making it close to 17 years old at the time this pull request was created.
Being able to declare variables at the location of usage is a huge usability improvement, IMHO, and I'd really like to see that option available to the corosync project.","@jonesmz This patchset looks good. It's not 2.x, but for sure 3.x.",True,{}
corosync/corosync,https://github.com/corosync/corosync,155,2016-10-10T01:53:34Z,2017-05-23T13:37:07Z,2017-05-23T22:27:33Z,CLOSED,False,4,2,1,https://github.com/jonesmz,Enable C99 language standard.,1,[],https://github.com/corosync/corosync/pull/155,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/155#issuecomment-256633710,"C99 was ratified by ANSI in May 2000, making it close to 17 years old at the time this pull request was created.
Being able to declare variables at the location of usage is a huge usability improvement, IMHO, and I'd really like to see that option available to the corosync project.",@jonesmz: One question. How does -std=gnu99 work with clang? Keep in mind corosync is able to run on FreeBSD and clang compiler is used there.,True,{}
corosync/corosync,https://github.com/corosync/corosync,155,2016-10-10T01:53:34Z,2017-05-23T13:37:07Z,2017-05-23T22:27:33Z,CLOSED,False,4,2,1,https://github.com/jonesmz,Enable C99 language standard.,1,[],https://github.com/corosync/corosync/pull/155,https://github.com/jonesmz,4,https://github.com/corosync/corosync/pull/155#issuecomment-256697197,"C99 was ratified by ANSI in May 2000, making it close to 17 years old at the time this pull request was created.
Being able to declare variables at the location of usage is a huge usability improvement, IMHO, and I'd really like to see that option available to the corosync project.","Should work fine:
http://clang.llvm.org/docs/UsersManual.html#differences-between-various-standard-modes
Clang defaults to ""gnu11"" anyway. This change only brings corosync up from gnu89 to gnu99. Feel free to modify the pull request to switch to gnu11, if that's more your style.",True,{}
corosync/corosync,https://github.com/corosync/corosync,155,2016-10-10T01:53:34Z,2017-05-23T13:37:07Z,2017-05-23T22:27:33Z,CLOSED,False,4,2,1,https://github.com/jonesmz,Enable C99 language standard.,1,[],https://github.com/corosync/corosync/pull/155,https://github.com/jonesmz,5,https://github.com/corosync/corosync/pull/155#issuecomment-258864811,"C99 was ratified by ANSI in May 2000, making it close to 17 years old at the time this pull request was created.
Being able to declare variables at the location of usage is a huge usability improvement, IMHO, and I'd really like to see that option available to the corosync project.",Did you want me to do anything on this for you?,True,{}
corosync/corosync,https://github.com/corosync/corosync,155,2016-10-10T01:53:34Z,2017-05-23T13:37:07Z,2017-05-23T22:27:33Z,CLOSED,False,4,2,1,https://github.com/jonesmz,Enable C99 language standard.,1,[],https://github.com/corosync/corosync/pull/155,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/155#issuecomment-258875944,"C99 was ratified by ANSI in May 2000, making it close to 17 years old at the time this pull request was created.
Being able to declare variables at the location of usage is a huge usability improvement, IMHO, and I'd really like to see that option available to the corosync project.",@jonesmz Nope. I need to install FreeBSD VM and try build with your patches to make sure clang works as expected.,True,{}
corosync/corosync,https://github.com/corosync/corosync,155,2016-10-10T01:53:34Z,2017-05-23T13:37:07Z,2017-05-23T22:27:33Z,CLOSED,False,4,2,1,https://github.com/jonesmz,Enable C99 language standard.,1,[],https://github.com/corosync/corosync/pull/155,https://github.com/jonesmz,7,https://github.com/corosync/corosync/pull/155#issuecomment-302134276,"C99 was ratified by ANSI in May 2000, making it close to 17 years old at the time this pull request was created.
Being able to declare variables at the location of usage is a huge usability improvement, IMHO, and I'd really like to see that option available to the corosync project.","It's been over 6 months, and your upstream dependency Kronosnet has hard-required C99 or newer since 3 months ago.",True,{}
corosync/corosync,https://github.com/corosync/corosync,155,2016-10-10T01:53:34Z,2017-05-23T13:37:07Z,2017-05-23T22:27:33Z,CLOSED,False,4,2,1,https://github.com/jonesmz,Enable C99 language standard.,1,[],https://github.com/corosync/corosync/pull/155,https://github.com/jonesmz,8,https://github.com/corosync/corosync/pull/155#issuecomment-302202393,"C99 was ratified by ANSI in May 2000, making it close to 17 years old at the time this pull request was created.
Being able to declare variables at the location of usage is a huge usability improvement, IMHO, and I'd really like to see that option available to the corosync project.","By the way, by default gcc 5.4.0 or newer are selecting gnu11. See here for details: https://gcc.gnu.org/onlinedocs/gcc-5.4.0/gcc/Standards.html",True,{}
corosync/corosync,https://github.com/corosync/corosync,155,2016-10-10T01:53:34Z,2017-05-23T13:37:07Z,2017-05-23T22:27:33Z,CLOSED,False,4,2,1,https://github.com/jonesmz,Enable C99 language standard.,1,[],https://github.com/corosync/corosync/pull/155,https://github.com/jfriesse,9,https://github.com/corosync/corosync/pull/155#issuecomment-302441698,"C99 was ratified by ANSI in May 2000, making it close to 17 years old at the time this pull request was created.
Being able to declare variables at the location of usage is a huge usability improvement, IMHO, and I'd really like to see that option available to the corosync project.","Whups, sorry completely forget about this patch. Btw. I've seen you've included similar patch to both knet and libqb but without removing gnu89-inline and declaration-after-statement in WARNLIST. Why it's so?",True,{}
corosync/corosync,https://github.com/corosync/corosync,155,2016-10-10T01:53:34Z,2017-05-23T13:37:07Z,2017-05-23T22:27:33Z,CLOSED,False,4,2,1,https://github.com/jonesmz,Enable C99 language standard.,1,[],https://github.com/corosync/corosync/pull/155,https://github.com/jonesmz,10,https://github.com/corosync/corosync/pull/155#issuecomment-302446671,"C99 was ratified by ANSI in May 2000, making it close to 17 years old at the time this pull request was created.
Being able to declare variables at the location of usage is a huge usability improvement, IMHO, and I'd really like to see that option available to the corosync project.","Those warnings dont trigger in the other two projects code, as far as I can tell, so I did not realize they were enabled, or think to patch them out.",True,{}
corosync/corosync,https://github.com/corosync/corosync,155,2016-10-10T01:53:34Z,2017-05-23T13:37:07Z,2017-05-23T22:27:33Z,CLOSED,False,4,2,1,https://github.com/jonesmz,Enable C99 language standard.,1,[],https://github.com/corosync/corosync/pull/155,https://github.com/jfriesse,11,https://github.com/corosync/corosync/pull/155#issuecomment-303400100,"C99 was ratified by ANSI in May 2000, making it close to 17 years old at the time this pull request was created.
Being able to declare variables at the location of usage is a huge usability improvement, IMHO, and I'd really like to see that option available to the corosync project.","Ok, make sense.
I've finally tried with clang and it looks good, so ack, and merged as f8053a3.
Thank you for the patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,157,2016-10-10T16:18:28Z,2016-10-12T14:20:30Z,2017-01-03T05:28:08Z,CLOSED,False,3,3,1,https://github.com/jonesmz,Prevents use of uninitialized buffer,2,[],https://github.com/corosync/corosync/pull/157,https://github.com/jonesmz,1,https://github.com/corosync/corosync/pull/157,Addresses: #156,Addresses: #156,True,{}
corosync/corosync,https://github.com/corosync/corosync,157,2016-10-10T16:18:28Z,2016-10-12T14:20:30Z,2017-01-03T05:28:08Z,CLOSED,False,3,3,1,https://github.com/jonesmz,Prevents use of uninitialized buffer,2,[],https://github.com/corosync/corosync/pull/157,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/157#issuecomment-253226842,Addresses: #156,@jonesmz Thanks for patch. I've removed movement of reason because I personally like variables declared in the beginning. Otherwise it's ack and in master as a24d26c,True,{}
corosync/corosync,https://github.com/corosync/corosync,161,2016-10-25T11:48:57Z,2016-10-27T12:58:29Z,2016-10-27T12:58:34Z,CLOSED,False,429,655,30,https://github.com/jfriesse,Listh removal,3,[],https://github.com/corosync/corosync/pull/161,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/161,Because original pull request #109 introduced HUGE amount of big problems because of not using for_each_safe asking for review of this patch set (include original patch from #109). Basically need another pair of eyes.,Because original pull request #109 introduced HUGE amount of big problems because of not using for_each_safe asking for review of this patch set (include original patch from #109). Basically need another pair of eyes.,True,{}
corosync/corosync,https://github.com/corosync/corosync,161,2016-10-25T11:48:57Z,2016-10-27T12:58:29Z,2016-10-27T12:58:34Z,CLOSED,False,429,655,30,https://github.com/jfriesse,Listh removal,3,[],https://github.com/corosync/corosync/pull/161,https://github.com/chrissie-c,2,https://github.com/corosync/corosync/pull/161#issuecomment-256063452,Because original pull request #109 introduced HUGE amount of big problems because of not using for_each_safe asking for review of this patch set (include original patch from #109). Basically need another pair of eyes.,"Two very minor niggles (to prove I've ready every line as much as anything else)
Strictly speaking, the _safe() version isn't needed in cpg.c:1871 (break after free) or icmap.c:1235 (return after free), but I understand why it's been done. Least surprise if the code is changed is a good thing.
Also there's spaces instead of tabs in icmap.c:235",True,{}
corosync/corosync,https://github.com/corosync/corosync,161,2016-10-25T11:48:57Z,2016-10-27T12:58:29Z,2016-10-27T12:58:34Z,CLOSED,False,429,655,30,https://github.com/jfriesse,Listh removal,3,[],https://github.com/corosync/corosync/pull/161,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/161#issuecomment-256633390,Because original pull request #109 introduced HUGE amount of big problems because of not using for_each_safe asking for review of this patch set (include original patch from #109). Basically need another pair of eyes.,"@chrissie-c Thanks for review. I've fixed icmap.c:235 and merged commits as b4c06e5, 7a8732d and 1f90c31",True,{}
corosync/corosync,https://github.com/corosync/corosync,165,2016-11-08T15:42:26Z,2016-11-14T15:01:34Z,2016-11-14T15:02:05Z,MERGED,True,7,6,1,https://github.com/chrissie-c,knet: Don't lose log messages when knet gets busy,1,[],https://github.com/corosync/corosync/pull/165,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/165,"Look through the whole buffer for log messages, not just the the start.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","Look through the whole buffer for log messages, not just the the start.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,165,2016-11-08T15:42:26Z,2016-11-14T15:01:34Z,2016-11-14T15:02:05Z,MERGED,True,7,6,1,https://github.com/chrissie-c,knet: Don't lose log messages when knet gets busy,1,[],https://github.com/corosync/corosync/pull/165,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/165#issuecomment-259201128,"Look through the whole buffer for log messages, not just the the start.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","@chrissie-c ACK. Actually, I believe it may make sense to use ""auto-ack"" for knet related patches in this phase of developement. Of course with exception of patches where you would really like to see review (I don't think this one is the case).",True,{}
corosync/corosync,https://github.com/corosync/corosync,165,2016-11-08T15:42:26Z,2016-11-14T15:01:34Z,2016-11-14T15:02:05Z,MERGED,True,7,6,1,https://github.com/chrissie-c,knet: Don't lose log messages when knet gets busy,1,[],https://github.com/corosync/corosync/pull/165,https://github.com/chrissie-c,3,https://github.com/corosync/corosync/pull/165#issuecomment-260357673,"Look through the whole buffer for log messages, not just the the start.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","Yes, that makes sense really.",True,{}
corosync/corosync,https://github.com/corosync/corosync,166,2016-11-13T16:17:08Z,2016-11-15T11:20:38Z,2016-11-15T11:20:38Z,CLOSED,False,11,14,3,https://github.com/miz-take,Unify the list processing with qb_list function,1,[],https://github.com/corosync/corosync/pull/166,https://github.com/miz-take,1,https://github.com/corosync/corosync/pull/166,"There was processing which is referring to the member of ""struct qb_list_head"".
We hid this processing by qb_list function.","There was processing which is referring to the member of ""struct qb_list_head"".
We hid this processing by qb_list function.",True,{}
corosync/corosync,https://github.com/corosync/corosync,166,2016-11-13T16:17:08Z,2016-11-15T11:20:38Z,2016-11-15T11:20:38Z,CLOSED,False,11,14,3,https://github.com/miz-take,Unify the list processing with qb_list function,1,[],https://github.com/corosync/corosync/pull/166,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/166#issuecomment-260615863,"There was processing which is referring to the member of ""struct qb_list_head"".
We hid this processing by qb_list function.","@miz-take Nice patch, ACK. It's now commited in master as f5dcc4a. Thanks you for patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,168,2016-11-17T06:17:48Z,2016-11-21T17:05:18Z,2017-11-07T08:18:37Z,CLOSED,False,1,1,1,https://github.com/yuusuke,systemd: Delete unnecessary soft_margin,1,[],https://github.com/corosync/corosync/pull/168,https://github.com/yuusuke,1,https://github.com/corosync/corosync/pull/168,"Current timeout value of watchdog device is initialized to 6s inside wd.c.
Therefore I delete soft_margin which has no meaning to set.","Current timeout value of watchdog device is initialized to 6s inside wd.c.
Therefore I delete soft_margin which has no meaning to set.",True,{}
corosync/corosync,https://github.com/corosync/corosync,168,2016-11-17T06:17:48Z,2016-11-21T17:05:18Z,2017-11-07T08:18:37Z,CLOSED,False,1,1,1,https://github.com/yuusuke,systemd: Delete unnecessary soft_margin,1,[],https://github.com/corosync/corosync/pull/168,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/168#issuecomment-262000604,"Current timeout value of watchdog device is initialized to 6s inside wd.c.
Therefore I delete soft_margin which has no meaning to set.",@yuusuke Thanks for patch. Merged to master as 818b268 .,True,{}
corosync/corosync,https://github.com/corosync/corosync,168,2016-11-17T06:17:48Z,2016-11-21T17:05:18Z,2017-11-07T08:18:37Z,CLOSED,False,1,1,1,https://github.com/yuusuke,systemd: Delete unnecessary soft_margin,1,[],https://github.com/corosync/corosync/pull/168,https://github.com/yuusuke,3,https://github.com/corosync/corosync/pull/168#issuecomment-262120263,"Current timeout value of watchdog device is initialized to 6s inside wd.c.
Therefore I delete soft_margin which has no meaning to set.",Thank you Merge.,True,{}
corosync/corosync,https://github.com/corosync/corosync,168,2016-11-17T06:17:48Z,2016-11-21T17:05:18Z,2017-11-07T08:18:37Z,CLOSED,False,1,1,1,https://github.com/yuusuke,systemd: Delete unnecessary soft_margin,1,[],https://github.com/corosync/corosync/pull/168,https://github.com/yuusuke,4,https://github.com/corosync/corosync/pull/168#issuecomment-342404644,"Current timeout value of watchdog device is initialized to 6s inside wd.c.
Therefore I delete soft_margin which has no meaning to set.","Hi
I would like you to include this commit in the next tag release 2.4.4.
Would you merge this commit into the needle branch too?",True,{}
corosync/corosync,https://github.com/corosync/corosync,168,2016-11-17T06:17:48Z,2016-11-21T17:05:18Z,2017-11-07T08:18:37Z,CLOSED,False,1,1,1,https://github.com/yuusuke,systemd: Delete unnecessary soft_margin,1,[],https://github.com/corosync/corosync/pull/168,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/168#issuecomment-342406022,"Current timeout value of watchdog device is initialized to 6s inside wd.c.
Therefore I delete soft_margin which has no meaning to set.","@yuusuke Yep, np, it's commented out by default anyway, so it's safe to include into stable version.
Cherry-picked as 41f8a79",True,{}
corosync/corosync,https://github.com/corosync/corosync,168,2016-11-17T06:17:48Z,2016-11-21T17:05:18Z,2017-11-07T08:18:37Z,CLOSED,False,1,1,1,https://github.com/yuusuke,systemd: Delete unnecessary soft_margin,1,[],https://github.com/corosync/corosync/pull/168,https://github.com/yuusuke,6,https://github.com/corosync/corosync/pull/168#issuecomment-342407763,"Current timeout value of watchdog device is initialized to 6s inside wd.c.
Therefore I delete soft_margin which has no meaning to set.",Thank you for quick response!,True,{}
corosync/corosync,https://github.com/corosync/corosync,169,2016-11-23T07:41:07Z,2016-11-23T08:24:01Z,2016-11-23T08:24:01Z,CLOSED,False,2,2,1,https://github.com/miz-take,modify return code when realloc failed,1,[],https://github.com/corosync/corosync/pull/169,https://github.com/miz-take,1,https://github.com/corosync/corosync/pull/169,"totempg_groups_join() is called by sync_init().
sync_init() judge that totempg_groups_join() failed if return code of totempg_groups_join() is -1.
Therefore, the return code should return in -1 when totempg_groups_join() fails.","totempg_groups_join() is called by sync_init().
sync_init() judge that totempg_groups_join() failed if return code of totempg_groups_join() is -1.
Therefore, the return code should return in -1 when totempg_groups_join() fails.",True,{}
corosync/corosync,https://github.com/corosync/corosync,169,2016-11-23T07:41:07Z,2016-11-23T08:24:01Z,2016-11-23T08:24:01Z,CLOSED,False,2,2,1,https://github.com/miz-take,modify return code when realloc failed,1,[],https://github.com/corosync/corosync/pull/169,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/169#issuecomment-262455768,"totempg_groups_join() is called by sync_init().
sync_init() judge that totempg_groups_join() failed if return code of totempg_groups_join() is -1.
Therefore, the return code should return in -1 when totempg_groups_join() fails.","@miz-take Nice catch, thanks for patch. ACK and merged as 9c5b39d.",True,{}
corosync/corosync,https://github.com/corosync/corosync,170,2016-11-25T16:16:14Z,2016-11-28T08:30:36Z,2016-11-28T08:30:36Z,CLOSED,False,48,48,36,https://github.com/miz-take,man: Fix typos in man page,1,[],https://github.com/corosync/corosync/pull/170,https://github.com/miz-take,1,https://github.com/corosync/corosync/pull/170,We fixed misspellings etc in man page.,We fixed misspellings etc in man page.,True,{}
corosync/corosync,https://github.com/corosync/corosync,170,2016-11-25T16:16:14Z,2016-11-28T08:30:36Z,2016-11-28T08:30:36Z,CLOSED,False,48,48,36,https://github.com/miz-take,man: Fix typos in man page,1,[],https://github.com/corosync/corosync/pull/170,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/170#issuecomment-263210903,We fixed misspellings etc in man page.,"@miz-take Thanks for patches, nice work. I've fixed just one issue where fplay should really stay fplay (not play). Other than that ACK and merged as fef5e11.
Thanks again for your work.
Btw. The year 3004 was really good catch ;)",True,{}
corosync/corosync,https://github.com/corosync/corosync,171,2016-11-26T22:07:40Z,2016-11-28T08:55:17Z,2016-11-28T09:01:15Z,CLOSED,False,2,2,2,https://github.com/wferi,Typo fixes,2,[],https://github.com/corosync/corosync/pull/171,https://github.com/wferi,1,https://github.com/corosync/corosync/pull/171,These apply to the needle branch as well.,These apply to the needle branch as well.,True,{}
corosync/corosync,https://github.com/corosync/corosync,171,2016-11-26T22:07:40Z,2016-11-28T08:55:17Z,2016-11-28T09:01:15Z,CLOSED,False,2,2,2,https://github.com/wferi,Typo fixes,2,[],https://github.com/corosync/corosync/pull/171,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/171#issuecomment-263215494,These apply to the needle branch as well.,"@wferi Nice catches. First one conflicted (fixed same typo) with #170, so I've merged only second one as 66c6a9b.
Thanks for patches.",True,{}
corosync/corosync,https://github.com/corosync/corosync,172,2016-11-26T22:10:15Z,2016-11-28T08:56:22Z,2016-11-28T09:02:40Z,CLOSED,False,1,1,1,https://github.com/wferi,Fix typo: recomended -> recommended,1,[],https://github.com/corosync/corosync/pull/172,https://github.com/wferi,1,https://github.com/corosync/corosync/pull/172,"This text has been removed on the master branch, so this patch does not apply there.","This text has been removed on the master branch, so this patch does not apply there.",True,{}
corosync/corosync,https://github.com/corosync/corosync,172,2016-11-26T22:10:15Z,2016-11-28T08:56:22Z,2016-11-28T09:02:40Z,CLOSED,False,1,1,1,https://github.com/wferi,Fix typo: recomended -> recommended,1,[],https://github.com/corosync/corosync/pull/172,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/172#issuecomment-263215708,"This text has been removed on the master branch, so this patch does not apply there.","@wferi Nice catch. Sadly it conflicted (fixes same typo) with #170, so not included.
Thanks for patches.",True,{}
corosync/corosync,https://github.com/corosync/corosync,173,2016-11-26T22:14:04Z,2016-11-28T08:58:51Z,2016-11-28T09:04:06Z,CLOSED,False,4,0,4,https://github.com/wferi,Add Documentation URIs to the systemd service files,1,[],https://github.com/corosync/corosync/pull/173,https://github.com/wferi,1,https://github.com/corosync/corosync/pull/173,"These are used by systemctl help.
This patch applies to needle as well.","These are used by systemctl help.
This patch applies to needle as well.",True,{}
corosync/corosync,https://github.com/corosync/corosync,173,2016-11-26T22:14:04Z,2016-11-28T08:58:51Z,2016-11-28T09:04:06Z,CLOSED,False,4,0,4,https://github.com/wferi,Add Documentation URIs to the systemd service files,1,[],https://github.com/corosync/corosync/pull/173,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/173#issuecomment-263216243,"These are used by systemctl help.
This patch applies to needle as well.","@wferi Nice catch, ACK and merged as 8a940f9.
Thanks a lot for patches.",True,{}
corosync/corosync,https://github.com/corosync/corosync,174,2016-11-30T17:48:43Z,2016-12-01T15:36:34Z,2016-12-01T15:36:34Z,CLOSED,False,47,39,14,https://github.com/miz-take,man: Modify man-page according to command usage,1,[],https://github.com/corosync/corosync/pull/174,https://github.com/miz-take,1,https://github.com/corosync/corosync/pull/174,"There was a processing where command usage and man-page did not match, so we fixed it.
In addition, there was a processing where command usage and its implementation do not match, so we fixed it too.","There was a processing where command usage and man-page did not match, so we fixed it.
In addition, there was a processing where command usage and its implementation do not match, so we fixed it too.",True,{}
corosync/corosync,https://github.com/corosync/corosync,174,2016-11-30T17:48:43Z,2016-12-01T15:36:34Z,2016-12-01T15:36:34Z,CLOSED,False,47,39,14,https://github.com/miz-take,man: Modify man-page according to command usage,1,[],https://github.com/corosync/corosync/pull/174,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/174#issuecomment-264205473,"There was a processing where command usage and man-page did not match, so we fixed it.
In addition, there was a processing where command usage and its implementation do not match, so we fixed it too.","@miz-take Good catch(es). ACK and merged as 034553c.
Thank you for patches.",True,{}
corosync/corosync,https://github.com/corosync/corosync,175,2016-12-02T02:42:25Z,2016-12-05T08:42:55Z,2016-12-06T01:24:49Z,CLOSED,False,0,2,1,https://github.com/liu4480,Fix: remove duplicate memcpy in totempg.c: mcast_msg,1,[],https://github.com/corosync/corosync/pull/175,https://github.com/liu4480,1,https://github.com/corosync/corosync/pull/175,"In function mcast_msg of totempg.c, line 923, there is a memcpy call in
""else"" branch, and also another memcpy out of the ""else"" branch, while
the two calls have the same parameters. I think we can remove the memcpy
in ""else"" branch.","In function mcast_msg of totempg.c, line 923, there is a memcpy call in
""else"" branch, and also another memcpy out of the ""else"" branch, while
the two calls have the same parameters. I think we can remove the memcpy
in ""else"" branch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,175,2016-12-02T02:42:25Z,2016-12-05T08:42:55Z,2016-12-06T01:24:49Z,CLOSED,False,0,2,1,https://github.com/liu4480,Fix: remove duplicate memcpy in totempg.c: mcast_msg,1,[],https://github.com/corosync/corosync/pull/175,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/175#issuecomment-264796348,"In function mcast_msg of totempg.c, line 923, there is a memcpy call in
""else"" branch, and also another memcpy out of the ""else"" branch, while
the two calls have the same parameters. I think we can remove the memcpy
in ""else"" branch.","@liu4480 Nice catch! Ack and merged as 819d66c (+ 4a8e9d8 for needle branch).
Thank you for patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,175,2016-12-02T02:42:25Z,2016-12-05T08:42:55Z,2016-12-06T01:24:49Z,CLOSED,False,0,2,1,https://github.com/liu4480,Fix: remove duplicate memcpy in totempg.c: mcast_msg,1,[],https://github.com/corosync/corosync/pull/175,https://github.com/liu4480,3,https://github.com/corosync/corosync/pull/175#issuecomment-265032834,"In function mcast_msg of totempg.c, line 923, there is a memcpy call in
""else"" branch, and also another memcpy out of the ""else"" branch, while
the two calls have the same parameters. I think we can remove the memcpy
in ""else"" branch.",thanks for merging the patch :),True,{}
corosync/corosync,https://github.com/corosync/corosync,176,2016-12-02T07:41:47Z,2016-12-05T08:48:47Z,2016-12-05T10:04:29Z,CLOSED,False,2,0,1,https://github.com/yuusuke,upstart: Add softdog module loading process,1,[],https://github.com/corosync/corosync/pull/176,https://github.com/yuusuke,1,https://github.com/corosync/corosync/pull/176,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,176,2016-12-02T07:41:47Z,2016-12-05T08:48:47Z,2016-12-05T10:04:29Z,CLOSED,False,2,0,1,https://github.com/yuusuke,upstart: Add softdog module loading process,1,[],https://github.com/corosync/corosync/pull/176,https://github.com/yuusuke,2,https://github.com/corosync/corosync/pull/176#issuecomment-264403458,,"Up to now modprobe softdog was running in pacemaker's pacemaker.combined.conf but I thought it was appropriate to run it from corosync's upstart because of the compatibility issues of the combination of pacemaker and corosync.
Since I am doing modprobe softdog also in the start script of systemd, I think that it is good to make it all together.
I discussed here.
ClusterLabs/pacemaker#1181",True,{}
corosync/corosync,https://github.com/corosync/corosync,176,2016-12-02T07:41:47Z,2016-12-05T08:48:47Z,2016-12-05T10:04:29Z,CLOSED,False,2,0,1,https://github.com/yuusuke,upstart: Add softdog module loading process,1,[],https://github.com/corosync/corosync/pull/176,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/176#issuecomment-264797400,,"@yuusuke Good patch, ACK and merged as 1d05569 (and 75474d6 in needle branch).
Thank you for patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,176,2016-12-02T07:41:47Z,2016-12-05T08:48:47Z,2016-12-05T10:04:29Z,CLOSED,False,2,0,1,https://github.com/yuusuke,upstart: Add softdog module loading process,1,[],https://github.com/corosync/corosync/pull/176,https://github.com/yuusuke,4,https://github.com/corosync/corosync/pull/176#issuecomment-264813437,,"Hi, jfriesse
Thank you for merging!",True,{}
corosync/corosync,https://github.com/corosync/corosync,177,2016-12-02T12:26:34Z,2016-12-05T08:51:41Z,2016-12-05T09:06:44Z,CLOSED,False,0,45,1,https://github.com/wferi,Remove deprecated doxygen flags,1,[],https://github.com/corosync/corosync/pull/177,https://github.com/wferi,1,https://github.com/corosync/corosync/pull/177,"Running 'doxygen -u Doxyfile.in' in the source root produces the
following results:

SYMBOL_CACHE_SIZE at line 301 has become obsolete. This tag
has been removed.
SHOW_DIRECTORIES at line 507 has become obsolete. This tag
has been removed.
HTML_ALIGN_MEMBERS at line 881 has become obsolete. This tag
has been removed.
USE_INLINE_TREES at line 1067 has become obsolete. This tag
has been removed.
XML_SCHEMA at line 1311 has become obsolete. This tag has been
removed.
XML_DTD at line 1317 has become obsolete. This tag has been
removed.","Running 'doxygen -u Doxyfile.in' in the source root produces the
following results:

SYMBOL_CACHE_SIZE at line 301 has become obsolete. This tag
has been removed.
SHOW_DIRECTORIES at line 507 has become obsolete. This tag
has been removed.
HTML_ALIGN_MEMBERS at line 881 has become obsolete. This tag
has been removed.
USE_INLINE_TREES at line 1067 has become obsolete. This tag
has been removed.
XML_SCHEMA at line 1311 has become obsolete. This tag has been
removed.
XML_DTD at line 1317 has become obsolete. This tag has been
removed.",True,{}
corosync/corosync,https://github.com/corosync/corosync,177,2016-12-02T12:26:34Z,2016-12-05T08:51:41Z,2016-12-05T09:06:44Z,CLOSED,False,0,45,1,https://github.com/wferi,Remove deprecated doxygen flags,1,[],https://github.com/corosync/corosync/pull/177,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/177#issuecomment-264797951,"Running 'doxygen -u Doxyfile.in' in the source root produces the
following results:

SYMBOL_CACHE_SIZE at line 301 has become obsolete. This tag
has been removed.
SHOW_DIRECTORIES at line 507 has become obsolete. This tag
has been removed.
HTML_ALIGN_MEMBERS at line 881 has become obsolete. This tag
has been removed.
USE_INLINE_TREES at line 1067 has become obsolete. This tag
has been removed.
XML_SCHEMA at line 1311 has become obsolete. This tag has been
removed.
XML_DTD at line 1317 has become obsolete. This tag has been
removed.","@wferi Good patch, ACK and merged as b252013 (and for master as c3775f9).
Thank you for patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,177,2016-12-02T12:26:34Z,2016-12-05T08:51:41Z,2016-12-05T09:06:44Z,CLOSED,False,0,45,1,https://github.com/wferi,Remove deprecated doxygen flags,1,[],https://github.com/corosync/corosync/pull/177,https://github.com/wferi,3,https://github.com/corosync/corosync/pull/177#issuecomment-264800803,"Running 'doxygen -u Doxyfile.in' in the source root produces the
following results:

SYMBOL_CACHE_SIZE at line 301 has become obsolete. This tag
has been removed.
SHOW_DIRECTORIES at line 507 has become obsolete. This tag
has been removed.
HTML_ALIGN_MEMBERS at line 881 has become obsolete. This tag
has been removed.
USE_INLINE_TREES at line 1067 has become obsolete. This tag
has been removed.
XML_SCHEMA at line 1311 has become obsolete. This tag has been
removed.
XML_DTD at line 1317 has become obsolete. This tag has been
removed.",Thanks for the merge. Now prepare for the scary stuff... ;-),True,{}
corosync/corosync,https://github.com/corosync/corosync,178,2016-12-04T16:38:48Z,2016-12-05T09:04:37Z,2016-12-05T09:04:37Z,CLOSED,False,0,19,13,https://github.com/miz-take,Remove redundant header file inclusion,1,[],https://github.com/corosync/corosync/pull/178,https://github.com/miz-take,1,https://github.com/corosync/corosync/pull/178,"There was a source code redundantly including the same header file.
So, we remove redundant header file inclusion.","There was a source code redundantly including the same header file.
So, we remove redundant header file inclusion.",True,{}
corosync/corosync,https://github.com/corosync/corosync,178,2016-12-04T16:38:48Z,2016-12-05T09:04:37Z,2016-12-05T09:04:37Z,CLOSED,False,0,19,13,https://github.com/miz-take,Remove redundant header file inclusion,1,[],https://github.com/corosync/corosync/pull/178,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/178#issuecomment-264800424,"There was a source code redundantly including the same header file.
So, we remove redundant header file inclusion.","@miz-take Nice catch. I've made small correction in qdevices/tlv.c (delete second occurrence of header file (in openbsd specific section) instead of first one, keep in mind NetBSD/FreeBSD may need sys/types.h implicitly included) and merged as 4939c75 (and rebased to needle branch as d6c7ade).
Thank you for patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,179,2016-12-09T04:32:11Z,2016-12-09T08:07:57Z,2016-12-09T08:07:57Z,CLOSED,False,13,13,3,https://github.com/liu4480,typo fix: spell errors in qdevices/qdevice-net-algo-test.c,3,[],https://github.com/corosync/corosync/pull/179,https://github.com/liu4480,1,https://github.com/corosync/corosync/pull/179,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,180,2016-12-09T08:12:33Z,2016-12-12T10:35:59Z,2016-12-13T04:19:16Z,CLOSED,False,15,15,4,https://github.com/liu4480,typo fix: spell errors in qdevice,1,[],https://github.com/corosync/corosync/pull/180,https://github.com/liu4480,1,https://github.com/corosync/corosync/pull/180,"There are somwe spell errors in qdevice-net-algo-test.c,
qnetd-algo-2nodelms.c, qnetd-algo-test.c","There are somwe spell errors in qdevice-net-algo-test.c,
qnetd-algo-2nodelms.c, qnetd-algo-test.c",True,{}
corosync/corosync,https://github.com/corosync/corosync,180,2016-12-09T08:12:33Z,2016-12-12T10:35:59Z,2016-12-13T04:19:16Z,CLOSED,False,15,15,4,https://github.com/liu4480,typo fix: spell errors in qdevice,1,[],https://github.com/corosync/corosync/pull/180,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/180#issuecomment-266395032,"There are somwe spell errors in qdevice-net-algo-test.c,
qnetd-algo-2nodelms.c, qnetd-algo-test.c","@liu4480 Nice patch. ACK and merged as 5cf5875.
Thank you for patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,180,2016-12-09T08:12:33Z,2016-12-12T10:35:59Z,2016-12-13T04:19:16Z,CLOSED,False,15,15,4,https://github.com/liu4480,typo fix: spell errors in qdevice,1,[],https://github.com/corosync/corosync/pull/180,https://github.com/liu4480,3,https://github.com/corosync/corosync/pull/180#issuecomment-266636731,"There are somwe spell errors in qdevice-net-algo-test.c,
qnetd-algo-2nodelms.c, qnetd-algo-test.c",Thanks for merging the patch,True,{}
corosync/corosync,https://github.com/corosync/corosync,185,2017-01-03T07:33:23Z,2017-01-03T07:45:56Z,2017-01-03T08:00:35Z,CLOSED,False,3572,4597,116,https://github.com/jonesmz,Run clang format on all headerfiles in corosync,1,[],https://github.com/corosync/corosync/pull/185,https://github.com/jonesmz,1,https://github.com/corosync/corosync/pull/185,"This pull request reformats all of the headerfiles in corosync using the clang-format utility. ( clang-format version 3.7.1 (tags/RELEASE_371/final) )
I simply ran this script while in the corosync directory: find . -iname *.h  | xargs clang-format -style=file -i
The vast majority of the differences in this pull request are converting from tabs to spaces.
It appears that the corosync project prefers tabs for indentation. The stereotypical arguments for or against doing that notwithstanding, the reason that this pull requests converts to spaces is simply because clang-format just does not format things properly when it's limited to tabs.
An example of improper formatting is, for any function taking a function pointer as a parameter, the parameters for that function would have their indentation assigned in a way that appears random.
Using spaces for indentation provides the formatting tool with significantly more room for ""pretty"" formatting, such as aligning assignment statements, function parameters, struct members, so on.
I chose the other formatting options for clang format based on what caused the smallest number of differences. If there is a specific option that you'd like to see changed, just let me know and I can rewrite the commit.","This pull request reformats all of the headerfiles in corosync using the clang-format utility. ( clang-format version 3.7.1 (tags/RELEASE_371/final) )
I simply ran this script while in the corosync directory: find . -iname *.h  | xargs clang-format -style=file -i
The vast majority of the differences in this pull request are converting from tabs to spaces.
It appears that the corosync project prefers tabs for indentation. The stereotypical arguments for or against doing that notwithstanding, the reason that this pull requests converts to spaces is simply because clang-format just does not format things properly when it's limited to tabs.
An example of improper formatting is, for any function taking a function pointer as a parameter, the parameters for that function would have their indentation assigned in a way that appears random.
Using spaces for indentation provides the formatting tool with significantly more room for ""pretty"" formatting, such as aligning assignment statements, function parameters, struct members, so on.
I chose the other formatting options for clang format based on what caused the smallest number of differences. If there is a specific option that you'd like to see changed, just let me know and I can rewrite the commit.",True,{}
corosync/corosync,https://github.com/corosync/corosync,185,2017-01-03T07:33:23Z,2017-01-03T07:45:56Z,2017-01-03T08:00:35Z,CLOSED,False,3572,4597,116,https://github.com/jonesmz,Run clang format on all headerfiles in corosync,1,[],https://github.com/corosync/corosync/pull/185,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/185#issuecomment-270063765,"This pull request reformats all of the headerfiles in corosync using the clang-format utility. ( clang-format version 3.7.1 (tags/RELEASE_371/final) )
I simply ran this script while in the corosync directory: find . -iname *.h  | xargs clang-format -style=file -i
The vast majority of the differences in this pull request are converting from tabs to spaces.
It appears that the corosync project prefers tabs for indentation. The stereotypical arguments for or against doing that notwithstanding, the reason that this pull requests converts to spaces is simply because clang-format just does not format things properly when it's limited to tabs.
An example of improper formatting is, for any function taking a function pointer as a parameter, the parameters for that function would have their indentation assigned in a way that appears random.
Using spaces for indentation provides the formatting tool with significantly more room for ""pretty"" formatting, such as aligning assignment statements, function parameters, struct members, so on.
I chose the other formatting options for clang format based on what caused the smallest number of differences. If there is a specific option that you'd like to see changed, just let me know and I can rewrite the commit.","I don't want argue about using Tabs vs. spaces. Corosync uses tabs and I don't see any reason why to change it. Also applying 500Kb patch is  ... not ok. Last but not least, it would make completely impossible to cherry-pick new patches to older branches.",True,{}
corosync/corosync,https://github.com/corosync/corosync,187,2017-01-03T07:54:05Z,2017-01-03T07:59:34Z,2017-01-03T08:00:51Z,CLOSED,False,2406,3431,115,https://github.com/jonesmz,Run clang format on all headerfiles in corosync,1,[],https://github.com/corosync/corosync/pull/187,https://github.com/jonesmz,1,https://github.com/corosync/corosync/pull/187,"Unlike pull request #185, this patch uses tabs for all indentation
This pull request reformats all of the headerfiles in corosync using the clang-format utility. ( clang-format version 3.7.1 (tags/RELEASE_371/final) )
I simply ran this script while in the corosync directory: find . -iname *.h | xargs clang-format -style=file -i
clang-format chokes when using tabs for formatting, in part because the tool simply is not allowed to align things due to the side of the tab.
An example of improper formatting is, for any function taking a function pointer as a parameter, the parameters for that function would have their indentation assigned in a way that appears random.
I chose the other formatting options for clang format based on what caused the smallest number of differences. If there is a specific option that you'd like to see changed, just let me know and I can rewrite the commit.","Unlike pull request #185, this patch uses tabs for all indentation
This pull request reformats all of the headerfiles in corosync using the clang-format utility. ( clang-format version 3.7.1 (tags/RELEASE_371/final) )
I simply ran this script while in the corosync directory: find . -iname *.h | xargs clang-format -style=file -i
clang-format chokes when using tabs for formatting, in part because the tool simply is not allowed to align things due to the side of the tab.
An example of improper formatting is, for any function taking a function pointer as a parameter, the parameters for that function would have their indentation assigned in a way that appears random.
I chose the other formatting options for clang format based on what caused the smallest number of differences. If there is a specific option that you'd like to see changed, just let me know and I can rewrite the commit.",True,{}
corosync/corosync,https://github.com/corosync/corosync,188,2017-01-03T08:28:23Z,2018-01-12T02:12:46Z,2018-01-12T02:12:46Z,CLOSED,False,2120,3134,112,https://github.com/jonesmz,Use clang-format on header files. Preserves tabs,1,[],https://github.com/corosync/corosync/pull/188,https://github.com/jonesmz,1,https://github.com/corosync/corosync/pull/188,"Unlike pull request #185, this patch uses tabs for all indentation
This pull request reformats all of the headerfiles in corosync using the clang-format utility. ( clang-format version 3.7.1 (tags/RELEASE_371/final) )
I simply ran this script while in the corosync directory: find . -iname *.h | xargs clang-format -style=file -i
clang-format chokes when using tabs for formatting, in part because the tool simply is not allowed to align things due to the size of the tab.
An example of improper formatting is, for any function taking a function pointer as a parameter, the parameters for that function would have their indentation assigned in a way that appears random.
I chose the other formatting options for clang format based on what caused the smallest number of differences. If there is a specific option that you'd like to see changed, just let me know and I can rewrite the commit.
Using the style guide here:
https://github.com/corosync/corosync/wiki/Code-Style-Guidelines
Clang-format provides options for the following items from the style guide:
indentation: one tab stop
one space before opening parenthesis
opening brace on the same line as if, else for, switch, case and while else on the same line as if closing brace
open and close braces for functions on own separate lines
opening and closing braces required even for single line if, for, while statements
This changelist does not enforce:
Maximum line length 80 chars or less
Far too many lines go beyond 80 lines in the corosync project to turn this formatting rule on.","Unlike pull request #185, this patch uses tabs for all indentation
This pull request reformats all of the headerfiles in corosync using the clang-format utility. ( clang-format version 3.7.1 (tags/RELEASE_371/final) )
I simply ran this script while in the corosync directory: find . -iname *.h | xargs clang-format -style=file -i
clang-format chokes when using tabs for formatting, in part because the tool simply is not allowed to align things due to the size of the tab.
An example of improper formatting is, for any function taking a function pointer as a parameter, the parameters for that function would have their indentation assigned in a way that appears random.
I chose the other formatting options for clang format based on what caused the smallest number of differences. If there is a specific option that you'd like to see changed, just let me know and I can rewrite the commit.
Using the style guide here:
https://github.com/corosync/corosync/wiki/Code-Style-Guidelines
Clang-format provides options for the following items from the style guide:
indentation: one tab stop
one space before opening parenthesis
opening brace on the same line as if, else for, switch, case and while else on the same line as if closing brace
open and close braces for functions on own separate lines
opening and closing braces required even for single line if, for, while statements
This changelist does not enforce:
Maximum line length 80 chars or less
Far too many lines go beyond 80 lines in the corosync project to turn this formatting rule on.",True,{}
corosync/corosync,https://github.com/corosync/corosync,188,2017-01-03T08:28:23Z,2018-01-12T02:12:46Z,2018-01-12T02:12:46Z,CLOSED,False,2120,3134,112,https://github.com/jonesmz,Use clang-format on header files. Preserves tabs,1,[],https://github.com/corosync/corosync/pull/188,https://github.com/jonesmz,2,https://github.com/corosync/corosync/pull/188#issuecomment-270070943,"Unlike pull request #185, this patch uses tabs for all indentation
This pull request reformats all of the headerfiles in corosync using the clang-format utility. ( clang-format version 3.7.1 (tags/RELEASE_371/final) )
I simply ran this script while in the corosync directory: find . -iname *.h | xargs clang-format -style=file -i
clang-format chokes when using tabs for formatting, in part because the tool simply is not allowed to align things due to the size of the tab.
An example of improper formatting is, for any function taking a function pointer as a parameter, the parameters for that function would have their indentation assigned in a way that appears random.
I chose the other formatting options for clang format based on what caused the smallest number of differences. If there is a specific option that you'd like to see changed, just let me know and I can rewrite the commit.
Using the style guide here:
https://github.com/corosync/corosync/wiki/Code-Style-Guidelines
Clang-format provides options for the following items from the style guide:
indentation: one tab stop
one space before opening parenthesis
opening brace on the same line as if, else for, switch, case and while else on the same line as if closing brace
open and close braces for functions on own separate lines
opening and closing braces required even for single line if, for, while statements
This changelist does not enforce:
Maximum line length 80 chars or less
Far too many lines go beyond 80 lines in the corosync project to turn this formatting rule on.","BTW, you're welcome to close this pull request due to too many lines being changed at once.
However, if you do, please consider giving me some feedback on what amount of auto-formatting you find appropriate in a single commit.
Ultimately, any programmatic formatting is going to be a large-ish change. So if you want to use a tool such as clang-format for 3.0/3.x development, we've got to start somewhere. I just need to know where to start.",True,{}
corosync/corosync,https://github.com/corosync/corosync,188,2017-01-03T08:28:23Z,2018-01-12T02:12:46Z,2018-01-12T02:12:46Z,CLOSED,False,2120,3134,112,https://github.com/jonesmz,Use clang-format on header files. Preserves tabs,1,[],https://github.com/corosync/corosync/pull/188,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/188#issuecomment-273433682,"Unlike pull request #185, this patch uses tabs for all indentation
This pull request reformats all of the headerfiles in corosync using the clang-format utility. ( clang-format version 3.7.1 (tags/RELEASE_371/final) )
I simply ran this script while in the corosync directory: find . -iname *.h | xargs clang-format -style=file -i
clang-format chokes when using tabs for formatting, in part because the tool simply is not allowed to align things due to the size of the tab.
An example of improper formatting is, for any function taking a function pointer as a parameter, the parameters for that function would have their indentation assigned in a way that appears random.
I chose the other formatting options for clang format based on what caused the smallest number of differences. If there is a specific option that you'd like to see changed, just let me know and I can rewrite the commit.
Using the style guide here:
https://github.com/corosync/corosync/wiki/Code-Style-Guidelines
Clang-format provides options for the following items from the style guide:
indentation: one tab stop
one space before opening parenthesis
opening brace on the same line as if, else for, switch, case and while else on the same line as if closing brace
open and close braces for functions on own separate lines
opening and closing braces required even for single line if, for, while statements
This changelist does not enforce:
Maximum line length 80 chars or less
Far too many lines go beyond 80 lines in the corosync project to turn this formatting rule on.","@jonesmz Nope, definitively not something to close. It makes perfect sense to run such tool before 3.x is released (simply because that time, 2.x is going to move to maintenance mode, so easy cherry-pick is not needed).
Few comments about current clang-format results (examples):

qb_loop_t* ta_poll_handle_get (void);  - Old style (= qb_loop_t *ta) should stay
cs_queue_init - Assignment should have ONE space (so struct->item = value)
static inline int hdb_handle_create ( - Multiple lines declaration is ok",True,{}
corosync/corosync,https://github.com/corosync/corosync,188,2017-01-03T08:28:23Z,2018-01-12T02:12:46Z,2018-01-12T02:12:46Z,CLOSED,False,2120,3134,112,https://github.com/jonesmz,Use clang-format on header files. Preserves tabs,1,[],https://github.com/corosync/corosync/pull/188,https://github.com/jonesmz,4,https://github.com/corosync/corosync/pull/188#issuecomment-273548426,"Unlike pull request #185, this patch uses tabs for all indentation
This pull request reformats all of the headerfiles in corosync using the clang-format utility. ( clang-format version 3.7.1 (tags/RELEASE_371/final) )
I simply ran this script while in the corosync directory: find . -iname *.h | xargs clang-format -style=file -i
clang-format chokes when using tabs for formatting, in part because the tool simply is not allowed to align things due to the size of the tab.
An example of improper formatting is, for any function taking a function pointer as a parameter, the parameters for that function would have their indentation assigned in a way that appears random.
I chose the other formatting options for clang format based on what caused the smallest number of differences. If there is a specific option that you'd like to see changed, just let me know and I can rewrite the commit.
Using the style guide here:
https://github.com/corosync/corosync/wiki/Code-Style-Guidelines
Clang-format provides options for the following items from the style guide:
indentation: one tab stop
one space before opening parenthesis
opening brace on the same line as if, else for, switch, case and while else on the same line as if closing brace
open and close braces for functions on own separate lines
opening and closing braces required even for single line if, for, while statements
This changelist does not enforce:
Maximum line length 80 chars or less
Far too many lines go beyond 80 lines in the corosync project to turn this formatting rule on.","I recommend, for the first commit, against changing the setting that causes
static inline int hdb_handle_create
to be merged into a single line.
That setting is, in part, controlled by the ""max column per line"" setting, which I currently have set to 120.
Changing this setting to ""80"" as the coding style document on the wiki indicates, changes a lot of code, and in my personal taste, not for the better.
My recommendation is to change that setting to ""80"" in a later commit, after contributors have had a chance to work with the formatted code for a while.",True,{}
corosync/corosync,https://github.com/corosync/corosync,188,2017-01-03T08:28:23Z,2018-01-12T02:12:46Z,2018-01-12T02:12:46Z,CLOSED,False,2120,3134,112,https://github.com/jonesmz,Use clang-format on header files. Preserves tabs,1,[],https://github.com/corosync/corosync/pull/188,https://github.com/jonesmz,5,https://github.com/corosync/corosync/pull/188#issuecomment-273548532,"Unlike pull request #185, this patch uses tabs for all indentation
This pull request reformats all of the headerfiles in corosync using the clang-format utility. ( clang-format version 3.7.1 (tags/RELEASE_371/final) )
I simply ran this script while in the corosync directory: find . -iname *.h | xargs clang-format -style=file -i
clang-format chokes when using tabs for formatting, in part because the tool simply is not allowed to align things due to the size of the tab.
An example of improper formatting is, for any function taking a function pointer as a parameter, the parameters for that function would have their indentation assigned in a way that appears random.
I chose the other formatting options for clang format based on what caused the smallest number of differences. If there is a specific option that you'd like to see changed, just let me know and I can rewrite the commit.
Using the style guide here:
https://github.com/corosync/corosync/wiki/Code-Style-Guidelines
Clang-format provides options for the following items from the style guide:
indentation: one tab stop
one space before opening parenthesis
opening brace on the same line as if, else for, switch, case and while else on the same line as if closing brace
open and close braces for functions on own separate lines
opening and closing braces required even for single line if, for, while statements
This changelist does not enforce:
Maximum line length 80 chars or less
Far too many lines go beyond 80 lines in the corosync project to turn this formatting rule on.",Please feel free to squash these commits into a single commit.,True,{}
corosync/corosync,https://github.com/corosync/corosync,188,2017-01-03T08:28:23Z,2018-01-12T02:12:46Z,2018-01-12T02:12:46Z,CLOSED,False,2120,3134,112,https://github.com/jonesmz,Use clang-format on header files. Preserves tabs,1,[],https://github.com/corosync/corosync/pull/188,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/188#issuecomment-273717000,"Unlike pull request #185, this patch uses tabs for all indentation
This pull request reformats all of the headerfiles in corosync using the clang-format utility. ( clang-format version 3.7.1 (tags/RELEASE_371/final) )
I simply ran this script while in the corosync directory: find . -iname *.h | xargs clang-format -style=file -i
clang-format chokes when using tabs for formatting, in part because the tool simply is not allowed to align things due to the size of the tab.
An example of improper formatting is, for any function taking a function pointer as a parameter, the parameters for that function would have their indentation assigned in a way that appears random.
I chose the other formatting options for clang format based on what caused the smallest number of differences. If there is a specific option that you'd like to see changed, just let me know and I can rewrite the commit.
Using the style guide here:
https://github.com/corosync/corosync/wiki/Code-Style-Guidelines
Clang-format provides options for the following items from the style guide:
indentation: one tab stop
one space before opening parenthesis
opening brace on the same line as if, else for, switch, case and while else on the same line as if closing brace
open and close braces for functions on own separate lines
opening and closing braces required even for single line if, for, while statements
This changelist does not enforce:
Maximum line length 80 chars or less
Far too many lines go beyond 80 lines in the corosync project to turn this formatting rule on.","@jonesmz Looks better.
Actually, 80 columns is too short (I will have to change codestyle - working on qdevice so I don't really have time to do it properly). 100/120 is perfectly ok in world of ""const struct sockaddr_storage *source_address"" (and this is not worst case).",True,{}
corosync/corosync,https://github.com/corosync/corosync,188,2017-01-03T08:28:23Z,2018-01-12T02:12:46Z,2018-01-12T02:12:46Z,CLOSED,False,2120,3134,112,https://github.com/jonesmz,Use clang-format on header files. Preserves tabs,1,[],https://github.com/corosync/corosync/pull/188,https://github.com/jonesmz,7,https://github.com/corosync/corosync/pull/188#issuecomment-273830760,"Unlike pull request #185, this patch uses tabs for all indentation
This pull request reformats all of the headerfiles in corosync using the clang-format utility. ( clang-format version 3.7.1 (tags/RELEASE_371/final) )
I simply ran this script while in the corosync directory: find . -iname *.h | xargs clang-format -style=file -i
clang-format chokes when using tabs for formatting, in part because the tool simply is not allowed to align things due to the size of the tab.
An example of improper formatting is, for any function taking a function pointer as a parameter, the parameters for that function would have their indentation assigned in a way that appears random.
I chose the other formatting options for clang format based on what caused the smallest number of differences. If there is a specific option that you'd like to see changed, just let me know and I can rewrite the commit.
Using the style guide here:
https://github.com/corosync/corosync/wiki/Code-Style-Guidelines
Clang-format provides options for the following items from the style guide:
indentation: one tab stop
one space before opening parenthesis
opening brace on the same line as if, else for, switch, case and while else on the same line as if closing brace
open and close braces for functions on own separate lines
opening and closing braces required even for single line if, for, while statements
This changelist does not enforce:
Maximum line length 80 chars or less
Far too many lines go beyond 80 lines in the corosync project to turn this formatting rule on.","Ok. We can keep the columns the way they are then.
What else do you want changed?",True,{}
corosync/corosync,https://github.com/corosync/corosync,188,2017-01-03T08:28:23Z,2018-01-12T02:12:46Z,2018-01-12T02:12:46Z,CLOSED,False,2120,3134,112,https://github.com/jonesmz,Use clang-format on header files. Preserves tabs,1,[],https://github.com/corosync/corosync/pull/188,https://github.com/jonesmz,8,https://github.com/corosync/corosync/pull/188#issuecomment-277392783,"Unlike pull request #185, this patch uses tabs for all indentation
This pull request reformats all of the headerfiles in corosync using the clang-format utility. ( clang-format version 3.7.1 (tags/RELEASE_371/final) )
I simply ran this script while in the corosync directory: find . -iname *.h | xargs clang-format -style=file -i
clang-format chokes when using tabs for formatting, in part because the tool simply is not allowed to align things due to the size of the tab.
An example of improper formatting is, for any function taking a function pointer as a parameter, the parameters for that function would have their indentation assigned in a way that appears random.
I chose the other formatting options for clang format based on what caused the smallest number of differences. If there is a specific option that you'd like to see changed, just let me know and I can rewrite the commit.
Using the style guide here:
https://github.com/corosync/corosync/wiki/Code-Style-Guidelines
Clang-format provides options for the following items from the style guide:
indentation: one tab stop
one space before opening parenthesis
opening brace on the same line as if, else for, switch, case and while else on the same line as if closing brace
open and close braces for functions on own separate lines
opening and closing braces required even for single line if, for, while statements
This changelist does not enforce:
Maximum line length 80 chars or less
Far too many lines go beyond 80 lines in the corosync project to turn this formatting rule on.",Anything that I can do to improve this changelist?,True,{}
corosync/corosync,https://github.com/corosync/corosync,188,2017-01-03T08:28:23Z,2018-01-12T02:12:46Z,2018-01-12T02:12:46Z,CLOSED,False,2120,3134,112,https://github.com/jonesmz,Use clang-format on header files. Preserves tabs,1,[],https://github.com/corosync/corosync/pull/188,https://github.com/jfriesse,9,https://github.com/corosync/corosync/pull/188#issuecomment-277605893,"Unlike pull request #185, this patch uses tabs for all indentation
This pull request reformats all of the headerfiles in corosync using the clang-format utility. ( clang-format version 3.7.1 (tags/RELEASE_371/final) )
I simply ran this script while in the corosync directory: find . -iname *.h | xargs clang-format -style=file -i
clang-format chokes when using tabs for formatting, in part because the tool simply is not allowed to align things due to the size of the tab.
An example of improper formatting is, for any function taking a function pointer as a parameter, the parameters for that function would have their indentation assigned in a way that appears random.
I chose the other formatting options for clang format based on what caused the smallest number of differences. If there is a specific option that you'd like to see changed, just let me know and I can rewrite the commit.
Using the style guide here:
https://github.com/corosync/corosync/wiki/Code-Style-Guidelines
Clang-format provides options for the following items from the style guide:
indentation: one tab stop
one space before opening parenthesis
opening brace on the same line as if, else for, switch, case and while else on the same line as if closing brace
open and close braces for functions on own separate lines
opening and closing braces required even for single line if, for, while statements
This changelist does not enforce:
Maximum line length 80 chars or less
Far too many lines go beyond 80 lines in the corosync project to turn this formatting rule on.","@jonesmz Probably not.
I must sorry, but I'm quite busy working on qdevice right now, and some (or actually, all of them ;) ) of your patches needs a little more time to review/comment. I know about them and I'm not definitively ignoring them and I can promise to get back to them in few weeks.",True,{}
corosync/corosync,https://github.com/corosync/corosync,188,2017-01-03T08:28:23Z,2018-01-12T02:12:46Z,2018-01-12T02:12:46Z,CLOSED,False,2120,3134,112,https://github.com/jonesmz,Use clang-format on header files. Preserves tabs,1,[],https://github.com/corosync/corosync/pull/188,https://github.com/jonesmz,10,https://github.com/corosync/corosync/pull/188#issuecomment-280785748,"Unlike pull request #185, this patch uses tabs for all indentation
This pull request reformats all of the headerfiles in corosync using the clang-format utility. ( clang-format version 3.7.1 (tags/RELEASE_371/final) )
I simply ran this script while in the corosync directory: find . -iname *.h | xargs clang-format -style=file -i
clang-format chokes when using tabs for formatting, in part because the tool simply is not allowed to align things due to the size of the tab.
An example of improper formatting is, for any function taking a function pointer as a parameter, the parameters for that function would have their indentation assigned in a way that appears random.
I chose the other formatting options for clang format based on what caused the smallest number of differences. If there is a specific option that you'd like to see changed, just let me know and I can rewrite the commit.
Using the style guide here:
https://github.com/corosync/corosync/wiki/Code-Style-Guidelines
Clang-format provides options for the following items from the style guide:
indentation: one tab stop
one space before opening parenthesis
opening brace on the same line as if, else for, switch, case and while else on the same line as if closing brace
open and close braces for functions on own separate lines
opening and closing braces required even for single line if, for, while statements
This changelist does not enforce:
Maximum line length 80 chars or less
Far too many lines go beyond 80 lines in the corosync project to turn this formatting rule on.",Would it help if I reduced the number of files being included in this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,188,2017-01-03T08:28:23Z,2018-01-12T02:12:46Z,2018-01-12T02:12:46Z,CLOSED,False,2120,3134,112,https://github.com/jonesmz,Use clang-format on header files. Preserves tabs,1,[],https://github.com/corosync/corosync/pull/188,https://github.com/jonesmz,11,https://github.com/corosync/corosync/pull/188#issuecomment-280785766,"Unlike pull request #185, this patch uses tabs for all indentation
This pull request reformats all of the headerfiles in corosync using the clang-format utility. ( clang-format version 3.7.1 (tags/RELEASE_371/final) )
I simply ran this script while in the corosync directory: find . -iname *.h | xargs clang-format -style=file -i
clang-format chokes when using tabs for formatting, in part because the tool simply is not allowed to align things due to the size of the tab.
An example of improper formatting is, for any function taking a function pointer as a parameter, the parameters for that function would have their indentation assigned in a way that appears random.
I chose the other formatting options for clang format based on what caused the smallest number of differences. If there is a specific option that you'd like to see changed, just let me know and I can rewrite the commit.
Using the style guide here:
https://github.com/corosync/corosync/wiki/Code-Style-Guidelines
Clang-format provides options for the following items from the style guide:
indentation: one tab stop
one space before opening parenthesis
opening brace on the same line as if, else for, switch, case and while else on the same line as if closing brace
open and close braces for functions on own separate lines
opening and closing braces required even for single line if, for, while statements
This changelist does not enforce:
Maximum line length 80 chars or less
Far too many lines go beyond 80 lines in the corosync project to turn this formatting rule on.",Oops. Wrong button.,True,{}
corosync/corosync,https://github.com/corosync/corosync,188,2017-01-03T08:28:23Z,2018-01-12T02:12:46Z,2018-01-12T02:12:46Z,CLOSED,False,2120,3134,112,https://github.com/jonesmz,Use clang-format on header files. Preserves tabs,1,[],https://github.com/corosync/corosync/pull/188,https://github.com/jfriesse,12,https://github.com/corosync/corosync/pull/188#issuecomment-281012175,"Unlike pull request #185, this patch uses tabs for all indentation
This pull request reformats all of the headerfiles in corosync using the clang-format utility. ( clang-format version 3.7.1 (tags/RELEASE_371/final) )
I simply ran this script while in the corosync directory: find . -iname *.h | xargs clang-format -style=file -i
clang-format chokes when using tabs for formatting, in part because the tool simply is not allowed to align things due to the size of the tab.
An example of improper formatting is, for any function taking a function pointer as a parameter, the parameters for that function would have their indentation assigned in a way that appears random.
I chose the other formatting options for clang format based on what caused the smallest number of differences. If there is a specific option that you'd like to see changed, just let me know and I can rewrite the commit.
Using the style guide here:
https://github.com/corosync/corosync/wiki/Code-Style-Guidelines
Clang-format provides options for the following items from the style guide:
indentation: one tab stop
one space before opening parenthesis
opening brace on the same line as if, else for, switch, case and while else on the same line as if closing brace
open and close braces for functions on own separate lines
opening and closing braces required even for single line if, for, while statements
This changelist does not enforce:
Maximum line length 80 chars or less
Far too many lines go beyond 80 lines in the corosync project to turn this formatting rule on.","@jonesmz Actually I'm for sure not going to include results of running clang-format for now. What I would like to include is  .clang-format file. Running clang-format should be almost last thing just right before 3.0 is released.
So can you please try to create just .clang-format patch?",True,{}
corosync/corosync,https://github.com/corosync/corosync,188,2017-01-03T08:28:23Z,2018-01-12T02:12:46Z,2018-01-12T02:12:46Z,CLOSED,False,2120,3134,112,https://github.com/jonesmz,Use clang-format on header files. Preserves tabs,1,[],https://github.com/corosync/corosync/pull/188,https://github.com/jonesmz,13,https://github.com/corosync/corosync/pull/188#issuecomment-281147504,"Unlike pull request #185, this patch uses tabs for all indentation
This pull request reformats all of the headerfiles in corosync using the clang-format utility. ( clang-format version 3.7.1 (tags/RELEASE_371/final) )
I simply ran this script while in the corosync directory: find . -iname *.h | xargs clang-format -style=file -i
clang-format chokes when using tabs for formatting, in part because the tool simply is not allowed to align things due to the size of the tab.
An example of improper formatting is, for any function taking a function pointer as a parameter, the parameters for that function would have their indentation assigned in a way that appears random.
I chose the other formatting options for clang format based on what caused the smallest number of differences. If there is a specific option that you'd like to see changed, just let me know and I can rewrite the commit.
Using the style guide here:
https://github.com/corosync/corosync/wiki/Code-Style-Guidelines
Clang-format provides options for the following items from the style guide:
indentation: one tab stop
one space before opening parenthesis
opening brace on the same line as if, else for, switch, case and while else on the same line as if closing brace
open and close braces for functions on own separate lines
opening and closing braces required even for single line if, for, while statements
This changelist does not enforce:
Maximum line length 80 chars or less
Far too many lines go beyond 80 lines in the corosync project to turn this formatting rule on.","When is 3.0 being released?
1.0 was released on Oct 20, 2010
2.0 was released on Apr 10, 2012
3.0 is ...?
If we're talking about 0-2 months, then that's fine, I can just make a pull request that's only the .clang-format file and then wait for a project member to do the formatting on their end.
If we're talking about >6 months, then I'm not interested in contributing to corosync any longer and will probably have to find something else that fits my needs.
Work with me here... I'm trying to contribute improvements to the corosync codebase so I can understand what it's doing, for the goal of using corosync in my own projects.
Right now the codebase is very intimidating to people who aren't active contributors, and this clearly ended up effecting things that I've contributed previously. For example my previous pull request for using qb_list took 6+ months to be included, and when it finally was included it had lots of problems.
Obviously, I could have done more diligent testing, but I didn't out of lazyness and lack of available time. Corosync lacking automated testing, or continuous integration infrastructure makes potential contributors much less likely to contribute meaningful improvements because their barrier to entry is so high. Yet my contribution of a travis-ci configuration file has been open for >1month, even though it's just a configuration file for a service that a Corosync developer would then need to enable.
This changelist is an attempt to make the code easier for new contributors to read and understand, including myself, so that I can grow my knowledge of the codebase and contribute more meaningful improvements. Right now, figuring out what's going on internally is incredibly difficult, and out of my team I'm the only one even willing to bother trying.",True,{}
corosync/corosync,https://github.com/corosync/corosync,188,2017-01-03T08:28:23Z,2018-01-12T02:12:46Z,2018-01-12T02:12:46Z,CLOSED,False,2120,3134,112,https://github.com/jonesmz,Use clang-format on header files. Preserves tabs,1,[],https://github.com/corosync/corosync/pull/188,https://github.com/jfriesse,14,https://github.com/corosync/corosync/pull/188#issuecomment-281269689,"Unlike pull request #185, this patch uses tabs for all indentation
This pull request reformats all of the headerfiles in corosync using the clang-format utility. ( clang-format version 3.7.1 (tags/RELEASE_371/final) )
I simply ran this script while in the corosync directory: find . -iname *.h | xargs clang-format -style=file -i
clang-format chokes when using tabs for formatting, in part because the tool simply is not allowed to align things due to the size of the tab.
An example of improper formatting is, for any function taking a function pointer as a parameter, the parameters for that function would have their indentation assigned in a way that appears random.
I chose the other formatting options for clang format based on what caused the smallest number of differences. If there is a specific option that you'd like to see changed, just let me know and I can rewrite the commit.
Using the style guide here:
https://github.com/corosync/corosync/wiki/Code-Style-Guidelines
Clang-format provides options for the following items from the style guide:
indentation: one tab stop
one space before opening parenthesis
opening brace on the same line as if, else for, switch, case and while else on the same line as if closing brace
open and close braces for functions on own separate lines
opening and closing braces required even for single line if, for, while statements
This changelist does not enforce:
Maximum line length 80 chars or less
Far too many lines go beyond 80 lines in the corosync project to turn this formatting rule on.","@jonesmz We are definitively talking about more than 6 months to 3.0.
I can fully understand that indentation can make difference in ""getting into"" project. But we are in HA area. HA is about keeping long support, that's why 1.x is still supported. And honestly, including huge change in indentation makes backporting patches real pain.
qb-list was same issue, so huge change and I was trying to communicate why it takes too long. I don't want discuss quality of that patch.
Automated testing - not true, we are running buildbot.
CI - yes, it's nice to have it, but has to be configured properly. Also just compile the source code is ... not good enough.
I would like to ask what exactly you are missing in 2.x for your use case (and if it is not super secret, what is your use case)?",True,{}
corosync/corosync,https://github.com/corosync/corosync,188,2017-01-03T08:28:23Z,2018-01-12T02:12:46Z,2018-01-12T02:12:46Z,CLOSED,False,2120,3134,112,https://github.com/jonesmz,Use clang-format on header files. Preserves tabs,1,[],https://github.com/corosync/corosync/pull/188,https://github.com/jonesmz,15,https://github.com/corosync/corosync/pull/188#issuecomment-281430687,"Unlike pull request #185, this patch uses tabs for all indentation
This pull request reformats all of the headerfiles in corosync using the clang-format utility. ( clang-format version 3.7.1 (tags/RELEASE_371/final) )
I simply ran this script while in the corosync directory: find . -iname *.h | xargs clang-format -style=file -i
clang-format chokes when using tabs for formatting, in part because the tool simply is not allowed to align things due to the size of the tab.
An example of improper formatting is, for any function taking a function pointer as a parameter, the parameters for that function would have their indentation assigned in a way that appears random.
I chose the other formatting options for clang format based on what caused the smallest number of differences. If there is a specific option that you'd like to see changed, just let me know and I can rewrite the commit.
Using the style guide here:
https://github.com/corosync/corosync/wiki/Code-Style-Guidelines
Clang-format provides options for the following items from the style guide:
indentation: one tab stop
one space before opening parenthesis
opening brace on the same line as if, else for, switch, case and while else on the same line as if closing brace
open and close braces for functions on own separate lines
opening and closing braces required even for single line if, for, while statements
This changelist does not enforce:
Maximum line length 80 chars or less
Far too many lines go beyond 80 lines in the corosync project to turn this formatting rule on.","Backporting patches

What's the difference between updating the formatting now versus updating the formatting in 6 months? I'm not trying to be obstinate, I just don't understand where the problem is. It's going to make backporting patches a pain regardless. If backporting is such a big concern, why ever allow the formatting to be changed? If it'll be an improvement tomorrow, why wouldn't it be an improvement today?
If it's a problem of too many lines of code at once, then I can do hand-curated patches for each file that introduce the absolute minimum changes to get some consistent formatting. I'm willing to do that, even if it takes me several hours per file.

Would you accept one formatted file per week? One formatted file per month? Half a file at a time? Again, I'm willing to do the work, I just need to know what's going to be acceptable.


If there are changes to the formatting options that you'd like to see, tell me and I'll do whatever I can.
If you don't believe that clang-format can provide the solution to this issue, but know of another tool, I'll switch to that tool.



qb-list :

Right, it was a large-ish change, agreed. Regardless of the quality, as the guy who wrote the initial patch, I'm saying that it took me way more work to make the patch than I thought it should have.
I personally believe that a contributor to that extra work needed was inconsistent code formatting, lack of documentation (see my previous pull requests for doxygen comment stubs), lack of a continuous integration build that I could see the results of, lack of unit tests that I could identify as unit tests and run locally, etc. This patch attempts to address the first problem of ""inconsistent code formatting"".



build bot : Where is this documented? I spent some brief handful of minutes searching the corosync wiki and website for a continuous integration-esque service, and I didn't see any mention of buildbot. This could be my failing in not searching well enough.


Unit tests : Are there unit tests? Specifically, tests that can be run via ""make test"" or something similar, and that don't require access to the network.


CI :

Just compiling the source code would have been sufficient to catch the build break introduced when the dependency on kronosnet was introduced, but several files were mistakenly not included in the submit. Perfect is the enemy of ""better"".
The .travis-ci file that I've provided via #193 isn't perfect by any means, but at least it's sufficient to have caught that one problem. Since it, quite literally, can't harm the quality of the corosync codebase to include it as-is, I don't see the problem.
Even after the file's included, someone who's part of the ""corosync"" organization still needs to actually configure the Travis-CI service to run against the .travis-ci file. It's a free service, so I don't see the harm in either direction.



What I'm using corosync for :

My goal is to use corosync as part of a high availability configuration management tool, with an application using the mDNS protocol to detect other instances of the same software, and automatically join the newly seen applications to an existing cluster, with corosync providing some aspects of ""aliveness"" and message sending / receiving.

It happens to be the case that the application will manage a data storage system, but that's not really something that corosync would ever see or interface with.
I don't believe that Pacemaker is a viable solution for my needs, it's much too high level, does far too much that I don't want or need, and as far as I can tell doesn't provide any access to sending custom information to other nodes.

Pacemaker does have significantly more documentation, but it's eye-bleedingly complex and forgive me if I'm remembering incorrectly, because it's been well over a year since I attempted to set up a basic Pacemaker cluster, but at the time I don't believe that the example configuration files were usable with whatever version of Pacemaker my Linux distribution had. I ultimately gave up in a combination of frustration and realization that Pacemaker was much too high level for my application.







Can Corosync 2.x provide what I'm looking for:

I honestly do not know. Everything I've seen about corosync indicates that it's the right-tool-for-the-job, but the sheer lack of any information on how to ""Get Started Using Corosync In Your Software"" represents enough of a barrier to entry that my team refuses to touch it, and have left it to me to understand how corosync works, and how to use it.
If one person (me) can't understand how to use the corosync API from the perspective of how to use the software as an application developer, then it is almost certainly the case that there are other people out there who are in the same situation. I happen to be determined enough that instead of saying ""Meh, I give up"", I'm actually digging in and trying to make the situation better for everyone.
I've identified these issues representing a non-negotiable barrier to entry for the rest of my team consuming corosync as an API. Personally, I'm much more flexible than they are, but they're who I need to work with shrug.:

lack of sufficient documentation
lack of example usages
lack of unit tests
lack of regular builds verifying pull requests, at the very minimum, can still compile properly.
lack of code consistency (Both style and formatting issues, as well as, for example, issues like using ""int"" to represent nearly every concept, as opposed to using enums to indicate specific return values, or C99 Bool to represent true / false or success / failure)",True,{}
corosync/corosync,https://github.com/corosync/corosync,188,2017-01-03T08:28:23Z,2018-01-12T02:12:46Z,2018-01-12T02:12:46Z,CLOSED,False,2120,3134,112,https://github.com/jonesmz,Use clang-format on header files. Preserves tabs,1,[],https://github.com/corosync/corosync/pull/188,https://github.com/jfriesse,16,https://github.com/corosync/corosync/pull/188#issuecomment-282997105,"Unlike pull request #185, this patch uses tabs for all indentation
This pull request reformats all of the headerfiles in corosync using the clang-format utility. ( clang-format version 3.7.1 (tags/RELEASE_371/final) )
I simply ran this script while in the corosync directory: find . -iname *.h | xargs clang-format -style=file -i
clang-format chokes when using tabs for formatting, in part because the tool simply is not allowed to align things due to the size of the tab.
An example of improper formatting is, for any function taking a function pointer as a parameter, the parameters for that function would have their indentation assigned in a way that appears random.
I chose the other formatting options for clang format based on what caused the smallest number of differences. If there is a specific option that you'd like to see changed, just let me know and I can rewrite the commit.
Using the style guide here:
https://github.com/corosync/corosync/wiki/Code-Style-Guidelines
Clang-format provides options for the following items from the style guide:
indentation: one tab stop
one space before opening parenthesis
opening brace on the same line as if, else for, switch, case and while else on the same line as if closing brace
open and close braces for functions on own separate lines
opening and closing braces required even for single line if, for, while statements
This changelist does not enforce:
Maximum line length 80 chars or less
Far too many lines go beyond 80 lines in the corosync project to turn this formatting rule on.","Backporting

Difference between now and in 6 months is .... 6 months. That's actually quite a lot. Also 2.x still has quite a big amount of new features. This is going change after 3.x when it's going to move to bug fix only mode
Why allow formating to be changed - Because as you noted, it makes code cleaner. That's good thing. It's just about timing not the idea itself.
It's not problem of ""too many lines at once"". There s really no difference between 1 huge patch and 10 smaller patches (and it applies ONLY for indentation change, other features are of different)
I will definitively accept .clang-format right now.



buildbot is documented on main page, there is also the link to it


unittest - This is where corosync sucks most. Basically nobody is writing unit test. It's partly because some of code is quite hard to test by real unit-test. There are some real unit test for qdevice (and you can run them by make check), but that's it. Other tests are more like a ""integration tests"" and I would point to csts https://github.com/jfriesse/csts. Sadly I'm only one who is/were writing them, even QE doesn't contribute there.


CI - I just need time to figure out what Travis is able to do, fix man pages and this is good to go.


Corosync problems:

lack of sufficient documentation - Yes, fully agree. Sadly again, nobody wants to write documentation. I would really like to have documentation in doxygen (and have man pages generated from there) but sadly, whoever came and hacked doxygen ended with running doxygen migrate to new file format (+ playing with sam.c because it is only file which I've spent time to documented properly) and maybe adding stubs. There is really nobody who would do the HARD work of converting current manpages into doxygen comments.
lack of example usages - Yes. This is basically ""documentation"" problem.
lack of unit tests - Yes
lack of regular builds verifying pull requests, at the very minimum, can still compile properly. - Not true. There is buildbot. This doesn't mean I don't like the idea of using travis ci to have proper integration in github.
lack of code consistency (Both style and formatting issues, as well as, for example, issues like using ""int"" to represent nearly every concept, as opposed to using enums to indicate specific return values, or C99 Bool to represent true / false or success / failure) - Partly not agree. Formatting issue exists. But using int as return value is just ok (take a look to kernel/most successful C projects). Bool is (in my opinion) nonsense in C.



But most of the problems you've described are related to corosync core. For using corosync libraries for building new application I believe unit test/ci/code consistency really doesn't matter.",True,{}
corosync/corosync,https://github.com/corosync/corosync,188,2017-01-03T08:28:23Z,2018-01-12T02:12:46Z,2018-01-12T02:12:46Z,CLOSED,False,2120,3134,112,https://github.com/jonesmz,Use clang-format on header files. Preserves tabs,1,[],https://github.com/corosync/corosync/pull/188,https://github.com/jonesmz,17,https://github.com/corosync/corosync/pull/188#issuecomment-357123021,"Unlike pull request #185, this patch uses tabs for all indentation
This pull request reformats all of the headerfiles in corosync using the clang-format utility. ( clang-format version 3.7.1 (tags/RELEASE_371/final) )
I simply ran this script while in the corosync directory: find . -iname *.h | xargs clang-format -style=file -i
clang-format chokes when using tabs for formatting, in part because the tool simply is not allowed to align things due to the size of the tab.
An example of improper formatting is, for any function taking a function pointer as a parameter, the parameters for that function would have their indentation assigned in a way that appears random.
I chose the other formatting options for clang format based on what caused the smallest number of differences. If there is a specific option that you'd like to see changed, just let me know and I can rewrite the commit.
Using the style guide here:
https://github.com/corosync/corosync/wiki/Code-Style-Guidelines
Clang-format provides options for the following items from the style guide:
indentation: one tab stop
one space before opening parenthesis
opening brace on the same line as if, else for, switch, case and while else on the same line as if closing brace
open and close braces for functions on own separate lines
opening and closing braces required even for single line if, for, while statements
This changelist does not enforce:
Maximum line length 80 chars or less
Far too many lines go beyond 80 lines in the corosync project to turn this formatting rule on.","It's been over a year since I opened this PR.
This projects coding style is both 1) Inconsistent, and 2) Awfully hard to read.
You've not provided a compelling roadmap for how a potential contributor could bring corosync's coding style into the modern programming world since Feb 28 2017.
If it wasn't clear by my lack of activity, I'm officially no longer interested in or planing to participate in corosync development.
Best of luck.",True,{}
corosync/corosync,https://github.com/corosync/corosync,189,2017-01-09T18:48:46Z,2017-01-10T08:11:57Z,2017-01-10T08:11:57Z,CLOSED,False,5,4,1,https://github.com/jnpkrn,Spec modifications,2,[],https://github.com/corosync/corosync/pull/189,https://github.com/jnpkrn,1,https://github.com/corosync/corosync/pull/189,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,189,2017-01-09T18:48:46Z,2017-01-10T08:11:57Z,2017-01-10T08:11:57Z,CLOSED,False,5,4,1,https://github.com/jnpkrn,Spec modifications,2,[],https://github.com/corosync/corosync/pull/189,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/189#issuecomment-271511883,,@jnpkrn Thanks for patches. ACK and merged both of them (c91c482 and d1d929a),True,{}
corosync/corosync,https://github.com/corosync/corosync,191,2017-01-17T14:36:05Z,2017-01-18T09:40:57Z,2017-01-18T09:40:57Z,CLOSED,False,14,0,1,https://github.com/disco-stu,doc: document watchdog_device parameter,1,[],https://github.com/corosync/corosync/pull/191,https://github.com/disco-stu,1,https://github.com/corosync/corosync/pull/191,"Commit 8d8d4a9 introduced the
configuration parameter resources.watchdog_device. This commit
introduces the resources section and watchdog_device parameter in
corosync.conf.5.","Commit 8d8d4a9 introduced the
configuration parameter resources.watchdog_device. This commit
introduces the resources section and watchdog_device parameter in
corosync.conf.5.",True,{}
corosync/corosync,https://github.com/corosync/corosync,191,2017-01-17T14:36:05Z,2017-01-18T09:40:57Z,2017-01-18T09:40:57Z,CLOSED,False,14,0,1,https://github.com/disco-stu,doc: document watchdog_device parameter,1,[],https://github.com/corosync/corosync/pull/191,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/191#issuecomment-273428648,"Commit 8d8d4a9 introduced the
configuration parameter resources.watchdog_device. This commit
introduces the resources section and watchdog_device parameter in
corosync.conf.5.","@disco-stu Nice patch, ACK and merged as 16ca44c.
Thank you for the patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,193,2017-01-19T00:22:13Z,2018-01-12T02:16:37Z,2018-01-12T02:16:37Z,CLOSED,False,24,0,1,https://github.com/jonesmz,Add configuration file for the Travis Continuous Integration service …,1,[],https://github.com/corosync/corosync/pull/193,https://github.com/jonesmz,1,https://github.com/corosync/corosync/pull/193,"…that interfaces with GitHub.
Fixes: #192 , when used in conjunction with some account settings to activate Travis CI on this repository.","…that interfaces with GitHub.
Fixes: #192 , when used in conjunction with some account settings to activate Travis CI on this repository.",True,{}
corosync/corosync,https://github.com/corosync/corosync,193,2017-01-19T00:22:13Z,2018-01-12T02:16:37Z,2018-01-12T02:16:37Z,CLOSED,False,24,0,1,https://github.com/jonesmz,Add configuration file for the Travis Continuous Integration service …,1,[],https://github.com/corosync/corosync/pull/193,https://github.com/jonesmz,2,https://github.com/corosync/corosync/pull/193#issuecomment-357123594,"…that interfaces with GitHub.
Fixes: #192 , when used in conjunction with some account settings to activate Travis CI on this repository.","It's been a year since I opened this PR.
Honestly, I think it's pretty stupid that you haven't merged this. It's not like a .travis file is going to hurt anything. You've further provided  poor rational behind not submitting it at #192 , considering the things you object to are to work around problems with corosync and it's dependency libraries, and not the .travis file itself.
If it wasn't clear by my lack of activity, I'm officially no longer interested in or planing to participate in corosync development.
Best of luck.",True,{}
corosync/corosync,https://github.com/corosync/corosync,196,2017-03-10T07:27:49Z,2017-03-23T09:17:32Z,2017-03-23T09:17:32Z,CLOSED,False,2,2,1,https://github.com/liu4480,logconfig.c: make syslog_priority and logfile_priority to LOG_INFO,1,[],https://github.com/corosync/corosync/pull/196,https://github.com/liu4480,1,https://github.com/corosync/corosync/pull/196,"logfile_priority and syslog_priority could be modified by
logging.logger_subsys.{logfile_priority|syslog_priority}. which is aready set by
logging.{logfile_priority|syslog_priority}, this could lead to the following output
(which are at notice level):
corosync[21419]:   [QUORUM] Using quorum provider corosync_votequorum
corosync[21419]:   [QUORUM] Members[1]: 1084777643
corosync[21419]:   [QUORUM] This node is within the primary component
and will provide service.
corosync[21419]:   [QUORUM] Members[3]: 1084777563 1084777584 1084777643
even the syslog_priority is warning. This patch could avoid the
overwrite.","logfile_priority and syslog_priority could be modified by
logging.logger_subsys.{logfile_priority|syslog_priority}. which is aready set by
logging.{logfile_priority|syslog_priority}, this could lead to the following output
(which are at notice level):
corosync[21419]:   [QUORUM] Using quorum provider corosync_votequorum
corosync[21419]:   [QUORUM] Members[1]: 1084777643
corosync[21419]:   [QUORUM] This node is within the primary component
and will provide service.
corosync[21419]:   [QUORUM] Members[3]: 1084777563 1084777584 1084777643
even the syslog_priority is warning. This patch could avoid the
overwrite.",True,{}
corosync/corosync,https://github.com/corosync/corosync,196,2017-03-10T07:27:49Z,2017-03-23T09:17:32Z,2017-03-23T09:17:32Z,CLOSED,False,2,2,1,https://github.com/liu4480,logconfig.c: make syslog_priority and logfile_priority to LOG_INFO,1,[],https://github.com/corosync/corosync/pull/196,https://github.com/liu4480,2,https://github.com/corosync/corosync/pull/196#issuecomment-285599034,"logfile_priority and syslog_priority could be modified by
logging.logger_subsys.{logfile_priority|syslog_priority}. which is aready set by
logging.{logfile_priority|syslog_priority}, this could lead to the following output
(which are at notice level):
corosync[21419]:   [QUORUM] Using quorum provider corosync_votequorum
corosync[21419]:   [QUORUM] Members[1]: 1084777643
corosync[21419]:   [QUORUM] This node is within the primary component
and will provide service.
corosync[21419]:   [QUORUM] Members[3]: 1084777563 1084777584 1084777643
even the syslog_priority is warning. This patch could avoid the
overwrite.",this maybe also the root cause of #195,True,{}
corosync/corosync,https://github.com/corosync/corosync,196,2017-03-10T07:27:49Z,2017-03-23T09:17:32Z,2017-03-23T09:17:32Z,CLOSED,False,2,2,1,https://github.com/liu4480,logconfig.c: make syslog_priority and logfile_priority to LOG_INFO,1,[],https://github.com/corosync/corosync/pull/196,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/196#issuecomment-285605076,"logfile_priority and syslog_priority could be modified by
logging.logger_subsys.{logfile_priority|syslog_priority}. which is aready set by
logging.{logfile_priority|syslog_priority}, this could lead to the following output
(which are at notice level):
corosync[21419]:   [QUORUM] Using quorum provider corosync_votequorum
corosync[21419]:   [QUORUM] Members[1]: 1084777643
corosync[21419]:   [QUORUM] This node is within the primary component
and will provide service.
corosync[21419]:   [QUORUM] Members[3]: 1084777563 1084777584 1084777643
even the syslog_priority is warning. This patch could avoid the
overwrite.","@liu4480 Good catch, nice patch. ACK and merged as c866a2f and d2a5e14 .
Thank you for the patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,197,2017-04-01T08:23:34Z,2017-04-10T05:21:18Z,2017-04-10T05:21:18Z,CLOSED,False,60,0,3,https://github.com/liu4480,totemip.c: Fixed Evicted from CPG membership,1,[],https://github.com/corosync/corosync/pull/197,https://github.com/liu4480,1,https://github.com/corosync/corosync/pull/197,"In a two-node cluster, I 've one node configured with open-vswtich:
5: br-fixed: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default
inet 192.168.124.88/24 scope global br-fixed
inet 192.168.124.87/24 scope global secondary br-fixed
inet 192.168.124.83/24 brd 192.168.124.255 scope global secondary tentative br-fixed
inet 192.168.124.89/24 scope global secondary br-fixed
while I use 192.168.124.83 in node list of corosync.conf with udpu, and the bind_addr is
192.168.124.0. After upgrading corosync on this node, the it uses 192.168.124.88 instead
of 192.168.124.83. As we can see:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783704
corosync-quorumtool -s
Membership information:
Nodeid      Votes Name
1084783697          1 d52-54-77-77-01-02
1084783699          1 d52-54-77-77-01-01 (local)
while the other node can only see itself:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783697
RING ID 0
id      = 192.168.124.81
status  = ring 0 active with no faults
corosync-quorumtool -s
Membership information:
Nodeid      Votes Name
1084783697          1 d52-54-77-77-01-02.virtual.cloud.suse.de (local)
this patch will compare whether the IP is equal to ring0_addr/ring1_addr
in nodelist of corosync.conf, and set exact_match_found to 1 if yes.
This could avoid the above issue.","In a two-node cluster, I 've one node configured with open-vswtich:
5: br-fixed: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default
inet 192.168.124.88/24 scope global br-fixed
inet 192.168.124.87/24 scope global secondary br-fixed
inet 192.168.124.83/24 brd 192.168.124.255 scope global secondary tentative br-fixed
inet 192.168.124.89/24 scope global secondary br-fixed
while I use 192.168.124.83 in node list of corosync.conf with udpu, and the bind_addr is
192.168.124.0. After upgrading corosync on this node, the it uses 192.168.124.88 instead
of 192.168.124.83. As we can see:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783704
corosync-quorumtool -s
Membership information:
Nodeid      Votes Name
1084783697          1 d52-54-77-77-01-02
1084783699          1 d52-54-77-77-01-01 (local)
while the other node can only see itself:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783697
RING ID 0
id      = 192.168.124.81
status  = ring 0 active with no faults
corosync-quorumtool -s
Membership information:
Nodeid      Votes Name
1084783697          1 d52-54-77-77-01-02.virtual.cloud.suse.de (local)
this patch will compare whether the IP is equal to ring0_addr/ring1_addr
in nodelist of corosync.conf, and set exact_match_found to 1 if yes.
This could avoid the above issue.",True,{}
corosync/corosync,https://github.com/corosync/corosync,197,2017-04-01T08:23:34Z,2017-04-10T05:21:18Z,2017-04-10T05:21:18Z,CLOSED,False,60,0,3,https://github.com/liu4480,totemip.c: Fixed Evicted from CPG membership,1,[],https://github.com/corosync/corosync/pull/197,https://github.com/liu4480,2,https://github.com/corosync/corosync/pull/197#issuecomment-290906358,"In a two-node cluster, I 've one node configured with open-vswtich:
5: br-fixed: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default
inet 192.168.124.88/24 scope global br-fixed
inet 192.168.124.87/24 scope global secondary br-fixed
inet 192.168.124.83/24 brd 192.168.124.255 scope global secondary tentative br-fixed
inet 192.168.124.89/24 scope global secondary br-fixed
while I use 192.168.124.83 in node list of corosync.conf with udpu, and the bind_addr is
192.168.124.0. After upgrading corosync on this node, the it uses 192.168.124.88 instead
of 192.168.124.83. As we can see:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783704
corosync-quorumtool -s
Membership information:
Nodeid      Votes Name
1084783697          1 d52-54-77-77-01-02
1084783699          1 d52-54-77-77-01-01 (local)
while the other node can only see itself:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783697
RING ID 0
id      = 192.168.124.81
status  = ring 0 active with no faults
corosync-quorumtool -s
Membership information:
Nodeid      Votes Name
1084783697          1 d52-54-77-77-01-02.virtual.cloud.suse.de (local)
this patch will compare whether the IP is equal to ring0_addr/ring1_addr
in nodelist of corosync.conf, and set exact_match_found to 1 if yes.
This could avoid the above issue.","I think need more test to confirm whether this patch works, and will give you the feedback soon.",True,{}
corosync/corosync,https://github.com/corosync/corosync,197,2017-04-01T08:23:34Z,2017-04-10T05:21:18Z,2017-04-10T05:21:18Z,CLOSED,False,60,0,3,https://github.com/liu4480,totemip.c: Fixed Evicted from CPG membership,1,[],https://github.com/corosync/corosync/pull/197,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/197#issuecomment-291109430,"In a two-node cluster, I 've one node configured with open-vswtich:
5: br-fixed: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default
inet 192.168.124.88/24 scope global br-fixed
inet 192.168.124.87/24 scope global secondary br-fixed
inet 192.168.124.83/24 brd 192.168.124.255 scope global secondary tentative br-fixed
inet 192.168.124.89/24 scope global secondary br-fixed
while I use 192.168.124.83 in node list of corosync.conf with udpu, and the bind_addr is
192.168.124.0. After upgrading corosync on this node, the it uses 192.168.124.88 instead
of 192.168.124.83. As we can see:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783704
corosync-quorumtool -s
Membership information:
Nodeid      Votes Name
1084783697          1 d52-54-77-77-01-02
1084783699          1 d52-54-77-77-01-01 (local)
while the other node can only see itself:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783697
RING ID 0
id      = 192.168.124.81
status  = ring 0 active with no faults
corosync-quorumtool -s
Membership information:
Nodeid      Votes Name
1084783697          1 d52-54-77-77-01-02.virtual.cloud.suse.de (local)
this patch will compare whether the IP is equal to ring0_addr/ring1_addr
in nodelist of corosync.conf, and set exact_match_found to 1 if yes.
This could avoid the above issue.","@liu4480 Specifiing both bind addr and nodelist is kind of ""not very often used"" configuration. I believe when only nodelist is specified, everything should work as expected (and this is also recommended setup).
Some comments to your patch:

icmap_iter_finalize missing
We should probably fix this problem in different layer. Totemconfig may be the good candidate especially because there is already totem_config_find_local_addr_in_nodelist implemented.

Can you please retest nodelist without interface section and let me know the result? Because if it works for you I would suggest:

Test if nodelist is present
If not -> no change in behavior
If it is, check if there is interface section (bind addr) or not.
If not -> no change in behavior
If it is, check that both information not collide, if they collide -> display error and exit.

Comments? Ideas?",True,{}
corosync/corosync,https://github.com/corosync/corosync,197,2017-04-01T08:23:34Z,2017-04-10T05:21:18Z,2017-04-10T05:21:18Z,CLOSED,False,60,0,3,https://github.com/liu4480,totemip.c: Fixed Evicted from CPG membership,1,[],https://github.com/corosync/corosync/pull/197,https://github.com/liu4480,4,https://github.com/corosync/corosync/pull/197#issuecomment-291713529,"In a two-node cluster, I 've one node configured with open-vswtich:
5: br-fixed: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default
inet 192.168.124.88/24 scope global br-fixed
inet 192.168.124.87/24 scope global secondary br-fixed
inet 192.168.124.83/24 brd 192.168.124.255 scope global secondary tentative br-fixed
inet 192.168.124.89/24 scope global secondary br-fixed
while I use 192.168.124.83 in node list of corosync.conf with udpu, and the bind_addr is
192.168.124.0. After upgrading corosync on this node, the it uses 192.168.124.88 instead
of 192.168.124.83. As we can see:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783704
corosync-quorumtool -s
Membership information:
Nodeid      Votes Name
1084783697          1 d52-54-77-77-01-02
1084783699          1 d52-54-77-77-01-01 (local)
while the other node can only see itself:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783697
RING ID 0
id      = 192.168.124.81
status  = ring 0 active with no faults
corosync-quorumtool -s
Membership information:
Nodeid      Votes Name
1084783697          1 d52-54-77-77-01-02.virtual.cloud.suse.de (local)
this patch will compare whether the IP is equal to ring0_addr/ring1_addr
in nodelist of corosync.conf, and set exact_match_found to 1 if yes.
This could avoid the above issue.","Hi, @jfriesse
Thanks for your comments about the patch, I am just back from holiday.

We should probably fix this problem in different layer. Totemconfig may be the good candidate especially because there is already totem_config_find_local_addr_in_nodelist implemented.

I noticed totem_config_find_local_addr_in_nodelist, and it got all IP address again. And I also want to apply this to RRP mode, I 'm not sure whether totem_config_find_local_addr_in_nodelist could do it.
And I will test based on your suggestion, will give feedback soon.
Thanks
Bin",True,{}
corosync/corosync,https://github.com/corosync/corosync,197,2017-04-01T08:23:34Z,2017-04-10T05:21:18Z,2017-04-10T05:21:18Z,CLOSED,False,60,0,3,https://github.com/liu4480,totemip.c: Fixed Evicted from CPG membership,1,[],https://github.com/corosync/corosync/pull/197,https://github.com/liu4480,5,https://github.com/corosync/corosync/pull/197#issuecomment-291738222,"In a two-node cluster, I 've one node configured with open-vswtich:
5: br-fixed: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default
inet 192.168.124.88/24 scope global br-fixed
inet 192.168.124.87/24 scope global secondary br-fixed
inet 192.168.124.83/24 brd 192.168.124.255 scope global secondary tentative br-fixed
inet 192.168.124.89/24 scope global secondary br-fixed
while I use 192.168.124.83 in node list of corosync.conf with udpu, and the bind_addr is
192.168.124.0. After upgrading corosync on this node, the it uses 192.168.124.88 instead
of 192.168.124.83. As we can see:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783704
corosync-quorumtool -s
Membership information:
Nodeid      Votes Name
1084783697          1 d52-54-77-77-01-02
1084783699          1 d52-54-77-77-01-01 (local)
while the other node can only see itself:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783697
RING ID 0
id      = 192.168.124.81
status  = ring 0 active with no faults
corosync-quorumtool -s
Membership information:
Nodeid      Votes Name
1084783697          1 d52-54-77-77-01-02.virtual.cloud.suse.de (local)
this patch will compare whether the IP is equal to ring0_addr/ring1_addr
in nodelist of corosync.conf, and set exact_match_found to 1 if yes.
This could avoid the above issue.","We should probably fix this problem in different layer. Totemconfig may be the good candidate especially because there is already totem_config_find_local_addr_in_nodelist implemented.

Do you mean we could use totem_config_find_local_addr_in_nodelist directly?

Can you please retest nodelist without interface section and let me know the result? Because if it works for you I would suggest:

it works as expected.

Test if nodelist is present
1)If not -> no change in behavior
2)If it is, check if there is interface section (bind addr) or not.
3)If not -> no change in behavior
4)If it is, check that both information not collide, if they collide -> display error and exit.

Are the above suggestions your idea to fix the issue? And you mean the patch should deal with 2nd and 4th suggestion?
Thanks.",True,{}
corosync/corosync,https://github.com/corosync/corosync,197,2017-04-01T08:23:34Z,2017-04-10T05:21:18Z,2017-04-10T05:21:18Z,CLOSED,False,60,0,3,https://github.com/liu4480,totemip.c: Fixed Evicted from CPG membership,1,[],https://github.com/corosync/corosync/pull/197,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/197#issuecomment-291779291,"In a two-node cluster, I 've one node configured with open-vswtich:
5: br-fixed: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default
inet 192.168.124.88/24 scope global br-fixed
inet 192.168.124.87/24 scope global secondary br-fixed
inet 192.168.124.83/24 brd 192.168.124.255 scope global secondary tentative br-fixed
inet 192.168.124.89/24 scope global secondary br-fixed
while I use 192.168.124.83 in node list of corosync.conf with udpu, and the bind_addr is
192.168.124.0. After upgrading corosync on this node, the it uses 192.168.124.88 instead
of 192.168.124.83. As we can see:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783704
corosync-quorumtool -s
Membership information:
Nodeid      Votes Name
1084783697          1 d52-54-77-77-01-02
1084783699          1 d52-54-77-77-01-01 (local)
while the other node can only see itself:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783697
RING ID 0
id      = 192.168.124.81
status  = ring 0 active with no faults
corosync-quorumtool -s
Membership information:
Nodeid      Votes Name
1084783697          1 d52-54-77-77-01-02.virtual.cloud.suse.de (local)
this patch will compare whether the IP is equal to ring0_addr/ring1_addr
in nodelist of corosync.conf, and set exact_match_found to 1 if yes.
This could avoid the above issue.","@liu4480 Yep you are right, totem_config_find_local_addr_in_nodelist is using only ring0_addr so it's not directly usable.
Yes above suggestion is my idea to fix the issue. I'm not entirely sure about possible consequences so it's more like a topic for discussion. Let me summarize what is current situation:

PCS creates corosync.conf without interface section. So no problem with cluster created via pcs
Configs without nodelist are unaffected with issue
Configs with both nodelist and interface may be wrong. Also they do not make too much sense. But I don't think it's really good idea to ether silently ignore interface section or exit with error when these two sections do not collide. But if they have different information or, as with case you have where information in interface section is more generic then in nodelist, they can cause several problems. And I'm not sure we should try to fix these problems automatically simply because we cannot be sure about correct solution.

And again, I'm trying to open discussion so I would like to hear your opinions.",True,{}
corosync/corosync,https://github.com/corosync/corosync,197,2017-04-01T08:23:34Z,2017-04-10T05:21:18Z,2017-04-10T05:21:18Z,CLOSED,False,60,0,3,https://github.com/liu4480,totemip.c: Fixed Evicted from CPG membership,1,[],https://github.com/corosync/corosync/pull/197,https://github.com/chrissie-c,7,https://github.com/corosync/corosync/pull/197#issuecomment-291783682,"In a two-node cluster, I 've one node configured with open-vswtich:
5: br-fixed: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default
inet 192.168.124.88/24 scope global br-fixed
inet 192.168.124.87/24 scope global secondary br-fixed
inet 192.168.124.83/24 brd 192.168.124.255 scope global secondary tentative br-fixed
inet 192.168.124.89/24 scope global secondary br-fixed
while I use 192.168.124.83 in node list of corosync.conf with udpu, and the bind_addr is
192.168.124.0. After upgrading corosync on this node, the it uses 192.168.124.88 instead
of 192.168.124.83. As we can see:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783704
corosync-quorumtool -s
Membership information:
Nodeid      Votes Name
1084783697          1 d52-54-77-77-01-02
1084783699          1 d52-54-77-77-01-01 (local)
while the other node can only see itself:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783697
RING ID 0
id      = 192.168.124.81
status  = ring 0 active with no faults
corosync-quorumtool -s
Membership information:
Nodeid      Votes Name
1084783697          1 d52-54-77-77-01-02.virtual.cloud.suse.de (local)
this patch will compare whether the IP is equal to ring0_addr/ring1_addr
in nodelist of corosync.conf, and set exact_match_found to 1 if yes.
This could avoid the above issue.","It's not really the interface section that conflicts with nodelist, it's really just bindnetaddr isn't it?. Would it be reasonable to disallow bindnetaddr if nodelist exists? It sounds like a lot of work for very little payoff to check that they don't conflict.",True,{}
corosync/corosync,https://github.com/corosync/corosync,197,2017-04-01T08:23:34Z,2017-04-10T05:21:18Z,2017-04-10T05:21:18Z,CLOSED,False,60,0,3,https://github.com/liu4480,totemip.c: Fixed Evicted from CPG membership,1,[],https://github.com/corosync/corosync/pull/197,https://github.com/liu4480,8,https://github.com/corosync/corosync/pull/197#issuecomment-291789044,"In a two-node cluster, I 've one node configured with open-vswtich:
5: br-fixed: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default
inet 192.168.124.88/24 scope global br-fixed
inet 192.168.124.87/24 scope global secondary br-fixed
inet 192.168.124.83/24 brd 192.168.124.255 scope global secondary tentative br-fixed
inet 192.168.124.89/24 scope global secondary br-fixed
while I use 192.168.124.83 in node list of corosync.conf with udpu, and the bind_addr is
192.168.124.0. After upgrading corosync on this node, the it uses 192.168.124.88 instead
of 192.168.124.83. As we can see:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783704
corosync-quorumtool -s
Membership information:
Nodeid      Votes Name
1084783697          1 d52-54-77-77-01-02
1084783699          1 d52-54-77-77-01-01 (local)
while the other node can only see itself:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783697
RING ID 0
id      = 192.168.124.81
status  = ring 0 active with no faults
corosync-quorumtool -s
Membership information:
Nodeid      Votes Name
1084783697          1 d52-54-77-77-01-02.virtual.cloud.suse.de (local)
this patch will compare whether the IP is equal to ring0_addr/ring1_addr
in nodelist of corosync.conf, and set exact_match_found to 1 if yes.
This could avoid the above issue.","PCS creates corosync.conf without interface section. So no problem with cluster created via pcs
Configs without nodelist are unaffected with issue

I did not use pcs, but write the configuration file manually, although I do not think there is any difference. And yes, for multicast, corosync works fine.

But if they have different information or, as with case you have where information in interface section is more generic then in nodelist, they can cause several problems. And I'm not sure we should try to fix these problems automatically simply because we cannot be sure about correct solution.

At first, I just saw totemip_iface_check could change the ip address, since if bindnetaddr is set, the real IP address will never equal to bindnetaddr, and based on the judgement:
if (exact_match_found || (!net_match_found && totemip_equal(&bn_netaddr, &if_netaddr)))
only the 1st one that is net_match_found can be choosen as an IP addr for corosync.
My first thought was to make another exact_match_found judgement, although my implementation is not perfect(maybe add judgement on interface status). And I don't whether there is other issues so far.
@chrissie-c , yes, it is just bindnetaddr, not the whole interface section.
And chrissie-c's idea is acceptable for me.",True,{}
corosync/corosync,https://github.com/corosync/corosync,197,2017-04-01T08:23:34Z,2017-04-10T05:21:18Z,2017-04-10T05:21:18Z,CLOSED,False,60,0,3,https://github.com/liu4480,totemip.c: Fixed Evicted from CPG membership,1,[],https://github.com/corosync/corosync/pull/197,https://github.com/liu4480,9,https://github.com/corosync/corosync/pull/197#issuecomment-291790163,"In a two-node cluster, I 've one node configured with open-vswtich:
5: br-fixed: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default
inet 192.168.124.88/24 scope global br-fixed
inet 192.168.124.87/24 scope global secondary br-fixed
inet 192.168.124.83/24 brd 192.168.124.255 scope global secondary tentative br-fixed
inet 192.168.124.89/24 scope global secondary br-fixed
while I use 192.168.124.83 in node list of corosync.conf with udpu, and the bind_addr is
192.168.124.0. After upgrading corosync on this node, the it uses 192.168.124.88 instead
of 192.168.124.83. As we can see:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783704
corosync-quorumtool -s
Membership information:
Nodeid      Votes Name
1084783697          1 d52-54-77-77-01-02
1084783699          1 d52-54-77-77-01-01 (local)
while the other node can only see itself:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783697
RING ID 0
id      = 192.168.124.81
status  = ring 0 active with no faults
corosync-quorumtool -s
Membership information:
Nodeid      Votes Name
1084783697          1 d52-54-77-77-01-02.virtual.cloud.suse.de (local)
this patch will compare whether the IP is equal to ring0_addr/ring1_addr
in nodelist of corosync.conf, and set exact_match_found to 1 if yes.
This could avoid the above issue.","And I just encounter the issue when the ip is as following:
5: br-fixed: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default
inet 192.168.124.88/24 scope global br-fixed
inet 192.168.124.87/24 scope global secondary br-fixed
inet 192.168.124.83/24 brd 192.168.124.255 scope global secondary tentative br-fixed
inet 192.168.124.89/24 scope global secondary br-fixed
with 192.168.124.83 in nodelist.
what's more interesting, with an interface configured like
br-fixed: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default
inet 192.168.124.87/24 scope global br-fixed
inet 192.168.124.83/24 scope global secondary br-fixed
I wrote 192.168.124.83 in nodelist, I can confirm that both 192.168.124.83 and 192.168.124.87 are reachable, but corosync failed to start. I am not sure whether it is an issue in corosync, or just wrong IP addr I wrote in corosync.conf(as 192.168.124.83 is secondary for br-fixed), I'm not expert on network.",True,{}
corosync/corosync,https://github.com/corosync/corosync,197,2017-04-01T08:23:34Z,2017-04-10T05:21:18Z,2017-04-10T05:21:18Z,CLOSED,False,60,0,3,https://github.com/liu4480,totemip.c: Fixed Evicted from CPG membership,1,[],https://github.com/corosync/corosync/pull/197,https://github.com/jfriesse,10,https://github.com/corosync/corosync/pull/197#issuecomment-291861608,"In a two-node cluster, I 've one node configured with open-vswtich:
5: br-fixed: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default
inet 192.168.124.88/24 scope global br-fixed
inet 192.168.124.87/24 scope global secondary br-fixed
inet 192.168.124.83/24 brd 192.168.124.255 scope global secondary tentative br-fixed
inet 192.168.124.89/24 scope global secondary br-fixed
while I use 192.168.124.83 in node list of corosync.conf with udpu, and the bind_addr is
192.168.124.0. After upgrading corosync on this node, the it uses 192.168.124.88 instead
of 192.168.124.83. As we can see:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783704
corosync-quorumtool -s
Membership information:
Nodeid      Votes Name
1084783697          1 d52-54-77-77-01-02
1084783699          1 d52-54-77-77-01-01 (local)
while the other node can only see itself:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783697
RING ID 0
id      = 192.168.124.81
status  = ring 0 active with no faults
corosync-quorumtool -s
Membership information:
Nodeid      Votes Name
1084783697          1 d52-54-77-77-01-02.virtual.cloud.suse.de (local)
this patch will compare whether the IP is equal to ring0_addr/ring1_addr
in nodelist of corosync.conf, and set exact_match_found to 1 if yes.
This could avoid the above issue.","Yep it's really not about whole interface section but only bindnetaddr (and it's actually what I've meant, so sorry for confusion). But I'm not really keen about just ignoring bindnetaddr without letting user know. There should ether be BIG WARNING logged or error followed by exit. I can agree that checking collision may be overwhelming and much simpler check of bindnetaddr existence together with nodelist is good enough.",True,{}
corosync/corosync,https://github.com/corosync/corosync,197,2017-04-01T08:23:34Z,2017-04-10T05:21:18Z,2017-04-10T05:21:18Z,CLOSED,False,60,0,3,https://github.com/liu4480,totemip.c: Fixed Evicted from CPG membership,1,[],https://github.com/corosync/corosync/pull/197,https://github.com/liu4480,11,https://github.com/corosync/corosync/pull/197#issuecomment-292049295,"In a two-node cluster, I 've one node configured with open-vswtich:
5: br-fixed: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default
inet 192.168.124.88/24 scope global br-fixed
inet 192.168.124.87/24 scope global secondary br-fixed
inet 192.168.124.83/24 brd 192.168.124.255 scope global secondary tentative br-fixed
inet 192.168.124.89/24 scope global secondary br-fixed
while I use 192.168.124.83 in node list of corosync.conf with udpu, and the bind_addr is
192.168.124.0. After upgrading corosync on this node, the it uses 192.168.124.88 instead
of 192.168.124.83. As we can see:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783704
corosync-quorumtool -s
Membership information:
Nodeid      Votes Name
1084783697          1 d52-54-77-77-01-02
1084783699          1 d52-54-77-77-01-01 (local)
while the other node can only see itself:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783697
RING ID 0
id      = 192.168.124.81
status  = ring 0 active with no faults
corosync-quorumtool -s
Membership information:
Nodeid      Votes Name
1084783697          1 d52-54-77-77-01-02.virtual.cloud.suse.de (local)
this patch will compare whether the IP is equal to ring0_addr/ring1_addr
in nodelist of corosync.conf, and set exact_match_found to 1 if yes.
This could avoid the above issue.","I can agree that checking collision may be overwhelming and much simpler check of bindnetaddr existence together with nodelist is good enough.

@jfriesse That's what you mean in your first comment, right? Do you mean to just check if they are in icmap?

check that both information not collide, if they collide -> display error and exit.

Do you mean here we check whether bindnetaddr equals to addr in nodelist? Or check like following?

if (totemip_equal(&bn_netaddr, &if_netaddr) && (totemip_equal(&node_addr1, &if_netaddr) || totemip_equal(&node_addr2, &if_netaddr)))

where if_netaddr is the IP we got from the interface.
I think the second makes sense.
And I think displaying error is enough.
another question is you said we can fix it in totemconfig, do you mean to have the check when starting corosync?",True,{}
corosync/corosync,https://github.com/corosync/corosync,197,2017-04-01T08:23:34Z,2017-04-10T05:21:18Z,2017-04-10T05:21:18Z,CLOSED,False,60,0,3,https://github.com/liu4480,totemip.c: Fixed Evicted from CPG membership,1,[],https://github.com/corosync/corosync/pull/197,https://github.com/jfriesse,12,https://github.com/corosync/corosync/pull/197#issuecomment-292116053,"In a two-node cluster, I 've one node configured with open-vswtich:
5: br-fixed: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default
inet 192.168.124.88/24 scope global br-fixed
inet 192.168.124.87/24 scope global secondary br-fixed
inet 192.168.124.83/24 brd 192.168.124.255 scope global secondary tentative br-fixed
inet 192.168.124.89/24 scope global secondary br-fixed
while I use 192.168.124.83 in node list of corosync.conf with udpu, and the bind_addr is
192.168.124.0. After upgrading corosync on this node, the it uses 192.168.124.88 instead
of 192.168.124.83. As we can see:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783704
corosync-quorumtool -s
Membership information:
Nodeid      Votes Name
1084783697          1 d52-54-77-77-01-02
1084783699          1 d52-54-77-77-01-01 (local)
while the other node can only see itself:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783697
RING ID 0
id      = 192.168.124.81
status  = ring 0 active with no faults
corosync-quorumtool -s
Membership information:
Nodeid      Votes Name
1084783697          1 d52-54-77-77-01-02.virtual.cloud.suse.de (local)
this patch will compare whether the IP is equal to ring0_addr/ring1_addr
in nodelist of corosync.conf, and set exact_match_found to 1 if yes.
This could avoid the above issue.","@liu4480 Yes, just check if they are in cmap.

Do you mean here we check whether bindnetaddr equals to addr in nodelist? Or check like following?

Yep second one.

another question is you said we can fix it in totemconfig, do you mean to have the check when starting corosync?

totem_config_read or totem_config_validate looks like a right place for such check.",True,{}
corosync/corosync,https://github.com/corosync/corosync,197,2017-04-01T08:23:34Z,2017-04-10T05:21:18Z,2017-04-10T05:21:18Z,CLOSED,False,60,0,3,https://github.com/liu4480,totemip.c: Fixed Evicted from CPG membership,1,[],https://github.com/corosync/corosync/pull/197,https://github.com/liu4480,13,https://github.com/corosync/corosync/pull/197#issuecomment-292465226,"In a two-node cluster, I 've one node configured with open-vswtich:
5: br-fixed: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default
inet 192.168.124.88/24 scope global br-fixed
inet 192.168.124.87/24 scope global secondary br-fixed
inet 192.168.124.83/24 brd 192.168.124.255 scope global secondary tentative br-fixed
inet 192.168.124.89/24 scope global secondary br-fixed
while I use 192.168.124.83 in node list of corosync.conf with udpu, and the bind_addr is
192.168.124.0. After upgrading corosync on this node, the it uses 192.168.124.88 instead
of 192.168.124.83. As we can see:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783704
corosync-quorumtool -s
Membership information:
Nodeid      Votes Name
1084783697          1 d52-54-77-77-01-02
1084783699          1 d52-54-77-77-01-01 (local)
while the other node can only see itself:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783697
RING ID 0
id      = 192.168.124.81
status  = ring 0 active with no faults
corosync-quorumtool -s
Membership information:
Nodeid      Votes Name
1084783697          1 d52-54-77-77-01-02.virtual.cloud.suse.de (local)
this patch will compare whether the IP is equal to ring0_addr/ring1_addr
in nodelist of corosync.conf, and set exact_match_found to 1 if yes.
This could avoid the above issue.","@jfriesse

Yep second one.

for comparison like:
if (totemip_equal(&bn_netaddr, &if_netaddr) && (totemip_equal(&node_addr1, &if_netaddr) || totemip_equal(&node_addr2, &if_netaddr)))
we still need to iter all IP addresses of each interface,  and checking collision may also be overwhelming. do you have any ideas to make the check easier?

totem_config_read or totem_config_validate looks like a right place for such check

And I do not think iterating all IP addresses of each interface in these functions is a good method.
any ideas?",True,{}
corosync/corosync,https://github.com/corosync/corosync,197,2017-04-01T08:23:34Z,2017-04-10T05:21:18Z,2017-04-10T05:21:18Z,CLOSED,False,60,0,3,https://github.com/liu4480,totemip.c: Fixed Evicted from CPG membership,1,[],https://github.com/corosync/corosync/pull/197,https://github.com/jfriesse,14,https://github.com/corosync/corosync/pull/197#issuecomment-292537938,"In a two-node cluster, I 've one node configured with open-vswtich:
5: br-fixed: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default
inet 192.168.124.88/24 scope global br-fixed
inet 192.168.124.87/24 scope global secondary br-fixed
inet 192.168.124.83/24 brd 192.168.124.255 scope global secondary tentative br-fixed
inet 192.168.124.89/24 scope global secondary br-fixed
while I use 192.168.124.83 in node list of corosync.conf with udpu, and the bind_addr is
192.168.124.0. After upgrading corosync on this node, the it uses 192.168.124.88 instead
of 192.168.124.83. As we can see:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783704
corosync-quorumtool -s
Membership information:
Nodeid      Votes Name
1084783697          1 d52-54-77-77-01-02
1084783699          1 d52-54-77-77-01-01 (local)
while the other node can only see itself:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783697
RING ID 0
id      = 192.168.124.81
status  = ring 0 active with no faults
corosync-quorumtool -s
Membership information:
Nodeid      Votes Name
1084783697          1 d52-54-77-77-01-02.virtual.cloud.suse.de (local)
this patch will compare whether the IP is equal to ring0_addr/ring1_addr
in nodelist of corosync.conf, and set exact_match_found to 1 if yes.
This could avoid the above issue.","@liu4480 I'll definitively take a look to problem a little deeper next week. But if solving problem really means to iterate all ip addresses of all interfaces let's go with what chrissie suggested and I've approved in #197 (comment) , so:
check if there are both nodelist and bindnetaddr and if so, ether display error and exit or display warning and use nodelist information.",True,{}
corosync/corosync,https://github.com/corosync/corosync,200,2017-04-10T05:29:33Z,2017-04-11T09:29:06Z,2017-04-19T05:49:17Z,CLOSED,False,39,2,3,https://github.com/liu4480,totemconfig.c: Fixed Evicted from CPG membership,1,[],https://github.com/corosync/corosync/pull/200,https://github.com/liu4480,1,https://github.com/corosync/corosync/pull/200,"In a two-node cluster, I 've one node configured with open-vswtich:
5: br-fixed: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default
inet 192.168.124.88/24 scope global br-fixed
inet 192.168.124.87/24 scope global secondary br-fixed
inet 192.168.124.83/24 brd 192.168.124.255 scope global secondary tentative br-fixed
inet 192.168.124.89/24 scope global secondary br-fixed
while I use 192.168.124.83 in node list of corosync.conf with udpu, and the bind_addr is
192.168.124.0. After upgrading corosync on this node, the it uses 192.168.124.88 instead
of 192.168.124.83. As we can see:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783704
corosync-quorumtool -s
Membership information:
Nodeid Votes Name
1084783697 1 d52-54-77-77-01-02
1084783699 1 d52-54-77-77-01-01 (local)
while the other node can only see itself:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783697
RING ID 0
id = 192.168.124.81
status = ring 0 active with no faults
corosync-quorumtool -s
Membership information:
Nodeid Votes Name
1084783697 1 d52-54-77-77-01-02.virtual.cloud.suse.de (local)
this patch will check if there are both nodelist and bindnetaddr and if so, display warning
and use nodelist information.","In a two-node cluster, I 've one node configured with open-vswtich:
5: br-fixed: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default
inet 192.168.124.88/24 scope global br-fixed
inet 192.168.124.87/24 scope global secondary br-fixed
inet 192.168.124.83/24 brd 192.168.124.255 scope global secondary tentative br-fixed
inet 192.168.124.89/24 scope global secondary br-fixed
while I use 192.168.124.83 in node list of corosync.conf with udpu, and the bind_addr is
192.168.124.0. After upgrading corosync on this node, the it uses 192.168.124.88 instead
of 192.168.124.83. As we can see:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783704
corosync-quorumtool -s
Membership information:
Nodeid Votes Name
1084783697 1 d52-54-77-77-01-02
1084783699 1 d52-54-77-77-01-01 (local)
while the other node can only see itself:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783697
RING ID 0
id = 192.168.124.81
status = ring 0 active with no faults
corosync-quorumtool -s
Membership information:
Nodeid Votes Name
1084783697 1 d52-54-77-77-01-02.virtual.cloud.suse.de (local)
this patch will check if there are both nodelist and bindnetaddr and if so, display warning
and use nodelist information.",True,{}
corosync/corosync,https://github.com/corosync/corosync,200,2017-04-10T05:29:33Z,2017-04-11T09:29:06Z,2017-04-19T05:49:17Z,CLOSED,False,39,2,3,https://github.com/liu4480,totemconfig.c: Fixed Evicted from CPG membership,1,[],https://github.com/corosync/corosync/pull/200,https://github.com/liu4480,2,https://github.com/corosync/corosync/pull/200#issuecomment-292854020,"In a two-node cluster, I 've one node configured with open-vswtich:
5: br-fixed: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default
inet 192.168.124.88/24 scope global br-fixed
inet 192.168.124.87/24 scope global secondary br-fixed
inet 192.168.124.83/24 brd 192.168.124.255 scope global secondary tentative br-fixed
inet 192.168.124.89/24 scope global secondary br-fixed
while I use 192.168.124.83 in node list of corosync.conf with udpu, and the bind_addr is
192.168.124.0. After upgrading corosync on this node, the it uses 192.168.124.88 instead
of 192.168.124.83. As we can see:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783704
corosync-quorumtool -s
Membership information:
Nodeid Votes Name
1084783697 1 d52-54-77-77-01-02
1084783699 1 d52-54-77-77-01-01 (local)
while the other node can only see itself:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783697
RING ID 0
id = 192.168.124.81
status = ring 0 active with no faults
corosync-quorumtool -s
Membership information:
Nodeid Votes Name
1084783697 1 d52-54-77-77-01-02.virtual.cloud.suse.de (local)
this patch will check if there are both nodelist and bindnetaddr and if so, display warning
and use nodelist information.",As discussed in #197,True,{}
corosync/corosync,https://github.com/corosync/corosync,200,2017-04-10T05:29:33Z,2017-04-11T09:29:06Z,2017-04-19T05:49:17Z,CLOSED,False,39,2,3,https://github.com/liu4480,totemconfig.c: Fixed Evicted from CPG membership,1,[],https://github.com/corosync/corosync/pull/200,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/200#issuecomment-292990206,"In a two-node cluster, I 've one node configured with open-vswtich:
5: br-fixed: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default
inet 192.168.124.88/24 scope global br-fixed
inet 192.168.124.87/24 scope global secondary br-fixed
inet 192.168.124.83/24 brd 192.168.124.255 scope global secondary tentative br-fixed
inet 192.168.124.89/24 scope global secondary br-fixed
while I use 192.168.124.83 in node list of corosync.conf with udpu, and the bind_addr is
192.168.124.0. After upgrading corosync on this node, the it uses 192.168.124.88 instead
of 192.168.124.83. As we can see:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783704
corosync-quorumtool -s
Membership information:
Nodeid Votes Name
1084783697 1 d52-54-77-77-01-02
1084783699 1 d52-54-77-77-01-01 (local)
while the other node can only see itself:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783697
RING ID 0
id = 192.168.124.81
status = ring 0 active with no faults
corosync-quorumtool -s
Membership information:
Nodeid Votes Name
1084783697 1 d52-54-77-77-01-02.virtual.cloud.suse.de (local)
this patch will check if there are both nodelist and bindnetaddr and if so, display warning
and use nodelist information.","@liu4480 Patch idea is good, but I have few nitpicks (mostly style):

Please change comment to style like:

/*
 * Comment
 */

C comment has duplicate  if yes, log warning information
There is leak of memory when icmap_get_string(""totem.interface.0.bindnetaddr"", &bind_addr_str) succeed and (icmap_get_string(""nodelist.node.0.ring0_addr"", &ring0_addr_str) == CS_OK)) fails
*warnings |= TOTEM_CONFIG_BINDNETADDR_NODELIST_SET;  is set, but if bind_addr_str or ring0_addr_str is NULL no message is displayed.",True,{}
corosync/corosync,https://github.com/corosync/corosync,200,2017-04-10T05:29:33Z,2017-04-11T09:29:06Z,2017-04-19T05:49:17Z,CLOSED,False,39,2,3,https://github.com/liu4480,totemconfig.c: Fixed Evicted from CPG membership,1,[],https://github.com/corosync/corosync/pull/200,https://github.com/liu4480,4,https://github.com/corosync/corosync/pull/200#issuecomment-293134290,"In a two-node cluster, I 've one node configured with open-vswtich:
5: br-fixed: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default
inet 192.168.124.88/24 scope global br-fixed
inet 192.168.124.87/24 scope global secondary br-fixed
inet 192.168.124.83/24 brd 192.168.124.255 scope global secondary tentative br-fixed
inet 192.168.124.89/24 scope global secondary br-fixed
while I use 192.168.124.83 in node list of corosync.conf with udpu, and the bind_addr is
192.168.124.0. After upgrading corosync on this node, the it uses 192.168.124.88 instead
of 192.168.124.83. As we can see:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783704
corosync-quorumtool -s
Membership information:
Nodeid Votes Name
1084783697 1 d52-54-77-77-01-02
1084783699 1 d52-54-77-77-01-01 (local)
while the other node can only see itself:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783697
RING ID 0
id = 192.168.124.81
status = ring 0 active with no faults
corosync-quorumtool -s
Membership information:
Nodeid Votes Name
1084783697 1 d52-54-77-77-01-02.virtual.cloud.suse.de (local)
this patch will check if there are both nodelist and bindnetaddr and if so, display warning
and use nodelist information.","@jfriesse thanks for your comments

There is leak of memory when icmap_get_string(""totem.interface.0.bindnetaddr"", &bind_addr_str) succeed and (icmap_get_string(""nodelist.node.0.ring0_addr"", &ring0_addr_str) == CS_OK)) fails

that 's right, I 've fixed it.

*warnings |= TOTEM_CONFIG_BINDNETADDR_NODELIST_SET; is set, but if bind_addr_str or ring0_addr_str is NULL no message is displayed.

for both ring0_addr_str and bind_addr_str are NULL, corosync will exit and log information to check configuration",True,{}
corosync/corosync,https://github.com/corosync/corosync,200,2017-04-10T05:29:33Z,2017-04-11T09:29:06Z,2017-04-19T05:49:17Z,CLOSED,False,39,2,3,https://github.com/liu4480,totemconfig.c: Fixed Evicted from CPG membership,1,[],https://github.com/corosync/corosync/pull/200,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/200#issuecomment-293192007,"In a two-node cluster, I 've one node configured with open-vswtich:
5: br-fixed: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default
inet 192.168.124.88/24 scope global br-fixed
inet 192.168.124.87/24 scope global secondary br-fixed
inet 192.168.124.83/24 brd 192.168.124.255 scope global secondary tentative br-fixed
inet 192.168.124.89/24 scope global secondary br-fixed
while I use 192.168.124.83 in node list of corosync.conf with udpu, and the bind_addr is
192.168.124.0. After upgrading corosync on this node, the it uses 192.168.124.88 instead
of 192.168.124.83. As we can see:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783704
corosync-quorumtool -s
Membership information:
Nodeid Votes Name
1084783697 1 d52-54-77-77-01-02
1084783699 1 d52-54-77-77-01-01 (local)
while the other node can only see itself:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783697
RING ID 0
id = 192.168.124.81
status = ring 0 active with no faults
corosync-quorumtool -s
Membership information:
Nodeid Votes Name
1084783697 1 d52-54-77-77-01-02.virtual.cloud.suse.de (local)
this patch will check if there are both nodelist and bindnetaddr and if so, display warning
and use nodelist information.","@liu4480 Patch is still not good.

Comment style not fixed
if(ring0_addr_str) { and if(bind_addr_str) { cannot happen. Simply because when icmap_get_string success, str is not NULL
msg is allocated on stack and passed back to caller of function via error_string. But after function finishes, msg no longer exists.

I've took your patch and tried to address issues. Can you please take a look to jfriesse@cf97b5c / test it and let me know if it is working as expected and if you have questions/comments?",True,{}
corosync/corosync,https://github.com/corosync/corosync,200,2017-04-10T05:29:33Z,2017-04-11T09:29:06Z,2017-04-19T05:49:17Z,CLOSED,False,39,2,3,https://github.com/liu4480,totemconfig.c: Fixed Evicted from CPG membership,1,[],https://github.com/corosync/corosync/pull/200,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/200#issuecomment-293202836,"In a two-node cluster, I 've one node configured with open-vswtich:
5: br-fixed: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default
inet 192.168.124.88/24 scope global br-fixed
inet 192.168.124.87/24 scope global secondary br-fixed
inet 192.168.124.83/24 brd 192.168.124.255 scope global secondary tentative br-fixed
inet 192.168.124.89/24 scope global secondary br-fixed
while I use 192.168.124.83 in node list of corosync.conf with udpu, and the bind_addr is
192.168.124.0. After upgrading corosync on this node, the it uses 192.168.124.88 instead
of 192.168.124.83. As we can see:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783704
corosync-quorumtool -s
Membership information:
Nodeid Votes Name
1084783697 1 d52-54-77-77-01-02
1084783699 1 d52-54-77-77-01-01 (local)
while the other node can only see itself:
corosync-cfgtool -s
Printing ring status.
Local node ID 1084783697
RING ID 0
id = 192.168.124.81
status = ring 0 active with no faults
corosync-quorumtool -s
Membership information:
Nodeid Votes Name
1084783697 1 d52-54-77-77-01-02.virtual.cloud.suse.de (local)
this patch will check if there are both nodelist and bindnetaddr and if so, display warning
and use nodelist information.","Patch merged as 0462b5e (master) and 95f9583 (needle), so closing this PR.",True,{}
corosync/corosync,https://github.com/corosync/corosync,201,2017-04-14T06:01:38Z,2017-04-19T08:15:29Z,2017-04-19T08:15:29Z,CLOSED,False,66,3,5,https://github.com/liu4480,Fix compile warnings,2,[],https://github.com/corosync/corosync/pull/201,https://github.com/liu4480,1,https://github.com/corosync/corosync/pull/201,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,201,2017-04-14T06:01:38Z,2017-04-19T08:15:29Z,2017-04-19T08:15:29Z,CLOSED,False,66,3,5,https://github.com/liu4480,Fix compile warnings,2,[],https://github.com/corosync/corosync/pull/201,https://github.com/liu4480,2,https://github.com/corosync/corosync/pull/201#issuecomment-294097025,,"By the way, I also find a warning that:
coroparse.c:1347:2: warning: ‘readdir_r’ is deprecated [-Wdeprecated-declarations]
for (return_code = readdir_r(dp, entry, &dirent);
coroparse.c:1349:3: warning: ‘readdir_r’ is deprecated [-Wdeprecated-declarations]
return_code = readdir_r(dp, entry, &dirent)) {
And I confirmed that 'readdir_r' is deprecated in glibc 2.24(which I used to compile corosync), is it OK to change 'readdir_r'  to 'readdir'?",True,{}
corosync/corosync,https://github.com/corosync/corosync,201,2017-04-14T06:01:38Z,2017-04-19T08:15:29Z,2017-04-19T08:15:29Z,CLOSED,False,66,3,5,https://github.com/liu4480,Fix compile warnings,2,[],https://github.com/corosync/corosync/pull/201,https://github.com/chrissie-c,3,https://github.com/corosync/corosync/pull/201#issuecomment-294869071,,"The two return-code fixes are sound but I'd prefer to see some error message printed if the calls fail.
The printing warnings I think could be fixed more cleanly using the macros in <inttypes.h>, that should prevent (at least most of) the ifdefs.",True,{}
corosync/corosync,https://github.com/corosync/corosync,201,2017-04-14T06:01:38Z,2017-04-19T08:15:29Z,2017-04-19T08:15:29Z,CLOSED,False,66,3,5,https://github.com/liu4480,Fix compile warnings,2,[],https://github.com/corosync/corosync/pull/201,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/201#issuecomment-294872904,,"I just wanted to comment, but Chrissie was faster ;)
For qnetd ""issues"" you can use ""utils.h"" and there is defined UTILS_PRI_NODE_ID, UTILS_PRI_RING_ID, ....
Cpghum should be %zu for msg_len (it is size_t).
As chrissie said, knet pipe failure should log failure (I don't have strong opinion what return code should be returned there)
For wd.c, it is enough to just log message. If watchdog cannot be closed there is really nothing we can do about it but it looks like service will try to call this exit_fn again and again (and maybe I've overlooked something so take is as a not 100% verified info). Just log warning is ok.",True,{}
corosync/corosync,https://github.com/corosync/corosync,201,2017-04-14T06:01:38Z,2017-04-19T08:15:29Z,2017-04-19T08:15:29Z,CLOSED,False,66,3,5,https://github.com/liu4480,Fix compile warnings,2,[],https://github.com/corosync/corosync/pull/201,https://github.com/liu4480,5,https://github.com/corosync/corosync/pull/201#issuecomment-295053306,,"@jfriesse  @chrissie-c

For qnetd ""issues"" you can use ""utils.h"" and there is defined UTILS_PRI_NODE_ID, UTILS_PRI_RING_ID, ....

As most the printf warnings are ring_id->seq, which is defined as:

struct tlv_ring_id {
uint32_t node_id;
uint64_t seq;
};

Isn't is simpler to add something like this?

#if defined(i386)
#define uint64_t_format ""%llu""
#else
#define uint64_t_format ""%lu""
#endif

then change ""%lu"" to uint64_t_format for each line. I think this will not affect the logic related to tlv_ring_id.",True,{}
corosync/corosync,https://github.com/corosync/corosync,201,2017-04-14T06:01:38Z,2017-04-19T08:15:29Z,2017-04-19T08:15:29Z,CLOSED,False,66,3,5,https://github.com/liu4480,Fix compile warnings,2,[],https://github.com/corosync/corosync/pull/201,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/201#issuecomment-295112261,,"@liu4480 No it's not. Adding macroprocessor ifdef is always incorrect way when there is standard option (PRIu32). And to use UTILS_PRI_NODE_ID, UTILS_PRI_RING_ID, ... make sense because then it's possible to just change util.h and get different consistent logging.",True,{}
corosync/corosync,https://github.com/corosync/corosync,202,2017-04-19T08:20:50Z,2017-04-20T07:11:54Z,2017-11-09T08:47:39Z,CLOSED,False,26,31,6,https://github.com/liu4480,fix some compile warnings,1,[],https://github.com/corosync/corosync/pull/202,https://github.com/liu4480,1,https://github.com/corosync/corosync/pull/202,"readdir_r is deprecated in glibc 2.24, change to readdir
fix warings that return values are not used, added warning message
type fixes for qnetd_log, syslog and fprintf","readdir_r is deprecated in glibc 2.24, change to readdir
fix warings that return values are not used, added warning message
type fixes for qnetd_log, syslog and fprintf",True,{}
corosync/corosync,https://github.com/corosync/corosync,202,2017-04-19T08:20:50Z,2017-04-20T07:11:54Z,2017-11-09T08:47:39Z,CLOSED,False,26,31,6,https://github.com/liu4480,fix some compile warnings,1,[],https://github.com/corosync/corosync/pull/202,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/202#issuecomment-295605496,"readdir_r is deprecated in glibc 2.24, change to readdir
fix warings that return values are not used, added warning message
type fixes for qnetd_log, syslog and fprintf","@liu4480 Thanks for patches. I've split them into multiple ones because some of them are useful for needle and merged them as a c144dba, 28f40c7, be3e166, 725f903 and c83e6c7 for master and 51425f3, 9efc875 and e47ead9 for needle.",True,{}
corosync/corosync,https://github.com/corosync/corosync,202,2017-04-19T08:20:50Z,2017-04-20T07:11:54Z,2017-11-09T08:47:39Z,CLOSED,False,26,31,6,https://github.com/liu4480,fix some compile warnings,1,[],https://github.com/corosync/corosync/pull/202,https://github.com/liu4480,3,https://github.com/corosync/corosync/pull/202#issuecomment-295609760,"readdir_r is deprecated in glibc 2.24, change to readdir
fix warings that return values are not used, added warning message
type fixes for qnetd_log, syslog and fprintf",thanks for merging,True,{}
corosync/corosync,https://github.com/corosync/corosync,202,2017-04-19T08:20:50Z,2017-04-20T07:11:54Z,2017-11-09T08:47:39Z,CLOSED,False,26,31,6,https://github.com/liu4480,fix some compile warnings,1,[],https://github.com/corosync/corosync/pull/202,https://github.com/liu4480,4,https://github.com/corosync/corosync/pull/202#issuecomment-343050223,"readdir_r is deprecated in glibc 2.24, change to readdir
fix warings that return values are not used, added warning message
type fixes for qnetd_log, syslog and fprintf","@jfriesse shouldn't c83e6c7 also be included in needble, I just compiled corosync-2.4.3 with gcc 7.2.1, has the following warnings:
coroparse.c:1267:2: warning: 'readdir_r' is deprecated [-Wdeprecated-declarations]
could you push c83e6c7 to needle as well?",True,{}
corosync/corosync,https://github.com/corosync/corosync,202,2017-04-19T08:20:50Z,2017-04-20T07:11:54Z,2017-11-09T08:47:39Z,CLOSED,False,26,31,6,https://github.com/liu4480,fix some compile warnings,1,[],https://github.com/corosync/corosync/pull/202,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/202#issuecomment-343086481,"readdir_r is deprecated in glibc 2.24, change to readdir
fix warings that return values are not used, added warning message
type fixes for qnetd_log, syslog and fprintf","@liu4480 Yep, agree. Patch is safe even on system with older glibc so merged as a33cb78",True,{}
corosync/corosync,https://github.com/corosync/corosync,203,2017-04-21T09:27:06Z,2017-04-21T15:46:05Z,2017-04-21T15:46:05Z,CLOSED,False,6,6,1,https://github.com/Feuermurmel,Fix typos in README.recovery,1,[],https://github.com/corosync/corosync/pull/203,https://github.com/Feuermurmel,1,https://github.com/corosync/corosync/pull/203,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,203,2017-04-21T09:27:06Z,2017-04-21T15:46:05Z,2017-04-21T15:46:05Z,CLOSED,False,6,6,1,https://github.com/Feuermurmel,Fix typos in README.recovery,1,[],https://github.com/corosync/corosync/pull/203,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/203#issuecomment-296227522,,"@Feuermurmel Good catch, nice patch. Ack and merged as 4ebb7ad.
About recontinue : It is probably not very often used word, but it's definition (https://www.collinsdictionary.com/dictionary/english/recontinue) exactly describes what happens during sync process. Service can decide to interrupt, let corosync get more messages and sync is then called again. So we can keep recontinue as it is.
Thank you for the patch.",True,{'THUMBS_UP': ['https://github.com/Feuermurmel']}
corosync/corosync,https://github.com/corosync/corosync,205,2017-05-05T08:11:55Z,2017-05-11T07:51:35Z,2017-05-11T07:51:43Z,MERGED,True,133,52,1,https://github.com/chrissie-c,test: Fold cpgbench into cpghum,2,[],https://github.com/corosync/corosync/pull/205,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/205,"cpgbench and cpghum share a lot of code & concepts so it makes
sense to merge them into a single test program that can both
benchmark and sanity check CPG. We've talked about this before.
I've left cpgbench (and cpgbenchzc) in place for the moment
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","cpgbench and cpghum share a lot of code & concepts so it makes
sense to merge them into a single test program that can both
benchmark and sanity check CPG. We've talked about this before.
I've left cpgbench (and cpgbenchzc) in place for the moment
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,205,2017-05-05T08:11:55Z,2017-05-11T07:51:35Z,2017-05-11T07:51:43Z,MERGED,True,133,52,1,https://github.com/chrissie-c,test: Fold cpgbench into cpghum,2,[],https://github.com/corosync/corosync/pull/205,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/205#issuecomment-300187244,"cpgbench and cpghum share a lot of code & concepts so it makes
sense to merge them into a single test program that can both
benchmark and sanity check CPG. We've talked about this before.
I've left cpgbench (and cpgbenchzc) in place for the moment
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","@chrissie-c Looks good, ACK.",True,{}
corosync/corosync,https://github.com/corosync/corosync,206,2017-05-10T15:18:13Z,2017-05-15T09:47:39Z,2017-05-15T09:47:49Z,CLOSED,False,66,9,1,https://github.com/jfriesse,totemrrp: Fix situation when all rings are faulty,1,[],https://github.com/corosync/corosync/pull/206,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/206,"Previously when all rings were marked as failed no message was sent via
any interface. This is problem because totemsrp relies on messages
delivered via localhost multicast loop socket so it never moved to
single node mode and it got stuck.
Solution is to send message via one of the interfaces (first one seems
to be obvious choice) if it was not sent via any interface.
Strictly speaking it should be enough to change just *_mcast_flush_send
functions, but changing others is just for sure.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Previously when all rings were marked as failed no message was sent via
any interface. This is problem because totemsrp relies on messages
delivered via localhost multicast loop socket so it never moved to
single node mode and it got stuck.
Solution is to send message via one of the interfaces (first one seems
to be obvious choice) if it was not sent via any interface.
Strictly speaking it should be enough to change just *_mcast_flush_send
functions, but changing others is just for sure.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,206,2017-05-10T15:18:13Z,2017-05-15T09:47:39Z,2017-05-15T09:47:49Z,CLOSED,False,66,9,1,https://github.com/jfriesse,totemrrp: Fix situation when all rings are faulty,1,[],https://github.com/corosync/corosync/pull/206,https://github.com/chrissie-c,2,https://github.com/corosync/corosync/pull/206#issuecomment-301066361,"Previously when all rings were marked as failed no message was sent via
any interface. This is problem because totemsrp relies on messages
delivered via localhost multicast loop socket so it never moved to
single node mode and it got stuck.
Solution is to send message via one of the interfaces (first one seems
to be obvious choice) if it was not sent via any interface.
Strictly speaking it should be enough to change just *_mcast_flush_send
functions, but changing others is just for sure.
Signed-off-by: Jan Friesse jfriesse@redhat.com",ACK from me.,True,{}
corosync/corosync,https://github.com/corosync/corosync,206,2017-05-10T15:18:13Z,2017-05-15T09:47:39Z,2017-05-15T09:47:49Z,CLOSED,False,66,9,1,https://github.com/jfriesse,totemrrp: Fix situation when all rings are faulty,1,[],https://github.com/corosync/corosync/pull/206,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/206#issuecomment-301428394,"Previously when all rings were marked as failed no message was sent via
any interface. This is problem because totemsrp relies on messages
delivered via localhost multicast loop socket so it never moved to
single node mode and it got stuck.
Solution is to send message via one of the interfaces (first one seems
to be obvious choice) if it was not sent via any interface.
Strictly speaking it should be enough to change just *_mcast_flush_send
functions, but changing others is just for sure.
Signed-off-by: Jan Friesse jfriesse@redhat.com",Merged as 2901ece,True,{}
corosync/corosync,https://github.com/corosync/corosync,207,2017-05-17T15:16:50Z,2017-05-18T15:17:45Z,2017-05-18T15:17:56Z,CLOSED,False,13,2,1,https://github.com/jfriesse,main: Display reason why cluster cannot be formed,1,[],https://github.com/corosync/corosync/pull/207,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/207,Signed-off-by: Jan Friesse jfriesse@redhat.com,Signed-off-by: Jan Friesse jfriesse@redhat.com,True,{}
corosync/corosync,https://github.com/corosync/corosync,207,2017-05-17T15:16:50Z,2017-05-18T15:17:45Z,2017-05-18T15:17:56Z,CLOSED,False,13,2,1,https://github.com/jfriesse,main: Display reason why cluster cannot be formed,1,[],https://github.com/corosync/corosync/pull/207,https://github.com/chrissie-c,2,https://github.com/corosync/corosync/pull/207#issuecomment-302321727,Signed-off-by: Jan Friesse jfriesse@redhat.com,"""Totem is continuosly in gather stateunable to form a cluster because of an "" should probably be
""Totem is continuously in gather state. Unable to form a cluster because of an """,True,{}
corosync/corosync,https://github.com/corosync/corosync,207,2017-05-17T15:16:50Z,2017-05-18T15:17:45Z,2017-05-18T15:17:56Z,CLOSED,False,13,2,1,https://github.com/jfriesse,main: Display reason why cluster cannot be formed,1,[],https://github.com/corosync/corosync/pull/207,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/207#issuecomment-302324487,Signed-off-by: Jan Friesse jfriesse@redhat.com,"@chrissie-c Oh, good catch (and one of the reason why I think review is so important). Actually whole that section is leftover and should be removed. 21321d8 is correct patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,207,2017-05-17T15:16:50Z,2017-05-18T15:17:45Z,2017-05-18T15:17:56Z,CLOSED,False,13,2,1,https://github.com/jfriesse,main: Display reason why cluster cannot be formed,1,[],https://github.com/corosync/corosync/pull/207,https://github.com/chrissie-c,4,https://github.com/corosync/corosync/pull/207#issuecomment-302330860,Signed-off-by: Jan Friesse jfriesse@redhat.com,"Yes, that look a lot nicer.",True,{}
corosync/corosync,https://github.com/corosync/corosync,207,2017-05-17T15:16:50Z,2017-05-18T15:17:45Z,2017-05-18T15:17:56Z,CLOSED,False,13,2,1,https://github.com/jfriesse,main: Display reason why cluster cannot be formed,1,[],https://github.com/corosync/corosync/pull/207,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/207#issuecomment-302435816,Signed-off-by: Jan Friesse jfriesse@redhat.com,Thank you for the review. Patch is merged as d87bc9d and 95b91e4.,True,{}
corosync/corosync,https://github.com/corosync/corosync,209,2017-05-18T07:13:46Z,2017-05-18T15:05:50Z,2017-05-18T19:35:34Z,CLOSED,False,14,2,1,https://github.com/HideoYamauchi,Mid: corosync-notifyd: Addition of the community name to an SNMP trap.,1,[],https://github.com/corosync/corosync/pull/209,https://github.com/HideoYamauchi,1,https://github.com/corosync/corosync/pull/209,"Hi All,
By the Alert function of Pacemaker, a trap of the SNMP can appoint a community name.
I want to change even an SNMP trap of corosync-notifyd to appoint a community name.
I added c option for the designation of the community name.
The user can appoint it in /etc/sysconfig/corosync-notifyd.
OPTIONS=""-s -m xxx.xxx.xx.xxx -c mycommunity""

Best Regards,
Hideo Yamauchi.","Hi All,
By the Alert function of Pacemaker, a trap of the SNMP can appoint a community name.
I want to change even an SNMP trap of corosync-notifyd to appoint a community name.
I added c option for the designation of the community name.
The user can appoint it in /etc/sysconfig/corosync-notifyd.
OPTIONS=""-s -m xxx.xxx.xx.xxx -c mycommunity""

Best Regards,
Hideo Yamauchi.",True,{}
corosync/corosync,https://github.com/corosync/corosync,209,2017-05-18T07:13:46Z,2017-05-18T15:05:50Z,2017-05-18T19:35:34Z,CLOSED,False,14,2,1,https://github.com/HideoYamauchi,Mid: corosync-notifyd: Addition of the community name to an SNMP trap.,1,[],https://github.com/corosync/corosync/pull/209,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/209#issuecomment-302432190,"Hi All,
By the Alert function of Pacemaker, a trap of the SNMP can appoint a community name.
I want to change even an SNMP trap of corosync-notifyd to appoint a community name.
I added c option for the designation of the community name.
The user can appoint it in /etc/sysconfig/corosync-notifyd.
OPTIONS=""-s -m xxx.xxx.xx.xxx -c mycommunity""

Best Regards,
Hideo Yamauchi.",@HideoYamauchi Thank you for the patch. It's definitively viable addition so ack and merged as 4fea28e and 97696bb.,True,{}
corosync/corosync,https://github.com/corosync/corosync,209,2017-05-18T07:13:46Z,2017-05-18T15:05:50Z,2017-05-18T19:35:34Z,CLOSED,False,14,2,1,https://github.com/HideoYamauchi,Mid: corosync-notifyd: Addition of the community name to an SNMP trap.,1,[],https://github.com/corosync/corosync/pull/209,https://github.com/HideoYamauchi,3,https://github.com/corosync/corosync/pull/209#issuecomment-302518660,"Hi All,
By the Alert function of Pacemaker, a trap of the SNMP can appoint a community name.
I want to change even an SNMP trap of corosync-notifyd to appoint a community name.
I added c option for the designation of the community name.
The user can appoint it in /etc/sysconfig/corosync-notifyd.
OPTIONS=""-s -m xxx.xxx.xx.xxx -c mycommunity""

Best Regards,
Hideo Yamauchi.","Hi Jan,
Thank you for merge.
Best Regards,
Hideo Yamauchi.",True,{}
corosync/corosync,https://github.com/corosync/corosync,210,2017-05-23T23:11:13Z,2017-05-24T06:23:01Z,2017-05-26T07:43:57Z,CLOSED,False,6611,43,67,https://github.com/jonesmz,"Adds doxygen stubs to various functions, structs, macros, and variables",1,[],https://github.com/corosync/corosync/pull/210,https://github.com/jonesmz,1,https://github.com/corosync/corosync/pull/210,"This pull request should be fairly self explanatory.
Corosync still lacks code documentation, and I remain unable to penetrate the intentions of most of the library code.
Here are stubs that will remind people (by being blank) of which functions are in need of documentation from subject matter experts.","This pull request should be fairly self explanatory.
Corosync still lacks code documentation, and I remain unable to penetrate the intentions of most of the library code.
Here are stubs that will remind people (by being blank) of which functions are in need of documentation from subject matter experts.",True,{}
corosync/corosync,https://github.com/corosync/corosync,210,2017-05-23T23:11:13Z,2017-05-24T06:23:01Z,2017-05-26T07:43:57Z,CLOSED,False,6611,43,67,https://github.com/jonesmz,"Adds doxygen stubs to various functions, structs, macros, and variables",1,[],https://github.com/corosync/corosync/pull/210,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/210#issuecomment-303629186,"This pull request should be fairly self explanatory.
Corosync still lacks code documentation, and I remain unable to penetrate the intentions of most of the library code.
Here are stubs that will remind people (by being blank) of which functions are in need of documentation from subject matter experts.",I don't see too much reasons to add stubs. I would be more than happy to include smaller changes with proper functions/typedefs description but patch in current shape is nack.,True,{}
corosync/corosync,https://github.com/corosync/corosync,210,2017-05-23T23:11:13Z,2017-05-24T06:23:01Z,2017-05-26T07:43:57Z,CLOSED,False,6611,43,67,https://github.com/jonesmz,"Adds doxygen stubs to various functions, structs, macros, and variables",1,[],https://github.com/corosync/corosync/pull/210,https://github.com/jonesmz,3,https://github.com/corosync/corosync/pull/210#issuecomment-303788941,"This pull request should be fairly self explanatory.
Corosync still lacks code documentation, and I remain unable to penetrate the intentions of most of the library code.
Here are stubs that will remind people (by being blank) of which functions are in need of documentation from subject matter experts.","I don't see any commits from you to document the code in corosync recently.
There are literally hundreds and hundreds of functions, and the vast majority of them have no comments, and a coding style that doesn't do much to explain what's going on. The cognitive load to understand things is really high.
Tell ya what. Pick a specific file, and I'll document that to the best of my ability. Since I won't be able to understand half of the code, a lot of it will be blank, but I'll do my best to fill in the blanks.",True,{}
corosync/corosync,https://github.com/corosync/corosync,210,2017-05-23T23:11:13Z,2017-05-24T06:23:01Z,2017-05-26T07:43:57Z,CLOSED,False,6611,43,67,https://github.com/jonesmz,"Adds doxygen stubs to various functions, structs, macros, and variables",1,[],https://github.com/corosync/corosync/pull/210,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/210#issuecomment-304215316,"This pull request should be fairly self explanatory.
Corosync still lacks code documentation, and I remain unable to penetrate the intentions of most of the library code.
Here are stubs that will remind people (by being blank) of which functions are in need of documentation from subject matter experts.",The best start would be ether cpg.h or cmap.h. Idea is #45.,True,{}
corosync/corosync,https://github.com/corosync/corosync,211,2017-05-23T23:17:34Z,2017-05-24T06:29:20Z,2017-05-25T16:52:03Z,CLOSED,False,276,310,4,https://github.com/jonesmz,Keep variable declarations close to where the variable is used,1,[],https://github.com/corosync/corosync/pull/211,https://github.com/jonesmz,1,https://github.com/corosync/corosync/pull/211,"Now that C99 support is turned on, we can start taking advantage of basic code cleanliness features that it affords, such as sane variable lifetime rules.
The code changes in this pull request modify several functions such that instead of declaring all variables at the top of the function, the variable is instead declare close to where it's used. Many of the variable declarations that were moved were refactored in such a way that the variable is now assigned a value immediately, instead of being given some dummy value and then given a new value later.","Now that C99 support is turned on, we can start taking advantage of basic code cleanliness features that it affords, such as sane variable lifetime rules.
The code changes in this pull request modify several functions such that instead of declaring all variables at the top of the function, the variable is instead declare close to where it's used. Many of the variable declarations that were moved were refactored in such a way that the variable is now assigned a value immediately, instead of being given some dummy value and then given a new value later.",True,{}
corosync/corosync,https://github.com/corosync/corosync,211,2017-05-23T23:17:34Z,2017-05-24T06:29:20Z,2017-05-25T16:52:03Z,CLOSED,False,276,310,4,https://github.com/jonesmz,Keep variable declarations close to where the variable is used,1,[],https://github.com/corosync/corosync/pull/211,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/211#issuecomment-303630173,"Now that C99 support is turned on, we can start taking advantage of basic code cleanliness features that it affords, such as sane variable lifetime rules.
The code changes in this pull request modify several functions such that instead of declaring all variables at the top of the function, the variable is instead declare close to where it's used. Many of the variable declarations that were moved were refactored in such a way that the variable is now assigned a value immediately, instead of being given some dummy value and then given a new value later.","I don't really see any reason why to keep declarations close. Again, huge change with no real impact.",True,{}
corosync/corosync,https://github.com/corosync/corosync,211,2017-05-23T23:17:34Z,2017-05-24T06:29:20Z,2017-05-25T16:52:03Z,CLOSED,False,276,310,4,https://github.com/jonesmz,Keep variable declarations close to where the variable is used,1,[],https://github.com/corosync/corosync/pull/211,https://github.com/jonesmz,3,https://github.com/corosync/corosync/pull/211#issuecomment-303797992,"Now that C99 support is turned on, we can start taking advantage of basic code cleanliness features that it affords, such as sane variable lifetime rules.
The code changes in this pull request modify several functions such that instead of declaring all variables at the top of the function, the variable is instead declare close to where it's used. Many of the variable declarations that were moved were refactored in such a way that the variable is now assigned a value immediately, instead of being given some dummy value and then given a new value later.","So would you accept a ""CONTRIBUTING"" document that explicitly explains all of your C89 preferences?
Something like
""No pull requests will be accepted that have variables declared anywhere but the top of a function""
""No pull request that uses the standardized data type ""bool"" will be accepted""
?
The reason for keeping the variable declarations close to use, among other things, is

Reduced cognitive load on contributors
Increased ability for the compiler to optimize -- code becomes closer in spirit to the Static-Single-Assignment form that compilers use internally to represent the code during the optimization phase.
Decreases rate of false-positives from tools like static analyzers, symbolic execution platforms, fuzzers, so on.
Reduces the possibility of misusing an existing variables in a way that can cause problems.
Hate to use the ""If everyone else jumped off a bridge"" argument, but frankly it's industry best practice at every job I've ever worked at to declare as close to use as possible, because where ever I've worked there have been horror stories about how someone screwed it up in the past, and tracking the bug down was a Herculean project, whereas since they adopted coding style policy such as this the rate of screw ups has reduced.

Perhaps the most important reason, to me anyway:
You should accept this patch because I'm generating thousands of lines of code a month to try to improve corosync. I don't see many other contributors. It's apparently just you and @chrissie-c , and one or two drive-by pull requests a month.
I'm trying to make this project easier for people to understand. I'm trying to do that in large part for myself and my team, but not everyone's intimately familiar with the coding conventions typical of C89 projects - and many people think that they're a poor choice for a project still being worked on.
If corosync is easier to understand, that makes it easier for people to contribute, increasing the number of people submitting pull requests, and likewise increasing the amount of pull requests each contributor is likely to submit. Further, if it's easier to understand the code, it's significantly easier to understand when a pull request is going to break things. Right now the code is unreadable garbage and my boss would chew me out of I tried to submit something like it to an internal project.
If you keep rejecting the patches that I send you to modernize your codebase, I'm going to take my contributions elsewhere.
I'll fork corosync, and within one month I'll be so far diverged from this version of corosync that it'll be nearly impossible for me to merge code from ""upstream"" into my code base. At that point, even if I were interested in contributing code back to you, I probably couldn't.
Just look at the handful of pull requests you rejected from me today. Combined they're something around 8 thousand lines of code, right? That's not even half of all the changes I have in my local git repository. I've been very careful to keep my local branches specific to a given type of refactoring, separated down to the smallest cohesive change with as little overlap as possible.
I'm doing my development that way specifically to make it easier to submit pull requests. I would be able to develop faster, and improve the things I want to improve on my terms if I stopped caring about submitting things to ""upstream"". But again, if I do that, it hurts me and it hurts corosync, because I'll be diverged by 20 thousand lines of code in less than a week. Corosync has 57059 lines of C code right now (according to sloccount), so that'd represent about a 33% departure. Hard to share when there's that much of a difference.
Of course, it took 6 months for my C99 pull request to be merged, so this particular pull request was sitting waiting in my local repository for half a year. Maybe it was too much for me to get my hopes up that corosync would appreciate a contribution that brought it kicking and screaming out of the 80's. I did have to ""infect"" both kronosnet and libqb with C99 before corosync adopted the same change after all.",True,{}
corosync/corosync,https://github.com/corosync/corosync,211,2017-05-23T23:17:34Z,2017-05-24T06:29:20Z,2017-05-25T16:52:03Z,CLOSED,False,276,310,4,https://github.com/jonesmz,Keep variable declarations close to where the variable is used,1,[],https://github.com/corosync/corosync/pull/211,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/211#issuecomment-303937475,"Now that C99 support is turned on, we can start taking advantage of basic code cleanliness features that it affords, such as sane variable lifetime rules.
The code changes in this pull request modify several functions such that instead of declaring all variables at the top of the function, the variable is instead declare close to where it's used. Many of the variable declarations that were moved were refactored in such a way that the variable is now assigned a value immediately, instead of being given some dummy value and then given a new value later.","You still don't understand what is problem with your patches. It's not about using/not using bool/top of the function definition. It's really about that your patch changes A LOT of the code for no good reason. You are not fixing bugs. Actually with hdb patch you've introduced a lot of bugs which I had to fix. I don't have any reason to believe you are testing your patches.
And it's really your free will to use contribution power wherever you want.
And of course you can fork corosync. It's open source. If it's going to become better alternative of corosync and corosync dies, good, that's evolution, that's the essence of the open source.
Changes fixing real problems are more than welcomed. Huge (hard to review) changes with no good reason is simply no go.
Last 4/5 changes you've sent was exactly like that. Huge, super hard to review so with huge risk to introduce bug with no good reason.",True,{}
corosync/corosync,https://github.com/corosync/corosync,211,2017-05-23T23:17:34Z,2017-05-24T06:29:20Z,2017-05-25T16:52:03Z,CLOSED,False,276,310,4,https://github.com/jonesmz,Keep variable declarations close to where the variable is used,1,[],https://github.com/corosync/corosync/pull/211,https://github.com/jonesmz,5,https://github.com/corosync/corosync/pull/211#issuecomment-304061440,"Now that C99 support is turned on, we can start taking advantage of basic code cleanliness features that it affords, such as sane variable lifetime rules.
The code changes in this pull request modify several functions such that instead of declaring all variables at the top of the function, the variable is instead declare close to where it's used. Many of the variable declarations that were moved were refactored in such a way that the variable is now assigned a value immediately, instead of being given some dummy value and then given a new value later.","You still don't understand what is problem with your patches. It's not about using/not using bool/top of the function definition. It's really about that your patch changes A LOT of the code for no good reason. You are not fixing bugs. Actually with hdb patch you've introduced a lot of bugs which I had to fix. I don't have any reason to believe you are testing your patches.

You're right, I don't understand, because you haven't explained until just now.
What hdb patch? As far as I recall I've never modified something called hdb. Are you using a colloquial name that I'm unfamiliar with, perhaps?
And make check isn't sufficient testing? Describe for me what an automated test needs to do, and I'll write it. Be very verbose, give me a lot of detail. Perhaps that'll forestall future contributions from introducing breaks.
From my perspective, I'm changing barely any code. The number of lines of code being changed in these pull request is very small compared to what I see in other projects, or at my job. Difference of opinion. I submitted a ten thousand line of code change at work just last week shrug.

And of course you can fork corosync. It's open source. If it's going to become better alternative of corosync and corosync dies, good, that's evolution, that's the essence of the open source.

I'd rather not - but I will if forced - you have all the knowledge of how this codebase works locked in your head and not in the code. My opinion is that at the moment I benefit more from contributing to corosync than from forking.

Changes fixing real problems are more than welcomed. Huge (hard to review) changes with no good reason is simply no go.

The ""good reason"" is to make the code easier to understand. Moving variable declarations around is simply the preliminary stuff.

Last 4/5 changes you've sent was exactly like that. Huge, super hard to review so with huge risk to introduce bug with no good reason.

If you think this patch or the others from this week are ""huge and hard to review"" maybe I shouldn't bother trying to send you anything else, because the larger scale refactoring(s) that I have planned will apparently never be considered valid.",True,{}
corosync/corosync,https://github.com/corosync/corosync,212,2017-05-24T00:03:34Z,2017-05-24T06:32:46Z,2017-05-25T17:03:21Z,CLOSED,False,185,211,22,https://github.com/jonesmz,Modify the return type of several functions from int to bool,1,[],https://github.com/corosync/corosync/pull/212,https://github.com/jonesmz,1,https://github.com/corosync/corosync/pull/212,"Using C99, we can return the new data type ""bool"" instead of relying on ""int"".
By changing the return types of functions where the only two possible returns are some indicator of success, and some indicator of failure to bool, we can drastically decrease the cognitive load on developers reading and trying to understand the code.
Instead of looking at a function and seeing ""int some_function(...)"", and wondering ""Wow, I have no idea what the possible values that this can return are. Is it some kind of size? A specific list of possibilities? Perhaps a 32-bit pointer that hasn't been updated to 64bit? Or true/false"", that same developer can see ""bool some_function()"" and know right away with absolutely no ambiguity, that this function can only ever return a single bit of information -- 0, or 1. Much easier to understand.
This pull request will refactor a small handful of functions in corosync to use bool.","Using C99, we can return the new data type ""bool"" instead of relying on ""int"".
By changing the return types of functions where the only two possible returns are some indicator of success, and some indicator of failure to bool, we can drastically decrease the cognitive load on developers reading and trying to understand the code.
Instead of looking at a function and seeing ""int some_function(...)"", and wondering ""Wow, I have no idea what the possible values that this can return are. Is it some kind of size? A specific list of possibilities? Perhaps a 32-bit pointer that hasn't been updated to 64bit? Or true/false"", that same developer can see ""bool some_function()"" and know right away with absolutely no ambiguity, that this function can only ever return a single bit of information -- 0, or 1. Much easier to understand.
This pull request will refactor a small handful of functions in corosync to use bool.",True,{}
corosync/corosync,https://github.com/corosync/corosync,212,2017-05-24T00:03:34Z,2017-05-24T06:32:46Z,2017-05-25T17:03:21Z,CLOSED,False,185,211,22,https://github.com/jonesmz,Modify the return type of several functions from int to bool,1,[],https://github.com/corosync/corosync/pull/212,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/212#issuecomment-303630767,"Using C99, we can return the new data type ""bool"" instead of relying on ""int"".
By changing the return types of functions where the only two possible returns are some indicator of success, and some indicator of failure to bool, we can drastically decrease the cognitive load on developers reading and trying to understand the code.
Instead of looking at a function and seeing ""int some_function(...)"", and wondering ""Wow, I have no idea what the possible values that this can return are. Is it some kind of size? A specific list of possibilities? Perhaps a 32-bit pointer that hasn't been updated to 64bit? Or true/false"", that same developer can see ""bool some_function()"" and know right away with absolutely no ambiguity, that this function can only ever return a single bit of information -- 0, or 1. Much easier to understand.
This pull request will refactor a small handful of functions in corosync to use bool.",The fact that c99 supports bool doesn't mean it has to be used. int is usually better.,True,{}
corosync/corosync,https://github.com/corosync/corosync,212,2017-05-24T00:03:34Z,2017-05-24T06:32:46Z,2017-05-25T17:03:21Z,CLOSED,False,185,211,22,https://github.com/jonesmz,Modify the return type of several functions from int to bool,1,[],https://github.com/corosync/corosync/pull/212,https://github.com/jonesmz,3,https://github.com/corosync/corosync/pull/212#issuecomment-303787680,"Using C99, we can return the new data type ""bool"" instead of relying on ""int"".
By changing the return types of functions where the only two possible returns are some indicator of success, and some indicator of failure to bool, we can drastically decrease the cognitive load on developers reading and trying to understand the code.
Instead of looking at a function and seeing ""int some_function(...)"", and wondering ""Wow, I have no idea what the possible values that this can return are. Is it some kind of size? A specific list of possibilities? Perhaps a 32-bit pointer that hasn't been updated to 64bit? Or true/false"", that same developer can see ""bool some_function()"" and know right away with absolutely no ambiguity, that this function can only ever return a single bit of information -- 0, or 1. Much easier to understand.
This pull request will refactor a small handful of functions in corosync to use bool.","Seriously dude?
Bool is absolutely better than int when trying to communicate ""success"" or ""failure"". What are your reasons that int is better? You are literally the only person to have ever expressed that belief to me, ever.
Maybe try to update your coding style to be only 19 years out of date, instead of 28 years?
@chrissie-c Can I get a second opinion here?",True,{}
corosync/corosync,https://github.com/corosync/corosync,212,2017-05-24T00:03:34Z,2017-05-24T06:32:46Z,2017-05-25T17:03:21Z,CLOSED,False,185,211,22,https://github.com/jonesmz,Modify the return type of several functions from int to bool,1,[],https://github.com/corosync/corosync/pull/212,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/212#issuecomment-303939588,"Using C99, we can return the new data type ""bool"" instead of relying on ""int"".
By changing the return types of functions where the only two possible returns are some indicator of success, and some indicator of failure to bool, we can drastically decrease the cognitive load on developers reading and trying to understand the code.
Instead of looking at a function and seeing ""int some_function(...)"", and wondering ""Wow, I have no idea what the possible values that this can return are. Is it some kind of size? A specific list of possibilities? Perhaps a 32-bit pointer that hasn't been updated to 64bit? Or true/false"", that same developer can see ""bool some_function()"" and know right away with absolutely no ambiguity, that this function can only ever return a single bit of information -- 0, or 1. Much easier to understand.
This pull request will refactor a small handful of functions in corosync to use bool.","Int is usually better because functions are usually not returning just true/false. They usually return true/false/error. That's reason why most of the languages have exceptions.
And your patch is again as usual. Huge change, no improvements, no bug fix, hard to review, risk to introduce error too high.",True,{}
corosync/corosync,https://github.com/corosync/corosync,212,2017-05-24T00:03:34Z,2017-05-24T06:32:46Z,2017-05-25T17:03:21Z,CLOSED,False,185,211,22,https://github.com/jonesmz,Modify the return type of several functions from int to bool,1,[],https://github.com/corosync/corosync/pull/212,https://github.com/chrissie-c,5,https://github.com/corosync/corosync/pull/212#issuecomment-303940182,"Using C99, we can return the new data type ""bool"" instead of relying on ""int"".
By changing the return types of functions where the only two possible returns are some indicator of success, and some indicator of failure to bool, we can drastically decrease the cognitive load on developers reading and trying to understand the code.
Instead of looking at a function and seeing ""int some_function(...)"", and wondering ""Wow, I have no idea what the possible values that this can return are. Is it some kind of size? A specific list of possibilities? Perhaps a 32-bit pointer that hasn't been updated to 64bit? Or true/false"", that same developer can see ""bool some_function()"" and know right away with absolutely no ambiguity, that this function can only ever return a single bit of information -- 0, or 1. Much easier to understand.
This pull request will refactor a small handful of functions in corosync to use bool.","I'm in favour of using bool where appropriate (ie a function really just does return true/false - which isn't always the case). But I'm not in favour of huge patches that change things as a huge block just for the sake of style. That's just asking for hard to find bugs, not fixing them.",True,{}
corosync/corosync,https://github.com/corosync/corosync,212,2017-05-24T00:03:34Z,2017-05-24T06:32:46Z,2017-05-25T17:03:21Z,CLOSED,False,185,211,22,https://github.com/jonesmz,Modify the return type of several functions from int to bool,1,[],https://github.com/corosync/corosync/pull/212,https://github.com/jonesmz,6,https://github.com/corosync/corosync/pull/212#issuecomment-304061845,"Using C99, we can return the new data type ""bool"" instead of relying on ""int"".
By changing the return types of functions where the only two possible returns are some indicator of success, and some indicator of failure to bool, we can drastically decrease the cognitive load on developers reading and trying to understand the code.
Instead of looking at a function and seeing ""int some_function(...)"", and wondering ""Wow, I have no idea what the possible values that this can return are. Is it some kind of size? A specific list of possibilities? Perhaps a 32-bit pointer that hasn't been updated to 64bit? Or true/false"", that same developer can see ""bool some_function()"" and know right away with absolutely no ambiguity, that this function can only ever return a single bit of information -- 0, or 1. Much easier to understand.
This pull request will refactor a small handful of functions in corosync to use bool.","Int is usually better because functions are usually not returning just true/false. They usually return true/false/error. That's reason why most of the languages have exceptions.

That doesn't make int better. That makes enum better.
I can change the patch to use enums instead, would that be more to your liking?

And your patch is again as usual. Huge change, no improvements, no bug fix, hard to review, risk to introduce error too high.

How, exactly, do you propose I change the return type of a function typedef, without also changing the places where it's used?
A 200 line change is minuscule...
Whats your size limit?
+100 lines, -100 lines?
+50/-50?
Give me something actionable here that isn't ""Rejected, too huge"".",True,{}
corosync/corosync,https://github.com/corosync/corosync,213,2017-05-24T00:50:41Z,2017-05-24T06:38:05Z,2017-05-25T16:39:45Z,CLOSED,False,1091,1162,19,https://github.com/jonesmz,Code formatting for test apps,1,[],https://github.com/corosync/corosync/pull/213,https://github.com/jonesmz,1,https://github.com/corosync/corosync/pull/213,"Using clang format, and some careful hand editing of the result, reformat the code files in test/ to be more consistent with the rest of the project","Using clang format, and some careful hand editing of the result, reformat the code files in test/ to be more consistent with the rest of the project",True,{}
corosync/corosync,https://github.com/corosync/corosync,213,2017-05-24T00:50:41Z,2017-05-24T06:38:05Z,2017-05-25T16:39:45Z,CLOSED,False,1091,1162,19,https://github.com/jonesmz,Code formatting for test apps,1,[],https://github.com/corosync/corosync/pull/213,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/213#issuecomment-303631682,"Using clang format, and some careful hand editing of the result, reformat the code files in test/ to be more consistent with the rest of the project",I don't really see too much improvements and some of the code looks more ugly after this patch (like testsam).,True,{}
corosync/corosync,https://github.com/corosync/corosync,213,2017-05-24T00:50:41Z,2017-05-24T06:38:05Z,2017-05-25T16:39:45Z,CLOSED,False,1091,1162,19,https://github.com/jonesmz,Code formatting for test apps,1,[],https://github.com/corosync/corosync/pull/213,https://github.com/jonesmz,3,https://github.com/corosync/corosync/pull/213#issuecomment-303788141,"Using clang format, and some careful hand editing of the result, reformat the code files in test/ to be more consistent with the rest of the project","This is literally the .clang-format file that you told me that you would accept in another patch.
Why don't you tell me EXACTLY which formatting options you would like to see, instead of rejecting the pull request out of hand?
Or at the very least, tell me which lines of code you object to.",True,{}
corosync/corosync,https://github.com/corosync/corosync,213,2017-05-24T00:50:41Z,2017-05-24T06:38:05Z,2017-05-25T16:39:45Z,CLOSED,False,1091,1162,19,https://github.com/jonesmz,Code formatting for test apps,1,[],https://github.com/corosync/corosync/pull/213,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/213#issuecomment-303936252,"Using clang format, and some careful hand editing of the result, reformat the code files in test/ to be more consistent with the rest of the project","+1,091 −1,162 lines of changed code is really not .clang-format patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,213,2017-05-24T00:50:41Z,2017-05-24T06:38:05Z,2017-05-25T16:39:45Z,CLOSED,False,1091,1162,19,https://github.com/jonesmz,Code formatting for test apps,1,[],https://github.com/corosync/corosync/pull/213,https://github.com/jonesmz,5,https://github.com/corosync/corosync/pull/213#issuecomment-304058201,"Using clang format, and some careful hand editing of the result, reformat the code files in test/ to be more consistent with the rest of the project","Perhaps I should have been more careful with my wording.
It's the .clang-format file from other pull requests without modification, and it's result when applied to the test applications (with some hand editing where it fell flat).",True,{}
corosync/corosync,https://github.com/corosync/corosync,213,2017-05-24T00:50:41Z,2017-05-24T06:38:05Z,2017-05-25T16:39:45Z,CLOSED,False,1091,1162,19,https://github.com/jonesmz,Code formatting for test apps,1,[],https://github.com/corosync/corosync/pull/213,https://github.com/jonesmz,6,https://github.com/corosync/corosync/pull/213#issuecomment-304058265,"Using clang format, and some careful hand editing of the result, reformat the code files in test/ to be more consistent with the rest of the project",What formatting changes do you object to?,True,{}
corosync/corosync,https://github.com/corosync/corosync,214,2017-05-25T10:32:06Z,2017-05-25T13:56:12Z,2017-05-25T13:56:12Z,CLOSED,False,51,28,1,https://github.com/chrissie-c,cpghum: add interim RTTs & tidy machine-readble output,2,[],https://github.com/corosync/corosync/pull/214,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/214,"Add interim RTT printouts for flood testing (so we get individual RTT stats for each size of packet).
Also remove spaces from the machine-readable out as machines don't need spaces","Add interim RTT printouts for flood testing (so we get individual RTT stats for each size of packet).
Also remove spaces from the machine-readable out as machines don't need spaces",True,{}
corosync/corosync,https://github.com/corosync/corosync,214,2017-05-25T10:32:06Z,2017-05-25T13:56:12Z,2017-05-25T13:56:12Z,CLOSED,False,51,28,1,https://github.com/chrissie-c,cpghum: add interim RTTs & tidy machine-readble output,2,[],https://github.com/corosync/corosync/pull/214,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/214#issuecomment-304016084,"Add interim RTT printouts for flood testing (so we get individual RTT stats for each size of packet).
Also remove spaces from the machine-readable out as machines don't need spaces",@chrissie-c Ack and merged as 57c4086 and efef3a9,True,{}
corosync/corosync,https://github.com/corosync/corosync,215,2017-05-25T17:47:01Z,2017-05-29T15:24:57Z,2017-05-29T15:25:15Z,CLOSED,False,3,5,1,https://github.com/jonesmz,Change the return type of a function to void,1,[],https://github.com/corosync/corosync/pull/215,https://github.com/jonesmz,1,https://github.com/corosync/corosync/pull/215,The return value of votequorum_exec_send_reconfigure is always ignored. Change the return type to void.,The return value of votequorum_exec_send_reconfigure is always ignored. Change the return type to void.,True,{}
corosync/corosync,https://github.com/corosync/corosync,215,2017-05-25T17:47:01Z,2017-05-29T15:24:57Z,2017-05-29T15:25:15Z,CLOSED,False,3,5,1,https://github.com/jonesmz,Change the return type of a function to void,1,[],https://github.com/corosync/corosync/pull/215,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/215#issuecomment-304205585,The return value of votequorum_exec_send_reconfigure is always ignored. Change the return type to void.,"Patch is definitively wrong because totem_mcast can return error and to mask it is not ideal. But it's definitively nice catch.
@chrissie-c Can you please take a look to the code and fix caller of votequorum_exec_send_reconfigure to ether more explicitly ignore return error (probably the case for votequorum_refresh_config) or correctly handle error (votequorum_exec_send_reconfigure).",True,{}
corosync/corosync,https://github.com/corosync/corosync,215,2017-05-25T17:47:01Z,2017-05-29T15:24:57Z,2017-05-29T15:25:15Z,CLOSED,False,3,5,1,https://github.com/jonesmz,Change the return type of a function to void,1,[],https://github.com/corosync/corosync/pull/215,https://github.com/jonesmz,3,https://github.com/corosync/corosync/pull/215#issuecomment-304208055,The return value of votequorum_exec_send_reconfigure is always ignored. Change the return type to void.,"As you will see in #212
totem_mcast does not return an error. It only ever returns 0, or -1.
It may be the case that there exists third party code that provide their own function for totem_mcast, but that's not visible in the corosync codebase, and totem_mcast isn't documented in any way so third party code is automatically treading on dangerous ground to use the function.",True,{}
corosync/corosync,https://github.com/corosync/corosync,215,2017-05-25T17:47:01Z,2017-05-29T15:24:57Z,2017-05-29T15:25:15Z,CLOSED,False,3,5,1,https://github.com/jonesmz,Change the return type of a function to void,1,[],https://github.com/corosync/corosync/pull/215,https://github.com/chrissie-c,4,https://github.com/corosync/corosync/pull/215#issuecomment-304210880,The return value of votequorum_exec_send_reconfigure is always ignored. Change the return type to void.,"There are places where the return code should be acted on and places where it should just be logged. It certainly shouldn't be ignored. I'll look at it, thanks.",True,{}
corosync/corosync,https://github.com/corosync/corosync,215,2017-05-25T17:47:01Z,2017-05-29T15:24:57Z,2017-05-29T15:25:15Z,CLOSED,False,3,5,1,https://github.com/jonesmz,Change the return type of a function to void,1,[],https://github.com/corosync/corosync/pull/215,https://github.com/chrissie-c,5,https://github.com/corosync/corosync/pull/215#issuecomment-304277722,The return value of votequorum_exec_send_reconfigure is always ignored. Change the return type to void.,PR #220 reports the return codes rather than just throwing them away,True,{}
corosync/corosync,https://github.com/corosync/corosync,215,2017-05-25T17:47:01Z,2017-05-29T15:24:57Z,2017-05-29T15:25:15Z,CLOSED,False,3,5,1,https://github.com/jonesmz,Change the return type of a function to void,1,[],https://github.com/corosync/corosync/pull/215,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/215#issuecomment-304686398,The return value of votequorum_exec_send_reconfigure is always ignored. Change the return type to void.,Closing in favor of already merged PR #220,True,{}
corosync/corosync,https://github.com/corosync/corosync,216,2017-05-25T18:21:11Z,2018-01-12T02:20:41Z,2018-01-12T02:20:41Z,CLOSED,False,8,9,3,https://github.com/jonesmz,Convert totemsrp_mcast from returning int to returning bool. ,1,[],https://github.com/corosync/corosync/pull/216,https://github.com/jonesmz,1,https://github.com/corosync/corosync/pull/216,It only has two possible return values.,It only has two possible return values.,True,{}
corosync/corosync,https://github.com/corosync/corosync,216,2017-05-25T18:21:11Z,2018-01-12T02:20:41Z,2018-01-12T02:20:41Z,CLOSED,False,8,9,3,https://github.com/jonesmz,Convert totemsrp_mcast from returning int to returning bool. ,1,[],https://github.com/corosync/corosync/pull/216,https://github.com/jonesmz,2,https://github.com/corosync/corosync/pull/216#issuecomment-357124212,It only has two possible return values.,"It's been 8 months since I opened this PR.
You've completely ignored it.
If it wasn't clear by my lack of activity, I'm officially no longer interested in or planing to participate in corosync development.
Best of luck.",True,{}
corosync/corosync,https://github.com/corosync/corosync,217,2017-05-25T18:29:51Z,2017-05-29T15:24:04Z,2017-05-29T15:24:04Z,CLOSED,False,2,2,2,https://github.com/jonesmz,Use size_t for corosync_service_engine.private_data_size. ,1,[],https://github.com/corosync/corosync/pull/217,https://github.com/jonesmz,1,https://github.com/corosync/corosync/pull/217,Unsigned int and size_t represent two different concepts,Unsigned int and size_t represent two different concepts,True,{}
corosync/corosync,https://github.com/corosync/corosync,217,2017-05-25T18:29:51Z,2017-05-29T15:24:04Z,2017-05-29T15:24:04Z,CLOSED,False,2,2,2,https://github.com/jonesmz,Use size_t for corosync_service_engine.private_data_size. ,1,[],https://github.com/corosync/corosync/pull/217,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/217#issuecomment-304686232,Unsigned int and size_t represent two different concepts,"Nice patch, ack and merged as afd97d7.",True,{}
corosync/corosync,https://github.com/corosync/corosync,218,2017-05-25T19:51:07Z,2018-01-12T02:20:56Z,2018-01-12T02:20:56Z,CLOSED,False,24,22,9,https://github.com/jonesmz,Convert the totem_mcast api callback from int to bool. ,1,[],https://github.com/corosync/corosync/pull/218,https://github.com/jonesmz,1,https://github.com/corosync/corosync/pull/218,Updates appropriate places where it's used to convert from bool to the previously used values,Updates appropriate places where it's used to convert from bool to the previously used values,True,{}
corosync/corosync,https://github.com/corosync/corosync,218,2017-05-25T19:51:07Z,2018-01-12T02:20:56Z,2018-01-12T02:20:56Z,CLOSED,False,24,22,9,https://github.com/jonesmz,Convert the totem_mcast api callback from int to bool. ,1,[],https://github.com/corosync/corosync/pull/218,https://github.com/jonesmz,2,https://github.com/corosync/corosync/pull/218#issuecomment-357124242,Updates appropriate places where it's used to convert from bool to the previously used values,"It's been 8 months since I opened this PR.
You've completely ignored it.
If it wasn't clear by my lack of activity, I'm officially no longer interested in or planing to participate in corosync development.
Best of luck.",True,{}
corosync/corosync,https://github.com/corosync/corosync,219,2017-05-25T20:09:48Z,2017-05-26T07:06:13Z,2017-05-30T14:28:42Z,CLOSED,False,26,48,7,https://github.com/jonesmz,Move the declaration of integer loop variables to the loop inside of …,1,[],https://github.com/corosync/corosync/pull/219,https://github.com/jonesmz,1,https://github.com/corosync/corosync/pull/219,…which they are used.,…which they are used.,True,{}
corosync/corosync,https://github.com/corosync/corosync,219,2017-05-25T20:09:48Z,2017-05-26T07:06:13Z,2017-05-30T14:28:42Z,CLOSED,False,26,48,7,https://github.com/jonesmz,Move the declaration of integer loop variables to the loop inside of …,1,[],https://github.com/corosync/corosync/pull/219,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/219#issuecomment-304208991,…which they are used.,I don't exactly understand how it makes code better + makes too hard to backport patches.,True,{}
corosync/corosync,https://github.com/corosync/corosync,219,2017-05-25T20:09:48Z,2017-05-26T07:06:13Z,2017-05-30T14:28:42Z,CLOSED,False,26,48,7,https://github.com/jonesmz,Move the declaration of integer loop variables to the loop inside of …,1,[],https://github.com/corosync/corosync/pull/219,https://github.com/jonesmz,3,https://github.com/corosync/corosync/pull/219#issuecomment-304209595,…which they are used.,"...?
It makes the code better by not forcing developers to scroll up 50 lines to find out what the loop variable is defined as.
Being able to declare variables inside of for-loops is almost THE defining feature of C99.
How could you not want to incorporate this?",True,{}
corosync/corosync,https://github.com/corosync/corosync,219,2017-05-25T20:09:48Z,2017-05-26T07:06:13Z,2017-05-30T14:28:42Z,CLOSED,False,26,48,7,https://github.com/jonesmz,Move the declaration of integer loop variables to the loop inside of …,1,[],https://github.com/corosync/corosync/pull/219,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/219#issuecomment-304214662,…which they are used.,"Simply because it is chaining code just for changing code. If you use this in the new code or you do fix of real problem and use this style of declaration, then why not.",True,{}
corosync/corosync,https://github.com/corosync/corosync,219,2017-05-25T20:09:48Z,2017-05-26T07:06:13Z,2017-05-30T14:28:42Z,CLOSED,False,26,48,7,https://github.com/jonesmz,Move the declaration of integer loop variables to the loop inside of …,1,[],https://github.com/corosync/corosync/pull/219,https://github.com/jonesmz,5,https://github.com/corosync/corosync/pull/219#issuecomment-304215834,…which they are used.,"It's not changing code for the sake of changing code.
It's changing code so that it's not migraine inducing to read.
It's changing code so that my next pull request can update the variable types to actually match what they're being compared against. currently about half of the loop variables have signed/unsigned mismatch, or data size mismatch. THAT is a bug, even if it's not one that's being exposed yet.
A tidy codebase makes bugs easy to spot. This codebase hides many bugs, it is not tidy.
I limited the changes in this pull request to ONLY moving the location of the declaration of the variable.
I also limited it to below 50 lines of code changed.
It should be trivially simple to review the code and confirm as not introducing bugs, and it makes the functions easier to understand.
What other justification is needed?",True,{}
corosync/corosync,https://github.com/corosync/corosync,219,2017-05-25T20:09:48Z,2017-05-26T07:06:13Z,2017-05-30T14:28:42Z,CLOSED,False,26,48,7,https://github.com/jonesmz,Move the declaration of integer loop variables to the loop inside of …,1,[],https://github.com/corosync/corosync/pull/219,https://github.com/chrissie-c,6,https://github.com/corosync/corosync/pull/219#issuecomment-304216722,…which they are used.,"Your work is not unappreciated, but let me explain why large stylistic code patches are not usually welcomed. And this is not just in corosync, I think you'll find plenty of open-source projects (though perhaps not all) feel similarly.
corosync is a complex codebase maintained by a very small core team. We have different branches of that code in different projects. There are patches in RHEL, and patches in Fedora as well as the upstream repo. If a large change is made to that codebase that changes no functionality but just moves things around, then any actual fixes that happen after those changes cannot be backported to other versions without manually rewriting the code. That doubles or triples the amount of work that needs to be done for every important change.
Also, ""it's good style"" or ""it's the whizzy new thing in C"" isn't a good enough reason change hundreds of lines of code. Firstly ""good style"" is subjective, what you might like, others might not - we've all come from different backgrounds and customs. Secondly, new C features are great but using them because they are there is not reason enough.
Feel free to use later C features in new code or while fixing bugs or adding new features in old code, but retrospectively changing a lot of old code is just asking for new bugs to be introduced, especially if you don't fully understand the code you are changing. Some of the code in corosync is very subtle (and yes, not well documented) and a global search and replace is almost certainly going to end badly.
There are new features we want to implement, bugs we need to fix (and you highlighted some of those, thank you). But those must take priority of simply moving code around for the sake of it thereby defamiliarising us with it. If you want to make the code clearer, then please feel free to add comments or write documentation, those will be more useful in the long term and cause almost zero upheaval for all concerned.",True,{}
corosync/corosync,https://github.com/corosync/corosync,219,2017-05-25T20:09:48Z,2017-05-26T07:06:13Z,2017-05-30T14:28:42Z,CLOSED,False,26,48,7,https://github.com/jonesmz,Move the declaration of integer loop variables to the loop inside of …,1,[],https://github.com/corosync/corosync/pull/219,https://github.com/jonesmz,7,https://github.com/corosync/corosync/pull/219#issuecomment-304222455,…which they are used.,"Declaring variables where they are used isn't a ""new"" feature. It's approaching 20 years old. There are people writing code, in C, professionally, that are younger than C99. Heck, there are probably a few handfuls of prodigy school kids younger than C11 using that for some school projects at this point .
You consider 50 lines of code to be a large change? I said in a different pull request that I submitted over 10 thousand lines of code last week at work. Today, I submitted 6 thousand. Yesterday it was 3. 50 lines seems like nothing in my opinion, and I'm having a really hard time understanding where there's room for disagreement on that?
Your opinion that documentation and/or code comments cause no upheaval directly contradicts this commit dfae95c
Which is over a thousand and a half lines of code. If that didn't break one of the patches you refer to, I don't know what possible could have. Seriously, if you have patches that are breaking because of a for-loop being changed, send them to me and I will update them for you.
You both work for RedHat. Merge those patches into the main project if back porting changes is such a big deal.
As I said already in this comment thread, this pull request isn't INTENDED to be a style change.
I was simply trying to make a change that was small enough that would be accepted.
Do I need to go smaller? 5 lines at a time? I'm fine with that so long as they'll be merged faster than 6 months at a time.
Nearly half of the for-loops changed by this pull request use the wrong loop variable type. unsigned versus signed, int vs size_t. These mismatches are things that C doesn't report as warnings, but which can and probably do hide bugs. I've seen a signed/unsigned mismatch cause data corruption in plenty of other projects that I certainly want to see it fixed.
Since the typical response that I get when I open a pull request is ""change too big, hard to review"" I cut everything but moving the variable into the for loop out, to make it as dead simple as I possibly could to review. My intention was to open a second pull request within hours of this one being merged that fixed the types of the loop variables to match what they were looping over.",True,{}
corosync/corosync,https://github.com/corosync/corosync,219,2017-05-25T20:09:48Z,2017-05-26T07:06:13Z,2017-05-30T14:28:42Z,CLOSED,False,26,48,7,https://github.com/jonesmz,Move the declaration of integer loop variables to the loop inside of …,1,[],https://github.com/corosync/corosync/pull/219,https://github.com/jnpkrn,8,https://github.com/corosync/corosync/pull/219#issuecomment-304890371,…which they are used.,"I'd like to defend @jonesmz a bit, since it's a bit absurd that arguments
for not changing code just for the sake of not changing the code plus the
counterarguments highly excess the line count of the actual changes, which
were moreover said to be justified by normalizing the integer types in
the comparison (whereas currently we have int vs. size_t, for instance)
in a subsequent changeset, for which this one is considered a prerequisite
by the author.",True,{}
corosync/corosync,https://github.com/corosync/corosync,219,2017-05-25T20:09:48Z,2017-05-26T07:06:13Z,2017-05-30T14:28:42Z,CLOSED,False,26,48,7,https://github.com/jonesmz,Move the declaration of integer loop variables to the loop inside of …,1,[],https://github.com/corosync/corosync/pull/219,https://github.com/jnpkrn,9,https://github.com/corosync/corosync/pull/219#issuecomment-304895936,…which they are used.,"BTW. this unwillingness to absorb changes is mostly why we don't have
a schema driven autogenerating of various conceptually derived pieces
(man page, for instance) regarding the configuration, and it's 4 years
pass the original proposal:
http://lists.corosync.org/pipermail/discuss/2013-February/002366.html
https://github.com/corosync/corosync/commits/topic-relax-conf-gen
Instead, I keep maintaining a separate copy of such a schema at (partly
related project):
https://pagure.io/clufter/blob/master/f/formats/corosync/corosync.rng",True,{}
corosync/corosync,https://github.com/corosync/corosync,220,2017-05-26T13:04:49Z,2017-05-26T14:19:32Z,2017-05-26T14:19:32Z,CLOSED,False,20,10,1,https://github.com/chrissie-c,votequorum: Report errors from votequorum_exec_send_reconfigure,2,[],https://github.com/corosync/corosync/pull/220,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/220,"If votequorum_exec_send_reconfigure() returns an error (ie the
packet could not be sent) then we should either return it to the
sender (for a library call) or, for an internal call, log it.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","If votequorum_exec_send_reconfigure() returns an error (ie the
packet could not be sent) then we should either return it to the
sender (for a library call) or, for an internal call, log it.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,220,2017-05-26T13:04:49Z,2017-05-26T14:19:32Z,2017-05-26T14:19:32Z,CLOSED,False,20,10,1,https://github.com/chrissie-c,votequorum: Report errors from votequorum_exec_send_reconfigure,2,[],https://github.com/corosync/corosync/pull/220,https://github.com/chrissie-c,2,https://github.com/corosync/corosync/pull/220#issuecomment-304283380,"If votequorum_exec_send_reconfigure() returns an error (ie the
packet could not be sent) then we should either return it to the
sender (for a library call) or, for an internal call, log it.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",Good point. updated.,True,{}
corosync/corosync,https://github.com/corosync/corosync,220,2017-05-26T13:04:49Z,2017-05-26T14:19:32Z,2017-05-26T14:19:32Z,CLOSED,False,20,10,1,https://github.com/chrissie-c,votequorum: Report errors from votequorum_exec_send_reconfigure,2,[],https://github.com/corosync/corosync/pull/220,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/220#issuecomment-304294423,"If votequorum_exec_send_reconfigure() returns an error (ie the
packet could not be sent) then we should either return it to the
sender (for a library call) or, for an internal call, log it.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","Nice patch, Squashed and merged as 5b1df51.",True,{}
corosync/corosync,https://github.com/corosync/corosync,222,2017-05-26T16:45:54Z,2018-01-12T02:08:19Z,2018-01-12T02:08:19Z,CLOSED,False,2,0,1,https://github.com/jonesmz,Enable warnings on sign-conversion and difference is signedness when …,1,[],https://github.com/corosync/corosync/pull/222,https://github.com/jonesmz,1,https://github.com/corosync/corosync/pull/222,…doing comparisons,…doing comparisons,True,{}
corosync/corosync,https://github.com/corosync/corosync,222,2017-05-26T16:45:54Z,2018-01-12T02:08:19Z,2018-01-12T02:08:19Z,CLOSED,False,2,0,1,https://github.com/jonesmz,Enable warnings on sign-conversion and difference is signedness when …,1,[],https://github.com/corosync/corosync/pull/222,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/222#issuecomment-304690118,…doing comparisons,"This patch is good, but result of applying of it not that great. Do you have patches to fix generated warnings somewhere in your git (just to make sure to not duplicate work)?",True,{}
corosync/corosync,https://github.com/corosync/corosync,222,2017-05-26T16:45:54Z,2018-01-12T02:08:19Z,2018-01-12T02:08:19Z,CLOSED,False,2,0,1,https://github.com/jonesmz,Enable warnings on sign-conversion and difference is signedness when …,1,[],https://github.com/corosync/corosync/pull/222,https://github.com/jonesmz,3,https://github.com/corosync/corosync/pull/222#issuecomment-304693296,…doing comparisons,"As you'll recall my explanation as to the fixes for these warnings -- pull request #219 was one of my prerequisites for fixing the signed/unsigned warnings introduced by enabling the gcc warning.
Since you decided that you'd rather not have the preliminary change, I decided not to bother fixing the warnings unhidden by turning these options on in the build.
If you'd like to change your mind on merging #219, I'd be happy to amend this pull request (#222) to include at least the majority of fixes for the warnings that it unhides.",True,{}
corosync/corosync,https://github.com/corosync/corosync,222,2017-05-26T16:45:54Z,2018-01-12T02:08:19Z,2018-01-12T02:08:19Z,CLOSED,False,2,0,1,https://github.com/jonesmz,Enable warnings on sign-conversion and difference is signedness when …,1,[],https://github.com/corosync/corosync/pull/222,https://github.com/jonesmz,4,https://github.com/corosync/corosync/pull/222#issuecomment-309237618,…doing comparisons,"Is there a problem with applying this patch?
Please note that both libqb and kronosnet now have equivalent changes to their compiler warning list.",True,{}
corosync/corosync,https://github.com/corosync/corosync,222,2017-05-26T16:45:54Z,2018-01-12T02:08:19Z,2018-01-12T02:08:19Z,CLOSED,False,2,0,1,https://github.com/jonesmz,Enable warnings on sign-conversion and difference is signedness when …,1,[],https://github.com/corosync/corosync/pull/222,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/222#issuecomment-309353304,…doing comparisons,Applying patch makes corosync compilation too noisy -> first it's needed to fix the warnings. Fixing the warnings are usually not hard but it's lot of work.,True,{}
corosync/corosync,https://github.com/corosync/corosync,222,2017-05-26T16:45:54Z,2018-01-12T02:08:19Z,2018-01-12T02:08:19Z,CLOSED,False,2,0,1,https://github.com/jonesmz,Enable warnings on sign-conversion and difference is signedness when …,1,[],https://github.com/corosync/corosync/pull/222,https://github.com/jonesmz,6,https://github.com/corosync/corosync/pull/222#issuecomment-309454562,…doing comparisons,Why not apply the patch so that potential contributors know what to fix?,True,{}
corosync/corosync,https://github.com/corosync/corosync,222,2017-05-26T16:45:54Z,2018-01-12T02:08:19Z,2018-01-12T02:08:19Z,CLOSED,False,2,0,1,https://github.com/jonesmz,Enable warnings on sign-conversion and difference is signedness when …,1,[],https://github.com/corosync/corosync/pull/222,https://github.com/jonesmz,7,https://github.com/corosync/corosync/pull/222#issuecomment-357122410,…doing comparisons,"It's been 6+ months since I opened this PR.
You've left it open, with rational being that it makes the build output too noisy. I think that's a fabulously silly concept when the corosync codebase has so many fairly easy to fix bugs in it.
The compiler provides these warnings for a reason, after all.
If it wasn't clear by my lack of activity since I opened this pull request, I'm officially no longer interested in or planing to participate in corosync development.
Best of luck.",True,{}
corosync/corosync,https://github.com/corosync/corosync,224,2017-06-20T15:49:30Z,2017-06-23T09:50:16Z,2017-06-23T09:50:21Z,CLOSED,False,140,44,1,https://github.com/jfriesse,Make corosync work when FIPS mode is enabled,2,[],https://github.com/corosync/corosync/pull/224,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/224,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,224,2017-06-20T15:49:30Z,2017-06-23T09:50:16Z,2017-06-23T09:50:21Z,CLOSED,False,140,44,1,https://github.com/jfriesse,Make corosync work when FIPS mode is enabled,2,[],https://github.com/corosync/corosync/pull/224,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/224#issuecomment-310098067,,"Tescase:

3 nodes A,B,C
Node A was needle branch without FIPS patch and FIPS disabled
Node B was needle branch with FIPS patch and FIPS disabled
Node C was needle branch with FIPS patch and FIPS enabled

I've tested following combinations of encryption:

secauth: off
default config (-> secauth: on)
crypto_cipher: none, crypto_hash: md5
crypto_cipher: 3des, crypto_hash: md5
crypto_cipher: aes128, crypto_hash: md5
crypto_cipher: aes192, crypto_hash: md5
crypto_cipher: aes256, crypto_hash: md5
crypto_cipher: aes256, crypto_hash: sha256
crypto_cipher: aes256, crypto_hash: sha384
crypto_cipher: aes256, crypto_hash: sha512

After change of config and executing corosync I've let cpgverify run for a while.
All nodes were able to see each other without any problems.",True,{}
corosync/corosync,https://github.com/corosync/corosync,224,2017-06-20T15:49:30Z,2017-06-23T09:50:16Z,2017-06-23T09:50:21Z,CLOSED,False,140,44,1,https://github.com/jfriesse,Make corosync work when FIPS mode is enabled,2,[],https://github.com/corosync/corosync/pull/224,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/224#issuecomment-310623637,,Merged as a885868 and 5dadebd,True,{}
corosync/corosync,https://github.com/corosync/corosync,226,2017-06-29T02:04:52Z,2017-10-27T07:22:57Z,2017-10-27T07:22:57Z,CLOSED,False,329,91,2,https://github.com/liu4480,Fix interfacedown for udp and udpu,4,[],https://github.com/corosync/corosync/pull/226,https://github.com/liu4480,1,https://github.com/corosync/corosync/pull/226,"This is for udp transportation, I will later push another pr for udpu.","This is for udp transportation, I will later push another pr for udpu.",True,{}
corosync/corosync,https://github.com/corosync/corosync,226,2017-06-29T02:04:52Z,2017-10-27T07:22:57Z,2017-10-27T07:22:57Z,CLOSED,False,329,91,2,https://github.com/liu4480,Fix interfacedown for udp and udpu,4,[],https://github.com/corosync/corosync/pull/226,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/226#issuecomment-311862070,"This is for udp transportation, I will later push another pr for udpu.","@liu4480 Actually second patch shouldn't be needed because corosync is checking interfaces regularly. Also as we talked via IRC. UDPU is a lot more popular today, so udp only patch is not enough.
Anyway, please give me some time (around 1 week) to review and retest patch and I will let you know what problems I found and ideas how to possibly fix them.",True,{}
corosync/corosync,https://github.com/corosync/corosync,226,2017-06-29T02:04:52Z,2017-10-27T07:22:57Z,2017-10-27T07:22:57Z,CLOSED,False,329,91,2,https://github.com/liu4480,Fix interfacedown for udp and udpu,4,[],https://github.com/corosync/corosync/pull/226,https://github.com/liu4480,3,https://github.com/corosync/corosync/pull/226#issuecomment-311870465,"This is for udp transportation, I will later push another pr for udpu.","@jfriesse without the second patch, the node that execute ""ifconfig ethX down"" will not find the other node is offline, and so far I have found a phenomenon with the second patch that corosync will enter to gather state->commit state->recovery state->operational state every few second, it should relates with the second patch that calls timer_function_netif_check_timeout every few seconds.
I am also trying to fix the issue in udpu now. I send this pr because I want to know if you  have any suggestion about the patch for udp.",True,{}
corosync/corosync,https://github.com/corosync/corosync,226,2017-06-29T02:04:52Z,2017-10-27T07:22:57Z,2017-10-27T07:22:57Z,CLOSED,False,329,91,2,https://github.com/liu4480,Fix interfacedown for udp and udpu,4,[],https://github.com/corosync/corosync/pull/226,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/226#issuecomment-311872308,"This is for udp transportation, I will later push another pr for udpu.","@liu4480 gather/recovery/operation state loop doesn't sound good.
As I said, I will try to review/test patch and suggest fixes.",True,{}
corosync/corosync,https://github.com/corosync/corosync,226,2017-06-29T02:04:52Z,2017-10-27T07:22:57Z,2017-10-27T07:22:57Z,CLOSED,False,329,91,2,https://github.com/liu4480,Fix interfacedown for udp and udpu,4,[],https://github.com/corosync/corosync/pull/226,https://github.com/liu4480,5,https://github.com/corosync/corosync/pull/226#issuecomment-311907625,"This is for udp transportation, I will later push another pr for udpu.","@jfriesse , I just added a var use_local_sock to control the entrance of totemudp_iface_change_fn, which could avoid gather/recovery/operation state loop.",True,{}
corosync/corosync,https://github.com/corosync/corosync,226,2017-06-29T02:04:52Z,2017-10-27T07:22:57Z,2017-10-27T07:22:57Z,CLOSED,False,329,91,2,https://github.com/liu4480,Fix interfacedown for udp and udpu,4,[],https://github.com/corosync/corosync/pull/226,https://github.com/liu4480,6,https://github.com/corosync/corosync/pull/226#issuecomment-312182483,"This is for udp transportation, I will later push another pr for udpu.","I tried these patches on 2.4.2, both udp and udpu work in my cluster.",True,{}
corosync/corosync,https://github.com/corosync/corosync,226,2017-06-29T02:04:52Z,2017-10-27T07:22:57Z,2017-10-27T07:22:57Z,CLOSED,False,329,91,2,https://github.com/liu4480,Fix interfacedown for udp and udpu,4,[],https://github.com/corosync/corosync/pull/226,https://github.com/jfriesse,7,https://github.com/corosync/corosync/pull/226#issuecomment-319118938,"This is for udp transportation, I will later push another pr for udpu.",@liu4480 I've tested both patches and it was still working somehow weirdly so I've tried to fix original patch resulting in rewrite of some parts jfriesse@790794b . Can you please give it a try and report me when you find anything unusual?,True,{}
corosync/corosync,https://github.com/corosync/corosync,226,2017-06-29T02:04:52Z,2017-10-27T07:22:57Z,2017-10-27T07:22:57Z,CLOSED,False,329,91,2,https://github.com/liu4480,Fix interfacedown for udp and udpu,4,[],https://github.com/corosync/corosync/pull/226,https://github.com/liu4480,8,https://github.com/corosync/corosync/pull/226#issuecomment-339893966,"This is for udp transportation, I will later push another pr for udpu.","@jfriesse I work out a patch for udpu, and am testing it now. If the new patch could work, I will send a new PR next week.",True,{}
corosync/corosync,https://github.com/corosync/corosync,227,2017-06-30T15:47:52Z,2017-07-03T11:20:50Z,2017-07-03T11:20:55Z,CLOSED,False,142,61,5,https://github.com/jfriesse,Improve keygen,4,[],https://github.com/corosync/corosync/pull/227,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/227,Make keygen + crypto work again correctly without displaying wrong information. Also add support for arbitrary key length.,Make keygen + crypto work again correctly without displaying wrong information. Also add support for arbitrary key length.,True,{}
corosync/corosync,https://github.com/corosync/corosync,227,2017-06-30T15:47:52Z,2017-07-03T11:20:50Z,2017-07-03T11:20:55Z,CLOSED,False,142,61,5,https://github.com/jfriesse,Improve keygen,4,[],https://github.com/corosync/corosync/pull/227,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/227#issuecomment-312620152,Make keygen + crypto work again correctly without displaying wrong information. Also add support for arbitrary key length.,"Merged as cf18736, a67df8c, 0924b06, abc1fa5 and 84b37ef",True,{}
corosync/corosync,https://github.com/corosync/corosync,228,2017-07-07T16:02:01Z,2017-07-10T14:42:03Z,2017-07-10T14:53:37Z,CLOSED,False,73,20,2,https://github.com/jfriesse,main: Add option to set priority,1,[],https://github.com/corosync/corosync/pull/228,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/228,"Option -P takes numeric value with same meaning
as nice or values min / max, meaning maximal / minimal priority (so
minimal / maximal nice value).
Scheduler / priority setting is moved in code so it is now executed
after logsys is configured so errors are logged.
Setting maximal priority is also used as fallback when realtime
scheduling is requested and sched_setscheduler fails.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Option -P takes numeric value with same meaning
as nice or values min / max, meaning maximal / minimal priority (so
minimal / maximal nice value).
Scheduler / priority setting is moved in code so it is now executed
after logsys is configured so errors are logged.
Setting maximal priority is also used as fallback when realtime
scheduling is requested and sched_setscheduler fails.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,228,2017-07-07T16:02:01Z,2017-07-10T14:42:03Z,2017-07-10T14:53:37Z,CLOSED,False,73,20,2,https://github.com/jfriesse,main: Add option to set priority,1,[],https://github.com/corosync/corosync/pull/228,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/228#issuecomment-313723490,"Option -P takes numeric value with same meaning
as nice or values min / max, meaning maximal / minimal priority (so
minimal / maximal nice value).
Scheduler / priority setting is moved in code so it is now executed
after logsys is configured so errors are logged.
Setting maximal priority is also used as fallback when realtime
scheduling is requested and sched_setscheduler fails.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Of course I will backport the patch after review to master. It's also not perfect solution of ""unable to set sched_rr"" problem but I believe still better than nothing.",True,{}
corosync/corosync,https://github.com/corosync/corosync,228,2017-07-07T16:02:01Z,2017-07-10T14:42:03Z,2017-07-10T14:53:37Z,CLOSED,False,73,20,2,https://github.com/jfriesse,main: Add option to set priority,1,[],https://github.com/corosync/corosync/pull/228,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/228#issuecomment-313723620,"Option -P takes numeric value with same meaning
as nice or values min / max, meaning maximal / minimal priority (so
minimal / maximal nice value).
Scheduler / priority setting is moved in code so it is now executed
after logsys is configured so errors are logged.
Setting maximal priority is also used as fallback when realtime
scheduling is requested and sched_setscheduler fails.
Signed-off-by: Jan Friesse jfriesse@redhat.com","""Unit test"":
# cgcreate -g cpu:test
# cgset  -r cpu.rt_runtime_us=100000 test
# cgget  -r cpu.rt_runtime_us test
test:
cpu.rt_runtime_us: 100000

# cgexec -g cpu:test  corosync

# ps -T  -O cls,rtprio,pri,ni   `pidof corosync`
 3598  RR     99 139   - S ?        00:00:01 corosync
 3598  RR     99 139   - S ?        00:00:00 corosync

# killall corosync
# cgset  -r cpu.rt_runtime_us=0 test
# cgget  -r cpu.rt_runtime_us test
test:
cpu.rt_runtime_us: 0

# cgexec -g cpu:test  corosync
# ps -T  -O cls,rtprio,pri,ni   `pidof corosync`
  PID CLS RTPRIO PRI  NI S TTY          TIME COMMAND
 3672  TS      -  39 -20 S ?        00:00:00 corosync
 3672  TS      -  39 -20 S ?        00:00:00 corosync",True,{}
corosync/corosync,https://github.com/corosync/corosync,228,2017-07-07T16:02:01Z,2017-07-10T14:42:03Z,2017-07-10T14:53:37Z,CLOSED,False,73,20,2,https://github.com/jfriesse,main: Add option to set priority,1,[],https://github.com/corosync/corosync/pull/228,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/228#issuecomment-314127053,"Option -P takes numeric value with same meaning
as nice or values min / max, meaning maximal / minimal priority (so
minimal / maximal nice value).
Scheduler / priority setting is moved in code so it is now executed
after logsys is configured so errors are logged.
Setting maximal priority is also used as fallback when realtime
scheduling is requested and sched_setscheduler fails.
Signed-off-by: Jan Friesse jfriesse@redhat.com",Merged as 9627d73 / a008448,True,{}
corosync/corosync,https://github.com/corosync/corosync,229,2017-07-10T14:50:42Z,2017-07-17T08:21:44Z,2017-08-04T09:05:19Z,CLOSED,False,951,145,15,https://github.com/chrissie-c,cmap: Add knet stats map,3,[],https://github.com/corosync/corosync/pull/229,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/229,"Change cmap so it can use multiple different 'maps', and add an API call to change the current map.
Then add a 'stats' map that allows access to the multitude of knet and SRP statistics. These are generated (or rather requested from the subsystems) on-the-fly rather than constantly updating icmap.","Change cmap so it can use multiple different 'maps', and add an API call to change the current map.
Then add a 'stats' map that allows access to the multitude of knet and SRP statistics. These are generated (or rather requested from the subsystems) on-the-fly rather than constantly updating icmap.",True,{}
corosync/corosync,https://github.com/corosync/corosync,229,2017-07-10T14:50:42Z,2017-07-17T08:21:44Z,2017-08-04T09:05:19Z,CLOSED,False,951,145,15,https://github.com/chrissie-c,cmap: Add knet stats map,3,[],https://github.com/corosync/corosync/pull/229,https://github.com/chrissie-c,2,https://github.com/corosync/corosync/pull/229#issuecomment-314130368,"Change cmap so it can use multiple different 'maps', and add an API call to change the current map.
Then add a 'stats' map that allows access to the multitude of knet and SRP statistics. These are generated (or rather requested from the subsystems) on-the-fly rather than constantly updating icmap.","I did look into adding the ipcs connection stats into the stats map but it ends up very complex and racy. If this needs separating out too, then it's probably safest to have its own icmap 'map'
other things I considered was to use a trie for the arrays that map names to subscript offsets. That's still a possibility if the performance hit is too hard for a sequential search",True,{}
corosync/corosync,https://github.com/corosync/corosync,229,2017-07-10T14:50:42Z,2017-07-17T08:21:44Z,2017-08-04T09:05:19Z,CLOSED,False,951,145,15,https://github.com/chrissie-c,cmap: Add knet stats map,3,[],https://github.com/corosync/corosync/pull/229,https://github.com/chrissie-c,3,https://github.com/corosync/corosync/pull/229#issuecomment-315693338,"Change cmap so it can use multiple different 'maps', and add an API call to change the current map.
Then add a 'stats' map that allows access to the multitude of knet and SRP statistics. These are generated (or rather requested from the subsystems) on-the-fly rather than constantly updating icmap.",Closing this PR as I have a better patch coming soon,True,{}
corosync/corosync,https://github.com/corosync/corosync,230,2017-07-17T08:57:45Z,2017-07-27T13:54:06Z,2017-07-27T13:54:06Z,CLOSED,False,1627,493,25,https://github.com/chrissie-c,stats: Add stats map to cmap,10,[],https://github.com/corosync/corosync/pull/230,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/230,"Change cmap so it can use multiple different 'maps', and add an API call to change the current map.
Then add a 'stats' map that allows access to the multitude of knet, SRP & ipcs statistics. These are generated (or rather requested from the  subsystems) on-the-fly rather than constantly updating icmap.
This is an updated and (hopefully) improved patch that allows for proper iterators","Change cmap so it can use multiple different 'maps', and add an API call to change the current map.
Then add a 'stats' map that allows access to the multitude of knet, SRP & ipcs statistics. These are generated (or rather requested from the  subsystems) on-the-fly rather than constantly updating icmap.
This is an updated and (hopefully) improved patch that allows for proper iterators",True,{}
corosync/corosync,https://github.com/corosync/corosync,230,2017-07-17T08:57:45Z,2017-07-27T13:54:06Z,2017-07-27T13:54:06Z,CLOSED,False,1627,493,25,https://github.com/chrissie-c,stats: Add stats map to cmap,10,[],https://github.com/corosync/corosync/pull/230,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/230#issuecomment-315775068,"Change cmap so it can use multiple different 'maps', and add an API call to change the current map.
Then add a 'stats' map that allows access to the multitude of knet, SRP & ipcs statistics. These are generated (or rather requested from the  subsystems) on-the-fly rather than constantly updating icmap.
This is an updated and (hopefully) improved patch that allows for proper iterators","Comment with extra issues I've found disappeared so sending again:

corosync-notifyd.c must be updated to reflect all the changes
cmap_keys.8 has to be updated to reflect all the changes
corosync-cmapctl -m stats -t '' <- corosync segfault
it would be nice to execute corosync-cmapctl -m stats (what would do the same as corosync-cmapctl -m stats '')
With only one node configured knet statistics are not displayed. I can understand the reason why but it should be documented (probably cmap_keys.8)

Otherwise I must say good work. Only real issue I see is tracking prefix problem otherwise all the issues are ether small or ideas/improvements.",True,{}
corosync/corosync,https://github.com/corosync/corosync,230,2017-07-17T08:57:45Z,2017-07-27T13:54:06Z,2017-07-27T13:54:06Z,CLOSED,False,1627,493,25,https://github.com/chrissie-c,stats: Add stats map to cmap,10,[],https://github.com/corosync/corosync/pull/230,https://github.com/chrissie-c,3,https://github.com/corosync/corosync/pull/230#issuecomment-316950947,"Change cmap so it can use multiple different 'maps', and add an API call to change the current map.
Then add a 'stats' map that allows access to the multitude of knet, SRP & ipcs statistics. These are generated (or rather requested from the  subsystems) on-the-fly rather than constantly updating icmap.
This is an updated and (hopefully) improved patch that allows for proper iterators",This revised patchset is ready for review now. I'm not mentioning the lack of knet stats for the local node because I have plans to fix this in knet.,True,{}
corosync/corosync,https://github.com/corosync/corosync,230,2017-07-17T08:57:45Z,2017-07-27T13:54:06Z,2017-07-27T13:54:06Z,CLOSED,False,1627,493,25,https://github.com/chrissie-c,stats: Add stats map to cmap,10,[],https://github.com/corosync/corosync/pull/230,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/230#issuecomment-316992048,"Change cmap so it can use multiple different 'maps', and add an API call to change the current map.
Then add a 'stats' map that allows access to the multitude of knet, SRP & ipcs statistics. These are generated (or rather requested from the  subsystems) on-the-fly rather than constantly updating icmap.
This is an updated and (hopefully) improved patch that allows for proper iterators","Few more problems:
1
totemknet.c: In function ‘totemknet_link_get_status’:
totemknet.c:1240: warning: declaration of ‘link’ shadows a global declaration
/usr/include/unistd.h:809: warning: shadowed declaration is here
  CC     libtotem_pg_la-stats.lo
stats.c: In function ‘stats_knet_add_member’:
stats.c:541: warning: declaration of ‘link’ shadows a global declaration
/usr/include/unistd.h:809: warning: shadowed declaration is here
stats.c: In function ‘stats_knet_del_member’:
stats.c:551: warning: declaration of ‘link’ shadows a global declaration
/usr/include/unistd.h:809: warning: shadowed declaration is here

and
corosync-notifyd.c: In function ‘_cs_cmap_init’:
corosync-notifyd.c:1093: warning: ‘rc’ may be used uninitialized in this function

2
Running
corosync-cmapctl -m icmap

still results in
Expected key after options

In theory
        if (argc == 1 || (argc == 2 && show_binary) || (argc == 3 && map_set)) {
                action = ACTION_PRINT_ALL;
        }

can help but then -b would be ignored, so I believe we need slightly bigger hammer there.
3
Running
corosync-cmapctl -T -m stats ''

after it's exit result in corosync crash.
same with
corosync-cmapctl -t -m stats ''

valgrind tell you more.
4
Man page cmap_initialize_map.3.in contains trailing whitespaces on lines
+the Configuration Map API and specify a particular map to use. Each application may have 

and
+The 

You can check them easily by running git diff/show with
[color]
	diff = auto

set in git config file.
Similar problem (mix of tab/spaces) is in file exec/stats.c
+       { STAT_KNET, ""tx_pong_packets"",  offsetof(struct knet_link_status, stats.tx_pong_packets),  ICMAP_VALUETYPE_UINT64},

5
It would be nice to add into cmap_keys man page the difference between cnx and conn. Especially because previously this statistics were in one ""object"" and now there are two ""subojects""",True,{}
corosync/corosync,https://github.com/corosync/corosync,230,2017-07-17T08:57:45Z,2017-07-27T13:54:06Z,2017-07-27T13:54:06Z,CLOSED,False,1627,493,25,https://github.com/chrissie-c,stats: Add stats map to cmap,10,[],https://github.com/corosync/corosync/pull/230,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/230#issuecomment-317418394,"Change cmap so it can use multiple different 'maps', and add an API call to change the current map.
Then add a 'stats' map that allows access to the multitude of knet, SRP & ipcs statistics. These are generated (or rather requested from the  subsystems) on-the-fly rather than constantly updating icmap.
This is an updated and (hopefully) improved patch that allows for proper iterators","Point 3 is only partially fixed. Running corosync under valgrind and running
corosync-cmapctl -m stats -T ''

result to
==30703== Invalid read of size 1
==30703==    at 0x52BAE6B: trie_insert (trie.c:290)
==30703==    by 0x52BB8FC: trie_notify_add (trie.c:631)
==30703==    by 0x52B85AE: qb_map_notify_add (map.c:99)
==30703==    by 0x1318FB: stats_map_track_add (stats.c:500)
==30703==    by 0x121002: message_handler_req_lib_cmap_track_add (cmap.c:800)
==30703==    by 0x132D60: cs_ipcs_msg_process (ipc_glue.c:558)
==30703==    by 0x52ADFDF: _process_request_ (ipcs.c:701)
==30703==    by 0x52AE395: qb_ipcs_dispatch_connection_request (ipcs.c:803)
==30703==    by 0x52A95BA: _poll_dispatch_and_take_back_ (loop_poll.c:109)
==30703==    by 0x52A8DB2: qb_loop_run_level (loop.c:43)
==30703==    by 0x52A939F: qb_loop_run (loop.c:210)
==30703==    by 0x12E9DF: main (main.c:1410)
==30703==  Address 0x9569711 is 0 bytes after a block of size 1 alloc'd
==30703==    at 0x4C27BE3: malloc (vg_replace_malloc.c:299)
==30703==    by 0x57AB889: strdup (in /usr/lib64/libc-2.17.so)
==30703==    by 0x131855: stats_map_track_add (stats.c:483)
==30703==    by 0x121002: message_handler_req_lib_cmap_track_add (cmap.c:800)
==30703==    by 0x132D60: cs_ipcs_msg_process (ipc_glue.c:558)
==30703==    by 0x52ADFDF: _process_request_ (ipcs.c:701)
==30703==    by 0x52AE395: qb_ipcs_dispatch_connection_request (ipcs.c:803)
==30703==    by 0x52A95BA: _poll_dispatch_and_take_back_ (loop_poll.c:109)
==30703==    by 0x52A8DB2: qb_loop_run_level (loop.c:43)
==30703==    by 0x52A939F: qb_loop_run (loop.c:210)
==30703==    by 0x12E9DF: main (main.c:1410)
==30703== 
==30703== Invalid read of size 1
==30703==    at 0x52BAE81: trie_insert (trie.c:291)
==30703==    by 0x52BB8FC: trie_notify_add (trie.c:631)
==30703==    by 0x52B85AE: qb_map_notify_add (map.c:99)
==30703==    by 0x1318FB: stats_map_track_add (stats.c:500)
==30703==    by 0x121002: message_handler_req_lib_cmap_track_add (cmap.c:800)
==30703==    by 0x132D60: cs_ipcs_msg_process (ipc_glue.c:558)
==30703==    by 0x52ADFDF: _process_request_ (ipcs.c:701)
==30703==    by 0x52AE395: qb_ipcs_dispatch_connection_request (ipcs.c:803)
==30703==    by 0x52A95BA: _poll_dispatch_and_take_back_ (loop_poll.c:109)
==30703==    by 0x52A8DB2: qb_loop_run_level (loop.c:43)
==30703==    by 0x52A939F: qb_loop_run (loop.c:210)
==30703==    by 0x12E9DF: main (main.c:1410)
==30703==  Address 0x9569711 is 0 bytes after a block of size 1 alloc'd
==30703==    at 0x4C27BE3: malloc (vg_replace_malloc.c:299)
==30703==    by 0x57AB889: strdup (in /usr/lib64/libc-2.17.so)
==30703==    by 0x131855: stats_map_track_add (stats.c:483)
==30703==    by 0x121002: message_handler_req_lib_cmap_track_add (cmap.c:800)
==30703==    by 0x132D60: cs_ipcs_msg_process (ipc_glue.c:558)
==30703==    by 0x52ADFDF: _process_request_ (ipcs.c:701)
==30703==    by 0x52AE395: qb_ipcs_dispatch_connection_request (ipcs.c:803)
==30703==    by 0x52A95BA: _poll_dispatch_and_take_back_ (loop_poll.c:109)
==30703==    by 0x52A8DB2: qb_loop_run_level (loop.c:43)
==30703==    by 0x52A939F: qb_loop_run (loop.c:210)
==30703==    by 0x12E9DF: main (main.c:1410)
==30703== 

And doesn't work. So when -T is running and (for example) corosync-cpgtool is executed nothing is tracked.
# corosync-cmapctl -m stats -T ''
Type ""q"" to finish

For stats map result should be same as running
corosync-cmapctl -m stats -T 'stats'

so
corosync-cmapctl -m stats -T 'stats'
Type ""q"" to finish
create> stats.ipcs.service2.30713.0xa2462f0.queueing (i32) = 0
create> stats.ipcs.service2.30713.0xa2462f0.queued (u32) = 0
create> stats.ipcs.service2.30713.0xa2462f0.invalid_request (u64) = 0
create> stats.ipcs.service2.30713.0xa2462f0.overload (u64) = 0
create> stats.ipcs.service2.30713.0xa2462f0.sent (u32) = 0
create> stats.ipcs.service2.30713.0xa2462f0.procname (str) = corosync-cpgtoo
create> stats.ipcs.service2.30713.0xa2462f0.requests (u64) = 0
create> stats.ipcs.service2.30713.0xa2462f0.responses (u64) = 0
create> stats.ipcs.service2.30713.0xa2462f0.dispatched (u64) = 0
...
delete> stats.ipcs.service1.30713.0xa74f2f0.send_retries (u64) = 0
delete> stats.ipcs.service1.30713.0xa74f2f0.recv_retries (u64) = 0
delete> stats.ipcs.service1.30713.0xa74f2f0.flow_control (u32) = 0
delete> stats.ipcs.service1.30713.0xa74f2f0.flow_control_count (u64) = 0",True,{}
corosync/corosync,https://github.com/corosync/corosync,230,2017-07-17T08:57:45Z,2017-07-27T13:54:06Z,2017-07-27T13:54:06Z,CLOSED,False,1627,493,25,https://github.com/chrissie-c,stats: Add stats map to cmap,10,[],https://github.com/corosync/corosync/pull/230,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/230#issuecomment-318368935,"Change cmap so it can use multiple different 'maps', and add an API call to change the current map.
Then add a 'stats' map that allows access to the multitude of knet, SRP & ipcs statistics. These are generated (or rather requested from the  subsystems) on-the-fly rather than constantly updating icmap.
This is an updated and (hopefully) improved patch that allows for proper iterators","All issues are resolved now so ACK and merged as 55c3dcb.
Nice work @chrissie-c .",True,{}
corosync/corosync,https://github.com/corosync/corosync,231,2017-07-28T15:39:00Z,2017-08-01T12:33:39Z,2017-08-01T12:33:43Z,CLOSED,False,131,3,5,https://github.com/jfriesse,main: Add support for libcgroup,1,[],https://github.com/corosync/corosync/pull/231,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/231,"When corosync is started in environment where it ends in cgroup without
properly set rt_runtime_us it's impossible to get RT priority.
Already implemented workaround is to use higher non-RT priority.
This patch implements another solution. It moves corosync into root cpu
cgroup. Root cpu cgroup hopefully has enough RT budget.
Another solution was mentioned on ML
https://lists.freedesktop.org/archives/systemd-devel/2017-July/039353.html
but this means to generate some ""random"" values.
Signed-off-by: Jan Friesse jfriesse@redhat.com","When corosync is started in environment where it ends in cgroup without
properly set rt_runtime_us it's impossible to get RT priority.
Already implemented workaround is to use higher non-RT priority.
This patch implements another solution. It moves corosync into root cpu
cgroup. Root cpu cgroup hopefully has enough RT budget.
Another solution was mentioned on ML
https://lists.freedesktop.org/archives/systemd-devel/2017-July/039353.html
but this means to generate some ""random"" values.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,231,2017-07-28T15:39:00Z,2017-08-01T12:33:39Z,2017-08-01T12:33:43Z,CLOSED,False,131,3,5,https://github.com/jfriesse,main: Add support for libcgroup,1,[],https://github.com/corosync/corosync/pull/231,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/231#issuecomment-318687280,"When corosync is started in environment where it ends in cgroup without
properly set rt_runtime_us it's impossible to get RT priority.
Already implemented workaround is to use higher non-RT priority.
This patch implements another solution. It moves corosync into root cpu
cgroup. Root cpu cgroup hopefully has enough RT budget.
Another solution was mentioned on ML
https://lists.freedesktop.org/archives/systemd-devel/2017-July/039353.html
but this means to generate some ""random"" values.
Signed-off-by: Jan Friesse jfriesse@redhat.com",(Of course master is going to get forwardport),True,{}
corosync/corosync,https://github.com/corosync/corosync,231,2017-07-28T15:39:00Z,2017-08-01T12:33:39Z,2017-08-01T12:33:43Z,CLOSED,False,131,3,5,https://github.com/jfriesse,main: Add support for libcgroup,1,[],https://github.com/corosync/corosync/pull/231,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/231#issuecomment-319356967,"When corosync is started in environment where it ends in cgroup without
properly set rt_runtime_us it's impossible to get RT priority.
Already implemented workaround is to use higher non-RT priority.
This patch implements another solution. It moves corosync into root cpu
cgroup. Root cpu cgroup hopefully has enough RT budget.
Another solution was mentioned on ML
https://lists.freedesktop.org/archives/systemd-devel/2017-July/039353.html
but this means to generate some ""random"" values.
Signed-off-by: Jan Friesse jfriesse@redhat.com",Merged as 9a50628,True,{}
corosync/corosync,https://github.com/corosync/corosync,235,2017-08-03T09:01:21Z,2017-08-03T12:32:49Z,2017-08-03T12:32:49Z,CLOSED,False,25,133,12,https://github.com/chrissie-c,CFG: Remove ring-reenable code,3,[],https://github.com/corosync/corosync/pull/235,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/235,"RRP doesn't exist any more so all the ring re-enable code is redundant.
I've removed it from the library and all the code that does anything,
but I've left the hole in the IPC just in case old libraries are
hanging around.
Also rename 'ring' to 'link' where appropriate
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","RRP doesn't exist any more so all the ring re-enable code is redundant.
I've removed it from the library and all the code that does anything,
but I've left the hole in the IPC just in case old libraries are
hanging around.
Also rename 'ring' to 'link' where appropriate
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,235,2017-08-03T09:01:21Z,2017-08-03T12:32:49Z,2017-08-03T12:32:49Z,CLOSED,False,25,133,12,https://github.com/chrissie-c,CFG: Remove ring-reenable code,3,[],https://github.com/corosync/corosync/pull/235,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/235#issuecomment-319914248,"RRP doesn't exist any more so all the ring re-enable code is redundant.
I've removed it from the library and all the code that does anything,
but I've left the hole in the IPC just in case old libraries are
hanging around.
Also rename 'ring' to 'link' where appropriate
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",@chrissie-c Please increase version in libcfg.verso file because lib is no longer compatible.,True,{}
corosync/corosync,https://github.com/corosync/corosync,235,2017-08-03T09:01:21Z,2017-08-03T12:32:49Z,2017-08-03T12:32:49Z,CLOSED,False,25,133,12,https://github.com/chrissie-c,CFG: Remove ring-reenable code,3,[],https://github.com/corosync/corosync/pull/235,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/235#issuecomment-319955728,"RRP doesn't exist any more so all the ring re-enable code is redundant.
I've removed it from the library and all the code that does anything,
but I've left the hole in the IPC just in case old libraries are
hanging around.
Also rename 'ring' to 'link' where appropriate
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","Nice patch, ACK and merged as 9da89f3",True,{}
corosync/corosync,https://github.com/corosync/corosync,236,2017-08-04T09:19:01Z,2017-08-04T11:59:17Z,2017-08-04T11:59:24Z,MERGED,True,45,45,1,https://github.com/chrissie-c,totemknet: Use knet's LOOPBACK transport,1,[],https://github.com/corosync/corosync/pull/236,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/236,"knet now has a built-in LOOPBACK transport so use that
rather than special-casing it for ourself.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","knet now has a built-in LOOPBACK transport so use that
rather than special-casing it for ourself.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,237,2017-08-11T13:48:07Z,2017-08-11T14:28:02Z,2017-08-11T14:28:03Z,MERGED,True,104,24,1,https://github.com/chrissie-c,cpghum: Add options to change flood start/mult/end sizes,1,[],https://github.com/corosync/corosync/pull/237,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/237,"I ran out of sensible short options for cpghum so added some long
ones to cope with them.
Also added is the ability to specify most size values in a sensible format
eg 64M for 64 Megabytes or 48K for 48 Kilobytes.
Strictly those are MiB and KiB of course, but I'm old-fashioned.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","I ran out of sensible short options for cpghum so added some long
ones to cope with them.
Also added is the ability to specify most size values in a sensible format
eg 64M for 64 Megabytes or 48K for 48 Kilobytes.
Strictly those are MiB and KiB of course, but I'm old-fashioned.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,238,2017-08-22T14:12:59Z,2017-08-23T12:19:32Z,2017-08-23T12:19:32Z,CLOSED,False,51,1,3,https://github.com/chrissie-c,stats: add knet 'handle' stats,1,[],https://github.com/corosync/corosync/pull/238,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/238,"knet handle stats show compression and crypto statistics. With these
you can see the effectiveness of compression and the overheads of both
crypto and compression.
I left compression stats in (even though corosync doesn't support knet compression) as we might add it in future.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","knet handle stats show compression and crypto statistics. With these
you can see the effectiveness of compression and the overheads of both
crypto and compression.
I left compression stats in (even though corosync doesn't support knet compression) as we might add it in future.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,238,2017-08-22T14:12:59Z,2017-08-23T12:19:32Z,2017-08-23T12:19:32Z,CLOSED,False,51,1,3,https://github.com/chrissie-c,stats: add knet 'handle' stats,1,[],https://github.com/corosync/corosync/pull/238,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/238#issuecomment-324311616,"knet handle stats show compression and crypto statistics. With these
you can see the effectiveness of compression and the overheads of both
crypto and compression.
I left compression stats in (even though corosync doesn't support knet compression) as we might add it in future.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","Nice patch, ACK and merged as ed235ed",True,{}
corosync/corosync,https://github.com/corosync/corosync,239,2017-08-31T00:30:13Z,2017-08-31T05:48:26Z,2017-08-31T05:48:26Z,CLOSED,False,1,0,1,https://github.com/kraj,Include fcntl.h for F_* and O_* defines,1,[],https://github.com/corosync/corosync/pull/239,https://github.com/kraj,1,https://github.com/corosync/corosync/pull/239,"Fixes errors like
utils.c:95:22: error: use of undeclared identifier 'O_WRONLY'
Signed-off-by: Khem Raj raj.khem@gmail.com","Fixes errors like
utils.c:95:22: error: use of undeclared identifier 'O_WRONLY'
Signed-off-by: Khem Raj raj.khem@gmail.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,239,2017-08-31T00:30:13Z,2017-08-31T05:48:26Z,2017-08-31T05:48:26Z,CLOSED,False,1,0,1,https://github.com/kraj,Include fcntl.h for F_* and O_* defines,1,[],https://github.com/corosync/corosync/pull/239,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/239#issuecomment-326196291,"Fixes errors like
utils.c:95:22: error: use of undeclared identifier 'O_WRONLY'
Signed-off-by: Khem Raj raj.khem@gmail.com","@kraj Good catch and nice patch so ACK and I've merged as 1a2c72a
Thank you for the patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,240,2017-09-06T13:00:30Z,2017-09-13T13:36:36Z,2017-09-14T17:55:15Z,CLOSED,False,4,3,2,https://github.com/wferi,Watchdog typo fixes,2,[],https://github.com/corosync/corosync/pull/240,https://github.com/wferi,1,https://github.com/corosync/corosync/pull/240,These apply to the needle branch as well. Thanks.,These apply to the needle branch as well. Thanks.,True,{}
corosync/corosync,https://github.com/corosync/corosync,240,2017-09-06T13:00:30Z,2017-09-13T13:36:36Z,2017-09-14T17:55:15Z,CLOSED,False,4,3,2,https://github.com/wferi,Watchdog typo fixes,2,[],https://github.com/corosync/corosync/pull/240,https://github.com/wferi,2,https://github.com/corosync/corosync/pull/240#issuecomment-327753938,These apply to the needle branch as well. Thanks.,"I'm also tempted to add something like the following paragraph to the manual and at least a pointer to the example config files:

If some layer above Corosync provides fencing, using a
watchdog usually does not add much value.  On the other
hand, slow watchdog communication may incur multi-second
delays in the Corosync main loop, potentially breaking down
membership.  IPMI watchdogs are especially notorious in this
regard, read about kipmid_max_busy_us in IPMI.txt in the
Linux kernel documentation.

That ""usually"" above should really be made more specific, though. What do you think?",True,{}
corosync/corosync,https://github.com/corosync/corosync,240,2017-09-06T13:00:30Z,2017-09-13T13:36:36Z,2017-09-14T17:55:15Z,CLOSED,False,4,3,2,https://github.com/wferi,Watchdog typo fixes,2,[],https://github.com/corosync/corosync/pull/240,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/240#issuecomment-328478617,These apply to the needle branch as well. Thanks.,"@wferi Thanks for the patches, good catch, good patch so ACK and merged as 0f33464 / 2a430f9 and 4b21de5 / c05c3f8.
I like the idea of adding paragraph into the manual, it's definitively well worded. Actually when power fencing is properly configured watchdog provides no value (or at least I'm not aware about any).",True,{}
corosync/corosync,https://github.com/corosync/corosync,240,2017-09-06T13:00:30Z,2017-09-13T13:36:36Z,2017-09-14T17:55:15Z,CLOSED,False,4,3,2,https://github.com/wferi,Watchdog typo fixes,2,[],https://github.com/corosync/corosync/pull/240,https://github.com/wferi,4,https://github.com/corosync/corosync/pull/240#issuecomment-328487555,These apply to the needle branch as well. Thanks.,Thanks and thanks. What do you think about defaulting to not using any watchdog if the watchdog_device key is not present? That would change current behavior and get rid of the special off value.,True,{}
corosync/corosync,https://github.com/corosync/corosync,240,2017-09-06T13:00:30Z,2017-09-13T13:36:36Z,2017-09-14T17:55:15Z,CLOSED,False,4,3,2,https://github.com/wferi,Watchdog typo fixes,2,[],https://github.com/corosync/corosync/pull/240,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/240#issuecomment-328488379,These apply to the needle branch as well. Thanks.,I like the idea. We probably shouldn't change in needle but for master it's more than viable. Then we could compile it by default if watchdog.h is found instead of having --enable-watchdog configure option.,True,{}
corosync/corosync,https://github.com/corosync/corosync,240,2017-09-06T13:00:30Z,2017-09-13T13:36:36Z,2017-09-14T17:55:15Z,CLOSED,False,4,3,2,https://github.com/wferi,Watchdog typo fixes,2,[],https://github.com/corosync/corosync/pull/240,https://github.com/wferi,6,https://github.com/corosync/corosync/pull/240#issuecomment-328683081,These apply to the needle branch as well. Thanks.,"Opened #243 for those. Didn't change the default in configure.ac, though. I wonder if the watchdog documentation should be present only when watchdog support is compiled in...",True,{}
corosync/corosync,https://github.com/corosync/corosync,240,2017-09-06T13:00:30Z,2017-09-13T13:36:36Z,2017-09-14T17:55:15Z,CLOSED,False,4,3,2,https://github.com/wferi,Watchdog typo fixes,2,[],https://github.com/corosync/corosync/pull/240,https://github.com/wferi,7,https://github.com/corosync/corosync/pull/240#issuecomment-328738714,These apply to the needle branch as well. Thanks.,"Opened #243 for those. Didn't change the default in configure.ac, though. I wonder if the watchdog documentation should be present only when watchdog support is compiled in...",True,{}
corosync/corosync,https://github.com/corosync/corosync,240,2017-09-06T13:00:30Z,2017-09-13T13:36:36Z,2017-09-14T17:55:15Z,CLOSED,False,4,3,2,https://github.com/wferi,Watchdog typo fixes,2,[],https://github.com/corosync/corosync/pull/240,https://github.com/jfriesse,8,https://github.com/corosync/corosync/pull/240#issuecomment-328837859,These apply to the needle branch as well. Thanks.,"@wferi I would prefer not to have different man pages depending on what is compiled in. I believe it's just better to say something like ""valid only when wd was enabled during compile time"".",True,{}
corosync/corosync,https://github.com/corosync/corosync,240,2017-09-06T13:00:30Z,2017-09-13T13:36:36Z,2017-09-14T17:55:15Z,CLOSED,False,4,3,2,https://github.com/wferi,Watchdog typo fixes,2,[],https://github.com/corosync/corosync/pull/240,https://github.com/wferi,9,https://github.com/corosync/corosync/pull/240#issuecomment-329169966,These apply to the needle branch as well. Thanks.,"OK, I put something into #243. Let's close this PR now, we wandered off-topic...",True,{}
corosync/corosync,https://github.com/corosync/corosync,241,2017-09-07T08:24:41Z,2017-09-11T09:52:38Z,2017-09-11T09:52:38Z,CLOSED,False,1,1,1,https://github.com/jjd27,totemknet: fix debug message typo,1,[],https://github.com/corosync/corosync/pull/241,https://github.com/jjd27,1,https://github.com/corosync/corosync/pull/241,Signed-off-by: Jonathan Davies jonathan.davies@citrix.com,Signed-off-by: Jonathan Davies jonathan.davies@citrix.com,True,{}
corosync/corosync,https://github.com/corosync/corosync,241,2017-09-07T08:24:41Z,2017-09-11T09:52:38Z,2017-09-11T09:52:38Z,CLOSED,False,1,1,1,https://github.com/jjd27,totemknet: fix debug message typo,1,[],https://github.com/corosync/corosync/pull/241,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/241#issuecomment-328480132,Signed-off-by: Jonathan Davies jonathan.davies@citrix.com,"@jjd27 Good catch and nice patch so ACK and merged as 3296a0d .
Thank you for the patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,243,2017-09-11T22:59:30Z,2017-09-14T15:42:16Z,2017-09-18T08:12:27Z,CLOSED,False,10,5,2,https://github.com/wferi,Watchdog changes,2,[],https://github.com/corosync/corosync/pull/243,https://github.com/wferi,1,https://github.com/corosync/corosync/pull/243,"The first two commits should be okay for needle.
Switching the default maybe not (although I only tested it there).","The first two commits should be okay for needle.
Switching the default maybe not (although I only tested it there).",True,{}
corosync/corosync,https://github.com/corosync/corosync,243,2017-09-11T22:59:30Z,2017-09-14T15:42:16Z,2017-09-18T08:12:27Z,CLOSED,False,10,5,2,https://github.com/wferi,Watchdog changes,2,[],https://github.com/corosync/corosync/pull/243,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/243#issuecomment-328837090,"The first two commits should be okay for needle.
Switching the default maybe not (although I only tested it there).","@wferi First two patches are nice so ACK and I've merged them as 4738bcc / b510a0f and 1f3d754 / 151ed9d.
Last patch is also good but I would rather keep compatibility with configurations which already uses ""off"". Can you please change the last patch so no key == empty string == off?",True,{}
corosync/corosync,https://github.com/corosync/corosync,243,2017-09-11T22:59:30Z,2017-09-14T15:42:16Z,2017-09-18T08:12:27Z,CLOSED,False,10,5,2,https://github.com/wferi,Watchdog changes,2,[],https://github.com/corosync/corosync/pull/243,https://github.com/wferi,3,https://github.com/corosync/corosync/pull/243#issuecomment-329161000,"The first two commits should be okay for needle.
Switching the default maybe not (although I only tested it there).","Thanks. I replaced the third patch (and dropped the first two).
By the way, this code feels like setup_watchdog() could be called multiple times. If that's really the case, then a free (watchdog_device) is also needed right before resetting it.",True,{}
corosync/corosync,https://github.com/corosync/corosync,243,2017-09-11T22:59:30Z,2017-09-14T15:42:16Z,2017-09-18T08:12:27Z,CLOSED,False,10,5,2,https://github.com/wferi,Watchdog changes,2,[],https://github.com/corosync/corosync/pull/243,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/243#issuecomment-329523042,"The first two commits should be okay for needle.
Switching the default maybe not (although I only tested it there).","@wferi Again nice patch so ACK and merged as b7b318b and 3323942 . This time only for master because needle behavior shouldn't change.
Thank you for the patches.",True,{}
corosync/corosync,https://github.com/corosync/corosync,243,2017-09-11T22:59:30Z,2017-09-14T15:42:16Z,2017-09-18T08:12:27Z,CLOSED,False,10,5,2,https://github.com/wferi,Watchdog changes,2,[],https://github.com/corosync/corosync/pull/243,https://github.com/wferi,5,https://github.com/corosync/corosync/pull/243#issuecomment-329559604,"The first two commits should be okay for needle.
Switching the default maybe not (although I only tested it there).","Great, thanks! The second change is also valid for needle, though the patch itself won't apply cleanly due to the context change introduced by the first. I can open a separate PR for that if you prefer.",True,{}
corosync/corosync,https://github.com/corosync/corosync,243,2017-09-11T22:59:30Z,2017-09-14T15:42:16Z,2017-09-18T08:12:27Z,CLOSED,False,10,5,2,https://github.com/wferi,Watchdog changes,2,[],https://github.com/corosync/corosync/pull/243,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/243#issuecomment-329705206,"The first two commits should be okay for needle.
Switching the default maybe not (although I only tested it there).",@wferi True. It would be great if you could backport second patch.,True,{}
corosync/corosync,https://github.com/corosync/corosync,243,2017-09-11T22:59:30Z,2017-09-14T15:42:16Z,2017-09-18T08:12:27Z,CLOSED,False,10,5,2,https://github.com/wferi,Watchdog changes,2,[],https://github.com/corosync/corosync/pull/243,https://github.com/wferi,7,https://github.com/corosync/corosync/pull/243#issuecomment-329715356,"The first two commits should be okay for needle.
Switching the default maybe not (although I only tested it there).","I cherry-picked it into #244.
Shall I go on enabling watchdog support by default if linux/watchdog.h is present?",True,{}
corosync/corosync,https://github.com/corosync/corosync,243,2017-09-11T22:59:30Z,2017-09-14T15:42:16Z,2017-09-18T08:12:27Z,CLOSED,False,10,5,2,https://github.com/wferi,Watchdog changes,2,[],https://github.com/corosync/corosync/pull/243,https://github.com/jfriesse,8,https://github.com/corosync/corosync/pull/243#issuecomment-329759351,"The first two commits should be okay for needle.
Switching the default maybe not (although I only tested it there).","@wferi yep. Idea is to completely remove the configure option, and remove it also from corosync.spec.in. Ans yes, linux/watchdog.h is probably best one to check.",True,{}
corosync/corosync,https://github.com/corosync/corosync,244,2017-09-15T08:17:38Z,2017-09-15T11:44:23Z,2017-09-15T12:47:13Z,CLOSED,False,2,0,1,https://github.com/wferi,corosync.conf.5: watchdog support is conditional,1,[],https://github.com/corosync/corosync/pull/244,https://github.com/wferi,1,https://github.com/corosync/corosync/pull/244,"Signed-off-by: Ferenc Wágner wferi@debian.org
Reviewed-by: Jan Friesse jfriesse@redhat.com","Signed-off-by: Ferenc Wágner wferi@debian.org
Reviewed-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,244,2017-09-15T08:17:38Z,2017-09-15T11:44:23Z,2017-09-15T12:47:13Z,CLOSED,False,2,0,1,https://github.com/wferi,corosync.conf.5: watchdog support is conditional,1,[],https://github.com/corosync/corosync/pull/244,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/244#issuecomment-329758774,"Signed-off-by: Ferenc Wágner wferi@debian.org
Reviewed-by: Jan Friesse jfriesse@redhat.com",@wferi Thank you for the backport. I've pushed to needle as bdac1d0,True,{}
corosync/corosync,https://github.com/corosync/corosync,245,2017-09-15T12:13:50Z,2017-09-21T15:17:02Z,2017-09-21T15:17:02Z,CLOSED,False,479,270,16,https://github.com/chrissie-c,config: Allow dynamic link configuration,2,[],https://github.com/corosync/corosync/pull/245,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/245,"Now we are using knet, it's possible to dynamically add, remove and
reconfigure links on the fly.
More testing and very careful scrutiny are welcomed.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","Now we are using knet, it's possible to dynamically add, remove and
reconfigure links on the fly.
More testing and very careful scrutiny are welcomed.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,245,2017-09-15T12:13:50Z,2017-09-21T15:17:02Z,2017-09-21T15:17:02Z,CLOSED,False,479,270,16,https://github.com/chrissie-c,config: Allow dynamic link configuration,2,[],https://github.com/corosync/corosync/pull/245,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/245#issuecomment-330907789,"Now we are using knet, it's possible to dynamically add, remove and
reconfigure links on the fly.
More testing and very careful scrutiny are welcomed.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","@chrissie-c Patch looks generally good (eventho I must say reviewing took me a while specially because this link concept is quite a new and it's replacement for totemrrp but in different layer (totemknet instead of totemrrp)), but I'm unable to understand
+               if (!totem_ip_string) {
+                       totem_ip_string="""";
+               }

and counterpart in corosync-cfgtool.c.
when it is happening? Should it really happen? Isn't that some deeper problem?
Another problem I found is that multicast address (if udp is used) is no longer generated when only node list is used (parse error in config: No multicast address specified).
corosync-cfgtool status on non-existing link displays empty string ... I don't think that's ideal.
Not completely related but I couldn't resist and tried to set one 127.0.0.1 link. This was accepted but corosync then behaved weirdly. Because you are playing with totemconfig it may make sense to completely disable 127.0.0.1 (::1).",True,{}
corosync/corosync,https://github.com/corosync/corosync,245,2017-09-15T12:13:50Z,2017-09-21T15:17:02Z,2017-09-21T15:17:02Z,CLOSED,False,479,270,16,https://github.com/chrissie-c,config: Allow dynamic link configuration,2,[],https://github.com/corosync/corosync/pull/245,https://github.com/chrissie-c,3,https://github.com/corosync/corosync/pull/245#issuecomment-331081474,"Now we are using knet, it's possible to dynamically add, remove and
reconfigure links on the fly.
More testing and very careful scrutiny are welcomed.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","Setting totem_ip_string to """" is there (supposedly) to stop cfgtool from displaying a link if its not configured, though you say that's not happening. it worked for me so it might be helpful to see your config  file.
I'll look into the other issues. the multicast address sounds like basic typo somewhere.",True,{}
corosync/corosync,https://github.com/corosync/corosync,245,2017-09-15T12:13:50Z,2017-09-21T15:17:02Z,2017-09-21T15:17:02Z,CLOSED,False,479,270,16,https://github.com/chrissie-c,config: Allow dynamic link configuration,2,[],https://github.com/corosync/corosync/pull/245,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/245#issuecomment-331084456,"Now we are using knet, it's possible to dynamically add, remove and
reconfigure links on the fly.
More testing and very careful scrutiny are welcomed.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","I have no special config. One node, one link. After start I change it to two links, issue corosync-cfgtool -R. I'll paste the config via IRC.",True,{}
corosync/corosync,https://github.com/corosync/corosync,245,2017-09-15T12:13:50Z,2017-09-21T15:17:02Z,2017-09-21T15:17:02Z,CLOSED,False,479,270,16,https://github.com/chrissie-c,config: Allow dynamic link configuration,2,[],https://github.com/corosync/corosync/pull/245,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/245#issuecomment-331189239,"Now we are using knet, it's possible to dynamically add, remove and
reconfigure links on the fly.
More testing and very careful scrutiny are welcomed.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","@chrissie-c ACK and merged as 294a629 .
Thank you for the patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,246,2017-09-22T17:28:16Z,2017-09-26T16:41:19Z,2017-09-26T16:41:19Z,CLOSED,False,9,1,1,https://github.com/edwintorok,votequorum: make auto-tie-breaker consistent on cluster membership changes,1,[],https://github.com/corosync/corosync/pull/246,https://github.com/edwintorok,1,https://github.com/corosync/corosync/pull/246,"Steps to reproduce:
pcs cluster setup --name cluster node1 node2 --auto_tie_breaker=1
pcs stonith sbd enable
pcs cluster start --all
pcs property set stonith-watchdog-timeout=10s
pcs cluster node add node3 --start
pcs cluster node add node4 --start

Actual result:

auto_tie_breaker is reported inconsistently across the cluster according to corosync-quorumtool, only the newly added node considers auto tie breaker to be on
if you cause a network partition at the switch level between nodes 1,2 and 3,4 then the whole cluster fences because node 1 thinks it is not in auto tie breaker mode
same problem if you do a pcs cluster stop --force on nodes 3 and  4 instead of the partition

Expected result:

whenever the cluster is even sized auto-tie-breaker should be enabled as the corosync.conf says
a 2 / 2 network partition on a cluster with tie breaker enabled should leave 2 nodes alive

Reproduced on corosync 2.4.0-9 on CentOS 7.4.
A similar situation occurs if you grow a 1 node  cluster to 2 node, but the 2nd node doesn't start soon enough that I reported on the mailing list.
Upon reading the manpage I would've expected auto_tie_breaker to work only on even sized clusters, so my patch just reloads the initial value on nodelist changes and then lets corosync decide again whether it should disable auto_tie_breaker (due to odd-sized cluster and no wait_for_all).
This fixed the problem described above, but may not be the cleanest way.
Tried to reproduce the problem with vqsim but since it doesn't support nodelist  changes I haven't found a way.
Perhaps the manpage should also be updated to take into account #74 (comment) and document the behaviour of auto_tie_breaker with odd-sized  clusters and wait-for-all , should  I submit that as a separate PR?","Steps to reproduce:
pcs cluster setup --name cluster node1 node2 --auto_tie_breaker=1
pcs stonith sbd enable
pcs cluster start --all
pcs property set stonith-watchdog-timeout=10s
pcs cluster node add node3 --start
pcs cluster node add node4 --start

Actual result:

auto_tie_breaker is reported inconsistently across the cluster according to corosync-quorumtool, only the newly added node considers auto tie breaker to be on
if you cause a network partition at the switch level between nodes 1,2 and 3,4 then the whole cluster fences because node 1 thinks it is not in auto tie breaker mode
same problem if you do a pcs cluster stop --force on nodes 3 and  4 instead of the partition

Expected result:

whenever the cluster is even sized auto-tie-breaker should be enabled as the corosync.conf says
a 2 / 2 network partition on a cluster with tie breaker enabled should leave 2 nodes alive

Reproduced on corosync 2.4.0-9 on CentOS 7.4.
A similar situation occurs if you grow a 1 node  cluster to 2 node, but the 2nd node doesn't start soon enough that I reported on the mailing list.
Upon reading the manpage I would've expected auto_tie_breaker to work only on even sized clusters, so my patch just reloads the initial value on nodelist changes and then lets corosync decide again whether it should disable auto_tie_breaker (due to odd-sized cluster and no wait_for_all).
This fixed the problem described above, but may not be the cleanest way.
Tried to reproduce the problem with vqsim but since it doesn't support nodelist  changes I haven't found a way.
Perhaps the manpage should also be updated to take into account #74 (comment) and document the behaviour of auto_tie_breaker with odd-sized  clusters and wait-for-all , should  I submit that as a separate PR?",True,{}
corosync/corosync,https://github.com/corosync/corosync,246,2017-09-22T17:28:16Z,2017-09-26T16:41:19Z,2017-09-26T16:41:19Z,CLOSED,False,9,1,1,https://github.com/edwintorok,votequorum: make auto-tie-breaker consistent on cluster membership changes,1,[],https://github.com/corosync/corosync/pull/246,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/246#issuecomment-332249249,"Steps to reproduce:
pcs cluster setup --name cluster node1 node2 --auto_tie_breaker=1
pcs stonith sbd enable
pcs cluster start --all
pcs property set stonith-watchdog-timeout=10s
pcs cluster node add node3 --start
pcs cluster node add node4 --start

Actual result:

auto_tie_breaker is reported inconsistently across the cluster according to corosync-quorumtool, only the newly added node considers auto tie breaker to be on
if you cause a network partition at the switch level between nodes 1,2 and 3,4 then the whole cluster fences because node 1 thinks it is not in auto tie breaker mode
same problem if you do a pcs cluster stop --force on nodes 3 and  4 instead of the partition

Expected result:

whenever the cluster is even sized auto-tie-breaker should be enabled as the corosync.conf says
a 2 / 2 network partition on a cluster with tie breaker enabled should leave 2 nodes alive

Reproduced on corosync 2.4.0-9 on CentOS 7.4.
A similar situation occurs if you grow a 1 node  cluster to 2 node, but the 2nd node doesn't start soon enough that I reported on the mailing list.
Upon reading the manpage I would've expected auto_tie_breaker to work only on even sized clusters, so my patch just reloads the initial value on nodelist changes and then lets corosync decide again whether it should disable auto_tie_breaker (due to odd-sized cluster and no wait_for_all).
This fixed the problem described above, but may not be the cleanest way.
Tried to reproduce the problem with vqsim but since it doesn't support nodelist  changes I haven't found a way.
Perhaps the manpage should also be updated to take into account #74 (comment) and document the behaviour of auto_tie_breaker with odd-sized  clusters and wait-for-all , should  I submit that as a separate PR?","@edwintorok Good catch and nice patch so ACK and merged as 15383b3 (and needle 85716d2d0ee2973117528ce943d5af008dfb8ce ) . Yes, manpage should be updated, it's really up-to you if you open new PR or use this one.
Thank you for the patch, good work.",True,{}
corosync/corosync,https://github.com/corosync/corosync,246,2017-09-22T17:28:16Z,2017-09-26T16:41:19Z,2017-09-26T16:41:19Z,CLOSED,False,9,1,1,https://github.com/edwintorok,votequorum: make auto-tie-breaker consistent on cluster membership changes,1,[],https://github.com/corosync/corosync/pull/246,https://github.com/edwintorok,3,https://github.com/corosync/corosync/pull/246#issuecomment-332260237,"Steps to reproduce:
pcs cluster setup --name cluster node1 node2 --auto_tie_breaker=1
pcs stonith sbd enable
pcs cluster start --all
pcs property set stonith-watchdog-timeout=10s
pcs cluster node add node3 --start
pcs cluster node add node4 --start

Actual result:

auto_tie_breaker is reported inconsistently across the cluster according to corosync-quorumtool, only the newly added node considers auto tie breaker to be on
if you cause a network partition at the switch level between nodes 1,2 and 3,4 then the whole cluster fences because node 1 thinks it is not in auto tie breaker mode
same problem if you do a pcs cluster stop --force on nodes 3 and  4 instead of the partition

Expected result:

whenever the cluster is even sized auto-tie-breaker should be enabled as the corosync.conf says
a 2 / 2 network partition on a cluster with tie breaker enabled should leave 2 nodes alive

Reproduced on corosync 2.4.0-9 on CentOS 7.4.
A similar situation occurs if you grow a 1 node  cluster to 2 node, but the 2nd node doesn't start soon enough that I reported on the mailing list.
Upon reading the manpage I would've expected auto_tie_breaker to work only on even sized clusters, so my patch just reloads the initial value on nodelist changes and then lets corosync decide again whether it should disable auto_tie_breaker (due to odd-sized cluster and no wait_for_all).
This fixed the problem described above, but may not be the cleanest way.
Tried to reproduce the problem with vqsim but since it doesn't support nodelist  changes I haven't found a way.
Perhaps the manpage should also be updated to take into account #74 (comment) and document the behaviour of auto_tie_breaker with odd-sized  clusters and wait-for-all , should  I submit that as a separate PR?","Thank you for the review, I'll open a new PR for the manpage update later.",True,{}
corosync/corosync,https://github.com/corosync/corosync,247,2017-09-27T04:17:16Z,2017-10-02T09:37:28Z,2017-10-02T09:37:29Z,CLOSED,False,0,14,1,https://github.com/inouekazu,totemudp: Do not discard memb_join messages at udp layer,1,[],https://github.com/corosync/corosync/pull/247,https://github.com/inouekazu,1,https://github.com/corosync/corosync/pull/247,"According to the ab8942f , since totemsrp discards memb_join messages when flushing, I think it is unnecessary in totemudp.
If two nodes are stopped at the same time, the LEAVE message may be discarded here and a log indicating that it has not stopped cleanly may be output in some cases.
Sep 26 06:50:37 rhel69-3 corosync[22608]:  [TOTEM ] Failed to receive the leave message. failed: 3232261507


node-1
Sep 26 06:50:33 rhel69-1 pacemakerd[8821]:   notice: Caught 'Terminated' signal
Sep 26 06:50:33 rhel69-1 pacemakerd[8821]:   notice: Shutting down Pacemaker
(snip)
Sep 26 06:50:34 rhel69-1 pacemakerd[8821]:     info: Exiting pacemakerd
Sep 26 06:50:34 rhel69-1 pacemakerd[8821]:     info: Cleaning up memory from libxml2
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [MAIN  ] Node was shut down by a signal
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [SERV  ] Unloading all Corosync service engines.
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [QB    ] withdrawing server sockets
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [SERV  ] Service engine unloaded: corosync vote quorum service v1.0
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [QB    ] withdrawing server sockets
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [SERV  ] Service engine unloaded: corosync configuration map access
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [QB    ] withdrawing server sockets
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [SERV  ] Service engine unloaded: corosync configuration service
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [QB    ] withdrawing server sockets
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [SERV  ] Service engine unloaded: corosync cluster closed process group service v1.01
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [QB    ] withdrawing server sockets
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [SERV  ] Service engine unloaded: corosync cluster quorum service v0.1
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [SERV  ] Service engine unloaded: corosync profile loading service
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [SERV  ] Service engine unloaded: corosync watchdog service
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [MAIN  ] Corosync Cluster Engine exiting normally


node-2
Sep 26 06:50:33 rhel69-3 crmd[22639]:     info: handle_request: Node rhel69-1[3232261507] - expected state is now down (was member)
Sep 26 06:50:33 rhel69-3 crmd[22639]:     info: Creating shutdown request for rhel69-1 (state=S_IDLE)
(snip)
Sep 26 06:50:33 rhel69-3 pacemakerd[22617]:   notice: Caught 'Terminated' signal
Sep 26 06:50:33 rhel69-3 pacemakerd[22617]:   notice: Shutting down Pacemaker
(snip. the stop process of resources begins.)
Sep 26 06:50:34 rhel69-3 corosync[22608]:  [TOTEM ] JOIN or LEAVE message was thrown away during flush operation.
Sep 26 06:50:34 rhel69-3 corosync[22608]:  [TOTEM ] JOIN or LEAVE message was thrown away during flush operation.
Sep 26 06:50:35 rhel69-3 corosync[22608]:  [TOTEM ] A processor failed, forming new configuration.
Sep 26 06:50:37 rhel69-3 corosync[22608]:  [TOTEM ] A new membership (192.168.101.133:12) was formed. Members left: 3232261507

Sep 26 06:50:37 rhel69-3 corosync[22608]:  [TOTEM ] Failed to receive the leave message. failed: 3232261507

Sep 26 06:50:37 rhel69-3 corosync[22608]:  [QUORUM] This node is within the non-primary component and will NOT provide any services.
Sep 26 06:50:37 rhel69-3 corosync[22608]:  [QUORUM] Members[1]: 3232261509
Sep 26 06:50:37 rhel69-3 corosync[22608]:  [MAIN  ] Completed service synchronization, ready to provide service.
(snip)
Sep 26 06:50:38 rhel69-3 pacemakerd[22617]:     info: Exiting pacemakerd
Sep 26 06:50:38 rhel69-3 pacemakerd[22617]:     info: Cleaning up memory from libxml2
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [MAIN  ] Node was shut down by a signal
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [SERV  ] Unloading all Corosync service engines.
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [QB    ] withdrawing server sockets
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [SERV  ] Service engine unloaded: corosync vote quorum service v1.0
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [QB    ] withdrawing server sockets
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [SERV  ] Service engine unloaded: corosync configuration map access
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [QB    ] withdrawing server sockets
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [SERV  ] Service engine unloaded: corosync configuration service
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [QB    ] withdrawing server sockets
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [SERV  ] Service engine unloaded: corosync cluster closed process group service v1.01
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [QB    ] withdrawing server sockets
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [SERV  ] Service engine unloaded: corosync cluster quorum service v0.1
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [SERV  ] Service engine unloaded: corosync profile loading service
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [SERV  ] Service engine unloaded: corosync watchdog service
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [MAIN  ] Corosync Cluster Engine exiting normally","According to the ab8942f , since totemsrp discards memb_join messages when flushing, I think it is unnecessary in totemudp.
If two nodes are stopped at the same time, the LEAVE message may be discarded here and a log indicating that it has not stopped cleanly may be output in some cases.
Sep 26 06:50:37 rhel69-3 corosync[22608]:  [TOTEM ] Failed to receive the leave message. failed: 3232261507


node-1
Sep 26 06:50:33 rhel69-1 pacemakerd[8821]:   notice: Caught 'Terminated' signal
Sep 26 06:50:33 rhel69-1 pacemakerd[8821]:   notice: Shutting down Pacemaker
(snip)
Sep 26 06:50:34 rhel69-1 pacemakerd[8821]:     info: Exiting pacemakerd
Sep 26 06:50:34 rhel69-1 pacemakerd[8821]:     info: Cleaning up memory from libxml2
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [MAIN  ] Node was shut down by a signal
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [SERV  ] Unloading all Corosync service engines.
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [QB    ] withdrawing server sockets
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [SERV  ] Service engine unloaded: corosync vote quorum service v1.0
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [QB    ] withdrawing server sockets
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [SERV  ] Service engine unloaded: corosync configuration map access
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [QB    ] withdrawing server sockets
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [SERV  ] Service engine unloaded: corosync configuration service
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [QB    ] withdrawing server sockets
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [SERV  ] Service engine unloaded: corosync cluster closed process group service v1.01
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [QB    ] withdrawing server sockets
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [SERV  ] Service engine unloaded: corosync cluster quorum service v0.1
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [SERV  ] Service engine unloaded: corosync profile loading service
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [SERV  ] Service engine unloaded: corosync watchdog service
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [MAIN  ] Corosync Cluster Engine exiting normally


node-2
Sep 26 06:50:33 rhel69-3 crmd[22639]:     info: handle_request: Node rhel69-1[3232261507] - expected state is now down (was member)
Sep 26 06:50:33 rhel69-3 crmd[22639]:     info: Creating shutdown request for rhel69-1 (state=S_IDLE)
(snip)
Sep 26 06:50:33 rhel69-3 pacemakerd[22617]:   notice: Caught 'Terminated' signal
Sep 26 06:50:33 rhel69-3 pacemakerd[22617]:   notice: Shutting down Pacemaker
(snip. the stop process of resources begins.)
Sep 26 06:50:34 rhel69-3 corosync[22608]:  [TOTEM ] JOIN or LEAVE message was thrown away during flush operation.
Sep 26 06:50:34 rhel69-3 corosync[22608]:  [TOTEM ] JOIN or LEAVE message was thrown away during flush operation.
Sep 26 06:50:35 rhel69-3 corosync[22608]:  [TOTEM ] A processor failed, forming new configuration.
Sep 26 06:50:37 rhel69-3 corosync[22608]:  [TOTEM ] A new membership (192.168.101.133:12) was formed. Members left: 3232261507

Sep 26 06:50:37 rhel69-3 corosync[22608]:  [TOTEM ] Failed to receive the leave message. failed: 3232261507

Sep 26 06:50:37 rhel69-3 corosync[22608]:  [QUORUM] This node is within the non-primary component and will NOT provide any services.
Sep 26 06:50:37 rhel69-3 corosync[22608]:  [QUORUM] Members[1]: 3232261509
Sep 26 06:50:37 rhel69-3 corosync[22608]:  [MAIN  ] Completed service synchronization, ready to provide service.
(snip)
Sep 26 06:50:38 rhel69-3 pacemakerd[22617]:     info: Exiting pacemakerd
Sep 26 06:50:38 rhel69-3 pacemakerd[22617]:     info: Cleaning up memory from libxml2
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [MAIN  ] Node was shut down by a signal
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [SERV  ] Unloading all Corosync service engines.
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [QB    ] withdrawing server sockets
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [SERV  ] Service engine unloaded: corosync vote quorum service v1.0
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [QB    ] withdrawing server sockets
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [SERV  ] Service engine unloaded: corosync configuration map access
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [QB    ] withdrawing server sockets
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [SERV  ] Service engine unloaded: corosync configuration service
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [QB    ] withdrawing server sockets
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [SERV  ] Service engine unloaded: corosync cluster closed process group service v1.01
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [QB    ] withdrawing server sockets
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [SERV  ] Service engine unloaded: corosync cluster quorum service v0.1
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [SERV  ] Service engine unloaded: corosync profile loading service
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [SERV  ] Service engine unloaded: corosync watchdog service
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [MAIN  ] Corosync Cluster Engine exiting normally",True,{}
corosync/corosync,https://github.com/corosync/corosync,247,2017-09-27T04:17:16Z,2017-10-02T09:37:28Z,2017-10-02T09:37:29Z,CLOSED,False,0,14,1,https://github.com/inouekazu,totemudp: Do not discard memb_join messages at udp layer,1,[],https://github.com/corosync/corosync/pull/247,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/247#issuecomment-333486429,"According to the ab8942f , since totemsrp discards memb_join messages when flushing, I think it is unnecessary in totemudp.
If two nodes are stopped at the same time, the LEAVE message may be discarded here and a log indicating that it has not stopped cleanly may be output in some cases.
Sep 26 06:50:37 rhel69-3 corosync[22608]:  [TOTEM ] Failed to receive the leave message. failed: 3232261507


node-1
Sep 26 06:50:33 rhel69-1 pacemakerd[8821]:   notice: Caught 'Terminated' signal
Sep 26 06:50:33 rhel69-1 pacemakerd[8821]:   notice: Shutting down Pacemaker
(snip)
Sep 26 06:50:34 rhel69-1 pacemakerd[8821]:     info: Exiting pacemakerd
Sep 26 06:50:34 rhel69-1 pacemakerd[8821]:     info: Cleaning up memory from libxml2
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [MAIN  ] Node was shut down by a signal
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [SERV  ] Unloading all Corosync service engines.
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [QB    ] withdrawing server sockets
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [SERV  ] Service engine unloaded: corosync vote quorum service v1.0
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [QB    ] withdrawing server sockets
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [SERV  ] Service engine unloaded: corosync configuration map access
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [QB    ] withdrawing server sockets
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [SERV  ] Service engine unloaded: corosync configuration service
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [QB    ] withdrawing server sockets
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [SERV  ] Service engine unloaded: corosync cluster closed process group service v1.01
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [QB    ] withdrawing server sockets
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [SERV  ] Service engine unloaded: corosync cluster quorum service v0.1
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [SERV  ] Service engine unloaded: corosync profile loading service
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [SERV  ] Service engine unloaded: corosync watchdog service
Sep 26 06:50:34 rhel69-1 corosync[8812]:  [MAIN  ] Corosync Cluster Engine exiting normally


node-2
Sep 26 06:50:33 rhel69-3 crmd[22639]:     info: handle_request: Node rhel69-1[3232261507] - expected state is now down (was member)
Sep 26 06:50:33 rhel69-3 crmd[22639]:     info: Creating shutdown request for rhel69-1 (state=S_IDLE)
(snip)
Sep 26 06:50:33 rhel69-3 pacemakerd[22617]:   notice: Caught 'Terminated' signal
Sep 26 06:50:33 rhel69-3 pacemakerd[22617]:   notice: Shutting down Pacemaker
(snip. the stop process of resources begins.)
Sep 26 06:50:34 rhel69-3 corosync[22608]:  [TOTEM ] JOIN or LEAVE message was thrown away during flush operation.
Sep 26 06:50:34 rhel69-3 corosync[22608]:  [TOTEM ] JOIN or LEAVE message was thrown away during flush operation.
Sep 26 06:50:35 rhel69-3 corosync[22608]:  [TOTEM ] A processor failed, forming new configuration.
Sep 26 06:50:37 rhel69-3 corosync[22608]:  [TOTEM ] A new membership (192.168.101.133:12) was formed. Members left: 3232261507

Sep 26 06:50:37 rhel69-3 corosync[22608]:  [TOTEM ] Failed to receive the leave message. failed: 3232261507

Sep 26 06:50:37 rhel69-3 corosync[22608]:  [QUORUM] This node is within the non-primary component and will NOT provide any services.
Sep 26 06:50:37 rhel69-3 corosync[22608]:  [QUORUM] Members[1]: 3232261509
Sep 26 06:50:37 rhel69-3 corosync[22608]:  [MAIN  ] Completed service synchronization, ready to provide service.
(snip)
Sep 26 06:50:38 rhel69-3 pacemakerd[22617]:     info: Exiting pacemakerd
Sep 26 06:50:38 rhel69-3 pacemakerd[22617]:     info: Cleaning up memory from libxml2
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [MAIN  ] Node was shut down by a signal
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [SERV  ] Unloading all Corosync service engines.
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [QB    ] withdrawing server sockets
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [SERV  ] Service engine unloaded: corosync vote quorum service v1.0
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [QB    ] withdrawing server sockets
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [SERV  ] Service engine unloaded: corosync configuration map access
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [QB    ] withdrawing server sockets
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [SERV  ] Service engine unloaded: corosync configuration service
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [QB    ] withdrawing server sockets
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [SERV  ] Service engine unloaded: corosync cluster closed process group service v1.01
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [QB    ] withdrawing server sockets
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [SERV  ] Service engine unloaded: corosync cluster quorum service v0.1
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [SERV  ] Service engine unloaded: corosync profile loading service
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [SERV  ] Service engine unloaded: corosync watchdog service
Sep 26 06:50:38 rhel69-3 corosync[22608]:  [MAIN  ] Corosync Cluster Engine exiting normally","@inouekazu Yep, I fully agree with you, good catch. The code in totemudp seems to be  really suboptimal version of proper solution introduced by ab8942f. So ACK and merged as 576a493 / 4274c4b .
Thank you for the patch, really good work.",True,{}
corosync/corosync,https://github.com/corosync/corosync,248,2017-10-10T14:56:37Z,2017-10-11T15:17:06Z,2017-10-11T15:17:06Z,CLOSED,False,2,1,1,https://github.com/jjd27,cmap: don't shutdown node with highest config_version,1,[],https://github.com/corosync/corosync/pull/248,https://github.com/jjd27,1,https://github.com/corosync/corosync/pull/248,"Scenario:

node A starts corosync with config_version = 2, nodelist = {A, B}, then
node B starts corosync with config_version = 1, nodelist = {A, B}

corosync.conf(5) says the config_version option is ""used to prevent joining old
nodes with not up-to-date configuration.""
So expected outcome is:

corosync on node A remains alive
corosync on node B exits

Actual outcome is:

corosync on node A exits
corosync on node B exits

Explanation of actual behaviour:

Host A will have cmap_my_config_version = 2 but
cmap_highest_config_version_received = 1, so will shutdown in
cmap_sync_activate because these are not equal.
Host B will have cmap_my_config_version = 1 but
cmap_highest_config_version_received = 2, so will shutdown in
cmap_sync_activate because these are not equal.

Instead, node A should consider its own config_version in the calculation of the
highest config_version, i.e. cmap_highest_config_version_received = 2, and so
not shutdown in cmap_sync_activate.","Scenario:

node A starts corosync with config_version = 2, nodelist = {A, B}, then
node B starts corosync with config_version = 1, nodelist = {A, B}

corosync.conf(5) says the config_version option is ""used to prevent joining old
nodes with not up-to-date configuration.""
So expected outcome is:

corosync on node A remains alive
corosync on node B exits

Actual outcome is:

corosync on node A exits
corosync on node B exits

Explanation of actual behaviour:

Host A will have cmap_my_config_version = 2 but
cmap_highest_config_version_received = 1, so will shutdown in
cmap_sync_activate because these are not equal.
Host B will have cmap_my_config_version = 1 but
cmap_highest_config_version_received = 2, so will shutdown in
cmap_sync_activate because these are not equal.

Instead, node A should consider its own config_version in the calculation of the
highest config_version, i.e. cmap_highest_config_version_received = 2, and so
not shutdown in cmap_sync_activate.",True,{}
corosync/corosync,https://github.com/corosync/corosync,248,2017-10-10T14:56:37Z,2017-10-11T15:17:06Z,2017-10-11T15:17:06Z,CLOSED,False,2,1,1,https://github.com/jjd27,cmap: don't shutdown node with highest config_version,1,[],https://github.com/corosync/corosync/pull/248,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/248#issuecomment-335845809,"Scenario:

node A starts corosync with config_version = 2, nodelist = {A, B}, then
node B starts corosync with config_version = 1, nodelist = {A, B}

corosync.conf(5) says the config_version option is ""used to prevent joining old
nodes with not up-to-date configuration.""
So expected outcome is:

corosync on node A remains alive
corosync on node B exits

Actual outcome is:

corosync on node A exits
corosync on node B exits

Explanation of actual behaviour:

Host A will have cmap_my_config_version = 2 but
cmap_highest_config_version_received = 1, so will shutdown in
cmap_sync_activate because these are not equal.
Host B will have cmap_my_config_version = 1 but
cmap_highest_config_version_received = 2, so will shutdown in
cmap_sync_activate because these are not equal.

Instead, node A should consider its own config_version in the calculation of the
highest config_version, i.e. cmap_highest_config_version_received = 2, and so
not shutdown in cmap_sync_activate.","@jjd27 Good catch. I really like patch, so ACK and merged as 2d0e811 / 0445248 . I've also merged 2fbb2b9 to remove no longer valid check (honestly, I'm not sure why I've ever implemented that check)
Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,249,2017-10-17T16:47:54Z,2017-10-20T12:41:08Z,2018-03-02T16:48:14Z,CLOSED,False,7389,312,102,https://github.com/jfriesse,qdevice: Add heuristics,1,[],https://github.com/corosync/corosync/pull/249,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/249,"Example configuration:
            heuristics {
# Mode - on/off/sync
                mode: sync
# Default 1/2 instance->heartbeat_interval
##              timeout: 5
# Default 1/2 instance->sync_heartbeat_interval
#               sync_timeout: 15
# Default 3 * instance->heartbeat_interval
#               interval: 30
#               interval: 3000
#               interval: 3000
# Executables
#               exec_ping: /bin/ping -q -c 1 ""127.0.0.1""
#               exec_ls: /usr/bin/test -f /etc/corosync/corosync.conf
#               exec_ls2: /bin/cat /dev/zero
                exec_test: /usr/bin/test -f /tmp/a
            }","Example configuration:
            heuristics {
# Mode - on/off/sync
                mode: sync
# Default 1/2 instance->heartbeat_interval
##              timeout: 5
# Default 1/2 instance->sync_heartbeat_interval
#               sync_timeout: 15
# Default 3 * instance->heartbeat_interval
#               interval: 30
#               interval: 3000
#               interval: 3000
# Executables
#               exec_ping: /bin/ping -q -c 1 ""127.0.0.1""
#               exec_ls: /usr/bin/test -f /etc/corosync/corosync.conf
#               exec_ls2: /bin/cat /dev/zero
                exec_test: /usr/bin/test -f /tmp/a
            }",True,{}
corosync/corosync,https://github.com/corosync/corosync,249,2017-10-17T16:47:54Z,2017-10-20T12:41:08Z,2018-03-02T16:48:14Z,CLOSED,False,7389,312,102,https://github.com/jfriesse,qdevice: Add heuristics,1,[],https://github.com/corosync/corosync/pull/249,https://github.com/chrissie-c,2,https://github.com/corosync/corosync/pull/249#issuecomment-337905666,"Example configuration:
            heuristics {
# Mode - on/off/sync
                mode: sync
# Default 1/2 instance->heartbeat_interval
##              timeout: 5
# Default 1/2 instance->sync_heartbeat_interval
#               sync_timeout: 15
# Default 3 * instance->heartbeat_interval
#               interval: 30
#               interval: 3000
#               interval: 3000
# Executables
#               exec_ping: /bin/ping -q -c 1 ""127.0.0.1""
#               exec_ls: /usr/bin/test -f /etc/corosync/corosync.conf
#               exec_ls2: /bin/cat /dev/zero
                exec_test: /usr/bin/test -f /tmp/a
            }","Some English fixes to the man pages
diff --git a/man/corosync-qdevice-tool.8 b/man/corosync-qdevice-tool.8
index 8374bb0..ac71e59 100644
--- a/man/corosync-qdevice-tool.8
+++ b/man/corosync-qdevice-tool.8
@@ -115,11 +115,11 @@ For model net, it's good to check the
.I Poll timer running
state. Internally, model net supports 3 states. Not voting (when
.I Poll timer running
-is No, what means
+is No, which means
.B corosync-qdevice
is waiting for
.B corosync-qnetd
-reply), voting (without cast vote, it means that the
+to reply), voting (without cast vote, it means that the
.B corosync-qnetd
algorithm decides that the current node shouldn't get a vote) and voting (with cast vote).
.SH SEE ALSO
diff --git a/man/corosync-qdevice.8 b/man/corosync-qdevice.8
index f49792d..61d98ae 100644
--- a/man/corosync-qdevice.8
+++ b/man/corosync-qdevice.8
@@ -96,20 +96,20 @@ sum(votes_per_node) - 1.
.PP
.B quorum.device.heuristics
-subkey holds the configuration of heuristics. Heuristics is set of commands executed locally on
+subkey holds the configuration of the heuristics. Heuristics are set of commands executed locally on
startup, cluster membership change, successful connect to
.B corosync-qnetd
-and optionally also at regular times. When all commands finishes successfully
-(their return error code is zero) on time
-heuristics passed, otherwise failed. Heuristics result is sent to
+and optionally also at regular times. When all commands finish successfully
+(their return error code is zero) on time,
+heuristics have passed, otherwise they have failed. The heuristics result is sent to
.B corosync-qnetd
-and there it's used in calculations of which partition should be quorate.
+and there it's used in calculations to determine which partition should be quorate.
.TP
.B timeout
Specifies maximum time in milliseconds how long
.B corosync-qdevice
-waits till heuristics commands finishes. When some command doesn't finish before timeout, it's
-killed and heuristics fails. This timeout is used for heuristics executed at regular times.
+waits till the heuristics commands finish. If some command doesn't finish before the timeout, it's
+killed and heuristics fail. This timeout is used for heuristics executed at regular times.
Default value is half of the quorum.device.timeout, so 5000.
.TP
.B sync_timeout
@@ -127,10 +127,10 @@ and specifies mode of operation of heuristics. Default is
.I off
what means heuristics are disabled. When
.I sync
-is set, heuristics is executed only during startup, membership change and when connection
+is set, heuristics are executed only during startup, membership change and when connection
to
.B corosync-qnetd
-is established. When heuristics should be running also on regular basis, option
+is established. When heuristics should be running also on regular basis, this option
should be set to
.I on
value.
@@ -139,7 +139,7 @@ value.
defines executables.
.I NAME
can be arbitrary valid cmap key name string and it has no special meaning.
-Value of variable must contain command to execute. Value is parsed (split)
+The value of this variable must contain a command to execute. The alue is parsed (split)
into arguments similarly as Bourne shell would do. Quoting is possible by
using backslash and double quotes.
@@ -256,13 +256,13 @@ Algorithms are used to change behavior of how
provides votes to a given node/partition. Currently there are two algorithms supported.
.TP
.B ffsplit
-This one makes sense only for clusters with even number of nodes. It provides exactly one
+This one makes sense only for clusters with an even number of nodes. It provides exactly one
vote to the partition with the highest number of active nodes. If there are two exactly
similar partitions,
-it provides its vote to the partition with higher score. Score is computed
+it provides its vote to the partition with higher score. The score is computed
as (number_of_connected_nodes +
number_of_connected_nodes_with_passed_heuristics - number_of_connected_nodes_with_failed_heuristics)
-If score equals, vote is provided to partition with the most clients connected to the qnetd
+If the scores are equal, the vote is provided to partition with the most clients connected to the qnetd
server. If this number is also equal, then the tie_breaker is used. It is able to transition
its vote if the currently active partition becomes partitioned and a non-active partition
still has at least 50% of the active nodes. Because of this, a vote is not provided
@@ -280,10 +280,10 @@ qnetd server then we return a vote.
If more than one node can see the qnetd server but some nodes can't
see each other then the cluster is divided up into 'partitions' based on
their ring_id and this algorithm returns a vote to the partition with highest
-heuristics score (computed same way as for
+heuristics score (computed the same way as for the
.B ffsplit
-algorithm), or if there is more than 1 partitions with equal score,
-largest active partition or,
+algorithm), or if there is more than 1 partition with equal scores,
+the largest active partition or,
if there is more than 1 equal partition, the partition that contains the tie_breaker
node (lowest, highest, etc). For LMS to work, the number
of qdevice votes has to be set to default (so just delete",True,{}
corosync/corosync,https://github.com/corosync/corosync,249,2017-10-17T16:47:54Z,2017-10-20T12:41:08Z,2018-03-02T16:48:14Z,CLOSED,False,7389,312,102,https://github.com/jfriesse,qdevice: Add heuristics,1,[],https://github.com/corosync/corosync/pull/249,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/249#issuecomment-338179989,"Example configuration:
            heuristics {
# Mode - on/off/sync
                mode: sync
# Default 1/2 instance->heartbeat_interval
##              timeout: 5
# Default 1/2 instance->sync_heartbeat_interval
#               sync_timeout: 15
# Default 3 * instance->heartbeat_interval
#               interval: 30
#               interval: 3000
#               interval: 3000
# Executables
#               exec_ping: /bin/ping -q -c 1 ""127.0.0.1""
#               exec_ls: /usr/bin/test -f /etc/corosync/corosync.conf
#               exec_ls2: /bin/cat /dev/zero
                exec_test: /usr/bin/test -f /tmp/a
            }","@chrissie-c:
What about following patch:
diff --git a/man/corosync-qdevice.8 b/man/corosync-qdevice.8
index b16281a..6bed552 100644
--- a/man/corosync-qdevice.8
+++ b/man/corosync-qdevice.8
@@ -396,6 +396,33 @@ Maximum connection timeout accepted by client in ms. (120000)
 .TP
 .B net_test_algorithm_enabled
 Enable test algorithm. (if built with --enable-debug on, otherwise off)
+
+.SH EXAMPLE
+Define qdevice with
+.I net
+model connecting to qnetd running on qnetd.example.org host, using ffsplit algorithm.
+Heuristics is set to
+.I sync
+mode and executes two commands.
+
+.nf
+quorum {
+  provider: corosync_votequorum
+  device {
+    votes: 1
+    model: net
+    net {
+      tls: on
+      host: qnetd.example.org
+      algorithm: ffsplit
+    }
+    heuristics {
+      mode: sync
+      exec_ping: /bin/ping -q -c 1 ""www.example.org""
+      exec_test_txt_exists: /usr/bin/test -f /tmp/test.txt
+    }
+}
+.fi
 .SH SEE ALSO
 .BR corosync-qdevice-tool (8)
 .BR corosync-qdevice-net-certutil (8)",True,{}
corosync/corosync,https://github.com/corosync/corosync,249,2017-10-17T16:47:54Z,2017-10-20T12:41:08Z,2018-03-02T16:48:14Z,CLOSED,False,7389,312,102,https://github.com/jfriesse,qdevice: Add heuristics,1,[],https://github.com/corosync/corosync/pull/249,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/249#issuecomment-338195354,"Example configuration:
            heuristics {
# Mode - on/off/sync
                mode: sync
# Default 1/2 instance->heartbeat_interval
##              timeout: 5
# Default 1/2 instance->sync_heartbeat_interval
#               sync_timeout: 15
# Default 3 * instance->heartbeat_interval
#               interval: 30
#               interval: 3000
#               interval: 3000
# Executables
#               exec_ping: /bin/ping -q -c 1 ""127.0.0.1""
#               exec_ls: /usr/bin/test -f /etc/corosync/corosync.conf
#               exec_ls2: /bin/cat /dev/zero
                exec_test: /usr/bin/test -f /tmp/a
            }",Merged as 42ee893 / e37c701,True,{}
corosync/corosync,https://github.com/corosync/corosync,250,2017-10-18T08:33:00Z,2017-10-18T08:49:43Z,2017-10-18T20:20:57Z,CLOSED,False,2,2,1,https://github.com/kskmori,Spec: fix arch-qualified dependencies,1,[],https://github.com/corosync/corosync/pull/250,https://github.com/kskmori,1,https://github.com/corosync/corosync/pull/250,"RPM installation of corosync fails if it's built from the latest repository:
[root@build-centos71 x86_64 (needle)]# yum install corosync-2.4.2-1.45.2fbb.el7.x86_64.rpm corosynclib-2.4.2-1.45.2fbb.el7.x86_64.rpm corosynclib-devel-2.4.2-1.45.2fbb.el7.x86_64.rpm 
(...)
Error: Package: corosync-2.4.2-1.45.2fbb.el7.x86_64 (/corosync-2.4.2-1.45.2fbb.el7.x86_64)
           Requires: corosynclib{?_isa} = 2.4.2-1.45.2fbb.el7
 You could try using --skip-broken to work around the problem
 You could try running: rpm -Va --nofiles --nodigest
[root@build-centos71 x86_64 (needle)]# 

It is apparently related to the commit 30af252 .
The same fix seems to be needed both for master and needle branches.","RPM installation of corosync fails if it's built from the latest repository:
[root@build-centos71 x86_64 (needle)]# yum install corosync-2.4.2-1.45.2fbb.el7.x86_64.rpm corosynclib-2.4.2-1.45.2fbb.el7.x86_64.rpm corosynclib-devel-2.4.2-1.45.2fbb.el7.x86_64.rpm 
(...)
Error: Package: corosync-2.4.2-1.45.2fbb.el7.x86_64 (/corosync-2.4.2-1.45.2fbb.el7.x86_64)
           Requires: corosynclib{?_isa} = 2.4.2-1.45.2fbb.el7
 You could try using --skip-broken to work around the problem
 You could try running: rpm -Va --nofiles --nodigest
[root@build-centos71 x86_64 (needle)]# 

It is apparently related to the commit 30af252 .
The same fix seems to be needed both for master and needle branches.",True,{}
corosync/corosync,https://github.com/corosync/corosync,250,2017-10-18T08:33:00Z,2017-10-18T08:49:43Z,2017-10-18T20:20:57Z,CLOSED,False,2,2,1,https://github.com/kskmori,Spec: fix arch-qualified dependencies,1,[],https://github.com/corosync/corosync/pull/250,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/250#issuecomment-337509466,"RPM installation of corosync fails if it's built from the latest repository:
[root@build-centos71 x86_64 (needle)]# yum install corosync-2.4.2-1.45.2fbb.el7.x86_64.rpm corosynclib-2.4.2-1.45.2fbb.el7.x86_64.rpm corosynclib-devel-2.4.2-1.45.2fbb.el7.x86_64.rpm 
(...)
Error: Package: corosync-2.4.2-1.45.2fbb.el7.x86_64 (/corosync-2.4.2-1.45.2fbb.el7.x86_64)
           Requires: corosynclib{?_isa} = 2.4.2-1.45.2fbb.el7
 You could try using --skip-broken to work around the problem
 You could try running: rpm -Va --nofiles --nodigest
[root@build-centos71 x86_64 (needle)]# 

It is apparently related to the commit 30af252 .
The same fix seems to be needed both for master and needle branches.","@kskmori Good catch, nice patch, ACK and merged as 5f81455 / c8c257e.
Thank you for the patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,250,2017-10-18T08:33:00Z,2017-10-18T08:49:43Z,2017-10-18T20:20:57Z,CLOSED,False,2,2,1,https://github.com/kskmori,Spec: fix arch-qualified dependencies,1,[],https://github.com/corosync/corosync/pull/250,https://github.com/jnpkrn,3,https://github.com/corosync/corosync/pull/250#issuecomment-337715862,"RPM installation of corosync fails if it's built from the latest repository:
[root@build-centos71 x86_64 (needle)]# yum install corosync-2.4.2-1.45.2fbb.el7.x86_64.rpm corosynclib-2.4.2-1.45.2fbb.el7.x86_64.rpm corosynclib-devel-2.4.2-1.45.2fbb.el7.x86_64.rpm 
(...)
Error: Package: corosync-2.4.2-1.45.2fbb.el7.x86_64 (/corosync-2.4.2-1.45.2fbb.el7.x86_64)
           Requires: corosynclib{?_isa} = 2.4.2-1.45.2fbb.el7
 You could try using --skip-broken to work around the problem
 You could try running: rpm -Va --nofiles --nodigest
[root@build-centos71 x86_64 (needle)]# 

It is apparently related to the commit 30af252 .
The same fix seems to be needed both for master and needle branches.","Oopsie, thanks for fixing that.",True,{}
corosync/corosync,https://github.com/corosync/corosync,251,2017-10-19T21:10:34Z,2017-10-23T16:12:12Z,2017-10-23T16:12:13Z,CLOSED,False,1,7,1,https://github.com/jnpkrn,Delegate & avoid redundancy wrt. libqb's callsite section checking,1,[],https://github.com/corosync/corosync/pull/251,https://github.com/jnpkrn,1,https://github.com/corosync/corosync/pull/251,"Previously, corosync executable was repeatedly (proportionally to the
count of LOGSYS_DECLARE_SUBSYS macro applications involved in the
constituent source files) checking the same for no gain in the pre-main
startup.  This is not needed since nothing changes with static data
shared withing the same program space (it may have been a different
story once upon a time if loadable modules were in use), so make that
happen in (one-off per executable) LOGSYS_DECLARE_SYSTEM instead.
And as of 7+ years ago, libqb offers it's own ready-made macro to that
effect, simply to isolate the inner percularities from the library user
(that should not be required to understand anything about the orphan
sections and respective autocreated symbols to denote their boundaries).
As it is compile-time conditionalized in the same way, just use it
directly instead.  As a value added, corosync will be kept up to date
about the possibly growing set of the logging-sanity checks as it gets
compiled with newer and newer libqb versions (their header files, for
that matter).
Signed-off-by: Jan Pokorný jpokorny@redhat.com","Previously, corosync executable was repeatedly (proportionally to the
count of LOGSYS_DECLARE_SUBSYS macro applications involved in the
constituent source files) checking the same for no gain in the pre-main
startup.  This is not needed since nothing changes with static data
shared withing the same program space (it may have been a different
story once upon a time if loadable modules were in use), so make that
happen in (one-off per executable) LOGSYS_DECLARE_SYSTEM instead.
And as of 7+ years ago, libqb offers it's own ready-made macro to that
effect, simply to isolate the inner percularities from the library user
(that should not be required to understand anything about the orphan
sections and respective autocreated symbols to denote their boundaries).
As it is compile-time conditionalized in the same way, just use it
directly instead.  As a value added, corosync will be kept up to date
about the possibly growing set of the logging-sanity checks as it gets
compiled with newer and newer libqb versions (their header files, for
that matter).
Signed-off-by: Jan Pokorný jpokorny@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,251,2017-10-19T21:10:34Z,2017-10-23T16:12:12Z,2017-10-23T16:12:13Z,CLOSED,False,1,7,1,https://github.com/jnpkrn,Delegate & avoid redundancy wrt. libqb's callsite section checking,1,[],https://github.com/corosync/corosync/pull/251,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/251#issuecomment-338711890,"Previously, corosync executable was repeatedly (proportionally to the
count of LOGSYS_DECLARE_SUBSYS macro applications involved in the
constituent source files) checking the same for no gain in the pre-main
startup.  This is not needed since nothing changes with static data
shared withing the same program space (it may have been a different
story once upon a time if loadable modules were in use), so make that
happen in (one-off per executable) LOGSYS_DECLARE_SYSTEM instead.
And as of 7+ years ago, libqb offers it's own ready-made macro to that
effect, simply to isolate the inner percularities from the library user
(that should not be required to understand anything about the orphan
sections and respective autocreated symbols to denote their boundaries).
As it is compile-time conditionalized in the same way, just use it
directly instead.  As a value added, corosync will be kept up to date
about the possibly growing set of the logging-sanity checks as it gets
compiled with newer and newer libqb versions (their header files, for
that matter).
Signed-off-by: Jan Pokorný jpokorny@redhat.com",@jnpkrn Patch looks good so ACK and merged as f8acfe1 / 5ed5282,True,{}
corosync/corosync,https://github.com/corosync/corosync,252,2017-10-20T08:19:10Z,2017-10-23T15:34:27Z,2017-10-23T15:34:27Z,CLOSED,False,236,26,16,https://github.com/chrissie-c,Add support for knet compression,2,[],https://github.com/corosync/corosync/pull/252,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/252,I see no reason to enable this by default but at Summit it was thought to be a useful option,I see no reason to enable this by default but at Summit it was thought to be a useful option,True,{}
corosync/corosync,https://github.com/corosync/corosync,252,2017-10-20T08:19:10Z,2017-10-23T15:34:27Z,2017-10-23T15:34:27Z,CLOSED,False,236,26,16,https://github.com/chrissie-c,Add support for knet compression,2,[],https://github.com/corosync/corosync/pull/252,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/252#issuecomment-338699341,I see no reason to enable this by default but at Summit it was thought to be a useful option,"@chrissie-c Nice patch, ACK and merged as 16f616b and 396bca4 .
Thank you for the patch,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,253,2017-10-23T11:26:02Z,2017-10-23T15:08:58Z,2017-10-23T16:09:58Z,CLOSED,False,30,30,13,https://github.com/wferi,Needle typo fixes,2,[],https://github.com/corosync/corosync/pull/253,https://github.com/wferi,1,https://github.com/corosync/corosync/pull/253,"The first commit is a cherry-pick from the master branch.
The second only applies to needle, the deprecated option was already removed in master.","The first commit is a cherry-pick from the master branch.
The second only applies to needle, the deprecated option was already removed in master.",True,{}
corosync/corosync,https://github.com/corosync/corosync,253,2017-10-23T11:26:02Z,2017-10-23T15:08:58Z,2017-10-23T16:09:58Z,CLOSED,False,30,30,13,https://github.com/wferi,Needle typo fixes,2,[],https://github.com/corosync/corosync/pull/253,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/253#issuecomment-338690721,"The first commit is a cherry-pick from the master branch.
The second only applies to needle, the deprecated option was already removed in master.","@wferi Nice catch, good patches so ACK and merged as 43155d6 and 0713813 .
Thank you for the patches,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,255,2017-10-24T06:13:02Z,2017-10-24T07:20:53Z,2017-10-24T09:07:29Z,CLOSED,False,1,1,1,https://github.com/liu4480,man:corosync.conf: must set nodeid for knet in nodelist,1,[],https://github.com/corosync/corosync/pull/255,https://github.com/liu4480,1,https://github.com/corosync/corosync/pull/255,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,255,2017-10-24T06:13:02Z,2017-10-24T07:20:53Z,2017-10-24T09:07:29Z,CLOSED,False,1,1,1,https://github.com/liu4480,man:corosync.conf: must set nodeid for knet in nodelist,1,[],https://github.com/corosync/corosync/pull/255,https://github.com/liu4480,2,https://github.com/corosync/corosync/pull/255#issuecomment-338887627,,"otherwise, corosync will abort at exec/totemsrp.c: main_iface_change_fn
assert (instance->my_id.addr[iface_no].nodeid);",True,{}
corosync/corosync,https://github.com/corosync/corosync,255,2017-10-24T06:13:02Z,2017-10-24T07:20:53Z,2017-10-24T09:07:29Z,CLOSED,False,1,1,1,https://github.com/liu4480,man:corosync.conf: must set nodeid for knet in nodelist,1,[],https://github.com/corosync/corosync/pull/255,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/255#issuecomment-338897939,,"@liu4480 Nice patch so ACK and merged as 83467ac
I would also very appreciate the patch which checks this condition in the code :)
Thank you for the patch,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,255,2017-10-24T06:13:02Z,2017-10-24T07:20:53Z,2017-10-24T09:07:29Z,CLOSED,False,1,1,1,https://github.com/liu4480,man:corosync.conf: must set nodeid for knet in nodelist,1,[],https://github.com/corosync/corosync/pull/255,https://github.com/liu4480,4,https://github.com/corosync/corosync/pull/255#issuecomment-338925107,,"thanks, honza, just created a new  PR #256",True,{}
corosync/corosync,https://github.com/corosync/corosync,256,2017-10-24T08:48:14Z,2017-10-26T07:47:20Z,2017-10-26T08:23:19Z,CLOSED,False,5,1,2,https://github.com/liu4480,add nodeid check for knet,2,[],https://github.com/corosync/corosync/pull/256,https://github.com/liu4480,1,https://github.com/corosync/corosync/pull/256,"As described in 83467ac, corosync will abort when nodeid is not set with
knet, this patch gives warnings to set nodeid in knet.","As described in 83467ac, corosync will abort when nodeid is not set with
knet, this patch gives warnings to set nodeid in knet.",True,{}
corosync/corosync,https://github.com/corosync/corosync,256,2017-10-24T08:48:14Z,2017-10-26T07:47:20Z,2017-10-26T08:23:19Z,CLOSED,False,5,1,2,https://github.com/liu4480,add nodeid check for knet,2,[],https://github.com/corosync/corosync/pull/256,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/256#issuecomment-339378298,"As described in 83467ac, corosync will abort when nodeid is not set with
knet, this patch gives warnings to set nodeid in knet.","@liu4480 I would rather preffer to have this check in the totemconfig.c file. Also please check that if knet transport is set, nodelist has to be present.
Second patch is good and I've already cherry-picked as bbedb07 and 57ffcba",True,{}
corosync/corosync,https://github.com/corosync/corosync,256,2017-10-24T08:48:14Z,2017-10-26T07:47:20Z,2017-10-26T08:23:19Z,CLOSED,False,5,1,2,https://github.com/liu4480,add nodeid check for knet,2,[],https://github.com/corosync/corosync/pull/256,https://github.com/liu4480,3,https://github.com/corosync/corosync/pull/256#issuecomment-339589982,"As described in 83467ac, corosync will abort when nodeid is not set with
knet, this patch gives warnings to set nodeid in knet.","@jfriesse Thanks for your suggestion, and I 've created a new PR #261",True,{}
corosync/corosync,https://github.com/corosync/corosync,258,2017-10-24T12:20:31Z,2017-10-30T12:30:29Z,2017-10-31T13:49:45Z,CLOSED,False,52,64,10,https://github.com/wferi,Introduce --configdir (idea stolen from Pacemaker),2,[],https://github.com/corosync/corosync/pull/258,https://github.com/wferi,1,https://github.com/corosync/corosync/pull/258,"To make the first commit message more explicit:

I didn't test the changed SysV init scripts and Upstart files. Debian ships its own init scripts, but even those don't get much testing, because almost everyone uses systemd nowadays, I guess.
I think Upstart support should be removed altogether.

These commits cherry-pick cleanly into needle as well.","To make the first commit message more explicit:

I didn't test the changed SysV init scripts and Upstart files. Debian ships its own init scripts, but even those don't get much testing, because almost everyone uses systemd nowadays, I guess.
I think Upstart support should be removed altogether.

These commits cherry-pick cleanly into needle as well.",True,{}
corosync/corosync,https://github.com/corosync/corosync,258,2017-10-24T12:20:31Z,2017-10-30T12:30:29Z,2017-10-31T13:49:45Z,CLOSED,False,52,64,10,https://github.com/wferi,Introduce --configdir (idea stolen from Pacemaker),2,[],https://github.com/corosync/corosync/pull/258,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/258#issuecomment-339384485,"To make the first commit message more explicit:

I didn't test the changed SysV init scripts and Upstart files. Debian ships its own init scripts, but even those don't get much testing, because almost everyone uses systemd nowadays, I guess.
I think Upstart support should be removed altogether.

These commits cherry-pick cleanly into needle as well.",@wferi I definitively like the idea and patch is also nice. I dislike the name. CONFIGDIR (at least for me) looks more like /etc/corosync (or /etc). Sad is that sysconfdir is already taken. Maybe I will find some better name but right now I'm thinking about environmentdir/envdir. What do you think about it? Or maybe you have some better idea.,True,{}
corosync/corosync,https://github.com/corosync/corosync,258,2017-10-24T12:20:31Z,2017-10-30T12:30:29Z,2017-10-31T13:49:45Z,CLOSED,False,52,64,10,https://github.com/wferi,Introduce --configdir (idea stolen from Pacemaker),2,[],https://github.com/corosync/corosync/pull/258,https://github.com/wferi,3,https://github.com/corosync/corosync/pull/258#issuecomment-339574692,"To make the first commit message more explicit:

I didn't test the changed SysV init scripts and Upstart files. Debian ships its own init scripts, but even those don't get much testing, because almost everyone uses systemd nowadays, I guess.
I think Upstart support should be removed altogether.

These commits cherry-pick cleanly into needle as well.","Actually, I don't like the name either, but it's hard to come up with something better. So I kept the name established in Pacemaker. I'm not sure about /etc/sysconfig in RedHat, but the files under /etc/default are meant to influence the init script, not to augment the environment of the started daemon. So they aren't a good match for a systemd EnvironmentFile, and I agree that they should be phased out. Corosync is somewhat unconventional in that it uses environmental variables for some settings instead of command line options; they are seldom needed, though. So another option would be dropping these changes, removing the EnvironmentFile directives from the systemd service files, dropping Upstart support and hardwiring /etc/sysconfig in the SysV init scripts, which aren't used by Debian anyway.",True,{}
corosync/corosync,https://github.com/corosync/corosync,258,2017-10-24T12:20:31Z,2017-10-30T12:30:29Z,2017-10-31T13:49:45Z,CLOSED,False,52,64,10,https://github.com/wferi,Introduce --configdir (idea stolen from Pacemaker),2,[],https://github.com/corosync/corosync/pull/258,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/258#issuecomment-339716651,"To make the first commit message more explicit:

I didn't test the changed SysV init scripts and Upstart files. Debian ships its own init scripts, but even those don't get much testing, because almost everyone uses systemd nowadays, I guess.
I think Upstart support should be removed altogether.

These commits cherry-pick cleanly into needle as well.","@wferi I must disagree with EnvironmentFile should be phased out. Let me give you quick example where systemd idea completely fails and sysconfig config file solves it.

Need add extra parameter to corosync
Copy unit file from /lib/systemd/system to /etc/systemd/system and change it
Update, which changes unit file arrives
Systemd uses /etc/systemd/system unit file and user never gets updated unit file

sysconfig/default solves it simply because it's just configuration. I'm pretty sure there are more arguments than I have, otherwise as I know power of systemd author he would be able to push removal of sysconfig to Fedora, but it is not the case.",True,{}
corosync/corosync,https://github.com/corosync/corosync,258,2017-10-24T12:20:31Z,2017-10-30T12:30:29Z,2017-10-31T13:49:45Z,CLOSED,False,52,64,10,https://github.com/wferi,Introduce --configdir (idea stolen from Pacemaker),2,[],https://github.com/corosync/corosync/pull/258,https://github.com/wferi,5,https://github.com/corosync/corosync/pull/258#issuecomment-339877135,"To make the first commit message more explicit:

I didn't test the changed SysV init scripts and Upstart files. Debian ships its own init scripts, but even those don't get much testing, because almost everyone uses systemd nowadays, I guess.
I think Upstart support should be removed altogether.

These commits cherry-pick cleanly into needle as well.","You raise a valid point. The above blog post doesn't mention it, but besides replacing the whole, systemd unit files can also be modified by creating drop-in files for example under the /etc/systemd/system/corosync.service.d directory. These can add/replace particular directives, somewhat ameliorating the problem. Unfortunately there's no way to declare variables solely for the unit's use: Environment works, but often unnecessarily pollutes the daemon environment (this is less of a problem for Corosync, which does not spawn new processes). The perfectly on-par solution would be shipping the unit files directly under /etc instead of /lib; then they could be marked conffiles and dpkg would handle them accordingly, drawing administrator attention in case of conflicts. I think nobody does this: overriding the ExecStart directive seems like a good enough solution in practice.
Also, sysconfig files can be useful for sharing configuration between SysV init scripts and systemd units, which is nice to have during the migration period or parallel support.",True,{}
corosync/corosync,https://github.com/corosync/corosync,258,2017-10-24T12:20:31Z,2017-10-30T12:30:29Z,2017-10-31T13:49:45Z,CLOSED,False,52,64,10,https://github.com/wferi,Introduce --configdir (idea stolen from Pacemaker),2,[],https://github.com/corosync/corosync/pull/258,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/258#issuecomment-339945821,"To make the first commit message more explicit:

I didn't test the changed SysV init scripts and Upstart files. Debian ships its own init scripts, but even those don't get much testing, because almost everyone uses systemd nowadays, I guess.
I think Upstart support should be removed altogether.

These commits cherry-pick cleanly into needle as well.","@wferi Yep. I believe we are on same (or at least similar ;) )page wrt. this problem. So I believe we can agree that sysconfig cannot be just deleted (or at least not right yet).
So that's why I believe your patch should be merged in, I'm just not happy with the name. What about InitConfigDir?",True,{}
corosync/corosync,https://github.com/corosync/corosync,258,2017-10-24T12:20:31Z,2017-10-30T12:30:29Z,2017-10-31T13:49:45Z,CLOSED,False,52,64,10,https://github.com/wferi,Introduce --configdir (idea stolen from Pacemaker),2,[],https://github.com/corosync/corosync/pull/258,https://github.com/wferi,7,https://github.com/corosync/corosync/pull/258#issuecomment-339971613,"To make the first commit message more explicit:

I didn't test the changed SysV init scripts and Upstart files. Debian ships its own init scripts, but even those don't get much testing, because almost everyone uses systemd nowadays, I guess.
I think Upstart support should be removed altogether.

These commits cherry-pick cleanly into needle as well.","I think that's a good name for the directory. That Corosync uses it for setting environment variables for the daemon is unusual, but could be fixed over time, I guess. Is there a reason for not using a command line switch to override the main config file location (/etc/corosync/corosync.conf) and handle all the other paths in the main config? Another option would be using a real environment file (for example /etc/corosync/corosync.env) for the actual daemon environment settings (read and exported by all init systems) and leave only OPTIONS in the sysconfig file for consumption by the SysV init script.
Anyway: if you want me to respin the patches with a different name, just specify it. Different capitalizations may be needed for the --with-XXX option name, the internal variable name and the substitution placeholder.",True,{}
corosync/corosync,https://github.com/corosync/corosync,258,2017-10-24T12:20:31Z,2017-10-30T12:30:29Z,2017-10-31T13:49:45Z,CLOSED,False,52,64,10,https://github.com/wferi,Introduce --configdir (idea stolen from Pacemaker),2,[],https://github.com/corosync/corosync/pull/258,https://github.com/jfriesse,8,https://github.com/corosync/corosync/pull/258#issuecomment-339987215,"To make the first commit message more explicit:

I didn't test the changed SysV init scripts and Upstart files. Debian ships its own init scripts, but even those don't get much testing, because almost everyone uses systemd nowadays, I guess.
I think Upstart support should be removed altogether.

These commits cherry-pick cleanly into needle as well.","Corosync sysconfig file has basically two settings.
One is wait_timeout which is not going to be used at all with systemd notifications, but what about systems/distributions without Systemd?.Second is command line options. Some of the options can be moved into config file and some of them doesn't make too much sense to be translated.
Qnetd is another huge user of sysconfig options, but it doesn't have config file at all, so that may be hard.",True,{}
corosync/corosync,https://github.com/corosync/corosync,258,2017-10-24T12:20:31Z,2017-10-30T12:30:29Z,2017-10-31T13:49:45Z,CLOSED,False,52,64,10,https://github.com/wferi,Introduce --configdir (idea stolen from Pacemaker),2,[],https://github.com/corosync/corosync/pull/258,https://github.com/jfriesse,9,https://github.com/corosync/corosync/pull/258#issuecomment-339988038,"To make the first commit message more explicit:

I didn't test the changed SysV init scripts and Upstart files. Debian ships its own init scripts, but even those don't get much testing, because almost everyone uses systemd nowadays, I guess.
I think Upstart support should be removed altogether.

These commits cherry-pick cleanly into needle as well.","@wferi Yes, I would really like you to respin the patch, just replace current patch configdir with initconfigdir and it should be good to go.",True,{}
corosync/corosync,https://github.com/corosync/corosync,258,2017-10-24T12:20:31Z,2017-10-30T12:30:29Z,2017-10-31T13:49:45Z,CLOSED,False,52,64,10,https://github.com/wferi,Introduce --configdir (idea stolen from Pacemaker),2,[],https://github.com/corosync/corosync/pull/258,https://github.com/wferi,10,https://github.com/corosync/corosync/pull/258#issuecomment-340189601,"To make the first commit message more explicit:

I didn't test the changed SysV init scripts and Upstart files. Debian ships its own init scripts, but even those don't get much testing, because almost everyone uses systemd nowadays, I guess.
I think Upstart support should be removed altogether.

These commits cherry-pick cleanly into needle as well.","Done. Two points I'm unsure about:

I didn't touch the spec file. It's probably relevant only when the init config dir is /etc/sysconfig, but you may still prefer it having changed.
The second patch is only relevant if you want to provide cross-distro init scripts. I don't think that's feasible. By the way, __pids_pidof is unused.",True,{}
corosync/corosync,https://github.com/corosync/corosync,258,2017-10-24T12:20:31Z,2017-10-30T12:30:29Z,2017-10-31T13:49:45Z,CLOSED,False,52,64,10,https://github.com/wferi,Introduce --configdir (idea stolen from Pacemaker),2,[],https://github.com/corosync/corosync/pull/258,https://github.com/wferi,11,https://github.com/corosync/corosync/pull/258#issuecomment-340195641,"To make the first commit message more explicit:

I didn't test the changed SysV init scripts and Upstart files. Debian ships its own init scripts, but even those don't get much testing, because almost everyone uses systemd nowadays, I guess.
I think Upstart support should be removed altogether.

These commits cherry-pick cleanly into needle as well.","Oh, I forgot to answer your other comment. So, sysconfig is certainly a good idea as a simplified configuration interface for SysV init scripts. The question is whether we should continue to use it with systemd (beyond some transition period), because systemd units are feasible to configure without any additional tool. Regarding command line options: I didn't mean moving command line options into configuration file settings. Rather, I meant moving environmental settings (COROSYNC_MAIN_CONFIG_FILE, COROSYNC_RUN_DIR and COROSYNC_TOTEM_AUTHKEY_FILE) into command line options or (in the case of the latter two) into configuration file settings. That aside, these are currently a good fit for the systemd environment directives, but not for sysconfig settings, because the init systems don't use them at all.",True,{}
corosync/corosync,https://github.com/corosync/corosync,258,2017-10-24T12:20:31Z,2017-10-30T12:30:29Z,2017-10-31T13:49:45Z,CLOSED,False,52,64,10,https://github.com/wferi,Introduce --configdir (idea stolen from Pacemaker),2,[],https://github.com/corosync/corosync/pull/258,https://github.com/jfriesse,12,https://github.com/corosync/corosync/pull/258#issuecomment-340429951,"To make the first commit message more explicit:

I didn't test the changed SysV init scripts and Upstart files. Debian ships its own init scripts, but even those don't get much testing, because almost everyone uses systemd nowadays, I guess.
I think Upstart support should be removed altogether.

These commits cherry-pick cleanly into needle as well.","@wferi Thank you for the change. I really like it, so merged as d7208e8 and 87a803a . I don't think changing of spec is really needed. I really can't remember why __pids_pidof was there, but it can stay there, it doesn't hurt anything.
I like the idea of moving the environment variables. I was thinking a slightly more about this problem and I believe following may be almost optimal:

Cli options -f, -v and -t stays as they are
New CLI option (probably -c) is introduced as a replacement for COROSYNC_MAIN_CONFIG_FILE
CLI options -p, -r, -R, -P are moved to config file
Environment options COROSYNC_TOTEM_AUTHKEY_FILE and COROSYNC_RUN_DIR are moved to config file

This, together with your other PR (#89 - btw. could you please open new PR of #89 so it's easier for me to merge it ideally with killing upstart scripts) would allow us to get rid of sysconfig file for corosync daemon when systemd is in use and for init scripts only COROSYNC_INIT_TIMEOUT would stay.
What do you think about it (from Debian maintainer and user of corosync perspective)?
I've opened #263 so it's not forgotten.
Also thank you a lot for the patch and nice discussion,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,258,2017-10-24T12:20:31Z,2017-10-30T12:30:29Z,2017-10-31T13:49:45Z,CLOSED,False,52,64,10,https://github.com/wferi,Introduce --configdir (idea stolen from Pacemaker),2,[],https://github.com/corosync/corosync/pull/258,https://github.com/wferi,13,https://github.com/corosync/corosync/pull/258#issuecomment-340493845,"To make the first commit message more explicit:

I didn't test the changed SysV init scripts and Upstart files. Debian ships its own init scripts, but even those don't get much testing, because almost everyone uses systemd nowadays, I guess.
I think Upstart support should be removed altogether.

These commits cherry-pick cleanly into needle as well.","@jfriesse Thanks for the merge! Don't you want to cherry-pick this into needle, too?
Your plan about the environmental variables sounds perfect. Getting rid of them completely isn't only a conceptual simplification, but will also ease debugging user setups.
And I'll collect the systemd patches into a new PR.",True,{}
corosync/corosync,https://github.com/corosync/corosync,258,2017-10-24T12:20:31Z,2017-10-30T12:30:29Z,2017-10-31T13:49:45Z,CLOSED,False,52,64,10,https://github.com/wferi,Introduce --configdir (idea stolen from Pacemaker),2,[],https://github.com/corosync/corosync/pull/258,https://github.com/jfriesse,14,https://github.com/corosync/corosync/pull/258#issuecomment-340767758,"To make the first commit message more explicit:

I didn't test the changed SysV init scripts and Upstart files. Debian ships its own init scripts, but even those don't get much testing, because almost everyone uses systemd nowadays, I guess.
I think Upstart support should be removed altogether.

These commits cherry-pick cleanly into needle as well.","@wferi Yep, merging them to Needle make sense, so I've just made it happen.",True,{}
corosync/corosync,https://github.com/corosync/corosync,259,2017-10-24T14:18:19Z,2017-10-25T16:25:21Z,2017-10-25T17:08:20Z,CLOSED,False,1,1,1,https://github.com/wferi,man: support SOURCE_DATE_EPOCH,1,[],https://github.com/corosync/corosync/pull/259,https://github.com/wferi,1,https://github.com/corosync/corosync/pull/259,"Make reproducible builds possible by supporting
https://reproducible-builds.org/specs/source-date-epoch/
Signed-off-by: Ferenc Wágner wferi@debian.org
This commit cherry-pick cleanly to needle as well.","Make reproducible builds possible by supporting
https://reproducible-builds.org/specs/source-date-epoch/
Signed-off-by: Ferenc Wágner wferi@debian.org
This commit cherry-pick cleanly to needle as well.",True,{}
corosync/corosync,https://github.com/corosync/corosync,259,2017-10-24T14:18:19Z,2017-10-25T16:25:21Z,2017-10-25T17:08:20Z,CLOSED,False,1,1,1,https://github.com/wferi,man: support SOURCE_DATE_EPOCH,1,[],https://github.com/corosync/corosync/pull/259,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/259#issuecomment-339388082,"Make reproducible builds possible by supporting
https://reproducible-builds.org/specs/source-date-epoch/
Signed-off-by: Ferenc Wágner wferi@debian.org
This commit cherry-pick cleanly to needle as well.","@wferi This patch is just good, I really like it, so ACK and merged as 14d251d and a8f02cf .
Thank you for the patch,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,260,2017-10-24T15:09:21Z,2017-10-31T19:10:48Z,2017-10-31T19:31:12Z,CLOSED,False,7,56,7,https://github.com/wferi,Use RuntimeDirectory instead of tmpfiles.d,1,[],https://github.com/corosync/corosync/pull/260,https://github.com/wferi,1,https://github.com/corosync/corosync/pull/260,"This reverts part of commit 32123f6.
A simple directive is a much lighter solution to the same problem, and
automatically follows the specified User.  I copied the 0770 modes from
the corresponding init scripts; they could use a little documentation.
I see the spec file edits the systemd unit to actually run qnetd as coroqnetd.
Why isn't this written like that in the first place?
This commit cherry-picks cleanly into needle as well.","This reverts part of commit 32123f6.
A simple directive is a much lighter solution to the same problem, and
automatically follows the specified User.  I copied the 0770 modes from
the corresponding init scripts; they could use a little documentation.
I see the spec file edits the systemd unit to actually run qnetd as coroqnetd.
Why isn't this written like that in the first place?
This commit cherry-picks cleanly into needle as well.",True,{}
corosync/corosync,https://github.com/corosync/corosync,260,2017-10-24T15:09:21Z,2017-10-31T19:10:48Z,2017-10-31T19:31:12Z,CLOSED,False,7,56,7,https://github.com/wferi,Use RuntimeDirectory instead of tmpfiles.d,1,[],https://github.com/corosync/corosync/pull/260,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/260#issuecomment-340798592,"This reverts part of commit 32123f6.
A simple directive is a much lighter solution to the same problem, and
automatically follows the specified User.  I copied the 0770 modes from
the corresponding init scripts; they could use a little documentation.
I see the spec file edits the systemd unit to actually run qnetd as coroqnetd.
Why isn't this written like that in the first place?
This commit cherry-picks cleanly into needle as well.","@wferi I've got too much PRs last few days so I've almost overlooked this GEM. I like it so much. I didn't used systemd directive simply because I was not aware of it. Really nice work, big ACK and merged as c733e94 / fde7fa0 .
The idea of why spec is editing the systemd unit is because I didn't want to force the user who is compiling from source code (= not using packages) to create the user. And sadly systemd unit file ignores environmentfile for User directive (so normally I would write something like User=$COROSYNC_QNETD_RUNAS, but that doesn't work (or at least it was not working 1 year ago).
Thank you again for this nice patch,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,260,2017-10-24T15:09:21Z,2017-10-31T19:10:48Z,2017-10-31T19:31:12Z,CLOSED,False,7,56,7,https://github.com/wferi,Use RuntimeDirectory instead of tmpfiles.d,1,[],https://github.com/corosync/corosync/pull/260,https://github.com/wferi,3,https://github.com/corosync/corosync/pull/260#issuecomment-340881383,"This reverts part of commit 32123f6.
A simple directive is a much lighter solution to the same problem, and
automatically follows the specified User.  I copied the 0770 modes from
the corresponding init scripts; they could use a little documentation.
I see the spec file edits the systemd unit to actually run qnetd as coroqnetd.
Why isn't this written like that in the first place?
This commit cherry-picks cleanly into needle as well.","Thanks for the merge, @jfriesse! Yes, EnvironmentFile does not define ""unit variables"", but indeed environmental variables, whose substitution is supported in the various Exec* directives only. This is the very difference between EnvironmentFile and sysconfig files, which we were discussing in #258. I find this lack of variables a shortcoming of systemd.",True,{}
corosync/corosync,https://github.com/corosync/corosync,261,2017-10-26T08:16:22Z,2017-10-30T13:19:14Z,2017-10-31T07:16:15Z,CLOSED,False,27,21,1,https://github.com/liu4480,add nodeid check for knet,2,[],https://github.com/corosync/corosync/pull/261,https://github.com/liu4480,1,https://github.com/corosync/corosync/pull/261,"As described in 83467ac, corosync will abort when nodeid is not set with
knet, this patch gives warnings to set nodeid in knet.","As described in 83467ac, corosync will abort when nodeid is not set with
knet, this patch gives warnings to set nodeid in knet.",True,{}
corosync/corosync,https://github.com/corosync/corosync,261,2017-10-26T08:16:22Z,2017-10-30T13:19:14Z,2017-10-31T07:16:15Z,CLOSED,False,27,21,1,https://github.com/liu4480,add nodeid check for knet,2,[],https://github.com/corosync/corosync/pull/261,https://github.com/liu4480,2,https://github.com/corosync/corosync/pull/261#issuecomment-339594639,"As described in 83467ac, corosync will abort when nodeid is not set with
knet, this patch gives warnings to set nodeid in knet.","sorry for the overlook of usage for nodeid_set, it works now.:)",True,{}
corosync/corosync,https://github.com/corosync/corosync,261,2017-10-26T08:16:22Z,2017-10-30T13:19:14Z,2017-10-31T07:16:15Z,CLOSED,False,27,21,1,https://github.com/liu4480,add nodeid check for knet,2,[],https://github.com/corosync/corosync/pull/261,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/261#issuecomment-339997475,"As described in 83467ac, corosync will abort when nodeid is not set with
knet, this patch gives warnings to set nodeid in knet.","@liu4480 The first patch works only partly correctly. It can detect if current running node does not have node id set, but it doesn't detect if other nodes has nodeid set or not. Error message then doesn't make too much sense.
Second patch looks good but I didn't merged yet to prevent conflicts.",True,{}
corosync/corosync,https://github.com/corosync/corosync,261,2017-10-26T08:16:22Z,2017-10-30T13:19:14Z,2017-10-31T07:16:15Z,CLOSED,False,27,21,1,https://github.com/liu4480,add nodeid check for knet,2,[],https://github.com/corosync/corosync/pull/261,https://github.com/liu4480,4,https://github.com/corosync/corosync/pull/261#issuecomment-340147146,"As described in 83467ac, corosync will abort when nodeid is not set with
knet, this patch gives warnings to set nodeid in knet.","@jfriesse I find there places to do the check, put_nodelist_members_to_config and totem_config_validate/totem_config_read
1)in put_nodelist_members_to_config , it is very easy to do the check, but I added a patch like this:
@@ -848,6 +848,10 @@ static void put_nodelist_members_to_config(struct totem_config *totem_config, in
snprintf(tmp_key, ICMAP_KEYNAME_MAXLEN, ""nodelist.node.%u.nodeid"", node_pos);
if (icmap_get_uint32(tmp_key, &nodeid) != CS_OK) {
++                               if ((totem_config->transport_number == TOTEM_TRANSPORT_KNET)) {
++                                      log_printf(LOGSYS_LEVEL_CRIT, ""With knet, you must specify nodeid for each node in nodelist"");
++                                       corosync_exit_error(COROSYNC_DONE_MAINCONFIGREAD);
++                               }
}
it did not print the log at all but works as expected.
2)Or use the original patch, just change the log:
""nodeid for this node must be spcified with knet"" instead of ""every node"", since if no nodeid spcified for the running node with knet, corosync will never start, it is enough that we only care about the current node.
do you agree?

in totem_config_validate, just iter totem_config->interfaces, to check there is a nodeid not set? this one may be the worst way, since the it need to add an additional loop. like something did in totemknet.c as #256",True,{}
corosync/corosync,https://github.com/corosync/corosync,261,2017-10-26T08:16:22Z,2017-10-30T13:19:14Z,2017-10-31T07:16:15Z,CLOSED,False,27,21,1,https://github.com/liu4480,add nodeid check for knet,2,[],https://github.com/corosync/corosync/pull/261,https://github.com/liu4480,5,https://github.com/corosync/corosync/pull/261#issuecomment-340327543,"As described in 83467ac, corosync will abort when nodeid is not set with
knet, this patch gives warnings to set nodeid in knet.","sorry, what I mean is there places could do the check, and which one do you think is better?",True,{}
corosync/corosync,https://github.com/corosync/corosync,261,2017-10-26T08:16:22Z,2017-10-30T13:19:14Z,2017-10-31T07:16:15Z,CLOSED,False,27,21,1,https://github.com/liu4480,add nodeid check for knet,2,[],https://github.com/corosync/corosync/pull/261,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/261#issuecomment-340424081,"As described in 83467ac, corosync will abort when nodeid is not set with
knet, this patch gives warnings to set nodeid in knet.","@liu4480 yep, I agree testing every node is just useless, so I've just changed the message and merged as 99567f0
Thank you for the patch,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,261,2017-10-26T08:16:22Z,2017-10-30T13:19:14Z,2017-10-31T07:16:15Z,CLOSED,False,27,21,1,https://github.com/liu4480,add nodeid check for knet,2,[],https://github.com/corosync/corosync/pull/261,https://github.com/liu4480,7,https://github.com/corosync/corosync/pull/261#issuecomment-340433888,"As described in 83467ac, corosync will abort when nodeid is not set with
knet, this patch gives warnings to set nodeid in knet.","@jfriesse, do I need to open another PR for the second patch, or you will not merge the patch until some time later?",True,{}
corosync/corosync,https://github.com/corosync/corosync,261,2017-10-26T08:16:22Z,2017-10-30T13:19:14Z,2017-10-31T07:16:15Z,CLOSED,False,27,21,1,https://github.com/liu4480,add nodeid check for knet,2,[],https://github.com/corosync/corosync/pull/261,https://github.com/jfriesse,8,https://github.com/corosync/corosync/pull/261#issuecomment-340440950,"As described in 83467ac, corosync will abort when nodeid is not set with
knet, this patch gives warnings to set nodeid in knet.","@liu4480 Whups, sorry, I've just overlooked that. Merged as cf339c2
Thank you for notify.",True,{}
corosync/corosync,https://github.com/corosync/corosync,262,2017-10-30T04:53:05Z,2018-07-12T13:57:30Z,2018-07-14T08:16:39Z,CLOSED,False,197,52,1,https://github.com/liu4480,fix ifconfig down in udpu,1,[],https://github.com/corosync/corosync/pull/262,https://github.com/liu4480,1,https://github.com/corosync/corosync/pull/262,"I have a two-node cluster: node1 and node2.
on node1, I just run corosync-quorumtool to see the membership status,
and on node2 I run ifconfig eth0 down/up, everything I see is as
expected on node1.
and on node2, when interface is up, I can see corosync works expected.
But when I execute ifconfig eth0 down, something interesting happens:
Quorum information
Date:             Thu Oct 19 11:30:24 2017
Quorum provider:  corosync_votequorum
Nodes:            2
Node ID:          172204675
Ring ID:          32
Quorate:          Yes
Votequorum information
Expected votes:   2
Highest expected: 2
Total votes:      2
Quorum:           1
Flags:            2Node Quorate WaitForAll
Unable to get node address for nodeid 172204674: CS_ERR_NOT_EXIST
Membership information
Nodeid      Votes Name
172204674          1 (local)
172204675          1 bliu-sle12sp3-node1
This patch will fix the membership on node2 upon ifconfig ethX down/up for udpu.","I have a two-node cluster: node1 and node2.
on node1, I just run corosync-quorumtool to see the membership status,
and on node2 I run ifconfig eth0 down/up, everything I see is as
expected on node1.
and on node2, when interface is up, I can see corosync works expected.
But when I execute ifconfig eth0 down, something interesting happens:
Quorum information
Date:             Thu Oct 19 11:30:24 2017
Quorum provider:  corosync_votequorum
Nodes:            2
Node ID:          172204675
Ring ID:          32
Quorate:          Yes
Votequorum information
Expected votes:   2
Highest expected: 2
Total votes:      2
Quorum:           1
Flags:            2Node Quorate WaitForAll
Unable to get node address for nodeid 172204674: CS_ERR_NOT_EXIST
Membership information
Nodeid      Votes Name
172204674          1 (local)
172204675          1 bliu-sle12sp3-node1
This patch will fix the membership on node2 upon ifconfig ethX down/up for udpu.",True,{}
corosync/corosync,https://github.com/corosync/corosync,262,2017-10-30T04:53:05Z,2018-07-12T13:57:30Z,2018-07-14T08:16:39Z,CLOSED,False,197,52,1,https://github.com/liu4480,fix ifconfig down in udpu,1,[],https://github.com/corosync/corosync/pull/262,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/262#issuecomment-340444403,"I have a two-node cluster: node1 and node2.
on node1, I just run corosync-quorumtool to see the membership status,
and on node2 I run ifconfig eth0 down/up, everything I see is as
expected on node1.
and on node2, when interface is up, I can see corosync works expected.
But when I execute ifconfig eth0 down, something interesting happens:
Quorum information
Date:             Thu Oct 19 11:30:24 2017
Quorum provider:  corosync_votequorum
Nodes:            2
Node ID:          172204675
Ring ID:          32
Quorate:          Yes
Votequorum information
Expected votes:   2
Highest expected: 2
Total votes:      2
Quorum:           1
Flags:            2Node Quorate WaitForAll
Unable to get node address for nodeid 172204674: CS_ERR_NOT_EXIST
Membership information
Nodeid      Votes Name
172204674          1 (local)
172204675          1 bliu-sle12sp3-node1
This patch will fix the membership on node2 upon ifconfig ethX down/up for udpu.","@liu4480 Just for sure. When patch is applied, the message
 Unable to get node address for nodeid 172204674: CS_ERR_NOT_EXIST

persists or not? If not, what exactly was causing that (or what exact part of your patch fixes that)?",True,{}
corosync/corosync,https://github.com/corosync/corosync,262,2017-10-30T04:53:05Z,2018-07-12T13:57:30Z,2018-07-14T08:16:39Z,CLOSED,False,197,52,1,https://github.com/liu4480,fix ifconfig down in udpu,1,[],https://github.com/corosync/corosync/pull/262,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/262#issuecomment-403776278,"I have a two-node cluster: node1 and node2.
on node1, I just run corosync-quorumtool to see the membership status,
and on node2 I run ifconfig eth0 down/up, everything I see is as
expected on node1.
and on node2, when interface is up, I can see corosync works expected.
But when I execute ifconfig eth0 down, something interesting happens:
Quorum information
Date:             Thu Oct 19 11:30:24 2017
Quorum provider:  corosync_votequorum
Nodes:            2
Node ID:          172204675
Ring ID:          32
Quorate:          Yes
Votequorum information
Expected votes:   2
Highest expected: 2
Total votes:      2
Quorum:           1
Flags:            2Node Quorate WaitForAll
Unable to get node address for nodeid 172204674: CS_ERR_NOT_EXIST
Membership information
Nodeid      Votes Name
172204674          1 (local)
172204675          1 bliu-sle12sp3-node1
This patch will fix the membership on node2 upon ifconfig ethX down/up for udpu.",@liu4480 I totally forgot to merge this patch. Don't you have it somewhere by accident?,True,{}
corosync/corosync,https://github.com/corosync/corosync,262,2017-10-30T04:53:05Z,2018-07-12T13:57:30Z,2018-07-14T08:16:39Z,CLOSED,False,197,52,1,https://github.com/liu4480,fix ifconfig down in udpu,1,[],https://github.com/corosync/corosync/pull/262,https://github.com/knet-ci-bot,4,https://github.com/corosync/corosync/pull/262#issuecomment-403776288,"I have a two-node cluster: node1 and node2.
on node1, I just run corosync-quorumtool to see the membership status,
and on node2 I run ifconfig eth0 down/up, everything I see is as
expected on node1.
and on node2, when interface is up, I can see corosync works expected.
But when I execute ifconfig eth0 down, something interesting happens:
Quorum information
Date:             Thu Oct 19 11:30:24 2017
Quorum provider:  corosync_votequorum
Nodes:            2
Node ID:          172204675
Ring ID:          32
Quorate:          Yes
Votequorum information
Expected votes:   2
Highest expected: 2
Total votes:      2
Quorum:           1
Flags:            2Node Quorate WaitForAll
Unable to get node address for nodeid 172204674: CS_ERR_NOT_EXIST
Membership information
Nodeid      Votes Name
172204674          1 (local)
172204675          1 bliu-sle12sp3-node1
This patch will fix the membership on node2 upon ifconfig ethX down/up for udpu.",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,262,2017-10-30T04:53:05Z,2018-07-12T13:57:30Z,2018-07-14T08:16:39Z,CLOSED,False,197,52,1,https://github.com/liu4480,fix ifconfig down in udpu,1,[],https://github.com/corosync/corosync/pull/262,https://github.com/edwintorok,5,https://github.com/corosync/corosync/pull/262#issuecomment-403835549,"I have a two-node cluster: node1 and node2.
on node1, I just run corosync-quorumtool to see the membership status,
and on node2 I run ifconfig eth0 down/up, everything I see is as
expected on node1.
and on node2, when interface is up, I can see corosync works expected.
But when I execute ifconfig eth0 down, something interesting happens:
Quorum information
Date:             Thu Oct 19 11:30:24 2017
Quorum provider:  corosync_votequorum
Nodes:            2
Node ID:          172204675
Ring ID:          32
Quorate:          Yes
Votequorum information
Expected votes:   2
Highest expected: 2
Total votes:      2
Quorum:           1
Flags:            2Node Quorate WaitForAll
Unable to get node address for nodeid 172204674: CS_ERR_NOT_EXIST
Membership information
Nodeid      Votes Name
172204674          1 (local)
172204675          1 bliu-sle12sp3-node1
This patch will fix the membership on node2 upon ifconfig ethX down/up for udpu.","The patch is still visible if you click on the commit, and you can get a raw patch from it: https://github.com/corosync/corosync/commit/d87901d7615769e00fe086c5005892e0977c7aef.patch",True,{}
corosync/corosync,https://github.com/corosync/corosync,262,2017-10-30T04:53:05Z,2018-07-12T13:57:30Z,2018-07-14T08:16:39Z,CLOSED,False,197,52,1,https://github.com/liu4480,fix ifconfig down in udpu,1,[],https://github.com/corosync/corosync/pull/262,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/262#issuecomment-404521267,"I have a two-node cluster: node1 and node2.
on node1, I just run corosync-quorumtool to see the membership status,
and on node2 I run ifconfig eth0 down/up, everything I see is as
expected on node1.
and on node2, when interface is up, I can see corosync works expected.
But when I execute ifconfig eth0 down, something interesting happens:
Quorum information
Date:             Thu Oct 19 11:30:24 2017
Quorum provider:  corosync_votequorum
Nodes:            2
Node ID:          172204675
Ring ID:          32
Quorate:          Yes
Votequorum information
Expected votes:   2
Highest expected: 2
Total votes:      2
Quorum:           1
Flags:            2Node Quorate WaitForAll
Unable to get node address for nodeid 172204674: CS_ERR_NOT_EXIST
Membership information
Nodeid      Votes Name
172204674          1 (local)
172204675          1 bliu-sle12sp3-node1
This patch will fix the membership on node2 upon ifconfig ethX down/up for udpu.","@edwintorok Thank you for the link! I've retested the patch and it looks good. It never sends localhost (127.0.0.1) and allowed ipc clients work after ifdown,
So I decided to rephrase commit message and merge/forward-port it as 96b4bd1 / 96354fb.
Just for the record.

During my testing I've found small issue with runtime.totem.pg.mrp.srp.members.X.status not reflecting other nodes status after ifdown. This problem is not happening on master, so we've probably fixed it as a result of fixing something unrelated. CPG membership is updated correctly on master and needle. So I don't consider it as a blocker.
RRP works, but after both links go down (ifdown) and then at least one goes up, membership is not created looping in gather state.
For whoever decides to say hooray, we will test failure using ifdown. Don't do it. ifdown is and will be one of the things which are prohibited. It doesn't test real failure.

@liu4480 Sorry for delay and thank you for this nice patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,262,2017-10-30T04:53:05Z,2018-07-12T13:57:30Z,2018-07-14T08:16:39Z,CLOSED,False,197,52,1,https://github.com/liu4480,fix ifconfig down in udpu,1,[],https://github.com/corosync/corosync/pull/262,https://github.com/liu4480,7,https://github.com/corosync/corosync/pull/262#issuecomment-405007962,"I have a two-node cluster: node1 and node2.
on node1, I just run corosync-quorumtool to see the membership status,
and on node2 I run ifconfig eth0 down/up, everything I see is as
expected on node1.
and on node2, when interface is up, I can see corosync works expected.
But when I execute ifconfig eth0 down, something interesting happens:
Quorum information
Date:             Thu Oct 19 11:30:24 2017
Quorum provider:  corosync_votequorum
Nodes:            2
Node ID:          172204675
Ring ID:          32
Quorate:          Yes
Votequorum information
Expected votes:   2
Highest expected: 2
Total votes:      2
Quorum:           1
Flags:            2Node Quorate WaitForAll
Unable to get node address for nodeid 172204674: CS_ERR_NOT_EXIST
Membership information
Nodeid      Votes Name
172204674          1 (local)
172204675          1 bliu-sle12sp3-node1
This patch will fix the membership on node2 upon ifconfig ethX down/up for udpu.",@jfriesse sorry for the latency and thanks for merging:),True,{}
corosync/corosync,https://github.com/corosync/corosync,264,2017-10-30T20:34:00Z,,2021-12-27T05:19:09Z,OPEN,False,1,1,1,https://github.com/wferi,pkgconfig: the libraries require the libcorosync_common package,1,[],https://github.com/corosync/corosync/pull/264,https://github.com/wferi,1,https://github.com/corosync/corosync/pull/264,"Various library header files include headers from the common module,
and the transitive dependencies must be specified for static linking.
The self-dependency of libcorosync_common does not cause problems.
Signed-off-by: Ferenc Wágner wferi@debian.org
This commit cherry-picks cleanly into needle.","Various library header files include headers from the common module,
and the transitive dependencies must be specified for static linking.
The self-dependency of libcorosync_common does not cause problems.
Signed-off-by: Ferenc Wágner wferi@debian.org
This commit cherry-picks cleanly into needle.",True,{}
corosync/corosync,https://github.com/corosync/corosync,264,2017-10-30T20:34:00Z,,2021-12-27T05:19:09Z,OPEN,False,1,1,1,https://github.com/wferi,pkgconfig: the libraries require the libcorosync_common package,1,[],https://github.com/corosync/corosync/pull/264,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/264#issuecomment-340771467,"Various library header files include headers from the common module,
and the transitive dependencies must be specified for static linking.
The self-dependency of libcorosync_common does not cause problems.
Signed-off-by: Ferenc Wágner wferi@debian.org
This commit cherry-picks cleanly into needle.","@wferi At least on CentOS 7.4 it seems not to work as expected. As far as I was able to understand requires.private section, it does something only when static linking is used. So I've tried
pkg-config libcpg --static --libs

and result is
Failed to open '/usr/lib64/pkgconfig/libcorosync_common.pc': Too many open files
Package 'libcorosync_common', required by 'corosync_common', not found",True,{}
corosync/corosync,https://github.com/corosync/corosync,264,2017-10-30T20:34:00Z,,2021-12-27T05:19:09Z,OPEN,False,1,1,1,https://github.com/wferi,pkgconfig: the libraries require the libcorosync_common package,1,[],https://github.com/corosync/corosync/pull/264,https://github.com/wferi,3,https://github.com/corosync/corosync/pull/264#issuecomment-340778684,"Various library header files include headers from the common module,
and the transitive dependencies must be specified for static linking.
The self-dependency of libcorosync_common does not cause problems.
Signed-off-by: Ferenc Wágner wferi@debian.org
This commit cherry-picks cleanly into needle.","Maybe older pkg-config versions aren't protected from such loops.
I'll dig into this a little more.",True,{}
corosync/corosync,https://github.com/corosync/corosync,264,2017-10-30T20:34:00Z,,2021-12-27T05:19:09Z,OPEN,False,1,1,1,https://github.com/wferi,pkgconfig: the libraries require the libcorosync_common package,1,[],https://github.com/corosync/corosync/pull/264,https://github.com/wferi,4,https://github.com/corosync/corosync/pull/264#issuecomment-340824684,"Various library header files include headers from the common module,
and the transitive dependencies must be specified for static linking.
The self-dependency of libcorosync_common does not cause problems.
Signed-off-by: Ferenc Wágner wferi@debian.org
This commit cherry-picks cleanly into needle.","Yes, pkg-config 0.26 chokes on this, while 0.28 breaks the loop. I'll prepare a more careful patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,264,2017-10-30T20:34:00Z,,2021-12-27T05:19:09Z,OPEN,False,1,1,1,https://github.com/wferi,pkgconfig: the libraries require the libcorosync_common package,1,[],https://github.com/corosync/corosync/pull/264,https://github.com/wferi,5,https://github.com/corosync/corosync/pull/264#issuecomment-340853793,"Various library header files include headers from the common module,
and the transitive dependencies must be specified for static linking.
The self-dependency of libcorosync_common does not cause problems.
Signed-off-by: Ferenc Wágner wferi@debian.org
This commit cherry-picks cleanly into needle.","More precisely, the requirements are:

corosync_common: -
cfg, cmap, cpg, quorum, votequorum: corosync_common, qb
sam: cmap, quorum
totem-pg: ibverbs, nspr, nss, qb, rdmacm

I suppose all these dependencies are meant to be private, right?",True,{}
corosync/corosync,https://github.com/corosync/corosync,264,2017-10-30T20:34:00Z,,2021-12-27T05:19:09Z,OPEN,False,1,1,1,https://github.com/wferi,pkgconfig: the libraries require the libcorosync_common package,1,[],https://github.com/corosync/corosync/pull/264,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/264#issuecomment-341163190,"Various library header files include headers from the common module,
and the transitive dependencies must be specified for static linking.
The self-dependency of libcorosync_common does not cause problems.
Signed-off-by: Ferenc Wágner wferi@debian.org
This commit cherry-picks cleanly into needle.","@wferi Yep, but in master support for rdma is removed so totem-pg should be without ibverbs and rdmacm and same is true when needle is compiled without rdma. Also direct requirement of nss is gone in master because it's in knet (what is new dependency in master).
The question if dependencies should be private is hard. I know there are people who prefers explicit dependencies even for shared libraries. I'm not one of them and I really like implicit dependencies. But maybe you have good arguments why it should be explicit ;)",True,{}
corosync/corosync,https://github.com/corosync/corosync,264,2017-10-30T20:34:00Z,,2021-12-27T05:19:09Z,OPEN,False,1,1,1,https://github.com/wferi,pkgconfig: the libraries require the libcorosync_common package,1,[],https://github.com/corosync/corosync/pull/264,https://github.com/jfriesse,7,https://github.com/corosync/corosync/pull/264#issuecomment-442914392,"Various library header files include headers from the common module,
and the transitive dependencies must be specified for static linking.
The self-dependency of libcorosync_common does not cause problems.
Signed-off-by: Ferenc Wágner wferi@debian.org
This commit cherry-picks cleanly into needle.","@wferi I've made a update of this PR as a #405, which works with older pkg-config and (hopefully) handles all required dependencies. Would you mind to review/test it?",True,{}
corosync/corosync,https://github.com/corosync/corosync,265,2017-10-31T10:37:00Z,2017-11-16T07:39:28Z,2017-11-16T07:39:28Z,CLOSED,False,57,36,14,https://github.com/wferi,Systemd notification support,7,[],https://github.com/corosync/corosync/pull/265,https://github.com/wferi,1,https://github.com/corosync/corosync/pull/265,"I'm not sure you meant to kill INITWRAPPERSDIR the way it's done here. The other way is installing the init scripts regardless of systemd support: they are simply ignored by systemd but enable switching init systems (in theory).
Upstart removal is not included here to keep us focused. And because I haven't done that yet.
Furthermore, I haven't tested these patches on master yet: I have to sort out kronosnet first. But they've been working very well on needle in Debian (except for the last one, which is new invention).","I'm not sure you meant to kill INITWRAPPERSDIR the way it's done here. The other way is installing the init scripts regardless of systemd support: they are simply ignored by systemd but enable switching init systems (in theory).
Upstart removal is not included here to keep us focused. And because I haven't done that yet.
Furthermore, I haven't tested these patches on master yet: I have to sort out kronosnet first. But they've been working very well on needle in Debian (except for the last one, which is new invention).",True,{}
corosync/corosync,https://github.com/corosync/corosync,265,2017-10-31T10:37:00Z,2017-11-16T07:39:28Z,2017-11-16T07:39:28Z,CLOSED,False,57,36,14,https://github.com/wferi,Systemd notification support,7,[],https://github.com/corosync/corosync/pull/265,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/265#issuecomment-342849929,"I'm not sure you meant to kill INITWRAPPERSDIR the way it's done here. The other way is installing the init scripts regardless of systemd support: they are simply ignored by systemd but enable switching init systems (in theory).
Upstart removal is not included here to keep us focused. And because I haven't done that yet.
Furthermore, I haven't tested these patches on master yet: I have to sort out kronosnet first. But they've been working very well on needle in Debian (except for the last one, which is new invention).","@wferi Definitively big thank you for the patches. They are simply good and I really like them (last one included). I'm not too keen to include them in the needle but they will go to master so 3.x.
Sadly I had to rework them (just slightly) because of:

Conflicts (mostly) because of tmpdir removal
corosync.spec.in was missing new build dependency - libsystemd-devel
corosync-qnetd and qdevice were without defined sd_notify simply because systemd header was included before config.h

I would like you quickly check the new PR (#276) I've made which should have all these problems fixed (just to be sure I've fixed them correctly).
Regards,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,265,2017-10-31T10:37:00Z,2017-11-16T07:39:28Z,2017-11-16T07:39:28Z,CLOSED,False,57,36,14,https://github.com/wferi,Systemd notification support,7,[],https://github.com/corosync/corosync/pull/265,https://github.com/wferi,3,https://github.com/corosync/corosync/pull/265#issuecomment-342925785,"I'm not sure you meant to kill INITWRAPPERSDIR the way it's done here. The other way is installing the init scripts regardless of systemd support: they are simply ignored by systemd but enable switching init systems (in theory).
Upstart removal is not included here to keep us focused. And because I haven't done that yet.
Furthermore, I haven't tested these patches on master yet: I have to sort out kronosnet first. But they've been working very well on needle in Debian (except for the last one, which is new invention).","You beat me to the rebase, @jfriesse! And you did a perfect job at it. I rebased my branch independently, adopted your include order fixes (thanks for pointing this out, I'll probably have to fix the Debian packages as well!) and cherry-picked your spec file fix. The result has minor whitespace and ordering differences only. So feel free to merge either PR.
And let me add two followup questions:

Should we standardize on Restart=on-abnormal for all daemons? Does corosync-notifyd still exit successfully if corosync is stopped under it?
corosync-qdevice only Wants corosync, not Requires it. What's the reason for this relaxed dependency? Can it run without corosync?

Thanks.",True,{}
corosync/corosync,https://github.com/corosync/corosync,265,2017-10-31T10:37:00Z,2017-11-16T07:39:28Z,2017-11-16T07:39:28Z,CLOSED,False,57,36,14,https://github.com/wferi,Systemd notification support,7,[],https://github.com/corosync/corosync/pull/265,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/265#issuecomment-343089173,"I'm not sure you meant to kill INITWRAPPERSDIR the way it's done here. The other way is installing the init scripts regardless of systemd support: they are simply ignored by systemd but enable switching init systems (in theory).
Upstart removal is not included here to keep us focused. And because I haven't done that yet.
Furthermore, I haven't tested these patches on master yet: I have to sort out kronosnet first. But they've been working very well on needle in Debian (except for the last one, which is new invention).","@wferi Thank you for the review. I've merged the PR as 09b0123 .. 9292c79 .
About the questions:

Restart=on-abnormal seems good (with exception of corosync dameon itself, that shouldn't be ever restarted by systemd just to make sure it's not triggered before fencing). I believe there were no change in corosync-notifid, so it probably still exists successfully. Do you see it as a problem? For example corosync-qdevice behaviour is very same.


wants vs requires is typo. corosync-qdevice cannot run without corosync.",True,{}
corosync/corosync,https://github.com/corosync/corosync,265,2017-10-31T10:37:00Z,2017-11-16T07:39:28Z,2017-11-16T07:39:28Z,CLOSED,False,57,36,14,https://github.com/wferi,Systemd notification support,7,[],https://github.com/corosync/corosync/pull/265,https://github.com/wferi,5,https://github.com/corosync/corosync/pull/265#issuecomment-343114663,"I'm not sure you meant to kill INITWRAPPERSDIR the way it's done here. The other way is installing the init scripts regardless of systemd support: they are simply ignored by systemd but enable switching init systems (in theory).
Upstart removal is not included here to keep us focused. And because I haven't done that yet.
Furthermore, I haven't tested these patches on master yet: I have to sort out kronosnet first. But they've been working very well on needle in Debian (except for the last one, which is new invention).","Thanks for the merge!
Concerning the other matters:

I was slightly confused by the restart settings, actually on-failure is the recommended one for long-running daemons. But corosync is a delicate. I've seen dlm-controld have corosync exit on purpose, and I don't know what its exit status was. I also don't know whether restarting it in any case can do good (I was surprised to learn that restarting crmd actually can!) So I refer to you here, the default is no.
With correct dependencies declared corosync should never stop under corosync-notifyd or corosync-qdevice, so such events should be flagged as errors. But you may know of other use cases. This is a UI issue (failures are reported differently) and also changes on-failure restart behavior.
I opened #277 for the typo.",True,{}
corosync/corosync,https://github.com/corosync/corosync,265,2017-10-31T10:37:00Z,2017-11-16T07:39:28Z,2017-11-16T07:39:28Z,CLOSED,False,57,36,14,https://github.com/wferi,Systemd notification support,7,[],https://github.com/corosync/corosync/pull/265,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/265#issuecomment-343482248,"I'm not sure you meant to kill INITWRAPPERSDIR the way it's done here. The other way is installing the init scripts regardless of systemd support: they are simply ignored by systemd but enable switching init systems (in theory).
Upstart removal is not included here to keep us focused. And because I haven't done that yet.
Furthermore, I haven't tested these patches on master yet: I have to sort out kronosnet first. But they've been working very well on needle in Debian (except for the last one, which is new invention).","@wferi

Restarting qnetd, qdevice and notifyd daemons may be good, restarting corosync itself is just never good, because we kind of rely on fencing to make it's work
Agree. Corosync should really never stop before notifyd or qdevice are stopped. I've filled new issue (#279) to return error code > 0 if that happens.
Typo fix merged ;)

Thank you again for nice patches and good discussion.
Regards,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,265,2017-10-31T10:37:00Z,2017-11-16T07:39:28Z,2017-11-16T07:39:28Z,CLOSED,False,57,36,14,https://github.com/wferi,Systemd notification support,7,[],https://github.com/corosync/corosync/pull/265,https://github.com/jfriesse,7,https://github.com/corosync/corosync/pull/265#issuecomment-344840566,"I'm not sure you meant to kill INITWRAPPERSDIR the way it's done here. The other way is installing the init scripts regardless of systemd support: they are simply ignored by systemd but enable switching init systems (in theory).
Upstart removal is not included here to keep us focused. And because I haven't done that yet.
Furthermore, I haven't tested these patches on master yet: I have to sort out kronosnet first. But they've been working very well on needle in Debian (except for the last one, which is new invention).",Forget to close this PR so doing it now :),True,{}
corosync/corosync,https://github.com/corosync/corosync,266,2017-10-31T10:55:47Z,2017-11-03T12:43:20Z,2017-11-03T12:43:20Z,CLOSED,False,139,4,12,https://github.com/chrissie-c,stats: Add cmap key to clear the various stats.,2,[],https://github.com/corosync/corosync/pull/266,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/266,Signed-off-by: Christine Caulfield ccaulfie@redhat.com,Signed-off-by: Christine Caulfield ccaulfie@redhat.com,True,{}
corosync/corosync,https://github.com/corosync/corosync,266,2017-10-31T10:55:47Z,2017-11-03T12:43:20Z,2017-11-03T12:43:20Z,CLOSED,False,139,4,12,https://github.com/chrissie-c,stats: Add cmap key to clear the various stats.,2,[],https://github.com/corosync/corosync/pull/266,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/266#issuecomment-340823846,Signed-off-by: Christine Caulfield ccaulfie@redhat.com,"@chrissie-c Patch looks good so I've merged it as d9dfd41 and 9a324ce
It may be nice to get some shortcut to clear the stats. Right now crafting cmapctl command parameters is just far from being user friendly.
Completely unrelated to this PR. I've found bug in stats when udpu/udp (so no knet) is used.
#corosync-cmapctl -m stats

...
stats.ipcs.service0.12846.0x5597d2b581f0.sent (u32) = 0
Can't get value of stats.knet.handle.rx_compress_time_ave. Error CS_ERR_NOT_EXIST 
Can't get value of stats.knet.handle.rx_compress_time_max. Error CS_ERR_NOT_EXIST 
Can't get value of stats.knet.handle.rx_compress_time_min. Error CS_ERR_NOT_EXIST 
Can't get value of stats.knet.handle.rx_compressed_original_bytes. Error CS_ERR_NOT_EXIST 
Can't get value of stats.knet.handle.rx_compressed_packets. Error CS_ERR_NOT_EXIST 
...

It's not entirely wrong, but may be nice to have it fixed so this keys are not enumerated when knet is disabled.",True,{}
corosync/corosync,https://github.com/corosync/corosync,266,2017-10-31T10:55:47Z,2017-11-03T12:43:20Z,2017-11-03T12:43:20Z,CLOSED,False,139,4,12,https://github.com/chrissie-c,stats: Add cmap key to clear the various stats.,2,[],https://github.com/corosync/corosync/pull/266,https://github.com/chrissie-c,3,https://github.com/corosync/corosync/pull/266#issuecomment-341347067,Signed-off-by: Christine Caulfield ccaulfie@redhat.com,"Yes, good point, I'll add some dedicated parameters to cmapctl for those. I'll also fix that bug, It must have been introduced with compression as I'm pretty sure I tested UDP[U] when I first did the stats.",True,{}
corosync/corosync,https://github.com/corosync/corosync,267,2017-11-01T04:19:08Z,2017-11-02T10:30:10Z,2017-11-02T10:30:10Z,CLOSED,False,5,6,6,https://github.com/liu4480,"remove duplicate help message for ""-p"" opention in corosync-quorumtool",2,[],https://github.com/corosync/corosync/pull/267,https://github.com/liu4480,1,https://github.com/corosync/corosync/pull/267,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,267,2017-11-01T04:19:08Z,2017-11-02T10:30:10Z,2017-11-02T10:30:10Z,CLOSED,False,5,6,6,https://github.com/liu4480,"remove duplicate help message for ""-p"" opention in corosync-quorumtool",2,[],https://github.com/corosync/corosync/pull/267,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/267#issuecomment-341161615,,"@liu4480 Both patches are good so ACK and merged as ec3eb1f / 47800d6 and 71d078e / 250750b.
Thank you for the patches,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,267,2017-11-01T04:19:08Z,2017-11-02T10:30:10Z,2017-11-02T10:30:10Z,CLOSED,False,5,6,6,https://github.com/liu4480,"remove duplicate help message for ""-p"" opention in corosync-quorumtool",2,[],https://github.com/corosync/corosync/pull/267,https://github.com/liu4480,3,https://github.com/corosync/corosync/pull/267#issuecomment-341379491,,"thanks, close this pull request",True,{}
corosync/corosync,https://github.com/corosync/corosync,268,2017-11-01T14:37:27Z,2017-11-01T16:30:20Z,2017-11-01T16:30:20Z,CLOSED,False,2,1,1,https://github.com/jjd27,man: fix cpg_mcast_joined.3.in,1,[],https://github.com/corosync/corosync/pull/268,https://github.com/jjd27,1,https://github.com/corosync/corosync/pull/268,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,268,2017-11-01T14:37:27Z,2017-11-01T16:30:20Z,2017-11-01T16:30:20Z,CLOSED,False,2,1,1,https://github.com/jjd27,man: fix cpg_mcast_joined.3.in,1,[],https://github.com/corosync/corosync/pull/268,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/268#issuecomment-341160003,,"@jjd27 Nice catch, ACK and merged as 5ef4cb8 / bd94153
Thank you for the patch,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,269,2017-11-02T10:17:12Z,2017-11-03T09:50:29Z,2017-11-03T09:58:24Z,MERGED,True,52,12,2,https://github.com/liu4480,"make the output of ""corosync-cfgtool -s"" more readable",1,[],https://github.com/corosync/corosync/pull/269,https://github.com/liu4480,1,https://github.com/corosync/corosync/pull/269,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,269,2017-11-02T10:17:12Z,2017-11-03T09:50:29Z,2017-11-03T09:58:24Z,MERGED,True,52,12,2,https://github.com/liu4480,"make the output of ""corosync-cfgtool -s"" more readable",1,[],https://github.com/corosync/corosync/pull/269,https://github.com/chrissie-c,2,https://github.com/corosync/corosync/pull/269#issuecomment-341409446,,The patch looks good but can you make the output look tidy on an 80 character display please? TBH you can lose the 'dynconnected' field as it's always going to be 0 as corosync doesn't use that knet feature.,True,{}
corosync/corosync,https://github.com/corosync/corosync,269,2017-11-02T10:17:12Z,2017-11-03T09:50:29Z,2017-11-03T09:58:24Z,MERGED,True,52,12,2,https://github.com/liu4480,"make the output of ""corosync-cfgtool -s"" more readable",1,[],https://github.com/corosync/corosync/pull/269,https://github.com/liu4480,3,https://github.com/corosync/corosync/pull/269#issuecomment-341411802,,"thanks for your advice, I will modify the output later",True,{}
corosync/corosync,https://github.com/corosync/corosync,269,2017-11-02T10:17:12Z,2017-11-03T09:50:29Z,2017-11-03T09:58:24Z,MERGED,True,52,12,2,https://github.com/liu4480,"make the output of ""corosync-cfgtool -s"" more readable",1,[],https://github.com/corosync/corosync/pull/269,https://github.com/chrissie-c,4,https://github.com/corosync/corosync/pull/269#issuecomment-341476208,,"One more small thing (sorry), can you make it clear on the man page that the extended output only applies to knet, and not to UDP/UDPU?",True,{}
corosync/corosync,https://github.com/corosync/corosync,269,2017-11-02T10:17:12Z,2017-11-03T09:50:29Z,2017-11-03T09:58:24Z,MERGED,True,52,12,2,https://github.com/liu4480,"make the output of ""corosync-cfgtool -s"" more readable",1,[],https://github.com/corosync/corosync/pull/269,https://github.com/chrissie-c,5,https://github.com/corosync/corosync/pull/269#issuecomment-341659373,,Look good now. Merged with thanks.,True,{}
corosync/corosync,https://github.com/corosync/corosync,269,2017-11-02T10:17:12Z,2017-11-03T09:50:29Z,2017-11-03T09:58:24Z,MERGED,True,52,12,2,https://github.com/liu4480,"make the output of ""corosync-cfgtool -s"" more readable",1,[],https://github.com/corosync/corosync/pull/269,https://github.com/liu4480,6,https://github.com/corosync/corosync/pull/269#issuecomment-341660243,,thanks for merging:),True,{}
corosync/corosync,https://github.com/corosync/corosync,270,2017-11-02T13:19:31Z,2017-11-03T12:42:57Z,2017-11-03T12:42:57Z,CLOSED,False,17,4,3,https://github.com/chrissie-c,stats: Don't display errors when reading knet stats under udp/u,1,[],https://github.com/corosync/corosync/pull/270,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/270,"Only add the knet handle stat keys if we are actually running knet. This
prevents errors occurring when iterating through all of the stats keys under udp/u
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","Only add the knet handle stat keys if we are actually running knet. This
prevents errors occurring when iterating through all of the stats keys under udp/u
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,270,2017-11-02T13:19:31Z,2017-11-03T12:42:57Z,2017-11-03T12:42:57Z,CLOSED,False,17,4,3,https://github.com/chrissie-c,stats: Don't display errors when reading knet stats under udp/u,1,[],https://github.com/corosync/corosync/pull/270,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/270#issuecomment-341692920,"Only add the knet handle stat keys if we are actually running knet. This
prevents errors occurring when iterating through all of the stats keys under udp/u
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","@chrissie-c Thanks for the patch, ACK and merged as 45fe19e.",True,{}
corosync/corosync,https://github.com/corosync/corosync,271,2017-11-02T16:09:22Z,2017-11-03T12:42:13Z,2017-11-03T12:42:30Z,CLOSED,False,34,1,2,https://github.com/chrissie-c,cmaptool: Add option to clear the stats with a simple command,1,[],https://github.com/corosync/corosync/pull/271,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/271,Signed-off-by: Christine Caulfield ccaulfie@redhat.com,Signed-off-by: Christine Caulfield ccaulfie@redhat.com,True,{}
corosync/corosync,https://github.com/corosync/corosync,271,2017-11-02T16:09:22Z,2017-11-03T12:42:13Z,2017-11-03T12:42:30Z,CLOSED,False,34,1,2,https://github.com/chrissie-c,cmaptool: Add option to clear the stats with a simple command,1,[],https://github.com/corosync/corosync/pull/271,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/271#issuecomment-341692772,Signed-off-by: Christine Caulfield ccaulfie@redhat.com,"@chrissie-c Thanks for the patch, ACK and merged as b3c62c1 .",True,{}
corosync/corosync,https://github.com/corosync/corosync,272,2017-11-06T08:27:55Z,2017-11-06T08:39:06Z,2018-03-02T16:40:27Z,CLOSED,False,2,2,1,https://github.com/jfriesse,"coroparse: Do not convert empty uid, gid to 0",1,[],https://github.com/corosync/corosync/pull/272,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/272,"When uid (or gid) value was empty string it was incorrectly converted to
0. Solution is to check input string emptines.
Thanks Bin Liu bliu@suse.com for reporting the bug.
Signed-off-by: Jan Friesse jfriesse@redhat.com","When uid (or gid) value was empty string it was incorrectly converted to
0. Solution is to check input string emptines.
Thanks Bin Liu bliu@suse.com for reporting the bug.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,272,2017-11-06T08:27:55Z,2017-11-06T08:39:06Z,2018-03-02T16:40:27Z,CLOSED,False,2,2,1,https://github.com/jfriesse,"coroparse: Do not convert empty uid, gid to 0",1,[],https://github.com/corosync/corosync/pull/272,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/272#issuecomment-342080331,"When uid (or gid) value was empty string it was incorrectly converted to
0. Solution is to check input string emptines.
Thanks Bin Liu bliu@suse.com for reporting the bug.
Signed-off-by: Jan Friesse jfriesse@redhat.com",Reviewed and tested by Bin so I've merged and closing this PR.,True,{}
corosync/corosync,https://github.com/corosync/corosync,273,2017-11-07T05:13:58Z,2017-11-07T15:05:17Z,2017-11-08T02:31:25Z,CLOSED,False,41,36,4,https://github.com/liu4480,Fix compile warings,2,[],https://github.com/corosync/corosync/pull/273,https://github.com/liu4480,1,https://github.com/corosync/corosync/pull/273,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,273,2017-11-07T05:13:58Z,2017-11-07T15:05:17Z,2017-11-08T02:31:25Z,CLOSED,False,41,36,4,https://github.com/liu4480,Fix compile warings,2,[],https://github.com/corosync/corosync/pull/273,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/273#issuecomment-342402512,,"@liu4480 First patch is incorrect for sure. Things like
strlen(sam_internal_data.cmap_pid_path) + 12

are not only unsafe (replacing perfectly safe version) but also magic (why 12?)
Second patch also doesn't look correct. It is basically ""hand made"" expansion of function into another function.
Let me give a try of gcc 7.2 compiler and I will ether send PR or help you with the problem.",True,{}
corosync/corosync,https://github.com/corosync/corosync,273,2017-11-07T05:13:58Z,2017-11-07T15:05:17Z,2017-11-08T02:31:25Z,CLOSED,False,41,36,4,https://github.com/liu4480,Fix compile warings,2,[],https://github.com/corosync/corosync/pull/273,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/273#issuecomment-342510491,,"@liu4480 closing this PR, because I've made (I believe you will agree) much cleaner PR #274
Can you please give it a try?",True,{}
corosync/corosync,https://github.com/corosync/corosync,274,2017-11-07T15:02:07Z,2017-11-08T08:13:37Z,2017-11-08T08:13:45Z,CLOSED,False,41,14,4,https://github.com/jfriesse,Fixes of warnings found by gcc 7.2.1,4,[],https://github.com/corosync/corosync/pull/274,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/274,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,274,2017-11-07T15:02:07Z,2017-11-08T08:13:37Z,2017-11-08T08:13:45Z,CLOSED,False,41,14,4,https://github.com/jfriesse,Fixes of warnings found by gcc 7.2.1,4,[],https://github.com/corosync/corosync/pull/274,https://github.com/liu4480,2,https://github.com/corosync/corosync/pull/274#issuecomment-342691803,,@jfriesse the warning has disappeared. :),True,{}
corosync/corosync,https://github.com/corosync/corosync,274,2017-11-07T15:02:07Z,2017-11-08T08:13:37Z,2017-11-08T08:13:45Z,CLOSED,False,41,14,4,https://github.com/jfriesse,Fixes of warnings found by gcc 7.2.1,4,[],https://github.com/corosync/corosync/pull/274,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/274#issuecomment-342742207,,All patches merged so closing this PR.,True,{}
corosync/corosync,https://github.com/corosync/corosync,275,2017-11-08T11:48:27Z,2017-11-09T09:09:25Z,2017-11-09T09:09:25Z,CLOSED,False,17,15,1,https://github.com/jnpkrn,man: corosync-qdevice: fix formatting vs. punctuation,1,[],https://github.com/corosync/corosync/pull/275,https://github.com/jnpkrn,1,https://github.com/corosync/corosync/pull/275,"Previously, some enumerations were hard to follow, as they were
marked up all at once, including punctuation and connectives.
Also mark up some expressly given defaults.
Signed-off-by: Jan Pokorný jpokorny@redhat.com","Previously, some enumerations were hard to follow, as they were
marked up all at once, including punctuation and connectives.
Also mark up some expressly given defaults.
Signed-off-by: Jan Pokorný jpokorny@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,275,2017-11-08T11:48:27Z,2017-11-09T09:09:25Z,2017-11-09T09:09:25Z,CLOSED,False,17,15,1,https://github.com/jnpkrn,man: corosync-qdevice: fix formatting vs. punctuation,1,[],https://github.com/corosync/corosync/pull/275,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/275#issuecomment-343091896,"Previously, some enumerations were hard to follow, as they were
marked up all at once, including punctuation and connectives.
Also mark up some expressly given defaults.
Signed-off-by: Jan Pokorný jpokorny@redhat.com","@jnpkrn Nice catch and patch so ACK and merged as ae62db4 .
Thank you for the patch,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,276,2017-11-08T15:18:48Z,2017-11-09T08:53:19Z,2018-03-02T16:49:33Z,CLOSED,False,59,36,14,https://github.com/jfriesse,Systemd notify,7,[],https://github.com/corosync/corosync/pull/276,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/276,Rebase of #265,Rebase of #265,True,{}
corosync/corosync,https://github.com/corosync/corosync,276,2017-11-08T15:18:48Z,2017-11-09T08:53:19Z,2018-03-02T16:49:33Z,CLOSED,False,59,36,14,https://github.com/jfriesse,Systemd notify,7,[],https://github.com/corosync/corosync/pull/276,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/276#issuecomment-343087851,Rebase of #265,Merged as 9292c79 .. 09b0123,True,{}
corosync/corosync,https://github.com/corosync/corosync,277,2017-11-09T10:33:44Z,2017-11-10T14:06:13Z,2017-11-10T14:13:00Z,CLOSED,False,1,1,1,https://github.com/wferi,systemd: corosync-qdevice can not run without corosync,1,[],https://github.com/corosync/corosync/pull/277,https://github.com/wferi,1,https://github.com/corosync/corosync/pull/277,"Signed-off-by: Ferenc Wágner wferi@debian.org
This commit cherry-picks cleanly into needle.","Signed-off-by: Ferenc Wágner wferi@debian.org
This commit cherry-picks cleanly into needle.",True,{}
corosync/corosync,https://github.com/corosync/corosync,277,2017-11-09T10:33:44Z,2017-11-10T14:06:13Z,2017-11-10T14:13:00Z,CLOSED,False,1,1,1,https://github.com/wferi,systemd: corosync-qdevice can not run without corosync,1,[],https://github.com/corosync/corosync/pull/277,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/277#issuecomment-343482068,"Signed-off-by: Ferenc Wágner wferi@debian.org
This commit cherry-picks cleanly into needle.","@wferi Thank you for the patch, good catch, good patch so ACK and merged as e469bd8
Regards,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,278,2017-11-09T16:18:17Z,2017-11-14T08:37:05Z,2017-11-14T08:37:05Z,CLOSED,False,42,17,1,https://github.com/jnpkrn,man: corosync-qdevice: some more stylistics,1,[],https://github.com/corosync/corosync/pull/278,https://github.com/jnpkrn,1,https://github.com/corosync/corosync/pull/278,"Following the established scheme:

expressly given defaults: italics (underline in standard terminals)
key cross-references: bold (as well as the originals)


fix missing paragraph delimiter
s/what/which/ where appropriate

Signed-off-by: Jan Pokorný jpokorny@redhat.com","Following the established scheme:

expressly given defaults: italics (underline in standard terminals)
key cross-references: bold (as well as the originals)


fix missing paragraph delimiter
s/what/which/ where appropriate

Signed-off-by: Jan Pokorný jpokorny@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,278,2017-11-09T16:18:17Z,2017-11-14T08:37:05Z,2017-11-14T08:37:05Z,CLOSED,False,42,17,1,https://github.com/jnpkrn,man: corosync-qdevice: some more stylistics,1,[],https://github.com/corosync/corosync/pull/278,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/278#issuecomment-344183611,"Following the established scheme:

expressly given defaults: italics (underline in standard terminals)
key cross-references: bold (as well as the originals)


fix missing paragraph delimiter
s/what/which/ where appropriate

Signed-off-by: Jan Pokorný jpokorny@redhat.com","@jnpkrn Good catch and patch, so ACK and merged as 71d4a24 .
Thanks for the patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,280,2017-11-13T17:02:58Z,2017-11-16T14:24:25Z,2018-03-02T16:49:47Z,CLOSED,False,44,130,1,https://github.com/jfriesse,Sync init all,2,[],https://github.com/corosync/corosync/pull/280,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/280,"This patch solves situation which can happen very rearly:

Node B is running
Node A is started and tries to create singleton membership. It also
initialize service S which tries to send message during initialization
Just before node A finished move to operational state, it gets
Node B multicast message so moves to gather state
Node A and B creates membership and moves to operational state and
sync is started
Node A and B receives message sent by node A during initialization of
service S
Node A exits before sync of service is finished

In this situation, node B may never execute sync_init for
service S. So node B service S is not aware of existence of node A but
it received message from it.
Similar situation can theoretically also happen during merge.
Solution is to change flow of sync, so now it looks like:

Build service_list
Call sync_init for all local services
Send service_list
Receive service_list from all members and send barier
For all services:

Receive barier
Call sync_activate if this is not first service
Call sync_process for next service or finish sync if previous
this service is the last one
Send barier","This patch solves situation which can happen very rearly:

Node B is running
Node A is started and tries to create singleton membership. It also
initialize service S which tries to send message during initialization
Just before node A finished move to operational state, it gets
Node B multicast message so moves to gather state
Node A and B creates membership and moves to operational state and
sync is started
Node A and B receives message sent by node A during initialization of
service S
Node A exits before sync of service is finished

In this situation, node B may never execute sync_init for
service S. So node B service S is not aware of existence of node A but
it received message from it.
Similar situation can theoretically also happen during merge.
Solution is to change flow of sync, so now it looks like:

Build service_list
Call sync_init for all local services
Send service_list
Receive service_list from all members and send barier
For all services:

Receive barier
Call sync_activate if this is not first service
Call sync_process for next service or finish sync if previous
this service is the last one
Send barier",True,{}
corosync/corosync,https://github.com/corosync/corosync,280,2017-11-13T17:02:58Z,2017-11-16T14:24:25Z,2018-03-02T16:49:47Z,CLOSED,False,44,130,1,https://github.com/jfriesse,Sync init all,2,[],https://github.com/corosync/corosync/pull/280,https://github.com/chrissie-c,2,https://github.com/corosync/corosync/pull/280#issuecomment-344928559,"This patch solves situation which can happen very rearly:

Node B is running
Node A is started and tries to create singleton membership. It also
initialize service S which tries to send message during initialization
Just before node A finished move to operational state, it gets
Node B multicast message so moves to gather state
Node A and B creates membership and moves to operational state and
sync is started
Node A and B receives message sent by node A during initialization of
service S
Node A exits before sync of service is finished

In this situation, node B may never execute sync_init for
service S. So node B service S is not aware of existence of node A but
it received message from it.
Similar situation can theoretically also happen during merge.
Solution is to change flow of sync, so now it looks like:

Build service_list
Call sync_init for all local services
Send service_list
Receive service_list from all members and send barier
For all services:

Receive barier
Call sync_activate if this is not first service
Call sync_process for next service or finish sync if previous
this service is the last one
Send barier","ACK, looks OK and passes my tests (after cleaning my VMs!)",True,{}
corosync/corosync,https://github.com/corosync/corosync,280,2017-11-13T17:02:58Z,2017-11-16T14:24:25Z,2018-03-02T16:49:47Z,CLOSED,False,44,130,1,https://github.com/jfriesse,Sync init all,2,[],https://github.com/corosync/corosync/pull/280,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/280#issuecomment-344937447,"This patch solves situation which can happen very rearly:

Node B is running
Node A is started and tries to create singleton membership. It also
initialize service S which tries to send message during initialization
Just before node A finished move to operational state, it gets
Node B multicast message so moves to gather state
Node A and B creates membership and moves to operational state and
sync is started
Node A and B receives message sent by node A during initialization of
service S
Node A exits before sync of service is finished

In this situation, node B may never execute sync_init for
service S. So node B service S is not aware of existence of node A but
it received message from it.
Similar situation can theoretically also happen during merge.
Solution is to change flow of sync, so now it looks like:

Build service_list
Call sync_init for all local services
Send service_list
Receive service_list from all members and send barier
For all services:

Receive barier
Call sync_activate if this is not first service
Call sync_process for next service or finish sync if previous
this service is the last one
Send barier","@chrissie-c Thank you for the review, I've merged as 499eaac / c50b549 and 154895d / f365ee6.",True,{}
corosync/corosync,https://github.com/corosync/corosync,281,2017-11-14T10:30:46Z,2017-11-16T07:36:43Z,2017-11-16T07:36:43Z,CLOSED,False,2,0,1,https://github.com/chrissie-c,stats: Add some missing knet stats,2,[],https://github.com/corosync/corosync/pull/281,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/281,Signed-off-by: Christine Caulfield ccaulfie@redhat.com,Signed-off-by: Christine Caulfield ccaulfie@redhat.com,True,{}
corosync/corosync,https://github.com/corosync/corosync,281,2017-11-14T10:30:46Z,2017-11-16T07:36:43Z,2017-11-16T07:36:43Z,CLOSED,False,2,0,1,https://github.com/chrissie-c,stats: Add some missing knet stats,2,[],https://github.com/corosync/corosync/pull/281,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/281#issuecomment-344840097,Signed-off-by: Christine Caulfield ccaulfie@redhat.com,@chrissie-c Patch looks good so ACK and squashed + marged as 1df7eca.,True,{}
corosync/corosync,https://github.com/corosync/corosync,282,2017-11-16T14:33:10Z,2017-12-01T16:34:54Z,2017-12-01T16:34:54Z,CLOSED,False,5,1,1,https://github.com/chrissie-c,corosync-cmapctl: mention the Clear stats option in usage message.,1,[],https://github.com/corosync/corosync/pull/282,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/282,"This went astray in the original patch.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","This went astray in the original patch.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,282,2017-11-16T14:33:10Z,2017-12-01T16:34:54Z,2017-12-01T16:34:54Z,CLOSED,False,5,1,1,https://github.com/chrissie-c,corosync-cmapctl: mention the Clear stats option in usage message.,1,[],https://github.com/corosync/corosync/pull/282,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/282#issuecomment-348542491,"This went astray in the original patch.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","@chrissie-c Wondering how I could forget to include this nice patch. Anyway, ACK and merged as 2c87ae5.
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,283,2017-11-20T10:01:49Z,2017-11-27T08:35:41Z,2017-11-29T06:52:21Z,MERGED,True,1,1,1,https://github.com/liu4480,fix output format for corosync-cfgtool with knet,1,[],https://github.com/corosync/corosync/pull/283,https://github.com/liu4480,1,https://github.com/corosync/corosync/pull/283,"the output is corosync-cfgtool -s
Printing link status.
Local node ID 1
LINK ID 0
id	= 10.67.19.156
status:
node 0:
link enabled:1	link connected:1
node 1:
link enabled:1	link connected:1
node 2:
link enabled:1	link connected:1
this is not well formated by mistakenly type ""\n"" in the code, change the format to:
Printing link status.
Local node ID 1
LINK ID 0
id	= 10.67.19.156
status:
node 0:	link enabled:1	link connected:1
node 1:	link enabled:1	link connected:1
node 2:	link enabled:1	link connected:1
Really sorry for the overlook.","the output is corosync-cfgtool -s
Printing link status.
Local node ID 1
LINK ID 0
id	= 10.67.19.156
status:
node 0:
link enabled:1	link connected:1
node 1:
link enabled:1	link connected:1
node 2:
link enabled:1	link connected:1
this is not well formated by mistakenly type ""\n"" in the code, change the format to:
Printing link status.
Local node ID 1
LINK ID 0
id	= 10.67.19.156
status:
node 0:	link enabled:1	link connected:1
node 1:	link enabled:1	link connected:1
node 2:	link enabled:1	link connected:1
Really sorry for the overlook.",True,{}
corosync/corosync,https://github.com/corosync/corosync,284,2017-11-29T06:51:38Z,2017-11-30T08:05:16Z,2017-12-01T02:53:11Z,CLOSED,False,48,29,5,https://github.com/liu4480,corosync-cfgtool -i must be used with -s,4,[],https://github.com/corosync/corosync/pull/284,https://github.com/liu4480,1,https://github.com/corosync/corosync/pull/284,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,284,2017-11-29T06:51:38Z,2017-11-30T08:05:16Z,2017-12-01T02:53:11Z,CLOSED,False,48,29,5,https://github.com/liu4480,corosync-cfgtool -i must be used with -s,4,[],https://github.com/corosync/corosync/pull/284,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/284#issuecomment-347930435,,"@liu4480 Good catch. Normally I would just accept patch, but after brief look to cfgtool I would suggest bigger patch. Such patch would convert current options parsing into style similar to cmapctl, so

-s, -R, -k, -H, -a and -h would set variable (like action) which would have no_value (or help value) at the beginning. Of course -k and -a has to set also nodeid.
-i, -b would just set variable as it's now

After processing all the options, there will be one switch depending on action (where default = do_usage) which will do all the job.
This will make your patch not needed and code will be slightly more understandable.
Ideas, comments?",True,{}
corosync/corosync,https://github.com/corosync/corosync,284,2017-11-29T06:51:38Z,2017-11-30T08:05:16Z,2017-12-01T02:53:11Z,CLOSED,False,48,29,5,https://github.com/liu4480,corosync-cfgtool -i must be used with -s,4,[],https://github.com/corosync/corosync/pull/284,https://github.com/liu4480,3,https://github.com/corosync/corosync/pull/284#issuecomment-348061227,,"Yes, agree, this is much better than now. So do you mind I propose another PR?",True,{}
corosync/corosync,https://github.com/corosync/corosync,284,2017-11-29T06:51:38Z,2017-11-30T08:05:16Z,2017-12-01T02:53:11Z,CLOSED,False,48,29,5,https://github.com/liu4480,corosync-cfgtool -i must be used with -s,4,[],https://github.com/corosync/corosync/pull/284,https://github.com/liu4480,4,https://github.com/corosync/corosync/pull/284#issuecomment-348092504,,"by the way, do you think a warning that ""-s"", ""-R"", ""-k"", ""-H"", ""-a"", can not run at the same time is better. Otherwise, the action will be overwrite by the last specified one.",True,{}
corosync/corosync,https://github.com/corosync/corosync,284,2017-11-29T06:51:38Z,2017-11-30T08:05:16Z,2017-12-01T02:53:11Z,CLOSED,False,48,29,5,https://github.com/liu4480,corosync-cfgtool -i must be used with -s,4,[],https://github.com/corosync/corosync/pull/284,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/284#issuecomment-348107638,,"@liu4480 It's really up-to you if you use new PR or use this one, I can handle both ;)
Cmapctl doesn't show warning and I'm not aware of any command which does. It's essentially same as set one argument multiple times and it almost never shows warning. As an example you can try:
ls --color=never --color=always",True,{}
corosync/corosync,https://github.com/corosync/corosync,285,2017-11-29T08:59:31Z,2017-11-29T17:22:54Z,2017-12-04T07:13:00Z,CLOSED,False,6,10,3,https://github.com/liu4480,Typo fix,3,[],https://github.com/corosync/corosync/pull/285,https://github.com/liu4480,1,https://github.com/corosync/corosync/pull/285,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,285,2017-11-29T08:59:31Z,2017-11-29T17:22:54Z,2017-12-04T07:13:00Z,CLOSED,False,6,10,3,https://github.com/liu4480,Typo fix,3,[],https://github.com/corosync/corosync/pull/285,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/285#issuecomment-347932948,,"@liu4480 Good catches, nice patches so ACK and merged as 50bc2ac, 01b44d1 and af21baf
Thank you for the patches,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,286,2017-11-29T19:43:11Z,2017-11-30T15:35:21Z,2017-11-30T16:05:12Z,CLOSED,False,18,2,3,https://github.com/jnpkrn,corosync.conf: publicize nodelist.node.name configuration option,1,[],https://github.com/corosync/corosync/pull/286,https://github.com/jnpkrn,1,https://github.com/corosync/corosync/pull/286,"It was discovered that pacemaker was occassionaly relying on that value
configured in corosync.conf (and documenting so), while backpropagation
got lost somewhere.  As the option is deemed generally beneficial by
Honza[1], rectify this gap now and make it standard, public part of
the configuration space, possibly also for other client SW to use now.
[1] https://bugzilla.redhat.com/show_bug.cgi?id=1517834#c6
Signed-off-by: Jan Pokorný jpokorny@redhat.com","It was discovered that pacemaker was occassionaly relying on that value
configured in corosync.conf (and documenting so), while backpropagation
got lost somewhere.  As the option is deemed generally beneficial by
Honza[1], rectify this gap now and make it standard, public part of
the configuration space, possibly also for other client SW to use now.
[1] https://bugzilla.redhat.com/show_bug.cgi?id=1517834#c6
Signed-off-by: Jan Pokorný jpokorny@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,286,2017-11-29T19:43:11Z,2017-11-30T15:35:21Z,2017-11-30T16:05:12Z,CLOSED,False,18,2,3,https://github.com/jnpkrn,corosync.conf: publicize nodelist.node.name configuration option,1,[],https://github.com/corosync/corosync/pull/286,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/286#issuecomment-348224408,"It was discovered that pacemaker was occassionaly relying on that value
configured in corosync.conf (and documenting so), while backpropagation
got lost somewhere.  As the option is deemed generally beneficial by
Honza[1], rectify this gap now and make it standard, public part of
the configuration space, possibly also for other client SW to use now.
[1] https://bugzilla.redhat.com/show_bug.cgi?id=1517834#c6
Signed-off-by: Jan Pokorný jpokorny@redhat.com","@jnpkrn Thank you for the patch. I've edited commit message slightly to not include link to rh bugzilla, (simply because we generally not include them) and merged as 4708d1d .
Thanks for the patch,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,286,2017-11-29T19:43:11Z,2017-11-30T15:35:21Z,2017-11-30T16:05:12Z,CLOSED,False,18,2,3,https://github.com/jnpkrn,corosync.conf: publicize nodelist.node.name configuration option,1,[],https://github.com/corosync/corosync/pull/286,https://github.com/jnpkrn,3,https://github.com/corosync/corosync/pull/286#issuecomment-348234273,"It was discovered that pacemaker was occassionaly relying on that value
configured in corosync.conf (and documenting so), while backpropagation
got lost somewhere.  As the option is deemed generally beneficial by
Honza[1], rectify this gap now and make it standard, public part of
the configuration space, possibly also for other client SW to use now.
[1] https://bugzilla.redhat.com/show_bug.cgi?id=1517834#c6
Signed-off-by: Jan Pokorný jpokorny@redhat.com",No problem if you prefer less context attached.  And thanks.,True,{}
corosync/corosync,https://github.com/corosync/corosync,287,2017-11-30T08:10:18Z,2017-12-01T16:31:10Z,2017-12-04T07:12:42Z,CLOSED,False,45,19,2,https://github.com/liu4480,tools: refact corosync-cfgtool,1,[],https://github.com/corosync/corosync/pull/287,https://github.com/liu4480,1,https://github.com/corosync/corosync/pull/287,"use the idea from corosync-cmapctl to set ACTION and params in the first
swtich, and add another swtich to call function based on ACTION and the
params","use the idea from corosync-cmapctl to set ACTION and params in the first
swtich, and add another swtich to call function based on ACTION and the
params",True,{}
corosync/corosync,https://github.com/corosync/corosync,287,2017-11-30T08:10:18Z,2017-12-01T16:31:10Z,2017-12-04T07:12:42Z,CLOSED,False,45,19,2,https://github.com/liu4480,tools: refact corosync-cfgtool,1,[],https://github.com/corosync/corosync/pull/287,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/287#issuecomment-348227745,"use the idea from corosync-cmapctl to set ACTION and params in the first
swtich, and add another swtich to call function based on ACTION and the
params","@liu4480 Really nice patch, but I have one small nitpick. It's good idea to catch '?' and exit with failure.. This is how commands usually behaves. As an example you can try
ls -e -l",True,{}
corosync/corosync,https://github.com/corosync/corosync,287,2017-11-30T08:10:18Z,2017-12-01T16:31:10Z,2017-12-04T07:12:42Z,CLOSED,False,45,19,2,https://github.com/liu4480,tools: refact corosync-cfgtool,1,[],https://github.com/corosync/corosync/pull/287,https://github.com/liu4480,3,https://github.com/corosync/corosync/pull/287#issuecomment-348385373,"use the idea from corosync-cmapctl to set ACTION and params in the first
swtich, and add another swtich to call function based on ACTION and the
params","@jfriesse , I just found an unnecessary break in corosync-cmapctl.c, do you think it reasonable to remove:
case '?':
return (EXIT_FAILURE);
--			break;",True,{}
corosync/corosync,https://github.com/corosync/corosync,287,2017-11-30T08:10:18Z,2017-12-01T16:31:10Z,2017-12-04T07:12:42Z,CLOSED,False,45,19,2,https://github.com/liu4480,tools: refact corosync-cfgtool,1,[],https://github.com/corosync/corosync/pull/287,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/287#issuecomment-348430184,"use the idea from corosync-cmapctl to set ACTION and params in the first
swtich, and add another swtich to call function based on ACTION and the
params","@liu4480 No, I don't think so.",True,{}
corosync/corosync,https://github.com/corosync/corosync,287,2017-11-30T08:10:18Z,2017-12-01T16:31:10Z,2017-12-04T07:12:42Z,CLOSED,False,45,19,2,https://github.com/liu4480,tools: refact corosync-cfgtool,1,[],https://github.com/corosync/corosync/pull/287,https://github.com/liu4480,5,https://github.com/corosync/corosync/pull/287#issuecomment-348438285,"use the idea from corosync-cmapctl to set ACTION and params in the first
swtich, and add another swtich to call function based on ACTION and the
params",@jfriesse thanks for confirmation. Just updated the PR,True,{}
corosync/corosync,https://github.com/corosync/corosync,287,2017-11-30T08:10:18Z,2017-12-01T16:31:10Z,2017-12-04T07:12:42Z,CLOSED,False,45,19,2,https://github.com/liu4480,tools: refact corosync-cfgtool,1,[],https://github.com/corosync/corosync/pull/287,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/287#issuecomment-348541458,"use the idea from corosync-cmapctl to set ACTION and params in the first
swtich, and add another swtich to call function based on ACTION and the
params","@liu4480  Nice work, thank you for the patch. ACK and merged as 6dee045
Regards,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,288,2017-11-30T15:00:46Z,2017-11-30T16:00:29Z,2017-11-30T16:00:30Z,CLOSED,False,87,22,7,https://github.com/chrissie-c,totemsrp: Reverb totemsrp_get_ifaces() to previous code,1,[],https://github.com/corosync/corosync/pull/288,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/288,"In my enthusiasm for removing code while integrating knet I
also deleted the correct code for returning IP address for a node,
so that only the IP addres of the local node was ever returned.
This commit restores the the previous code.
Also, because we always return INTERFACE_MAX interfaces now (they don't
have to be contiguous) set ss_family to zero if that interface is not
in use so that downstream apps know and don't display a lot of 0.0.0.0
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","In my enthusiasm for removing code while integrating knet I
also deleted the correct code for returning IP address for a node,
so that only the IP addres of the local node was ever returned.
This commit restores the the previous code.
Also, because we always return INTERFACE_MAX interfaces now (they don't
have to be contiguous) set ss_family to zero if that interface is not
in use so that downstream apps know and don't display a lot of 0.0.0.0
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,288,2017-11-30T15:00:46Z,2017-11-30T16:00:29Z,2017-11-30T16:00:30Z,CLOSED,False,87,22,7,https://github.com/chrissie-c,totemsrp: Reverb totemsrp_get_ifaces() to previous code,1,[],https://github.com/corosync/corosync/pull/288,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/288#issuecomment-348232736,"In my enthusiasm for removing code while integrating knet I
also deleted the correct code for returning IP address for a node,
so that only the IP addres of the local node was ever returned.
This commit restores the the previous code.
Also, because we always return INTERFACE_MAX interfaces now (they don't
have to be contiguous) set ss_family to zero if that interface is not
in use so that downstream apps know and don't display a lot of 0.0.0.0
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","@chrissie-c Nice patch so ACK and merged as 1ca72a1
Thank you for the patch,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,289,2017-12-01T03:03:09Z,2017-12-01T16:26:04Z,2017-12-04T07:12:28Z,CLOSED,False,10,10,1,https://github.com/liu4480,fix snprintf warnings for wd.c,1,[],https://github.com/corosync/corosync/pull/289,https://github.com/liu4480,1,https://github.com/corosync/corosync/pull/289,"When running ./configure --enable-watchdog, gcc 7.2.1 will report
warnings for snprintf. This patch fixes the warnings.","When running ./configure --enable-watchdog, gcc 7.2.1 will report
warnings for snprintf. This patch fixes the warnings.",True,{}
corosync/corosync,https://github.com/corosync/corosync,289,2017-12-01T03:03:09Z,2017-12-01T16:26:04Z,2017-12-04T07:12:28Z,CLOSED,False,10,10,1,https://github.com/liu4480,fix snprintf warnings for wd.c,1,[],https://github.com/corosync/corosync/pull/289,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/289#issuecomment-348430456,"When running ./configure --enable-watchdog, gcc 7.2.1 will report
warnings for snprintf. This patch fixes the warnings.","@liu4480 Good good, but please leave space after if, so if (condition) not if(condition)",True,{}
corosync/corosync,https://github.com/corosync/corosync,289,2017-12-01T03:03:09Z,2017-12-01T16:26:04Z,2017-12-04T07:12:28Z,CLOSED,False,10,10,1,https://github.com/liu4480,fix snprintf warnings for wd.c,1,[],https://github.com/corosync/corosync/pull/289,https://github.com/liu4480,3,https://github.com/corosync/corosync/pull/289#issuecomment-348431658,"When running ./configure --enable-watchdog, gcc 7.2.1 will report
warnings for snprintf. This patch fixes the warnings.","@jfriesse thanks for the advice, just updated:)",True,{}
corosync/corosync,https://github.com/corosync/corosync,289,2017-12-01T03:03:09Z,2017-12-01T16:26:04Z,2017-12-04T07:12:28Z,CLOSED,False,10,10,1,https://github.com/liu4480,fix snprintf warnings for wd.c,1,[],https://github.com/corosync/corosync/pull/289,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/289#issuecomment-348540029,"When running ./configure --enable-watchdog, gcc 7.2.1 will report
warnings for snprintf. This patch fixes the warnings.","@liu4480 Perfect, thanks. ACK and merged as b1d3eca / b580914 .
Thank you for the patch,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,290,2017-12-05T05:52:52Z,2018-01-15T14:02:22Z,2018-01-17T05:31:02Z,CLOSED,False,34,22,2,https://github.com/liu4480,fix: errors in corosync-notifyd.c,1,[],https://github.com/corosync/corosync/pull/290,https://github.com/liu4480,1,https://github.com/corosync/corosync/pull/290,"rrp_faulty_fn in notify_callbacks no longer exists, and now become
link_faulty_fn, and also link_faulty_fn needs 5 arguments while
rrp_faulty_fn needs 4.","rrp_faulty_fn in notify_callbacks no longer exists, and now become
link_faulty_fn, and also link_faulty_fn needs 5 arguments while
rrp_faulty_fn needs 4.",True,{}
corosync/corosync,https://github.com/corosync/corosync,290,2017-12-05T05:52:52Z,2018-01-15T14:02:22Z,2018-01-17T05:31:02Z,CLOSED,False,34,22,2,https://github.com/liu4480,fix: errors in corosync-notifyd.c,1,[],https://github.com/corosync/corosync/pull/290,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/290#issuecomment-349311226,"rrp_faulty_fn in notify_callbacks no longer exists, and now become
link_faulty_fn, and also link_faulty_fn needs 5 arguments while
rrp_faulty_fn needs 4.","@liu4480 Thanks for notice the change, for sure ACK. I'm not merging yet, because I would like to see also change in COROSYNC-MIB.txt file to reflect new parameters.",True,{}
corosync/corosync,https://github.com/corosync/corosync,290,2017-12-05T05:52:52Z,2018-01-15T14:02:22Z,2018-01-17T05:31:02Z,CLOSED,False,34,22,2,https://github.com/liu4480,fix: errors in corosync-notifyd.c,1,[],https://github.com/corosync/corosync/pull/290,https://github.com/liu4480,3,https://github.com/corosync/corosync/pull/290#issuecomment-349516293,"rrp_faulty_fn in notify_callbacks no longer exists, and now become
link_faulty_fn, and also link_faulty_fn needs 5 arguments while
rrp_faulty_fn needs 4.","@jfriesse Hi, Honza, just updated the PR, is this what you wanted?",True,{}
corosync/corosync,https://github.com/corosync/corosync,290,2017-12-05T05:52:52Z,2018-01-15T14:02:22Z,2018-01-17T05:31:02Z,CLOSED,False,34,22,2,https://github.com/liu4480,fix: errors in corosync-notifyd.c,1,[],https://github.com/corosync/corosync/pull/290,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/290#issuecomment-350265971,"rrp_faulty_fn in notify_callbacks no longer exists, and now become
link_faulty_fn, and also link_faulty_fn needs 5 arguments while
rrp_faulty_fn needs 4.","@liu4480 Hi, actually nope ;) (but I like the change so keep it as it is). What I was thinking about is
corosyncNoticesRRPStatus NOTIFICATION-TYPE

I believe OBJECTS should contain 5 parameters and not 4 as it is containing now.

I believe we should increase the LAST-UPDATED entry.

Also did you had time to really test that code (I mean, test by executing the traps and catching them in SNMP software)?",True,{}
corosync/corosync,https://github.com/corosync/corosync,290,2017-12-05T05:52:52Z,2018-01-15T14:02:22Z,2018-01-17T05:31:02Z,CLOSED,False,34,22,2,https://github.com/liu4480,fix: errors in corosync-notifyd.c,1,[],https://github.com/corosync/corosync/pull/290,https://github.com/liu4480,5,https://github.com/corosync/corosync/pull/290#issuecomment-350610083,"rrp_faulty_fn in notify_callbacks no longer exists, and now become
link_faulty_fn, and also link_faulty_fn needs 5 arguments while
rrp_faulty_fn needs 4.","I will test them today.:)
@jfriesse , Hi, Honza
just to update the test result, with this pull request,  I was unable to catch the traps. not sure if it misconfiguration or patch does not work.",True,{}
corosync/corosync,https://github.com/corosync/corosync,290,2017-12-05T05:52:52Z,2018-01-15T14:02:22Z,2018-01-17T05:31:02Z,CLOSED,False,34,22,2,https://github.com/liu4480,fix: errors in corosync-notifyd.c,1,[],https://github.com/corosync/corosync/pull/290,https://github.com/liu4480,6,https://github.com/corosync/corosync/pull/290#issuecomment-350666801,"rrp_faulty_fn in notify_callbacks no longer exists, and now become
link_faulty_fn, and also link_faulty_fn needs 5 arguments while
rrp_faulty_fn needs 4.","forget to paste the configuration:
cat /etc/sysconfig/corosync-notifyd:
OPTIONS=""-s -o -m 127.0.0.1""
cat /etc/snmp/snmpd.conf
syslocation Server Room
syscontact Sysadmin (root@localhost)
rocommunity public 127.0.0.1
cat /etc/snmp/snmp.conf
mibs ALL
cat /etc/snmp/snmptrapd.conf
authCommunity log,execute,net public
traphandle default /usr/bin/traptoemail root",True,{}
corosync/corosync,https://github.com/corosync/corosync,290,2017-12-05T05:52:52Z,2018-01-15T14:02:22Z,2018-01-17T05:31:02Z,CLOSED,False,34,22,2,https://github.com/liu4480,fix: errors in corosync-notifyd.c,1,[],https://github.com/corosync/corosync/pull/290,https://github.com/jfriesse,7,https://github.com/corosync/corosync/pull/290#issuecomment-353627027,"rrp_faulty_fn in notify_callbacks no longer exists, and now become
link_faulty_fn, and also link_faulty_fn needs 5 arguments while
rrp_faulty_fn needs 4.","@liu4480 Ok, I'll try to test, but probably after the Christmas/New year.",True,{}
corosync/corosync,https://github.com/corosync/corosync,290,2017-12-05T05:52:52Z,2018-01-15T14:02:22Z,2018-01-17T05:31:02Z,CLOSED,False,34,22,2,https://github.com/liu4480,fix: errors in corosync-notifyd.c,1,[],https://github.com/corosync/corosync/pull/290,https://github.com/jfriesse,8,https://github.com/corosync/corosync/pull/290#issuecomment-356969080,"rrp_faulty_fn in notify_callbacks no longer exists, and now become
link_faulty_fn, and also link_faulty_fn needs 5 arguments while
rrp_faulty_fn needs 4.","@liu4480 Ok, so played a bit with snmp traps. It works for me quite well. I was running (one console)
snmptrapd -f -Le -m COROSYNC-MIB

and second console I was executing
corosync-notifyd -f -s -c public -o

And snmptrapd was catching and logging events.
So your patch for sure needs updating of problems I've described in comment #290 (comment)",True,{}
corosync/corosync,https://github.com/corosync/corosync,290,2017-12-05T05:52:52Z,2018-01-15T14:02:22Z,2018-01-17T05:31:02Z,CLOSED,False,34,22,2,https://github.com/liu4480,fix: errors in corosync-notifyd.c,1,[],https://github.com/corosync/corosync/pull/290,https://github.com/liu4480,9,https://github.com/corosync/corosync/pull/290#issuecomment-357142297,"rrp_faulty_fn in notify_callbacks no longer exists, and now become
link_faulty_fn, and also link_faulty_fn needs 5 arguments while
rrp_faulty_fn needs 4.","@jfriesse

I believe we should increase the LAST-UPDATED entry.

I think I only need to change this. Or did I miss something?",True,{}
corosync/corosync,https://github.com/corosync/corosync,290,2017-12-05T05:52:52Z,2018-01-15T14:02:22Z,2018-01-17T05:31:02Z,CLOSED,False,34,22,2,https://github.com/liu4480,fix: errors in corosync-notifyd.c,1,[],https://github.com/corosync/corosync/pull/290,https://github.com/jfriesse,10,https://github.com/corosync/corosync/pull/290#issuecomment-357183551,"rrp_faulty_fn in notify_callbacks no longer exists, and now become
link_faulty_fn, and also link_faulty_fn needs 5 arguments while
rrp_faulty_fn needs 4.","@liu4480
LAST-UPDATED entry has to be changed for sure and corosyncNoticesLinkStatus object should contain five fields (now it contains 4) because patch changes _cs_snmp_link_faulty_event and adds one field.",True,{}
corosync/corosync,https://github.com/corosync/corosync,290,2017-12-05T05:52:52Z,2018-01-15T14:02:22Z,2018-01-17T05:31:02Z,CLOSED,False,34,22,2,https://github.com/liu4480,fix: errors in corosync-notifyd.c,1,[],https://github.com/corosync/corosync/pull/290,https://github.com/jfriesse,11,https://github.com/corosync/corosync/pull/290#issuecomment-357691021,"rrp_faulty_fn in notify_callbacks no longer exists, and now become
link_faulty_fn, and also link_faulty_fn needs 5 arguments while
rrp_faulty_fn needs 4.","@liu4480 Ok, sorry, I've just overlooked the first line addition. Oatch looks good, it seems to be working so ACK and merged as edca042
Thank you for the patch,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,292,2017-12-05T07:34:41Z,2017-12-05T17:54:45Z,2017-12-11T02:59:57Z,CLOSED,False,8,1,5,https://github.com/liu4480,fix compile errors in qdevice and vqsim on freebsd,1,[],https://github.com/corosync/corosync/pull/292,https://github.com/liu4480,1,https://github.com/corosync/corosync/pull/292,"Some header files need to be specified on FreeBSD, otherwise there
compile errors. These files does not affect on Linux.","Some header files need to be specified on FreeBSD, otherwise there
compile errors. These files does not affect on Linux.",True,{}
corosync/corosync,https://github.com/corosync/corosync,292,2017-12-05T07:34:41Z,2017-12-05T17:54:45Z,2017-12-11T02:59:57Z,CLOSED,False,8,1,5,https://github.com/liu4480,fix compile errors in qdevice and vqsim on freebsd,1,[],https://github.com/corosync/corosync/pull/292,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/292#issuecomment-349386158,"Some header files need to be specified on FreeBSD, otherwise there
compile errors. These files does not affect on Linux.","@liu4480 Good catch, nice patch so ACK and merged as 3252307. I've also did quick backport to needle and merged as 9182477 .
Thank you for the patch,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,293,2017-12-12T14:04:27Z,2017-12-22T16:15:57Z,2017-12-22T16:15:57Z,CLOSED,False,33,20,3,https://github.com/chrissie-c,config: Allow links to have different ip_versions,1,[],https://github.com/corosync/corosync/pull/293,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/293,"knet allows links to have different IP versions - proivided they
all match per link. So don't force them all to be the same.
I've added a check here to make sure that all nodes on the same
link are using the same IP version.","knet allows links to have different IP versions - proivided they
all match per link. So don't force them all to be the same.
I've added a check here to make sure that all nodes on the same
link are using the same IP version.",True,{}
corosync/corosync,https://github.com/corosync/corosync,293,2017-12-12T14:04:27Z,2017-12-22T16:15:57Z,2017-12-22T16:15:57Z,CLOSED,False,33,20,3,https://github.com/chrissie-c,config: Allow links to have different ip_versions,1,[],https://github.com/corosync/corosync/pull/293,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/293#issuecomment-353629055,"knet allows links to have different IP versions - proivided they
all match per link. So don't force them all to be the same.
I've added a check here to make sure that all nodes on the same
link are using the same IP version.","@chrissie-c Nice patch so ACK and merged as 2a6a571
Thanks for the patch,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,294,2017-12-15T00:51:36Z,2017-12-22T16:22:25Z,2017-12-22T16:22:25Z,CLOSED,False,3,1,1,https://github.com/tokiwinter,Add missing options to corosync.aug,2,[],https://github.com/corosync/corosync/pull/294,https://github.com/tokiwinter,1,https://github.com/corosync/corosync/pull/294,"Setting up a fairly basic cluster on CentOS 7, I noticed that the generated corosync.conf is unable to be parsed by augtool:
augtool> match /augeas//error
/augeas/files/etc/corosync/corosync.conf/error = parse_failed

This PR adds the missing cluster_name qstr, and also adds the additional udpu protocol to the supplied augeas lens.
After this, I can load and manipulate corosync.conf with augtool.","Setting up a fairly basic cluster on CentOS 7, I noticed that the generated corosync.conf is unable to be parsed by augtool:
augtool> match /augeas//error
/augeas/files/etc/corosync/corosync.conf/error = parse_failed

This PR adds the missing cluster_name qstr, and also adds the additional udpu protocol to the supplied augeas lens.
After this, I can load and manipulate corosync.conf with augtool.",True,{}
corosync/corosync,https://github.com/corosync/corosync,294,2017-12-15T00:51:36Z,2017-12-22T16:22:25Z,2017-12-22T16:22:25Z,CLOSED,False,3,1,1,https://github.com/tokiwinter,Add missing options to corosync.aug,2,[],https://github.com/corosync/corosync/pull/294,https://github.com/tokiwinter,2,https://github.com/corosync/corosync/pull/294#issuecomment-351897679,"Setting up a fairly basic cluster on CentOS 7, I noticed that the generated corosync.conf is unable to be parsed by augtool:
augtool> match /augeas//error
/augeas/files/etc/corosync/corosync.conf/error = parse_failed

This PR adds the missing cluster_name qstr, and also adds the additional udpu protocol to the supplied augeas lens.
After this, I can load and manipulate corosync.conf with augtool.",Added broadcast in the interface section,True,{}
corosync/corosync,https://github.com/corosync/corosync,294,2017-12-15T00:51:36Z,2017-12-22T16:22:25Z,2017-12-22T16:22:25Z,CLOSED,False,3,1,1,https://github.com/tokiwinter,Add missing options to corosync.aug,2,[],https://github.com/corosync/corosync/pull/294,https://github.com/chrissie-c,3,https://github.com/corosync/corosync/pull/294#issuecomment-351948297,"Setting up a fairly basic cluster on CentOS 7, I noticed that the generated corosync.conf is unable to be parsed by augtool:
augtool> match /augeas//error
/augeas/files/etc/corosync/corosync.conf/error = parse_failed

This PR adds the missing cluster_name qstr, and also adds the additional udpu protocol to the supplied augeas lens.
After this, I can load and manipulate corosync.conf with augtool.","For the corosync master branch then there are a load of knet-related options that ought to be in there too. If you don't fancy doing them I'll get round to them eventually.
Also, iba is not supported in corosync3 so that can be removed from the interface section",True,{}
corosync/corosync,https://github.com/corosync/corosync,294,2017-12-15T00:51:36Z,2017-12-22T16:22:25Z,2017-12-22T16:22:25Z,CLOSED,False,3,1,1,https://github.com/tokiwinter,Add missing options to corosync.aug,2,[],https://github.com/corosync/corosync/pull/294,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/294#issuecomment-353630381,"Setting up a fairly basic cluster on CentOS 7, I noticed that the generated corosync.conf is unable to be parsed by augtool:
augtool> match /augeas//error
/augeas/files/etc/corosync/corosync.conf/error = parse_failed

This PR adds the missing cluster_name qstr, and also adds the additional udpu protocol to the supplied augeas lens.
After this, I can load and manipulate corosync.conf with augtool.","@tokiwinter Nice catch, good patch so ACK, squashed and merged as 4a64fca (master) / e1155af (needle)
I fully agree with @chrissie-c that we have to add support also for knet, but I've decided to merge this patch because it's valid also for needle. I would suggest using new PR for knet related fixes, so closing this one.
Thank you for the patch,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,295,2017-12-27T10:36:59Z,2018-01-02T14:24:24Z,2018-01-02T14:24:24Z,CLOSED,False,2,2,1,https://github.com/liu4480,qdevice: mv free(str) after port validation,1,[],https://github.com/corosync/corosync/pull/295,https://github.com/liu4480,1,https://github.com/corosync/corosync/pull/295,"in the previous code of qdevice_net_instance_init_from_cmap:
host_port = strtol(str, &ep, 10);
free(str);
if (host_port <= 0 || host_port > ((uint16_t)~0) || *ep != '\0')
before free, *ep is '\0'. But after free, *ep changed to 'U', so mv
free behind the comparison in case of failure","in the previous code of qdevice_net_instance_init_from_cmap:
host_port = strtol(str, &ep, 10);
free(str);
if (host_port <= 0 || host_port > ((uint16_t)~0) || *ep != '\0')
before free, *ep is '\0'. But after free, *ep changed to 'U', so mv
free behind the comparison in case of failure",True,{}
corosync/corosync,https://github.com/corosync/corosync,295,2017-12-27T10:36:59Z,2018-01-02T14:24:24Z,2018-01-02T14:24:24Z,CLOSED,False,2,2,1,https://github.com/liu4480,qdevice: mv free(str) after port validation,1,[],https://github.com/corosync/corosync/pull/295,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/295#issuecomment-354776623,"in the previous code of qdevice_net_instance_init_from_cmap:
host_port = strtol(str, &ep, 10);
free(str);
if (host_port <= 0 || host_port > ((uint16_t)~0) || *ep != '\0')
before free, *ep is '\0'. But after free, *ep changed to 'U', so mv
free behind the comparison in case of failure","@liu4480 Nice catch, well written patch so ACK and merged as d624ea4 / ff33887 .
Thank you for the patch,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,297,2017-12-28T13:25:58Z,2018-01-04T12:12:52Z,2018-01-05T12:14:54Z,CLOSED,False,73,20,1,https://github.com/Jauler,"libcpg: assemble packets separately for each sender (nodeid, pid) pair",2,[],https://github.com/corosync/corosync/pull/297,https://github.com/Jauler,1,https://github.com/corosync/corosync/pull/297,"Proposed fix for #296.
Packet assembly is done seperately for each nodeid, pid pair, therefore multiple packets are not mixed into single buffer.","Proposed fix for #296.
Packet assembly is done seperately for each nodeid, pid pair, therefore multiple packets are not mixed into single buffer.",True,{}
corosync/corosync,https://github.com/corosync/corosync,297,2017-12-28T13:25:58Z,2018-01-04T12:12:52Z,2018-01-05T12:14:54Z,CLOSED,False,73,20,1,https://github.com/Jauler,"libcpg: assemble packets separately for each sender (nodeid, pid) pair",2,[],https://github.com/corosync/corosync/pull/297,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/297#issuecomment-354779293,"Proposed fix for #296.
Packet assembly is done seperately for each nodeid, pid pair, therefore multiple packets are not mixed into single buffer.",@Jauler Thank you for the nice patch. I must say I like it a lot (so ACK from my side) but I would like to also get review by @chrissie-c who is original author of cpg big packet fragmentation code.,True,{}
corosync/corosync,https://github.com/corosync/corosync,297,2017-12-28T13:25:58Z,2018-01-04T12:12:52Z,2018-01-05T12:14:54Z,CLOSED,False,73,20,1,https://github.com/Jauler,"libcpg: assemble packets separately for each sender (nodeid, pid) pair",2,[],https://github.com/corosync/corosync/pull/297,https://github.com/chrissie-c,3,https://github.com/corosync/corosync/pull/297#issuecomment-355251687,"Proposed fix for #296.
Packet assembly is done seperately for each nodeid, pid pair, therefore multiple packets are not mixed into single buffer.","Looks good to me, thank you. Just a small thing for stylistic consistency, can you change the C++ '//' comments to C ones '/* */' please ?",True,{}
corosync/corosync,https://github.com/corosync/corosync,297,2017-12-28T13:25:58Z,2018-01-04T12:12:52Z,2018-01-05T12:14:54Z,CLOSED,False,73,20,1,https://github.com/Jauler,"libcpg: assemble packets separately for each sender (nodeid, pid) pair",2,[],https://github.com/corosync/corosync/pull/297,https://github.com/Jauler,4,https://github.com/corosync/corosync/pull/297#issuecomment-355265156,"Proposed fix for #296.
Packet assembly is done seperately for each nodeid, pid pair, therefore multiple packets are not mixed into single buffer.",Updated :),True,{}
corosync/corosync,https://github.com/corosync/corosync,297,2017-12-28T13:25:58Z,2018-01-04T12:12:52Z,2018-01-05T12:14:54Z,CLOSED,False,73,20,1,https://github.com/Jauler,"libcpg: assemble packets separately for each sender (nodeid, pid) pair",2,[],https://github.com/corosync/corosync/pull/297,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/297#issuecomment-355267559,"Proposed fix for #296.
Packet assembly is done seperately for each nodeid, pid pair, therefore multiple packets are not mixed into single buffer.","@Jauler Thank you for the update, ACK. I've squashed the patches into one and merged as  c9dd117 . Patch would be nice to have backported also into needle (there is basically only difference between qblist vs corosync internal list in the needle), so it would make me happy if you could do the backport ;) (of course if not, I will take care of it).
Thank you again for the patch, and thank you @chrissie-c for review,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,297,2017-12-28T13:25:58Z,2018-01-04T12:12:52Z,2018-01-05T12:14:54Z,CLOSED,False,73,20,1,https://github.com/Jauler,"libcpg: assemble packets separately for each sender (nodeid, pid) pair",2,[],https://github.com/corosync/corosync/pull/297,https://github.com/Jauler,6,https://github.com/corosync/corosync/pull/297#issuecomment-355268486,"Proposed fix for #296.
Packet assembly is done seperately for each nodeid, pid pair, therefore multiple packets are not mixed into single buffer.",I will be able to do that today or tomorrow :),True,{}
corosync/corosync,https://github.com/corosync/corosync,297,2017-12-28T13:25:58Z,2018-01-04T12:12:52Z,2018-01-05T12:14:54Z,CLOSED,False,73,20,1,https://github.com/Jauler,"libcpg: assemble packets separately for each sender (nodeid, pid) pair",2,[],https://github.com/corosync/corosync/pull/297,https://github.com/jfriesse,7,https://github.com/corosync/corosync/pull/297#issuecomment-355330447,"Proposed fix for #296.
Packet assembly is done seperately for each nodeid, pid pair, therefore multiple packets are not mixed into single buffer.","@Jauler Perfect, thanks a lot",True,{}
corosync/corosync,https://github.com/corosync/corosync,297,2017-12-28T13:25:58Z,2018-01-04T12:12:52Z,2018-01-05T12:14:54Z,CLOSED,False,73,20,1,https://github.com/Jauler,"libcpg: assemble packets separately for each sender (nodeid, pid) pair",2,[],https://github.com/corosync/corosync/pull/297,https://github.com/Jauler,8,https://github.com/corosync/corosync/pull/297#issuecomment-355541584,"Proposed fix for #296.
Packet assembly is done seperately for each nodeid, pid pair, therefore multiple packets are not mixed into single buffer.",Opened #300 :),True,{}
corosync/corosync,https://github.com/corosync/corosync,298,2018-01-05T08:57:51Z,2018-01-15T02:39:33Z,2018-01-15T02:41:13Z,CLOSED,False,89,72,4,https://github.com/liu4480,low:cts:compatible both with python2 and python3,1,[],https://github.com/corosync/corosync/pull/298,https://github.com/liu4480,1,https://github.com/corosync/corosync/pull/298,just fix run-time issue with python3 while compatible,just fix run-time issue with python3 while compatible,True,{}
corosync/corosync,https://github.com/corosync/corosync,298,2018-01-05T08:57:51Z,2018-01-15T02:39:33Z,2018-01-15T02:41:13Z,CLOSED,False,89,72,4,https://github.com/liu4480,low:cts:compatible both with python2 and python3,1,[],https://github.com/corosync/corosync/pull/298,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/298#issuecomment-355566928,just fix run-time issue with python3 while compatible,"@liu4480 I just want to ask, WIP in subject may suggest it's still in Work In Progress. It's true or this is ""final"" patch and you would like to have it merged?",True,{}
corosync/corosync,https://github.com/corosync/corosync,298,2018-01-05T08:57:51Z,2018-01-15T02:39:33Z,2018-01-15T02:41:13Z,CLOSED,False,89,72,4,https://github.com/liu4480,low:cts:compatible both with python2 and python3,1,[],https://github.com/corosync/corosync/pull/298,https://github.com/liu4480,3,https://github.com/corosync/corosync/pull/298#issuecomment-355873863,just fix run-time issue with python3 while compatible,"@jfriesse it is still in process, there are still some errors need to be fixed",True,{}
corosync/corosync,https://github.com/corosync/corosync,298,2018-01-05T08:57:51Z,2018-01-15T02:39:33Z,2018-01-15T02:41:13Z,CLOSED,False,89,72,4,https://github.com/liu4480,low:cts:compatible both with python2 and python3,1,[],https://github.com/corosync/corosync/pull/298,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/298#issuecomment-355915209,just fix run-time issue with python3 while compatible,"@liu4480 ok, thanks for confirmation. So far changes looks good.",True,{}
corosync/corosync,https://github.com/corosync/corosync,298,2018-01-05T08:57:51Z,2018-01-15T02:39:33Z,2018-01-15T02:41:13Z,CLOSED,False,89,72,4,https://github.com/liu4480,low:cts:compatible both with python2 and python3,1,[],https://github.com/corosync/corosync/pull/298,https://github.com/liu4480,5,https://github.com/corosync/corosync/pull/298#issuecomment-356185492,just fix run-time issue with python3 while compatible,"@jfriesse I 've fixed the run-time errors, I think you can merge this patch",True,{}
corosync/corosync,https://github.com/corosync/corosync,298,2018-01-05T08:57:51Z,2018-01-15T02:39:33Z,2018-01-15T02:41:13Z,CLOSED,False,89,72,4,https://github.com/liu4480,low:cts:compatible both with python2 and python3,1,[],https://github.com/corosync/corosync/pull/298,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/298#issuecomment-356940655,just fix run-time issue with python3 while compatible,"@liu4480 Generally good patch, but I've just noticed this is for needle. I would definitively like to see it ported first to master and it's quite a question if we want to have it in needle. I mean, do you have use case for it? AFAIK current distributions are still dual Python and when Python 2 is going to be excluded from distributions we will probably have corosync 3.x out for quite a long time ;)",True,{}
corosync/corosync,https://github.com/corosync/corosync,298,2018-01-05T08:57:51Z,2018-01-15T02:39:33Z,2018-01-15T02:41:13Z,CLOSED,False,89,72,4,https://github.com/liu4480,low:cts:compatible both with python2 and python3,1,[],https://github.com/corosync/corosync/pull/298,https://github.com/liu4480,7,https://github.com/corosync/corosync/pull/298#issuecomment-357131711,just fix run-time issue with python3 while compatible,"@jfriesse At first, I want to push this commit to master, but as master has chaged greatly, while cts does not change, I concern whether the test cases need to change. If there is not big change, I can push this to master:)
And for needle(2.4.3), it is so far in fedora27 and openSUSE Tumbleweed, although both the two distributions has python2 now, they also support python3. At the same time, python2 is deprecated on openSUSE Tumbleweed, not sure whether it is the same on Fedora.",True,{}
corosync/corosync,https://github.com/corosync/corosync,298,2018-01-05T08:57:51Z,2018-01-15T02:39:33Z,2018-01-15T02:41:13Z,CLOSED,False,89,72,4,https://github.com/liu4480,low:cts:compatible both with python2 and python3,1,[],https://github.com/corosync/corosync/pull/298,https://github.com/jfriesse,8,https://github.com/corosync/corosync/pull/298#issuecomment-357182998,just fix run-time issue with python3 while compatible,"@liu4480 CTS tests are quite generic so most of them should work for master. If some doesn't it should be fixed in different patch/PR.
So please base your patchset on top of master.
Python2 is for sure becoming deprecated slowly, but as long as it's still in distributions I don't see big push to change needle. Specially because Camelback (3.x) is coming soon (simply because Knet 1.0 is now out, so I should really start releasing alphas sooner than later) and this is what I'm expect to become default in future versions of distributions.",True,{}
corosync/corosync,https://github.com/corosync/corosync,298,2018-01-05T08:57:51Z,2018-01-15T02:39:33Z,2018-01-15T02:41:13Z,CLOSED,False,89,72,4,https://github.com/liu4480,low:cts:compatible both with python2 and python3,1,[],https://github.com/corosync/corosync/pull/298,https://github.com/liu4480,9,https://github.com/corosync/corosync/pull/298#issuecomment-357568891,just fix run-time issue with python3 while compatible,"the new PR is opened at #305
so close this pull request",True,{}
corosync/corosync,https://github.com/corosync/corosync,299,2018-01-05T10:17:24Z,2018-01-05T14:25:57Z,2018-01-05T14:25:57Z,CLOSED,False,34,4,4,https://github.com/chrissie-c,config: Allow selection of crypto_model,1,[],https://github.com/corosync/corosync/pull/299,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/299,"KNET has options for nss or openssl crpyto libraries, make this
available to corosync.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","KNET has options for nss or openssl crpyto libraries, make this
available to corosync.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,299,2018-01-05T10:17:24Z,2018-01-05T14:25:57Z,2018-01-05T14:25:57Z,CLOSED,False,34,4,4,https://github.com/chrissie-c,config: Allow selection of crypto_model,1,[],https://github.com/corosync/corosync/pull/299,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/299#issuecomment-355566652,"KNET has options for nss or openssl crpyto libraries, make this
available to corosync.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","@chrissie-c Nice patch as usual so ACK and merged as 98bb0c7
Thank you for the patch,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,300,2018-01-05T12:14:24Z,2018-01-05T14:24:22Z,2018-01-07T17:28:58Z,CLOSED,False,76,20,1,https://github.com/Jauler,backport to needle: libcpg: Fix issue with partial big packet assembly,1,[],https://github.com/corosync/corosync/pull/300,https://github.com/Jauler,1,https://github.com/corosync/corosync/pull/300,Backport libcpg partial packet assembly patch to needle.,Backport libcpg partial packet assembly patch to needle.,True,{}
corosync/corosync,https://github.com/corosync/corosync,300,2018-01-05T12:14:24Z,2018-01-05T14:24:22Z,2018-01-07T17:28:58Z,CLOSED,False,76,20,1,https://github.com/Jauler,backport to needle: libcpg: Fix issue with partial big packet assembly,1,[],https://github.com/corosync/corosync/pull/300,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/300#issuecomment-355566293,Backport libcpg partial packet assembly patch to needle.,"@Jauler Thank you very much for the backport, nice work, ACK and merged as 86579ff.
Regards,
Honza",True,{'HOORAY': ['https://github.com/Jauler']}
corosync/corosync,https://github.com/corosync/corosync,300,2018-01-05T12:14:24Z,2018-01-05T14:24:22Z,2018-01-07T17:28:58Z,CLOSED,False,76,20,1,https://github.com/Jauler,backport to needle: libcpg: Fix issue with partial big packet assembly,1,[],https://github.com/corosync/corosync/pull/300,https://github.com/Jauler,3,https://github.com/corosync/corosync/pull/300#issuecomment-355838133,Backport libcpg partial packet assembly patch to needle.,"Just referencing original Pull Request in this thread for better log :).
#297",True,{}
corosync/corosync,https://github.com/corosync/corosync,301,2018-01-05T15:44:37Z,2018-01-09T16:47:19Z,2018-03-02T16:49:04Z,CLOSED,False,118,32,5,https://github.com/jfriesse,Iov recv fixes master,5,[],https://github.com/corosync/corosync/pull/301,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/301,"Patch from topic-scale, port to totemudp and port of part of the patch to the totemknet.
Unrelated patch is making auto-generated mcast address work again.","Patch from topic-scale, port to totemudp and port of part of the patch to the totemknet.
Unrelated patch is making auto-generated mcast address work again.",True,{}
corosync/corosync,https://github.com/corosync/corosync,301,2018-01-05T15:44:37Z,2018-01-09T16:47:19Z,2018-03-02T16:49:04Z,CLOSED,False,118,32,5,https://github.com/jfriesse,Iov recv fixes master,5,[],https://github.com/corosync/corosync/pull/301,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/301#issuecomment-356342716,"Patch from topic-scale, port to totemudp and port of part of the patch to the totemknet.
Unrelated patch is making auto-generated mcast address work again.","@chrissie-c Thank you for the review, merged as 96cb977",True,{}
corosync/corosync,https://github.com/corosync/corosync,302,2018-01-05T15:44:55Z,2018-01-09T16:49:10Z,2018-03-02T16:49:13Z,CLOSED,False,52,0,2,https://github.com/jfriesse,totemudp[u]: Drop truncated packets on receive,1,[],https://github.com/corosync/corosync/pull/302,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/302,"This is backport of part of ""totemudpu: Scale receive buffer"" patch in
master branch.
We shouldn't not need to enlarge buffer because maximum number of nodes
for needle is 2 so join message is smaller.
Signed-off-by: Jan Friesse jfriesse@redhat.com","This is backport of part of ""totemudpu: Scale receive buffer"" patch in
master branch.
We shouldn't not need to enlarge buffer because maximum number of nodes
for needle is 2 so join message is smaller.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,302,2018-01-05T15:44:55Z,2018-01-09T16:49:10Z,2018-03-02T16:49:13Z,CLOSED,False,52,0,2,https://github.com/jfriesse,totemudp[u]: Drop truncated packets on receive,1,[],https://github.com/corosync/corosync/pull/302,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/302#issuecomment-356343291,"This is backport of part of ""totemudpu: Scale receive buffer"" patch in
master branch.
We shouldn't not need to enlarge buffer because maximum number of nodes
for needle is 2 so join message is smaller.
Signed-off-by: Jan Friesse jfriesse@redhat.com","@chrissie-c Thank you for the review, merged as 89d36a8",True,{}
corosync/corosync,https://github.com/corosync/corosync,303,2018-01-08T11:13:54Z,2018-01-09T16:51:47Z,2018-01-12T08:44:42Z,CLOSED,False,7,0,1,https://github.com/chrissie-c,"config: if local node addr is wrong, fail with a sensible message",1,[],https://github.com/corosync/corosync/pull/303,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/303,"If no valid local address is found in corosync.conf then corosync
exits with: ""parse error in config: No multicast port specified""
This is because of the config change for knet that always populates
the interfaces. The old error of ""no interfaces found"" was only
slightly better anyway IMHO.
This patch adds an explicit check that local_node_pos has been
set in icmap and uses that to determine if a valid local address
has been found.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","If no valid local address is found in corosync.conf then corosync
exits with: ""parse error in config: No multicast port specified""
This is because of the config change for knet that always populates
the interfaces. The old error of ""no interfaces found"" was only
slightly better anyway IMHO.
This patch adds an explicit check that local_node_pos has been
set in icmap and uses that to determine if a valid local address
has been found.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,303,2018-01-08T11:13:54Z,2018-01-09T16:51:47Z,2018-01-12T08:44:42Z,CLOSED,False,7,0,1,https://github.com/chrissie-c,"config: if local node addr is wrong, fail with a sensible message",1,[],https://github.com/corosync/corosync/pull/303,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/303#issuecomment-356344139,"If no valid local address is found in corosync.conf then corosync
exits with: ""parse error in config: No multicast port specified""
This is because of the config change for knet that always populates
the interfaces. The old error of ""no interfaces found"" was only
slightly better anyway IMHO.
This patch adds an explicit check that local_node_pos has been
set in icmap and uses that to determine if a valid local address
has been found.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","@chrissie-c Nice patch, ACK and merged as 236032f
Thank you for the patch,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,303,2018-01-08T11:13:54Z,2018-01-09T16:51:47Z,2018-01-12T08:44:42Z,CLOSED,False,7,0,1,https://github.com/chrissie-c,"config: if local node addr is wrong, fail with a sensible message",1,[],https://github.com/corosync/corosync/pull/303,https://github.com/liu4480,3,https://github.com/corosync/corosync/pull/303#issuecomment-356480600,"If no valid local address is found in corosync.conf then corosync
exits with: ""parse error in config: No multicast port specified""
This is because of the config change for knet that always populates
the interfaces. The old error of ""no interfaces found"" was only
slightly better anyway IMHO.
This patch adds an explicit check that local_node_pos has been
set in icmap and uses that to determine if a valid local address
has been found.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",@jfriesse shouldn't this commit also be merged into needle?,True,{}
corosync/corosync,https://github.com/corosync/corosync,303,2018-01-08T11:13:54Z,2018-01-09T16:51:47Z,2018-01-12T08:44:42Z,CLOSED,False,7,0,1,https://github.com/chrissie-c,"config: if local node addr is wrong, fail with a sensible message",1,[],https://github.com/corosync/corosync/pull/303,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/303#issuecomment-356539792,"If no valid local address is found in corosync.conf then corosync
exits with: ""parse error in config: No multicast port specified""
This is because of the config change for knet that always populates
the interfaces. The old error of ""no interfaces found"" was only
slightly better anyway IMHO.
This patch adds an explicit check that local_node_pos has been
set in icmap and uses that to determine if a valid local address
has been found.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","@liu4480 Nope, because this patch enforces existence of nodelist (what is ok for master). Needle can (formally) work without nodelist.",True,{}
corosync/corosync,https://github.com/corosync/corosync,303,2018-01-08T11:13:54Z,2018-01-09T16:51:47Z,2018-01-12T08:44:42Z,CLOSED,False,7,0,1,https://github.com/chrissie-c,"config: if local node addr is wrong, fail with a sensible message",1,[],https://github.com/corosync/corosync/pull/303,https://github.com/liu4480,5,https://github.com/corosync/corosync/pull/303#issuecomment-356546397,"If no valid local address is found in corosync.conf then corosync
exits with: ""parse error in config: No multicast port specified""
This is because of the config change for knet that always populates
the interfaces. The old error of ""no interfaces found"" was only
slightly better anyway IMHO.
This patch adds an explicit check that local_node_pos has been
set in icmap and uses that to determine if a valid local address
has been found.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","For needle, how about checking both ""totem.transport"" and ""nodelist.local_node_pos"", this warning message will make sense if someone writes a wrong configuration file that does not include local node with udpu.",True,{}
corosync/corosync,https://github.com/corosync/corosync,303,2018-01-08T11:13:54Z,2018-01-09T16:51:47Z,2018-01-12T08:44:42Z,CLOSED,False,7,0,1,https://github.com/chrissie-c,"config: if local node addr is wrong, fail with a sensible message",1,[],https://github.com/corosync/corosync/pull/303,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/303#issuecomment-356557498,"If no valid local address is found in corosync.conf then corosync
exits with: ""parse error in config: No multicast port specified""
This is because of the config change for knet that always populates
the interfaces. The old error of ""no interfaces found"" was only
slightly better anyway IMHO.
This patch adds an explicit check that local_node_pos has been
set in icmap and uses that to determine if a valid local address
has been found.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","@liu4480 It's possible to do and I can agree it may be helpful. Still keep in mind needle keeps compatibility with totem.interface.%u.member. list (what is old version of nodelist). So such patch would need to check:

Nodelist (or member list) exists or not
Transport is set to udpu/udp/totemiba",True,{}
corosync/corosync,https://github.com/corosync/corosync,303,2018-01-08T11:13:54Z,2018-01-09T16:51:47Z,2018-01-12T08:44:42Z,CLOSED,False,7,0,1,https://github.com/chrissie-c,"config: if local node addr is wrong, fail with a sensible message",1,[],https://github.com/corosync/corosync/pull/303,https://github.com/chrissie-c,7,https://github.com/corosync/corosync/pull/303#issuecomment-357177412,"If no valid local address is found in corosync.conf then corosync
exits with: ""parse error in config: No multicast port specified""
This is because of the config change for knet that always populates
the interfaces. The old error of ""no interfaces found"" was only
slightly better anyway IMHO.
This patch adds an explicit check that local_node_pos has been
set in icmap and uses that to determine if a valid local address
has been found.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",The message in Needle is at least slightly on-topic. In master it was just confusing!,True,{}
corosync/corosync,https://github.com/corosync/corosync,304,2018-01-11T08:48:24Z,2018-01-11T13:49:07Z,2018-01-11T13:49:07Z,CLOSED,False,3,2,3,https://github.com/yuusuke,Organize the header necessary for RPM build,1,[],https://github.com/corosync/corosync/pull/304,https://github.com/yuusuke,1,https://github.com/corosync/corosync/pull/304,"""make rpm"" will fail, so please merge the following fixes
# make rpm
(snip)
cmap.c:59:24: fatal error: ipcs_stats.h: No such file or directory
 #include ""ipcs_stats.h""
                        ^
compilation terminated.
  CC       corosync-cpg.o
  CC       corosync-pload.o
make[3]: *** [corosync-cmap.o] Error 1
make[3]: *** Waiting for unfinished jobs....
make[3]: Leaving directory `/usr/local/src/repo/corosync/corosync-2.4.1.176-23603/exec'
make[2]: *** [all-recursive] Error 1
make[2]: Leaving directory `/usr/local/src/repo/corosync/corosync-2.4.1.176-23603'
make[1]: *** [all] Error 2
make[1]: Leaving directory `/usr/local/src/repo/corosync/corosync-2.4.1.176-23603'
error: Bad exit status from /var/tmp/rpm-tmp.pQ112k (%build)


RPM build errors:
    Bad exit status from /var/tmp/rpm-tmp.pQ112k (%build)
make: *** [rpm] Error 1","""make rpm"" will fail, so please merge the following fixes
# make rpm
(snip)
cmap.c:59:24: fatal error: ipcs_stats.h: No such file or directory
 #include ""ipcs_stats.h""
                        ^
compilation terminated.
  CC       corosync-cpg.o
  CC       corosync-pload.o
make[3]: *** [corosync-cmap.o] Error 1
make[3]: *** Waiting for unfinished jobs....
make[3]: Leaving directory `/usr/local/src/repo/corosync/corosync-2.4.1.176-23603/exec'
make[2]: *** [all-recursive] Error 1
make[2]: Leaving directory `/usr/local/src/repo/corosync/corosync-2.4.1.176-23603'
make[1]: *** [all] Error 2
make[1]: Leaving directory `/usr/local/src/repo/corosync/corosync-2.4.1.176-23603'
error: Bad exit status from /var/tmp/rpm-tmp.pQ112k (%build)


RPM build errors:
    Bad exit status from /var/tmp/rpm-tmp.pQ112k (%build)
make: *** [rpm] Error 1",True,{}
corosync/corosync,https://github.com/corosync/corosync,304,2018-01-11T08:48:24Z,2018-01-11T13:49:07Z,2018-01-11T13:49:07Z,CLOSED,False,3,2,3,https://github.com/yuusuke,Organize the header necessary for RPM build,1,[],https://github.com/corosync/corosync/pull/304,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/304#issuecomment-356938918,"""make rpm"" will fail, so please merge the following fixes
# make rpm
(snip)
cmap.c:59:24: fatal error: ipcs_stats.h: No such file or directory
 #include ""ipcs_stats.h""
                        ^
compilation terminated.
  CC       corosync-cpg.o
  CC       corosync-pload.o
make[3]: *** [corosync-cmap.o] Error 1
make[3]: *** Waiting for unfinished jobs....
make[3]: Leaving directory `/usr/local/src/repo/corosync/corosync-2.4.1.176-23603/exec'
make[2]: *** [all-recursive] Error 1
make[2]: Leaving directory `/usr/local/src/repo/corosync/corosync-2.4.1.176-23603'
make[1]: *** [all] Error 2
make[1]: Leaving directory `/usr/local/src/repo/corosync/corosync-2.4.1.176-23603'
error: Bad exit status from /var/tmp/rpm-tmp.pQ112k (%build)


RPM build errors:
    Bad exit status from /var/tmp/rpm-tmp.pQ112k (%build)
make: *** [rpm] Error 1","@yuusuke Good catch and nice patch so ACK and merged as e7734fa
Thank you for the patch,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,305,2018-01-15T02:38:16Z,2018-01-15T14:05:01Z,2018-01-17T05:30:29Z,CLOSED,False,89,72,4,https://github.com/liu4480,low:cts:compatible both with python2 and python3,1,[],https://github.com/corosync/corosync/pull/305,https://github.com/liu4480,1,https://github.com/corosync/corosync/pull/305,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,305,2018-01-15T02:38:16Z,2018-01-15T14:05:01Z,2018-01-17T05:30:29Z,CLOSED,False,89,72,4,https://github.com/liu4480,low:cts:compatible both with python2 and python3,1,[],https://github.com/corosync/corosync/pull/305,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/305#issuecomment-357691659,,"@liu4480 Nice work, good patch, ACK and merged as dd7fc42
Thank you for the patch,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,306,2018-01-15T10:39:56Z,2018-01-15T14:08:54Z,2018-01-15T14:08:54Z,CLOSED,False,61,45,3,https://github.com/chrissie-c,config: Calculate knet ping timers from token,2,[],https://github.com/corosync/corosync/pull/306,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/306,"the defaults for the knet ping timers now depend on the token timeout rather than being static. This should help short token timeouts to behave as expected and larger clusters (which usually have longer timeouts) not flooding the network with pings.
This patch also fixes some knet config bugs that resulted in defaults
not being applied when values were removed from corosync.conf.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","the defaults for the knet ping timers now depend on the token timeout rather than being static. This should help short token timeouts to behave as expected and larger clusters (which usually have longer timeouts) not flooding the network with pings.
This patch also fixes some knet config bugs that resulted in defaults
not being applied when values were removed from corosync.conf.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,306,2018-01-15T10:39:56Z,2018-01-15T14:08:54Z,2018-01-15T14:08:54Z,CLOSED,False,61,45,3,https://github.com/chrissie-c,config: Calculate knet ping timers from token,2,[],https://github.com/corosync/corosync/pull/306,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/306#issuecomment-357692610,"the defaults for the knet ping timers now depend on the token timeout rather than being static. This should help short token timeouts to behave as expected and larger clusters (which usually have longer timeouts) not flooding the network with pings.
This patch also fixes some knet config bugs that resulted in defaults
not being applied when values were removed from corosync.conf.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","@chrissie-c Nice patch as usually, so ACK, squashed and merged as 22ae4ca
Thank you for the patch,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,307,2018-01-16T11:42:12Z,2018-01-18T15:32:57Z,2018-01-18T15:32:57Z,CLOSED,False,4,4,2,https://github.com/chrissie-c,config: Don't fudge port numbers,1,[],https://github.com/corosync/corosync/pull/307,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/307,"When I was adding knet I wanted the port numbers to default to the
base port number + the linknumber.
However I seem to have messed this up such that any port number
specified in the config file has the link number added to it. Which
is almost certainly not what people would expect.
This patch sets it right. If a port number is not specified
then 5405+linknumber is used. If a port number IS specified
then that actual number is used.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","When I was adding knet I wanted the port numbers to default to the
base port number + the linknumber.
However I seem to have messed this up such that any port number
specified in the config file has the link number added to it. Which
is almost certainly not what people would expect.
This patch sets it right. If a port number is not specified
then 5405+linknumber is used. If a port number IS specified
then that actual number is used.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,307,2018-01-16T11:42:12Z,2018-01-18T15:32:57Z,2018-01-18T15:32:57Z,CLOSED,False,4,4,2,https://github.com/chrissie-c,config: Don't fudge port numbers,1,[],https://github.com/corosync/corosync/pull/307,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/307#issuecomment-358682808,"When I was adding knet I wanted the port numbers to default to the
base port number + the linknumber.
However I seem to have messed this up such that any port number
specified in the config file has the link number added to it. Which
is almost certainly not what people would expect.
This patch sets it right. If a port number is not specified
then 5405+linknumber is used. If a port number IS specified
then that actual number is used.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","Nice patch, ACK and merged as 31ddba6
Thank you for the patch,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,308,2018-01-22T10:22:34Z,2018-01-30T12:24:12Z,2018-03-02T16:35:10Z,CLOSED,False,109,11,5,https://github.com/jfriesse,Blackbox disable,2,[],https://github.com/corosync/corosync/pull/308,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/308,"First patch is for sure something we would like to have (at least in my opinion :) )
Second patch is more like a speculative and  I believe the problem should be solved by libqb (not overwriting existing file/unlink after mmap) and not workarounded by corosync.
Both patches are applicable to both master and needle.","First patch is for sure something we would like to have (at least in my opinion :) )
Second patch is more like a speculative and  I believe the problem should be solved by libqb (not overwriting existing file/unlink after mmap) and not workarounded by corosync.
Both patches are applicable to both master and needle.",True,{}
corosync/corosync,https://github.com/corosync/corosync,308,2018-01-22T10:22:34Z,2018-01-30T12:24:12Z,2018-03-02T16:35:10Z,CLOSED,False,109,11,5,https://github.com/jfriesse,Blackbox disable,2,[],https://github.com/corosync/corosync/pull/308,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/308#issuecomment-361577782,"First patch is for sure something we would like to have (at least in my opinion :) )
Second patch is more like a speculative and  I believe the problem should be solved by libqb (not overwriting existing file/unlink after mmap) and not workarounded by corosync.
Both patches are applicable to both master and needle.",Merged as 79dba9c..11fa527 and needle 8af39f6..995ed0b.,True,{}
corosync/corosync,https://github.com/corosync/corosync,309,2018-01-22T14:29:21Z,2018-01-30T13:09:07Z,2018-01-30T13:51:45Z,CLOSED,False,66,2,1,https://github.com/jnpkrn,"prevent rare crash when two processes ""share"" blackbox file",1,[],https://github.com/corosync/corosync/pull/309,https://github.com/jnpkrn,1,https://github.com/corosync/corosync/pull/309,"Take it as a preview, I could not compile the master readily, need to
look at that more.","Take it as a preview, I could not compile the master readily, need to
look at that more.",True,{}
corosync/corosync,https://github.com/corosync/corosync,309,2018-01-22T14:29:21Z,2018-01-30T13:09:07Z,2018-01-30T13:51:45Z,CLOSED,False,66,2,1,https://github.com/jnpkrn,"prevent rare crash when two processes ""share"" blackbox file",1,[],https://github.com/corosync/corosync/pull/309,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/309#issuecomment-359450147,"Take it as a preview, I could not compile the master readily, need to
look at that more.","Ugh. So ... I would like to ask also chrissie to review that, but from my side it's nack. Super hard code (compared to PR #308) with probable bonus of getting few more startup lines in blackbox.  Startup lines are actually not even very interesting",True,{}
corosync/corosync,https://github.com/corosync/corosync,309,2018-01-22T14:29:21Z,2018-01-30T13:09:07Z,2018-01-30T13:51:45Z,CLOSED,False,66,2,1,https://github.com/jnpkrn,"prevent rare crash when two processes ""share"" blackbox file",1,[],https://github.com/corosync/corosync/pull/309,https://github.com/chrissie-c,3,https://github.com/corosync/corosync/pull/309#issuecomment-359455340,"Take it as a preview, I could not compile the master readily, need to
look at that more.","I agree with Honza, it's a lot of code to protect something we actually don't care about.",True,{}
corosync/corosync,https://github.com/corosync/corosync,309,2018-01-22T14:29:21Z,2018-01-30T13:09:07Z,2018-01-30T13:51:45Z,CLOSED,False,66,2,1,https://github.com/jnpkrn,"prevent rare crash when two processes ""share"" blackbox file",1,[],https://github.com/corosync/corosync/pull/309,https://github.com/jnpkrn,4,https://github.com/corosync/corosync/pull/309#issuecomment-359463077,"Take it as a preview, I could not compile the master readily, need to
look at that more.","You call standard safe signal-based synchronization hard?  Really?
Sure, unsafe is always an option in high availability.",True,{}
corosync/corosync,https://github.com/corosync/corosync,309,2018-01-22T14:29:21Z,2018-01-30T13:09:07Z,2018-01-30T13:51:45Z,CLOSED,False,66,2,1,https://github.com/jnpkrn,"prevent rare crash when two processes ""share"" blackbox file",1,[],https://github.com/corosync/corosync/pull/309,https://github.com/jnpkrn,5,https://github.com/corosync/corosync/pull/309#issuecomment-359463717,"Take it as a preview, I could not compile the master readily, need to
look at that more.","+ I was super verbose about the error condtions, can be cut as well, if you prefer.",True,{}
corosync/corosync,https://github.com/corosync/corosync,309,2018-01-22T14:29:21Z,2018-01-30T13:09:07Z,2018-01-30T13:51:45Z,CLOSED,False,66,2,1,https://github.com/jnpkrn,"prevent rare crash when two processes ""share"" blackbox file",1,[],https://github.com/corosync/corosync/pull/309,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/309#issuecomment-359476243,"Take it as a preview, I could not compile the master readily, need to
look at that more.","@jnpkrn I believe you didn't fully understood what I've tried to say you. So let me retry it again (ignoring first part of the comment #309 (comment) because this is just pure trolling).
Patch itself is about adding synchronization between parent/child.  What I'm trying to explain you is, that this is not needed and it's a lot of the code for getting log messages which are not needed.
But the case you are trying to solve Because  there's a danger that now-released main PID will get picked by new corosync process (e.g. just with -v switch) and the blackbox simply cannot happen because the logging is not called between corosync_tty_detach and re-enabling the blackbox (with new pid).",True,{}
corosync/corosync,https://github.com/corosync/corosync,309,2018-01-22T14:29:21Z,2018-01-30T13:09:07Z,2018-01-30T13:51:45Z,CLOSED,False,66,2,1,https://github.com/jnpkrn,"prevent rare crash when two processes ""share"" blackbox file",1,[],https://github.com/corosync/corosync/pull/309,https://github.com/jnpkrn,7,https://github.com/corosync/corosync/pull/309#issuecomment-359500317,"Take it as a preview, I could not compile the master readily, need to
look at that more.","How you come to the conclusion:

I am trolling (that's a nasty assumption to start with, especially since it's
not true, being sarcastic about so shortcut denial comments without
technical merit is whole a lot of different story)
the messages in question are not needed
(apparently they were at some point, otherwise blackbox would not
be enabled this early)
I am talking about messages between cosorync_tty_detach and re-enabling
the blackbox
?

I am not a corosync maintainer, so I am not to decide, though I will be happy to
adapt the proposed patch to fit the needs.  Apparently my aim is to have a good
technical solution without avoidable trade-offs.  If not taken, fine.
I am going to add fitting libqb counterpart, so at least some clients can leverage
this scheme.",True,{}
corosync/corosync,https://github.com/corosync/corosync,309,2018-01-22T14:29:21Z,2018-01-30T13:09:07Z,2018-01-30T13:51:45Z,CLOSED,False,66,2,1,https://github.com/jnpkrn,"prevent rare crash when two processes ""share"" blackbox file",1,[],https://github.com/corosync/corosync/pull/309,https://github.com/jfriesse,8,https://github.com/corosync/corosync/pull/309#issuecomment-359728062,"Take it as a preview, I could not compile the master readily, need to
look at that more.","@jnpkrn

Experience. Good if you were not.
Blackbox is to some extend useful for short live messages which are not logged into other places (stderr/syslog/logfile). Such messages are not created during startup.
So what have you been talking about?

Please start with fixing libqb, then we can discuss how to fix Corosync.",True,{}
corosync/corosync,https://github.com/corosync/corosync,309,2018-01-22T14:29:21Z,2018-01-30T13:09:07Z,2018-01-30T13:51:45Z,CLOSED,False,66,2,1,https://github.com/jnpkrn,"prevent rare crash when two processes ""share"" blackbox file",1,[],https://github.com/corosync/corosync/pull/309,https://github.com/jnpkrn,9,https://github.com/corosync/corosync/pull/309#issuecomment-360936432,"Take it as a preview, I could not compile the master readily, need to
look at that more.","Sure, here is the preliminary version (incl. test!):
ClusterLabs/libqb#293
That's the change this proposed patch counts with already.",True,{}
corosync/corosync,https://github.com/corosync/corosync,309,2018-01-22T14:29:21Z,2018-01-30T13:09:07Z,2018-01-30T13:51:45Z,CLOSED,False,66,2,1,https://github.com/jnpkrn,"prevent rare crash when two processes ""share"" blackbox file",1,[],https://github.com/corosync/corosync/pull/309,https://github.com/jfriesse,10,https://github.com/corosync/corosync/pull/309#issuecomment-361588299,"Take it as a preview, I could not compile the master readily, need to
look at that more.","I've decided to push #308 in favor of this PR simply because #308 is simpler, not dependent on LibQB change and also brings possibility to turn off blackbox completely.
Thank you for the patch and HUGE kudos for finding the main reason of SIGBUS,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,309,2018-01-22T14:29:21Z,2018-01-30T13:09:07Z,2018-01-30T13:51:45Z,CLOSED,False,66,2,1,https://github.com/jnpkrn,"prevent rare crash when two processes ""share"" blackbox file",1,[],https://github.com/corosync/corosync/pull/309,https://github.com/jnpkrn,11,https://github.com/corosync/corosync/pull/309#issuecomment-361598992,"Take it as a preview, I could not compile the master readily, need to
look at that more.",Really sad to see technical continuity ditched for proclaimed simplicity.,True,{}
corosync/corosync,https://github.com/corosync/corosync,310,2018-01-23T04:26:05Z,2018-01-26T15:04:20Z,2018-01-27T03:06:26Z,CLOSED,False,25,4,1,https://github.com/at1984z,corosync-notifyd: improve error handling in _cs_cmap_members_key_changed(),1,[],https://github.com/corosync/corosync/pull/310,https://github.com/at1984z,1,https://github.com/corosync/corosync/pull/310,"This pull request suggests changes in functions _cs_ip_to_hostname() and _cs_cmap_members_key_changed() in file tools/corosync-notifyd.c in order to address error conditions that were encountered while working in a kubernetes environment with unicast transport.
The actual corosync version was 2.4.2-3 from Debian stretch distribution.","This pull request suggests changes in functions _cs_ip_to_hostname() and _cs_cmap_members_key_changed() in file tools/corosync-notifyd.c in order to address error conditions that were encountered while working in a kubernetes environment with unicast transport.
The actual corosync version was 2.4.2-3 from Debian stretch distribution.",True,{}
corosync/corosync,https://github.com/corosync/corosync,310,2018-01-23T04:26:05Z,2018-01-26T15:04:20Z,2018-01-27T03:06:26Z,CLOSED,False,25,4,1,https://github.com/at1984z,corosync-notifyd: improve error handling in _cs_cmap_members_key_changed(),1,[],https://github.com/corosync/corosync/pull/310,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/310#issuecomment-360808378,"This pull request suggests changes in functions _cs_ip_to_hostname() and _cs_cmap_members_key_changed() in file tools/corosync-notifyd.c in order to address error conditions that were encountered while working in a kubernetes environment with unicast transport.
The actual corosync version was 2.4.2-3 from Debian stretch distribution.","@at1984z Nice catches, good patch, so ACK and merged as df9d7d6
Could you please consider to backport changes also to the needle branch and open new PR with that changes?
Thank you for the patch,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,311,2018-01-24T16:35:15Z,2018-01-25T15:27:32Z,2018-01-25T15:27:37Z,CLOSED,False,16,35733,197,https://github.com/jfriesse,Qdevice removal,5,[],https://github.com/corosync/corosync/pull/311,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/311,"$SUBJECT is main patch in the series. Others are leftovers found by doing test release.
This PR is prerequisite for releasing alpha of future corosync 3.x (Camelback)","$SUBJECT is main patch in the series. Others are leftovers found by doing test release.
This PR is prerequisite for releasing alpha of future corosync 3.x (Camelback)",True,{}
corosync/corosync,https://github.com/corosync/corosync,311,2018-01-24T16:35:15Z,2018-01-25T15:27:32Z,2018-01-25T15:27:37Z,CLOSED,False,16,35733,197,https://github.com/jfriesse,Qdevice removal,5,[],https://github.com/corosync/corosync/pull/311,https://github.com/chrissie-c,2,https://github.com/corosync/corosync/pull/311#issuecomment-360418954,"$SUBJECT is main patch in the series. Others are leftovers found by doing test release.
This PR is prerequisite for releasing alpha of future corosync 3.x (Camelback)",ACK,True,{}
corosync/corosync,https://github.com/corosync/corosync,311,2018-01-24T16:35:15Z,2018-01-25T15:27:32Z,2018-01-25T15:27:37Z,CLOSED,False,16,35733,197,https://github.com/jfriesse,Qdevice removal,5,[],https://github.com/corosync/corosync/pull/311,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/311#issuecomment-360500136,"$SUBJECT is main patch in the series. Others are leftovers found by doing test release.
This PR is prerequisite for releasing alpha of future corosync 3.x (Camelback)",@chrissie-c Thanks for the review. I've merged the patches as eec4d71 ..e35a419,True,{}
corosync/corosync,https://github.com/corosync/corosync,314,2018-02-01T03:30:07Z,2018-02-01T14:30:44Z,2018-02-01T14:30:44Z,CLOSED,False,25,4,1,https://github.com/at1984z,corosync-notifyd: improve error handling in _cs_cmap_members_key_changed().,1,[],https://github.com/corosync/corosync/pull/314,https://github.com/at1984z,1,https://github.com/corosync/corosync/pull/314,This is a backport of PR #310 to base branch needle.,This is a backport of PR #310 to base branch needle.,True,{}
corosync/corosync,https://github.com/corosync/corosync,314,2018-02-01T03:30:07Z,2018-02-01T14:30:44Z,2018-02-01T14:30:44Z,CLOSED,False,25,4,1,https://github.com/at1984z,corosync-notifyd: improve error handling in _cs_cmap_members_key_changed().,1,[],https://github.com/corosync/corosync/pull/314,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/314#issuecomment-362282570,This is a backport of PR #310 to base branch needle.,"@at1984z Thank you a lot for the backport of patch, ACK and merged as c838622
Regards,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,315,2018-02-01T03:34:54Z,2018-03-16T10:25:55Z,2018-03-19T03:36:52Z,CLOSED,False,1,0,1,https://github.com/liu4480,"fix issue in ""corosync-cfgtool -s"" for multiple link with knet",1,[],https://github.com/corosync/corosync/pull/315,https://github.com/liu4480,1,https://github.com/corosync/corosync/pull/315,"In the previous commit 0b5ab1,  the patch did not
reset s to 0 for each link. This will result in only the first link can
be printed.","In the previous commit 0b5ab1,  the patch did not
reset s to 0 for each link. This will result in only the first link can
be printed.",True,{}
corosync/corosync,https://github.com/corosync/corosync,315,2018-02-01T03:34:54Z,2018-03-16T10:25:55Z,2018-03-19T03:36:52Z,CLOSED,False,1,0,1,https://github.com/liu4480,"fix issue in ""corosync-cfgtool -s"" for multiple link with knet",1,[],https://github.com/corosync/corosync/pull/315,https://github.com/chrissie-c,2,https://github.com/corosync/corosync/pull/315#issuecomment-373670559,"In the previous commit 0b5ab1,  the patch did not
reset s to 0 for each link. This will result in only the first link can
be printed.","Sorry, I overlooked this patch and then included it in fc8580b",True,{}
corosync/corosync,https://github.com/corosync/corosync,315,2018-02-01T03:34:54Z,2018-03-16T10:25:55Z,2018-03-19T03:36:52Z,CLOSED,False,1,0,1,https://github.com/liu4480,"fix issue in ""corosync-cfgtool -s"" for multiple link with knet",1,[],https://github.com/corosync/corosync/pull/315,https://github.com/liu4480,3,https://github.com/corosync/corosync/pull/315#issuecomment-374092070,"In the previous commit 0b5ab1,  the patch did not
reset s to 0 for each link. This will result in only the first link can
be printed.",thanks for fixing the issue:),True,{}
corosync/corosync,https://github.com/corosync/corosync,317,2018-02-05T06:20:01Z,2018-02-05T09:10:41Z,2018-02-05T09:10:48Z,MERGED,True,1,6,1,https://github.com/fabbione,[man] fix regression introduced by 7162e75dcf81b7e475536e3060bf5e9312…,1,[],https://github.com/corosync/corosync/pull/317,https://github.com/fabbione,1,https://github.com/corosync/corosync/pull/317,"…cd43b8
Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com","…cd43b8
Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,318,2018-02-05T14:42:23Z,2018-02-05T14:57:44Z,2018-02-05T14:57:44Z,CLOSED,False,4,2,3,https://github.com/fabbione,[build] fix build with non-standard knet location,1,[],https://github.com/corosync/corosync/pull/318,https://github.com/fabbione,1,https://github.com/corosync/corosync/pull/318,Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com,Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com,True,{}
corosync/corosync,https://github.com/corosync/corosync,318,2018-02-05T14:42:23Z,2018-02-05T14:57:44Z,2018-02-05T14:57:44Z,CLOSED,False,4,2,3,https://github.com/fabbione,[build] fix build with non-standard knet location,1,[],https://github.com/corosync/corosync/pull/318,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/318#issuecomment-363108969,Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com,"@fabbione: Good catch and patch, ACK and merged as 1411608
Thank you for the patch,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,320,2018-02-07T13:31:39Z,2018-02-08T08:53:38Z,2018-02-09T14:26:36Z,CLOSED,False,5,5,1,https://github.com/Jauler,Fix totempg fragmentation segfault.,2,[],https://github.com/corosync/corosync/pull/320,https://github.com/Jauler,1,https://github.com/corosync/corosync/pull/320,"Proposed fix for #319.
Take accumulated messages branch only when whole message fits into packet, not when remainder fits.","Proposed fix for #319.
Take accumulated messages branch only when whole message fits into packet, not when remainder fits.",True,{}
corosync/corosync,https://github.com/corosync/corosync,320,2018-02-07T13:31:39Z,2018-02-08T08:53:38Z,2018-02-09T14:26:36Z,CLOSED,False,5,5,1,https://github.com/Jauler,Fix totempg fragmentation segfault.,2,[],https://github.com/corosync/corosync/pull/320,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/320#issuecomment-363811623,"Proposed fix for #319.
Take accumulated messages branch only when whole message fits into packet, not when remainder fits.","@Jauler:
Really good work and patch also looks good.
I'm just wondering ... wouldn't be easier to set assembly data size to 2MB (or 2* MESSAGE_SIZE_MAX)? Because that would allow to assembly even worst possible case, wouldn't it?",True,{}
corosync/corosync,https://github.com/corosync/corosync,320,2018-02-07T13:31:39Z,2018-02-08T08:53:38Z,2018-02-09T14:26:36Z,CLOSED,False,5,5,1,https://github.com/Jauler,Fix totempg fragmentation segfault.,2,[],https://github.com/corosync/corosync/pull/320,https://github.com/Jauler,3,https://github.com/corosync/corosync/pull/320#issuecomment-363813655,"Proposed fix for #319.
Take accumulated messages branch only when whole message fits into packet, not when remainder fits.","There might be more than two messages concatenated therefore 2 * MESSAGE_SIZE_MAX would only lower the probability that this will happen, but would not remove it.",True,{}
corosync/corosync,https://github.com/corosync/corosync,320,2018-02-07T13:31:39Z,2018-02-08T08:53:38Z,2018-02-09T14:26:36Z,CLOSED,False,5,5,1,https://github.com/Jauler,Fix totempg fragmentation segfault.,2,[],https://github.com/corosync/corosync/pull/320,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/320#issuecomment-364040705,"Proposed fix for #319.
Take accumulated messages branch only when whole message fits into packet, not when remainder fits.","@Jauler
Yep, you are right. Your patch is definitively better, so ACK and it's now merged as 0ebae6b (I've edited the commit message a bit, just copied information from #319) and 899cb29  and in needle 0dec7fa + 54f1f1b.
Thank you for all the hard work you've did on the problem reproducing and patch.
Regards,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,320,2018-02-07T13:31:39Z,2018-02-08T08:53:38Z,2018-02-09T14:26:36Z,CLOSED,False,5,5,1,https://github.com/Jauler,Fix totempg fragmentation segfault.,2,[],https://github.com/corosync/corosync/pull/320,https://github.com/Jauler,5,https://github.com/corosync/corosync/pull/320#issuecomment-364447675,"Proposed fix for #319.
Take accumulated messages branch only when whole message fits into packet, not when remainder fits.","Unfortunately with this pull request I introduced a regression... I am sorry about that :( .
For details:
Second commit of this PR changed copy_len to iovec[i].iov_len, assuming, copy_len is always the same as iovec[i].iov_len, but I missed the possability of small message being partly put at the end of packet,  which cuts this message in two parts and therefore making copy_len not equal to iovec[i].iov_len.
I will open PR which fixes this shortly. And again, sorry about my mistake.",True,{}
corosync/corosync,https://github.com/corosync/corosync,321,2018-02-09T14:29:59Z,2018-02-09T16:44:25Z,2018-02-09T16:46:53Z,CLOSED,False,3,3,1,https://github.com/Jauler,fix corrupted messages,1,[],https://github.com/corosync/corosync/pull/321,https://github.com/Jauler,1,https://github.com/corosync/corosync/pull/321,"After several days of testing I realised, that I introduced a regression with #320, this PR fixes it.
For details:
Second commit of  #320  changed copy_len to iovec[i].iov_len, assuming, copy_len is always the same as iovec[i].iov_len under those circumstances, but I missed the possability of small message being partly put at the end of packet, which cuts this message in two parts and therefore making copy_len not equal to iovec[i].iov_len.
Sorry for my mistake...","After several days of testing I realised, that I introduced a regression with #320, this PR fixes it.
For details:
Second commit of  #320  changed copy_len to iovec[i].iov_len, assuming, copy_len is always the same as iovec[i].iov_len under those circumstances, but I missed the possability of small message being partly put at the end of packet, which cuts this message in two parts and therefore making copy_len not equal to iovec[i].iov_len.
Sorry for my mistake...",True,{}
corosync/corosync,https://github.com/corosync/corosync,321,2018-02-09T14:29:59Z,2018-02-09T16:44:25Z,2018-02-09T16:46:53Z,CLOSED,False,3,3,1,https://github.com/Jauler,fix corrupted messages,1,[],https://github.com/corosync/corosync/pull/321,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/321#issuecomment-364488417,"After several days of testing I realised, that I introduced a regression with #320, this PR fixes it.
For details:
Second commit of  #320  changed copy_len to iovec[i].iov_len, assuming, copy_len is always the same as iovec[i].iov_len under those circumstances, but I missed the possability of small message being partly put at the end of packet, which cuts this message in two parts and therefore making copy_len not equal to iovec[i].iov_len.
Sorry for my mistake...","@Jauler
Thank you for the patch. ACK and merged as 105f3ae / 646c0d0.
You don't need to worry, totempg is quite messy code so chance to make a mistake is quite high. I appreciate much that you've tested it and sent patch.
Regards,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,322,2018-02-13T14:02:34Z,2018-02-13T15:29:23Z,2018-02-13T15:29:49Z,CLOSED,False,1,0,1,https://github.com/fabbione,test commit DO NOT MERGE,1,[],https://github.com/corosync/corosync/pull/322,https://github.com/fabbione,1,https://github.com/corosync/corosync/pull/322,Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com,Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com,True,{}
corosync/corosync,https://github.com/corosync/corosync,322,2018-02-13T14:02:34Z,2018-02-13T15:29:23Z,2018-02-13T15:29:49Z,CLOSED,False,1,0,1,https://github.com/fabbione,test commit DO NOT MERGE,1,[],https://github.com/corosync/corosync/pull/322,https://github.com/fabbione,2,https://github.com/corosync/corosync/pull/322#issuecomment-365286641,Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com,test this please,True,{}
corosync/corosync,https://github.com/corosync/corosync,322,2018-02-13T14:02:34Z,2018-02-13T15:29:23Z,2018-02-13T15:29:49Z,CLOSED,False,1,0,1,https://github.com/fabbione,test commit DO NOT MERGE,1,[],https://github.com/corosync/corosync/pull/322,https://github.com/fabbione,3,https://github.com/corosync/corosync/pull/322#issuecomment-365286729,Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com,test this please,True,{}
corosync/corosync,https://github.com/corosync/corosync,322,2018-02-13T14:02:34Z,2018-02-13T15:29:23Z,2018-02-13T15:29:49Z,CLOSED,False,1,0,1,https://github.com/fabbione,test commit DO NOT MERGE,1,[],https://github.com/corosync/corosync/pull/322,https://github.com/fabbione,4,https://github.com/corosync/corosync/pull/322#issuecomment-365286887,Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com,retest this please,True,{}
corosync/corosync,https://github.com/corosync/corosync,322,2018-02-13T14:02:34Z,2018-02-13T15:29:23Z,2018-02-13T15:29:49Z,CLOSED,False,1,0,1,https://github.com/fabbione,test commit DO NOT MERGE,1,[],https://github.com/corosync/corosync/pull/322,https://github.com/fabbione,5,https://github.com/corosync/corosync/pull/322#issuecomment-365287954,Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com,retest this please,True,{}
corosync/corosync,https://github.com/corosync/corosync,322,2018-02-13T14:02:34Z,2018-02-13T15:29:23Z,2018-02-13T15:29:49Z,CLOSED,False,1,0,1,https://github.com/fabbione,test commit DO NOT MERGE,1,[],https://github.com/corosync/corosync/pull/322,https://github.com/fabbione,6,https://github.com/corosync/corosync/pull/322#issuecomment-365290160,Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com,retest this please,True,{}
corosync/corosync,https://github.com/corosync/corosync,322,2018-02-13T14:02:34Z,2018-02-13T15:29:23Z,2018-02-13T15:29:49Z,CLOSED,False,1,0,1,https://github.com/fabbione,test commit DO NOT MERGE,1,[],https://github.com/corosync/corosync/pull/322,https://github.com/fabbione,7,https://github.com/corosync/corosync/pull/322#issuecomment-365301281,Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com,test was good. kthxbye,True,{}
corosync/corosync,https://github.com/corosync/corosync,323,2018-02-13T15:00:16Z,2018-02-13T16:48:24Z,2018-02-13T16:48:48Z,CLOSED,False,1,0,1,https://github.com/fabbione,test commit [DO NOT MERGE],1,[],https://github.com/corosync/corosync/pull/323,https://github.com/fabbione,1,https://github.com/corosync/corosync/pull/323,Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com,Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com,True,{}
corosync/corosync,https://github.com/corosync/corosync,324,2018-02-14T06:14:02Z,2018-02-14T08:23:19Z,2018-02-14T08:23:19Z,CLOSED,False,14,3,1,https://github.com/fabbione,[rpm] fixup corosync.spec.in to build on opensuse,2,[],https://github.com/corosync/corosync/pull/324,https://github.com/fabbione,1,https://github.com/corosync/corosync/pull/324,"move dbus-devel and nss-devel BuildRequires to file based depedency.
Those 2 BR have different names in OpenSUSE vs Fedora/RHEL/Centos.
This is kind of controversial as most distribution prefers a package
based build depedency, but the rpm version that supports
BuildRequires: foo || bar
is only available in rawhide and tumbleweed (aka no stable releases
are shipping it yet).
In order to build rpms in CI and have some level of flexibility
with upstream spec file, we need to compromise a bit.


add explicit --docdir
OpenSUSE does not ship docs in the normal dir and their rpm macro
does not appear to set it for us.


Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com","move dbus-devel and nss-devel BuildRequires to file based depedency.
Those 2 BR have different names in OpenSUSE vs Fedora/RHEL/Centos.
This is kind of controversial as most distribution prefers a package
based build depedency, but the rpm version that supports
BuildRequires: foo || bar
is only available in rawhide and tumbleweed (aka no stable releases
are shipping it yet).
In order to build rpms in CI and have some level of flexibility
with upstream spec file, we need to compromise a bit.


add explicit --docdir
OpenSUSE does not ship docs in the normal dir and their rpm macro
does not appear to set it for us.


Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,324,2018-02-14T06:14:02Z,2018-02-14T08:23:19Z,2018-02-14T08:23:19Z,CLOSED,False,14,3,1,https://github.com/fabbione,[rpm] fixup corosync.spec.in to build on opensuse,2,[],https://github.com/corosync/corosync/pull/324,https://github.com/fabbione,2,https://github.com/corosync/corosync/pull/324#issuecomment-365507354,"move dbus-devel and nss-devel BuildRequires to file based depedency.
Those 2 BR have different names in OpenSUSE vs Fedora/RHEL/Centos.
This is kind of controversial as most distribution prefers a package
based build depedency, but the rpm version that supports
BuildRequires: foo || bar
is only available in rawhide and tumbleweed (aka no stable releases
are shipping it yet).
In order to build rpms in CI and have some level of flexibility
with upstream spec file, we need to compromise a bit.


add explicit --docdir
OpenSUSE does not ship docs in the normal dir and their rpm macro
does not appear to set it for us.


Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com","Honza, if the change is accepted, I can enable https://ci.kronosnet.org/job/corosync-build-rpms/ right away, otherwise i´ll need to drop the opensuse builders from rpm validation.
For a matter of consistency I would prefer to keep the builders on.
Also please merge into camelback.",True,{}
corosync/corosync,https://github.com/corosync/corosync,324,2018-02-14T06:14:02Z,2018-02-14T08:23:19Z,2018-02-14T08:23:19Z,CLOSED,False,14,3,1,https://github.com/fabbione,[rpm] fixup corosync.spec.in to build on opensuse,2,[],https://github.com/corosync/corosync/pull/324,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/324#issuecomment-365529442,"move dbus-devel and nss-devel BuildRequires to file based depedency.
Those 2 BR have different names in OpenSUSE vs Fedora/RHEL/Centos.
This is kind of controversial as most distribution prefers a package
based build depedency, but the rpm version that supports
BuildRequires: foo || bar
is only available in rawhide and tumbleweed (aka no stable releases
are shipping it yet).
In order to build rpms in CI and have some level of flexibility
with upstream spec file, we need to compromise a bit.


add explicit --docdir
OpenSUSE does not ship docs in the normal dir and their rpm macro
does not appear to set it for us.


Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com","@fabbione Thank you for the patch, ACK and squashed + merged as 30c7f33",True,{}
corosync/corosync,https://github.com/corosync/corosync,325,2018-02-14T08:40:47Z,2018-02-14T08:49:12Z,2018-02-14T13:35:06Z,CLOSED,False,14,12,1,https://github.com/fabbione,[rpm] use rpm macros to better identify build distribution,1,[],https://github.com/corosync/corosync/pull/325,https://github.com/fabbione,1,https://github.com/corosync/corosync/pull/325,"thanks Honza for spotting it
Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com","thanks Honza for spotting it
Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,325,2018-02-14T08:40:47Z,2018-02-14T08:49:12Z,2018-02-14T13:35:06Z,CLOSED,False,14,12,1,https://github.com/fabbione,[rpm] use rpm macros to better identify build distribution,1,[],https://github.com/corosync/corosync/pull/325,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/325#issuecomment-365535450,"thanks Honza for spotting it
Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com","@fabbione Even better patch, so ACK and merged as 6f78480.
Thank you for the patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,326,2018-03-01T09:52:31Z,2018-03-01T13:24:30Z,2018-03-01T13:24:30Z,CLOSED,False,611,400,22,https://github.com/chrissie-c,Allow removal of ring0,15,[],https://github.com/corosync/corosync/pull/326,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/326,"This is the final piece of the 'make all corosync interfaces dynamic' patchset.
I've removed the 'specialness' of ring0 from all over the code so corosync no longer assumes there willalways be one. To make this work I have also had to remove the IP addresses from the srp_addr structure as that also assumes ring0 is always there and uses it to (for eg) determine the order of nodes in the ring. srp_addr now contains only the nodeid (I've left it as a struct for code clarity).
This changes a lot of code as well as the on-wire protocol (it removes a lot of data from on-wire so might be quicker) so needs quite a lot of careful reviewing and testing.","This is the final piece of the 'make all corosync interfaces dynamic' patchset.
I've removed the 'specialness' of ring0 from all over the code so corosync no longer assumes there willalways be one. To make this work I have also had to remove the IP addresses from the srp_addr structure as that also assumes ring0 is always there and uses it to (for eg) determine the order of nodes in the ring. srp_addr now contains only the nodeid (I've left it as a struct for code clarity).
This changes a lot of code as well as the on-wire protocol (it removes a lot of data from on-wire so might be quicker) so needs quite a lot of careful reviewing and testing.",True,{}
corosync/corosync,https://github.com/corosync/corosync,326,2018-03-01T09:52:31Z,2018-03-01T13:24:30Z,2018-03-01T13:24:30Z,CLOSED,False,611,400,22,https://github.com/chrissie-c,Allow removal of ring0,15,[],https://github.com/corosync/corosync/pull/326,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/326#issuecomment-369590182,"This is the final piece of the 'make all corosync interfaces dynamic' patchset.
I've removed the 'specialness' of ring0 from all over the code so corosync no longer assumes there willalways be one. To make this work I have also had to remove the IP addresses from the srp_addr structure as that also assumes ring0 is always there and uses it to (for eg) determine the order of nodes in the ring. srp_addr now contains only the nodeid (I've left it as a struct for code clarity).
This changes a lot of code as well as the on-wire protocol (it removes a lot of data from on-wire so might be quicker) so needs quite a lot of careful reviewing and testing.","@chrissie-c: nice work, ACK, and merged (cleaned) as 2c20590 .. fc8580b",True,{}
corosync/corosync,https://github.com/corosync/corosync,327,2018-03-01T14:07:11Z,2018-03-01T15:10:39Z,2018-03-01T15:10:39Z,CLOSED,False,12,2,1,https://github.com/chrissie-c,cfgtool: Don't assume link ID is a single character,1,[],https://github.com/corosync/corosync/pull/327,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/327,"For the moment link-ids are a single digit, but that could change and
the tools shouldn't be quite so fragile. So parse the interface_name
properly by looking for the space between the linkID and the IP.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","For the moment link-ids are a single digit, but that could change and
the tools shouldn't be quite so fragile. So parse the interface_name
properly by looking for the space between the linkID and the IP.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,327,2018-03-01T14:07:11Z,2018-03-01T15:10:39Z,2018-03-01T15:10:39Z,CLOSED,False,12,2,1,https://github.com/chrissie-c,cfgtool: Don't assume link ID is a single character,1,[],https://github.com/corosync/corosync/pull/327,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/327#issuecomment-369622119,"For the moment link-ids are a single digit, but that could change and
the tools shouldn't be quite so fragile. So parse the interface_name
properly by looking for the space between the linkID and the IP.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","@chrissie-c Nice patch, ack and merged as d2876ab.
Thank you for the patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,328,2018-03-02T14:56:41Z,2018-03-02T16:31:46Z,2018-03-02T16:49:24Z,CLOSED,False,230,137,21,https://github.com/jfriesse,Coverity fixes - Needle,12,[],https://github.com/corosync/corosync/pull/328,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/328,Fixes found by Coverity and clang.,Fixes found by Coverity and clang.,True,{}
corosync/corosync,https://github.com/corosync/corosync,328,2018-03-02T14:56:41Z,2018-03-02T16:31:46Z,2018-03-02T16:49:24Z,CLOSED,False,230,137,21,https://github.com/jfriesse,Coverity fixes - Needle,12,[],https://github.com/corosync/corosync/pull/328,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/328#issuecomment-369974152,Fixes found by Coverity and clang.,Patches reviewed by chrissie-c in #329 so merged also this patches.,True,{}
corosync/corosync,https://github.com/corosync/corosync,329,2018-03-02T15:01:49Z,2018-03-02T16:31:00Z,2018-03-02T16:49:18Z,CLOSED,False,9,6,6,https://github.com/jfriesse,Coverity fixes - master,5,[],https://github.com/corosync/corosync/pull/329,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/329,Fixes found by Coverity and clang - master/camelback version of #328 . Fixes related to qdevice are already merged in corosync-qdevice repo.,Fixes found by Coverity and clang - master/camelback version of #328 . Fixes related to qdevice are already merged in corosync-qdevice repo.,True,{}
corosync/corosync,https://github.com/corosync/corosync,329,2018-03-02T15:01:49Z,2018-03-02T16:31:00Z,2018-03-02T16:49:18Z,CLOSED,False,9,6,6,https://github.com/jfriesse,Coverity fixes - master,5,[],https://github.com/corosync/corosync/pull/329,https://github.com/chrissie-c,2,https://github.com/corosync/corosync/pull/329#issuecomment-369971904,Fixes found by Coverity and clang - master/camelback version of #328 . Fixes related to qdevice are already merged in corosync-qdevice repo.,ACK,True,{}
corosync/corosync,https://github.com/corosync/corosync,329,2018-03-02T15:01:49Z,2018-03-02T16:31:00Z,2018-03-02T16:49:18Z,CLOSED,False,9,6,6,https://github.com/jfriesse,Coverity fixes - master,5,[],https://github.com/corosync/corosync/pull/329,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/329#issuecomment-369973908,Fixes found by Coverity and clang - master/camelback version of #328 . Fixes related to qdevice are already merged in corosync-qdevice repo.,"@chrissie-c Thank you for the review, I've merged patches.",True,{}
corosync/corosync,https://github.com/corosync/corosync,331,2018-03-14T17:23:45Z,2018-03-16T12:59:02Z,2018-04-30T14:31:57Z,CLOSED,False,183,41,12,https://github.com/jfriesse,Wire version detect master,2,[],https://github.com/corosync/corosync/pull/331,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/331,"Add magic and version into header
Magic number (0xC070) together with version in every packet
is used for detecting that other node is really
Corosync 3.x.
Endian_detector field is removed and magic number is now
used instead.
If received packet magic number differs, guessing is used to show more
about the source (Corosync 2.3+, 2.2 are quite reliable, Knet and
unencrypted Corosync 2.1/2.0/1.x/OpenAIS are semi-reliable and encrypted
Corosync 2.1/2.0/1.x/OpenAIS are quite unreliable).","Add magic and version into header
Magic number (0xC070) together with version in every packet
is used for detecting that other node is really
Corosync 3.x.
Endian_detector field is removed and magic number is now
used instead.
If received packet magic number differs, guessing is used to show more
about the source (Corosync 2.3+, 2.2 are quite reliable, Knet and
unencrypted Corosync 2.1/2.0/1.x/OpenAIS are semi-reliable and encrypted
Corosync 2.1/2.0/1.x/OpenAIS are quite unreliable).",True,{}
corosync/corosync,https://github.com/corosync/corosync,331,2018-03-14T17:23:45Z,2018-03-16T12:59:02Z,2018-04-30T14:31:57Z,CLOSED,False,183,41,12,https://github.com/jfriesse,Wire version detect master,2,[],https://github.com/corosync/corosync/pull/331,https://github.com/chrissie-c,2,https://github.com/corosync/corosync/pull/331#issuecomment-373325079,"Add magic and version into header
Magic number (0xC070) together with version in every packet
is used for detecting that other node is really
Corosync 3.x.
Endian_detector field is removed and magic number is now
used instead.
If received packet magic number differs, guessing is used to show more
about the source (Corosync 2.3+, 2.2 are quite reliable, Knet and
unencrypted Corosync 2.1/2.0/1.x/OpenAIS are semi-reliable and encrypted
Corosync 2.1/2.0/1.x/OpenAIS are quite unreliable).",Tests fine for me. it's also about time we put the system_from in that message :),True,{}
corosync/corosync,https://github.com/corosync/corosync,331,2018-03-14T17:23:45Z,2018-03-16T12:59:02Z,2018-04-30T14:31:57Z,CLOSED,False,183,41,12,https://github.com/jfriesse,Wire version detect master,2,[],https://github.com/corosync/corosync/pull/331,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/331#issuecomment-373443566,"Add magic and version into header
Magic number (0xC070) together with version in every packet
is used for detecting that other node is really
Corosync 3.x.
Endian_detector field is removed and magic number is now
used instead.
If received packet magic number differs, guessing is used to show more
about the source (Corosync 2.3+, 2.2 are quite reliable, Knet and
unencrypted Corosync 2.1/2.0/1.x/OpenAIS are semi-reliable and encrypted
Corosync 2.1/2.0/1.x/OpenAIS are quite unreliable).","@chrissie-c Thank you for the review. I've completely forgot to test encrypted Knet so I've changed one of the message to be able to detect also that condition.
I've also changed struct sockaddr_storage passing from struct to const pointer (just to save some bytes in the stack).",True,{}
corosync/corosync,https://github.com/corosync/corosync,331,2018-03-14T17:23:45Z,2018-03-16T12:59:02Z,2018-04-30T14:31:57Z,CLOSED,False,183,41,12,https://github.com/jfriesse,Wire version detect master,2,[],https://github.com/corosync/corosync/pull/331,https://github.com/chrissie-c,4,https://github.com/corosync/corosync/pull/331#issuecomment-373701989,"Add magic and version into header
Magic number (0xC070) together with version in every packet
is used for detecting that other node is really
Corosync 3.x.
Endian_detector field is removed and magic number is now
used instead.
If received packet magic number differs, guessing is used to show more
about the source (Corosync 2.3+, 2.2 are quite reliable, Knet and
unencrypted Corosync 2.1/2.0/1.x/OpenAIS are semi-reliable and encrypted
Corosync 2.1/2.0/1.x/OpenAIS are quite unreliable).",ACK. works for me.,True,{}
corosync/corosync,https://github.com/corosync/corosync,331,2018-03-14T17:23:45Z,2018-03-16T12:59:02Z,2018-04-30T14:31:57Z,CLOSED,False,183,41,12,https://github.com/jfriesse,Wire version detect master,2,[],https://github.com/corosync/corosync/pull/331,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/331#issuecomment-373705642,"Add magic and version into header
Magic number (0xC070) together with version in every packet
is used for detecting that other node is really
Corosync 3.x.
Endian_detector field is removed and magic number is now
used instead.
If received packet magic number differs, guessing is used to show more
about the source (Corosync 2.3+, 2.2 are quite reliable, Knet and
unencrypted Corosync 2.1/2.0/1.x/OpenAIS are semi-reliable and encrypted
Corosync 2.1/2.0/1.x/OpenAIS are quite unreliable).",@chrissie-c Thank you for the review. I've merged patch as a 69857ef.,True,{}
corosync/corosync,https://github.com/corosync/corosync,332,2018-03-14T17:25:45Z,2018-03-16T12:53:18Z,2018-04-30T14:32:08Z,CLOSED,False,19,1,1,https://github.com/jfriesse,totemcrypto: Implement bad crypto header guess,1,[],https://github.com/corosync/corosync/pull/332,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/332,"Implement bad crypto header guess
Counterpart of ""totemsrp: Add magic and version into header""
commit in master branch.
It tries to detect if message was generated by Corosync or Kronosnet to
give a better error message.","Implement bad crypto header guess
Counterpart of ""totemsrp: Add magic and version into header""
commit in master branch.
It tries to detect if message was generated by Corosync or Kronosnet to
give a better error message.",True,{}
corosync/corosync,https://github.com/corosync/corosync,332,2018-03-14T17:25:45Z,2018-03-16T12:53:18Z,2018-04-30T14:32:08Z,CLOSED,False,19,1,1,https://github.com/jfriesse,totemcrypto: Implement bad crypto header guess,1,[],https://github.com/corosync/corosync/pull/332,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/332#issuecomment-373444640,"Implement bad crypto header guess
Counterpart of ""totemsrp: Add magic and version into header""
commit in master branch.
It tries to detect if message was generated by Corosync or Kronosnet to
give a better error message.","@chrissie-c Thank you for the review. Yes, I fully agree previous message was confusing, so I've changed it and added support for more options (like encrypted knet - quite unreliable).",True,{}
corosync/corosync,https://github.com/corosync/corosync,332,2018-03-14T17:25:45Z,2018-03-16T12:53:18Z,2018-04-30T14:32:08Z,CLOSED,False,19,1,1,https://github.com/jfriesse,totemcrypto: Implement bad crypto header guess,1,[],https://github.com/corosync/corosync/pull/332,https://github.com/chrissie-c,3,https://github.com/corosync/corosync/pull/332#issuecomment-373699414,"Implement bad crypto header guess
Counterpart of ""totemsrp: Add magic and version into header""
commit in master branch.
It tries to detect if message was generated by Corosync or Kronosnet to
give a better error message.",WFM. ACK.,True,{}
corosync/corosync,https://github.com/corosync/corosync,332,2018-03-14T17:25:45Z,2018-03-16T12:53:18Z,2018-04-30T14:32:08Z,CLOSED,False,19,1,1,https://github.com/jfriesse,totemcrypto: Implement bad crypto header guess,1,[],https://github.com/corosync/corosync/pull/332,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/332#issuecomment-373704258,"Implement bad crypto header guess
Counterpart of ""totemsrp: Add magic and version into header""
commit in master branch.
It tries to detect if message was generated by Corosync or Kronosnet to
give a better error message.",Merged as fa8180d,True,{}
corosync/corosync,https://github.com/corosync/corosync,333,2018-03-16T10:13:21Z,2018-03-16T12:13:53Z,2018-03-16T12:13:53Z,CLOSED,False,11,1,1,https://github.com/chrissie-c,knet: Fix display of links when link0 not configured.,1,[],https://github.com/corosync/corosync/pull/333,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/333,"Because totemknet always configures link0 as loopback even
even if it's not known to corosync, we need to filter it
out when returning the link status, otherwise things get misaligned
in cfg.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","Because totemknet always configures link0 as loopback even
even if it's not known to corosync, we need to filter it
out when returning the link status, otherwise things get misaligned
in cfg.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,333,2018-03-16T10:13:21Z,2018-03-16T12:13:53Z,2018-03-16T12:13:53Z,CLOSED,False,11,1,1,https://github.com/chrissie-c,knet: Fix display of links when link0 not configured.,1,[],https://github.com/corosync/corosync/pull/333,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/333#issuecomment-373695499,"Because totemknet always configures link0 as loopback even
even if it's not known to corosync, we need to filter it
out when returning the link status, otherwise things get misaligned
in cfg.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","@chrissie-c Nice patch, ACK and merged as 066525e
Thank you for the patch,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,335,2018-03-27T12:08:27Z,2018-04-11T16:43:08Z,2018-04-11T16:49:31Z,CLOSED,False,7,3,1,https://github.com/Jauler,libcpg: Handle fragmented message sending interruption,2,[],https://github.com/corosync/corosync/pull/335,https://github.com/Jauler,1,https://github.com/corosync/corosync/pull/335,"It turns out that there are some legitimate cases where fragmented messages might be interrupted during sending (e.g. CS_ERR_TRY_AGAIN or as in my case: CS_ERR_INTERRUPT). This creates a situation where LIBCPG_PARTIAL_FIRST is sent multiple times before receiving LIBCPG_PARTIAL_LAST.
I am proposing that incomplete message would be dropped and assembly of new message would be started as libcpg should have reported error during sending of that incomplete message. This PR implements that.","It turns out that there are some legitimate cases where fragmented messages might be interrupted during sending (e.g. CS_ERR_TRY_AGAIN or as in my case: CS_ERR_INTERRUPT). This creates a situation where LIBCPG_PARTIAL_FIRST is sent multiple times before receiving LIBCPG_PARTIAL_LAST.
I am proposing that incomplete message would be dropped and assembly of new message would be started as libcpg should have reported error during sending of that incomplete message. This PR implements that.",True,{}
corosync/corosync,https://github.com/corosync/corosync,335,2018-03-27T12:08:27Z,2018-04-11T16:43:08Z,2018-04-11T16:49:31Z,CLOSED,False,7,3,1,https://github.com/Jauler,libcpg: Handle fragmented message sending interruption,2,[],https://github.com/corosync/corosync/pull/335,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/335#issuecomment-376501150,"It turns out that there are some legitimate cases where fragmented messages might be interrupted during sending (e.g. CS_ERR_TRY_AGAIN or as in my case: CS_ERR_INTERRUPT). This creates a situation where LIBCPG_PARTIAL_FIRST is sent multiple times before receiving LIBCPG_PARTIAL_LAST.
I am proposing that incomplete message would be dropped and assembly of new message would be started as libcpg should have reported error during sending of that incomplete message. This PR implements that.",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,335,2018-03-27T12:08:27Z,2018-04-11T16:43:08Z,2018-04-11T16:49:31Z,CLOSED,False,7,3,1,https://github.com/Jauler,libcpg: Handle fragmented message sending interruption,2,[],https://github.com/corosync/corosync/pull/335,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/335#issuecomment-376502568,"It turns out that there are some legitimate cases where fragmented messages might be interrupted during sending (e.g. CS_ERR_TRY_AGAIN or as in my case: CS_ERR_INTERRUPT). This creates a situation where LIBCPG_PARTIAL_FIRST is sent multiple times before receiving LIBCPG_PARTIAL_LAST.
I am proposing that incomplete message would be dropped and assembly of new message would be started as libcpg should have reported error during sending of that incomplete message. This PR implements that.",@knet-ci-bot add to whitelist,True,{}
corosync/corosync,https://github.com/corosync/corosync,335,2018-03-27T12:08:27Z,2018-04-11T16:43:08Z,2018-04-11T16:49:31Z,CLOSED,False,7,3,1,https://github.com/Jauler,libcpg: Handle fragmented message sending interruption,2,[],https://github.com/corosync/corosync/pull/335,https://github.com/chrissie-c,4,https://github.com/corosync/corosync/pull/335#issuecomment-376508043,"It turns out that there are some legitimate cases where fragmented messages might be interrupted during sending (e.g. CS_ERR_TRY_AGAIN or as in my case: CS_ERR_INTERRUPT). This creates a situation where LIBCPG_PARTIAL_FIRST is sent multiple times before receiving LIBCPG_PARTIAL_LAST.
I am proposing that incomplete message would be dropped and assembly of new message would be started as libcpg should have reported error during sending of that incomplete message. This PR implements that.","It sort of makes sense to me, on the other hand I'm not sure about not reporting an error condition back to the client. This is basically something that should never happen (it would be a bug in the daemon), so I feel it ought to be reported somewhere.",True,{}
corosync/corosync,https://github.com/corosync/corosync,335,2018-03-27T12:08:27Z,2018-04-11T16:43:08Z,2018-04-11T16:49:31Z,CLOSED,False,7,3,1,https://github.com/Jauler,libcpg: Handle fragmented message sending interruption,2,[],https://github.com/corosync/corosync/pull/335,https://github.com/Jauler,5,https://github.com/corosync/corosync/pull/335#issuecomment-376519288,"It turns out that there are some legitimate cases where fragmented messages might be interrupted during sending (e.g. CS_ERR_TRY_AGAIN or as in my case: CS_ERR_INTERRUPT). This creates a situation where LIBCPG_PARTIAL_FIRST is sent multiple times before receiving LIBCPG_PARTIAL_LAST.
I am proposing that incomplete message would be dropped and assembly of new message would be started as libcpg should have reported error during sending of that incomplete message. This PR implements that.","I believe that from the client perspective it would be nice to follow kind of all-or-nothing logic, either whole message has been sent or none of it. This implies that if sending side reported an error, receiving side should be silent.
And if, unfortunately, there would be a bug in daemon, packet assembly is probably not the right place to handle it.
Please let me know what You think :).",True,{}
corosync/corosync,https://github.com/corosync/corosync,335,2018-03-27T12:08:27Z,2018-04-11T16:43:08Z,2018-04-11T16:49:31Z,CLOSED,False,7,3,1,https://github.com/Jauler,libcpg: Handle fragmented message sending interruption,2,[],https://github.com/corosync/corosync/pull/335,https://github.com/chrissie-c,6,https://github.com/corosync/corosync/pull/335#issuecomment-376542015,"It turns out that there are some legitimate cases where fragmented messages might be interrupted during sending (e.g. CS_ERR_TRY_AGAIN or as in my case: CS_ERR_INTERRUPT). This creates a situation where LIBCPG_PARTIAL_FIRST is sent multiple times before receiving LIBCPG_PARTIAL_LAST.
I am proposing that incomplete message would be dropped and assembly of new message would be started as libcpg should have reported error during sending of that incomplete message. This PR implements that.",I'm willing to be swayed either way. If we do go this route then I think the comment above should contain a little more detail. Honza?,True,{}
corosync/corosync,https://github.com/corosync/corosync,335,2018-03-27T12:08:27Z,2018-04-11T16:43:08Z,2018-04-11T16:49:31Z,CLOSED,False,7,3,1,https://github.com/Jauler,libcpg: Handle fragmented message sending interruption,2,[],https://github.com/corosync/corosync/pull/335,https://github.com/fabbione,7,https://github.com/corosync/corosync/pull/335#issuecomment-377958735,"It turns out that there are some legitimate cases where fragmented messages might be interrupted during sending (e.g. CS_ERR_TRY_AGAIN or as in my case: CS_ERR_INTERRUPT). This creates a situation where LIBCPG_PARTIAL_FIRST is sent multiple times before receiving LIBCPG_PARTIAL_LAST.
I am proposing that incomplete message would be dropped and assembly of new message would be started as libcpg should have reported error during sending of that incomplete message. This PR implements that.",retest this please,True,{}
corosync/corosync,https://github.com/corosync/corosync,335,2018-03-27T12:08:27Z,2018-04-11T16:43:08Z,2018-04-11T16:49:31Z,CLOSED,False,7,3,1,https://github.com/Jauler,libcpg: Handle fragmented message sending interruption,2,[],https://github.com/corosync/corosync/pull/335,https://github.com/jfriesse,8,https://github.com/corosync/corosync/pull/335#issuecomment-378149899,"It turns out that there are some legitimate cases where fragmented messages might be interrupted during sending (e.g. CS_ERR_TRY_AGAIN or as in my case: CS_ERR_INTERRUPT). This creates a situation where LIBCPG_PARTIAL_FIRST is sent multiple times before receiving LIBCPG_PARTIAL_LAST.
I am proposing that incomplete message would be dropped and assembly of new message would be started as libcpg should have reported error during sending of that incomplete message. This PR implements that.","I don't really have strong opinion.
@Jauler Do you have any reproducer of the problem (change in the code to reproduce is ok for me) ideally with what is happening before and after the patch?",True,{}
corosync/corosync,https://github.com/corosync/corosync,335,2018-03-27T12:08:27Z,2018-04-11T16:43:08Z,2018-04-11T16:49:31Z,CLOSED,False,7,3,1,https://github.com/Jauler,libcpg: Handle fragmented message sending interruption,2,[],https://github.com/corosync/corosync/pull/335,https://github.com/Jauler,9,https://github.com/corosync/corosync/pull/335#issuecomment-378202495,"It turns out that there are some legitimate cases where fragmented messages might be interrupted during sending (e.g. CS_ERR_TRY_AGAIN or as in my case: CS_ERR_INTERRUPT). This creates a situation where LIBCPG_PARTIAL_FIRST is sent multiple times before receiving LIBCPG_PARTIAL_LAST.
I am proposing that incomplete message would be dropped and assembly of new message would be started as libcpg should have reported error during sending of that incomplete message. This PR implements that.","This issue has reproduced when we were testing our cluster which uses corosync directly, unfortunately now I have no small reproducer... If You think it is important to provide reproducer, I could try to find some free time to write it, but I hope that step-by-step description of what exactly happens below could be enough:
Before the patch:

Client provides a big message via cpg_mcast_joined
Lets say we hit all retries with CS_ERR_TRY_AGAIN in send_fragments(...) (lib/cpg.c), and some fragments gets sent, but not all. CS_ERR_TRY_AGAIN is returned by cpg_mcast_joined call. (this part is trickier to reproduce reliably)
Receiving end receives fragments which were sent in step 2 creating assembly, but not finishing it as there was no LIBCPG_PARTIAL_LAST fragment
Client provides another big message via cpg_mcast_joined, this time successfully sending all fragments. Now CS_OK is returned by cpg_mcast_joined call.
Receiving end notices that there was assembly going on before, but it has received LIBCPG_PARTIAL_FIRST fragment (in cpg_dispatch(...) lib/cpg.c) and returns CS_ERR_MESSAGE_ERROR without clearing old assembly. Also just received LIBCPG_PARTIAL_FIRST fragment gets incorrectly ignored.
Receiving end receives subsequent fragments from step 4 and incorrectly assumes that those fragments belong to assembly from step 1, possibly overflowing heap buffer allocated in step 3.

After the patch:
Step 1 through 4 (inclusive) are the same as before

Receiving end receives LIBCPG_PARTIAL_FIRST fragment, in cpg_dispatch() (lib/cpg.c) notices that there is ongoing assembly, drops old assembly and creates new one.
Receiving end receives subsequent fragments from step 4, but now correctly assembles message as assembly was created for fragments currently being assembled.
After receiving LIBCPG_PARTIAL_LAST, assembled message is delivered to client, and assembly is freed.",True,{}
corosync/corosync,https://github.com/corosync/corosync,335,2018-03-27T12:08:27Z,2018-04-11T16:43:08Z,2018-04-11T16:49:31Z,CLOSED,False,7,3,1,https://github.com/Jauler,libcpg: Handle fragmented message sending interruption,2,[],https://github.com/corosync/corosync/pull/335,https://github.com/jfriesse,10,https://github.com/corosync/corosync/pull/335#issuecomment-378835788,"It turns out that there are some legitimate cases where fragmented messages might be interrupted during sending (e.g. CS_ERR_TRY_AGAIN or as in my case: CS_ERR_INTERRUPT). This creates a situation where LIBCPG_PARTIAL_FIRST is sent multiple times before receiving LIBCPG_PARTIAL_LAST.
I am proposing that incomplete message would be dropped and assembly of new message would be started as libcpg should have reported error during sending of that incomplete message. This PR implements that.","@Jauler Yes please, reproducer would be highly rewarded (it can be change in corosync code to return artifact error).
I can agree that described behavior after the patch seems to be more consistent (+ fixes bug), but I would like to test it.",True,{}
corosync/corosync,https://github.com/corosync/corosync,335,2018-03-27T12:08:27Z,2018-04-11T16:43:08Z,2018-04-11T16:49:31Z,CLOSED,False,7,3,1,https://github.com/Jauler,libcpg: Handle fragmented message sending interruption,2,[],https://github.com/corosync/corosync/pull/335,https://github.com/chrissie-c,11,https://github.com/corosync/corosync/pull/335#issuecomment-379258637,"It turns out that there are some legitimate cases where fragmented messages might be interrupted during sending (e.g. CS_ERR_TRY_AGAIN or as in my case: CS_ERR_INTERRUPT). This creates a situation where LIBCPG_PARTIAL_FIRST is sent multiple times before receiving LIBCPG_PARTIAL_LAST.
I am proposing that incomplete message would be dropped and assembly of new message would be started as libcpg should have reported error during sending of that incomplete message. This PR implements that.","Agreed, that explanation convinces me that the new behaviour is worthwhile.",True,{}
corosync/corosync,https://github.com/corosync/corosync,335,2018-03-27T12:08:27Z,2018-04-11T16:43:08Z,2018-04-11T16:49:31Z,CLOSED,False,7,3,1,https://github.com/Jauler,libcpg: Handle fragmented message sending interruption,2,[],https://github.com/corosync/corosync/pull/335,https://github.com/Jauler,12,https://github.com/corosync/corosync/pull/335#issuecomment-380270277,"It turns out that there are some legitimate cases where fragmented messages might be interrupted during sending (e.g. CS_ERR_TRY_AGAIN or as in my case: CS_ERR_INTERRUPT). This creates a situation where LIBCPG_PARTIAL_FIRST is sent multiple times before receiving LIBCPG_PARTIAL_LAST.
I am proposing that incomplete message would be dropped and assembly of new message would be started as libcpg should have reported error during sending of that incomplete message. This PR implements that.","I wrote a simple reproducer of the problem. It can be found here. Actual reproducer sources are located in libcpg-crash-reproducer directory.
Note: In order to reliably reproduce step 2 of this problem, I added change ( Jauler/libcpg-crash-reproducer@65dce8c9ee ) in lib/cpg.c to force CS_ERR_TRY_AGAIN to occur.
To actually see heap overflow, please run this reproducer under valgrind, as memory might be mapped well after buffer which gets overflowed. It actually happend in my VM preventing segfault from occuring.
This is output which I am getting:
$ valgrind ./libcpg-crash-reproducer
==3424== Memcheck, a memory error detector
==3424== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==3424== Using Valgrind-3.12.0.SVN and LibVEX; rerun with -h for copyright info
==3424== Command: ./libcpg-crash-reproducer
==3424== 
Broadcasting large message until CS_ERR_TRY_AGAIN occurs...
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=1
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=1
Broadcasting one more large message...
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
sleep. counter=0
Start dispatching...
==3424== Invalid write of size 8
==3424==    at 0x4C30143: memcpy@GLIBC_2.2.5 (vg_replace_strmem.c:1017)
==3424==    by 0x4E39D42: cpg_dispatch (cpg.c:521)
==3424==    by 0x108B8F: main (in /root/source/corosync/libcpg-crash-reproducer/libcpg-crash-reproducer)
==3424==  Address 0x10878040 is 0 bytes after a block of size 41,943,040 alloc'd
==3424==    at 0x4C2BBAF: malloc (vg_replace_malloc.c:299)
==3424==    by 0x4E39CF5: cpg_dispatch (cpg.c:509)
==3424==    by 0x108B8F: main (in /root/source/corosync/libcpg-crash-reproducer/libcpg-crash-reproducer)
==3424== 
==3424== 
==3424== Process terminating with default action of signal 11 (SIGSEGV)
==3424==  Access not within mapped region at address 0x10879000
==3424==    at 0x4C30143: memcpy@GLIBC_2.2.5 (vg_replace_strmem.c:1017)
==3424==    by 0x4E39D42: cpg_dispatch (cpg.c:521)
==3424==    by 0x108B8F: main (in /root/source/corosync/libcpg-crash-reproducer/libcpg-crash-reproducer)
==3424==  If you believe this happened as a result of a stack
==3424==  overflow in your program's main thread (unlikely but
==3424==  possible), you can try to increase the size of the
==3424==  main thread stack using the --main-stacksize= flag.
==3424==  The main thread stack size used in this run was 8388608.
==3424== 
==3424== HEAP SUMMARY:
==3424==     in use at exit: 168,823,144 bytes in 14 blocks
==3424==   total heap usage: 17 allocs, 3 frees, 168,836,656 bytes allocated
==3424== 
==3424== LEAK SUMMARY:
==3424==    definitely lost: 0 bytes in 0 blocks
==3424==    indirectly lost: 0 bytes in 0 blocks
==3424==      possibly lost: 0 bytes in 0 blocks
==3424==    still reachable: 168,823,144 bytes in 14 blocks
==3424==         suppressed: 0 bytes in 0 blocks
==3424== Rerun with --leak-check=full to see details of leaked memory
==3424== 
==3424== For counts of detected and suppressed errors, rerun with: -v
==3424== ERROR SUMMARY: 505 errors from 1 contexts (suppressed: 0 from 0)
[3]    3424 segmentation fault  valgrind ./libcpg-crash-reproducer",True,{}
corosync/corosync,https://github.com/corosync/corosync,335,2018-03-27T12:08:27Z,2018-04-11T16:43:08Z,2018-04-11T16:49:31Z,CLOSED,False,7,3,1,https://github.com/Jauler,libcpg: Handle fragmented message sending interruption,2,[],https://github.com/corosync/corosync/pull/335,https://github.com/jfriesse,13,https://github.com/corosync/corosync/pull/335#issuecomment-380518864,"It turns out that there are some legitimate cases where fragmented messages might be interrupted during sending (e.g. CS_ERR_TRY_AGAIN or as in my case: CS_ERR_INTERRUPT). This creates a situation where LIBCPG_PARTIAL_FIRST is sent multiple times before receiving LIBCPG_PARTIAL_LAST.
I am proposing that incomplete message would be dropped and assembly of new message would be started as libcpg should have reported error during sending of that incomplete message. This PR implements that.","@Jauler Thank you for the reproduced (really nice work), now I'm finally able to fully understand what is going on. I like new behavior a lot more and 100% agree with all-or-nothing logic.
Also really nice patch, so ACK and merged as aa62c2c / 1b326be .
Thank you for the patch,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,337,2018-04-17T12:29:27Z,2018-08-09T14:46:17Z,2018-08-09T14:46:18Z,CLOSED,False,1,1,1,https://github.com/wferi,qnetd-certutil: fix format option name in stat invocation,1,[],https://github.com/corosync/corosync/pull/337,https://github.com/wferi,1,https://github.com/corosync/corosync/pull/337,"On my Debian machines -f is the short name for the --file-system option.
So this usage very much seems like a typo, especially before a format string.
This patch should apply to the split-out qdevice repository all the same.
Regards,
Feri.","On my Debian machines -f is the short name for the --file-system option.
So this usage very much seems like a typo, especially before a format string.
This patch should apply to the split-out qdevice repository all the same.
Regards,
Feri.",True,{}
corosync/corosync,https://github.com/corosync/corosync,337,2018-04-17T12:29:27Z,2018-08-09T14:46:17Z,2018-08-09T14:46:18Z,CLOSED,False,1,1,1,https://github.com/wferi,qnetd-certutil: fix format option name in stat invocation,1,[],https://github.com/corosync/corosync/pull/337,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/337#issuecomment-381974701,"On my Debian machines -f is the short name for the --file-system option.
So this usage very much seems like a typo, especially before a format string.
This patch should apply to the split-out qdevice repository all the same.
Regards,
Feri.",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,337,2018-04-17T12:29:27Z,2018-08-09T14:46:17Z,2018-08-09T14:46:18Z,CLOSED,False,1,1,1,https://github.com/wferi,qnetd-certutil: fix format option name in stat invocation,1,[],https://github.com/corosync/corosync/pull/337,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/337#issuecomment-381984567,"On my Debian machines -f is the short name for the --file-system option.
So this usage very much seems like a typo, especially before a format string.
This patch should apply to the split-out qdevice repository all the same.
Regards,
Feri.","@wferi Thank you for notice, but this is not a bug but feature.
Idea is following:
Use chown option --reference by default. This is GNU extension and not available on BSD systems so on BSD it fails and chown is used instead. And on BSD (at least FreeBSD/OpenBSD and NetBSD) -f is format (--format is GNU extension and not available).
Of course this code fails with busybox but I don't think it is really a big deal.",True,{}
corosync/corosync,https://github.com/corosync/corosync,337,2018-04-17T12:29:27Z,2018-08-09T14:46:17Z,2018-08-09T14:46:18Z,CLOSED,False,1,1,1,https://github.com/wferi,qnetd-certutil: fix format option name in stat invocation,1,[],https://github.com/corosync/corosync/pull/337,https://github.com/wferi,4,https://github.com/corosync/corosync/pull/337#issuecomment-382003131,"On my Debian machines -f is the short name for the --file-system option.
So this usage very much seems like a typo, especially before a format string.
This patch should apply to the split-out qdevice repository all the same.
Regards,
Feri.","Ah, I see. Clever. Unfortunately, https://fedoraproject.org/wiki/Changes/NSSDefaultFileFormatSql breaks this logic completely by changing the file names. I thought the option name was a separate issue, but it's all related then:
Creating /etc/corosync/qnetd/nssdb
Creating new key and cert db
password file contains no data
stat: cannot read file system information for '%u:%g': No such file or directory
chmod: cannot access '/etc/corosync/qnetd/nssdb/key3.db': No such file or directory
chmod: cannot access '/etc/corosync/qnetd/nssdb/cert8.db': No such file or directory
chmod: cannot access '/etc/corosync/qnetd/nssdb/secmod.db': No such file or directory",True,{}
corosync/corosync,https://github.com/corosync/corosync,337,2018-04-17T12:29:27Z,2018-08-09T14:46:17Z,2018-08-09T14:46:18Z,CLOSED,False,1,1,1,https://github.com/wferi,qnetd-certutil: fix format option name in stat invocation,1,[],https://github.com/corosync/corosync/pull/337,https://github.com/knet-ci-bot,5,https://github.com/corosync/corosync/pull/337#issuecomment-382011423,"On my Debian machines -f is the short name for the --file-system option.
So this usage very much seems like a typo, especially before a format string.
This patch should apply to the split-out qdevice repository all the same.
Regards,
Feri.",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,337,2018-04-17T12:29:27Z,2018-08-09T14:46:17Z,2018-08-09T14:46:18Z,CLOSED,False,1,1,1,https://github.com/wferi,qnetd-certutil: fix format option name in stat invocation,1,[],https://github.com/corosync/corosync/pull/337,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/337#issuecomment-382013213,"On my Debian machines -f is the short name for the --file-system option.
So this usage very much seems like a typo, especially before a format string.
This patch should apply to the split-out qdevice repository all the same.
Regards,
Feri.","@wferi Thank you for notice. That is problem.
Do you want to sent the patch or should I fix it (of course you will get credit in the commit message)?",True,{}
corosync/corosync,https://github.com/corosync/corosync,337,2018-04-17T12:29:27Z,2018-08-09T14:46:17Z,2018-08-09T14:46:18Z,CLOSED,False,1,1,1,https://github.com/wferi,qnetd-certutil: fix format option name in stat invocation,1,[],https://github.com/corosync/corosync/pull/337,https://github.com/wferi,7,https://github.com/corosync/corosync/pull/337#issuecomment-382023134,"On my Debian machines -f is the short name for the --file-system option.
So this usage very much seems like a typo, especially before a format string.
This patch should apply to the split-out qdevice repository all the same.
Regards,
Feri.","I haven't got a patch ready, I've just understood the issue.
The Debian package will have to manually upgrade the databases as qnetd is run without write permissions to them. It would be nice to embed this functionality into certutil, though: do nothing if DB is in SQL format, upgrade if in DBM format, create new if there's no DB...",True,{}
corosync/corosync,https://github.com/corosync/corosync,337,2018-04-17T12:29:27Z,2018-08-09T14:46:17Z,2018-08-09T14:46:18Z,CLOSED,False,1,1,1,https://github.com/wferi,qnetd-certutil: fix format option name in stat invocation,1,[],https://github.com/corosync/corosync/pull/337,https://github.com/jfriesse,8,https://github.com/corosync/corosync/pull/337#issuecomment-382033214,"On my Debian machines -f is the short name for the --file-system option.
So this usage very much seems like a typo, especially before a format string.
This patch should apply to the split-out qdevice repository all the same.
Regards,
Feri.","@wferi Ok.
Is new operation (like -u) ok  (to be executed withing deb postinstall script)? Don't you have idea if there is better way how to find out what format current DB has other than checking file names?",True,{}
corosync/corosync,https://github.com/corosync/corosync,337,2018-04-17T12:29:27Z,2018-08-09T14:46:17Z,2018-08-09T14:46:18Z,CLOSED,False,1,1,1,https://github.com/wferi,qnetd-certutil: fix format option name in stat invocation,1,[],https://github.com/corosync/corosync/pull/337,https://github.com/wferi,9,https://github.com/corosync/corosync/pull/337#issuecomment-382038394,"On my Debian machines -f is the short name for the --file-system option.
So this usage very much seems like a typo, especially before a format string.
This patch should apply to the split-out qdevice repository all the same.
Regards,
Feri.","Unfortunately I haven't got a better idea offhand. I think checking the file names should be good enough, and it avoids doing unnecessary operations. Sadly, it ties the code to a particular DB version. It may be acceptable, though, as DB versions don't seem to change very often.
Regarding certutil operations: -i does not allow overwriting an existing DB now, so -u could also be its modifier to enable the double fallback described above, or used standalone to try a pure upgrade.",True,{}
corosync/corosync,https://github.com/corosync/corosync,337,2018-04-17T12:29:27Z,2018-08-09T14:46:17Z,2018-08-09T14:46:18Z,CLOSED,False,1,1,1,https://github.com/wferi,qnetd-certutil: fix format option name in stat invocation,1,[],https://github.com/corosync/corosync/pull/337,https://github.com/fabbione,10,https://github.com/corosync/corosync/pull/337#issuecomment-382251762,"On my Debian machines -f is the short name for the --file-system option.
So this usage very much seems like a typo, especially before a format string.
This patch should apply to the split-out qdevice repository all the same.
Regards,
Feri.",add to whitelist,True,{}
corosync/corosync,https://github.com/corosync/corosync,337,2018-04-17T12:29:27Z,2018-08-09T14:46:17Z,2018-08-09T14:46:18Z,CLOSED,False,1,1,1,https://github.com/wferi,qnetd-certutil: fix format option name in stat invocation,1,[],https://github.com/corosync/corosync/pull/337,https://github.com/knet-ci-bot,11,https://github.com/corosync/corosync/pull/337#issuecomment-382251772,"On my Debian machines -f is the short name for the --file-system option.
So this usage very much seems like a typo, especially before a format string.
This patch should apply to the split-out qdevice repository all the same.
Regards,
Feri.",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,337,2018-04-17T12:29:27Z,2018-08-09T14:46:17Z,2018-08-09T14:46:18Z,CLOSED,False,1,1,1,https://github.com/wferi,qnetd-certutil: fix format option name in stat invocation,1,[],https://github.com/corosync/corosync/pull/337,https://github.com/fabbione,12,https://github.com/corosync/corosync/pull/337#issuecomment-382251838,"On my Debian machines -f is the short name for the --file-system option.
So this usage very much seems like a typo, especially before a format string.
This patch should apply to the split-out qdevice repository all the same.
Regards,
Feri.","(sorry, hitted the wrong button).. adding Feri to CI whitelist :-)",True,{}
corosync/corosync,https://github.com/corosync/corosync,337,2018-04-17T12:29:27Z,2018-08-09T14:46:17Z,2018-08-09T14:46:18Z,CLOSED,False,1,1,1,https://github.com/wferi,qnetd-certutil: fix format option name in stat invocation,1,[],https://github.com/corosync/corosync/pull/337,https://github.com/fabbione,13,https://github.com/corosync/corosync/pull/337#issuecomment-382251978,"On my Debian machines -f is the short name for the --file-system option.
So this usage very much seems like a typo, especially before a format string.
This patch should apply to the split-out qdevice repository all the same.
Regards,
Feri.",add to whitelist,True,{}
corosync/corosync,https://github.com/corosync/corosync,337,2018-04-17T12:29:27Z,2018-08-09T14:46:17Z,2018-08-09T14:46:18Z,CLOSED,False,1,1,1,https://github.com/wferi,qnetd-certutil: fix format option name in stat invocation,1,[],https://github.com/corosync/corosync/pull/337,https://github.com/wferi,14,https://github.com/corosync/corosync/pull/337#issuecomment-383018675,"On my Debian machines -f is the short name for the --file-system option.
So this usage very much seems like a typo, especially before a format string.
This patch should apply to the split-out qdevice repository all the same.
Regards,
Feri.","While we're at it, I'd like to make qnetd-certutil more relaxed with respect to setting permissions. The NSS certutil -N sets up 0600 permissions; why does qnetd-certutil make an effort to allow group write access to them? If corosync-qnetd runs as user coroqnetd (as it should IMO), the DB files should be made readable by the coroqnetd group, and that's it. No other changes seem necessary to me. What other use cases do you want to allow?
We really should move this discussion to somewhere else and close this misguided pull request for good...
Regards,
Feri.",True,{}
corosync/corosync,https://github.com/corosync/corosync,337,2018-04-17T12:29:27Z,2018-08-09T14:46:17Z,2018-08-09T14:46:18Z,CLOSED,False,1,1,1,https://github.com/wferi,qnetd-certutil: fix format option name in stat invocation,1,[],https://github.com/corosync/corosync/pull/337,https://github.com/jfriesse,15,https://github.com/corosync/corosync/pull/337#issuecomment-383055511,"On my Debian machines -f is the short name for the --file-system option.
So this usage very much seems like a typo, especially before a format string.
This patch should apply to the split-out qdevice repository all the same.
Regards,
Feri.","@wferi Idea is to allow having qnetd admin who is not a root. So standard user who has coroqnetd group as a supplementary -> can add certificates, get state of the qnetd, ...
So basically qnetd admin role. Sadly I don't think there is portable concept of roles in various Un*xes, (closest is probably SELinux enabled Linux with MLS or Solaris) other than supplementary group.
Does it make sense? And if you have a better idea how to add qnetd admin role don't hesitate to share opinion/idea.",True,{}
corosync/corosync,https://github.com/corosync/corosync,337,2018-04-17T12:29:27Z,2018-08-09T14:46:17Z,2018-08-09T14:46:18Z,CLOSED,False,1,1,1,https://github.com/wferi,qnetd-certutil: fix format option name in stat invocation,1,[],https://github.com/corosync/corosync/pull/337,https://github.com/wferi,16,https://github.com/corosync/corosync/pull/337#issuecomment-383861195,"On my Debian machines -f is the short name for the --file-system option.
So this usage very much seems like a typo, especially before a format string.
This patch should apply to the split-out qdevice repository all the same.
Regards,
Feri.","@jfriesse, the confusing part is that corosync-qnetd.service suggests running the daemon as user coroqnetd, whose primary group is coroqnetd as well, but a daemon shouldn't be able to modify its own configuration for best security.",True,{}
corosync/corosync,https://github.com/corosync/corosync,337,2018-04-17T12:29:27Z,2018-08-09T14:46:17Z,2018-08-09T14:46:18Z,CLOSED,False,1,1,1,https://github.com/wferi,qnetd-certutil: fix format option name in stat invocation,1,[],https://github.com/corosync/corosync/pull/337,https://github.com/jfriesse,17,https://github.com/corosync/corosync/pull/337#issuecomment-411783481,"On my Debian machines -f is the short name for the --file-system option.
So this usage very much seems like a typo, especially before a format string.
This patch should apply to the split-out qdevice repository all the same.
Regards,
Feri.","@wferi I've finally got to this issue, so:

corosync/corosync-qdevice@b561a90 implements support for new NSS DB
corosync/corosync-qdevice@cb9ea58 describes conversion of NSS DB. I've decided not to add extra command/option, simply because during my testing it was not needed (new nss db loaded old format without problem and when anything was changed in DB it was autoconverted) - still it's nice to have it documented. It also describes workaround when ciphers are too old/short (I considering to work on some slightly better solution)
corosync/corosync-qdevice@4cd74c8 Is basically secure mode of database (+ description how it's intended to be used) - hopefully I understand correctly your suggestions, but basic idea is to set nssdb dir to root:coroqnetd with rwxr-x--- permissions (-x for files), so qnetd can read the files, but cannot write to them.

Thank you for the report and patience :)",True,{}
corosync/corosync,https://github.com/corosync/corosync,338,2018-04-18T13:42:00Z,2018-04-19T11:06:16Z,2018-04-19T11:08:09Z,CLOSED,False,1,1,1,https://github.com/jfriesse,totemsrp: Fix srp_addr_compare,1,[],https://github.com/corosync/corosync/pull/338,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/338,"There is regression caused by ""totem: Use nodeid ONLY in srp_addr"" patch
in srp_addr_compare function. This function should be usable with qsort,
so it should return values less than, equal to or greater than zero. It
was however returning only zero or negation of a zero. Final results
were unable to reach consensus in following test case:

3 node cluster
start nodes 1, 2, 3
shutdown node 3
start node 3
shutdown node 2
start node 2
shutdown node 1

After this steps, node 2 and 3 were unable to reach consensus.
Signed-off-by: Jan Friesse jfriesse@redhat.com","There is regression caused by ""totem: Use nodeid ONLY in srp_addr"" patch
in srp_addr_compare function. This function should be usable with qsort,
so it should return values less than, equal to or greater than zero. It
was however returning only zero or negation of a zero. Final results
were unable to reach consensus in following test case:

3 node cluster
start nodes 1, 2, 3
shutdown node 3
start node 3
shutdown node 2
start node 2
shutdown node 1

After this steps, node 2 and 3 were unable to reach consensus.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,338,2018-04-18T13:42:00Z,2018-04-19T11:06:16Z,2018-04-19T11:08:09Z,CLOSED,False,1,1,1,https://github.com/jfriesse,totemsrp: Fix srp_addr_compare,1,[],https://github.com/corosync/corosync/pull/338,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/338#issuecomment-382696336,"There is regression caused by ""totem: Use nodeid ONLY in srp_addr"" patch
in srp_addr_compare function. This function should be usable with qsort,
so it should return values less than, equal to or greater than zero. It
was however returning only zero or negation of a zero. Final results
were unable to reach consensus in following test case:

3 node cluster
start nodes 1, 2, 3
shutdown node 3
start node 3
shutdown node 2
start node 2
shutdown node 1

After this steps, node 2 and 3 were unable to reach consensus.
Signed-off-by: Jan Friesse jfriesse@redhat.com","@chrissie-c Patch was correct, but not safe (overflow), I'll send better version together with long pause after node leave solution.",True,{}
corosync/corosync,https://github.com/corosync/corosync,339,2018-04-19T08:53:53Z,2018-04-19T09:00:20Z,2018-04-19T09:42:18Z,CLOSED,False,1,1,1,https://github.com/liu4480,qdevice-net-instance.c: optarg should be str,1,[],https://github.com/corosync/corosync/pull/339,https://github.com/liu4480,1,https://github.com/corosync/corosync/pull/339,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,339,2018-04-19T08:53:53Z,2018-04-19T09:00:20Z,2018-04-19T09:42:18Z,CLOSED,False,1,1,1,https://github.com/liu4480,qdevice-net-instance.c: optarg should be str,1,[],https://github.com/corosync/corosync/pull/339,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/339#issuecomment-382662818,,"@liu4480 Really nice catch! ACK and merged as aeae35d (needle) and corosync/corosync-qdevice@5aaabea (corosync-qdevice)
Thank you for the patch.
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,340,2018-04-19T09:19:23Z,2018-04-20T13:20:22Z,2018-04-20T13:20:22Z,CLOSED,False,6,4,1,https://github.com/edwintorok,SECURITY: be consistent on the hash algorithm used,1,[],https://github.com/corosync/corosync/pull/340,https://github.com/edwintorok,1,https://github.com/corosync/corosync/pull/340,"The SECURITY doc mentioned both SHA1 and SHA256. Although this is configurable, the documentation should be consistent on what the default actually is.
By looking at the encrypt_and_sign function it used instance->crypto_hash_type which is set in totem_get_crypto, defaulting to sha1 if not overriden.
This pull request is for the needle branch, because on master encryption works completely different with knet.","The SECURITY doc mentioned both SHA1 and SHA256. Although this is configurable, the documentation should be consistent on what the default actually is.
By looking at the encrypt_and_sign function it used instance->crypto_hash_type which is set in totem_get_crypto, defaulting to sha1 if not overriden.
This pull request is for the needle branch, because on master encryption works completely different with knet.",True,{}
corosync/corosync,https://github.com/corosync/corosync,340,2018-04-19T09:19:23Z,2018-04-20T13:20:22Z,2018-04-20T13:20:22Z,CLOSED,False,6,4,1,https://github.com/edwintorok,SECURITY: be consistent on the hash algorithm used,1,[],https://github.com/corosync/corosync/pull/340,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/340#issuecomment-383093557,"The SECURITY doc mentioned both SHA1 and SHA256. Although this is configurable, the documentation should be consistent on what the default actually is.
By looking at the encrypt_and_sign function it used instance->crypto_hash_type which is set in totem_get_crypto, defaulting to sha1 if not overriden.
This pull request is for the needle branch, because on master encryption works completely different with knet.","@edwintorok Nice catch and patch, so ACK and merged as 25f6b0f.
Thank you for the patch!
Honza",True,{'THUMBS_UP': ['https://github.com/edwintorok']}
corosync/corosync,https://github.com/corosync/corosync,341,2018-04-19T11:15:15Z,2018-04-23T15:47:53Z,2018-04-23T15:49:08Z,CLOSED,False,39,22,1,https://github.com/jfriesse,Fix alpha-2 regressions,3,[],https://github.com/corosync/corosync/pull/341,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/341,"Better version of #338 and fix for leave node timeout.
Please check last patch (b3cdc1d)  very carefully, because eventho I was trying really hard to understand original patch 69ff770 (It's from 2009) and ab8942f (which improved logging a lot), I may overlook something.","Better version of #338 and fix for leave node timeout.
Please check last patch (b3cdc1d)  very carefully, because eventho I was trying really hard to understand original patch 69ff770 (It's from 2009) and ab8942f (which improved logging a lot), I may overlook something.",True,{}
corosync/corosync,https://github.com/corosync/corosync,341,2018-04-19T11:15:15Z,2018-04-23T15:47:53Z,2018-04-23T15:49:08Z,CLOSED,False,39,22,1,https://github.com/jfriesse,Fix alpha-2 regressions,3,[],https://github.com/corosync/corosync/pull/341,https://github.com/chrissie-c,2,https://github.com/corosync/corosync/pull/341#issuecomment-383588790,"Better version of #338 and fix for leave node timeout.
Please check last patch (b3cdc1d)  very carefully, because eventho I was trying really hard to understand original patch 69ff770 (It's from 2009) and ab8942f (which improved logging a lot), I may overlook something.",ACK. I've been through looking at and testing the old code and it behaves in the same way as the thing I thought might have been dodgy here. So my concerns have been allayed.,True,{}
corosync/corosync,https://github.com/corosync/corosync,341,2018-04-19T11:15:15Z,2018-04-23T15:47:53Z,2018-04-23T15:49:08Z,CLOSED,False,39,22,1,https://github.com/jfriesse,Fix alpha-2 regressions,3,[],https://github.com/corosync/corosync/pull/341,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/341#issuecomment-383624266,"Better version of #338 and fix for leave node timeout.
Please check last patch (b3cdc1d)  very carefully, because eventho I was trying really hard to understand original patch 69ff770 (It's from 2009) and ab8942f (which improved logging a lot), I may overlook something.",@chrissie-c Thank you for the review! I've merged patches as 9b3782e..e45bbcc .,True,{}
corosync/corosync,https://github.com/corosync/corosync,342,2018-04-20T07:41:05Z,2018-04-20T10:14:46Z,2018-04-20T12:51:20Z,CLOSED,False,8,8,5,https://github.com/wferi,Typo fixes,2,[],https://github.com/corosync/corosync/pull/342,https://github.com/wferi,1,https://github.com/corosync/corosync/pull/342,"Part of this applies to master and the split-out qdevices repo as well.
Would you like separate pull request for those?
Regards,
Feri.","Part of this applies to master and the split-out qdevices repo as well.
Would you like separate pull request for those?
Regards,
Feri.",True,{}
corosync/corosync,https://github.com/corosync/corosync,342,2018-04-20T07:41:05Z,2018-04-20T10:14:46Z,2018-04-20T12:51:20Z,CLOSED,False,8,8,5,https://github.com/wferi,Typo fixes,2,[],https://github.com/corosync/corosync/pull/342,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/342#issuecomment-383052087,"Part of this applies to master and the split-out qdevices repo as well.
Would you like separate pull request for those?
Regards,
Feri.","@wferi Nice catch, good patch, so ACK. I believe I was able to put patches where they should be :), so merged as:
Needle - 3487656, 5f6de64
Master - baece74, 83c3f62
Qdevice master - corosync/corosync-qdevice@fdbbe72
Thank you for the patches!
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,343,2018-04-20T07:47:25Z,2018-04-20T10:20:58Z,2018-04-20T12:50:14Z,CLOSED,False,3,3,3,https://github.com/wferi,"NSS_NoDB_Init: the parameter is reserved, must be NULL",1,[],https://github.com/corosync/corosync/pull/343,https://github.com/wferi,1,https://github.com/corosync/corosync/pull/343,"This does not make an actual difference, because the current implementation of NSS_NoDB_Init() simply ignores the passed parameter. However, the documentation says it should be NULL. I notice that even official code samples use ""."" occasionally, but I don't see the point :)","This does not make an actual difference, because the current implementation of NSS_NoDB_Init() simply ignores the passed parameter. However, the documentation says it should be NULL. I notice that even official code samples use ""."" occasionally, but I don't see the point :)",True,{}
corosync/corosync,https://github.com/corosync/corosync,343,2018-04-20T07:47:25Z,2018-04-20T10:20:58Z,2018-04-20T12:50:14Z,CLOSED,False,3,3,3,https://github.com/wferi,"NSS_NoDB_Init: the parameter is reserved, must be NULL",1,[],https://github.com/corosync/corosync/pull/343,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/343#issuecomment-383053591,"This does not make an actual difference, because the current implementation of NSS_NoDB_Init() simply ignores the passed parameter. However, the documentation says it should be NULL. I notice that even official code samples use ""."" occasionally, but I don't see the point :)","@wferi Yep, agree (it's used in qdevice without any issues). so ACK and merged as 67c644e and 185bc5b.",True,{}
corosync/corosync,https://github.com/corosync/corosync,343,2018-04-20T07:47:25Z,2018-04-20T10:20:58Z,2018-04-20T12:50:14Z,CLOSED,False,3,3,3,https://github.com/wferi,"NSS_NoDB_Init: the parameter is reserved, must be NULL",1,[],https://github.com/corosync/corosync/pull/343,https://github.com/fabbione,3,https://github.com/corosync/corosync/pull/343#issuecomment-383081924,"This does not make an actual difference, because the current implementation of NSS_NoDB_Init() simply ignores the passed parameter. However, the documentation says it should be NULL. I notice that even official code samples use ""."" occasionally, but I don't see the point :)",fixing in knet as well. good catch.,True,{}
corosync/corosync,https://github.com/corosync/corosync,343,2018-04-20T07:47:25Z,2018-04-20T10:20:58Z,2018-04-20T12:50:14Z,CLOSED,False,3,3,3,https://github.com/wferi,"NSS_NoDB_Init: the parameter is reserved, must be NULL",1,[],https://github.com/corosync/corosync/pull/343,https://github.com/wferi,4,https://github.com/corosync/corosync/pull/343#issuecomment-383085508,"This does not make an actual difference, because the current implementation of NSS_NoDB_Init() simply ignores the passed parameter. However, the documentation says it should be NULL. I notice that even official code samples use ""."" occasionally, but I don't see the point :)","Thanks, guys!",True,{}
corosync/corosync,https://github.com/corosync/corosync,344,2018-04-20T15:17:03Z,2018-04-23T09:31:18Z,2018-04-23T17:23:34Z,CLOSED,False,1,1,1,https://github.com/wferi,tools: don't distribute what we can easily make,1,[],https://github.com/corosync/corosync/pull/344,https://github.com/wferi,1,https://github.com/corosync/corosync/pull/344,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,344,2018-04-20T15:17:03Z,2018-04-23T09:31:18Z,2018-04-23T17:23:34Z,CLOSED,False,1,1,1,https://github.com/wferi,tools: don't distribute what we can easily make,1,[],https://github.com/corosync/corosync/pull/344,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/344#issuecomment-383513705,,"@wferi Good catch, nice patch so ACK and merged as 21b8081 and c832174.
Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,345,2018-04-21T06:16:34Z,2018-04-25T13:28:33Z,2018-04-25T18:57:42Z,CLOSED,False,3,1,1,https://github.com/lamby,Please make the manpages reproducible,1,[],https://github.com/corosync/corosync/pull/345,https://github.com/lamby,1,https://github.com/corosync/corosync/pull/345,"Whilst working on the Reproducible Builds effort, we noticed that corosync could not be built reproducibly.
This is because, whilst it uses SOURCE_DATE_EPOCH, the output varies depending on the current timezone.
This was originally filed in Debian as #896441.","Whilst working on the Reproducible Builds effort, we noticed that corosync could not be built reproducibly.
This is because, whilst it uses SOURCE_DATE_EPOCH, the output varies depending on the current timezone.
This was originally filed in Debian as #896441.",True,{}
corosync/corosync,https://github.com/corosync/corosync,345,2018-04-21T06:16:34Z,2018-04-25T13:28:33Z,2018-04-25T18:57:42Z,CLOSED,False,3,1,1,https://github.com/lamby,Please make the manpages reproducible,1,[],https://github.com/corosync/corosync/pull/345,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/345#issuecomment-383271157,"Whilst working on the Reproducible Builds effort, we noticed that corosync could not be built reproducibly.
This is because, whilst it uses SOURCE_DATE_EPOCH, the output varies depending on the current timezone.
This was originally filed in Debian as #896441.",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,345,2018-04-21T06:16:34Z,2018-04-25T13:28:33Z,2018-04-25T18:57:42Z,CLOSED,False,3,1,1,https://github.com/lamby,Please make the manpages reproducible,1,[],https://github.com/corosync/corosync/pull/345,https://github.com/wferi,3,https://github.com/corosync/corosync/pull/345#issuecomment-383273825,"Whilst working on the Reproducible Builds effort, we noticed that corosync could not be built reproducibly.
This is because, whilst it uses SOURCE_DATE_EPOCH, the output varies depending on the current timezone.
This was originally filed in Debian as #896441.","Thanks, Chris, absolutely true, I omitted this from 14d251d by mistake. I vote for merging this fix.
Aside: this won't work on BSD, even the current code wouldn't: the -u and -d options are specific to GNU date. It isn't apparent in CI because Jenkins does not export SOURCE_DATE_EPOCH. An ad-hoc solution is given at https://wiki.debian.org/ReproducibleBuilds/TimestampsProposal#Bash_.2F_POSIX_shell, a more elaborate one in kronosnet/kronosnet#143. I'm willing to put something together along those lines if the project lead agrees.",True,{}
corosync/corosync,https://github.com/corosync/corosync,345,2018-04-21T06:16:34Z,2018-04-25T13:28:33Z,2018-04-25T18:57:42Z,CLOSED,False,3,1,1,https://github.com/lamby,Please make the manpages reproducible,1,[],https://github.com/corosync/corosync/pull/345,https://github.com/lamby,4,https://github.com/corosync/corosync/pull/345#issuecomment-383275186,"Whilst working on the Reproducible Builds effort, we noticed that corosync could not be built reproducibly.
This is because, whilst it uses SOURCE_DATE_EPOCH, the output varies depending on the current timezone.
This was originally filed in Debian as #896441.",👍  :),True,{}
corosync/corosync,https://github.com/corosync/corosync,345,2018-04-21T06:16:34Z,2018-04-25T13:28:33Z,2018-04-25T18:57:42Z,CLOSED,False,3,1,1,https://github.com/lamby,Please make the manpages reproducible,1,[],https://github.com/corosync/corosync/pull/345,https://github.com/fabbione,5,https://github.com/corosync/corosync/pull/345#issuecomment-383297534,"Whilst working on the Reproducible Builds effort, we noticed that corosync could not be built reproducibly.
This is because, whilst it uses SOURCE_DATE_EPOCH, the output varies depending on the current timezone.
This was originally filed in Debian as #896441.","Feri, corosync and knet do share a great deal of code and build facilities around (beside it´s the same people managing the 2 projects ;) ). There is a good 90% chance that a bug in one build system affects the other ;) I think it´s fine to port the knet patch to corosync,",True,{}
corosync/corosync,https://github.com/corosync/corosync,345,2018-04-21T06:16:34Z,2018-04-25T13:28:33Z,2018-04-25T18:57:42Z,CLOSED,False,3,1,1,https://github.com/lamby,Please make the manpages reproducible,1,[],https://github.com/corosync/corosync/pull/345,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/345#issuecomment-383518601,"Whilst working on the Reproducible Builds effort, we noticed that corosync could not be built reproducibly.
This is because, whilst it uses SOURCE_DATE_EPOCH, the output varies depending on the current timezone.
This was originally filed in Debian as #896441.","@wferi: -u seems to be supported in Free/Net/OpenBSD (I don't think we really care about other implementations).
Because current code is using -d it's not compatible with BSD systems, so patch is not making things worse.
I have a question. Is there anything bad on  An ad-hoc solution is given at https://wiki.debian.org/ReproducibleBuilds/TimestampsProposal#Bash_.2F_POSIX_shell? It looks like quite simple compared to ax_prog_date.m4.",True,{}
corosync/corosync,https://github.com/corosync/corosync,345,2018-04-21T06:16:34Z,2018-04-25T13:28:33Z,2018-04-25T18:57:42Z,CLOSED,False,3,1,1,https://github.com/lamby,Please make the manpages reproducible,1,[],https://github.com/corosync/corosync/pull/345,https://github.com/lamby,7,https://github.com/corosync/corosync/pull/345#issuecomment-383538153,"Whilst working on the Reproducible Builds effort, we noticed that corosync could not be built reproducibly.
This is because, whilst it uses SOURCE_DATE_EPOCH, the output varies depending on the current timezone.
This was originally filed in Debian as #896441.","I have a question. Is there anything bad on An ad-hoc solution is given at https://wiki.debian.org/ReproducibleBuilds/TimestampsProposal#Bash_.2F_POSIX_shell? It looks like quite simple compared to ax_prog_date.m4.

Can't parse this, sorry. Can you help? :)",True,{}
corosync/corosync,https://github.com/corosync/corosync,345,2018-04-21T06:16:34Z,2018-04-25T13:28:33Z,2018-04-25T18:57:42Z,CLOSED,False,3,1,1,https://github.com/lamby,Please make the manpages reproducible,1,[],https://github.com/corosync/corosync/pull/345,https://github.com/jfriesse,8,https://github.com/corosync/corosync/pull/345#issuecomment-383539202,"Whilst working on the Reproducible Builds effort, we noticed that corosync could not be built reproducibly.
This is because, whilst it uses SOURCE_DATE_EPOCH, the output varies depending on the current timezone.
This was originally filed in Debian as #896441.","@lamby Yep.
Is anything bad on solution described in the link https://wiki.debian.org/ReproducibleBuilds/TimestampsProposal#Bash_.2F_POSIX_shell?
Or other way around. What advantages has using the ax_prog_date.m4 instead of solution described in the debian wiki link?",True,{}
corosync/corosync,https://github.com/corosync/corosync,345,2018-04-21T06:16:34Z,2018-04-25T13:28:33Z,2018-04-25T18:57:42Z,CLOSED,False,3,1,1,https://github.com/lamby,Please make the manpages reproducible,1,[],https://github.com/corosync/corosync/pull/345,https://github.com/wferi,9,https://github.com/corosync/corosync/pull/345#issuecomment-383544063,"Whilst working on the Reproducible Builds effort, we noticed that corosync could not be built reproducibly.
This is because, whilst it uses SOURCE_DATE_EPOCH, the output varies depending on the current timezone.
This was originally filed in Debian as #896441.","I don't think there's anything bad with it if you only use it once. If you want to use the date utility several times at different locations, then doing the checks once starts to make sense.",True,{}
corosync/corosync,https://github.com/corosync/corosync,345,2018-04-21T06:16:34Z,2018-04-25T13:28:33Z,2018-04-25T18:57:42Z,CLOSED,False,3,1,1,https://github.com/lamby,Please make the manpages reproducible,1,[],https://github.com/corosync/corosync/pull/345,https://github.com/jfriesse,10,https://github.com/corosync/corosync/pull/345#issuecomment-383625606,"Whilst working on the Reproducible Builds effort, we noticed that corosync could not be built reproducibly.
This is because, whilst it uses SOURCE_DATE_EPOCH, the output varies depending on the current timezone.
This was originally filed in Debian as #896441.","@wferi Ok, thank you for the reply. So I would say that because we have only one place where date is called we can stick with solution@debian wiki.
@lamby Would you mind to rework your patch in a way stated at https://wiki.debian.org/ReproducibleBuilds/TimestampsProposal#Bash_.2F_POSIX_shell ?",True,{}
corosync/corosync,https://github.com/corosync/corosync,345,2018-04-21T06:16:34Z,2018-04-25T13:28:33Z,2018-04-25T18:57:42Z,CLOSED,False,3,1,1,https://github.com/lamby,Please make the manpages reproducible,1,[],https://github.com/corosync/corosync/pull/345,https://github.com/lamby,11,https://github.com/corosync/corosync/pull/345#issuecomment-383631755,"Whilst working on the Reproducible Builds effort, we noticed that corosync could not be built reproducibly.
This is because, whilst it uses SOURCE_DATE_EPOCH, the output varies depending on the current timezone.
This was originally filed in Debian as #896441.",@jfriesse Done :),True,{}
corosync/corosync,https://github.com/corosync/corosync,345,2018-04-21T06:16:34Z,2018-04-25T13:28:33Z,2018-04-25T18:57:42Z,CLOSED,False,3,1,1,https://github.com/lamby,Please make the manpages reproducible,1,[],https://github.com/corosync/corosync/pull/345,https://github.com/jfriesse,12,https://github.com/corosync/corosync/pull/345#issuecomment-384286291,"Whilst working on the Reproducible Builds effort, we noticed that corosync could not be built reproducibly.
This is because, whilst it uses SOURCE_DATE_EPOCH, the output varies depending on the current timezone.
This was originally filed in Debian as #896441.","@lamby: Nice patch so ACK and merged as 82b8199 (master) and 06ef44f (needle).
Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,345,2018-04-21T06:16:34Z,2018-04-25T13:28:33Z,2018-04-25T18:57:42Z,CLOSED,False,3,1,1,https://github.com/lamby,Please make the manpages reproducible,1,[],https://github.com/corosync/corosync/pull/345,https://github.com/lamby,13,https://github.com/corosync/corosync/pull/345#issuecomment-384397321,"Whilst working on the Reproducible Builds effort, we noticed that corosync could not be built reproducibly.
This is because, whilst it uses SOURCE_DATE_EPOCH, the output varies depending on the current timezone.
This was originally filed in Debian as #896441.",Thanks :),True,{}
corosync/corosync,https://github.com/corosync/corosync,346,2018-04-23T03:32:50Z,2018-04-23T06:07:09Z,2018-04-23T06:07:59Z,CLOSED,False,3,7,3,https://github.com/fabbione,Drop all references to SECURITY file removed by 6bdf0962ad035ac659bcb…,1,[],https://github.com/corosync/corosync/pull/346,https://github.com/fabbione,1,https://github.com/corosync/corosync/pull/346,"…f36a918fe39931ed75d
and fix master branch build again.
Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com","…f36a918fe39931ed75d
and fix master branch build again.
Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,346,2018-04-23T03:32:50Z,2018-04-23T06:07:09Z,2018-04-23T06:07:59Z,CLOSED,False,3,7,3,https://github.com/fabbione,Drop all references to SECURITY file removed by 6bdf0962ad035ac659bcb…,1,[],https://github.com/corosync/corosync/pull/346,https://github.com/fabbione,2,https://github.com/corosync/corosync/pull/346#issuecomment-383445629,"…f36a918fe39931ed75d
and fix master branch build again.
Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com",retest this please,True,{}
corosync/corosync,https://github.com/corosync/corosync,346,2018-04-23T03:32:50Z,2018-04-23T06:07:09Z,2018-04-23T06:07:59Z,CLOSED,False,3,7,3,https://github.com/fabbione,Drop all references to SECURITY file removed by 6bdf0962ad035ac659bcb…,1,[],https://github.com/corosync/corosync/pull/346,https://github.com/fabbione,3,https://github.com/corosync/corosync/pull/346#issuecomment-383448300,"…f36a918fe39931ed75d
and fix master branch build again.
Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com",First appearance of the failure: https://ci.kronosnet.org/job/corosync-build-all-voting/245/,True,{}
corosync/corosync,https://github.com/corosync/corosync,346,2018-04-23T03:32:50Z,2018-04-23T06:07:09Z,2018-04-23T06:07:59Z,CLOSED,False,3,7,3,https://github.com/fabbione,Drop all references to SECURITY file removed by 6bdf0962ad035ac659bcb…,1,[],https://github.com/corosync/corosync/pull/346,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/346#issuecomment-383464654,"…f36a918fe39931ed75d
and fix master branch build again.
Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com","@fabbione Nice patch, ACK and merged as 94dff3b.
Thank you for the fix.",True,{}
corosync/corosync,https://github.com/corosync/corosync,347,2018-04-24T16:26:43Z,2018-04-30T12:42:14Z,2018-04-30T12:42:42Z,CLOSED,False,11,153,1,https://github.com/jfriesse,cpg: Inform clients about left nodes during pause,1,[],https://github.com/corosync/corosync/pull/347,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/347,"Patch tries to fix incorrect behaviour during following test-case:

3 nodes
Node 1 is paused
Node 2 and 3 detects node 1 as failed and informs CPG clients
Node 1 is unpaused
Node 1 clients are informed about new membership, but not about Node 1
being paused, so from Node 1 point-of-view, Node 2 and 3 failure

Solution is to:

Remove downlist master choose and always choose local node downlist.
For Node 1 in example above, downlist contains Node 2 and 3.
Keep code which informs clients about left nodes
Use joinlist as a authoritative source of nodes/clients which exists
in membership

This patch doesn't break backwards compatibility.
I've walked thru all the patches which changed behavior of cpg to ensure
patch does not break CPG behavior. Most important were:

058f503 - Base. Code was significantly
changed to handle double free by split group_info into two structures
cpg_pd (local node clients) and process_info (all clients). Joinlist
was
97c28ea - This patch removed
confchg_fn and made CPG sync correct
feff0e8 - I've tested described
behavior without any issues
6bbbfcb - Added idea of using
heuristics to choose same downlist on all nodes. Sadly this idea
was beginning of the problems described in
040fda8,
ac1d79e,
559d408,
02c5dff,
64d0e5a and
b55f32f
02c5dff - Made joinlist as
authoritative source of nodes/clients but left downlist_master_choose
as a source of information about left nodes

Long story made short. This patch basically reverts
idea of using heuristics to choose same downlist on all nodes.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Patch tries to fix incorrect behaviour during following test-case:

3 nodes
Node 1 is paused
Node 2 and 3 detects node 1 as failed and informs CPG clients
Node 1 is unpaused
Node 1 clients are informed about new membership, but not about Node 1
being paused, so from Node 1 point-of-view, Node 2 and 3 failure

Solution is to:

Remove downlist master choose and always choose local node downlist.
For Node 1 in example above, downlist contains Node 2 and 3.
Keep code which informs clients about left nodes
Use joinlist as a authoritative source of nodes/clients which exists
in membership

This patch doesn't break backwards compatibility.
I've walked thru all the patches which changed behavior of cpg to ensure
patch does not break CPG behavior. Most important were:

058f503 - Base. Code was significantly
changed to handle double free by split group_info into two structures
cpg_pd (local node clients) and process_info (all clients). Joinlist
was
97c28ea - This patch removed
confchg_fn and made CPG sync correct
feff0e8 - I've tested described
behavior without any issues
6bbbfcb - Added idea of using
heuristics to choose same downlist on all nodes. Sadly this idea
was beginning of the problems described in
040fda8,
ac1d79e,
559d408,
02c5dff,
64d0e5a and
b55f32f
02c5dff - Made joinlist as
authoritative source of nodes/clients but left downlist_master_choose
as a source of information about left nodes

Long story made short. This patch basically reverts
idea of using heuristics to choose same downlist on all nodes.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,347,2018-04-24T16:26:43Z,2018-04-30T12:42:14Z,2018-04-30T12:42:42Z,CLOSED,False,11,153,1,https://github.com/jfriesse,cpg: Inform clients about left nodes during pause,1,[],https://github.com/corosync/corosync/pull/347,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/347#issuecomment-385387224,"Patch tries to fix incorrect behaviour during following test-case:

3 nodes
Node 1 is paused
Node 2 and 3 detects node 1 as failed and informs CPG clients
Node 1 is unpaused
Node 1 clients are informed about new membership, but not about Node 1
being paused, so from Node 1 point-of-view, Node 2 and 3 failure

Solution is to:

Remove downlist master choose and always choose local node downlist.
For Node 1 in example above, downlist contains Node 2 and 3.
Keep code which informs clients about left nodes
Use joinlist as a authoritative source of nodes/clients which exists
in membership

This patch doesn't break backwards compatibility.
I've walked thru all the patches which changed behavior of cpg to ensure
patch does not break CPG behavior. Most important were:

058f503 - Base. Code was significantly
changed to handle double free by split group_info into two structures
cpg_pd (local node clients) and process_info (all clients). Joinlist
was
97c28ea - This patch removed
confchg_fn and made CPG sync correct
feff0e8 - I've tested described
behavior without any issues
6bbbfcb - Added idea of using
heuristics to choose same downlist on all nodes. Sadly this idea
was beginning of the problems described in
040fda8,
ac1d79e,
559d408,
02c5dff,
64d0e5a and
b55f32f
02c5dff - Made joinlist as
authoritative source of nodes/clients but left downlist_master_choose
as a source of information about left nodes

Long story made short. This patch basically reverts
idea of using heuristics to choose same downlist on all nodes.
Signed-off-by: Jan Friesse jfriesse@redhat.com","@chrissie-c Thank you a lot for the review (I know how hard this one was)!
I've merged patch into needle as 9c2a97f and ported also to master as 23e1795.
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,349,2018-05-02T13:24:49Z,2018-07-02T06:15:12Z,2018-07-02T06:27:42Z,CLOSED,False,23,40,6,https://github.com/jfriesse,Various fixes,3,[],https://github.com/corosync/corosync/pull/349,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/349,"Remove notifyd upstart unit
Allow change of corosync options in /etc/sysconfig/corosync file
Fix snprintf warnings found using Fedora Rawhide gcc","Remove notifyd upstart unit
Allow change of corosync options in /etc/sysconfig/corosync file
Fix snprintf warnings found using Fedora Rawhide gcc",True,{}
corosync/corosync,https://github.com/corosync/corosync,349,2018-05-02T13:24:49Z,2018-07-02T06:15:12Z,2018-07-02T06:27:42Z,CLOSED,False,23,40,6,https://github.com/jfriesse,Various fixes,3,[],https://github.com/corosync/corosync/pull/349,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/349#issuecomment-401682568,"Remove notifyd upstart unit
Allow change of corosync options in /etc/sysconfig/corosync file
Fix snprintf warnings found using Fedora Rawhide gcc","@chrissie-c Thank you for the review.
$COROSYNC_OPTIONS is quite simple. In the service unit file we've used $OPTIONS variable, but such variable was not defined in the /etc/sysconfig/corosync, where $COROSYNC_OPTIONS was used instead.
Merged as 0031822, fc45968 and cc81696.",True,{}
corosync/corosync,https://github.com/corosync/corosync,350,2018-05-04T09:41:33Z,2018-07-02T06:02:58Z,2018-07-02T06:02:59Z,CLOSED,False,11,6,1,https://github.com/chrissie-c,knet: Misc fixes,2,[],https://github.com/corosync/corosync/pull/350,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/350,"knet sends log messages as struct knet_log_msg, not a string
of KNET_MAX_LOG_MSG_SIZE (which is only part of that structure).
So we were both losing and corrupting messages.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","knet sends log messages as struct knet_log_msg, not a string
of KNET_MAX_LOG_MSG_SIZE (which is only part of that structure).
So we were both losing and corrupting messages.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,350,2018-05-04T09:41:33Z,2018-07-02T06:02:58Z,2018-07-02T06:02:59Z,CLOSED,False,11,6,1,https://github.com/chrissie-c,knet: Misc fixes,2,[],https://github.com/corosync/corosync/pull/350,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/350#issuecomment-401680749,"knet sends log messages as struct knet_log_msg, not a string
of KNET_MAX_LOG_MSG_SIZE (which is only part of that structure).
So we were both losing and corrupting messages.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","@chrissie-c Nice patches, so ACK and merged as 5dda71a and 137b313.",True,{}
corosync/corosync,https://github.com/corosync/corosync,353,2018-05-15T13:57:38Z,2018-07-02T07:55:51Z,2018-07-02T07:55:51Z,CLOSED,False,37,0,1,https://github.com/chrissie-c,totemconfig: Check for things that cannot be changed on the fly,1,[],https://github.com/corosync/corosync/pull/353,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/353,"There are a few things in the interface that cannot be changed on the
fly. Warn about them and tell the user that these things need to be done
in two steps and why.","There are a few things in the interface that cannot be changed on the
fly. Warn about them and tell the user that these things need to be done
in two steps and why.",True,{}
corosync/corosync,https://github.com/corosync/corosync,353,2018-05-15T13:57:38Z,2018-07-02T07:55:51Z,2018-07-02T07:55:51Z,CLOSED,False,37,0,1,https://github.com/chrissie-c,totemconfig: Check for things that cannot be changed on the fly,1,[],https://github.com/corosync/corosync/pull/353,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/353#issuecomment-401702389,"There are a few things in the interface that cannot be changed on the
fly. Warn about them and tell the user that these things need to be done
in two steps and why.","@chrissie-c More checking of user entered data is always good, so ACK and merged as 429209f
Thank you for the patch,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,356,2018-06-12T10:22:02Z,2018-07-03T10:39:47Z,2018-07-03T10:40:12Z,CLOSED,False,39,0,1,https://github.com/chrissie-c,config: Check for more config errors in multi-link clusters,2,[],https://github.com/corosync/corosync/pull/356,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/356,"If the any node does not have a 'name' attribute and the cluster
has more than one link then fail the validation test.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","If the any node does not have a 'name' attribute and the cluster
has more than one link then fail the validation test.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,356,2018-06-12T10:22:02Z,2018-07-03T10:39:47Z,2018-07-03T10:40:12Z,CLOSED,False,39,0,1,https://github.com/chrissie-c,config: Check for more config errors in multi-link clusters,2,[],https://github.com/corosync/corosync/pull/356,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/356#issuecomment-402102448,"If the any node does not have a 'name' attribute and the cluster
has more than one link then fail the validation test.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","@chrissie-c Nice patches, so ACK and merged (I've just changed 2 small typos in description, more specifically nore -> more and onelink -> one link) as d1db8c2 and a471bab.
Thank you for the patches,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,359,2018-07-06T15:49:18Z,2018-07-12T13:59:42Z,2018-07-18T08:48:12Z,CLOSED,False,24,1,1,https://github.com/gaborigloi,Send msgs to ourselves via localhost when in loopback mode,1,[],https://github.com/corosync/corosync/pull/359,https://github.com/gaborigloi,1,https://github.com/corosync/corosync/pull/359,"Whenever the interface went down, or the interface lost the IP, the
loopback mode was not working - it was still sending messages to its own
IP, and listening on loopback, so it would never receive its own
messages.
Corosync in UDPU mode would realise it has lost contact to everyone else
when an interface is taken down or the IP address lost, but would fail
to form a new membership because it was not even able to talk to itself.
This is dangerous because there could be another interface or path to
the storage still up and might corrupt GFS2 data. When the interface
got brought up corosync would then dump core with an assertion failure.
This is a well known problem, see
https://bugzilla.redhat.com/show_bug.cgi?id=1397923 and
https://bugzilla.redhat.com/show_bug.cgi?id=989934.
This patch ensures that we send messages to localhost in this case,
instead of our IP, both for unicast and multicast messages (both
these changes are necessary for it to work).
After this patch corosync will be able to talk to itself (which is what
the intent of the loopback mode seems to have been), form a new
membership just with itself, see that it doesn't have quorum and
eventually SBD will fence the node as it should.
All credit goes to @edwintorok for finding the cause of this issue and
the solution.
Signed-off-by: Gabor Igloi gabor.igloi@citrix.com","Whenever the interface went down, or the interface lost the IP, the
loopback mode was not working - it was still sending messages to its own
IP, and listening on loopback, so it would never receive its own
messages.
Corosync in UDPU mode would realise it has lost contact to everyone else
when an interface is taken down or the IP address lost, but would fail
to form a new membership because it was not even able to talk to itself.
This is dangerous because there could be another interface or path to
the storage still up and might corrupt GFS2 data. When the interface
got brought up corosync would then dump core with an assertion failure.
This is a well known problem, see
https://bugzilla.redhat.com/show_bug.cgi?id=1397923 and
https://bugzilla.redhat.com/show_bug.cgi?id=989934.
This patch ensures that we send messages to localhost in this case,
instead of our IP, both for unicast and multicast messages (both
these changes are necessary for it to work).
After this patch corosync will be able to talk to itself (which is what
the intent of the loopback mode seems to have been), form a new
membership just with itself, see that it doesn't have quorum and
eventually SBD will fence the node as it should.
All credit goes to @edwintorok for finding the cause of this issue and
the solution.
Signed-off-by: Gabor Igloi gabor.igloi@citrix.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,359,2018-07-06T15:49:18Z,2018-07-12T13:59:42Z,2018-07-18T08:48:12Z,CLOSED,False,24,1,1,https://github.com/gaborigloi,Send msgs to ourselves via localhost when in loopback mode,1,[],https://github.com/corosync/corosync/pull/359,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/359#issuecomment-403072860,"Whenever the interface went down, or the interface lost the IP, the
loopback mode was not working - it was still sending messages to its own
IP, and listening on loopback, so it would never receive its own
messages.
Corosync in UDPU mode would realise it has lost contact to everyone else
when an interface is taken down or the IP address lost, but would fail
to form a new membership because it was not even able to talk to itself.
This is dangerous because there could be another interface or path to
the storage still up and might corrupt GFS2 data. When the interface
got brought up corosync would then dump core with an assertion failure.
This is a well known problem, see
https://bugzilla.redhat.com/show_bug.cgi?id=1397923 and
https://bugzilla.redhat.com/show_bug.cgi?id=989934.
This patch ensures that we send messages to localhost in this case,
instead of our IP, both for unicast and multicast messages (both
these changes are necessary for it to work).
After this patch corosync will be able to talk to itself (which is what
the intent of the loopback mode seems to have been), form a new
membership just with itself, see that it doesn't have quorum and
eventually SBD will fence the node as it should.
All credit goes to @edwintorok for finding the cause of this issue and
the solution.
Signed-off-by: Gabor Igloi gabor.igloi@citrix.com",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,359,2018-07-06T15:49:18Z,2018-07-12T13:59:42Z,2018-07-18T08:48:12Z,CLOSED,False,24,1,1,https://github.com/gaborigloi,Send msgs to ourselves via localhost when in loopback mode,1,[],https://github.com/corosync/corosync/pull/359,https://github.com/chrissie-c,3,https://github.com/corosync/corosync/pull/359#issuecomment-403742231,"Whenever the interface went down, or the interface lost the IP, the
loopback mode was not working - it was still sending messages to its own
IP, and listening on loopback, so it would never receive its own
messages.
Corosync in UDPU mode would realise it has lost contact to everyone else
when an interface is taken down or the IP address lost, but would fail
to form a new membership because it was not even able to talk to itself.
This is dangerous because there could be another interface or path to
the storage still up and might corrupt GFS2 data. When the interface
got brought up corosync would then dump core with an assertion failure.
This is a well known problem, see
https://bugzilla.redhat.com/show_bug.cgi?id=1397923 and
https://bugzilla.redhat.com/show_bug.cgi?id=989934.
This patch ensures that we send messages to localhost in this case,
instead of our IP, both for unicast and multicast messages (both
these changes are necessary for it to work).
After this patch corosync will be able to talk to itself (which is what
the intent of the loopback mode seems to have been), form a new
membership just with itself, see that it doesn't have quorum and
eventually SBD will fence the node as it should.
All credit goes to @edwintorok for finding the cause of this issue and
the solution.
Signed-off-by: Gabor Igloi gabor.igloi@citrix.com","I'm basically in favour of this patch. I know we always say ""don't do ifdown"" but fundamentally, it shouldn't break your cluster quite this badly if you do.",True,{}
corosync/corosync,https://github.com/corosync/corosync,359,2018-07-06T15:49:18Z,2018-07-12T13:59:42Z,2018-07-18T08:48:12Z,CLOSED,False,24,1,1,https://github.com/gaborigloi,Send msgs to ourselves via localhost when in loopback mode,1,[],https://github.com/corosync/corosync/pull/359,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/359#issuecomment-403760247,"Whenever the interface went down, or the interface lost the IP, the
loopback mode was not working - it was still sending messages to its own
IP, and listening on loopback, so it would never receive its own
messages.
Corosync in UDPU mode would realise it has lost contact to everyone else
when an interface is taken down or the IP address lost, but would fail
to form a new membership because it was not even able to talk to itself.
This is dangerous because there could be another interface or path to
the storage still up and might corrupt GFS2 data. When the interface
got brought up corosync would then dump core with an assertion failure.
This is a well known problem, see
https://bugzilla.redhat.com/show_bug.cgi?id=1397923 and
https://bugzilla.redhat.com/show_bug.cgi?id=989934.
This patch ensures that we send messages to localhost in this case,
instead of our IP, both for unicast and multicast messages (both
these changes are necessary for it to work).
After this patch corosync will be able to talk to itself (which is what
the intent of the loopback mode seems to have been), form a new
membership just with itself, see that it doesn't have quorum and
eventually SBD will fence the node as it should.
All credit goes to @edwintorok for finding the cause of this issue and
the solution.
Signed-off-by: Gabor Igloi gabor.igloi@citrix.com","I can agree this patch looks good and it's much shorter than #262 / #32 (eventho #262 should be slightly more correct solution). I've tested patch briefly and there is something what scares me a little is a that rejoin doesn't happens smoothly, but rather there is:

merge during join (expected)
consensus timeout
consensus timeout
single node membership created again
Another merge during join which finally success

Reason for this behavior is existence of 127.0.0.1 entry in the list what can (in theory) cause problem.",True,{}
corosync/corosync,https://github.com/corosync/corosync,359,2018-07-06T15:49:18Z,2018-07-12T13:59:42Z,2018-07-18T08:48:12Z,CLOSED,False,24,1,1,https://github.com/gaborigloi,Send msgs to ourselves via localhost when in loopback mode,1,[],https://github.com/corosync/corosync/pull/359,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/359#issuecomment-403775919,"Whenever the interface went down, or the interface lost the IP, the
loopback mode was not working - it was still sending messages to its own
IP, and listening on loopback, so it would never receive its own
messages.
Corosync in UDPU mode would realise it has lost contact to everyone else
when an interface is taken down or the IP address lost, but would fail
to form a new membership because it was not even able to talk to itself.
This is dangerous because there could be another interface or path to
the storage still up and might corrupt GFS2 data. When the interface
got brought up corosync would then dump core with an assertion failure.
This is a well known problem, see
https://bugzilla.redhat.com/show_bug.cgi?id=1397923 and
https://bugzilla.redhat.com/show_bug.cgi?id=989934.
This patch ensures that we send messages to localhost in this case,
instead of our IP, both for unicast and multicast messages (both
these changes are necessary for it to work).
After this patch corosync will be able to talk to itself (which is what
the intent of the loopback mode seems to have been), form a new
membership just with itself, see that it doesn't have quorum and
eventually SBD will fence the node as it should.
All credit goes to @edwintorok for finding the cause of this issue and
the solution.
Signed-off-by: Gabor Igloi gabor.igloi@citrix.com","Oh and of course with RRP it's even worse, because 127.0.0.1 entry will poison whole cluster via second line.
Current patch would be probably good to go for master, because master doesn't have notion of IPs in totem protocol + there is no RRP.
I'm unsure why I didn't merged #262, because as far as I can remember, it was working ok and would solve the problem at least for udpu. Sadly original author deleted the branch, so I'm unable to get commit handy :(, but hopefully I will be able to contact him (or rewrite patch by hand, in the worse case)",True,{}
corosync/corosync,https://github.com/corosync/corosync,359,2018-07-06T15:49:18Z,2018-07-12T13:59:42Z,2018-07-18T08:48:12Z,CLOSED,False,24,1,1,https://github.com/gaborigloi,Send msgs to ourselves via localhost when in loopback mode,1,[],https://github.com/corosync/corosync/pull/359,https://github.com/chrissie-c,6,https://github.com/corosync/corosync/pull/359#issuecomment-403796540,"Whenever the interface went down, or the interface lost the IP, the
loopback mode was not working - it was still sending messages to its own
IP, and listening on loopback, so it would never receive its own
messages.
Corosync in UDPU mode would realise it has lost contact to everyone else
when an interface is taken down or the IP address lost, but would fail
to form a new membership because it was not even able to talk to itself.
This is dangerous because there could be another interface or path to
the storage still up and might corrupt GFS2 data. When the interface
got brought up corosync would then dump core with an assertion failure.
This is a well known problem, see
https://bugzilla.redhat.com/show_bug.cgi?id=1397923 and
https://bugzilla.redhat.com/show_bug.cgi?id=989934.
This patch ensures that we send messages to localhost in this case,
instead of our IP, both for unicast and multicast messages (both
these changes are necessary for it to work).
After this patch corosync will be able to talk to itself (which is what
the intent of the loopback mode seems to have been), form a new
membership just with itself, see that it doesn't have quorum and
eventually SBD will fence the node as it should.
All credit goes to @edwintorok for finding the cause of this issue and
the solution.
Signed-off-by: Gabor Igloi gabor.igloi@citrix.com","yes, 262 looks a tider idea - and similar to what we have in knet for local transport if we can get the branch back",True,{}
corosync/corosync,https://github.com/corosync/corosync,359,2018-07-06T15:49:18Z,2018-07-12T13:59:42Z,2018-07-18T08:48:12Z,CLOSED,False,24,1,1,https://github.com/gaborigloi,Send msgs to ourselves via localhost when in loopback mode,1,[],https://github.com/corosync/corosync/pull/359,https://github.com/jfriesse,7,https://github.com/corosync/corosync/pull/359#issuecomment-404522006,"Whenever the interface went down, or the interface lost the IP, the
loopback mode was not working - it was still sending messages to its own
IP, and listening on loopback, so it would never receive its own
messages.
Corosync in UDPU mode would realise it has lost contact to everyone else
when an interface is taken down or the IP address lost, but would fail
to form a new membership because it was not even able to talk to itself.
This is dangerous because there could be another interface or path to
the storage still up and might corrupt GFS2 data. When the interface
got brought up corosync would then dump core with an assertion failure.
This is a well known problem, see
https://bugzilla.redhat.com/show_bug.cgi?id=1397923 and
https://bugzilla.redhat.com/show_bug.cgi?id=989934.
This patch ensures that we send messages to localhost in this case,
instead of our IP, both for unicast and multicast messages (both
these changes are necessary for it to work).
After this patch corosync will be able to talk to itself (which is what
the intent of the loopback mode seems to have been), form a new
membership just with itself, see that it doesn't have quorum and
eventually SBD will fence the node as it should.
All credit goes to @edwintorok for finding the cause of this issue and
the solution.
Signed-off-by: Gabor Igloi gabor.igloi@citrix.com","@gaborigloi, @edwintorok: Thank you again for the patch, but I've decided to merge #262 as it's behavior is more correct, so closing this PR.
Also if you can, please give it a try to find out if it solves problem for your deployment.",True,{'THUMBS_UP': ['https://github.com/gaborigloi']}
corosync/corosync,https://github.com/corosync/corosync,359,2018-07-06T15:49:18Z,2018-07-12T13:59:42Z,2018-07-18T08:48:12Z,CLOSED,False,24,1,1,https://github.com/gaborigloi,Send msgs to ourselves via localhost when in loopback mode,1,[],https://github.com/corosync/corosync/pull/359,https://github.com/gaborigloi,8,https://github.com/corosync/corosync/pull/359#issuecomment-405858203,"Whenever the interface went down, or the interface lost the IP, the
loopback mode was not working - it was still sending messages to its own
IP, and listening on loopback, so it would never receive its own
messages.
Corosync in UDPU mode would realise it has lost contact to everyone else
when an interface is taken down or the IP address lost, but would fail
to form a new membership because it was not even able to talk to itself.
This is dangerous because there could be another interface or path to
the storage still up and might corrupt GFS2 data. When the interface
got brought up corosync would then dump core with an assertion failure.
This is a well known problem, see
https://bugzilla.redhat.com/show_bug.cgi?id=1397923 and
https://bugzilla.redhat.com/show_bug.cgi?id=989934.
This patch ensures that we send messages to localhost in this case,
instead of our IP, both for unicast and multicast messages (both
these changes are necessary for it to work).
After this patch corosync will be able to talk to itself (which is what
the intent of the loopback mode seems to have been), form a new
membership just with itself, see that it doesn't have quorum and
eventually SBD will fence the node as it should.
All credit goes to @edwintorok for finding the cause of this issue and
the solution.
Signed-off-by: Gabor Igloi gabor.igloi@citrix.com","Thanks for looking into this, looks like #262 also solves our problem.",True,{}
corosync/corosync,https://github.com/corosync/corosync,360,2018-07-24T20:37:32Z,2018-07-30T13:43:43Z,2018-07-30T13:44:06Z,CLOSED,False,70,0,5,https://github.com/chriscray,Present information about when the last token was received,1,[],https://github.com/corosync/corosync/pull/360,https://github.com/chriscray,1,https://github.com/corosync/corosync/pull/360,"This is a NOT a real pull request since I see that master has diverged significantly from these changes.  Instead, I'm wondering whether a patch like this, which presents information on when the last token was received both in logs and to corosync-cmapctl, would be useful to the larger community.  I envision this information as helping users find an appropriate token timeout (heartbeat used to have messages like these, for example).
If this would be useful, I can try to adapt this to the changes from 55c3dcb.
Thanks!!","This is a NOT a real pull request since I see that master has diverged significantly from these changes.  Instead, I'm wondering whether a patch like this, which presents information on when the last token was received both in logs and to corosync-cmapctl, would be useful to the larger community.  I envision this information as helping users find an appropriate token timeout (heartbeat used to have messages like these, for example).
If this would be useful, I can try to adapt this to the changes from 55c3dcb.
Thanks!!",True,{}
corosync/corosync,https://github.com/corosync/corosync,360,2018-07-24T20:37:32Z,2018-07-30T13:43:43Z,2018-07-30T13:44:06Z,CLOSED,False,70,0,5,https://github.com/chriscray,Present information about when the last token was received,1,[],https://github.com/corosync/corosync/pull/360,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/360#issuecomment-407543778,"This is a NOT a real pull request since I see that master has diverged significantly from these changes.  Instead, I'm wondering whether a patch like this, which presents information on when the last token was received both in logs and to corosync-cmapctl, would be useful to the larger community.  I envision this information as helping users find an appropriate token timeout (heartbeat used to have messages like these, for example).
If this would be useful, I can try to adapt this to the changes from 55c3dcb.
Thanks!!",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,360,2018-07-24T20:37:32Z,2018-07-30T13:43:43Z,2018-07-30T13:44:06Z,CLOSED,False,70,0,5,https://github.com/chriscray,Present information about when the last token was received,1,[],https://github.com/corosync/corosync/pull/360,https://github.com/chrissie-c,3,https://github.com/corosync/corosync/pull/360#issuecomment-408021195,"This is a NOT a real pull request since I see that master has diverged significantly from these changes.  Instead, I'm wondering whether a patch like this, which presents information on when the last token was received both in logs and to corosync-cmapctl, would be useful to the larger community.  I envision this information as helping users find an appropriate token timeout (heartbeat used to have messages like these, for example).
If this would be useful, I can try to adapt this to the changes from 55c3dcb.
Thanks!!","I'm generally in favour of this patch - though I think Honza should also review it first. I do have a couple of small issues with the text.
The information key 'runtime.totem.pg.mrp.srp.token_last_received' should probably be be named something more like 'last_token_time' (any better ideas listened to). 'last-received' makes it sound, to me at least, like an absolute time rather than a relative one.
Also 'Token warning every %d' should probably be something like 'Token warning over %d ms"", otherwise it sounds like there will be hundreds of warnings a second being logged :)",True,{}
corosync/corosync,https://github.com/corosync/corosync,360,2018-07-24T20:37:32Z,2018-07-30T13:43:43Z,2018-07-30T13:44:06Z,CLOSED,False,70,0,5,https://github.com/chriscray,Present information about when the last token was received,1,[],https://github.com/corosync/corosync/pull/360,https://github.com/chriscray,4,https://github.com/corosync/corosync/pull/360#issuecomment-408868091,"This is a NOT a real pull request since I see that master has diverged significantly from these changes.  Instead, I'm wondering whether a patch like this, which presents information on when the last token was received both in logs and to corosync-cmapctl, would be useful to the larger community.  I envision this information as helping users find an appropriate token timeout (heartbeat used to have messages like these, for example).
If this would be useful, I can try to adapt this to the changes from 55c3dcb.
Thanks!!",Closing in favor of the pull request I opened against master.,True,{}
corosync/corosync,https://github.com/corosync/corosync,361,2018-07-27T13:43:40Z,2018-08-14T08:36:32Z,2018-08-14T08:36:32Z,CLOSED,False,99,0,8,https://github.com/chriscray,Present information about when the token was last received,3,[],https://github.com/corosync/corosync/pull/361,https://github.com/chriscray,1,https://github.com/corosync/corosync/pull/361,"Here's a version of my proposed patch on master and with (hopefully) some clarification to address Chrissie Caulfield's comments on my previous patch (more explicit variable name, no longer overloading 'token_last_received')
Thanks!","Here's a version of my proposed patch on master and with (hopefully) some clarification to address Chrissie Caulfield's comments on my previous patch (more explicit variable name, no longer overloading 'token_last_received')
Thanks!",True,{}
corosync/corosync,https://github.com/corosync/corosync,361,2018-07-27T13:43:40Z,2018-08-14T08:36:32Z,2018-08-14T08:36:32Z,CLOSED,False,99,0,8,https://github.com/chriscray,Present information about when the token was last received,3,[],https://github.com/corosync/corosync/pull/361,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/361#issuecomment-408422476,"Here's a version of my proposed patch on master and with (hopefully) some clarification to address Chrissie Caulfield's comments on my previous patch (more explicit variable name, no longer overloading 'token_last_received')
Thanks!",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,361,2018-07-27T13:43:40Z,2018-08-14T08:36:32Z,2018-08-14T08:36:32Z,CLOSED,False,99,0,8,https://github.com/chriscray,Present information about when the token was last received,3,[],https://github.com/corosync/corosync/pull/361,https://github.com/chrissie-c,3,https://github.com/corosync/corosync/pull/361#issuecomment-408869764,"Here's a version of my proposed patch on master and with (hopefully) some clarification to address Chrissie Caulfield's comments on my previous patch (more explicit variable name, no longer overloading 'token_last_received')
Thanks!",Thanks. Honza is off till next week so we'll have to wait till then for him to review it too.,True,{}
corosync/corosync,https://github.com/corosync/corosync,361,2018-07-27T13:43:40Z,2018-08-14T08:36:32Z,2018-08-14T08:36:32Z,CLOSED,False,99,0,8,https://github.com/chriscray,Present information about when the token was last received,3,[],https://github.com/corosync/corosync/pull/361,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/361#issuecomment-410678410,"Here's a version of my proposed patch on master and with (hopefully) some clarification to address Chrissie Caulfield's comments on my previous patch (more explicit variable name, no longer overloading 'token_last_received')
Thanks!","Thanks for the patch. I like idea and implementation looks nice, but I see two issues:

Missing man page of new parameter. Could you please add it?
More problematic is static nature of token_warning. Used token_timeout reflects add/remove of nodes so it's kind of dynamic. Please consider rework `token_warning similarly.
If I understand patch correctly, it's NOP if token_warning < token_timeout. This should be documented.

Another possibility may be to change meaning of token_warning to be fraction (percentage) of token_timeout. That would also solve dynamic nature of token_timeout.",True,{}
corosync/corosync,https://github.com/corosync/corosync,361,2018-07-27T13:43:40Z,2018-08-14T08:36:32Z,2018-08-14T08:36:32Z,CLOSED,False,99,0,8,https://github.com/chriscray,Present information about when the token was last received,3,[],https://github.com/corosync/corosync/pull/361,https://github.com/chriscray,5,https://github.com/corosync/corosync/pull/361#issuecomment-411065179,"Here's a version of my proposed patch on master and with (hopefully) some clarification to address Chrissie Caulfield's comments on my previous patch (more explicit variable name, no longer overloading 'token_last_received')
Thanks!","Thanks very much for the reviews.  I will take care of points 1 and 3.  I'm a little confused by point 2, however:

More problematic is static nature of token_warning. Used token_timeout reflects add/remove of nodes so it's kind of dynamic. Please consider rework `token_warning similarly.

Are you worried about the case where, for example, token_timeout is set to 30000 and token_warning is set to 15000, and then a user adjusts token_timeout to 10000?
Thanks!",True,{}
corosync/corosync,https://github.com/corosync/corosync,361,2018-07-27T13:43:40Z,2018-08-14T08:36:32Z,2018-08-14T08:36:32Z,CLOSED,False,99,0,8,https://github.com/chriscray,Present information about when the token was last received,3,[],https://github.com/corosync/corosync/pull/361,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/361#issuecomment-411068616,"Here's a version of my proposed patch on master and with (hopefully) some clarification to address Chrissie Caulfield's comments on my previous patch (more explicit variable name, no longer overloading 'token_last_received')
Thanks!","@chriscray Yes, eventho I don't think opposite situation (token_timeout is enlarged) is much better because it may then warn user more often than needed. Also keep in mind that it's really not that much about user actively changing token timeout, but about adding/removing nodes into cluster. token_timeout is automatically increased/decreased, but token_warning (as implemented now) is not. That's why I also suggested to use token_warning as a fraction of token_timeout",True,{}
corosync/corosync,https://github.com/corosync/corosync,361,2018-07-27T13:43:40Z,2018-08-14T08:36:32Z,2018-08-14T08:36:32Z,CLOSED,False,99,0,8,https://github.com/chriscray,Present information about when the token was last received,3,[],https://github.com/corosync/corosync/pull/361,https://github.com/chriscray,7,https://github.com/corosync/corosync/pull/361#issuecomment-411143459,"Here's a version of my proposed patch on master and with (hopefully) some clarification to address Chrissie Caulfield's comments on my previous patch (more explicit variable name, no longer overloading 'token_last_received')
Thanks!","I pushed a new version that has token_warning as a percentage of the token timeout.  It also handles the case where a user dynamically turns off the token_warning.
Do you think I should print a warning/error when token_warning is less than token_hold_timeout?  In that case there will be a warning printed every token_warning interval since the token will never be received before token_hold_timeout.
Thanks
Chris",True,{}
corosync/corosync,https://github.com/corosync/corosync,361,2018-07-27T13:43:40Z,2018-08-14T08:36:32Z,2018-08-14T08:36:32Z,CLOSED,False,99,0,8,https://github.com/chriscray,Present information about when the token was last received,3,[],https://github.com/corosync/corosync/pull/361,https://github.com/jfriesse,8,https://github.com/corosync/corosync/pull/361#issuecomment-411675810,"Here's a version of my proposed patch on master and with (hopefully) some clarification to address Chrissie Caulfield's comments on my previous patch (more explicit variable name, no longer overloading 'token_last_received')
Thanks!","@chriscray New patch looks really nice, so ACK by me.
Print warning when token_hold_timeout < token_warning seems like a good idea to me so if it is small amount of code then please add this feature.",True,{}
corosync/corosync,https://github.com/corosync/corosync,361,2018-07-27T13:43:40Z,2018-08-14T08:36:32Z,2018-08-14T08:36:32Z,CLOSED,False,99,0,8,https://github.com/chriscray,Present information about when the token was last received,3,[],https://github.com/corosync/corosync/pull/361,https://github.com/jfriesse,9,https://github.com/corosync/corosync/pull/361#issuecomment-411677719,"Here's a version of my proposed patch on master and with (hopefully) some clarification to address Chrissie Caulfield's comments on my previous patch (more explicit variable name, no longer overloading 'token_last_received')
Thanks!","@chriscray Also I think this feature seems to be so useful that it can be turned on by default. I'm not entirely sure what value it should be (to have some kind of relevant info and not to pop too often when not needed), but what about 75%? @chrissie-c what do you think?",True,{}
corosync/corosync,https://github.com/corosync/corosync,361,2018-07-27T13:43:40Z,2018-08-14T08:36:32Z,2018-08-14T08:36:32Z,CLOSED,False,99,0,8,https://github.com/chriscray,Present information about when the token was last received,3,[],https://github.com/corosync/corosync/pull/361,https://github.com/chrissie-c,10,https://github.com/corosync/corosync/pull/361#issuecomment-411689126,"Here's a version of my proposed patch on master and with (hopefully) some clarification to address Chrissie Caulfield's comments on my previous patch (more explicit variable name, no longer overloading 'token_last_received')
Thanks!","I think that's a really good idea Honza. Something low like 75% sounds like it should catch problems and avoid false positives I hope, so sounds like a good starting point. As always with these things it really needs to be based on empirical data so we should probably keep an eye on it and adjust if necessary.",True,{}
corosync/corosync,https://github.com/corosync/corosync,361,2018-07-27T13:43:40Z,2018-08-14T08:36:32Z,2018-08-14T08:36:32Z,CLOSED,False,99,0,8,https://github.com/chriscray,Present information about when the token was last received,3,[],https://github.com/corosync/corosync/pull/361,https://github.com/chriscray,11,https://github.com/corosync/corosync/pull/361#issuecomment-412120440,"Here's a version of my proposed patch on master and with (hopefully) some clarification to address Chrissie Caulfield's comments on my previous patch (more explicit variable name, no longer overloading 'token_last_received')
Thanks!","Great, thanks.  I pushed a new commit that:

Changes the default to 75% (complete with man page change)
Added a warning when the warning interval is less than token_retransmit_timeout.  The existing code only runs the token-related warnings (e.g., totem_config->token_timeout < MINIMUM_TIMEOUT) during runtime reconfiguration and not at startup (is this by design?), so I departed from this a little and added the token warning timeout to the totemsrp_initialize function in exec/totemsrp.c.
Thanks again!
Chris",True,{}
corosync/corosync,https://github.com/corosync/corosync,361,2018-07-27T13:43:40Z,2018-08-14T08:36:32Z,2018-08-14T08:36:32Z,CLOSED,False,99,0,8,https://github.com/chriscray,Present information about when the token was last received,3,[],https://github.com/corosync/corosync/pull/361,https://github.com/jfriesse,12,https://github.com/corosync/corosync/pull/361#issuecomment-412508248,"Here's a version of my proposed patch on master and with (hopefully) some clarification to address Chrissie Caulfield's comments on my previous patch (more explicit variable name, no longer overloading 'token_last_received')
Thanks!","@chriscray Current code runs during startup, otherwise check
if (totem_config->token_warning > 100 || totem_config->token_warning < 0) {

couldn't work. It's just not possible to use logging that time, simply because during startup it's not fully configured yet, that's a reason why snprintf into local_error_reason is used. The code is not prepared for warnings, but I'm really not too keen to have a warning on two places, so please replace log_printf to snprintf stanza (just without goto error_exit). If there is problem in the config later, it will overwrite warning message, but that's not a problem really.",True,{}
corosync/corosync,https://github.com/corosync/corosync,361,2018-07-27T13:43:40Z,2018-08-14T08:36:32Z,2018-08-14T08:36:32Z,CLOSED,False,99,0,8,https://github.com/chriscray,Present information about when the token was last received,3,[],https://github.com/corosync/corosync/pull/361,https://github.com/jfriesse,13,https://github.com/corosync/corosync/pull/361#issuecomment-412509383,"Here's a version of my proposed patch on master and with (hopefully) some clarification to address Chrissie Caulfield's comments on my previous patch (more explicit variable name, no longer overloading 'token_last_received')
Thanks!","@chriscray Eh, sorry, ignore my previous comment. snprintf into local_error_reason is not going to work. I have to find out something better.",True,{}
corosync/corosync,https://github.com/corosync/corosync,361,2018-07-27T13:43:40Z,2018-08-14T08:36:32Z,2018-08-14T08:36:32Z,CLOSED,False,99,0,8,https://github.com/chriscray,Present information about when the token was last received,3,[],https://github.com/corosync/corosync/pull/361,https://github.com/jfriesse,14,https://github.com/corosync/corosync/pull/361#issuecomment-412520972,"Here's a version of my proposed patch on master and with (hopefully) some clarification to address Chrissie Caulfield's comments on my previous patch (more explicit variable name, no longer overloading 'token_last_received')
Thanks!","@chriscray Ok, now I fully remember how totemconfig.c works. So my recommendation is to just move warning from totem_volatile_config_validate to debug_dump_totem_config, so basically debug_dump_totem_config looks same as  totemsrp.c. There will be two instances of the warning but at least they will be in similar looking places.",True,{}
corosync/corosync,https://github.com/corosync/corosync,361,2018-07-27T13:43:40Z,2018-08-14T08:36:32Z,2018-08-14T08:36:32Z,CLOSED,False,99,0,8,https://github.com/chriscray,Present information about when the token was last received,3,[],https://github.com/corosync/corosync/pull/361,https://github.com/chriscray,15,https://github.com/corosync/corosync/pull/361#issuecomment-412556801,"Here's a version of my proposed patch on master and with (hopefully) some clarification to address Chrissie Caulfield's comments on my previous patch (more explicit variable name, no longer overloading 'token_last_received')
Thanks!","OK, that makes sense.  I pushed a new commit with your suggestions.
thanks!",True,{}
corosync/corosync,https://github.com/corosync/corosync,361,2018-07-27T13:43:40Z,2018-08-14T08:36:32Z,2018-08-14T08:36:32Z,CLOSED,False,99,0,8,https://github.com/chriscray,Present information about when the token was last received,3,[],https://github.com/corosync/corosync/pull/361,https://github.com/jfriesse,16,https://github.com/corosync/corosync/pull/361#issuecomment-412797381,"Here's a version of my proposed patch on master and with (hopefully) some clarification to address Chrissie Caulfield's comments on my previous patch (more explicit variable name, no longer overloading 'token_last_received')
Thanks!","@chriscray Thank you for the update. I've squashed 3 patches together and merged as 3f7d2cf .
Thank you for the PR.",True,{}
corosync/corosync,https://github.com/corosync/corosync,362,2018-08-07T13:36:01Z,2018-08-09T08:06:23Z,2018-08-09T08:06:24Z,CLOSED,False,58,14,2,https://github.com/chriscray,Add option for quiet operation to corosync-cmapctl,1,[],https://github.com/corosync/corosync/pull/362,https://github.com/chriscray,1,https://github.com/corosync/corosync/pull/362,"I think I fixed all of the whitespace issues.
Thanks!","I think I fixed all of the whitespace issues.
Thanks!",True,{}
corosync/corosync,https://github.com/corosync/corosync,362,2018-08-07T13:36:01Z,2018-08-09T08:06:23Z,2018-08-09T08:06:24Z,CLOSED,False,58,14,2,https://github.com/chriscray,Add option for quiet operation to corosync-cmapctl,1,[],https://github.com/corosync/corosync/pull/362,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/362#issuecomment-411058290,"I think I fixed all of the whitespace issues.
Thanks!",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,362,2018-08-07T13:36:01Z,2018-08-09T08:06:23Z,2018-08-09T08:06:24Z,CLOSED,False,58,14,2,https://github.com/chriscray,Add option for quiet operation to corosync-cmapctl,1,[],https://github.com/corosync/corosync/pull/362,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/362#issuecomment-411673688,"I think I fixed all of the whitespace issues.
Thanks!","@chriscray Nice patch, so ACK and merged as bde2476 .
Thank you for the patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,364,2018-08-10T11:42:39Z,2018-08-13T07:05:49Z,2018-08-14T12:56:35Z,CLOSED,False,22,13,10,https://github.com/jfriesse,Fix compiler warnings found by gcc 8.2,7,[],https://github.com/corosync/corosync/pull/364,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/364,SSIA. I've created rather more patches because some of them are useful for needle.,SSIA. I've created rather more patches because some of them are useful for needle.,True,{}
corosync/corosync,https://github.com/corosync/corosync,364,2018-08-10T11:42:39Z,2018-08-13T07:05:49Z,2018-08-14T12:56:35Z,CLOSED,False,22,13,10,https://github.com/jfriesse,Fix compiler warnings found by gcc 8.2,7,[],https://github.com/corosync/corosync/pull/364,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/364#issuecomment-412426799,SSIA. I've created rather more patches because some of them are useful for needle.,@chrissie-c Thank you for the review. Merged as deab940 and for needle I've cherry picked all except the first one to needle as b7b112c,True,{}
corosync/corosync,https://github.com/corosync/corosync,367,2018-08-13T11:44:12Z,2018-08-14T21:00:12Z,2018-08-14T21:00:27Z,CLOSED,False,132,1,11,https://github.com/chriscray,Provide API to force corosync into the gather state,3,[],https://github.com/corosync/corosync/pull/367,https://github.com/chriscray,1,https://github.com/corosync/corosync/pull/367,"This is the code that I referenced on the clusterlabs mailing list.  It may well be that nobody else cares about this functionality (seems like this is the case, judging from the response to my post), in which case don't worry about this pull request at all.  I'm a little surprised that nobody else has responded though -- even with a token timeout of 30 seconds, it seems like there would be situations where something like this might be useful.
Thanks again!","This is the code that I referenced on the clusterlabs mailing list.  It may well be that nobody else cares about this functionality (seems like this is the case, judging from the response to my post), in which case don't worry about this pull request at all.  I'm a little surprised that nobody else has responded though -- even with a token timeout of 30 seconds, it seems like there would be situations where something like this might be useful.
Thanks again!",True,{}
corosync/corosync,https://github.com/corosync/corosync,367,2018-08-13T11:44:12Z,2018-08-14T21:00:12Z,2018-08-14T21:00:27Z,CLOSED,False,132,1,11,https://github.com/chriscray,Provide API to force corosync into the gather state,3,[],https://github.com/corosync/corosync/pull/367,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/367#issuecomment-412491288,"This is the code that I referenced on the clusterlabs mailing list.  It may well be that nobody else cares about this functionality (seems like this is the case, judging from the response to my post), in which case don't worry about this pull request at all.  I'm a little surprised that nobody else has responded though -- even with a token timeout of 30 seconds, it seems like there would be situations where something like this might be useful.
Thanks again!",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,367,2018-08-13T11:44:12Z,2018-08-14T21:00:12Z,2018-08-14T21:00:27Z,CLOSED,False,132,1,11,https://github.com/chriscray,Provide API to force corosync into the gather state,3,[],https://github.com/corosync/corosync/pull/367,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/367#issuecomment-412897661,"This is the code that I referenced on the clusterlabs mailing list.  It may well be that nobody else cares about this functionality (seems like this is the case, judging from the response to my post), in which case don't worry about this pull request at all.  I'm a little surprised that nobody else has responded though -- even with a token timeout of 30 seconds, it seems like there would be situations where something like this might be useful.
Thanks again!",@chriscray Would you mind to rebase your patch and send it again?,True,{}
corosync/corosync,https://github.com/corosync/corosync,368,2018-08-13T23:28:09Z,2018-08-14T11:04:58Z,2018-08-14T11:04:58Z,CLOSED,False,7,0,1,https://github.com/jnpkrn,systemd: prevent redundancy in journal originating from a dual sink,1,[],https://github.com/corosync/corosync/pull/368,https://github.com/jnpkrn,1,https://github.com/corosync/corosync/pull/368,"Annotated example from ""journalctl -b --no-hostname -u corosync"":
Aug 14 00:27:45 corosync[5203]:  [MAIN  ] Corosync Cluster Engine ('2.99.3'): started and ready to provide service.
^ from syslog source
Aug 14 00:27:45 corosync[5203]: notice  [MAIN  ] Corosync Cluster Engine ('2.99.3'): started and ready to provide service.
^ from stderr source
Signed-off-by: Jan Pokorný jpokorny@redhat.com","Annotated example from ""journalctl -b --no-hostname -u corosync"":
Aug 14 00:27:45 corosync[5203]:  [MAIN  ] Corosync Cluster Engine ('2.99.3'): started and ready to provide service.
^ from syslog source
Aug 14 00:27:45 corosync[5203]: notice  [MAIN  ] Corosync Cluster Engine ('2.99.3'): started and ready to provide service.
^ from stderr source
Signed-off-by: Jan Pokorný jpokorny@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,368,2018-08-13T23:28:09Z,2018-08-14T11:04:58Z,2018-08-14T11:04:58Z,CLOSED,False,7,0,1,https://github.com/jnpkrn,systemd: prevent redundancy in journal originating from a dual sink,1,[],https://github.com/corosync/corosync/pull/368,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/368#issuecomment-412699997,"Annotated example from ""journalctl -b --no-hostname -u corosync"":
Aug 14 00:27:45 corosync[5203]:  [MAIN  ] Corosync Cluster Engine ('2.99.3'): started and ready to provide service.
^ from syslog source
Aug 14 00:27:45 corosync[5203]: notice  [MAIN  ] Corosync Cluster Engine ('2.99.3'): started and ready to provide service.
^ from stderr source
Signed-off-by: Jan Pokorný jpokorny@redhat.com",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,368,2018-08-13T23:28:09Z,2018-08-14T11:04:58Z,2018-08-14T11:04:58Z,CLOSED,False,7,0,1,https://github.com/jnpkrn,systemd: prevent redundancy in journal originating from a dual sink,1,[],https://github.com/corosync/corosync/pull/368,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/368#issuecomment-412835460,"Annotated example from ""journalctl -b --no-hostname -u corosync"":
Aug 14 00:27:45 corosync[5203]:  [MAIN  ] Corosync Cluster Engine ('2.99.3'): started and ready to provide service.
^ from syslog source
Aug 14 00:27:45 corosync[5203]: notice  [MAIN  ] Corosync Cluster Engine ('2.99.3'): started and ready to provide service.
^ from stderr source
Signed-off-by: Jan Pokorný jpokorny@redhat.com","@jnpkrn Nice catch, nice patch so ACK and merged as c34208a.
Thank you for the patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,369,2018-08-14T12:22:49Z,2018-08-14T12:55:10Z,2018-08-14T12:56:28Z,CLOSED,False,28,90,5,https://github.com/jfriesse,Remove libcgroup,1,[],https://github.com/corosync/corosync/pull/369,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/369,"Libcgroup is deprecated and not shipping with new distributions
(OpenSuSE is one example). Solution is to have a partial implementation
of required functionality of libcgroup in the corosync code.
Patch uses hardcoded cgroup mount point, because most of the systems are
now systemd and systemd is also using hardcoded mountpoint (see
https://github.com/systemd/systemd/blob/master/src/core/mount-setup.c)
Configuration option --enable-cgroup is gone, because it's not needed
any longer.
Big thanks to Christine Caulfield ccaulfie@redhat.com for example of
simplified implementation of cgroup management code primitives.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Libcgroup is deprecated and not shipping with new distributions
(OpenSuSE is one example). Solution is to have a partial implementation
of required functionality of libcgroup in the corosync code.
Patch uses hardcoded cgroup mount point, because most of the systems are
now systemd and systemd is also using hardcoded mountpoint (see
https://github.com/systemd/systemd/blob/master/src/core/mount-setup.c)
Configuration option --enable-cgroup is gone, because it's not needed
any longer.
Big thanks to Christine Caulfield ccaulfie@redhat.com for example of
simplified implementation of cgroup management code primitives.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,369,2018-08-14T12:22:49Z,2018-08-14T12:55:10Z,2018-08-14T12:56:28Z,CLOSED,False,28,90,5,https://github.com/jfriesse,Remove libcgroup,1,[],https://github.com/corosync/corosync/pull/369,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/369#issuecomment-412859141,"Libcgroup is deprecated and not shipping with new distributions
(OpenSuSE is one example). Solution is to have a partial implementation
of required functionality of libcgroup in the corosync code.
Patch uses hardcoded cgroup mount point, because most of the systems are
now systemd and systemd is also using hardcoded mountpoint (see
https://github.com/systemd/systemd/blob/master/src/core/mount-setup.c)
Configuration option --enable-cgroup is gone, because it's not needed
any longer.
Big thanks to Christine Caulfield ccaulfie@redhat.com for example of
simplified implementation of cgroup management code primitives.
Signed-off-by: Jan Friesse jfriesse@redhat.com","@chrissie-c Agree, it's better to communicate possible removal of feature rather sooner than later.
Fixed patch included.",True,{}
corosync/corosync,https://github.com/corosync/corosync,369,2018-08-14T12:22:49Z,2018-08-14T12:55:10Z,2018-08-14T12:56:28Z,CLOSED,False,28,90,5,https://github.com/jfriesse,Remove libcgroup,1,[],https://github.com/corosync/corosync/pull/369,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/369#issuecomment-412861669,"Libcgroup is deprecated and not shipping with new distributions
(OpenSuSE is one example). Solution is to have a partial implementation
of required functionality of libcgroup in the corosync code.
Patch uses hardcoded cgroup mount point, because most of the systems are
now systemd and systemd is also using hardcoded mountpoint (see
https://github.com/systemd/systemd/blob/master/src/core/mount-setup.c)
Configuration option --enable-cgroup is gone, because it's not needed
any longer.
Big thanks to Christine Caulfield ccaulfie@redhat.com for example of
simplified implementation of cgroup management code primitives.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c Thank you for the review and ACK. I've merged patch as a c9e5d6d .,True,{}
corosync/corosync,https://github.com/corosync/corosync,370,2018-08-14T20:58:32Z,2018-08-27T19:24:54Z,2018-08-27T19:24:54Z,CLOSED,False,33,1,7,https://github.com/chriscray,Provide API to force corosync into the gather state,1,[],https://github.com/corosync/corosync/pull/370,https://github.com/chriscray,1,https://github.com/corosync/corosync/pull/370,Rebased against new corosync master,Rebased against new corosync master,True,{}
corosync/corosync,https://github.com/corosync/corosync,370,2018-08-14T20:58:32Z,2018-08-27T19:24:54Z,2018-08-27T19:24:54Z,CLOSED,False,33,1,7,https://github.com/chriscray,Provide API to force corosync into the gather state,1,[],https://github.com/corosync/corosync/pull/370,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/370#issuecomment-413013833,Rebased against new corosync master,Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,370,2018-08-14T20:58:32Z,2018-08-27T19:24:54Z,2018-08-27T19:24:54Z,CLOSED,False,33,1,7,https://github.com/chriscray,Provide API to force corosync into the gather state,1,[],https://github.com/corosync/corosync/pull/370,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/370#issuecomment-413193781,Rebased against new corosync master,"@chriscray I quite like the idea, but implementation has a few problems:

Missing man page
I don't think variable should be in totem section nor in the config file. Please use runtime.blackbox.dump_state for inspiration (so something like runtime.totem.kick, eventho I'm not sure if kick is really good name)
Before calling timer_function_orf_token_timeout some log message would be nice, simply to distinguish between real token loss and user forced one.",True,{}
corosync/corosync,https://github.com/corosync/corosync,372,2018-08-20T11:56:58Z,2018-08-20T14:18:38Z,2018-08-20T17:40:35Z,CLOSED,False,1,1,1,https://github.com/wferi,man: fix cmap key name (runtime.config.totem.token),1,[],https://github.com/corosync/corosync/pull/372,https://github.com/wferi,1,https://github.com/corosync/corosync/pull/372,(Applies to needle as well.),(Applies to needle as well.),True,{}
corosync/corosync,https://github.com/corosync/corosync,372,2018-08-20T11:56:58Z,2018-08-20T14:18:38Z,2018-08-20T17:40:35Z,CLOSED,False,1,1,1,https://github.com/wferi,man: fix cmap key name (runtime.config.totem.token),1,[],https://github.com/corosync/corosync/pull/372,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/372#issuecomment-414332250,(Applies to needle as well.),"@wferi Good catch, nice patch so ACK and merged as 07a376e and 855b221.
Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,373,2018-08-23T14:05:17Z,2018-09-06T11:03:33Z,2018-09-06T11:07:38Z,CLOSED,False,276,69,1,https://github.com/jfriesse,Enhance coroparse,6,[],https://github.com/corosync/corosync/pull/373,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/373,"Few improvements of coroparse:

Solution of #55
Result of testing 1. with following config file

a:a


Formally not needed because icmap reports problem anyway, but it's still nice to have a remove_whitespace function fixed
Solution of #150
Patch I wanted to make for a looooooong time because message like parser error: /etc/corosync/corosync.conf:39: Unexpected closing brace is so much more informative.

Patchset breaks ""compatibility"" (in the https://xkcd.com/1172/ way), so it's probably master only.","Few improvements of coroparse:

Solution of #55
Result of testing 1. with following config file

a:a


Formally not needed because icmap reports problem anyway, but it's still nice to have a remove_whitespace function fixed
Solution of #150
Patch I wanted to make for a looooooong time because message like parser error: /etc/corosync/corosync.conf:39: Unexpected closing brace is so much more informative.

Patchset breaks ""compatibility"" (in the https://xkcd.com/1172/ way), so it's probably master only.",True,{}
corosync/corosync,https://github.com/corosync/corosync,373,2018-08-23T14:05:17Z,2018-09-06T11:03:33Z,2018-09-06T11:07:38Z,CLOSED,False,276,69,1,https://github.com/jfriesse,Enhance coroparse,6,[],https://github.com/corosync/corosync/pull/373,https://github.com/chrissie-c,2,https://github.com/corosync/corosync/pull/373#issuecomment-419009608,"Few improvements of coroparse:

Solution of #55
Result of testing 1. with following config file

a:a


Formally not needed because icmap reports problem anyway, but it's still nice to have a remove_whitespace function fixed
Solution of #150
Patch I wanted to make for a looooooong time because message like parser error: /etc/corosync/corosync.conf:39: Unexpected closing brace is so much more informative.

Patchset breaks ""compatibility"" (in the https://xkcd.com/1172/ way), so it's probably master only.",The a:a problem was a mistake on my part. so ACK. I'm really pleased to see this go into the parser :),True,{}
corosync/corosync,https://github.com/corosync/corosync,373,2018-08-23T14:05:17Z,2018-09-06T11:03:33Z,2018-09-06T11:07:38Z,CLOSED,False,276,69,1,https://github.com/jfriesse,Enhance coroparse,6,[],https://github.com/corosync/corosync/pull/373,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/373#issuecomment-419054294,"Few improvements of coroparse:

Solution of #55
Result of testing 1. with following config file

a:a


Formally not needed because icmap reports problem anyway, but it's still nice to have a remove_whitespace function fixed
Solution of #150
Patch I wanted to make for a looooooong time because message like parser error: /etc/corosync/corosync.conf:39: Unexpected closing brace is so much more informative.

Patchset breaks ""compatibility"" (in the https://xkcd.com/1172/ way), so it's probably master only.",Thank you for the review. I've merged patches as a 0ac6596 .. 20bd68b .,True,{}
corosync/corosync,https://github.com/corosync/corosync,374,2018-08-27T15:51:04Z,2018-09-05T12:05:16Z,2018-09-05T12:05:20Z,CLOSED,False,7,1,1,https://github.com/jfriesse,notifyd: Propagate error to exit code,1,[],https://github.com/corosync/corosync/pull/374,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/374,"When it's impossible to dispatch cmap/quorum messages exit code of
corosync-notifyd shouldn't be success.
Signed-off-by: Jan Friesse jfriesse@redhat.com","When it's impossible to dispatch cmap/quorum messages exit code of
corosync-notifyd shouldn't be success.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,374,2018-08-27T15:51:04Z,2018-09-05T12:05:16Z,2018-09-05T12:05:20Z,CLOSED,False,7,1,1,https://github.com/jfriesse,notifyd: Propagate error to exit code,1,[],https://github.com/corosync/corosync/pull/374,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/374#issuecomment-416273099,"When it's impossible to dispatch cmap/quorum messages exit code of
corosync-notifyd shouldn't be success.
Signed-off-by: Jan Friesse jfriesse@redhat.com",Solves #279,True,{}
corosync/corosync,https://github.com/corosync/corosync,374,2018-08-27T15:51:04Z,2018-09-05T12:05:16Z,2018-09-05T12:05:20Z,CLOSED,False,7,1,1,https://github.com/jfriesse,notifyd: Propagate error to exit code,1,[],https://github.com/corosync/corosync/pull/374,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/374#issuecomment-418705982,"When it's impossible to dispatch cmap/quorum messages exit code of
corosync-notifyd shouldn't be success.
Signed-off-by: Jan Friesse jfriesse@redhat.com","@chrissie-c Thank you for the review, I've merged patch as e313bbf / ab65435",True,{}
corosync/corosync,https://github.com/corosync/corosync,375,2018-08-27T19:24:32Z,2018-09-07T11:32:25Z,2018-09-07T11:32:25Z,CLOSED,False,58,3,6,https://github.com/chriscray,Add option to force cluster into GATHER state,2,[],https://github.com/corosync/corosync/pull/375,https://github.com/chriscray,1,https://github.com/corosync/corosync/pull/375,"I think this covers all the comments about my previous attempt.  Again, if I'm the only person who needs this functionality, feel free to reject this as clutter.
Thanks!
Chris","I think this covers all the comments about my previous attempt.  Again, if I'm the only person who needs this functionality, feel free to reject this as clutter.
Thanks!
Chris",True,{}
corosync/corosync,https://github.com/corosync/corosync,375,2018-08-27T19:24:32Z,2018-09-07T11:32:25Z,2018-09-07T11:32:25Z,CLOSED,False,58,3,6,https://github.com/chriscray,Add option to force cluster into GATHER state,2,[],https://github.com/corosync/corosync/pull/375,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/375#issuecomment-416339219,"I think this covers all the comments about my previous attempt.  Again, if I'm the only person who needs this functionality, feel free to reject this as clutter.
Thanks!
Chris",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,375,2018-08-27T19:24:32Z,2018-09-07T11:32:25Z,2018-09-07T11:32:25Z,CLOSED,False,58,3,6,https://github.com/chriscray,Add option to force cluster into GATHER state,2,[],https://github.com/corosync/corosync/pull/375,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/375#issuecomment-416589403,"I think this covers all the comments about my previous attempt.  Again, if I'm the only person who needs this functionality, feel free to reject this as clutter.
Thanks!
Chris","@chriscray Nice patch, we are moving forward and I have only few nitpicks left.

fprintf(stderr, ""INIT\n""); - please delete it
man page has runtime.force_gather described twice (second is just CW), I believe this is typo.
man page description of runtime.force_gather is not entirely precise and it's missing warning. Something like Set to 'yes' to force the processor to move into the GATHER state. This operation is dangerous and not recommended
Callback is called twice. It's because first time it's called by changing ""no"" -> something and second time it's because it's changed in the code from something -> ""no"". I see two solutions for the problem (second is slightly preferred)

Do not change something to no (that also means meaning of the value must change, in blackbox it's date for example)
Check if new key value is no. If it is, do not trigger totempg_force_gather.",True,{}
corosync/corosync,https://github.com/corosync/corosync,375,2018-08-27T19:24:32Z,2018-09-07T11:32:25Z,2018-09-07T11:32:25Z,CLOSED,False,58,3,6,https://github.com/chriscray,Add option to force cluster into GATHER state,2,[],https://github.com/corosync/corosync/pull/375,https://github.com/chriscray,4,https://github.com/corosync/corosync/pull/375#issuecomment-416743085,"I think this covers all the comments about my previous attempt.  Again, if I'm the only person who needs this functionality, feel free to reject this as clutter.
Thanks!
Chris","Ug, sorry, I should know better than to push commits the first day back from vacation.  I've revised according to your comments.
Thanks!",True,{}
corosync/corosync,https://github.com/corosync/corosync,375,2018-08-27T19:24:32Z,2018-09-07T11:32:25Z,2018-09-07T11:32:25Z,CLOSED,False,58,3,6,https://github.com/chriscray,Add option to force cluster into GATHER state,2,[],https://github.com/corosync/corosync/pull/375,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/375#issuecomment-416919090,"I think this covers all the comments about my previous attempt.  Again, if I'm the only person who needs this functionality, feel free to reject this as clutter.
Thanks!
Chris","@chriscray Yep, no worries, that's why review exists :) Anyway, patch looks good so from my point of view it's good to be merged, because it's simply not possible to accidentally call this operation (= equivalent of confirmation question) and it may be useful. But I would like to wait for @chrissie-c to share her opinion.",True,{}
corosync/corosync,https://github.com/corosync/corosync,375,2018-08-27T19:24:32Z,2018-09-07T11:32:25Z,2018-09-07T11:32:25Z,CLOSED,False,58,3,6,https://github.com/chriscray,Add option to force cluster into GATHER state,2,[],https://github.com/corosync/corosync/pull/375,https://github.com/chrissie-c,6,https://github.com/corosync/corosync/pull/375#issuecomment-419078458,"I think this covers all the comments about my previous attempt.  Again, if I'm the only person who needs this functionality, feel free to reject this as clutter.
Thanks!
Chris","ACK from me too, especially the removal of apostrophes :)
I'm still slightly puzzled as to how much use it is, but if someone else finds it useful them I'm not going to stand in the way.",True,{}
corosync/corosync,https://github.com/corosync/corosync,375,2018-08-27T19:24:32Z,2018-09-07T11:32:25Z,2018-09-07T11:32:25Z,CLOSED,False,58,3,6,https://github.com/chriscray,Add option to force cluster into GATHER state,2,[],https://github.com/corosync/corosync/pull/375,https://github.com/jfriesse,7,https://github.com/corosync/corosync/pull/375#issuecomment-419411949,"I think this covers all the comments about my previous attempt.  Again, if I'm the only person who needs this functionality, feel free to reject this as clutter.
Thanks!
Chris","Honestly, I'm also not 100% convinced that solving long token timeout by hand is really best option, but there is use case and a good patch, which doesn't break anything and has big enough warning included, so I don't see any reason why not to have this feature.
All in all, I've merged patch as a 51989b4.
Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,376,2018-08-29T15:49:39Z,2018-09-03T14:03:19Z,2018-09-17T08:33:54Z,CLOSED,False,42,6,4,https://github.com/jfriesse,build: Support for git archive stored tags,3,[],https://github.com/corosync/corosync/pull/376,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/376,"Attempt to solve problem with git archive generated tarballs
(used for example by github when release is downloaded) which are no
longer git tree and (in contrast to officially released tarballs) also
doesn't contain .tarball-version file so git-version-gen script simply
cannot obtain valid version info.
Solution is based on using gitattributes which is instructs git to
replace string in the .gitarchivever file by known ref names.
git-version-gen is enhanced to support this file and tries to parse
any string which looks like ""tag: v[0-9]+.[0-9]+.[0-9]"". If such string
is found it's used as a version. This file is used as a last attempt and
other methods (.tarball-version, git abbrev) have precedence.
Based on idea stated by Jan Pokorný jpokorny@redhat.com.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Attempt to solve problem with git archive generated tarballs
(used for example by github when release is downloaded) which are no
longer git tree and (in contrast to officially released tarballs) also
doesn't contain .tarball-version file so git-version-gen script simply
cannot obtain valid version info.
Solution is based on using gitattributes which is instructs git to
replace string in the .gitarchivever file by known ref names.
git-version-gen is enhanced to support this file and tries to parse
any string which looks like ""tag: v[0-9]+.[0-9]+.[0-9]"". If such string
is found it's used as a version. This file is used as a last attempt and
other methods (.tarball-version, git abbrev) have precedence.
Based on idea stated by Jan Pokorný jpokorny@redhat.com.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,376,2018-08-29T15:49:39Z,2018-09-03T14:03:19Z,2018-09-17T08:33:54Z,CLOSED,False,42,6,4,https://github.com/jfriesse,build: Support for git archive stored tags,3,[],https://github.com/corosync/corosync/pull/376,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/376#issuecomment-417004472,"Attempt to solve problem with git archive generated tarballs
(used for example by github when release is downloaded) which are no
longer git tree and (in contrast to officially released tarballs) also
doesn't contain .tarball-version file so git-version-gen script simply
cannot obtain valid version info.
Solution is based on using gitattributes which is instructs git to
replace string in the .gitarchivever file by known ref names.
git-version-gen is enhanced to support this file and tries to parse
any string which looks like ""tag: v[0-9]+.[0-9]+.[0-9]"". If such string
is found it's used as a version. This file is used as a last attempt and
other methods (.tarball-version, git abbrev) have precedence.
Based on idea stated by Jan Pokorný jpokorny@redhat.com.
Signed-off-by: Jan Friesse jfriesse@redhat.com","As an example tag, it's possible to use  v2.999.12 tarball of https://github.com/jfriesse/corosync/releases (https://github.com/jfriesse/corosync/archive/v2.999.12.tar.gz)
Patch doesn't solve untagged releases (typically master download) but it shows enough warnings for such releases.
This should close #116 .",True,{}
corosync/corosync,https://github.com/corosync/corosync,376,2018-08-29T15:49:39Z,2018-09-03T14:03:19Z,2018-09-17T08:33:54Z,CLOSED,False,42,6,4,https://github.com/jfriesse,build: Support for git archive stored tags,3,[],https://github.com/corosync/corosync/pull/376,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/376#issuecomment-417655534,"Attempt to solve problem with git archive generated tarballs
(used for example by github when release is downloaded) which are no
longer git tree and (in contrast to officially released tarballs) also
doesn't contain .tarball-version file so git-version-gen script simply
cannot obtain valid version info.
Solution is based on using gitattributes which is instructs git to
replace string in the .gitarchivever file by known ref names.
git-version-gen is enhanced to support this file and tries to parse
any string which looks like ""tag: v[0-9]+.[0-9]+.[0-9]"". If such string
is found it's used as a version. This file is used as a last attempt and
other methods (.tarball-version, git abbrev) have precedence.
Based on idea stated by Jan Pokorný jpokorny@redhat.com.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Added two more patches. First one should merge into original patch and second one is for discussion. I believe it's just better to exit with error when version is unknown, but I don't have too strong arguments for it.",True,{}
corosync/corosync,https://github.com/corosync/corosync,376,2018-08-29T15:49:39Z,2018-09-03T14:03:19Z,2018-09-17T08:33:54Z,CLOSED,False,42,6,4,https://github.com/jfriesse,build: Support for git archive stored tags,3,[],https://github.com/corosync/corosync/pull/376,https://github.com/chrissie-c,4,https://github.com/corosync/corosync/pull/376#issuecomment-418112835,"Attempt to solve problem with git archive generated tarballs
(used for example by github when release is downloaded) which are no
longer git tree and (in contrast to officially released tarballs) also
doesn't contain .tarball-version file so git-version-gen script simply
cannot obtain valid version info.
Solution is based on using gitattributes which is instructs git to
replace string in the .gitarchivever file by known ref names.
git-version-gen is enhanced to support this file and tries to parse
any string which looks like ""tag: v[0-9]+.[0-9]+.[0-9]"". If such string
is found it's used as a version. This file is used as a last attempt and
other methods (.tarball-version, git abbrev) have precedence.
Based on idea stated by Jan Pokorný jpokorny@redhat.com.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Looks good to me. and I'm in favour of exitting when the version is unknown - it could save a lot of grief.
Is this generic - would it work for libqb too?",True,{}
corosync/corosync,https://github.com/corosync/corosync,376,2018-08-29T15:49:39Z,2018-09-03T14:03:19Z,2018-09-17T08:33:54Z,CLOSED,False,42,6,4,https://github.com/jfriesse,build: Support for git archive stored tags,3,[],https://github.com/corosync/corosync/pull/376,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/376#issuecomment-418124793,"Attempt to solve problem with git archive generated tarballs
(used for example by github when release is downloaded) which are no
longer git tree and (in contrast to officially released tarballs) also
doesn't contain .tarball-version file so git-version-gen script simply
cannot obtain valid version info.
Solution is based on using gitattributes which is instructs git to
replace string in the .gitarchivever file by known ref names.
git-version-gen is enhanced to support this file and tries to parse
any string which looks like ""tag: v[0-9]+.[0-9]+.[0-9]"". If such string
is found it's used as a version. This file is used as a last attempt and
other methods (.tarball-version, git abbrev) have precedence.
Based on idea stated by Jan Pokorný jpokorny@redhat.com.
Signed-off-by: Jan Friesse jfriesse@redhat.com","@chrissie-c Thank you for the review. I've squashed 1st and 2nd patches into one merged into master 0b0f32c, 83fec6a and needle c928a61, 0a17ad2.
Let me prepare PR for libqb and kronosnet. Idea itself should work, but git-version-gen is much never than one in corosync so it may not be just apply - works.",True,{}
corosync/corosync,https://github.com/corosync/corosync,378,2018-09-12T08:04:25Z,2018-09-13T15:36:43Z,2018-09-17T08:33:39Z,CLOSED,False,17,17,2,https://github.com/jfriesse,man: Fix crypto_hash and crypto_cipher defaults,1,[],https://github.com/corosync/corosync/pull/378,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/378,Signed-off-by: Jan Friesse jfriesse@redhat.com,Signed-off-by: Jan Friesse jfriesse@redhat.com,True,{}
corosync/corosync,https://github.com/corosync/corosync,378,2018-09-12T08:04:25Z,2018-09-13T15:36:43Z,2018-09-17T08:33:39Z,CLOSED,False,17,17,2,https://github.com/jfriesse,man: Fix crypto_hash and crypto_cipher defaults,1,[],https://github.com/corosync/corosync/pull/378,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/378#issuecomment-421051407,Signed-off-by: Jan Friesse jfriesse@redhat.com,"Thank you for the review, I've merged commit as a ed388b9.",True,{}
corosync/corosync,https://github.com/corosync/corosync,379,2018-09-14T11:31:11Z,2018-09-17T08:29:24Z,2018-09-17T08:29:28Z,CLOSED,False,32,6074,27,https://github.com/jfriesse,Remove cts and nss,2,[],https://github.com/corosync/corosync/pull/379,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/379,$SUBJ,$SUBJ,True,{}
corosync/corosync,https://github.com/corosync/corosync,379,2018-09-14T11:31:11Z,2018-09-17T08:29:24Z,2018-09-17T08:29:28Z,CLOSED,False,32,6074,27,https://github.com/jfriesse,Remove cts and nss,2,[],https://github.com/corosync/corosync/pull/379,https://github.com/fabbione,2,https://github.com/corosync/corosync/pull/379#issuecomment-421524631,$SUBJ,looks good to me,True,{}
corosync/corosync,https://github.com/corosync/corosync,379,2018-09-14T11:31:11Z,2018-09-17T08:29:24Z,2018-09-17T08:29:28Z,CLOSED,False,32,6074,27,https://github.com/jfriesse,Remove cts and nss,2,[],https://github.com/corosync/corosync/pull/379,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/379#issuecomment-421926581,$SUBJ,@fabbione and @chrissie-c : Thank you both for the review. I've found a small issue in the original commit (usage of ntohl instead of htonl - just a typo) which I've fixed and merged commits as a 7c78a34 and 06504c0 .,True,{}
corosync/corosync,https://github.com/corosync/corosync,380,2018-09-24T11:30:32Z,2018-09-24T11:52:32Z,2018-09-24T15:38:39Z,CLOSED,False,2,2,2,https://github.com/wferi,Typo fixes,2,[],https://github.com/corosync/corosync/pull/380,https://github.com/wferi,1,https://github.com/corosync/corosync/pull/380,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,380,2018-09-24T11:30:32Z,2018-09-24T11:52:32Z,2018-09-24T15:38:39Z,CLOSED,False,2,2,2,https://github.com/wferi,Typo fixes,2,[],https://github.com/corosync/corosync/pull/380,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/380#issuecomment-423949221,,"@wferi Nice catch, nice patch so ACK and merged as a 66e7fb6, 477877c.
Thank you for the patches!",True,{}
corosync/corosync,https://github.com/corosync/corosync,381,2018-09-24T13:16:16Z,2018-09-25T06:24:18Z,2018-09-25T06:24:22Z,CLOSED,False,7,17,2,https://github.com/jfriesse,build: Do not compile totempg as a shared library,1,[],https://github.com/corosync/corosync/pull/381,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/381,"Instead of compiling totempg as a shared library, compile all totem code
directly into corosync binary.
Main idea of having totempg which may be
used in other projects was nice, but never really finished (and as far
as I know no project were ever really using it). So at the end of the
day, we've end with huge amount of problems (need to pass new arguments
thru X layers, hard debugging, ...) without any real benefit.
For a future version, we may consider to revisit idea of split totemsrp
into well tested library without unrelated bits like transports/ip/...
Signed-off-by: Jan Friesse jfriesse@redhat.com","Instead of compiling totempg as a shared library, compile all totem code
directly into corosync binary.
Main idea of having totempg which may be
used in other projects was nice, but never really finished (and as far
as I know no project were ever really using it). So at the end of the
day, we've end with huge amount of problems (need to pass new arguments
thru X layers, hard debugging, ...) without any real benefit.
For a future version, we may consider to revisit idea of split totemsrp
into well tested library without unrelated bits like transports/ip/...
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,381,2018-09-24T13:16:16Z,2018-09-25T06:24:18Z,2018-09-25T06:24:22Z,CLOSED,False,7,17,2,https://github.com/jfriesse,build: Do not compile totempg as a shared library,1,[],https://github.com/corosync/corosync/pull/381,https://github.com/chrissie-c,2,https://github.com/corosync/corosync/pull/381#issuecomment-423971296,"Instead of compiling totempg as a shared library, compile all totem code
directly into corosync binary.
Main idea of having totempg which may be
used in other projects was nice, but never really finished (and as far
as I know no project were ever really using it). So at the end of the
day, we've end with huge amount of problems (need to pass new arguments
thru X layers, hard debugging, ...) without any real benefit.
For a future version, we may consider to revisit idea of split totemsrp
into well tested library without unrelated bits like transports/ip/...
Signed-off-by: Jan Friesse jfriesse@redhat.com","ACK. ACK ACK!
I don't see any reason to expose parts of corosync as a library like that TBH. If people want low-level stuff they can use knet, if they want higher level cluster features there's libcpg.",True,{}
corosync/corosync,https://github.com/corosync/corosync,381,2018-09-24T13:16:16Z,2018-09-25T06:24:18Z,2018-09-25T06:24:22Z,CLOSED,False,7,17,2,https://github.com/jfriesse,build: Do not compile totempg as a shared library,1,[],https://github.com/corosync/corosync/pull/381,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/381#issuecomment-424221465,"Instead of compiling totempg as a shared library, compile all totem code
directly into corosync binary.
Main idea of having totempg which may be
used in other projects was nice, but never really finished (and as far
as I know no project were ever really using it). So at the end of the
day, we've end with huge amount of problems (need to pass new arguments
thru X layers, hard debugging, ...) without any real benefit.
For a future version, we may consider to revisit idea of split totemsrp
into well tested library without unrelated bits like transports/ip/...
Signed-off-by: Jan Friesse jfriesse@redhat.com","Thank you for the review, merged as a 853e5b9.",True,{}
corosync/corosync,https://github.com/corosync/corosync,382,2018-09-26T12:06:38Z,2018-09-27T11:03:01Z,2018-09-27T11:03:05Z,CLOSED,False,3,8,3,https://github.com/jfriesse,build: Remove totempg shared library leftovers,1,[],https://github.com/corosync/corosync/pull/382,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/382,"Because totempg is not distributed it doesn't make sense to distribute
totem header files. Also pkgconfig file should not be created any more.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Because totempg is not distributed it doesn't make sense to distribute
totem header files. Also pkgconfig file should not be created any more.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,382,2018-09-26T12:06:38Z,2018-09-27T11:03:01Z,2018-09-27T11:03:05Z,CLOSED,False,3,8,3,https://github.com/jfriesse,build: Remove totempg shared library leftovers,1,[],https://github.com/corosync/corosync/pull/382,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/382#issuecomment-425049770,"Because totempg is not distributed it doesn't make sense to distribute
totem header files. Also pkgconfig file should not be created any more.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c Thank you for the review! I've merged patch as a 40a1384.,True,{}
corosync/corosync,https://github.com/corosync/corosync,383,2018-10-01T11:48:47Z,2018-10-17T07:28:56Z,2018-10-17T07:29:00Z,CLOSED,False,27,2,1,https://github.com/jfriesse,totemcrypto: Fix importing of the private key,1,[],https://github.com/corosync/corosync/pull/383,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/383,"Import key with length not dividable by wrap key block size was not
possible.
Wrapping of the key is standard crypto operation which needs data
aligned to cipher block size, otherwise it fails.
Possible solution is to use a zero filled buffer with size aligned to
required wrap key block size. Private key is copied to the beginning of
the buffer and unwrap operation keeps using only required private key
size.
This patch is ""backport"" of kronosnet/kronosnet#159. I will wait for its review + merge before merging this one.","Import key with length not dividable by wrap key block size was not
possible.
Wrapping of the key is standard crypto operation which needs data
aligned to cipher block size, otherwise it fails.
Possible solution is to use a zero filled buffer with size aligned to
required wrap key block size. Private key is copied to the beginning of
the buffer and unwrap operation keeps using only required private key
size.
This patch is ""backport"" of kronosnet/kronosnet#159. I will wait for its review + merge before merging this one.",True,{}
corosync/corosync,https://github.com/corosync/corosync,383,2018-10-01T11:48:47Z,2018-10-17T07:28:56Z,2018-10-17T07:29:00Z,CLOSED,False,27,2,1,https://github.com/jfriesse,totemcrypto: Fix importing of the private key,1,[],https://github.com/corosync/corosync/pull/383,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/383#issuecomment-425888280,"Import key with length not dividable by wrap key block size was not
possible.
Wrapping of the key is standard crypto operation which needs data
aligned to cipher block size, otherwise it fails.
Possible solution is to use a zero filled buffer with size aligned to
required wrap key block size. Private key is copied to the beginning of
the buffer and unwrap operation keeps using only required private key
size.
This patch is ""backport"" of kronosnet/kronosnet#159. I will wait for its review + merge before merging this one.",Updated commit to retype wrap key in error message to unsigned int (keep sync with kronosnet PR).,True,{}
corosync/corosync,https://github.com/corosync/corosync,383,2018-10-01T11:48:47Z,2018-10-17T07:28:56Z,2018-10-17T07:29:00Z,CLOSED,False,27,2,1,https://github.com/jfriesse,totemcrypto: Fix importing of the private key,1,[],https://github.com/corosync/corosync/pull/383,https://github.com/chrissie-c,3,https://github.com/corosync/corosync/pull/383#issuecomment-430231770,"Import key with length not dividable by wrap key block size was not
possible.
Wrapping of the key is standard crypto operation which needs data
aligned to cipher block size, otherwise it fails.
Possible solution is to use a zero filled buffer with size aligned to
required wrap key block size. Private key is copied to the beginning of
the buffer and unwrap operation keeps using only required private key
size.
This patch is ""backport"" of kronosnet/kronosnet#159. I will wait for its review + merge before merging this one.","It looks pretty much identical to the code in knet, and tests out. so ACK.",True,{}
corosync/corosync,https://github.com/corosync/corosync,383,2018-10-01T11:48:47Z,2018-10-17T07:28:56Z,2018-10-17T07:29:00Z,CLOSED,False,27,2,1,https://github.com/jfriesse,totemcrypto: Fix importing of the private key,1,[],https://github.com/corosync/corosync/pull/383,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/383#issuecomment-430520320,"Import key with length not dividable by wrap key block size was not
possible.
Wrapping of the key is standard crypto operation which needs data
aligned to cipher block size, otherwise it fails.
Possible solution is to use a zero filled buffer with size aligned to
required wrap key block size. Private key is copied to the beginning of
the buffer and unwrap operation keeps using only required private key
size.
This patch is ""backport"" of kronosnet/kronosnet#159. I will wait for its review + merge before merging this one.",Thank you for the review. Merged as a 3f3e6b6.,True,{}
corosync/corosync,https://github.com/corosync/corosync,386,2018-10-02T15:57:26Z,2018-10-04T08:29:17Z,2018-10-04T08:29:22Z,CLOSED,False,2,2,1,https://github.com/jfriesse,man: Fix default knet_pmtud_interval to match code,1,[],https://github.com/corosync/corosync/pull/386,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/386,Signed-off-by: Jan Friesse jfriesse@redhat.com,Signed-off-by: Jan Friesse jfriesse@redhat.com,True,{}
corosync/corosync,https://github.com/corosync/corosync,386,2018-10-02T15:57:26Z,2018-10-04T08:29:17Z,2018-10-04T08:29:22Z,CLOSED,False,2,2,1,https://github.com/jfriesse,man: Fix default knet_pmtud_interval to match code,1,[],https://github.com/corosync/corosync/pull/386,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/386#issuecomment-426930680,Signed-off-by: Jan Friesse jfriesse@redhat.com,"@chrissie-c Thank you for the review/ack, merged as a ec1be51",True,{}
corosync/corosync,https://github.com/corosync/corosync,388,2018-10-08T13:06:04Z,2018-10-15T11:21:38Z,2018-10-15T11:21:38Z,CLOSED,False,113,4,8,https://github.com/jfriesse,log: Implement support for reopening log files,1,[],https://github.com/corosync/corosync/pull/388,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/388,"Feature depends on existence of libqb function qb_log_file_reopen.
Log reopen is called when cmap key runtime.qb.reopen_log_files is
changed. This is used by logrotate script, which calls corosync-cmapctl
to notify corosync, instead of using copytruncate option.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Feature depends on existence of libqb function qb_log_file_reopen.
Log reopen is called when cmap key runtime.qb.reopen_log_files is
changed. This is used by logrotate script, which calls corosync-cmapctl
to notify corosync, instead of using copytruncate option.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,388,2018-10-08T13:06:04Z,2018-10-15T11:21:38Z,2018-10-15T11:21:38Z,CLOSED,False,113,4,8,https://github.com/jfriesse,log: Implement support for reopening log files,1,[],https://github.com/corosync/corosync/pull/388,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/388#issuecomment-427826846,"Feature depends on existence of libqb function qb_log_file_reopen.
Log reopen is called when cmap key runtime.qb.reopen_log_files is
changed. This is used by logrotate script, which calls corosync-cmapctl
to notify corosync, instead of using copytruncate option.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Patch depends on libqb with PR ClusterLabs/libqb#326 merged.
As discussed with @chrissie-c , this PR has problems when QB_LOG_CONF_THREADED is used (corosync) and makes corosync crash.
@wferi Do you think this PR (of course after libqb crash is fixed :) ) fulfill requirements of proper log rotate?",True,{}
corosync/corosync,https://github.com/corosync/corosync,388,2018-10-08T13:06:04Z,2018-10-15T11:21:38Z,2018-10-15T11:21:38Z,CLOSED,False,113,4,8,https://github.com/jfriesse,log: Implement support for reopening log files,1,[],https://github.com/corosync/corosync/pull/388,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/388#issuecomment-427835282,"Feature depends on existence of libqb function qb_log_file_reopen.
Log reopen is called when cmap key runtime.qb.reopen_log_files is
changed. This is used by logrotate script, which calls corosync-cmapctl
to notify corosync, instead of using copytruncate option.
Signed-off-by: Jan Friesse jfriesse@redhat.com",Added man page description of runtime.qb.reopen_log_files,True,{}
corosync/corosync,https://github.com/corosync/corosync,388,2018-10-08T13:06:04Z,2018-10-15T11:21:38Z,2018-10-15T11:21:38Z,CLOSED,False,113,4,8,https://github.com/jfriesse,log: Implement support for reopening log files,1,[],https://github.com/corosync/corosync/pull/388,https://github.com/wferi,4,https://github.com/corosync/corosync/pull/388#issuecomment-427857739,"Feature depends on existence of libqb function qb_log_file_reopen.
Log reopen is called when cmap key runtime.qb.reopen_log_files is
changed. This is used by logrotate script, which calls corosync-cmapctl
to notify corosync, instead of using copytruncate option.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Looks pretty decent, I only miss the propagation of qb_log_file_reopen() errors back to the postrotate script. I know nothing of cmap; is there no support for synchronous operation? If not, corosync-cmapctl could perhaps be extended to ""set a key then report its next change"" (in a race-free way), and make the daemon flip the value back to no after successful reloads (or to some error code otherwise).
By the way: is there a chance that the flushing of logs holds up the event loop long enough to cause token loss?",True,{}
corosync/corosync,https://github.com/corosync/corosync,388,2018-10-08T13:06:04Z,2018-10-15T11:21:38Z,2018-10-15T11:21:38Z,CLOSED,False,113,4,8,https://github.com/jfriesse,log: Implement support for reopening log files,1,[],https://github.com/corosync/corosync/pull/388,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/388#issuecomment-427866000,"Feature depends on existence of libqb function qb_log_file_reopen.
Log reopen is called when cmap key runtime.qb.reopen_log_files is
changed. This is used by logrotate script, which calls corosync-cmapctl
to notify corosync, instead of using copytruncate option.
Signed-off-by: Jan Friesse jfriesse@redhat.com","@wferi No there is no way to report failure back in the layer which we are talking about (it's possible in lower layer and it's used by (for example) statistics).  Currently daemon always flips the value to no. I'm not entirely sure how to implement race-free way passing of qb_log_file_reopen() in cmap without changing a lot of the code.
The question is. How much is reporting error back to logrotate really needed. I mean, how will behavior of logrotate differ when error is returned?
And if error-propagation is really needed, I will probably consider enhancing libcfg (what means bigger change).
Code which calls qb_log_file_reopen() is running in the same thread, so it can cause token loss, but I'm wondering if it can really happen in production environment. And if it does, how we can solve it? Adding thread which just does fclose seems like a real overkill.",True,{}
corosync/corosync,https://github.com/corosync/corosync,388,2018-10-08T13:06:04Z,2018-10-15T11:21:38Z,2018-10-15T11:21:38Z,CLOSED,False,113,4,8,https://github.com/jfriesse,log: Implement support for reopening log files,1,[],https://github.com/corosync/corosync/pull/388,https://github.com/chrissie-c,6,https://github.com/corosync/corosync/pull/388#issuecomment-427870663,"Feature depends on existence of libqb function qb_log_file_reopen.
Log reopen is called when cmap key runtime.qb.reopen_log_files is
changed. This is used by logrotate script, which calls corosync-cmapctl
to notify corosync, instead of using copytruncate option.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Given that file logging already does fflush after each line, the operation of fclose & fopen is not very likely to cause any massive data writebacks.",True,{}
corosync/corosync,https://github.com/corosync/corosync,388,2018-10-08T13:06:04Z,2018-10-15T11:21:38Z,2018-10-15T11:21:38Z,CLOSED,False,113,4,8,https://github.com/jfriesse,log: Implement support for reopening log files,1,[],https://github.com/corosync/corosync/pull/388,https://github.com/wferi,7,https://github.com/corosync/corosync/pull/388#issuecomment-428144431,"Feature depends on existence of libqb function qb_log_file_reopen.
Log reopen is called when cmap key runtime.qb.reopen_log_files is
changed. This is used by logrotate script, which calls corosync-cmapctl
to notify corosync, instead of using copytruncate option.
Signed-off-by: Jan Friesse jfriesse@redhat.com","fflush() empties the application level stdio buffers, moving the data into the kernel page cache. fclose() does the same. Neither pushes the data through the kernel buffers (only fsync() does). This means writeback is not more probable to occur during rotation than plain logging, so creating a new thread for fclose() does not make any sense. Using a dedicated thread for logging would make sense, to provide high precision timestamps and reliable delivery regardless of pathologic I/O jitter, but that's probably overkill and better done in a dedicated log daemon anyway. (Just noting here that syslog() can also block if the other end isn't reading quickly enough.)",True,{}
corosync/corosync,https://github.com/corosync/corosync,388,2018-10-08T13:06:04Z,2018-10-15T11:21:38Z,2018-10-15T11:21:38Z,CLOSED,False,113,4,8,https://github.com/jfriesse,log: Implement support for reopening log files,1,[],https://github.com/corosync/corosync/pull/388,https://github.com/wferi,8,https://github.com/corosync/corosync/pull/388#issuecomment-428150185,"Feature depends on existence of libqb function qb_log_file_reopen.
Log reopen is called when cmap key runtime.qb.reopen_log_files is
changed. This is used by logrotate script, which calls corosync-cmapctl
to notify corosync, instead of using copytruncate option.
Signed-off-by: Jan Friesse jfriesse@redhat.com","No there is no way to report failure back in the layer which we are talking about (it's possible in lower layer and it's used by (for example) statistics). Currently daemon always flips the value to no. I'm not entirely sure how to implement race-free way passing of qb_log_file_reopen() in cmap without changing a lot of the code.
The question is. How much is reporting error back to logrotate really needed. I mean, how will behavior of logrotate differ when error is returned?

It aborts further operation, for example it does not compress the rotated file but reports the error. Compressing a file which is being appended to leads to problems, that's also why the postrotate script shouldn't return before the old log file is closed. Logrotate can be made to lose this race most of the time by specifying the delaycompress option, but this can also mean hiding problems if the failure is permanent. Shame on me I don't know a thing about the Corosync IPC, besides that it does advanced stuff like statistics... what if instead of writing a key you trigger rotation by reading some ""rotation status"" ephemeral key?",True,{}
corosync/corosync,https://github.com/corosync/corosync,388,2018-10-08T13:06:04Z,2018-10-15T11:21:38Z,2018-10-15T11:21:38Z,CLOSED,False,113,4,8,https://github.com/jfriesse,log: Implement support for reopening log files,1,[],https://github.com/corosync/corosync/pull/388,https://github.com/jfriesse,9,https://github.com/corosync/corosync/pull/388#issuecomment-428157163,"Feature depends on existence of libqb function qb_log_file_reopen.
Log reopen is called when cmap key runtime.qb.reopen_log_files is
changed. This is used by logrotate script, which calls corosync-cmapctl
to notify corosync, instead of using copytruncate option.
Signed-off-by: Jan Friesse jfriesse@redhat.com","@wferi: Ok, so I believe we are on same page in regards of token loss because of reopen log file.
Thank you for the explanation of what happens during logrotate. I must say man page is not entirely informative (there is a small note ""the  remaining  actions will not be executed for any logs."" but I was really unsure what they mean by other actions). So it looks like I will have to implement cfg version (or thinking about enhancing cmap ... but such change would probably require also the change in qb trie.c what is super dangerous. I mean, walking blindly in the minefield is much safer).",True,{}
corosync/corosync,https://github.com/corosync/corosync,388,2018-10-08T13:06:04Z,2018-10-15T11:21:38Z,2018-10-15T11:21:38Z,CLOSED,False,113,4,8,https://github.com/jfriesse,log: Implement support for reopening log files,1,[],https://github.com/corosync/corosync/pull/388,https://github.com/jfriesse,10,https://github.com/corosync/corosync/pull/388#issuecomment-429812229,"Feature depends on existence of libqb function qb_log_file_reopen.
Log reopen is called when cmap key runtime.qb.reopen_log_files is
changed. This is used by logrotate script, which calls corosync-cmapctl
to notify corosync, instead of using copytruncate option.
Signed-off-by: Jan Friesse jfriesse@redhat.com",closing in favor of #390,True,{}
corosync/corosync,https://github.com/corosync/corosync,390,2018-10-15T11:20:50Z,2018-10-16T12:49:16Z,2018-10-16T12:49:21Z,CLOSED,False,223,19,15,https://github.com/jfriesse,log: Implement support for reopening log files - Try 2 - using cfg service,1,[],https://github.com/corosync/corosync/pull/390,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/390,"Feature depends on existence of libqb function qb_log_file_reopen.
New function call is added into CFG service API. This function is
used by corosync-cfgtool which now accepts -L parameter.
Finally, logrotate ""postrotate"" script is calling
corosync-cfgtool -L to notify corosync, instead of using
copytruncate option.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Feature depends on existence of libqb function qb_log_file_reopen.
New function call is added into CFG service API. This function is
used by corosync-cfgtool which now accepts -L parameter.
Finally, logrotate ""postrotate"" script is calling
corosync-cfgtool -L to notify corosync, instead of using
copytruncate option.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,390,2018-10-15T11:20:50Z,2018-10-16T12:49:16Z,2018-10-16T12:49:21Z,CLOSED,False,223,19,15,https://github.com/jfriesse,log: Implement support for reopening log files - Try 2 - using cfg service,1,[],https://github.com/corosync/corosync/pull/390,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/390#issuecomment-429813623,"Feature depends on existence of libqb function qb_log_file_reopen.
New function call is added into CFG service API. This function is
used by corosync-cfgtool which now accepts -L parameter.
Finally, logrotate ""postrotate"" script is calling
corosync-cfgtool -L to notify corosync, instead of using
copytruncate option.
Signed-off-by: Jan Friesse jfriesse@redhat.com","This patch also removes CRYPTO_SET. This was removed long time ago, but enum symbol was not removed (probably) because of binary compatibility. I believe we can remove it now, because:

3.0 is not yet final
Change can break only reload operation and only when new corosync is used with old libraries or some cfg call is used in statically linked binary or somebody is ""brave"" enough to call libcfg api calls directly (instead of using libcfg). I don't think any of these really happens.",True,{}
corosync/corosync,https://github.com/corosync/corosync,390,2018-10-15T11:20:50Z,2018-10-16T12:49:16Z,2018-10-16T12:49:21Z,CLOSED,False,223,19,15,https://github.com/jfriesse,log: Implement support for reopening log files - Try 2 - using cfg service,1,[],https://github.com/corosync/corosync/pull/390,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/390#issuecomment-430224242,"Feature depends on existence of libqb function qb_log_file_reopen.
New function call is added into CFG service API. This function is
used by corosync-cfgtool which now accepts -L parameter.
Finally, logrotate ""postrotate"" script is calling
corosync-cfgtool -L to notify corosync, instead of using
copytruncate option.
Signed-off-by: Jan Friesse jfriesse@redhat.com","@chrissie-c Thank you for the review, I've merged the patch as a 82f35f1.
Man pages (for some reason) has a variety of date formats and it would be nice to settle to one of them (personally I like ISO one YYYY-MM-DD most). I will prepare PR.",True,{}
corosync/corosync,https://github.com/corosync/corosync,391,2018-10-15T12:57:14Z,2018-10-15T13:56:16Z,2018-10-15T13:56:16Z,CLOSED,False,4,6,4,https://github.com/chrissie-c,config: Fix crash in reload if new interfaces are added,1,[],https://github.com/corosync/corosync/pull/391,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/391,"This is a bug I seem to have introduced in
429209f where we compare links
for changes. if a new node was added on an existing link then it
was compared against a non-existant one in the previous configuration.
We now only compare nodes that are in both interfaces.
As I needed min() for this function, I moved it from individual
.c files into util.h so we only have one copy.
And the error message was fixed.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","This is a bug I seem to have introduced in
429209f where we compare links
for changes. if a new node was added on an existing link then it
was compared against a non-existant one in the previous configuration.
We now only compare nodes that are in both interfaces.
As I needed min() for this function, I moved it from individual
.c files into util.h so we only have one copy.
And the error message was fixed.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,391,2018-10-15T12:57:14Z,2018-10-15T13:56:16Z,2018-10-15T13:56:16Z,CLOSED,False,4,6,4,https://github.com/chrissie-c,config: Fix crash in reload if new interfaces are added,1,[],https://github.com/corosync/corosync/pull/391,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/391#issuecomment-429862121,"This is a bug I seem to have introduced in
429209f where we compare links
for changes. if a new node was added on an existing link then it
was compared against a non-existant one in the previous configuration.
We now only compare nodes that are in both interfaces.
As I needed min() for this function, I moved it from individual
.c files into util.h so we only have one copy.
And the error message was fixed.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","ACK and merged as a 9f2d5a3
Thank you for quick solution of the issue!",True,{}
corosync/corosync,https://github.com/corosync/corosync,392,2018-10-16T08:32:34Z,2018-10-16T10:32:57Z,2018-10-16T10:33:02Z,CLOSED,False,2,1,1,https://github.com/jfriesse,totemconfig: Replace strcpy by strncpy,1,[],https://github.com/corosync/corosync/pull/392,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/392,"Formally not needed, because totemip_print should not return string
longer than INET6_ADDRSTRLEN, but static analysis tools are not capable
of such conclusion.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Formally not needed, because totemip_print should not return string
longer than INET6_ADDRSTRLEN, but static analysis tools are not capable
of such conclusion.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,392,2018-10-16T08:32:34Z,2018-10-16T10:32:57Z,2018-10-16T10:33:02Z,CLOSED,False,2,1,1,https://github.com/jfriesse,totemconfig: Replace strcpy by strncpy,1,[],https://github.com/corosync/corosync/pull/392,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/392#issuecomment-430187280,"Formally not needed, because totemip_print should not return string
longer than INET6_ADDRSTRLEN, but static analysis tools are not capable
of such conclusion.
Signed-off-by: Jan Friesse jfriesse@redhat.com","@chrissie-c :)
Thank you for the review and merged as a b13ab76",True,{}
corosync/corosync,https://github.com/corosync/corosync,393,2018-10-22T10:25:11Z,2018-10-22T15:41:09Z,2018-10-22T15:41:12Z,CLOSED,False,32,220,5,https://github.com/jfriesse,config example: Migrate to newer syntax,1,[],https://github.com/corosync/corosync/pull/393,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/393,"Default config is knet with nodelist so extra udpu example is no longer
needed.
XML variant of corosync config never got expected usage, so delete
example config too.
Signed-off-by: Jan Friesse jfriesse@redhat.com
Ideas and/or englishify more than welcomed.","Default config is knet with nodelist so extra udpu example is no longer
needed.
XML variant of corosync config never got expected usage, so delete
example config too.
Signed-off-by: Jan Friesse jfriesse@redhat.com
Ideas and/or englishify more than welcomed.",True,{}
corosync/corosync,https://github.com/corosync/corosync,393,2018-10-22T10:25:11Z,2018-10-22T15:41:09Z,2018-10-22T15:41:12Z,CLOSED,False,32,220,5,https://github.com/jfriesse,config example: Migrate to newer syntax,1,[],https://github.com/corosync/corosync/pull/393,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/393#issuecomment-431872803,"Default config is knet with nodelist so extra udpu example is no longer
needed.
XML variant of corosync config never got expected usage, so delete
example config too.
Signed-off-by: Jan Friesse jfriesse@redhat.com
Ideas and/or englishify more than welcomed.","@chrissie-c Thank you for the review, I've merged patch as a fa4289b",True,{}
corosync/corosync,https://github.com/corosync/corosync,395,2018-10-25T10:39:35Z,2018-10-25T16:22:06Z,2018-10-25T16:22:06Z,CLOSED,False,50,19,3,https://github.com/chrissie-c,config: Allow generated nodeis for UDP & UDPU,1,[],https://github.com/corosync/corosync/pull/395,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/395,"The conversion to the new srp_addr format broke the feature where
UDP/UDPU nodes could get their nodeids generated from the IP address.
A big part of this was the removal of mandatory ring0_addr - it was used
as a placeholder when reading down the nodelist. I replaced this with
nodeid thinking that nodeid was now mandatory, forgetting this use case.
So the compare on ""ring0_addr"" or ""nodeid"" is now replaced with a more
robust check that we're only reading keys from the same node_pos once,
this was needed in votequorum.c as well as totemconfig.c
Another tidying side-effect of this patch is that the nodeid generation
is now all in a single routine in totemconfig.c and not shared between
it and totemip.c.
I've compared with the transport with ==UDPU/UDP rather than !=KNET just in case we add other transports. (very unlikely but this way it's clearer that only these two support implicit nodeids).
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","The conversion to the new srp_addr format broke the feature where
UDP/UDPU nodes could get their nodeids generated from the IP address.
A big part of this was the removal of mandatory ring0_addr - it was used
as a placeholder when reading down the nodelist. I replaced this with
nodeid thinking that nodeid was now mandatory, forgetting this use case.
So the compare on ""ring0_addr"" or ""nodeid"" is now replaced with a more
robust check that we're only reading keys from the same node_pos once,
this was needed in votequorum.c as well as totemconfig.c
Another tidying side-effect of this patch is that the nodeid generation
is now all in a single routine in totemconfig.c and not shared between
it and totemip.c.
I've compared with the transport with ==UDPU/UDP rather than !=KNET just in case we add other transports. (very unlikely but this way it's clearer that only these two support implicit nodeids).
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,395,2018-10-25T10:39:35Z,2018-10-25T16:22:06Z,2018-10-25T16:22:06Z,CLOSED,False,50,19,3,https://github.com/chrissie-c,config: Allow generated nodeis for UDP & UDPU,1,[],https://github.com/corosync/corosync/pull/395,https://github.com/chrissie-c,2,https://github.com/corosync/corosync/pull/395#issuecomment-433035488,"The conversion to the new srp_addr format broke the feature where
UDP/UDPU nodes could get their nodeids generated from the IP address.
A big part of this was the removal of mandatory ring0_addr - it was used
as a placeholder when reading down the nodelist. I replaced this with
nodeid thinking that nodeid was now mandatory, forgetting this use case.
So the compare on ""ring0_addr"" or ""nodeid"" is now replaced with a more
robust check that we're only reading keys from the same node_pos once,
this was needed in votequorum.c as well as totemconfig.c
Another tidying side-effect of this patch is that the nodeid generation
is now all in a single routine in totemconfig.c and not shared between
it and totemip.c.
I've compared with the transport with ==UDPU/UDP rather than !=KNET just in case we add other transports. (very unlikely but this way it's clearer that only these two support implicit nodeids).
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","oops about totemip.c. Revised patch force pushed with more comments too,",True,{}
corosync/corosync,https://github.com/corosync/corosync,395,2018-10-25T10:39:35Z,2018-10-25T16:22:06Z,2018-10-25T16:22:06Z,CLOSED,False,50,19,3,https://github.com/chrissie-c,config: Allow generated nodeis for UDP & UDPU,1,[],https://github.com/corosync/corosync/pull/395,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/395#issuecomment-433116161,"The conversion to the new srp_addr format broke the feature where
UDP/UDPU nodes could get their nodeids generated from the IP address.
A big part of this was the removal of mandatory ring0_addr - it was used
as a placeholder when reading down the nodelist. I replaced this with
nodeid thinking that nodeid was now mandatory, forgetting this use case.
So the compare on ""ring0_addr"" or ""nodeid"" is now replaced with a more
robust check that we're only reading keys from the same node_pos once,
this was needed in votequorum.c as well as totemconfig.c
Another tidying side-effect of this patch is that the nodeid generation
is now all in a single routine in totemconfig.c and not shared between
it and totemip.c.
I've compared with the transport with ==UDPU/UDP rather than !=KNET just in case we add other transports. (very unlikely but this way it's clearer that only these two support implicit nodeids).
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",@chrissie-c Thank you for fixing nitpicks. ACK and merged as a 707a9af.,True,{}
corosync/corosync,https://github.com/corosync/corosync,396,2018-10-26T14:50:28Z,2018-10-29T16:46:31Z,2018-10-29T16:46:35Z,CLOSED,False,55,25,5,https://github.com/jfriesse,Hires timestamp,3,[],https://github.com/corosync/corosync/pull/396,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/396,"Last patch (make hires timestamp default) is to discuss, but I really like these hires timestamps (they are almost addictive).","Last patch (make hires timestamp default) is to discuss, but I really like these hires timestamps (they are almost addictive).",True,{}
corosync/corosync,https://github.com/corosync/corosync,396,2018-10-26T14:50:28Z,2018-10-29T16:46:31Z,2018-10-29T16:46:35Z,CLOSED,False,55,25,5,https://github.com/jfriesse,Hires timestamp,3,[],https://github.com/corosync/corosync/pull/396,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/396#issuecomment-433979218,"Last patch (make hires timestamp default) is to discuss, but I really like these hires timestamps (they are almost addictive).","@chrissie-c Thank you for the review. I've changed example bit (and force pushed), so it should be good to go now.",True,{}
corosync/corosync,https://github.com/corosync/corosync,396,2018-10-26T14:50:28Z,2018-10-29T16:46:31Z,2018-10-29T16:46:35Z,CLOSED,False,55,25,5,https://github.com/jfriesse,Hires timestamp,3,[],https://github.com/corosync/corosync/pull/396,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/396#issuecomment-433986127,"Last patch (make hires timestamp default) is to discuss, but I really like these hires timestamps (they are almost addictive).",@chrissie-c Thank you again for the review. I've merged patchset as a 48cb28b .,True,{}
corosync/corosync,https://github.com/corosync/corosync,397,2018-11-07T14:21:05Z,2018-11-07T14:24:34Z,2018-11-07T14:24:39Z,CLOSED,False,2,2,1,https://github.com/jfriesse,configure: move to AC_COMPILE_IFELSE,1,[],https://github.com/corosync/corosync/pull/397,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/397,"from AC_PREPROC_IFELSE which is strongly discouraged.
Our detection system was very weak and recent versions of clang did
show that PREPROC_IFELFE (cpp) would enable warning options that
the compiler does not support (clang).
Use a full compilation test to detect what works and what doesn't.
Based on knet patch 88491f27375a9e8aceb946853a1abf4d23ebb8f3.
Signed-off-by: Jan Friesse jfriesse@redhat.com","from AC_PREPROC_IFELSE which is strongly discouraged.
Our detection system was very weak and recent versions of clang did
show that PREPROC_IFELFE (cpp) would enable warning options that
the compiler does not support (clang).
Use a full compilation test to detect what works and what doesn't.
Based on knet patch 88491f27375a9e8aceb946853a1abf4d23ebb8f3.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,397,2018-11-07T14:21:05Z,2018-11-07T14:24:34Z,2018-11-07T14:24:39Z,CLOSED,False,2,2,1,https://github.com/jfriesse,configure: move to AC_COMPILE_IFELSE,1,[],https://github.com/corosync/corosync/pull/397,https://github.com/fabbione,2,https://github.com/corosync/corosync/pull/397#issuecomment-436638394,"from AC_PREPROC_IFELSE which is strongly discouraged.
Our detection system was very weak and recent versions of clang did
show that PREPROC_IFELFE (cpp) would enable warning options that
the compiler does not support (clang).
Use a full compilation test to detect what works and what doesn't.
Based on knet patch 88491f27375a9e8aceb946853a1abf4d23ebb8f3.
Signed-off-by: Jan Friesse jfriesse@redhat.com","ack et all, with love, rainbows and unicorns.",True,{}
corosync/corosync,https://github.com/corosync/corosync,397,2018-11-07T14:21:05Z,2018-11-07T14:24:34Z,2018-11-07T14:24:39Z,CLOSED,False,2,2,1,https://github.com/jfriesse,configure: move to AC_COMPILE_IFELSE,1,[],https://github.com/corosync/corosync/pull/397,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/397#issuecomment-436639227,"from AC_PREPROC_IFELSE which is strongly discouraged.
Our detection system was very weak and recent versions of clang did
show that PREPROC_IFELFE (cpp) would enable warning options that
the compiler does not support (clang).
Use a full compilation test to detect what works and what doesn't.
Based on knet patch 88491f27375a9e8aceb946853a1abf4d23ebb8f3.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@fabbione Thank you for the review. I've merged as a 00ca339 (master) and aaa189d (needle).,True,{}
corosync/corosync,https://github.com/corosync/corosync,398,2018-11-12T08:40:18Z,2018-11-12T09:43:16Z,2018-11-12T09:43:16Z,CLOSED,False,0,1,1,https://github.com/chrissie-c,libcpg: Don't use fprintf in a library,1,[],https://github.com/corosync/corosync/pull/398,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/398,See above,See above,True,{}
corosync/corosync,https://github.com/corosync/corosync,398,2018-11-12T08:40:18Z,2018-11-12T09:43:16Z,2018-11-12T09:43:16Z,CLOSED,False,0,1,1,https://github.com/chrissie-c,libcpg: Don't use fprintf in a library,1,[],https://github.com/corosync/corosync/pull/398,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/398#issuecomment-437816857,See above,"Good catch. ACK and merged as a 2554ce44c6489aa5a5ba208558d43c03b485dafb (master) and d766ede7d2144e7146a26bcb52f754375b986d7e (needle)
Thank you for the patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,400,2018-11-13T16:40:18Z,2018-11-15T16:31:27Z,2018-11-15T16:31:32Z,CLOSED,False,216,131,11,https://github.com/jfriesse,Config system,5,[],https://github.com/corosync/corosync/pull/400,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/400,"Set of patches to fix #263. Reasons for implementing it are described in #258 (comment)
Edit: Also there is unrelated patch containing description of name with (shamelessly stolen) description of local node selection algorithm.","Set of patches to fix #263. Reasons for implementing it are described in #258 (comment)
Edit: Also there is unrelated patch containing description of name with (shamelessly stolen) description of local node selection algorithm.",True,{}
corosync/corosync,https://github.com/corosync/corosync,400,2018-11-13T16:40:18Z,2018-11-15T16:31:27Z,2018-11-15T16:31:32Z,CLOSED,False,216,131,11,https://github.com/jfriesse,Config system,5,[],https://github.com/corosync/corosync/pull/400,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/400#issuecomment-438593597,"Set of patches to fix #263. Reasons for implementing it are described in #258 (comment)
Edit: Also there is unrelated patch containing description of name with (shamelessly stolen) description of local node selection algorithm.","PR updated to fix compiler warning.
Also one small comment about removal of warning for move to root cgruop feature. It turns out, that systemd realtime package is actually trying to solve similar problem as corosync has with cgroups, but sadly it's not intended for packagers usage. It's really intended to be properly configured by user who must decide which RT applications are important and give them proper RT bucks. We have (bad) experiences when corosync was not RT scheduled (users/customers used to have a huge troubles with random fencing, ...). Forcing everybody to make manual configuration seems like a not a way to go for me, especially when code to move to root cgroup is reasonably small and easy.",True,{}
corosync/corosync,https://github.com/corosync/corosync,400,2018-11-13T16:40:18Z,2018-11-15T16:31:27Z,2018-11-15T16:31:32Z,CLOSED,False,216,131,11,https://github.com/jfriesse,Config system,5,[],https://github.com/corosync/corosync/pull/400,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/400#issuecomment-439102630,"Set of patches to fix #263. Reasons for implementing it are described in #258 (comment)
Edit: Also there is unrelated patch containing description of name with (shamelessly stolen) description of local node selection algorithm.",Thank you for the review. I've merged patches as fec6bfd..cd4d5fd,True,{}
corosync/corosync,https://github.com/corosync/corosync,401,2018-11-14T17:21:49Z,2018-11-15T16:41:43Z,2018-11-15T16:41:48Z,CLOSED,False,46,7,1,https://github.com/jfriesse,init: Fix init script to work with containers,1,[],https://github.com/corosync/corosync/pull/401,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/401,"Previously init scripts were not using pid file so pidof was used. This
is usually not a problem, but when containers are used it may result to
killing improper instance when issued on host.
Solution is to always use pidfile.
Also try to use LSB complaint status codes.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Previously init scripts were not using pid file so pidof was used. This
is usually not a problem, but when containers are used it may result to
killing improper instance when issued on host.
Solution is to always use pidfile.
Also try to use LSB complaint status codes.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,401,2018-11-14T17:21:49Z,2018-11-15T16:41:43Z,2018-11-15T16:41:48Z,CLOSED,False,46,7,1,https://github.com/jfriesse,init: Fix init script to work with containers,1,[],https://github.com/corosync/corosync/pull/401,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/401#issuecomment-438745996,"Previously init scripts were not using pid file so pidof was used. This
is usually not a problem, but when containers are used it may result to
killing improper instance when issued on host.
Solution is to always use pidfile.
Also try to use LSB complaint status codes.
Signed-off-by: Jan Friesse jfriesse@redhat.com","This should fix #194 and #138.
For needle this patch and corosync/corosync-qdevice#3 must be applied.
Edit: corosync-notifyd is not fixed, because it doesn't create pid file. It's probably to be able to run multiple times and it makes some kind of sense.",True,{}
corosync/corosync,https://github.com/corosync/corosync,401,2018-11-14T17:21:49Z,2018-11-15T16:41:43Z,2018-11-15T16:41:48Z,CLOSED,False,46,7,1,https://github.com/jfriesse,init: Fix init script to work with containers,1,[],https://github.com/corosync/corosync/pull/401,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/401#issuecomment-439106269,"Previously init scripts were not using pid file so pidof was used. This
is usually not a problem, but when containers are used it may result to
killing improper instance when issued on host.
Solution is to always use pidfile.
Also try to use LSB complaint status codes.
Signed-off-by: Jan Friesse jfriesse@redhat.com",Thank you for the review. I've merged to master as a 4e77f10 and  711ca66 (cherry-picked from corosync) / 25375b6 (cherry-picked from corosync/corosync-qdevice@1965225) to needle.,True,{}
corosync/corosync,https://github.com/corosync/corosync,402,2018-11-15T01:23:56Z,2018-11-15T15:23:13Z,2018-11-15T21:27:00Z,CLOSED,False,9,4,1,https://github.com/HideoYamauchi,Mid: corosync-notifyd: Delete the registered tracking key.,1,[],https://github.com/corosync/corosync/pull/402,https://github.com/HideoYamauchi,1,https://github.com/corosync/corosync/pull/402,"Hi All,
This modified PR was discussed in the next issue.

#399

Delete the registered tracking key before stopping.
Best Regards,
Hideo Yamauchi.","Hi All,
This modified PR was discussed in the next issue.

#399

Delete the registered tracking key before stopping.
Best Regards,
Hideo Yamauchi.",True,{}
corosync/corosync,https://github.com/corosync/corosync,402,2018-11-15T01:23:56Z,2018-11-15T15:23:13Z,2018-11-15T21:27:00Z,CLOSED,False,9,4,1,https://github.com/HideoYamauchi,Mid: corosync-notifyd: Delete the registered tracking key.,1,[],https://github.com/corosync/corosync/pull/402,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/402#issuecomment-438881058,"Hi All,
This modified PR was discussed in the next issue.

#399

Delete the registered tracking key before stopping.
Best Regards,
Hideo Yamauchi.",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,402,2018-11-15T01:23:56Z,2018-11-15T15:23:13Z,2018-11-15T21:27:00Z,CLOSED,False,9,4,1,https://github.com/HideoYamauchi,Mid: corosync-notifyd: Delete the registered tracking key.,1,[],https://github.com/corosync/corosync/pull/402,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/402#issuecomment-439020414,"Hi All,
This modified PR was discussed in the next issue.

#399

Delete the registered tracking key before stopping.
Best Regards,
Hideo Yamauchi.",@knet-ci-bot test this please,True,{}
corosync/corosync,https://github.com/corosync/corosync,402,2018-11-15T01:23:56Z,2018-11-15T15:23:13Z,2018-11-15T21:27:00Z,CLOSED,False,9,4,1,https://github.com/HideoYamauchi,Mid: corosync-notifyd: Delete the registered tracking key.,1,[],https://github.com/corosync/corosync/pull/402,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/402#issuecomment-439077616,"Hi All,
This modified PR was discussed in the next issue.

#399

Delete the registered tracking key before stopping.
Best Regards,
Hideo Yamauchi.","@HideoYamauchi Thank you for the patch. Merged into needle, but master forwardport seems to be more painful than I've expected, because some weird problem appeared (cmap_track_del returns error for stats map).
I will open new PR containing also fix for it.",True,{}
corosync/corosync,https://github.com/corosync/corosync,402,2018-11-15T01:23:56Z,2018-11-15T15:23:13Z,2018-11-15T21:27:00Z,CLOSED,False,9,4,1,https://github.com/HideoYamauchi,Mid: corosync-notifyd: Delete the registered tracking key.,1,[],https://github.com/corosync/corosync/pull/402,https://github.com/HideoYamauchi,5,https://github.com/corosync/corosync/pull/402#issuecomment-439196082,"Hi All,
This modified PR was discussed in the next issue.

#399

Delete the registered tracking key before stopping.
Best Regards,
Hideo Yamauchi.","Hi Jan,

Thank you for the patch. Merged into needle, but master forwardport seems to be more painful than I've expected, because some weird problem appeared (cmap_track_del returns error for stats map).

Thanks!

I will open new PR containing also fix for it.

All right.
Many thanks!
Hideo Yamauchi.",True,{}
corosync/corosync,https://github.com/corosync/corosync,403,2018-11-15T16:10:51Z,2018-11-16T10:48:40Z,2018-11-16T10:48:43Z,CLOSED,False,22,8,3,https://github.com/jfriesse,corosync-notifyd: Delete the registered tracking key - master (and fix cmap/stats.c),2,[],https://github.com/corosync/corosync/pull/403,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/403,"@chrissie-c Careful review is needed specially for first patch. I have no doubts about first part (= call proper function to get user data), but I'm not sure about second part (maybe there was a reason why tracker->events was initialized only for add/delete)?","@chrissie-c Careful review is needed specially for first patch. I have no doubts about first part (= call proper function to get user data), but I'm not sure about second part (maybe there was a reason why tracker->events was initialized only for add/delete)?",True,{}
corosync/corosync,https://github.com/corosync/corosync,403,2018-11-15T16:10:51Z,2018-11-16T10:48:40Z,2018-11-16T10:48:43Z,CLOSED,False,22,8,3,https://github.com/jfriesse,corosync-notifyd: Delete the registered tracking key - master (and fix cmap/stats.c),2,[],https://github.com/corosync/corosync/pull/403,https://github.com/chrissie-c,2,https://github.com/corosync/corosync/pull/403#issuecomment-439345566,"@chrissie-c Careful review is needed specially for first patch. I have no doubts about first part (= call proper function to get user data), but I'm not sure about second part (maybe there was a reason why tracker->events was initialized only for add/delete)?","it all looks fine to me. The fact that tracker->events was only initialised for add/delete is actually a bug, though not a serious one as it's only really used for add/delete. The timer trigger (which is what triggers the valgrind warning) is really a way of shortcutting a string comparison for add/delete trackers when notifying of value changes.",True,{}
corosync/corosync,https://github.com/corosync/corosync,403,2018-11-15T16:10:51Z,2018-11-16T10:48:40Z,2018-11-16T10:48:43Z,CLOSED,False,22,8,3,https://github.com/jfriesse,corosync-notifyd: Delete the registered tracking key - master (and fix cmap/stats.c),2,[],https://github.com/corosync/corosync/pull/403,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/403#issuecomment-439356123,"@chrissie-c Careful review is needed specially for first patch. I have no doubts about first part (= call proper function to get user data), but I'm not sure about second part (maybe there was a reason why tracker->events was initialized only for add/delete)?","Ok, perfect. I didn't noticed timer trigger warnings, warnings which I've noticed were in stats_map_track_delete (if ((tracker->events & ICMAP_TRACK_ADD) || part). Even that was not super serious.
Thank you for the review and I've merged patchset as a db7eebf .. c41ab89",True,{}
corosync/corosync,https://github.com/corosync/corosync,404,2018-11-23T15:03:37Z,2018-11-29T16:51:43Z,2018-11-29T16:52:45Z,CLOSED,False,6,4,3,https://github.com/jfriesse,Fix small problems found by coverity,3,[],https://github.com/corosync/corosync/pull/404,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/404,None of this problems were really serious but I think it's good to have them fixed anyway.,None of this problems were really serious but I think it's good to have them fixed anyway.,True,{}
corosync/corosync,https://github.com/corosync/corosync,404,2018-11-23T15:03:37Z,2018-11-29T16:51:43Z,2018-11-29T16:52:45Z,CLOSED,False,6,4,3,https://github.com/jfriesse,Fix small problems found by coverity,3,[],https://github.com/corosync/corosync/pull/404,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/404#issuecomment-442908343,None of this problems were really serious but I think it's good to have them fixed anyway.,Thank you for the review. Merged as a 42aded4..bcff529,True,{}
corosync/corosync,https://github.com/corosync/corosync,405,2018-11-29T17:02:11Z,,2021-12-27T05:19:09Z,OPEN,False,52,21,9,https://github.com/jfriesse,Pkgconfig fixes,2,[],https://github.com/corosync/corosync/pull/405,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/405,"Tested by removing all system corosync libraries (libcpg.so, ...),configure corosync with --enable-static --disable-shared parameters and installed.  Then compiling tests/tools (with small modifications, like removal of #include <config.h>, ...) with command similar to:
 gcc `pkg-config --cflags libsam`  -pthread testsam.c  `pkg-config --libs --static libsam`

Second patch is result of compiling quorumtool. Not entirely needed, but IMHO user of libraries should have (to some level) similar constants available as programs linked in corosync tree.","Tested by removing all system corosync libraries (libcpg.so, ...),configure corosync with --enable-static --disable-shared parameters and installed.  Then compiling tests/tools (with small modifications, like removal of #include <config.h>, ...) with command similar to:
 gcc `pkg-config --cflags libsam`  -pthread testsam.c  `pkg-config --libs --static libsam`

Second patch is result of compiling quorumtool. Not entirely needed, but IMHO user of libraries should have (to some level) similar constants available as programs linked in corosync tree.",True,{}
corosync/corosync,https://github.com/corosync/corosync,405,2018-11-29T17:02:11Z,,2021-12-27T05:19:09Z,OPEN,False,52,21,9,https://github.com/jfriesse,Pkgconfig fixes,2,[],https://github.com/corosync/corosync/pull/405,https://github.com/wferi,2,https://github.com/corosync/corosync/pull/405#issuecomment-442994881,"Tested by removing all system corosync libraries (libcpg.so, ...),configure corosync with --enable-static --disable-shared parameters and installed.  Then compiling tests/tools (with small modifications, like removal of #include <config.h>, ...) with command similar to:
 gcc `pkg-config --cflags libsam`  -pthread testsam.c  `pkg-config --libs --static libsam`

Second patch is result of compiling quorumtool. Not entirely needed, but IMHO user of libraries should have (to some level) similar constants available as programs linked in corosync tree.","Hi Honza,
This is definitely much better than my hack in #264, thanks for working on it! Looking at your compile command and the various Corosync headers, I suspect that at least some of the libraries uses Pthreads. Actually, configure puts -lpthread into LIBS, so I think it should be represented in the pkg-config files. Now, there is AX_PTHREAD to do that correctly on several platforms, and as yourself do in the above compile command, under GCC it's done by the -pthread compile flag, not by passing -lpthread to the linker, as done by configure. Basically, the pkg-config Cflags key should include @PTHREAD_CFLAGS@ as set by AX_PTHREAD (and Libs.private should contain @PTHREAD_LIBS@, though that's empty under GCC).
Also, there are other suspicious AC_CHECK_LIB calls in configure. They'd probably better be replaced by AC_SEARCH_LIBS if still needed, and the detected options be put into dedicated variables and used only where needed (including the Libs.private keys of the pkg-config files).
By the way, libz has pkg-config support (except for in very old distros), which you may want to use instead of manually testing for crc32.
Finally, using sed to substitute @LIBDIR@ into the pkg-config files expands it fully, which is against the convention of referencing ${prefix} from it. Also, the Makefile.am and the .pc files are rather repetitive now. It might be advantageous to substitute the paths into a pkg-config_template.in by AC_CONFIG_FILES, then generate the per-library pkg-config files from that by substituting @LIB@ via the Makefile (this second step would not be needed for the two exceptional files). Not a very fleshed out idea, just throwing it in quickly before sleep...
Regards,
Feri.",True,{}
corosync/corosync,https://github.com/corosync/corosync,405,2018-11-29T17:02:11Z,,2021-12-27T05:19:09Z,OPEN,False,52,21,9,https://github.com/jfriesse,Pkgconfig fixes,2,[],https://github.com/corosync/corosync/pull/405,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/405#issuecomment-443134023,"Tested by removing all system corosync libraries (libcpg.so, ...),configure corosync with --enable-static --disable-shared parameters and installed.  Then compiling tests/tools (with small modifications, like removal of #include <config.h>, ...) with command similar to:
 gcc `pkg-config --cflags libsam`  -pthread testsam.c  `pkg-config --libs --static libsam`

Second patch is result of compiling quorumtool. Not entirely needed, but IMHO user of libraries should have (to some level) similar constants available as programs linked in corosync tree.","@wferi Thank you for the comment. Let me split into two parts, one pkg-config related and second is pkg-config unrelated:

Pkg-config related



I will definitively take a look to  AX_PTHREAD, because sam is really using pthread (other libraries do not)


Makefile.am is now super repetitive, but I had really no idea how to fix it. Do you have an example of using AC_CONFIG_FILES, handy? (I'm really far away from being autotools master + we have not a very good relation - autotools hate me and I tends to ignore them as much as possible).



pkg-config unrelated



explore pkg-config of libz looks like a good idea


AC_SEARCH_LIBS yep, may make sense",True,{}
corosync/corosync,https://github.com/corosync/corosync,405,2018-11-29T17:02:11Z,,2021-12-27T05:19:09Z,OPEN,False,52,21,9,https://github.com/jfriesse,Pkgconfig fixes,2,[],https://github.com/corosync/corosync/pull/405,https://github.com/wferi,4,https://github.com/corosync/corosync/pull/405#issuecomment-443148290,"Tested by removing all system corosync libraries (libcpg.so, ...),configure corosync with --enable-static --disable-shared parameters and installed.  Then compiling tests/tools (with small modifications, like removal of #include <config.h>, ...) with command similar to:
 gcc `pkg-config --cflags libsam`  -pthread testsam.c  `pkg-config --libs --static libsam`

Second patch is result of compiling quorumtool. Not entirely needed, but IMHO user of libraries should have (to some level) similar constants available as programs linked in corosync tree.","The basic idea is to fill in @LIB@ by hand then simply stick pkgconfig/libsam.pc into AC_CONFIG_FILES, let Autoconf substitute the rest (paths and flags) and don't handle it in the Makefile.am at all. You can do exactly the same with pkgconfig/libcorosync_common.pc. However, pkgconfig/libtemplate.pc would still require further ""instantiations"" from the Makefile.am (substituting @LIB@, basically, though inventing another syntax for this might be a good idea to reduce confusion).
You could even split out the common variable definition part from the .pc.in files and use a syntax like AC_CONFIG_FILES([pkgconfig/libsam.pc:pkgconfig/header.pc.in:pkgconfig/libsam.pc.in]) and so on.
I'm rather busy at the moment, but maybe able to put something together if you're interested.",True,{}
corosync/corosync,https://github.com/corosync/corosync,405,2018-11-29T17:02:11Z,,2021-12-27T05:19:09Z,OPEN,False,52,21,9,https://github.com/jfriesse,Pkgconfig fixes,2,[],https://github.com/corosync/corosync/pull/405,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/405#issuecomment-443153804,"Tested by removing all system corosync libraries (libcpg.so, ...),configure corosync with --enable-static --disable-shared parameters and installed.  Then compiling tests/tools (with small modifications, like removal of #include <config.h>, ...) with command similar to:
 gcc `pkg-config --cflags libsam`  -pthread testsam.c  `pkg-config --libs --static libsam`

Second patch is result of compiling quorumtool. Not entirely needed, but IMHO user of libraries should have (to some level) similar constants available as programs linked in corosync tree.","@wferi Yes, I'm very interested and this is actually not a huge priority so no need to rush.",True,{}
corosync/corosync,https://github.com/corosync/corosync,405,2018-11-29T17:02:11Z,,2021-12-27T05:19:09Z,OPEN,False,52,21,9,https://github.com/jfriesse,Pkgconfig fixes,2,[],https://github.com/corosync/corosync/pull/405,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/405#issuecomment-443228080,"Tested by removing all system corosync libraries (libcpg.so, ...),configure corosync with --enable-static --disable-shared parameters and installed.  Then compiling tests/tools (with small modifications, like removal of #include <config.h>, ...) with command similar to:
 gcc `pkg-config --cflags libsam`  -pthread testsam.c  `pkg-config --libs --static libsam`

Second patch is result of compiling quorumtool. Not entirely needed, but IMHO user of libraries should have (to some level) similar constants available as programs linked in corosync tree.","Hmm using AX_PTHREAD seems to be pretty PITA. I've tried to make patch and change CFLAGS only where needed (so libsam_la_CFLAGS) what created something like liblibsam_la-sam.versions . Also I really don't understand why/how (correctly) libtool found out that corosync binary needs -pthread. Argh, I so dislike (very mildly said) build systems.",True,{}
corosync/corosync,https://github.com/corosync/corosync,405,2018-11-29T17:02:11Z,,2021-12-27T05:19:09Z,OPEN,False,52,21,9,https://github.com/jfriesse,Pkgconfig fixes,2,[],https://github.com/corosync/corosync/pull/405,https://github.com/jfriesse,7,https://github.com/corosync/corosync/pull/405#issuecomment-443645034,"Tested by removing all system corosync libraries (libcpg.so, ...),configure corosync with --enable-static --disable-shared parameters and installed.  Then compiling tests/tools (with small modifications, like removal of #include <config.h>, ...) with command similar to:
 gcc `pkg-config --cflags libsam`  -pthread testsam.c  `pkg-config --libs --static libsam`

Second patch is result of compiling quorumtool. Not entirely needed, but IMHO user of libraries should have (to some level) similar constants available as programs linked in corosync tree.",After a little more fighting it turned out that it's probably quite useless to try links with ax_pthread macros only when really needed because libqb itself is linked with pthread so it looks like ax_pthread flags may become default without any problems.,True,{}
corosync/corosync,https://github.com/corosync/corosync,405,2018-11-29T17:02:11Z,,2021-12-27T05:19:09Z,OPEN,False,52,21,9,https://github.com/jfriesse,Pkgconfig fixes,2,[],https://github.com/corosync/corosync/pull/405,https://github.com/wferi,8,https://github.com/corosync/corosync/pull/405#issuecomment-446892458,"Tested by removing all system corosync libraries (libcpg.so, ...),configure corosync with --enable-static --disable-shared parameters and installed.  Then compiling tests/tools (with small modifications, like removal of #include <config.h>, ...) with command similar to:
 gcc `pkg-config --cflags libsam`  -pthread testsam.c  `pkg-config --libs --static libsam`

Second patch is result of compiling quorumtool. Not entirely needed, but IMHO user of libraries should have (to some level) similar constants available as programs linked in corosync tree.","Libqb just started to expose its pthread dependecy (ClusterLabs/libqb#332). This means that Corosync will pick it up correctly (as -pthread) from the next libqb release, but right now it uses -lpthread, which comes from
AC_CHECK_LIB([pthread], [pthread_create])

and which is not fully correct because (under GCC) -pthread affects the preprocessor as well. This is what AX_PTHREAD is supposed to handle across various platforms.
Even then, relying on libqb to provide the necessary flags is fragile and does not help with providing correct pkg-config files for the Corosync libraries themselves, so I think being explicit still has merits. I'm giving it a shot now.",True,{}
corosync/corosync,https://github.com/corosync/corosync,405,2018-11-29T17:02:11Z,,2021-12-27T05:19:09Z,OPEN,False,52,21,9,https://github.com/jfriesse,Pkgconfig fixes,2,[],https://github.com/corosync/corosync/pull/405,https://github.com/jfriesse,9,https://github.com/corosync/corosync/pull/405#issuecomment-447275907,"Tested by removing all system corosync libraries (libcpg.so, ...),configure corosync with --enable-static --disable-shared parameters and installed.  Then compiling tests/tools (with small modifications, like removal of #include <config.h>, ...) with command similar to:
 gcc `pkg-config --cflags libsam`  -pthread testsam.c  `pkg-config --libs --static libsam`

Second patch is result of compiling quorumtool. Not entirely needed, but IMHO user of libraries should have (to some level) similar constants available as programs linked in corosync tree.","@wferi Yes, actually I have kind of working AX_PTHREAD patch, but I haven't finished it yet, because of different problems. Also this issue is not super urgent and also not a blocker for 3.0.0, so I will push it forward after Christmas.
btw. have you got chance to try #405 (comment)? I don't really need full implementation, just and example would be helpful.",True,{}
corosync/corosync,https://github.com/corosync/corosync,405,2018-11-29T17:02:11Z,,2021-12-27T05:19:09Z,OPEN,False,52,21,9,https://github.com/jfriesse,Pkgconfig fixes,2,[],https://github.com/corosync/corosync/pull/405,https://github.com/wferi,10,https://github.com/corosync/corosync/pull/405#issuecomment-447277276,"Tested by removing all system corosync libraries (libcpg.so, ...),configure corosync with --enable-static --disable-shared parameters and installed.  Then compiling tests/tools (with small modifications, like removal of #include <config.h>, ...) with command similar to:
 gcc `pkg-config --cflags libsam`  -pthread testsam.c  `pkg-config --libs --static libsam`

Second patch is result of compiling quorumtool. Not entirely needed, but IMHO user of libraries should have (to some level) similar constants available as programs linked in corosync tree.","I'm working on it on and off (mostly off, unfortunately), but I hope to present something today.",True,{}
corosync/corosync,https://github.com/corosync/corosync,407,2018-12-03T15:30:49Z,2018-12-03T16:26:22Z,2018-12-03T16:26:22Z,CLOSED,False,46,11,1,https://github.com/chrissie-c,config:  Report IP address/nodename parse errors,1,[],https://github.com/corosync/corosync/pull/407,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/407,"Corosync used to just ignore parse errors so that un-resolved names
could cause silent failures. We now always check the result from
totemip_parse() and at least print something in syslog.
There's also a little get-out here that allows you to correct
a bad node address without having to destroy and recreate the
whole link. I'm being nice to you.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","Corosync used to just ignore parse errors so that un-resolved names
could cause silent failures. We now always check the result from
totemip_parse() and at least print something in syslog.
There's also a little get-out here that allows you to correct
a bad node address without having to destroy and recreate the
whole link. I'm being nice to you.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,407,2018-12-03T15:30:49Z,2018-12-03T16:26:22Z,2018-12-03T16:26:22Z,CLOSED,False,46,11,1,https://github.com/chrissie-c,config:  Report IP address/nodename parse errors,1,[],https://github.com/corosync/corosync/pull/407,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/407#issuecomment-443772221,"Corosync used to just ignore parse errors so that un-resolved names
could cause silent failures. We now always check the result from
totemip_parse() and at least print something in syslog.
There's also a little get-out here that allows you to correct
a bad node address without having to destroy and recreate the
whole link. I'm being nice to you.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",@chrissie-c Thank you for the super fast resolution of DNS issues! ACK and merged as a ab94184.,True,{}
corosync/corosync,https://github.com/corosync/corosync,408,2018-12-04T15:33:28Z,2018-12-06T13:32:36Z,2018-12-06T13:32:37Z,CLOSED,False,93,92,4,https://github.com/chrissie-c,config: Disallow corosync-cmapctl updates of nodelist,2,[],https://github.com/corosync/corosync/pull/408,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/408,"It didn't work anyway (the config system requires whole links
to be configured at once) and caused crashes.","It didn't work anyway (the config system requires whole links
to be configured at once) and caused crashes.",True,{}
corosync/corosync,https://github.com/corosync/corosync,408,2018-12-04T15:33:28Z,2018-12-06T13:32:36Z,2018-12-06T13:32:37Z,CLOSED,False,93,92,4,https://github.com/chrissie-c,config: Disallow corosync-cmapctl updates of nodelist,2,[],https://github.com/corosync/corosync/pull/408,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/408#issuecomment-444162811,"It didn't work anyway (the config system requires whole links
to be configured at once) and caused crashes.","patch looks just fine so code is ACK.
Man page is only partly ack, because removal of ""DYNAMIC ADD/REMOVE OF UDPU NODE"" section is ok, but information about how to add/remove node during runtime should be preserved. Good place seems to be ether corosync_overview.7 or we can start some new man page? (like corosync_howto??)",True,{}
corosync/corosync,https://github.com/corosync/corosync,408,2018-12-04T15:33:28Z,2018-12-06T13:32:36Z,2018-12-06T13:32:37Z,CLOSED,False,93,92,4,https://github.com/chrissie-c,config: Disallow corosync-cmapctl updates of nodelist,2,[],https://github.com/corosync/corosync/pull/408,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/408#issuecomment-444871596,"It didn't work anyway (the config system requires whole links
to be configured at once) and caused crashes.",@chrissie-c Thank you for add/remove node instructions. Now it's full ACK and merged as a a1ca847 .. e6be234,True,{}
corosync/corosync,https://github.com/corosync/corosync,409,2018-12-07T13:09:55Z,2018-12-07T15:45:00Z,2018-12-07T15:45:00Z,CLOSED,False,11,2,1,https://github.com/chrissie-c,config: Look up hostnames in a defined order,1,[],https://github.com/corosync/corosync/pull/409,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/409,"Current practice is to let getaddrinfo() decide which address we get
but this is not necessarily deterministic as DNS servers won't
always return addresses in the same order if a node has
several. While this doesn't deal with node names that have
multiple IP addresses of the same family (that's an installation issue
IMHO) we can, at least, force a definite order for IPv6/IPv4 name
resolution.
I've chosen IPv6 then IPv4 as that's what happens on my test system (
using /etc/hosts) and it also seems more 'future proof'.","Current practice is to let getaddrinfo() decide which address we get
but this is not necessarily deterministic as DNS servers won't
always return addresses in the same order if a node has
several. While this doesn't deal with node names that have
multiple IP addresses of the same family (that's an installation issue
IMHO) we can, at least, force a definite order for IPv6/IPv4 name
resolution.
I've chosen IPv6 then IPv4 as that's what happens on my test system (
using /etc/hosts) and it also seems more 'future proof'.",True,{}
corosync/corosync,https://github.com/corosync/corosync,409,2018-12-07T13:09:55Z,2018-12-07T15:45:00Z,2018-12-07T15:45:00Z,CLOSED,False,11,2,1,https://github.com/chrissie-c,config: Look up hostnames in a defined order,1,[],https://github.com/corosync/corosync/pull/409,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/409#issuecomment-445271791,"Current practice is to let getaddrinfo() decide which address we get
but this is not necessarily deterministic as DNS servers won't
always return addresses in the same order if a node has
several. While this doesn't deal with node names that have
multiple IP addresses of the same family (that's an installation issue
IMHO) we can, at least, force a definite order for IPv6/IPv4 name
resolution.
I've chosen IPv6 then IPv4 as that's what happens on my test system (
using /etc/hosts) and it also seems more 'future proof'.","@chrissie-c As we discussed on IRC, I'm NACKing this PR (but please keep it handy, maybe we find it useful in future), not because code would be incorrect, but because I believe order of ipv6/ipv4 is defined by administrator and we should not try to override it.
Let me summarize some findings:

glibc tells The  sorting  function  used  within  getaddrinfo()  is defined  in  RFC 3484; the order can be tweaked for a particular system by editing /etc/gai.conf (available since glibc 2.5)..
freebsd defines order by using https://www.freebsd.org/cgi/man.cgi?query=ip6addrctl&sektion=8&manpath=freebsd-release-ports
openbsd defines order in https://man.openbsd.org/resolv.conf.5 (preferred is ipv4?)
netbsd also has a way to define order By default IPv6 address entries are ordered before IPv4 ones, but the order of the entries in the list can be controlled using ip6addrctl(8). (http://netbsd.gw.com/cgi-bin/man-cgi?getaddrinfo+3.i386+NetBSD-8.0)",True,{}
corosync/corosync,https://github.com/corosync/corosync,410,2018-12-10T08:10:12Z,2018-12-10T10:42:15Z,2018-12-10T10:42:20Z,CLOSED,False,23,1,1,https://github.com/jfriesse,totemconfig: Really use totemip_parse results,1,[],https://github.com/corosync/corosync/pull/410,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/410,Signed-off-by: Jan Friesse jfriesse@redhat.com,Signed-off-by: Jan Friesse jfriesse@redhat.com,True,{}
corosync/corosync,https://github.com/corosync/corosync,410,2018-12-10T08:10:12Z,2018-12-10T10:42:15Z,2018-12-10T10:42:20Z,CLOSED,False,23,1,1,https://github.com/jfriesse,totemconfig: Really use totemip_parse results,1,[],https://github.com/corosync/corosync/pull/410,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/410#issuecomment-445770246,Signed-off-by: Jan Friesse jfriesse@redhat.com,"Thank you for the review, merged as a 41ce8fc",True,{}
corosync/corosync,https://github.com/corosync/corosync,411,2018-12-10T10:04:48Z,2018-12-10T10:41:52Z,2018-12-10T10:41:52Z,CLOSED,False,18,0,1,https://github.com/chrissie-c,man: Add some information about address resolution to corosync.conf(5),1,[],https://github.com/corosync/corosync/pull/411,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/411,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,411,2018-12-10T10:04:48Z,2018-12-10T10:41:52Z,2018-12-10T10:41:52Z,CLOSED,False,18,0,1,https://github.com/chrissie-c,man: Add some information about address resolution to corosync.conf(5),1,[],https://github.com/corosync/corosync/pull/411,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/411#issuecomment-445770123,,"Thank you for the patch, ACK and merged as a 8d50bd9",True,{}
corosync/corosync,https://github.com/corosync/corosync,412,2018-12-10T17:48:27Z,2018-12-11T07:30:57Z,2018-12-11T15:46:56Z,CLOSED,False,3,3,1,https://github.com/wferi,Fix corosync.conf.5 manpage typos,1,[],https://github.com/corosync/corosync/pull/412,https://github.com/wferi,1,https://github.com/corosync/corosync/pull/412,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,412,2018-12-10T17:48:27Z,2018-12-11T07:30:57Z,2018-12-11T15:46:56Z,CLOSED,False,3,3,1,https://github.com/wferi,Fix corosync.conf.5 manpage typos,1,[],https://github.com/corosync/corosync/pull/412,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/412#issuecomment-446100278,,@wferi Thank you for the patch. Nice catch (as usual) so ACK and merged as a 6d5922c,True,{}
corosync/corosync,https://github.com/corosync/corosync,415,2018-12-11T10:13:46Z,2018-12-11T10:23:12Z,2018-12-11T10:23:12Z,CLOSED,False,22,11,2,https://github.com/chrissie-c,config: Look up hostnames in a defined order,1,[],https://github.com/corosync/corosync/pull/415,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/415,"Current practice is to let getaddrinfo() decide which address we get
but this is not necessarily deterministic as DNS servers won't
always return addresses in the same order if a node has
several. While this doesn't deal with node names that have
multiple IP addresses of the same family (that's an installation issue
IMHO) we can, at least, force a definite order for IPv6/IPv4 name
resolution.
I've chosen IPv6 then IPv4 as that's what happens on my test system (
using /etc/hosts) and it also seems more 'future proof'.","Current practice is to let getaddrinfo() decide which address we get
but this is not necessarily deterministic as DNS servers won't
always return addresses in the same order if a node has
several. While this doesn't deal with node names that have
multiple IP addresses of the same family (that's an installation issue
IMHO) we can, at least, force a definite order for IPv6/IPv4 name
resolution.
I've chosen IPv6 then IPv4 as that's what happens on my test system (
using /etc/hosts) and it also seems more 'future proof'.",True,{}
corosync/corosync,https://github.com/corosync/corosync,415,2018-12-11T10:13:46Z,2018-12-11T10:23:12Z,2018-12-11T10:23:12Z,CLOSED,False,22,11,2,https://github.com/chrissie-c,config: Look up hostnames in a defined order,1,[],https://github.com/corosync/corosync/pull/415,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/415#issuecomment-446149819,"Current practice is to let getaddrinfo() decide which address we get
but this is not necessarily deterministic as DNS servers won't
always return addresses in the same order if a node has
several. While this doesn't deal with node names that have
multiple IP addresses of the same family (that's an installation issue
IMHO) we can, at least, force a definite order for IPv6/IPv4 name
resolution.
I've chosen IPv6 then IPv4 as that's what happens on my test system (
using /etc/hosts) and it also seems more 'future proof'.","@chrissie-c As classicists say ""All theory is gray, my friend. But forever green is the tree of life"". Nice patch, ACK and merged as a 3d7f136 .",True,{}
corosync/corosync,https://github.com/corosync/corosync,416,2018-12-12T16:32:57Z,2018-12-13T14:27:19Z,2018-12-13T14:27:32Z,CLOSED,False,35,5,3,https://github.com/jfriesse,Totemip parse debug,2,[],https://github.com/corosync/corosync/pull/416,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/416,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,416,2018-12-12T16:32:57Z,2018-12-13T14:27:19Z,2018-12-13T14:27:32Z,CLOSED,False,35,5,3,https://github.com/jfriesse,Totemip parse debug,2,[],https://github.com/corosync/corosync/pull/416,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/416#issuecomment-446986948,,@chrissie-c Thank you for the review. I've removed extra newline (leftover from adding non conditional log_printf to find out if/how logsys/qblog works) and merged as a aa7daf8.,True,{}
corosync/corosync,https://github.com/corosync/corosync,417,2018-12-13T16:14:28Z,2018-12-14T09:56:50Z,2018-12-14T09:56:54Z,CLOSED,False,90,50,7,https://github.com/jfriesse,totemconfig: Enhance totem.ip_version,1,[],https://github.com/corosync/corosync/pull/417,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/417,"totemconfig: Enhance totem.ip_version
Originally totem.ip_version was used to force ip version used by totem.
With Knet this variable didn't make too much sense so it was not used.
Sadly rely only on DNS resolver order doesn't always work (RFC is quite
complicated, but if IPv6 is not configured then IPv4 is preferred), what
we tried to solve by forcing IPv6 and only if that fails, use IPv4.
Sadly this collides with nss_myhostname which is able to return every
local address and today system usually have at least one autogenerated
link-local IPv6 address so it is able to ""overwrite"" /etc/hosts.
Solution is to enhance totem.ip_version and use it also for Knet.
totem.ip_version is now just a flag for resolver and can have four
states: ipv4 (only IPv4 is used), ipv6 (only IPv6 is used), ipv4-6 (ask
IPv4 first and if it fails ask for IPv6) and ipv6-4 (ask IPv6 first and
if it fails ask for IPv4). Default for Knet and UDPU transports is
ipv6-4, for UDP it's ipv4, because autogenerated mcast addr doesn't play
too well with ipv6-4.
So everywhere where nss_myhostname becomes problem, it's just possible
to set totem.ip_version to ipv4-6.","totemconfig: Enhance totem.ip_version
Originally totem.ip_version was used to force ip version used by totem.
With Knet this variable didn't make too much sense so it was not used.
Sadly rely only on DNS resolver order doesn't always work (RFC is quite
complicated, but if IPv6 is not configured then IPv4 is preferred), what
we tried to solve by forcing IPv6 and only if that fails, use IPv4.
Sadly this collides with nss_myhostname which is able to return every
local address and today system usually have at least one autogenerated
link-local IPv6 address so it is able to ""overwrite"" /etc/hosts.
Solution is to enhance totem.ip_version and use it also for Knet.
totem.ip_version is now just a flag for resolver and can have four
states: ipv4 (only IPv4 is used), ipv6 (only IPv6 is used), ipv4-6 (ask
IPv4 first and if it fails ask for IPv6) and ipv6-4 (ask IPv6 first and
if it fails ask for IPv4). Default for Knet and UDPU transports is
ipv6-4, for UDP it's ipv4, because autogenerated mcast addr doesn't play
too well with ipv6-4.
So everywhere where nss_myhostname becomes problem, it's just possible
to set totem.ip_version to ipv4-6.",True,{}
corosync/corosync,https://github.com/corosync/corosync,417,2018-12-13T16:14:28Z,2018-12-14T09:56:50Z,2018-12-14T09:56:54Z,CLOSED,False,90,50,7,https://github.com/jfriesse,totemconfig: Enhance totem.ip_version,1,[],https://github.com/corosync/corosync/pull/417,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/417#issuecomment-447035291,"totemconfig: Enhance totem.ip_version
Originally totem.ip_version was used to force ip version used by totem.
With Knet this variable didn't make too much sense so it was not used.
Sadly rely only on DNS resolver order doesn't always work (RFC is quite
complicated, but if IPv6 is not configured then IPv4 is preferred), what
we tried to solve by forcing IPv6 and only if that fails, use IPv4.
Sadly this collides with nss_myhostname which is able to return every
local address and today system usually have at least one autogenerated
link-local IPv6 address so it is able to ""overwrite"" /etc/hosts.
Solution is to enhance totem.ip_version and use it also for Knet.
totem.ip_version is now just a flag for resolver and can have four
states: ipv4 (only IPv4 is used), ipv6 (only IPv6 is used), ipv4-6 (ask
IPv4 first and if it fails ask for IPv6) and ipv6-4 (ask IPv6 first and
if it fails ask for IPv4). Default for Knet and UDPU transports is
ipv6-4, for UDP it's ipv4, because autogenerated mcast addr doesn't play
too well with ipv6-4.
So everywhere where nss_myhostname becomes problem, it's just possible
to set totem.ip_version to ipv4-6.",Force updated to replace '&' with '-',True,{}
corosync/corosync,https://github.com/corosync/corosync,417,2018-12-13T16:14:28Z,2018-12-14T09:56:50Z,2018-12-14T09:56:54Z,CLOSED,False,90,50,7,https://github.com/jfriesse,totemconfig: Enhance totem.ip_version,1,[],https://github.com/corosync/corosync/pull/417,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/417#issuecomment-447274842,"totemconfig: Enhance totem.ip_version
Originally totem.ip_version was used to force ip version used by totem.
With Knet this variable didn't make too much sense so it was not used.
Sadly rely only on DNS resolver order doesn't always work (RFC is quite
complicated, but if IPv6 is not configured then IPv4 is preferred), what
we tried to solve by forcing IPv6 and only if that fails, use IPv4.
Sadly this collides with nss_myhostname which is able to return every
local address and today system usually have at least one autogenerated
link-local IPv6 address so it is able to ""overwrite"" /etc/hosts.
Solution is to enhance totem.ip_version and use it also for Knet.
totem.ip_version is now just a flag for resolver and can have four
states: ipv4 (only IPv4 is used), ipv6 (only IPv6 is used), ipv4-6 (ask
IPv4 first and if it fails ask for IPv6) and ipv6-4 (ask IPv6 first and
if it fails ask for IPv4). Default for Knet and UDPU transports is
ipv6-4, for UDP it's ipv4, because autogenerated mcast addr doesn't play
too well with ipv6-4.
So everywhere where nss_myhostname becomes problem, it's just possible
to set totem.ip_version to ipv4-6.",Thank you for the review! I've merged patch as a a84ade7,True,{}
corosync/corosync,https://github.com/corosync/corosync,419,2018-12-14T12:33:53Z,2018-12-14T12:48:55Z,2018-12-14T12:49:20Z,CLOSED,False,23,22,7,https://github.com/jfriesse,main: Rename run_dir to state_dir,1,[],https://github.com/corosync/corosync/pull/419,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/419,"system.run_dir was a little bit unfortunate and confusing name. Rename
to state_dir makes more evident what is content of this directory. To
keep setting consistent with code, get_run_dir is changed to
get_state_dir.
Signed-off-by: Jan Friesse jfriesse@redhat.com","system.run_dir was a little bit unfortunate and confusing name. Rename
to state_dir makes more evident what is content of this directory. To
keep setting consistent with code, get_run_dir is changed to
get_state_dir.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,419,2018-12-14T12:33:53Z,2018-12-14T12:48:55Z,2018-12-14T12:49:20Z,CLOSED,False,23,22,7,https://github.com/jfriesse,main: Rename run_dir to state_dir,1,[],https://github.com/corosync/corosync/pull/419,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/419#issuecomment-447312565,"system.run_dir was a little bit unfortunate and confusing name. Rename
to state_dir makes more evident what is content of this directory. To
keep setting consistent with code, get_run_dir is changed to
get_state_dir.
Signed-off-by: Jan Friesse jfriesse@redhat.com",Fix for #418,True,{}
corosync/corosync,https://github.com/corosync/corosync,419,2018-12-14T12:33:53Z,2018-12-14T12:48:55Z,2018-12-14T12:49:20Z,CLOSED,False,23,22,7,https://github.com/jfriesse,main: Rename run_dir to state_dir,1,[],https://github.com/corosync/corosync/pull/419,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/419#issuecomment-447315533,"system.run_dir was a little bit unfortunate and confusing name. Rename
to state_dir makes more evident what is content of this directory. To
keep setting consistent with code, get_run_dir is changed to
get_state_dir.
Signed-off-by: Jan Friesse jfriesse@redhat.com",Thank you for super quick review. Merged as a 0ee7fd0,True,{}
corosync/corosync,https://github.com/corosync/corosync,420,2018-12-14T20:39:09Z,2019-01-11T08:52:01Z,2019-04-11T16:50:40Z,CLOSED,False,1,0,1,https://github.com/jnpkrn,systemd: corosync makes little sense as free standing service under init,1,[],https://github.com/corosync/corosync/pull/420,https://github.com/jnpkrn,1,https://github.com/corosync/corosync/pull/420,"It shall be a rule of thumb not to combine ""application stack""
components run under particular init/supervision mechanism and
run by whatever other means (without transitive relationships
like when corosync's client runs from other pacemaker that is
itself started through systemd) when there's a directed graph
of reliance between them (sans constrained corner cases like
when of such components is a kernel module).
And corosync on its own is just a service provider that only
appears useful when utilized as a basic building block for
application specific distributed environments.
Therefore, we may assume whenever corosync gets started by the
means of systemd, it's because of a mechanized attempt to satisfy
declared dependency of some such corosync's client that is about
to be started under the service manager realms (directly or, by
induction, through the same triggering mechanism indirectly).
Hence, when there's no such client around anymore (unless
this dependant is being restarted at the moment, see below)
corosync shall rather shutdown as well.
In the past, there was an issue with systemd regarding said
inflicted restart of the dependant/client, but that's resolved
as of v236:
systemd/systemd@deb4e70","It shall be a rule of thumb not to combine ""application stack""
components run under particular init/supervision mechanism and
run by whatever other means (without transitive relationships
like when corosync's client runs from other pacemaker that is
itself started through systemd) when there's a directed graph
of reliance between them (sans constrained corner cases like
when of such components is a kernel module).
And corosync on its own is just a service provider that only
appears useful when utilized as a basic building block for
application specific distributed environments.
Therefore, we may assume whenever corosync gets started by the
means of systemd, it's because of a mechanized attempt to satisfy
declared dependency of some such corosync's client that is about
to be started under the service manager realms (directly or, by
induction, through the same triggering mechanism indirectly).
Hence, when there's no such client around anymore (unless
this dependant is being restarted at the moment, see below)
corosync shall rather shutdown as well.
In the past, there was an issue with systemd regarding said
inflicted restart of the dependant/client, but that's resolved
as of v236:
systemd/systemd@deb4e70",True,{}
corosync/corosync,https://github.com/corosync/corosync,420,2018-12-14T20:39:09Z,2019-01-11T08:52:01Z,2019-04-11T16:50:40Z,CLOSED,False,1,0,1,https://github.com/jnpkrn,systemd: corosync makes little sense as free standing service under init,1,[],https://github.com/corosync/corosync/pull/420,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/420#issuecomment-447472980,"It shall be a rule of thumb not to combine ""application stack""
components run under particular init/supervision mechanism and
run by whatever other means (without transitive relationships
like when corosync's client runs from other pacemaker that is
itself started through systemd) when there's a directed graph
of reliance between them (sans constrained corner cases like
when of such components is a kernel module).
And corosync on its own is just a service provider that only
appears useful when utilized as a basic building block for
application specific distributed environments.
Therefore, we may assume whenever corosync gets started by the
means of systemd, it's because of a mechanized attempt to satisfy
declared dependency of some such corosync's client that is about
to be started under the service manager realms (directly or, by
induction, through the same triggering mechanism indirectly).
Hence, when there's no such client around anymore (unless
this dependant is being restarted at the moment, see below)
corosync shall rather shutdown as well.
In the past, there was an issue with systemd regarding said
inflicted restart of the dependant/client, but that's resolved
as of v236:
systemd/systemd@deb4e70",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,420,2018-12-14T20:39:09Z,2019-01-11T08:52:01Z,2019-04-11T16:50:40Z,CLOSED,False,1,0,1,https://github.com/jnpkrn,systemd: corosync makes little sense as free standing service under init,1,[],https://github.com/corosync/corosync/pull/420,https://github.com/jnpkrn,3,https://github.com/corosync/corosync/pull/420#issuecomment-447473285,"It shall be a rule of thumb not to combine ""application stack""
components run under particular init/supervision mechanism and
run by whatever other means (without transitive relationships
like when corosync's client runs from other pacemaker that is
itself started through systemd) when there's a directed graph
of reliance between them (sans constrained corner cases like
when of such components is a kernel module).
And corosync on its own is just a service provider that only
appears useful when utilized as a basic building block for
application specific distributed environments.
Therefore, we may assume whenever corosync gets started by the
means of systemd, it's because of a mechanized attempt to satisfy
declared dependency of some such corosync's client that is about
to be started under the service manager realms (directly or, by
induction, through the same triggering mechanism indirectly).
Hence, when there's no such client around anymore (unless
this dependant is being restarted at the moment, see below)
corosync shall rather shutdown as well.
In the past, there was an issue with systemd regarding said
inflicted restart of the dependant/client, but that's resolved
as of v236:
systemd/systemd@deb4e70",E.g. dlm.service depends on corosync properly just like pacemaker.,True,{}
corosync/corosync,https://github.com/corosync/corosync,420,2018-12-14T20:39:09Z,2019-01-11T08:52:01Z,2019-04-11T16:50:40Z,CLOSED,False,1,0,1,https://github.com/jnpkrn,systemd: corosync makes little sense as free standing service under init,1,[],https://github.com/corosync/corosync/pull/420,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/420#issuecomment-451076994,"It shall be a rule of thumb not to combine ""application stack""
components run under particular init/supervision mechanism and
run by whatever other means (without transitive relationships
like when corosync's client runs from other pacemaker that is
itself started through systemd) when there's a directed graph
of reliance between them (sans constrained corner cases like
when of such components is a kernel module).
And corosync on its own is just a service provider that only
appears useful when utilized as a basic building block for
application specific distributed environments.
Therefore, we may assume whenever corosync gets started by the
means of systemd, it's because of a mechanized attempt to satisfy
declared dependency of some such corosync's client that is about
to be started under the service manager realms (directly or, by
induction, through the same triggering mechanism indirectly).
Hence, when there's no such client around anymore (unless
this dependant is being restarted at the moment, see below)
corosync shall rather shutdown as well.
In the past, there was an issue with systemd regarding said
inflicted restart of the dependant/client, but that's resolved
as of v236:
systemd/systemd@deb4e70",@jnpkrn I would like to ask how exactly is StopWhenUnneeded supposed to work when corosync unit itself is enabled? Is it (or should it be) stopped when no other unit depends on it?,True,{}
corosync/corosync,https://github.com/corosync/corosync,420,2018-12-14T20:39:09Z,2019-01-11T08:52:01Z,2019-04-11T16:50:40Z,CLOSED,False,1,0,1,https://github.com/jnpkrn,systemd: corosync makes little sense as free standing service under init,1,[],https://github.com/corosync/corosync/pull/420,https://github.com/jnpkrn,5,https://github.com/corosync/corosync/pull/420#issuecomment-451172467,"It shall be a rule of thumb not to combine ""application stack""
components run under particular init/supervision mechanism and
run by whatever other means (without transitive relationships
like when corosync's client runs from other pacemaker that is
itself started through systemd) when there's a directed graph
of reliance between them (sans constrained corner cases like
when of such components is a kernel module).
And corosync on its own is just a service provider that only
appears useful when utilized as a basic building block for
application specific distributed environments.
Therefore, we may assume whenever corosync gets started by the
means of systemd, it's because of a mechanized attempt to satisfy
declared dependency of some such corosync's client that is about
to be started under the service manager realms (directly or, by
induction, through the same triggering mechanism indirectly).
Hence, when there's no such client around anymore (unless
this dependant is being restarted at the moment, see below)
corosync shall rather shutdown as well.
In the past, there was an issue with systemd regarding said
inflicted restart of the dependant/client, but that's resolved
as of v236:
systemd/systemd@deb4e70","On 03/01/19 00:10 -0800, Jan Friesse wrote:
 I would like to ask how exactly is `StopWhenUnneeded` supposed to
 work when corosync unit itself is enabled? Is it (or should it be)
 stopped when no other unit depends on it?
From my casual testing (systemd v240), it looks as if:

- when the unit is enabled and then started in consequence
  or a priori manually without enabling, this fact is remembered
  and ""automatic cleanup"" doesn't apply, not even when the
  dependant gets started and subsequently stopped afterwards
  (i.e., this start of dependant is a separate transition)

- similar behaviour applies when both ""weak"" and ""dependent""
  services are launched in the same transition when they are
  started for being enabled (at least when emulated with
  ""enable --now"", can test the raw handling), and the ""dependant""
  is stopped afterwards

- the ""automatic cleanup"" hence only seems to work when corosync
  is not enabled by default (this is implicit, e.g., with Fedora,
  because of /usr/lib/systemd/system-preset/99-default-disable.preset)
  and the ""dependant"" either is or gets started manually, and then
  stopped afterwards

This would allow for a clear contigency recommendation whenever this
""automatic cleanup"" would become undesired (i.e. make sure corosync
gets enabled and/or started ahead of time explicitly), though by
the logical arrangement of things, it makes a lot of sense to shift
towards fully dependency driven relations (with systemd facilitating
it), especially now that Type=notify truthfully (I believe) reflects
the actual readiness for the start of ""dependant"" to follow/hook into
timing-wise.

Was thinking that perhaps even socket-based activation (for
the initiating IPC API Unix domain sockets, for CPG and perhaps
other basic APIs) would be handy, but ""automatic cleanup"" shall be
proved a successful concept first.  Also this would need to be tackled
as a prerequisite: ClusterLabs/libqb#325

…
-- 
Jan (Poki)",True,{}
corosync/corosync,https://github.com/corosync/corosync,420,2018-12-14T20:39:09Z,2019-01-11T08:52:01Z,2019-04-11T16:50:40Z,CLOSED,False,1,0,1,https://github.com/jnpkrn,systemd: corosync makes little sense as free standing service under init,1,[],https://github.com/corosync/corosync/pull/420,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/420#issuecomment-453435663,"It shall be a rule of thumb not to combine ""application stack""
components run under particular init/supervision mechanism and
run by whatever other means (without transitive relationships
like when corosync's client runs from other pacemaker that is
itself started through systemd) when there's a directed graph
of reliance between them (sans constrained corner cases like
when of such components is a kernel module).
And corosync on its own is just a service provider that only
appears useful when utilized as a basic building block for
application specific distributed environments.
Therefore, we may assume whenever corosync gets started by the
means of systemd, it's because of a mechanized attempt to satisfy
declared dependency of some such corosync's client that is about
to be started under the service manager realms (directly or, by
induction, through the same triggering mechanism indirectly).
Hence, when there's no such client around anymore (unless
this dependant is being restarted at the moment, see below)
corosync shall rather shutdown as well.
In the past, there was an issue with systemd regarding said
inflicted restart of the dependant/client, but that's resolved
as of v236:
systemd/systemd@deb4e70","Looks good. I would see as a big problem if systemd would stop explicitly enabled corosync. Merged as a 03d9321 .
Thank you for the patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,420,2018-12-14T20:39:09Z,2019-01-11T08:52:01Z,2019-04-11T16:50:40Z,CLOSED,False,1,0,1,https://github.com/jnpkrn,systemd: corosync makes little sense as free standing service under init,1,[],https://github.com/corosync/corosync/pull/420,https://github.com/jnpkrn,7,https://github.com/corosync/corosync/pull/420#issuecomment-453513078,"It shall be a rule of thumb not to combine ""application stack""
components run under particular init/supervision mechanism and
run by whatever other means (without transitive relationships
like when corosync's client runs from other pacemaker that is
itself started through systemd) when there's a directed graph
of reliance between them (sans constrained corner cases like
when of such components is a kernel module).
And corosync on its own is just a service provider that only
appears useful when utilized as a basic building block for
application specific distributed environments.
Therefore, we may assume whenever corosync gets started by the
means of systemd, it's because of a mechanized attempt to satisfy
declared dependency of some such corosync's client that is about
to be started under the service manager realms (directly or, by
induction, through the same triggering mechanism indirectly).
Hence, when there's no such client around anymore (unless
this dependant is being restarted at the moment, see below)
corosync shall rather shutdown as well.
In the past, there was an issue with systemd regarding said
inflicted restart of the dependant/client, but that's resolved
as of v236:
systemd/systemd@deb4e70","Thanks.
Related to the service file, since systemd v240, there's now
a possibility to set LogRateLimitIntervalSec= and
LogRateLimitBurst= on per-unit basis; do you think the
defaults of system-wide defaults might still be too
conservative for corosync's needs in some cases so that
the alternative, relaxed limits might be offered at least
in a commented out form?",True,{}
corosync/corosync,https://github.com/corosync/corosync,420,2018-12-14T20:39:09Z,2019-01-11T08:52:01Z,2019-04-11T16:50:40Z,CLOSED,False,1,0,1,https://github.com/jnpkrn,systemd: corosync makes little sense as free standing service under init,1,[],https://github.com/corosync/corosync/pull/420,https://github.com/jfriesse,8,https://github.com/corosync/corosync/pull/420#issuecomment-454037131,"It shall be a rule of thumb not to combine ""application stack""
components run under particular init/supervision mechanism and
run by whatever other means (without transitive relationships
like when corosync's client runs from other pacemaker that is
itself started through systemd) when there's a directed graph
of reliance between them (sans constrained corner cases like
when of such components is a kernel module).
And corosync on its own is just a service provider that only
appears useful when utilized as a basic building block for
application specific distributed environments.
Therefore, we may assume whenever corosync gets started by the
means of systemd, it's because of a mechanized attempt to satisfy
declared dependency of some such corosync's client that is about
to be started under the service manager realms (directly or, by
induction, through the same triggering mechanism indirectly).
Hence, when there's no such client around anymore (unless
this dependant is being restarted at the moment, see below)
corosync shall rather shutdown as well.
In the past, there was an issue with systemd regarding said
inflicted restart of the dependant/client, but that's resolved
as of v236:
systemd/systemd@deb4e70","Defaults are usually quite ok. There were not ok for cts and I've also seen some bug reports where messages were dropped, so commented limits patch would be welcomed.",True,{}
corosync/corosync,https://github.com/corosync/corosync,420,2018-12-14T20:39:09Z,2019-01-11T08:52:01Z,2019-04-11T16:50:40Z,CLOSED,False,1,0,1,https://github.com/jnpkrn,systemd: corosync makes little sense as free standing service under init,1,[],https://github.com/corosync/corosync/pull/420,https://github.com/wferi,9,https://github.com/corosync/corosync/pull/420#issuecomment-454510783,"It shall be a rule of thumb not to combine ""application stack""
components run under particular init/supervision mechanism and
run by whatever other means (without transitive relationships
like when corosync's client runs from other pacemaker that is
itself started through systemd) when there's a directed graph
of reliance between them (sans constrained corner cases like
when of such components is a kernel module).
And corosync on its own is just a service provider that only
appears useful when utilized as a basic building block for
application specific distributed environments.
Therefore, we may assume whenever corosync gets started by the
means of systemd, it's because of a mechanized attempt to satisfy
declared dependency of some such corosync's client that is about
to be started under the service manager realms (directly or, by
induction, through the same triggering mechanism indirectly).
Hence, when there's no such client around anymore (unless
this dependant is being restarted at the moment, see below)
corosync shall rather shutdown as well.
In the past, there was an issue with systemd regarding said
inflicted restart of the dependant/client, but that's resolved
as of v236:
systemd/systemd@deb4e70","For a moment I was frightened by this change. It makes sense to keep corosync running even if nothing uses its services on the host. Namely, to maintain quorum. Now I read it isn't stopped when enabled, but still wanted to note this here.",True,{}
corosync/corosync,https://github.com/corosync/corosync,420,2018-12-14T20:39:09Z,2019-01-11T08:52:01Z,2019-04-11T16:50:40Z,CLOSED,False,1,0,1,https://github.com/jnpkrn,systemd: corosync makes little sense as free standing service under init,1,[],https://github.com/corosync/corosync/pull/420,https://github.com/jnpkrn,10,https://github.com/corosync/corosync/pull/420#issuecomment-454519688,"It shall be a rule of thumb not to combine ""application stack""
components run under particular init/supervision mechanism and
run by whatever other means (without transitive relationships
like when corosync's client runs from other pacemaker that is
itself started through systemd) when there's a directed graph
of reliance between them (sans constrained corner cases like
when of such components is a kernel module).
And corosync on its own is just a service provider that only
appears useful when utilized as a basic building block for
application specific distributed environments.
Therefore, we may assume whenever corosync gets started by the
means of systemd, it's because of a mechanized attempt to satisfy
declared dependency of some such corosync's client that is about
to be started under the service manager realms (directly or, by
induction, through the same triggering mechanism indirectly).
Hence, when there's no such client around anymore (unless
this dependant is being restarted at the moment, see below)
corosync shall rather shutdown as well.
In the past, there was an issue with systemd regarding said
inflicted restart of the dependant/client, but that's resolved
as of v236:
systemd/systemd@deb4e70","TBH, it didn't occur to me that one might very intentionally craft such
an asymmetrical arrangement, where at least one node would still want
to use the service of corosync (and hence it would presumably express
such dependency on systemd level, but on this very node only).
[Yes, deformation based on having primarily pacemaker in mind.]
Anyway, wouldn't qdevice be a better fit if no node-local service
is required?  Or is such an asymmetry meant as only temporary, until
some load scaling is needed?
Also, if any trace of problem is spotted, the change is easy to undo
by (nowadays well-established) standard administrative steps.",True,{}
corosync/corosync,https://github.com/corosync/corosync,420,2018-12-14T20:39:09Z,2019-01-11T08:52:01Z,2019-04-11T16:50:40Z,CLOSED,False,1,0,1,https://github.com/jnpkrn,systemd: corosync makes little sense as free standing service under init,1,[],https://github.com/corosync/corosync/pull/420,https://github.com/jnpkrn,11,https://github.com/corosync/corosync/pull/420#issuecomment-454543389,"It shall be a rule of thumb not to combine ""application stack""
components run under particular init/supervision mechanism and
run by whatever other means (without transitive relationships
like when corosync's client runs from other pacemaker that is
itself started through systemd) when there's a directed graph
of reliance between them (sans constrained corner cases like
when of such components is a kernel module).
And corosync on its own is just a service provider that only
appears useful when utilized as a basic building block for
application specific distributed environments.
Therefore, we may assume whenever corosync gets started by the
means of systemd, it's because of a mechanized attempt to satisfy
declared dependency of some such corosync's client that is about
to be started under the service manager realms (directly or, by
induction, through the same triggering mechanism indirectly).
Hence, when there's no such client around anymore (unless
this dependant is being restarted at the moment, see below)
corosync shall rather shutdown as well.
In the past, there was an issue with systemd regarding said
inflicted restart of the dependant/client, but that's resolved
as of v236:
systemd/systemd@deb4e70","(and sorry, should have proofread the commit message)",True,{}
corosync/corosync,https://github.com/corosync/corosync,420,2018-12-14T20:39:09Z,2019-01-11T08:52:01Z,2019-04-11T16:50:40Z,CLOSED,False,1,0,1,https://github.com/jnpkrn,systemd: corosync makes little sense as free standing service under init,1,[],https://github.com/corosync/corosync/pull/420,https://github.com/jfriesse,12,https://github.com/corosync/corosync/pull/420#issuecomment-454678593,"It shall be a rule of thumb not to combine ""application stack""
components run under particular init/supervision mechanism and
run by whatever other means (without transitive relationships
like when corosync's client runs from other pacemaker that is
itself started through systemd) when there's a directed graph
of reliance between them (sans constrained corner cases like
when of such components is a kernel module).
And corosync on its own is just a service provider that only
appears useful when utilized as a basic building block for
application specific distributed environments.
Therefore, we may assume whenever corosync gets started by the
means of systemd, it's because of a mechanized attempt to satisfy
declared dependency of some such corosync's client that is about
to be started under the service manager realms (directly or, by
induction, through the same triggering mechanism indirectly).
Hence, when there's no such client around anymore (unless
this dependant is being restarted at the moment, see below)
corosync shall rather shutdown as well.
In the past, there was an issue with systemd regarding said
inflicted restart of the dependant/client, but that's resolved
as of v236:
systemd/systemd@deb4e70",@wferi Agree. Also developing app using corosync apis would be quite hard if systemd would be shutting corosync down. Hopefully explicitly enabled service behaves (and will behave with future systemd releases) as one would expect = it's not shut down.,True,{}
corosync/corosync,https://github.com/corosync/corosync,420,2018-12-14T20:39:09Z,2019-01-11T08:52:01Z,2019-04-11T16:50:40Z,CLOSED,False,1,0,1,https://github.com/jnpkrn,systemd: corosync makes little sense as free standing service under init,1,[],https://github.com/corosync/corosync/pull/420,https://github.com/wferi,13,https://github.com/corosync/corosync/pull/420#issuecomment-454686358,"It shall be a rule of thumb not to combine ""application stack""
components run under particular init/supervision mechanism and
run by whatever other means (without transitive relationships
like when corosync's client runs from other pacemaker that is
itself started through systemd) when there's a directed graph
of reliance between them (sans constrained corner cases like
when of such components is a kernel module).
And corosync on its own is just a service provider that only
appears useful when utilized as a basic building block for
application specific distributed environments.
Therefore, we may assume whenever corosync gets started by the
means of systemd, it's because of a mechanized attempt to satisfy
declared dependency of some such corosync's client that is about
to be started under the service manager realms (directly or, by
induction, through the same triggering mechanism indirectly).
Hence, when there's no such client around anymore (unless
this dependant is being restarted at the moment, see below)
corosync shall rather shutdown as well.
In the past, there was an issue with systemd regarding said
inflicted restart of the dependant/client, but that's resolved
as of v236:
systemd/systemd@deb4e70","@jnpkrn Yes, I didn't mean asymmetric design but temporary asymmetric situations during maintenance or recovery. Corosync unexpectedly stopping on its own accord would be a bad surprise in such stressful situations.",True,{}
corosync/corosync,https://github.com/corosync/corosync,420,2018-12-14T20:39:09Z,2019-01-11T08:52:01Z,2019-04-11T16:50:40Z,CLOSED,False,1,0,1,https://github.com/jnpkrn,systemd: corosync makes little sense as free standing service under init,1,[],https://github.com/corosync/corosync/pull/420,https://github.com/jnpkrn,14,https://github.com/corosync/corosync/pull/420#issuecomment-454697563,"It shall be a rule of thumb not to combine ""application stack""
components run under particular init/supervision mechanism and
run by whatever other means (without transitive relationships
like when corosync's client runs from other pacemaker that is
itself started through systemd) when there's a directed graph
of reliance between them (sans constrained corner cases like
when of such components is a kernel module).
And corosync on its own is just a service provider that only
appears useful when utilized as a basic building block for
application specific distributed environments.
Therefore, we may assume whenever corosync gets started by the
means of systemd, it's because of a mechanized attempt to satisfy
declared dependency of some such corosync's client that is about
to be started under the service manager realms (directly or, by
induction, through the same triggering mechanism indirectly).
Hence, when there's no such client around anymore (unless
this dependant is being restarted at the moment, see below)
corosync shall rather shutdown as well.
In the past, there was an issue with systemd regarding said
inflicted restart of the dependant/client, but that's resolved
as of v236:
systemd/systemd@deb4e70","On 15/01/19 23:26 -0800, Jan Friesse wrote:
 Also developing app using corosync apis would be quite hard
 if systemd would be shutting corosync down.
Note that in the development settings when integrating something
with corosync, one is likely to play it quick'n'dirty, running
mere ""corosync"", hence outside of systemd control, until fine-tuning
the developed application for such supervision, when the respective
dependencies will kick in.
…
-- 
Jan (Poki)",True,{}
corosync/corosync,https://github.com/corosync/corosync,420,2018-12-14T20:39:09Z,2019-01-11T08:52:01Z,2019-04-11T16:50:40Z,CLOSED,False,1,0,1,https://github.com/jnpkrn,systemd: corosync makes little sense as free standing service under init,1,[],https://github.com/corosync/corosync/pull/420,https://github.com/jfriesse,15,https://github.com/corosync/corosync/pull/420#issuecomment-454705029,"It shall be a rule of thumb not to combine ""application stack""
components run under particular init/supervision mechanism and
run by whatever other means (without transitive relationships
like when corosync's client runs from other pacemaker that is
itself started through systemd) when there's a directed graph
of reliance between them (sans constrained corner cases like
when of such components is a kernel module).
And corosync on its own is just a service provider that only
appears useful when utilized as a basic building block for
application specific distributed environments.
Therefore, we may assume whenever corosync gets started by the
means of systemd, it's because of a mechanized attempt to satisfy
declared dependency of some such corosync's client that is about
to be started under the service manager realms (directly or, by
induction, through the same triggering mechanism indirectly).
Hence, when there's no such client around anymore (unless
this dependant is being restarted at the moment, see below)
corosync shall rather shutdown as well.
In the past, there was an issue with systemd regarding said
inflicted restart of the dependant/client, but that's resolved
as of v236:
systemd/systemd@deb4e70","On 15/01/19 23:26 -0800, Jan Friesse wrote: Also developing app using corosync apis would be quite hard if systemd would be shutting corosync down.
Note that in the development settings when integrating something with corosync, one is likely to play it quick'n'dirty, running mere ""corosync"", hence outside of systemd control, until fine-tuning the

likely != always.

developed application for such supervision, when the respective dependencies will kick in.
…
-- Jan (Poki)",True,{}
corosync/corosync,https://github.com/corosync/corosync,420,2018-12-14T20:39:09Z,2019-01-11T08:52:01Z,2019-04-11T16:50:40Z,CLOSED,False,1,0,1,https://github.com/jnpkrn,systemd: corosync makes little sense as free standing service under init,1,[],https://github.com/corosync/corosync/pull/420,https://github.com/jnpkrn,16,https://github.com/corosync/corosync/pull/420#issuecomment-482197028,"It shall be a rule of thumb not to combine ""application stack""
components run under particular init/supervision mechanism and
run by whatever other means (without transitive relationships
like when corosync's client runs from other pacemaker that is
itself started through systemd) when there's a directed graph
of reliance between them (sans constrained corner cases like
when of such components is a kernel module).
And corosync on its own is just a service provider that only
appears useful when utilized as a basic building block for
application specific distributed environments.
Therefore, we may assume whenever corosync gets started by the
means of systemd, it's because of a mechanized attempt to satisfy
declared dependency of some such corosync's client that is about
to be started under the service manager realms (directly or, by
induction, through the same triggering mechanism indirectly).
Hence, when there's no such client around anymore (unless
this dependant is being restarted at the moment, see below)
corosync shall rather shutdown as well.
In the past, there was an issue with systemd regarding said
inflicted restart of the dependant/client, but that's resolved
as of v236:
systemd/systemd@deb4e70","It was reverted, although I don't necessarily absorb the argument:

Reverted because when corosync service is not enabled and corosync
is executed by ""systemctl start corosync"" it is then immediately
shutdown because of ""Unit not needed anymore. Stopping."".

This was indeed the expected behaviour per the original commit.
Free-running, dependency-free corosync is rather an anti-pattern.
If you want to run it regardless, and you don't want to commit to
running it after boot, there's a simple:
systemctl enable --runtime --now corosync
I'd appreciate if you consulted that with me here prior to rushing
with the revert.  Or did I miss a pull request, a ML post, or other
public inputs?
What were your use cases, what changed your mind?
Maintainer's POV and expectations are not necessary overlapping
with that of user base.  The project shall focus rather on the
latter if the former can be dealt with without much hassle,
as in this case.",True,{}
corosync/corosync,https://github.com/corosync/corosync,422,2018-12-16T20:58:13Z,2019-01-03T08:52:10Z,2019-01-03T09:48:22Z,CLOSED,False,6,4,4,https://github.com/wferi,Message changes,3,[],https://github.com/corosync/corosync/pull/422,https://github.com/wferi,1,https://github.com/corosync/corosync/pull/422,"Just a couple of things I found strange experimenting with the configuration.
BTW is providing both nodeid and name for each node the best practice with KNET? http://people.redhat.com/ccaulfie/docs/KnetCorosync.pdf explains why name is useful, then nodeid unexpectedly appears in the text and gets even more useful: not only unique and stable against link changes, but defines the order of the nodes along the ring as well. So name does not seem that indispensable anymore. Except maybe it provides node names for Pacemaker?","Just a couple of things I found strange experimenting with the configuration.
BTW is providing both nodeid and name for each node the best practice with KNET? http://people.redhat.com/ccaulfie/docs/KnetCorosync.pdf explains why name is useful, then nodeid unexpectedly appears in the text and gets even more useful: not only unique and stable against link changes, but defines the order of the nodes along the ring as well. So name does not seem that indispensable anymore. Except maybe it provides node names for Pacemaker?",True,{}
corosync/corosync,https://github.com/corosync/corosync,422,2018-12-16T20:58:13Z,2019-01-03T08:52:10Z,2019-01-03T09:48:22Z,CLOSED,False,6,4,4,https://github.com/wferi,Message changes,3,[],https://github.com/corosync/corosync/pull/422,https://github.com/chrissie-c,2,https://github.com/corosync/corosync/pull/422#issuecomment-447777988,"Just a couple of things I found strange experimenting with the configuration.
BTW is providing both nodeid and name for each node the best practice with KNET? http://people.redhat.com/ccaulfie/docs/KnetCorosync.pdf explains why name is useful, then nodeid unexpectedly appears in the text and gets even more useful: not only unique and stable against link changes, but defines the order of the nodes along the ring as well. So name does not seem that indispensable anymore. Except maybe it provides node names for Pacemaker?",name is needed for nodes with >1 link as it provides the only stable reference for finding the local host information. The node needs to know which nodeid is it's node id and ip_addr isn't adequate for finding that as it can change over time or even be not available when corosync is started.,True,{}
corosync/corosync,https://github.com/corosync/corosync,422,2018-12-16T20:58:13Z,2019-01-03T08:52:10Z,2019-01-03T09:48:22Z,CLOSED,False,6,4,4,https://github.com/wferi,Message changes,3,[],https://github.com/corosync/corosync/pull/422,https://github.com/wferi,3,https://github.com/corosync/corosync/pull/422#issuecomment-447787576,"Just a couple of things I found strange experimenting with the configuration.
BTW is providing both nodeid and name for each node the best practice with KNET? http://people.redhat.com/ccaulfie/docs/KnetCorosync.pdf explains why name is useful, then nodeid unexpectedly appears in the text and gets even more useful: not only unique and stable against link changes, but defines the order of the nodes along the ring as well. So name does not seem that indispensable anymore. Except maybe it provides node names for Pacemaker?","Ah, so name is for picking the local node from the nodelist, got it now, thanks. Could then nodeid be auto-generated by hashing the name (as long as there's no collision)? Are the names checked between different nodes, or only the nodeid values?",True,{}
corosync/corosync,https://github.com/corosync/corosync,422,2018-12-16T20:58:13Z,2019-01-03T08:52:10Z,2019-01-03T09:48:22Z,CLOSED,False,6,4,4,https://github.com/wferi,Message changes,3,[],https://github.com/corosync/corosync/pull/422,https://github.com/chrissie-c,4,https://github.com/corosync/corosync/pull/422#issuecomment-447789818,"Just a couple of things I found strange experimenting with the configuration.
BTW is providing both nodeid and name for each node the best practice with KNET? http://people.redhat.com/ccaulfie/docs/KnetCorosync.pdf explains why name is useful, then nodeid unexpectedly appears in the text and gets even more useful: not only unique and stable against link changes, but defines the order of the nodes along the ring as well. So name does not seem that indispensable anymore. Except maybe it provides node names for Pacemaker?","I considered other autogenerated node ID options some time ago, but they all end up being really messy - both internally and externally (node ids 1,2,3,4 are much easier on the eye than, eg, 251426371, 6512381,36171236) and nobody has really reported them as a hardship. especially as pcs (which is what we recommend people use) generates them anyway.
name is only checked for the local node, when the config file is read or re-read. Other node's names are only used for displaying in tools like corosync-quorumtool.",True,{}
corosync/corosync,https://github.com/corosync/corosync,422,2018-12-16T20:58:13Z,2019-01-03T08:52:10Z,2019-01-03T09:48:22Z,CLOSED,False,6,4,4,https://github.com/wferi,Message changes,3,[],https://github.com/corosync/corosync/pull/422,https://github.com/chrissie-c,5,https://github.com/corosync/corosync/pull/422#issuecomment-447791880,"Just a couple of things I found strange experimenting with the configuration.
BTW is providing both nodeid and name for each node the best practice with KNET? http://people.redhat.com/ccaulfie/docs/KnetCorosync.pdf explains why name is useful, then nodeid unexpectedly appears in the text and gets even more useful: not only unique and stable against link changes, but defines the order of the nodes along the ring as well. So name does not seem that indispensable anymore. Except maybe it provides node names for Pacemaker?",I have no problem with the message changes BTW. Honza is off until new year now though,True,{}
corosync/corosync,https://github.com/corosync/corosync,422,2018-12-16T20:58:13Z,2019-01-03T08:52:10Z,2019-01-03T09:48:22Z,CLOSED,False,6,4,4,https://github.com/wferi,Message changes,3,[],https://github.com/corosync/corosync/pull/422,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/422#issuecomment-451084060,"Just a couple of things I found strange experimenting with the configuration.
BTW is providing both nodeid and name for each node the best practice with KNET? http://people.redhat.com/ccaulfie/docs/KnetCorosync.pdf explains why name is useful, then nodeid unexpectedly appears in the text and gets even more useful: not only unique and stable against link changes, but defines the order of the nodes along the ring as well. So name does not seem that indispensable anymore. Except maybe it provides node names for Pacemaker?","@wferi Nice catch and patches, so ACK and merged as a fcf5733 .. ba24bef . Thank you for the patches.
@chrissie-c Thank you for the review.",True,{}
corosync/corosync,https://github.com/corosync/corosync,423,2018-12-20T16:27:09Z,2019-01-03T09:11:30Z,2019-01-03T09:11:30Z,CLOSED,False,5,0,1,https://github.com/fabbione,[totemknet] update for libknet.so.2.0.0 init API,1,[],https://github.com/corosync/corosync/pull/423,https://github.com/fabbione,1,https://github.com/corosync/corosync/pull/423,"more changes are to be expected on this front as the API evolves in knet master
Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com","more changes are to be expected on this front as the API evolves in knet master
Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,423,2018-12-20T16:27:09Z,2019-01-03T09:11:30Z,2019-01-03T09:11:30Z,CLOSED,False,5,0,1,https://github.com/fabbione,[totemknet] update for libknet.so.2.0.0 init API,1,[],https://github.com/corosync/corosync/pull/423,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/423#issuecomment-451087864,"more changes are to be expected on this front as the API evolves in knet master
Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com",@fabbione nice patch so ACK and merged as a ff7ace7,True,{}
corosync/corosync,https://github.com/corosync/corosync,425,2019-01-04T15:04:10Z,2019-03-19T16:37:15Z,2019-03-19T17:10:57Z,CLOSED,False,8,3,1,https://github.com/jnpkrn,"Refrain from plain ""virtual synchrony"" term that's overloaded",2,[],https://github.com/corosync/corosync/pull/425,https://github.com/jnpkrn,1,https://github.com/corosync/corosync/pull/425,"Corosync doesn't implement Virtual synchrony, the concrete algorithm
implementing the notion of (virtual) synchronicity within the
distributed system (where this notion itself can be, apparently
ambiguously, referred to as a virtual synchrony).
Regarding the specific algorithm in question, corosync implements
(substantial portion of) Extended virtual synchrony, so let's state
that explicitly, to prevent confusion.","Corosync doesn't implement Virtual synchrony, the concrete algorithm
implementing the notion of (virtual) synchronicity within the
distributed system (where this notion itself can be, apparently
ambiguously, referred to as a virtual synchrony).
Regarding the specific algorithm in question, corosync implements
(substantial portion of) Extended virtual synchrony, so let's state
that explicitly, to prevent confusion.",True,{}
corosync/corosync,https://github.com/corosync/corosync,425,2019-01-04T15:04:10Z,2019-03-19T16:37:15Z,2019-03-19T17:10:57Z,CLOSED,False,8,3,1,https://github.com/jnpkrn,"Refrain from plain ""virtual synchrony"" term that's overloaded",2,[],https://github.com/corosync/corosync/pull/425,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/425#issuecomment-451468329,"Corosync doesn't implement Virtual synchrony, the concrete algorithm
implementing the notion of (virtual) synchronicity within the
distributed system (where this notion itself can be, apparently
ambiguously, referred to as a virtual synchrony).
Regarding the specific algorithm in question, corosync implements
(substantial portion of) Extended virtual synchrony, so let's state
that explicitly, to prevent confusion.",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,425,2019-01-04T15:04:10Z,2019-03-19T16:37:15Z,2019-03-19T17:10:57Z,CLOSED,False,8,3,1,https://github.com/jnpkrn,"Refrain from plain ""virtual synchrony"" term that's overloaded",2,[],https://github.com/corosync/corosync/pull/425,https://github.com/jnpkrn,3,https://github.com/corosync/corosync/pull/425#issuecomment-451525074,"Corosync doesn't implement Virtual synchrony, the concrete algorithm
implementing the notion of (virtual) synchronicity within the
distributed system (where this notion itself can be, apparently
ambiguously, referred to as a virtual synchrony).
Regarding the specific algorithm in question, corosync implements
(substantial portion of) Extended virtual synchrony, so let's state
that explicitly, to prevent confusion.","Hmm, some non-actionable (as of now?) branches, like gh-pages in
particular for being code-less stuff, would deserve omission from
this automation.",True,{}
corosync/corosync,https://github.com/corosync/corosync,425,2019-01-04T15:04:10Z,2019-03-19T16:37:15Z,2019-03-19T17:10:57Z,CLOSED,False,8,3,1,https://github.com/jnpkrn,"Refrain from plain ""virtual synchrony"" term that's overloaded",2,[],https://github.com/corosync/corosync/pull/425,https://github.com/fabbione,4,https://github.com/corosync/corosync/pull/425#issuecomment-451527549,"Corosync doesn't implement Virtual synchrony, the concrete algorithm
implementing the notion of (virtual) synchronicity within the
distributed system (where this notion itself can be, apparently
ambiguously, referred to as a virtual synchrony).
Regarding the specific algorithm in question, corosync implements
(substantial portion of) Extended virtual synchrony, so let's state
that explicitly, to prevent confusion.",or we could add html validation for changes like this for example :),True,{}
corosync/corosync,https://github.com/corosync/corosync,425,2019-01-04T15:04:10Z,2019-03-19T16:37:15Z,2019-03-19T17:10:57Z,CLOSED,False,8,3,1,https://github.com/jnpkrn,"Refrain from plain ""virtual synchrony"" term that's overloaded",2,[],https://github.com/corosync/corosync/pull/425,https://github.com/jnpkrn,5,https://github.com/corosync/corosync/pull/425#issuecomment-451531580,"Corosync doesn't implement Virtual synchrony, the concrete algorithm
implementing the notion of (virtual) synchronicity within the
distributed system (where this notion itself can be, apparently
ambiguously, referred to as a virtual synchrony).
Regarding the specific algorithm in question, corosync implements
(substantial portion of) Extended virtual synchrony, so let's state
that explicitly, to prevent confusion.","Also an option, sure.  Just pointing out gh-pages branches are
special in GitHub realms, which is currently an exclusive target AFAIK.",True,{}
corosync/corosync,https://github.com/corosync/corosync,425,2019-01-04T15:04:10Z,2019-03-19T16:37:15Z,2019-03-19T17:10:57Z,CLOSED,False,8,3,1,https://github.com/jnpkrn,"Refrain from plain ""virtual synchrony"" term that's overloaded",2,[],https://github.com/corosync/corosync/pull/425,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/425#issuecomment-474460581,"Corosync doesn't implement Virtual synchrony, the concrete algorithm
implementing the notion of (virtual) synchronicity within the
distributed system (where this notion itself can be, apparently
ambiguously, referred to as a virtual synchrony).
Regarding the specific algorithm in question, corosync implements
(substantial portion of) Extended virtual synchrony, so let's state
that explicitly, to prevent confusion.",Fixed by e02ac87. I really don't think main page should explain what exact part of evs is really implemented.,True,{}
corosync/corosync,https://github.com/corosync/corosync,425,2019-01-04T15:04:10Z,2019-03-19T16:37:15Z,2019-03-19T17:10:57Z,CLOSED,False,8,3,1,https://github.com/jnpkrn,"Refrain from plain ""virtual synchrony"" term that's overloaded",2,[],https://github.com/corosync/corosync/pull/425,https://github.com/jnpkrn,7,https://github.com/corosync/corosync/pull/425#issuecomment-474474586,"Corosync doesn't implement Virtual synchrony, the concrete algorithm
implementing the notion of (virtual) synchronicity within the
distributed system (where this notion itself can be, apparently
ambiguously, referred to as a virtual synchrony).
Regarding the specific algorithm in question, corosync implements
(substantial portion of) Extended virtual synchrony, so let's state
that explicitly, to prevent confusion.","WFM, thanks (can sleep well universal vs. existential quantifier
ambiguity notwithstanding).
Btw. only recently, I got to know about something that could be
rightfully considered a framwework (or toolkit, as in going
into greater lengths towards the end applications):
ISIS/Horus
that appear to arise from very similar conceptual grounds) and
which build additional primitive tools based on ABCAST/CBCAST etc.",True,{}
corosync/corosync,https://github.com/corosync/corosync,426,2019-01-07T14:59:36Z,2019-01-15T11:10:03Z,2019-01-15T11:10:03Z,CLOSED,False,426,16,5,https://github.com/chrissie-c,totemknet: Add support for libnozzle devices,2,[],https://github.com/corosync/corosync/pull/426,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/426,"A nozzle device is a pseudo ethernet device that routes network
traffic through a channel on the corosync knet network (NOT cpg or any
corosync  internal  service) to other nodes in the cluster. It allows
applications to take advantage of knet features such  as multipathing,
automatic failover, link switching etc.","A nozzle device is a pseudo ethernet device that routes network
traffic through a channel on the corosync knet network (NOT cpg or any
corosync  internal  service) to other nodes in the cluster. It allows
applications to take advantage of knet features such  as multipathing,
automatic failover, link switching etc.",True,{}
corosync/corosync,https://github.com/corosync/corosync,426,2019-01-07T14:59:36Z,2019-01-15T11:10:03Z,2019-01-15T11:10:03Z,CLOSED,False,426,16,5,https://github.com/chrissie-c,totemknet: Add support for libnozzle devices,2,[],https://github.com/corosync/corosync/pull/426,https://github.com/fabbione,2,https://github.com/corosync/corosync/pull/426#issuecomment-452170659,"A nozzle device is a pseudo ethernet device that routes network
traffic through a channel on the corosync knet network (NOT cpg or any
corosync  internal  service) to other nodes in the cluster. It allows
applications to take advantage of knet features such  as multipathing,
automatic failover, link switching etc.","the PR is missing etherfilter.{c,h} and I think I saw some tabs vs spaces mismatches too:
+static int create_nozzle_device(void *knet_context, const char *name,


  		const char *ipaddr, const char *prefix,



  		const char *macaddr)



+{

struct totemknet_instance *instance = (struct totemknet_instance *)knet_context;

   char device_name[IFNAMSIZ+1];



   size_t size = IFNAMSIZ;


int8_t channel = NOZZLE_CHANNEL;",True,{}
corosync/corosync,https://github.com/corosync/corosync,426,2019-01-07T14:59:36Z,2019-01-15T11:10:03Z,2019-01-15T11:10:03Z,CLOSED,False,426,16,5,https://github.com/chrissie-c,totemknet: Add support for libnozzle devices,2,[],https://github.com/corosync/corosync/pull/426,https://github.com/fabbione,3,https://github.com/corosync/corosync/pull/426#issuecomment-452569419,"A nozzle device is a pseudo ethernet device that routes network
traffic through a channel on the corosync knet network (NOT cpg or any
corosync  internal  service) to other nodes in the cluster. It allows
applications to take advantage of knet features such  as multipathing,
automatic failover, link switching etc.",fails to build on FreeBSD because there is no netinet/ethernet.h on BSD. it should be possible to replace it with <net/ethernet.h> on both linux and BSD IIRC.,True,{}
corosync/corosync,https://github.com/corosync/corosync,426,2019-01-07T14:59:36Z,2019-01-15T11:10:03Z,2019-01-15T11:10:03Z,CLOSED,False,426,16,5,https://github.com/chrissie-c,totemknet: Add support for libnozzle devices,2,[],https://github.com/corosync/corosync/pull/426,https://github.com/chrissie-c,4,https://github.com/corosync/corosync/pull/426#issuecomment-454355477,"A nozzle device is a pseudo ethernet device that routes network
traffic through a channel on the corosync knet network (NOT cpg or any
corosync  internal  service) to other nodes in the cluster. It allows
applications to take advantage of knet features such  as multipathing,
automatic failover, link switching etc.",Closing this as it's getting confused and messy. I'll open another one soon,True,{}
corosync/corosync,https://github.com/corosync/corosync,427,2019-01-10T17:06:20Z,2019-01-11T08:38:36Z,2019-01-11T08:38:42Z,CLOSED,False,83,37,3,https://github.com/jfriesse,totemip: Use AF_UNSPEC for ipv4-6 and ipv6-4,1,[],https://github.com/corosync/corosync/pull/427,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/427,"AF_UNSPEC returns different results than AF_INET/AF_INET6, because of
nsswitch.conf search is in order and it stops asking other
modules once current module success.
Example of difference between previous and new code when ipv6-4 is used:

/etc/hosts contains test_name with an ipv4
previous code called AF_INET6 where /etc/hosts failed so other methods
were used which may return IPv6 addr -> result was ether fail or IPv6
address.
new code calls AF_UNSPEC returning IPv4 defined in /etc/hosts ->
result is IPv4 address

New code behavior should solve problems caused by nss-myhostname.
Signed-off-by: Jan Friesse jfriesse@redhat.com","AF_UNSPEC returns different results than AF_INET/AF_INET6, because of
nsswitch.conf search is in order and it stops asking other
modules once current module success.
Example of difference between previous and new code when ipv6-4 is used:

/etc/hosts contains test_name with an ipv4
previous code called AF_INET6 where /etc/hosts failed so other methods
were used which may return IPv6 addr -> result was ether fail or IPv6
address.
new code calls AF_UNSPEC returning IPv4 defined in /etc/hosts ->
result is IPv4 address

New code behavior should solve problems caused by nss-myhostname.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,427,2019-01-10T17:06:20Z,2019-01-11T08:38:36Z,2019-01-11T08:38:42Z,CLOSED,False,83,37,3,https://github.com/jfriesse,totemip: Use AF_UNSPEC for ipv4-6 and ipv6-4,1,[],https://github.com/corosync/corosync/pull/427,https://github.com/fabbione,2,https://github.com/corosync/corosync/pull/427#issuecomment-453429475,"AF_UNSPEC returns different results than AF_INET/AF_INET6, because of
nsswitch.conf search is in order and it stops asking other
modules once current module success.
Example of difference between previous and new code when ipv6-4 is used:

/etc/hosts contains test_name with an ipv4
previous code called AF_INET6 where /etc/hosts failed so other methods
were used which may return IPv6 addr -> result was ether fail or IPv6
address.
new code calls AF_UNSPEC returning IPv4 defined in /etc/hosts ->
result is IPv4 address

New code behavior should solve problems caused by nss-myhostname.
Signed-off-by: Jan Friesse jfriesse@redhat.com",ACK,True,{}
corosync/corosync,https://github.com/corosync/corosync,427,2019-01-10T17:06:20Z,2019-01-11T08:38:36Z,2019-01-11T08:38:42Z,CLOSED,False,83,37,3,https://github.com/jfriesse,totemip: Use AF_UNSPEC for ipv4-6 and ipv6-4,1,[],https://github.com/corosync/corosync/pull/427,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/427#issuecomment-453430798,"AF_UNSPEC returns different results than AF_INET/AF_INET6, because of
nsswitch.conf search is in order and it stops asking other
modules once current module success.
Example of difference between previous and new code when ipv6-4 is used:

/etc/hosts contains test_name with an ipv4
previous code called AF_INET6 where /etc/hosts failed so other methods
were used which may return IPv6 addr -> result was ether fail or IPv6
address.
new code calls AF_UNSPEC returning IPv4 defined in /etc/hosts ->
result is IPv4 address

New code behavior should solve problems caused by nss-myhostname.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@fabbione Thank you for the review. I've merged the patch as a 2ab4d41 .,True,{}
corosync/corosync,https://github.com/corosync/corosync,428,2019-01-15T15:19:24Z,2019-02-26T12:14:08Z,2019-02-26T12:14:08Z,CLOSED,False,476,16,5,https://github.com/chrissie-c,Add support for libnozzle devices (take 2),6,[],https://github.com/corosync/corosync/pull/428,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/428,"A nozzle device is a pseudo ethernet device that routes network
traffic through a channel on the corosync knet network (NOT cpg or any
corosync internal service) to other nodes in the cluster. It allows
applications to take advantage of knet features such as multipathing,
automatic failover, link switching etc.","A nozzle device is a pseudo ethernet device that routes network
traffic through a channel on the corosync knet network (NOT cpg or any
corosync internal service) to other nodes in the cluster. It allows
applications to take advantage of knet features such as multipathing,
automatic failover, link switching etc.",True,{}
corosync/corosync,https://github.com/corosync/corosync,428,2019-01-15T15:19:24Z,2019-02-26T12:14:08Z,2019-02-26T12:14:08Z,CLOSED,False,476,16,5,https://github.com/chrissie-c,Add support for libnozzle devices (take 2),6,[],https://github.com/corosync/corosync/pull/428,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/428#issuecomment-456030056,"A nozzle device is a pseudo ethernet device that routes network
traffic through a channel on the corosync knet network (NOT cpg or any
corosync internal service) to other nodes in the cluster. It allows
applications to take advantage of knet features such as multipathing,
automatic failover, link switching etc.","@chrissie-c Would it be possible to check ipaddr_str and prefix_str only when name_str is not null? Because currently when nozzle is disabled it displays error ""No IP address supplied for Nozzle device"", what may be slightly confusing and (IMHO) can lead to situation when people will set some ipaddr/prefix just to make corosync ""happy"" or they will start ignore this error. Also this kind of makes impossible to remove nozzle device during runtime just by clearing whole section and reload config (one must keep at least ipaddr/prefix)
Also I'm not entirellly sure if info message about missing updown.d script (exec nozzle * script failed: No such file or directory) is really helpful. IMHO if there is no such file then user probably don't want it and displaying ""error - info"" message is kind of redundant. I would suggest to display error only for other errors (permission denied/...). But this is not a blocker and I'm open to hear arguments why current behavior make sense.
I've also found out that it's not possible to change ip during runtime. I've set:
nozzle {
  name: testnoozle
  ipaddr: 192.168.6.1
  ipprefix: 24
}

executed corosync and everything works. Then I've changed config so:
nozzle {
  name: testnoozle
  ipaddr: 192.168.5.1
  ipprefix: 24
}

and execute corosync-cfgtool -R and result is ""Unable to init nozzle device testnoozle"" (using knet master - 40cdf778074ffe87767790fc4b49f92cc584aa50) - sadly even with debug there are no extra information. Distribution is RHEL 7.
Let me add few more information:

when nothing changes same error ""Unable to init nozzle device testnoozle"" is displayed too.
it's possible to change ip using following actions:

executed corosync
removes nozzle name and reloads
adds nozzle name, changes ip and reloads",True,{}
corosync/corosync,https://github.com/corosync/corosync,428,2019-01-15T15:19:24Z,2019-02-26T12:14:08Z,2019-02-26T12:14:08Z,CLOSED,False,476,16,5,https://github.com/chrissie-c,Add support for libnozzle devices (take 2),6,[],https://github.com/corosync/corosync/pull/428,https://github.com/chrissie-c,3,https://github.com/corosync/corosync/pull/428#issuecomment-462385447,"A nozzle device is a pseudo ethernet device that routes network
traffic through a channel on the corosync knet network (NOT cpg or any
corosync internal service) to other nodes in the cluster. It allows
applications to take advantage of knet features such as multipathing,
automatic failover, link switching etc.",New commit that doesn't cause the device to be deleted and recreated every config reload.,True,{}
corosync/corosync,https://github.com/corosync/corosync,428,2019-01-15T15:19:24Z,2019-02-26T12:14:08Z,2019-02-26T12:14:08Z,CLOSED,False,476,16,5,https://github.com/chrissie-c,Add support for libnozzle devices (take 2),6,[],https://github.com/corosync/corosync/pull/428,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/428#issuecomment-467415591,"A nozzle device is a pseudo ethernet device that routes network
traffic through a channel on the corosync knet network (NOT cpg or any
corosync internal service) to other nodes in the cluster. It allows
applications to take advantage of knet features such as multipathing,
automatic failover, link switching etc.",@chrissie-c Thank you for the patch and passion. I was unable to find any problem so ACK and merged as a eab55e7,True,{}
corosync/corosync,https://github.com/corosync/corosync,430,2019-01-16T13:46:44Z,2019-01-18T14:06:59Z,2019-01-18T14:08:30Z,CLOSED,False,12,51,2,https://github.com/jfriesse,doc: Update INSTALL file,1,[],https://github.com/corosync/corosync/pull/430,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/430,"Add LibQB and Knet links
Remove old (pre udpu) config file example
Change corosync.conf man page to contain useful information about
token timeout

Signed-off-by: Jan Friesse jfriesse@redhat.com","Add LibQB and Knet links
Remove old (pre udpu) config file example
Change corosync.conf man page to contain useful information about
token timeout

Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,430,2019-01-16T13:46:44Z,2019-01-18T14:06:59Z,2019-01-18T14:08:30Z,CLOSED,False,12,51,2,https://github.com/jfriesse,doc: Update INSTALL file,1,[],https://github.com/corosync/corosync/pull/430,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/430#issuecomment-455550622,"Add LibQB and Knet links
Remove old (pre udpu) config file example
Change corosync.conf man page to contain useful information about
token timeout

Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c Thank you for englishify my czechlish ;) I've (force-push) updated PR.,True,{}
corosync/corosync,https://github.com/corosync/corosync,430,2019-01-16T13:46:44Z,2019-01-18T14:06:59Z,2019-01-18T14:08:30Z,CLOSED,False,12,51,2,https://github.com/jfriesse,doc: Update INSTALL file,1,[],https://github.com/corosync/corosync/pull/430,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/430#issuecomment-455557177,"Add LibQB and Knet links
Remove old (pre udpu) config file example
Change corosync.conf man page to contain useful information about
token timeout

Signed-off-by: Jan Friesse jfriesse@redhat.com","Thank you for the review. I've merged the patch as a ce29717.
Regards,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,431,2019-01-22T10:07:41Z,2019-02-04T07:09:16Z,2019-02-04T07:09:16Z,CLOSED,False,55,3,2,https://github.com/chrissie-c,cfgtool: Improve link status display,1,[],https://github.com/corosync/corosync/pull/431,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/431,"Now show the nodeids properly, rather than node indexes which were
annoying and unhelpful.","Now show the nodeids properly, rather than node indexes which were
annoying and unhelpful.",True,{}
corosync/corosync,https://github.com/corosync/corosync,431,2019-01-22T10:07:41Z,2019-02-04T07:09:16Z,2019-02-04T07:09:16Z,CLOSED,False,55,3,2,https://github.com/chrissie-c,cfgtool: Improve link status display,1,[],https://github.com/corosync/corosync/pull/431,https://github.com/HideoYamauchi,2,https://github.com/corosync/corosync/pull/431#issuecomment-456607298,"Now show the nodeids properly, rather than node indexes which were
annoying and unhelpful.","Hi Chrissie,
Great!
I confirmed that nodeid is displayed correctly with this modification of yours.
It became a user friendly display.
@corosync.conf
(snip)
nodelist {
    node {
        ring0_addr: 192.168.106.185
        ring1_addr: 192.168.107.185
        nodeid: 7
        name: rh74-01
    }
    node {
        ring0_addr: 192.168.106.186
        ring1_addr: 192.168.107.186
        nodeid: 4
        name: rh74-02
    }
}
(snip)

[root@rh74-kro2 corosync]# corosync-cfgtool -s
Printing link status.
Local node ID 4
LINK ID 0
        addr    = 192.168.106.186
        status:
                nodeid  4:      link enabled:1  link connected:1
                nodeid  7:      link enabled:1  link connected:1
LINK ID 1
        addr    = 192.168.107.186
        status:
                nodeid  4:      link enabled:0  link connected:1
                nodeid  7:      link enabled:1  link connected:1

Best Regards,
Hideo Yamauchi.",True,{}
corosync/corosync,https://github.com/corosync/corosync,431,2019-01-22T10:07:41Z,2019-02-04T07:09:16Z,2019-02-04T07:09:16Z,CLOSED,False,55,3,2,https://github.com/chrissie-c,cfgtool: Improve link status display,1,[],https://github.com/corosync/corosync/pull/431,https://github.com/chrissie-c,3,https://github.com/corosync/corosync/pull/431#issuecomment-457106115,"Now show the nodeids properly, rather than node indexes which were
annoying and unhelpful.","Thanks for checking. yes, it makes a lot more sense this way!",True,{}
corosync/corosync,https://github.com/corosync/corosync,431,2019-01-22T10:07:41Z,2019-02-04T07:09:16Z,2019-02-04T07:09:16Z,CLOSED,False,55,3,2,https://github.com/chrissie-c,cfgtool: Improve link status display,1,[],https://github.com/corosync/corosync/pull/431,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/431#issuecomment-460149923,"Now show the nodeids properly, rather than node indexes which were
annoying and unhelpful.","@chrissie-c Nice patch so ACK and merged with one super small change (hopefully you will not mind) - I've reversed order of cmap_finalize/corosync_cfg_finalize, because cfg initialize is first followed by cmap_finalize so (IMHO) destroy order should be reverse, so first cmap followed by cfg.",True,{}
corosync/corosync,https://github.com/corosync/corosync,431,2019-01-22T10:07:41Z,2019-02-04T07:09:16Z,2019-02-04T07:09:16Z,CLOSED,False,55,3,2,https://github.com/chrissie-c,cfgtool: Improve link status display,1,[],https://github.com/corosync/corosync/pull/431,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/431#issuecomment-460149982,"Now show the nodeids properly, rather than node indexes which were
annoying and unhelpful.",Oh and merged as a c0d1448 .,True,{}
corosync/corosync,https://github.com/corosync/corosync,433,2019-01-29T14:50:39Z,2019-02-06T15:06:39Z,2019-02-06T16:58:25Z,CLOSED,False,29,26,10,https://github.com/wferi,Small fixes,5,[],https://github.com/corosync/corosync/pull/433,https://github.com/wferi,1,https://github.com/corosync/corosync/pull/433,Just a bunch of independent small nits I stumbled upon recently...,Just a bunch of independent small nits I stumbled upon recently...,True,{}
corosync/corosync,https://github.com/corosync/corosync,433,2019-01-29T14:50:39Z,2019-02-06T15:06:39Z,2019-02-06T16:58:25Z,CLOSED,False,29,26,10,https://github.com/wferi,Small fixes,5,[],https://github.com/corosync/corosync/pull/433,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/433#issuecomment-461056338,Just a bunch of independent small nits I stumbled upon recently...,"@wferi Good catch and as usual nice patches so ACK and merged as b09b96f .. 059c22a
Thank you for the PR
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,437,2019-02-13T12:03:14Z,2019-02-14T12:47:25Z,2019-02-14T12:47:29Z,CLOSED,False,26,22,2,https://github.com/jfriesse,corosync-cfgtool: Fix -i matching,1,[],https://github.com/corosync/corosync/pull/437,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/437,"Previously it was required to use link id together with IP address (ex.
""0 127.0.0.1"") as a -i parameter.
This was reported as not very user friendly. Solution is to split
returned interface name and try match link id and ip address
separately.
Also fix typo in description of parameter -s.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Previously it was required to use link id together with IP address (ex.
""0 127.0.0.1"") as a -i parameter.
This was reported as not very user friendly. Solution is to split
returned interface name and try match link id and ip address
separately.
Also fix typo in description of parameter -s.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,437,2019-02-13T12:03:14Z,2019-02-14T12:47:25Z,2019-02-14T12:47:29Z,CLOSED,False,26,22,2,https://github.com/jfriesse,corosync-cfgtool: Fix -i matching,1,[],https://github.com/corosync/corosync/pull/437,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/437#issuecomment-463614712,"Previously it was required to use link id together with IP address (ex.
""0 127.0.0.1"") as a -i parameter.
This was reported as not very user friendly. Solution is to split
returned interface name and try match link id and ip address
separately.
Also fix typo in description of parameter -s.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c Thank you for the review. Merged as a 4f9e46e,True,{}
corosync/corosync,https://github.com/corosync/corosync,438,2019-02-14T15:12:11Z,2019-02-15T16:13:39Z,2019-02-15T16:13:44Z,CLOSED,False,47,23,2,https://github.com/jfriesse,quorumtool: Fix exit status codes,1,[],https://github.com/corosync/corosync/pull/438,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/438,"Use EXIT_SUCCESS and EXIT_FAILURE when possible
For -s option return EXIT_SUCCESS when no problem appeared and node
is quorate, EXIT_FAILURE if problem appeared and exit code 2
(EXIT_NOT_QUORATE) when no problem appeared but node is not quorate.
Document exit codes in the man page

Signed-off-by: Jan Friesse jfriesse@redhat.com","Use EXIT_SUCCESS and EXIT_FAILURE when possible
For -s option return EXIT_SUCCESS when no problem appeared and node
is quorate, EXIT_FAILURE if problem appeared and exit code 2
(EXIT_NOT_QUORATE) when no problem appeared but node is not quorate.
Document exit codes in the man page

Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,438,2019-02-14T15:12:11Z,2019-02-15T16:13:39Z,2019-02-15T16:13:44Z,CLOSED,False,47,23,2,https://github.com/jfriesse,quorumtool: Fix exit status codes,1,[],https://github.com/corosync/corosync/pull/438,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/438#issuecomment-464106717,"Use EXIT_SUCCESS and EXIT_FAILURE when possible
For -s option return EXIT_SUCCESS when no problem appeared and node
is quorate, EXIT_FAILURE if problem appeared and exit code 2
(EXIT_NOT_QUORATE) when no problem appeared but node is not quorate.
Document exit codes in the man page

Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c Thank you for the review. I've merged patch as a db38e39,True,{}
corosync/corosync,https://github.com/corosync/corosync,440,2019-02-26T10:12:17Z,2019-02-26T12:12:41Z,2019-02-26T12:12:45Z,CLOSED,False,491,17,6,https://github.com/jfriesse,Nozzle config patch,7,[],https://github.com/corosync/corosync/pull/440,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/440,Enhance chrissie-c's #428 with configure.ac changes as described in patch 0a2ad7f . Also let this test by ci.,Enhance chrissie-c's #428 with configure.ac changes as described in patch 0a2ad7f . Also let this test by ci.,True,{}
corosync/corosync,https://github.com/corosync/corosync,440,2019-02-26T10:12:17Z,2019-02-26T12:12:41Z,2019-02-26T12:12:45Z,CLOSED,False,491,17,6,https://github.com/jfriesse,Nozzle config patch,7,[],https://github.com/corosync/corosync/pull/440,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/440#issuecomment-467415148,Enhance chrissie-c's #428 with configure.ac changes as described in patch 0a2ad7f . Also let this test by ci.,@chrissie-c  CI passed so merged as a 83dc407. Thank you for super quick review.,True,{}
corosync/corosync,https://github.com/corosync/corosync,441,2019-03-10T07:25:28Z,2019-05-29T14:35:42Z,2019-05-29T14:35:47Z,CLOSED,False,41,1,4,https://github.com/fabbione,[knet] allow corosync to enable/disable knet access lists,2,[],https://github.com/corosync/corosync/pull/441,https://github.com/fabbione,1,https://github.com/corosync/corosync/pull/441,"currently knet acl are only available on master but they might be backported
to stable1 as they don´t break onwire protocol.
Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com","currently knet acl are only available on master but they might be backported
to stable1 as they don´t break onwire protocol.
Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,441,2019-03-10T07:25:28Z,2019-05-29T14:35:42Z,2019-05-29T14:35:47Z,CLOSED,False,41,1,4,https://github.com/fabbione,[knet] allow corosync to enable/disable knet access lists,2,[],https://github.com/corosync/corosync/pull/441,https://github.com/fabbione,2,https://github.com/corosync/corosync/pull/441#issuecomment-471254481,"currently knet acl are only available on master but they might be backported
to stable1 as they don´t break onwire protocol.
Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com","A few notes: the patch is untested from a functional perspective. I wanted to provide the autotools framework for @chrissie-c.
The patch does NOT use the KNET_API_VERSION because this is a new API call and can potentially be backported to knet stable* so it´s best to detect if the function is available or not.
access lists can be enabled/disabled at runtime, hence they are configured in the reload function, if i read the code correctly :)",True,{}
corosync/corosync,https://github.com/corosync/corosync,441,2019-03-10T07:25:28Z,2019-05-29T14:35:42Z,2019-05-29T14:35:47Z,CLOSED,False,41,1,4,https://github.com/fabbione,[knet] allow corosync to enable/disable knet access lists,2,[],https://github.com/corosync/corosync/pull/441,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/441#issuecomment-471437130,"currently knet acl are only available on master but they might be backported
to stable1 as they don´t break onwire protocol.
Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com","@fabbione Ok, looks good, but let's @chrissie-c to share her opinion.
ack for detection of function existence.",True,{}
corosync/corosync,https://github.com/corosync/corosync,441,2019-03-10T07:25:28Z,2019-05-29T14:35:42Z,2019-05-29T14:35:47Z,CLOSED,False,41,1,4,https://github.com/fabbione,[knet] allow corosync to enable/disable knet access lists,2,[],https://github.com/corosync/corosync/pull/441,https://github.com/chrissie-c,4,https://github.com/corosync/corosync/pull/441#issuecomment-471595098,"currently knet acl are only available on master but they might be backported
to stable1 as they don´t break onwire protocol.
Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com",ACK in principle. I take it the horrible symbol-finding hack is just for testing purposes?,True,{}
corosync/corosync,https://github.com/corosync/corosync,441,2019-03-10T07:25:28Z,2019-05-29T14:35:42Z,2019-05-29T14:35:47Z,CLOSED,False,41,1,4,https://github.com/fabbione,[knet] allow corosync to enable/disable knet access lists,2,[],https://github.com/corosync/corosync/pull/441,https://github.com/fabbione,5,https://github.com/corosync/corosync/pull/441#issuecomment-471625130,"currently knet acl are only available on master but they might be backported
to stable1 as they don´t break onwire protocol.
Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com","The hack is only required when building against a non-system version of knet installed in non-standard paths. It has no effects otherwise.
On my test systems I install knet in /srv/install/knet-$branch and in order for the AC_CHECK to find it, i need to add path to the knet i want to use.
The hack itself avoids me or any user really to have to specify that path manually during ./configure time.",True,{}
corosync/corosync,https://github.com/corosync/corosync,441,2019-03-10T07:25:28Z,2019-05-29T14:35:42Z,2019-05-29T14:35:47Z,CLOSED,False,41,1,4,https://github.com/fabbione,[knet] allow corosync to enable/disable knet access lists,2,[],https://github.com/corosync/corosync/pull/441,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/441#issuecomment-473923192,"currently knet acl are only available on master but they might be backported
to stable1 as they don´t break onwire protocol.
Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com","@chrissie-c Have you got a chance to test this patch? If so, could you please share a results?
totem.knet_enable_access_lists looks like a ok section for me.",True,{}
corosync/corosync,https://github.com/corosync/corosync,441,2019-03-10T07:25:28Z,2019-05-29T14:35:42Z,2019-05-29T14:35:47Z,CLOSED,False,41,1,4,https://github.com/fabbione,[knet] allow corosync to enable/disable knet access lists,2,[],https://github.com/corosync/corosync/pull/441,https://github.com/jfriesse,7,https://github.com/corosync/corosync/pull/441#issuecomment-496963936,"currently knet acl are only available on master but they might be backported
to stable1 as they don´t break onwire protocol.
Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com","Closing this PR in favor of #471 , which is now merged as a 9bba026 .
@fabbione Thank you for the original patch and (of more important) knet part
@chrissie-c Thank you for the fix of original patch",True,{}
corosync/corosync,https://github.com/corosync/corosync,442,2019-03-19T13:55:45Z,2019-03-19T15:33:54Z,2019-03-19T15:34:10Z,CLOSED,False,38,5,4,https://github.com/jfriesse,qnetd: Check existence of NSS DB dir before fork,1,[],https://github.com/corosync/corosync/pull/442,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/442,"Previously, when user tried start corosync-qnetd without
initialized NSS database in then generic (not very helpful
and misleading) NSS error was logged
""NSS error (-8015): The certificate/key database is in an old,
unsupported format."".
Solution is to check if it's possible to open NSS DB directory and
display (usually much more informative) result of strerror function.
Such check is called before fork, so init system can return error code
during start.
To make error reporting work with systemd it's also needed to change unit
type from simple to forking.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Previously, when user tried start corosync-qnetd without
initialized NSS database in then generic (not very helpful
and misleading) NSS error was logged
""NSS error (-8015): The certificate/key database is in an old,
unsupported format."".
Solution is to check if it's possible to open NSS DB directory and
display (usually much more informative) result of strerror function.
Such check is called before fork, so init system can return error code
during start.
To make error reporting work with systemd it's also needed to change unit
type from simple to forking.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,442,2019-03-19T13:55:45Z,2019-03-19T15:33:54Z,2019-03-19T15:34:10Z,CLOSED,False,38,5,4,https://github.com/jfriesse,qnetd: Check existence of NSS DB dir before fork,1,[],https://github.com/corosync/corosync/pull/442,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/442#issuecomment-474381586,"Previously, when user tried start corosync-qnetd without
initialized NSS database in then generic (not very helpful
and misleading) NSS error was logged
""NSS error (-8015): The certificate/key database is in an old,
unsupported format."".
Solution is to check if it's possible to open NSS DB directory and
display (usually much more informative) result of strerror function.
Such check is called before fork, so init system can return error code
during start.
To make error reporting work with systemd it's also needed to change unit
type from simple to forking.
Signed-off-by: Jan Friesse jfriesse@redhat.com",This patch is valid also for qdevice master when systemd unit part is removed.,True,{}
corosync/corosync,https://github.com/corosync/corosync,442,2019-03-19T13:55:45Z,2019-03-19T15:33:54Z,2019-03-19T15:34:10Z,CLOSED,False,38,5,4,https://github.com/jfriesse,qnetd: Check existence of NSS DB dir before fork,1,[],https://github.com/corosync/corosync/pull/442,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/442#issuecomment-474427178,"Previously, when user tried start corosync-qnetd without
initialized NSS database in then generic (not very helpful
and misleading) NSS error was logged
""NSS error (-8015): The certificate/key database is in an old,
unsupported format."".
Solution is to check if it's possible to open NSS DB directory and
display (usually much more informative) result of strerror function.
Such check is called before fork, so init system can return error code
during start.
To make error reporting work with systemd it's also needed to change unit
type from simple to forking.
Signed-off-by: Jan Friesse jfriesse@redhat.com","@chrissie-c Thank you for super fast review :) I've merged patch as a eac28df and (version without systemd unit file patch) as a corosync/corosync-qdevice@31cc217, so closing this PR.",True,{}
corosync/corosync,https://github.com/corosync/corosync,443,2019-03-25T12:07:48Z,2019-03-26T13:01:00Z,2019-03-26T13:01:00Z,CLOSED,False,53,27,1,https://github.com/ReyRen,Fix index error and part of return code check,1,[],https://github.com/corosync/corosync/pull/443,https://github.com/ReyRen,1,https://github.com/corosync/corosync/pull/443,"""_logsys_subsys_filename_add"" should have a return code,
in order to check function error, I think it's better than
using assert(3).
logsys.loggers[s].file_idx++ should be corrected.
logsys_loggers[] should set right index limit.

Signed-off-by: yuan ren reyren179@gmail.com","""_logsys_subsys_filename_add"" should have a return code,
in order to check function error, I think it's better than
using assert(3).
logsys.loggers[s].file_idx++ should be corrected.
logsys_loggers[] should set right index limit.

Signed-off-by: yuan ren reyren179@gmail.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,443,2019-03-25T12:07:48Z,2019-03-26T13:01:00Z,2019-03-26T13:01:00Z,CLOSED,False,53,27,1,https://github.com/ReyRen,Fix index error and part of return code check,1,[],https://github.com/corosync/corosync/pull/443,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/443#issuecomment-476168416,"""_logsys_subsys_filename_add"" should have a return code,
in order to check function error, I think it's better than
using assert(3).
logsys.loggers[s].file_idx++ should be corrected.
logsys_loggers[] should set right index limit.

Signed-off-by: yuan ren reyren179@gmail.com",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,443,2019-03-25T12:07:48Z,2019-03-26T13:01:00Z,2019-03-26T13:01:00Z,CLOSED,False,53,27,1,https://github.com/ReyRen,Fix index error and part of return code check,1,[],https://github.com/corosync/corosync/pull/443,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/443#issuecomment-476233170,"""_logsys_subsys_filename_add"" should have a return code,
in order to check function error, I think it's better than
using assert(3).
logsys.loggers[s].file_idx++ should be corrected.
logsys_loggers[] should set right index limit.

Signed-off-by: yuan ren reyren179@gmail.com",@knet-ci-bot test this please,True,{}
corosync/corosync,https://github.com/corosync/corosync,443,2019-03-25T12:07:48Z,2019-03-26T13:01:00Z,2019-03-26T13:01:00Z,CLOSED,False,53,27,1,https://github.com/ReyRen,Fix index error and part of return code check,1,[],https://github.com/corosync/corosync/pull/443,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/443#issuecomment-476278592,"""_logsys_subsys_filename_add"" should have a return code,
in order to check function error, I think it's better than
using assert(3).
logsys.loggers[s].file_idx++ should be corrected.
logsys_loggers[] should set right index limit.

Signed-off-by: yuan ren reyren179@gmail.com","@ReyRen Could you please elaborate a little more on what exactly is this patch trying to solve? Have you found any issue/bug (and if so, could you please share reproducer) or it's just ""cleaning up""?
Few comments:

_logsys_subsys_filename_add - current solution is probably not perfect, but please keep in mind this function is really internal and assert is just ok way to handle problem. Actually it's much better than trying to call LOGSYS_PERROR which may not log anything, because of misconfigured logsys state.
How is logsys.loggers[s].file_idx++ part incorrect?
static struct logsys_logger logsys_loggers[LOGSYS_MAX_SUBSYS_COUNT + 1]; is little bit misleading, but actually, with using ""correct"" indexing it's even worse. Field with LOGSYS_MAX_SUBSYS_COUNT index is used as a default for other subsystems, with using ""correct"" indexing it would be LOGSYS_MAX_SUBSYS_COUNT - 1. Honestly using LOGSYS_MAX_SUBSYS_COUNT seems for me to be more understandable.",True,{}
corosync/corosync,https://github.com/corosync/corosync,443,2019-03-25T12:07:48Z,2019-03-26T13:01:00Z,2019-03-26T13:01:00Z,CLOSED,False,53,27,1,https://github.com/ReyRen,Fix index error and part of return code check,1,[],https://github.com/corosync/corosync/pull/443,https://github.com/ReyRen,5,https://github.com/corosync/corosync/pull/443#issuecomment-476485330,"""_logsys_subsys_filename_add"" should have a return code,
in order to check function error, I think it's better than
using assert(3).
logsys.loggers[s].file_idx++ should be corrected.
logsys_loggers[] should set right index limit.

Signed-off-by: yuan ren reyren179@gmail.com","@ReyRen Could you please elaborate a little more on what exactly is this patch trying to solve? Have you found any issue/bug (and if so, could you please share reproducer) or it's just ""cleaning up""?

Not found some issues/bugs, but the code should be more preciseness I think :)


_logsys_subsys_filename_add - current solution is probably not perfect, but please keep in mind this function is really internal and assert is just ok way to handle problem. Actually it's much better than trying to call LOGSYS_PERROR which may not log anything, because of misconfigured logsys state.


I strongly recommend to have return code check, include some system call which have return value. As for the log problem, we'd better rethink about that.
btw, if the assert is better to handle internal problem, can I use that to handle system call return check?",True,{}
corosync/corosync,https://github.com/corosync/corosync,443,2019-03-25T12:07:48Z,2019-03-26T13:01:00Z,2019-03-26T13:01:00Z,CLOSED,False,53,27,1,https://github.com/ReyRen,Fix index error and part of return code check,1,[],https://github.com/corosync/corosync/pull/443,https://github.com/ReyRen,6,https://github.com/corosync/corosync/pull/443#issuecomment-476486735,"""_logsys_subsys_filename_add"" should have a return code,
in order to check function error, I think it's better than
using assert(3).
logsys.loggers[s].file_idx++ should be corrected.
logsys_loggers[] should set right index limit.

Signed-off-by: yuan ren reyren179@gmail.com","static struct logsys_logger logsys_loggers[LOGSYS_MAX_SUBSYS_COUNT + 1]; is little bit misleading, but actually, with using ""correct"" indexing it's even worse. Field with LOGSYS_MAX_SUBSYS_COUNT index is used as a default for other subsystems, with using ""correct"" indexing it would be LOGSYS_MAX_SUBSYS_COUNT - 1. Honestly using LOGSYS_MAX_SUBSYS_COUNT seems for me to be more understandable.


You can forget about this one although it's reasonable from my perspective.",True,{}
corosync/corosync,https://github.com/corosync/corosync,443,2019-03-25T12:07:48Z,2019-03-26T13:01:00Z,2019-03-26T13:01:00Z,CLOSED,False,53,27,1,https://github.com/ReyRen,Fix index error and part of return code check,1,[],https://github.com/corosync/corosync/pull/443,https://github.com/jfriesse,7,https://github.com/corosync/corosync/pull/443#issuecomment-476499750,"""_logsys_subsys_filename_add"" should have a return code,
in order to check function error, I think it's better than
using assert(3).
logsys.loggers[s].file_idx++ should be corrected.
logsys_loggers[] should set right index limit.

Signed-off-by: yuan ren reyren179@gmail.com","@ReyRen Could you please elaborate a little more on what exactly is this patch trying to solve? Have you found any issue/bug (and if so, could you please share reproducer) or it's just ""cleaning up""?

Not found some issues/bugs, but the code should be more preciseness I think :)

Yep, agreed. Logsys glue layer is bit of ugly.



_logsys_subsys_filename_add - current solution is probably not perfect, but please keep in mind this function is really internal and assert is just ok way to handle problem. Actually it's much better than trying to call LOGSYS_PERROR which may not log anything, because of misconfigured logsys state.


I strongly recommend to have return code check, include some system call which have return value. As for the log problem, we'd better rethink about that.
btw, if the assert is better to handle internal problem, can I use that to handle system call return check?

Let me express my opinion on using assert. Assert is perfectly valid when:

It really asserts something what should never happen (partly this case)
There is really nothing better to do - no way to recover. Imho this is the main case. It's in logsys so logging something is very hard (or impossible), it's internal code and totally independent on configuration or state of the system. Or rephrased. When developer adds more files than preallocated array size, it will assert - easy to spot easy to fix.",True,{}
corosync/corosync,https://github.com/corosync/corosync,443,2019-03-25T12:07:48Z,2019-03-26T13:01:00Z,2019-03-26T13:01:00Z,CLOSED,False,53,27,1,https://github.com/ReyRen,Fix index error and part of return code check,1,[],https://github.com/corosync/corosync/pull/443,https://github.com/ReyRen,8,https://github.com/corosync/corosync/pull/443#issuecomment-476512794,"""_logsys_subsys_filename_add"" should have a return code,
in order to check function error, I think it's better than
using assert(3).
logsys.loggers[s].file_idx++ should be corrected.
logsys_loggers[] should set right index limit.

Signed-off-by: yuan ren reyren179@gmail.com","@jfriesse thanks for your explanation.  Yes, assert is really easy to spot and then fix. So, the whole syslog subsystem are internal code and independent, right? If so I think we can close this PR because it's doesn't matter, although there are lots of function's return check missed.",True,{}
corosync/corosync,https://github.com/corosync/corosync,443,2019-03-25T12:07:48Z,2019-03-26T13:01:00Z,2019-03-26T13:01:00Z,CLOSED,False,53,27,1,https://github.com/ReyRen,Fix index error and part of return code check,1,[],https://github.com/corosync/corosync/pull/443,https://github.com/jfriesse,9,https://github.com/corosync/corosync/pull/443#issuecomment-476617560,"""_logsys_subsys_filename_add"" should have a return code,
in order to check function error, I think it's better than
using assert(3).
logsys.loggers[s].file_idx++ should be corrected.
logsys_loggers[] should set right index limit.

Signed-off-by: yuan ren reyren179@gmail.com","@jfriesse thanks for your explanation. Yes, assert is really easy to spot and then fix. So, the whole syslog subsystem are internal code and independent, right? If so I think we can close this PR because

logsys :) There are function which I would call ""external"" - found in include/corosync/logsys.h. You may notice most of them return error codes (blackbox is exception). These functions are mostly runtime and quite carefully selected to not break logging and to give caller possibility to log error.

it's doesn't matter, although there are lots of function's return check missed.

Yep.
Anyway, I believe we are on same page now, so closing the PR.
Thank you for the PR,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,444,2019-03-29T07:45:09Z,2019-04-01T06:21:45Z,2019-04-01T06:21:45Z,CLOSED,False,1,1,1,https://github.com/ReyRen,Word spelling mistake,1,[],https://github.com/corosync/corosync/pull/444,https://github.com/ReyRen,1,https://github.com/corosync/corosync/pull/444,Signed-off-by: yuan ren reyren179@gmail.com,Signed-off-by: yuan ren reyren179@gmail.com,True,{}
corosync/corosync,https://github.com/corosync/corosync,444,2019-03-29T07:45:09Z,2019-04-01T06:21:45Z,2019-04-01T06:21:45Z,CLOSED,False,1,1,1,https://github.com/ReyRen,Word spelling mistake,1,[],https://github.com/corosync/corosync/pull/444,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/444#issuecomment-477901250,Signed-off-by: yuan ren reyren179@gmail.com,Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,444,2019-03-29T07:45:09Z,2019-04-01T06:21:45Z,2019-04-01T06:21:45Z,CLOSED,False,1,1,1,https://github.com/ReyRen,Word spelling mistake,1,[],https://github.com/corosync/corosync/pull/444,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/444#issuecomment-477902826,Signed-off-by: yuan ren reyren179@gmail.com,@knet-ci-bot: test this please,True,{}
corosync/corosync,https://github.com/corosync/corosync,444,2019-03-29T07:45:09Z,2019-04-01T06:21:45Z,2019-04-01T06:21:45Z,CLOSED,False,1,1,1,https://github.com/ReyRen,Word spelling mistake,1,[],https://github.com/corosync/corosync/pull/444,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/444#issuecomment-478450680,Signed-off-by: yuan ren reyren179@gmail.com,"@ReyRen Good catch and nice patch, so ACK and merged as a 24a72e9
Thank you for the patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,446,2019-04-03T12:48:43Z,2019-04-10T09:24:26Z,2019-04-10T09:24:26Z,CLOSED,False,4,4,2,https://github.com/Fabian-Gruenbichler,crypto: keep defaults identical to Corosync 2.x,1,[],https://github.com/corosync/corosync/pull/446,https://github.com/Fabian-Gruenbichler,1,https://github.com/corosync/corosync/pull/446,"otherwise upgrades will silently be converted to unauthenticated,
plain text communication.
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com","otherwise upgrades will silently be converted to unauthenticated,
plain text communication.
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,446,2019-04-03T12:48:43Z,2019-04-10T09:24:26Z,2019-04-10T09:24:26Z,CLOSED,False,4,4,2,https://github.com/Fabian-Gruenbichler,crypto: keep defaults identical to Corosync 2.x,1,[],https://github.com/corosync/corosync/pull/446,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/446#issuecomment-479474462,"otherwise upgrades will silently be converted to unauthenticated,
plain text communication.
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,446,2019-04-03T12:48:43Z,2019-04-10T09:24:26Z,2019-04-10T09:24:26Z,CLOSED,False,4,4,2,https://github.com/Fabian-Gruenbichler,crypto: keep defaults identical to Corosync 2.x,1,[],https://github.com/corosync/corosync/pull/446,https://github.com/Fabian-Gruenbichler,3,https://github.com/corosync/corosync/pull/446#issuecomment-479474608,"otherwise upgrades will silently be converted to unauthenticated,
plain text communication.
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com",related: kronosnet/kronosnet#212,True,{}
corosync/corosync,https://github.com/corosync/corosync,446,2019-04-03T12:48:43Z,2019-04-10T09:24:26Z,2019-04-10T09:24:26Z,CLOSED,False,4,4,2,https://github.com/Fabian-Gruenbichler,crypto: keep defaults identical to Corosync 2.x,1,[],https://github.com/corosync/corosync/pull/446,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/446#issuecomment-479480167,"otherwise upgrades will silently be converted to unauthenticated,
plain text communication.
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com","@Fabian-Gruenbichler The reason why default is set to None/None is that only Knet supports encryption. In theory we could detect what transport is in use and use encryption by default when knet is selected. So upgrades would be silently converted to plain text no matter what, until one sets knet transport.
Also keep in mind corosync is wire incompatible with 2.x . Last (but not least), as you've mentioned with Knet bug, crypto keys are longer. All these changes are documented and corosync-keygen creates key with correct length.
So IMHO current situation is just fine. But I'm really open to discussion, so if you have more arguments please don't hesitate to share them.
Also @chrissie-c, what is your opinion there?",True,{}
corosync/corosync,https://github.com/corosync/corosync,446,2019-04-03T12:48:43Z,2019-04-10T09:24:26Z,2019-04-10T09:24:26Z,CLOSED,False,4,4,2,https://github.com/Fabian-Gruenbichler,crypto: keep defaults identical to Corosync 2.x,1,[],https://github.com/corosync/corosync/pull/446,https://github.com/Fabian-Gruenbichler,5,https://github.com/corosync/corosync/pull/446#issuecomment-479622270,"otherwise upgrades will silently be converted to unauthenticated,
plain text communication.
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com","On Wed, Apr 03, 2019 at 06:04:51AM -0700, Jan Friesse wrote:
 @Fabian-Gruenbichler The reason why default is set to None/None is that only Knet supports encryption. In theory we could detect what transport is in use and use encryption by default when knet is selected. So upgrades would be silently converted to plain text no matter what, until one sets knet transport.

 Also keep in mind corosync is wire incompatible with 2.x . Last (but not least), as you've mentioned with Knet bug, crypto keys are longer. All these changes are documented and corosync-keygen creates key with correct length.

 So IMHO current situation is just fine. But I'm really open to discussion, so if you have more arguments please don't hesitate to share them.
AFAICT, that knet requires keys bigger than Corosync 2.x did is just an
artifact of an initial confusion of bits and bytes (but maybe I am
wrong?):

1.) Corosync had static keylength of 1024bit, but a 4096byte buffer
2.) knet initially had a min length of 1024byte, and a max length of
4096 byte (which looks like 1024bit-4096bit was the intention, but the
bigger buffer size in bytes caused this mistake)
3.) knet's min length was moved to 256byte, then 16byte, than 256byte
again, since 1024byte is a bit long for a symmetric key ;)

Anyhow, here's a bit more background for both changes. We currently use
corosync + our own fuse FS on top as
- clustered file system for configuration
- intra-cluster communication and locking mechanism (including
  HA/fencing)

We are in the process of evaluating upgrading to Corosync 3.0 + knet for
our next major release based on Debian Buster.

Our default setup (currently) looks like this:
- Corosync 2.x
- 1024bit authkey
- explicit secauth=on
- implicit default transport=udp
- implicit default crypto_hash=sha1
- implicit default crypto_hash=aes256

Our ideal upgrade path would look like this:
0. check pre-requisites
1. freeze HA part of cluster (to prevent fencing, sort of maintenance mode)
2. upgrade Corosync to 3.0 + knet on all nodes
3. unfreeze cluster

With the current behaviour we'd need to do something like this:
0. check pre-requisites
1. generate new, bigger authkey and distribute via pmxcfs
2. freeze HA part of cluster (to prevent fencing, sort of maintenance mode)
3. set crypto_* in corosync.conf updated via pmxcfs (synced to all
nodes, but since those are ro properties they don't go into effect)
4. overwrite local copy of authkey with one from pmxcfs on all nodes
5. upgrade Corosync to 3.0 + knet on all nodes
6. unfreeze cluster, remove temporary copy of new authkey on pmxcfs

We'd like to avoid this complication and need to touch corosync.conf (at
least for the default case, we of course need to detect and manually
provide guidance for those systems that have an explicit transport
configured, etc.pp.). We have >100k systems using this stack in the
wild, so keeping upgrades between major versions of both our stack and
its major components as simple and friction-less as possible is
paramount for us.

Would you be more willing to merge a PR just changing the default for
knet? Since Corosync 2.x and knet are not wire-compatible anyway, we of
course can change the defaults to better ones (e.g. to get rid of SHA1
;)) - as long as the general baseline of ""authenticated+encrypted""
remains.",True,{}
corosync/corosync,https://github.com/corosync/corosync,446,2019-04-03T12:48:43Z,2019-04-10T09:24:26Z,2019-04-10T09:24:26Z,CLOSED,False,4,4,2,https://github.com/Fabian-Gruenbichler,crypto: keep defaults identical to Corosync 2.x,1,[],https://github.com/corosync/corosync/pull/446,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/446#issuecomment-479778671,"otherwise upgrades will silently be converted to unauthenticated,
plain text communication.
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com","On Wed, Apr 03, 2019 at 06:04:51AM -0700, Jan Friesse wrote: @Fabian-Gruenbichler The reason why default is set to None/None is that only Knet supports encryption. In theory we could detect what transport is in use and use encryption by default when knet is selected. So upgrades would be silently converted to plain text no matter what, until one sets knet transport. Also keep in mind corosync is wire incompatible with 2.x . Last (but not least), as you've mentioned with Knet bug, crypto keys are longer. All these changes are documented and corosync-keygen creates key with correct length. So IMHO current situation is just fine. But I'm really open to discussion, so if you have more arguments please don't hesitate to share them.
AFAICT, that knet requires keys bigger than Corosync 2.x did is just an artifact of an initial confusion of bits and bytes (but maybe I am wrong?): 1.) Corosync had static keylength of 1024bit, but a 4096byte

You are wrong there. It's not confusion but result of Fabio (Knet maintainer) nature :)

buffer 2.) knet initially had a min length of 1024byte, and a max length of 4096 byte (which looks like 1024bit-4096bit was the intention, but the bigger buffer size in bytes caused this mistake) 3.) knet's min

Yes, but it was not mistake.

length was moved to 256byte, then 16byte, than 256byte again, since 1024byte is a bit long for a symmetric key ;) Anyhow, here's a bit more background for both changes. We currently use corosync +

Yeps.I've proposed shorter key length because of FIPS.

our own fuse FS on top as - clustered file system for configuration - intra-cluster communication and locking mechanism (including HA/fencing) We are in the process of evaluating upgrading to Corosync 3.0 + knet for our next major release based on Debian Buster. Our default setup (currently) looks like this: - Corosync 2.x - 1024bit authkey - explicit secauth=on - implicit default transport=udp - implicit

So (in theory) for your use case it may be solution to return secauth back.

default crypto_hash=sha1 - implicit default crypto_hash=aes256 Our ideal upgrade path would look like this: 0. check pre-requisites 1. freeze HA part of cluster (to prevent fencing, sort of maintenance mode) 2. upgrade Corosync to 3.0 + knet on all nodes 3. unfreeze cluster With the current behaviour we'd need to do something like this: 0. check pre-requisites 1. generate new, bigger authkey and distribute via pmxcfs 2. freeze HA part of cluster (to prevent fencing, sort of maintenance mode) 3. set crypto_* in corosync.conf updated via pmxcfs (synced to all nodes, but since those are ro properties they don't go into effect) 4. overwrite local copy of authkey with one from pmxcfs on all nodes 5. upgrade Corosync to 3.0 + knet on all nodes 6. unfreeze cluster, remove temporary copy of new authkey on pmxcfs We'd like to avoid this complication and need to touch corosync.conf (at least for the

Yes, I can agree it's a bit of extra work. But that's why Corosync 3 is called 3 and not 2.5.

default case, we of course need to detect and manually provide guidance for those systems that have an explicit transport configured, etc.pp.). We have >100k systems using this stack in the wild, so keeping upgrades between major versions of both our stack and its major components as simple and friction-less as possible is paramount for us. Would you be more willing to merge a PR just changing the

I have a completely unrelated question. 100+k systems sounds impressive. Have you've seen any other issues with corosync?

default for knet? Since Corosync 2.x and knet are not wire-compatible anyway, we of course can change the defaults to better ones (e.g. to get rid of SHA1 ;)) - as long as the general baseline of ""authenticated+encrypted"" remains.

Honestly, I don't have a strong opinion there, but as I've wrote, return secauth back may be the solution which would also allow us to get ""better"" defaults.
About shorter key ... knet is the right place where to discuss it. Corosync uses Knet constants, so when Knet is changed then recompiled corosync should use new defaults.",True,{}
corosync/corosync,https://github.com/corosync/corosync,446,2019-04-03T12:48:43Z,2019-04-10T09:24:26Z,2019-04-10T09:24:26Z,CLOSED,False,4,4,2,https://github.com/Fabian-Gruenbichler,crypto: keep defaults identical to Corosync 2.x,1,[],https://github.com/corosync/corosync/pull/446,https://github.com/jfriesse,7,https://github.com/corosync/corosync/pull/446#issuecomment-479788598,"otherwise upgrades will silently be converted to unauthenticated,
plain text communication.
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com","@Fabian-Gruenbichler Also could you please share example of ""real"" corosync.conf used so we could decide if there is no other blocker and secauth + knet shorter key would allow migration without changing corosync.conf?",True,{}
corosync/corosync,https://github.com/corosync/corosync,446,2019-04-03T12:48:43Z,2019-04-10T09:24:26Z,2019-04-10T09:24:26Z,CLOSED,False,4,4,2,https://github.com/Fabian-Gruenbichler,crypto: keep defaults identical to Corosync 2.x,1,[],https://github.com/corosync/corosync/pull/446,https://github.com/Fabian-Gruenbichler,8,https://github.com/corosync/corosync/pull/446#issuecomment-480031992,"otherwise upgrades will silently be converted to unauthenticated,
plain text communication.
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com","On Thu, Apr 04, 2019 at 12:12:52AM -0700, Jan Friesse wrote:
 > On Wed, Apr 03, 2019 at 06:04:51AM -0700, Jan Friesse wrote: @Fabian-Gruenbichler The reason why default is set to None/None is that only Knet supports encryption. In theory we could detect what transport is in use and use encryption by default when knet is selected. So upgrades would be silently converted to plain text no matter what, until one sets knet transport. Also keep in mind corosync is wire incompatible with 2.x . Last (but not least), as you've mentioned with Knet bug, crypto keys are longer. All these changes are documented and corosync-keygen creates key with correct length. So IMHO current situation is just fine. But I'm really open to discussion, so if you have more arguments please don't hesitate to share them.
 > AFAICT, that knet requires keys bigger than Corosync 2.x did is just an artifact of an initial confusion of bits and bytes (but maybe I am wrong?): 1.) Corosync had static keylength of 1024bit, but a 4096byte

 You are wrong there. It's not confusion but result of Fabio (Knet maintainer) nature :)

 > buffer 2.) knet initially had a min length of 1024byte, and a max length of 4096 byte (which looks like 1024bit-4096bit was the intention, but the bigger buffer size in bytes caused this mistake) 3.) knet's min

 Yes, but it was not mistake.

 > length was moved to 256byte, then 16byte, than 256byte again, since 1024byte is a bit long for a symmetric key ;) Anyhow, here's a bit more background for both changes. We currently use corosync +

 Yeps.I've proposed shorter key length because of FIPS.
fair enough - I can only guess from reading code and commits ;)

 > our own fuse FS on top as - clustered file system for configuration - intra-cluster communication and locking mechanism (including HA/fencing) We are in the process of evaluating upgrading to Corosync 3.0 + knet for our next major release based on Debian Buster. Our default setup (currently) looks like this: - Corosync 2.x - 1024bit authkey - explicit secauth=on - implicit default transport=udp - implicit

 So (in theory) for your use case it may be solution to return `secauth` back.
yes, if secauth implies some sane default of encryption+authentication.

 > default crypto_hash=sha1 - implicit default crypto_hash=aes256 Our ideal upgrade path would look like this: 0. check pre-requisites 1. freeze HA part of cluster (to prevent fencing, sort of maintenance mode) 2. upgrade Corosync to 3.0 + knet on all nodes 3. unfreeze cluster With the current behaviour we'd need to do something like this: 0. check pre-requisites 1. generate new, bigger authkey and distribute via pmxcfs 2. freeze HA part of cluster (to prevent fencing, sort of maintenance mode) 3. set crypto_* in corosync.conf updated via pmxcfs (synced to all nodes, but since those are ro properties they don't go into effect) 4. overwrite local copy of authkey with one from pmxcfs on all nodes 5. upgrade Corosync to 3.0 + knet on all nodes 6. unfreeze cluster, remove temporary copy of new authkey on pmxcfs We'd like to avoid this complication and need to touch corosync.conf (at least for the

 Yes, I can agree it's a bit of extra work. But that's why Corosync 3 is called 3 and not 2.5.
I know. I also understand the appeal of having a clean slate and not
having to care about things like on-the-wire compatibility. Going from
our previous stable release to the current one worked with seamless
upgrading (among other things, thanks to Corosync being compatible! :)),
so we don't want to stray too far from that if possible.
 > default case, we of course need to detect and manually provide guidance for those systems that have an explicit transport configured, etc.pp.). We have >100k systems using this stack in the wild, so keeping upgrades between major versions of both our stack and its major components as simple and friction-less as possible is paramount for us. Would you be more willing to merge a PR just changing the

 I have a completely unrelated question. 100+k systems sounds impressive. Have you've seen any other issues with corosync?
most bigger clusters seem to use udpu instead of udp, and we have the
usual problems with users's switches interfering with multicast when
misconfigured (or just crap hardware :-P). most clusters are probably in
the <10 node range though, and just use the out-of-the-box setup.

the only major issue we had (and that one took quite a while to get from
""initial user reports"" to ""somewhat reproducible"" to ""triaged & fixed"")
was the one about the first node being paused/stalled and getting kicked
out of the quorum, but not noticing itself[1,2], which you might
remember :)
 > default for knet? Since Corosync 2.x and knet are not wire-compatible anyway, we of course can change the defaults to better ones (e.g. to get rid of SHA1 ;)) - as long as the general baseline of ""authenticated+encrypted"" remains.

 Honestly, I don't have a strong opinion there, but as I've wrote, reading `secauth` may be the solution which would also allow us to get ""better"" defaults.
fine by me as well - I'll send a PR in that direction next week unless
there are objections in the meantime.

1: https://lists.clusterlabs.org/pipermail/users/2018-March/014594.html
2: 23e1795

…

 --
 You are receiving this because you were mentioned.
 Reply to this email directly or view it on GitHub:
 #446 (comment)",True,{}
corosync/corosync,https://github.com/corosync/corosync,446,2019-04-03T12:48:43Z,2019-04-10T09:24:26Z,2019-04-10T09:24:26Z,CLOSED,False,4,4,2,https://github.com/Fabian-Gruenbichler,crypto: keep defaults identical to Corosync 2.x,1,[],https://github.com/corosync/corosync/pull/446,https://github.com/Fabian-Gruenbichler,9,https://github.com/corosync/corosync/pull/446#issuecomment-480034228,"otherwise upgrades will silently be converted to unauthenticated,
plain text communication.
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com","On Thu, Apr 04, 2019 at 07:46:25AM +0000, Jan Friesse wrote:
 @Fabian-Gruenbichler Also could you please share example of ""real"" corosync.conf used so we could decide if there is no other blocker and secauth + knet shorter key would allow migration without changing corosync.conf?
in my test runs everything else works fine:
- not touching the config at all leads to unencrypted+unauthenticated knet
- switching authkey and adding crypto_* leads to encrypted+authenticated
  knet, with no other changes needed.

complaints about using both nodelist and bindnetaddr are logged both for
Corosync 2.x and 3.x, but those seem benign for now..

sample config:
…
----8<----

logging {
  debug: off
  to_syslog: yes
}

nodelist {
  node {
    name: foo
    nodeid: 1
    quorum_votes: 1
    ring0_addr: XX.XX.XX.XX
  }
}

quorum {
  provider: corosync_votequorum
}

totem {
  cluster_name: bar
  config_version: 1
  interface {
    bindnetaddr: XX.XX.XX.XX
    ringnumber: 0
  }
  ip_version: ipv4
  secauth: on
  version: 2
}
---->8----

we do support dual-ring installations as well, I haven't tested that
upgrade path yet.",True,{}
corosync/corosync,https://github.com/corosync/corosync,446,2019-04-03T12:48:43Z,2019-04-10T09:24:26Z,2019-04-10T09:24:26Z,CLOSED,False,4,4,2,https://github.com/Fabian-Gruenbichler,crypto: keep defaults identical to Corosync 2.x,1,[],https://github.com/corosync/corosync/pull/446,https://github.com/jfriesse,10,https://github.com/corosync/corosync/pull/446#issuecomment-480309970,"otherwise upgrades will silently be converted to unauthenticated,
plain text communication.
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com","@Fabian-Gruenbichler:
Thanks for the example config. It looks compatible.
Also thank you for sharing expirience with 100+k systems. I can remember that bug because it was one of the juicy ones ;)
So if you want to prepare PR, please go ahead. Just make sure corosync ether refuses to start or logs something when transport is not knet. Also please make secauth by default off. And crypto_* should take precedence.
I'm Looking forward to reviewing PR :)",True,{'THUMBS_UP': ['https://github.com/Fabian-Gruenbichler']}
corosync/corosync,https://github.com/corosync/corosync,446,2019-04-03T12:48:43Z,2019-04-10T09:24:26Z,2019-04-10T09:24:26Z,CLOSED,False,4,4,2,https://github.com/Fabian-Gruenbichler,crypto: keep defaults identical to Corosync 2.x,1,[],https://github.com/corosync/corosync/pull/446,https://github.com/Fabian-Gruenbichler,11,https://github.com/corosync/corosync/pull/446#issuecomment-481613464,"otherwise upgrades will silently be converted to unauthenticated,
plain text communication.
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com",closed in favor of #450,True,{}
corosync/corosync,https://github.com/corosync/corosync,447,2019-04-03T20:06:26Z,2019-04-05T15:07:54Z,2019-04-05T15:07:54Z,CLOSED,False,4,0,2,https://github.com/Fabian-Gruenbichler,set totem.keyfile and totem.key to RO,1,[],https://github.com/corosync/corosync/pull/447,https://github.com/Fabian-Gruenbichler,1,https://github.com/corosync/corosync/pull/447,"so that we get the nice log message when attempting to modify them at
runtime, just like for totem.crypto_* and co.
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com","so that we get the nice log message when attempting to modify them at
runtime, just like for totem.crypto_* and co.
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,447,2019-04-03T20:06:26Z,2019-04-05T15:07:54Z,2019-04-05T15:07:54Z,CLOSED,False,4,0,2,https://github.com/Fabian-Gruenbichler,set totem.keyfile and totem.key to RO,1,[],https://github.com/corosync/corosync/pull/447,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/447#issuecomment-479639124,"so that we get the nice log message when attempting to modify them at
runtime, just like for totem.crypto_* and co.
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,447,2019-04-03T20:06:26Z,2019-04-05T15:07:54Z,2019-04-05T15:07:54Z,CLOSED,False,4,0,2,https://github.com/Fabian-Gruenbichler,set totem.keyfile and totem.key to RO,1,[],https://github.com/corosync/corosync/pull/447,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/447#issuecomment-479893780,"so that we get the nice log message when attempting to modify them at
runtime, just like for totem.crypto_* and co.
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com",@knet-ci-bot: test this please,True,{}
corosync/corosync,https://github.com/corosync/corosync,447,2019-04-03T20:06:26Z,2019-04-05T15:07:54Z,2019-04-05T15:07:54Z,CLOSED,False,4,0,2,https://github.com/Fabian-Gruenbichler,set totem.keyfile and totem.key to RO,1,[],https://github.com/corosync/corosync/pull/447,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/447#issuecomment-480311069,"so that we get the nice log message when attempting to modify them at
runtime, just like for totem.crypto_* and co.
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com","@Fabian-Gruenbichler Good catch, nice patch, so ACK and merged as a 03fba21
Thank you for the patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,448,2019-04-08T06:57:28Z,2019-04-08T07:06:36Z,2019-04-08T07:11:25Z,CLOSED,False,3,3,1,https://github.com/ReyRen,Small mistake in numeric data type,1,[],https://github.com/corosync/corosync/pull/448,https://github.com/ReyRen,1,https://github.com/corosync/corosync/pull/448,Signed-off-by: yuan ren reyren179@gmail.com,Signed-off-by: yuan ren reyren179@gmail.com,True,{}
corosync/corosync,https://github.com/corosync/corosync,448,2019-04-08T06:57:28Z,2019-04-08T07:06:36Z,2019-04-08T07:11:25Z,CLOSED,False,3,3,1,https://github.com/ReyRen,Small mistake in numeric data type,1,[],https://github.com/corosync/corosync/pull/448,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/448#issuecomment-480707846,Signed-off-by: yuan ren reyren179@gmail.com,Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,448,2019-04-08T06:57:28Z,2019-04-08T07:06:36Z,2019-04-08T07:11:25Z,CLOSED,False,3,3,1,https://github.com/ReyRen,Small mistake in numeric data type,1,[],https://github.com/corosync/corosync/pull/448,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/448#issuecomment-480710172,Signed-off-by: yuan ren reyren179@gmail.com,"@ReyRen Hi. This patch is simply wrong. sscanf needs pointer, not the value. Even compiler will cry and generate a lot of warnings.
Are you sure you've sent the correct patch (and not mistakenly some testing/debug one)?
Anyway, closing this because this will make corosync crash and fixes nothing.",True,{}
corosync/corosync,https://github.com/corosync/corosync,448,2019-04-08T06:57:28Z,2019-04-08T07:06:36Z,2019-04-08T07:11:25Z,CLOSED,False,3,3,1,https://github.com/ReyRen,Small mistake in numeric data type,1,[],https://github.com/corosync/corosync/pull/448,https://github.com/ReyRen,4,https://github.com/corosync/corosync/pull/448#issuecomment-480711510,Signed-off-by: yuan ren reyren179@gmail.com,I see that. sorry for the misunderstanding.,True,{}
corosync/corosync,https://github.com/corosync/corosync,449,2019-04-09T15:14:38Z,2019-04-11T13:14:44Z,2019-04-11T13:14:49Z,CLOSED,False,11,14,2,https://github.com/jfriesse,keygen: Reflect change in knet,1,[],https://github.com/corosync/corosync/pull/449,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/449,"Knet commit 1cb36f0cffd4559971826ca4774a88c5b05882fb reduced minimal
key length to 1024-bit. Keygen should keep compatibility with already
released 3.0.[0-1] so default key length should be 2048 bits. It's
possible to use -s argument to generate shorter key - keygen respects
minimum/maximum as defined by knet.
Also fix man page to reflect this change.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Knet commit 1cb36f0cffd4559971826ca4774a88c5b05882fb reduced minimal
key length to 1024-bit. Keygen should keep compatibility with already
released 3.0.[0-1] so default key length should be 2048 bits. It's
possible to use -s argument to generate shorter key - keygen respects
minimum/maximum as defined by knet.
Also fix man page to reflect this change.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,449,2019-04-09T15:14:38Z,2019-04-11T13:14:44Z,2019-04-11T13:14:49Z,CLOSED,False,11,14,2,https://github.com/jfriesse,keygen: Reflect change in knet,1,[],https://github.com/corosync/corosync/pull/449,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/449#issuecomment-482108998,"Knet commit 1cb36f0cffd4559971826ca4774a88c5b05882fb reduced minimal
key length to 1024-bit. Keygen should keep compatibility with already
released 3.0.[0-1] so default key length should be 2048 bits. It's
possible to use -s argument to generate shorter key - keygen respects
minimum/maximum as defined by knet.
Also fix man page to reflect this change.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c Thank you for the review. Merged as a c260bce,True,{}
corosync/corosync,https://github.com/corosync/corosync,450,2019-04-10T09:23:45Z,2019-04-15T11:33:06Z,2019-04-15T11:33:06Z,CLOSED,False,16,0,2,https://github.com/Fabian-Gruenbichler,crypto: re-introduce secauth parameter,1,[],https://github.com/corosync/corosync/pull/450,https://github.com/Fabian-Gruenbichler,1,https://github.com/corosync/corosync/pull/450,"with the following semantics:

default off
implies crypto_hash SHA256 and crypto_cipher AES256
crypto_* have higher precedence
only applicable for knet, like crypto_*

this should make upgrading from Corosync 2.x less painful for users that
have an explicit secauth=on in their configuration.
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com","with the following semantics:

default off
implies crypto_hash SHA256 and crypto_cipher AES256
crypto_* have higher precedence
only applicable for knet, like crypto_*

this should make upgrading from Corosync 2.x less painful for users that
have an explicit secauth=on in their configuration.
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,450,2019-04-10T09:23:45Z,2019-04-15T11:33:06Z,2019-04-15T11:33:06Z,CLOSED,False,16,0,2,https://github.com/Fabian-Gruenbichler,crypto: re-introduce secauth parameter,1,[],https://github.com/corosync/corosync/pull/450,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/450#issuecomment-481613234,"with the following semantics:

default off
implies crypto_hash SHA256 and crypto_cipher AES256
crypto_* have higher precedence
only applicable for knet, like crypto_*

this should make upgrading from Corosync 2.x less painful for users that
have an explicit secauth=on in their configuration.
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,450,2019-04-10T09:23:45Z,2019-04-15T11:33:06Z,2019-04-15T11:33:06Z,CLOSED,False,16,0,2,https://github.com/Fabian-Gruenbichler,crypto: re-introduce secauth parameter,1,[],https://github.com/corosync/corosync/pull/450,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/450#issuecomment-481651616,"with the following semantics:

default off
implies crypto_hash SHA256 and crypto_cipher AES256
crypto_* have higher precedence
only applicable for knet, like crypto_*

this should make upgrading from Corosync 2.x less painful for users that
have an explicit secauth=on in their configuration.
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com",@knet-ci-bot test this please,True,{}
corosync/corosync,https://github.com/corosync/corosync,450,2019-04-10T09:23:45Z,2019-04-15T11:33:06Z,2019-04-15T11:33:06Z,CLOSED,False,16,0,2,https://github.com/Fabian-Gruenbichler,crypto: re-introduce secauth parameter,1,[],https://github.com/corosync/corosync/pull/450,https://github.com/chrissie-c,4,https://github.com/corosync/corosync/pull/450#issuecomment-481995713,"with the following semantics:

default off
implies crypto_hash SHA256 and crypto_cipher AES256
crypto_* have higher precedence
only applicable for knet, like crypto_*

this should make upgrading from Corosync 2.x less painful for users that
have an explicit secauth=on in their configuration.
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com","I agree with Honza, having an extra structure member for secauth seems like over-thinking it. Presence of the crypto types should be enough.",True,{}
corosync/corosync,https://github.com/corosync/corosync,450,2019-04-10T09:23:45Z,2019-04-15T11:33:06Z,2019-04-15T11:33:06Z,CLOSED,False,16,0,2,https://github.com/Fabian-Gruenbichler,crypto: re-introduce secauth parameter,1,[],https://github.com/corosync/corosync/pull/450,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/450#issuecomment-483123685,"with the following semantics:

default off
implies crypto_hash SHA256 and crypto_cipher AES256
crypto_* have higher precedence
only applicable for knet, like crypto_*

this should make upgrading from Corosync 2.x less painful for users that
have an explicit secauth=on in their configuration.
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com",@Fabian-Gruenbichler Have you got a time to send a new PR?,True,{}
corosync/corosync,https://github.com/corosync/corosync,450,2019-04-10T09:23:45Z,2019-04-15T11:33:06Z,2019-04-15T11:33:06Z,CLOSED,False,16,0,2,https://github.com/Fabian-Gruenbichler,crypto: re-introduce secauth parameter,1,[],https://github.com/corosync/corosync/pull/450,https://github.com/Fabian-Gruenbichler,6,https://github.com/corosync/corosync/pull/450#issuecomment-483131179,"with the following semantics:

default off
implies crypto_hash SHA256 and crypto_cipher AES256
crypto_* have higher precedence
only applicable for knet, like crypto_*

this should make upgrading from Corosync 2.x less painful for users that
have an explicit secauth=on in their configuration.
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com",v2 pushed with requested changes!,True,{}
corosync/corosync,https://github.com/corosync/corosync,450,2019-04-10T09:23:45Z,2019-04-15T11:33:06Z,2019-04-15T11:33:06Z,CLOSED,False,16,0,2,https://github.com/Fabian-Gruenbichler,crypto: re-introduce secauth parameter,1,[],https://github.com/corosync/corosync/pull/450,https://github.com/jfriesse,7,https://github.com/corosync/corosync/pull/450#issuecomment-483137490,"with the following semantics:

default off
implies crypto_hash SHA256 and crypto_cipher AES256
crypto_* have higher precedence
only applicable for knet, like crypto_*

this should make upgrading from Corosync 2.x less painful for users that
have an explicit secauth=on in their configuration.
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com",@knet-ci-bot test this please,True,{}
corosync/corosync,https://github.com/corosync/corosync,450,2019-04-10T09:23:45Z,2019-04-15T11:33:06Z,2019-04-15T11:33:06Z,CLOSED,False,16,0,2,https://github.com/Fabian-Gruenbichler,crypto: re-introduce secauth parameter,1,[],https://github.com/corosync/corosync/pull/450,https://github.com/jfriesse,8,https://github.com/corosync/corosync/pull/450#issuecomment-483215378,"with the following semantics:

default off
implies crypto_hash SHA256 and crypto_cipher AES256
crypto_* have higher precedence
only applicable for knet, like crypto_*

this should make upgrading from Corosync 2.x less painful for users that
have an explicit secauth=on in their configuration.
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com","@Fabian-Gruenbichler Nicely done, so ACK and merged as a b97ca8e.
Thank you for the patch,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,452,2019-04-11T06:36:04Z,2019-04-11T13:16:23Z,2019-04-11T13:16:31Z,CLOSED,False,15,19,4,https://github.com/jfriesse,totemconfig: Remove support for 3des,1,[],https://github.com/corosync/corosync/pull/452,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/452,"Triple DES is considered as a ""weak cipher"" since 2016 so there is
really no need to support it in the corosync. Thanks to bug in
Corosync/Knet/NSS which caused 3des to not work at all,
no matter what library was used, we can just remove support for 3des
without braking the compatibility.
Also fix coroparse so:

totem.crypto_type is removed (this is 1.x construct which was not used
even in 2.x)
Add checking of totem.crypto_model.
Enumarate possible values for crypto_model, crypto_cipher and
crypto_hash error messages

Signed-off-by: Jan Friesse jfriesse@redhat.com","Triple DES is considered as a ""weak cipher"" since 2016 so there is
really no need to support it in the corosync. Thanks to bug in
Corosync/Knet/NSS which caused 3des to not work at all,
no matter what library was used, we can just remove support for 3des
without braking the compatibility.
Also fix coroparse so:

totem.crypto_type is removed (this is 1.x construct which was not used
even in 2.x)
Add checking of totem.crypto_model.
Enumarate possible values for crypto_model, crypto_cipher and
crypto_hash error messages

Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,452,2019-04-11T06:36:04Z,2019-04-11T13:16:23Z,2019-04-11T13:16:31Z,CLOSED,False,15,19,4,https://github.com/jfriesse,totemconfig: Remove support for 3des,1,[],https://github.com/corosync/corosync/pull/452,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/452#issuecomment-482109585,"Triple DES is considered as a ""weak cipher"" since 2016 so there is
really no need to support it in the corosync. Thanks to bug in
Corosync/Knet/NSS which caused 3des to not work at all,
no matter what library was used, we can just remove support for 3des
without braking the compatibility.
Also fix coroparse so:

totem.crypto_type is removed (this is 1.x construct which was not used
even in 2.x)
Add checking of totem.crypto_model.
Enumarate possible values for crypto_model, crypto_cipher and
crypto_hash error messages

Signed-off-by: Jan Friesse jfriesse@redhat.com","@chrissie-c Thanks a lot for the review, I've merged patch as a d05636b .",True,{}
corosync/corosync,https://github.com/corosync/corosync,453,2019-04-11T17:02:55Z,,2021-12-27T05:19:09Z,OPEN,False,1,1,1,https://github.com/jnpkrn,man: fix a typo in cpg_model_initialize.3,1,[],https://github.com/corosync/corosync/pull/453,https://github.com/jnpkrn,1,https://github.com/corosync/corosync/pull/453,"Naively, I'd translate Totem Leader as a node currently in
possession of the token.  If that's incorrect, transcription of
that might also be in order.","Naively, I'd translate Totem Leader as a node currently in
possession of the token.  If that's incorrect, transcription of
that might also be in order.",True,{}
corosync/corosync,https://github.com/corosync/corosync,453,2019-04-11T17:02:55Z,,2021-12-27T05:19:09Z,OPEN,False,1,1,1,https://github.com/jnpkrn,man: fix a typo in cpg_model_initialize.3,1,[],https://github.com/corosync/corosync/pull/453,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/453#issuecomment-482202477,"Naively, I'd translate Totem Leader as a node currently in
possession of the token.  If that's incorrect, transcription of
that might also be in order.",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,453,2019-04-11T17:02:55Z,,2021-12-27T05:19:09Z,OPEN,False,1,1,1,https://github.com/jnpkrn,man: fix a typo in cpg_model_initialize.3,1,[],https://github.com/corosync/corosync/pull/453,https://github.com/chrissie-c,3,https://github.com/corosync/corosync/pull/453#issuecomment-482458583,"Naively, I'd translate Totem Leader as a node currently in
possession of the token.  If that's incorrect, transcription of
that might also be in order.","I would use ""Identifying"" rather than ""pertaining to"". Strictly speaking it's the Totem Representative (or 'rep') but I think Leader is actually clearer.",True,{}
corosync/corosync,https://github.com/corosync/corosync,453,2019-04-11T17:02:55Z,,2021-12-27T05:19:09Z,OPEN,False,1,1,1,https://github.com/jnpkrn,man: fix a typo in cpg_model_initialize.3,1,[],https://github.com/corosync/corosync/pull/453,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/453#issuecomment-482464728,"Naively, I'd translate Totem Leader as a node currently in
possession of the token.  If that's incorrect, transcription of
that might also be in order.","Agree with @chrissie-c.
Also I see adding ""a 32 bit"" as a duplicate information - it's evident from structure definition (in contrast of cpg_address where it kind of make sense because it's not evident from definition).",True,{}
corosync/corosync,https://github.com/corosync/corosync,453,2019-04-11T17:02:55Z,,2021-12-27T05:19:09Z,OPEN,False,1,1,1,https://github.com/jnpkrn,man: fix a typo in cpg_model_initialize.3,1,[],https://github.com/corosync/corosync/pull/453,https://github.com/chrissie-c,5,https://github.com/corosync/corosync/pull/453#issuecomment-482476545,"Naively, I'd translate Totem Leader as a node currently in
possession of the token.  If that's incorrect, transcription of
that might also be in order.","ooh,. also it should be ""an increasing number"", not just ""increasing number""",True,{}
corosync/corosync,https://github.com/corosync/corosync,454,2019-04-16T11:01:08Z,2019-04-16T12:51:07Z,2019-04-16T12:51:11Z,CLOSED,False,24,18,4,https://github.com/jfriesse,cpg: Add CPG_REASON_UNDEFINED,1,[],https://github.com/corosync/corosync/pull/454,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/454,"Previously the reason field for the member_list items
in cpg_totem_confchg_fn was unset what may be little confusing.
Solution is to add a special value CPG_REASON_UNDEFINED and use it for
the member_list items.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Previously the reason field for the member_list items
in cpg_totem_confchg_fn was unset what may be little confusing.
Solution is to add a special value CPG_REASON_UNDEFINED and use it for
the member_list items.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,454,2019-04-16T11:01:08Z,2019-04-16T12:51:07Z,2019-04-16T12:51:11Z,CLOSED,False,24,18,4,https://github.com/jfriesse,cpg: Add CPG_REASON_UNDEFINED,1,[],https://github.com/corosync/corosync/pull/454,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/454#issuecomment-483645779,"Previously the reason field for the member_list items
in cpg_totem_confchg_fn was unset what may be little confusing.
Solution is to add a special value CPG_REASON_UNDEFINED and use it for
the member_list items.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c Thank you for the ACK. I've merged the patch as a 41f9e96 (master) and for needle as a d09df02.,True,{}
corosync/corosync,https://github.com/corosync/corosync,456,2019-04-23T10:56:02Z,2019-04-23T14:18:22Z,2019-04-24T12:55:09Z,CLOSED,False,14,14,1,https://github.com/jfriesse,totemconfig: ipaddr_equal check just addr part,1,[],https://github.com/corosync/corosync/pull/456,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/456,"Checking whole structure is fine for IPv4, but IPv6 contains also scope
id, what may be problem for local address. It's possible to use a zone
index, but because it's not required when host name is used, it
shouldn't be needed when IPv6 address is used.
Example configuration snip which fails without patch:
...
nodelist {
node {
nodeid: 1
ring0_addr: fe80:🔢5678:9abc:def1
}
}
...
(example succeed when %eth0 is used).
With patch, zone index is not needed.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Checking whole structure is fine for IPv4, but IPv6 contains also scope
id, what may be problem for local address. It's possible to use a zone
index, but because it's not required when host name is used, it
shouldn't be needed when IPv6 address is used.
Example configuration snip which fails without patch:
...
nodelist {
node {
nodeid: 1
ring0_addr: fe80:🔢5678:9abc:def1
}
}
...
(example succeed when %eth0 is used).
With patch, zone index is not needed.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,456,2019-04-23T10:56:02Z,2019-04-23T14:18:22Z,2019-04-24T12:55:09Z,CLOSED,False,14,14,1,https://github.com/jfriesse,totemconfig: ipaddr_equal check just addr part,1,[],https://github.com/corosync/corosync/pull/456,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/456#issuecomment-485755437,"Checking whole structure is fine for IPv4, but IPv6 contains also scope
id, what may be problem for local address. It's possible to use a zone
index, but because it's not required when host name is used, it
shouldn't be needed when IPv6 address is used.
Example configuration snip which fails without patch:
...
nodelist {
node {
nodeid: 1
ring0_addr: fe80:🔢5678:9abc:def1
}
}
...
(example succeed when %eth0 is used).
With patch, zone index is not needed.
Signed-off-by: Jan Friesse jfriesse@redhat.com","@chrissie-c Please NACK this if checking of full sockaddr_in/sockaddr_in6 was intended (and if so, we may document it in the man pages).",True,{}
corosync/corosync,https://github.com/corosync/corosync,456,2019-04-23T10:56:02Z,2019-04-23T14:18:22Z,2019-04-24T12:55:09Z,CLOSED,False,14,14,1,https://github.com/jfriesse,totemconfig: ipaddr_equal check just addr part,1,[],https://github.com/corosync/corosync/pull/456,https://github.com/chrissie-c,3,https://github.com/corosync/corosync/pull/456#issuecomment-485780736,"Checking whole structure is fine for IPv4, but IPv6 contains also scope
id, what may be problem for local address. It's possible to use a zone
index, but because it's not required when host name is used, it
shouldn't be needed when IPv6 address is used.
Example configuration snip which fails without patch:
...
nodelist {
node {
nodeid: 1
ring0_addr: fe80:🔢5678:9abc:def1
}
}
...
(example succeed when %eth0 is used).
With patch, zone index is not needed.
Signed-off-by: Jan Friesse jfriesse@redhat.com","That seems sensible to me actually. At the time I was wondering whether we should check the scope_id for ipv6 addresses but, because of what we're actually using that compare for, it seems the wrong thing to do.",True,{}
corosync/corosync,https://github.com/corosync/corosync,456,2019-04-23T10:56:02Z,2019-04-23T14:18:22Z,2019-04-24T12:55:09Z,CLOSED,False,14,14,1,https://github.com/jfriesse,totemconfig: ipaddr_equal check just addr part,1,[],https://github.com/corosync/corosync/pull/456,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/456#issuecomment-485822739,"Checking whole structure is fine for IPv4, but IPv6 contains also scope
id, what may be problem for local address. It's possible to use a zone
index, but because it's not required when host name is used, it
shouldn't be needed when IPv6 address is used.
Example configuration snip which fails without patch:
...
nodelist {
node {
nodeid: 1
ring0_addr: fe80:🔢5678:9abc:def1
}
}
...
(example succeed when %eth0 is used).
With patch, zone index is not needed.
Signed-off-by: Jan Friesse jfriesse@redhat.com","@chrissie-c Thank you for the review. I've merged the patch as a d05c159 .
Regards,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,456,2019-04-23T10:56:02Z,2019-04-23T14:18:22Z,2019-04-24T12:55:09Z,CLOSED,False,14,14,1,https://github.com/jfriesse,totemconfig: ipaddr_equal check just addr part,1,[],https://github.com/corosync/corosync/pull/456,https://github.com/ReyRen,5,https://github.com/corosync/corosync/pull/456#issuecomment-486181009,"Checking whole structure is fine for IPv4, but IPv6 contains also scope
id, what may be problem for local address. It's possible to use a zone
index, but because it's not required when host name is used, it
shouldn't be needed when IPv6 address is used.
Example configuration snip which fails without patch:
...
nodelist {
node {
nodeid: 1
ring0_addr: fe80:🔢5678:9abc:def1
}
}
...
(example succeed when %eth0 is used).
With patch, zone index is not needed.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Hello, here is a trick question after gone through relevant code :
When I use  UDP as  totem.transport, the nodelist.ring0_addr must be specified but the interface is optional. In this way, the bindnetaddr useless, because the ring0_addr would cover that address according to ""config_convert_nodelist_to_interface"".
btw, it works for me without nodeID(nodelist) when using ipv6+udp, it's different with corosync.conf(5) about ""bindnetaddr"".",True,{}
corosync/corosync,https://github.com/corosync/corosync,456,2019-04-23T10:56:02Z,2019-04-23T14:18:22Z,2019-04-24T12:55:09Z,CLOSED,False,14,14,1,https://github.com/jfriesse,totemconfig: ipaddr_equal check just addr part,1,[],https://github.com/corosync/corosync/pull/456,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/456#issuecomment-486202944,"Checking whole structure is fine for IPv4, but IPv6 contains also scope
id, what may be problem for local address. It's possible to use a zone
index, but because it's not required when host name is used, it
shouldn't be needed when IPv6 address is used.
Example configuration snip which fails without patch:
...
nodelist {
node {
nodeid: 1
ring0_addr: fe80:🔢5678:9abc:def1
}
}
...
(example succeed when %eth0 is used).
With patch, zone index is not needed.
Signed-off-by: Jan Friesse jfriesse@redhat.com","@ReyRen Yep, nodelist in corosync 3.x must be specified and bindnetaddr is really useless. Auto-generating nodeid for ipv6 is wrong and must be fixed, thanks for pointing that out.
Edit: PR for checking IPv6 is #458.",True,{}
corosync/corosync,https://github.com/corosync/corosync,457,2019-04-23T14:51:19Z,2019-04-24T12:35:13Z,2019-04-24T12:35:17Z,CLOSED,False,21,5,4,https://github.com/jfriesse,vqsim: Make vqsim compile,1,[],https://github.com/corosync/corosync/pull/457,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/457,"Also add vqsim binary to .gitignore.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Also add vqsim binary to .gitignore.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,457,2019-04-23T14:51:19Z,2019-04-24T12:35:13Z,2019-04-24T12:35:17Z,CLOSED,False,21,5,4,https://github.com/jfriesse,vqsim: Make vqsim compile,1,[],https://github.com/corosync/corosync/pull/457,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/457#issuecomment-486209033,"Also add vqsim binary to .gitignore.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c Thank you for the review and ACK. I've merged the patch as a e287a7c.,True,{}
corosync/corosync,https://github.com/corosync/corosync,458,2019-04-24T12:50:49Z,2019-04-25T15:11:52Z,2019-04-25T15:11:56Z,CLOSED,False,17,0,1,https://github.com/jfriesse,totemconfig: Ensure nodeid is specified for IPv6,1,[],https://github.com/corosync/corosync/pull/458,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/458,Signed-off-by: Jan Friesse jfriesse@redhat.com,Signed-off-by: Jan Friesse jfriesse@redhat.com,True,{}
corosync/corosync,https://github.com/corosync/corosync,458,2019-04-24T12:50:49Z,2019-04-25T15:11:52Z,2019-04-25T15:11:56Z,CLOSED,False,17,0,1,https://github.com/jfriesse,totemconfig: Ensure nodeid is specified for IPv6,1,[],https://github.com/corosync/corosync/pull/458,https://github.com/ReyRen,2,https://github.com/corosync/corosync/pull/458#issuecomment-486523973,Signed-off-by: Jan Friesse jfriesse@redhat.com,"@jfriesse Works for me, thanks.",True,{}
corosync/corosync,https://github.com/corosync/corosync,458,2019-04-24T12:50:49Z,2019-04-25T15:11:52Z,2019-04-25T15:11:56Z,CLOSED,False,17,0,1,https://github.com/jfriesse,totemconfig: Ensure nodeid is specified for IPv6,1,[],https://github.com/corosync/corosync/pull/458,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/458#issuecomment-486715412,Signed-off-by: Jan Friesse jfriesse@redhat.com,"@chrissie-c Thank you for the review, I've merged the commit as a  3172a76.",True,{}
corosync/corosync,https://github.com/corosync/corosync,459,2019-04-25T13:41:22Z,2019-04-25T14:54:28Z,2019-04-25T14:54:28Z,CLOSED,False,38,7,2,https://github.com/chrissie-c,vqsim: Fix vqsim for corosync 3.0,1,[],https://github.com/corosync/corosync/pull/459,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/459,"A couple of small internal changes in corosync 3.0 broke vqsim, this brings it back into line.

A custom config file is specified directly not in an environment  variable
votequorum now needs to know our_node_pos. Which is a lot easier to work out here
because we already know the nodeid.","A couple of small internal changes in corosync 3.0 broke vqsim, this brings it back into line.

A custom config file is specified directly not in an environment  variable
votequorum now needs to know our_node_pos. Which is a lot easier to work out here
because we already know the nodeid.",True,{}
corosync/corosync,https://github.com/corosync/corosync,459,2019-04-25T13:41:22Z,2019-04-25T14:54:28Z,2019-04-25T14:54:28Z,CLOSED,False,38,7,2,https://github.com/chrissie-c,vqsim: Fix vqsim for corosync 3.0,1,[],https://github.com/corosync/corosync/pull/459,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/459#issuecomment-486707452,"A couple of small internal changes in corosync 3.0 broke vqsim, this brings it back into line.

A custom config file is specified directly not in an environment  variable
votequorum now needs to know our_node_pos. Which is a lot easier to work out here
because we already know the nodeid.","@chrissie-c Nice pach, so ACK and merged as a e65d7b5 .
Thank you for the patch,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,460,2019-04-26T10:09:15Z,2019-05-13T09:05:19Z,2019-05-13T09:05:19Z,CLOSED,False,457,125,8,https://github.com/chrissie-c,vqsim: Enable scripting of vqsim and add man page,3,[],https://github.com/corosync/corosync/pull/460,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/460,"I've added a 'sleep' command to help with scripting as well as
documentation on how to do it.","I've added a 'sleep' command to help with scripting as well as
documentation on how to do it.",True,{}
corosync/corosync,https://github.com/corosync/corosync,460,2019-04-26T10:09:15Z,2019-05-13T09:05:19Z,2019-05-13T09:05:19Z,CLOSED,False,457,125,8,https://github.com/chrissie-c,vqsim: Enable scripting of vqsim and add man page,3,[],https://github.com/corosync/corosync/pull/460,https://github.com/chrissie-c,2,https://github.com/corosync/corosync/pull/460#issuecomment-491291284,"I've added a 'sleep' command to help with scripting as well as
documentation on how to do it.",The lines I deleted in the last patch are deliberate (before you ask). They prevent a double prompt when running without readline.,True,{}
corosync/corosync,https://github.com/corosync/corosync,460,2019-04-26T10:09:15Z,2019-05-13T09:05:19Z,2019-05-13T09:05:19Z,CLOSED,False,457,125,8,https://github.com/chrissie-c,vqsim: Enable scripting of vqsim and add man page,3,[],https://github.com/corosync/corosync/pull/460,https://github.com/chrissie-c,3,https://github.com/corosync/corosync/pull/460#issuecomment-491701482,"I've added a 'sleep' command to help with scripting as well as
documentation on how to do it.","Yes, I'm happy for you to squash those patches and add WITH_LIST to configure.ac",True,{}
corosync/corosync,https://github.com/corosync/corosync,460,2019-04-26T10:09:15Z,2019-05-13T09:05:19Z,2019-05-13T09:05:19Z,CLOSED,False,457,125,8,https://github.com/chrissie-c,vqsim: Enable scripting of vqsim and add man page,3,[],https://github.com/corosync/corosync/pull/460,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/460#issuecomment-491739934,"I've added a 'sleep' command to help with scripting as well as
documentation on how to do it.","@chrissie-c Perfect. I've merged all patches as a c3d6971 .
Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,461,2019-04-28T10:38:51Z,2019-05-02T08:57:33Z,2019-05-02T08:57:34Z,CLOSED,False,9,1,1,https://github.com/ReyRen,mcastaddr allocated in ipv4-6 or ipv6-4 scenario,1,[],https://github.com/corosync/corosync/pull/461,https://github.com/ReyRen,1,https://github.com/corosync/corosync/pull/461,"UDP as the transport way, the error would occur ""Multicast address family does not match bind address family""  when there is no ipv6 in /etc/hosts specified but using the totem.ip_version=ipv6-4.
The reason why is mcastaddr generated (if not specified) only according to the totem.ip_verison.
Signed-off-by: yuan ren reyren179@gmail.com","UDP as the transport way, the error would occur ""Multicast address family does not match bind address family""  when there is no ipv6 in /etc/hosts specified but using the totem.ip_version=ipv6-4.
The reason why is mcastaddr generated (if not specified) only according to the totem.ip_verison.
Signed-off-by: yuan ren reyren179@gmail.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,461,2019-04-28T10:38:51Z,2019-05-02T08:57:33Z,2019-05-02T08:57:34Z,CLOSED,False,9,1,1,https://github.com/ReyRen,mcastaddr allocated in ipv4-6 or ipv6-4 scenario,1,[],https://github.com/corosync/corosync/pull/461,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/461#issuecomment-487367033,"UDP as the transport way, the error would occur ""Multicast address family does not match bind address family""  when there is no ipv6 in /etc/hosts specified but using the totem.ip_version=ipv6-4.
The reason why is mcastaddr generated (if not specified) only according to the totem.ip_verison.
Signed-off-by: yuan ren reyren179@gmail.com",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,461,2019-04-28T10:38:51Z,2019-05-02T08:57:33Z,2019-05-02T08:57:34Z,CLOSED,False,9,1,1,https://github.com/ReyRen,mcastaddr allocated in ipv4-6 or ipv6-4 scenario,1,[],https://github.com/corosync/corosync/pull/461,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/461#issuecomment-488597537,"UDP as the transport way, the error would occur ""Multicast address family does not match bind address family""  when there is no ipv6 in /etc/hosts specified but using the totem.ip_version=ipv6-4.
The reason why is mcastaddr generated (if not specified) only according to the totem.ip_verison.
Signed-off-by: yuan ren reyren179@gmail.com","@ReyRen Nice catch, nice patch so ACK and merged as a 70cda5d.
Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,462,2019-05-02T13:28:19Z,2019-05-02T14:45:51Z,2019-05-02T14:45:52Z,CLOSED,False,17,12,2,https://github.com/chrissie-c,knet: Fix a couple of errors when adding a new link,1,[],https://github.com/corosync/corosync/pull/462,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/462,"When adding a new link for the first time you will often see:


knet_link_set_ping_timers for nodeid 1, link 1 failed: Invalid
argument (22)


New config has different knet transport for link 1. Internal value
was NOT changed. To reconfigure an interface it must be deleted and
recreated. A working interface needs to be available to corosync at all
times


is caused by setting the ping timers twice, once in
totemknet_member_add() and once in totemknet_refresh_config().
The first time we don't know the value
so it's zero and thus display an error. For this we simply check
for the zero and skip the knet API call. It's not ideal, but
totemconfig needs a lot of reconfiguring itself before we can
make this more sane.


was caused by simply comparing an unconfigured link with
a configured one, so OF COURSE, they are going to be different!","When adding a new link for the first time you will often see:


knet_link_set_ping_timers for nodeid 1, link 1 failed: Invalid
argument (22)


New config has different knet transport for link 1. Internal value
was NOT changed. To reconfigure an interface it must be deleted and
recreated. A working interface needs to be available to corosync at all
times


is caused by setting the ping timers twice, once in
totemknet_member_add() and once in totemknet_refresh_config().
The first time we don't know the value
so it's zero and thus display an error. For this we simply check
for the zero and skip the knet API call. It's not ideal, but
totemconfig needs a lot of reconfiguring itself before we can
make this more sane.


was caused by simply comparing an unconfigured link with
a configured one, so OF COURSE, they are going to be different!",True,{}
corosync/corosync,https://github.com/corosync/corosync,462,2019-05-02T13:28:19Z,2019-05-02T14:45:51Z,2019-05-02T14:45:52Z,CLOSED,False,17,12,2,https://github.com/chrissie-c,knet: Fix a couple of errors when adding a new link,1,[],https://github.com/corosync/corosync/pull/462,https://github.com/chrissie-c,2,https://github.com/corosync/corosync/pull/462#issuecomment-488685723,"When adding a new link for the first time you will often see:


knet_link_set_ping_timers for nodeid 1, link 1 failed: Invalid
argument (22)


New config has different knet transport for link 1. Internal value
was NOT changed. To reconfigure an interface it must be deleted and
recreated. A working interface needs to be available to corosync at all
times


is caused by setting the ping timers twice, once in
totemknet_member_add() and once in totemknet_refresh_config().
The first time we don't know the value
so it's zero and thus display an error. For this we simply check
for the zero and skip the knet API call. It's not ideal, but
totemconfig needs a lot of reconfiguring itself before we can
make this more sane.


was caused by simply comparing an unconfigured link with
a configured one, so OF COURSE, they are going to be different!",github has corrupted the numbers for '3)' read '1)' and for '4)' read '2)'. The text is correct it's just GH displaying wrongly!,True,{}
corosync/corosync,https://github.com/corosync/corosync,462,2019-05-02T13:28:19Z,2019-05-02T14:45:51Z,2019-05-02T14:45:52Z,CLOSED,False,17,12,2,https://github.com/chrissie-c,knet: Fix a couple of errors when adding a new link,1,[],https://github.com/corosync/corosync/pull/462,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/462#issuecomment-488702196,"When adding a new link for the first time you will often see:


knet_link_set_ping_timers for nodeid 1, link 1 failed: Invalid
argument (22)


New config has different knet transport for link 1. Internal value
was NOT changed. To reconfigure an interface it must be deleted and
recreated. A working interface needs to be available to corosync at all
times


is caused by setting the ping timers twice, once in
totemknet_member_add() and once in totemknet_refresh_config().
The first time we don't know the value
so it's zero and thus display an error. For this we simply check
for the zero and skip the knet API call. It's not ideal, but
totemconfig needs a lot of reconfiguring itself before we can
make this more sane.


was caused by simply comparing an unconfigured link with
a configured one, so OF COURSE, they are going to be different!","@chrissie-c Nice patch so ACK and merged as a 01ce5a9.
Thanks!",True,{}
corosync/corosync,https://github.com/corosync/corosync,464,2019-05-07T10:34:35Z,2019-05-24T07:48:29Z,2019-05-24T07:48:29Z,CLOSED,False,26,7,1,https://github.com/ReyRen,man: detailed some in corosync.conf.5,1,[],https://github.com/corosync/corosync/pull/464,https://github.com/ReyRen,1,https://github.com/corosync/corosync/pull/464,"Make the corosync.conf(5) much detailed.
The relations among token, retransmit_timeout, token_retransmits_before_loss_const and hold are:
token_retransmits_before_loss_const and token caculate the retransmit_timeout (only if not specified);
retransmit_timeout calculate the hold (only if not specified).
Signed-off-by: yuan ren reyren179@gmail.com","Make the corosync.conf(5) much detailed.
The relations among token, retransmit_timeout, token_retransmits_before_loss_const and hold are:
token_retransmits_before_loss_const and token caculate the retransmit_timeout (only if not specified);
retransmit_timeout calculate the hold (only if not specified).
Signed-off-by: yuan ren reyren179@gmail.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,464,2019-05-07T10:34:35Z,2019-05-24T07:48:29Z,2019-05-24T07:48:29Z,CLOSED,False,26,7,1,https://github.com/ReyRen,man: detailed some in corosync.conf.5,1,[],https://github.com/corosync/corosync/pull/464,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/464#issuecomment-490027123,"Make the corosync.conf(5) much detailed.
The relations among token, retransmit_timeout, token_retransmits_before_loss_const and hold are:
token_retransmits_before_loss_const and token caculate the retransmit_timeout (only if not specified);
retransmit_timeout calculate the hold (only if not specified).
Signed-off-by: yuan ren reyren179@gmail.com",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,464,2019-05-07T10:34:35Z,2019-05-24T07:48:29Z,2019-05-24T07:48:29Z,CLOSED,False,26,7,1,https://github.com/ReyRen,man: detailed some in corosync.conf.5,1,[],https://github.com/corosync/corosync/pull/464,https://github.com/ReyRen,3,https://github.com/corosync/corosync/pull/464#issuecomment-490028290,"Make the corosync.conf(5) much detailed.
The relations among token, retransmit_timeout, token_retransmits_before_loss_const and hold are:
token_retransmits_before_loss_const and token caculate the retransmit_timeout (only if not specified);
retransmit_timeout calculate the hold (only if not specified).
Signed-off-by: yuan ren reyren179@gmail.com","Using MINIMUM_TIMEOUT to limit token, retransmit_timeout and hold in ""totem_volatile_config_validate"" would cause some confusion. Like, I set ""token_retransmits_before_loss_const: 30"", the hold error would occur. That because the hold calculated to 16, which less than 30.
I'd like to choose a pivot and then calculate others limit. For example: make sure hold greater than 30, the lowest limit of retransmit_timeout would be 50 rather than 30.
Hoping for your idea.
Regards,
Yuan",True,{}
corosync/corosync,https://github.com/corosync/corosync,464,2019-05-07T10:34:35Z,2019-05-24T07:48:29Z,2019-05-24T07:48:29Z,CLOSED,False,26,7,1,https://github.com/ReyRen,man: detailed some in corosync.conf.5,1,[],https://github.com/corosync/corosync/pull/464,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/464#issuecomment-490061074,"Make the corosync.conf(5) much detailed.
The relations among token, retransmit_timeout, token_retransmits_before_loss_const and hold are:
token_retransmits_before_loss_const and token caculate the retransmit_timeout (only if not specified);
retransmit_timeout calculate the hold (only if not specified).
Signed-off-by: yuan ren reyren179@gmail.com","@ReyRen: You are right, error message is really off. Sadly I don't really have an idea how to fix this.
I'm not entirely sure what you mean by 'pivot', but I'm not entirely sure it really helps. May I ask you to explain that idea a little more deeper (ideally with example)?",True,{}
corosync/corosync,https://github.com/corosync/corosync,464,2019-05-07T10:34:35Z,2019-05-24T07:48:29Z,2019-05-24T07:48:29Z,CLOSED,False,26,7,1,https://github.com/ReyRen,man: detailed some in corosync.conf.5,1,[],https://github.com/corosync/corosync/pull/464,https://github.com/ReyRen,5,https://github.com/corosync/corosync/pull/464#issuecomment-490327658,"Make the corosync.conf(5) much detailed.
The relations among token, retransmit_timeout, token_retransmits_before_loss_const and hold are:
token_retransmits_before_loss_const and token caculate the retransmit_timeout (only if not specified);
retransmit_timeout calculate the hold (only if not specified).
Signed-off-by: yuan ren reyren179@gmail.com","@ReyRen: You are right, error message is really off. Sadly I don't really have an idea how to fix this.
I'm not entirely sure what you mean by 'pivot', but I'm not entirely sure it really helps. May I ask you to explain that idea a little more deeper (ideally with example)?

For example, we make sure the lowest limit retransmits timeout is really MINIMUM_TIMEOUT, so the lowest limit of hold would be the 0.8.MINIMUM_TIMEOUT-1000/HZ rather than the MINIMUM_TIMEOUT again. Similarly with token timeout and retransmit counts, but we there should have the highest limit for retransmit counts. Like if the retransmit counts specified bigger than 33(according to the retransmit timeout lowest limit), the token timeout also should be specified and more than the default value (explained in man).",True,{}
corosync/corosync,https://github.com/corosync/corosync,464,2019-05-07T10:34:35Z,2019-05-24T07:48:29Z,2019-05-24T07:48:29Z,CLOSED,False,26,7,1,https://github.com/ReyRen,man: detailed some in corosync.conf.5,1,[],https://github.com/corosync/corosync/pull/464,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/464#issuecomment-490875205,"Make the corosync.conf(5) much detailed.
The relations among token, retransmit_timeout, token_retransmits_before_loss_const and hold are:
token_retransmits_before_loss_const and token caculate the retransmit_timeout (only if not specified);
retransmit_timeout calculate the hold (only if not specified).
Signed-off-by: yuan ren reyren179@gmail.com","@ReyRen Ok, got your idea and it sounds good for me.",True,{}
corosync/corosync,https://github.com/corosync/corosync,464,2019-05-07T10:34:35Z,2019-05-24T07:48:29Z,2019-05-24T07:48:29Z,CLOSED,False,26,7,1,https://github.com/ReyRen,man: detailed some in corosync.conf.5,1,[],https://github.com/corosync/corosync/pull/464,https://github.com/ReyRen,7,https://github.com/corosync/corosync/pull/464#issuecomment-491130438,"Make the corosync.conf(5) much detailed.
The relations among token, retransmit_timeout, token_retransmits_before_loss_const and hold are:
token_retransmits_before_loss_const and token caculate the retransmit_timeout (only if not specified);
retransmit_timeout calculate the hold (only if not specified).
Signed-off-by: yuan ren reyren179@gmail.com","@ReyRen Ok, got your idea and it sounds good for me.

@jfriesse  Thanks, I will fix that as soon as possible and then trim a little bit in the man",True,{}
corosync/corosync,https://github.com/corosync/corosync,464,2019-05-07T10:34:35Z,2019-05-24T07:48:29Z,2019-05-24T07:48:29Z,CLOSED,False,26,7,1,https://github.com/ReyRen,man: detailed some in corosync.conf.5,1,[],https://github.com/corosync/corosync/pull/464,https://github.com/jfriesse,8,https://github.com/corosync/corosync/pull/464#issuecomment-491164340,"Make the corosync.conf(5) much detailed.
The relations among token, retransmit_timeout, token_retransmits_before_loss_const and hold are:
token_retransmits_before_loss_const and token caculate the retransmit_timeout (only if not specified);
retransmit_timeout calculate the hold (only if not specified).
Signed-off-by: yuan ren reyren179@gmail.com","@ReyRen Ok, got your idea and it sounds good for me.

@jfriesse Thanks, I will fix that as soon as possible and then trim a little bit in the man

Perfect, thanks.",True,{}
corosync/corosync,https://github.com/corosync/corosync,464,2019-05-07T10:34:35Z,2019-05-24T07:48:29Z,2019-05-24T07:48:29Z,CLOSED,False,26,7,1,https://github.com/ReyRen,man: detailed some in corosync.conf.5,1,[],https://github.com/corosync/corosync/pull/464,https://github.com/ReyRen,9,https://github.com/corosync/corosync/pull/464#issuecomment-492203359,"Make the corosync.conf(5) much detailed.
The relations among token, retransmit_timeout, token_retransmits_before_loss_const and hold are:
token_retransmits_before_loss_const and token caculate the retransmit_timeout (only if not specified);
retransmit_timeout calculate the hold (only if not specified).
Signed-off-by: yuan ren reyren179@gmail.com","@jfriesse #467, thanks.",True,{}
corosync/corosync,https://github.com/corosync/corosync,464,2019-05-07T10:34:35Z,2019-05-24T07:48:29Z,2019-05-24T07:48:29Z,CLOSED,False,26,7,1,https://github.com/ReyRen,man: detailed some in corosync.conf.5,1,[],https://github.com/corosync/corosync/pull/464,https://github.com/jfriesse,10,https://github.com/corosync/corosync/pull/464#issuecomment-495509079,"Make the corosync.conf(5) much detailed.
The relations among token, retransmit_timeout, token_retransmits_before_loss_const and hold are:
token_retransmits_before_loss_const and token caculate the retransmit_timeout (only if not specified);
retransmit_timeout calculate the hold (only if not specified).
Signed-off-by: yuan ren reyren179@gmail.com",Closing this in favor of #469,True,{}
corosync/corosync,https://github.com/corosync/corosync,466,2019-05-08T19:32:06Z,2019-05-16T12:28:22Z,2019-05-16T12:28:22Z,CLOSED,False,80,37,1,https://github.com/Fabian-Gruenbichler,[WIP] Send single confchg event per group on joinlist,2,[],https://github.com/corosync/corosync/pull/466,https://github.com/Fabian-Gruenbichler,1,https://github.com/corosync/corosync/pull/466,"using a similar approach to
43bead3 ""Send one confchg event per CPG group to CPG client""
which did the same for leave events on a network partition. This is especially helpful to avoid triggering loads of confchg callbacks/events when cold-booting bigger clusters (see kronosnet/kronosnet#218 for a related discussion/example)
Fixes: #351
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com","using a similar approach to
43bead3 ""Send one confchg event per CPG group to CPG client""
which did the same for leave events on a network partition. This is especially helpful to avoid triggering loads of confchg callbacks/events when cold-booting bigger clusters (see kronosnet/kronosnet#218 for a related discussion/example)
Fixes: #351
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,466,2019-05-08T19:32:06Z,2019-05-16T12:28:22Z,2019-05-16T12:28:22Z,CLOSED,False,80,37,1,https://github.com/Fabian-Gruenbichler,[WIP] Send single confchg event per group on joinlist,2,[],https://github.com/corosync/corosync/pull/466,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/466#issuecomment-490619996,"using a similar approach to
43bead3 ""Send one confchg event per CPG group to CPG client""
which did the same for leave events on a network partition. This is especially helpful to avoid triggering loads of confchg callbacks/events when cold-booting bigger clusters (see kronosnet/kronosnet#218 for a related discussion/example)
Fixes: #351
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,466,2019-05-08T19:32:06Z,2019-05-16T12:28:22Z,2019-05-16T12:28:22Z,CLOSED,False,80,37,1,https://github.com/Fabian-Gruenbichler,[WIP] Send single confchg event per group on joinlist,2,[],https://github.com/corosync/corosync/pull/466,https://github.com/Fabian-Gruenbichler,3,https://github.com/corosync/corosync/pull/466#issuecomment-490624207,"using a similar approach to
43bead3 ""Send one confchg event per CPG group to CPG client""
which did the same for leave events on a network partition. This is especially helpful to avoid triggering loads of confchg callbacks/events when cold-booting bigger clusters (see kronosnet/kronosnet#218 for a related discussion/example)
Fixes: #351
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com","I did some initial testing with the test program from the linked knet issue and our regular stack/cluster FS, and for both test cases this PR would completely remove the troublesome initial load spike when cold-booting a cluster. As I am not that well-versed in CPG-internals, I'd appreciate review and/or feedback, especially regarding the assert and changed state transition where I left comments.",True,{}
corosync/corosync,https://github.com/corosync/corosync,466,2019-05-08T19:32:06Z,2019-05-16T12:28:22Z,2019-05-16T12:28:22Z,CLOSED,False,80,37,1,https://github.com/Fabian-Gruenbichler,[WIP] Send single confchg event per group on joinlist,2,[],https://github.com/corosync/corosync/pull/466,https://github.com/Fabian-Gruenbichler,4,https://github.com/corosync/corosync/pull/466#issuecomment-490624816,"using a similar approach to
43bead3 ""Send one confchg event per CPG group to CPG client""
which did the same for leave events on a network partition. This is especially helpful to avoid triggering loads of confchg callbacks/events when cold-booting bigger clusters (see kronosnet/kronosnet#218 for a related discussion/example)
Fixes: #351
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com",(not tested yet: correctness for multiple CPGs in parallel with partially overlapping members!),True,{}
corosync/corosync,https://github.com/corosync/corosync,466,2019-05-08T19:32:06Z,2019-05-16T12:28:22Z,2019-05-16T12:28:22Z,CLOSED,False,80,37,1,https://github.com/Fabian-Gruenbichler,[WIP] Send single confchg event per group on joinlist,2,[],https://github.com/corosync/corosync/pull/466,https://github.com/Fabian-Gruenbichler,5,https://github.com/corosync/corosync/pull/466#issuecomment-492644845,"using a similar approach to
43bead3 ""Send one confchg event per CPG group to CPG client""
which did the same for leave events on a network partition. This is especially helpful to avoid triggering loads of confchg callbacks/events when cold-booting bigger clusters (see kronosnet/kronosnet#218 for a related discussion/example)
Fixes: #351
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com","v2 pushed:

new commit dropping obsolete conn parameter
correct freeing of iter and allocated structs
reworked iteration(s) in notify_lib_joinlist as per our discussion on IRC",True,{}
corosync/corosync,https://github.com/corosync/corosync,466,2019-05-08T19:32:06Z,2019-05-16T12:28:22Z,2019-05-16T12:28:22Z,CLOSED,False,80,37,1,https://github.com/Fabian-Gruenbichler,[WIP] Send single confchg event per group on joinlist,2,[],https://github.com/corosync/corosync/pull/466,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/466#issuecomment-492711689,"using a similar approach to
43bead3 ""Send one confchg event per CPG group to CPG client""
which did the same for leave events on a network partition. This is especially helpful to avoid triggering loads of confchg callbacks/events when cold-booting bigger clusters (see kronosnet/kronosnet#218 for a related discussion/example)
Fixes: #351
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com",@Fabian-Gruenbichler Updated patch looks nice (with small nitpick - skiplist is not freed). I've took your patches and add few comments/czechlish fix/made left_list handling more generic/fixed indentation and pushed new PR #468. Would you mind to test it/review it?,True,{}
corosync/corosync,https://github.com/corosync/corosync,466,2019-05-08T19:32:06Z,2019-05-16T12:28:22Z,2019-05-16T12:28:22Z,CLOSED,False,80,37,1,https://github.com/Fabian-Gruenbichler,[WIP] Send single confchg event per group on joinlist,2,[],https://github.com/corosync/corosync/pull/466,https://github.com/Fabian-Gruenbichler,7,https://github.com/corosync/corosync/pull/466#issuecomment-493046756,"using a similar approach to
43bead3 ""Send one confchg event per CPG group to CPG client""
which did the same for leave events on a network partition. This is especially helpful to avoid triggering loads of confchg callbacks/events when cold-booting bigger clusters (see kronosnet/kronosnet#218 for a related discussion/example)
Fixes: #351
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com",Closed in favor of/continued as part of #468!,True,{}
corosync/corosync,https://github.com/corosync/corosync,467,2019-05-14T11:43:29Z,2019-05-15T14:32:03Z,2019-05-15T14:32:03Z,CLOSED,False,14,6,1,https://github.com/ReyRen,Fix lowest limit among hold and retransmit related,1,[],https://github.com/corosync/corosync/pull/467,https://github.com/ReyRen,1,https://github.com/corosync/corosync/pull/467,"Make sure the retransmit timeout have the lowest limit is
MINIMUM_TIMEOUT. So, the lowest limit of hold should be
recaculated. And token timeout and retransmits count should
keep a relational expression.
Signed-off-by: yuan ren yren@suse.com","Make sure the retransmit timeout have the lowest limit is
MINIMUM_TIMEOUT. So, the lowest limit of hold should be
recaculated. And token timeout and retransmits count should
keep a relational expression.
Signed-off-by: yuan ren yren@suse.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,467,2019-05-14T11:43:29Z,2019-05-15T14:32:03Z,2019-05-15T14:32:03Z,CLOSED,False,14,6,1,https://github.com/ReyRen,Fix lowest limit among hold and retransmit related,1,[],https://github.com/corosync/corosync/pull/467,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/467#issuecomment-492202970,"Make sure the retransmit timeout have the lowest limit is
MINIMUM_TIMEOUT. So, the lowest limit of hold should be
recaculated. And token timeout and retransmits count should
keep a relational expression.
Signed-off-by: yuan ren yren@suse.com",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,467,2019-05-14T11:43:29Z,2019-05-15T14:32:03Z,2019-05-15T14:32:03Z,CLOSED,False,14,6,1,https://github.com/ReyRen,Fix lowest limit among hold and retransmit related,1,[],https://github.com/corosync/corosync/pull/467,https://github.com/ReyRen,3,https://github.com/corosync/corosync/pull/467#issuecomment-492486005,"Make sure the retransmit timeout have the lowest limit is
MINIMUM_TIMEOUT. So, the lowest limit of hold should be
recaculated. And token timeout and retransmits count should
keep a relational expression.
Signed-off-by: yuan ren yren@suse.com","@jfriesse Totally agree, dropped encumbrance error message. Once ACK, I'd like to explain a little bit in man. btw, as you said, users rarely modify these parameters.",True,{}
corosync/corosync,https://github.com/corosync/corosync,467,2019-05-14T11:43:29Z,2019-05-15T14:32:03Z,2019-05-15T14:32:03Z,CLOSED,False,14,6,1,https://github.com/ReyRen,Fix lowest limit among hold and retransmit related,1,[],https://github.com/corosync/corosync/pull/467,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/467#issuecomment-492680264,"Make sure the retransmit timeout have the lowest limit is
MINIMUM_TIMEOUT. So, the lowest limit of hold should be
recaculated. And token timeout and retransmits count should
keep a relational expression.
Signed-off-by: yuan ren yren@suse.com",@ReyRen New version of patch is really nice and easily understandable so ACK and merged as a 2a4cd3c.,True,{}
corosync/corosync,https://github.com/corosync/corosync,468,2019-05-15T15:45:07Z,2019-06-13T13:18:33Z,2019-06-13T13:18:48Z,CLOSED,False,157,71,1,https://github.com/jfriesse,Merge cpg callback,4,[],https://github.com/corosync/corosync/pull/468,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/468,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,468,2019-05-15T15:45:07Z,2019-06-13T13:18:33Z,2019-06-13T13:18:48Z,CLOSED,False,157,71,1,https://github.com/jfriesse,Merge cpg callback,4,[],https://github.com/corosync/corosync/pull/468,https://github.com/Fabian-Gruenbichler,2,https://github.com/corosync/corosync/pull/468#issuecomment-493042377,,"testing did not show any issues, both our artificial test case and our full stack are looking good :)",True,{}
corosync/corosync,https://github.com/corosync/corosync,468,2019-05-15T15:45:07Z,2019-06-13T13:18:33Z,2019-06-13T13:18:48Z,CLOSED,False,157,71,1,https://github.com/jfriesse,Merge cpg callback,4,[],https://github.com/corosync/corosync/pull/468,https://github.com/ThomasLamprecht,3,https://github.com/corosync/corosync/pull/468#issuecomment-495918076,,"I had only some short trips into corosync code so this may be taken with a grain of salt, but the changes look good to me. We (as in Fabian and my shared employer, Proxmox) have taken this in, and it runs currently on our testing systems, no issue showed up yet.
Further we plan to integrate this into needle, as we think that our user can profit there too from this, not sure if you, as upstream, see this worth back porting too as it's not really a bug fix.
Anyway, much thanks to both of your for working on this!",True,{}
corosync/corosync,https://github.com/corosync/corosync,468,2019-05-15T15:45:07Z,2019-06-13T13:18:33Z,2019-06-13T13:18:48Z,CLOSED,False,157,71,1,https://github.com/jfriesse,Merge cpg callback,4,[],https://github.com/corosync/corosync/pull/468,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/468#issuecomment-496099251,,"@GamerSource Thank you for the info! My current plan is to release 3.0.2 without this patch and then merge this patch into master to give other parties time to test it (+ I will inform ML about the change and ask for opinions/testing). I believe nobody will complain so patch should get into 3.0.3.
I'm not too sure about needle backport. Backport itself is/should be quite easy (code is almost identical) but behavior is changed and there is risk of breaking old applications which depends on the old behavior (no matter how much we can ""protect"" our-self with argument about depending on non-documented behavior). Solution may be to add some flag (new behavior/old behavior) but I don't think it's really worth it. So right now I'm more in favor of keeping needle as it is.",True,{}
corosync/corosync,https://github.com/corosync/corosync,468,2019-05-15T15:45:07Z,2019-06-13T13:18:33Z,2019-06-13T13:18:48Z,CLOSED,False,157,71,1,https://github.com/jfriesse,Merge cpg callback,4,[],https://github.com/corosync/corosync/pull/468,https://github.com/ThomasLamprecht,5,https://github.com/corosync/corosync/pull/468#issuecomment-496594926,,"So right now I'm more in favor of keeping needle as it is.

Seems reasonable. Thank you for the feedback and sharing plans.",True,{}
corosync/corosync,https://github.com/corosync/corosync,468,2019-05-15T15:45:07Z,2019-06-13T13:18:33Z,2019-06-13T13:18:48Z,CLOSED,False,157,71,1,https://github.com/jfriesse,Merge cpg callback,4,[],https://github.com/corosync/corosync/pull/468,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/468#issuecomment-501698867,,"3.0.2 is out so I've merged this branch as a c16abe5 .. 3c7f19a .
@Fabian-Gruenbichler Thank you for the patches!",True,{}
corosync/corosync,https://github.com/corosync/corosync,469,2019-05-16T10:35:02Z,2019-05-28T08:00:29Z,2019-05-28T08:00:30Z,CLOSED,False,5,1,1,https://github.com/ReyRen,[man] token_retransmit description,1,[],https://github.com/corosync/corosync/pull/469,https://github.com/ReyRen,1,https://github.com/corosync/corosync/pull/469,"According to 2a4cd3c.
Signed-off-by: yuan ren yren@suse.com","According to 2a4cd3c.
Signed-off-by: yuan ren yren@suse.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,469,2019-05-16T10:35:02Z,2019-05-28T08:00:29Z,2019-05-28T08:00:30Z,CLOSED,False,5,1,1,https://github.com/ReyRen,[man] token_retransmit description,1,[],https://github.com/corosync/corosync/pull/469,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/469#issuecomment-493014137,"According to 2a4cd3c.
Signed-off-by: yuan ren yren@suse.com",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,469,2019-05-16T10:35:02Z,2019-05-28T08:00:29Z,2019-05-28T08:00:30Z,CLOSED,False,5,1,1,https://github.com/ReyRen,[man] token_retransmit description,1,[],https://github.com/corosync/corosync/pull/469,https://github.com/ReyRen,3,https://github.com/corosync/corosync/pull/469#issuecomment-493014594,"According to 2a4cd3c.
Signed-off-by: yuan ren yren@suse.com",@jfriesse And I think #464 can be closed.,True,{}
corosync/corosync,https://github.com/corosync/corosync,469,2019-05-16T10:35:02Z,2019-05-28T08:00:29Z,2019-05-28T08:00:30Z,CLOSED,False,5,1,1,https://github.com/ReyRen,[man] token_retransmit description,1,[],https://github.com/corosync/corosync/pull/469,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/469#issuecomment-496408249,"According to 2a4cd3c.
Signed-off-by: yuan ren yren@suse.com","@ReyRen Thank you for the revisited patch, ACK and merged as a 3e8b525.
btw. I would like to ask you to add comment if you force-push branch, because GH doesn't send a notification when force-push happens (it sends notification only when comment or commit is added). So when you add comment it will speed-up review.",True,{'THUMBS_UP': ['https://github.com/ReyRen']}
corosync/corosync,https://github.com/corosync/corosync,470,2019-05-23T18:06:11Z,2019-05-29T14:31:33Z,2019-05-29T14:31:37Z,CLOSED,False,155,1,6,https://github.com/jfriesse,Needle udpu acl,2,[],https://github.com/corosync/corosync/pull/470,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/470,This is needle version of udpu acl. Master needs slight changes and base it on Fabbio knet patch.,This is needle version of udpu acl. Master needs slight changes and base it on Fabbio knet patch.,True,{}
corosync/corosync,https://github.com/corosync/corosync,470,2019-05-23T18:06:11Z,2019-05-29T14:31:33Z,2019-05-29T14:31:37Z,CLOSED,False,155,1,6,https://github.com/jfriesse,Needle udpu acl,2,[],https://github.com/corosync/corosync/pull/470,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/470#issuecomment-495327049,This is needle version of udpu acl. Master needs slight changes and base it on Fabbio knet patch.,"@chrissie-c I'm open for any idea for better name of ""block_foreign_ips"" + englishify of manpage change. I'm not too keen to use acl, because even it may work well for knet, it (IMHO) doesn't work for corosync at all (honestly, when I would see acl I would expect it has something to do with service socket ACL)",True,{}
corosync/corosync,https://github.com/corosync/corosync,470,2019-05-23T18:06:11Z,2019-05-29T14:31:33Z,2019-05-29T14:31:37Z,CLOSED,False,155,1,6,https://github.com/jfriesse,Needle udpu acl,2,[],https://github.com/corosync/corosync/pull/470,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/470#issuecomment-495522968,This is needle version of udpu acl. Master needs slight changes and base it on Fabbio knet patch.,One extra note. I was afraid of performance impact of this patch (inspect every received packet and checks IP for all members) so I've tested corosync.conf with 64 nodes (only 3 were running) with cpgbench (running on one of the nodes) and with break ; removed from find_member_by_sockaddr (so all members IPs were always compared) and difference compared with non-patched corosync was not measurable. So I think this patch may be merged even in current form and it's not needed to use hash table.,True,{}
corosync/corosync,https://github.com/corosync/corosync,470,2019-05-23T18:06:11Z,2019-05-29T14:31:33Z,2019-05-29T14:31:37Z,CLOSED,False,155,1,6,https://github.com/jfriesse,Needle udpu acl,2,[],https://github.com/corosync/corosync/pull/470,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/470#issuecomment-496196074,This is needle version of udpu acl. Master needs slight changes and base it on Fabbio knet patch.,"@chrissie-c Thank you for the review and testing. I've changed the patch as you've suggested and force-pushed the branch with this PR and master branch PR #471, so now all ""foreign"" is replaced by ""unlisted"" (it sounds way better) , man page is updated and also commit message uses ""unlisted"" word.",True,{}
corosync/corosync,https://github.com/corosync/corosync,470,2019-05-23T18:06:11Z,2019-05-29T14:31:33Z,2019-05-29T14:31:37Z,CLOSED,False,155,1,6,https://github.com/jfriesse,Needle udpu acl,2,[],https://github.com/corosync/corosync/pull/470,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/470#issuecomment-496962255,This is needle version of udpu acl. Master needs slight changes and base it on Fabbio knet patch.,"@chrissie-c Thank you for the review, I've merged patches as a c652ee0",True,{}
corosync/corosync,https://github.com/corosync/corosync,471,2019-05-24T07:45:52Z,2019-05-29T14:33:07Z,2019-05-29T14:33:15Z,CLOSED,False,159,2,8,https://github.com/jfriesse,Master udpu knet acl,4,[],https://github.com/corosync/corosync/pull/471,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/471,Based on #441 and forward port of #470 .,Based on #441 and forward port of #470 .,True,{}
corosync/corosync,https://github.com/corosync/corosync,471,2019-05-24T07:45:52Z,2019-05-29T14:33:07Z,2019-05-29T14:33:15Z,CLOSED,False,159,2,8,https://github.com/jfriesse,Master udpu knet acl,4,[],https://github.com/corosync/corosync/pull/471,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/471#issuecomment-495510915,Based on #441 and forward port of #470 .,force-pushed fixed version (I've forgot delete totem.knet_enable_access_lists in coroparse.c file),True,{}
corosync/corosync,https://github.com/corosync/corosync,471,2019-05-24T07:45:52Z,2019-05-29T14:33:07Z,2019-05-29T14:33:15Z,CLOSED,False,159,2,8,https://github.com/jfriesse,Master udpu knet acl,4,[],https://github.com/corosync/corosync/pull/471,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/471#issuecomment-496196509,Based on #441 and forward port of #470 .,Force-pushed to address changes stated in PR #470,True,{}
corosync/corosync,https://github.com/corosync/corosync,471,2019-05-24T07:45:52Z,2019-05-29T14:33:07Z,2019-05-29T14:33:15Z,CLOSED,False,159,2,8,https://github.com/jfriesse,Master udpu knet acl,4,[],https://github.com/corosync/corosync/pull/471,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/471#issuecomment-496962885,Based on #441 and forward port of #470 .,"@chrissie-c Thank you for the review, and fix for previous knet patch. I've merged patches as a 9bba026",True,{}
corosync/corosync,https://github.com/corosync/corosync,472,2019-05-28T08:12:22Z,2019-05-31T10:52:26Z,2019-05-31T10:52:30Z,CLOSED,False,3,3,1,https://github.com/jfriesse,man: Enhance corosync.conf mp a bit,1,[],https://github.com/corosync/corosync/pull/472,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/472,"Fix issues found by Ulrich Windl Ulrich.Windl@rz.uni-regensburg.de
Signed-off-by: Jan Friesse jfriesse@redhat.com","Fix issues found by Ulrich Windl Ulrich.Windl@rz.uni-regensburg.de
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,472,2019-05-28T08:12:22Z,2019-05-31T10:52:26Z,2019-05-31T10:52:30Z,CLOSED,False,3,3,1,https://github.com/jfriesse,man: Enhance corosync.conf mp a bit,1,[],https://github.com/corosync/corosync/pull/472,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/472#issuecomment-497667157,"Fix issues found by Ulrich Windl Ulrich.Windl@rz.uni-regensburg.de
Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c Thank you for the review. I've merged patch as a 183d5da,True,{}
corosync/corosync,https://github.com/corosync/corosync,474,2019-05-29T13:12:27Z,2019-05-30T13:34:13Z,2019-05-30T13:34:13Z,CLOSED,False,7,3,1,https://github.com/Fabian-Gruenbichler,cfgtool: Fix link status display,1,[],https://github.com/corosync/corosync/pull/474,https://github.com/Fabian-Gruenbichler,1,https://github.com/corosync/corosync/pull/474,"instead of the nodeid, this displayed arbitrary values (usually '1')
from other cmap keys under nodelist.node.XX.
sscanf returns the number of conversions even on mismatch, e.g. it also
returns 1 for
nodelist.node.2.quorum_votes
nodelist.node.2.ring0_addr
nodelist.node.2.name
...
instead of just
nodelist.node.2.nodeid
which leads to the value of (at least) quorum_votes being stored in
nodeid_list in addition to the actual nodeid.
storing the returned int in a cs_error_t enum also potentially masks
errors, so just compare the result with the expectation directly.
this approach is a bit hacky, and some sort of glob/RE matching would
probably be better suited (if already used elsewhere in the code base).
Fixes: c0d1448
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com","instead of the nodeid, this displayed arbitrary values (usually '1')
from other cmap keys under nodelist.node.XX.
sscanf returns the number of conversions even on mismatch, e.g. it also
returns 1 for
nodelist.node.2.quorum_votes
nodelist.node.2.ring0_addr
nodelist.node.2.name
...
instead of just
nodelist.node.2.nodeid
which leads to the value of (at least) quorum_votes being stored in
nodeid_list in addition to the actual nodeid.
storing the returned int in a cs_error_t enum also potentially masks
errors, so just compare the result with the expectation directly.
this approach is a bit hacky, and some sort of glob/RE matching would
probably be better suited (if already used elsewhere in the code base).
Fixes: c0d1448
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,474,2019-05-29T13:12:27Z,2019-05-30T13:34:13Z,2019-05-30T13:34:13Z,CLOSED,False,7,3,1,https://github.com/Fabian-Gruenbichler,cfgtool: Fix link status display,1,[],https://github.com/corosync/corosync/pull/474,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/474#issuecomment-496930505,"instead of the nodeid, this displayed arbitrary values (usually '1')
from other cmap keys under nodelist.node.XX.
sscanf returns the number of conversions even on mismatch, e.g. it also
returns 1 for
nodelist.node.2.quorum_votes
nodelist.node.2.ring0_addr
nodelist.node.2.name
...
instead of just
nodelist.node.2.nodeid
which leads to the value of (at least) quorum_votes being stored in
nodeid_list in addition to the actual nodeid.
storing the returned int in a cs_error_t enum also potentially masks
errors, so just compare the result with the expectation directly.
this approach is a bit hacky, and some sort of glob/RE matching would
probably be better suited (if already used elsewhere in the code base).
Fixes: c0d1448
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,474,2019-05-29T13:12:27Z,2019-05-30T13:34:13Z,2019-05-30T13:34:13Z,CLOSED,False,7,3,1,https://github.com/Fabian-Gruenbichler,cfgtool: Fix link status display,1,[],https://github.com/corosync/corosync/pull/474,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/474#issuecomment-496970244,"instead of the nodeid, this displayed arbitrary values (usually '1')
from other cmap keys under nodelist.node.XX.
sscanf returns the number of conversions even on mismatch, e.g. it also
returns 1 for
nodelist.node.2.quorum_votes
nodelist.node.2.ring0_addr
nodelist.node.2.name
...
instead of just
nodelist.node.2.nodeid
which leads to the value of (at least) quorum_votes being stored in
nodeid_list in addition to the actual nodeid.
storing the returned int in a cs_error_t enum also potentially masks
errors, so just compare the result with the expectation directly.
this approach is a bit hacky, and some sort of glob/RE matching would
probably be better suited (if already used elsewhere in the code base).
Fixes: c0d1448
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com",@knet-ci-bot add to whitelist,True,{}
corosync/corosync,https://github.com/corosync/corosync,474,2019-05-29T13:12:27Z,2019-05-30T13:34:13Z,2019-05-30T13:34:13Z,CLOSED,False,7,3,1,https://github.com/Fabian-Gruenbichler,cfgtool: Fix link status display,1,[],https://github.com/corosync/corosync/pull/474,https://github.com/Fabian-Gruenbichler,4,https://github.com/corosync/corosync/pull/474#issuecomment-497068171,"instead of the nodeid, this displayed arbitrary values (usually '1')
from other cmap keys under nodelist.node.XX.
sscanf returns the number of conversions even on mismatch, e.g. it also
returns 1 for
nodelist.node.2.quorum_votes
nodelist.node.2.ring0_addr
nodelist.node.2.name
...
instead of just
nodelist.node.2.nodeid
which leads to the value of (at least) quorum_votes being stored in
nodeid_list in addition to the actual nodeid.
storing the returned int in a cs_error_t enum also potentially masks
errors, so just compare the result with the expectation directly.
this approach is a bit hacky, and some sort of glob/RE matching would
probably be better suited (if already used elsewhere in the code base).
Fixes: c0d1448
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com","I opted for a variant with %n and %*u, which allows us to drop the unused node_pos variable and to avoid allocating a temp string - if you prefer the one with a temp char[] and %s, just holler :)",True,{}
corosync/corosync,https://github.com/corosync/corosync,474,2019-05-29T13:12:27Z,2019-05-30T13:34:13Z,2019-05-30T13:34:13Z,CLOSED,False,7,3,1,https://github.com/Fabian-Gruenbichler,cfgtool: Fix link status display,1,[],https://github.com/corosync/corosync/pull/474,https://github.com/Fabian-Gruenbichler,5,https://github.com/corosync/corosync/pull/474#issuecomment-497068864,"instead of the nodeid, this displayed arbitrary values (usually '1')
from other cmap keys under nodelist.node.XX.
sscanf returns the number of conversions even on mismatch, e.g. it also
returns 1 for
nodelist.node.2.quorum_votes
nodelist.node.2.ring0_addr
nodelist.node.2.name
...
instead of just
nodelist.node.2.nodeid
which leads to the value of (at least) quorum_votes being stored in
nodeid_list in addition to the actual nodeid.
storing the returned int in a cs_error_t enum also potentially masks
errors, so just compare the result with the expectation directly.
this approach is a bit hacky, and some sort of glob/RE matching would
probably be better suited (if already used elsewhere in the code base).
Fixes: c0d1448
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com","and as always, GH's review interface leaves me thoroughly confused - I can't seem to set your review to resolved, since it ""couldn’t find those commits""..",True,{}
corosync/corosync,https://github.com/corosync/corosync,474,2019-05-29T13:12:27Z,2019-05-30T13:34:13Z,2019-05-30T13:34:13Z,CLOSED,False,7,3,1,https://github.com/Fabian-Gruenbichler,cfgtool: Fix link status display,1,[],https://github.com/corosync/corosync/pull/474,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/474#issuecomment-497330528,"instead of the nodeid, this displayed arbitrary values (usually '1')
from other cmap keys under nodelist.node.XX.
sscanf returns the number of conversions even on mismatch, e.g. it also
returns 1 for
nodelist.node.2.quorum_votes
nodelist.node.2.ring0_addr
nodelist.node.2.name
...
instead of just
nodelist.node.2.nodeid
which leads to the value of (at least) quorum_votes being stored in
nodeid_list in addition to the actual nodeid.
storing the returned int in a cs_error_t enum also potentially masks
errors, so just compare the result with the expectation directly.
this approach is a bit hacky, and some sort of glob/RE matching would
probably be better suited (if already used elsewhere in the code base).
Fixes: c0d1448
Signed-off-by: Fabian Grünbichler f.gruenbichler@proxmox.com","@Fabian-Gruenbichler As I've said in previous review, nice catch! Fixed patch way to match full key is different than rest of the code base (actually I was unable to find %nin any of our code-bases (corosync/libqb/kronosnet/pcmk), but it is working, saves few bytes in the stack and I really like it, so I don't see any reason for forcing temp char array.
Said all of above, ACK and merged as a ef2569d .",True,{}
corosync/corosync,https://github.com/corosync/corosync,477,2019-05-31T07:37:03Z,2019-06-07T09:11:47Z,2019-06-07T09:11:51Z,CLOSED,False,8,0,1,https://github.com/jfriesse,man: Enahnce block_unlisted_ips description,1,[],https://github.com/corosync/corosync/pull/477,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/477,Signed-off-by: Jan Friesse jfriesse@redhat.com,Signed-off-by: Jan Friesse jfriesse@redhat.com,True,{}
corosync/corosync,https://github.com/corosync/corosync,477,2019-05-31T07:37:03Z,2019-06-07T09:11:47Z,2019-06-07T09:11:51Z,CLOSED,False,8,0,1,https://github.com/jfriesse,man: Enahnce block_unlisted_ips description,1,[],https://github.com/corosync/corosync/pull/477,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/477#issuecomment-497671699,Signed-off-by: Jan Friesse jfriesse@redhat.com,"@chrissie-c Thank you for the review, Englishify and refining the description. I've force-pushed fixed version with suggested changes (+ credit in commit message).",True,{}
corosync/corosync,https://github.com/corosync/corosync,477,2019-05-31T07:37:03Z,2019-06-07T09:11:47Z,2019-06-07T09:11:51Z,CLOSED,False,8,0,1,https://github.com/jfriesse,man: Enahnce block_unlisted_ips description,1,[],https://github.com/corosync/corosync/pull/477,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/477#issuecomment-499815084,Signed-off-by: Jan Friesse jfriesse@redhat.com,@chrissie-c Thank you for the review and corrections of text. I've merged patch as a d775f14 .,True,{}
corosync/corosync,https://github.com/corosync/corosync,478,2019-06-04T13:52:51Z,2019-06-14T08:04:58Z,2019-06-14T08:05:04Z,CLOSED,False,56,44,1,https://github.com/jfriesse,totemsrp: Fix warnings produced by gcc 9.1,1,[],https://github.com/corosync/corosync/pull/478,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/478,"New gcc warn about passing posibly unaligned pointer from packed
structure. This shouldn't be problem for x86.
Implemented solution is to let compiler do its job (compiler knows if
pointer is aligned so accessing structure field is safe) and
add macro alternative of srp_addr_copy called
srp_addr_copy_aligned_macro where required, or use temporary (compiler
aligned) variable where unaligned content is copied.
Signed-off-by: Jan Friesse jfriesse@redhat.com","New gcc warn about passing posibly unaligned pointer from packed
structure. This shouldn't be problem for x86.
Implemented solution is to let compiler do its job (compiler knows if
pointer is aligned so accessing structure field is safe) and
add macro alternative of srp_addr_copy called
srp_addr_copy_aligned_macro where required, or use temporary (compiler
aligned) variable where unaligned content is copied.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,478,2019-06-04T13:52:51Z,2019-06-14T08:04:58Z,2019-06-14T08:05:04Z,CLOSED,False,56,44,1,https://github.com/jfriesse,totemsrp: Fix warnings produced by gcc 9.1,1,[],https://github.com/corosync/corosync/pull/478,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/478#issuecomment-498681946,"New gcc warn about passing posibly unaligned pointer from packed
structure. This shouldn't be problem for x86.
Implemented solution is to let compiler do its job (compiler knows if
pointer is aligned so accessing structure field is safe) and
add macro alternative of srp_addr_copy called
srp_addr_copy_aligned_macro where required, or use temporary (compiler
aligned) variable where unaligned content is copied.
Signed-off-by: Jan Friesse jfriesse@redhat.com","I'm not entirely happy with this patch and if somebody has a better solution (without using macros) then I would be really happy.
Otherwise eventho the patch is quite long it is quite obvious what is happening but it's in super sensitive part of the code so second pair of eyes really needed.",True,{}
corosync/corosync,https://github.com/corosync/corosync,478,2019-06-04T13:52:51Z,2019-06-14T08:04:58Z,2019-06-14T08:05:04Z,CLOSED,False,56,44,1,https://github.com/jfriesse,totemsrp: Fix warnings produced by gcc 9.1,1,[],https://github.com/corosync/corosync/pull/478,https://github.com/chrissie-c,3,https://github.com/corosync/corosync/pull/478#issuecomment-498996856,"New gcc warn about passing posibly unaligned pointer from packed
structure. This shouldn't be problem for x86.
Implemented solution is to let compiler do its job (compiler knows if
pointer is aligned so accessing structure field is safe) and
add macro alternative of srp_addr_copy called
srp_addr_copy_aligned_macro where required, or use temporary (compiler
aligned) variable where unaligned content is copied.
Signed-off-by: Jan Friesse jfriesse@redhat.com",One solution to using a macro (I'm not keen on those either) would be to pass the srp_addr by value rather than reference. As it's only a nodeid now it won't put pressure on the stack - even less so if you declare it 'inline',True,{}
corosync/corosync,https://github.com/corosync/corosync,478,2019-06-04T13:52:51Z,2019-06-14T08:04:58Z,2019-06-14T08:05:04Z,CLOSED,False,56,44,1,https://github.com/jfriesse,totemsrp: Fix warnings produced by gcc 9.1,1,[],https://github.com/corosync/corosync/pull/478,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/478#issuecomment-499000734,"New gcc warn about passing posibly unaligned pointer from packed
structure. This shouldn't be problem for x86.
Implemented solution is to let compiler do its job (compiler knows if
pointer is aligned so accessing structure field is safe) and
add macro alternative of srp_addr_copy called
srp_addr_copy_aligned_macro where required, or use temporary (compiler
aligned) variable where unaligned content is copied.
Signed-off-by: Jan Friesse jfriesse@redhat.com","@chrissie-c Yep, I was thinking about it too and it would be usable just fine if unaligned srp_addr would be used as a source of srp_addr_call. Sadly it is not usable in this context because member of packed structure is destination of srp_copy_addr call so it needs to be pointer (if function is kept).",True,{}
corosync/corosync,https://github.com/corosync/corosync,478,2019-06-04T13:52:51Z,2019-06-14T08:04:58Z,2019-06-14T08:05:04Z,CLOSED,False,56,44,1,https://github.com/jfriesse,totemsrp: Fix warnings produced by gcc 9.1,1,[],https://github.com/corosync/corosync/pull/478,https://github.com/chrissie-c,5,https://github.com/corosync/corosync/pull/478#issuecomment-499008485,"New gcc warn about passing posibly unaligned pointer from packed
structure. This shouldn't be problem for x86.
Implemented solution is to let compiler do its job (compiler knows if
pointer is aligned so accessing structure field is safe) and
add macro alternative of srp_addr_copy called
srp_addr_copy_aligned_macro where required, or use temporary (compiler
aligned) variable where unaligned content is copied.
Signed-off-by: Jan Friesse jfriesse@redhat.com","D'oh! yes, of course. Sorry.",True,{}
corosync/corosync,https://github.com/corosync/corosync,478,2019-06-04T13:52:51Z,2019-06-14T08:04:58Z,2019-06-14T08:05:04Z,CLOSED,False,56,44,1,https://github.com/jfriesse,totemsrp: Fix warnings produced by gcc 9.1,1,[],https://github.com/corosync/corosync/pull/478,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/478#issuecomment-499097477,"New gcc warn about passing posibly unaligned pointer from packed
structure. This shouldn't be problem for x86.
Implemented solution is to let compiler do its job (compiler knows if
pointer is aligned so accessing structure field is safe) and
add macro alternative of srp_addr_copy called
srp_addr_copy_aligned_macro where required, or use temporary (compiler
aligned) variable where unaligned content is copied.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Pushed updated version of patch. Thank you @chrissie-c for idea of using function which returns structure (not used in srp_addr_copy but now used for new function srp_addr_endian_convert) which lead me to use simple assignment. I (personally) like this solution a LOT more than previous one.
Changed commit msg:
New gcc warn about passing posibly unaligned pointer from packed
structure. This shouldn't be problem for x86.
Implemented solution is to let compiler do its job (compiler knows if
pointer is aligned so accessing structure field is safe) and
use it together with support for asigning and returning of structure
(not a pointer to the structure).

srp_addr_copy is removed and replaced by simple assignment
srp_addr_copy_endian_convert is removed and replaced by
srp_addr_endian_convert function which takes srp_addr structure and
returns endian converted srp_addr structure
functions which accepts srp_addr array are not changed because
(luckily) non-aligned pointer is always just one item array and
such item is always used as a source pointer so it's possible to use
temporary variable",True,{}
corosync/corosync,https://github.com/corosync/corosync,478,2019-06-04T13:52:51Z,2019-06-14T08:04:58Z,2019-06-14T08:05:04Z,CLOSED,False,56,44,1,https://github.com/jfriesse,totemsrp: Fix warnings produced by gcc 9.1,1,[],https://github.com/corosync/corosync/pull/478,https://github.com/jfriesse,7,https://github.com/corosync/corosync/pull/478#issuecomment-502011824,"New gcc warn about passing posibly unaligned pointer from packed
structure. This shouldn't be problem for x86.
Implemented solution is to let compiler do its job (compiler knows if
pointer is aligned so accessing structure field is safe) and
add macro alternative of srp_addr_copy called
srp_addr_copy_aligned_macro where required, or use temporary (compiler
aligned) variable where unaligned content is copied.
Signed-off-by: Jan Friesse jfriesse@redhat.com","@chrissie-c Thank you for the review and base of idea of let the compiler do its job and use simple structure assignment.
Merged now as a b0c24ec",True,{}
corosync/corosync,https://github.com/corosync/corosync,479,2019-06-07T08:37:21Z,2019-06-07T09:13:15Z,2019-06-07T09:13:19Z,CLOSED,False,4,0,1,https://github.com/jfriesse,spec: Add support for user-flags configure option,1,[],https://github.com/corosync/corosync/pull/479,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/479,"spec: Add support for user-flags configure option
Passing -ggdb3 (or -g3) during compiler may result in corrupted debuginfo files (bug in debugedit - for Fedora filed as a https://bugzilla.redhat.com/show_bug.cgi?id=1708786). Until the bug is fixed it's possible to ether change configure to add -ggdb2/-g2 or use already existing --enable-user-flags option and rely on environment set by rpmbuild.
Patch implements second option so RPM distros without broken debugedit are not affected.","spec: Add support for user-flags configure option
Passing -ggdb3 (or -g3) during compiler may result in corrupted debuginfo files (bug in debugedit - for Fedora filed as a https://bugzilla.redhat.com/show_bug.cgi?id=1708786). Until the bug is fixed it's possible to ether change configure to add -ggdb2/-g2 or use already existing --enable-user-flags option and rely on environment set by rpmbuild.
Patch implements second option so RPM distros without broken debugedit are not affected.",True,{}
corosync/corosync,https://github.com/corosync/corosync,479,2019-06-07T08:37:21Z,2019-06-07T09:13:15Z,2019-06-07T09:13:19Z,CLOSED,False,4,0,1,https://github.com/jfriesse,spec: Add support for user-flags configure option,1,[],https://github.com/corosync/corosync/pull/479,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/479#issuecomment-499815542,"spec: Add support for user-flags configure option
Passing -ggdb3 (or -g3) during compiler may result in corrupted debuginfo files (bug in debugedit - for Fedora filed as a https://bugzilla.redhat.com/show_bug.cgi?id=1708786). Until the bug is fixed it's possible to ether change configure to add -ggdb2/-g2 or use already existing --enable-user-flags option and rely on environment set by rpmbuild.
Patch implements second option so RPM distros without broken debugedit are not affected.",@chrissie-c Thank you for the review. I've merged patch as a 5cced85,True,{}
corosync/corosync,https://github.com/corosync/corosync,481,2019-06-11T14:13:32Z,2019-06-12T13:42:02Z,2019-06-12T13:42:07Z,CLOSED,False,55,47,6,https://github.com/jfriesse,Fix issues found by coverity,13,[],https://github.com/corosync/corosync/pull/481,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/481,... to pleasure our machine overlords.,... to pleasure our machine overlords.,True,{}
corosync/corosync,https://github.com/corosync/corosync,481,2019-06-11T14:13:32Z,2019-06-12T13:42:02Z,2019-06-12T13:42:07Z,CLOSED,False,55,47,6,https://github.com/jfriesse,Fix issues found by coverity,13,[],https://github.com/corosync/corosync/pull/481,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/481#issuecomment-501278705,... to pleasure our machine overlords.,@chrissie-c Thank you for the review. Merged as a 0390200 .. 299c9c5,True,{}
corosync/corosync,https://github.com/corosync/corosync,482,2019-06-11T21:09:09Z,2019-06-14T08:59:40Z,2019-06-14T08:59:40Z,CLOSED,False,15,4,2,https://github.com/dmitry-kutergin,Adding corosync-notifyd configuration option to disable DNS look-up.,2,[],https://github.com/corosync/corosync/pull/482,https://github.com/dmitry-kutergin,1,https://github.com/corosync/corosync/pull/482,"As agreed in #476 creating a pull request to merge configuration option for corosync-notyfyd, that disables reverse DNS look-up on cmap membership list changes.","As agreed in #476 creating a pull request to merge configuration option for corosync-notyfyd, that disables reverse DNS look-up on cmap membership list changes.",True,{}
corosync/corosync,https://github.com/corosync/corosync,482,2019-06-11T21:09:09Z,2019-06-14T08:59:40Z,2019-06-14T08:59:40Z,CLOSED,False,15,4,2,https://github.com/dmitry-kutergin,Adding corosync-notifyd configuration option to disable DNS look-up.,2,[],https://github.com/corosync/corosync/pull/482,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/482#issuecomment-501023853,"As agreed in #476 creating a pull request to merge configuration option for corosync-notyfyd, that disables reverse DNS look-up on cmap membership list changes.",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,482,2019-06-11T21:09:09Z,2019-06-14T08:59:40Z,2019-06-14T08:59:40Z,CLOSED,False,15,4,2,https://github.com/dmitry-kutergin,Adding corosync-notifyd configuration option to disable DNS look-up.,2,[],https://github.com/corosync/corosync/pull/482,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/482#issuecomment-502030082,"As agreed in #476 creating a pull request to merge configuration option for corosync-notyfyd, that disables reverse DNS look-up on cmap membership list changes.","@dmitry-kutergin Nice work! I've squashed two commits into one and changed a commit message a bit to be more in line with rest of our commit messages (hopefully you don't mind) and merged as a 2183b9a (master) and 664e7f4 (needle).
Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,484,2019-06-14T17:01:46Z,2019-06-17T10:31:45Z,2019-06-17T10:31:45Z,CLOSED,False,8,4,1,https://github.com/ThomasLamprecht,Fix no link0 startup,2,[],https://github.com/corosync/corosync/pull/484,https://github.com/ThomasLamprecht,1,https://github.com/corosync/corosync/pull/484,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,484,2019-06-14T17:01:46Z,2019-06-17T10:31:45Z,2019-06-17T10:31:45Z,CLOSED,False,8,4,1,https://github.com/ThomasLamprecht,Fix no link0 startup,2,[],https://github.com/corosync/corosync/pull/484,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/484#issuecomment-502188236,,Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,484,2019-06-14T17:01:46Z,2019-06-17T10:31:45Z,2019-06-17T10:31:45Z,CLOSED,False,8,4,1,https://github.com/ThomasLamprecht,Fix no link0 startup,2,[],https://github.com/corosync/corosync/pull/484,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/484#issuecomment-502545035,,@knet-ci-bot ok to test,True,{}
corosync/corosync,https://github.com/corosync/corosync,484,2019-06-14T17:01:46Z,2019-06-17T10:31:45Z,2019-06-17T10:31:45Z,CLOSED,False,8,4,1,https://github.com/ThomasLamprecht,Fix no link0 startup,2,[],https://github.com/corosync/corosync/pull/484,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/484#issuecomment-502566360,,"Looks fine so ACK by me, but I would like also ask @chrissie-c for her opinion, because she has more experience in this part of code.",True,{}
corosync/corosync,https://github.com/corosync/corosync,484,2019-06-14T17:01:46Z,2019-06-17T10:31:45Z,2019-06-17T10:31:45Z,CLOSED,False,8,4,1,https://github.com/ThomasLamprecht,Fix no link0 startup,2,[],https://github.com/corosync/corosync/pull/484,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/484#issuecomment-502628144,,"@chrissie-c Thank you for additional ack.
@GamerSource Thank you for the patch (and braveness for making totemconfig a bit better) . I've merged patches as a 7ada508 and 816324c",True,{}
corosync/corosync,https://github.com/corosync/corosync,485,2019-06-17T13:44:50Z,2019-06-17T15:45:41Z,2019-06-17T15:45:57Z,CLOSED,False,5,0,1,https://github.com/jfriesse,totemconfig: Fix compiler warning,1,[],https://github.com/corosync/corosync/pull/485,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/485,"Compiler is unable to understand relation between members and
num_configured and warns about uninitialized members. Instead of
initializing members to 0 and (potentially after some code
refactor) let code fall to display error message, more explicit method
of assert is used.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Compiler is unable to understand relation between members and
num_configured and warns about uninitialized members. Instead of
initializing members to 0 and (potentially after some code
refactor) let code fall to display error message, more explicit method
of assert is used.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,485,2019-06-17T13:44:50Z,2019-06-17T15:45:41Z,2019-06-17T15:45:57Z,CLOSED,False,5,0,1,https://github.com/jfriesse,totemconfig: Fix compiler warning,1,[],https://github.com/corosync/corosync/pull/485,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/485#issuecomment-502739399,"Compiler is unable to understand relation between members and
num_configured and warns about uninitialized members. Instead of
initializing members to 0 and (potentially after some code
refactor) let code fall to display error message, more explicit method
of assert is used.
Signed-off-by: Jan Friesse jfriesse@redhat.com","@chrissie-c Thank you for the ACK and yep, I'm working on getting --enable-fatal-errors configure option to CI. I've merged patch as a 51fbd7b",True,{}
corosync/corosync,https://github.com/corosync/corosync,490,2019-06-28T06:13:35Z,2019-06-28T06:28:29Z,2019-06-28T06:28:33Z,CLOSED,False,9,5,1,https://github.com/jfriesse,totemknet: Disable forwarding on shutdown,1,[],https://github.com/corosync/corosync/pull/490,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/490,"Disabling forwarding will make knet flush the messages (especially
LEAVE one).
Signed-off-by: Jan Friesse jfriesse@redhat.com","Disabling forwarding will make knet flush the messages (especially
LEAVE one).
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,490,2019-06-28T06:13:35Z,2019-06-28T06:28:29Z,2019-06-28T06:28:33Z,CLOSED,False,9,5,1,https://github.com/jfriesse,totemknet: Disable forwarding on shutdown,1,[],https://github.com/corosync/corosync/pull/490,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/490#issuecomment-506618727,"Disabling forwarding will make knet flush the messages (especially
LEAVE one).
Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c Thank you for the review. Patch now merged as a d59a18d.,True,{}
corosync/corosync,https://github.com/corosync/corosync,491,2019-07-02T08:45:47Z,2019-07-03T08:54:52Z,2019-07-04T12:43:12Z,CLOSED,False,143,136,23,https://github.com/jfriesse,logging: Add CS_PRI_NODE_ID and CS_PRI_RING_ID,1,[],https://github.com/corosync/corosync/pull/491,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/491,"Previously node id was logged ether as a %d (most often), %u, %x or
PRI.32 and ring id ether as %lld, %llx with various separators (., :, /)
between rep nodeid and seq. This seems to cause confusion.
This patch adds macros CS_PRI_NODE_ID, CS_PRI_RING_ID and
CS_PRI_RING_ID_SEQ (CS prefix = corosync, PRI modeled in spirit of
inttypes.h PRIx32) and makes code use them.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Previously node id was logged ether as a %d (most often), %u, %x or
PRI.32 and ring id ether as %lld, %llx with various separators (., :, /)
between rep nodeid and seq. This seems to cause confusion.
This patch adds macros CS_PRI_NODE_ID, CS_PRI_RING_ID and
CS_PRI_RING_ID_SEQ (CS prefix = corosync, PRI modeled in spirit of
inttypes.h PRIx32) and makes code use them.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,491,2019-07-02T08:45:47Z,2019-07-03T08:54:52Z,2019-07-04T12:43:12Z,CLOSED,False,143,136,23,https://github.com/jfriesse,logging: Add CS_PRI_NODE_ID and CS_PRI_RING_ID,1,[],https://github.com/corosync/corosync/pull/491,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/491#issuecomment-508004546,"Previously node id was logged ether as a %d (most often), %u, %x or
PRI.32 and ring id ether as %lld, %llx with various separators (., :, /)
between rep nodeid and seq. This seems to cause confusion.
This patch adds macros CS_PRI_NODE_ID, CS_PRI_RING_ID and
CS_PRI_RING_ID_SEQ (CS prefix = corosync, PRI modeled in spirit of
inttypes.h PRIx32) and makes code use them.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c Thank you for the review! I've merged patch as a 5731af2.,True,{}
corosync/corosync,https://github.com/corosync/corosync,492,2019-07-04T12:44:42Z,2019-07-08T13:14:17Z,2019-07-08T13:14:20Z,CLOSED,False,60,55,1,https://github.com/jfriesse,notifyd: Fix warning produced by 32-bit compiler,1,[],https://github.com/corosync/corosync/pull/492,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/492,"time_t is platform dependent real type which is usually long int on
64-bit platform, but only int on 32-bit platform and printing it with
%ld generated warning.
Solution seems to be ether retype time_t to long int or use functions
which works with time_t. Later option is used in this patch, which uses
localtime and strftime to print time_t value.
Signed-off-by: Jan Friesse jfriesse@redhat.com","time_t is platform dependent real type which is usually long int on
64-bit platform, but only int on 32-bit platform and printing it with
%ld generated warning.
Solution seems to be ether retype time_t to long int or use functions
which works with time_t. Later option is used in this patch, which uses
localtime and strftime to print time_t value.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,492,2019-07-04T12:44:42Z,2019-07-08T13:14:17Z,2019-07-08T13:14:20Z,CLOSED,False,60,55,1,https://github.com/jfriesse,notifyd: Fix warning produced by 32-bit compiler,1,[],https://github.com/corosync/corosync/pull/492,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/492#issuecomment-509089565,"time_t is platform dependent real type which is usually long int on
64-bit platform, but only int on 32-bit platform and printing it with
%ld generated warning.
Solution seems to be ether retype time_t to long int or use functions
which works with time_t. Later option is used in this patch, which uses
localtime and strftime to print time_t value.
Signed-off-by: Jan Friesse jfriesse@redhat.com",Update: Add check for NULL result of localtime (strftime doesn't handle NULL and segfault happens).,True,{}
corosync/corosync,https://github.com/corosync/corosync,492,2019-07-04T12:44:42Z,2019-07-08T13:14:17Z,2019-07-08T13:14:20Z,CLOSED,False,60,55,1,https://github.com/jfriesse,notifyd: Fix warning produced by 32-bit compiler,1,[],https://github.com/corosync/corosync/pull/492,https://github.com/chrissie-c,3,https://github.com/corosync/corosync/pull/492#issuecomment-509125207,"time_t is platform dependent real type which is usually long int on
64-bit platform, but only int on 32-bit platform and printing it with
%ld generated warning.
Solution seems to be ether retype time_t to long int or use functions
which works with time_t. Later option is used in this patch, which uses
localtime and strftime to print time_t value.
Signed-off-by: Jan Friesse jfriesse@redhat.com",You have the same piece of code in there three times. I think that's worth a new function.,True,{}
corosync/corosync,https://github.com/corosync/corosync,492,2019-07-04T12:44:42Z,2019-07-08T13:14:17Z,2019-07-08T13:14:20Z,CLOSED,False,60,55,1,https://github.com/jfriesse,notifyd: Fix warning produced by 32-bit compiler,1,[],https://github.com/corosync/corosync/pull/492,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/492#issuecomment-509154438,"time_t is platform dependent real type which is usually long int on
64-bit platform, but only int on 32-bit platform and printing it with
%ld generated warning.
Solution seems to be ether retype time_t to long int or use functions
which works with time_t. Later option is used in this patch, which uses
localtime and strftime to print time_t value.
Signed-off-by: Jan Friesse jfriesse@redhat.com","@chrissie-c Yep, agree. Trying to make minimum changes was not the best one for this patch. Force-pushed better patch (adding _cs_snmp_trap_pdu_init which does all of the time handling and removes most of the duplicates). I was also trying to refactor snmp_init/snmp_send, but it looks like snmp_init has to be called before snmp_pdu_create to create valid snmp message, sigh :(",True,{}
corosync/corosync,https://github.com/corosync/corosync,492,2019-07-04T12:44:42Z,2019-07-08T13:14:17Z,2019-07-08T13:14:20Z,CLOSED,False,60,55,1,https://github.com/jfriesse,notifyd: Fix warning produced by 32-bit compiler,1,[],https://github.com/corosync/corosync/pull/492,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/492#issuecomment-509159779,"time_t is platform dependent real type which is usually long int on
64-bit platform, but only int on 32-bit platform and printing it with
%ld generated warning.
Solution seems to be ether retype time_t to long int or use functions
which works with time_t. Later option is used in this patch, which uses
localtime and strftime to print time_t value.
Signed-off-by: Jan Friesse jfriesse@redhat.com",Make mistake during refactoring. Previous version was always sending SNMP_OID_TRAPS_NODE. Fixed version force-pushed.,True,{}
corosync/corosync,https://github.com/corosync/corosync,492,2019-07-04T12:44:42Z,2019-07-08T13:14:17Z,2019-07-08T13:14:20Z,CLOSED,False,60,55,1,https://github.com/jfriesse,notifyd: Fix warning produced by 32-bit compiler,1,[],https://github.com/corosync/corosync/pull/492,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/492#issuecomment-509219910,"time_t is platform dependent real type which is usually long int on
64-bit platform, but only int on 32-bit platform and printing it with
%ld generated warning.
Solution seems to be ether retype time_t to long int or use functions
which works with time_t. Later option is used in this patch, which uses
localtime and strftime to print time_t value.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c Thank you for the review and ack! I've merged patch as a 257a4fd,True,{}
corosync/corosync,https://github.com/corosync/corosync,493,2019-07-04T13:19:47Z,2019-07-08T14:02:43Z,2019-07-08T14:02:47Z,CLOSED,False,11,2,1,https://github.com/jfriesse,init: Use cpgtool instead of cfgtool,1,[],https://github.com/corosync/corosync/pull/493,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/493,"Init script used to use corosync-cfgtool -s to wait till
corosync accepts ipc connection. Problem with this approach
is that error code is returned not only if ipc cannot be initialized,
but also when one of the ring is marked as failed, making corosync
service not to start. Corosync with one failed ring can work just
fine and there is no need to fail startup.
Patch is changing call of corosync-cfgtool to corosync-cpgtool. Also to
make spotting of broken ring easier, corosync-cfgtool -s is called after
successful return of the cpgtool, and warning is issued if cfgtool fails.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Init script used to use corosync-cfgtool -s to wait till
corosync accepts ipc connection. Problem with this approach
is that error code is returned not only if ipc cannot be initialized,
but also when one of the ring is marked as failed, making corosync
service not to start. Corosync with one failed ring can work just
fine and there is no need to fail startup.
Patch is changing call of corosync-cfgtool to corosync-cpgtool. Also to
make spotting of broken ring easier, corosync-cfgtool -s is called after
successful return of the cpgtool, and warning is issued if cfgtool fails.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,493,2019-07-04T13:19:47Z,2019-07-08T14:02:43Z,2019-07-08T14:02:47Z,CLOSED,False,11,2,1,https://github.com/jfriesse,init: Use cpgtool instead of cfgtool,1,[],https://github.com/corosync/corosync/pull/493,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/493#issuecomment-509238121,"Init script used to use corosync-cfgtool -s to wait till
corosync accepts ipc connection. Problem with this approach
is that error code is returned not only if ipc cannot be initialized,
but also when one of the ring is marked as failed, making corosync
service not to start. Corosync with one failed ring can work just
fine and there is no need to fail startup.
Patch is changing call of corosync-cfgtool to corosync-cpgtool. Also to
make spotting of broken ring easier, corosync-cfgtool -s is called after
successful return of the cpgtool, and warning is issued if cfgtool fails.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c Thank you for the review! I've merged patch as a 0d1a1b1 (master) and 243a4de (needle).,True,{}
corosync/corosync,https://github.com/corosync/corosync,494,2019-07-04T13:43:11Z,2019-07-08T11:04:32Z,2019-07-08T11:05:30Z,CLOSED,False,7,8,2,https://github.com/jfriesse,cfgtool: Remove unused code,1,[],https://github.com/corosync/corosync/pull/494,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/494,"corosync_cfg_ring_status_get returns string status, which is always OK
for UDP(U) and detailed status for Knet transport. Previously also
FAULTY status was returned for UDP(U) and cfgtool used to return error
code back to shell when one of the interfaces was faulty.
Because FAULTY is now not returned, it's not needed to have code for
handling it.
Also man page was misleading, so it is fixed too.
Signed-off-by: Jan Friesse jfriesse@redhat.com","corosync_cfg_ring_status_get returns string status, which is always OK
for UDP(U) and detailed status for Knet transport. Previously also
FAULTY status was returned for UDP(U) and cfgtool used to return error
code back to shell when one of the interfaces was faulty.
Because FAULTY is now not returned, it's not needed to have code for
handling it.
Also man page was misleading, so it is fixed too.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,494,2019-07-04T13:43:11Z,2019-07-08T11:04:32Z,2019-07-08T11:05:30Z,CLOSED,False,7,8,2,https://github.com/jfriesse,cfgtool: Remove unused code,1,[],https://github.com/corosync/corosync/pull/494,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/494#issuecomment-508488690,"corosync_cfg_ring_status_get returns string status, which is always OK
for UDP(U) and detailed status for Knet transport. Previously also
FAULTY status was returned for UDP(U) and cfgtool used to return error
code back to shell when one of the interfaces was faulty.
Because FAULTY is now not returned, it's not needed to have code for
handling it.
Also man page was misleading, so it is fixed too.
Signed-off-by: Jan Friesse jfriesse@redhat.com","I was also thinking if it would be possible to keep old behavior of returning error code != 0 for situation when one of the knet links is faulty. Sadly, I was unable to find out some consistent behavior which I would find as a useful. Knet links (IMHO) differs too much from previous RRP and idea of ""whole ring failed"".
Anyway, I'm open for ideas/comments in this respect.",True,{}
corosync/corosync,https://github.com/corosync/corosync,494,2019-07-04T13:43:11Z,2019-07-08T11:04:32Z,2019-07-08T11:05:30Z,CLOSED,False,7,8,2,https://github.com/jfriesse,cfgtool: Remove unused code,1,[],https://github.com/corosync/corosync/pull/494,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/494#issuecomment-509181238,"corosync_cfg_ring_status_get returns string status, which is always OK
for UDP(U) and detailed status for Knet transport. Previously also
FAULTY status was returned for UDP(U) and cfgtool used to return error
code back to shell when one of the interfaces was faulty.
Because FAULTY is now not returned, it's not needed to have code for
handling it.
Also man page was misleading, so it is fixed too.
Signed-off-by: Jan Friesse jfriesse@redhat.com","@chrissie-c Thank you for the review! Yep, totemnet_ifaces_get (or actually cfg call) needs enhancements, so I've added this to issue #436 .
Merged as a d7f5478 .",True,{}
corosync/corosync,https://github.com/corosync/corosync,495,2019-07-15T12:35:06Z,2019-07-15T14:40:20Z,2019-07-15T14:40:27Z,CLOSED,False,8,0,1,https://github.com/jfriesse,totem: Increase ring_id seq after load,1,[],https://github.com/corosync/corosync/pull/495,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/495,"Patch handles situation when leader node (node with lowest node_id)
crashed and was started again before token timeout of the rest of the
cluster. Newly started node restored ringid of old ring from stable
storage, so it had a same ringid as rest of the nodes, but zero
aru. If node was able to create singleton membership before receiving
the join list from rest of the cluster, everything worked as expected,
because ring id increased.
But when node received joinlist originated from other nodes before
its own joinlist, then it continued as it would never disjoined. This is
not correct, because new node should always create singleton
configuration. During the recovery phase, aru
was compared and because it differed (aru of leader was 0), other nodes
tried to sent all previous messages. Such behavior is not correct,
because other nodes already freed most of the messages
implementation is using assert to limit maximum number of messages sent
during recovery (that would be fixable).
Solution is to increase ring_id sequence number by 1 after load. During
create of commit token it is increased by 4, so no collision happens.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Patch handles situation when leader node (node with lowest node_id)
crashed and was started again before token timeout of the rest of the
cluster. Newly started node restored ringid of old ring from stable
storage, so it had a same ringid as rest of the nodes, but zero
aru. If node was able to create singleton membership before receiving
the join list from rest of the cluster, everything worked as expected,
because ring id increased.
But when node received joinlist originated from other nodes before
its own joinlist, then it continued as it would never disjoined. This is
not correct, because new node should always create singleton
configuration. During the recovery phase, aru
was compared and because it differed (aru of leader was 0), other nodes
tried to sent all previous messages. Such behavior is not correct,
because other nodes already freed most of the messages
implementation is using assert to limit maximum number of messages sent
during recovery (that would be fixable).
Solution is to increase ring_id sequence number by 1 after load. During
create of commit token it is increased by 4, so no collision happens.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,495,2019-07-15T12:35:06Z,2019-07-15T14:40:20Z,2019-07-15T14:40:27Z,CLOSED,False,8,0,1,https://github.com/jfriesse,totem: Increase ring_id seq after load,1,[],https://github.com/corosync/corosync/pull/495,https://github.com/chrissie-c,2,https://github.com/corosync/corosync/pull/495#issuecomment-511406203,"Patch handles situation when leader node (node with lowest node_id)
crashed and was started again before token timeout of the rest of the
cluster. Newly started node restored ringid of old ring from stable
storage, so it had a same ringid as rest of the nodes, but zero
aru. If node was able to create singleton membership before receiving
the join list from rest of the cluster, everything worked as expected,
because ring id increased.
But when node received joinlist originated from other nodes before
its own joinlist, then it continued as it would never disjoined. This is
not correct, because new node should always create singleton
configuration. During the recovery phase, aru
was compared and because it differed (aru of leader was 0), other nodes
tried to sent all previous messages. Such behavior is not correct,
because other nodes already freed most of the messages
implementation is using assert to limit maximum number of messages sent
during recovery (that would be fixable).
Solution is to increase ring_id sequence number by 1 after load. During
create of commit token it is increased by 4, so no collision happens.
Signed-off-by: Jan Friesse jfriesse@redhat.com","The comment seems fine for English. But I've rewritten the commit message and used the present tense, which seems - to me at least - to be clearer.
This patch handles the situation where the leader node (the node with lowest node_id)
crashes and is started again before token timeout of the rest of the
cluster. The newly restarted node restores the ringid of the old ring from stable
storage, so it has the same ringid as rest of the nodes, but ARU is zero.
If the node is able to create a singleton membership before receiving
the joinlist from rest of the cluster, everything works as expected,
because the ring id gets increased correctly.
But if the node receives a joinlist from another cluster node before
its own joinlist, then it continues as it would had it never left the cluster.
This is not correct, because the new node should always create a singleton
configuration first.
During the recovery phase, ARUs are compared and because they differ
(the ARU of the old leader node is 0), the other nodes
try to sent all of their previous messages. This is impossible
(even if it was correct), because other nodes have already freed most
of those messages. The implementation uses an assert to limit maximum
number of messages sent during recovery (we could fix this, but it's not really the point).
The solution here is to increase the ring_id sequence number by 1 after loading it from storage. During
creation of the commit token it is always increased by 4, so it will not collide with an existing sequence",True,{}
corosync/corosync,https://github.com/corosync/corosync,495,2019-07-15T12:35:06Z,2019-07-15T14:40:20Z,2019-07-15T14:40:27Z,CLOSED,False,8,0,1,https://github.com/jfriesse,totem: Increase ring_id seq after load,1,[],https://github.com/corosync/corosync/pull/495,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/495#issuecomment-511417907,"Patch handles situation when leader node (node with lowest node_id)
crashed and was started again before token timeout of the rest of the
cluster. Newly started node restored ringid of old ring from stable
storage, so it had a same ringid as rest of the nodes, but zero
aru. If node was able to create singleton membership before receiving
the join list from rest of the cluster, everything worked as expected,
because ring id increased.
But when node received joinlist originated from other nodes before
its own joinlist, then it continued as it would never disjoined. This is
not correct, because new node should always create singleton
configuration. During the recovery phase, aru
was compared and because it differed (aru of leader was 0), other nodes
tried to sent all previous messages. Such behavior is not correct,
because other nodes already freed most of the messages
implementation is using assert to limit maximum number of messages sent
during recovery (that would be fixable).
Solution is to increase ring_id sequence number by 1 after load. During
create of commit token it is increased by 4, so no collision happens.
Signed-off-by: Jan Friesse jfriesse@redhat.com","@chrissie-c Thank you for the clarifications of commit message. Yeps, present tense makes it easy to understand. I've force-pushed the commit with updated commit message.",True,{}
corosync/corosync,https://github.com/corosync/corosync,495,2019-07-15T12:35:06Z,2019-07-15T14:40:20Z,2019-07-15T14:40:27Z,CLOSED,False,8,0,1,https://github.com/jfriesse,totem: Increase ring_id seq after load,1,[],https://github.com/corosync/corosync/pull/495,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/495#issuecomment-511430774,"Patch handles situation when leader node (node with lowest node_id)
crashed and was started again before token timeout of the rest of the
cluster. Newly started node restored ringid of old ring from stable
storage, so it had a same ringid as rest of the nodes, but zero
aru. If node was able to create singleton membership before receiving
the join list from rest of the cluster, everything worked as expected,
because ring id increased.
But when node received joinlist originated from other nodes before
its own joinlist, then it continued as it would never disjoined. This is
not correct, because new node should always create singleton
configuration. During the recovery phase, aru
was compared and because it differed (aru of leader was 0), other nodes
tried to sent all previous messages. Such behavior is not correct,
because other nodes already freed most of the messages
implementation is using assert to limit maximum number of messages sent
during recovery (that would be fixable).
Solution is to increase ring_id sequence number by 1 after load. During
create of commit token it is increased by 4, so no collision happens.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c Thank you for the review. I've merged patch as a 3675dac.,True,{}
corosync/corosync,https://github.com/corosync/corosync,500,2019-08-26T13:45:25Z,2019-08-27T05:50:02Z,2019-08-27T05:50:02Z,CLOSED,False,1,1,1,https://github.com/jfriesse,man: Fix link_mode priority description,1,[],https://github.com/corosync/corosync/pull/500,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/500,"... to match knet source code.
Signed-off-by: Jan Friesse jfriesse@redhat.com","... to match knet source code.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,500,2019-08-26T13:45:25Z,2019-08-27T05:50:02Z,2019-08-27T05:50:02Z,CLOSED,False,1,1,1,https://github.com/jfriesse,man: Fix link_mode priority description,1,[],https://github.com/corosync/corosync/pull/500,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/500#issuecomment-525148734,"... to match knet source code.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@fabbione Thank you for the review! I've merged patch as a 0a323ff,True,{}
corosync/corosync,https://github.com/corosync/corosync,502,2019-09-09T15:53:48Z,2019-09-10T09:30:51Z,2019-09-10T09:30:54Z,CLOSED,False,27,3,1,https://github.com/jfriesse,totemknet: Add locking for log call,1,[],https://github.com/corosync/corosync/pull/502,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/502,"Knet callbacks may be called from different thread than main thread. If
this happens, log messages may be lost. Most prominent example is when
link goes up (logged by main thread) and host_change_callback_fn is
called.
Implemented solution is adding mutex for every log call in totemknet.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Knet callbacks may be called from different thread than main thread. If
this happens, log messages may be lost. Most prominent example is when
link goes up (logged by main thread) and host_change_callback_fn is
called.
Implemented solution is adding mutex for every log call in totemknet.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,502,2019-09-09T15:53:48Z,2019-09-10T09:30:51Z,2019-09-10T09:30:54Z,CLOSED,False,27,3,1,https://github.com/jfriesse,totemknet: Add locking for log call,1,[],https://github.com/corosync/corosync/pull/502,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/502#issuecomment-529854233,"Knet callbacks may be called from different thread than main thread. If
this happens, log messages may be lost. Most prominent example is when
link goes up (logged by main thread) and host_change_callback_fn is
called.
Implemented solution is adding mutex for every log call in totemknet.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@fabbione Thank you for the review. I've merged patch as a 1cf1558.,True,{}
corosync/corosync,https://github.com/corosync/corosync,503,2019-10-03T09:42:21Z,2019-10-09T14:28:38Z,2019-10-09T14:28:38Z,CLOSED,False,16,0,3,https://github.com/jfriesse,Totempg check len,2,[],https://github.com/corosync/corosync/pull/503,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/503,First patch should be included to have sanity check of totempg messages. Second is to make noticing of #261 easier (and hopefully get a little better core dump) and shouldn't be merged.,First patch should be included to have sanity check of totempg messages. Second is to make noticing of #261 easier (and hopefully get a little better core dump) and shouldn't be merged.,True,{}
corosync/corosync,https://github.com/corosync/corosync,503,2019-10-03T09:42:21Z,2019-10-09T14:28:38Z,2019-10-09T14:28:38Z,CLOSED,False,16,0,3,https://github.com/jfriesse,Totempg check len,2,[],https://github.com/corosync/corosync/pull/503,https://github.com/ThomasLamprecht,2,https://github.com/corosync/corosync/pull/503#issuecomment-537965181,First patch should be included to have sanity check of totempg messages. Second is to make noticing of #261 easier (and hopefully get a little better core dump) and shouldn't be merged.,"FWIW, for the first patch (totempg: Check sanity (length) of received message):
Reviewed-by: Thomas Lamprecht t.lamprecht@proxmox.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,503,2019-10-03T09:42:21Z,2019-10-09T14:28:38Z,2019-10-09T14:28:38Z,CLOSED,False,16,0,3,https://github.com/jfriesse,Totempg check len,2,[],https://github.com/corosync/corosync/pull/503,https://github.com/fabbione,3,https://github.com/corosync/corosync/pull/503#issuecomment-539919364,First patch should be included to have sanity check of totempg messages. Second is to make noticing of #261 easier (and hopefully get a little better core dump) and shouldn't be merged.,"as discussed on IRC, ack on the first 2 patches.",True,{}
corosync/corosync,https://github.com/corosync/corosync,503,2019-10-03T09:42:21Z,2019-10-09T14:28:38Z,2019-10-09T14:28:38Z,CLOSED,False,16,0,3,https://github.com/jfriesse,Totempg check len,2,[],https://github.com/corosync/corosync/pull/503,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/503#issuecomment-539928233,First patch should be included to have sanity check of totempg messages. Second is to make noticing of #261 easier (and hopefully get a little better core dump) and shouldn't be merged.,"@fabbione Thank you for the review!
I've merged first two patches and rebased branch to master so there are two patches for testing but not intended for merging.",True,{}
corosync/corosync,https://github.com/corosync/corosync,503,2019-10-03T09:42:21Z,2019-10-09T14:28:38Z,2019-10-09T14:28:38Z,CLOSED,False,16,0,3,https://github.com/jfriesse,Totempg check len,2,[],https://github.com/corosync/corosync/pull/503,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/503#issuecomment-539928506,First patch should be included to have sanity check of totempg messages. Second is to make noticing of #261 easier (and hopefully get a little better core dump) and shouldn't be merged.,@ThomasLamprecht Oh forgot. Thank you for review too! (you have credit in commit msg ;) ),True,{}
corosync/corosync,https://github.com/corosync/corosync,503,2019-10-03T09:42:21Z,2019-10-09T14:28:38Z,2019-10-09T14:28:38Z,CLOSED,False,16,0,3,https://github.com/jfriesse,Totempg check len,2,[],https://github.com/corosync/corosync/pull/503,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/503#issuecomment-540026795,First patch should be included to have sanity check of totempg messages. Second is to make noticing of #261 easier (and hopefully get a little better core dump) and shouldn't be merged.,Closing this PR in favor of https://github.com/corosync/corosync/tree/topic-memory-corrupt branch.,True,{}
corosync/corosync,https://github.com/corosync/corosync,504,2019-10-04T11:37:05Z,,2021-12-27T05:19:09Z,OPEN,False,57,0,1,https://github.com/ThomasLamprecht,corosync-quorumtool: print totem cluster information,1,[],https://github.com/corosync/corosync/pull/504,https://github.com/ThomasLamprecht,1,https://github.com/corosync/corosync/pull/504,"print some common cluster information from the cmap totem section.
For now print cluster name, config version, transport method and
secauth. This is information which is often relevant when wanting to
checkout a summary of the cluster state.
The fallback to default is hardcoded, which is something to be
improved, else the implementation is quite simple. An alternative
could be to re-use parts of the print_key method from
corosync-cmapctl, which would save us some hassle here and would make
this more general.
Signed-off-by: Thomas Lamprecht t.lamprecht@proxmox.com
Rather hacked together quickly, so please see this more like an RFC.","print some common cluster information from the cmap totem section.
For now print cluster name, config version, transport method and
secauth. This is information which is often relevant when wanting to
checkout a summary of the cluster state.
The fallback to default is hardcoded, which is something to be
improved, else the implementation is quite simple. An alternative
could be to re-use parts of the print_key method from
corosync-cmapctl, which would save us some hassle here and would make
this more general.
Signed-off-by: Thomas Lamprecht t.lamprecht@proxmox.com
Rather hacked together quickly, so please see this more like an RFC.",True,{}
corosync/corosync,https://github.com/corosync/corosync,504,2019-10-04T11:37:05Z,,2021-12-27T05:19:09Z,OPEN,False,57,0,1,https://github.com/ThomasLamprecht,corosync-quorumtool: print totem cluster information,1,[],https://github.com/corosync/corosync/pull/504,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/504#issuecomment-538361568,"print some common cluster information from the cmap totem section.
For now print cluster name, config version, transport method and
secauth. This is information which is often relevant when wanting to
checkout a summary of the cluster state.
The fallback to default is hardcoded, which is something to be
improved, else the implementation is quite simple. An alternative
could be to re-use parts of the print_key method from
corosync-cmapctl, which would save us some hassle here and would make
this more general.
Signed-off-by: Thomas Lamprecht t.lamprecht@proxmox.com
Rather hacked together quickly, so please see this more like an RFC.",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,504,2019-10-04T11:37:05Z,,2021-12-27T05:19:09Z,OPEN,False,57,0,1,https://github.com/ThomasLamprecht,corosync-quorumtool: print totem cluster information,1,[],https://github.com/corosync/corosync/pull/504,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/504#issuecomment-538863233,"print some common cluster information from the cmap totem section.
For now print cluster name, config version, transport method and
secauth. This is information which is often relevant when wanting to
checkout a summary of the cluster state.
The fallback to default is hardcoded, which is something to be
improved, else the implementation is quite simple. An alternative
could be to re-use parts of the print_key method from
corosync-cmapctl, which would save us some hassle here and would make
this more general.
Signed-off-by: Thomas Lamprecht t.lamprecht@proxmox.com
Rather hacked together quickly, so please see this more like an RFC.","@ThomasLamprecht I like the patch (- some small nitpicks, like config_version is not strictly required so it shouldn't be reason for failure) and general idea, but I'm not so convinced it should be in the corosync-quorumtool. I mean, why corosync-quorumtool? Also the information is available via corosync-cmapctl, so does it really make sense to have duplicity? Another problem is, that it is really hard (at least for me) to tell, which information should be displayed? What is the most useful for user without being to overwhelming?
Actually, I was thinking about some tool like crm_report for quite a some time. Maybe such tool may display ""important"" information in default mode and do more elaborated dump in some kind of ""bug report mode"".",True,{}
corosync/corosync,https://github.com/corosync/corosync,504,2019-10-04T11:37:05Z,,2021-12-27T05:19:09Z,OPEN,False,57,0,1,https://github.com/ThomasLamprecht,corosync-quorumtool: print totem cluster information,1,[],https://github.com/corosync/corosync/pull/504,https://github.com/ThomasLamprecht,4,https://github.com/corosync/corosync/pull/504#issuecomment-538917349,"print some common cluster information from the cmap totem section.
For now print cluster name, config version, transport method and
secauth. This is information which is often relevant when wanting to
checkout a summary of the cluster state.
The fallback to default is hardcoded, which is something to be
improved, else the implementation is quite simple. An alternative
could be to re-use parts of the print_key method from
corosync-cmapctl, which would save us some hassle here and would make
this more general.
Signed-off-by: Thomas Lamprecht t.lamprecht@proxmox.com
Rather hacked together quickly, so please see this more like an RFC.","Thanks for taking a look.
Now, why corosync-quorumtool: So first, we have a small cluster status CLI command in Proxmox VE which does a few basic checks for hints to the user and then just execs ""corosync-quorumtool"".
This is done as ""corosync-quorumtool"" really looks like a neat cluster status overview, you see all nodes, qdevice, vote information, .. in short, relevant information about a cluster and it's health state, from a user perspective it could also be named ""corosync-status"", or the like, IMO no user would question that name.
I wanted to add this info to our tool, already applied a patch0 but then thought, hey often our user mix invocating ""pvecm status"" (our ""tool"") and ""corosync-quorumtool"" in our Forum, and this info is nice to have in general, so maybe just add it upstream. This naturally would has the side benefit that I do not have to do config/cmap parsing (not hard but if it can be avoided) and still get the most current info from the corosync POV.
So that was my rationale to add it there, even if it wasn't 100% ideal from the tool name and it's intended purpose.
The rationale for the information I added is:

cluster name: nice to re-confirm an admin is operating at the correct cluster or to ensure that this is really unique (was more important in mcast times)
config_version: makes it easy to see if a node has an old config (out of sync?)
transport: just nice to have, especially if one tries out another one and want's to confirm the change is active.
secauth: IMO it's important to know if my cluster communication is really encrypted if I'm on an untrusted, or just not private, network.

But yes, displaying more is hard to decide. So IMO it's good to start rather small and add was user think is useful. Almost all of above was requested by some users over different channels the last years, so that information seems of real use.
A crm_report could be nice too, IMO.",True,{}
corosync/corosync,https://github.com/corosync/corosync,504,2019-10-04T11:37:05Z,,2021-12-27T05:19:09Z,OPEN,False,57,0,1,https://github.com/ThomasLamprecht,corosync-quorumtool: print totem cluster information,1,[],https://github.com/corosync/corosync/pull/504,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/504#issuecomment-539040938,"print some common cluster information from the cmap totem section.
For now print cluster name, config version, transport method and
secauth. This is information which is often relevant when wanting to
checkout a summary of the cluster state.
The fallback to default is hardcoded, which is something to be
improved, else the implementation is quite simple. An alternative
could be to re-use parts of the print_key method from
corosync-cmapctl, which would save us some hassle here and would make
this more general.
Signed-off-by: Thomas Lamprecht t.lamprecht@proxmox.com
Rather hacked together quickly, so please see this more like an RFC.","Thanks for taking a look.
Now, why corosync-quorumtool: So first, we have a small cluster status CLI command in Proxmox VE which does a few basic checks for hints to the user and then just execs ""corosync-quorumtool"".
This is done as ""corosync-quorumtool"" really looks like a neat cluster status overview, you see all

Indeed

nodes, qdevice, vote information, .. in short, relevant information about a cluster and it's health state, from a user perspective it could also be named ""corosync-status"", or the like, IMO no user would question that name.

And that is the thing. What about having something like corosync-status (maybe just shell script) which would call quorumtool, cmapctl, ... and gather required information? Together with parameter like --report it may behave more like crm_report?

I wanted to add this info to our tool, already applied a patch0 but then thought, hey often our user mix invocating ""pvecm status"" (our ""tool"") and ""corosync-quorumtool"" in our Forum, and this info is nice to have in general, so maybe just add it upstream. This naturally would has the side benefit that I do not have to do config/cmap parsing (not hard but if it can be avoided) and still get the most current info from the corosync POV.

Yep. Just to make sure we are on same page. I like the idea. I'm just not too keen to add information about cluster to quorumtool which is designed to display quorum/votequorum information.

So that was my rationale to add it there, even if it wasn't 100% ideal from the tool name and it's intended purpose.
The rationale for the information I added is:
* cluster name: nice to re-confirm an admin is operating at the correct cluster or to ensure that this is really unique (was more important in mcast times)


Agree. It's also identifier and I believe it is used by admins to distinguish between multiple clusters.

* config_version: makes it easy to see if a node has an old config (out of sync?)


Yep. It just don't need to be there so it shouldn't be fatal error if it is not found.

* transport: just nice to have, especially if one tries out another one and want's to confirm the change is active.


Yep

* secauth: IMO it's important to know if my cluster communication is really encrypted if I'm on an untrusted, or just not private, network.


I would rather see crypto_hash/cypher, because secauth is really compatibility ""hack"", but I agree in general.

But yes, displaying more is hard to decide. So IMO it's good to start rather small and add was user think is useful. Almost all of above was requested by some users over different channels the last years, so that information seems of real use.

Good to know.

A crm_report could be nice too, IMO.",True,{}
corosync/corosync,https://github.com/corosync/corosync,504,2019-10-04T11:37:05Z,,2021-12-27T05:19:09Z,OPEN,False,57,0,1,https://github.com/ThomasLamprecht,corosync-quorumtool: print totem cluster information,1,[],https://github.com/corosync/corosync/pull/504,https://github.com/ThomasLamprecht,6,https://github.com/corosync/corosync/pull/504#issuecomment-539054740,"print some common cluster information from the cmap totem section.
For now print cluster name, config version, transport method and
secauth. This is information which is often relevant when wanting to
checkout a summary of the cluster state.
The fallback to default is hardcoded, which is something to be
improved, else the implementation is quite simple. An alternative
could be to re-use parts of the print_key method from
corosync-cmapctl, which would save us some hassle here and would make
this more general.
Signed-off-by: Thomas Lamprecht t.lamprecht@proxmox.com
Rather hacked together quickly, so please see this more like an RFC.","nodes, qdevice, vote information, .. in short, relevant information about a cluster and it's health state, from a user perspective it could also be named ""corosync-status"", or the like, IMO no user would question that name.

And that is the thing. What about having something like corosync-status (maybe just shell script) which would call quorumtool, cmapctl, ... and gather required information? Together with parameter like --report it may behave more like crm_report?

Yes, sounds good to me. I think that would be helpful for all corosync users. Shell script could be fine, but as any other ""higher"" language - which would allow nice parsing/string handling - would add a total new language dependency on corosync, I guess that either C or shell (not bash :( ) is fine for such a thing.

Yep. Just to make sure we are on same page. I like the idea. I'm just not too keen to add information about cluster to quorumtool which is designed to display quorum/votequorum information.

Yeah, I mean, I agree - just added it to the place where it seemed the least misplaced ^^

Yep. It just don't need to be there so it shouldn't be fatal error if it is not found.

OK, we always enforce it with our tooling, but it's naturally fine to not have it.

I would rather see crypto_hash/cypher, because secauth is really compatibility ""hack"", but I agree in general.

Makes sense, has more info without drawbacks.",True,{}
corosync/corosync,https://github.com/corosync/corosync,504,2019-10-04T11:37:05Z,,2021-12-27T05:19:09Z,OPEN,False,57,0,1,https://github.com/ThomasLamprecht,corosync-quorumtool: print totem cluster information,1,[],https://github.com/corosync/corosync/pull/504,https://github.com/chrissie-c,7,https://github.com/corosync/corosync/pull/504#issuecomment-550306047,"print some common cluster information from the cmap totem section.
For now print cluster name, config version, transport method and
secauth. This is information which is often relevant when wanting to
checkout a summary of the cluster state.
The fallback to default is hardcoded, which is something to be
improved, else the implementation is quite simple. An alternative
could be to re-use parts of the print_key method from
corosync-cmapctl, which would save us some hassle here and would make
this more general.
Signed-off-by: Thomas Lamprecht t.lamprecht@proxmox.com
Rather hacked together quickly, so please see this more like an RFC.","I agree with honza that this sort of info, while useful, doesn't belong in a quorumtool. There are a couple of options I can see here.
My suggestion would be  to write another tool, (corosync-status?), that displays all sorts of other information but also has options for displaying quorum information. corosync-status could be a shell script that calls cmapctl to get general information and quorumtool to get quorum information. That way you only need to learn one tool for all uses",True,{}
corosync/corosync,https://github.com/corosync/corosync,504,2019-10-04T11:37:05Z,,2021-12-27T05:19:09Z,OPEN,False,57,0,1,https://github.com/ThomasLamprecht,corosync-quorumtool: print totem cluster information,1,[],https://github.com/corosync/corosync/pull/504,https://github.com/ThomasLamprecht,8,https://github.com/corosync/corosync/pull/504#issuecomment-551037339,"print some common cluster information from the cmap totem section.
For now print cluster name, config version, transport method and
secauth. This is information which is often relevant when wanting to
checkout a summary of the cluster state.
The fallback to default is hardcoded, which is something to be
improved, else the implementation is quite simple. An alternative
could be to re-use parts of the print_key method from
corosync-cmapctl, which would save us some hassle here and would make
this more general.
Signed-off-by: Thomas Lamprecht t.lamprecht@proxmox.com
Rather hacked together quickly, so please see this more like an RFC.","My suggestion would be to write another tool, (corosync-status?), that displays all sorts of other information but also has options for displaying quorum information. corosync-status could be a shell script that calls cmapctl to get general information and quorumtool to get quorum information. That way you only need to learn one tool for all uses

So we're on the exact same page as the discussion result above from honza and me, great.
I'm not sure if I got time to make this happen in the next weeks, just FYI.",True,{}
corosync/corosync,https://github.com/corosync/corosync,504,2019-10-04T11:37:05Z,,2021-12-27T05:19:09Z,OPEN,False,57,0,1,https://github.com/ThomasLamprecht,corosync-quorumtool: print totem cluster information,1,[],https://github.com/corosync/corosync/pull/504,https://github.com/jfriesse,9,https://github.com/corosync/corosync/pull/504#issuecomment-551042986,"print some common cluster information from the cmap totem section.
For now print cluster name, config version, transport method and
secauth. This is information which is often relevant when wanting to
checkout a summary of the cluster state.
The fallback to default is hardcoded, which is something to be
improved, else the implementation is quite simple. An alternative
could be to re-use parts of the print_key method from
corosync-cmapctl, which would save us some hassle here and would make
this more general.
Signed-off-by: Thomas Lamprecht t.lamprecht@proxmox.com
Rather hacked together quickly, so please see this more like an RFC.",@ThomasLamprecht No worries and no need to rush. Also I was thinking what should be included in the output and (IMHO) it may make sense to print also used token timeout and maybe some of the knet stats?,True,{}
corosync/corosync,https://github.com/corosync/corosync,504,2019-10-04T11:37:05Z,,2021-12-27T05:19:09Z,OPEN,False,57,0,1,https://github.com/ThomasLamprecht,corosync-quorumtool: print totem cluster information,1,[],https://github.com/corosync/corosync/pull/504,https://github.com/ThomasLamprecht,10,https://github.com/corosync/corosync/pull/504#issuecomment-551478978,"print some common cluster information from the cmap totem section.
For now print cluster name, config version, transport method and
secauth. This is information which is often relevant when wanting to
checkout a summary of the cluster state.
The fallback to default is hardcoded, which is something to be
improved, else the implementation is quite simple. An alternative
could be to re-use parts of the print_key method from
corosync-cmapctl, which would save us some hassle here and would make
this more general.
Signed-off-by: Thomas Lamprecht t.lamprecht@proxmox.com
Rather hacked together quickly, so please see this more like an RFC.","@ThomasLamprecht No worries and no need to rush. Also I was thinking what should be included in the output and (IMHO) it may make sense to print also used token timeout and maybe some of the knet stats?

Yes, makes IMO also sense, as those parameters can dramatically influence behaviour and stability.
And, from our experience,  user will read some docs or speculation from others and change does, often making things worse, so having some ""core config values currently in-effect"" stats could be nice.
Which one exactly is then another question, maybe @fabbione has some good idea what is the most relevant of knet in it's corosync use case.",True,{}
corosync/corosync,https://github.com/corosync/corosync,505,2019-10-09T08:47:28Z,2019-10-09T09:41:02Z,2019-10-09T09:41:24Z,CLOSED,False,37,2,1,https://github.com/fabbione,[build] add --with-sanitizers= option for sanitizer builds,1,[],https://github.com/corosync/corosync/pull/505,https://github.com/fabbione,1,https://github.com/corosync/corosync/pull/505,"this option is stricly meant for runtime debugging purposes.
do NOT use in production.
check gcc/clang man pages on how to use ASAN/UBSAN/TSAN.
Also allow users to specificy SANITIZERS_CFLAGS and SANITIZERS_LDFLAGS
for advanced use.
Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com","this option is stricly meant for runtime debugging purposes.
do NOT use in production.
check gcc/clang man pages on how to use ASAN/UBSAN/TSAN.
Also allow users to specificy SANITIZERS_CFLAGS and SANITIZERS_LDFLAGS
for advanced use.
Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,505,2019-10-09T08:47:28Z,2019-10-09T09:41:02Z,2019-10-09T09:41:24Z,CLOSED,False,37,2,1,https://github.com/fabbione,[build] add --with-sanitizers= option for sanitizer builds,1,[],https://github.com/corosync/corosync/pull/505,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/505#issuecomment-539924251,"this option is stricly meant for runtime debugging purposes.
do NOT use in production.
check gcc/clang man pages on how to use ASAN/UBSAN/TSAN.
Also allow users to specificy SANITIZERS_CFLAGS and SANITIZERS_LDFLAGS
for advanced use.
Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com",@fabbione Thank you for the patch. ACK and merged as a 6717204,True,{}
corosync/corosync,https://github.com/corosync/corosync,507,2019-10-16T17:00:04Z,2019-10-17T06:27:55Z,2019-10-17T06:27:55Z,CLOSED,False,2,2,2,https://github.com/ThomasLamprecht,fix corosync.conf manpage knet pong count default value,1,[],https://github.com/corosync/corosync/pull/507,https://github.com/ThomasLamprecht,1,https://github.com/corosync/corosync/pull/507,"commit 029b8eb changed the default
of the KNET_PONG_COUNT from the kronosnet default of 5 to 2, as
corosync bring up was deemed to slow.
The documentation, and the comment stating that the totem config
default values match the knet ones were not updated, and thus now out
of date.
Fixhis by noting the correct default of 2 for KNET_PONG_COUNT and
note that all but that one are in sync with the korosync defaults in
the comment.
Signed-off-by: Thomas Lamprecht t.lamprecht@proxmox.com","commit 029b8eb changed the default
of the KNET_PONG_COUNT from the kronosnet default of 5 to 2, as
corosync bring up was deemed to slow.
The documentation, and the comment stating that the totem config
default values match the knet ones were not updated, and thus now out
of date.
Fixhis by noting the correct default of 2 for KNET_PONG_COUNT and
note that all but that one are in sync with the korosync defaults in
the comment.
Signed-off-by: Thomas Lamprecht t.lamprecht@proxmox.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,507,2019-10-16T17:00:04Z,2019-10-17T06:27:55Z,2019-10-17T06:27:55Z,CLOSED,False,2,2,2,https://github.com/ThomasLamprecht,fix corosync.conf manpage knet pong count default value,1,[],https://github.com/corosync/corosync/pull/507,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/507#issuecomment-542796924,"commit 029b8eb changed the default
of the KNET_PONG_COUNT from the kronosnet default of 5 to 2, as
corosync bring up was deemed to slow.
The documentation, and the comment stating that the totem config
default values match the knet ones were not updated, and thus now out
of date.
Fixhis by noting the correct default of 2 for KNET_PONG_COUNT and
note that all but that one are in sync with the korosync defaults in
the comment.
Signed-off-by: Thomas Lamprecht t.lamprecht@proxmox.com",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,507,2019-10-16T17:00:04Z,2019-10-17T06:27:55Z,2019-10-17T06:27:55Z,CLOSED,False,2,2,2,https://github.com/ThomasLamprecht,fix corosync.conf manpage knet pong count default value,1,[],https://github.com/corosync/corosync/pull/507,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/507#issuecomment-543025172,"commit 029b8eb changed the default
of the KNET_PONG_COUNT from the kronosnet default of 5 to 2, as
corosync bring up was deemed to slow.
The documentation, and the comment stating that the totem config
default values match the knet ones were not updated, and thus now out
of date.
Fixhis by noting the correct default of 2 for KNET_PONG_COUNT and
note that all but that one are in sync with the korosync defaults in
the comment.
Signed-off-by: Thomas Lamprecht t.lamprecht@proxmox.com",@ThomasLamprecht Nice catch and patch so ACK and merged as a 721c5d4. Thank you for the patch!,True,{}
corosync/corosync,https://github.com/corosync/corosync,510,2019-11-07T13:47:49Z,2019-11-08T10:21:08Z,2019-11-08T10:21:13Z,CLOSED,False,18,2,6,https://github.com/jfriesse,Initialize stack allocated memory,1,[],https://github.com/corosync/corosync/pull/510,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/510,"Some functions allocated memory on stack without clearing memory and
then send them on wire. This is not an issue, but valgrind reports this
as a problem so it is easy to miss real problem then.
Solution is to clear stack memory.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Some functions allocated memory on stack without clearing memory and
then send them on wire. This is not an issue, but valgrind reports this
as a problem so it is easy to miss real problem then.
Solution is to clear stack memory.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,510,2019-11-07T13:47:49Z,2019-11-08T10:21:08Z,2019-11-08T10:21:13Z,CLOSED,False,18,2,6,https://github.com/jfriesse,Initialize stack allocated memory,1,[],https://github.com/corosync/corosync/pull/510,https://github.com/chrissie-c,2,https://github.com/corosync/corosync/pull/510#issuecomment-551481478,"Some functions allocated memory on stack without clearing memory and
then send them on wire. This is not an issue, but valgrind reports this
as a problem so it is easy to miss real problem then.
Solution is to clear stack memory.
Signed-off-by: Jan Friesse jfriesse@redhat.com",Looks good to me. ACK,True,{}
corosync/corosync,https://github.com/corosync/corosync,510,2019-11-07T13:47:49Z,2019-11-08T10:21:08Z,2019-11-08T10:21:13Z,CLOSED,False,18,2,6,https://github.com/jfriesse,Initialize stack allocated memory,1,[],https://github.com/corosync/corosync/pull/510,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/510#issuecomment-551525497,"Some functions allocated memory on stack without clearing memory and
then send them on wire. This is not an issue, but valgrind reports this
as a problem so it is easy to miss real problem then.
Solution is to clear stack memory.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c Thank you for the review. I've merged patch as a 6ba9870 .,True,{}
corosync/corosync,https://github.com/corosync/corosync,511,2019-11-18T08:55:33Z,2019-11-18T08:58:02Z,2019-11-18T09:00:49Z,CLOSED,False,1,1,1,https://github.com/fabbione,[pkgconfig] make sure libqb dependency is visible across all libraries,1,[],https://github.com/corosync/corosync/pull/511,https://github.com/fabbione,1,https://github.com/corosync/corosync/pull/511,Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com,Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com,True,{}
corosync/corosync,https://github.com/corosync/corosync,511,2019-11-18T08:55:33Z,2019-11-18T08:58:02Z,2019-11-18T09:00:49Z,CLOSED,False,1,1,1,https://github.com/fabbione,[pkgconfig] make sure libqb dependency is visible across all libraries,1,[],https://github.com/corosync/corosync/pull/511,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/511#issuecomment-554918099,Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com,Thank you for the patch. Merged as a 1eb12d3,True,{}
corosync/corosync,https://github.com/corosync/corosync,512,2019-11-18T09:38:52Z,2019-11-18T09:44:00Z,2019-11-18T09:44:10Z,CLOSED,False,1,0,1,https://github.com/fabbione,TEST DO NOT MERGE,1,[],https://github.com/corosync/corosync/pull/512,https://github.com/fabbione,1,https://github.com/corosync/corosync/pull/512,Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com,Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com,True,{}
corosync/corosync,https://github.com/corosync/corosync,513,2019-11-18T15:24:24Z,2019-11-18T15:30:42Z,2019-11-18T15:30:43Z,CLOSED,False,42,35,2,https://github.com/chrissie-c,icmap: fix the icmap_get_*_r functions,1,[],https://github.com/corosync/corosync/pull/513,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/513,"Make the icmap*_r functions read from the specified map rather
than the global map.
Also include icmap_get_string_r() which seems to have been missed out.","Make the icmap*_r functions read from the specified map rather
than the global map.
Also include icmap_get_string_r() which seems to have been missed out.",True,{}
corosync/corosync,https://github.com/corosync/corosync,513,2019-11-18T15:24:24Z,2019-11-18T15:30:42Z,2019-11-18T15:30:43Z,CLOSED,False,42,35,2,https://github.com/chrissie-c,icmap: fix the icmap_get_*_r functions,1,[],https://github.com/corosync/corosync/pull/513,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/513#issuecomment-555066976,"Make the icmap*_r functions read from the specified map rather
than the global map.
Also include icmap_get_string_r() which seems to have been missed out.","@chrissie-c Good catch, nice patch so ACK and merged as a 1ba03a3.
Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,514,2019-11-26T15:04:03Z,2019-11-28T08:45:41Z,2019-11-28T08:45:47Z,CLOSED,False,94,33,12,https://github.com/jfriesse,Coverity fixes,18,[],https://github.com/corosync/corosync/pull/514,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/514,"SSIA to please our machine overlords. Only really important patch is ""totemknet: Don't mix corosync and knet error codes"" which fixes problem with mixed errno/cs_error_t errors.","SSIA to please our machine overlords. Only really important patch is ""totemknet: Don't mix corosync and knet error codes"" which fixes problem with mixed errno/cs_error_t errors.",True,{}
corosync/corosync,https://github.com/corosync/corosync,514,2019-11-26T15:04:03Z,2019-11-28T08:45:41Z,2019-11-28T08:45:47Z,CLOSED,False,94,33,12,https://github.com/jfriesse,Coverity fixes,18,[],https://github.com/corosync/corosync/pull/514,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/514#issuecomment-558693470,"SSIA to please our machine overlords. Only really important patch is ""totemknet: Don't mix corosync and knet error codes"" which fixes problem with mixed errno/cs_error_t errors.","@chrissie-c : Added one more patch found by clang. I'm not sure what was original intention, but I'm pretty sure that was some intention, because stats_map_get error code is checked but body is empty. Any clues?",True,{}
corosync/corosync,https://github.com/corosync/corosync,514,2019-11-26T15:04:03Z,2019-11-28T08:45:41Z,2019-11-28T08:45:47Z,CLOSED,False,94,33,12,https://github.com/jfriesse,Coverity fixes,18,[],https://github.com/corosync/corosync/pull/514,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/514#issuecomment-559397008,"SSIA to please our machine overlords. Only really important patch is ""totemknet: Don't mix corosync and knet error codes"" which fixes problem with mixed errno/cs_error_t errors.",@chrissie-c Thank you for the review and comments. I've fixed the nitpick and merged patchset as a 89b0d62,True,{}
corosync/corosync,https://github.com/corosync/corosync,515,2019-12-13T01:52:16Z,2019-12-30T16:12:25Z,2019-12-30T16:13:03Z,CLOSED,False,2,2,1,https://github.com/parr0tr1ver,configure.ac: fix pkgconfig issue of rdma,1,[],https://github.com/corosync/corosync/pull/515,https://github.com/parr0tr1ver,1,https://github.com/corosync/corosync/pull/515,"pkgconfig files from rdma-core(https://github.com/linux-rdma/rdma-core)
are named start with lib, such as librdmacm.pc and libibverbs.pc. When
rdma support is enabled, it fails to find rdma related libraries. Update
configure.ac to the issue.
Signed-off-by: Kai Kang kai.kang@windriver.com","pkgconfig files from rdma-core(https://github.com/linux-rdma/rdma-core)
are named start with lib, such as librdmacm.pc and libibverbs.pc. When
rdma support is enabled, it fails to find rdma related libraries. Update
configure.ac to the issue.
Signed-off-by: Kai Kang kai.kang@windriver.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,515,2019-12-13T01:52:16Z,2019-12-30T16:12:25Z,2019-12-30T16:13:03Z,CLOSED,False,2,2,1,https://github.com/parr0tr1ver,configure.ac: fix pkgconfig issue of rdma,1,[],https://github.com/corosync/corosync/pull/515,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/515#issuecomment-565266365,"pkgconfig files from rdma-core(https://github.com/linux-rdma/rdma-core)
are named start with lib, such as librdmacm.pc and libibverbs.pc. When
rdma support is enabled, it fails to find rdma related libraries. Update
configure.ac to the issue.
Signed-off-by: Kai Kang kai.kang@windriver.com",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,515,2019-12-13T01:52:16Z,2019-12-30T16:12:25Z,2019-12-30T16:13:03Z,CLOSED,False,2,2,1,https://github.com/parr0tr1ver,configure.ac: fix pkgconfig issue of rdma,1,[],https://github.com/corosync/corosync/pull/515,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/515#issuecomment-569721416,"pkgconfig files from rdma-core(https://github.com/linux-rdma/rdma-core)
are named start with lib, such as librdmacm.pc and libibverbs.pc. When
rdma support is enabled, it fails to find rdma related libraries. Update
configure.ac to the issue.
Signed-off-by: Kai Kang kai.kang@windriver.com","@parr0tr1ver Good catch and nice patch so ACK and merged as a 5c1b026 . It also seems to remove need for export [ibverbsrdmacm]|_[CFLAGS|LIBS] in specfile (honestly I'm wondering how it was even working before).
Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,516,2020-01-04T14:05:21Z,2020-01-07T07:58:41Z,2020-01-07T07:58:41Z,CLOSED,False,7,7,6,https://github.com/wferi,man: move cmap_keys man page from section 8 to 7,1,[],https://github.com/corosync/corosync/pull/516,https://github.com/wferi,1,https://github.com/corosync/corosync/pull/516,"Section 8 is for ""System administration commands"", 7 is ""Miscellaneous"".","Section 8 is for ""System administration commands"", 7 is ""Miscellaneous"".",True,{}
corosync/corosync,https://github.com/corosync/corosync,516,2020-01-04T14:05:21Z,2020-01-07T07:58:41Z,2020-01-07T07:58:41Z,CLOSED,False,7,7,6,https://github.com/wferi,man: move cmap_keys man page from section 8 to 7,1,[],https://github.com/corosync/corosync/pull/516,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/516#issuecomment-571478046,"Section 8 is for ""System administration commands"", 7 is ""Miscellaneous"".","@wferi Hi, yep, agree. Section 7 seems to be much more appropriate for cman_keys man page, so ACK and merged as a f1d3630.
Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,517,2020-01-07T00:23:41Z,2020-01-08T23:55:38Z,2020-01-08T23:55:38Z,CLOSED,False,1,1,1,https://github.com/HideoYamauchi,Low: cpg: Change log level.,1,[],https://github.com/corosync/corosync/pull/517,https://github.com/HideoYamauchi,1,https://github.com/corosync/corosync/pull/517,"Hi All,
For corosync3.x, the following message is output when the cluster starts or when a node leaves.
(snip)
corosync warning [CPG   ] downlist left_list: 0 received
(snip)
corosync warning [CPG   ] downlist left_list: 1 received
(snip)

Because the log level is a warning, users can be confused.
I think that it is better to change the log level to INFO in line with the 2.x system.
Best Regards,
Hideo Yamauchi.","Hi All,
For corosync3.x, the following message is output when the cluster starts or when a node leaves.
(snip)
corosync warning [CPG   ] downlist left_list: 0 received
(snip)
corosync warning [CPG   ] downlist left_list: 1 received
(snip)

Because the log level is a warning, users can be confused.
I think that it is better to change the log level to INFO in line with the 2.x system.
Best Regards,
Hideo Yamauchi.",True,{}
corosync/corosync,https://github.com/corosync/corosync,517,2020-01-07T00:23:41Z,2020-01-08T23:55:38Z,2020-01-08T23:55:38Z,CLOSED,False,1,1,1,https://github.com/HideoYamauchi,Low: cpg: Change log level.,1,[],https://github.com/corosync/corosync/pull/517,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/517#issuecomment-571375137,"Hi All,
For corosync3.x, the following message is output when the cluster starts or when a node leaves.
(snip)
corosync warning [CPG   ] downlist left_list: 0 received
(snip)
corosync warning [CPG   ] downlist left_list: 1 received
(snip)

Because the log level is a warning, users can be confused.
I think that it is better to change the log level to INFO in line with the 2.x system.
Best Regards,
Hideo Yamauchi.",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,517,2020-01-07T00:23:41Z,2020-01-08T23:55:38Z,2020-01-08T23:55:38Z,CLOSED,False,1,1,1,https://github.com/HideoYamauchi,Low: cpg: Change log level.,1,[],https://github.com/corosync/corosync/pull/517,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/517#issuecomment-571484661,"Hi All,
For corosync3.x, the following message is output when the cluster starts or when a node leaves.
(snip)
corosync warning [CPG   ] downlist left_list: 0 received
(snip)
corosync warning [CPG   ] downlist left_list: 1 received
(snip)

Because the log level is a warning, users can be confused.
I think that it is better to change the log level to INFO in line with the 2.x system.
Best Regards,
Hideo Yamauchi.","@HideoYamauchi Hi, good catch (I'm usually running with debug enabled so I wouldn't even notice this problem ;) ). The thing is, the downlist is not even used, and it is sent only for compatibility purposes so even INFO is probably too high. Would you mind to improve patch so instead of using LOG_INFO use LOG_DEBUG and do the same with log in message_handler_req_exec_cpg_downlist_old ?
Thanks.",True,{}
corosync/corosync,https://github.com/corosync/corosync,517,2020-01-07T00:23:41Z,2020-01-08T23:55:38Z,2020-01-08T23:55:38Z,CLOSED,False,1,1,1,https://github.com/HideoYamauchi,Low: cpg: Change log level.,1,[],https://github.com/corosync/corosync/pull/517,https://github.com/HideoYamauchi,4,https://github.com/corosync/corosync/pull/517#issuecomment-571824384,"Hi All,
For corosync3.x, the following message is output when the cluster starts or when a node leaves.
(snip)
corosync warning [CPG   ] downlist left_list: 0 received
(snip)
corosync warning [CPG   ] downlist left_list: 1 received
(snip)

Because the log level is a warning, users can be confused.
I think that it is better to change the log level to INFO in line with the 2.x system.
Best Regards,
Hideo Yamauchi.","Hi Jan,
I also agree with your opinion.
For us, LOG_DEBUG seems to be more convenient than LOG_INFO.
Please correct it.
Best Regards,
Hideo Yamauchi.",True,{}
corosync/corosync,https://github.com/corosync/corosync,517,2020-01-07T00:23:41Z,2020-01-08T23:55:38Z,2020-01-08T23:55:38Z,CLOSED,False,1,1,1,https://github.com/HideoYamauchi,Low: cpg: Change log level.,1,[],https://github.com/corosync/corosync/pull/517,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/517#issuecomment-571936112,"Hi All,
For corosync3.x, the following message is output when the cluster starts or when a node leaves.
(snip)
corosync warning [CPG   ] downlist left_list: 0 received
(snip)
corosync warning [CPG   ] downlist left_list: 1 received
(snip)

Because the log level is a warning, users can be confused.
I think that it is better to change the log level to INFO in line with the 2.x system.
Best Regards,
Hideo Yamauchi.","@HideoYamauchi Ok. I would really rather like if you could send the fixed patch, because it doesn't make too much sense to merge this one and right then ""fixed"" one (and as I've told, I would like to keep you the credit).",True,{}
corosync/corosync,https://github.com/corosync/corosync,517,2020-01-07T00:23:41Z,2020-01-08T23:55:38Z,2020-01-08T23:55:38Z,CLOSED,False,1,1,1,https://github.com/HideoYamauchi,Low: cpg: Change log level.,1,[],https://github.com/corosync/corosync/pull/517,https://github.com/HideoYamauchi,6,https://github.com/corosync/corosync/pull/517#issuecomment-572309057,"Hi All,
For corosync3.x, the following message is output when the cluster starts or when a node leaves.
(snip)
corosync warning [CPG   ] downlist left_list: 0 received
(snip)
corosync warning [CPG   ] downlist left_list: 1 received
(snip)

Because the log level is a warning, users can be confused.
I think that it is better to change the log level to INFO in line with the 2.x system.
Best Regards,
Hideo Yamauchi.","Hi Jan,
Okay!
I will PR the modified patch.
Many thanks,
Hideo Yamauchi.",True,{}
corosync/corosync,https://github.com/corosync/corosync,519,2020-01-08T23:56:55Z,2020-01-09T11:47:43Z,2020-01-09T15:12:39Z,CLOSED,False,2,2,1,https://github.com/HideoYamauchi,Low: cpg: Change log level(DEBUG).,1,[],https://github.com/corosync/corosync/pull/519,https://github.com/HideoYamauchi,1,https://github.com/corosync/corosync/pull/519,"Hi All,
This PR is a modified version of the following PR:

#517

Best Regards,
Hideo Yamauchi.","Hi All,
This PR is a modified version of the following PR:

#517

Best Regards,
Hideo Yamauchi.",True,{}
corosync/corosync,https://github.com/corosync/corosync,519,2020-01-08T23:56:55Z,2020-01-09T11:47:43Z,2020-01-09T15:12:39Z,CLOSED,False,2,2,1,https://github.com/HideoYamauchi,Low: cpg: Change log level(DEBUG).,1,[],https://github.com/corosync/corosync/pull/519,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/519#issuecomment-572315342,"Hi All,
This PR is a modified version of the following PR:

#517

Best Regards,
Hideo Yamauchi.",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,519,2020-01-08T23:56:55Z,2020-01-09T11:47:43Z,2020-01-09T15:12:39Z,CLOSED,False,2,2,1,https://github.com/HideoYamauchi,Low: cpg: Change log level(DEBUG).,1,[],https://github.com/corosync/corosync/pull/519,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/519#issuecomment-572526695,"Hi All,
This PR is a modified version of the following PR:

#517

Best Regards,
Hideo Yamauchi.","@HideoYamauchi Hi, nice patch. ACK and merged as a 9fda4dc (master) and 019fa4c (needle).
Thank you for the patch and regards,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,519,2020-01-08T23:56:55Z,2020-01-09T11:47:43Z,2020-01-09T15:12:39Z,CLOSED,False,2,2,1,https://github.com/HideoYamauchi,Low: cpg: Change log level(DEBUG).,1,[],https://github.com/corosync/corosync/pull/519,https://github.com/HideoYamauchi,4,https://github.com/corosync/corosync/pull/519#issuecomment-572604883,"Hi All,
This PR is a modified version of the following PR:

#517

Best Regards,
Hideo Yamauchi.",thanks!,True,{}
corosync/corosync,https://github.com/corosync/corosync,521,2020-01-17T14:04:43Z,2020-01-21T15:46:30Z,2020-01-21T15:46:34Z,CLOSED,False,19,5,1,https://github.com/jfriesse,votequorum: Reflect runtime change of 2Node to WFA,1,[],https://github.com/corosync/corosync/pull/521,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/521,"When 2Node mode is set, WFA is also set unless WFA is configured
explicitly. This behavior was not reflected on runtime change, so
restarted corosync behavior was different (WFA not set). Also when
cluster is reduced from 3 nodes to 2 nodes during runtime, WFA was not
set, what may result in two quorate partitions.
Solution is to set WFA depending on 2Node when WFA
is not explicitly configured.
Signed-off-by: Jan Friesse jfriesse@redhat.com","When 2Node mode is set, WFA is also set unless WFA is configured
explicitly. This behavior was not reflected on runtime change, so
restarted corosync behavior was different (WFA not set). Also when
cluster is reduced from 3 nodes to 2 nodes during runtime, WFA was not
set, what may result in two quorate partitions.
Solution is to set WFA depending on 2Node when WFA
is not explicitly configured.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,521,2020-01-17T14:04:43Z,2020-01-21T15:46:30Z,2020-01-21T15:46:34Z,CLOSED,False,19,5,1,https://github.com/jfriesse,votequorum: Reflect runtime change of 2Node to WFA,1,[],https://github.com/corosync/corosync/pull/521,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/521#issuecomment-575639502,"When 2Node mode is set, WFA is also set unless WFA is configured
explicitly. This behavior was not reflected on runtime change, so
restarted corosync behavior was different (WFA not set). Also when
cluster is reduced from 3 nodes to 2 nodes during runtime, WFA was not
set, what may result in two quorate partitions.
Solution is to set WFA depending on 2Node when WFA
is not explicitly configured.
Signed-off-by: Jan Friesse jfriesse@redhat.com","@chrissie-c Just a comment. I was thinking about not changing wfa when wfa is in progress, but it is not implemented mainly because I'm not entirely sure how to implement it without quite big patch and also I think in this context, it is safe. Because 2 node -> 3 node means disabling wfa, but also makes reaching of quorum ""harder"" - 2 nodes must be active, so I believe it is safe (= I was unable to find out any counter example).",True,{}
corosync/corosync,https://github.com/corosync/corosync,521,2020-01-17T14:04:43Z,2020-01-21T15:46:30Z,2020-01-21T15:46:34Z,CLOSED,False,19,5,1,https://github.com/jfriesse,votequorum: Reflect runtime change of 2Node to WFA,1,[],https://github.com/corosync/corosync/pull/521,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/521#issuecomment-576730338,"When 2Node mode is set, WFA is also set unless WFA is configured
explicitly. This behavior was not reflected on runtime change, so
restarted corosync behavior was different (WFA not set). Also when
cluster is reduced from 3 nodes to 2 nodes during runtime, WFA was not
set, what may result in two quorate partitions.
Solution is to set WFA depending on 2Node when WFA
is not explicitly configured.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c Thank you for the review! I've merged the patch as a 8ce65bf (and bfbed8c for needle).,True,{}
corosync/corosync,https://github.com/corosync/corosync,522,2020-01-17T14:25:01Z,2020-01-22T16:08:36Z,2020-01-22T16:09:28Z,CLOSED,False,140,12,5,https://github.com/chrissie-c,[stats] Add stats for scheduler misses,3,[],https://github.com/corosync/corosync/pull/522,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/522,"This patch add a stats.schedmiss.* set of entries that
are a record of the last 10 times corosync was not scheduled
in time.
These entries are always keyp in order (so stats.schedmiss.0.* is
always the earliest one kept) and the values, including the timestamp,
are in milliseconds.
It's also possible to use a cmap tracker to follow these events, which
might be useful.","This patch add a stats.schedmiss.* set of entries that
are a record of the last 10 times corosync was not scheduled
in time.
These entries are always keyp in order (so stats.schedmiss.0.* is
always the earliest one kept) and the values, including the timestamp,
are in milliseconds.
It's also possible to use a cmap tracker to follow these events, which
might be useful.",True,{}
corosync/corosync,https://github.com/corosync/corosync,522,2020-01-17T14:25:01Z,2020-01-22T16:08:36Z,2020-01-22T16:09:28Z,CLOSED,False,140,12,5,https://github.com/chrissie-c,[stats] Add stats for scheduler misses,3,[],https://github.com/corosync/corosync/pull/522,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/522#issuecomment-576188302,"This patch add a stats.schedmiss.* set of entries that
are a record of the last 10 times corosync was not scheduled
in time.
These entries are always keyp in order (so stats.schedmiss.0.* is
always the earliest one kept) and the values, including the timestamp,
are in milliseconds.
It's also possible to use a cmap tracker to follow these events, which
might be useful.","Two more nitpicks found during testing:
When tracker is added for first item, but before it exists:
corosync-cmapctl  -m stats -t stats.schedmiss.0.timestamp

and then first item is created (sigstop & sigcont), valgrind cries about uninitialized value
==9631== Conditional jump or move depends on uninitialised value(s)
==9631==    at 0x4C37773: bcmp (vg_replace_strmem.c:1113)
==9631==    by 0x13093A: stats_trigger_trackers (stats.c:608)
==9631==    by 0x12ADCF: corosync_totem_stats_updater (main.c:554)
==9631==    by 0x504F7E5: timer_dispatch (loop_timerlist.c:56)
==9631==    by 0x504CD1B: qb_loop_run_level (loop.c:43)
==9631==    by 0x504D400: qb_loop_run (loop.c:211)
==9631==    by 0x12D6BD: main (main.c:1566)
==9631== 

Also tracking of corosync-cmapctl  -m stats -T stats.schedmiss. behaves somehow weirdly. after wrap. Before wrap, it behaves just fine and shows newly added timestamp (that may be really useful), but after wrap, it also wraps and starts showing 0, 1, 2, ...
corosync-cmapctl  -m stats -T stats.schedmiss.
Type ""q"" to finish
create> stats.schedmiss.0.timestamp (u64) = 4827603996350
create> stats.schedmiss.0.delay (flt) = 2625.005371
create> stats.schedmiss.1.timestamp (u64) = 4827680380378
create> stats.schedmiss.1.delay (flt) = 1644.270752
create> stats.schedmiss.2.timestamp (u64) = 4827683723341
create> stats.schedmiss.2.delay (flt) = 2005.217285
create> stats.schedmiss.3.timestamp (u64) = 4827690682961
create> stats.schedmiss.3.delay (flt) = 2035.876953
create> stats.schedmiss.4.timestamp (u64) = 4827695929362
create> stats.schedmiss.4.delay (flt) = 2340.633301
create> stats.schedmiss.5.timestamp (u64) = 4827698842196
create> stats.schedmiss.5.delay (flt) = 2241.672119
create> stats.schedmiss.6.timestamp (u64) = 4827701191674
create> stats.schedmiss.6.delay (flt) = 1677.559937
create> stats.schedmiss.7.timestamp (u64) = 4827705805063
create> stats.schedmiss.7.delay (flt) = 1849.242065
create> stats.schedmiss.8.timestamp (u64) = 4827712522472
create> stats.schedmiss.8.delay (flt) = 2045.102173
create> stats.schedmiss.9.timestamp (u64) = 4827724231496
create> stats.schedmiss.9.delay (flt) = 1671.396851
create> stats.schedmiss.0.timestamp (u64) = 4827730486238
create> stats.schedmiss.0.delay (flt) = 3219.116943
create> stats.schedmiss.1.timestamp (u64) = 4827733685659
create> stats.schedmiss.1.delay (flt) = 1863.277100
create> stats.schedmiss.2.timestamp (u64) = 4827738038557
create> stats.schedmiss.2.delay (flt) = 2350.396729

I'm not entirely convinced such behavior is consistent/useful.",True,{}
corosync/corosync,https://github.com/corosync/corosync,522,2020-01-17T14:25:01Z,2020-01-22T16:08:36Z,2020-01-22T16:09:28Z,CLOSED,False,140,12,5,https://github.com/chrissie-c,[stats] Add stats for scheduler misses,3,[],https://github.com/corosync/corosync/pull/522,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/522#issuecomment-576767719,"This patch add a stats.schedmiss.* set of entries that
are a record of the last 10 times corosync was not scheduled
in time.
These entries are always keyp in order (so stats.schedmiss.0.* is
always the earliest one kept) and the values, including the timestamp,
are in milliseconds.
It's also possible to use a cmap tracker to follow these events, which
might be useful.","@chrissie-c Looks better, but I'm still not entirely convinced tracker handling is correct. Tracking of empty string is correct for sure, so please remove
if (!tracker->key_name) {
return;
}

section. If you think it make sense to ignore stats.schedmiss then next check should be
if (strncmp(key, SCHEDMISS_PREFIX, strlen(SCHEDMISS_PREFIX)) == 0 ) {
...

because currently it doesn't work when (for example) ""s"" is tracked, and it works really only when stats.schedmiss string is. No matter what, I don't think it is needed to be ignored. Current behavior is not super helpful (returning creation of stats.schedmiss.X.timestamp until X is complete) but it is consistent. But I'll let it to you, because ignoring that event also make sense for ring buffer.",True,{}
corosync/corosync,https://github.com/corosync/corosync,522,2020-01-17T14:25:01Z,2020-01-22T16:08:36Z,2020-01-22T16:09:28Z,CLOSED,False,140,12,5,https://github.com/chrissie-c,[stats] Add stats for scheduler misses,3,[],https://github.com/corosync/corosync/pull/522,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/522#issuecomment-576784566,"This patch add a stats.schedmiss.* set of entries that
are a record of the last 10 times corosync was not scheduled
in time.
These entries are always keyp in order (so stats.schedmiss.0.* is
always the earliest one kept) and the values, including the timestamp,
are in milliseconds.
It's also possible to use a cmap tracker to follow these events, which
might be useful.",@chrissie-c Oh and one more comment. If we decide to keep prefix tracker of schedmiss then schedmiss_clear_stats has to be changed so stats_rm_entry go before zeroing schedmiss_event[i].timestamp = (uint64_t)0LL; otherwise tracker get zero values.,True,{}
corosync/corosync,https://github.com/corosync/corosync,522,2020-01-17T14:25:01Z,2020-01-22T16:08:36Z,2020-01-22T16:09:28Z,CLOSED,False,140,12,5,https://github.com/chrissie-c,[stats] Add stats for scheduler misses,3,[],https://github.com/corosync/corosync/pull/522,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/522#issuecomment-577259811,"This patch add a stats.schedmiss.* set of entries that
are a record of the last 10 times corosync was not scheduled
in time.
These entries are always keyp in order (so stats.schedmiss.0.* is
always the earliest one kept) and the values, including the timestamp,
are in milliseconds.
It's also possible to use a cmap tracker to follow these events, which
might be useful.","Added patch from PR #523, squashed and merged as a 48b6894.
@chrissie-c Thank you for the patch and patience!",True,{}
corosync/corosync,https://github.com/corosync/corosync,523,2020-01-22T12:30:41Z,2020-01-22T16:07:50Z,2020-01-22T16:07:50Z,CLOSED,False,136,12,5,https://github.com/jfriesse,Schedmiss stat,4,[],https://github.com/corosync/corosync/pull/523,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/523,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,523,2020-01-22T12:30:41Z,2020-01-22T16:07:50Z,2020-01-22T16:07:50Z,CLOSED,False,136,12,5,https://github.com/jfriesse,Schedmiss stat,4,[],https://github.com/corosync/corosync/pull/523,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/523#issuecomment-577259395,,Squashed and merged as a 48b6894,True,{}
corosync/corosync,https://github.com/corosync/corosync,524,2020-01-23T16:20:50Z,2020-01-23T16:59:16Z,2020-01-23T16:59:20Z,CLOSED,False,2,1,1,https://github.com/jfriesse,stats: Use nanoseconds from epoch for schedmiss,1,[],https://github.com/corosync/corosync/pull/524,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/524,"Using monotonic time is not working because it doesn't have to match
time from epoch.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Using monotonic time is not working because it doesn't have to match
time from epoch.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,524,2020-01-23T16:20:50Z,2020-01-23T16:59:16Z,2020-01-23T16:59:20Z,CLOSED,False,2,1,1,https://github.com/jfriesse,stats: Use nanoseconds from epoch for schedmiss,1,[],https://github.com/corosync/corosync/pull/524,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/524#issuecomment-577772994,"Using monotonic time is not working because it doesn't have to match
time from epoch.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c Thank you for review! I've merged the patch as a ebd05fa,True,{}
corosync/corosync,https://github.com/corosync/corosync,526,2020-01-27T08:33:18Z,,2021-12-27T05:19:09Z,OPEN,False,79,12,2,https://github.com/jfriesse,WIP - Totemsrp leak recovery - Much more testing needed,4,[],https://github.com/corosync/corosync/pull/526,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/526,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,528,2020-02-07T04:39:02Z,2020-02-10T15:44:23Z,2020-02-12T00:08:46Z,CLOSED,False,16,1,1,https://github.com/HideoYamauchi,totemknet: Changing the initial value of the status area.,1,[],https://github.com/corosync/corosync/pull/528,https://github.com/HideoYamauchi,1,https://github.com/corosync/corosync/pull/528,"Hi All,
I was testing the status where enabled of other nodes was displayed as 0 in the s option of corosync-cfgtools.
Although it is an operation mistake, enabled can be displayed as 0 in the following procedure.
[root@rh80-test01 corosync]# corosync-cfgtool -s
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      link enabled:1  link connected:1
                nodeid  2:      link enabled:1  link connected:0
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      link enabled:0  link connected:1
                nodeid  2:      link enabled:1  link connected:0


Step1) Edit corosync.conf and comment the address of ring1 of the partner node.
(snip)
nodelist {
    node {
        ring0_addr: 192.168.106.155
        ring1_addr: 192.168.107.155
        name: rh80-test01
        nodeid: 1
    }

    node {
        ring0_addr: 192.168.106.156
#        ring1_addr: 192.168.107.156
        name: rh80-test02
        nodeid: 2
    }
}
(snip)

Step2) Execute corosync-cfgtool -R.
Then, the other node's enabled is displayed as 0, but connected is displayed as 1.
[root@rh80-test01 exec]# corosync-cfgtool -s
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      link enabled:1  link connected:1
                nodeid  2:      link enabled:1  link connected:0
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      link enabled:0  link connected:1
                nodeid  2:      link enabled:0  link connected:1

This is just an operation mistake, and the following log is output.
Feb 06 11:54:09 [23665] rh80-test01 corosync error   [TOTEM ] parse error in config: Not all nodes have the same number of links
Feb 06 11:54:09 [23665] rh80-test01 corosync error   [TOTEM ] knet_link_set_ping_timers for node 2 link 1 failed: Invalid argument (22)
Feb 06 11:54:09 [23665] rh80-test01 corosync error   [TOTEM ] knet_link_set_pong_count for node 2 link 1 failed: Invalid argument (22)
[23665] rh80-test01 corosyncerror   [TOTEM ] knet_link_set_priority for node 2 link 1 failed: Invalid argument (22)

However, it is very strange that the other node's connected is changed from 0 to 1 and displayed.
I changed the initialization of the status display area to d, changed only the own node to n, and confirmed that the display was improved as follows.
[root@rh80-test01 corosync]# corosync-cfgtool -s
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      link enabled:1  link connected:1
                nodeid  2:      link enabled:1  link connected:0
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      link enabled:0  link connected:1
                nodeid  2:      link enabled:0  link connected:0

It is not a big problem because it was originally due to a mistake in editing corosync.conf.
However, weird display can be improved with this patch.
Best Regards,
Hideo Yamauchi.","Hi All,
I was testing the status where enabled of other nodes was displayed as 0 in the s option of corosync-cfgtools.
Although it is an operation mistake, enabled can be displayed as 0 in the following procedure.
[root@rh80-test01 corosync]# corosync-cfgtool -s
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      link enabled:1  link connected:1
                nodeid  2:      link enabled:1  link connected:0
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      link enabled:0  link connected:1
                nodeid  2:      link enabled:1  link connected:0


Step1) Edit corosync.conf and comment the address of ring1 of the partner node.
(snip)
nodelist {
    node {
        ring0_addr: 192.168.106.155
        ring1_addr: 192.168.107.155
        name: rh80-test01
        nodeid: 1
    }

    node {
        ring0_addr: 192.168.106.156
#        ring1_addr: 192.168.107.156
        name: rh80-test02
        nodeid: 2
    }
}
(snip)

Step2) Execute corosync-cfgtool -R.
Then, the other node's enabled is displayed as 0, but connected is displayed as 1.
[root@rh80-test01 exec]# corosync-cfgtool -s
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      link enabled:1  link connected:1
                nodeid  2:      link enabled:1  link connected:0
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      link enabled:0  link connected:1
                nodeid  2:      link enabled:0  link connected:1

This is just an operation mistake, and the following log is output.
Feb 06 11:54:09 [23665] rh80-test01 corosync error   [TOTEM ] parse error in config: Not all nodes have the same number of links
Feb 06 11:54:09 [23665] rh80-test01 corosync error   [TOTEM ] knet_link_set_ping_timers for node 2 link 1 failed: Invalid argument (22)
Feb 06 11:54:09 [23665] rh80-test01 corosync error   [TOTEM ] knet_link_set_pong_count for node 2 link 1 failed: Invalid argument (22)
[23665] rh80-test01 corosyncerror   [TOTEM ] knet_link_set_priority for node 2 link 1 failed: Invalid argument (22)

However, it is very strange that the other node's connected is changed from 0 to 1 and displayed.
I changed the initialization of the status display area to d, changed only the own node to n, and confirmed that the display was improved as follows.
[root@rh80-test01 corosync]# corosync-cfgtool -s
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      link enabled:1  link connected:1
                nodeid  2:      link enabled:1  link connected:0
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      link enabled:0  link connected:1
                nodeid  2:      link enabled:0  link connected:0

It is not a big problem because it was originally due to a mistake in editing corosync.conf.
However, weird display can be improved with this patch.
Best Regards,
Hideo Yamauchi.",True,{}
corosync/corosync,https://github.com/corosync/corosync,528,2020-02-07T04:39:02Z,2020-02-10T15:44:23Z,2020-02-12T00:08:46Z,CLOSED,False,16,1,1,https://github.com/HideoYamauchi,totemknet: Changing the initial value of the status area.,1,[],https://github.com/corosync/corosync/pull/528,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/528#issuecomment-583230636,"Hi All,
I was testing the status where enabled of other nodes was displayed as 0 in the s option of corosync-cfgtools.
Although it is an operation mistake, enabled can be displayed as 0 in the following procedure.
[root@rh80-test01 corosync]# corosync-cfgtool -s
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      link enabled:1  link connected:1
                nodeid  2:      link enabled:1  link connected:0
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      link enabled:0  link connected:1
                nodeid  2:      link enabled:1  link connected:0


Step1) Edit corosync.conf and comment the address of ring1 of the partner node.
(snip)
nodelist {
    node {
        ring0_addr: 192.168.106.155
        ring1_addr: 192.168.107.155
        name: rh80-test01
        nodeid: 1
    }

    node {
        ring0_addr: 192.168.106.156
#        ring1_addr: 192.168.107.156
        name: rh80-test02
        nodeid: 2
    }
}
(snip)

Step2) Execute corosync-cfgtool -R.
Then, the other node's enabled is displayed as 0, but connected is displayed as 1.
[root@rh80-test01 exec]# corosync-cfgtool -s
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      link enabled:1  link connected:1
                nodeid  2:      link enabled:1  link connected:0
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      link enabled:0  link connected:1
                nodeid  2:      link enabled:0  link connected:1

This is just an operation mistake, and the following log is output.
Feb 06 11:54:09 [23665] rh80-test01 corosync error   [TOTEM ] parse error in config: Not all nodes have the same number of links
Feb 06 11:54:09 [23665] rh80-test01 corosync error   [TOTEM ] knet_link_set_ping_timers for node 2 link 1 failed: Invalid argument (22)
Feb 06 11:54:09 [23665] rh80-test01 corosync error   [TOTEM ] knet_link_set_pong_count for node 2 link 1 failed: Invalid argument (22)
[23665] rh80-test01 corosyncerror   [TOTEM ] knet_link_set_priority for node 2 link 1 failed: Invalid argument (22)

However, it is very strange that the other node's connected is changed from 0 to 1 and displayed.
I changed the initialization of the status display area to d, changed only the own node to n, and confirmed that the display was improved as follows.
[root@rh80-test01 corosync]# corosync-cfgtool -s
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      link enabled:1  link connected:1
                nodeid  2:      link enabled:1  link connected:0
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      link enabled:0  link connected:1
                nodeid  2:      link enabled:0  link connected:0

It is not a big problem because it was originally due to a mistake in editing corosync.conf.
However, weird display can be improved with this patch.
Best Regards,
Hideo Yamauchi.",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,528,2020-02-07T04:39:02Z,2020-02-10T15:44:23Z,2020-02-12T00:08:46Z,CLOSED,False,16,1,1,https://github.com/HideoYamauchi,totemknet: Changing the initial value of the status area.,1,[],https://github.com/corosync/corosync/pull/528,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/528#issuecomment-583282051,"Hi All,
I was testing the status where enabled of other nodes was displayed as 0 in the s option of corosync-cfgtools.
Although it is an operation mistake, enabled can be displayed as 0 in the following procedure.
[root@rh80-test01 corosync]# corosync-cfgtool -s
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      link enabled:1  link connected:1
                nodeid  2:      link enabled:1  link connected:0
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      link enabled:0  link connected:1
                nodeid  2:      link enabled:1  link connected:0


Step1) Edit corosync.conf and comment the address of ring1 of the partner node.
(snip)
nodelist {
    node {
        ring0_addr: 192.168.106.155
        ring1_addr: 192.168.107.155
        name: rh80-test01
        nodeid: 1
    }

    node {
        ring0_addr: 192.168.106.156
#        ring1_addr: 192.168.107.156
        name: rh80-test02
        nodeid: 2
    }
}
(snip)

Step2) Execute corosync-cfgtool -R.
Then, the other node's enabled is displayed as 0, but connected is displayed as 1.
[root@rh80-test01 exec]# corosync-cfgtool -s
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      link enabled:1  link connected:1
                nodeid  2:      link enabled:1  link connected:0
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      link enabled:0  link connected:1
                nodeid  2:      link enabled:0  link connected:1

This is just an operation mistake, and the following log is output.
Feb 06 11:54:09 [23665] rh80-test01 corosync error   [TOTEM ] parse error in config: Not all nodes have the same number of links
Feb 06 11:54:09 [23665] rh80-test01 corosync error   [TOTEM ] knet_link_set_ping_timers for node 2 link 1 failed: Invalid argument (22)
Feb 06 11:54:09 [23665] rh80-test01 corosync error   [TOTEM ] knet_link_set_pong_count for node 2 link 1 failed: Invalid argument (22)
[23665] rh80-test01 corosyncerror   [TOTEM ] knet_link_set_priority for node 2 link 1 failed: Invalid argument (22)

However, it is very strange that the other node's connected is changed from 0 to 1 and displayed.
I changed the initialization of the status display area to d, changed only the own node to n, and confirmed that the display was improved as follows.
[root@rh80-test01 corosync]# corosync-cfgtool -s
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      link enabled:1  link connected:1
                nodeid  2:      link enabled:1  link connected:0
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      link enabled:0  link connected:1
                nodeid  2:      link enabled:0  link connected:0

It is not a big problem because it was originally due to a mistake in editing corosync.conf.
However, weird display can be improved with this patch.
Best Regards,
Hideo Yamauchi.","@HideoYamauchi Thank you for the report and patch. Let me dig into problem a little bit more, because I see a bigger problem in fact that totemconfig allows such change to happen. I'll keep you updated.",True,{}
corosync/corosync,https://github.com/corosync/corosync,528,2020-02-07T04:39:02Z,2020-02-10T15:44:23Z,2020-02-12T00:08:46Z,CLOSED,False,16,1,1,https://github.com/HideoYamauchi,totemknet: Changing the initial value of the status area.,1,[],https://github.com/corosync/corosync/pull/528,https://github.com/HideoYamauchi,4,https://github.com/corosync/corosync/pull/528#issuecomment-583499005,"Hi All,
I was testing the status where enabled of other nodes was displayed as 0 in the s option of corosync-cfgtools.
Although it is an operation mistake, enabled can be displayed as 0 in the following procedure.
[root@rh80-test01 corosync]# corosync-cfgtool -s
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      link enabled:1  link connected:1
                nodeid  2:      link enabled:1  link connected:0
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      link enabled:0  link connected:1
                nodeid  2:      link enabled:1  link connected:0


Step1) Edit corosync.conf and comment the address of ring1 of the partner node.
(snip)
nodelist {
    node {
        ring0_addr: 192.168.106.155
        ring1_addr: 192.168.107.155
        name: rh80-test01
        nodeid: 1
    }

    node {
        ring0_addr: 192.168.106.156
#        ring1_addr: 192.168.107.156
        name: rh80-test02
        nodeid: 2
    }
}
(snip)

Step2) Execute corosync-cfgtool -R.
Then, the other node's enabled is displayed as 0, but connected is displayed as 1.
[root@rh80-test01 exec]# corosync-cfgtool -s
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      link enabled:1  link connected:1
                nodeid  2:      link enabled:1  link connected:0
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      link enabled:0  link connected:1
                nodeid  2:      link enabled:0  link connected:1

This is just an operation mistake, and the following log is output.
Feb 06 11:54:09 [23665] rh80-test01 corosync error   [TOTEM ] parse error in config: Not all nodes have the same number of links
Feb 06 11:54:09 [23665] rh80-test01 corosync error   [TOTEM ] knet_link_set_ping_timers for node 2 link 1 failed: Invalid argument (22)
Feb 06 11:54:09 [23665] rh80-test01 corosync error   [TOTEM ] knet_link_set_pong_count for node 2 link 1 failed: Invalid argument (22)
[23665] rh80-test01 corosyncerror   [TOTEM ] knet_link_set_priority for node 2 link 1 failed: Invalid argument (22)

However, it is very strange that the other node's connected is changed from 0 to 1 and displayed.
I changed the initialization of the status display area to d, changed only the own node to n, and confirmed that the display was improved as follows.
[root@rh80-test01 corosync]# corosync-cfgtool -s
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      link enabled:1  link connected:1
                nodeid  2:      link enabled:1  link connected:0
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      link enabled:0  link connected:1
                nodeid  2:      link enabled:0  link connected:0

It is not a big problem because it was originally due to a mistake in editing corosync.conf.
However, weird display can be improved with this patch.
Best Regards,
Hideo Yamauchi.","Hi Jan,
Thanks for your comment.
I think it is more correct to guard and notify such operation mistakes.
I leave it to your modifications.
Best Regards,
Hideo Yamauchi.",True,{}
corosync/corosync,https://github.com/corosync/corosync,528,2020-02-07T04:39:02Z,2020-02-10T15:44:23Z,2020-02-12T00:08:46Z,CLOSED,False,16,1,1,https://github.com/HideoYamauchi,totemknet: Changing the initial value of the status area.,1,[],https://github.com/corosync/corosync/pull/528,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/528#issuecomment-584064573,"Hi All,
I was testing the status where enabled of other nodes was displayed as 0 in the s option of corosync-cfgtools.
Although it is an operation mistake, enabled can be displayed as 0 in the following procedure.
[root@rh80-test01 corosync]# corosync-cfgtool -s
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      link enabled:1  link connected:1
                nodeid  2:      link enabled:1  link connected:0
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      link enabled:0  link connected:1
                nodeid  2:      link enabled:1  link connected:0


Step1) Edit corosync.conf and comment the address of ring1 of the partner node.
(snip)
nodelist {
    node {
        ring0_addr: 192.168.106.155
        ring1_addr: 192.168.107.155
        name: rh80-test01
        nodeid: 1
    }

    node {
        ring0_addr: 192.168.106.156
#        ring1_addr: 192.168.107.156
        name: rh80-test02
        nodeid: 2
    }
}
(snip)

Step2) Execute corosync-cfgtool -R.
Then, the other node's enabled is displayed as 0, but connected is displayed as 1.
[root@rh80-test01 exec]# corosync-cfgtool -s
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      link enabled:1  link connected:1
                nodeid  2:      link enabled:1  link connected:0
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      link enabled:0  link connected:1
                nodeid  2:      link enabled:0  link connected:1

This is just an operation mistake, and the following log is output.
Feb 06 11:54:09 [23665] rh80-test01 corosync error   [TOTEM ] parse error in config: Not all nodes have the same number of links
Feb 06 11:54:09 [23665] rh80-test01 corosync error   [TOTEM ] knet_link_set_ping_timers for node 2 link 1 failed: Invalid argument (22)
Feb 06 11:54:09 [23665] rh80-test01 corosync error   [TOTEM ] knet_link_set_pong_count for node 2 link 1 failed: Invalid argument (22)
[23665] rh80-test01 corosyncerror   [TOTEM ] knet_link_set_priority for node 2 link 1 failed: Invalid argument (22)

However, it is very strange that the other node's connected is changed from 0 to 1 and displayed.
I changed the initialization of the status display area to d, changed only the own node to n, and confirmed that the display was improved as follows.
[root@rh80-test01 corosync]# corosync-cfgtool -s
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      link enabled:1  link connected:1
                nodeid  2:      link enabled:1  link connected:0
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      link enabled:0  link connected:1
                nodeid  2:      link enabled:0  link connected:0

It is not a big problem because it was originally due to a mistake in editing corosync.conf.
However, weird display can be improved with this patch.
Best Regards,
Hideo Yamauchi.","@HideoYamauchi I'm now remembering why it is behaving that way and it is actually something what @chrissie-c is working on (AFAICR https://github.com/chrissie-c/corosync/commits/rewrite-config). I'm thinking if it may make sense to merge your patch till we get proper fix for corosync reload, what may take a while.",True,{}
corosync/corosync,https://github.com/corosync/corosync,528,2020-02-07T04:39:02Z,2020-02-10T15:44:23Z,2020-02-12T00:08:46Z,CLOSED,False,16,1,1,https://github.com/HideoYamauchi,totemknet: Changing the initial value of the status area.,1,[],https://github.com/corosync/corosync/pull/528,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/528#issuecomment-584185943,"Hi All,
I was testing the status where enabled of other nodes was displayed as 0 in the s option of corosync-cfgtools.
Although it is an operation mistake, enabled can be displayed as 0 in the following procedure.
[root@rh80-test01 corosync]# corosync-cfgtool -s
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      link enabled:1  link connected:1
                nodeid  2:      link enabled:1  link connected:0
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      link enabled:0  link connected:1
                nodeid  2:      link enabled:1  link connected:0


Step1) Edit corosync.conf and comment the address of ring1 of the partner node.
(snip)
nodelist {
    node {
        ring0_addr: 192.168.106.155
        ring1_addr: 192.168.107.155
        name: rh80-test01
        nodeid: 1
    }

    node {
        ring0_addr: 192.168.106.156
#        ring1_addr: 192.168.107.156
        name: rh80-test02
        nodeid: 2
    }
}
(snip)

Step2) Execute corosync-cfgtool -R.
Then, the other node's enabled is displayed as 0, but connected is displayed as 1.
[root@rh80-test01 exec]# corosync-cfgtool -s
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      link enabled:1  link connected:1
                nodeid  2:      link enabled:1  link connected:0
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      link enabled:0  link connected:1
                nodeid  2:      link enabled:0  link connected:1

This is just an operation mistake, and the following log is output.
Feb 06 11:54:09 [23665] rh80-test01 corosync error   [TOTEM ] parse error in config: Not all nodes have the same number of links
Feb 06 11:54:09 [23665] rh80-test01 corosync error   [TOTEM ] knet_link_set_ping_timers for node 2 link 1 failed: Invalid argument (22)
Feb 06 11:54:09 [23665] rh80-test01 corosync error   [TOTEM ] knet_link_set_pong_count for node 2 link 1 failed: Invalid argument (22)
[23665] rh80-test01 corosyncerror   [TOTEM ] knet_link_set_priority for node 2 link 1 failed: Invalid argument (22)

However, it is very strange that the other node's connected is changed from 0 to 1 and displayed.
I changed the initialization of the status display area to d, changed only the own node to n, and confirmed that the display was improved as follows.
[root@rh80-test01 corosync]# corosync-cfgtool -s
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      link enabled:1  link connected:1
                nodeid  2:      link enabled:1  link connected:0
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      link enabled:0  link connected:1
                nodeid  2:      link enabled:0  link connected:0

It is not a big problem because it was originally due to a mistake in editing corosync.conf.
However, weird display can be improved with this patch.
Best Regards,
Hideo Yamauchi.",@HideoYamauchi I was playing with the link status a bit more and I think patch makes sense (at least until we fix main problem (atomic reload)). So ACK and merged as a 0143ee9.,True,{}
corosync/corosync,https://github.com/corosync/corosync,528,2020-02-07T04:39:02Z,2020-02-10T15:44:23Z,2020-02-12T00:08:46Z,CLOSED,False,16,1,1,https://github.com/HideoYamauchi,totemknet: Changing the initial value of the status area.,1,[],https://github.com/corosync/corosync/pull/528,https://github.com/HideoYamauchi,7,https://github.com/corosync/corosync/pull/528#issuecomment-584931841,"Hi All,
I was testing the status where enabled of other nodes was displayed as 0 in the s option of corosync-cfgtools.
Although it is an operation mistake, enabled can be displayed as 0 in the following procedure.
[root@rh80-test01 corosync]# corosync-cfgtool -s
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      link enabled:1  link connected:1
                nodeid  2:      link enabled:1  link connected:0
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      link enabled:0  link connected:1
                nodeid  2:      link enabled:1  link connected:0


Step1) Edit corosync.conf and comment the address of ring1 of the partner node.
(snip)
nodelist {
    node {
        ring0_addr: 192.168.106.155
        ring1_addr: 192.168.107.155
        name: rh80-test01
        nodeid: 1
    }

    node {
        ring0_addr: 192.168.106.156
#        ring1_addr: 192.168.107.156
        name: rh80-test02
        nodeid: 2
    }
}
(snip)

Step2) Execute corosync-cfgtool -R.
Then, the other node's enabled is displayed as 0, but connected is displayed as 1.
[root@rh80-test01 exec]# corosync-cfgtool -s
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      link enabled:1  link connected:1
                nodeid  2:      link enabled:1  link connected:0
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      link enabled:0  link connected:1
                nodeid  2:      link enabled:0  link connected:1

This is just an operation mistake, and the following log is output.
Feb 06 11:54:09 [23665] rh80-test01 corosync error   [TOTEM ] parse error in config: Not all nodes have the same number of links
Feb 06 11:54:09 [23665] rh80-test01 corosync error   [TOTEM ] knet_link_set_ping_timers for node 2 link 1 failed: Invalid argument (22)
Feb 06 11:54:09 [23665] rh80-test01 corosync error   [TOTEM ] knet_link_set_pong_count for node 2 link 1 failed: Invalid argument (22)
[23665] rh80-test01 corosyncerror   [TOTEM ] knet_link_set_priority for node 2 link 1 failed: Invalid argument (22)

However, it is very strange that the other node's connected is changed from 0 to 1 and displayed.
I changed the initialization of the status display area to d, changed only the own node to n, and confirmed that the display was improved as follows.
[root@rh80-test01 corosync]# corosync-cfgtool -s
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      link enabled:1  link connected:1
                nodeid  2:      link enabled:1  link connected:0
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      link enabled:0  link connected:1
                nodeid  2:      link enabled:0  link connected:0

It is not a big problem because it was originally due to a mistake in editing corosync.conf.
However, weird display can be improved with this patch.
Best Regards,
Hideo Yamauchi.","Hi Jan,
All right!
Many thanks,
Hideo Yamauchi.",True,{}
corosync/corosync,https://github.com/corosync/corosync,530,2020-02-10T16:33:27Z,2020-02-12T12:09:16Z,2020-02-12T12:09:20Z,CLOSED,False,34,12,3,https://github.com/jfriesse,cfgtool: Improve link status display,1,[],https://github.com/corosync/corosync/pull/530,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/530,"Totemknet is enhanced to use 'n' character for localhost and not adding
status, because it is safe to expect that localhost link is always
connectd. corosync-cfgtool is enhanced to properly decode 'n', '?' and 'd'
characters and display its meaning for extended status. Special
characters are also documented in man page.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Totemknet is enhanced to use 'n' character for localhost and not adding
status, because it is safe to expect that localhost link is always
connectd. corosync-cfgtool is enhanced to properly decode 'n', '?' and 'd'
characters and display its meaning for extended status. Special
characters are also documented in man page.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,530,2020-02-10T16:33:27Z,2020-02-12T12:09:16Z,2020-02-12T12:09:20Z,CLOSED,False,34,12,3,https://github.com/jfriesse,cfgtool: Improve link status display,1,[],https://github.com/corosync/corosync/pull/530,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/530#issuecomment-584212417,"Totemknet is enhanced to use 'n' character for localhost and not adding
status, because it is safe to expect that localhost link is always
connectd. corosync-cfgtool is enhanced to properly decode 'n', '?' and 'd'
characters and display its meaning for extended status. Special
characters are also documented in man page.
Signed-off-by: Jan Friesse jfriesse@redhat.com","@chrissie-c I'm happy to discuss some of decisions (like removal of status of localhost link0), but I believe patch in general make sense. I was also thinking of using 'l' character for localhost, but it was not as distinguishable from '1' as I would like. Also kindly asking for englishifying of mp ;)",True,{}
corosync/corosync,https://github.com/corosync/corosync,530,2020-02-10T16:33:27Z,2020-02-12T12:09:16Z,2020-02-12T12:09:20Z,CLOSED,False,34,12,3,https://github.com/jfriesse,cfgtool: Improve link status display,1,[],https://github.com/corosync/corosync/pull/530,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/530#issuecomment-585175968,"Totemknet is enhanced to use 'n' character for localhost and not adding
status, because it is safe to expect that localhost link is always
connectd. corosync-cfgtool is enhanced to properly decode 'n', '?' and 'd'
characters and display its meaning for extended status. Special
characters are also documented in man page.
Signed-off-by: Jan Friesse jfriesse@redhat.com","@chrissie-c Thank you for the review! I've merged patch as a 720a892.
Regards,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,532,2020-02-14T08:55:29Z,2020-02-17T16:32:39Z,2020-04-22T11:36:53Z,CLOSED,False,8,10,3,https://github.com/jfriesse,Add support for sin6_scope_id,2,[],https://github.com/corosync/corosync/pull/532,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/532,"sin6_scope_id was not present in totemip structure making impossible to use link-local ipv6 address.
Patch adds sin6_scope_id and changes convert/copy functions to use it
(formally also comparator functions should be changed, but it seems to
cause more harm and it is not really needed).
This makes corosync work with link-local addresses fine for both UDPU
and Knet transport as long as interface specification is used (so
fe80::xxxx:xxxx:xxxx:xxxx%eth0).","sin6_scope_id was not present in totemip structure making impossible to use link-local ipv6 address.
Patch adds sin6_scope_id and changes convert/copy functions to use it
(formally also comparator functions should be changed, but it seems to
cause more harm and it is not really needed).
This makes corosync work with link-local addresses fine for both UDPU
and Knet transport as long as interface specification is used (so
fe80::xxxx:xxxx:xxxx:xxxx%eth0).",True,{}
corosync/corosync,https://github.com/corosync/corosync,532,2020-02-14T08:55:29Z,2020-02-17T16:32:39Z,2020-04-22T11:36:53Z,CLOSED,False,8,10,3,https://github.com/jfriesse,Add support for sin6_scope_id,2,[],https://github.com/corosync/corosync/pull/532,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/532#issuecomment-586164353,"sin6_scope_id was not present in totemip structure making impossible to use link-local ipv6 address.
Patch adds sin6_scope_id and changes convert/copy functions to use it
(formally also comparator functions should be changed, but it seems to
cause more harm and it is not really needed).
This makes corosync work with link-local addresses fine for both UDPU
and Knet transport as long as interface specification is used (so
fe80::xxxx:xxxx:xxxx:xxxx%eth0).","Few more comments:

I was thinking how to make possible to not to require interface specification, but it seems to be impossible as long as we are using freebind in knet (but seems to work to some extend for udpu).
I was also thinking if it make sense to check if addr is link-local and if it is, then check if scope_id is specified. The problem I've found is that sin6_scope_id is not deeply documented, so I was unable to find out if it is guaranteed that it has always non-zero value when scope is specified. Also it would mean to check it during reload where it is unclear what to do. Lastly it looks link-local shouldn't be really used for any ""production"". So to conclude, I've decided to not have a check for link-local addr.
Take this patch as a step1. Proper solution is to get rid of totemip completely because sockaddr_storage does the same job and without need to convert things back and forth (as is happening now)",True,{}
corosync/corosync,https://github.com/corosync/corosync,532,2020-02-14T08:55:29Z,2020-02-17T16:32:39Z,2020-04-22T11:36:53Z,CLOSED,False,8,10,3,https://github.com/jfriesse,Add support for sin6_scope_id,2,[],https://github.com/corosync/corosync/pull/532,https://github.com/liangxin1300,3,https://github.com/corosync/corosync/pull/532#issuecomment-587020769,"sin6_scope_id was not present in totemip structure making impossible to use link-local ipv6 address.
Patch adds sin6_scope_id and changes convert/copy functions to use it
(formally also comparator functions should be changed, but it seems to
cause more harm and it is not really needed).
This makes corosync work with link-local addresses fine for both UDPU
and Knet transport as long as interface specification is used (so
fe80::xxxx:xxxx:xxxx:xxxx%eth0).","Thanks for this PR @jfriesse , and I've create a backport PR for needle branch, please review!",True,{}
corosync/corosync,https://github.com/corosync/corosync,532,2020-02-14T08:55:29Z,2020-02-17T16:32:39Z,2020-04-22T11:36:53Z,CLOSED,False,8,10,3,https://github.com/jfriesse,Add support for sin6_scope_id,2,[],https://github.com/corosync/corosync/pull/532,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/532#issuecomment-587073972,"sin6_scope_id was not present in totemip structure making impossible to use link-local ipv6 address.
Patch adds sin6_scope_id and changes convert/copy functions to use it
(formally also comparator functions should be changed, but it seems to
cause more harm and it is not really needed).
This makes corosync work with link-local addresses fine for both UDPU
and Knet transport as long as interface specification is used (so
fe80::xxxx:xxxx:xxxx:xxxx%eth0).",@chrissie-c Thank you for the review! I've merged patches as a 38d1d10,True,{}
corosync/corosync,https://github.com/corosync/corosync,532,2020-02-14T08:55:29Z,2020-02-17T16:32:39Z,2020-04-22T11:36:53Z,CLOSED,False,8,10,3,https://github.com/jfriesse,Add support for sin6_scope_id,2,[],https://github.com/corosync/corosync/pull/532,https://github.com/liangxin1300,5,https://github.com/corosync/corosync/pull/532#issuecomment-617647233,"sin6_scope_id was not present in totemip structure making impossible to use link-local ipv6 address.
Patch adds sin6_scope_id and changes convert/copy functions to use it
(formally also comparator functions should be changed, but it seems to
cause more harm and it is not really needed).
This makes corosync work with link-local addresses fine for both UDPU
and Knet transport as long as interface specification is used (so
fe80::xxxx:xxxx:xxxx:xxxx%eth0).","Hi @jfriesse
I found an issue brought by this PR(on needle, I think it also might have the same problem on master), that is:
Assuming I have two nodes, corosync on node1 doesn't contain this patch, while corosync on node2 does. Then I found they can not see each other,
on node2, I found [TOTEM ] Received memb_merge_detect message is too short...  ignoring;
on node1, I found [TOTEM ] Received message corrupted... ignoring.
And that will also cause huge ring id
pacemaker upstream already made the change for that in here:ClusterLabs/pacemaker#2030
In short, this PR will cause problem when doing rolling upgrade",True,{}
corosync/corosync,https://github.com/corosync/corosync,532,2020-02-14T08:55:29Z,2020-02-17T16:32:39Z,2020-04-22T11:36:53Z,CLOSED,False,8,10,3,https://github.com/jfriesse,Add support for sin6_scope_id,2,[],https://github.com/corosync/corosync/pull/532,https://github.com/aleksei-burlakov,6,https://github.com/corosync/corosync/pull/532#issuecomment-617650210,"sin6_scope_id was not present in totemip structure making impossible to use link-local ipv6 address.
Patch adds sin6_scope_id and changes convert/copy functions to use it
(formally also comparator functions should be changed, but it seems to
cause more harm and it is not really needed).
This makes corosync work with link-local addresses fine for both UDPU
and Knet transport as long as interface specification is used (so
fe80::xxxx:xxxx:xxxx:xxxx%eth0).","It looks like, the patch changes the protocol that breaks the communication between nodes of different versions.",True,{}
corosync/corosync,https://github.com/corosync/corosync,532,2020-02-14T08:55:29Z,2020-02-17T16:32:39Z,2020-04-22T11:36:53Z,CLOSED,False,8,10,3,https://github.com/jfriesse,Add support for sin6_scope_id,2,[],https://github.com/corosync/corosync/pull/532,https://github.com/jfriesse,7,https://github.com/corosync/corosync/pull/532#issuecomment-617684939,"sin6_scope_id was not present in totemip structure making impossible to use link-local ipv6 address.
Patch adds sin6_scope_id and changes convert/copy functions to use it
(formally also comparator functions should be changed, but it seems to
cause more harm and it is not really needed).
This makes corosync work with link-local addresses fine for both UDPU
and Knet transport as long as interface specification is used (so
fe80::xxxx:xxxx:xxxx:xxxx%eth0).","@aleksei-burlakov, @liangxin1300  This looks like a serious problem (thanks for pointing out) Do you have a config handy so it is easier for me to reproduce the problem (mostly, is it happening always or only when link local is used/only for ipv6/udpu/udp/...)?",True,{}
corosync/corosync,https://github.com/corosync/corosync,532,2020-02-14T08:55:29Z,2020-02-17T16:32:39Z,2020-04-22T11:36:53Z,CLOSED,False,8,10,3,https://github.com/jfriesse,Add support for sin6_scope_id,2,[],https://github.com/corosync/corosync/pull/532,https://github.com/jfriesse,8,https://github.com/corosync/corosync/pull/532#issuecomment-617690467,"sin6_scope_id was not present in totemip structure making impossible to use link-local ipv6 address.
Patch adds sin6_scope_id and changes convert/copy functions to use it
(formally also comparator functions should be changed, but it seems to
cause more harm and it is not really needed).
This makes corosync work with link-local addresses fine for both UDPU
and Knet transport as long as interface specification is used (so
fe80::xxxx:xxxx:xxxx:xxxx%eth0).","@aleksei-burlakov, @liangxin1300 Never mind, found it. It is always reproducible. I think we will need to have protocol totem_ip_address and other local totem_ip_address. For now I think it may be best to revert patch and start from here.",True,{}
corosync/corosync,https://github.com/corosync/corosync,532,2020-02-14T08:55:29Z,2020-02-17T16:32:39Z,2020-04-22T11:36:53Z,CLOSED,False,8,10,3,https://github.com/jfriesse,Add support for sin6_scope_id,2,[],https://github.com/corosync/corosync/pull/532,https://github.com/jfriesse,9,https://github.com/corosync/corosync/pull/532#issuecomment-617695141,"sin6_scope_id was not present in totemip structure making impossible to use link-local ipv6 address.
Patch adds sin6_scope_id and changes convert/copy functions to use it
(formally also comparator functions should be changed, but it seems to
cause more harm and it is not really needed).
This makes corosync work with link-local addresses fine for both UDPU
and Knet transport as long as interface specification is used (so
fe80::xxxx:xxxx:xxxx:xxxx%eth0).",So master is not affected because totem_ip_address is not used in sent messages.,True,{'THUMBS_UP': ['https://github.com/aleksei-burlakov']}
corosync/corosync,https://github.com/corosync/corosync,532,2020-02-14T08:55:29Z,2020-02-17T16:32:39Z,2020-04-22T11:36:53Z,CLOSED,False,8,10,3,https://github.com/jfriesse,Add support for sin6_scope_id,2,[],https://github.com/corosync/corosync/pull/532,https://github.com/liangxin1300,10,https://github.com/corosync/corosync/pull/532#issuecomment-617710726,"sin6_scope_id was not present in totemip structure making impossible to use link-local ipv6 address.
Patch adds sin6_scope_id and changes convert/copy functions to use it
(formally also comparator functions should be changed, but it seems to
cause more harm and it is not really needed).
This makes corosync work with link-local addresses fine for both UDPU
and Knet transport as long as interface specification is used (so
fe80::xxxx:xxxx:xxxx:xxxx%eth0).",Thanks @jfriesse,True,{}
corosync/corosync,https://github.com/corosync/corosync,532,2020-02-14T08:55:29Z,2020-02-17T16:32:39Z,2020-04-22T11:36:53Z,CLOSED,False,8,10,3,https://github.com/jfriesse,Add support for sin6_scope_id,2,[],https://github.com/corosync/corosync/pull/532,https://github.com/jfriesse,11,https://github.com/corosync/corosync/pull/532#issuecomment-617723392,"sin6_scope_id was not present in totemip structure making impossible to use link-local ipv6 address.
Patch adds sin6_scope_id and changes convert/copy functions to use it
(formally also comparator functions should be changed, but it seems to
cause more harm and it is not really needed).
This makes corosync work with link-local addresses fine for both UDPU
and Knet transport as long as interface specification is used (so
fe80::xxxx:xxxx:xxxx:xxxx%eth0).",Patch reverted by cd6cc90 and 1777d99 (65d66ae and c245e97 in needle). Now we have to find best way how to make link local ipv6 work without breaking compatibility.,True,{}
corosync/corosync,https://github.com/corosync/corosync,533,2020-02-17T14:20:42Z,2020-02-17T16:52:35Z,2020-02-17T16:52:35Z,CLOSED,False,10,4,3,https://github.com/liangxin1300,[needle] totemip: Add support for sin6_scope_id,1,[],https://github.com/corosync/corosync/pull/533,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/533,Backport from #532 for needle branch,Backport from #532 for needle branch,True,{}
corosync/corosync,https://github.com/corosync/corosync,533,2020-02-17T14:20:42Z,2020-02-17T16:52:35Z,2020-02-17T16:52:35Z,CLOSED,False,10,4,3,https://github.com/liangxin1300,[needle] totemip: Add support for sin6_scope_id,1,[],https://github.com/corosync/corosync/pull/533,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/533#issuecomment-587016091,Backport from #532 for needle branch,Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,533,2020-02-17T14:20:42Z,2020-02-17T16:52:35Z,2020-02-17T16:52:35Z,CLOSED,False,10,4,3,https://github.com/liangxin1300,[needle] totemip: Add support for sin6_scope_id,1,[],https://github.com/corosync/corosync/pull/533,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/533#issuecomment-587081692,Backport from #532 for needle branch,"@liangxin1300 Thank you for the backport, it saved me quite a time!
ACK and merged as a 02a760f.
Regards,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,535,2020-02-20T05:45:17Z,2020-02-21T14:51:19Z,2020-02-21T14:51:19Z,CLOSED,False,3,0,1,https://github.com/liangxin1300,totemip: continue when sin6_scope_id not equal with interface_num,1,[],https://github.com/corosync/corosync/pull/535,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/535,"When user configure a specific interface like vlan with the same IPv6 link-local address,
corosync should compare sin6_scope_id with interface_num, to make sure got the right intrface to bind
For example:
I want corosync use vlan0 interface
nodelist {
        node {
                ring0_addr: fe80::5054:ff:fe2f:f32%vlan0
                nodeid: 1
        }

        node {
                ring0_addr: fe80::5054:ff:fe68:4e97%vlan0
                nodeid: 2
        }

}

ip a output on second node
2: enp1s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 52:54:00:68:4e:97 brd ff:ff:ff:ff:ff:ff
    inet 192.168.122.145/24 brd 192.168.122.255 scope global enp1s0
       valid_lft forever preferred_lft forever
    inet6 fe80::5054:ff:fe68:4e97/64 scope link 
       valid_lft forever preferred_lft forever
4: vlan0@enp1s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000
    link/ether 52:54:00:68:4e:97 brd ff:ff:ff:ff:ff:ff
    inet6 fe80::5054:ff:fe68:4e97/64 scope link 
       valid_lft forever preferred_lft forever

But corosync will always bind enp1s0","When user configure a specific interface like vlan with the same IPv6 link-local address,
corosync should compare sin6_scope_id with interface_num, to make sure got the right intrface to bind
For example:
I want corosync use vlan0 interface
nodelist {
        node {
                ring0_addr: fe80::5054:ff:fe2f:f32%vlan0
                nodeid: 1
        }

        node {
                ring0_addr: fe80::5054:ff:fe68:4e97%vlan0
                nodeid: 2
        }

}

ip a output on second node
2: enp1s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 52:54:00:68:4e:97 brd ff:ff:ff:ff:ff:ff
    inet 192.168.122.145/24 brd 192.168.122.255 scope global enp1s0
       valid_lft forever preferred_lft forever
    inet6 fe80::5054:ff:fe68:4e97/64 scope link 
       valid_lft forever preferred_lft forever
4: vlan0@enp1s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000
    link/ether 52:54:00:68:4e:97 brd ff:ff:ff:ff:ff:ff
    inet6 fe80::5054:ff:fe68:4e97/64 scope link 
       valid_lft forever preferred_lft forever

But corosync will always bind enp1s0",True,{}
corosync/corosync,https://github.com/corosync/corosync,535,2020-02-20T05:45:17Z,2020-02-21T14:51:19Z,2020-02-21T14:51:19Z,CLOSED,False,3,0,1,https://github.com/liangxin1300,totemip: continue when sin6_scope_id not equal with interface_num,1,[],https://github.com/corosync/corosync/pull/535,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/535#issuecomment-588620841,"When user configure a specific interface like vlan with the same IPv6 link-local address,
corosync should compare sin6_scope_id with interface_num, to make sure got the right intrface to bind
For example:
I want corosync use vlan0 interface
nodelist {
        node {
                ring0_addr: fe80::5054:ff:fe2f:f32%vlan0
                nodeid: 1
        }

        node {
                ring0_addr: fe80::5054:ff:fe68:4e97%vlan0
                nodeid: 2
        }

}

ip a output on second node
2: enp1s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 52:54:00:68:4e:97 brd ff:ff:ff:ff:ff:ff
    inet 192.168.122.145/24 brd 192.168.122.255 scope global enp1s0
       valid_lft forever preferred_lft forever
    inet6 fe80::5054:ff:fe68:4e97/64 scope link 
       valid_lft forever preferred_lft forever
4: vlan0@enp1s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000
    link/ether 52:54:00:68:4e:97 brd ff:ff:ff:ff:ff:ff
    inet6 fe80::5054:ff:fe68:4e97/64 scope link 
       valid_lft forever preferred_lft forever

But corosync will always bind enp1s0",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,535,2020-02-20T05:45:17Z,2020-02-21T14:51:19Z,2020-02-21T14:51:19Z,CLOSED,False,3,0,1,https://github.com/liangxin1300,totemip: continue when sin6_scope_id not equal with interface_num,1,[],https://github.com/corosync/corosync/pull/535,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/535#issuecomment-588745116,"When user configure a specific interface like vlan with the same IPv6 link-local address,
corosync should compare sin6_scope_id with interface_num, to make sure got the right intrface to bind
For example:
I want corosync use vlan0 interface
nodelist {
        node {
                ring0_addr: fe80::5054:ff:fe2f:f32%vlan0
                nodeid: 1
        }

        node {
                ring0_addr: fe80::5054:ff:fe68:4e97%vlan0
                nodeid: 2
        }

}

ip a output on second node
2: enp1s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 52:54:00:68:4e:97 brd ff:ff:ff:ff:ff:ff
    inet 192.168.122.145/24 brd 192.168.122.255 scope global enp1s0
       valid_lft forever preferred_lft forever
    inet6 fe80::5054:ff:fe68:4e97/64 scope link 
       valid_lft forever preferred_lft forever
4: vlan0@enp1s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000
    link/ether 52:54:00:68:4e:97 brd ff:ff:ff:ff:ff:ff
    inet6 fe80::5054:ff:fe68:4e97/64 scope link 
       valid_lft forever preferred_lft forever

But corosync will always bind enp1s0","@liangxin1300 Hi, I have few questions before merging, because patch looks just fine. But

are you sure that sin6_scope_id will always be 0 if iface is not specified? Couldn't there be a case when sin6_scope_id is 0 even if it is specified? And now I'm not talking about Linux only, I'm talking about some standard where it is defined that ""real interface never has cope id 0"".
How exactly vlan0 differs from enp1s0 for your use-case? It has same mac (not that important) and IP (important) so no matter where corosync is bound, packet will be send and received by same interface, isn't it? Or other way around, are you sure that enp1s0 should have address at all?",True,{}
corosync/corosync,https://github.com/corosync/corosync,535,2020-02-20T05:45:17Z,2020-02-21T14:51:19Z,2020-02-21T14:51:19Z,CLOSED,False,3,0,1,https://github.com/liangxin1300,totemip: continue when sin6_scope_id not equal with interface_num,1,[],https://github.com/corosync/corosync/pull/535,https://github.com/liangxin1300,4,https://github.com/corosync/corosync/pull/535#issuecomment-588805997,"When user configure a specific interface like vlan with the same IPv6 link-local address,
corosync should compare sin6_scope_id with interface_num, to make sure got the right intrface to bind
For example:
I want corosync use vlan0 interface
nodelist {
        node {
                ring0_addr: fe80::5054:ff:fe2f:f32%vlan0
                nodeid: 1
        }

        node {
                ring0_addr: fe80::5054:ff:fe68:4e97%vlan0
                nodeid: 2
        }

}

ip a output on second node
2: enp1s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 52:54:00:68:4e:97 brd ff:ff:ff:ff:ff:ff
    inet 192.168.122.145/24 brd 192.168.122.255 scope global enp1s0
       valid_lft forever preferred_lft forever
    inet6 fe80::5054:ff:fe68:4e97/64 scope link 
       valid_lft forever preferred_lft forever
4: vlan0@enp1s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000
    link/ether 52:54:00:68:4e:97 brd ff:ff:ff:ff:ff:ff
    inet6 fe80::5054:ff:fe68:4e97/64 scope link 
       valid_lft forever preferred_lft forever

But corosync will always bind enp1s0","Hi @jfriesse,


are you sure that sin6_scope_id will always be 0 if iface is not specified? Couldn't there be a case when sin6_scope_id is 0 even if it is specified? And now I'm not talking about Linux only, I'm talking about some standard where it is defined that ""real interface never has cope id 0"".


I've tested in my own vm node, when the iface is not specified, sin6_scope_id is 0;
If the iface is configured, since it's index starts with 1, sin6_scope_id could not be 0.
Above observation/testing based on openSUSE, I suggest we merge it firstly since at least it suitable for linux:)


How exactly vlan0 differs from enp1s0 for your use-case? It has same mac and IP so no matter where corosync is bound, packet will be send and received by same interface, isn't it? Or other way around, are you sure that enp1s0 should have address at all?


This is from one of our customers' requirement, that is exactly what customer wants to configure",True,{}
corosync/corosync,https://github.com/corosync/corosync,535,2020-02-20T05:45:17Z,2020-02-21T14:51:19Z,2020-02-21T14:51:19Z,CLOSED,False,3,0,1,https://github.com/liangxin1300,totemip: continue when sin6_scope_id not equal with interface_num,1,[],https://github.com/corosync/corosync/pull/535,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/535#issuecomment-588921602,"When user configure a specific interface like vlan with the same IPv6 link-local address,
corosync should compare sin6_scope_id with interface_num, to make sure got the right intrface to bind
For example:
I want corosync use vlan0 interface
nodelist {
        node {
                ring0_addr: fe80::5054:ff:fe2f:f32%vlan0
                nodeid: 1
        }

        node {
                ring0_addr: fe80::5054:ff:fe68:4e97%vlan0
                nodeid: 2
        }

}

ip a output on second node
2: enp1s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 52:54:00:68:4e:97 brd ff:ff:ff:ff:ff:ff
    inet 192.168.122.145/24 brd 192.168.122.255 scope global enp1s0
       valid_lft forever preferred_lft forever
    inet6 fe80::5054:ff:fe68:4e97/64 scope link 
       valid_lft forever preferred_lft forever
4: vlan0@enp1s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000
    link/ether 52:54:00:68:4e:97 brd ff:ff:ff:ff:ff:ff
    inet6 fe80::5054:ff:fe68:4e97/64 scope link 
       valid_lft forever preferred_lft forever

But corosync will always bind enp1s0","Hi @jfriesse,


are you sure that sin6_scope_id will always be 0 if iface is not specified? Couldn't there be a case when sin6_scope_id is 0 even if it is specified? And now I'm not talking about Linux only, I'm talking about some standard where it is defined that ""real interface never has cope id 0"".


I've tested in my own vm node, when the iface is not specified, sin6_scope_id is 0;

Indeed

If the iface is configured, since it's index starts with 1, sin6_scope_id could not be 0.

Even for lo?

Above observation/testing based on openSUSE, I suggest we merge it firstly since at least it suitable for linux:)

It is probably suitable for Linux, but would you mind to give it a try on (at least) FreeBSD? I know OpenBSD behavior is different for sure, but we don't target there.



How exactly vlan0 differs from enp1s0 for your use-case? It has same mac and IP so no matter where corosync is bound, packet will be send and received by same interface, isn't it? Or other way around, are you sure that enp1s0 should have address at all?


This is from one of our customers' requirement, that is exactly what customer wants to configure

Ok, but do you think that config is correct?",True,{}
corosync/corosync,https://github.com/corosync/corosync,535,2020-02-20T05:45:17Z,2020-02-21T14:51:19Z,2020-02-21T14:51:19Z,CLOSED,False,3,0,1,https://github.com/liangxin1300,totemip: continue when sin6_scope_id not equal with interface_num,1,[],https://github.com/corosync/corosync/pull/535,https://github.com/liangxin1300,6,https://github.com/corosync/corosync/pull/535#issuecomment-588998945,"When user configure a specific interface like vlan with the same IPv6 link-local address,
corosync should compare sin6_scope_id with interface_num, to make sure got the right intrface to bind
For example:
I want corosync use vlan0 interface
nodelist {
        node {
                ring0_addr: fe80::5054:ff:fe2f:f32%vlan0
                nodeid: 1
        }

        node {
                ring0_addr: fe80::5054:ff:fe68:4e97%vlan0
                nodeid: 2
        }

}

ip a output on second node
2: enp1s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 52:54:00:68:4e:97 brd ff:ff:ff:ff:ff:ff
    inet 192.168.122.145/24 brd 192.168.122.255 scope global enp1s0
       valid_lft forever preferred_lft forever
    inet6 fe80::5054:ff:fe68:4e97/64 scope link 
       valid_lft forever preferred_lft forever
4: vlan0@enp1s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000
    link/ether 52:54:00:68:4e:97 brd ff:ff:ff:ff:ff:ff
    inet6 fe80::5054:ff:fe68:4e97/64 scope link 
       valid_lft forever preferred_lft forever

But corosync will always bind enp1s0","If the iface is configured, since it's index starts with 1, sin6_scope_id could not be 0.

Even for lo?

Yes, index of lo is 1, I use if_nametoindex function to verify that


Above observation/testing based on openSUSE, I suggest we merge it firstly since at least it suitable for linux:)

It is probably suitable for Linux, but would you mind to give it a try on (at least) FreeBSD? I know OpenBSD behavior is different for sure, but we don't target there.

I don't have free/openBSD in my hand, but I can search some pages
in free bsd if_nametoindex man page, there is
unsigned int	if_index;  /* 1, 2, ... */




How exactly vlan0 differs from enp1s0 for your use-case? It has same mac and IP so no matter where corosync is bound, packet will be send and received by same interface, isn't it? Or other way around, are you sure that enp1s0 should have address at all?


This is from one of our customers' requirement, that is exactly what customer wants to configure

Ok, but do you think that config is correct?

Honestly I don't know the whole story,
just grab some info from internet:)
In https://blog.ipspace.net/2017/07/ipv6-link-local-addresses-and-vlan.html:

A VLAN interface could (theoretically) reuse a MAC address of a physical interface
it looks like some vendors decided to move in the opposite direction: they use the same IPv6 LLA on all IPv6 interfaces present in a network device. Yet again, that shouldn’t be a problem (after all, LLA are supposed to be unique only within a single L2 domain)

And in https://mailarchive.ietf.org/arch/msg/v6ops/Ez2L2J7UMlTEWkHcAWLe2OIRFc4:

The one type of datapoint i seem to vaguely remember is that routers with large number of ""cheap"" L3 interfaces often derive their MAC utilization designs from L2 switches where you do not automatically assign a separate MAC address to every port because thats a cost factor, and instead there is just a limited number of MAC addresses assigned to the box (i think i remember '8' from some cisco products) and once those are exhausted, additional L3 interfaces repeat the MAC addresses. And of course if the link-local addresses are derived from interfaces MAC addresses then we have the problem in question.

And in https://mailarchive.ietf.org/arch/msg/v6ops/U35aGeUjwu4RQArdtgLN_zDEgJk
customer shared the same link-local address on multiple interfaces",True,{}
corosync/corosync,https://github.com/corosync/corosync,535,2020-02-20T05:45:17Z,2020-02-21T14:51:19Z,2020-02-21T14:51:19Z,CLOSED,False,3,0,1,https://github.com/liangxin1300,totemip: continue when sin6_scope_id not equal with interface_num,1,[],https://github.com/corosync/corosync/pull/535,https://github.com/jfriesse,7,https://github.com/corosync/corosync/pull/535#issuecomment-589685894,"When user configure a specific interface like vlan with the same IPv6 link-local address,
corosync should compare sin6_scope_id with interface_num, to make sure got the right intrface to bind
For example:
I want corosync use vlan0 interface
nodelist {
        node {
                ring0_addr: fe80::5054:ff:fe2f:f32%vlan0
                nodeid: 1
        }

        node {
                ring0_addr: fe80::5054:ff:fe68:4e97%vlan0
                nodeid: 2
        }

}

ip a output on second node
2: enp1s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 52:54:00:68:4e:97 brd ff:ff:ff:ff:ff:ff
    inet 192.168.122.145/24 brd 192.168.122.255 scope global enp1s0
       valid_lft forever preferred_lft forever
    inet6 fe80::5054:ff:fe68:4e97/64 scope link 
       valid_lft forever preferred_lft forever
4: vlan0@enp1s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000
    link/ether 52:54:00:68:4e:97 brd ff:ff:ff:ff:ff:ff
    inet6 fe80::5054:ff:fe68:4e97/64 scope link 
       valid_lft forever preferred_lft forever

But corosync will always bind enp1s0","@liangxin1300 Yep, you are right. if_nametoindex is guaranteed to return non-zero value on success and 0 on failure so it is safe to expect sin6_scope_id is not going to be 0 on Linux systems. At least OpenBSD is using different mechanism and sin_scope_id will be 0 no matter if interface specification is used, but OpenBSD is using different mechanism to handle this situation. FreeBSD seems to behave same way as Linux in newer versions and like OpenBSD in older versions. No matter what, patch is reasonably safe and helps some specific configuration so ACK and merged as a efd34df.
Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,536,2020-02-20T05:47:05Z,2020-02-21T14:52:05Z,2020-02-21T14:52:05Z,CLOSED,False,3,0,1,https://github.com/liangxin1300,[needle] totemip: continue when sin6_scope_id not equal with interface_num,1,[],https://github.com/corosync/corosync/pull/536,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/536,backport from #535,backport from #535,True,{}
corosync/corosync,https://github.com/corosync/corosync,536,2020-02-20T05:47:05Z,2020-02-21T14:52:05Z,2020-02-21T14:52:05Z,CLOSED,False,3,0,1,https://github.com/liangxin1300,[needle] totemip: continue when sin6_scope_id not equal with interface_num,1,[],https://github.com/corosync/corosync/pull/536,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/536#issuecomment-588621271,backport from #535,Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,536,2020-02-20T05:47:05Z,2020-02-21T14:52:05Z,2020-02-21T14:52:05Z,CLOSED,False,3,0,1,https://github.com/liangxin1300,[needle] totemip: continue when sin6_scope_id not equal with interface_num,1,[],https://github.com/corosync/corosync/pull/536,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/536#issuecomment-589686205,backport from #535,"Similarly as for master, ACK and merged as a 23b21ba",True,{}
corosync/corosync,https://github.com/corosync/corosync,537,2020-02-21T09:30:00Z,2020-02-24T12:30:29Z,2020-02-24T12:30:34Z,CLOSED,False,13,0,2,https://github.com/chrissie-c,stats: Add basic schedule-miss stats to needle,1,[],https://github.com/corosync/corosync/pull/537,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/537,In master we have a much more comprehensive system for recording schedule misses because it has a 'stats' map. This is much more basic and just writes the last event into cmap. You can still query and track the value though.,In master we have a much more comprehensive system for recording schedule misses because it has a 'stats' map. This is much more basic and just writes the last event into cmap. You can still query and track the value though.,True,{}
corosync/corosync,https://github.com/corosync/corosync,537,2020-02-21T09:30:00Z,2020-02-24T12:30:29Z,2020-02-24T12:30:34Z,CLOSED,False,13,0,2,https://github.com/chrissie-c,stats: Add basic schedule-miss stats to needle,1,[],https://github.com/corosync/corosync/pull/537,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/537#issuecomment-590297345,In master we have a much more comprehensive system for recording schedule misses because it has a 'stats' map. This is much more basic and just writes the last event into cmap. You can still query and track the value though.,"@chrissie-c Thank you for the ""backport"", ACK and merged as a 274fda3",True,{}
corosync/corosync,https://github.com/corosync/corosync,538,2020-02-24T14:02:04Z,2020-02-27T07:48:59Z,2020-02-27T07:49:03Z,CLOSED,False,6,3,1,https://github.com/jfriesse,main: Add schedmiss timestamp into message,1,[],https://github.com/corosync/corosync/pull/538,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/538,"This is useful for matching schedmiss event in stats map with logged
event.
Signed-off-by: Jan Friesse jfriesse@redhat.com","This is useful for matching schedmiss event in stats map with logged
event.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,538,2020-02-24T14:02:04Z,2020-02-27T07:48:59Z,2020-02-27T07:49:03Z,CLOSED,False,6,3,1,https://github.com/jfriesse,main: Add schedmiss timestamp into message,1,[],https://github.com/corosync/corosync/pull/538,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/538#issuecomment-590333605,"This is useful for matching schedmiss event in stats map with logged
event.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Same patch needs to go also for needle, but it should be simple cherry-pick.",True,{}
corosync/corosync,https://github.com/corosync/corosync,538,2020-02-24T14:02:04Z,2020-02-27T07:48:59Z,2020-02-27T07:49:03Z,CLOSED,False,6,3,1,https://github.com/jfriesse,main: Add schedmiss timestamp into message,1,[],https://github.com/corosync/corosync/pull/538,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/538#issuecomment-591422013,"This is useful for matching schedmiss event in stats map with logged
event.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@knet-ci-bot retest this please,True,{}
corosync/corosync,https://github.com/corosync/corosync,538,2020-02-24T14:02:04Z,2020-02-27T07:48:59Z,2020-02-27T07:49:03Z,CLOSED,False,6,3,1,https://github.com/jfriesse,main: Add schedmiss timestamp into message,1,[],https://github.com/corosync/corosync/pull/538,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/538#issuecomment-591830853,"This is useful for matching schedmiss event in stats map with logged
event.
Signed-off-by: Jan Friesse jfriesse@redhat.com","@chrissie-c Thank you for the review. I've merged patch as a 35662dd for master and backported version (no change, but cherry pick was unable to handle difference between needle and master... ""good"" old patch was able to) as a 3166a87",True,{}
corosync/corosync,https://github.com/corosync/corosync,539,2020-02-25T14:19:50Z,2020-02-27T07:49:41Z,2020-02-27T07:49:47Z,CLOSED,False,3,3,1,https://github.com/jfriesse,man: Enhance link_mode priority description,1,[],https://github.com/corosync/corosync/pull/539,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/539,"Some users found description of priority for passive link_mode
confusing (probably because ""priority"" word is too
overloaded) so add some redundancy to make description
unambiguous.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Some users found description of priority for passive link_mode
confusing (probably because ""priority"" word is too
overloaded) so add some redundancy to make description
unambiguous.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,539,2020-02-25T14:19:50Z,2020-02-27T07:49:41Z,2020-02-27T07:49:47Z,CLOSED,False,3,3,1,https://github.com/jfriesse,man: Enhance link_mode priority description,1,[],https://github.com/corosync/corosync/pull/539,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/539#issuecomment-590891112,"Some users found description of priority for passive link_mode
confusing (probably because ""priority"" word is too
overloaded) so add some redundancy to make description
unambiguous.
Signed-off-by: Jan Friesse jfriesse@redhat.com",Link to discussion 0a323ff.,True,{}
corosync/corosync,https://github.com/corosync/corosync,539,2020-02-25T14:19:50Z,2020-02-27T07:49:41Z,2020-02-27T07:49:47Z,CLOSED,False,3,3,1,https://github.com/jfriesse,man: Enhance link_mode priority description,1,[],https://github.com/corosync/corosync/pull/539,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/539#issuecomment-591421856,"Some users found description of priority for passive link_mode
confusing (probably because ""priority"" word is too
overloaded) so add some redundancy to make description
unambiguous.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@knet-ci-bot retest this please,True,{}
corosync/corosync,https://github.com/corosync/corosync,539,2020-02-25T14:19:50Z,2020-02-27T07:49:41Z,2020-02-27T07:49:47Z,CLOSED,False,3,3,1,https://github.com/jfriesse,man: Enhance link_mode priority description,1,[],https://github.com/corosync/corosync/pull/539,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/539#issuecomment-591831082,"Some users found description of priority for passive link_mode
confusing (probably because ""priority"" word is too
overloaded) so add some redundancy to make description
unambiguous.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c Thank you for the review and ACK. I've merged patch as a d9eaab7,True,{}
corosync/corosync,https://github.com/corosync/corosync,540,2020-03-03T14:21:44Z,2020-03-04T14:19:59Z,2020-03-04T14:20:04Z,CLOSED,False,16,2,1,https://github.com/jfriesse,cfgtool: Simplify output a bit for link status,1,[],https://github.com/corosync/corosync/pull/540,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/540,"Display words connected/disconnected instead of 1/0 and show enabled
status only when link is not enabled (shouldn't happen).
Signed-off-by: Jan Friesse jfriesse@redhat.com","Display words connected/disconnected instead of 1/0 and show enabled
status only when link is not enabled (shouldn't happen).
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,540,2020-03-03T14:21:44Z,2020-03-04T14:19:59Z,2020-03-04T14:20:04Z,CLOSED,False,16,2,1,https://github.com/jfriesse,cfgtool: Simplify output a bit for link status,1,[],https://github.com/corosync/corosync/pull/540,https://github.com/chrissie-c,2,https://github.com/corosync/corosync/pull/540#issuecomment-594445571,"Display words connected/disconnected instead of 1/0 and show enabled
status only when link is not enabled (shouldn't happen).
Signed-off-by: Jan Friesse jfriesse@redhat.com",Looks good to me.,True,{}
corosync/corosync,https://github.com/corosync/corosync,540,2020-03-03T14:21:44Z,2020-03-04T14:19:59Z,2020-03-04T14:20:04Z,CLOSED,False,16,2,1,https://github.com/jfriesse,cfgtool: Simplify output a bit for link status,1,[],https://github.com/corosync/corosync/pull/540,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/540#issuecomment-594550577,"Display words connected/disconnected instead of 1/0 and show enabled
status only when link is not enabled (shouldn't happen).
Signed-off-by: Jan Friesse jfriesse@redhat.com",Thank you for the review and ACK! I've merged patch as a 15c25a2.,True,{}
corosync/corosync,https://github.com/corosync/corosync,541,2020-03-04T14:22:44Z,2020-03-13T08:08:40Z,2020-03-13T08:21:20Z,CLOSED,False,9,4,2,https://github.com/jfriesse,Quorum set expected,2,[],https://github.com/corosync/corosync/pull/541,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/541,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,541,2020-03-04T14:22:44Z,2020-03-13T08:08:40Z,2020-03-13T08:21:20Z,CLOSED,False,9,4,2,https://github.com/jfriesse,Quorum set expected,2,[],https://github.com/corosync/corosync/pull/541,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/541#issuecomment-594553313,,"Exit quorumtool when expected votes parameter is invalid
Change expected_votes validity check (IMHO makes much more sense now)",True,{}
corosync/corosync,https://github.com/corosync/corosync,541,2020-03-04T14:22:44Z,2020-03-13T08:08:40Z,2020-03-13T08:21:20Z,CLOSED,False,9,4,2,https://github.com/jfriesse,Quorum set expected,2,[],https://github.com/corosync/corosync/pull/541,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/541#issuecomment-598600527,,@chrissie-c Thank you for the review. I've merged the patch as 5f54346 for master and a3ed5af for needle.,True,{}
corosync/corosync,https://github.com/corosync/corosync,542,2020-03-10T17:11:14Z,2020-03-24T13:14:44Z,2020-03-24T13:14:47Z,CLOSED,False,4,2,1,https://github.com/jfriesse,votequorum: set wfa status only on startup,1,[],https://github.com/corosync/corosync/pull/542,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/542,"Previously reload of configuration with enabled wait_for_all result in
set of wait_for_all_status which set cluster_is_quorate to 0 but didn't
inform the quorum service so votequorum and quorum information may get
out of sync.
Example is 1 node cluster, which is extended to 3 nodes. Quorum service
reports cluster as a quorate (incorrect) and votequorum as not-quorate
(correct). Similar behavior happens when extending cluster in general,
but some configurations are less incorrect (3->4).
Discussed solution was to inform quorum service but that would mean
every reload would cause loss of quorum until all nodes would be seen
again.
Such behaviour is consistent but seems to be a bit too strict.
Proposed solution sets wait_for_all_status only on startup and
doesn't touch it during reload.
This solution fulfills requirement of ""cluster will be quorate for
the first time only after all nodes have been visible at least
once at the same time."" because node clears wait_for_all_status only
after it sees all other nodes or joins cluster which is quorate. It also
solves problem with extending cluster, because when cluster becomes
unquorate (1->3) wait_for_all_status is set.
Added assert is only for ensure that I haven't missed any case when
quorate cluster may become unquorate.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Previously reload of configuration with enabled wait_for_all result in
set of wait_for_all_status which set cluster_is_quorate to 0 but didn't
inform the quorum service so votequorum and quorum information may get
out of sync.
Example is 1 node cluster, which is extended to 3 nodes. Quorum service
reports cluster as a quorate (incorrect) and votequorum as not-quorate
(correct). Similar behavior happens when extending cluster in general,
but some configurations are less incorrect (3->4).
Discussed solution was to inform quorum service but that would mean
every reload would cause loss of quorum until all nodes would be seen
again.
Such behaviour is consistent but seems to be a bit too strict.
Proposed solution sets wait_for_all_status only on startup and
doesn't touch it during reload.
This solution fulfills requirement of ""cluster will be quorate for
the first time only after all nodes have been visible at least
once at the same time."" because node clears wait_for_all_status only
after it sees all other nodes or joins cluster which is quorate. It also
solves problem with extending cluster, because when cluster becomes
unquorate (1->3) wait_for_all_status is set.
Added assert is only for ensure that I haven't missed any case when
quorate cluster may become unquorate.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,542,2020-03-10T17:11:14Z,2020-03-24T13:14:44Z,2020-03-24T13:14:47Z,CLOSED,False,4,2,1,https://github.com/jfriesse,votequorum: set wfa status only on startup,1,[],https://github.com/corosync/corosync/pull/542,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/542#issuecomment-597207397,"Previously reload of configuration with enabled wait_for_all result in
set of wait_for_all_status which set cluster_is_quorate to 0 but didn't
inform the quorum service so votequorum and quorum information may get
out of sync.
Example is 1 node cluster, which is extended to 3 nodes. Quorum service
reports cluster as a quorate (incorrect) and votequorum as not-quorate
(correct). Similar behavior happens when extending cluster in general,
but some configurations are less incorrect (3->4).
Discussed solution was to inform quorum service but that would mean
every reload would cause loss of quorum until all nodes would be seen
again.
Such behaviour is consistent but seems to be a bit too strict.
Proposed solution sets wait_for_all_status only on startup and
doesn't touch it during reload.
This solution fulfills requirement of ""cluster will be quorate for
the first time only after all nodes have been visible at least
once at the same time."" because node clears wait_for_all_status only
after it sees all other nodes or joins cluster which is quorate. It also
solves problem with extending cluster, because when cluster becomes
unquorate (1->3) wait_for_all_status is set.
Added assert is only for ensure that I haven't missed any case when
quorate cluster may become unquorate.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Just some examples I've tested:

1->3 - both vq and quorum service reported same status (unquorate)
3 nodes configured, 2 running, config extended to 6 nodes -> both vq and quorum service reported same status (unquorate)
3 nodes configured, 3 running, config extended to 6 nodes -> both vq and quorum service reported same status (unquorate)
3 nodes configured, 3 running, config extended to 4 nodes -> both vq and quorum service reported same status (quorate)
3 nodes configured, 3 running, 1 rebooted without ability to contact other nodes after reboot -> both vq and quorum service report quorate status for 2 survive nodes, rebooted node reports unquorate for both services",True,{}
corosync/corosync,https://github.com/corosync/corosync,542,2020-03-10T17:11:14Z,2020-03-24T13:14:44Z,2020-03-24T13:14:47Z,CLOSED,False,4,2,1,https://github.com/jfriesse,votequorum: set wfa status only on startup,1,[],https://github.com/corosync/corosync/pull/542,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/542#issuecomment-603231223,"Previously reload of configuration with enabled wait_for_all result in
set of wait_for_all_status which set cluster_is_quorate to 0 but didn't
inform the quorum service so votequorum and quorum information may get
out of sync.
Example is 1 node cluster, which is extended to 3 nodes. Quorum service
reports cluster as a quorate (incorrect) and votequorum as not-quorate
(correct). Similar behavior happens when extending cluster in general,
but some configurations are less incorrect (3->4).
Discussed solution was to inform quorum service but that would mean
every reload would cause loss of quorum until all nodes would be seen
again.
Such behaviour is consistent but seems to be a bit too strict.
Proposed solution sets wait_for_all_status only on startup and
doesn't touch it during reload.
This solution fulfills requirement of ""cluster will be quorate for
the first time only after all nodes have been visible at least
once at the same time."" because node clears wait_for_all_status only
after it sees all other nodes or joins cluster which is quorate. It also
solves problem with extending cluster, because when cluster becomes
unquorate (1->3) wait_for_all_status is set.
Added assert is only for ensure that I haven't missed any case when
quorate cluster may become unquorate.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c Thank you for the review! I've merged patch as a ca320be (master) and 6894792 (needle).,True,{}
corosync/corosync,https://github.com/corosync/corosync,543,2020-03-12T16:28:08Z,2020-03-13T07:56:42Z,2020-03-13T07:56:43Z,CLOSED,False,2,1,1,https://github.com/liangxin1300,[needle] qdevice: Change log level to LOG_NOTICE if heuristics result is PASS,1,[],https://github.com/corosync/corosync/pull/543,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/543,"Hi,
I found a RED color message in systemctl status when heuristics result became PASS, I think that shouldn't be an error message","Hi,
I found a RED color message in systemctl status when heuristics result became PASS, I think that shouldn't be an error message",True,{}
corosync/corosync,https://github.com/corosync/corosync,543,2020-03-12T16:28:08Z,2020-03-13T07:56:42Z,2020-03-13T07:56:43Z,CLOSED,False,2,1,1,https://github.com/liangxin1300,[needle] qdevice: Change log level to LOG_NOTICE if heuristics result is PASS,1,[],https://github.com/corosync/corosync/pull/543,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/543#issuecomment-598283189,"Hi,
I found a RED color message in systemctl status when heuristics result became PASS, I think that shouldn't be an error message",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,543,2020-03-12T16:28:08Z,2020-03-13T07:56:42Z,2020-03-13T07:56:43Z,CLOSED,False,2,1,1,https://github.com/liangxin1300,[needle] qdevice: Change log level to LOG_NOTICE if heuristics result is PASS,1,[],https://github.com/corosync/corosync/pull/543,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/543#issuecomment-598596600,"Hi,
I found a RED color message in systemctl status when heuristics result became PASS, I think that shouldn't be an error message","@liangxin1300 Thank you for backport patch, ACK and merged as a 6780439",True,{}
corosync/corosync,https://github.com/corosync/corosync,544,2020-03-13T10:08:06Z,2020-03-20T10:54:47Z,2020-03-20T10:55:15Z,CLOSED,False,1,0,1,https://github.com/liangxin1300,[needle] qnetd: Assign last_regular_heuristics when membership change,1,[],https://github.com/corosync/corosync/pull/544,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/544,"Hi,
When using heuristics with mode on, I found when corosync-qdevice up, regular status is Undefined, that value will changed until heuristics result change.
I thought that will make sense if we got regular status from beginning, after all, Undefined might confuse user.
In this way, status of regular will also changed when membership change,
I think it's fine, cause I think regular might be a super-set concept of sync
What do you think @jfriesse","Hi,
When using heuristics with mode on, I found when corosync-qdevice up, regular status is Undefined, that value will changed until heuristics result change.
I thought that will make sense if we got regular status from beginning, after all, Undefined might confuse user.
In this way, status of regular will also changed when membership change,
I think it's fine, cause I think regular might be a super-set concept of sync
What do you think @jfriesse",True,{}
corosync/corosync,https://github.com/corosync/corosync,544,2020-03-13T10:08:06Z,2020-03-20T10:54:47Z,2020-03-20T10:55:15Z,CLOSED,False,1,0,1,https://github.com/liangxin1300,[needle] qnetd: Assign last_regular_heuristics when membership change,1,[],https://github.com/corosync/corosync/pull/544,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/544#issuecomment-598646510,"Hi,
When using heuristics with mode on, I found when corosync-qdevice up, regular status is Undefined, that value will changed until heuristics result change.
I thought that will make sense if we got regular status from beginning, after all, Undefined might confuse user.
In this way, status of regular will also changed when membership change,
I think it's fine, cause I think regular might be a super-set concept of sync
What do you think @jfriesse",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,544,2020-03-13T10:08:06Z,2020-03-20T10:54:47Z,2020-03-20T10:55:15Z,CLOSED,False,1,0,1,https://github.com/liangxin1300,[needle] qnetd: Assign last_regular_heuristics when membership change,1,[],https://github.com/corosync/corosync/pull/544,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/544#issuecomment-601639919,"Hi,
When using heuristics with mode on, I found when corosync-qdevice up, regular status is Undefined, that value will changed until heuristics result change.
I thought that will make sense if we got regular status from beginning, after all, Undefined might confuse user.
In this way, status of regular will also changed when membership change,
I think it's fine, cause I think regular might be a super-set concept of sync
What do you think @jfriesse",Discussed for corosync/corosync-qdevice#9 so closing this PR as well for now.,True,{}
corosync/corosync,https://github.com/corosync/corosync,546,2020-03-26T01:46:48Z,2020-03-31T16:00:22Z,2020-03-31T16:00:22Z,CLOSED,False,35,2,1,https://github.com/HideoYamauchi,Low: tools: Correct return code of corosync-cfgtools -s.,3,[],https://github.com/corosync/corosync/pull/546,https://github.com/HideoYamauchi,1,https://github.com/corosync/corosync/pull/546,"Hi All,
This fix causes the value of the execution result of corosync-cfgtool to return 0 or 1 from the interface status.
Returns 1 if any of the cluster members are not ""localhost"" or ""connected"".
[root@rh80-test01 ~]# corosync-cfgtool -s 
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      localhost
                nodeid  2:      disconnected
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      localhost
                nodeid  2:      disconnected
[root@rh80-test01 ~]# echo $?
1
[root@rh80-test01 ~]# corosync-cfgtool -s -b
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status  = n1
LINK ID 1
        addr    = 192.168.107.155
        status  = n1
[root@rh80-test01 ~]# echo $?
1

Returns 0 if the cluster members are only ""localhost"" or ""connected"".
[root@rh80-test01 ~]# corosync-cfgtool -s 
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      localhost
                nodeid  2:      connected
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      localhost
                nodeid  2:      connected
[root@rh80-test01 ~]# echo $?
0
[root@rh80-test01 ~]# corosync-cfgtool -s -b
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status  = n3
LINK ID 1
        addr    = 192.168.107.155
        status  = n3
[root@rh80-test01 ~]# echo $?
0


Best Regards,
Hideo Yamauchi.","Hi All,
This fix causes the value of the execution result of corosync-cfgtool to return 0 or 1 from the interface status.
Returns 1 if any of the cluster members are not ""localhost"" or ""connected"".
[root@rh80-test01 ~]# corosync-cfgtool -s 
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      localhost
                nodeid  2:      disconnected
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      localhost
                nodeid  2:      disconnected
[root@rh80-test01 ~]# echo $?
1
[root@rh80-test01 ~]# corosync-cfgtool -s -b
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status  = n1
LINK ID 1
        addr    = 192.168.107.155
        status  = n1
[root@rh80-test01 ~]# echo $?
1

Returns 0 if the cluster members are only ""localhost"" or ""connected"".
[root@rh80-test01 ~]# corosync-cfgtool -s 
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      localhost
                nodeid  2:      connected
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      localhost
                nodeid  2:      connected
[root@rh80-test01 ~]# echo $?
0
[root@rh80-test01 ~]# corosync-cfgtool -s -b
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status  = n3
LINK ID 1
        addr    = 192.168.107.155
        status  = n3
[root@rh80-test01 ~]# echo $?
0


Best Regards,
Hideo Yamauchi.",True,{}
corosync/corosync,https://github.com/corosync/corosync,546,2020-03-26T01:46:48Z,2020-03-31T16:00:22Z,2020-03-31T16:00:22Z,CLOSED,False,35,2,1,https://github.com/HideoYamauchi,Low: tools: Correct return code of corosync-cfgtools -s.,3,[],https://github.com/corosync/corosync/pull/546,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/546#issuecomment-604180522,"Hi All,
This fix causes the value of the execution result of corosync-cfgtool to return 0 or 1 from the interface status.
Returns 1 if any of the cluster members are not ""localhost"" or ""connected"".
[root@rh80-test01 ~]# corosync-cfgtool -s 
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      localhost
                nodeid  2:      disconnected
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      localhost
                nodeid  2:      disconnected
[root@rh80-test01 ~]# echo $?
1
[root@rh80-test01 ~]# corosync-cfgtool -s -b
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status  = n1
LINK ID 1
        addr    = 192.168.107.155
        status  = n1
[root@rh80-test01 ~]# echo $?
1

Returns 0 if the cluster members are only ""localhost"" or ""connected"".
[root@rh80-test01 ~]# corosync-cfgtool -s 
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      localhost
                nodeid  2:      connected
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      localhost
                nodeid  2:      connected
[root@rh80-test01 ~]# echo $?
0
[root@rh80-test01 ~]# corosync-cfgtool -s -b
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status  = n3
LINK ID 1
        addr    = 192.168.107.155
        status  = n3
[root@rh80-test01 ~]# echo $?
0


Best Regards,
Hideo Yamauchi.",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,546,2020-03-26T01:46:48Z,2020-03-31T16:00:22Z,2020-03-31T16:00:22Z,CLOSED,False,35,2,1,https://github.com/HideoYamauchi,Low: tools: Correct return code of corosync-cfgtools -s.,3,[],https://github.com/corosync/corosync/pull/546,https://github.com/HideoYamauchi,3,https://github.com/corosync/corosync/pull/546#issuecomment-604682797,"Hi All,
This fix causes the value of the execution result of corosync-cfgtool to return 0 or 1 from the interface status.
Returns 1 if any of the cluster members are not ""localhost"" or ""connected"".
[root@rh80-test01 ~]# corosync-cfgtool -s 
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      localhost
                nodeid  2:      disconnected
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      localhost
                nodeid  2:      disconnected
[root@rh80-test01 ~]# echo $?
1
[root@rh80-test01 ~]# corosync-cfgtool -s -b
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status  = n1
LINK ID 1
        addr    = 192.168.107.155
        status  = n1
[root@rh80-test01 ~]# echo $?
1

Returns 0 if the cluster members are only ""localhost"" or ""connected"".
[root@rh80-test01 ~]# corosync-cfgtool -s 
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      localhost
                nodeid  2:      connected
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      localhost
                nodeid  2:      connected
[root@rh80-test01 ~]# echo $?
0
[root@rh80-test01 ~]# corosync-cfgtool -s -b
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status  = n3
LINK ID 1
        addr    = 192.168.107.155
        status  = n3
[root@rh80-test01 ~]# echo $?
0


Best Regards,
Hideo Yamauchi.","Hi Jan,
Sorry...
It was completely missing.
What about this fix?
Best Regards,
HIdeo Yamauchi.",True,{}
corosync/corosync,https://github.com/corosync/corosync,546,2020-03-26T01:46:48Z,2020-03-31T16:00:22Z,2020-03-31T16:00:22Z,CLOSED,False,35,2,1,https://github.com/HideoYamauchi,Low: tools: Correct return code of corosync-cfgtools -s.,3,[],https://github.com/corosync/corosync/pull/546,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/546#issuecomment-604946618,"Hi All,
This fix causes the value of the execution result of corosync-cfgtool to return 0 or 1 from the interface status.
Returns 1 if any of the cluster members are not ""localhost"" or ""connected"".
[root@rh80-test01 ~]# corosync-cfgtool -s 
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      localhost
                nodeid  2:      disconnected
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      localhost
                nodeid  2:      disconnected
[root@rh80-test01 ~]# echo $?
1
[root@rh80-test01 ~]# corosync-cfgtool -s -b
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status  = n1
LINK ID 1
        addr    = 192.168.107.155
        status  = n1
[root@rh80-test01 ~]# echo $?
1

Returns 0 if the cluster members are only ""localhost"" or ""connected"".
[root@rh80-test01 ~]# corosync-cfgtool -s 
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      localhost
                nodeid  2:      connected
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      localhost
                nodeid  2:      connected
[root@rh80-test01 ~]# echo $?
0
[root@rh80-test01 ~]# corosync-cfgtool -s -b
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status  = n3
LINK ID 1
        addr    = 192.168.107.155
        status  = n3
[root@rh80-test01 ~]# echo $?
0


Best Regards,
Hideo Yamauchi.",@knet-ci-bot add to whitelist,True,{}
corosync/corosync,https://github.com/corosync/corosync,546,2020-03-26T01:46:48Z,2020-03-31T16:00:22Z,2020-03-31T16:00:22Z,CLOSED,False,35,2,1,https://github.com/HideoYamauchi,Low: tools: Correct return code of corosync-cfgtools -s.,3,[],https://github.com/corosync/corosync/pull/546,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/546#issuecomment-604948768,"Hi All,
This fix causes the value of the execution result of corosync-cfgtool to return 0 or 1 from the interface status.
Returns 1 if any of the cluster members are not ""localhost"" or ""connected"".
[root@rh80-test01 ~]# corosync-cfgtool -s 
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      localhost
                nodeid  2:      disconnected
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      localhost
                nodeid  2:      disconnected
[root@rh80-test01 ~]# echo $?
1
[root@rh80-test01 ~]# corosync-cfgtool -s -b
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status  = n1
LINK ID 1
        addr    = 192.168.107.155
        status  = n1
[root@rh80-test01 ~]# echo $?
1

Returns 0 if the cluster members are only ""localhost"" or ""connected"".
[root@rh80-test01 ~]# corosync-cfgtool -s 
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      localhost
                nodeid  2:      connected
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      localhost
                nodeid  2:      connected
[root@rh80-test01 ~]# echo $?
0
[root@rh80-test01 ~]# corosync-cfgtool -s -b
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status  = n3
LINK ID 1
        addr    = 192.168.107.155
        status  = n3
[root@rh80-test01 ~]# echo $?
0


Best Regards,
Hideo Yamauchi.","@HideoYamauchi Quite like it. It is different solution than I've expected, but yeah, it works and at the and of the day, it makes code a bit more readable. Let's wait for CI to test it and if there is no problem I will merge it on Monday next week.",True,{}
corosync/corosync,https://github.com/corosync/corosync,546,2020-03-26T01:46:48Z,2020-03-31T16:00:22Z,2020-03-31T16:00:22Z,CLOSED,False,35,2,1,https://github.com/HideoYamauchi,Low: tools: Correct return code of corosync-cfgtools -s.,3,[],https://github.com/corosync/corosync/pull/546,https://github.com/HideoYamauchi,6,https://github.com/corosync/corosync/pull/546#issuecomment-605213665,"Hi All,
This fix causes the value of the execution result of corosync-cfgtool to return 0 or 1 from the interface status.
Returns 1 if any of the cluster members are not ""localhost"" or ""connected"".
[root@rh80-test01 ~]# corosync-cfgtool -s 
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      localhost
                nodeid  2:      disconnected
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      localhost
                nodeid  2:      disconnected
[root@rh80-test01 ~]# echo $?
1
[root@rh80-test01 ~]# corosync-cfgtool -s -b
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status  = n1
LINK ID 1
        addr    = 192.168.107.155
        status  = n1
[root@rh80-test01 ~]# echo $?
1

Returns 0 if the cluster members are only ""localhost"" or ""connected"".
[root@rh80-test01 ~]# corosync-cfgtool -s 
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      localhost
                nodeid  2:      connected
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      localhost
                nodeid  2:      connected
[root@rh80-test01 ~]# echo $?
0
[root@rh80-test01 ~]# corosync-cfgtool -s -b
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status  = n3
LINK ID 1
        addr    = 192.168.107.155
        status  = n3
[root@rh80-test01 ~]# echo $?
0


Best Regards,
Hideo Yamauchi.","Hi Jan,

@HideoYamauchi Quite like it. It is different solution than I've expected, but yeah, it works and at the and of the day, it makes code a bit more readable. Let's wait for CI to test it and if there is no problem I will merge it on Monday next week.

Okay!
Thanks,
Hideo Yamauchi.",True,{}
corosync/corosync,https://github.com/corosync/corosync,546,2020-03-26T01:46:48Z,2020-03-31T16:00:22Z,2020-03-31T16:00:22Z,CLOSED,False,35,2,1,https://github.com/HideoYamauchi,Low: tools: Correct return code of corosync-cfgtools -s.,3,[],https://github.com/corosync/corosync/pull/546,https://github.com/jfriesse,7,https://github.com/corosync/corosync/pull/546#issuecomment-606091948,"Hi All,
This fix causes the value of the execution result of corosync-cfgtool to return 0 or 1 from the interface status.
Returns 1 if any of the cluster members are not ""localhost"" or ""connected"".
[root@rh80-test01 ~]# corosync-cfgtool -s 
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      localhost
                nodeid  2:      disconnected
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      localhost
                nodeid  2:      disconnected
[root@rh80-test01 ~]# echo $?
1
[root@rh80-test01 ~]# corosync-cfgtool -s -b
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status  = n1
LINK ID 1
        addr    = 192.168.107.155
        status  = n1
[root@rh80-test01 ~]# echo $?
1

Returns 0 if the cluster members are only ""localhost"" or ""connected"".
[root@rh80-test01 ~]# corosync-cfgtool -s 
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      localhost
                nodeid  2:      connected
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      localhost
                nodeid  2:      connected
[root@rh80-test01 ~]# echo $?
0
[root@rh80-test01 ~]# corosync-cfgtool -s -b
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status  = n3
LINK ID 1
        addr    = 192.168.107.155
        status  = n3
[root@rh80-test01 ~]# echo $?
0


Best Regards,
Hideo Yamauchi.","@HideoYamauchi Thank you again for the patch. I've squashed the three patches into one and merged it as a 0d0febb .
Regards,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,546,2020-03-26T01:46:48Z,2020-03-31T16:00:22Z,2020-03-31T16:00:22Z,CLOSED,False,35,2,1,https://github.com/HideoYamauchi,Low: tools: Correct return code of corosync-cfgtools -s.,3,[],https://github.com/corosync/corosync/pull/546,https://github.com/HideoYamauchi,8,https://github.com/corosync/corosync/pull/546#issuecomment-606250435,"Hi All,
This fix causes the value of the execution result of corosync-cfgtool to return 0 or 1 from the interface status.
Returns 1 if any of the cluster members are not ""localhost"" or ""connected"".
[root@rh80-test01 ~]# corosync-cfgtool -s 
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      localhost
                nodeid  2:      disconnected
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      localhost
                nodeid  2:      disconnected
[root@rh80-test01 ~]# echo $?
1
[root@rh80-test01 ~]# corosync-cfgtool -s -b
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status  = n1
LINK ID 1
        addr    = 192.168.107.155
        status  = n1
[root@rh80-test01 ~]# echo $?
1

Returns 0 if the cluster members are only ""localhost"" or ""connected"".
[root@rh80-test01 ~]# corosync-cfgtool -s 
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      localhost
                nodeid  2:      connected
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      localhost
                nodeid  2:      connected
[root@rh80-test01 ~]# echo $?
0
[root@rh80-test01 ~]# corosync-cfgtool -s -b
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status  = n3
LINK ID 1
        addr    = 192.168.107.155
        status  = n3
[root@rh80-test01 ~]# echo $?
0


Best Regards,
Hideo Yamauchi.","Hi Jan,
All right!
thanks!
Hideo Yamauchi.",True,{}
corosync/corosync,https://github.com/corosync/corosync,546,2020-03-26T01:46:48Z,2020-03-31T16:00:22Z,2020-03-31T16:00:22Z,CLOSED,False,35,2,1,https://github.com/HideoYamauchi,Low: tools: Correct return code of corosync-cfgtools -s.,3,[],https://github.com/corosync/corosync/pull/546,https://github.com/jfriesse,9,https://github.com/corosync/corosync/pull/546#issuecomment-606719566,"Hi All,
This fix causes the value of the execution result of corosync-cfgtool to return 0 or 1 from the interface status.
Returns 1 if any of the cluster members are not ""localhost"" or ""connected"".
[root@rh80-test01 ~]# corosync-cfgtool -s 
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      localhost
                nodeid  2:      disconnected
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      localhost
                nodeid  2:      disconnected
[root@rh80-test01 ~]# echo $?
1
[root@rh80-test01 ~]# corosync-cfgtool -s -b
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status  = n1
LINK ID 1
        addr    = 192.168.107.155
        status  = n1
[root@rh80-test01 ~]# echo $?
1

Returns 0 if the cluster members are only ""localhost"" or ""connected"".
[root@rh80-test01 ~]# corosync-cfgtool -s 
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status:
                nodeid  1:      localhost
                nodeid  2:      connected
LINK ID 1
        addr    = 192.168.107.155
        status:
                nodeid  1:      localhost
                nodeid  2:      connected
[root@rh80-test01 ~]# echo $?
0
[root@rh80-test01 ~]# corosync-cfgtool -s -b
Printing link status.
Local node ID 1
LINK ID 0
        addr    = 192.168.106.155
        status  = n3
LINK ID 1
        addr    = 192.168.107.155
        status  = n3
[root@rh80-test01 ~]# echo $?
0


Best Regards,
Hideo Yamauchi.","Forgot to close the PR so closing now :)
Anyway, thanks again for the patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,547,2020-03-26T08:30:47Z,2020-04-24T14:29:48Z,2020-04-24T14:29:48Z,CLOSED,False,370,255,9,https://github.com/chrissie-c,config: Reorganise the config system to be more reliable & maintainable,12,[],https://github.com/corosync/corosync/pull/547,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/547,"The basic plan here is to fix reloads to be more stable
using read/parse/verify/build/commit stages, so that any errors
will not leave corosync in an unstable state. This should
also make the code more maintainable as currently the verify/commit
stages are horribly intertwined.
This code works for me, but will need a LOT of checking and testing before pulling.","The basic plan here is to fix reloads to be more stable
using read/parse/verify/build/commit stages, so that any errors
will not leave corosync in an unstable state. This should
also make the code more maintainable as currently the verify/commit
stages are horribly intertwined.
This code works for me, but will need a LOT of checking and testing before pulling.",True,{}
corosync/corosync,https://github.com/corosync/corosync,547,2020-03-26T08:30:47Z,2020-04-24T14:29:48Z,2020-04-24T14:29:48Z,CLOSED,False,370,255,9,https://github.com/chrissie-c,config: Reorganise the config system to be more reliable & maintainable,12,[],https://github.com/corosync/corosync/pull/547,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/547#issuecomment-604440567,"The basic plan here is to fix reloads to be more stable
using read/parse/verify/build/commit stages, so that any errors
will not leave corosync in an unstable state. This should
also make the code more maintainable as currently the verify/commit
stages are horribly intertwined.
This code works for me, but will need a LOT of checking and testing before pulling.",@knet-ci-bot retest this please,True,{}
corosync/corosync,https://github.com/corosync/corosync,547,2020-03-26T08:30:47Z,2020-04-24T14:29:48Z,2020-04-24T14:29:48Z,CLOSED,False,370,255,9,https://github.com/chrissie-c,config: Reorganise the config system to be more reliable & maintainable,12,[],https://github.com/corosync/corosync/pull/547,https://github.com/chrissie-c,3,https://github.com/corosync/corosync/pull/547#issuecomment-605919854,"The basic plan here is to fix reloads to be more stable
using read/parse/verify/build/commit stages, so that any errors
will not leave corosync in an unstable state. This should
also make the code more maintainable as currently the verify/commit
stages are horribly intertwined.
This code works for me, but will need a LOT of checking and testing before pulling.",retest this please,True,{}
corosync/corosync,https://github.com/corosync/corosync,547,2020-03-26T08:30:47Z,2020-04-24T14:29:48Z,2020-04-24T14:29:48Z,CLOSED,False,370,255,9,https://github.com/chrissie-c,config: Reorganise the config system to be more reliable & maintainable,12,[],https://github.com/corosync/corosync/pull/547,https://github.com/chrissie-c,4,https://github.com/corosync/corosync/pull/547#issuecomment-608482497,"The basic plan here is to fix reloads to be more stable
using read/parse/verify/build/commit stages, so that any errors
will not leave corosync in an unstable state. This should
also make the code more maintainable as currently the verify/commit
stages are horribly intertwined.
This code works for me, but will need a LOT of checking and testing before pulling.",This is getting near now. There is a very rare crash in totem_volatile_config_set_string_value() that needs to be found though. I'm not even sure that's a new bug :),True,{}
corosync/corosync,https://github.com/corosync/corosync,547,2020-03-26T08:30:47Z,2020-04-24T14:29:48Z,2020-04-24T14:29:48Z,CLOSED,False,370,255,9,https://github.com/chrissie-c,config: Reorganise the config system to be more reliable & maintainable,12,[],https://github.com/corosync/corosync/pull/547,https://github.com/chrissie-c,5,https://github.com/corosync/corosync/pull/547#issuecomment-610791807,"The basic plan here is to fix reloads to be more stable
using read/parse/verify/build/commit stages, so that any errors
will not leave corosync in an unstable state. This should
also make the code more maintainable as currently the verify/commit
stages are horribly intertwined.
This code works for me, but will need a LOT of checking and testing before pulling.",Thanks for checking that Honza. I think the best thing to do is have char arrays in totemconfig - we will also need to do that for the crypto_ values too as they will become mutable once we get that functionality into knet so it makes sense to have a general solution.,True,{}
corosync/corosync,https://github.com/corosync/corosync,547,2020-03-26T08:30:47Z,2020-04-24T14:29:48Z,2020-04-24T14:29:48Z,CLOSED,False,370,255,9,https://github.com/chrissie-c,config: Reorganise the config system to be more reliable & maintainable,12,[],https://github.com/corosync/corosync/pull/547,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/547#issuecomment-611474471,"The basic plan here is to fix reloads to be more stable
using read/parse/verify/build/commit stages, so that any errors
will not leave corosync in an unstable state. This should
also make the code more maintainable as currently the verify/commit
stages are horribly intertwined.
This code works for me, but will need a LOT of checking and testing before pulling.","@chrissie-c Not sure if you are on it, but last patch adds some problems detected by coverity. Otherwise it looks good.",True,{}
corosync/corosync,https://github.com/corosync/corosync,547,2020-03-26T08:30:47Z,2020-04-24T14:29:48Z,2020-04-24T14:29:48Z,CLOSED,False,370,255,9,https://github.com/chrissie-c,config: Reorganise the config system to be more reliable & maintainable,12,[],https://github.com/corosync/corosync/pull/547,https://github.com/jfriesse,7,https://github.com/corosync/corosync/pull/547#issuecomment-619045714,"The basic plan here is to fix reloads to be more stable
using read/parse/verify/build/commit stages, so that any errors
will not leave corosync in an unstable state. This should
also make the code more maintainable as currently the verify/commit
stages are horribly intertwined.
This code works for me, but will need a LOT of checking and testing before pulling.","3.0.4 is out so I've squashed a patches a bit (like coverity found warnings into previous one, ...) and merged the PR as a f8b6308. Let's see how it will work.
@chrissie-c Nice work, and thanks again.",True,{}
corosync/corosync,https://github.com/corosync/corosync,548,2020-03-26T10:30:13Z,2020-03-26T13:46:27Z,2020-03-26T13:46:27Z,CLOSED,False,3,1,1,https://github.com/chrissie-c,icmap: icmap_init_r() leaks if qb_trie_create() fails,1,[],https://github.com/corosync/corosync/pull/548,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/548,Thanks to Coverity for finding this,Thanks to Coverity for finding this,True,{}
corosync/corosync,https://github.com/corosync/corosync,548,2020-03-26T10:30:13Z,2020-03-26T13:46:27Z,2020-03-26T13:46:27Z,CLOSED,False,3,1,1,https://github.com/chrissie-c,icmap: icmap_init_r() leaks if qb_trie_create() fails,1,[],https://github.com/corosync/corosync/pull/548,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/548#issuecomment-604440090,Thanks to Coverity for finding this,"Good catch (wondering why coverity hasn't caught it before), so ACK and merged as a c631951  and 0b7b7fd
Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,551,2020-05-18T12:36:04Z,2020-05-18T12:56:31Z,2020-05-18T12:56:31Z,CLOSED,False,1,1,1,https://github.com/chrissie-c,test: Fix cpgtest to cope with the correct max number of group members,1,[],https://github.com/corosync/corosync/pull/551,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/551,cpgtest would crash when trying to connect 128 instances. This is why,cpgtest would crash when trying to connect 128 instances. This is why,True,{}
corosync/corosync,https://github.com/corosync/corosync,551,2020-05-18T12:36:04Z,2020-05-18T12:56:31Z,2020-05-18T12:56:31Z,CLOSED,False,1,1,1,https://github.com/chrissie-c,test: Fix cpgtest to cope with the correct max number of group members,1,[],https://github.com/corosync/corosync/pull/551,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/551#issuecomment-630164578,cpgtest would crash when trying to connect 128 instances. This is why,"@chrissie-c Nice catch and patch so ACK and merged as a 05023ee (and 958ea8f for needle).
Thank you!",True,{}
corosync/corosync,https://github.com/corosync/corosync,555,2020-06-05T12:58:52Z,2020-06-05T12:59:37Z,2020-08-11T07:52:02Z,CLOSED,False,11561,2674,255,https://github.com/jfriesse,Schedmiss fix,205,[],https://github.com/corosync/corosync/pull/555,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/555,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,555,2020-06-05T12:58:52Z,2020-06-05T12:59:37Z,2020-08-11T07:52:02Z,CLOSED,False,11561,2674,255,https://github.com/jfriesse,Schedmiss fix,205,[],https://github.com/corosync/corosync/pull/555,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/555#issuecomment-639464941,,Wrong baseline. Closing.,True,{}
corosync/corosync,https://github.com/corosync/corosync,556,2020-06-05T13:00:03Z,2020-08-11T07:51:56Z,2020-08-11T07:52:01Z,CLOSED,False,8,6,2,https://github.com/jfriesse,main: Make schedmiss in cmap and log equal,1,[],https://github.com/corosync/corosync/pull/556,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/556,"Second call of qb_util_nano_from_epoch_get may differ a bit. Solution is
to use previously stored timestamp (similarly as in master branch).
Also fix man page to follow similar style as other keys.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Second call of qb_util_nano_from_epoch_get may differ a bit. Solution is
to use previously stored timestamp (similarly as in master branch).
Also fix man page to follow similar style as other keys.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,556,2020-06-05T13:00:03Z,2020-08-11T07:51:56Z,2020-08-11T07:52:01Z,CLOSED,False,8,6,2,https://github.com/jfriesse,main: Make schedmiss in cmap and log equal,1,[],https://github.com/corosync/corosync/pull/556,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/556#issuecomment-671789314,"Second call of qb_util_nano_from_epoch_get may differ a bit. Solution is
to use previously stored timestamp (similarly as in master branch).
Also fix man page to follow similar style as other keys.
Signed-off-by: Jan Friesse jfriesse@redhat.com","This was merged as a 44c1c8e quite some time ago, so closing it now :)",True,{}
corosync/corosync,https://github.com/corosync/corosync,557,2020-06-09T02:36:44Z,,2020-06-09T02:42:50Z,OPEN,False,1,3,1,https://github.com/liangxin1300,[needle] man: corosync.conf: provider should inside the paragraph,1,[],https://github.com/corosync/corosync/pull/557,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/557,"Following the consistent style of this man page, I think it will be better to put provider inside the paragraph","Following the consistent style of this man page, I think it will be better to put provider inside the paragraph",True,{}
corosync/corosync,https://github.com/corosync/corosync,557,2020-06-09T02:36:44Z,,2020-06-09T02:42:50Z,OPEN,False,1,3,1,https://github.com/liangxin1300,[needle] man: corosync.conf: provider should inside the paragraph,1,[],https://github.com/corosync/corosync/pull/557,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/557#issuecomment-640992954,"Following the consistent style of this man page, I think it will be better to put provider inside the paragraph",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,558,2020-06-09T02:38:37Z,,2021-12-27T05:19:09Z,OPEN,False,1,3,1,https://github.com/liangxin1300,man: corosync.conf: provider should inside the paragraph,1,[],https://github.com/corosync/corosync/pull/558,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/558,"Following the consistent style of this man page, I think it will be better to put provider inside the paragraph","Following the consistent style of this man page, I think it will be better to put provider inside the paragraph",True,{}
corosync/corosync,https://github.com/corosync/corosync,558,2020-06-09T02:38:37Z,,2021-12-27T05:19:09Z,OPEN,False,1,3,1,https://github.com/liangxin1300,man: corosync.conf: provider should inside the paragraph,1,[],https://github.com/corosync/corosync/pull/558,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/558#issuecomment-640993462,"Following the consistent style of this man page, I think it will be better to put provider inside the paragraph",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,558,2020-06-09T02:38:37Z,,2021-12-27T05:19:09Z,OPEN,False,1,3,1,https://github.com/liangxin1300,man: corosync.conf: provider should inside the paragraph,1,[],https://github.com/corosync/corosync/pull/558,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/558#issuecomment-641080953,"Following the consistent style of this man page, I think it will be better to put provider inside the paragraph","@liangxin1300 Hi and thank you for the patch. I can agree current formatting style is not optimal, but sadly patch makes it less consistent. All sections (and subsections) are marked as bold and directives inside section is marked with .TP. provider is just an directive so it should be .TP, not .B. Corosync.conf man page itself describes only one directive (provider) and other directives are described in votequorum.5 man page (what is ok because they are votequorum specific). Another example of section with only one directive is resources.
So I would be happy to make more evident that provider is directive, but we have to find some other way. (basically break the sentence)",True,{}
corosync/corosync,https://github.com/corosync/corosync,558,2020-06-09T02:38:37Z,,2021-12-27T05:19:09Z,OPEN,False,1,3,1,https://github.com/liangxin1300,man: corosync.conf: provider should inside the paragraph,1,[],https://github.com/corosync/corosync/pull/558,https://github.com/chrissie-c,4,https://github.com/corosync/corosync/pull/558#issuecomment-641768162,"Following the consistent style of this man page, I think it will be better to put provider inside the paragraph",I think we'd need to rewrite that part to have a section for quorum and a subsection for provider. It might be more verbose but maybe more consistent with both line-ends and meanings.,True,{}
corosync/corosync,https://github.com/corosync/corosync,558,2020-06-09T02:38:37Z,,2021-12-27T05:19:09Z,OPEN,False,1,3,1,https://github.com/liangxin1300,man: corosync.conf: provider should inside the paragraph,1,[],https://github.com/corosync/corosync/pull/558,https://github.com/liangxin1300,5,https://github.com/corosync/corosync/pull/558#issuecomment-641818625,"Following the consistent style of this man page, I think it will be better to put provider inside the paragraph",Thanks for clarifying these!,True,{}
corosync/corosync,https://github.com/corosync/corosync,560,2020-06-22T21:19:40Z,2020-07-09T00:33:14Z,2020-07-09T00:33:14Z,CLOSED,False,52,1,1,https://github.com/aleksei-burlakov,totemsrp: add versioning to the message_header,1,[],https://github.com/corosync/corosync/pull/560,https://github.com/aleksei-burlakov,1,https://github.com/corosync/corosync/pull/560,"The patch is incomplete. Feedback is required.
The 934c47e changes the totem_ip_address structure that is incapsulated in the message structures:

        orf_token
        mcast
        memb_merge_detect
        memb_join
        memb_commit_token_memb_entry
        token_hold_cancel


Thus when another node has an unmodified totem_ip_address structure,
when communicating, it corrupts the messages that eventually may break
down the cluster. This situation has occurred during a rolling upgrade from
corosync-2.3.6 to 2.4.5.
In this patch, I added the previously defined cs_version_t structure into
the messahe_header structure. The cs_version_t is not used yet, but it
enables using it in future. (Frontporting?)
Also the flag MESSAGE_TYPE_HEADER_HAS_VERSION is added
in the message_header->type field. The flag indicates that the message_header
structure has the version field.
Now, in the function main_deliver_fn, that is an entry point of the
incoming messages, it checks if the flag MESSAGE_TYPE_HEADER_HAS_VERSION
is set. If it's set, it means the opposite node has the same version
and the message is passed through as it. If the flag is not set,
it means the message is of the older type, then it unpacks the message to
one of the aforementioned (orf_token, mcast,...).
TODO:

Implement packing the messages back to the older type when sending them to the node with the older corosync version.
Do the same for RRP.","The patch is incomplete. Feedback is required.
The 934c47e changes the totem_ip_address structure that is incapsulated in the message structures:

        orf_token
        mcast
        memb_merge_detect
        memb_join
        memb_commit_token_memb_entry
        token_hold_cancel


Thus when another node has an unmodified totem_ip_address structure,
when communicating, it corrupts the messages that eventually may break
down the cluster. This situation has occurred during a rolling upgrade from
corosync-2.3.6 to 2.4.5.
In this patch, I added the previously defined cs_version_t structure into
the messahe_header structure. The cs_version_t is not used yet, but it
enables using it in future. (Frontporting?)
Also the flag MESSAGE_TYPE_HEADER_HAS_VERSION is added
in the message_header->type field. The flag indicates that the message_header
structure has the version field.
Now, in the function main_deliver_fn, that is an entry point of the
incoming messages, it checks if the flag MESSAGE_TYPE_HEADER_HAS_VERSION
is set. If it's set, it means the opposite node has the same version
and the message is passed through as it. If the flag is not set,
it means the message is of the older type, then it unpacks the message to
one of the aforementioned (orf_token, mcast,...).
TODO:

Implement packing the messages back to the older type when sending them to the node with the older corosync version.
Do the same for RRP.",True,{}
corosync/corosync,https://github.com/corosync/corosync,560,2020-06-22T21:19:40Z,2020-07-09T00:33:14Z,2020-07-09T00:33:14Z,CLOSED,False,52,1,1,https://github.com/aleksei-burlakov,totemsrp: add versioning to the message_header,1,[],https://github.com/corosync/corosync/pull/560,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/560#issuecomment-647774873,"The patch is incomplete. Feedback is required.
The 934c47e changes the totem_ip_address structure that is incapsulated in the message structures:

        orf_token
        mcast
        memb_merge_detect
        memb_join
        memb_commit_token_memb_entry
        token_hold_cancel


Thus when another node has an unmodified totem_ip_address structure,
when communicating, it corrupts the messages that eventually may break
down the cluster. This situation has occurred during a rolling upgrade from
corosync-2.3.6 to 2.4.5.
In this patch, I added the previously defined cs_version_t structure into
the messahe_header structure. The cs_version_t is not used yet, but it
enables using it in future. (Frontporting?)
Also the flag MESSAGE_TYPE_HEADER_HAS_VERSION is added
in the message_header->type field. The flag indicates that the message_header
structure has the version field.
Now, in the function main_deliver_fn, that is an entry point of the
incoming messages, it checks if the flag MESSAGE_TYPE_HEADER_HAS_VERSION
is set. If it's set, it means the opposite node has the same version
and the message is passed through as it. If the flag is not set,
it means the message is of the older type, then it unpacks the message to
one of the aforementioned (orf_token, mcast,...).
TODO:

Implement packing the messages back to the older type when sending them to the node with the older corosync version.
Do the same for RRP.",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,560,2020-06-22T21:19:40Z,2020-07-09T00:33:14Z,2020-07-09T00:33:14Z,CLOSED,False,52,1,1,https://github.com/aleksei-burlakov,totemsrp: add versioning to the message_header,1,[],https://github.com/corosync/corosync/pull/560,https://github.com/aleksei-burlakov,3,https://github.com/corosync/corosync/pull/560#issuecomment-647776782,"The patch is incomplete. Feedback is required.
The 934c47e changes the totem_ip_address structure that is incapsulated in the message structures:

        orf_token
        mcast
        memb_merge_detect
        memb_join
        memb_commit_token_memb_entry
        token_hold_cancel


Thus when another node has an unmodified totem_ip_address structure,
when communicating, it corrupts the messages that eventually may break
down the cluster. This situation has occurred during a rolling upgrade from
corosync-2.3.6 to 2.4.5.
In this patch, I added the previously defined cs_version_t structure into
the messahe_header structure. The cs_version_t is not used yet, but it
enables using it in future. (Frontporting?)
Also the flag MESSAGE_TYPE_HEADER_HAS_VERSION is added
in the message_header->type field. The flag indicates that the message_header
structure has the version field.
Now, in the function main_deliver_fn, that is an entry point of the
incoming messages, it checks if the flag MESSAGE_TYPE_HEADER_HAS_VERSION
is set. If it's set, it means the opposite node has the same version
and the message is passed through as it. If the flag is not set,
it means the message is of the older type, then it unpacks the message to
one of the aforementioned (orf_token, mcast,...).
TODO:

Implement packing the messages back to the older type when sending them to the node with the older corosync version.
Do the same for RRP.","@gao-yan, @liangxin1300, @jfriesse please give feedback.",True,{}
corosync/corosync,https://github.com/corosync/corosync,560,2020-06-22T21:19:40Z,2020-07-09T00:33:14Z,2020-07-09T00:33:14Z,CLOSED,False,52,1,1,https://github.com/aleksei-burlakov,totemsrp: add versioning to the message_header,1,[],https://github.com/corosync/corosync/pull/560,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/560#issuecomment-647953463,"The patch is incomplete. Feedback is required.
The 934c47e changes the totem_ip_address structure that is incapsulated in the message structures:

        orf_token
        mcast
        memb_merge_detect
        memb_join
        memb_commit_token_memb_entry
        token_hold_cancel


Thus when another node has an unmodified totem_ip_address structure,
when communicating, it corrupts the messages that eventually may break
down the cluster. This situation has occurred during a rolling upgrade from
corosync-2.3.6 to 2.4.5.
In this patch, I added the previously defined cs_version_t structure into
the messahe_header structure. The cs_version_t is not used yet, but it
enables using it in future. (Frontporting?)
Also the flag MESSAGE_TYPE_HEADER_HAS_VERSION is added
in the message_header->type field. The flag indicates that the message_header
structure has the version field.
Now, in the function main_deliver_fn, that is an entry point of the
incoming messages, it checks if the flag MESSAGE_TYPE_HEADER_HAS_VERSION
is set. If it's set, it means the opposite node has the same version
and the message is passed through as it. If the flag is not set,
it means the message is of the older type, then it unpacks the message to
one of the aforementioned (orf_token, mcast,...).
TODO:

Implement packing the messages back to the older type when sending them to the node with the older corosync version.
Do the same for RRP.","@aleksei-burlakov Thank you for the patch.
The change you are referring was reverted in both master (cd6cc90) and needle (65d66ae) and no officially released tarball contained that change so rolling upgrade from 2.3.6 to 2.4.5 shouldn't be affected by this change (2.4.5 hasn't included the sin6 patch and 2.4.6 is not released yet). If there is really some problem with rolling upgrade from 2.3.6 to 2.4.5 then it has to be something else.
I like the idea you've made into the patch (compatible structure + converting old structure into new one), but keep in mind needle is really in maintenance mode so the question is, if it really make sense to put too much effort into ""dead"" version (I'm intending to maintain it for few more years, but mainly for smaller changes fixing really important (= world will explode if not fixed) bugs). And as you may noticed, camelback (= master for now) doesn't have this problem (totem_ip_address is not sent on wire).
Also the point 1 in TODO section may look easy, but it is actually not. You will (probably, maybe you find a better way) need to keep version of packet for each node to find out which structure (new vs old) is needed to sent.
All and all, seems for me like huge amount of work just to support scope_id which (IMHO) is nice to have, but if we don't have it, it is easy to workaround.
You may also consider using different way. the sin6_scope_id is actually used only for few functions so it is really not needed to be sent on-wire, so having two structures for totem_ip_address and doing converts only locally (= before send convert to old structure) may/should also work.
Anyway, I've told you my view of the problem. If you like to continue on the patch, please do so and I will be happy to review/merge, but question is, how worth it is.",True,{}
corosync/corosync,https://github.com/corosync/corosync,560,2020-06-22T21:19:40Z,2020-07-09T00:33:14Z,2020-07-09T00:33:14Z,CLOSED,False,52,1,1,https://github.com/aleksei-burlakov,totemsrp: add versioning to the message_header,1,[],https://github.com/corosync/corosync/pull/560,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/560#issuecomment-647966143,"The patch is incomplete. Feedback is required.
The 934c47e changes the totem_ip_address structure that is incapsulated in the message structures:

        orf_token
        mcast
        memb_merge_detect
        memb_join
        memb_commit_token_memb_entry
        token_hold_cancel


Thus when another node has an unmodified totem_ip_address structure,
when communicating, it corrupts the messages that eventually may break
down the cluster. This situation has occurred during a rolling upgrade from
corosync-2.3.6 to 2.4.5.
In this patch, I added the previously defined cs_version_t structure into
the messahe_header structure. The cs_version_t is not used yet, but it
enables using it in future. (Frontporting?)
Also the flag MESSAGE_TYPE_HEADER_HAS_VERSION is added
in the message_header->type field. The flag indicates that the message_header
structure has the version field.
Now, in the function main_deliver_fn, that is an entry point of the
incoming messages, it checks if the flag MESSAGE_TYPE_HEADER_HAS_VERSION
is set. If it's set, it means the opposite node has the same version
and the message is passed through as it. If the flag is not set,
it means the message is of the older type, then it unpacks the message to
one of the aforementioned (orf_token, mcast,...).
TODO:

Implement packing the messages back to the older type when sending them to the node with the older corosync version.
Do the same for RRP.","@aleksei-burlakov I was thinking about point 1 in TODO a bit more and I don't even think it is doable. I mean, it is probably somehow doable for UDPU, but for UDP, where multicast is used, it is probably not (multicast is sent to all nodes, so how to distinguish if old or new version should be used?)
So wire change seems to be unduable (correct me if I'm wrong and you have some idea how to do it), but having on-wire (old) and local only (new) totem_ip_address should be doable.",True,{}
corosync/corosync,https://github.com/corosync/corosync,560,2020-06-22T21:19:40Z,2020-07-09T00:33:14Z,2020-07-09T00:33:14Z,CLOSED,False,52,1,1,https://github.com/aleksei-burlakov,totemsrp: add versioning to the message_header,1,[],https://github.com/corosync/corosync/pull/560,https://github.com/zzhou1,6,https://github.com/corosync/corosync/pull/560#issuecomment-648718062,"The patch is incomplete. Feedback is required.
The 934c47e changes the totem_ip_address structure that is incapsulated in the message structures:

        orf_token
        mcast
        memb_merge_detect
        memb_join
        memb_commit_token_memb_entry
        token_hold_cancel


Thus when another node has an unmodified totem_ip_address structure,
when communicating, it corrupts the messages that eventually may break
down the cluster. This situation has occurred during a rolling upgrade from
corosync-2.3.6 to 2.4.5.
In this patch, I added the previously defined cs_version_t structure into
the messahe_header structure. The cs_version_t is not used yet, but it
enables using it in future. (Frontporting?)
Also the flag MESSAGE_TYPE_HEADER_HAS_VERSION is added
in the message_header->type field. The flag indicates that the message_header
structure has the version field.
Now, in the function main_deliver_fn, that is an entry point of the
incoming messages, it checks if the flag MESSAGE_TYPE_HEADER_HAS_VERSION
is set. If it's set, it means the opposite node has the same version
and the message is passed through as it. If the flag is not set,
it means the message is of the older type, then it unpacks the message to
one of the aforementioned (orf_token, mcast,...).
TODO:

Implement packing the messages back to the older type when sending them to the node with the older corosync version.
Do the same for RRP.","@aleksei-burlakov I was thinking about point 1 in TODO a bit more and I don't even think it is doable. I mean, it is probably somehow doable for UDPU, but for UDP, where multicast is used, it is probably not (multicast is sent to all nodes, so how to distinguish if old or new version should be used?)
So wire change seems to be unduable (correct me if I'm wrong and you have some idea how to do it), but having on-wire (old) and local only (new) totem_ip_address should be doable.

Yeah, the challenging part is this wire change, aka rolling upgrade. Few thoughts, not sure if helps:


the possible workflow could be like the ""new message header"" can be on wire only until every node reach the newer version consensus.


Well, how to reach this version consensus could be the fun part. Sounds like it is very complex and risky to deal with the totem   membership protocol internals directly.  How about to leverage CPG to detect and instruct all nodes to apply the new message header?  eg. upon any node leave or join?


When the node is updated with the newer version, it could start with the new message header immediatly


if the cluster already running with the new protocol, the joining process just fits.


if the running cluster is still using the old protocol. Noted, the newer message header get dropped at the old nodes.
A pretty big challenge here is this new node is required to fall back to use the old protocol for the rolling upgrade. But being a fresh resarted node alone, it's a puzzle which meassage header should previal? A timer to switch back and forth between old and new protocol, only for certain times? Well, seems not a good enough approach still ... Even, let the joining node start with old message header initially, it is contraversal too.




Once corosync cluster starts using with the newer message header, it just drops those old message header. It says, the node with the old protocol could not join into a cluster with the newer protocol. Since, it is not wise and not cost effective to let the whole cluster switch back to the old protocol, then renegotiate the newer version consensus seems like.


Well, it appears quite complex already ?! Anyway, have fun!",True,{}
corosync/corosync,https://github.com/corosync/corosync,560,2020-06-22T21:19:40Z,2020-07-09T00:33:14Z,2020-07-09T00:33:14Z,CLOSED,False,52,1,1,https://github.com/aleksei-burlakov,totemsrp: add versioning to the message_header,1,[],https://github.com/corosync/corosync/pull/560,https://github.com/jfriesse,7,https://github.com/corosync/corosync/pull/560#issuecomment-648771191,"The patch is incomplete. Feedback is required.
The 934c47e changes the totem_ip_address structure that is incapsulated in the message structures:

        orf_token
        mcast
        memb_merge_detect
        memb_join
        memb_commit_token_memb_entry
        token_hold_cancel


Thus when another node has an unmodified totem_ip_address structure,
when communicating, it corrupts the messages that eventually may break
down the cluster. This situation has occurred during a rolling upgrade from
corosync-2.3.6 to 2.4.5.
In this patch, I added the previously defined cs_version_t structure into
the messahe_header structure. The cs_version_t is not used yet, but it
enables using it in future. (Frontporting?)
Also the flag MESSAGE_TYPE_HEADER_HAS_VERSION is added
in the message_header->type field. The flag indicates that the message_header
structure has the version field.
Now, in the function main_deliver_fn, that is an entry point of the
incoming messages, it checks if the flag MESSAGE_TYPE_HEADER_HAS_VERSION
is set. If it's set, it means the opposite node has the same version
and the message is passed through as it. If the flag is not set,
it means the message is of the older type, then it unpacks the message to
one of the aforementioned (orf_token, mcast,...).
TODO:

Implement packing the messages back to the older type when sending them to the node with the older corosync version.
Do the same for RRP.","@aleksei-burlakov I was thinking about point 1 in TODO a bit more and I don't even think it is doable. I mean, it is probably somehow doable for UDPU, but for UDP, where multicast is used, it is probably not (multicast is sent to all nodes, so how to distinguish if old or new version should be used?)
So wire change seems to be unduable (correct me if I'm wrong and you have some idea how to do it), but having on-wire (old) and local only (new) totem_ip_address should be doable.

Yeah, the challenging part is this wire change, aka rolling upgrade. Few thoughts, not sure if helps:
* the possible workflow could be like the ""new message header"" can be on wire only until every node reach the newer version consensus.


It is actually also problematic, because what if cluster of new corosync(s) is formed and start sending messages. Now, new node with old corosync joins. Such node has old version so it will be unable to connect cluster.

* Well, how to reach this version consensus could be the fun part. Sounds like it is very complex and risky to deal with the totem   membership protocol internals directly.  How about to leverage CPG to detect and instruct all nodes to apply the new message header?  eg. upon any node leave or join?


Not sure how this helps. I mean, node joins by sending (some) message to SRP. Such message must be old one if compatibility should be kept. But node can receive new message type which was sent on wire before that node joined.

* When the node is updated with the newer version, it could start with the new message header immediatly
  
  * if the cluster already running with the new protocol, the joining process just fits.
  * if the running cluster is still using the old protocol. Noted, the newer message header get dropped at the old nodes.
    A pretty big challenge here is this new node is required to fall back to use the old protocol for the rolling upgrade. But being a fresh resarted node alone, it's a puzzle which meassage header should previal? A timer to switch back and forth between old and new protocol, only for certain times? Well, seems not a good enough approach still ... Even, let the joining node start with old message header initially, it is contraversal too.

* Once corosync cluster starts using with the newer message header, it just drops those old message header. It says, the node with the old protocol could not join into a cluster with the newer protocol. Since, it is not wise and not cost effective to let the whole cluster switch back to the old protocol, then renegotiate the newer version consensus seems like.

Well, it appears quite complex already ?! Anyway, have fun!

It is actually super complex just for having scope id. Honestly I think only reasonable doable solution is to keep wire structure as it is and use enhanced header locally.",True,{}
corosync/corosync,https://github.com/corosync/corosync,562,2020-07-08T12:03:17Z,2020-07-09T14:56:56Z,2020-07-09T14:57:03Z,CLOSED,False,396,42,14,https://github.com/chrissie-c,[crypto] Allow runtime crypto reconfig,6,[],https://github.com/corosync/corosync/pull/562,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/562,"This uses the new API in knet to reconfigure crypto options at runtime. If compiled against a knet that doesn't support this then the old API will be used and reconfiguration of crypto options is forbidden.
The reconfiguration is done in 3 phases, each happens after the token has circulated so we know all nodes are in sync.
0: Load the new configuration on all nodes
1: Activate the new configuration for sending (receiving will still accept the old encryption)
2: Deactivate the old configuration","This uses the new API in knet to reconfigure crypto options at runtime. If compiled against a knet that doesn't support this then the old API will be used and reconfiguration of crypto options is forbidden.
The reconfiguration is done in 3 phases, each happens after the token has circulated so we know all nodes are in sync.
0: Load the new configuration on all nodes
1: Activate the new configuration for sending (receiving will still accept the old encryption)
2: Deactivate the old configuration",True,{}
corosync/corosync,https://github.com/corosync/corosync,562,2020-07-08T12:03:17Z,2020-07-09T14:56:56Z,2020-07-09T14:57:03Z,CLOSED,False,396,42,14,https://github.com/chrissie-c,[crypto] Allow runtime crypto reconfig,6,[],https://github.com/corosync/corosync/pull/562,https://github.com/fabbione,2,https://github.com/corosync/corosync/pull/562#issuecomment-655922800,"This uses the new API in knet to reconfigure crypto options at runtime. If compiled against a knet that doesn't support this then the old API will be used and reconfiguration of crypto options is forbidden.
The reconfiguration is done in 3 phases, each happens after the token has circulated so we know all nodes are in sync.
0: Load the new configuration on all nodes
1: Activate the new configuration for sending (receiving will still accept the old encryption)
2: Deactivate the old configuration","retest this please
(CI should build now against both knet master and knet stable1-proposed)",True,{}
corosync/corosync,https://github.com/corosync/corosync,562,2020-07-08T12:03:17Z,2020-07-09T14:56:56Z,2020-07-09T14:57:03Z,CLOSED,False,396,42,14,https://github.com/chrissie-c,[crypto] Allow runtime crypto reconfig,6,[],https://github.com/corosync/corosync/pull/562,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/562#issuecomment-656177848,"This uses the new API in knet to reconfigure crypto options at runtime. If compiled against a knet that doesn't support this then the old API will be used and reconfiguration of crypto options is forbidden.
The reconfiguration is done in 3 phases, each happens after the token has circulated so we know all nodes are in sync.
0: Load the new configuration on all nodes
1: Activate the new configuration for sending (receiving will still accept the old encryption)
2: Deactivate the old configuration","@chrissie-c Nice patch so ACK and merged squashed commit as a 5f71445.
Thank you for the patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,563,2020-07-09T00:34:38Z,2020-07-09T00:34:55Z,2020-07-09T00:34:55Z,CLOSED,False,11459,2622,254,https://github.com/aleksei-burlakov,Local ipv6,181,[],https://github.com/corosync/corosync/pull/563,https://github.com/aleksei-burlakov,1,https://github.com/corosync/corosync/pull/563,"totemip: Add support for local ipv6
Unlike the b4a8872 and 934c47e we don't store
the sin6_scope_ip in the structure totem_ip_address
but rather get it in totemip_totemip_to_sockaddr_convert.","totemip: Add support for local ipv6
Unlike the b4a8872 and 934c47e we don't store
the sin6_scope_ip in the structure totem_ip_address
but rather get it in totemip_totemip_to_sockaddr_convert.",True,{}
corosync/corosync,https://github.com/corosync/corosync,563,2020-07-09T00:34:38Z,2020-07-09T00:34:55Z,2020-07-09T00:34:55Z,CLOSED,False,11459,2622,254,https://github.com/aleksei-burlakov,Local ipv6,181,[],https://github.com/corosync/corosync/pull/563,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/563#issuecomment-655827547,"totemip: Add support for local ipv6
Unlike the b4a8872 and 934c47e we don't store
the sin6_scope_ip in the structure totem_ip_address
but rather get it in totemip_totemip_to_sockaddr_convert.",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,564,2020-07-09T00:39:33Z,2020-07-23T20:30:14Z,2020-07-24T12:14:47Z,CLOSED,False,101,2,1,https://github.com/aleksei-burlakov,totemip: Add support for local ipv6,1,[],https://github.com/corosync/corosync/pull/564,https://github.com/aleksei-burlakov,1,https://github.com/corosync/corosync/pull/564,"totemip: Add support for local ipv6
Unlike the b4a8872 and 934c47e we don't store
the sin6_scope_ip in the structure totem_ip_address
but rather get it in totemip_totemip_to_sockaddr_convert.","totemip: Add support for local ipv6
Unlike the b4a8872 and 934c47e we don't store
the sin6_scope_ip in the structure totem_ip_address
but rather get it in totemip_totemip_to_sockaddr_convert.",True,{}
corosync/corosync,https://github.com/corosync/corosync,564,2020-07-09T00:39:33Z,2020-07-23T20:30:14Z,2020-07-24T12:14:47Z,CLOSED,False,101,2,1,https://github.com/aleksei-burlakov,totemip: Add support for local ipv6,1,[],https://github.com/corosync/corosync/pull/564,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/564#issuecomment-655828768,"totemip: Add support for local ipv6
Unlike the b4a8872 and 934c47e we don't store
the sin6_scope_ip in the structure totem_ip_address
but rather get it in totemip_totemip_to_sockaddr_convert.",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,564,2020-07-09T00:39:33Z,2020-07-23T20:30:14Z,2020-07-24T12:14:47Z,CLOSED,False,101,2,1,https://github.com/aleksei-burlakov,totemip: Add support for local ipv6,1,[],https://github.com/corosync/corosync/pull/564,https://github.com/aleksei-burlakov,3,https://github.com/corosync/corosync/pull/564#issuecomment-655828976,"totemip: Add support for local ipv6
Unlike the b4a8872 and 934c47e we don't store
the sin6_scope_ip in the structure totem_ip_address
but rather get it in totemip_totemip_to_sockaddr_convert.","@jfriesse, @gao-yan, @liangxin1300 please give feedback.",True,{}
corosync/corosync,https://github.com/corosync/corosync,564,2020-07-09T00:39:33Z,2020-07-23T20:30:14Z,2020-07-24T12:14:47Z,CLOSED,False,101,2,1,https://github.com/aleksei-burlakov,totemip: Add support for local ipv6,1,[],https://github.com/corosync/corosync/pull/564,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/564#issuecomment-656003944,"totemip: Add support for local ipv6
Unlike the b4a8872 and 934c47e we don't store
the sin6_scope_ip in the structure totem_ip_address
but rather get it in totemip_totemip_to_sockaddr_convert.",@aleksei-burlakov After brief look I think it looks good but let me test it more deeply.,True,{}
corosync/corosync,https://github.com/corosync/corosync,564,2020-07-09T00:39:33Z,2020-07-23T20:30:14Z,2020-07-24T12:14:47Z,CLOSED,False,101,2,1,https://github.com/aleksei-burlakov,totemip: Add support for local ipv6,1,[],https://github.com/corosync/corosync/pull/564,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/564#issuecomment-656599617,"totemip: Add support for local ipv6
Unlike the b4a8872 and 934c47e we don't store
the sin6_scope_ip in the structure totem_ip_address
but rather get it in totemip_totemip_to_sockaddr_convert.","@aleksei-burlakov:
Ok. So I have just two comments:

totemip_totemip_to_sockaddr_convert is called for every sent packet. I'm not really entirely convinced we should call getifaddrs for every single packets (possible performance impact). I'm not sure if it patchset will work if getifaddrs would be called only for sockaddr used before binding? If so, I would suggest having argument there which sets if scopeid should be added or not.
Patch will not work when multiple ifaces has same addr (that's where interface specification is needed). Is it ok?",True,{}
corosync/corosync,https://github.com/corosync/corosync,564,2020-07-09T00:39:33Z,2020-07-23T20:30:14Z,2020-07-24T12:14:47Z,CLOSED,False,101,2,1,https://github.com/aleksei-burlakov,totemip: Add support for local ipv6,1,[],https://github.com/corosync/corosync/pull/564,https://github.com/liangxin1300,6,https://github.com/corosync/corosync/pull/564#issuecomment-658213768,"totemip: Add support for local ipv6
Unlike the b4a8872 and 934c47e we don't store
the sin6_scope_ip in the structure totem_ip_address
but rather get it in totemip_totemip_to_sockaddr_convert.","@aleksei-burlakov Good job!
I think in this way we can avoid previous rolling upgrade issue",True,{}
corosync/corosync,https://github.com/corosync/corosync,564,2020-07-09T00:39:33Z,2020-07-23T20:30:14Z,2020-07-24T12:14:47Z,CLOSED,False,101,2,1,https://github.com/aleksei-burlakov,totemip: Add support for local ipv6,1,[],https://github.com/corosync/corosync/pull/564,https://github.com/jfriesse,7,https://github.com/corosync/corosync/pull/564#issuecomment-663372345,"totemip: Add support for local ipv6
Unlike the b4a8872 and 934c47e we don't store
the sin6_scope_ip in the structure totem_ip_address
but rather get it in totemip_totemip_to_sockaddr_convert.",@aleksei-burlakov Have you closed the PR intentionally or by mistake? The newest incarnation looks quite good.,True,{}
corosync/corosync,https://github.com/corosync/corosync,564,2020-07-09T00:39:33Z,2020-07-23T20:30:14Z,2020-07-24T12:14:47Z,CLOSED,False,101,2,1,https://github.com/aleksei-burlakov,totemip: Add support for local ipv6,1,[],https://github.com/corosync/corosync/pull/564,https://github.com/aleksei-burlakov,8,https://github.com/corosync/corosync/pull/564#issuecomment-663400247,"totemip: Add support for local ipv6
Unlike the b4a8872 and 934c47e we don't store
the sin6_scope_ip in the structure totem_ip_address
but rather get it in totemip_totemip_to_sockaddr_convert.","@aleksei-burlakov Have you closed the PR intentionally or by mistake? The newest incarnation looks quite good.

@jfriesse, thank you, there was unfortunately another bug, so I closed the PR intentionally. When I fix it, I will reopen the PR and add the comment.",True,{}
corosync/corosync,https://github.com/corosync/corosync,564,2020-07-09T00:39:33Z,2020-07-23T20:30:14Z,2020-07-24T12:14:47Z,CLOSED,False,101,2,1,https://github.com/aleksei-burlakov,totemip: Add support for local ipv6,1,[],https://github.com/corosync/corosync/pull/564,https://github.com/jfriesse,9,https://github.com/corosync/corosync/pull/564#issuecomment-663402898,"totemip: Add support for local ipv6
Unlike the b4a8872 and 934c47e we don't store
the sin6_scope_ip in the structure totem_ip_address
but rather get it in totemip_totemip_to_sockaddr_convert.","@aleksei-burlakov Ok, perfect. Also you may really consider to simplify the patch so:

Add totemip_totemip_to_sockaddr_convert_2 (or similar name) which would have one extra param - fill scopeid, which would do the hard work of getifaddr
totemip_totemip_to_sockaddr_convert would call totemip_totemip_to_sockaddr_convert_2 with fill_scopeid = false
During the bind, call totemip_totemip_to_sockaddr_convert_2 with fill_scopeid = true

That may work (haven't tried, so maybe I've overlooked something important) and wouldn't need any extra hash table and wouldn't affect speed during sending of packets (because ucast_sendmsg/mcast_sendmsg would use totemip_totemip_to_sockaddr_convert).",True,{'THUMBS_UP': ['https://github.com/aleksei-burlakov']}
corosync/corosync,https://github.com/corosync/corosync,564,2020-07-09T00:39:33Z,2020-07-23T20:30:14Z,2020-07-24T12:14:47Z,CLOSED,False,101,2,1,https://github.com/aleksei-burlakov,totemip: Add support for local ipv6,1,[],https://github.com/corosync/corosync/pull/564,https://github.com/aleksei-burlakov,10,https://github.com/corosync/corosync/pull/564#issuecomment-663424694,"totemip: Add support for local ipv6
Unlike the b4a8872 and 934c47e we don't store
the sin6_scope_ip in the structure totem_ip_address
but rather get it in totemip_totemip_to_sockaddr_convert.","@jfriesse, my concern is that the ipv6_scopeid_map is not a multimap (several keys have different values) and how it would store different scope-ids for the same IP addresses. It should be safe for a 2-nodes cluster, even when two interfaces have the same IP, because only one of the IP's would be in the corosync.conf. However, if there are 3 nodes and one uses the same IP on different interfaces to connect to the other two, it wont work.",True,{}
corosync/corosync,https://github.com/corosync/corosync,564,2020-07-09T00:39:33Z,2020-07-23T20:30:14Z,2020-07-24T12:14:47Z,CLOSED,False,101,2,1,https://github.com/aleksei-burlakov,totemip: Add support for local ipv6,1,[],https://github.com/corosync/corosync/pull/564,https://github.com/jfriesse,11,https://github.com/corosync/corosync/pull/564#issuecomment-663438091,"totemip: Add support for local ipv6
Unlike the b4a8872 and 934c47e we don't store
the sin6_scope_ip in the structure totem_ip_address
but rather get it in totemip_totemip_to_sockaddr_convert.","@aleksei-burlakov Yes, that is why I'm suggesting not using the map at all (but, as I've wrote, I'm not sure if I haven't overlooked some important piece).",True,{}
corosync/corosync,https://github.com/corosync/corosync,564,2020-07-09T00:39:33Z,2020-07-23T20:30:14Z,2020-07-24T12:14:47Z,CLOSED,False,101,2,1,https://github.com/aleksei-burlakov,totemip: Add support for local ipv6,1,[],https://github.com/corosync/corosync/pull/564,https://github.com/aleksei-burlakov,12,https://github.com/corosync/corosync/pull/564#issuecomment-663449072,"totemip: Add support for local ipv6
Unlike the b4a8872 and 934c47e we don't store
the sin6_scope_ip in the structure totem_ip_address
but rather get it in totemip_totemip_to_sockaddr_convert.","@aleksei-burlakov Yes, that is why I'm suggesting not using the map at all (but, as I've wrote, I'm not sure if I haven't overlooked some important piece).

@jfriesse , I have a question. If there are two interfaces with the same IP, the user must specify which should be used in the corosync.conf explicitly. So I still need somehow to transfer the scope-id number from the totemip_parse into the totemip_totemip_to_sockaddr_convert_2. Am I missing something?",True,{}
corosync/corosync,https://github.com/corosync/corosync,564,2020-07-09T00:39:33Z,2020-07-23T20:30:14Z,2020-07-24T12:14:47Z,CLOSED,False,101,2,1,https://github.com/aleksei-burlakov,totemip: Add support for local ipv6,1,[],https://github.com/corosync/corosync/pull/564,https://github.com/jfriesse,13,https://github.com/corosync/corosync/pull/564#issuecomment-663462414,"totemip: Add support for local ipv6
Unlike the b4a8872 and 934c47e we don't store
the sin6_scope_ip in the structure totem_ip_address
but rather get it in totemip_totemip_to_sockaddr_convert.","@aleksei-burlakov Yes, that is why I'm suggesting not using the map at all (but, as I've wrote, I'm not sure if I haven't overlooked some important piece).

@jfriesse , I have a question. If there are two interfaces with the same IP, the user must specify which should be used in the corosync.conf explicitly. So I still need somehow to transfer the scope-id number from the totemip_parse into the totemip_totemip_to_sockaddr_convert_2. Am I missing something?

Yes. But I don't think there is really a way to solve it without getting that info from getaddrinfo (so user has to specify it using % syntax) -> store it to the structure which is then passed to bind, what would mean to have two structures - one used only for local operations and second for sending on wire.
Solution which you proposed (using getifaddr) seems to be nice because it will reduce need for two structures so patch is smaller and better suited for Corosync 2.x series.
So to solve the issue with 2 same IPs I would suggest warning in the log. That should be enough for feature, which is probably not very much used anyway.",True,{'THUMBS_UP': ['https://github.com/aleksei-burlakov']}
corosync/corosync,https://github.com/corosync/corosync,564,2020-07-09T00:39:33Z,2020-07-23T20:30:14Z,2020-07-24T12:14:47Z,CLOSED,False,101,2,1,https://github.com/aleksei-burlakov,totemip: Add support for local ipv6,1,[],https://github.com/corosync/corosync/pull/564,https://github.com/aleksei-burlakov,14,https://github.com/corosync/corosync/pull/564#issuecomment-663509523,"totemip: Add support for local ipv6
Unlike the b4a8872 and 934c47e we don't store
the sin6_scope_ip in the structure totem_ip_address
but rather get it in totemip_totemip_to_sockaddr_convert.","@aleksei-burlakov Ok, perfect. Also you may really consider to simplify the patch so:

Add totemip_totemip_to_sockaddr_convert_2 (or similar name) which would have one extra param - fill scopeid, which would do the hard work of getifaddr
totemip_totemip_to_sockaddr_convert would call totemip_totemip_to_sockaddr_convert_2 with fill_scopeid = false
During the bind, call totemip_totemip_to_sockaddr_convert_2 with fill_scopeid = true

That may work (haven't tried, so maybe I've overlooked something important) and wouldn't need any extra hash table and wouldn't affect speed during sending of packets (because ucast_sendmsg/mcast_sendmsg would use totemip_totemip_to_sockaddr_convert).

@jfriesse if I correctly understand, its purpose if to reduce repeatedly calling the getifaddrs in the totemip_getif_scopeid. To fix it I declared the ifap as static, so that the getifaddrs is called only once (ee8c787#diff-52c4c620c38b741bd3f22d002b286e50R331). And when the user calls the corosync-cfgtool -R, I could, for example, reset the ifap.",True,{}
corosync/corosync,https://github.com/corosync/corosync,565,2020-07-16T14:10:27Z,2020-07-16T15:18:22Z,2020-07-16T15:18:37Z,CLOSED,False,148,68,4,https://github.com/jfriesse,Rpm use git version gen,4,[],https://github.com/corosync/corosync/pull/565,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/565,"This is same PR as for qdevice, preacked by Fabio.","This is same PR as for qdevice, preacked by Fabio.",True,{}
corosync/corosync,https://github.com/corosync/corosync,565,2020-07-16T14:10:27Z,2020-07-16T15:18:22Z,2020-07-16T15:18:37Z,CLOSED,False,148,68,4,https://github.com/jfriesse,Rpm use git version gen,4,[],https://github.com/corosync/corosync/pull/565,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/565#issuecomment-659480102,"This is same PR as for qdevice, preacked by Fabio.",Merged as a 464945a,True,{}
corosync/corosync,https://github.com/corosync/corosync,566,2020-07-27T10:41:59Z,2020-07-30T14:59:26Z,2020-07-30T15:03:35Z,CLOSED,False,52,1,1,https://github.com/aleksei-burlakov,totemip: Add support for local ipv6,1,[],https://github.com/corosync/corosync/pull/566,https://github.com/aleksei-burlakov,1,https://github.com/corosync/corosync/pull/566,"This PR continues the #564
Unlike the b4a8872 and 934c47e we don't store
the sin6_scope_ip in the structure totem_ip_address
but rather get it in totemip_totemip_to_sockaddr_convert by the use of totemip_getif_scopeid.
To prevent from calling the getifaddrs in the totemip_getif_scopeid repeatedly,
we use the static struct ifaddrs *totemip_getif_scopeid_ifap. When the corosync-cfgtool -R is called,
the totemip_getif_scopeid will refresh.
If there are several interfaces with the same IP address, it prints the warning in the journal.
@jfriesse, @gao-yan, @liangxin1300, please have a look.","This PR continues the #564
Unlike the b4a8872 and 934c47e we don't store
the sin6_scope_ip in the structure totem_ip_address
but rather get it in totemip_totemip_to_sockaddr_convert by the use of totemip_getif_scopeid.
To prevent from calling the getifaddrs in the totemip_getif_scopeid repeatedly,
we use the static struct ifaddrs *totemip_getif_scopeid_ifap. When the corosync-cfgtool -R is called,
the totemip_getif_scopeid will refresh.
If there are several interfaces with the same IP address, it prints the warning in the journal.
@jfriesse, @gao-yan, @liangxin1300, please have a look.",True,{}
corosync/corosync,https://github.com/corosync/corosync,566,2020-07-27T10:41:59Z,2020-07-30T14:59:26Z,2020-07-30T15:03:35Z,CLOSED,False,52,1,1,https://github.com/aleksei-burlakov,totemip: Add support for local ipv6,1,[],https://github.com/corosync/corosync/pull/566,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/566#issuecomment-664302192,"This PR continues the #564
Unlike the b4a8872 and 934c47e we don't store
the sin6_scope_ip in the structure totem_ip_address
but rather get it in totemip_totemip_to_sockaddr_convert by the use of totemip_getif_scopeid.
To prevent from calling the getifaddrs in the totemip_getif_scopeid repeatedly,
we use the static struct ifaddrs *totemip_getif_scopeid_ifap. When the corosync-cfgtool -R is called,
the totemip_getif_scopeid will refresh.
If there are several interfaces with the same IP address, it prints the warning in the journal.
@jfriesse, @gao-yan, @liangxin1300, please have a look.",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,566,2020-07-27T10:41:59Z,2020-07-30T14:59:26Z,2020-07-30T15:03:35Z,CLOSED,False,52,1,1,https://github.com/aleksei-burlakov,totemip: Add support for local ipv6,1,[],https://github.com/corosync/corosync/pull/566,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/566#issuecomment-664422358,"This PR continues the #564
Unlike the b4a8872 and 934c47e we don't store
the sin6_scope_ip in the structure totem_ip_address
but rather get it in totemip_totemip_to_sockaddr_convert by the use of totemip_getif_scopeid.
To prevent from calling the getifaddrs in the totemip_getif_scopeid repeatedly,
we use the static struct ifaddrs *totemip_getif_scopeid_ifap. When the corosync-cfgtool -R is called,
the totemip_getif_scopeid will refresh.
If there are several interfaces with the same IP address, it prints the warning in the journal.
@jfriesse, @gao-yan, @liangxin1300, please have a look.","@aleksei-burlakov: This will (probably, haven't tried) not work with RRP. Would you mind to test #567 which is based on idea which I've described for #564.
Also if it works for you, could you please clean it up, add support for totemudp and send it as a new PR? (I want you to have credit, because the main idea (using getifaddrs) is yours).",True,{'THUMBS_UP': ['https://github.com/aleksei-burlakov']}
corosync/corosync,https://github.com/corosync/corosync,566,2020-07-27T10:41:59Z,2020-07-30T14:59:26Z,2020-07-30T15:03:35Z,CLOSED,False,52,1,1,https://github.com/aleksei-burlakov,totemip: Add support for local ipv6,1,[],https://github.com/corosync/corosync/pull/566,https://github.com/aleksei-burlakov,4,https://github.com/corosync/corosync/pull/566#issuecomment-666358912,"This PR continues the #564
Unlike the b4a8872 and 934c47e we don't store
the sin6_scope_ip in the structure totem_ip_address
but rather get it in totemip_totemip_to_sockaddr_convert by the use of totemip_getif_scopeid.
To prevent from calling the getifaddrs in the totemip_getif_scopeid repeatedly,
we use the static struct ifaddrs *totemip_getif_scopeid_ifap. When the corosync-cfgtool -R is called,
the totemip_getif_scopeid will refresh.
If there are several interfaces with the same IP address, it prints the warning in the journal.
@jfriesse, @gao-yan, @liangxin1300, please have a look.","@aleksei-burlakov: This will (probably, haven't tried) not work with RRP. Would you mind to test #567 which is based on idea which I've described for #564.
Also if it works for you, could you please clean it up, add support for totemudp and send it as a new PR? (I want you to have credit, because the main idea (using getifaddrs) is yours).

@jfriesse I have tested the #567. It works for the ucast, but unfortunately it doesn't work for the mcast. This PR works for both. I've made some polishing, namely, I have removed the default binding address and made alerting when non-unique IPs are detected only once.
When testing the mcast case, in the corosync.conf I set the totem.interface.bindnetadd = the corresponding local ipv6 address , so it's different on both nodes. (When the IP address is global they both should have the same value). Could I do this? I thought, that I could do it, because if I don't change the totem.interface.bindnetadd even the b4a8872 wouldn't work.",True,{}
corosync/corosync,https://github.com/corosync/corosync,566,2020-07-27T10:41:59Z,2020-07-30T14:59:26Z,2020-07-30T15:03:35Z,CLOSED,False,52,1,1,https://github.com/aleksei-burlakov,totemip: Add support for local ipv6,1,[],https://github.com/corosync/corosync/pull/566,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/566#issuecomment-666415335,"This PR continues the #564
Unlike the b4a8872 and 934c47e we don't store
the sin6_scope_ip in the structure totem_ip_address
but rather get it in totemip_totemip_to_sockaddr_convert by the use of totemip_getif_scopeid.
To prevent from calling the getifaddrs in the totemip_getif_scopeid repeatedly,
we use the static struct ifaddrs *totemip_getif_scopeid_ifap. When the corosync-cfgtool -R is called,
the totemip_getif_scopeid will refresh.
If there are several interfaces with the same IP address, it prints the warning in the journal.
@jfriesse, @gao-yan, @liangxin1300, please have a look.","@aleksei-burlakov: Yes, patch haven't worked for multicast, because it was what I've asked you to do (""clean it up, add support for totemudp and send it as a new PR?"") :) Anyway, I've did it, and force pushed so #567 could be merged.
The main problem which I have with current PR is still the same. It makes walk thru all IFs (yes, kernel/libc result is cached, but cycle exists no matter what) for every single sent packet. That is just no-no for affected code path (let's call it fast one) especially for feature which will almost nobody use.",True,{}
corosync/corosync,https://github.com/corosync/corosync,566,2020-07-27T10:41:59Z,2020-07-30T14:59:26Z,2020-07-30T15:03:35Z,CLOSED,False,52,1,1,https://github.com/aleksei-burlakov,totemip: Add support for local ipv6,1,[],https://github.com/corosync/corosync/pull/566,https://github.com/aleksei-burlakov,6,https://github.com/corosync/corosync/pull/566#issuecomment-666427770,"This PR continues the #564
Unlike the b4a8872 and 934c47e we don't store
the sin6_scope_ip in the structure totem_ip_address
but rather get it in totemip_totemip_to_sockaddr_convert by the use of totemip_getif_scopeid.
To prevent from calling the getifaddrs in the totemip_getif_scopeid repeatedly,
we use the static struct ifaddrs *totemip_getif_scopeid_ifap. When the corosync-cfgtool -R is called,
the totemip_getif_scopeid will refresh.
If there are several interfaces with the same IP address, it prints the warning in the journal.
@jfriesse, @gao-yan, @liangxin1300, please have a look.","@aleksei-burlakov: Yes, patch haven't worked for multicast, because it was what I've asked you to do (""clean it up, add support for totemudp and send it as a new PR?"") :) Anyway, I've did it, and force pushed so #567 could be merged.
The main problem which I have with current PR is still the same. It makes walk thru all IFs (yes, kernel/libc result is cached, but cycle exists no matter what) for every single sent packet. That is just no-no for affected code path (let's call it fast one) especially for feature which will almost nobody use.

Now it really works. Thank you, I think we can merge the #567. IMHO, the overhead of a loop with 10 iterations is neglectable.",True,{}
corosync/corosync,https://github.com/corosync/corosync,567,2020-07-27T14:12:50Z,2020-08-03T06:27:06Z,2020-08-03T06:27:11Z,CLOSED,False,77,9,4,https://github.com/jfriesse,Add support for local ipv6 - alternative,1,[],https://github.com/corosync/corosync/pull/567,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/567,"sin6_scope_id is not present in totemip structure making impossible to
use link-local ipv6 address.
Patch adds new call totemip_totemip_to_sockaddr_convert_with_scopeid which
can be instructed to fill scope id. This function calls totemip_getif_scopeid
which walks local addresses and returns scope id if interface matches.
Main difference between this patch and
934c47e is fact, that totemip
structure keeps unchanged so corosync stays wire compatible.
This makes corosync work with link-local addresses fine for both UDPU
and UDP transport as long as there is only one matching interface with
this patch.
Big thanks to Aleksei Burlakov aburlakov@suse.com who brought idea
(and implementation) of using totemip_getif_scopeid.
Signed-off-by: Jan Friesse jfriesse@redhat.com","sin6_scope_id is not present in totemip structure making impossible to
use link-local ipv6 address.
Patch adds new call totemip_totemip_to_sockaddr_convert_with_scopeid which
can be instructed to fill scope id. This function calls totemip_getif_scopeid
which walks local addresses and returns scope id if interface matches.
Main difference between this patch and
934c47e is fact, that totemip
structure keeps unchanged so corosync stays wire compatible.
This makes corosync work with link-local addresses fine for both UDPU
and UDP transport as long as there is only one matching interface with
this patch.
Big thanks to Aleksei Burlakov aburlakov@suse.com who brought idea
(and implementation) of using totemip_getif_scopeid.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,567,2020-07-27T14:12:50Z,2020-08-03T06:27:06Z,2020-08-03T06:27:11Z,CLOSED,False,77,9,4,https://github.com/jfriesse,Add support for local ipv6 - alternative,1,[],https://github.com/corosync/corosync/pull/567,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/567#issuecomment-667829761,"sin6_scope_id is not present in totemip structure making impossible to
use link-local ipv6 address.
Patch adds new call totemip_totemip_to_sockaddr_convert_with_scopeid which
can be instructed to fill scope id. This function calls totemip_getif_scopeid
which walks local addresses and returns scope id if interface matches.
Main difference between this patch and
934c47e is fact, that totemip
structure keeps unchanged so corosync stays wire compatible.
This makes corosync work with link-local addresses fine for both UDPU
and UDP transport as long as there is only one matching interface with
this patch.
Big thanks to Aleksei Burlakov aburlakov@suse.com who brought idea
(and implementation) of using totemip_getif_scopeid.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c: Thank you for the testing and review. I've merged patch as a d963c2a,True,{}
corosync/corosync,https://github.com/corosync/corosync,570,2020-08-07T04:14:49Z,2020-08-07T09:41:07Z,2020-08-07T09:41:07Z,CLOSED,False,28,28,1,https://github.com/liangxin1300,cfgtool: redirect error to stderr and standardizing the return code,1,[],https://github.com/corosync/corosync/pull/570,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/570,"Hi @jfriesse ,
Since cfgtool is used by crmsh(and other projects) a lot, I think it should be better to redirect error message to stderr, and standardizing the return code as EXIT_SUCCESS and EXIT_FAILURE like what quorumtool did.
What do you think?","Hi @jfriesse ,
Since cfgtool is used by crmsh(and other projects) a lot, I think it should be better to redirect error message to stderr, and standardizing the return code as EXIT_SUCCESS and EXIT_FAILURE like what quorumtool did.
What do you think?",True,{}
corosync/corosync,https://github.com/corosync/corosync,570,2020-08-07T04:14:49Z,2020-08-07T09:41:07Z,2020-08-07T09:41:07Z,CLOSED,False,28,28,1,https://github.com/liangxin1300,cfgtool: redirect error to stderr and standardizing the return code,1,[],https://github.com/corosync/corosync/pull/570,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/570#issuecomment-670311868,"Hi @jfriesse ,
Since cfgtool is used by crmsh(and other projects) a lot, I think it should be better to redirect error message to stderr, and standardizing the return code as EXIT_SUCCESS and EXIT_FAILURE like what quorumtool did.
What do you think?",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,570,2020-08-07T04:14:49Z,2020-08-07T09:41:07Z,2020-08-07T09:41:07Z,CLOSED,False,28,28,1,https://github.com/liangxin1300,cfgtool: redirect error to stderr and standardizing the return code,1,[],https://github.com/corosync/corosync/pull/570,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/570#issuecomment-670348486,"Hi @jfriesse ,
Since cfgtool is used by crmsh(and other projects) a lot, I think it should be better to redirect error message to stderr, and standardizing the return code as EXIT_SUCCESS and EXIT_FAILURE like what quorumtool did.
What do you think?",@knet-ci-bot: add to whitelist,True,{}
corosync/corosync,https://github.com/corosync/corosync,570,2020-08-07T04:14:49Z,2020-08-07T09:41:07Z,2020-08-07T09:41:07Z,CLOSED,False,28,28,1,https://github.com/liangxin1300,cfgtool: redirect error to stderr and standardizing the return code,1,[],https://github.com/corosync/corosync/pull/570,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/570#issuecomment-670430481,"Hi @jfriesse ,
Since cfgtool is used by crmsh(and other projects) a lot, I think it should be better to redirect error message to stderr, and standardizing the return code as EXIT_SUCCESS and EXIT_FAILURE like what quorumtool did.
What do you think?","@liangxin1300 Yup, agree. I like both the idea and the patch so ACK and merged as a 06d530d. Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,571,2020-08-07T08:16:43Z,2020-08-07T13:57:27Z,2020-08-07T13:57:28Z,CLOSED,False,22,22,1,https://github.com/liangxin1300,[needle] cfgtool: redirect error to stderr and standardizing the return code,1,[],https://github.com/corosync/corosync/pull/571,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/571,backport from #570,backport from #570,True,{}
corosync/corosync,https://github.com/corosync/corosync,571,2020-08-07T08:16:43Z,2020-08-07T13:57:27Z,2020-08-07T13:57:28Z,CLOSED,False,22,22,1,https://github.com/liangxin1300,[needle] cfgtool: redirect error to stderr and standardizing the return code,1,[],https://github.com/corosync/corosync/pull/571,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/571#issuecomment-670431813,backport from #570,"@liangxin1300 Similarly to master counterpart, I like the idea and patch, but this one needs small fix.. Line 165 is not changed (and it should, or at least in master it is changed):

  
    
      corosync/tools/corosync-cfgtool.c
    
    
         Line 165
      in
      d963c2a
    
  
  
    

        
          
           printf (""Could not reload configuration. Error %s\n"", cs_strerror(result));",True,{}
corosync/corosync,https://github.com/corosync/corosync,571,2020-08-07T08:16:43Z,2020-08-07T13:57:27Z,2020-08-07T13:57:28Z,CLOSED,False,22,22,1,https://github.com/liangxin1300,[needle] cfgtool: redirect error to stderr and standardizing the return code,1,[],https://github.com/corosync/corosync/pull/571,https://github.com/liangxin1300,3,https://github.com/corosync/corosync/pull/571#issuecomment-670480985,backport from #570,"@liangxin1300 Similarly to master counterpart, I like the idea and patch, but this one needs small fix.. Line 165 is not changed (and it should, or at least in master it is changed):

  
    
      corosync/tools/corosync-cfgtool.c
    
    
         Line 165
      in
      d963c2a
    
  
  
    

        
          
           printf (""Could not reload configuration. Error %s\n"", cs_strerror(result)); 
        
    
  



Thanks @jfriesse , already changed",True,{}
corosync/corosync,https://github.com/corosync/corosync,571,2020-08-07T08:16:43Z,2020-08-07T13:57:27Z,2020-08-07T13:57:28Z,CLOSED,False,22,22,1,https://github.com/liangxin1300,[needle] cfgtool: redirect error to stderr and standardizing the return code,1,[],https://github.com/corosync/corosync/pull/571,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/571#issuecomment-670529984,backport from #570,@liangxin1300: Thank you for update. ACK and merged as a 22b6d45,True,{}
corosync/corosync,https://github.com/corosync/corosync,573,2020-08-08T06:32:53Z,2020-08-12T14:58:21Z,2020-08-12T14:58:21Z,CLOSED,False,76,10,5,https://github.com/liangxin1300,tools: use util_strtonum to check nodeid option and strict checking condition,1,[],https://github.com/corosync/corosync/pull/573,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/573,"Hi,
I was trying to use util_strtonum to replace atoi, since util_strtonum can do some validation jobs.
Changes in this PR include:
1. Use util_strtonum to check nodeid in cfgtool(-k and -a option)
As mentioned in man corosync.conf, nodeid should be a positive number, so after applying this patch:
# corosync-cfgtool -a -1
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 0
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 1sf
The nodeid was not valid, try a positive number

# corosync-cfgtool -a xxx
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 1
10.10.10.26

2. Check condition more strict in quorumtool
As long as containing any invalid characters, that value of option will be considered invalid
The current code:
# corosync-quorumtool -e 12sf
# Would not complain anything

Now apply this patch:
# corosync-quorumtool -e 12sf
New expected votes value was not valid, try a positive number

Empty case and overflow case
# empty case
# corosync-quorumtool -v """"
New votes value was not valid, try a positive number or zero

# overflow case
# corosync-cfgtool -a 12345678901234567890
The nodeid was not valid, try a positive number","Hi,
I was trying to use util_strtonum to replace atoi, since util_strtonum can do some validation jobs.
Changes in this PR include:
1. Use util_strtonum to check nodeid in cfgtool(-k and -a option)
As mentioned in man corosync.conf, nodeid should be a positive number, so after applying this patch:
# corosync-cfgtool -a -1
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 0
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 1sf
The nodeid was not valid, try a positive number

# corosync-cfgtool -a xxx
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 1
10.10.10.26

2. Check condition more strict in quorumtool
As long as containing any invalid characters, that value of option will be considered invalid
The current code:
# corosync-quorumtool -e 12sf
# Would not complain anything

Now apply this patch:
# corosync-quorumtool -e 12sf
New expected votes value was not valid, try a positive number

Empty case and overflow case
# empty case
# corosync-quorumtool -v """"
New votes value was not valid, try a positive number or zero

# overflow case
# corosync-cfgtool -a 12345678901234567890
The nodeid was not valid, try a positive number",True,{}
corosync/corosync,https://github.com/corosync/corosync,573,2020-08-08T06:32:53Z,2020-08-12T14:58:21Z,2020-08-12T14:58:21Z,CLOSED,False,76,10,5,https://github.com/liangxin1300,tools: use util_strtonum to check nodeid option and strict checking condition,1,[],https://github.com/corosync/corosync/pull/573,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/573#issuecomment-671202718,"Hi,
I was trying to use util_strtonum to replace atoi, since util_strtonum can do some validation jobs.
Changes in this PR include:
1. Use util_strtonum to check nodeid in cfgtool(-k and -a option)
As mentioned in man corosync.conf, nodeid should be a positive number, so after applying this patch:
# corosync-cfgtool -a -1
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 0
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 1sf
The nodeid was not valid, try a positive number

# corosync-cfgtool -a xxx
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 1
10.10.10.26

2. Check condition more strict in quorumtool
As long as containing any invalid characters, that value of option will be considered invalid
The current code:
# corosync-quorumtool -e 12sf
# Would not complain anything

Now apply this patch:
# corosync-quorumtool -e 12sf
New expected votes value was not valid, try a positive number

Empty case and overflow case
# empty case
# corosync-quorumtool -v """"
New votes value was not valid, try a positive number or zero

# overflow case
# corosync-cfgtool -a 12345678901234567890
The nodeid was not valid, try a positive number","@liangxin1300 Hi, I like the idea of removing atoi which is really unsafe, but patch itself has one small flaw, which is visible only for quorumtool -v parameter.
Try it with:
./corosync-quorumtool -v """"

This will parse empty string without any problem. Other options are safe, because they must be always bigger than 0.
Also if we are in the process of change, it makes sense to handle errno properly there (for overflows).
Again, example:
./corosync-cfgtool -a 12345678901234567890

result is max int32.
Example of safe strtoll usage is https://github.com/corosync/corosync-qdevice/blob/master/qdevices/utils.c function utils_strtonum. It initially sets errno to 0, checks both cases of null input and no invalid characters and also errno which is set on overflow.",True,{}
corosync/corosync,https://github.com/corosync/corosync,573,2020-08-08T06:32:53Z,2020-08-12T14:58:21Z,2020-08-12T14:58:21Z,CLOSED,False,76,10,5,https://github.com/liangxin1300,tools: use util_strtonum to check nodeid option and strict checking condition,1,[],https://github.com/corosync/corosync/pull/573,https://github.com/liangxin1300,3,https://github.com/corosync/corosync/pull/573#issuecomment-671245412,"Hi,
I was trying to use util_strtonum to replace atoi, since util_strtonum can do some validation jobs.
Changes in this PR include:
1. Use util_strtonum to check nodeid in cfgtool(-k and -a option)
As mentioned in man corosync.conf, nodeid should be a positive number, so after applying this patch:
# corosync-cfgtool -a -1
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 0
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 1sf
The nodeid was not valid, try a positive number

# corosync-cfgtool -a xxx
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 1
10.10.10.26

2. Check condition more strict in quorumtool
As long as containing any invalid characters, that value of option will be considered invalid
The current code:
# corosync-quorumtool -e 12sf
# Would not complain anything

Now apply this patch:
# corosync-quorumtool -e 12sf
New expected votes value was not valid, try a positive number

Empty case and overflow case
# empty case
# corosync-quorumtool -v """"
New votes value was not valid, try a positive number or zero

# overflow case
# corosync-cfgtool -a 12345678901234567890
The nodeid was not valid, try a positive number","Example of safe strtoll usage is https://github.com/corosync/corosync-qdevice/blob/master/qdevices/utils.c function utils_strtonum. It initially sets errno to 0, checks both cases of null input and no invalid characters and also errno which is set on overflow.

Thanks @jfriesse .
If I want to add similar function like utils_strtonum, where should I put it?",True,{}
corosync/corosync,https://github.com/corosync/corosync,573,2020-08-08T06:32:53Z,2020-08-12T14:58:21Z,2020-08-12T14:58:21Z,CLOSED,False,76,10,5,https://github.com/liangxin1300,tools: use util_strtonum to check nodeid option and strict checking condition,1,[],https://github.com/corosync/corosync/pull/573,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/573#issuecomment-671249455,"Hi,
I was trying to use util_strtonum to replace atoi, since util_strtonum can do some validation jobs.
Changes in this PR include:
1. Use util_strtonum to check nodeid in cfgtool(-k and -a option)
As mentioned in man corosync.conf, nodeid should be a positive number, so after applying this patch:
# corosync-cfgtool -a -1
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 0
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 1sf
The nodeid was not valid, try a positive number

# corosync-cfgtool -a xxx
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 1
10.10.10.26

2. Check condition more strict in quorumtool
As long as containing any invalid characters, that value of option will be considered invalid
The current code:
# corosync-quorumtool -e 12sf
# Would not complain anything

Now apply this patch:
# corosync-quorumtool -e 12sf
New expected votes value was not valid, try a positive number

Empty case and overflow case
# empty case
# corosync-quorumtool -v """"
New votes value was not valid, try a positive number or zero

# overflow case
# corosync-cfgtool -a 12345678901234567890
The nodeid was not valid, try a positive number","@liangxin1300 That's a good question. The only common library used in tools is common_lib` probably there? (give it a try, I'm not 100% sure if it really compiles in for every tool).",True,{}
corosync/corosync,https://github.com/corosync/corosync,573,2020-08-08T06:32:53Z,2020-08-12T14:58:21Z,2020-08-12T14:58:21Z,CLOSED,False,76,10,5,https://github.com/liangxin1300,tools: use util_strtonum to check nodeid option and strict checking condition,1,[],https://github.com/corosync/corosync/pull/573,https://github.com/liangxin1300,5,https://github.com/corosync/corosync/pull/573#issuecomment-671674923,"Hi,
I was trying to use util_strtonum to replace atoi, since util_strtonum can do some validation jobs.
Changes in this PR include:
1. Use util_strtonum to check nodeid in cfgtool(-k and -a option)
As mentioned in man corosync.conf, nodeid should be a positive number, so after applying this patch:
# corosync-cfgtool -a -1
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 0
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 1sf
The nodeid was not valid, try a positive number

# corosync-cfgtool -a xxx
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 1
10.10.10.26

2. Check condition more strict in quorumtool
As long as containing any invalid characters, that value of option will be considered invalid
The current code:
# corosync-quorumtool -e 12sf
# Would not complain anything

Now apply this patch:
# corosync-quorumtool -e 12sf
New expected votes value was not valid, try a positive number

Empty case and overflow case
# empty case
# corosync-quorumtool -v """"
New votes value was not valid, try a positive number or zero

# overflow case
# corosync-cfgtool -a 12345678901234567890
The nodeid was not valid, try a positive number","Hi @jfriesse ,
I'm trying to put util_strtonum into common_lib/util.c, now it can handle empty case and overflow case.
Could you please take a look?
Thanks!",True,{}
corosync/corosync,https://github.com/corosync/corosync,573,2020-08-08T06:32:53Z,2020-08-12T14:58:21Z,2020-08-12T14:58:21Z,CLOSED,False,76,10,5,https://github.com/liangxin1300,tools: use util_strtonum to check nodeid option and strict checking condition,1,[],https://github.com/corosync/corosync/pull/573,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/573#issuecomment-671779733,"Hi,
I was trying to use util_strtonum to replace atoi, since util_strtonum can do some validation jobs.
Changes in this PR include:
1. Use util_strtonum to check nodeid in cfgtool(-k and -a option)
As mentioned in man corosync.conf, nodeid should be a positive number, so after applying this patch:
# corosync-cfgtool -a -1
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 0
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 1sf
The nodeid was not valid, try a positive number

# corosync-cfgtool -a xxx
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 1
10.10.10.26

2. Check condition more strict in quorumtool
As long as containing any invalid characters, that value of option will be considered invalid
The current code:
# corosync-quorumtool -e 12sf
# Would not complain anything

Now apply this patch:
# corosync-quorumtool -e 12sf
New expected votes value was not valid, try a positive number

Empty case and overflow case
# empty case
# corosync-quorumtool -v """"
New votes value was not valid, try a positive number or zero

# overflow case
# corosync-cfgtool -a 12345678901234567890
The nodeid was not valid, try a positive number","Hi @liangxin1300,
yeah. patch is good, but It somehow feels not right. We should either have it used everywhere (even in corosync binary) and then it would make sense to have header in nclude/corosync dir (could be noinst) or probably only in tools directory if only tools will use it.
First option would need to careful thinking (and it is actually quite a project). Second option seems to be easier and probably good enough for now.
So would you mind to move utils.c/utils.h to tools and compile these two bbinaries with them? (and sorry for directing you to commion_lib, it seemed legit, but it turned out to be not that great).",True,{}
corosync/corosync,https://github.com/corosync/corosync,573,2020-08-08T06:32:53Z,2020-08-12T14:58:21Z,2020-08-12T14:58:21Z,CLOSED,False,76,10,5,https://github.com/liangxin1300,tools: use util_strtonum to check nodeid option and strict checking condition,1,[],https://github.com/corosync/corosync/pull/573,https://github.com/liangxin1300,7,https://github.com/corosync/corosync/pull/573#issuecomment-671820711,"Hi,
I was trying to use util_strtonum to replace atoi, since util_strtonum can do some validation jobs.
Changes in this PR include:
1. Use util_strtonum to check nodeid in cfgtool(-k and -a option)
As mentioned in man corosync.conf, nodeid should be a positive number, so after applying this patch:
# corosync-cfgtool -a -1
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 0
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 1sf
The nodeid was not valid, try a positive number

# corosync-cfgtool -a xxx
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 1
10.10.10.26

2. Check condition more strict in quorumtool
As long as containing any invalid characters, that value of option will be considered invalid
The current code:
# corosync-quorumtool -e 12sf
# Would not complain anything

Now apply this patch:
# corosync-quorumtool -e 12sf
New expected votes value was not valid, try a positive number

Empty case and overflow case
# empty case
# corosync-quorumtool -v """"
New votes value was not valid, try a positive number or zero

# overflow case
# corosync-cfgtool -a 12345678901234567890
The nodeid was not valid, try a positive number","Hi @jfriesse ,
Changed to tools/ now, please review:)",True,{}
corosync/corosync,https://github.com/corosync/corosync,573,2020-08-08T06:32:53Z,2020-08-12T14:58:21Z,2020-08-12T14:58:21Z,CLOSED,False,76,10,5,https://github.com/liangxin1300,tools: use util_strtonum to check nodeid option and strict checking condition,1,[],https://github.com/corosync/corosync/pull/573,https://github.com/jfriesse,8,https://github.com/corosync/corosync/pull/573#issuecomment-672062547,"Hi,
I was trying to use util_strtonum to replace atoi, since util_strtonum can do some validation jobs.
Changes in this PR include:
1. Use util_strtonum to check nodeid in cfgtool(-k and -a option)
As mentioned in man corosync.conf, nodeid should be a positive number, so after applying this patch:
# corosync-cfgtool -a -1
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 0
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 1sf
The nodeid was not valid, try a positive number

# corosync-cfgtool -a xxx
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 1
10.10.10.26

2. Check condition more strict in quorumtool
As long as containing any invalid characters, that value of option will be considered invalid
The current code:
# corosync-quorumtool -e 12sf
# Would not complain anything

Now apply this patch:
# corosync-quorumtool -e 12sf
New expected votes value was not valid, try a positive number

Empty case and overflow case
# empty case
# corosync-quorumtool -v """"
New votes value was not valid, try a positive number or zero

# overflow case
# corosync-cfgtool -a 12345678901234567890
The nodeid was not valid, try a positive number","@liangxin1300 Hi, thank you for the update. Patch is now almost perfect with really small nitpick:
+#ifndef COROSYNC_COMMON_LIB_UTIL_H_DEFINED
+#define COROSYNC_COMMON_LIB_UTIL_H_DEFINED

is leftover and should be changed to something else (tools_util_h?)",True,{}
corosync/corosync,https://github.com/corosync/corosync,573,2020-08-08T06:32:53Z,2020-08-12T14:58:21Z,2020-08-12T14:58:21Z,CLOSED,False,76,10,5,https://github.com/liangxin1300,tools: use util_strtonum to check nodeid option and strict checking condition,1,[],https://github.com/corosync/corosync/pull/573,https://github.com/liangxin1300,9,https://github.com/corosync/corosync/pull/573#issuecomment-672389921,"Hi,
I was trying to use util_strtonum to replace atoi, since util_strtonum can do some validation jobs.
Changes in this PR include:
1. Use util_strtonum to check nodeid in cfgtool(-k and -a option)
As mentioned in man corosync.conf, nodeid should be a positive number, so after applying this patch:
# corosync-cfgtool -a -1
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 0
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 1sf
The nodeid was not valid, try a positive number

# corosync-cfgtool -a xxx
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 1
10.10.10.26

2. Check condition more strict in quorumtool
As long as containing any invalid characters, that value of option will be considered invalid
The current code:
# corosync-quorumtool -e 12sf
# Would not complain anything

Now apply this patch:
# corosync-quorumtool -e 12sf
New expected votes value was not valid, try a positive number

Empty case and overflow case
# empty case
# corosync-quorumtool -v """"
New votes value was not valid, try a positive number or zero

# overflow case
# corosync-cfgtool -a 12345678901234567890
The nodeid was not valid, try a positive number","Hi @jfriesse ,
Changed, and also backport to needle in #574 :)",True,{}
corosync/corosync,https://github.com/corosync/corosync,573,2020-08-08T06:32:53Z,2020-08-12T14:58:21Z,2020-08-12T14:58:21Z,CLOSED,False,76,10,5,https://github.com/liangxin1300,tools: use util_strtonum to check nodeid option and strict checking condition,1,[],https://github.com/corosync/corosync/pull/573,https://github.com/jfriesse,10,https://github.com/corosync/corosync/pull/573#issuecomment-672924509,"Hi,
I was trying to use util_strtonum to replace atoi, since util_strtonum can do some validation jobs.
Changes in this PR include:
1. Use util_strtonum to check nodeid in cfgtool(-k and -a option)
As mentioned in man corosync.conf, nodeid should be a positive number, so after applying this patch:
# corosync-cfgtool -a -1
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 0
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 1sf
The nodeid was not valid, try a positive number

# corosync-cfgtool -a xxx
The nodeid was not valid, try a positive number

# corosync-cfgtool -a 1
10.10.10.26

2. Check condition more strict in quorumtool
As long as containing any invalid characters, that value of option will be considered invalid
The current code:
# corosync-quorumtool -e 12sf
# Would not complain anything

Now apply this patch:
# corosync-quorumtool -e 12sf
New expected votes value was not valid, try a positive number

Empty case and overflow case
# empty case
# corosync-quorumtool -v """"
New votes value was not valid, try a positive number or zero

# overflow case
# corosync-cfgtool -a 12345678901234567890
The nodeid was not valid, try a positive number","@liangxin1300 It's perfect now so ACK and merged as a fb5e0fa.
Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,574,2020-08-08T07:23:17Z,2020-08-12T15:07:47Z,2020-08-12T15:07:47Z,CLOSED,False,76,10,5,https://github.com/liangxin1300,[needle] tools: use util_strtonum to check nodeid option and strict checking condition,1,[],https://github.com/corosync/corosync/pull/574,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/574,backport from #573,backport from #573,True,{}
corosync/corosync,https://github.com/corosync/corosync,574,2020-08-08T07:23:17Z,2020-08-12T15:07:47Z,2020-08-12T15:07:47Z,CLOSED,False,76,10,5,https://github.com/liangxin1300,[needle] tools: use util_strtonum to check nodeid option and strict checking condition,1,[],https://github.com/corosync/corosync/pull/574,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/574#issuecomment-672931016,backport from #573,"@liangxin1300 Thank you for the backport. As with master, nice patch so ACK and merged as a c7e3045.
Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,575,2020-08-10T02:20:52Z,2020-08-11T07:47:32Z,2020-08-11T07:47:32Z,CLOSED,False,7,2,1,https://github.com/liangxin1300,cfgtool: enhancement -a option,1,[],https://github.com/corosync/corosync/pull/575,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/575,"Hi,
I think it's better to add return code for ""-a"" option, and give error message when nodeid node exist.
Thanks!","Hi,
I think it's better to add return code for ""-a"" option, and give error message when nodeid node exist.
Thanks!",True,{}
corosync/corosync,https://github.com/corosync/corosync,575,2020-08-10T02:20:52Z,2020-08-11T07:47:32Z,2020-08-11T07:47:32Z,CLOSED,False,7,2,1,https://github.com/liangxin1300,cfgtool: enhancement -a option,1,[],https://github.com/corosync/corosync/pull/575,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/575#issuecomment-671787396,"Hi,
I think it's better to add return code for ""-a"" option, and give error message when nodeid node exist.
Thanks!","@liangxin1300 Almost overlooked this PR. Yeah, I like it. It may break some tools compatibility, so definitivelly not for needle, but next 3 is going to be 3.1 because of big changes in reload code, so small incompatibility in cfgtool is fine by me. so ACK and merged as a e741f6a.
Thank you for nice patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,576,2020-08-17T06:30:51Z,2020-08-18T16:17:37Z,2020-08-18T16:17:37Z,CLOSED,False,8,0,1,https://github.com/liangxin1300,cfgtool: give error message and EXIT_FAILURE return code for -i option,1,[],https://github.com/corosync/corosync/pull/576,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/576,"Hi @jfriesse ,
Changes include when giving wrong value for -i option:

set EXIT_FAILURE return code
give error message like %s doesn't match any IP address or link id\n","Hi @jfriesse ,
Changes include when giving wrong value for -i option:

set EXIT_FAILURE return code
give error message like %s doesn't match any IP address or link id\n",True,{}
corosync/corosync,https://github.com/corosync/corosync,576,2020-08-17T06:30:51Z,2020-08-18T16:17:37Z,2020-08-18T16:17:37Z,CLOSED,False,8,0,1,https://github.com/liangxin1300,cfgtool: give error message and EXIT_FAILURE return code for -i option,1,[],https://github.com/corosync/corosync/pull/576,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/576#issuecomment-674863205,"Hi @jfriesse ,
Changes include when giving wrong value for -i option:

set EXIT_FAILURE return code
give error message like %s doesn't match any IP address or link id\n","Hi @liangxin1300. Idea is good, but patch is wrong. Just try to configure more links and you will see the result. Example:
# corosync-cfgtool -s
Printing link status.
Local node ID 5
LINK ID 0
	addr	= LINK1_IP
	status:
		nodeid  5:	localhost
		nodeid  6:	disconnected
LINK ID 1
	addr	= LINK2_IP
	status:
		nodeid  5:	localhost
		nodeid  6:	disconnected
# corosync-cfgtool -s -i LINK2_IP
Printing link status.
Local node ID 5
LINK1_IP doesn't match any IP address or link id
LINK ID 1
	addr	= LINK2_IP
	status:
		nodeid  5:	localhost
		nodeid  6:	disconnected
# echo $?
1

Error message should be displayed (and error code returned) only when there is really no matching interface.",True,{}
corosync/corosync,https://github.com/corosync/corosync,576,2020-08-17T06:30:51Z,2020-08-18T16:17:37Z,2020-08-18T16:17:37Z,CLOSED,False,8,0,1,https://github.com/liangxin1300,cfgtool: give error message and EXIT_FAILURE return code for -i option,1,[],https://github.com/corosync/corosync/pull/576,https://github.com/liangxin1300,3,https://github.com/corosync/corosync/pull/576#issuecomment-674959175,"Hi @jfriesse ,
Changes include when giving wrong value for -i option:

set EXIT_FAILURE return code
give error message like %s doesn't match any IP address or link id\n","Hi @jfriesse ,
Thanks for pointing that, already changed out of loop, please review!",True,{}
corosync/corosync,https://github.com/corosync/corosync,576,2020-08-17T06:30:51Z,2020-08-18T16:17:37Z,2020-08-18T16:17:37Z,CLOSED,False,8,0,1,https://github.com/liangxin1300,cfgtool: give error message and EXIT_FAILURE return code for -i option,1,[],https://github.com/corosync/corosync/pull/576,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/576#issuecomment-675576218,"Hi @jfriesse ,
Changes include when giving wrong value for -i option:

set EXIT_FAILURE return code
give error message like %s doesn't match any IP address or link id\n","@liangxin1300 Thank you for quick fix. Now it is ACK and merged as a c02a69a
Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,577,2020-08-17T07:17:52Z,2020-08-17T13:01:15Z,2020-08-17T13:01:33Z,CLOSED,False,2,0,1,https://github.com/liangxin1300,cmapctl: return EXIT_FAILURE for -g and -d option while error,1,[],https://github.com/corosync/corosync/pull/577,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/577,"Hi @jfriesse ,
I think it's better to return EXIT_FAILURE while can't get or can't delete key for -g and -d options.
What do you think?
Thanks!","Hi @jfriesse ,
I think it's better to return EXIT_FAILURE while can't get or can't delete key for -g and -d options.
What do you think?
Thanks!",True,{}
corosync/corosync,https://github.com/corosync/corosync,577,2020-08-17T07:17:52Z,2020-08-17T13:01:15Z,2020-08-17T13:01:33Z,CLOSED,False,2,0,1,https://github.com/liangxin1300,cmapctl: return EXIT_FAILURE for -g and -d option while error,1,[],https://github.com/corosync/corosync/pull/577,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/577#issuecomment-674866953,"Hi @jfriesse ,
I think it's better to return EXIT_FAILURE while can't get or can't delete key for -g and -d options.
What do you think?
Thanks!","@liangxin1300 Thank you for nice patch, ACK and merged as a 9105d94",True,{}
corosync/corosync,https://github.com/corosync/corosync,578,2020-08-17T09:24:22Z,2020-08-17T13:07:07Z,2020-08-17T13:07:07Z,CLOSED,False,11,9,1,https://github.com/liangxin1300,Doc: update output of -s and -b options for corosync-cfgtool,1,[],https://github.com/corosync/corosync/pull/578,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/578,"Synced with latest outputs of -s and -b options for corosync-cfgtool
Thanks for review!","Synced with latest outputs of -s and -b options for corosync-cfgtool
Thanks for review!",True,{}
corosync/corosync,https://github.com/corosync/corosync,578,2020-08-17T09:24:22Z,2020-08-17T13:07:07Z,2020-08-17T13:07:07Z,CLOSED,False,11,9,1,https://github.com/liangxin1300,Doc: update output of -s and -b options for corosync-cfgtool,1,[],https://github.com/corosync/corosync/pull/578,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/578#issuecomment-674870061,"Synced with latest outputs of -s and -b options for corosync-cfgtool
Thanks for review!","@liangxin1300 Hi, nice patch (I'm wondering how I missed to update mp when doing the cfgtool patch...). So ACK and I've merged patch with really small correction (replaced n3 with n33 so they match previous example) as a d3224df
Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,579,2020-08-19T03:21:35Z,2020-08-19T15:33:17Z,2020-08-19T15:33:17Z,CLOSED,False,42,45,1,https://github.com/liangxin1300,quorumtool: show help message without service running,1,[],https://github.com/corosync/corosync/pull/579,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/579,"Hi,
I think it will be better to show help message of corosync-quorumtool even without corosync service running:)
Please review when you have time.
Thank you!","Hi,
I think it will be better to show help message of corosync-quorumtool even without corosync service running:)
Please review when you have time.
Thank you!",True,{}
corosync/corosync,https://github.com/corosync/corosync,579,2020-08-19T03:21:35Z,2020-08-19T15:33:17Z,2020-08-19T15:33:17Z,CLOSED,False,42,45,1,https://github.com/liangxin1300,quorumtool: show help message without service running,1,[],https://github.com/corosync/corosync/pull/579,https://github.com/liangxin1300,2,https://github.com/corosync/corosync/pull/579#issuecomment-675944730,"Hi,
I think it will be better to show help message of corosync-quorumtool even without corosync service running:)
Please review when you have time.
Thank you!","Hi @jfriesse
To avoid error, I added this code:
case CMD_UNKNOWN:
case CMD_SHOWUSAGE:
        break;

How do you think about it?",True,{}
corosync/corosync,https://github.com/corosync/corosync,579,2020-08-19T03:21:35Z,2020-08-19T15:33:17Z,2020-08-19T15:33:17Z,CLOSED,False,42,45,1,https://github.com/liangxin1300,quorumtool: show help message without service running,1,[],https://github.com/corosync/corosync/pull/579,https://github.com/liangxin1300,3,https://github.com/corosync/corosync/pull/579#issuecomment-675960250,"Hi,
I think it will be better to show help message of corosync-quorumtool even without corosync service running:)
Please review when you have time.
Thank you!","Or, how about change in this way: (Remove CMD_UNKNOWN and CMD_SHOWUSAGE)
                case 'V':
                        printf(""corosync-quorumtool version: %s\n"", VERSION);
                        exit(0);
                case 'h':
                        show_usage(argv[0]);
                        exit(EXIT_SUCCESS);
                        break;
                case ':':
                case '?':
                default:
                        show_usage(argv[0]);
                        exit(EXIT_FAILURE);
                        break;
                }
        }

        if (init_all()) {
                close_all();
                exit(EXIT_FAILURE);
        }

        switch (command_opt) {",True,{}
corosync/corosync,https://github.com/corosync/corosync,579,2020-08-19T03:21:35Z,2020-08-19T15:33:17Z,2020-08-19T15:33:17Z,CLOSED,False,42,45,1,https://github.com/liangxin1300,quorumtool: show help message without service running,1,[],https://github.com/corosync/corosync/pull/579,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/579#issuecomment-675966262,"Hi,
I think it will be better to show help message of corosync-quorumtool even without corosync service running:)
Please review when you have time.
Thank you!","@liangxin1300 Yeah, removal of CMD_UNKNOWN and CMD_SHOWUSAGE seems to best. Also when you are changing the code, please change also exit(0); to exit(EXIT_SUCCESS) (just noticed it when reading your example)",True,{}
corosync/corosync,https://github.com/corosync/corosync,579,2020-08-19T03:21:35Z,2020-08-19T15:33:17Z,2020-08-19T15:33:17Z,CLOSED,False,42,45,1,https://github.com/liangxin1300,quorumtool: show help message without service running,1,[],https://github.com/corosync/corosync/pull/579,https://github.com/liangxin1300,5,https://github.com/corosync/corosync/pull/579#issuecomment-676050083,"Hi,
I think it will be better to show help message of corosync-quorumtool even without corosync service running:)
Please review when you have time.
Thank you!","@liangxin1300 Yeah, removal of CMD_UNKNOWN and CMD_SHOWUSAGE seems to best. Also when you are changing the code, please change also exit(0); to exit(EXIT_SUCCESS) (just noticed it when reading your example)

@jfriesse Already changed! Thanks!",True,{}
corosync/corosync,https://github.com/corosync/corosync,579,2020-08-19T03:21:35Z,2020-08-19T15:33:17Z,2020-08-19T15:33:17Z,CLOSED,False,42,45,1,https://github.com/liangxin1300,quorumtool: show help message without service running,1,[],https://github.com/corosync/corosync/pull/579,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/579#issuecomment-676499151,"Hi,
I think it will be better to show help message of corosync-quorumtool even without corosync service running:)
Please review when you have time.
Thank you!","@liangxin1300 Now it looks perfect so ACK and merged as a 303c869
Thank you for the patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,580,2020-08-19T12:40:36Z,2020-08-19T15:38:35Z,2020-08-19T15:38:35Z,CLOSED,False,42,45,1,https://github.com/liangxin1300,[needle] quorumtool: show help message without service running,1,[],https://github.com/corosync/corosync/pull/580,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/580,"Hi @jfriesse ,
This is backport pr from #579","Hi @jfriesse ,
This is backport pr from #579",True,{}
corosync/corosync,https://github.com/corosync/corosync,580,2020-08-19T12:40:36Z,2020-08-19T15:38:35Z,2020-08-19T15:38:35Z,CLOSED,False,42,45,1,https://github.com/liangxin1300,[needle] quorumtool: show help message without service running,1,[],https://github.com/corosync/corosync/pull/580,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/580#issuecomment-676502168,"Hi @jfriesse ,
This is backport pr from #579","Hi @liangxin1300, thank you for the backport. ACK and merged as a ab5a455
Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,581,2020-08-19T12:46:22Z,2020-08-19T15:23:34Z,2020-08-19T15:23:34Z,CLOSED,False,2,0,1,https://github.com/liangxin1300,[needle] cmapctl: return EXIT_FAILURE on failure,1,[],https://github.com/corosync/corosync/pull/581,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/581,"Hi @jfriesse ,
This is backport pr from #577","Hi @jfriesse ,
This is backport pr from #577",True,{}
corosync/corosync,https://github.com/corosync/corosync,581,2020-08-19T12:46:22Z,2020-08-19T15:23:34Z,2020-08-19T15:23:34Z,CLOSED,False,2,0,1,https://github.com/liangxin1300,[needle] cmapctl: return EXIT_FAILURE on failure,1,[],https://github.com/corosync/corosync/pull/581,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/581#issuecomment-676493674,"Hi @jfriesse ,
This is backport pr from #577","@liangxin1300 ACK and merged as a 65e5082.
Thank you for the patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,582,2020-08-20T06:09:35Z,2020-08-20T12:29:48Z,2020-08-20T12:29:48Z,CLOSED,False,9,13,1,https://github.com/liangxin1300,quorumtool: strict check for -o option,1,[],https://github.com/corosync/corosync/pull/582,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/582,"Improve for these cases:
corosync-quorumtool -o axx
corosync-quorumtool -o nfs
corosync-quorumtool -o ixxx

Which currently will give right output, should be checked more strict","Improve for these cases:
corosync-quorumtool -o axx
corosync-quorumtool -o nfs
corosync-quorumtool -o ixxx

Which currently will give right output, should be checked more strict",True,{}
corosync/corosync,https://github.com/corosync/corosync,582,2020-08-20T06:09:35Z,2020-08-20T12:29:48Z,2020-08-20T12:29:48Z,CLOSED,False,9,13,1,https://github.com/liangxin1300,quorumtool: strict check for -o option,1,[],https://github.com/corosync/corosync/pull/582,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/582#issuecomment-677635554,"Improve for these cases:
corosync-quorumtool -o axx
corosync-quorumtool -o nfs
corosync-quorumtool -o ixxx

Which currently will give right output, should be checked more strict","Hi @liangxin1300,
nice patch so ACK and merged as a 56f9f19.
Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,583,2020-08-20T08:12:02Z,2020-08-21T09:21:32Z,2020-08-21T09:21:32Z,CLOSED,False,4,0,1,https://github.com/liangxin1300,cmapctl: check NULL for key type and value to avoid segmentation fault,1,[],https://github.com/corosync/corosync/pull/583,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/583,"Hi,
I found that when running corosync-cmapctl -p file(the file not contain key_type and key_value), there will raise segmentation fault.
To avoid that, I suggest to validate the parameters of set_key function
Thanks for review this!:)","Hi,
I found that when running corosync-cmapctl -p file(the file not contain key_type and key_value), there will raise segmentation fault.
To avoid that, I suggest to validate the parameters of set_key function
Thanks for review this!:)",True,{}
corosync/corosync,https://github.com/corosync/corosync,583,2020-08-20T08:12:02Z,2020-08-21T09:21:32Z,2020-08-21T09:21:32Z,CLOSED,False,4,0,1,https://github.com/liangxin1300,cmapctl: check NULL for key type and value to avoid segmentation fault,1,[],https://github.com/corosync/corosync/pull/583,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/583#issuecomment-677622347,"Hi,
I found that when running corosync-cmapctl -p file(the file not contain key_type and key_value), there will raise segmentation fault.
To avoid that, I suggest to validate the parameters of set_key function
Thanks for review this!:)","@liangxin1300 Hi, yeah, whole -p is just hacky and pretty dodgy. I was thinking quite a few times to either remove it completely or fix it properly. It is calling set_key which was always designed to handle just one set action (and that is the reason for exit in there).
Now to the patch. There are multiple things wrong:

key_name can be empty because this is handled by cmap_set_* functions
key_type_s can be empty, again, and it is properly handled by convert_name_to_type
key_value_s can be empty string and it is (correctly) stored into cmap.
I think NULL checks really belongs to read_in_config_file

So to conclude, please move checks for NULL values to read_in_config_file and it should be good to go.",True,{}
corosync/corosync,https://github.com/corosync/corosync,583,2020-08-20T08:12:02Z,2020-08-21T09:21:32Z,2020-08-21T09:21:32Z,CLOSED,False,4,0,1,https://github.com/liangxin1300,cmapctl: check NULL for key type and value to avoid segmentation fault,1,[],https://github.com/corosync/corosync/pull/583,https://github.com/liangxin1300,3,https://github.com/corosync/corosync/pull/583#issuecomment-678048135,"Hi,
I found that when running corosync-cmapctl -p file(the file not contain key_type and key_value), there will raise segmentation fault.
To avoid that, I suggest to validate the parameters of set_key function
Thanks for review this!:)","Hi @jfriesse ,
Already changed in read_in_config_file function
Thanks!",True,{}
corosync/corosync,https://github.com/corosync/corosync,583,2020-08-20T08:12:02Z,2020-08-21T09:21:32Z,2020-08-21T09:21:32Z,CLOSED,False,4,0,1,https://github.com/liangxin1300,cmapctl: check NULL for key type and value to avoid segmentation fault,1,[],https://github.com/corosync/corosync/pull/583,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/583#issuecomment-678137698,"Hi,
I found that when running corosync-cmapctl -p file(the file not contain key_type and key_value), there will raise segmentation fault.
To avoid that, I suggest to validate the parameters of set_key function
Thanks for review this!:)","Hi @liangxin1300, it now looks perfect so ACK and merged as a ec889e8.
Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,584,2020-08-20T16:24:43Z,2020-08-21T09:25:50Z,2020-08-21T09:26:22Z,CLOSED,False,12,3,1,https://github.com/liangxin1300,cmapctl: return EXIT_FAILURE if no result print for ACTION_PRINT_PREFIX,1,[],https://github.com/corosync/corosync/pull/584,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/584,"Hi @jfriesse ,
Consider this case:
corosync-cmapctl no_such_key

I prefer on this time, return code should be 1, similar like no result print when using grep command
While:
corosync-cmapctl no_such_key totem

Since it can print all results starts with totem, return code should still be 0","Hi @jfriesse ,
Consider this case:
corosync-cmapctl no_such_key

I prefer on this time, return code should be 1, similar like no result print when using grep command
While:
corosync-cmapctl no_such_key totem

Since it can print all results starts with totem, return code should still be 0",True,{}
corosync/corosync,https://github.com/corosync/corosync,584,2020-08-20T16:24:43Z,2020-08-21T09:25:50Z,2020-08-21T09:26:22Z,CLOSED,False,12,3,1,https://github.com/liangxin1300,cmapctl: return EXIT_FAILURE if no result print for ACTION_PRINT_PREFIX,1,[],https://github.com/corosync/corosync/pull/584,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/584#issuecomment-678139532,"Hi @jfriesse ,
Consider this case:
corosync-cmapctl no_such_key

I prefer on this time, return code should be 1, similar like no result print when using grep command
While:
corosync-cmapctl no_such_key totem

Since it can print all results starts with totem, return code should still be 0","@liangxin1300: I Like the idea and patch so ACK and merged as a 7f64a1d
Please note this changes behavior so it is not candidate for needle.
Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,585,2020-08-21T08:50:18Z,2020-08-21T09:18:35Z,2020-08-21T09:18:36Z,CLOSED,False,9,13,1,https://github.com/liangxin1300,[needle] quorumtool: strict check for -o option,1,[],https://github.com/corosync/corosync/pull/585,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/585,"Hi @jfriesse
This is the backport pr from #582
Thank you!","Hi @jfriesse
This is the backport pr from #582
Thank you!",True,{}
corosync/corosync,https://github.com/corosync/corosync,585,2020-08-21T08:50:18Z,2020-08-21T09:18:35Z,2020-08-21T09:18:36Z,CLOSED,False,9,13,1,https://github.com/liangxin1300,[needle] quorumtool: strict check for -o option,1,[],https://github.com/corosync/corosync/pull/585,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/585#issuecomment-678136437,"Hi @jfriesse
This is the backport pr from #582
Thank you!",Hi @liangxin1300 . Thank you for backport which is now merged it as a fb73a22,True,{}
corosync/corosync,https://github.com/corosync/corosync,586,2020-08-21T14:25:48Z,2020-08-24T08:32:16Z,2020-08-24T08:32:17Z,CLOSED,False,4,0,1,https://github.com/liangxin1300,[needle] cmapctl: check NULL for key type and value for -p,1,[],https://github.com/corosync/corosync/pull/586,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/586,"Hi @jfriesse ,
This is backport PR from #583
Thanks!","Hi @jfriesse ,
This is backport PR from #583
Thanks!",True,{}
corosync/corosync,https://github.com/corosync/corosync,586,2020-08-21T14:25:48Z,2020-08-24T08:32:16Z,2020-08-24T08:32:17Z,CLOSED,False,4,0,1,https://github.com/liangxin1300,[needle] cmapctl: check NULL for key type and value for -p,1,[],https://github.com/corosync/corosync/pull/586,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/586#issuecomment-678988089,"Hi @jfriesse ,
This is backport PR from #583
Thanks!",Thanks @liangxin1300 . Merged as a 4e61fb0,True,{}
corosync/corosync,https://github.com/corosync/corosync,587,2020-09-01T03:05:38Z,2020-09-03T14:01:49Z,2020-09-03T14:01:50Z,CLOSED,False,6,6,1,https://github.com/liangxin1300,totemconfig: validate totem.transport value,1,[],https://github.com/corosync/corosync/pull/587,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/587,"Hi @jfriesse ,
I think it should be better to validate totem.transport if this key was specified by user
Thanks!","Hi @jfriesse ,
I think it should be better to validate totem.transport if this key was specified by user
Thanks!",True,{}
corosync/corosync,https://github.com/corosync/corosync,587,2020-09-01T03:05:38Z,2020-09-03T14:01:49Z,2020-09-03T14:01:50Z,CLOSED,False,6,6,1,https://github.com/liangxin1300,totemconfig: validate totem.transport value,1,[],https://github.com/corosync/corosync/pull/587,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/587#issuecomment-686513322,"Hi @jfriesse ,
I think it should be better to validate totem.transport if this key was specified by user
Thanks!","Hi @liangxin1300,
I like the patch so ACK and merged as a f0e1eaf.
Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,588,2020-09-01T13:28:20Z,2020-09-29T13:53:22Z,2020-09-29T13:53:26Z,CLOSED,False,6,2,1,https://github.com/jfriesse,totemsrp: Move token received callback,1,[],https://github.com/corosync/corosync/pull/588,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/588,Trigger token received callback only for valid token.,Trigger token received callback only for valid token.,True,{}
corosync/corosync,https://github.com/corosync/corosync,588,2020-09-01T13:28:20Z,2020-09-29T13:53:22Z,2020-09-29T13:53:26Z,CLOSED,False,6,2,1,https://github.com/jfriesse,totemsrp: Move token received callback,1,[],https://github.com/corosync/corosync/pull/588,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/588#issuecomment-684856627,Trigger token received callback only for valid token.,"@chrissie-c I would like to ask you for a bit more careful review because it is really risky
@sdake Sorry for bothering you, but this patch is somehow risky and in very old code which you may know better than all of us. I think it make sense to call callback only for really processed token, but maybe there was a reason why call of callbacks was were it was.",True,{}
corosync/corosync,https://github.com/corosync/corosync,588,2020-09-01T13:28:20Z,2020-09-29T13:53:22Z,2020-09-29T13:53:26Z,CLOSED,False,6,2,1,https://github.com/jfriesse,totemsrp: Move token received callback,1,[],https://github.com/corosync/corosync/pull/588,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/588#issuecomment-700719572,Trigger token received callback only for valid token.,"@chrissie-c Thanks a lot for the review! I've gave patch few sts running tries and it seems to work fine, so I've merged patch as a 40d636e .",True,{}
corosync/corosync,https://github.com/corosync/corosync,589,2020-09-09T07:50:42Z,2020-09-17T13:27:41Z,2020-09-17T13:27:42Z,CLOSED,False,46,2,2,https://github.com/liangxin1300,cfg: enhance message_handler_req_lib_cfg_killnode function,1,[],https://github.com/corosync/corosync/pull/589,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/589,"Hi,
I think it will be user friendly to raise an error when execute -k nodeid and when the nodeid not exist:)
Thanks!","Hi,
I think it will be user friendly to raise an error when execute -k nodeid and when the nodeid not exist:)
Thanks!",True,{}
corosync/corosync,https://github.com/corosync/corosync,589,2020-09-09T07:50:42Z,2020-09-17T13:27:41Z,2020-09-17T13:27:42Z,CLOSED,False,46,2,2,https://github.com/liangxin1300,cfg: enhance message_handler_req_lib_cfg_killnode function,1,[],https://github.com/corosync/corosync/pull/589,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/589#issuecomment-689462470,"Hi,
I think it will be user friendly to raise an error when execute -k nodeid and when the nodeid not exist:)
Thanks!","Hi @liangxin1300. I can agree it would be nice to check if node was successfully killed or not and non-existing node id is probably the most common reason why it hasn't happened, but current code will not work with udp without nodelist. Multicast udp without nodelist is somehow deprecated, but it still exists and we cannot break compatibility. Solution is to check ""runtime.members."" subtree instead of nodelist.
Also IMHO this patch is really on wrong place. It should be fixed in the cfg.c service so return value reflect if node was killed or not. It is somehow doable so if you think it make sense to spent time with implementation you can just enhance cfg.c function message_handler_req_lib_cfg_killnode and there check if node is member or not. That can be done two ways (at least) - 1. check cmap runtime.members. key (so similarly as with cfgtool) or 2. implement sync_init and store members locally.",True,{}
corosync/corosync,https://github.com/corosync/corosync,589,2020-09-09T07:50:42Z,2020-09-17T13:27:41Z,2020-09-17T13:27:42Z,CLOSED,False,46,2,2,https://github.com/liangxin1300,cfg: enhance message_handler_req_lib_cfg_killnode function,1,[],https://github.com/corosync/corosync/pull/589,https://github.com/liangxin1300,3,https://github.com/corosync/corosync/pull/589#issuecomment-689471638,"Hi,
I think it will be user friendly to raise an error when execute -k nodeid and when the nodeid not exist:)
Thanks!","OK, thanks for clarifying!",True,{}
corosync/corosync,https://github.com/corosync/corosync,589,2020-09-09T07:50:42Z,2020-09-17T13:27:41Z,2020-09-17T13:27:42Z,CLOSED,False,46,2,2,https://github.com/liangxin1300,cfg: enhance message_handler_req_lib_cfg_killnode function,1,[],https://github.com/corosync/corosync/pull/589,https://github.com/liangxin1300,4,https://github.com/corosync/corosync/pull/589#issuecomment-690883180,"Hi,
I think it will be user friendly to raise an error when execute -k nodeid and when the nodeid not exist:)
Thanks!","Hi @jfriesse , I've changed like you said:)
Please review, thank you!",True,{}
corosync/corosync,https://github.com/corosync/corosync,589,2020-09-09T07:50:42Z,2020-09-17T13:27:41Z,2020-09-17T13:27:42Z,CLOSED,False,46,2,2,https://github.com/liangxin1300,cfg: enhance message_handler_req_lib_cfg_killnode function,1,[],https://github.com/corosync/corosync/pull/589,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/589#issuecomment-690980188,"Hi,
I think it will be user friendly to raise an error when execute -k nodeid and when the nodeid not exist:)
Thanks!","Hi @liangxin1300 . It's nice progress, but I'm wondering, what is the CS_ERR_MEMBER_LEFT good for? I mean, kill node function either success (node exists) or not (node doesn't exist) - so honestly I don't see too much difference between node was never member and node is currently not a member (for this call).
Also I was thinking about enhancing corosync_api_v1 with a function returning current members, because it seems like a neat feature and would remove a need to parse icmap entries, .... but that is probably corosync v 4 material.",True,{}
corosync/corosync,https://github.com/corosync/corosync,589,2020-09-09T07:50:42Z,2020-09-17T13:27:41Z,2020-09-17T13:27:42Z,CLOSED,False,46,2,2,https://github.com/liangxin1300,cfg: enhance message_handler_req_lib_cfg_killnode function,1,[],https://github.com/corosync/corosync/pull/589,https://github.com/liangxin1300,6,https://github.com/corosync/corosync/pull/589#issuecomment-691056942,"Hi,
I think it will be user friendly to raise an error when execute -k nodeid and when the nodeid not exist:)
Thanks!","Hi @liangxin1300 . It's nice progress, but I'm wondering, what is the CS_ERR_MEMBER_LEFT good for? I mean, kill node function either success (node exists) or not (node doesn't exist) - so honestly I don't see too much difference between node was never member and node is currently not a member (for this call).

Hi @jfriesse , I think it does have difference between the two scenarios:
Assuming execute corosync-cfgtool -k 2,
Case 1, nodeid 2 was never a member, so the kill action failed with CS_ERR_NOT_EXIST;
Case 2, nodeid 2 was currently left, but can still find this nodeid in runtime.members, so the kill action failed with CS_ERR_MEMBER_LEFT
I think it's better to remind user these 2 failure cases are different with different reasons",True,{}
corosync/corosync,https://github.com/corosync/corosync,589,2020-09-09T07:50:42Z,2020-09-17T13:27:41Z,2020-09-17T13:27:42Z,CLOSED,False,46,2,2,https://github.com/liangxin1300,cfg: enhance message_handler_req_lib_cfg_killnode function,1,[],https://github.com/corosync/corosync/pull/589,https://github.com/jfriesse,7,https://github.com/corosync/corosync/pull/589#issuecomment-691849881,"Hi,
I think it will be user friendly to raise an error when execute -k nodeid and when the nodeid not exist:)
Thanks!","Hi @liangxin1300. Yeah, but what exactly is the difference (or added information) from the user (or API) point of view? In both cases, kill is unsuccessful, because node doesn't exist. Do you have some use case in mind where it is really useful to distinguish between left node and never joined node (for kill node api call)?
(just btw. keep in mind record in runtime.members is ""forever"" (until corosync is restarted) and it is local node specific - so (another reason why not to distinquish between node never joined or node left) - you can have an situation when newly joined node never seen already left node which was seen by other members so kill node api on that node returns different error code than calling same API on other nodes - IMHO that is pretty confusing)",True,{}
corosync/corosync,https://github.com/corosync/corosync,589,2020-09-09T07:50:42Z,2020-09-17T13:27:41Z,2020-09-17T13:27:42Z,CLOSED,False,46,2,2,https://github.com/liangxin1300,cfg: enhance message_handler_req_lib_cfg_killnode function,1,[],https://github.com/corosync/corosync/pull/589,https://github.com/liangxin1300,8,https://github.com/corosync/corosync/pull/589#issuecomment-691917014,"Hi,
I think it will be user friendly to raise an error when execute -k nodeid and when the nodeid not exist:)
Thanks!","@jfriesse Already changed
Both situations return CS_ERR_NOT_EXIST to client
Thanks!",True,{}
corosync/corosync,https://github.com/corosync/corosync,589,2020-09-09T07:50:42Z,2020-09-17T13:27:41Z,2020-09-17T13:27:42Z,CLOSED,False,46,2,2,https://github.com/liangxin1300,cfg: enhance message_handler_req_lib_cfg_killnode function,1,[],https://github.com/corosync/corosync/pull/589,https://github.com/liangxin1300,9,https://github.com/corosync/corosync/pull/589#issuecomment-693751227,"Hi,
I think it will be user friendly to raise an error when execute -k nodeid and when the nodeid not exist:)
Thanks!","@jfriesse Thanks for review, already changed!",True,{}
corosync/corosync,https://github.com/corosync/corosync,589,2020-09-09T07:50:42Z,2020-09-17T13:27:41Z,2020-09-17T13:27:42Z,CLOSED,False,46,2,2,https://github.com/liangxin1300,cfg: enhance message_handler_req_lib_cfg_killnode function,1,[],https://github.com/corosync/corosync/pull/589,https://github.com/jfriesse,10,https://github.com/corosync/corosync/pull/589#issuecomment-694232449,"Hi,
I think it will be user friendly to raise an error when execute -k nodeid and when the nodeid not exist:)
Thanks!","Hi @liangxin1300. Patch seems perfect now, so ACK and merged as a ad2f1c6
Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,590,2020-09-09T12:39:19Z,2020-10-12T11:24:11Z,2020-10-12T12:07:42Z,CLOSED,False,904,89,23,https://github.com/jfriesse,quorum: Add support for nodelist callback,2,[],https://github.com/corosync/corosync/pull/590,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/590,"Current quorum callback contains only actual view list and there is no
way how to find out joined/left nodes. This cannot be emulated by user
app, because when corosync restarts before other nodes notices then view
list is unchanged (ring id is changed tho).
Solution is to implement similar callback as for cpg which contains ring
id, member list, joined list and left list.
To implement such callback and keep backwards compatibility,
quorum_model_initialize is introduced. Its behavior is similar to
cpg_model_initialize. This allows passing model v1, which contains
enhanced quorum (full ring id is passed instead of just seq number)
and nodelist callbacks.
To find out which events should be sent by corosync daemon, new message
MESSAGE_REQ_QUORUM_MODEL_GETTYPE is used. Quorum library on init was sending
MESSAGE_REQ_QUORUM_GETTYPE. Whem model v1 is requested the
MESSAGE_REQ_QUORUM_MODEL_GETTYPE is used, which contains model number so
corosync knows that client is using model v1 and can send enhanced
quorum and nodelist events.
Nodelist event is (for now) send both in case of change of membership
and also when requested, also when CS_TRACK_CURRENT is requested, but
then left_list and joined_list is left empty, because they don't make
too much sense there.
New test application testquorummodel is added as an example of new API
usage.
Also during patch developement, I found few bugs here and there, which
are also fixed:

quorum_initialize was never returning error code returned by
MESSAGE_REQ_QUORUM_GETTYPE call (always returned CS_OK)
Allocated memory in send_library_notification was based
on sizeof(unsigned int) instead of mar_uint32_t. That's not wrong, but
it make more sense to use sizeof(mar_uint32_t) instead

Signed-off-by: Jan Friesse jfriesse@redhat.com","Current quorum callback contains only actual view list and there is no
way how to find out joined/left nodes. This cannot be emulated by user
app, because when corosync restarts before other nodes notices then view
list is unchanged (ring id is changed tho).
Solution is to implement similar callback as for cpg which contains ring
id, member list, joined list and left list.
To implement such callback and keep backwards compatibility,
quorum_model_initialize is introduced. Its behavior is similar to
cpg_model_initialize. This allows passing model v1, which contains
enhanced quorum (full ring id is passed instead of just seq number)
and nodelist callbacks.
To find out which events should be sent by corosync daemon, new message
MESSAGE_REQ_QUORUM_MODEL_GETTYPE is used. Quorum library on init was sending
MESSAGE_REQ_QUORUM_GETTYPE. Whem model v1 is requested the
MESSAGE_REQ_QUORUM_MODEL_GETTYPE is used, which contains model number so
corosync knows that client is using model v1 and can send enhanced
quorum and nodelist events.
Nodelist event is (for now) send both in case of change of membership
and also when requested, also when CS_TRACK_CURRENT is requested, but
then left_list and joined_list is left empty, because they don't make
too much sense there.
New test application testquorummodel is added as an example of new API
usage.
Also during patch developement, I found few bugs here and there, which
are also fixed:

quorum_initialize was never returning error code returned by
MESSAGE_REQ_QUORUM_GETTYPE call (always returned CS_OK)
Allocated memory in send_library_notification was based
on sizeof(unsigned int) instead of mar_uint32_t. That's not wrong, but
it make more sense to use sizeof(mar_uint32_t) instead

Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,590,2020-09-09T12:39:19Z,2020-10-12T11:24:11Z,2020-10-12T12:07:42Z,CLOSED,False,904,89,23,https://github.com/jfriesse,quorum: Add support for nodelist callback,2,[],https://github.com/corosync/corosync/pull/590,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/590#issuecomment-689539984,"Current quorum callback contains only actual view list and there is no
way how to find out joined/left nodes. This cannot be emulated by user
app, because when corosync restarts before other nodes notices then view
list is unchanged (ring id is changed tho).
Solution is to implement similar callback as for cpg which contains ring
id, member list, joined list and left list.
To implement such callback and keep backwards compatibility,
quorum_model_initialize is introduced. Its behavior is similar to
cpg_model_initialize. This allows passing model v1, which contains
enhanced quorum (full ring id is passed instead of just seq number)
and nodelist callbacks.
To find out which events should be sent by corosync daemon, new message
MESSAGE_REQ_QUORUM_MODEL_GETTYPE is used. Quorum library on init was sending
MESSAGE_REQ_QUORUM_GETTYPE. Whem model v1 is requested the
MESSAGE_REQ_QUORUM_MODEL_GETTYPE is used, which contains model number so
corosync knows that client is using model v1 and can send enhanced
quorum and nodelist events.
Nodelist event is (for now) send both in case of change of membership
and also when requested, also when CS_TRACK_CURRENT is requested, but
then left_list and joined_list is left empty, because they don't make
too much sense there.
New test application testquorummodel is added as an example of new API
usage.
Also during patch developement, I found few bugs here and there, which
are also fixed:

quorum_initialize was never returning error code returned by
MESSAGE_REQ_QUORUM_GETTYPE call (always returned CS_OK)
Allocated memory in send_library_notification was based
on sizeof(unsigned int) instead of mar_uint32_t. That's not wrong, but
it make more sense to use sizeof(mar_uint32_t) instead

Signed-off-by: Jan Friesse jfriesse@redhat.com","@chrissie-c This patchset is in progress, because it needs a bit more testing and also man pages of new apis must be provided. But it is complete functionality wise so it is worth reviewing. The reason for this functionality is described https://bugzilla.redhat.com/show_bug.cgi?id=1866905#c10 and to more depths https://bugzilla.redhat.com/show_bug.cgi?id=1643808.
I've tested backwards compatibility by running patches corosync with unpatched quorum libraries/apps (corosync-quorumtool and testquorum) and unpatched corosync with patched quorum libraries/apps and both were working reasonably well, but more testing would be appriciated.
Also I'm all for changing naming if it sounds bad (like res_lib_quorum_v1_quorum_notification is probably a bit weird).
Anyway, sending to dct so he can say if this functionality is what he would like to see.",True,{}
corosync/corosync,https://github.com/corosync/corosync,590,2020-09-09T12:39:19Z,2020-10-12T11:24:11Z,2020-10-12T12:07:42Z,CLOSED,False,904,89,23,https://github.com/jfriesse,quorum: Add support for nodelist callback,2,[],https://github.com/corosync/corosync/pull/590,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/590#issuecomment-689605239,"Current quorum callback contains only actual view list and there is no
way how to find out joined/left nodes. This cannot be emulated by user
app, because when corosync restarts before other nodes notices then view
list is unchanged (ring id is changed tho).
Solution is to implement similar callback as for cpg which contains ring
id, member list, joined list and left list.
To implement such callback and keep backwards compatibility,
quorum_model_initialize is introduced. Its behavior is similar to
cpg_model_initialize. This allows passing model v1, which contains
enhanced quorum (full ring id is passed instead of just seq number)
and nodelist callbacks.
To find out which events should be sent by corosync daemon, new message
MESSAGE_REQ_QUORUM_MODEL_GETTYPE is used. Quorum library on init was sending
MESSAGE_REQ_QUORUM_GETTYPE. Whem model v1 is requested the
MESSAGE_REQ_QUORUM_MODEL_GETTYPE is used, which contains model number so
corosync knows that client is using model v1 and can send enhanced
quorum and nodelist events.
Nodelist event is (for now) send both in case of change of membership
and also when requested, also when CS_TRACK_CURRENT is requested, but
then left_list and joined_list is left empty, because they don't make
too much sense there.
New test application testquorummodel is added as an example of new API
usage.
Also during patch developement, I found few bugs here and there, which
are also fixed:

quorum_initialize was never returning error code returned by
MESSAGE_REQ_QUORUM_GETTYPE call (always returned CS_OK)
Allocated memory in send_library_notification was based
on sizeof(unsigned int) instead of mar_uint32_t. That's not wrong, but
it make more sense to use sizeof(mar_uint32_t) instead

Signed-off-by: Jan Friesse jfriesse@redhat.com",Force pushed fix for error found by coverity and use last_sync_ring_id for nodelist notification instead of (during sync) outdated quorum_ring_id,True,{}
corosync/corosync,https://github.com/corosync/corosync,590,2020-09-09T12:39:19Z,2020-10-12T11:24:11Z,2020-10-12T12:07:42Z,CLOSED,False,904,89,23,https://github.com/jfriesse,quorum: Add support for nodelist callback,2,[],https://github.com/corosync/corosync/pull/590,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/590#issuecomment-692037752,"Current quorum callback contains only actual view list and there is no
way how to find out joined/left nodes. This cannot be emulated by user
app, because when corosync restarts before other nodes notices then view
list is unchanged (ring id is changed tho).
Solution is to implement similar callback as for cpg which contains ring
id, member list, joined list and left list.
To implement such callback and keep backwards compatibility,
quorum_model_initialize is introduced. Its behavior is similar to
cpg_model_initialize. This allows passing model v1, which contains
enhanced quorum (full ring id is passed instead of just seq number)
and nodelist callbacks.
To find out which events should be sent by corosync daemon, new message
MESSAGE_REQ_QUORUM_MODEL_GETTYPE is used. Quorum library on init was sending
MESSAGE_REQ_QUORUM_GETTYPE. Whem model v1 is requested the
MESSAGE_REQ_QUORUM_MODEL_GETTYPE is used, which contains model number so
corosync knows that client is using model v1 and can send enhanced
quorum and nodelist events.
Nodelist event is (for now) send both in case of change of membership
and also when requested, also when CS_TRACK_CURRENT is requested, but
then left_list and joined_list is left empty, because they don't make
too much sense there.
New test application testquorummodel is added as an example of new API
usage.
Also during patch developement, I found few bugs here and there, which
are also fixed:

quorum_initialize was never returning error code returned by
MESSAGE_REQ_QUORUM_GETTYPE call (always returned CS_OK)
Allocated memory in send_library_notification was based
on sizeof(unsigned int) instead of mar_uint32_t. That's not wrong, but
it make more sense to use sizeof(mar_uint32_t) instead

Signed-off-by: Jan Friesse jfriesse@redhat.com",Force pushed the man pages change. Also dct seems to be happy with patch so I think it is now ready for full review (so @chrissie-c please take a lot and lot of tea ... and no rush).,True,{}
corosync/corosync,https://github.com/corosync/corosync,590,2020-09-09T12:39:19Z,2020-10-12T11:24:11Z,2020-10-12T12:07:42Z,CLOSED,False,904,89,23,https://github.com/jfriesse,quorum: Add support for nodelist callback,2,[],https://github.com/corosync/corosync/pull/590,https://github.com/chrissie-c,5,https://github.com/corosync/corosync/pull/590#issuecomment-700058416,"Current quorum callback contains only actual view list and there is no
way how to find out joined/left nodes. This cannot be emulated by user
app, because when corosync restarts before other nodes notices then view
list is unchanged (ring id is changed tho).
Solution is to implement similar callback as for cpg which contains ring
id, member list, joined list and left list.
To implement such callback and keep backwards compatibility,
quorum_model_initialize is introduced. Its behavior is similar to
cpg_model_initialize. This allows passing model v1, which contains
enhanced quorum (full ring id is passed instead of just seq number)
and nodelist callbacks.
To find out which events should be sent by corosync daemon, new message
MESSAGE_REQ_QUORUM_MODEL_GETTYPE is used. Quorum library on init was sending
MESSAGE_REQ_QUORUM_GETTYPE. Whem model v1 is requested the
MESSAGE_REQ_QUORUM_MODEL_GETTYPE is used, which contains model number so
corosync knows that client is using model v1 and can send enhanced
quorum and nodelist events.
Nodelist event is (for now) send both in case of change of membership
and also when requested, also when CS_TRACK_CURRENT is requested, but
then left_list and joined_list is left empty, because they don't make
too much sense there.
New test application testquorummodel is added as an example of new API
usage.
Also during patch developement, I found few bugs here and there, which
are also fixed:

quorum_initialize was never returning error code returned by
MESSAGE_REQ_QUORUM_GETTYPE call (always returned CS_OK)
Allocated memory in send_library_notification was based
on sizeof(unsigned int) instead of mar_uint32_t. That's not wrong, but
it make more sense to use sizeof(mar_uint32_t) instead

Signed-off-by: Jan Friesse jfriesse@redhat.com","Something I noticed, and it's not specific to this patch, but happens on all the *quorum examples, is that they all busywait on CS_ERR_TRY_AGAIN in their dispatch functions. I haven't had change to look further into this, but it probably need fixing - at the very least because it sets a bad example!",True,{}
corosync/corosync,https://github.com/corosync/corosync,590,2020-09-09T12:39:19Z,2020-10-12T11:24:11Z,2020-10-12T12:07:42Z,CLOSED,False,904,89,23,https://github.com/jfriesse,quorum: Add support for nodelist callback,2,[],https://github.com/corosync/corosync/pull/590,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/590#issuecomment-700818318,"Current quorum callback contains only actual view list and there is no
way how to find out joined/left nodes. This cannot be emulated by user
app, because when corosync restarts before other nodes notices then view
list is unchanged (ring id is changed tho).
Solution is to implement similar callback as for cpg which contains ring
id, member list, joined list and left list.
To implement such callback and keep backwards compatibility,
quorum_model_initialize is introduced. Its behavior is similar to
cpg_model_initialize. This allows passing model v1, which contains
enhanced quorum (full ring id is passed instead of just seq number)
and nodelist callbacks.
To find out which events should be sent by corosync daemon, new message
MESSAGE_REQ_QUORUM_MODEL_GETTYPE is used. Quorum library on init was sending
MESSAGE_REQ_QUORUM_GETTYPE. Whem model v1 is requested the
MESSAGE_REQ_QUORUM_MODEL_GETTYPE is used, which contains model number so
corosync knows that client is using model v1 and can send enhanced
quorum and nodelist events.
Nodelist event is (for now) send both in case of change of membership
and also when requested, also when CS_TRACK_CURRENT is requested, but
then left_list and joined_list is left empty, because they don't make
too much sense there.
New test application testquorummodel is added as an example of new API
usage.
Also during patch developement, I found few bugs here and there, which
are also fixed:

quorum_initialize was never returning error code returned by
MESSAGE_REQ_QUORUM_GETTYPE call (always returned CS_OK)
Allocated memory in send_library_notification was based
on sizeof(unsigned int) instead of mar_uint32_t. That's not wrong, but
it make more sense to use sizeof(mar_uint32_t) instead

Signed-off-by: Jan Friesse jfriesse@redhat.com","@chrissie-c Thank you for the review and man pages fixes. I've force pushed the fixes so it should be fine now.
About dispatch. I don't think dispatch differs between services so if you think quorum dispatch behaves incorrectly then other services also behaves incorrectly.
There are 4 modes:

CS_DISPATCH_ONE - timeout for qb_ipcc_event_recv is -1 (so infinite) and CS_ERR_TRY_AGAIN is masked and code repeats the the while cycle = busywait (but not really ,because of timeout = -1)
CS_DISPATCH_ONE_NONBLOCKING - timeout is 0 (so instant timeout) and CS_ERR_TRY_AGAIN is not masked = no busywait
CS_DISPATCH_ALL - timeout is 0 and CS_ERR_TRY_AGAIN is masked but code breaks cycle = no busywait
CS_DISPATCH_BLOCKING - timeout is -1, CS_ERR_TRY_AGAIN is masked and code repeats the while cycle = busywait (but not really, because of timeout = -1)

What you've seen that examples calls (in cycle) CS_DISPATCH_ALL which never returns CS_ERR_TRY_AGAIN so there is really busywait. I think we may change example to use poll or change it to CS_DISPATCH_BLOCKING or change CS_DISPATCH_ALL to return CS_ERR_TRY_AGAIN (so not mask the error) if message is first one (= mask error if there is more messages and last one returns CS_ERR_TRY_AGAIN), but honestly, I'm not sure how much it would break compatibility.
(edit: tested it, and yes, there is busywait in example)",True,{}
corosync/corosync,https://github.com/corosync/corosync,590,2020-09-09T12:39:19Z,2020-10-12T11:24:11Z,2020-10-12T12:07:42Z,CLOSED,False,904,89,23,https://github.com/jfriesse,quorum: Add support for nodelist callback,2,[],https://github.com/corosync/corosync/pull/590,https://github.com/jfriesse,7,https://github.com/corosync/corosync/pull/590#issuecomment-700842993,"Current quorum callback contains only actual view list and there is no
way how to find out joined/left nodes. This cannot be emulated by user
app, because when corosync restarts before other nodes notices then view
list is unchanged (ring id is changed tho).
Solution is to implement similar callback as for cpg which contains ring
id, member list, joined list and left list.
To implement such callback and keep backwards compatibility,
quorum_model_initialize is introduced. Its behavior is similar to
cpg_model_initialize. This allows passing model v1, which contains
enhanced quorum (full ring id is passed instead of just seq number)
and nodelist callbacks.
To find out which events should be sent by corosync daemon, new message
MESSAGE_REQ_QUORUM_MODEL_GETTYPE is used. Quorum library on init was sending
MESSAGE_REQ_QUORUM_GETTYPE. Whem model v1 is requested the
MESSAGE_REQ_QUORUM_MODEL_GETTYPE is used, which contains model number so
corosync knows that client is using model v1 and can send enhanced
quorum and nodelist events.
Nodelist event is (for now) send both in case of change of membership
and also when requested, also when CS_TRACK_CURRENT is requested, but
then left_list and joined_list is left empty, because they don't make
too much sense there.
New test application testquorummodel is added as an example of new API
usage.
Also during patch developement, I found few bugs here and there, which
are also fixed:

quorum_initialize was never returning error code returned by
MESSAGE_REQ_QUORUM_GETTYPE call (always returned CS_OK)
Allocated memory in send_library_notification was based
on sizeof(unsigned int) instead of mar_uint32_t. That's not wrong, but
it make more sense to use sizeof(mar_uint32_t) instead

Signed-off-by: Jan Friesse jfriesse@redhat.com","@chrissie-c I've made small fix for testquorum, testquorummodel and testvotequorum1 to use CS_DISPATCH_BLOCKING, so it should work now correctly.",True,{}
corosync/corosync,https://github.com/corosync/corosync,590,2020-09-09T12:39:19Z,2020-10-12T11:24:11Z,2020-10-12T12:07:42Z,CLOSED,False,904,89,23,https://github.com/jfriesse,quorum: Add support for nodelist callback,2,[],https://github.com/corosync/corosync/pull/590,https://github.com/jfriesse,8,https://github.com/corosync/corosync/pull/590#issuecomment-707060287,"Current quorum callback contains only actual view list and there is no
way how to find out joined/left nodes. This cannot be emulated by user
app, because when corosync restarts before other nodes notices then view
list is unchanged (ring id is changed tho).
Solution is to implement similar callback as for cpg which contains ring
id, member list, joined list and left list.
To implement such callback and keep backwards compatibility,
quorum_model_initialize is introduced. Its behavior is similar to
cpg_model_initialize. This allows passing model v1, which contains
enhanced quorum (full ring id is passed instead of just seq number)
and nodelist callbacks.
To find out which events should be sent by corosync daemon, new message
MESSAGE_REQ_QUORUM_MODEL_GETTYPE is used. Quorum library on init was sending
MESSAGE_REQ_QUORUM_GETTYPE. Whem model v1 is requested the
MESSAGE_REQ_QUORUM_MODEL_GETTYPE is used, which contains model number so
corosync knows that client is using model v1 and can send enhanced
quorum and nodelist events.
Nodelist event is (for now) send both in case of change of membership
and also when requested, also when CS_TRACK_CURRENT is requested, but
then left_list and joined_list is left empty, because they don't make
too much sense there.
New test application testquorummodel is added as an example of new API
usage.
Also during patch developement, I found few bugs here and there, which
are also fixed:

quorum_initialize was never returning error code returned by
MESSAGE_REQ_QUORUM_GETTYPE call (always returned CS_OK)
Allocated memory in send_library_notification was based
on sizeof(unsigned int) instead of mar_uint32_t. That's not wrong, but
it make more sense to use sizeof(mar_uint32_t) instead

Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c Huge thanks for the review and ACK. I've merged the patch as a fbae8f2 .,True,{}
corosync/corosync,https://github.com/corosync/corosync,591,2020-09-16T10:45:09Z,2020-09-17T13:43:02Z,2020-09-17T13:43:02Z,CLOSED,False,18,10,1,https://github.com/liangxin1300,totemconfig: give interface number for the error reason,1,[],https://github.com/corosync/corosync/pull/591,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/591,"Hi @jfriesse ,
When configuring multi interfaces, I thought it should be convenient for user to locate which one has configure errors.
So I append interface number to each error reason.
Please review.
Thanks!","Hi @jfriesse ,
When configuring multi interfaces, I thought it should be convenient for user to locate which one has configure errors.
So I append interface number to each error reason.
Please review.
Thanks!",True,{}
corosync/corosync,https://github.com/corosync/corosync,591,2020-09-16T10:45:09Z,2020-09-17T13:43:02Z,2020-09-17T13:43:02Z,CLOSED,False,18,10,1,https://github.com/liangxin1300,totemconfig: give interface number for the error reason,1,[],https://github.com/corosync/corosync/pull/591,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/591#issuecomment-693491157,"Hi @jfriesse ,
When configuring multi interfaces, I thought it should be convenient for user to locate which one has configure errors.
So I append interface number to each error reason.
Please review.
Thanks!","Hi @liangxin1300. I like the idea in general (eventho wondering how helpful this info is ... I mean it is improvement, but still probably pretty hard to find). Just please change %d to %u.",True,{}
corosync/corosync,https://github.com/corosync/corosync,591,2020-09-16T10:45:09Z,2020-09-17T13:43:02Z,2020-09-17T13:43:02Z,CLOSED,False,18,10,1,https://github.com/liangxin1300,totemconfig: give interface number for the error reason,1,[],https://github.com/corosync/corosync/pull/591,https://github.com/liangxin1300,3,https://github.com/corosync/corosync/pull/591#issuecomment-693753437,"Hi @jfriesse ,
When configuring multi interfaces, I thought it should be convenient for user to locate which one has configure errors.
So I append interface number to each error reason.
Please review.
Thanks!","Thank you @jfriesse , already changed!",True,{}
corosync/corosync,https://github.com/corosync/corosync,591,2020-09-16T10:45:09Z,2020-09-17T13:43:02Z,2020-09-17T13:43:02Z,CLOSED,False,18,10,1,https://github.com/liangxin1300,totemconfig: give interface number for the error reason,1,[],https://github.com/corosync/corosync/pull/591,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/591#issuecomment-694244080,"Hi @jfriesse ,
When configuring multi interfaces, I thought it should be convenient for user to locate which one has configure errors.
So I append interface number to each error reason.
Please review.
Thanks!","Hi @liangxin1300. Thank you for the update. Honestly it was pretty hard to find config option which is not tested sooner than in the affected code (like ipv6 is tested in totemconfig before, ttl and link are tested in parser, ...) so may not have required effect... no matter what, patch is good and improvement so ACK and merged as a 9461f87
Thank you for the patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,592,2020-09-17T03:00:09Z,2020-09-18T10:14:04Z,2020-09-18T10:14:04Z,CLOSED,False,10,0,1,https://github.com/liangxin1300,totemconfig: check whether linknumber larger than INTERFACE_MAX,1,[],https://github.com/corosync/corosync/pull/592,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/592,"Hi @jfriesse ,
When configure large wrong number in ringX_addr like:
node {
        ring0_addr: 10.10.10.142
        ring13_addr: 20.20.20.142
        name: f32-2
        nodeid: 2
    }

Core dump will happen:
#0  0x00005567dff64787 put_nodelist_members_to_config (corosync + 0x2e787)
#1  0x00005567dff66ae8 totem_config_read (corosync + 0x30ae8)
#2  0x00005567dff486c0 main (corosync + 0x126c0)
#3  0x00007f79d3364042 __libc_start_main (libc.so.6 + 0x27042)
#4  0x00005567dff4953e _start (corosync + 0x1353e)

So I created this PR to fix this issue
Thanks for review!","Hi @jfriesse ,
When configure large wrong number in ringX_addr like:
node {
        ring0_addr: 10.10.10.142
        ring13_addr: 20.20.20.142
        name: f32-2
        nodeid: 2
    }

Core dump will happen:
#0  0x00005567dff64787 put_nodelist_members_to_config (corosync + 0x2e787)
#1  0x00005567dff66ae8 totem_config_read (corosync + 0x30ae8)
#2  0x00005567dff486c0 main (corosync + 0x126c0)
#3  0x00007f79d3364042 __libc_start_main (libc.so.6 + 0x27042)
#4  0x00005567dff4953e _start (corosync + 0x1353e)

So I created this PR to fix this issue
Thanks for review!",True,{}
corosync/corosync,https://github.com/corosync/corosync,592,2020-09-17T03:00:09Z,2020-09-18T10:14:04Z,2020-09-18T10:14:04Z,CLOSED,False,10,0,1,https://github.com/liangxin1300,totemconfig: check whether linknumber larger than INTERFACE_MAX,1,[],https://github.com/corosync/corosync/pull/592,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/592#issuecomment-694782923,"Hi @jfriesse ,
When configure large wrong number in ringX_addr like:
node {
        ring0_addr: 10.10.10.142
        ring13_addr: 20.20.20.142
        name: f32-2
        nodeid: 2
    }

Core dump will happen:
#0  0x00005567dff64787 put_nodelist_members_to_config (corosync + 0x2e787)
#1  0x00005567dff66ae8 totem_config_read (corosync + 0x30ae8)
#2  0x00005567dff486c0 main (corosync + 0x126c0)
#3  0x00007f79d3364042 __libc_start_main (libc.so.6 + 0x27042)
#4  0x00005567dff4953e _start (corosync + 0x1353e)

So I created this PR to fix this issue
Thanks for review!","Hi @liangxin1300. Good catch (it took me while to reproduce it) and nice patch so ACK and merged as a 1aaa246 .
Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,593,2020-09-17T08:16:15Z,2020-09-17T13:19:54Z,2020-09-17T14:43:23Z,CLOSED,False,51,4,3,https://github.com/jfriesse,covscantest cfg: enhance message_handler_req_lib_cfg_killnode function,1,[],https://github.com/corosync/corosync/pull/593,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/593,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,594,2020-09-17T13:34:23Z,2020-09-24T13:32:46Z,2020-09-24T13:32:49Z,CLOSED,False,21,21,1,https://github.com/jfriesse,common_lib: Remove trailing spaces in cs_strerror,1,[],https://github.com/corosync/corosync/pull/594,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/594,Found this problem during reviewing #589 (message displayed when node doesn't exist - Could not kill node (error = CS_ERR_NOT_EXIST )).,Found this problem during reviewing #589 (message displayed when node doesn't exist - Could not kill node (error = CS_ERR_NOT_EXIST )).,True,{}
corosync/corosync,https://github.com/corosync/corosync,594,2020-09-17T13:34:23Z,2020-09-24T13:32:46Z,2020-09-24T13:32:49Z,CLOSED,False,21,21,1,https://github.com/jfriesse,common_lib: Remove trailing spaces in cs_strerror,1,[],https://github.com/corosync/corosync/pull/594,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/594#issuecomment-694780384,Found this problem during reviewing #589 (message displayed when node doesn't exist - Could not kill node (error = CS_ERR_NOT_EXIST )).,@knet-ci-bot retest this please,True,{}
corosync/corosync,https://github.com/corosync/corosync,594,2020-09-17T13:34:23Z,2020-09-24T13:32:46Z,2020-09-24T13:32:49Z,CLOSED,False,21,21,1,https://github.com/jfriesse,common_lib: Remove trailing spaces in cs_strerror,1,[],https://github.com/corosync/corosync/pull/594,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/594#issuecomment-698346563,Found this problem during reviewing #589 (message displayed when node doesn't exist - Could not kill node (error = CS_ERR_NOT_EXIST )).,@chrissie-c Thank you for review! I've merged patch as a d108706,True,{}
corosync/corosync,https://github.com/corosync/corosync,595,2020-09-17T14:25:12Z,2020-09-17T14:43:23Z,2020-09-17T14:43:23Z,CLOSED,False,51,4,3,https://github.com/jfriesse,covscantest cfg: enhance message_handler_req_lib_cfg_killnode function,1,[],https://github.com/corosync/corosync/pull/595,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/595,"While execute corosync-cfgtool -k  to kill node:

Check whether nodeid exists
Check whether the node was joined

Signed-off-by: liangxin1300 XLiang@suse.com","While execute corosync-cfgtool -k  to kill node:

Check whether nodeid exists
Check whether the node was joined

Signed-off-by: liangxin1300 XLiang@suse.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,596,2020-09-30T07:52:03Z,2020-09-30T08:10:48Z,2020-09-30T08:10:48Z,CLOSED,False,4,0,1,https://github.com/chrissie-c,man: make it clear that reloads during a rolling upgrade are not,1,[],https://github.com/corosync/corosync/pull/596,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/596,supported,supported,True,{}
corosync/corosync,https://github.com/corosync/corosync,596,2020-09-30T07:52:03Z,2020-09-30T08:10:48Z,2020-09-30T08:10:48Z,CLOSED,False,4,0,1,https://github.com/chrissie-c,man: make it clear that reloads during a rolling upgrade are not,1,[],https://github.com/corosync/corosync/pull/596,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/596#issuecomment-701235466,supported,"@chrissie-c ACK and merged as a d106c1e
Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,598,2020-10-07T13:58:05Z,2020-10-15T14:51:34Z,2020-10-15T14:51:35Z,CLOSED,False,6,2,1,https://github.com/aleksei-burlakov,totemsrp: More informative messages when token and consensus timeouts pop,1,[],https://github.com/corosync/corosync/pull/598,https://github.com/aleksei-burlakov,1,https://github.com/corosync/corosync/pull/598,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,598,2020-10-07T13:58:05Z,2020-10-15T14:51:34Z,2020-10-15T14:51:35Z,CLOSED,False,6,2,1,https://github.com/aleksei-burlakov,totemsrp: More informative messages when token and consensus timeouts pop,1,[],https://github.com/corosync/corosync/pull/598,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/598#issuecomment-704954833,,Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,598,2020-10-07T13:58:05Z,2020-10-15T14:51:34Z,2020-10-15T14:51:35Z,CLOSED,False,6,2,1,https://github.com/aleksei-burlakov,totemsrp: More informative messages when token and consensus timeouts pop,1,[],https://github.com/corosync/corosync/pull/598,https://github.com/aleksei-burlakov,3,https://github.com/corosync/corosync/pull/598#issuecomment-704971065,,"@gao-yan, please have a look.",True,{}
corosync/corosync,https://github.com/corosync/corosync,598,2020-10-07T13:58:05Z,2020-10-15T14:51:34Z,2020-10-15T14:51:35Z,CLOSED,False,6,2,1,https://github.com/aleksei-burlakov,totemsrp: More informative messages when token and consensus timeouts pop,1,[],https://github.com/corosync/corosync/pull/598,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/598#issuecomment-704993810,,"Hi @aleksei-burlakov, I have few nitpicks:

please replace %d with %u.  These are defined as unsigned so let's keep them unsigned (this will also allow to remove (int) retyping
please change format of ""str""\n, var\n, var to ""str"",\nvar,\nvar as everywhere else in the code. It is really just a style, but it is good if code looks like a written by one person.

Also could you please share a bit of background reason for this patch? I mean, it looks reasonable and helpful so I'm just wondering what you were trying to debug and found a need for such change.",True,{}
corosync/corosync,https://github.com/corosync/corosync,598,2020-10-07T13:58:05Z,2020-10-15T14:51:34Z,2020-10-15T14:51:35Z,CLOSED,False,6,2,1,https://github.com/aleksei-burlakov,totemsrp: More informative messages when token and consensus timeouts pop,1,[],https://github.com/corosync/corosync/pull/598,https://github.com/aleksei-burlakov,5,https://github.com/corosync/corosync/pull/598#issuecomment-705053221,,"please replace %d with %u. These are defined as unsigned so let's keep them unsigned (this will also allow to remove (int) retyping.

The (int) is redundant indeed. I replaced the %d with the %u.

please change format of ""str""\n, var\n, var to ""str"",\nvar,\nvar as everywhere else in the code. It is really just a style, but it is good if code looks like a written by one person.

Sure. My bad.

Also could you please share a bit of background reason for this patch?

It's aimed at the users with a little experience to help understand

When the network blackout occurred. (the time of the message minus the tocken_timeout)
After the loss of token a) there is the consensus. b) it follows and not happens at the same time.
How long is the consensus.

and also for experienced users, it helps to immediately scroll back the system journal (or other journals) without looking into the corosync.conf",True,{}
corosync/corosync,https://github.com/corosync/corosync,598,2020-10-07T13:58:05Z,2020-10-15T14:51:34Z,2020-10-15T14:51:35Z,CLOSED,False,6,2,1,https://github.com/aleksei-burlakov,totemsrp: More informative messages when token and consensus timeouts pop,1,[],https://github.com/corosync/corosync/pull/598,https://github.com/chrissie-c,6,https://github.com/corosync/corosync/pull/598#issuecomment-706076369,,"I've no problem with the general idea, but IMHO it would be better to print the full milli-second value of the timeouts rather than truncating them to seconds. There's a big difference between 1000 ms and 1900 ms but they would print out the same. The default for consensus is 1200 ms but that would print out as 1s",True,{}
corosync/corosync,https://github.com/corosync/corosync,598,2020-10-07T13:58:05Z,2020-10-15T14:51:34Z,2020-10-15T14:51:35Z,CLOSED,False,6,2,1,https://github.com/aleksei-burlakov,totemsrp: More informative messages when token and consensus timeouts pop,1,[],https://github.com/corosync/corosync/pull/598,https://github.com/aleksei-burlakov,7,https://github.com/corosync/corosync/pull/598#issuecomment-706577842,,"I've no problem with the general idea, but IMHO it would be better to print the full milli-second value of the timeouts rather than truncating them to seconds. There's a big difference between 1000 ms and 1900 ms but they would print out the same. The default for consensus is 1200 ms but that would print out as 1s

This would also be good. I have amended the PR.",True,{}
corosync/corosync,https://github.com/corosync/corosync,598,2020-10-07T13:58:05Z,2020-10-15T14:51:34Z,2020-10-15T14:51:35Z,CLOSED,False,6,2,1,https://github.com/aleksei-burlakov,totemsrp: More informative messages when token and consensus timeouts pop,1,[],https://github.com/corosync/corosync/pull/598,https://github.com/chrissie-c,8,https://github.com/corosync/corosync/pull/598#issuecomment-706969725,,Looks good to me!,True,{}
corosync/corosync,https://github.com/corosync/corosync,598,2020-10-07T13:58:05Z,2020-10-15T14:51:34Z,2020-10-15T14:51:35Z,CLOSED,False,6,2,1,https://github.com/aleksei-burlakov,totemsrp: More informative messages when token and consensus timeouts pop,1,[],https://github.com/corosync/corosync/pull/598,https://github.com/jfriesse,9,https://github.com/corosync/corosync/pull/598#issuecomment-707079182,,"Patch looks good for me too, so ACK. Sadly it is based on top of needle branch and doesn't apply cleanly on top of master branch. @aleksei-burlakov would you please mind to rebase it to master branch?",True,{}
corosync/corosync,https://github.com/corosync/corosync,598,2020-10-07T13:58:05Z,2020-10-15T14:51:34Z,2020-10-15T14:51:35Z,CLOSED,False,6,2,1,https://github.com/aleksei-burlakov,totemsrp: More informative messages when token and consensus timeouts pop,1,[],https://github.com/corosync/corosync/pull/598,https://github.com/aleksei-burlakov,10,https://github.com/corosync/corosync/pull/598#issuecomment-708329203,,I have created another PR to the master branch #601,True,{}
corosync/corosync,https://github.com/corosync/corosync,598,2020-10-07T13:58:05Z,2020-10-15T14:51:34Z,2020-10-15T14:51:35Z,CLOSED,False,6,2,1,https://github.com/aleksei-burlakov,totemsrp: More informative messages when token and consensus timeouts pop,1,[],https://github.com/corosync/corosync/pull/598,https://github.com/jfriesse,11,https://github.com/corosync/corosync/pull/598#issuecomment-709379218,,"@aleksei-burlakov Yup, thanks for the forward-port. I've merged this PR as a 8556a16 so both PRs are merged now.
Thank you for the patch(es)!",True,{}
corosync/corosync,https://github.com/corosync/corosync,599,2020-10-09T16:35:08Z,2020-10-12T12:00:07Z,2020-10-12T12:22:37Z,CLOSED,False,4,4,2,https://github.com/wferi,Man fixes,2,[],https://github.com/corosync/corosync/pull/599,https://github.com/wferi,1,https://github.com/corosync/corosync/pull/599,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,599,2020-10-09T16:35:08Z,2020-10-12T12:00:07Z,2020-10-12T12:22:37Z,CLOSED,False,4,4,2,https://github.com/wferi,Man fixes,2,[],https://github.com/corosync/corosync/pull/599,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/599#issuecomment-707076675,,"@wferi Nice catch and patch so ACK and merged as a 6bc305e
Thank you for the patch(es)!",True,{}
corosync/corosync,https://github.com/corosync/corosync,600,2020-10-12T12:40:12Z,2020-10-15T14:43:20Z,2020-10-15T14:43:24Z,CLOSED,False,3,3,2,https://github.com/jfriesse,config: Increase default token timeout to 3000 ms,1,[],https://github.com/corosync/corosync/pull/600,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/600,"Default token timeout of 1000 ms was often changed by users because of
other workloads on machine which may make corosync responding a bit
later than needed and resulting in token loss.
3000 ms was chosen as a compromise between token timeout increase
and allow live cluster upgrade (other nodes should receive token
by node with new default on time).
It doesn't affect token token_coefficient so final token timeout still
depends on number of configured nodes (just base is higher).
This change slows down failover a bit so for clusters where failover
times are important, please change the token timeout in configuration
file corosync.conf as a:
totem {
version: 2
token: 1000
...
Signed-off-by: Jan Friesse jfriesse@redhat.com","Default token timeout of 1000 ms was often changed by users because of
other workloads on machine which may make corosync responding a bit
later than needed and resulting in token loss.
3000 ms was chosen as a compromise between token timeout increase
and allow live cluster upgrade (other nodes should receive token
by node with new default on time).
It doesn't affect token token_coefficient so final token timeout still
depends on number of configured nodes (just base is higher).
This change slows down failover a bit so for clusters where failover
times are important, please change the token timeout in configuration
file corosync.conf as a:
totem {
version: 2
token: 1000
...
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,600,2020-10-12T12:40:12Z,2020-10-15T14:43:20Z,2020-10-15T14:43:24Z,CLOSED,False,3,3,2,https://github.com/jfriesse,config: Increase default token timeout to 3000 ms,1,[],https://github.com/corosync/corosync/pull/600,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/600#issuecomment-709373808,"Default token timeout of 1000 ms was often changed by users because of
other workloads on machine which may make corosync responding a bit
later than needed and resulting in token loss.
3000 ms was chosen as a compromise between token timeout increase
and allow live cluster upgrade (other nodes should receive token
by node with new default on time).
It doesn't affect token token_coefficient so final token timeout still
depends on number of configured nodes (just base is higher).
This change slows down failover a bit so for clusters where failover
times are important, please change the token timeout in configuration
file corosync.conf as a:
totem {
version: 2
token: 1000
...
Signed-off-by: Jan Friesse jfriesse@redhat.com","@chrissie-c Thank you for the review. I've merged the patch as a 8221f78.
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,601,2020-10-13T08:59:12Z,2020-10-15T14:47:34Z,2020-10-15T14:47:34Z,CLOSED,False,6,2,1,https://github.com/aleksei-burlakov,totemsrp: More informative messages when token and consensus timeouts pop,1,[],https://github.com/corosync/corosync/pull/601,https://github.com/aleksei-burlakov,1,https://github.com/corosync/corosync/pull/601,This PR complements the #598,This PR complements the #598,True,{}
corosync/corosync,https://github.com/corosync/corosync,601,2020-10-13T08:59:12Z,2020-10-15T14:47:34Z,2020-10-15T14:47:34Z,CLOSED,False,6,2,1,https://github.com/aleksei-burlakov,totemsrp: More informative messages when token and consensus timeouts pop,1,[],https://github.com/corosync/corosync/pull/601,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/601#issuecomment-707599262,This PR complements the #598,Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,601,2020-10-13T08:59:12Z,2020-10-15T14:47:34Z,2020-10-15T14:47:34Z,CLOSED,False,6,2,1,https://github.com/aleksei-burlakov,totemsrp: More informative messages when token and consensus timeouts pop,1,[],https://github.com/corosync/corosync/pull/601,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/601#issuecomment-709376608,This PR complements the #598,"@aleksei-burlakov Thank you for the patch. ACK and merged as a 98bfd99 .
Regards,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,602,2020-10-18T14:58:37Z,2020-10-19T09:32:55Z,2020-10-19T09:32:56Z,CLOSED,False,0,1,1,https://github.com/liangxin1300,totemconfig: remove redundant error log for duplicate nodeid error,1,[],https://github.com/corosync/corosync/pull/602,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/602,"When detect exist duplicated nodeid, the error Nodeid x appears twice in corosync.conf will record two times, it seems a bit of redundant","When detect exist duplicated nodeid, the error Nodeid x appears twice in corosync.conf will record two times, it seems a bit of redundant",True,{}
corosync/corosync,https://github.com/corosync/corosync,602,2020-10-18T14:58:37Z,2020-10-19T09:32:55Z,2020-10-19T09:32:56Z,CLOSED,False,0,1,1,https://github.com/liangxin1300,totemconfig: remove redundant error log for duplicate nodeid error,1,[],https://github.com/corosync/corosync/pull/602,https://github.com/chrissie-c,2,https://github.com/corosync/corosync/pull/602#issuecomment-711780626,"When detect exist duplicated nodeid, the error Nodeid x appears twice in corosync.conf will record two times, it seems a bit of redundant","Good catch, ACK from me.",True,{}
corosync/corosync,https://github.com/corosync/corosync,602,2020-10-18T14:58:37Z,2020-10-19T09:32:55Z,2020-10-19T09:32:56Z,CLOSED,False,0,1,1,https://github.com/liangxin1300,totemconfig: remove redundant error log for duplicate nodeid error,1,[],https://github.com/corosync/corosync/pull/602,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/602#issuecomment-711918156,"When detect exist duplicated nodeid, the error Nodeid x appears twice in corosync.conf will record two times, it seems a bit of redundant","Good catch so merged as a e17ac25
Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,603,2020-10-19T02:59:57Z,,2021-12-27T05:19:09Z,OPEN,False,6,1,3,https://github.com/liangxin1300,Limit range like quorum.two_node as 0 to 1,1,[],https://github.com/corosync/corosync/pull/603,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/603,"Hi @jfriesse ,
I found configure value like quorum.two_node always  0 or 1, perhaps limit its range to 0,1 will decrease mis-configure
Just for config validate, the actual value type still be uint8, so I don't think we need to create corresponding set/get interfaces for the new type ICMAP_VALUETYPE_BOOLEAN
Thanks for review!","Hi @jfriesse ,
I found configure value like quorum.two_node always  0 or 1, perhaps limit its range to 0,1 will decrease mis-configure
Just for config validate, the actual value type still be uint8, so I don't think we need to create corresponding set/get interfaces for the new type ICMAP_VALUETYPE_BOOLEAN
Thanks for review!",True,{}
corosync/corosync,https://github.com/corosync/corosync,603,2020-10-19T02:59:57Z,,2021-12-27T05:19:09Z,OPEN,False,6,1,3,https://github.com/liangxin1300,Limit range like quorum.two_node as 0 to 1,1,[],https://github.com/corosync/corosync/pull/603,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/603#issuecomment-711800287,"Hi @jfriesse ,
I found configure value like quorum.two_node always  0 or 1, perhaps limit its range to 0,1 will decrease mis-configure
Just for config validate, the actual value type still be uint8, so I don't think we need to create corresponding set/get interfaces for the new type ICMAP_VALUETYPE_BOOLEAN
Thanks for review!","Hi @liangxin1300,
generally speaking I'm in favor of adding boolean type into icmap/cmap. But not really in the way patch did so, because it is actually adding it to just totemconfig and icmap counterpart seems to do nothing (probably to make compiler happy, right?).
What I would like to see is complete support for boolean type, where parser would be able to accept value in form of words (like not only 0/1, but also (for example) on/off, yes/no, ...). By complete support for boolean type I mean to have a support in both icmap (so function like icmap_set_bool, icmap_get_bool), cmap counterpart and tools corosync-cmapctl. The big question is, if it would make sense to overload bool a bit (so for example icmap_get_int would be able to operate on bool value or not).
No matter what, this looks like a potentially incompatible change so it is really big question if this is 3.x material or maybe 4.x (but the question is, how well we would be able to make it).
I can understand this is probably not what you were trying to achieve by patch but icmap.h suggest so ;)
Honestly, I don't see too big need to check if value is strictly 0 or 1, because it is behaving like C int bools, so 0 = false, != 0 = true. But if you really think it makes sense to strictly check the value, then please do not add new boolean type to icmap.h (rather use different function than safe_atoq for the parsing of quorum.two_node, ...)",True,{}
corosync/corosync,https://github.com/corosync/corosync,603,2020-10-19T02:59:57Z,,2021-12-27T05:19:09Z,OPEN,False,6,1,3,https://github.com/liangxin1300,Limit range like quorum.two_node as 0 to 1,1,[],https://github.com/corosync/corosync/pull/603,https://github.com/liangxin1300,3,https://github.com/corosync/corosync/pull/603#issuecomment-711812910,"Hi @jfriesse ,
I found configure value like quorum.two_node always  0 or 1, perhaps limit its range to 0,1 will decrease mis-configure
Just for config validate, the actual value type still be uint8, so I don't think we need to create corresponding set/get interfaces for the new type ICMAP_VALUETYPE_BOOLEAN
Thanks for review!","Hi @jfriesse ,
Thanks for clarifying these!
No hurry to make this change for me:)
BTW, what's the plan for 4.x, when will startup?",True,{}
corosync/corosync,https://github.com/corosync/corosync,603,2020-10-19T02:59:57Z,,2021-12-27T05:19:09Z,OPEN,False,6,1,3,https://github.com/liangxin1300,Limit range like quorum.two_node as 0 to 1,1,[],https://github.com/corosync/corosync/pull/603,https://github.com/chrissie-c,4,https://github.com/corosync/corosync/pull/603#issuecomment-711816568,"Hi @jfriesse ,
I found configure value like quorum.two_node always  0 or 1, perhaps limit its range to 0,1 will decrease mis-configure
Just for config validate, the actual value type still be uint8, so I don't think we need to create corresponding set/get interfaces for the new type ICMAP_VALUETYPE_BOOLEAN
Thanks for review!",I'm generally in favour of a boolean type - if only to get rid of the yes/no/on/off/0/1 confusion that reigns at the moment. As Honza says 3.x might not be the right time to do it though.,True,{}
corosync/corosync,https://github.com/corosync/corosync,603,2020-10-19T02:59:57Z,,2021-12-27T05:19:09Z,OPEN,False,6,1,3,https://github.com/liangxin1300,Limit range like quorum.two_node as 0 to 1,1,[],https://github.com/corosync/corosync/pull/603,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/603#issuecomment-711822612,"Hi @jfriesse ,
I found configure value like quorum.two_node always  0 or 1, perhaps limit its range to 0,1 will decrease mis-configure
Just for config validate, the actual value type still be uint8, so I don't think we need to create corresponding set/get interfaces for the new type ICMAP_VALUETYPE_BOOLEAN
Thanks for review!","Hi @liangxin1300,
I was actually suggesting you can make that change ;) (and yes, it would be quite a work).
No plan for 4.x at all (for now). I mean, when we collect enough incompatible change ideas we may split camelback (so 3.x) from master branch and start planning 4.x, but till now we were able to make all the changes in compatible way so no need for major release.",True,{}
corosync/corosync,https://github.com/corosync/corosync,605,2020-10-29T11:12:53Z,2020-11-26T15:18:30Z,2020-11-26T15:18:31Z,CLOSED,False,564,138,22,https://github.com/chrissie-c,RFC: New API to get extended node/link infomation,5,[],https://github.com/corosync/corosync/pull/605,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/605,"Current we horribly over-use totempg_ifaces_get() to
retrieve information about knet interfaces. This is an attempt to
improve on that.
It's a discussion patch at the moment, there are a couple of undecided
things (at least):

Do we add versioning to the structure or a size or something to make
it more 'future proof'?
We don't know much about the UDP[U] links so they all show
""reachable"" at the moment. does this makes sense?

Also does anyone have any better ideas for the printout format?
All other comments gratefully received.
This patch builds against the ""onwire-upgrade"" branch of knet as that's
what sparked my interest in getting more information out.","Current we horribly over-use totempg_ifaces_get() to
retrieve information about knet interfaces. This is an attempt to
improve on that.
It's a discussion patch at the moment, there are a couple of undecided
things (at least):

Do we add versioning to the structure or a size or something to make
it more 'future proof'?
We don't know much about the UDP[U] links so they all show
""reachable"" at the moment. does this makes sense?

Also does anyone have any better ideas for the printout format?
All other comments gratefully received.
This patch builds against the ""onwire-upgrade"" branch of knet as that's
what sparked my interest in getting more information out.",True,{}
corosync/corosync,https://github.com/corosync/corosync,605,2020-10-29T11:12:53Z,2020-11-26T15:18:30Z,2020-11-26T15:18:31Z,CLOSED,False,564,138,22,https://github.com/chrissie-c,RFC: New API to get extended node/link infomation,5,[],https://github.com/corosync/corosync/pull/605,https://github.com/fabbione,2,https://github.com/corosync/corosync/pull/605#issuecomment-718908576,"Current we horribly over-use totempg_ifaces_get() to
retrieve information about knet interfaces. This is an attempt to
improve on that.
It's a discussion patch at the moment, there are a couple of undecided
things (at least):

Do we add versioning to the structure or a size or something to make
it more 'future proof'?
We don't know much about the UDP[U] links so they all show
""reachable"" at the moment. does this makes sense?

Also does anyone have any better ideas for the printout format?
All other comments gratefully received.
This patch builds against the ""onwire-upgrade"" branch of knet as that's
what sparked my interest in getting more information out.","On 10/29/2020 12:13 PM, Chrissie Caulfield wrote:
 Current we horribly over-use totempg_ifaces_get() to
 retrieve information about knet interfaces. This is an attempt to
 improve on that.

 It's a discussion patch at the moment, there are a couple of undecided
 things (at least):

  1. Do we add versioning to the structure or a size or something to make
     it more 'future proof'?
  2. We don't know much about the UDP[U] links so they all show
     ""reachable"" at the moment. does this makes sense?
I am not sure I understand this point.

link->status.connected would tell you if a given link is receiving pongs
from the other node and considered ""connected"" even if it is UDP.

Not to be confused with transport_connected where UDP is always up and
SCTP can be UP/DOWN, but transport_connected IIRC is only internal.

 Also does anyone have any better ideas for the printout format?

 All other comments gratefully received.

 This patch builds against the ""onwire-upgrade"" branch of knet as that's
 what sparked my interest in getting more information out.
onwire-upgrade has been merged into master a while back. This code
should be able to build on master without problems.

Fabio
…

 ------------------------------------------------------------------------


         You can view, comment on, or merge this pull request online at:

 #605
 <#605>


         Commit Summary

   * RFC: New API to get extended node/link infomation


         File Changes

   * *M* exec/cfg.c
     <https://github.com/corosync/corosync/pull/605/files#diff-9bbe348868692873dcbd10ba81ed0bc64412e4d5b4b3ec67dd272f848ef315f1>
     (59)
   * *M* exec/totemknet.c
     <https://github.com/corosync/corosync/pull/605/files#diff-7d2dcf80b992c803f7dc13a3eda4f7d811a1b5a825f7e8dd0cb10a5538e33d05>
     (76)
   * *M* exec/totemknet.h
     <https://github.com/corosync/corosync/pull/605/files#diff-46c85267aa19af03fa7067c77b0a42529e93f3bb6e15a849855d3a249c95d6a3>
     (3)
   * *M* exec/totemnet.c
     <https://github.com/corosync/corosync/pull/605/files#diff-201b446346ab0ff03303919be12558e3b089c9c25219264c1708b48ff2e22ffc>
     (21)
   * *M* exec/totemnet.h
     <https://github.com/corosync/corosync/pull/605/files#diff-64d7d3be656f74cbc4c1b4efc4d230d5e9a87c515af842fecb60fa39b688ba73>
     (5)
   * *M* exec/totempg.c
     <https://github.com/corosync/corosync/pull/605/files#diff-09847fbe6c4bd690c27e0861c9b05d29ce50964be81ca6d5bb96526440447b46>
     (6)
   * *M* exec/totemsrp.c
     <https://github.com/corosync/corosync/pull/605/files#diff-d6b83f8045eec81e6f5334c7bdec7dfab2f03c37c5edfe2f4151ff9da1489a77>
     (10)
   * *M* exec/totemsrp.h
     <https://github.com/corosync/corosync/pull/605/files#diff-e7d5295e59b7c843b9685113397288a1f61ddc195d5b65303826c7903e079662>
     (3)
   * *M* exec/totemudp.c
     <https://github.com/corosync/corosync/pull/605/files#diff-e7b2c1d4a6427e4be515defd0cab38d9923cfa6107e6f2e898b249d6862b029b>
     (25)
   * *M* exec/totemudp.h
     <https://github.com/corosync/corosync/pull/605/files#diff-5d710bf3449015561a5301c18cb3b9f4dc7336b74f9b5901064e1f77bc53bcb1>
     (3)
   * *M* exec/totemudpu.c
     <https://github.com/corosync/corosync/pull/605/files#diff-ba9ddeaed99bf4a6f1940efb536b555c0003ea2ba338273f5f666c0193d1b82b>
     (25)
   * *M* exec/totemudpu.h
     <https://github.com/corosync/corosync/pull/605/files#diff-237338bff21b40594529b0ca3a6b521fedd952d673f20d0f9cdabc8b5bc0ddf7>
     (3)
   * *M* include/corosync/cfg.h
     <https://github.com/corosync/corosync/pull/605/files#diff-ec69f9d460c1362097bcc8291e7a238dc1429bfad373fa20af1458c53b8a211c>
     (35)
   * *M* include/corosync/ipc_cfg.h
     <https://github.com/corosync/corosync/pull/605/files#diff-007e2f5e8107fa0817b112729f6cc830b091cf8b733593d0bd4fdc0461719c0a>
     (22)
   * *M* include/corosync/totem/totem.h
     <https://github.com/corosync/corosync/pull/605/files#diff-4a9bb7f98042af0bff92f573d76900ecea04ed702d7e13273aff56b2ca0dcfc1>
     (12)
   * *M* include/corosync/totem/totempg.h
     <https://github.com/corosync/corosync/pull/605/files#diff-d3bdcc2de7269292b5cbe989133183bdff87d60c438469d947e237944b812325>
     (3)
   * *M* lib/cfg.c
     <https://github.com/corosync/corosync/pull/605/files#diff-90bae19c494082f588f536b46373df4512818bcf4f18206b09bd52875bd16cfa>
     (45)
   * *M* tools/corosync-cfgtool.c
     <https://github.com/corosync/corosync/pull/605/files#diff-565bf701a31edbbed4af751182fa2d01bff4f94538bfcd96ab0cbf1234d342c1>
     (101)


         Patch Links:

   * https://github.com/corosync/corosync/pull/605.patch
     <https://github.com/corosync/corosync/pull/605.patch>
   * https://github.com/corosync/corosync/pull/605.diff
     <https://github.com/corosync/corosync/pull/605.diff>

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#605>, or unsubscribe
 <https://github.com/notifications/unsubscribe-auth/AAC3VLOBCVIMI7VHHKZ65QTSNFE4JANCNFSM4TDSULWQ>.",True,{}
corosync/corosync,https://github.com/corosync/corosync,605,2020-10-29T11:12:53Z,2020-11-26T15:18:30Z,2020-11-26T15:18:31Z,CLOSED,False,564,138,22,https://github.com/chrissie-c,RFC: New API to get extended node/link infomation,5,[],https://github.com/corosync/corosync/pull/605,https://github.com/chrissie-c,3,https://github.com/corosync/corosync/pull/605#issuecomment-719391822,"Current we horribly over-use totempg_ifaces_get() to
retrieve information about knet interfaces. This is an attempt to
improve on that.
It's a discussion patch at the moment, there are a couple of undecided
things (at least):

Do we add versioning to the structure or a size or something to make
it more 'future proof'?
We don't know much about the UDP[U] links so they all show
""reachable"" at the moment. does this makes sense?

Also does anyone have any better ideas for the printout format?
All other comments gratefully received.
This patch builds against the ""onwire-upgrade"" branch of knet as that's
what sparked my interest in getting more information out.","When I say UDPU, I mean the corosync UDPU/UDP transports, not the ""sub-transports"" of knet, sorry if that wasn't clear.
Also I first submitted this PR without the check for knet_handle_get_onwire_ver() in configure.ac and it failed everywhere on the CI :)",True,{}
corosync/corosync,https://github.com/corosync/corosync,605,2020-10-29T11:12:53Z,2020-11-26T15:18:30Z,2020-11-26T15:18:31Z,CLOSED,False,564,138,22,https://github.com/chrissie-c,RFC: New API to get extended node/link infomation,5,[],https://github.com/corosync/corosync/pull/605,https://github.com/fabbione,4,https://github.com/corosync/corosync/pull/605#issuecomment-719399407,"Current we horribly over-use totempg_ifaces_get() to
retrieve information about knet interfaces. This is an attempt to
improve on that.
It's a discussion patch at the moment, there are a couple of undecided
things (at least):

Do we add versioning to the structure or a size or something to make
it more 'future proof'?
We don't know much about the UDP[U] links so they all show
""reachable"" at the moment. does this makes sense?

Also does anyone have any better ideas for the printout format?
All other comments gratefully received.
This patch builds against the ""onwire-upgrade"" branch of knet as that's
what sparked my interest in getting more information out.","On 10/30/2020 9:09 AM, Chrissie Caulfield wrote:
 When I say UDPU, I mean the corosync UDPU/UDP transports, not the
 ""sub-transports"" of knet, sorry if that wasn't clear.
I see, I would probably fake the link status information by knowing if
the node is still part of the membership or not.

 Also I first submitted this PR without the check for
 knet_handle_get_onwire_ver() in configure.ac and it failed everywhere on
 the CI :)
oh ok, I see :)

Fabio",True,{}
corosync/corosync,https://github.com/corosync/corosync,605,2020-10-29T11:12:53Z,2020-11-26T15:18:30Z,2020-11-26T15:18:31Z,CLOSED,False,564,138,22,https://github.com/chrissie-c,RFC: New API to get extended node/link infomation,5,[],https://github.com/corosync/corosync/pull/605,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/605#issuecomment-719574527,"Current we horribly over-use totempg_ifaces_get() to
retrieve information about knet interfaces. This is an attempt to
improve on that.
It's a discussion patch at the moment, there are a couple of undecided
things (at least):

Do we add versioning to the structure or a size or something to make
it more 'future proof'?
We don't know much about the UDP[U] links so they all show
""reachable"" at the moment. does this makes sense?

Also does anyone have any better ideas for the printout format?
All other comments gratefully received.
This patch builds against the ""onwire-upgrade"" branch of knet as that's
what sparked my interest in getting more information out.","@chrissie-c:
I've just briefly look over the patch and it looks clean and nice.
First, answer to questions:

Do we add versioning to the structure or a size or something to make it more 'future proof'? - Yes please do so. Adding (and maybe even removing? fields). Not sure what is the best way but I cannot imagine adding another lib call just because some field appeared.
We don't know much about the UDP[U] links so they all show ""reachable"" at the moment. does this makes sense? - Emulation as you've already done seems to be just right. It's best we can do.

The biggest problems I see right now is:

Documentation - Like I'm really not sure what ""remote/external"" mean.
What is exactly the difference between this call and corosync_cfg_ring_status_get? Could we emulate the corosync_cfg_ring_status_get in library by calling corosync_cfg_node_status_get. I know in 3.x we have to keep this call in both library and corosync daemon. But for 4.x I can imagine to remove at least corosync daemon part if we would be able to emulate corosync_cfg_ring_status_get.
Similar question to cfgtool - would it be possible to ""emulate"" output of ""-s"" in nodestatusget_do? Because right now, code really looks very repetitive (not sure how much it really is repetitive).

About output - I like it much more than ""-s"" but it may make sense to somehow mask the localhost connection (right now it's IMHO a bit overwhelming).",True,{}
corosync/corosync,https://github.com/corosync/corosync,605,2020-10-29T11:12:53Z,2020-11-26T15:18:30Z,2020-11-26T15:18:31Z,CLOSED,False,564,138,22,https://github.com/chrissie-c,RFC: New API to get extended node/link infomation,5,[],https://github.com/corosync/corosync/pull/605,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/605#issuecomment-719577319,"Current we horribly over-use totempg_ifaces_get() to
retrieve information about knet interfaces. This is an attempt to
improve on that.
It's a discussion patch at the moment, there are a couple of undecided
things (at least):

Do we add versioning to the structure or a size or something to make
it more 'future proof'?
We don't know much about the UDP[U] links so they all show
""reachable"" at the moment. does this makes sense?

Also does anyone have any better ideas for the printout format?
All other comments gratefully received.
This patch builds against the ""onwire-upgrade"" branch of knet as that's
what sparked my interest in getting more information out.",@chrissie-c  Also we have a issue #436 so when we merge this PR we may consider #436 fixed (nodeid is main identificator) but there is link to another idea - #494 (review) - Is it something to add into this call?,True,{}
corosync/corosync,https://github.com/corosync/corosync,605,2020-10-29T11:12:53Z,2020-11-26T15:18:30Z,2020-11-26T15:18:31Z,CLOSED,False,564,138,22,https://github.com/chrissie-c,RFC: New API to get extended node/link infomation,5,[],https://github.com/corosync/corosync/pull/605,https://github.com/chrissie-c,7,https://github.com/corosync/corosync/pull/605#issuecomment-720405207,"Current we horribly over-use totempg_ifaces_get() to
retrieve information about knet interfaces. This is an attempt to
improve on that.
It's a discussion patch at the moment, there are a couple of undecided
things (at least):

Do we add versioning to the structure or a size or something to make
it more 'future proof'?
We don't know much about the UDP[U] links so they all show
""reachable"" at the moment. does this makes sense?

Also does anyone have any better ideas for the printout format?
All other comments gratefully received.
This patch builds against the ""onwire-upgrade"" branch of knet as that's
what sparked my interest in getting more information out.","Thanks for the comments. I like the idea of using the new API for both displays, that will tidy things up a bit. I was also wondering if we can use netif_bind_state to determine the up/down status of UDP[u] links",True,{}
corosync/corosync,https://github.com/corosync/corosync,605,2020-10-29T11:12:53Z,2020-11-26T15:18:30Z,2020-11-26T15:18:31Z,CLOSED,False,564,138,22,https://github.com/chrissie-c,RFC: New API to get extended node/link infomation,5,[],https://github.com/corosync/corosync/pull/605,https://github.com/chrissie-c,8,https://github.com/corosync/corosync/pull/605#issuecomment-732075240,"Current we horribly over-use totempg_ifaces_get() to
retrieve information about knet interfaces. This is an attempt to
improve on that.
It's a discussion patch at the moment, there are a couple of undecided
things (at least):

Do we add versioning to the structure or a size or something to make
it more 'future proof'?
We don't know much about the UDP[U] links so they all show
""reachable"" at the moment. does this makes sense?

Also does anyone have any better ideas for the printout format?
All other comments gratefully received.
This patch builds against the ""onwire-upgrade"" branch of knet as that's
what sparked my interest in getting more information out.",I think this is ready for reviewing now.,True,{}
corosync/corosync,https://github.com/corosync/corosync,605,2020-10-29T11:12:53Z,2020-11-26T15:18:30Z,2020-11-26T15:18:31Z,CLOSED,False,564,138,22,https://github.com/chrissie-c,RFC: New API to get extended node/link infomation,5,[],https://github.com/corosync/corosync/pull/605,https://github.com/jfriesse,9,https://github.com/corosync/corosync/pull/605#issuecomment-734355156,"Current we horribly over-use totempg_ifaces_get() to
retrieve information about knet interfaces. This is an attempt to
improve on that.
It's a discussion patch at the moment, there are a couple of undecided
things (at least):

Do we add versioning to the structure or a size or something to make
it more 'future proof'?
We don't know much about the UDP[U] links so they all show
""reachable"" at the moment. does this makes sense?

Also does anyone have any better ideas for the printout format?
All other comments gratefully received.
This patch builds against the ""onwire-upgrade"" branch of knet as that's
what sparked my interest in getting more information out.","@chrissie-c Thank you for this PR. I've squashed all the patches and merged patch as a 9e7f62d.
Regards,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,606,2020-11-02T13:13:24Z,2020-11-02T16:42:57Z,2020-11-02T16:48:47Z,CLOSED,False,2,1,1,https://github.com/jfriesse,spec: Add isa version of corosync-devel provides,1,[],https://github.com/corosync/corosync/pull/606,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/606,"Also add release to version to match autogenerated corosynclib-devel
provides.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Also add release to version to match autogenerated corosynclib-devel
provides.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,606,2020-11-02T13:13:24Z,2020-11-02T16:42:57Z,2020-11-02T16:48:47Z,CLOSED,False,2,1,1,https://github.com/jfriesse,spec: Add isa version of corosync-devel provides,1,[],https://github.com/corosync/corosync/pull/606,https://github.com/wenningerk,2,https://github.com/corosync/corosync/pull/606#issuecomment-720465777,"Also add release to version to match autogenerated corosynclib-devel
provides.
Signed-off-by: Jan Friesse jfriesse@redhat.com",lgtm,True,{}
corosync/corosync,https://github.com/corosync/corosync,606,2020-11-02T13:13:24Z,2020-11-02T16:42:57Z,2020-11-02T16:48:47Z,CLOSED,False,2,1,1,https://github.com/jfriesse,spec: Add isa version of corosync-devel provides,1,[],https://github.com/corosync/corosync/pull/606,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/606#issuecomment-720538203,"Also add release to version to match autogenerated corosynclib-devel
provides.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Just made a simple testing spec file to find out how clever is rpmbuild (it is actually quite clever) - Installed package is corosynclib-devel-3.1.0-1.1.950d.dirty.el8.x86_64.rpm:
Name: testpkg
Summary: tespkg
Version: 1.0.0
Release: 1
License: BSD

# Works
#BuildRequires: corosync-devel%{?_isa} = 3.1.0-1.1.950d.dirty.el8
#BuildRequires: corosync-devel%{?_isa} = 3.1.0
#BuildRequires: corosync-devel
#BuildRequires: corosync-devel%{?_isa} >= 3.1.0
#BuildRequires: corosync-devel%{?_isa} >= 3.1.0-1
                                 
# Doesn't work                   
#BuildRequires: corosync-devel%{?_isa} = 3.1.0-foo
#BuildRequires: corosync-devel%{?_isa} = 3.1.0-1
#BuildRequires: corosync-devel%{?_isa} >= 3.1.0-2
                                 
%description                     
Test package",True,{}
corosync/corosync,https://github.com/corosync/corosync,606,2020-11-02T13:13:24Z,2020-11-02T16:42:57Z,2020-11-02T16:48:47Z,CLOSED,False,2,1,1,https://github.com/jfriesse,spec: Add isa version of corosync-devel provides,1,[],https://github.com/corosync/corosync/pull/606,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/606#issuecomment-720587724,"Also add release to version to match autogenerated corosynclib-devel
provides.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c Thank you for the review. I've merged patch as a c0889ec .,True,{}
corosync/corosync,https://github.com/corosync/corosync,608,2020-11-06T04:14:02Z,2020-11-06T07:59:15Z,2020-11-06T08:00:23Z,CLOSED,False,2,0,2,https://github.com/fabbione,[devel] export LOGDIR in corosync.pc,1,[],https://github.com/corosync/corosync/pull/608,https://github.com/fabbione,1,https://github.com/corosync/corosync/pull/608,"logdir is configurable at build time and can change from distro to distro.
export the path for pcs to use.
Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com","logdir is configurable at build time and can change from distro to distro.
export the path for pcs to use.
Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,608,2020-11-06T04:14:02Z,2020-11-06T07:59:15Z,2020-11-06T08:00:23Z,CLOSED,False,2,0,2,https://github.com/fabbione,[devel] export LOGDIR in corosync.pc,1,[],https://github.com/corosync/corosync/pull/608,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/608#issuecomment-722936727,"logdir is configurable at build time and can change from distro to distro.
export the path for pcs to use.
Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com","Hi @fabbione, patch makes sense so ACK and merged as a fc31cad",True,{}
corosync/corosync,https://github.com/corosync/corosync,609,2020-11-09T11:05:09Z,2020-11-10T13:16:42Z,2020-11-10T13:16:42Z,CLOSED,False,3,7,1,https://github.com/wferi,The ring id file needn't be executable,1,[],https://github.com/corosync/corosync/pull/609,https://github.com/wferi,1,https://github.com/corosync/corosync/pull/609,"At the same time simplify the overwrite logic and stop clearing the
umask (which is unexpected and quite pointless here, as applications
can't really protect the users from their own pathological settings).","At the same time simplify the overwrite logic and stop clearing the
umask (which is unexpected and quite pointless here, as applications
can't really protect the users from their own pathological settings).",True,{}
corosync/corosync,https://github.com/corosync/corosync,609,2020-11-09T11:05:09Z,2020-11-10T13:16:42Z,2020-11-10T13:16:42Z,CLOSED,False,3,7,1,https://github.com/wferi,The ring id file needn't be executable,1,[],https://github.com/corosync/corosync/pull/609,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/609#issuecomment-724695050,"At the same time simplify the overwrite logic and stop clearing the
umask (which is unexpected and quite pointless here, as applications
can't really protect the users from their own pathological settings).","@wferi
Nice catch and nice patch so ACK and merged as a 3d5481c.
Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,610,2020-11-10T17:14:15Z,2020-11-12T12:49:40Z,2020-11-12T12:49:45Z,CLOSED,False,13,5,1,https://github.com/jfriesse,totemknet: Check both cipher and hash for crypto,1,[],https://github.com/corosync/corosync/pull/610,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/610,"Previously only crypto cipher was used as a way to find out if crypto is
enabled or disabled.
This usually works ok until cipher is set to none and hash to some other
value (like sha1). Such config is perfectly valid and it was not
supported correctly.
As a solution, check both cipher and hash.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Previously only crypto cipher was used as a way to find out if crypto is
enabled or disabled.
This usually works ok until cipher is set to none and hash to some other
value (like sha1). Such config is perfectly valid and it was not
supported correctly.
As a solution, check both cipher and hash.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,610,2020-11-10T17:14:15Z,2020-11-12T12:49:40Z,2020-11-12T12:49:45Z,CLOSED,False,13,5,1,https://github.com/jfriesse,totemknet: Check both cipher and hash for crypto,1,[],https://github.com/corosync/corosync/pull/610,https://github.com/fabbione,2,https://github.com/corosync/corosync/pull/610#issuecomment-725192418,"Previously only crypto cipher was used as a way to find out if crypto is
enabled or disabled.
This usually works ok until cipher is set to none and hash to some other
value (like sha1). Such config is perfectly valid and it was not
supported correctly.
As a solution, check both cipher and hash.
Signed-off-by: Jan Friesse jfriesse@redhat.com",ack. makes sense,True,{}
corosync/corosync,https://github.com/corosync/corosync,610,2020-11-10T17:14:15Z,2020-11-12T12:49:40Z,2020-11-12T12:49:45Z,CLOSED,False,13,5,1,https://github.com/jfriesse,totemknet: Check both cipher and hash for crypto,1,[],https://github.com/corosync/corosync/pull/610,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/610#issuecomment-726057929,"Previously only crypto cipher was used as a way to find out if crypto is
enabled or disabled.
This usually works ok until cipher is set to none and hash to some other
value (like sha1). Such config is perfectly valid and it was not
supported correctly.
As a solution, check both cipher and hash.
Signed-off-by: Jan Friesse jfriesse@redhat.com","@chrissie-c and @fabbione Thank you for the review and ACKs - I've merged patch as a 4a2f48b
@chrissie-c Thank you for detailed explanation.
Regards,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,612,2020-11-24T15:19:26Z,2020-11-26T15:19:28Z,2020-11-26T15:19:34Z,CLOSED,False,682,134,22,https://github.com/jfriesse,Cfg nodestatusget improvements,3,[],https://github.com/corosync/corosync/pull/612,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/612,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,612,2020-11-24T15:19:26Z,2020-11-26T15:19:28Z,2020-11-26T15:19:34Z,CLOSED,False,682,134,22,https://github.com/jfriesse,Cfg nodestatusget improvements,3,[],https://github.com/corosync/corosync/pull/612,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/612#issuecomment-734355650,,"@chrissie-c Thank you for the review via email. I've merged the second patch as a d76fc6a.
Regards,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,614,2021-01-11T09:31:21Z,2021-01-14T15:11:31Z,2021-01-14T15:11:31Z,CLOSED,False,384,17,11,https://github.com/chrissie-c,cfg: Reinstate cfg tracking,3,[],https://github.com/corosync/corosync/pull/614,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/614,"CFG tracking was removed in 8153754,
probably as a mistake, as part of the tidy up of cfg and the removal of
dynamic loading. This means that shutdown tracking (using
cfg_try_shutdown()) stopped working.
This patch restores the trackstart & trackstop API calls (renamed to be
more consistent with the exiting libraries) so that shutdown tracking
can be used again.","CFG tracking was removed in 8153754,
probably as a mistake, as part of the tidy up of cfg and the removal of
dynamic loading. This means that shutdown tracking (using
cfg_try_shutdown()) stopped working.
This patch restores the trackstart & trackstop API calls (renamed to be
more consistent with the exiting libraries) so that shutdown tracking
can be used again.",True,{}
corosync/corosync,https://github.com/corosync/corosync,614,2021-01-11T09:31:21Z,2021-01-14T15:11:31Z,2021-01-14T15:11:31Z,CLOSED,False,384,17,11,https://github.com/chrissie-c,cfg: Reinstate cfg tracking,3,[],https://github.com/corosync/corosync/pull/614,https://github.com/chrissie-c,2,https://github.com/corosync/corosync/pull/614#issuecomment-757864389,"CFG tracking was removed in 8153754,
probably as a mistake, as part of the tidy up of cfg and the removal of
dynamic loading. This means that shutdown tracking (using
cfg_try_shutdown()) stopped working.
This patch restores the trackstart & trackstop API calls (renamed to be
more consistent with the exiting libraries) so that shutdown tracking
can be used again.",test for this is in https://github.com/chrissie-c/rust-corosync,True,{}
corosync/corosync,https://github.com/corosync/corosync,614,2021-01-11T09:31:21Z,2021-01-14T15:11:31Z,2021-01-14T15:11:31Z,CLOSED,False,384,17,11,https://github.com/chrissie-c,cfg: Reinstate cfg tracking,3,[],https://github.com/corosync/corosync/pull/614,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/614#issuecomment-760187441,"CFG tracking was removed in 8153754,
probably as a mistake, as part of the tidy up of cfg and the removal of
dynamic loading. This means that shutdown tracking (using
cfg_try_shutdown()) stopped working.
This patch restores the trackstart & trackstop API calls (renamed to be
more consistent with the exiting libraries) so that shutdown tracking
can be used again.",@chrissie-c Thank you for the patch (and also C test app). It's for sure ACK but I would rather merge it together with systemd unit/init script changed so callback is really called when stopped by service manager. It's implemented by #615.,True,{}
corosync/corosync,https://github.com/corosync/corosync,614,2021-01-11T09:31:21Z,2021-01-14T15:11:31Z,2021-01-14T15:11:31Z,CLOSED,False,384,17,11,https://github.com/chrissie-c,cfg: Reinstate cfg tracking,3,[],https://github.com/corosync/corosync/pull/614,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/614#issuecomment-760258574,"CFG tracking was removed in 8153754,
probably as a mistake, as part of the tidy up of cfg and the removal of
dynamic loading. This means that shutdown tracking (using
cfg_try_shutdown()) stopped working.
This patch restores the trackstart & trackstop API calls (renamed to be
more consistent with the exiting libraries) so that shutdown tracking
can be used again.",Merged as a part of #615,True,{}
corosync/corosync,https://github.com/corosync/corosync,615,2021-01-14T13:04:09Z,2021-01-14T15:11:15Z,2021-01-14T15:11:15Z,CLOSED,False,389,17,14,https://github.com/jfriesse,Cfgtrack init,3,[],https://github.com/corosync/corosync/pull/615,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/615,Squashed PR #614  (with .gitignore added) and init script change (call corosync-cfgtool -H --force) added.,Squashed PR #614  (with .gitignore added) and init script change (call corosync-cfgtool -H --force) added.,True,{}
corosync/corosync,https://github.com/corosync/corosync,615,2021-01-14T13:04:09Z,2021-01-14T15:11:15Z,2021-01-14T15:11:15Z,CLOSED,False,389,17,14,https://github.com/jfriesse,Cfgtrack init,3,[],https://github.com/corosync/corosync/pull/615,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/615#issuecomment-760189053,Squashed PR #614  (with .gitignore added) and init script change (call corosync-cfgtool -H --force) added.,"@wenningerk: Just to heads-up, you may find this PR interesting because it solves #475 which you were interested in.",True,{}
corosync/corosync,https://github.com/corosync/corosync,615,2021-01-14T13:04:09Z,2021-01-14T15:11:15Z,2021-01-14T15:11:15Z,CLOSED,False,389,17,14,https://github.com/jfriesse,Cfgtrack init,3,[],https://github.com/corosync/corosync/pull/615,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/615#issuecomment-760258419,Squashed PR #614  (with .gitignore added) and init script change (call corosync-cfgtool -H --force) added.,@chrissie-c Thank you for the review! I've merged PR as a e094ea9,True,{}
corosync/corosync,https://github.com/corosync/corosync,617,2021-03-03T08:23:36Z,2021-03-03T08:29:10Z,2021-03-03T08:29:26Z,CLOSED,False,1,0,1,https://github.com/fabbione,[DO NOT MERGE] Just to test CI,1,[],https://github.com/corosync/corosync/pull/617,https://github.com/fabbione,1,https://github.com/corosync/corosync/pull/617,Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com,Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com,True,{}
corosync/corosync,https://github.com/corosync/corosync,618,2021-03-03T14:25:06Z,2021-03-04T15:07:18Z,2021-03-04T15:07:19Z,CLOSED,False,12,21,1,https://github.com/chrissie-c,main: Close race condition when moving to statedir,1,[],https://github.com/corosync/corosync/pull/618,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/618,Found by covscan which also didn't like us 'leaking' the fd to the lockfile. So close that too.,Found by covscan which also didn't like us 'leaking' the fd to the lockfile. So close that too.,True,{}
corosync/corosync,https://github.com/corosync/corosync,618,2021-03-03T14:25:06Z,2021-03-04T15:07:18Z,2021-03-04T15:07:19Z,CLOSED,False,12,21,1,https://github.com/chrissie-c,main: Close race condition when moving to statedir,1,[],https://github.com/corosync/corosync/pull/618,https://github.com/fabbione,2,https://github.com/corosync/corosync/pull/618#issuecomment-789830301,Found by covscan which also didn't like us 'leaking' the fd to the lockfile. So close that too.,retest this please,True,{}
corosync/corosync,https://github.com/corosync/corosync,618,2021-03-03T14:25:06Z,2021-03-04T15:07:18Z,2021-03-04T15:07:19Z,CLOSED,False,12,21,1,https://github.com/chrissie-c,main: Close race condition when moving to statedir,1,[],https://github.com/corosync/corosync/pull/618,https://github.com/fabbione,3,https://github.com/corosync/corosync/pull/618#issuecomment-789879309,Found by covscan which also didn't like us 'leaking' the fd to the lockfile. So close that too.,retest this please,True,{}
corosync/corosync,https://github.com/corosync/corosync,618,2021-03-03T14:25:06Z,2021-03-04T15:07:18Z,2021-03-04T15:07:19Z,CLOSED,False,12,21,1,https://github.com/chrissie-c,main: Close race condition when moving to statedir,1,[],https://github.com/corosync/corosync/pull/618,https://github.com/fabbione,4,https://github.com/corosync/corosync/pull/618#issuecomment-789958088,Found by covscan which also didn't like us 'leaking' the fd to the lockfile. So close that too.,retest this please,True,{}
corosync/corosync,https://github.com/corosync/corosync,618,2021-03-03T14:25:06Z,2021-03-04T15:07:18Z,2021-03-04T15:07:19Z,CLOSED,False,12,21,1,https://github.com/chrissie-c,main: Close race condition when moving to statedir,1,[],https://github.com/corosync/corosync/pull/618,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/618#issuecomment-790463447,Found by covscan which also didn't like us 'leaking' the fd to the lockfile. So close that too.,"@chrissie-c Hi and thank you for the patch. Lockfile part is is of course ACK - the question is how useful it is in reality but what we wouldn't do to please our machine overlords ;)
But what got my attention is fstat/fchdir code. I know it's there for ages but I'm thinking - how useful is this stat/fstat call? What actually it brings compared to just call chdir (without calling stat before)? Because (and please correct me if I misunderstood coverity bug) if stat is not needed, then calling just chdir should fix coverity problem and make code a bit shorter = better.",True,{}
corosync/corosync,https://github.com/corosync/corosync,618,2021-03-03T14:25:06Z,2021-03-04T15:07:18Z,2021-03-04T15:07:19Z,CLOSED,False,12,21,1,https://github.com/chrissie-c,main: Close race condition when moving to statedir,1,[],https://github.com/corosync/corosync/pull/618,https://github.com/chrissie-c,6,https://github.com/corosync/corosync/pull/618#issuecomment-790527682,Found by covscan which also didn't like us 'leaking' the fd to the lockfile. So close that too.,"It's a fair point about chdir. My initial thought was it was trying to get better error messages by chdir give plenty of detail anyway, I'll change that.
TBH this PR was, in part, done not just to appease coverity but to give Fabio something to test his build-rpms CI function. Yes, we are ALL about pleasing the machines here.",True,{}
corosync/corosync,https://github.com/corosync/corosync,618,2021-03-03T14:25:06Z,2021-03-04T15:07:18Z,2021-03-04T15:07:19Z,CLOSED,False,12,21,1,https://github.com/chrissie-c,main: Close race condition when moving to statedir,1,[],https://github.com/corosync/corosync/pull/618,https://github.com/jfriesse,7,https://github.com/corosync/corosync/pull/618#issuecomment-790685125,Found by covscan which also didn't like us 'leaking' the fd to the lockfile. So close that too.,"@chrissie-c Thank you for update. I really like updated patch a lot so merged as patch a 8278e48.
Regards,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,619,2021-03-09T10:09:06Z,2021-03-09T11:03:00Z,2021-03-09T11:03:04Z,CLOSED,False,7,20,1,https://github.com/fabbione,Build cleanup,4,[],https://github.com/corosync/corosync/pull/619,https://github.com/fabbione,1,https://github.com/corosync/corosync/pull/619,,,True,{}
corosync/corosync,https://github.com/corosync/corosync,619,2021-03-09T10:09:06Z,2021-03-09T11:03:00Z,2021-03-09T11:03:04Z,CLOSED,False,7,20,1,https://github.com/fabbione,Build cleanup,4,[],https://github.com/corosync/corosync/pull/619,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/619#issuecomment-793720860,,@fabbione Thank you for PR. Looks good so ACK and merged as a d31ad8e,True,{}
corosync/corosync,https://github.com/corosync/corosync,620,2021-03-10T17:51:56Z,2021-03-11T13:23:40Z,2021-03-12T09:16:41Z,CLOSED,False,6,1,1,https://github.com/ddstreet,Don't lock all current and future memory if can't increase memlock rl…,1,[],https://github.com/corosync/corosync/pull/620,https://github.com/ddstreet,1,https://github.com/corosync/corosync/pull/620,"…imit
If we fail to increase our RLIMIT_MEMLOCK, then locking all our current
and future memory is extremely dangerous; once our memory use reaches
our RLIMIT_MEMLOCK, memory allocations will start failing, very likely
leading to our entire process crashing.
This can happen if we aren't a privileged process, for example if
running as non-root user, or inside an unprivileged container.","…imit
If we fail to increase our RLIMIT_MEMLOCK, then locking all our current
and future memory is extremely dangerous; once our memory use reaches
our RLIMIT_MEMLOCK, memory allocations will start failing, very likely
leading to our entire process crashing.
This can happen if we aren't a privileged process, for example if
running as non-root user, or inside an unprivileged container.",True,{}
corosync/corosync,https://github.com/corosync/corosync,620,2021-03-10T17:51:56Z,2021-03-11T13:23:40Z,2021-03-12T09:16:41Z,CLOSED,False,6,1,1,https://github.com/ddstreet,Don't lock all current and future memory if can't increase memlock rl…,1,[],https://github.com/corosync/corosync/pull/620,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/620#issuecomment-795817838,"…imit
If we fail to increase our RLIMIT_MEMLOCK, then locking all our current
and future memory is extremely dangerous; once our memory use reaches
our RLIMIT_MEMLOCK, memory allocations will start failing, very likely
leading to our entire process crashing.
This can happen if we aren't a privileged process, for example if
running as non-root user, or inside an unprivileged container.",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,620,2021-03-10T17:51:56Z,2021-03-11T13:23:40Z,2021-03-12T09:16:41Z,CLOSED,False,6,1,1,https://github.com/ddstreet,Don't lock all current and future memory if can't increase memlock rl…,1,[],https://github.com/corosync/corosync/pull/620,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/620#issuecomment-796732404,"…imit
If we fail to increase our RLIMIT_MEMLOCK, then locking all our current
and future memory is extremely dangerous; once our memory use reaches
our RLIMIT_MEMLOCK, memory allocations will start failing, very likely
leading to our entire process crashing.
This can happen if we aren't a privileged process, for example if
running as non-root user, or inside an unprivileged container.","@ddstreet Hi, nice catch and patch so ACK and merged as a 2d29f68.
Thank you for the patch!
btw. It seems there is at least another project in HA stack - booth https://github.com/ClusterLabs/booth/blob/master/src/main.c#L1260 - with same issue - would you mind to open PR also for there (I can open it but I would like to keep your credit) -",True,{}
corosync/corosync,https://github.com/corosync/corosync,620,2021-03-10T17:51:56Z,2021-03-11T13:23:40Z,2021-03-12T09:16:41Z,CLOSED,False,6,1,1,https://github.com/ddstreet,Don't lock all current and future memory if can't increase memlock rl…,1,[],https://github.com/corosync/corosync/pull/620,https://github.com/ddstreet,4,https://github.com/corosync/corosync/pull/620#issuecomment-796905746,"…imit
If we fail to increase our RLIMIT_MEMLOCK, then locking all our current
and future memory is extremely dangerous; once our memory use reaches
our RLIMIT_MEMLOCK, memory allocations will start failing, very likely
leading to our entire process crashing.
This can happen if we aren't a privileged process, for example if
running as non-root user, or inside an unprivileged container.","btw. It seems there is at least another project in HA stack - booth https://github.com/ClusterLabs/booth/blob/master/src/main.c#L1260 - with same issue - would you mind to open PR also for there (I can open it but I would like to keep your credit) -

done, thanks!
ClusterLabs/booth#106",True,{}
corosync/corosync,https://github.com/corosync/corosync,620,2021-03-10T17:51:56Z,2021-03-11T13:23:40Z,2021-03-12T09:16:41Z,CLOSED,False,6,1,1,https://github.com/ddstreet,Don't lock all current and future memory if can't increase memlock rl…,1,[],https://github.com/corosync/corosync/pull/620,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/620#issuecomment-797353285,"…imit
If we fail to increase our RLIMIT_MEMLOCK, then locking all our current
and future memory is extremely dangerous; once our memory use reaches
our RLIMIT_MEMLOCK, memory allocations will start failing, very likely
leading to our entire process crashing.
This can happen if we aren't a privileged process, for example if
running as non-root user, or inside an unprivileged container.",@ddstreet Thanks a lot.,True,{}
corosync/corosync,https://github.com/corosync/corosync,621,2021-03-11T09:51:13Z,2021-04-19T09:29:42Z,2021-04-19T11:49:58Z,CLOSED,False,59,30,2,https://github.com/inouekazu,notifyd: improve to wait for corosync to start,1,[],https://github.com/corosync/corosync/pull/621,https://github.com/inouekazu,1,https://github.com/corosync/corosync/pull/621,"This patch will make corosync-notifyd wait for corosync to start, saving the user the trouble of starting notifyd.
Currently, users need to start notifyd after starting the cluster (corosync).
# pcs cluster start --all
rhel83-1: Starting Cluster...
rhel83-2: Starting Cluster...
rhel83-3: Starting Cluster...

# ssh rhel83-1 systemctl start corosync-notifyd
# ssh rhel83-2 systemctl start corosync-notifyd
# ssh rhel83-3 systemctl start corosync-notifyd

By setting auto-start of patched notifyd,
# systemctl enable corosync-notifyd
# systemctl start corosync-notifyd
# ps -ef | grep -e corosync -e pacemaker
root        4866       1  0 14:18 ?        00:00:00 /usr/sbin/corosync-notifyd -f -l -s -m 192.168.122.160

there is no need to start after starting the cluster.
# pcs cluster start --all
# ps -ef | grep -e corosync -e pacemaker
root        4866       1  0 14:18 ?        00:00:00 /usr/sbin/corosync-notifyd -f -l -s -m 192.168.122.160
root        4884       1 33 14:19 ?        00:00:01 /usr/sbin/corosync -f
root        4897       1  0 14:19 ?        00:00:00 /usr/sbin/pacemakerd -f
haclust+    4898    4897  1 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-based
root        4899    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-fenced
root        4900    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-execd
haclust+    4901    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-attrd
haclust+    4902    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-schedulerd
haclust+    4903    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-controld

Of course, there is no need to start after re-starting the cluster too.
# pcs cluster stop --all
# pcs cluster start --all
# ps -ef | grep -e corosync -e pacemaker
root        4866       1  0 14:18 ?        00:00:00 /usr/sbin/corosync-notifyd -f -l -s -m 192.168.122.160
root        4955       1 51 14:19 ?        00:00:02 /usr/sbin/corosync -f
root        4967       1  0 14:19 ?        00:00:00 /usr/sbin/pacemakerd -f
haclust+    4968    4967  1 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-based
root        4969    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-fenced
root        4970    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-execd
haclust+    4971    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-attrd
haclust+    4972    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-schedulerd
haclust+    4973    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-controld","This patch will make corosync-notifyd wait for corosync to start, saving the user the trouble of starting notifyd.
Currently, users need to start notifyd after starting the cluster (corosync).
# pcs cluster start --all
rhel83-1: Starting Cluster...
rhel83-2: Starting Cluster...
rhel83-3: Starting Cluster...

# ssh rhel83-1 systemctl start corosync-notifyd
# ssh rhel83-2 systemctl start corosync-notifyd
# ssh rhel83-3 systemctl start corosync-notifyd

By setting auto-start of patched notifyd,
# systemctl enable corosync-notifyd
# systemctl start corosync-notifyd
# ps -ef | grep -e corosync -e pacemaker
root        4866       1  0 14:18 ?        00:00:00 /usr/sbin/corosync-notifyd -f -l -s -m 192.168.122.160

there is no need to start after starting the cluster.
# pcs cluster start --all
# ps -ef | grep -e corosync -e pacemaker
root        4866       1  0 14:18 ?        00:00:00 /usr/sbin/corosync-notifyd -f -l -s -m 192.168.122.160
root        4884       1 33 14:19 ?        00:00:01 /usr/sbin/corosync -f
root        4897       1  0 14:19 ?        00:00:00 /usr/sbin/pacemakerd -f
haclust+    4898    4897  1 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-based
root        4899    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-fenced
root        4900    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-execd
haclust+    4901    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-attrd
haclust+    4902    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-schedulerd
haclust+    4903    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-controld

Of course, there is no need to start after re-starting the cluster too.
# pcs cluster stop --all
# pcs cluster start --all
# ps -ef | grep -e corosync -e pacemaker
root        4866       1  0 14:18 ?        00:00:00 /usr/sbin/corosync-notifyd -f -l -s -m 192.168.122.160
root        4955       1 51 14:19 ?        00:00:02 /usr/sbin/corosync -f
root        4967       1  0 14:19 ?        00:00:00 /usr/sbin/pacemakerd -f
haclust+    4968    4967  1 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-based
root        4969    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-fenced
root        4970    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-execd
haclust+    4971    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-attrd
haclust+    4972    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-schedulerd
haclust+    4973    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-controld",True,{}
corosync/corosync,https://github.com/corosync/corosync,621,2021-03-11T09:51:13Z,2021-04-19T09:29:42Z,2021-04-19T11:49:58Z,CLOSED,False,59,30,2,https://github.com/inouekazu,notifyd: improve to wait for corosync to start,1,[],https://github.com/corosync/corosync/pull/621,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/621#issuecomment-796611806,"This patch will make corosync-notifyd wait for corosync to start, saving the user the trouble of starting notifyd.
Currently, users need to start notifyd after starting the cluster (corosync).
# pcs cluster start --all
rhel83-1: Starting Cluster...
rhel83-2: Starting Cluster...
rhel83-3: Starting Cluster...

# ssh rhel83-1 systemctl start corosync-notifyd
# ssh rhel83-2 systemctl start corosync-notifyd
# ssh rhel83-3 systemctl start corosync-notifyd

By setting auto-start of patched notifyd,
# systemctl enable corosync-notifyd
# systemctl start corosync-notifyd
# ps -ef | grep -e corosync -e pacemaker
root        4866       1  0 14:18 ?        00:00:00 /usr/sbin/corosync-notifyd -f -l -s -m 192.168.122.160

there is no need to start after starting the cluster.
# pcs cluster start --all
# ps -ef | grep -e corosync -e pacemaker
root        4866       1  0 14:18 ?        00:00:00 /usr/sbin/corosync-notifyd -f -l -s -m 192.168.122.160
root        4884       1 33 14:19 ?        00:00:01 /usr/sbin/corosync -f
root        4897       1  0 14:19 ?        00:00:00 /usr/sbin/pacemakerd -f
haclust+    4898    4897  1 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-based
root        4899    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-fenced
root        4900    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-execd
haclust+    4901    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-attrd
haclust+    4902    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-schedulerd
haclust+    4903    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-controld

Of course, there is no need to start after re-starting the cluster too.
# pcs cluster stop --all
# pcs cluster start --all
# ps -ef | grep -e corosync -e pacemaker
root        4866       1  0 14:18 ?        00:00:00 /usr/sbin/corosync-notifyd -f -l -s -m 192.168.122.160
root        4955       1 51 14:19 ?        00:00:02 /usr/sbin/corosync -f
root        4967       1  0 14:19 ?        00:00:00 /usr/sbin/pacemakerd -f
haclust+    4968    4967  1 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-based
root        4969    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-fenced
root        4970    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-execd
haclust+    4971    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-attrd
haclust+    4972    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-schedulerd
haclust+    4973    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-controld",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,621,2021-03-11T09:51:13Z,2021-04-19T09:29:42Z,2021-04-19T11:49:58Z,CLOSED,False,59,30,2,https://github.com/inouekazu,notifyd: improve to wait for corosync to start,1,[],https://github.com/corosync/corosync/pull/621,https://github.com/HideoYamauchi,3,https://github.com/corosync/corosync/pull/621#issuecomment-796698107,"This patch will make corosync-notifyd wait for corosync to start, saving the user the trouble of starting notifyd.
Currently, users need to start notifyd after starting the cluster (corosync).
# pcs cluster start --all
rhel83-1: Starting Cluster...
rhel83-2: Starting Cluster...
rhel83-3: Starting Cluster...

# ssh rhel83-1 systemctl start corosync-notifyd
# ssh rhel83-2 systemctl start corosync-notifyd
# ssh rhel83-3 systemctl start corosync-notifyd

By setting auto-start of patched notifyd,
# systemctl enable corosync-notifyd
# systemctl start corosync-notifyd
# ps -ef | grep -e corosync -e pacemaker
root        4866       1  0 14:18 ?        00:00:00 /usr/sbin/corosync-notifyd -f -l -s -m 192.168.122.160

there is no need to start after starting the cluster.
# pcs cluster start --all
# ps -ef | grep -e corosync -e pacemaker
root        4866       1  0 14:18 ?        00:00:00 /usr/sbin/corosync-notifyd -f -l -s -m 192.168.122.160
root        4884       1 33 14:19 ?        00:00:01 /usr/sbin/corosync -f
root        4897       1  0 14:19 ?        00:00:00 /usr/sbin/pacemakerd -f
haclust+    4898    4897  1 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-based
root        4899    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-fenced
root        4900    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-execd
haclust+    4901    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-attrd
haclust+    4902    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-schedulerd
haclust+    4903    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-controld

Of course, there is no need to start after re-starting the cluster too.
# pcs cluster stop --all
# pcs cluster start --all
# ps -ef | grep -e corosync -e pacemaker
root        4866       1  0 14:18 ?        00:00:00 /usr/sbin/corosync-notifyd -f -l -s -m 192.168.122.160
root        4955       1 51 14:19 ?        00:00:02 /usr/sbin/corosync -f
root        4967       1  0 14:19 ?        00:00:00 /usr/sbin/pacemakerd -f
haclust+    4968    4967  1 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-based
root        4969    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-fenced
root        4970    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-execd
haclust+    4971    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-attrd
haclust+    4972    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-schedulerd
haclust+    4973    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-controld","Hi,
The patch seems to work fine.
There is only one comment.
If you start corosync-notifyd first and check the status with systemctl status corosync-notifyd, the error will be displayed last.
Wouldn't the user be confused if the corosync-notifyd status was active and the error was printed last?
You may want to change the log level or message.
[root]# systemctl start corosync-notifyd.service 
[root]# systemctl status corosync-notifyd.service 
● corosync-notifyd.service - Corosync Dbus and snmp notifier
   Loaded: loaded (/usr/lib/systemd/system/corosync-notifyd.service; disabled; vendor preset: disabled)
   Active: active (running) since Thu 2021-03-11 21:16:57 JST; 5s ago
     Docs: man:corosync-notifyd
 Main PID: 10229 (corosync-notify)
    Tasks: 1 (limit: 101864)
   Memory: 1.0M
   CGroup: /system.slice/corosync-notifyd.service
           └─10229 /usr/sbin/corosync-notifyd -f -s -m 192.168.3.76

 3月 11 21:16:57 rh82-dev01 systemd[1]: Starting Corosync Dbus and snmp notifier...
 3月 11 21:16:57 rh82-dev01 systemd[1]: Started Corosync Dbus and snmp notifier.
 3月 11 21:16:58 rh82-dev01 notifyd[10229]: [error] Failed to initialize the cmap API. Error 2

Best Regards,
Hideo Yamauchi.",True,{}
corosync/corosync,https://github.com/corosync/corosync,621,2021-03-11T09:51:13Z,2021-04-19T09:29:42Z,2021-04-19T11:49:58Z,CLOSED,False,59,30,2,https://github.com/inouekazu,notifyd: improve to wait for corosync to start,1,[],https://github.com/corosync/corosync/pull/621,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/621#issuecomment-796792557,"This patch will make corosync-notifyd wait for corosync to start, saving the user the trouble of starting notifyd.
Currently, users need to start notifyd after starting the cluster (corosync).
# pcs cluster start --all
rhel83-1: Starting Cluster...
rhel83-2: Starting Cluster...
rhel83-3: Starting Cluster...

# ssh rhel83-1 systemctl start corosync-notifyd
# ssh rhel83-2 systemctl start corosync-notifyd
# ssh rhel83-3 systemctl start corosync-notifyd

By setting auto-start of patched notifyd,
# systemctl enable corosync-notifyd
# systemctl start corosync-notifyd
# ps -ef | grep -e corosync -e pacemaker
root        4866       1  0 14:18 ?        00:00:00 /usr/sbin/corosync-notifyd -f -l -s -m 192.168.122.160

there is no need to start after starting the cluster.
# pcs cluster start --all
# ps -ef | grep -e corosync -e pacemaker
root        4866       1  0 14:18 ?        00:00:00 /usr/sbin/corosync-notifyd -f -l -s -m 192.168.122.160
root        4884       1 33 14:19 ?        00:00:01 /usr/sbin/corosync -f
root        4897       1  0 14:19 ?        00:00:00 /usr/sbin/pacemakerd -f
haclust+    4898    4897  1 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-based
root        4899    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-fenced
root        4900    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-execd
haclust+    4901    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-attrd
haclust+    4902    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-schedulerd
haclust+    4903    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-controld

Of course, there is no need to start after re-starting the cluster too.
# pcs cluster stop --all
# pcs cluster start --all
# ps -ef | grep -e corosync -e pacemaker
root        4866       1  0 14:18 ?        00:00:00 /usr/sbin/corosync-notifyd -f -l -s -m 192.168.122.160
root        4955       1 51 14:19 ?        00:00:02 /usr/sbin/corosync -f
root        4967       1  0 14:19 ?        00:00:00 /usr/sbin/pacemakerd -f
haclust+    4968    4967  1 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-based
root        4969    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-fenced
root        4970    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-execd
haclust+    4971    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-attrd
haclust+    4972    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-schedulerd
haclust+    4973    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-controld","@inouekazu Hi, thank you for the patch. Generally it looks good but I'm not entirely sure what is the main purpose of it.
Please correct me if I'm wrong or I totally misunderstood patch:
Right now (without patch), notifyd is successfully started only when corosync is running. That's expected behavior. It is also not auto-enabled what is also expected behavior (if we would like to have it autoenabled then such feature should be in pcs).
When service is enabled it should be autostarted by systemd on reboot and should wait till corosync is started successfully. Also when corosync exits uncleanly, systemd should take care to restart service because of ""Restart=on-failure"".
So it seems only situation which is solved by patch is to be able to stop (cleanly) corosync and keep notifyd running.
I'm I right or I'm missing something?
What is the main purpose of patch? Or maybe different way - what problem is patch trying to solve?",True,{}
corosync/corosync,https://github.com/corosync/corosync,621,2021-03-11T09:51:13Z,2021-04-19T09:29:42Z,2021-04-19T11:49:58Z,CLOSED,False,59,30,2,https://github.com/inouekazu,notifyd: improve to wait for corosync to start,1,[],https://github.com/corosync/corosync/pull/621,https://github.com/inouekazu,5,https://github.com/corosync/corosync/pull/621#issuecomment-797380141,"This patch will make corosync-notifyd wait for corosync to start, saving the user the trouble of starting notifyd.
Currently, users need to start notifyd after starting the cluster (corosync).
# pcs cluster start --all
rhel83-1: Starting Cluster...
rhel83-2: Starting Cluster...
rhel83-3: Starting Cluster...

# ssh rhel83-1 systemctl start corosync-notifyd
# ssh rhel83-2 systemctl start corosync-notifyd
# ssh rhel83-3 systemctl start corosync-notifyd

By setting auto-start of patched notifyd,
# systemctl enable corosync-notifyd
# systemctl start corosync-notifyd
# ps -ef | grep -e corosync -e pacemaker
root        4866       1  0 14:18 ?        00:00:00 /usr/sbin/corosync-notifyd -f -l -s -m 192.168.122.160

there is no need to start after starting the cluster.
# pcs cluster start --all
# ps -ef | grep -e corosync -e pacemaker
root        4866       1  0 14:18 ?        00:00:00 /usr/sbin/corosync-notifyd -f -l -s -m 192.168.122.160
root        4884       1 33 14:19 ?        00:00:01 /usr/sbin/corosync -f
root        4897       1  0 14:19 ?        00:00:00 /usr/sbin/pacemakerd -f
haclust+    4898    4897  1 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-based
root        4899    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-fenced
root        4900    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-execd
haclust+    4901    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-attrd
haclust+    4902    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-schedulerd
haclust+    4903    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-controld

Of course, there is no need to start after re-starting the cluster too.
# pcs cluster stop --all
# pcs cluster start --all
# ps -ef | grep -e corosync -e pacemaker
root        4866       1  0 14:18 ?        00:00:00 /usr/sbin/corosync-notifyd -f -l -s -m 192.168.122.160
root        4955       1 51 14:19 ?        00:00:02 /usr/sbin/corosync -f
root        4967       1  0 14:19 ?        00:00:00 /usr/sbin/pacemakerd -f
haclust+    4968    4967  1 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-based
root        4969    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-fenced
root        4970    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-execd
haclust+    4971    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-attrd
haclust+    4972    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-schedulerd
haclust+    4973    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-controld","Hi,

I'm I right or I'm missing something?

What you are saying is correct.

What is the main purpose of patch? Or maybe different way - what problem is patch trying to solve?

The purpose is to reduce the workload of the users.
Our users are using the pcs command (1 command of pcs cluster start --all) to start the cluster.
When using notifyd in the future, they will not like the procedure of systemctl start corosync-notifyd on all nodes every time they start the cluster. So I wanted to make this step unnecessary by keeping notifyd running.
And I'll fix the [error] Failed to initialize the cmap API. Error 2 message.",True,{}
corosync/corosync,https://github.com/corosync/corosync,621,2021-03-11T09:51:13Z,2021-04-19T09:29:42Z,2021-04-19T11:49:58Z,CLOSED,False,59,30,2,https://github.com/inouekazu,notifyd: improve to wait for corosync to start,1,[],https://github.com/corosync/corosync/pull/621,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/621#issuecomment-797569462,"This patch will make corosync-notifyd wait for corosync to start, saving the user the trouble of starting notifyd.
Currently, users need to start notifyd after starting the cluster (corosync).
# pcs cluster start --all
rhel83-1: Starting Cluster...
rhel83-2: Starting Cluster...
rhel83-3: Starting Cluster...

# ssh rhel83-1 systemctl start corosync-notifyd
# ssh rhel83-2 systemctl start corosync-notifyd
# ssh rhel83-3 systemctl start corosync-notifyd

By setting auto-start of patched notifyd,
# systemctl enable corosync-notifyd
# systemctl start corosync-notifyd
# ps -ef | grep -e corosync -e pacemaker
root        4866       1  0 14:18 ?        00:00:00 /usr/sbin/corosync-notifyd -f -l -s -m 192.168.122.160

there is no need to start after starting the cluster.
# pcs cluster start --all
# ps -ef | grep -e corosync -e pacemaker
root        4866       1  0 14:18 ?        00:00:00 /usr/sbin/corosync-notifyd -f -l -s -m 192.168.122.160
root        4884       1 33 14:19 ?        00:00:01 /usr/sbin/corosync -f
root        4897       1  0 14:19 ?        00:00:00 /usr/sbin/pacemakerd -f
haclust+    4898    4897  1 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-based
root        4899    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-fenced
root        4900    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-execd
haclust+    4901    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-attrd
haclust+    4902    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-schedulerd
haclust+    4903    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-controld

Of course, there is no need to start after re-starting the cluster too.
# pcs cluster stop --all
# pcs cluster start --all
# ps -ef | grep -e corosync -e pacemaker
root        4866       1  0 14:18 ?        00:00:00 /usr/sbin/corosync-notifyd -f -l -s -m 192.168.122.160
root        4955       1 51 14:19 ?        00:00:02 /usr/sbin/corosync -f
root        4967       1  0 14:19 ?        00:00:00 /usr/sbin/pacemakerd -f
haclust+    4968    4967  1 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-based
root        4969    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-fenced
root        4970    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-execd
haclust+    4971    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-attrd
haclust+    4972    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-schedulerd
haclust+    4973    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-controld","@inouekazu ok. So the question is, do your users really start cluster by running pcs cluster start --all more than once (when cluster is created)? I mean, it is cluster so I would expected it is configured, started and then it is doing its job, isn't it?
Also I'm thinking, wouldn't it make sense to add support for notifyd into pcs? Because (with or without patch) right now, users still has to enable notifyd on all nodes ""manually"" (just once with patch). If pcs would be able to enable it automatically then it could save the flag and start notifyd on pcs cluster start --all and also stop it on pcs cluster stop? That would remove need for this patch. And also would behave a bit more correctly, because pcs could disable notifyd service when cluster is destroyed (as doing for pcmk/corosync). What do you think?",True,{}
corosync/corosync,https://github.com/corosync/corosync,621,2021-03-11T09:51:13Z,2021-04-19T09:29:42Z,2021-04-19T11:49:58Z,CLOSED,False,59,30,2,https://github.com/inouekazu,notifyd: improve to wait for corosync to start,1,[],https://github.com/corosync/corosync/pull/621,https://github.com/jfriesse,7,https://github.com/corosync/corosync/pull/621#issuecomment-797572357,"This patch will make corosync-notifyd wait for corosync to start, saving the user the trouble of starting notifyd.
Currently, users need to start notifyd after starting the cluster (corosync).
# pcs cluster start --all
rhel83-1: Starting Cluster...
rhel83-2: Starting Cluster...
rhel83-3: Starting Cluster...

# ssh rhel83-1 systemctl start corosync-notifyd
# ssh rhel83-2 systemctl start corosync-notifyd
# ssh rhel83-3 systemctl start corosync-notifyd

By setting auto-start of patched notifyd,
# systemctl enable corosync-notifyd
# systemctl start corosync-notifyd
# ps -ef | grep -e corosync -e pacemaker
root        4866       1  0 14:18 ?        00:00:00 /usr/sbin/corosync-notifyd -f -l -s -m 192.168.122.160

there is no need to start after starting the cluster.
# pcs cluster start --all
# ps -ef | grep -e corosync -e pacemaker
root        4866       1  0 14:18 ?        00:00:00 /usr/sbin/corosync-notifyd -f -l -s -m 192.168.122.160
root        4884       1 33 14:19 ?        00:00:01 /usr/sbin/corosync -f
root        4897       1  0 14:19 ?        00:00:00 /usr/sbin/pacemakerd -f
haclust+    4898    4897  1 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-based
root        4899    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-fenced
root        4900    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-execd
haclust+    4901    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-attrd
haclust+    4902    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-schedulerd
haclust+    4903    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-controld

Of course, there is no need to start after re-starting the cluster too.
# pcs cluster stop --all
# pcs cluster start --all
# ps -ef | grep -e corosync -e pacemaker
root        4866       1  0 14:18 ?        00:00:00 /usr/sbin/corosync-notifyd -f -l -s -m 192.168.122.160
root        4955       1 51 14:19 ?        00:00:02 /usr/sbin/corosync -f
root        4967       1  0 14:19 ?        00:00:00 /usr/sbin/pacemakerd -f
haclust+    4968    4967  1 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-based
root        4969    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-fenced
root        4970    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-execd
haclust+    4971    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-attrd
haclust+    4972    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-schedulerd
haclust+    4973    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-controld",@knet-ci-bot ok to test,True,{}
corosync/corosync,https://github.com/corosync/corosync,621,2021-03-11T09:51:13Z,2021-04-19T09:29:42Z,2021-04-19T11:49:58Z,CLOSED,False,59,30,2,https://github.com/inouekazu,notifyd: improve to wait for corosync to start,1,[],https://github.com/corosync/corosync/pull/621,https://github.com/inouekazu,8,https://github.com/corosync/corosync/pull/621#issuecomment-822321399,"This patch will make corosync-notifyd wait for corosync to start, saving the user the trouble of starting notifyd.
Currently, users need to start notifyd after starting the cluster (corosync).
# pcs cluster start --all
rhel83-1: Starting Cluster...
rhel83-2: Starting Cluster...
rhel83-3: Starting Cluster...

# ssh rhel83-1 systemctl start corosync-notifyd
# ssh rhel83-2 systemctl start corosync-notifyd
# ssh rhel83-3 systemctl start corosync-notifyd

By setting auto-start of patched notifyd,
# systemctl enable corosync-notifyd
# systemctl start corosync-notifyd
# ps -ef | grep -e corosync -e pacemaker
root        4866       1  0 14:18 ?        00:00:00 /usr/sbin/corosync-notifyd -f -l -s -m 192.168.122.160

there is no need to start after starting the cluster.
# pcs cluster start --all
# ps -ef | grep -e corosync -e pacemaker
root        4866       1  0 14:18 ?        00:00:00 /usr/sbin/corosync-notifyd -f -l -s -m 192.168.122.160
root        4884       1 33 14:19 ?        00:00:01 /usr/sbin/corosync -f
root        4897       1  0 14:19 ?        00:00:00 /usr/sbin/pacemakerd -f
haclust+    4898    4897  1 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-based
root        4899    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-fenced
root        4900    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-execd
haclust+    4901    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-attrd
haclust+    4902    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-schedulerd
haclust+    4903    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-controld

Of course, there is no need to start after re-starting the cluster too.
# pcs cluster stop --all
# pcs cluster start --all
# ps -ef | grep -e corosync -e pacemaker
root        4866       1  0 14:18 ?        00:00:00 /usr/sbin/corosync-notifyd -f -l -s -m 192.168.122.160
root        4955       1 51 14:19 ?        00:00:02 /usr/sbin/corosync -f
root        4967       1  0 14:19 ?        00:00:00 /usr/sbin/pacemakerd -f
haclust+    4968    4967  1 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-based
root        4969    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-fenced
root        4970    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-execd
haclust+    4971    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-attrd
haclust+    4972    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-schedulerd
haclust+    4973    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-controld","I've asked if pcs has plans to support notifyd [1].

It remains unclear whether pcs will support notifyd.
The proposed method [2] could not be adopted.

user will be confused because the pcs cluster start command will return success even if notifyd fails to start.



As a result of our consideration, we plan to respond with the following settings.

corosync.service : add ExecStartPost and ExecStop
# SYSTEMD_EDITOR=vi systemctl edit corosync.service
[Service]
ExecStartPost=/usr/bin/systemctl start corosync-notifyd.service
ExecStop=/usr/bin/systemctl stop corosync-notifyd.service


corosync-notifyd.service : disable Requires and After
# SYSTEMD_EDITOR=vi systemctl edit corosync-notifyd.service --full
[Unit]
Description=Corosync Dbus and snmp notifier
Documentation=man:corosync-notifyd
# Requires=corosync.service
# After=corosync.service
(snip)



So close this request.
[1] https://lists.clusterlabs.org/pipermail/users/2021-March/028689.html
[2] https://lists.clusterlabs.org/pipermail/users/2021-March/028718.html",True,{}
corosync/corosync,https://github.com/corosync/corosync,621,2021-03-11T09:51:13Z,2021-04-19T09:29:42Z,2021-04-19T11:49:58Z,CLOSED,False,59,30,2,https://github.com/inouekazu,notifyd: improve to wait for corosync to start,1,[],https://github.com/corosync/corosync/pull/621,https://github.com/jfriesse,9,https://github.com/corosync/corosync/pull/621#issuecomment-822406099,"This patch will make corosync-notifyd wait for corosync to start, saving the user the trouble of starting notifyd.
Currently, users need to start notifyd after starting the cluster (corosync).
# pcs cluster start --all
rhel83-1: Starting Cluster...
rhel83-2: Starting Cluster...
rhel83-3: Starting Cluster...

# ssh rhel83-1 systemctl start corosync-notifyd
# ssh rhel83-2 systemctl start corosync-notifyd
# ssh rhel83-3 systemctl start corosync-notifyd

By setting auto-start of patched notifyd,
# systemctl enable corosync-notifyd
# systemctl start corosync-notifyd
# ps -ef | grep -e corosync -e pacemaker
root        4866       1  0 14:18 ?        00:00:00 /usr/sbin/corosync-notifyd -f -l -s -m 192.168.122.160

there is no need to start after starting the cluster.
# pcs cluster start --all
# ps -ef | grep -e corosync -e pacemaker
root        4866       1  0 14:18 ?        00:00:00 /usr/sbin/corosync-notifyd -f -l -s -m 192.168.122.160
root        4884       1 33 14:19 ?        00:00:01 /usr/sbin/corosync -f
root        4897       1  0 14:19 ?        00:00:00 /usr/sbin/pacemakerd -f
haclust+    4898    4897  1 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-based
root        4899    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-fenced
root        4900    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-execd
haclust+    4901    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-attrd
haclust+    4902    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-schedulerd
haclust+    4903    4897  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-controld

Of course, there is no need to start after re-starting the cluster too.
# pcs cluster stop --all
# pcs cluster start --all
# ps -ef | grep -e corosync -e pacemaker
root        4866       1  0 14:18 ?        00:00:00 /usr/sbin/corosync-notifyd -f -l -s -m 192.168.122.160
root        4955       1 51 14:19 ?        00:00:02 /usr/sbin/corosync -f
root        4967       1  0 14:19 ?        00:00:00 /usr/sbin/pacemakerd -f
haclust+    4968    4967  1 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-based
root        4969    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-fenced
root        4970    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-execd
haclust+    4971    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-attrd
haclust+    4972    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-schedulerd
haclust+    4973    4967  0 14:19 ?        00:00:00 /usr/libexec/pacemaker/pacemaker-controld","@inouekazu Hi, thank you for the update! Yup, these methods seems to be fine (eventho reading ML I would (personally) prefer the method of managing notifyd by pcmk (where pacemaker is available)).",True,{}
corosync/corosync,https://github.com/corosync/corosync,623,2021-03-12T12:38:14Z,2021-03-18T16:25:09Z,2021-03-18T16:25:10Z,CLOSED,False,39,3,4,https://github.com/ddstreet,totemknet: retry knet_handle_new without privileged operations if it …,1,[],https://github.com/corosync/corosync/pull/623,https://github.com/ddstreet,1,https://github.com/corosync/corosync/pull/623,"…fails
knet_handle_new can fail with ENAMETOOLONG if its privileged operations
fail, which can happen if we're running as a user process or in an
unprivileged container. Instead of failing to start, let's retry
without the privileged operations, which may result in a reduction in
performance, but at least it doesn't completely prevent us from starting.
Signed-off-by: Dan Streetman ddstreet@canonical.com","…fails
knet_handle_new can fail with ENAMETOOLONG if its privileged operations
fail, which can happen if we're running as a user process or in an
unprivileged container. Instead of failing to start, let's retry
without the privileged operations, which may result in a reduction in
performance, but at least it doesn't completely prevent us from starting.
Signed-off-by: Dan Streetman ddstreet@canonical.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,623,2021-03-12T12:38:14Z,2021-03-18T16:25:09Z,2021-03-18T16:25:10Z,CLOSED,False,39,3,4,https://github.com/ddstreet,totemknet: retry knet_handle_new without privileged operations if it …,1,[],https://github.com/corosync/corosync/pull/623,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/623#issuecomment-797464725,"…fails
knet_handle_new can fail with ENAMETOOLONG if its privileged operations
fail, which can happen if we're running as a user process or in an
unprivileged container. Instead of failing to start, let's retry
without the privileged operations, which may result in a reduction in
performance, but at least it doesn't completely prevent us from starting.
Signed-off-by: Dan Streetman ddstreet@canonical.com",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,623,2021-03-12T12:38:14Z,2021-03-18T16:25:09Z,2021-03-18T16:25:10Z,CLOSED,False,39,3,4,https://github.com/ddstreet,totemknet: retry knet_handle_new without privileged operations if it …,1,[],https://github.com/corosync/corosync/pull/623,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/623#issuecomment-799263675,"…fails
knet_handle_new can fail with ENAMETOOLONG if its privileged operations
fail, which can happen if we're running as a user process or in an
unprivileged container. Instead of failing to start, let's retry
without the privileged operations, which may result in a reduction in
performance, but at least it doesn't completely prevent us from starting.
Signed-off-by: Dan Streetman ddstreet@canonical.com","@ddstreet Thank you for the PR. It is generally good but after brief talk with knet maintainer there was a bit worry about automatic fallback because of possible performance problems.
Would you mind to improve patch so it is using new key in cmap (something like system.allow_unpriviledged_knet_handle_fallback, ... you got the idea) which would be by default false/no but one can set it to yes (similarly as (for example) system.move_to_root_cgroup - you can just copy/paste the code) to get automatic fallback?",True,{}
corosync/corosync,https://github.com/corosync/corosync,623,2021-03-12T12:38:14Z,2021-03-18T16:25:09Z,2021-03-18T16:25:10Z,CLOSED,False,39,3,4,https://github.com/ddstreet,totemknet: retry knet_handle_new without privileged operations if it …,1,[],https://github.com/corosync/corosync/pull/623,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/623#issuecomment-799264053,"…fails
knet_handle_new can fail with ENAMETOOLONG if its privileged operations
fail, which can happen if we're running as a user process or in an
unprivileged container. Instead of failing to start, let's retry
without the privileged operations, which may result in a reduction in
performance, but at least it doesn't completely prevent us from starting.
Signed-off-by: Dan Streetman ddstreet@canonical.com",@knet-ci-bot ok to test,True,{}
corosync/corosync,https://github.com/corosync/corosync,623,2021-03-12T12:38:14Z,2021-03-18T16:25:09Z,2021-03-18T16:25:10Z,CLOSED,False,39,3,4,https://github.com/ddstreet,totemknet: retry knet_handle_new without privileged operations if it …,1,[],https://github.com/corosync/corosync/pull/623,https://github.com/ddstreet,5,https://github.com/corosync/corosync/pull/623#issuecomment-799505377,"…fails
knet_handle_new can fail with ENAMETOOLONG if its privileged operations
fail, which can happen if we're running as a user process or in an
unprivileged container. Instead of failing to start, let's retry
without the privileged operations, which may result in a reduction in
performance, but at least it doesn't completely prevent us from starting.
Signed-off-by: Dan Streetman ddstreet@canonical.com","@ddstreet Thank you for the PR. It is generally good but after brief talk with knet maintainer there was a bit worry about automatic fallback because of possible performance problems.
Would you mind to improve patch so it is using new key in cmap (something like system.allow_unpriviledged_knet_handle_fallback, ... you got the idea) which would be by default false/no but one can set it to yes (similarly as (for example) system.move_to_root_cgroup - you can just copy/paste the code) to get automatic fallback?

I updated the commit, hopefully I got the cmap key addition correct; it did seem to test correctly for me.
I named it 'allow_knet_handle_fallback' as it's very easy to accidentally misspell 'unprivileged' so might cause confusion if it's in the param name.
Let me know if I can adjust anything else. Thanks!",True,{}
corosync/corosync,https://github.com/corosync/corosync,623,2021-03-12T12:38:14Z,2021-03-18T16:25:09Z,2021-03-18T16:25:10Z,CLOSED,False,39,3,4,https://github.com/ddstreet,totemknet: retry knet_handle_new without privileged operations if it …,1,[],https://github.com/corosync/corosync/pull/623,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/623#issuecomment-802067930,"…fails
knet_handle_new can fail with ENAMETOOLONG if its privileged operations
fail, which can happen if we're running as a user process or in an
unprivileged container. Instead of failing to start, let's retry
without the privileged operations, which may result in a reduction in
performance, but at least it doesn't completely prevent us from starting.
Signed-off-by: Dan Streetman ddstreet@canonical.com","@ddstreet Thank you for the update. I really like the name of the key, big thanks for the man page update (this is easily forgotten), loading of key is also correct. In general it looks really nice and I was unable find anything wrong during testing, so ACK and merged as a 4f171ea.
Regards,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,624,2021-03-15T07:51:43Z,2021-03-23T02:25:56Z,2021-03-24T18:18:11Z,CLOSED,False,5,1,1,https://github.com/liangxin1300,totemconfig: change netmtu value as a constant and show it in output of cmapctl,1,[],https://github.com/corosync/corosync/pull/624,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/624,"Hi,
I found that there was no totem.netmtu entry in the output of corosync-cmaptool, so I added it and change the default value 1500 as a constant NETMTU","Hi,
I found that there was no totem.netmtu entry in the output of corosync-cmaptool, so I added it and change the default value 1500 as a constant NETMTU",True,{}
corosync/corosync,https://github.com/corosync/corosync,624,2021-03-15T07:51:43Z,2021-03-23T02:25:56Z,2021-03-24T18:18:11Z,CLOSED,False,5,1,1,https://github.com/liangxin1300,totemconfig: change netmtu value as a constant and show it in output of cmapctl,1,[],https://github.com/corosync/corosync/pull/624,https://github.com/liangxin1300,2,https://github.com/corosync/corosync/pull/624#issuecomment-804537896,"Hi,
I found that there was no totem.netmtu entry in the output of corosync-cmaptool, so I added it and change the default value 1500 as a constant NETMTU","@jfriesse Thanks for the reply!
So, values marked not changeable in here https://github.com/corosync/corosync/wiki/Config-file-values are all not suitable using totem_volatileconfig_set_uint32_value to set, right?

do not call totem_volatileconfig_set_uint32_value but rather icmap_set after totemconfig netmtu is set

Based on above fact, I don't think we need call icmap_set to set netmtu again under UDP mode, since I found that if configured totem.netmtu, cmapctl will show it
Let's just keep the patch to change it as constant",True,{}
corosync/corosync,https://github.com/corosync/corosync,624,2021-03-15T07:51:43Z,2021-03-23T02:25:56Z,2021-03-24T18:18:11Z,CLOSED,False,5,1,1,https://github.com/liangxin1300,totemconfig: change netmtu value as a constant and show it in output of cmapctl,1,[],https://github.com/corosync/corosync/pull/624,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/624#issuecomment-806052340,"Hi,
I found that there was no totem.netmtu entry in the output of corosync-cmaptool, so I added it and change the default value 1500 as a constant NETMTU","@liangxin1300 Basically yes (eventho I'm not 100% sure if all the values from https://github.com/corosync/corosync/wiki/Config-file-values are still unchangeable), it should be correct.
Change the value to constant is definitively nice so looking forward for PR :)
Regards,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,625,2021-03-19T09:46:53Z,,2021-04-01T08:56:40Z,OPEN,False,4,3,1,https://github.com/jfriesse,totemudpu: use token socket for sending - TEST - DO NOT MERGE,1,[],https://github.com/corosync/corosync/pull/625,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/625,For issue #622. Do not merge.,For issue #622. Do not merge.,True,{}
corosync/corosync,https://github.com/corosync/corosync,625,2021-03-19T09:46:53Z,,2021-04-01T08:56:40Z,OPEN,False,4,3,1,https://github.com/jfriesse,totemudpu: use token socket for sending - TEST - DO NOT MERGE,1,[],https://github.com/corosync/corosync/pull/625,https://github.com/liangxin1300,2,https://github.com/corosync/corosync/pull/625#issuecomment-807877652,For issue #622. Do not merge.,"@jfriesse I build this patch on SLE15SP2, seems corosync started, but not pacemaker
Mar 26 10:05:24 15sp2-1 pacemakerd[4591]:  notice: Could not obtain corosync config data, exiting
Mar 26 10:05:24 15sp2-1 pacemakerd[4591]: cmap connection setup failed: CS_ERR_NOT_EXIST .  Retrying in 1s
Mar 26 10:05:24 15sp2-1 pacemakerd[4591]: cmap connection setup failed: CS_ERR_NOT_EXIST .  Retrying in 2s
Mar 26 10:05:24 15sp2-1 pacemakerd[4591]: cmap connection setup failed: CS_ERR_NOT_EXIST .  Retrying in 3s
Mar 26 10:05:24 15sp2-1 pacemakerd[4591]: cmap connection setup failed: CS_ERR_NOT_EXIST .  Retrying in 4s
Mar 26 10:05:24 15sp2-1 pacemakerd[4591]: cmap connection setup failed: CS_ERR_NOT_EXIST .  Retrying in 5s
Mar 26 10:05:24 15sp2-1 pacemakerd[4591]: Could not connect to Cluster Configuration Database API, error 12
Mar 26 10:05:24 15sp2-1 systemd[1]: pacemaker.service: Main process exited, code=exited, status=69/n/a
Mar 26 10:05:24 15sp2-1 systemd[1]: pacemaker.service: Unit entered failed state.
Mar 26 10:05:24 15sp2-1 systemd[1]: pacemaker.service: Failed with result 'exit-code'.
Mar 26 10:05:24 15sp2-1 systemd[1]: pacemaker.service: Service RestartSec=100ms expired, scheduling restart.
Mar 26 10:05:24 15sp2-1 systemd[1]: Stopped Pacemaker High Availability Cluster Manager.
Mar 26 10:05:24 15sp2-1 systemd[1]: Started Pacemaker High Availability Cluster Manager.
Mar 26 10:05:24 15sp2-1 pacemakerd[4813]:  notice: Additional logging available in /var/log/pacemaker/pacemaker.log
Mar 26 10:05:24 15sp2-1 pacemakerd[4813]:  error: couldn't open file qb-/dev/shm/qb-4037-4813-20-OD4zqV/qb-request-cmap-header: No such file or directory (2)
Mar 26 10:05:24 15sp2-1 pacemakerd[4813]:  error: couldn't create file for mmap
Mar 26 10:05:24 15sp2-1 pacemakerd[4813]:  error: qb_rb_open:REQUEST: No such file or directory (2)
Mar 26 10:05:24 15sp2-1 pacemakerd[4813]:  error: connection failed: No such file or directory (2)
Mar 26 10:05:25 15sp2-1 pacemakerd[4813]:  error: couldn't open file qb-/dev/shm/qb-4037-4813-20-Qqrjqr/qb-request-cmap-header: No such file or directory (2)
Mar 26 10:05:25 15sp2-1 pacemakerd[4813]:  error: couldn't create file for mmap
Mar 26 10:05:25 15sp2-1 pacemakerd[4813]:  error: qb_rb_open:REQUEST: No such file or directory (2)
Mar 26 10:05:25 15sp2-1 pacemakerd[4813]:  error: connection failed: No such file or directory (2)
Mar 26 10:05:27 15sp2-1 pacemakerd[4813]:  error: couldn't open file qb-/dev/shm/qb-4037-4813-20-tmdAm3/qb-request-cmap-header: No such file or directory (2)
Mar 26 10:05:27 15sp2-1 pacemakerd[4813]:  error: couldn't create file for mmap
Mar 26 10:05:27 15sp2-1 pacemakerd[4813]:  error: qb_rb_open:REQUEST: No such file or directory (2)
Mar 26 10:05:27 15sp2-1 pacemakerd[4813]:  error: connection failed: No such file or directory (2)
Mar 26 10:05:30 15sp2-1 pacemakerd[4813]:  error: couldn't open file qb-/dev/shm/qb-4037-4813-20-n9xTcO/qb-request-cmap-header: No such file or directory (2)
Mar 26 10:05:30 15sp2-1 pacemakerd[4813]:  error: couldn't create file for mmap
Mar 26 10:05:30 15sp2-1 pacemakerd[4813]:  error: qb_rb_open:REQUEST: No such file or directory (2)
Mar 26 10:05:30 15sp2-1 pacemakerd[4813]:  error: connection failed: No such file or directory (2)
Mar 26 10:05:34 15sp2-1 pacemakerd[4813]:  error: couldn't open file qb-/dev/shm/qb-4037-4813-20-x0LJVK/qb-request-cmap-header: No such file or directory (2)
Mar 26 10:05:34 15sp2-1 pacemakerd[4813]:  error: couldn't create file for mmap
Mar 26 10:05:34 15sp2-1 pacemakerd[4813]:  error: qb_rb_open:REQUEST: No such file or directory (2)
Mar 26 10:05:34 15sp2-1 pacemakerd[4813]:  error: connection failed: No such file or directory (2)",True,{}
corosync/corosync,https://github.com/corosync/corosync,625,2021-03-19T09:46:53Z,,2021-04-01T08:56:40Z,OPEN,False,4,3,1,https://github.com/jfriesse,totemudpu: use token socket for sending - TEST - DO NOT MERGE,1,[],https://github.com/corosync/corosync/pull/625,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/625#issuecomment-808055503,For issue #622. Do not merge.,"@liangxin1300 Hi, thanks for testing the patch! It is pretty weird because it looks like corosync hasn't started. How exactly you reporduced the problem? I was testing small setup with 2 nodes only (and working just fine), do you have more? Also this should affect only udpU (not multicast udp).
What is in the logs before (especially debug messages may be interesting)?
Thanks,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,625,2021-03-19T09:46:53Z,,2021-04-01T08:56:40Z,OPEN,False,4,3,1,https://github.com/jfriesse,totemudpu: use token socket for sending - TEST - DO NOT MERGE,1,[],https://github.com/corosync/corosync/pull/625,https://github.com/chrissie-c,4,https://github.com/corosync/corosync/pull/625#issuecomment-809164819,For issue #622. Do not merge.,"Those libqb filenames worry me. ""qb-/dev/shm/qb-4037-4813-20-x0LJVK/qb-request-cmap-header"". Was corosync built against the same libqb as pacemaker?",True,{}
corosync/corosync,https://github.com/corosync/corosync,625,2021-03-19T09:46:53Z,,2021-04-01T08:56:40Z,OPEN,False,4,3,1,https://github.com/jfriesse,totemudpu: use token socket for sending - TEST - DO NOT MERGE,1,[],https://github.com/corosync/corosync/pull/625,https://github.com/liangxin1300,5,https://github.com/corosync/corosync/pull/625#issuecomment-811761923,For issue #622. Do not merge.,"Works for me now, thanks!",True,{}
corosync/corosync,https://github.com/corosync/corosync,627,2021-03-25T01:16:26Z,2021-03-25T09:50:47Z,2021-03-25T09:50:47Z,CLOSED,False,3,1,1,https://github.com/liangxin1300,totemconfig: change udp netmtu value as a constant UDP_NETMTU,1,[],https://github.com/corosync/corosync/pull/627,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/627,"Based on discussion #624 , just change udp netmtu value as a constant UDP_NETMTU here
Thank you @jfriesse","Based on discussion #624 , just change udp netmtu value as a constant UDP_NETMTU here
Thank you @jfriesse",True,{}
corosync/corosync,https://github.com/corosync/corosync,627,2021-03-25T01:16:26Z,2021-03-25T09:50:47Z,2021-03-25T09:50:47Z,CLOSED,False,3,1,1,https://github.com/liangxin1300,totemconfig: change udp netmtu value as a constant UDP_NETMTU,1,[],https://github.com/corosync/corosync/pull/627,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/627#issuecomment-806512213,"Based on discussion #624 , just change udp netmtu value as a constant UDP_NETMTU here
Thank you @jfriesse","@liangxin1300 Hi, nice patch so ACK and merged as a cb5c77c.
Thank you for the patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,628,2021-03-29T09:07:19Z,2021-03-29T12:06:18Z,2021-03-29T12:06:19Z,CLOSED,False,2,2,1,https://github.com/nescio007,totemconfig: fix integer underflow and logic bug,1,[],https://github.com/corosync/corosync/pull/628,https://github.com/nescio007,1,https://github.com/corosync/corosync/pull/628,"Fix integer underflow when computing namelen in nodelist_byname,
always use computed namelen.
Fixes #626.","Fix integer underflow when computing namelen in nodelist_byname,
always use computed namelen.
Fixes #626.",True,{}
corosync/corosync,https://github.com/corosync/corosync,628,2021-03-29T09:07:19Z,2021-03-29T12:06:18Z,2021-03-29T12:06:19Z,CLOSED,False,2,2,1,https://github.com/nescio007,totemconfig: fix integer underflow and logic bug,1,[],https://github.com/corosync/corosync/pull/628,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/628#issuecomment-809209915,"Fix integer underflow when computing namelen in nodelist_byname,
always use computed namelen.
Fixes #626.",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,628,2021-03-29T09:07:19Z,2021-03-29T12:06:18Z,2021-03-29T12:06:19Z,CLOSED,False,2,2,1,https://github.com/nescio007,totemconfig: fix integer underflow and logic bug,1,[],https://github.com/corosync/corosync/pull/628,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/628#issuecomment-809216215,"Fix integer underflow when computing namelen in nodelist_byname,
always use computed namelen.
Fixes #626.",@knet-ci-bot ok to test,True,{}
corosync/corosync,https://github.com/corosync/corosync,628,2021-03-29T09:07:19Z,2021-03-29T12:06:18Z,2021-03-29T12:06:19Z,CLOSED,False,2,2,1,https://github.com/nescio007,totemconfig: fix integer underflow and logic bug,1,[],https://github.com/corosync/corosync/pull/628,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/628#issuecomment-809324248,"Fix integer underflow when computing namelen in nodelist_byname,
always use computed namelen.
Fixes #626.","@nescio007 Nice patch so ACK and merged as a 8835de5
Thank you for the patch.",True,{}
corosync/corosync,https://github.com/corosync/corosync,629,2021-04-01T01:27:49Z,2021-04-07T15:38:16Z,2021-04-07T15:38:16Z,CLOSED,False,29,1,1,https://github.com/liangxin1300,[needle] qnetd-cluster-list: sort by node_id when add new client,1,[],https://github.com/corosync/corosync/pull/629,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/629,backport corosync/corosync-qdevice#19,backport corosync/corosync-qdevice#19,True,{}
corosync/corosync,https://github.com/corosync/corosync,629,2021-04-01T01:27:49Z,2021-04-07T15:38:16Z,2021-04-07T15:38:16Z,CLOSED,False,29,1,1,https://github.com/liangxin1300,[needle] qnetd-cluster-list: sort by node_id when add new client,1,[],https://github.com/corosync/corosync/pull/629,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/629#issuecomment-815015247,backport corosync/corosync-qdevice#19,"@liangxin1300 Thank you for backport of patch. Similarly as with corosync-qdevice version, nice patch, ACK and merged as a 3eb9490
Regards,
Honza",True,{}
corosync/corosync,https://github.com/corosync/corosync,631,2021-04-03T06:47:07Z,2021-04-06T09:09:45Z,2021-04-06T09:12:33Z,CLOSED,False,4,5,1,https://github.com/fabbione,totemknet: pass correct handle to knet_handle_compress,1,[],https://github.com/corosync/corosync/pull/631,https://github.com/fabbione,1,https://github.com/corosync/corosync/pull/631,"totemknet_configure_compression was using knet_context
just to gather the knet handle / instance.
On first time config knet_contex is not initialized till
much later in the code, passing some random garbage pointers
to knet_handle_compress, that would crash later trying
to acquire a mutex lock.
Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com","totemknet_configure_compression was using knet_context
just to gather the knet handle / instance.
On first time config knet_contex is not initialized till
much later in the code, passing some random garbage pointers
to knet_handle_compress, that would crash later trying
to acquire a mutex lock.
Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,631,2021-04-03T06:47:07Z,2021-04-06T09:09:45Z,2021-04-06T09:12:33Z,CLOSED,False,4,5,1,https://github.com/fabbione,totemknet: pass correct handle to knet_handle_compress,1,[],https://github.com/corosync/corosync/pull/631,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/631#issuecomment-813962555,"totemknet_configure_compression was using knet_context
just to gather the knet handle / instance.
On first time config knet_contex is not initialized till
much later in the code, passing some random garbage pointers
to knet_handle_compress, that would crash later trying
to acquire a mutex lock.
Signed-off-by: Fabio M. Di Nitto fdinitto@redhat.com","@fabbione Really nice catch and patch so ACK and merged as a 650a3f1
Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,632,2021-04-06T07:39:23Z,2021-04-07T15:25:20Z,2021-04-07T15:25:21Z,CLOSED,False,12,2,1,https://github.com/liangxin1300,[needle] man: corosync.conf: adjust description about interface section,1,[],https://github.com/corosync/corosync/pull/632,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/632,Since interface section was not required on udpu mode,Since interface section was not required on udpu mode,True,{}
corosync/corosync,https://github.com/corosync/corosync,632,2021-04-06T07:39:23Z,2021-04-07T15:25:20Z,2021-04-07T15:25:21Z,CLOSED,False,12,2,1,https://github.com/liangxin1300,[needle] man: corosync.conf: adjust description about interface section,1,[],https://github.com/corosync/corosync/pull/632,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/632#issuecomment-815005730,Since interface section was not required on udpu mode,"@liangxin1300 Nice catch and nice patch so ACK and merged as a 92d70ce
Thank you for the patch",True,{}
corosync/corosync,https://github.com/corosync/corosync,633,2021-04-07T12:41:21Z,2021-04-07T15:06:08Z,2021-07-05T07:05:55Z,CLOSED,False,1,1,1,https://github.com/wferi,man: corosync-cfgtool.8: use proper single quotes,1,[],https://github.com/corosync/corosync/pull/633,https://github.com/wferi,1,https://github.com/corosync/corosync/pull/633,"Apostrophe as the first character of the input line indicates a
request, so groff complained: macro 'onwire'' not defined.
Signed-off-by: Ferenc Wágner wferi@debian.org","Apostrophe as the first character of the input line indicates a
request, so groff complained: macro 'onwire'' not defined.
Signed-off-by: Ferenc Wágner wferi@debian.org",True,{}
corosync/corosync,https://github.com/corosync/corosync,633,2021-04-07T12:41:21Z,2021-04-07T15:06:08Z,2021-07-05T07:05:55Z,CLOSED,False,1,1,1,https://github.com/wferi,man: corosync-cfgtool.8: use proper single quotes,1,[],https://github.com/corosync/corosync/pull/633,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/633#issuecomment-814991020,"Apostrophe as the first character of the input line indicates a
request, so groff complained: macro 'onwire'' not defined.
Signed-off-by: Ferenc Wágner wferi@debian.org","@wferi Nice catch, nice patch so ACK and merged as a 60c9845
Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,634,2021-04-09T08:43:15Z,2021-04-09T09:23:58Z,2021-04-09T09:23:58Z,CLOSED,False,3,2,1,https://github.com/liangxin1300,[needle] man: corosync-qdevice: replace votequorum_poll as votequorum_qdevice_poll,1,[],https://github.com/corosync/corosync/pull/634,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/634,backport corosync/corosync-qdevice#20,backport corosync/corosync-qdevice#20,True,{}
corosync/corosync,https://github.com/corosync/corosync,634,2021-04-09T08:43:15Z,2021-04-09T09:23:58Z,2021-04-09T09:23:58Z,CLOSED,False,3,2,1,https://github.com/liangxin1300,[needle] man: corosync-qdevice: replace votequorum_poll as votequorum_qdevice_poll,1,[],https://github.com/corosync/corosync/pull/634,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/634#issuecomment-816550069,backport corosync/corosync-qdevice#20,"@liangxin1300 Did backport before seen this PR (6236728) :) , but thanks anyway.",True,{}
corosync/corosync,https://github.com/corosync/corosync,635,2021-04-09T10:25:47Z,2021-04-14T16:08:50Z,2021-04-14T16:08:51Z,CLOSED,False,272,31,8,https://github.com/jfriesse,config: Remove hardcoded crypto models,3,[],https://github.com/corosync/corosync/pull/635,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/635,"Use knet_get_crypto_list to find knet supported crypto models and use
them instead of hardcoded list.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Use knet_get_crypto_list to find knet supported crypto models and use
them instead of hardcoded list.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,635,2021-04-09T10:25:47Z,2021-04-14T16:08:50Z,2021-04-14T16:08:51Z,CLOSED,False,272,31,8,https://github.com/jfriesse,config: Remove hardcoded crypto models,3,[],https://github.com/corosync/corosync/pull/635,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/635#issuecomment-816713201,"Use knet_get_crypto_list to find knet supported crypto models and use
them instead of hardcoded list.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c: I believe it is now ready for full review.,True,{}
corosync/corosync,https://github.com/corosync/corosync,635,2021-04-09T10:25:47Z,2021-04-14T16:08:50Z,2021-04-14T16:08:51Z,CLOSED,False,272,31,8,https://github.com/jfriesse,config: Remove hardcoded crypto models,3,[],https://github.com/corosync/corosync/pull/635,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/635#issuecomment-817943704,"Use knet_get_crypto_list to find knet supported crypto models and use
them instead of hardcoded list.
Signed-off-by: Jan Friesse jfriesse@redhat.com","@chrissie-c Yup, fully agree. I've pushed enhanced version where there is one ""big"" function which is able to handle all of these cases (it's not that bad but if you will feel ""crypto"" param - so abstraction to both crypto and compression - is over then please let me know and I will split it).",True,{}
corosync/corosync,https://github.com/corosync/corosync,635,2021-04-09T10:25:47Z,2021-04-14T16:08:50Z,2021-04-14T16:08:51Z,CLOSED,False,272,31,8,https://github.com/jfriesse,config: Remove hardcoded crypto models,3,[],https://github.com/corosync/corosync/pull/635,https://github.com/chrissie-c,4,https://github.com/corosync/corosync/pull/635#issuecomment-819305381,"Use knet_get_crypto_list to find knet supported crypto models and use
them instead of hardcoded list.
Signed-off-by: Jan Friesse jfriesse@redhat.com",TBH I think the 'big function' is a bit too big and would look neater as two - maybe abstract out the array search?,True,{}
corosync/corosync,https://github.com/corosync/corosync,635,2021-04-09T10:25:47Z,2021-04-14T16:08:50Z,2021-04-14T16:08:51Z,CLOSED,False,272,31,8,https://github.com/jfriesse,config: Remove hardcoded crypto models,3,[],https://github.com/corosync/corosync/pull/635,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/635#issuecomment-819333260,"Use knet_get_crypto_list to find knet supported crypto models and use
them instead of hardcoded list.
Signed-off-by: Jan Friesse jfriesse@redhat.com","@chrissie-c Agree. I've split that function (and force-pushed the branch). As I've expressed on IRC, I don't see too many reasonable ways how to abstract array search. I mean, we would either need function which would accept all parameters + both crypto/compress list or some kind of offset of name pointer arithmetic. I think right now it is good balance between repetitiveness and clarity.",True,{}
corosync/corosync,https://github.com/corosync/corosync,635,2021-04-09T10:25:47Z,2021-04-14T16:08:50Z,2021-04-14T16:08:51Z,CLOSED,False,272,31,8,https://github.com/jfriesse,config: Remove hardcoded crypto models,3,[],https://github.com/corosync/corosync/pull/635,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/635#issuecomment-819637556,"Use knet_get_crypto_list to find knet supported crypto models and use
them instead of hardcoded list.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c Thank you for the review. I've merged patches as a 2736948,True,{}
corosync/corosync,https://github.com/corosync/corosync,636,2021-05-03T14:40:36Z,2021-05-10T13:49:54Z,2021-05-10T13:49:59Z,CLOSED,False,26,9,2,https://github.com/jfriesse,main: Add support for cgroup v2,1,[],https://github.com/corosync/corosync/pull/636,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/636,"Support for cgroup v2 is very similar to cgroup v1 just checking (and
writing) different file.
Testing this feature is a bit harder than with cgroup v1 so it's
probably worh noting in this commit message.

Copy some service file (I've used httpd service) and set
CPUQuota=30% in the [service] section.
Check /sys/fs/cgroup/cgroup.subtree_control - there should be no
""cpu""
Start modified service
Check /sys/fs/cgroup/cgroup.subtree_control - there should be ""cpu""
Start corosync - It should be able to get rt priority

When move_to_root_cgroup is disabled, behavior differs:


If corosync is started before modified service, so
there is no ""cpu"" in /sys/fs/cgroup/cgroup.subtree_control
corosync starts without problem and gets rt priority.
Starting modified service later will never add ""cpu"" into
/sys/fs/cgroup/cgroup.subtree_control (because corosync is holding
rt priority and it is placed in the non-root cgroup by systemd).


When corosync is started after modified service, so ""cpu""
is in /sys/fs/cgroup/cgroup.subtree_control, corosync is not
able to get RT priority.


Signed-off-by: Jan Friesse jfriesse@redhat.com","Support for cgroup v2 is very similar to cgroup v1 just checking (and
writing) different file.
Testing this feature is a bit harder than with cgroup v1 so it's
probably worh noting in this commit message.

Copy some service file (I've used httpd service) and set
CPUQuota=30% in the [service] section.
Check /sys/fs/cgroup/cgroup.subtree_control - there should be no
""cpu""
Start modified service
Check /sys/fs/cgroup/cgroup.subtree_control - there should be ""cpu""
Start corosync - It should be able to get rt priority

When move_to_root_cgroup is disabled, behavior differs:


If corosync is started before modified service, so
there is no ""cpu"" in /sys/fs/cgroup/cgroup.subtree_control
corosync starts without problem and gets rt priority.
Starting modified service later will never add ""cpu"" into
/sys/fs/cgroup/cgroup.subtree_control (because corosync is holding
rt priority and it is placed in the non-root cgroup by systemd).


When corosync is started after modified service, so ""cpu""
is in /sys/fs/cgroup/cgroup.subtree_control, corosync is not
able to get RT priority.


Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,636,2021-05-03T14:40:36Z,2021-05-10T13:49:54Z,2021-05-10T13:49:59Z,CLOSED,False,26,9,2,https://github.com/jfriesse,main: Add support for cgroup v2,1,[],https://github.com/corosync/corosync/pull/636,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/636#issuecomment-831357886,"Support for cgroup v2 is very similar to cgroup v1 just checking (and
writing) different file.
Testing this feature is a bit harder than with cgroup v1 so it's
probably worh noting in this commit message.

Copy some service file (I've used httpd service) and set
CPUQuota=30% in the [service] section.
Check /sys/fs/cgroup/cgroup.subtree_control - there should be no
""cpu""
Start modified service
Check /sys/fs/cgroup/cgroup.subtree_control - there should be ""cpu""
Start corosync - It should be able to get rt priority

When move_to_root_cgroup is disabled, behavior differs:


If corosync is started before modified service, so
there is no ""cpu"" in /sys/fs/cgroup/cgroup.subtree_control
corosync starts without problem and gets rt priority.
Starting modified service later will never add ""cpu"" into
/sys/fs/cgroup/cgroup.subtree_control (because corosync is holding
rt priority and it is placed in the non-root cgroup by systemd).


When corosync is started after modified service, so ""cpu""
is in /sys/fs/cgroup/cgroup.subtree_control, corosync is not
able to get RT priority.


Signed-off-by: Jan Friesse jfriesse@redhat.com",@knet-ci-bot Retest this please,True,{}
corosync/corosync,https://github.com/corosync/corosync,636,2021-05-03T14:40:36Z,2021-05-10T13:49:54Z,2021-05-10T13:49:59Z,CLOSED,False,26,9,2,https://github.com/jfriesse,main: Add support for cgroup v2,1,[],https://github.com/corosync/corosync/pull/636,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/636#issuecomment-831370719,"Support for cgroup v2 is very similar to cgroup v1 just checking (and
writing) different file.
Testing this feature is a bit harder than with cgroup v1 so it's
probably worh noting in this commit message.

Copy some service file (I've used httpd service) and set
CPUQuota=30% in the [service] section.
Check /sys/fs/cgroup/cgroup.subtree_control - there should be no
""cpu""
Start modified service
Check /sys/fs/cgroup/cgroup.subtree_control - there should be ""cpu""
Start corosync - It should be able to get rt priority

When move_to_root_cgroup is disabled, behavior differs:


If corosync is started before modified service, so
there is no ""cpu"" in /sys/fs/cgroup/cgroup.subtree_control
corosync starts without problem and gets rt priority.
Starting modified service later will never add ""cpu"" into
/sys/fs/cgroup/cgroup.subtree_control (because corosync is holding
rt priority and it is placed in the non-root cgroup by systemd).


When corosync is started after modified service, so ""cpu""
is in /sys/fs/cgroup/cgroup.subtree_control, corosync is not
able to get RT priority.


Signed-off-by: Jan Friesse jfriesse@redhat.com",Force pushed small correction to please our machine (coveity) overlords.,True,{}
corosync/corosync,https://github.com/corosync/corosync,636,2021-05-03T14:40:36Z,2021-05-10T13:49:54Z,2021-05-10T13:49:59Z,CLOSED,False,26,9,2,https://github.com/jfriesse,main: Add support for cgroup v2,1,[],https://github.com/corosync/corosync/pull/636,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/636#issuecomment-833322508,"Support for cgroup v2 is very similar to cgroup v1 just checking (and
writing) different file.
Testing this feature is a bit harder than with cgroup v1 so it's
probably worh noting in this commit message.

Copy some service file (I've used httpd service) and set
CPUQuota=30% in the [service] section.
Check /sys/fs/cgroup/cgroup.subtree_control - there should be no
""cpu""
Start modified service
Check /sys/fs/cgroup/cgroup.subtree_control - there should be ""cpu""
Start corosync - It should be able to get rt priority

When move_to_root_cgroup is disabled, behavior differs:


If corosync is started before modified service, so
there is no ""cpu"" in /sys/fs/cgroup/cgroup.subtree_control
corosync starts without problem and gets rt priority.
Starting modified service later will never add ""cpu"" into
/sys/fs/cgroup/cgroup.subtree_control (because corosync is holding
rt priority and it is placed in the non-root cgroup by systemd).


When corosync is started after modified service, so ""cpu""
is in /sys/fs/cgroup/cgroup.subtree_control, corosync is not
able to get RT priority.


Signed-off-by: Jan Friesse jfriesse@redhat.com","One thing that's not clear to me is how we get ""cpu"" added to /sys/fs/cgroup/cgroup.subtree_control for a normal production run. Should it be in the corosync unit file or are we expecting it to be there already on production systems? (I had to use the httpd workaround on F34).

That's the biggest problem. The thing is:

Systemd always put process somewhere in the cgroup hierarchy
When ""cpu"" is activated on cgroup.subtree_control and corosync doesn't move itself to root cgroup then it's impossible to get realtime priority

And because ""cpu"" is activated globally when any single unit file asks for it (for example by setting cpuquota) it's impossible to say if ""cpu"" is going to be activated or not beforehand (keep in mind systemd activates units in parallel so corosync may be activated before some other unit which asks for cpuquota).
So to answer your questions:

There is at least one production used sw which sets cpuquota - insights - https://github.com/RedHatInsights/insights-client/blob/master/data/systemd/insights-client-boot.service so if insights is installed we can be sure ""cpu"" is added to cgroup
I don't think it should be in corosync unit file. I'm expecting that it is high chance that ""cpu"" will be in production system and if it isn't then moving to root cgroup really doesn't make any harm (actually it is better, because if ""cpu"" is not activated AND corosync starts sucesfully and not moved to root cgroup then it is no longer possible for systemd add ""cpu"")

Don't hesitate to ask more questions, because these cgroup v2 interactions is really messy",True,{}
corosync/corosync,https://github.com/corosync/corosync,636,2021-05-03T14:40:36Z,2021-05-10T13:49:54Z,2021-05-10T13:49:59Z,CLOSED,False,26,9,2,https://github.com/jfriesse,main: Add support for cgroup v2,1,[],https://github.com/corosync/corosync/pull/636,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/636#issuecomment-833492137,"Support for cgroup v2 is very similar to cgroup v1 just checking (and
writing) different file.
Testing this feature is a bit harder than with cgroup v1 so it's
probably worh noting in this commit message.

Copy some service file (I've used httpd service) and set
CPUQuota=30% in the [service] section.
Check /sys/fs/cgroup/cgroup.subtree_control - there should be no
""cpu""
Start modified service
Check /sys/fs/cgroup/cgroup.subtree_control - there should be ""cpu""
Start corosync - It should be able to get rt priority

When move_to_root_cgroup is disabled, behavior differs:


If corosync is started before modified service, so
there is no ""cpu"" in /sys/fs/cgroup/cgroup.subtree_control
corosync starts without problem and gets rt priority.
Starting modified service later will never add ""cpu"" into
/sys/fs/cgroup/cgroup.subtree_control (because corosync is holding
rt priority and it is placed in the non-root cgroup by systemd).


When corosync is started after modified service, so ""cpu""
is in /sys/fs/cgroup/cgroup.subtree_control, corosync is not
able to get RT priority.


Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c Changed version pushed. I've removed case completelly and rather use file name assigning during finding out what cgroup file is accessible.,True,{}
corosync/corosync,https://github.com/corosync/corosync,636,2021-05-03T14:40:36Z,2021-05-10T13:49:54Z,2021-05-10T13:49:59Z,CLOSED,False,26,9,2,https://github.com/jfriesse,main: Add support for cgroup v2,1,[],https://github.com/corosync/corosync/pull/636,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/636#issuecomment-836725416,"Support for cgroup v2 is very similar to cgroup v1 just checking (and
writing) different file.
Testing this feature is a bit harder than with cgroup v1 so it's
probably worh noting in this commit message.

Copy some service file (I've used httpd service) and set
CPUQuota=30% in the [service] section.
Check /sys/fs/cgroup/cgroup.subtree_control - there should be no
""cpu""
Start modified service
Check /sys/fs/cgroup/cgroup.subtree_control - there should be ""cpu""
Start corosync - It should be able to get rt priority

When move_to_root_cgroup is disabled, behavior differs:


If corosync is started before modified service, so
there is no ""cpu"" in /sys/fs/cgroup/cgroup.subtree_control
corosync starts without problem and gets rt priority.
Starting modified service later will never add ""cpu"" into
/sys/fs/cgroup/cgroup.subtree_control (because corosync is holding
rt priority and it is placed in the non-root cgroup by systemd).


When corosync is started after modified service, so ""cpu""
is in /sys/fs/cgroup/cgroup.subtree_control, corosync is not
able to get RT priority.


Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c Thank you for the ACK and merged as a 57e6b86 . And yes I cannot agree more -It's bizzare.,True,{}
corosync/corosync,https://github.com/corosync/corosync,638,2021-05-18T08:45:47Z,2021-05-19T16:32:49Z,2021-05-19T16:32:54Z,CLOSED,False,11,1,1,https://github.com/jfriesse,man: Add info about cgroup v2 behavior,1,[],https://github.com/corosync/corosync/pull/638,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/638,Signed-off-by: Jan Friesse jfriesse@redhat.com,Signed-off-by: Jan Friesse jfriesse@redhat.com,True,{}
corosync/corosync,https://github.com/corosync/corosync,638,2021-05-18T08:45:47Z,2021-05-19T16:32:49Z,2021-05-19T16:32:54Z,CLOSED,False,11,1,1,https://github.com/jfriesse,man: Add info about cgroup v2 behavior,1,[],https://github.com/corosync/corosync/pull/638,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/638#issuecomment-844271276,Signed-off-by: Jan Friesse jfriesse@redhat.com,"@chrissie-c Thank you for englishify change. I've added ""the"" and merged as a 9d3df56.",True,{}
corosync/corosync,https://github.com/corosync/corosync,639,2021-05-18T16:17:40Z,2021-05-19T16:29:48Z,2021-05-19T16:29:51Z,CLOSED,False,18,0,2,https://github.com/jfriesse,cfg: corosync_cfg_trackstop blocks forever,1,[],https://github.com/corosync/corosync/pull/639,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/639,"corosync_cfg_trackstop expects reply but that was never sent. Make sure
to send reply so corosync_cfg_trackstop works.
Signed-off-by: Jan Friesse jfriesse@redhat.com","corosync_cfg_trackstop expects reply but that was never sent. Make sure
to send reply so corosync_cfg_trackstop works.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,639,2021-05-18T16:17:40Z,2021-05-19T16:29:48Z,2021-05-19T16:29:51Z,CLOSED,False,18,0,2,https://github.com/jfriesse,cfg: corosync_cfg_trackstop blocks forever,1,[],https://github.com/corosync/corosync/pull/639,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/639#issuecomment-844268706,"corosync_cfg_trackstop expects reply but that was never sent. Make sure
to send reply so corosync_cfg_trackstop works.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c Thank you for the review. I've merged patch as a 791cc6c,True,{}
corosync/corosync,https://github.com/corosync/corosync,644,2021-06-02T10:33:38Z,2021-06-02T15:17:44Z,2021-06-02T15:17:52Z,CLOSED,False,4,1,1,https://github.com/jfriesse,man: Add note about single node configuration,1,[],https://github.com/corosync/corosync/pull/644,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/644,"Internally knet is using just one link for localhost so for single node
configuration knet_link_get_link_list returns only one entry. This is
propagated to corosync-cfgtool -s.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Internally knet is using just one link for localhost so for single node
configuration knet_link_get_link_list returns only one entry. This is
propagated to corosync-cfgtool -s.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,644,2021-06-02T10:33:38Z,2021-06-02T15:17:44Z,2021-06-02T15:17:52Z,CLOSED,False,4,1,1,https://github.com/jfriesse,man: Add note about single node configuration,1,[],https://github.com/corosync/corosync/pull/644,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/644#issuecomment-853116270,"Internally knet is using just one link for localhost so for single node
configuration knet_link_get_link_list returns only one entry. This is
propagated to corosync-cfgtool -s.
Signed-off-by: Jan Friesse jfriesse@redhat.com",Thank you for the review. I've merged patch as a 7ff95c7,True,{}
corosync/corosync,https://github.com/corosync/corosync,645,2021-06-03T07:00:23Z,2021-06-03T08:16:04Z,2021-06-03T08:16:04Z,CLOSED,False,18,1,1,https://github.com/chrissie-c,stats: fix potential crash when iterating over deleted keys,1,[],https://github.com/corosync/corosync/pull/645,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/645,"The libqb map API leaves 'ownership' of the data with the caller
but does its own lifetime management, so it can easily happen that
map_rm() is called and the data deleted by the caller.
But if an iterator is running over that item then the map entry
will not get removed (leaving dangling pointers) until later.
libqb has a hack-y callback that tells the owner when it is safe to
delete the allocated memory, so we hook into that. icmap is already
using it.
Signed-Off-By: Chrissie Caulfield ccaulfie@redhat.com","The libqb map API leaves 'ownership' of the data with the caller
but does its own lifetime management, so it can easily happen that
map_rm() is called and the data deleted by the caller.
But if an iterator is running over that item then the map entry
will not get removed (leaving dangling pointers) until later.
libqb has a hack-y callback that tells the owner when it is safe to
delete the allocated memory, so we hook into that. icmap is already
using it.
Signed-Off-By: Chrissie Caulfield ccaulfie@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,645,2021-06-03T07:00:23Z,2021-06-03T08:16:04Z,2021-06-03T08:16:04Z,CLOSED,False,18,1,1,https://github.com/chrissie-c,stats: fix potential crash when iterating over deleted keys,1,[],https://github.com/corosync/corosync/pull/645,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/645#issuecomment-853679496,"The libqb map API leaves 'ownership' of the data with the caller
but does its own lifetime management, so it can easily happen that
map_rm() is called and the data deleted by the caller.
But if an iterator is running over that item then the map entry
will not get removed (leaving dangling pointers) until later.
libqb has a hack-y callback that tells the owner when it is safe to
delete the allocated memory, so we hook into that. icmap is already
using it.
Signed-Off-By: Chrissie Caulfield ccaulfie@redhat.com","Nice patch so ACK and merged as a 24b7872
Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,648,2021-07-23T08:20:17Z,2021-07-23T13:35:42Z,2021-07-23T13:35:45Z,CLOSED,False,109,30,3,https://github.com/jfriesse,main: Add support for cgroup v2 and auto mode,1,[],https://github.com/corosync/corosync/pull/648,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/648,"Support for cgroup v2 is very similar to cgroup v1 just checking (and
writing) different file.
Because of all the problems described later with cgroup v2 new ""auto""
mode (new default) is added. This mode first tries to set rr scheduling
and moves Corosync to root cgroup only if it fails.
Testing this feature is a bit harder than with cgroup v1 so it's
probably worh noting in this commit message.

Copy some service file (I've used httpd service) and set
CPUQuota=30% in the [service] section.
Check /sys/fs/cgroup/cgroup.subtree_control - there should be no
""cpu""
Start modified service
Check /sys/fs/cgroup/cgroup.subtree_control - there should be ""cpu""
Start corosync - It should be able to get rt priority

When move_to_root_cgroup is disabled (applies only for kernels
with CONFIG_RT_GROUP_SCHED enabled), behavior differs:


If corosync is started before modified service, so
there is no ""cpu"" in /sys/fs/cgroup/cgroup.subtree_control
corosync starts without problem and gets rt priority.
Starting modified service later will never add ""cpu"" into
/sys/fs/cgroup/cgroup.subtree_control (because corosync is holding
rt priority and it is placed in the non-root cgroup by systemd).


When corosync is started after modified service, so ""cpu""
is in /sys/fs/cgroup/cgroup.subtree_control, corosync is not
able to get RT priority.


It's worth noting problems when cgroup v2 is used together with systemd
logging described in corosync.conf(5) man page.
Signed-off-by: Jan Friesse jfriesse@redhat.com
Reviewed-by: Christine Caulfield ccaulfie@redhat.com","Support for cgroup v2 is very similar to cgroup v1 just checking (and
writing) different file.
Because of all the problems described later with cgroup v2 new ""auto""
mode (new default) is added. This mode first tries to set rr scheduling
and moves Corosync to root cgroup only if it fails.
Testing this feature is a bit harder than with cgroup v1 so it's
probably worh noting in this commit message.

Copy some service file (I've used httpd service) and set
CPUQuota=30% in the [service] section.
Check /sys/fs/cgroup/cgroup.subtree_control - there should be no
""cpu""
Start modified service
Check /sys/fs/cgroup/cgroup.subtree_control - there should be ""cpu""
Start corosync - It should be able to get rt priority

When move_to_root_cgroup is disabled (applies only for kernels
with CONFIG_RT_GROUP_SCHED enabled), behavior differs:


If corosync is started before modified service, so
there is no ""cpu"" in /sys/fs/cgroup/cgroup.subtree_control
corosync starts without problem and gets rt priority.
Starting modified service later will never add ""cpu"" into
/sys/fs/cgroup/cgroup.subtree_control (because corosync is holding
rt priority and it is placed in the non-root cgroup by systemd).


When corosync is started after modified service, so ""cpu""
is in /sys/fs/cgroup/cgroup.subtree_control, corosync is not
able to get RT priority.


It's worth noting problems when cgroup v2 is used together with systemd
logging described in corosync.conf(5) man page.
Signed-off-by: Jan Friesse jfriesse@redhat.com
Reviewed-by: Christine Caulfield ccaulfie@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,648,2021-07-23T08:20:17Z,2021-07-23T13:35:42Z,2021-07-23T13:35:45Z,CLOSED,False,109,30,3,https://github.com/jfriesse,main: Add support for cgroup v2 and auto mode,1,[],https://github.com/corosync/corosync/pull/648,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/648#issuecomment-885643790,"Support for cgroup v2 is very similar to cgroup v1 just checking (and
writing) different file.
Because of all the problems described later with cgroup v2 new ""auto""
mode (new default) is added. This mode first tries to set rr scheduling
and moves Corosync to root cgroup only if it fails.
Testing this feature is a bit harder than with cgroup v1 so it's
probably worh noting in this commit message.

Copy some service file (I've used httpd service) and set
CPUQuota=30% in the [service] section.
Check /sys/fs/cgroup/cgroup.subtree_control - there should be no
""cpu""
Start modified service
Check /sys/fs/cgroup/cgroup.subtree_control - there should be ""cpu""
Start corosync - It should be able to get rt priority

When move_to_root_cgroup is disabled (applies only for kernels
with CONFIG_RT_GROUP_SCHED enabled), behavior differs:


If corosync is started before modified service, so
there is no ""cpu"" in /sys/fs/cgroup/cgroup.subtree_control
corosync starts without problem and gets rt priority.
Starting modified service later will never add ""cpu"" into
/sys/fs/cgroup/cgroup.subtree_control (because corosync is holding
rt priority and it is placed in the non-root cgroup by systemd).


When corosync is started after modified service, so ""cpu""
is in /sys/fs/cgroup/cgroup.subtree_control, corosync is not
able to get RT priority.


It's worth noting problems when cgroup v2 is used together with systemd
logging described in corosync.conf(5) man page.
Signed-off-by: Jan Friesse jfriesse@redhat.com
Reviewed-by: Christine Caulfield ccaulfie@redhat.com",@chrissie-c Thank you for review and ack. I've merged patch as a c9996fd.,True,{}
corosync/corosync,https://github.com/corosync/corosync,649,2021-07-28T13:27:51Z,2021-07-29T12:40:45Z,2021-07-29T12:46:54Z,CLOSED,False,39,8,2,https://github.com/chrissie-c,knet: Fix node status display,1,[],https://github.com/corosync/corosync/pull/649,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/649,"Currently if there is a gap in the links (eg link0 is missing)
corosync-cfgtool -s will still display the links as 0,1,2,3...
even if they are 1,2,5,6...
Also display the KNET transport type with the link in
corosync-cfgtool -s & -n","Currently if there is a gap in the links (eg link0 is missing)
corosync-cfgtool -s will still display the links as 0,1,2,3...
even if they are 1,2,5,6...
Also display the KNET transport type with the link in
corosync-cfgtool -s & -n",True,{}
corosync/corosync,https://github.com/corosync/corosync,649,2021-07-28T13:27:51Z,2021-07-29T12:40:45Z,2021-07-29T12:46:54Z,CLOSED,False,39,8,2,https://github.com/chrissie-c,knet: Fix node status display,1,[],https://github.com/corosync/corosync/pull/649,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/649#issuecomment-889095255,"Currently if there is a gap in the links (eg link0 is missing)
corosync-cfgtool -s will still display the links as 0,1,2,3...
even if they are 1,2,5,6...
Also display the KNET transport type with the link in
corosync-cfgtool -s & -n","Nice patch, so ACK and merged as a 1d217b9 (I've just added cmap_iter_finalize call, formally not needed because cmap_finalize is called right after iteration but nice practice).
Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,649,2021-07-28T13:27:51Z,2021-07-29T12:40:45Z,2021-07-29T12:46:54Z,CLOSED,False,39,8,2,https://github.com/chrissie-c,knet: Fix node status display,1,[],https://github.com/corosync/corosync/pull/649,https://github.com/chrissie-c,3,https://github.com/corosync/corosync/pull/649#issuecomment-889109483,"Currently if there is a gap in the links (eg link0 is missing)
corosync-cfgtool -s will still display the links as 0,1,2,3...
even if they are 1,2,5,6...
Also display the KNET transport type with the link in
corosync-cfgtool -s & -n","good spot, thanks",True,{}
corosync/corosync,https://github.com/corosync/corosync,650,2021-07-30T14:38:17Z,2021-08-02T13:14:51Z,2021-08-02T13:14:54Z,CLOSED,False,46,21,5,https://github.com/jfriesse,Totem nodeid fix,6,[],https://github.com/corosync/corosync/pull/650,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/650,"""Fixes"" #647 .
Last patch (Put autogenerated nodeid back to cmap) can be also solved in cfgtool by not putting nodeid back to cmap but rather autogenerate it in cfgtool...
During testing I've also found another problem in cfgtool (not fixed yet):
totem {
	version: 2
	transport: knet
}

logging {
	fileline: off
	to_stderr: yes
	to_logfile: yes
	logfile: /var/log/cluster/corosync.log
	to_syslog: yes
	debug: on
}

nodelist {
	node {
		nodeid: 5
		ring0_addr: 192.168.63.45
	}
	node {
		nodeid: 6
		ring0_addr: 192.168.63.46
	}
}

Running corosync on node with id 5 (and node id 6 is not running corosync), cfgtool outputs is:
Local node ID 5, transport knet
LINK ID 0 udp
	addr	= 192.168.63.45
	status:
		nodeid:   5:	localhost
		nodeid:   6:	disconnected

So correct output. But when nodeid 5 is changed to 7 and corosync restarted (on node previously named 5 - now node 7), output is:
Local node ID 7, transport knet
LINK ID 0 udp
	addr	= 192.168.63.45
	status:
		nodeid:   6:	localhost
		nodeid:   7:	connected

what is not correct. cfgtool -bs output also seems to be incorrect
Local node ID 7, transport knet
LINK ID 0 udp
	addr	= 192.168.63.45
	status	= 13

There should be 'n' for localhost.
@chrissie-c Can you please take a look why this problem is happening? It's connected with 9e7f62d because 4a2f48b was working fine.","""Fixes"" #647 .
Last patch (Put autogenerated nodeid back to cmap) can be also solved in cfgtool by not putting nodeid back to cmap but rather autogenerate it in cfgtool...
During testing I've also found another problem in cfgtool (not fixed yet):
totem {
	version: 2
	transport: knet
}

logging {
	fileline: off
	to_stderr: yes
	to_logfile: yes
	logfile: /var/log/cluster/corosync.log
	to_syslog: yes
	debug: on
}

nodelist {
	node {
		nodeid: 5
		ring0_addr: 192.168.63.45
	}
	node {
		nodeid: 6
		ring0_addr: 192.168.63.46
	}
}

Running corosync on node with id 5 (and node id 6 is not running corosync), cfgtool outputs is:
Local node ID 5, transport knet
LINK ID 0 udp
	addr	= 192.168.63.45
	status:
		nodeid:   5:	localhost
		nodeid:   6:	disconnected

So correct output. But when nodeid 5 is changed to 7 and corosync restarted (on node previously named 5 - now node 7), output is:
Local node ID 7, transport knet
LINK ID 0 udp
	addr	= 192.168.63.45
	status:
		nodeid:   6:	localhost
		nodeid:   7:	connected

what is not correct. cfgtool -bs output also seems to be incorrect
Local node ID 7, transport knet
LINK ID 0 udp
	addr	= 192.168.63.45
	status	= 13

There should be 'n' for localhost.
@chrissie-c Can you please take a look why this problem is happening? It's connected with 9e7f62d because 4a2f48b was working fine.",True,{}
corosync/corosync,https://github.com/corosync/corosync,650,2021-07-30T14:38:17Z,2021-08-02T13:14:51Z,2021-08-02T13:14:54Z,CLOSED,False,46,21,5,https://github.com/jfriesse,Totem nodeid fix,6,[],https://github.com/corosync/corosync/pull/650,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/650#issuecomment-890794057,"""Fixes"" #647 .
Last patch (Put autogenerated nodeid back to cmap) can be also solved in cfgtool by not putting nodeid back to cmap but rather autogenerate it in cfgtool...
During testing I've also found another problem in cfgtool (not fixed yet):
totem {
	version: 2
	transport: knet
}

logging {
	fileline: off
	to_stderr: yes
	to_logfile: yes
	logfile: /var/log/cluster/corosync.log
	to_syslog: yes
	debug: on
}

nodelist {
	node {
		nodeid: 5
		ring0_addr: 192.168.63.45
	}
	node {
		nodeid: 6
		ring0_addr: 192.168.63.46
	}
}

Running corosync on node with id 5 (and node id 6 is not running corosync), cfgtool outputs is:
Local node ID 5, transport knet
LINK ID 0 udp
	addr	= 192.168.63.45
	status:
		nodeid:   5:	localhost
		nodeid:   6:	disconnected

So correct output. But when nodeid 5 is changed to 7 and corosync restarted (on node previously named 5 - now node 7), output is:
Local node ID 7, transport knet
LINK ID 0 udp
	addr	= 192.168.63.45
	status:
		nodeid:   6:	localhost
		nodeid:   7:	connected

what is not correct. cfgtool -bs output also seems to be incorrect
Local node ID 7, transport knet
LINK ID 0 udp
	addr	= 192.168.63.45
	status	= 13

There should be 'n' for localhost.
@chrissie-c Can you please take a look why this problem is happening? It's connected with 9e7f62d because 4a2f48b was working fine.","@chrissie-c No need to worry about cfgtool problem. It was (quite obvious) problem with sort called after indexes were set. It's fixed in updated branch.
So I think it is ready for review now.",True,{}
corosync/corosync,https://github.com/corosync/corosync,650,2021-07-30T14:38:17Z,2021-08-02T13:14:51Z,2021-08-02T13:14:54Z,CLOSED,False,46,21,5,https://github.com/jfriesse,Totem nodeid fix,6,[],https://github.com/corosync/corosync/pull/650,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/650#issuecomment-890880313,"""Fixes"" #647 .
Last patch (Put autogenerated nodeid back to cmap) can be also solved in cfgtool by not putting nodeid back to cmap but rather autogenerate it in cfgtool...
During testing I've also found another problem in cfgtool (not fixed yet):
totem {
	version: 2
	transport: knet
}

logging {
	fileline: off
	to_stderr: yes
	to_logfile: yes
	logfile: /var/log/cluster/corosync.log
	to_syslog: yes
	debug: on
}

nodelist {
	node {
		nodeid: 5
		ring0_addr: 192.168.63.45
	}
	node {
		nodeid: 6
		ring0_addr: 192.168.63.46
	}
}

Running corosync on node with id 5 (and node id 6 is not running corosync), cfgtool outputs is:
Local node ID 5, transport knet
LINK ID 0 udp
	addr	= 192.168.63.45
	status:
		nodeid:   5:	localhost
		nodeid:   6:	disconnected

So correct output. But when nodeid 5 is changed to 7 and corosync restarted (on node previously named 5 - now node 7), output is:
Local node ID 7, transport knet
LINK ID 0 udp
	addr	= 192.168.63.45
	status:
		nodeid:   6:	localhost
		nodeid:   7:	connected

what is not correct. cfgtool -bs output also seems to be incorrect
Local node ID 7, transport knet
LINK ID 0 udp
	addr	= 192.168.63.45
	status	= 13

There should be 'n' for localhost.
@chrissie-c Can you please take a look why this problem is happening? It's connected with 9e7f62d because 4a2f48b was working fine.",Found small problem in 3rd patch so force pushed fix,True,{}
corosync/corosync,https://github.com/corosync/corosync,650,2021-07-30T14:38:17Z,2021-08-02T13:14:51Z,2021-08-02T13:14:54Z,CLOSED,False,46,21,5,https://github.com/jfriesse,Totem nodeid fix,6,[],https://github.com/corosync/corosync/pull/650,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/650#issuecomment-891017316,"""Fixes"" #647 .
Last patch (Put autogenerated nodeid back to cmap) can be also solved in cfgtool by not putting nodeid back to cmap but rather autogenerate it in cfgtool...
During testing I've also found another problem in cfgtool (not fixed yet):
totem {
	version: 2
	transport: knet
}

logging {
	fileline: off
	to_stderr: yes
	to_logfile: yes
	logfile: /var/log/cluster/corosync.log
	to_syslog: yes
	debug: on
}

nodelist {
	node {
		nodeid: 5
		ring0_addr: 192.168.63.45
	}
	node {
		nodeid: 6
		ring0_addr: 192.168.63.46
	}
}

Running corosync on node with id 5 (and node id 6 is not running corosync), cfgtool outputs is:
Local node ID 5, transport knet
LINK ID 0 udp
	addr	= 192.168.63.45
	status:
		nodeid:   5:	localhost
		nodeid:   6:	disconnected

So correct output. But when nodeid 5 is changed to 7 and corosync restarted (on node previously named 5 - now node 7), output is:
Local node ID 7, transport knet
LINK ID 0 udp
	addr	= 192.168.63.45
	status:
		nodeid:   6:	localhost
		nodeid:   7:	connected

what is not correct. cfgtool -bs output also seems to be incorrect
Local node ID 7, transport knet
LINK ID 0 udp
	addr	= 192.168.63.45
	status	= 13

There should be 'n' for localhost.
@chrissie-c Can you please take a look why this problem is happening? It's connected with 9e7f62d because 4a2f48b was working fine.",@chrissie-c Thank you for the review. I've merged all of the patches as a 49999d0 .,True,{}
corosync/corosync,https://github.com/corosync/corosync,651,2021-08-02T15:13:22Z,2021-08-04T08:39:02Z,2021-08-04T08:39:05Z,CLOSED,False,18,0,1,https://github.com/jfriesse,Knet check nodeid,2,[],https://github.com/corosync/corosync/pull/651,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/651,"Ensure all knet hosts has a nodeid
Knet node id < 65536","Ensure all knet hosts has a nodeid
Knet node id < 65536",True,{}
corosync/corosync,https://github.com/corosync/corosync,651,2021-08-02T15:13:22Z,2021-08-04T08:39:02Z,2021-08-04T08:39:05Z,CLOSED,False,18,0,1,https://github.com/jfriesse,Knet check nodeid,2,[],https://github.com/corosync/corosync/pull/651,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/651#issuecomment-892476707,"Ensure all knet hosts has a nodeid
Knet node id < 65536",@chrissie-c Thank you for the testing the PR and ACK. I've merged patches as a 23db6cb,True,{}
corosync/corosync,https://github.com/corosync/corosync,652,2021-08-11T15:47:43Z,2021-08-20T14:57:58Z,2021-08-20T14:58:23Z,CLOSED,False,25,3,4,https://github.com/jfriesse,totem: Add cancel_hold_on_retransmit config option,1,[],https://github.com/corosync/corosync/pull/652,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/652,"Previously, existence of retransmit messages canceled holding
of token (and never allowed representative to enter token hold
state).
This makes token rotating maximum speed and keeps processor
resending messages over and over again - overloading network
and reducing chance to successfully deliver the messages.
Also there were reports of various Antivirus / IPS / IDS which slows
down delivery of packets with certain sizes (packets bigger than token)
what make Corosync retransmit messages over and over again.
Proposed solution is to allow representative to enter token hold
state when there are only retransmit messages. This allows network to
handle overload and/or gives Antivirus/IPS/IDS enough time scan and
deliver packets without corosync entering ""FAILED TO RECEIVE"" state and
adding more load to network.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Previously, existence of retransmit messages canceled holding
of token (and never allowed representative to enter token hold
state).
This makes token rotating maximum speed and keeps processor
resending messages over and over again - overloading network
and reducing chance to successfully deliver the messages.
Also there were reports of various Antivirus / IPS / IDS which slows
down delivery of packets with certain sizes (packets bigger than token)
what make Corosync retransmit messages over and over again.
Proposed solution is to allow representative to enter token hold
state when there are only retransmit messages. This allows network to
handle overload and/or gives Antivirus/IPS/IDS enough time scan and
deliver packets without corosync entering ""FAILED TO RECEIVE"" state and
adding more load to network.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,652,2021-08-11T15:47:43Z,2021-08-20T14:57:58Z,2021-08-20T14:58:23Z,CLOSED,False,25,3,4,https://github.com/jfriesse,totem: Add cancel_hold_on_retransmit config option,1,[],https://github.com/corosync/corosync/pull/652,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/652#issuecomment-899498026,"Previously, existence of retransmit messages canceled holding
of token (and never allowed representative to enter token hold
state).
This makes token rotating maximum speed and keeps processor
resending messages over and over again - overloading network
and reducing chance to successfully deliver the messages.
Also there were reports of various Antivirus / IPS / IDS which slows
down delivery of packets with certain sizes (packets bigger than token)
what make Corosync retransmit messages over and over again.
Proposed solution is to allow representative to enter token hold
state when there are only retransmit messages. This allows network to
handle overload and/or gives Antivirus/IPS/IDS enough time scan and
deliver packets without corosync entering ""FAILED TO RECEIVE"" state and
adding more load to network.
Signed-off-by: Jan Friesse jfriesse@redhat.com",Thank you for the review and ACK. I will wait with merging till reporter of #622 gives us some feedback.,True,{}
corosync/corosync,https://github.com/corosync/corosync,652,2021-08-11T15:47:43Z,2021-08-20T14:57:58Z,2021-08-20T14:58:23Z,CLOSED,False,25,3,4,https://github.com/jfriesse,totem: Add cancel_hold_on_retransmit config option,1,[],https://github.com/corosync/corosync/pull/652,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/652#issuecomment-902754425,"Previously, existence of retransmit messages canceled holding
of token (and never allowed representative to enter token hold
state).
This makes token rotating maximum speed and keeps processor
resending messages over and over again - overloading network
and reducing chance to successfully deliver the messages.
Also there were reports of various Antivirus / IPS / IDS which slows
down delivery of packets with certain sizes (packets bigger than token)
what make Corosync retransmit messages over and over again.
Proposed solution is to allow representative to enter token hold
state when there are only retransmit messages. This allows network to
handle overload and/or gives Antivirus/IPS/IDS enough time scan and
deliver packets without corosync entering ""FAILED TO RECEIVE"" state and
adding more load to network.
Signed-off-by: Jan Friesse jfriesse@redhat.com",Confirmed to help #622 so merged as a cdf7292,True,{}
corosync/corosync,https://github.com/corosync/corosync,653,2021-08-19T14:16:22Z,2021-08-20T14:58:16Z,2021-08-20T14:58:25Z,CLOSED,False,25,3,4,https://github.com/jfriesse,needle backport - totem: Add cancel_hold_on_retransmit config option,1,[],https://github.com/corosync/corosync/pull/653,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/653,"Previously, existence of retransmit messages canceled holding
of token (and never allowed representative to enter token hold
state).
This makes token rotating maximum speed and keeps processor
resending messages over and over again - overloading network
and reducing chance to successfully deliver the messages.
Also there were reports of various Antivirus / IPS / IDS which slows
down delivery of packets with certain sizes (packets bigger than token)
what make Corosync retransmit messages over and over again.
Proposed solution is to allow representative to enter token hold
state when there are only retransmit messages. This allows network to
handle overload and/or gives Antivirus/IPS/IDS enough time scan and
deliver packets without corosync entering ""FAILED TO RECEIVE"" state and
adding more load to network.
Signed-off-by: Jan Friesse jfriesse@redhat.com
(backported from corosync master)","Previously, existence of retransmit messages canceled holding
of token (and never allowed representative to enter token hold
state).
This makes token rotating maximum speed and keeps processor
resending messages over and over again - overloading network
and reducing chance to successfully deliver the messages.
Also there were reports of various Antivirus / IPS / IDS which slows
down delivery of packets with certain sizes (packets bigger than token)
what make Corosync retransmit messages over and over again.
Proposed solution is to allow representative to enter token hold
state when there are only retransmit messages. This allows network to
handle overload and/or gives Antivirus/IPS/IDS enough time scan and
deliver packets without corosync entering ""FAILED TO RECEIVE"" state and
adding more load to network.
Signed-off-by: Jan Friesse jfriesse@redhat.com
(backported from corosync master)",True,{}
corosync/corosync,https://github.com/corosync/corosync,653,2021-08-19T14:16:22Z,2021-08-20T14:58:16Z,2021-08-20T14:58:25Z,CLOSED,False,25,3,4,https://github.com/jfriesse,needle backport - totem: Add cancel_hold_on_retransmit config option,1,[],https://github.com/corosync/corosync/pull/653,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/653#issuecomment-902754649,"Previously, existence of retransmit messages canceled holding
of token (and never allowed representative to enter token hold
state).
This makes token rotating maximum speed and keeps processor
resending messages over and over again - overloading network
and reducing chance to successfully deliver the messages.
Also there were reports of various Antivirus / IPS / IDS which slows
down delivery of packets with certain sizes (packets bigger than token)
what make Corosync retransmit messages over and over again.
Proposed solution is to allow representative to enter token hold
state when there are only retransmit messages. This allows network to
handle overload and/or gives Antivirus/IPS/IDS enough time scan and
deliver packets without corosync entering ""FAILED TO RECEIVE"" state and
adding more load to network.
Signed-off-by: Jan Friesse jfriesse@redhat.com
(backported from corosync master)",Confirmed to help #622 so merged as a 64010f5,True,{}
corosync/corosync,https://github.com/corosync/corosync,656,2021-09-07T14:43:38Z,2021-09-13T07:16:00Z,2021-09-13T07:16:01Z,CLOSED,False,2,0,1,https://github.com/jfriesse,logsys: Unlock config mutex on error,1,[],https://github.com/corosync/corosync/pull/656,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/656,"Thanks Ryan Cai ycaibb@gmail.com for reporting the problem.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Thanks Ryan Cai ycaibb@gmail.com for reporting the problem.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,656,2021-09-07T14:43:38Z,2021-09-13T07:16:00Z,2021-09-13T07:16:01Z,CLOSED,False,2,0,1,https://github.com/jfriesse,logsys: Unlock config mutex on error,1,[],https://github.com/corosync/corosync/pull/656,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/656#issuecomment-917908985,"Thanks Ryan Cai ycaibb@gmail.com for reporting the problem.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c Thank you for the review! I\ve merged patch as a 60dbaca (and also to needle as a 418e521),True,{}
corosync/corosync,https://github.com/corosync/corosync,658,2021-09-24T06:33:34Z,2021-10-18T12:22:40Z,2021-10-18T12:22:40Z,CLOSED,False,1,1,1,https://github.com/miharahiro,"man: The consensus timeout is 1.2 * token_timeout, which has been cha…",1,[],https://github.com/corosync/corosync/pull/658,https://github.com/miharahiro,1,https://github.com/corosync/corosync/pull/658,"The consensus timeout is 1.2 * token_timeout. The token_timeout default value has been changed from 1000 to 3000. So the consensus timeout should also be changed in (man 5 corosync.conf), accordingly.","The consensus timeout is 1.2 * token_timeout. The token_timeout default value has been changed from 1000 to 3000. So the consensus timeout should also be changed in (man 5 corosync.conf), accordingly.",True,{}
corosync/corosync,https://github.com/corosync/corosync,658,2021-09-24T06:33:34Z,2021-10-18T12:22:40Z,2021-10-18T12:22:40Z,CLOSED,False,1,1,1,https://github.com/miharahiro,"man: The consensus timeout is 1.2 * token_timeout, which has been cha…",1,[],https://github.com/corosync/corosync/pull/658,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/658#issuecomment-926381706,"The consensus timeout is 1.2 * token_timeout. The token_timeout default value has been changed from 1000 to 3000. So the consensus timeout should also be changed in (man 5 corosync.conf), accordingly.",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,658,2021-09-24T06:33:34Z,2021-10-18T12:22:40Z,2021-10-18T12:22:40Z,CLOSED,False,1,1,1,https://github.com/miharahiro,"man: The consensus timeout is 1.2 * token_timeout, which has been cha…",1,[],https://github.com/corosync/corosync/pull/658,https://github.com/chrissie-c,3,https://github.com/corosync/corosync/pull/658#issuecomment-926469165,"The consensus timeout is 1.2 * token_timeout. The token_timeout default value has been changed from 1000 to 3000. So the consensus timeout should also be changed in (man 5 corosync.conf), accordingly.","Good catch, thank you. Honza is off at the moment, but I'm sure he'll be fine it.",True,{}
corosync/corosync,https://github.com/corosync/corosync,658,2021-09-24T06:33:34Z,2021-10-18T12:22:40Z,2021-10-18T12:22:40Z,CLOSED,False,1,1,1,https://github.com/miharahiro,"man: The consensus timeout is 1.2 * token_timeout, which has been cha…",1,[],https://github.com/corosync/corosync/pull/658,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/658#issuecomment-945710634,"The consensus timeout is 1.2 * token_timeout. The token_timeout default value has been changed from 1000 to 3000. So the consensus timeout should also be changed in (man 5 corosync.conf), accordingly.","@miharahiro Nice catch, ACK and merged as a d5b53fd . Thank you for the patch!
@chrissie-c thank you for the review!",True,{}
corosync/corosync,https://github.com/corosync/corosync,661,2021-10-20T12:27:22Z,2021-10-25T09:43:41Z,2021-10-25T09:43:41Z,CLOSED,False,61,25,1,https://github.com/chrissie-c,cpghum: Allow cghum to continue if corosync is restarted,1,[],https://github.com/corosync/corosync/pull/661,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/661,Signed-off-by: Christine Caulfield ccaulfie@redhat.com,Signed-off-by: Christine Caulfield ccaulfie@redhat.com,True,{}
corosync/corosync,https://github.com/corosync/corosync,661,2021-10-20T12:27:22Z,2021-10-25T09:43:41Z,2021-10-25T09:43:41Z,CLOSED,False,61,25,1,https://github.com/chrissie-c,cpghum: Allow cghum to continue if corosync is restarted,1,[],https://github.com/corosync/corosync/pull/661,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/661#issuecomment-950731401,Signed-off-by: Christine Caulfield ccaulfie@redhat.com,"I gave patch only a bit of testing. Code-wise it looks good so ACK and merged as a f6f6f41
Thank you for the patch!",True,{}
corosync/corosync,https://github.com/corosync/corosync,662,2021-10-26T16:20:34Z,2021-11-02T16:47:35Z,2021-11-03T09:21:23Z,CLOSED,False,2,1,1,https://github.com/jfriesse,Hopefully solve #660,1,[],https://github.com/corosync/corosync/pull/662,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/662,"Better description to be made. Should fix #660 and not break 92e0f9c
Signed-off-by: Jan Friesse jfriesse@redhat.com","Better description to be made. Should fix #660 and not break 92e0f9c
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,662,2021-10-26T16:20:34Z,2021-11-02T16:47:35Z,2021-11-03T09:21:23Z,CLOSED,False,2,1,1,https://github.com/jfriesse,Hopefully solve #660,1,[],https://github.com/corosync/corosync/pull/662,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/662#issuecomment-957936233,"Better description to be made. Should fix #660 and not break 92e0f9c
Signed-off-by: Jan Friesse jfriesse@redhat.com","Closing in favor of #663 (same patch, just more comments and better description in commit message).",True,{}
corosync/corosync,https://github.com/corosync/corosync,663,2021-11-02T16:46:34Z,2021-11-03T09:21:05Z,2021-11-08T13:50:14Z,CLOSED,False,15,1,1,https://github.com/jfriesse,totemsrp: Switch totempg buffers at the right time,1,[],https://github.com/corosync/corosync/pull/663,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/663,"Commit 92e0f9c added switching of
totempg buffers in sync phase. But because buffers got switch too early
there was a problem when delivering recovered messages (messages got
corrupted and/or lost). Solution is to switch buffers after recovered
messages got delivered.
I think it is worth to describe complete history with reproducers so it
doesn't get lost.
It all started with 4026389 (more info
about original problem is described in
https://bugzilla.redhat.com/show_bug.cgi?id=820821). This patch
solves problem which is way to be reproduced with following reproducer:

2 nodes
Both nodes running corosync and testcpg
Pause node 1 (SIGSTOP of corosync)
On node 1, send some messages by testcpg
(it's not answering but this doesn't matter). Simply hit ENTER key
few times is enough)
Wait till node 2 detects that node 1 left
Unpause node 1 (SIGCONT of corosync)

and on node 1 newly mcasted cpg messages got sent before sync barrier,
so node 2 logs ""Unknown node -> we will not deliver message"".
Solution was to add switch of totemsrp new messages buffer.
This patch was not enough so new one
(92e0f9c) was created. Reproducer of
problem was similar, just cpgverify was used instead of testcpg.
Occasionally when node 1 was unpaused it hang in sync phase because
there was a partial message in totempg buffers. New sync message had
different frag cont so it was thrown away and never delivered.
After many years problem was found which is solved by this patch
(original issue describe in
#660).
Reproducer is more complex:

2 nodes
Node 1 is rate-limited (used script on the hypervisor side):
iface=tapXXXX
# ~0.1MB/s in bit/s
rate=838856
# 1mb/s
burst=1048576
tc qdisc add dev $iface root handle 1: htb default 1
tc class add dev $iface parent 1: classid 1:1 htb rate ${rate}bps \
  burst ${burst}b
tc qdisc add dev $iface handle ffff: ingress
tc filter add dev $iface parent ffff: prio 50 basic police rate \
  ${rate}bps burst ${burst}b mtu 64kb ""drop""


Node 2 is running corosync and cpgverify
Node 1 keeps restarting of corosync and running cpgverify in cycle, so

Console 1: while true; do corosync; sleep 20; kill $(pidof corosync); 
sleep 20; done
Console 2: while true; do ./cpgverify;done



And from time to time (reproduced usually in less than 5 minutes) cpgverify
reports corrupted message.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Commit 92e0f9c added switching of
totempg buffers in sync phase. But because buffers got switch too early
there was a problem when delivering recovered messages (messages got
corrupted and/or lost). Solution is to switch buffers after recovered
messages got delivered.
I think it is worth to describe complete history with reproducers so it
doesn't get lost.
It all started with 4026389 (more info
about original problem is described in
https://bugzilla.redhat.com/show_bug.cgi?id=820821). This patch
solves problem which is way to be reproduced with following reproducer:

2 nodes
Both nodes running corosync and testcpg
Pause node 1 (SIGSTOP of corosync)
On node 1, send some messages by testcpg
(it's not answering but this doesn't matter). Simply hit ENTER key
few times is enough)
Wait till node 2 detects that node 1 left
Unpause node 1 (SIGCONT of corosync)

and on node 1 newly mcasted cpg messages got sent before sync barrier,
so node 2 logs ""Unknown node -> we will not deliver message"".
Solution was to add switch of totemsrp new messages buffer.
This patch was not enough so new one
(92e0f9c) was created. Reproducer of
problem was similar, just cpgverify was used instead of testcpg.
Occasionally when node 1 was unpaused it hang in sync phase because
there was a partial message in totempg buffers. New sync message had
different frag cont so it was thrown away and never delivered.
After many years problem was found which is solved by this patch
(original issue describe in
#660).
Reproducer is more complex:

2 nodes
Node 1 is rate-limited (used script on the hypervisor side):
iface=tapXXXX
# ~0.1MB/s in bit/s
rate=838856
# 1mb/s
burst=1048576
tc qdisc add dev $iface root handle 1: htb default 1
tc class add dev $iface parent 1: classid 1:1 htb rate ${rate}bps \
  burst ${burst}b
tc qdisc add dev $iface handle ffff: ingress
tc filter add dev $iface parent ffff: prio 50 basic police rate \
  ${rate}bps burst ${burst}b mtu 64kb ""drop""


Node 2 is running corosync and cpgverify
Node 1 keeps restarting of corosync and running cpgverify in cycle, so

Console 1: while true; do corosync; sleep 20; kill $(pidof corosync); 
sleep 20; done
Console 2: while true; do ./cpgverify;done



And from time to time (reproduced usually in less than 5 minutes) cpgverify
reports corrupted message.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,663,2021-11-02T16:46:34Z,2021-11-03T09:21:05Z,2021-11-08T13:50:14Z,CLOSED,False,15,1,1,https://github.com/jfriesse,totemsrp: Switch totempg buffers at the right time,1,[],https://github.com/corosync/corosync/pull/663,https://github.com/fabbione,2,https://github.com/corosync/corosync/pull/663#issuecomment-958687560,"Commit 92e0f9c added switching of
totempg buffers in sync phase. But because buffers got switch too early
there was a problem when delivering recovered messages (messages got
corrupted and/or lost). Solution is to switch buffers after recovered
messages got delivered.
I think it is worth to describe complete history with reproducers so it
doesn't get lost.
It all started with 4026389 (more info
about original problem is described in
https://bugzilla.redhat.com/show_bug.cgi?id=820821). This patch
solves problem which is way to be reproduced with following reproducer:

2 nodes
Both nodes running corosync and testcpg
Pause node 1 (SIGSTOP of corosync)
On node 1, send some messages by testcpg
(it's not answering but this doesn't matter). Simply hit ENTER key
few times is enough)
Wait till node 2 detects that node 1 left
Unpause node 1 (SIGCONT of corosync)

and on node 1 newly mcasted cpg messages got sent before sync barrier,
so node 2 logs ""Unknown node -> we will not deliver message"".
Solution was to add switch of totemsrp new messages buffer.
This patch was not enough so new one
(92e0f9c) was created. Reproducer of
problem was similar, just cpgverify was used instead of testcpg.
Occasionally when node 1 was unpaused it hang in sync phase because
there was a partial message in totempg buffers. New sync message had
different frag cont so it was thrown away and never delivered.
After many years problem was found which is solved by this patch
(original issue describe in
#660).
Reproducer is more complex:

2 nodes
Node 1 is rate-limited (used script on the hypervisor side):
iface=tapXXXX
# ~0.1MB/s in bit/s
rate=838856
# 1mb/s
burst=1048576
tc qdisc add dev $iface root handle 1: htb default 1
tc class add dev $iface parent 1: classid 1:1 htb rate ${rate}bps \
  burst ${burst}b
tc qdisc add dev $iface handle ffff: ingress
tc filter add dev $iface parent ffff: prio 50 basic police rate \
  ${rate}bps burst ${burst}b mtu 64kb ""drop""


Node 2 is running corosync and cpgverify
Node 1 keeps restarting of corosync and running cpgverify in cycle, so

Console 1: while true; do corosync; sleep 20; kill $(pidof corosync); 
sleep 20; done
Console 2: while true; do ./cpgverify;done



And from time to time (reproduced usually in less than 5 minutes) cpgverify
reports corrupted message.
Signed-off-by: Jan Friesse jfriesse@redhat.com",ack from me,True,{}
corosync/corosync,https://github.com/corosync/corosync,663,2021-11-02T16:46:34Z,2021-11-03T09:21:05Z,2021-11-08T13:50:14Z,CLOSED,False,15,1,1,https://github.com/jfriesse,totemsrp: Switch totempg buffers at the right time,1,[],https://github.com/corosync/corosync/pull/663,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/663#issuecomment-958772369,"Commit 92e0f9c added switching of
totempg buffers in sync phase. But because buffers got switch too early
there was a problem when delivering recovered messages (messages got
corrupted and/or lost). Solution is to switch buffers after recovered
messages got delivered.
I think it is worth to describe complete history with reproducers so it
doesn't get lost.
It all started with 4026389 (more info
about original problem is described in
https://bugzilla.redhat.com/show_bug.cgi?id=820821). This patch
solves problem which is way to be reproduced with following reproducer:

2 nodes
Both nodes running corosync and testcpg
Pause node 1 (SIGSTOP of corosync)
On node 1, send some messages by testcpg
(it's not answering but this doesn't matter). Simply hit ENTER key
few times is enough)
Wait till node 2 detects that node 1 left
Unpause node 1 (SIGCONT of corosync)

and on node 1 newly mcasted cpg messages got sent before sync barrier,
so node 2 logs ""Unknown node -> we will not deliver message"".
Solution was to add switch of totemsrp new messages buffer.
This patch was not enough so new one
(92e0f9c) was created. Reproducer of
problem was similar, just cpgverify was used instead of testcpg.
Occasionally when node 1 was unpaused it hang in sync phase because
there was a partial message in totempg buffers. New sync message had
different frag cont so it was thrown away and never delivered.
After many years problem was found which is solved by this patch
(original issue describe in
#660).
Reproducer is more complex:

2 nodes
Node 1 is rate-limited (used script on the hypervisor side):
iface=tapXXXX
# ~0.1MB/s in bit/s
rate=838856
# 1mb/s
burst=1048576
tc qdisc add dev $iface root handle 1: htb default 1
tc class add dev $iface parent 1: classid 1:1 htb rate ${rate}bps \
  burst ${burst}b
tc qdisc add dev $iface handle ffff: ingress
tc filter add dev $iface parent ffff: prio 50 basic police rate \
  ${rate}bps burst ${burst}b mtu 64kb ""drop""


Node 2 is running corosync and cpgverify
Node 1 keeps restarting of corosync and running cpgverify in cycle, so

Console 1: while true; do corosync; sleep 20; kill $(pidof corosync); 
sleep 20; done
Console 2: while true; do ./cpgverify;done



And from time to time (reproduced usually in less than 5 minutes) cpgverify
reports corrupted message.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@fabbione Thank you for the review. I've merged patch as a e7a8237,True,{}
corosync/corosync,https://github.com/corosync/corosync,663,2021-11-02T16:46:34Z,2021-11-03T09:21:05Z,2021-11-08T13:50:14Z,CLOSED,False,15,1,1,https://github.com/jfriesse,totemsrp: Switch totempg buffers at the right time,1,[],https://github.com/corosync/corosync/pull/663,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/663#issuecomment-963167882,"Commit 92e0f9c added switching of
totempg buffers in sync phase. But because buffers got switch too early
there was a problem when delivering recovered messages (messages got
corrupted and/or lost). Solution is to switch buffers after recovered
messages got delivered.
I think it is worth to describe complete history with reproducers so it
doesn't get lost.
It all started with 4026389 (more info
about original problem is described in
https://bugzilla.redhat.com/show_bug.cgi?id=820821). This patch
solves problem which is way to be reproduced with following reproducer:

2 nodes
Both nodes running corosync and testcpg
Pause node 1 (SIGSTOP of corosync)
On node 1, send some messages by testcpg
(it's not answering but this doesn't matter). Simply hit ENTER key
few times is enough)
Wait till node 2 detects that node 1 left
Unpause node 1 (SIGCONT of corosync)

and on node 1 newly mcasted cpg messages got sent before sync barrier,
so node 2 logs ""Unknown node -> we will not deliver message"".
Solution was to add switch of totemsrp new messages buffer.
This patch was not enough so new one
(92e0f9c) was created. Reproducer of
problem was similar, just cpgverify was used instead of testcpg.
Occasionally when node 1 was unpaused it hang in sync phase because
there was a partial message in totempg buffers. New sync message had
different frag cont so it was thrown away and never delivered.
After many years problem was found which is solved by this patch
(original issue describe in
#660).
Reproducer is more complex:

2 nodes
Node 1 is rate-limited (used script on the hypervisor side):
iface=tapXXXX
# ~0.1MB/s in bit/s
rate=838856
# 1mb/s
burst=1048576
tc qdisc add dev $iface root handle 1: htb default 1
tc class add dev $iface parent 1: classid 1:1 htb rate ${rate}bps \
  burst ${burst}b
tc qdisc add dev $iface handle ffff: ingress
tc filter add dev $iface parent ffff: prio 50 basic police rate \
  ${rate}bps burst ${burst}b mtu 64kb ""drop""


Node 2 is running corosync and cpgverify
Node 1 keeps restarting of corosync and running cpgverify in cycle, so

Console 1: while true; do corosync; sleep 20; kill $(pidof corosync); 
sleep 20; done
Console 2: while true; do ./cpgverify;done



And from time to time (reproduced usually in less than 5 minutes) cpgverify
reports corrupted message.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@wferi Just heads up. This is really serious bug and I would recommend to get it into stable.,True,{}
corosync/corosync,https://github.com/corosync/corosync,664,2021-11-03T08:48:14Z,2021-11-03T09:25:36Z,2021-11-03T09:25:36Z,CLOSED,False,6,3,2,https://github.com/liangxin1300,[needle] Increase token and consensus timeout,2,[],https://github.com/corosync/corosync/pull/664,https://github.com/liangxin1300,1,https://github.com/corosync/corosync/pull/664,backport from #600 and #658,backport from #600 and #658,True,{}
corosync/corosync,https://github.com/corosync/corosync,664,2021-11-03T08:48:14Z,2021-11-03T09:25:36Z,2021-11-03T09:25:36Z,CLOSED,False,6,3,2,https://github.com/liangxin1300,[needle] Increase token and consensus timeout,2,[],https://github.com/corosync/corosync/pull/664,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/664#issuecomment-958775529,backport from #600 and #658,"Hi @liangxin1300. Thank you for the backports, but I'm rather not going to change defaults for needle. Corosync 2.x when used in production is either stable with default config (so 1 sec timeout) or have increased timeout in config file. Changing the default for these productions could cause more troubles and IMHO it's really bad idea.
I'm open to discussion of course, but closing this issue for now.",True,{}
corosync/corosync,https://github.com/corosync/corosync,665,2021-11-09T16:36:24Z,2021-11-10T07:25:12Z,2021-11-10T07:25:15Z,CLOSED,False,13,7,2,https://github.com/jfriesse,build: Add explicit dependency for used libraries,1,[],https://github.com/corosync/corosync/pull/665,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/665,"Don't rely on implicit symbol finding (cs_strerror being most prominent example) but rather use explicit one.
This makes current debian experimental happy (compile source)
Signed-off-by: Jan Friesse jfriesse@redhat.com","Don't rely on implicit symbol finding (cs_strerror being most prominent example) but rather use explicit one.
This makes current debian experimental happy (compile source)
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,665,2021-11-09T16:36:24Z,2021-11-10T07:25:12Z,2021-11-10T07:25:15Z,CLOSED,False,13,7,2,https://github.com/jfriesse,build: Add explicit dependency for used libraries,1,[],https://github.com/corosync/corosync/pull/665,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/665#issuecomment-964362603,"Don't rely on implicit symbol finding (cs_strerror being most prominent example) but rather use explicit one.
This makes current debian experimental happy (compile source)
Signed-off-by: Jan Friesse jfriesse@redhat.com","@fabbione Setting you as a reviewer, because it's buildsystem which chrissie don't like (mildly said ;) ) Please give a CI time to finish, but it should work.",True,{}
corosync/corosync,https://github.com/corosync/corosync,665,2021-11-09T16:36:24Z,2021-11-10T07:25:12Z,2021-11-10T07:25:15Z,CLOSED,False,13,7,2,https://github.com/jfriesse,build: Add explicit dependency for used libraries,1,[],https://github.com/corosync/corosync/pull/665,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/665#issuecomment-964852530,"Don't rely on implicit symbol finding (cs_strerror being most prominent example) but rather use explicit one.
This makes current debian experimental happy (compile source)
Signed-off-by: Jan Friesse jfriesse@redhat.com",@fabbione Thank you for review. I've merged patch as a 384d168,True,{}
corosync/corosync,https://github.com/corosync/corosync,685,2021-11-17T12:36:36Z,2021-11-22T16:36:47Z,2021-11-23T13:45:13Z,CLOSED,False,16,57,1,https://github.com/epenchev,totemudpu: Fix corosync state when interface is down.,1,[],https://github.com/corosync/corosync/pull/685,https://github.com/epenchev,1,https://github.com/corosync/corosync/pull/685,"When cutting off corosync by either ""ip link down"" or ""iptables REJECT"" on an node, that affected node assumes itself healthy and connected to the cluster.
But the cluster sees that node as lost and performs a resource take-over.
There is no problem with corosync itself but with external programs like SBD that rely on the quorum information to perform some actions.
A typical example is a the SBD diskless mode.
Note that this only fixes the case when the network interface is down!","When cutting off corosync by either ""ip link down"" or ""iptables REJECT"" on an node, that affected node assumes itself healthy and connected to the cluster.
But the cluster sees that node as lost and performs a resource take-over.
There is no problem with corosync itself but with external programs like SBD that rely on the quorum information to perform some actions.
A typical example is a the SBD diskless mode.
Note that this only fixes the case when the network interface is down!",True,{}
corosync/corosync,https://github.com/corosync/corosync,685,2021-11-17T12:36:36Z,2021-11-22T16:36:47Z,2021-11-23T13:45:13Z,CLOSED,False,16,57,1,https://github.com/epenchev,totemudpu: Fix corosync state when interface is down.,1,[],https://github.com/corosync/corosync/pull/685,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/685#issuecomment-971539478,"When cutting off corosync by either ""ip link down"" or ""iptables REJECT"" on an node, that affected node assumes itself healthy and connected to the cluster.
But the cluster sees that node as lost and performs a resource take-over.
There is no problem with corosync itself but with external programs like SBD that rely on the quorum information to perform some actions.
A typical example is a the SBD diskless mode.
Note that this only fixes the case when the network interface is down!",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,685,2021-11-17T12:36:36Z,2021-11-22T16:36:47Z,2021-11-23T13:45:13Z,CLOSED,False,16,57,1,https://github.com/epenchev,totemudpu: Fix corosync state when interface is down.,1,[],https://github.com/corosync/corosync/pull/685,https://github.com/epenchev,3,https://github.com/corosync/corosync/pull/685#issuecomment-971545226,"When cutting off corosync by either ""ip link down"" or ""iptables REJECT"" on an node, that affected node assumes itself healthy and connected to the cluster.
But the cluster sees that node as lost and performs a resource take-over.
There is no problem with corosync itself but with external programs like SBD that rely on the quorum information to perform some actions.
A typical example is a the SBD diskless mode.
Note that this only fixes the case when the network interface is down!","The same problem listed above is also present in needle-2.4.
I'm still looking how to fix the ""iptables REJECT"" scenario.
In any case this is not a complete solution, if there is a more elegant way to handle both scenarios it will be great.
The problem is easy to reproduce:

set up 3-node cluster with 1 ring corosync udpu
On one of the nodes one can execute
either e.g.
ip link set eth0 down
or e.g.
iptables -A INPUT -p udp -m multiport --dports 5405,5407 -j REJECT
iptables -A OUTPUT -p udp -m multiport --sports 5405,5407 -j REJECT
On the node that is now disconnected, corosync-quorumtool
still show a perfect world without problems.
On the rest of the cluster, that disconnected node will be offline.",True,{}
corosync/corosync,https://github.com/corosync/corosync,685,2021-11-17T12:36:36Z,2021-11-22T16:36:47Z,2021-11-23T13:45:13Z,CLOSED,False,16,57,1,https://github.com/epenchev,totemudpu: Fix corosync state when interface is down.,1,[],https://github.com/corosync/corosync/pull/685,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/685#issuecomment-972921830,"When cutting off corosync by either ""ip link down"" or ""iptables REJECT"" on an node, that affected node assumes itself healthy and connected to the cluster.
But the cluster sees that node as lost and performs a resource take-over.
There is no problem with corosync itself but with external programs like SBD that rely on the quorum information to perform some actions.
A typical example is a the SBD diskless mode.
Note that this only fixes the case when the network interface is down!","@epenchev Hi, thank you for report. Yes, udpu is known to not handle these situations well. That's the reason why corosync 3 added knet, and that is default, recommended and only supported transport (udpu/udp was left only for debugging purposes). So do you notice same (bad) behavior when using knet?
To the patch. UDPU ifdown case was working ""fine"" until we've added c652ee0 ... good patch sadly nobody tested ifdown behavior :(
For iptables case, it is really needed to let at least localhost packets going thru. Otherwise corosync logs (I hope pretty understandable) message ""Totem is unable to form a cluster because of an operating system or network fault (reason: totem is continuously in gather state). The most common cause of this message is that the local firewall is configured improperly."". So testing using iptables is best to do with something like:
iptables -A INPUT ! -i lo -p udp -j DROP && iptables -A OUTPUT ! -o lo -p udp -j DROP

No matter what, is there any reason to use udpu? Does knet pass your tests? If so, is there any reason to not use knet?
I'll need a bit more time to review the udpu patch, because it is a bit complicated and I'm not sure yet about possible negative effects.",True,{}
corosync/corosync,https://github.com/corosync/corosync,685,2021-11-17T12:36:36Z,2021-11-22T16:36:47Z,2021-11-23T13:45:13Z,CLOSED,False,16,57,1,https://github.com/epenchev,totemudpu: Fix corosync state when interface is down.,1,[],https://github.com/corosync/corosync/pull/685,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/685#issuecomment-972926874,"When cutting off corosync by either ""ip link down"" or ""iptables REJECT"" on an node, that affected node assumes itself healthy and connected to the cluster.
But the cluster sees that node as lost and performs a resource take-over.
There is no problem with corosync itself but with external programs like SBD that rely on the quorum information to perform some actions.
A typical example is a the SBD diskless mode.
Note that this only fixes the case when the network interface is down!",@knet-ci-bot test this please,True,{}
corosync/corosync,https://github.com/corosync/corosync,685,2021-11-17T12:36:36Z,2021-11-22T16:36:47Z,2021-11-23T13:45:13Z,CLOSED,False,16,57,1,https://github.com/epenchev,totemudpu: Fix corosync state when interface is down.,1,[],https://github.com/corosync/corosync/pull/685,https://github.com/epenchev,6,https://github.com/corosync/corosync/pull/685#issuecomment-972988634,"When cutting off corosync by either ""ip link down"" or ""iptables REJECT"" on an node, that affected node assumes itself healthy and connected to the cluster.
But the cluster sees that node as lost and performs a resource take-over.
There is no problem with corosync itself but with external programs like SBD that rely on the quorum information to perform some actions.
A typical example is a the SBD diskless mode.
Note that this only fixes the case when the network interface is down!","@epenchev Hi, thank you for report. Yes, udpu is known to not handle these situations well. That's the reason why corosync 3 added knet, and that is default, recommended and only supported transport (udpu/udp was left only for debugging purposes). So do you notice same (bad) behavior when using knet?

Yes I've tested this with knet and it's working perfectly fine so no problem there.
The problem is only with udpu transport, actually this issue was initially found in corosync needle-2.4 and I tested with corosync3 to see if the behavior is some how different. But with corosync3 udpu works the same way, well it hasn't changed much from the latest needle so this is logical. Unfortunately there is no option to switch to corosync3 for now.

To the patch. UDPU ifdown case was working ""fine"" until we've added c652ee0 ... good patch sadly nobody tested ifdown behavior :(

I think ifdown case not working has something to do with 96354fb

For iptables case, it is really needed to let at least localhost packets going thru. Otherwise corosync logs (I hope pretty understandable) message ""Totem is unable to form a cluster because of an operating system or network fault (reason: totem is continuously in gather state). The most common cause of this message is that the local firewall is configured improperly."". So testing using iptables is best to do with something like:
iptables -A INPUT ! -i lo -p udp -j DROP && iptables -A OUTPUT ! -o lo -p udp -j DROP


I see, thanks for that and yes this was the message in the logs we have ""Totem is unable to form a cluster because of an operating system or network fault ...""

No matter what, is there any reason to use udpu? Does knet pass your tests? If so, is there any reason to not use knet?

Well unfortunately we are stuck for now and need to support needle-2.4 but this may speed up the transition to corosync3.

I'll need a bit more time to review the udpu patch, because it is a bit complicated and I'm not sure yet about possible negative effects.

Yes sure no worries, thank you for your time, as this may not be the best solution after all and it's corosync needle-2.4 that is actually the one that is more affected as corosync3 has knet.",True,{}
corosync/corosync,https://github.com/corosync/corosync,685,2021-11-17T12:36:36Z,2021-11-22T16:36:47Z,2021-11-23T13:45:13Z,CLOSED,False,16,57,1,https://github.com/epenchev,totemudpu: Fix corosync state when interface is down.,1,[],https://github.com/corosync/corosync/pull/685,https://github.com/jfriesse,7,https://github.com/corosync/corosync/pull/685#issuecomment-975358077,"When cutting off corosync by either ""ip link down"" or ""iptables REJECT"" on an node, that affected node assumes itself healthy and connected to the cluster.
But the cluster sees that node as lost and performs a resource take-over.
There is no problem with corosync itself but with external programs like SBD that rely on the quorum information to perform some actions.
A typical example is a the SBD diskless mode.
Note that this only fixes the case when the network interface is down!","@epenchev Hi, thank you for report. Yes, udpu is known to not handle these situations well. That's the reason why corosync 3 added knet, and that is default, recommended and only supported transport (udpu/udp was left only for debugging purposes). So do you notice same (bad) behavior when using knet?

Yes I've tested this with knet and it's working perfectly fine so no problem there. The problem is only with udpu transport, actually this issue was initially found in corosync needle-2.4 and I tested with corosync3 to see if the behavior is some how

got it

different. But with corosync3 udpu works the same way, well it hasn't changed much from the latest needle so this is logical. Unfortunately there is no option to switch to corosync3 for now.

:( Please consider that as soon as possible because needle is going to be unsupported really soon (plan is to release last release this year and make 2.x unsupported).


To the patch. UDPU ifdown case was working ""fine"" until we've added c652ee0 ... good patch sadly nobody tested ifdown behavior :(

I think ifdown case not working has something to do with 96354fb

Yup, that was the patch which made ifdown case ""working"". Actually, only real solution is to use knet, because udpu ifdown handling is not perfect (but usually works).
Even better is not to simulate node failure by ifdown. Some network managers are also doing ifdown when cable is unplugged, but at least Network Manager is configurable in this behavior.


For iptables case, it is really needed to let at least localhost packets going thru. Otherwise corosync logs (I hope pretty understandable) message ""Totem is unable to form a cluster because of an operating system or network fault (reason: totem is continuously in gather state). The most common cause of this message is that the local firewall is configured improperly."". So testing using iptables is best to do with something like:
iptables -A INPUT ! -i lo -p udp -j DROP && iptables -A OUTPUT ! -o lo -p udp -j DROP


I see, thanks for that and yes this was the message in the logs we have ""Totem is unable to form a cluster because of an operating system or network fault ...""

No matter what, is there any reason to use udpu? Does knet pass your tests? If so, is there any reason to not use knet?

Well unfortunately we are stuck for now and need to support needle-2.4 but this may speed up the transition to corosync3.

Perfect


I'll need a bit more time to review the udpu patch, because it is a bit complicated and I'm not sure yet about possible negative effects.

Yes sure no worries, thank you for your time, as this may not be the best solution after all and it's corosync needle-2.4 that is actually the one that is more affected as corosync3 has knet.

I've tested the patch and it actually doesn't work for me. Logs are full of
sendmsg(mcast) failed (non-critical): Network is unreachable (101)
 error   [QB    ] epoll_ctl(add): Bad file descriptor (9)

but (for example) cpg never finds node missing.
Could you please give a try to #686 ? (just note #686 tries to solve ifdown problem, not iptables one. iptables one is not easily solvable and it is solved by knet)",True,{}
corosync/corosync,https://github.com/corosync/corosync,685,2021-11-17T12:36:36Z,2021-11-22T16:36:47Z,2021-11-23T13:45:13Z,CLOSED,False,16,57,1,https://github.com/epenchev,totemudpu: Fix corosync state when interface is down.,1,[],https://github.com/corosync/corosync/pull/685,https://github.com/epenchev,8,https://github.com/corosync/corosync/pull/685#issuecomment-975706773,"When cutting off corosync by either ""ip link down"" or ""iptables REJECT"" on an node, that affected node assumes itself healthy and connected to the cluster.
But the cluster sees that node as lost and performs a resource take-over.
There is no problem with corosync itself but with external programs like SBD that rely on the quorum information to perform some actions.
A typical example is a the SBD diskless mode.
Note that this only fixes the case when the network interface is down!","@jfriesse thanks a lot for this patch. I can verify #686 worked for both corosync3 and corosync needle-2.4.
I've missed the ""Packet rejected from..."" debug message when looking into this problem.
The ""The network interface is down."" message grabbed my attention and as it turned out this wasn't the cause of the problem.
Closing this PR then.",True,{}
corosync/corosync,https://github.com/corosync/corosync,685,2021-11-17T12:36:36Z,2021-11-22T16:36:47Z,2021-11-23T13:45:13Z,CLOSED,False,16,57,1,https://github.com/epenchev,totemudpu: Fix corosync state when interface is down.,1,[],https://github.com/corosync/corosync/pull/685,https://github.com/jfriesse,9,https://github.com/corosync/corosync/pull/685#issuecomment-976557290,"When cutting off corosync by either ""ip link down"" or ""iptables REJECT"" on an node, that affected node assumes itself healthy and connected to the cluster.
But the cluster sees that node as lost and performs a resource take-over.
There is no problem with corosync itself but with external programs like SBD that rely on the quorum information to perform some actions.
A typical example is a the SBD diskless mode.
Note that this only fixes the case when the network interface is down!",@epenchev Thank you for confirmation. I will merge PR once reviewed by chrissie.,True,{}
corosync/corosync,https://github.com/corosync/corosync,686,2021-11-22T10:04:39Z,2021-11-24T08:24:54Z,2021-11-24T08:24:54Z,CLOSED,False,1,0,1,https://github.com/jfriesse,totemudpu: Don't block local socketpair,1,[],https://github.com/corosync/corosync/pull/686,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/686,"Commit to drop packets from unlisted IPs made ifdown case not working
because msg_name is unset for socketpair.
solution is to drop packets from unlisted IPs only when bind state is
BIND_STATE_REGULAR.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Commit to drop packets from unlisted IPs made ifdown case not working
because msg_name is unset for socketpair.
solution is to drop packets from unlisted IPs only when bind state is
BIND_STATE_REGULAR.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,686,2021-11-22T10:04:39Z,2021-11-24T08:24:54Z,2021-11-24T08:24:54Z,CLOSED,False,1,0,1,https://github.com/jfriesse,totemudpu: Don't block local socketpair,1,[],https://github.com/corosync/corosync/pull/686,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/686#issuecomment-977641260,"Commit to drop packets from unlisted IPs made ifdown case not working
because msg_name is unset for socketpair.
solution is to drop packets from unlisted IPs only when bind state is
BIND_STATE_REGULAR.
Signed-off-by: Jan Friesse jfriesse@redhat.com","@chrissie-c Thank you for the review! I've merged patch as a 8b638e9 (and ""backport"" 5d625ce).",True,{}
corosync/corosync,https://github.com/corosync/corosync,687,2021-12-04T15:10:41Z,2022-01-03T10:08:51Z,2022-01-19T21:19:13Z,CLOSED,False,1,1,1,https://github.com/wferi,Remove bashism from configure script,1,[],https://github.com/corosync/corosync/pull/687,https://github.com/wferi,1,https://github.com/corosync/corosync/pull/687,"This was the real problem behind 384d168: Debian experimental now
sports a dash with LINENO support, so configure does not fall back to
using bash instead, choking on such bash-only constructs.  Unfortunately
this didn't bail out cleanly, just unexpectedly set link_all_deplibs to
no, and the error message
./configure: 13158: test: yes: unexpected operator
stayed unnoticed in the logs.  Actually, link_all_deplibs=no is the
default in Debian, reducing overlinking and causing confusion overall,
see https://debbugs.gnu.org/db/13/13920.html for example.
I think being explicit about used interfaces has its merit, so now that
Corosync has it, it might be advantageous to disable link_all_deplibs
by default across the board (after this patch re-enables it as a side
effect).","This was the real problem behind 384d168: Debian experimental now
sports a dash with LINENO support, so configure does not fall back to
using bash instead, choking on such bash-only constructs.  Unfortunately
this didn't bail out cleanly, just unexpectedly set link_all_deplibs to
no, and the error message
./configure: 13158: test: yes: unexpected operator
stayed unnoticed in the logs.  Actually, link_all_deplibs=no is the
default in Debian, reducing overlinking and causing confusion overall,
see https://debbugs.gnu.org/db/13/13920.html for example.
I think being explicit about used interfaces has its merit, so now that
Corosync has it, it might be advantageous to disable link_all_deplibs
by default across the board (after this patch re-enables it as a side
effect).",True,{}
corosync/corosync,https://github.com/corosync/corosync,687,2021-12-04T15:10:41Z,2022-01-03T10:08:51Z,2022-01-19T21:19:13Z,CLOSED,False,1,1,1,https://github.com/wferi,Remove bashism from configure script,1,[],https://github.com/corosync/corosync/pull/687,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/687#issuecomment-1003978172,"This was the real problem behind 384d168: Debian experimental now
sports a dash with LINENO support, so configure does not fall back to
using bash instead, choking on such bash-only constructs.  Unfortunately
this didn't bail out cleanly, just unexpectedly set link_all_deplibs to
no, and the error message
./configure: 13158: test: yes: unexpected operator
stayed unnoticed in the logs.  Actually, link_all_deplibs=no is the
default in Debian, reducing overlinking and causing confusion overall,
see https://debbugs.gnu.org/db/13/13920.html for example.
I think being explicit about used interfaces has its merit, so now that
Corosync has it, it might be advantageous to disable link_all_deplibs
by default across the board (after this patch re-enables it as a side
effect).",@knet-ci-bot retest this please,True,{}
corosync/corosync,https://github.com/corosync/corosync,687,2021-12-04T15:10:41Z,2022-01-03T10:08:51Z,2022-01-19T21:19:13Z,CLOSED,False,1,1,1,https://github.com/wferi,Remove bashism from configure script,1,[],https://github.com/corosync/corosync/pull/687,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/687#issuecomment-1003986786,"This was the real problem behind 384d168: Debian experimental now
sports a dash with LINENO support, so configure does not fall back to
using bash instead, choking on such bash-only constructs.  Unfortunately
this didn't bail out cleanly, just unexpectedly set link_all_deplibs to
no, and the error message
./configure: 13158: test: yes: unexpected operator
stayed unnoticed in the logs.  Actually, link_all_deplibs=no is the
default in Debian, reducing overlinking and causing confusion overall,
see https://debbugs.gnu.org/db/13/13920.html for example.
I think being explicit about used interfaces has its merit, so now that
Corosync has it, it might be advantageous to disable link_all_deplibs
by default across the board (after this patch re-enables it as a side
effect).","@wferi Sorry for late response, I was enjoying PTO basically whole Dec. Patch is good, so ACK and merged as a 6210a89. Just to make sure I understand what you mean by link_all_deplibs=no, that's what was fixed by 384d168 right? I'm wondering if it has any other effect (like for a applications which uses corosync libraries) other than we need to merge 384d168?
No matter what, closing this PR as a resolved (but I will follow your answer and be more than happy to accept link_all_deplibs=no patch if you think it's a good idea)",True,{}
corosync/corosync,https://github.com/corosync/corosync,687,2021-12-04T15:10:41Z,2022-01-03T10:08:51Z,2022-01-19T21:19:13Z,CLOSED,False,1,1,1,https://github.com/wferi,Remove bashism from configure script,1,[],https://github.com/corosync/corosync/pull/687,https://github.com/wferi,4,https://github.com/corosync/corosync/pull/687#issuecomment-1010971248,"This was the real problem behind 384d168: Debian experimental now
sports a dash with LINENO support, so configure does not fall back to
using bash instead, choking on such bash-only constructs.  Unfortunately
this didn't bail out cleanly, just unexpectedly set link_all_deplibs to
no, and the error message
./configure: 13158: test: yes: unexpected operator
stayed unnoticed in the logs.  Actually, link_all_deplibs=no is the
default in Debian, reducing overlinking and causing confusion overall,
see https://debbugs.gnu.org/db/13/13920.html for example.
I think being explicit about used interfaces has its merit, so now that
Corosync has it, it might be advantageous to disable link_all_deplibs
by default across the board (after this patch re-enables it as a side
effect).","Just to make sure I understand what you mean by link_all_deplibs=no, that's what was fixed by 384d168 right?

Yes, the configure script under Debian experimental started to use dash, thus the Bash-only syntax fixed by this PR started to result in an error, which led to link_all_deplibs being set to no (and the unnoticed error message), which consequentially necessitated 384d168.
Now that this change is merged, 384d168 isn't strictly needed anymore, but still spells out an explicit direct library dependency, which is useful in my opinion, but can become inconsistent (and thus confusing) in the future without enforcement.
By default Debian links with --as-needed, so setting link_all_deplibs=yes does not result in massive overlinking of the created binaries and shared libraries, meaning that other applications using Corosync libraries won't notice the change, at least if they directly use the shared objects for linking, not the .la files created by Libtool (which are deprecated and not distributed in Debian). I think the main point here is being consistent with what you advertise in the pkg-config files, and how explicit you want to be in the build system with respect to internal library dependencies.",True,{}
corosync/corosync,https://github.com/corosync/corosync,687,2021-12-04T15:10:41Z,2022-01-03T10:08:51Z,2022-01-19T21:19:13Z,CLOSED,False,1,1,1,https://github.com/wferi,Remove bashism from configure script,1,[],https://github.com/corosync/corosync/pull/687,https://github.com/jfriesse,5,https://github.com/corosync/corosync/pull/687#issuecomment-1011937938,"This was the real problem behind 384d168: Debian experimental now
sports a dash with LINENO support, so configure does not fall back to
using bash instead, choking on such bash-only constructs.  Unfortunately
this didn't bail out cleanly, just unexpectedly set link_all_deplibs to
no, and the error message
./configure: 13158: test: yes: unexpected operator
stayed unnoticed in the logs.  Actually, link_all_deplibs=no is the
default in Debian, reducing overlinking and causing confusion overall,
see https://debbugs.gnu.org/db/13/13920.html for example.
I think being explicit about used interfaces has its merit, so now that
Corosync has it, it might be advantageous to disable link_all_deplibs
by default across the board (after this patch re-enables it as a side
effect).","@wferi Perfect, thank you for confirmation. I'm just wondering why our configure script is fiddling with link_all_deplibsat all and I'm inclined to simply remove that and let just use whatever distro maintainers thinks is best...",True,{}
corosync/corosync,https://github.com/corosync/corosync,687,2021-12-04T15:10:41Z,2022-01-03T10:08:51Z,2022-01-19T21:19:13Z,CLOSED,False,1,1,1,https://github.com/wferi,Remove bashism from configure script,1,[],https://github.com/corosync/corosync/pull/687,https://github.com/wferi,6,https://github.com/corosync/corosync/pull/687#issuecomment-1016877531,"This was the real problem behind 384d168: Debian experimental now
sports a dash with LINENO support, so configure does not fall back to
using bash instead, choking on such bash-only constructs.  Unfortunately
this didn't bail out cleanly, just unexpectedly set link_all_deplibs to
no, and the error message
./configure: 13158: test: yes: unexpected operator
stayed unnoticed in the logs.  Actually, link_all_deplibs=no is the
default in Debian, reducing overlinking and causing confusion overall,
see https://debbugs.gnu.org/db/13/13920.html for example.
I think being explicit about used interfaces has its merit, so now that
Corosync has it, it might be advantageous to disable link_all_deplibs
by default across the board (after this patch re-enables it as a side
effect).","That's a good question. It comes from 2012 (0f1dc5c), but the commit message doesn't provide a rationale. It may well have outlived its usefulness. libqb fiddles with it as well, and I think the comment means internal arrangement, but it isn't perfectly clear. The corosync internal arrangement does not seem to require this now.",True,{}
corosync/corosync,https://github.com/corosync/corosync,690,2022-01-03T13:58:47Z,2022-01-05T13:07:26Z,2022-01-05T13:07:32Z,CLOSED,False,3,1,2,https://github.com/jfriesse,pkgconfig: Export corosysconfdir,1,[],https://github.com/corosync/corosync/pull/690,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/690,"Useful for external code to easily tell where corosync.conf
is (in case someone configured it for /usr/local/etc, ...)
E.g. pacemaker's crm_report collects corosync.conf, and some
of its testing tools generate a corosync.conf for a test cluster.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Useful for external code to easily tell where corosync.conf
is (in case someone configured it for /usr/local/etc, ...)
E.g. pacemaker's crm_report collects corosync.conf, and some
of its testing tools generate a corosync.conf for a test cluster.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,690,2022-01-03T13:58:47Z,2022-01-05T13:07:26Z,2022-01-05T13:07:32Z,CLOSED,False,3,1,2,https://github.com/jfriesse,pkgconfig: Export corosysconfdir,1,[],https://github.com/corosync/corosync/pull/690,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/690#issuecomment-1004223499,"Useful for external code to easily tell where corosync.conf
is (in case someone configured it for /usr/local/etc, ...)
E.g. pacemaker's crm_report collects corosync.conf, and some
of its testing tools generate a corosync.conf for a test cluster.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@knet-ci-bot retest this please,True,{}
corosync/corosync,https://github.com/corosync/corosync,690,2022-01-03T13:58:47Z,2022-01-05T13:07:26Z,2022-01-05T13:07:32Z,CLOSED,False,3,1,2,https://github.com/jfriesse,pkgconfig: Export corosysconfdir,1,[],https://github.com/corosync/corosync/pull/690,https://github.com/kgaillot,3,https://github.com/corosync/corosync/pull/690#issuecomment-1005144985,"Useful for external code to easily tell where corosync.conf
is (in case someone configured it for /usr/local/etc, ...)
E.g. pacemaker's crm_report collects corosync.conf, and some
of its testing tools generate a corosync.conf for a test cluster.
Signed-off-by: Jan Friesse jfriesse@redhat.com",looks good to me,True,{}
corosync/corosync,https://github.com/corosync/corosync,690,2022-01-03T13:58:47Z,2022-01-05T13:07:26Z,2022-01-05T13:07:32Z,CLOSED,False,3,1,2,https://github.com/jfriesse,pkgconfig: Export corosysconfdir,1,[],https://github.com/corosync/corosync/pull/690,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/690#issuecomment-1005670317,"Useful for external code to easily tell where corosync.conf
is (in case someone configured it for /usr/local/etc, ...)
E.g. pacemaker's crm_report collects corosync.conf, and some
of its testing tools generate a corosync.conf for a test cluster.
Signed-off-by: Jan Friesse jfriesse@redhat.com","@kgaillot Perfect, so I've merged patch as a ada1cfa .
@fabbione Thank you for the review!",True,{}
corosync/corosync,https://github.com/corosync/corosync,691,2022-01-31T10:39:06Z,2022-02-01T09:37:33Z,2022-02-01T09:37:36Z,CLOSED,False,3,3,1,https://github.com/jfriesse,totempg: Fix alignment handling,1,[],https://github.com/corosync/corosync/pull/691,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/691,"Some platforms requires aligned memory access. For such platforms,
special code was added using address modulo 4 to check if aligning is
needed or not. This may be problem for 64 bits platforms. Also check in
app_deliver_fn was incorrect and always true.
Solution is to use modulo sizeof pointer and add parentheses to fix the
check in app_deliver_fn function.
Signed-off-by: Jan Friesse jfriesse@redhat.com","Some platforms requires aligned memory access. For such platforms,
special code was added using address modulo 4 to check if aligning is
needed or not. This may be problem for 64 bits platforms. Also check in
app_deliver_fn was incorrect and always true.
Solution is to use modulo sizeof pointer and add parentheses to fix the
check in app_deliver_fn function.
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,691,2022-01-31T10:39:06Z,2022-02-01T09:37:33Z,2022-02-01T09:37:36Z,CLOSED,False,3,3,1,https://github.com/jfriesse,totempg: Fix alignment handling,1,[],https://github.com/corosync/corosync/pull/691,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/691#issuecomment-1025638542,"Some platforms requires aligned memory access. For such platforms,
special code was added using address modulo 4 to check if aligning is
needed or not. This may be problem for 64 bits platforms. Also check in
app_deliver_fn was incorrect and always true.
Solution is to use modulo sizeof pointer and add parentheses to fix the
check in app_deliver_fn function.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@knet-ci-bot retest this please,True,{}
corosync/corosync,https://github.com/corosync/corosync,691,2022-01-31T10:39:06Z,2022-02-01T09:37:33Z,2022-02-01T09:37:36Z,CLOSED,False,3,3,1,https://github.com/jfriesse,totempg: Fix alignment handling,1,[],https://github.com/corosync/corosync/pull/691,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/691#issuecomment-1025672733,"Some platforms requires aligned memory access. For such platforms,
special code was added using address modulo 4 to check if aligning is
needed or not. This may be problem for 64 bits platforms. Also check in
app_deliver_fn was incorrect and always true.
Solution is to use modulo sizeof pointer and add parentheses to fix the
check in app_deliver_fn function.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@knet-ci-bot retest this please,True,{}
corosync/corosync,https://github.com/corosync/corosync,691,2022-01-31T10:39:06Z,2022-02-01T09:37:33Z,2022-02-01T09:37:36Z,CLOSED,False,3,3,1,https://github.com/jfriesse,totempg: Fix alignment handling,1,[],https://github.com/corosync/corosync/pull/691,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/691#issuecomment-1026643289,"Some platforms requires aligned memory access. For such platforms,
special code was added using address modulo 4 to check if aligning is
needed or not. This may be problem for 64 bits platforms. Also check in
app_deliver_fn was incorrect and always true.
Solution is to use modulo sizeof pointer and add parentheses to fix the
check in app_deliver_fn function.
Signed-off-by: Jan Friesse jfriesse@redhat.com",@chrissie-c Thank you for the review. I've merged patch as a 59d3303 .,True,{}
corosync/corosync,https://github.com/corosync/corosync,693,2022-03-08T13:11:39Z,2022-03-08T14:50:46Z,2022-03-08T15:15:05Z,CLOSED,False,1,1,1,https://github.com/grueni,totemconfig: uname in Solaris/Illumos returns non-negative value when…,1,[],https://github.com/corosync/corosync/pull/693,https://github.com/grueni,1,https://github.com/corosync/corosync/pull/693,… successful.,… successful.,True,{}
corosync/corosync,https://github.com/corosync/corosync,693,2022-03-08T13:11:39Z,2022-03-08T14:50:46Z,2022-03-08T15:15:05Z,CLOSED,False,1,1,1,https://github.com/grueni,totemconfig: uname in Solaris/Illumos returns non-negative value when…,1,[],https://github.com/corosync/corosync/pull/693,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/693#issuecomment-1061761427,… successful.,Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,693,2022-03-08T13:11:39Z,2022-03-08T14:50:46Z,2022-03-08T15:15:05Z,CLOSED,False,1,1,1,https://github.com/grueni,totemconfig: uname in Solaris/Illumos returns non-negative value when…,1,[],https://github.com/corosync/corosync/pull/693,https://github.com/jfriesse,3,https://github.com/corosync/corosync/pull/693#issuecomment-1061842902,… successful.,"Hi, thank you for the patch. It's obviously correct, so merged as a 1038e4a . I have just curious question. Are you really running corosync 3 (so with knet and all the changes we made for 3) on Solaris/Illumos? If so, does it work?",True,{}
corosync/corosync,https://github.com/corosync/corosync,693,2022-03-08T13:11:39Z,2022-03-08T14:50:46Z,2022-03-08T15:15:05Z,CLOSED,False,1,1,1,https://github.com/grueni,totemconfig: uname in Solaris/Illumos returns non-negative value when…,1,[],https://github.com/corosync/corosync/pull/693,https://github.com/grueni,4,https://github.com/corosync/corosync/pull/693#issuecomment-1061851131,… successful.,"For the moment I disabled crypto and compression for libknet.
I compiled the latest versions of all components for the cluster components and yes it works.
pcs will come in the next weeks.
No errrors actually with first installation.
If you are curious you can take a look in the branches of https://github.com/grueni/oi-userland.
The branches are the PRs for OpenIndiana repo.",True,{}
corosync/corosync,https://github.com/corosync/corosync,693,2022-03-08T13:11:39Z,2022-03-08T14:50:46Z,2022-03-08T15:15:05Z,CLOSED,False,1,1,1,https://github.com/grueni,totemconfig: uname in Solaris/Illumos returns non-negative value when…,1,[],https://github.com/corosync/corosync/pull/693,https://github.com/fabbione,5,https://github.com/corosync/corosync/pull/693#issuecomment-1061859910,… successful.,"For the moment I disabled crypto and compression for libknet.

Please feel free to share any patch you have on top of knet and we will happily look at them. If OpenIndiana offers cloud images, we can consider adding it to CI as well.",True,{}
corosync/corosync,https://github.com/corosync/corosync,693,2022-03-08T13:11:39Z,2022-03-08T14:50:46Z,2022-03-08T15:15:05Z,CLOSED,False,1,1,1,https://github.com/grueni,totemconfig: uname in Solaris/Illumos returns non-negative value when…,1,[],https://github.com/corosync/corosync/pull/693,https://github.com/jfriesse,6,https://github.com/corosync/corosync/pull/693#issuecomment-1061885525,… successful.,"@grueni Nice work and pretty exciting news.
Thanks you for the link to the repo! Looks like only patch 3 is really portable and one which makes sense to merge upstream. patch 1 is definitively distro specific and patch 2 might be useful ... just wondering where is the definition of struct ether_header in Solaris.",True,{}
corosync/corosync,https://github.com/corosync/corosync,694,2022-03-29T15:14:28Z,2022-03-30T14:19:46Z,2022-03-30T14:19:56Z,CLOSED,False,5,7,2,https://github.com/jfriesse,logrotate: Use copytruncate method by default,1,[],https://github.com/corosync/corosync/pull/694,https://github.com/jfriesse,1,https://github.com/corosync/corosync/pull/694,"The reopen lograte method has two main problems:

It does fail when corosync is not running (solvable by adding ""|| true"")
If (for some reason, like SELinux) cfgtool -L fails, logrotate fails
and corosync keeps logging into old file. Added ""|| true"" makes situation
even worse because logrotate removes file but corosync keeps logging into
it.

Solution is to install copytruncate logrotate snip by default (and keep
reopen config file only for reference).
Signed-off-by: Jan Friesse jfriesse@redhat.com","The reopen lograte method has two main problems:

It does fail when corosync is not running (solvable by adding ""|| true"")
If (for some reason, like SELinux) cfgtool -L fails, logrotate fails
and corosync keeps logging into old file. Added ""|| true"" makes situation
even worse because logrotate removes file but corosync keeps logging into
it.

Solution is to install copytruncate logrotate snip by default (and keep
reopen config file only for reference).
Signed-off-by: Jan Friesse jfriesse@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,694,2022-03-29T15:14:28Z,2022-03-30T14:19:46Z,2022-03-30T14:19:56Z,CLOSED,False,5,7,2,https://github.com/jfriesse,logrotate: Use copytruncate method by default,1,[],https://github.com/corosync/corosync/pull/694,https://github.com/jfriesse,2,https://github.com/corosync/corosync/pull/694#issuecomment-1083200378,"The reopen lograte method has two main problems:

It does fail when corosync is not running (solvable by adding ""|| true"")
If (for some reason, like SELinux) cfgtool -L fails, logrotate fails
and corosync keeps logging into old file. Added ""|| true"" makes situation
even worse because logrotate removes file but corosync keeps logging into
it.

Solution is to install copytruncate logrotate snip by default (and keep
reopen config file only for reference).
Signed-off-by: Jan Friesse jfriesse@redhat.com",Thank you for the review - merged as a 0436204,True,{}
corosync/corosync,https://github.com/corosync/corosync,695,2022-03-30T10:06:23Z,2022-03-31T15:30:56Z,2022-03-31T15:30:56Z,CLOSED,False,72,0,6,https://github.com/chrissie-c,log: Configure knet logging to the same as corosync,1,[],https://github.com/corosync/corosync/pull/695,https://github.com/chrissie-c,1,https://github.com/corosync/corosync/pull/695,"Before this, all knet messages, including debug, were sent
over the pipe from knet to corosync and filtered in corosync.
This was obviously a waste, so now we tell knet the logging
level we need from it and so only get the messages that the
user has requested.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com","Before this, all knet messages, including debug, were sent
over the pipe from knet to corosync and filtered in corosync.
This was obviously a waste, so now we tell knet the logging
level we need from it and so only get the messages that the
user has requested.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",True,{}
corosync/corosync,https://github.com/corosync/corosync,695,2022-03-30T10:06:23Z,2022-03-31T15:30:56Z,2022-03-31T15:30:56Z,CLOSED,False,72,0,6,https://github.com/chrissie-c,log: Configure knet logging to the same as corosync,1,[],https://github.com/corosync/corosync/pull/695,https://github.com/chrissie-c,2,https://github.com/corosync/corosync/pull/695#issuecomment-1083120083,"Before this, all knet messages, including debug, were sent
over the pipe from knet to corosync and filtered in corosync.
This was obviously a waste, so now we tell knet the logging
level we need from it and so only get the messages that the
user has requested.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",retest this please,True,{}
corosync/corosync,https://github.com/corosync/corosync,695,2022-03-30T10:06:23Z,2022-03-31T15:30:56Z,2022-03-31T15:30:56Z,CLOSED,False,72,0,6,https://github.com/chrissie-c,log: Configure knet logging to the same as corosync,1,[],https://github.com/corosync/corosync/pull/695,https://github.com/chrissie-c,3,https://github.com/corosync/corosync/pull/695#issuecomment-1083179147,"Before this, all knet messages, including debug, were sent
over the pipe from knet to corosync and filtered in corosync.
This was obviously a waste, so now we tell knet the logging
level we need from it and so only get the messages that the
user has requested.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",retest this please,True,{}
corosync/corosync,https://github.com/corosync/corosync,695,2022-03-30T10:06:23Z,2022-03-31T15:30:56Z,2022-03-31T15:30:56Z,CLOSED,False,72,0,6,https://github.com/chrissie-c,log: Configure knet logging to the same as corosync,1,[],https://github.com/corosync/corosync/pull/695,https://github.com/fabbione,4,https://github.com/corosync/corosync/pull/695#issuecomment-1083334289,"Before this, all knet messages, including debug, were sent
over the pipe from knet to corosync and filtered in corosync.
This was obviously a waste, so now we tell knet the logging
level we need from it and so only get the messages that the
user has requested.
Signed-off-by: Christine Caulfield ccaulfie@redhat.com",retest this please,True,{}
corosync/corosync,https://github.com/corosync/corosync,697,2022-03-31T17:39:19Z,2022-04-15T13:15:35Z,2022-04-19T08:09:06Z,CLOSED,False,23,1,1,https://github.com/tabraham,coroparse: properly handle trailing comments,3,[],https://github.com/corosync/corosync/pull/697,https://github.com/tabraham,1,https://github.com/corosync/corosync/pull/697,"config lines ending in a comment can lead to the comment being
unexpectedly included as part of a value. trailing comments should
be removed early in the parsing process","config lines ending in a comment can lead to the comment being
unexpectedly included as part of a value. trailing comments should
be removed early in the parsing process",True,{}
corosync/corosync,https://github.com/corosync/corosync,697,2022-03-31T17:39:19Z,2022-04-15T13:15:35Z,2022-04-19T08:09:06Z,CLOSED,False,23,1,1,https://github.com/tabraham,coroparse: properly handle trailing comments,3,[],https://github.com/corosync/corosync/pull/697,https://github.com/knet-ci-bot,2,https://github.com/corosync/corosync/pull/697#issuecomment-1084913202,"config lines ending in a comment can lead to the comment being
unexpectedly included as part of a value. trailing comments should
be removed early in the parsing process",Can one of the admins verify this patch?,True,{}
corosync/corosync,https://github.com/corosync/corosync,697,2022-03-31T17:39:19Z,2022-04-15T13:15:35Z,2022-04-19T08:09:06Z,CLOSED,False,23,1,1,https://github.com/tabraham,coroparse: properly handle trailing comments,3,[],https://github.com/corosync/corosync/pull/697,https://github.com/tabraham,3,https://github.com/corosync/corosync/pull/697#issuecomment-1086145848,"config lines ending in a comment can lead to the comment being
unexpectedly included as part of a value. trailing comments should
be removed early in the parsing process","Thank you for the quick review! I was afraid of this, but wasn't aware of any value in which a '#' would be considered a valid character. This makes it difficult/impossible to determine what may be part of the cluster name from what may be a comment on cluster_name lines. So, to maintain compatibility, perhaps an approach that strips comments from all values except where the key is cluster_name would be acceptable?",True,{}
corosync/corosync,https://github.com/corosync/corosync,697,2022-03-31T17:39:19Z,2022-04-15T13:15:35Z,2022-04-19T08:09:06Z,CLOSED,False,23,1,1,https://github.com/tabraham,coroparse: properly handle trailing comments,3,[],https://github.com/corosync/corosync/pull/697,https://github.com/jfriesse,4,https://github.com/corosync/corosync/pull/697#issuecomment-1087615839,"config lines ending in a comment can lead to the comment being
unexpectedly included as part of a value. trailing comments should
be removed early in the parsing process","Hi. There is more options where '#' is valid. At least logfile, key and probably also nodelist.node.name. It's also quite hard to decide if some other sw is not using cmap for storing some data and be affected by this change (for example cluster_name was previously not standardized in corosync - it was invented by pacemaker).
Another problem I see with this approach is unpredictability (from user point of view) - why some comments are removed and some are not?
Another problem, I believe quite nicely solvable with not too much code, is that trailing comments are not removed from the beginning and end of sections (so section { # Comment and } # Comment).
Said all of these - I really appreciate your work and really understand (and agree) that removing of trailing comments is expected and would make corosync config file much easier to read - but I really think there is nothing we can do in this phase (for corosync 3) so my purposed solution is to open new issue (RFE) for Corosync 4 to rework parser and close this PR.
@chrissie-c What do you think?",True,{}
corosync/corosync,https://github.com/corosync/corosync,697,2022-03-31T17:39:19Z,2022-04-15T13:15:35Z,2022-04-19T08:09:06Z,CLOSED,False,23,1,1,https://github.com/tabraham,coroparse: properly handle trailing comments,3,[],https://github.com/corosync/corosync/pull/697,https://github.com/chrissie-c,5,https://github.com/corosync/corosync/pull/697#issuecomment-1087656859,"config lines ending in a comment can lead to the comment being
unexpectedly included as part of a value. trailing comments should
be removed early in the parsing process","I agree with Honza, there is an intrinsic conflict between the current  corosynf.conf content and removing anything trailing any specific character. If we had started out with a pre-existing parser module rather than this roll-your-own version then we probably wouldn't be in this situation. And that would also have mandated quotes around strings :)
So, yes I think this is corosync4 material which, if we are going to do something serious about it, would probably mean pulling in a 'real' parser module from somewhere. That would allow us to make config file format changes which we really can't do for corosync3, sadly.",True,{}
corosync/corosync,https://github.com/corosync/corosync,697,2022-03-31T17:39:19Z,2022-04-15T13:15:35Z,2022-04-19T08:09:06Z,CLOSED,False,23,1,1,https://github.com/tabraham,coroparse: properly handle trailing comments,3,[],https://github.com/corosync/corosync/pull/697,https://github.com/tabraham,6,https://github.com/corosync/corosync/pull/697#issuecomment-1092833553,"config lines ending in a comment can lead to the comment being
unexpectedly included as part of a value. trailing comments should
be removed early in the parsing process","OK, so cluster_name isn't the only option that in which a '#' is valid in a value.
I understand a better solution is a 'real' parser, but was trying for something that would maintain compatibility and also reduce the likelihood of a trailing comment causing a non-obvious problem.
For background, someone got bitten by trailing comments in the values for ring0_addr, which resulted in all of the node addresses being invalid. It didn't result in a parsing error and the cause was not immediately obvious to them. This is the type of issue I'm attempting to address.",True,{}
corosync/corosync,https://github.com/corosync/corosync,697,2022-03-31T17:39:19Z,2022-04-15T13:15:35Z,2022-04-19T08:09:06Z,CLOSED,False,23,1,1,https://github.com/tabraham,coroparse: properly handle trailing comments,3,[],https://github.com/corosync/corosync/pull/697,https://github.com/tabraham,7,https://github.com/corosync/corosync/pull/697#issuecomment-1100103065,"config lines ending in a comment can lead to the comment being
unexpectedly included as part of a value. trailing comments should
be removed early in the parsing process","Given the feedback, I'm going to go ahead and close this -- it doesn't appear there is a compatible way to add support for trailing comments in the config file. I may try another approach.
Thank you all",True,{}
corosync/corosync,https://github.com/corosync/corosync,697,2022-03-31T17:39:19Z,2022-04-15T13:15:35Z,2022-04-19T08:09:06Z,CLOSED,False,23,1,1,https://github.com/tabraham,coroparse: properly handle trailing comments,3,[],https://github.com/corosync/corosync/pull/697,https://github.com/jfriesse,8,https://github.com/corosync/corosync/pull/697#issuecomment-1102255645,"config lines ending in a comment can lead to the comment being
unexpectedly included as part of a value. trailing comments should
be removed early in the parsing process",I've opened #698 so the problem of config parser is not forgotten during 4.x preparations.,True,{}
